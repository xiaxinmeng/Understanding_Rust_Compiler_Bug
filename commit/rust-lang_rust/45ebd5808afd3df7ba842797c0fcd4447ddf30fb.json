{"sha": "45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1ZWJkNTgwOGFmZDNkZjdiYTg0Mjc5N2MwZmNkNDQ0N2RkZjMwZmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-15T20:40:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-15T20:40:16Z"}, "message": "Auto merge of #68944 - Zoxc:hir-map, r=eddyb\n\nUse queries for the HIR map\n\nr? @eddyb cc @michaelwoerister", "tree": {"sha": "7815a11dc0843280c41cb143525cc0f2829cf9ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7815a11dc0843280c41cb143525cc0f2829cf9ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "html_url": "https://github.com/rust-lang/rust/commit/45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0f5df017368dc3f7cb458fc6d5a5e0420e1d2e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0f5df017368dc3f7cb458fc6d5a5e0420e1d2e5", "html_url": "https://github.com/rust-lang/rust/commit/e0f5df017368dc3f7cb458fc6d5a5e0420e1d2e5"}, {"sha": "14fdd85a5aa3768e5896d9ca638488722f7e9e94", "url": "https://api.github.com/repos/rust-lang/rust/commits/14fdd85a5aa3768e5896d9ca638488722f7e9e94", "html_url": "https://github.com/rust-lang/rust/commit/14fdd85a5aa3768e5896d9ca638488722f7e9e94"}], "stats": {"total": 3152, "additions": 1526, "deletions": 1626}, "files": [{"sha": "72258c0537a96eddafc86113c01bd7535925fc61", "filename": "src/librustc/arena.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Farena.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -161,6 +161,12 @@ macro_rules! arena_types {\n             [] type_binding: rustc_hir::TypeBinding<$tcx>,\n             [] variant: rustc_hir::Variant<$tcx>,\n             [] where_predicate: rustc_hir::WherePredicate<$tcx>,\n+\n+            // HIR query types\n+            [few] indexed_hir: rustc::hir::map::IndexedHir<$tcx>,\n+            [few] hir_definitions: rustc::hir::map::definitions::Definitions,\n+            [] hir_owner: rustc::hir::HirOwner<$tcx>,\n+            [] hir_owner_items: rustc::hir::HirOwnerItems<$tcx>,\n         ], $tcx);\n     )\n }"}, {"sha": "e3df9d5d04be106727dd783d97e5a3103931a1aa", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 4, "deletions": 19, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -35,7 +35,7 @@\n //! \"infer\" some properties for each kind of `DepNode`:\n //!\n //! * Whether a `DepNode` of a given kind has any parameters at all. Some\n-//!   `DepNode`s, like `AllLocalTraitImpls`, represent global concepts with only one value.\n+//!   `DepNode`s could represent global concepts with only one value.\n //! * Whether it is possible, in principle, to reconstruct a query key from a\n //!   given `DepNode`. Many `DepKind`s only require a single `DefId` parameter,\n //!   in which case it is possible to map the node's fingerprint back to the\n@@ -223,8 +223,8 @@ macro_rules! define_dep_nodes {\n             /// Construct a DepNode from the given DepKind and DefPathHash. This\n             /// method will assert that the given DepKind actually requires a\n             /// single DefId/DefPathHash parameter.\n-            pub fn from_def_path_hash(kind: DepKind,\n-                                      def_path_hash: DefPathHash)\n+            pub fn from_def_path_hash(def_path_hash: DefPathHash,\n+                                      kind: DepKind)\n                                       -> DepNode {\n                 debug_assert!(kind.can_reconstruct_query_key() && kind.has_params());\n                 DepNode {\n@@ -280,7 +280,7 @@ macro_rules! define_dep_nodes {\n                 }\n \n                 if kind.has_params() {\n-                    Ok(def_path_hash.to_dep_node(kind))\n+                    Ok(DepNode::from_def_path_hash(def_path_hash, kind))\n                 } else {\n                     Ok(DepNode::new_no_params(kind))\n                 }\n@@ -337,28 +337,13 @@ impl fmt::Debug for DepNode {\n     }\n }\n \n-impl DefPathHash {\n-    pub fn to_dep_node(self, kind: DepKind) -> DepNode {\n-        DepNode::from_def_path_hash(kind, self)\n-    }\n-}\n-\n rustc_dep_node_append!([define_dep_nodes!][ <'tcx>\n     // We use this for most things when incr. comp. is turned off.\n     [] Null,\n \n-    // Represents the body of a function or method. The def-id is that of the\n-    // function/method.\n-    [eval_always] HirBody(DefId),\n-\n-    // Represents the HIR node with the given node-id\n-    [eval_always] Hir(DefId),\n-\n     // Represents metadata from an extern crate.\n     [eval_always] CrateMetadata(CrateNum),\n \n-    [eval_always] AllLocalTraitImpls,\n-\n     [anon] TraitSelect,\n \n     [] CompileCodegenUnit(Symbol),"}, {"sha": "97114b9e313f10f8ad3a52cfc6688bc8d5279cf8", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 15, "deletions": 30, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -225,28 +225,6 @@ impl DepGraph {\n         )\n     }\n \n-    /// Creates a new dep-graph input with value `input`\n-    pub fn input_task<'a, C, R>(&self, key: DepNode, cx: C, input: R) -> (R, DepNodeIndex)\n-    where\n-        C: DepGraphSafe + StableHashingContextProvider<'a>,\n-        R: for<'b> HashStable<StableHashingContext<'b>>,\n-    {\n-        fn identity_fn<C, A>(_: C, arg: A) -> A {\n-            arg\n-        }\n-\n-        self.with_task_impl(\n-            key,\n-            cx,\n-            input,\n-            true,\n-            identity_fn,\n-            |_| None,\n-            |data, key, fingerprint, _| data.alloc_node(key, SmallVec::new(), fingerprint),\n-            hash_result::<R>,\n-        )\n-    }\n-\n     fn with_task_impl<'a, C, A, R>(\n         &self,\n         key: DepNode,\n@@ -676,18 +654,25 @@ impl DepGraph {\n                             continue;\n                         }\n                     } else {\n+                        // FIXME: This match is just a workaround for incremental bugs and should\n+                        // be removed. https://github.com/rust-lang/rust/issues/62649 is one such\n+                        // bug that must be fixed before removing this.\n                         match dep_dep_node.kind {\n-                            DepKind::Hir | DepKind::HirBody | DepKind::CrateMetadata => {\n+                            DepKind::hir_owner\n+                            | DepKind::hir_owner_items\n+                            | DepKind::CrateMetadata => {\n                                 if let Some(def_id) = dep_dep_node.extract_def_id(tcx) {\n                                     if def_id_corresponds_to_hir_dep_node(tcx, def_id) {\n-                                        // The `DefPath` has corresponding node,\n-                                        // and that node should have been marked\n-                                        // either red or green in `data.colors`.\n-                                        bug!(\n-                                            \"DepNode {:?} should have been \\\n+                                        if dep_dep_node.kind == DepKind::CrateMetadata {\n+                                            // The `DefPath` has corresponding node,\n+                                            // and that node should have been marked\n+                                            // either red or green in `data.colors`.\n+                                            bug!(\n+                                                \"DepNode {:?} should have been \\\n                                              pre-marked as red or green but wasn't.\",\n-                                            dep_dep_node\n-                                        );\n+                                                dep_dep_node\n+                                            );\n+                                        }\n                                     } else {\n                                         // This `DefPath` does not have a\n                                         // corresponding `DepNode` (e.g. a"}, {"sha": "e8233c0446d1f92dcbf875b03f0d2695d92f5cd9", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 106, "deletions": 139, "changes": 245, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -1,9 +1,9 @@\n-use crate::dep_graph::{DepGraph, DepKind, DepNode, DepNodeIndex};\n+use crate::arena::Arena;\n use crate::hir::map::definitions::{self, DefPathHash};\n-use crate::hir::map::{Entry, HirEntryMap, Map};\n+use crate::hir::map::{Entry, HirOwnerData, Map};\n+use crate::hir::{HirItem, HirOwner, HirOwnerItems};\n use crate::ich::StableHashingContext;\n use crate::middle::cstore::CrateStore;\n-use rustc_ast::ast::NodeId;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n@@ -13,7 +13,7 @@ use rustc_hir::def_id::CRATE_DEF_INDEX;\n use rustc_hir::def_id::{CrateNum, DefIndex, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::*;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::vec::{Idx, IndexVec};\n use rustc_session::{CrateDisambiguator, Session};\n use rustc_span::source_map::SourceMap;\n use rustc_span::{Span, Symbol, DUMMY_SP};\n@@ -22,76 +22,57 @@ use std::iter::repeat;\n \n /// A visitor that walks over the HIR and collects `Node`s into a HIR map.\n pub(super) struct NodeCollector<'a, 'hir> {\n+    arena: &'hir Arena<'hir>,\n+\n     /// The crate\n     krate: &'hir Crate<'hir>,\n \n     /// Source map\n     source_map: &'a SourceMap,\n \n-    /// The node map\n-    map: HirEntryMap<'hir>,\n+    map: IndexVec<DefIndex, HirOwnerData<'hir>>,\n+\n     /// The parent of this node\n     parent_node: hir::HirId,\n \n-    // These fields keep track of the currently relevant DepNodes during\n-    // the visitor's traversal.\n     current_dep_node_owner: DefIndex,\n-    current_signature_dep_index: DepNodeIndex,\n-    current_full_dep_index: DepNodeIndex,\n-    currently_in_body: bool,\n \n-    dep_graph: &'a DepGraph,\n     definitions: &'a definitions::Definitions,\n-    hir_to_node_id: &'a FxHashMap<HirId, NodeId>,\n \n     hcx: StableHashingContext<'a>,\n \n-    // We are collecting `DepNode::HirBody` hashes here so we can compute the\n-    // crate hash from then later on.\n+    // We are collecting HIR hashes here so we can compute the\n+    // crate hash from them later on.\n     hir_body_nodes: Vec<(DefPathHash, Fingerprint)>,\n }\n \n-fn input_dep_node_and_hash(\n-    dep_graph: &DepGraph,\n+fn insert_vec_map<K: Idx, V: Clone>(map: &mut IndexVec<K, Option<V>>, k: K, v: V) {\n+    let i = k.index();\n+    let len = map.len();\n+    if i >= len {\n+        map.extend(repeat(None).take(i - len + 1));\n+    }\n+    map[k] = Some(v);\n+}\n+\n+fn hash(\n     hcx: &mut StableHashingContext<'_>,\n-    dep_node: DepNode,\n     input: impl for<'a> HashStable<StableHashingContext<'a>>,\n-) -> (DepNodeIndex, Fingerprint) {\n-    let dep_node_index = dep_graph.input_task(dep_node, &mut *hcx, &input).1;\n-\n-    let hash = if dep_graph.is_fully_enabled() {\n-        dep_graph.fingerprint_of(dep_node_index)\n-    } else {\n-        let mut stable_hasher = StableHasher::new();\n-        input.hash_stable(hcx, &mut stable_hasher);\n-        stable_hasher.finish()\n-    };\n-\n-    (dep_node_index, hash)\n+) -> Fingerprint {\n+    let mut stable_hasher = StableHasher::new();\n+    input.hash_stable(hcx, &mut stable_hasher);\n+    stable_hasher.finish()\n }\n \n-fn alloc_hir_dep_nodes(\n-    dep_graph: &DepGraph,\n+fn hash_body(\n     hcx: &mut StableHashingContext<'_>,\n     def_path_hash: DefPathHash,\n     item_like: impl for<'a> HashStable<StableHashingContext<'a>>,\n     hir_body_nodes: &mut Vec<(DefPathHash, Fingerprint)>,\n-) -> (DepNodeIndex, DepNodeIndex) {\n-    let sig = dep_graph\n-        .input_task(\n-            def_path_hash.to_dep_node(DepKind::Hir),\n-            &mut *hcx,\n-            HirItemLike { item_like: &item_like, hash_bodies: false },\n-        )\n-        .1;\n-    let (full, hash) = input_dep_node_and_hash(\n-        dep_graph,\n-        hcx,\n-        def_path_hash.to_dep_node(DepKind::HirBody),\n-        HirItemLike { item_like: &item_like, hash_bodies: true },\n-    );\n+) -> Fingerprint {\n+    let hash = hash(hcx, HirItemLike { item_like: &item_like });\n     hir_body_nodes.push((def_path_hash, hash));\n-    (sig, full)\n+    hash\n }\n \n fn upstream_crates(cstore: &dyn CrateStore) -> Vec<(Symbol, Fingerprint, Svh)> {\n@@ -112,24 +93,18 @@ fn upstream_crates(cstore: &dyn CrateStore) -> Vec<(Symbol, Fingerprint, Svh)> {\n impl<'a, 'hir> NodeCollector<'a, 'hir> {\n     pub(super) fn root(\n         sess: &'a Session,\n+        arena: &'hir Arena<'hir>,\n         krate: &'hir Crate<'hir>,\n-        dep_graph: &'a DepGraph,\n         definitions: &'a definitions::Definitions,\n-        hir_to_node_id: &'a FxHashMap<HirId, NodeId>,\n         mut hcx: StableHashingContext<'a>,\n     ) -> NodeCollector<'a, 'hir> {\n         let root_mod_def_path_hash = definitions.def_path_hash(CRATE_DEF_INDEX);\n \n         let mut hir_body_nodes = Vec::new();\n \n-        // Allocate `DepNode`s for the root module.\n-        let (root_mod_sig_dep_index, root_mod_full_dep_index) = {\n+        let hash = {\n             let Crate {\n-                ref module,\n-                // Crate attributes are not copied over to the root `Mod`, so hash\n-                // them explicitly here.\n-                ref attrs,\n-                span,\n+                ref item,\n                 // These fields are handled separately:\n                 exported_macros: _,\n                 non_exported_macro_attrs: _,\n@@ -143,45 +118,26 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n                 proc_macros: _,\n             } = *krate;\n \n-            alloc_hir_dep_nodes(\n-                dep_graph,\n-                &mut hcx,\n-                root_mod_def_path_hash,\n-                (module, attrs, span),\n-                &mut hir_body_nodes,\n-            )\n+            hash_body(&mut hcx, root_mod_def_path_hash, item, &mut hir_body_nodes)\n         };\n \n-        {\n-            dep_graph.input_task(\n-                DepNode::new_no_params(DepKind::AllLocalTraitImpls),\n-                &mut hcx,\n-                &krate.trait_impls,\n-            );\n-        }\n-\n         let mut collector = NodeCollector {\n+            arena,\n             krate,\n             source_map: sess.source_map(),\n-            map: IndexVec::from_elem_n(IndexVec::new(), definitions.def_index_count()),\n             parent_node: hir::CRATE_HIR_ID,\n-            current_signature_dep_index: root_mod_sig_dep_index,\n-            current_full_dep_index: root_mod_full_dep_index,\n             current_dep_node_owner: CRATE_DEF_INDEX,\n-            currently_in_body: false,\n-            dep_graph,\n             definitions,\n-            hir_to_node_id,\n             hcx,\n             hir_body_nodes,\n+            map: (0..definitions.def_index_count())\n+                .map(|_| HirOwnerData { signature: None, with_bodies: None })\n+                .collect(),\n         };\n         collector.insert_entry(\n             hir::CRATE_HIR_ID,\n-            Entry {\n-                parent: hir::CRATE_HIR_ID,\n-                dep_node: root_mod_sig_dep_index,\n-                node: Node::Crate,\n-            },\n+            Entry { parent: hir::CRATE_HIR_ID, node: Node::Crate(&krate.item) },\n+            hash,\n         );\n \n         collector\n@@ -192,7 +148,13 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n         crate_disambiguator: CrateDisambiguator,\n         cstore: &dyn CrateStore,\n         commandline_args_hash: u64,\n-    ) -> (HirEntryMap<'hir>, Svh) {\n+    ) -> (IndexVec<DefIndex, HirOwnerData<'hir>>, Svh) {\n+        // Insert bodies into the map\n+        for (id, body) in self.krate.bodies.iter() {\n+            let bodies = &mut self.map[id.hir_id.owner].with_bodies.as_mut().unwrap().bodies;\n+            assert!(bodies.insert(id.hir_id.local_id, body).is_none());\n+        }\n+\n         self.hir_body_nodes.sort_unstable_by_key(|bn| bn.0);\n \n         let node_hashes = self.hir_body_nodes.iter().fold(\n@@ -232,32 +194,53 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n         (self.map, svh)\n     }\n \n-    fn insert_entry(&mut self, id: HirId, entry: Entry<'hir>) {\n-        debug!(\"hir_map: {:?} => {:?}\", id, entry);\n-        let local_map = &mut self.map[id.owner];\n+    fn insert_entry(&mut self, id: HirId, entry: Entry<'hir>, hash: Fingerprint) {\n         let i = id.local_id.as_u32() as usize;\n-        let len = local_map.len();\n-        if i >= len {\n-            local_map.extend(repeat(None).take(i - len + 1));\n+\n+        let arena = self.arena;\n+\n+        let data = &mut self.map[id.owner];\n+\n+        if data.with_bodies.is_none() {\n+            data.with_bodies = Some(arena.alloc(HirOwnerItems {\n+                hash,\n+                items: IndexVec::new(),\n+                bodies: FxHashMap::default(),\n+            }));\n+        }\n+\n+        let items = data.with_bodies.as_mut().unwrap();\n+\n+        if i == 0 {\n+            // Overwrite the dummy hash with the real HIR owner hash.\n+            items.hash = hash;\n+\n+            // FIXME: feature(impl_trait_in_bindings) broken and trigger this assert\n+            //assert!(data.signature.is_none());\n+\n+            data.signature =\n+                Some(self.arena.alloc(HirOwner { parent: entry.parent, node: entry.node }));\n+        } else {\n+            assert_eq!(entry.parent.owner, id.owner);\n+            insert_vec_map(\n+                &mut items.items,\n+                id.local_id,\n+                HirItem { parent: entry.parent.local_id, node: entry.node },\n+            );\n         }\n-        local_map[id.local_id] = Some(entry);\n     }\n \n     fn insert(&mut self, span: Span, hir_id: HirId, node: Node<'hir>) {\n-        let entry = Entry {\n-            parent: self.parent_node,\n-            dep_node: if self.currently_in_body {\n-                self.current_full_dep_index\n-            } else {\n-                self.current_signature_dep_index\n-            },\n-            node,\n-        };\n+        self.insert_with_hash(span, hir_id, node, Fingerprint::ZERO)\n+    }\n+\n+    fn insert_with_hash(&mut self, span: Span, hir_id: HirId, node: Node<'hir>, hash: Fingerprint) {\n+        let entry = Entry { parent: self.parent_node, node };\n \n         // Make sure that the DepNode of some node coincides with the HirId\n         // owner of that node.\n         if cfg!(debug_assertions) {\n-            let node_id = self.hir_to_node_id[&hir_id];\n+            let node_id = self.definitions.hir_to_node_id(hir_id);\n             assert_eq!(self.definitions.node_to_hir_id(node_id), hir_id);\n \n             if hir_id.owner != self.current_dep_node_owner {\n@@ -287,7 +270,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n             }\n         }\n \n-        self.insert_entry(hir_id, entry);\n+        self.insert_entry(hir_id, entry, hash);\n     }\n \n     fn with_parent<F: FnOnce(&mut Self)>(&mut self, parent_node_id: HirId, f: F) {\n@@ -299,37 +282,22 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n \n     fn with_dep_node_owner<\n         T: for<'b> HashStable<StableHashingContext<'b>>,\n-        F: FnOnce(&mut Self),\n+        F: FnOnce(&mut Self, Fingerprint),\n     >(\n         &mut self,\n         dep_node_owner: DefIndex,\n         item_like: &T,\n         f: F,\n     ) {\n         let prev_owner = self.current_dep_node_owner;\n-        let prev_signature_dep_index = self.current_signature_dep_index;\n-        let prev_full_dep_index = self.current_full_dep_index;\n-        let prev_in_body = self.currently_in_body;\n \n         let def_path_hash = self.definitions.def_path_hash(dep_node_owner);\n \n-        let (signature_dep_index, full_dep_index) = alloc_hir_dep_nodes(\n-            self.dep_graph,\n-            &mut self.hcx,\n-            def_path_hash,\n-            item_like,\n-            &mut self.hir_body_nodes,\n-        );\n-        self.current_signature_dep_index = signature_dep_index;\n-        self.current_full_dep_index = full_dep_index;\n+        let hash = hash_body(&mut self.hcx, def_path_hash, item_like, &mut self.hir_body_nodes);\n \n         self.current_dep_node_owner = dep_node_owner;\n-        self.currently_in_body = false;\n-        f(self);\n-        self.currently_in_body = prev_in_body;\n+        f(self, hash);\n         self.current_dep_node_owner = prev_owner;\n-        self.current_full_dep_index = prev_full_dep_index;\n-        self.current_signature_dep_index = prev_signature_dep_index;\n     }\n }\n \n@@ -340,7 +308,7 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n     /// deep walking so that we walk nested items in the context of\n     /// their outer items.\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         panic!(\"`visit_nested_xxx` must be manually implemented in this visitor\");\n     }\n \n@@ -358,10 +326,7 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n     }\n \n     fn visit_nested_body(&mut self, id: BodyId) {\n-        let prev_in_body = self.currently_in_body;\n-        self.currently_in_body = true;\n         self.visit_body(self.krate.body(id));\n-        self.currently_in_body = prev_in_body;\n     }\n \n     fn visit_param(&mut self, param: &'hir Param<'hir>) {\n@@ -376,10 +341,10 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n         debug!(\"visit_item: {:?}\", i);\n         debug_assert_eq!(\n             i.hir_id.owner,\n-            self.definitions.opt_def_index(self.hir_to_node_id[&i.hir_id]).unwrap()\n+            self.definitions.opt_def_index(self.definitions.hir_to_node_id(i.hir_id)).unwrap()\n         );\n-        self.with_dep_node_owner(i.hir_id.owner, i, |this| {\n-            this.insert(i.span, i.hir_id, Node::Item(i));\n+        self.with_dep_node_owner(i.hir_id.owner, i, |this, hash| {\n+            this.insert_with_hash(i.span, i.hir_id, Node::Item(i), hash);\n             this.with_parent(i.hir_id, |this| {\n                 if let ItemKind::Struct(ref struct_def, _) = i.kind {\n                     // If this is a tuple or unit-like struct, register the constructor.\n@@ -408,10 +373,10 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n     fn visit_trait_item(&mut self, ti: &'hir TraitItem<'hir>) {\n         debug_assert_eq!(\n             ti.hir_id.owner,\n-            self.definitions.opt_def_index(self.hir_to_node_id[&ti.hir_id]).unwrap()\n+            self.definitions.opt_def_index(self.definitions.hir_to_node_id(ti.hir_id)).unwrap()\n         );\n-        self.with_dep_node_owner(ti.hir_id.owner, ti, |this| {\n-            this.insert(ti.span, ti.hir_id, Node::TraitItem(ti));\n+        self.with_dep_node_owner(ti.hir_id.owner, ti, |this, hash| {\n+            this.insert_with_hash(ti.span, ti.hir_id, Node::TraitItem(ti), hash);\n \n             this.with_parent(ti.hir_id, |this| {\n                 intravisit::walk_trait_item(this, ti);\n@@ -422,10 +387,10 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n     fn visit_impl_item(&mut self, ii: &'hir ImplItem<'hir>) {\n         debug_assert_eq!(\n             ii.hir_id.owner,\n-            self.definitions.opt_def_index(self.hir_to_node_id[&ii.hir_id]).unwrap()\n+            self.definitions.opt_def_index(self.definitions.hir_to_node_id(ii.hir_id)).unwrap()\n         );\n-        self.with_dep_node_owner(ii.hir_id.owner, ii, |this| {\n-            this.insert(ii.span, ii.hir_id, Node::ImplItem(ii));\n+        self.with_dep_node_owner(ii.hir_id.owner, ii, |this, hash| {\n+            this.insert_with_hash(ii.span, ii.hir_id, Node::ImplItem(ii), hash);\n \n             this.with_parent(ii.hir_id, |this| {\n                 intravisit::walk_impl_item(this, ii);\n@@ -541,11 +506,16 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n     }\n \n     fn visit_macro_def(&mut self, macro_def: &'hir MacroDef<'hir>) {\n-        let node_id = self.hir_to_node_id[&macro_def.hir_id];\n+        let node_id = self.definitions.hir_to_node_id(macro_def.hir_id);\n         let def_index = self.definitions.opt_def_index(node_id).unwrap();\n \n-        self.with_dep_node_owner(def_index, macro_def, |this| {\n-            this.insert(macro_def.span, macro_def.hir_id, Node::MacroDef(macro_def));\n+        self.with_dep_node_owner(def_index, macro_def, |this, hash| {\n+            this.insert_with_hash(\n+                macro_def.span,\n+                macro_def.hir_id,\n+                Node::MacroDef(macro_def),\n+                hash,\n+            );\n         });\n     }\n \n@@ -584,19 +554,16 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n     }\n }\n \n-// This is a wrapper structure that allows determining if span values within\n-// the wrapped item should be hashed or not.\n struct HirItemLike<T> {\n     item_like: T,\n-    hash_bodies: bool,\n }\n \n impl<'hir, T> HashStable<StableHashingContext<'hir>> for HirItemLike<T>\n where\n     T: HashStable<StableHashingContext<'hir>>,\n {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'hir>, hasher: &mut StableHasher) {\n-        hcx.while_hashing_hir_bodies(self.hash_bodies, |hcx| {\n+        hcx.while_hashing_hir_bodies(true, |hcx| {\n             self.item_like.hash_stable(hcx, hasher);\n         });\n     }"}, {"sha": "42ccf7e72504b7f34bb39bcaa1cfc013a58edc84", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 18, "deletions": 24, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -6,7 +6,6 @@\n \n use rustc_ast::ast;\n use rustc_ast::node_id::NodeMap;\n-use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::StableHasher;\n use rustc_hir as hir;\n@@ -17,10 +16,11 @@ use rustc_span::hygiene::ExpnId;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n \n-use std::borrow::Borrow;\n use std::fmt::Write;\n use std::hash::Hash;\n \n+pub use rustc_hir::def_id::DefPathHash;\n+\n /// The `DefPathTable` maps `DefIndex`es to `DefKey`s and vice versa.\n /// Internally the `DefPathTable` holds a tree of `DefKey`s, where each `DefKey`\n /// stores the `DefIndex` of its parent.\n@@ -80,7 +80,11 @@ pub struct Definitions {\n     table: DefPathTable,\n     node_to_def_index: NodeMap<DefIndex>,\n     def_index_to_node: IndexVec<DefIndex, ast::NodeId>,\n+\n     pub(super) node_to_hir_id: IndexVec<ast::NodeId, hir::HirId>,\n+    /// The reverse mapping of `node_to_hir_id`.\n+    pub(super) hir_to_node_id: FxHashMap<hir::HirId, ast::NodeId>,\n+\n     /// If `ExpnId` is an ID of some macro expansion,\n     /// then `DefId` is the normal module (`mod`) in which the expanded macro was defined.\n     parent_modules_of_macro_defs: FxHashMap<ExpnId, DefId>,\n@@ -282,28 +286,6 @@ pub enum DefPathData {\n     ImplTrait,\n }\n \n-#[derive(\n-    Copy,\n-    Clone,\n-    Hash,\n-    PartialEq,\n-    Eq,\n-    PartialOrd,\n-    Ord,\n-    Debug,\n-    RustcEncodable,\n-    RustcDecodable,\n-    HashStable\n-)]\n-pub struct DefPathHash(pub Fingerprint);\n-\n-impl Borrow<Fingerprint> for DefPathHash {\n-    #[inline]\n-    fn borrow(&self) -> &Fingerprint {\n-        &self.0\n-    }\n-}\n-\n impl Definitions {\n     pub fn def_path_table(&self) -> &DefPathTable {\n         &self.table\n@@ -368,6 +350,11 @@ impl Definitions {\n         }\n     }\n \n+    #[inline]\n+    pub fn hir_to_node_id(&self, hir_id: hir::HirId) -> ast::NodeId {\n+        self.hir_to_node_id[&hir_id]\n+    }\n+\n     #[inline]\n     pub fn node_to_hir_id(&self, node_id: ast::NodeId) -> hir::HirId {\n         self.node_to_hir_id[node_id]\n@@ -494,6 +481,13 @@ impl Definitions {\n             \"trying to initialize `NodeId` -> `HirId` mapping twice\"\n         );\n         self.node_to_hir_id = mapping;\n+\n+        // Build the reverse mapping of `node_to_hir_id`.\n+        self.hir_to_node_id = self\n+            .node_to_hir_id\n+            .iter_enumerated()\n+            .map(|(node_id, &hir_id)| (hir_id, node_id))\n+            .collect();\n     }\n \n     pub fn expansion_that_defined(&self, index: DefIndex) -> ExpnId {"}, {"sha": "796f489547269a0b36daa73c7a82a59cc16c027d", "filename": "src/librustc/hir/map/hir_id_validator.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -1,4 +1,5 @@\n use crate::hir::map::Map;\n+use crate::ty::TyCtxt;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::{par_iter, Lock, ParallelIterator};\n use rustc_hir as hir;\n@@ -7,12 +8,13 @@ use rustc_hir::intravisit;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::{HirId, ItemLocalId};\n \n-pub fn check_crate(hir_map: &Map<'_>, sess: &rustc_session::Session) {\n-    hir_map.dep_graph.assert_ignored();\n+pub fn check_crate(tcx: TyCtxt<'_>) {\n+    tcx.dep_graph.assert_ignored();\n \n     let errors = Lock::new(Vec::new());\n+    let hir_map = tcx.hir();\n \n-    par_iter(&hir_map.krate.modules).for_each(|(module_id, _)| {\n+    par_iter(&hir_map.krate().modules).for_each(|(module_id, _)| {\n         let local_def_id = hir_map.local_def_id(*module_id);\n         hir_map.visit_item_likes_in_module(\n             local_def_id,\n@@ -24,24 +26,24 @@ pub fn check_crate(hir_map: &Map<'_>, sess: &rustc_session::Session) {\n \n     if !errors.is_empty() {\n         let message = errors.iter().fold(String::new(), |s1, s2| s1 + \"\\n\" + s2);\n-        sess.delay_span_bug(rustc_span::DUMMY_SP, &message);\n+        tcx.sess.delay_span_bug(rustc_span::DUMMY_SP, &message);\n     }\n }\n \n struct HirIdValidator<'a, 'hir> {\n-    hir_map: &'a Map<'hir>,\n+    hir_map: Map<'hir>,\n     owner_def_index: Option<DefIndex>,\n     hir_ids_seen: FxHashSet<ItemLocalId>,\n     errors: &'a Lock<Vec<String>>,\n }\n \n struct OuterVisitor<'a, 'hir> {\n-    hir_map: &'a Map<'hir>,\n+    hir_map: Map<'hir>,\n     errors: &'a Lock<Vec<String>>,\n }\n \n impl<'a, 'hir> OuterVisitor<'a, 'hir> {\n-    fn new_inner_visitor(&self, hir_map: &'a Map<'hir>) -> HirIdValidator<'a, 'hir> {\n+    fn new_inner_visitor(&self, hir_map: Map<'hir>) -> HirIdValidator<'a, 'hir> {\n         HirIdValidator {\n             hir_map,\n             owner_def_index: None,\n@@ -109,9 +111,9 @@ impl<'a, 'hir> HirIdValidator<'a, 'hir> {\n                 trace!(\"missing hir id {:#?}\", hir_id);\n \n                 missing_items.push(format!(\n-                    \"[local_id: {}, node:{}]\",\n+                    \"[local_id: {}, owner: {}]\",\n                     local_id,\n-                    self.hir_map.node_to_string(hir_id)\n+                    self.hir_map.def_path(DefId::local(owner_def_index)).to_string_no_crate()\n                 ));\n             }\n             self.error(|| {\n@@ -135,7 +137,7 @@ impl<'a, 'hir> HirIdValidator<'a, 'hir> {\n impl<'a, 'hir> intravisit::Visitor<'hir> for HirIdValidator<'a, 'hir> {\n     type Map = Map<'hir>;\n \n-    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<'_, Self::Map> {\n+    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n         intravisit::NestedVisitorMap::OnlyBodies(self.hir_map)\n     }\n "}, {"sha": "bcbb6f3ec31e6e62c2e41a7b0680dd3636d4a19d", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 163, "deletions": 353, "changes": 516, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -3,14 +3,13 @@ pub use self::definitions::{\n     DefKey, DefPath, DefPathData, DefPathHash, Definitions, DisambiguatedDefPathData,\n };\n \n-use crate::dep_graph::{DepGraph, DepKind, DepNode, DepNodeIndex};\n-use crate::middle::cstore::CrateStoreDyn;\n+use crate::hir::{HirOwner, HirOwnerItems};\n use crate::ty::query::Providers;\n+use crate::ty::TyCtxt;\n use rustc_ast::ast::{self, Name, NodeId};\n-use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::svh::Svh;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::def_id::{DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX};\n+use rustc_hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, LOCAL_CRATE};\n use rustc_hir::intravisit;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::print::Nested;\n@@ -26,131 +25,124 @@ pub mod blocks;\n mod collector;\n pub mod definitions;\n mod hir_id_validator;\n+pub use hir_id_validator::check_crate;\n \n /// Represents an entry and its parent `HirId`.\n #[derive(Copy, Clone, Debug)]\n pub struct Entry<'hir> {\n     parent: HirId,\n-    dep_node: DepNodeIndex,\n     node: Node<'hir>,\n }\n \n impl<'hir> Entry<'hir> {\n     fn parent_node(self) -> Option<HirId> {\n         match self.node {\n-            Node::Crate | Node::MacroDef(_) => None,\n+            Node::Crate(_) | Node::MacroDef(_) => None,\n             _ => Some(self.parent),\n         }\n     }\n+}\n \n-    fn fn_decl(&self) -> Option<&'hir FnDecl<'hir>> {\n-        match self.node {\n-            Node::Item(ref item) => match item.kind {\n-                ItemKind::Fn(ref sig, _, _) => Some(&sig.decl),\n-                _ => None,\n-            },\n-\n-            Node::TraitItem(ref item) => match item.kind {\n-                TraitItemKind::Fn(ref sig, _) => Some(&sig.decl),\n-                _ => None,\n-            },\n+fn fn_decl<'hir>(node: Node<'hir>) -> Option<&'hir FnDecl<'hir>> {\n+    match node {\n+        Node::Item(ref item) => match item.kind {\n+            ItemKind::Fn(ref sig, _, _) => Some(&sig.decl),\n+            _ => None,\n+        },\n \n-            Node::ImplItem(ref item) => match item.kind {\n-                ImplItemKind::Method(ref sig, _) => Some(&sig.decl),\n-                _ => None,\n-            },\n+        Node::TraitItem(ref item) => match item.kind {\n+            TraitItemKind::Fn(ref sig, _) => Some(&sig.decl),\n+            _ => None,\n+        },\n \n-            Node::Expr(ref expr) => match expr.kind {\n-                ExprKind::Closure(_, ref fn_decl, ..) => Some(fn_decl),\n-                _ => None,\n-            },\n+        Node::ImplItem(ref item) => match item.kind {\n+            ImplItemKind::Method(ref sig, _) => Some(&sig.decl),\n+            _ => None,\n+        },\n \n+        Node::Expr(ref expr) => match expr.kind {\n+            ExprKind::Closure(_, ref fn_decl, ..) => Some(fn_decl),\n             _ => None,\n-        }\n-    }\n+        },\n \n-    fn fn_sig(&self) -> Option<&'hir FnSig<'hir>> {\n-        match &self.node {\n-            Node::Item(item) => match &item.kind {\n-                ItemKind::Fn(sig, _, _) => Some(sig),\n-                _ => None,\n-            },\n+        _ => None,\n+    }\n+}\n \n-            Node::TraitItem(item) => match &item.kind {\n-                TraitItemKind::Fn(sig, _) => Some(sig),\n-                _ => None,\n-            },\n+fn fn_sig<'hir>(node: Node<'hir>) -> Option<&'hir FnSig<'hir>> {\n+    match &node {\n+        Node::Item(item) => match &item.kind {\n+            ItemKind::Fn(sig, _, _) => Some(sig),\n+            _ => None,\n+        },\n \n-            Node::ImplItem(item) => match &item.kind {\n-                ImplItemKind::Method(sig, _) => Some(sig),\n-                _ => None,\n-            },\n+        Node::TraitItem(item) => match &item.kind {\n+            TraitItemKind::Fn(sig, _) => Some(sig),\n+            _ => None,\n+        },\n \n+        Node::ImplItem(item) => match &item.kind {\n+            ImplItemKind::Method(sig, _) => Some(sig),\n             _ => None,\n-        }\n-    }\n+        },\n \n-    fn associated_body(self) -> Option<BodyId> {\n-        match self.node {\n-            Node::Item(item) => match item.kind {\n-                ItemKind::Const(_, body) | ItemKind::Static(.., body) | ItemKind::Fn(.., body) => {\n-                    Some(body)\n-                }\n-                _ => None,\n-            },\n+        _ => None,\n+    }\n+}\n \n-            Node::TraitItem(item) => match item.kind {\n-                TraitItemKind::Const(_, Some(body))\n-                | TraitItemKind::Fn(_, TraitMethod::Provided(body)) => Some(body),\n-                _ => None,\n-            },\n+fn associated_body<'hir>(node: Node<'hir>) -> Option<BodyId> {\n+    match node {\n+        Node::Item(item) => match item.kind {\n+            ItemKind::Const(_, body) | ItemKind::Static(.., body) | ItemKind::Fn(.., body) => {\n+                Some(body)\n+            }\n+            _ => None,\n+        },\n \n-            Node::ImplItem(item) => match item.kind {\n-                ImplItemKind::Const(_, body) | ImplItemKind::Method(_, body) => Some(body),\n-                _ => None,\n-            },\n+        Node::TraitItem(item) => match item.kind {\n+            TraitItemKind::Const(_, Some(body))\n+            | TraitItemKind::Fn(_, TraitMethod::Provided(body)) => Some(body),\n+            _ => None,\n+        },\n \n-            Node::AnonConst(constant) => Some(constant.body),\n+        Node::ImplItem(item) => match item.kind {\n+            ImplItemKind::Const(_, body) | ImplItemKind::Method(_, body) => Some(body),\n+            _ => None,\n+        },\n \n-            Node::Expr(expr) => match expr.kind {\n-                ExprKind::Closure(.., body, _, _) => Some(body),\n-                _ => None,\n-            },\n+        Node::AnonConst(constant) => Some(constant.body),\n \n+        Node::Expr(expr) => match expr.kind {\n+            ExprKind::Closure(.., body, _, _) => Some(body),\n             _ => None,\n-        }\n-    }\n+        },\n \n-    fn is_body_owner(self, hir_id: HirId) -> bool {\n-        match self.associated_body() {\n-            Some(b) => b.hir_id == hir_id,\n-            None => false,\n-        }\n+        _ => None,\n     }\n }\n \n-/// This type is effectively a `HashMap<HirId, Entry<'hir>>`,\n-/// but it is implemented as 2 layers of arrays.\n-/// - first we have `A = IndexVec<DefIndex, B>` mapping `DefIndex`s to an inner value\n-/// - which is `B = IndexVec<ItemLocalId, Option<Entry<'hir>>` which gives you the `Entry`.\n-pub(super) type HirEntryMap<'hir> = IndexVec<DefIndex, IndexVec<ItemLocalId, Option<Entry<'hir>>>>;\n-\n-/// Represents a mapping from `NodeId`s to AST elements and their parent `NodeId`s.\n-#[derive(Clone)]\n-pub struct Map<'hir> {\n-    krate: &'hir Crate<'hir>,\n+fn is_body_owner<'hir>(node: Node<'hir>, hir_id: HirId) -> bool {\n+    match associated_body(node) {\n+        Some(b) => b.hir_id == hir_id,\n+        None => false,\n+    }\n+}\n \n-    pub dep_graph: DepGraph,\n+pub(super) struct HirOwnerData<'hir> {\n+    pub(super) signature: Option<&'hir HirOwner<'hir>>,\n+    pub(super) with_bodies: Option<&'hir mut HirOwnerItems<'hir>>,\n+}\n \n+pub struct IndexedHir<'hir> {\n     /// The SVH of the local crate.\n     pub crate_hash: Svh,\n \n-    map: HirEntryMap<'hir>,\n-\n-    definitions: Definitions,\n+    pub(super) map: IndexVec<DefIndex, HirOwnerData<'hir>>,\n+}\n \n-    /// The reverse mapping of `node_to_hir_id`.\n-    hir_to_node_id: FxHashMap<HirId, NodeId>,\n+#[derive(Copy, Clone)]\n+pub struct Map<'hir> {\n+    pub(super) tcx: TyCtxt<'hir>,\n }\n \n /// An iterator that walks up the ancestor tree of a given `HirId`.\n@@ -186,42 +178,18 @@ impl<'hir> Iterator for ParentHirIterator<'_, 'hir> {\n }\n \n impl<'hir> Map<'hir> {\n-    /// This is used internally in the dependency tracking system.\n-    /// Use the `krate` method to ensure your dependency on the\n-    /// crate is tracked.\n-    pub fn untracked_krate(&self) -> &Crate<'hir> {\n-        &self.krate\n-    }\n-\n-    #[inline]\n-    fn lookup(&self, id: HirId) -> Option<&Entry<'hir>> {\n-        let local_map = self.map.get(id.owner)?;\n-        local_map.get(id.local_id)?.as_ref()\n-    }\n-\n-    /// Registers a read in the dependency graph of the AST node with\n-    /// the given `id`. This needs to be called each time a public\n-    /// function returns the HIR for a node -- in other words, when it\n-    /// \"reveals\" the content of a node to the caller (who might not\n-    /// otherwise have had access to those contents, and hence needs a\n-    /// read recorded). If the function just returns a DefId or\n-    /// HirId, no actual content was returned, so no read is needed.\n-    pub fn read(&self, hir_id: HirId) {\n-        if let Some(entry) = self.lookup(hir_id) {\n-            self.dep_graph.read_index(entry.dep_node);\n-        } else {\n-            bug!(\"called `HirMap::read()` with invalid `HirId`: {:?}\", hir_id)\n-        }\n+    pub fn krate(&self) -> &'hir Crate<'hir> {\n+        self.tcx.hir_crate(LOCAL_CRATE)\n     }\n \n     #[inline]\n-    pub fn definitions(&self) -> &Definitions {\n-        &self.definitions\n+    pub fn definitions(&self) -> &'hir Definitions {\n+        &self.tcx.definitions\n     }\n \n     pub fn def_key(&self, def_id: DefId) -> DefKey {\n         assert!(def_id.is_local());\n-        self.definitions.def_key(def_id.index)\n+        self.tcx.definitions.def_key(def_id.index)\n     }\n \n     pub fn def_path_from_hir_id(&self, id: HirId) -> Option<DefPath> {\n@@ -230,7 +198,7 @@ impl<'hir> Map<'hir> {\n \n     pub fn def_path(&self, def_id: DefId) -> DefPath {\n         assert!(def_id.is_local());\n-        self.definitions.def_path(def_id.index)\n+        self.tcx.definitions.def_path(def_id.index)\n     }\n \n     #[inline]\n@@ -259,42 +227,42 @@ impl<'hir> Map<'hir> {\n     #[inline]\n     pub fn opt_local_def_id(&self, hir_id: HirId) -> Option<DefId> {\n         let node_id = self.hir_to_node_id(hir_id);\n-        self.definitions.opt_local_def_id(node_id)\n+        self.tcx.definitions.opt_local_def_id(node_id)\n     }\n \n     #[inline]\n     pub fn opt_local_def_id_from_node_id(&self, node: NodeId) -> Option<DefId> {\n-        self.definitions.opt_local_def_id(node)\n+        self.tcx.definitions.opt_local_def_id(node)\n     }\n \n     #[inline]\n     pub fn as_local_node_id(&self, def_id: DefId) -> Option<NodeId> {\n-        self.definitions.as_local_node_id(def_id)\n+        self.tcx.definitions.as_local_node_id(def_id)\n     }\n \n     #[inline]\n     pub fn as_local_hir_id(&self, def_id: DefId) -> Option<HirId> {\n-        self.definitions.as_local_hir_id(def_id)\n+        self.tcx.definitions.as_local_hir_id(def_id)\n     }\n \n     #[inline]\n     pub fn hir_to_node_id(&self, hir_id: HirId) -> NodeId {\n-        self.hir_to_node_id[&hir_id]\n+        self.tcx.definitions.hir_to_node_id(hir_id)\n     }\n \n     #[inline]\n     pub fn node_to_hir_id(&self, node_id: NodeId) -> HirId {\n-        self.definitions.node_to_hir_id(node_id)\n+        self.tcx.definitions.node_to_hir_id(node_id)\n     }\n \n     #[inline]\n     pub fn def_index_to_hir_id(&self, def_index: DefIndex) -> HirId {\n-        self.definitions.def_index_to_hir_id(def_index)\n+        self.tcx.definitions.def_index_to_hir_id(def_index)\n     }\n \n     #[inline]\n     pub fn local_def_id_to_hir_id(&self, def_id: LocalDefId) -> HirId {\n-        self.definitions.def_index_to_hir_id(def_id.to_def_id().index)\n+        self.tcx.definitions.def_index_to_hir_id(def_id.to_def_id().index)\n     }\n \n     pub fn def_kind(&self, hir_id: HirId) -> Option<DefKind> {\n@@ -362,7 +330,7 @@ impl<'hir> Map<'hir> {\n             | Node::Lifetime(_)\n             | Node::Visibility(_)\n             | Node::Block(_)\n-            | Node::Crate => return None,\n+            | Node::Crate(_) => return None,\n             Node::MacroDef(_) => DefKind::Macro(MacroKind::Bang),\n             Node::GenericParam(param) => match param.kind {\n                 GenericParamKind::Lifetime { .. } => return None,\n@@ -373,54 +341,62 @@ impl<'hir> Map<'hir> {\n     }\n \n     fn find_entry(&self, id: HirId) -> Option<Entry<'hir>> {\n-        self.lookup(id).cloned()\n+        Some(self.get_entry(id))\n     }\n \n-    pub fn item(&self, id: HirId) -> &'hir Item<'hir> {\n-        self.read(id);\n+    fn get_entry(&self, id: HirId) -> Entry<'hir> {\n+        if id.local_id == ItemLocalId::from_u32_const(0) {\n+            let owner = self.tcx.hir_owner(id.owner_def_id());\n+            Entry { parent: owner.parent, node: owner.node }\n+        } else {\n+            let owner = self.tcx.hir_owner_items(id.owner_def_id());\n+            let item = owner.items[id.local_id].as_ref().unwrap();\n+            Entry { parent: HirId { owner: id.owner, local_id: item.parent }, node: item.node }\n+        }\n+    }\n \n-        // N.B., intentionally bypass `self.krate()` so that we\n-        // do not trigger a read of the whole krate here\n-        self.krate.item(id)\n+    pub fn item(&self, id: HirId) -> &'hir Item<'hir> {\n+        match self.find(id).unwrap() {\n+            Node::Item(item) => item,\n+            _ => bug!(),\n+        }\n     }\n \n     pub fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir> {\n-        self.read(id.hir_id);\n-\n-        // N.B., intentionally bypass `self.krate()` so that we\n-        // do not trigger a read of the whole krate here\n-        self.krate.trait_item(id)\n+        match self.find(id.hir_id).unwrap() {\n+            Node::TraitItem(item) => item,\n+            _ => bug!(),\n+        }\n     }\n \n     pub fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir> {\n-        self.read(id.hir_id);\n-\n-        // N.B., intentionally bypass `self.krate()` so that we\n-        // do not trigger a read of the whole krate here\n-        self.krate.impl_item(id)\n+        match self.find(id.hir_id).unwrap() {\n+            Node::ImplItem(item) => item,\n+            _ => bug!(),\n+        }\n     }\n \n     pub fn body(&self, id: BodyId) -> &'hir Body<'hir> {\n-        self.read(id.hir_id);\n-\n-        // N.B., intentionally bypass `self.krate()` so that we\n-        // do not trigger a read of the whole krate here\n-        self.krate.body(id)\n+        self.tcx\n+            .hir_owner_items(DefId::local(id.hir_id.owner))\n+            .bodies\n+            .get(&id.hir_id.local_id)\n+            .unwrap()\n     }\n \n     pub fn fn_decl_by_hir_id(&self, hir_id: HirId) -> Option<&'hir FnDecl<'hir>> {\n-        if let Some(entry) = self.find_entry(hir_id) {\n-            entry.fn_decl()\n+        if let Some(node) = self.find(hir_id) {\n+            fn_decl(node)\n         } else {\n-            bug!(\"no entry for hir_id `{}`\", hir_id)\n+            bug!(\"no node for hir_id `{}`\", hir_id)\n         }\n     }\n \n     pub fn fn_sig_by_hir_id(&self, hir_id: HirId) -> Option<&'hir FnSig<'hir>> {\n-        if let Some(entry) = self.find_entry(hir_id) {\n-            entry.fn_sig()\n+        if let Some(node) = self.find(hir_id) {\n+            fn_sig(node)\n         } else {\n-            bug!(\"no entry for hir_id `{}`\", hir_id)\n+            bug!(\"no node for hir_id `{}`\", hir_id)\n         }\n     }\n \n@@ -429,7 +405,7 @@ impl<'hir> Map<'hir> {\n     /// item (possibly associated), a closure, or a `hir::AnonConst`.\n     pub fn body_owner(&self, BodyId { hir_id }: BodyId) -> HirId {\n         let parent = self.get_parent_node(hir_id);\n-        assert!(self.lookup(parent).map_or(false, |e| e.is_body_owner(hir_id)));\n+        assert!(self.find(parent).map_or(false, |n| is_body_owner(n, hir_id)));\n         parent\n     }\n \n@@ -440,14 +416,8 @@ impl<'hir> Map<'hir> {\n     /// Given a `HirId`, returns the `BodyId` associated with it,\n     /// if the node is a body owner, otherwise returns `None`.\n     pub fn maybe_body_owned_by(&self, hir_id: HirId) -> Option<BodyId> {\n-        if let Some(entry) = self.find_entry(hir_id) {\n-            if self.dep_graph.is_fully_enabled() {\n-                let hir_id_owner = hir_id.owner;\n-                let def_path_hash = self.definitions.def_path_hash(hir_id_owner);\n-                self.dep_graph.read(def_path_hash.to_dep_node(DepKind::HirBody));\n-            }\n-\n-            entry.associated_body()\n+        if let Some(node) = self.find(hir_id) {\n+            associated_body(node)\n         } else {\n             bug!(\"no entry for id `{}`\", hir_id)\n         }\n@@ -499,29 +469,24 @@ impl<'hir> Map<'hir> {\n     }\n \n     pub fn trait_impls(&self, trait_did: DefId) -> &'hir [HirId] {\n-        self.dep_graph.read(DepNode::new_no_params(DepKind::AllLocalTraitImpls));\n-\n-        // N.B., intentionally bypass `self.krate()` so that we\n-        // do not trigger a read of the whole krate here\n-        self.krate.trait_impls.get(&trait_did).map_or(&[], |xs| &xs[..])\n+        self.tcx.all_local_trait_impls(LOCAL_CRATE).get(&trait_did).map_or(&[], |xs| &xs[..])\n     }\n \n     /// Gets the attributes on the crate. This is preferable to\n     /// invoking `krate.attrs` because it registers a tighter\n     /// dep-graph access.\n     pub fn krate_attrs(&self) -> &'hir [ast::Attribute] {\n-        let def_path_hash = self.definitions.def_path_hash(CRATE_DEF_INDEX);\n-\n-        self.dep_graph.read(def_path_hash.to_dep_node(DepKind::Hir));\n-        &self.krate.attrs\n+        match self.get_entry(CRATE_HIR_ID).node {\n+            Node::Crate(item) => item.attrs,\n+            _ => bug!(),\n+        }\n     }\n \n     pub fn get_module(&self, module: DefId) -> (&'hir Mod<'hir>, Span, HirId) {\n         let hir_id = self.as_local_hir_id(module).unwrap();\n-        self.read(hir_id);\n-        match self.find_entry(hir_id).unwrap().node {\n+        match self.get_entry(hir_id).node {\n             Node::Item(&Item { span, kind: ItemKind::Mod(ref m), .. }) => (m, span, hir_id),\n-            Node::Crate => (&self.krate.module, self.krate.span, hir_id),\n+            Node::Crate(item) => (&item.module, item.span, hir_id),\n             node => panic!(\"not a module: {:?}\", node),\n         }\n     }\n@@ -530,15 +495,7 @@ impl<'hir> Map<'hir> {\n     where\n         V: ItemLikeVisitor<'hir>,\n     {\n-        let hir_id = self.as_local_hir_id(module).unwrap();\n-\n-        // Read the module so we'll be re-executed if new items\n-        // appear immediately under in the module. If some new item appears\n-        // in some nested item in the module, we'll be re-executed due to reads\n-        // in the expect_* calls the loops below\n-        self.read(hir_id);\n-\n-        let module = &self.krate.modules[&hir_id];\n+        let module = self.tcx.hir_module_items(module);\n \n         for id in &module.items {\n             visitor.visit_item(self.expect_item(*id));\n@@ -555,12 +512,11 @@ impl<'hir> Map<'hir> {\n \n     /// Retrieves the `Node` corresponding to `id`, panicking if it cannot be found.\n     pub fn get(&self, id: HirId) -> Node<'hir> {\n-        // read recorded by `find`\n         self.find(id).unwrap_or_else(|| bug!(\"couldn't find hir id {} in the HIR map\", id))\n     }\n \n     pub fn get_if_local(&self, id: DefId) -> Option<Node<'hir>> {\n-        self.as_local_hir_id(id).map(|id| self.get(id)) // read recorded by `get`\n+        self.as_local_hir_id(id).map(|id| self.get(id))\n     }\n \n     pub fn get_generics(&self, id: DefId) -> Option<&'hir Generics<'hir>> {\n@@ -584,13 +540,8 @@ impl<'hir> Map<'hir> {\n \n     /// Retrieves the `Node` corresponding to `id`, returning `None` if cannot be found.\n     pub fn find(&self, hir_id: HirId) -> Option<Node<'hir>> {\n-        let result = self\n-            .find_entry(hir_id)\n-            .and_then(|entry| if let Node::Crate = entry.node { None } else { Some(entry.node) });\n-        if result.is_some() {\n-            self.read(hir_id);\n-        }\n-        result\n+        let node = self.get_entry(hir_id).node;\n+        if let Node::Crate(..) = node { None } else { Some(node) }\n     }\n \n     /// Similar to `get_parent`; returns the parent HIR Id, or just `hir_id` if there\n@@ -604,13 +555,7 @@ impl<'hir> Map<'hir> {\n     /// from a node to the root of the HIR (unless you get back the same ID here,\n     /// which can happen if the ID is not in the map itself or is just weird).\n     pub fn get_parent_node(&self, hir_id: HirId) -> HirId {\n-        if self.dep_graph.is_fully_enabled() {\n-            let hir_id_owner = hir_id.owner;\n-            let def_path_hash = self.definitions.def_path_hash(hir_id_owner);\n-            self.dep_graph.read(def_path_hash.to_dep_node(DepKind::HirBody));\n-        }\n-\n-        self.find_entry(hir_id).and_then(|x| x.parent_node()).unwrap_or(hir_id)\n+        self.get_entry(hir_id).parent_node().unwrap_or(hir_id)\n     }\n \n     /// Returns an iterator for the nodes in the ancestor tree of the `current_id`\n@@ -655,9 +600,9 @@ impl<'hir> Map<'hir> {\n \n     /// Whether `hir_id` corresponds to a `mod` or a crate.\n     pub fn is_hir_id_module(&self, hir_id: HirId) -> bool {\n-        match self.lookup(hir_id) {\n-            Some(Entry { node: Node::Item(Item { kind: ItemKind::Mod(_), .. }), .. })\n-            | Some(Entry { node: Node::Crate, .. }) => true,\n+        match self.get_entry(hir_id) {\n+            Entry { node: Node::Item(Item { kind: ItemKind::Mod(_), .. }), .. }\n+            | Entry { node: Node::Crate(..), .. } => true,\n             _ => false,\n         }\n     }\n@@ -734,7 +679,7 @@ impl<'hir> Map<'hir> {\n     pub fn get_parent_item(&self, hir_id: HirId) -> HirId {\n         for (hir_id, node) in self.parent_iter(hir_id) {\n             match node {\n-                Node::Crate\n+                Node::Crate(_)\n                 | Node::Item(_)\n                 | Node::ForeignItem(_)\n                 | Node::TraitItem(_)\n@@ -847,7 +792,6 @@ impl<'hir> Map<'hir> {\n                 node: Node::Item(Item { kind: ItemKind::ForeignMod(ref nm), .. }), ..\n             } = entry\n             {\n-                self.read(hir_id); // reveals some of the content of a node\n                 return nm.abi;\n             }\n         }\n@@ -856,7 +800,6 @@ impl<'hir> Map<'hir> {\n \n     pub fn expect_item(&self, id: HirId) -> &'hir Item<'hir> {\n         match self.find(id) {\n-            // read recorded by `find`\n             Some(Node::Item(item)) => item,\n             _ => bug!(\"expected item, found {}\", self.node_to_string(id)),\n         }\n@@ -906,7 +849,6 @@ impl<'hir> Map<'hir> {\n \n     pub fn expect_expr(&self, id: HirId) -> &'hir Expr<'hir> {\n         match self.find(id) {\n-            // read recorded by find\n             Some(Node::Expr(expr)) => expr,\n             _ => bug!(\"expected expr, found {}\", self.node_to_string(id)),\n         }\n@@ -938,7 +880,6 @@ impl<'hir> Map<'hir> {\n     /// Given a node ID, gets a list of attributes associated with the AST\n     /// corresponding to the node-ID.\n     pub fn attrs(&self, id: HirId) -> &'hir [ast::Attribute] {\n-        self.read(id); // reveals attributes on the node\n         let attrs = match self.find_entry(id).map(|entry| entry.node) {\n             Some(Node::Param(a)) => Some(&a.attrs[..]),\n             Some(Node::Local(l)) => Some(&l.attrs[..]),\n@@ -955,53 +896,13 @@ impl<'hir> Map<'hir> {\n             // Unit/tuple structs/variants take the attributes straight from\n             // the struct/variant definition.\n             Some(Node::Ctor(..)) => return self.attrs(self.get_parent_item(id)),\n-            Some(Node::Crate) => Some(&self.krate.attrs[..]),\n+            Some(Node::Crate(item)) => Some(&item.attrs[..]),\n             _ => None,\n         };\n         attrs.unwrap_or(&[])\n     }\n \n-    /// Returns an iterator that yields all the hir ids in the map.\n-    fn all_ids<'a>(&'a self) -> impl Iterator<Item = HirId> + 'a {\n-        // This code is a bit awkward because the map is implemented as 2 levels of arrays,\n-        // see the comment on `HirEntryMap`.\n-        // Iterate over all the indices and return a reference to\n-        // local maps and their index given that they exist.\n-        self.map.iter_enumerated().flat_map(move |(owner, local_map)| {\n-            // Iterate over each valid entry in the local map.\n-            local_map.iter_enumerated().filter_map(move |(i, entry)| {\n-                entry.map(move |_| {\n-                    // Reconstruct the `HirId` based on the 3 indices we used to find it.\n-                    HirId { owner, local_id: i }\n-                })\n-            })\n-        })\n-    }\n-\n-    /// Returns an iterator that yields the node id's with paths that\n-    /// match `parts`.  (Requires `parts` is non-empty.)\n-    ///\n-    /// For example, if given `parts` equal to `[\"bar\", \"quux\"]`, then\n-    /// the iterator will produce node id's for items with paths\n-    /// such as `foo::bar::quux`, `bar::quux`, `other::bar::quux`, and\n-    /// any other such items it can find in the map.\n-    pub fn nodes_matching_suffix<'a>(\n-        &'a self,\n-        parts: &'a [String],\n-    ) -> impl Iterator<Item = NodeId> + 'a {\n-        let nodes = NodesMatchingSuffix {\n-            map: self,\n-            item_name: parts.last().unwrap(),\n-            in_which: &parts[..parts.len() - 1],\n-        };\n-\n-        self.all_ids()\n-            .filter(move |hir| nodes.matches_suffix(*hir))\n-            .map(move |hir| self.hir_to_node_id(hir))\n-    }\n-\n     pub fn span(&self, hir_id: HirId) -> Span {\n-        self.read(hir_id); // reveals span from node\n         match self.find_entry(hir_id).map(|entry| entry.node) {\n             Some(Node::Param(param)) => param.span,\n             Some(Node::Item(item)) => item.span,\n@@ -1034,7 +935,7 @@ impl<'hir> Map<'hir> {\n             Some(Node::Visibility(v)) => bug!(\"unexpected Visibility {:?}\", v),\n             Some(Node::Local(local)) => local.span,\n             Some(Node::MacroDef(macro_def)) => macro_def.span,\n-            Some(Node::Crate) => self.krate.span,\n+            Some(Node::Crate(item)) => item.span,\n             None => bug!(\"hir::map::Map::span: id not in map: {:?}\", hir_id),\n         }\n     }\n@@ -1082,82 +983,6 @@ impl<'hir> intravisit::Map<'hir> for Map<'hir> {\n     }\n }\n \n-pub struct NodesMatchingSuffix<'a> {\n-    map: &'a Map<'a>,\n-    item_name: &'a String,\n-    in_which: &'a [String],\n-}\n-\n-impl<'a> NodesMatchingSuffix<'a> {\n-    /// Returns `true` only if some suffix of the module path for parent\n-    /// matches `self.in_which`.\n-    ///\n-    /// In other words: let `[x_0,x_1,...,x_k]` be `self.in_which`;\n-    /// returns true if parent's path ends with the suffix\n-    /// `x_0::x_1::...::x_k`.\n-    fn suffix_matches(&self, parent: HirId) -> bool {\n-        let mut cursor = parent;\n-        for part in self.in_which.iter().rev() {\n-            let (mod_id, mod_name) = match find_first_mod_parent(self.map, cursor) {\n-                None => return false,\n-                Some((node_id, name)) => (node_id, name),\n-            };\n-            if mod_name.as_str() != *part {\n-                return false;\n-            }\n-            cursor = self.map.get_parent_item(mod_id);\n-        }\n-        return true;\n-\n-        // Finds the first mod in parent chain for `id`, along with\n-        // that mod's name.\n-        //\n-        // If `id` itself is a mod named `m` with parent `p`, then\n-        // returns `Some(id, m, p)`.  If `id` has no mod in its parent\n-        // chain, then returns `None`.\n-        fn find_first_mod_parent(map: &Map<'_>, mut id: HirId) -> Option<(HirId, Name)> {\n-            loop {\n-                if let Node::Item(item) = map.find(id)? {\n-                    if item_is_mod(&item) {\n-                        return Some((id, item.ident.name));\n-                    }\n-                }\n-                let parent = map.get_parent_item(id);\n-                if parent == id {\n-                    return None;\n-                }\n-                id = parent;\n-            }\n-\n-            fn item_is_mod(item: &Item<'_>) -> bool {\n-                match item.kind {\n-                    ItemKind::Mod(_) => true,\n-                    _ => false,\n-                }\n-            }\n-        }\n-    }\n-\n-    // We are looking at some node `n` with a given name and parent\n-    // id; do their names match what I am seeking?\n-    fn matches_names(&self, parent_of_n: HirId, name: Name) -> bool {\n-        name.as_str() == *self.item_name && self.suffix_matches(parent_of_n)\n-    }\n-\n-    fn matches_suffix(&self, hir: HirId) -> bool {\n-        let name = match self.map.find_entry(hir).map(|entry| entry.node) {\n-            Some(Node::Item(n)) => n.name(),\n-            Some(Node::ForeignItem(n)) => n.name(),\n-            Some(Node::TraitItem(n)) => n.name(),\n-            Some(Node::ImplItem(n)) => n.name(),\n-            Some(Node::Variant(n)) => n.name(),\n-            Some(Node::Field(n)) => n.name(),\n-            _ => return false,\n-        };\n-        self.matches_names(self.map.get_parent_item(hir), name)\n-    }\n-}\n-\n trait Named {\n     fn name(&self) -> Name;\n }\n@@ -1199,39 +1024,24 @@ impl Named for ImplItem<'_> {\n     }\n }\n \n-pub fn map_crate<'hir>(\n-    sess: &rustc_session::Session,\n-    cstore: &CrateStoreDyn,\n-    krate: &'hir Crate<'hir>,\n-    dep_graph: DepGraph,\n-    definitions: Definitions,\n-) -> Map<'hir> {\n-    let _prof_timer = sess.prof.generic_activity(\"build_hir_map\");\n-\n-    // Build the reverse mapping of `node_to_hir_id`.\n-    let hir_to_node_id = definitions\n-        .node_to_hir_id\n-        .iter_enumerated()\n-        .map(|(node_id, &hir_id)| (hir_id, node_id))\n-        .collect();\n+pub(super) fn index_hir<'tcx>(tcx: TyCtxt<'tcx>, cnum: CrateNum) -> &'tcx IndexedHir<'tcx> {\n+    assert_eq!(cnum, LOCAL_CRATE);\n+\n+    let _prof_timer = tcx.sess.prof.generic_activity(\"build_hir_map\");\n \n     let (map, crate_hash) = {\n-        let hcx = crate::ich::StableHashingContext::new(sess, krate, &definitions, cstore);\n+        let hcx = tcx.create_stable_hashing_context();\n \n         let mut collector =\n-            NodeCollector::root(sess, krate, &dep_graph, &definitions, &hir_to_node_id, hcx);\n-        intravisit::walk_crate(&mut collector, krate);\n+            NodeCollector::root(tcx.sess, &**tcx.arena, tcx.untracked_crate, &tcx.definitions, hcx);\n+        intravisit::walk_crate(&mut collector, tcx.untracked_crate);\n \n-        let crate_disambiguator = sess.local_crate_disambiguator();\n-        let cmdline_args = sess.opts.dep_tracking_hash();\n-        collector.finalize_and_compute_crate_hash(crate_disambiguator, cstore, cmdline_args)\n+        let crate_disambiguator = tcx.sess.local_crate_disambiguator();\n+        let cmdline_args = tcx.sess.opts.dep_tracking_hash();\n+        collector.finalize_and_compute_crate_hash(crate_disambiguator, &*tcx.cstore, cmdline_args)\n     };\n \n-    let map = Map { krate, dep_graph, crate_hash, map, hir_to_node_id, definitions };\n-\n-    sess.time(\"validate_HIR_map\", || {\n-        hir_id_validator::check_crate(&map, sess);\n-    });\n+    let map = tcx.arena.alloc(IndexedHir { crate_hash, map });\n \n     map\n }\n@@ -1342,7 +1152,7 @@ fn hir_id_to_string(map: &Map<'_>, id: HirId, include_id: bool) -> String {\n         Some(Node::GenericParam(ref param)) => format!(\"generic_param {:?}{}\", param, id_str),\n         Some(Node::Visibility(ref vis)) => format!(\"visibility {:?}{}\", vis, id_str),\n         Some(Node::MacroDef(_)) => format!(\"macro {}{}\", path_str(), id_str),\n-        Some(Node::Crate) => String::from(\"root_crate\"),\n+        Some(Node::Crate(..)) => String::from(\"root_crate\"),\n         None => format!(\"unknown node{}\", id_str),\n     }\n }"}, {"sha": "3b69fc8d8f2ac7e21f5c0d2e378efc674859bca1", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 47, "deletions": 23, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -5,46 +5,59 @@\n pub mod exports;\n pub mod map;\n \n+use crate::ich::StableHashingContext;\n use crate::ty::query::Providers;\n use crate::ty::TyCtxt;\n+use rustc_data_structures::fingerprint::Fingerprint;\n+use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n-use rustc_hir::print;\n-use rustc_hir::Crate;\n+use rustc_hir::Body;\n use rustc_hir::HirId;\n-use std::ops::Deref;\n+use rustc_hir::ItemLocalId;\n+use rustc_hir::Node;\n+use rustc_index::vec::IndexVec;\n \n-/// A wrapper type which allows you to access HIR.\n-#[derive(Clone)]\n-pub struct Hir<'tcx> {\n-    tcx: TyCtxt<'tcx>,\n-    map: &'tcx map::Map<'tcx>,\n+pub struct HirOwner<'tcx> {\n+    parent: HirId,\n+    node: Node<'tcx>,\n }\n \n-impl<'tcx> Hir<'tcx> {\n-    pub fn krate(&self) -> &'tcx Crate<'tcx> {\n-        self.tcx.hir_crate(LOCAL_CRATE)\n+impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for HirOwner<'tcx> {\n+    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n+        let HirOwner { parent, node } = self;\n+        hcx.while_hashing_hir_bodies(false, |hcx| {\n+            parent.hash_stable(hcx, hasher);\n+            node.hash_stable(hcx, hasher);\n+        });\n     }\n }\n \n-impl<'tcx> Deref for Hir<'tcx> {\n-    type Target = &'tcx map::Map<'tcx>;\n+#[derive(Clone)]\n+pub struct HirItem<'tcx> {\n+    parent: ItemLocalId,\n+    node: Node<'tcx>,\n+}\n \n-    #[inline(always)]\n-    fn deref(&self) -> &Self::Target {\n-        &self.map\n-    }\n+pub struct HirOwnerItems<'tcx> {\n+    hash: Fingerprint,\n+    items: IndexVec<ItemLocalId, Option<HirItem<'tcx>>>,\n+    bodies: FxHashMap<ItemLocalId, &'tcx Body<'tcx>>,\n }\n \n-impl<'hir> print::PpAnn for Hir<'hir> {\n-    fn nested(&self, state: &mut print::State<'_>, nested: print::Nested) {\n-        self.map.nested(state, nested)\n+impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for HirOwnerItems<'tcx> {\n+    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n+        // We ignore the `items` and `bodies` fields since these refer to information included in\n+        // `hash` which is hashed in the collector and used for the crate hash.\n+        let HirOwnerItems { hash, items: _, bodies: _ } = *self;\n+        hash.hash_stable(hcx, hasher);\n     }\n }\n \n impl<'tcx> TyCtxt<'tcx> {\n     #[inline(always)]\n-    pub fn hir(self) -> Hir<'tcx> {\n-        Hir { tcx: self, map: &self.hir_map }\n+    pub fn hir(self) -> map::Map<'tcx> {\n+        map::Map { tcx: self }\n     }\n \n     pub fn parent_module(self, id: HirId) -> DefId {\n@@ -57,6 +70,17 @@ pub fn provide(providers: &mut Providers<'_>) {\n         let hir = tcx.hir();\n         hir.local_def_id(hir.get_module_parent_node(hir.as_local_hir_id(id).unwrap()))\n     };\n-    providers.hir_crate = |tcx, _| tcx.hir_map.untracked_krate();\n+    providers.hir_crate = |tcx, _| tcx.untracked_crate;\n+    providers.index_hir = map::index_hir;\n+    providers.hir_module_items = |tcx, id| {\n+        assert_eq!(id.krate, LOCAL_CRATE);\n+        let hir = tcx.hir();\n+        let module = hir.as_local_hir_id(id).unwrap();\n+        &tcx.untracked_crate.modules[&module]\n+    };\n+    providers.hir_owner = |tcx, id| tcx.index_hir(id.krate).map[id.index].signature.unwrap();\n+    providers.hir_owner_items = |tcx, id| {\n+        tcx.index_hir(id.krate).map[id.index].with_bodies.as_ref().map(|items| &**items).unwrap()\n+    };\n     map::provide(providers);\n }"}, {"sha": "c15d54745a10523f4730735248c365e2a011ef05", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -7,7 +7,7 @@ use crate::ty::{fast_reject, TyCtxt};\n \n use rustc_ast::ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_data_structures::stable_hasher::{HashStable, StableHasher, ToStableHashKey};\n+use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::Lrc;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, DefIndex};\n@@ -164,15 +164,6 @@ impl<'a> StableHashingContext<'a> {\n         }\n         IGNORED_ATTRIBUTES.with(|attrs| attrs.contains(&name))\n     }\n-\n-    pub fn hash_hir_item_like<F: FnOnce(&mut Self)>(&mut self, f: F) {\n-        let prev_hash_node_ids = self.node_id_hashing_mode;\n-        self.node_id_hashing_mode = NodeIdHashingMode::Ignore;\n-\n-        f(self);\n-\n-        self.node_id_hashing_mode = prev_hash_node_ids;\n-    }\n }\n \n /// Something that can provide a stable hashing context.\n@@ -206,19 +197,6 @@ impl<'a> StableHashingContextProvider<'a> for StableHashingContext<'a> {\n \n impl<'a> crate::dep_graph::DepGraphSafe for StableHashingContext<'a> {}\n \n-impl<'a> ToStableHashKey<StableHashingContext<'a>> for hir::HirId {\n-    type KeyType = (DefPathHash, hir::ItemLocalId);\n-\n-    #[inline]\n-    fn to_stable_hash_key(\n-        &self,\n-        hcx: &StableHashingContext<'a>,\n-    ) -> (DefPathHash, hir::ItemLocalId) {\n-        let def_path_hash = hcx.local_def_path_hash(self.owner);\n-        (def_path_hash, self.local_id)\n-    }\n-}\n-\n impl<'a> HashStable<StableHashingContext<'a>> for ast::NodeId {\n     fn hash_stable(&self, _: &mut StableHashingContext<'a>, _: &mut StableHasher) {\n         panic!(\"Node IDs should not appear in incremental state\");"}, {"sha": "06bfd782b59ce5b9a5421f3774bf658f9f225ba9", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 15, "deletions": 54, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -6,7 +6,7 @@ use crate::ich::{Fingerprint, NodeIdHashingMode, StableHashingContext};\n use rustc_attr as attr;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher, ToStableHashKey};\n use rustc_hir as hir;\n-use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, CRATE_DEF_INDEX};\n+use rustc_hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX};\n use smallvec::SmallVec;\n use std::mem;\n \n@@ -105,6 +105,20 @@ impl<'ctx> rustc_hir::HashStableContext for StableHashingContext<'ctx> {\n             }\n         }\n     }\n+\n+    fn hash_hir_item_like<F: FnOnce(&mut Self)>(&mut self, f: F) {\n+        let prev_hash_node_ids = self.node_id_hashing_mode;\n+        self.node_id_hashing_mode = NodeIdHashingMode::Ignore;\n+\n+        f(self);\n+\n+        self.node_id_hashing_mode = prev_hash_node_ids;\n+    }\n+\n+    #[inline]\n+    fn local_def_path_hash(&self, def_index: DefIndex) -> DefPathHash {\n+        self.local_def_path_hash(def_index)\n+    }\n }\n \n impl<'a> ToStableHashKey<StableHashingContext<'a>> for DefId {\n@@ -158,59 +172,6 @@ impl<'a> ToStableHashKey<StableHashingContext<'a>> for hir::ItemLocalId {\n     }\n }\n \n-impl<'a> HashStable<StableHashingContext<'a>> for hir::TraitItem<'_> {\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        let hir::TraitItem { hir_id: _, ident, ref attrs, ref generics, ref kind, span } = *self;\n-\n-        hcx.hash_hir_item_like(|hcx| {\n-            ident.name.hash_stable(hcx, hasher);\n-            attrs.hash_stable(hcx, hasher);\n-            generics.hash_stable(hcx, hasher);\n-            kind.hash_stable(hcx, hasher);\n-            span.hash_stable(hcx, hasher);\n-        });\n-    }\n-}\n-\n-impl<'a> HashStable<StableHashingContext<'a>> for hir::ImplItem<'_> {\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        let hir::ImplItem {\n-            hir_id: _,\n-            ident,\n-            ref vis,\n-            defaultness,\n-            ref attrs,\n-            ref generics,\n-            ref kind,\n-            span,\n-        } = *self;\n-\n-        hcx.hash_hir_item_like(|hcx| {\n-            ident.name.hash_stable(hcx, hasher);\n-            vis.hash_stable(hcx, hasher);\n-            defaultness.hash_stable(hcx, hasher);\n-            attrs.hash_stable(hcx, hasher);\n-            generics.hash_stable(hcx, hasher);\n-            kind.hash_stable(hcx, hasher);\n-            span.hash_stable(hcx, hasher);\n-        });\n-    }\n-}\n-\n-impl<'a> HashStable<StableHashingContext<'a>> for hir::Item<'_> {\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        let hir::Item { ident, ref attrs, hir_id: _, ref kind, ref vis, span } = *self;\n-\n-        hcx.hash_hir_item_like(|hcx| {\n-            ident.name.hash_stable(hcx, hasher);\n-            attrs.hash_stable(hcx, hasher);\n-            kind.hash_stable(hcx, hasher);\n-            vis.hash_stable(hcx, hasher);\n-            span.hash_stable(hcx, hasher);\n-        });\n-    }\n-}\n-\n impl<'a> HashStable<StableHashingContext<'a>> for hir::Body<'_> {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n         let hir::Body { params, value, generator_kind } = self;"}, {"sha": "ff3a82e53639e38133ff8f9d58e006477c45004d", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -55,6 +55,37 @@ rustc_queries! {\n             desc { \"get the crate HIR\" }\n         }\n \n+        // The indexed HIR. This can be conveniently accessed by `tcx.hir()`.\n+        // Avoid calling this query directly.\n+        query index_hir(_: CrateNum) -> &'tcx map::IndexedHir<'tcx> {\n+            eval_always\n+            no_hash\n+            desc { \"index HIR\" }\n+        }\n+\n+        // The items in a module.\n+        // This can be conveniently accessed by `tcx.hir().visit_item_likes_in_module`.\n+        // Avoid calling this query directly.\n+        query hir_module_items(key: DefId) -> &'tcx hir::ModuleItems {\n+            eval_always\n+        }\n+\n+        // An HIR item with a `DefId` that can own other HIR items which do not themselves have\n+        // a `DefId`.\n+        // This can be conveniently accessed by methods on `tcx.hir()`.\n+        // Avoid calling this query directly.\n+        query hir_owner(key: DefId) -> &'tcx HirOwner<'tcx> {\n+            eval_always\n+        }\n+\n+        // The HIR items which do not themselves have a `DefId` and are owned by another HIR item\n+        // with a `DefId`.\n+        // This can be conveniently accessed by methods on `tcx.hir()`.\n+        // Avoid calling this query directly.\n+        query hir_owner_items(key: DefId) -> &'tcx HirOwnerItems<'tcx> {\n+            eval_always\n+        }\n+\n         /// Records the type of every item.\n         query type_of(key: DefId) -> Ty<'tcx> {\n             cache_on_disk_if { key.is_local() }\n@@ -653,6 +684,9 @@ rustc_queries! {\n     }\n \n     TypeChecking {\n+        query all_local_trait_impls(key: CrateNum) -> &'tcx BTreeMap<DefId, Vec<hir::HirId>> {\n+            desc { \"local trait impls\" }\n+        }\n         query trait_impls_of(key: DefId) -> &'tcx ty::trait_def::TraitImpls {\n             desc { |tcx| \"trait impls of `{}`\", tcx.def_path_str(key) }\n         }"}, {"sha": "611a2dc20b41025c53f01dff6a72d1601e140b17", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -5,6 +5,7 @@ use crate::dep_graph::DepGraph;\n use crate::dep_graph::{self, DepConstructor};\n use crate::hir::exports::Export;\n use crate::hir::map as hir_map;\n+use crate::hir::map::definitions::Definitions;\n use crate::hir::map::{DefPathData, DefPathHash};\n use crate::ich::{NodeIdHashingMode, StableHashingContext};\n use crate::infer::canonical::{Canonical, CanonicalVarInfo, CanonicalVarInfos};\n@@ -938,7 +939,7 @@ pub struct GlobalCtxt<'tcx> {\n \n     interners: CtxtInterners<'tcx>,\n \n-    cstore: Box<CrateStoreDyn>,\n+    pub(crate) cstore: Box<CrateStoreDyn>,\n \n     pub sess: &'tcx Session,\n \n@@ -971,8 +972,8 @@ pub struct GlobalCtxt<'tcx> {\n     /// Export map produced by name resolution.\n     export_map: FxHashMap<DefId, Vec<Export<hir::HirId>>>,\n \n-    /// This should usually be accessed with the `tcx.hir()` method.\n-    pub(crate) hir_map: hir_map::Map<'tcx>,\n+    pub(crate) untracked_crate: &'tcx hir::Crate<'tcx>,\n+    pub(crate) definitions: &'tcx Definitions,\n \n     /// A map from `DefPathHash` -> `DefId`. Includes `DefId`s from the local crate\n     /// as well as all upstream crates. Only populated in incremental mode.\n@@ -1116,7 +1117,9 @@ impl<'tcx> TyCtxt<'tcx> {\n         extern_providers: ty::query::Providers<'tcx>,\n         arena: &'tcx WorkerLocal<Arena<'tcx>>,\n         resolutions: ty::ResolverOutputs,\n-        hir: hir_map::Map<'tcx>,\n+        krate: &'tcx hir::Crate<'tcx>,\n+        definitions: &'tcx Definitions,\n+        dep_graph: DepGraph,\n         on_disk_query_result_cache: query::OnDiskCache<'tcx>,\n         crate_name: &str,\n         output_filenames: &OutputFilenames,\n@@ -1128,7 +1131,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         let common_types = CommonTypes::new(&interners);\n         let common_lifetimes = CommonLifetimes::new(&interners);\n         let common_consts = CommonConsts::new(&interners, &common_types);\n-        let dep_graph = hir.dep_graph.clone();\n         let cstore = resolutions.cstore;\n         let crates = cstore.crates_untracked();\n         let max_cnum = crates.iter().map(|c| c.as_usize()).max().unwrap_or(0);\n@@ -1139,7 +1141,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             let def_path_tables = crates\n                 .iter()\n                 .map(|&cnum| (cnum, cstore.def_path_table(cnum)))\n-                .chain(iter::once((LOCAL_CRATE, hir.definitions().def_path_table())));\n+                .chain(iter::once((LOCAL_CRATE, definitions.def_path_table())));\n \n             // Precompute the capacity of the hashmap so we don't have to\n             // re-allocate when populating it.\n@@ -1159,11 +1161,11 @@ impl<'tcx> TyCtxt<'tcx> {\n \n         let mut trait_map: FxHashMap<_, FxHashMap<_, _>> = FxHashMap::default();\n         for (k, v) in resolutions.trait_map {\n-            let hir_id = hir.node_to_hir_id(k);\n+            let hir_id = definitions.node_to_hir_id(k);\n             let map = trait_map.entry(hir_id.owner).or_default();\n             let v = v\n                 .into_iter()\n-                .map(|tc| tc.map_import_ids(|id| hir.definitions().node_to_hir_id(id)))\n+                .map(|tc| tc.map_import_ids(|id| definitions.node_to_hir_id(id)))\n                 .collect();\n             map.insert(hir_id.local_id, StableVec::new(v));\n         }\n@@ -1185,28 +1187,31 @@ impl<'tcx> TyCtxt<'tcx> {\n                 .export_map\n                 .into_iter()\n                 .map(|(k, v)| {\n-                    let exports: Vec<_> =\n-                        v.into_iter().map(|e| e.map_id(|id| hir.node_to_hir_id(id))).collect();\n+                    let exports: Vec<_> = v\n+                        .into_iter()\n+                        .map(|e| e.map_id(|id| definitions.node_to_hir_id(id)))\n+                        .collect();\n                     (k, exports)\n                 })\n                 .collect(),\n             maybe_unused_trait_imports: resolutions\n                 .maybe_unused_trait_imports\n                 .into_iter()\n-                .map(|id| hir.local_def_id_from_node_id(id))\n+                .map(|id| definitions.local_def_id(id))\n                 .collect(),\n             maybe_unused_extern_crates: resolutions\n                 .maybe_unused_extern_crates\n                 .into_iter()\n-                .map(|(id, sp)| (hir.local_def_id_from_node_id(id), sp))\n+                .map(|(id, sp)| (definitions.local_def_id(id), sp))\n                 .collect(),\n             glob_map: resolutions\n                 .glob_map\n                 .into_iter()\n-                .map(|(id, names)| (hir.local_def_id_from_node_id(id), names))\n+                .map(|(id, names)| (definitions.local_def_id(id), names))\n                 .collect(),\n             extern_prelude: resolutions.extern_prelude,\n-            hir_map: hir,\n+            untracked_crate: krate,\n+            definitions,\n             def_path_hash_to_def_id,\n             queries: query::Queries::new(providers, extern_providers, on_disk_query_result_cache),\n             rcache: Default::default(),\n@@ -1286,7 +1291,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     #[inline]\n     pub fn def_path_hash(self, def_id: DefId) -> hir_map::DefPathHash {\n         if def_id.is_local() {\n-            self.hir().definitions().def_path_hash(def_id.index)\n+            self.definitions.def_path_hash(def_id.index)\n         } else {\n             self.cstore.def_path_hash(def_id)\n         }\n@@ -1333,9 +1338,9 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     #[inline(always)]\n     pub fn create_stable_hashing_context(self) -> StableHashingContext<'tcx> {\n-        let krate = self.gcx.hir_map.untracked_krate();\n+        let krate = self.gcx.untracked_crate;\n \n-        StableHashingContext::new(self.sess, krate, self.hir().definitions(), &*self.cstore)\n+        StableHashingContext::new(self.sess, krate, self.definitions, &*self.cstore)\n     }\n \n     // This method makes sure that we have a DepNode and a Fingerprint for"}, {"sha": "d3c4ddf1ed30a834745d70f6197d332818b2fee8", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -3142,8 +3142,11 @@ pub fn provide(providers: &mut ty::query::Providers<'_>) {\n     context::provide(providers);\n     erase_regions::provide(providers);\n     layout::provide(providers);\n-    *providers =\n-        ty::query::Providers { trait_impls_of: trait_def::trait_impls_of_provider, ..*providers };\n+    *providers = ty::query::Providers {\n+        trait_impls_of: trait_def::trait_impls_of_provider,\n+        all_local_trait_impls: trait_def::all_local_trait_impls,\n+        ..*providers\n+    };\n }\n \n /// A map for the local crate mapping each type to a vector of its"}, {"sha": "3d17883fec3bd3e8090a519e96db207f3c0ffa6a", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -1,5 +1,7 @@\n use crate::dep_graph::{self, DepConstructor, DepNode, DepNodeParams};\n use crate::hir::exports::Export;\n+use crate::hir::map;\n+use crate::hir::{HirOwner, HirOwnerItems};\n use crate::infer::canonical::{self, Canonical};\n use crate::lint::LintLevelMap;\n use crate::middle::codegen_fn_attrs::CodegenFnAttrs;\n@@ -54,6 +56,7 @@ use rustc_attr as attr;\n use rustc_span::symbol::Symbol;\n use rustc_span::{Span, DUMMY_SP};\n use std::borrow::Cow;\n+use std::collections::BTreeMap;\n use std::convert::TryFrom;\n use std::ops::Deref;\n use std::sync::Arc;\n@@ -176,10 +179,7 @@ pub fn force_from_dep_node<'tcx>(tcx: TyCtxt<'tcx>, dep_node: &DepNode) -> bool\n     rustc_dep_node_force!([dep_node, tcx]\n         // These are inputs that are expected to be pre-allocated and that\n         // should therefore always be red or green already.\n-        DepKind::AllLocalTraitImpls |\n         DepKind::CrateMetadata |\n-        DepKind::HirBody |\n-        DepKind::Hir |\n \n         // These are anonymous nodes.\n         DepKind::TraitSelect |"}, {"sha": "91a99ec43e6a973ae32edea2ea89ff430c23dd6e", "filename": "src/librustc/ty/trait_def.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ftrait_def.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -5,11 +5,13 @@ use crate::ty::fast_reject;\n use crate::ty::fold::TypeFoldable;\n use crate::ty::{Ty, TyCtxt};\n use rustc_hir as hir;\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::{CrateNum, DefId};\n+use rustc_hir::HirId;\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_macros::HashStable;\n+use std::collections::BTreeMap;\n \n /// A trait's definition with type information.\n #[derive(HashStable)]\n@@ -146,6 +148,14 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n }\n \n+// Query provider for `all_local_trait_impls`.\n+pub(super) fn all_local_trait_impls<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    krate: CrateNum,\n+) -> &'tcx BTreeMap<DefId, Vec<HirId>> {\n+    &tcx.hir_crate(krate).trait_impls\n+}\n+\n // Query provider for `trait_impls_of`.\n pub(super) fn trait_impls_of_provider(tcx: TyCtxt<'_>, trait_id: DefId) -> &TraitImpls {\n     let mut impls = TraitImpls::default();"}, {"sha": "3ef02d7c61e782f00b976263db910c3f5de5b829", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -535,9 +535,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         self.resolver.definitions().init_node_id_to_hir_id_mapping(self.node_id_to_hir_id);\n \n         hir::Crate {\n-            module,\n-            attrs,\n-            span: c.span,\n+            item: hir::CrateItem { module, attrs, span: c.span },\n             exported_macros: self.arena.alloc_from_iter(self.exported_macros),\n             non_exported_macro_attrs: self.arena.alloc_from_iter(self.non_exported_macro_attrs),\n             items: self.items,\n@@ -1464,7 +1462,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         impl<'r, 'a, 'v, 'hir> intravisit::Visitor<'v> for ImplTraitLifetimeCollector<'r, 'a, 'hir> {\n             type Map = Map<'v>;\n \n-            fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<'_, Self::Map> {\n+            fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n                 intravisit::NestedVisitorMap::None\n             }\n "}, {"sha": "dbc2ef6f2b05e1b938739e1a1571b055f9645c7d", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -341,9 +341,9 @@ pub fn start_async_codegen<B: ExtraBackendMethods>(\n \n     let crate_name = tcx.crate_name(LOCAL_CRATE);\n     let crate_hash = tcx.crate_hash(LOCAL_CRATE);\n-    let no_builtins = attr::contains_name(&tcx.hir().krate().attrs, sym::no_builtins);\n+    let no_builtins = attr::contains_name(&tcx.hir().krate().item.attrs, sym::no_builtins);\n     let subsystem =\n-        attr::first_attr_value_str_by_name(&tcx.hir().krate().attrs, sym::windows_subsystem);\n+        attr::first_attr_value_str_by_name(&tcx.hir().krate().item.attrs, sym::windows_subsystem);\n     let windows_subsystem = subsystem.map(|subsystem| {\n         if subsystem != sym::windows && subsystem != sym::console {\n             tcx.sess.fatal(&format!("}, {"sha": "2361046c0366c7eca54ab3352e7182cfd9118d23", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -106,7 +106,7 @@ trait HirPrinterSupport<'hir>: pprust_hir::PpAnn {\n \n     /// Provides a uniform interface for re-extracting a reference to an\n     /// `hir_map::Map` from a value that now owns it.\n-    fn hir_map(&self) -> Option<&hir_map::Map<'hir>>;\n+    fn hir_map(&self) -> Option<hir_map::Map<'hir>>;\n \n     /// Produces the pretty-print annotation object.\n     ///\n@@ -142,8 +142,8 @@ impl<'hir> HirPrinterSupport<'hir> for NoAnn<'hir> {\n         self.sess\n     }\n \n-    fn hir_map(&self) -> Option<&hir_map::Map<'hir>> {\n-        self.tcx.map(|tcx| *tcx.hir())\n+    fn hir_map(&self) -> Option<hir_map::Map<'hir>> {\n+        self.tcx.map(|tcx| tcx.hir())\n     }\n \n     fn pp_ann(&self) -> &dyn pprust_hir::PpAnn {\n@@ -155,7 +155,7 @@ impl<'hir> pprust::PpAnn for NoAnn<'hir> {}\n impl<'hir> pprust_hir::PpAnn for NoAnn<'hir> {\n     fn nested(&self, state: &mut pprust_hir::State<'_>, nested: pprust_hir::Nested) {\n         if let Some(tcx) = self.tcx {\n-            pprust_hir::PpAnn::nested(*tcx.hir(), state, nested)\n+            pprust_hir::PpAnn::nested(&tcx.hir(), state, nested)\n         }\n     }\n }\n@@ -216,8 +216,8 @@ impl<'hir> HirPrinterSupport<'hir> for IdentifiedAnnotation<'hir> {\n         self.sess\n     }\n \n-    fn hir_map(&self) -> Option<&hir_map::Map<'hir>> {\n-        self.tcx.map(|tcx| *tcx.hir())\n+    fn hir_map(&self) -> Option<hir_map::Map<'hir>> {\n+        self.tcx.map(|tcx| tcx.hir())\n     }\n \n     fn pp_ann(&self) -> &dyn pprust_hir::PpAnn {\n@@ -228,7 +228,7 @@ impl<'hir> HirPrinterSupport<'hir> for IdentifiedAnnotation<'hir> {\n impl<'hir> pprust_hir::PpAnn for IdentifiedAnnotation<'hir> {\n     fn nested(&self, state: &mut pprust_hir::State<'_>, nested: pprust_hir::Nested) {\n         if let Some(ref tcx) = self.tcx {\n-            pprust_hir::PpAnn::nested(*tcx.hir(), state, nested)\n+            pprust_hir::PpAnn::nested(&tcx.hir(), state, nested)\n         }\n     }\n     fn pre(&self, s: &mut pprust_hir::State<'_>, node: pprust_hir::AnnNode<'_>) {\n@@ -315,8 +315,8 @@ impl<'b, 'tcx> HirPrinterSupport<'tcx> for TypedAnnotation<'b, 'tcx> {\n         &self.tcx.sess\n     }\n \n-    fn hir_map(&self) -> Option<&hir_map::Map<'tcx>> {\n-        Some(&self.tcx.hir())\n+    fn hir_map(&self) -> Option<hir_map::Map<'tcx>> {\n+        Some(self.tcx.hir())\n     }\n \n     fn pp_ann(&self) -> &dyn pprust_hir::PpAnn {\n@@ -334,7 +334,7 @@ impl<'a, 'tcx> pprust_hir::PpAnn for TypedAnnotation<'a, 'tcx> {\n         if let pprust_hir::Nested::Body(id) = nested {\n             self.tables.set(self.tcx.body_tables(id));\n         }\n-        pprust_hir::PpAnn::nested(*self.tcx.hir(), state, nested);\n+        pprust_hir::PpAnn::nested(&self.tcx.hir(), state, nested);\n         self.tables.set(old_tables);\n     }\n     fn pre(&self, s: &mut pprust_hir::State<'_>, node: pprust_hir::AnnNode<'_>) {"}, {"sha": "48b423de268a789a86e79b4ddd8597efd60b1fb4", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -596,7 +596,7 @@ pub struct WhereEqPredicate<'hir> {\n     pub rhs_ty: &'hir Ty<'hir>,\n }\n \n-#[derive(RustcEncodable, RustcDecodable, Debug)]\n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub struct ModuleItems {\n     // Use BTreeSets here so items are in the same order as in the\n     // list of all items in Crate\n@@ -605,6 +605,14 @@ pub struct ModuleItems {\n     pub impl_items: BTreeSet<ImplItemId>,\n }\n \n+/// A type representing only the top-level module.\n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n+pub struct CrateItem<'hir> {\n+    pub module: Mod<'hir>,\n+    pub attrs: &'hir [Attribute],\n+    pub span: Span,\n+}\n+\n /// The top-level data structure that stores the entire contents of\n /// the crate currently being compiled.\n ///\n@@ -613,9 +621,7 @@ pub struct ModuleItems {\n /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/hir.html\n #[derive(RustcEncodable, RustcDecodable, Debug)]\n pub struct Crate<'hir> {\n-    pub module: Mod<'hir>,\n-    pub attrs: &'hir [Attribute],\n-    pub span: Span,\n+    pub item: CrateItem<'hir>,\n     pub exported_macros: &'hir [MacroDef<'hir>],\n     // Attributes from non-exported macros, kept only for collecting the library feature list.\n     pub non_exported_macro_attrs: &'hir [Attribute],\n@@ -2651,7 +2657,7 @@ pub type TraitMap<ID = HirId> = NodeMap<Vec<TraitCandidate<ID>>>;\n // imported.\n pub type GlobMap = NodeMap<FxHashSet<Name>>;\n \n-#[derive(Copy, Clone, Debug)]\n+#[derive(Copy, Clone, Debug, HashStable_Generic)]\n pub enum Node<'hir> {\n     Param(&'hir Param<'hir>),\n     Item(&'hir Item<'hir>),\n@@ -2681,7 +2687,7 @@ pub enum Node<'hir> {\n     GenericParam(&'hir GenericParam<'hir>),\n     Visibility(&'hir Visibility<'hir>),\n \n-    Crate,\n+    Crate(&'hir CrateItem<'hir>),\n }\n \n impl Node<'_> {"}, {"sha": "79c7f34dd5310fd4c917532359b3491b19053848", "filename": "src/librustc_hir/intravisit.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_hir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_hir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fintravisit.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -134,7 +134,7 @@ pub trait Map<'hir> {\n ///\n /// See the comments on `ItemLikeVisitor` for more details on the overall\n /// visit strategy.\n-pub enum NestedVisitorMap<'this, M> {\n+pub enum NestedVisitorMap<M> {\n     /// Do not visit any nested things. When you add a new\n     /// \"non-nested\" thing, you will want to audit such uses to see if\n     /// they remain valid.\n@@ -151,20 +151,20 @@ pub enum NestedVisitorMap<'this, M> {\n     /// to use `visit_all_item_likes()` as an outer loop,\n     /// and to have the visitor that visits the contents of each item\n     /// using this setting.\n-    OnlyBodies(&'this M),\n+    OnlyBodies(M),\n \n     /// Visits all nested things, including item-likes.\n     ///\n     /// **This is an unusual choice.** It is used when you want to\n     /// process everything within their lexical context. Typically you\n     /// kick off the visit by doing `walk_krate()`.\n-    All(&'this M),\n+    All(M),\n }\n \n-impl<'this, M> NestedVisitorMap<'this, M> {\n+impl<M> NestedVisitorMap<M> {\n     /// Returns the map to use for an \"intra item-like\" thing (if any).\n     /// E.g., function body.\n-    fn intra(self) -> Option<&'this M> {\n+    fn intra(self) -> Option<M> {\n         match self {\n             NestedVisitorMap::None => None,\n             NestedVisitorMap::OnlyBodies(map) => Some(map),\n@@ -174,7 +174,7 @@ impl<'this, M> NestedVisitorMap<'this, M> {\n \n     /// Returns the map to use for an \"item-like\" thing (if any).\n     /// E.g., item, impl-item.\n-    fn inter(self) -> Option<&'this M> {\n+    fn inter(self) -> Option<M> {\n         match self {\n             NestedVisitorMap::None => None,\n             NestedVisitorMap::OnlyBodies(_) => None,\n@@ -221,7 +221,7 @@ pub trait Visitor<'v>: Sized {\n     /// `panic!()`. This way, if a new `visit_nested_XXX` variant is\n     /// added in the future, we will see the panic in your code and\n     /// fix it appropriately.\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map>;\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map>;\n \n     /// Invoked when a nested item is encountered. By default does\n     /// nothing unless you override `nested_visit_map` to return other than\n@@ -438,8 +438,8 @@ pub trait Visitor<'v>: Sized {\n \n /// Walks the contents of a crate. See also `Crate::visit_all_items`.\n pub fn walk_crate<'v, V: Visitor<'v>>(visitor: &mut V, krate: &'v Crate<'v>) {\n-    visitor.visit_mod(&krate.module, krate.span, CRATE_HIR_ID);\n-    walk_list!(visitor, visit_attribute, krate.attrs);\n+    visitor.visit_mod(&krate.item.module, krate.item.span, CRATE_HIR_ID);\n+    walk_list!(visitor, visit_attribute, krate.item.attrs);\n     walk_list!(visitor, visit_macro_def, krate.exported_macros);\n }\n "}, {"sha": "1a2c3a38565c8e17ae59197f19729b337579645f", "filename": "src/librustc_hir/print.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_hir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_hir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fprint.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -102,7 +102,7 @@ impl<'a> State<'a> {\n             Node::Ctor(..) => panic!(\"cannot print isolated Ctor\"),\n             Node::Local(a) => self.print_local_decl(&a),\n             Node::MacroDef(_) => panic!(\"cannot print MacroDef\"),\n-            Node::Crate => panic!(\"cannot print Crate\"),\n+            Node::Crate(..) => panic!(\"cannot print Crate\"),\n         }\n     }\n }\n@@ -151,7 +151,7 @@ pub fn print_crate<'a>(\n     // When printing the AST, we sometimes need to inject `#[no_std]` here.\n     // Since you can't compile the HIR, it's not necessary.\n \n-    s.print_mod(&krate.module, &krate.attrs);\n+    s.print_mod(&krate.item.module, &krate.item.attrs);\n     s.print_remaining_comments();\n     s.s.eof()\n }"}, {"sha": "7ca2bfded3c2d9921956296fb13ec81a39283a02", "filename": "src/librustc_hir/stable_hash_impls.rs", "status": "modified", "additions": 90, "deletions": 3, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_hir%2Fstable_hash_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_hir%2Fstable_hash_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fstable_hash_impls.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -1,7 +1,11 @@\n-use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+use rustc_data_structures::stable_hasher::{HashStable, StableHasher, ToStableHashKey};\n \n-use crate::hir::{BodyId, Expr, ImplItemId, ItemId, Mod, TraitItemId, Ty, VisibilityKind};\n-use crate::hir_id::HirId;\n+use crate::hir::{\n+    BodyId, Expr, ImplItem, ImplItemId, Item, ItemId, Mod, TraitItem, TraitItemId, Ty,\n+    VisibilityKind,\n+};\n+use crate::hir_id::{HirId, ItemLocalId};\n+use rustc_span::def_id::{DefIndex, DefPathHash};\n \n /// Requirements for a `StableHashingContext` to be used in this crate.\n /// This is a hack to allow using the `HashStable_Generic` derive macro\n@@ -16,6 +20,36 @@ pub trait HashStableContext:\n     fn hash_hir_expr(&mut self, _: &Expr<'_>, hasher: &mut StableHasher);\n     fn hash_hir_ty(&mut self, _: &Ty<'_>, hasher: &mut StableHasher);\n     fn hash_hir_visibility_kind(&mut self, _: &VisibilityKind<'_>, hasher: &mut StableHasher);\n+    fn hash_hir_item_like<F: FnOnce(&mut Self)>(&mut self, f: F);\n+    fn local_def_path_hash(&self, def_index: DefIndex) -> DefPathHash;\n+}\n+\n+impl<HirCtx: crate::HashStableContext> ToStableHashKey<HirCtx> for HirId {\n+    type KeyType = (DefPathHash, ItemLocalId);\n+\n+    #[inline]\n+    fn to_stable_hash_key(&self, hcx: &HirCtx) -> (DefPathHash, ItemLocalId) {\n+        let def_path_hash = hcx.local_def_path_hash(self.owner);\n+        (def_path_hash, self.local_id)\n+    }\n+}\n+\n+impl<HirCtx: crate::HashStableContext> ToStableHashKey<HirCtx> for TraitItemId {\n+    type KeyType = (DefPathHash, ItemLocalId);\n+\n+    #[inline]\n+    fn to_stable_hash_key(&self, hcx: &HirCtx) -> (DefPathHash, ItemLocalId) {\n+        self.hir_id.to_stable_hash_key(hcx)\n+    }\n+}\n+\n+impl<HirCtx: crate::HashStableContext> ToStableHashKey<HirCtx> for ImplItemId {\n+    type KeyType = (DefPathHash, ItemLocalId);\n+\n+    #[inline]\n+    fn to_stable_hash_key(&self, hcx: &HirCtx) -> (DefPathHash, ItemLocalId) {\n+        self.hir_id.to_stable_hash_key(hcx)\n+    }\n }\n \n impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for HirId {\n@@ -78,3 +112,56 @@ impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for VisibilityKind<'_>\n         hcx.hash_hir_visibility_kind(self, hasher)\n     }\n }\n+\n+impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for TraitItem<'_> {\n+    fn hash_stable(&self, hcx: &mut HirCtx, hasher: &mut StableHasher) {\n+        let TraitItem { hir_id: _, ident, ref attrs, ref generics, ref kind, span } = *self;\n+\n+        hcx.hash_hir_item_like(|hcx| {\n+            ident.name.hash_stable(hcx, hasher);\n+            attrs.hash_stable(hcx, hasher);\n+            generics.hash_stable(hcx, hasher);\n+            kind.hash_stable(hcx, hasher);\n+            span.hash_stable(hcx, hasher);\n+        });\n+    }\n+}\n+\n+impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for ImplItem<'_> {\n+    fn hash_stable(&self, hcx: &mut HirCtx, hasher: &mut StableHasher) {\n+        let ImplItem {\n+            hir_id: _,\n+            ident,\n+            ref vis,\n+            defaultness,\n+            ref attrs,\n+            ref generics,\n+            ref kind,\n+            span,\n+        } = *self;\n+\n+        hcx.hash_hir_item_like(|hcx| {\n+            ident.name.hash_stable(hcx, hasher);\n+            vis.hash_stable(hcx, hasher);\n+            defaultness.hash_stable(hcx, hasher);\n+            attrs.hash_stable(hcx, hasher);\n+            generics.hash_stable(hcx, hasher);\n+            kind.hash_stable(hcx, hasher);\n+            span.hash_stable(hcx, hasher);\n+        });\n+    }\n+}\n+\n+impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for Item<'_> {\n+    fn hash_stable(&self, hcx: &mut HirCtx, hasher: &mut StableHasher) {\n+        let Item { ident, ref attrs, hir_id: _, ref kind, ref vis, span } = *self;\n+\n+        hcx.hash_hir_item_like(|hcx| {\n+            ident.name.hash_stable(hcx, hasher);\n+            attrs.hash_stable(hcx, hasher);\n+            kind.hash_stable(hcx, hasher);\n+            vis.hash_stable(hcx, hasher);\n+            span.hash_stable(hcx, hasher);\n+        });\n+    }\n+}"}, {"sha": "a7dccaf974b8240146a6c8cd8e1dd7ab37bb5ccb", "filename": "src/librustc_incremental/assert_dep_graph.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_dep_graph.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -68,7 +68,7 @@ pub fn assert_dep_graph(tcx: TyCtxt<'_>) {\n         let (if_this_changed, then_this_would_need) = {\n             let mut visitor =\n                 IfThisChanged { tcx, if_this_changed: vec![], then_this_would_need: vec![] };\n-            visitor.process_attrs(hir::CRATE_HIR_ID, &tcx.hir().krate().attrs);\n+            visitor.process_attrs(hir::CRATE_HIR_ID, &tcx.hir().krate().item.attrs);\n             tcx.hir().krate().visit_all_item_likes(&mut visitor.as_deep_visitor());\n             (visitor.if_this_changed, visitor.then_this_would_need)\n         };\n@@ -120,7 +120,7 @@ impl IfThisChanged<'tcx> {\n             if attr.check_name(sym::rustc_if_this_changed) {\n                 let dep_node_interned = self.argument(attr);\n                 let dep_node = match dep_node_interned {\n-                    None => def_path_hash.to_dep_node(DepKind::Hir),\n+                    None => DepNode::from_def_path_hash(def_path_hash, DepKind::hir_owner),\n                     Some(n) => match DepNode::from_label_string(&n.as_str(), def_path_hash) {\n                         Ok(n) => n,\n                         Err(()) => {\n@@ -162,8 +162,8 @@ impl IfThisChanged<'tcx> {\n impl Visitor<'tcx> for IfThisChanged<'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n-        NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::OnlyBodies(self.tcx.hir())\n     }\n \n     fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {"}, {"sha": "54d7e0ece503185dfcd241023521c5d556e2c56c", "filename": "src/librustc_incremental/assert_module_sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_incremental%2Fassert_module_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_incremental%2Fassert_module_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_module_sources.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -44,7 +44,7 @@ pub fn assert_module_sources(tcx: TyCtxt<'_>) {\n \n         let ams = AssertModuleSource { tcx, available_cgus };\n \n-        for attr in tcx.hir().krate().attrs {\n+        for attr in tcx.hir().krate().item.attrs {\n             ams.check_attr(attr);\n         }\n     })"}, {"sha": "cfc0a5e1498c8bc0ef0a9b480c1e4d3e1fd5ce51", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -53,9 +53,9 @@ const BASE_FN: &[&str] = &[\n \n /// DepNodes for Hir, which is pretty much everything\n const BASE_HIR: &[&str] = &[\n-    // Hir and HirBody should be computed for all nodes\n-    label_strs::Hir,\n-    label_strs::HirBody,\n+    // hir_owner and hir_owner_items should be computed for all nodes\n+    label_strs::hir_owner,\n+    label_strs::hir_owner_items,\n ];\n \n /// `impl` implementation of struct/trait\n@@ -548,8 +548,8 @@ impl FindAllAttrs<'tcx> {\n impl intravisit::Visitor<'tcx> for FindAllAttrs<'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<'_, Self::Map> {\n-        intravisit::NestedVisitorMap::All(&self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n+        intravisit::NestedVisitorMap::All(self.tcx.hir())\n     }\n \n     fn visit_attribute(&mut self, attr: &'tcx Attribute) {"}, {"sha": "0eda4555e25656f671c9d6f8c88dbf739c85dd4a", "filename": "src/librustc_infer/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -16,7 +16,7 @@ use std::borrow::Cow;\n struct FindLocalByTypeVisitor<'a, 'tcx> {\n     infcx: &'a InferCtxt<'a, 'tcx>,\n     target_ty: Ty<'tcx>,\n-    hir_map: &'a Map<'tcx>,\n+    hir_map: Map<'tcx>,\n     found_local_pattern: Option<&'tcx Pat<'tcx>>,\n     found_arg_pattern: Option<&'tcx Pat<'tcx>>,\n     found_ty: Option<Ty<'tcx>>,\n@@ -25,7 +25,7 @@ struct FindLocalByTypeVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> FindLocalByTypeVisitor<'a, 'tcx> {\n-    fn new(infcx: &'a InferCtxt<'a, 'tcx>, target_ty: Ty<'tcx>, hir_map: &'a Map<'tcx>) -> Self {\n+    fn new(infcx: &'a InferCtxt<'a, 'tcx>, target_ty: Ty<'tcx>, hir_map: Map<'tcx>) -> Self {\n         Self {\n             infcx,\n             target_ty,\n@@ -69,8 +69,8 @@ impl<'a, 'tcx> FindLocalByTypeVisitor<'a, 'tcx> {\n impl<'a, 'tcx> Visitor<'tcx> for FindLocalByTypeVisitor<'a, 'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n-        NestedVisitorMap::OnlyBodies(&self.hir_map)\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::OnlyBodies(self.hir_map)\n     }\n \n     fn visit_local(&mut self, local: &'tcx Local<'tcx>) {\n@@ -223,7 +223,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         let ty = self.resolve_vars_if_possible(&ty);\n         let (name, name_sp, descr, parent_name, parent_descr) = self.extract_type_name(&ty, None);\n \n-        let mut local_visitor = FindLocalByTypeVisitor::new(&self, ty, &self.tcx.hir());\n+        let mut local_visitor = FindLocalByTypeVisitor::new(&self, ty, self.tcx.hir());\n         let ty_to_string = |ty: Ty<'tcx>| -> String {\n             let mut s = String::new();\n             let mut printer = ty::print::FmtPrinter::new(self.tcx, &mut s, Namespace::TypeNS);"}, {"sha": "47d6f5ccbb16dd50ad9bc0b956e97fbdfbbf8606", "filename": "src/librustc_infer/infer/error_reporting/nice_region_error/find_anon_type.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -93,8 +93,8 @@ struct FindNestedTypeVisitor<'tcx> {\n impl Visitor<'tcx> for FindNestedTypeVisitor<'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n-        NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::OnlyBodies(self.tcx.hir())\n     }\n \n     fn visit_ty(&mut self, arg: &'tcx hir::Ty<'tcx>) {\n@@ -212,8 +212,8 @@ struct TyPathVisitor<'tcx> {\n impl Visitor<'tcx> for TyPathVisitor<'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, Map<'tcx>> {\n-        NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Map<'tcx>> {\n+        NestedVisitorMap::OnlyBodies(self.tcx.hir())\n     }\n \n     fn visit_lifetime(&mut self, lifetime: &hir::Lifetime) {"}, {"sha": "4fe7a06e5609ed4e014c85ec83a9239c5554cd9c", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -5,7 +5,7 @@ use crate::util;\n use log::{info, log_enabled, warn};\n use rustc::arena::Arena;\n use rustc::dep_graph::DepGraph;\n-use rustc::hir::map;\n+use rustc::hir::map::Definitions;\n use rustc::lint;\n use rustc::middle;\n use rustc::middle::cstore::{CrateStore, MetadataLoader, MetadataLoaderDyn};\n@@ -713,10 +713,7 @@ pub fn create_global_ctxt<'tcx>(\n     arena: &'tcx WorkerLocal<Arena<'tcx>>,\n ) -> QueryContext<'tcx> {\n     let sess = &compiler.session();\n-    let defs = mem::take(&mut resolver_outputs.definitions);\n-\n-    // Construct the HIR map.\n-    let hir_map = map::map_crate(sess, &*resolver_outputs.cstore, krate, dep_graph, defs);\n+    let defs: &'tcx Definitions = arena.alloc(mem::take(&mut resolver_outputs.definitions));\n \n     let query_result_on_disk_cache = rustc_incremental::load_query_result_cache(sess);\n \n@@ -742,7 +739,9 @@ pub fn create_global_ctxt<'tcx>(\n                 extern_providers,\n                 arena,\n                 resolver_outputs,\n-                hir_map,\n+                krate,\n+                defs,\n+                dep_graph,\n                 query_result_on_disk_cache,\n                 &crate_name,\n                 &outputs,\n@@ -763,6 +762,8 @@ pub fn create_global_ctxt<'tcx>(\n fn analysis(tcx: TyCtxt<'_>, cnum: CrateNum) -> Result<()> {\n     assert_eq!(cnum, LOCAL_CRATE);\n \n+    rustc::hir::map::check_crate(tcx);\n+\n     let sess = tcx.sess;\n     let mut entry_point = None;\n "}, {"sha": "ab8a607072123d73912b07c1cb9eb4f40d5804da", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -399,7 +399,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n     }\n \n     fn check_crate(&mut self, cx: &LateContext<'_, '_>, krate: &hir::Crate<'_>) {\n-        self.check_missing_docs_attrs(cx, None, &krate.attrs, krate.span, \"crate\");\n+        self.check_missing_docs_attrs(cx, None, &krate.item.attrs, krate.item.span, \"crate\");\n \n         for macro_def in krate.exported_macros {\n             let has_doc = macro_def.attrs.iter().any(|a| has_doc(a));\n@@ -1073,7 +1073,7 @@ impl TypeAliasBounds {\n         impl<'a, 'db, 'v> Visitor<'v> for WalkAssocTypes<'a, 'db> {\n             type Map = Map<'v>;\n \n-            fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<'_, Self::Map> {\n+            fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n                 intravisit::NestedVisitorMap::None\n             }\n "}, {"sha": "d2cc55106035752bbab53f6575eaf576a4288fc6", "filename": "src/librustc_lint/late.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_lint%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_lint%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flate.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -99,8 +99,8 @@ impl<'a, 'tcx, T: LateLintPass<'a, 'tcx>> hir_visit::Visitor<'tcx>\n     /// Because lints are scoped lexically, we want to walk nested\n     /// items in the context of the outer item, so enable\n     /// deep-walking.\n-    fn nested_visit_map(&mut self) -> hir_visit::NestedVisitorMap<'_, Self::Map> {\n-        hir_visit::NestedVisitorMap::All(&self.context.tcx.hir())\n+    fn nested_visit_map(&mut self) -> hir_visit::NestedVisitorMap<Self::Map> {\n+        hir_visit::NestedVisitorMap::All(self.context.tcx.hir())\n     }\n \n     fn visit_nested_body(&mut self, body: hir::BodyId) {\n@@ -419,7 +419,7 @@ fn late_lint_pass_crate<'tcx, T: for<'a> LateLintPass<'a, 'tcx>>(tcx: TyCtxt<'tc\n     let mut cx = LateContextAndPass { context, pass };\n \n     // Visit the whole crate.\n-    cx.with_lint_attrs(hir::CRATE_HIR_ID, &krate.attrs, |cx| {\n+    cx.with_lint_attrs(hir::CRATE_HIR_ID, &krate.item.attrs, |cx| {\n         // since the root module isn't visited as an item (because it isn't an\n         // item), warn for it here.\n         lint_callback!(cx, check_crate, krate);"}, {"sha": "2062f9499aeb96f0e0980e8597a3a3bc7e10d97a", "filename": "src/librustc_lint/levels.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_lint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_lint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flevels.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -29,7 +29,7 @@ fn lint_levels(tcx: TyCtxt<'_>, cnum: CrateNum) -> &LintLevelMap {\n     let mut builder = LintLevelMapBuilder { levels, tcx, store };\n     let krate = tcx.hir().krate();\n \n-    let push = builder.levels.push(&krate.attrs, &store);\n+    let push = builder.levels.push(&krate.item.attrs, &store);\n     builder.levels.register_id(hir::CRATE_HIR_ID);\n     for macro_def in krate.exported_macros {\n         builder.levels.register_id(macro_def.hir_id);\n@@ -438,8 +438,8 @@ impl LintLevelMapBuilder<'_, '_> {\n impl<'tcx> intravisit::Visitor<'tcx> for LintLevelMapBuilder<'_, 'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<'_, Self::Map> {\n-        intravisit::NestedVisitorMap::All(&self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n+        intravisit::NestedVisitorMap::All(self.tcx.hir())\n     }\n \n     fn visit_param(&mut self, param: &'tcx hir::Param<'tcx>) {"}, {"sha": "13668b2423fddf27452bdda804d8b2be7eb7d6e5", "filename": "src/librustc_metadata/link_args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_metadata%2Flink_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_metadata%2Flink_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flink_args.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -8,7 +8,7 @@ crate fn collect(tcx: TyCtxt<'_>) -> Vec<String> {\n     let mut collector = Collector { args: Vec::new() };\n     tcx.hir().krate().visit_all_item_likes(&mut collector);\n \n-    for attr in tcx.hir().krate().attrs.iter() {\n+    for attr in tcx.hir().krate().item.attrs.iter() {\n         if attr.has_name(sym::link_args) {\n             if let Some(linkarg) = attr.value_str() {\n                 collector.add_link_args(&linkarg.as_str());"}, {"sha": "7126f86c326c614d4575228b34f312aac16e2e90", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -4,7 +4,7 @@ use crate::creader::CrateMetadataRef;\n use crate::rmeta::table::{FixedSizeEncoding, Table};\n use crate::rmeta::*;\n \n-use rustc::dep_graph::{self, DepNodeIndex};\n+use rustc::dep_graph::{self, DepNode, DepNodeIndex};\n use rustc::hir::exports::Export;\n use rustc::hir::map::definitions::DefPathTable;\n use rustc::hir::map::{DefKey, DefPath, DefPathData, DefPathHash};\n@@ -1607,7 +1607,8 @@ impl CrateMetadata {\n             // would always write the same value.\n \n             let def_path_hash = self.def_path_hash(CRATE_DEF_INDEX);\n-            let dep_node = def_path_hash.to_dep_node(dep_graph::DepKind::CrateMetadata);\n+            let dep_node =\n+                DepNode::from_def_path_hash(def_path_hash, dep_graph::DepKind::CrateMetadata);\n \n             dep_node_index = tcx.dep_graph.dep_node_index_of(&dep_node);\n             assert!(dep_node_index != DepNodeIndex::INVALID);"}, {"sha": "d87e24eeed1732615437298aa3720bcb0478637d", "filename": "src/librustc_metadata/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -140,7 +140,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n         cdata.get_deprecation(def_id.index).map(DeprecationEntry::external)\n     }\n     item_attrs => { cdata.get_item_attrs(def_id.index, tcx.sess) }\n-    // FIXME(#38501) We've skipped a `read` on the `HirBody` of\n+    // FIXME(#38501) We've skipped a `read` on the `hir_owner_items` of\n     // a `fn` when encoding, so the dep-tracking wouldn't work.\n     // This is only used by rustdoc anyway, which shouldn't have\n     // incremental recompilation ever enabled."}, {"sha": "8b589f70651e44b3915a8f05751ea1bde4f5ab77", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -331,7 +331,7 @@ impl<'tcx> EncodeContext<'tcx> {\n     fn encode_info_for_items(&mut self) {\n         let krate = self.tcx.hir().krate();\n         let vis = Spanned { span: rustc_span::DUMMY_SP, node: hir::VisibilityKind::Public };\n-        self.encode_info_for_mod(hir::CRATE_HIR_ID, &krate.module, &krate.attrs, &vis);\n+        self.encode_info_for_mod(hir::CRATE_HIR_ID, &krate.item.module, &krate.item.attrs, &vis);\n         krate.visit_all_item_likes(&mut self.as_deep_visitor());\n         for macro_def in krate.exported_macros {\n             self.visit_macro_def(macro_def);\n@@ -1502,8 +1502,8 @@ impl EncodeContext<'tcx> {\n impl Visitor<'tcx> for EncodeContext<'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n-        NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::OnlyBodies(self.tcx.hir())\n     }\n     fn visit_expr(&mut self, ex: &'tcx hir::Expr<'tcx>) {\n         intravisit::walk_expr(self, ex);"}, {"sha": "21788593259c2f96bcd42c73695a98c5186e7367", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -453,7 +453,7 @@ struct UnusedUnsafeVisitor<'a> {\n impl<'a, 'tcx> intravisit::Visitor<'tcx> for UnusedUnsafeVisitor<'a> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<'_, Self::Map> {\n+    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n         intravisit::NestedVisitorMap::None\n     }\n "}, {"sha": "d4a5966af4afe49e57f3acf250d726237b1ffe18", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -87,7 +87,7 @@ fn mir_keys(tcx: TyCtxt<'_>, krate: CrateNum) -> &DefIdSet {\n             intravisit::walk_struct_def(self, v)\n         }\n         type Map = Map<'tcx>;\n-        fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n+        fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n             NestedVisitorMap::None\n         }\n     }"}, {"sha": "36913051813484f44060121118649d808382dfa6", "filename": "src/librustc_mir_build/hair/pattern/check_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -45,7 +45,7 @@ struct MatchVisitor<'a, 'tcx> {\n impl<'tcx> Visitor<'tcx> for MatchVisitor<'_, 'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n     }\n \n@@ -755,7 +755,7 @@ fn check_legality_of_bindings_in_at_patterns(cx: &MatchVisitor<'_, '_>, pat: &Pa\n     impl<'v> Visitor<'v> for AtBindingPatternVisitor<'_, '_, '_> {\n         type Map = Map<'v>;\n \n-        fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n+        fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n             NestedVisitorMap::None\n         }\n "}, {"sha": "702872400c45ef4a1d7567bb27e868ad345fca2c", "filename": "src/librustc_passes/check_attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_passes%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_passes%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_attr.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -418,8 +418,8 @@ impl CheckAttrVisitor<'tcx> {\n impl Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n-        NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::OnlyBodies(self.tcx.hir())\n     }\n \n     fn visit_item(&mut self, item: &'tcx Item<'tcx>) {"}, {"sha": "af06fc0c0026d2d829a7657434e7feec8f54446d", "filename": "src/librustc_passes/check_const.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_passes%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_passes%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_const.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -8,7 +8,6 @@\n //! through, but errors for structured control flow in a `const` should be emitted here.\n \n use rustc::hir::map::Map;\n-use rustc::hir::Hir;\n use rustc::session::config::nightly_options;\n use rustc::session::parse::feature_err;\n use rustc::ty::query::Providers;\n@@ -75,7 +74,7 @@ enum ConstKind {\n }\n \n impl ConstKind {\n-    fn for_body(body: &hir::Body<'_>, hir_map: Hir<'_>) -> Option<Self> {\n+    fn for_body(body: &hir::Body<'_>, hir_map: Map<'_>) -> Option<Self> {\n         let is_const_fn = |id| hir_map.fn_sig_by_hir_id(id).unwrap().header.is_const();\n \n         let owner = hir_map.body_owner(body.id());\n@@ -202,8 +201,8 @@ impl<'tcx> CheckConstVisitor<'tcx> {\n impl<'tcx> Visitor<'tcx> for CheckConstVisitor<'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<'_, Self::Map> {\n-        NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::OnlyBodies(self.tcx.hir())\n     }\n \n     fn visit_anon_const(&mut self, anon: &'tcx hir::AnonConst) {"}, {"sha": "7460b8e2fe9301a6f2f9347a57cb51a251acde64", "filename": "src/librustc_passes/dead.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_passes%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_passes%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdead.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -212,7 +212,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n impl<'a, 'tcx> Visitor<'tcx> for MarkSymbolVisitor<'a, 'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<'_, Self::Map> {\n+    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n     }\n \n@@ -568,8 +568,8 @@ impl Visitor<'tcx> for DeadVisitor<'tcx> {\n     /// on inner functions when the outer function is already getting\n     /// an error. We could do this also by checking the parents, but\n     /// this is how the code is setup and it seems harmless enough.\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n-        NestedVisitorMap::All(&self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::All(self.tcx.hir())\n     }\n \n     fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {"}, {"sha": "2cabe786d0cda8aa1f97771728e75a862c087ab3", "filename": "src/librustc_passes/entry.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_passes%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_passes%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fentry.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -1,4 +1,4 @@\n-use rustc::hir::Hir;\n+use rustc::hir::map::Map;\n use rustc::session::config::EntryFnType;\n use rustc::session::{config, Session};\n use rustc::ty::query::Providers;\n@@ -15,7 +15,7 @@ use rustc_span::{Span, DUMMY_SP};\n struct EntryContext<'a, 'tcx> {\n     session: &'a Session,\n \n-    map: Hir<'tcx>,\n+    map: Map<'tcx>,\n \n     /// The top-level function called `main`.\n     main_fn: Option<(HirId, Span)>,\n@@ -59,7 +59,7 @@ fn entry_fn(tcx: TyCtxt<'_>, cnum: CrateNum) -> Option<(DefId, EntryFnType)> {\n     }\n \n     // If the user wants no main function at all, then stop here.\n-    if attr::contains_name(&tcx.hir().krate().attrs, sym::no_main) {\n+    if attr::contains_name(&tcx.hir().krate().item.attrs, sym::no_main) {\n         return None;\n     }\n \n@@ -157,7 +157,7 @@ fn configure_main(tcx: TyCtxt<'_>, visitor: &EntryContext<'_, '_>) -> Option<(De\n }\n \n fn no_main_err(tcx: TyCtxt<'_>, visitor: &EntryContext<'_, '_>) {\n-    let sp = tcx.hir().krate().span;\n+    let sp = tcx.hir().krate().item.span;\n     if *tcx.sess.parse_sess.reached_eof.borrow() {\n         // There's an unclosed brace that made the parser reach `Eof`, we shouldn't complain about\n         // the missing `fn main()` then as it might have been hidden inside an unclosed block."}, {"sha": "8bfe58da78f6e4077a7e18cae0c2d2e6578a755c", "filename": "src/librustc_passes/hir_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_passes%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_passes%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fhir_stats.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -95,7 +95,7 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n \n     type Map = Map<'v>;\n \n-    fn nested_visit_map(&mut self) -> hir_visit::NestedVisitorMap<'_, Self::Map> {\n+    fn nested_visit_map(&mut self) -> hir_visit::NestedVisitorMap<Self::Map> {\n         panic!(\"visit_nested_xxx must be manually implemented in this visitor\")\n     }\n "}, {"sha": "5cf9666797ebb6d6a556b8d969bda60e5201b589", "filename": "src/librustc_passes/intrinsicck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_passes%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_passes%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fintrinsicck.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -124,7 +124,7 @@ impl ExprVisitor<'tcx> {\n impl Visitor<'tcx> for ItemVisitor<'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n     }\n \n@@ -141,7 +141,7 @@ impl Visitor<'tcx> for ItemVisitor<'tcx> {\n impl Visitor<'tcx> for ExprVisitor<'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n     }\n "}, {"sha": "133e30f6ff01a2cf61f3a73830e7a6796c801329", "filename": "src/librustc_passes/lib_features.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_passes%2Flib_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_passes%2Flib_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib_features.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -114,8 +114,8 @@ impl LibFeatureCollector<'tcx> {\n impl Visitor<'tcx> for LibFeatureCollector<'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n-        NestedVisitorMap::All(&self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::All(self.tcx.hir())\n     }\n \n     fn visit_attribute(&mut self, attr: &'tcx Attribute) {"}, {"sha": "030d0893b0274a6cd5405985c9ebad2aae8ae2e7", "filename": "src/librustc_passes/liveness.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_passes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_passes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fliveness.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -156,8 +156,8 @@ fn live_node_kind_to_string(lnk: LiveNodeKind, tcx: TyCtxt<'_>) -> String {\n impl<'tcx> Visitor<'tcx> for IrMaps<'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n-        NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::OnlyBodies(self.tcx.hir())\n     }\n \n     fn visit_fn(\n@@ -1361,7 +1361,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n impl<'a, 'tcx> Visitor<'tcx> for Liveness<'a, 'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n     }\n "}, {"sha": "1daef45a1f591776f159c17bd4d76c328af114cc", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -24,15 +24,14 @@ enum Context {\n #[derive(Copy, Clone)]\n struct CheckLoopVisitor<'a, 'hir> {\n     sess: &'a Session,\n-    hir_map: &'a Map<'hir>,\n+    hir_map: Map<'hir>,\n     cx: Context,\n }\n \n fn check_mod_loops(tcx: TyCtxt<'_>, module_def_id: DefId) {\n     tcx.hir().visit_item_likes_in_module(\n         module_def_id,\n-        &mut CheckLoopVisitor { sess: &tcx.sess, hir_map: &tcx.hir(), cx: Normal }\n-            .as_deep_visitor(),\n+        &mut CheckLoopVisitor { sess: &tcx.sess, hir_map: tcx.hir(), cx: Normal }.as_deep_visitor(),\n     );\n }\n \n@@ -43,8 +42,8 @@ pub(crate) fn provide(providers: &mut Providers<'_>) {\n impl<'a, 'hir> Visitor<'hir> for CheckLoopVisitor<'a, 'hir> {\n     type Map = Map<'hir>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n-        NestedVisitorMap::OnlyBodies(&self.hir_map)\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::OnlyBodies(self.hir_map)\n     }\n \n     fn visit_anon_const(&mut self, c: &'hir hir::AnonConst) {"}, {"sha": "ad415ed8f62cf3ec7c92c86ff9ae5ac10c2a4a45", "filename": "src/librustc_passes/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_passes%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_passes%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Freachable.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -85,7 +85,7 @@ struct ReachableContext<'a, 'tcx> {\n impl<'a, 'tcx> Visitor<'tcx> for ReachableContext<'a, 'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n     }\n "}, {"sha": "640a3a35aa032e5a425f305448d310ebe87d415f", "filename": "src/librustc_passes/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_passes%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_passes%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fregion.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -698,7 +698,7 @@ impl<'tcx> RegionResolutionVisitor<'tcx> {\n impl<'tcx> Visitor<'tcx> for RegionResolutionVisitor<'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n     }\n "}, {"sha": "6cf4132141b13b72c66e32133a5abcafcb4df209", "filename": "src/librustc_passes/stability.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_passes%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_passes%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fstability.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -259,8 +259,8 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n     /// deep-walking.\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n-        NestedVisitorMap::All(&self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::All(self.tcx.hir())\n     }\n \n     fn visit_item(&mut self, i: &'tcx Item<'tcx>) {\n@@ -350,8 +350,8 @@ impl<'a, 'tcx> MissingStabilityAnnotations<'a, 'tcx> {\n impl<'a, 'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'a, 'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n-        NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::OnlyBodies(self.tcx.hir())\n     }\n \n     fn visit_item(&mut self, i: &'tcx Item<'tcx>) {\n@@ -459,8 +459,8 @@ fn new_index(tcx: TyCtxt<'tcx>) -> Index<'tcx> {\n \n         annotator.annotate(\n             hir::CRATE_HIR_ID,\n-            &krate.attrs,\n-            krate.span,\n+            &krate.item.attrs,\n+            krate.item.span,\n             AnnotationKind::Required,\n             |v| intravisit::walk_crate(v, krate),\n         );\n@@ -492,8 +492,8 @@ impl Visitor<'tcx> for Checker<'tcx> {\n     /// Because stability levels are scoped lexically, we want to walk\n     /// nested items in the context of the outer item, so enable\n     /// deep-walking.\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n-        NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::OnlyBodies(self.tcx.hir())\n     }\n \n     fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n@@ -585,7 +585,7 @@ pub fn check_unused_or_stable_features(tcx: TyCtxt<'_>) {\n     if tcx.stability().staged_api[&LOCAL_CRATE] {\n         let krate = tcx.hir().krate();\n         let mut missing = MissingStabilityAnnotations { tcx, access_levels };\n-        missing.check_missing_stability(hir::CRATE_HIR_ID, krate.span, \"crate\");\n+        missing.check_missing_stability(hir::CRATE_HIR_ID, krate.item.span, \"crate\");\n         intravisit::walk_crate(&mut missing, krate);\n         krate.visit_all_item_likes(&mut missing.as_deep_visitor());\n     }"}, {"sha": "d20237a22d99db7fe2a60cea24fb9224cff6d42f", "filename": "src/librustc_passes/upvars.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_passes%2Fupvars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_passes%2Fupvars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fupvars.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -46,7 +46,7 @@ struct LocalCollector {\n impl Visitor<'tcx> for LocalCollector {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n     }\n \n@@ -75,7 +75,7 @@ impl CaptureCollector<'_, '_> {\n impl Visitor<'tcx> for CaptureCollector<'a, 'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n     }\n "}, {"sha": "d85c7d8c6de04c6ffc09ee42b5c17f5c31919553", "filename": "src/librustc_passes/weak_lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_passes%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_passes%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fweak_lang_items.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -87,7 +87,7 @@ impl<'a, 'tcx> Context<'a, 'tcx> {\n impl<'a, 'tcx, 'v> Visitor<'v> for Context<'a, 'tcx> {\n     type Map = Map<'v>;\n \n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, Map<'v>> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Map<'v>> {\n         NestedVisitorMap::None\n     }\n "}, {"sha": "28a2987301f503f952bf6b198f59e270377b759a", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -373,8 +373,8 @@ struct PubRestrictedVisitor<'tcx> {\n impl Visitor<'tcx> for PubRestrictedVisitor<'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n-        NestedVisitorMap::All(&self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::All(self.tcx.hir())\n     }\n     fn visit_vis(&mut self, vis: &'tcx hir::Visibility<'tcx>) {\n         self.has_pub_restricted = self.has_pub_restricted || vis.node.is_pub_restricted();\n@@ -678,8 +678,8 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n \n     /// We want to visit items in the context of their containing\n     /// module and so forth, so supply a crate for doing a deep walk.\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n-        NestedVisitorMap::All(&self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::All(self.tcx.hir())\n     }\n \n     fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n@@ -1049,8 +1049,8 @@ impl<'a, 'tcx> Visitor<'tcx> for NamePrivacyVisitor<'a, 'tcx> {\n \n     /// We want to visit items in the context of their containing\n     /// module and so forth, so supply a crate for doing a deep walk.\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n-        NestedVisitorMap::All(&self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::All(self.tcx.hir())\n     }\n \n     fn visit_mod(&mut self, _m: &'tcx hir::Mod<'tcx>, _s: Span, _n: hir::HirId) {\n@@ -1191,8 +1191,8 @@ impl<'a, 'tcx> Visitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n \n     /// We want to visit items in the context of their containing\n     /// module and so forth, so supply a crate for doing a deep walk.\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n-        NestedVisitorMap::All(&self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::All(self.tcx.hir())\n     }\n \n     fn visit_mod(&mut self, _m: &'tcx hir::Mod<'tcx>, _s: Span, _n: hir::HirId) {\n@@ -1449,7 +1449,7 @@ impl<'a, 'tcx> ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n impl<'a, 'b, 'tcx, 'v> Visitor<'v> for ObsoleteCheckTypeForPrivatenessVisitor<'a, 'b, 'tcx> {\n     type Map = Map<'v>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n     }\n \n@@ -1479,8 +1479,8 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n \n     /// We want to visit items in the context of their containing\n     /// module and so forth, so supply a crate for doing a deep walk.\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n-        NestedVisitorMap::All(&self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::All(self.tcx.hir())\n     }\n \n     fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n@@ -1925,8 +1925,8 @@ impl<'a, 'tcx> PrivateItemsInPublicInterfacesVisitor<'a, 'tcx> {\n impl<'a, 'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n-        NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::OnlyBodies(self.tcx.hir())\n     }\n \n     fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {"}, {"sha": "ddee73e72a409704b669b924f33f0372fd9e5058", "filename": "src/librustc_resolve/late/lifetimes.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -367,8 +367,8 @@ fn sub_items_have_self_param(node: &hir::ItemKind<'_>) -> bool {\n impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n-        NestedVisitorMap::All(&self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::All(self.tcx.hir())\n     }\n \n     // We want to nest trait/impl items in their parent, but nothing else.\n@@ -1125,7 +1125,7 @@ fn extract_labels(ctxt: &mut LifetimeContext<'_, '_>, body: &hir::Body<'_>) {\n     impl<'v, 'a, 'tcx> Visitor<'v> for GatherLabels<'a, 'tcx> {\n         type Map = Map<'v>;\n \n-        fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n+        fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n             NestedVisitorMap::None\n         }\n \n@@ -2174,7 +2174,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             impl<'a> Visitor<'a> for SelfVisitor<'a> {\n                 type Map = Map<'a>;\n \n-                fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n+                fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n                     NestedVisitorMap::None\n                 }\n \n@@ -2265,7 +2265,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         impl<'v, 'a> Visitor<'v> for GatherLifetimes<'a> {\n             type Map = Map<'v>;\n \n-            fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n+            fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n                 NestedVisitorMap::None\n             }\n \n@@ -2854,7 +2854,7 @@ fn insert_late_bound_lifetimes(\n     impl<'v> Visitor<'v> for ConstrainedCollector {\n         type Map = Map<'v>;\n \n-        fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n+        fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n             NestedVisitorMap::None\n         }\n \n@@ -2897,7 +2897,7 @@ fn insert_late_bound_lifetimes(\n     impl<'v> Visitor<'v> for AllCollector {\n         type Map = Map<'v>;\n \n-        fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n+        fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n             NestedVisitorMap::None\n         }\n "}, {"sha": "a2944782e91d4fbace3414b7e8f5ecf9e4f33ed2", "filename": "src/librustc_span/def_id.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_span%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_span%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fdef_id.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -1,8 +1,11 @@\n use crate::HashStableContext;\n+use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::AtomicRef;\n use rustc_index::vec::Idx;\n+use rustc_macros::HashStable_Generic;\n use rustc_serialize::{Decoder, Encoder};\n+use std::borrow::Borrow;\n use std::fmt;\n use std::{u32, u64};\n \n@@ -102,6 +105,28 @@ impl ::std::fmt::Debug for CrateNum {\n     }\n }\n \n+#[derive(\n+    Copy,\n+    Clone,\n+    Hash,\n+    PartialEq,\n+    Eq,\n+    PartialOrd,\n+    Ord,\n+    Debug,\n+    RustcEncodable,\n+    RustcDecodable,\n+    HashStable_Generic\n+)]\n+pub struct DefPathHash(pub Fingerprint);\n+\n+impl Borrow<Fingerprint> for DefPathHash {\n+    #[inline]\n+    fn borrow(&self) -> &Fingerprint {\n+        &self.0\n+    }\n+}\n+\n rustc_index::newtype_index! {\n     /// A DefIndex is an index into the hir-map for a crate, identifying a\n     /// particular definition. It should really be considered an interned"}, {"sha": "656c3c7e6138f0623b84a2c324310afc08580d43", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -282,7 +282,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     }\n                 }\n \n-                hir::Node::Crate => return,\n+                hir::Node::Crate(..) => return,\n \n                 _ => {}\n             }\n@@ -1569,7 +1569,7 @@ struct ReturnsVisitor<'v> {\n impl<'v> Visitor<'v> for ReturnsVisitor<'v> {\n     type Map = rustc::hir::map::Map<'v>;\n \n-    fn nested_visit_map(&mut self) -> hir::intravisit::NestedVisitorMap<'_, Self::Map> {\n+    fn nested_visit_map(&mut self) -> hir::intravisit::NestedVisitorMap<Self::Map> {\n         hir::intravisit::NestedVisitorMap::None\n     }\n "}, {"sha": "3a0c36a84ae813fddbefc8785613250f77934ee1", "filename": "src/librustc_traits/lowering/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fmod.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -603,8 +603,8 @@ impl ClauseDumper<'tcx> {\n impl Visitor<'tcx> for ClauseDumper<'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n-        NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::OnlyBodies(self.tcx.hir())\n     }\n \n     fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {"}, {"sha": "387d1d9923da203d7f3e8311fc2a7dce2529e16e", "filename": "src/librustc_ty/ty.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_ty%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_ty%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Fty.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -273,8 +273,7 @@ fn original_crate_name(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Symbol {\n }\n \n fn crate_hash(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Svh {\n-    assert_eq!(crate_num, LOCAL_CRATE);\n-    tcx.hir().crate_hash\n+    tcx.index_hir(crate_num).crate_hash\n }\n \n fn instance_def_size_estimate<'tcx>("}, {"sha": "1dde57124ee0ac9bf88247c1bf70f9343020b5af", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -893,7 +893,7 @@ fn compare_synthetic_generics<'tcx>(\n                             type Map = Map<'v>;\n                             fn nested_visit_map(\n                                 &mut self,\n-                            ) -> intravisit::NestedVisitorMap<'_, Self::Map>\n+                            ) -> intravisit::NestedVisitorMap<Self::Map>\n                             {\n                                 intravisit::NestedVisitorMap::None\n                             }"}, {"sha": "5208e2f56a5c2bc4f51b748ded1b60e7444d2449", "filename": "src/librustc_typeck/check/generator_interior.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -211,7 +211,7 @@ pub fn resolve_interior<'a, 'tcx>(\n impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n     }\n "}, {"sha": "ef779cfa8343101fa9cbfaedabead27deb2226dd", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -1349,7 +1349,7 @@ impl intravisit::Visitor<'tcx> for UsePlacementFinder<'tcx> {\n \n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<'_, Self::Map> {\n+    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n         intravisit::NestedVisitorMap::None\n     }\n }"}, {"sha": "d0d421746ae8f33b0e6b494d16d4c40a33ae3ec7", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -1179,7 +1179,7 @@ impl<'a, 'tcx> GatherLocalsVisitor<'a, 'tcx> {\n impl<'a, 'tcx> Visitor<'tcx> for GatherLocalsVisitor<'a, 'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n     }\n "}, {"sha": "975c6e101a6915aae833ead41b0f45c92a883f40", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -419,7 +419,7 @@ impl<'a, 'tcx> Visitor<'tcx> for RegionCtxt<'a, 'tcx> {\n \n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n     }\n "}, {"sha": "7bc121733a4e679875de72f2c699e3c19e19f331", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -62,7 +62,7 @@ struct InferBorrowKindVisitor<'a, 'tcx> {\n impl<'a, 'tcx> Visitor<'tcx> for InferBorrowKindVisitor<'a, 'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n     }\n "}, {"sha": "b8f8030e3cdd7c0668c5af70f96142dbdb2e2039", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -246,7 +246,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n impl<'cx, 'tcx> Visitor<'tcx> for WritebackCx<'cx, 'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n     }\n "}, {"sha": "779b30c55e12d9cf3d142ece6d0eb59df4dcad38", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -107,7 +107,7 @@ crate struct PlaceholderHirTyCollector(crate Vec<Span>);\n impl<'v> Visitor<'v> for PlaceholderHirTyCollector {\n     type Map = Map<'v>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n     }\n     fn visit_ty(&mut self, t: &'v hir::Ty<'v>) {\n@@ -201,8 +201,8 @@ fn reject_placeholder_type_signatures_in_item(tcx: TyCtxt<'tcx>, item: &'tcx hir\n impl Visitor<'tcx> for CollectItemTypesVisitor<'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n-        NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::OnlyBodies(self.tcx.hir())\n     }\n \n     fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n@@ -1047,7 +1047,7 @@ fn has_late_bound_regions<'tcx>(tcx: TyCtxt<'tcx>, node: Node<'tcx>) -> Option<S\n     impl Visitor<'tcx> for LateBoundRegionsDetector<'tcx> {\n         type Map = Map<'tcx>;\n \n-        fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n+        fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n             NestedVisitorMap::None\n         }\n "}, {"sha": "c4a8edd86f83fa18d9f0c72f3ca40a96d0b3ad90", "filename": "src/librustc_typeck/collect/type_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -529,8 +529,8 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n     impl<'tcx> intravisit::Visitor<'tcx> for ConstraintLocator<'tcx> {\n         type Map = Map<'tcx>;\n \n-        fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<'_, Self::Map> {\n-            intravisit::NestedVisitorMap::All(&self.tcx.hir())\n+        fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n+            intravisit::NestedVisitorMap::All(self.tcx.hir())\n         }\n         fn visit_expr(&mut self, ex: &'tcx Expr<'tcx>) {\n             if let hir::ExprKind::Closure(..) = ex.kind {"}, {"sha": "e2fca8f39a3983d922646ffc8eb50a878729a1c6", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -141,6 +141,7 @@ impl Clean<ExternalCrate> for CrateNum {\n             cx.tcx\n                 .hir()\n                 .krate()\n+                .item\n                 .module\n                 .item_ids\n                 .iter()\n@@ -194,6 +195,7 @@ impl Clean<ExternalCrate> for CrateNum {\n             cx.tcx\n                 .hir()\n                 .krate()\n+                .item\n                 .module\n                 .item_ids\n                 .iter()"}, {"sha": "b1a60e2746fc1a244a2df60fbb3c1beb6a629d46", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -107,12 +107,12 @@ pub fn run(options: Options) -> i32 {\n                 let mut hir_collector = HirCollector {\n                     sess: compiler.session(),\n                     collector: &mut collector,\n-                    map: *tcx.hir(),\n+                    map: tcx.hir(),\n                     codes: ErrorCodes::from(\n                         compiler.session().opts.unstable_features.is_nightly_build(),\n                     ),\n                 };\n-                hir_collector.visit_testable(\"\".to_string(), &krate.attrs, |this| {\n+                hir_collector.visit_testable(\"\".to_string(), &krate.item.attrs, |this| {\n                     intravisit::walk_crate(this, krate);\n                 });\n             });\n@@ -146,6 +146,7 @@ fn scrape_test_config(krate: &::rustc_hir::Crate) -> TestOptions {\n         TestOptions { no_crate_inject: false, display_warnings: false, attrs: Vec::new() };\n \n     let test_attrs: Vec<_> = krate\n+        .item\n         .attrs\n         .iter()\n         .filter(|a| a.check_name(sym::doc))\n@@ -855,7 +856,7 @@ impl Tester for Collector {\n struct HirCollector<'a, 'hir> {\n     sess: &'a session::Session,\n     collector: &'a mut Collector,\n-    map: &'a Map<'hir>,\n+    map: Map<'hir>,\n     codes: ErrorCodes,\n }\n \n@@ -903,8 +904,8 @@ impl<'a, 'hir> HirCollector<'a, 'hir> {\n impl<'a, 'hir> intravisit::Visitor<'hir> for HirCollector<'a, 'hir> {\n     type Map = Map<'hir>;\n \n-    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<'_, Self::Map> {\n-        intravisit::NestedVisitorMap::All(&self.map)\n+    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n+        intravisit::NestedVisitorMap::All(self.map)\n     }\n \n     fn visit_item(&mut self, item: &'hir hir::Item) {"}, {"sha": "feaf391c95afbc861d61845795e316d73587a87e", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -64,11 +64,11 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n \n     pub fn visit(mut self, krate: &'tcx hir::Crate) -> Module<'tcx> {\n         let mut module = self.visit_mod_contents(\n-            krate.span,\n-            krate.attrs,\n+            krate.item.span,\n+            krate.item.attrs,\n             &Spanned { span: rustc_span::DUMMY_SP, node: hir::VisibilityKind::Public },\n             hir::CRATE_HIR_ID,\n-            &krate.module,\n+            &krate.item.module,\n             None,\n         );\n         // Attach the crate's exported macros to the top-level module:"}, {"sha": "87f108abadd55869139a5744256b679a35db4e5c", "filename": "src/test/incremental/hashes/call_expressions.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fhashes%2Fcall_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fhashes%2Fcall_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fcall_expressions.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -25,7 +25,7 @@ pub fn change_callee_function() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir,typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,mir_built,optimized_mir,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_callee_function() {\n     callee2(1, 2)\n@@ -40,7 +40,7 @@ pub fn change_argument_function() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_argument_function() {\n     callee1(1, 3)\n@@ -55,10 +55,10 @@ mod change_callee_indirectly_function {\n     #[cfg(not(cfail1))]\n     use super::callee2 as callee;\n \n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n \n \n     pub fn change_callee_indirectly_function() {\n@@ -81,7 +81,7 @@ pub fn change_callee_method() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir,typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,mir_built,optimized_mir,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_callee_method() {\n     let s = Struct;\n@@ -98,7 +98,7 @@ pub fn change_argument_method() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_argument_method() {\n     let s = Struct;\n@@ -115,7 +115,7 @@ pub fn change_ufcs_callee_method() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir,typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,mir_built,optimized_mir,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_ufcs_callee_method() {\n     let s = Struct;\n@@ -132,7 +132,7 @@ pub fn change_argument_method_ufcs() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_argument_method_ufcs() {\n     let s = Struct;\n@@ -149,10 +149,10 @@ pub fn change_to_ufcs() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir,typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,mir_built,optimized_mir,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-// One might think this would be expanded in the HirBody/Mir, but it actually\n-// results in slightly different Hir/Mir.\n+// One might think this would be expanded in the hir_owner_items/Mir, but it actually\n+// results in slightly different hir_owner/Mir.\n pub fn change_to_ufcs() {\n     let s = Struct;\n     Struct::method1(&s, 'x', true);\n@@ -171,7 +171,7 @@ pub mod change_ufcs_callee_indirectly {\n     #[cfg(not(cfail1))]\n     use super::Struct2 as Struct;\n \n-    #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir,typeck_tables_of\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,mir_built,optimized_mir,typeck_tables_of\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n \n "}, {"sha": "3d9db340f637520480951773632d71b05a76d563", "filename": "src/test/incremental/hashes/closure_expressions.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -21,7 +21,7 @@ pub fn change_closure_body() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_closure_body() {\n     let _ = || 3u32;\n@@ -37,7 +37,7 @@ pub fn add_parameter() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir, typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built, optimized_mir, typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_parameter() {\n     let x = 0u32;\n@@ -53,7 +53,7 @@ pub fn change_parameter_pattern() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built, typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_parameter_pattern() {\n     let _ = |(x,): (u32,)| x;\n@@ -68,7 +68,7 @@ pub fn add_move() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_move() {\n     let _ = move || 1;\n@@ -84,7 +84,7 @@ pub fn add_type_ascription_to_parameter() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built, typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_type_ascription_to_parameter() {\n     let closure = |x: u32| x + 1u32;\n@@ -101,7 +101,7 @@ pub fn change_parameter_type() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir, typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built, optimized_mir, typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_parameter_type() {\n     let closure = |x: u16| (x as u64) + 1;"}, {"sha": "8f77bb24f872e42022da29bbc61371f0ae31c4fa", "filename": "src/test/incremental/hashes/consts.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fhashes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fhashes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fconsts.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -19,7 +19,7 @@\n const CONST_VISIBILITY: u8 = 0;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub const CONST_VISIBILITY: u8 = 0;\n \n@@ -29,7 +29,7 @@ pub const CONST_VISIBILITY: u8 = 0;\n const CONST_CHANGE_TYPE_1: i32 = 0;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n const CONST_CHANGE_TYPE_1: u32 = 0;\n \n@@ -39,13 +39,13 @@ const CONST_CHANGE_TYPE_1: u32 = 0;\n const CONST_CHANGE_TYPE_2: Option<u32> = None;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n const CONST_CHANGE_TYPE_2: Option<u64> = None;\n \n \n // Change value between simple literals\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items\")]\n #[rustc_clean(cfg=\"cfail3\")]\n const CONST_CHANGE_VALUE_1: i16 = {\n     #[cfg(cfail1)]\n@@ -57,7 +57,7 @@ const CONST_CHANGE_VALUE_1: i16 = {\n \n \n // Change value between expressions\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items\")]\n #[rustc_clean(cfg=\"cfail3\")]\n const CONST_CHANGE_VALUE_2: i16 = {\n     #[cfg(cfail1)]\n@@ -67,7 +67,7 @@ const CONST_CHANGE_VALUE_2: i16 = {\n     { 1 + 2 }\n };\n \n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items\")]\n #[rustc_clean(cfg=\"cfail3\")]\n const CONST_CHANGE_VALUE_3: i16 = {\n     #[cfg(cfail1)]\n@@ -77,7 +77,7 @@ const CONST_CHANGE_VALUE_3: i16 = {\n     { 2 * 3 }\n };\n \n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items\")]\n #[rustc_clean(cfg=\"cfail3\")]\n const CONST_CHANGE_VALUE_4: i16 = {\n     #[cfg(cfail1)]\n@@ -99,11 +99,11 @@ mod const_change_type_indirectly {\n     #[cfg(not(cfail1))]\n     use super::ReferencedType2 as Type;\n \n-    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,type_of\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     const CONST_CHANGE_TYPE_INDIRECTLY_1: Type = Type;\n \n-    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,type_of\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     const CONST_CHANGE_TYPE_INDIRECTLY_2: Option<Type> = None;\n }"}, {"sha": "5ad6eeafc7fc3ddee50a0d27f18b4fa7c8cd594a", "filename": "src/test/incremental/hashes/enum_constructors.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fhashes%2Fenum_constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fhashes%2Fenum_constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fenum_constructors.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -34,7 +34,7 @@ pub fn change_field_value_struct_like() -> Enum {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,optimized_mir,mir_built\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,optimized_mir,mir_built\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_field_value_struct_like() -> Enum {\n     Enum::Struct {\n@@ -57,7 +57,7 @@ pub fn change_field_order_struct_like() -> Enum {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n // FIXME(michaelwoerister):Interesting. I would have thought that that changes the MIR. And it\n // would if it were not all constants\n@@ -96,7 +96,7 @@ pub fn change_constructor_path_struct_like() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,optimized_mir,mir_built,typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,optimized_mir,mir_built,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_constructor_path_struct_like() {\n     let _ = Enum2::Struct {\n@@ -119,7 +119,7 @@ pub fn change_constructor_variant_struct_like() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,optimized_mir,mir_built\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,optimized_mir,mir_built\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_constructor_variant_struct_like() {\n     let _ = Enum2::Struct2 {\n@@ -139,7 +139,7 @@ pub mod change_constructor_path_indirectly_struct_like {\n \n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"fn_sig,Hir,HirBody,optimized_mir,mir_built,\\\n+        except=\"fn_sig,hir_owner,hir_owner_items,optimized_mir,mir_built,\\\n                 typeck_tables_of\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n@@ -161,7 +161,7 @@ pub mod change_constructor_variant_indirectly_struct_like {\n     #[cfg(not(cfail1))]\n     use super::Enum2::Struct2 as Variant;\n \n-    #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,optimized_mir,mir_built\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,optimized_mir,mir_built\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn function() -> Enum2 {\n         Variant {\n@@ -180,7 +180,7 @@ pub fn change_field_value_tuple_like() -> Enum {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,optimized_mir,mir_built\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,optimized_mir,mir_built\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_field_value_tuple_like() -> Enum {\n     Enum::Tuple(0, 1, 3)\n@@ -197,7 +197,7 @@ pub fn change_constructor_path_tuple_like() {\n #[cfg(not(cfail1))]\n #[rustc_clean(\n     cfg=\"cfail2\",\n-    except=\"HirBody,optimized_mir,mir_built,typeck_tables_of\"\n+    except=\"hir_owner_items,optimized_mir,mir_built,typeck_tables_of\"\n )]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_constructor_path_tuple_like() {\n@@ -215,7 +215,7 @@ pub fn change_constructor_variant_tuple_like() {\n #[cfg(not(cfail1))]\n #[rustc_clean(\n     cfg=\"cfail2\",\n-    except=\"HirBody,optimized_mir,mir_built,typeck_tables_of\"\n+    except=\"hir_owner_items,optimized_mir,mir_built,typeck_tables_of\"\n )]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_constructor_variant_tuple_like() {\n@@ -232,7 +232,7 @@ pub mod change_constructor_path_indirectly_tuple_like {\n \n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"fn_sig,Hir,HirBody,optimized_mir,mir_built,\\\n+        except=\"fn_sig,hir_owner,hir_owner_items,optimized_mir,mir_built,\\\n                 typeck_tables_of\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n@@ -251,7 +251,7 @@ pub mod change_constructor_variant_indirectly_tuple_like {\n     #[cfg(not(cfail1))]\n     use super::Enum2::Tuple2 as Variant;\n \n-    #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,optimized_mir,mir_built,typeck_tables_of\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,optimized_mir,mir_built,typeck_tables_of\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn function() -> Enum2 {\n         Variant(0, 1, 2)\n@@ -278,7 +278,7 @@ pub fn change_constructor_path_c_like() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,optimized_mir,mir_built,typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,optimized_mir,mir_built,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_constructor_path_c_like() {\n     let _ = Clike2::B;\n@@ -293,7 +293,7 @@ pub fn change_constructor_variant_c_like() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,optimized_mir,mir_built\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,optimized_mir,mir_built\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_constructor_variant_c_like() {\n     let _ = Clike::C;\n@@ -309,7 +309,7 @@ pub mod change_constructor_path_indirectly_c_like {\n \n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"fn_sig,Hir,HirBody,optimized_mir,mir_built,\\\n+        except=\"fn_sig,hir_owner,hir_owner_items,optimized_mir,mir_built,\\\n                 typeck_tables_of\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n@@ -328,7 +328,7 @@ pub mod change_constructor_variant_indirectly_c_like {\n     #[cfg(not(cfail1))]\n     use super::Clike::B as Variant;\n \n-    #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,optimized_mir,mir_built\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,optimized_mir,mir_built\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn function() -> Clike {\n         Variant"}, {"sha": "7be15b4bb155f56eb83fdfd6b8136a0ce570b6ef", "filename": "src/test/incremental/hashes/enum_defs.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fhashes%2Fenum_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fhashes%2Fenum_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fenum_defs.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -26,7 +26,7 @@\n enum EnumVisibility { A }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub enum EnumVisibility {\n     A\n@@ -42,7 +42,7 @@ enum EnumChangeNameCStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumChangeNameCStyleVariant {\n     Variant1,\n@@ -59,7 +59,7 @@ enum EnumChangeNameTupleStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumChangeNameTupleStyleVariant {\n     Variant1,\n@@ -76,7 +76,7 @@ enum EnumChangeNameStructStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumChangeNameStructStyleVariant {\n     Variant1,\n@@ -93,7 +93,7 @@ enum EnumChangeValueCStyleVariant0 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumChangeValueCStyleVariant0 {\n     Variant1,\n@@ -109,7 +109,7 @@ enum EnumChangeValueCStyleVariant1 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumChangeValueCStyleVariant1 {\n     Variant1,\n@@ -125,7 +125,7 @@ enum EnumAddCStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumAddCStyleVariant {\n     Variant1,\n@@ -142,7 +142,7 @@ enum EnumRemoveCStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumRemoveCStyleVariant {\n     Variant1,\n@@ -157,7 +157,7 @@ enum EnumAddTupleStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumAddTupleStyleVariant {\n     Variant1,\n@@ -174,7 +174,7 @@ enum EnumRemoveTupleStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumRemoveTupleStyleVariant {\n     Variant1,\n@@ -189,7 +189,7 @@ enum EnumAddStructStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumAddStructStyleVariant {\n     Variant1,\n@@ -206,7 +206,7 @@ enum EnumRemoveStructStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumRemoveStructStyleVariant {\n     Variant1,\n@@ -221,7 +221,7 @@ enum EnumChangeFieldTypeTupleStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumChangeFieldTypeTupleStyleVariant {\n     Variant1(u32,\n@@ -238,7 +238,7 @@ enum EnumChangeFieldTypeStructStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumChangeFieldTypeStructStyleVariant {\n     Variant1,\n@@ -257,7 +257,7 @@ enum EnumChangeFieldNameStructStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumChangeFieldNameStructStyleVariant {\n     Variant1 { a: u32, c: u32 },\n@@ -272,7 +272,7 @@ enum EnumChangeOrderTupleStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumChangeOrderTupleStyleVariant {\n     Variant1(\n@@ -289,7 +289,7 @@ enum EnumChangeFieldOrderStructStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumChangeFieldOrderStructStyleVariant {\n     Variant1 { b: f32, a: u32 },\n@@ -304,7 +304,7 @@ enum EnumAddFieldTupleStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumAddFieldTupleStyleVariant {\n     Variant1(u32, u32, u32),\n@@ -319,7 +319,7 @@ enum EnumAddFieldStructStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumAddFieldStructStyleVariant {\n     Variant1 { a: u32, b: u32, c: u32 },\n@@ -335,7 +335,7 @@ enum EnumAddMustUse {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[must_use]\n enum EnumAddMustUse {\n@@ -353,7 +353,7 @@ enum EnumAddReprC {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[repr(C)]\n enum EnumAddReprC {\n@@ -531,7 +531,7 @@ enum EnumSwapUsageTypeParameters<A, B> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumSwapUsageTypeParameters<A, B> {\n     Variant1 {\n@@ -552,7 +552,7 @@ enum EnumSwapUsageLifetimeParameters<'a, 'b> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumSwapUsageLifetimeParameters<'a, 'b> {\n     Variant1 {\n@@ -577,7 +577,7 @@ mod change_field_type_indirectly_tuple_style {\n     #[cfg(not(cfail1))]\n     use super::ReferencedType2 as FieldType;\n \n-    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     enum TupleStyle {\n         Variant1(\n@@ -595,7 +595,7 @@ mod change_field_type_indirectly_struct_style {\n     #[cfg(not(cfail1))]\n     use super::ReferencedType2 as FieldType;\n \n-    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     enum StructStyle {\n         Variant1 {\n@@ -618,7 +618,7 @@ mod change_trait_bound_indirectly {\n     #[cfg(not(cfail1))]\n     use super::ReferencedTrait2 as Trait;\n \n-    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,predicates_of\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,predicates_of\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     enum Enum<T: Trait> {\n         Variant1(T)\n@@ -634,7 +634,7 @@ mod change_trait_bound_indirectly_where {\n     #[cfg(not(cfail1))]\n     use super::ReferencedTrait2 as Trait;\n \n-    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,predicates_of\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,predicates_of\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     enum Enum<T> where T: Trait {\n         Variant1(T)"}, {"sha": "b546930ea8fcdb44baf8c00aa36e5c849863711e", "filename": "src/test/incremental/hashes/exported_vs_not.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fhashes%2Fexported_vs_not.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fhashes%2Fexported_vs_not.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fexported_vs_not.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -7,16 +7,16 @@\n #![crate_type=\"rlib\"]\n \n // Case 1: The function body is not exported to metadata. If the body changes,\n-//         the hash of the HirBody node should change, but not the hash of\n-//         either the Hir or the Metadata node.\n+//         the hash of the hir_owner_items node should change, but not the hash of\n+//         either the hir_owner or the Metadata node.\n \n #[cfg(cfail1)]\n pub fn body_not_exported_to_metadata() -> u32 {\n     1\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn body_not_exported_to_metadata() -> u32 {\n     2\n@@ -25,7 +25,7 @@ pub fn body_not_exported_to_metadata() -> u32 {\n \n \n // Case 2: The function body *is* exported to metadata because the function is\n-//         marked as #[inline]. Only the hash of the Hir depnode should be\n+//         marked as #[inline]. Only the hash of the hir_owner depnode should be\n //         unaffected by a change to the body.\n \n #[cfg(cfail1)]\n@@ -35,7 +35,7 @@ pub fn body_exported_to_metadata_because_of_inline() -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[inline]\n pub fn body_exported_to_metadata_because_of_inline() -> u32 {\n@@ -45,7 +45,7 @@ pub fn body_exported_to_metadata_because_of_inline() -> u32 {\n \n \n // Case 2: The function body *is* exported to metadata because the function is\n-//         generic. Only the hash of the Hir depnode should be\n+//         generic. Only the hash of the hir_owner depnode should be\n //         unaffected by a change to the body.\n \n #[cfg(cfail1)]\n@@ -55,7 +55,7 @@ pub fn body_exported_to_metadata_because_of_generic() -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[inline]\n pub fn body_exported_to_metadata_because_of_generic() -> u32 {"}, {"sha": "3e54dafd9ac0e5f6d2a32f39f21a5b4d83e69215", "filename": "src/test/incremental/hashes/for_loops.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -25,7 +25,7 @@ pub fn change_loop_body() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_loop_body() {\n     let mut _x = 0;\n@@ -48,7 +48,7 @@ pub fn change_iteration_variable_name() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_iteration_variable_name() {\n     let mut _x = 0;\n@@ -71,7 +71,7 @@ pub fn change_iteration_variable_pattern() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir, typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built, optimized_mir, typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_iteration_variable_pattern() {\n     let mut _x = 0;\n@@ -94,7 +94,7 @@ pub fn change_iterable() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, promoted_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built, promoted_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_iterable() {\n     let mut _x = 0;\n@@ -116,7 +116,7 @@ pub fn add_break() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir, typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built, optimized_mir, typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_break() {\n     let mut _x = 0;\n@@ -139,7 +139,7 @@ pub fn add_loop_label() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_loop_label() {\n     let mut _x = 0;\n@@ -162,7 +162,7 @@ pub fn add_loop_label_to_break() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_loop_label_to_break() {\n     let mut _x = 0;\n@@ -187,7 +187,7 @@ pub fn change_break_label() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_break_label() {\n     let mut _x = 0;\n@@ -212,7 +212,7 @@ pub fn add_loop_label_to_continue() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_loop_label_to_continue() {\n     let mut _x = 0;\n@@ -237,7 +237,7 @@ pub fn change_continue_label() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_continue_label() {\n     let mut _x = 0;\n@@ -262,7 +262,7 @@ pub fn change_continue_to_break() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_continue_to_break() {\n     let mut _x = 0;"}, {"sha": "bfd536284665d2fb150ed12699246939096d2ead", "filename": "src/test/incremental/hashes/function_interfaces.rs", "status": "modified", "additions": 54, "deletions": 60, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -9,235 +9,230 @@\n // revisions: cfail1 cfail2 cfail3\n // compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n \n-\n #![allow(warnings)]\n #![feature(linkage)]\n #![feature(rustc_attrs)]\n #![crate_type = \"rlib\"]\n \n-\n // Add Parameter ---------------------------------------------------------------\n \n #[cfg(cfail1)]\n pub fn add_parameter() {}\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg = \"cfail2\",\n-              except = \"Hir, HirBody, mir_built, optimized_mir, typeck_tables_of, fn_sig\")]\n+#[rustc_clean(\n+    cfg = \"cfail2\",\n+    except = \"hir_owner, hir_owner_items, mir_built, optimized_mir, typeck_tables_of, fn_sig\"\n+)]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn add_parameter(p: i32) {}\n \n-\n // Add Return Type -------------------------------------------------------------\n \n #[cfg(cfail1)]\n pub fn add_return_type() {}\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg = \"cfail2\", except = \"Hir, HirBody\")]\n+#[rustc_clean(cfg = \"cfail2\", except = \"hir_owner, hir_owner_items\")]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn add_return_type() -> () {}\n \n-\n // Change Parameter Type -------------------------------------------------------\n \n #[cfg(cfail1)]\n pub fn type_of_parameter(p: i32) {}\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg = \"cfail2\",\n-              except = \"Hir, HirBody, mir_built, optimized_mir, typeck_tables_of, fn_sig\")]\n+#[rustc_clean(\n+    cfg = \"cfail2\",\n+    except = \"hir_owner, hir_owner_items, mir_built, optimized_mir, typeck_tables_of, fn_sig\"\n+)]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn type_of_parameter(p: i64) {}\n \n-\n // Change Parameter Type Reference ---------------------------------------------\n \n #[cfg(cfail1)]\n pub fn type_of_parameter_ref(p: &i32) {}\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg = \"cfail2\",\n-              except = \"Hir, HirBody, mir_built, optimized_mir, typeck_tables_of, fn_sig\")]\n+#[rustc_clean(\n+    cfg = \"cfail2\",\n+    except = \"hir_owner, hir_owner_items, mir_built, optimized_mir, typeck_tables_of, fn_sig\"\n+)]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn type_of_parameter_ref(p: &mut i32) {}\n \n-\n // Change Parameter Order ------------------------------------------------------\n \n #[cfg(cfail1)]\n pub fn order_of_parameters(p1: i32, p2: i64) {}\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg = \"cfail2\",\n-              except = \"Hir, HirBody, mir_built, optimized_mir, typeck_tables_of, fn_sig\")]\n+#[rustc_clean(\n+    cfg = \"cfail2\",\n+    except = \"hir_owner, hir_owner_items, mir_built, optimized_mir, typeck_tables_of, fn_sig\"\n+)]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn order_of_parameters(p2: i64, p1: i32) {}\n \n-\n // Unsafe ----------------------------------------------------------------------\n \n #[cfg(cfail1)]\n pub fn make_unsafe() {}\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg = \"cfail2\",\n-              except = \"Hir, HirBody, mir_built, optimized_mir, typeck_tables_of, fn_sig\")]\n+#[rustc_clean(\n+    cfg = \"cfail2\",\n+    except = \"hir_owner, hir_owner_items, mir_built, optimized_mir, typeck_tables_of, fn_sig\"\n+)]\n #[rustc_clean(cfg = \"cfail3\")]\n pub unsafe fn make_unsafe() {}\n \n-\n // Extern ----------------------------------------------------------------------\n \n #[cfg(cfail1)]\n pub fn make_extern() {}\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg = \"cfail2\", except = \"Hir, HirBody, typeck_tables_of, fn_sig\")]\n+#[rustc_clean(cfg = \"cfail2\", except = \"hir_owner, hir_owner_items, typeck_tables_of, fn_sig\")]\n #[rustc_clean(cfg = \"cfail3\")]\n pub extern \"C\" fn make_extern() {}\n \n-\n // Type Parameter --------------------------------------------------------------\n \n #[cfg(cfail1)]\n pub fn type_parameter() {}\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg = \"cfail2\",\n-              except = \"Hir, HirBody, generics_of, type_of, predicates_of\")]\n+#[rustc_clean(\n+    cfg = \"cfail2\",\n+    except = \"hir_owner, hir_owner_items, generics_of, type_of, predicates_of\"\n+)]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn type_parameter<T>() {}\n \n-\n // Lifetime Parameter ----------------------------------------------------------\n \n #[cfg(cfail1)]\n pub fn lifetime_parameter() {}\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg = \"cfail2\", except = \"Hir, HirBody, generics_of\")]\n+#[rustc_clean(cfg = \"cfail2\", except = \"hir_owner, hir_owner_items, generics_of\")]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn lifetime_parameter<'a>() {}\n \n-\n // Trait Bound -----------------------------------------------------------------\n \n #[cfg(cfail1)]\n pub fn trait_bound<T>() {}\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg = \"cfail2\", except = \"Hir, HirBody, predicates_of\")]\n+#[rustc_clean(cfg = \"cfail2\", except = \"hir_owner, hir_owner_items, predicates_of\")]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn trait_bound<T: Eq>() {}\n \n-\n // Builtin Bound ---------------------------------------------------------------\n \n #[cfg(cfail1)]\n pub fn builtin_bound<T>() {}\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg = \"cfail2\", except = \"Hir, HirBody, predicates_of\")]\n+#[rustc_clean(cfg = \"cfail2\", except = \"hir_owner, hir_owner_items, predicates_of\")]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn builtin_bound<T: Send>() {}\n \n-\n // Lifetime Bound --------------------------------------------------------------\n \n #[cfg(cfail1)]\n pub fn lifetime_bound<'a, T>() {}\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg = \"cfail2\",\n-              except = \"Hir, HirBody, generics_of, type_of, predicates_of\")]\n+#[rustc_clean(\n+    cfg = \"cfail2\",\n+    except = \"hir_owner, hir_owner_items, generics_of, type_of, predicates_of\"\n+)]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn lifetime_bound<'a, T: 'a>() {}\n \n-\n // Second Trait Bound ----------------------------------------------------------\n \n #[cfg(cfail1)]\n pub fn second_trait_bound<T: Eq>() {}\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg = \"cfail2\", except = \"Hir, HirBody, predicates_of\")]\n+#[rustc_clean(cfg = \"cfail2\", except = \"hir_owner, hir_owner_items, predicates_of\")]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn second_trait_bound<T: Eq + Clone>() {}\n \n-\n // Second Builtin Bound --------------------------------------------------------\n \n #[cfg(cfail1)]\n pub fn second_builtin_bound<T: Send>() {}\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg = \"cfail2\", except = \"Hir, HirBody, predicates_of\")]\n+#[rustc_clean(cfg = \"cfail2\", except = \"hir_owner, hir_owner_items, predicates_of\")]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn second_builtin_bound<T: Send + Sized>() {}\n \n-\n // Second Lifetime Bound -------------------------------------------------------\n \n #[cfg(cfail1)]\n pub fn second_lifetime_bound<'a, 'b, T: 'a>() {}\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg = \"cfail2\",\n-              except = \"Hir, HirBody, generics_of, type_of, predicates_of\")]\n+#[rustc_clean(\n+    cfg = \"cfail2\",\n+    except = \"hir_owner, hir_owner_items, generics_of, type_of, predicates_of\"\n+)]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn second_lifetime_bound<'a, 'b, T: 'a + 'b>() {}\n \n-\n // Inline ----------------------------------------------------------------------\n \n #[cfg(cfail1)]\n pub fn inline() {}\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg = \"cfail2\", except = \"Hir, HirBody\")]\n+#[rustc_clean(cfg = \"cfail2\", except = \"hir_owner, hir_owner_items\")]\n #[rustc_clean(cfg = \"cfail3\")]\n #[inline]\n pub fn inline() {}\n \n-\n // Inline Never ----------------------------------------------------------------\n \n #[cfg(cfail1)]\n #[inline(always)]\n pub fn inline_never() {}\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg = \"cfail2\", except = \"Hir, HirBody\")]\n+#[rustc_clean(cfg = \"cfail2\", except = \"hir_owner, hir_owner_items\")]\n #[rustc_clean(cfg = \"cfail3\")]\n #[inline(never)]\n pub fn inline_never() {}\n \n-\n // No Mangle -------------------------------------------------------------------\n \n #[cfg(cfail1)]\n pub fn no_mangle() {}\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg = \"cfail2\", except = \"Hir, HirBody\")]\n+#[rustc_clean(cfg = \"cfail2\", except = \"hir_owner, hir_owner_items\")]\n #[rustc_clean(cfg = \"cfail3\")]\n #[no_mangle]\n pub fn no_mangle() {}\n \n-\n // Linkage ---------------------------------------------------------------------\n \n #[cfg(cfail1)]\n pub fn linkage() {}\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg = \"cfail2\", except = \"Hir, HirBody\")]\n+#[rustc_clean(cfg = \"cfail2\", except = \"hir_owner, hir_owner_items\")]\n #[rustc_clean(cfg = \"cfail3\")]\n #[linkage = \"weak_odr\"]\n pub fn linkage() {}\n \n-\n // Return Impl Trait -----------------------------------------------------------\n \n #[cfg(cfail1)]\n@@ -246,13 +241,12 @@ pub fn return_impl_trait() -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg = \"cfail2\", except = \"Hir, HirBody, typeck_tables_of, fn_sig\")]\n+#[rustc_clean(cfg = \"cfail2\", except = \"hir_owner, hir_owner_items, typeck_tables_of, fn_sig\")]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn return_impl_trait() -> impl Clone {\n     0\n }\n \n-\n // Change Return Impl Trait ----------------------------------------------------\n \n #[cfg(cfail1)]\n@@ -267,7 +261,6 @@ pub fn change_return_impl_trait() -> impl Copy {\n     0u32\n }\n \n-\n // Change Return Type Indirectly -----------------------------------------------\n \n pub struct ReferencedType1;\n@@ -279,15 +272,16 @@ pub mod change_return_type_indirectly {\n     #[cfg(not(cfail1))]\n     use super::ReferencedType2 as ReturnType;\n \n-    #[rustc_clean(cfg = \"cfail2\",\n-                  except = \"Hir, HirBody, mir_built, optimized_mir, typeck_tables_of, fn_sig\")]\n+    #[rustc_clean(\n+        cfg = \"cfail2\",\n+        except = \"hir_owner, hir_owner_items, mir_built, optimized_mir, typeck_tables_of, fn_sig\"\n+    )]\n     #[rustc_clean(cfg = \"cfail3\")]\n     pub fn indirect_return_type() -> ReturnType {\n         ReturnType {}\n     }\n }\n \n-\n // Change Parameter Type Indirectly --------------------------------------------\n \n pub mod change_parameter_type_indirectly {\n@@ -296,13 +290,14 @@ pub mod change_parameter_type_indirectly {\n     #[cfg(not(cfail1))]\n     use super::ReferencedType2 as ParameterType;\n \n-    #[rustc_clean(cfg = \"cfail2\",\n-                  except = \"Hir, HirBody, mir_built, optimized_mir, typeck_tables_of, fn_sig\")]\n+    #[rustc_clean(\n+        cfg = \"cfail2\",\n+        except = \"hir_owner, hir_owner_items, mir_built, optimized_mir, typeck_tables_of, fn_sig\"\n+    )]\n     #[rustc_clean(cfg = \"cfail3\")]\n     pub fn indirect_parameter_type(p: ParameterType) {}\n }\n \n-\n // Change Trait Bound Indirectly -----------------------------------------------\n \n pub trait ReferencedTrait1 {}\n@@ -314,12 +309,11 @@ pub mod change_trait_bound_indirectly {\n     #[cfg(not(cfail1))]\n     use super::ReferencedTrait2 as Trait;\n \n-    #[rustc_clean(cfg = \"cfail2\", except = \"Hir, HirBody, predicates_of\")]\n+    #[rustc_clean(cfg = \"cfail2\", except = \"hir_owner, hir_owner_items, predicates_of\")]\n     #[rustc_clean(cfg = \"cfail3\")]\n     pub fn indirect_trait_bound<T: Trait>(p: T) {}\n }\n \n-\n // Change Trait Bound Indirectly In Where Clause -------------------------------\n \n pub mod change_trait_bound_indirectly_in_where_clause {\n@@ -328,7 +322,7 @@ pub mod change_trait_bound_indirectly_in_where_clause {\n     #[cfg(not(cfail1))]\n     use super::ReferencedTrait2 as Trait;\n \n-    #[rustc_clean(cfg = \"cfail2\", except = \"Hir, HirBody, predicates_of\")]\n+    #[rustc_clean(cfg = \"cfail2\", except = \"hir_owner, hir_owner_items, predicates_of\")]\n     #[rustc_clean(cfg = \"cfail3\")]\n     pub fn indirect_trait_bound_where<T>(p: T)\n     where"}, {"sha": "93bdc0322bb71662b3524e6042c5c3f664523a56", "filename": "src/test/incremental/hashes/if_expressions.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fhashes%2Fif_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fhashes%2Fif_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fif_expressions.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -25,7 +25,7 @@ pub fn change_condition(x: bool) -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir,typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,mir_built,optimized_mir,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_condition(x: bool) -> u32 {\n     if !x {\n@@ -46,7 +46,7 @@ pub fn change_then_branch(x: bool) -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_then_branch(x: bool) -> u32 {\n     if x {\n@@ -69,7 +69,7 @@ pub fn change_else_branch(x: bool) -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_else_branch(x: bool) -> u32 {\n     if x {\n@@ -94,7 +94,7 @@ pub fn add_else_branch(x: bool) -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_else_branch(x: bool) -> u32 {\n     let mut ret = 1;\n@@ -120,7 +120,7 @@ pub fn change_condition_if_let(x: Option<u32>) -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir,typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,mir_built,optimized_mir,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_condition_if_let(x: Option<u32>) -> u32 {\n     if let Some(_) = x {\n@@ -143,7 +143,7 @@ pub fn change_then_branch_if_let(x: Option<u32>) -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir,typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,mir_built,optimized_mir,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_then_branch_if_let(x: Option<u32>) -> u32 {\n     if let Some(x) = x {\n@@ -166,7 +166,7 @@ pub fn change_else_branch_if_let(x: Option<u32>) -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_else_branch_if_let(x: Option<u32>) -> u32 {\n     if let Some(x) = x {\n@@ -191,7 +191,7 @@ pub fn add_else_branch_if_let(x: Option<u32>) -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_else_branch_if_let(x: Option<u32>) -> u32 {\n     let mut ret = 1;"}, {"sha": "84c0298918e7ef3565f8c338ef1b4bc9e5905c87", "filename": "src/test/incremental/hashes/indexing_expressions.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fhashes%2Findexing_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fhashes%2Findexing_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Findexing_expressions.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -20,10 +20,10 @@ fn change_simple_index(slice: &[u32]) -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n fn change_simple_index(slice: &[u32]) -> u32 {\n     slice[4]\n }\n@@ -37,10 +37,10 @@ fn change_lower_bound(slice: &[u32]) -> &[u32] {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n fn change_lower_bound(slice: &[u32]) -> &[u32] {\n     &slice[2..5]\n }\n@@ -54,10 +54,10 @@ fn change_upper_bound(slice: &[u32]) -> &[u32] {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n fn change_upper_bound(slice: &[u32]) -> &[u32] {\n     &slice[3..7]\n }\n@@ -71,10 +71,10 @@ fn add_lower_bound(slice: &[u32]) -> &[u32] {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n fn add_lower_bound(slice: &[u32]) -> &[u32] {\n     &slice[3..4]\n }\n@@ -88,10 +88,10 @@ fn add_upper_bound(slice: &[u32]) -> &[u32] {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n fn add_upper_bound(slice: &[u32]) -> &[u32] {\n     &slice[3..7]\n }\n@@ -105,10 +105,10 @@ fn change_mutability(slice: &mut [u32]) -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n fn change_mutability(slice: &mut [u32]) -> u32 {\n     (&slice[3..5])[0]\n }\n@@ -122,10 +122,10 @@ fn exclusive_to_inclusive_range(slice: &[u32]) -> &[u32] {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n fn exclusive_to_inclusive_range(slice: &[u32]) -> &[u32] {\n     &slice[3..=7]\n }"}, {"sha": "c0b80a92df6ee56eb44e1fb50de56985c461b738", "filename": "src/test/incremental/hashes/inherent_impls.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -23,7 +23,7 @@ impl Foo {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,associated_item_def_ids\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,associated_item_def_ids\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl Foo {\n     #[rustc_clean(cfg=\"cfail3\")]\n@@ -44,7 +44,7 @@ impl Foo {\n impl Foo {\n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"HirBody,optimized_mir,promoted_mir,mir_built,typeck_tables_of\"\n+        except=\"hir_owner_items,optimized_mir,promoted_mir,mir_built,typeck_tables_of\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn method_body() {\n@@ -68,7 +68,7 @@ impl Foo {\n impl Foo {\n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"HirBody,optimized_mir,promoted_mir,mir_built,typeck_tables_of\"\n+        except=\"hir_owner_items,optimized_mir,promoted_mir,mir_built,typeck_tables_of\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n     #[inline]\n@@ -85,10 +85,10 @@ impl Foo {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl Foo {\n-    #[rustc_clean(cfg=\"cfail2\", except=\"associated_item,Hir,HirBody\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"associated_item,hir_owner,hir_owner_items\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     fn method_privacy() { }\n }\n@@ -100,7 +100,7 @@ impl Foo {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl Foo {\n     #[rustc_dirty(cfg=\"cfail2\", except=\"type_of,predicates_of,promoted_mir\")]\n@@ -120,7 +120,7 @@ impl Foo {\n impl Foo {\n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"Hir,HirBody,fn_sig,typeck_tables_of,optimized_mir,mir_built\"\n+        except=\"hir_owner,hir_owner_items,fn_sig,typeck_tables_of,optimized_mir,mir_built\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn method_selfmutness(&mut self) { }\n@@ -135,7 +135,7 @@ impl Foo {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,associated_item_def_ids\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,associated_item_def_ids\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl Foo {\n     #[rustc_clean(cfg=\"cfail2\")]\n@@ -160,7 +160,7 @@ impl Foo {\n impl Foo {\n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"Hir,HirBody,fn_sig,typeck_tables_of,optimized_mir,mir_built\"\n+        except=\"hir_owner,hir_owner_items,fn_sig,typeck_tables_of,optimized_mir,mir_built\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn add_method_parameter(&self, _: i32) { }\n@@ -178,7 +178,7 @@ impl Foo {\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl Foo {\n-    #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,optimized_mir,mir_built\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,optimized_mir,mir_built\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn change_method_parameter_name(&self, b: i64) { }\n }\n@@ -197,7 +197,7 @@ impl Foo {\n impl Foo {\n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"Hir,HirBody,fn_sig,optimized_mir,mir_built,typeck_tables_of\")]\n+        except=\"hir_owner,hir_owner_items,fn_sig,optimized_mir,mir_built,typeck_tables_of\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn change_method_return_type(&self) -> u8 { 0 }\n }\n@@ -214,7 +214,7 @@ impl Foo {\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl Foo {\n-    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     #[inline]\n     pub fn make_method_inline(&self) -> u8 { 0 }\n@@ -232,7 +232,7 @@ impl Foo {\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl Foo {\n-    #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,optimized_mir,mir_built\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,optimized_mir,mir_built\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn change_method_parameter_order(&self, b: i64, a: i64) { }\n }\n@@ -251,7 +251,7 @@ impl Foo {\n impl Foo {\n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"Hir,HirBody,fn_sig,typeck_tables_of,optimized_mir,mir_built\"\n+        except=\"hir_owner,hir_owner_items,fn_sig,typeck_tables_of,optimized_mir,mir_built\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub unsafe fn make_method_unsafe(&self) { }\n@@ -269,7 +269,7 @@ impl Foo {\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl Foo {\n-    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,fn_sig,typeck_tables_of\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,fn_sig,typeck_tables_of\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub extern fn make_method_extern(&self) { }\n }\n@@ -286,7 +286,7 @@ impl Foo {\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl Foo {\n-    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,fn_sig,typeck_tables_of\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,fn_sig,typeck_tables_of\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub extern \"system\" fn change_method_calling_convention(&self) { }\n }\n@@ -312,7 +312,7 @@ impl Foo {\n     // if we lower generics before the body, then the `HirId` for\n     // things in the body will be affected. So if you start to see\n     // `typeck_tables_of` appear dirty, that might be the cause. -nmatsakis\n-    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn add_lifetime_parameter_to_method<'a>(&self) { }\n }\n@@ -340,7 +340,7 @@ impl Foo {\n     // appear dirty, that might be the cause. -nmatsakis\n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"Hir,HirBody,generics_of,predicates_of,type_of\",\n+        except=\"hir_owner,hir_owner_items,generics_of,predicates_of,type_of\",\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn add_type_parameter_to_method<T>(&self) { }\n@@ -360,7 +360,7 @@ impl Foo {\n impl Foo {\n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"Hir,HirBody,generics_of,predicates_of,type_of,typeck_tables_of\"\n+        except=\"hir_owner,hir_owner_items,generics_of,predicates_of,type_of,typeck_tables_of\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn add_lifetime_bound_to_lifetime_param_of_method<'a, 'b: 'a>(&self) { }\n@@ -387,7 +387,7 @@ impl Foo {\n     // generics before the body, then the `HirId` for things in the\n     // body will be affected. So if you start to see `typeck_tables_of`\n     // appear dirty, that might be the cause. -nmatsakis\n-    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,generics_of,predicates_of,\\\n+    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,generics_of,predicates_of,\\\n                                         type_of\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn add_lifetime_bound_to_type_param_of_method<'a, T: 'a>(&self) { }\n@@ -414,7 +414,7 @@ impl Foo {\n     // generics before the body, then the `HirId` for things in the\n     // body will be affected. So if you start to see `typeck_tables_of`\n     // appear dirty, that might be the cause. -nmatsakis\n-    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,predicates_of\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,predicates_of\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn add_trait_bound_to_type_param_of_method<T: Clone>(&self) { }\n }\n@@ -431,7 +431,7 @@ impl Foo {\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl Foo {\n-    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     #[no_mangle]\n     pub fn add_no_mangle_to_method(&self) { }\n@@ -448,7 +448,7 @@ impl Bar<u32> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,generics_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,generics_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl<T> Bar<T> {\n     #[rustc_clean(\n@@ -468,7 +468,7 @@ impl Bar<u32> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl Bar<u64> {\n     #[rustc_clean(cfg=\"cfail2\", except=\"fn_sig,optimized_mir,mir_built,typeck_tables_of\")]\n@@ -485,7 +485,7 @@ impl<T> Bar<T> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl<T: 'static> Bar<T> {\n     #[rustc_clean(cfg=\"cfail2\")]\n@@ -502,7 +502,7 @@ impl<T> Bar<T> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl<T: Clone> Bar<T> {\n     #[rustc_clean(cfg=\"cfail2\")]"}, {"sha": "a77123110aeda8517daeb2d87d8bd7e9304c952f", "filename": "src/test/incremental/hashes/inline_asm.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fhashes%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fhashes%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Finline_asm.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -33,7 +33,7 @@ pub fn change_template(a: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn change_template(a: i32) -> i32 {\n@@ -69,7 +69,7 @@ pub fn change_output(a: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn change_output(a: i32) -> i32 {\n@@ -105,7 +105,7 @@ pub fn change_input(_a: i32, _b: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn change_input(_a: i32, _b: i32) -> i32 {\n@@ -140,7 +140,7 @@ pub fn change_input_constraint(_a: i32, _b: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn change_input_constraint(_a: i32, _b: i32) -> i32 {\n@@ -175,7 +175,7 @@ pub fn change_clobber(_a: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn change_clobber(_a: i32) -> i32 {\n@@ -210,7 +210,7 @@ pub fn change_options(_a: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn change_options(_a: i32) -> i32 {"}, {"sha": "2d9cf4203dcd378f0cd75d7b45d8e58d1a776cb5", "filename": "src/test/incremental/hashes/let_expressions.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fhashes%2Flet_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fhashes%2Flet_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Flet_expressions.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -22,7 +22,7 @@ pub fn change_name() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,mir_built,optimized_mir\")]\n+    except=\"hir_owner_items,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_name() {\n     let _y = 2u64;\n@@ -38,7 +38,7 @@ pub fn add_type() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,typeck_tables_of,mir_built,optimized_mir\")]\n+    except=\"hir_owner_items,typeck_tables_of,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_type() {\n     let _x: u32 = 2u32;\n@@ -54,7 +54,7 @@ pub fn change_type() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,typeck_tables_of,mir_built,optimized_mir\")]\n+    except=\"hir_owner_items,typeck_tables_of,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_type() {\n     let _x: u8 = 2;\n@@ -70,7 +70,7 @@ pub fn change_mutability_of_reference_type() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,typeck_tables_of,mir_built,optimized_mir\")]\n+    except=\"hir_owner_items,typeck_tables_of,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_mutability_of_reference_type() {\n     let _x: &mut u64;\n@@ -86,7 +86,7 @@ pub fn change_mutability_of_slot() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,typeck_tables_of,mir_built,optimized_mir\")]\n+    except=\"hir_owner_items,typeck_tables_of,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_mutability_of_slot() {\n     let _x: u64 = 0;\n@@ -102,7 +102,7 @@ pub fn change_simple_binding_to_pattern() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,typeck_tables_of,mir_built,optimized_mir\")]\n+    except=\"hir_owner_items,typeck_tables_of,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_simple_binding_to_pattern() {\n     let (_a, _b) = (0u8, 'x');\n@@ -118,7 +118,7 @@ pub fn change_name_in_pattern() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,mir_built,optimized_mir\")]\n+    except=\"hir_owner_items,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_name_in_pattern() {\n     let (_a, _c) = (1u8, 'y');\n@@ -134,7 +134,7 @@ pub fn add_ref_in_pattern() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,typeck_tables_of,mir_built,optimized_mir\")]\n+    except=\"hir_owner_items,typeck_tables_of,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_ref_in_pattern() {\n     let (ref _a, _b) = (1u8, 'y');\n@@ -150,7 +150,7 @@ pub fn add_amp_in_pattern() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,typeck_tables_of,mir_built,optimized_mir\")]\n+    except=\"hir_owner_items,typeck_tables_of,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_amp_in_pattern() {\n     let (&_a, _b) = (&1u8, 'y');\n@@ -166,7 +166,7 @@ pub fn change_mutability_of_binding_in_pattern() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,typeck_tables_of,mir_built,optimized_mir\")]\n+    except=\"hir_owner_items,typeck_tables_of,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_mutability_of_binding_in_pattern() {\n     let (mut _a, _b) = (99u8, 'q');\n@@ -182,7 +182,7 @@ pub fn add_initializer() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,typeck_tables_of,mir_built,optimized_mir\")]\n+    except=\"hir_owner_items,typeck_tables_of,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_initializer() {\n     let _x: i16 = 3i16;\n@@ -198,7 +198,7 @@ pub fn change_initializer() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,mir_built,optimized_mir\")]\n+    except=\"hir_owner_items,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_initializer() {\n     let _x = 5u16;"}, {"sha": "7ce43559cfff320ca6f8110fb6310df9711b41ea", "filename": "src/test/incremental/hashes/loop_expressions.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fhashes%2Floop_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fhashes%2Floop_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Floop_expressions.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -25,7 +25,7 @@ pub fn change_loop_body() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_loop_body() {\n     let mut _x = 0;\n@@ -47,7 +47,7 @@ pub fn add_break() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir, typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built, optimized_mir, typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_break() {\n     let mut _x = 0;\n@@ -70,7 +70,7 @@ pub fn add_loop_label() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_loop_label() {\n     let mut _x = 0;\n@@ -93,7 +93,7 @@ pub fn add_loop_label_to_break() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_loop_label_to_break() {\n     let mut _x = 0;\n@@ -118,7 +118,7 @@ pub fn change_break_label() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir, typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built, optimized_mir, typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_break_label() {\n     let mut _x = 0;\n@@ -143,7 +143,7 @@ pub fn add_loop_label_to_continue() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_loop_label_to_continue() {\n     let mut _x = 0;\n@@ -168,7 +168,7 @@ pub fn change_continue_label() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built, typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_continue_label() {\n     let mut _x = 0;\n@@ -193,7 +193,7 @@ pub fn change_continue_to_break() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir, typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built, optimized_mir, typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_continue_to_break() {\n     let mut _x = 0;"}, {"sha": "30934c7c1d16a77ae6f6177f994b242e2029e366", "filename": "src/test/incremental/hashes/match_expressions.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fhashes%2Fmatch_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fhashes%2Fmatch_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fmatch_expressions.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -26,7 +26,7 @@ pub fn add_arm(x: u32) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,mir_built,optimized_mir,typeck_tables_of\")]\n+    except=\"hir_owner_items,mir_built,optimized_mir,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_arm(x: u32) -> u32 {\n     match x {\n@@ -51,7 +51,7 @@ pub fn change_order_of_arms(x: u32) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,mir_built,optimized_mir\")]\n+    except=\"hir_owner_items,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_order_of_arms(x: u32) -> u32 {\n     match x {\n@@ -75,7 +75,7 @@ pub fn add_guard_clause(x: u32, y: bool) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,mir_built,optimized_mir,typeck_tables_of\")]\n+    except=\"hir_owner_items,mir_built,optimized_mir,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_guard_clause(x: u32, y: bool) -> u32 {\n     match x {\n@@ -99,7 +99,7 @@ pub fn change_guard_clause(x: u32, y: bool) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,mir_built,optimized_mir,typeck_tables_of\")]\n+    except=\"hir_owner_items,mir_built,optimized_mir,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_guard_clause(x: u32, y: bool) -> u32 {\n     match x {\n@@ -123,7 +123,7 @@ pub fn add_at_binding(x: u32) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,mir_built,optimized_mir,typeck_tables_of\")]\n+    except=\"hir_owner_items,mir_built,optimized_mir,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_at_binding(x: u32) -> u32 {\n     match x {\n@@ -147,7 +147,7 @@ pub fn change_name_of_at_binding(x: u32) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,mir_built,optimized_mir\")]\n+    except=\"hir_owner_items,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_name_of_at_binding(x: u32) -> u32 {\n     match x {\n@@ -170,7 +170,7 @@ pub fn change_simple_name_to_pattern(x: u32) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,mir_built,optimized_mir,typeck_tables_of\")]\n+    except=\"hir_owner_items,mir_built,optimized_mir,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_simple_name_to_pattern(x: u32) -> u32 {\n     match (x, x & 1) {\n@@ -193,7 +193,7 @@ pub fn change_name_in_pattern(x: u32) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,mir_built,optimized_mir\")]\n+    except=\"hir_owner_items,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_name_in_pattern(x: u32) -> u32 {\n     match (x, x & 1) {\n@@ -216,7 +216,7 @@ pub fn change_mutability_of_binding_in_pattern(x: u32) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,mir_built,optimized_mir,typeck_tables_of\")]\n+    except=\"hir_owner_items,mir_built,optimized_mir,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_mutability_of_binding_in_pattern(x: u32) -> u32 {\n     match (x, x & 1) {\n@@ -238,7 +238,7 @@ pub fn add_ref_to_binding_in_pattern(x: u32) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,mir_built,optimized_mir,typeck_tables_of\")]\n+    except=\"hir_owner_items,mir_built,optimized_mir,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_ref_to_binding_in_pattern(x: u32) -> u32 {\n     match (x, x & 1) {\n@@ -260,7 +260,7 @@ pub fn add_amp_to_binding_in_pattern(x: u32) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-except=\"HirBody,mir_built,optimized_mir,typeck_tables_of\")]\n+except=\"hir_owner_items,mir_built,optimized_mir,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_amp_to_binding_in_pattern(x: u32) -> u32 {\n     match (&x, x & 1) {\n@@ -283,7 +283,7 @@ pub fn change_rhs_of_arm(x: u32) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,mir_built,optimized_mir\")]\n+    except=\"hir_owner_items,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_rhs_of_arm(x: u32) -> u32 {\n     match x {\n@@ -307,7 +307,7 @@ pub fn add_alternative_to_arm(x: u32) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,mir_built,optimized_mir,typeck_tables_of\")]\n+    except=\"hir_owner_items,mir_built,optimized_mir,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_alternative_to_arm(x: u32) -> u32 {\n     match x {"}, {"sha": "b46d1fac12475034fcc03b40302039e23692d6db", "filename": "src/test/incremental/hashes/panic_exprs.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fhashes%2Fpanic_exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fhashes%2Fpanic_exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fpanic_exprs.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -18,7 +18,7 @@\n \n \n // Indexing expression\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn indexing(slice: &[u8]) -> u8 {\n     #[cfg(cfail1)]\n@@ -33,7 +33,7 @@ pub fn indexing(slice: &[u8]) -> u8 {\n \n \n // Arithmetic overflow plus\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn arithmetic_overflow_plus(val: i32) -> i32 {\n     #[cfg(cfail1)]\n@@ -48,7 +48,7 @@ pub fn arithmetic_overflow_plus(val: i32) -> i32 {\n \n \n // Arithmetic overflow minus\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn arithmetic_overflow_minus(val: i32) -> i32 {\n     #[cfg(cfail1)]\n@@ -63,7 +63,7 @@ pub fn arithmetic_overflow_minus(val: i32) -> i32 {\n \n \n // Arithmetic overflow mult\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn arithmetic_overflow_mult(val: i32) -> i32 {\n     #[cfg(cfail1)]\n@@ -78,7 +78,7 @@ pub fn arithmetic_overflow_mult(val: i32) -> i32 {\n \n \n // Arithmetic overflow negation\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn arithmetic_overflow_negation(val: i32) -> i32 {\n     #[cfg(cfail1)]\n@@ -93,7 +93,7 @@ pub fn arithmetic_overflow_negation(val: i32) -> i32 {\n \n \n // Division by zero\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn division_by_zero(val: i32) -> i32 {\n     #[cfg(cfail1)]\n@@ -107,7 +107,7 @@ pub fn division_by_zero(val: i32) -> i32 {\n }\n \n // Division by zero\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn mod_by_zero(val: i32) -> i32 {\n     #[cfg(cfail1)]\n@@ -122,7 +122,7 @@ pub fn mod_by_zero(val: i32) -> i32 {\n \n \n // shift left\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn shift_left(val: i32, shift: usize) -> i32 {\n     #[cfg(cfail1)]\n@@ -137,7 +137,7 @@ pub fn shift_left(val: i32, shift: usize) -> i32 {\n \n \n // shift right\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn shift_right(val: i32, shift: usize) -> i32 {\n     #[cfg(cfail1)]"}, {"sha": "536b79324734c2aeef5bca6fc7f4fb1769d7a563", "filename": "src/test/incremental/hashes/statics.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fhashes%2Fstatics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fhashes%2Fstatics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fstatics.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -21,7 +21,7 @@\n static STATIC_VISIBILITY: u8 = 0;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub static STATIC_VISIBILITY: u8 = 0;\n \n@@ -31,7 +31,7 @@ pub static STATIC_VISIBILITY: u8 = 0;\n static STATIC_MUTABILITY: u8 = 0;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n #[rustc_clean(cfg=\"cfail3\")]\n static mut STATIC_MUTABILITY: u8 = 0;\n \n@@ -41,7 +41,7 @@ static mut STATIC_MUTABILITY: u8 = 0;\n static STATIC_LINKAGE: u8 = 0;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[linkage=\"weak_odr\"]\n static STATIC_LINKAGE: u8 = 0;\n@@ -52,7 +52,7 @@ static STATIC_LINKAGE: u8 = 0;\n static STATIC_NO_MANGLE: u8 = 0;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[no_mangle]\n static STATIC_NO_MANGLE: u8 = 0;\n@@ -63,7 +63,7 @@ static STATIC_NO_MANGLE: u8 = 0;\n static STATIC_THREAD_LOCAL: u8 = 0;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[thread_local]\n static STATIC_THREAD_LOCAL: u8 = 0;\n@@ -74,7 +74,7 @@ static STATIC_THREAD_LOCAL: u8 = 0;\n static STATIC_CHANGE_TYPE_1: i16 = 0;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n static STATIC_CHANGE_TYPE_1: u64 = 0;\n \n@@ -84,13 +84,13 @@ static STATIC_CHANGE_TYPE_1: u64 = 0;\n static STATIC_CHANGE_TYPE_2: Option<i8> = None;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,type_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n static STATIC_CHANGE_TYPE_2: Option<u16> = None;\n \n \n // Change value between simple literals\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items\")]\n #[rustc_clean(cfg=\"cfail3\")]\n static STATIC_CHANGE_VALUE_1: i16 = {\n     #[cfg(cfail1)]\n@@ -102,7 +102,7 @@ static STATIC_CHANGE_VALUE_1: i16 = {\n \n \n // Change value between expressions\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items\")]\n #[rustc_clean(cfg=\"cfail3\")]\n static STATIC_CHANGE_VALUE_2: i16 = {\n     #[cfg(cfail1)]\n@@ -112,7 +112,7 @@ static STATIC_CHANGE_VALUE_2: i16 = {\n     { 1 + 2 }\n };\n \n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items\")]\n #[rustc_clean(cfg=\"cfail3\")]\n static STATIC_CHANGE_VALUE_3: i16 = {\n     #[cfg(cfail1)]\n@@ -122,7 +122,7 @@ static STATIC_CHANGE_VALUE_3: i16 = {\n     { 2 * 3 }\n };\n \n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items\")]\n #[rustc_clean(cfg=\"cfail3\")]\n static STATIC_CHANGE_VALUE_4: i16 = {\n     #[cfg(cfail1)]\n@@ -144,11 +144,11 @@ mod static_change_type_indirectly {\n     #[cfg(not(cfail1))]\n     use super::ReferencedType2 as Type;\n \n-    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,type_of\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     static STATIC_CHANGE_TYPE_INDIRECTLY_1: Type = Type;\n \n-    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,type_of\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items,type_of\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     static STATIC_CHANGE_TYPE_INDIRECTLY_2: Option<Type> = None;\n }"}, {"sha": "89b18eefd0646c70d89973d12916620a69e3e76b", "filename": "src/test/incremental/hashes/struct_constructors.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -31,7 +31,7 @@ pub fn change_field_value_regular_struct() -> RegularStruct {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,optimized_mir,mir_built\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,optimized_mir,mir_built\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_field_value_regular_struct() -> RegularStruct {\n     RegularStruct {\n@@ -54,7 +54,7 @@ pub fn change_field_order_regular_struct() -> RegularStruct {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_field_order_regular_struct() -> RegularStruct {\n     RegularStruct {\n@@ -82,7 +82,7 @@ pub fn add_field_regular_struct() -> RegularStruct {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,optimized_mir,mir_built,typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,optimized_mir,mir_built,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_field_regular_struct() -> RegularStruct {\n     let struct1 = RegularStruct {\n@@ -117,7 +117,7 @@ pub fn change_field_label_regular_struct() -> RegularStruct {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,optimized_mir,mir_built,typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,optimized_mir,mir_built,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_field_label_regular_struct() -> RegularStruct {\n     let struct1 = RegularStruct {\n@@ -152,7 +152,7 @@ pub fn change_constructor_path_regular_struct() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,mir_built,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_constructor_path_regular_struct() {\n     let _ = RegularStruct2 {\n@@ -173,7 +173,7 @@ pub mod change_constructor_path_indirectly_regular_struct {\n \n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"fn_sig,Hir,HirBody,optimized_mir,mir_built,typeck_tables_of\"\n+        except=\"fn_sig,hir_owner,hir_owner_items,optimized_mir,mir_built,typeck_tables_of\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn function() -> Struct {\n@@ -196,7 +196,7 @@ pub fn change_field_value_tuple_struct() -> TupleStruct {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,optimized_mir,mir_built\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,optimized_mir,mir_built\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_field_value_tuple_struct() -> TupleStruct {\n     TupleStruct(0, 1, 3)\n@@ -213,7 +213,7 @@ pub fn change_constructor_path_tuple_struct() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items,mir_built,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_constructor_path_tuple_struct() {\n     let _ = TupleStruct2(0, 1, 2);\n@@ -230,7 +230,7 @@ pub mod change_constructor_path_indirectly_tuple_struct {\n \n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"fn_sig,Hir,HirBody,optimized_mir,mir_built,typeck_tables_of\"\n+        except=\"fn_sig,hir_owner,hir_owner_items,optimized_mir,mir_built,typeck_tables_of\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn function() -> Struct {"}, {"sha": "fa08b7ec1ed3a93fe0005dc34ff82edcf7f3e1f1", "filename": "src/test/incremental/hashes/struct_defs.rs", "status": "modified", "additions": 84, "deletions": 84, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_defs.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -24,13 +24,13 @@\n pub struct LayoutPacked;\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"type_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n@@ -41,13 +41,13 @@ pub struct LayoutPacked;\n struct LayoutC;\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"type_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n@@ -61,13 +61,13 @@ struct LayoutC;\n struct TupleStructFieldType(i32);\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"type_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n@@ -84,13 +84,13 @@ struct TupleStructFieldType(\n struct TupleStructAddField(i32);\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"type_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n@@ -106,13 +106,13 @@ struct TupleStructAddField(\n struct TupleStructFieldVisibility(char);\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"type_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n@@ -125,13 +125,13 @@ struct TupleStructFieldVisibility(pub char);\n struct RecordStructFieldType { x: f32 }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"type_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n@@ -148,13 +148,13 @@ struct RecordStructFieldType {\n struct RecordStructFieldName { x: f32 }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"type_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n@@ -167,13 +167,13 @@ struct RecordStructFieldName { y: f32 }\n struct RecordStructAddField { x: f32 }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"type_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n@@ -188,13 +188,13 @@ struct RecordStructAddField {\n struct RecordStructFieldVisibility { x: f32 }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"type_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n@@ -209,13 +209,13 @@ struct RecordStructFieldVisibility {\n struct AddLifetimeParameter<'a>(&'a f32, &'a f64);\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"type_of\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"generics_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n@@ -228,13 +228,13 @@ struct AddLifetimeParameter<'a, 'b>(&'a f32, &'b f64);\n struct AddLifetimeParameterBound<'a, 'b>(&'a f32, &'b f64);\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"type_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"predicates_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n@@ -247,13 +247,13 @@ struct AddLifetimeParameterBound<'a, 'b: 'a>(\n struct AddLifetimeParameterBoundWhereClause<'a, 'b>(&'a f32, &'b f64);\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"type_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"predicates_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n@@ -269,13 +269,13 @@ struct AddLifetimeParameterBoundWhereClause<'a, 'b>(\n struct AddTypeParameter<T1>(T1, T1);\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"type_of\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"generics_of\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"predicates_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n@@ -293,13 +293,13 @@ struct AddTypeParameter<T1, T2>(\n struct AddTypeParameterBound<T>(T);\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"type_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"predicates_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n@@ -312,13 +312,13 @@ struct AddTypeParameterBound<T: Send>(\n struct AddTypeParameterBoundWhereClause<T>(T);\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"type_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"predicates_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n@@ -332,13 +332,13 @@ struct AddTypeParameterBoundWhereClause<T>(\n // fingerprint is stable (i.e., that there are no random influences like memory\n // addresses taken into account by the hashing algorithm).\n // Note: there is no #[cfg(...)], so this is ALWAYS compiled\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"type_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n@@ -351,13 +351,13 @@ pub struct EmptyStruct;\n struct Visibility;\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"type_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n@@ -373,13 +373,13 @@ mod tuple_struct_change_field_type_indirectly {\n     #[cfg(not(cfail1))]\n     use super::ReferencedType2 as FieldType;\n \n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"type_of\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+    #[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n     #[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n     #[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n     #[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n@@ -396,13 +396,13 @@ mod record_struct_change_field_type_indirectly {\n     #[cfg(not(cfail1))]\n     use super::ReferencedType2 as FieldType;\n \n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"type_of\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"predicates_of\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+    #[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n     #[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n     #[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n     #[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n@@ -424,13 +424,13 @@ mod change_trait_bound_indirectly {\n     #[cfg(not(cfail1))]\n     use super::ReferencedTrait2 as Trait;\n \n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"type_of\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n     #[rustc_dirty(label=\"predicates_of\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+    #[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n     #[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n     #[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n     #[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]\n@@ -444,13 +444,13 @@ mod change_trait_bound_indirectly_in_where_clause {\n     #[cfg(not(cfail1))]\n     use super::ReferencedTrait2 as Trait;\n \n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"type_of\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"generics_of\", cfg=\"cfail2\")]\n     #[rustc_dirty(label=\"predicates_of\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+    #[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n     #[rustc_clean(label=\"type_of\", cfg=\"cfail3\")]\n     #[rustc_clean(label=\"generics_of\", cfg=\"cfail3\")]\n     #[rustc_clean(label=\"predicates_of\", cfg=\"cfail3\")]"}, {"sha": "df41b73f92c42ebd6097b172613fc7481ca8a1d6", "filename": "src/test/incremental/hashes/trait_defs.rs", "status": "modified", "additions": 212, "deletions": 212, "changes": 424, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -25,8 +25,8 @@\n trait TraitVisibility { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n pub trait TraitVisibility { }\n \n \n@@ -36,8 +36,8 @@ pub trait TraitVisibility { }\n trait TraitUnsafety { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n unsafe trait TraitUnsafety { }\n \n \n@@ -48,8 +48,8 @@ trait TraitAddMethod {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n pub trait TraitAddMethod {\n     fn method();\n }\n@@ -63,8 +63,8 @@ trait TraitChangeMethodName {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n trait TraitChangeMethodName {\n     fn methodChanged();\n }\n@@ -78,11 +78,11 @@ trait TraitAddReturnType {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n trait TraitAddReturnType {\n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n     fn method() -> u32;\n }\n \n@@ -95,11 +95,11 @@ trait TraitChangeReturnType {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n trait TraitChangeReturnType {\n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n     fn method() -> u64;\n }\n \n@@ -112,11 +112,11 @@ trait TraitAddParameterToMethod {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n trait TraitAddParameterToMethod {\n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n     fn method(a: u32);\n }\n \n@@ -130,18 +130,18 @@ trait TraitChangeMethodParameterName {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n trait TraitChangeMethodParameterName {\n     // FIXME(#38501) This should preferably always be clean.\n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n     fn method(b: u32);\n \n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n     fn with_default(y: i32) {}\n }\n \n@@ -154,11 +154,11 @@ trait TraitChangeMethodParameterType {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n trait TraitChangeMethodParameterType {\n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n     fn method(a: i64);\n }\n \n@@ -171,11 +171,11 @@ trait TraitChangeMethodParameterTypeRef {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n trait TraitChangeMethodParameterTypeRef {\n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n     fn method(a: &mut i32);\n }\n \n@@ -188,11 +188,11 @@ trait TraitChangeMethodParametersOrder {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n trait TraitChangeMethodParametersOrder {\n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n     fn method(b: i64, a: i32);\n }\n \n@@ -205,11 +205,11 @@ trait TraitAddMethodAutoImplementation {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n trait TraitAddMethodAutoImplementation {\n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n     fn method() { }\n }\n \n@@ -223,8 +223,8 @@ trait TraitChangeOrderOfMethods {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n trait TraitChangeOrderOfMethods {\n     fn method1();\n     fn method0();\n@@ -239,11 +239,11 @@ trait TraitChangeModeSelfRefToMut {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n trait TraitChangeModeSelfRefToMut {\n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n     fn method(&mut self);\n }\n \n@@ -255,13 +255,13 @@ trait TraitChangeModeSelfOwnToMut: Sized {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n trait TraitChangeModeSelfOwnToMut: Sized {\n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n     fn method(mut self) {}\n }\n \n@@ -273,11 +273,11 @@ trait TraitChangeModeSelfOwnToRef {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n trait TraitChangeModeSelfOwnToRef {\n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n     fn method(&self);\n }\n \n@@ -290,11 +290,11 @@ trait TraitAddUnsafeModifier {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n trait TraitAddUnsafeModifier {\n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n     unsafe fn method();\n }\n \n@@ -307,11 +307,11 @@ trait TraitAddExternModifier {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n trait TraitAddExternModifier {\n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n     extern fn method();\n }\n \n@@ -324,11 +324,11 @@ trait TraitChangeExternCToRustIntrinsic {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n trait TraitChangeExternCToRustIntrinsic {\n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n     extern \"stdcall\" fn method();\n }\n \n@@ -341,11 +341,11 @@ trait TraitAddTypeParameterToMethod {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n trait TraitAddTypeParameterToMethod {\n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n     fn method<T>();\n }\n \n@@ -358,11 +358,11 @@ trait TraitAddLifetimeParameterToMethod {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n trait TraitAddLifetimeParameterToMethod {\n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n     fn method<'a>();\n }\n \n@@ -379,11 +379,11 @@ trait TraitAddTraitBoundToMethodTypeParameter {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n trait TraitAddTraitBoundToMethodTypeParameter {\n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n     fn method<T: ReferencedTrait0>();\n }\n \n@@ -396,11 +396,11 @@ trait TraitAddBuiltinBoundToMethodTypeParameter {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n trait TraitAddBuiltinBoundToMethodTypeParameter {\n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n     fn method<T: Sized>();\n }\n \n@@ -413,11 +413,11 @@ trait TraitAddLifetimeBoundToMethodLifetimeParameter {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n trait TraitAddLifetimeBoundToMethodLifetimeParameter {\n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n     fn method<'a, 'b: 'a>(a: &'a u32, b: &'b u32);\n }\n \n@@ -430,11 +430,11 @@ trait TraitAddSecondTraitBoundToMethodTypeParameter {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n trait TraitAddSecondTraitBoundToMethodTypeParameter {\n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n     fn method<T: ReferencedTrait0 + ReferencedTrait1>();\n }\n \n@@ -447,11 +447,11 @@ trait TraitAddSecondBuiltinBoundToMethodTypeParameter {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n trait TraitAddSecondBuiltinBoundToMethodTypeParameter {\n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n     fn method<T: Sized + Sync>();\n }\n \n@@ -464,11 +464,11 @@ trait TraitAddSecondLifetimeBoundToMethodLifetimeParameter {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n trait TraitAddSecondLifetimeBoundToMethodLifetimeParameter {\n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n     fn method<'a, 'b, 'c: 'a + 'b>(a: &'a u32, b: &'b u32, c: &'c u32);\n }\n \n@@ -478,14 +478,14 @@ trait TraitAddSecondLifetimeBoundToMethodLifetimeParameter {\n #[cfg(cfail1)]\n trait TraitAddAssociatedType {\n \n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n     fn method();\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n trait TraitAddAssociatedType {\n     type Associated;\n \n@@ -506,11 +506,11 @@ trait TraitAddTraitBoundToAssociatedType {\n // Apparently the type bound contributes to the predicates of the trait, but\n // does not change the associated item itself.\n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n trait TraitAddTraitBoundToAssociatedType {\n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n     type Associated: ReferencedTrait0;\n \n     fn method();\n@@ -527,11 +527,11 @@ trait TraitAddLifetimeBoundToAssociatedType<'a> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n trait TraitAddLifetimeBoundToAssociatedType<'a> {\n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n     type Associated: 'a;\n \n     fn method();\n@@ -548,11 +548,11 @@ trait TraitAddDefaultToAssociatedType {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n trait TraitAddDefaultToAssociatedType {\n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n     type Associated = ReferenceType0;\n \n     fn method();\n@@ -567,8 +567,8 @@ trait TraitAddAssociatedConstant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n trait TraitAddAssociatedConstant {\n     const Value: u32;\n \n@@ -586,15 +586,15 @@ trait TraitAddInitializerToAssociatedConstant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n trait TraitAddInitializerToAssociatedConstant {\n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n     const Value: u32 = 1;\n \n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n     fn method();\n }\n \n@@ -609,15 +609,15 @@ trait TraitChangeTypeOfAssociatedConstant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n trait TraitChangeTypeOfAssociatedConstant {\n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n     const Value: f64;\n \n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n     fn method();\n }\n \n@@ -628,8 +628,8 @@ trait TraitChangeTypeOfAssociatedConstant {\n trait TraitAddSuperTrait { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n trait TraitAddSuperTrait : ReferencedTrait0 { }\n \n \n@@ -639,8 +639,8 @@ trait TraitAddSuperTrait : ReferencedTrait0 { }\n trait TraitAddBuiltiBound { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n trait TraitAddBuiltiBound : Send { }\n \n \n@@ -650,8 +650,8 @@ trait TraitAddBuiltiBound : Send { }\n trait TraitAddStaticLifetimeBound { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n trait TraitAddStaticLifetimeBound : 'static { }\n \n \n@@ -661,16 +661,16 @@ trait TraitAddStaticLifetimeBound : 'static { }\n trait TraitAddTraitAsSecondBound : ReferencedTrait0 { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n trait TraitAddTraitAsSecondBound : ReferencedTrait0 + ReferencedTrait1 { }\n \n #[cfg(cfail1)]\n trait TraitAddTraitAsSecondBoundFromBuiltin : Send { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n trait TraitAddTraitAsSecondBoundFromBuiltin : Send + ReferencedTrait0 { }\n \n \n@@ -680,16 +680,16 @@ trait TraitAddTraitAsSecondBoundFromBuiltin : Send + ReferencedTrait0 { }\n trait TraitAddBuiltinBoundAsSecondBound : ReferencedTrait0 { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n trait TraitAddBuiltinBoundAsSecondBound : ReferencedTrait0 + Send { }\n \n #[cfg(cfail1)]\n trait TraitAddBuiltinBoundAsSecondBoundFromBuiltin : Send { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n trait TraitAddBuiltinBoundAsSecondBoundFromBuiltin: Send + Copy { }\n \n \n@@ -699,16 +699,16 @@ trait TraitAddBuiltinBoundAsSecondBoundFromBuiltin: Send + Copy { }\n trait TraitAddStaticBoundAsSecondBound : ReferencedTrait0 { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n trait TraitAddStaticBoundAsSecondBound : ReferencedTrait0 + 'static { }\n \n #[cfg(cfail1)]\n trait TraitAddStaticBoundAsSecondBoundFromBuiltin : Send { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n trait TraitAddStaticBoundAsSecondBoundFromBuiltin : Send + 'static { }\n \n \n@@ -718,8 +718,8 @@ trait TraitAddStaticBoundAsSecondBoundFromBuiltin : Send + 'static { }\n trait TraitAddTypeParameterToTrait { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n trait TraitAddTypeParameterToTrait<T> { }\n \n \n@@ -729,8 +729,8 @@ trait TraitAddTypeParameterToTrait<T> { }\n trait TraitAddLifetimeParameterToTrait { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n trait TraitAddLifetimeParameterToTrait<'a> { }\n \n \n@@ -740,8 +740,8 @@ trait TraitAddLifetimeParameterToTrait<'a> { }\n trait TraitAddTraitBoundToTypeParameterOfTrait<T> { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n trait TraitAddTraitBoundToTypeParameterOfTrait<T: ReferencedTrait0> { }\n \n \n@@ -751,8 +751,8 @@ trait TraitAddTraitBoundToTypeParameterOfTrait<T: ReferencedTrait0> { }\n trait TraitAddLifetimeBoundToTypeParameterOfTrait<'a, T> { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n trait TraitAddLifetimeBoundToTypeParameterOfTrait<'a, T: 'a> { }\n \n \n@@ -762,8 +762,8 @@ trait TraitAddLifetimeBoundToTypeParameterOfTrait<'a, T: 'a> { }\n trait TraitAddLifetimeBoundToLifetimeParameterOfTrait<'a, 'b> { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n trait TraitAddLifetimeBoundToLifetimeParameterOfTrait<'a: 'b, 'b> { }\n \n \n@@ -773,8 +773,8 @@ trait TraitAddLifetimeBoundToLifetimeParameterOfTrait<'a: 'b, 'b> { }\n trait TraitAddBuiltinBoundToTypeParameterOfTrait<T> { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n trait TraitAddBuiltinBoundToTypeParameterOfTrait<T: Send> { }\n \n \n@@ -784,8 +784,8 @@ trait TraitAddBuiltinBoundToTypeParameterOfTrait<T: Send> { }\n trait TraitAddSecondTypeParameterToTrait<T> { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n trait TraitAddSecondTypeParameterToTrait<T, S> { }\n \n \n@@ -795,8 +795,8 @@ trait TraitAddSecondTypeParameterToTrait<T, S> { }\n trait TraitAddSecondLifetimeParameterToTrait<'a> { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n trait TraitAddSecondLifetimeParameterToTrait<'a, 'b> { }\n \n \n@@ -806,8 +806,8 @@ trait TraitAddSecondLifetimeParameterToTrait<'a, 'b> { }\n trait TraitAddSecondTraitBoundToTypeParameterOfTrait<T: ReferencedTrait0> { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n trait TraitAddSecondTraitBoundToTypeParameterOfTrait<T: ReferencedTrait0 + ReferencedTrait1> { }\n \n \n@@ -817,8 +817,8 @@ trait TraitAddSecondTraitBoundToTypeParameterOfTrait<T: ReferencedTrait0 + Refer\n trait TraitAddSecondLifetimeBoundToTypeParameterOfTrait<'a, 'b, T: 'a> { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n trait TraitAddSecondLifetimeBoundToTypeParameterOfTrait<'a, 'b, T: 'a + 'b> { }\n \n \n@@ -828,8 +828,8 @@ trait TraitAddSecondLifetimeBoundToTypeParameterOfTrait<'a, 'b, T: 'a + 'b> { }\n trait TraitAddSecondLifetimeBoundToLifetimeParameterOfTrait<'a: 'b, 'b, 'c> { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n trait TraitAddSecondLifetimeBoundToLifetimeParameterOfTrait<'a: 'b + 'c, 'b, 'c> { }\n \n \n@@ -839,8 +839,8 @@ trait TraitAddSecondLifetimeBoundToLifetimeParameterOfTrait<'a: 'b + 'c, 'b, 'c>\n trait TraitAddSecondBuiltinBoundToTypeParameterOfTrait<T: Send> { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n trait TraitAddSecondBuiltinBoundToTypeParameterOfTrait<T: Send + Sync> { }\n \n \n@@ -855,8 +855,8 @@ struct ReferenceType1 {}\n trait TraitAddTraitBoundToTypeParameterOfTraitWhere<T> { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n trait TraitAddTraitBoundToTypeParameterOfTraitWhere<T> where T: ReferencedTrait0 { }\n \n \n@@ -866,8 +866,8 @@ trait TraitAddTraitBoundToTypeParameterOfTraitWhere<T> where T: ReferencedTrait0\n trait TraitAddLifetimeBoundToTypeParameterOfTraitWhere<'a, T> { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n trait TraitAddLifetimeBoundToTypeParameterOfTraitWhere<'a, T> where T: 'a { }\n \n \n@@ -877,8 +877,8 @@ trait TraitAddLifetimeBoundToTypeParameterOfTraitWhere<'a, T> where T: 'a { }\n trait TraitAddLifetimeBoundToLifetimeParameterOfTraitWhere<'a, 'b> { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n trait TraitAddLifetimeBoundToLifetimeParameterOfTraitWhere<'a, 'b> where 'a: 'b { }\n \n \n@@ -888,8 +888,8 @@ trait TraitAddLifetimeBoundToLifetimeParameterOfTraitWhere<'a, 'b> where 'a: 'b\n trait TraitAddBuiltinBoundToTypeParameterOfTraitWhere<T> { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n trait TraitAddBuiltinBoundToTypeParameterOfTraitWhere<T> where T: Send { }\n \n \n@@ -899,8 +899,8 @@ trait TraitAddBuiltinBoundToTypeParameterOfTraitWhere<T> where T: Send { }\n trait TraitAddSecondTraitBoundToTypeParameterOfTraitWhere<T> where T: ReferencedTrait0 { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n trait TraitAddSecondTraitBoundToTypeParameterOfTraitWhere<T>\n     where T: ReferencedTrait0 + ReferencedTrait1 { }\n \n@@ -911,8 +911,8 @@ trait TraitAddSecondTraitBoundToTypeParameterOfTraitWhere<T>\n trait TraitAddSecondLifetimeBoundToTypeParameterOfTraitWhere<'a, 'b, T> where T: 'a { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n trait TraitAddSecondLifetimeBoundToTypeParameterOfTraitWhere<'a, 'b, T> where T: 'a + 'b { }\n \n \n@@ -922,8 +922,8 @@ trait TraitAddSecondLifetimeBoundToTypeParameterOfTraitWhere<'a, 'b, T> where T:\n trait TraitAddSecondLifetimeBoundToLifetimeParameterOfTraitWhere<'a, 'b, 'c> where 'a: 'b { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n trait TraitAddSecondLifetimeBoundToLifetimeParameterOfTraitWhere<'a, 'b, 'c> where 'a: 'b + 'c { }\n \n \n@@ -933,8 +933,8 @@ trait TraitAddSecondLifetimeBoundToLifetimeParameterOfTraitWhere<'a, 'b, 'c> whe\n trait TraitAddSecondBuiltinBoundToTypeParameterOfTraitWhere<T> where T: Send { }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n trait TraitAddSecondBuiltinBoundToTypeParameterOfTraitWhere<T> where T: Send + Sync { }\n \n \n@@ -945,11 +945,11 @@ mod change_return_type_of_method_indirectly_use {\n     #[cfg(not(cfail1))]\n     use super::ReferenceType1 as ReturnType;\n \n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n     trait TraitChangeReturnType {\n-        #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-        #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+        #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+        #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n         fn method() -> ReturnType;\n     }\n }\n@@ -963,11 +963,11 @@ mod change_method_parameter_type_indirectly_by_use {\n     #[cfg(not(cfail1))]\n     use super::ReferenceType1 as ArgType;\n \n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n     trait TraitChangeArgType {\n-        #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-        #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+        #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+        #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n         fn method(a: ArgType);\n     }\n }\n@@ -981,11 +981,11 @@ mod change_method_parameter_type_bound_indirectly_by_use {\n     #[cfg(not(cfail1))]\n     use super::ReferencedTrait1 as Bound;\n \n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n     trait TraitChangeBoundOfMethodTypeParameter {\n-        #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-        #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+        #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+        #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n         fn method<T: Bound>(a: T);\n     }\n }\n@@ -1000,11 +1000,11 @@ mod change_method_parameter_type_bound_indirectly_by_use_where {\n     #[cfg(not(cfail1))]\n     use super::ReferencedTrait1 as Bound;\n \n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n     trait TraitChangeBoundOfMethodTypeParameterWhere {\n-        #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-        #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+        #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+        #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n         fn method<T>(a: T) where T: Bound;\n     }\n }\n@@ -1018,8 +1018,8 @@ mod change_method_type_parameter_bound_indirectly {\n     #[cfg(not(cfail1))]\n     use super::ReferencedTrait1 as Bound;\n \n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n     trait TraitChangeTraitBound<T: Bound> {\n         fn method(a: T);\n     }\n@@ -1035,8 +1035,8 @@ mod change_method_type_parameter_bound_indirectly_where {\n     #[cfg(not(cfail1))]\n     use super::ReferencedTrait1 as Bound;\n \n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n     trait TraitChangeTraitBoundWhere<T> where T: Bound {\n         fn method(a: T);\n     }"}, {"sha": "70e066870b6b449f017561707516bf6fa65cfb1d", "filename": "src/test/incremental/hashes/trait_impls.rs", "status": "modified", "additions": 78, "deletions": 78, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_impls.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -30,18 +30,18 @@ impl ChangeMethodNameTrait for Foo {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n pub trait ChangeMethodNameTrait {\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n     fn method_name2();\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n impl ChangeMethodNameTrait for Foo {\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n     fn method_name2() { }\n }\n \n@@ -59,13 +59,13 @@ impl ChangeMethodBodyTrait for Foo {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n impl ChangeMethodBodyTrait for Foo {\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n     fn method_name() {\n         ()\n     }\n@@ -86,13 +86,13 @@ impl ChangeMethodBodyTraitInlined for Foo {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n impl ChangeMethodBodyTraitInlined for Foo {\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner_items\", cfg=\"cfail3\")]\n     #[inline]\n     fn method_name() {\n         panic!()\n@@ -117,11 +117,11 @@ pub trait ChangeMethodSelfnessTrait {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n impl ChangeMethodSelfnessTrait for Foo {\n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n     fn method_name(&self) {\n         ()\n     }\n@@ -145,11 +145,11 @@ pub trait RemoveMethodSelfnessTrait {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n impl RemoveMethodSelfnessTrait for Foo {\n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n     fn method_name() {}\n }\n \n@@ -171,11 +171,11 @@ pub trait ChangeMethodSelfmutnessTrait {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n impl ChangeMethodSelfmutnessTrait for Foo {\n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n     fn method_name(&mut self) {}\n }\n \n@@ -197,8 +197,8 @@ pub trait ChangeItemKindTrait {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n impl ChangeItemKindTrait for Foo {\n     type name = ();\n }\n@@ -223,8 +223,8 @@ pub trait RemoveItemTrait {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n impl RemoveItemTrait for Foo {\n     type TypeName = ();\n }\n@@ -248,8 +248,8 @@ pub trait AddItemTrait {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n impl AddItemTrait for Foo {\n     type TypeName = ();\n     fn method_name() { }\n@@ -268,17 +268,17 @@ impl ChangeHasValueTrait for Foo {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n pub trait ChangeHasValueTrait {\n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n     fn method_name() { }\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n impl ChangeHasValueTrait for Foo {\n     fn method_name() { }\n }\n@@ -295,11 +295,11 @@ impl AddDefaultTrait for Foo {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n impl AddDefaultTrait for Foo {\n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n     default fn method_name() { }\n }\n \n@@ -321,11 +321,11 @@ pub trait AddArgumentTrait {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n impl AddArgumentTrait for Foo {\n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n     fn method_name(&self, _x: u32) { }\n }\n \n@@ -347,11 +347,11 @@ pub trait ChangeArgumentTypeTrait {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n impl ChangeArgumentTypeTrait for Foo {\n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n     fn method_name(&self, _x: char) { }\n }\n \n@@ -370,11 +370,11 @@ impl AddTypeParameterToImpl<u32> for Bar<u32> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n impl<T> AddTypeParameterToImpl<T> for Bar<T> {\n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n     fn id(t: T) -> T { t }\n }\n \n@@ -391,11 +391,11 @@ impl ChangeSelfTypeOfImpl for u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n impl ChangeSelfTypeOfImpl for u64 {\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n     fn id(self) -> Self { self }\n }\n \n@@ -412,11 +412,11 @@ impl<T> AddLifetimeBoundToImplParameter for T {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n impl<T: 'static> AddLifetimeBoundToImplParameter for T {\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n     fn id(self) -> Self { self }\n }\n \n@@ -433,11 +433,11 @@ impl<T> AddTraitBoundToImplParameter for T {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n impl<T: Clone> AddTraitBoundToImplParameter for T {\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n     fn id(self) -> Self { self }\n }\n \n@@ -454,11 +454,11 @@ impl AddNoMangleToMethod for Foo {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n impl AddNoMangleToMethod for Foo {\n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n     #[no_mangle]\n     fn add_no_mangle_to_method(&self) { }\n }\n@@ -475,11 +475,11 @@ impl MakeMethodInline for Foo {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n impl MakeMethodInline for Foo {\n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n     #[inline]\n     fn make_method_inline(&self) -> u8 { 0 }\n }"}, {"sha": "bbe1514ba9fd49f36d360333d246d6f8d5f3da40", "filename": "src/test/incremental/hashes/type_defs.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fhashes%2Ftype_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fhashes%2Ftype_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ftype_defs.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -24,7 +24,7 @@\n type ChangePrimitiveType = i32;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n #[rustc_clean(cfg=\"cfail3\")]\n type ChangePrimitiveType = i64;\n \n@@ -35,7 +35,7 @@ type ChangePrimitiveType = i64;\n type ChangeMutability = &'static i32;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n #[rustc_clean(cfg=\"cfail3\")]\n type ChangeMutability = &'static mut i32;\n \n@@ -46,7 +46,7 @@ type ChangeMutability = &'static mut i32;\n type ChangeLifetime<'a> = (&'static i32, &'a i32);\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n #[rustc_clean(cfg=\"cfail3\")]\n type ChangeLifetime<'a> = (&'a i32, &'a i32);\n \n@@ -60,7 +60,7 @@ struct Struct2;\n type ChangeTypeStruct = Struct1;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n #[rustc_clean(cfg=\"cfail3\")]\n type ChangeTypeStruct = Struct2;\n \n@@ -71,7 +71,7 @@ type ChangeTypeStruct = Struct2;\n type ChangeTypeTuple = (u32, u64);\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n #[rustc_clean(cfg=\"cfail3\")]\n type ChangeTypeTuple = (u32, i64);\n \n@@ -91,7 +91,7 @@ enum Enum2 {\n type ChangeTypeEnum = Enum1;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n #[rustc_clean(cfg=\"cfail3\")]\n type ChangeTypeEnum = Enum2;\n \n@@ -102,7 +102,7 @@ type ChangeTypeEnum = Enum2;\n type AddTupleField = (i32, i64);\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n #[rustc_clean(cfg=\"cfail3\")]\n type AddTupleField = (i32, i64, i16);\n \n@@ -113,7 +113,7 @@ type AddTupleField = (i32, i64, i16);\n type ChangeNestedTupleField = (i32, (i64, i16));\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n #[rustc_clean(cfg=\"cfail3\")]\n type ChangeNestedTupleField = (i32, (i64, i8));\n \n@@ -124,7 +124,7 @@ type ChangeNestedTupleField = (i32, (i64, i8));\n type AddTypeParam<T1> = (T1, T1);\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n #[rustc_clean(cfg=\"cfail3\")]\n type AddTypeParam<T1, T2> = (T1, T2);\n \n@@ -135,7 +135,7 @@ type AddTypeParam<T1, T2> = (T1, T2);\n type AddTypeParamBound<T1> = (T1, u32);\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n #[rustc_clean(cfg=\"cfail3\")]\n type AddTypeParamBound<T1: Clone> = (T1, u32);\n \n@@ -146,7 +146,7 @@ type AddTypeParamBound<T1: Clone> = (T1, u32);\n type AddTypeParamBoundWhereClause<T1> where T1: Clone = (T1, u32);\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n #[rustc_clean(cfg=\"cfail3\")]\n type AddTypeParamBoundWhereClause<T1> where T1: Clone+Copy = (T1, u32);\n \n@@ -157,7 +157,7 @@ type AddTypeParamBoundWhereClause<T1> where T1: Clone+Copy = (T1, u32);\n type AddLifetimeParam<'a> = (&'a u32, &'a u32);\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n #[rustc_clean(cfg=\"cfail3\")]\n type AddLifetimeParam<'a, 'b> = (&'a u32, &'b u32);\n \n@@ -168,7 +168,7 @@ type AddLifetimeParam<'a, 'b> = (&'a u32, &'b u32);\n type AddLifetimeParamBound<'a, 'b> = (&'a u32, &'b u32);\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n #[rustc_clean(cfg=\"cfail3\")]\n type AddLifetimeParamBound<'a, 'b: 'a> = (&'a u32, &'b u32);\n \n@@ -181,7 +181,7 @@ where 'b: 'a\n     = (&'a u32, &'b u32, &'c u32);\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n #[rustc_clean(cfg=\"cfail3\")]\n type AddLifetimeParamBoundWhereClause<'a, 'b, 'c>\n where 'b: 'a,\n@@ -200,7 +200,7 @@ mod change_trait_bound_indirectly {\n     #[cfg(not(cfail1))]\n     use super::ReferencedTrait2 as Trait;\n \n-    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     type ChangeTraitBoundIndirectly<T: Trait> = (T, u32);\n }\n@@ -214,7 +214,7 @@ mod change_trait_bound_indirectly_in_where_clause {\n     #[cfg(not(cfail1))]\n     use super::ReferencedTrait2 as Trait;\n \n-    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_items\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     type ChangeTraitBoundIndirectly<T> where T : Trait = (T, u32);\n }"}, {"sha": "9b63003482fe50549ecf5cf3fd24e9f15e9f78e8", "filename": "src/test/incremental/hashes/unary_and_binary_exprs.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fhashes%2Funary_and_binary_exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fhashes%2Funary_and_binary_exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Funary_and_binary_exprs.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -21,7 +21,7 @@ pub fn const_negation() -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_items,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn const_negation() -> i32 {\n     -1\n@@ -36,7 +36,7 @@ pub fn const_bitwise_not() -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_items,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn const_bitwise_not() -> i32 {\n     !99\n@@ -51,7 +51,7 @@ pub fn var_negation(x: i32, y: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_items,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn var_negation(x: i32, y: i32) -> i32 {\n     -y\n@@ -66,7 +66,7 @@ pub fn var_bitwise_not(x: i32, y: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_items,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn var_bitwise_not(x: i32, y: i32) -> i32 {\n     !y\n@@ -81,7 +81,7 @@ pub fn var_deref(x: &i32, y: &i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,optimized_mir,mir_built,typeck_tables_of\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_items,optimized_mir,mir_built,typeck_tables_of\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn var_deref(x: &i32, y: &i32) -> i32 {\n     *y\n@@ -96,7 +96,7 @@ pub fn first_const_add() -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_items,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn first_const_add() -> i32 {\n     2 + 3\n@@ -111,7 +111,7 @@ pub fn second_const_add() -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_items,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn second_const_add() -> i32 {\n     1 + 3\n@@ -126,7 +126,7 @@ pub fn first_var_add(a: i32, b: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_items,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn first_var_add(a: i32, b: i32) -> i32 {\n     b + 2\n@@ -141,7 +141,7 @@ pub fn second_var_add(a: i32, b: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_items,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn second_var_add(a: i32, b: i32) -> i32 {\n     1 + b\n@@ -156,7 +156,7 @@ pub fn plus_to_minus(a: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_items,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn plus_to_minus(a: i32) -> i32 {\n     1 - a\n@@ -171,7 +171,7 @@ pub fn plus_to_mult(a: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_items,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn plus_to_mult(a: i32) -> i32 {\n     1 * a\n@@ -186,7 +186,7 @@ pub fn plus_to_div(a: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_items,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn plus_to_div(a: i32) -> i32 {\n     1 / a\n@@ -201,7 +201,7 @@ pub fn plus_to_mod(a: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_items,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn plus_to_mod(a: i32) -> i32 {\n     1 % a\n@@ -216,7 +216,7 @@ pub fn and_to_or(a: bool, b: bool) -> bool {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_items,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn and_to_or(a: bool, b: bool) -> bool {\n     a || b\n@@ -231,7 +231,7 @@ pub fn bitwise_and_to_bitwise_or(a: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_items,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn bitwise_and_to_bitwise_or(a: i32) -> i32 {\n     1 | a\n@@ -246,7 +246,7 @@ pub fn bitwise_and_to_bitwise_xor(a: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_items,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn bitwise_and_to_bitwise_xor(a: i32) -> i32 {\n     1 ^ a\n@@ -261,7 +261,7 @@ pub fn bitwise_and_to_lshift(a: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_items,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn bitwise_and_to_lshift(a: i32) -> i32 {\n     a << 1\n@@ -276,7 +276,7 @@ pub fn bitwise_and_to_rshift(a: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_items,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn bitwise_and_to_rshift(a: i32) -> i32 {\n     a >> 1\n@@ -291,7 +291,7 @@ pub fn eq_to_uneq(a: i32) -> bool {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_items,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn eq_to_uneq(a: i32) -> bool {\n     a != 1\n@@ -306,7 +306,7 @@ pub fn eq_to_lt(a: i32) -> bool {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_items,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn eq_to_lt(a: i32) -> bool {\n     a < 1\n@@ -321,7 +321,7 @@ pub fn eq_to_gt(a: i32) -> bool {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_items,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn eq_to_gt(a: i32) -> bool {\n     a > 1\n@@ -336,7 +336,7 @@ pub fn eq_to_le(a: i32) -> bool {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_items,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn eq_to_le(a: i32) -> bool {\n     a <= 1\n@@ -351,7 +351,7 @@ pub fn eq_to_ge(a: i32) -> bool {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_items,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn eq_to_ge(a: i32) -> bool {\n     a >= 1\n@@ -368,7 +368,7 @@ pub fn type_cast(a: u8) -> u64 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,optimized_mir,mir_built,typeck_tables_of\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_items,optimized_mir,mir_built,typeck_tables_of\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn type_cast(a: u8) -> u64 {\n     let b = a as u32;\n@@ -385,7 +385,7 @@ pub fn value_cast(a: u32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_items,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn value_cast(a: u32) -> i32 {\n     2 as i32\n@@ -403,7 +403,7 @@ pub fn place() -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_items,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn place() -> i32 {\n     let mut x = 10;\n@@ -423,7 +423,7 @@ pub fn rvalue() -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_items,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn rvalue() -> i32 {\n     let mut x = 10;\n@@ -440,7 +440,7 @@ pub fn index_to_slice(s: &[u8], i: usize, j: usize) -> u8 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"HirBody,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_items,optimized_mir,mir_built\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn index_to_slice(s: &[u8], i: usize, j: usize) -> u8 {\n     s[j]"}, {"sha": "908f60440fa5b802b63bc00840735c0d90b1c87d", "filename": "src/test/incremental/hashes/while_let_loops.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_let_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_let_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_let_loops.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -25,7 +25,7 @@ pub fn change_loop_body() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_loop_body() {\n     let mut _x = 0;\n@@ -48,7 +48,7 @@ pub fn change_loop_condition() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_loop_condition() {\n     let mut _x = 0;\n@@ -70,7 +70,7 @@ pub fn add_break() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built, typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_break() {\n     let mut _x = 0;\n@@ -93,7 +93,7 @@ pub fn add_loop_label() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_loop_label() {\n     let mut _x = 0;\n@@ -116,7 +116,7 @@ pub fn add_loop_label_to_break() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_loop_label_to_break() {\n     let mut _x = 0;\n@@ -141,7 +141,7 @@ pub fn change_break_label() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_break_label() {\n     let mut _x = 0;\n@@ -166,7 +166,7 @@ pub fn add_loop_label_to_continue() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_loop_label_to_continue() {\n     let mut _x = 0;\n@@ -191,7 +191,7 @@ pub fn change_continue_label() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_continue_label() {\n     let mut _x = 0;\n@@ -216,7 +216,7 @@ pub fn change_continue_to_break() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_continue_to_break() {\n     let mut _x = 0;"}, {"sha": "365ec5fa567d9e8eb4aad6082281af79b715bffc", "filename": "src/test/incremental/hashes/while_loops.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_loops.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -25,7 +25,7 @@ pub fn change_loop_body() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_loop_body() {\n     let mut _x = 0;\n@@ -48,7 +48,7 @@ pub fn change_loop_condition() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_loop_condition() {\n     let mut _x = 0;\n@@ -70,7 +70,7 @@ pub fn add_break() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir, typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built, optimized_mir, typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_break() {\n     let mut _x = 0;\n@@ -93,7 +93,7 @@ pub fn add_loop_label() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_loop_label() {\n     let mut _x = 0;\n@@ -116,7 +116,7 @@ pub fn add_loop_label_to_break() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_loop_label_to_break() {\n     let mut _x = 0;\n@@ -141,7 +141,7 @@ pub fn change_break_label() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_break_label() {\n     let mut _x = 0;\n@@ -166,7 +166,7 @@ pub fn add_loop_label_to_continue() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_loop_label_to_continue() {\n     let mut _x = 0;\n@@ -191,7 +191,7 @@ pub fn change_continue_label() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_continue_label() {\n     let mut _x = 0;\n@@ -216,7 +216,7 @@ pub fn change_continue_to_break() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_items, mir_built, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_continue_to_break() {\n     let mut _x = 0;"}, {"sha": "a9ec66346acb0a15f0604aff57439a184c13ed04", "filename": "src/test/incremental/ich_method_call_trait_scope.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fich_method_call_trait_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fich_method_call_trait_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fich_method_call_trait_scope.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -26,15 +26,15 @@ mod mod3 {\n     #[cfg(rpass2)]\n     use Trait2;\n \n-    #[rustc_clean(label=\"Hir\", cfg=\"rpass2\")]\n-    #[rustc_clean(label=\"HirBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"hir_owner_items\", cfg=\"rpass2\")]\n     #[rustc_dirty(label=\"typeck_tables_of\", cfg=\"rpass2\")]\n     fn bar() {\n         ().method();\n     }\n \n-    #[rustc_clean(label=\"Hir\", cfg=\"rpass2\")]\n-    #[rustc_clean(label=\"HirBody\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"hir_owner_items\", cfg=\"rpass2\")]\n     #[rustc_clean(label=\"typeck_tables_of\", cfg=\"rpass2\")]\n     fn baz() {\n         22; // no method call, traits in scope don't matter"}, {"sha": "a9232190eef48dfc013b7272d5e38b9d6dbaee55", "filename": "src/test/incremental/ich_nested_items.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fich_nested_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fich_nested_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fich_nested_items.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -7,18 +7,21 @@\n #![crate_type = \"rlib\"]\n #![feature(rustc_attrs)]\n \n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+#[rustc_clean(label = \"hir_owner\", cfg = \"cfail2\")]\n+#[rustc_dirty(label = \"hir_owner_items\", cfg = \"cfail2\")]\n pub fn foo() {\n     #[cfg(cfail1)]\n-    pub fn baz() { } // order is different...\n+    pub fn baz() {} // order is different...\n \n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"HirBody\", cfg=\"cfail2\")]\n-    pub fn bar() { } // but that doesn't matter.\n+    // FIXME: Make \"hir_owner\" use `rustc_clean` here. Currently \"hir_owner\" includes a reference to\n+    // the parent node, which is the statement holding this item. Changing the position of\n+    // `bar` in `foo` will update that reference and make `hir_owner(bar)` dirty.\n+    #[rustc_dirty(label = \"hir_owner\", cfg = \"cfail2\")]\n+    #[rustc_clean(label = \"hir_owner_items\", cfg = \"cfail2\")]\n+    pub fn bar() {} // but that doesn't matter.\n \n     #[cfg(cfail2)]\n-    pub fn baz() { } // order is different...\n+    pub fn baz() {} // order is different...\n \n-    pub fn bap() { } // neither does adding a new item\n+    pub fn bap() {} // neither does adding a new item\n }"}, {"sha": "c4674faabf5d63494178c223c0c9e0173fc7fd58", "filename": "src/test/incremental/ich_resolve_results.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fich_resolve_results.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fich_resolve_results.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fich_resolve_results.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -28,18 +28,18 @@ mod mod3 {\n     #[cfg(rpass3)]\n     use mod2::Foo;\n \n-    #[rustc_clean(label=\"Hir\", cfg=\"rpass2\")]\n-    #[rustc_clean(label=\"HirBody\", cfg=\"rpass2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"rpass3\")]\n-    #[rustc_dirty(label=\"HirBody\", cfg=\"rpass3\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"hir_owner_items\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"rpass3\")]\n+    #[rustc_dirty(label=\"hir_owner_items\", cfg=\"rpass3\")]\n     fn in_expr() {\n         Foo(0);\n     }\n \n-    #[rustc_clean(label=\"Hir\", cfg=\"rpass2\")]\n-    #[rustc_clean(label=\"HirBody\", cfg=\"rpass2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"rpass3\")]\n-    #[rustc_dirty(label=\"HirBody\", cfg=\"rpass3\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"hir_owner_items\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"rpass3\")]\n+    #[rustc_dirty(label=\"hir_owner_items\", cfg=\"rpass3\")]\n     fn in_type() {\n         test::<Foo>();\n     }"}, {"sha": "bb76a0bb8fe868bdc174652c6bfa69f6e1b7e929", "filename": "src/test/incremental/inlined_hir_34991/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Finlined_hir_34991%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Finlined_hir_34991%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Finlined_hir_34991%2Fmain.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -1,6 +1,6 @@\n // Regression test for #34991: an ICE occurred here because we inline\n // some of the vector routines and give them a local def-id `X`. This\n-// got hashed after codegen (`Hir(X)`). When we load back up, we get an\n+// got hashed after codegen (`hir_owner(X)`). When we load back up, we get an\n // error because the `X` is remapped to the original def-id (in\n // libstd), and we can't hash a HIR node from std.\n "}, {"sha": "dc587fdc44b0d45969933cef860df524d9138726", "filename": "src/test/incremental/issue-69596.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fissue-69596.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fissue-69596.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fissue-69596.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -0,0 +1,21 @@\n+// revisions: rpass1 rpass2\n+\n+#![allow(unused_imports)]\n+\n+#[macro_export]\n+macro_rules! a_macro {\n+    () => {};\n+}\n+\n+#[cfg(rpass1)]\n+use a_macro as same_name;\n+\n+mod same_name {}\n+\n+mod needed_mod {\n+    fn _crash() {\n+        use super::same_name;\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "a360a66a64b24afab6c86b5844b3945ced77fd62", "filename": "src/test/incremental/source_loc_macros.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fsource_loc_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fsource_loc_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fsource_loc_macros.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -7,26 +7,26 @@\n \n #![feature(rustc_attrs)]\n \n-#[rustc_clean(label=\"Hir\", cfg=\"rpass2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"rpass2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"rpass2\")]\n+#[rustc_clean(label=\"hir_owner_items\", cfg=\"rpass2\")]\n fn line_same() {\n     let _ = line!();\n }\n \n-#[rustc_clean(label=\"Hir\", cfg=\"rpass2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"rpass2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"rpass2\")]\n+#[rustc_clean(label=\"hir_owner_items\", cfg=\"rpass2\")]\n fn col_same() {\n     let _ = column!();\n }\n \n-#[rustc_clean(label=\"Hir\", cfg=\"rpass2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"rpass2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"rpass2\")]\n+#[rustc_clean(label=\"hir_owner_items\", cfg=\"rpass2\")]\n fn file_same() {\n     let _ = file!();\n }\n \n-#[rustc_clean(label=\"Hir\", cfg=\"rpass2\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"rpass2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"rpass2\")]\n+#[rustc_dirty(label=\"hir_owner_items\", cfg=\"rpass2\")]\n fn line_different() {\n     #[cfg(rpass1)]\n     {\n@@ -38,8 +38,8 @@ fn line_different() {\n     }\n }\n \n-#[rustc_clean(label=\"Hir\", cfg=\"rpass2\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"rpass2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"rpass2\")]\n+#[rustc_dirty(label=\"hir_owner_items\", cfg=\"rpass2\")]\n fn col_different() {\n     #[cfg(rpass1)]\n     {"}, {"sha": "2927ddec4e52c324e4afaf0dc3efd8cc267216d2", "filename": "src/test/incremental/span_hash_stable/auxiliary/sub1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fspan_hash_stable%2Fauxiliary%2Fsub1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fspan_hash_stable%2Fauxiliary%2Fsub1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fspan_hash_stable%2Fauxiliary%2Fsub1.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -1,4 +1,4 @@\n-#[rustc_clean(label=\"Hir\", cfg=\"rpass2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"rpass2\")]\n pub struct SomeType {\n     pub x: u32,\n     pub y: i64,"}, {"sha": "aa635077db8ee612db05b964f6a3128095bd10dc", "filename": "src/test/incremental/span_hash_stable/auxiliary/sub2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fspan_hash_stable%2Fauxiliary%2Fsub2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fspan_hash_stable%2Fauxiliary%2Fsub2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fspan_hash_stable%2Fauxiliary%2Fsub2.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -1,4 +1,4 @@\n-#[rustc_clean(label=\"Hir\", cfg=\"rpass2\")]\n+#[rustc_clean(label=\"hir_owner\", cfg=\"rpass2\")]\n pub struct SomeOtherType {\n     pub a: i32,\n     pub b: u64,"}, {"sha": "b87d829132b29e4a3788c904f229094cca0018bd", "filename": "src/test/incremental/spans_significant_w_debuginfo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fspans_significant_w_debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fspans_significant_w_debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fspans_significant_w_debuginfo.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -12,6 +12,6 @@\n pub fn main() {}\n \n #[cfg(rpass2)]\n-#[rustc_dirty(label=\"Hir\", cfg=\"rpass2\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"rpass2\")]\n+#[rustc_dirty(label=\"hir_owner\", cfg=\"rpass2\")]\n+#[rustc_dirty(label=\"hir_owner_items\", cfg=\"rpass2\")]\n pub fn main() {}"}, {"sha": "11a42262c16d2012c49e5810df7fd288c7285f87", "filename": "src/test/incremental/string_constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fstring_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Fstring_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fstring_constant.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -18,7 +18,7 @@ pub mod x {\n     }\n \n     #[cfg(cfail2)]\n-    #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+    #[rustc_dirty(label=\"hir_owner_items\", cfg=\"cfail2\")]\n     #[rustc_dirty(label=\"optimized_mir\", cfg=\"cfail2\")]\n     pub fn x() {\n         println!(\"{}\", \"2\");"}, {"sha": "3bc8818aa6f4ca76dbbbc5fb46d205ee3398d619", "filename": "src/test/incremental/unchecked_dirty_clean.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Funchecked_dirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fincremental%2Funchecked_dirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Funchecked_dirty_clean.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -10,25 +10,25 @@\n \n fn main() {\n \n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n     //[cfail2]~^ ERROR found unchecked `#[rustc_dirty]` / `#[rustc_clean]` attribute\n     {\n         // empty block\n     }\n \n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n     //[cfail2]~^ ERROR found unchecked `#[rustc_dirty]` / `#[rustc_clean]` attribute\n     {\n         // empty block\n     }\n }\n \n struct _Struct {\n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n     //[cfail2]~^ ERROR found unchecked `#[rustc_dirty]` / `#[rustc_clean]` attribute\n     _field1: i32,\n \n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"hir_owner\", cfg=\"cfail2\")]\n     //[cfail2]~^ ERROR found unchecked `#[rustc_dirty]` / `#[rustc_clean]` attribute\n     _field2: i32,\n }"}, {"sha": "52620b2464bd667cf41223eec8dc8653244ada23", "filename": "src/test/ui-fulldeps/auxiliary/lint-for-crate-rpass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate-rpass.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -29,10 +29,10 @@ macro_rules! fake_lint_pass {\n         impl<'a, 'tcx> LateLintPass<'a, 'tcx> for $struct {\n             fn check_crate(&mut self, cx: &LateContext, krate: &rustc_hir::Crate) {\n                 $(\n-                    if !attr::contains_name(&krate.attrs, $attr) {\n+                    if !attr::contains_name(&krate.item.attrs, $attr) {\n                         cx.lint(CRATE_NOT_OKAY, |lint| {\n                              let msg = format!(\"crate is not marked with #![{}]\", $attr);\n-                             lint.build(&msg).set_span(krate.span).emit()\n+                             lint.build(&msg).set_span(krate.item.span).emit()\n                         });\n                     }\n                 )*"}, {"sha": "6978d02c09d14f15dcb05741e219f1ba5b52935c", "filename": "src/test/ui-fulldeps/auxiliary/lint-for-crate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45ebd5808afd3df7ba842797c0fcd4447ddf30fb/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate.rs?ref=45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "patch": "@@ -27,10 +27,10 @@ declare_lint_pass!(Pass => [CRATE_NOT_OKAY]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n     fn check_crate(&mut self, cx: &LateContext, krate: &rustc_hir::Crate) {\n-        if !attr::contains_name(&krate.attrs, Symbol::intern(\"crate_okay\")) {\n+        if !attr::contains_name(&krate.item.attrs, Symbol::intern(\"crate_okay\")) {\n             cx.lint(CRATE_NOT_OKAY, |lint| {\n                 lint.build(\"crate is not marked with #![crate_okay]\")\n-                    .set_span(krate.span)\n+                    .set_span(krate.item.span)\n                     .emit()\n             });\n         }"}]}