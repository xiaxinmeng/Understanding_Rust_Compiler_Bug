{"sha": "8c1835dc6e92aacc1172d7ae4071de1f9dbb0d89", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjMTgzNWRjNmU5MmFhY2MxMTcyZDdhZTQwNzFkZTFmOWRiYjBkODk=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-07T18:37:10Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-15T16:14:34Z"}, "message": "IntRange::from_pat is redundant with pat_constructors", "tree": {"sha": "0c8ba5540726d2949bb05d7940a5e49f0c372a75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c8ba5540726d2949bb05d7940a5e49f0c372a75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c1835dc6e92aacc1172d7ae4071de1f9dbb0d89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c1835dc6e92aacc1172d7ae4071de1f9dbb0d89", "html_url": "https://github.com/rust-lang/rust/commit/8c1835dc6e92aacc1172d7ae4071de1f9dbb0d89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c1835dc6e92aacc1172d7ae4071de1f9dbb0d89/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34ad52e84f79b190a166f71227c312e15e1003a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/34ad52e84f79b190a166f71227c312e15e1003a3", "html_url": "https://github.com/rust-lang/rust/commit/34ad52e84f79b190a166f71227c312e15e1003a3"}], "stats": {"total": 42, "additions": 13, "deletions": 29}, "files": [{"sha": "2f2680e8d9b4a63953d1f5683b940f9225a36cf3", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 13, "deletions": 29, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/8c1835dc6e92aacc1172d7ae4071de1f9dbb0d89/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c1835dc6e92aacc1172d7ae4071de1f9dbb0d89/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=8c1835dc6e92aacc1172d7ae4071de1f9dbb0d89", "patch": "@@ -1374,29 +1374,10 @@ impl<'tcx> IntRange<'tcx> {\n     fn from_pat(\n         tcx: TyCtxt<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n-        mut pat: &Pat<'tcx>,\n+        pat: &Pat<'tcx>,\n     ) -> Option<IntRange<'tcx>> {\n-        loop {\n-            match pat.kind {\n-                box PatKind::Constant { value } => {\n-                    return Self::from_const(tcx, param_env, value, pat.span);\n-                }\n-                box PatKind::Range(PatRange { lo, hi, end }) => {\n-                    return Self::from_range(\n-                        tcx,\n-                        lo.eval_bits(tcx, param_env, lo.ty),\n-                        hi.eval_bits(tcx, param_env, hi.ty),\n-                        &lo.ty,\n-                        &end,\n-                        pat.span,\n-                    );\n-                }\n-                box PatKind::AscribeUserType { ref subpattern, .. } => {\n-                    pat = subpattern;\n-                }\n-                _ => return None,\n-            }\n-        }\n+        let ctor = pat_constructor(tcx, param_env, pat)?;\n+        IntRange::from_ctor(tcx, param_env, &ctor)\n     }\n \n     // The return value of `signed_bias` should be XORed with an endpoint to encode/decode it.\n@@ -1632,7 +1613,7 @@ pub fn is_useful<'p, 'a, 'tcx>(\n \n     debug!(\"is_useful_expand_first_col: pcx={:#?}, expanding {:#?}\", pcx, v.head());\n \n-    if let Some(constructor) = pat_constructor(cx, v.head()) {\n+    if let Some(constructor) = pat_constructor(cx.tcx, cx.param_env, v.head()) {\n         debug!(\"is_useful - expanding constructor: {:#?}\", constructor);\n         split_grouped_constructors(\n             cx.tcx,\n@@ -1651,7 +1632,7 @@ pub fn is_useful<'p, 'a, 'tcx>(\n         debug!(\"is_useful - expanding wildcard\");\n \n         let used_ctors: Vec<Constructor<'_>> =\n-            matrix.heads().filter_map(|p| pat_constructor(cx, p)).collect();\n+            matrix.heads().filter_map(|p| pat_constructor(cx.tcx, cx.param_env, p)).collect();\n         debug!(\"used_ctors = {:#?}\", used_ctors);\n         // `all_ctors` are all the constructors for the given type, which\n         // should all be represented (or caught with the wild pattern `_`).\n@@ -1754,26 +1735,29 @@ fn is_useful_specialized<'p, 'a, 'tcx>(\n /// Determines the constructor that the given pattern can be specialized to.\n /// Returns `None` in case of a catch-all, which can't be specialized.\n fn pat_constructor<'tcx>(\n-    cx: &mut MatchCheckCtxt<'_, 'tcx>,\n+    tcx: TyCtxt<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n     pat: &Pat<'tcx>,\n ) -> Option<Constructor<'tcx>> {\n     match *pat.kind {\n-        PatKind::AscribeUserType { ref subpattern, .. } => pat_constructor(cx, subpattern),\n+        PatKind::AscribeUserType { ref subpattern, .. } => {\n+            pat_constructor(tcx, param_env, subpattern)\n+        }\n         PatKind::Binding { .. } | PatKind::Wild => None,\n         PatKind::Leaf { .. } | PatKind::Deref { .. } => Some(Single),\n         PatKind::Variant { adt_def, variant_index, .. } => {\n             Some(Variant(adt_def.variants[variant_index].def_id))\n         }\n         PatKind::Constant { value } => Some(ConstantValue(value, pat.span)),\n         PatKind::Range(PatRange { lo, hi, end }) => Some(ConstantRange(\n-            lo.eval_bits(cx.tcx, cx.param_env, lo.ty),\n-            hi.eval_bits(cx.tcx, cx.param_env, hi.ty),\n+            lo.eval_bits(tcx, param_env, lo.ty),\n+            hi.eval_bits(tcx, param_env, hi.ty),\n             lo.ty,\n             end,\n             pat.span,\n         )),\n         PatKind::Array { .. } => match pat.ty.kind {\n-            ty::Array(_, length) => Some(FixedLenSlice(length.eval_usize(cx.tcx, cx.param_env))),\n+            ty::Array(_, length) => Some(FixedLenSlice(length.eval_usize(tcx, param_env))),\n             _ => span_bug!(pat.span, \"bad ty {:?} for array pattern\", pat.ty),\n         },\n         PatKind::Slice { ref prefix, ref slice, ref suffix } => {"}]}