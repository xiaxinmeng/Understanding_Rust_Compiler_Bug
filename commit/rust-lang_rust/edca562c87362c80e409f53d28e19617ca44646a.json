{"sha": "edca562c87362c80e409f53d28e19617ca44646a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkY2E1NjJjODczNjJjODBlNDA5ZjUzZDI4ZTE5NjE3Y2E0NDY0NmE=", "commit": {"author": {"name": "Jared Roesch", "email": "roeschinc@gmail.com", "date": "2015-07-26T04:40:57Z"}, "committer": {"name": "Jared Roesch", "email": "roeschinc@gmail.com", "date": "2015-08-04T23:05:06Z"}, "message": "Make parser recognize macro invocations in types\n\nReapplied the changes from https://github.com/freebroccolo/rust/commit/8b07abaa6e8ab42d37656dfad89de0eb5810c3b3\nto a clean branch of master", "tree": {"sha": "ce1d38013f73dca0065def9a24cf8ae39c1fda5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce1d38013f73dca0065def9a24cf8ae39c1fda5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/edca562c87362c80e409f53d28e19617ca44646a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/edca562c87362c80e409f53d28e19617ca44646a", "html_url": "https://github.com/rust-lang/rust/commit/edca562c87362c80e409f53d28e19617ca44646a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/edca562c87362c80e409f53d28e19617ca44646a/comments", "author": {"login": "jroesch", "id": 696509, "node_id": "MDQ6VXNlcjY5NjUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/696509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jroesch", "html_url": "https://github.com/jroesch", "followers_url": "https://api.github.com/users/jroesch/followers", "following_url": "https://api.github.com/users/jroesch/following{/other_user}", "gists_url": "https://api.github.com/users/jroesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jroesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jroesch/subscriptions", "organizations_url": "https://api.github.com/users/jroesch/orgs", "repos_url": "https://api.github.com/users/jroesch/repos", "events_url": "https://api.github.com/users/jroesch/events{/privacy}", "received_events_url": "https://api.github.com/users/jroesch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jroesch", "id": 696509, "node_id": "MDQ6VXNlcjY5NjUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/696509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jroesch", "html_url": "https://github.com/jroesch", "followers_url": "https://api.github.com/users/jroesch/followers", "following_url": "https://api.github.com/users/jroesch/following{/other_user}", "gists_url": "https://api.github.com/users/jroesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jroesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jroesch/subscriptions", "organizations_url": "https://api.github.com/users/jroesch/orgs", "repos_url": "https://api.github.com/users/jroesch/repos", "events_url": "https://api.github.com/users/jroesch/events{/privacy}", "received_events_url": "https://api.github.com/users/jroesch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad5927870cd32c5feb7f42dc4bca4a1b21e61a0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad5927870cd32c5feb7f42dc4bca4a1b21e61a0e", "html_url": "https://github.com/rust-lang/rust/commit/ad5927870cd32c5feb7f42dc4bca4a1b21e61a0e"}], "stats": {"total": 17, "additions": 15, "deletions": 2}, "files": [{"sha": "7b8ad7d7af6836c15f329c19b6601c18543261a8", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/edca562c87362c80e409f53d28e19617ca44646a/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edca562c87362c80e409f53d28e19617ca44646a/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=edca562c87362c80e409f53d28e19617ca44646a", "patch": "@@ -51,6 +51,7 @@ use ast::{SelfExplicit, SelfRegion, SelfStatic, SelfValue};\n use ast::{Delimited, SequenceRepetition, TokenTree, TraitItem, TraitRef};\n use ast::{TtDelimited, TtSequence, TtToken};\n use ast::{TupleVariantKind, Ty, Ty_, TypeBinding};\n+use ast::{TyMac};\n use ast::{TyFixedLengthVec, TyBareFn, TyTypeof, TyInfer};\n use ast::{TyParam, TyParamBound, TyParen, TyPath, TyPolyTraitRef, TyPtr};\n use ast::{TyRptr, TyTup, TyU32, TyVec, UnUniq};\n@@ -1369,8 +1370,20 @@ impl<'a> Parser<'a> {\n         } else if self.check(&token::ModSep) ||\n                   self.token.is_ident() ||\n                   self.token.is_path() {\n-            // NAMED TYPE\n-            try!(self.parse_ty_path())\n+            let path = try!(self.parse_path(LifetimeAndTypesWithoutColons));\n+            if self.check(&token::Not) {\n+                // MACRO INVOCATION\n+                try!(self.bump());\n+                let delim = try!(self.expect_open_delim());\n+                let tts = try!(self.parse_seq_to_end(&token::CloseDelim(delim),\n+                                                     seq_sep_none(),\n+                                                     |p| p.parse_token_tree()));\n+                let hi = self.span.hi;\n+                TyMac(spanned(lo, hi, MacInvocTT(path, tts, EMPTY_CTXT)))\n+            } else {\n+                // NAMED TYPE\n+                TyPath(None, path)\n+            }\n         } else if try!(self.eat(&token::Underscore) ){\n             // TYPE TO BE INFERRED\n             TyInfer"}]}