{"sha": "b3cad86a05bde6dadbbf8c5405fab18265376b30", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzY2FkODZhMDViZGU2ZGFkYmJmOGM1NDA1ZmFiMTgyNjUzNzZiMzA=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-07-24T01:44:59Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-07-24T01:58:57Z"}, "message": "rustc: Resolve struct names in struct literals", "tree": {"sha": "40a078e6a94d31f4502f4b1aa5409d5d2726b0bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40a078e6a94d31f4502f4b1aa5409d5d2726b0bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3cad86a05bde6dadbbf8c5405fab18265376b30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3cad86a05bde6dadbbf8c5405fab18265376b30", "html_url": "https://github.com/rust-lang/rust/commit/b3cad86a05bde6dadbbf8c5405fab18265376b30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3cad86a05bde6dadbbf8c5405fab18265376b30/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d581bdafee71cec2b4455d7d9c8d14611a1ecc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d581bdafee71cec2b4455d7d9c8d14611a1ecc8", "html_url": "https://github.com/rust-lang/rust/commit/0d581bdafee71cec2b4455d7d9c8d14611a1ecc8"}], "stats": {"total": 58, "additions": 49, "deletions": 9}, "files": [{"sha": "1853322724acd59996780cbb9aa2cab71c9954a1", "filename": "src/rustc/middle/resolve3.rs", "status": "modified", "additions": 49, "deletions": 9, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/b3cad86a05bde6dadbbf8c5405fab18265376b30/src%2Frustc%2Fmiddle%2Fresolve3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3cad86a05bde6dadbbf8c5405fab18265376b30/src%2Frustc%2Fmiddle%2Fresolve3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve3.rs?ref=b3cad86a05bde6dadbbf8c5405fab18265376b30", "patch": "@@ -14,15 +14,15 @@ import syntax::ast::{def_prim_ty, def_region, def_self, def_ty, def_ty_param};\n import syntax::ast::{def_upvar, def_use, def_variant, expr, expr_assign_op};\n import syntax::ast::{expr_binary, expr_cast, expr_field, expr_fn};\n import syntax::ast::{expr_fn_block, expr_index, expr_new, expr_path};\n-import syntax::ast::{expr_unary, fn_decl, foreign_item, foreign_item_fn};\n-import syntax::ast::{ident, trait_ref, impure_fn, instance_var, item};\n-import syntax::ast::{item_class, item_const, item_enum, item_fn, item_mac};\n-import syntax::ast::{item_foreign_mod, item_trait, item_impl, item_mod};\n-import syntax::ast::{item_ty, local, local_crate, method, node_id, pat};\n-import syntax::ast::{pat_enum, pat_ident, path, prim_ty, stmt_decl, ty,\n-                     pat_box, pat_uniq, pat_lit, pat_range, pat_rec,\n-                     pat_tup, pat_wild};\n-import syntax::ast::{ty_bool, ty_char, ty_f, ty_f32, ty_f64};\n+import syntax::ast::{expr_struct, expr_unary, fn_decl, foreign_item};\n+import syntax::ast::{foreign_item_fn, ident, trait_ref, impure_fn};\n+import syntax::ast::{instance_var, item, item_class, item_const, item_enum};\n+import syntax::ast::{item_fn, item_mac, item_foreign_mod, item_impl};\n+import syntax::ast::{item_mod, item_trait, item_ty, local, local_crate};\n+import syntax::ast::{method, node_id, pat, pat_enum, pat_ident};\n+import syntax::ast::{path, prim_ty, pat_box, pat_uniq, pat_lit, pat_range};\n+import syntax::ast::{pat_rec, pat_tup, pat_wild, stmt_decl};\n+import syntax::ast::{ty, ty_bool, ty_char, ty_f, ty_f32, ty_f64};\n import syntax::ast::{ty_float, ty_i, ty_i16, ty_i32, ty_i64, ty_i8, ty_int};\n import syntax::ast::{ty_param, ty_path, ty_str, ty_u, ty_u16, ty_u32, ty_u64};\n import syntax::ast::{ty_u8, ty_uint, variant, view_item, view_item_export};\n@@ -604,6 +604,7 @@ class Resolver {\n     let unused_import_lint_level: level;\n \n     let trait_info: hashmap<def_id,@hashmap<Atom,()>>;\n+    let structs: hashmap<def_id,()>;\n \n     // The number of imports that are currently unresolved.\n     let mut unresolved_imports: uint;\n@@ -657,6 +658,7 @@ class Resolver {\n         self.unused_import_lint_level = unused_import_lint_level(session);\n \n         self.trait_info = new_def_hash();\n+        self.structs = new_def_hash();\n \n         self.unresolved_imports = 0u;\n \n@@ -915,6 +917,9 @@ class Resolver {\n \n                 (*name_bindings).define_impl(impl_info);\n \n+                // Record the def ID of this struct.\n+                self.structs.insert(local_def(item.id), ());\n+\n                 visit_item(item, new_parent, visitor);\n             }\n \n@@ -4162,6 +4167,41 @@ class Resolver {\n                                       visitor);\n             }\n \n+            expr_struct(path, _) {\n+                // Resolve the path to the structure it goes to.\n+                //\n+                // XXX: We might want to support explicit type parameters in\n+                // the path, in which case this gets a little more\n+                // complicated:\n+                //\n+                // 1. Should we go through the ast_path_to_ty() path, which\n+                //    handles typedefs and the like?\n+                //\n+                // 2. If so, should programmers be able to write this?\n+                //\n+                //    class Foo<A> { ... }\n+                //    type Bar<A> = Foo<A>;\n+                //    let bar = Bar { ... } // no type parameters\n+\n+                alt self.resolve_path(path, TypeNS, false, visitor) {\n+                    some(definition @ def_ty(class_id))\n+                            if self.structs.contains_key(class_id) {\n+\n+                        self.record_def(expr.id, def_class(class_id));\n+                    }\n+                    _ {\n+                        self.session.span_err(path.span,\n+                                              #fmt(\"`%s` does not name a \\\n+                                                    structure\",\n+                                                   connect(path.idents.map\n+                                                           (|x| *x),\n+                                                           ~\"::\")));\n+                    }\n+                }\n+\n+                visit_expr(expr, (), visitor);\n+            }\n+\n             _ {\n                 visit_expr(expr, (), visitor);\n             }"}]}