{"sha": "d2aef58eb515bde7b96a1875fa61ecf786b9f236", "node_id": "C_kwDOAAsO6NoAKGQyYWVmNThlYjUxNWJkZTdiOTZhMTg3NWZhNjFlY2Y3ODZiOWYyMzY", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2023-02-19T13:47:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-19T13:47:56Z"}, "message": "Rollup merge of #108203 - compiler-errors:rpitit-fix-defaults-2, r=jackh726\n\nFix RPITITs in default trait methods (by assuming projection predicates in param-env)\n\nInstead of having special projection logic that allows us to turn `ProjectionTy(RPITIT, [Self#0, ...])` into `OpaqueTy(RPITIT, [Self#0, ...])`, we can instead augment the param-env of default trait method bodies to assume these as projection predicates. This should allow us to only project where we're allowed to!\n\nIn order to make this work without introducing a bunch of cycle errors, we additionally tweak the `OpaqueTypeExpander` used by `ParamEnv::with_reveal_all_normalized` to not normalize the right-hand side of projection predicates. This should be fine, because if we use the projection predicate to normalize some other projection type, we'll continue to normalize the opaque that it gets projected to.\n\nThis also makes it possible to support default trait methods with RPITITs in an associated-type based RPITIT lowering strategy without too much extra effort.\n\nFixes #107002\nAlternative to #108142", "tree": {"sha": "6410bc6271f89ab188e545d0a418fef1f4dbae8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6410bc6271f89ab188e545d0a418fef1f4dbae8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2aef58eb515bde7b96a1875fa61ecf786b9f236", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj8iiMCRBK7hj4Ov3rIwAAaowIAGFwsgGe8/H0fdfD+ZmwtxNl\nwBXI9mF1yIukydbN7fieiLlvCz2oys+D9/1wy30fPkyu4sr/U2LXRLLOXqAUBb5F\nGQIsUeb4M0hMEzh4CEkRem26N8wkYRXh0q8GVf3kseIGCM3IVA2jcI+vKzgnqYHN\n2HQ9ubaB2HolpuHr1wYXndfsyaPDM5h2Vi2/XQPgu7rJ63aGRrUK8R6VSSp+zQRl\nrFDOxCxCeu+z7IvVF0dL+SQaK00vw1TEQuJ8ydZHl94FOMcr+En3+OVZ0jNCxG6E\n/fHycBhtDToFqoAI/sr//D3cOL5QfSN8CymxPOGklMfR+NY9EU1Bx2+/lFsE/1o=\n=2J3Z\n-----END PGP SIGNATURE-----\n", "payload": "tree 6410bc6271f89ab188e545d0a418fef1f4dbae8b\nparent 243dcd0083c6cfb5f6ead85315bd16e5844e6c86\nparent 3e57b203918bc64e05c95849672ba7c23090c984\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1676814476 +0100\ncommitter GitHub <noreply@github.com> 1676814476 +0100\n\nRollup merge of #108203 - compiler-errors:rpitit-fix-defaults-2, r=jackh726\n\nFix RPITITs in default trait methods (by assuming projection predicates in param-env)\n\nInstead of having special projection logic that allows us to turn `ProjectionTy(RPITIT, [Self#0, ...])` into `OpaqueTy(RPITIT, [Self#0, ...])`, we can instead augment the param-env of default trait method bodies to assume these as projection predicates. This should allow us to only project where we're allowed to!\n\nIn order to make this work without introducing a bunch of cycle errors, we additionally tweak the `OpaqueTypeExpander` used by `ParamEnv::with_reveal_all_normalized` to not normalize the right-hand side of projection predicates. This should be fine, because if we use the projection predicate to normalize some other projection type, we'll continue to normalize the opaque that it gets projected to.\n\nThis also makes it possible to support default trait methods with RPITITs in an associated-type based RPITIT lowering strategy without too much extra effort.\n\nFixes #107002\nAlternative to #108142\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2aef58eb515bde7b96a1875fa61ecf786b9f236", "html_url": "https://github.com/rust-lang/rust/commit/d2aef58eb515bde7b96a1875fa61ecf786b9f236", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2aef58eb515bde7b96a1875fa61ecf786b9f236/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "243dcd0083c6cfb5f6ead85315bd16e5844e6c86", "url": "https://api.github.com/repos/rust-lang/rust/commits/243dcd0083c6cfb5f6ead85315bd16e5844e6c86", "html_url": "https://github.com/rust-lang/rust/commit/243dcd0083c6cfb5f6ead85315bd16e5844e6c86"}, {"sha": "3e57b203918bc64e05c95849672ba7c23090c984", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e57b203918bc64e05c95849672ba7c23090c984", "html_url": "https://github.com/rust-lang/rust/commit/3e57b203918bc64e05c95849672ba7c23090c984"}], "stats": {"total": 198, "additions": 161, "deletions": 37}, "files": [{"sha": "5743f086f89b4b31adc3e108c7ff9ea00f1bffee", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2aef58eb515bde7b96a1875fa61ecf786b9f236/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2aef58eb515bde7b96a1875fa61ecf786b9f236/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=d2aef58eb515bde7b96a1875fa61ecf786b9f236", "patch": "@@ -1599,7 +1599,7 @@ fn check_return_position_impl_trait_in_trait_bounds<'tcx>(\n     {\n         for arg in fn_output.walk() {\n             if let ty::GenericArgKind::Type(ty) = arg.unpack()\n-                && let ty::Alias(ty::Projection, proj) = ty.kind()\n+                && let ty::Alias(ty::Opaque, proj) = ty.kind()\n                 && tcx.def_kind(proj.def_id) == DefKind::ImplTraitPlaceholder\n                 && tcx.impl_trait_in_trait_parent(proj.def_id) == fn_def_id.to_def_id()\n             {"}, {"sha": "ca46cf29919f850b1d5f6997ef809df1646f03c6", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d2aef58eb515bde7b96a1875fa61ecf786b9f236/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2aef58eb515bde7b96a1875fa61ecf786b9f236/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=d2aef58eb515bde7b96a1875fa61ecf786b9f236", "patch": "@@ -4,7 +4,7 @@ use crate::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use crate::mir;\n use crate::ty::layout::IntegerExt;\n use crate::ty::{\n-    self, ir::TypeFolder, DefIdTree, FallibleTypeFolder, Ty, TyCtxt, TypeFoldable,\n+    self, ir::TypeFolder, DefIdTree, FallibleTypeFolder, ToPredicate, Ty, TyCtxt, TypeFoldable,\n     TypeSuperFoldable,\n };\n use crate::ty::{GenericArgKind, SubstsRef};\n@@ -865,6 +865,26 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for OpaqueTypeExpander<'tcx> {\n         }\n         t\n     }\n+\n+    fn fold_predicate(&mut self, p: ty::Predicate<'tcx>) -> ty::Predicate<'tcx> {\n+        if let ty::PredicateKind::Clause(clause) = p.kind().skip_binder()\n+            && let ty::Clause::Projection(projection_pred) = clause\n+        {\n+            p.kind()\n+                .rebind(ty::ProjectionPredicate {\n+                    projection_ty: projection_pred.projection_ty.fold_with(self),\n+                    // Don't fold the term on the RHS of the projection predicate.\n+                    // This is because for default trait methods with RPITITs, we\n+                    // install a `NormalizesTo(Projection(RPITIT) -> Opaque(RPITIT))`\n+                    // predicate, which would trivially cause a cycle when we do\n+                    // anything that requires `ParamEnv::with_reveal_all_normalized`.\n+                    term: projection_pred.term,\n+                })\n+                .to_predicate(self.tcx)\n+        } else {\n+            p.super_fold_with(self)\n+        }\n+    }\n }\n \n impl<'tcx> Ty<'tcx> {"}, {"sha": "1c66fb257ebb56acbc68b244ffd52a2bf114d1de", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 3, "deletions": 33, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d2aef58eb515bde7b96a1875fa61ecf786b9f236/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2aef58eb515bde7b96a1875fa61ecf786b9f236/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=d2aef58eb515bde7b96a1875fa61ecf786b9f236", "patch": "@@ -90,15 +90,7 @@ enum ProjectionCandidate<'tcx> {\n     /// From an \"impl\" (or a \"pseudo-impl\" returned by select)\n     Select(Selection<'tcx>),\n \n-    ImplTraitInTrait(ImplTraitInTraitCandidate<'tcx>),\n-}\n-\n-#[derive(PartialEq, Eq, Debug)]\n-enum ImplTraitInTraitCandidate<'tcx> {\n-    // The `impl Trait` from a trait function's default body\n-    Trait,\n-    // A concrete type provided from a trait's `impl Trait` from an impl\n-    Impl(ImplSourceUserDefinedData<'tcx, PredicateObligation<'tcx>>),\n+    ImplTraitInTrait(ImplSourceUserDefinedData<'tcx, PredicateObligation<'tcx>>),\n }\n \n enum ProjectionCandidateSet<'tcx> {\n@@ -1292,17 +1284,6 @@ fn assemble_candidate_for_impl_trait_in_trait<'cx, 'tcx>(\n     let tcx = selcx.tcx();\n     if tcx.def_kind(obligation.predicate.def_id) == DefKind::ImplTraitPlaceholder {\n         let trait_fn_def_id = tcx.impl_trait_in_trait_parent(obligation.predicate.def_id);\n-        // If we are trying to project an RPITIT with trait's default `Self` parameter,\n-        // then we must be within a default trait body.\n-        if obligation.predicate.self_ty()\n-            == ty::InternalSubsts::identity_for_item(tcx, obligation.predicate.def_id).type_at(0)\n-            && tcx.associated_item(trait_fn_def_id).defaultness(tcx).has_value()\n-        {\n-            candidate_set.push_candidate(ProjectionCandidate::ImplTraitInTrait(\n-                ImplTraitInTraitCandidate::Trait,\n-            ));\n-            return;\n-        }\n \n         let trait_def_id = tcx.parent(trait_fn_def_id);\n         let trait_substs =\n@@ -1313,9 +1294,7 @@ fn assemble_candidate_for_impl_trait_in_trait<'cx, 'tcx>(\n         let _ = selcx.infcx.commit_if_ok(|_| {\n             match selcx.select(&obligation.with(tcx, trait_predicate)) {\n                 Ok(Some(super::ImplSource::UserDefined(data))) => {\n-                    candidate_set.push_candidate(ProjectionCandidate::ImplTraitInTrait(\n-                        ImplTraitInTraitCandidate::Impl(data),\n-                    ));\n+                    candidate_set.push_candidate(ProjectionCandidate::ImplTraitInTrait(data));\n                     Ok(())\n                 }\n                 Ok(None) => {\n@@ -1777,18 +1756,9 @@ fn confirm_candidate<'cx, 'tcx>(\n         ProjectionCandidate::Select(impl_source) => {\n             confirm_select_candidate(selcx, obligation, impl_source)\n         }\n-        ProjectionCandidate::ImplTraitInTrait(ImplTraitInTraitCandidate::Impl(data)) => {\n+        ProjectionCandidate::ImplTraitInTrait(data) => {\n             confirm_impl_trait_in_trait_candidate(selcx, obligation, data)\n         }\n-        // If we're projecting an RPITIT for a default trait body, that's just\n-        // the same def-id, but as an opaque type (with regular RPIT semantics).\n-        ProjectionCandidate::ImplTraitInTrait(ImplTraitInTraitCandidate::Trait) => Progress {\n-            term: selcx\n-                .tcx()\n-                .mk_opaque(obligation.predicate.def_id, obligation.predicate.substs)\n-                .into(),\n-            obligations: vec![],\n-        },\n     };\n \n     // When checking for cycle during evaluation, we compare predicates with"}, {"sha": "f1af0073e4da95564b15b22585c0d63a45ec0d38", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 59, "deletions": 2, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/d2aef58eb515bde7b96a1875fa61ecf786b9f236/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2aef58eb515bde7b96a1875fa61ecf786b9f236/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=d2aef58eb515bde7b96a1875fa61ecf786b9f236", "patch": "@@ -1,8 +1,12 @@\n-use rustc_data_structures::fx::FxIndexSet;\n+use rustc_data_structures::fx::{FxHashSet, FxIndexSet};\n use rustc_hir as hir;\n+use rustc_hir::def::DefKind;\n use rustc_index::bit_set::BitSet;\n+#[cfg(not(bootstrap))]\n+use rustc_middle::ty::ir::TypeVisitable;\n use rustc_middle::ty::{\n-    self, Binder, EarlyBinder, Predicate, PredicateKind, ToPredicate, Ty, TyCtxt,\n+    self, ir::TypeVisitor, Binder, EarlyBinder, Predicate, PredicateKind, ToPredicate, Ty, TyCtxt,\n+    TypeSuperVisitable,\n };\n use rustc_session::config::TraitSolver;\n use rustc_span::def_id::{DefId, CRATE_DEF_ID};\n@@ -136,6 +140,19 @@ fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n         predicates.extend(environment);\n     }\n \n+    if tcx.def_kind(def_id) == DefKind::AssocFn\n+        && tcx.associated_item(def_id).container == ty::AssocItemContainer::TraitContainer\n+    {\n+        let sig = tcx.fn_sig(def_id).subst_identity();\n+        sig.visit_with(&mut ImplTraitInTraitFinder {\n+            tcx,\n+            fn_def_id: def_id,\n+            bound_vars: sig.bound_vars(),\n+            predicates: &mut predicates,\n+            seen: FxHashSet::default(),\n+        });\n+    }\n+\n     let local_did = def_id.as_local();\n     let hir_id = local_did.map(|def_id| tcx.hir().local_def_id_to_hir_id(def_id));\n \n@@ -222,6 +239,46 @@ fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n     traits::normalize_param_env_or_error(tcx, unnormalized_env, cause)\n }\n \n+/// Walk through a function type, gathering all RPITITs and installing a\n+/// `NormalizesTo(Projection(RPITIT) -> Opaque(RPITIT))` predicate into the\n+/// predicates list. This allows us to observe that an RPITIT projects to\n+/// its corresponding opaque within the body of a default-body trait method.\n+struct ImplTraitInTraitFinder<'a, 'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+    predicates: &'a mut Vec<Predicate<'tcx>>,\n+    fn_def_id: DefId,\n+    bound_vars: &'tcx ty::List<ty::BoundVariableKind>,\n+    seen: FxHashSet<DefId>,\n+}\n+\n+impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for ImplTraitInTraitFinder<'_, 'tcx> {\n+    fn visit_ty(&mut self, ty: Ty<'tcx>) -> std::ops::ControlFlow<Self::BreakTy> {\n+        if let ty::Alias(ty::Projection, alias_ty) = *ty.kind()\n+            && self.tcx.def_kind(alias_ty.def_id) == DefKind::ImplTraitPlaceholder\n+            && self.tcx.impl_trait_in_trait_parent(alias_ty.def_id) == self.fn_def_id\n+            && self.seen.insert(alias_ty.def_id)\n+        {\n+            self.predicates.push(\n+                ty::Binder::bind_with_vars(\n+                    ty::ProjectionPredicate {\n+                        projection_ty: alias_ty,\n+                        term: self.tcx.mk_alias(ty::Opaque, alias_ty).into(),\n+                    },\n+                    self.bound_vars,\n+                )\n+                .to_predicate(self.tcx),\n+            );\n+\n+            for bound in self.tcx.item_bounds(alias_ty.def_id).subst_iter(self.tcx, alias_ty.substs)\n+            {\n+                bound.visit_with(self);\n+            }\n+        }\n+\n+        ty.super_visit_with(self)\n+    }\n+}\n+\n /// Elaborate the environment.\n ///\n /// Collect a list of `Predicate`'s used for building the `ParamEnv`. Adds `TypeWellFormedFromEnv`'s"}, {"sha": "0fd1a2703db998ecd8d85544e483b5f658821194", "filename": "tests/ui/async-await/in-trait/async-default-fn-overridden.rs", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/d2aef58eb515bde7b96a1875fa61ecf786b9f236/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2aef58eb515bde7b96a1875fa61ecf786b9f236/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.rs?ref=d2aef58eb515bde7b96a1875fa61ecf786b9f236", "patch": "@@ -0,0 +1,66 @@\n+// run-pass\n+// edition:2021\n+\n+#![feature(async_fn_in_trait)]\n+//~^ WARN the feature `async_fn_in_trait` is incomplete and may not be safe to use\n+\n+use std::future::Future;\n+\n+trait AsyncTrait {\n+    async fn default_impl() {\n+        assert!(false);\n+    }\n+\n+    async fn call_default_impl() {\n+        Self::default_impl().await\n+    }\n+}\n+\n+struct AsyncType;\n+\n+impl AsyncTrait for AsyncType {\n+    async fn default_impl() {\n+        // :)\n+    }\n+}\n+\n+async fn async_main() {\n+    // Should not assert false\n+    AsyncType::call_default_impl().await;\n+}\n+\n+// ------------------------------------------------------------------------- //\n+// Implementation Details Below...\n+\n+use std::pin::Pin;\n+use std::task::*;\n+\n+pub fn noop_waker() -> Waker {\n+    let raw = RawWaker::new(std::ptr::null(), &NOOP_WAKER_VTABLE);\n+\n+    // SAFETY: the contracts for RawWaker and RawWakerVTable are upheld\n+    unsafe { Waker::from_raw(raw) }\n+}\n+\n+const NOOP_WAKER_VTABLE: RawWakerVTable = RawWakerVTable::new(noop_clone, noop, noop, noop);\n+\n+unsafe fn noop_clone(_p: *const ()) -> RawWaker {\n+    RawWaker::new(std::ptr::null(), &NOOP_WAKER_VTABLE)\n+}\n+\n+unsafe fn noop(_p: *const ()) {}\n+\n+fn main() {\n+    let mut fut = async_main();\n+\n+    // Poll loop, just to test the future...\n+    let waker = noop_waker();\n+    let ctx = &mut Context::from_waker(&waker);\n+\n+    loop {\n+        match unsafe { Pin::new_unchecked(&mut fut).poll(ctx) } {\n+            Poll::Pending => {}\n+            Poll::Ready(()) => break,\n+        }\n+    }\n+}"}, {"sha": "61a826258d09f0c351b2ee6775b6aac15cb4f424", "filename": "tests/ui/async-await/in-trait/async-default-fn-overridden.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d2aef58eb515bde7b96a1875fa61ecf786b9f236/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2aef58eb515bde7b96a1875fa61ecf786b9f236/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.stderr?ref=d2aef58eb515bde7b96a1875fa61ecf786b9f236", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/async-default-fn-overridden.rs:4:12\n+   |\n+LL | #![feature(async_fn_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+warning: 1 warning emitted\n+"}]}