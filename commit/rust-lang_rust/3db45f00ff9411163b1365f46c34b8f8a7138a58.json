{"sha": "3db45f00ff9411163b1365f46c34b8f8a7138a58", "node_id": "C_kwDOAAsO6NoAKDNkYjQ1ZjAwZmY5NDExMTYzYjEzNjVmNDZjMzRiOGY4YTcxMzhhNTg", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-11-06T13:11:46Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-11-06T13:17:10Z"}, "message": "add test for printing per-byte provenance", "tree": {"sha": "f4391ee5f4fd7c7c5175670a106e5679b9b229f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4391ee5f4fd7c7c5175670a106e5679b9b229f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3db45f00ff9411163b1365f46c34b8f8a7138a58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3db45f00ff9411163b1365f46c34b8f8a7138a58", "html_url": "https://github.com/rust-lang/rust/commit/3db45f00ff9411163b1365f46c34b8f8a7138a58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3db45f00ff9411163b1365f46c34b8f8a7138a58/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3a7ca1125e017ecf5e46685f8ee6feccceec0c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3a7ca1125e017ecf5e46685f8ee6feccceec0c7", "html_url": "https://github.com/rust-lang/rust/commit/c3a7ca1125e017ecf5e46685f8ee6feccceec0c7"}], "stats": {"total": 64, "additions": 64, "deletions": 0}, "files": [{"sha": "170bc6e1ed12b5a76ce98278401997b94a0ac4af", "filename": "src/tools/miri/tests/fail/uninit_buffer_with_provenance.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3db45f00ff9411163b1365f46c34b8f8a7138a58/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer_with_provenance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3db45f00ff9411163b1365f46c34b8f8a7138a58/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer_with_provenance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer_with_provenance.rs?ref=3db45f00ff9411163b1365f46c34b8f8a7138a58", "patch": "@@ -0,0 +1,32 @@\n+//@error-pattern: memory is uninitialized at [0x4..0x8]\n+//@normalize-stderr-test: \"a[0-9]+\" -> \"ALLOC\"\n+#![feature(strict_provenance)]\n+\n+// Test printing allocations that contain single-byte provenance.\n+\n+use std::alloc::{alloc, dealloc, Layout};\n+use std::mem::{self, MaybeUninit};\n+use std::slice::from_raw_parts;\n+\n+fn byte_with_provenance<T>(val: u8, prov: *const T) -> MaybeUninit<u8> {\n+    let ptr = prov.with_addr(val as usize);\n+    let bytes: [MaybeUninit<u8>; mem::size_of::<*const ()>()] = unsafe { mem::transmute(ptr) };\n+    let lsb = if cfg!(target_endian = \"little\") { 0 } else { bytes.len() - 1 };\n+    bytes[lsb]\n+}\n+\n+fn main() {\n+    let layout = Layout::from_size_align(16, 8).unwrap();\n+    unsafe {\n+        let ptr = alloc(layout);\n+        let ptr_raw = ptr.cast::<MaybeUninit<u8>>();\n+        *ptr_raw.add(0) = byte_with_provenance(0x42, &42u8);\n+        *ptr.add(1) = 0x12;\n+        *ptr.add(2) = 0x13;\n+        *ptr_raw.add(3) = byte_with_provenance(0x43, &0u8);\n+        let slice1 = from_raw_parts(ptr, 8);\n+        let slice2 = from_raw_parts(ptr.add(8), 8);\n+        drop(slice1.cmp(slice2));\n+        dealloc(ptr, layout);\n+    }\n+}"}, {"sha": "715d76aa1c2e75a6b4f8002cd9bd852c27798c51", "filename": "src/tools/miri/tests/fail/uninit_buffer_with_provenance.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3db45f00ff9411163b1365f46c34b8f8a7138a58/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer_with_provenance.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3db45f00ff9411163b1365f46c34b8f8a7138a58/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer_with_provenance.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funinit_buffer_with_provenance.stderr?ref=3db45f00ff9411163b1365f46c34b8f8a7138a58", "patch": "@@ -0,0 +1,32 @@\n+error: Undefined Behavior: reading memory at ALLOC[0x0..0x8], but memory is uninitialized at [0x4..0x8], and this operation requires initialized memory\n+  --> RUSTLIB/core/src/slice/cmp.rs:LL:CC\n+   |\n+LL |         let mut order = unsafe { memcmp(left.as_ptr(), right.as_ptr(), len) as isize };\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ reading memory at ALLOC[0x0..0x8], but memory is uninitialized at [0x4..0x8], and this operation requires initialized memory\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+   = note: BACKTRACE:\n+   = note: inside `<u8 as core::slice::cmp::SliceOrd>::compare` at RUSTLIB/core/src/slice/cmp.rs:LL:CC\n+   = note: inside `core::slice::cmp::<impl std::cmp::Ord for [u8]>::cmp` at RUSTLIB/core/src/slice/cmp.rs:LL:CC\n+note: inside `main` at $DIR/uninit_buffer_with_provenance.rs:LL:CC\n+  --> $DIR/uninit_buffer_with_provenance.rs:LL:CC\n+   |\n+LL |         drop(slice1.cmp(slice2));\n+   |              ^^^^^^^^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+Uninitialized memory occurred at ALLOC[0x4..0x8], in this allocation:\n+ALLOC (Rust heap, size: 16, align: 8) {\n+    \u257e42[ALLOC]<TAG> (1 ptr byte)\u257c 12 13 \u257e43[ALLOC]<TAG> (1 ptr byte)\u257c __ __ __ __ __ __ __ __ __ __ __ __ \u2502 \u2501..\u2501\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n+}\n+ALLOC (global (static or const), size: 1, align: 1) {\n+    2a                                              \u2502 *\n+}\n+ALLOC (global (static or const), size: 1, align: 1) {\n+    00                                              \u2502 .\n+}\n+\n+error: aborting due to previous error\n+"}]}