{"sha": "f1ad425199b0d89dab275a8c8f6f29a73d316f70", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxYWQ0MjUxOTliMGQ4OWRhYjI3NWE4YzhmNmYyOWE3M2QzMTZmNzA=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2014-07-10T22:41:11Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2014-07-11T17:32:41Z"}, "message": "use side table to store exported macros\n\nPer discussion with @sfackler, refactored the expander to\nchange the way that exported macros are collected. Specifically,\na crate now contains a side table of spans that exported macros\ngo into.\n\nThis has two benefits. First, the encoder doesn't need to scan through\nthe expanded crate in order to discover exported macros. Second, the\nexpander can drop all expanded macros from the crate, with the pleasant\nresult that a fully expanded crate contains no macro invocations (which\ninclude macro definitions).", "tree": {"sha": "d356432d60ae40b95c10f708567df5ad422b7605", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d356432d60ae40b95c10f708567df5ad422b7605"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1ad425199b0d89dab275a8c8f6f29a73d316f70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1ad425199b0d89dab275a8c8f6f29a73d316f70", "html_url": "https://github.com/rust-lang/rust/commit/f1ad425199b0d89dab275a8c8f6f29a73d316f70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1ad425199b0d89dab275a8c8f6f29a73d316f70/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50d9965c258276eadd8a87de20d232451aabbf83", "url": "https://api.github.com/repos/rust-lang/rust/commits/50d9965c258276eadd8a87de20d232451aabbf83", "html_url": "https://github.com/rust-lang/rust/commit/50d9965c258276eadd8a87de20d232451aabbf83"}], "stats": {"total": 69, "additions": 34, "deletions": 35}, "files": [{"sha": "946aa62f91cfd23f1fa9d39bdb91005e2abf986b", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f1ad425199b0d89dab275a8c8f6f29a73d316f70/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ad425199b0d89dab275a8c8f6f29a73d316f70/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=f1ad425199b0d89dab275a8c8f6f29a73d316f70", "patch": "@@ -28,7 +28,8 @@ use syntax::{ast, codemap};\n use std::os;\n use std::cell::{Cell, RefCell};\n \n-\n+// Represents the data associated with a compilation\n+// session for a single crate.\n pub struct Session {\n     pub targ_cfg: config::Config,\n     pub opts: config::Options,"}, {"sha": "7c4eda6dd71ae342f9104e356caafedb4de5fd13", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 16, "deletions": 28, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/f1ad425199b0d89dab275a8c8f6f29a73d316f70/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ad425199b0d89dab275a8c8f6f29a73d316f70/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=f1ad425199b0d89dab275a8c8f6f29a73d316f70", "patch": "@@ -1584,37 +1584,25 @@ fn encode_plugin_registrar_fn(ecx: &EncodeContext, ebml_w: &mut Encoder) {\n     }\n }\n \n-struct MacroDefVisitor<'a, 'b, 'c> {\n-    ecx: &'a EncodeContext<'b>,\n-    ebml_w: &'a mut Encoder<'c>\n-}\n-\n-impl<'a, 'b, 'c> Visitor<()> for MacroDefVisitor<'a, 'b, 'c> {\n-    fn visit_item(&mut self, item: &Item, _: ()) {\n-        match item.node {\n-            ItemMac(..) => {\n-                let def = self.ecx.tcx.sess.codemap().span_to_snippet(item.span)\n-                    .expect(\"Unable to find source for macro\");\n-                self.ebml_w.start_tag(tag_macro_def);\n-                self.ebml_w.wr_str(def.as_slice());\n-                self.ebml_w.end_tag();\n-            }\n-            _ => {}\n-        }\n-        visit::walk_item(self, item, ());\n-    }\n+/// Given a span, write the text of that span into the output stream\n+/// as an exported macro\n+fn encode_macro_def(ecx: &EncodeContext,\n+                    ebml_w: &mut Encoder,\n+                    span: &syntax::codemap::Span) {\n+    let def = ecx.tcx.sess.codemap().span_to_snippet(*span)\n+        .expect(\"Unable to find source for macro\");\n+    ebml_w.start_tag(tag_macro_def);\n+    ebml_w.wr_str(def.as_slice());\n+    ebml_w.end_tag();\n }\n \n-fn encode_macro_defs<'a>(ecx: &'a EncodeContext,\n-                         krate: &Crate,\n-                         ebml_w: &'a mut Encoder) {\n+/// Serialize the text of the exported macros\n+fn encode_macro_defs(ecx: &EncodeContext,\n+                     krate: &Crate,\n+                     ebml_w: &mut Encoder) {\n     ebml_w.start_tag(tag_exported_macros);\n-    {\n-        let mut visitor = MacroDefVisitor {\n-            ecx: ecx,\n-            ebml_w: ebml_w,\n-        };\n-        visit::walk_crate(&mut visitor, krate, ());\n+    for span in krate.exported_macros.iter() {\n+        encode_macro_def(ecx, ebml_w, span);\n     }\n     ebml_w.end_tag();\n }"}, {"sha": "4a48d3f702820df3a23414ad1d5fea7a8f0a3c91", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1ad425199b0d89dab275a8c8f6f29a73d316f70/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ad425199b0d89dab275a8c8f6f29a73d316f70/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=f1ad425199b0d89dab275a8c8f6f29a73d316f70", "patch": "@@ -249,6 +249,7 @@ pub struct Crate {\n     pub attrs: Vec<Attribute>,\n     pub config: CrateConfig,\n     pub span: Span,\n+    pub exported_macros: Vec<Span>\n }\n \n pub type MetaItem = Spanned<MetaItem_>;\n@@ -1245,6 +1246,7 @@ mod test {\n                 hi: BytePos(20),\n                 expn_info: None,\n             },\n+            exported_macros: Vec::new(),\n         };\n         // doesn't matter which encoder we use....\n         let _f = &e as &serialize::Encodable<json::Encoder, io::IoError>;"}, {"sha": "dcb69ae8f7e64df0c08bf8f5fa49293c6aa6240e", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f1ad425199b0d89dab275a8c8f6f29a73d316f70/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ad425199b0d89dab275a8c8f6f29a73d316f70/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=f1ad425199b0d89dab275a8c8f6f29a73d316f70", "patch": "@@ -410,6 +410,7 @@ pub struct ExtCtxt<'a> {\n \n     pub mod_path: Vec<ast::Ident> ,\n     pub trace_mac: bool,\n+    pub exported_macros: Vec<codemap::Span>\n }\n \n impl<'a> ExtCtxt<'a> {\n@@ -421,7 +422,8 @@ impl<'a> ExtCtxt<'a> {\n             backtrace: None,\n             mod_path: Vec::new(),\n             ecfg: ecfg,\n-            trace_mac: false\n+            trace_mac: false,\n+            exported_macros: Vec::new(),\n         }\n     }\n \n@@ -539,6 +541,9 @@ impl<'a> ExtCtxt<'a> {\n     pub fn name_of(&self, st: &str) -> ast::Name {\n         token::intern(st)\n     }\n+    pub fn push_exported_macro(&mut self, span: codemap::Span) {\n+        self.exported_macros.push(span);\n+    }\n }\n \n /// Extract a string literal from the macro expanded version of `expr`,"}, {"sha": "e8a78e85d893be37e86b15ede03447f39db18a49", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f1ad425199b0d89dab275a8c8f6f29a73d316f70/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ad425199b0d89dab275a8c8f6f29a73d316f70/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=f1ad425199b0d89dab275a8c8f6f29a73d316f70", "patch": "@@ -518,10 +518,9 @@ fn expand_item_mac(it: Gc<ast::Item>, fld: &mut MacroExpander)\n             // create issue to recommend refactoring here?\n             fld.extsbox.insert(intern(name.as_slice()), ext);\n             if attr::contains_name(it.attrs.as_slice(), \"macro_export\") {\n-                SmallVector::one(it)\n-            } else {\n-                SmallVector::zero()\n+                fld.cx.push_exported_macro(it.span);\n             }\n+            SmallVector::zero()\n         }\n         None => {\n             match expanded.make_items() {\n@@ -1039,6 +1038,7 @@ pub struct ExportedMacros {\n \n pub fn expand_crate(parse_sess: &parse::ParseSess,\n                     cfg: ExpansionConfig,\n+                    // these are the macros being imported to this crate:\n                     macros: Vec<ExportedMacros>,\n                     user_exts: Vec<NamedSyntaxExtension>,\n                     c: Crate) -> Crate {\n@@ -1066,7 +1066,8 @@ pub fn expand_crate(parse_sess: &parse::ParseSess,\n         expander.extsbox.insert(name, extension);\n     }\n \n-    let ret = expander.fold_crate(c);\n+    let mut ret = expander.fold_crate(c);\n+    ret.exported_macros = expander.cx.exported_macros.clone();\n     parse_sess.span_diagnostic.handler().abort_if_errors();\n     return ret;\n }"}, {"sha": "f7cb1ae1934f2437c19b7fff695a7d47a3dcf91d", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ad425199b0d89dab275a8c8f6f29a73d316f70/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ad425199b0d89dab275a8c8f6f29a73d316f70/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=f1ad425199b0d89dab275a8c8f6f29a73d316f70", "patch": "@@ -713,6 +713,7 @@ pub fn noop_fold_crate<T: Folder>(c: Crate, folder: &mut T) -> Crate {\n         attrs: c.attrs.iter().map(|x| folder.fold_attribute(*x)).collect(),\n         config: c.config.iter().map(|x| fold_meta_item_(*x, folder)).collect(),\n         span: folder.new_span(c.span),\n+        exported_macros: c.exported_macros.iter().map(|sp| folder.new_span(*sp)).collect(),\n     }\n }\n "}, {"sha": "84db2bc5a2217cf6ba00c09ce2529ab355070d3b", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f1ad425199b0d89dab275a8c8f6f29a73d316f70/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ad425199b0d89dab275a8c8f6f29a73d316f70/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=f1ad425199b0d89dab275a8c8f6f29a73d316f70", "patch": "@@ -5386,7 +5386,8 @@ impl<'a> Parser<'a> {\n             module: m,\n             attrs: inner,\n             config: self.cfg.clone(),\n-            span: mk_sp(lo, self.span.lo)\n+            span: mk_sp(lo, self.span.lo),\n+            exported_macros: Vec::new(),\n         }\n     }\n "}]}