{"sha": "bcdacfe50182089772f6e454ecb0904392dfcc21", "node_id": "C_kwDOAAsO6NoAKGJjZGFjZmU1MDE4MjA4OTc3MmY2ZTQ1NGVjYjA5MDQzOTJkZmNjMjE", "commit": {"author": {"name": "Chayim Refael Friedman", "email": "chayimfr@gmail.com", "date": "2022-08-31T01:24:36Z"}, "committer": {"name": "Chayim Refael Friedman", "email": "chayimfr@gmail.com", "date": "2022-08-31T01:24:36Z"}, "message": "Support `?` and `.await` in \"Replace turbofish with explicit type\"\n\nNow that we use type information this is easy.", "tree": {"sha": "caf1355acf651fc659eeee0ee3b869be8d6b9302", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/caf1355acf651fc659eeee0ee3b869be8d6b9302"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcdacfe50182089772f6e454ecb0904392dfcc21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcdacfe50182089772f6e454ecb0904392dfcc21", "html_url": "https://github.com/rust-lang/rust/commit/bcdacfe50182089772f6e454ecb0904392dfcc21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcdacfe50182089772f6e454ecb0904392dfcc21/comments", "author": {"login": "ChayimFriedman2", "id": 24700207, "node_id": "MDQ6VXNlcjI0NzAwMjA3", "avatar_url": "https://avatars.githubusercontent.com/u/24700207?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChayimFriedman2", "html_url": "https://github.com/ChayimFriedman2", "followers_url": "https://api.github.com/users/ChayimFriedman2/followers", "following_url": "https://api.github.com/users/ChayimFriedman2/following{/other_user}", "gists_url": "https://api.github.com/users/ChayimFriedman2/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChayimFriedman2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChayimFriedman2/subscriptions", "organizations_url": "https://api.github.com/users/ChayimFriedman2/orgs", "repos_url": "https://api.github.com/users/ChayimFriedman2/repos", "events_url": "https://api.github.com/users/ChayimFriedman2/events{/privacy}", "received_events_url": "https://api.github.com/users/ChayimFriedman2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ChayimFriedman2", "id": 24700207, "node_id": "MDQ6VXNlcjI0NzAwMjA3", "avatar_url": "https://avatars.githubusercontent.com/u/24700207?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChayimFriedman2", "html_url": "https://github.com/ChayimFriedman2", "followers_url": "https://api.github.com/users/ChayimFriedman2/followers", "following_url": "https://api.github.com/users/ChayimFriedman2/following{/other_user}", "gists_url": "https://api.github.com/users/ChayimFriedman2/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChayimFriedman2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChayimFriedman2/subscriptions", "organizations_url": "https://api.github.com/users/ChayimFriedman2/orgs", "repos_url": "https://api.github.com/users/ChayimFriedman2/repos", "events_url": "https://api.github.com/users/ChayimFriedman2/events{/privacy}", "received_events_url": "https://api.github.com/users/ChayimFriedman2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5e979906b86472ec63846b5ab03b59f122fedec", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5e979906b86472ec63846b5ab03b59f122fedec", "html_url": "https://github.com/rust-lang/rust/commit/e5e979906b86472ec63846b5ab03b59f122fedec"}], "stats": {"total": 66, "additions": 50, "deletions": 16}, "files": [{"sha": "521447c26dfbed01d20ac10592fd127a286f16ec", "filename": "crates/ide-assists/src/handlers/replace_turbofish_with_explicit_type.rs", "status": "modified", "additions": 50, "deletions": 16, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/bcdacfe50182089772f6e454ecb0904392dfcc21/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_turbofish_with_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcdacfe50182089772f6e454ecb0904392dfcc21/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_turbofish_with_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_turbofish_with_explicit_type.rs?ref=bcdacfe50182089772f6e454ecb0904392dfcc21", "patch": "@@ -1,6 +1,6 @@\n use hir::HirDisplay;\n use syntax::{\n-    ast::{Expr, GenericArg},\n+    ast::{Expr, GenericArg, GenericArgList},\n     ast::{LetStmt, Type::InferType},\n     AstNode, TextRange,\n };\n@@ -35,21 +35,7 @@ pub(crate) fn replace_turbofish_with_explicit_type(\n \n     let initializer = let_stmt.initializer()?;\n \n-    let generic_args = match &initializer {\n-        Expr::MethodCallExpr(ce) => ce.generic_arg_list()?,\n-        Expr::CallExpr(ce) => {\n-            if let Expr::PathExpr(pe) = ce.expr()? {\n-                pe.path()?.segment()?.generic_arg_list()?\n-            } else {\n-                cov_mark::hit!(not_applicable_if_non_path_function_call);\n-                return None;\n-            }\n-        }\n-        _ => {\n-            cov_mark::hit!(not_applicable_if_non_function_call_initializer);\n-            return None;\n-        }\n-    };\n+    let generic_args = generic_arg_list(&initializer)?;\n \n     // Find range of ::<_>\n     let colon2 = generic_args.coloncolon_token()?;\n@@ -117,6 +103,26 @@ pub(crate) fn replace_turbofish_with_explicit_type(\n     None\n }\n \n+fn generic_arg_list(expr: &Expr) -> Option<GenericArgList> {\n+    match expr {\n+        Expr::MethodCallExpr(expr) => expr.generic_arg_list(),\n+        Expr::CallExpr(expr) => {\n+            if let Expr::PathExpr(pe) = expr.expr()? {\n+                pe.path()?.segment()?.generic_arg_list()\n+            } else {\n+                cov_mark::hit!(not_applicable_if_non_path_function_call);\n+                return None;\n+            }\n+        }\n+        Expr::AwaitExpr(expr) => generic_arg_list(&expr.expr()?),\n+        Expr::TryExpr(expr) => generic_arg_list(&expr.expr()?),\n+        _ => {\n+            cov_mark::hit!(not_applicable_if_non_function_call_initializer);\n+            None\n+        }\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use super::*;\n@@ -325,6 +331,34 @@ fn make<T>() -> HasDefault<T> {}\n fn main() {\n     let a: HasDefault<bool> = make();\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn replaces_turbofish_try_await() {\n+        check_assist(\n+            replace_turbofish_with_explicit_type,\n+            r#\"\n+//- minicore: option, future\n+struct Fut<T>(T);\n+impl<T> core::future::Future for Fut<T> {\n+    type Output = Option<T>;\n+}\n+fn make<T>() -> Fut<T> {}\n+fn main() {\n+    let a = make$0::<bool>().await?;\n+}\n+\"#,\n+            r#\"\n+struct Fut<T>(T);\n+impl<T> core::future::Future for Fut<T> {\n+    type Output = Option<T>;\n+}\n+fn make<T>() -> Fut<T> {}\n+fn main() {\n+    let a: bool = make().await?;\n+}\n \"#,\n         );\n     }"}]}