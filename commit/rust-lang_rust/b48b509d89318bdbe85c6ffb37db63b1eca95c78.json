{"sha": "b48b509d89318bdbe85c6ffb37db63b1eca95c78", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0OGI1MDlkODkzMThiZGJlODVjNmZmYjM3ZGI2M2IxZWNhOTVjNzg=", "commit": {"author": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2016-05-02T07:27:21Z"}, "committer": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2016-05-04T07:10:54Z"}, "message": "typeck: show a note about tuple indexing for erroneous tup[i]\n\nFixes: #27842", "tree": {"sha": "92ee82bea87fb834bf9bc594047af25db6dea9b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92ee82bea87fb834bf9bc594047af25db6dea9b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b48b509d89318bdbe85c6ffb37db63b1eca95c78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b48b509d89318bdbe85c6ffb37db63b1eca95c78", "html_url": "https://github.com/rust-lang/rust/commit/b48b509d89318bdbe85c6ffb37db63b1eca95c78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b48b509d89318bdbe85c6ffb37db63b1eca95c78/comments", "author": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3157691f963a86776cb7e6a7842f566032890aba", "url": "https://api.github.com/repos/rust-lang/rust/commits/3157691f963a86776cb7e6a7842f566032890aba", "html_url": "https://github.com/rust-lang/rust/commit/3157691f963a86776cb7e6a7842f566032890aba"}], "stats": {"total": 49, "additions": 48, "deletions": 1}, "files": [{"sha": "1b35576a0ae3b6ce6f68eda766984261326d4572", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b48b509d89318bdbe85c6ffb37db63b1eca95c78/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48b509d89318bdbe85c6ffb37db63b1eca95c78/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=b48b509d89318bdbe85c6ffb37db63b1eca95c78", "patch": "@@ -3687,14 +3687,37 @@ fn check_expr_with_expectation_and_lvalue_pref<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                   }\n                   None => {\n                       check_expr_has_type(fcx, &idx, fcx.tcx().types.err);\n-                      fcx.type_error_message(\n+                      let mut err = fcx.type_error_struct(\n                           expr.span,\n                           |actual| {\n                               format!(\"cannot index a value of type `{}`\",\n                                       actual)\n                           },\n                           base_t,\n                           None);\n+                      // Try to give some advice about indexing tuples.\n+                      if let ty::TyTuple(_) = base_t.sty {\n+                          let mut needs_note = true;\n+                          // If the index is an integer, we can show the actual\n+                          // fixed expression:\n+                          if let hir::ExprLit(ref lit) = idx.node {\n+                              if let ast::LitKind::Int(i, ast::LitIntType::Unsuffixed) = lit.node {\n+                                  let snip = fcx.tcx().sess.codemap().span_to_snippet(base.span);\n+                                  if let Ok(snip) = snip {\n+                                      err.span_suggestion(expr.span,\n+                                                          \"to access tuple elements, use tuple \\\n+                                                           indexing syntax as shown\",\n+                                                          format!(\"{}.{}\", snip, i));\n+                                      needs_note = false;\n+                                  }\n+                              }\n+                          }\n+                          if needs_note {\n+                              err.help(\"to access tuple elements, use tuple indexing \\\n+                                        syntax (e.g. `tuple.0`)\");\n+                          }\n+                      }\n+                      err.emit();\n                       fcx.write_ty(id, fcx.tcx().types.err);\n                   }\n               }"}, {"sha": "28050a2ee9083c9f53dd77ceff59ffb8fd46a69f", "filename": "src/test/compile-fail/issue-27842.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b48b509d89318bdbe85c6ffb37db63b1eca95c78/src%2Ftest%2Fcompile-fail%2Fissue-27842.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48b509d89318bdbe85c6ffb37db63b1eca95c78/src%2Ftest%2Fcompile-fail%2Fissue-27842.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-27842.rs?ref=b48b509d89318bdbe85c6ffb37db63b1eca95c78", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let tup = (0, 1, 2);\n+    // the case where we show a suggestion\n+    let _ = tup[0];\n+    //~^ ERROR cannot index a value of type\n+    //~| HELP to access tuple elements, use tuple indexing syntax as shown\n+    //~| SUGGESTION let _ = tup.0\n+\n+    // the case where we show just a general hint\n+    let i = 0_usize;\n+    let _ = tup[i];\n+    //~^ ERROR cannot index a value of type\n+    //~| HELP to access tuple elements, use tuple indexing syntax (e.g. `tuple.0`)\n+}"}]}