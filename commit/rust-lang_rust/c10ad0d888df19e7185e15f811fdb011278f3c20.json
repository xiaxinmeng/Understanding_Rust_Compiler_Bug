{"sha": "c10ad0d888df19e7185e15f811fdb011278f3c20", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxMGFkMGQ4ODhkZjE5ZTcxODVlMTVmODExZmRiMDExMjc4ZjNjMjA=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-08-06T20:12:21Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-09-08T14:39:12Z"}, "message": "review", "tree": {"sha": "3d5c5c6091add7535e52fadd5d23fd1e9181c200", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d5c5c6091add7535e52fadd5d23fd1e9181c200"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c10ad0d888df19e7185e15f811fdb011278f3c20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c10ad0d888df19e7185e15f811fdb011278f3c20", "html_url": "https://github.com/rust-lang/rust/commit/c10ad0d888df19e7185e15f811fdb011278f3c20", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c10ad0d888df19e7185e15f811fdb011278f3c20/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef6100e846f215b92f0d3b951557ed2528000f61", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef6100e846f215b92f0d3b951557ed2528000f61", "html_url": "https://github.com/rust-lang/rust/commit/ef6100e846f215b92f0d3b951557ed2528000f61"}], "stats": {"total": 28, "additions": 15, "deletions": 13}, "files": [{"sha": "3c041bbc0aedd05a20a793bd475de498011ed793", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c10ad0d888df19e7185e15f811fdb011278f3c20/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10ad0d888df19e7185e15f811fdb011278f3c20/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=c10ad0d888df19e7185e15f811fdb011278f3c20", "patch": "@@ -197,6 +197,10 @@ pub struct Body<'tcx> {\n     ///     let _ = [0; std::mem::size_of::<*mut T>()];\n     /// }\n     /// ```\n+    ///\n+    /// **WARNING**: Do not change this flags after the MIR was originally created, even if an optimization\n+    /// removed the last mention of all generic params. We do not want to rely on optimizations and\n+    /// potentially allow things like `[u8; std::mem::size_of::<T>() * 0]` due to this.\n     pub is_polymorphic: bool,\n \n     predecessor_cache: PredecessorCache,"}, {"sha": "4818022bf6202a5280d310c5a973d7977785f84b", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c10ad0d888df19e7185e15f811fdb011278f3c20/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10ad0d888df19e7185e15f811fdb011278f3c20/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=c10ad0d888df19e7185e15f811fdb011278f3c20", "patch": "@@ -459,17 +459,16 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n                 }\n \n                 ty::PredicateAtom::ConstEvaluatable(def_id, substs) => {\n-                    const_evaluatable::is_const_evaluatable(\n+                    match const_evaluatable::is_const_evaluatable(\n                         self.selcx.infcx(),\n                         def_id,\n                         substs,\n                         obligation.param_env,\n                         obligation.cause.span,\n-                    )\n-                    .map_or_else(\n-                        |e| ProcessResult::Error(CodeSelectionError(ConstEvalFailure(e))),\n-                        |()| ProcessResult::Changed(vec![]),\n-                    )\n+                    ) {\n+                        Ok(()) => ProcessResult::Changed(vec![]),\n+                        Err(e) => ProcessResult::Error(CodeSelectionError(ConstEvalFailure(e))),\n+                    }\n                 }\n \n                 ty::PredicateAtom::ConstEquate(c1, c2) => {"}, {"sha": "7e8e2baa8a13d9d67a55f34c38f5890b2563aa2f", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c10ad0d888df19e7185e15f811fdb011278f3c20/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10ad0d888df19e7185e15f811fdb011278f3c20/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=c10ad0d888df19e7185e15f811fdb011278f3c20", "patch": "@@ -543,18 +543,17 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             }\n \n             ty::PredicateAtom::ConstEvaluatable(def_id, substs) => {\n-                const_evaluatable::is_const_evaluatable(\n+                match const_evaluatable::is_const_evaluatable(\n                     self.infcx,\n                     def_id,\n                     substs,\n                     obligation.param_env,\n                     obligation.cause.span,\n-                )\n-                .map(|()| EvaluatedToOk)\n-                .or_else(|e| match e {\n-                    ErrorHandled::TooGeneric => Ok(EvaluatedToAmbig),\n-                    _ => Ok(EvaluatedToErr),\n-                })\n+                ) {\n+                    Ok(()) => Ok(EvaluatedToOk),\n+                    Err(ErrorHandled::TooGeneric) => Ok(EvaluatedToAmbig),\n+                    Err(_) => Ok(EvaluatedToErr),\n+                }\n             }\n \n             ty::PredicateAtom::ConstEquate(c1, c2) => {"}]}