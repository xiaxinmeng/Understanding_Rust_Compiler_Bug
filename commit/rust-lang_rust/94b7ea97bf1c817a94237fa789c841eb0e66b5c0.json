{"sha": "94b7ea97bf1c817a94237fa789c841eb0e66b5c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0YjdlYTk3YmYxYzgxN2E5NDIzN2ZhNzg5Yzg0MWViMGU2NmI1YzA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-22T18:13:51Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-22T18:33:11Z"}, "message": "resolve: more declarative fresh_binding", "tree": {"sha": "f183811300ac62b21394544f07a5c74b5c0a3fbc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f183811300ac62b21394544f07a5c74b5c0a3fbc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94b7ea97bf1c817a94237fa789c841eb0e66b5c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94b7ea97bf1c817a94237fa789c841eb0e66b5c0", "html_url": "https://github.com/rust-lang/rust/commit/94b7ea97bf1c817a94237fa789c841eb0e66b5c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94b7ea97bf1c817a94237fa789c841eb0e66b5c0/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5", "html_url": "https://github.com/rust-lang/rust/commit/083b5a0a1bb3b2ee0873697ebf37e88d85faa3e5"}], "stats": {"total": 22, "additions": 7, "deletions": 15}, "files": [{"sha": "666c482c680462bb6ff213a0b0658004c8919656", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/94b7ea97bf1c817a94237fa789c841eb0e66b5c0/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94b7ea97bf1c817a94237fa789c841eb0e66b5c0/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=94b7ea97bf1c817a94237fa789c841eb0e66b5c0", "patch": "@@ -69,6 +69,7 @@ impl PatternSource {\n /// Denotes whether the context for the set of already bound bindings is a `Product`\n /// or `Or` context. This is used in e.g., `fresh_binding` and `resolve_pattern_inner`.\n /// See those functions for more information.\n+#[derive(PartialEq)]\n enum PatBoundCtx {\n     /// A product pattern context, e.g., `Variant(a, b)`.\n     Product,\n@@ -1417,21 +1418,12 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n         // later passes make about or-patterns.)\n         let ident = ident.modern_and_legacy();\n \n-        // Walk outwards the stack of products / or-patterns and\n-        // find out if the identifier has been bound in any of these.\n-        let mut already_bound_and = false;\n-        let mut already_bound_or = false;\n-        for (is_sum, set) in bindings.iter_mut().rev() {\n-            match (is_sum, set.get(&ident).cloned()) {\n-                // Already bound in a product pattern, e.g. `(a, a)` which is not allowed.\n-                (PatBoundCtx::Product, Some(..)) => already_bound_and = true,\n-                // Already bound in an or-pattern, e.g. `V1(a) | V2(a)`.\n-                // This is *required* for consistency which is checked later.\n-                (PatBoundCtx::Or, Some(..)) => already_bound_or = true,\n-                // Not already bound here.\n-                _ => {}\n-            }\n-        }\n+        let mut bound_iter = bindings.iter().filter(|(_, set)| set.contains(&ident));\n+        // Already bound in a product pattern? e.g. `(a, a)` which is not allowed.\n+        let already_bound_and = bound_iter.clone().any(|(ctx, _)| *ctx == PatBoundCtx::Product);\n+        // Already bound in an or-pattern? e.g. `V1(a) | V2(a)`.\n+        // This is *required* for consistency which is checked later.\n+        let already_bound_or = bound_iter.any(|(ctx, _)| *ctx == PatBoundCtx::Or);\n \n         if already_bound_and {\n             // Overlap in a product pattern somewhere; report an error."}]}