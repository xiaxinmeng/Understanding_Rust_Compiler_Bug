{"sha": "a912664113394fdf3a7c26a93504ebfe54a66e5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5MTI2NjQxMTMzOTRmZGYzYTdjMjZhOTM1MDRlYmZlNTRhNjZlNWM=", "commit": {"author": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2019-04-23T21:39:26Z"}, "committer": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2019-04-24T04:03:53Z"}, "message": "report fatal errors during doctest parsing", "tree": {"sha": "d98aceb3cf678f74b4a8f875d02247fe35c0070d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d98aceb3cf678f74b4a8f875d02247fe35c0070d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a912664113394fdf3a7c26a93504ebfe54a66e5c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFKBAABCAA0FiEELriChyEaiMu0yCg7viIhAz7bw3QFAly/4DEWHGFydXNzZWxs\nMTIzQGdtYWlsLmNvbQAKCRC+IiEDPtvDdDiyCACJYXcPz1K1kcEVEkmhZa4Hw2+Y\nMN6CoT2LhpuRsO0hEqJ255hJgOdCUPPpJYMmazmeGih7qK/2yvvYAzeX19EGwSoc\ncn2XXqTZ7BZJGK9utq8ZjaMtIZ36oMcf8PFEjFLpGu9+59Swm1p9LmM3vTRQanNX\nP7jG5yL+oBldeMroxqtQONWE+hgxUkWytmgNqrfH/OsDJW55DtSeTUIbkJ+Fa5Up\nalwcT2HI/W3lRLvN54ne2N7n/pC3nICW3KRtc9FVvWQ3rywyXZrRFDrLynh6WiCL\nD59UyUsdiYuh/sezHikYVfHRxieLve6xzNb8fAdKYntQzgMrjSWYz34RmMqT\n=pZRe\n-----END PGP SIGNATURE-----", "payload": "tree d98aceb3cf678f74b4a8f875d02247fe35c0070d\nparent a850a426491e14186af2250549bf41256b5938d2\nauthor Andy Russell <arussell123@gmail.com> 1556055566 -0400\ncommitter Andy Russell <arussell123@gmail.com> 1556078633 -0400\n\nreport fatal errors during doctest parsing\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a912664113394fdf3a7c26a93504ebfe54a66e5c", "html_url": "https://github.com/rust-lang/rust/commit/a912664113394fdf3a7c26a93504ebfe54a66e5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a912664113394fdf3a7c26a93504ebfe54a66e5c/comments", "author": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a850a426491e14186af2250549bf41256b5938d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a850a426491e14186af2250549bf41256b5938d2", "html_url": "https://github.com/rust-lang/rust/commit/a850a426491e14186af2250549bf41256b5938d2"}], "stats": {"total": 61, "additions": 55, "deletions": 6}, "files": [{"sha": "8064c3ebb8a5290d402f85b36cf12772a6aa3397", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a912664113394fdf3a7c26a93504ebfe54a66e5c/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a912664113394fdf3a7c26a93504ebfe54a66e5c/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=a912664113394fdf3a7c26a93504ebfe54a66e5c", "patch": "@@ -166,9 +166,18 @@ fn run_test(test: &str, cratename: &str, filename: &FileName, line: usize,\n             compile_fail: bool, mut error_codes: Vec<String>, opts: &TestOptions,\n             maybe_sysroot: Option<PathBuf>, linker: Option<PathBuf>, edition: Edition,\n             persist_doctests: Option<PathBuf>) {\n-    // The test harness wants its own `main` and top-level functions, so\n-    // never wrap the test in `fn main() { ... }`.\n-    let (test, line_offset) = make_test(test, Some(cratename), as_test_harness, opts);\n+    let (test, line_offset) = match panic::catch_unwind(|| {\n+        make_test(test, Some(cratename), as_test_harness, opts)\n+    }) {\n+        Ok((test, line_offset)) => (test, line_offset),\n+        Err(cause) if cause.is::<errors::FatalErrorMarker>() => {\n+            // If the parser used by `make_test` panicked due to a fatal error, pass the test code\n+            // through unchanged. The error will be reported during compilation.\n+            (test.to_owned(), 0)\n+        },\n+        Err(cause) => panic::resume_unwind(cause),\n+    };\n+\n     // FIXME(#44940): if doctests ever support path remapping, then this filename\n     // needs to be the result of `SourceMap::span_to_unmapped_path`.\n     let path = match filename {\n@@ -337,7 +346,13 @@ fn run_test(test: &str, cratename: &str, filename: &FileName, line: usize,\n     }\n }\n \n-/// Makes the test file. Also returns the number of lines before the code begins\n+/// Transforms a test into code that can be compiled into a Rust binary, and returns the number of\n+/// lines before the test code begins.\n+///\n+/// # Panics\n+///\n+/// This function uses the compiler's parser internally. The parser will panic if it encounters a\n+/// fatal error while parsing the test.\n pub fn make_test(s: &str,\n                  cratename: Option<&str>,\n                  dont_insert_main: bool,"}, {"sha": "7b1cd702731402003757e742d75bda70c775f63e", "filename": "src/test/rustdoc-ui/failed-doctest-output.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a912664113394fdf3a7c26a93504ebfe54a66e5c/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/a912664113394fdf3a7c26a93504ebfe54a66e5c/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output.stdout?ref=a912664113394fdf3a7c26a93504ebfe54a66e5c", "patch": "@@ -15,7 +15,7 @@ error[E0425]: cannot find value `no` in this scope\n error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0425`.\n-thread '$DIR/failed-doctest-output.rs - OtherStruct (line 17)' panicked at 'couldn't compile the test', src/librustdoc/test.rs:310:13\n+thread '$DIR/failed-doctest-output.rs - OtherStruct (line 17)' panicked at 'couldn't compile the test', src/librustdoc/test.rs:319:13\n note: Run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n \n ---- $DIR/failed-doctest-output.rs - SomeStruct (line 11) stdout ----\n@@ -24,7 +24,7 @@ thread '$DIR/failed-doctest-output.rs - SomeStruct (line 11)' panicked at 'test\n thread 'main' panicked at 'oh no', $DIR/failed-doctest-output.rs:3:1\n note: Run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n \n-', src/librustdoc/test.rs:332:17\n+', src/librustdoc/test.rs:341:17\n \n \n failures:"}, {"sha": "18d6b32bf40370b46c44fbbff7c6c2389aac7466", "filename": "src/test/rustdoc-ui/unparseable-doc-test.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a912664113394fdf3a7c26a93504ebfe54a66e5c/src%2Ftest%2Frustdoc-ui%2Funparseable-doc-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a912664113394fdf3a7c26a93504ebfe54a66e5c/src%2Ftest%2Frustdoc-ui%2Funparseable-doc-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Funparseable-doc-test.rs?ref=a912664113394fdf3a7c26a93504ebfe54a66e5c", "patch": "@@ -0,0 +1,10 @@\n+// compile-flags: --test\n+// normalize-stdout-test: \"src/test/rustdoc-ui\" -> \"$$DIR\"\n+// failure-status: 101\n+// rustc-env: RUST_BACKTRACE=0\n+\n+/// ```rust\n+/// let x = 7;\n+/// \"unterminated\n+/// ```\n+pub fn foo() {}"}, {"sha": "7048ef2c58977af8aec254ddcedfa92e9d065bcf", "filename": "src/test/rustdoc-ui/unparseable-doc-test.stdout", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a912664113394fdf3a7c26a93504ebfe54a66e5c/src%2Ftest%2Frustdoc-ui%2Funparseable-doc-test.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/a912664113394fdf3a7c26a93504ebfe54a66e5c/src%2Ftest%2Frustdoc-ui%2Funparseable-doc-test.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Funparseable-doc-test.stdout?ref=a912664113394fdf3a7c26a93504ebfe54a66e5c", "patch": "@@ -0,0 +1,24 @@\n+\n+running 1 test\n+test $DIR/unparseable-doc-test.rs - foo (line 6) ... FAILED\n+\n+failures:\n+\n+---- $DIR/unparseable-doc-test.rs - foo (line 6) stdout ----\n+error: unterminated double quote string\n+ --> $DIR/unparseable-doc-test.rs:8:1\n+  |\n+2 | \"unterminated\n+  | ^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+thread '$DIR/unparseable-doc-test.rs - foo (line 6)' panicked at 'couldn't compile the test', src/librustdoc/test.rs:319:13\n+note: Run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n+\n+\n+failures:\n+    $DIR/unparseable-doc-test.rs - foo (line 6)\n+\n+test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out\n+"}]}