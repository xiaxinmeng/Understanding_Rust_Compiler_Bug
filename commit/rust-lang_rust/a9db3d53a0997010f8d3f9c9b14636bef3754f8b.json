{"sha": "a9db3d53a0997010f8d3f9c9b14636bef3754f8b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5ZGIzZDUzYTA5OTcwMTBmOGQzZjljOWIxNDYzNmJlZjM3NTRmOGI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-01T09:35:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-01T09:35:31Z"}, "message": "Merge #5159\n\n5159: Don't fail expect tests in rewrite mode r=matklad a=matklad\n\nbors r+\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "730bdf0038dd6815023956b8db81d2ccf98cc8a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/730bdf0038dd6815023956b8db81d2ccf98cc8a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9db3d53a0997010f8d3f9c9b14636bef3754f8b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe/FjjCRBK7hj4Ov3rIwAAdHIIACerYYeUd+dJyl/LrrO5VRZ3\n8UR5fJeqNFWkjG8eyHE7vcUd+C6sOZLogXwII1vNMfM7WvYMU3LtA4sWV0NpYDAM\n0B37DUCJdOAdDialCHE0FVlxJL+tMmDy7R9J84UfhYFw8nKbrmvEb0Hi5pOlWno4\nsmWHLujiKXhu0eZgDMmW4p/Qra2jPrJyJTe3fDMf/rE5QuvoH54In9mC4wW0P3EF\nD/bbRljl8+xkyT7HJdpP2i7/SMMx2CV3NZe4kUCCBIKs9Vfk3S0ZoExV/gv4Nxuh\ncMoMyHyZTxUG0IUC/APPEJKwHk748vNIOjnnxHQwb6e3nJs2jCn8UH95LYCsizw=\n=QQem\n-----END PGP SIGNATURE-----\n", "payload": "tree 730bdf0038dd6815023956b8db81d2ccf98cc8a8\nparent 99d6ef29a136069f6c99ec9f628108f151dec999\nparent 05d67a9a0efafb3dd5087aad17d75aa88aa85178\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1593596131 +0000\ncommitter GitHub <noreply@github.com> 1593596131 +0000\n\nMerge #5159\n\n5159: Don't fail expect tests in rewrite mode r=matklad a=matklad\n\nbors r+\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9db3d53a0997010f8d3f9c9b14636bef3754f8b", "html_url": "https://github.com/rust-lang/rust/commit/a9db3d53a0997010f8d3f9c9b14636bef3754f8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9db3d53a0997010f8d3f9c9b14636bef3754f8b/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99d6ef29a136069f6c99ec9f628108f151dec999", "url": "https://api.github.com/repos/rust-lang/rust/commits/99d6ef29a136069f6c99ec9f628108f151dec999", "html_url": "https://github.com/rust-lang/rust/commit/99d6ef29a136069f6c99ec9f628108f151dec999"}, {"sha": "05d67a9a0efafb3dd5087aad17d75aa88aa85178", "url": "https://api.github.com/repos/rust-lang/rust/commits/05d67a9a0efafb3dd5087aad17d75aa88aa85178", "html_url": "https://github.com/rust-lang/rust/commit/05d67a9a0efafb3dd5087aad17d75aa88aa85178"}], "stats": {"total": 121, "additions": 87, "deletions": 34}, "files": [{"sha": "a5e26faded7e5a61394e584f78253614415037bb", "filename": "crates/expect/src/lib.rs", "status": "modified", "additions": 76, "deletions": 21, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/a9db3d53a0997010f8d3f9c9b14636bef3754f8b/crates%2Fexpect%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9db3d53a0997010f8d3f9c9b14636bef3754f8b/crates%2Fexpect%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fexpect%2Fsrc%2Flib.rs?ref=a9db3d53a0997010f8d3f9c9b14636bef3754f8b", "patch": "@@ -2,7 +2,7 @@\n //! https://github.com/rust-analyzer/rust-analyzer/pull/5101\n use std::{\n     collections::HashMap,\n-    env, fmt, fs,\n+    env, fmt, fs, mem,\n     ops::Range,\n     panic,\n     path::{Path, PathBuf},\n@@ -14,7 +14,7 @@ use once_cell::sync::Lazy;\n use stdx::{lines_with_ends, trim_indent};\n \n const HELP: &str = \"\n-You can update all `expect![[]]` tests by:\n+You can update all `expect![[]]` tests by running:\n \n     env UPDATE_EXPECT=1 cargo test\n \n@@ -25,24 +25,48 @@ fn update_expect() -> bool {\n     env::var(\"UPDATE_EXPECT\").is_ok()\n }\n \n-/// expect![[\"\"]]\n+/// expect![[r#\"inline snapshot\"#]]\n #[macro_export]\n macro_rules! expect {\n-    [[$lit:literal]] => {$crate::Expect {\n-        file: file!(),\n-        line: line!(),\n-        column: column!(),\n-        data: $lit,\n+    [[$data:literal]] => {$crate::Expect {\n+        position: $crate::Position {\n+            file: file!(),\n+            line: line!(),\n+            column: column!(),\n+        },\n+        data: $data,\n     }};\n     [[]] => { $crate::expect![[\"\"]] };\n }\n \n+/// expect_file![\"/crates/foo/test_data/bar.html\"]\n+#[macro_export]\n+macro_rules! expect_file {\n+    [$path:literal] => {$crate::ExpectFile { path: $path }};\n+}\n+\n #[derive(Debug)]\n pub struct Expect {\n+    pub position: Position,\n+    pub data: &'static str,\n+}\n+\n+#[derive(Debug)]\n+pub struct ExpectFile {\n+    pub path: &'static str,\n+}\n+\n+#[derive(Debug)]\n+pub struct Position {\n     pub file: &'static str,\n     pub line: u32,\n     pub column: u32,\n-    pub data: &'static str,\n+}\n+\n+impl fmt::Display for Position {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{}:{}:{}\", self.file, self.line, self.column)\n+    }\n }\n \n impl Expect {\n@@ -51,7 +75,7 @@ impl Expect {\n         if &trimmed == actual {\n             return;\n         }\n-        Runtime::fail(self, &trimmed, actual);\n+        Runtime::fail_expect(self, &trimmed, actual);\n     }\n     pub fn assert_debug_eq(&self, actual: &impl fmt::Debug) {\n         let actual = format!(\"{:#?}\\n\", actual);\n@@ -69,7 +93,7 @@ impl Expect {\n         let mut target_line = None;\n         let mut line_start = 0;\n         for (i, line) in lines_with_ends(file).enumerate() {\n-            if i == self.line as usize - 1 {\n+            if i == self.position.line as usize - 1 {\n                 let pat = \"expect![[\";\n                 let offset = line.find(pat).unwrap();\n                 let literal_start = line_start + offset + pat.len();\n@@ -87,6 +111,25 @@ impl Expect {\n     }\n }\n \n+impl ExpectFile {\n+    pub fn assert_eq(&self, actual: &str) {\n+        let expected = self.read();\n+        if actual == expected {\n+            return;\n+        }\n+        Runtime::fail_file(self, &expected, actual);\n+    }\n+    fn read(&self) -> String {\n+        fs::read_to_string(self.abs_path()).unwrap_or_default().replace(\"\\r\\n\", \"\\n\")\n+    }\n+    fn write(&self, contents: &str) {\n+        fs::write(self.abs_path(), contents).unwrap()\n+    }\n+    fn abs_path(&self) -> PathBuf {\n+        workspace_root().join(self.path)\n+    }\n+}\n+\n #[derive(Default)]\n struct Runtime {\n     help_printed: bool,\n@@ -95,27 +138,39 @@ struct Runtime {\n static RT: Lazy<Mutex<Runtime>> = Lazy::new(Default::default);\n \n impl Runtime {\n-    fn fail(expect: &Expect, expected: &str, actual: &str) {\n+    fn fail_expect(expect: &Expect, expected: &str, actual: &str) {\n         let mut rt = RT.lock().unwrap_or_else(|poisoned| poisoned.into_inner());\n-        let mut updated = \"\";\n         if update_expect() {\n-            updated = \" (updated)\";\n+            println!(\"\\x1b[1m\\x1b[92mupdating\\x1b[0m: {}\", expect.position);\n             rt.per_file\n-                .entry(expect.file)\n+                .entry(expect.position.file)\n                 .or_insert_with(|| FileRuntime::new(expect))\n                 .update(expect, actual);\n+            return;\n         }\n-        let print_help = !rt.help_printed && !update_expect();\n-        rt.help_printed = true;\n+        rt.panic(expect.position.to_string(), expected, actual);\n+    }\n+\n+    fn fail_file(expect: &ExpectFile, expected: &str, actual: &str) {\n+        let mut rt = RT.lock().unwrap_or_else(|poisoned| poisoned.into_inner());\n+        if update_expect() {\n+            println!(\"\\x1b[1m\\x1b[92mupdating\\x1b[0m: {}\", expect.path);\n+            expect.write(actual);\n+            return;\n+        }\n+        rt.panic(expect.path.to_string(), expected, actual);\n+    }\n \n+    fn panic(&mut self, position: String, expected: &str, actual: &str) {\n+        let print_help = !mem::replace(&mut self.help_printed, true);\n         let help = if print_help { HELP } else { \"\" };\n \n         let diff = Changeset::new(actual, expected, \"\\n\");\n \n         println!(\n             \"\\n\n-\\x1b[1m\\x1b[91merror\\x1b[97m: expect test failed\\x1b[0m{}\n-   \\x1b[1m\\x1b[34m-->\\x1b[0m {}:{}:{}\n+\\x1b[1m\\x1b[91merror\\x1b[97m: expect test failed\\x1b[0m\n+   \\x1b[1m\\x1b[34m-->\\x1b[0m {}\n {}\n \\x1b[1mExpect\\x1b[0m:\n ----\n@@ -132,7 +187,7 @@ impl Runtime {\n {}\n ----\n \",\n-            updated, expect.file, expect.line, expect.column, help, expected, actual, diff\n+            position, help, expected, actual, diff\n         );\n         // Use resume_unwind instead of panic!() to prevent a backtrace, which is unnecessary noise.\n         panic::resume_unwind(Box::new(()));\n@@ -147,7 +202,7 @@ struct FileRuntime {\n \n impl FileRuntime {\n     fn new(expect: &Expect) -> FileRuntime {\n-        let path = workspace_root().join(expect.file);\n+        let path = workspace_root().join(expect.position.file);\n         let original_text = fs::read_to_string(&path).unwrap();\n         let patchwork = Patchwork::new(original_text.clone());\n         FileRuntime { path, original_text, patchwork }"}, {"sha": "aa7c887d674fc87dcdcbbdc93e6a7e2ae353437a", "filename": "crates/ra_ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a9db3d53a0997010f8d3f9c9b14636bef3754f8b/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9db3d53a0997010f8d3f9c9b14636bef3754f8b/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=a9db3d53a0997010f8d3f9c9b14636bef3754f8b", "patch": "@@ -1,6 +1,7 @@\n use std::fs;\n \n-use test_utils::{assert_eq_text, project_dir, read_text};\n+use expect::{expect_file, ExpectFile};\n+use test_utils::project_dir;\n \n use crate::{mock_analysis::single_file, FileRange, TextRange};\n \n@@ -91,7 +92,7 @@ impl<T> Option<T> {\n }\n \"#\n         .trim(),\n-        \"crates/ra_ide/src/snapshots/highlighting.html\",\n+        expect_file![\"crates/ra_ide/test_data/highlighting.html\"],\n         false,\n     );\n }\n@@ -114,7 +115,7 @@ fn bar() {\n }\n \"#\n         .trim(),\n-        \"crates/ra_ide/src/snapshots/rainbow_highlighting.html\",\n+        expect_file![\"crates/ra_ide/test_data/rainbow_highlighting.html\"],\n         true,\n     );\n }\n@@ -167,7 +168,7 @@ fn main() {\n     );\n }\"##\n         .trim(),\n-        \"crates/ra_ide/src/snapshots/highlight_injection.html\",\n+        expect_file![\"crates/ra_ide/test_data/highlight_injection.html\"],\n         false,\n     );\n }\n@@ -250,7 +251,7 @@ fn main() {\n     println!(\"{\u043d\u0438\u0447\u043e\u0441\u0438}\", \u043d\u0438\u0447\u043e\u0441\u0438 = 92);\n }\"#\n         .trim(),\n-        \"crates/ra_ide/src/snapshots/highlight_strings.html\",\n+        expect_file![\"crates/ra_ide/test_data/highlight_strings.html\"],\n         false,\n     );\n }\n@@ -278,7 +279,7 @@ fn main() {\n }\n \"#\n         .trim(),\n-        \"crates/ra_ide/src/snapshots/highlight_unsafe.html\",\n+        expect_file![\"crates/ra_ide/test_data/highlight_unsafe.html\"],\n         false,\n     );\n }\n@@ -354,19 +355,16 @@ macro_rules! noop {\n }\n \"#\n         .trim(),\n-        \"crates/ra_ide/src/snapshots/highlight_doctest.html\",\n+        expect_file![\"crates/ra_ide/test_data/highlight_doctest.html\"],\n         false,\n     );\n }\n \n /// Highlights the code given by the `ra_fixture` argument, renders the\n /// result as HTML, and compares it with the HTML file given as `snapshot`.\n /// Note that the `snapshot` file is overwritten by the rendered HTML.\n-fn check_highlighting(ra_fixture: &str, snapshot: &str, rainbow: bool) {\n+fn check_highlighting(ra_fixture: &str, expect: ExpectFile, rainbow: bool) {\n     let (analysis, file_id) = single_file(ra_fixture);\n-    let dst_file = project_dir().join(snapshot);\n     let actual_html = &analysis.highlight_as_html(file_id, rainbow).unwrap();\n-    let expected_html = &read_text(&dst_file);\n-    fs::write(dst_file, &actual_html).unwrap();\n-    assert_eq_text!(expected_html, actual_html);\n+    expect.assert_eq(actual_html)\n }"}, {"sha": "e8155def75eb6ccf9e52bf627b6a86bb5830372d", "filename": "crates/ra_ide/test_data/highlight_doctest.html", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a9db3d53a0997010f8d3f9c9b14636bef3754f8b/crates%2Fra_ide%2Ftest_data%2Fhighlight_doctest.html", "raw_url": "https://github.com/rust-lang/rust/raw/a9db3d53a0997010f8d3f9c9b14636bef3754f8b/crates%2Fra_ide%2Ftest_data%2Fhighlight_doctest.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Ftest_data%2Fhighlight_doctest.html?ref=a9db3d53a0997010f8d3f9c9b14636bef3754f8b", "previous_filename": "crates/ra_ide/src/snapshots/highlight_doctest.html"}, {"sha": "1b0349bae2ee83a4e30f24444d4e454e487a8a3c", "filename": "crates/ra_ide/test_data/highlight_injection.html", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a9db3d53a0997010f8d3f9c9b14636bef3754f8b/crates%2Fra_ide%2Ftest_data%2Fhighlight_injection.html", "raw_url": "https://github.com/rust-lang/rust/raw/a9db3d53a0997010f8d3f9c9b14636bef3754f8b/crates%2Fra_ide%2Ftest_data%2Fhighlight_injection.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Ftest_data%2Fhighlight_injection.html?ref=a9db3d53a0997010f8d3f9c9b14636bef3754f8b", "previous_filename": "crates/ra_ide/src/snapshots/highlight_injection.html"}, {"sha": "d184b569102401c8831c1f806d3634ad2b26e6a2", "filename": "crates/ra_ide/test_data/highlight_strings.html", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a9db3d53a0997010f8d3f9c9b14636bef3754f8b/crates%2Fra_ide%2Ftest_data%2Fhighlight_strings.html", "raw_url": "https://github.com/rust-lang/rust/raw/a9db3d53a0997010f8d3f9c9b14636bef3754f8b/crates%2Fra_ide%2Ftest_data%2Fhighlight_strings.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Ftest_data%2Fhighlight_strings.html?ref=a9db3d53a0997010f8d3f9c9b14636bef3754f8b", "previous_filename": "crates/ra_ide/src/snapshots/highlight_strings.html"}, {"sha": "6936e949fe8e5a10653a2630b00f69885d124333", "filename": "crates/ra_ide/test_data/highlight_unsafe.html", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a9db3d53a0997010f8d3f9c9b14636bef3754f8b/crates%2Fra_ide%2Ftest_data%2Fhighlight_unsafe.html", "raw_url": "https://github.com/rust-lang/rust/raw/a9db3d53a0997010f8d3f9c9b14636bef3754f8b/crates%2Fra_ide%2Ftest_data%2Fhighlight_unsafe.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Ftest_data%2Fhighlight_unsafe.html?ref=a9db3d53a0997010f8d3f9c9b14636bef3754f8b", "previous_filename": "crates/ra_ide/src/snapshots/highlight_unsafe.html"}, {"sha": "8d0b38f958dcea4887e97477cfc5d756c8348a28", "filename": "crates/ra_ide/test_data/highlighting.html", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a9db3d53a0997010f8d3f9c9b14636bef3754f8b/crates%2Fra_ide%2Ftest_data%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/a9db3d53a0997010f8d3f9c9b14636bef3754f8b/crates%2Fra_ide%2Ftest_data%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Ftest_data%2Fhighlighting.html?ref=a9db3d53a0997010f8d3f9c9b14636bef3754f8b", "previous_filename": "crates/ra_ide/src/snapshots/highlighting.html"}, {"sha": "9516c7441040ac94306656a7c4f809b53a48a17e", "filename": "crates/ra_ide/test_data/rainbow_highlighting.html", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a9db3d53a0997010f8d3f9c9b14636bef3754f8b/crates%2Fra_ide%2Ftest_data%2Frainbow_highlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/a9db3d53a0997010f8d3f9c9b14636bef3754f8b/crates%2Fra_ide%2Ftest_data%2Frainbow_highlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Ftest_data%2Frainbow_highlighting.html?ref=a9db3d53a0997010f8d3f9c9b14636bef3754f8b", "previous_filename": "crates/ra_ide/src/snapshots/rainbow_highlighting.html"}, {"sha": "607a95682a7f80ee64b8a0d24a69a26a458a7f16", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9db3d53a0997010f8d3f9c9b14636bef3754f8b/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9db3d53a0997010f8d3f9c9b14636bef3754f8b/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=a9db3d53a0997010f8d3f9c9b14636bef3754f8b", "patch": "@@ -415,7 +415,7 @@ pub(crate) fn handle_runnables(\n             let source_file = snap.analysis.parse(file_id)?;\n             algo::find_node_at_offset::<ast::MacroCall>(source_file.syntax(), offset)\n                 .and_then(|it| it.path()?.segment()?.name_ref())\n-                .map_or(false, |it| it.text() == \"expect\")\n+                .map_or(false, |it| it.text() == \"expect\" || it.text() == \"expect_file\")\n         }\n         None => false,\n     };"}]}