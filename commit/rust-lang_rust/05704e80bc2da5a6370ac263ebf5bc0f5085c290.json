{"sha": "05704e80bc2da5a6370ac263ebf5bc0f5085c290", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1NzA0ZTgwYmMyZGE1YTYzNzBhYzI2M2ViZjViYzBmNTA4NWMyOTA=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-07-03T13:59:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-03T13:59:16Z"}, "message": "Rollup merge of #62183 - alexcrichton:fix-tests, r=nikomatsakis\n\nstd: Move a process test out of libstd\n\nThis commit moves a test out of libstd which is causing deadlocks on\nmusl on CI. Looks like the recent update in musl versions brings in some\ninternal updates to musl which makes `setgid` and `setuid` invalid to\ncall after a `fork` in a multithreaded program. The issue seen here is\nthat the child thread was attempting to grab a lock held by a\nnonexistent thread, meaning that the child process simply deadlocked\ncausing the whole test to deadlock.\n\nThis commit moves the test to its own file with no threads which should\nwork.", "tree": {"sha": "4c14499df21e0bc5c428e6fa549febff65c0600d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c14499df21e0bc5c428e6fa549febff65c0600d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05704e80bc2da5a6370ac263ebf5bc0f5085c290", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdHLS0CRBK7hj4Ov3rIwAAdHIIABOyiZHf5ezieHKOyEEUsguz\nVTEV6pQuiNd8bqqa7liZqSjE5PXi7JXsbaUC04imkFuuR203IOi85OR904R5kK+z\nHLOTt7AoSiPcZWZpNZ4jqezVt9DyGFq+2gATHENkGz0rngRAS7i7Qv8fqATKvWwW\nlvtiAnEqAinPlrnk0ex7NCnQAi0FgDbcbcK3DT0Mjf1y5bFkDLbUqKze+p5HjBxK\nM5gpNZ3EV3zfNWQ4zoqVIrSoQmbvU88oo/zh/WCUNZmSDxRBQUuMI8OINyjGjR8b\n54S0C/LI9vfaa4UY8taPnrMYNbPpQ8L1sSdsRQ9/Gvx7FZ7nTjxVzye8m+O59KA=\n=bgPR\n-----END PGP SIGNATURE-----\n", "payload": "tree 4c14499df21e0bc5c428e6fa549febff65c0600d\nparent d9dfed8ca2edfcc2a845eca35f12c085fb3fb20f\nparent 2a375827ab56900bf550161ee08ada664e68b267\nauthor Mark Rousskov <mark.simulacrum@gmail.com> 1562162356 -0400\ncommitter GitHub <noreply@github.com> 1562162356 -0400\n\nRollup merge of #62183 - alexcrichton:fix-tests, r=nikomatsakis\n\nstd: Move a process test out of libstd\n\nThis commit moves a test out of libstd which is causing deadlocks on\nmusl on CI. Looks like the recent update in musl versions brings in some\ninternal updates to musl which makes `setgid` and `setuid` invalid to\ncall after a `fork` in a multithreaded program. The issue seen here is\nthat the child thread was attempting to grab a lock held by a\nnonexistent thread, meaning that the child process simply deadlocked\ncausing the whole test to deadlock.\n\nThis commit moves the test to its own file with no threads which should\nwork.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05704e80bc2da5a6370ac263ebf5bc0f5085c290", "html_url": "https://github.com/rust-lang/rust/commit/05704e80bc2da5a6370ac263ebf5bc0f5085c290", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05704e80bc2da5a6370ac263ebf5bc0f5085c290/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9dfed8ca2edfcc2a845eca35f12c085fb3fb20f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9dfed8ca2edfcc2a845eca35f12c085fb3fb20f", "html_url": "https://github.com/rust-lang/rust/commit/d9dfed8ca2edfcc2a845eca35f12c085fb3fb20f"}, {"sha": "2a375827ab56900bf550161ee08ada664e68b267", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a375827ab56900bf550161ee08ada664e68b267", "html_url": "https://github.com/rust-lang/rust/commit/2a375827ab56900bf550161ee08ada664e68b267"}], "stats": {"total": 53, "additions": 26, "deletions": 27}, "files": [{"sha": "000f80f99e7a9bb861b3ffde10defa09355e8c1a", "filename": "src/libstd/process.rs", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/05704e80bc2da5a6370ac263ebf5bc0f5085c290/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05704e80bc2da5a6370ac263ebf5bc0f5085c290/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=05704e80bc2da5a6370ac263ebf5bc0f5085c290", "patch": "@@ -1765,33 +1765,6 @@ mod tests {\n         assert_eq!(out, \"foobar\\n\");\n     }\n \n-\n-    #[test]\n-    #[cfg_attr(target_os = \"android\", ignore)]\n-    #[cfg(unix)]\n-    fn uid_works() {\n-        use crate::os::unix::prelude::*;\n-\n-        let mut p = Command::new(\"/bin/sh\")\n-                            .arg(\"-c\").arg(\"true\")\n-                            .uid(unsafe { libc::getuid() })\n-                            .gid(unsafe { libc::getgid() })\n-                            .spawn().unwrap();\n-        assert!(p.wait().unwrap().success());\n-    }\n-\n-    #[test]\n-    #[cfg_attr(target_os = \"android\", ignore)]\n-    #[cfg(unix)]\n-    fn uid_to_root_fails() {\n-        use crate::os::unix::prelude::*;\n-\n-        // if we're already root, this isn't a valid test. Most of the bots run\n-        // as non-root though (android is an exception).\n-        if unsafe { libc::getuid() == 0 } { return }\n-        assert!(Command::new(\"/bin/ls\").uid(0).gid(0).spawn().is_err());\n-    }\n-\n     #[test]\n     #[cfg_attr(target_os = \"android\", ignore)]\n     fn test_process_status() {"}, {"sha": "2b52c5d104c24a5c3ee4474a98889dcc63e10264", "filename": "src/test/run-pass/command-uid-gid.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/05704e80bc2da5a6370ac263ebf5bc0f5085c290/src%2Ftest%2Frun-pass%2Fcommand-uid-gid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05704e80bc2da5a6370ac263ebf5bc0f5085c290/src%2Ftest%2Frun-pass%2Fcommand-uid-gid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcommand-uid-gid.rs?ref=05704e80bc2da5a6370ac263ebf5bc0f5085c290", "patch": "@@ -0,0 +1,26 @@\n+#![feature(rustc_private)]\n+\n+fn main() {\n+    #[cfg(unix)]\n+    run()\n+}\n+\n+#[cfg(unix)]\n+fn run() {\n+    extern crate libc;\n+    use std::process::Command;\n+    use std::os::unix::prelude::*;\n+\n+    let mut p = Command::new(\"/bin/sh\")\n+        .arg(\"-c\").arg(\"true\")\n+        .uid(unsafe { libc::getuid() })\n+        .gid(unsafe { libc::getgid() })\n+        .spawn().unwrap();\n+    assert!(p.wait().unwrap().success());\n+\n+    // if we're already root, this isn't a valid test. Most of the bots run\n+    // as non-root though (android is an exception).\n+    if unsafe { libc::getuid() != 0 } {\n+        assert!(Command::new(\"/bin/ls\").uid(0).gid(0).spawn().is_err());\n+    }\n+}"}]}