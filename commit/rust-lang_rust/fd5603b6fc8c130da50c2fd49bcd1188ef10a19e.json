{"sha": "fd5603b6fc8c130da50c2fd49bcd1188ef10a19e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkNTYwM2I2ZmM4YzEzMGRhNTBjMmZkNDliY2QxMTg4ZWYxMGExOWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-16T15:02:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-16T15:02:15Z"}, "message": "Auto merge of #32228 - jonas-schievink:diag1, r=sanxiyn\n\nNormalize return type when checking for E0269\n\nFixes #31597\n\nFirst time dealing with normalization. Maybe `normalize_associated_type` would be better here, but it seems to imply it's only used during trans.", "tree": {"sha": "386ff7a5d6ffe78f61163685c35179fb0e957e75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/386ff7a5d6ffe78f61163685c35179fb0e957e75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd5603b6fc8c130da50c2fd49bcd1188ef10a19e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd5603b6fc8c130da50c2fd49bcd1188ef10a19e", "html_url": "https://github.com/rust-lang/rust/commit/fd5603b6fc8c130da50c2fd49bcd1188ef10a19e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd5603b6fc8c130da50c2fd49bcd1188ef10a19e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e68d40edf49496e8d7a9ab03d75c9de2096446c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e68d40edf49496e8d7a9ab03d75c9de2096446c5", "html_url": "https://github.com/rust-lang/rust/commit/e68d40edf49496e8d7a9ab03d75c9de2096446c5"}, {"sha": "96d9408dd9c932d5302c357d37f1a0262dcb51a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/96d9408dd9c932d5302c357d37f1a0262dcb51a9", "html_url": "https://github.com/rust-lang/rust/commit/96d9408dd9c932d5302c357d37f1a0262dcb51a9"}], "stats": {"total": 57, "additions": 53, "deletions": 4}, "files": [{"sha": "0bfb830efc1e77b4c17112118cb38ccdbe5701ea", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fd5603b6fc8c130da50c2fd49bcd1188ef10a19e/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd5603b6fc8c130da50c2fd49bcd1188ef10a19e/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=fd5603b6fc8c130da50c2fd49bcd1188ef10a19e", "patch": "@@ -112,7 +112,9 @@ use self::VarKind::*;\n use dep_graph::DepNode;\n use middle::def::*;\n use middle::pat_util;\n-use middle::ty::{self, TyCtxt};\n+use middle::ty::{self, TyCtxt, ParameterEnvironment};\n+use middle::traits::{self, ProjectionMode};\n+use middle::infer;\n use lint;\n use util::nodemap::NodeMap;\n \n@@ -1490,9 +1492,19 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n \n         match fn_ret {\n             ty::FnConverging(t_ret)\n-                if self.live_on_entry(entry_ln, self.s.no_ret_var).is_some() => {\n-\n-                if t_ret.is_nil() {\n+                    if self.live_on_entry(entry_ln, self.s.no_ret_var).is_some() => {\n+\n+                let param_env = ParameterEnvironment::for_item(&self.ir.tcx, id);\n+                let infcx = infer::new_infer_ctxt(&self.ir.tcx,\n+                                                  &self.ir.tcx.tables,\n+                                                  Some(param_env),\n+                                                  ProjectionMode::Any);\n+                let cause = traits::ObligationCause::dummy();\n+                let norm = traits::fully_normalize(&infcx,\n+                                                   cause,\n+                                                   &t_ret);\n+\n+                if norm.unwrap().is_nil() {\n                     // for nil return types, it is ok to not return a value expl.\n                 } else {\n                     let ends_with_stmt = match body.expr {"}, {"sha": "9acd6384b75e5519dc739280e17c2e3d477129e4", "filename": "src/test/run-pass/issue-31597.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/fd5603b6fc8c130da50c2fd49bcd1188ef10a19e/src%2Ftest%2Frun-pass%2Fissue-31597.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd5603b6fc8c130da50c2fd49bcd1188ef10a19e/src%2Ftest%2Frun-pass%2Fissue-31597.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-31597.rs?ref=fd5603b6fc8c130da50c2fd49bcd1188ef10a19e", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Make {\n+    type Out;\n+\n+    fn make() -> Self::Out;\n+}\n+\n+impl Make for () {\n+    type Out = ();\n+\n+    fn make() -> Self::Out {}\n+}\n+\n+// Also make sure we don't hit an ICE when the projection can't be known\n+fn f<T: Make>() -> <T as Make>::Out { loop {} }\n+\n+// ...and that it works with a blanket impl\n+trait Tr {\n+    type Assoc;\n+}\n+\n+impl<T: Make> Tr for T {\n+    type Assoc = ();\n+}\n+\n+fn g<T: Make>() -> <T as Tr>::Assoc { }\n+\n+fn main() {}"}]}