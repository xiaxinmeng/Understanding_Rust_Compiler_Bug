{"sha": "ffde96c201431a36e843ce51fb97e4f003555918", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmZGU5NmMyMDE0MzFhMzZlODQzY2U1MWZiOTdlNGYwMDM1NTU5MTg=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-08-20T17:20:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-08-20T17:20:12Z"}, "message": "Rollup merge of #53296 - estebank:suggest-closure, r=KodrAus\n\nWhen closure with no arguments was expected, suggest wrapping\n\nFix #49694.", "tree": {"sha": "787d444641aa06fcd999781752f66ae3b1b7a55e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/787d444641aa06fcd999781752f66ae3b1b7a55e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffde96c201431a36e843ce51fb97e4f003555918", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbevhMCRBK7hj4Ov3rIwAAdHIIADz99KK+pT4/B3TmYIZ16y2C\nQ9D3qCPtqaKR1pnHr2AXYsuzjBH5zwvzV5wvhbnT/p/32vJsm2RkQsR5qmaQciLB\n0Ly14QQN52jf3xm0CWsNU24VKXizvBmiZBI5XgRl4Jo1G/Xboi5n+R7F5PnEeiB7\nyMX3o5lJHQwagrq70KRDz16ociKRFZNcX7/lyZ6tF1q5dsE9t/WUSG0A/vjuBqUh\nhcPtKIITcbfS+/V93PwLwZYOsM8nB2iN1qVbT7UZIzSH3lfINzRs70moBGmsU18G\nm9c/iY2UbM7K+RZaXnPx9d4BthsSB24iFNV5Wp7l87xqceA9wNHjfPN9Mbxi6c4=\n=qrGt\n-----END PGP SIGNATURE-----\n", "payload": "tree 787d444641aa06fcd999781752f66ae3b1b7a55e\nparent fa3d56aca898897abe1d3154cacfa0a3a2619b64\nparent cea73d6341a136c6f915c45133748ecfbe36729b\nauthor kennytm <kennytm@gmail.com> 1534785612 +0800\ncommitter GitHub <noreply@github.com> 1534785612 +0800\n\nRollup merge of #53296 - estebank:suggest-closure, r=KodrAus\n\nWhen closure with no arguments was expected, suggest wrapping\n\nFix #49694.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffde96c201431a36e843ce51fb97e4f003555918", "html_url": "https://github.com/rust-lang/rust/commit/ffde96c201431a36e843ce51fb97e4f003555918", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffde96c201431a36e843ce51fb97e4f003555918/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa3d56aca898897abe1d3154cacfa0a3a2619b64", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa3d56aca898897abe1d3154cacfa0a3a2619b64", "html_url": "https://github.com/rust-lang/rust/commit/fa3d56aca898897abe1d3154cacfa0a3a2619b64"}, {"sha": "cea73d6341a136c6f915c45133748ecfbe36729b", "url": "https://api.github.com/repos/rust-lang/rust/commits/cea73d6341a136c6f915c45133748ecfbe36729b", "html_url": "https://github.com/rust-lang/rust/commit/cea73d6341a136c6f915c45133748ecfbe36729b"}], "stats": {"total": 124, "additions": 90, "deletions": 34}, "files": [{"sha": "3ebd10a920919cde757e38cfa57e85a1dca2f0fd", "filename": "src/libcore/ops/function.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ffde96c201431a36e843ce51fb97e4f003555918/src%2Flibcore%2Fops%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffde96c201431a36e843ce51fb97e4f003555918/src%2Flibcore%2Fops%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Ffunction.rs?ref=ffde96c201431a36e843ce51fb97e4f003555918", "patch": "@@ -66,6 +66,11 @@\n #[lang = \"fn\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_paren_sugar]\n+#[rustc_on_unimplemented(\n+    on(Args=\"()\", note=\"wrap the `{Self}` in a closure with no arguments: `|| {{ /* code */ }}\"),\n+    message=\"expected a `{Fn}<{Args}>` closure, found `{Self}`\",\n+    label=\"expected an `Fn<{Args}>` closure, found `{Self}`\",\n+)]\n #[fundamental] // so that regex can rely that `&str: !FnMut`\n pub trait Fn<Args> : FnMut<Args> {\n     /// Performs the call operation.\n@@ -139,6 +144,11 @@ pub trait Fn<Args> : FnMut<Args> {\n #[lang = \"fn_mut\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_paren_sugar]\n+#[rustc_on_unimplemented(\n+    on(Args=\"()\", note=\"wrap the `{Self}` in a closure with no arguments: `|| {{ /* code */ }}\"),\n+    message=\"expected a `{FnMut}<{Args}>` closure, found `{Self}`\",\n+    label=\"expected an `FnMut<{Args}>` closure, found `{Self}`\",\n+)]\n #[fundamental] // so that regex can rely that `&str: !FnMut`\n pub trait FnMut<Args> : FnOnce<Args> {\n     /// Performs the call operation.\n@@ -212,6 +222,11 @@ pub trait FnMut<Args> : FnOnce<Args> {\n #[lang = \"fn_once\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_paren_sugar]\n+#[rustc_on_unimplemented(\n+    on(Args=\"()\", note=\"wrap the `{Self}` in a closure with no arguments: `|| {{ /* code */ }}\"),\n+    message=\"expected a `{FnOnce}<{Args}>` closure, found `{Self}`\",\n+    label=\"expected an `FnOnce<{Args}>` closure, found `{Self}`\",\n+)]\n #[fundamental] // so that regex can rely that `&str: !FnMut`\n pub trait FnOnce<Args> {\n     /// The returned type after the call operator is used."}, {"sha": "ff52948ca8559f6482cc965c8de3ca399541a576", "filename": "src/test/ui/closure-expected.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ffde96c201431a36e843ce51fb97e4f003555918/src%2Ftest%2Fui%2Fclosure-expected.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffde96c201431a36e843ce51fb97e4f003555918/src%2Ftest%2Fui%2Fclosure-expected.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected.rs?ref=ffde96c201431a36e843ce51fb97e4f003555918", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let x = Some(1);\n+    let y = x.or_else(4);\n+    //~^ ERROR expected a `std::ops::FnOnce<()>` closure, found `{integer}`\n+}"}, {"sha": "0da506b5b8139262e7c7621312a6d5d0ae913c28", "filename": "src/test/ui/closure-expected.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ffde96c201431a36e843ce51fb97e4f003555918/src%2Ftest%2Fui%2Fclosure-expected.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ffde96c201431a36e843ce51fb97e4f003555918/src%2Ftest%2Fui%2Fclosure-expected.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected.stderr?ref=ffde96c201431a36e843ce51fb97e4f003555918", "patch": "@@ -0,0 +1,12 @@\n+error[E0277]: expected a `std::ops::FnOnce<()>` closure, found `{integer}`\n+  --> $DIR/closure-expected.rs:13:15\n+   |\n+LL |     let y = x.or_else(4);\n+   |               ^^^^^^^ expected an `FnOnce<()>` closure, found `{integer}`\n+   |\n+   = help: the trait `std::ops::FnOnce<()>` is not implemented for `{integer}`\n+   = note: wrap the `{integer}` in a closure with no arguments: `|| { /* code */ }\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "ea313385c10185caf87aecdc37ee3de8b93c8559", "filename": "src/test/ui/extern/extern-wrong-value-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffde96c201431a36e843ce51fb97e4f003555918/src%2Ftest%2Fui%2Fextern%2Fextern-wrong-value-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffde96c201431a36e843ce51fb97e4f003555918/src%2Ftest%2Fui%2Fextern%2Fextern-wrong-value-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-wrong-value-type.rs?ref=ffde96c201431a36e843ce51fb97e4f003555918", "patch": "@@ -17,5 +17,5 @@ fn main() {\n     // extern functions are extern \"C\" fn\n     let _x: extern \"C\" fn() = f; // OK\n     is_fn(f);\n-    //~^ ERROR `extern \"C\" fn() {f}: std::ops::Fn<()>` is not satisfied\n+    //~^ ERROR expected a `std::ops::Fn<()>` closure, found `extern \"C\" fn() {f}`\n }"}, {"sha": "0d8185839ccb47b380e556df6fa3d5b84d307907", "filename": "src/test/ui/extern/extern-wrong-value-type.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ffde96c201431a36e843ce51fb97e4f003555918/src%2Ftest%2Fui%2Fextern%2Fextern-wrong-value-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ffde96c201431a36e843ce51fb97e4f003555918/src%2Ftest%2Fui%2Fextern%2Fextern-wrong-value-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-wrong-value-type.stderr?ref=ffde96c201431a36e843ce51fb97e4f003555918", "patch": "@@ -1,9 +1,11 @@\n-error[E0277]: the trait bound `extern \"C\" fn() {f}: std::ops::Fn<()>` is not satisfied\n+error[E0277]: expected a `std::ops::Fn<()>` closure, found `extern \"C\" fn() {f}`\n   --> $DIR/extern-wrong-value-type.rs:19:5\n    |\n LL |     is_fn(f);\n-   |     ^^^^^ the trait `std::ops::Fn<()>` is not implemented for `extern \"C\" fn() {f}`\n+   |     ^^^^^ expected an `Fn<()>` closure, found `extern \"C\" fn() {f}`\n    |\n+   = help: the trait `std::ops::Fn<()>` is not implemented for `extern \"C\" fn() {f}`\n+   = note: wrap the `extern \"C\" fn() {f}` in a closure with no arguments: `|| { /* code */ }\n note: required by `is_fn`\n   --> $DIR/extern-wrong-value-type.rs:14:1\n    |"}, {"sha": "ac7b0a609846281197761aacb176cf6efff8529a", "filename": "src/test/ui/fn/fn-trait-formatting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffde96c201431a36e843ce51fb97e4f003555918/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffde96c201431a36e843ce51fb97e4f003555918/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.rs?ref=ffde96c201431a36e843ce51fb97e4f003555918", "patch": "@@ -27,5 +27,5 @@ fn main() {\n     //~| found type `std::boxed::Box<dyn std::ops::FnMut() -> isize>`\n \n     needs_fn(1);\n-    //~^ ERROR : std::ops::Fn<(isize,)>`\n+    //~^ ERROR expected a `std::ops::Fn<(isize,)>` closure, found `{integer}`\n }"}, {"sha": "198b343cdd3e76481ef3db3bed0a98de1059825f", "filename": "src/test/ui/fn/fn-trait-formatting.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ffde96c201431a36e843ce51fb97e4f003555918/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ffde96c201431a36e843ce51fb97e4f003555918/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.stderr?ref=ffde96c201431a36e843ce51fb97e4f003555918", "patch": "@@ -25,15 +25,13 @@ LL |     let _: () = (box || -> isize { unimplemented!() }) as Box<FnMut() -> is\n    = note: expected type `()`\n               found type `std::boxed::Box<dyn std::ops::FnMut() -> isize>`\n \n-error[E0277]: the trait bound `{integer}: std::ops::Fn<(isize,)>` is not satisfied\n+error[E0277]: expected a `std::ops::Fn<(isize,)>` closure, found `{integer}`\n   --> $DIR/fn-trait-formatting.rs:29:5\n    |\n LL |     needs_fn(1);\n-   |     ^^^^^^^^ the trait `std::ops::Fn<(isize,)>` is not implemented for `{integer}`\n+   |     ^^^^^^^^ expected an `Fn<(isize,)>` closure, found `{integer}`\n    |\n-   = help: the following implementations were found:\n-             <&'a F as std::ops::Fn<A>>\n-             <core::str::LinesAnyMap as std::ops::Fn<(&'a str,)>>\n+   = help: the trait `std::ops::Fn<(isize,)>` is not implemented for `{integer}`\n note: required by `needs_fn`\n   --> $DIR/fn-trait-formatting.rs:13:1\n    |"}, {"sha": "2708de2c13a8fc185408a838cdad805c590489b6", "filename": "src/test/ui/issues/issue-22034.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffde96c201431a36e843ce51fb97e4f003555918/src%2Ftest%2Fui%2Fissues%2Fissue-22034.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffde96c201431a36e843ce51fb97e4f003555918/src%2Ftest%2Fui%2Fissues%2Fissue-22034.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22034.rs?ref=ffde96c201431a36e843ce51fb97e4f003555918", "patch": "@@ -16,6 +16,6 @@ fn main() {\n     let ptr: *mut () = 0 as *mut _;\n     let _: &mut Fn() = unsafe {\n         &mut *(ptr as *mut Fn())\n-        //~^ ERROR `(): std::ops::Fn<()>` is not satisfied\n+        //~^ ERROR expected a `std::ops::Fn<()>` closure, found `()`\n     };\n }"}, {"sha": "da376fedbb98af5313eadeac191d0794e19e2100", "filename": "src/test/ui/issues/issue-22034.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ffde96c201431a36e843ce51fb97e4f003555918/src%2Ftest%2Fui%2Fissues%2Fissue-22034.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ffde96c201431a36e843ce51fb97e4f003555918/src%2Ftest%2Fui%2Fissues%2Fissue-22034.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22034.stderr?ref=ffde96c201431a36e843ce51fb97e4f003555918", "patch": "@@ -1,9 +1,11 @@\n-error[E0277]: the trait bound `(): std::ops::Fn<()>` is not satisfied\n+error[E0277]: expected a `std::ops::Fn<()>` closure, found `()`\n   --> $DIR/issue-22034.rs:18:16\n    |\n LL |         &mut *(ptr as *mut Fn())\n-   |                ^^^ the trait `std::ops::Fn<()>` is not implemented for `()`\n+   |                ^^^ expected an `Fn<()>` closure, found `()`\n    |\n+   = help: the trait `std::ops::Fn<()>` is not implemented for `()`\n+   = note: wrap the `()` in a closure with no arguments: `|| { /* code */ }\n    = note: required for the cast to the object type `dyn std::ops::Fn()`\n \n error: aborting due to previous error"}, {"sha": "0418933180c00b97dbd96bafb89cf62f1d711370", "filename": "src/test/ui/issues/issue-23966.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ffde96c201431a36e843ce51fb97e4f003555918/src%2Ftest%2Fui%2Fissues%2Fissue-23966.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ffde96c201431a36e843ce51fb97e4f003555918/src%2Ftest%2Fui%2Fissues%2Fissue-23966.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23966.stderr?ref=ffde96c201431a36e843ce51fb97e4f003555918", "patch": "@@ -1,8 +1,10 @@\n-error[E0277]: the trait bound `(): std::ops::FnMut<(_, char)>` is not satisfied\n+error[E0277]: expected a `std::ops::FnMut<(_, char)>` closure, found `()`\n   --> $DIR/issue-23966.rs:12:16\n    |\n LL |     \"\".chars().fold(|_, _| (), ());\n-   |                ^^^^ the trait `std::ops::FnMut<(_, char)>` is not implemented for `()`\n+   |                ^^^^ expected an `FnMut<(_, char)>` closure, found `()`\n+   |\n+   = help: the trait `std::ops::FnMut<(_, char)>` is not implemented for `()`\n \n error: aborting due to previous error\n "}, {"sha": "e5e66efcaa2ced9cd2b62c7010e0ad72c03c48ab", "filename": "src/test/ui/unboxed-closures/unboxed-closures-fnmut-as-fn.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ffde96c201431a36e843ce51fb97e4f003555918/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-fnmut-as-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ffde96c201431a36e843ce51fb97e4f003555918/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-fnmut-as-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-fnmut-as-fn.stderr?ref=ffde96c201431a36e843ce51fb97e4f003555918", "patch": "@@ -1,9 +1,10 @@\n-error[E0277]: the trait bound `S: std::ops::Fn<(isize,)>` is not satisfied\n+error[E0277]: expected a `std::ops::Fn<(isize,)>` closure, found `S`\n   --> $DIR/unboxed-closures-fnmut-as-fn.rs:38:13\n    |\n LL |     let x = call_it(&S, 22);\n-   |             ^^^^^^^ the trait `std::ops::Fn<(isize,)>` is not implemented for `S`\n+   |             ^^^^^^^ expected an `Fn<(isize,)>` closure, found `S`\n    |\n+   = help: the trait `std::ops::Fn<(isize,)>` is not implemented for `S`\n note: required by `call_it`\n   --> $DIR/unboxed-closures-fnmut-as-fn.rs:33:1\n    |"}, {"sha": "7c76c10443af91763ee0c6e454b9f7236cd3e7f6", "filename": "src/test/ui/unboxed-closures/unboxed-closures-unsafe-extern-fn.stderr", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ffde96c201431a36e843ce51fb97e4f003555918/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unsafe-extern-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ffde96c201431a36e843ce51fb97e4f003555918/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unsafe-extern-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unsafe-extern-fn.stderr?ref=ffde96c201431a36e843ce51fb97e4f003555918", "patch": "@@ -1,33 +1,36 @@\n-error[E0277]: the trait bound `for<'r> for<'s> unsafe fn(&'s isize) -> isize {square}: std::ops::Fn<(&'r isize,)>` is not satisfied\n+error[E0277]: expected a `std::ops::Fn<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:22:13\n    |\n LL |     let x = call_it(&square, 22);\n-   |             ^^^^^^^ the trait `for<'r> std::ops::Fn<(&'r isize,)>` is not implemented for `for<'r> unsafe fn(&'r isize) -> isize {square}`\n+   |             ^^^^^^^ expected an `Fn<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n    |\n+   = help: the trait `for<'r> std::ops::Fn<(&'r isize,)>` is not implemented for `for<'r> unsafe fn(&'r isize) -> isize {square}`\n note: required by `call_it`\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:17:1\n    |\n LL | fn call_it<F:Fn(&isize)->isize>(_: &F, _: isize) -> isize { 0 }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0277]: the trait bound `for<'r> for<'s> unsafe fn(&'s isize) -> isize {square}: std::ops::FnMut<(&'r isize,)>` is not satisfied\n+error[E0277]: expected a `std::ops::FnMut<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:27:13\n    |\n LL |     let y = call_it_mut(&mut square, 22);\n-   |             ^^^^^^^^^^^ the trait `for<'r> std::ops::FnMut<(&'r isize,)>` is not implemented for `for<'r> unsafe fn(&'r isize) -> isize {square}`\n+   |             ^^^^^^^^^^^ expected an `FnMut<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n    |\n+   = help: the trait `for<'r> std::ops::FnMut<(&'r isize,)>` is not implemented for `for<'r> unsafe fn(&'r isize) -> isize {square}`\n note: required by `call_it_mut`\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:18:1\n    |\n LL | fn call_it_mut<F:FnMut(&isize)->isize>(_: &mut F, _: isize) -> isize { 0 }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0277]: the trait bound `for<'r> for<'s> unsafe fn(&'s isize) -> isize {square}: std::ops::FnOnce<(&'r isize,)>` is not satisfied\n+error[E0277]: expected a `std::ops::FnOnce<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:32:13\n    |\n LL |     let z = call_it_once(square, 22);\n-   |             ^^^^^^^^^^^^ the trait `for<'r> std::ops::FnOnce<(&'r isize,)>` is not implemented for `for<'r> unsafe fn(&'r isize) -> isize {square}`\n+   |             ^^^^^^^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n    |\n+   = help: the trait `for<'r> std::ops::FnOnce<(&'r isize,)>` is not implemented for `for<'r> unsafe fn(&'r isize) -> isize {square}`\n note: required by `call_it_once`\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:19:1\n    |"}, {"sha": "18ade48de664080d54ff9db4b563650de44316fa", "filename": "src/test/ui/unboxed-closures/unboxed-closures-wrong-abi.stderr", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ffde96c201431a36e843ce51fb97e4f003555918/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ffde96c201431a36e843ce51fb97e4f003555918/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-abi.stderr?ref=ffde96c201431a36e843ce51fb97e4f003555918", "patch": "@@ -1,33 +1,36 @@\n-error[E0277]: the trait bound `for<'r> for<'s> extern \"C\" fn(&'s isize) -> isize {square}: std::ops::Fn<(&'r isize,)>` is not satisfied\n+error[E0277]: expected a `std::ops::Fn<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n   --> $DIR/unboxed-closures-wrong-abi.rs:22:13\n    |\n LL |     let x = call_it(&square, 22);\n-   |             ^^^^^^^ the trait `for<'r> std::ops::Fn<(&'r isize,)>` is not implemented for `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n+   |             ^^^^^^^ expected an `Fn<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n    |\n+   = help: the trait `for<'r> std::ops::Fn<(&'r isize,)>` is not implemented for `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n note: required by `call_it`\n   --> $DIR/unboxed-closures-wrong-abi.rs:17:1\n    |\n LL | fn call_it<F:Fn(&isize)->isize>(_: &F, _: isize) -> isize { 0 }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0277]: the trait bound `for<'r> for<'s> extern \"C\" fn(&'s isize) -> isize {square}: std::ops::FnMut<(&'r isize,)>` is not satisfied\n+error[E0277]: expected a `std::ops::FnMut<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n   --> $DIR/unboxed-closures-wrong-abi.rs:27:13\n    |\n LL |     let y = call_it_mut(&mut square, 22);\n-   |             ^^^^^^^^^^^ the trait `for<'r> std::ops::FnMut<(&'r isize,)>` is not implemented for `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n+   |             ^^^^^^^^^^^ expected an `FnMut<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n    |\n+   = help: the trait `for<'r> std::ops::FnMut<(&'r isize,)>` is not implemented for `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n note: required by `call_it_mut`\n   --> $DIR/unboxed-closures-wrong-abi.rs:18:1\n    |\n LL | fn call_it_mut<F:FnMut(&isize)->isize>(_: &mut F, _: isize) -> isize { 0 }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0277]: the trait bound `for<'r> for<'s> extern \"C\" fn(&'s isize) -> isize {square}: std::ops::FnOnce<(&'r isize,)>` is not satisfied\n+error[E0277]: expected a `std::ops::FnOnce<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n   --> $DIR/unboxed-closures-wrong-abi.rs:32:13\n    |\n LL |     let z = call_it_once(square, 22);\n-   |             ^^^^^^^^^^^^ the trait `for<'r> std::ops::FnOnce<(&'r isize,)>` is not implemented for `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n+   |             ^^^^^^^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n    |\n+   = help: the trait `for<'r> std::ops::FnOnce<(&'r isize,)>` is not implemented for `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n note: required by `call_it_once`\n   --> $DIR/unboxed-closures-wrong-abi.rs:19:1\n    |"}, {"sha": "f27b73017a28fed53e9f7745f9fda65843b61585", "filename": "src/test/ui/unboxed-closures/unboxed-closures-wrong-arg-type-extern-fn.stderr", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ffde96c201431a36e843ce51fb97e4f003555918/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-arg-type-extern-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ffde96c201431a36e843ce51fb97e4f003555918/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-arg-type-extern-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-arg-type-extern-fn.stderr?ref=ffde96c201431a36e843ce51fb97e4f003555918", "patch": "@@ -1,33 +1,36 @@\n-error[E0277]: the trait bound `for<'r> unsafe fn(isize) -> isize {square}: std::ops::Fn<(&'r isize,)>` is not satisfied\n+error[E0277]: expected a `std::ops::Fn<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:23:13\n    |\n LL |     let x = call_it(&square, 22);\n-   |             ^^^^^^^ the trait `for<'r> std::ops::Fn<(&'r isize,)>` is not implemented for `unsafe fn(isize) -> isize {square}`\n+   |             ^^^^^^^ expected an `Fn<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n    |\n+   = help: the trait `for<'r> std::ops::Fn<(&'r isize,)>` is not implemented for `unsafe fn(isize) -> isize {square}`\n note: required by `call_it`\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:18:1\n    |\n LL | fn call_it<F:Fn(&isize)->isize>(_: &F, _: isize) -> isize { 0 }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0277]: the trait bound `for<'r> unsafe fn(isize) -> isize {square}: std::ops::FnMut<(&'r isize,)>` is not satisfied\n+error[E0277]: expected a `std::ops::FnMut<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:28:13\n    |\n LL |     let y = call_it_mut(&mut square, 22);\n-   |             ^^^^^^^^^^^ the trait `for<'r> std::ops::FnMut<(&'r isize,)>` is not implemented for `unsafe fn(isize) -> isize {square}`\n+   |             ^^^^^^^^^^^ expected an `FnMut<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n    |\n+   = help: the trait `for<'r> std::ops::FnMut<(&'r isize,)>` is not implemented for `unsafe fn(isize) -> isize {square}`\n note: required by `call_it_mut`\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:19:1\n    |\n LL | fn call_it_mut<F:FnMut(&isize)->isize>(_: &mut F, _: isize) -> isize { 0 }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0277]: the trait bound `for<'r> unsafe fn(isize) -> isize {square}: std::ops::FnOnce<(&'r isize,)>` is not satisfied\n+error[E0277]: expected a `std::ops::FnOnce<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:33:13\n    |\n LL |     let z = call_it_once(square, 22);\n-   |             ^^^^^^^^^^^^ the trait `for<'r> std::ops::FnOnce<(&'r isize,)>` is not implemented for `unsafe fn(isize) -> isize {square}`\n+   |             ^^^^^^^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n    |\n+   = help: the trait `for<'r> std::ops::FnOnce<(&'r isize,)>` is not implemented for `unsafe fn(isize) -> isize {square}`\n note: required by `call_it_once`\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:20:1\n    |"}]}