{"sha": "1c7d368ebeeb9a10be216a93302633915d02c627", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjN2QzNjhlYmVlYjlhMTBiZTIxNmE5MzMwMjYzMzkxNWQwMmM2Mjc=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-03-02T10:43:17Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-03-16T09:54:38Z"}, "message": "[bootstrap] Remove llvm.enabled config", "tree": {"sha": "bd8335a6f512769df30931c10f4130437c157923", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd8335a6f512769df30931c10f4130437c157923"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c7d368ebeeb9a10be216a93302633915d02c627", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c7d368ebeeb9a10be216a93302633915d02c627", "html_url": "https://github.com/rust-lang/rust/commit/1c7d368ebeeb9a10be216a93302633915d02c627", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c7d368ebeeb9a10be216a93302633915d02c627/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca2ff089f37e3b3186df8f4b4bd85d82eb5facc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca2ff089f37e3b3186df8f4b4bd85d82eb5facc7", "html_url": "https://github.com/rust-lang/rust/commit/ca2ff089f37e3b3186df8f4b4bd85d82eb5facc7"}], "stats": {"total": 30, "additions": 9, "deletions": 21}, "files": [{"sha": "8c1049f42c535bae2b1aad811d1b5db7fe41a189", "filename": "config.toml.example", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c7d368ebeeb9a10be216a93302633915d02c627/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/1c7d368ebeeb9a10be216a93302633915d02c627/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=1c7d368ebeeb9a10be216a93302633915d02c627", "patch": "@@ -14,10 +14,6 @@\n # =============================================================================\n [llvm]\n \n-# Indicates whether rustc will support compilation with LLVM\n-# note: rustc does not compile without LLVM at the moment\n-#enabled = true\n-\n # Indicates whether the LLVM build is a Release or Debug build\n #optimize = true\n "}, {"sha": "cc452c7a137fa434ac467984b13973dab6783bb0", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1c7d368ebeeb9a10be216a93302633915d02c627/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7d368ebeeb9a10be216a93302633915d02c627/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=1c7d368ebeeb9a10be216a93302633915d02c627", "patch": "@@ -996,10 +996,7 @@ impl<'a> Builder<'a> {\n         // For other crates, however, we know that we've already got a standard\n         // library up and running, so we can use the normal compiler to compile\n         // build scripts in that situation.\n-        //\n-        // If LLVM support is disabled we need to use the snapshot compiler to compile\n-        // build scripts, as the new compiler doesn't support executables.\n-        if mode == Mode::Std || !self.config.llvm_enabled {\n+        if mode == Mode::Std {\n             cargo\n                 .env(\"RUSTC_SNAPSHOT\", &self.initial_rustc)\n                 .env(\"RUSTC_SNAPSHOT_LIBDIR\", self.rustc_snapshot_libdir());"}, {"sha": "6162c7e0a37c3f9bf63c175129f0dcf8b89e56f9", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1c7d368ebeeb9a10be216a93302633915d02c627/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7d368ebeeb9a10be216a93302633915d02c627/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=1c7d368ebeeb9a10be216a93302633915d02c627", "patch": "@@ -64,7 +64,6 @@ pub struct Config {\n     pub backtrace_on_ice: bool,\n \n     // llvm codegen options\n-    pub llvm_enabled: bool,\n     pub llvm_assertions: bool,\n     pub llvm_optimize: bool,\n     pub llvm_thin_lto: bool,\n@@ -244,7 +243,6 @@ struct Install {\n #[derive(Deserialize, Default)]\n #[serde(deny_unknown_fields, rename_all = \"kebab-case\")]\n struct Llvm {\n-    enabled: Option<bool>,\n     ccache: Option<StringOrBool>,\n     ninja: Option<bool>,\n     assertions: Option<bool>,\n@@ -360,7 +358,6 @@ impl Config {\n \n     pub fn default_opts() -> Config {\n         let mut config = Config::default();\n-        config.llvm_enabled = true;\n         config.llvm_optimize = true;\n         config.llvm_version_check = true;\n         config.backtrace = true;\n@@ -512,7 +509,6 @@ impl Config {\n                 Some(StringOrBool::Bool(false)) | None => {}\n             }\n             set(&mut config.ninja, llvm.ninja);\n-            set(&mut config.llvm_enabled, llvm.enabled);\n             llvm_assertions = llvm.assertions;\n             set(&mut config.llvm_optimize, llvm.optimize);\n             set(&mut config.llvm_thin_lto, llvm.thin_lto);\n@@ -671,6 +667,11 @@ impl Config {\n     pub fn very_verbose(&self) -> bool {\n         self.verbose > 1\n     }\n+\n+    pub fn llvm_enabled(&self) -> bool {\n+        self.rust_codegen_backends.contains(&INTERNER.intern_str(\"llvm\"))\n+        || self.rust_codegen_backends.contains(&INTERNER.intern_str(\"emscripten\"))\n+    }\n }\n \n fn set<T>(field: &mut T, val: Option<T>) {"}, {"sha": "8a9d99c1662ddef1b9b2a690ab6516c486621f2f", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1c7d368ebeeb9a10be216a93302633915d02c627/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7d368ebeeb9a10be216a93302633915d02c627/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=1c7d368ebeeb9a10be216a93302633915d02c627", "patch": "@@ -1194,7 +1194,7 @@ impl Step for Compiletest {\n             cmd.arg(\"--quiet\");\n         }\n \n-        if builder.config.llvm_enabled {\n+        if builder.config.llvm_enabled() {\n             let llvm_config = builder.ensure(native::Llvm {\n                 target: builder.config.build,\n                 emscripten: false,\n@@ -1227,12 +1227,6 @@ impl Step for Compiletest {\n                 }\n             }\n         }\n-        if suite == \"run-make-fulldeps\" && !builder.config.llvm_enabled {\n-            builder.info(\n-                \"Ignoring run-make test suite as they generally don't work without LLVM\"\n-            );\n-            return;\n-        }\n \n         if suite != \"run-make-fulldeps\" {\n             cmd.arg(\"--cc\")"}, {"sha": "c8eb0ccf2273e17000a60d4b5556d198a65ad2a0", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c7d368ebeeb9a10be216a93302633915d02c627/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7d368ebeeb9a10be216a93302633915d02c627/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=1c7d368ebeeb9a10be216a93302633915d02c627", "patch": "@@ -699,8 +699,8 @@ impl<'a> Builder<'a> {\n         add_lib_path(lib_paths, cmd);\n     }\n \n-    fn llvm_bin_path(&self) -> Option<PathBuf> {\n-        if self.config.llvm_enabled {\n+fn llvm_bin_path(&self) -> Option<PathBuf> {\n+        if self.config.llvm_enabled() {\n             let llvm_config = self.ensure(native::Llvm {\n                 target: self.config.build,\n                 emscripten: false,"}]}