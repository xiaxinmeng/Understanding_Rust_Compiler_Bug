{"sha": "c68e76c33bf8b8e3fc0dabb3f7d9133328a7ea6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2OGU3NmMzM2JmOGI4ZTNmYzBkYWJiM2Y3ZDkxMzMzMjhhN2VhNmQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-02-11T18:18:52Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-02-11T18:18:52Z"}, "message": "Implement variadic function calling", "tree": {"sha": "af7a860c4eed847a6d4116a42a78c83c3e39bb75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af7a860c4eed847a6d4116a42a78c83c3e39bb75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c68e76c33bf8b8e3fc0dabb3f7d9133328a7ea6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c68e76c33bf8b8e3fc0dabb3f7d9133328a7ea6d", "html_url": "https://github.com/rust-lang/rust/commit/c68e76c33bf8b8e3fc0dabb3f7d9133328a7ea6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c68e76c33bf8b8e3fc0dabb3f7d9133328a7ea6d/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bb8bfca94aa704b2f57f33d2f6be121ee88e3fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bb8bfca94aa704b2f57f33d2f6be121ee88e3fa", "html_url": "https://github.com/rust-lang/rust/commit/4bb8bfca94aa704b2f57f33d2f6be121ee88e3fa"}], "stats": {"total": 32, "additions": 26, "deletions": 6}, "files": [{"sha": "4da661ebb8d863fd76e8808801e246e13fad1713", "filename": "example/mini_core.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c68e76c33bf8b8e3fc0dabb3f7d9133328a7ea6d/example%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c68e76c33bf8b8e3fc0dabb3f7d9133328a7ea6d/example%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core.rs?ref=c68e76c33bf8b8e3fc0dabb3f7d9133328a7ea6d", "patch": "@@ -338,6 +338,7 @@ pub mod libc {\n     #[link(name = \"c\")]\n     extern \"C\" {\n         pub fn puts(s: *const u8);\n+        pub fn printf(format: *const char, ...) -> i32;\n         pub fn malloc(size: usize) -> *mut u8;\n         pub fn free(ptr: *mut u8);\n         pub fn memcpy(dst: *mut u8, src: *const u8, size: usize);"}, {"sha": "17c64ffe09fc50a07c9a2b070bbce94f181c60d4", "filename": "example/mini_core_hello_world.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c68e76c33bf8b8e3fc0dabb3f7d9133328a7ea6d/example%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c68e76c33bf8b8e3fc0dabb3f7d9133328a7ea6d/example%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core_hello_world.rs?ref=c68e76c33bf8b8e3fc0dabb3f7d9133328a7ea6d", "patch": "@@ -121,6 +121,8 @@ fn main() {\n     //return;\n \n     unsafe {\n+        printf(\"Hello %s\\n\\0\" as *const str as *const char, \"printf\\0\" as *const str as *const char);\n+\n         let hello: &[u8] = b\"Hello\\0\" as &[u8; 6];\n         let ptr: *const u8 = hello as *const [u8] as *const u8;\n         puts(ptr);"}, {"sha": "aa85349b9b8c30f36261b10a0390e67fd0ecdf95", "filename": "src/abi.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c68e76c33bf8b8e3fc0dabb3f7d9133328a7ea6d/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c68e76c33bf8b8e3fc0dabb3f7d9133328a7ea6d/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=c68e76c33bf8b8e3fc0dabb3f7d9133328a7ea6d", "patch": "@@ -191,12 +191,13 @@ pub fn ty_fn_sig<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, ty: Ty<'tcx>) -> ty::FnS\n pub fn get_function_name_and_sig<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     inst: Instance<'tcx>,\n+    support_vararg: bool\n ) -> (String, Signature) {\n     assert!(!inst.substs.needs_infer() && !inst.substs.has_param_types());\n     let fn_ty = inst.ty(tcx);\n     let fn_sig = ty_fn_sig(tcx, fn_ty);\n-    if fn_sig.variadic {\n-        unimpl!(\"Variadic functions are not yet supported\");\n+    if fn_sig.variadic && !support_vararg {\n+        unimpl!(\"Variadic function definitions are not yet supported\");\n     }\n     let sig = clif_sig_from_fn_sig(tcx, fn_sig);\n     (tcx.symbol_name(inst).as_str().to_string(), sig)\n@@ -208,7 +209,7 @@ pub fn import_function<'a, 'tcx: 'a>(\n     module: &mut Module<impl Backend>,\n     inst: Instance<'tcx>,\n ) -> FuncId {\n-    let (name, sig) = get_function_name_and_sig(tcx, inst);\n+    let (name, sig) = get_function_name_and_sig(tcx, inst, true);\n     module\n         .declare_function(&name, Linkage::Import, &sig)\n         .unwrap()\n@@ -659,6 +660,23 @@ pub fn codegen_call_inner<'a, 'tcx: 'a>(\n         fx.bcx.ins().call(func_ref, &call_args)\n     };\n \n+    // FIXME find a cleaner way to support varargs\n+    if fn_sig.variadic {\n+        if fn_sig.abi != Abi::C {\n+            unimpl!(\"Variadic call for non-C abi {:?}\", fn_sig.abi);\n+        }\n+        let sig_ref = fx.bcx.func.dfg.call_signature(call_inst).unwrap();\n+        let abi_params = call_args.into_iter().map(|arg| {\n+            let ty = fx.bcx.func.dfg.value_type(arg);\n+            if !ty.is_int() {\n+                // FIXME set %al to upperbound on float args once floats are supported\n+                unimpl!(\"Non int ty {:?} for variadic call\", ty);\n+            }\n+            AbiParam::new(ty)\n+        }).collect::<Vec<AbiParam>>();\n+        fx.bcx.func.dfg.signatures[sig_ref].params = abi_params;\n+    }\n+\n     match output_pass_mode {\n         PassMode::NoPass => {}\n         PassMode::ByVal(_) => {"}, {"sha": "d2f31de71d19803de73f3923a0bbdc60359bf1ff", "filename": "src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c68e76c33bf8b8e3fc0dabb3f7d9133328a7ea6d/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c68e76c33bf8b8e3fc0dabb3f7d9133328a7ea6d/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=c68e76c33bf8b8e3fc0dabb3f7d9133328a7ea6d", "patch": "@@ -65,7 +65,7 @@ fn trans_fn<'a, 'clif, 'tcx: 'a, B: Backend + 'static>(\n     let mir = tcx.instance_mir(instance.def);\n \n     // Step 2. Declare function\n-    let (name, sig) = get_function_name_and_sig(tcx, instance);\n+    let (name, sig) = get_function_name_and_sig(tcx, instance, false);\n     let func_id = cx.module\n         .declare_function(&name, linkage, &sig)\n         .unwrap();"}, {"sha": "20d792912961c92d877a60a61d20b10c67aadc4d", "filename": "src/main_shim.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c68e76c33bf8b8e3fc0dabb3f7d9133328a7ea6d/src%2Fmain_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c68e76c33bf8b8e3fc0dabb3f7d9133328a7ea6d/src%2Fmain_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain_shim.rs?ref=c68e76c33bf8b8e3fc0dabb3f7d9133328a7ea6d", "patch": "@@ -53,8 +53,7 @@ pub fn maybe_create_entry_wrapper<'a, 'tcx: 'a>(\n \n         let instance = Instance::mono(tcx, rust_main_def_id);\n \n-        let (main_name, main_sig) = get_function_name_and_sig(tcx, instance);\n-\n+        let (main_name, main_sig) = get_function_name_and_sig(tcx, instance, false);\n         let main_func_id = m\n             .declare_function(&main_name, Linkage::Import, &main_sig)\n             .unwrap();"}]}