{"sha": "58bd0ea73201747441a76c56a9b74252ef08e6ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4YmQwZWE3MzIwMTc0NzQ0MWE3NmM1NmE5Yjc0MjUyZWYwOGU2YmE=", "commit": {"author": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2019-05-23T17:45:22Z"}, "committer": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2019-06-03T03:44:51Z"}, "message": "deduplicate ty::Instance constructors", "tree": {"sha": "a324757f8cbb85c455f1b77f0593c308adfa01a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a324757f8cbb85c455f1b77f0593c308adfa01a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58bd0ea73201747441a76c56a9b74252ef08e6ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58bd0ea73201747441a76c56a9b74252ef08e6ba", "html_url": "https://github.com/rust-lang/rust/commit/58bd0ea73201747441a76c56a9b74252ef08e6ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58bd0ea73201747441a76c56a9b74252ef08e6ba/comments", "author": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8af151b30a31fef48a2173d7cc6aee50baa6d276", "url": "https://api.github.com/repos/rust-lang/rust/commits/8af151b30a31fef48a2173d7cc6aee50baa6d276", "html_url": "https://github.com/rust-lang/rust/commit/8af151b30a31fef48a2173d7cc6aee50baa6d276"}], "stats": {"total": 178, "additions": 53, "deletions": 125}, "files": [{"sha": "f0251917074d44f6ec5c4f30240c5721349a1249", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 38, "deletions": 27, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/58bd0ea73201747441a76c56a9b74252ef08e6ba/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bd0ea73201747441a76c56a9b74252ef08e6ba/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=58bd0ea73201747441a76c56a9b74252ef08e6ba", "patch": "@@ -4,6 +4,7 @@ use crate::hir::def_id::DefId;\n use crate::ty::{self, Ty, PolyFnSig, TypeFoldable, SubstsRef, TyCtxt};\n use crate::ty::print::{FmtPrinter, Printer};\n use crate::traits;\n+use crate::middle::lang_items::DropInPlaceFnLangItem;\n use rustc_target::spec::abi::Abi;\n use rustc_macros::HashStable;\n \n@@ -325,11 +326,47 @@ impl<'a, 'b, 'tcx> Instance<'tcx> {\n         let actual_kind = substs.closure_kind(def_id, tcx);\n \n         match needs_fn_once_adapter_shim(actual_kind, requested_kind) {\n-            Ok(true) => fn_once_adapter_instance(tcx, def_id, substs),\n+            Ok(true) => Instance::fn_once_adapter_instance(tcx, def_id, substs),\n             _ => Instance::new(def_id, substs.substs)\n         }\n     }\n \n+    pub fn resolve_drop_in_place(\n+        tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+        ty: Ty<'tcx>)\n+        -> ty::Instance<'tcx>\n+    {\n+        let def_id = tcx.require_lang_item(DropInPlaceFnLangItem);\n+        let substs = tcx.intern_substs(&[ty.into()]);\n+        Instance::resolve(tcx, ty::ParamEnv::reveal_all(), def_id, substs).unwrap()\n+    }\n+\n+    pub fn fn_once_adapter_instance(\n+        tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+        closure_did: DefId,\n+        substs: ty::ClosureSubsts<'tcx>)\n+        -> Instance<'tcx>\n+    {\n+        debug!(\"fn_once_adapter_shim({:?}, {:?})\",\n+               closure_did,\n+               substs);\n+        let fn_once = tcx.lang_items().fn_once_trait().unwrap();\n+        let call_once = tcx.associated_items(fn_once)\n+            .find(|it| it.kind == ty::AssocKind::Method)\n+            .unwrap().def_id;\n+        let def = ty::InstanceDef::ClosureOnceShim { call_once };\n+\n+        let self_ty = tcx.mk_closure(closure_did, substs);\n+\n+        let sig = substs.closure_sig(closure_did, tcx);\n+        let sig = tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), &sig);\n+        assert_eq!(sig.inputs().len(), 1);\n+        let substs = tcx.mk_substs_trait(self_ty, &[sig.inputs()[0].into()]);\n+\n+        debug!(\"fn_once_adapter_shim: self_ty={:?} sig={:?}\", self_ty, sig);\n+        Instance { def, substs }\n+    }\n+\n     pub fn is_vtable_shim(&self) -> bool {\n         if let InstanceDef::VtableShim(..) = self.def {\n             true\n@@ -438,29 +475,3 @@ fn needs_fn_once_adapter_shim<'a, 'tcx>(actual_closure_kind: ty::ClosureKind,\n         (ty::ClosureKind::FnOnce, _) => Err(())\n     }\n }\n-\n-fn fn_once_adapter_instance<'a, 'tcx>(\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    closure_did: DefId,\n-    substs: ty::ClosureSubsts<'tcx>)\n-    -> Instance<'tcx>\n-{\n-    debug!(\"fn_once_adapter_shim({:?}, {:?})\",\n-           closure_did,\n-           substs);\n-    let fn_once = tcx.lang_items().fn_once_trait().unwrap();\n-    let call_once = tcx.associated_items(fn_once)\n-        .find(|it| it.kind == ty::AssocKind::Method)\n-        .unwrap().def_id;\n-    let def = ty::InstanceDef::ClosureOnceShim { call_once };\n-\n-    let self_ty = tcx.mk_closure(closure_did, substs);\n-\n-    let sig = substs.closure_sig(closure_did, tcx);\n-    let sig = tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), &sig);\n-    assert_eq!(sig.inputs().len(), 1);\n-    let substs = tcx.mk_substs_trait(self_ty, &[sig.inputs()[0].into()]);\n-\n-    debug!(\"fn_once_adapter_shim: self_ty={:?} sig={:?}\", self_ty, sig);\n-    Instance { def, substs }\n-}"}, {"sha": "73065be9970925a31f414a54f87d5432e9484093", "filename": "src/librustc_codegen_ssa/meth.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58bd0ea73201747441a76c56a9b74252ef08e6ba/src%2Flibrustc_codegen_ssa%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bd0ea73201747441a76c56a9b74252ef08e6ba/src%2Flibrustc_codegen_ssa%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmeth.rs?ref=58bd0ea73201747441a76c56a9b74252ef08e6ba", "patch": "@@ -4,7 +4,7 @@ use rustc_mir::monomorphize;\n use crate::callee;\n use crate::traits::*;\n \n-use rustc::ty::{self, Ty};\n+use rustc::ty::{self, Ty, Instance};\n \n #[derive(Copy, Clone, Debug)]\n pub struct VirtualIndex(u64);\n@@ -103,7 +103,7 @@ pub fn get_vtable<'tcx, Cx: CodegenMethods<'tcx>>(\n     // `get_vtable` in rust_mir/interpret/traits.rs\n     // /////////////////////////////////////////////////////////////////////////////////////////////\n     let components: Vec<_> = [\n-        cx.get_fn(monomorphize::resolve_drop_in_place(cx.tcx(), ty)),\n+        cx.get_fn(Instance::resolve_drop_in_place(cx.tcx(), ty)),\n         cx.const_usize(layout.size.bytes()),\n         cx.const_usize(layout.align.abi.bytes())\n     ].iter().cloned().chain(methods).collect();"}, {"sha": "f2d4cd33229cef64f75a169ceea49ac093d1d5ea", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58bd0ea73201747441a76c56a9b74252ef08e6ba/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bd0ea73201747441a76c56a9b74252ef08e6ba/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=58bd0ea73201747441a76c56a9b74252ef08e6ba", "patch": "@@ -1,5 +1,5 @@\n use rustc::middle::lang_items;\n-use rustc::ty::{self, Ty, TypeFoldable};\n+use rustc::ty::{self, Ty, TypeFoldable, Instance};\n use rustc::ty::layout::{self, LayoutOf, HasTyCtxt, FnTypeExt};\n use rustc::mir::{self, Place, PlaceBase, Static, StaticKind};\n use rustc::mir::interpret::InterpError;\n@@ -310,7 +310,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     ) {\n         let ty = location.ty(self.mir, bx.tcx()).ty;\n         let ty = self.monomorphize(&ty);\n-        let drop_fn = monomorphize::resolve_drop_in_place(bx.tcx(), ty);\n+        let drop_fn = Instance::resolve_drop_in_place(bx.tcx(), ty);\n \n         if let ty::InstanceDef::DropGlue(_, None) = drop_fn.def {\n             // we don't actually need to drop anything."}, {"sha": "b11fe236833c16caee64391efd57a4159d701bcd", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58bd0ea73201747441a76c56a9b74252ef08e6ba/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bd0ea73201747441a76c56a9b74252ef08e6ba/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=58bd0ea73201747441a76c56a9b74252ef08e6ba", "patch": "@@ -1,4 +1,4 @@\n-use rustc::ty::{self, Ty, adjustment::{PointerCast}};\n+use rustc::ty::{self, Ty, adjustment::{PointerCast}, Instance};\n use rustc::ty::cast::{CastTy, IntTy};\n use rustc::ty::layout::{self, LayoutOf, HasTyCtxt};\n use rustc::mir;\n@@ -196,7 +196,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     mir::CastKind::Pointer(PointerCast::ClosureFnPointer(_)) => {\n                         match operand.layout.ty.sty {\n                             ty::Closure(def_id, substs) => {\n-                                let instance = monomorphize::resolve_closure(\n+                                let instance = Instance::resolve_closure(\n                                     bx.cx().tcx(), def_id, substs, ty::ClosureKind::FnOnce);\n                                 OperandValue::Immediate(bx.cx().get_fn(instance))\n                             }"}, {"sha": "a39af9640ac343bd6254de6692fc2a8863c99aa4", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/58bd0ea73201747441a76c56a9b74252ef08e6ba/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bd0ea73201747441a76c56a9b74252ef08e6ba/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=58bd0ea73201747441a76c56a9b74252ef08e6ba", "patch": "@@ -1,6 +1,7 @@\n use std::borrow::Cow;\n \n use rustc::{mir, ty};\n+use rustc::ty::Instance;\n use rustc::ty::layout::{self, TyLayout, LayoutOf};\n use syntax::source_map::Span;\n use rustc_target::spec::abi::Abi;\n@@ -112,7 +113,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n                 let ty = place.layout.ty;\n                 trace!(\"TerminatorKind::drop: {:?}, type {}\", location, ty);\n \n-                let instance = crate::monomorphize::resolve_drop_in_place(*self.tcx, ty);\n+                let instance = Instance::resolve_drop_in_place(*self.tcx, ty);\n                 self.drop_in_place(\n                     place,\n                     instance,"}, {"sha": "33cb1a097175d5df2755c16c98a34e8349c907a0", "filename": "src/librustc_mir/interpret/traits.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/58bd0ea73201747441a76c56a9b74252ef08e6ba/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bd0ea73201747441a76c56a9b74252ef08e6ba/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs?ref=58bd0ea73201747441a76c56a9b74252ef08e6ba", "patch": "@@ -1,4 +1,4 @@\n-use rustc::ty::{self, Ty};\n+use rustc::ty::{self, Ty, Instance};\n use rustc::ty::layout::{Size, Align, LayoutOf};\n use rustc::mir::interpret::{Scalar, Pointer, EvalResult, PointerArithmetic};\n \n@@ -55,8 +55,9 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n         );\n         let tcx = &*self.tcx;\n \n-        let drop = crate::monomorphize::resolve_drop_in_place(*tcx, ty);\n+        let drop = Instance::resolve_drop_in_place(*tcx, ty);\n         let drop = self.memory.create_fn_alloc(drop);\n+\n         // no need to do any alignment checks on the memory accesses below, because we know the\n         // allocation is correctly aligned as we created it above. Also we're only offsetting by\n         // multiples of `ptr_align`, which means that it will stay aligned to `ptr_align`."}, {"sha": "b808f64b0077fe24c4b9d58254869de3fdfababf", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/58bd0ea73201747441a76c56a9b74252ef08e6ba/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bd0ea73201747441a76c56a9b74252ef08e6ba/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=58bd0ea73201747441a76c56a9b74252ef08e6ba", "patch": "@@ -181,15 +181,15 @@ use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::mir::interpret::{AllocId, ConstValue};\n use rustc::middle::lang_items::{ExchangeMallocFnLangItem, StartFnLangItem};\n use rustc::ty::subst::{InternalSubsts, SubstsRef};\n-use rustc::ty::{self, TypeFoldable, Ty, TyCtxt, GenericParamDefKind};\n+use rustc::ty::{self, TypeFoldable, Ty, TyCtxt, GenericParamDefKind, Instance};\n use rustc::ty::adjustment::{CustomCoerceUnsized, PointerCast};\n use rustc::session::config::EntryFnType;\n use rustc::mir::{self, Location, Place, PlaceBase, Promoted, Static, StaticKind};\n use rustc::mir::visit::Visitor as MirVisitor;\n use rustc::mir::mono::MonoItem;\n use rustc::mir::interpret::{Scalar, GlobalId, GlobalAlloc, ErrorHandled};\n \n-use crate::monomorphize::{self, Instance};\n+use crate::monomorphize;\n use rustc::util::nodemap::{FxHashSet, FxHashMap, DefIdMap};\n use rustc::util::common::time;\n \n@@ -580,7 +580,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                 );\n                 match source_ty.sty {\n                     ty::Closure(def_id, substs) => {\n-                        let instance = monomorphize::resolve_closure(\n+                        let instance = Instance::resolve_closure(\n                             self.tcx, def_id, substs, ty::ClosureKind::FnOnce);\n                         if should_monomorphize_locally(self.tcx, &instance) {\n                             self.output.push(create_fn_mono_item(instance));\n@@ -684,7 +684,7 @@ fn visit_drop_use<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                             is_direct_call: bool,\n                             output: &mut Vec<MonoItem<'tcx>>)\n {\n-    let instance = monomorphize::resolve_drop_in_place(tcx, ty);\n+    let instance = Instance::resolve_drop_in_place(tcx, ty);\n     visit_instance_use(tcx, instance, is_direct_call, output);\n }\n "}, {"sha": "8dda352d5e665425b435a950faa62c1bce4d40b9", "filename": "src/librustc_mir/monomorphize/mod.rs", "status": "modified", "additions": 0, "deletions": 85, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/58bd0ea73201747441a76c56a9b74252ef08e6ba/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bd0ea73201747441a76c56a9b74252ef08e6ba/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs?ref=58bd0ea73201747441a76c56a9b74252ef08e6ba", "patch": "@@ -1,5 +1,3 @@\n-use rustc::hir::def_id::DefId;\n-use rustc::middle::lang_items::DropInPlaceFnLangItem;\n use rustc::traits;\n use rustc::ty::adjustment::CustomCoerceUnsized;\n use rustc::ty::{self, Ty, TyCtxt, Instance};\n@@ -54,89 +52,6 @@ pub fn assert_symbols_are_distinct<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>, mon\n     }\n }\n \n-fn fn_once_adapter_instance<'a, 'tcx>(\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    closure_did: DefId,\n-    substs: ty::ClosureSubsts<'tcx>,\n-    ) -> Instance<'tcx> {\n-    debug!(\"fn_once_adapter_shim({:?}, {:?})\",\n-           closure_did,\n-           substs);\n-    let fn_once = tcx.lang_items().fn_once_trait().unwrap();\n-    let call_once = tcx.associated_items(fn_once)\n-        .find(|it| it.kind == ty::AssocKind::Method)\n-        .unwrap().def_id;\n-    let def = ty::InstanceDef::ClosureOnceShim { call_once };\n-\n-    let self_ty = tcx.mk_closure(closure_did, substs);\n-\n-    let sig = substs.closure_sig(closure_did, tcx);\n-    let sig = tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), &sig);\n-    assert_eq!(sig.inputs().len(), 1);\n-    let substs = tcx.mk_substs_trait(self_ty, &[sig.inputs()[0].into()]);\n-\n-    debug!(\"fn_once_adapter_shim: self_ty={:?} sig={:?}\", self_ty, sig);\n-    Instance { def, substs }\n-}\n-\n-fn needs_fn_once_adapter_shim(actual_closure_kind: ty::ClosureKind,\n-                              trait_closure_kind: ty::ClosureKind)\n-                              -> Result<bool, ()>\n-{\n-    match (actual_closure_kind, trait_closure_kind) {\n-        (ty::ClosureKind::Fn, ty::ClosureKind::Fn) |\n-        (ty::ClosureKind::FnMut, ty::ClosureKind::FnMut) |\n-        (ty::ClosureKind::FnOnce, ty::ClosureKind::FnOnce) => {\n-            // No adapter needed.\n-           Ok(false)\n-        }\n-        (ty::ClosureKind::Fn, ty::ClosureKind::FnMut) => {\n-            // The closure fn `llfn` is a `fn(&self, ...)`.  We want a\n-            // `fn(&mut self, ...)`. In fact, at codegen time, these are\n-            // basically the same thing, so we can just return llfn.\n-            Ok(false)\n-        }\n-        (ty::ClosureKind::Fn, ty::ClosureKind::FnOnce) |\n-        (ty::ClosureKind::FnMut, ty::ClosureKind::FnOnce) => {\n-            // The closure fn `llfn` is a `fn(&self, ...)` or `fn(&mut\n-            // self, ...)`.  We want a `fn(self, ...)`. We can produce\n-            // this by doing something like:\n-            //\n-            //     fn call_once(self, ...) { call_mut(&self, ...) }\n-            //     fn call_once(mut self, ...) { call_mut(&mut self, ...) }\n-            //\n-            // These are both the same at codegen time.\n-            Ok(true)\n-        }\n-        _ => Err(()),\n-    }\n-}\n-\n-pub fn resolve_closure<'a, 'tcx> (\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    def_id: DefId,\n-    substs: ty::ClosureSubsts<'tcx>,\n-    requested_kind: ty::ClosureKind)\n-    -> Instance<'tcx>\n-{\n-    let actual_kind = substs.closure_kind(def_id, tcx);\n-\n-    match needs_fn_once_adapter_shim(actual_kind, requested_kind) {\n-        Ok(true) => fn_once_adapter_instance(tcx, def_id, substs),\n-        _ => Instance::new(def_id, substs.substs)\n-    }\n-}\n-\n-pub fn resolve_drop_in_place<'a, 'tcx>(\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    ty: Ty<'tcx>)\n-    -> ty::Instance<'tcx>\n-{\n-    let def_id = tcx.require_lang_item(DropInPlaceFnLangItem);\n-    let substs = tcx.intern_substs(&[ty.into()]);\n-    Instance::resolve(tcx, ty::ParamEnv::reveal_all(), def_id, substs).unwrap()\n-}\n-\n pub fn custom_coerce_unsize_info<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                            source_ty: Ty<'tcx>,\n                                            target_ty: Ty<'tcx>)"}]}