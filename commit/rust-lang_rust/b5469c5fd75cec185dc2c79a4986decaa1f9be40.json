{"sha": "b5469c5fd75cec185dc2c79a4986decaa1f9be40", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1NDY5YzVmZDc1Y2VjMTg1ZGMyYzc5YTQ5ODZkZWNhYTFmOWJlNDA=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-19T16:15:40Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-26T13:38:26Z"}, "message": "make `normalize` work on any type-foldable", "tree": {"sha": "d303a385e404c8be240f6be4cf7f0794897cb60a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d303a385e404c8be240f6be4cf7f0794897cb60a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5469c5fd75cec185dc2c79a4986decaa1f9be40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5469c5fd75cec185dc2c79a4986decaa1f9be40", "html_url": "https://github.com/rust-lang/rust/commit/b5469c5fd75cec185dc2c79a4986decaa1f9be40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5469c5fd75cec185dc2c79a4986decaa1f9be40/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "688aaf3bbb62cb331d2b40beb632281e27ef40cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/688aaf3bbb62cb331d2b40beb632281e27ef40cd", "html_url": "https://github.com/rust-lang/rust/commit/688aaf3bbb62cb331d2b40beb632281e27ef40cd"}], "stats": {"total": 30, "additions": 19, "deletions": 11}, "files": [{"sha": "50198406e847059d17df4d23c96b7ba2ee07aef5", "filename": "src/librustc/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b5469c5fd75cec185dc2c79a4986decaa1f9be40/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5469c5fd75cec185dc2c79a4986decaa1f9be40/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=b5469c5fd75cec185dc2c79a4986decaa1f9be40", "patch": "@@ -29,6 +29,7 @@ use ty::{self, TyCtxt};\n use ty::{ReEarlyBound, ReEmpty, ReErased, ReFree, ReStatic};\n use ty::{ReLateBound, ReScope, ReSkolemized, ReVar};\n use ty::{Region, RegionVid};\n+use ty::fold::TypeFoldable;\n \n mod graphviz;\n \n@@ -110,11 +111,15 @@ struct LexicalResolver<'cx, 'gcx: 'tcx, 'tcx: 'cx> {\n }\n \n impl<'cx, 'gcx, 'tcx> LexicalResolver<'cx, 'gcx, 'tcx> {\n+    fn tcx(&self) -> TyCtxt<'cx, 'gcx, 'tcx> {\n+        self.region_rels.tcx\n+    }\n+\n     fn infer_variable_values(\n         &mut self,\n         errors: &mut Vec<RegionResolutionError<'tcx>>,\n     ) -> LexicalRegionResolutions<'tcx> {\n-        let mut var_data = self.construct_var_data(self.region_rels.tcx);\n+        let mut var_data = self.construct_var_data(self.tcx());\n \n         // Dorky hack to cause `dump_constraints` to only get called\n         // if debug mode is enabled:\n@@ -255,7 +260,7 @@ impl<'cx, 'gcx, 'tcx> LexicalResolver<'cx, 'gcx, 'tcx> {\n     }\n \n     fn lub_concrete_regions(&self, a: Region<'tcx>, b: Region<'tcx>) -> Region<'tcx> {\n-        let tcx = self.region_rels.tcx;\n+        let tcx = self.tcx();\n         match (a, b) {\n             (&ty::ReCanonical(..), _)\n             | (_, &ty::ReCanonical(..))\n@@ -296,10 +301,10 @@ impl<'cx, 'gcx, 'tcx> LexicalResolver<'cx, 'gcx, 'tcx> {\n                 let fr_scope = match (a, b) {\n                     (&ReEarlyBound(ref br), _) | (_, &ReEarlyBound(ref br)) => self.region_rels\n                         .region_scope_tree\n-                        .early_free_scope(self.region_rels.tcx, br),\n+                        .early_free_scope(self.tcx(), br),\n                     (&ReFree(ref fr), _) | (_, &ReFree(ref fr)) => self.region_rels\n                         .region_scope_tree\n-                        .free_scope(self.region_rels.tcx, fr),\n+                        .free_scope(self.tcx(), fr),\n                     _ => bug!(),\n                 };\n                 let r_id = self.region_rels\n@@ -408,7 +413,7 @@ impl<'cx, 'gcx, 'tcx> LexicalResolver<'cx, 'gcx, 'tcx> {\n \n         for verify in &self.data.verifys {\n             debug!(\"collect_errors: verify={:?}\", verify);\n-            let sub = var_data.normalize(verify.region);\n+            let sub = var_data.normalize(self.tcx(), verify.region);\n \n             // This was an inference variable which didn't get\n             // constrained, therefore it can be assume to hold.\n@@ -712,11 +717,11 @@ impl<'cx, 'gcx, 'tcx> LexicalResolver<'cx, 'gcx, 'tcx> {\n     ) -> bool {\n         match bound {\n             VerifyBound::AnyRegion(rs) => rs.iter()\n-                .map(|&r| var_values.normalize(r))\n+                .map(|&r| var_values.normalize(self.tcx(), r))\n                 .any(|r| self.region_rels.is_subregion_of(min, r)),\n \n             VerifyBound::AllRegions(rs) => rs.iter()\n-                .map(|&r| var_values.normalize(r))\n+                .map(|&r| var_values.normalize(self.tcx(), r))\n                 .all(|r| self.region_rels.is_subregion_of(min, r)),\n \n             VerifyBound::AnyBound(bs) => bs.iter().any(|b| self.bound_is_met(b, var_values, min)),\n@@ -733,11 +738,14 @@ impl<'tcx> fmt::Debug for RegionAndOrigin<'tcx> {\n }\n \n impl<'tcx> LexicalRegionResolutions<'tcx> {\n-    fn normalize(&self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n-        match *r {\n-            ty::ReVar(rid) => self.resolve_var(rid),\n+    fn normalize<T>(&self, tcx: TyCtxt<'_, '_, 'tcx>, value: T) -> T\n+    where\n+        T: TypeFoldable<'tcx>,\n+    {\n+        tcx.fold_regions(&value, &mut false, |r, _db| match r {\n+            ty::ReVar(rid) => self.resolve_var(*rid),\n             _ => r,\n-        }\n+        })\n     }\n \n     fn value(&self, rid: RegionVid) -> &VarValue<'tcx> {"}]}