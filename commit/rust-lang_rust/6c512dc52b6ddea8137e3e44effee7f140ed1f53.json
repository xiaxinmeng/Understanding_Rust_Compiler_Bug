{"sha": "6c512dc52b6ddea8137e3e44effee7f140ed1f53", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjNTEyZGM1MmI2ZGRlYTgxMzdlM2U0NGVmZmVlN2YxNDBlZDFmNTM=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-08-25T16:24:16Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-08-25T16:36:10Z"}, "message": "Separate lifetime starts from alloca()\n\nCombining them seemed like a good idea at the time, but turns out that\nhandling lifetimes separately makes it somewhat easier to handle cases\nwhere we don't want the intrinsics, and let's you see more easily where\nthe start/end pairs are.", "tree": {"sha": "554284456458dcc13f0d49189b010107e57affa5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/554284456458dcc13f0d49189b010107e57affa5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c512dc52b6ddea8137e3e44effee7f140ed1f53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c512dc52b6ddea8137e3e44effee7f140ed1f53", "html_url": "https://github.com/rust-lang/rust/commit/6c512dc52b6ddea8137e3e44effee7f140ed1f53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c512dc52b6ddea8137e3e44effee7f140ed1f53/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3bd14ab112ff77565dbb57a69540bbae2607ee9", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3bd14ab112ff77565dbb57a69540bbae2607ee9", "html_url": "https://github.com/rust-lang/rust/commit/f3bd14ab112ff77565dbb57a69540bbae2607ee9"}], "stats": {"total": 52, "additions": 28, "deletions": 24}, "files": [{"sha": "57bac4d4f81bb6044b85f79cc406b72b6a5e8a19", "filename": "src/librustc_trans/trans/_match.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6c512dc52b6ddea8137e3e44effee7f140ed1f53/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c512dc52b6ddea8137e3e44effee7f140ed1f53/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2F_match.rs?ref=6c512dc52b6ddea8137e3e44effee7f140ed1f53", "patch": "@@ -1197,7 +1197,7 @@ fn compile_submatch_continue<'a, 'p, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n                     monomorphize::field_ty(bcx.tcx(), substs, field)\n                 }).unwrap();\n                 let llty = type_of::type_of(bcx.ccx(), unsized_ty);\n-                let scratch = alloca_no_lifetime(bcx, llty, \"__struct_field_fat_ptr\");\n+                let scratch = alloca(bcx, llty, \"__struct_field_fat_ptr\");\n                 let data = adt::trans_field_ptr(bcx, &*repr, struct_val, 0, arg_count);\n                 let len = Load(bcx, expr::get_meta(bcx, val.val));\n                 Store(bcx, data, expr::get_dataptr(bcx, scratch));\n@@ -1524,12 +1524,8 @@ fn create_bindings_map<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, pat: &ast::Pat,\n         match bm {\n             ast::BindByValue(_) if !moves_by_default || reassigned =>\n             {\n-                llmatch = alloca_no_lifetime(bcx,\n-                                             llvariable_ty.ptr_to(),\n-                                             \"__llmatch\");\n-                let llcopy = alloca_no_lifetime(bcx,\n-                                                llvariable_ty,\n-                                                &bcx.name(name));\n+                llmatch = alloca(bcx, llvariable_ty.ptr_to(), \"__llmatch\");\n+                let llcopy = alloca(bcx, llvariable_ty, &bcx.name(name));\n                 trmode = if moves_by_default {\n                     TrByMoveIntoCopy(llcopy)\n                 } else {\n@@ -1540,15 +1536,11 @@ fn create_bindings_map<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, pat: &ast::Pat,\n                 // in this case, the final type of the variable will be T,\n                 // but during matching we need to store a *T as explained\n                 // above\n-                llmatch = alloca_no_lifetime(bcx,\n-                                             llvariable_ty.ptr_to(),\n-                                             &bcx.name(name));\n+                llmatch = alloca(bcx, llvariable_ty.ptr_to(), &bcx.name(name));\n                 trmode = TrByMoveRef;\n             }\n             ast::BindByRef(_) => {\n-                llmatch = alloca_no_lifetime(bcx,\n-                                 llvariable_ty,\n-                                 &bcx.name(name));\n+                llmatch = alloca(bcx, llvariable_ty, &bcx.name(name));\n                 trmode = TrByRef;\n             }\n         };\n@@ -1749,6 +1741,7 @@ fn mk_binding_alloca<'blk, 'tcx, A, F>(bcx: Block<'blk, 'tcx>,\n \n     // Subtle: be sure that we *populate* the memory *before*\n     // we schedule the cleanup.\n+    call_lifetime_start(bcx, llval);\n     let bcx = populate(arg, bcx, datum);\n     bcx.fcx.schedule_lifetime_end(cleanup_scope, llval);\n     bcx.fcx.schedule_drop_mem(cleanup_scope, llval, var_ty, lvalue.dropflag_hint(bcx));"}, {"sha": "09cab294c47d5bdd4effdacb52cc23ff42415dc9", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6c512dc52b6ddea8137e3e44effee7f140ed1f53/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c512dc52b6ddea8137e3e44effee7f140ed1f53/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=6c512dc52b6ddea8137e3e44effee7f140ed1f53", "patch": "@@ -1025,12 +1025,6 @@ pub fn alloc_ty<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, t: Ty<'tcx>, name: &str) ->\n }\n \n pub fn alloca(cx: Block, ty: Type, name: &str) -> ValueRef {\n-    let p = alloca_no_lifetime(cx, ty, name);\n-    call_lifetime_start(cx, p);\n-    p\n-}\n-\n-pub fn alloca_no_lifetime(cx: Block, ty: Type, name: &str) -> ValueRef {\n     let _icx = push_ctxt(\"alloca\");\n     if cx.unreachable.get() {\n         unsafe {\n@@ -1742,7 +1736,9 @@ pub fn trans_named_tuple_constructor<'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n         expr::SaveIn(d) => d,\n         expr::Ignore => {\n             if !type_is_zero_size(ccx, result_ty) {\n-                alloc_ty(bcx, result_ty, \"constructor_result\")\n+                let llresult = alloc_ty(bcx, result_ty, \"constructor_result\");\n+                call_lifetime_start(bcx, llresult);\n+                llresult\n             } else {\n                 C_undef(type_of::type_of(ccx, result_ty).ptr_to())\n             }"}, {"sha": "266038990ff139adde6b6313ca7c2563781b7fdf", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c512dc52b6ddea8137e3e44effee7f140ed1f53/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c512dc52b6ddea8137e3e44effee7f140ed1f53/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=6c512dc52b6ddea8137e3e44effee7f140ed1f53", "patch": "@@ -725,7 +725,9 @@ pub fn trans_call_inner<'a, 'blk, 'tcx, F>(bcx: Block<'blk, 'tcx>,\n                     let llty = type_of::type_of(ccx, ret_ty);\n                     Some(common::C_undef(llty.ptr_to()))\n                 } else {\n-                    Some(alloc_ty(bcx, ret_ty, \"__llret\"))\n+                    let llresult = alloc_ty(bcx, ret_ty, \"__llret\");\n+                    call_lifetime_start(bcx, llresult);\n+                    Some(llresult)\n                 }\n             } else {\n                 None"}, {"sha": "b6acbde5a13485069f566d7a6a7121b145fbedc6", "filename": "src/librustc_trans/trans/cleanup.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6c512dc52b6ddea8137e3e44effee7f140ed1f53/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c512dc52b6ddea8137e3e44effee7f140ed1f53/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs?ref=6c512dc52b6ddea8137e3e44effee7f140ed1f53", "patch": "@@ -883,6 +883,7 @@ impl<'blk, 'tcx> CleanupHelperMethods<'blk, 'tcx> for FunctionContext<'blk, 'tcx\n             }\n             None => {\n                 let addr = base::alloca(pad_bcx, common::val_ty(llretval), \"\");\n+                base::call_lifetime_start(pad_bcx, addr);\n                 self.personality.set(Some(addr));\n                 build::Store(pad_bcx, llretval, addr);\n             }"}, {"sha": "80e618861073e77b3dcba1411c3a80ee6dd3c621", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c512dc52b6ddea8137e3e44effee7f140ed1f53/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c512dc52b6ddea8137e3e44effee7f140ed1f53/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=6c512dc52b6ddea8137e3e44effee7f140ed1f53", "patch": "@@ -504,7 +504,7 @@ impl<'a, 'tcx> FunctionContext<'a, 'tcx> {\n                         output: ty::FnOutput<'tcx>,\n                         name: &str) -> ValueRef {\n         if self.needs_ret_allocas {\n-            base::alloca_no_lifetime(bcx, match output {\n+            base::alloca(bcx, match output {\n                 ty::FnConverging(output_type) => type_of::type_of(bcx.ccx(), output_type),\n                 ty::FnDiverging => Type::void(bcx.ccx())\n             }, name)"}, {"sha": "44bebe71235b62e5049a2ed6e2c0c9339f04c12d", "filename": "src/librustc_trans/trans/datum.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c512dc52b6ddea8137e3e44effee7f140ed1f53/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c512dc52b6ddea8137e3e44effee7f140ed1f53/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs?ref=6c512dc52b6ddea8137e3e44effee7f140ed1f53", "patch": "@@ -306,6 +306,7 @@ pub fn lvalue_scratch_datum<'blk, 'tcx, A, F>(bcx: Block<'blk, 'tcx>,\n     let scratch = alloca(bcx, llty, name);\n \n     // Subtle. Populate the scratch memory *before* scheduling cleanup.\n+    call_lifetime_start(bcx, scratch);\n     let bcx = populate(arg, bcx, scratch);\n     bcx.fcx.schedule_lifetime_end(scope, scratch);\n     bcx.fcx.schedule_drop_mem(scope, scratch, ty, None);\n@@ -324,6 +325,7 @@ pub fn rvalue_scratch_datum<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                         -> Datum<'tcx, Rvalue> {\n     let llty = type_of::type_of(bcx.ccx(), ty);\n     let scratch = alloca(bcx, llty, name);\n+    call_lifetime_start(bcx, scratch);\n     Datum::new(scratch, ty, Rvalue::new(ByRef))\n }\n "}, {"sha": "4736bbad5c2643f8f4687e4ec21a2725efd3d848", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6c512dc52b6ddea8137e3e44effee7f140ed1f53/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c512dc52b6ddea8137e3e44effee7f140ed1f53/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=6c512dc52b6ddea8137e3e44effee7f140ed1f53", "patch": "@@ -248,6 +248,7 @@ pub fn trans<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         } else {\n             let llty = type_of::type_of(bcx.ccx(), const_ty);\n             let scratch = alloca(bcx, llty, \"const\");\n+            call_lifetime_start(bcx, scratch);\n             let lldest = if !const_ty.is_structural() {\n                 // Cast pointer to slot, because constants have different types.\n                 PointerCast(bcx, scratch, val_ty(global))\n@@ -412,6 +413,7 @@ fn apply_adjustments<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                 let llty = type_of::type_of(bcx.ccx(), target);\n \n                 let scratch = alloca(bcx, llty, \"__coerce_target\");\n+                call_lifetime_start(bcx, scratch);\n                 let target_datum = Datum::new(scratch, target,\n                                               Rvalue::new(ByRef));\n                 bcx = coerce_unsized(bcx, expr.span, source_datum, target_datum);\n@@ -1445,7 +1447,11 @@ pub fn trans_adt<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n     // temporary stack slot\n     let addr = match dest {\n         SaveIn(pos) => pos,\n-        Ignore => alloc_ty(bcx, ty, \"temp\"),\n+        Ignore => {\n+            let llresult = alloc_ty(bcx, ty, \"temp\");\n+            call_lifetime_start(bcx, llresult);\n+            llresult\n+        }\n     };\n \n     // This scope holds intermediates that must be cleaned should"}, {"sha": "15ad7a8fdc32dba3531d287d9d760ae15fd4b775", "filename": "src/librustc_trans/trans/glue.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6c512dc52b6ddea8137e3e44effee7f140ed1f53/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c512dc52b6ddea8137e3e44effee7f140ed1f53/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fglue.rs?ref=6c512dc52b6ddea8137e3e44effee7f140ed1f53", "patch": "@@ -188,6 +188,7 @@ pub fn drop_ty_immediate<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                      -> Block<'blk, 'tcx> {\n     let _icx = push_ctxt(\"drop_ty_immediate\");\n     let vp = alloca(bcx, type_of(bcx.ccx(), t), \"\");\n+    call_lifetime_start(bcx, vp);\n     store_ty(bcx, v, vp, t);\n     drop_ty_core(bcx, vp, t, debug_loc, skip_dtor, None)\n }"}, {"sha": "93f79b98c85403100932a3aa29a1ac049186474b", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c512dc52b6ddea8137e3e44effee7f140ed1f53/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c512dc52b6ddea8137e3e44effee7f140ed1f53/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=6c512dc52b6ddea8137e3e44effee7f140ed1f53", "patch": "@@ -393,7 +393,9 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n         expr::SaveIn(d) => d,\n         expr::Ignore => {\n             if !type_is_zero_size(ccx, ret_ty) {\n-                alloc_ty(bcx, ret_ty, \"intrinsic_result\")\n+                let llresult = alloc_ty(bcx, ret_ty, \"intrinsic_result\");\n+                call_lifetime_start(bcx, llresult);\n+                llresult\n             } else {\n                 C_undef(llret_ty.ptr_to())\n             }"}, {"sha": "41c6f827958ecd6c4547e0cc81e018b82fd28a67", "filename": "src/librustc_trans/trans/tvec.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6c512dc52b6ddea8137e3e44effee7f140ed1f53/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c512dc52b6ddea8137e3e44effee7f140ed1f53/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs?ref=6c512dc52b6ddea8137e3e44effee7f140ed1f53", "patch": "@@ -111,6 +111,7 @@ pub fn trans_slice_vec<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     // Always create an alloca even if zero-sized, to preserve\n     // the non-null invariant of the inner slice ptr\n     let llfixed = base::alloca(bcx, llfixed_ty, \"\");\n+    call_lifetime_start(bcx, llfixed);\n \n     if count > 0 {\n         // Arrange for the backing array to be cleaned up."}]}