{"sha": "9b91b9c10e3c87ed333a1e34c4f46ed68f1eee06", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliOTFiOWMxMGUzYzg3ZWQzMzNhMWUzNGM0ZjQ2ZWQ2OGYxZWVlMDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-26T17:33:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-26T17:33:50Z"}, "message": "Auto merge of #63901 - estebank:unknown-receiver-type, r=zackmdavis\n\nPoint at method call on missing annotation error\n\nMake it clearer where the type name that couldn't be inferred comes from.\n\nBefore:\n\n```\nerror[E0282]: type annotations needed\n --> src/test/ui/span/type-annotations-needed-expr.rs:2:13\n  |\n2 |     let _ = (vec![1,2,3]).into_iter().sum() as f64; //~ ERROR E0282\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type for `S`\n  |\n  = note: type must be known at this point\n```\nafter\n```\nerror[E0282]: type annotations needed\n --> src/test/ui/span/type-annotations-needed-expr.rs:2:39\n  |\n2 |     let _ = (vec![1,2,3]).into_iter().sum() as f64; //~ ERROR E0282\n  |                                       ^^^ cannot infer type for `S`\n  |\n  = note: type must be known at this point\n```\n\nCC #63852.", "tree": {"sha": "479cc1dd1e1799c3a7ad529e2534d866c21dfd93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/479cc1dd1e1799c3a7ad529e2534d866c21dfd93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b91b9c10e3c87ed333a1e34c4f46ed68f1eee06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b91b9c10e3c87ed333a1e34c4f46ed68f1eee06", "html_url": "https://github.com/rust-lang/rust/commit/9b91b9c10e3c87ed333a1e34c4f46ed68f1eee06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b91b9c10e3c87ed333a1e34c4f46ed68f1eee06/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fa8f140233047fb0211dbaee531a290bcfeae7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fa8f140233047fb0211dbaee531a290bcfeae7e", "html_url": "https://github.com/rust-lang/rust/commit/9fa8f140233047fb0211dbaee531a290bcfeae7e"}, {"sha": "8458eba41bb1ae7848143f33c610b59e9614ec9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8458eba41bb1ae7848143f33c610b59e9614ec9b", "html_url": "https://github.com/rust-lang/rust/commit/8458eba41bb1ae7848143f33c610b59e9614ec9b"}], "stats": {"total": 63, "additions": 51, "deletions": 12}, "files": [{"sha": "5e0f973fdd310dec358d30a1d0853bc153d79fe0", "filename": "src/librustc/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 32, "deletions": 7, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/9b91b9c10e3c87ed333a1e34c4f46ed68f1eee06/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b91b9c10e3c87ed333a1e34c4f46ed68f1eee06/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=9b91b9c10e3c87ed333a1e34c4f46ed68f1eee06", "patch": "@@ -150,12 +150,12 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         &self,\n         ty: Ty<'tcx>,\n         highlight: Option<ty::print::RegionHighlightMode>,\n-    ) -> String {\n+    ) -> (String, Option<Span>) {\n         if let ty::Infer(ty::TyVar(ty_vid)) = ty.sty {\n             let ty_vars = self.type_variables.borrow();\n-            if let TypeVariableOriginKind::TypeParameterDefinition(name) =\n-                ty_vars.var_origin(ty_vid).kind {\n-                return name.to_string();\n+            let var_origin = ty_vars.var_origin(ty_vid);\n+            if let TypeVariableOriginKind::TypeParameterDefinition(name) = var_origin.kind {\n+                return (name.to_string(), Some(var_origin.span));\n             }\n         }\n \n@@ -165,7 +165,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             printer.region_highlight_mode = highlight;\n         }\n         let _ = ty.print(printer);\n-        s\n+        (s, None)\n     }\n \n     pub fn need_type_info_err(\n@@ -175,7 +175,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         ty: Ty<'tcx>,\n     ) -> DiagnosticBuilder<'tcx> {\n         let ty = self.resolve_vars_if_possible(&ty);\n-        let name = self.extract_type_name(&ty, None);\n+        let (name, name_sp) = self.extract_type_name(&ty, None);\n \n         let mut local_visitor = FindLocalByTypeVisitor::new(&self, ty, &self.tcx.hir());\n         let ty_to_string = |ty: Ty<'tcx>| -> String {\n@@ -200,6 +200,14 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         }\n         let err_span = if let Some(pattern) = local_visitor.found_arg_pattern {\n             pattern.span\n+        } else if let Some(span) = name_sp {\n+            // `span` here lets us point at `sum` instead of the entire right hand side expr:\n+            // error[E0282]: type annotations needed\n+            //  --> file2.rs:3:15\n+            //   |\n+            // 3 |     let _ = x.sum() as f64;\n+            //   |               ^^^ cannot infer type for `S`\n+            span\n         } else {\n             span\n         };\n@@ -325,6 +333,23 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             };\n             err.span_label(pattern.span, msg);\n         }\n+        // Instead of the following:\n+        // error[E0282]: type annotations needed\n+        //  --> file2.rs:3:15\n+        //   |\n+        // 3 |     let _ = x.sum() as f64;\n+        //   |             --^^^--------- cannot infer type for `S`\n+        //   |\n+        //   = note: type must be known at this point\n+        // We want:\n+        // error[E0282]: type annotations needed\n+        //  --> file2.rs:3:15\n+        //   |\n+        // 3 |     let _ = x.sum() as f64;\n+        //   |               ^^^ cannot infer type for `S`\n+        //   |\n+        //   = note: type must be known at this point\n+        let span = name_sp.unwrap_or(span);\n         if !err.span.span_labels().iter().any(|span_label| {\n                 span_label.label.is_some() && span_label.span == span\n             }) && local_visitor.found_arg_pattern.is_none()\n@@ -342,7 +367,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         ty: Ty<'tcx>,\n     ) -> DiagnosticBuilder<'tcx> {\n         let ty = self.resolve_vars_if_possible(&ty);\n-        let name = self.extract_type_name(&ty, None);\n+        let name = self.extract_type_name(&ty, None).0;\n         let mut err = struct_span_err!(\n             self.tcx.sess, span, E0698, \"type inside {} must be known in this context\", kind,\n         );"}, {"sha": "75a31628a54b6771bfbad90e5843132a23ea285b", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b91b9c10e3c87ed333a1e34c4f46ed68f1eee06/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b91b9c10e3c87ed333a1e34c4f46ed68f1eee06/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs?ref=9b91b9c10e3c87ed333a1e34c4f46ed68f1eee06", "patch": "@@ -413,7 +413,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     ) -> Option<RegionName> {\n         let mut highlight = RegionHighlightMode::default();\n         highlight.highlighting_region_vid(needle_fr, *counter);\n-        let type_name = infcx.extract_type_name(&argument_ty, Some(highlight));\n+        let type_name = infcx.extract_type_name(&argument_ty, Some(highlight)).0;\n \n         debug!(\n             \"give_name_if_we_cannot_match_hir_ty: type_name={:?} needle_fr={:?}\",\n@@ -695,7 +695,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n \n         let mut highlight = RegionHighlightMode::default();\n         highlight.highlighting_region_vid(fr, *counter);\n-        let type_name = infcx.extract_type_name(&return_ty, Some(highlight));\n+        let type_name = infcx.extract_type_name(&return_ty, Some(highlight)).0;\n \n         let mir_hir_id = tcx.hir().as_local_hir_id(mir_def_id).expect(\"non-local mir\");\n \n@@ -758,7 +758,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n \n         let mut highlight = RegionHighlightMode::default();\n         highlight.highlighting_region_vid(fr, *counter);\n-        let type_name = infcx.extract_type_name(&yield_ty, Some(highlight));\n+        let type_name = infcx.extract_type_name(&yield_ty, Some(highlight)).0;\n \n         let mir_hir_id = tcx.hir().as_local_hir_id(mir_def_id).expect(\"non-local mir\");\n "}, {"sha": "30c9adb1dce72312cb88a7a7b25aed90e060d1db", "filename": "src/test/ui/span/issue-42234-unknown-receiver-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b91b9c10e3c87ed333a1e34c4f46ed68f1eee06/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b91b9c10e3c87ed333a1e34c4f46ed68f1eee06/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.stderr?ref=9b91b9c10e3c87ed333a1e34c4f46ed68f1eee06", "patch": "@@ -1,10 +1,10 @@\n error[E0282]: type annotations needed for `std::option::Option<_>`\n-  --> $DIR/issue-42234-unknown-receiver-type.rs:7:5\n+  --> $DIR/issue-42234-unknown-receiver-type.rs:7:7\n    |\n LL |     let x: Option<_> = None;\n    |         - consider giving `x` the explicit type `std::option::Option<_>`, where the type parameter `T` is specified\n LL |     x.unwrap().method_that_could_exist_on_some_type();\n-   |     ^^^^^^^^^^ cannot infer type for `T`\n+   |       ^^^^^^ cannot infer type for `T`\n    |\n    = note: type must be known at this point\n "}, {"sha": "f64dab4d7bc68033c2a06d3e256348a9e399b07d", "filename": "src/test/ui/span/type-annotations-needed-expr.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b91b9c10e3c87ed333a1e34c4f46ed68f1eee06/src%2Ftest%2Fui%2Fspan%2Ftype-annotations-needed-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b91b9c10e3c87ed333a1e34c4f46ed68f1eee06/src%2Ftest%2Fui%2Fspan%2Ftype-annotations-needed-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Ftype-annotations-needed-expr.rs?ref=9b91b9c10e3c87ed333a1e34c4f46ed68f1eee06", "patch": "@@ -0,0 +1,3 @@\n+fn main() {\n+    let _ = (vec![1,2,3]).into_iter().sum() as f64; //~ ERROR E0282\n+}"}, {"sha": "e32a542bb7a8c2f26ad83f6efb23b945c8ee9c1c", "filename": "src/test/ui/span/type-annotations-needed-expr.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9b91b9c10e3c87ed333a1e34c4f46ed68f1eee06/src%2Ftest%2Fui%2Fspan%2Ftype-annotations-needed-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b91b9c10e3c87ed333a1e34c4f46ed68f1eee06/src%2Ftest%2Fui%2Fspan%2Ftype-annotations-needed-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Ftype-annotations-needed-expr.stderr?ref=9b91b9c10e3c87ed333a1e34c4f46ed68f1eee06", "patch": "@@ -0,0 +1,11 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/type-annotations-needed-expr.rs:2:39\n+   |\n+LL |     let _ = (vec![1,2,3]).into_iter().sum() as f64;\n+   |                                       ^^^ cannot infer type for `S`\n+   |\n+   = note: type must be known at this point\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}]}