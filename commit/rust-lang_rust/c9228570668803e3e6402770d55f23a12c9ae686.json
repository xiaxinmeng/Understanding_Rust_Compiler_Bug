{"sha": "c9228570668803e3e6402770d55f23a12c9ae686", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5MjI4NTcwNjY4ODAzZTNlNjQwMjc3MGQ1NWYyM2ExMmM5YWU2ODY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-27T13:45:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-27T13:45:22Z"}, "message": "Auto merge of #79318 - cjgillot:fitem, r=lcnr\n\nStore HIR ForeignItem in a side table\n\nIn a similar fashion to Item, ImplItem and TraitItem.", "tree": {"sha": "74e55e8a546482ed62e35cb6f6515ae530910f7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74e55e8a546482ed62e35cb6f6515ae530910f7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9228570668803e3e6402770d55f23a12c9ae686", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9228570668803e3e6402770d55f23a12c9ae686", "html_url": "https://github.com/rust-lang/rust/commit/c9228570668803e3e6402770d55f23a12c9ae686", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9228570668803e3e6402770d55f23a12c9ae686/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "361543d776d832b42f022f5b3aa1ab77263bc4a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/361543d776d832b42f022f5b3aa1ab77263bc4a9", "html_url": "https://github.com/rust-lang/rust/commit/361543d776d832b42f022f5b3aa1ab77263bc4a9"}, {"sha": "d6b22fa534638c2823c31bca2946e5fdbbad07cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6b22fa534638c2823c31bca2946e5fdbbad07cf", "html_url": "https://github.com/rust-lang/rust/commit/d6b22fa534638c2823c31bca2946e5fdbbad07cf"}], "stats": {"total": 626, "additions": 400, "deletions": 226}, "files": [{"sha": "eef6d38aa0584eb407b0051910258811c80384e8", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=c9228570668803e3e6402770d55f23a12c9ae686", "patch": "@@ -43,6 +43,7 @@ impl<'a> Visitor<'a> for ItemLowerer<'a, '_, '_> {\n                 items: BTreeSet::new(),\n                 trait_items: BTreeSet::new(),\n                 impl_items: BTreeSet::new(),\n+                foreign_items: BTreeSet::new(),\n             },\n         );\n \n@@ -105,6 +106,18 @@ impl<'a> Visitor<'a> for ItemLowerer<'a, '_, '_> {\n \n         visit::walk_assoc_item(self, item, ctxt);\n     }\n+\n+    fn visit_foreign_item(&mut self, item: &'a ForeignItem) {\n+        self.lctx.allocate_hir_id_counter(item.id);\n+        self.lctx.with_hir_id_owner(item.id, |lctx| {\n+            let hir_item = lctx.lower_foreign_item(item);\n+            let id = hir::ForeignItemId { hir_id: hir_item.hir_id };\n+            lctx.foreign_items.insert(id, hir_item);\n+            lctx.modules.get_mut(&lctx.current_module).unwrap().foreign_items.insert(id);\n+        });\n+\n+        visit::walk_foreign_item(self, item);\n+    }\n }\n \n impl<'hir> LoweringContext<'_, 'hir> {\n@@ -304,7 +317,12 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 })\n             }\n             ItemKind::Mod(ref m) => hir::ItemKind::Mod(self.lower_mod(m)),\n-            ItemKind::ForeignMod(ref nm) => hir::ItemKind::ForeignMod(self.lower_foreign_mod(nm)),\n+            ItemKind::ForeignMod(ref fm) => hir::ItemKind::ForeignMod {\n+                abi: fm.abi.map_or(abi::Abi::C, |abi| self.lower_abi(abi)),\n+                items: self\n+                    .arena\n+                    .alloc_from_iter(fm.items.iter().map(|x| self.lower_foreign_item_ref(x))),\n+            },\n             ItemKind::GlobalAsm(ref ga) => hir::ItemKind::GlobalAsm(self.lower_global_asm(ga)),\n             ItemKind::TyAlias(_, ref gen, _, Some(ref ty)) => {\n                 // We lower\n@@ -704,10 +722,12 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         }\n     }\n \n-    fn lower_foreign_mod(&mut self, fm: &ForeignMod) -> hir::ForeignMod<'hir> {\n-        hir::ForeignMod {\n-            abi: fm.abi.map_or(abi::Abi::C, |abi| self.lower_abi(abi)),\n-            items: self.arena.alloc_from_iter(fm.items.iter().map(|x| self.lower_foreign_item(x))),\n+    fn lower_foreign_item_ref(&mut self, i: &ForeignItem) -> hir::ForeignItemRef<'hir> {\n+        hir::ForeignItemRef {\n+            id: hir::ForeignItemId { hir_id: self.lower_node_id(i.id) },\n+            ident: i.ident,\n+            span: i.span,\n+            vis: self.lower_visibility(&i.vis, Some(i.id)),\n         }\n     }\n "}, {"sha": "2e1b5a74a7b7e03f4fd280a321d5afed3844437f", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=c9228570668803e3e6402770d55f23a12c9ae686", "patch": "@@ -101,6 +101,7 @@ struct LoweringContext<'a, 'hir: 'a> {\n \n     trait_items: BTreeMap<hir::TraitItemId, hir::TraitItem<'hir>>,\n     impl_items: BTreeMap<hir::ImplItemId, hir::ImplItem<'hir>>,\n+    foreign_items: BTreeMap<hir::ForeignItemId, hir::ForeignItem<'hir>>,\n     bodies: BTreeMap<hir::BodyId, hir::Body<'hir>>,\n     exported_macros: Vec<hir::MacroDef<'hir>>,\n     non_exported_macro_attrs: Vec<ast::Attribute>,\n@@ -298,6 +299,7 @@ pub fn lower_crate<'a, 'hir>(\n         items: BTreeMap::new(),\n         trait_items: BTreeMap::new(),\n         impl_items: BTreeMap::new(),\n+        foreign_items: BTreeMap::new(),\n         bodies: BTreeMap::new(),\n         trait_impls: BTreeMap::new(),\n         modules: BTreeMap::new(),\n@@ -485,6 +487,11 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 visit::walk_assoc_item(self, item, ctxt);\n             }\n \n+            fn visit_foreign_item(&mut self, item: &'tcx ForeignItem) {\n+                self.lctx.allocate_hir_id_counter(item.id);\n+                visit::walk_foreign_item(self, item);\n+            }\n+\n             fn visit_ty(&mut self, t: &'tcx Ty) {\n                 match t.kind {\n                     // Mirrors the case in visit::walk_ty\n@@ -548,6 +555,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             items: self.items,\n             trait_items: self.trait_items,\n             impl_items: self.impl_items,\n+            foreign_items: self.foreign_items,\n             bodies: self.bodies,\n             body_ids,\n             trait_impls: self.trait_impls,"}, {"sha": "44dfdcfccab9b5367e2757e01ff3b9fbe53eade5", "filename": "compiler/rustc_hir/src/arena.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_hir%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_hir%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Farena.rs?ref=c9228570668803e3e6402770d55f23a12c9ae686", "patch": "@@ -29,6 +29,7 @@ macro_rules! arena_types {\n             [] field_pat: rustc_hir::FieldPat<$tcx>,\n             [] fn_decl: rustc_hir::FnDecl<$tcx>,\n             [] foreign_item: rustc_hir::ForeignItem<$tcx>,\n+            [few] foreign_item_ref: rustc_hir::ForeignItemRef<$tcx>,\n             [] impl_item_ref: rustc_hir::ImplItemRef<$tcx>,\n             [few] inline_asm: rustc_hir::InlineAsm<$tcx>,\n             [few] llvm_inline_asm: rustc_hir::LlvmInlineAsm<$tcx>,"}, {"sha": "f01d44171056f44c724df69d592fff9bed16876d", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 42, "deletions": 10, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=c9228570668803e3e6402770d55f23a12c9ae686", "patch": "@@ -579,6 +579,7 @@ pub struct ModuleItems {\n     pub items: BTreeSet<HirId>,\n     pub trait_items: BTreeSet<TraitItemId>,\n     pub impl_items: BTreeSet<ImplItemId>,\n+    pub foreign_items: BTreeSet<ForeignItemId>,\n }\n \n /// A type representing only the top-level module.\n@@ -612,6 +613,7 @@ pub struct Crate<'hir> {\n \n     pub trait_items: BTreeMap<TraitItemId, TraitItem<'hir>>,\n     pub impl_items: BTreeMap<ImplItemId, ImplItem<'hir>>,\n+    pub foreign_items: BTreeMap<ForeignItemId, ForeignItem<'hir>>,\n     pub bodies: BTreeMap<BodyId, Body<'hir>>,\n     pub trait_impls: BTreeMap<DefId, Vec<HirId>>,\n \n@@ -644,6 +646,10 @@ impl Crate<'hir> {\n         &self.impl_items[&id]\n     }\n \n+    pub fn foreign_item(&self, id: ForeignItemId) -> &ForeignItem<'hir> {\n+        &self.foreign_items[&id]\n+    }\n+\n     pub fn body(&self, id: BodyId) -> &Body<'hir> {\n         &self.bodies[&id]\n     }\n@@ -673,6 +679,10 @@ impl Crate<'_> {\n         for impl_item in self.impl_items.values() {\n             visitor.visit_impl_item(impl_item);\n         }\n+\n+        for foreign_item in self.foreign_items.values() {\n+            visitor.visit_foreign_item(foreign_item);\n+        }\n     }\n \n     /// A parallel version of `visit_all_item_likes`.\n@@ -695,6 +705,11 @@ impl Crate<'_> {\n                 par_for_each_in(&self.impl_items, |(_, impl_item)| {\n                     visitor.visit_impl_item(impl_item);\n                 });\n+            },\n+            {\n+                par_for_each_in(&self.foreign_items, |(_, foreign_item)| {\n+                    visitor.visit_foreign_item(foreign_item);\n+                });\n             }\n         );\n     }\n@@ -1840,7 +1855,7 @@ pub struct FnSig<'hir> {\n }\n \n // The bodies for items are stored \"out of line\", in a separate\n-// hashmap in the `Crate`. Here we just record the node-id of the item\n+// hashmap in the `Crate`. Here we just record the hir-id of the item\n // so it can fetched later.\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Encodable, Debug)]\n pub struct TraitItemId {\n@@ -1884,7 +1899,7 @@ pub enum TraitItemKind<'hir> {\n }\n \n // The bodies for items are stored \"out of line\", in a separate\n-// hashmap in the `Crate`. Here we just record the node-id of the item\n+// hashmap in the `Crate`. Here we just record the hir-id of the item\n // so it can fetched later.\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Encodable, Debug)]\n pub struct ImplItemId {\n@@ -2269,12 +2284,6 @@ pub struct Mod<'hir> {\n     pub item_ids: &'hir [ItemId],\n }\n \n-#[derive(Debug, HashStable_Generic)]\n-pub struct ForeignMod<'hir> {\n-    pub abi: Abi,\n-    pub items: &'hir [ForeignItem<'hir>],\n-}\n-\n #[derive(Encodable, Debug, HashStable_Generic)]\n pub struct GlobalAsm {\n     pub asm: Symbol,\n@@ -2432,7 +2441,7 @@ impl VariantData<'hir> {\n }\n \n // The bodies for items are stored \"out of line\", in a separate\n-// hashmap in the `Crate`. Here we just record the node-id of the item\n+// hashmap in the `Crate`. Here we just record the hir-id of the item\n // so it can fetched later.\n #[derive(Copy, Clone, Encodable, Debug)]\n pub struct ItemId {\n@@ -2521,7 +2530,7 @@ pub enum ItemKind<'hir> {\n     /// A module.\n     Mod(Mod<'hir>),\n     /// An external module, e.g. `extern { .. }`.\n-    ForeignMod(ForeignMod<'hir>),\n+    ForeignMod { abi: Abi, items: &'hir [ForeignItemRef<'hir>] },\n     /// Module-level inline assembly (from `global_asm!`).\n     GlobalAsm(&'hir GlobalAsm),\n     /// A type alias, e.g., `type Foo = Bar<u8>`.\n@@ -2614,6 +2623,29 @@ pub enum AssocItemKind {\n     Type,\n }\n \n+// The bodies for items are stored \"out of line\", in a separate\n+// hashmap in the `Crate`. Here we just record the hir-id of the item\n+// so it can fetched later.\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Encodable, Debug)]\n+pub struct ForeignItemId {\n+    pub hir_id: HirId,\n+}\n+\n+/// A reference from a foreign block to one of its items. This\n+/// contains the item's ID, naturally, but also the item's name and\n+/// some other high-level details (like whether it is an associated\n+/// type or method, and whether it is public). This allows other\n+/// passes to find the impl they want without loading the ID (which\n+/// means fewer edges in the incremental compilation graph).\n+#[derive(Debug, HashStable_Generic)]\n+pub struct ForeignItemRef<'hir> {\n+    pub id: ForeignItemId,\n+    #[stable_hasher(project(name))]\n+    pub ident: Ident,\n+    pub span: Span,\n+    pub vis: Visibility<'hir>,\n+}\n+\n #[derive(Debug, HashStable_Generic)]\n pub struct ForeignItem<'hir> {\n     #[stable_hasher(project(name))]"}, {"sha": "3e8fc689acf7a83987b838055134408824dfe752", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=c9228570668803e3e6402770d55f23a12c9ae686", "patch": "@@ -64,6 +64,10 @@ where\n     fn visit_impl_item(&mut self, impl_item: &'hir ImplItem<'hir>) {\n         self.visitor.visit_impl_item(impl_item);\n     }\n+\n+    fn visit_foreign_item(&mut self, foreign_item: &'hir ForeignItem<'hir>) {\n+        self.visitor.visit_foreign_item(foreign_item);\n+    }\n }\n \n pub trait IntoVisitor<'hir> {\n@@ -88,6 +92,10 @@ where\n     fn visit_impl_item(&self, impl_item: &'hir ImplItem<'hir>) {\n         self.0.into_visitor().visit_impl_item(impl_item);\n     }\n+\n+    fn visit_foreign_item(&self, foreign_item: &'hir ForeignItem<'hir>) {\n+        self.0.into_visitor().visit_foreign_item(foreign_item);\n+    }\n }\n \n #[derive(Copy, Clone)]\n@@ -128,6 +136,7 @@ pub trait Map<'hir> {\n     fn item(&self, id: HirId) -> &'hir Item<'hir>;\n     fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir>;\n     fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir>;\n+    fn foreign_item(&self, id: ForeignItemId) -> &'hir ForeignItem<'hir>;\n }\n \n /// An erased version of `Map<'hir>`, using dynamic dispatch.\n@@ -150,6 +159,9 @@ impl<'hir> Map<'hir> for ErasedMap<'hir> {\n     fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir> {\n         self.0.impl_item(id)\n     }\n+    fn foreign_item(&self, id: ForeignItemId) -> &'hir ForeignItem<'hir> {\n+        self.0.foreign_item(id)\n+    }\n }\n \n /// Specifies what nested things a visitor wants to visit. The most\n@@ -277,6 +289,14 @@ pub trait Visitor<'v>: Sized {\n         walk_list!(self, visit_impl_item, opt_item);\n     }\n \n+    /// Like `visit_nested_item()`, but for foreign items. See\n+    /// `visit_nested_item()` for advice on when to override this\n+    /// method.\n+    fn visit_nested_foreign_item(&mut self, id: ForeignItemId) {\n+        let opt_item = self.nested_visit_map().inter().map(|map| map.foreign_item(id));\n+        walk_list!(self, visit_foreign_item, opt_item);\n+    }\n+\n     /// Invoked to visit the body of a function, method or closure. Like\n     /// visit_nested_item, does nothing by default unless you override\n     /// `nested_visit_map` to return other than `None`, in which case it will walk\n@@ -378,6 +398,9 @@ pub trait Visitor<'v>: Sized {\n     fn visit_impl_item(&mut self, ii: &'v ImplItem<'v>) {\n         walk_impl_item(self, ii)\n     }\n+    fn visit_foreign_item_ref(&mut self, ii: &'v ForeignItemRef<'v>) {\n+        walk_foreign_item_ref(self, ii)\n+    }\n     fn visit_impl_item_ref(&mut self, ii: &'v ImplItemRef<'v>) {\n         walk_impl_item_ref(self, ii)\n     }\n@@ -566,9 +589,9 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item<'v>) {\n             // `visit_mod()` takes care of visiting the `Item`'s `HirId`.\n             visitor.visit_mod(module, item.span, item.hir_id)\n         }\n-        ItemKind::ForeignMod(ref foreign_module) => {\n+        ItemKind::ForeignMod { abi: _, items } => {\n             visitor.visit_id(item.hir_id);\n-            walk_list!(visitor, visit_foreign_item, foreign_module.items);\n+            walk_list!(visitor, visit_foreign_item_ref, items);\n         }\n         ItemKind::GlobalAsm(_) => {\n             visitor.visit_id(item.hir_id);\n@@ -1012,6 +1035,17 @@ pub fn walk_impl_item<'v, V: Visitor<'v>>(visitor: &mut V, impl_item: &'v ImplIt\n     }\n }\n \n+pub fn walk_foreign_item_ref<'v, V: Visitor<'v>>(\n+    visitor: &mut V,\n+    foreign_item_ref: &'v ForeignItemRef<'v>,\n+) {\n+    // N.B., deliberately force a compilation error if/when new fields are added.\n+    let ForeignItemRef { id, ident, span: _, ref vis } = *foreign_item_ref;\n+    visitor.visit_nested_foreign_item(id);\n+    visitor.visit_ident(ident);\n+    visitor.visit_vis(vis);\n+}\n+\n pub fn walk_impl_item_ref<'v, V: Visitor<'v>>(visitor: &mut V, impl_item_ref: &'v ImplItemRef<'v>) {\n     // N.B., deliberately force a compilation error if/when new fields are added.\n     let ImplItemRef { id, ident, ref kind, span: _, ref vis, ref defaultness } = *impl_item_ref;"}, {"sha": "0db562f91a6a5499a50b8ed647fdb0326e840a1a", "filename": "compiler/rustc_hir/src/itemlikevisit.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_hir%2Fsrc%2Fitemlikevisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_hir%2Fsrc%2Fitemlikevisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fitemlikevisit.rs?ref=c9228570668803e3e6402770d55f23a12c9ae686", "patch": "@@ -1,4 +1,4 @@\n-use super::{ImplItem, Item, TraitItem};\n+use super::{ForeignItem, ImplItem, Item, TraitItem};\n \n /// The \"item-like visitor\" defines only the top-level methods\n /// that can be invoked by `Crate::visit_all_item_likes()`. Whether\n@@ -47,11 +47,13 @@ pub trait ItemLikeVisitor<'hir> {\n     fn visit_item(&mut self, item: &'hir Item<'hir>);\n     fn visit_trait_item(&mut self, trait_item: &'hir TraitItem<'hir>);\n     fn visit_impl_item(&mut self, impl_item: &'hir ImplItem<'hir>);\n+    fn visit_foreign_item(&mut self, foreign_item: &'hir ForeignItem<'hir>);\n }\n \n /// A parallel variant of `ItemLikeVisitor`.\n pub trait ParItemLikeVisitor<'hir> {\n     fn visit_item(&self, item: &'hir Item<'hir>);\n     fn visit_trait_item(&self, trait_item: &'hir TraitItem<'hir>);\n     fn visit_impl_item(&self, impl_item: &'hir ImplItem<'hir>);\n+    fn visit_foreign_item(&self, foreign_item: &'hir ForeignItem<'hir>);\n }"}, {"sha": "439fb88039b407585f2da510d6d59b1bd4a28d5c", "filename": "compiler/rustc_hir/src/stable_hash_impls.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs?ref=c9228570668803e3e6402770d55f23a12c9ae686", "patch": "@@ -1,8 +1,8 @@\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher, ToStableHashKey};\n \n use crate::hir::{\n-    BodyId, Expr, ImplItem, ImplItemId, Item, ItemId, Mod, TraitItem, TraitItemId, Ty,\n-    VisibilityKind,\n+    BodyId, Expr, ForeignItemId, ImplItem, ImplItemId, Item, ItemId, Mod, TraitItem, TraitItemId,\n+    Ty, VisibilityKind,\n };\n use crate::hir_id::{HirId, ItemLocalId};\n use rustc_span::def_id::{DefPathHash, LocalDefId};\n@@ -52,6 +52,15 @@ impl<HirCtx: crate::HashStableContext> ToStableHashKey<HirCtx> for ImplItemId {\n     }\n }\n \n+impl<HirCtx: crate::HashStableContext> ToStableHashKey<HirCtx> for ForeignItemId {\n+    type KeyType = (DefPathHash, ItemLocalId);\n+\n+    #[inline]\n+    fn to_stable_hash_key(&self, hcx: &HirCtx) -> (DefPathHash, ItemLocalId) {\n+        self.hir_id.to_stable_hash_key(hcx)\n+    }\n+}\n+\n impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for HirId {\n     fn hash_stable(&self, hcx: &mut HirCtx, hasher: &mut StableHasher) {\n         hcx.hash_hir_id(*self, hasher)\n@@ -77,6 +86,12 @@ impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for ItemId {\n     }\n }\n \n+impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for ForeignItemId {\n+    fn hash_stable(&self, hcx: &mut HirCtx, hasher: &mut StableHasher) {\n+        hcx.hash_reference_to_item(self.hir_id, hasher)\n+    }\n+}\n+\n impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for ImplItemId {\n     fn hash_stable(&self, hcx: &mut HirCtx, hasher: &mut StableHasher) {\n         hcx.hash_reference_to_item(self.hir_id, hasher)"}, {"sha": "b870e4c6ead8369d613f5e19ad2a5a6186437448", "filename": "compiler/rustc_hir/src/target.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_hir%2Fsrc%2Ftarget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_hir%2Fsrc%2Ftarget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Ftarget.rs?ref=c9228570668803e3e6402770d55f23a12c9ae686", "patch": "@@ -91,7 +91,7 @@ impl Target {\n             ItemKind::Const(..) => Target::Const,\n             ItemKind::Fn(..) => Target::Fn,\n             ItemKind::Mod(..) => Target::Mod,\n-            ItemKind::ForeignMod(..) => Target::ForeignMod,\n+            ItemKind::ForeignMod { .. } => Target::ForeignMod,\n             ItemKind::GlobalAsm(..) => Target::GlobalAsm,\n             ItemKind::TyAlias(..) => Target::TyAlias,\n             ItemKind::OpaqueTy(..) => Target::OpaqueTy,"}, {"sha": "25b09d76295f2951d24ccf000480652251c37372", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=c9228570668803e3e6402770d55f23a12c9ae686", "patch": "@@ -36,6 +36,7 @@ pub enum Nested {\n     Item(hir::ItemId),\n     TraitItem(hir::TraitItemId),\n     ImplItem(hir::ImplItemId),\n+    ForeignItem(hir::ForeignItemId),\n     Body(hir::BodyId),\n     BodyParamPat(hir::BodyId, usize),\n }\n@@ -56,6 +57,7 @@ impl PpAnn for hir::Crate<'_> {\n             Nested::Item(id) => state.print_item(self.item(id.id)),\n             Nested::TraitItem(id) => state.print_trait_item(self.trait_item(id)),\n             Nested::ImplItem(id) => state.print_impl_item(self.impl_item(id)),\n+            Nested::ForeignItem(id) => state.print_foreign_item(self.foreign_item(id)),\n             Nested::Body(id) => state.print_expr(&self.body(id).value),\n             Nested::BodyParamPat(id, i) => state.print_pat(&self.body(id).params[i].pat),\n         }\n@@ -70,6 +72,7 @@ impl PpAnn for &dyn rustc_hir::intravisit::Map<'_> {\n             Nested::Item(id) => state.print_item(self.item(id.id)),\n             Nested::TraitItem(id) => state.print_trait_item(self.trait_item(id)),\n             Nested::ImplItem(id) => state.print_impl_item(self.impl_item(id)),\n+            Nested::ForeignItem(id) => state.print_foreign_item(self.foreign_item(id)),\n             Nested::Body(id) => state.print_expr(&self.body(id).value),\n             Nested::BodyParamPat(id, i) => state.print_pat(&self.body(id).params[i].pat),\n         }\n@@ -349,13 +352,6 @@ impl<'a> State<'a> {\n         }\n     }\n \n-    pub fn print_foreign_mod(&mut self, nmod: &hir::ForeignMod<'_>, attrs: &[ast::Attribute]) {\n-        self.print_inner_attributes(attrs);\n-        for item in nmod.items {\n-            self.print_foreign_item(item);\n-        }\n-    }\n-\n     pub fn print_opt_lifetime(&mut self, lifetime: &hir::Lifetime) {\n         if !lifetime.is_elided() {\n             self.print_lifetime(lifetime);\n@@ -644,11 +640,14 @@ impl<'a> State<'a> {\n                 self.print_mod(_mod, &item.attrs);\n                 self.bclose(item.span);\n             }\n-            hir::ItemKind::ForeignMod(ref nmod) => {\n+            hir::ItemKind::ForeignMod { abi, items } => {\n                 self.head(\"extern\");\n-                self.word_nbsp(nmod.abi.to_string());\n+                self.word_nbsp(abi.to_string());\n                 self.bopen();\n-                self.print_foreign_mod(nmod, &item.attrs);\n+                self.print_inner_attributes(item.attrs);\n+                for item in items {\n+                    self.ann.nested(self, Nested::ForeignItem(item.id));\n+                }\n                 self.bclose(item.span);\n             }\n             hir::ItemKind::GlobalAsm(ref ga) => {"}, {"sha": "e1c60050d943536bfd2d141709f92836cc95e782", "filename": "compiler/rustc_incremental/src/persist/dirty_clean.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs?ref=c9228570668803e3e6402770d55f23a12c9ae686", "patch": "@@ -280,7 +280,7 @@ impl DirtyCleanVisitor<'tcx> {\n                     HirItem::Mod(..) => (\"ItemMod\", LABELS_HIR_ONLY),\n \n                     // // An external module\n-                    HirItem::ForeignMod(..) => (\"ItemForeignMod\", LABELS_HIR_ONLY),\n+                    HirItem::ForeignMod { .. } => (\"ItemForeignMod\", LABELS_HIR_ONLY),\n \n                     // Module-level inline assembly (from global_asm!)\n                     HirItem::GlobalAsm(..) => (\"ItemGlobalAsm\", LABELS_HIR_ONLY),\n@@ -460,6 +460,10 @@ impl ItemLikeVisitor<'tcx> for DirtyCleanVisitor<'tcx> {\n     fn visit_impl_item(&mut self, item: &hir::ImplItem<'_>) {\n         self.check_item(item.hir_id, item.span);\n     }\n+\n+    fn visit_foreign_item(&mut self, item: &hir::ForeignItem<'_>) {\n+        self.check_item(item.hir_id, item.span);\n+    }\n }\n \n /// Given a `#[rustc_dirty]` or `#[rustc_clean]` attribute, scan"}, {"sha": "de08a4c8242fe4a8acb5c44252be715f252553b8", "filename": "compiler/rustc_interface/src/proc_macro_decls.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_interface%2Fsrc%2Fproc_macro_decls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_interface%2Fsrc%2Fproc_macro_decls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fproc_macro_decls.rs?ref=c9228570668803e3e6402770d55f23a12c9ae686", "patch": "@@ -33,6 +33,8 @@ impl<'v> ItemLikeVisitor<'v> for Finder<'_> {\n     fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem<'_>) {}\n \n     fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem<'_>) {}\n+\n+    fn visit_foreign_item(&mut self, _foreign_item: &hir::ForeignItem<'_>) {}\n }\n \n pub(crate) fn provide(providers: &mut Providers) {"}, {"sha": "4785b6c379c228625f1c4863da9c24b9534f60c0", "filename": "compiler/rustc_metadata/src/foreign_modules.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_metadata%2Fsrc%2Fforeign_modules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_metadata%2Fsrc%2Fforeign_modules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fforeign_modules.rs?ref=c9228570668803e3e6402770d55f23a12c9ae686", "patch": "@@ -16,13 +16,13 @@ struct Collector<'tcx> {\n \n impl ItemLikeVisitor<'tcx> for Collector<'tcx> {\n     fn visit_item(&mut self, it: &'tcx hir::Item<'tcx>) {\n-        let fm = match it.kind {\n-            hir::ItemKind::ForeignMod(ref fm) => fm,\n+        let items = match it.kind {\n+            hir::ItemKind::ForeignMod { items, .. } => items,\n             _ => return,\n         };\n \n         let foreign_items =\n-            fm.items.iter().map(|it| self.tcx.hir().local_def_id(it.hir_id).to_def_id()).collect();\n+            items.iter().map(|it| self.tcx.hir().local_def_id(it.id.hir_id).to_def_id()).collect();\n         self.modules.push(ForeignModule {\n             foreign_items,\n             def_id: self.tcx.hir().local_def_id(it.hir_id).to_def_id(),\n@@ -31,4 +31,5 @@ impl ItemLikeVisitor<'tcx> for Collector<'tcx> {\n \n     fn visit_trait_item(&mut self, _it: &'tcx hir::TraitItem<'tcx>) {}\n     fn visit_impl_item(&mut self, _it: &'tcx hir::ImplItem<'tcx>) {}\n+    fn visit_foreign_item(&mut self, _it: &'tcx hir::ForeignItem<'tcx>) {}\n }"}, {"sha": "d088288c507677282727e841ab403ed611e600a4", "filename": "compiler/rustc_metadata/src/link_args.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_metadata%2Fsrc%2Flink_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_metadata%2Fsrc%2Flink_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flink_args.rs?ref=c9228570668803e3e6402770d55f23a12c9ae686", "patch": "@@ -26,11 +26,11 @@ struct Collector<'tcx> {\n \n impl<'tcx> ItemLikeVisitor<'tcx> for Collector<'tcx> {\n     fn visit_item(&mut self, it: &'tcx hir::Item<'tcx>) {\n-        let fm = match it.kind {\n-            hir::ItemKind::ForeignMod(ref fm) => fm,\n+        let abi = match it.kind {\n+            hir::ItemKind::ForeignMod { abi, .. } => abi,\n             _ => return,\n         };\n-        if fm.abi == Abi::Rust || fm.abi == Abi::RustIntrinsic || fm.abi == Abi::PlatformIntrinsic {\n+        if abi == Abi::Rust || abi == Abi::RustIntrinsic || abi == Abi::PlatformIntrinsic {\n             return;\n         }\n \n@@ -45,6 +45,7 @@ impl<'tcx> ItemLikeVisitor<'tcx> for Collector<'tcx> {\n \n     fn visit_trait_item(&mut self, _it: &'tcx hir::TraitItem<'tcx>) {}\n     fn visit_impl_item(&mut self, _it: &'tcx hir::ImplItem<'tcx>) {}\n+    fn visit_foreign_item(&mut self, _it: &'tcx hir::ForeignItem<'tcx>) {}\n }\n \n impl<'tcx> Collector<'tcx> {"}, {"sha": "fe29f9d177f92c1a4fb5d2b4c5b28086e86de8b4", "filename": "compiler/rustc_metadata/src/native_libs.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs?ref=c9228570668803e3e6402770d55f23a12c9ae686", "patch": "@@ -33,12 +33,12 @@ struct Collector<'tcx> {\n \n impl ItemLikeVisitor<'tcx> for Collector<'tcx> {\n     fn visit_item(&mut self, it: &'tcx hir::Item<'tcx>) {\n-        let fm = match it.kind {\n-            hir::ItemKind::ForeignMod(ref fm) => fm,\n+        let abi = match it.kind {\n+            hir::ItemKind::ForeignMod { abi, .. } => abi,\n             _ => return,\n         };\n \n-        if fm.abi == Abi::Rust || fm.abi == Abi::RustIntrinsic || fm.abi == Abi::PlatformIntrinsic {\n+        if abi == Abi::Rust || abi == Abi::RustIntrinsic || abi == Abi::PlatformIntrinsic {\n             return;\n         }\n \n@@ -127,6 +127,7 @@ impl ItemLikeVisitor<'tcx> for Collector<'tcx> {\n \n     fn visit_trait_item(&mut self, _it: &'tcx hir::TraitItem<'tcx>) {}\n     fn visit_impl_item(&mut self, _it: &'tcx hir::ImplItem<'tcx>) {}\n+    fn visit_foreign_item(&mut self, _it: &'tcx hir::ForeignItem<'tcx>) {}\n }\n \n impl Collector<'tcx> {"}, {"sha": "52ffd9a7975a3568ff5b6fc6725eb9fbfa225062", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=c9228570668803e3e6402770d55f23a12c9ae686", "patch": "@@ -1225,7 +1225,7 @@ impl EncodeContext<'a, 'tcx> {\n             hir::ItemKind::Mod(ref m) => {\n                 return self.encode_info_for_mod(item.hir_id, m, &item.attrs);\n             }\n-            hir::ItemKind::ForeignMod(_) => EntryKind::ForeignMod,\n+            hir::ItemKind::ForeignMod { .. } => EntryKind::ForeignMod,\n             hir::ItemKind::GlobalAsm(..) => EntryKind::GlobalAsm,\n             hir::ItemKind::TyAlias(..) => EntryKind::Type,\n             hir::ItemKind::OpaqueTy(..) => {\n@@ -1320,11 +1320,11 @@ impl EncodeContext<'a, 'tcx> {\n         record!(self.tables.expn_that_defined[def_id] <- self.tcx.expansion_that_defined(def_id));\n         // FIXME(eddyb) there should be a nicer way to do this.\n         match item.kind {\n-            hir::ItemKind::ForeignMod(ref fm) => record!(self.tables.children[def_id] <-\n-                fm.items\n+            hir::ItemKind::ForeignMod { items, .. } => record!(self.tables.children[def_id] <-\n+                items\n                     .iter()\n                     .map(|foreign_item| tcx.hir().local_def_id(\n-                        foreign_item.hir_id).local_def_index)\n+                        foreign_item.id.hir_id).local_def_index)\n             ),\n             hir::ItemKind::Enum(..) => record!(self.tables.children[def_id] <-\n                 self.tcx.adt_def(def_id).variants.iter().map(|v| {\n@@ -1836,7 +1836,7 @@ impl EncodeContext<'a, 'tcx> {\n             | hir::ItemKind::Const(..)\n             | hir::ItemKind::Fn(..)\n             | hir::ItemKind::Mod(..)\n-            | hir::ItemKind::ForeignMod(..)\n+            | hir::ItemKind::ForeignMod { .. }\n             | hir::ItemKind::GlobalAsm(..)\n             | hir::ItemKind::ExternCrate(..)\n             | hir::ItemKind::Use(..)\n@@ -1913,6 +1913,8 @@ impl<'tcx, 'v> ItemLikeVisitor<'v> for ImplVisitor<'tcx> {\n     fn visit_impl_item(&mut self, _impl_item: &'v hir::ImplItem<'v>) {\n         // handled in `visit_item` above\n     }\n+\n+    fn visit_foreign_item(&mut self, _foreign_item: &'v hir::ForeignItem<'v>) {}\n }\n \n /// Used to prefetch queries which will be needed later by metadata encoding.\n@@ -1977,6 +1979,11 @@ impl<'tcx, 'v> ParItemLikeVisitor<'v> for PrefetchVisitor<'tcx> {\n             hir::ImplItemKind::TyAlias(..) => (),\n         }\n     }\n+\n+    fn visit_foreign_item(&self, _foreign_item: &'v hir::ForeignItem<'v>) {\n+        // This should be kept in sync with `encode_info_for_foreign_item`.\n+        // Foreign items contain no MIR.\n+    }\n }\n \n // NOTE(eddyb) The following comment was preserved for posterity, even"}, {"sha": "912e9672c94183918644410e2aa94cb352b94ec0", "filename": "compiler/rustc_middle/src/hir/map/collector.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs?ref=c9228570668803e3e6402770d55f23a12c9ae686", "patch": "@@ -112,6 +112,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n                 items: _,\n                 trait_items: _,\n                 impl_items: _,\n+                foreign_items: _,\n                 bodies: _,\n                 trait_impls: _,\n                 body_ids: _,\n@@ -319,6 +320,10 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n         self.visit_impl_item(self.krate.impl_item(item_id));\n     }\n \n+    fn visit_nested_foreign_item(&mut self, foreign_id: ForeignItemId) {\n+        self.visit_foreign_item(self.krate.foreign_item(foreign_id));\n+    }\n+\n     fn visit_nested_body(&mut self, id: BodyId) {\n         self.visit_body(self.krate.body(id));\n     }\n@@ -351,11 +356,17 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n         });\n     }\n \n-    fn visit_foreign_item(&mut self, foreign_item: &'hir ForeignItem<'hir>) {\n-        self.insert(foreign_item.span, foreign_item.hir_id, Node::ForeignItem(foreign_item));\n+    fn visit_foreign_item(&mut self, fi: &'hir ForeignItem<'hir>) {\n+        debug_assert_eq!(\n+            fi.hir_id.owner,\n+            self.definitions.opt_hir_id_to_local_def_id(fi.hir_id).unwrap()\n+        );\n+        self.with_dep_node_owner(fi.hir_id.owner, fi, |this, hash| {\n+            this.insert_with_hash(fi.span, fi.hir_id, Node::ForeignItem(fi), hash);\n \n-        self.with_parent(foreign_item.hir_id, |this| {\n-            intravisit::walk_foreign_item(this, foreign_item);\n+            this.with_parent(fi.hir_id, |this| {\n+                intravisit::walk_foreign_item(this, fi);\n+            });\n         });\n     }\n "}, {"sha": "5e36362ec59167640ca168663d33cfbfa28aaa1c", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=c9228570668803e3e6402770d55f23a12c9ae686", "patch": "@@ -205,7 +205,7 @@ impl<'hir> Map<'hir> {\n                 ItemKind::TraitAlias(..) => DefKind::TraitAlias,\n                 ItemKind::ExternCrate(_) => DefKind::ExternCrate,\n                 ItemKind::Use(..) => DefKind::Use,\n-                ItemKind::ForeignMod(..) => DefKind::ForeignMod,\n+                ItemKind::ForeignMod { .. } => DefKind::ForeignMod,\n                 ItemKind::GlobalAsm(..) => DefKind::GlobalAsm,\n                 ItemKind::Impl { .. } => DefKind::Impl,\n             },\n@@ -309,6 +309,13 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n+    pub fn foreign_item(&self, id: ForeignItemId) -> &'hir ForeignItem<'hir> {\n+        match self.find(id.hir_id).unwrap() {\n+            Node::ForeignItem(item) => item,\n+            _ => bug!(),\n+        }\n+    }\n+\n     pub fn body(&self, id: BodyId) -> &'hir Body<'hir> {\n         self.tcx.hir_owner_nodes(id.hir_id.owner).unwrap().bodies.get(&id.hir_id.local_id).unwrap()\n     }\n@@ -470,6 +477,10 @@ impl<'hir> Map<'hir> {\n         for id in &module.impl_items {\n             visitor.visit_impl_item(self.expect_impl_item(id.hir_id));\n         }\n+\n+        for id in &module.foreign_items {\n+            visitor.visit_foreign_item(self.expect_foreign_item(id.hir_id));\n+        }\n     }\n \n     /// Retrieves the `Node` corresponding to `id`, panicking if it cannot be found.\n@@ -718,10 +729,11 @@ impl<'hir> Map<'hir> {\n         let parent = self.get_parent_item(hir_id);\n         if let Some(entry) = self.find_entry(parent) {\n             if let Entry {\n-                node: Node::Item(Item { kind: ItemKind::ForeignMod(ref nm), .. }), ..\n+                node: Node::Item(Item { kind: ItemKind::ForeignMod { abi, .. }, .. }),\n+                ..\n             } = entry\n             {\n-                return nm.abi;\n+                return *abi;\n             }\n         }\n         bug!(\"expected foreign mod or inlined parent, found {}\", self.node_to_string(parent))\n@@ -937,6 +949,10 @@ impl<'hir> intravisit::Map<'hir> for Map<'hir> {\n     fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir> {\n         self.impl_item(id)\n     }\n+\n+    fn foreign_item(&self, id: ForeignItemId) -> &'hir ForeignItem<'hir> {\n+        self.foreign_item(id)\n+    }\n }\n \n trait Named {\n@@ -1030,7 +1046,7 @@ fn hir_id_to_string(map: &Map<'_>, id: HirId) -> String {\n                 ItemKind::Const(..) => \"const\",\n                 ItemKind::Fn(..) => \"fn\",\n                 ItemKind::Mod(..) => \"mod\",\n-                ItemKind::ForeignMod(..) => \"foreign mod\",\n+                ItemKind::ForeignMod { .. } => \"foreign mod\",\n                 ItemKind::GlobalAsm(..) => \"global asm\",\n                 ItemKind::TyAlias(..) => \"ty\",\n                 ItemKind::OpaqueTy(..) => \"opaque type\","}, {"sha": "6370ead97e798972cb9ef9886f5f7b2fa5398a9e", "filename": "compiler/rustc_mir/src/monomorphize/collector.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs?ref=c9228570668803e3e6402770d55f23a12c9ae686", "patch": "@@ -993,7 +993,7 @@ impl ItemLikeVisitor<'v> for RootCollector<'_, 'v> {\n         match item.kind {\n             hir::ItemKind::ExternCrate(..)\n             | hir::ItemKind::Use(..)\n-            | hir::ItemKind::ForeignMod(..)\n+            | hir::ItemKind::ForeignMod { .. }\n             | hir::ItemKind::TyAlias(..)\n             | hir::ItemKind::Trait(..)\n             | hir::ItemKind::TraitAlias(..)\n@@ -1066,6 +1066,8 @@ impl ItemLikeVisitor<'v> for RootCollector<'_, 'v> {\n             self.push_if_root(def_id);\n         }\n     }\n+\n+    fn visit_foreign_item(&mut self, _foreign_item: &'v hir::ForeignItem<'v>) {}\n }\n \n impl RootCollector<'_, 'v> {"}, {"sha": "b87b13cff8053a35e55b367854cbf0d4900a55ce", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=c9228570668803e3e6402770d55f23a12c9ae686", "patch": "@@ -190,7 +190,7 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n \n                     intravisit::walk_item(self, &item);\n                 }\n-                hir::ItemKind::ForeignMod(..) => {}\n+                hir::ItemKind::ForeignMod { .. } => {}\n                 _ => {\n                     intravisit::walk_item(self, &item);\n                 }\n@@ -447,6 +447,8 @@ impl<'v, 'k, 'tcx> ItemLikeVisitor<'v> for LifeSeeder<'k, 'tcx> {\n     fn visit_impl_item(&mut self, _item: &hir::ImplItem<'_>) {\n         // ignore: we are handling this in `visit_item` above\n     }\n+\n+    fn visit_foreign_item(&mut self, _item: &'v hir::ForeignItem<'v>) {}\n }\n \n fn create_and_seed_worklist<'tcx>("}, {"sha": "699c96bc49d5990645ef102f134d256f7c881d2b", "filename": "compiler/rustc_passes/src/diagnostic_items.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs?ref=c9228570668803e3e6402770d55f23a12c9ae686", "patch": "@@ -37,6 +37,10 @@ impl<'v, 'tcx> ItemLikeVisitor<'v> for DiagnosticItemCollector<'tcx> {\n     fn visit_impl_item(&mut self, impl_item: &hir::ImplItem<'_>) {\n         self.observe_item(&impl_item.attrs, impl_item.hir_id);\n     }\n+\n+    fn visit_foreign_item(&mut self, foreign_item: &hir::ForeignItem<'_>) {\n+        self.observe_item(foreign_item.attrs, foreign_item.hir_id);\n+    }\n }\n \n impl<'tcx> DiagnosticItemCollector<'tcx> {\n@@ -100,18 +104,6 @@ fn collect<'tcx>(tcx: TyCtxt<'tcx>) -> FxHashMap<Symbol, DefId> {\n \n     // Collect diagnostic items in this crate.\n     tcx.hir().krate().visit_all_item_likes(&mut collector);\n-    // FIXME(visit_all_item_likes): Foreign items are not visited\n-    // here, so we have to manually look at them for now.\n-    for (_, foreign_module) in tcx.foreign_modules(LOCAL_CRATE).iter() {\n-        for &foreign_item in foreign_module.foreign_items.iter() {\n-            match tcx.hir().get(tcx.hir().local_def_id_to_hir_id(foreign_item.expect_local())) {\n-                hir::Node::ForeignItem(item) => {\n-                    collector.observe_item(item.attrs, item.hir_id);\n-                }\n-                item => bug!(\"unexpected foreign item {:?}\", item),\n-            }\n-        }\n-    }\n \n     for m in tcx.hir().krate().exported_macros {\n         collector.observe_item(m.attrs, m.hir_id);"}, {"sha": "5ff631a24573f16ab062a2291703d98e882c0d4a", "filename": "compiler/rustc_passes/src/entry.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fentry.rs?ref=c9228570668803e3e6402770d55f23a12c9ae686", "patch": "@@ -2,7 +2,7 @@ use rustc_ast::entry::EntryPointType;\n use rustc_errors::struct_span_err;\n use rustc_hir::def_id::{CrateNum, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n-use rustc_hir::{HirId, ImplItem, Item, ItemKind, TraitItem};\n+use rustc_hir::{ForeignItem, HirId, ImplItem, Item, ItemKind, TraitItem};\n use rustc_middle::hir::map::Map;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n@@ -45,6 +45,10 @@ impl<'a, 'tcx> ItemLikeVisitor<'tcx> for EntryContext<'a, 'tcx> {\n     fn visit_impl_item(&mut self, _impl_item: &'tcx ImplItem<'tcx>) {\n         // Entry fn is never a trait item.\n     }\n+\n+    fn visit_foreign_item(&mut self, _: &'tcx ForeignItem<'tcx>) {\n+        // Entry fn is never a foreign item.\n+    }\n }\n \n fn entry_fn(tcx: TyCtxt<'_>, cnum: CrateNum) -> Option<(LocalDefId, EntryFnType)> {"}, {"sha": "c7e057927ab42065d330075261710d03d4e9526c", "filename": "compiler/rustc_passes/src/hir_id_validator.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs?ref=c9228570668803e3e6402770d55f23a12c9ae686", "patch": "@@ -68,6 +68,11 @@ impl<'a, 'hir> ItemLikeVisitor<'hir> for OuterVisitor<'a, 'hir> {\n         let mut inner_visitor = self.new_inner_visitor(self.hir_map);\n         inner_visitor.check(i.hir_id, |this| intravisit::walk_impl_item(this, i));\n     }\n+\n+    fn visit_foreign_item(&mut self, i: &'hir hir::ForeignItem<'hir>) {\n+        let mut inner_visitor = self.new_inner_visitor(self.hir_map);\n+        inner_visitor.check(i.hir_id, |this| intravisit::walk_foreign_item(this, i));\n+    }\n }\n \n impl<'a, 'hir> HirIdValidator<'a, 'hir> {"}, {"sha": "3132661e5f51608fff49051bc09640f7b3c25f7d", "filename": "compiler/rustc_passes/src/lang_items.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs?ref=c9228570668803e3e6402770d55f23a12c9ae686", "patch": "@@ -54,6 +54,8 @@ impl ItemLikeVisitor<'v> for LanguageItemCollector<'tcx> {\n             impl_item.attrs,\n         )\n     }\n+\n+    fn visit_foreign_item(&mut self, _: &hir::ForeignItem<'_>) {}\n }\n \n impl LanguageItemCollector<'tcx> {"}, {"sha": "9e83cbd668050e84b491391d2b636c8ecd97b2d5", "filename": "compiler/rustc_passes/src/layout_test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_passes%2Fsrc%2Flayout_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_passes%2Fsrc%2Flayout_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flayout_test.rs?ref=c9228570668803e3e6402770d55f23a12c9ae686", "patch": "@@ -40,6 +40,7 @@ impl ItemLikeVisitor<'tcx> for LayoutTest<'tcx> {\n \n     fn visit_trait_item(&mut self, _: &'tcx hir::TraitItem<'tcx>) {}\n     fn visit_impl_item(&mut self, _: &'tcx hir::ImplItem<'tcx>) {}\n+    fn visit_foreign_item(&mut self, _: &'tcx hir::ForeignItem<'tcx>) {}\n }\n \n impl LayoutTest<'tcx> {"}, {"sha": "fde83af99a569bdbd85803a957e36d78520ec727", "filename": "compiler/rustc_passes/src/reachable.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Freachable.rs?ref=c9228570668803e3e6402770d55f23a12c9ae686", "patch": "@@ -262,7 +262,7 @@ impl<'tcx> ReachableContext<'tcx> {\n                     | hir::ItemKind::TyAlias(..)\n                     | hir::ItemKind::Static(..)\n                     | hir::ItemKind::Mod(..)\n-                    | hir::ItemKind::ForeignMod(..)\n+                    | hir::ItemKind::ForeignMod { .. }\n                     | hir::ItemKind::Impl { .. }\n                     | hir::ItemKind::Trait(..)\n                     | hir::ItemKind::TraitAlias(..)\n@@ -378,6 +378,10 @@ impl<'a, 'tcx> ItemLikeVisitor<'tcx> for CollectPrivateImplItemsVisitor<'a, 'tcx\n     fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem<'_>) {\n         // processed in visit_item above\n     }\n+\n+    fn visit_foreign_item(&mut self, _foreign_item: &hir::ForeignItem<'_>) {\n+        // We never export foreign functions as they have no body to export.\n+    }\n }\n \n fn reachable_set<'tcx>(tcx: TyCtxt<'tcx>, crate_num: CrateNum) -> FxHashSet<LocalDefId> {"}, {"sha": "f6bbbd80bf1eb0bc174c5d66887049bea027b0a2", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=c9228570668803e3e6402770d55f23a12c9ae686", "patch": "@@ -326,7 +326,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n             // they don't have their own stability. They still can be annotated as unstable\n             // and propagate this unstability to children, but this annotation is completely\n             // optional. They inherit stability from their parents when unannotated.\n-            hir::ItemKind::Impl { of_trait: None, .. } | hir::ItemKind::ForeignMod(..) => {\n+            hir::ItemKind::Impl { of_trait: None, .. } | hir::ItemKind::ForeignMod { .. } => {\n                 self.in_trait_impl = false;\n                 kind = AnnotationKind::Container;\n             }\n@@ -499,7 +499,7 @@ impl<'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'tcx> {\n         // optional. They inherit stability from their parents when unannotated.\n         if !matches!(\n             i.kind,\n-            hir::ItemKind::Impl { of_trait: None, .. } | hir::ItemKind::ForeignMod(..)\n+            hir::ItemKind::Impl { of_trait: None, .. } | hir::ItemKind::ForeignMod { .. }\n         ) {\n             self.check_missing_stability(i.hir_id, i.span);\n         }"}, {"sha": "4796d9a80b69af7891d552b94378f41876962d90", "filename": "compiler/rustc_plugin_impl/src/build.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_plugin_impl%2Fsrc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_plugin_impl%2Fsrc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_plugin_impl%2Fsrc%2Fbuild.rs?ref=c9228570668803e3e6402770d55f23a12c9ae686", "patch": "@@ -25,6 +25,8 @@ impl<'v, 'tcx> ItemLikeVisitor<'v> for RegistrarFinder<'tcx> {\n     fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem<'_>) {}\n \n     fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem<'_>) {}\n+\n+    fn visit_foreign_item(&mut self, _foreign_item: &hir::ForeignItem<'_>) {}\n }\n \n /// Finds the function marked with `#[plugin_registrar]`, if any."}, {"sha": "4414bf57c6b7db5077c1e3a62565e447108c3a4d", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=c9228570668803e3e6402770d55f23a12c9ae686", "patch": "@@ -592,7 +592,7 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n                 Option::<AccessLevel>::of_impl(item.hir_id, self.tcx, &self.access_levels)\n             }\n             // Foreign modules inherit level from parents.\n-            hir::ItemKind::ForeignMod(..) => self.prev_level,\n+            hir::ItemKind::ForeignMod { .. } => self.prev_level,\n             // Other `pub` items inherit levels from parents.\n             hir::ItemKind::Const(..)\n             | hir::ItemKind::Enum(..)\n@@ -654,10 +654,10 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n                     }\n                 }\n             }\n-            hir::ItemKind::ForeignMod(ref foreign_mod) => {\n-                for foreign_item in foreign_mod.items {\n+            hir::ItemKind::ForeignMod { items, .. } => {\n+                for foreign_item in items {\n                     if foreign_item.vis.node.is_pub() {\n-                        self.update(foreign_item.hir_id, item_level);\n+                        self.update(foreign_item.id.hir_id, item_level);\n                     }\n                 }\n             }\n@@ -770,11 +770,11 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n                 }\n             }\n             // Visit everything, but foreign items have their own levels.\n-            hir::ItemKind::ForeignMod(ref foreign_mod) => {\n-                for foreign_item in foreign_mod.items {\n-                    let foreign_item_level = self.get(foreign_item.hir_id);\n+            hir::ItemKind::ForeignMod { items, .. } => {\n+                for foreign_item in items {\n+                    let foreign_item_level = self.get(foreign_item.id.hir_id);\n                     if foreign_item_level.is_some() {\n-                        self.reach(foreign_item.hir_id, foreign_item_level)\n+                        self.reach(foreign_item.id.hir_id, foreign_item_level)\n                             .generics()\n                             .predicates()\n                             .ty();\n@@ -1430,7 +1430,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n \n             // An `extern {}` doesn't introduce a new privacy\n             // namespace (the contents have their own privacies).\n-            hir::ItemKind::ForeignMod(_) => {}\n+            hir::ItemKind::ForeignMod { .. } => {}\n \n             hir::ItemKind::Trait(.., ref bounds, _) => {\n                 if !self.trait_is_public(item.hir_id) {\n@@ -1948,10 +1948,10 @@ impl<'a, 'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx>\n                 }\n             }\n             // Subitems of foreign modules have their own publicity.\n-            hir::ItemKind::ForeignMod(ref foreign_mod) => {\n-                for foreign_item in foreign_mod.items {\n-                    let vis = tcx.visibility(tcx.hir().local_def_id(foreign_item.hir_id));\n-                    self.check(foreign_item.hir_id, vis).generics().predicates().ty();\n+            hir::ItemKind::ForeignMod { items, .. } => {\n+                for foreign_item in items {\n+                    let vis = tcx.visibility(tcx.hir().local_def_id(foreign_item.id.hir_id));\n+                    self.check(foreign_item.id.hir_id, vis).generics().predicates().ty();\n                 }\n             }\n             // Subitems of structs and unions have their own publicity."}, {"sha": "91edbebc05f3b9b027ebd59c9b9372d302d59143", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=c9228570668803e3e6402770d55f23a12c9ae686", "patch": "@@ -388,7 +388,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n             hir::ItemKind::ExternCrate(_)\n             | hir::ItemKind::Use(..)\n             | hir::ItemKind::Mod(..)\n-            | hir::ItemKind::ForeignMod(..)\n+            | hir::ItemKind::ForeignMod { .. }\n             | hir::ItemKind::GlobalAsm(..) => {\n                 // These sorts of items have no lifetime parameters at all.\n                 intravisit::walk_item(self, item);"}, {"sha": "ff445d727fa34b4bacb6b08498f1581d472c9461", "filename": "compiler/rustc_save_analysis/src/sig.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs?ref=c9228570668803e3e6402770d55f23a12c9ae686", "patch": "@@ -550,7 +550,7 @@ impl<'hir> Sig for hir::Item<'hir> {\n \n                 // FIXME where clause\n             }\n-            hir::ItemKind::ForeignMod(_) => Err(\"extern mod\"),\n+            hir::ItemKind::ForeignMod { .. } => Err(\"extern mod\"),\n             hir::ItemKind::GlobalAsm(_) => Err(\"global asm\"),\n             hir::ItemKind::ExternCrate(_) => Err(\"extern crate\"),\n             hir::ItemKind::OpaqueTy(..) => Err(\"opaque type\"),"}, {"sha": "8c5e438a7284b456976f181023f0c7453ba85621", "filename": "compiler/rustc_symbol_mangling/src/test.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftest.rs?ref=c9228570668803e3e6402770d55f23a12c9ae686", "patch": "@@ -71,4 +71,8 @@ impl hir::itemlikevisit::ItemLikeVisitor<'tcx> for SymbolNamesTest<'tcx> {\n     fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem<'tcx>) {\n         self.process_attrs(impl_item.hir_id);\n     }\n+\n+    fn visit_foreign_item(&mut self, foreign_item: &'tcx hir::ForeignItem<'tcx>) {\n+        self.process_attrs(foreign_item.hir_id);\n+    }\n }"}, {"sha": "19957e7d303cffe75fecaad3ab95ce373797b4b2", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=c9228570668803e3e6402770d55f23a12c9ae686", "patch": "@@ -746,20 +746,22 @@ pub fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, it: &'tcx hir::Item<'tcx>) {\n             let generics = tcx.generics_of(def_id);\n             check_type_params_are_used(tcx, &generics, pty_ty);\n         }\n-        hir::ItemKind::ForeignMod(ref m) => {\n-            check_abi(tcx, it.span, m.abi);\n+        hir::ItemKind::ForeignMod { abi, items } => {\n+            check_abi(tcx, it.span, abi);\n \n-            if m.abi == Abi::RustIntrinsic {\n-                for item in m.items {\n+            if abi == Abi::RustIntrinsic {\n+                for item in items {\n+                    let item = tcx.hir().foreign_item(item.id);\n                     intrinsic::check_intrinsic_type(tcx, item);\n                 }\n-            } else if m.abi == Abi::PlatformIntrinsic {\n-                for item in m.items {\n+            } else if abi == Abi::PlatformIntrinsic {\n+                for item in items {\n+                    let item = tcx.hir().foreign_item(item.id);\n                     intrinsic::check_platform_intrinsic_type(tcx, item);\n                 }\n             } else {\n-                for item in m.items {\n-                    let def_id = tcx.hir().local_def_id(item.hir_id);\n+                for item in items {\n+                    let def_id = tcx.hir().local_def_id(item.id.hir_id);\n                     let generics = tcx.generics_of(def_id);\n                     let own_counts = generics.own_counts();\n                     if generics.params.len() - own_counts.lifetimes != 0 {\n@@ -791,9 +793,10 @@ pub fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, it: &'tcx hir::Item<'tcx>) {\n                         .emit();\n                     }\n \n+                    let item = tcx.hir().foreign_item(item.id);\n                     match item.kind {\n                         hir::ForeignItemKind::Fn(ref fn_decl, _, _) => {\n-                            require_c_abi_if_c_variadic(tcx, fn_decl, m.abi, item.span);\n+                            require_c_abi_if_c_variadic(tcx, fn_decl, abi, item.span);\n                         }\n                         hir::ForeignItemKind::Static(..) => {\n                             check_static_inhabited(tcx, def_id, item.span);"}, {"sha": "7ed2933c08bbf6cb56a192ec2fc4785e55068119", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=c9228570668803e3e6402770d55f23a12c9ae686", "patch": "@@ -1308,6 +1308,8 @@ fn compute_all_traits(tcx: TyCtxt<'_>) -> Vec<DefId> {\n         fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem<'_>) {}\n \n         fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem<'_>) {}\n+\n+        fn visit_foreign_item(&mut self, _foreign_item: &hir::ForeignItem<'_>) {}\n     }\n \n     tcx.hir().krate().visit_all_item_likes(&mut Visitor { map: &tcx.hir(), traits: &mut traits });"}, {"sha": "d27a68ccf1bda52fda474d2ce5841b315f50f082", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=c9228570668803e3e6402770d55f23a12c9ae686", "patch": "@@ -1134,6 +1134,7 @@ impl ItemLikeVisitor<'tcx> for CheckItemTypesVisitor<'tcx> {\n     }\n     fn visit_trait_item(&mut self, _: &'tcx hir::TraitItem<'tcx>) {}\n     fn visit_impl_item(&mut self, _: &'tcx hir::ImplItem<'tcx>) {}\n+    fn visit_foreign_item(&mut self, _: &'tcx hir::ForeignItem<'tcx>) {}\n }\n \n fn typeck_item_bodies(tcx: TyCtxt<'_>, crate_num: CrateNum) {"}, {"sha": "c09f8cce5b44de9d8eb3bae178c27fb6ed9848fc", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=c9228570668803e3e6402770d55f23a12c9ae686", "patch": "@@ -156,8 +156,9 @@ pub fn check_item_well_formed(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n         hir::ItemKind::Const(ref ty, ..) => {\n             check_item_type(tcx, item.hir_id, ty.span, false);\n         }\n-        hir::ItemKind::ForeignMod(ref module) => {\n-            for it in module.items.iter() {\n+        hir::ItemKind::ForeignMod { items, .. } => {\n+            for it in items.iter() {\n+                let it = tcx.hir().foreign_item(it.id);\n                 match it.kind {\n                     hir::ForeignItemKind::Fn(ref decl, ..) => {\n                         check_item_fn(tcx, it.hir_id, it.ident, it.span, decl)\n@@ -1345,6 +1346,10 @@ impl ParItemLikeVisitor<'tcx> for CheckTypeWellFormedVisitor<'tcx> {\n     fn visit_impl_item(&self, impl_item: &'tcx hir::ImplItem<'tcx>) {\n         Visitor::visit_impl_item(&mut self.clone(), impl_item);\n     }\n+\n+    fn visit_foreign_item(&self, foreign_item: &'tcx hir::ForeignItem<'tcx>) {\n+        Visitor::visit_foreign_item(&mut self.clone(), foreign_item)\n+    }\n }\n \n impl Visitor<'tcx> for CheckTypeWellFormedVisitor<'tcx> {"}, {"sha": "31121ece898aa7e02695120e2d0b7031af59991a", "filename": "compiler/rustc_typeck/src/check_unused.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_typeck%2Fsrc%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_typeck%2Fsrc%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck_unused.rs?ref=c9228570668803e3e6402770d55f23a12c9ae686", "patch": "@@ -35,6 +35,8 @@ impl ItemLikeVisitor<'v> for CheckVisitor<'tcx> {\n     fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem<'_>) {}\n \n     fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem<'_>) {}\n+\n+    fn visit_foreign_item(&mut self, _foreign_item: &hir::ForeignItem<'_>) {}\n }\n \n struct CheckVisitor<'tcx> {\n@@ -225,4 +227,6 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for CollectExternCrateVisitor<'a, 'tcx> {\n     fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem<'_>) {}\n \n     fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem<'_>) {}\n+\n+    fn visit_foreign_item(&mut self, _foreign_item: &hir::ForeignItem<'_>) {}\n }"}, {"sha": "483ab2f58f222f51f608a3ec6ad3cc2df55fa106", "filename": "compiler/rustc_typeck/src/coherence/inherent_impls.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs?ref=c9228570668803e3e6402770d55f23a12c9ae686", "patch": "@@ -334,6 +334,8 @@ impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n     fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem<'_>) {}\n \n     fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem<'_>) {}\n+\n+    fn visit_foreign_item(&mut self, _foreign_item: &hir::ForeignItem<'_>) {}\n }\n \n impl InherentCollect<'tcx> {"}, {"sha": "dd90724e93fee748f15dc94e3a49169ef8dffac5", "filename": "compiler/rustc_typeck/src/coherence/inherent_impls_overlap.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs?ref=c9228570668803e3e6402770d55f23a12c9ae686", "patch": "@@ -149,4 +149,6 @@ impl ItemLikeVisitor<'v> for InherentOverlapChecker<'tcx> {\n     fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem<'v>) {}\n \n     fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem<'v>) {}\n+\n+    fn visit_foreign_item(&mut self, _foreign_item: &hir::ForeignItem<'v>) {}\n }"}, {"sha": "253dcf06e01de6b283e097dc7a62dcf8392609a3", "filename": "compiler/rustc_typeck/src/coherence/orphan.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs?ref=c9228570668803e3e6402770d55f23a12c9ae686", "patch": "@@ -244,4 +244,6 @@ impl ItemLikeVisitor<'v> for OrphanChecker<'tcx> {\n     fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem<'_>) {}\n \n     fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem<'_>) {}\n+\n+    fn visit_foreign_item(&mut self, _foreign_item: &hir::ForeignItem<'_>) {}\n }"}, {"sha": "2d9128e7dc0b7ef637bfa46ac571744827ef8649", "filename": "compiler/rustc_typeck/src/coherence/unsafety.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Funsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Funsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Funsafety.rs?ref=c9228570668803e3e6402770d55f23a12c9ae686", "patch": "@@ -94,4 +94,6 @@ impl ItemLikeVisitor<'v> for UnsafetyChecker<'tcx> {\n     fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem<'_>) {}\n \n     fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem<'_>) {}\n+\n+    fn visit_foreign_item(&mut self, _foreign_item: &hir::ForeignItem<'_>) {}\n }"}, {"sha": "0ff10abb60a357a5aff432be3631478bc1bca6cf", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=c9228570668803e3e6402770d55f23a12c9ae686", "patch": "@@ -646,8 +646,9 @@ fn convert_item(tcx: TyCtxt<'_>, item_id: hir::HirId) {\n         | hir::ItemKind::Use(..)\n         | hir::ItemKind::Mod(_)\n         | hir::ItemKind::GlobalAsm(_) => {}\n-        hir::ItemKind::ForeignMod(ref foreign_mod) => {\n-            for item in foreign_mod.items {\n+        hir::ItemKind::ForeignMod { items, .. } => {\n+            for item in items {\n+                let item = tcx.hir().foreign_item(item.id);\n                 let def_id = tcx.hir().local_def_id(item.hir_id);\n                 tcx.ensure().generics_of(def_id);\n                 tcx.ensure().type_of(def_id);"}, {"sha": "88ba5788b05d191536865b4c5be74e33d1c5cff5", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=c9228570668803e3e6402770d55f23a12c9ae686", "patch": "@@ -259,7 +259,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                 ItemKind::Trait(..)\n                 | ItemKind::TraitAlias(..)\n                 | ItemKind::Mod(..)\n-                | ItemKind::ForeignMod(..)\n+                | ItemKind::ForeignMod { .. }\n                 | ItemKind::GlobalAsm(..)\n                 | ItemKind::ExternCrate(..)\n                 | ItemKind::Use(..) => {"}, {"sha": "14daa97c2c587759393533bc278f2902b58ced53", "filename": "compiler/rustc_typeck/src/impl_wf_check.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check.rs?ref=c9228570668803e3e6402770d55f23a12c9ae686", "patch": "@@ -93,6 +93,8 @@ impl ItemLikeVisitor<'tcx> for ImplWfCheck<'tcx> {\n     fn visit_trait_item(&mut self, _trait_item: &'tcx hir::TraitItem<'tcx>) {}\n \n     fn visit_impl_item(&mut self, _impl_item: &'tcx hir::ImplItem<'tcx>) {}\n+\n+    fn visit_foreign_item(&mut self, _foreign_item: &'tcx hir::ForeignItem<'tcx>) {}\n }\n \n fn enforce_impl_params_are_constrained("}, {"sha": "3d0635e3fe4375039a4ea239032d0389a58df848", "filename": "compiler/rustc_typeck/src/outlives/implicit_infer.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fimplicit_infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fimplicit_infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fimplicit_infer.rs?ref=c9228570668803e3e6402770d55f23a12c9ae686", "patch": "@@ -109,6 +109,8 @@ impl<'cx, 'tcx> ItemLikeVisitor<'tcx> for InferVisitor<'cx, 'tcx> {\n     fn visit_trait_item(&mut self, _trait_item: &'tcx hir::TraitItem<'tcx>) {}\n \n     fn visit_impl_item(&mut self, _impl_item: &'tcx hir::ImplItem<'tcx>) {}\n+\n+    fn visit_foreign_item(&mut self, _foreign_item: &'tcx hir::ForeignItem<'tcx>) {}\n }\n \n fn insert_required_predicates_to_be_wf<'tcx>("}, {"sha": "56d42f756c4960a0f6255502e77bd57adc0b0b62", "filename": "compiler/rustc_typeck/src/outlives/test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Ftest.rs?ref=c9228570668803e3e6402770d55f23a12c9ae686", "patch": "@@ -26,4 +26,5 @@ impl ItemLikeVisitor<'tcx> for OutlivesTest<'tcx> {\n \n     fn visit_trait_item(&mut self, _: &'tcx hir::TraitItem<'tcx>) {}\n     fn visit_impl_item(&mut self, _: &'tcx hir::ImplItem<'tcx>) {}\n+    fn visit_foreign_item(&mut self, _: &'tcx hir::ForeignItem<'tcx>) {}\n }"}, {"sha": "a8fbdfb7c651441a4654f1efba08708fed880f3a", "filename": "compiler/rustc_typeck/src/variance/constraints.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fconstraints.rs?ref=c9228570668803e3e6402770d55f23a12c9ae686", "patch": "@@ -92,14 +92,6 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for ConstraintContext<'a, 'tcx> {\n                 self.visit_node_helper(item.hir_id);\n             }\n \n-            hir::ItemKind::ForeignMod(ref foreign_mod) => {\n-                for foreign_item in foreign_mod.items {\n-                    if let hir::ForeignItemKind::Fn(..) = foreign_item.kind {\n-                        self.visit_node_helper(foreign_item.hir_id);\n-                    }\n-                }\n-            }\n-\n             _ => {}\n         }\n     }\n@@ -115,6 +107,12 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for ConstraintContext<'a, 'tcx> {\n             self.visit_node_helper(impl_item.hir_id);\n         }\n     }\n+\n+    fn visit_foreign_item(&mut self, foreign_item: &hir::ForeignItem<'_>) {\n+        if let hir::ForeignItemKind::Fn(..) = foreign_item.kind {\n+            self.visit_node_helper(foreign_item.hir_id);\n+        }\n+    }\n }\n \n impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {"}, {"sha": "3b2a1c24ddd8d54d8ae58d5543fbff76e15f9f5e", "filename": "compiler/rustc_typeck/src/variance/terms.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fterms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fterms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fterms.rs?ref=c9228570668803e3e6402770d55f23a12c9ae686", "patch": "@@ -153,14 +153,6 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for TermsContext<'a, 'tcx> {\n                 self.add_inferreds_for_item(item.hir_id);\n             }\n \n-            hir::ItemKind::ForeignMod(ref foreign_mod) => {\n-                for foreign_item in foreign_mod.items {\n-                    if let hir::ForeignItemKind::Fn(..) = foreign_item.kind {\n-                        self.add_inferreds_for_item(foreign_item.hir_id);\n-                    }\n-                }\n-            }\n-\n             _ => {}\n         }\n     }\n@@ -176,4 +168,10 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for TermsContext<'a, 'tcx> {\n             self.add_inferreds_for_item(impl_item.hir_id);\n         }\n     }\n+\n+    fn visit_foreign_item(&mut self, foreign_item: &hir::ForeignItem<'_>) {\n+        if let hir::ForeignItemKind::Fn(..) = foreign_item.kind {\n+            self.add_inferreds_for_item(foreign_item.hir_id);\n+        }\n+    }\n }"}, {"sha": "d6e43b6d66950c4f10b1b7e94e458a741685fc26", "filename": "compiler/rustc_typeck/src/variance/test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9228570668803e3e6402770d55f23a12c9ae686/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Ftest.rs?ref=c9228570668803e3e6402770d55f23a12c9ae686", "patch": "@@ -26,4 +26,5 @@ impl ItemLikeVisitor<'tcx> for VarianceTest<'tcx> {\n \n     fn visit_trait_item(&mut self, _: &'tcx hir::TraitItem<'tcx>) {}\n     fn visit_impl_item(&mut self, _: &'tcx hir::ImplItem<'tcx>) {}\n+    fn visit_foreign_item(&mut self, _: &'tcx hir::ForeignItem<'tcx>) {}\n }"}, {"sha": "02152edbbc21c95a98b341e106d85feb0123df4b", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c9228570668803e3e6402770d55f23a12c9ae686/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9228570668803e3e6402770d55f23a12c9ae686/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=c9228570668803e3e6402770d55f23a12c9ae686", "patch": "@@ -240,8 +240,9 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         }\n \n         match item.kind {\n-            hir::ItemKind::ForeignMod(ref fm) => {\n-                for item in fm.items {\n+            hir::ItemKind::ForeignMod { items, .. } => {\n+                for item in items {\n+                    let item = self.cx.tcx.hir().foreign_item(item.id);\n                     self.visit_foreign_item(item, None, om);\n                 }\n             }"}, {"sha": "dd7751677579c2404e936fcfb08dc87c27438f6e", "filename": "src/test/incremental/hashes/extern_mods.rs", "status": "modified", "additions": 53, "deletions": 78, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/c9228570668803e3e6402770d55f23a12c9ae686/src%2Ftest%2Fincremental%2Fhashes%2Fextern_mods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9228570668803e3e6402770d55f23a12c9ae686/src%2Ftest%2Fincremental%2Fhashes%2Fextern_mods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fextern_mods.rs?ref=c9228570668803e3e6402770d55f23a12c9ae686", "patch": "@@ -13,189 +13,166 @@\n #![feature(rustc_attrs)]\n #![feature(unboxed_closures)]\n #![feature(link_args)]\n-#![crate_type=\"rlib\"]\n-\n+#![crate_type = \"rlib\"]\n \n // Change function name --------------------------------------------------------\n #[cfg(cfail1)]\n-extern {\n+extern \"C\" {\n     pub fn change_function_name1(c: i64) -> i32;\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg=\"cfail2\")]\n-#[rustc_clean(cfg=\"cfail3\")]\n-extern {\n+#[rustc_dirty(cfg = \"cfail2\", except = \"hir_owner_nodes\")]\n+#[rustc_clean(cfg = \"cfail3\")]\n+extern \"C\" {\n     pub fn change_function_name2(c: i64) -> i32;\n }\n \n-\n-\n // Change parameter name -------------------------------------------------------\n #[cfg(cfail1)]\n-extern {\n+extern \"C\" {\n     pub fn change_parameter_name(c: i64) -> i32;\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg=\"cfail2\")]\n-#[rustc_clean(cfg=\"cfail3\")]\n-extern {\n+#[rustc_dirty(cfg = \"cfail2\", except = \"hir_owner,hir_owner_nodes\")]\n+#[rustc_clean(cfg = \"cfail3\")]\n+extern \"C\" {\n     pub fn change_parameter_name(d: i64) -> i32;\n }\n \n-\n-\n // Change parameter type -------------------------------------------------------\n #[cfg(cfail1)]\n-extern {\n+extern \"C\" {\n     pub fn change_parameter_type(c: i64) -> i32;\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg=\"cfail2\")]\n-#[rustc_clean(cfg=\"cfail3\")]\n-extern {\n+#[rustc_dirty(cfg = \"cfail2\", except = \"hir_owner,hir_owner_nodes\")]\n+#[rustc_clean(cfg = \"cfail3\")]\n+extern \"C\" {\n     pub fn change_parameter_type(c: i32) -> i32;\n }\n \n-\n-\n // Change return type ----------------------------------------------------------\n #[cfg(cfail1)]\n-extern {\n+extern \"C\" {\n     pub fn change_return_type(c: i32) -> i32;\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg=\"cfail2\")]\n-#[rustc_clean(cfg=\"cfail3\")]\n-extern {\n+#[rustc_dirty(cfg = \"cfail2\", except = \"hir_owner,hir_owner_nodes\")]\n+#[rustc_clean(cfg = \"cfail3\")]\n+extern \"C\" {\n     pub fn change_return_type(c: i32) -> i8;\n }\n \n-\n-\n // Add parameter ---------------------------------------------------------------\n #[cfg(cfail1)]\n-extern {\n+extern \"C\" {\n     pub fn add_parameter(c: i32) -> i32;\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg=\"cfail2\")]\n-#[rustc_clean(cfg=\"cfail3\")]\n-extern {\n+#[rustc_dirty(cfg = \"cfail2\", except = \"hir_owner,hir_owner_nodes\")]\n+#[rustc_clean(cfg = \"cfail3\")]\n+extern \"C\" {\n     pub fn add_parameter(c: i32, d: i32) -> i32;\n }\n \n-\n-\n // Add return type -------------------------------------------------------------\n #[cfg(cfail1)]\n-extern {\n+extern \"C\" {\n     pub fn add_return_type(c: i32);\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg=\"cfail2\")]\n-#[rustc_clean(cfg=\"cfail3\")]\n-extern {\n+#[rustc_dirty(cfg = \"cfail2\", except = \"hir_owner,hir_owner_nodes\")]\n+#[rustc_clean(cfg = \"cfail3\")]\n+extern \"C\" {\n     pub fn add_return_type(c: i32) -> i32;\n }\n \n-\n-\n // Make function variadic ------------------------------------------------------\n #[cfg(cfail1)]\n-extern {\n+extern \"C\" {\n     pub fn make_function_variadic(c: i32);\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg=\"cfail2\")]\n-#[rustc_clean(cfg=\"cfail3\")]\n-extern {\n+#[rustc_dirty(cfg = \"cfail2\", except = \"hir_owner,hir_owner_nodes\")]\n+#[rustc_clean(cfg = \"cfail3\")]\n+extern \"C\" {\n     pub fn make_function_variadic(c: i32, ...);\n }\n \n-\n-\n // Change calling convention ---------------------------------------------------\n #[cfg(cfail1)]\n extern \"C\" {\n     pub fn change_calling_convention(c: i32);\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg=\"cfail2\")]\n-#[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_dirty(cfg = \"cfail2\", except = \"hir_owner_nodes\")]\n+#[rustc_clean(cfg = \"cfail3\")]\n extern \"rust-call\" {\n     pub fn change_calling_convention(c: i32);\n }\n \n-\n-\n // Make function public --------------------------------------------------------\n #[cfg(cfail1)]\n-extern {\n+extern \"C\" {\n     fn make_function_public(c: i32);\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg=\"cfail2\")]\n-#[rustc_clean(cfg=\"cfail3\")]\n-extern {\n+#[rustc_dirty(cfg = \"cfail2\", except = \"hir_owner_nodes\")]\n+#[rustc_clean(cfg = \"cfail3\")]\n+extern \"C\" {\n     pub fn make_function_public(c: i32);\n }\n \n-\n-\n // Add function ----------------------------------------------------------------\n #[cfg(cfail1)]\n-extern {\n+extern \"C\" {\n     pub fn add_function1(c: i32);\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg=\"cfail2\")]\n-#[rustc_clean(cfg=\"cfail3\")]\n-extern {\n+#[rustc_dirty(cfg = \"cfail2\", except = \"hir_owner_nodes\")]\n+#[rustc_clean(cfg = \"cfail3\")]\n+extern \"C\" {\n     pub fn add_function1(c: i32);\n     pub fn add_function2();\n }\n \n-\n-\n // Change link-args ------------------------------------------------------------\n #[cfg(cfail1)]\n #[link_args = \"-foo -bar\"]\n-extern {\n+extern \"C\" {\n     pub fn change_link_args(c: i32);\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg=\"cfail2\")]\n-#[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_dirty(cfg = \"cfail2\", except = \"hir_owner_nodes\")]\n+#[rustc_clean(cfg = \"cfail3\")]\n #[link_args = \"-foo -bar -baz\"]\n-extern {\n+extern \"C\" {\n     pub fn change_link_args(c: i32);\n }\n \n-\n-\n // Change link-name ------------------------------------------------------------\n #[cfg(cfail1)]\n #[link(name = \"foo\")]\n-extern {\n+extern \"C\" {\n     pub fn change_link_name(c: i32);\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg=\"cfail2\")]\n-#[rustc_clean(cfg=\"cfail3\")]\n+#[rustc_dirty(cfg = \"cfail2\", except = \"hir_owner_nodes\")]\n+#[rustc_clean(cfg = \"cfail3\")]\n #[link(name = \"bar\")]\n-extern {\n+extern \"C\" {\n     pub fn change_link_name(c: i32);\n }\n \n@@ -209,25 +186,23 @@ mod indirectly_change_parameter_type {\n     #[cfg(not(cfail1))]\n     use super::c_i64 as c_int;\n \n-    #[rustc_dirty(cfg=\"cfail2\")]\n-    #[rustc_clean(cfg=\"cfail3\")]\n-    extern {\n+    #[rustc_dirty(cfg = \"cfail2\", except = \"hir_owner,hir_owner_nodes\")]\n+    #[rustc_clean(cfg = \"cfail3\")]\n+    extern \"C\" {\n         pub fn indirectly_change_parameter_type(c: c_int);\n     }\n }\n \n-\n-\n // Indirectly change return type --------------------------------------------\n mod indirectly_change_return_type {\n     #[cfg(cfail1)]\n     use super::c_i32 as c_int;\n     #[cfg(not(cfail1))]\n     use super::c_i64 as c_int;\n \n-    #[rustc_dirty(cfg=\"cfail2\")]\n-    #[rustc_clean(cfg=\"cfail3\")]\n-    extern {\n+    #[rustc_dirty(cfg = \"cfail2\", except = \"hir_owner,hir_owner_nodes\")]\n+    #[rustc_clean(cfg = \"cfail3\")]\n+    extern \"C\" {\n         pub fn indirectly_change_return_type() -> c_int;\n     }\n }"}, {"sha": "565c2986a66a7cd9a0ebae50085c41a1c0ee8ca1", "filename": "src/test/ui/asm/naked-invalid-attr.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c9228570668803e3e6402770d55f23a12c9ae686/src%2Ftest%2Fui%2Fasm%2Fnaked-invalid-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9228570668803e3e6402770d55f23a12c9ae686/src%2Ftest%2Fui%2Fasm%2Fnaked-invalid-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-invalid-attr.stderr?ref=c9228570668803e3e6402770d55f23a12c9ae686", "patch": "@@ -1,11 +1,3 @@\n-error: attribute should be applied to a function definition\n-  --> $DIR/naked-invalid-attr.rs:9:5\n-   |\n-LL |     #[naked]\n-   |     ^^^^^^^^\n-LL |     fn f();\n-   |     ------- not a function definition\n-\n error: attribute should be applied to a function definition\n   --> $DIR/naked-invalid-attr.rs:13:1\n    |\n@@ -32,6 +24,14 @@ LL |     #[naked]\n LL |     extern \"C\" fn invoke(&self);\n    |     ---------------------------- not a function definition\n \n+error: attribute should be applied to a function definition\n+  --> $DIR/naked-invalid-attr.rs:9:5\n+   |\n+LL |     #[naked]\n+   |     ^^^^^^^^\n+LL |     fn f();\n+   |     ------- not a function definition\n+\n error: attribute should be applied to a function definition\n   --> $DIR/naked-invalid-attr.rs:6:1\n    |"}, {"sha": "6ac884c12ceb9a7df3455f0d8d7dcae478ad3e87", "filename": "src/test/ui/lint/inline-trait-and-foreign-items.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c9228570668803e3e6402770d55f23a12c9ae686/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9228570668803e3e6402770d55f23a12c9ae686/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.stderr?ref=c9228570668803e3e6402770d55f23a12c9ae686", "patch": "@@ -1,19 +1,3 @@\n-error[E0518]: attribute should be applied to function or closure\n-  --> $DIR/inline-trait-and-foreign-items.rs:30:5\n-   |\n-LL |     #[inline]\n-   |     ^^^^^^^^^\n-LL |     static X: u32;\n-   |     -------------- not a function or closure\n-\n-error[E0518]: attribute should be applied to function or closure\n-  --> $DIR/inline-trait-and-foreign-items.rs:33:5\n-   |\n-LL |     #[inline]\n-   |     ^^^^^^^^^\n-LL |     type T;\n-   |     ------- not a function or closure\n-\n warning: `#[inline]` is ignored on constants\n   --> $DIR/inline-trait-and-foreign-items.rs:7:5\n    |\n@@ -61,6 +45,22 @@ LL |     #[inline]\n LL |     type U = impl Trait;\n    |     -------------------- not a function or closure\n \n+error[E0518]: attribute should be applied to function or closure\n+  --> $DIR/inline-trait-and-foreign-items.rs:30:5\n+   |\n+LL |     #[inline]\n+   |     ^^^^^^^^^\n+LL |     static X: u32;\n+   |     -------------- not a function or closure\n+\n+error[E0518]: attribute should be applied to function or closure\n+  --> $DIR/inline-trait-and-foreign-items.rs:33:5\n+   |\n+LL |     #[inline]\n+   |     ^^^^^^^^^\n+LL |     type T;\n+   |     ------- not a function or closure\n+\n error: could not find defining uses\n   --> $DIR/inline-trait-and-foreign-items.rs:26:14\n    |"}, {"sha": "ab19d80e7327c56a5cd84ceb511c379656def9da", "filename": "src/test/ui/lint/warn-unused-inline-on-fn-prototypes.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9228570668803e3e6402770d55f23a12c9ae686/src%2Ftest%2Fui%2Flint%2Fwarn-unused-inline-on-fn-prototypes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9228570668803e3e6402770d55f23a12c9ae686/src%2Ftest%2Fui%2Flint%2Fwarn-unused-inline-on-fn-prototypes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fwarn-unused-inline-on-fn-prototypes.stderr?ref=c9228570668803e3e6402770d55f23a12c9ae686", "patch": "@@ -1,5 +1,5 @@\n error: `#[inline]` is ignored on function prototypes\n-  --> $DIR/warn-unused-inline-on-fn-prototypes.rs:9:5\n+  --> $DIR/warn-unused-inline-on-fn-prototypes.rs:4:5\n    |\n LL |     #[inline]\n    |     ^^^^^^^^^\n@@ -11,7 +11,7 @@ LL | #![deny(unused_attributes)]\n    |         ^^^^^^^^^^^^^^^^^\n \n error: `#[inline]` is ignored on function prototypes\n-  --> $DIR/warn-unused-inline-on-fn-prototypes.rs:4:5\n+  --> $DIR/warn-unused-inline-on-fn-prototypes.rs:9:5\n    |\n LL |     #[inline]\n    |     ^^^^^^^^^"}, {"sha": "4678f6872f37ce64887bab2d16fbab1639946850", "filename": "src/tools/clippy/clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9228570668803e3e6402770d55f23a12c9ae686/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9228570668803e3e6402770d55f23a12c9ae686/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs?ref=c9228570668803e3e6402770d55f23a12c9ae686", "patch": "@@ -147,7 +147,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n             hir::ItemKind::Union(..) => \"a union\",\n             hir::ItemKind::OpaqueTy(..) => \"an existential type\",\n             hir::ItemKind::ExternCrate(..)\n-            | hir::ItemKind::ForeignMod(..)\n+            | hir::ItemKind::ForeignMod { .. }\n             | hir::ItemKind::GlobalAsm(..)\n             | hir::ItemKind::Impl { .. }\n             | hir::ItemKind::Use(..) => return,"}, {"sha": "913d9daff46fd49a680f17ac9f2f207531660bba", "filename": "src/tools/clippy/clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9228570668803e3e6402770d55f23a12c9ae686/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9228570668803e3e6402770d55f23a12c9ae686/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_inline.rs?ref=c9228570668803e3e6402770d55f23a12c9ae686", "patch": "@@ -125,7 +125,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingInline {\n             | hir::ItemKind::Union(..)\n             | hir::ItemKind::OpaqueTy(..)\n             | hir::ItemKind::ExternCrate(..)\n-            | hir::ItemKind::ForeignMod(..)\n+            | hir::ItemKind::ForeignMod { .. }\n             | hir::ItemKind::Impl { .. }\n             | hir::ItemKind::Use(..) => {},\n         };"}, {"sha": "8f0ef9150d4503824677526c68155c243d617b97", "filename": "src/tools/clippy/clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9228570668803e3e6402770d55f23a12c9ae686/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9228570668803e3e6402770d55f23a12c9ae686/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=c9228570668803e3e6402770d55f23a12c9ae686", "patch": "@@ -395,7 +395,7 @@ fn print_item(cx: &LateContext<'_>, item: &hir::Item<'_>) {\n             println!(\"function of type {:#?}\", item_ty);\n         },\n         hir::ItemKind::Mod(..) => println!(\"module\"),\n-        hir::ItemKind::ForeignMod(ref fm) => println!(\"foreign module with abi: {}\", fm.abi),\n+        hir::ItemKind::ForeignMod { abi, .. } => println!(\"foreign module with abi: {}\", abi),\n         hir::ItemKind::GlobalAsm(ref asm) => println!(\"global asm: {:?}\", asm),\n         hir::ItemKind::TyAlias(..) => {\n             println!(\"type alias for {:?}\", cx.tcx.type_of(did));"}]}