{"sha": "89e96e9bc575b370c7b55055aad28bebd14e8dfe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5ZTk2ZTliYzU3NWIzNzBjN2I1NTA1NWFhZDI4YmViZDE0ZThkZmU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-19T02:06:03Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-28T19:37:59Z"}, "message": "Point at closure definitions", "tree": {"sha": "656555d7cfb0cf987a646c2753a03845dbf3e01e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/656555d7cfb0cf987a646c2753a03845dbf3e01e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89e96e9bc575b370c7b55055aad28bebd14e8dfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89e96e9bc575b370c7b55055aad28bebd14e8dfe", "html_url": "https://github.com/rust-lang/rust/commit/89e96e9bc575b370c7b55055aad28bebd14e8dfe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89e96e9bc575b370c7b55055aad28bebd14e8dfe/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a64c3f5cb33d8504b824ae67dcf8482588586f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a64c3f5cb33d8504b824ae67dcf8482588586f9", "html_url": "https://github.com/rust-lang/rust/commit/9a64c3f5cb33d8504b824ae67dcf8482588586f9"}], "stats": {"total": 54, "additions": 32, "deletions": 22}, "files": [{"sha": "5d4a143598fb9503c3075f998b5fd2ccd016d377", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 24, "deletions": 17, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/89e96e9bc575b370c7b55055aad28bebd14e8dfe/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89e96e9bc575b370c7b55055aad28bebd14e8dfe/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=89e96e9bc575b370c7b55055aad28bebd14e8dfe", "patch": "@@ -538,28 +538,29 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     let def_span =\n                         |def_id| self.tcx.sess.source_map().def_span(self.tcx.def_span(def_id));\n                     let mut bound_spans = vec![];\n-                    let mut bound_span_label = |self_ty: Ty<'_>, obligation: &str| {\n+                    let mut bound_span_label = |self_ty: Ty<'_>, obligation: &str, quiet: &str| {\n+                        let msg = format!(\n+                            \"doesn't satisfy {}\",\n+                            if obligation.len() > 50 { quiet } else { obligation }\n+                        );\n                         match &self_ty.kind {\n-                            ty::Adt(def, _) => {\n-                                // Point at the type that couldn't satisfy the bound.\n-                                bound_spans.push((\n-                                    def_span(def.did),\n-                                    format!(\"doesn't satisfy {}\", obligation),\n-                                ));\n-                            }\n+                            // Point at the type that couldn't satisfy the bound.\n+                            ty::Adt(def, _) => bound_spans.push((def_span(def.did), msg)),\n+                            // Point at the trait object that couldn't satisfy the bound.\n                             ty::Dynamic(preds, _) => {\n-                                // Point at the trait object that couldn't satisfy the bound.\n                                 for pred in *preds.skip_binder() {\n                                     match pred {\n-                                        ty::ExistentialPredicate::Trait(tr) => bound_spans.push((\n-                                            def_span(tr.def_id),\n-                                            format!(\"doesn't satisfy {}\", obligation),\n-                                        )),\n+                                        ty::ExistentialPredicate::Trait(tr) => {\n+                                            bound_spans.push((def_span(tr.def_id), msg.clone()))\n+                                        }\n                                         ty::ExistentialPredicate::Projection(_)\n                                         | ty::ExistentialPredicate::AutoTrait(_) => {}\n                                     }\n                                 }\n                             }\n+                            // Point at the closure that couldn't satisfy the bound.\n+                            ty::Closure(def_id, _) => bound_spans\n+                                .push((def_span(*def_id), format!(\"doesn't satisfy {}\", quiet))),\n                             _ => {}\n                         }\n                     };\n@@ -573,17 +574,23 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                     .tcx\n                                     .associated_item(pred.skip_binder().projection_ty.item_def_id);\n                                 let ty = pred.skip_binder().ty;\n-                                let obligation =\n-                                    format!(\"`{}::{} = {}`\", trait_ref, assoc.ident, ty);\n-                                bound_span_label(trait_ref.self_ty(), &obligation);\n+                                let msg = format!(\"`{}::{} = {}`\", trait_ref, assoc.ident, ty);\n+                                let quiet = format!(\n+                                    \"`<_ as {}>::{} = {}`\",\n+                                    trait_ref.print_only_trait_path(),\n+                                    assoc.ident,\n+                                    ty\n+                                );\n+                                bound_span_label(trait_ref.self_ty(), &msg, &quiet);\n                                 Some(obligation)\n                             }\n                             ty::Predicate::Trait(poly_trait_ref, _) => {\n                                 let p = poly_trait_ref.skip_binder().trait_ref;\n                                 let self_ty = p.self_ty();\n                                 let path = p.print_only_trait_path();\n                                 let obligation = format!(\"`{}: {}`\", self_ty, path);\n-                                bound_span_label(self_ty, &obligation);\n+                                let quiet = format!(\"`_: {}`\", path);\n+                                bound_span_label(self_ty, &obligation, &quiet);\n                                 Some(obligation)\n                             }\n                             _ => None,"}, {"sha": "ca8e63550d602a7440c0e86fba394438e8ed15e7", "filename": "src/test/ui/issues/issue-31173.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89e96e9bc575b370c7b55055aad28bebd14e8dfe/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/89e96e9bc575b370c7b55055aad28bebd14e8dfe/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr?ref=89e96e9bc575b370c7b55055aad28bebd14e8dfe", "patch": "@@ -16,10 +16,10 @@ LL |         .collect();\n   ::: $SRC_DIR/libcore/iter/adapters/mod.rs:LL:COL\n    |\n LL | pub struct Cloned<I> {\n-   | -------------------- doesn't satisfy `std::iter::Cloned<std::iter::TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:10:39: 13:6 found_e:_]>>: std::iter::Iterator`\n+   | -------------------- doesn't satisfy `_: std::iter::Iterator`\n ...\n LL | pub struct TakeWhile<I, P> {\n-   | -------------------------- doesn't satisfy `<std::iter::TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:10:39: 13:6 found_e:_]> as std::iter::Iterator>::Item = &_`\n+   | -------------------------- doesn't satisfy `<_ as std::iter::Iterator>::Item = &_`\n    |\n    = note: the method `collect` exists but the following trait bounds were not satisfied:\n            `<std::iter::TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:10:39: 13:6 found_e:_]> as std::iter::Iterator>::Item = &_` which is required by `std::iter::Cloned<std::iter::TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:10:39: 13:6 found_e:_]>>: std::iter::Iterator`"}, {"sha": "49e61cd23277b5fbbc4767cbf546c6f6affe9864", "filename": "src/test/ui/mismatched_types/issue-36053-2.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/89e96e9bc575b370c7b55055aad28bebd14e8dfe/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/89e96e9bc575b370c7b55055aad28bebd14e8dfe/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr?ref=89e96e9bc575b370c7b55055aad28bebd14e8dfe", "patch": "@@ -2,12 +2,15 @@ error[E0599]: no method named `count` found for struct `std::iter::Filter<std::i\n   --> $DIR/issue-36053-2.rs:11:55\n    |\n LL |     once::<&str>(\"str\").fuse().filter(|a: &str| true).count();\n-   |                                                       ^^^^^ method not found in `std::iter::Filter<std::iter::Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:11:39: 11:53]>`\n+   |                                       --------------  ^^^^^ method not found in `std::iter::Filter<std::iter::Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:11:39: 11:53]>`\n+   |                                       |\n+   |                                       doesn't satisfy `<_ as std::ops::FnOnce<(&&str,)>>::Output = bool`\n+   |                                       doesn't satisfy `_: std::ops::FnMut<(&&str,)>`\n    | \n   ::: $SRC_DIR/libcore/iter/adapters/mod.rs:LL:COL\n    |\n LL | pub struct Filter<I, P> {\n-   | ----------------------- doesn't satisfy `std::iter::Filter<std::iter::Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:11:39: 11:53]>: std::iter::Iterator`\n+   | ----------------------- doesn't satisfy `_: std::iter::Iterator`\n    |\n    = note: the method `count` exists but the following trait bounds were not satisfied:\n            `<[closure@$DIR/issue-36053-2.rs:11:39: 11:53] as std::ops::FnOnce<(&&str,)>>::Output = bool` which is required by `std::iter::Filter<std::iter::Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:11:39: 11:53]>: std::iter::Iterator`"}, {"sha": "16a03c42a4d7323dbe535f4b5079d98e0f289f08", "filename": "src/test/ui/suggestions/mut-borrow-needed-by-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89e96e9bc575b370c7b55055aad28bebd14e8dfe/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/89e96e9bc575b370c7b55055aad28bebd14e8dfe/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr?ref=89e96e9bc575b370c7b55055aad28bebd14e8dfe", "patch": "@@ -34,7 +34,7 @@ LL |     writeln!(fp, \"hello world\").unwrap();\n   ::: $SRC_DIR/libstd/io/buffered.rs:LL:COL\n    |\n LL | pub struct BufWriter<W: Write> {\n-   | ------------------------------ doesn't satisfy `std::io::BufWriter<&dyn std::io::Write>: std::io::Write`\n+   | ------------------------------ doesn't satisfy `_: std::io::Write`\n    |\n    = note: the method `write_fmt` exists but the following trait bounds were not satisfied:\n            `&dyn std::io::Write: std::io::Write` which is required by `std::io::BufWriter<&dyn std::io::Write>: std::io::Write`"}]}