{"sha": "f4ff4189ae01b6c2a775c63f24b51b708b74ec02", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0ZmY0MTg5YWUwMWI2YzJhNzc1YzYzZjI0YjUxYjcwOGI3NGVjMDI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-16T15:09:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-16T15:09:46Z"}, "message": "Rollup merge of #64504 - guanqun:use-println-without-empty-str, r=jonas-schievink\n\nuse println!() instead of println!(\"\")\n\nThe empty string is unnecessary.", "tree": {"sha": "9eebf997477a5f67bc201376cf021ce74f84408c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9eebf997477a5f67bc201376cf021ce74f84408c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4ff4189ae01b6c2a775c63f24b51b708b74ec02", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdf6W6CRBK7hj4Ov3rIwAAdHIIAE3+ngPIBTg1gC2GRhAZzTOc\nGaHb14R4FE0cUhJHYGC+rNGZC5jvOPY2nW0HBSb9PXqhNexQIUp7T6fqfQHfpaD9\nLA+c7Q/i5aLdIQgC1ieUNqRaMPgp1QYsPUg3RuEW0G94bfw/ik47U9Ns8qpNVFut\nsrKfcBjs37xuZLInDS5QYPZiNn/DjcvWQsyuBcq8XEumAnA33n8jFJhKfq0YhAmh\n3VYhHUluT3A1+bFfGVHrM73jlrGH0W94p/i5GKkJp7VcSQZVKAxOQ5SWfb9PjS5j\nYWxV00XLDqow/ev01l2iu9wBkJ3ITcAS77lsnSQTpSFPiJT3eDT/lYN0Dr6kwng=\n=+cG4\n-----END PGP SIGNATURE-----\n", "payload": "tree 9eebf997477a5f67bc201376cf021ce74f84408c\nparent d8ecf45da8e6969f04d4d22f9a4f364231d205e9\nparent 5355a16150a89503b67edbb3da545f8d653a4126\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1568646586 +0200\ncommitter GitHub <noreply@github.com> 1568646586 +0200\n\nRollup merge of #64504 - guanqun:use-println-without-empty-str, r=jonas-schievink\n\nuse println!() instead of println!(\"\")\n\nThe empty string is unnecessary.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4ff4189ae01b6c2a775c63f24b51b708b74ec02", "html_url": "https://github.com/rust-lang/rust/commit/f4ff4189ae01b6c2a775c63f24b51b708b74ec02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4ff4189ae01b6c2a775c63f24b51b708b74ec02/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8ecf45da8e6969f04d4d22f9a4f364231d205e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8ecf45da8e6969f04d4d22f9a4f364231d205e9", "html_url": "https://github.com/rust-lang/rust/commit/d8ecf45da8e6969f04d4d22f9a4f364231d205e9"}, {"sha": "5355a16150a89503b67edbb3da545f8d653a4126", "url": "https://api.github.com/repos/rust-lang/rust/commits/5355a16150a89503b67edbb3da545f8d653a4126", "html_url": "https://github.com/rust-lang/rust/commit/5355a16150a89503b67edbb3da545f8d653a4126"}], "stats": {"total": 52, "additions": 26, "deletions": 26}, "files": [{"sha": "34e39af3c39fcda98ca756257ee78f3dfd9ea24f", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f4ff4189ae01b6c2a775c63f24b51b708b74ec02/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4ff4189ae01b6c2a775c63f24b51b708b74ec02/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=f4ff4189ae01b6c2a775c63f24b51b708b74ec02", "patch": "@@ -226,21 +226,21 @@ impl CodegenBackend for LlvmCodegenBackend {\n                 for &(name, _) in back::write::RELOC_MODEL_ARGS.iter() {\n                     println!(\"    {}\", name);\n                 }\n-                println!(\"\");\n+                println!();\n             }\n             PrintRequest::CodeModels => {\n                 println!(\"Available code models:\");\n                 for &(name, _) in back::write::CODE_GEN_MODEL_ARGS.iter(){\n                     println!(\"    {}\", name);\n                 }\n-                println!(\"\");\n+                println!();\n             }\n             PrintRequest::TlsModels => {\n                 println!(\"Available TLS models:\");\n                 for &(name, _) in back::write::TLS_MODEL_ARGS.iter(){\n                     println!(\"    {}\", name);\n                 }\n-                println!(\"\");\n+                println!();\n             }\n             req => llvm_util::print(req, sess),\n         }"}, {"sha": "b8d57cfafea0ab2d5edcb81ecf602417ed923ce7", "filename": "src/libstd/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4ff4189ae01b6c2a775c63f24b51b708b74ec02/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4ff4189ae01b6c2a775c63f24b51b708b74ec02/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=f4ff4189ae01b6c2a775c63f24b51b708b74ec02", "patch": "@@ -422,7 +422,7 @@ impl fmt::Debug for ChildStderr {\n /// // Execute `ls` in the current directory of the program.\n /// list_dir.status().expect(\"process failed to execute\");\n ///\n-/// println!(\"\");\n+/// println!();\n ///\n /// // Change `ls` to execute in the root directory.\n /// list_dir.current_dir(\"/\");"}, {"sha": "8c86d2cf435b65543d3b0efc2996200385e3b9e9", "filename": "src/test/debuginfo/function-arg-initialization.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4ff4189ae01b6c2a775c63f24b51b708b74ec02/src%2Ftest%2Fdebuginfo%2Ffunction-arg-initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4ff4189ae01b6c2a775c63f24b51b708b74ec02/src%2Ftest%2Fdebuginfo%2Ffunction-arg-initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ffunction-arg-initialization.rs?ref=f4ff4189ae01b6c2a775c63f24b51b708b74ec02", "patch": "@@ -242,12 +242,12 @@ fn non_immediate_args(a: BigStruct, b: BigStruct) {\n \n fn binding(a: i64, b: u64, c: f64) {\n     let x = 0; // #break\n-    println!(\"\")\n+    println!()\n }\n \n fn assignment(mut a: u64, b: u64, c: f64) {\n     a = b; // #break\n-    println!(\"\")\n+    println!()\n }\n \n fn function_call(x: u64, y: u64, z: f64) {"}, {"sha": "fb13fd764bfaf8369b236abf1d3bbbe6387977f2", "filename": "src/test/ui/drop/dropck_legal_cycles.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f4ff4189ae01b6c2a775c63f24b51b708b74ec02/src%2Ftest%2Fui%2Fdrop%2Fdropck_legal_cycles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4ff4189ae01b6c2a775c63f24b51b708b74ec02/src%2Ftest%2Fui%2Fdrop%2Fdropck_legal_cycles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fdropck_legal_cycles.rs?ref=f4ff4189ae01b6c2a775c63f24b51b708b74ec02", "patch": "@@ -143,7 +143,7 @@ pub fn main() {\n     v[0].descend_into_self(&mut c);\n     assert!(!c.saw_prev_marked); // <-- different from below, b/c acyclic above\n \n-    if PRINT { println!(\"\"); }\n+    if PRINT { println!(); }\n \n     // Cycle 1: { v[0] -> v[1], v[1] -> v[0] };\n     // does not exercise `v` itself\n@@ -158,7 +158,7 @@ pub fn main() {\n     v[0].descend_into_self(&mut c);\n     assert!(c.saw_prev_marked);\n \n-    if PRINT { println!(\"\"); }\n+    if PRINT { println!(); }\n \n     // Cycle 2: { v[0] -> v, v[1] -> v }\n     let v: V = Named::new(\"v\");\n@@ -171,7 +171,7 @@ pub fn main() {\n     v.descend_into_self(&mut c);\n     assert!(c.saw_prev_marked);\n \n-    if PRINT { println!(\"\"); }\n+    if PRINT { println!(); }\n \n     // Cycle 3: { hk0 -> hv0, hv0 -> hk0, hk1 -> hv1, hv1 -> hk1 };\n     // does not exercise `h` itself\n@@ -193,7 +193,7 @@ pub fn main() {\n         assert!(c.saw_prev_marked);\n     }\n \n-    if PRINT { println!(\"\"); }\n+    if PRINT { println!(); }\n \n     // Cycle 4: { h -> (hmk0,hmv0,hmk1,hmv1), {hmk0,hmv0,hmk1,hmv1} -> h }\n \n@@ -216,7 +216,7 @@ pub fn main() {\n         // break;\n     }\n \n-    if PRINT { println!(\"\"); }\n+    if PRINT { println!(); }\n \n     // Cycle 5: { vd[0] -> vd[1], vd[1] -> vd[0] };\n     // does not exercise vd itself\n@@ -232,7 +232,7 @@ pub fn main() {\n     vd[0].descend_into_self(&mut c);\n     assert!(c.saw_prev_marked);\n \n-    if PRINT { println!(\"\"); }\n+    if PRINT { println!(); }\n \n     // Cycle 6: { vd -> (vd0, vd1), {vd0, vd1} -> vd }\n     let mut vd: VecDeque<VD> = VecDeque::new();\n@@ -247,7 +247,7 @@ pub fn main() {\n     vd[0].descend_into_self(&mut c);\n     assert!(c.saw_prev_marked);\n \n-    if PRINT { println!(\"\"); }\n+    if PRINT { println!(); }\n \n     // Cycle 7: { vm -> (vm0, vm1), {vm0, vm1} -> vm }\n     let mut vm: HashMap<usize, VM> = HashMap::new();\n@@ -262,7 +262,7 @@ pub fn main() {\n     vm[&0].descend_into_self(&mut c);\n     assert!(c.saw_prev_marked);\n \n-    if PRINT { println!(\"\"); }\n+    if PRINT { println!(); }\n \n     // Cycle 8: { ll -> (ll0, ll1), {ll0, ll1} -> ll }\n     let mut ll: LinkedList<LL> = LinkedList::new();\n@@ -282,7 +282,7 @@ pub fn main() {\n         // break;\n     }\n \n-    if PRINT { println!(\"\"); }\n+    if PRINT { println!(); }\n \n     // Cycle 9: { bh -> (bh0, bh1), {bh0, bh1} -> bh }\n     let mut bh: BinaryHeap<BH> = BinaryHeap::new();\n@@ -302,7 +302,7 @@ pub fn main() {\n         // break;\n     }\n \n-    if PRINT { println!(\"\"); }\n+    if PRINT { println!(); }\n \n     // Cycle 10: { btm -> (btk0, btv1), {bt0, bt1} -> btm }\n     let mut btm: BTreeMap<BTM, BTM> = BTreeMap::new();\n@@ -323,7 +323,7 @@ pub fn main() {\n         // break;\n     }\n \n-    if PRINT { println!(\"\"); }\n+    if PRINT { println!(); }\n \n     // Cycle 10: { bts -> (bts0, bts1), {bts0, bts1} -> btm }\n     let mut bts: BTreeSet<BTS> = BTreeSet::new();\n@@ -343,7 +343,7 @@ pub fn main() {\n         // break;\n     }\n \n-    if PRINT { println!(\"\"); }\n+    if PRINT { println!(); }\n \n     // Cycle 11: { rc0 -> (rc1, rc2), rc1 -> (), rc2 -> rc0 }\n     let (rc0, rc1, rc2): (RCRC, RCRC, RCRC);\n@@ -361,7 +361,7 @@ pub fn main() {\n     rc0.descend_into_self(&mut c);\n     assert!(c.saw_prev_marked);\n \n-    if PRINT { println!(\"\"); }\n+    if PRINT { println!(); }\n \n     // We want to take the previous Rc case and generalize it to Arc.\n     //\n@@ -395,7 +395,7 @@ pub fn main() {\n     arc0.descend_into_self(&mut c);\n     assert!(c.saw_prev_marked);\n \n-    if PRINT { println!(\"\"); }\n+    if PRINT { println!(); }\n \n     // Cycle 13: { arc0 -> (arc1, arc2), arc1 -> (), arc2 -> arc0 }, rwlocks\n     let (arc0, arc1, arc2): (ARCRW, ARCRW, ARCRW);\n@@ -413,7 +413,7 @@ pub fn main() {\n     arc0.descend_into_self(&mut c);\n     assert!(c.saw_prev_marked);\n \n-    if PRINT { println!(\"\"); }\n+    if PRINT { println!(); }\n \n     // Cycle 14: { arc0 -> (arc1, arc2), arc1 -> (), arc2 -> arc0 }, mutexs\n     let (arc0, arc1, arc2): (ARCM, ARCM, ARCM);"}, {"sha": "0fbc796d7c0d3d18d2c1aa573f4dbf7c4aa7915d", "filename": "src/test/ui/for/for-c-in-str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4ff4189ae01b6c2a775c63f24b51b708b74ec02/src%2Ftest%2Fui%2Ffor%2Ffor-c-in-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4ff4189ae01b6c2a775c63f24b51b708b74ec02/src%2Ftest%2Fui%2Ffor%2Ffor-c-in-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor%2Ffor-c-in-str.rs?ref=f4ff4189ae01b6c2a775c63f24b51b708b74ec02", "patch": "@@ -6,6 +6,6 @@ fn main() {\n     //~| NOTE `&str` is not an iterator\n     //~| HELP the trait `std::iter::Iterator` is not implemented for `&str`\n     //~| NOTE required by `std::iter::IntoIterator::into_iter`\n-        println!(\"\");\n+        println!();\n     }\n }"}, {"sha": "7c51de5df226768395388c350fa04ffad0ca663b", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4ff4189ae01b6c2a775c63f24b51b708b74ec02/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4ff4189ae01b6c2a775c63f24b51b708b74ec02/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=f4ff4189ae01b6c2a775c63f24b51b708b74ec02", "patch": "@@ -253,7 +253,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n     if args.len() == 1 || args[1] == \"-h\" || args[1] == \"--help\" {\n         let message = format!(\"Usage: {} [OPTIONS] [TESTNAME...]\", argv0);\n         println!(\"{}\", opts.usage(&message));\n-        println!(\"\");\n+        println!();\n         panic!()\n     }\n \n@@ -265,7 +265,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n     if matches.opt_present(\"h\") || matches.opt_present(\"help\") {\n         let message = format!(\"Usage: {} [OPTIONS]  [TESTNAME...]\", argv0);\n         println!(\"{}\", opts.usage(&message));\n-        println!(\"\");\n+        println!();\n         panic!()\n     }\n "}, {"sha": "baed27dd15152712c542b841fe16029c3c197cd2", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4ff4189ae01b6c2a775c63f24b51b708b74ec02/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4ff4189ae01b6c2a775c63f24b51b708b74ec02/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=f4ff4189ae01b6c2a775c63f24b51b708b74ec02", "patch": "@@ -2593,7 +2593,7 @@ impl<'test> TestCx<'test> {\n                     \"  actual:   {}\",\n                     codegen_units_to_str(&actual_item.codegen_units)\n                 );\n-                println!(\"\");\n+                println!();\n             }\n         }\n \n@@ -3526,7 +3526,7 @@ impl<'test> TestCx<'test> {\n                             }\n                         }\n                     }\n-                    println!(\"\");\n+                    println!();\n                 }\n             }\n         }"}]}