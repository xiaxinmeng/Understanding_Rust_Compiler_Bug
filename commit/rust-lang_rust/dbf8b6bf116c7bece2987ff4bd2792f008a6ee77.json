{"sha": "dbf8b6bf116c7bece2987ff4bd2792f008a6ee77", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiZjhiNmJmMTE2YzdiZWNlMjk4N2ZmNGJkMjc5MmYwMDhhNmVlNzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-19T19:53:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-19T19:53:42Z"}, "message": "Auto merge of #71331 - Dylan-DPC:rollup-5rn1isc, r=Dylan-DPC\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #71026 (Fix false \"never constructed\" warnings for `Self::` variant paths)\n - #71310 (Do not show DefId in diagnostics)\n - #71317 (miri-unleash test for llvm_asm)\n - #71324 (Fix some tests failing in `--pass check` mode)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "e11bb9180eb09e7685232b2459586803c2ef78d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e11bb9180eb09e7685232b2459586803c2ef78d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbf8b6bf116c7bece2987ff4bd2792f008a6ee77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbf8b6bf116c7bece2987ff4bd2792f008a6ee77", "html_url": "https://github.com/rust-lang/rust/commit/dbf8b6bf116c7bece2987ff4bd2792f008a6ee77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbf8b6bf116c7bece2987ff4bd2792f008a6ee77/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad48d52a74e3e20fb1ecefaece7312cca90ab950", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad48d52a74e3e20fb1ecefaece7312cca90ab950", "html_url": "https://github.com/rust-lang/rust/commit/ad48d52a74e3e20fb1ecefaece7312cca90ab950"}, {"sha": "9fc24430e205a7176ee63d9b5bd3d2832398b109", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fc24430e205a7176ee63d9b5bd3d2832398b109", "html_url": "https://github.com/rust-lang/rust/commit/9fc24430e205a7176ee63d9b5bd3d2832398b109"}], "stats": {"total": 91, "additions": 78, "deletions": 13}, "files": [{"sha": "3bf067ebf1fe2aa3433747340d4a8faa0fe2f8fa", "filename": "src/librustc_middle/ty/print/pretty.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dbf8b6bf116c7bece2987ff4bd2792f008a6ee77/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbf8b6bf116c7bece2987ff4bd2792f008a6ee77/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs?ref=dbf8b6bf116c7bece2987ff4bd2792f008a6ee77", "patch": "@@ -639,9 +639,7 @@ pub trait PrettyPrinter<'tcx>:\n                         }\n                     }\n                 } else {\n-                    // Cross-crate closure types should only be\n-                    // visible in codegen bug reports, I imagine.\n-                    p!(write(\"@{:?}\", did));\n+                    p!(write(\"@{}\", self.tcx().def_path_str(did)));\n \n                     if substs.as_generator().is_valid() {\n                         let upvar_tys = substs.as_generator().upvar_tys();\n@@ -689,9 +687,7 @@ pub trait PrettyPrinter<'tcx>:\n                         }\n                     }\n                 } else {\n-                    // Cross-crate closure types should only be\n-                    // visible in codegen bug reports, I imagine.\n-                    p!(write(\"@{:?}\", did));\n+                    p!(write(\"@{}\", self.tcx().def_path_str(did)));\n \n                     if substs.as_closure().is_valid() {\n                         let upvar_tys = substs.as_closure().upvar_tys();"}, {"sha": "c07087db607cccde2dfa820202a1ffc26471b8e9", "filename": "src/librustc_passes/dead.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbf8b6bf116c7bece2987ff4bd2792f008a6ee77/src%2Flibrustc_passes%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbf8b6bf116c7bece2987ff4bd2792f008a6ee77/src%2Flibrustc_passes%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdead.rs?ref=dbf8b6bf116c7bece2987ff4bd2792f008a6ee77", "patch": "@@ -255,7 +255,9 @@ impl<'a, 'tcx> Visitor<'tcx> for MarkSymbolVisitor<'a, 'tcx> {\n             hir::ExprKind::Field(ref lhs, ..) => {\n                 self.handle_field_access(&lhs, expr.hir_id);\n             }\n-            hir::ExprKind::Struct(_, ref fields, _) => {\n+            hir::ExprKind::Struct(ref qpath, ref fields, _) => {\n+                let res = self.tables.qpath_res(qpath, expr.hir_id);\n+                self.handle_res(res);\n                 if let ty::Adt(ref adt, _) = self.tables.expr_ty(expr).kind {\n                     self.mark_as_used_if_union(adt, fields);\n                 }"}, {"sha": "9679e3807b629e76d5fa8e87894e464b4322aabb", "filename": "src/test/ui/async-await/issues/issue-67893.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbf8b6bf116c7bece2987ff4bd2792f008a6ee77/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-67893.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbf8b6bf116c7bece2987ff4bd2792f008a6ee77/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-67893.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-67893.rs?ref=dbf8b6bf116c7bece2987ff4bd2792f008a6ee77", "patch": "@@ -1,7 +1,5 @@\n // aux-build: issue_67893.rs\n // edition:2018\n-// dont-check-compiler-stderr\n-// FIXME(#71222): Add above flag because of the difference of stderrs on some env.\n \n extern crate issue_67893;\n "}, {"sha": "343a35a1663ac4df9cd6badb7c1eeb429dc207be", "filename": "src/test/ui/async-await/issues/issue-67893.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/dbf8b6bf116c7bece2987ff4bd2792f008a6ee77/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-67893.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbf8b6bf116c7bece2987ff4bd2792f008a6ee77/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-67893.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-67893.stderr?ref=dbf8b6bf116c7bece2987ff4bd2792f008a6ee77", "patch": "@@ -0,0 +1,24 @@\n+error[E0277]: `std::sync::MutexGuard<'_, ()>` cannot be sent between threads safely\n+  --> $DIR/issue-67893.rs:9:5\n+   |\n+LL | fn g(_: impl Send) {}\n+   |              ---- required by this bound in `g`\n+...\n+LL |     g(issue_67893::run())\n+   |     ^ `std::sync::MutexGuard<'_, ()>` cannot be sent between threads safely\n+   | \n+  ::: $DIR/auxiliary/issue_67893.rs:7:20\n+   |\n+LL | pub async fn run() {\n+   |                    - within this `impl std::future::Future`\n+   |\n+   = help: within `impl std::future::Future`, the trait `std::marker::Send` is not implemented for `std::sync::MutexGuard<'_, ()>`\n+   = note: required because it appears within the type `for<'r, 's, 't0, 't1, 't2, 't3> {std::future::ResumeTy, std::sync::Arc<std::sync::Mutex<()>>, &'r std::sync::Mutex<()>, std::result::Result<std::sync::MutexGuard<'s, ()>, std::sync::PoisonError<std::sync::MutexGuard<'t0, ()>>>, &'t1 std::sync::MutexGuard<'t2, ()>, std::sync::MutexGuard<'t3, ()>, (), impl std::future::Future}`\n+   = note: required because it appears within the type `[static generator@issue_67893::run::{{closure}}#0 for<'r, 's, 't0, 't1, 't2, 't3> {std::future::ResumeTy, std::sync::Arc<std::sync::Mutex<()>>, &'r std::sync::Mutex<()>, std::result::Result<std::sync::MutexGuard<'s, ()>, std::sync::PoisonError<std::sync::MutexGuard<'t0, ()>>>, &'t1 std::sync::MutexGuard<'t2, ()>, std::sync::MutexGuard<'t3, ()>, (), impl std::future::Future}]`\n+   = note: required because it appears within the type `std::future::from_generator::GenFuture<[static generator@issue_67893::run::{{closure}}#0 for<'r, 's, 't0, 't1, 't2, 't3> {std::future::ResumeTy, std::sync::Arc<std::sync::Mutex<()>>, &'r std::sync::Mutex<()>, std::result::Result<std::sync::MutexGuard<'s, ()>, std::sync::PoisonError<std::sync::MutexGuard<'t0, ()>>>, &'t1 std::sync::MutexGuard<'t2, ()>, std::sync::MutexGuard<'t3, ()>, (), impl std::future::Future}]>`\n+   = note: required because it appears within the type `impl std::future::Future`\n+   = note: required because it appears within the type `impl std::future::Future`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "f36ebf38db4fe4be8aa7f44adc369f5d7893d0f0", "filename": "src/test/ui/consts/array-literal-index-oob.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbf8b6bf116c7bece2987ff4bd2792f008a6ee77/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbf8b6bf116c7bece2987ff4bd2792f008a6ee77/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.rs?ref=dbf8b6bf116c7bece2987ff4bd2792f008a6ee77", "patch": "@@ -1,5 +1,5 @@\n // build-pass\n-// ignore-pass (emit codegen-time warnings and verify that they are indeed warnings and not errors)\n+// ignore-pass (test emits codegen-time warnings and verifies that they are not errors)\n \n #![warn(const_err, unconditional_panic)]\n "}, {"sha": "142ce75eebc80837d564c86a7b526caa1a8d162b", "filename": "src/test/ui/consts/const-eval/promoted_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbf8b6bf116c7bece2987ff4bd2792f008a6ee77/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbf8b6bf116c7bece2987ff4bd2792f008a6ee77/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs?ref=dbf8b6bf116c7bece2987ff4bd2792f008a6ee77", "patch": "@@ -4,7 +4,7 @@\n //[opt_with_overflow_checks]compile-flags: -C overflow-checks=on -O\n \n // build-pass\n-// ignore-pass (emit codegen-time warnings and verify that they are indeed warnings and not errors)\n+// ignore-pass (test emits codegen-time warnings and verifies that they are not errors)\n \n #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n "}, {"sha": "f56131025627be0b1844d8c323702f4b91f62ee8", "filename": "src/test/ui/consts/miri_unleashed/inline_asm.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dbf8b6bf116c7bece2987ff4bd2792f008a6ee77/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbf8b6bf116c7bece2987ff4bd2792f008a6ee77/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.rs?ref=dbf8b6bf116c7bece2987ff4bd2792f008a6ee77", "patch": "@@ -0,0 +1,14 @@\n+// compile-flags: -Zunleash-the-miri-inside-of-you\n+// only-x86_64\n+#![feature(llvm_asm)]\n+#![allow(const_err)]\n+\n+fn main() {}\n+\n+// Make sure we catch executing inline assembly.\n+static TEST_BAD: () = {\n+    unsafe { llvm_asm!(\"xor %eax, %eax\" ::: \"eax\"); }\n+    //~^ ERROR could not evaluate static initializer\n+    //~| NOTE in this expansion of llvm_asm!\n+    //~| NOTE inline assembly is not supported\n+};"}, {"sha": "3cbdd326c82338af7a76e12ab64bcfdec7a876e3", "filename": "src/test/ui/consts/miri_unleashed/inline_asm.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dbf8b6bf116c7bece2987ff4bd2792f008a6ee77/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbf8b6bf116c7bece2987ff4bd2792f008a6ee77/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.stderr?ref=dbf8b6bf116c7bece2987ff4bd2792f008a6ee77", "patch": "@@ -0,0 +1,11 @@\n+error[E0080]: could not evaluate static initializer\n+  --> $DIR/inline_asm.rs:10:14\n+   |\n+LL |     unsafe { llvm_asm!(\"xor %eax, %eax\" ::: \"eax\"); }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ inline assembly is not supported\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "b477c97c5457b2cb156bc209f3b1694ef73f2e43", "filename": "src/test/ui/lint/dead-code/lint-dead-code-5.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dbf8b6bf116c7bece2987ff4bd2792f008a6ee77/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbf8b6bf116c7bece2987ff4bd2792f008a6ee77/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-5.rs?ref=dbf8b6bf116c7bece2987ff4bd2792f008a6ee77", "patch": "@@ -13,6 +13,23 @@ enum Enum2 {\n     Variant5 { _x: isize }, //~ ERROR: variant is never constructed: `Variant5`\n     Variant6(isize), //~ ERROR: variant is never constructed: `Variant6`\n     _Variant7,\n+    Variant8 { _field: bool },\n+    Variant9,\n+    Variant10(usize)\n+}\n+\n+impl Enum2 {\n+    fn new_variant8() -> Enum2 {\n+        Self::Variant8 { _field: true }\n+    }\n+\n+    fn new_variant9() -> Enum2 {\n+        Self::Variant9\n+    }\n+\n+    fn new_variant10() -> Enum2 {\n+        Self::Variant10(10)\n+    }\n }\n \n enum Enum3 { //~ ERROR: enum is never used\n@@ -27,4 +44,7 @@ fn main() {\n         Enum1::Variant2 => ()\n     }\n     let x = Enum2::Variant3(true);\n+    let _ = Enum2::new_variant8();\n+    let _ = Enum2::new_variant9();\n+    let _ = Enum2::new_variant10();\n }"}, {"sha": "519add826273fa73e06bc86c71eb6c61805ae95c", "filename": "src/test/ui/lint/dead-code/lint-dead-code-5.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbf8b6bf116c7bece2987ff4bd2792f008a6ee77/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbf8b6bf116c7bece2987ff4bd2792f008a6ee77/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-5.stderr?ref=dbf8b6bf116c7bece2987ff4bd2792f008a6ee77", "patch": "@@ -23,7 +23,7 @@ LL |     Variant6(isize),\n    |     ^^^^^^^^^^^^^^^\n \n error: enum is never used: `Enum3`\n-  --> $DIR/lint-dead-code-5.rs:18:6\n+  --> $DIR/lint-dead-code-5.rs:35:6\n    |\n LL | enum Enum3 {\n    |      ^^^^^"}, {"sha": "47e934baf25f7f935257b37811ebf11cb804f40d", "filename": "src/test/ui/lint/lint-exceeding-bitshifts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbf8b6bf116c7bece2987ff4bd2792f008a6ee77/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbf8b6bf116c7bece2987ff4bd2792f008a6ee77/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.rs?ref=dbf8b6bf116c7bece2987ff4bd2792f008a6ee77", "patch": "@@ -2,8 +2,8 @@\n //[noopt]compile-flags: -C opt-level=0\n //[opt]compile-flags: -O\n //[opt_with_overflow_checks]compile-flags: -C overflow-checks=on -O\n-\n // build-pass\n+// ignore-pass (test emits codegen-time warnings and verifies that they are not errors)\n \n #![crate_type=\"lib\"]\n #![warn(arithmetic_overflow, const_err)]"}]}