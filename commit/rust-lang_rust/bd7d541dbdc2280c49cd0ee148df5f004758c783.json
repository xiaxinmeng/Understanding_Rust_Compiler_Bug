{"sha": "bd7d541dbdc2280c49cd0ee148df5f004758c783", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkN2Q1NDFkYmRjMjI4MGM0OWNkMGVlMTQ4ZGY1ZjAwNDc1OGM3ODM=", "commit": {"author": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2017-11-24T07:36:49Z"}, "committer": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2017-11-24T08:51:00Z"}, "message": "Fix doc tests", "tree": {"sha": "27352d922f371df610516f3fbb4168da67b55e2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27352d922f371df610516f3fbb4168da67b55e2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd7d541dbdc2280c49cd0ee148df5f004758c783", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd7d541dbdc2280c49cd0ee148df5f004758c783", "html_url": "https://github.com/rust-lang/rust/commit/bd7d541dbdc2280c49cd0ee148df5f004758c783", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd7d541dbdc2280c49cd0ee148df5f004758c783/comments", "author": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31845201e8dc3af5c7c76506aa83263ffce7c400", "url": "https://api.github.com/repos/rust-lang/rust/commits/31845201e8dc3af5c7c76506aa83263ffce7c400", "html_url": "https://github.com/rust-lang/rust/commit/31845201e8dc3af5c7c76506aa83263ffce7c400"}], "stats": {"total": 31, "additions": 22, "deletions": 9}, "files": [{"sha": "7c3d9fd80243457cf15e622c10096256ca607977", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/bd7d541dbdc2280c49cd0ee148df5f004758c783/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd7d541dbdc2280c49cd0ee148df5f004758c783/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=bd7d541dbdc2280c49cd0ee148df5f004758c783", "patch": "@@ -79,9 +79,12 @@ mod prim_bool { }\n /// write\n ///\n /// ```\n+/// # #![feature(never_type)]\n+/// # fn foo() -> u32 {\n /// let x: ! = {\n-///     return 123;\n+///     return 123\n /// };\n+/// # }\n /// ```\n ///\n /// Although the `let` is pointless here, it illustrates the meaning of `!`. Since `x` is never\n@@ -92,10 +95,13 @@ mod prim_bool { }\n /// A more realistic usage of `!` is in this code:\n ///\n /// ```\n+/// # fn get_a_number() -> Option<u32> { None }\n+/// # loop {\n /// let num: u32 = match get_a_number() {\n ///     Some(num) => num,\n ///     None => break,\n-/// }\n+/// };\n+/// # }\n /// ```\n ///\n /// Both match arms must produce values of type `u32`, but since `break` never produces a value at\n@@ -110,18 +116,20 @@ mod prim_bool { }\n /// trait:\n ///\n /// ```\n-/// trait FromStr {\n-///     type Error;\n-///     fn from_str(s: &str) -> Result<Self, Self::Error>;\n+/// trait FromStr: Sized {\n+///     type Err;\n+///     fn from_str(s: &str) -> Result<Self, Self::Err>;\n /// }\n /// ```\n ///\n-/// When implementing this trait for `String` we need to pick a type for `Error`. And since\n+/// When implementing this trait for `String` we need to pick a type for `Err`. And since\n /// converting a string into a string will never result in an error, the appropriate type is `!`.\n-/// If we have to call `String::from_str` for some reason, the result will be a\n-/// `Result<String, !>`, which we can unpack like this:\n+/// (Currently the type actually used is an enum with no variants, though this is only because `!`\n+/// was added to Rust at a later date and it may change in the future). With an `Err` type of `!`,\n+/// if we have to call `String::from_str` for some reason the result will be a `Result<String, !>`\n+/// which we can unpack like this:\n ///\n-/// ```\n+/// ```ignore (string-from-str-error-type-is-not-never-yet)\n /// let Ok(s) = String::from_str(\"hello\");\n /// ```\n ///\n@@ -138,6 +146,11 @@ mod prim_bool { }\n /// for example:\n ///\n /// ```\n+/// # #![feature(never_type)]\n+/// # use std::fmt;\n+/// # trait Debug {\n+/// # fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result;\n+/// # }\n /// impl Debug for ! {\n ///     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n ///         *self"}]}