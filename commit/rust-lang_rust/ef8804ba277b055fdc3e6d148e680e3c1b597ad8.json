{"sha": "ef8804ba277b055fdc3e6d148e680e3c1b597ad8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmODgwNGJhMjc3YjA1NWZkYzNlNmQxNDhlNjgwZTNjMWI1OTdhZDg=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2017-07-13T15:17:08Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2017-07-13T15:17:08Z"}, "message": "Add precondition to `Layout` that the `align` fit in a u32.\n\nThis precondition takes the form of a behavorial change in\n`Layout::from_size_align` (so it returns `None` if the `align` is too\nlarge) and a new requirement for safe usage of\n`Layout::from_size_align_unchecked`.\n\nFix #30170.", "tree": {"sha": "ecc366eb533e6683469a237bc2270de11e5cc8fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecc366eb533e6683469a237bc2270de11e5cc8fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef8804ba277b055fdc3e6d148e680e3c1b597ad8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef8804ba277b055fdc3e6d148e680e3c1b597ad8", "html_url": "https://github.com/rust-lang/rust/commit/ef8804ba277b055fdc3e6d148e680e3c1b597ad8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef8804ba277b055fdc3e6d148e680e3c1b597ad8/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2c0707872082c890f332178f59fd02eea5b98f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2c0707872082c890f332178f59fd02eea5b98f3", "html_url": "https://github.com/rust-lang/rust/commit/b2c0707872082c890f332178f59fd02eea5b98f3"}], "stats": {"total": 22, "additions": 15, "deletions": 7}, "files": [{"sha": "61d48f1588d0e2afb9d5bc61849a6342ef79828f", "filename": "src/liballoc/allocator.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ef8804ba277b055fdc3e6d148e680e3c1b597ad8/src%2Fliballoc%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef8804ba277b055fdc3e6d148e680e3c1b597ad8/src%2Fliballoc%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fallocator.rs?ref=ef8804ba277b055fdc3e6d148e680e3c1b597ad8", "patch": "@@ -65,11 +65,13 @@ pub struct Layout {\n \n impl Layout {\n     /// Constructs a `Layout` from a given `size` and `align`,\n-    /// or returns `None` if either of the following conditions\n+    /// or returns `None` if any of the following conditions\n     /// are not met:\n     ///\n     /// * `align` must be a power of two,\n     ///\n+    /// * `align` must not exceed 2^31 (i.e. `1 << 31`),\n+    ///\n     /// * `size`, when rounded up to the nearest multiple of `align`,\n     ///    must not overflow (i.e. the rounded value must be less than\n     ///    `usize::MAX`).\n@@ -79,6 +81,10 @@ impl Layout {\n             return None;\n         }\n \n+        if align > (1 << 31) {\n+            return None;\n+        }\n+\n         // (power-of-two implies align != 0.)\n \n         // Rounded up size is:\n@@ -106,8 +112,10 @@ impl Layout {\n     ///\n     /// # Unsafety\n     ///\n-    /// This function is unsafe as it does not verify that `align` is a power of\n-    /// two nor that `size` aligned to `align` fits within the address space.\n+    /// This function is unsafe as it does not verify that `align` is\n+    /// a power-of-two that is also less than or equal to 2^31, nor\n+    /// that `size` aligned to `align` fits within the address space\n+    /// (i.e. the `Layout::from_size_align` preconditions).\n     #[inline]\n     pub unsafe fn from_size_align_unchecked(size: usize, align: usize) -> Layout {\n         Layout { size: size, align: align }\n@@ -217,10 +225,10 @@ impl Layout {\n             Some(alloc_size) => alloc_size,\n         };\n \n-        // We can assume that `self.align` is a power-of-two.\n-        // Furthermore, `alloc_size` has alreayd been rounded up\n-        // to a multiple of `self.align`; therefore, the call\n-        // to `Layout::from_size_align` below should never panic.\n+        // We can assume that `self.align` is a power-of-two that does\n+        // not exceed 2^31. Furthermore, `alloc_size` has already been\n+        // rounded up to a multiple of `self.align`; therefore, the\n+        // call to `Layout::from_size_align` below should never panic.\n         Some((Layout::from_size_align(alloc_size, self.align).unwrap(), padded_size))\n     }\n "}]}