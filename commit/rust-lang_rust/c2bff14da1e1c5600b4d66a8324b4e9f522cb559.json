{"sha": "c2bff14da1e1c5600b4d66a8324b4e9f522cb559", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyYmZmMTRkYTFlMWM1NjAwYjRkNjZhODMyNGI0ZTlmNTIyY2I1NTk=", "commit": {"author": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2015-04-05T16:52:14Z"}, "committer": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2015-04-05T16:52:57Z"}, "message": "Re-added Clone impls to all str iterators", "tree": {"sha": "beceb6871428358a9550e07a443b836d91a2d6f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/beceb6871428358a9550e07a443b836d91a2d6f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2bff14da1e1c5600b4d66a8324b4e9f522cb559", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2bff14da1e1c5600b4d66a8324b4e9f522cb559", "html_url": "https://github.com/rust-lang/rust/commit/c2bff14da1e1c5600b4d66a8324b4e9f522cb559", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2bff14da1e1c5600b4d66a8324b4e9f522cb559/comments", "author": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b4cddcbfd61d05d42995cd38387e2faabe6156a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b4cddcbfd61d05d42995cd38387e2faabe6156a", "html_url": "https://github.com/rust-lang/rust/commit/1b4cddcbfd61d05d42995cd38387e2faabe6156a"}], "stats": {"total": 91, "additions": 82, "deletions": 9}, "files": [{"sha": "d31c1e274664d9bff75bde46308b6c70f02cdc5e", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 82, "deletions": 9, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/c2bff14da1e1c5600b4d66a8324b4e9f522cb559/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2bff14da1e1c5600b4d66a8324b4e9f522cb559/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=c2bff14da1e1c5600b4d66a8324b4e9f522cb559", "patch": "@@ -413,6 +413,21 @@ impl<'a> ExactSizeIterator for Bytes<'a> {\n     }\n }\n \n+/// This macro generates a Clone impl for string pattern API\n+/// wrapper types of the form X<'a, P>\n+macro_rules! derive_pattern_clone {\n+    (clone $t:ident with |$s:ident| $e:expr) => {\n+        impl<'a, P: Pattern<'a>> Clone for $t<'a, P>\n+            where P::Searcher: Clone\n+        {\n+            fn clone(&self) -> Self {\n+                let $s = self;\n+                $e\n+            }\n+        }\n+    }\n+}\n+\n /// This macro generates two public iterator structs\n /// wrapping an private internal one that makes use of the `Pattern` API.\n ///\n@@ -488,6 +503,15 @@ macro_rules! generate_pattern_iterators {\n             }\n         }\n \n+        $(#[$common_stability_attribute])*\n+        impl<'a, P: Pattern<'a>> Clone for $forward_iterator<'a, P>\n+            where P::Searcher: Clone\n+        {\n+            fn clone(&self) -> Self {\n+                $forward_iterator(self.0.clone())\n+            }\n+        }\n+\n         $(#[$reverse_iterator_attribute])*\n         $(#[$common_stability_attribute])*\n         pub struct $reverse_iterator<'a, P: Pattern<'a>>($internal_iterator<'a, P>);\n@@ -504,6 +528,15 @@ macro_rules! generate_pattern_iterators {\n             }\n         }\n \n+        $(#[$common_stability_attribute])*\n+        impl<'a, P: Pattern<'a>> Clone for $reverse_iterator<'a, P>\n+            where P::Searcher: Clone\n+        {\n+            fn clone(&self) -> Self {\n+                $reverse_iterator(self.0.clone())\n+            }\n+        }\n+\n         generate_pattern_iterators!($($t)* with $(#[$common_stability_attribute])*,\n                                                 $forward_iterator,\n                                                 $reverse_iterator, $iterty);\n@@ -540,6 +573,10 @@ macro_rules! generate_pattern_iterators {\n     } => {}\n }\n \n+derive_pattern_clone!{\n+    clone SplitInternal\n+    with |s| SplitInternal { matcher: s.matcher.clone(), ..*s }\n+}\n struct SplitInternal<'a, P: Pattern<'a>> {\n     start: usize,\n     end: usize,\n@@ -634,6 +671,10 @@ generate_pattern_iterators! {\n     delegate double ended;\n }\n \n+derive_pattern_clone!{\n+    clone SplitNInternal\n+    with |s| SplitNInternal { iter: s.iter.clone(), ..*s }\n+}\n struct SplitNInternal<'a, P: Pattern<'a>> {\n     iter: SplitInternal<'a, P>,\n     /// The number of splits remaining\n@@ -676,6 +717,10 @@ generate_pattern_iterators! {\n     delegate single ended;\n }\n \n+derive_pattern_clone!{\n+    clone MatchIndicesInternal\n+    with |s| MatchIndicesInternal(s.0.clone())\n+}\n struct MatchIndicesInternal<'a, P: Pattern<'a>>(P::Searcher);\n \n impl<'a, P: Pattern<'a>> MatchIndicesInternal<'a, P> {\n@@ -707,6 +752,10 @@ generate_pattern_iterators! {\n     delegate double ended;\n }\n \n+derive_pattern_clone!{\n+    clone MatchesInternal\n+    with |s| MatchesInternal(s.0.clone())\n+}\n struct MatchesInternal<'a, P: Pattern<'a>>(P::Searcher);\n \n impl<'a, P: Pattern<'a>> MatchesInternal<'a, P> {\n@@ -745,6 +794,7 @@ generate_pattern_iterators! {\n \n /// Return type of `str::lines()`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[derive(Clone)]\n pub struct Lines<'a>(SplitTerminator<'a, char>);\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -772,7 +822,37 @@ impl<'a> DoubleEndedIterator for Lines<'a> {\n \n /// Return type of `str::lines_any()`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub struct LinesAny<'a>(Map<Lines<'a>, fn(&str) -> &str>);\n+#[derive(Clone)]\n+pub struct LinesAny<'a>(Map<Lines<'a>, LinesAnyMap>);\n+\n+/// A nameable, clonable fn type\n+#[derive(Clone)]\n+struct LinesAnyMap;\n+\n+impl<'a> Fn<(&'a str,)> for LinesAnyMap {\n+    #[inline]\n+    extern \"rust-call\" fn call(&self, (line,): (&'a str,)) -> &'a str {\n+        let l = line.len();\n+        if l > 0 && line.as_bytes()[l - 1] == b'\\r' { &line[0 .. l - 1] }\n+        else { line }\n+    }\n+}\n+\n+impl<'a> FnMut<(&'a str,)> for LinesAnyMap {\n+    #[inline]\n+    extern \"rust-call\" fn call_mut(&mut self, (line,): (&'a str,)) -> &'a str {\n+        Fn::call(&*self, (line,))\n+    }\n+}\n+\n+impl<'a> FnOnce<(&'a str,)> for LinesAnyMap {\n+    type Output = &'a str;\n+\n+    #[inline]\n+    extern \"rust-call\" fn call_once(self, (line,): (&'a str,)) -> &'a str {\n+        Fn::call(&self, (line,))\n+    }\n+}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> Iterator for LinesAny<'a> {\n@@ -1584,14 +1664,7 @@ impl StrExt for str {\n \n     #[inline]\n     fn lines_any(&self) -> LinesAny {\n-        fn f(line: &str) -> &str {\n-            let l = line.len();\n-            if l > 0 && line.as_bytes()[l - 1] == b'\\r' { &line[0 .. l - 1] }\n-            else { line }\n-        }\n-\n-        let f: fn(&str) -> &str = f; // coerce to fn pointer\n-        LinesAny(self.lines().map(f))\n+        LinesAny(self.lines().map(LinesAnyMap))\n     }\n \n     #[inline]"}]}