{"sha": "3c9e9d35ac0f6469e0eeffc5c497f4b3ed6f1f8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjOWU5ZDM1YWMwZjY0NjllMGVlZmZjNWM0OTdmNGIzZWQ2ZjFmOGE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-01-16T02:38:34Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-01T14:44:48Z"}, "message": "libsyntax: Remove `ident_to_str` from the parser, which was returning\n`@str` values", "tree": {"sha": "22e6725b418795c2abc8cc478d9c745b3c46f2ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22e6725b418795c2abc8cc478d9c745b3c46f2ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c9e9d35ac0f6469e0eeffc5c497f4b3ed6f1f8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c9e9d35ac0f6469e0eeffc5c497f4b3ed6f1f8a", "html_url": "https://github.com/rust-lang/rust/commit/3c9e9d35ac0f6469e0eeffc5c497f4b3ed6f1f8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c9e9d35ac0f6469e0eeffc5c497f4b3ed6f1f8a/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbf9f5f5dfd5e3ec36899adf89c55a20380da63e", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbf9f5f5dfd5e3ec36899adf89c55a20380da63e", "html_url": "https://github.com/rust-lang/rust/commit/cbf9f5f5dfd5e3ec36899adf89c55a20380da63e"}], "stats": {"total": 18, "additions": 8, "deletions": 10}, "files": [{"sha": "04c73ce71d0207777a34d044057c501a2a6b885d", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c9e9d35ac0f6469e0eeffc5c497f4b3ed6f1f8a/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9e9d35ac0f6469e0eeffc5c497f4b3ed6f1f8a/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=3c9e9d35ac0f6469e0eeffc5c497f4b3ed6f1f8a", "patch": "@@ -22,7 +22,6 @@ use codemap::{Span, respan};\n use parse::parser::Parser;\n use parse::token;\n \n-use std::str;\n use std::to_bytes;\n \n /// The specific types of unsupported syntax\n@@ -178,7 +177,8 @@ impl ParserObsoleteMethods for Parser {\n     fn is_obsolete_ident(&mut self, ident: &str) -> bool {\n         match self.token {\n             token::IDENT(sid, _) => {\n-                str::eq_slice(self.id_to_str(sid), ident)\n+                let interned_string = token::get_ident(sid.name);\n+                interned_string.equiv(&ident)\n             }\n             _ => false\n         }"}, {"sha": "cdf5d4403809dd1ae3e4ebaf88a3e9e7227f6dac", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3c9e9d35ac0f6469e0eeffc5c497f4b3ed6f1f8a/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9e9d35ac0f6469e0eeffc5c497f4b3ed6f1f8a/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=3c9e9d35ac0f6469e0eeffc5c497f4b3ed6f1f8a", "patch": "@@ -531,10 +531,11 @@ impl Parser {\n     // otherwise, eat it.\n     pub fn expect_keyword(&mut self, kw: keywords::Keyword) {\n         if !self.eat_keyword(kw) {\n-            let id_str = self.id_to_str(kw.to_ident()).to_str();\n+            let id_ident = kw.to_ident();\n+            let id_interned_str = token::get_ident(id_ident.name);\n             let token_str = self.this_token_to_str();\n             self.fatal(format!(\"expected `{}`, found `{}`\",\n-                               id_str,\n+                               id_interned_str.get(),\n                                token_str))\n         }\n     }\n@@ -802,10 +803,6 @@ impl Parser {\n         self.sess.span_diagnostic.handler().abort_if_errors();\n     }\n \n-    pub fn id_to_str(&mut self, id: Ident) -> @str {\n-        get_ident_interner().get(id.name)\n-    }\n-\n     pub fn id_to_interned_str(&mut self, id: Ident) -> InternedString {\n         get_ident(id.name)\n     }\n@@ -3440,7 +3437,9 @@ impl Parser {\n         loop {\n             match self.token {\n                 token::LIFETIME(lifetime) => {\n-                    if \"static\" == self.id_to_str(lifetime) {\n+                    let lifetime_interned_string =\n+                        token::get_ident(lifetime.name);\n+                    if lifetime_interned_string.equiv(&(\"static\")) {\n                         result.push(RegionTyParamBound);\n                     } else {\n                         self.span_err(self.span,\n@@ -4871,7 +4870,6 @@ impl Parser {\n \n         let first_ident = self.parse_ident();\n         let mut path = ~[first_ident];\n-        debug!(\"parsed view path: {}\", self.id_to_str(first_ident));\n         match self.token {\n           token::EQ => {\n             // x = foo::bar"}]}