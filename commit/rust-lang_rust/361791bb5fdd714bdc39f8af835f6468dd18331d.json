{"sha": "361791bb5fdd714bdc39f8af835f6468dd18331d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2MTc5MWJiNWZkZDcxNGJkYzM5ZjhhZjgzNWY2NDY4ZGQxODMzMWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-18T00:05:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-18T00:05:38Z"}, "message": "Auto merge of #65456 - estebank:trait-bound-borrow, r=matthewjasper\n\nSuggest borrowing when it would satisfy an unmet trait bound\n\nWhen there are multiple implementors for the same trait that is present\nin an unmet binding, modify the E0277 error to refer to the parent\nobligation and verify whether borrowing the argument being passed in\nwould satisfy the unmet bound. If it would, suggest it.\n\nFix #56368.", "tree": {"sha": "6eeebf53b94743a431cb0b901f6c14c7a7093948", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6eeebf53b94743a431cb0b901f6c14c7a7093948"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/361791bb5fdd714bdc39f8af835f6468dd18331d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/361791bb5fdd714bdc39f8af835f6468dd18331d", "html_url": "https://github.com/rust-lang/rust/commit/361791bb5fdd714bdc39f8af835f6468dd18331d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/361791bb5fdd714bdc39f8af835f6468dd18331d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f0c640e0ee5a9ad365e78e3c62239b3d65b7045", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f0c640e0ee5a9ad365e78e3c62239b3d65b7045", "html_url": "https://github.com/rust-lang/rust/commit/0f0c640e0ee5a9ad365e78e3c62239b3d65b7045"}, {"sha": "2fe8371268b36193fa4dc8461341db90f4ec96b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fe8371268b36193fa4dc8461341db90f4ec96b9", "html_url": "https://github.com/rust-lang/rust/commit/2fe8371268b36193fa4dc8461341db90f4ec96b9"}], "stats": {"total": 154, "additions": 125, "deletions": 29}, "files": [{"sha": "35790324a2f62ff955857f0334dce43f21ae6dd3", "filename": "src/libcore/ops/function.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/361791bb5fdd714bdc39f8af835f6468dd18331d/src%2Flibcore%2Fops%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/361791bb5fdd714bdc39f8af835f6468dd18331d/src%2Flibcore%2Fops%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Ffunction.rs?ref=361791bb5fdd714bdc39f8af835f6468dd18331d", "patch": "@@ -137,10 +137,6 @@ pub trait Fn<Args> : FnMut<Args> {\n #[rustc_paren_sugar]\n #[rustc_on_unimplemented(\n     on(Args=\"()\", note=\"wrap the `{Self}` in a closure with no arguments: `|| {{ /* code */ }}\"),\n-    on(\n-        all(Args=\"(char,)\", _Self=\"std::string::String\"),\n-        note=\"borrowing the `{Self}` might fix the problem\"\n-    ),\n     message=\"expected a `{FnMut}<{Args}>` closure, found `{Self}`\",\n     label=\"expected an `FnMut<{Args}>` closure, found `{Self}`\",\n )]"}, {"sha": "ea29cc0d93f538a51c8f38375e24fde6a6bb4783", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 90, "deletions": 8, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/361791bb5fdd714bdc39f8af835f6468dd18331d/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/361791bb5fdd714bdc39f8af835f6468dd18331d/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=361791bb5fdd714bdc39f8af835f6468dd18331d", "patch": "@@ -33,7 +33,7 @@ use crate::ty::subst::Subst;\n use crate::ty::SubtypePredicate;\n use crate::util::nodemap::{FxHashMap, FxHashSet};\n \n-use errors::{Applicability, DiagnosticBuilder, pluralize};\n+use errors::{Applicability, DiagnosticBuilder, pluralize, Style};\n use std::fmt;\n use syntax::ast;\n use syntax::symbol::{sym, kw};\n@@ -713,20 +713,24 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 }\n                 match obligation.predicate {\n                     ty::Predicate::Trait(ref trait_predicate) => {\n-                        let trait_predicate =\n-                            self.resolve_vars_if_possible(trait_predicate);\n+                        let trait_predicate = self.resolve_vars_if_possible(trait_predicate);\n \n                         if self.tcx.sess.has_errors() && trait_predicate.references_error() {\n                             return;\n                         }\n                         let trait_ref = trait_predicate.to_poly_trait_ref();\n-                        let (post_message, pre_message) =\n-                            self.get_parent_trait_ref(&obligation.cause.code)\n-                                .map(|t| (format!(\" in `{}`\", t), format!(\"within `{}`, \", t)))\n+                        let (\n+                            post_message,\n+                            pre_message,\n+                        ) = self.get_parent_trait_ref(&obligation.cause.code)\n+                            .map(|t| (format!(\" in `{}`\", t), format!(\"within `{}`, \", t)))\n                             .unwrap_or_default();\n \n-                        let OnUnimplementedNote { message, label, note }\n-                            = self.on_unimplemented_note(trait_ref, obligation);\n+                        let OnUnimplementedNote {\n+                            message,\n+                            label,\n+                            note,\n+                        } = self.on_unimplemented_note(trait_ref, obligation);\n                         let have_alt_message = message.is_some() || label.is_some();\n                         let is_try = self.tcx.sess.source_map().span_to_snippet(span)\n                             .map(|s| &s == \"?\")\n@@ -767,6 +771,17 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                                 )\n                             };\n \n+                        if self.suggest_add_reference_to_arg(\n+                            &obligation,\n+                            &mut err,\n+                            &trait_ref,\n+                            points_at_arg,\n+                            have_alt_message,\n+                        ) {\n+                            self.note_obligation_cause(&mut err, obligation);\n+                            err.emit();\n+                            return;\n+                        }\n                         if let Some(ref s) = label {\n                             // If it has a custom `#[rustc_on_unimplemented]`\n                             // error message, let's display it as the label!\n@@ -1298,6 +1313,73 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         }\n     }\n \n+    fn suggest_add_reference_to_arg(\n+        &self,\n+        obligation: &PredicateObligation<'tcx>,\n+        err: &mut DiagnosticBuilder<'tcx>,\n+        trait_ref: &ty::Binder<ty::TraitRef<'tcx>>,\n+        points_at_arg: bool,\n+        has_custom_message: bool,\n+    ) -> bool {\n+        if !points_at_arg {\n+            return false;\n+        }\n+\n+        let span = obligation.cause.span;\n+        let param_env = obligation.param_env;\n+        let trait_ref = trait_ref.skip_binder();\n+\n+        if let ObligationCauseCode::ImplDerivedObligation(obligation) = &obligation.cause.code {\n+            // Try to apply the original trait binding obligation by borrowing.\n+            let self_ty = trait_ref.self_ty();\n+            let found = self_ty.to_string();\n+            let new_self_ty = self.tcx.mk_imm_ref(self.tcx.lifetimes.re_static, self_ty);\n+            let substs = self.tcx.mk_substs_trait(new_self_ty, &[]);\n+            let new_trait_ref = ty::TraitRef::new(obligation.parent_trait_ref.def_id(), substs);\n+            let new_obligation = Obligation::new(\n+                ObligationCause::dummy(),\n+                param_env,\n+                new_trait_ref.to_predicate(),\n+            );\n+            if self.predicate_must_hold_modulo_regions(&new_obligation) {\n+                if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n+                    // We have a very specific type of error, where just borrowing this argument\n+                    // might solve the problem. In cases like this, the important part is the\n+                    // original type obligation, not the last one that failed, which is arbitrary.\n+                    // Because of this, we modify the error to refer to the original obligation and\n+                    // return early in the caller.\n+                    let msg = format!(\n+                        \"the trait bound `{}: {}` is not satisfied\",\n+                        found,\n+                        obligation.parent_trait_ref.skip_binder(),\n+                    );\n+                    if has_custom_message {\n+                        err.note(&msg);\n+                    } else {\n+                        err.message = vec![(msg, Style::NoStyle)];\n+                    }\n+                    if snippet.starts_with('&') {\n+                        // This is already a literal borrow and the obligation is failing\n+                        // somewhere else in the obligation chain. Do not suggest non-sense.\n+                        return false;\n+                    }\n+                    err.span_label(span, &format!(\n+                        \"expected an implementor of trait `{}`\",\n+                        obligation.parent_trait_ref.skip_binder(),\n+                    ));\n+                    err.span_suggestion(\n+                        span,\n+                        \"consider borrowing here\",\n+                        format!(\"&{}\", snippet),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                    return true;\n+                }\n+            }\n+        }\n+        false\n+    }\n+\n     /// Whenever references are used by mistake, like `for (i, e) in &vec.iter().enumerate()`,\n     /// suggest removing these references until we reach a type that implements the trait.\n     fn suggest_remove_reference("}, {"sha": "fb34d844fdafbcf3c172b732064b384b63904af0", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/361791bb5fdd714bdc39f8af835f6468dd18331d/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/361791bb5fdd714bdc39f8af835f6468dd18331d/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=361791bb5fdd714bdc39f8af835f6468dd18331d", "patch": "@@ -38,6 +38,7 @@ pub mod registry;\n mod styled_buffer;\n mod lock;\n pub mod json;\n+pub use snippet::Style;\n \n pub type PResult<'a, T> = Result<T, DiagnosticBuilder<'a>>;\n "}, {"sha": "06b3157a77a84c4a463e15a478cbed71d7331fbe", "filename": "src/test/ui/derives/deriving-copyclone.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/361791bb5fdd714bdc39f8af835f6468dd18331d/src%2Ftest%2Fui%2Fderives%2Fderiving-copyclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/361791bb5fdd714bdc39f8af835f6468dd18331d/src%2Ftest%2Fui%2Fderives%2Fderiving-copyclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-copyclone.rs?ref=361791bb5fdd714bdc39f8af835f6468dd18331d", "patch": "@@ -28,10 +28,10 @@ fn main() {\n     is_clone(B { a: 1, b: 2 });\n \n     // B<C> cannot be copied or cloned\n-    is_copy(B { a: 1, b: C }); //~ERROR Copy\n-    is_clone(B { a: 1, b: C }); //~ERROR Clone\n+    is_copy(B { a: 1, b: C }); //~ ERROR Copy\n+    is_clone(B { a: 1, b: C }); //~ ERROR Clone\n \n     // B<D> can be cloned but not copied\n-    is_copy(B { a: 1, b: D }); //~ERROR Copy\n+    is_copy(B { a: 1, b: D }); //~ ERROR Copy\n     is_clone(B { a: 1, b: D });\n }"}, {"sha": "e23d48ca6304b012b5498b350b40ab76af64e5f0", "filename": "src/test/ui/derives/deriving-copyclone.stderr", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/361791bb5fdd714bdc39f8af835f6468dd18331d/src%2Ftest%2Fui%2Fderives%2Fderiving-copyclone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/361791bb5fdd714bdc39f8af835f6468dd18331d/src%2Ftest%2Fui%2Fderives%2Fderiving-copyclone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-copyclone.stderr?ref=361791bb5fdd714bdc39f8af835f6468dd18331d", "patch": "@@ -5,7 +5,10 @@ LL | fn is_copy<T: Copy>(_: T) {}\n    |    -------    ---- required by this bound in `is_copy`\n ...\n LL |     is_copy(B { a: 1, b: C });\n-   |             ^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `C`\n+   |             ^^^^^^^^^^^^^^^^\n+   |             |\n+   |             expected an implementor of trait `std::marker::Copy`\n+   |             help: consider borrowing here: `&B { a: 1, b: C }`\n    |\n    = note: required because of the requirements on the impl of `std::marker::Copy` for `B<C>`\n \n@@ -16,7 +19,10 @@ LL | fn is_clone<T: Clone>(_: T) {}\n    |    --------    ----- required by this bound in `is_clone`\n ...\n LL |     is_clone(B { a: 1, b: C });\n-   |              ^^^^^^^^^^^^^^^^ the trait `std::clone::Clone` is not implemented for `C`\n+   |              ^^^^^^^^^^^^^^^^\n+   |              |\n+   |              expected an implementor of trait `std::clone::Clone`\n+   |              help: consider borrowing here: `&B { a: 1, b: C }`\n    |\n    = note: required because of the requirements on the impl of `std::clone::Clone` for `B<C>`\n \n@@ -27,7 +33,10 @@ LL | fn is_copy<T: Copy>(_: T) {}\n    |    -------    ---- required by this bound in `is_copy`\n ...\n LL |     is_copy(B { a: 1, b: D });\n-   |             ^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `D`\n+   |             ^^^^^^^^^^^^^^^^\n+   |             |\n+   |             expected an implementor of trait `std::marker::Copy`\n+   |             help: consider borrowing here: `&B { a: 1, b: D }`\n    |\n    = note: required because of the requirements on the impl of `std::marker::Copy` for `B<D>`\n "}, {"sha": "d5fcc68a759cb9f971352ffc0cdfb0c388010e41", "filename": "src/test/ui/kindck/kindck-impl-type-params-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/361791bb5fdd714bdc39f8af835f6468dd18331d/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/361791bb5fdd714bdc39f8af835f6468dd18331d/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params-2.rs?ref=361791bb5fdd714bdc39f8af835f6468dd18331d", "patch": "@@ -11,5 +11,5 @@ fn take_param<T:Foo>(foo: &T) { }\n fn main() {\n     let x: Box<_> = box 3;\n     take_param(&x);\n-    //~^ ERROR `std::boxed::Box<{integer}>: std::marker::Copy` is not satisfied\n+    //~^ ERROR the trait bound `std::boxed::Box<{integer}>: Foo` is not satisfied\n }"}, {"sha": "318b7b0f10a0af4cbcfb67749817bfadab8b437a", "filename": "src/test/ui/kindck/kindck-impl-type-params-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/361791bb5fdd714bdc39f8af835f6468dd18331d/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/361791bb5fdd714bdc39f8af835f6468dd18331d/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params-2.stderr?ref=361791bb5fdd714bdc39f8af835f6468dd18331d", "patch": "@@ -1,4 +1,4 @@\n-error[E0277]: the trait bound `std::boxed::Box<{integer}>: std::marker::Copy` is not satisfied\n+error[E0277]: the trait bound `std::boxed::Box<{integer}>: Foo` is not satisfied\n   --> $DIR/kindck-impl-type-params-2.rs:13:16\n    |\n LL | fn take_param<T:Foo>(foo: &T) { }"}, {"sha": "da1a7a7520e07436857bff2ff28b6afa69e81695", "filename": "src/test/ui/kindck/kindck-inherited-copy-bound.curr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/361791bb5fdd714bdc39f8af835f6468dd18331d/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/361791bb5fdd714bdc39f8af835f6468dd18331d/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.curr.stderr?ref=361791bb5fdd714bdc39f8af835f6468dd18331d", "patch": "@@ -1,4 +1,4 @@\n-error[E0277]: the trait bound `std::boxed::Box<{integer}>: std::marker::Copy` is not satisfied\n+error[E0277]: the trait bound `std::boxed::Box<{integer}>: Foo` is not satisfied\n   --> $DIR/kindck-inherited-copy-bound.rs:21:16\n    |\n LL | fn take_param<T:Foo>(foo: &T) { }"}, {"sha": "f272f829ba60004d49c54de9ac8d5139ef742fde", "filename": "src/test/ui/kindck/kindck-inherited-copy-bound.object_safe_for_dispatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/361791bb5fdd714bdc39f8af835f6468dd18331d/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/361791bb5fdd714bdc39f8af835f6468dd18331d/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.object_safe_for_dispatch.stderr?ref=361791bb5fdd714bdc39f8af835f6468dd18331d", "patch": "@@ -1,4 +1,4 @@\n-error[E0277]: the trait bound `std::boxed::Box<{integer}>: std::marker::Copy` is not satisfied\n+error[E0277]: the trait bound `std::boxed::Box<{integer}>: Foo` is not satisfied\n   --> $DIR/kindck-inherited-copy-bound.rs:21:16\n    |\n LL | fn take_param<T:Foo>(foo: &T) { }"}, {"sha": "3b7f85c56689e9d02be9a977c6cb18953cef983e", "filename": "src/test/ui/suggestions/issue-62843.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/361791bb5fdd714bdc39f8af835f6468dd18331d/src%2Ftest%2Fui%2Fsuggestions%2Fissue-62843.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/361791bb5fdd714bdc39f8af835f6468dd18331d/src%2Ftest%2Fui%2Fsuggestions%2Fissue-62843.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-62843.stderr?ref=361791bb5fdd714bdc39f8af835f6468dd18331d", "patch": "@@ -2,10 +2,12 @@ error[E0277]: expected a `std::ops::FnMut<(char,)>` closure, found `std::string:\n   --> $DIR/issue-62843.rs:4:32\n    |\n LL |     println!(\"{:?}\", line.find(pattern));\n-   |                                ^^^^^^^ expected an `FnMut<(char,)>` closure, found `std::string::String`\n+   |                                ^^^^^^^\n+   |                                |\n+   |                                expected an implementor of trait `std::str::pattern::Pattern<'_>`\n+   |                                help: consider borrowing here: `&pattern`\n    |\n-   = help: the trait `std::ops::FnMut<(char,)>` is not implemented for `std::string::String`\n-   = note: borrowing the `std::string::String` might fix the problem\n+   = note: the trait bound `std::string::String: std::str::pattern::Pattern<'_>` is not satisfied\n    = note: required because of the requirements on the impl of `std::str::pattern::Pattern<'_>` for `std::string::String`\n \n error: aborting due to previous error"}, {"sha": "599bbfe222546aa20b0141f9e16e9c885863ca4f", "filename": "src/test/ui/traits/traits-negative-impls.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/361791bb5fdd714bdc39f8af835f6468dd18331d/src%2Ftest%2Fui%2Ftraits%2Ftraits-negative-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/361791bb5fdd714bdc39f8af835f6468dd18331d/src%2Ftest%2Fui%2Ftraits%2Ftraits-negative-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-negative-impls.stderr?ref=361791bb5fdd714bdc39f8af835f6468dd18331d", "patch": "@@ -50,9 +50,12 @@ LL | fn is_send<T: Send>(_: T) {}\n    |    -------    ---- required by this bound in `is_send`\n ...\n LL |     is_send(Box::new(TestType));\n-   |             ^^^^^^^^^^^^^^^^^^ `dummy2::TestType` cannot be sent between threads safely\n+   |             ^^^^^^^^^^^^^^^^^^\n+   |             |\n+   |             expected an implementor of trait `std::marker::Send`\n+   |             help: consider borrowing here: `&Box::new(TestType)`\n    |\n-   = help: the trait `std::marker::Send` is not implemented for `dummy2::TestType`\n+   = note: the trait bound `dummy2::TestType: std::marker::Send` is not satisfied\n    = note: required because of the requirements on the impl of `std::marker::Send` for `std::ptr::Unique<dummy2::TestType>`\n    = note: required because it appears within the type `std::boxed::Box<dummy2::TestType>`\n \n@@ -77,9 +80,12 @@ LL | fn is_sync<T: Sync>(_: T) {}\n    |    -------    ---- required by this bound in `is_sync`\n ...\n LL |     is_sync(Outer2(TestType));\n-   |             ^^^^^^^^^^^^^^^^ `main::TestType` cannot be sent between threads safely\n+   |             ^^^^^^^^^^^^^^^^\n+   |             |\n+   |             expected an implementor of trait `std::marker::Sync`\n+   |             help: consider borrowing here: `&Outer2(TestType)`\n    |\n-   = help: the trait `std::marker::Send` is not implemented for `main::TestType`\n+   = note: the trait bound `main::TestType: std::marker::Sync` is not satisfied\n    = note: required because of the requirements on the impl of `std::marker::Sync` for `Outer2<main::TestType>`\n \n error: aborting due to 7 previous errors"}]}