{"sha": "31f16b87b7eb5a771351e11eecd4a9962199ba19", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxZjE2Yjg3YjdlYjVhNzcxMzUxZTExZWVjZDRhOTk2MjE5OWJhMTk=", "commit": {"author": {"name": "sinkuu", "email": "sinkuu@sinkuu.xyz", "date": "2017-10-11T14:08:36Z"}, "committer": {"name": "sinkuu", "email": "sinkuu@sinkuu.xyz", "date": "2017-10-11T14:08:36Z"}, "message": "Use `rustc_typeck::hir_ty_to_ty`", "tree": {"sha": "ed9afa2bfe1326e6772a0160f8b32be46229aa54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed9afa2bfe1326e6772a0160f8b32be46229aa54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31f16b87b7eb5a771351e11eecd4a9962199ba19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31f16b87b7eb5a771351e11eecd4a9962199ba19", "html_url": "https://github.com/rust-lang/rust/commit/31f16b87b7eb5a771351e11eecd4a9962199ba19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31f16b87b7eb5a771351e11eecd4a9962199ba19/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a61d88fa11e649fbd231a523606f5a5c33ce916", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a61d88fa11e649fbd231a523606f5a5c33ce916", "html_url": "https://github.com/rust-lang/rust/commit/5a61d88fa11e649fbd231a523606f5a5c33ce916"}], "stats": {"total": 61, "additions": 44, "deletions": 17}, "files": [{"sha": "412d83d8ec899a0f63f61c7d0bb00f0945ed1acc", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/31f16b87b7eb5a771351e11eecd4a9962199ba19/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31f16b87b7eb5a771351e11eecd4a9962199ba19/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=31f16b87b7eb5a771351e11eecd4a9962199ba19", "patch": "@@ -13,6 +13,7 @@\n \n #[macro_use]\n extern crate rustc;\n+extern crate rustc_typeck;\n extern crate syntax;\n extern crate syntax_pos;\n "}, {"sha": "18cfbe27cdc5a5361a48a26162e1d410d21cf742", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/31f16b87b7eb5a771351e11eecd4a9962199ba19/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31f16b87b7eb5a771351e11eecd4a9962199ba19/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=31f16b87b7eb5a771351e11eecd4a9962199ba19", "patch": "@@ -5,6 +5,7 @@ use rustc::hir::intravisit::{walk_body, walk_expr, walk_ty, FnKind, NestedVisito\n use rustc::lint::*;\n use rustc::ty::{self, Ty, TyCtxt, TypeckTables};\n use rustc::ty::subst::Substs;\n+use rustc_typeck::hir_ty_to_ty;\n use std::cmp::Ordering;\n use std::collections::BTreeMap;\n use std::borrow::Cow;\n@@ -13,8 +14,8 @@ use syntax::attr::IntType;\n use syntax::codemap::Span;\n use syntax::errors::DiagnosticBuilder;\n use utils::{comparisons, higher, in_external_macro, in_macro, last_path_segment, match_def_path, match_path,\n-            multispan_sugg, opt_def_id, snippet, snippet_opt, span_help_and_lint, span_lint,\n-            span_lint_and_sugg, span_lint_and_then, type_size, same_tys};\n+            multispan_sugg, opt_def_id, same_tys, snippet, snippet_opt, span_help_and_lint, span_lint,\n+            span_lint_and_sugg, span_lint_and_then, type_size};\n use utils::paths;\n \n /// Handles all the linting of funky types\n@@ -1459,8 +1460,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidUpcastComparisons {\n /// **Why is this bad?** `HashMap` or `HashSet` with custom hashers cannot be\n /// used with them.\n ///\n-/// **Known problems:** Suggestions for replacing constructors are not always\n-/// accurate.\n+/// **Known problems:** Suggestions for replacing constructors contains\n+/// false-positives. Also applying suggestion can require modification of other\n+/// pieces of code, possibly including external crates.\n ///\n /// **Example:**\n /// ```rust\n@@ -1620,7 +1622,7 @@ impl<'tcx> ImplicitHasherType<'tcx> {\n             let params = &path.segments.last().as_ref()?.parameters.as_ref()?.types;\n             let params_len = params.len();\n \n-            let ty = cx.tcx.type_of(opt_def_id(path.def)?);\n+            let ty = hir_ty_to_ty(cx.tcx, hir_ty);\n \n             if match_path(path, &paths::HASHMAP) && params_len == 2 {\n                 Some(ImplicitHasherType::HashMap("}, {"sha": "be799f49d0050ce3d7932acdc4ae7ce8a666240a", "filename": "tests/ui/implicit_hasher.stderr", "status": "modified", "additions": 36, "deletions": 12, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/31f16b87b7eb5a771351e11eecd4a9962199ba19/tests%2Fui%2Fimplicit_hasher.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/31f16b87b7eb5a771351e11eecd4a9962199ba19/tests%2Fui%2Fimplicit_hasher.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_hasher.stderr?ref=31f16b87b7eb5a771351e11eecd4a9962199ba19", "patch": "@@ -7,12 +7,16 @@ error: impl for `HashMap` should be generarized over different hashers\n    = note: `-D implicit-hasher` implied by `-D warnings`\n help: consider adding a type parameter\n    |\n-11 | impl<K: Hash + Eq, V, S: ::std::hash::BuildHasher> Foo<i8> for HashMap<K, V> {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+11 | impl<K: Hash + Eq, V, S: ::std::hash::BuildHasher + Default> Foo<i8> for HashMap<K, V> {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: ...and change the type to\n    |\n 11 | impl<K: Hash + Eq, V> Foo<i8> for HashMap<K, V, S> {\n    |                                   ^^^^^^^^^^^^^^^^\n+help: ...and use generic constructor\n+   |\n+17 |         (HashMap::default(), HashMap::with_capacity_and_hasher(10, Default::default()))\n+   |          ^^^^^^^^^^^^^^^^^^\n \n error: impl for `HashMap` should be generarized over different hashers\n   --> $DIR/implicit_hasher.rs:20:36\n@@ -22,12 +26,16 @@ error: impl for `HashMap` should be generarized over different hashers\n    |\n help: consider adding a type parameter\n    |\n-20 | impl<K: Hash + Eq, V, S: ::std::hash::BuildHasher> Foo<i8> for (HashMap<K, V>,) {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+20 | impl<K: Hash + Eq, V, S: ::std::hash::BuildHasher + Default> Foo<i8> for (HashMap<K, V>,) {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: ...and change the type to\n    |\n 20 | impl<K: Hash + Eq, V> Foo<i8> for (HashMap<K, V, S>,) {\n    |                                    ^^^^^^^^^^^^^^^^\n+help: ...and use generic constructor\n+   |\n+22 |         ((HashMap::default(),), (HashMap::with_capacity_and_hasher(10, Default::default()),))\n+   |           ^^^^^^^^^^^^^^^^^^\n \n error: impl for `HashMap` should be generarized over different hashers\n   --> $DIR/implicit_hasher.rs:25:19\n@@ -37,12 +45,16 @@ error: impl for `HashMap` should be generarized over different hashers\n    |\n help: consider adding a type parameter\n    |\n-25 | impl<S: ::std::hash::BuildHasher> Foo<i16> for HashMap<String, String> {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+25 | impl<S: ::std::hash::BuildHasher + Default> Foo<i16> for HashMap<String, String> {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: ...and change the type to\n    |\n 25 | impl Foo<i16> for HashMap<String, String, S> {\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: ...and use generic constructor\n+   |\n+27 |         (HashMap::default(), HashMap::with_capacity_and_hasher(10, Default::default()))\n+   |          ^^^^^^^^^^^^^^^^^^\n \n error: impl for `HashSet` should be generarized over different hashers\n   --> $DIR/implicit_hasher.rs:43:32\n@@ -52,12 +64,16 @@ error: impl for `HashSet` should be generarized over different hashers\n    |\n help: consider adding a type parameter\n    |\n-43 | impl<T: Hash + Eq, S: ::std::hash::BuildHasher> Foo<i8> for HashSet<T> {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+43 | impl<T: Hash + Eq, S: ::std::hash::BuildHasher + Default> Foo<i8> for HashSet<T> {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: ...and change the type to\n    |\n 43 | impl<T: Hash + Eq> Foo<i8> for HashSet<T, S> {\n    |                                ^^^^^^^^^^^^^\n+help: ...and use generic constructor\n+   |\n+45 |         (HashSet::default(), HashSet::with_capacity_and_hasher(10, Default::default()))\n+   |          ^^^^^^^^^^^^^^^^^^\n \n error: impl for `HashSet` should be generarized over different hashers\n   --> $DIR/implicit_hasher.rs:48:19\n@@ -67,12 +83,16 @@ error: impl for `HashSet` should be generarized over different hashers\n    |\n help: consider adding a type parameter\n    |\n-48 | impl<S: ::std::hash::BuildHasher> Foo<i16> for HashSet<String> {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+48 | impl<S: ::std::hash::BuildHasher + Default> Foo<i16> for HashSet<String> {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: ...and change the type to\n    |\n 48 | impl Foo<i16> for HashSet<String, S> {\n    |                   ^^^^^^^^^^^^^^^^^^\n+help: ...and use generic constructor\n+   |\n+50 |         (HashSet::default(), HashSet::with_capacity_and_hasher(10, Default::default()))\n+   |          ^^^^^^^^^^^^^^^^^^\n \n error: parameter of type `HashMap` should be generarized over different hashers\n   --> $DIR/implicit_hasher.rs:65:23\n@@ -115,12 +135,16 @@ error: impl for `HashMap` should be generarized over different hashers\n    |\n help: consider adding a type parameter\n    |\n-70 |         impl<K: Hash + Eq, V, S: ::std::hash::BuildHasher> Foo<u8> for HashMap<K, V> {\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+70 |         impl<K: Hash + Eq, V, S: ::std::hash::BuildHasher + Default> Foo<u8> for HashMap<K, V> {\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: ...and change the type to\n    |\n 70 |         impl<K: Hash + Eq, V> Foo<u8> for HashMap<K, V, S> {\n    |                                           ^^^^^^^^^^^^^^^^\n+help: ...and use generic constructor\n+   |\n+72 |                 (HashMap::default(), HashMap::with_capacity_and_hasher(10, Default::default()))\n+   |                  ^^^^^^^^^^^^^^^^^^\n \n error: parameter of type `HashMap` should be generarized over different hashers\n   --> $DIR/implicit_hasher.rs:78:33"}]}