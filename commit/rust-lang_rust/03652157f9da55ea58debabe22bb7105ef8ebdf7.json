{"sha": "03652157f9da55ea58debabe22bb7105ef8ebdf7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzNjUyMTU3ZjlkYTU1ZWE1OGRlYmFiZTIyYmI3MTA1ZWY4ZWJkZjc=", "commit": {"author": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2016-07-30T15:58:30Z"}, "committer": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2016-07-30T15:58:30Z"}, "message": "Suppress unused type parameter error when type has error field", "tree": {"sha": "abc9f9339bf238bb955b70d12669384f5711ded8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abc9f9339bf238bb955b70d12669384f5711ded8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03652157f9da55ea58debabe22bb7105ef8ebdf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03652157f9da55ea58debabe22bb7105ef8ebdf7", "html_url": "https://github.com/rust-lang/rust/commit/03652157f9da55ea58debabe22bb7105ef8ebdf7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03652157f9da55ea58debabe22bb7105ef8ebdf7/comments", "author": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7580534c3a142c79340576c109f3cd73950996c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/7580534c3a142c79340576c109f3cd73950996c0", "html_url": "https://github.com/rust-lang/rust/commit/7580534c3a142c79340576c109f3cd73950996c0"}], "stats": {"total": 50, "additions": 43, "deletions": 7}, "files": [{"sha": "fadf36471555b7f83a151bffd55c7c6fa020a915", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/03652157f9da55ea58debabe22bb7105ef8ebdf7/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03652157f9da55ea58debabe22bb7105ef8ebdf7/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=03652157f9da55ea58debabe22bb7105ef8ebdf7", "patch": "@@ -182,6 +182,21 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         pat_util::arm_contains_ref_binding(arm)\n     }\n \n+    pub fn has_error_field(self, ty: Ty<'tcx>) -> bool {\n+        match ty.sty {\n+            ty::TyStruct(def, substs) | ty::TyEnum(def, substs) => {\n+                for field in def.all_fields() {\n+                    let field_ty = field.ty(self, substs);\n+                    if let TyError = field_ty.sty {\n+                        return true;\n+                    }\n+                }\n+            }\n+            _ => ()\n+        }\n+        false\n+    }\n+\n     /// Returns the type of element at index `i` in tuple or tuple-like type `t`.\n     /// For an enum `t`, `variant` is None only if `t` is a univariant enum.\n     pub fn positional_element_ty(self,"}, {"sha": "34a91b22981e15b298c5e8752f7710ecfe011c52", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/03652157f9da55ea58debabe22bb7105ef8ebdf7/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03652157f9da55ea58debabe22bb7105ef8ebdf7/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=03652157f9da55ea58debabe22bb7105ef8ebdf7", "patch": "@@ -454,6 +454,11 @@ impl<'ccx, 'gcx> CheckTypeWellFormedVisitor<'ccx, 'gcx> {\n                                      item: &hir::Item,\n                                      ast_generics: &hir::Generics)\n     {\n+        let ty = self.tcx().node_id_to_type(item.id);\n+        if self.tcx().has_error_field(ty) {\n+            return;\n+        }\n+\n         let item_def_id = self.tcx().map.local_def_id(item.id);\n         let ty_predicates = self.tcx().lookup_predicates(item_def_id);\n         let variances = self.tcx().item_variances(item_def_id);"}, {"sha": "a70452dcbd09a6fe1ac0594a3752ac16da9985b6", "filename": "src/test/compile-fail/issue-35075.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/03652157f9da55ea58debabe22bb7105ef8ebdf7/src%2Ftest%2Fcompile-fail%2Fissue-35075.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03652157f9da55ea58debabe22bb7105ef8ebdf7/src%2Ftest%2Fcompile-fail%2Fissue-35075.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-35075.rs?ref=03652157f9da55ea58debabe22bb7105ef8ebdf7", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Bar<T> {\n+    inner: Foo<T> //~ ERROR type name `Foo` is undefined or not in scope\n+}\n+\n+enum Baz<T> {\n+    Foo(Foo<T>) //~ ERROR type name `Foo` is undefined or not in scope\n+}\n+\n+fn main() {}"}, {"sha": "a1572b85666424bc128f2f27b098757c96f6e80d", "filename": "src/test/compile-fail/resolve-type-param-in-item-in-trait.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/03652157f9da55ea58debabe22bb7105ef8ebdf7/src%2Ftest%2Fcompile-fail%2Fresolve-type-param-in-item-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03652157f9da55ea58debabe22bb7105ef8ebdf7/src%2Ftest%2Fcompile-fail%2Fresolve-type-param-in-item-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fresolve-type-param-in-item-in-trait.rs?ref=03652157f9da55ea58debabe22bb7105ef8ebdf7", "patch": "@@ -13,33 +13,30 @@\n // scope (in this case, the enum).\n \n trait TraitA<A> {\n-    fn outer(self) {\n+    fn outer(&self) {\n         enum Foo<B> {\n-            //~^ ERROR parameter `B` is never used\n             Variance(A)\n                 //~^ ERROR can't use type parameters from outer function\n         }\n     }\n }\n \n trait TraitB<A> {\n-    fn outer(self) {\n+    fn outer(&self) {\n         struct Foo<B>(A);\n                 //~^ ERROR can't use type parameters from outer function\n-                //~^^ ERROR parameter `B` is never used\n     }\n }\n \n trait TraitC<A> {\n-    fn outer(self) {\n+    fn outer(&self) {\n         struct Foo<B> { a: A }\n                 //~^ ERROR can't use type parameters from outer function\n-                //~^^ ERROR parameter `B` is never used\n     }\n }\n \n trait TraitD<A> {\n-    fn outer(self) {\n+    fn outer(&self) {\n         fn foo<B>(a: A) { }\n                 //~^ ERROR can't use type parameters from outer function\n     }"}]}