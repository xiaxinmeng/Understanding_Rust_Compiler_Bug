{"sha": "c5868a48795c899d43fde773091f0b133bee0a59", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1ODY4YTQ4Nzk1Yzg5OWQ0M2ZkZTc3MzA5MWYwYjEzM2JlZTBhNTk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-10-15T15:33:32Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-10-15T15:38:51Z"}, "message": "Clarify the names one more time", "tree": {"sha": "460a055c661b2c44ffef28b920f1a59bdbfd5017", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/460a055c661b2c44ffef28b920f1a59bdbfd5017"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5868a48795c899d43fde773091f0b133bee0a59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5868a48795c899d43fde773091f0b133bee0a59", "html_url": "https://github.com/rust-lang/rust/commit/c5868a48795c899d43fde773091f0b133bee0a59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5868a48795c899d43fde773091f0b133bee0a59/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56e67e3a392d7c7c7f30ca39d8e83446ea8bbec3", "url": "https://api.github.com/repos/rust-lang/rust/commits/56e67e3a392d7c7c7f30ca39d8e83446ea8bbec3", "html_url": "https://github.com/rust-lang/rust/commit/56e67e3a392d7c7c7f30ca39d8e83446ea8bbec3"}], "stats": {"total": 43, "additions": 26, "deletions": 17}, "files": [{"sha": "d9dc63b33cc0494cf46d84472dcaf22c9034dd40", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5868a48795c899d43fde773091f0b133bee0a59/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5868a48795c899d43fde773091f0b133bee0a59/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=c5868a48795c899d43fde773091f0b133bee0a59", "patch": "@@ -232,8 +232,8 @@ pub(crate) fn external_docs(\n     let node = token.parent();\n     let definition = match_ast! {\n         match node {\n-            ast::NameRef(name_ref) => NameRefClass::classify(&sema, &name_ref).map(|d| d.definition(sema.db)),\n-            ast::Name(name) => NameClass::classify(&sema, &name).map(|d| d.reference_or_definition(sema.db)),\n+            ast::NameRef(name_ref) => NameRefClass::classify(&sema, &name_ref).map(|d| d.referenced(sema.db)),\n+            ast::Name(name) => NameClass::classify(&sema, &name).map(|d| d.referenced_or_defined(sema.db)),\n             _ => None,\n         }\n     };"}, {"sha": "a87e31019df260227b9fae95dee5406d67804ee2", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5868a48795c899d43fde773091f0b133bee0a59/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5868a48795c899d43fde773091f0b133bee0a59/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=c5868a48795c899d43fde773091f0b133bee0a59", "patch": "@@ -40,7 +40,7 @@ pub(crate) fn goto_definition(\n                 reference_definition(&sema, &name_ref).to_vec()\n             },\n             ast::Name(name) => {\n-                let def = NameClass::classify(&sema, &name)?.reference_or_definition(sema.db);\n+                let def = NameClass::classify(&sema, &name)?.referenced_or_defined(sema.db);\n                 let nav = def.try_to_nav(sema.db)?;\n                 vec![nav]\n             },\n@@ -83,7 +83,7 @@ pub(crate) fn reference_definition(\n ) -> ReferenceResult {\n     let name_kind = NameRefClass::classify(sema, name_ref);\n     if let Some(def) = name_kind {\n-        let def = def.definition(sema.db);\n+        let def = def.referenced(sema.db);\n         return match def.try_to_nav(sema.db) {\n             Some(nav) => ReferenceResult::Exact(nav),\n             None => ReferenceResult::Approximate(Vec::new()),"}, {"sha": "845333e2aec0e96b4e528beffb84a9f7d448513f", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5868a48795c899d43fde773091f0b133bee0a59/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5868a48795c899d43fde773091f0b133bee0a59/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=c5868a48795c899d43fde773091f0b133bee0a59", "patch": "@@ -107,8 +107,8 @@ pub(crate) fn hover(\n     let node = token.parent();\n     let definition = match_ast! {\n         match node {\n-            ast::Name(name) => NameClass::classify(&sema, &name).and_then(|d| d.definition(sema.db)),\n-            ast::NameRef(name_ref) => NameRefClass::classify(&sema, &name_ref).map(|d| d.definition(sema.db)),\n+            ast::Name(name) => NameClass::classify(&sema, &name).and_then(|d| d.defined(sema.db)),\n+            ast::NameRef(name_ref) => NameRefClass::classify(&sema, &name_ref).map(|d| d.referenced(sema.db)),\n             _ => None,\n         }\n     };"}, {"sha": "67ec257a8e9f6cbe52bc0ae94223f140fbf87dbd", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5868a48795c899d43fde773091f0b133bee0a59/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5868a48795c899d43fde773091f0b133bee0a59/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=c5868a48795c899d43fde773091f0b133bee0a59", "patch": "@@ -132,13 +132,13 @@ fn find_name(\n     opt_name: Option<ast::Name>,\n ) -> Option<RangeInfo<Definition>> {\n     if let Some(name) = opt_name {\n-        let def = NameClass::classify(sema, &name)?.reference_or_definition(sema.db);\n+        let def = NameClass::classify(sema, &name)?.referenced_or_defined(sema.db);\n         let range = name.syntax().text_range();\n         return Some(RangeInfo::new(range, def));\n     }\n     let name_ref =\n         sema.find_node_at_offset_with_descend::<ast::NameRef>(&syntax, position.offset)?;\n-    let def = NameRefClass::classify(sema, &name_ref)?.definition(sema.db);\n+    let def = NameRefClass::classify(sema, &name_ref)?.referenced(sema.db);\n     let range = name_ref.syntax().text_range();\n     Some(RangeInfo::new(range, def))\n }"}, {"sha": "201a3d6fa0075c0900b313e94372690d561b9975", "filename": "crates/ide_db/src/defs.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c5868a48795c899d43fde773091f0b133bee0a59/crates%2Fide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5868a48795c899d43fde773091f0b133bee0a59/crates%2Fide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fdefs.rs?ref=c5868a48795c899d43fde773091f0b133bee0a59", "patch": "@@ -91,7 +91,8 @@ pub enum NameClass {\n }\n \n impl NameClass {\n-    pub fn definition(self, db: &dyn HirDatabase) -> Option<Definition> {\n+    /// `Definition` defined by this name.\n+    pub fn defined(self, db: &dyn HirDatabase) -> Option<Definition> {\n         let res = match self {\n             NameClass::ExternCrate(krate) => Definition::ModuleDef(krate.root_module(db).into()),\n             NameClass::Definition(it) => it,\n@@ -103,7 +104,8 @@ impl NameClass {\n         Some(res)\n     }\n \n-    pub fn reference_or_definition(self, db: &dyn HirDatabase) -> Definition {\n+    /// `Definition` referenced or defined by this name.\n+    pub fn referenced_or_defined(self, db: &dyn HirDatabase) -> Definition {\n         match self {\n             NameClass::ExternCrate(krate) => Definition::ModuleDef(krate.root_module(db).into()),\n             NameClass::Definition(it) | NameClass::ConstReference(it) => it,\n@@ -150,7 +152,7 @@ impl NameClass {\n                             })\n                             .and_then(|name_ref| NameRefClass::classify(sema, &name_ref))?;\n \n-                        Some(NameClass::Definition(name_ref_class.definition(sema.db)))\n+                        Some(NameClass::Definition(name_ref_class.referenced(sema.db)))\n                     } else {\n                         let extern_crate = it.syntax().parent().and_then(ast::ExternCrate::cast)?;\n                         let resolved = sema.resolve_extern_crate(&extern_crate)?;\n@@ -233,15 +235,20 @@ impl NameClass {\n pub enum NameRefClass {\n     ExternCrate(Crate),\n     Definition(Definition),\n-    FieldShorthand { local: Local, field: Definition },\n+    FieldShorthand { local_ref: Local, field_ref: Definition },\n }\n \n impl NameRefClass {\n-    pub fn definition(self, db: &dyn HirDatabase) -> Definition {\n+    /// `Definition`, which this name refers to.\n+    pub fn referenced(self, db: &dyn HirDatabase) -> Definition {\n         match self {\n             NameRefClass::ExternCrate(krate) => Definition::ModuleDef(krate.root_module(db).into()),\n             NameRefClass::Definition(def) => def,\n-            NameRefClass::FieldShorthand { local, field: _ } => Definition::Local(local),\n+            NameRefClass::FieldShorthand { local_ref, field_ref: _ } => {\n+                // FIXME: this is inherently ambiguous -- this name refers to\n+                // two different defs....\n+                Definition::Local(local_ref)\n+            }\n         }\n     }\n \n@@ -272,7 +279,9 @@ impl NameRefClass {\n                 let field = Definition::Field(field);\n                 let res = match local {\n                     None => NameRefClass::Definition(field),\n-                    Some(local) => NameRefClass::FieldShorthand { field, local },\n+                    Some(local) => {\n+                        NameRefClass::FieldShorthand { field_ref: field, local_ref: local }\n+                    }\n                 };\n                 return Some(res);\n             }"}, {"sha": "df74be00bb20861a4e7039825cf240c3071cacbd", "filename": "crates/ide_db/src/imports_locator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5868a48795c899d43fde773091f0b133bee0a59/crates%2Fide_db%2Fsrc%2Fimports_locator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5868a48795c899d43fde773091f0b133bee0a59/crates%2Fide_db%2Fsrc%2Fimports_locator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fimports_locator.rs?ref=c5868a48795c899d43fde773091f0b133bee0a59", "patch": "@@ -60,5 +60,5 @@ fn get_name_definition<'a>(\n         candidate_node\n     };\n     let name = ast::Name::cast(candidate_name_node)?;\n-    NameClass::classify(sema, &name)?.definition(sema.db)\n+    NameClass::classify(sema, &name)?.defined(sema.db)\n }"}, {"sha": "a243352406eeb9afe66fb701cec509ca54f2d027", "filename": "crates/ide_db/src/search.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5868a48795c899d43fde773091f0b133bee0a59/crates%2Fide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5868a48795c899d43fde773091f0b133bee0a59/crates%2Fide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsearch.rs?ref=c5868a48795c899d43fde773091f0b133bee0a59", "patch": "@@ -292,7 +292,7 @@ impl<'a> FindUsages<'a> {\n                 };\n                 sink(reference)\n             }\n-            Some(NameRefClass::FieldShorthand { local, field }) => {\n+            Some(NameRefClass::FieldShorthand { local_ref: local, field_ref: field }) => {\n                 let reference = match self.def {\n                     Definition::Field(_) if &field == self.def => Reference {\n                         file_range: self.sema.original_range(name_ref.syntax()),"}]}