{"sha": "c26b12d01cbdb9ee2fc5b4b58dfae963edc6f0f3", "node_id": "C_kwDOAAsO6NoAKGMyNmIxMmQwMWNiZGI5ZWUyZmM1YjRiNThkZmFlOTYzZWRjNmYwZjM", "commit": {"author": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2023-04-04T19:37:38Z"}, "committer": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2023-04-04T19:37:38Z"}, "message": "Desugar async fn completely", "tree": {"sha": "9ba6ab5a73dcd37f6f491ce14415ba407ee98a6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ba6ab5a73dcd37f6f491ce14415ba407ee98a6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c26b12d01cbdb9ee2fc5b4b58dfae963edc6f0f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c26b12d01cbdb9ee2fc5b4b58dfae963edc6f0f3", "html_url": "https://github.com/rust-lang/rust/commit/c26b12d01cbdb9ee2fc5b4b58dfae963edc6f0f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c26b12d01cbdb9ee2fc5b4b58dfae963edc6f0f3/comments", "author": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6464392c15fa8788215d669c4c0b1e46bcadeea", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6464392c15fa8788215d669c4c0b1e46bcadeea", "html_url": "https://github.com/rust-lang/rust/commit/a6464392c15fa8788215d669c4c0b1e46bcadeea"}], "stats": {"total": 77, "additions": 56, "deletions": 21}, "files": [{"sha": "bd87eaa2217513c683dbe6e76e761d3a1bb9f871", "filename": "crates/hir-def/src/body.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c26b12d01cbdb9ee2fc5b4b58dfae963edc6f0f3/crates%2Fhir-def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c26b12d01cbdb9ee2fc5b4b58dfae963edc6f0f3/crates%2Fhir-def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody.rs?ref=c26b12d01cbdb9ee2fc5b4b58dfae963edc6f0f3", "patch": "@@ -353,8 +353,9 @@ impl Body {\n         let _p = profile::span(\"body_with_source_map_query\");\n         let mut params = None;\n \n-        let (file_id, module, body) = match def {\n+        let (file_id, module, body, is_async_fn) = match def {\n             DefWithBodyId::FunctionId(f) => {\n+                let data = db.function_data(f);\n                 let f = f.lookup(db);\n                 let src = f.source(db);\n                 params = src.value.param_list().map(|param_list| {\n@@ -371,27 +372,33 @@ impl Body {\n                         }),\n                     )\n                 });\n-                (src.file_id, f.module(db), src.value.body().map(ast::Expr::from))\n+                (\n+                    src.file_id,\n+                    f.module(db),\n+                    src.value.body().map(ast::Expr::from),\n+                    data.has_async_kw(),\n+                )\n             }\n             DefWithBodyId::ConstId(c) => {\n                 let c = c.lookup(db);\n                 let src = c.source(db);\n-                (src.file_id, c.module(db), src.value.body())\n+                (src.file_id, c.module(db), src.value.body(), false)\n             }\n             DefWithBodyId::StaticId(s) => {\n                 let s = s.lookup(db);\n                 let src = s.source(db);\n-                (src.file_id, s.module(db), src.value.body())\n+                (src.file_id, s.module(db), src.value.body(), false)\n             }\n             DefWithBodyId::VariantId(v) => {\n                 let e = v.parent.lookup(db);\n                 let src = v.parent.child_source(db);\n                 let variant = &src.value[v.local_id];\n-                (src.file_id, e.container, variant.expr())\n+                (src.file_id, e.container, variant.expr(), false)\n             }\n         };\n         let expander = Expander::new(db, file_id, module);\n-        let (mut body, source_map) = Body::new(db, expander, params, body, module.krate);\n+        let (mut body, source_map) =\n+            Body::new(db, expander, params, body, module.krate, is_async_fn);\n         body.shrink_to_fit();\n \n         (Arc::new(body), Arc::new(source_map))\n@@ -421,8 +428,9 @@ impl Body {\n         params: Option<(ast::ParamList, impl Iterator<Item = bool>)>,\n         body: Option<ast::Expr>,\n         krate: CrateId,\n+        is_async_fn: bool,\n     ) -> (Body, BodySourceMap) {\n-        lower::lower(db, expander, params, body, krate)\n+        lower::lower(db, expander, params, body, krate, is_async_fn)\n     }\n \n     fn shrink_to_fit(&mut self) {"}, {"sha": "53627375831d69003ad6c300b81fdd3a9ecd1d9e", "filename": "crates/hir-def/src/body/lower.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c26b12d01cbdb9ee2fc5b4b58dfae963edc6f0f3/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c26b12d01cbdb9ee2fc5b4b58dfae963edc6f0f3/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs?ref=c26b12d01cbdb9ee2fc5b4b58dfae963edc6f0f3", "patch": "@@ -84,6 +84,7 @@ pub(super) fn lower(\n     params: Option<(ast::ParamList, impl Iterator<Item = bool>)>,\n     body: Option<ast::Expr>,\n     krate: CrateId,\n+    is_async_fn: bool,\n ) -> (Body, BodySourceMap) {\n     ExprCollector {\n         db,\n@@ -105,7 +106,7 @@ pub(super) fn lower(\n         is_lowering_assignee_expr: false,\n         is_lowering_generator: false,\n     }\n-    .collect(params, body)\n+    .collect(params, body, is_async_fn)\n }\n \n struct ExprCollector<'a> {\n@@ -141,6 +142,7 @@ impl ExprCollector<'_> {\n         mut self,\n         param_list: Option<(ast::ParamList, impl Iterator<Item = bool>)>,\n         body: Option<ast::Expr>,\n+        is_async_fn: bool,\n     ) -> (Body, BodySourceMap) {\n         if let Some((param_list, mut attr_enabled)) = param_list {\n             if let Some(self_param) =\n@@ -170,7 +172,25 @@ impl ExprCollector<'_> {\n             }\n         };\n \n-        self.body.body_expr = self.collect_expr_opt(body);\n+        self.body.body_expr = if is_async_fn {\n+            self.current_try_block =\n+                Some(self.alloc_label_desugared(Label { name: Name::generate_new_name() }));\n+            let expr = self.collect_expr_opt(body);\n+            let expr = self.alloc_expr_desugared(Expr::Block {\n+                id: None,\n+                statements: Box::new([]),\n+                tail: Some(expr),\n+                label: self.current_try_block,\n+            });\n+            let expr = self.alloc_expr_desugared(Expr::Async {\n+                id: None,\n+                statements: Box::new([]),\n+                tail: Some(expr),\n+            });\n+            expr\n+        } else {\n+            self.collect_expr_opt(body)\n+        };\n         (self.body, self.source_map)\n     }\n "}, {"sha": "90f67e449dd0b870aab3140d5fddae82585095d6", "filename": "crates/hir-ty/src/infer.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c26b12d01cbdb9ee2fc5b4b58dfae963edc6f0f3/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c26b12d01cbdb9ee2fc5b4b58dfae963edc6f0f3/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer.rs?ref=c26b12d01cbdb9ee2fc5b4b58dfae963edc6f0f3", "patch": "@@ -459,7 +459,6 @@ pub(crate) struct InferenceContext<'a> {\n     resume_yield_tys: Option<(Ty, Ty)>,\n     diverges: Diverges,\n     breakables: Vec<BreakableContext>,\n-    is_async_fn: bool,\n }\n \n #[derive(Clone, Debug)]\n@@ -527,7 +526,6 @@ impl<'a> InferenceContext<'a> {\n             resolver,\n             diverges: Diverges::Maybe,\n             breakables: Vec::new(),\n-            is_async_fn: false,\n         }\n     }\n \n@@ -639,9 +637,6 @@ impl<'a> InferenceContext<'a> {\n             self.infer_top_pat(*pat, &ty);\n         }\n         let return_ty = &*data.ret_type;\n-        if data.has_async_kw() {\n-            self.is_async_fn = true;\n-        }\n \n         let ctx = crate::lower::TyLoweringContext::new(self.db, &self.resolver)\n             .with_impl_trait_mode(ImplTraitLoweringMode::Opaque);"}, {"sha": "035f61fc18093128c6935bf1a7b3da0e43bc420a", "filename": "crates/hir-ty/src/infer/expr.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c26b12d01cbdb9ee2fc5b4b58dfae963edc6f0f3/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c26b12d01cbdb9ee2fc5b4b58dfae963edc6f0f3/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs?ref=c26b12d01cbdb9ee2fc5b4b58dfae963edc6f0f3", "patch": "@@ -293,7 +293,6 @@ impl<'a> InferenceContext<'a> {\n \n                 // FIXME: lift these out into a struct\n                 let prev_diverges = mem::replace(&mut self.diverges, Diverges::Maybe);\n-                let prev_is_async_fn = mem::replace(&mut self.is_async_fn, false);\n                 let prev_ret_ty = mem::replace(&mut self.return_ty, ret_ty.clone());\n                 let prev_ret_coercion =\n                     mem::replace(&mut self.return_coercion, Some(CoerceMany::new(ret_ty)));\n@@ -307,7 +306,6 @@ impl<'a> InferenceContext<'a> {\n                 self.diverges = prev_diverges;\n                 self.return_ty = prev_ret_ty;\n                 self.return_coercion = prev_ret_coercion;\n-                self.is_async_fn = prev_is_async_fn;\n                 self.resume_yield_tys = prev_resume_yield_tys;\n \n                 ty\n@@ -963,11 +961,7 @@ impl<'a> InferenceContext<'a> {\n             .as_mut()\n             .expect(\"infer_return called outside function body\")\n             .expected_ty();\n-        let return_expr_ty = if self.is_async_fn {\n-            self.infer_async_block(expr, &None, &[], &Some(expr))\n-        } else {\n-            self.infer_expr_inner(expr, &Expectation::HasType(ret_ty))\n-        };\n+        let return_expr_ty = self.infer_expr_inner(expr, &Expectation::HasType(ret_ty));\n         let mut coerce_many = self.return_coercion.take().unwrap();\n         coerce_many.coerce(self, Some(expr), &return_expr_ty);\n         self.return_coercion = Some(coerce_many);"}, {"sha": "0c037a39ec1f572d52548e0bc68025f409d9e272", "filename": "crates/hir-ty/src/tests/simple.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c26b12d01cbdb9ee2fc5b4b58dfae963edc6f0f3/crates%2Fhir-ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c26b12d01cbdb9ee2fc5b4b58dfae963edc6f0f3/crates%2Fhir-ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fsimple.rs?ref=c26b12d01cbdb9ee2fc5b4b58dfae963edc6f0f3", "patch": "@@ -2094,6 +2094,24 @@ async fn main() {\n         \"#]],\n     )\n }\n+\n+#[test]\n+fn async_fn_and_try_operator() {\n+    check_no_mismatches(\n+        r#\"\n+//- minicore: future, result, fn, try, from\n+async fn foo() -> Result<(), ()> {\n+    Ok(())\n+}\n+\n+async fn bar() -> Result<(), ()> {\n+    let x = foo().await?;\n+    Ok(x)\n+}\n+        \"#,\n+    )\n+}\n+\n #[test]\n fn async_block_early_return() {\n     check_infer("}]}