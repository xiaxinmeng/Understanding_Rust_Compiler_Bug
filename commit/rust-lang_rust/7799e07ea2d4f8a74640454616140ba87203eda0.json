{"sha": "7799e07ea2d4f8a74640454616140ba87203eda0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3OTllMDdlYTJkNGY4YTc0NjQwNDU0NjE2MTQwYmE4NzIwM2VkYTA=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-05-07T22:15:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-05-07T22:15:41Z"}, "message": "Merge pull request #1512 from topecongiro/config-path\n\nAllow config-path to point to a file", "tree": {"sha": "ebe696f1419bb5022d68e51d2ef30cf1f5622ecf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebe696f1419bb5022d68e51d2ef30cf1f5622ecf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7799e07ea2d4f8a74640454616140ba87203eda0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7799e07ea2d4f8a74640454616140ba87203eda0", "html_url": "https://github.com/rust-lang/rust/commit/7799e07ea2d4f8a74640454616140ba87203eda0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7799e07ea2d4f8a74640454616140ba87203eda0/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75a13868dab681dfc31fbe31d76fff413bfe7c9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/75a13868dab681dfc31fbe31d76fff413bfe7c9e", "html_url": "https://github.com/rust-lang/rust/commit/75a13868dab681dfc31fbe31d76fff413bfe7c9e"}, {"sha": "5e832acdc49ecc717a27c5ab1ca1503374d930b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e832acdc49ecc717a27c5ab1ca1503374d930b7", "html_url": "https://github.com/rust-lang/rust/commit/5e832acdc49ecc717a27c5ab1ca1503374d930b7"}], "stats": {"total": 88, "additions": 57, "deletions": 31}, "files": [{"sha": "2c741934a5eab9af195759a2caea5fc9422ce2d8", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 40, "deletions": 22, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/7799e07ea2d4f8a74640454616140ba87203eda0/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7799e07ea2d4f8a74640454616140ba87203eda0/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=7799e07ea2d4f8a74640454616140ba87203eda0", "patch": "@@ -98,6 +98,8 @@ impl CliOptions {\n     }\n }\n \n+const CONFIG_FILE_NAMES: [&'static str; 2] = [\".rustfmt.toml\", \"rustfmt.toml\"];\n+\n /// Try to find a project file in the given directory and its parents. Returns the path of a the\n /// nearest project file if one exists, or `None` if no project file was found.\n fn lookup_project_file(dir: &Path) -> FmtResult<Option<PathBuf>> {\n@@ -109,8 +111,6 @@ fn lookup_project_file(dir: &Path) -> FmtResult<Option<PathBuf>> {\n \n     current = try!(fs::canonicalize(current));\n \n-    const CONFIG_FILE_NAMES: [&'static str; 2] = [\".rustfmt.toml\", \"rustfmt.toml\"];\n-\n     loop {\n         for config_file_name in &CONFIG_FILE_NAMES {\n             let config_file = current.join(config_file_name);\n@@ -136,6 +136,16 @@ fn lookup_project_file(dir: &Path) -> FmtResult<Option<PathBuf>> {\n     }\n }\n \n+fn open_config_file(file_path: &Path) -> FmtResult<(Config, Option<PathBuf>)> {\n+    let mut file = try!(File::open(&file_path));\n+    let mut toml = String::new();\n+    try!(file.read_to_string(&mut toml));\n+    match Config::from_toml(&toml) {\n+        Ok(cfg) => Ok((cfg, Some(file_path.to_path_buf()))),\n+        Err(err) => Err(FmtError::from(err)),\n+    }\n+}\n+\n /// Resolve the config for input in `dir`.\n ///\n /// Returns the `Config` to use, and the path of the project file if there was\n@@ -145,14 +155,7 @@ fn resolve_config(dir: &Path) -> FmtResult<(Config, Option<PathBuf>)> {\n     if path.is_none() {\n         return Ok((Config::default(), None));\n     }\n-    let path = path.unwrap();\n-    let mut file = try!(File::open(&path));\n-    let mut toml = String::new();\n-    try!(file.read_to_string(&mut toml));\n-    match Config::from_toml(&toml) {\n-        Ok(cfg) => Ok((cfg, Some(path))),\n-        Err(err) => Err(FmtError::from(err)),\n-    }\n+    open_config_file(&path.unwrap())\n }\n \n /// read the given config file path recursively if present else read the project file path\n@@ -161,7 +164,7 @@ fn match_cli_path_or_file(config_path: Option<PathBuf>,\n                           -> FmtResult<(Config, Option<PathBuf>)> {\n \n     if let Some(config_file) = config_path {\n-        let (toml, path) = try!(resolve_config(config_file.as_ref()));\n+        let (toml, path) = try!(open_config_file(config_file.as_ref()));\n         if path.is_some() {\n             return Ok((toml, path));\n         }\n@@ -246,7 +249,7 @@ fn execute(opts: &Options) -> FmtResult<Summary> {\n             let mut path = None;\n             // Load the config path file if provided\n             if let Some(config_file) = config_path {\n-                let (cfg_tmp, path_tmp) = resolve_config(config_file.as_ref())?;\n+                let (cfg_tmp, path_tmp) = open_config_file(config_file.as_ref())?;\n                 config = cfg_tmp;\n                 path = path_tmp;\n             };\n@@ -325,7 +328,7 @@ fn main() {\n }\n \n fn print_usage(opts: &Options, reason: &str) {\n-    let reason = format!(\"{}\\nusage: {} [options] <file>...\",\n+    let reason = format!(\"{}\\n\\nusage: {} [options] <file>...\",\n                          reason,\n                          env::args_os().next().unwrap().to_string_lossy());\n     println!(\"{}\", opts.usage(&reason));\n@@ -354,16 +357,31 @@ fn determine_operation(matches: &Matches) -> FmtResult<Operation> {\n         return Ok(Operation::Version);\n     }\n \n+    let config_path_not_found = |path: &str| -> FmtResult<Operation> {\n+        Err(FmtError::from(format!(\"Error: unable to find a config file for the given path: `{}`\",\n+                                   path)))\n+    };\n+\n     // Read the config_path and convert to parent dir if a file is provided.\n-    let config_path: Option<PathBuf> = matches\n-        .opt_str(\"config-path\")\n-        .map(PathBuf::from)\n-        .and_then(|dir| {\n-                      if dir.is_file() {\n-                          return dir.parent().map(|v| v.into());\n-                      }\n-                      Some(dir)\n-                  });\n+    // If a config file cannot be found from the given path, return error.\n+    let config_path: Option<PathBuf> = match matches.opt_str(\"config-path\").map(PathBuf::from) {\n+        Some(ref path) if !path.exists() => return config_path_not_found(path.to_str().unwrap()),\n+        Some(ref path) if path.is_dir() => {\n+            let mut config_file_path = None;\n+            for config_file_name in &CONFIG_FILE_NAMES {\n+                let temp_path = path.join(config_file_name);\n+                if temp_path.is_file() {\n+                    config_file_path = Some(temp_path);\n+                }\n+            }\n+            if config_file_path.is_some() {\n+                config_file_path\n+            } else {\n+                return config_path_not_found(path.to_str().unwrap());\n+            }\n+        }\n+        path @ _ => path,\n+    };\n \n     // if no file argument is supplied, read from stdin\n     if matches.free.is_empty() {"}, {"sha": "441f86f48cbf982790612d45199421cc3561794b", "filename": "src/config.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7799e07ea2d4f8a74640454616140ba87203eda0/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7799e07ea2d4f8a74640454616140ba87203eda0/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=7799e07ea2d4f8a74640454616140ba87203eda0", "patch": "@@ -237,16 +237,24 @@ macro_rules! create_config {\n             }\n \n             pub fn from_toml(toml: &str) -> Result<Config, String> {\n-                let parsed: toml::Value = toml.parse().expect(\"Could not parse TOML\");\n+                let parsed: toml::Value =\n+                    toml.parse().map_err(|e| format!(\"Could not parse TOML: {}\", e))?;\n                 let mut err: String = String::new();\n-                for (key, _) in parsed.as_table().expect(\"Parsed config was not table\") {\n-                    match &**key {\n-                        $(\n-                            stringify!($i) => (),\n-                        )+\n-                        _ => {\n-                            let msg = &format!(\"Warning: Unknown configuration option `{}`\\n\", key);\n-                            err.push_str(msg)\n+                {\n+                    let table = parsed\n+                        .as_table()\n+                        .ok_or(String::from(\"Parsed config was not table\"))?;\n+                    for (key, _) in table {\n+                        match &**key {\n+                            $(\n+                                stringify!($i) => (),\n+                            )+\n+                                _ => {\n+                                    let msg =\n+                                        &format!(\"Warning: Unknown configuration option `{}`\\n\",\n+                                                 key);\n+                                    err.push_str(msg)\n+                                }\n                         }\n                     }\n                 }"}]}