{"sha": "2c8c50d6cb1d7cce0f597dd60daf2a5109b9c0de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjOGM1MGQ2Y2IxZDdjY2UwZjU5N2RkNjBkYWYyYTUxMDliOWMwZGU=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-08T22:13:57Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-15T08:32:53Z"}, "message": "Make sure enum and resource constructors are inlined properly", "tree": {"sha": "8a6d57985ac4b24feb0b7c89b19ca3e4c3bf2666", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a6d57985ac4b24feb0b7c89b19ca3e4c3bf2666"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c8c50d6cb1d7cce0f597dd60daf2a5109b9c0de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c8c50d6cb1d7cce0f597dd60daf2a5109b9c0de", "html_url": "https://github.com/rust-lang/rust/commit/2c8c50d6cb1d7cce0f597dd60daf2a5109b9c0de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c8c50d6cb1d7cce0f597dd60daf2a5109b9c0de/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4650e8bcf404d4c27dbbd5446a56fb066ada30f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/4650e8bcf404d4c27dbbd5446a56fb066ada30f9", "html_url": "https://github.com/rust-lang/rust/commit/4650e8bcf404d4c27dbbd5446a56fb066ada30f9"}], "stats": {"total": 115, "additions": 70, "deletions": 45}, "files": [{"sha": "ee0afc22fb4fcc7b0f865af98384506b530c3f27", "filename": "src/rustc/metadata/astencode.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2c8c50d6cb1d7cce0f597dd60daf2a5109b9c0de/src%2Frustc%2Fmetadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c8c50d6cb1d7cce0f597dd60daf2a5109b9c0de/src%2Frustc%2Fmetadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fastencode.rs?ref=2c8c50d6cb1d7cce0f597dd60daf2a5109b9c0de", "patch": "@@ -137,6 +137,7 @@ fn visit_ids(item: ast::inlined_item, vfn: fn@(ast::node_id)) {\n             vfn(i.id);\n             alt i.node {\n               ast::item_res(_, _, _, d_id, c_id) { vfn(d_id); vfn(c_id); }\n+              ast::item_enum(vs, _) { for v in vs { vfn(v.node.id); } }\n               _ {}\n             }\n         },"}, {"sha": "db3dc4078ed0389817f49d4b4a9dd75d4ad41654", "filename": "src/rustc/metadata/common.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c8c50d6cb1d7cce0f597dd60daf2a5109b9c0de/src%2Frustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c8c50d6cb1d7cce0f597dd60daf2a5109b9c0de/src%2Frustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcommon.rs?ref=2c8c50d6cb1d7cce0f597dd60daf2a5109b9c0de", "patch": "@@ -28,7 +28,7 @@ const tag_items_data_item_symbol: uint = 0x0du;\n \n const tag_items_data_item_variant: uint = 0x0eu;\n \n-const tag_items_data_item_enum_id: uint = 0x0fu;\n+const tag_items_data_parent_item: uint = 0x0fu;\n \n const tag_index: uint = 0x11u;\n \n@@ -62,6 +62,8 @@ const tag_crate_dep: uint = 0x26u;\n \n const tag_crate_hash: uint = 0x28u;\n \n+const tag_parent_item: uint = 0x29u;\n+\n const tag_mod_impl: uint = 0x30u;\n \n const tag_item_method: uint = 0x31u;"}, {"sha": "6be4124d5e6c47e971ac58910c6235d4f7959863", "filename": "src/rustc/metadata/csearch.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2c8c50d6cb1d7cce0f597dd60daf2a5109b9c0de/src%2Frustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c8c50d6cb1d7cce0f597dd60daf2a5109b9c0de/src%2Frustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcsearch.rs?ref=2c8c50d6cb1d7cce0f597dd60daf2a5109b9c0de", "patch": "@@ -19,7 +19,7 @@ export get_type;\n export get_impl_iface;\n export get_impl_method;\n export get_item_path;\n-export maybe_get_item_ast;\n+export maybe_get_item_ast, found_ast, found, found_parent, not_found;\n \n fn get_symbol(cstore: cstore::cstore, def: ast::def_id) -> str {\n     let cdata = cstore::get_crate_data(cstore, def.crate).data;\n@@ -80,11 +80,17 @@ fn get_item_path(tcx: ty::ctxt, def: ast::def_id) -> ast_map::path {\n     [ast_map::path_mod(cdata.name)] + path\n }\n \n+enum found_ast {\n+    found(ast::inlined_item),\n+    found_parent(ast::def_id, ast::inlined_item),\n+    not_found,\n+}\n+\n // Finds the AST for this item in the crate metadata, if any.  If the item was\n // not marked for inlining, then the AST will not be present and hence none\n // will be returned.\n fn maybe_get_item_ast(tcx: ty::ctxt, maps: maps, def: ast::def_id)\n-    -> option<ast::inlined_item> {\n+    -> found_ast {\n     let cstore = tcx.sess.cstore;\n     let cdata = cstore::get_crate_data(cstore, def.crate);\n     decoder::maybe_get_item_ast(cdata, tcx, maps, def.node)"}, {"sha": "ac6e32f292d6d2534ecdabc8520821ccbe5af614", "filename": "src/rustc/metadata/decoder.rs", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2c8c50d6cb1d7cce0f597dd60daf2a5109b9c0de/src%2Frustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c8c50d6cb1d7cce0f597dd60daf2a5109b9c0de/src%2Frustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fdecoder.rs?ref=2c8c50d6cb1d7cce0f597dd60daf2a5109b9c0de", "patch": "@@ -96,9 +96,12 @@ fn item_symbol(item: ebml::doc) -> str {\n     ret str::from_bytes(ebml::doc_data(sym));\n }\n \n-fn variant_enum_id(d: ebml::doc) -> ast::def_id {\n-    let tagdoc = ebml::get_doc(d, tag_items_data_item_enum_id);\n-    ret parse_def_id(ebml::doc_data(tagdoc));\n+fn item_parent_item(d: ebml::doc) -> option<ast::def_id> {\n+    let found = none;\n+    ebml::tagged_docs(d, tag_items_data_parent_item) {|did|\n+        found = some(parse_def_id(ebml::doc_data(did)));\n+    }\n+    found\n }\n \n fn variant_disr_val(d: ebml::doc) -> option<int> {\n@@ -230,7 +233,7 @@ fn lookup_def(cnum: ast::crate_num, data: @[u8], did_: ast::def_id) ->\n       'm' { ast::def_mod(did) }\n       'n' { ast::def_native_mod(did) }\n       'v' {\n-        let tid = variant_enum_id(item);\n+        let tid = option::get(item_parent_item(item));\n         tid = {crate: cnum, node: tid.node};\n         ast::def_variant(tid, did)\n       }\n@@ -278,10 +281,26 @@ fn get_item_path(cdata: cmd, id: ast::node_id) -> ast_map::path {\n }\n \n fn maybe_get_item_ast(cdata: cmd, tcx: ty::ctxt, maps: maps,\n-                      id: ast::node_id) -> option<ast::inlined_item> {\n+                      id: ast::node_id) -> csearch::found_ast {\n     let item_doc = lookup_item(id, cdata.data);\n     let path = vec::init(item_path(item_doc));\n-    astencode::decode_inlined_item(cdata, tcx, maps, path, item_doc)\n+    alt astencode::decode_inlined_item(cdata, tcx, maps, path, item_doc) {\n+      some(ii) { csearch::found(ii) }\n+      none {\n+        alt item_parent_item(item_doc) {\n+          some(did) {\n+            let did = translate_def_id(cdata, did);\n+            let parent_item = lookup_item(did.node, cdata.data);\n+            alt astencode::decode_inlined_item(cdata, tcx, maps, path,\n+                                               parent_item) {\n+              some(ii) { csearch::found_parent(did, ii) }\n+              none { csearch::not_found }\n+            }\n+          }\n+          none { csearch::not_found }\n+        }\n+      }\n+    }\n }\n \n fn get_enum_variants(cdata: cmd, id: ast::node_id, tcx: ty::ctxt)"}, {"sha": "ae9ab788ac0b40e2efdac0cb9584e56abab2c658", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2c8c50d6cb1d7cce0f597dd60daf2a5109b9c0de/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c8c50d6cb1d7cce0f597dd60daf2a5109b9c0de/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=2c8c50d6cb1d7cce0f597dd60daf2a5109b9c0de", "patch": "@@ -241,8 +241,8 @@ fn encode_disr_val(_ecx: @encode_ctxt, ebml_w: ebml::writer, disr_val: int) {\n     ebml_w.end_tag();\n }\n \n-fn encode_enum_id(ebml_w: ebml::writer, id: def_id) {\n-    ebml_w.start_tag(tag_items_data_item_enum_id);\n+fn encode_parent_item(ebml_w: ebml::writer, id: def_id) {\n+    ebml_w.start_tag(tag_items_data_parent_item);\n     ebml_w.writer.write(str::bytes(def_to_str(id)));\n     ebml_w.end_tag();\n }\n@@ -260,7 +260,7 @@ fn encode_enum_variant_info(ecx: @encode_ctxt, ebml_w: ebml::writer,\n         encode_def_id(ebml_w, local_def(variant.node.id));\n         encode_family(ebml_w, 'v');\n         encode_name(ebml_w, variant.node.name);\n-        encode_enum_id(ebml_w, local_def(id));\n+        encode_parent_item(ebml_w, local_def(id));\n         encode_type(ecx, ebml_w,\n                     node_id_to_type(ecx.ccx.tcx, variant.node.id));\n         if vec::len(variant.node.args) > 0u && ty_params.len() == 0u {\n@@ -397,6 +397,7 @@ fn encode_info_for_item(ecx: @encode_ctxt, ebml_w: ebml::writer, item: @item,\n         for v: variant in variants {\n             encode_variant_id(ebml_w, local_def(v.node.id));\n         }\n+        astencode::encode_inlined_item(ecx, ebml_w, path, ii_item(item));\n         encode_path(ebml_w, path, ast_map::path_name(item.ident));\n         ebml_w.end_tag();\n         encode_enum_variant_info(ecx, ebml_w, item.id, variants,\n@@ -414,11 +415,7 @@ fn encode_info_for_item(ecx: @encode_ctxt, ebml_w: ebml::writer, item: @item,\n         encode_type_param_bounds(ebml_w, ecx, tps);\n         encode_type(ecx, ebml_w, ty::ty_fn_ret(fn_ty));\n         encode_name(ebml_w, item.ident);\n-        if tps.len() == 0u {\n-            encode_symbol(ecx, ebml_w, item.id);\n-        } else {\n-            astencode::encode_inlined_item(ecx, ebml_w, path, ii_item(item));\n-        }\n+        astencode::encode_inlined_item(ecx, ebml_w, path, ii_item(item));\n         encode_path(ebml_w, path, ast_map::path_name(item.ident));\n         ebml_w.end_tag();\n \n@@ -428,9 +425,7 @@ fn encode_info_for_item(ecx: @encode_ctxt, ebml_w: ebml::writer, item: @item,\n         encode_family(ebml_w, 'f');\n         encode_type_param_bounds(ebml_w, ecx, tps);\n         encode_type(ecx, ebml_w, fn_ty);\n-        if tps.len() == 0u {\n-            encode_symbol(ecx, ebml_w, ctor_id);\n-        }\n+        encode_parent_item(ebml_w, local_def(item.id));\n         encode_path(ebml_w, path, ast_map::path_name(item.ident));\n         ebml_w.end_tag();\n       }"}, {"sha": "c3d2f886d42b8d4f096a8557af4ac464f5689f57", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 27, "deletions": 25, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/2c8c50d6cb1d7cce0f597dd60daf2a5109b9c0de/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c8c50d6cb1d7cce0f597dd60daf2a5109b9c0de/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=2c8c50d6cb1d7cce0f597dd60daf2a5109b9c0de", "patch": "@@ -864,17 +864,8 @@ fn get_res_dtor(ccx: @crate_ctxt, did: ast::def_id, substs: [ty::t])\n     let did = if did.crate != ast::local_crate && substs.len() > 0u {\n         maybe_instantiate_inline(ccx, did)\n     } else { did };\n-    if did.crate == ast::local_crate {\n-        option::get(monomorphic_fn(ccx, did, substs, none))\n-    } else {\n-        assert substs.len() == 0u;\n-        let nil = ty::mk_nil(ccx.tcx);\n-        let arg = {mode: ast::expl(ast::by_ref),\n-                   ty: ty::mk_mut_ptr(ccx.tcx, nil)};\n-        let f_t = type_of::type_of_fn(ccx, [arg], nil, 0u);\n-        get_extern_const(ccx.externs, ccx.llmod,\n-                         csearch::get_symbol(ccx.sess.cstore, did), f_t)\n-    }\n+    assert did.crate == ast::local_crate;\n+    option::get(monomorphic_fn(ccx, did, substs, none))\n }\n \n fn trans_res_drop(bcx: block, rs: ValueRef, did: ast::def_id,\n@@ -2094,22 +2085,34 @@ fn maybe_instantiate_inline(ccx: @crate_ctxt, fn_id: ast::def_id)\n       }\n       some(none) { fn_id } // Not inlinable\n       none { // Not seen yet\n-        alt csearch::maybe_get_item_ast(ccx.tcx, ccx.maps, fn_id) {\n-          none { ccx.external.insert(fn_id, none); fn_id }\n-          some(ast::ii_item(item)) {\n-            #debug[\"maybe_instantiate_inline(%s): inlining to local id %d\",\n-                   ty::item_path_str(ccx.tcx, fn_id),\n-                   item.id];\n+        alt check csearch::maybe_get_item_ast(ccx.tcx, ccx.maps, fn_id) {\n+          csearch::not_found {\n+            ccx.external.insert(fn_id, none);\n+            fn_id\n+          }\n+          csearch::found(ast::ii_item(item)) {\n             ccx.external.insert(fn_id, some(item.id));\n             trans_item(ccx, *item);\n             local_def(item.id)\n           }\n-          some(ast::ii_method(impl_did, mth)) {\n-            #debug[\"maybe_instantiate_inline(%s): \\\n-                    inlining method of %s to %d\",\n-                   ty::item_path_str(ccx.tcx, fn_id),\n-                   ty::item_path_str(ccx.tcx, impl_did),\n-                   mth.id];\n+          csearch::found_parent(parent_id, ast::ii_item(item)) {\n+            ccx.external.insert(parent_id, some(item.id));\n+            let my_id = 0;\n+            alt check item.node {\n+              ast::item_enum(_, _) {\n+                let vs_here = ty::enum_variants(ccx.tcx, local_def(item.id));\n+                let vs_there = ty::enum_variants(ccx.tcx, parent_id);\n+                vec::iter2(*vs_here, *vs_there) {|here, there|\n+                    if there.id == fn_id { my_id = here.id.node; }\n+                    ccx.external.insert(there.id, some(here.id.node));\n+                }\n+              }\n+              ast::item_res(_, _, _, _, ctor_id) { my_id = ctor_id; }\n+            }\n+            trans_item(ccx, *item);\n+            local_def(my_id)\n+          }\n+          csearch::found(ast::ii_method(impl_did, mth)) {\n             ccx.external.insert(fn_id, some(mth.id));\n             compute_ii_method_info(ccx, impl_did, mth) {|ty, bounds, path|\n                 if bounds.len() == 0u {\n@@ -2143,8 +2146,7 @@ fn lval_static_fn(bcx: block, fn_id: ast::def_id, id: ast::node_id,\n     // monomorphized and non-monomorphized functions at the moment. If\n     // monomorphizing becomes the only approach, this'll be much simpler.\n     if (option::is_some(substs) || tys.len() > 0u) &&\n-       fn_id.crate == ast::local_crate &&\n-       !vec::any(tys, {|t| ty::type_has_params(t)}) {\n+       fn_id.crate == ast::local_crate {\n         let mono = alt substs {\n           some((stys, vtables)) {\n             if (stys.len() + tys.len()) > 0u {"}]}