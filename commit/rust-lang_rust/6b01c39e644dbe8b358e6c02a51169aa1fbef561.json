{"sha": "6b01c39e644dbe8b358e6c02a51169aa1fbef561", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiMDFjMzllNjQ0ZGJlOGIzNThlNmMwMmE1MTE2OWFhMWZiZWY1NjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-25T09:37:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-25T09:37:09Z"}, "message": "Auto merge of #6181 - cgm616:undropped-manually-drops, r=flip1995\n\nAdd new lint for undropped ManuallyDrop values\n\nAdds a new lint for the following code:\n\n```rust\nstruct S;\n\nimpl Drop for S {\n    fn drop(&mut self) {\n        println!(\"drip drop\");\n    }\n}\n\nfn main() {\n    // This will not drop the `S`!!!\n    drop(std::mem::ManuallyDrop::new(S));\n    unsafe {\n        // This will.\n        std::mem::ManuallyDrop::drop(&mut std::mem::ManuallyDrop::new(S));\n    }\n}\n```\n\nThe inner value of a `ManuallyDrop` will not be dropped unless the proper, unsafe drop function is called on it. This lint makes sure that a user does not accidently use the wrong function and forget to drop a `ManuallyDrop` value.\n\nFixes #5581.\n\n---\n\n*Please keep the line below*\nchangelog: none", "tree": {"sha": "7ade4d91a610dfd1e6f2ef5e9b894750993c1e03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ade4d91a610dfd1e6f2ef5e9b894750993c1e03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b01c39e644dbe8b358e6c02a51169aa1fbef561", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b01c39e644dbe8b358e6c02a51169aa1fbef561", "html_url": "https://github.com/rust-lang/rust/commit/6b01c39e644dbe8b358e6c02a51169aa1fbef561", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b01c39e644dbe8b358e6c02a51169aa1fbef561/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0e617adaa89c759beccf74bc0f9eafaed44de22", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0e617adaa89c759beccf74bc0f9eafaed44de22", "html_url": "https://github.com/rust-lang/rust/commit/e0e617adaa89c759beccf74bc0f9eafaed44de22"}, {"sha": "e70817e712fd4d4e930ead0d587031e2b4a97a2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e70817e712fd4d4e930ead0d587031e2b4a97a2e", "html_url": "https://github.com/rust-lang/rust/commit/e70817e712fd4d4e930ead0d587031e2b4a97a2e"}], "stats": {"total": 108, "additions": 108, "deletions": 0}, "files": [{"sha": "1e60bcbb98c1199b4326fc8a892ab0b08e1b6998", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b01c39e644dbe8b358e6c02a51169aa1fbef561/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/6b01c39e644dbe8b358e6c02a51169aa1fbef561/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=6b01c39e644dbe8b358e6c02a51169aa1fbef561", "patch": "@@ -1982,6 +1982,7 @@ Released 2018-09-13\n [`try_err`]: https://rust-lang.github.io/rust-clippy/master/index.html#try_err\n [`type_complexity`]: https://rust-lang.github.io/rust-clippy/master/index.html#type_complexity\n [`type_repetition_in_bounds`]: https://rust-lang.github.io/rust-clippy/master/index.html#type_repetition_in_bounds\n+[`undropped_manually_drops`]: https://rust-lang.github.io/rust-clippy/master/index.html#undropped_manually_drops\n [`unicode_not_nfc`]: https://rust-lang.github.io/rust-clippy/master/index.html#unicode_not_nfc\n [`unimplemented`]: https://rust-lang.github.io/rust-clippy/master/index.html#unimplemented\n [`uninit_assumed_init`]: https://rust-lang.github.io/rust-clippy/master/index.html#uninit_assumed_init"}, {"sha": "42948996a3578dcfd36ec91129009b465946d46b", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6b01c39e644dbe8b358e6c02a51169aa1fbef561/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b01c39e644dbe8b358e6c02a51169aa1fbef561/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=6b01c39e644dbe8b358e6c02a51169aa1fbef561", "patch": "@@ -314,6 +314,7 @@ mod transmute;\n mod transmuting_null;\n mod try_err;\n mod types;\n+mod undropped_manually_drops;\n mod unicode;\n mod unit_return_expecting_ord;\n mod unnamed_address;\n@@ -865,6 +866,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &types::UNIT_CMP,\n         &types::UNNECESSARY_CAST,\n         &types::VEC_BOX,\n+        &undropped_manually_drops::UNDROPPED_MANUALLY_DROPS,\n         &unicode::INVISIBLE_CHARACTERS,\n         &unicode::NON_ASCII_LITERAL,\n         &unicode::UNICODE_NOT_NFC,\n@@ -1141,6 +1143,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move || box disallowed_method::DisallowedMethod::new(&disallowed_methods));\n     store.register_early_pass(|| box asm_syntax::InlineAsmX86AttSyntax);\n     store.register_early_pass(|| box asm_syntax::InlineAsmX86IntelSyntax);\n+    store.register_late_pass(|| box undropped_manually_drops::UndroppedManuallyDrops);\n \n \n     store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n@@ -1528,6 +1531,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&types::UNIT_CMP),\n         LintId::of(&types::UNNECESSARY_CAST),\n         LintId::of(&types::VEC_BOX),\n+        LintId::of(&undropped_manually_drops::UNDROPPED_MANUALLY_DROPS),\n         LintId::of(&unicode::INVISIBLE_CHARACTERS),\n         LintId::of(&unit_return_expecting_ord::UNIT_RETURN_EXPECTING_ORD),\n         LintId::of(&unnamed_address::FN_ADDRESS_COMPARISONS),\n@@ -1800,6 +1804,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&types::ABSURD_EXTREME_COMPARISONS),\n         LintId::of(&types::CAST_REF_TO_MUT),\n         LintId::of(&types::UNIT_CMP),\n+        LintId::of(&undropped_manually_drops::UNDROPPED_MANUALLY_DROPS),\n         LintId::of(&unicode::INVISIBLE_CHARACTERS),\n         LintId::of(&unit_return_expecting_ord::UNIT_RETURN_EXPECTING_ORD),\n         LintId::of(&unnamed_address::FN_ADDRESS_COMPARISONS),"}, {"sha": "5443f1601fcbb083c8fcef94219a56a26d67cc5c", "filename": "clippy_lints/src/undropped_manually_drops.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/6b01c39e644dbe8b358e6c02a51169aa1fbef561/clippy_lints%2Fsrc%2Fundropped_manually_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b01c39e644dbe8b358e6c02a51169aa1fbef561/clippy_lints%2Fsrc%2Fundropped_manually_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fundropped_manually_drops.rs?ref=6b01c39e644dbe8b358e6c02a51169aa1fbef561", "patch": "@@ -0,0 +1,50 @@\n+use crate::utils::{is_type_lang_item, match_function_call, paths, span_lint_and_help};\n+use rustc_hir::{lang_items, Expr};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Prevents the safe `std::mem::drop` function from being called on `std::mem::ManuallyDrop`.\n+    ///\n+    /// **Why is this bad?** The safe `drop` function does not drop the inner value of a `ManuallyDrop`.\n+    ///\n+    /// **Known problems:** Does not catch cases if the user binds `std::mem::drop`\n+    /// to a different name and calls it that way.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// struct S;\n+    /// drop(std::mem::ManuallyDrop::new(S));\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// struct S;\n+    /// unsafe {\n+    ///     std::mem::ManuallyDrop::drop(&mut std::mem::ManuallyDrop::new(S));\n+    /// }\n+    /// ```\n+    pub UNDROPPED_MANUALLY_DROPS,\n+    correctness,\n+    \"use of safe `std::mem::drop` function to drop a std::mem::ManuallyDrop, which will not drop the inner value\"\n+}\n+\n+declare_lint_pass!(UndroppedManuallyDrops => [UNDROPPED_MANUALLY_DROPS]);\n+\n+impl LateLintPass<'tcx> for UndroppedManuallyDrops {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+        if let Some(ref args) = match_function_call(cx, expr, &paths::DROP) {\n+            let ty = cx.typeck_results().expr_ty(&args[0]);\n+            if is_type_lang_item(cx, ty, lang_items::LangItem::ManuallyDrop) {\n+                span_lint_and_help(\n+                    cx,\n+                    UNDROPPED_MANUALLY_DROPS,\n+                    expr.span,\n+                    \"the inner value of this ManuallyDrop will not be dropped\",\n+                    None,\n+                    \"to drop a `ManuallyDrop<T>`, use std::mem::ManuallyDrop::drop\",\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "eee295b5c37df41d7becceb19a8487b63a112fcc", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6b01c39e644dbe8b358e6c02a51169aa1fbef561/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b01c39e644dbe8b358e6c02a51169aa1fbef561/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=6b01c39e644dbe8b358e6c02a51169aa1fbef561", "patch": "@@ -2433,6 +2433,13 @@ vec![\n         deprecation: None,\n         module: \"trait_bounds\",\n     },\n+    Lint {\n+        name: \"undropped_manually_drops\",\n+        group: \"correctness\",\n+        desc: \"use of safe `std::mem::drop` function to drop a std::mem::ManuallyDrop, which will not drop the inner value\",\n+        deprecation: None,\n+        module: \"undropped_manually_drops\",\n+    },\n     Lint {\n         name: \"unicode_not_nfc\",\n         group: \"pedantic\","}, {"sha": "f4cfc92e1cd0259eddc426dce698b54ee4c7b61d", "filename": "tests/ui/undropped_manually_drops.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6b01c39e644dbe8b358e6c02a51169aa1fbef561/tests%2Fui%2Fundropped_manually_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b01c39e644dbe8b358e6c02a51169aa1fbef561/tests%2Fui%2Fundropped_manually_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fundropped_manually_drops.rs?ref=6b01c39e644dbe8b358e6c02a51169aa1fbef561", "patch": "@@ -0,0 +1,26 @@\n+#![warn(clippy::undropped_manually_drops)]\n+\n+struct S;\n+\n+fn main() {\n+    let f = std::mem::drop;\n+    let g = std::mem::ManuallyDrop::drop;\n+    let mut manual1 = std::mem::ManuallyDrop::new(S);\n+    let mut manual2 = std::mem::ManuallyDrop::new(S);\n+    let mut manual3 = std::mem::ManuallyDrop::new(S);\n+    let mut manual4 = std::mem::ManuallyDrop::new(S);\n+\n+    // These lines will not drop `S` and should be linted\n+    drop(std::mem::ManuallyDrop::new(S));\n+    drop(manual1);\n+\n+    // FIXME: this line is not linted, though it should be\n+    f(manual2);\n+\n+    // These lines will drop `S` and should be okay.\n+    unsafe {\n+        std::mem::ManuallyDrop::drop(&mut std::mem::ManuallyDrop::new(S));\n+        std::mem::ManuallyDrop::drop(&mut manual3);\n+        g(&mut manual4);\n+    }\n+}"}, {"sha": "2ac0fe98697efce7dfe01155e2637e51fe4e53fb", "filename": "tests/ui/undropped_manually_drops.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6b01c39e644dbe8b358e6c02a51169aa1fbef561/tests%2Fui%2Fundropped_manually_drops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b01c39e644dbe8b358e6c02a51169aa1fbef561/tests%2Fui%2Fundropped_manually_drops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fundropped_manually_drops.stderr?ref=6b01c39e644dbe8b358e6c02a51169aa1fbef561", "patch": "@@ -0,0 +1,19 @@\n+error: the inner value of this ManuallyDrop will not be dropped\n+  --> $DIR/undropped_manually_drops.rs:14:5\n+   |\n+LL |     drop(std::mem::ManuallyDrop::new(S));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::undropped-manually-drops` implied by `-D warnings`\n+   = help: to drop a `ManuallyDrop<T>`, use std::mem::ManuallyDrop::drop\n+\n+error: the inner value of this ManuallyDrop will not be dropped\n+  --> $DIR/undropped_manually_drops.rs:15:5\n+   |\n+LL |     drop(manual1);\n+   |     ^^^^^^^^^^^^^\n+   |\n+   = help: to drop a `ManuallyDrop<T>`, use std::mem::ManuallyDrop::drop\n+\n+error: aborting due to 2 previous errors\n+"}]}