{"sha": "250c71b85d0eed22982ef2b2db92fd5e63772c42", "node_id": "C_kwDOAAsO6NoAKDI1MGM3MWI4NWQwZWVkMjI5ODJlZjJiMmRiOTJmZDVlNjM3NzJjNDI", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-07-13T16:45:20Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-07-06T21:04:55Z"}, "message": "Make AST lowering a query.", "tree": {"sha": "41f7151fba33e5fd0260b811358d4fde003d2270", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41f7151fba33e5fd0260b811358d4fde003d2270"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/250c71b85d0eed22982ef2b2db92fd5e63772c42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/250c71b85d0eed22982ef2b2db92fd5e63772c42", "html_url": "https://github.com/rust-lang/rust/commit/250c71b85d0eed22982ef2b2db92fd5e63772c42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/250c71b85d0eed22982ef2b2db92fd5e63772c42/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43bb31b9540a439dcca65f47b8644eafe4a42e2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/43bb31b9540a439dcca65f47b8644eafe4a42e2d", "html_url": "https://github.com/rust-lang/rust/commit/43bb31b9540a439dcca65f47b8644eafe4a42e2d"}], "stats": {"total": 275, "additions": 111, "deletions": 164}, "files": [{"sha": "86936b25d8ad9c61f012c97a77a227aa43f50321", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/250c71b85d0eed22982ef2b2db92fd5e63772c42/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/250c71b85d0eed22982ef2b2db92fd5e63772c42/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=250c71b85d0eed22982ef2b2db92fd5e63772c42", "patch": "@@ -3869,6 +3869,7 @@ name = \"rustc_hir\"\n version = \"0.0.0\"\n dependencies = [\n  \"odht\",\n+ \"rustc_arena\",\n  \"rustc_ast\",\n  \"rustc_data_structures\",\n  \"rustc_error_messages\","}, {"sha": "3acca74a4cd925b2463b06f526a77f9254125499", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/250c71b85d0eed22982ef2b2db92fd5e63772c42/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/250c71b85d0eed22982ef2b2db92fd5e63772c42/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=250c71b85d0eed22982ef2b2db92fd5e63772c42", "patch": "@@ -1,7 +1,6 @@\n use super::ResolverAstLoweringExt;\n use super::{AstOwner, ImplTraitContext, ImplTraitPosition};\n-use super::{LoweringContext, ParamMode};\n-use crate::{Arena, FnDeclKind};\n+use super::{FnDeclKind, LoweringContext, ParamMode};\n \n use rustc_ast::ptr::P;\n use rustc_ast::visit::AssocCtxt;\n@@ -12,12 +11,9 @@ use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{LocalDefId, CRATE_DEF_ID};\n-use rustc_hir::definitions::Definitions;\n use rustc_hir::PredicateOrigin;\n use rustc_index::vec::{Idx, IndexVec};\n-use rustc_middle::ty::{ResolverAstLowering, ResolverOutputs};\n-use rustc_session::cstore::CrateStoreDyn;\n-use rustc_session::Session;\n+use rustc_middle::ty::{ResolverAstLowering, TyCtxt};\n use rustc_span::source_map::DesugaringKind;\n use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::Span;\n@@ -27,12 +23,8 @@ use smallvec::{smallvec, SmallVec};\n use std::iter;\n \n pub(super) struct ItemLowerer<'a, 'hir> {\n-    pub(super) sess: &'a Session,\n-    pub(super) definitions: &'a mut Definitions,\n-    pub(super) cstore: &'a CrateStoreDyn,\n-    pub(super) resolutions: &'a ResolverOutputs,\n+    pub(super) tcx: TyCtxt<'hir>,\n     pub(super) resolver: &'a mut ResolverAstLowering,\n-    pub(super) arena: &'hir Arena<'hir>,\n     pub(super) ast_index: &'a IndexVec<LocalDefId, AstOwner<'a>>,\n     pub(super) owners: &'a mut IndexVec<LocalDefId, hir::MaybeOwner<&'hir hir::OwnerInfo<'hir>>>,\n }\n@@ -65,12 +57,10 @@ impl<'a, 'hir> ItemLowerer<'a, 'hir> {\n     ) {\n         let mut lctx = LoweringContext {\n             // Pseudo-globals.\n-            sess: &self.sess,\n-            definitions: self.definitions,\n-            cstore: self.cstore,\n-            resolutions: self.resolutions,\n+            tcx: self.tcx,\n+            sess: &self.tcx.sess,\n             resolver: self.resolver,\n-            arena: self.arena,\n+            arena: self.tcx.hir_arena,\n \n             // HirId handling.\n             bodies: Vec::new(),\n@@ -145,7 +135,7 @@ impl<'a, 'hir> ItemLowerer<'a, 'hir> {\n         let def_id = self.resolver.node_id_to_def_id[&item.id];\n \n         let parent_id = {\n-            let parent = self.definitions.def_key(def_id).parent;\n+            let parent = self.tcx.hir().def_key(def_id).parent;\n             let local_def_index = parent.unwrap();\n             LocalDefId { local_def_index }\n         };"}, {"sha": "ee978f39d2263e91e8119b5de7545261ed7e45ce", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 59, "deletions": 79, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/250c71b85d0eed22982ef2b2db92fd5e63772c42/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/250c71b85d0eed22982ef2b2db92fd5e63772c42/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=250c71b85d0eed22982ef2b2db92fd5e63772c42", "patch": "@@ -53,12 +53,10 @@ use rustc_errors::{struct_span_err, Applicability};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, LifetimeRes, Namespace, PartialRes, PerNS, Res};\n use rustc_hir::def_id::{LocalDefId, CRATE_DEF_ID};\n-use rustc_hir::definitions::{DefPathData, Definitions};\n+use rustc_hir::definitions::DefPathData;\n use rustc_hir::{ConstArg, GenericArg, ItemLocalId, ParamName, TraitCandidate};\n use rustc_index::vec::{Idx, IndexVec};\n-use rustc_middle::ty::{ResolverAstLowering, ResolverOutputs};\n-use rustc_query_system::ich::StableHashingContext;\n-use rustc_session::cstore::CrateStoreDyn;\n+use rustc_middle::ty::{ResolverAstLowering, TyCtxt};\n use rustc_session::parse::feature_err;\n use rustc_session::Session;\n use rustc_span::hygiene::MacroKind;\n@@ -83,19 +81,13 @@ mod item;\n mod pat;\n mod path;\n \n-rustc_hir::arena_types!(rustc_arena::declare_arena);\n-\n-struct LoweringContext<'a, 'hir: 'a> {\n-    /// Used to assign IDs to HIR nodes that do not directly correspond to AST nodes.\n-    sess: &'a Session,\n-\n-    definitions: &'a mut Definitions,\n-    cstore: &'a CrateStoreDyn,\n-    resolutions: &'a ResolverOutputs,\n+struct LoweringContext<'a, 'hir> {\n+    tcx: TyCtxt<'hir>,\n+    sess: &'hir Session,\n     resolver: &'a mut ResolverAstLowering,\n \n     /// Used to allocate HIR nodes.\n-    arena: &'hir Arena<'hir>,\n+    arena: &'hir hir::Arena<'hir>,\n \n     /// Bodies inside the owner being lowered.\n     bodies: Vec<(hir::ItemLocalId, &'hir hir::Body<'hir>)>,\n@@ -391,61 +383,58 @@ fn index_crate<'a>(\n /// Compute the hash for the HIR of the full crate.\n /// This hash will then be part of the crate_hash which is stored in the metadata.\n fn compute_hir_hash(\n-    sess: &Session,\n-    definitions: &Definitions,\n-    cstore: &CrateStoreDyn,\n-    resolver: &ResolverOutputs,\n+    tcx: TyCtxt<'_>,\n     owners: &IndexVec<LocalDefId, hir::MaybeOwner<&hir::OwnerInfo<'_>>>,\n ) -> Fingerprint {\n     let mut hir_body_nodes: Vec<_> = owners\n         .iter_enumerated()\n         .filter_map(|(def_id, info)| {\n             let info = info.as_owner()?;\n-            let def_path_hash = definitions.def_path_hash(def_id);\n+            let def_path_hash = tcx.hir().def_path_hash(def_id);\n             Some((def_path_hash, info))\n         })\n         .collect();\n     hir_body_nodes.sort_unstable_by_key(|bn| bn.0);\n \n-    let mut stable_hasher = StableHasher::new();\n-    let mut hcx = StableHashingContext::new(sess, definitions, cstore, &resolver.source_span);\n-    hir_body_nodes.hash_stable(&mut hcx, &mut stable_hasher);\n-    stable_hasher.finish()\n+    tcx.with_stable_hashing_context(|mut hcx| {\n+        let mut stable_hasher = StableHasher::new();\n+        hir_body_nodes.hash_stable(&mut hcx, &mut stable_hasher);\n+        stable_hasher.finish()\n+    })\n }\n \n-pub fn lower_crate<'hir>(\n-    sess: &Session,\n-    krate: &Crate,\n-    definitions: &mut Definitions,\n-    cstore: &CrateStoreDyn,\n-    resolutions: &ResolverOutputs,\n-    mut resolver: ResolverAstLowering,\n-    arena: &'hir Arena<'hir>,\n-) -> &'hir hir::Crate<'hir> {\n-    let _prof_timer = sess.prof.verbose_generic_activity(\"hir_lowering\");\n+pub fn lower_to_hir<'hir>(tcx: TyCtxt<'hir>, (): ()) -> hir::Crate<'hir> {\n+    let sess = tcx.sess;\n+    let krate = tcx.untracked_crate.steal();\n+    let mut resolver = tcx.resolver_for_lowering(()).steal();\n \n-    let ast_index = index_crate(&resolver.node_id_to_def_id, krate);\n-\n-    let mut owners =\n-        IndexVec::from_fn_n(|_| hir::MaybeOwner::Phantom, definitions.def_index_count());\n+    let ast_index = index_crate(&resolver.node_id_to_def_id, &krate);\n+    let mut owners = IndexVec::from_fn_n(\n+        |_| hir::MaybeOwner::Phantom,\n+        tcx.definitions_untracked().def_index_count(),\n+    );\n \n     for def_id in ast_index.indices() {\n         item::ItemLowerer {\n-            sess,\n-            definitions,\n-            cstore,\n-            resolutions,\n+            tcx,\n             resolver: &mut resolver,\n-            arena,\n             ast_index: &ast_index,\n             owners: &mut owners,\n         }\n         .lower_node(def_id);\n     }\n \n-    let hir_hash = compute_hir_hash(sess, definitions, cstore, resolutions, &owners);\n-    let krate = hir::Crate { owners, hir_hash };\n-    arena.alloc(krate)\n+    // Drop AST to free memory\n+    std::mem::drop(ast_index);\n+    sess.time(\"drop_ast\", || std::mem::drop(krate));\n+\n+    // Discard hygiene data, which isn't required after lowering to HIR.\n+    if !sess.opts.debugging_opts.keep_hygiene_data {\n+        rustc_span::hygiene::clear_syntax_context_map();\n+    }\n+\n+    let hir_hash = compute_hir_hash(tcx, &owners);\n+    hir::Crate { owners, hir_hash }\n }\n \n #[derive(Copy, Clone, PartialEq, Debug)]\n@@ -464,15 +453,6 @@ enum ParenthesizedGenericArgs {\n }\n \n impl<'a, 'hir> LoweringContext<'a, 'hir> {\n-    fn create_stable_hashing_context(&self) -> StableHashingContext<'_> {\n-        StableHashingContext::new(\n-            self.sess,\n-            self.definitions,\n-            self.cstore,\n-            &self.resolutions.source_span,\n-        )\n-    }\n-\n     fn create_def(\n         &mut self,\n         parent: LocalDefId,\n@@ -484,10 +464,10 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             \"adding a def'n for node-id {:?} and data {:?} but a previous def'n exists: {:?}\",\n             node_id,\n             data,\n-            self.definitions.def_key(self.local_def_id(node_id)),\n+            self.tcx.hir().def_key(self.local_def_id(node_id)),\n         );\n \n-        let def_id = self.definitions.create_def(parent, data);\n+        let def_id = self.tcx.create_def(parent, data);\n \n         // Some things for which we allocate `LocalDefId`s don't correspond to\n         // anything in the AST, so they don't have a `NodeId`. For these cases\n@@ -578,7 +558,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         bodies.sort_by_key(|(k, _)| *k);\n         let bodies = SortedMap::from_presorted_elements(bodies);\n         let (hash_including_bodies, hash_without_bodies) = self.hash_owner(node, &bodies);\n-        let (nodes, parenting) = index::index_hir(self.sess, self.definitions, node, &bodies);\n+        let (nodes, parenting) =\n+            index::index_hir(self.tcx.sess, &*self.tcx.definitions_untracked(), node, &bodies);\n         let nodes = hir::OwnerNodes {\n             hash_including_bodies,\n             hash_without_bodies,\n@@ -587,10 +568,11 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             local_id_to_def_id,\n         };\n         let attrs = {\n-            let mut hcx = self.create_stable_hashing_context();\n-            let mut stable_hasher = StableHasher::new();\n-            attrs.hash_stable(&mut hcx, &mut stable_hasher);\n-            let hash = stable_hasher.finish();\n+            let hash = self.tcx.with_stable_hashing_context(|mut hcx| {\n+                let mut stable_hasher = StableHasher::new();\n+                attrs.hash_stable(&mut hcx, &mut stable_hasher);\n+                stable_hasher.finish()\n+            });\n             hir::AttributeMap { map: attrs, hash }\n         };\n \n@@ -604,18 +586,19 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         node: hir::OwnerNode<'hir>,\n         bodies: &SortedMap<hir::ItemLocalId, &'hir hir::Body<'hir>>,\n     ) -> (Fingerprint, Fingerprint) {\n-        let mut hcx = self.create_stable_hashing_context();\n-        let mut stable_hasher = StableHasher::new();\n-        hcx.with_hir_bodies(true, node.def_id(), bodies, |hcx| {\n-            node.hash_stable(hcx, &mut stable_hasher)\n-        });\n-        let hash_including_bodies = stable_hasher.finish();\n-        let mut stable_hasher = StableHasher::new();\n-        hcx.with_hir_bodies(false, node.def_id(), bodies, |hcx| {\n-            node.hash_stable(hcx, &mut stable_hasher)\n-        });\n-        let hash_without_bodies = stable_hasher.finish();\n-        (hash_including_bodies, hash_without_bodies)\n+        self.tcx.with_stable_hashing_context(|mut hcx| {\n+            let mut stable_hasher = StableHasher::new();\n+            hcx.with_hir_bodies(true, node.def_id(), bodies, |hcx| {\n+                node.hash_stable(hcx, &mut stable_hasher)\n+            });\n+            let hash_including_bodies = stable_hasher.finish();\n+            let mut stable_hasher = StableHasher::new();\n+            hcx.with_hir_bodies(false, node.def_id(), bodies, |hcx| {\n+                node.hash_stable(hcx, &mut stable_hasher)\n+            });\n+            let hash_without_bodies = stable_hasher.finish();\n+            (hash_including_bodies, hash_without_bodies)\n+        })\n     }\n \n     /// This method allocates a new `HirId` for the given `NodeId` and stores it in\n@@ -703,12 +686,9 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         span: Span,\n         allow_internal_unstable: Option<Lrc<[Symbol]>>,\n     ) -> Span {\n-        span.mark_with_reason(\n-            allow_internal_unstable,\n-            reason,\n-            self.sess.edition(),\n-            self.create_stable_hashing_context(),\n-        )\n+        self.tcx.with_stable_hashing_context(|hcx| {\n+            span.mark_with_reason(allow_internal_unstable, reason, self.sess.edition(), hcx)\n+        })\n     }\n \n     /// Intercept all spans entering HIR."}, {"sha": "69ad623b7ea864b3eda089500698fa72cd122236", "filename": "compiler/rustc_hir/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/250c71b85d0eed22982ef2b2db92fd5e63772c42/compiler%2Frustc_hir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/250c71b85d0eed22982ef2b2db92fd5e63772c42/compiler%2Frustc_hir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2FCargo.toml?ref=250c71b85d0eed22982ef2b2db92fd5e63772c42", "patch": "@@ -7,6 +7,7 @@ edition = \"2021\"\n doctest = false\n \n [dependencies]\n+rustc_arena = { path = \"../rustc_arena\" }\n rustc_target = { path = \"../rustc_target\" }\n rustc_macros = { path = \"../rustc_macros\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }"}, {"sha": "a6d10f3adae9f510510e7c69f041f8b756ca242b", "filename": "compiler/rustc_hir/src/arena.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/250c71b85d0eed22982ef2b2db92fd5e63772c42/compiler%2Frustc_hir%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/250c71b85d0eed22982ef2b2db92fd5e63772c42/compiler%2Frustc_hir%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Farena.rs?ref=250c71b85d0eed22982ef2b2db92fd5e63772c42", "patch": "@@ -9,7 +9,7 @@ macro_rules! arena_types {\n             // HIR types\n             [] hir_krate: rustc_hir::Crate<'tcx>,\n             [] arm: rustc_hir::Arm<'tcx>,\n-            [] asm_operand: (rustc_hir::InlineAsmOperand<'tcx>, Span),\n+            [] asm_operand: (rustc_hir::InlineAsmOperand<'tcx>, rustc_span::Span),\n             [] asm_template: rustc_ast::InlineAsmTemplatePiece,\n             [] attribute: rustc_ast::Attribute,\n             [] block: rustc_hir::Block<'tcx>,"}, {"sha": "0f9e6fa7b98951648a32d3b3c52515bad42e9218", "filename": "compiler/rustc_hir/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/250c71b85d0eed22982ef2b2db92fd5e63772c42/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/250c71b85d0eed22982ef2b2db92fd5e63772c42/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flib.rs?ref=250c71b85d0eed22982ef2b2db92fd5e63772c42", "patch": "@@ -18,6 +18,8 @@ extern crate rustc_macros;\n #[macro_use]\n extern crate rustc_data_structures;\n \n+extern crate self as rustc_hir;\n+\n mod arena;\n pub mod def;\n pub mod def_path_hash_map;\n@@ -41,3 +43,5 @@ pub use hir_id::*;\n pub use lang_items::{LangItem, LanguageItems};\n pub use stable_hash_impls::HashStableContext;\n pub use target::{MethodKind, Target};\n+\n+arena_types!(rustc_arena::declare_arena);"}, {"sha": "b7d1d6edfaa7b5dcf8be794b9ba7ed44ddfd54e4", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 6, "deletions": 47, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/250c71b85d0eed22982ef2b2db92fd5e63772c42/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/250c71b85d0eed22982ef2b2db92fd5e63772c42/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=250c71b85d0eed22982ef2b2db92fd5e63772c42", "patch": "@@ -14,7 +14,6 @@ use rustc_errors::{Applicability, ErrorGuaranteed, MultiSpan, PResult};\n use rustc_expand::base::{ExtCtxt, LintStoreExpand, ResolverExpand};\n use rustc_hir::def_id::{StableCrateId, LOCAL_CRATE};\n use rustc_hir::definitions::Definitions;\n-use rustc_hir::Crate;\n use rustc_lint::{EarlyCheckNode, LintStore};\n use rustc_metadata::creader::CStore;\n use rustc_metadata::{encode_metadata, EncodedMetadata};\n@@ -482,37 +481,6 @@ pub fn configure_and_expand(\n     Ok(krate)\n }\n \n-fn lower_to_hir<'tcx>(\n-    sess: &Session,\n-    definitions: &mut Definitions,\n-    cstore: &CrateStoreDyn,\n-    resolutions: &ty::ResolverOutputs,\n-    resolver: ty::ResolverAstLowering,\n-    krate: Rc<ast::Crate>,\n-    arena: &'tcx rustc_ast_lowering::Arena<'tcx>,\n-) -> &'tcx Crate<'tcx> {\n-    // Lower AST to HIR.\n-    let hir_crate = rustc_ast_lowering::lower_crate(\n-        sess,\n-        &krate,\n-        definitions,\n-        cstore,\n-        resolutions,\n-        resolver,\n-        arena,\n-    );\n-\n-    // Drop AST to free memory\n-    sess.time(\"drop_ast\", || std::mem::drop(krate));\n-\n-    // Discard hygiene data, which isn't required after lowering to HIR.\n-    if !sess.opts.debugging_opts.keep_hygiene_data {\n-        rustc_span::hygiene::clear_syntax_context_map();\n-    }\n-\n-    hir_crate\n-}\n-\n // Returns all the paths that correspond to generated files.\n fn generated_output_paths(\n     sess: &Session,\n@@ -777,6 +745,7 @@ pub fn prepare_outputs(\n pub static DEFAULT_QUERY_PROVIDERS: LazyLock<Providers> = LazyLock::new(|| {\n     let providers = &mut Providers::default();\n     providers.analysis = analysis;\n+    providers.hir_crate = rustc_ast_lowering::lower_to_hir;\n     proc_macro_decls::provide(providers);\n     rustc_const_eval::provide(providers);\n     rustc_middle::hir::provide(providers);\n@@ -823,37 +792,25 @@ impl<'tcx> QueryContext<'tcx> {\n pub fn create_global_ctxt<'tcx>(\n     compiler: &'tcx Compiler,\n     lint_store: Lrc<LintStore>,\n-    krate: Rc<ast::Crate>,\n+    krate: Lrc<ast::Crate>,\n     dep_graph: DepGraph,\n     resolver: Rc<RefCell<BoxedResolver>>,\n     outputs: OutputFilenames,\n     crate_name: &str,\n     queries: &'tcx OnceCell<TcxQueries<'tcx>>,\n     global_ctxt: &'tcx OnceCell<GlobalCtxt<'tcx>>,\n     arena: &'tcx WorkerLocal<Arena<'tcx>>,\n-    hir_arena: &'tcx WorkerLocal<rustc_ast_lowering::Arena<'tcx>>,\n+    hir_arena: &'tcx WorkerLocal<rustc_hir::Arena<'tcx>>,\n ) -> QueryContext<'tcx> {\n     // We're constructing the HIR here; we don't care what we will\n     // read, since we haven't even constructed the *input* to\n     // incr. comp. yet.\n     dep_graph.assert_ignored();\n \n-    let (mut definitions, cstore, resolver_outputs, resolver_for_lowering) =\n+    let (definitions, cstore, resolver_outputs, resolver_for_lowering) =\n         BoxedResolver::to_resolver_outputs(resolver);\n \n     let sess = &compiler.session();\n-\n-    // Lower AST to HIR.\n-    let krate = lower_to_hir(\n-        sess,\n-        &mut definitions,\n-        &*cstore,\n-        &resolver_outputs,\n-        resolver_for_lowering,\n-        krate,\n-        hir_arena,\n-    );\n-\n     let query_result_on_disk_cache = rustc_incremental::load_query_result_cache(sess);\n \n     let codegen_backend = compiler.codegen_backend();\n@@ -877,9 +834,11 @@ pub fn create_global_ctxt<'tcx>(\n                 sess,\n                 lint_store,\n                 arena,\n+                hir_arena,\n                 definitions,\n                 cstore,\n                 resolver_outputs,\n+                resolver_for_lowering,\n                 krate,\n                 dep_graph,\n                 queries.on_disk_cache.as_ref().map(OnDiskCache::as_dyn),"}, {"sha": "8ffb1ad05399427d5f866b813d741965db17bacc", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/250c71b85d0eed22982ef2b2db92fd5e63772c42/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/250c71b85d0eed22982ef2b2db92fd5e63772c42/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=250c71b85d0eed22982ef2b2db92fd5e63772c42", "patch": "@@ -72,13 +72,13 @@ pub struct Queries<'tcx> {\n     queries: OnceCell<TcxQueries<'tcx>>,\n \n     arena: WorkerLocal<Arena<'tcx>>,\n-    hir_arena: WorkerLocal<rustc_ast_lowering::Arena<'tcx>>,\n+    hir_arena: WorkerLocal<rustc_hir::Arena<'tcx>>,\n \n     dep_graph_future: Query<Option<DepGraphFuture>>,\n     parse: Query<ast::Crate>,\n     crate_name: Query<String>,\n     register_plugins: Query<(ast::Crate, Lrc<LintStore>)>,\n-    expansion: Query<(Rc<ast::Crate>, Rc<RefCell<BoxedResolver>>, Lrc<LintStore>)>,\n+    expansion: Query<(Lrc<ast::Crate>, Rc<RefCell<BoxedResolver>>, Lrc<LintStore>)>,\n     dep_graph: Query<DepGraph>,\n     prepare_outputs: Query<OutputFilenames>,\n     global_ctxt: Query<QueryContext<'tcx>>,\n@@ -92,7 +92,7 @@ impl<'tcx> Queries<'tcx> {\n             gcx: OnceCell::new(),\n             queries: OnceCell::new(),\n             arena: WorkerLocal::new(|_| Arena::default()),\n-            hir_arena: WorkerLocal::new(|_| rustc_ast_lowering::Arena::default()),\n+            hir_arena: WorkerLocal::new(|_| rustc_hir::Arena::default()),\n             dep_graph_future: Default::default(),\n             parse: Default::default(),\n             crate_name: Default::default(),\n@@ -164,7 +164,7 @@ impl<'tcx> Queries<'tcx> {\n \n     pub fn expansion(\n         &self,\n-    ) -> Result<&Query<(Rc<ast::Crate>, Rc<RefCell<BoxedResolver>>, Lrc<LintStore>)>> {\n+    ) -> Result<&Query<(Lrc<ast::Crate>, Rc<RefCell<BoxedResolver>>, Lrc<LintStore>)>> {\n         tracing::trace!(\"expansion\");\n         self.expansion.compute(|| {\n             let crate_name = self.crate_name()?.peek().clone();\n@@ -180,7 +180,7 @@ impl<'tcx> Queries<'tcx> {\n             let krate = resolver.access(|resolver| {\n                 passes::configure_and_expand(sess, &lint_store, krate, &crate_name, resolver)\n             })?;\n-            Ok((Rc::new(krate), Rc::new(RefCell::new(resolver)), lint_store))\n+            Ok((Lrc::new(krate), Rc::new(RefCell::new(resolver)), lint_store))\n         })\n     }\n "}, {"sha": "27f67207209dd81cc275b3f1cb9a7e0bac5c5860", "filename": "compiler/rustc_lint/src/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/250c71b85d0eed22982ef2b2db92fd5e63772c42/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/250c71b85d0eed22982ef2b2db92fd5e63772c42/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flate.rs?ref=250c71b85d0eed22982ef2b2db92fd5e63772c42", "patch": "@@ -34,7 +34,7 @@ use tracing::debug;\n \n /// Extract the `LintStore` from the query context.\n /// This function exists because we've erased `LintStore` as `dyn Any` in the context.\n-pub(crate) fn unerased_lint_store(tcx: TyCtxt<'_>) -> &LintStore {\n+pub fn unerased_lint_store(tcx: TyCtxt<'_>) -> &LintStore {\n     let store: &dyn Any = &*tcx.lint_store;\n     store.downcast_ref().unwrap()\n }"}, {"sha": "aaee0caa070e72d83816116aa6aa590282617f4c", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/250c71b85d0eed22982ef2b2db92fd5e63772c42/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/250c71b85d0eed22982ef2b2db92fd5e63772c42/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=250c71b85d0eed22982ef2b2db92fd5e63772c42", "patch": "@@ -99,7 +99,7 @@ pub use builtin::SoftLints;\n pub use context::{CheckLintNameResult, FindLintError, LintStore};\n pub use context::{EarlyContext, LateContext, LintContext};\n pub use early::{check_ast_node, EarlyCheckNode};\n-pub use late::check_crate;\n+pub use late::{check_crate, unerased_lint_store};\n pub use passes::{EarlyLintPass, LateLintPass};\n pub use rustc_session::lint::Level::{self, *};\n pub use rustc_session::lint::{BufferedEarlyLint, FutureIncompatibleInfo, Lint, LintId};"}, {"sha": "427c9df02848050704b9a28467575923a93c995a", "filename": "compiler/rustc_middle/src/hir/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/250c71b85d0eed22982ef2b2db92fd5e63772c42/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/250c71b85d0eed22982ef2b2db92fd5e63772c42/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs?ref=250c71b85d0eed22982ef2b2db92fd5e63772c42", "patch": "@@ -102,7 +102,6 @@ pub fn provide(providers: &mut Providers) {\n         let hir = tcx.hir();\n         hir.get_module_parent_node(hir.local_def_id_to_hir_id(id))\n     };\n-    providers.hir_crate = |tcx, ()| tcx.untracked_crate;\n     providers.hir_crate_items = map::hir_crate_items;\n     providers.crate_hash = map::crate_hash;\n     providers.hir_module_items = map::hir_module_items;"}, {"sha": "267395269e2512a76b508b78ef24b310bd620673", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/250c71b85d0eed22982ef2b2db92fd5e63772c42/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/250c71b85d0eed22982ef2b2db92fd5e63772c42/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=250c71b85d0eed22982ef2b2db92fd5e63772c42", "patch": "@@ -32,6 +32,12 @@ rustc_queries! {\n         desc { \"get the resolver outputs\" }\n     }\n \n+    query resolver_for_lowering(_: ()) -> &'tcx Steal<ty::ResolverAstLowering> {\n+        eval_always\n+        no_hash\n+        desc { \"get the resolver for lowering\" }\n+    }\n+\n     /// Return the span for a definition.\n     /// Contrary to `def_span` below, this query returns the full absolute span of the definition.\n     /// This span is meant for dep-tracking rather than diagnostics. It should not be used outside\n@@ -46,7 +52,8 @@ rustc_queries! {\n     /// This is because the `hir_crate` query gives you access to all other items.\n     /// To avoid this fate, do not call `tcx.hir().krate()`; instead,\n     /// prefer wrappers like `tcx.visit_all_items_in_krate()`.\n-    query hir_crate(key: ()) -> &'tcx Crate<'tcx> {\n+    query hir_crate(key: ()) -> Crate<'tcx> {\n+        storage(ArenaCacheSelector<'tcx>)\n         eval_always\n         desc { \"get the crate HIR\" }\n     }"}, {"sha": "a25523c236b5c512f93ad4400d1dc0e14a962e73", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/250c71b85d0eed22982ef2b2db92fd5e63772c42/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/250c71b85d0eed22982ef2b2db92fd5e63772c42/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=250c71b85d0eed22982ef2b2db92fd5e63772c42", "patch": "@@ -1049,6 +1049,7 @@ impl<'tcx> Deref for TyCtxt<'tcx> {\n \n pub struct GlobalCtxt<'tcx> {\n     pub arena: &'tcx WorkerLocal<Arena<'tcx>>,\n+    pub hir_arena: &'tcx WorkerLocal<hir::Arena<'tcx>>,\n \n     interners: CtxtInterners<'tcx>,\n \n@@ -1078,8 +1079,8 @@ pub struct GlobalCtxt<'tcx> {\n \n     /// Output of the resolver.\n     pub(crate) untracked_resolutions: ty::ResolverOutputs,\n-\n-    pub(crate) untracked_crate: &'tcx hir::Crate<'tcx>,\n+    untracked_resolver_for_lowering: Steal<ty::ResolverAstLowering>,\n+    pub untracked_crate: Steal<Lrc<ast::Crate>>,\n \n     /// This provides access to the incremental compilation on-disk cache for query results.\n     /// Do not access this directly. It is only meant to be used by\n@@ -1237,10 +1238,12 @@ impl<'tcx> TyCtxt<'tcx> {\n         s: &'tcx Session,\n         lint_store: Lrc<dyn Any + sync::Send + sync::Sync>,\n         arena: &'tcx WorkerLocal<Arena<'tcx>>,\n+        hir_arena: &'tcx WorkerLocal<hir::Arena<'tcx>>,\n         definitions: Definitions,\n         cstore: Box<CrateStoreDyn>,\n         untracked_resolutions: ty::ResolverOutputs,\n-        krate: &'tcx hir::Crate<'tcx>,\n+        untracked_resolver_for_lowering: ty::ResolverAstLowering,\n+        krate: Lrc<ast::Crate>,\n         dep_graph: DepGraph,\n         on_disk_cache: Option<&'tcx dyn OnDiskCache<'tcx>>,\n         queries: &'tcx dyn query::QueryEngine<'tcx>,\n@@ -1267,16 +1270,18 @@ impl<'tcx> TyCtxt<'tcx> {\n             sess: s,\n             lint_store,\n             arena,\n+            hir_arena,\n             interners,\n             dep_graph,\n             definitions: RwLock::new(definitions),\n             cstore,\n-            untracked_resolutions,\n             prof: s.prof.clone(),\n             types: common_types,\n             lifetimes: common_lifetimes,\n             consts: common_consts,\n-            untracked_crate: krate,\n+            untracked_resolutions,\n+            untracked_resolver_for_lowering: Steal::new(untracked_resolver_for_lowering),\n+            untracked_crate: Steal::new(krate),\n             on_disk_cache,\n             queries,\n             query_caches: query::QueryCaches::default(),\n@@ -2996,6 +3001,7 @@ fn ptr_eq<T, U>(t: *const T, u: *const U) -> bool {\n \n pub fn provide(providers: &mut ty::query::Providers) {\n     providers.resolutions = |tcx, ()| &tcx.untracked_resolutions;\n+    providers.resolver_for_lowering = |tcx, ()| &tcx.untracked_resolver_for_lowering;\n     providers.module_reexports =\n         |tcx, id| tcx.resolutions(()).reexport_map.get(&id).map(|v| &v[..]);\n     providers.crate_name = |tcx, id| {"}, {"sha": "843f6f9d703674e3eabe10e8f7c695675f99161d", "filename": "compiler/rustc_query_system/src/ich/hcx.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/250c71b85d0eed22982ef2b2db92fd5e63772c42/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/250c71b85d0eed22982ef2b2db92fd5e63772c42/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fhcx.rs?ref=250c71b85d0eed22982ef2b2db92fd5e63772c42", "patch": "@@ -119,13 +119,13 @@ impl<'a> StableHashingContext<'a> {\n         &mut self,\n         hash_bodies: bool,\n         owner: LocalDefId,\n-        bodies: &'a SortedMap<hir::ItemLocalId, &'a hir::Body<'a>>,\n-        f: impl FnOnce(&mut Self),\n+        bodies: &SortedMap<hir::ItemLocalId, &hir::Body<'_>>,\n+        f: impl FnOnce(&mut StableHashingContext<'_>),\n     ) {\n-        let prev = self.body_resolver;\n-        self.body_resolver = BodyResolver::Traverse { hash_bodies, owner, bodies };\n-        f(self);\n-        self.body_resolver = prev;\n+        f(&mut StableHashingContext {\n+            body_resolver: BodyResolver::Traverse { hash_bodies, owner, bodies },\n+            ..self.clone()\n+        });\n     }\n \n     #[inline]"}]}