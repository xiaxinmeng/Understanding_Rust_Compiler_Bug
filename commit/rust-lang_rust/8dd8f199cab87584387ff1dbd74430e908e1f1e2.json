{"sha": "8dd8f199cab87584387ff1dbd74430e908e1f1e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkZDhmMTk5Y2FiODc1ODQzODdmZjFkYmQ3NDQzMGU5MDhlMWYxZTI=", "commit": {"author": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-01T23:28:33Z"}, "committer": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-27T21:23:32Z"}, "message": "Update to support the updated API.", "tree": {"sha": "c95b687984bf7cf860036ae7224d83c116c52ad8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c95b687984bf7cf860036ae7224d83c116c52ad8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8dd8f199cab87584387ff1dbd74430e908e1f1e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8dd8f199cab87584387ff1dbd74430e908e1f1e2", "html_url": "https://github.com/rust-lang/rust/commit/8dd8f199cab87584387ff1dbd74430e908e1f1e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8dd8f199cab87584387ff1dbd74430e908e1f1e2/comments", "author": null, "committer": null, "parents": [{"sha": "58a6a2729aa03ef8ca1c68f9c0396fafa1208f58", "url": "https://api.github.com/repos/rust-lang/rust/commits/58a6a2729aa03ef8ca1c68f9c0396fafa1208f58", "html_url": "https://github.com/rust-lang/rust/commit/58a6a2729aa03ef8ca1c68f9c0396fafa1208f58"}], "stats": {"total": 22, "additions": 16, "deletions": 6}, "files": [{"sha": "e6fea672c608cfba87e2fe9579af4a76d16d1143", "filename": "src/machine.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8dd8f199cab87584387ff1dbd74430e908e1f1e2/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dd8f199cab87584387ff1dbd74430e908e1f1e2/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=8dd8f199cab87584387ff1dbd74430e908e1f1e2", "patch": "@@ -464,8 +464,13 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n         }\n     }\n \n-    fn resolve_thread_local_allocation_id(extra: &Self::MemoryExtra, id: AllocId) -> AllocId {\n-        extra.tls.resolve_allocation(id)\n+    #[inline(always)]\n+    fn resolve_maybe_global_alloc(\n+        tcx: ty::query::TyCtxtAt<'tcx>,\n+        extra: &Self::MemoryExtra,\n+        id: AllocId,\n+    ) -> Option<mir::interpret::GlobalAlloc<'tcx>> {\n+        extra.tls.resolve_allocation(*tcx, id)\n     }\n \n     fn init_allocation_extra<'b>("}, {"sha": "618713e3c3deaf5c2671167efa2276abeb7ac456", "filename": "src/threads.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8dd8f199cab87584387ff1dbd74430e908e1f1e2/src%2Fthreads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dd8f199cab87584387ff1dbd74430e908e1f1e2/src%2Fthreads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fthreads.rs?ref=8dd8f199cab87584387ff1dbd74430e908e1f1e2", "patch": "@@ -5,9 +5,10 @@ use std::collections::hash_map::Entry;\n \n use log::trace;\n \n-use rustc_middle::ty;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_index::vec::{Idx, IndexVec};\n+use rustc_middle::mir;\n+use rustc_middle::ty;\n \n use crate::*;\n \n@@ -234,13 +235,17 @@ impl ThreadLocalStorage {\n     }\n     /// For thread local allocation identifier `alloc_id`, retrieve the original\n     /// static allocation identifier from which it was created.\n-    pub fn resolve_allocation(&self, alloc_id: AllocId) -> AllocId {\n+    pub fn resolve_allocation<'tcx>(\n+        &self,\n+        tcx: ty::TyCtxt<'tcx>,\n+        alloc_id: AllocId,\n+    ) -> Option<mir::interpret::GlobalAlloc<'tcx>> {\n         trace!(\"resolve_allocation(alloc_id: {:?})\", alloc_id);\n         if let Some(original_id) = self.thread_local_origin.borrow().get(&alloc_id) {\n             trace!(\"resolve_allocation(alloc_id: {:?}) -> {:?}\", alloc_id, original_id);\n-            *original_id\n+            tcx.alloc_map.lock().get(*original_id)\n         } else {\n-            alloc_id\n+            tcx.alloc_map.lock().get(alloc_id)\n         }\n     }\n     /// Set which thread is currently active."}]}