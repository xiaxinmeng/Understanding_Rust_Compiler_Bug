{"sha": "502f9acbe9a41c64c92a3eba8186e8b44963fc76", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwMmY5YWNiZTlhNDFjNjRjOTJhM2ViYTgxODZlOGI0NDk2M2ZjNzY=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-08-14T22:20:22Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-08-17T21:48:44Z"}, "message": "Revamp SIMD intrinsic trans error handling.\n\nFactor out common pieces, follow `expected ..., found ...` convention\neverywhere.", "tree": {"sha": "d3c3e2c5c830c22441c074f4abb658b2992d1048", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3c3e2c5c830c22441c074f4abb658b2992d1048"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/502f9acbe9a41c64c92a3eba8186e8b44963fc76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/502f9acbe9a41c64c92a3eba8186e8b44963fc76", "html_url": "https://github.com/rust-lang/rust/commit/502f9acbe9a41c64c92a3eba8186e8b44963fc76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/502f9acbe9a41c64c92a3eba8186e8b44963fc76/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "891c91438da66e967314f74f7ad5c06ddf56d917", "url": "https://api.github.com/repos/rust-lang/rust/commits/891c91438da66e967314f74f7ad5c06ddf56d917", "html_url": "https://github.com/rust-lang/rust/commit/891c91438da66e967314f74f7ad5c06ddf56d917"}], "stats": {"total": 260, "additions": 129, "deletions": 131}, "files": [{"sha": "185a5cb47466e0222e71cd4a1f364278fd735ec1", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 71, "deletions": 82, "changes": 153, "blob_url": "https://github.com/rust-lang/rust/blob/502f9acbe9a41c64c92a3eba8186e8b44963fc76/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/502f9acbe9a41c64c92a3eba8186e8b44963fc76/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=502f9acbe9a41c64c92a3eba8186e8b44963fc76", "patch": "@@ -1329,14 +1329,33 @@ fn generic_simd_intrinsic<'blk, 'tcx, 'a>\n      call_debug_location: DebugLoc,\n      call_info: NodeIdAndSpan) -> ValueRef\n {\n+    // macros for error handling:\n+    macro_rules! emit_error {\n+        ($msg: tt) => {\n+            emit_error!($msg, )\n+        };\n+        ($msg: tt, $($fmt: tt)*) => {\n+            bcx.sess().span_err(call_info.span,\n+                                &format!(concat!(\"invalid monomorphization of `{}` intrinsic: \",\n+                                                 $msg),\n+                                         name, $($fmt)*));\n+        }\n+    }\n     macro_rules! require {\n         ($cond: expr, $($fmt: tt)*) => {\n             if !$cond {\n-                bcx.sess().span_err(call_info.span, &format!($($fmt)*));\n+                emit_error!($($fmt)*);\n                 return C_null(llret_ty)\n             }\n         }\n     }\n+    macro_rules! require_simd {\n+        ($ty: expr, $position: expr) => {\n+            require!($ty.is_simd(), \"expected SIMD {} type, found non-SIMD `{}`\", $position, $ty)\n+        }\n+    }\n+\n+\n \n     let tcx = bcx.tcx();\n     let arg_tys = match callee_ty.sty {\n@@ -1346,6 +1365,12 @@ fn generic_simd_intrinsic<'blk, 'tcx, 'a>\n         _ => unreachable!()\n     };\n \n+    // every intrinsic takes a SIMD vector as its first argument\n+    require_simd!(arg_tys[0], \"input\");\n+    let in_ty = arg_tys[0];\n+    let in_elem = arg_tys[0].simd_type(tcx);\n+    let in_len = arg_tys[0].simd_size(tcx);\n+\n     let comparison = match name {\n         \"simd_eq\" => Some(ast::BiEq),\n         \"simd_ne\" => Some(ast::BiNe),\n@@ -1357,30 +1382,23 @@ fn generic_simd_intrinsic<'blk, 'tcx, 'a>\n     };\n \n     if let Some(cmp_op) = comparison {\n-        assert_eq!(arg_tys.len(), 2);\n-        require!(arg_tys[0].is_simd(),\n-                 \"SIMD comparison intrinsic monomorphized for non-SIMD argument type `{}`\",\n-                 arg_tys[0]);\n-        require!(ret_ty.is_simd(),\n-                 \"SIMD comparison intrinsic monomorphized for non-SIMD return type `{}`\",\n-                 ret_ty);\n-\n-        let in_len = arg_tys[0].simd_size(tcx);\n+        require_simd!(ret_ty, \"return\");\n+\n         let out_len = ret_ty.simd_size(tcx);\n         require!(in_len == out_len,\n-                 \"SIMD cast intrinsic monomorphized with input type `{}` and \\\n-                  return type `{}` with different lengths: {} vs. {}\",\n-                 arg_tys[0],\n-                 ret_ty,\n-                 in_len,\n-                 out_len);\n+                 \"expected return type with length {} (same as input type `{}`), \\\n+                  found `{}` with length {}\",\n+                 in_len, in_ty,\n+                 ret_ty, out_len);\n         require!(llret_ty.element_type().kind() == llvm::Integer,\n-                 \"SIMD comparison intrinsic monomorphized with non-integer return\");\n+                 \"expected return type with integer elements, found `{}` with non-integer `{}`\",\n+                 ret_ty,\n+                 ret_ty.simd_type(tcx));\n \n         return compare_simd_types(bcx,\n                                   llargs[0],\n                                   llargs[1],\n-                                  arg_tys[0].simd_type(tcx),\n+                                  in_elem,\n                                   llret_ty,\n                                   cmp_op,\n                                   call_debug_location)\n@@ -1390,24 +1408,20 @@ fn generic_simd_intrinsic<'blk, 'tcx, 'a>\n         let n: usize = match name[\"simd_shuffle\".len()..].parse() {\n             Ok(n) => n,\n             Err(_) => tcx.sess.span_bug(call_info.span,\n-                                          \"bad `simd_shuffle` instruction only caught in trans?\")\n+                                        \"bad `simd_shuffle` instruction only caught in trans?\")\n         };\n \n-        require!(arg_tys[0].is_simd(),\n-                 \"SIMD shuffle intrinsic monomorphized with non-SIMD input type `{}`\",\n-                 arg_tys[0]);\n-        require!(ret_ty.is_simd(),\n-                 \"SIMD shuffle intrinsic monomorphized for non-SIMD return type `{}`\",\n-                 ret_ty);\n+        require_simd!(ret_ty, \"return\");\n \n-        let in_len = arg_tys[0].simd_size(tcx);\n         let out_len = ret_ty.simd_size(tcx);\n         require!(out_len == n,\n-                 \"SIMD shuffle intrinsic monomorphized with return type of length {} (expected {})\",\n-                 out_len, n);\n-        require!(arg_tys[0].simd_type(tcx) == ret_ty.simd_type(tcx),\n-                 \"SIMD shuffle intrinsic monomorphized with different \\\n-                  input and return element types\");\n+                 \"expected return type of length {}, found `{}` with length {}\",\n+                 n, ret_ty, out_len);\n+        require!(in_elem == ret_ty.simd_type(tcx),\n+                 \"expected return element type `{}` (element of input `{}`), \\\n+                  found `{}` with element type `{}`\",\n+                 in_elem, in_ty,\n+                 ret_ty, ret_ty.simd_type(tcx));\n \n         let total_len = in_len as u64 * 2;\n \n@@ -1425,17 +1439,12 @@ fn generic_simd_intrinsic<'blk, 'tcx, 'a>\n                 let c = const_to_opt_uint(val);\n                 match c {\n                     None => {\n-                        bcx.sess().span_err(call_info.span,\n-                                            &format!(\"SIMD shuffle intrinsic argument #{} \\\n-                                                      is not a constant\",\n-                                                     arg_idx));\n+                        emit_error!(\"shuffle index #{} is not a constant\", arg_idx);\n                         None\n                     }\n                     Some(idx) if idx >= total_len => {\n-                        bcx.sess().span_err(call_info.span,\n-                                            &format!(\"SIMD shuffle intrinsic argument #{} \\\n-                                                      is out of bounds (limit {})\",\n-                                                     arg_idx, total_len));\n+                        emit_error!(\"shuffle index #{} is out of bounds (limit {})\",\n+                                    arg_idx, total_len);\n                         None\n                     }\n                     Some(idx) => Some(C_i32(bcx.ccx(), idx as i32)),\n@@ -1451,45 +1460,32 @@ fn generic_simd_intrinsic<'blk, 'tcx, 'a>\n     }\n \n     if name == \"simd_insert\" {\n-        require!(arg_tys[0].is_simd(),\n-                 \"SIMD insert intrinsic monomorphized for non-SIMD input type\");\n-\n-        let elem_ty = arg_tys[0].simd_type(tcx);\n-        require!(arg_tys[2] == elem_ty,\n-                 \"SIMD insert intrinsic monomorphized with inserted type not SIMD element type\");\n+        require!(in_elem == arg_tys[2],\n+                 \"expected inserted type `{}` (element of input `{}`), found `{}`\",\n+                 in_elem, in_ty, arg_tys[2]);\n         return InsertElement(bcx, llargs[0], llargs[2], llargs[1])\n     }\n     if name == \"simd_extract\" {\n-        require!(arg_tys[0].is_simd(),\n-                 \"SIMD insert intrinsic monomorphized for non-SIMD input type\");\n-\n-        let elem_ty = arg_tys[0].simd_type(tcx);\n-        require!(ret_ty == elem_ty,\n-                 \"SIMD insert intrinsic monomorphized with returned type not SIMD element type\");\n+        require!(ret_ty == in_elem,\n+                 \"expected return type `{}` (element of input `{}`), found `{}`\",\n+                 in_elem, in_ty, ret_ty);\n         return ExtractElement(bcx, llargs[0], llargs[1])\n     }\n \n     if name == \"simd_cast\" {\n-        require!(arg_tys[0].is_simd(),\n-                 \"SIMD cast intrinsic monomorphized with non-SIMD input type `{}`\",\n-                 arg_tys[0]);\n-        require!(ret_ty.is_simd(),\n-                 \"SIMD cast intrinsic monomorphized with non-SIMD return type `{}`\",\n-                 ret_ty);\n-        require!(arg_tys[0].simd_size(tcx) == ret_ty.simd_size(tcx),\n-                 \"SIMD cast intrinsic monomorphized with input type `{}` and \\\n-                  return type `{}` with different lengths: {} vs. {}\",\n-                 arg_tys[0],\n-                 ret_ty,\n-                 arg_tys[0].simd_size(tcx),\n-                 ret_ty.simd_size(tcx));\n+        require_simd!(ret_ty, \"return\");\n+        let out_len = ret_ty.simd_size(tcx);\n+        require!(in_len == out_len,\n+                 \"expected return type with length {} (same as input type `{}`), \\\n+                  found `{}` with length {}\",\n+                 in_len, in_ty,\n+                 ret_ty, out_len);\n         // casting cares about nominal type, not just structural type\n-        let in_ = arg_tys[0].simd_type(tcx);\n-        let out = ret_ty.simd_type(tcx);\n+        let out_elem = ret_ty.simd_type(tcx);\n \n-        if in_ == out { return llargs[0]; }\n+        if in_elem == out_elem { return llargs[0]; }\n \n-        match (&in_.sty, &out.sty) {\n+        match (&in_elem.sty, &out_elem.sty) {\n             (&ty::TyInt(lhs), &ty::TyInt(rhs)) => {\n                 match (lhs, rhs) {\n                     (ast::TyI8, ast::TyI8) |\n@@ -1605,20 +1601,15 @@ fn generic_simd_intrinsic<'blk, 'tcx, 'a>\n             _ => {}\n         }\n         require!(false,\n-                 \"SIMD cast intrinsic monomorphized with incompatible cast \\\n-                  from `{}` (element `{}`)to `{}` (element `{}`)\",\n-                 arg_tys[0], in_,\n-                 ret_ty, out);\n+                 \"unsupported cast from `{}` with element `{}` to `{}` with element `{}`\",\n+                 in_ty, in_elem,\n+                 ret_ty, out_elem);\n     }\n     macro_rules! arith {\n         ($($name: ident: $($($p: ident),* => $call: expr),*;)*) => {\n             $(\n                 if name == stringify!($name) {\n-                    require!(arg_tys[0].is_simd(),\n-                             \"`{}` intrinsic monomorphized with non-SIMD type `{}`\",\n-                             name, arg_tys[0]);\n-                    let in_ = arg_tys[0].simd_type(tcx);\n-                    match in_.sty {\n+                    match in_elem.sty {\n                         $(\n                             $(ty::$p(_))|* => {\n                                 return $call(bcx, llargs[0], llargs[1], call_debug_location)\n@@ -1627,11 +1618,9 @@ fn generic_simd_intrinsic<'blk, 'tcx, 'a>\n                         _ => {},\n                     }\n                     require!(false,\n-                             \"`{}` intrinsic monomorphized with SIMD vector `{}` \\\n-                              with unsupported element type `{}`\",\n-                             name,\n-                             arg_tys[0],\n-                             in_)\n+                             \"unsupported operation on `{}` with element `{}`\",\n+                             in_ty,\n+                             in_elem)\n                 })*\n         }\n     }"}, {"sha": "35c368f4cbedb5bb399156b590bbc7ad1f43dfdd", "filename": "src/test/compile-fail/simd-intrinsic-generic-arithmetic.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/502f9acbe9a41c64c92a3eba8186e8b44963fc76/src%2Ftest%2Fcompile-fail%2Fsimd-intrinsic-generic-arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/502f9acbe9a41c64c92a3eba8186e8b44963fc76/src%2Ftest%2Fcompile-fail%2Fsimd-intrinsic-generic-arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsimd-intrinsic-generic-arithmetic.rs?ref=502f9acbe9a41c64c92a3eba8186e8b44963fc76", "patch": "@@ -65,38 +65,38 @@ fn main() {\n \n \n         simd_add(0, 0);\n-        //~^ ERROR `simd_add` intrinsic monomorphized with non-SIMD type\n+        //~^ ERROR expected SIMD input type, found non-SIMD `i32`\n         simd_sub(0, 0);\n-        //~^ ERROR `simd_sub` intrinsic monomorphized with non-SIMD type\n+        //~^ ERROR expected SIMD input type, found non-SIMD `i32`\n         simd_mul(0, 0);\n-        //~^ ERROR `simd_mul` intrinsic monomorphized with non-SIMD type\n+        //~^ ERROR expected SIMD input type, found non-SIMD `i32`\n         simd_div(0, 0);\n-        //~^ ERROR `simd_div` intrinsic monomorphized with non-SIMD type\n+        //~^ ERROR expected SIMD input type, found non-SIMD `i32`\n         simd_shl(0, 0);\n-        //~^ ERROR `simd_shl` intrinsic monomorphized with non-SIMD type\n+        //~^ ERROR expected SIMD input type, found non-SIMD `i32`\n         simd_shr(0, 0);\n-        //~^ ERROR `simd_shr` intrinsic monomorphized with non-SIMD type\n+        //~^ ERROR expected SIMD input type, found non-SIMD `i32`\n         simd_and(0, 0);\n-        //~^ ERROR `simd_and` intrinsic monomorphized with non-SIMD type\n+        //~^ ERROR expected SIMD input type, found non-SIMD `i32`\n         simd_or(0, 0);\n-        //~^ ERROR `simd_or` intrinsic monomorphized with non-SIMD type\n+        //~^ ERROR expected SIMD input type, found non-SIMD `i32`\n         simd_xor(0, 0);\n-        //~^ ERROR `simd_xor` intrinsic monomorphized with non-SIMD type\n+        //~^ ERROR expected SIMD input type, found non-SIMD `i32`\n \n \n         simd_div(x, x);\n-//~^ ERROR `simd_div` intrinsic monomorphized with SIMD vector `i32x4` with unsupported element type\n+//~^ ERROR unsupported operation on `i32x4` with element `i32`\n         simd_div(y, y);\n-//~^ ERROR `simd_div` intrinsic monomorphized with SIMD vector `u32x4` with unsupported element type\n+//~^ ERROR unsupported operation on `u32x4` with element `u32`\n         simd_shl(z, z);\n-//~^ ERROR `simd_shl` intrinsic monomorphized with SIMD vector `f32x4` with unsupported element type\n+//~^ ERROR unsupported operation on `f32x4` with element `f32`\n         simd_shr(z, z);\n-//~^ ERROR `simd_shr` intrinsic monomorphized with SIMD vector `f32x4` with unsupported element type\n+//~^ ERROR unsupported operation on `f32x4` with element `f32`\n         simd_and(z, z);\n-//~^ ERROR `simd_and` intrinsic monomorphized with SIMD vector `f32x4` with unsupported element type\n+//~^ ERROR unsupported operation on `f32x4` with element `f32`\n         simd_or(z, z);\n-//~^ ERROR `simd_or` intrinsic monomorphized with SIMD vector `f32x4` with unsupported element type\n+//~^ ERROR unsupported operation on `f32x4` with element `f32`\n         simd_xor(z, z);\n-//~^ ERROR `simd_xor` intrinsic monomorphized with SIMD vector `f32x4` with unsupported element type\n+//~^ ERROR unsupported operation on `f32x4` with element `f32`\n     }\n }"}, {"sha": "4999b790b130a4e79cb9b9e4ea63b001f0ef93d8", "filename": "src/test/compile-fail/simd-intrinsic-generic-cast.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/502f9acbe9a41c64c92a3eba8186e8b44963fc76/src%2Ftest%2Fcompile-fail%2Fsimd-intrinsic-generic-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/502f9acbe9a41c64c92a3eba8186e8b44963fc76/src%2Ftest%2Fcompile-fail%2Fsimd-intrinsic-generic-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsimd-intrinsic-generic-cast.rs?ref=502f9acbe9a41c64c92a3eba8186e8b44963fc76", "patch": "@@ -40,12 +40,12 @@ fn main() {\n \n     unsafe {\n         simd_cast::<i32, i32>(0);\n-        //~^ ERROR SIMD cast intrinsic monomorphized with non-SIMD input type `i32`\n+        //~^ ERROR expected SIMD input type, found non-SIMD `i32`\n         simd_cast::<i32, i32x4>(0);\n-        //~^ ERROR SIMD cast intrinsic monomorphized with non-SIMD input type `i32`\n+        //~^ ERROR expected SIMD input type, found non-SIMD `i32`\n         simd_cast::<i32x4, i32>(x);\n-        //~^ ERROR SIMD cast intrinsic monomorphized with non-SIMD return type `i32`\n+        //~^ ERROR expected SIMD return type, found non-SIMD `i32`\n         simd_cast::<_, i32x8>(x);\n-//~^ ERROR monomorphized with input type `i32x4` and return type `i32x8` with different lengths\n+//~^ ERROR return type with length 4 (same as input type `i32x4`), found `i32x8` with length 8\n     }\n }"}, {"sha": "617b03a87117b75b3ff97d26c88c1f1b9b6ca2e0", "filename": "src/test/compile-fail/simd-intrinsic-generic-comparison.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/502f9acbe9a41c64c92a3eba8186e8b44963fc76/src%2Ftest%2Fcompile-fail%2Fsimd-intrinsic-generic-comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/502f9acbe9a41c64c92a3eba8186e8b44963fc76/src%2Ftest%2Fcompile-fail%2Fsimd-intrinsic-generic-comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsimd-intrinsic-generic-comparison.rs?ref=502f9acbe9a41c64c92a3eba8186e8b44963fc76", "patch": "@@ -34,42 +34,42 @@ fn main() {\n \n     unsafe {\n         simd_eq::<i32, i32>(0, 0);\n-        //~^ ERROR SIMD comparison intrinsic monomorphized for non-SIMD argument type\n+        //~^ ERROR expected SIMD input type, found non-SIMD `i32`\n         simd_ne::<i32, i32>(0, 0);\n-        //~^ ERROR SIMD comparison intrinsic monomorphized for non-SIMD argument type\n+        //~^ ERROR expected SIMD input type, found non-SIMD `i32`\n         simd_lt::<i32, i32>(0, 0);\n-        //~^ ERROR SIMD comparison intrinsic monomorphized for non-SIMD argument type\n+        //~^ ERROR expected SIMD input type, found non-SIMD `i32`\n         simd_le::<i32, i32>(0, 0);\n-        //~^ ERROR SIMD comparison intrinsic monomorphized for non-SIMD argument type\n+        //~^ ERROR expected SIMD input type, found non-SIMD `i32`\n         simd_gt::<i32, i32>(0, 0);\n-        //~^ ERROR SIMD comparison intrinsic monomorphized for non-SIMD argument type\n+        //~^ ERROR expected SIMD input type, found non-SIMD `i32`\n         simd_ge::<i32, i32>(0, 0);\n-        //~^ ERROR SIMD comparison intrinsic monomorphized for non-SIMD argument type\n+        //~^ ERROR expected SIMD input type, found non-SIMD `i32`\n \n         simd_eq::<_, i32>(x, x);\n-        //~^ ERROR SIMD comparison intrinsic monomorphized for non-SIMD return type\n+        //~^ ERROR expected SIMD return type, found non-SIMD `i32`\n         simd_ne::<_, i32>(x, x);\n-        //~^ ERROR SIMD comparison intrinsic monomorphized for non-SIMD return type\n+        //~^ ERROR expected SIMD return type, found non-SIMD `i32`\n         simd_lt::<_, i32>(x, x);\n-        //~^ ERROR SIMD comparison intrinsic monomorphized for non-SIMD return type\n+        //~^ ERROR expected SIMD return type, found non-SIMD `i32`\n         simd_le::<_, i32>(x, x);\n-        //~^ ERROR SIMD comparison intrinsic monomorphized for non-SIMD return type\n+        //~^ ERROR expected SIMD return type, found non-SIMD `i32`\n         simd_gt::<_, i32>(x, x);\n-        //~^ ERROR SIMD comparison intrinsic monomorphized for non-SIMD return type\n+        //~^ ERROR expected SIMD return type, found non-SIMD `i32`\n         simd_ge::<_, i32>(x, x);\n-        //~^ ERROR SIMD comparison intrinsic monomorphized for non-SIMD return type\n+        //~^ ERROR expected SIMD return type, found non-SIMD `i32`\n \n         simd_eq::<_, i16x8>(x, x);\n-//~^ ERROR monomorphized with input type `i32x4` and return type `i16x8` with different lengths\n+//~^ ERROR return type with length 4 (same as input type `i32x4`), found `i16x8` with length 8\n         simd_ne::<_, i16x8>(x, x);\n-//~^ ERROR monomorphized with input type `i32x4` and return type `i16x8` with different lengths\n+//~^ ERROR return type with length 4 (same as input type `i32x4`), found `i16x8` with length 8\n         simd_lt::<_, i16x8>(x, x);\n-//~^ ERROR monomorphized with input type `i32x4` and return type `i16x8` with different lengths\n+//~^ ERROR return type with length 4 (same as input type `i32x4`), found `i16x8` with length 8\n         simd_le::<_, i16x8>(x, x);\n-//~^ ERROR monomorphized with input type `i32x4` and return type `i16x8` with different lengths\n+//~^ ERROR return type with length 4 (same as input type `i32x4`), found `i16x8` with length 8\n         simd_gt::<_, i16x8>(x, x);\n-//~^ ERROR monomorphized with input type `i32x4` and return type `i16x8` with different lengths\n+//~^ ERROR return type with length 4 (same as input type `i32x4`), found `i16x8` with length 8\n         simd_ge::<_, i16x8>(x, x);\n-//~^ ERROR monomorphized with input type `i32x4` and return type `i16x8` with different lengths\n+//~^ ERROR return type with length 4 (same as input type `i32x4`), found `i16x8` with length 8\n     }\n }"}, {"sha": "b0198c411d5679ec1e06727969e619c9fe0fad78", "filename": "src/test/compile-fail/simd-intrinsic-generic-elements.rs", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/502f9acbe9a41c64c92a3eba8186e8b44963fc76/src%2Ftest%2Fcompile-fail%2Fsimd-intrinsic-generic-elements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/502f9acbe9a41c64c92a3eba8186e8b44963fc76/src%2Ftest%2Fcompile-fail%2Fsimd-intrinsic-generic-elements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsimd-intrinsic-generic-elements.rs?ref=502f9acbe9a41c64c92a3eba8186e8b44963fc76", "patch": "@@ -61,28 +61,37 @@ fn main() {\n \n     unsafe {\n         simd_insert(0, 0, 0);\n-        //~^ ERROR SIMD insert intrinsic monomorphized for non-SIMD input type\n+        //~^ ERROR expected SIMD input type, found non-SIMD `i32`\n         simd_insert(x, 0, 1.0);\n-        //~^ ERROR SIMD insert intrinsic monomorphized with inserted type not SIMD element type\n+        //~^ ERROR expected inserted type `i32` (element of input `i32x4`), found `f64`\n         simd_extract::<_, f32>(x, 0);\n-        //~^ ERROR SIMD insert intrinsic monomorphized with returned type not SIMD element type\n+        //~^ ERROR expected return type `i32` (element of input `i32x4`), found `f32`\n \n         simd_shuffle2::<i32, i32>(0, 0, [0; 2]);\n-        //~^ ERROR SIMD shuffle intrinsic monomorphized with non-SIMD input type\n+        //~^ ERROR expected SIMD input type, found non-SIMD `i32`\n         simd_shuffle3::<i32, i32>(0, 0, [0; 3]);\n-        //~^ ERROR SIMD shuffle intrinsic monomorphized with non-SIMD input type\n+        //~^ ERROR expected SIMD input type, found non-SIMD `i32`\n         simd_shuffle4::<i32, i32>(0, 0, [0; 4]);\n-        //~^ ERROR SIMD shuffle intrinsic monomorphized with non-SIMD input type\n+        //~^ ERROR expected SIMD input type, found non-SIMD `i32`\n         simd_shuffle8::<i32, i32>(0, 0, [0; 8]);\n-        //~^ ERROR SIMD shuffle intrinsic monomorphized with non-SIMD input type\n+        //~^ ERROR expected SIMD input type, found non-SIMD `i32`\n \n         simd_shuffle2::<_, f32x2>(x, x, [0; 2]);\n-        //~^ ERROR SIMD shuffle intrinsic monomorphized with different input and return element\n+//~^ ERROR element type `i32` (element of input `i32x4`), found `f32x2` with element type `f32`\n         simd_shuffle3::<_, f32x3>(x, x, [0; 3]);\n-        //~^ ERROR SIMD shuffle intrinsic monomorphized with different input and return element\n+//~^ ERROR element type `i32` (element of input `i32x4`), found `f32x3` with element type `f32`\n         simd_shuffle4::<_, f32x4>(x, x, [0; 4]);\n-        //~^ ERROR SIMD shuffle intrinsic monomorphized with different input and return element\n+//~^ ERROR element type `i32` (element of input `i32x4`), found `f32x4` with element type `f32`\n         simd_shuffle8::<_, f32x8>(x, x, [0; 8]);\n-        //~^ ERROR SIMD shuffle intrinsic monomorphized with different input and return element\n+//~^ ERROR element type `i32` (element of input `i32x4`), found `f32x8` with element type `f32`\n+\n+        simd_shuffle2::<_, i32x8>(x, x, [0; 2]);\n+        //~^ ERROR expected return type of length 2, found `i32x8` with length 8\n+        simd_shuffle3::<_, i32x4>(x, x, [0; 3]);\n+        //~^ ERROR expected return type of length 3, found `i32x4` with length 4\n+        simd_shuffle4::<_, i32x3>(x, x, [0; 4]);\n+        //~^ ERROR expected return type of length 4, found `i32x3` with length 3\n+        simd_shuffle8::<_, i32x2>(x, x, [0; 8]);\n+        //~^ ERROR expected return type of length 8, found `i32x2` with length 2\n     }\n }"}]}