{"sha": "b40a9fa787dd3b7d979cdf3e156284d6667fe9d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0MGE5ZmE3ODdkZDNiN2Q5NzljZGYzZTE1NjI4NGQ2NjY3ZmU5ZDI=", "commit": {"author": {"name": "Michael Bebenita", "email": "mbebenita@mozilla.com", "date": "2010-08-16T21:13:08Z"}, "committer": {"name": "Michael Bebenita", "email": "mbebenita@mozilla.com", "date": "2010-08-16T22:05:57Z"}, "message": "Pulled rust_srv in its own file. Some cleanup, and added varargs to assertion macros.", "tree": {"sha": "27b18e7280feed3adc368a0d98053f84d4fe2215", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27b18e7280feed3adc368a0d98053f84d4fe2215"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b40a9fa787dd3b7d979cdf3e156284d6667fe9d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b40a9fa787dd3b7d979cdf3e156284d6667fe9d2", "html_url": "https://github.com/rust-lang/rust/commit/b40a9fa787dd3b7d979cdf3e156284d6667fe9d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b40a9fa787dd3b7d979cdf3e156284d6667fe9d2/comments", "author": {"login": "mbebenita", "id": 311082, "node_id": "MDQ6VXNlcjMxMTA4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/311082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbebenita", "html_url": "https://github.com/mbebenita", "followers_url": "https://api.github.com/users/mbebenita/followers", "following_url": "https://api.github.com/users/mbebenita/following{/other_user}", "gists_url": "https://api.github.com/users/mbebenita/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbebenita/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbebenita/subscriptions", "organizations_url": "https://api.github.com/users/mbebenita/orgs", "repos_url": "https://api.github.com/users/mbebenita/repos", "events_url": "https://api.github.com/users/mbebenita/events{/privacy}", "received_events_url": "https://api.github.com/users/mbebenita/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mbebenita", "id": 311082, "node_id": "MDQ6VXNlcjMxMTA4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/311082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbebenita", "html_url": "https://github.com/mbebenita", "followers_url": "https://api.github.com/users/mbebenita/followers", "following_url": "https://api.github.com/users/mbebenita/following{/other_user}", "gists_url": "https://api.github.com/users/mbebenita/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbebenita/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbebenita/subscriptions", "organizations_url": "https://api.github.com/users/mbebenita/orgs", "repos_url": "https://api.github.com/users/mbebenita/repos", "events_url": "https://api.github.com/users/mbebenita/events{/privacy}", "received_events_url": "https://api.github.com/users/mbebenita/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e62aa68018c94bcfc3fd6beab90cf7b87f91cbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e62aa68018c94bcfc3fd6beab90cf7b87f91cbf", "html_url": "https://github.com/rust-lang/rust/commit/7e62aa68018c94bcfc3fd6beab90cf7b87f91cbf"}], "stats": {"total": 298, "additions": 168, "deletions": 130}, "files": [{"sha": "eb47944078ab4922298b1827629b0ca223ebdc5c", "filename": "src/Makefile", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b40a9fa787dd3b7d979cdf3e156284d6667fe9d2/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/b40a9fa787dd3b7d979cdf3e156284d6667fe9d2/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=b40a9fa787dd3b7d979cdf3e156284d6667fe9d2", "patch": "@@ -265,7 +265,8 @@ RUNTIME_CS := rt/sync/timer.cpp \\\n               rt/rust_message.cpp \\\n               rt/rust_timer.cpp \\\n               rt/circular_buffer.cpp \\\n-              rt/isaac/randport.cpp\n+              rt/isaac/randport.cpp \\\n+              rt/rust_srv.cpp\n \n RUNTIME_HDR := rt/globals.h \\\n                rt/rust.h \\\n@@ -283,7 +284,8 @@ RUNTIME_HDR := rt/globals.h \\\n                rt/util/array_list.h \\\n                rt/util/hash_map.h \\\n                rt/sync/sync.h \\\n-               rt/sync/timer.h\n+               rt/sync/timer.h \\\n+               rt/rust_srv.h\n \n RUNTIME_INCS := -Irt/isaac -Irt/uthash\n RUNTIME_OBJS := $(RUNTIME_CS:.cpp=$(CFG_OBJ_SUFFIX))"}, {"sha": "e5432bd9618fa1a04bbf8e00c6a7c0d63a8a83bc", "filename": "src/rt/circular_buffer.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b40a9fa787dd3b7d979cdf3e156284d6667fe9d2/src%2Frt%2Fcircular_buffer.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/b40a9fa787dd3b7d979cdf3e156284d6667fe9d2/src%2Frt%2Fcircular_buffer.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fcircular_buffer.cpp?ref=b40a9fa787dd3b7d979cdf3e156284d6667fe9d2", "patch": "@@ -33,7 +33,7 @@ circular_buffer::circular_buffer(rust_dom *dom, size_t unit_sz) :\n circular_buffer::~circular_buffer() {\n     dom->log(rust_log::MEM, \"~circular_buffer 0x%\" PRIxPTR, this);\n     I(dom, _buffer);\n-    W(dom, _unread == 0, \"~circular_buffer with unread messages.\");\n+    W(dom, _unread == 0, \"~circular_buffer with %d unread bytes\", _unread);\n     dom->free(_buffer);\n }\n "}, {"sha": "905b0c8a3596b00197520268126d4d4c1d72388b", "filename": "src/rt/rust.cpp", "status": "modified", "additions": 0, "deletions": 105, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/b40a9fa787dd3b7d979cdf3e156284d6667fe9d2/src%2Frt%2Frust.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/b40a9fa787dd3b7d979cdf3e156284d6667fe9d2/src%2Frt%2Frust.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust.cpp?ref=b40a9fa787dd3b7d979cdf3e156284d6667fe9d2", "patch": "@@ -1,110 +1,5 @@\n #include \"rust_internal.h\"\n \n-#define TRACK_ALLOCATIONS\n-\n-rust_srv::rust_srv() :\n-    live_allocs(0)\n-{\n-}\n-\n-rust_srv::~rust_srv()\n-{\n-    if (live_allocs != 0) {\n-        char msg[128];\n-        snprintf(msg, sizeof(msg),\n-                 \"leaked memory in rust main loop (%\" PRIuPTR \" objects)\",\n-                 live_allocs);\n-#ifdef TRACK_ALLOCATIONS\n-        for (size_t i = 0; i < allocation_list.size(); i++) {\n-            if (allocation_list[i] != NULL) {\n-                printf(\"allocation 0x%\" PRIxPTR \" was not freed\\n\",\n-                        (uintptr_t) allocation_list[i]);\n-            }\n-        }\n-#endif\n-        fatal(msg, __FILE__, __LINE__);\n-    }\n-}\n-\n-void\n-rust_srv::log(char const *str)\n-{\n-    printf(\"rt: %s\\n\", str);\n-}\n-\n-\n-\n-void *\n-rust_srv::malloc(size_t bytes)\n-{\n-    ++live_allocs;\n-    void * val = ::malloc(bytes);\n-#ifdef TRACK_ALLOCATIONS\n-    allocation_list.append(val);\n-#endif\n-    return val;\n-}\n-\n-void *\n-rust_srv::realloc(void *p, size_t bytes)\n-{\n-    if (!p) {\n-        live_allocs++;\n-    }\n-    void * val = ::realloc(p, bytes);\n-#ifdef TRACK_ALLOCATIONS\n-    if (allocation_list.replace(p, val) == false) {\n-        printf(\"realloc: ptr 0x%\" PRIxPTR \" is not in allocation_list\\n\",\n-               (uintptr_t) p);\n-        fatal(\"not in allocation_list\", __FILE__, __LINE__);\n-    }\n-#endif\n-    return val;\n-}\n-\n-void\n-rust_srv::free(void *p)\n-{\n-#ifdef TRACK_ALLOCATIONS\n-    if (allocation_list.replace(p, NULL) == false) {\n-        printf(\"free: ptr 0x%\" PRIxPTR \" is not in allocation_list\\n\",\n-               (uintptr_t) p);\n-        fatal(\"not in allocation_list\", __FILE__, __LINE__);\n-    }\n-#endif\n-    if (live_allocs < 1) {\n-        fatal(\"live_allocs < 1\", __FILE__, __LINE__);\n-    }\n-    live_allocs--;\n-    ::free(p);\n-}\n-\n-void\n-rust_srv::fatal(char const *expr, char const *file, size_t line)\n-{\n-    char buf[1024];\n-    snprintf(buf, sizeof(buf),\n-             \"fatal, '%s' failed, %s:%d\",\n-             expr, file, (int)line);\n-    log(buf);\n-    exit(1);\n-}\n-\n-void\n-rust_srv::warning(char const *expr, char const *file, size_t line)\n-{\n-    char buf[1024];\n-    snprintf(buf, sizeof(buf),\n-             \"warning: '%s', at: %s:%d\",\n-             expr, file, (int)line);\n-    log(buf);\n-}\n-\n-rust_srv *\n-rust_srv::clone()\n-{\n-    return new rust_srv();\n-}\n \n struct\n command_line_args"}, {"sha": "97f5c0d448d683c2d99e326735987eae90c5938c", "filename": "src/rt/rust.h", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b40a9fa787dd3b7d979cdf3e156284d6667fe9d2/src%2Frt%2Frust.h", "raw_url": "https://github.com/rust-lang/rust/raw/b40a9fa787dd3b7d979cdf3e156284d6667fe9d2/src%2Frt%2Frust.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust.h?ref=b40a9fa787dd3b7d979cdf3e156284d6667fe9d2", "patch": "@@ -19,21 +19,7 @@\n \n #include \"util/array_list.h\"\n \n-struct rust_srv {\n-    size_t live_allocs;\n-    array_list<void *> allocation_list;\n-\n-    virtual void log(char const *);\n-    virtual void fatal(char const *, char const *, size_t);\n-    virtual void warning(char const *, char const *, size_t);\n-    virtual void *malloc(size_t);\n-    virtual void *realloc(void *, size_t);\n-    virtual void free(void *);\n-    virtual rust_srv *clone();\n-\n-    rust_srv();\n-    virtual ~rust_srv();\n-};\n+#include \"rust_srv.h\"\n \n inline void *operator new(size_t size, rust_srv *srv)\n {"}, {"sha": "677877194448aab14b370d4a0e0074fb0f73c646", "filename": "src/rt/rust_internal.h", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b40a9fa787dd3b7d979cdf3e156284d6667fe9d2/src%2Frt%2Frust_internal.h", "raw_url": "https://github.com/rust-lang/rust/raw/b40a9fa787dd3b7d979cdf3e156284d6667fe9d2/src%2Frt%2Frust_internal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_internal.h?ref=b40a9fa787dd3b7d979cdf3e156284d6667fe9d2", "patch": "@@ -10,6 +10,7 @@\n #include <stdlib.h>\n #include <stdint.h>\n #include <inttypes.h>\n+#include <stdarg.h>\n \n #include <stdio.h>\n #include <string.h>\n@@ -46,13 +47,14 @@ extern \"C\" {\n #error \"Target CPU not supported.\"\n #endif\n \n-#define I(dom, e) ((e) ? (void)0 :                             \\\n-                   (dom)->srv->fatal(#e, __FILE__, __LINE__))\n-#define W(dom, e, s) ((e) ? (void)0 :                             \\\n-                   (dom)->srv->warning(#e \" : \" #s, __FILE__, __LINE__))\n+#define I(dom, e) ((e) ? (void)0 : \\\n+         (dom)->srv->fatal(#e, __FILE__, __LINE__, \"\"))\n \n-#define A(dom, e, s) ((e) ? (void)0 :                          \\\n-                      (dom)->srv->fatal(#e \" : \" #s, __FILE__, __LINE__))\n+#define W(dom, e, s, ...) ((e) ? (void)0 : \\\n+         (dom)->srv->warning(#e, __FILE__, __LINE__, s, ## __VA_ARGS__))\n+\n+#define A(dom, e, s, ...) ((e) ? (void)0 : \\\n+         (dom)->srv->fatal(#e, __FILE__, __LINE__, s, ## __VA_ARGS__))\n \n struct rust_task;\n struct rust_port;\n@@ -164,7 +166,7 @@ template <typename T> inline T\n check_null(rust_dom *dom, T value, char const *expr,\n            char const *file, size_t line) {\n     if (value == NULL) {\n-        dom->srv->fatal(expr, file, line);\n+        dom->srv->fatal(expr, file, line, \"is null\");\n     }\n     return value;\n }"}, {"sha": "9239f643ebe03064611e6642715b309b5fbf6eac", "filename": "src/rt/rust_srv.cpp", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/b40a9fa787dd3b7d979cdf3e156284d6667fe9d2/src%2Frt%2Frust_srv.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/b40a9fa787dd3b7d979cdf3e156284d6667fe9d2/src%2Frt%2Frust_srv.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_srv.cpp?ref=b40a9fa787dd3b7d979cdf3e156284d6667fe9d2", "patch": "@@ -0,0 +1,121 @@\n+/*\n+ *\n+ */\n+\n+#include \"rust_internal.h\"\n+#include \"rust_srv.h\"\n+\n+#define TRACK_ALLOCATIONS\n+\n+rust_srv::rust_srv() : _live_allocations(0) {\n+    // Nop.\n+}\n+\n+rust_srv::~rust_srv() {\n+    if (_live_allocations != 0) {\n+        char msg[128];\n+        snprintf(msg, sizeof(msg),\n+                 \"leaked memory in rust main loop (%\" PRIuPTR \" objects)\",\n+                 _live_allocations);\n+#ifdef TRACK_ALLOCATIONS\n+        for (size_t i = 0; i < _allocation_list.size(); i++) {\n+            if (_allocation_list[i] != NULL) {\n+                printf(\"allocation 0x%\" PRIxPTR \" was not freed\\n\",\n+                        (uintptr_t) _allocation_list[i]);\n+            }\n+        }\n+#endif\n+        fatal(msg, __FILE__, __LINE__, \"\");\n+    }\n+}\n+\n+void *\n+rust_srv::malloc(size_t bytes) {\n+    ++_live_allocations;\n+    void * val = ::malloc(bytes);\n+#ifdef TRACK_ALLOCATIONS\n+    _allocation_list.append(val);\n+#endif\n+    return val;\n+}\n+\n+void *\n+rust_srv::realloc(void *p, size_t bytes) {\n+    if (!p) {\n+        _live_allocations++;\n+    }\n+    void * val = ::realloc(p, bytes);\n+#ifdef TRACK_ALLOCATIONS\n+    if (_allocation_list.replace(p, val) == false) {\n+        printf(\"realloc: ptr 0x%\" PRIxPTR \" is not in allocation_list\\n\",\n+               (uintptr_t) p);\n+        fatal(\"not in allocation_list\", __FILE__, __LINE__, \"\");\n+    }\n+#endif\n+    return val;\n+}\n+\n+void\n+rust_srv::free(void *p) {\n+#ifdef TRACK_ALLOCATIONS\n+    if (_allocation_list.replace(p, NULL) == false) {\n+        printf(\"free: ptr 0x%\" PRIxPTR \" is not in allocation_list\\n\",\n+               (uintptr_t) p);\n+        fatal(\"not in allocation_list\", __FILE__, __LINE__, \"\");\n+    }\n+#endif\n+    if (_live_allocations < 1) {\n+        fatal(\"live_allocs < 1\", __FILE__, __LINE__, \"\");\n+    }\n+    _live_allocations--;\n+    ::free(p);\n+}\n+\n+void\n+rust_srv::log(char const *msg) {\n+    printf(\"rt: %s\\n\", msg);\n+}\n+\n+void\n+rust_srv::fatal(const char *expression,\n+    const char *file,\n+    size_t line,\n+    const char *format,\n+    ...) {\n+    char buf[1024];\n+    va_list args;\n+    va_start(args, format);\n+    vsnprintf(buf, sizeof(buf), format, args);\n+    va_end(args);\n+\n+    char msg[1024];\n+    snprintf(msg, sizeof(msg),\n+             \"fatal, '%s' failed, %s:%d %s\",\n+             expression, file, (int)line, buf);\n+    log(msg);\n+    exit(1);\n+}\n+\n+void\n+rust_srv::warning(char const *expression,\n+    char const *file,\n+    size_t line,\n+    const char *format,\n+    ...) {\n+    char buf[1024];\n+    va_list args;\n+    va_start(args, format);\n+    vsnprintf(buf, sizeof(buf), format, args);\n+    va_end(args);\n+\n+    char msg[1024];\n+    snprintf(msg, sizeof(msg),\n+             \"warning: '%s', at: %s:%d %s\",\n+             expression, file, (int)line, buf);\n+    log(msg);\n+}\n+\n+rust_srv *\n+rust_srv::clone() {\n+    return new rust_srv();\n+}"}, {"sha": "b25e5e75f4e385c24a55178a9a9cc530a0217ecf", "filename": "src/rt/rust_srv.h", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b40a9fa787dd3b7d979cdf3e156284d6667fe9d2/src%2Frt%2Frust_srv.h", "raw_url": "https://github.com/rust-lang/rust/raw/b40a9fa787dd3b7d979cdf3e156284d6667fe9d2/src%2Frt%2Frust_srv.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_srv.h?ref=b40a9fa787dd3b7d979cdf3e156284d6667fe9d2", "patch": "@@ -0,0 +1,32 @@\n+/*\n+ *\n+ */\n+\n+#ifndef RUST_SRV_H\n+#define RUST_SRV_H\n+\n+class rust_srv {\n+private:\n+    size_t _live_allocations;\n+    array_list<void *> _allocation_list;\n+public:\n+    virtual void log(char const *msg);\n+    virtual void fatal(char const *expression,\n+        char const *file,\n+        size_t line,\n+        char const *format,\n+        ...);\n+    virtual void warning(char const *expression,\n+        char const *file,\n+        size_t line,\n+        char const *format,\n+        ...);\n+    virtual void *malloc(size_t);\n+    virtual void *realloc(void *, size_t);\n+    virtual void free(void *);\n+    virtual rust_srv *clone();\n+    rust_srv();\n+    virtual ~rust_srv();\n+};\n+\n+#endif /* RUST_SRV_H */"}]}