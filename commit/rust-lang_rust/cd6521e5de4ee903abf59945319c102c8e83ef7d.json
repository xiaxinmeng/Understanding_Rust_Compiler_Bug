{"sha": "cd6521e5de4ee903abf59945319c102c8e83ef7d", "node_id": "C_kwDOAAsO6NoAKGNkNjUyMWU1ZGU0ZWU5MDNhYmY1OTk0NTMxOWMxMDJjOGU4M2VmN2Q", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-01-28T10:58:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-28T10:58:21Z"}, "message": "Merge #11360\n\n11360: feat: Support `#![recursion_limit]` attribute r=Veykril a=WaffleLapkin\n\n![Peek 2022-01-28 02-33](https://user-images.githubusercontent.com/38225716/151508617-ac802b53-f088-4cac-b260-2cd077f3d32c.gif)\r\n\r\nResolves #8640\r\n\r\n`@matklad` thanks, for the instructions, they were very helpful :)\n\nCo-authored-by: Maybe Waffle <waffle.lapkin@gmail.com>", "tree": {"sha": "220f0d3961ffcca5ffa1ecf70670fb8ded650f87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/220f0d3961ffcca5ffa1ecf70670fb8ded650f87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd6521e5de4ee903abf59945319c102c8e83ef7d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh88xNCRBK7hj4Ov3rIwAAVUQIACF1/+SQa6Vk6jOu8w7ad4CG\n9FVfVxxnBQcyVqsb6WM5rnbgNox2851fZ5adar3sFTZFuU+n9SkP8CAZLNq4bF15\nrNpn0sHd9NIVnFaVodafPYy7zDuqS3Wijs73UP/NrDbSNIooiGkUaRyRYHpUpqcW\n5GT2ktwfveKojP1RoWPnnOKR7h8dPtTUZYMkQyqEiGyeG05k8Cywdh1MlIsqYwyz\nHjublxiITAyDVN2ZnFW0WGV6zhwoetv6VMPvUeTaIeRTRsLxMEqNqRG2SJoS1JZX\nrTMvrAFpj75uVIVV4gaYcr9awT6HY5yjQxjWdGwu2CwftKhTR+/mE/9chSNcCHs=\n=Cuh/\n-----END PGP SIGNATURE-----\n", "payload": "tree 220f0d3961ffcca5ffa1ecf70670fb8ded650f87\nparent 93036aa0e201474d43c38be3862f4a899defe267\nparent 6d18c5b69d9751bdee8feaa90b095247be350d61\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1643367501 +0000\ncommitter GitHub <noreply@github.com> 1643367501 +0000\n\nMerge #11360\n\n11360: feat: Support `#![recursion_limit]` attribute r=Veykril a=WaffleLapkin\n\n![Peek 2022-01-28 02-33](https://user-images.githubusercontent.com/38225716/151508617-ac802b53-f088-4cac-b260-2cd077f3d32c.gif)\r\n\r\nResolves #8640\r\n\r\n`@matklad` thanks, for the instructions, they were very helpful :)\n\nCo-authored-by: Maybe Waffle <waffle.lapkin@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd6521e5de4ee903abf59945319c102c8e83ef7d", "html_url": "https://github.com/rust-lang/rust/commit/cd6521e5de4ee903abf59945319c102c8e83ef7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd6521e5de4ee903abf59945319c102c8e83ef7d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93036aa0e201474d43c38be3862f4a899defe267", "url": "https://api.github.com/repos/rust-lang/rust/commits/93036aa0e201474d43c38be3862f4a899defe267", "html_url": "https://github.com/rust-lang/rust/commit/93036aa0e201474d43c38be3862f4a899defe267"}, {"sha": "6d18c5b69d9751bdee8feaa90b095247be350d61", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d18c5b69d9751bdee8feaa90b095247be350d61", "html_url": "https://github.com/rust-lang/rust/commit/6d18c5b69d9751bdee8feaa90b095247be350d61"}], "stats": {"total": 73, "additions": 66, "deletions": 7}, "files": [{"sha": "8488b4f0d03ff5fe1c4cadf978fbbf920ab96a2d", "filename": "crates/hir_def/src/body.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cd6521e5de4ee903abf59945319c102c8e83ef7d/crates%2Fhir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6521e5de4ee903abf59945319c102c8e83ef7d/crates%2Fhir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody.rs?ref=cd6521e5de4ee903abf59945319c102c8e83ef7d", "patch": "@@ -54,12 +54,6 @@ pub struct Expander {\n     recursion_limit: usize,\n }\n \n-#[cfg(test)]\n-static EXPANSION_RECURSION_LIMIT: Limit = Limit::new(32);\n-\n-#[cfg(not(test))]\n-static EXPANSION_RECURSION_LIMIT: Limit = Limit::new(128);\n-\n impl CfgExpander {\n     pub(crate) fn new(\n         db: &dyn DefDatabase,\n@@ -101,7 +95,7 @@ impl Expander {\n         db: &dyn DefDatabase,\n         macro_call: ast::MacroCall,\n     ) -> Result<ExpandResult<Option<(Mark, T)>>, UnresolvedMacro> {\n-        if EXPANSION_RECURSION_LIMIT.check(self.recursion_limit + 1).is_err() {\n+        if self.recursion_limit(db).check(self.recursion_limit + 1).is_err() {\n             cov_mark::hit!(your_stack_belongs_to_me);\n             return Ok(ExpandResult::str_err(\n                 \"reached recursion limit during macro expansion\".into(),\n@@ -222,6 +216,17 @@ impl Expander {\n         let file_local_id = self.ast_id_map.ast_id(item);\n         AstId::new(self.current_file_id, file_local_id)\n     }\n+\n+    fn recursion_limit(&self, db: &dyn DefDatabase) -> Limit {\n+        let limit = db.crate_limits(self.cfg_expander.krate).recursion_limit as _;\n+\n+        #[cfg(not(test))]\n+        return Limit::new(limit);\n+\n+        // Without this, `body::tests::your_stack_belongs_to_me` stack-overflows in debug\n+        #[cfg(test)]\n+        return Limit::new(std::cmp::min(32, limit));\n+    }\n }\n \n #[derive(Debug)]"}, {"sha": "1d84da48fb9bcbd2ed5471be4456ae1b8623ff17", "filename": "crates/hir_def/src/body/tests.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cd6521e5de4ee903abf59945319c102c8e83ef7d/crates%2Fhir_def%2Fsrc%2Fbody%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6521e5de4ee903abf59945319c102c8e83ef7d/crates%2Fhir_def%2Fsrc%2Fbody%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Ftests.rs?ref=cd6521e5de4ee903abf59945319c102c8e83ef7d", "patch": "@@ -61,6 +61,24 @@ fn main() { n_nuple!(1,2,3); }\n     );\n }\n \n+#[test]\n+fn recursion_limit() {\n+    cov_mark::check!(your_stack_belongs_to_me);\n+\n+    lower(\n+        r#\"\n+#![recursion_limit = \"2\"]\n+macro_rules! n_nuple {\n+    ($e:tt) => ();\n+    ($first:tt $($rest:tt)*) => {{\n+        n_nuple!($($rest)*)\n+    }};\n+}\n+fn main() { n_nuple!(1,2,3); }\n+\"#,\n+    );\n+}\n+\n #[test]\n fn macro_resolve() {\n     // Regression test for a path resolution bug introduced with inner item handling."}, {"sha": "f9dd935c4b0c994e2cda76947b69852f7a04d02a", "filename": "crates/hir_def/src/db.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cd6521e5de4ee903abf59945319c102c8e83ef7d/crates%2Fhir_def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6521e5de4ee903abf59945319c102c8e83ef7d/crates%2Fhir_def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdb.rs?ref=cd6521e5de4ee903abf59945319c102c8e83ef7d", "patch": "@@ -157,9 +157,26 @@ pub trait DefDatabase: InternDatabase + AstDatabase + Upcast<dyn AstDatabase> {\n \n     #[salsa::invoke(visibility::function_visibility_query)]\n     fn function_visibility(&self, def: FunctionId) -> Visibility;\n+\n+    #[salsa::transparent]\n+    fn crate_limits(&self, crate_id: CrateId) -> CrateLimits;\n }\n \n fn crate_def_map_wait(db: &dyn DefDatabase, krate: CrateId) -> Arc<DefMap> {\n     let _p = profile::span(\"crate_def_map:wait\");\n     db.crate_def_map_query(krate)\n }\n+\n+pub struct CrateLimits {\n+    /// The maximum depth for potentially infinitely-recursive compile-time operations like macro expansion or auto-dereference.\n+    pub recursion_limit: u32,\n+}\n+\n+fn crate_limits(db: &dyn DefDatabase, crate_id: CrateId) -> CrateLimits {\n+    let def_map = db.crate_def_map(crate_id);\n+\n+    CrateLimits {\n+        // 128 is the default in rustc.\n+        recursion_limit: def_map.recursion_limit().unwrap_or(128),\n+    }\n+}"}, {"sha": "ca4255c58193f9b407b543448107789a906b3ccd", "filename": "crates/hir_def/src/nameres.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cd6521e5de4ee903abf59945319c102c8e83ef7d/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6521e5de4ee903abf59945319c102c8e83ef7d/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres.rs?ref=cd6521e5de4ee903abf59945319c102c8e83ef7d", "patch": "@@ -114,6 +114,7 @@ pub struct DefMap {\n     registered_tools: Vec<SmolStr>,\n \n     edition: Edition,\n+    recursion_limit: Option<u32>,\n     diagnostics: Vec<DefDiagnostic>,\n }\n \n@@ -272,6 +273,7 @@ impl DefMap {\n             block: None,\n             krate,\n             edition,\n+            recursion_limit: None,\n             extern_prelude: FxHashMap::default(),\n             exported_proc_macros: FxHashMap::default(),\n             prelude: None,\n@@ -461,6 +463,7 @@ impl DefMap {\n             registered_tools,\n             block: _,\n             edition: _,\n+            recursion_limit: _,\n             krate: _,\n             prelude: _,\n             root: _,\n@@ -482,6 +485,10 @@ impl DefMap {\n     pub fn diagnostics(&self) -> &[DefDiagnostic] {\n         self.diagnostics.as_slice()\n     }\n+\n+    pub fn recursion_limit(&self) -> Option<u32> {\n+        self.recursion_limit\n+    }\n }\n \n impl ModuleData {"}, {"sha": "7f7213f4c3e6946a42c7d6b68572cd44be147031", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cd6521e5de4ee903abf59945319c102c8e83ef7d/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6521e5de4ee903abf59945319c102c8e83ef7d/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=cd6521e5de4ee903abf59945319c102c8e83ef7d", "patch": "@@ -271,6 +271,17 @@ impl DefCollector<'_> {\n                     None => continue,\n                 };\n \n+                if *attr_name == hir_expand::name![recursion_limit] {\n+                    if let Some(input) = &attr.input {\n+                        if let AttrInput::Literal(limit) = &**input {\n+                            if let Ok(limit) = limit.parse() {\n+                                self.def_map.recursion_limit = Some(limit);\n+                            }\n+                        }\n+                    }\n+                    continue;\n+                }\n+\n                 let attr_is_register_like = *attr_name == hir_expand::name![register_attr]\n                     || *attr_name == hir_expand::name![register_tool];\n                 if !attr_is_register_like {"}, {"sha": "c36bd09e2b3b780e90b60291fee178431c08c327", "filename": "crates/hir_expand/src/name.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd6521e5de4ee903abf59945319c102c8e83ef7d/crates%2Fhir_expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd6521e5de4ee903abf59945319c102c8e83ef7d/crates%2Fhir_expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fname.rs?ref=cd6521e5de4ee903abf59945319c102c8e83ef7d", "patch": "@@ -270,6 +270,7 @@ pub mod known {\n         global_allocator,\n         test,\n         test_case,\n+        recursion_limit,\n         // Safe intrinsics\n         abort,\n         add_with_overflow,"}]}