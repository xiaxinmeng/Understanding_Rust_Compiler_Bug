{"sha": "eec68e6f451ee7675ce2cb29b696df091e6aed13", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlYzY4ZTZmNDUxZWU3Njc1Y2UyY2IyOWI2OTZkZjA5MWU2YWVkMTM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-20T05:38:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-20T05:38:25Z"}, "message": "Merge pull request #2297 from kiljacken/master\n\nAdd fancy truncation of type hints.", "tree": {"sha": "f83c828be31f5ac3950bf41c027a30365cfc7bd6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f83c828be31f5ac3950bf41c027a30365cfc7bd6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eec68e6f451ee7675ce2cb29b696df091e6aed13", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd1NFRCRBK7hj4Ov3rIwAAdHIIAEGPE3wjcu5v8vgYgzU7rL//\ntBIGOP4b7AJI6Gl5V33WRFun1F7U9/oJsXUOK1f0lDFo0O4j7ipbbQ1yHTMQ4OlL\nzdjwAfbR53ao5cFiEylCqOzuz008gl7jOuYTcHaynNBIZ7sOTOml9E5hoMbvgYwT\n4CD4NJFiBHhEIcA0XXZtvxaZW+BlwcwlpmYUiW2wpgIq1MUgqe83iCct5V7DSz71\nKHJa7HfdQRpJ76JqvaL21tgXouKNKODObsd/8GFqBijGCl1Ql9YZ/bloK/E3+8hp\nHaBnhkho9vFf/LTgmO7TbmmK9LkJPeL9zpO/MQG0kyM4dCabM8bzg6swYIgP46I=\n=9qHR\n-----END PGP SIGNATURE-----\n", "payload": "tree f83c828be31f5ac3950bf41c027a30365cfc7bd6\nparent 0e61ba3750df7e3e19eda21b6486bf70d6dffc72\nparent bf5ac4fe3952ee0db9fe18a185e39a209c58e79b\nauthor Aleksey Kladov <aleksey.kladov@gmail.com> 1574228305 +0300\ncommitter GitHub <noreply@github.com> 1574228305 +0300\n\nMerge pull request #2297 from kiljacken/master\n\nAdd fancy truncation of type hints."}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eec68e6f451ee7675ce2cb29b696df091e6aed13", "html_url": "https://github.com/rust-lang/rust/commit/eec68e6f451ee7675ce2cb29b696df091e6aed13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eec68e6f451ee7675ce2cb29b696df091e6aed13/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e61ba3750df7e3e19eda21b6486bf70d6dffc72", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e61ba3750df7e3e19eda21b6486bf70d6dffc72", "html_url": "https://github.com/rust-lang/rust/commit/0e61ba3750df7e3e19eda21b6486bf70d6dffc72"}, {"sha": "bf5ac4fe3952ee0db9fe18a185e39a209c58e79b", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf5ac4fe3952ee0db9fe18a185e39a209c58e79b", "html_url": "https://github.com/rust-lang/rust/commit/bf5ac4fe3952ee0db9fe18a185e39a209c58e79b"}], "stats": {"total": 169, "additions": 134, "deletions": 35}, "files": [{"sha": "776613c7ce1a6a4e9ad2be5b42ceb8cabb439ad2", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/eec68e6f451ee7675ce2cb29b696df091e6aed13/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec68e6f451ee7675ce2cb29b696df091e6aed13/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=eec68e6f451ee7675ce2cb29b696df091e6aed13", "patch": "@@ -800,6 +800,10 @@ impl HirDisplay for &Ty {\n \n impl HirDisplay for ApplicationTy {\n     fn hir_fmt(&self, f: &mut HirFormatter<impl HirDatabase>) -> fmt::Result {\n+        if f.should_truncate() {\n+            return write!(f, \"\u2026\");\n+        }\n+\n         match self.ctor {\n             TypeCtor::Bool => write!(f, \"bool\")?,\n             TypeCtor::Char => write!(f, \"char\")?,\n@@ -901,6 +905,10 @@ impl HirDisplay for ApplicationTy {\n \n impl HirDisplay for ProjectionTy {\n     fn hir_fmt(&self, f: &mut HirFormatter<impl HirDatabase>) -> fmt::Result {\n+        if f.should_truncate() {\n+            return write!(f, \"\u2026\");\n+        }\n+\n         let trait_name = self\n             .associated_ty\n             .parent_trait(f.db)\n@@ -919,6 +927,10 @@ impl HirDisplay for ProjectionTy {\n \n impl HirDisplay for Ty {\n     fn hir_fmt(&self, f: &mut HirFormatter<impl HirDatabase>) -> fmt::Result {\n+        if f.should_truncate() {\n+            return write!(f, \"\u2026\");\n+        }\n+\n         match self {\n             Ty::Apply(a_ty) => a_ty.hir_fmt(f)?,\n             Ty::Projection(p_ty) => p_ty.hir_fmt(f)?,\n@@ -1001,6 +1013,10 @@ impl HirDisplay for Ty {\n \n impl TraitRef {\n     fn hir_fmt_ext(&self, f: &mut HirFormatter<impl HirDatabase>, use_as: bool) -> fmt::Result {\n+        if f.should_truncate() {\n+            return write!(f, \"\u2026\");\n+        }\n+\n         self.substs[0].hir_fmt(f)?;\n         if use_as {\n             write!(f, \" as \")?;\n@@ -1031,6 +1047,10 @@ impl HirDisplay for &GenericPredicate {\n \n impl HirDisplay for GenericPredicate {\n     fn hir_fmt(&self, f: &mut HirFormatter<impl HirDatabase>) -> fmt::Result {\n+        if f.should_truncate() {\n+            return write!(f, \"\u2026\");\n+        }\n+\n         match self {\n             GenericPredicate::Implemented(trait_ref) => trait_ref.hir_fmt(f)?,\n             GenericPredicate::Projection(projection_pred) => {"}, {"sha": "9bb3ece6c8db60e301a885d568e7323ca3ae6d49", "filename": "crates/ra_hir/src/ty/display.rs", "status": "modified", "additions": 39, "deletions": 4, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/eec68e6f451ee7675ce2cb29b696df091e6aed13/crates%2Fra_hir%2Fsrc%2Fty%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec68e6f451ee7675ce2cb29b696df091e6aed13/crates%2Fra_hir%2Fsrc%2Fty%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fdisplay.rs?ref=eec68e6f451ee7675ce2cb29b696df091e6aed13", "patch": "@@ -7,15 +7,30 @@ use crate::db::HirDatabase;\n pub struct HirFormatter<'a, 'b, DB> {\n     pub db: &'a DB,\n     fmt: &'a mut fmt::Formatter<'b>,\n+    buf: String,\n+    curr_size: usize,\n+    max_size: Option<usize>,\n }\n \n pub trait HirDisplay {\n     fn hir_fmt(&self, f: &mut HirFormatter<impl HirDatabase>) -> fmt::Result;\n+\n     fn display<'a, DB>(&'a self, db: &'a DB) -> HirDisplayWrapper<'a, DB, Self>\n     where\n         Self: Sized,\n     {\n-        HirDisplayWrapper(db, self)\n+        HirDisplayWrapper(db, self, None)\n+    }\n+\n+    fn display_truncated<'a, DB>(\n+        &'a self,\n+        db: &'a DB,\n+        max_size: Option<usize>,\n+    ) -> HirDisplayWrapper<'a, DB, Self>\n+    where\n+        Self: Sized,\n+    {\n+        HirDisplayWrapper(db, self, max_size)\n     }\n }\n \n@@ -41,18 +56,38 @@ where\n \n     /// This allows using the `write!` macro directly with a `HirFormatter`.\n     pub fn write_fmt(&mut self, args: fmt::Arguments) -> fmt::Result {\n-        fmt::write(self.fmt, args)\n+        // We write to a buffer first to track output size\n+        self.buf.clear();\n+        fmt::write(&mut self.buf, args)?;\n+        self.curr_size += self.buf.len();\n+\n+        // Then we write to the internal formatter from the buffer\n+        self.fmt.write_str(&self.buf)\n+    }\n+\n+    pub fn should_truncate(&self) -> bool {\n+        if let Some(max_size) = self.max_size {\n+            self.curr_size >= max_size\n+        } else {\n+            false\n+        }\n     }\n }\n \n-pub struct HirDisplayWrapper<'a, DB, T>(&'a DB, &'a T);\n+pub struct HirDisplayWrapper<'a, DB, T>(&'a DB, &'a T, Option<usize>);\n \n impl<'a, DB, T> fmt::Display for HirDisplayWrapper<'a, DB, T>\n where\n     DB: HirDatabase,\n     T: HirDisplay,\n {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        self.1.hir_fmt(&mut HirFormatter { db: self.0, fmt: f })\n+        self.1.hir_fmt(&mut HirFormatter {\n+            db: self.0,\n+            fmt: f,\n+            buf: String::with_capacity(20),\n+            curr_size: 0,\n+            max_size: self.2,\n+        })\n     }\n }"}, {"sha": "24a7ca5e710d5e2dd466bb29a416f04962d4cb67", "filename": "crates/ra_ide_api/src/inlay_hints.rs", "status": "modified", "additions": 59, "deletions": 15, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/eec68e6f451ee7675ce2cb29b696df091e6aed13/crates%2Fra_ide_api%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec68e6f451ee7675ce2cb29b696df091e6aed13/crates%2Fra_ide_api%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Finlay_hints.rs?ref=eec68e6f451ee7675ce2cb29b696df091e6aed13", "patch": "@@ -19,10 +19,15 @@ pub struct InlayHint {\n     pub label: SmolStr,\n }\n \n-pub(crate) fn inlay_hints(db: &RootDatabase, file_id: FileId, file: &SourceFile) -> Vec<InlayHint> {\n+pub(crate) fn inlay_hints(\n+    db: &RootDatabase,\n+    file_id: FileId,\n+    file: &SourceFile,\n+    max_inlay_hint_length: Option<usize>,\n+) -> Vec<InlayHint> {\n     file.syntax()\n         .descendants()\n-        .map(|node| get_inlay_hints(db, file_id, &node).unwrap_or_default())\n+        .map(|node| get_inlay_hints(db, file_id, &node, max_inlay_hint_length).unwrap_or_default())\n         .flatten()\n         .collect()\n }\n@@ -31,6 +36,7 @@ fn get_inlay_hints(\n     db: &RootDatabase,\n     file_id: FileId,\n     node: &SyntaxNode,\n+    max_inlay_hint_length: Option<usize>,\n ) -> Option<Vec<InlayHint>> {\n     let analyzer = SourceAnalyzer::new(db, hir::Source::new(file_id.into(), node), None);\n     match_ast! {\n@@ -40,38 +46,38 @@ fn get_inlay_hints(\n                     return None;\n                 }\n                 let pat = it.pat()?;\n-                Some(get_pat_type_hints(db, &analyzer, pat, false))\n+                Some(get_pat_type_hints(db, &analyzer, pat, false, max_inlay_hint_length))\n             },\n             ast::LambdaExpr(it) => {\n                 it.param_list().map(|param_list| {\n                     param_list\n                         .params()\n                         .filter(|closure_param| closure_param.ascribed_type().is_none())\n                         .filter_map(|closure_param| closure_param.pat())\n-                        .map(|root_pat| get_pat_type_hints(db, &analyzer, root_pat, false))\n+                        .map(|root_pat| get_pat_type_hints(db, &analyzer, root_pat, false, max_inlay_hint_length))\n                         .flatten()\n                         .collect()\n                 })\n             },\n             ast::ForExpr(it) => {\n                 let pat = it.pat()?;\n-                Some(get_pat_type_hints(db, &analyzer, pat, false))\n+                Some(get_pat_type_hints(db, &analyzer, pat, false, max_inlay_hint_length))\n             },\n             ast::IfExpr(it) => {\n                 let pat = it.condition()?.pat()?;\n-                Some(get_pat_type_hints(db, &analyzer, pat, true))\n+                Some(get_pat_type_hints(db, &analyzer, pat, true, max_inlay_hint_length))\n             },\n             ast::WhileExpr(it) => {\n                 let pat = it.condition()?.pat()?;\n-                Some(get_pat_type_hints(db, &analyzer, pat, true))\n+                Some(get_pat_type_hints(db, &analyzer, pat, true, max_inlay_hint_length))\n             },\n             ast::MatchArmList(it) => {\n                 Some(\n                     it\n                         .arms()\n                         .map(|match_arm| match_arm.pats())\n                         .flatten()\n-                        .map(|root_pat| get_pat_type_hints(db, &analyzer, root_pat, true))\n+                        .map(|root_pat| get_pat_type_hints(db, &analyzer, root_pat, true, max_inlay_hint_length))\n                         .flatten()\n                         .collect(),\n                 )\n@@ -86,6 +92,7 @@ fn get_pat_type_hints(\n     analyzer: &SourceAnalyzer,\n     root_pat: ast::Pat,\n     skip_root_pat_hint: bool,\n+    max_inlay_hint_length: Option<usize>,\n ) -> Vec<InlayHint> {\n     let original_pat = &root_pat.clone();\n \n@@ -99,7 +106,7 @@ fn get_pat_type_hints(\n         .map(|(range, pat_type)| InlayHint {\n             range,\n             kind: InlayKind::TypeHint,\n-            label: pat_type.display(db).to_string().into(),\n+            label: pat_type.display_truncated(db, max_inlay_hint_length).to_string().into(),\n         })\n         .collect()\n }\n@@ -209,7 +216,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, None).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [193; 197),\n@@ -278,7 +285,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, None).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [21; 30),\n@@ -307,7 +314,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, None).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [21; 30),\n@@ -355,7 +362,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, None).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [166; 170),\n@@ -418,7 +425,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, None).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [166; 170),\n@@ -481,7 +488,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, None).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [311; 315),\n@@ -507,4 +514,41 @@ fn main() {\n         \"###\n         );\n     }\n+\n+    #[test]\n+    fn hint_truncation() {\n+        let (analysis, file_id) = single_file(\n+            r#\"\n+struct Smol<T>(T);\n+\n+struct VeryLongOuterName<T>(T);\n+\n+fn main() {\n+    let a = Smol(0u32);\n+    let b = VeryLongOuterName(0usize);\n+    let c = Smol(Smol(0u32))\n+}\"#,\n+        );\n+\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, Some(8)).unwrap(), @r###\"\n+        [\n+            InlayHint {\n+                range: [74; 75),\n+                kind: TypeHint,\n+                label: \"Smol<u32>\",\n+            },\n+            InlayHint {\n+                range: [98; 99),\n+                kind: TypeHint,\n+                label: \"VeryLongOuterName<\u2026>\",\n+            },\n+            InlayHint {\n+                range: [137; 138),\n+                kind: TypeHint,\n+                label: \"Smol<Smol<\u2026>>\",\n+            },\n+        ]\n+        \"###\n+        );\n+    }\n }"}, {"sha": "62ad996bce53c6d25fb357106c7b2065543874a0", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eec68e6f451ee7675ce2cb29b696df091e6aed13/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec68e6f451ee7675ce2cb29b696df091e6aed13/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=eec68e6f451ee7675ce2cb29b696df091e6aed13", "patch": "@@ -344,8 +344,14 @@ impl Analysis {\n     }\n \n     /// Returns a list of the places in the file where type hints can be displayed.\n-    pub fn inlay_hints(&self, file_id: FileId) -> Cancelable<Vec<InlayHint>> {\n-        self.with_db(|db| inlay_hints::inlay_hints(db, file_id, &db.parse(file_id).tree()))\n+    pub fn inlay_hints(\n+        &self,\n+        file_id: FileId,\n+        max_inlay_hint_length: Option<usize>,\n+    ) -> Cancelable<Vec<InlayHint>> {\n+        self.with_db(|db| {\n+            inlay_hints::inlay_hints(db, file_id, &db.parse(file_id).tree(), max_inlay_hint_length)\n+        })\n     }\n \n     /// Returns the set of folding ranges."}, {"sha": "8045f3d60d1cb6f3a3e7247040c35fe8f9973d0b", "filename": "crates/ra_lsp_server/src/config.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eec68e6f451ee7675ce2cb29b696df091e6aed13/crates%2Fra_lsp_server%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec68e6f451ee7675ce2cb29b696df091e6aed13/crates%2Fra_lsp_server%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fconfig.rs?ref=eec68e6f451ee7675ce2cb29b696df091e6aed13", "patch": "@@ -29,6 +29,8 @@ pub struct ServerConfig {\n \n     pub lru_capacity: Option<usize>,\n \n+    pub max_inlay_hint_length: Option<usize>,\n+\n     /// For internal usage to make integrated tests faster.\n     #[serde(deserialize_with = \"nullable_bool_true\")]\n     pub with_sysroot: bool,\n@@ -44,6 +46,7 @@ impl Default for ServerConfig {\n             exclude_globs: Vec::new(),\n             use_client_watching: false,\n             lru_capacity: None,\n+            max_inlay_hint_length: None,\n             with_sysroot: true,\n             feature_flags: FxHashMap::default(),\n         }"}, {"sha": "0dc0aeee8649390834ac80c6ac5fd4ce8ce7f583", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eec68e6f451ee7675ce2cb29b696df091e6aed13/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec68e6f451ee7675ce2cb29b696df091e6aed13/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=eec68e6f451ee7675ce2cb29b696df091e6aed13", "patch": "@@ -123,6 +123,7 @@ pub fn main_loop(\n                     .and_then(|it| it.folding_range.as_ref())\n                     .and_then(|it| it.line_folding_only)\n                     .unwrap_or(false),\n+                max_inlay_hint_length: config.max_inlay_hint_length,\n             }\n         };\n "}, {"sha": "e552f2106deda752e68492e2d3f2d1f2f5d35191", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eec68e6f451ee7675ce2cb29b696df091e6aed13/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec68e6f451ee7675ce2cb29b696df091e6aed13/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=eec68e6f451ee7675ce2cb29b696df091e6aed13", "patch": "@@ -888,7 +888,7 @@ pub fn handle_inlay_hints(\n     let analysis = world.analysis();\n     let line_index = analysis.file_line_index(file_id)?;\n     Ok(analysis\n-        .inlay_hints(file_id)?\n+        .inlay_hints(file_id, world.options.max_inlay_hint_length)?\n         .into_iter()\n         .map(|api_type| InlayHint {\n             label: api_type.label.to_string(),"}, {"sha": "9bdea70c7457c31499e495d80c4e46e24ad633aa", "filename": "crates/ra_lsp_server/src/world.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eec68e6f451ee7675ce2cb29b696df091e6aed13/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eec68e6f451ee7675ce2cb29b696df091e6aed13/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs?ref=eec68e6f451ee7675ce2cb29b696df091e6aed13", "patch": "@@ -28,6 +28,7 @@ pub struct Options {\n     pub publish_decorations: bool,\n     pub supports_location_link: bool,\n     pub line_folding_only: bool,\n+    pub max_inlay_hint_length: Option<usize>,\n }\n \n /// `WorldState` is the primary mutable state of the language server"}, {"sha": "0dbdd94fbacffb019cbcd0fbd9eb1148cdd7873b", "filename": "editors/code/src/commands/inlay_hints.ts", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/eec68e6f451ee7675ce2cb29b696df091e6aed13/editors%2Fcode%2Fsrc%2Fcommands%2Finlay_hints.ts", "raw_url": "https://github.com/rust-lang/rust/raw/eec68e6f451ee7675ce2cb29b696df091e6aed13/editors%2Fcode%2Fsrc%2Fcommands%2Finlay_hints.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Finlay_hints.ts?ref=eec68e6f451ee7675ce2cb29b696df091e6aed13", "patch": "@@ -87,7 +87,7 @@ export class HintsUpdater {\n                 range: hint.range,\n                 renderOptions: {\n                     after: {\n-                        contentText: `: ${this.truncateHint(hint.label)}`\n+                        contentText: `: ${hint.label}`\n                     }\n                 }\n             }));\n@@ -98,18 +98,6 @@ export class HintsUpdater {\n         }\n     }\n \n-    private truncateHint(label: string): string {\n-        if (!Server.config.maxInlayHintLength) {\n-            return label;\n-        }\n-\n-        let newLabel = label.substring(0, Server.config.maxInlayHintLength);\n-        if (label.length > Server.config.maxInlayHintLength) {\n-            newLabel += '\u2026';\n-        }\n-        return newLabel;\n-    }\n-\n     private async queryHints(documentUri: string): Promise<InlayHint[] | null> {\n         const request: InlayHintsParams = {\n             textDocument: { uri: documentUri }"}, {"sha": "7907b70bc5185d0127be9415c36f2fd3e57dc458", "filename": "editors/code/src/server.ts", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eec68e6f451ee7675ce2cb29b696df091e6aed13/editors%2Fcode%2Fsrc%2Fserver.ts", "raw_url": "https://github.com/rust-lang/rust/raw/eec68e6f451ee7675ce2cb29b696df091e6aed13/editors%2Fcode%2Fsrc%2Fserver.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fserver.ts?ref=eec68e6f451ee7675ce2cb29b696df091e6aed13", "patch": "@@ -43,6 +43,7 @@ export class Server {\n             initializationOptions: {\n                 publishDecorations: true,\n                 lruCapacity: Server.config.lruCapacity,\n+                maxInlayHintLength: Server.config.maxInlayHintLength,\n                 excludeGlobs: Server.config.excludeGlobs,\n                 useClientWatching: Server.config.useClientWatching,\n                 featureFlags: Server.config.featureFlags"}]}