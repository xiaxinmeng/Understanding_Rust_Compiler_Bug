{"sha": "ef63e88a9dad54539e1b8510e98e4ed951518c05", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmNjNlODhhOWRhZDU0NTM5ZTFiODUxMGU5OGU0ZWQ5NTE1MThjMDU=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-02-08T17:20:45Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-02-09T14:39:23Z"}, "message": "rustc_codegen_ssa: use `debug_introduce_local` on Operand call results.", "tree": {"sha": "b383aa6300ce5fcbefb83eb738c918044023c427", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b383aa6300ce5fcbefb83eb738c918044023c427"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef63e88a9dad54539e1b8510e98e4ed951518c05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef63e88a9dad54539e1b8510e98e4ed951518c05", "html_url": "https://github.com/rust-lang/rust/commit/ef63e88a9dad54539e1b8510e98e4ed951518c05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef63e88a9dad54539e1b8510e98e4ed951518c05/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6dff769e3718c56f78a317df7167426d60895d58", "url": "https://api.github.com/repos/rust-lang/rust/commits/6dff769e3718c56f78a317df7167426d60895d58", "html_url": "https://github.com/rust-lang/rust/commit/6dff769e3718c56f78a317df7167426d60895d58"}], "stats": {"total": 11, "additions": 6, "deletions": 5}, "files": [{"sha": "0a4610e9e490dcff18a290427a91310f746d6fad", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ef63e88a9dad54539e1b8510e98e4ed951518c05/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef63e88a9dad54539e1b8510e98e4ed951518c05/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=ef63e88a9dad54539e1b8510e98e4ed951518c05", "patch": "@@ -1145,6 +1145,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     let op = bx.load_operand(place);\n                     place.storage_dead(bx);\n                     self.locals[index] = LocalRef::Operand(Some(op));\n+                    self.debug_introduce_local(bx, index);\n                 }\n                 LocalRef::Operand(Some(op)) => {\n                     assert!(op.layout.is_zst(), \"assigning to initialized SSAtemp\");\n@@ -1186,6 +1187,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 let op = bx.load_operand(tmp);\n                 tmp.storage_dead(bx);\n                 self.locals[index] = LocalRef::Operand(Some(op));\n+                self.debug_introduce_local(bx, index);\n             }\n             DirectOperand(index) => {\n                 // If there is a cast, we have to store and reload.\n@@ -1200,6 +1202,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     OperandRef::from_immediate_or_packed_pair(bx, llval, ret_abi.layout)\n                 };\n                 self.locals[index] = LocalRef::Operand(Some(op));\n+                self.debug_introduce_local(bx, index);\n             }\n         }\n     }"}, {"sha": "493c1b9f0ba6b9a2655d506a4c62b551a21b4fe1", "filename": "src/test/codegen/naked-functions.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ef63e88a9dad54539e1b8510e98e4ed951518c05/src%2Ftest%2Fcodegen%2Fnaked-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef63e88a9dad54539e1b8510e98e4ed951518c05/src%2Ftest%2Fcodegen%2Fnaked-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fnaked-functions.rs?ref=ef63e88a9dad54539e1b8510e98e4ed951518c05", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]\n@@ -61,19 +59,19 @@ pub fn naked_recursive() {\n \n     naked_empty();\n \n-    // CHECK-NEXT: %{{[0-9]+}} = call i{{[0-9]+}} @naked_with_return()\n+    // CHECK-NEXT: %_4 = call i{{[0-9]+}} @naked_with_return()\n \n     // FIXME(#39685) Avoid one block per call.\n     // CHECK-NEXT: br label %bb2\n     // CHECK: bb2:\n \n-    // CHECK-NEXT: %{{[0-9]+}} = call i{{[0-9]+}} @naked_with_args_and_return(i{{[0-9]+}} %{{[0-9]+}})\n+    // CHECK-NEXT: %_3 = call i{{[0-9]+}} @naked_with_args_and_return(i{{[0-9]+}} %_4)\n \n     // FIXME(#39685) Avoid one block per call.\n     // CHECK-NEXT: br label %bb3\n     // CHECK: bb3:\n \n-    // CHECK-NEXT: call void @naked_with_args(i{{[0-9]+}} %{{[0-9]+}})\n+    // CHECK-NEXT: call void @naked_with_args(i{{[0-9]+}} %_3)\n \n     // FIXME(#39685) Avoid one block per call.\n     // CHECK-NEXT: br label %bb4"}]}