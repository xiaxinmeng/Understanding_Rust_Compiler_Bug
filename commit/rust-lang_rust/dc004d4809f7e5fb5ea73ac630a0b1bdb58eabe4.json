{"sha": "dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjMDA0ZDQ4MDlmN2U1ZmI1ZWE3M2FjNjMwYTBiMWJkYjU4ZWFiZTQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-11-08T11:57:55Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-11-08T14:29:13Z"}, "message": "rustc_target: Rename some target options to avoid tautology\n\n`target.target_endian` -> `target.endian`\n`target.target_c_int_width` -> `target.c_int_width`\n`target.target_os` -> `target.os`\n`target.target_env` -> `target.env`\n`target.target_vendor` -> `target.vendor`\n`target.target_family` -> `target.os_family`\n`target.target_mcount` -> `target.mcount`", "tree": {"sha": "7fe53865607b6178995f26d905752301be707c07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fe53865607b6178995f26d905752301be707c07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "html_url": "https://github.com/rust-lang/rust/commit/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf66988aa1677d018928c271fed563792f921d28", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf66988aa1677d018928c271fed563792f921d28", "html_url": "https://github.com/rust-lang/rust/commit/bf66988aa1677d018928c271fed563792f921d28"}], "stats": {"total": 461, "additions": 218, "deletions": 243}, "files": [{"sha": "87bcce07b34982bc7143f05c45c8af7424f02f85", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -90,7 +90,7 @@ fn set_instrument_function(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value) {\n \n         // The function name varies on platforms.\n         // See test/CodeGen/mcount.c in clang.\n-        let mcount_name = CString::new(cx.sess().target.target_mcount.as_str().as_bytes()).unwrap();\n+        let mcount_name = CString::new(cx.sess().target.mcount.as_str().as_bytes()).unwrap();\n \n         llvm::AddFunctionAttrStringValue(\n             llfn,"}, {"sha": "367c1f4811cdb8ebc2638add76108b989d12709e", "filename": "compiler/rustc_codegen_llvm/src/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcallee.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -176,7 +176,7 @@ pub fn get_fn(cx: &CodegenCx<'ll, 'tcx>, instance: Instance<'tcx>) -> &'ll Value\n         // should use dllimport for functions.\n         if cx.use_dll_storage_attrs\n             && tcx.is_dllimport_foreign_item(instance_def_id)\n-            && tcx.sess.target.target_env != \"gnu\"\n+            && tcx.sess.target.env != \"gnu\"\n         {\n             unsafe {\n                 llvm::LLVMSetDLLStorageClass(llfn, llvm::DLLStorageClass::DllImport);"}, {"sha": "ab70f72dc613f02d93f7f9acf4045c289bc5806b", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -91,7 +91,7 @@ unsafe fn configure_llvm(sess: &Session) {\n             }\n         }\n \n-        if sess.target.target_os == \"emscripten\" && sess.panic_strategy() == PanicStrategy::Unwind {\n+        if sess.target.os == \"emscripten\" && sess.panic_strategy() == PanicStrategy::Unwind {\n             add(\"-enable-emscripten-cxx-exceptions\", false);\n         }\n "}, {"sha": "3fc56eecdd0dab652eb4fdae27afd4b84275d5cc", "filename": "compiler/rustc_codegen_llvm/src/va_arg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_codegen_llvm%2Fsrc%2Fva_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_codegen_llvm%2Fsrc%2Fva_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fva_arg.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -52,7 +52,7 @@ fn emit_direct_ptr_va_arg(\n     let next = bx.inbounds_gep(addr, &[full_direct_size]);\n     bx.store(next, va_list_addr, bx.tcx().data_layout.pointer_align.abi);\n \n-    if size.bytes() < slot_size.bytes() && &*bx.tcx().sess.target.target_endian == \"big\" {\n+    if size.bytes() < slot_size.bytes() && &*bx.tcx().sess.target.endian == \"big\" {\n         let adjusted_size = bx.cx().const_i32((slot_size.bytes() - size.bytes()) as i32);\n         let adjusted = bx.inbounds_gep(addr, &[adjusted_size]);\n         (bx.bitcast(adjusted, bx.cx().type_ptr_to(llty)), addr_align)\n@@ -105,7 +105,7 @@ fn emit_aapcs_va_arg(\n     let mut end = bx.build_sibling_block(\"va_arg.end\");\n     let zero = bx.const_i32(0);\n     let offset_align = Align::from_bytes(4).unwrap();\n-    assert!(&*bx.tcx().sess.target.target_endian == \"little\");\n+    assert!(&*bx.tcx().sess.target.endian == \"little\");\n \n     let gr_type = target_ty.is_any_ptr() || target_ty.is_integral();\n     let (reg_off, reg_top_index, slot_size) = if gr_type {"}, {"sha": "5a627a0efa364bccb97883da01b2e676acccf000", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -163,7 +163,7 @@ fn get_linker(\n     // MSVC needs to link with the Store versions of the runtime libraries (vcruntime, msvcrt, etc).\n     let t = &sess.target;\n     if (flavor == LinkerFlavor::Msvc || flavor == LinkerFlavor::Lld(LldFlavor::Link))\n-        && t.target_vendor == \"uwp\"\n+        && t.vendor == \"uwp\"\n     {\n         if let Some(ref tool) = msvc_tool {\n             let original_path = tool.path();\n@@ -1236,7 +1236,7 @@ fn crt_objects_fallback(sess: &Session, crate_type: CrateType) -> bool {\n         Some(CrtObjectsFallback::Musl) => sess.crt_static(Some(crate_type)),\n         Some(CrtObjectsFallback::Mingw) => {\n             sess.host == sess.target\n-                && sess.target.target_vendor != \"uwp\"\n+                && sess.target.vendor != \"uwp\"\n                 && detect_self_contained_mingw(&sess)\n         }\n         // FIXME: Figure out cases in which WASM needs to link with a native toolchain.\n@@ -1510,7 +1510,7 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n     let base_cmd = get_linker(sess, path, flavor, crt_objects_fallback);\n     // FIXME: Move `/LIBPATH` addition for uwp targets from the linker construction\n     // to the linker args construction.\n-    assert!(base_cmd.get_args().is_empty() || sess.target.target_vendor == \"uwp\");\n+    assert!(base_cmd.get_args().is_empty() || sess.target.vendor == \"uwp\");\n     let cmd = &mut *codegen_results.linker_info.to_linker(base_cmd, &sess, flavor, target_cpu);\n     let link_output_kind = link_output_kind(sess, crate_type);\n \n@@ -2078,9 +2078,9 @@ fn are_upstream_rust_objects_already_included(sess: &Session) -> bool {\n \n fn add_apple_sdk(cmd: &mut dyn Linker, sess: &Session, flavor: LinkerFlavor) {\n     let arch = &sess.target.arch;\n-    let os = &sess.target.target_os;\n+    let os = &sess.target.os;\n     let llvm_target = &sess.target.llvm_target;\n-    if sess.target.target_vendor != \"apple\"\n+    if sess.target.vendor != \"apple\"\n         || !matches!(os.as_str(), \"ios\" | \"tvos\")\n         || flavor != LinkerFlavor::Gcc\n     {"}, {"sha": "3df956c465e5e17433dce52dbd02e94bd405f1cb", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -320,7 +320,7 @@ impl<'a> Linker for GccLinker<'a> {\n         // any `#[link]` attributes in the `libc` crate, see #72782 for details.\n         // FIXME: Switch to using `#[link]` attributes in the `libc` crate\n         // similarly to other targets.\n-        if self.sess.target.target_os == \"vxworks\"\n+        if self.sess.target.os == \"vxworks\"\n             && matches!(\n                 output_kind,\n                 LinkOutputKind::StaticNoPicExe"}, {"sha": "634a20bda9bfd96aaa4d18aa68a01cb7a7187cd7", "filename": "compiler/rustc_codegen_ssa/src/traits/type_.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Ftype_.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -51,11 +51,11 @@ pub trait DerivedTypeMethods<'tcx>: BaseTypeMethods<'tcx> + MiscMethods<'tcx> {\n     }\n \n     fn type_int(&self) -> Self::Type {\n-        match &self.sess().target.target_c_int_width[..] {\n+        match &self.sess().target.c_int_width[..] {\n             \"16\" => self.type_i16(),\n             \"32\" => self.type_i32(),\n             \"64\" => self.type_i64(),\n-            width => bug!(\"Unsupported target_c_int_width: {}\", width),\n+            width => bug!(\"Unsupported c_int_width: {}\", width),\n         }\n     }\n "}, {"sha": "1e93c3650b890088b34a904ad3812c24bae75d62", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -2601,15 +2601,14 @@ where\n         };\n \n         let target = &cx.tcx().sess.target;\n-        let target_env_gnu_like = matches!(&target.target_env[..], \"gnu\" | \"musl\");\n-        let win_x64_gnu =\n-            target.target_os == \"windows\" && target.arch == \"x86_64\" && target.target_env == \"gnu\";\n+        let target_env_gnu_like = matches!(&target.env[..], \"gnu\" | \"musl\");\n+        let win_x64_gnu = target.os == \"windows\" && target.arch == \"x86_64\" && target.env == \"gnu\";\n         let linux_s390x_gnu_like =\n-            target.target_os == \"linux\" && target.arch == \"s390x\" && target_env_gnu_like;\n+            target.os == \"linux\" && target.arch == \"s390x\" && target_env_gnu_like;\n         let linux_sparc64_gnu_like =\n-            target.target_os == \"linux\" && target.arch == \"sparc64\" && target_env_gnu_like;\n+            target.os == \"linux\" && target.arch == \"sparc64\" && target_env_gnu_like;\n         let linux_powerpc_gnu_like =\n-            target.target_os == \"linux\" && target.arch == \"powerpc\" && target_env_gnu_like;\n+            target.os == \"linux\" && target.arch == \"powerpc\" && target_env_gnu_like;\n         let rust_abi = matches!(sig.abi, RustIntrinsic | PlatformIntrinsic | Rust | RustCall);\n \n         // Handle safe Rust thin and fat pointers."}, {"sha": "ebb63b53eb3140b91fd5122d20079ab8bba59e16", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -735,12 +735,12 @@ pub const fn default_lib_output() -> CrateType {\n }\n \n pub fn default_configuration(sess: &Session) -> CrateConfig {\n-    let end = &sess.target.target_endian;\n+    let end = &sess.target.endian;\n     let arch = &sess.target.arch;\n     let wordsz = sess.target.pointer_width.to_string();\n-    let os = &sess.target.target_os;\n-    let env = &sess.target.target_env;\n-    let vendor = &sess.target.target_vendor;\n+    let os = &sess.target.os;\n+    let env = &sess.target.env;\n+    let vendor = &sess.target.vendor;\n     let min_atomic_width = sess.target.min_atomic_width();\n     let max_atomic_width = sess.target.max_atomic_width();\n     let atomic_cas = sess.target.atomic_cas;\n@@ -752,7 +752,7 @@ pub fn default_configuration(sess: &Session) -> CrateConfig {\n     ret.reserve(6); // the minimum number of insertions\n     // Target bindings.\n     ret.insert((sym::target_os, Some(Symbol::intern(os))));\n-    if let Some(ref fam) = sess.target.target_family {\n+    if let Some(ref fam) = sess.target.os_family {\n         ret.insert((sym::target_family, Some(Symbol::intern(fam))));\n         if fam == \"windows\" {\n             ret.insert((sym::windows, None));"}, {"sha": "429a3375cd893f4f729fbfe37404510aac5d2807", "filename": "compiler/rustc_target/src/abi/call/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -584,7 +584,7 @@ impl<'a, Ty> FnAbi<'a, Ty> {\n             \"nvptx64\" => nvptx64::compute_abi_info(self),\n             \"hexagon\" => hexagon::compute_abi_info(self),\n             \"riscv32\" | \"riscv64\" => riscv::compute_abi_info(cx, self),\n-            \"wasm32\" if cx.target_spec().target_os != \"emscripten\" => {\n+            \"wasm32\" if cx.target_spec().os != \"emscripten\" => {\n                 wasm32_bindgen_compat::compute_abi_info(self)\n             }\n             \"wasm32\" | \"asmjs\" => wasm32::compute_abi_info(cx, self),"}, {"sha": "8c2a9d09a3d9a8d27eb8be29d82fc3197471ebb5", "filename": "compiler/rustc_target/src/abi/call/powerpc64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fpowerpc64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fpowerpc64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fpowerpc64.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -119,7 +119,7 @@ where\n     Ty: TyAndLayoutMethods<'a, C> + Copy,\n     C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout + HasTargetSpec,\n {\n-    let abi = if cx.target_spec().target_env == \"musl\" {\n+    let abi = if cx.target_spec().env == \"musl\" {\n         ELFv2\n     } else {\n         match cx.data_layout().endian {"}, {"sha": "a43080b09e9a172d8344dbac4071f3323a6b74aa", "filename": "compiler/rustc_target/src/abi/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -156,11 +156,11 @@ impl TargetDataLayout {\n             Endian::Little => \"little\",\n             Endian::Big => \"big\",\n         };\n-        if endian_str != target.target_endian {\n+        if endian_str != target.endian {\n             return Err(format!(\n                 \"inconsistent target specification: \\\"data-layout\\\" claims \\\n                                 architecture is {}-endian, while \\\"target-endian\\\" is `{}`\",\n-                endian_str, target.target_endian\n+                endian_str, target.endian\n             ));\n         }\n "}, {"sha": "7de809f76222db6aafbfa5e5217951ca9b3b9f3b", "filename": "compiler/rustc_target/src/spec/aarch64_apple_darwin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -19,6 +19,6 @@ pub fn target() -> Target {\n         pointer_width: 64,\n         data_layout: \"e-m:o-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: arch.to_string(),\n-        options: TargetOptions { target_mcount: \"\\u{1}mcount\".to_string(), ..base },\n+        options: TargetOptions { mcount: \"\\u{1}mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "cc9338ff970e144187d47c12a0d6881e806a6509", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -11,7 +11,7 @@ pub fn target() -> Target {\n         arch: \"aarch64\".to_string(),\n         options: TargetOptions {\n             unsupported_abis: super::arm_base::unsupported_abis(),\n-            target_mcount: \"\\u{1}_mcount\".to_string(),\n+            mcount: \"\\u{1}_mcount\".to_string(),\n             ..base\n         },\n     }"}, {"sha": "7bbfc8ec0f7b058c7192b566f0b3168d23d4aa25", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_linux_musl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_musl.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -11,7 +11,7 @@ pub fn target() -> Target {\n         arch: \"aarch64\".to_string(),\n         options: TargetOptions {\n             unsupported_abis: super::arm_base::unsupported_abis(),\n-            target_mcount: \"\\u{1}_mcount\".to_string(),\n+            mcount: \"\\u{1}_mcount\".to_string(),\n             ..base\n         },\n     }"}, {"sha": "09efbdbb293fea00055eacd0407cffa73488626f", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_netbsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_netbsd.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -10,6 +10,6 @@ pub fn target() -> Target {\n         pointer_width: 64,\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: \"aarch64\".to_string(),\n-        options: TargetOptions { target_mcount: \"__mcount\".to_string(), ..base },\n+        options: TargetOptions { mcount: \"__mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "d0ad45153d677decb2f7049f83cb2ad4241f550a", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_none.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -10,7 +10,7 @@ use super::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, Target, TargetOp\n \n pub fn target() -> Target {\n     let opts = TargetOptions {\n-        target_vendor: String::new(),\n+        vendor: String::new(),\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         linker: Some(\"rust-lld\".to_owned()),\n         features: \"+strict-align,+neon,+fp-armv8\".to_string(),"}, {"sha": "41bd2182905c942a9b75abb22672bd945eaa4334", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_none_softfloat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none_softfloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none_softfloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none_softfloat.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -10,7 +10,7 @@ use super::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, Target, TargetOp\n \n pub fn target() -> Target {\n     let opts = TargetOptions {\n-        target_vendor: String::new(),\n+        vendor: String::new(),\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         linker: Some(\"rust-lld\".to_owned()),\n         features: \"+strict-align,-neon,-fp-armv8\".to_string(),"}, {"sha": "7b9f546c25a5c2de339b0774eb70d912a637c6f5", "filename": "compiler/rustc_target/src/spec/android_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fandroid_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fandroid_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fandroid_base.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -2,7 +2,7 @@ use crate::spec::{LinkerFlavor, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     let mut base = super::linux_base::opts();\n-    base.target_os = \"android\".to_string();\n+    base.os = \"android\".to_string();\n     // Many of the symbols defined in compiler-rt are also defined in libgcc.\n     // Android's linker doesn't like that by default.\n     base.pre_link_args"}, {"sha": "e271a6dec40d239027e4d95fcd581d9c972c010b", "filename": "compiler/rustc_target/src/spec/apple_base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -17,13 +17,13 @@ pub fn opts(os: &str) -> TargetOptions {\n     let version = macos_deployment_target();\n \n     TargetOptions {\n-        target_os: os.to_string(),\n-        target_vendor: \"apple\".to_string(),\n+        os: os.to_string(),\n+        vendor: \"apple\".to_string(),\n         // macOS has -dead_strip, which doesn't rely on function_sections\n         function_sections: false,\n         dynamic_linking: true,\n         executables: true,\n-        target_family: Some(\"unix\".to_string()),\n+        os_family: Some(\"unix\".to_string()),\n         is_like_osx: true,\n         dwarf_version: Some(2),\n         has_rpath: true,"}, {"sha": "17b6fb21e09bfbbc39dd735a71aaeb61e5d8fdf4", "filename": "compiler/rustc_target/src/spec/arm_unknown_linux_gnueabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_gnueabi.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -12,7 +12,7 @@ pub fn target() -> Target {\n         options: TargetOptions {\n             features: \"+strict-align,+v6\".to_string(),\n             unsupported_abis: super::arm_base::unsupported_abis(),\n-            target_mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n+            mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n             ..base\n         },\n     }"}, {"sha": "227709f0b0b58afe2ad069e51071df3a7c585255", "filename": "compiler/rustc_target/src/spec/arm_unknown_linux_gnueabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_gnueabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_gnueabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_gnueabihf.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -12,7 +12,7 @@ pub fn target() -> Target {\n         options: TargetOptions {\n             features: \"+strict-align,+v6,+vfp2,-d32\".to_string(),\n             unsupported_abis: super::arm_base::unsupported_abis(),\n-            target_mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n+            mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n             ..base\n         },\n     }"}, {"sha": "53ff1001c204d68fd395667fcca762f671d9c1fc", "filename": "compiler/rustc_target/src/spec/arm_unknown_linux_musleabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_musleabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_musleabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_musleabi.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -17,7 +17,7 @@ pub fn target() -> Target {\n         arch: \"arm\".to_string(),\n         options: TargetOptions {\n             unsupported_abis: super::arm_base::unsupported_abis(),\n-            target_mcount: \"\\u{1}mcount\".to_string(),\n+            mcount: \"\\u{1}mcount\".to_string(),\n             ..base\n         },\n     }"}, {"sha": "6d8a5f9f88bbbd8339ffcbbbfa9cc5cacd2f2e6f", "filename": "compiler/rustc_target/src/spec/arm_unknown_linux_musleabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_musleabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_musleabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_musleabihf.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -17,7 +17,7 @@ pub fn target() -> Target {\n         arch: \"arm\".to_string(),\n         options: TargetOptions {\n             unsupported_abis: super::arm_base::unsupported_abis(),\n-            target_mcount: \"\\u{1}mcount\".to_string(),\n+            mcount: \"\\u{1}mcount\".to_string(),\n             ..base\n         },\n     }"}, {"sha": "36856305723711fcf7b8967579f5fbc5edf78a17", "filename": "compiler/rustc_target/src/spec/armebv7r_none_eabi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabi.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -11,8 +11,8 @@ pub fn target() -> Target {\n         arch: \"arm\".to_string(),\n \n         options: TargetOptions {\n-            target_endian: \"big\".to_string(),\n-            target_vendor: String::new(),\n+            endian: \"big\".to_string(),\n+            vendor: String::new(),\n             linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n             executables: true,\n             linker: Some(\"rust-lld\".to_owned()),"}, {"sha": "2ff3c8950c4837d38ff04221a7c49926774f5784", "filename": "compiler/rustc_target/src/spec/armebv7r_none_eabihf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabihf.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -11,8 +11,8 @@ pub fn target() -> Target {\n         arch: \"arm\".to_string(),\n \n         options: TargetOptions {\n-            target_endian: \"big\".to_string(),\n-            target_vendor: String::new(),\n+            endian: \"big\".to_string(),\n+            vendor: String::new(),\n             linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n             executables: true,\n             linker: Some(\"rust-lld\".to_owned()),"}, {"sha": "7808437453caf5c826b7856bf9821cd4d4cfc515", "filename": "compiler/rustc_target/src/spec/armv4t_unknown_linux_gnueabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv4t_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv4t_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv4t_unknown_linux_gnueabi.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -13,7 +13,7 @@ pub fn target() -> Target {\n             // Atomic operations provided by compiler-builtins\n             max_atomic_width: Some(32),\n             unsupported_abis: super::arm_base::unsupported_abis(),\n-            target_mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n+            mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n             has_thumb_interworking: true,\n             ..base\n         },"}, {"sha": "d958354f5843eb9a267160d1048d147238b9b324", "filename": "compiler/rustc_target/src/spec/armv5te_unknown_linux_gnueabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_unknown_linux_gnueabi.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -13,7 +13,7 @@ pub fn target() -> Target {\n             // Atomic operations provided by compiler-builtins\n             max_atomic_width: Some(32),\n             unsupported_abis: super::arm_base::unsupported_abis(),\n-            target_mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n+            mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n             has_thumb_interworking: true,\n             ..base\n         },"}, {"sha": "40d405c30a2bd13a69f6ba3ecc4a1ea95d73376c", "filename": "compiler/rustc_target/src/spec/armv5te_unknown_linux_musleabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_unknown_linux_musleabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_unknown_linux_musleabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_unknown_linux_musleabi.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -16,7 +16,7 @@ pub fn target() -> Target {\n             // Atomic operations provided by compiler-builtins\n             max_atomic_width: Some(32),\n             unsupported_abis: super::arm_base::unsupported_abis(),\n-            target_mcount: \"\\u{1}mcount\".to_string(),\n+            mcount: \"\\u{1}mcount\".to_string(),\n             has_thumb_interworking: true,\n             ..base\n         },"}, {"sha": "a149bd983b71b2f89b272dee22c8547783705f13", "filename": "compiler/rustc_target/src/spec/armv6_unknown_freebsd.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6_unknown_freebsd.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -9,11 +9,11 @@ pub fn target() -> Target {\n         arch: \"arm\".to_string(),\n \n         options: TargetOptions {\n-            target_env: \"gnueabihf\".to_string(),\n+            env: \"gnueabihf\".to_string(),\n             features: \"+v6,+vfp2,-d32\".to_string(),\n             max_atomic_width: Some(64),\n             unsupported_abis: super::arm_base::unsupported_abis(),\n-            target_mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n+            mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n             ..base\n         },\n     }"}, {"sha": "6c81a458b9b1bdac2bdce8bb371f35101fa0bf9e", "filename": "compiler/rustc_target/src/spec/armv6_unknown_netbsd_eabihf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6_unknown_netbsd_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6_unknown_netbsd_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6_unknown_netbsd_eabihf.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -10,10 +10,10 @@ pub fn target() -> Target {\n         arch: \"arm\".to_string(),\n \n         options: TargetOptions {\n-            target_env: \"eabihf\".to_string(),\n+            env: \"eabihf\".to_string(),\n             features: \"+v6,+vfp2,-d32\".to_string(),\n             unsupported_abis: super::arm_base::unsupported_abis(),\n-            target_mcount: \"__mcount\".to_string(),\n+            mcount: \"__mcount\".to_string(),\n             ..base\n         },\n     }"}, {"sha": "d47ee541b25bab4dca5d2385c3cd7bf2c6a75763", "filename": "compiler/rustc_target/src/spec/armv7_unknown_cloudabi_eabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_cloudabi_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_cloudabi_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_cloudabi_eabihf.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -13,6 +13,6 @@ pub fn target() -> Target {\n         pointer_width: 32,\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n-        options: TargetOptions { target_mcount: \"\\u{1}mcount\".to_string(), ..base },\n+        options: TargetOptions { mcount: \"\\u{1}mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "6f24c6818fcd0c0df6d93ab4a1b035891b3a22a2", "filename": "compiler/rustc_target/src/spec/armv7_unknown_freebsd.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_freebsd.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -9,11 +9,11 @@ pub fn target() -> Target {\n         arch: \"arm\".to_string(),\n \n         options: TargetOptions {\n-            target_env: \"gnueabihf\".to_string(),\n+            env: \"gnueabihf\".to_string(),\n             features: \"+v7,+vfp3,-d32,+thumb2,-neon\".to_string(),\n             max_atomic_width: Some(64),\n             unsupported_abis: super::arm_base::unsupported_abis(),\n-            target_mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n+            mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n             ..base\n         },\n     }"}, {"sha": "13798e869b7f5ee3728e0486e5a06989b7c4eb47", "filename": "compiler/rustc_target/src/spec/armv7_unknown_linux_gnueabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_gnueabi.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -16,7 +16,7 @@ pub fn target() -> Target {\n             cpu: \"generic\".to_string(),\n             max_atomic_width: Some(64),\n             unsupported_abis: super::arm_base::unsupported_abis(),\n-            target_mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n+            mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n             ..base\n         },\n     }"}, {"sha": "f80f56ee3c580cd055d67b7907775c9761f8332b", "filename": "compiler/rustc_target/src/spec/armv7_unknown_linux_gnueabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_gnueabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_gnueabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_gnueabihf.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -17,7 +17,7 @@ pub fn target() -> Target {\n             cpu: \"generic\".to_string(),\n             max_atomic_width: Some(64),\n             unsupported_abis: super::arm_base::unsupported_abis(),\n-            target_mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n+            mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n             ..base\n         },\n     }"}, {"sha": "9f9f1bd79b0c176083d930e546a6421ee0aa5ed8", "filename": "compiler/rustc_target/src/spec/armv7_unknown_linux_musleabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_musleabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_musleabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_musleabi.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -21,7 +21,7 @@ pub fn target() -> Target {\n             cpu: \"generic\".to_string(),\n             max_atomic_width: Some(64),\n             unsupported_abis: super::arm_base::unsupported_abis(),\n-            target_mcount: \"\\u{1}mcount\".to_string(),\n+            mcount: \"\\u{1}mcount\".to_string(),\n             ..base\n         },\n     }"}, {"sha": "59deee30ef260cd19e2db09355471624d2252dc0", "filename": "compiler/rustc_target/src/spec/armv7_unknown_linux_musleabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_musleabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_musleabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_musleabihf.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -20,7 +20,7 @@ pub fn target() -> Target {\n             cpu: \"generic\".to_string(),\n             max_atomic_width: Some(64),\n             unsupported_abis: super::arm_base::unsupported_abis(),\n-            target_mcount: \"\\u{1}mcount\".to_string(),\n+            mcount: \"\\u{1}mcount\".to_string(),\n             ..base\n         },\n     }"}, {"sha": "660525704c1b019a4644c92546074726d7499c02", "filename": "compiler/rustc_target/src/spec/armv7_unknown_netbsd_eabihf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_netbsd_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_netbsd_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_netbsd_eabihf.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -9,12 +9,12 @@ pub fn target() -> Target {\n         arch: \"arm\".to_string(),\n \n         options: TargetOptions {\n-            target_env: \"eabihf\".to_string(),\n+            env: \"eabihf\".to_string(),\n             features: \"+v7,+vfp3,-d32,+thumb2,-neon\".to_string(),\n             cpu: \"generic\".to_string(),\n             max_atomic_width: Some(64),\n             unsupported_abis: super::arm_base::unsupported_abis(),\n-            target_mcount: \"__mcount\".to_string(),\n+            mcount: \"__mcount\".to_string(),\n             ..base\n         },\n     }"}, {"sha": "70ad50c3c9d5a7306102ad0152003fc6d1711f9c", "filename": "compiler/rustc_target/src/spec/armv7a_none_eabi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabi.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -10,7 +10,7 @@\n // bare-metal binaries (the `gcc` linker has the advantage that it knows where C\n // libraries and crt*.o are but it's not much of an advantage here); LLD is also\n // faster\n-// - `target_os` set to `none`. rationale: matches `thumb` targets\n+// - `os` set to `none`. rationale: matches `thumb` targets\n // - `target_{env,vendor}` set to an empty string. rationale: matches `thumb`\n // targets\n // - `panic_strategy` set to `abort`. rationale: matches `thumb` targets\n@@ -21,7 +21,7 @@ use super::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, Target, TargetOp\n \n pub fn target() -> Target {\n     let opts = TargetOptions {\n-        target_vendor: String::new(),\n+        vendor: String::new(),\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         linker: Some(\"rust-lld\".to_owned()),\n         features: \"+v7,+thumb2,+soft-float,-neon,+strict-align\".to_string(),"}, {"sha": "b9cda18d6b46f4ec533025e0198f5d7da758a6d6", "filename": "compiler/rustc_target/src/spec/armv7a_none_eabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabihf.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -9,7 +9,7 @@ use super::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, Target, TargetOp\n \n pub fn target() -> Target {\n     let opts = TargetOptions {\n-        target_vendor: String::new(),\n+        vendor: String::new(),\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         linker: Some(\"rust-lld\".to_owned()),\n         features: \"+v7,+vfp3,-d32,+thumb2,-neon,+strict-align\".to_string(),"}, {"sha": "440c2434907beaecefe5a8adace15367c692a258", "filename": "compiler/rustc_target/src/spec/armv7r_none_eabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabi.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -11,7 +11,7 @@ pub fn target() -> Target {\n         arch: \"arm\".to_string(),\n \n         options: TargetOptions {\n-            target_vendor: String::new(),\n+            vendor: String::new(),\n             linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n             executables: true,\n             linker: Some(\"rust-lld\".to_owned()),"}, {"sha": "c1bf332a72ddfbd6132fc8ecb8f8d83f51f64651", "filename": "compiler/rustc_target/src/spec/armv7r_none_eabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabihf.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -11,7 +11,7 @@ pub fn target() -> Target {\n         arch: \"arm\".to_string(),\n \n         options: TargetOptions {\n-            target_vendor: String::new(),\n+            vendor: String::new(),\n             linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n             executables: true,\n             linker: Some(\"rust-lld\".to_owned()),"}, {"sha": "9cc10032c71dad12cc0d2497573fce47c9d66755", "filename": "compiler/rustc_target/src/spec/avr_gnu_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Favr_gnu_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Favr_gnu_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Favr_gnu_base.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -10,8 +10,8 @@ pub fn target(target_cpu: String) -> Target {\n         llvm_target: \"avr-unknown-unknown\".to_string(),\n         pointer_width: 16,\n         options: TargetOptions {\n-            target_c_int_width: \"16\".to_string(),\n-            target_os: \"unknown\".to_string(),\n+            c_int_width: \"16\".to_string(),\n+            os: \"unknown\".to_string(),\n             cpu: target_cpu.clone(),\n             exe_suffix: \".elf\".to_string(),\n "}, {"sha": "20a095742ecf573ed24cb08bf719f9ed8c4ce806", "filename": "compiler/rustc_target/src/spec/cloudabi_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fcloudabi_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fcloudabi_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fcloudabi_base.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -12,9 +12,9 @@ pub fn opts() -> TargetOptions {\n     );\n \n     TargetOptions {\n-        target_os: \"cloudabi\".to_string(),\n+        os: \"cloudabi\".to_string(),\n         executables: true,\n-        target_family: None,\n+        os_family: None,\n         linker_is_gnu: true,\n         pre_link_args: args,\n         position_independent_executables: true,"}, {"sha": "b96de7ab1ed19b2ca4b6b95836f59dea48cabe6a", "filename": "compiler/rustc_target/src/spec/dragonfly_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fdragonfly_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fdragonfly_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fdragonfly_base.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -16,10 +16,10 @@ pub fn opts() -> TargetOptions {\n     );\n \n     TargetOptions {\n-        target_os: \"dragonfly\".to_string(),\n+        os: \"dragonfly\".to_string(),\n         dynamic_linking: true,\n         executables: true,\n-        target_family: Some(\"unix\".to_string()),\n+        os_family: Some(\"unix\".to_string()),\n         linker_is_gnu: true,\n         has_rpath: true,\n         pre_link_args: args,"}, {"sha": "c70c492716b30e1a09324570a2e4a9cd9dffeb6c", "filename": "compiler/rustc_target/src/spec/freebsd_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffreebsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffreebsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffreebsd_base.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -16,10 +16,10 @@ pub fn opts() -> TargetOptions {\n     );\n \n     TargetOptions {\n-        target_os: \"freebsd\".to_string(),\n+        os: \"freebsd\".to_string(),\n         dynamic_linking: true,\n         executables: true,\n-        target_family: Some(\"unix\".to_string()),\n+        os_family: Some(\"unix\".to_string()),\n         linker_is_gnu: true,\n         has_rpath: true,\n         pre_link_args: args,"}, {"sha": "e467c7c8f21e9989c6fab7b59792a3a71efaf70e", "filename": "compiler/rustc_target/src/spec/fuchsia_base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffuchsia_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffuchsia_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffuchsia_base.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -20,14 +20,14 @@ pub fn opts() -> TargetOptions {\n     );\n \n     TargetOptions {\n-        target_os: \"fuchsia\".to_string(),\n-        target_vendor: String::new(),\n+        os: \"fuchsia\".to_string(),\n+        vendor: String::new(),\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         linker: Some(\"rust-lld\".to_owned()),\n         lld_flavor: LldFlavor::Ld,\n         dynamic_linking: true,\n         executables: true,\n-        target_family: Some(\"unix\".to_string()),\n+        os_family: Some(\"unix\".to_string()),\n         is_like_fuchsia: true,\n         linker_is_gnu: true,\n         has_rpath: false,"}, {"sha": "ec87645c4faaa1d40f88d615c5f0999c6106d83c", "filename": "compiler/rustc_target/src/spec/haiku_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhaiku_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhaiku_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhaiku_base.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -2,11 +2,11 @@ use crate::spec::{RelroLevel, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     TargetOptions {\n-        target_os: \"haiku\".to_string(),\n+        os: \"haiku\".to_string(),\n         dynamic_linking: true,\n         executables: true,\n         has_rpath: false,\n-        target_family: Some(\"unix\".to_string()),\n+        os_family: Some(\"unix\".to_string()),\n         relro_level: RelroLevel::Full,\n         linker_is_gnu: true,\n         ..Default::default()"}, {"sha": "a75158a0ea0cb7ab91ca4164407b261fa9ab4f46", "filename": "compiler/rustc_target/src/spec/hermit_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhermit_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhermit_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhermit_base.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -9,7 +9,7 @@ pub fn opts() -> TargetOptions {\n     );\n \n     TargetOptions {\n-        target_os: \"hermit\".to_string(),\n+        os: \"hermit\".to_string(),\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         linker: Some(\"rust-lld\".to_owned()),\n         executables: true,\n@@ -20,7 +20,7 @@ pub fn opts() -> TargetOptions {\n         position_independent_executables: true,\n         static_position_independent_executables: true,\n         relocation_model: RelocModel::Pic,\n-        target_family: None,\n+        os_family: None,\n         tls_model: TlsModel::InitialExec,\n         ..Default::default()\n     }"}, {"sha": "622f0d9a471982319542bee3ba132ba5554359ae", "filename": "compiler/rustc_target/src/spec/hermit_kernel_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhermit_kernel_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhermit_kernel_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhermit_kernel_base.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -9,7 +9,7 @@ pub fn opts() -> TargetOptions {\n     );\n \n     TargetOptions {\n-        target_os: \"hermit\".to_string(),\n+        os: \"hermit\".to_string(),\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         disable_redzone: true,\n         linker: Some(\"rust-lld\".to_owned()),\n@@ -21,7 +21,7 @@ pub fn opts() -> TargetOptions {\n         position_independent_executables: true,\n         static_position_independent_executables: true,\n         relocation_model: RelocModel::Pic,\n-        target_family: None,\n+        os_family: None,\n         tls_model: TlsModel::InitialExec,\n         ..Default::default()\n     }"}, {"sha": "0ab40340928cc5d991b3d9593dd634be2a006932", "filename": "compiler/rustc_target/src/spec/i686_apple_darwin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -22,6 +22,6 @@ pub fn target() -> Target {\n             f64:32:64-f80:128-n8:16:32-S128\"\n             .to_string(),\n         arch: \"x86\".to_string(),\n-        options: TargetOptions { target_mcount: \"\\u{1}mcount\".to_string(), ..base },\n+        options: TargetOptions { mcount: \"\\u{1}mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "c22139b5875d6f5d7322f0dbd9ef0a5958deab37", "filename": "compiler/rustc_target/src/spec/i686_unknown_netbsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_netbsd.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -14,6 +14,6 @@ pub fn target() -> Target {\n             f64:32:64-f80:32-n8:16:32-S128\"\n             .to_string(),\n         arch: \"x86\".to_string(),\n-        options: TargetOptions { target_mcount: \"__mcount\".to_string(), ..base },\n+        options: TargetOptions { mcount: \"__mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "d9b5716c0418528202a5bcda0d48e8b8262370f2", "filename": "compiler/rustc_target/src/spec/illumos_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fillumos_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fillumos_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fillumos_base.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -16,11 +16,11 @@ pub fn opts() -> TargetOptions {\n     );\n \n     TargetOptions {\n-        target_os: \"illumos\".to_string(),\n+        os: \"illumos\".to_string(),\n         dynamic_linking: true,\n         executables: true,\n         has_rpath: true,\n-        target_family: Some(\"unix\".to_string()),\n+        os_family: Some(\"unix\".to_string()),\n         is_like_solaris: true,\n         limit_rdylib_exports: false, // Linker doesn't support this\n         eliminate_frame_pointer: false,"}, {"sha": "660fae5f5c7cd5675a08f16c71ddf6c2ab583324", "filename": "compiler/rustc_target/src/spec/l4re_base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fl4re_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fl4re_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fl4re_base.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -17,15 +17,15 @@ pub fn opts() -> TargetOptions {\n     args.insert(LinkerFlavor::Gcc, vec![]);\n \n     TargetOptions {\n-        target_os: \"l4re\".to_string(),\n-        target_env: \"uclibc\".to_string(),\n+        os: \"l4re\".to_string(),\n+        env: \"uclibc\".to_string(),\n         linker_flavor: LinkerFlavor::Ld,\n         executables: true,\n         has_elf_tls: false,\n         panic_strategy: PanicStrategy::Abort,\n         linker: Some(\"ld\".to_string()),\n         pre_link_args: args,\n-        target_family: Some(\"unix\".to_string()),\n+        os_family: Some(\"unix\".to_string()),\n         ..Default::default()\n     }\n }"}, {"sha": "a83cceb24ee9ff8cac556b5a17dd13cbf583fb15", "filename": "compiler/rustc_target/src/spec/linux_base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_base.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -19,11 +19,11 @@ pub fn opts() -> TargetOptions {\n     );\n \n     TargetOptions {\n-        target_os: \"linux\".to_string(),\n-        target_env: \"gnu\".to_string(),\n+        os: \"linux\".to_string(),\n+        env: \"gnu\".to_string(),\n         dynamic_linking: true,\n         executables: true,\n-        target_family: Some(\"unix\".to_string()),\n+        os_family: Some(\"unix\".to_string()),\n         linker_is_gnu: true,\n         has_rpath: true,\n         pre_link_args: args,"}, {"sha": "a5fc1649e7ffdd7d28d64e1a55d9ba0b0530b9bc", "filename": "compiler/rustc_target/src/spec/linux_kernel_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_kernel_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_kernel_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_kernel_base.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -8,7 +8,7 @@ pub fn opts() -> TargetOptions {\n     );\n \n     TargetOptions {\n-        target_env: \"gnu\".to_string(),\n+        env: \"gnu\".to_string(),\n         disable_redzone: true,\n         panic_strategy: PanicStrategy::Abort,\n         stack_probes: true,"}, {"sha": "5038a967d0a0fac243fda72e0fa9d1e7a51a4d58", "filename": "compiler/rustc_target/src/spec/linux_musl_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_musl_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_musl_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_musl_base.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -4,7 +4,7 @@ use crate::spec::TargetOptions;\n pub fn opts() -> TargetOptions {\n     let mut base = super::linux_base::opts();\n \n-    base.target_env = \"musl\".to_string();\n+    base.env = \"musl\".to_string();\n     base.pre_link_objects_fallback = crt_objects::pre_musl_fallback();\n     base.post_link_objects_fallback = crt_objects::post_musl_fallback();\n     base.crt_objects_fallback = Some(CrtObjectsFallback::Musl);"}, {"sha": "ef6d50656e467c5f06fe2ea5f009eb3188043500", "filename": "compiler/rustc_target/src/spec/linux_uclibc_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_uclibc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_uclibc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_uclibc_base.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -1,5 +1,5 @@\n use crate::spec::TargetOptions;\n \n pub fn opts() -> TargetOptions {\n-    TargetOptions { target_env: \"uclibc\".to_string(), ..super::linux_base::opts() }\n+    TargetOptions { env: \"uclibc\".to_string(), ..super::linux_base::opts() }\n }"}, {"sha": "593be2549fd460b35d9646f4dfb453ee32939280", "filename": "compiler/rustc_target/src/spec/mips64_unknown_linux_gnuabi64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64_unknown_linux_gnuabi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64_unknown_linux_gnuabi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64_unknown_linux_gnuabi64.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -7,12 +7,12 @@ pub fn target() -> Target {\n         data_layout: \"E-m:e-i8:8:32-i16:16:32-i64:64-n32:64-S128\".to_string(),\n         arch: \"mips64\".to_string(),\n         options: TargetOptions {\n-            target_endian: \"big\".to_string(),\n+            endian: \"big\".to_string(),\n             // NOTE(mips64r2) matches C toolchain\n             cpu: \"mips64r2\".to_string(),\n             features: \"+mips64r2\".to_string(),\n             max_atomic_width: Some(64),\n-            target_mcount: \"_mcount\".to_string(),\n+            mcount: \"_mcount\".to_string(),\n \n             ..super::linux_base::opts()\n         },"}, {"sha": "db8d0c04e6f5c269e8d3d75376aadd31eab7bfcb", "filename": "compiler/rustc_target/src/spec/mips64_unknown_linux_muslabi64.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64_unknown_linux_muslabi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64_unknown_linux_muslabi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64_unknown_linux_muslabi64.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -11,10 +11,6 @@ pub fn target() -> Target {\n         pointer_width: 64,\n         data_layout: \"E-m:e-i8:8:32-i16:16:32-i64:64-n32:64-S128\".to_string(),\n         arch: \"mips64\".to_string(),\n-        options: TargetOptions {\n-            target_endian: \"big\".to_string(),\n-            target_mcount: \"_mcount\".to_string(),\n-            ..base\n-        },\n+        options: TargetOptions { endian: \"big\".to_string(), mcount: \"_mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "eed8a56d86a4c3dff9b9984d014bcea68a47c22d", "filename": "compiler/rustc_target/src/spec/mips64el_unknown_linux_gnuabi64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64el_unknown_linux_gnuabi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64el_unknown_linux_gnuabi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64el_unknown_linux_gnuabi64.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -11,7 +11,7 @@ pub fn target() -> Target {\n             cpu: \"mips64r2\".to_string(),\n             features: \"+mips64r2\".to_string(),\n             max_atomic_width: Some(64),\n-            target_mcount: \"_mcount\".to_string(),\n+            mcount: \"_mcount\".to_string(),\n \n             ..super::linux_base::opts()\n         },"}, {"sha": "766ed69df4bb8444ecb6ec8b4bedbcaa1ed0275b", "filename": "compiler/rustc_target/src/spec/mips64el_unknown_linux_muslabi64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64el_unknown_linux_muslabi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64el_unknown_linux_muslabi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64el_unknown_linux_muslabi64.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -11,6 +11,6 @@ pub fn target() -> Target {\n         pointer_width: 64,\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-n32:64-S128\".to_string(),\n         arch: \"mips64\".to_string(),\n-        options: TargetOptions { target_mcount: \"_mcount\".to_string(), ..base },\n+        options: TargetOptions { mcount: \"_mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "b746ac351d711cea9c820223f002004900ac6b22", "filename": "compiler/rustc_target/src/spec/mips_unknown_linux_gnu.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips_unknown_linux_gnu.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -7,11 +7,11 @@ pub fn target() -> Target {\n         data_layout: \"E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64\".to_string(),\n         arch: \"mips\".to_string(),\n         options: TargetOptions {\n-            target_endian: \"big\".to_string(),\n+            endian: \"big\".to_string(),\n             cpu: \"mips32r2\".to_string(),\n             features: \"+mips32r2,+fpxx,+nooddspreg\".to_string(),\n             max_atomic_width: Some(32),\n-            target_mcount: \"_mcount\".to_string(),\n+            mcount: \"_mcount\".to_string(),\n \n             ..super::linux_base::opts()\n         },"}, {"sha": "1ebe577bc1c4ac0e7bd446a2247cf8dc49d4e6dd", "filename": "compiler/rustc_target/src/spec/mips_unknown_linux_musl.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips_unknown_linux_musl.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -11,10 +11,6 @@ pub fn target() -> Target {\n         pointer_width: 32,\n         data_layout: \"E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64\".to_string(),\n         arch: \"mips\".to_string(),\n-        options: TargetOptions {\n-            target_endian: \"big\".to_string(),\n-            target_mcount: \"_mcount\".to_string(),\n-            ..base\n-        },\n+        options: TargetOptions { endian: \"big\".to_string(), mcount: \"_mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "2123d5e1a0f78cff55bf020168075940618fa9c8", "filename": "compiler/rustc_target/src/spec/mips_unknown_linux_uclibc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips_unknown_linux_uclibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips_unknown_linux_uclibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips_unknown_linux_uclibc.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -7,11 +7,11 @@ pub fn target() -> Target {\n         data_layout: \"E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64\".to_string(),\n         arch: \"mips\".to_string(),\n         options: TargetOptions {\n-            target_endian: \"big\".to_string(),\n+            endian: \"big\".to_string(),\n             cpu: \"mips32r2\".to_string(),\n             features: \"+mips32r2,+soft-float\".to_string(),\n             max_atomic_width: Some(32),\n-            target_mcount: \"_mcount\".to_string(),\n+            mcount: \"_mcount\".to_string(),\n \n             ..super::linux_uclibc_base::opts()\n         },"}, {"sha": "08c290e6ff151233c05b1c8acaf667f180c977bd", "filename": "compiler/rustc_target/src/spec/mipsel_sony_psp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_sony_psp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_sony_psp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_sony_psp.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -15,8 +15,8 @@ pub fn target() -> Target {\n         arch: \"mips\".to_string(),\n \n         options: TargetOptions {\n-            target_os: \"psp\".to_string(),\n-            target_vendor: \"sony\".to_string(),\n+            os: \"psp\".to_string(),\n+            vendor: \"sony\".to_string(),\n             linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n             cpu: \"mips2\".to_string(),\n             executables: true,"}, {"sha": "e0f8350ee88e3e897179ec09a295b586beaec8f1", "filename": "compiler/rustc_target/src/spec/mipsel_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_linux_gnu.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -11,7 +11,7 @@ pub fn target() -> Target {\n             cpu: \"mips32r2\".to_string(),\n             features: \"+mips32r2,+fpxx,+nooddspreg\".to_string(),\n             max_atomic_width: Some(32),\n-            target_mcount: \"_mcount\".to_string(),\n+            mcount: \"_mcount\".to_string(),\n \n             ..super::linux_base::opts()\n         },"}, {"sha": "3374cdd44858572224b05857c6febc0255b9e4b4", "filename": "compiler/rustc_target/src/spec/mipsel_unknown_linux_musl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_linux_musl.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -11,6 +11,6 @@ pub fn target() -> Target {\n         pointer_width: 32,\n         data_layout: \"e-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64\".to_string(),\n         arch: \"mips\".to_string(),\n-        options: TargetOptions { target_mcount: \"_mcount\".to_string(), ..base },\n+        options: TargetOptions { mcount: \"_mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "0831eb7a0a7d468773792011a7e75e3a133df257", "filename": "compiler/rustc_target/src/spec/mipsel_unknown_linux_uclibc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_linux_uclibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_linux_uclibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_linux_uclibc.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -11,7 +11,7 @@ pub fn target() -> Target {\n             cpu: \"mips32r2\".to_string(),\n             features: \"+mips32r2,+soft-float\".to_string(),\n             max_atomic_width: Some(32),\n-            target_mcount: \"_mcount\".to_string(),\n+            mcount: \"_mcount\".to_string(),\n \n             ..super::linux_uclibc_base::opts()\n         },"}, {"sha": "a8005927a7bebd4bb037718ec318889ba7cfdbfb", "filename": "compiler/rustc_target/src/spec/mipsel_unknown_none.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_none.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -14,7 +14,7 @@ pub fn target() -> Target {\n         arch: \"mips\".to_string(),\n \n         options: TargetOptions {\n-            target_vendor: String::new(),\n+            vendor: String::new(),\n             linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n             cpu: \"mips32r2\".to_string(),\n             features: \"+mips32r2,+soft-float,+noabicalls\".to_string(),"}, {"sha": "9a649ec52a276d513c69ed653fce261d4a818000", "filename": "compiler/rustc_target/src/spec/mipsisa32r6_unknown_linux_gnu.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa32r6_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa32r6_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa32r6_unknown_linux_gnu.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -7,11 +7,11 @@ pub fn target() -> Target {\n         data_layout: \"E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64\".to_string(),\n         arch: \"mips\".to_string(),\n         options: TargetOptions {\n-            target_endian: \"big\".to_string(),\n+            endian: \"big\".to_string(),\n             cpu: \"mips32r6\".to_string(),\n             features: \"+mips32r6\".to_string(),\n             max_atomic_width: Some(32),\n-            target_mcount: \"_mcount\".to_string(),\n+            mcount: \"_mcount\".to_string(),\n \n             ..super::linux_base::opts()\n         },"}, {"sha": "20fbefe6f2e8d33a9170fc8456713fe19851c052", "filename": "compiler/rustc_target/src/spec/mipsisa32r6el_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa32r6el_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa32r6el_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa32r6el_unknown_linux_gnu.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -11,7 +11,7 @@ pub fn target() -> Target {\n             cpu: \"mips32r6\".to_string(),\n             features: \"+mips32r6\".to_string(),\n             max_atomic_width: Some(32),\n-            target_mcount: \"_mcount\".to_string(),\n+            mcount: \"_mcount\".to_string(),\n \n             ..super::linux_base::opts()\n         },"}, {"sha": "a5da3e5d42c4bf329898b5ed47e17ec51550f0e3", "filename": "compiler/rustc_target/src/spec/mipsisa64r6_unknown_linux_gnuabi64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa64r6_unknown_linux_gnuabi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa64r6_unknown_linux_gnuabi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa64r6_unknown_linux_gnuabi64.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -7,12 +7,12 @@ pub fn target() -> Target {\n         data_layout: \"E-m:e-i8:8:32-i16:16:32-i64:64-n32:64-S128\".to_string(),\n         arch: \"mips64\".to_string(),\n         options: TargetOptions {\n-            target_endian: \"big\".to_string(),\n+            endian: \"big\".to_string(),\n             // NOTE(mips64r6) matches C toolchain\n             cpu: \"mips64r6\".to_string(),\n             features: \"+mips64r6\".to_string(),\n             max_atomic_width: Some(64),\n-            target_mcount: \"_mcount\".to_string(),\n+            mcount: \"_mcount\".to_string(),\n \n             ..super::linux_base::opts()\n         },"}, {"sha": "73fbbaed4d5b9c272cf1d8b767068fd8b9472175", "filename": "compiler/rustc_target/src/spec/mipsisa64r6el_unknown_linux_gnuabi64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa64r6el_unknown_linux_gnuabi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa64r6el_unknown_linux_gnuabi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa64r6el_unknown_linux_gnuabi64.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -11,7 +11,7 @@ pub fn target() -> Target {\n             cpu: \"mips64r6\".to_string(),\n             features: \"+mips64r6\".to_string(),\n             max_atomic_width: Some(64),\n-            target_mcount: \"_mcount\".to_string(),\n+            mcount: \"_mcount\".to_string(),\n \n             ..super::linux_base::opts()\n         },"}, {"sha": "667c926322b4ab7cb851c43ab4ba6861475b9ce9", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 36, "deletions": 28, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -701,15 +701,15 @@ pub struct TargetOptions {\n     pub is_builtin: bool,\n \n     /// String to use as the `target_endian` `cfg` variable. Defaults to \"little\".\n-    pub target_endian: String,\n+    pub endian: String,\n     /// Width of c_int type. Defaults to \"32\".\n-    pub target_c_int_width: String,\n+    pub c_int_width: String,\n     /// OS name to use for conditional compilation. Defaults to \"none\".\n-    pub target_os: String,\n+    pub os: String,\n     /// Environment name to use for conditional compilation. Defaults to \"\".\n-    pub target_env: String,\n+    pub env: String,\n     /// Vendor name to use for conditional compilation. Defaults to \"unknown\".\n-    pub target_vendor: String,\n+    pub vendor: String,\n     /// Default linker flavor used if `-C linker-flavor` or `-C linker` are not passed\n     /// on the command line. Defaults to `LinkerFlavor::Gcc`.\n     pub linker_flavor: LinkerFlavor,\n@@ -800,7 +800,7 @@ pub struct TargetOptions {\n     /// String to append to the name of every static library. Defaults to \".a\".\n     pub staticlib_suffix: String,\n     /// OS family to use for conditional compilation. Valid options: \"unix\", \"windows\".\n-    pub target_family: Option<String>,\n+    pub os_family: Option<String>,\n     /// Whether the target toolchain's ABI supports returning small structs as an integer.\n     pub abi_return_struct_as_int: bool,\n     /// Whether the target toolchain is like macOS's. Only useful for compiling against iOS/macOS,\n@@ -961,7 +961,7 @@ pub struct TargetOptions {\n     pub merge_functions: MergeFunctions,\n \n     /// Use platform dependent mcount function\n-    pub target_mcount: String,\n+    pub mcount: String,\n \n     /// LLVM ABI name, corresponds to the '-mabi' parameter available in multilib C compilers\n     pub llvm_abiname: String,\n@@ -992,11 +992,11 @@ impl Default for TargetOptions {\n     fn default() -> TargetOptions {\n         TargetOptions {\n             is_builtin: false,\n-            target_endian: \"little\".to_string(),\n-            target_c_int_width: \"32\".to_string(),\n-            target_os: \"none\".to_string(),\n-            target_env: String::new(),\n-            target_vendor: \"unknown\".to_string(),\n+            endian: \"little\".to_string(),\n+            c_int_width: \"32\".to_string(),\n+            os: \"none\".to_string(),\n+            env: String::new(),\n+            vendor: \"unknown\".to_string(),\n             linker_flavor: LinkerFlavor::Gcc,\n             linker: option_env!(\"CFG_DEFAULT_LINKER\").map(|s| s.to_string()),\n             lld_flavor: LldFlavor::Ld,\n@@ -1020,7 +1020,7 @@ impl Default for TargetOptions {\n             exe_suffix: String::new(),\n             staticlib_prefix: \"lib\".to_string(),\n             staticlib_suffix: \".a\".to_string(),\n-            target_family: None,\n+            os_family: None,\n             abi_return_struct_as_int: false,\n             is_like_osx: false,\n             is_like_solaris: false,\n@@ -1077,7 +1077,7 @@ impl Default for TargetOptions {\n             limit_rdylib_exports: true,\n             override_export_symbols: None,\n             merge_functions: MergeFunctions::Aliases,\n-            target_mcount: \"mcount\".to_string(),\n+            mcount: \"mcount\".to_string(),\n             llvm_abiname: \"\".to_string(),\n             relax_elf_relocations: false,\n             llvm_args: vec![],\n@@ -1306,6 +1306,14 @@ impl Target {\n                         .map(|s| s.to_string() );\n                 }\n             } );\n+            ($key_name:ident = $json_name:expr, optional) => ( {\n+                let name = $json_name;\n+                if let Some(o) = obj.find(&name[..]) {\n+                    base.$key_name = o\n+                        .as_string()\n+                        .map(|s| s.to_string() );\n+                }\n+            } );\n             ($key_name:ident, LldFlavor) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 obj.find(&name[..]).and_then(|o| o.as_string().and_then(|s| {\n@@ -1415,11 +1423,11 @@ impl Target {\n         }\n \n         key!(is_builtin, bool);\n-        key!(target_endian);\n-        key!(target_c_int_width);\n-        key!(target_os = \"os\");\n-        key!(target_env = \"env\");\n-        key!(target_vendor = \"vendor\");\n+        key!(endian = \"target_endian\");\n+        key!(c_int_width = \"target_c_int_width\");\n+        key!(os);\n+        key!(env);\n+        key!(vendor);\n         key!(linker_flavor, LinkerFlavor)?;\n         key!(linker, optional);\n         key!(lld_flavor, LldFlavor)?;\n@@ -1453,7 +1461,7 @@ impl Target {\n         key!(exe_suffix);\n         key!(staticlib_prefix);\n         key!(staticlib_suffix);\n-        key!(target_family, optional);\n+        key!(os_family = \"target_family\", optional);\n         key!(abi_return_struct_as_int, bool);\n         key!(is_like_osx, bool);\n         key!(is_like_solaris, bool);\n@@ -1499,7 +1507,7 @@ impl Target {\n         key!(limit_rdylib_exports, bool);\n         key!(override_export_symbols, opt_list);\n         key!(merge_functions, MergeFunctions)?;\n-        key!(target_mcount);\n+        key!(mcount = \"target_mcount\");\n         key!(llvm_abiname);\n         key!(relax_elf_relocations, bool);\n         key!(llvm_args, list);\n@@ -1651,11 +1659,11 @@ impl ToJson for Target {\n         target_val!(data_layout);\n \n         target_option_val!(is_builtin);\n-        target_option_val!(target_endian);\n-        target_option_val!(target_c_int_width);\n-        target_option_val!(target_os, \"os\");\n-        target_option_val!(target_env, \"env\");\n-        target_option_val!(target_vendor, \"vendor\");\n+        target_option_val!(endian, \"target_endian\");\n+        target_option_val!(c_int_width, \"target_c_int_width\");\n+        target_option_val!(os);\n+        target_option_val!(env);\n+        target_option_val!(vendor);\n         target_option_val!(linker_flavor);\n         target_option_val!(linker);\n         target_option_val!(lld_flavor);\n@@ -1689,7 +1697,7 @@ impl ToJson for Target {\n         target_option_val!(exe_suffix);\n         target_option_val!(staticlib_prefix);\n         target_option_val!(staticlib_suffix);\n-        target_option_val!(target_family);\n+        target_option_val!(os_family, \"target_family\");\n         target_option_val!(abi_return_struct_as_int);\n         target_option_val!(is_like_osx);\n         target_option_val!(is_like_solaris);\n@@ -1735,7 +1743,7 @@ impl ToJson for Target {\n         target_option_val!(limit_rdylib_exports);\n         target_option_val!(override_export_symbols);\n         target_option_val!(merge_functions);\n-        target_option_val!(target_mcount);\n+        target_option_val!(mcount, \"target_mcount\");\n         target_option_val!(llvm_abiname);\n         target_option_val!(relax_elf_relocations);\n         target_option_val!(llvm_args);"}, {"sha": "ef966cb702ec451fe5e3afd085ab757e137dd46b", "filename": "compiler/rustc_target/src/spec/msp430_none_elf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmsp430_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmsp430_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmsp430_none_elf.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -8,8 +8,8 @@ pub fn target() -> Target {\n         arch: \"msp430\".to_string(),\n \n         options: TargetOptions {\n-            target_c_int_width: \"16\".to_string(),\n-            target_vendor: String::new(),\n+            c_int_width: \"16\".to_string(),\n+            vendor: String::new(),\n             executables: true,\n \n             // The LLVM backend currently can't generate object files. To"}, {"sha": "a77d60bd9d74705ead46c79c000ce186eed72ff6", "filename": "compiler/rustc_target/src/spec/netbsd_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnetbsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnetbsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnetbsd_base.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -14,10 +14,10 @@ pub fn opts() -> TargetOptions {\n     );\n \n     TargetOptions {\n-        target_os: \"netbsd\".to_string(),\n+        os: \"netbsd\".to_string(),\n         dynamic_linking: true,\n         executables: true,\n-        target_family: Some(\"unix\".to_string()),\n+        os_family: Some(\"unix\".to_string()),\n         linker_is_gnu: true,\n         no_default_libraries: false,\n         has_rpath: true,"}, {"sha": "3c9c7d578fbd463db9223dcdaf8bcf7ade8c767c", "filename": "compiler/rustc_target/src/spec/nvptx64_nvidia_cuda.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnvptx64_nvidia_cuda.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnvptx64_nvidia_cuda.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnvptx64_nvidia_cuda.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -9,8 +9,8 @@ pub fn target() -> Target {\n         pointer_width: 64,\n \n         options: TargetOptions {\n-            target_os: \"cuda\".to_string(),\n-            target_vendor: \"nvidia\".to_string(),\n+            os: \"cuda\".to_string(),\n+            vendor: \"nvidia\".to_string(),\n             linker_flavor: LinkerFlavor::PtxLinker,\n             // The linker can be installed from `crates.io`.\n             linker: Some(\"rust-ptx-linker\".to_string()),"}, {"sha": "2b40a1ed945cf8f713cb2964543402a3758f392e", "filename": "compiler/rustc_target/src/spec/openbsd_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fopenbsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fopenbsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fopenbsd_base.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -16,10 +16,10 @@ pub fn opts() -> TargetOptions {\n     );\n \n     TargetOptions {\n-        target_os: \"openbsd\".to_string(),\n+        os: \"openbsd\".to_string(),\n         dynamic_linking: true,\n         executables: true,\n-        target_family: Some(\"unix\".to_string()),\n+        os_family: Some(\"unix\".to_string()),\n         linker_is_gnu: true,\n         has_rpath: true,\n         abi_return_struct_as_int: true,"}, {"sha": "626865aa242fe6191428e49e651487c643dbd13b", "filename": "compiler/rustc_target/src/spec/powerpc64_unknown_freebsd.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_freebsd.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -11,10 +11,6 @@ pub fn target() -> Target {\n         pointer_width: 64,\n         data_layout: \"E-m:e-i64:64-n32:64\".to_string(),\n         arch: \"powerpc64\".to_string(),\n-        options: TargetOptions {\n-            target_endian: \"big\".to_string(),\n-            target_mcount: \"_mcount\".to_string(),\n-            ..base\n-        },\n+        options: TargetOptions { endian: \"big\".to_string(), mcount: \"_mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "27515ac6e1f9f84b09a93c70cf086d1c6ff99fbf", "filename": "compiler/rustc_target/src/spec/powerpc64_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_gnu.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -15,10 +15,6 @@ pub fn target() -> Target {\n         pointer_width: 64,\n         data_layout: \"E-m:e-i64:64-n32:64\".to_string(),\n         arch: \"powerpc64\".to_string(),\n-        options: TargetOptions {\n-            target_endian: \"big\".to_string(),\n-            target_mcount: \"_mcount\".to_string(),\n-            ..base\n-        },\n+        options: TargetOptions { endian: \"big\".to_string(), mcount: \"_mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "231539756f375332aac2cf9e464cbe650a4f5f6c", "filename": "compiler/rustc_target/src/spec/powerpc64_unknown_linux_musl.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_musl.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -11,10 +11,6 @@ pub fn target() -> Target {\n         pointer_width: 64,\n         data_layout: \"E-m:e-i64:64-n32:64\".to_string(),\n         arch: \"powerpc64\".to_string(),\n-        options: TargetOptions {\n-            target_endian: \"big\".to_string(),\n-            target_mcount: \"_mcount\".to_string(),\n-            ..base\n-        },\n+        options: TargetOptions { endian: \"big\".to_string(), mcount: \"_mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "1c83e3e64d4360976794d6f72d211333f7dbce3e", "filename": "compiler/rustc_target/src/spec/powerpc64_wrs_vxworks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_wrs_vxworks.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -11,6 +11,6 @@ pub fn target() -> Target {\n         pointer_width: 64,\n         data_layout: \"E-m:e-i64:64-n32:64\".to_string(),\n         arch: \"powerpc64\".to_string(),\n-        options: TargetOptions { target_endian: \"big\".to_string(), ..base },\n+        options: TargetOptions { endian: \"big\".to_string(), ..base },\n     }\n }"}, {"sha": "3c4389c5a7ccaa85532ec05cde788bd93e6fe329", "filename": "compiler/rustc_target/src/spec/powerpc64le_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_gnu.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -11,6 +11,6 @@ pub fn target() -> Target {\n         pointer_width: 64,\n         data_layout: \"e-m:e-i64:64-n32:64\".to_string(),\n         arch: \"powerpc64\".to_string(),\n-        options: TargetOptions { target_mcount: \"_mcount\".to_string(), ..base },\n+        options: TargetOptions { mcount: \"_mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "41c78a5f276334091c7d76fd60a4d2c0a2b37828", "filename": "compiler/rustc_target/src/spec/powerpc64le_unknown_linux_musl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_musl.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -11,6 +11,6 @@ pub fn target() -> Target {\n         pointer_width: 64,\n         data_layout: \"e-m:e-i64:64-n32:64\".to_string(),\n         arch: \"powerpc64\".to_string(),\n-        options: TargetOptions { target_mcount: \"_mcount\".to_string(), ..base },\n+        options: TargetOptions { mcount: \"_mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "ece01705c45181e85ba9748d26ed4e95f2882980", "filename": "compiler/rustc_target/src/spec/powerpc_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnu.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -10,10 +10,6 @@ pub fn target() -> Target {\n         pointer_width: 32,\n         data_layout: \"E-m:e-p:32:32-i64:64-n32\".to_string(),\n         arch: \"powerpc\".to_string(),\n-        options: TargetOptions {\n-            target_endian: \"big\".to_string(),\n-            target_mcount: \"_mcount\".to_string(),\n-            ..base\n-        },\n+        options: TargetOptions { endian: \"big\".to_string(), mcount: \"_mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "35c28787471055cbe907b8d282fcd6dbc99bcfd8", "filename": "compiler/rustc_target/src/spec/powerpc_unknown_linux_gnuspe.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnuspe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnuspe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnuspe.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -10,10 +10,6 @@ pub fn target() -> Target {\n         pointer_width: 32,\n         data_layout: \"E-m:e-p:32:32-i64:64-n32\".to_string(),\n         arch: \"powerpc\".to_string(),\n-        options: TargetOptions {\n-            target_endian: \"big\".to_string(),\n-            target_mcount: \"_mcount\".to_string(),\n-            ..base\n-        },\n+        options: TargetOptions { endian: \"big\".to_string(), mcount: \"_mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "49d329447893a0d4bcf5298e14e306ffc279f0b1", "filename": "compiler/rustc_target/src/spec/powerpc_unknown_linux_musl.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_musl.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -10,10 +10,6 @@ pub fn target() -> Target {\n         pointer_width: 32,\n         data_layout: \"E-m:e-p:32:32-i64:64-n32\".to_string(),\n         arch: \"powerpc\".to_string(),\n-        options: TargetOptions {\n-            target_endian: \"big\".to_string(),\n-            target_mcount: \"_mcount\".to_string(),\n-            ..base\n-        },\n+        options: TargetOptions { endian: \"big\".to_string(), mcount: \"_mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "387d6cdc456a7032b3097ec816ee7766115c438b", "filename": "compiler/rustc_target/src/spec/powerpc_unknown_netbsd.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_netbsd.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -11,8 +11,8 @@ pub fn target() -> Target {\n         data_layout: \"E-m:e-p:32:32-i64:64-n32\".to_string(),\n         arch: \"powerpc\".to_string(),\n         options: TargetOptions {\n-            target_endian: \"big\".to_string(),\n-            target_mcount: \"__mcount\".to_string(),\n+            endian: \"big\".to_string(),\n+            mcount: \"__mcount\".to_string(),\n             ..base\n         },\n     }"}, {"sha": "20ffa07b9979f20f697e1e3c555ec4b0212cc729", "filename": "compiler/rustc_target/src/spec/powerpc_wrs_vxworks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -12,7 +12,7 @@ pub fn target() -> Target {\n         data_layout: \"E-m:e-p:32:32-i64:64-n32\".to_string(),\n         arch: \"powerpc\".to_string(),\n         options: TargetOptions {\n-            target_endian: \"big\".to_string(),\n+            endian: \"big\".to_string(),\n             features: \"+secure-plt\".to_string(),\n             ..base\n         },"}, {"sha": "0e713fccd23b8a925fa98b088df6dee11878c6fc", "filename": "compiler/rustc_target/src/spec/powerpc_wrs_vxworks_spe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks_spe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks_spe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks_spe.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -12,7 +12,7 @@ pub fn target() -> Target {\n         data_layout: \"E-m:e-p:32:32-i64:64-n32\".to_string(),\n         arch: \"powerpc\".to_string(),\n         options: TargetOptions {\n-            target_endian: \"big\".to_string(),\n+            endian: \"big\".to_string(),\n             // feature msync would disable instruction 'fsync' which is not supported by fsl_p1p2\n             features: \"+secure-plt,+msync\".to_string(),\n             ..base"}, {"sha": "5ef705878a8ff98fa5805e4827d801d91350734e", "filename": "compiler/rustc_target/src/spec/redox_base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fredox_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fredox_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fredox_base.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -19,11 +19,11 @@ pub fn opts() -> TargetOptions {\n     );\n \n     TargetOptions {\n-        target_os: \"redox\".to_string(),\n-        target_env: \"relibc\".to_string(),\n+        os: \"redox\".to_string(),\n+        env: \"relibc\".to_string(),\n         dynamic_linking: true,\n         executables: true,\n-        target_family: Some(\"unix\".to_string()),\n+        os_family: Some(\"unix\".to_string()),\n         linker_is_gnu: true,\n         has_rpath: true,\n         pre_link_args: args,"}, {"sha": "258b83a1c6e1b9a451b4bf4684346d2f3da3048e", "filename": "compiler/rustc_target/src/spec/s390x_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fs390x_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fs390x_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fs390x_unknown_linux_gnu.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -2,7 +2,7 @@ use crate::spec::Target;\n \n pub fn target() -> Target {\n     let mut base = super::linux_base::opts();\n-    base.target_endian = \"big\".to_string();\n+    base.endian = \"big\".to_string();\n     // z10 is the oldest CPU supported by LLVM\n     base.cpu = \"z10\".to_string();\n     // FIXME: The data_layout string below and the ABI implementation in"}, {"sha": "33e0cf8e96752b353ac7a375975a2906ba8062c9", "filename": "compiler/rustc_target/src/spec/solaris_base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsolaris_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsolaris_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsolaris_base.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -2,12 +2,12 @@ use crate::spec::TargetOptions;\n \n pub fn opts() -> TargetOptions {\n     TargetOptions {\n-        target_os: \"solaris\".to_string(),\n-        target_vendor: \"sun\".to_string(),\n+        os: \"solaris\".to_string(),\n+        vendor: \"sun\".to_string(),\n         dynamic_linking: true,\n         executables: true,\n         has_rpath: true,\n-        target_family: Some(\"unix\".to_string()),\n+        os_family: Some(\"unix\".to_string()),\n         is_like_solaris: true,\n         limit_rdylib_exports: false, // Linker doesn't support this\n         eh_frame_header: false,"}, {"sha": "4b5ee050d7265e3890c346cb5306ac29b71e57b3", "filename": "compiler/rustc_target/src/spec/sparc64_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_linux_gnu.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -2,7 +2,7 @@ use crate::spec::Target;\n \n pub fn target() -> Target {\n     let mut base = super::linux_base::opts();\n-    base.target_endian = \"big\".to_string();\n+    base.endian = \"big\".to_string();\n     base.cpu = \"v9\".to_string();\n     base.max_atomic_width = Some(64);\n "}, {"sha": "c8e90f832d034f042eb58b5494ae3df48ad8f090", "filename": "compiler/rustc_target/src/spec/sparc64_unknown_netbsd.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_netbsd.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -12,8 +12,8 @@ pub fn target() -> Target {\n         data_layout: \"E-m:e-i64:64-n32:64-S128\".to_string(),\n         arch: \"sparc64\".to_string(),\n         options: TargetOptions {\n-            target_endian: \"big\".to_string(),\n-            target_mcount: \"__mcount\".to_string(),\n+            endian: \"big\".to_string(),\n+            mcount: \"__mcount\".to_string(),\n             ..base\n         },\n     }"}, {"sha": "630ce6123f9ec992c736a49d32486d8b3966c53a", "filename": "compiler/rustc_target/src/spec/sparc64_unknown_openbsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_openbsd.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -2,7 +2,7 @@ use crate::spec::{LinkerFlavor, Target};\n \n pub fn target() -> Target {\n     let mut base = super::openbsd_base::opts();\n-    base.target_endian = \"big\".to_string();\n+    base.endian = \"big\".to_string();\n     base.cpu = \"v9\".to_string();\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n     base.max_atomic_width = Some(64);"}, {"sha": "8d7b34fe2cbfd380d81c7925014a8f942abd2cc3", "filename": "compiler/rustc_target/src/spec/sparc_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc_unknown_linux_gnu.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -2,7 +2,7 @@ use crate::spec::{LinkerFlavor, Target};\n \n pub fn target() -> Target {\n     let mut base = super::linux_base::opts();\n-    base.target_endian = \"big\".to_string();\n+    base.endian = \"big\".to_string();\n     base.cpu = \"v9\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-mv8plus\".to_string());"}, {"sha": "5f99e0b14f9fb1cdfffa6fae4652d7aa2fa963aa", "filename": "compiler/rustc_target/src/spec/sparcv9_sun_solaris.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparcv9_sun_solaris.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparcv9_sun_solaris.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparcv9_sun_solaris.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -2,7 +2,7 @@ use crate::spec::{LinkerFlavor, Target};\n \n pub fn target() -> Target {\n     let mut base = super::solaris_base::opts();\n-    base.target_endian = \"big\".to_string();\n+    base.endian = \"big\".to_string();\n     base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m64\".to_string()]);\n     // llvm calls this \"v9\"\n     base.cpu = \"v9\".to_string();"}, {"sha": "e55046750275433a6f4190e7fbafa3cf87cac1a9", "filename": "compiler/rustc_target/src/spec/thumb_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumb_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumb_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumb_base.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -32,7 +32,7 @@ use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, TargetOpti\n pub fn opts() -> TargetOptions {\n     // See rust-lang/rfcs#1645 for a discussion about these defaults\n     TargetOptions {\n-        target_vendor: String::new(),\n+        vendor: String::new(),\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         executables: true,\n         // In most cases, LLD is good enough"}, {"sha": "a788167aede07a42f9f3caf2c0a60b12ad580a79", "filename": "compiler/rustc_target/src/spec/thumbv7neon_unknown_linux_musleabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_unknown_linux_musleabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_unknown_linux_musleabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_unknown_linux_musleabihf.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -24,7 +24,7 @@ pub fn target() -> Target {\n             cpu: \"generic\".to_string(),\n             max_atomic_width: Some(64),\n             unsupported_abis: super::arm_base::unsupported_abis(),\n-            target_mcount: \"\\u{1}mcount\".to_string(),\n+            mcount: \"\\u{1}mcount\".to_string(),\n             ..base\n         },\n     }"}, {"sha": "79fe77495e73154e2936e3c8c32fae92c282a99f", "filename": "compiler/rustc_target/src/spec/uefi_msvc_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fuefi_msvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fuefi_msvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fuefi_msvc_base.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -37,7 +37,7 @@ pub fn opts() -> TargetOptions {\n         .extend(pre_link_args_msvc);\n \n     TargetOptions {\n-        target_os: \"uefi\".to_string(),\n+        os: \"uefi\".to_string(),\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Link),\n         disable_redzone: true,\n         exe_suffix: \".efi\".to_string(),"}, {"sha": "70bc9ce3e0e2d7d0389feeac856dd340f0bcc9e4", "filename": "compiler/rustc_target/src/spec/vxworks_base.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fvxworks_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fvxworks_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fvxworks_base.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -17,14 +17,14 @@ pub fn opts() -> TargetOptions {\n     );\n \n     TargetOptions {\n-        target_os: \"vxworks\".to_string(),\n-        target_env: \"gnu\".to_string(),\n-        target_vendor: \"wrs\".to_string(),\n+        os: \"vxworks\".to_string(),\n+        env: \"gnu\".to_string(),\n+        vendor: \"wrs\".to_string(),\n         linker: Some(\"wr-c++\".to_string()),\n         exe_suffix: \".vxe\".to_string(),\n         dynamic_linking: true,\n         executables: true,\n-        target_family: Some(\"unix\".to_string()),\n+        os_family: Some(\"unix\".to_string()),\n         linker_is_gnu: true,\n         has_rpath: true,\n         pre_link_args: args,\n@@ -34,7 +34,7 @@ pub fn opts() -> TargetOptions {\n         crt_static_respected: true,\n         crt_static_allows_dylibs: true,\n         // VxWorks needs to implement this to support profiling\n-        target_mcount: \"_mcount\".to_string(),\n+        mcount: \"_mcount\".to_string(),\n         ..Default::default()\n     }\n }"}, {"sha": "c12757b8f98126d96269e1527259c35413f160e0", "filename": "compiler/rustc_target/src/spec/wasm32_unknown_emscripten.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -17,7 +17,7 @@ pub fn target() -> Target {\n     );\n \n     let opts = TargetOptions {\n-        target_os: \"emscripten\".to_string(),\n+        os: \"emscripten\".to_string(),\n         linker_flavor: LinkerFlavor::Em,\n         // emcc emits two files - a .js file to instantiate the wasm and supply platform\n         // functionality, and a .wasm file.\n@@ -27,7 +27,7 @@ pub fn target() -> Target {\n         is_like_emscripten: true,\n         panic_strategy: PanicStrategy::Unwind,\n         post_link_args,\n-        target_family: Some(\"unix\".to_string()),\n+        os_family: Some(\"unix\".to_string()),\n         ..wasm32_base::options()\n     };\n     Target {"}, {"sha": "6037aa5b4306e56a9d0565781ee84f7e65db1ca7", "filename": "compiler/rustc_target/src/spec/wasm32_unknown_unknown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_unknown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_unknown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_unknown.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -15,7 +15,7 @@ use super::{LinkerFlavor, LldFlavor, Target};\n \n pub fn target() -> Target {\n     let mut options = wasm32_base::options();\n-    options.target_os = \"unknown\".to_string();\n+    options.os = \"unknown\".to_string();\n     options.linker_flavor = LinkerFlavor::Lld(LldFlavor::Wasm);\n     let clang_args = options.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap();\n "}, {"sha": "9c697674f397ad8d178c3363dfb8f9c26797bf87", "filename": "compiler/rustc_target/src/spec/wasm32_wasi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_wasi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_wasi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_wasi.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -78,8 +78,8 @@ use super::{crt_objects, LinkerFlavor, LldFlavor, Target};\n pub fn target() -> Target {\n     let mut options = wasm32_base::options();\n \n-    options.target_os = \"wasi\".to_string();\n-    options.target_vendor = String::new();\n+    options.os = \"wasi\".to_string();\n+    options.vendor = String::new();\n     options.linker_flavor = LinkerFlavor::Lld(LldFlavor::Wasm);\n     options\n         .pre_link_args"}, {"sha": "f556a13a5197f2a7407b5651bbbb11f7bbeb79bb", "filename": "compiler/rustc_target/src/spec/windows_gnu_base.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnu_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnu_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnu_base.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -62,9 +62,9 @@ pub fn opts() -> TargetOptions {\n     late_link_args_static.insert(LinkerFlavor::Lld(LldFlavor::Ld), static_unwind_libs);\n \n     TargetOptions {\n-        target_os: \"windows\".to_string(),\n-        target_env: \"gnu\".to_string(),\n-        target_vendor: \"pc\".to_string(),\n+        os: \"windows\".to_string(),\n+        env: \"gnu\".to_string(),\n+        vendor: \"pc\".to_string(),\n         // FIXME(#13846) this should be enabled for windows\n         function_sections: false,\n         linker: Some(\"gcc\".to_string()),\n@@ -75,7 +75,7 @@ pub fn opts() -> TargetOptions {\n         exe_suffix: \".exe\".to_string(),\n         staticlib_prefix: \"lib\".to_string(),\n         staticlib_suffix: \".a\".to_string(),\n-        target_family: Some(\"windows\".to_string()),\n+        os_family: Some(\"windows\".to_string()),\n         is_like_windows: true,\n         allows_weak_linkage: false,\n         pre_link_args,"}, {"sha": "c041245e32862e960751dbad2cb164b73eea4317", "filename": "compiler/rustc_target/src/spec/windows_msvc_base.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_msvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_msvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_msvc_base.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -4,16 +4,16 @@ pub fn opts() -> TargetOptions {\n     let base = super::msvc_base::opts();\n \n     TargetOptions {\n-        target_os: \"windows\".to_string(),\n-        target_env: \"msvc\".to_string(),\n-        target_vendor: \"pc\".to_string(),\n+        os: \"windows\".to_string(),\n+        env: \"msvc\".to_string(),\n+        vendor: \"pc\".to_string(),\n         dynamic_linking: true,\n         dll_prefix: String::new(),\n         dll_suffix: \".dll\".to_string(),\n         exe_suffix: \".exe\".to_string(),\n         staticlib_prefix: String::new(),\n         staticlib_suffix: \".lib\".to_string(),\n-        target_family: Some(\"windows\".to_string()),\n+        os_family: Some(\"windows\".to_string()),\n         crt_static_allows_dylibs: true,\n         crt_static_respected: true,\n         requires_uwtable: true,"}, {"sha": "67d1be399b3f1f7141a8674f7676394f9830036a", "filename": "compiler/rustc_target/src/spec/windows_uwp_gnu_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_uwp_gnu_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_uwp_gnu_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_uwp_gnu_base.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -25,7 +25,7 @@ pub fn opts() -> TargetOptions {\n     late_link_args.insert(LinkerFlavor::Lld(LldFlavor::Ld), mingw_libs);\n \n     TargetOptions {\n-        target_vendor: \"uwp\".to_string(),\n+        vendor: \"uwp\".to_string(),\n         executables: false,\n         limit_rdylib_exports: false,\n         late_link_args,"}, {"sha": "700ee5ec646dd3bc169a7f6a73bbe8d39061bad1", "filename": "compiler/rustc_target/src/spec/windows_uwp_msvc_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_uwp_msvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_uwp_msvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_uwp_msvc_base.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -3,7 +3,7 @@ use crate::spec::{LinkerFlavor, LldFlavor, TargetOptions};\n pub fn opts() -> TargetOptions {\n     let mut opts = super::windows_msvc_base::opts();\n \n-    opts.target_vendor = \"uwp\".to_string();\n+    opts.vendor = \"uwp\".to_string();\n     let pre_link_args_msvc = vec![\"/APPCONTAINER\".to_string(), \"mincore.lib\".to_string()];\n     opts.pre_link_args.get_mut(&LinkerFlavor::Msvc).unwrap().extend(pre_link_args_msvc.clone());\n     opts.pre_link_args"}, {"sha": "edb33fe6e2b13a06dc1f822fa8fadd68f1496691", "filename": "compiler/rustc_target/src/spec/x86_64_apple_darwin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -24,6 +24,6 @@ pub fn target() -> Target {\n         data_layout: \"e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n             .to_string(),\n         arch: arch.to_string(),\n-        options: TargetOptions { target_mcount: \"\\u{1}mcount\".to_string(), ..base },\n+        options: TargetOptions { mcount: \"\\u{1}mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "74fb6f0a8341ca45a8dcdffe717210aea26cbd9c", "filename": "compiler/rustc_target/src/spec/x86_64_fortanix_unknown_sgx.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -55,9 +55,9 @@ pub fn target() -> Target {\n         \"TEXT_SIZE\",\n     ];\n     let opts = TargetOptions {\n-        target_os: \"unknown\".into(),\n-        target_env: \"sgx\".into(),\n-        target_vendor: \"fortanix\".into(),\n+        os: \"unknown\".into(),\n+        env: \"sgx\".into(),\n+        vendor: \"fortanix\".into(),\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         dynamic_linking: false,\n         executables: true,"}, {"sha": "095c6f15c77ad354c74d58ae67b0608e9ed5492e", "filename": "compiler/rustc_target/src/spec/x86_64_rumprun_netbsd.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_rumprun_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_rumprun_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_rumprun_netbsd.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -2,7 +2,7 @@ use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::netbsd_base::opts();\n-    base.target_vendor = \"rumprun\".to_string();\n+    base.vendor = \"rumprun\".to_string();\n     base.cpu = \"x86-64\".to_string();\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n     base.linker = Some(\"x86_64-rumprun-netbsd-gcc\".to_string());\n@@ -20,6 +20,6 @@ pub fn target() -> Target {\n         data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n             .to_string(),\n         arch: \"x86_64\".to_string(),\n-        options: TargetOptions { target_mcount: \"__mcount\".to_string(), ..base },\n+        options: TargetOptions { mcount: \"__mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "7e91a6ddbe2964f77a04fc24a9559164671ab480", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_netbsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_netbsd.rs?ref=dc004d4809f7e5fb5ea73ac630a0b1bdb58eabe4", "patch": "@@ -13,6 +13,6 @@ pub fn target() -> Target {\n         data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n             .to_string(),\n         arch: \"x86_64\".to_string(),\n-        options: TargetOptions { target_mcount: \"__mcount\".to_string(), ..base },\n+        options: TargetOptions { mcount: \"__mcount\".to_string(), ..base },\n     }\n }"}]}