{"sha": "eb7664b445d4c2a44e31b6557931dda88e7dd071", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViNzY2NGI0NDVkNGMyYTQ0ZTMxYjY1NTc5MzFkZGE4OGU3ZGQwNzE=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-02-11T10:09:01Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-02-09T12:54:30Z"}, "message": "Fix librustdoc test", "tree": {"sha": "46b1dbdf6a308b685a6c0e7bd8a014444b9052d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46b1dbdf6a308b685a6c0e7bd8a014444b9052d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb7664b445d4c2a44e31b6557931dda88e7dd071", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb7664b445d4c2a44e31b6557931dda88e7dd071", "html_url": "https://github.com/rust-lang/rust/commit/eb7664b445d4c2a44e31b6557931dda88e7dd071", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb7664b445d4c2a44e31b6557931dda88e7dd071/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "194f1ca3f12f6240e9eb63051eef8eba7dce4853", "url": "https://api.github.com/repos/rust-lang/rust/commits/194f1ca3f12f6240e9eb63051eef8eba7dce4853", "html_url": "https://github.com/rust-lang/rust/commit/194f1ca3f12f6240e9eb63051eef8eba7dce4853"}], "stats": {"total": 40, "additions": 13, "deletions": 27}, "files": [{"sha": "414370a5437ebfc22aae89d59c79cf289c3cc803", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 9, "deletions": 21, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/eb7664b445d4c2a44e31b6557931dda88e7dd071/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7664b445d4c2a44e31b6557931dda88e7dd071/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=eb7664b445d4c2a44e31b6557931dda88e7dd071", "patch": "@@ -27,14 +27,15 @@\n #![allow(non_camel_case_types)]\n \n use libc;\n+use rustc::session::config::get_unstable_features_setting;\n use std::ascii::AsciiExt;\n use std::cell::RefCell;\n use std::default::Default;\n use std::ffi::CString;\n use std::fmt;\n use std::slice;\n use std::str;\n-use std::env;\n+use syntax::feature_gate::UnstableFeatures;\n \n use html::render::derive_id;\n use html::toc::TocBuilder;\n@@ -440,18 +441,6 @@ pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector) {\n     }\n }\n \n-fn get_unstable_features_setting() -> bool {\n-    // Check if we can activate compile_fail option or not.\n-    //\n-    // It is done to ensure that it won't be used out-of-tree\n-    // because it's not ready yet for production.\n-    match (option_env!(\"CFG_BOOTSTRAP_KEY\"),\n-           env::var(\"RUSTC_BOOTSTRAP_KEY\").ok()) {\n-        (Some(ref cfg), Some(ref r_key)) => cfg == r_key,\n-        _ => false,\n-    }\n-}\n-\n #[derive(Eq, PartialEq, Clone, Debug)]\n struct LangString {\n     should_panic: bool,\n@@ -478,7 +467,10 @@ impl LangString {\n         let mut seen_rust_tags = false;\n         let mut seen_other_tags = false;\n         let mut data = LangString::all_false();\n-        let allow_compile_fail = get_unstable_features_setting();\n+        let allow_compile_fail = match get_unstable_features_setting() {\n+            UnstableFeatures::Allow | UnstableFeatures::Cheat=> true,\n+            _ => false,\n+        };\n \n         let tokens = string.split(|c: char|\n             !(c == '_' || c == '-' || c.is_alphanumeric())\n@@ -487,11 +479,7 @@ impl LangString {\n         for token in tokens {\n             match token {\n                 \"\" => {},\n-                \"should_panic\" => {\n-                    data.should_panic = true;\n-                    seen_rust_tags = true;\n-                    data.no_run = true;\n-                },\n+                \"should_panic\" => { data.should_panic = true; seen_rust_tags = true; },\n                 \"no_run\" => { data.no_run = true; seen_rust_tags = true; },\n                 \"ignore\" => { data.ignore = true; seen_rust_tags = true; },\n                 \"rust\" => { data.rust = true; seen_rust_tags = true; },\n@@ -600,10 +588,10 @@ mod tests {\n         t(\"rust\",                  false,        false,  false,  true,  false,        false);\n         t(\"sh\",                    false,        false,  false,  false, false,        false);\n         t(\"ignore\",                false,        false,  true,   true,  false,        false);\n-        t(\"should_panic\",          true,         true,   false,  true,  false,        false);\n+        t(\"should_panic\",          true,         false,  false,  true,  false,        false);\n         t(\"no_run\",                false,        true,   false,  true,  false,        false);\n         t(\"test_harness\",          false,        false,  false,  true,  true,         false);\n-        t(\"compile_fail\",          false,        false,  false,  true,  false,        true);\n+        t(\"compile_fail\",          false,        true,   false,  true,  false,        true);\n         t(\"{.no_run .example}\",    false,        true,   false,  true,  false,        false);\n         t(\"{.sh .should_panic}\",   true,         false,  false,  true,  false,        false);\n         t(\"{.example .rust}\",      false,        false,  false,  true,  false,        false);"}, {"sha": "40768ca63e994f98e045b1816bed7e8a8d0a707b", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eb7664b445d4c2a44e31b6557931dda88e7dd071/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7664b445d4c2a44e31b6557931dda88e7dd071/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=eb7664b445d4c2a44e31b6557931dda88e7dd071", "patch": "@@ -257,18 +257,16 @@ fn runtest(test: &str, cratename: &str, cfgs: Vec<String>, libs: SearchPaths,\n         let b_sess = AssertRecoverSafe::new(&sess);\n         let b_cstore = AssertRecoverSafe::new(&cstore);\n         let b_cfg = AssertRecoverSafe::new(cfg.clone());\n-        let b_input = AssertRecoverSafe::new(&input);\n-        let b_out = AssertRecoverSafe::new(&out);\n         let b_control = AssertRecoverSafe::new(&control);\n \n         panic::recover(|| {\n-            AssertRecoverSafe::new(driver::compile_input(&b_sess, &b_cstore, (*b_cfg).clone(),\n-                                                         &b_input, &b_out,\n-                                                         &None, None, &b_control))\n+            driver::compile_input(&b_sess, &b_cstore, (*b_cfg).clone(),\n+                                  &input, &out,\n+                                  &None, None, &b_control)\n         })\n     } {\n         Ok(r) => {\n-            match *r {\n+            match r {\n                 Err(count) if count > 0 && compile_fail == false => {\n                     sess.fatal(\"aborting due to previous error(s)\")\n                 }"}]}