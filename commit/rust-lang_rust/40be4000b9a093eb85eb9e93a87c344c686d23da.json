{"sha": "40be4000b9a093eb85eb9e93a87c344c686d23da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwYmU0MDAwYjlhMDkzZWI4NWViOWU5M2E4N2MzNDRjNjg2ZDIzZGE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-24T23:04:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-24T23:04:54Z"}, "message": "Rollup merge of #61727 - Mark-Simulacrum:crate-deps-in-deps, r=alexcrichton\n\nAdd binary dependencies to dep-info files\n\nI'm not sure about the lack of incremental-tracking here, but since I'm pretty sure this runs on every compile anyway it might not matter? If there's a better place/way to get at the information I want, I'm happy to refactor the code to match.\n\nr? @alexcrichton", "tree": {"sha": "15b334c4053a1690a77d57c0ef91efd21cf362f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15b334c4053a1690a77d57c0ef91efd21cf362f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40be4000b9a093eb85eb9e93a87c344c686d23da", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdOOQWCRBK7hj4Ov3rIwAAdHIIAIAUwQS8fbQ9QjMQNfLRqATG\nu5/xO/bTFaTYE5Y3vGTPC5umPwa+U+BhaFqvrXK6YFdFsnBooJZ6lBArE9GftzRL\nq+H61/3Dj5K/0bpC7tN4BN0zm2a4UzALP4W3rizwkFjwHF6d/xvQAGYTsI2T5K82\nXP0udbYYHag/Imz9eT2oT6SMwUrAV3U1vRz85y90uzaFuVszxB260nV/cwJ36FLe\nfeFqb3vzvZlOi41Ou7WrAII5DQeyf+9IlXjOCJCnmq3kvE7rD4FAxqfCiL+ChMjR\n1JfbdjR0hiDNa+GsiO1eNCU8EPjsHNUclm6e1+9BgcgC0FFYeWmeTCDOM6f28rw=\n=U/28\n-----END PGP SIGNATURE-----\n", "payload": "tree 15b334c4053a1690a77d57c0ef91efd21cf362f0\nparent 03f19f7ff128a3b01eeab3f87f04cce22883f006\nparent d749b5e2237abdb79494afc9c8d7c8280db9088c\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1564009494 +0200\ncommitter GitHub <noreply@github.com> 1564009494 +0200\n\nRollup merge of #61727 - Mark-Simulacrum:crate-deps-in-deps, r=alexcrichton\n\nAdd binary dependencies to dep-info files\n\nI'm not sure about the lack of incremental-tracking here, but since I'm pretty sure this runs on every compile anyway it might not matter? If there's a better place/way to get at the information I want, I'm happy to refactor the code to match.\n\nr? @alexcrichton\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40be4000b9a093eb85eb9e93a87c344c686d23da", "html_url": "https://github.com/rust-lang/rust/commit/40be4000b9a093eb85eb9e93a87c344c686d23da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40be4000b9a093eb85eb9e93a87c344c686d23da/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03f19f7ff128a3b01eeab3f87f04cce22883f006", "url": "https://api.github.com/repos/rust-lang/rust/commits/03f19f7ff128a3b01eeab3f87f04cce22883f006", "html_url": "https://github.com/rust-lang/rust/commit/03f19f7ff128a3b01eeab3f87f04cce22883f006"}, {"sha": "d749b5e2237abdb79494afc9c8d7c8280db9088c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d749b5e2237abdb79494afc9c8d7c8280db9088c", "html_url": "https://github.com/rust-lang/rust/commit/d749b5e2237abdb79494afc9c8d7c8280db9088c"}], "stats": {"total": 30, "additions": 27, "deletions": 3}, "files": [{"sha": "9a8429733d1034b374a67d98d9ec461ae47a6cfe", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40be4000b9a093eb85eb9e93a87c344c686d23da/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40be4000b9a093eb85eb9e93a87c344c686d23da/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=40be4000b9a093eb85eb9e93a87c344c686d23da", "patch": "@@ -1468,6 +1468,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n     symbol_mangling_version: SymbolManglingVersion = (SymbolManglingVersion::Legacy,\n         parse_symbol_mangling_version, [TRACKED],\n         \"which mangling version to use for symbol names\"),\n+    binary_dep_depinfo: bool = (false, parse_bool, [TRACKED],\n+        \"include artifacts (sysroot, crate dependencies) used during compilation in dep-info\"),\n }\n \n pub fn default_lib_output() -> CrateType {"}, {"sha": "c88ca132184b267095676b3afc21fa0665fea1f6", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/40be4000b9a093eb85eb9e93a87c344c686d23da/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40be4000b9a093eb85eb9e93a87c344c686d23da/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=40be4000b9a093eb85eb9e93a87c344c686d23da", "patch": "@@ -545,6 +545,9 @@ impl Session {\n     pub fn print_llvm_passes(&self) -> bool {\n         self.opts.debugging_opts.print_llvm_passes\n     }\n+    pub fn binary_dep_depinfo(&self) -> bool {\n+        self.opts.debugging_opts.binary_dep_depinfo\n+    }\n \n     /// Gets the features enabled for the current compilation session.\n     /// DO NOT USE THIS METHOD if there is a TyCtxt available, as it circumvents"}, {"sha": "772395bca2b3740aba2c334c3ba64cb73d755742", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/40be4000b9a093eb85eb9e93a87c344c686d23da/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40be4000b9a093eb85eb9e93a87c344c686d23da/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=40be4000b9a093eb85eb9e93a87c344c686d23da", "patch": "@@ -9,6 +9,7 @@ use rustc::hir::lowering::lower_crate;\n use rustc::hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc::lint;\n use rustc::middle::{self, reachable, resolve_lifetime, stability};\n+use rustc::middle::cstore::CrateStore;\n use rustc::middle::privacy::AccessLevels;\n use rustc::ty::{self, AllArenas, Resolutions, TyCtxt, GlobalCtxt};\n use rustc::ty::steal::Steal;\n@@ -657,7 +658,8 @@ fn escape_dep_filename(filename: &FileName) -> String {\n     filename.to_string().replace(\" \", \"\\\\ \")\n }\n \n-fn write_out_deps(sess: &Session, outputs: &OutputFilenames, out_filenames: &[PathBuf]) {\n+fn write_out_deps(compiler: &Compiler, outputs: &OutputFilenames, out_filenames: &[PathBuf]) {\n+    let sess = &compiler.sess;\n     // Write out dependency rules to the dep-info file if requested\n     if !sess.opts.output_types.contains_key(&OutputType::DepInfo) {\n         return;\n@@ -667,13 +669,30 @@ fn write_out_deps(sess: &Session, outputs: &OutputFilenames, out_filenames: &[Pa\n     let result = (|| -> io::Result<()> {\n         // Build a list of files used to compile the output and\n         // write Makefile-compatible dependency rules\n-        let files: Vec<String> = sess.source_map()\n+        let mut files: Vec<String> = sess.source_map()\n             .files()\n             .iter()\n             .filter(|fmap| fmap.is_real_file())\n             .filter(|fmap| !fmap.is_imported())\n             .map(|fmap| escape_dep_filename(&fmap.name))\n             .collect();\n+\n+        if sess.binary_dep_depinfo() {\n+            for cnum in compiler.cstore.crates_untracked() {\n+                let metadata = compiler.cstore.crate_data_as_rc_any(cnum);\n+                let metadata = metadata.downcast_ref::<cstore::CrateMetadata>().unwrap();\n+                if let Some((path, _)) = &metadata.source.dylib {\n+                    files.push(escape_dep_filename(&FileName::Real(path.clone())));\n+                }\n+                if let Some((path, _)) = &metadata.source.rlib {\n+                    files.push(escape_dep_filename(&FileName::Real(path.clone())));\n+                }\n+                if let Some((path, _)) = &metadata.source.rmeta {\n+                    files.push(escape_dep_filename(&FileName::Real(path.clone())));\n+                }\n+            }\n+        }\n+\n         let mut file = fs::File::create(&deps_filename)?;\n         for path in out_filenames {\n             writeln!(file, \"{}: {}\\n\", path.display(), files.join(\" \"))?;\n@@ -750,7 +769,7 @@ pub fn prepare_outputs(\n         }\n     }\n \n-    write_out_deps(sess, &outputs, &output_paths);\n+    write_out_deps(compiler, &outputs, &output_paths);\n \n     let only_dep_info = sess.opts.output_types.contains_key(&OutputType::DepInfo)\n         && sess.opts.output_types.len() == 1;"}]}