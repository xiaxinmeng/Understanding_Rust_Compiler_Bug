{"sha": "7d3207be9776d6707f77a2ce7da170ffdd4f1b0d", "node_id": "C_kwDOAAsO6NoAKDdkMzIwN2JlOTc3NmQ2NzA3Zjc3YTJjZTdkYTE3MGZmZGQ0ZjFiMGQ", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2023-04-03T20:52:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-03T20:52:35Z"}, "message": "Rollup merge of #109896 - Nilstrieb:integers-are-not-fn-ptrs-remember-this-dear-transmuter, r=compiler-errors\n\nNever consider int and float vars for `FnPtr` candidates\n\nThis solves a regression where `0.0.cmp()` was ambiguous when a custom trait with a `cmp` method was in scope.\n\nFor integers it shouldn't be a problem in practice so I wasn't able to add a test.\n\nI'm not sure whether there could be more issues hidden in the shadows as mentioned in the issue, but this should at least fix the problematic regression immediately.\n\nfixes #109892\n\nr? oli-obk", "tree": {"sha": "0288e53b7f1159c06a17c8a0e8e8ccd4574a531a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0288e53b7f1159c06a17c8a0e8e8ccd4574a531a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d3207be9776d6707f77a2ce7da170ffdd4f1b0d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkKzyTCRBK7hj4Ov3rIwAANQUIACNYFU8TnCfoBZed2DAklSvt\nSqq7+ycAyFHuJltjifP5ON/ec0jqnuz+mbJCymwdVFHMe/POJnx+p4Cfo+PCrXxG\nW/FSUwpEvRm2tQRC9NA+78V4KzMy00Ou9gy17YH54DCS94qvpmnjr9nTQa7rR/qU\nGP6UCRyV3OLUGsv0gisiweAZmZtYD/ah7A3LheTj0E24Xo0krTPXtyUk/wY40JQF\nSVPkJdyrAiZU4JAzrL51EjzPadOEs8x99ZCxw3s01BYqSmtOl0lHcgtem8FsaqWP\nJVHtOPHwoNNgSrNrmCxoDx0x30E2ox6C1wFLEHpTOKvIrSpGSwYREngDbH3bqIM=\n=Nh4H\n-----END PGP SIGNATURE-----\n", "payload": "tree 0288e53b7f1159c06a17c8a0e8e8ccd4574a531a\nparent 4e25d20f957600aeae70d43f0d5fba54d9685d30\nparent ca79b82c6cff632c98ed355e7d0f554ef8b5cc5d\nauthor Yuki Okushi <jtitor@2k36.org> 1680555155 +0900\ncommitter GitHub <noreply@github.com> 1680555155 +0900\n\nRollup merge of #109896 - Nilstrieb:integers-are-not-fn-ptrs-remember-this-dear-transmuter, r=compiler-errors\n\nNever consider int and float vars for `FnPtr` candidates\n\nThis solves a regression where `0.0.cmp()` was ambiguous when a custom trait with a `cmp` method was in scope.\n\nFor integers it shouldn't be a problem in practice so I wasn't able to add a test.\n\nI'm not sure whether there could be more issues hidden in the shadows as mentioned in the issue, but this should at least fix the problematic regression immediately.\n\nfixes #109892\n\nr? oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d3207be9776d6707f77a2ce7da170ffdd4f1b0d", "html_url": "https://github.com/rust-lang/rust/commit/7d3207be9776d6707f77a2ce7da170ffdd4f1b0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d3207be9776d6707f77a2ce7da170ffdd4f1b0d/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e25d20f957600aeae70d43f0d5fba54d9685d30", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e25d20f957600aeae70d43f0d5fba54d9685d30", "html_url": "https://github.com/rust-lang/rust/commit/4e25d20f957600aeae70d43f0d5fba54d9685d30"}, {"sha": "ca79b82c6cff632c98ed355e7d0f554ef8b5cc5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca79b82c6cff632c98ed355e7d0f554ef8b5cc5d", "html_url": "https://github.com/rust-lang/rust/commit/ca79b82c6cff632c98ed355e7d0f554ef8b5cc5d"}], "stats": {"total": 32, "additions": 24, "deletions": 8}, "files": [{"sha": "090312338e00967e6496a2d141c4756fb0379f7e", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7d3207be9776d6707f77a2ce7da170ffdd4f1b0d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d3207be9776d6707f77a2ce7da170ffdd4f1b0d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=7d3207be9776d6707f77a2ce7da170ffdd4f1b0d", "patch": "@@ -998,8 +998,14 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             | ty::Alias(..)\n             | ty::Param(..)\n             | ty::Bound(..)\n-            | ty::Error(_) => {}\n-            ty::Infer(_) => {\n+            | ty::Error(_)\n+            | ty::Infer(\n+                ty::InferTy::IntVar(_)\n+                | ty::InferTy::FloatVar(_)\n+                | ty::InferTy::FreshIntTy(_)\n+                | ty::InferTy::FreshFloatTy(_),\n+            ) => {}\n+            ty::Infer(ty::InferTy::TyVar(_) | ty::InferTy::FreshTy(_)) => {\n                 candidates.ambiguous = true;\n             }\n         }"}, {"sha": "b58e62536d604edc425ec6e620d7acd9f6a55b2f", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7d3207be9776d6707f77a2ce7da170ffdd4f1b0d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d3207be9776d6707f77a2ce7da170ffdd4f1b0d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=7d3207be9776d6707f77a2ce7da170ffdd4f1b0d", "patch": "@@ -177,14 +177,14 @@ struct TraitObligationStack<'prev, 'tcx> {\n }\n \n struct SelectionCandidateSet<'tcx> {\n-    // A list of candidates that definitely apply to the current\n-    // obligation (meaning: types unify).\n+    /// A list of candidates that definitely apply to the current\n+    /// obligation (meaning: types unify).\n     vec: Vec<SelectionCandidate<'tcx>>,\n \n-    // If `true`, then there were candidates that might or might\n-    // not have applied, but we couldn't tell. This occurs when some\n-    // of the input types are type variables, in which case there are\n-    // various \"builtin\" rules that might or might not trigger.\n+    /// If `true`, then there were candidates that might or might\n+    /// not have applied, but we couldn't tell. This occurs when some\n+    /// of the input types are type variables, in which case there are\n+    /// various \"builtin\" rules that might or might not trigger.\n     ambiguous: bool,\n }\n "}, {"sha": "eec7da044c0d50c089051ca311707d4410e5ed5f", "filename": "tests/ui/fn/fn-ptr-trait-int-float-infer-var.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7d3207be9776d6707f77a2ce7da170ffdd4f1b0d/tests%2Fui%2Ffn%2Ffn-ptr-trait-int-float-infer-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d3207be9776d6707f77a2ce7da170ffdd4f1b0d/tests%2Fui%2Ffn%2Ffn-ptr-trait-int-float-infer-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn%2Ffn-ptr-trait-int-float-infer-var.rs?ref=7d3207be9776d6707f77a2ce7da170ffdd4f1b0d", "patch": "@@ -0,0 +1,10 @@\n+// check-pass\n+trait MyCmp {\n+    fn cmp(&self) {}\n+}\n+impl MyCmp for f32 {}\n+\n+fn main() {\n+    // Ensure that `impl<F: FnPtr> Ord for F` is never considered for int and float infer vars.\n+    0.0.cmp();\n+}"}]}