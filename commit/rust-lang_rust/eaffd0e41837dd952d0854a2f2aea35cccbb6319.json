{"sha": "eaffd0e41837dd952d0854a2f2aea35cccbb6319", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhZmZkMGU0MTgzN2RkOTUyZDA4NTRhMmYyYWVhMzVjY2NiYjYzMTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-19T19:50:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-19T19:50:12Z"}, "message": "Auto merge of #6167 - ThibsG:IdenticalArgumentsAssertEq3574, r=ebroto\n\nIdentical arguments on assert macro family\n\nLint when identical args are used on `assert_eq!`, `debug_assert_eq!`, `assert_ne!` and `debug_assert_ne!` macros.\n\nAdded to the lint `eq_op`.\n\nCommon functions added to `utils/higher.rs`\n\nFixes: #3574\nFixes: #4694\n\nchangelog: Lint on identical args when calling `assert_eq!`, `debug_assert_eq!`, `assert_ne!` and `debug_assert_ne!` macros", "tree": {"sha": "277f6fad86c12a549a46e96a1aba0952dafe0140", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/277f6fad86c12a549a46e96a1aba0952dafe0140"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eaffd0e41837dd952d0854a2f2aea35cccbb6319", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eaffd0e41837dd952d0854a2f2aea35cccbb6319", "html_url": "https://github.com/rust-lang/rust/commit/eaffd0e41837dd952d0854a2f2aea35cccbb6319", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eaffd0e41837dd952d0854a2f2aea35cccbb6319/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74530adcba45edbd99bb5a96b45fe2c8e12a31aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/74530adcba45edbd99bb5a96b45fe2c8e12a31aa", "html_url": "https://github.com/rust-lang/rust/commit/74530adcba45edbd99bb5a96b45fe2c8e12a31aa"}, {"sha": "16b5f37b5a23f475d0d94efea764c57e4572f63f", "url": "https://api.github.com/repos/rust-lang/rust/commits/16b5f37b5a23f475d0d94efea764c57e4572f63f", "html_url": "https://github.com/rust-lang/rust/commit/16b5f37b5a23f475d0d94efea764c57e4572f63f"}], "stats": {"total": 313, "additions": 254, "deletions": 59}, "files": [{"sha": "3201adbf9a0b60147bd8dd96cdb0025e082f9cbc", "filename": "clippy_lints/src/eq_op.rs", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/eaffd0e41837dd952d0854a2f2aea35cccbb6319/clippy_lints%2Fsrc%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaffd0e41837dd952d0854a2f2aea35cccbb6319/clippy_lints%2Fsrc%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feq_op.rs?ref=eaffd0e41837dd952d0854a2f2aea35cccbb6319", "patch": "@@ -1,8 +1,10 @@\n use crate::utils::{\n-    eq_expr_value, implements_trait, in_macro, is_copy, multispan_sugg, snippet, span_lint, span_lint_and_then,\n+    eq_expr_value, higher, implements_trait, in_macro, is_copy, is_expn_of, multispan_sugg, snippet, span_lint,\n+    span_lint_and_then,\n };\n+use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir::{BinOp, BinOpKind, BorrowKind, Expr, ExprKind};\n+use rustc_hir::{BinOp, BinOpKind, BorrowKind, Expr, ExprKind, StmtKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n@@ -23,6 +25,12 @@ declare_clippy_lint! {\n     /// # let x = 1;\n     /// if x + 1 == x + 1 {}\n     /// ```\n+    /// or\n+    /// ```rust\n+    /// # let a = 3;\n+    /// # let b = 4;\n+    /// assert_eq!(a, a);\n+    /// ```\n     pub EQ_OP,\n     correctness,\n     \"equal operands on both sides of a comparison or bitwise combination (e.g., `x == x`)\"\n@@ -52,9 +60,34 @@ declare_clippy_lint! {\n \n declare_lint_pass!(EqOp => [EQ_OP, OP_REF]);\n \n+const ASSERT_MACRO_NAMES: [&str; 4] = [\"assert_eq\", \"assert_ne\", \"debug_assert_eq\", \"debug_assert_ne\"];\n+\n impl<'tcx> LateLintPass<'tcx> for EqOp {\n     #[allow(clippy::similar_names, clippy::too_many_lines)]\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) {\n+        if let ExprKind::Block(ref block, _) = e.kind {\n+            for stmt in block.stmts {\n+                for amn in &ASSERT_MACRO_NAMES {\n+                    if_chain! {\n+                        if is_expn_of(stmt.span, amn).is_some();\n+                        if let StmtKind::Semi(ref matchexpr) = stmt.kind;\n+                        if let Some(macro_args) = higher::extract_assert_macro_args(matchexpr);\n+                        if macro_args.len() == 2;\n+                        let (lhs, rhs) = (macro_args[0], macro_args[1]);\n+                        if eq_expr_value(cx, lhs, rhs);\n+\n+                        then {\n+                            span_lint(\n+                                cx,\n+                                EQ_OP,\n+                                lhs.span.to(rhs.span),\n+                                &format!(\"identical args used in this `{}!` macro call\", amn),\n+                            );\n+                        }\n+                    }\n+                }\n+            }\n+        }\n         if let ExprKind::Binary(op, ref left, ref right) = e.kind {\n             if e.span.from_expansion() {\n                 return;"}, {"sha": "76417aa7ed09d39682788314a61b2213c05ec0b9", "filename": "clippy_lints/src/mutable_debug_assertion.rs", "status": "modified", "additions": 11, "deletions": 55, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/eaffd0e41837dd952d0854a2f2aea35cccbb6319/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaffd0e41837dd952d0854a2f2aea35cccbb6319/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs?ref=eaffd0e41837dd952d0854a2f2aea35cccbb6319", "patch": "@@ -1,7 +1,6 @@\n-use crate::utils::{is_direct_expn_of, span_lint};\n-use if_chain::if_chain;\n+use crate::utils::{higher, is_direct_expn_of, span_lint};\n use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n-use rustc_hir::{BorrowKind, Expr, ExprKind, MatchSource, Mutability, StmtKind, UnOp};\n+use rustc_hir::{BorrowKind, Expr, ExprKind, MatchSource, Mutability};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::map::Map;\n use rustc_middle::ty;\n@@ -39,66 +38,23 @@ impl<'tcx> LateLintPass<'tcx> for DebugAssertWithMutCall {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) {\n         for dmn in &DEBUG_MACRO_NAMES {\n             if is_direct_expn_of(e.span, dmn).is_some() {\n-                if let Some(span) = extract_call(cx, e) {\n-                    span_lint(\n-                        cx,\n-                        DEBUG_ASSERT_WITH_MUT_CALL,\n-                        span,\n-                        &format!(\"do not call a function with mutable arguments inside of `{}!`\", dmn),\n-                    );\n-                }\n-            }\n-        }\n-    }\n-}\n-\n-//HACK(hellow554): remove this when #4694 is implemented\n-fn extract_call<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> Option<Span> {\n-    if_chain! {\n-        if let ExprKind::Block(ref block, _) = e.kind;\n-        if block.stmts.len() == 1;\n-        if let StmtKind::Semi(ref matchexpr) = block.stmts[0].kind;\n-        then {\n-            // debug_assert\n-            if_chain! {\n-                if let ExprKind::Match(ref ifclause, _, _) = matchexpr.kind;\n-                if let ExprKind::DropTemps(ref droptmp) = ifclause.kind;\n-                if let ExprKind::Unary(UnOp::UnNot, ref condition) = droptmp.kind;\n-                then {\n-                    let mut visitor = MutArgVisitor::new(cx);\n-                    visitor.visit_expr(condition);\n-                    return visitor.expr_span();\n-                }\n-            }\n-\n-            // debug_assert_{eq,ne}\n-            if_chain! {\n-                if let ExprKind::Block(ref matchblock, _) = matchexpr.kind;\n-                if let Some(ref matchheader) = matchblock.expr;\n-                if let ExprKind::Match(ref headerexpr, _, _) = matchheader.kind;\n-                if let ExprKind::Tup(ref conditions) = headerexpr.kind;\n-                if conditions.len() == 2;\n-                then {\n-                    if let ExprKind::AddrOf(BorrowKind::Ref, _, ref lhs) = conditions[0].kind {\n+                if let Some(macro_args) = higher::extract_assert_macro_args(e) {\n+                    for arg in macro_args {\n                         let mut visitor = MutArgVisitor::new(cx);\n-                        visitor.visit_expr(lhs);\n+                        visitor.visit_expr(arg);\n                         if let Some(span) = visitor.expr_span() {\n-                            return Some(span);\n-                        }\n-                    }\n-                    if let ExprKind::AddrOf(BorrowKind::Ref, _, ref rhs) = conditions[1].kind {\n-                        let mut visitor = MutArgVisitor::new(cx);\n-                        visitor.visit_expr(rhs);\n-                        if let Some(span) = visitor.expr_span() {\n-                            return Some(span);\n+                            span_lint(\n+                                cx,\n+                                DEBUG_ASSERT_WITH_MUT_CALL,\n+                                span,\n+                                &format!(\"do not call a function with mutable arguments inside of `{}!`\", dmn),\n+                            );\n                         }\n                     }\n                 }\n             }\n         }\n     }\n-\n-    None\n }\n \n struct MutArgVisitor<'a, 'tcx> {"}, {"sha": "6d7c5058b4f30eee27114d4b532dec5e2a690af2", "filename": "clippy_lints/src/utils/higher.rs", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/eaffd0e41837dd952d0854a2f2aea35cccbb6319/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaffd0e41837dd952d0854a2f2aea35cccbb6319/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhigher.rs?ref=eaffd0e41837dd952d0854a2f2aea35cccbb6319", "patch": "@@ -7,6 +7,7 @@ use crate::utils::{is_expn_of, match_def_path, paths};\n use if_chain::if_chain;\n use rustc_ast::ast;\n use rustc_hir as hir;\n+use rustc_hir::{BorrowKind, Expr, ExprKind, StmtKind, UnOp};\n use rustc_lint::LateContext;\n \n /// Converts a hir binary operator to the corresponding `ast` type.\n@@ -241,3 +242,56 @@ pub fn vec_macro<'e>(cx: &LateContext<'_>, expr: &'e hir::Expr<'_>) -> Option<Ve\n \n     None\n }\n+\n+/// Extract args from an assert-like macro.\n+/// Currently working with:\n+/// - `assert!`, `assert_eq!` and `assert_ne!`\n+/// - `debug_assert!`, `debug_assert_eq!` and `debug_assert_ne!`\n+/// For example:\n+/// `assert!(expr)` will return Some([expr])\n+/// `debug_assert_eq!(a, b)` will return Some([a, b])\n+pub fn extract_assert_macro_args<'tcx>(e: &'tcx Expr<'tcx>) -> Option<Vec<&'tcx Expr<'tcx>>> {\n+    /// Try to match the AST for a pattern that contains a match, for example when two args are\n+    /// compared\n+    fn ast_matchblock(matchblock_expr: &'tcx Expr<'tcx>) -> Option<Vec<&Expr<'_>>> {\n+        if_chain! {\n+            if let ExprKind::Match(ref headerexpr, _, _) = &matchblock_expr.kind;\n+            if let ExprKind::Tup([lhs, rhs]) = &headerexpr.kind;\n+            if let ExprKind::AddrOf(BorrowKind::Ref, _, lhs) = lhs.kind;\n+            if let ExprKind::AddrOf(BorrowKind::Ref, _, rhs) = rhs.kind;\n+            then {\n+                return Some(vec![lhs, rhs]);\n+            }\n+        }\n+        None\n+    }\n+\n+    if let ExprKind::Block(ref block, _) = e.kind {\n+        if block.stmts.len() == 1 {\n+            if let StmtKind::Semi(ref matchexpr) = block.stmts[0].kind {\n+                // macros with unique arg: `{debug_}assert!` (e.g., `debug_assert!(some_condition)`)\n+                if_chain! {\n+                    if let ExprKind::Match(ref ifclause, _, _) = matchexpr.kind;\n+                    if let ExprKind::DropTemps(ref droptmp) = ifclause.kind;\n+                    if let ExprKind::Unary(UnOp::UnNot, condition) = droptmp.kind;\n+                    then {\n+                        return Some(vec![condition]);\n+                    }\n+                }\n+\n+                // debug macros with two args: `debug_assert_{ne, eq}` (e.g., `assert_ne!(a, b)`)\n+                if_chain! {\n+                    if let ExprKind::Block(ref matchblock,_) = matchexpr.kind;\n+                    if let Some(ref matchblock_expr) = matchblock.expr;\n+                    then {\n+                        return ast_matchblock(matchblock_expr);\n+                    }\n+                }\n+            }\n+        } else if let Some(matchblock_expr) = block.expr {\n+            // macros with two args: `assert_{ne, eq}` (e.g., `assert_ne!(a, b)`)\n+            return ast_matchblock(&matchblock_expr);\n+        }\n+    }\n+    None\n+}"}, {"sha": "e369f62f8bfea28d1542e338fb625d9b2c352a0b", "filename": "tests/ui/auxiliary/proc_macro_derive.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eaffd0e41837dd952d0854a2f2aea35cccbb6319/tests%2Fui%2Fauxiliary%2Fproc_macro_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaffd0e41837dd952d0854a2f2aea35cccbb6319/tests%2Fui%2Fauxiliary%2Fproc_macro_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fproc_macro_derive.rs?ref=eaffd0e41837dd952d0854a2f2aea35cccbb6319", "patch": "@@ -3,6 +3,7 @@\n \n #![crate_type = \"proc-macro\"]\n #![feature(repr128, proc_macro_quote)]\n+#![allow(clippy::eq_op)]\n \n extern crate proc_macro;\n "}, {"sha": "ff1dc76ab63b15727e6f81655177656007ea541b", "filename": "tests/ui/double_parens.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaffd0e41837dd952d0854a2f2aea35cccbb6319/tests%2Fui%2Fdouble_parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaffd0e41837dd952d0854a2f2aea35cccbb6319/tests%2Fui%2Fdouble_parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdouble_parens.rs?ref=eaffd0e41837dd952d0854a2f2aea35cccbb6319", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::double_parens)]\n-#![allow(dead_code)]\n+#![allow(dead_code, clippy::eq_op)]\n #![feature(custom_inner_attributes)]\n #![rustfmt::skip]\n "}, {"sha": "6b5b31a1a2ef182e97cb855c1cdf3c117d8dbaba", "filename": "tests/ui/eq_op_macros.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/eaffd0e41837dd952d0854a2f2aea35cccbb6319/tests%2Fui%2Feq_op_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaffd0e41837dd952d0854a2f2aea35cccbb6319/tests%2Fui%2Feq_op_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feq_op_macros.rs?ref=eaffd0e41837dd952d0854a2f2aea35cccbb6319", "patch": "@@ -0,0 +1,56 @@\n+#![warn(clippy::eq_op)]\n+\n+// lint also in macro definition\n+macro_rules! assert_in_macro_def {\n+    () => {\n+        let a = 42;\n+        assert_eq!(a, a);\n+        assert_ne!(a, a);\n+        debug_assert_eq!(a, a);\n+        debug_assert_ne!(a, a);\n+    };\n+}\n+\n+// lint identical args in assert-like macro invocations (see #3574)\n+fn main() {\n+    assert_in_macro_def!();\n+\n+    let a = 1;\n+    let b = 2;\n+\n+    // lint identical args in `assert_eq!`\n+    assert_eq!(a, a);\n+    assert_eq!(a + 1, a + 1);\n+    // ok\n+    assert_eq!(a, b);\n+    assert_eq!(a, a + 1);\n+    assert_eq!(a + 1, b + 1);\n+\n+    // lint identical args in `assert_ne!`\n+    assert_ne!(a, a);\n+    assert_ne!(a + 1, a + 1);\n+    // ok\n+    assert_ne!(a, b);\n+    assert_ne!(a, a + 1);\n+    assert_ne!(a + 1, b + 1);\n+\n+    // lint identical args in `debug_assert_eq!`\n+    debug_assert_eq!(a, a);\n+    debug_assert_eq!(a + 1, a + 1);\n+    // ok\n+    debug_assert_eq!(a, b);\n+    debug_assert_eq!(a, a + 1);\n+    debug_assert_eq!(a + 1, b + 1);\n+\n+    // lint identical args in `debug_assert_ne!`\n+    debug_assert_ne!(a, a);\n+    debug_assert_ne!(a + 1, a + 1);\n+    // ok\n+    debug_assert_ne!(a, b);\n+    debug_assert_ne!(a, a + 1);\n+    debug_assert_ne!(a + 1, b + 1);\n+\n+    let my_vec = vec![1; 5];\n+    let mut my_iter = my_vec.iter();\n+    assert_ne!(my_iter.next(), my_iter.next());\n+}"}, {"sha": "fb9378108b98ce010b7641418b64b3c0a116087f", "filename": "tests/ui/eq_op_macros.stderr", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/eaffd0e41837dd952d0854a2f2aea35cccbb6319/tests%2Fui%2Feq_op_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eaffd0e41837dd952d0854a2f2aea35cccbb6319/tests%2Fui%2Feq_op_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feq_op_macros.stderr?ref=eaffd0e41837dd952d0854a2f2aea35cccbb6319", "patch": "@@ -0,0 +1,95 @@\n+error: identical args used in this `assert_eq!` macro call\n+  --> $DIR/eq_op_macros.rs:7:20\n+   |\n+LL |         assert_eq!(a, a);\n+   |                    ^^^^\n+...\n+LL |     assert_in_macro_def!();\n+   |     ----------------------- in this macro invocation\n+   |\n+   = note: `-D clippy::eq-op` implied by `-D warnings`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: identical args used in this `assert_ne!` macro call\n+  --> $DIR/eq_op_macros.rs:8:20\n+   |\n+LL |         assert_ne!(a, a);\n+   |                    ^^^^\n+...\n+LL |     assert_in_macro_def!();\n+   |     ----------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: identical args used in this `assert_eq!` macro call\n+  --> $DIR/eq_op_macros.rs:22:16\n+   |\n+LL |     assert_eq!(a, a);\n+   |                ^^^^\n+\n+error: identical args used in this `assert_eq!` macro call\n+  --> $DIR/eq_op_macros.rs:23:16\n+   |\n+LL |     assert_eq!(a + 1, a + 1);\n+   |                ^^^^^^^^^^^^\n+\n+error: identical args used in this `assert_ne!` macro call\n+  --> $DIR/eq_op_macros.rs:30:16\n+   |\n+LL |     assert_ne!(a, a);\n+   |                ^^^^\n+\n+error: identical args used in this `assert_ne!` macro call\n+  --> $DIR/eq_op_macros.rs:31:16\n+   |\n+LL |     assert_ne!(a + 1, a + 1);\n+   |                ^^^^^^^^^^^^\n+\n+error: identical args used in this `debug_assert_eq!` macro call\n+  --> $DIR/eq_op_macros.rs:9:26\n+   |\n+LL |         debug_assert_eq!(a, a);\n+   |                          ^^^^\n+...\n+LL |     assert_in_macro_def!();\n+   |     ----------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: identical args used in this `debug_assert_ne!` macro call\n+  --> $DIR/eq_op_macros.rs:10:26\n+   |\n+LL |         debug_assert_ne!(a, a);\n+   |                          ^^^^\n+...\n+LL |     assert_in_macro_def!();\n+   |     ----------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: identical args used in this `debug_assert_eq!` macro call\n+  --> $DIR/eq_op_macros.rs:38:22\n+   |\n+LL |     debug_assert_eq!(a, a);\n+   |                      ^^^^\n+\n+error: identical args used in this `debug_assert_eq!` macro call\n+  --> $DIR/eq_op_macros.rs:39:22\n+   |\n+LL |     debug_assert_eq!(a + 1, a + 1);\n+   |                      ^^^^^^^^^^^^\n+\n+error: identical args used in this `debug_assert_ne!` macro call\n+  --> $DIR/eq_op_macros.rs:46:22\n+   |\n+LL |     debug_assert_ne!(a, a);\n+   |                      ^^^^\n+\n+error: identical args used in this `debug_assert_ne!` macro call\n+  --> $DIR/eq_op_macros.rs:47:22\n+   |\n+LL |     debug_assert_ne!(a + 1, a + 1);\n+   |                      ^^^^^^^^^^^^\n+\n+error: aborting due to 12 previous errors\n+"}, {"sha": "d8bda7e8f48a7eb32cc22fc54c4cb5d24d1ffea8", "filename": "tests/ui/used_underscore_binding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaffd0e41837dd952d0854a2f2aea35cccbb6319/tests%2Fui%2Fused_underscore_binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaffd0e41837dd952d0854a2f2aea35cccbb6319/tests%2Fui%2Fused_underscore_binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fused_underscore_binding.rs?ref=eaffd0e41837dd952d0854a2f2aea35cccbb6319", "patch": "@@ -3,7 +3,7 @@\n \n #![feature(rustc_private)]\n #![warn(clippy::all)]\n-#![allow(clippy::blacklisted_name)]\n+#![allow(clippy::blacklisted_name, clippy::eq_op)]\n #![warn(clippy::used_underscore_binding)]\n \n #[macro_use]"}]}