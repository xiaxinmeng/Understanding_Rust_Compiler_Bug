{"sha": "65833eddb7eec9c5cd672de4773215442b41fdf7", "node_id": "C_kwDOAAsO6NoAKDY1ODMzZWRkYjdlZWM5YzVjZDY3MmRlNDc3MzIxNTQ0MmI0MWZkZjc", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-05-30T10:57:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-30T10:57:39Z"}, "message": "Rollup merge of #111955 - jyn514:step-refactors, r=clubby789\n\nbootstrap: Various Step refactors\n\nThis ended up being a bunch of only somewhat related changes, sorry :sweat: on the bright side, they're all fairly small  and well-commented in the commit messages.\n\n- Document `ShouldRun::crates`\n\n- Switch Steps from crates to crate_or_deps where possible\n\n    and document why the single remaining place can't switch\n\n- Switch doc::{Std, Rustc} to `crate_or_deps`\n\n    Previously they were using `all_krates` and various hacks to determine\n    which crates to document. Switch them to `crate_or_deps` so `ShouldRun`\n    tells them which crate to document instead of having to guess.\n\n    This also makes a few other refactors:\n    - Remove the now unused `all_krates`; new code should only use\n      `crate_or_deps`.\n    - Add tests for documenting Std\n    - Remove the unnecessary `run_cargo_rustdoc_for` closure so that we only\n      run cargo once\n    - Give a more helpful error message when documenting a no_std target\n    - Use `builder.msg` in the Steps instead of `builder.info`\n\n- Extend `msg` and `description` to work with any subcommand\n\n    Previously `description` only supported `Testing` and `Benchmarking`,\n    and `msg` gave weird results for `doc` (it would say `Docing`).\n\n- Add a `make_run_crates` function and use it Rustc and Std\n\n    This fixes the panic from the previous commit.\n\n- Allow checking individual crates\n\n    This is useful for profiling metadata generation.\n\n    This comes very close to removing all_krates, but doesn't quite -\n    there's one last usage left in `doc`. This is fixed in a later commit.\n\n- Give a more helpful error when calling `cargo_crates_in_set` for an alias\n\n    Before:\n    ```\n    thread 'main' panicked at 'no entry found for key', builder.rs:110:30\n    ```\n\n    After:\n    ```\n    thread 'main' panicked at 'missing crate for path library', check.rs:89:26\n    ```", "tree": {"sha": "dae7a50df95ea6aa041f72ac385bb3286fcb7bed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dae7a50df95ea6aa041f72ac385bb3286fcb7bed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65833eddb7eec9c5cd672de4773215442b41fdf7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkddajCRBK7hj4Ov3rIwAADRoIAFo5o0ZBtLxfocVQycFZ2sbP\nerl1yzlK4+u6YGShYrOn5DWrnpsVJ6q1Goded2ELsRG/bY3wA9GdOpKSuDlVlQMB\ndNA48RP0E7dKmflJS6d5YRjTFtiUiPwc+XLvwmDF2ioND2CUuklF18+1d5YWLd6l\nYkrucrmMilS4CIleTJoV6K9KUNVTM3z+6s4TEBMt+OEuDOBRv6966WPed0lUGWK3\n9Y7o/fAIBG/TRPEmdih2AsLbInHtZF7hNRP7kElf9+NXOgvaAfl/AK+X30P96w1S\nIfWuvWxHuWFNzSnn59kgH49/WzMqUDVfjaKzwGR9gMK0llKHHU40JUM+xZScn5g=\n=5y/n\n-----END PGP SIGNATURE-----\n", "payload": "tree dae7a50df95ea6aa041f72ac385bb3286fcb7bed\nparent 0c9f87c986570e0f81c4418a69081c92e3538bfa\nparent c28ee603c8ddc2f171bee4ba02336fb6a3479010\nauthor Nilstrieb <48135649+Nilstrieb@users.noreply.github.com> 1685444259 +0200\ncommitter GitHub <noreply@github.com> 1685444259 +0200\n\nRollup merge of #111955 - jyn514:step-refactors, r=clubby789\n\nbootstrap: Various Step refactors\n\nThis ended up being a bunch of only somewhat related changes, sorry :sweat: on the bright side, they're all fairly small  and well-commented in the commit messages.\n\n- Document `ShouldRun::crates`\n\n- Switch Steps from crates to crate_or_deps where possible\n\n    and document why the single remaining place can't switch\n\n- Switch doc::{Std, Rustc} to `crate_or_deps`\n\n    Previously they were using `all_krates` and various hacks to determine\n    which crates to document. Switch them to `crate_or_deps` so `ShouldRun`\n    tells them which crate to document instead of having to guess.\n\n    This also makes a few other refactors:\n    - Remove the now unused `all_krates`; new code should only use\n      `crate_or_deps`.\n    - Add tests for documenting Std\n    - Remove the unnecessary `run_cargo_rustdoc_for` closure so that we only\n      run cargo once\n    - Give a more helpful error message when documenting a no_std target\n    - Use `builder.msg` in the Steps instead of `builder.info`\n\n- Extend `msg` and `description` to work with any subcommand\n\n    Previously `description` only supported `Testing` and `Benchmarking`,\n    and `msg` gave weird results for `doc` (it would say `Docing`).\n\n- Add a `make_run_crates` function and use it Rustc and Std\n\n    This fixes the panic from the previous commit.\n\n- Allow checking individual crates\n\n    This is useful for profiling metadata generation.\n\n    This comes very close to removing all_krates, but doesn't quite -\n    there's one last usage left in `doc`. This is fixed in a later commit.\n\n- Give a more helpful error when calling `cargo_crates_in_set` for an alias\n\n    Before:\n    ```\n    thread 'main' panicked at 'no entry found for key', builder.rs:110:30\n    ```\n\n    After:\n    ```\n    thread 'main' panicked at 'missing crate for path library', check.rs:89:26\n    ```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65833eddb7eec9c5cd672de4773215442b41fdf7", "html_url": "https://github.com/rust-lang/rust/commit/65833eddb7eec9c5cd672de4773215442b41fdf7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65833eddb7eec9c5cd672de4773215442b41fdf7/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c9f87c986570e0f81c4418a69081c92e3538bfa", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c9f87c986570e0f81c4418a69081c92e3538bfa", "html_url": "https://github.com/rust-lang/rust/commit/0c9f87c986570e0f81c4418a69081c92e3538bfa"}, {"sha": "c28ee603c8ddc2f171bee4ba02336fb6a3479010", "url": "https://api.github.com/repos/rust-lang/rust/commits/c28ee603c8ddc2f171bee4ba02336fb6a3479010", "html_url": "https://github.com/rust-lang/rust/commit/c28ee603c8ddc2f171bee4ba02336fb6a3479010"}], "stats": {"total": 392, "additions": 225, "deletions": 167}, "files": [{"sha": "30359e47e73be92367d3a2553cdf08be82ed09e5", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 21, "deletions": 23, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/65833eddb7eec9c5cd672de4773215442b41fdf7/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65833eddb7eec9c5cd672de4773215442b41fdf7/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=65833eddb7eec9c5cd672de4773215442b41fdf7", "patch": "@@ -103,11 +103,14 @@ impl RunConfig<'_> {\n     }\n \n     /// Return a list of crate names selected by `run.paths`.\n+    #[track_caller]\n     pub fn cargo_crates_in_set(&self) -> Interned<Vec<String>> {\n         let mut crates = Vec::new();\n         for krate in &self.paths {\n             let path = krate.assert_single_path();\n-            let crate_name = self.builder.crate_paths[&path.path];\n+            let Some(crate_name) = self.builder.crate_paths.get(&path.path) else {\n+                panic!(\"missing crate for path {}\", path.path.display())\n+            };\n             crates.push(crate_name.to_string());\n         }\n         INTERNER.intern_list(crates)\n@@ -427,25 +430,6 @@ impl<'a> ShouldRun<'a> {\n         }\n     }\n \n-    /// Indicates it should run if the command-line selects the given crate or\n-    /// any of its (local) dependencies.\n-    ///\n-    /// Compared to `krate`, this treats the dependencies as aliases for the\n-    /// same job. Generally it is preferred to use `krate`, and treat each\n-    /// individual path separately. For example `./x.py test src/liballoc`\n-    /// (which uses `krate`) will test just `liballoc`. However, `./x.py check\n-    /// src/liballoc` (which uses `all_krates`) will check all of `libtest`.\n-    /// `all_krates` should probably be removed at some point.\n-    pub fn all_krates(mut self, name: &str) -> Self {\n-        let mut set = BTreeSet::new();\n-        for krate in self.builder.in_tree_crates(name, None) {\n-            let path = krate.local_path(self.builder);\n-            set.insert(TaskPath { path, kind: Some(self.kind) });\n-        }\n-        self.paths.insert(PathSet::Set(set));\n-        self\n-    }\n-\n     /// Indicates it should run if the command-line selects the given crate or\n     /// any of its (local) dependencies.\n     ///\n@@ -458,6 +442,8 @@ impl<'a> ShouldRun<'a> {\n     /// Indicates it should run if the command-line selects any of the given crates.\n     ///\n     /// `make_run` will be called a single time with all matching command-line paths.\n+    ///\n+    /// Prefer [`ShouldRun::crate_or_deps`] to this function where possible.\n     pub(crate) fn crates(mut self, crates: Vec<&Crate>) -> Self {\n         for krate in crates {\n             let path = krate.local_path(self.builder);\n@@ -487,7 +473,15 @@ impl<'a> ShouldRun<'a> {\n         self.paths(&[path])\n     }\n \n-    // multiple aliases for the same job\n+    /// Multiple aliases for the same job.\n+    ///\n+    /// This differs from [`path`] in that multiple calls to path will end up calling `make_run`\n+    /// multiple times, whereas a single call to `paths` will only ever generate a single call to\n+    /// `paths`.\n+    ///\n+    /// This is analogous to `all_krates`, although `all_krates` is gone now. Prefer [`path`] where possible.\n+    ///\n+    /// [`path`]: ShouldRun::path\n     pub fn paths(mut self, paths: &[&str]) -> Self {\n         static SUBMODULES_PATHS: OnceCell<Vec<String>> = OnceCell::new();\n \n@@ -641,12 +635,16 @@ impl Kind {\n         }\n     }\n \n-    pub fn test_description(&self) -> &'static str {\n+    pub fn description(&self) -> String {\n         match self {\n             Kind::Test => \"Testing\",\n             Kind::Bench => \"Benchmarking\",\n-            _ => panic!(\"not a test command: {}!\", self.as_str()),\n+            Kind::Doc => \"Documenting\",\n+            Kind::Run => \"Running\",\n+            Kind::Suggest => \"Suggesting\",\n+            _ => return format!(\"{self:?}\"),\n         }\n+        .to_owned()\n     }\n }\n "}, {"sha": "d76b830b0e530d62477b20d797101b0578366d0d", "filename": "src/bootstrap/builder/tests.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/65833eddb7eec9c5cd672de4773215442b41fdf7/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65833eddb7eec9c5cd672de4773215442b41fdf7/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder%2Ftests.rs?ref=65833eddb7eec9c5cd672de4773215442b41fdf7", "patch": "@@ -1,5 +1,6 @@\n use super::*;\n use crate::config::{Config, DryRun, TargetSelection};\n+use crate::doc::DocumentationFormat;\n use std::thread;\n \n fn configure(cmd: &str, host: &[&str], target: &[&str]) -> Config {\n@@ -66,6 +67,16 @@ macro_rules! std {\n     };\n }\n \n+macro_rules! doc_std {\n+    ($host:ident => $target:ident, stage = $stage:literal) => {\n+        doc::Std::new(\n+            $stage,\n+            TargetSelection::from_user(stringify!($target)),\n+            DocumentationFormat::HTML,\n+        )\n+    };\n+}\n+\n macro_rules! rustc {\n     ($host:ident => $target:ident, stage = $stage:literal) => {\n         compile::Rustc::new(\n@@ -144,6 +155,9 @@ fn alias_and_path_for_library() {\n         first(cache.all::<compile::Std>()),\n         &[std!(A => A, stage = 0), std!(A => A, stage = 1)]\n     );\n+\n+    let mut cache = run_build(&[\"library\".into(), \"core\".into()], configure(\"doc\", &[\"A\"], &[\"A\"]));\n+    assert_eq!(first(cache.all::<doc::Std>()), &[doc_std!(A => A, stage = 0)]);\n }\n \n #[test]"}, {"sha": "f5a93854bf2c4e1c4eda6d58b43bd47b5bb62dcd", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 61, "deletions": 18, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/65833eddb7eec9c5cd672de4773215442b41fdf7/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65833eddb7eec9c5cd672de4773215442b41fdf7/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=65833eddb7eec9c5cd672de4773215442b41fdf7", "patch": "@@ -1,8 +1,10 @@\n //! Implementation of compiling the compiler and standard library, in \"check\"-based modes.\n \n-use crate::builder::{Builder, Kind, RunConfig, ShouldRun, Step};\n+use crate::builder::{crate_description, Builder, Kind, RunConfig, ShouldRun, Step};\n use crate::cache::Interned;\n-use crate::compile::{add_to_sysroot, run_cargo, rustc_cargo, rustc_cargo_env, std_cargo};\n+use crate::compile::{\n+    add_to_sysroot, make_run_crates, run_cargo, rustc_cargo, rustc_cargo_env, std_cargo,\n+};\n use crate::config::TargetSelection;\n use crate::tool::{prepare_tool_cargo, SourceType};\n use crate::INTERNER;\n@@ -12,6 +14,12 @@ use std::path::{Path, PathBuf};\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct Std {\n     pub target: TargetSelection,\n+    /// Whether to build only a subset of crates.\n+    ///\n+    /// This shouldn't be used from other steps; see the comment on [`compile::Rustc`].\n+    ///\n+    /// [`compile::Rustc`]: crate::compile::Rustc\n+    crates: Interned<Vec<String>>,\n }\n \n /// Returns args for the subcommand itself (not for cargo)\n@@ -66,16 +74,23 @@ fn cargo_subcommand(kind: Kind) -> &'static str {\n     }\n }\n \n+impl Std {\n+    pub fn new(target: TargetSelection) -> Self {\n+        Self { target, crates: INTERNER.intern_list(vec![]) }\n+    }\n+}\n+\n impl Step for Std {\n     type Output = ();\n     const DEFAULT: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.all_krates(\"sysroot\").path(\"library\")\n+        run.crate_or_deps(\"sysroot\").path(\"library\")\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n-        run.builder.ensure(Std { target: run.target });\n+        let crates = make_run_crates(&run, \"library\");\n+        run.builder.ensure(Std { target: run.target, crates });\n     }\n \n     fn run(self, builder: &Builder<'_>) {\n@@ -97,7 +112,14 @@ impl Step for Std {\n             cargo.arg(\"--lib\");\n         }\n \n-        let _guard = builder.msg_check(\"library artifacts\", target);\n+        for krate in &*self.crates {\n+            cargo.arg(\"-p\").arg(krate);\n+        }\n+\n+        let _guard = builder.msg_check(\n+            format_args!(\"library artifacts{}\", crate_description(&self.crates)),\n+            target,\n+        );\n         run_cargo(\n             builder,\n             cargo,\n@@ -117,7 +139,8 @@ impl Step for Std {\n         }\n \n         // don't run on std twice with x.py clippy\n-        if builder.kind == Kind::Clippy {\n+        // don't check test dependencies if we haven't built libtest\n+        if builder.kind == Kind::Clippy || !self.crates.is_empty() {\n             return;\n         }\n \n@@ -147,8 +170,8 @@ impl Step for Std {\n         // Explicitly pass -p for all dependencies krates -- this will force cargo\n         // to also check the tests/benches/examples for these crates, rather\n         // than just the leaf crate.\n-        for krate in builder.in_tree_crates(\"test\", Some(target)) {\n-            cargo.arg(\"-p\").arg(krate.name);\n+        for krate in &*self.crates {\n+            cargo.arg(\"-p\").arg(krate);\n         }\n \n         let _guard = builder.msg_check(\"library test/bench/example targets\", target);\n@@ -167,6 +190,22 @@ impl Step for Std {\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct Rustc {\n     pub target: TargetSelection,\n+    /// Whether to build only a subset of crates.\n+    ///\n+    /// This shouldn't be used from other steps; see the comment on [`compile::Rustc`].\n+    ///\n+    /// [`compile::Rustc`]: crate::compile::Rustc\n+    crates: Interned<Vec<String>>,\n+}\n+\n+impl Rustc {\n+    pub fn new(target: TargetSelection, builder: &Builder<'_>) -> Self {\n+        let mut crates = vec![];\n+        for krate in builder.in_tree_crates(\"rustc-main\", None) {\n+            crates.push(krate.name.to_string());\n+        }\n+        Self { target, crates: INTERNER.intern_list(crates) }\n+    }\n }\n \n impl Step for Rustc {\n@@ -175,11 +214,12 @@ impl Step for Rustc {\n     const DEFAULT: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.all_krates(\"rustc-main\").path(\"compiler\")\n+        run.crate_or_deps(\"rustc-main\").path(\"compiler\")\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n-        run.builder.ensure(Rustc { target: run.target });\n+        let crates = make_run_crates(&run, \"compiler\");\n+        run.builder.ensure(Rustc { target: run.target, crates });\n     }\n \n     /// Builds the compiler.\n@@ -200,7 +240,7 @@ impl Step for Rustc {\n             builder.ensure(crate::compile::Std::new(compiler, compiler.host));\n             builder.ensure(crate::compile::Std::new(compiler, target));\n         } else {\n-            builder.ensure(Std { target });\n+            builder.ensure(Std::new(target));\n         }\n \n         let mut cargo = builder.cargo(\n@@ -218,14 +258,17 @@ impl Step for Rustc {\n             cargo.arg(\"--all-targets\");\n         }\n \n-        // Explicitly pass -p for all compiler krates -- this will force cargo\n+        // Explicitly pass -p for all compiler crates -- this will force cargo\n         // to also check the tests/benches/examples for these crates, rather\n         // than just the leaf crate.\n-        for krate in builder.in_tree_crates(\"rustc-main\", Some(target)) {\n-            cargo.arg(\"-p\").arg(krate.name);\n+        for krate in &*self.crates {\n+            cargo.arg(\"-p\").arg(krate);\n         }\n \n-        let _guard = builder.msg_check(\"compiler artifacts\", target);\n+        let _guard = builder.msg_check(\n+            format_args!(\"compiler artifacts{}\", crate_description(&self.crates)),\n+            target,\n+        );\n         run_cargo(\n             builder,\n             cargo,\n@@ -268,7 +311,7 @@ impl Step for CodegenBackend {\n         let target = self.target;\n         let backend = self.backend;\n \n-        builder.ensure(Rustc { target });\n+        builder.ensure(Rustc::new(target, builder));\n \n         let mut cargo = builder.cargo(\n             compiler,\n@@ -318,7 +361,7 @@ impl Step for RustAnalyzer {\n         let compiler = builder.compiler(builder.top_stage, builder.config.build);\n         let target = self.target;\n \n-        builder.ensure(Std { target });\n+        builder.ensure(Std::new(target));\n \n         let mut cargo = prepare_tool_cargo(\n             builder,\n@@ -386,7 +429,7 @@ macro_rules! tool_check_step {\n                 let compiler = builder.compiler(builder.top_stage, builder.config.build);\n                 let target = self.target;\n \n-                builder.ensure(Rustc { target });\n+                builder.ensure(Rustc::new(target, builder));\n \n                 let mut cargo = prepare_tool_cargo(\n                     builder,"}, {"sha": "a7ebd018a879116db5785ba538aa9537bc8e2ec6", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/65833eddb7eec9c5cd672de4773215442b41fdf7/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65833eddb7eec9c5cd672de4773215442b41fdf7/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=65833eddb7eec9c5cd672de4773215442b41fdf7", "patch": "@@ -48,6 +48,17 @@ impl Std {\n     }\n }\n \n+/// Given an `alias` selected by the `Step` and the paths passed on the command line,\n+/// return a list of the crates that should be built.\n+///\n+/// Normally, people will pass *just* `library` if they pass it.\n+/// But it's possible (although strange) to pass something like `library std core`.\n+/// Build all crates anyway, as if they hadn't passed the other args.\n+pub(crate) fn make_run_crates(run: &RunConfig<'_>, alias: &str) -> Interned<Vec<String>> {\n+    let has_alias = run.paths.iter().any(|set| set.assert_single_path().path.ends_with(alias));\n+    if has_alias { Default::default() } else { run.cargo_crates_in_set() }\n+}\n+\n impl Step for Std {\n     type Output = ();\n     const DEFAULT: bool = true;\n@@ -62,16 +73,10 @@ impl Step for Std {\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n-        // Normally, people will pass *just* library if they pass it.\n-        // But it's possible (although strange) to pass something like `library std core`.\n-        // Build all crates anyway, as if they hadn't passed the other args.\n-        let has_library =\n-            run.paths.iter().any(|set| set.assert_single_path().path.ends_with(\"library\"));\n-        let crates = if has_library { Default::default() } else { run.cargo_crates_in_set() };\n         run.builder.ensure(Std {\n             compiler: run.builder.compiler(run.builder.top_stage, run.build_triple()),\n             target: run.target,\n-            crates,\n+            crates: make_run_crates(&run, \"library\"),\n         });\n     }\n \n@@ -615,6 +620,8 @@ impl Step for Rustc {\n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n         let mut crates = run.builder.in_tree_crates(\"rustc-main\", None);\n         for (i, krate) in crates.iter().enumerate() {\n+            // We can't allow `build rustc` as an alias for this Step, because that's reserved by `Assemble`.\n+            // Ideally Assemble would use `build compiler` instead, but that seems too confusing to be worth the breaking change.\n             if krate.name == \"rustc-main\" {\n                 crates.swap_remove(i);\n                 break;"}, {"sha": "46fc5b80e99d48f12aa1b80663b6a8d49e2c415f", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65833eddb7eec9c5cd672de4773215442b41fdf7/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65833eddb7eec9c5cd672de4773215442b41fdf7/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=65833eddb7eec9c5cd672de4773215442b41fdf7", "patch": "@@ -106,11 +106,7 @@ impl Step for JsonDocs {\n     /// Builds the `rust-docs-json` installer component.\n     fn run(self, builder: &Builder<'_>) -> Option<GeneratedTarball> {\n         let host = self.host;\n-        builder.ensure(crate::doc::Std {\n-            stage: builder.top_stage,\n-            target: host,\n-            format: DocumentationFormat::JSON,\n-        });\n+        builder.ensure(crate::doc::Std::new(builder.top_stage, host, DocumentationFormat::JSON));\n \n         let dest = \"share/doc/rust/json\";\n "}, {"sha": "3de85c91516c4759d7e4452c87192d2ce294f2d8", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 105, "deletions": 105, "changes": 210, "blob_url": "https://github.com/rust-lang/rust/blob/65833eddb7eec9c5cd672de4773215442b41fdf7/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65833eddb7eec9c5cd672de4773215442b41fdf7/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=65833eddb7eec9c5cd672de4773215442b41fdf7", "patch": "@@ -7,7 +7,6 @@\n //! Everything here is basically just a shim around calling either `rustbook` or\n //! `rustdoc`.\n \n-use std::ffi::OsStr;\n use std::fs;\n use std::io;\n use std::path::{Path, PathBuf};\n@@ -16,6 +15,7 @@ use crate::builder::crate_description;\n use crate::builder::{Builder, Compiler, Kind, RunConfig, ShouldRun, Step};\n use crate::cache::{Interned, INTERNER};\n use crate::compile;\n+use crate::compile::make_run_crates;\n use crate::config::{Config, TargetSelection};\n use crate::tool::{self, prepare_tool_cargo, SourceType, Tool};\n use crate::util::{symlink_dir, t, up_to_date};\n@@ -87,15 +87,6 @@ book!(\n     StyleGuide, \"src/doc/style-guide\", \"style-guide\";\n );\n \n-// \"library/std\" -> [\"library\", \"std\"]\n-//\n-// Used for deciding whether a particular step is one requested by the user on\n-// the `x.py doc` command line, which determines whether `--open` will open that\n-// page.\n-pub(crate) fn components_simplified(path: &PathBuf) -> Vec<&str> {\n-    path.iter().map(|component| component.to_str().unwrap_or(\"???\")).collect()\n-}\n-\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct UnstableBook {\n     target: TargetSelection,\n@@ -425,11 +416,18 @@ impl Step for SharedAssets {\n     }\n }\n \n-#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq, PartialOrd, Ord)]\n pub struct Std {\n     pub stage: u32,\n     pub target: TargetSelection,\n     pub format: DocumentationFormat,\n+    crates: Interned<Vec<String>>,\n+}\n+\n+impl Std {\n+    pub(crate) fn new(stage: u32, target: TargetSelection, format: DocumentationFormat) -> Self {\n+        Std { stage, target, format, crates: INTERNER.intern_list(vec![]) }\n+    }\n }\n \n impl Step for Std {\n@@ -438,7 +436,7 @@ impl Step for Std {\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n         let builder = run.builder;\n-        run.all_krates(\"sysroot\").path(\"library\").default_condition(builder.config.docs)\n+        run.crate_or_deps(\"sysroot\").path(\"library\").default_condition(builder.config.docs)\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -450,14 +448,15 @@ impl Step for Std {\n             } else {\n                 DocumentationFormat::HTML\n             },\n+            crates: make_run_crates(&run, \"library\"),\n         });\n     }\n \n     /// Compile all standard library documentation.\n     ///\n     /// This will generate all documentation for the standard library and its\n     /// dependencies. This is largely just a wrapper around `cargo doc`.\n-    fn run(self, builder: &Builder<'_>) {\n+    fn run(mut self, builder: &Builder<'_>) {\n         let stage = self.stage;\n         let target = self.target;\n         let out = match self.format {\n@@ -471,41 +470,24 @@ impl Step for Std {\n             builder.ensure(SharedAssets { target: self.target });\n         }\n \n-        let index_page = builder.src.join(\"src/doc/index.md\").into_os_string();\n+        let index_page = builder\n+            .src\n+            .join(\"src/doc/index.md\")\n+            .into_os_string()\n+            .into_string()\n+            .expect(\"non-utf8 paths are unsupported\");\n         let mut extra_args = match self.format {\n-            DocumentationFormat::HTML => vec![\n-                OsStr::new(\"--markdown-css\"),\n-                OsStr::new(\"rust.css\"),\n-                OsStr::new(\"--markdown-no-toc\"),\n-                OsStr::new(\"--index-page\"),\n-                &index_page,\n-            ],\n-            DocumentationFormat::JSON => vec![OsStr::new(\"--output-format\"), OsStr::new(\"json\")],\n+            DocumentationFormat::HTML => {\n+                vec![\"--markdown-css\", \"rust.css\", \"--markdown-no-toc\", \"--index-page\", &index_page]\n+            }\n+            DocumentationFormat::JSON => vec![\"--output-format\", \"json\"],\n         };\n \n         if !builder.config.docs_minification {\n-            extra_args.push(OsStr::new(\"--disable-minification\"));\n+            extra_args.push(\"--disable-minification\");\n         }\n \n-        let requested_crates = builder\n-            .paths\n-            .iter()\n-            .map(components_simplified)\n-            .filter_map(|path| {\n-                if path.len() >= 2 && path.get(0) == Some(&\"library\") {\n-                    // single crate\n-                    Some(path[1].to_owned())\n-                } else if !path.is_empty() {\n-                    // ??\n-                    Some(path[0].to_owned())\n-                } else {\n-                    // all library crates\n-                    None\n-                }\n-            })\n-            .collect::<Vec<_>>();\n-\n-        doc_std(builder, self.format, stage, target, &out, &extra_args, &requested_crates);\n+        doc_std(builder, self.format, stage, target, &out, &extra_args, &self.crates);\n \n         // Don't open if the format is json\n         if let DocumentationFormat::JSON = self.format {\n@@ -514,7 +496,11 @@ impl Step for Std {\n \n         // Look for library/std, library/core etc in the `x.py doc` arguments and\n         // open the corresponding rendered docs.\n-        for requested_crate in requested_crates {\n+        if self.crates.is_empty() {\n+            self.crates = INTERNER.intern_list(vec![\"library\".to_owned()]);\n+        };\n+\n+        for requested_crate in &*self.crates {\n             if requested_crate == \"library\" {\n                 // For `x.py doc library --open`, open `std` by default.\n                 let index = out.join(\"std\").join(\"index.html\");\n@@ -538,7 +524,7 @@ impl Step for Std {\n /// or remote link.\n const STD_PUBLIC_CRATES: [&str; 5] = [\"core\", \"alloc\", \"std\", \"proc_macro\", \"test\"];\n \n-#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq, PartialOrd, Ord)]\n pub enum DocumentationFormat {\n     HTML,\n     JSON,\n@@ -563,24 +549,22 @@ fn doc_std(\n     stage: u32,\n     target: TargetSelection,\n     out: &Path,\n-    extra_args: &[&OsStr],\n+    extra_args: &[&str],\n     requested_crates: &[String],\n ) {\n-    builder.info(&format!(\n-        \"Documenting{} stage{} library ({}) in {} format\",\n-        crate_description(requested_crates),\n-        stage,\n-        target,\n-        format.as_str()\n-    ));\n     if builder.no_std(target) == Some(true) {\n         panic!(\n             \"building std documentation for no_std target {target} is not supported\\n\\\n-             Set `docs = false` in the config to disable documentation.\"\n+             Set `docs = false` in the config to disable documentation, or pass `--exclude doc::library`.\"\n         );\n     }\n+\n     let compiler = builder.compiler(stage, builder.config.build);\n \n+    let description =\n+        format!(\"library{} in {} format\", crate_description(&requested_crates), format.as_str());\n+    let _guard = builder.msg(Kind::Doc, stage, &description, compiler.host, target);\n+\n     let target_doc_dir_name = if format == DocumentationFormat::JSON { \"json-doc\" } else { \"doc\" };\n     let target_dir =\n         builder.stage_out(compiler, Mode::Std).join(target.triple).join(target_doc_dir_name);\n@@ -590,42 +574,71 @@ fn doc_std(\n     // as a function parameter.\n     let out_dir = target_dir.join(target.triple).join(\"doc\");\n \n-    let run_cargo_rustdoc_for = |package: &str| {\n-        let mut cargo = builder.cargo(compiler, Mode::Std, SourceType::InTree, target, \"rustdoc\");\n-        compile::std_cargo(builder, target, compiler.stage, &mut cargo);\n-        cargo\n-            .arg(\"--target-dir\")\n-            .arg(&*target_dir.to_string_lossy())\n-            .arg(\"-p\")\n-            .arg(package)\n-            .arg(\"-Zskip-rustdoc-fingerprint\")\n-            .arg(\"--\")\n-            .arg(\"-Z\")\n-            .arg(\"unstable-options\")\n-            .arg(\"--resource-suffix\")\n-            .arg(&builder.version)\n-            .args(extra_args);\n-        if builder.config.library_docs_private_items {\n-            cargo.arg(\"--document-private-items\").arg(\"--document-hidden-items\");\n-        }\n-        builder.run(&mut cargo.into());\n+    let mut cargo = builder.cargo(compiler, Mode::Std, SourceType::InTree, target, \"doc\");\n+    compile::std_cargo(builder, target, compiler.stage, &mut cargo);\n+    cargo\n+        .arg(\"--no-deps\")\n+        .arg(\"--target-dir\")\n+        .arg(&*target_dir.to_string_lossy())\n+        .arg(\"-Zskip-rustdoc-fingerprint\")\n+        .rustdocflag(\"-Z\")\n+        .rustdocflag(\"unstable-options\")\n+        .rustdocflag(\"--resource-suffix\")\n+        .rustdocflag(&builder.version);\n+    for arg in extra_args {\n+        cargo.rustdocflag(arg);\n+    }\n+\n+    if builder.config.library_docs_private_items {\n+        cargo.rustdocflag(\"--document-private-items\").rustdocflag(\"--document-hidden-items\");\n+    }\n+\n+    // HACK: because we use `--manifest-path library/sysroot/Cargo.toml`, cargo thinks we only want to document that specific crate, not its dependencies.\n+    // Override its default.\n+    let built_crates = if requested_crates.is_empty() {\n+        builder\n+            .in_tree_crates(\"sysroot\", None)\n+            .into_iter()\n+            .map(|krate| krate.name.to_string())\n+            .collect()\n+    } else {\n+        requested_crates.to_vec()\n     };\n \n-    for krate in STD_PUBLIC_CRATES {\n-        run_cargo_rustdoc_for(krate);\n-        if requested_crates.iter().any(|p| p == krate) {\n-            // No need to document more of the libraries if we have the one we want.\n-            break;\n-        }\n+    for krate in built_crates {\n+        cargo.arg(\"-p\").arg(krate);\n     }\n \n+    builder.run(&mut cargo.into());\n     builder.cp_r(&out_dir, &out);\n }\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Rustc {\n     pub stage: u32,\n     pub target: TargetSelection,\n+    crates: Interned<Vec<String>>,\n+}\n+\n+impl Rustc {\n+    pub(crate) fn new(stage: u32, target: TargetSelection, builder: &Builder<'_>) -> Self {\n+        // Find dependencies for top level crates.\n+        let root_crates = vec![\n+            INTERNER.intern_str(\"rustc_driver\"),\n+            INTERNER.intern_str(\"rustc_codegen_llvm\"),\n+            INTERNER.intern_str(\"rustc_codegen_ssa\"),\n+        ];\n+        let crates: Vec<_> = root_crates\n+            .iter()\n+            .flat_map(|krate| {\n+                builder\n+                    .in_tree_crates(krate, Some(target))\n+                    .into_iter()\n+                    .map(|krate| krate.name.to_string())\n+            })\n+            .collect();\n+        Self { stage, target, crates: INTERNER.intern_list(crates) }\n+    }\n }\n \n impl Step for Rustc {\n@@ -641,7 +654,11 @@ impl Step for Rustc {\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n-        run.builder.ensure(Rustc { stage: run.builder.top_stage, target: run.target });\n+        run.builder.ensure(Rustc {\n+            stage: run.builder.top_stage,\n+            target: run.target,\n+            crates: make_run_crates(&run, \"compiler\"),\n+        });\n     }\n \n     /// Generates compiler documentation.\n@@ -654,15 +671,6 @@ impl Step for Rustc {\n         let stage = self.stage;\n         let target = self.target;\n \n-        let paths = builder\n-            .paths\n-            .iter()\n-            .filter(|path| {\n-                let components = components_simplified(path);\n-                components.len() >= 2 && components[0] == \"compiler\"\n-            })\n-            .collect::<Vec<_>>();\n-\n         // This is the intended out directory for compiler documentation.\n         let out = builder.compiler_doc_out(target);\n         t!(fs::create_dir_all(&out));\n@@ -672,7 +680,13 @@ impl Step for Rustc {\n         let compiler = builder.compiler(stage, builder.config.build);\n         builder.ensure(compile::Std::new(compiler, builder.config.build));\n \n-        builder.info(&format!(\"Documenting stage{} compiler ({})\", stage, target));\n+        let _guard = builder.msg(\n+            Kind::Doc,\n+            stage,\n+            &format!(\"compiler{}\", crate_description(&self.crates)),\n+            compiler.host,\n+            target,\n+        );\n \n         // This uses a shared directory so that librustdoc documentation gets\n         // correctly built and merged with the rustc documentation. This is\n@@ -710,22 +724,8 @@ impl Step for Rustc {\n         cargo.rustdocflag(\"--extern-html-root-url\");\n         cargo.rustdocflag(\"ena=https://docs.rs/ena/latest/\");\n \n-        let root_crates = if paths.is_empty() {\n-            vec![\n-                INTERNER.intern_str(\"rustc_driver\"),\n-                INTERNER.intern_str(\"rustc_codegen_llvm\"),\n-                INTERNER.intern_str(\"rustc_codegen_ssa\"),\n-            ]\n-        } else {\n-            paths.into_iter().map(|p| builder.crate_paths[p]).collect()\n-        };\n-        // Find dependencies for top level crates.\n-        let compiler_crates = root_crates.iter().flat_map(|krate| {\n-            builder.in_tree_crates(krate, Some(target)).into_iter().map(|krate| krate.name)\n-        });\n-\n         let mut to_open = None;\n-        for krate in compiler_crates {\n+        for krate in &*self.crates {\n             // Create all crate output directories first to make sure rustdoc uses\n             // relative links.\n             // FIXME: Cargo should probably do this itself.\n@@ -785,7 +785,7 @@ macro_rules! tool_doc {\n \n                 if true $(&& $rustc_tool)? {\n                     // Build rustc docs so that we generate relative links.\n-                    builder.ensure(Rustc { stage, target });\n+                    builder.ensure(Rustc::new(stage, target, builder));\n \n                     // Rustdoc needs the rustc sysroot available to build.\n                     // FIXME: is there a way to only ensure `check::Rustc` here? Last time I tried it failed"}, {"sha": "f7d30de67ebaba6a371e600332f8b230a15b8b23", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65833eddb7eec9c5cd672de4773215442b41fdf7/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65833eddb7eec9c5cd672de4773215442b41fdf7/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=65833eddb7eec9c5cd672de4773215442b41fdf7", "patch": "@@ -1020,8 +1020,8 @@ impl Build {\n         host: impl Into<Option<TargetSelection>>,\n         target: impl Into<Option<TargetSelection>>,\n     ) -> Option<gha::Group> {\n-        let action = action.into();\n-        let msg = |fmt| format!(\"{action:?}ing stage{stage} {what}{fmt}\");\n+        let action = action.into().description();\n+        let msg = |fmt| format!(\"{action} stage{stage} {what}{fmt}\");\n         let msg = if let Some(target) = target.into() {\n             let host = host.into().unwrap();\n             if host == target {"}, {"sha": "960abb31b2016693e9aa00cef431655406d50687", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/65833eddb7eec9c5cd672de4773215442b41fdf7/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65833eddb7eec9c5cd672de4773215442b41fdf7/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=65833eddb7eec9c5cd672de4773215442b41fdf7", "patch": "@@ -101,7 +101,7 @@ impl Step for CrateBootstrap {\n         );\n         builder.info(&format!(\n             \"{} {} stage0 ({})\",\n-            builder.kind.test_description(),\n+            builder.kind.description(),\n             path,\n             bootstrap_host,\n         ));\n@@ -220,7 +220,7 @@ impl Step for HtmlCheck {\n         }\n         // Ensure that a few different kinds of documentation are available.\n         builder.default_doc(&[]);\n-        builder.ensure(crate::doc::Rustc { target: self.target, stage: builder.top_stage });\n+        builder.ensure(crate::doc::Rustc::new(builder.top_stage, self.target, builder));\n \n         try_run(builder, builder.tool_cmd(Tool::HtmlChecker).arg(builder.doc_out(self.target)));\n     }\n@@ -886,11 +886,11 @@ impl Step for RustdocJSStd {\n                     command.arg(\"--test-file\").arg(path);\n                 }\n             }\n-            builder.ensure(crate::doc::Std {\n-                target: self.target,\n-                stage: builder.top_stage,\n-                format: DocumentationFormat::HTML,\n-            });\n+            builder.ensure(crate::doc::Std::new(\n+                builder.top_stage,\n+                self.target,\n+                DocumentationFormat::HTML,\n+            ));\n             builder.run(&mut command);\n         } else {\n             builder.info(\"No nodejs found, skipping \\\"tests/rustdoc-js-std\\\" tests\");"}]}