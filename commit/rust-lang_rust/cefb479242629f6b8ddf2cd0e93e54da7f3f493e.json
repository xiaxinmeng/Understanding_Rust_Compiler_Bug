{"sha": "cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "node_id": "C_kwDOAAsO6NoAKGNlZmI0NzkyNDI2MjlmNmI4ZGRmMmNkMGU5M2U1NGRhN2YzZjQ5M2U", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2023-04-24T17:33:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-24T17:33:25Z"}, "message": "Rollup merge of #110539 - WaffleLapkin:split_index_vec&slice, r=cjgillot\n\nMove around `{Idx, IndexVec, IndexSlice}` adjacent code\n\nr? ``@scottmcm``", "tree": {"sha": "cc416c2987d674e0ea3c9ff867897c7e24908024", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc416c2987d674e0ea3c9ff867897c7e24908024"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkRr1lCRBK7hj4Ov3rIwAATSUIAB93p2w/zknbA8YYsppFMqqU\nx0fXYFW3uU1H4+8YcNWGO6hj0QSMsiUFDfftRnsSblFazq9CZ9IqNOguGVMwqq0d\nIDopgnKLKf5duqB+VmeSxzrWhZlTjORIwdTPxs7NxuvCCuuHg8qyu3BRfsLaCcKg\nRFrESNEdSz6jkL6h9QYlwFv/B4X07rNN60lvKuMDOhOFT080fFVTSwpHelJREE7R\nDzsBn1l0O45wFK9atYYNKMqsODrDIBVN8QjpWVTcRJ3JfXwbhcChyU8xtwh/CSZV\nPVv03LXcE3cI8/CsnylLikekRLHNzzvY7Vm32jboCkGvHPo094T0w7nE0JILAZ8=\n=+hYh\n-----END PGP SIGNATURE-----\n", "payload": "tree cc416c2987d674e0ea3c9ff867897c7e24908024\nparent 42467d57cbe48ab2273a9c72b60708e2de2e362f\nparent c0daff08c761ff6810b6bfebba17d9b8d31291a3\nauthor Yuki Okushi <jtitor@2k36.org> 1682357605 +0900\ncommitter GitHub <noreply@github.com> 1682357605 +0900\n\nRollup merge of #110539 - WaffleLapkin:split_index_vec&slice, r=cjgillot\n\nMove around `{Idx, IndexVec, IndexSlice}` adjacent code\n\nr? ``@scottmcm``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "html_url": "https://github.com/rust-lang/rust/commit/cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42467d57cbe48ab2273a9c72b60708e2de2e362f", "url": "https://api.github.com/repos/rust-lang/rust/commits/42467d57cbe48ab2273a9c72b60708e2de2e362f", "html_url": "https://github.com/rust-lang/rust/commit/42467d57cbe48ab2273a9c72b60708e2de2e362f"}, {"sha": "c0daff08c761ff6810b6bfebba17d9b8d31291a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0daff08c761ff6810b6bfebba17d9b8d31291a3", "html_url": "https://github.com/rust-lang/rust/commit/c0daff08c761ff6810b6bfebba17d9b8d31291a3"}], "stats": {"total": 1096, "additions": 558, "deletions": 538}, "files": [{"sha": "d01a9b003042b6127ad2d47d0eb5d0bb97fa3a14", "filename": "compiler/rustc_abi/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_abi%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_abi%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_abi%2Fsrc%2Flib.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -12,7 +12,7 @@ use rustc_data_structures::intern::Interned;\n use rustc_data_structures::stable_hasher::Hash64;\n #[cfg(feature = \"nightly\")]\n use rustc_data_structures::stable_hasher::StableOrd;\n-use rustc_index::vec::{IndexSlice, IndexVec};\n+use rustc_index::{IndexSlice, IndexVec};\n #[cfg(feature = \"nightly\")]\n use rustc_macros::HashStable_Generic;\n #[cfg(feature = \"nightly\")]"}, {"sha": "2e66c81eb0d058f105bc182112ffd9bbc27c082b", "filename": "compiler/rustc_ast_lowering/src/index.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -5,7 +5,7 @@ use rustc_hir::def_id::LocalDefId;\n use rustc_hir::definitions;\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::*;\n-use rustc_index::vec::{Idx, IndexVec};\n+use rustc_index::{Idx, IndexVec};\n use rustc_middle::span_bug;\n use rustc_session::Session;\n use rustc_span::source_map::SourceMap;"}, {"sha": "a9fd8db281b589063088ff4ee254fe8257ad0423", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -12,7 +12,7 @@ use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{LocalDefId, CRATE_DEF_ID};\n use rustc_hir::PredicateOrigin;\n-use rustc_index::vec::{Idx, IndexSlice, IndexVec};\n+use rustc_index::{Idx, IndexSlice, IndexVec};\n use rustc_middle::ty::{ResolverAstLowering, TyCtxt};\n use rustc_span::edit_distance::find_best_match_for_name;\n use rustc_span::source_map::DesugaringKind;"}, {"sha": "d07355a4154021b970d1cbd1d663f49009b306a3", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -61,7 +61,7 @@ use rustc_hir::def::{DefKind, LifetimeRes, Namespace, PartialRes, PerNS, Res};\n use rustc_hir::def_id::{LocalDefId, CRATE_DEF_ID};\n use rustc_hir::definitions::DefPathData;\n use rustc_hir::{ConstArg, GenericArg, ItemLocalId, ParamName, TraitCandidate};\n-use rustc_index::vec::{Idx, IndexSlice, IndexVec};\n+use rustc_index::{Idx, IndexSlice, IndexVec};\n use rustc_middle::{\n     span_bug,\n     ty::{ResolverAstLowering, TyCtxt},"}, {"sha": "8b7d9ec2cd671cf659ddfddf303802c26d68ceb0", "filename": "compiler/rustc_borrowck/src/constraints/graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fgraph.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -1,5 +1,5 @@\n use rustc_data_structures::graph;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::IndexVec;\n use rustc_middle::mir::ConstraintCategory;\n use rustc_middle::ty::{RegionVid, VarianceDiagInfo};\n use rustc_span::DUMMY_SP;"}, {"sha": "315886bbe29ba53f302159f7f1c3268c660d916f", "filename": "compiler/rustc_borrowck/src/constraints/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fmod.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -2,7 +2,7 @@\n #![deny(rustc::diagnostic_outside_of_impl)]\n \n use rustc_data_structures::graph::scc::Sccs;\n-use rustc_index::vec::{IndexSlice, IndexVec};\n+use rustc_index::{IndexSlice, IndexVec};\n use rustc_middle::mir::ConstraintCategory;\n use rustc_middle::ty::{RegionVid, VarianceDiagInfo};\n use rustc_span::Span;"}, {"sha": "3451b7db8caaea5010b3194d6f010cbad620a9ef", "filename": "compiler/rustc_borrowck/src/consumers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_borrowck%2Fsrc%2Fconsumers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_borrowck%2Fsrc%2Fconsumers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fconsumers.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -3,7 +3,7 @@\n //! This file provides API for compiler consumers.\n \n use rustc_hir::def_id::LocalDefId;\n-use rustc_index::vec::IndexSlice;\n+use rustc_index::IndexSlice;\n use rustc_infer::infer::{DefiningAnchor, TyCtxtInferExt};\n use rustc_middle::mir::Body;\n use rustc_middle::ty::TyCtxt;"}, {"sha": "f995c3165a91e2da189f674d53055e1b047f3e42", "filename": "compiler/rustc_borrowck/src/diagnostics/explain_borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -3,7 +3,7 @@\n use rustc_errors::{Applicability, Diagnostic};\n use rustc_hir as hir;\n use rustc_hir::intravisit::Visitor;\n-use rustc_index::vec::IndexSlice;\n+use rustc_index::IndexSlice;\n use rustc_infer::infer::NllRegionVariableOrigin;\n use rustc_middle::mir::{\n     Body, CastKind, ConstraintCategory, FakeReadCause, Local, LocalInfo, Location, Operand, Place,"}, {"sha": "4243ec214b098fcd11fc196ac10525688f747c2c", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -9,7 +9,7 @@ use rustc_errors::{Applicability, Diagnostic};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, Namespace};\n use rustc_hir::GeneratorKind;\n-use rustc_index::vec::IndexSlice;\n+use rustc_index::IndexSlice;\n use rustc_infer::infer::LateBoundRegionConversionTime;\n use rustc_middle::mir::tcx::PlaceTy;\n use rustc_middle::mir::{"}, {"sha": "98418e2372f0e612b6675a7cf199396355b10ce0", "filename": "compiler/rustc_borrowck/src/diagnostics/var_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fvar_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fvar_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fvar_name.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -3,7 +3,7 @@\n \n use crate::region_infer::RegionInferenceContext;\n use crate::Upvar;\n-use rustc_index::vec::IndexSlice;\n+use rustc_index::IndexSlice;\n use rustc_middle::mir::{Body, Local};\n use rustc_middle::ty::{RegionVid, TyCtxt};\n use rustc_span::source_map::Span;"}, {"sha": "b57b0c9e4ba1a93665ca68ff934229f74421df74", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -24,7 +24,7 @@ use rustc_fluent_macro::fluent_messages;\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n use rustc_index::bit_set::ChunkedBitSet;\n-use rustc_index::vec::{IndexSlice, IndexVec};\n+use rustc_index::{IndexSlice, IndexVec};\n use rustc_infer::infer::{\n     DefiningAnchor, InferCtxt, NllRegionVariableOrigin, RegionVariableOrigin, TyCtxtInferExt,\n };"}, {"sha": "0e669abfd14aa5b9da32ff8fbe5ac01ce631a894", "filename": "compiler/rustc_borrowck/src/location.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_borrowck%2Fsrc%2Flocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_borrowck%2Fsrc%2Flocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flocation.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -1,6 +1,6 @@\n #![deny(rustc::untranslatable_diagnostic)]\n #![deny(rustc::diagnostic_outside_of_impl)]\n-use rustc_index::vec::IndexVec;\n+use rustc_index::IndexVec;\n use rustc_middle::mir::{BasicBlock, Body, Location};\n \n /// Maps between a MIR Location, which identifies a particular"}, {"sha": "db5b8f464c852a47258c938fe0bb175caff07368", "filename": "compiler/rustc_borrowck/src/member_constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_borrowck%2Fsrc%2Fmember_constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_borrowck%2Fsrc%2Fmember_constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fmember_constraints.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -2,7 +2,7 @@\n #![deny(rustc::diagnostic_outside_of_impl)]\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::FxIndexMap;\n-use rustc_index::vec::{IndexSlice, IndexVec};\n+use rustc_index::{IndexSlice, IndexVec};\n use rustc_middle::infer::MemberConstraint;\n use rustc_middle::ty::{self, Ty};\n use rustc_span::Span;"}, {"sha": "5f1bcb27ea7939cd25a634fee8a1a66bd2a2892d", "filename": "compiler/rustc_borrowck/src/nll.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -4,7 +4,7 @@\n \n use rustc_data_structures::fx::FxIndexMap;\n use rustc_hir::def_id::LocalDefId;\n-use rustc_index::vec::IndexSlice;\n+use rustc_index::IndexSlice;\n use rustc_middle::mir::{create_dump_file, dump_enabled, dump_mir, PassWhere};\n use rustc_middle::mir::{\n     Body, ClosureOutlivesSubject, ClosureRegionRequirements, LocalKind, Location, Promoted,"}, {"sha": "65573c71f14a0ea584cca4c15154badc99b07e76", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -7,7 +7,7 @@ use rustc_data_structures::fx::{FxIndexMap, FxIndexSet};\n use rustc_data_structures::graph::scc::Sccs;\n use rustc_errors::Diagnostic;\n use rustc_hir::def_id::CRATE_DEF_ID;\n-use rustc_index::vec::{IndexSlice, IndexVec};\n+use rustc_index::{IndexSlice, IndexVec};\n use rustc_infer::infer::outlives::test_type_match;\n use rustc_infer::infer::region_constraints::{GenericKind, VarInfos, VerifyBound, VerifyIfEq};\n use rustc_infer::infer::{InferCtxt, NllRegionVariableOrigin, RegionVariableOrigin};"}, {"sha": "193e20601152b36eb61c18b2e810f9a8c2f3c2f2", "filename": "compiler/rustc_borrowck/src/region_infer/values.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fvalues.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -4,8 +4,8 @@ use rustc_data_structures::fx::FxIndexSet;\n use rustc_index::bit_set::SparseBitMatrix;\n use rustc_index::interval::IntervalSet;\n use rustc_index::interval::SparseIntervalMatrix;\n-use rustc_index::vec::Idx;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::Idx;\n+use rustc_index::IndexVec;\n use rustc_middle::mir::{BasicBlock, Body, Location};\n use rustc_middle::ty::{self, RegionVid};\n use std::fmt::Debug;"}, {"sha": "22de7549e9409cf8300fe25b46d2998d9293e903", "filename": "compiler/rustc_borrowck/src/renumber.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -1,7 +1,7 @@\n #![deny(rustc::untranslatable_diagnostic)]\n #![deny(rustc::diagnostic_outside_of_impl)]\n use crate::BorrowckInferCtxt;\n-use rustc_index::vec::IndexSlice;\n+use rustc_index::IndexSlice;\n use rustc_infer::infer::NllRegionVariableOrigin;\n use rustc_middle::mir::visit::{MutVisitor, TyContext};\n use rustc_middle::mir::Constant;"}, {"sha": "a9ca94567878a598e79bbb481aaa2dafef2494b0", "filename": "compiler/rustc_borrowck/src/type_check/liveness/local_use_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Flocal_use_map.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -1,5 +1,5 @@\n use rustc_data_structures::vec_linked_list as vll;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::IndexVec;\n use rustc_middle::mir::visit::{PlaceContext, Visitor};\n use rustc_middle::mir::{Body, Local, Location};\n "}, {"sha": "d5e50a61b032c5543398920e6d02229db7dd91f9", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -14,7 +14,7 @@ use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::lang_items::LangItem;\n-use rustc_index::vec::{IndexSlice, IndexVec};\n+use rustc_index::{IndexSlice, IndexVec};\n use rustc_infer::infer::canonical::QueryRegionConstraints;\n use rustc_infer::infer::outlives::env::RegionBoundPairs;\n use rustc_infer::infer::region_constraints::RegionConstraintData;"}, {"sha": "3f7f23df8d92d96981fc7a13ea8a2072d8cf7f69", "filename": "compiler/rustc_borrowck/src/universal_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -19,7 +19,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::BodyOwnerKind;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::IndexVec;\n use rustc_infer::infer::NllRegionVariableOrigin;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::{self, InlineConstSubsts, InlineConstSubstsParts, RegionVid, Ty, TyCtxt};"}, {"sha": "bd055216e367acbf4213cc38bd6453be00c2c93f", "filename": "compiler/rustc_codegen_cranelift/src/abi/returning.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Freturning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Freturning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Freturning.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -9,7 +9,7 @@ use smallvec::{smallvec, SmallVec};\n /// this adds an extra parameter pointing to where the return value needs to be stored.\n pub(super) fn codegen_return_param<'tcx>(\n     fx: &mut FunctionCx<'_, '_, 'tcx>,\n-    ssa_analyzed: &rustc_index::vec::IndexVec<Local, crate::analyze::SsaKind>,\n+    ssa_analyzed: &rustc_index::IndexSlice<Local, crate::analyze::SsaKind>,\n     block_params_iter: &mut impl Iterator<Item = Value>,\n ) -> CPlace<'tcx> {\n     let (ret_place, ret_param): (_, SmallVec<[_; 2]>) = match fx.fn_abi.as_ref().unwrap().ret.mode {"}, {"sha": "359d581c1535ab07bc3024050a1151153c33af68", "filename": "compiler/rustc_codegen_cranelift/src/analyze.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fanalyze.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -2,7 +2,7 @@\n \n use crate::prelude::*;\n \n-use rustc_index::vec::IndexVec;\n+use rustc_index::IndexVec;\n use rustc_middle::mir::StatementKind::*;\n use rustc_middle::ty::Ty;\n "}, {"sha": "98ba23c6f5799c9cccdbcb4fe342882fb4c32a0b", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -1,7 +1,7 @@\n //! Codegen of a single function\n \n use rustc_ast::InlineAsmOptions;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::IndexVec;\n use rustc_middle::ty::adjustment::PointerCast;\n use rustc_middle::ty::layout::FnAbiOf;\n use rustc_middle::ty::print::with_no_trimmed_paths;"}, {"sha": "528b35283d7614795a38b2f0110e984d6503d67f", "filename": "compiler/rustc_codegen_cranelift/src/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -2,7 +2,7 @@ use cranelift_codegen::isa::TargetFrontendConfig;\n use gimli::write::FileId;\n \n use rustc_data_structures::sync::Lrc;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::IndexVec;\n use rustc_middle::ty::layout::{\n     FnAbiError, FnAbiOfHelpers, FnAbiRequest, LayoutError, LayoutOfHelpers,\n };"}, {"sha": "74d9b72b90cae404b7b7bd046eaeb8100f0f8720", "filename": "compiler/rustc_codegen_cranelift/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -90,7 +90,7 @@ mod prelude {\n \n     pub(crate) use rustc_data_structures::fx::FxHashMap;\n \n-    pub(crate) use rustc_index::vec::Idx;\n+    pub(crate) use rustc_index::Idx;\n \n     pub(crate) use cranelift_codegen::ir::condcodes::{FloatCC, IntCC};\n     pub(crate) use cranelift_codegen::ir::function::Function;"}, {"sha": "2f910c37d610852cdc025e1a7349c954a0ee9613", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/create_scope_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fcreate_scope_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fcreate_scope_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fcreate_scope_map.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -12,7 +12,7 @@ use rustc_middle::ty::{self, Instance};\n use rustc_session::config::DebugInfo;\n \n use rustc_index::bit_set::BitSet;\n-use rustc_index::vec::Idx;\n+use rustc_index::Idx;\n \n /// Produces DIScope DIEs for each MIR Scope which has variables defined in it.\n // FIXME(eddyb) almost all of this should be in `rustc_codegen_ssa::mir::debuginfo`."}, {"sha": "ecb0912d32881bca0ff6f8ace04029438395c0c5", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata/enums/cpp_like.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fcpp_like.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fcpp_like.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fcpp_like.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -6,7 +6,7 @@ use rustc_codegen_ssa::{\n     traits::ConstMethods,\n };\n \n-use rustc_index::vec::IndexVec;\n+use rustc_index::IndexVec;\n use rustc_middle::{\n     bug,\n     ty::{"}, {"sha": "9e0e847a155653226bae977f4464a954ede9dcea", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata/enums/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fmod.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -3,7 +3,7 @@ use rustc_codegen_ssa::debuginfo::{\n     wants_c_like_enum_debuginfo,\n };\n use rustc_hir::def::CtorKind;\n-use rustc_index::vec::IndexSlice;\n+use rustc_index::IndexSlice;\n use rustc_middle::{\n     bug,\n     mir::{GeneratorLayout, GeneratorSavedLocal},"}, {"sha": "824cffa28bac3dff343b5c31be6ad7a687edcea6", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -24,7 +24,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::Hash128;\n use rustc_data_structures::sync::Lrc;\n use rustc_hir::def_id::{DefId, DefIdMap};\n-use rustc_index::vec::IndexVec;\n+use rustc_index::IndexVec;\n use rustc_middle::mir;\n use rustc_middle::ty::layout::LayoutOf;\n use rustc_middle::ty::subst::SubstsRef;"}, {"sha": "e4da3b8de05126ba8d4b92f812b796511eba306d", "filename": "compiler/rustc_codegen_ssa/src/coverageinfo/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcoverageinfo%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcoverageinfo%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcoverageinfo%2Fmap.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -1,6 +1,6 @@\n pub use super::ffi::*;\n \n-use rustc_index::vec::{IndexSlice, IndexVec};\n+use rustc_index::{IndexSlice, IndexVec};\n use rustc_middle::mir::coverage::{\n     CodeRegion, CounterValueReference, ExpressionOperandId, InjectedExpressionId,\n     InjectedExpressionIndex, MappedExpressionIndex, Op,"}, {"sha": "0334c7ff13264ab1a9d5214f5cce4a82c349a27c", "filename": "compiler/rustc_codegen_ssa/src/mir/analyze.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -5,7 +5,7 @@ use super::FunctionCx;\n use crate::traits::*;\n use rustc_data_structures::graph::dominators::Dominators;\n use rustc_index::bit_set::BitSet;\n-use rustc_index::vec::{IndexSlice, IndexVec};\n+use rustc_index::{IndexSlice, IndexVec};\n use rustc_middle::mir::traversal;\n use rustc_middle::mir::visit::{MutatingUseContext, NonMutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::{self, Location, TerminatorKind};"}, {"sha": "4e5e2dd5d506bd182548a32e836b785ccd3fe039", "filename": "compiler/rustc_codegen_ssa/src/mir/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -1,5 +1,5 @@\n use crate::traits::*;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::IndexVec;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::mir;\n use rustc_middle::ty;"}, {"sha": "e4f04b83d58cf896f935ab8fca70747a21a3a323", "filename": "compiler/rustc_codegen_ssa/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -9,7 +9,7 @@ use rustc_target::abi::call::{FnAbi, PassMode};\n use std::iter;\n \n use rustc_index::bit_set::BitSet;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::IndexVec;\n \n use self::debuginfo::{FunctionDebugContext, PerLocalVarDebugInfo};\n use self::place::PlaceRef;"}, {"sha": "361ce123c78eb904b95cbf02c4362f403e069e7a", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -5,7 +5,7 @@ use std::mem;\n use either::{Either, Left, Right};\n \n use rustc_hir::{self as hir, def_id::DefId, definitions::DefPathData};\n-use rustc_index::vec::IndexVec;\n+use rustc_index::IndexVec;\n use rustc_middle::mir;\n use rustc_middle::mir::interpret::{ErrorHandled, InterpError};\n use rustc_middle::ty::layout::{"}, {"sha": "2a31a59ad6c7c5d6300b3f3f6ccf43f3ab7ec2f1", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -5,7 +5,7 @@\n use either::{Either, Left, Right};\n \n use rustc_ast::Mutability;\n-use rustc_index::vec::IndexSlice;\n+use rustc_index::IndexSlice;\n use rustc_middle::mir;\n use rustc_middle::ty;\n use rustc_middle::ty::layout::{LayoutOf, TyAndLayout};"}, {"sha": "0e2d9ee8fb2fbd8c39a379f732cbbd70cbedf640", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -21,7 +21,7 @@ use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::{self, List, TyCtxt, TypeVisitableExt};\n use rustc_span::Span;\n \n-use rustc_index::vec::{Idx, IndexSlice, IndexVec};\n+use rustc_index::{Idx, IndexSlice, IndexVec};\n \n use std::cell::Cell;\n use std::{cmp, iter, mem};"}, {"sha": "03ab2e568df8028101988b7ab65202d4b4b25c07", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -2,7 +2,7 @@\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_index::bit_set::BitSet;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::IndexVec;\n use rustc_infer::traits::Reveal;\n use rustc_middle::mir::interpret::Scalar;\n use rustc_middle::mir::visit::{NonUseContext, PlaceContext, Visitor};"}, {"sha": "e3fcaccb1bd5f4aff0947f5c92b32aa9a8a6ca8b", "filename": "compiler/rustc_data_structures/src/functor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_data_structures%2Fsrc%2Ffunctor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_data_structures%2Fsrc%2Ffunctor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ffunctor.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -1,4 +1,4 @@\n-use rustc_index::vec::{Idx, IndexVec};\n+use rustc_index::{Idx, IndexVec};\n use std::{mem, rc::Rc, sync::Arc};\n \n pub trait IdFunctor: Sized {"}, {"sha": "e76bdac286411b3b499f117868e300f5dc58fee4", "filename": "compiler/rustc_data_structures/src/graph/dominators/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Fmod.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -10,7 +10,8 @@\n //! <https://www.cs.princeton.edu/courses/archive/spr03/cs423/download/dominators.pdf>\n \n use super::ControlFlowGraph;\n-use rustc_index::vec::{Idx, IndexSlice, IndexVec};\n+use rustc_index::{Idx, IndexSlice, IndexVec};\n+\n use std::cmp::Ordering;\n \n #[cfg(test)]"}, {"sha": "9eb4b5278c07940b30863d5356d2f757a091fc43", "filename": "compiler/rustc_data_structures/src/graph/iterate/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fiterate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fiterate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fiterate%2Fmod.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -1,6 +1,6 @@\n use super::{DirectedGraph, WithNumNodes, WithStartNode, WithSuccessors};\n use rustc_index::bit_set::BitSet;\n-use rustc_index::vec::{IndexSlice, IndexVec};\n+use rustc_index::{IndexSlice, IndexVec};\n use std::ops::ControlFlow;\n \n #[cfg(test)]"}, {"sha": "e06ab2fe36b92571c06815b1c5e6df4b465e845c", "filename": "compiler/rustc_data_structures/src/graph/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fmod.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -1,4 +1,4 @@\n-use rustc_index::vec::Idx;\n+use rustc_index::Idx;\n \n pub mod dominators;\n pub mod implementation;"}, {"sha": "cf9312ea8fb64a95115e7c0765a15a602127438f", "filename": "compiler/rustc_data_structures/src/graph/scc/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fscc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fscc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fscc%2Fmod.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -8,7 +8,7 @@\n use crate::fx::FxHashSet;\n use crate::graph::vec_graph::VecGraph;\n use crate::graph::{DirectedGraph, GraphSuccessors, WithNumEdges, WithNumNodes, WithSuccessors};\n-use rustc_index::vec::{Idx, IndexSlice, IndexVec};\n+use rustc_index::{Idx, IndexSlice, IndexVec};\n use std::ops::Range;\n \n #[cfg(test)]"}, {"sha": "00f6266ce1df7d28aa41e47b0cc4d26d255609e4", "filename": "compiler/rustc_data_structures/src/graph/vec_graph/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fvec_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fvec_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fvec_graph%2Fmod.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -1,5 +1,5 @@\n use crate::graph::{DirectedGraph, GraphSuccessors, WithNumEdges, WithNumNodes, WithSuccessors};\n-use rustc_index::vec::{Idx, IndexVec};\n+use rustc_index::{Idx, IndexVec};\n \n #[cfg(test)]\n mod tests;"}, {"sha": "c172ee1c9706608322445772cd5bb6c4f3b64b65", "filename": "compiler/rustc_data_structures/src/sorted_map/index_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Findex_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Findex_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Findex_map.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -3,7 +3,7 @@\n use std::hash::{Hash, Hasher};\n \n use crate::stable_hasher::{HashStable, StableHasher};\n-use rustc_index::vec::{Idx, IndexVec};\n+use rustc_index::{Idx, IndexVec};\n \n /// An indexed multi-map that preserves insertion order while permitting both *O*(log *n*) lookup of\n /// an item by key and *O*(1) lookup by index."}, {"sha": "6d57d81c56a4bd213a7ace408b96d0be82b204df", "filename": "compiler/rustc_data_structures/src/stable_hasher.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -1,6 +1,6 @@\n use crate::sip128::SipHasher128;\n-use rustc_index::bit_set;\n-use rustc_index::vec;\n+use rustc_index::bit_set::{self, BitSet};\n+use rustc_index::{Idx, IndexVec};\n use smallvec::SmallVec;\n use std::fmt;\n use std::hash::{BuildHasher, Hash, Hasher};\n@@ -557,7 +557,7 @@ where\n     }\n }\n \n-impl<I: vec::Idx, T, CTX> HashStable<CTX> for vec::IndexVec<I, T>\n+impl<I: Idx, T, CTX> HashStable<CTX> for IndexVec<I, T>\n where\n     T: HashStable<CTX>,\n {\n@@ -569,13 +569,13 @@ where\n     }\n }\n \n-impl<I: vec::Idx, CTX> HashStable<CTX> for bit_set::BitSet<I> {\n+impl<I: Idx, CTX> HashStable<CTX> for BitSet<I> {\n     fn hash_stable(&self, _ctx: &mut CTX, hasher: &mut StableHasher) {\n         ::std::hash::Hash::hash(self, hasher);\n     }\n }\n \n-impl<R: vec::Idx, C: vec::Idx, CTX> HashStable<CTX> for bit_set::BitMatrix<R, C> {\n+impl<R: Idx, C: Idx, CTX> HashStable<CTX> for bit_set::BitMatrix<R, C> {\n     fn hash_stable(&self, _ctx: &mut CTX, hasher: &mut StableHasher) {\n         ::std::hash::Hash::hash(self, hasher);\n     }"}, {"sha": "e36dded9e5e5e4eb0dbe13eded03b612da70c89e", "filename": "compiler/rustc_data_structures/src/sync/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_data_structures%2Fsrc%2Fsync%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_data_structures%2Fsrc%2Fsync%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsync%2Fvec.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -1,6 +1,6 @@\n use std::marker::PhantomData;\n \n-use rustc_index::vec::Idx;\n+use rustc_index::Idx;\n \n #[derive(Default)]\n pub struct AppendOnlyIndexVec<I: Idx, T: Copy> {"}, {"sha": "fda72c9a3b2042af1b2753b3f61b8403948d4326", "filename": "compiler/rustc_data_structures/src/vec_linked_list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_data_structures%2Fsrc%2Fvec_linked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_data_structures%2Fsrc%2Fvec_linked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fvec_linked_list.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -1,4 +1,4 @@\n-use rustc_index::vec::{Idx, IndexVec};\n+use rustc_index::{Idx, IndexVec};\n \n pub fn iter<Ls>(\n     first: Option<Ls::LinkIndex>,"}, {"sha": "9db6b6f20bede576f74fcddd37e912a562bcd635", "filename": "compiler/rustc_data_structures/src/work_queue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_data_structures%2Fsrc%2Fwork_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_data_structures%2Fsrc%2Fwork_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fwork_queue.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -1,5 +1,5 @@\n use rustc_index::bit_set::BitSet;\n-use rustc_index::vec::Idx;\n+use rustc_index::Idx;\n use std::collections::VecDeque;\n \n /// A work queue is a handy data structure for tracking work left to"}, {"sha": "66b153d8931b05ba7360b773c56e0cf04ef9a5d7", "filename": "compiler/rustc_hir/src/definitions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -10,7 +10,7 @@ use crate::def_path_hash_map::DefPathHashMap;\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{Hash64, StableHasher};\n-use rustc_index::vec::IndexVec;\n+use rustc_index::IndexVec;\n use rustc_span::symbol::{kw, sym, Symbol};\n \n use std::fmt::{self, Write};"}, {"sha": "21b4a3370d3e3cb7e5e347d4e1932dc62d16d0fd", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -14,7 +14,7 @@ use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sorted_map::SortedMap;\n use rustc_error_messages::MultiSpan;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::IndexVec;\n use rustc_macros::HashStable_Generic;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::Spanned;\n@@ -863,7 +863,7 @@ pub struct OwnerNodes<'tcx> {\n \n impl<'tcx> OwnerNodes<'tcx> {\n     pub fn node(&self) -> OwnerNode<'tcx> {\n-        use rustc_index::vec::Idx;\n+        use rustc_index::Idx;\n         let node = self.nodes[ItemLocalId::new(0)].as_ref().unwrap().node;\n         let node = node.as_owner().unwrap(); // Indexing must ensure it is an OwnerNode.\n         node"}, {"sha": "d549f52f873a92f8df72bb6288c1f2ac2fec8e91", "filename": "compiler/rustc_hir/src/hir_id.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -35,7 +35,7 @@ impl OwnerId {\n     }\n }\n \n-impl rustc_index::vec::Idx for OwnerId {\n+impl rustc_index::Idx for OwnerId {\n     #[inline]\n     fn new(idx: usize) -> Self {\n         OwnerId { def_id: LocalDefId { local_def_index: DefIndex::from_usize(idx) } }\n@@ -116,10 +116,7 @@ impl HirId {\n     }\n \n     pub fn index(self) -> (usize, usize) {\n-        (\n-            rustc_index::vec::Idx::index(self.owner.def_id),\n-            rustc_index::vec::Idx::index(self.local_id),\n-        )\n+        (rustc_index::Idx::index(self.owner.def_id), rustc_index::Idx::index(self.local_id))\n     }\n }\n "}, {"sha": "421b3df2d533e879a122da36fae2a918395bf4f0", "filename": "compiler/rustc_hir_analysis/src/check/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fregion.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -12,7 +12,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{Arm, Block, Expr, Local, Pat, PatKind, Stmt};\n-use rustc_index::vec::Idx;\n+use rustc_index::Idx;\n use rustc_middle::middle::region::*;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::source_map;"}, {"sha": "bd6252344b2c2a5413e3cb8eb91473008ff2cdaf", "filename": "compiler/rustc_hir_analysis/src/coherence/inherent_impls_overlap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -3,7 +3,7 @@ use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::IndexVec;\n use rustc_middle::traits::specialization_graph::OverlapMode;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_span::Symbol;"}, {"sha": "d45e3d395e43053d157cf7ad4e4f475da6c70790", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/arg_matrix.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Farg_matrix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Farg_matrix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Farg_matrix.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -1,6 +1,6 @@\n use std::cmp;\n \n-use rustc_index::vec::IndexVec;\n+use rustc_index::IndexVec;\n use rustc_middle::ty::error::TypeError;\n \n rustc_index::newtype_index! {"}, {"sha": "955463c14348cabdd3e725601aa42ce5b87d5891", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -21,7 +21,7 @@ use rustc_hir_analysis::astconv::AstConv;\n use rustc_hir_analysis::check::intrinsicck::InlineAsmCtxt;\n use rustc_hir_analysis::check::potentially_plural_count;\n use rustc_hir_analysis::structured_errors::StructuredDiagnostic;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::IndexVec;\n use rustc_infer::infer::error_reporting::{FailureCode, ObligationCauseExt};\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::TypeTrace;"}, {"sha": "e4a62ec05aef1254a86e87629b2267ceb339828d", "filename": "compiler/rustc_hir_typeck/src/generator_interior/drop_ranges/cfg_build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -8,7 +8,7 @@ use hir::{\n };\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::IndexVec;\n use rustc_infer::infer::InferCtxt;\n use rustc_middle::{\n     hir::map::Map,"}, {"sha": "633b478895b10fae3dc8cd7468a7f9e08eb72617", "filename": "compiler/rustc_hir_typeck/src/generator_interior/drop_ranges/cfg_propagate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_propagate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_propagate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_propagate.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -1,5 +1,5 @@\n use super::{DropRangesBuilder, PostOrderId};\n-use rustc_index::{bit_set::BitSet, vec::IndexVec};\n+use rustc_index::{bit_set::BitSet, IndexVec};\n use std::collections::BTreeMap;\n \n impl DropRangesBuilder {"}, {"sha": "cd3966a1214e744b336bcdd6cff7d6abad4b7da5", "filename": "compiler/rustc_hir_typeck/src/generator_interior/drop_ranges/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fmod.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -20,7 +20,7 @@ use hir::{Body, HirId, HirIdMap, Node};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_index::bit_set::BitSet;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::IndexVec;\n use rustc_middle::hir::map::Map;\n use rustc_middle::hir::place::{PlaceBase, PlaceWithHirId};\n use rustc_middle::ty;"}, {"sha": "2ad79cd85b182cbb344e3136d4e2579c21c7218e", "filename": "compiler/rustc_hir_typeck/src/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_hir_typeck%2Fsrc%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_hir_typeck%2Fsrc%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fintrinsicck.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -1,7 +1,7 @@\n use hir::HirId;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n-use rustc_index::vec::Idx;\n+use rustc_index::Idx;\n use rustc_middle::ty::layout::{LayoutError, SizeSkeleton};\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitableExt};\n use rustc_target::abi::{Pointer, VariantIdx};"}, {"sha": "a1ab9c8c5eca0ba7fa75be1be3c685c742dcf287", "filename": "compiler/rustc_index/src/bit_set.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -1,6 +1,3 @@\n-use crate::vec::{Idx, IndexVec};\n-use arrayvec::ArrayVec;\n-use smallvec::{smallvec, SmallVec};\n use std::fmt;\n use std::iter;\n use std::marker::PhantomData;\n@@ -9,8 +6,13 @@ use std::ops::{BitAnd, BitAndAssign, BitOrAssign, Bound, Not, Range, RangeBounds\n use std::rc::Rc;\n use std::slice;\n \n+use arrayvec::ArrayVec;\n+use smallvec::{smallvec, SmallVec};\n+\n use rustc_macros::{Decodable, Encodable};\n \n+use crate::{Idx, IndexVec};\n+\n use Chunk::*;\n \n #[cfg(test)]"}, {"sha": "b85160540d8729ae643ed52c52c4880717e2616b", "filename": "compiler/rustc_index/src/idx.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_index%2Fsrc%2Fidx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_index%2Fsrc%2Fidx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fidx.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -0,0 +1,45 @@\n+use std::fmt::Debug;\n+use std::hash::Hash;\n+\n+/// Represents some newtyped `usize` wrapper.\n+///\n+/// Purpose: avoid mixing indexes for different bitvector domains.\n+pub trait Idx: Copy + 'static + Eq + PartialEq + Debug + Hash {\n+    fn new(idx: usize) -> Self;\n+\n+    fn index(self) -> usize;\n+\n+    #[inline]\n+    fn increment_by(&mut self, amount: usize) {\n+        *self = self.plus(amount);\n+    }\n+\n+    #[inline]\n+    #[must_use = \"Use `increment_by` if you wanted to update the index in-place\"]\n+    fn plus(self, amount: usize) -> Self {\n+        Self::new(self.index() + amount)\n+    }\n+}\n+\n+impl Idx for usize {\n+    #[inline]\n+    fn new(idx: usize) -> Self {\n+        idx\n+    }\n+    #[inline]\n+    fn index(self) -> usize {\n+        self\n+    }\n+}\n+\n+impl Idx for u32 {\n+    #[inline]\n+    fn new(idx: usize) -> Self {\n+        assert!(idx <= u32::MAX as usize);\n+        idx as u32\n+    }\n+    #[inline]\n+    fn index(self) -> usize {\n+        self as usize\n+    }\n+}"}, {"sha": "7ed4860c274df9c8273f906daea1285703882fba", "filename": "compiler/rustc_index/src/interval.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_index%2Fsrc%2Finterval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_index%2Fsrc%2Finterval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Finterval.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -3,10 +3,11 @@ use std::marker::PhantomData;\n use std::ops::RangeBounds;\n use std::ops::{Bound, Range};\n \n-use crate::vec::Idx;\n-use crate::vec::IndexVec;\n use smallvec::SmallVec;\n \n+use crate::idx::Idx;\n+use crate::vec::IndexVec;\n+\n #[cfg(test)]\n mod tests;\n "}, {"sha": "6fd9f34b29ef101a2a025d4d35a185e8442142f2", "filename": "compiler/rustc_index/src/lib.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_index%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_index%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Flib.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -17,7 +17,12 @@\n pub mod bit_set;\n #[cfg(feature = \"nightly\")]\n pub mod interval;\n-pub mod vec;\n+\n+mod idx;\n+mod slice;\n+mod vec;\n+\n+pub use {idx::Idx, slice::IndexSlice, vec::IndexVec};\n \n #[cfg(feature = \"rustc_macros\")]\n pub use rustc_macros::newtype_index;"}, {"sha": "0663c7247ded884088f4cc98c1de53f1e7b747d8", "filename": "compiler/rustc_index/src/slice.rs", "status": "added", "additions": 256, "deletions": 0, "changes": 256, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_index%2Fsrc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_index%2Fsrc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fslice.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -0,0 +1,256 @@\n+use std::{\n+    fmt,\n+    marker::PhantomData,\n+    ops::{Index, IndexMut},\n+    slice,\n+};\n+\n+use crate::{Idx, IndexVec};\n+\n+/// A view into contiguous `T`s, indexed by `I` rather than by `usize`.\n+///\n+/// One common pattern you'll see is code that uses [`IndexVec::from_elem`]\n+/// to create the storage needed for a particular \"universe\" (aka the set of all\n+/// the possible keys that need an associated value) then passes that working\n+/// area as `&mut IndexSlice<I, T>` to clarify that nothing will be added nor\n+/// removed during processing (and, as a bonus, to chase fewer pointers).\n+#[derive(PartialEq, Eq, Hash)]\n+#[repr(transparent)]\n+pub struct IndexSlice<I: Idx, T> {\n+    _marker: PhantomData<fn(&I)>,\n+    pub raw: [T],\n+}\n+\n+impl<I: Idx, T> IndexSlice<I, T> {\n+    #[inline]\n+    pub const fn empty() -> &'static Self {\n+        Self::from_raw(&[])\n+    }\n+\n+    #[inline]\n+    pub const fn from_raw(raw: &[T]) -> &Self {\n+        let ptr: *const [T] = raw;\n+        // SAFETY: `IndexSlice` is `repr(transparent)` over a normal slice\n+        unsafe { &*(ptr as *const Self) }\n+    }\n+\n+    #[inline]\n+    pub fn from_raw_mut(raw: &mut [T]) -> &mut Self {\n+        let ptr: *mut [T] = raw;\n+        // SAFETY: `IndexSlice` is `repr(transparent)` over a normal slice\n+        unsafe { &mut *(ptr as *mut Self) }\n+    }\n+\n+    #[inline]\n+    pub const fn len(&self) -> usize {\n+        self.raw.len()\n+    }\n+\n+    #[inline]\n+    pub const fn is_empty(&self) -> bool {\n+        self.raw.is_empty()\n+    }\n+\n+    /// Gives the next index that will be assigned when `push` is called.\n+    ///\n+    /// Manual bounds checks can be done using `idx < slice.next_index()`\n+    /// (as opposed to `idx.index() < slice.len()`).\n+    #[inline]\n+    pub fn next_index(&self) -> I {\n+        I::new(self.len())\n+    }\n+\n+    #[inline]\n+    pub fn iter(&self) -> slice::Iter<'_, T> {\n+        self.raw.iter()\n+    }\n+\n+    #[inline]\n+    pub fn iter_enumerated(\n+        &self,\n+    ) -> impl DoubleEndedIterator<Item = (I, &T)> + ExactSizeIterator + '_ {\n+        self.raw.iter().enumerate().map(|(n, t)| (I::new(n), t))\n+    }\n+\n+    #[inline]\n+    pub fn indices(\n+        &self,\n+    ) -> impl DoubleEndedIterator<Item = I> + ExactSizeIterator + Clone + 'static {\n+        (0..self.len()).map(|n| I::new(n))\n+    }\n+\n+    #[inline]\n+    pub fn iter_mut(&mut self) -> slice::IterMut<'_, T> {\n+        self.raw.iter_mut()\n+    }\n+\n+    #[inline]\n+    pub fn iter_enumerated_mut(\n+        &mut self,\n+    ) -> impl DoubleEndedIterator<Item = (I, &mut T)> + ExactSizeIterator + '_ {\n+        self.raw.iter_mut().enumerate().map(|(n, t)| (I::new(n), t))\n+    }\n+\n+    #[inline]\n+    pub fn last_index(&self) -> Option<I> {\n+        self.len().checked_sub(1).map(I::new)\n+    }\n+\n+    #[inline]\n+    pub fn swap(&mut self, a: I, b: I) {\n+        self.raw.swap(a.index(), b.index())\n+    }\n+\n+    #[inline]\n+    pub fn get(&self, index: I) -> Option<&T> {\n+        self.raw.get(index.index())\n+    }\n+\n+    #[inline]\n+    pub fn get_mut(&mut self, index: I) -> Option<&mut T> {\n+        self.raw.get_mut(index.index())\n+    }\n+\n+    /// Returns mutable references to two distinct elements, `a` and `b`.\n+    ///\n+    /// Panics if `a == b`.\n+    #[inline]\n+    pub fn pick2_mut(&mut self, a: I, b: I) -> (&mut T, &mut T) {\n+        let (ai, bi) = (a.index(), b.index());\n+        assert!(ai != bi);\n+\n+        if ai < bi {\n+            let (c1, c2) = self.raw.split_at_mut(bi);\n+            (&mut c1[ai], &mut c2[0])\n+        } else {\n+            let (c2, c1) = self.pick2_mut(b, a);\n+            (c1, c2)\n+        }\n+    }\n+\n+    /// Returns mutable references to three distinct elements.\n+    ///\n+    /// Panics if the elements are not distinct.\n+    #[inline]\n+    pub fn pick3_mut(&mut self, a: I, b: I, c: I) -> (&mut T, &mut T, &mut T) {\n+        let (ai, bi, ci) = (a.index(), b.index(), c.index());\n+        assert!(ai != bi && bi != ci && ci != ai);\n+        let len = self.raw.len();\n+        assert!(ai < len && bi < len && ci < len);\n+        let ptr = self.raw.as_mut_ptr();\n+        unsafe { (&mut *ptr.add(ai), &mut *ptr.add(bi), &mut *ptr.add(ci)) }\n+    }\n+\n+    #[inline]\n+    pub fn binary_search(&self, value: &T) -> Result<I, I>\n+    where\n+        T: Ord,\n+    {\n+        match self.raw.binary_search(value) {\n+            Ok(i) => Ok(Idx::new(i)),\n+            Err(i) => Err(Idx::new(i)),\n+        }\n+    }\n+}\n+\n+impl<I: Idx, J: Idx> IndexSlice<I, J> {\n+    /// Invert a bijective mapping, i.e. `invert(map)[y] = x` if `map[x] = y`,\n+    /// assuming the values in `self` are a permutation of `0..self.len()`.\n+    ///\n+    /// This is used to go between `memory_index` (source field order to memory order)\n+    /// and `inverse_memory_index` (memory order to source field order).\n+    /// See also `FieldsShape::Arbitrary::memory_index` for more details.\n+    // FIXME(eddyb) build a better abstraction for permutations, if possible.\n+    pub fn invert_bijective_mapping(&self) -> IndexVec<J, I> {\n+        debug_assert_eq!(\n+            self.iter().map(|x| x.index() as u128).sum::<u128>(),\n+            (0..self.len() as u128).sum::<u128>(),\n+            \"The values aren't 0..N in input {self:?}\",\n+        );\n+\n+        let mut inverse = IndexVec::from_elem_n(Idx::new(0), self.len());\n+        for (i1, &i2) in self.iter_enumerated() {\n+            inverse[i2] = i1;\n+        }\n+\n+        debug_assert_eq!(\n+            inverse.iter().map(|x| x.index() as u128).sum::<u128>(),\n+            (0..inverse.len() as u128).sum::<u128>(),\n+            \"The values aren't 0..N in result {self:?}\",\n+        );\n+\n+        inverse\n+    }\n+}\n+\n+impl<I: Idx, T: fmt::Debug> fmt::Debug for IndexSlice<I, T> {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        fmt::Debug::fmt(&self.raw, fmt)\n+    }\n+}\n+\n+impl<I: Idx, T> Index<I> for IndexSlice<I, T> {\n+    type Output = T;\n+\n+    #[inline]\n+    fn index(&self, index: I) -> &T {\n+        &self.raw[index.index()]\n+    }\n+}\n+\n+impl<I: Idx, T> IndexMut<I> for IndexSlice<I, T> {\n+    #[inline]\n+    fn index_mut(&mut self, index: I) -> &mut T {\n+        &mut self.raw[index.index()]\n+    }\n+}\n+\n+impl<'a, I: Idx, T> IntoIterator for &'a IndexSlice<I, T> {\n+    type Item = &'a T;\n+    type IntoIter = slice::Iter<'a, T>;\n+\n+    #[inline]\n+    fn into_iter(self) -> slice::Iter<'a, T> {\n+        self.raw.iter()\n+    }\n+}\n+\n+impl<'a, I: Idx, T> IntoIterator for &'a mut IndexSlice<I, T> {\n+    type Item = &'a mut T;\n+    type IntoIter = slice::IterMut<'a, T>;\n+\n+    #[inline]\n+    fn into_iter(self) -> slice::IterMut<'a, T> {\n+        self.raw.iter_mut()\n+    }\n+}\n+\n+impl<I: Idx, T: Clone> ToOwned for IndexSlice<I, T> {\n+    type Owned = IndexVec<I, T>;\n+\n+    fn to_owned(&self) -> IndexVec<I, T> {\n+        IndexVec::from_raw(self.raw.to_owned())\n+    }\n+\n+    fn clone_into(&self, target: &mut IndexVec<I, T>) {\n+        self.raw.clone_into(&mut target.raw)\n+    }\n+}\n+\n+impl<I: Idx, T> Default for &IndexSlice<I, T> {\n+    #[inline]\n+    fn default() -> Self {\n+        IndexSlice::from_raw(Default::default())\n+    }\n+}\n+\n+impl<I: Idx, T> Default for &mut IndexSlice<I, T> {\n+    #[inline]\n+    fn default() -> Self {\n+        IndexSlice::from_raw_mut(Default::default())\n+    }\n+}\n+\n+// Whether `IndexSlice` is `Send` depends only on the data,\n+// not the phantom data.\n+unsafe impl<I: Idx, T> Send for IndexSlice<I, T> where T: Send {}"}, {"sha": "99e72e49f8eb8e3b2e36f39606ddac706f025046", "filename": "compiler/rustc_index/src/vec.rs", "status": "modified", "additions": 61, "deletions": 350, "changes": 411, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fvec.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -3,55 +3,13 @@ use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n \n use std::borrow::{Borrow, BorrowMut};\n use std::fmt;\n-use std::fmt::Debug;\n use std::hash::Hash;\n use std::marker::PhantomData;\n-use std::ops::{Deref, DerefMut, Index, IndexMut, RangeBounds};\n+use std::ops::{Deref, DerefMut, RangeBounds};\n use std::slice;\n use std::vec;\n \n-/// Represents some newtyped `usize` wrapper.\n-///\n-/// Purpose: avoid mixing indexes for different bitvector domains.\n-pub trait Idx: Copy + 'static + Eq + PartialEq + Debug + Hash {\n-    fn new(idx: usize) -> Self;\n-\n-    fn index(self) -> usize;\n-\n-    #[inline]\n-    fn increment_by(&mut self, amount: usize) {\n-        *self = self.plus(amount);\n-    }\n-\n-    #[inline]\n-    #[must_use = \"Use `increment_by` if you wanted to update the index in-place\"]\n-    fn plus(self, amount: usize) -> Self {\n-        Self::new(self.index() + amount)\n-    }\n-}\n-\n-impl Idx for usize {\n-    #[inline]\n-    fn new(idx: usize) -> Self {\n-        idx\n-    }\n-    #[inline]\n-    fn index(self) -> usize {\n-        self\n-    }\n-}\n-\n-impl Idx for u32 {\n-    #[inline]\n-    fn new(idx: usize) -> Self {\n-        assert!(idx <= u32::MAX as usize);\n-        idx as u32\n-    }\n-    #[inline]\n-    fn index(self) -> usize {\n-        self as usize\n-    }\n-}\n+use crate::{Idx, IndexSlice};\n \n /// An owned contiguous collection of `T`s, indexed by `I` rather than by `usize`.\n ///\n@@ -66,68 +24,20 @@ pub struct IndexVec<I: Idx, T> {\n     _marker: PhantomData<fn(&I)>,\n }\n \n-/// A view into contiguous `T`s, indexed by `I` rather than by `usize`.\n-///\n-/// One common pattern you'll see is code that uses [`IndexVec::from_elem`]\n-/// to create the storage needed for a particular \"universe\" (aka the set of all\n-/// the possible keys that need an associated value) then passes that working\n-/// area as `&mut IndexSlice<I, T>` to clarify that nothing will be added nor\n-/// removed during processing (and, as a bonus, to chase fewer pointers).\n-#[derive(PartialEq, Eq, Hash)]\n-#[repr(transparent)]\n-pub struct IndexSlice<I: Idx, T> {\n-    _marker: PhantomData<fn(&I)>,\n-    pub raw: [T],\n-}\n-\n-// Whether `IndexVec` is `Send` depends only on the data,\n-// not the phantom data.\n-unsafe impl<I: Idx, T> Send for IndexVec<I, T> where T: Send {}\n-\n-// Whether `IndexSlice` is `Send` depends only on the data,\n-// not the phantom data.\n-unsafe impl<I: Idx, T> Send for IndexSlice<I, T> where T: Send {}\n-\n-#[cfg(feature = \"rustc_serialize\")]\n-impl<S: Encoder, I: Idx, T: Encodable<S>> Encodable<S> for IndexVec<I, T> {\n-    fn encode(&self, s: &mut S) {\n-        Encodable::encode(&self.raw, s);\n-    }\n-}\n-\n-#[cfg(feature = \"rustc_serialize\")]\n-impl<D: Decoder, I: Idx, T: Decodable<D>> Decodable<D> for IndexVec<I, T> {\n-    fn decode(d: &mut D) -> Self {\n-        IndexVec { raw: Decodable::decode(d), _marker: PhantomData }\n-    }\n-}\n-\n-impl<I: Idx, T: fmt::Debug> fmt::Debug for IndexVec<I, T> {\n-    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        fmt::Debug::fmt(&self.raw, fmt)\n-    }\n-}\n-\n-impl<I: Idx, T: fmt::Debug> fmt::Debug for IndexSlice<I, T> {\n-    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        fmt::Debug::fmt(&self.raw, fmt)\n-    }\n-}\n-\n impl<I: Idx, T> IndexVec<I, T> {\n     #[inline]\n-    pub fn new() -> Self {\n-        IndexVec { raw: Vec::new(), _marker: PhantomData }\n+    pub const fn new() -> Self {\n+        IndexVec::from_raw(Vec::new())\n     }\n \n     #[inline]\n-    pub fn from_raw(raw: Vec<T>) -> Self {\n+    pub const fn from_raw(raw: Vec<T>) -> Self {\n         IndexVec { raw, _marker: PhantomData }\n     }\n \n     #[inline]\n     pub fn with_capacity(capacity: usize) -> Self {\n-        IndexVec { raw: Vec::with_capacity(capacity), _marker: PhantomData }\n+        IndexVec::from_raw(Vec::with_capacity(capacity))\n     }\n \n     /// Creates a new vector with a copy of `elem` for each index in `universe`.\n@@ -146,24 +56,23 @@ impl<I: Idx, T> IndexVec<I, T> {\n     where\n         T: Clone,\n     {\n-        IndexVec { raw: vec![elem; universe.len()], _marker: PhantomData }\n+        IndexVec::from_raw(vec![elem; universe.len()])\n     }\n \n     #[inline]\n     pub fn from_elem_n(elem: T, n: usize) -> Self\n     where\n         T: Clone,\n     {\n-        IndexVec { raw: vec![elem; n], _marker: PhantomData }\n+        IndexVec::from_raw(vec![elem; n])\n     }\n \n     /// Create an `IndexVec` with `n` elements, where the value of each\n     /// element is the result of `func(i)`. (The underlying vector will\n     /// be allocated only once, with a capacity of at least `n`.)\n     #[inline]\n     pub fn from_fn_n(func: impl FnMut(I) -> T, n: usize) -> Self {\n-        let indices = (0..n).map(I::new);\n-        Self::from_raw(indices.map(func).collect())\n+        IndexVec::from_raw((0..n).map(I::new).map(func).collect())\n     }\n \n     #[inline]\n@@ -178,7 +87,7 @@ impl<I: Idx, T> IndexVec<I, T> {\n \n     #[inline]\n     pub fn push(&mut self, d: T) -> I {\n-        let idx = I::new(self.len());\n+        let idx = self.next_index();\n         self.raw.push(d);\n         idx\n     }\n@@ -229,7 +138,7 @@ impl<I: Idx, T> IndexVec<I, T> {\n     }\n \n     pub fn convert_index_type<Ix: Idx>(self) -> IndexVec<Ix, T> {\n-        IndexVec { raw: self.raw, _marker: PhantomData }\n+        IndexVec::from_raw(self.raw)\n     }\n \n     /// Grows the index vector so that it contains an entry for\n@@ -249,200 +158,17 @@ impl<I: Idx, T> IndexVec<I, T> {\n     }\n \n     #[inline]\n-    pub fn resize_to_elem(&mut self, elem: I, fill_value: impl FnMut() -> T) {\n-        let min_new_len = elem.index() + 1;\n-        self.raw.resize_with(min_new_len, fill_value);\n-    }\n-}\n-\n-impl<I: Idx, T> Deref for IndexVec<I, T> {\n-    type Target = IndexSlice<I, T>;\n-\n-    #[inline]\n-    fn deref(&self) -> &Self::Target {\n-        self.as_slice()\n-    }\n-}\n-\n-impl<I: Idx, T> DerefMut for IndexVec<I, T> {\n-    #[inline]\n-    fn deref_mut(&mut self) -> &mut Self::Target {\n-        self.as_mut_slice()\n-    }\n-}\n-\n-impl<I: Idx, T> Borrow<IndexSlice<I, T>> for IndexVec<I, T> {\n-    fn borrow(&self) -> &IndexSlice<I, T> {\n-        self\n-    }\n-}\n-\n-impl<I: Idx, T> BorrowMut<IndexSlice<I, T>> for IndexVec<I, T> {\n-    fn borrow_mut(&mut self) -> &mut IndexSlice<I, T> {\n-        self\n-    }\n-}\n-\n-impl<I: Idx, T: Clone> ToOwned for IndexSlice<I, T> {\n-    type Owned = IndexVec<I, T>;\n-\n-    fn to_owned(&self) -> IndexVec<I, T> {\n-        IndexVec::from_raw(self.raw.to_owned())\n-    }\n-\n-    fn clone_into(&self, target: &mut IndexVec<I, T>) {\n-        self.raw.clone_into(&mut target.raw)\n-    }\n-}\n-\n-impl<I: Idx, T> IndexSlice<I, T> {\n-    #[inline]\n-    pub fn empty() -> &'static Self {\n-        Default::default()\n-    }\n-\n-    #[inline]\n-    pub fn from_raw(raw: &[T]) -> &Self {\n-        let ptr: *const [T] = raw;\n-        // SAFETY: `IndexSlice` is `repr(transparent)` over a normal slice\n-        unsafe { &*(ptr as *const Self) }\n-    }\n-\n-    #[inline]\n-    pub fn from_raw_mut(raw: &mut [T]) -> &mut Self {\n-        let ptr: *mut [T] = raw;\n-        // SAFETY: `IndexSlice` is `repr(transparent)` over a normal slice\n-        unsafe { &mut *(ptr as *mut Self) }\n-    }\n-\n-    #[inline]\n-    pub fn len(&self) -> usize {\n-        self.raw.len()\n-    }\n-\n-    /// Gives the next index that will be assigned when `push` is called.\n-    ///\n-    /// Manual bounds checks can be done using `idx < slice.next_index()`\n-    /// (as opposed to `idx.index() < slice.len()`).\n-    #[inline]\n-    pub fn next_index(&self) -> I {\n-        I::new(self.len())\n-    }\n-\n-    #[inline]\n-    pub fn is_empty(&self) -> bool {\n-        self.raw.is_empty()\n-    }\n-\n-    #[inline]\n-    pub fn iter(&self) -> slice::Iter<'_, T> {\n-        self.raw.iter()\n-    }\n-\n-    #[inline]\n-    pub fn iter_enumerated(\n-        &self,\n-    ) -> impl DoubleEndedIterator<Item = (I, &T)> + ExactSizeIterator + '_ {\n-        self.raw.iter().enumerate().map(|(n, t)| (I::new(n), t))\n-    }\n-\n-    #[inline]\n-    pub fn indices(\n-        &self,\n-    ) -> impl DoubleEndedIterator<Item = I> + ExactSizeIterator + Clone + 'static {\n-        (0..self.len()).map(|n| I::new(n))\n-    }\n-\n-    #[inline]\n-    pub fn iter_mut(&mut self) -> slice::IterMut<'_, T> {\n-        self.raw.iter_mut()\n-    }\n-\n-    #[inline]\n-    pub fn iter_enumerated_mut(\n-        &mut self,\n-    ) -> impl DoubleEndedIterator<Item = (I, &mut T)> + ExactSizeIterator + '_ {\n-        self.raw.iter_mut().enumerate().map(|(n, t)| (I::new(n), t))\n-    }\n-\n-    #[inline]\n-    pub fn last_index(&self) -> Option<I> {\n-        self.len().checked_sub(1).map(I::new)\n-    }\n-\n-    #[inline]\n-    pub fn swap(&mut self, a: I, b: I) {\n-        self.raw.swap(a.index(), b.index())\n-    }\n-\n-    #[inline]\n-    pub fn get(&self, index: I) -> Option<&T> {\n-        self.raw.get(index.index())\n-    }\n-\n-    #[inline]\n-    pub fn get_mut(&mut self, index: I) -> Option<&mut T> {\n-        self.raw.get_mut(index.index())\n-    }\n-\n-    /// Returns mutable references to two distinct elements, `a` and `b`.\n-    ///\n-    /// Panics if `a == b`.\n-    #[inline]\n-    pub fn pick2_mut(&mut self, a: I, b: I) -> (&mut T, &mut T) {\n-        let (ai, bi) = (a.index(), b.index());\n-        assert!(ai != bi);\n-\n-        if ai < bi {\n-            let (c1, c2) = self.raw.split_at_mut(bi);\n-            (&mut c1[ai], &mut c2[0])\n-        } else {\n-            let (c2, c1) = self.pick2_mut(b, a);\n-            (c1, c2)\n-        }\n+    pub fn resize(&mut self, new_len: usize, value: T)\n+    where\n+        T: Clone,\n+    {\n+        self.raw.resize(new_len, value)\n     }\n \n-    /// Returns mutable references to three distinct elements.\n-    ///\n-    /// Panics if the elements are not distinct.\n     #[inline]\n-    pub fn pick3_mut(&mut self, a: I, b: I, c: I) -> (&mut T, &mut T, &mut T) {\n-        let (ai, bi, ci) = (a.index(), b.index(), c.index());\n-        assert!(ai != bi && bi != ci && ci != ai);\n-        let len = self.raw.len();\n-        assert!(ai < len && bi < len && ci < len);\n-        let ptr = self.raw.as_mut_ptr();\n-        unsafe { (&mut *ptr.add(ai), &mut *ptr.add(bi), &mut *ptr.add(ci)) }\n-    }\n-}\n-\n-impl<I: Idx, J: Idx> IndexSlice<I, J> {\n-    /// Invert a bijective mapping, i.e. `invert(map)[y] = x` if `map[x] = y`,\n-    /// assuming the values in `self` are a permutation of `0..self.len()`.\n-    ///\n-    /// This is used to go between `memory_index` (source field order to memory order)\n-    /// and `inverse_memory_index` (memory order to source field order).\n-    /// See also `FieldsShape::Arbitrary::memory_index` for more details.\n-    // FIXME(eddyb) build a better abstraction for permutations, if possible.\n-    pub fn invert_bijective_mapping(&self) -> IndexVec<J, I> {\n-        debug_assert_eq!(\n-            self.iter().map(|x| x.index() as u128).sum::<u128>(),\n-            (0..self.len() as u128).sum::<u128>(),\n-            \"The values aren't 0..N in input {self:?}\",\n-        );\n-\n-        let mut inverse = IndexVec::from_elem_n(Idx::new(0), self.len());\n-        for (i1, &i2) in self.iter_enumerated() {\n-            inverse[i2] = i1;\n-        }\n-\n-        debug_assert_eq!(\n-            inverse.iter().map(|x| x.index() as u128).sum::<u128>(),\n-            (0..inverse.len() as u128).sum::<u128>(),\n-            \"The values aren't 0..N in result {self:?}\",\n-        );\n-\n-        inverse\n+    pub fn resize_to_elem(&mut self, elem: I, fill_value: impl FnMut() -> T) {\n+        let min_new_len = elem.index() + 1;\n+        self.raw.resize_with(min_new_len, fill_value);\n     }\n }\n \n@@ -464,57 +190,37 @@ impl<I: Idx, T> IndexVec<I, Option<T>> {\n     }\n }\n \n-impl<I: Idx, T: Clone> IndexVec<I, T> {\n-    #[inline]\n-    pub fn resize(&mut self, new_len: usize, value: T) {\n-        self.raw.resize(new_len, value)\n-    }\n-}\n-\n-impl<I: Idx, T: Ord> IndexSlice<I, T> {\n-    #[inline]\n-    pub fn binary_search(&self, value: &T) -> Result<I, I> {\n-        match self.raw.binary_search(value) {\n-            Ok(i) => Ok(Idx::new(i)),\n-            Err(i) => Err(Idx::new(i)),\n-        }\n+impl<I: Idx, T: fmt::Debug> fmt::Debug for IndexVec<I, T> {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        fmt::Debug::fmt(&self.raw, fmt)\n     }\n }\n \n-impl<I: Idx, T> Index<I> for IndexSlice<I, T> {\n-    type Output = T;\n-\n-    #[inline]\n-    fn index(&self, index: I) -> &T {\n-        &self.raw[index.index()]\n-    }\n-}\n+impl<I: Idx, T> Deref for IndexVec<I, T> {\n+    type Target = IndexSlice<I, T>;\n \n-impl<I: Idx, T> IndexMut<I> for IndexSlice<I, T> {\n     #[inline]\n-    fn index_mut(&mut self, index: I) -> &mut T {\n-        &mut self.raw[index.index()]\n+    fn deref(&self) -> &Self::Target {\n+        self.as_slice()\n     }\n }\n \n-impl<I: Idx, T> Default for IndexVec<I, T> {\n+impl<I: Idx, T> DerefMut for IndexVec<I, T> {\n     #[inline]\n-    fn default() -> Self {\n-        Self::new()\n+    fn deref_mut(&mut self) -> &mut Self::Target {\n+        self.as_mut_slice()\n     }\n }\n \n-impl<I: Idx, T> Default for &IndexSlice<I, T> {\n-    #[inline]\n-    fn default() -> Self {\n-        IndexSlice::from_raw(Default::default())\n+impl<I: Idx, T> Borrow<IndexSlice<I, T>> for IndexVec<I, T> {\n+    fn borrow(&self) -> &IndexSlice<I, T> {\n+        self\n     }\n }\n \n-impl<I: Idx, T> Default for &mut IndexSlice<I, T> {\n-    #[inline]\n-    fn default() -> Self {\n-        IndexSlice::from_raw_mut(Default::default())\n+impl<I: Idx, T> BorrowMut<IndexSlice<I, T>> for IndexVec<I, T> {\n+    fn borrow_mut(&mut self) -> &mut IndexSlice<I, T> {\n+        self\n     }\n }\n \n@@ -543,14 +249,7 @@ impl<I: Idx, T> FromIterator<T> for IndexVec<I, T> {\n     where\n         J: IntoIterator<Item = T>,\n     {\n-        IndexVec { raw: FromIterator::from_iter(iter), _marker: PhantomData }\n-    }\n-}\n-\n-impl<I: Idx, T, const N: usize> From<[T; N]> for IndexVec<I, T> {\n-    #[inline]\n-    fn from(array: [T; N]) -> Self {\n-        IndexVec::from_raw(array.into())\n+        IndexVec::from_raw(Vec::from_iter(iter))\n     }\n }\n \n@@ -570,7 +269,7 @@ impl<'a, I: Idx, T> IntoIterator for &'a IndexVec<I, T> {\n \n     #[inline]\n     fn into_iter(self) -> slice::Iter<'a, T> {\n-        self.raw.iter()\n+        self.iter()\n     }\n }\n \n@@ -580,29 +279,41 @@ impl<'a, I: Idx, T> IntoIterator for &'a mut IndexVec<I, T> {\n \n     #[inline]\n     fn into_iter(self) -> slice::IterMut<'a, T> {\n-        self.raw.iter_mut()\n+        self.iter_mut()\n     }\n }\n \n-impl<'a, I: Idx, T> IntoIterator for &'a IndexSlice<I, T> {\n-    type Item = &'a T;\n-    type IntoIter = slice::Iter<'a, T>;\n+impl<I: Idx, T> Default for IndexVec<I, T> {\n+    #[inline]\n+    fn default() -> Self {\n+        IndexVec::new()\n+    }\n+}\n \n+impl<I: Idx, T, const N: usize> From<[T; N]> for IndexVec<I, T> {\n     #[inline]\n-    fn into_iter(self) -> slice::Iter<'a, T> {\n-        self.raw.iter()\n+    fn from(array: [T; N]) -> Self {\n+        IndexVec::from_raw(array.into())\n     }\n }\n \n-impl<'a, I: Idx, T> IntoIterator for &'a mut IndexSlice<I, T> {\n-    type Item = &'a mut T;\n-    type IntoIter = slice::IterMut<'a, T>;\n+#[cfg(feature = \"rustc_serialize\")]\n+impl<S: Encoder, I: Idx, T: Encodable<S>> Encodable<S> for IndexVec<I, T> {\n+    fn encode(&self, s: &mut S) {\n+        Encodable::encode(&self.raw, s);\n+    }\n+}\n \n-    #[inline]\n-    fn into_iter(self) -> slice::IterMut<'a, T> {\n-        self.raw.iter_mut()\n+#[cfg(feature = \"rustc_serialize\")]\n+impl<D: Decoder, I: Idx, T: Decodable<D>> Decodable<D> for IndexVec<I, T> {\n+    fn decode(d: &mut D) -> Self {\n+        IndexVec::from_raw(Vec::<T>::decode(d))\n     }\n }\n \n+// Whether `IndexVec` is `Send` depends only on the data,\n+// not the phantom data.\n+unsafe impl<I: Idx, T> Send for IndexVec<I, T> where T: Send {}\n+\n #[cfg(test)]\n mod tests;"}, {"sha": "e6e1bc0393fcd6c2370f700351abcf53cdc67f48", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -16,7 +16,7 @@ use rustc_middle::ty::{self, BoundVar, InferConst, List, Ty, TyCtxt, TypeFlags,\n use std::sync::atomic::Ordering;\n \n use rustc_data_structures::fx::FxHashMap;\n-use rustc_index::vec::Idx;\n+use rustc_index::Idx;\n use smallvec::SmallVec;\n \n impl<'tcx> InferCtxt<'tcx> {"}, {"sha": "2abdd5b0aec818c853aff5f3f444a434d589a557", "filename": "compiler/rustc_infer/src/infer/canonical/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -23,7 +23,7 @@\n \n use crate::infer::{ConstVariableOrigin, ConstVariableOriginKind};\n use crate::infer::{InferCtxt, RegionVariableOrigin, TypeVariableOrigin, TypeVariableOriginKind};\n-use rustc_index::vec::IndexVec;\n+use rustc_index::IndexVec;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::subst::GenericArg;\n use rustc_middle::ty::{self, List, TyCtxt};"}, {"sha": "3605e10fecdd1510174d4c8a353179bac898dd6d", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -19,8 +19,8 @@ use crate::traits::query::{Fallible, NoSolution};\n use crate::traits::{Obligation, ObligationCause, PredicateObligation};\n use crate::traits::{PredicateObligations, TraitEngine, TraitEngineExt};\n use rustc_data_structures::captures::Captures;\n-use rustc_index::vec::Idx;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::Idx;\n+use rustc_index::IndexVec;\n use rustc_middle::arena::ArenaAllocatable;\n use rustc_middle::mir::ConstraintCategory;\n use rustc_middle::ty::fold::TypeFoldable;"}, {"sha": "bd1bfed3a0c9deb3e479465ea79006af2ec10779", "filename": "compiler/rustc_infer/src/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -13,7 +13,7 @@ use rustc_data_structures::graph::implementation::{\n     Direction, Graph, NodeIndex, INCOMING, OUTGOING,\n };\n use rustc_data_structures::intern::Interned;\n-use rustc_index::vec::{IndexSlice, IndexVec};\n+use rustc_index::{IndexSlice, IndexVec};\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::PlaceholderRegion;\n use rustc_middle::ty::{self, Ty, TyCtxt};"}, {"sha": "8a44d5031596ff55e060b4bd79b2a72b24a4ab08", "filename": "compiler/rustc_infer/src/infer/outlives/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fmod.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -61,7 +61,7 @@ impl<'tcx> InferCtxt<'tcx> {\n         };\n \n         let lexical_region_resolutions = LexicalRegionResolutions {\n-            values: rustc_index::vec::IndexVec::from_elem_n(\n+            values: rustc_index::IndexVec::from_elem_n(\n                 crate::infer::lexical_region_resolve::VarValue::Value(self.tcx.lifetimes.re_erased),\n                 var_infos.len(),\n             ),"}, {"sha": "89cfc9ea3d1408d9bccf0ca19dc2bd10d95d4bac", "filename": "compiler/rustc_infer/src/infer/region_constraints/leak_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fleak_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fleak_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fleak_check.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -5,7 +5,7 @@ use rustc_data_structures::{\n     graph::{scc::Sccs, vec_graph::VecGraph},\n     undo_log::UndoLogs,\n };\n-use rustc_index::vec::Idx;\n+use rustc_index::Idx;\n use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::relate::RelateResult;\n "}, {"sha": "6692cd1d3898bfd19f569c69e805adf4c9947d0e", "filename": "compiler/rustc_infer/src/infer/region_constraints/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -12,7 +12,7 @@ use rustc_data_structures::intern::Interned;\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::undo_log::UndoLogs;\n use rustc_data_structures::unify as ut;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::IndexVec;\n use rustc_middle::infer::unify_key::{RegionVidKey, UnifiedRegion};\n use rustc_middle::ty::ReStatic;\n use rustc_middle::ty::{self, Ty, TyCtxt};"}, {"sha": "a43c09a7939ba606711aec503af2513d4c733950", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -14,7 +14,7 @@ use rustc_errors::{DecorateLint, DiagnosticBuilder, DiagnosticMessage, MultiSpan\n use rustc_hir as hir;\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::HirId;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::IndexVec;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::lint::{\n     reveal_actual_level, struct_lint_level, LevelAndSource, LintExpectation, LintLevelSource,"}, {"sha": "415a89b0f92c74d2ff21edf226bb0c5f37baa9c6", "filename": "compiler/rustc_macros/src/newtype.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_macros%2Fsrc%2Fnewtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_macros%2Fsrc%2Fnewtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fnewtype.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -254,7 +254,7 @@ impl Parse for Newtype {\n                 }\n             }\n \n-            impl rustc_index::vec::Idx for #name {\n+            impl rustc_index::Idx for #name {\n                 #[inline]\n                 fn new(value: usize) -> Self {\n                     Self::from_usize(value)"}, {"sha": "8bacd1366473fa755816400e35e93fa2e4e54680", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -12,7 +12,7 @@ use rustc_data_structures::sync::{MappedReadGuard, MappedWriteGuard, ReadGuard,\n use rustc_expand::base::SyntaxExtension;\n use rustc_hir::def_id::{CrateNum, LocalDefId, StableCrateId, StableCrateIdMap, LOCAL_CRATE};\n use rustc_hir::definitions::Definitions;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::IndexVec;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::config::{self, CrateType, ExternLocation};\n use rustc_session::cstore::ExternCrateSource;"}, {"sha": "820a502d04c1aa465aeb5226d922872210753282", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -16,7 +16,7 @@ use rustc_hir::def::{CtorKind, DefKind, DocLinkResMap, Res};\n use rustc_hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::definitions::{DefKey, DefPath, DefPathData, DefPathHash};\n use rustc_hir::diagnostic_items::DiagnosticItems;\n-use rustc_index::vec::{Idx, IndexVec};\n+use rustc_index::{Idx, IndexVec};\n use rustc_middle::metadata::ModChild;\n use rustc_middle::middle::exported_symbols::{ExportedSymbol, SymbolExportInfo};\n use rustc_middle::mir::interpret::{AllocDecodingSession, AllocDecodingState};"}, {"sha": "1bb0eabc64fe7aaa32e52c46c4008e5f54fabcd3", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -14,7 +14,7 @@ use rustc_hir::def_id::{CrateNum, DefId, DefIndex, DefPathHash, StableCrateId};\n use rustc_hir::definitions::DefKey;\n use rustc_hir::lang_items::LangItem;\n use rustc_index::bit_set::BitSet;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::IndexVec;\n use rustc_middle::metadata::ModChild;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrs;\n use rustc_middle::middle::exported_symbols::{ExportedSymbol, SymbolExportInfo};"}, {"sha": "dda30bce2c05721dfa202e8892d0774202952623", "filename": "compiler/rustc_metadata/src/rmeta/table.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -2,7 +2,7 @@ use crate::rmeta::*;\n \n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_hir::def::{CtorKind, CtorOf};\n-use rustc_index::vec::Idx;\n+use rustc_index::Idx;\n use rustc_middle::ty::{ParameterizedOverTcx, UnusedGenericParams};\n use rustc_serialize::opaque::FileEncoder;\n use rustc_serialize::Encoder as _;"}, {"sha": "6a1a2a061ddd6c71aaf0909f7e6011d77b5ed8d9", "filename": "compiler/rustc_middle/src/arena.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Farena.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -17,13 +17,13 @@ macro_rules! arena_types {\n             [decode] mir: rustc_middle::mir::Body<'tcx>,\n             [] steal_promoted:\n                 rustc_data_structures::steal::Steal<\n-                    rustc_index::vec::IndexVec<\n+                    rustc_index::IndexVec<\n                         rustc_middle::mir::Promoted,\n                         rustc_middle::mir::Body<'tcx>\n                     >\n                 >,\n             [decode] promoted:\n-                rustc_index::vec::IndexVec<\n+                rustc_index::IndexVec<\n                     rustc_middle::mir::Promoted,\n                     rustc_middle::mir::Body<'tcx>\n                 >,"}, {"sha": "15d672c1408f5b869777488dad0587b3b905c87a", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -11,7 +11,7 @@ use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_ID, LOCAL_CRATE};\n use rustc_hir::definitions::{DefKey, DefPath, DefPathData, DefPathHash};\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::*;\n-use rustc_index::vec::Idx;\n+use rustc_index::Idx;\n use rustc_middle::hir::nested_filter;\n use rustc_span::def_id::StableCrateId;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};"}, {"sha": "1319ddbb877d1ff9d7f54f9ec16cfa5ca67ee64b", "filename": "compiler/rustc_middle/src/mir/basic_blocks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fbasic_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fbasic_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fbasic_blocks.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -6,7 +6,7 @@ use rustc_data_structures::graph;\n use rustc_data_structures::graph::dominators::{dominators, Dominators};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::OnceCell;\n-use rustc_index::vec::{IndexSlice, IndexVec};\n+use rustc_index::{IndexSlice, IndexVec};\n use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n use smallvec::SmallVec;\n "}, {"sha": "0f80b3801312dc5e999b7b47f10b01f306ec524e", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -27,7 +27,7 @@ use polonius_engine::Atom;\n pub use rustc_ast::Mutability;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::graph::dominators::Dominators;\n-use rustc_index::vec::{Idx, IndexSlice, IndexVec};\n+use rustc_index::{Idx, IndexSlice, IndexVec};\n use rustc_serialize::{Decodable, Encodable};\n use rustc_span::symbol::Symbol;\n use rustc_span::{Span, DUMMY_SP};"}, {"sha": "ff54ec56a29acab8e8c2ea04e1d978fea12ca859", "filename": "compiler/rustc_middle/src/mir/mono.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -7,7 +7,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{Hash128, HashStable, StableHasher};\n use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc_hir::ItemId;\n-use rustc_index::vec::Idx;\n+use rustc_index::Idx;\n use rustc_query_system::ich::StableHashingContext;\n use rustc_session::config::OptLevel;\n use rustc_span::source_map::Span;"}, {"sha": "c4c3341f873a469517b3076a43d7dcc50e6b6d38", "filename": "compiler/rustc_middle/src/mir/patch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpatch.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -1,4 +1,4 @@\n-use rustc_index::vec::{Idx, IndexVec};\n+use rustc_index::{Idx, IndexVec};\n use rustc_middle::mir::*;\n use rustc_middle::ty::Ty;\n use rustc_span::Span;"}, {"sha": "fa8a339631e16c14e5874ebe2fe651e8ff2f64fc", "filename": "compiler/rustc_middle/src/mir/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -10,7 +10,7 @@ use super::spanview::write_mir_fn_spanview;\n use either::Either;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def_id::DefId;\n-use rustc_index::vec::Idx;\n+use rustc_index::Idx;\n use rustc_middle::mir::interpret::{\n     alloc_range, read_target_uint, AllocBytes, AllocId, Allocation, ConstAllocation, ConstValue,\n     GlobalAlloc, Pointer, Provenance,"}, {"sha": "53fd2dd23a705c3ee1cac6fb7ce77ae502542826", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -8,7 +8,7 @@ use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n use rustc_index::bit_set::BitMatrix;\n-use rustc_index::vec::{Idx, IndexVec};\n+use rustc_index::{Idx, IndexVec};\n use rustc_span::Span;\n use rustc_target::abi::{FieldIdx, VariantIdx};\n use smallvec::SmallVec;"}, {"sha": "a8293ba18196a5fe2f4befbea75a9a6ba38a40e2", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -16,7 +16,7 @@ use rustc_ast::{InlineAsmOptions, InlineAsmTemplatePiece};\n use rustc_hir::def_id::DefId;\n use rustc_hir::{self as hir};\n use rustc_hir::{self, GeneratorKind};\n-use rustc_index::vec::IndexVec;\n+use rustc_index::IndexVec;\n use rustc_target::abi::{FieldIdx, VariantIdx};\n \n use rustc_ast::Mutability;"}, {"sha": "da86cfd477229458ea538f1cd5ff9373fa7a32e5", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -14,7 +14,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::RangeEnd;\n use rustc_index::newtype_index;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::IndexVec;\n use rustc_middle::middle::region;\n use rustc_middle::mir::interpret::AllocId;\n use rustc_middle::mir::{self, BinOp, BorrowKind, FakeReadCause, Mutability, UnOp};"}, {"sha": "30e488a9e47d5de5494f76b9ecf6816e37b8f726", "filename": "compiler/rustc_middle/src/ty/adt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -10,7 +10,7 @@ use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::def_id::DefId;\n-use rustc_index::vec::{IndexSlice, IndexVec};\n+use rustc_index::{IndexSlice, IndexVec};\n use rustc_query_system::ich::StableHashingContext;\n use rustc_session::DataTypeKind;\n use rustc_span::symbol::sym;"}, {"sha": "4a4f6770fc46f29b8856b4bfc82872e68291d182", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -50,7 +50,7 @@ use rustc_hir::lang_items::LangItem;\n use rustc_hir::{\n     Constness, ExprKind, HirId, ImplItemKind, ItemKind, Node, TraitCandidate, TraitItemKind,\n };\n-use rustc_index::vec::IndexVec;\n+use rustc_index::IndexVec;\n use rustc_macros::HashStable;\n use rustc_query_system::dep_graph::DepNodeIndex;\n use rustc_query_system::ich::StableHashingContext;"}, {"sha": "6e6b7c39ecb199ced8129ff7deb46c16b860dd9c", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -5,7 +5,7 @@ use crate::ty::{self, ReprOptions, Ty, TyCtxt, TypeVisitableExt};\n use rustc_errors::{DiagnosticBuilder, Handler, IntoDiagnostic};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::IndexVec;\n use rustc_session::config::OptLevel;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{Span, DUMMY_SP};"}, {"sha": "17647d13f9979442c6e314374dca85f940b7694d", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -41,7 +41,7 @@ use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, CtorOf, DefKind, DocLinkResMap, LifetimeRes, Res};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, LocalDefIdMap};\n use rustc_hir::Node;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::IndexVec;\n use rustc_macros::HashStable;\n use rustc_query_system::ich::StableHashingContext;\n use rustc_serialize::{Decodable, Encodable};"}, {"sha": "810c388ebbe3097b5b08396f8fd93bd1f86652ea", "filename": "compiler/rustc_middle/src/ty/parameterized.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -1,6 +1,6 @@\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def_id::DefIndex;\n-use rustc_index::vec::{Idx, IndexVec};\n+use rustc_index::{Idx, IndexVec};\n \n use crate::ty;\n "}, {"sha": "f44566284571c893fbc2970372aeec1f097607da", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -57,7 +57,7 @@ use rustc_hir::def_id::{\n use rustc_hir::hir_id::OwnerId;\n use rustc_hir::lang_items::{LangItem, LanguageItems};\n use rustc_hir::{Crate, ItemLocalId, TraitCandidate};\n-use rustc_index::vec::IndexVec;\n+use rustc_index::IndexVec;\n pub(crate) use rustc_query_system::query::QueryJobId;\n use rustc_query_system::query::*;\n use rustc_session::config::{EntryFnType, OptLevel, OutputFilenames, SymbolManglingVersion};"}, {"sha": "a2611022406f6c48c686f864e802a5cd1496fe3e", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -10,7 +10,7 @@ use crate::ty::print::{with_no_trimmed_paths, FmtPrinter, Printer};\n use crate::ty::visit::{TypeSuperVisitable, TypeVisitable, TypeVisitor};\n use crate::ty::{self, AliasTy, InferConst, Lift, Term, TermKind, Ty, TyCtxt};\n use rustc_hir::def::Namespace;\n-use rustc_index::vec::{Idx, IndexVec};\n+use rustc_index::{Idx, IndexVec};\n use rustc_target::abi::TyAndLayout;\n \n use std::fmt;"}, {"sha": "29ae42be09643338ce0ea23b86baac6c6d177c47", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -19,7 +19,7 @@ use rustc_errors::{DiagnosticArgValue, IntoDiagnosticArg};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::LangItem;\n-use rustc_index::vec::Idx;\n+use rustc_index::Idx;\n use rustc_macros::HashStable;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;"}, {"sha": "5a0571f4bb7cbe5302ee0b266f111725914d6dd2", "filename": "compiler/rustc_middle/src/ty/typeck_results.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftypeck_results.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftypeck_results.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftypeck_results.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -20,7 +20,7 @@ use rustc_hir::{\n     hir_id::OwnerId,\n     HirId, ItemLocalId, ItemLocalMap, ItemLocalSet,\n };\n-use rustc_index::vec::{Idx, IndexVec};\n+use rustc_index::{Idx, IndexVec};\n use rustc_macros::HashStable;\n use rustc_middle::mir::FakeReadCause;\n use rustc_session::Session;"}, {"sha": "7127fdbf26a1cd0994fc17463b20361c61bb29c5", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -16,7 +16,7 @@ use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Res};\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_index::bit_set::GrowableBitSet;\n-use rustc_index::vec::{Idx, IndexVec};\n+use rustc_index::{Idx, IndexVec};\n use rustc_macros::HashStable;\n use rustc_session::Limit;\n use rustc_span::sym;"}, {"sha": "32c618828c9b20e3319500f9d314b7c02bba7f6d", "filename": "compiler/rustc_mir_build/src/build/custom/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fmod.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -21,7 +21,7 @@ use rustc_ast::Attribute;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def_id::DefId;\n use rustc_hir::HirId;\n-use rustc_index::vec::{IndexSlice, IndexVec};\n+use rustc_index::{IndexSlice, IndexVec};\n use rustc_middle::{\n     mir::*,\n     thir::*,"}, {"sha": "803207d9dc664473af32cedeff659ded6806e0c6", "filename": "compiler/rustc_mir_build/src/build/custom/parse.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -1,4 +1,4 @@\n-use rustc_index::vec::IndexSlice;\n+use rustc_index::IndexSlice;\n use rustc_middle::{mir::*, thir::*, ty::Ty};\n use rustc_span::Span;\n "}, {"sha": "c385b00692ff4530fd5f71539234c5f02d5fa5b2", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -1,6 +1,6 @@\n //! See docs in `build/expr/mod.rs`.\n \n-use rustc_index::vec::{Idx, IndexVec};\n+use rustc_index::{Idx, IndexVec};\n use rustc_middle::ty::util::IntTypeExt;\n use rustc_target::abi::{Abi, FieldIdx, Primitive};\n "}, {"sha": "3f006765a7173a6b9cf6bbca077235ab1a9acce9", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -11,7 +11,7 @@ use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::{GeneratorKind, Node};\n-use rustc_index::vec::{Idx, IndexSlice, IndexVec};\n+use rustc_index::{Idx, IndexSlice, IndexVec};\n use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n use rustc_middle::hir::place::PlaceBase as HirPlaceBase;\n use rustc_middle::middle::region;"}, {"sha": "4c66c5b8eaea4c55824611d11e776e11f2a212ec", "filename": "compiler/rustc_mir_build/src/build/scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -86,7 +86,7 @@ use std::mem;\n use crate::build::{BlockAnd, BlockAndExtension, BlockFrame, Builder, CFG};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::HirId;\n-use rustc_index::vec::{IndexSlice, IndexVec};\n+use rustc_index::{IndexSlice, IndexVec};\n use rustc_middle::middle::region;\n use rustc_middle::mir::*;\n use rustc_middle::thir::{Expr, LintLevel};"}, {"sha": "a46ad6423a03780b227292345e8de94bbe36bf2d", "filename": "compiler/rustc_mir_build/src/thir/cx/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fblock.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -5,7 +5,7 @@ use rustc_middle::middle::region;\n use rustc_middle::thir::*;\n use rustc_middle::ty;\n \n-use rustc_index::vec::Idx;\n+use rustc_index::Idx;\n use rustc_middle::ty::CanonicalUserTypeAnnotation;\n \n impl<'tcx> Cx<'tcx> {"}, {"sha": "f46eb5a0ce18dce378c480e5d37d82520369c37f", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -5,7 +5,7 @@ use crate::thir::util::UserAnnotatedTyHelpers;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, CtorOf, DefKind, Res};\n-use rustc_index::vec::Idx;\n+use rustc_index::Idx;\n use rustc_middle::hir::place::Place as HirPlace;\n use rustc_middle::hir::place::PlaceBase as HirPlaceBase;\n use rustc_middle::hir::place::ProjectionKind as HirProjectionKind;"}, {"sha": "6a7a9a92279c6c279e68a49c720a152a9521269d", "filename": "compiler/rustc_mir_build/src/thir/pattern/const_to_pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -1,5 +1,5 @@\n use rustc_hir as hir;\n-use rustc_index::vec::Idx;\n+use rustc_index::Idx;\n use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n use rustc_infer::traits::Obligation;\n use rustc_middle::mir;"}, {"sha": "9af137813127360fc25788ebc7c6adc4c7dcc066", "filename": "compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -52,7 +52,7 @@ use smallvec::{smallvec, SmallVec};\n \n use rustc_data_structures::captures::Captures;\n use rustc_hir::{HirId, RangeEnd};\n-use rustc_index::vec::Idx;\n+use rustc_index::Idx;\n use rustc_middle::mir;\n use rustc_middle::thir::{FieldPat, Pat, PatKind, PatRange};\n use rustc_middle::ty::layout::IntegerExt;"}, {"sha": "0a3423bdd377321d65d230f0fc27bce2e7936285", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -16,7 +16,7 @@ use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Res};\n use rustc_hir::pat_util::EnumerateAndAdjustIterator;\n use rustc_hir::RangeEnd;\n-use rustc_index::vec::Idx;\n+use rustc_index::Idx;\n use rustc_middle::mir::interpret::{\n     ConstValue, ErrorHandled, LitToConstError, LitToConstInput, Scalar,\n };"}, {"sha": "2e68c794356924a8cadfc8a50a2d816d23a459df", "filename": "compiler/rustc_mir_dataflow/src/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -1,6 +1,6 @@\n use rustc_hir as hir;\n use rustc_hir::lang_items::LangItem;\n-use rustc_index::vec::Idx;\n+use rustc_index::Idx;\n use rustc_middle::mir::patch::MirPatch;\n use rustc_middle::mir::*;\n use rustc_middle::traits::Reveal;"}, {"sha": "3e8f792e63442e5b7e7641b0d65749bf20792fae", "filename": "compiler/rustc_mir_dataflow/src/framework/engine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fengine.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -12,7 +12,7 @@ use rustc_ast as ast;\n use rustc_data_structures::work_queue::WorkQueue;\n use rustc_graphviz as dot;\n use rustc_hir::def_id::DefId;\n-use rustc_index::vec::{Idx, IndexVec};\n+use rustc_index::{Idx, IndexVec};\n use rustc_middle::mir::{self, traversal, BasicBlock};\n use rustc_middle::mir::{create_dump_file, dump_enabled};\n use rustc_middle::ty::print::with_no_trimmed_paths;"}, {"sha": "6a256fae3ca7a4741cb88f08e5c4a5433a7c7be1", "filename": "compiler/rustc_mir_dataflow/src/framework/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Ffmt.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -2,7 +2,7 @@\n //! analysis.\n \n use rustc_index::bit_set::{BitSet, ChunkedBitSet, HybridBitSet};\n-use rustc_index::vec::Idx;\n+use rustc_index::Idx;\n use std::fmt;\n \n /// An extension to `fmt::Debug` for data that can be better printed with some auxiliary data `C`."}, {"sha": "af44a4329bf3d157da140368a5cef09d20299c28", "filename": "compiler/rustc_mir_dataflow/src/framework/lattice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Flattice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Flattice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Flattice.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -40,7 +40,7 @@\n \n use crate::framework::BitSetExt;\n use rustc_index::bit_set::{BitSet, ChunkedBitSet, HybridBitSet};\n-use rustc_index::vec::{Idx, IndexVec};\n+use rustc_index::{Idx, IndexVec};\n use std::iter;\n \n /// A [partially ordered set][poset] that has a [least upper bound][lub] for any pair of elements"}, {"sha": "f2263007f6fe9c04cbb8a205c69696ad4856dfec", "filename": "compiler/rustc_mir_dataflow/src/framework/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fmod.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -33,7 +33,7 @@\n use std::cmp::Ordering;\n \n use rustc_index::bit_set::{BitSet, ChunkedBitSet, HybridBitSet};\n-use rustc_index::vec::Idx;\n+use rustc_index::Idx;\n use rustc_middle::mir::{self, BasicBlock, Location};\n use rustc_middle::ty::TyCtxt;\n "}, {"sha": "0fed305b930c4622c86472e1a6fcdedfca67be69", "filename": "compiler/rustc_mir_dataflow/src/framework/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Ftests.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -3,7 +3,7 @@\n use std::marker::PhantomData;\n \n use rustc_index::bit_set::BitSet;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::IndexVec;\n use rustc_middle::mir::{self, BasicBlock, Location};\n use rustc_middle::ty;\n use rustc_span::DUMMY_SP;"}, {"sha": "2a0aff55083785e75b662c88687f40025320a1e0", "filename": "compiler/rustc_mir_dataflow/src/impls/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fmod.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -3,7 +3,7 @@\n //! zero-sized structure.\n \n use rustc_index::bit_set::{BitSet, ChunkedBitSet};\n-use rustc_index::vec::Idx;\n+use rustc_index::Idx;\n use rustc_middle::mir::visit::{MirVisitable, Visitor};\n use rustc_middle::mir::{self, Body, Location};\n use rustc_middle::ty::{self, TyCtxt};"}, {"sha": "096bc0acfccb95e328baf4e2d4182679c46e4ea9", "filename": "compiler/rustc_mir_dataflow/src/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -1,6 +1,6 @@\n use crate::move_paths::FxHashMap;\n use crate::un_derefer::UnDerefer;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::IndexVec;\n use rustc_middle::mir::tcx::RvalueInitializationState;\n use rustc_middle::mir::*;\n use rustc_middle::ty::{self, TyCtxt};"}, {"sha": "ab1a6715361ed8b17a4717500be829a2ba19dd64", "filename": "compiler/rustc_mir_dataflow/src/move_paths/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fmod.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -1,6 +1,6 @@\n use crate::move_paths::builder::MoveDat;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_index::vec::{IndexSlice, IndexVec};\n+use rustc_index::{IndexSlice, IndexVec};\n use rustc_middle::mir::*;\n use rustc_middle::ty::{ParamEnv, Ty, TyCtxt};\n use rustc_span::Span;\n@@ -20,7 +20,7 @@ rustc_index::newtype_index! {\n \n impl polonius_engine::Atom for MovePathIndex {\n     fn index(self) -> usize {\n-        rustc_index::vec::Idx::index(self)\n+        rustc_index::Idx::index(self)\n     }\n }\n "}, {"sha": "fdff1ec788de5ba8a6b71c68ac48c1015a86be4b", "filename": "compiler/rustc_mir_dataflow/src/value_analysis.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -36,7 +36,7 @@ use std::fmt::{Debug, Formatter};\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_index::bit_set::BitSet;\n-use rustc_index::vec::{IndexSlice, IndexVec};\n+use rustc_index::{IndexSlice, IndexVec};\n use rustc_middle::mir::visit::{MutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::*;\n use rustc_middle::ty::{self, Ty, TyCtxt};"}, {"sha": "fb4705e0754cfc26bf78c31fef949266fd79d11d", "filename": "compiler/rustc_mir_transform/src/add_call_guards.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_call_guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_call_guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_call_guards.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -1,5 +1,5 @@\n use crate::MirPass;\n-use rustc_index::vec::{Idx, IndexVec};\n+use rustc_index::{Idx, IndexVec};\n use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;\n "}, {"sha": "e99712eeef85375f46f8a1fd3f80323760ff68d0", "filename": "compiler/rustc_mir_transform/src/check_alignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_alignment.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -1,7 +1,7 @@\n use crate::MirPass;\n use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::LangItem;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::IndexVec;\n use rustc_middle::mir::*;\n use rustc_middle::mir::{\n     interpret::{ConstValue, Scalar},"}, {"sha": "f662ce645b08da71707b9796fc98ac8a30cd87c5", "filename": "compiler/rustc_mir_transform/src/const_debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_debuginfo.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -10,7 +10,7 @@ use rustc_middle::{\n };\n \n use crate::MirPass;\n-use rustc_index::{bit_set::BitSet, vec::IndexVec};\n+use rustc_index::{bit_set::BitSet, IndexVec};\n \n pub struct ConstDebugInfo;\n "}, {"sha": "96bae26e39c4bb3c6a9cdf7e624fe51bd4320267", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -7,7 +7,7 @@ use rustc_const_eval::const_eval::CheckAlignment;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::def::DefKind;\n use rustc_index::bit_set::BitSet;\n-use rustc_index::vec::{IndexSlice, IndexVec};\n+use rustc_index::{IndexSlice, IndexVec};\n use rustc_middle::mir::visit::{\n     MutVisitor, MutatingUseContext, NonMutatingUseContext, PlaceContext, Visitor,\n };"}, {"sha": "3922ed2fbf7ed1aaae8782c97f62a5488f77bfcf", "filename": "compiler/rustc_mir_transform/src/copy_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_transform%2Fsrc%2Fcopy_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_transform%2Fsrc%2Fcopy_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcopy_prop.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -1,5 +1,5 @@\n use rustc_index::bit_set::BitSet;\n-use rustc_index::vec::IndexSlice;\n+use rustc_index::IndexSlice;\n use rustc_middle::mir::visit::*;\n use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;"}, {"sha": "986d2fd190dd72fbed83cd426010ac41fb36cbeb", "filename": "compiler/rustc_mir_transform/src/coverage/graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -5,7 +5,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::graph::dominators::{self, Dominators};\n use rustc_data_structures::graph::{self, GraphSuccessors, WithNumNodes, WithStartNode};\n use rustc_index::bit_set::BitSet;\n-use rustc_index::vec::{IndexSlice, IndexVec};\n+use rustc_index::{IndexSlice, IndexVec};\n use rustc_middle::mir::coverage::*;\n use rustc_middle::mir::{self, BasicBlock, BasicBlockData, Terminator, TerminatorKind};\n "}, {"sha": "9b3c06fab50b7dfbd8424328dc32165bc561542e", "filename": "compiler/rustc_mir_transform/src/coverage/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fmod.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -16,7 +16,7 @@ use crate::MirPass;\n \n use rustc_data_structures::graph::WithNumNodes;\n use rustc_data_structures::sync::Lrc;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::IndexVec;\n use rustc_middle::hir;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::mir::coverage::*;"}, {"sha": "83a335197b343ce3d2a1ad8c469b3562ea85d251", "filename": "compiler/rustc_mir_transform/src/coverage/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftests.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -34,7 +34,7 @@ use coverage_test_macros::let_bcb;\n use itertools::Itertools;\n use rustc_data_structures::graph::WithNumNodes;\n use rustc_data_structures::graph::WithSuccessors;\n-use rustc_index::vec::{Idx, IndexVec};\n+use rustc_index::{Idx, IndexVec};\n use rustc_middle::mir::coverage::CoverageKind;\n use rustc_middle::mir::*;\n use rustc_middle::ty;"}, {"sha": "a39026751a783b9883a84e319851f2c32849d46d", "filename": "compiler/rustc_mir_transform/src/deref_separator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_transform%2Fsrc%2Fderef_separator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_transform%2Fsrc%2Fderef_separator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fderef_separator.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -1,5 +1,5 @@\n use crate::MirPass;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::IndexVec;\n use rustc_middle::mir::patch::MirPatch;\n use rustc_middle::mir::visit::NonUseContext::VarDebugInfo;\n use rustc_middle::mir::visit::{MutVisitor, PlaceContext};"}, {"sha": "f31653caa4972afc3406cab2ba62217f44ce8771", "filename": "compiler/rustc_mir_transform/src/elaborate_box_derefs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_box_derefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_box_derefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_box_derefs.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -4,7 +4,7 @@\n \n use crate::MirPass;\n use rustc_hir::def_id::DefId;\n-use rustc_index::vec::Idx;\n+use rustc_index::Idx;\n use rustc_middle::mir::patch::MirPatch;\n use rustc_middle::mir::visit::MutVisitor;\n use rustc_middle::mir::*;"}, {"sha": "34a7ee9e264f72c943a6936b3933f4284ac526bb", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -59,7 +59,7 @@ use rustc_hir as hir;\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::GeneratorKind;\n use rustc_index::bit_set::{BitMatrix, BitSet, GrowableBitSet};\n-use rustc_index::vec::{Idx, IndexVec};\n+use rustc_index::{Idx, IndexVec};\n use rustc_middle::mir::dump_mir;\n use rustc_middle::mir::visit::{MutVisitor, PlaceContext, Visitor};\n use rustc_middle::mir::*;"}, {"sha": "71bdfd5aae1f9a3a9166cef621812b9143c2acc9", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -3,7 +3,7 @@ use crate::deref_separator::deref_finder;\n use rustc_attr::InlineAttr;\n use rustc_hir::def_id::DefId;\n use rustc_index::bit_set::BitSet;\n-use rustc_index::vec::Idx;\n+use rustc_index::Idx;\n use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc_middle::mir::visit::*;\n use rustc_middle::mir::*;"}, {"sha": "1d6cd1c15b7d4e78b625497297f5e48ad108d72d", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -25,7 +25,7 @@ use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::intravisit::{self, Visitor};\n-use rustc_index::vec::IndexVec;\n+use rustc_index::IndexVec;\n use rustc_middle::mir::visit::Visitor as _;\n use rustc_middle::mir::{\n     traversal, AnalysisPhase, Body, ClearCrossCrate, ConstQualifs, Constant, LocalDecl, MirPass,"}, {"sha": "6e40dfa0d1382e60b4975c269e92e09d5a2bc7e9", "filename": "compiler/rustc_mir_transform/src/lower_slice_len.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_transform%2Fsrc%2Flower_slice_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_transform%2Fsrc%2Flower_slice_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flower_slice_len.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -3,7 +3,7 @@\n \n use crate::MirPass;\n use rustc_hir::def_id::DefId;\n-use rustc_index::vec::IndexSlice;\n+use rustc_index::IndexSlice;\n use rustc_middle::mir::*;\n use rustc_middle::ty::{self, TyCtxt};\n "}, {"sha": "b3b831bb4ab09f137a88ca4853350c257e486d3e", "filename": "compiler/rustc_mir_transform/src/normalize_array_len.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_transform%2Fsrc%2Fnormalize_array_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_transform%2Fsrc%2Fnormalize_array_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fnormalize_array_len.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -3,7 +3,7 @@\n \n use crate::ssa::SsaLocals;\n use crate::MirPass;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::IndexVec;\n use rustc_middle::mir::visit::*;\n use rustc_middle::mir::*;\n use rustc_middle::ty::{self, TyCtxt};"}, {"sha": "19d07fab0b954865912e22db15d0c90846bd26ea", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -7,7 +7,7 @@ use rustc_middle::ty::InternalSubsts;\n use rustc_middle::ty::{self, EarlyBinder, GeneratorSubsts, Ty, TyCtxt};\n use rustc_target::abi::{FieldIdx, VariantIdx, FIRST_VARIANT};\n \n-use rustc_index::vec::{Idx, IndexVec};\n+use rustc_index::{Idx, IndexVec};\n \n use rustc_span::Span;\n use rustc_target::spec::abi::Abi;"}, {"sha": "7e0cef025f7f4a8b58f1a334e02b832662322a9e", "filename": "compiler/rustc_mir_transform/src/simplify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -29,7 +29,7 @@\n \n use crate::MirPass;\n use rustc_data_structures::fx::{FxHashSet, FxIndexSet};\n-use rustc_index::vec::{Idx, IndexSlice, IndexVec};\n+use rustc_index::{Idx, IndexSlice, IndexVec};\n use rustc_middle::mir::coverage::*;\n use rustc_middle::mir::visit::{MutVisitor, MutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::*;"}, {"sha": "2d77291293d53c966a4e17d55e3449be4550592a", "filename": "compiler/rustc_mir_transform/src/sroa.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_transform%2Fsrc%2Fsroa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_transform%2Fsrc%2Fsroa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsroa.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -1,6 +1,6 @@\n use crate::MirPass;\n use rustc_index::bit_set::{BitSet, GrowableBitSet};\n-use rustc_index::vec::IndexVec;\n+use rustc_index::IndexVec;\n use rustc_middle::mir::patch::MirPatch;\n use rustc_middle::mir::visit::*;\n use rustc_middle::mir::*;"}, {"sha": "ec8d42c1652787a721ead1cf503c2ba79cb43e56", "filename": "compiler/rustc_mir_transform/src/ssa.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_transform%2Fsrc%2Fssa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_mir_transform%2Fsrc%2Fssa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fssa.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -1,7 +1,7 @@\n use either::Either;\n use rustc_data_structures::graph::dominators::Dominators;\n use rustc_index::bit_set::BitSet;\n-use rustc_index::vec::{IndexSlice, IndexVec};\n+use rustc_index::{IndexSlice, IndexVec};\n use rustc_middle::middle::resolve_bound_vars::Set1;\n use rustc_middle::mir::visit::*;\n use rustc_middle::mir::*;"}, {"sha": "7d8f6add63282351ed16b699be765873496b0e2a", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -93,7 +93,7 @@ use rustc_hir::def::*;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{Expr, HirId, HirIdMap, HirIdSet};\n-use rustc_index::vec::IndexVec;\n+use rustc_index::IndexVec;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, RootVariableMinCaptureList, Ty, TyCtxt};\n use rustc_session::lint;"}, {"sha": "91b56660b15419177af7072b8cc66da39314fbad", "filename": "compiler/rustc_query_impl/src/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -7,7 +7,7 @@ use rustc_data_structures::unhash::UnhashMap;\n use rustc_data_structures::unord::UnordSet;\n use rustc_hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, StableCrateId, LOCAL_CRATE};\n use rustc_hir::definitions::DefPathHash;\n-use rustc_index::vec::{Idx, IndexVec};\n+use rustc_index::{Idx, IndexVec};\n use rustc_middle::dep_graph::{DepNodeIndex, SerializedDepNodeIndex};\n use rustc_middle::mir::interpret::{AllocDecodingSession, AllocDecodingState};\n use rustc_middle::mir::{self, interpret};"}, {"sha": "b9922b26afcbf78e94fd7b8d179eaec2b8517f38", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -6,7 +6,7 @@ use rustc_data_structures::sharded::{self, Sharded};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::steal::Steal;\n use rustc_data_structures::sync::{AtomicU32, AtomicU64, Lock, Lrc, Ordering};\n-use rustc_index::vec::IndexVec;\n+use rustc_index::IndexVec;\n use rustc_serialize::opaque::{FileEncodeResult, FileEncoder};\n use smallvec::{smallvec, SmallVec};\n use std::assert_matches::assert_matches;"}, {"sha": "5cbc6bf8f8af3b7385fc1688c433b7c4d163a35e", "filename": "compiler/rustc_query_system/src/dep_graph/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fquery.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -1,6 +1,6 @@\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::graph::implementation::{Direction, Graph, NodeIndex, INCOMING};\n-use rustc_index::vec::IndexVec;\n+use rustc_index::IndexVec;\n \n use super::{DepKind, DepNode, DepNodeIndex};\n "}, {"sha": "59c1333fb5a467d3319152f5d66bf338fa319cbb", "filename": "compiler/rustc_query_system/src/dep_graph/serialized.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -18,7 +18,7 @@ use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::profiling::SelfProfilerRef;\n use rustc_data_structures::sync::Lock;\n-use rustc_index::vec::{Idx, IndexVec};\n+use rustc_index::{Idx, IndexVec};\n use rustc_serialize::opaque::{FileEncodeResult, FileEncoder, IntEncodedWithFixedSize, MemDecoder};\n use rustc_serialize::{Decodable, Decoder, Encodable};\n use smallvec::SmallVec;"}, {"sha": "9a09f516ec92014001d4bba3daf312a44477785e", "filename": "compiler/rustc_query_system/src/query/caches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fcaches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fcaches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fcaches.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -5,7 +5,7 @@ use rustc_data_structures::sharded;\n #[cfg(parallel_compiler)]\n use rustc_data_structures::sharded::Sharded;\n use rustc_data_structures::sync::Lock;\n-use rustc_index::vec::{Idx, IndexVec};\n+use rustc_index::{Idx, IndexVec};\n use std::fmt::Debug;\n use std::hash::Hash;\n use std::marker::PhantomData;"}, {"sha": "125f5ce7611741f739bf2a89d4fa943ae7c165c1", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -40,7 +40,7 @@ use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LocalDefIdMap, LocalDefIdSe\n use rustc_hir::def_id::{CRATE_DEF_ID, LOCAL_CRATE};\n use rustc_hir::definitions::DefPathData;\n use rustc_hir::TraitCandidate;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::IndexVec;\n use rustc_metadata::creader::{CStore, CrateLoader};\n use rustc_middle::metadata::ModChild;\n use rustc_middle::middle::privacy::EffectiveVisibilities;"}, {"sha": "8c58b52a5dc629ae0f6616f9360bbb329d142b18", "filename": "compiler/rustc_span/src/def_id.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -3,7 +3,7 @@ use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::stable_hasher::{Hash64, HashStable, StableHasher, ToStableHashKey};\n use rustc_data_structures::unhash::Unhasher;\n use rustc_data_structures::AtomicRef;\n-use rustc_index::vec::Idx;\n+use rustc_index::Idx;\n use rustc_macros::HashStable_Generic;\n use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n use std::fmt;"}, {"sha": "c669b64dd2c81ea626eb11f4cd93786b00441139", "filename": "compiler/rustc_span/src/hygiene.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -36,7 +36,7 @@ use rustc_data_structures::stable_hasher::HashingControls;\n use rustc_data_structures::stable_hasher::{Hash64, HashStable, StableHasher};\n use rustc_data_structures::sync::{Lock, Lrc};\n use rustc_data_structures::unhash::UnhashMap;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::IndexVec;\n use rustc_macros::HashStable_Generic;\n use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n use std::fmt;"}, {"sha": "226d29687e3a89c1ad408efcfe2d4d98263fe2f0", "filename": "compiler/rustc_trait_selection/src/solve/eval_ctxt/canonical.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt%2Fcanonical.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -11,7 +11,7 @@\n use super::{CanonicalGoal, Certainty, EvalCtxt, Goal};\n use crate::solve::canonicalize::{CanonicalizeMode, Canonicalizer};\n use crate::solve::{CanonicalResponse, QueryResult, Response};\n-use rustc_index::vec::IndexVec;\n+use rustc_index::IndexVec;\n use rustc_infer::infer::canonical::query_response::make_query_region_constraints;\n use rustc_infer::infer::canonical::CanonicalVarValues;\n use rustc_infer::infer::canonical::{CanonicalExt, QueryRegionConstraints};"}, {"sha": "e6941af7b57d89a003b3a899b70fd86bf048c50f", "filename": "compiler/rustc_trait_selection/src/solve/search_graph/cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fcache.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -10,7 +10,7 @@\n //! before then or if I still haven't done that before January 2023.\n use super::StackDepth;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::IndexVec;\n use rustc_middle::traits::solve::{CanonicalGoal, QueryResult};\n \n rustc_index::newtype_index! {"}, {"sha": "c1904352574e526226077f1f59866ee2c7a4042b", "filename": "compiler/rustc_trait_selection/src/solve/search_graph/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fmod.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -6,7 +6,7 @@ pub(super) use overflow::OverflowHandler;\n use self::cache::ProvisionalEntry;\n use cache::ProvisionalCache;\n use overflow::OverflowData;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::IndexVec;\n use rustc_middle::dep_graph::DepKind;\n use rustc_middle::traits::solve::{CanonicalGoal, Certainty, MaybeCause, QueryResult};\n use rustc_middle::ty::TyCtxt;"}, {"sha": "f7c75583f6021f72b8d4cb9172b3f826baf76383", "filename": "compiler/rustc_ty_utils/src/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -1,7 +1,7 @@\n use hir::def_id::DefId;\n use rustc_hir as hir;\n use rustc_index::bit_set::BitSet;\n-use rustc_index::vec::{IndexSlice, IndexVec};\n+use rustc_index::{IndexSlice, IndexVec};\n use rustc_middle::mir::{GeneratorLayout, GeneratorSavedLocal};\n use rustc_middle::ty::layout::{\n     IntegerExt, LayoutCx, LayoutError, LayoutOf, TyAndLayout, MAX_SIMD_LANES,"}, {"sha": "54c1ab5a275ef69f68a55439e339edc37f3dcdaf", "filename": "compiler/rustc_type_ir/src/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_type_ir%2Fsrc%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/compiler%2Frustc_type_ir%2Fsrc%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Fstructural_impls.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -6,7 +6,7 @@ use crate::fold::{FallibleTypeFolder, TypeFoldable};\n use crate::visit::{TypeVisitable, TypeVisitor};\n use crate::Interner;\n use rustc_data_structures::functor::IdFunctor;\n-use rustc_index::vec::{Idx, IndexVec};\n+use rustc_index::{Idx, IndexVec};\n \n use std::ops::ControlFlow;\n use std::rc::Rc;"}, {"sha": "74f330b76217be7b55bce71f86761666f125cb4b", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -20,7 +20,7 @@ use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{BodyId, Mutability};\n use rustc_hir_analysis::check::intrinsic::intrinsic_operation_unsafety;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::IndexVec;\n use rustc_middle::ty::fast_reject::SimplifiedType;\n use rustc_middle::ty::{self, TyCtxt, Visibility};\n use rustc_resolve::rustdoc::{add_doc_fragment, attrs_to_doc_fragments, inner_docs, DocFragment};"}, {"sha": "1f67b91569cbb358e48c2c333c9009a39c986368", "filename": "src/tools/miri/src/concurrency/data_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fdata_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fdata_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fdata_race.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -48,7 +48,7 @@ use std::{\n \n use rustc_ast::Mutability;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_index::vec::{Idx, IndexVec};\n+use rustc_index::{Idx, IndexVec};\n use rustc_middle::mir;\n use rustc_span::Span;\n use rustc_target::abi::{Align, Size};"}, {"sha": "7a6b8da40821b67a93e65571ee0a62db742b46a6", "filename": "src/tools/miri/src/concurrency/init_once.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Finit_once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Finit_once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Finit_once.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -1,7 +1,7 @@\n use std::collections::VecDeque;\n use std::num::NonZeroU32;\n \n-use rustc_index::vec::Idx;\n+use rustc_index::Idx;\n \n use super::sync::EvalContextExtPriv as _;\n use super::thread::MachineCallback;"}, {"sha": "662dff62c8808146f97df8db9f4c2f369fea1858", "filename": "src/tools/miri/src/concurrency/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fsync.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -5,7 +5,7 @@ use std::ops::Not;\n use log::trace;\n \n use rustc_data_structures::fx::FxHashMap;\n-use rustc_index::vec::{Idx, IndexVec};\n+use rustc_index::{Idx, IndexVec};\n \n use super::init_once::InitOnce;\n use super::vector_clock::VClock;"}, {"sha": "5f2bc2ec5586cd3b2bf8a29b067893e0079a8014", "filename": "src/tools/miri/src/concurrency/thread.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fthread.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -10,7 +10,7 @@ use log::trace;\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def_id::DefId;\n-use rustc_index::vec::{Idx, IndexVec};\n+use rustc_index::{Idx, IndexVec};\n use rustc_middle::mir::Mutability;\n use rustc_middle::ty::layout::TyAndLayout;\n use rustc_span::Span;\n@@ -272,8 +272,9 @@ impl Time {\n     fn get_wait_time(&self, clock: &Clock) -> Duration {\n         match self {\n             Time::Monotonic(instant) => instant.duration_since(clock.now()),\n-            Time::RealTime(time) =>\n-                time.duration_since(SystemTime::now()).unwrap_or(Duration::new(0, 0)),\n+            Time::RealTime(time) => {\n+                time.duration_since(SystemTime::now()).unwrap_or(Duration::new(0, 0))\n+            }\n         }\n     }\n }\n@@ -603,10 +604,11 @@ impl<'mir, 'tcx: 'mir> ThreadManager<'mir, 'tcx> {\n         // this allows us to have a deterministic scheduler.\n         for thread in self.threads.indices() {\n             match self.timeout_callbacks.entry(thread) {\n-                Entry::Occupied(entry) =>\n+                Entry::Occupied(entry) => {\n                     if entry.get().call_time.get_wait_time(clock) == Duration::new(0, 0) {\n                         return Some((thread, entry.remove().callback));\n-                    },\n+                    }\n+                }\n                 Entry::Vacant(_) => {}\n             }\n         }"}, {"sha": "b36c6be5a7201720adbbc0e20dae33808fa8342c", "filename": "src/tools/miri/src/concurrency/vector_clock.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fvector_clock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefb479242629f6b8ddf2cd0e93e54da7f3f493e/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fvector_clock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fvector_clock.rs?ref=cefb479242629f6b8ddf2cd0e93e54da7f3f493e", "patch": "@@ -1,4 +1,4 @@\n-use rustc_index::vec::Idx;\n+use rustc_index::Idx;\n use rustc_span::{Span, SpanData, DUMMY_SP};\n use smallvec::SmallVec;\n use std::{\n@@ -212,14 +212,16 @@ impl PartialOrd for VClock {\n         for (l, r) in iter {\n             match order {\n                 Ordering::Equal => order = l.cmp(r),\n-                Ordering::Less =>\n+                Ordering::Less => {\n                     if l > r {\n                         return None;\n-                    },\n-                Ordering::Greater =>\n+                    }\n+                }\n+                Ordering::Greater => {\n                     if l < r {\n                         return None;\n-                    },\n+                    }\n+                }\n             }\n         }\n \n@@ -234,18 +236,16 @@ impl PartialOrd for VClock {\n             Ordering::Equal => Some(order),\n             // Right has at least 1 element > than the implicit 0,\n             // so the only valid values are Ordering::Less or None.\n-            Ordering::Less =>\n-                match order {\n-                    Ordering::Less | Ordering::Equal => Some(Ordering::Less),\n-                    Ordering::Greater => None,\n-                },\n+            Ordering::Less => match order {\n+                Ordering::Less | Ordering::Equal => Some(Ordering::Less),\n+                Ordering::Greater => None,\n+            },\n             // Left has at least 1 element > than the implicit 0,\n             // so the only valid values are Ordering::Greater or None.\n-            Ordering::Greater =>\n-                match order {\n-                    Ordering::Greater | Ordering::Equal => Some(Ordering::Greater),\n-                    Ordering::Less => None,\n-                },\n+            Ordering::Greater => match order {\n+                Ordering::Greater | Ordering::Equal => Some(Ordering::Greater),\n+                Ordering::Less => None,\n+            },\n         }\n     }\n "}]}