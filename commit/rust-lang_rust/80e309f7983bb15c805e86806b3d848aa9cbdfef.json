{"sha": "80e309f7983bb15c805e86806b3d848aa9cbdfef", "node_id": "C_kwDOAAsO6NoAKDgwZTMwOWY3OTgzYmIxNWM4MDVlODY4MDZiM2Q4NDhhYTljYmRmZWY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-30T16:01:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-30T16:01:38Z"}, "message": "Rollup merge of #99244 - gthb:doc-improve-iterator-scan, r=m-ou-se\n\ndoc: clearer and more correct Iterator::scan\n\nThe `Iterator::scan` documentation seemed a little misleading to my newcomer\neyes, and this tries to address that.\n\n* I found \u201csimilar to `fold`\u201d unhelpful because (a) the similarity is only that\n  they maintain state between iterations, and (b) the _dissimilarity_ is no less\n  important: one returns a final value and the other an iterator. So this\n  replaces that with \u201cwhich, like `fold`, holds internal state, but unlike\n  `fold`, produces a new iterator.\n\n* I found \u201cthe return value from the closure, an `Option`, is yielded by the\n  iterator\u201d to be downright incorrect, because \u201cyielded by the iterator\u201d means\n  \u201creturned by the `next` method wrapped in `Some`\u201d, so this implied that `scan`\n  would convert an input iterator of `T` to an output iterator of `Option<T>`.\n  So this replaces \u201cyielded by the iterator\u201d with \u201creturned by the `next`\n  method\u201d and elaborates: \u201cThus the closure can return `Some(value)` to yield\n  `value`, or `None` to end the iteration.\u201d\n\n* This also changes the example to illustrate the latter point by returning\n  `None` to terminate the iteration early based on `state`.", "tree": {"sha": "1016e367908e889a4ec5754aa2cd2cbca8b96a32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1016e367908e889a4ec5754aa2cd2cbca8b96a32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80e309f7983bb15c805e86806b3d848aa9cbdfef", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjrwtiCRBK7hj4Ov3rIwAAxSIIADrRm5tlk1wnjaJagv5PE6AE\nnkfaRfzaHjDxPKB2qkmG4vQaohLxQu0VqpIZpfQp/XdZ3oBezfdhEnDe7g5YPu3z\nOpNfy32fzQl7Fw/4ouUDuDeBPhPIDaZwwWJCWzTdI2kb1j9JbNMSMq3r55OgI/zK\nss8dyPatO7XLyiOryEk8Btxw1aeWzMQOe0dQUejS7CKpzyG1X9I/Y+VhzTdVktvi\n/a9HT4k6xK5pAJYX9w2QnbWXZ6Q8OdclDrtNIEjMjblKmzh9xMgIivAfmwAW8BFL\nQ4lUKaF78gdIyjclRZX597h1BrmkP1FRK+JwdmIyF7SF7nFviS0b2Ng3bH73s+I=\n=flEp\n-----END PGP SIGNATURE-----\n", "payload": "tree 1016e367908e889a4ec5754aa2cd2cbca8b96a32\nparent f6cc345be403d481b4518e151218118c2a9eb4bb\nparent 588592b78b7a5cc64679b2164f794e79c444d766\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1672416098 +0100\ncommitter GitHub <noreply@github.com> 1672416098 +0100\n\nRollup merge of #99244 - gthb:doc-improve-iterator-scan, r=m-ou-se\n\ndoc: clearer and more correct Iterator::scan\n\nThe `Iterator::scan` documentation seemed a little misleading to my newcomer\neyes, and this tries to address that.\n\n* I found \u201csimilar to `fold`\u201d unhelpful because (a) the similarity is only that\n  they maintain state between iterations, and (b) the _dissimilarity_ is no less\n  important: one returns a final value and the other an iterator. So this\n  replaces that with \u201cwhich, like `fold`, holds internal state, but unlike\n  `fold`, produces a new iterator.\n\n* I found \u201cthe return value from the closure, an `Option`, is yielded by the\n  iterator\u201d to be downright incorrect, because \u201cyielded by the iterator\u201d means\n  \u201creturned by the `next` method wrapped in `Some`\u201d, so this implied that `scan`\n  would convert an input iterator of `T` to an output iterator of `Option<T>`.\n  So this replaces \u201cyielded by the iterator\u201d with \u201creturned by the `next`\n  method\u201d and elaborates: \u201cThus the closure can return `Some(value)` to yield\n  `value`, or `None` to end the iteration.\u201d\n\n* This also changes the example to illustrate the latter point by returning\n  `None` to terminate the iteration early based on `state`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80e309f7983bb15c805e86806b3d848aa9cbdfef", "html_url": "https://github.com/rust-lang/rust/commit/80e309f7983bb15c805e86806b3d848aa9cbdfef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80e309f7983bb15c805e86806b3d848aa9cbdfef/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6cc345be403d481b4518e151218118c2a9eb4bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6cc345be403d481b4518e151218118c2a9eb4bb", "html_url": "https://github.com/rust-lang/rust/commit/f6cc345be403d481b4518e151218118c2a9eb4bb"}, {"sha": "588592b78b7a5cc64679b2164f794e79c444d766", "url": "https://api.github.com/repos/rust-lang/rust/commits/588592b78b7a5cc64679b2164f794e79c444d766", "html_url": "https://github.com/rust-lang/rust/commit/588592b78b7a5cc64679b2164f794e79c444d766"}], "stats": {"total": 17, "additions": 11, "deletions": 6}, "files": [{"sha": "fc4d4bff24f33f4a9d58a2953dd9ef562b75cf2b", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/80e309f7983bb15c805e86806b3d848aa9cbdfef/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e309f7983bb15c805e86806b3d848aa9cbdfef/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=80e309f7983bb15c805e86806b3d848aa9cbdfef", "patch": "@@ -1381,8 +1381,8 @@ pub trait Iterator {\n         Take::new(self, n)\n     }\n \n-    /// An iterator adapter similar to [`fold`] that holds internal state and\n-    /// produces a new iterator.\n+    /// An iterator adapter which, like [`fold`], holds internal state, but\n+    /// unlike [`fold`], produces a new iterator.\n     ///\n     /// [`fold`]: Iterator::fold\n     ///\n@@ -1394,20 +1394,25 @@ pub trait Iterator {\n     ///\n     /// On iteration, the closure will be applied to each element of the\n     /// iterator and the return value from the closure, an [`Option`], is\n-    /// yielded by the iterator.\n+    /// returned by the `next` method. Thus the closure can return\n+    /// `Some(value)` to yield `value`, or `None` to end the iteration.\n     ///\n     /// # Examples\n     ///\n     /// Basic usage:\n     ///\n     /// ```\n-    /// let a = [1, 2, 3];\n+    /// let a = [1, 2, 3, 4];\n     ///\n     /// let mut iter = a.iter().scan(1, |state, &x| {\n-    ///     // each iteration, we'll multiply the state by the element\n+    ///     // each iteration, we'll multiply the state by the element ...\n     ///     *state = *state * x;\n     ///\n-    ///     // then, we'll yield the negation of the state\n+    ///     // ... and terminate if the state exceeds 6\n+    ///     if *state > 6 {\n+    ///         return None;\n+    ///     }\n+    ///     // ... else yield the negation of the state\n     ///     Some(-*state)\n     /// });\n     ///"}]}