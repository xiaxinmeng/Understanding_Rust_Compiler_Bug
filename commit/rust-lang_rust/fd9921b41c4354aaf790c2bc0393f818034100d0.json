{"sha": "fd9921b41c4354aaf790c2bc0393f818034100d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkOTkyMWI0MWM0MzU0YWFmNzkwYzJiYzAzOTNmODE4MDM0MTAwZDA=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-10T10:56:06Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-10T10:56:06Z"}, "message": "tidy", "tree": {"sha": "dfa6b15b52499cec5597234b069466bcc96a20d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfa6b15b52499cec5597234b069466bcc96a20d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd9921b41c4354aaf790c2bc0393f818034100d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd9921b41c4354aaf790c2bc0393f818034100d0", "html_url": "https://github.com/rust-lang/rust/commit/fd9921b41c4354aaf790c2bc0393f818034100d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd9921b41c4354aaf790c2bc0393f818034100d0/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "369a351010240b45da36c314c1363aca76b2ded0", "url": "https://api.github.com/repos/rust-lang/rust/commits/369a351010240b45da36c314c1363aca76b2ded0", "html_url": "https://github.com/rust-lang/rust/commit/369a351010240b45da36c314c1363aca76b2ded0"}], "stats": {"total": 13, "additions": 7, "deletions": 6}, "files": [{"sha": "982330baf9c9568cc386b2b5adce11befa4c3dbd", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fd9921b41c4354aaf790c2bc0393f818034100d0/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9921b41c4354aaf790c2bc0393f818034100d0/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=fd9921b41c4354aaf790c2bc0393f818034100d0", "patch": "@@ -810,18 +810,19 @@ impl<'tcx> Constructor<'tcx> {\n                                 adt.is_enum() || field.vis.is_accessible_from(cx.module, cx.tcx);\n                             let is_uninhabited = cx.is_uninhabited(field.ty(cx.tcx, substs));\n                             match (is_visible, is_non_exhaustive, is_uninhabited) {\n-                                // Treat all uninhabited types in non-exhaustive variants as `TyErr`.\n+                                // Treat all uninhabited types in non-exhaustive variants as\n+                                // `TyErr`.\n                                 (_, true, true) => cx.tcx.types.err,\n-                                // Treat all non-visible fields as `TyErr`. They can't appear in any\n-                                // other pattern from this match (because they are private), so their\n-                                // type does not matter - but we don't want to know they are\n+                                // Treat all non-visible fields as `TyErr`. They can't appear in\n+                                // any other pattern from this match (because they are private), so\n+                                // their type does not matter - but we don't want to know they are\n                                 // uninhabited.\n                                 (false, ..) => cx.tcx.types.err,\n                                 (true, ..) => {\n                                     let ty = field.ty(cx.tcx, substs);\n                                     match ty.kind {\n-                                        // If the field type returned is an array of an unknown size\n-                                        // return an TyErr.\n+                                        // If the field type returned is an array of an unknown\n+                                        // size return an TyErr.\n                                         ty::Array(_, len)\n                                             if len\n                                                 .try_eval_usize(cx.tcx, cx.param_env)"}]}