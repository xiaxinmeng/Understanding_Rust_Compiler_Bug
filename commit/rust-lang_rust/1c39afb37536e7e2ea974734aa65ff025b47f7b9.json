{"sha": "1c39afb37536e7e2ea974734aa65ff025b47f7b9", "node_id": "C_kwDOAAsO6NoAKDFjMzlhZmIzNzUzNmU3ZTJlYTk3NDczNGFhNjVmZjAyNWI0N2Y3Yjk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-09T15:42:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-09T15:42:27Z"}, "message": "Auto merge of #109684 - fee1-dead-contrib:rv_const_range, r=Mark-Simulacrum\n\nRevert #104100, Allow using `Range` as an `Iterator` in const contexts.\n\nThis fixes #109632.", "tree": {"sha": "52a8aa9d868690684eae9f61ad68d524245a7d53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52a8aa9d868690684eae9f61ad68d524245a7d53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c39afb37536e7e2ea974734aa65ff025b47f7b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c39afb37536e7e2ea974734aa65ff025b47f7b9", "html_url": "https://github.com/rust-lang/rust/commit/1c39afb37536e7e2ea974734aa65ff025b47f7b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c39afb37536e7e2ea974734aa65ff025b47f7b9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7201301df6afe8b68c6a8f5d2abba67bbba435ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/7201301df6afe8b68c6a8f5d2abba67bbba435ea", "html_url": "https://github.com/rust-lang/rust/commit/7201301df6afe8b68c6a8f5d2abba67bbba435ea"}, {"sha": "2412f1b64576c29635275c31506f912ff32ec606", "url": "https://api.github.com/repos/rust-lang/rust/commits/2412f1b64576c29635275c31506f912ff32ec606", "html_url": "https://github.com/rust-lang/rust/commit/2412f1b64576c29635275c31506f912ff32ec606"}], "stats": {"total": 157, "additions": 65, "deletions": 92}, "files": [{"sha": "37db074293d8c315a53c9916b8b682545931195c", "filename": "library/core/src/iter/range.rs", "status": "modified", "additions": 10, "deletions": 22, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1c39afb37536e7e2ea974734aa65ff025b47f7b9/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c39afb37536e7e2ea974734aa65ff025b47f7b9/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Frange.rs?ref=1c39afb37536e7e2ea974734aa65ff025b47f7b9", "patch": "@@ -1,5 +1,4 @@\n use crate::convert::TryFrom;\n-use crate::marker::Destruct;\n use crate::mem;\n use crate::num::NonZeroUsize;\n use crate::ops::{self, Try};\n@@ -22,8 +21,7 @@ unsafe_impl_trusted_step![char i8 i16 i32 i64 i128 isize u8 u16 u32 u64 u128 usi\n /// The *successor* operation moves towards values that compare greater.\n /// The *predecessor* operation moves towards values that compare lesser.\n #[unstable(feature = \"step_trait\", reason = \"recently redesigned\", issue = \"42168\")]\n-#[const_trait]\n-pub trait Step: ~const Clone + ~const PartialOrd + Sized {\n+pub trait Step: Clone + PartialOrd + Sized {\n     /// Returns the number of *successor* steps required to get from `start` to `end`.\n     ///\n     /// Returns `None` if the number of steps would overflow `usize`\n@@ -237,8 +235,7 @@ macro_rules! step_integer_impls {\n         $(\n             #[allow(unreachable_patterns)]\n             #[unstable(feature = \"step_trait\", reason = \"recently redesigned\", issue = \"42168\")]\n-            #[rustc_const_unstable(feature = \"const_iter\", issue = \"92476\")]\n-            impl const Step for $u_narrower {\n+            impl Step for $u_narrower {\n                 step_identical_methods!();\n \n                 #[inline]\n@@ -270,8 +267,7 @@ macro_rules! step_integer_impls {\n \n             #[allow(unreachable_patterns)]\n             #[unstable(feature = \"step_trait\", reason = \"recently redesigned\", issue = \"42168\")]\n-            #[rustc_const_unstable(feature = \"const_iter\", issue = \"92476\")]\n-            impl const Step for $i_narrower {\n+            impl Step for $i_narrower {\n                 step_identical_methods!();\n \n                 #[inline]\n@@ -335,8 +331,7 @@ macro_rules! step_integer_impls {\n         $(\n             #[allow(unreachable_patterns)]\n             #[unstable(feature = \"step_trait\", reason = \"recently redesigned\", issue = \"42168\")]\n-            #[rustc_const_unstable(feature = \"const_iter\", issue = \"92476\")]\n-            impl const Step for $u_wider {\n+            impl Step for $u_wider {\n                 step_identical_methods!();\n \n                 #[inline]\n@@ -361,8 +356,7 @@ macro_rules! step_integer_impls {\n \n             #[allow(unreachable_patterns)]\n             #[unstable(feature = \"step_trait\", reason = \"recently redesigned\", issue = \"42168\")]\n-            #[rustc_const_unstable(feature = \"const_iter\", issue = \"92476\")]\n-            impl const Step for $i_wider {\n+            impl Step for $i_wider {\n                 step_identical_methods!();\n \n                 #[inline]\n@@ -412,8 +406,7 @@ step_integer_impls! {\n }\n \n #[unstable(feature = \"step_trait\", reason = \"recently redesigned\", issue = \"42168\")]\n-#[rustc_const_unstable(feature = \"const_iter\", issue = \"92476\")]\n-impl const Step for char {\n+impl Step for char {\n     #[inline]\n     fn steps_between(&start: &char, &end: &char) -> Option<usize> {\n         let start = start as u32;\n@@ -431,7 +424,6 @@ impl const Step for char {\n     }\n \n     #[inline]\n-    #[rustc_allow_const_fn_unstable(const_try)]\n     fn forward_checked(start: char, count: usize) -> Option<char> {\n         let start = start as u32;\n         let mut res = Step::forward_checked(start, count)?;\n@@ -448,7 +440,6 @@ impl const Step for char {\n     }\n \n     #[inline]\n-    #[rustc_allow_const_fn_unstable(const_try)]\n     fn backward_checked(start: char, count: usize) -> Option<char> {\n         let start = start as u32;\n         let mut res = Step::backward_checked(start, count)?;\n@@ -524,7 +515,6 @@ macro_rules! range_incl_exact_iter_impl {\n }\n \n /// Specialization implementations for `Range`.\n-#[const_trait]\n trait RangeIteratorImpl {\n     type Item;\n \n@@ -539,7 +529,7 @@ trait RangeIteratorImpl {\n     fn spec_advance_back_by(&mut self, n: usize) -> Result<(), NonZeroUsize>;\n }\n \n-impl<A: ~const Step + ~const Destruct> const RangeIteratorImpl for ops::Range<A> {\n+impl<A: Step> RangeIteratorImpl for ops::Range<A> {\n     type Item = A;\n \n     #[inline]\n@@ -625,7 +615,7 @@ impl<A: ~const Step + ~const Destruct> const RangeIteratorImpl for ops::Range<A>\n     }\n }\n \n-impl<T: ~const TrustedStep + ~const Destruct> const RangeIteratorImpl for ops::Range<T> {\n+impl<T: TrustedStep> RangeIteratorImpl for ops::Range<T> {\n     #[inline]\n     fn spec_next(&mut self) -> Option<T> {\n         if self.start < self.end {\n@@ -713,8 +703,7 @@ impl<T: ~const TrustedStep + ~const Destruct> const RangeIteratorImpl for ops::R\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_unstable(feature = \"const_iter\", issue = \"92476\")]\n-impl<A: ~const Step + ~const Destruct> const Iterator for ops::Range<A> {\n+impl<A: Step> Iterator for ops::Range<A> {\n     type Item = A;\n \n     #[inline]\n@@ -824,8 +813,7 @@ range_incl_exact_iter_impl! {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_unstable(feature = \"const_iter\", issue = \"92476\")]\n-impl<A: ~const Step + ~const Destruct> const DoubleEndedIterator for ops::Range<A> {\n+impl<A: Step> DoubleEndedIterator for ops::Range<A> {\n     #[inline]\n     fn next_back(&mut self) -> Option<A> {\n         self.spec_next_back()"}, {"sha": "182d9f758adc471c22faa226d3d02ef76fa46c8f", "filename": "library/core/src/iter/traits/double_ended.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1c39afb37536e7e2ea974734aa65ff025b47f7b9/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c39afb37536e7e2ea974734aa65ff025b47f7b9/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs?ref=1c39afb37536e7e2ea974734aa65ff025b47f7b9", "patch": "@@ -1,4 +1,3 @@\n-use crate::marker::Destruct;\n use crate::num::NonZeroUsize;\n use crate::ops::{ControlFlow, Try};\n \n@@ -39,7 +38,6 @@ use crate::ops::{ControlFlow, Try};\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"DoubleEndedIterator\")]\n-#[const_trait]\n pub trait DoubleEndedIterator: Iterator {\n     /// Removes and returns an element from the end of the iterator.\n     ///\n@@ -136,10 +134,7 @@ pub trait DoubleEndedIterator: Iterator {\n     /// [`Err(k)`]: Err\n     #[inline]\n     #[unstable(feature = \"iter_advance_by\", reason = \"recently added\", issue = \"77404\")]\n-    fn advance_back_by(&mut self, n: usize) -> Result<(), NonZeroUsize>\n-    where\n-        Self::Item: ~const Destruct,\n-    {\n+    fn advance_back_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         for i in 0..n {\n             if self.next_back().is_none() {\n                 // SAFETY: `i` is always less than `n`.\n@@ -192,7 +187,6 @@ pub trait DoubleEndedIterator: Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"iter_nth_back\", since = \"1.37.0\")]\n-    #[rustc_do_not_const_check]\n     fn nth_back(&mut self, n: usize) -> Option<Self::Item> {\n         if self.advance_back_by(n).is_err() {\n             return None;\n@@ -232,7 +226,6 @@ pub trait DoubleEndedIterator: Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"iterator_try_fold\", since = \"1.27.0\")]\n-    #[rustc_do_not_const_check]\n     fn try_rfold<B, F, R>(&mut self, init: B, mut f: F) -> R\n     where\n         Self: Sized,\n@@ -304,7 +297,6 @@ pub trait DoubleEndedIterator: Iterator {\n     #[doc(alias = \"foldr\")]\n     #[inline]\n     #[stable(feature = \"iter_rfold\", since = \"1.27.0\")]\n-    #[rustc_do_not_const_check]\n     fn rfold<B, F>(mut self, init: B, mut f: F) -> B\n     where\n         Self: Sized,\n@@ -360,7 +352,6 @@ pub trait DoubleEndedIterator: Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"iter_rfind\", since = \"1.27.0\")]\n-    #[rustc_do_not_const_check]\n     fn rfind<P>(&mut self, predicate: P) -> Option<Self::Item>\n     where\n         Self: Sized,"}, {"sha": "f3d1e45f4fb6a0f6b3c247752aa7bf5f9c28b3c1", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1c39afb37536e7e2ea974734aa65ff025b47f7b9/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c39afb37536e7e2ea974734aa65ff025b47f7b9/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=1c39afb37536e7e2ea974734aa65ff025b47f7b9", "patch": "@@ -1,6 +1,5 @@\n use crate::array;\n use crate::cmp::{self, Ordering};\n-use crate::marker::Destruct;\n use crate::num::NonZeroUsize;\n use crate::ops::{ChangeOutputType, ControlFlow, FromResidual, Residual, Try};\n \n@@ -340,10 +339,8 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"iter_advance_by\", reason = \"recently added\", issue = \"77404\")]\n-    fn advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize>\n-    where\n-        Self::Item: ~const Destruct,\n-    {\n+    #[rustc_do_not_const_check]\n+    fn advance_by(&mut self, n: usize) -> Result<(), NonZeroUsize> {\n         for i in 0..n {\n             if self.next().is_none() {\n                 // SAFETY: `i` is always less than `n`.\n@@ -394,10 +391,8 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn nth(&mut self, n: usize) -> Option<Self::Item>\n-    where\n-        Self::Item: ~const Destruct,\n-    {\n+    #[rustc_do_not_const_check]\n+    fn nth(&mut self, n: usize) -> Option<Self::Item> {\n         self.advance_by(n).ok()?;\n         self.next()\n     }"}, {"sha": "af02848233d997cab74c88d8052865e707ce3894", "filename": "library/core/src/iter/traits/marker.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1c39afb37536e7e2ea974734aa65ff025b47f7b9/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c39afb37536e7e2ea974734aa65ff025b47f7b9/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fmarker.rs?ref=1c39afb37536e7e2ea974734aa65ff025b47f7b9", "patch": "@@ -86,5 +86,4 @@ pub unsafe trait InPlaceIterable: Iterator {}\n /// for details. Consumers are free to rely on the invariants in unsafe code.\n #[unstable(feature = \"trusted_step\", issue = \"85731\")]\n #[rustc_specialization_trait]\n-#[const_trait]\n-pub unsafe trait TrustedStep: ~const Step {}\n+pub unsafe trait TrustedStep: Step {}"}, {"sha": "4fd5a4bfc65f6f0a4119af76e721ff81132cc876", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c39afb37536e7e2ea974734aa65ff025b47f7b9/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c39afb37536e7e2ea974734aa65ff025b47f7b9/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=1c39afb37536e7e2ea974734aa65ff025b47f7b9", "patch": "@@ -123,11 +123,9 @@\n #![feature(const_index_range_slice_index)]\n #![feature(const_inherent_unchecked_arith)]\n #![feature(const_int_unchecked_arith)]\n-#![feature(const_intoiterator_identity)]\n #![feature(const_intrinsic_forget)]\n #![feature(const_ipv4)]\n #![feature(const_ipv6)]\n-#![feature(const_iter)]\n #![feature(const_likely)]\n #![feature(const_maybe_uninit_uninit_array)]\n #![feature(const_maybe_uninit_as_mut_ptr)]"}, {"sha": "d56687e48c96a0d15a3e56477c52219fedda8253", "filename": "library/core/tests/iter/consts.rs", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7201301df6afe8b68c6a8f5d2abba67bbba435ea/library%2Fcore%2Ftests%2Fiter%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7201301df6afe8b68c6a8f5d2abba67bbba435ea/library%2Fcore%2Ftests%2Fiter%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fconsts.rs?ref=7201301df6afe8b68c6a8f5d2abba67bbba435ea", "patch": "@@ -1,36 +0,0 @@\n-#[test]\n-fn const_manual_iter() {\n-    struct S(bool);\n-\n-    impl const Iterator for S {\n-        type Item = ();\n-\n-        fn next(&mut self) -> Option<Self::Item> {\n-            if self.0 == false {\n-                self.0 = true;\n-                Some(())\n-            } else {\n-                None\n-            }\n-        }\n-    }\n-    const {\n-        let mut val = S(false);\n-        assert!(val.next().is_some());\n-        assert!(val.next().is_none());\n-        assert!(val.next().is_none());\n-    }\n-}\n-\n-#[test]\n-fn const_range() {\n-    const {\n-        let mut arr = [0; 3];\n-        for i in 0..arr.len() {\n-            arr[i] = i;\n-        }\n-        assert!(arr[0] == 0);\n-        assert!(arr[1] == 1);\n-        assert!(arr[2] == 2);\n-    }\n-}"}, {"sha": "770b6f7601fa2dbf0dc9f84b54ff83ed33c82e4a", "filename": "library/core/tests/iter/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c39afb37536e7e2ea974734aa65ff025b47f7b9/library%2Fcore%2Ftests%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c39afb37536e7e2ea974734aa65ff025b47f7b9/library%2Fcore%2Ftests%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fmod.rs?ref=1c39afb37536e7e2ea974734aa65ff025b47f7b9", "patch": "@@ -20,8 +20,6 @@ mod range;\n mod sources;\n mod traits;\n \n-mod consts;\n-\n use core::cell::Cell;\n use core::convert::TryFrom;\n use core::iter::*;"}, {"sha": "6cdafa411d0033def017f058826ab096d239e41e", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1c39afb37536e7e2ea974734aa65ff025b47f7b9/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c39afb37536e7e2ea974734aa65ff025b47f7b9/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=1c39afb37536e7e2ea974734aa65ff025b47f7b9", "patch": "@@ -12,11 +12,8 @@\n #![feature(const_caller_location)]\n #![feature(const_cell_into_inner)]\n #![feature(const_convert)]\n-#![feature(const_for)]\n #![feature(const_hash)]\n #![feature(const_heap)]\n-#![feature(const_intoiterator_identity)]\n-#![feature(const_iter)]\n #![feature(const_maybe_uninit_as_mut_ptr)]\n #![feature(const_maybe_uninit_assume_init_read)]\n #![feature(const_nonnull_new)]"}, {"sha": "dabbd58dbe0acf20a9ee7e2a0b66343bc847eb25", "filename": "tests/ui/consts/const-fn-error.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c39afb37536e7e2ea974734aa65ff025b47f7b9/tests%2Fui%2Fconsts%2Fconst-fn-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c39afb37536e7e2ea974734aa65ff025b47f7b9/tests%2Fui%2Fconsts%2Fconst-fn-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-fn-error.rs?ref=1c39afb37536e7e2ea974734aa65ff025b47f7b9", "patch": "@@ -7,6 +7,7 @@ const fn f(x: usize) -> usize {\n         //~| ERROR `for` is not allowed in a `const fn`\n         //~| ERROR mutable references are not allowed in constant functions\n         //~| ERROR cannot call non-const fn\n+        //~| ERROR the trait bound\n         sum += i;\n     }\n     sum"}, {"sha": "73d235d6aec5f4190ba51ba45fd3efabd78d9322", "filename": "tests/ui/consts/const-fn-error.stderr", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1c39afb37536e7e2ea974734aa65ff025b47f7b9/tests%2Fui%2Fconsts%2Fconst-fn-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c39afb37536e7e2ea974734aa65ff025b47f7b9/tests%2Fui%2Fconsts%2Fconst-fn-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-fn-error.stderr?ref=1c39afb37536e7e2ea974734aa65ff025b47f7b9", "patch": "@@ -5,7 +5,7 @@ LL | /     for i in 0..x {\n LL | |\n LL | |\n LL | |\n-LL | |\n+...  |\n LL | |         sum += i;\n LL | |     }\n    | |_____^\n@@ -33,6 +33,19 @@ LL |     for i in 0..x {\n    = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n+error[E0277]: the trait bound `std::ops::Range<usize>: Iterator` is not satisfied\n+  --> $DIR/const-fn-error.rs:5:14\n+   |\n+LL |     for i in 0..x {\n+   |              ^^^^ `std::ops::Range<usize>` is not an iterator\n+   |\n+   = help: the trait `~const Iterator` is not implemented for `std::ops::Range<usize>`\n+note: the trait `Iterator` is implemented for `std::ops::Range<usize>`, but that implementation is not `const`\n+  --> $DIR/const-fn-error.rs:5:14\n+   |\n+LL |     for i in 0..x {\n+   |              ^^^^\n+\n error[E0015]: cannot call non-const fn `<std::ops::Range<usize> as Iterator>::next` in constant functions\n   --> $DIR/const-fn-error.rs:5:14\n    |\n@@ -42,7 +55,7 @@ LL |     for i in 0..x {\n    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n    = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n \n-Some errors have detailed explanations: E0015, E0658.\n+Some errors have detailed explanations: E0015, E0277, E0658.\n For more information about an error, try `rustc --explain E0015`."}, {"sha": "ff9c977f79481e9911476b57a43959726894a106", "filename": "tests/ui/consts/const-for.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c39afb37536e7e2ea974734aa65ff025b47f7b9/tests%2Fui%2Fconsts%2Fconst-for.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c39afb37536e7e2ea974734aa65ff025b47f7b9/tests%2Fui%2Fconsts%2Fconst-for.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-for.rs?ref=1c39afb37536e7e2ea974734aa65ff025b47f7b9", "patch": "@@ -5,6 +5,7 @@ const _: () = {\n     for _ in 0..5 {}\n     //~^ error: cannot call\n     //~| error: cannot convert\n+    //~| error: the trait bound\n };\n \n fn main() {}"}, {"sha": "64f2f603b943b0492f192fb4ca995de649301989", "filename": "tests/ui/consts/const-for.stderr", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1c39afb37536e7e2ea974734aa65ff025b47f7b9/tests%2Fui%2Fconsts%2Fconst-for.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c39afb37536e7e2ea974734aa65ff025b47f7b9/tests%2Fui%2Fconsts%2Fconst-for.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-for.stderr?ref=1c39afb37536e7e2ea974734aa65ff025b47f7b9", "patch": "@@ -9,6 +9,19 @@ note: impl defined here, but it is not `const`\n    = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n    = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n \n+error[E0277]: the trait bound `std::ops::Range<i32>: Iterator` is not satisfied\n+  --> $DIR/const-for.rs:5:14\n+   |\n+LL |     for _ in 0..5 {}\n+   |              ^^^^ `std::ops::Range<i32>` is not an iterator\n+   |\n+   = help: the trait `~const Iterator` is not implemented for `std::ops::Range<i32>`\n+note: the trait `Iterator` is implemented for `std::ops::Range<i32>`, but that implementation is not `const`\n+  --> $DIR/const-for.rs:5:14\n+   |\n+LL |     for _ in 0..5 {}\n+   |              ^^^^\n+\n error[E0015]: cannot call non-const fn `<std::ops::Range<i32> as Iterator>::next` in constants\n   --> $DIR/const-for.rs:5:14\n    |\n@@ -18,6 +31,7 @@ LL |     for _ in 0..5 {}\n    = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n    = help: add `#![feature(const_trait_impl)]` to the crate attributes to enable\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0015`.\n+Some errors have detailed explanations: E0015, E0277.\n+For more information about an error, try `rustc --explain E0015`."}, {"sha": "a450dbb82d1bdf4fabf4b5229100a810104badd8", "filename": "tests/ui/typeck/typeck_type_placeholder_item.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c39afb37536e7e2ea974734aa65ff025b47f7b9/tests%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c39afb37536e7e2ea974734aa65ff025b47f7b9/tests%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs?ref=1c39afb37536e7e2ea974734aa65ff025b47f7b9", "patch": "@@ -228,4 +228,5 @@ fn evens_squared(n: usize) -> _ {\n \n const _: _ = (1..10).filter(|x| x % 2 == 0).map(|x| x * x);\n //~^ ERROR the trait bound\n+//~| ERROR the trait bound\n //~| ERROR the placeholder"}, {"sha": "bc6c9fd077993a172ee6525d570693a0eb4e0826", "filename": "tests/ui/typeck/typeck_type_placeholder_item.stderr", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1c39afb37536e7e2ea974734aa65ff025b47f7b9/tests%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c39afb37536e7e2ea974734aa65ff025b47f7b9/tests%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr?ref=1c39afb37536e7e2ea974734aa65ff025b47f7b9", "patch": "@@ -437,6 +437,19 @@ LL | fn evens_squared(n: usize) -> _ {\n    |                               not allowed in type signatures\n    |                               help: replace with an appropriate return type: `impl Iterator<Item = usize>`\n \n+error[E0277]: the trait bound `std::ops::Range<{integer}>: Iterator` is not satisfied\n+  --> $DIR/typeck_type_placeholder_item.rs:229:22\n+   |\n+LL | const _: _ = (1..10).filter(|x| x % 2 == 0).map(|x| x * x);\n+   |                      ^^^^^^ `std::ops::Range<{integer}>` is not an iterator\n+   |\n+   = help: the trait `~const Iterator` is not implemented for `std::ops::Range<{integer}>`\n+note: the trait `Iterator` is implemented for `std::ops::Range<{integer}>`, but that implementation is not `const`\n+  --> $DIR/typeck_type_placeholder_item.rs:229:14\n+   |\n+LL | const _: _ = (1..10).filter(|x| x % 2 == 0).map(|x| x * x);\n+   |              ^^^^^^^\n+\n error[E0277]: the trait bound `Filter<std::ops::Range<{integer}>, [closure@$DIR/typeck_type_placeholder_item.rs:229:29: 229:32]>: Iterator` is not satisfied\n   --> $DIR/typeck_type_placeholder_item.rs:229:45\n    |\n@@ -664,7 +677,7 @@ LL |     const D: _ = 42;\n    |              not allowed in type signatures\n    |              help: replace with the correct type: `i32`\n \n-error: aborting due to 72 previous errors\n+error: aborting due to 73 previous errors\n \n Some errors have detailed explanations: E0121, E0277, E0282, E0403.\n For more information about an error, try `rustc --explain E0121`."}]}