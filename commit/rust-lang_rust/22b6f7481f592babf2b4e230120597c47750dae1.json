{"sha": "22b6f7481f592babf2b4e230120597c47750dae1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyYjZmNzQ4MWY1OTJiYWJmMmI0ZTIzMDEyMDU5N2M0Nzc1MGRhZTE=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-09-13T04:48:49Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-09-16T17:44:04Z"}, "message": "document why attributes are set on CallInst", "tree": {"sha": "b8ebf157cd17da9b40e68afd297b76d3fe99c7cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8ebf157cd17da9b40e68afd297b76d3fe99c7cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22b6f7481f592babf2b4e230120597c47750dae1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22b6f7481f592babf2b4e230120597c47750dae1", "html_url": "https://github.com/rust-lang/rust/commit/22b6f7481f592babf2b4e230120597c47750dae1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22b6f7481f592babf2b4e230120597c47750dae1/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2eb1c01a45cbb7bfc40f24073b60de61e3fad47", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2eb1c01a45cbb7bfc40f24073b60de61e3fad47", "html_url": "https://github.com/rust-lang/rust/commit/b2eb1c01a45cbb7bfc40f24073b60de61e3fad47"}], "stats": {"total": 9, "additions": 8, "deletions": 1}, "files": [{"sha": "54c905a4c1651352ab9b90eae0c399e0e3c84be5", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/22b6f7481f592babf2b4e230120597c47750dae1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22b6f7481f592babf2b4e230120597c47750dae1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=22b6f7481f592babf2b4e230120597c47750dae1", "patch": "@@ -706,12 +706,15 @@ pub fn trans_call_inner(in_cx: @mut Block,\n                 _ => {}\n             }\n \n-            // Invoke the actual rust fn and update bcx/llresult.\n+            // A function pointer is called without the declaration available, so we have to apply\n+            // any attributes with ABI implications directly to the call instruction. Right now, the\n+            // only attribute we need to worry about is `sret`.\n             let mut attrs = ~[];\n             if type_of::return_uses_outptr(in_cx.tcx(), ret_ty) {\n                 attrs.push((1, StructRetAttribute));\n             }\n \n+            // The `noalias` attribute on the return value is useful to a function ptr caller.\n             match ty::get(ret_ty).sty {\n                 // `~` pointer return values never alias because ownership is transferred\n                 ty::ty_uniq(*) |\n@@ -721,6 +724,7 @@ pub fn trans_call_inner(in_cx: @mut Block,\n                 _ => ()\n             }\n \n+            // Invoke the actual rust fn and update bcx/llresult.\n             let (llret, b) = base::invoke(bcx, llfn, llargs, attrs);\n             bcx = b;\n             llresult = llret;"}, {"sha": "b00d77d72ddb34650df328966483b8d4246e3e7b", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/22b6f7481f592babf2b4e230120597c47750dae1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22b6f7481f592babf2b4e230120597c47750dae1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=22b6f7481f592babf2b4e230120597c47750dae1", "patch": "@@ -264,6 +264,9 @@ pub fn trans_native_call(bcx: @mut Block,\n         }\n     };\n \n+    // A function pointer is called without the declaration available, so we have to apply\n+    // any attributes with ABI implications directly to the call instruction. Right now, the\n+    // only attribute we need to worry about is `sret`.\n     let attrs;\n     if fn_type.sret {\n         attrs = &[(1, StructRetAttribute)];"}]}