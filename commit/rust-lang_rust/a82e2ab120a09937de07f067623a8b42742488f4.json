{"sha": "a82e2ab120a09937de07f067623a8b42742488f4", "node_id": "C_kwDOAAsO6NoAKGE4MmUyYWIxMjBhMDk5MzdkZTA3ZjA2NzYyM2E4YjQyNzQyNDg4ZjQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-05-07T20:44:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-07T20:44:40Z"}, "message": "Rollup merge of #96726 - oli-obk:no_cross_inference, r=Mark-Simulacrum\n\nAdd regression and bug tests\n\nthis tracks the behaviour from https://github.com/rust-lang/rust/issues/96572 in our test suite", "tree": {"sha": "79655fb9e8fec51290f0245f5eec038c6cdd21ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79655fb9e8fec51290f0245f5eec038c6cdd21ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a82e2ab120a09937de07f067623a8b42742488f4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJidto4CRBK7hj4Ov3rIwAAGnMIAK/c2A4AfftNFKjqvVwrAU1B\nJbls7akUynb7sAdw8c2JmeEhj0e/GR7UlSkwYFfSd5kfxr2Dy8Ou8bJm5587eNYA\nlgdPiLiu6wxe9gxKRJ1z3TBQLYSLwdNioL9QhD/JXBO62PDD7nPlsiFJOgWuAi/F\nowi3UnRBbA7G6kL7LOyfXWugIu3taaxgU5EOrrI366sN4Mzvro2vPH4urPGm2tVX\nWiT5By9z1OzqQpzcTVqVoZZve1w85F4PFGpQnf/p7djRFC1ZDXx9E3uJ2h4D5YkG\nsgMENrgjdGHSOofi56l8LRlyuFH67ORlFi3aeWyIFcLBeO0e+2yuT2Aj4yF9Zk0=\n=EBIZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 79655fb9e8fec51290f0245f5eec038c6cdd21ca\nparent 416d600a9ad31d7f790b1f0b1ef969faa1bf2b4f\nparent a75d559e24ed648acb3a95677b2f1fae5c2ac419\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1651956280 +0200\ncommitter GitHub <noreply@github.com> 1651956280 +0200\n\nRollup merge of #96726 - oli-obk:no_cross_inference, r=Mark-Simulacrum\n\nAdd regression and bug tests\n\nthis tracks the behaviour from https://github.com/rust-lang/rust/issues/96572 in our test suite\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a82e2ab120a09937de07f067623a8b42742488f4", "html_url": "https://github.com/rust-lang/rust/commit/a82e2ab120a09937de07f067623a8b42742488f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a82e2ab120a09937de07f067623a8b42742488f4/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "416d600a9ad31d7f790b1f0b1ef969faa1bf2b4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/416d600a9ad31d7f790b1f0b1ef969faa1bf2b4f", "html_url": "https://github.com/rust-lang/rust/commit/416d600a9ad31d7f790b1f0b1ef969faa1bf2b4f"}, {"sha": "a75d559e24ed648acb3a95677b2f1fae5c2ac419", "url": "https://api.github.com/repos/rust-lang/rust/commits/a75d559e24ed648acb3a95677b2f1fae5c2ac419", "html_url": "https://github.com/rust-lang/rust/commit/a75d559e24ed648acb3a95677b2f1fae5c2ac419"}], "stats": {"total": 103, "additions": 103, "deletions": 0}, "files": [{"sha": "dafaf40a69df43dad9efd01487df42e0c09881a7", "filename": "src/test/ui/type-alias-impl-trait/cross_inference.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a82e2ab120a09937de07f067623a8b42742488f4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a82e2ab120a09937de07f067623a8b42742488f4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference.rs?ref=a82e2ab120a09937de07f067623a8b42742488f4", "patch": "@@ -0,0 +1,10 @@\n+// check-pass\n+\n+#![feature(type_alias_impl_trait)]\n+\n+fn main() {\n+    type T = impl Copy;\n+    let foo: T = (1u32, 2u32);\n+    let x: (_, _) = foo;\n+    println!(\"{:?}\", x);\n+}"}, {"sha": "9ad7cad39d0713c1150c400650296418ab614923", "filename": "src/test/ui/type-alias-impl-trait/cross_inference_pattern_bug.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a82e2ab120a09937de07f067623a8b42742488f4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_pattern_bug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a82e2ab120a09937de07f067623a8b42742488f4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_pattern_bug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_pattern_bug.rs?ref=a82e2ab120a09937de07f067623a8b42742488f4", "patch": "@@ -0,0 +1,24 @@\n+// known-bug\n+// failure-status: 101\n+// compile-flags: --edition=2021 --crate-type=lib\n+// rustc-env:RUST_BACKTRACE=0\n+\n+// normalize-stderr-test \"thread 'rustc' panicked.*\" -> \"thread 'rustc' panicked\"\n+// normalize-stderr-test \"note:.*RUST_BACKTRACE=1.*\\n\" -> \"\"\n+// normalize-stderr-test \"\\nerror: internal compiler error.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"note:.*unexpectedly panicked.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"note: we would appreciate a bug report.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"note: compiler flags.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"note: rustc.*running on.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"#.*\\n\" -> \"\"\n+// normalize-stderr-test \".*delayed.*\\n\" -> \"\"\n+\n+// tracked in https://github.com/rust-lang/rust/issues/96572\n+\n+#![feature(type_alias_impl_trait)]\n+\n+fn main() {\n+    type T = impl Copy;\n+    let foo: T = (1u32, 2u32);\n+    let (a, b): (u32, u32) = foo;\n+}"}, {"sha": "84d2705bf2453c9c0a0439843a29dffc1d8a2a0a", "filename": "src/test/ui/type-alias-impl-trait/cross_inference_pattern_bug.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a82e2ab120a09937de07f067623a8b42742488f4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_pattern_bug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a82e2ab120a09937de07f067623a8b42742488f4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_pattern_bug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_pattern_bug.stderr?ref=a82e2ab120a09937de07f067623a8b42742488f4", "patch": "@@ -0,0 +1,32 @@\n+error: internal compiler error: no errors encountered even though `delay_span_bug` issued\n+\n+error: internal compiler error: broken MIR in DefId(0:3 ~ cross_inference_pattern_bug[646d]::main) ((_1.0: u32)): can't project out of PlaceTy { ty: main::T, variant_index: None }\n+  --> $DIR/cross_inference_pattern_bug.rs:23:10\n+   |\n+LL |     let (a, b): (u32, u32) = foo;\n+   |          ^\n+   |\n+\n+error: internal compiler error: TyKind::Error constructed but no error reported\n+   |\n+\n+error: internal compiler error: TyKind::Error constructed but no error reported\n+   |\n+\n+error: internal compiler error: broken MIR in DefId(0:3 ~ cross_inference_pattern_bug[646d]::main) ((_1.1: u32)): can't project out of PlaceTy { ty: main::T, variant_index: None }\n+  --> $DIR/cross_inference_pattern_bug.rs:23:13\n+   |\n+LL |     let (a, b): (u32, u32) = foo;\n+   |             ^\n+   |\n+\n+error: internal compiler error: TyKind::Error constructed but no error reported\n+   |\n+\n+error: internal compiler error: TyKind::Error constructed but no error reported\n+   |\n+\n+thread 'rustc' panicked\n+\n+query stack during panic:\n+end of query stack"}, {"sha": "179f525de52b0e445cc25b443360a1f1104e4f8c", "filename": "src/test/ui/type-alias-impl-trait/cross_inference_pattern_bug_no_type.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a82e2ab120a09937de07f067623a8b42742488f4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_pattern_bug_no_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a82e2ab120a09937de07f067623a8b42742488f4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_pattern_bug_no_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_pattern_bug_no_type.rs?ref=a82e2ab120a09937de07f067623a8b42742488f4", "patch": "@@ -0,0 +1,13 @@\n+// known-bug\n+// compile-flags: --edition=2021 --crate-type=lib\n+// rustc-env:RUST_BACKTRACE=0\n+\n+// tracked in https://github.com/rust-lang/rust/issues/96572\n+\n+#![feature(type_alias_impl_trait)]\n+\n+fn main() {\n+    type T = impl Copy;  // error: unconstrained opaque type\n+    let foo: T = (1u32, 2u32);\n+    let (a, b) = foo; // removing this line makes the code compile\n+}"}, {"sha": "8aa1f495639951ff05e51d906d728a69dd8fd9bf", "filename": "src/test/ui/type-alias-impl-trait/cross_inference_pattern_bug_no_type.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a82e2ab120a09937de07f067623a8b42742488f4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_pattern_bug_no_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a82e2ab120a09937de07f067623a8b42742488f4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_pattern_bug_no_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_pattern_bug_no_type.stderr?ref=a82e2ab120a09937de07f067623a8b42742488f4", "patch": "@@ -0,0 +1,10 @@\n+error: unconstrained opaque type\n+  --> $DIR/cross_inference_pattern_bug_no_type.rs:10:14\n+   |\n+LL |     type T = impl Copy;  // error: unconstrained opaque type\n+   |              ^^^^^^^^^\n+   |\n+   = note: `T` must be used in combination with a concrete type within the same module\n+\n+error: aborting due to previous error\n+"}, {"sha": "f6affbf175995ac31417cbd2b006eb3014bf3eca", "filename": "src/test/ui/type-alias-impl-trait/cross_inference_rpit.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a82e2ab120a09937de07f067623a8b42742488f4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_rpit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a82e2ab120a09937de07f067623a8b42742488f4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_rpit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_rpit.rs?ref=a82e2ab120a09937de07f067623a8b42742488f4", "patch": "@@ -0,0 +1,14 @@\n+// check-pass\n+\n+fn foo(b: bool) -> impl Copy {\n+    if b {\n+        return (5,6)\n+    }\n+    let x: (_, _) = foo(true);\n+    println!(\"{:?}\", x);\n+    (1u32, 2u32)\n+}\n+\n+fn main() {\n+    foo(false);\n+}"}]}