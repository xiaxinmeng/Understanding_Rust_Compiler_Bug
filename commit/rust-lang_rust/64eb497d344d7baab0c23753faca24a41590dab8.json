{"sha": "64eb497d344d7baab0c23753faca24a41590dab8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0ZWI0OTdkMzQ0ZDdiYWFiMGMyMzc1M2ZhY2EyNGE0MTU5MGRhYjg=", "commit": {"author": {"name": "Daniel Patterson", "email": "dbp@riseup.net", "date": "2012-08-01T21:19:43Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-08-03T18:28:19Z"}, "message": "std::net::url - eliminate out of date comment and switch to str::each_chari instead of str_reader to make code cleaner", "tree": {"sha": "b3f6d3795533287b218ae72ad4be2f5ff1e4d8c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3f6d3795533287b218ae72ad4be2f5ff1e4d8c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64eb497d344d7baab0c23753faca24a41590dab8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64eb497d344d7baab0c23753faca24a41590dab8", "html_url": "https://github.com/rust-lang/rust/commit/64eb497d344d7baab0c23753faca24a41590dab8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64eb497d344d7baab0c23753faca24a41590dab8/comments", "author": null, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e3105b6db6eb30a95061b56e78581dae0a98996", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e3105b6db6eb30a95061b56e78581dae0a98996", "html_url": "https://github.com/rust-lang/rust/commit/8e3105b6db6eb30a95061b56e78581dae0a98996"}], "stats": {"total": 29, "additions": 12, "deletions": 17}, "files": [{"sha": "b3b27d66b1ac72d15e67938b2a5102a5716f188b", "filename": "src/libstd/net_url.rs", "status": "modified", "additions": 12, "deletions": 17, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/64eb497d344d7baab0c23753faca24a41590dab8/src%2Flibstd%2Fnet_url.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64eb497d344d7baab0c23753faca24a41590dab8/src%2Flibstd%2Fnet_url.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_url.rs?ref=64eb497d344d7baab0c23753faca24a41590dab8", "patch": "@@ -357,7 +357,6 @@ fn get_scheme(rawurl: ~str) -> result::result<(~str, ~str), @~str> {\n }\n \n // returns userinfo, host, port, and unparsed part, or an error\n-// currently doesn't handle IPv6 addresses.\n fn get_authority(rawurl: ~str) ->\n     result::result<(option<userinfo>, ~str, option<~str>, ~str), @~str> {\n     if !str::starts_with(rawurl, ~\"//\") {\n@@ -387,15 +386,9 @@ fn get_authority(rawurl: ~str) ->\n     let mut port : option::option<~str> = option::none;\n \n     let mut colon_count = 0;\n-    let mut pos : uint = 0, begin : uint = 2;\n-    let mut i : uint = 0;\n-\n-    let rdr = io::str_reader(rawurl);\n-    let mut c : char;\n-    while !rdr.eof() {\n-        c = rdr.read_byte() as char;\n-        i = rdr.tell() - 1; // we want base 0\n+    let mut pos : uint = 0, begin : uint = 2, end : uint = len;\n \n+    for str::each_chari(rawurl) |i,c| {\n         if i < 2 { again; } // ignore the leading //\n \n         // deal with input class first\n@@ -487,41 +480,43 @@ fn get_authority(rawurl: ~str) ->\n           }\n \n           '?' | '#' | '/' {\n+            end = i;\n             break;\n           }\n           _ { }\n         }\n+        end = i;\n     }\n \n     // finish up\n     alt st {\n       start {\n-        if i+1 == len {\n-            host = str::slice(rawurl, begin, i+1);\n+        if end+1 == len {\n+            host = str::slice(rawurl, begin, end+1);\n         } else {\n-            host = str::slice(rawurl, begin, i);\n+            host = str::slice(rawurl, begin, end);\n         }\n       }\n       pass_host_port | ip6_port {\n         if in != digit {\n             return result::err(@~\"Non-digit characters in port.\");\n         }\n         host = str::slice(rawurl, begin, pos);\n-        port = option::some(str::slice(rawurl, pos+1, i));\n+        port = option::some(str::slice(rawurl, pos+1, end));\n       }\n       ip6_host | in_host {\n-        host = str::slice(rawurl, begin, i);\n+        host = str::slice(rawurl, begin, end);\n       }\n       in_port {\n         if in != digit {\n             return result::err(@~\"Non-digit characters in port.\");\n         }\n-        port = option::some(str::slice(rawurl, pos+1, i));\n+        port = option::some(str::slice(rawurl, pos+1, end));\n       }\n     }\n \n-    let rest = if i+1 == len { ~\"\" }\n-    else { str::slice(rawurl, i, len) };\n+    let rest = if end+1 == len { ~\"\" }\n+    else { str::slice(rawurl, end, len) };\n     return result::ok((userinfo, host, port, rest));\n }\n "}]}