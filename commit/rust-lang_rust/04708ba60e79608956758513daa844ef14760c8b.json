{"sha": "04708ba60e79608956758513daa844ef14760c8b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0NzA4YmE2MGU3OTYwODk1Njc1ODUxM2RhYTg0NGVmMTQ3NjBjOGI=", "commit": {"author": {"name": "Sean Griffin", "email": "sean@seantheprogrammer.com", "date": "2018-02-08T21:12:32Z"}, "committer": {"name": "Sean Griffin", "email": "sean@seantheprogrammer.com", "date": "2018-05-02T14:36:13Z"}, "message": "track skol levels in the InferCtxt rather than via counter", "tree": {"sha": "5da46ca7466401e5bd9879be5859b63dbbcb1ec3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5da46ca7466401e5bd9879be5859b63dbbcb1ec3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04708ba60e79608956758513daa844ef14760c8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04708ba60e79608956758513daa844ef14760c8b", "html_url": "https://github.com/rust-lang/rust/commit/04708ba60e79608956758513daa844ef14760c8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04708ba60e79608956758513daa844ef14760c8b/comments", "author": {"login": "sgrif", "id": 1529387, "node_id": "MDQ6VXNlcjE1MjkzODc=", "avatar_url": "https://avatars.githubusercontent.com/u/1529387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sgrif", "html_url": "https://github.com/sgrif", "followers_url": "https://api.github.com/users/sgrif/followers", "following_url": "https://api.github.com/users/sgrif/following{/other_user}", "gists_url": "https://api.github.com/users/sgrif/gists{/gist_id}", "starred_url": "https://api.github.com/users/sgrif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sgrif/subscriptions", "organizations_url": "https://api.github.com/users/sgrif/orgs", "repos_url": "https://api.github.com/users/sgrif/repos", "events_url": "https://api.github.com/users/sgrif/events{/privacy}", "received_events_url": "https://api.github.com/users/sgrif/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sgrif", "id": 1529387, "node_id": "MDQ6VXNlcjE1MjkzODc=", "avatar_url": "https://avatars.githubusercontent.com/u/1529387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sgrif", "html_url": "https://github.com/sgrif", "followers_url": "https://api.github.com/users/sgrif/followers", "following_url": "https://api.github.com/users/sgrif/following{/other_user}", "gists_url": "https://api.github.com/users/sgrif/gists{/gist_id}", "starred_url": "https://api.github.com/users/sgrif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sgrif/subscriptions", "organizations_url": "https://api.github.com/users/sgrif/orgs", "repos_url": "https://api.github.com/users/sgrif/repos", "events_url": "https://api.github.com/users/sgrif/events{/privacy}", "received_events_url": "https://api.github.com/users/sgrif/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5d240b432b0f1a157a66249b296e0a246525688", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5d240b432b0f1a157a66249b296e0a246525688", "html_url": "https://github.com/rust-lang/rust/commit/f5d240b432b0f1a157a66249b296e0a246525688"}], "stats": {"total": 113, "additions": 26, "deletions": 87}, "files": [{"sha": "d60d449f6c29bcd10d7086c9d3f63960fcf6df7e", "filename": "src/librustc/infer/higher_ranked/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/04708ba60e79608956758513daa844ef14760c8b/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04708ba60e79608956758513daa844ef14760c8b/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=04708ba60e79608956758513daa844ef14760c8b", "patch": "@@ -62,7 +62,7 @@ impl<'a, 'gcx, 'tcx> CombineFields<'a, 'gcx, 'tcx> {\n             // Second, we instantiate each bound region in the supertype with a\n             // fresh concrete region.\n             let (b_prime, skol_map) =\n-                self.infcx.skolemize_late_bound_regions(b, snapshot);\n+                self.infcx.skolemize_late_bound_regions(b);\n \n             debug!(\"a_prime={:?}\", a_prime);\n             debug!(\"b_prime={:?}\", b_prime);\n@@ -587,14 +587,13 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     ///\n     /// [rustc guide]: https://rust-lang-nursery.github.io/rustc-guide/trait-hrtb.html\n     pub fn skolemize_late_bound_regions<T>(&self,\n-                                           binder: &ty::Binder<T>,\n-                                           snapshot: &CombinedSnapshot<'a, 'tcx>)\n+                                           binder: &ty::Binder<T>)\n                                            -> (T, SkolemizationMap<'tcx>)\n         where T : TypeFoldable<'tcx>\n     {\n         let (result, map) = self.tcx.replace_late_bound_regions(binder, |br| {\n-            self.borrow_region_constraints()\n-                .push_skolemized(self.tcx, br, &snapshot.region_constraints_snapshot)\n+            self.universe.set(self.universe().subuniverse());\n+            self.tcx.mk_region(ty::ReSkolemized(self.universe(), br))\n         });\n \n         debug!(\"skolemize_bound_regions(binder={:?}, result={:?}, map={:?})\",\n@@ -779,7 +778,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         debug!(\"pop_skolemized({:?})\", skol_map);\n         let skol_regions: FxHashSet<_> = skol_map.values().cloned().collect();\n         self.borrow_region_constraints()\n-            .pop_skolemized(self.tcx, &skol_regions, &snapshot.region_constraints_snapshot);\n+            .pop_skolemized(self.universe(), &skol_regions, &snapshot.region_constraints_snapshot);\n+        self.universe.set(snapshot.universe);\n         if !skol_map.is_empty() {\n             self.projection_cache.borrow_mut().rollback_skolemized(\n                 &snapshot.projection_cache_snapshot);"}, {"sha": "c62e7f8d9b6350a8a20350625a08c0b9f8039909", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/04708ba60e79608956758513daa844ef14760c8b/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04708ba60e79608956758513daa844ef14760c8b/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=04708ba60e79608956758513daa844ef14760c8b", "patch": "@@ -501,6 +501,7 @@ pub struct CombinedSnapshot<'a, 'tcx:'a> {\n     float_snapshot: ut::Snapshot<ut::InPlace<ty::FloatVid>>,\n     region_constraints_snapshot: RegionSnapshot,\n     region_obligations_snapshot: usize,\n+    universe: ty::UniverseIndex,\n     was_in_snapshot: bool,\n     _in_progress_tables: Option<Ref<'a, ty::TypeckTables<'tcx>>>,\n }\n@@ -630,6 +631,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             float_snapshot: self.float_unification_table.borrow_mut().snapshot(),\n             region_constraints_snapshot: self.borrow_region_constraints().start_snapshot(),\n             region_obligations_snapshot: self.region_obligations.borrow().len(),\n+            universe: self.universe(),\n             was_in_snapshot: in_snapshot,\n             // Borrow tables \"in progress\" (i.e. during typeck)\n             // to ban writes from within a snapshot to them.\n@@ -647,10 +649,12 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                float_snapshot,\n                                region_constraints_snapshot,\n                                region_obligations_snapshot,\n+                               universe,\n                                was_in_snapshot,\n                                _in_progress_tables } = snapshot;\n \n         self.in_snapshot.set(was_in_snapshot);\n+        self.universe.set(universe);\n \n         self.projection_cache\n             .borrow_mut()\n@@ -679,6 +683,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                float_snapshot,\n                                region_constraints_snapshot,\n                                region_obligations_snapshot: _,\n+                               universe: _,\n                                was_in_snapshot,\n                                _in_progress_tables } = snapshot;\n \n@@ -823,7 +828,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n         Some(self.commit_if_ok(|snapshot| {\n             let (ty::SubtypePredicate { a_is_expected, a, b}, skol_map) =\n-                self.skolemize_late_bound_regions(predicate, snapshot);\n+                self.skolemize_late_bound_regions(predicate);\n \n             let cause_span = cause.span;\n             let ok = self.at(cause, param_env).sub_exp(a_is_expected, a, b)?;\n@@ -840,7 +845,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     {\n         self.commit_if_ok(|snapshot| {\n             let (ty::OutlivesPredicate(r_a, r_b), skol_map) =\n-                self.skolemize_late_bound_regions(predicate, snapshot);\n+                self.skolemize_late_bound_regions(predicate);\n             let origin =\n                 SubregionOrigin::from_obligation_cause(cause,\n                                                        || RelateRegionParamBound(cause.span));"}, {"sha": "c388fa21371923ae3e23e3fd25c2bbf86c4e31e6", "filename": "src/librustc/infer/region_constraints/mod.rs", "status": "modified", "additions": 8, "deletions": 73, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/04708ba60e79608956758513daa844ef14760c8b/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04708ba60e79608956758513daa844ef14760c8b/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=04708ba60e79608956758513daa844ef14760c8b", "patch": "@@ -22,7 +22,7 @@ use rustc_data_structures::unify as ut;\n use ty::{self, Ty, TyCtxt};\n use ty::{Region, RegionVid};\n use ty::ReStatic;\n-use ty::{BrFresh, ReLateBound, ReSkolemized, ReVar};\n+use ty::{BrFresh, ReLateBound, ReVar};\n \n use std::collections::BTreeMap;\n use std::{cmp, fmt, mem, u32};\n@@ -45,9 +45,6 @@ pub struct RegionConstraintCollector<'tcx> {\n     /// exist). This prevents us from making many such regions.\n     glbs: CombineMap<'tcx>,\n \n-    /// Number of skolemized variables currently active.\n-    skolemization_count: ty::UniverseIndex,\n-\n     /// Global counter used during the GLB algorithm to create unique\n     /// names for fresh bound regions\n     bound_count: u32,\n@@ -237,7 +234,6 @@ pub struct RegionVariableInfo {\n pub struct RegionSnapshot {\n     length: usize,\n     region_snapshot: ut::Snapshot<ut::InPlace<ty::RegionVid>>,\n-    skolemization_count: ty::UniverseIndex,\n }\n \n /// When working with skolemized regions, we often wish to find all of\n@@ -281,7 +277,6 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n             data: RegionConstraintData::default(),\n             lubs: FxHashMap(),\n             glbs: FxHashMap(),\n-            skolemization_count: ty::UniverseIndex::ROOT,\n             bound_count: 0,\n             undo_log: Vec::new(),\n             unification_table: ut::UnificationTable::new(),\n@@ -327,14 +322,11 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n             data,\n             lubs,\n             glbs,\n-            skolemization_count,\n             bound_count: _,\n             undo_log: _,\n             unification_table,\n         } = self;\n \n-        assert_eq!(*skolemization_count, ty::UniverseIndex::ROOT);\n-\n         // Clear the tables of (lubs, glbs), so that we will create\n         // fresh regions if we do a LUB operation. As it happens,\n         // LUB/GLB are not performed by the MIR type-checker, which is\n@@ -369,20 +361,13 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n         RegionSnapshot {\n             length,\n             region_snapshot: self.unification_table.snapshot(),\n-            skolemization_count: self.skolemization_count,\n         }\n     }\n \n     pub fn commit(&mut self, snapshot: RegionSnapshot) {\n         debug!(\"RegionConstraintCollector: commit({})\", snapshot.length);\n         assert!(self.undo_log.len() > snapshot.length);\n         assert!(self.undo_log[snapshot.length] == OpenSnapshot);\n-        assert!(\n-            self.skolemization_count == snapshot.skolemization_count,\n-            \"failed to pop skolemized regions: {:?} now vs {:?} at start\",\n-            self.skolemization_count,\n-            snapshot.skolemization_count\n-        );\n \n         if snapshot.length == 0 {\n             self.undo_log.truncate(0);\n@@ -402,7 +387,6 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n         }\n         let c = self.undo_log.pop().unwrap();\n         assert!(c == OpenSnapshot);\n-        self.skolemization_count = snapshot.skolemization_count;\n         self.unification_table.rollback_to(snapshot.region_snapshot);\n     }\n \n@@ -469,48 +453,13 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n         self.var_infos[vid].origin\n     }\n \n-    /// Creates a new skolemized region. Skolemized regions are fresh\n-    /// regions used when performing higher-ranked computations. They\n-    /// must be used in a very particular way and are never supposed\n-    /// to \"escape\" out into error messages or the code at large.\n-    ///\n-    /// The idea is to always create a snapshot. Skolemized regions\n-    /// can be created in the context of this snapshot, but before the\n-    /// snapshot is committed or rolled back, they must be popped\n-    /// (using `pop_skolemized_regions`), so that their numbers can be\n-    /// recycled. Normally you don't have to think about this: you use\n-    /// the APIs in `higher_ranked/mod.rs`, such as\n-    /// `skolemize_late_bound_regions` and `plug_leaks`, which will\n-    /// guide you on this path (ensure that the `SkolemizationMap` is\n-    /// consumed and you are good). For more info on how skolemization\n-    /// for HRTBs works, see the [rustc guide].\n-    ///\n-    /// [rustc guide]: https://rust-lang-nursery.github.io/rustc-guide/trait-hrtb.html\n-    ///\n-    /// The `snapshot` argument to this function is not really used;\n-    /// it's just there to make it explicit which snapshot bounds the\n-    /// skolemized region that results. It should always be the top-most snapshot.\n-    pub fn push_skolemized(\n-        &mut self,\n-        tcx: TyCtxt<'_, '_, 'tcx>,\n-        br: ty::BoundRegion,\n-        snapshot: &RegionSnapshot,\n-    ) -> Region<'tcx> {\n-        assert!(self.in_snapshot());\n-        assert!(self.undo_log[snapshot.length] == OpenSnapshot);\n-\n-        let universe = self.skolemization_count.subuniverse();\n-        self.skolemization_count = universe;\n-        tcx.mk_region(ReSkolemized(universe, br))\n-    }\n-\n     /// Removes all the edges to/from the skolemized regions that are\n     /// in `skols`. This is used after a higher-ranked operation\n     /// completes to remove all trace of the skolemized regions\n     /// created in that time.\n     pub fn pop_skolemized(\n         &mut self,\n-        _tcx: TyCtxt<'_, '_, 'tcx>,\n+        skolemization_count: ty::UniverseIndex,\n         skols: &FxHashSet<ty::Region<'tcx>>,\n         snapshot: &RegionSnapshot,\n     ) {\n@@ -519,24 +468,16 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n         assert!(self.in_snapshot());\n         assert!(self.undo_log[snapshot.length] == OpenSnapshot);\n         assert!(\n-            self.skolemization_count.as_usize() >= skols.len(),\n+            skolemization_count.as_usize() >= skols.len(),\n             \"popping more skolemized variables than actually exist, \\\n              sc now = {:?}, skols.len = {:?}\",\n-            self.skolemization_count,\n+            skolemization_count,\n             skols.len()\n         );\n \n-        let last_to_pop = self.skolemization_count.subuniverse();\n+        let last_to_pop = skolemization_count.subuniverse();\n         let first_to_pop = ty::UniverseIndex::from(last_to_pop.as_u32() - skols.len() as u32);\n \n-        assert!(\n-            first_to_pop >= snapshot.skolemization_count,\n-            \"popping more regions than snapshot contains, \\\n-             sc now = {:?}, sc then = {:?}, skols.len = {:?}\",\n-            self.skolemization_count,\n-            snapshot.skolemization_count,\n-            skols.len()\n-        );\n         debug_assert! {\n             skols.iter()\n                  .all(|&k| match *k {\n@@ -547,8 +488,8 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n                          false\n                  }),\n             \"invalid skolemization keys or keys out of range ({:?}..{:?}): {:?}\",\n-            snapshot.skolemization_count,\n-            self.skolemization_count,\n+            first_to_pop,\n+            last_to_pop,\n             skols\n         }\n \n@@ -565,7 +506,6 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n             self.rollback_undo_entry(undo_entry);\n         }\n \n-        self.skolemization_count = snapshot.skolemization_count;\n         return;\n \n         fn kill_constraint<'tcx>(\n@@ -900,12 +840,7 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n \n impl fmt::Debug for RegionSnapshot {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(\n-            f,\n-            \"RegionSnapshot(length={},skolemization={:?})\",\n-            self.length,\n-            self.skolemization_count\n-        )\n+        write!(f, \"RegionSnapshot(length={})\", self.length)\n     }\n }\n "}, {"sha": "45fa588bbf5334f821beec5a26a839d722d28274", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04708ba60e79608956758513daa844ef14760c8b/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04708ba60e79608956758513daa844ef14760c8b/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=04708ba60e79608956758513daa844ef14760c8b", "patch": "@@ -188,7 +188,7 @@ pub fn poly_project_and_unify_type<'cx, 'gcx, 'tcx>(\n     let infcx = selcx.infcx();\n     infcx.commit_if_ok(|snapshot| {\n         let (skol_predicate, skol_map) =\n-            infcx.skolemize_late_bound_regions(&obligation.predicate, snapshot);\n+            infcx.skolemize_late_bound_regions(&obligation.predicate);\n \n         let skol_obligation = obligation.with(skol_predicate);\n         let r = match project_and_unify_type(selcx, &skol_obligation) {"}, {"sha": "54b2cf2808282fba665ed7f2ac777a088a59c458", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/04708ba60e79608956758513daa844ef14760c8b/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04708ba60e79608956758513daa844ef14760c8b/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=04708ba60e79608956758513daa844ef14760c8b", "patch": "@@ -1509,7 +1509,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         let poly_trait_predicate =\n             self.infcx().resolve_type_vars_if_possible(&obligation.predicate);\n         let (skol_trait_predicate, skol_map) =\n-            self.infcx().skolemize_late_bound_regions(&poly_trait_predicate, snapshot);\n+            self.infcx().skolemize_late_bound_regions(&poly_trait_predicate);\n         debug!(\"match_projection_obligation_against_definition_bounds: \\\n                 skol_trait_predicate={:?} skol_map={:?}\",\n                skol_trait_predicate,\n@@ -2338,7 +2338,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n \n             self.in_snapshot(|this, snapshot| {\n                 let (skol_ty, skol_map) =\n-                    this.infcx().skolemize_late_bound_regions(&ty, snapshot);\n+                    this.infcx().skolemize_late_bound_regions(&ty);\n                 let Normalized { value: normalized_ty, mut obligations } =\n                     project::normalize_with_depth(this,\n                                                   param_env,\n@@ -2559,7 +2559,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         let trait_obligations = self.in_snapshot(|this, snapshot| {\n             let poly_trait_ref = obligation.predicate.to_poly_trait_ref();\n             let (trait_ref, skol_map) =\n-                this.infcx().skolemize_late_bound_regions(&poly_trait_ref, snapshot);\n+                this.infcx().skolemize_late_bound_regions(&poly_trait_ref);\n             let cause = obligation.derived_cause(ImplDerivedObligation);\n             this.impl_or_trait_obligations(cause,\n                                            obligation.recursion_depth + 1,\n@@ -3142,8 +3142,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         }\n \n         let (skol_obligation, skol_map) = self.infcx().skolemize_late_bound_regions(\n-            &obligation.predicate,\n-            snapshot);\n+            &obligation.predicate);\n         let skol_obligation_trait_ref = skol_obligation.trait_ref;\n \n         let impl_substs = self.infcx.fresh_substs_for_item(obligation.cause.span,"}]}