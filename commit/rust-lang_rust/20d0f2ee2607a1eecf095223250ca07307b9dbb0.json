{"sha": "20d0f2ee2607a1eecf095223250ca07307b9dbb0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwZDBmMmVlMjYwN2ExZWVjZjA5NTIyMzI1MGNhMDczMDdiOWRiYjA=", "commit": {"author": {"name": "Smit Soni", "email": "atsmtat@gmail.com", "date": "2021-07-21T05:27:33Z"}, "committer": {"name": "Smit Soni", "email": "atsmtat@gmail.com", "date": "2021-07-24T18:54:55Z"}, "message": "Move shim argument checks before isolation check\n\nThis allows catching extremely incorrect arguments before rejecting\ndue to isolation.", "tree": {"sha": "dcb8b4b353dd433ae4f104d7be6f1f90cf6538b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dcb8b4b353dd433ae4f104d7be6f1f90cf6538b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20d0f2ee2607a1eecf095223250ca07307b9dbb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20d0f2ee2607a1eecf095223250ca07307b9dbb0", "html_url": "https://github.com/rust-lang/rust/commit/20d0f2ee2607a1eecf095223250ca07307b9dbb0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20d0f2ee2607a1eecf095223250ca07307b9dbb0/comments", "author": {"login": "atsmtat", "id": 25519955, "node_id": "MDQ6VXNlcjI1NTE5OTU1", "avatar_url": "https://avatars.githubusercontent.com/u/25519955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/atsmtat", "html_url": "https://github.com/atsmtat", "followers_url": "https://api.github.com/users/atsmtat/followers", "following_url": "https://api.github.com/users/atsmtat/following{/other_user}", "gists_url": "https://api.github.com/users/atsmtat/gists{/gist_id}", "starred_url": "https://api.github.com/users/atsmtat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/atsmtat/subscriptions", "organizations_url": "https://api.github.com/users/atsmtat/orgs", "repos_url": "https://api.github.com/users/atsmtat/repos", "events_url": "https://api.github.com/users/atsmtat/events{/privacy}", "received_events_url": "https://api.github.com/users/atsmtat/received_events", "type": "User", "site_admin": false}, "committer": {"login": "atsmtat", "id": 25519955, "node_id": "MDQ6VXNlcjI1NTE5OTU1", "avatar_url": "https://avatars.githubusercontent.com/u/25519955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/atsmtat", "html_url": "https://github.com/atsmtat", "followers_url": "https://api.github.com/users/atsmtat/followers", "following_url": "https://api.github.com/users/atsmtat/following{/other_user}", "gists_url": "https://api.github.com/users/atsmtat/gists{/gist_id}", "starred_url": "https://api.github.com/users/atsmtat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/atsmtat/subscriptions", "organizations_url": "https://api.github.com/users/atsmtat/orgs", "repos_url": "https://api.github.com/users/atsmtat/repos", "events_url": "https://api.github.com/users/atsmtat/events{/privacy}", "received_events_url": "https://api.github.com/users/atsmtat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da6880427ac6bf2735019e34448c43900a5fc6df", "url": "https://api.github.com/repos/rust-lang/rust/commits/da6880427ac6bf2735019e34448c43900a5fc6df", "html_url": "https://github.com/rust-lang/rust/commit/da6880427ac6bf2735019e34448c43900a5fc6df"}], "stats": {"total": 171, "additions": 85, "deletions": 86}, "files": [{"sha": "ac6e878da962e83e686d0efcf1b383f3a83d0186", "filename": "src/shims/posix/fs.rs", "status": "modified", "additions": 85, "deletions": 86, "changes": 171, "blob_url": "https://github.com/rust-lang/rust/blob/20d0f2ee2607a1eecf095223250ca07307b9dbb0/src%2Fshims%2Fposix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20d0f2ee2607a1eecf095223250ca07307b9dbb0/src%2Fshims%2Fposix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Ffs.rs?ref=20d0f2ee2607a1eecf095223250ca07307b9dbb0", "patch": "@@ -304,28 +304,6 @@ impl<'tcx> FileHandler {\n \n impl<'mir, 'tcx: 'mir> EvalContextExtPrivate<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n trait EvalContextExtPrivate<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n-    /// Emulate `stat` or `lstat` on `macos`. This function is not intended to be\n-    /// called directly from `emulate_foreign_item_by_name`, so it does not check if isolation is\n-    /// disabled or if the target OS is the correct one. Please use `macos_stat` or\n-    /// `macos_lstat` instead.\n-    fn macos_stat_or_lstat(\n-        &mut self,\n-        follow_symlink: bool,\n-        path_op: &OpTy<'tcx, Tag>,\n-        buf_op: &OpTy<'tcx, Tag>,\n-    ) -> InterpResult<'tcx, i32> {\n-        let this = self.eval_context_mut();\n-\n-        let path_scalar = this.read_pointer(path_op)?;\n-        let path = this.read_path_from_c_str(path_scalar)?.into_owned();\n-\n-        let metadata = match FileMetadata::from_path(this, &path, follow_symlink)? {\n-            Some(metadata) => metadata,\n-            None => return Ok(-1),\n-        };\n-        this.macos_stat_write_buf(metadata, buf_op)\n-    }\n-\n     fn macos_stat_write_buf(\n         &mut self,\n         metadata: FileMetadata,\n@@ -504,13 +482,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        // Reject if isolation is enabled.\n-        if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n-            this.reject_in_isolation(\"`open`\", reject_with)?;\n-            this.set_last_error_from_io_error(ErrorKind::PermissionDenied)?;\n-            return Ok(-1);\n-        }\n-\n         let flag = this.read_scalar(flag_op)?.to_i32()?;\n \n         // Get the mode.  On macOS, the argument type `mode_t` is actually `u16`, but\n@@ -588,6 +559,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         let path = this.read_path_from_c_str(this.read_pointer(path_op)?)?;\n \n+        // Reject if isolation is enabled.\n+        if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n+            this.reject_in_isolation(\"`open`\", reject_with)?;\n+            this.set_last_error_from_io_error(ErrorKind::PermissionDenied)?;\n+            return Ok(-1);\n+        }\n+\n         let fd = options.open(&path).map(|file| {\n             let fh = &mut this.machine.file_handler;\n             fh.insert_fd(Box::new(FileHandle { file, writable }))\n@@ -599,13 +577,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn fcntl(&mut self, args: &[OpTy<'tcx, Tag>]) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        // Reject if isolation is enabled.\n-        if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n-            this.reject_in_isolation(\"`fcntl`\", reject_with)?;\n-            this.set_last_error_from_io_error(ErrorKind::PermissionDenied)?;\n-            return Ok(-1);\n-        }\n-\n         if args.len() < 2 {\n             throw_ub_format!(\n                 \"incorrect number of arguments for fcntl: got {}, expected at least 2\",\n@@ -614,6 +585,14 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n         let fd = this.read_scalar(&args[0])?.to_i32()?;\n         let cmd = this.read_scalar(&args[1])?.to_i32()?;\n+\n+        // Reject if isolation is enabled.\n+        if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n+            this.reject_in_isolation(\"`fcntl`\", reject_with)?;\n+            this.set_last_error_from_io_error(ErrorKind::PermissionDenied)?;\n+            return Ok(-1);\n+        }\n+\n         // We only support getting the flags for a descriptor.\n         if cmd == this.eval_libc_i32(\"F_GETFD\")? {\n             // Currently this is the only flag that `F_GETFD` returns. It is OK to just return the\n@@ -795,15 +774,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn unlink(&mut self, path_op: &OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n+        let path = this.read_path_from_c_str(this.read_pointer(path_op)?)?;\n+\n         // Reject if isolation is enabled.\n         if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n             this.reject_in_isolation(\"`unlink`\", reject_with)?;\n             this.set_last_error_from_io_error(ErrorKind::PermissionDenied)?;\n             return Ok(-1);\n         }\n \n-        let path = this.read_path_from_c_str(this.read_pointer(path_op)?)?;\n-\n         let result = remove_file(path).map(|_| 0);\n         this.try_unwrap_io_result(result)\n     }\n@@ -825,6 +804,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n \n         let this = self.eval_context_mut();\n+        let target = this.read_path_from_c_str(this.read_pointer(target_op)?)?;\n+        let linkpath = this.read_path_from_c_str(this.read_pointer(linkpath_op)?)?;\n \n         // Reject if isolation is enabled.\n         if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n@@ -833,9 +814,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             return Ok(-1);\n         }\n \n-        let target = this.read_path_from_c_str(this.read_pointer(target_op)?)?;\n-        let linkpath = this.read_path_from_c_str(this.read_pointer(linkpath_op)?)?;\n-\n         let result = create_link(&target, &linkpath).map(|_| 0);\n         this.try_unwrap_io_result(result)\n     }\n@@ -848,6 +826,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_mut();\n         this.assert_target_os(\"macos\", \"stat\");\n \n+        let path_scalar = this.read_pointer(path_op)?;\n+        let path = this.read_path_from_c_str(path_scalar)?.into_owned();\n+\n         // Reject if isolation is enabled.\n         if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n             this.reject_in_isolation(\"`stat`\", reject_with)?;\n@@ -857,7 +838,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n \n         // `stat` always follows symlinks.\n-        this.macos_stat_or_lstat(true, path_op, buf_op)\n+        let metadata = match FileMetadata::from_path(this, &path, true)? {\n+            Some(metadata) => metadata,\n+            None => return Ok(-1),\n+        };\n+\n+        this.macos_stat_write_buf(metadata, buf_op)\n     }\n \n     // `lstat` is used to get symlink metadata.\n@@ -869,6 +855,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_mut();\n         this.assert_target_os(\"macos\", \"lstat\");\n \n+        let path_scalar = this.read_pointer(path_op)?;\n+        let path = this.read_path_from_c_str(path_scalar)?.into_owned();\n+\n         // Reject if isolation is enabled.\n         if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n             this.reject_in_isolation(\"`lstat`\", reject_with)?;\n@@ -877,7 +866,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             return Ok(-1);\n         }\n \n-        this.macos_stat_or_lstat(false, path_op, buf_op)\n+        let metadata = match FileMetadata::from_path(this, &path, false)? {\n+            Some(metadata) => metadata,\n+            None => return Ok(-1),\n+        };\n+\n+        this.macos_stat_write_buf(metadata, buf_op)\n     }\n \n     fn macos_fstat(\n@@ -889,15 +883,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         this.assert_target_os(\"macos\", \"fstat\");\n \n+        let fd = this.read_scalar(fd_op)?.to_i32()?;\n+\n         // Reject if isolation is enabled.\n         if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n             this.reject_in_isolation(\"`fstat`\", reject_with)?;\n             // Set error code as \"EBADF\" (bad fd)\n             return this.handle_not_found();\n         }\n \n-        let fd = this.read_scalar(fd_op)?.to_i32()?;\n-\n         let metadata = match FileMetadata::from_fd(this, fd)? {\n             Some(metadata) => metadata,\n             None => return Ok(-1),\n@@ -973,8 +967,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 // relative to CWD, `EACCES` is the most relevant.\n                 this.eval_libc(\"EACCES\")?\n             } else {\n-                // `dirfd` is set to target file, and `path` is\n-                // empty. `EACCES` would violate the spec.\n+                // `dirfd` is set to target file, and `path` is empty\n+                // (or we would have hit the `throw_unsup_format`\n+                // above). `EACCES` would violate the spec.\n+                assert!(empty_path_flag);\n                 this.eval_libc(\"EBADF\")?\n             };\n             this.set_last_error(ecode)?;\n@@ -1089,13 +1085,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        // Reject if isolation is enabled.\n-        if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n-            this.reject_in_isolation(\"`rename`\", reject_with)?;\n-            this.set_last_error_from_io_error(ErrorKind::PermissionDenied)?;\n-            return Ok(-1);\n-        }\n-\n         let oldpath_ptr = this.read_pointer(oldpath_op)?;\n         let newpath_ptr = this.read_pointer(newpath_op)?;\n \n@@ -1108,6 +1097,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let oldpath = this.read_path_from_c_str(oldpath_ptr)?;\n         let newpath = this.read_path_from_c_str(newpath_ptr)?;\n \n+        // Reject if isolation is enabled.\n+        if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n+            this.reject_in_isolation(\"`rename`\", reject_with)?;\n+            this.set_last_error_from_io_error(ErrorKind::PermissionDenied)?;\n+            return Ok(-1);\n+        }\n+\n         let result = rename(oldpath, newpath).map(|_| 0);\n \n         this.try_unwrap_io_result(result)\n@@ -1120,13 +1116,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        // Reject if isolation is enabled.\n-        if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n-            this.reject_in_isolation(\"`mkdir`\", reject_with)?;\n-            this.set_last_error_from_io_error(ErrorKind::PermissionDenied)?;\n-            return Ok(-1);\n-        }\n-\n         #[cfg_attr(not(unix), allow(unused_variables))]\n         let mode = if this.tcx.sess.target.os == \"macos\" {\n             u32::from(this.read_scalar(mode_op)?.to_u16()?)\n@@ -1136,6 +1125,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         let path = this.read_path_from_c_str(this.read_pointer(path_op)?)?;\n \n+        // Reject if isolation is enabled.\n+        if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n+            this.reject_in_isolation(\"`mkdir`\", reject_with)?;\n+            this.set_last_error_from_io_error(ErrorKind::PermissionDenied)?;\n+            return Ok(-1);\n+        }\n+\n         #[cfg_attr(not(unix), allow(unused_mut))]\n         let mut builder = DirBuilder::new();\n \n@@ -1155,15 +1151,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn rmdir(&mut self, path_op: &OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n+        let path = this.read_path_from_c_str(this.read_pointer(path_op)?)?;\n+\n         // Reject if isolation is enabled.\n         if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n             this.reject_in_isolation(\"`rmdir`\", reject_with)?;\n             this.set_last_error_from_io_error(ErrorKind::PermissionDenied)?;\n             return Ok(-1);\n         }\n \n-        let path = this.read_path_from_c_str(this.read_pointer(path_op)?)?;\n-\n         let result = remove_dir(path).map(|_| 0i32);\n \n         this.try_unwrap_io_result(result)\n@@ -1172,6 +1168,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn opendir(&mut self, name_op: &OpTy<'tcx, Tag>) -> InterpResult<'tcx, Scalar<Tag>> {\n         let this = self.eval_context_mut();\n \n+        let name = this.read_path_from_c_str(this.read_pointer(name_op)?)?;\n+\n         // Reject if isolation is enabled.\n         if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n             this.reject_in_isolation(\"`opendir`\", reject_with)?;\n@@ -1180,8 +1178,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             return Ok(Scalar::null_ptr(this));\n         }\n \n-        let name = this.read_path_from_c_str(this.read_pointer(name_op)?)?;\n-\n         let result = read_dir(name);\n \n         match result {\n@@ -1210,15 +1206,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         this.assert_target_os(\"linux\", \"readdir64_r\");\n \n+        let dirp = this.read_scalar(dirp_op)?.to_machine_usize(this)?;\n+\n         // Reject if isolation is enabled.\n         if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n             this.reject_in_isolation(\"`readdir64_r`\", reject_with)?;\n             // Set error code as \"EBADF\" (bad fd)\n             return this.handle_not_found();\n         }\n \n-        let dirp = this.read_scalar(dirp_op)?.to_machine_usize(this)?;\n-\n         let dir_iter = this.machine.dir_handler.streams.get_mut(&dirp).ok_or_else(|| {\n             err_unsup_format!(\"the DIR pointer passed to readdir64_r did not come from opendir\")\n         })?;\n@@ -1309,15 +1305,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         this.assert_target_os(\"macos\", \"readdir_r\");\n \n+        let dirp = this.read_scalar(dirp_op)?.to_machine_usize(this)?;\n+\n         // Reject if isolation is enabled.\n         if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n             this.reject_in_isolation(\"`readdir_r`\", reject_with)?;\n             // Set error code as \"EBADF\" (bad fd)\n             return this.handle_not_found();\n         }\n \n-        let dirp = this.read_scalar(dirp_op)?.to_machine_usize(this)?;\n-\n         let dir_iter = this.machine.dir_handler.streams.get_mut(&dirp).ok_or_else(|| {\n             err_unsup_format!(\"the DIR pointer passed to readdir_r did not come from opendir\")\n         })?;\n@@ -1403,15 +1399,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn closedir(&mut self, dirp_op: &OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n+        let dirp = this.read_scalar(dirp_op)?.to_machine_usize(this)?;\n+\n         // Reject if isolation is enabled.\n         if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n             this.reject_in_isolation(\"`closedir`\", reject_with)?;\n             // Set error code as \"EBADF\" (bad fd)\n             return this.handle_not_found();\n         }\n \n-        let dirp = this.read_scalar(dirp_op)?.to_machine_usize(this)?;\n-\n         if let Some(dir_iter) = this.machine.dir_handler.streams.remove(&dirp) {\n             drop(dir_iter);\n             Ok(0)\n@@ -1427,15 +1423,16 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n+        let fd = this.read_scalar(fd_op)?.to_i32()?;\n+        let length = this.read_scalar(length_op)?.to_i64()?;\n+\n         // Reject if isolation is enabled.\n         if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n             this.reject_in_isolation(\"`ftruncate64`\", reject_with)?;\n             // Set error code as \"EBADF\" (bad fd)\n             return this.handle_not_found();\n         }\n \n-        let fd = this.read_scalar(fd_op)?.to_i32()?;\n-        let length = this.read_scalar(length_op)?.to_i64()?;\n         if let Some(file_descriptor) = this.machine.file_handler.handles.get_mut(&fd) {\n             // FIXME: Support ftruncate64 for all FDs\n             let FileHandle { file, writable } = file_descriptor.as_file_handle()?;\n@@ -1467,14 +1464,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         let this = self.eval_context_mut();\n \n+        let fd = this.read_scalar(fd_op)?.to_i32()?;\n+\n         // Reject if isolation is enabled.\n         if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n             this.reject_in_isolation(\"`fsync`\", reject_with)?;\n             // Set error code as \"EBADF\" (bad fd)\n             return this.handle_not_found();\n         }\n \n-        let fd = this.read_scalar(fd_op)?.to_i32()?;\n         if let Some(file_descriptor) = this.machine.file_handler.handles.get(&fd) {\n             // FIXME: Support fsync for all FDs\n             let FileHandle { file, writable } = file_descriptor.as_file_handle()?;\n@@ -1488,14 +1486,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn fdatasync(&mut self, fd_op: &OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n+        let fd = this.read_scalar(fd_op)?.to_i32()?;\n+\n         // Reject if isolation is enabled.\n         if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n             this.reject_in_isolation(\"`fdatasync`\", reject_with)?;\n             // Set error code as \"EBADF\" (bad fd)\n             return this.handle_not_found();\n         }\n \n-        let fd = this.read_scalar(fd_op)?.to_i32()?;\n         if let Some(file_descriptor) = this.machine.file_handler.handles.get(&fd) {\n             // FIXME: Support fdatasync for all FDs\n             let FileHandle { file, writable } = file_descriptor.as_file_handle()?;\n@@ -1515,13 +1514,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        // Reject if isolation is enabled.\n-        if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n-            this.reject_in_isolation(\"`sync_file_range`\", reject_with)?;\n-            // Set error code as \"EBADF\" (bad fd)\n-            return this.handle_not_found();\n-        }\n-\n         let fd = this.read_scalar(fd_op)?.to_i32()?;\n         let offset = this.read_scalar(offset_op)?.to_i64()?;\n         let nbytes = this.read_scalar(nbytes_op)?.to_i64()?;\n@@ -1541,6 +1533,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             return Ok(-1);\n         }\n \n+        // Reject if isolation is enabled.\n+        if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n+            this.reject_in_isolation(\"`sync_file_range`\", reject_with)?;\n+            // Set error code as \"EBADF\" (bad fd)\n+            return this.handle_not_found();\n+        }\n+\n         if let Some(file_descriptor) = this.machine.file_handler.handles.get(&fd) {\n             // FIXME: Support sync_data_range for all FDs\n             let FileHandle { file, writable } = file_descriptor.as_file_handle()?;\n@@ -1559,6 +1558,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, i64> {\n         let this = self.eval_context_mut();\n \n+        let pathname = this.read_path_from_c_str(this.read_pointer(pathname_op)?)?;\n+        let buf = this.read_pointer(buf_op)?;\n+        let bufsize = this.read_scalar(bufsize_op)?.to_machine_usize(this)?;\n+\n         // Reject if isolation is enabled.\n         if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n             this.reject_in_isolation(\"`readlink`\", reject_with)?;\n@@ -1567,10 +1570,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             return Ok(-1);\n         }\n \n-        let pathname = this.read_path_from_c_str(this.read_pointer(pathname_op)?)?;\n-        let buf = this.read_pointer(buf_op)?;\n-        let bufsize = this.read_scalar(bufsize_op)?.to_machine_usize(this)?;\n-\n         let result = std::fs::read_link(pathname);\n         match result {\n             Ok(resolved) => {"}]}