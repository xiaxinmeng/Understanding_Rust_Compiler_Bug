{"sha": "b29a60226bc1db6f047b3e3c06ac6aceb65cadb6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyOWE2MDIyNmJjMWRiNmYwNDdiM2UzYzA2YWM2YWNlYjY1Y2FkYjY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-08-26T17:51:03Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-08-26T17:51:03Z"}, "message": "Merge pull request #242 from Manishearth/autolink\n\nAdded automatic links to wiki for all lints.", "tree": {"sha": "47e73da537768ba9088976143450c35253c5f82f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47e73da537768ba9088976143450c35253c5f82f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b29a60226bc1db6f047b3e3c06ac6aceb65cadb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b29a60226bc1db6f047b3e3c06ac6aceb65cadb6", "html_url": "https://github.com/rust-lang/rust/commit/b29a60226bc1db6f047b3e3c06ac6aceb65cadb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b29a60226bc1db6f047b3e3c06ac6aceb65cadb6/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "297d09906de2d437d66297c5d0f2703cc4964c17", "url": "https://api.github.com/repos/rust-lang/rust/commits/297d09906de2d437d66297c5d0f2703cc4964c17", "html_url": "https://github.com/rust-lang/rust/commit/297d09906de2d437d66297c5d0f2703cc4964c17"}, {"sha": "9461a480bd2c48bad8f50a3835d411da30c8b45a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9461a480bd2c48bad8f50a3835d411da30c8b45a", "html_url": "https://github.com/rust-lang/rust/commit/9461a480bd2c48bad8f50a3835d411da30c8b45a"}], "stats": {"total": 108, "additions": 56, "deletions": 52}, "files": [{"sha": "012b81c1d19e75fec78737b0c6ea6f9098546c5c", "filename": "README.md", "status": "modified", "additions": 50, "deletions": 50, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/b29a60226bc1db6f047b3e3c06ac6aceb65cadb6/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/b29a60226bc1db6f047b3e3c06ac6aceb65cadb6/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=b29a60226bc1db6f047b3e3c06ac6aceb65cadb6", "patch": "@@ -6,56 +6,56 @@ A collection of lints that give helpful tips to newbies and catch oversights.\n ##Lints\n There are 48 lints included in this crate:\n \n-name                     | default | meaning\n--------------------------|---------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n-approx_constant          | warn    | the approximate of a known float constant (in `std::f64::consts` or `std::f32::consts`) is found; suggests to use the constant\n-bad_bit_mask             | deny    | expressions of the form `_ & mask == select` that will only ever return `true` or `false` (because in the example `select` containing bits that `mask` doesn't have)\n-box_vec                  | warn    | usage of `Box<Vec<T>>`, vector elements are already on the heap\n-cast_possible_truncation | allow   | casts that may cause truncation of the value, e.g `x as u8` where `x: u32`, or `x as i32` where `x: f32`\n-cast_possible_wrap       | allow   | casts that may cause wrapping around the value, e.g `x as i32` where `x: u32` and `x > i32::MAX`\n-cast_precision_loss      | allow   | casts that cause loss of precision, e.g `x as f32` where `x: u64`\n-cast_sign_loss           | allow   | casts from signed types to unsigned types, e.g `x as u32` where `x: i32`\n-cmp_nan                  | deny    | comparisons to NAN (which will always return false, which is probably not intended)\n-cmp_owned                | warn    | creating owned instances for comparing with others, e.g. `x == \"foo\".to_string()`\n-collapsible_if           | warn    | two nested `if`-expressions can be collapsed into one, e.g. `if x { if y { foo() } }` can be written as `if x && y { foo() }`\n-eq_op                    | warn    | equal operands on both sides of a comparison or bitwise combination (e.g. `x == x`)\n-explicit_iter_loop       | warn    | for-looping over `_.iter()` or `_.iter_mut()` when `&_` or `&mut _` would do\n-float_cmp                | warn    | using `==` or `!=` on float values (as floating-point operations usually involve rounding errors, it is always better to check for approximate equality within small bounds)\n-identity_op              | warn    | using identity operations, e.g. `x + 0` or `y / 1`\n-ineffective_bit_mask     | warn    | expressions where a bit mask will be rendered useless by a comparison, e.g. `(x | 1) > 2`\n-inline_always            | warn    | `#[inline(always)]` is a bad idea in most cases\n-iter_next_loop           | warn    | for-looping over `_.next()` which is probably not intended\n-len_without_is_empty     | warn    | traits and impls that have `.len()` but not `.is_empty()`\n-len_zero                 | warn    | checking `.len() == 0` or `.len() > 0` (or similar) when `.is_empty()` could be used instead\n-let_and_return           | warn    | creating a let-binding and then immediately returning it like `let x = expr; x` at the end of a function\n-let_unit_value           | warn    | creating a let binding to a value of unit type, which usually can't be used afterwards\n-linkedlist               | warn    | usage of LinkedList, usually a vector is faster, or a more specialized data structure like a RingBuf\n-match_ref_pats           | warn    | a match has all arms prefixed with `&`; the match expression can be dereferenced instead\n-modulo_one               | warn    | taking a number modulo 1, which always returns 0\n-mut_mut                  | warn    | usage of double-mut refs, e.g. `&mut &mut ...` (either copy'n'paste error, or shows a fundamental misunderstanding of references)\n-needless_bool            | warn    | if-statements with plain booleans in the then- and else-clause, e.g. `if p { true } else { false }`\n-needless_lifetimes       | warn    | using explicit lifetimes for references in function arguments when elision rules would allow omitting them\n-needless_range_loop      | warn    | for-looping over a range of indices where an iterator over items would do\n-needless_return          | warn    | using a return statement like `return expr;` where an expression would suffice\n-non_ascii_literal        | allow   | using any literal non-ASCII chars in a string literal; suggests using the \\\\u escape instead\n-option_unwrap_used       | allow   | using `Option.unwrap()`, which should at least get a better message using `expect()`\n-precedence               | warn    | expressions where precedence may trip up the unwary reader of the source; suggests adding parentheses, e.g. `x << 2 + y` will be parsed as `x << (2 + y)`\n-ptr_arg                  | allow   | fn arguments of the type `&Vec<...>` or `&String`, suggesting to use `&[...]` or `&str` instead, respectively\n-range_step_by_zero       | warn    | using Range::step_by(0), which produces an infinite iterator\n-redundant_closure        | warn    | using redundant closures, i.e. `|a| foo(a)` (which can be written as just `foo`)\n-result_unwrap_used       | allow   | using `Result.unwrap()`, which might be better handled\n-shadow_reuse             | allow   | rebinding a name to an expression that re-uses the original value, e.g. `let x = x + 1`\n-shadow_same              | allow   | rebinding a name to itself, e.g. `let mut x = &mut x`\n-shadow_unrelated         | warn    | The name is re-bound without even using the original value\n-single_match             | warn    | a match statement with a single nontrivial arm (i.e, where the other arm is `_ => {}`) is used; recommends `if let` instead\n-str_to_string            | warn    | using `to_string()` on a str, which should be `to_owned()`\n-string_add               | allow   | using `x + ..` where x is a `String`; suggests using `push_str()` instead\n-string_add_assign        | allow   | using `x = x + ..` where x is a `String`; suggests using `push_str()` instead\n-string_to_string         | warn    | calling `String.to_string()` which is a no-op\n-toplevel_ref_arg         | warn    | a function argument is declared `ref` (i.e. `fn foo(ref x: u8)`, but not `fn foo((ref x, ref y): (u8, u8))`)\n-type_complexity          | warn    | usage of very complex types; recommends factoring out parts into `type` definitions\n-unit_cmp                 | warn    | comparing unit values (which is always `true` or `false`, respectively)\n-zero_width_space         | deny    | using a zero-width space in a string literal, which is confusing\n+name                                                                                                 | default | meaning\n+-----------------------------------------------------------------------------------------------------|---------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n+[approx_constant](https://github.com/Manishearth/rust-clippy/wiki#approx_constant)                   | warn    | the approximate of a known float constant (in `std::f64::consts` or `std::f32::consts`) is found; suggests to use the constant\n+[bad_bit_mask](https://github.com/Manishearth/rust-clippy/wiki#bad_bit_mask)                         | deny    | expressions of the form `_ & mask == select` that will only ever return `true` or `false` (because in the example `select` containing bits that `mask` doesn't have)\n+[box_vec](https://github.com/Manishearth/rust-clippy/wiki#box_vec)                                   | warn    | usage of `Box<Vec<T>>`, vector elements are already on the heap\n+[cast_possible_truncation](https://github.com/Manishearth/rust-clippy/wiki#cast_possible_truncation) | allow   | casts that may cause truncation of the value, e.g `x as u8` where `x: u32`, or `x as i32` where `x: f32`\n+[cast_possible_wrap](https://github.com/Manishearth/rust-clippy/wiki#cast_possible_wrap)             | allow   | casts that may cause wrapping around the value, e.g `x as i32` where `x: u32` and `x > i32::MAX`\n+[cast_precision_loss](https://github.com/Manishearth/rust-clippy/wiki#cast_precision_loss)           | allow   | casts that cause loss of precision, e.g `x as f32` where `x: u64`\n+[cast_sign_loss](https://github.com/Manishearth/rust-clippy/wiki#cast_sign_loss)                     | allow   | casts from signed types to unsigned types, e.g `x as u32` where `x: i32`\n+[cmp_nan](https://github.com/Manishearth/rust-clippy/wiki#cmp_nan)                                   | deny    | comparisons to NAN (which will always return false, which is probably not intended)\n+[cmp_owned](https://github.com/Manishearth/rust-clippy/wiki#cmp_owned)                               | warn    | creating owned instances for comparing with others, e.g. `x == \"foo\".to_string()`\n+[collapsible_if](https://github.com/Manishearth/rust-clippy/wiki#collapsible_if)                     | warn    | two nested `if`-expressions can be collapsed into one, e.g. `if x { if y { foo() } }` can be written as `if x && y { foo() }`\n+[eq_op](https://github.com/Manishearth/rust-clippy/wiki#eq_op)                                       | warn    | equal operands on both sides of a comparison or bitwise combination (e.g. `x == x`)\n+[explicit_iter_loop](https://github.com/Manishearth/rust-clippy/wiki#explicit_iter_loop)             | warn    | for-looping over `_.iter()` or `_.iter_mut()` when `&_` or `&mut _` would do\n+[float_cmp](https://github.com/Manishearth/rust-clippy/wiki#float_cmp)                               | warn    | using `==` or `!=` on float values (as floating-point operations usually involve rounding errors, it is always better to check for approximate equality within small bounds)\n+[identity_op](https://github.com/Manishearth/rust-clippy/wiki#identity_op)                           | warn    | using identity operations, e.g. `x + 0` or `y / 1`\n+[ineffective_bit_mask](https://github.com/Manishearth/rust-clippy/wiki#ineffective_bit_mask)         | warn    | expressions where a bit mask will be rendered useless by a comparison, e.g. `(x | 1) > 2`\n+[inline_always](https://github.com/Manishearth/rust-clippy/wiki#inline_always)                       | warn    | `#[inline(always)]` is a bad idea in most cases\n+[iter_next_loop](https://github.com/Manishearth/rust-clippy/wiki#iter_next_loop)                     | warn    | for-looping over `_.next()` which is probably not intended\n+[len_without_is_empty](https://github.com/Manishearth/rust-clippy/wiki#len_without_is_empty)         | warn    | traits and impls that have `.len()` but not `.is_empty()`\n+[len_zero](https://github.com/Manishearth/rust-clippy/wiki#len_zero)                                 | warn    | checking `.len() == 0` or `.len() > 0` (or similar) when `.is_empty()` could be used instead\n+[let_and_return](https://github.com/Manishearth/rust-clippy/wiki#let_and_return)                     | warn    | creating a let-binding and then immediately returning it like `let x = expr; x` at the end of a function\n+[let_unit_value](https://github.com/Manishearth/rust-clippy/wiki#let_unit_value)                     | warn    | creating a let binding to a value of unit type, which usually can't be used afterwards\n+[linkedlist](https://github.com/Manishearth/rust-clippy/wiki#linkedlist)                             | warn    | usage of LinkedList, usually a vector is faster, or a more specialized data structure like a RingBuf\n+[match_ref_pats](https://github.com/Manishearth/rust-clippy/wiki#match_ref_pats)                     | warn    | a match has all arms prefixed with `&`; the match expression can be dereferenced instead\n+[modulo_one](https://github.com/Manishearth/rust-clippy/wiki#modulo_one)                             | warn    | taking a number modulo 1, which always returns 0\n+[mut_mut](https://github.com/Manishearth/rust-clippy/wiki#mut_mut)                                   | warn    | usage of double-mut refs, e.g. `&mut &mut ...` (either copy'n'paste error, or shows a fundamental misunderstanding of references)\n+[needless_bool](https://github.com/Manishearth/rust-clippy/wiki#needless_bool)                       | warn    | if-statements with plain booleans in the then- and else-clause, e.g. `if p { true } else { false }`\n+[needless_lifetimes](https://github.com/Manishearth/rust-clippy/wiki#needless_lifetimes)             | warn    | using explicit lifetimes for references in function arguments when elision rules would allow omitting them\n+[needless_range_loop](https://github.com/Manishearth/rust-clippy/wiki#needless_range_loop)           | warn    | for-looping over a range of indices where an iterator over items would do\n+[needless_return](https://github.com/Manishearth/rust-clippy/wiki#needless_return)                   | warn    | using a return statement like `return expr;` where an expression would suffice\n+[non_ascii_literal](https://github.com/Manishearth/rust-clippy/wiki#non_ascii_literal)               | allow   | using any literal non-ASCII chars in a string literal; suggests using the \\\\u escape instead\n+[option_unwrap_used](https://github.com/Manishearth/rust-clippy/wiki#option_unwrap_used)             | allow   | using `Option.unwrap()`, which should at least get a better message using `expect()`\n+[precedence](https://github.com/Manishearth/rust-clippy/wiki#precedence)                             | warn    | expressions where precedence may trip up the unwary reader of the source; suggests adding parentheses, e.g. `x << 2 + y` will be parsed as `x << (2 + y)`\n+[ptr_arg](https://github.com/Manishearth/rust-clippy/wiki#ptr_arg)                                   | allow   | fn arguments of the type `&Vec<...>` or `&String`, suggesting to use `&[...]` or `&str` instead, respectively\n+[range_step_by_zero](https://github.com/Manishearth/rust-clippy/wiki#range_step_by_zero)             | warn    | using Range::step_by(0), which produces an infinite iterator\n+[redundant_closure](https://github.com/Manishearth/rust-clippy/wiki#redundant_closure)               | warn    | using redundant closures, i.e. `|a| foo(a)` (which can be written as just `foo`)\n+[result_unwrap_used](https://github.com/Manishearth/rust-clippy/wiki#result_unwrap_used)             | allow   | using `Result.unwrap()`, which might be better handled\n+[shadow_reuse](https://github.com/Manishearth/rust-clippy/wiki#shadow_reuse)                         | allow   | rebinding a name to an expression that re-uses the original value, e.g. `let x = x + 1`\n+[shadow_same](https://github.com/Manishearth/rust-clippy/wiki#shadow_same)                           | allow   | rebinding a name to itself, e.g. `let mut x = &mut x`\n+[shadow_unrelated](https://github.com/Manishearth/rust-clippy/wiki#shadow_unrelated)                 | warn    | The name is re-bound without even using the original value\n+[single_match](https://github.com/Manishearth/rust-clippy/wiki#single_match)                         | warn    | a match statement with a single nontrivial arm (i.e, where the other arm is `_ => {}`) is used; recommends `if let` instead\n+[str_to_string](https://github.com/Manishearth/rust-clippy/wiki#str_to_string)                       | warn    | using `to_string()` on a str, which should be `to_owned()`\n+[string_add](https://github.com/Manishearth/rust-clippy/wiki#string_add)                             | allow   | using `x + ..` where x is a `String`; suggests using `push_str()` instead\n+[string_add_assign](https://github.com/Manishearth/rust-clippy/wiki#string_add_assign)               | allow   | using `x = x + ..` where x is a `String`; suggests using `push_str()` instead\n+[string_to_string](https://github.com/Manishearth/rust-clippy/wiki#string_to_string)                 | warn    | calling `String.to_string()` which is a no-op\n+[toplevel_ref_arg](https://github.com/Manishearth/rust-clippy/wiki#toplevel_ref_arg)                 | warn    | a function argument is declared `ref` (i.e. `fn foo(ref x: u8)`, but not `fn foo((ref x, ref y): (u8, u8))`)\n+[type_complexity](https://github.com/Manishearth/rust-clippy/wiki#type_complexity)                   | warn    | usage of very complex types; recommends factoring out parts into `type` definitions\n+[unit_cmp](https://github.com/Manishearth/rust-clippy/wiki#unit_cmp)                                 | warn    | comparing unit values (which is always `true` or `false`, respectively)\n+[zero_width_space](https://github.com/Manishearth/rust-clippy/wiki#zero_width_space)                 | deny    | using a zero-width space in a string literal, which is confusing\n \n More to come, please [file an issue](https://github.com/Manishearth/rust-clippy/issues) if you have ideas!\n "}, {"sha": "8c00f1b4f13b19d5703d840433632c0c0e53f214", "filename": "util/update_lints.py", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b29a60226bc1db6f047b3e3c06ac6aceb65cadb6/util%2Fupdate_lints.py", "raw_url": "https://github.com/rust-lang/rust/raw/b29a60226bc1db6f047b3e3c06ac6aceb65cadb6/util%2Fupdate_lints.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fupdate_lints.py?ref=b29a60226bc1db6f047b3e3c06ac6aceb65cadb6", "patch": "@@ -16,6 +16,7 @@\n \n nl_escape_re = re.compile(r'\\\\\\n\\s*')\n \n+wiki_link = 'https://github.com/Manishearth/rust-clippy/wiki'\n \n def collect(lints, fn):\n     \"\"\"Collect all lints from a file.\n@@ -33,8 +34,11 @@ def collect(lints, fn):\n                       desc.replace('\\\\\"', '\"')))\n \n \n-def gen_table(lints):\n+def gen_table(lints, link=None):\n     \"\"\"Write lint table in Markdown format.\"\"\"\n+    if link:\n+        lints = [(p, '[%s](%s#%s)' % (l, link, l), lvl, d)\n+                    for (p, l, lvl, d) in lints]\n     # first and third column widths\n     w_name = max(len(l[1]) for l in lints)\n     w_desc = max(len(l[3]) for l in lints)\n@@ -110,7 +114,7 @@ def main(print_only=False, check=False):\n \n     # replace table in README.md\n     changed = replace_region('README.md', r'^name +\\|', '^$',\n-                             lambda: gen_table(lints),\n+                             lambda: gen_table(lints, link=wiki_link),\n                              write_back=not check)\n \n     changed |= replace_region('README.md',"}]}