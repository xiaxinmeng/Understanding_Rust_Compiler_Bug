{"sha": "3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmNjJmYzNhN2UyNTM5ZTZiZmVjY2JmMWNjZTM2ZWQ4M2U4YWIxOGE=", "commit": {"author": {"name": "Konrad Borowski", "email": "konrad@borowski.pw", "date": "2018-12-29T15:04:45Z"}, "committer": {"name": "Konrad Borowski", "email": "konrad@borowski.pw", "date": "2018-12-29T15:05:49Z"}, "message": "Remove crate:: prefixes from crate paths\n\nThis is somewhat misleading, as those are actually external crates,\nand don't need a crate:: prefix.", "tree": {"sha": "4ca2a10fe26735f2c10e4698d60005d8007f5e1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ca2a10fe26735f2c10e4698d60005d8007f5e1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "html_url": "https://github.com/rust-lang/rust/commit/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/comments", "author": {"login": "xfix", "id": 1297598, "node_id": "MDQ6VXNlcjEyOTc1OTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1297598?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xfix", "html_url": "https://github.com/xfix", "followers_url": "https://api.github.com/users/xfix/followers", "following_url": "https://api.github.com/users/xfix/following{/other_user}", "gists_url": "https://api.github.com/users/xfix/gists{/gist_id}", "starred_url": "https://api.github.com/users/xfix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xfix/subscriptions", "organizations_url": "https://api.github.com/users/xfix/orgs", "repos_url": "https://api.github.com/users/xfix/repos", "events_url": "https://api.github.com/users/xfix/events{/privacy}", "received_events_url": "https://api.github.com/users/xfix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xfix", "id": 1297598, "node_id": "MDQ6VXNlcjEyOTc1OTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1297598?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xfix", "html_url": "https://github.com/xfix", "followers_url": "https://api.github.com/users/xfix/followers", "following_url": "https://api.github.com/users/xfix/following{/other_user}", "gists_url": "https://api.github.com/users/xfix/gists{/gist_id}", "starred_url": "https://api.github.com/users/xfix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xfix/subscriptions", "organizations_url": "https://api.github.com/users/xfix/orgs", "repos_url": "https://api.github.com/users/xfix/repos", "events_url": "https://api.github.com/users/xfix/events{/privacy}", "received_events_url": "https://api.github.com/users/xfix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c93702495e148f61c1a6ce19fab76eca00f41f76", "url": "https://api.github.com/repos/rust-lang/rust/commits/c93702495e148f61c1a6ce19fab76eca00f41f76", "html_url": "https://github.com/rust-lang/rust/commit/c93702495e148f61c1a6ce19fab76eca00f41f76"}], "stats": {"total": 1606, "additions": 803, "deletions": 803}, "files": [{"sha": "4d502a6d0939338d896461bb4652016ed5258586", "filename": "clippy_lints/src/approx_const.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fapprox_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fapprox_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fapprox_const.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,13 +7,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::syntax::ast::{FloatTy, Lit, LitKind};\n-use crate::syntax::symbol;\n use crate::utils::span_lint;\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n use std::f64::consts as f64;\n+use syntax::ast::{FloatTy, Lit, LitKind};\n+use syntax::symbol;\n \n /// **What it does:** Checks for floating point literals that approximate\n /// constants which are defined in"}, {"sha": "51d17b388826837d1d50c2e8e4477d5fa9f583f2", "filename": "clippy_lints/src/arithmetic.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Farithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Farithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Farithmetic.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,11 +7,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::syntax::source_map::Span;\n use crate::utils::span_lint;\n+use rustc::hir;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use syntax::source_map::Span;\n \n /// **What it does:** Checks for plain integer arithmetic.\n ///"}, {"sha": "a595050d0c0f363079f8e9e1efbc476addaf5664", "filename": "clippy_lints/src/assign_ops.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassign_ops.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,15 +7,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir;\n-use crate::rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_errors::Applicability;\n-use crate::syntax::ast;\n use crate::utils::{get_trait_def_id, implements_trait, snippet_opt, span_lint_and_then, SpanlessEq};\n use crate::utils::{higher, sugg};\n use if_chain::if_chain;\n+use rustc::hir;\n+use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_errors::Applicability;\n+use syntax::ast;\n \n /// **What it does:** Checks for `a = a op b` or `a = b commutative_op a`\n /// patterns.\n@@ -240,7 +240,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssignOps {\n }\n \n fn is_commutative(op: hir::BinOpKind) -> bool {\n-    use crate::rustc::hir::BinOpKind::*;\n+    use rustc::hir::BinOpKind::*;\n     match op {\n         Add | Mul | And | Or | BitXor | BitAnd | BitOr | Eq | Ne => true,\n         Sub | Div | Rem | Shl | Shr | Lt | Le | Ge | Gt => false,"}, {"sha": "08333994fa6c555c956478266e57cae8b7aafaaa", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -10,21 +10,21 @@\n //! checks for attributes\n \n use crate::reexport::*;\n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{\n-    CheckLintNameResult, EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintArray, LintContext, LintPass,\n-};\n-use crate::rustc::ty::{self, TyCtxt};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_errors::Applicability;\n-use crate::syntax::ast::{AttrStyle, Attribute, Lit, LitKind, MetaItemKind, NestedMetaItem, NestedMetaItemKind};\n-use crate::syntax::source_map::Span;\n use crate::utils::{\n     in_macro, last_line_of_span, match_def_path, opt_def_id, paths, snippet_opt, span_lint, span_lint_and_sugg,\n     span_lint_and_then, without_block_comments,\n };\n use if_chain::if_chain;\n+use rustc::hir::*;\n+use rustc::lint::{\n+    CheckLintNameResult, EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintArray, LintContext, LintPass,\n+};\n+use rustc::ty::{self, TyCtxt};\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_errors::Applicability;\n use semver::Version;\n+use syntax::ast::{AttrStyle, Attribute, Lit, LitKind, MetaItemKind, NestedMetaItem, NestedMetaItemKind};\n+use syntax::source_map::Span;\n \n /// **What it does:** Checks for items annotated with `#[inline(always)]`,\n /// unless the annotated function is empty or simply panics."}, {"sha": "abdd624146c7573e49b492902eb0255cc9514654", "filename": "clippy_lints/src/bit_mask.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbit_mask.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -8,15 +8,15 @@\n // except according to those terms.\n \n use crate::consts::{constant, Constant};\n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_errors::Applicability;\n-use crate::syntax::ast::LitKind;\n-use crate::syntax::source_map::Span;\n use crate::utils::sugg::Sugg;\n use crate::utils::{span_lint, span_lint_and_then};\n use if_chain::if_chain;\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_errors::Applicability;\n+use syntax::ast::LitKind;\n+use syntax::source_map::Span;\n \n /// **What it does:** Checks for incompatible bit masks in comparisons.\n ///"}, {"sha": "ce7da4194971226438db8d2512eaf9a3cdd703de", "filename": "clippy_lints/src/blacklisted_name.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fblacklisted_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fblacklisted_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblacklisted_name.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,10 +7,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n use crate::utils::span_lint;\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n \n /// **What it does:** Checks for usage of blacklisted names for variables, such\n /// as `foo`."}, {"sha": "b68b43354f798da7535a05b1b4bcec9e6358ae30", "filename": "clippy_lints/src/block_in_if_condition.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,12 +7,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n use crate::utils::*;\n use matches::matches;\n+use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n \n /// **What it does:** Checks for `if` conditions that use blocks to contain an\n /// expression."}, {"sha": "844f9fb886564df520d72628718b2505f3797921", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,17 +7,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir::intravisit::*;\n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_data_structures::thin_vec::ThinVec;\n-use crate::rustc_errors::Applicability;\n-use crate::syntax::ast::{LitKind, NodeId, DUMMY_NODE_ID};\n-use crate::syntax::source_map::{dummy_spanned, Span, DUMMY_SP};\n use crate::utils::{\n     get_trait_def_id, implements_trait, in_macro, match_type, paths, snippet_opt, span_lint_and_then, SpanlessEq,\n };\n+use rustc::hir::intravisit::*;\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_data_structures::thin_vec::ThinVec;\n+use rustc_errors::Applicability;\n+use syntax::ast::{LitKind, NodeId, DUMMY_NODE_ID};\n+use syntax::source_map::{dummy_spanned, Span, DUMMY_SP};\n \n /// **What it does:** Checks for boolean expressions that can be written more\n /// concisely."}, {"sha": "0f2062d9e0fcfb7340d795dd5717db13125d1905", "filename": "clippy_lints/src/bytecount.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fbytecount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fbytecount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbytecount.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,17 +7,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::ty;\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_errors::Applicability;\n-use crate::syntax::ast::{Name, UintTy};\n use crate::utils::{\n     contains_name, get_pat_name, match_type, paths, single_segment_path, snippet_with_applicability,\n     span_lint_and_sugg, walk_ptrs_ty,\n };\n use if_chain::if_chain;\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::ty;\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_errors::Applicability;\n+use syntax::ast::{Name, UintTy};\n \n /// **What it does:** Checks for naive byte counts\n ///"}, {"sha": "9f396b613307f3f90edf1a798f9a8e05847aacec", "filename": "clippy_lints/src/cargo_common_metadata.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fcargo_common_metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fcargo_common_metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcargo_common_metadata.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -9,10 +9,10 @@\n \n //! lint on missing cargo common metadata\n \n-use crate::rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::syntax::{ast::*, source_map::DUMMY_SP};\n use crate::utils::span_lint;\n+use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use syntax::{ast::*, source_map::DUMMY_SP};\n \n use cargo_metadata;\n "}, {"sha": "ae613d70240c39f7d94ca396fe5f15768f539524", "filename": "clippy_lints/src/collapsible_if.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcollapsible_if.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -21,14 +21,14 @@\n //!\n //! This lint is **warn** by default\n \n-use crate::rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::syntax::ast;\n use if_chain::if_chain;\n+use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use syntax::ast;\n \n-use crate::rustc_errors::Applicability;\n use crate::utils::sugg::Sugg;\n use crate::utils::{in_macro, snippet_block, snippet_block_with_applicability, span_lint_and_sugg, span_lint_and_then};\n+use rustc_errors::Applicability;\n \n /// **What it does:** Checks for nested `if` statements which can be collapsed\n /// by `&&`-combining their conditions and for `else { if ... }` expressions"}, {"sha": "a7509dae3d5c83abf9fde2983de89bde384c8095", "filename": "clippy_lints/src/const_static_lifetime.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fconst_static_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fconst_static_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconst_static_lifetime.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,11 +7,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_errors::Applicability;\n-use crate::syntax::ast::*;\n use crate::utils::{in_macro, snippet, span_lint_and_then};\n+use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_errors::Applicability;\n+use syntax::ast::*;\n \n /// **What it does:** Checks for constants with an explicit `'static` lifetime.\n ///"}, {"sha": "a1fe13e4962aa9fd70434ccd59f1a54c7d09d98e", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -10,20 +10,20 @@\n \n #![allow(clippy::float_cmp)]\n \n-use crate::rustc::hir::def::Def;\n-use crate::rustc::hir::*;\n-use crate::rustc::lint::LateContext;\n-use crate::rustc::ty::subst::{Subst, Substs};\n-use crate::rustc::ty::{self, Instance, Ty, TyCtxt};\n-use crate::rustc::{bug, span_bug};\n-use crate::syntax::ast::{FloatTy, LitKind};\n-use crate::syntax::ptr::P;\n use crate::utils::{clip, sext, unsext};\n+use rustc::hir::def::Def;\n+use rustc::hir::*;\n+use rustc::lint::LateContext;\n+use rustc::ty::subst::{Subst, Substs};\n+use rustc::ty::{self, Instance, Ty, TyCtxt};\n+use rustc::{bug, span_bug};\n use std::cmp::Ordering::{self, Equal};\n use std::cmp::PartialOrd;\n use std::convert::TryInto;\n use std::hash::{Hash, Hasher};\n use std::rc::Rc;\n+use syntax::ast::{FloatTy, LitKind};\n+use syntax::ptr::P;\n \n /// A `LitKind`-like enum to fold constant `Expr`s into.\n #[derive(Debug, Clone)]\n@@ -151,7 +151,7 @@ impl Constant {\n \n /// parse a `LitKind` to a `Constant`\n pub fn lit_to_constant<'tcx>(lit: &LitKind, ty: Ty<'tcx>) -> Constant {\n-    use crate::syntax::ast::*;\n+    use syntax::ast::*;\n \n     match *lit {\n         LitKind::Str(ref is, _) => Constant::Str(is.to_string()),\n@@ -286,7 +286,7 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n \n     /// lookup a possibly constant expression from a ExprKind::Path\n     fn fetch_path(&mut self, qpath: &QPath, id: HirId) -> Option<Constant> {\n-        use crate::rustc::mir::interpret::GlobalId;\n+        use rustc::mir::interpret::GlobalId;\n \n         let def = self.tables.qpath_def(qpath, id);\n         match def {\n@@ -430,7 +430,7 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n }\n \n pub fn miri_to_const<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, result: &ty::Const<'tcx>) -> Option<Constant> {\n-    use crate::rustc::mir::interpret::{ConstValue, Scalar};\n+    use rustc::mir::interpret::{ConstValue, Scalar};\n     match result.val {\n         ConstValue::Scalar(Scalar::Bits { bits: b, .. }) => match result.ty.sty {\n             ty::Bool => Some(Constant::Bool(b == 1)),"}, {"sha": "01398380075591bc9b3952d23dedbf4ee68b7c35", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,17 +7,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::ty::Ty;\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_data_structures::fx::FxHashMap;\n-use crate::syntax::symbol::LocalInternedString;\n use crate::utils::{get_parent_expr, in_macro, snippet, span_lint_and_then, span_note_and_lint};\n use crate::utils::{SpanlessEq, SpanlessHash};\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::ty::Ty;\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_data_structures::fx::FxHashMap;\n use smallvec::SmallVec;\n use std::collections::hash_map::Entry;\n use std::hash::BuildHasherDefault;\n+use syntax::symbol::LocalInternedString;\n \n /// **What it does:** Checks for consecutive `if`s with the same condition.\n ///"}, {"sha": "f45d8eea5e1d5c47264952fc8fdc073f747b4f23", "filename": "clippy_lints/src/copy_iterator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fcopy_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fcopy_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopy_iterator.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,10 +7,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir::{Item, ItemKind};\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n use crate::utils::{is_copy, match_path, paths, span_note_and_lint};\n+use rustc::hir::{Item, ItemKind};\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n \n /// **What it does:** Checks for types that implement `Copy` as well as\n /// `Iterator`."}, {"sha": "695e4329dfd166a16dc186ca2c628fdbb016be26", "filename": "clippy_lints/src/cyclomatic_complexity.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -9,14 +9,14 @@\n \n //! calculate cyclomatic complexity and warn about overly complex functions\n \n-use crate::rustc::cfg::CFG;\n-use crate::rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintContext, LintPass};\n-use crate::rustc::ty;\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::syntax::ast::{Attribute, NodeId};\n-use crate::syntax::source_map::Span;\n+use rustc::cfg::CFG;\n+use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintContext, LintPass};\n+use rustc::ty;\n+use rustc::{declare_tool_lint, lint_array};\n+use syntax::ast::{Attribute, NodeId};\n+use syntax::source_map::Span;\n \n use crate::utils::{in_macro, is_allowed, match_type, paths, span_help_and_lint, LimitStack};\n "}, {"sha": "9dc404efd7e0ba17cede72a704892c8a5c11153c", "filename": "clippy_lints/src/default_trait_access.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fdefault_trait_access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fdefault_trait_access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_trait_access.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,12 +7,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::ty;\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_errors::Applicability;\n use if_chain::if_chain;\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::ty;\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_errors::Applicability;\n \n use crate::utils::{any_parent_is_automatically_derived, match_def_path, opt_def_id, paths, span_lint_and_sugg};\n "}, {"sha": "b4556ebaff9375c651abf81dc927cdccdc6d0a81", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,14 +7,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::ty::{self, Ty};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::syntax::source_map::Span;\n use crate::utils::paths;\n use crate::utils::{is_automatically_derived, is_copy, match_path, span_lint_and_then};\n use if_chain::if_chain;\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::ty::{self, Ty};\n+use rustc::{declare_tool_lint, lint_array};\n+use syntax::source_map::Span;\n \n /// **What it does:** Checks for deriving `Hash` but implementing `PartialEq`\n /// explicitly or vice versa."}, {"sha": "024907185e9e041a2233e008133dc861d74fadc9", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,14 +7,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::syntax::ast;\n-use crate::syntax::source_map::{BytePos, Span};\n-use crate::syntax_pos::Pos;\n use crate::utils::span_lint;\n use itertools::Itertools;\n use pulldown_cmark;\n+use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use syntax::ast;\n+use syntax::source_map::{BytePos, Span};\n+use syntax_pos::Pos;\n use url::Url;\n \n /// **What it does:** Checks for the presence of `_`, `::` or camel-case words"}, {"sha": "34f4a56bef910ead094a4f081b2349064b523254", "filename": "clippy_lints/src/double_comparison.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fdouble_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fdouble_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdouble_comparison.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -9,11 +9,11 @@\n \n //! Lint on unnecessary double comparisons. Some examples:\n \n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_errors::Applicability;\n-use crate::syntax::source_map::Span;\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_errors::Applicability;\n+use syntax::source_map::Span;\n \n use crate::utils::{snippet_with_applicability, span_lint_and_sugg, SpanlessEq};\n "}, {"sha": "3b476b81707fec6cfe3b5dbf7a9359641ff1d2d2", "filename": "clippy_lints/src/double_parens.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fdouble_parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fdouble_parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdouble_parens.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,10 +7,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::syntax::ast::*;\n use crate::utils::{in_macro, span_lint};\n+use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use syntax::ast::*;\n \n /// **What it does:** Checks for unnecessary double parentheses.\n ///"}, {"sha": "f0f91c9ab69daa99a11309add4c531293171da8f", "filename": "clippy_lints/src/drop_forget_ref.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,12 +7,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::ty;\n-use crate::rustc::{declare_tool_lint, lint_array};\n use crate::utils::{is_copy, match_def_path, opt_def_id, paths, span_note_and_lint};\n use if_chain::if_chain;\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::ty;\n+use rustc::{declare_tool_lint, lint_array};\n \n /// **What it does:** Checks for calls to `std::mem::drop` with a reference\n /// instead of an owned value."}, {"sha": "aebb378ee9bea8fae48983199c82a0dd792019e2", "filename": "clippy_lints/src/duration_subsec.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fduration_subsec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fduration_subsec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fduration_subsec.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,12 +7,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_errors::Applicability;\n-use crate::syntax::source_map::Spanned;\n use if_chain::if_chain;\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_errors::Applicability;\n+use syntax::source_map::Spanned;\n \n use crate::consts::{constant, Constant};\n use crate::utils::paths;"}, {"sha": "ff8345290b29610b8d2078eeec513310f9123c63", "filename": "clippy_lints/src/else_if_without_else.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Felse_if_without_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Felse_if_without_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Felse_if_without_else.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -9,9 +9,9 @@\n \n //! lint on if expressions with an else if, but without a final else branch\n \n-use crate::rustc::lint::{in_external_macro, EarlyContext, EarlyLintPass, LintArray, LintContext, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::syntax::ast::*;\n+use rustc::lint::{in_external_macro, EarlyContext, EarlyLintPass, LintArray, LintContext, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use syntax::ast::*;\n \n use crate::utils::span_help_and_lint;\n "}, {"sha": "af2a54069fc9f5cdb0f8ef2bdd4a2ed8050f94cf", "filename": "clippy_lints/src/empty_enum.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fempty_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fempty_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fempty_enum.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -9,10 +9,10 @@\n \n //! lint when there is an enum with no variants\n \n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n use crate::utils::span_lint_and_then;\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n \n /// **What it does:** Checks for `enum`s with no variants.\n ///"}, {"sha": "c59bfd1ad92dc24aa3f9968254b22892763ffcf6", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,15 +7,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_errors::Applicability;\n-use crate::syntax::source_map::Span;\n use crate::utils::SpanlessEq;\n use crate::utils::{get_item_name, match_type, paths, snippet, span_lint_and_then, walk_ptrs_ty};\n use if_chain::if_chain;\n+use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_errors::Applicability;\n+use syntax::source_map::Span;\n \n /// **What it does:** Checks for uses of `contains_key` + `insert` on `HashMap`\n /// or `BTreeMap`."}, {"sha": "29038cda869e49a3cb5f62e7cd03f26bf048fa94", "filename": "clippy_lints/src/enum_clike.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fenum_clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fenum_clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_clike.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -11,15 +11,15 @@\n //! don't fit into an `i32`\n \n use crate::consts::{miri_to_const, Constant};\n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::mir::interpret::GlobalId;\n-use crate::rustc::ty;\n-use crate::rustc::ty::subst::Substs;\n-use crate::rustc::ty::util::IntTypeExt;\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::syntax::ast::{IntTy, UintTy};\n use crate::utils::span_lint;\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::mir::interpret::GlobalId;\n+use rustc::ty;\n+use rustc::ty::subst::Substs;\n+use rustc::ty::util::IntTypeExt;\n+use rustc::{declare_tool_lint, lint_array};\n+use syntax::ast::{IntTy, UintTy};\n \n /// **What it does:** Checks for C-like enumerations that are\n /// `repr(isize/usize)` and have values that don't fit into an `i32`."}, {"sha": "aa1ee038c59c8ca8b2602abd2754b6850ed59eaf", "filename": "clippy_lints/src/enum_glob_use.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fenum_glob_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fenum_glob_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_glob_use.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -9,13 +9,13 @@\n \n //! lint on `use`ing all variants of an enum\n \n-use crate::rustc::hir::def::Def;\n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::syntax::ast::NodeId;\n-use crate::syntax::source_map::Span;\n use crate::utils::span_lint;\n+use rustc::hir::def::Def;\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use syntax::ast::NodeId;\n+use syntax::source_map::Span;\n \n /// **What it does:** Checks for `use Enum::*`.\n ///"}, {"sha": "c5d7094dcc1a37c44a36c525b3076f4866befca2", "filename": "clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_variants.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -9,13 +9,13 @@\n \n //! lint on enum variants that are prefixed or suffixed by the same characters\n \n-use crate::rustc::lint::{EarlyContext, EarlyLintPass, Lint, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::syntax::ast::*;\n-use crate::syntax::source_map::Span;\n-use crate::syntax::symbol::LocalInternedString;\n use crate::utils::{camel_case, in_macro};\n use crate::utils::{span_help_and_lint, span_lint};\n+use rustc::lint::{EarlyContext, EarlyLintPass, Lint, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use syntax::ast::*;\n+use syntax::source_map::Span;\n+use syntax::symbol::LocalInternedString;\n \n /// **What it does:** Detects enumeration variants that are prefixed or suffixed\n /// by the same characters."}, {"sha": "af9de9fe7e489cbc4bb40754ad4941f0272d267e", "filename": "clippy_lints/src/eq_op.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feq_op.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,13 +7,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_errors::Applicability;\n use crate::utils::{\n     implements_trait, in_macro, is_copy, multispan_sugg, snippet, span_lint, span_lint_and_then, SpanlessEq,\n };\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_errors::Applicability;\n \n /// **What it does:** Checks for equal operands to comparison, logical and\n /// bitwise, difference and division binary operators (`==`, `>`, etc., `&&`,"}, {"sha": "43f16c74eb1d5df2f791d479689380f632ac0926", "filename": "clippy_lints/src/erasing_op.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Ferasing_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Ferasing_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ferasing_op.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -8,11 +8,11 @@\n // except according to those terms.\n \n use crate::consts::{constant_simple, Constant};\n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::syntax::source_map::Span;\n use crate::utils::{in_macro, span_lint};\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use syntax::source_map::Span;\n \n /// **What it does:** Checks for erasing operations, e.g. `x * 0`.\n ///"}, {"sha": "445aeb3377b076e78059e71ae5a30ee47ed13f46", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,18 +7,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir::intravisit as visit;\n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::middle::expr_use_visitor::*;\n-use crate::rustc::middle::mem_categorization::{cmt_, Categorization};\n-use crate::rustc::ty::layout::LayoutOf;\n-use crate::rustc::ty::{self, Ty};\n-use crate::rustc::util::nodemap::NodeSet;\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::syntax::ast::NodeId;\n-use crate::syntax::source_map::Span;\n use crate::utils::span_lint;\n+use rustc::hir::intravisit as visit;\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::middle::expr_use_visitor::*;\n+use rustc::middle::mem_categorization::{cmt_, Categorization};\n+use rustc::ty::layout::LayoutOf;\n+use rustc::ty::{self, Ty};\n+use rustc::util::nodemap::NodeSet;\n+use rustc::{declare_tool_lint, lint_array};\n+use syntax::ast::NodeId;\n+use syntax::source_map::Span;\n \n pub struct Pass {\n     pub too_large_for_stack: u64,"}, {"sha": "dd80afbc4ae9765ac45777cd1e881a7e48cbd793", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,12 +7,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::ty;\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_errors::Applicability;\n use crate::utils::{is_adjusted, iter_input_pats, snippet_opt, span_lint_and_then};\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::ty;\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_errors::Applicability;\n \n pub struct EtaPass;\n "}, {"sha": "50944eb5e7e69301322f8f4d0033fb6993e0ba25", "filename": "clippy_lints/src/eval_order_dependence.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feval_order_dependence.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,14 +7,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::ty;\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::syntax::ast;\n use crate::utils::{get_parent_expr, span_lint, span_note_and_lint};\n use if_chain::if_chain;\n+use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::ty;\n+use rustc::{declare_tool_lint, lint_array};\n+use syntax::ast;\n \n /// **What it does:** Checks for a read and a write to the same variable where\n /// whether the read occurs before or after the write depends on the evaluation"}, {"sha": "b3cf9131cce9501f7abf4f6cb3217dbdcd66c362", "filename": "clippy_lints/src/excessive_precision.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fexcessive_precision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fexcessive_precision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexcessive_precision.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,18 +7,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::ty;\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_errors::Applicability;\n-use crate::syntax::ast::*;\n-use crate::syntax_pos::symbol::Symbol;\n use crate::utils::span_lint_and_sugg;\n use if_chain::if_chain;\n+use rustc::hir;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::ty;\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_errors::Applicability;\n use std::f32;\n use std::f64;\n use std::fmt;\n+use syntax::ast::*;\n+use syntax_pos::symbol::Symbol;\n \n /// **What it does:** Checks for float literals with a precision greater\n /// than that supported by the underlying type"}, {"sha": "f56e3225d0a9f6095974ba3638a91e739b97cd0d", "filename": "clippy_lints/src/explicit_write.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fexplicit_write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fexplicit_write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexplicit_write.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,13 +7,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_errors::Applicability;\n-use crate::syntax::ast::LitKind;\n use crate::utils::{is_expn_of, match_def_path, opt_def_id, resolve_node, span_lint, span_lint_and_sugg};\n use if_chain::if_chain;\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_errors::Applicability;\n+use syntax::ast::LitKind;\n \n /// **What it does:** Checks for usage of `write!()` / `writeln()!` which can be\n /// replaced with `(e)print!()` / `(e)println!()`"}, {"sha": "65790b1b42e4127c66726f2455fb732bcf4e551b", "filename": "clippy_lints/src/fallible_impl_from.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffallible_impl_from.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,14 +7,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::ty;\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::syntax_pos::Span;\n use crate::utils::paths::{BEGIN_PANIC, BEGIN_PANIC_FMT, FROM_TRAIT, OPTION, RESULT};\n use crate::utils::{is_expn_of, match_def_path, method_chain_args, opt_def_id, span_lint_and_then, walk_ptrs_ty};\n use if_chain::if_chain;\n+use rustc::hir;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::ty;\n+use rustc::{declare_tool_lint, lint_array};\n+use syntax_pos::Span;\n \n /// **What it does:** Checks for impls of `From<..>` that contain `panic!()` or `unwrap()`\n ///\n@@ -61,8 +61,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for FallibleImplFrom {\n }\n \n fn lint_impl_body<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, impl_span: Span, impl_items: &hir::HirVec<hir::ImplItemRef>) {\n-    use crate::rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n-    use crate::rustc::hir::*;\n+    use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+    use rustc::hir::*;\n \n     struct FindPanicUnwrap<'a, 'tcx: 'a> {\n         tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,"}, {"sha": "1db52079d3fa87fbe8aaf478cf0432db9e4cfde3", "filename": "clippy_lints/src/format.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,18 +7,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::ty;\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_errors::Applicability;\n-use crate::syntax::ast::LitKind;\n use crate::utils::paths;\n use crate::utils::{\n     in_macro, is_expn_of, last_path_segment, match_def_path, match_type, opt_def_id, resolve_node, snippet,\n     span_lint_and_then, walk_ptrs_ty,\n };\n use if_chain::if_chain;\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::ty;\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_errors::Applicability;\n+use syntax::ast::LitKind;\n \n /// **What it does:** Checks for the use of `format!(\"string literal with no\n /// argument\")` and `format!(\"{}\", foo)` where `foo` is a string."}, {"sha": "ce51f1433f9195731b93107e12fd394e0a23f852", "filename": "clippy_lints/src/formatting.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformatting.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,11 +7,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::syntax::ast;\n-use crate::syntax::ptr::P;\n use crate::utils::{differing_macro_contexts, in_macro, snippet_opt, span_note_and_lint};\n+use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use syntax::ast;\n+use syntax::ptr::P;\n \n /// **What it does:** Checks for use of the non-existent `=*`, `=!` and `=-`\n /// operators."}, {"sha": "19adf2d1dc4e54437554d80f4de3ce67888c6d74", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,18 +7,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir;\n-use crate::rustc::hir::def::Def;\n-use crate::rustc::hir::intravisit;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::ty;\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_data_structures::fx::FxHashSet;\n-use crate::rustc_target::spec::abi::Abi;\n-use crate::syntax::ast;\n-use crate::syntax::source_map::Span;\n use crate::utils::{iter_input_pats, span_lint, type_is_unsafe_function};\n use matches::matches;\n+use rustc::hir;\n+use rustc::hir::def::Def;\n+use rustc::hir::intravisit;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::ty;\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_data_structures::fx::FxHashSet;\n+use rustc_target::spec::abi::Abi;\n+use syntax::ast;\n+use syntax::source_map::Span;\n \n /// **What it does:** Checks for functions with too many parameters.\n ///"}, {"sha": "b18d63a94b6d7d8f4c075aeeabe3568239f12d2a", "filename": "clippy_lints/src/identity_conversion.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fidentity_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fidentity_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fidentity_conversion.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,15 +7,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_errors::Applicability;\n-use crate::syntax::ast::NodeId;\n use crate::utils::{\n     in_macro, match_def_path, match_trait_method, same_tys, snippet, snippet_with_macro_callsite, span_lint_and_then,\n };\n use crate::utils::{opt_def_id, paths, resolve_node};\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_errors::Applicability;\n+use syntax::ast::NodeId;\n \n /// **What it does:** Checks for always-identical `Into`/`From`/`IntoIter` conversions.\n ///"}, {"sha": "5f1101461bd3b0ad445769631d216bb8d6d125f6", "filename": "clippy_lints/src/identity_op.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fidentity_op.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -8,12 +8,12 @@\n // except according to those terms.\n \n use crate::consts::{constant_simple, Constant};\n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::ty;\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::syntax::source_map::Span;\n use crate::utils::{clip, in_macro, snippet, span_lint, unsext};\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::ty;\n+use rustc::{declare_tool_lint, lint_array};\n+use syntax::source_map::Span;\n \n /// **What it does:** Checks for identity operations, e.g. `x + 0`.\n ///"}, {"sha": "c40fb540da635fdac8c37a3849b49dbea12b41c2", "filename": "clippy_lints/src/if_not_else.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fif_not_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fif_not_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_not_else.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -10,9 +10,9 @@\n //! lint on if branches that could be swapped so no `!` operation is necessary\n //! on the condition\n \n-use crate::rustc::lint::{in_external_macro, EarlyContext, EarlyLintPass, LintArray, LintContext, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::syntax::ast::*;\n+use rustc::lint::{in_external_macro, EarlyContext, EarlyLintPass, LintArray, LintContext, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use syntax::ast::*;\n \n use crate::utils::span_help_and_lint;\n "}, {"sha": "674667c4b5bd006f17b1b7551425ed216952a04c", "filename": "clippy_lints/src/implicit_return.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_return.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,12 +7,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir::{intravisit::FnKind, Body, ExprKind, FnDecl};\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_errors::Applicability;\n-use crate::syntax::{ast::NodeId, source_map::Span};\n use crate::utils::{in_macro, snippet_opt, span_lint_and_then};\n+use rustc::hir::{intravisit::FnKind, Body, ExprKind, FnDecl};\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_errors::Applicability;\n+use syntax::{ast::NodeId, source_map::Span};\n \n /// **What it does:** Checks for missing return statements at the end of a block.\n ///"}, {"sha": "cf971b63052487f7e1481b2f62500361e660c5f7", "filename": "clippy_lints/src/indexing_slicing.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Findexing_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Findexing_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Findexing_slicing.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -10,14 +10,14 @@\n //! lint on indexing and slicing operations\n \n use crate::consts::{constant, Constant};\n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::ty;\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::syntax::ast::RangeLimits;\n use crate::utils;\n use crate::utils::higher;\n use crate::utils::higher::Range;\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::ty;\n+use rustc::{declare_tool_lint, lint_array};\n+use syntax::ast::RangeLimits;\n \n /// **What it does:** Checks for out of bounds array indexing with a constant\n /// index."}, {"sha": "e3d03c0e6971a4f139aabd3f2db9aa4f20f6d32b", "filename": "clippy_lints/src/infallible_destructuring_match.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Finfallible_destructuring_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Finfallible_destructuring_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finfallible_destructuring_match.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -8,11 +8,11 @@\n // except according to those terms.\n \n use super::utils::{get_arg_name, match_var, remove_blocks, snippet_with_applicability, span_lint_and_sugg};\n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_errors::Applicability;\n use if_chain::if_chain;\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_errors::Applicability;\n \n /// **What it does:** Checks for matches being used to destructure a single-variant enum\n /// or tuple struct where a `let` will suffice."}, {"sha": "2f7c5895af8d09361e7f46d5475937bce8d2f5bc", "filename": "clippy_lints/src/infinite_iter.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Finfinite_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Finfinite_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finfinite_iter.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,10 +7,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n use crate::utils::{get_trait_def_id, higher, implements_trait, match_qpath, paths, span_lint};\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n \n /// **What it does:** Checks for iteration that is guaranteed to be infinite.\n ///"}, {"sha": "5224b5fb867b66d4fd58638375ab447d2e2e769d", "filename": "clippy_lints/src/inherent_impl.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Finherent_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Finherent_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_impl.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -9,13 +9,13 @@\n \n //! lint on inherent implementations\n \n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_data_structures::fx::FxHashMap;\n-use crate::syntax_pos::Span;\n use crate::utils::span_lint_and_then;\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_data_structures::fx::FxHashMap;\n use std::default::Default;\n+use syntax_pos::Span;\n \n /// **What it does:** Checks for multiple inherent implementations of a struct\n ///"}, {"sha": "afa8f234023bbafc40d78f3ba895dca1b74f2ddb", "filename": "clippy_lints/src/inline_fn_without_body.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Finline_fn_without_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Finline_fn_without_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finline_fn_without_body.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -9,13 +9,13 @@\n \n //! checks for `#[inline]` on trait methods without bodies\n \n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_errors::Applicability;\n-use crate::syntax::ast::{Attribute, Name};\n use crate::utils::span_lint_and_then;\n use crate::utils::sugg::DiagnosticBuilderExt;\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_errors::Applicability;\n+use syntax::ast::{Attribute, Name};\n \n /// **What it does:** Checks for `#[inline]` on trait methods without bodies\n ///"}, {"sha": "3498c1e81144d8f23b0a4d03356cb677c9091147", "filename": "clippy_lints/src/int_plus_one.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fint_plus_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fint_plus_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fint_plus_one.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -9,10 +9,10 @@\n \n //! lint on blocks unnecessarily using >= with a + 1 or - 1\n \n-use crate::rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_errors::Applicability;\n-use crate::syntax::ast::*;\n+use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_errors::Applicability;\n+use syntax::ast::*;\n \n use crate::utils::{snippet_opt, span_lint_and_then};\n "}, {"sha": "c0dcda6349bdfcb31ef79ad28e7a5943bef2fc30", "filename": "clippy_lints/src/invalid_ref.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Finvalid_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Finvalid_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finvalid_ref.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,12 +7,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::ty;\n-use crate::rustc::{declare_tool_lint, lint_array};\n use crate::utils::{match_def_path, opt_def_id, paths, span_help_and_lint};\n use if_chain::if_chain;\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::ty;\n+use rustc::{declare_tool_lint, lint_array};\n \n /// **What it does:** Checks for creation of references to zeroed or uninitialized memory.\n ///"}, {"sha": "2d8f284ea6d0eaae6e2d11e659238a24775bba8e", "filename": "clippy_lints/src/items_after_statements.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fitems_after_statements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fitems_after_statements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fitems_after_statements.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -9,11 +9,11 @@\n \n //! lint when items are used after statements\n \n-use crate::rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::syntax::ast::*;\n use crate::utils::{in_macro, span_lint};\n use matches::matches;\n+use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use syntax::ast::*;\n \n /// **What it does:** Checks for items declared after some statement in a block.\n ///"}, {"sha": "052504cc57c5ce5b9ba0469e49a52910407b6cc8", "filename": "clippy_lints/src/large_enum_variant.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_enum_variant.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -9,12 +9,12 @@\n \n //! lint when there is a large size difference between variants on an enum\n \n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::ty::layout::LayoutOf;\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_errors::Applicability;\n use crate::utils::{snippet_opt, span_lint_and_then};\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::ty::layout::LayoutOf;\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_errors::Applicability;\n \n /// **What it does:** Checks for large size differences between variants on\n /// `enum`s."}, {"sha": "0a5d273141d48fa08b048af6995cd81b2a366cf0", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,16 +7,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir::def_id::DefId;\n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::ty;\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_data_structures::fx::FxHashSet;\n-use crate::rustc_errors::Applicability;\n-use crate::syntax::ast::{Lit, LitKind, Name};\n-use crate::syntax::source_map::{Span, Spanned};\n use crate::utils::{get_item_name, in_macro, snippet_with_applicability, span_lint, span_lint_and_sugg, walk_ptrs_ty};\n+use rustc::hir::def_id::DefId;\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::ty;\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_data_structures::fx::FxHashSet;\n+use rustc_errors::Applicability;\n+use syntax::ast::{Lit, LitKind, Name};\n+use syntax::source_map::{Span, Spanned};\n \n /// **What it does:** Checks for getting the length of something via `.len()`\n /// just to compare to zero, and suggests using `.is_empty()` where applicable.\n@@ -148,7 +148,7 @@ fn check_trait_items(cx: &LateContext<'_, '_>, visited_trait: &Item, trait_items\n     // fill the set with current and super traits\n     fn fill_trait_set(traitt: DefId, set: &mut FxHashSet<DefId>, cx: &LateContext<'_, '_>) {\n         if set.insert(traitt) {\n-            for supertrait in crate::rustc::traits::supertrait_def_ids(cx.tcx, traitt) {\n+            for supertrait in rustc::traits::supertrait_def_ids(cx.tcx, traitt) {\n                 fill_trait_set(supertrait, set, cx);\n             }\n         }"}, {"sha": "7e9f1b41d27e9064c4d570060a7457dc0c22a78b", "filename": "clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_if_seq.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,15 +7,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir;\n-use crate::rustc::hir::def::Def;\n-use crate::rustc::hir::BindingAnnotation;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_errors::Applicability;\n-use crate::syntax::ast;\n use crate::utils::{snippet, span_lint_and_then};\n use if_chain::if_chain;\n+use rustc::hir;\n+use rustc::hir::def::Def;\n+use rustc::hir::BindingAnnotation;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_errors::Applicability;\n+use syntax::ast;\n \n /// **What it does:** Checks for variable declarations immediately followed by a\n /// conditional affectation."}, {"sha": "f52fa340fb2e49bd36d6c9a8937121e01f5df633", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -212,7 +212,7 @@ pub mod zero_div_zero;\n pub use crate::utils::conf::Conf;\n \n mod reexport {\n-    crate use crate::syntax::ast::{Name, NodeId};\n+    crate use syntax::ast::{Name, NodeId};\n }\n \n pub fn register_pre_expansion_lints("}, {"sha": "32170c9a7c6a7ce036a794631cc7a406ae77c419", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -8,16 +8,16 @@\n // except according to those terms.\n \n use crate::reexport::*;\n-use crate::rustc::hir::def::Def;\n-use crate::rustc::hir::intravisit::*;\n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintContext, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use crate::syntax::source_map::Span;\n-use crate::syntax::symbol::keywords;\n use crate::utils::{last_path_segment, span_lint};\n use matches::matches;\n+use rustc::hir::def::Def;\n+use rustc::hir::intravisit::*;\n+use rustc::hir::*;\n+use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintContext, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use syntax::source_map::Span;\n+use syntax::symbol::keywords;\n \n /// **What it does:** Checks for lifetime annotations which can be removed by\n /// relying on lifetime elision."}, {"sha": "72bd6b09fea25bad3676cc98ddf036b722d28c35", "filename": "clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -10,13 +10,13 @@\n //! Lints concerned with the grouping of digits with underscores in integral or\n //! floating-point literal expressions.\n \n-use crate::rustc::lint::{in_external_macro, EarlyContext, EarlyLintPass, LintArray, LintContext, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_errors::Applicability;\n-use crate::syntax::ast::*;\n-use crate::syntax_pos;\n use crate::utils::{snippet_opt, span_lint_and_sugg};\n use if_chain::if_chain;\n+use rustc::lint::{in_external_macro, EarlyContext, EarlyLintPass, LintArray, LintContext, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_errors::Applicability;\n+use syntax::ast::*;\n+use syntax_pos;\n \n /// **What it does:** Warns if a long integral or floating-point constant does\n /// not contain underscores."}, {"sha": "d8d95cf9a23572265ed92566e72cc5af2ce1990f", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -8,31 +8,31 @@\n // except according to those terms.\n \n use crate::reexport::*;\n-use crate::rustc::hir::def::Def;\n-use crate::rustc::hir::def_id;\n-use crate::rustc::hir::intravisit::{walk_block, walk_decl, walk_expr, walk_pat, walk_stmt, NestedVisitorMap, Visitor};\n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintContext, LintPass};\n-use crate::rustc::middle::region;\n-use crate::rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n use itertools::Itertools;\n-// use crate::rustc::middle::region::CodeExtent;\n+use rustc::hir::def::Def;\n+use rustc::hir::def_id;\n+use rustc::hir::intravisit::{walk_block, walk_decl, walk_expr, walk_pat, walk_stmt, NestedVisitorMap, Visitor};\n+use rustc::hir::*;\n+use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintContext, LintPass};\n+use rustc::middle::region;\n+use rustc::{declare_tool_lint, lint_array};\n+// use rustc::middle::region::CodeExtent;\n use crate::consts::{constant, Constant};\n-use crate::rustc::middle::expr_use_visitor::*;\n-use crate::rustc::middle::mem_categorization::cmt_;\n-use crate::rustc::middle::mem_categorization::Categorization;\n-use crate::rustc::ty::subst::Subst;\n-use crate::rustc::ty::{self, Ty};\n-use crate::rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use crate::rustc_errors::Applicability;\n-use crate::syntax::ast;\n-use crate::syntax::source_map::Span;\n-use crate::syntax_pos::BytePos;\n use crate::utils::usage::mutated_variables;\n use crate::utils::{in_macro, sext, sugg};\n+use rustc::middle::expr_use_visitor::*;\n+use rustc::middle::mem_categorization::cmt_;\n+use rustc::middle::mem_categorization::Categorization;\n+use rustc::ty::subst::Subst;\n+use rustc::ty::{self, Ty};\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_errors::Applicability;\n use std::iter::{once, Iterator};\n use std::mem;\n+use syntax::ast;\n+use syntax::source_map::Span;\n+use syntax_pos::BytePos;\n \n use crate::utils::paths;\n use crate::utils::{"}, {"sha": "2a7177d1fb9a4a0f5a477edb3baeadca9ee0279c", "filename": "clippy_lints/src/map_clone.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_clone.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,17 +7,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_errors::Applicability;\n-use crate::syntax::ast::Ident;\n-use crate::syntax::source_map::Span;\n use crate::utils::paths;\n use crate::utils::{\n     in_macro, match_trait_method, match_type, remove_blocks, snippet_with_applicability, span_lint_and_sugg,\n };\n use if_chain::if_chain;\n+use rustc::hir;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_errors::Applicability;\n+use syntax::ast::Ident;\n+use syntax::source_map::Span;\n \n #[derive(Clone)]\n pub struct Pass;"}, {"sha": "eca35422de2b10cf121c69efde935500e2317caf", "filename": "clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,15 +7,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::ty;\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_errors::Applicability;\n-use crate::syntax::source_map::Span;\n use crate::utils::paths;\n use crate::utils::{in_macro, iter_input_pats, match_type, method_chain_args, snippet, span_lint_and_then};\n use if_chain::if_chain;\n+use rustc::hir;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::ty;\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_errors::Applicability;\n+use syntax::source_map::Span;\n \n #[derive(Clone)]\n pub struct Pass;"}, {"sha": "00292eb96037804f9ca8907adb1fc36aec3be532", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -8,22 +8,22 @@\n // except according to those terms.\n \n use crate::consts::{constant, Constant};\n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintContext, LintPass};\n-use crate::rustc::ty::{self, Ty};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_errors::Applicability;\n-use crate::syntax::ast::LitKind;\n-use crate::syntax::source_map::Span;\n use crate::utils::paths;\n use crate::utils::sugg::Sugg;\n use crate::utils::{\n     expr_block, in_macro, is_allowed, is_expn_of, match_qpath, match_type, multispan_sugg, remove_blocks, snippet,\n     snippet_with_applicability, span_lint_and_sugg, span_lint_and_then, span_note_and_lint, walk_ptrs_ty,\n };\n use if_chain::if_chain;\n+use rustc::hir::*;\n+use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintContext, LintPass};\n+use rustc::ty::{self, Ty};\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_errors::Applicability;\n use std::cmp::Ordering;\n use std::collections::Bound;\n+use syntax::ast::LitKind;\n+use syntax::source_map::Span;\n \n /// **What it does:** Checks for matches with a single arm where an `if let`\n /// will usually suffice."}, {"sha": "0f8ccc7dedbc8304b17a99d428bfb9092514e441", "filename": "clippy_lints/src/mem_discriminant.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fmem_discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fmem_discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_discriminant.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,12 +7,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir::{Expr, ExprKind};\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_errors::Applicability;\n use crate::utils::{match_def_path, opt_def_id, paths, snippet, span_lint_and_then, walk_ptrs_ty_depth};\n use if_chain::if_chain;\n+use rustc::hir::{Expr, ExprKind};\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_errors::Applicability;\n \n use std::iter;\n "}, {"sha": "d231d054610057e974abe51ff7b79171bc8dbf27", "filename": "clippy_lints/src/mem_forget.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fmem_forget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fmem_forget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_forget.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,10 +7,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir::{Expr, ExprKind};\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n use crate::utils::{match_def_path, opt_def_id, paths, span_lint};\n+use rustc::hir::{Expr, ExprKind};\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n \n /// **What it does:** Checks for usage of `std::mem::forget(t)` where `t` is\n /// `Drop`."}, {"sha": "0a77b7d204401fe0e240bac1aa1b565fa3395ed1", "filename": "clippy_lints/src/mem_replace.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_replace.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,12 +7,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir::{Expr, ExprKind, MutMutable, QPath};\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_errors::Applicability;\n use crate::utils::{match_def_path, match_qpath, opt_def_id, paths, snippet_with_applicability, span_lint_and_sugg};\n use if_chain::if_chain;\n+use rustc::hir::{Expr, ExprKind, MutMutable, QPath};\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_errors::Applicability;\n \n /// **What it does:** Checks for `mem::replace()` on an `Option` with\n /// `None`."}, {"sha": "dcd9e3ee153d368cc0b62bdc445c8e24282f3f4c", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,15 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir;\n-use crate::rustc::hir::def::Def;\n-use crate::rustc::lint::{in_external_macro, LateContext, LateLintPass, Lint, LintArray, LintContext, LintPass};\n-use crate::rustc::ty::{self, Predicate, Ty};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_errors::Applicability;\n-use crate::syntax::ast;\n-use crate::syntax::source_map::{BytePos, Span};\n-use crate::syntax::symbol::LocalInternedString;\n use crate::utils::paths;\n use crate::utils::sugg;\n use crate::utils::{\n@@ -27,9 +18,18 @@ use crate::utils::{\n };\n use if_chain::if_chain;\n use matches::matches;\n+use rustc::hir;\n+use rustc::hir::def::Def;\n+use rustc::lint::{in_external_macro, LateContext, LateLintPass, Lint, LintArray, LintContext, LintPass};\n+use rustc::ty::{self, Predicate, Ty};\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_errors::Applicability;\n use std::borrow::Cow;\n use std::fmt;\n use std::iter;\n+use syntax::ast;\n+use syntax::source_map::{BytePos, Span};\n+use syntax::symbol::LocalInternedString;\n \n mod unnecessary_filter_map;\n "}, {"sha": "c5a22961db9c5217fd41cef5378a7c0eb97872c4", "filename": "clippy_lints/src/methods/unnecessary_filter_map.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,14 +7,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir;\n-use crate::rustc::hir::def::Def;\n-use crate::rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n-use crate::rustc::lint::LateContext;\n-use crate::syntax::ast;\n use crate::utils::paths;\n use crate::utils::usage::mutated_variables;\n use crate::utils::{match_qpath, match_trait_method, span_lint};\n+use rustc::hir;\n+use rustc::hir::def::Def;\n+use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use rustc::lint::LateContext;\n+use syntax::ast;\n \n use if_chain::if_chain;\n "}, {"sha": "087aa94a7ecfad42ba9ed5d8548fa8ab747613f6", "filename": "clippy_lints/src/minmax.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fminmax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fminmax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fminmax.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -8,10 +8,10 @@\n // except according to those terms.\n \n use crate::consts::{constant_simple, Constant};\n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n use crate::utils::{match_def_path, opt_def_id, paths, span_lint};\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n use std::cmp::Ordering;\n \n /// **What it does:** Checks for expressions where `std::cmp::min` and `max` are"}, {"sha": "e96261bbe28e528aca0536c7f54e20f445875cdf", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -9,14 +9,6 @@\n \n use crate::consts::{constant, Constant};\n use crate::reexport::*;\n-use crate::rustc::hir::intravisit::FnKind;\n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::ty;\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_errors::Applicability;\n-use crate::syntax::ast::LitKind;\n-use crate::syntax::source_map::{ExpnFormat, Span};\n use crate::utils::sugg::Sugg;\n use crate::utils::{\n     get_item_name, get_parent_expr, implements_trait, in_constant, in_macro, is_integer_literal, iter_input_pats,\n@@ -25,6 +17,14 @@ use crate::utils::{\n };\n use if_chain::if_chain;\n use matches::matches;\n+use rustc::hir::intravisit::FnKind;\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::ty;\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_errors::Applicability;\n+use syntax::ast::LitKind;\n+use syntax::source_map::{ExpnFormat, Span};\n \n /// **What it does:** Checks for function arguments and let bindings denoted as\n /// `ref`."}, {"sha": "6b9b90e17a589dcf75005b8b2d94e4b04f91adbe", "filename": "clippy_lints/src/misc_early.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,16 +7,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::lint::{in_external_macro, EarlyContext, EarlyLintPass, LintArray, LintContext, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_data_structures::fx::FxHashMap;\n-use crate::rustc_errors::Applicability;\n-use crate::syntax::ast::*;\n-use crate::syntax::source_map::Span;\n-use crate::syntax::visit::{walk_expr, FnKind, Visitor};\n use crate::utils::{constants, snippet, snippet_opt, span_help_and_lint, span_lint, span_lint_and_then};\n use if_chain::if_chain;\n+use rustc::lint::{in_external_macro, EarlyContext, EarlyLintPass, LintArray, LintContext, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_data_structures::fx::FxHashMap;\n+use rustc_errors::Applicability;\n use std::char;\n+use syntax::ast::*;\n+use syntax::source_map::Span;\n+use syntax::visit::{walk_expr, FnKind, Visitor};\n \n /// **What it does:** Checks for structure field patterns bound to wildcards.\n ///"}, {"sha": "d65db03a4dad3986cf055926a7e5fddbe5c6c535", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -27,14 +27,14 @@\n // [`missing_doc`]: https://github.com/rust-lang/rust/blob/d6d05904697d89099b55da3331155392f1db9c00/src/librustc_lint/builtin.rs#L246\n //\n \n-use crate::rustc::hir;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintContext, LintPass};\n-use crate::rustc::ty;\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::syntax::ast;\n-use crate::syntax::attr;\n-use crate::syntax::source_map::Span;\n use crate::utils::{in_macro, span_lint};\n+use rustc::hir;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintContext, LintPass};\n+use rustc::ty;\n+use rustc::{declare_tool_lint, lint_array};\n+use syntax::ast;\n+use syntax::attr;\n+use syntax::source_map::Span;\n \n /// **What it does:** Warns if there is missing doc for any documentable item\n /// (public or private)."}, {"sha": "8fb677c7cdfbe0fdb086d7068dbb952591efa766", "filename": "clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_inline.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -18,12 +18,12 @@\n //   except according to those terms.\n //\n \n-use crate::rustc::hir;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::syntax::ast;\n-use crate::syntax::source_map::Span;\n use crate::utils::span_lint;\n+use rustc::hir;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use syntax::ast;\n+use syntax::source_map::Span;\n \n /// **What it does:** it lints if an exported function, method, trait method with default impl,\n /// or trait method impl is not `#[inline]`.\n@@ -91,7 +91,7 @@ fn check_missing_inline_attrs(cx: &LateContext<'_, '_>, attrs: &[ast::Attribute]\n }\n \n fn is_executable<'a, 'tcx>(cx: &LateContext<'a, 'tcx>) -> bool {\n-    use crate::rustc::session::config::CrateType;\n+    use rustc::session::config::CrateType;\n \n     cx.tcx.sess.crate_types.get().iter().any(|t: &CrateType| match t {\n         CrateType::Executable => true,\n@@ -156,7 +156,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingInline {\n     }\n \n     fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, impl_item: &'tcx hir::ImplItem) {\n-        use crate::rustc::ty::{ImplContainer, TraitContainer};\n+        use rustc::ty::{ImplContainer, TraitContainer};\n         if is_executable(cx) {\n             return;\n         }"}, {"sha": "c6374afb4de7c2d284b1f7ad92b749f055be2082", "filename": "clippy_lints/src/multiple_crate_versions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fmultiple_crate_versions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fmultiple_crate_versions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmultiple_crate_versions.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -9,10 +9,10 @@\n \n //! lint on multiple versions of a crate being used\n \n-use crate::rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::syntax::{ast::*, source_map::DUMMY_SP};\n use crate::utils::span_lint;\n+use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use syntax::{ast::*, source_map::DUMMY_SP};\n \n use cargo_metadata;\n use itertools::Itertools;"}, {"sha": "e1702cc373b551d7385e37de5a97f021ddd8c9d7", "filename": "clippy_lints/src/mut_mut.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_mut.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,12 +7,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir;\n-use crate::rustc::hir::intravisit;\n-use crate::rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintContext, LintPass};\n-use crate::rustc::ty;\n-use crate::rustc::{declare_tool_lint, lint_array};\n use crate::utils::{higher, span_lint};\n+use rustc::hir;\n+use rustc::hir::intravisit;\n+use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintContext, LintPass};\n+use rustc::ty;\n+use rustc::{declare_tool_lint, lint_array};\n \n /// **What it does:** Checks for instances of `mut mut` references.\n ///\n@@ -47,7 +47,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MutMut {\n     }\n \n     fn check_ty(&mut self, cx: &LateContext<'a, 'tcx>, ty: &'tcx hir::Ty) {\n-        use crate::rustc::hir::intravisit::Visitor;\n+        use rustc::hir::intravisit::Visitor;\n \n         MutVisitor { cx }.visit_ty(ty);\n     }"}, {"sha": "ddb8bd30137992d44296cb66568a0e91c608a88a", "filename": "clippy_lints/src/mut_reference.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_reference.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,12 +7,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::ty::subst::Subst;\n-use crate::rustc::ty::{self, Ty};\n-use crate::rustc::{declare_tool_lint, lint_array};\n use crate::utils::span_lint;\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::ty::subst::Subst;\n+use rustc::ty::{self, Ty};\n+use rustc::{declare_tool_lint, lint_array};\n \n /// **What it does:** Detects giving a mutable reference to a function that only\n /// requires an immutable reference."}, {"sha": "a114e691228c4b7936ae237b919c49aff8f478d9", "filename": "clippy_lints/src/mutex_atomic.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fmutex_atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fmutex_atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmutex_atomic.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -11,12 +11,12 @@\n //!\n //! This lint is **warn** by default\n \n-use crate::rustc::hir::Expr;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::ty::{self, Ty};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::syntax::ast;\n use crate::utils::{match_type, paths, span_lint};\n+use rustc::hir::Expr;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::ty::{self, Ty};\n+use rustc::{declare_tool_lint, lint_array};\n+use syntax::ast;\n \n /// **What it does:** Checks for usages of `Mutex<X>` where an atomic will do.\n ///"}, {"sha": "08408c4475c0516be49d5d9bd701737719c4ab71", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -11,14 +11,14 @@\n //!\n //! This lint is **warn** by default\n \n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_errors::Applicability;\n-use crate::syntax::ast::LitKind;\n-use crate::syntax::source_map::Spanned;\n use crate::utils::sugg::Sugg;\n use crate::utils::{in_macro, span_lint, span_lint_and_sugg};\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_errors::Applicability;\n+use syntax::ast::LitKind;\n+use syntax::source_map::Spanned;\n \n /// **What it does:** Checks for expressions of the form `if c { true } else {\n /// false }`"}, {"sha": "80c9fc549d9193c54ec0215f76bcc369680cba40", "filename": "clippy_lints/src/needless_borrow.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrow.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -11,15 +11,15 @@\n //!\n //! This lint is **warn** by default\n \n-use crate::rustc::hir::{BindingAnnotation, Expr, ExprKind, Item, MutImmutable, Pat, PatKind};\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::ty;\n-use crate::rustc::ty::adjustment::{Adjust, Adjustment};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_errors::Applicability;\n-use crate::syntax::ast::NodeId;\n use crate::utils::{in_macro, snippet_opt, span_lint_and_then};\n use if_chain::if_chain;\n+use rustc::hir::{BindingAnnotation, Expr, ExprKind, Item, MutImmutable, Pat, PatKind};\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::ty;\n+use rustc::ty::adjustment::{Adjust, Adjustment};\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_errors::Applicability;\n+use syntax::ast::NodeId;\n \n /// **What it does:** Checks for address of operations (`&`) that are going to\n /// be dereferenced immediately by the compiler."}, {"sha": "e2801a2e1e03be8757692c499a342b38f3766291", "filename": "clippy_lints/src/needless_borrowed_ref.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -11,12 +11,12 @@\n //!\n //! This lint is **warn** by default\n \n-use crate::rustc::hir::{BindingAnnotation, MutImmutable, Pat, PatKind};\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_errors::Applicability;\n use crate::utils::{in_macro, snippet, span_lint_and_then};\n use if_chain::if_chain;\n+use rustc::hir::{BindingAnnotation, MutImmutable, Pat, PatKind};\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_errors::Applicability;\n \n /// **What it does:** Checks for useless borrowed references.\n ///"}, {"sha": "9044245c5a6cf050304f0122550d061b23420e45", "filename": "clippy_lints/src/needless_continue.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fneedless_continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fneedless_continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_continue.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -36,11 +36,11 @@\n //! ```\n //!\n //! This lint is **warn** by default.\n-use crate::rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::syntax::ast;\n-use crate::syntax::source_map::{original_sp, DUMMY_SP};\n+use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n use std::borrow::Cow;\n+use syntax::ast;\n+use syntax::source_map::{original_sp, DUMMY_SP};\n \n use crate::utils::{in_macro, snippet, snippet_block, span_help_and_lint, trim_multiline};\n "}, {"sha": "9184a4863744e60403313d672d7c7288d42c70e0", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,28 +7,28 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir::intravisit::FnKind;\n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::middle::expr_use_visitor as euv;\n-use crate::rustc::middle::mem_categorization as mc;\n-use crate::rustc::traits;\n-use crate::rustc::ty::{self, RegionKind, TypeFoldable};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use crate::rustc_errors::Applicability;\n-use crate::rustc_target::spec::abi::Abi;\n-use crate::syntax::ast::NodeId;\n-use crate::syntax::errors::DiagnosticBuilder;\n-use crate::syntax_pos::Span;\n use crate::utils::ptr::get_spans;\n use crate::utils::{\n     get_trait_def_id, implements_trait, in_macro, is_copy, is_self, match_type, multispan_sugg, paths, snippet,\n     snippet_opt, span_lint_and_then,\n };\n use if_chain::if_chain;\n use matches::matches;\n+use rustc::hir::intravisit::FnKind;\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::middle::expr_use_visitor as euv;\n+use rustc::middle::mem_categorization as mc;\n+use rustc::traits;\n+use rustc::ty::{self, RegionKind, TypeFoldable};\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_errors::Applicability;\n+use rustc_target::spec::abi::Abi;\n use std::borrow::Cow;\n+use syntax::ast::NodeId;\n+use syntax::errors::DiagnosticBuilder;\n+use syntax_pos::Span;\n \n /// **What it does:** Checks for functions taking arguments by value, but not\n /// consuming them in its"}, {"sha": "993aa73f6f731840c0f23e82b5b2e11f887486b3", "filename": "clippy_lints/src/needless_update.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fneedless_update.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fneedless_update.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_update.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,11 +7,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir::{Expr, ExprKind};\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::ty;\n-use crate::rustc::{declare_tool_lint, lint_array};\n use crate::utils::span_lint;\n+use rustc::hir::{Expr, ExprKind};\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::ty;\n+use rustc::{declare_tool_lint, lint_array};\n \n /// **What it does:** Checks for needlessly including a base struct on update\n /// when all fields are changed anyway."}, {"sha": "6642f674da88b9b06f8880988b194df4fe750b3f", "filename": "clippy_lints/src/neg_cmp_op_on_partial_ord.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,10 +7,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintContext, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n+use rustc::hir::*;\n+use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintContext, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n \n use crate::utils::{self, paths, span_lint};\n "}, {"sha": "55edca6cece26e495842499edf120cc220193cc5", "filename": "clippy_lints/src/neg_multiply.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fneg_multiply.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fneg_multiply.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_multiply.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,11 +7,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::syntax::source_map::{Span, Spanned};\n use if_chain::if_chain;\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use syntax::source_map::{Span, Spanned};\n \n use crate::consts::{self, Constant};\n use crate::utils::span_lint;"}, {"sha": "9e4821e7031a85e1f6e15872eff54f9841eec27b", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,18 +7,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir;\n-use crate::rustc::hir::def_id::DefId;\n-use crate::rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintContext, LintPass};\n-use crate::rustc::ty::{self, Ty};\n-use crate::rustc::util::nodemap::NodeSet;\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_errors::Applicability;\n-use crate::syntax::source_map::Span;\n use crate::utils::paths;\n use crate::utils::sugg::DiagnosticBuilderExt;\n use crate::utils::{get_trait_def_id, implements_trait, return_ty, same_tys, span_lint_node_and_then};\n use if_chain::if_chain;\n+use rustc::hir;\n+use rustc::hir::def_id::DefId;\n+use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintContext, LintPass};\n+use rustc::ty::{self, Ty};\n+use rustc::util::nodemap::NodeSet;\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_errors::Applicability;\n+use syntax::source_map::Span;\n \n /// **What it does:** Checks for types with a `fn new() -> Self` method and no\n /// implementation of"}, {"sha": "c2cffadf6c1209ba558e7a07ba5aa782bfbbb116", "filename": "clippy_lints/src/no_effect.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_effect.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,12 +7,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir::def::Def;\n-use crate::rustc::hir::{BinOpKind, BlockCheckMode, Expr, ExprKind, Stmt, StmtKind, UnsafeSource};\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_errors::Applicability;\n use crate::utils::{has_drop, in_macro, snippet_opt, span_lint, span_lint_and_sugg};\n+use rustc::hir::def::Def;\n+use rustc::hir::{BinOpKind, BlockCheckMode, Expr, ExprKind, Stmt, StmtKind, UnsafeSource};\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_errors::Applicability;\n use std::ops::Deref;\n \n /// **What it does:** Checks for statements which have no effect."}, {"sha": "57482ff4179815ad6330ace123f4149109da8eab", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -11,17 +11,17 @@\n //!\n //! This lint is **deny** by default.\n \n-use crate::rustc::hir::def::Def;\n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, Lint, LintArray, LintPass};\n-use crate::rustc::ty::adjustment::Adjust;\n-use crate::rustc::ty::{self, TypeFlags};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_errors::Applicability;\n-use crate::rustc_typeck::hir_ty_to_ty;\n-use crate::syntax_pos::{Span, DUMMY_SP};\n use crate::utils::{in_constant, in_macro, is_copy, span_lint_and_then};\n+use rustc::hir::def::Def;\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, Lint, LintArray, LintPass};\n+use rustc::ty::adjustment::Adjust;\n+use rustc::ty::{self, TypeFlags};\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_errors::Applicability;\n+use rustc_typeck::hir_ty_to_ty;\n use std::ptr;\n+use syntax_pos::{Span, DUMMY_SP};\n \n /// **What it does:** Checks for declaration of `const` items which is interior\n /// mutable (e.g. contains a `Cell`, `Mutex`, `AtomicXxxx` etc)."}, {"sha": "2ab7d7e62f33dec62c41ceeff368f8ee28b0899f", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,14 +7,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::syntax::ast::*;\n-use crate::syntax::attr;\n-use crate::syntax::source_map::Span;\n-use crate::syntax::symbol::LocalInternedString;\n-use crate::syntax::visit::{walk_block, walk_expr, walk_pat, Visitor};\n use crate::utils::{span_lint, span_lint_and_then};\n+use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use syntax::ast::*;\n+use syntax::attr;\n+use syntax::source_map::Span;\n+use syntax::symbol::LocalInternedString;\n+use syntax::visit::{walk_block, walk_expr, walk_pat, Visitor};\n \n /// **What it does:** Checks for names that are very similar and thus confusing.\n ///"}, {"sha": "e060220d56b31840cd56a8ad388af989a89d43cd", "filename": "clippy_lints/src/ok_if_let.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fok_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fok_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fok_if_let.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,11 +7,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n use crate::utils::{match_type, method_chain_args, paths, snippet, span_help_and_lint};\n use if_chain::if_chain;\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n \n /// **What it does:*** Checks for unnecessary `ok()` in if let.\n ///"}, {"sha": "f6773dcb158c1abeaf2a6b38f7b36605acecd24e", "filename": "clippy_lints/src/open_options.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fopen_options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fopen_options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fopen_options.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,12 +7,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir::{Expr, ExprKind};\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::syntax::ast::LitKind;\n-use crate::syntax::source_map::{Span, Spanned};\n use crate::utils::{match_type, paths, span_lint, walk_ptrs_ty};\n+use rustc::hir::{Expr, ExprKind};\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use syntax::ast::LitKind;\n+use syntax::source_map::{Span, Spanned};\n \n /// **What it does:** Checks for duplicate open options as well as combinations\n /// that make no sense."}, {"sha": "8df3ba4197f7fef792a4cb95ebfabe323713f4a5", "filename": "clippy_lints/src/overflow_check_conditional.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Foverflow_check_conditional.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Foverflow_check_conditional.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foverflow_check_conditional.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,11 +7,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n use crate::utils::{span_lint, SpanlessEq};\n use if_chain::if_chain;\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n \n /// **What it does:** Detects classic underflow/overflow checks.\n ///"}, {"sha": "822361175d6160e32fbc50290a2f4bceba325df6", "filename": "clippy_lints/src/panic_unimplemented.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,14 +7,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::syntax::ast::LitKind;\n-use crate::syntax::ext::quote::rt::Span;\n-use crate::syntax::ptr::P;\n use crate::utils::{is_direct_expn_of, is_expn_of, match_def_path, opt_def_id, paths, resolve_node, span_lint};\n use if_chain::if_chain;\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use syntax::ast::LitKind;\n+use syntax::ext::quote::rt::Span;\n+use syntax::ptr::P;\n \n /// **What it does:** Checks for missing parameters in `panic!`.\n ///"}, {"sha": "c33367e7a3fe23114facaa25c4628a0f4788bdd1", "filename": "clippy_lints/src/partialeq_ne_impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,11 +7,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n use crate::utils::{is_automatically_derived, span_lint_node};\n use if_chain::if_chain;\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n \n /// **What it does:** Checks for manual re-implementations of `PartialEq::ne`.\n ///"}, {"sha": "20a797937de3ad13a3d8a2d4a02be32b2981cce0", "filename": "clippy_lints/src/precedence.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fprecedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fprecedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fprecedence.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,12 +7,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_errors::Applicability;\n-use crate::syntax::ast::*;\n-use crate::syntax::source_map::Spanned;\n use crate::utils::{in_macro, snippet_with_applicability, span_lint_and_sugg};\n+use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_errors::Applicability;\n+use syntax::ast::*;\n+use syntax::source_map::Spanned;\n \n /// **What it does:** Checks for operations where precedence may be unclear\n /// and suggests to add parentheses. Currently it catches the following:\n@@ -138,15 +138,15 @@ fn is_arith_expr(expr: &Expr) -> bool {\n }\n \n fn is_bit_op(op: BinOpKind) -> bool {\n-    use crate::syntax::ast::BinOpKind::*;\n+    use syntax::ast::BinOpKind::*;\n     match op {\n         BitXor | BitAnd | BitOr | Shl | Shr => true,\n         _ => false,\n     }\n }\n \n fn is_arith_op(op: BinOpKind) -> bool {\n-    use crate::syntax::ast::BinOpKind::*;\n+    use syntax::ast::BinOpKind::*;\n     match op {\n         Add | Sub | Mul | Div | Rem => true,\n         _ => false,"}, {"sha": "f45bb54d191002b8780f7428d8525a6e61ceca4f", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -9,19 +9,19 @@\n \n //! Checks for usage of  `&Vec[_]` and `&String`.\n \n-use crate::rustc::hir::QPath;\n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::ty;\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_errors::Applicability;\n-use crate::syntax::ast::NodeId;\n-use crate::syntax::source_map::Span;\n-use crate::syntax_pos::MultiSpan;\n use crate::utils::ptr::get_spans;\n use crate::utils::{match_qpath, match_type, paths, snippet_opt, span_lint, span_lint_and_then, walk_ptrs_hir_ty};\n use if_chain::if_chain;\n+use rustc::hir::QPath;\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::ty;\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_errors::Applicability;\n use std::borrow::Cow;\n+use syntax::ast::NodeId;\n+use syntax::source_map::Span;\n+use syntax_pos::MultiSpan;\n \n /// **What it does:** This lint checks for function arguments of type `&String`\n /// or `&Vec` unless the references are mutable. It will also suggest you"}, {"sha": "8d6bca8b6894b6c836b6d25f52f86961b6c6066a", "filename": "clippy_lints/src/ptr_offset_with_cast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fptr_offset_with_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fptr_offset_with_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr_offset_with_cast.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,9 +7,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::{declare_tool_lint, hir, lint, lint_array};\n-use crate::rustc_errors::Applicability;\n use crate::utils;\n+use rustc::{declare_tool_lint, hir, lint, lint_array};\n+use rustc_errors::Applicability;\n use std::fmt;\n \n /// **What it does:** Checks for usage of the `offset` pointer method with a `usize` casted to an"}, {"sha": "63a3a83130442125eac97d7bcfc7618626073dee", "filename": "clippy_lints/src/question_mark.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fquestion_mark.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,17 +7,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir::def::Def;\n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::syntax::ptr::P;\n use crate::utils::sugg::Sugg;\n use if_chain::if_chain;\n+use rustc::hir::def::Def;\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use syntax::ptr::P;\n \n-use crate::rustc_errors::Applicability;\n use crate::utils::paths::*;\n use crate::utils::{match_def_path, match_type, span_lint_and_then, SpanlessEq};\n+use rustc_errors::Applicability;\n \n /// **What it does:** Checks for expressions that could be replaced by the question mark operator\n ///"}, {"sha": "a0870ea72d098f7a64b1f8a59f7936561ab18ce0", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,16 +7,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_errors::Applicability;\n-use crate::syntax::ast::RangeLimits;\n-use crate::syntax::source_map::Spanned;\n use crate::utils::sugg::Sugg;\n use crate::utils::{get_trait_def_id, higher, implements_trait, SpanlessEq};\n use crate::utils::{is_integer_literal, paths, snippet, snippet_opt, span_lint, span_lint_and_then};\n use if_chain::if_chain;\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_errors::Applicability;\n+use syntax::ast::RangeLimits;\n+use syntax::source_map::Spanned;\n \n /// **What it does:** Checks for calling `.step_by(0)` on iterators,\n /// which never terminates."}, {"sha": "1983cb6cbc4937c2f4c552d3e99bec4f42dd74fc", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,28 +7,28 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir::intravisit::FnKind;\n-use crate::rustc::hir::{def_id, Body, FnDecl};\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::mir::{\n-    self, traversal,\n-    visit::{MutatingUseContext, PlaceContext, Visitor},\n-    TerminatorKind,\n-};\n-use crate::rustc::ty;\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_errors::Applicability;\n-use crate::syntax::{\n-    ast::NodeId,\n-    source_map::{BytePos, Span},\n-};\n use crate::utils::{\n     has_drop, in_macro, is_copy, match_def_path, match_type, paths, snippet_opt, span_lint_node,\n     span_lint_node_and_then, walk_ptrs_ty_depth,\n };\n use if_chain::if_chain;\n use matches::matches;\n+use rustc::hir::intravisit::FnKind;\n+use rustc::hir::{def_id, Body, FnDecl};\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::mir::{\n+    self, traversal,\n+    visit::{MutatingUseContext, PlaceContext, Visitor},\n+    TerminatorKind,\n+};\n+use rustc::ty;\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_errors::Applicability;\n use std::convert::TryFrom;\n+use syntax::{\n+    ast::NodeId,\n+    source_map::{BytePos, Span},\n+};\n \n macro_rules! unwrap_or_continue {\n     ($x:expr) => {"}, {"sha": "a53df6a292a808859fe1557577f684ad4aaab22e", "filename": "clippy_lints/src/redundant_field_names.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fredundant_field_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fredundant_field_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_field_names.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,11 +7,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_errors::Applicability;\n-use crate::syntax::ast::*;\n use crate::utils::span_lint_and_sugg;\n+use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_errors::Applicability;\n+use syntax::ast::*;\n \n /// **What it does:** Checks for fields in struct literals where shorthands\n /// could be used."}, {"sha": "bd194dd7bc3671ac14d211cb88a4b030d8874430", "filename": "clippy_lints/src/redundant_pattern_matching.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fredundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fredundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_pattern_matching.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,13 +7,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_errors::Applicability;\n-use crate::syntax::ast::LitKind;\n-use crate::syntax::ptr::P;\n use crate::utils::{match_qpath, paths, snippet, span_lint_and_then};\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_errors::Applicability;\n+use syntax::ast::LitKind;\n+use syntax::ptr::P;\n \n /// **What it does:** Lint for redundant pattern matching over `Result` or\n /// `Option`"}, {"sha": "d4145a2dd39c883c10da4b8eebf9c2ab8c7bb082", "filename": "clippy_lints/src/reference.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Freference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Freference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freference.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,12 +7,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_errors::Applicability;\n-use crate::syntax::ast::{Expr, ExprKind, UnOp};\n use crate::utils::{snippet_with_applicability, span_lint_and_sugg};\n use if_chain::if_chain;\n+use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_errors::Applicability;\n+use syntax::ast::{Expr, ExprKind, UnOp};\n \n /// **What it does:** Checks for usage of `*&` and `*&mut` in expressions.\n ///"}, {"sha": "021237d38c0b8d51e90cfe2606e324ae2ff2c14a", "filename": "clippy_lints/src/regex.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fregex.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -8,16 +8,16 @@\n // except according to those terms.\n \n use crate::consts::{constant, Constant};\n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_data_structures::fx::FxHashSet;\n-use crate::syntax::ast::{LitKind, NodeId, StrStyle};\n-use crate::syntax::source_map::{BytePos, Span};\n use crate::utils::{is_expn_of, match_def_path, match_type, opt_def_id, paths, span_help_and_lint, span_lint};\n use if_chain::if_chain;\n use regex_syntax;\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_data_structures::fx::FxHashSet;\n use std::convert::TryFrom;\n+use syntax::ast::{LitKind, NodeId, StrStyle};\n+use syntax::source_map::{BytePos, Span};\n \n /// **What it does:** Checks [regex](https://crates.io/crates/regex) creation\n /// (with `Regex::new`,`RegexBuilder::new` or `RegexSet::new`) for correct"}, {"sha": "d905d3dbdf47a4e136fcdba253ba2a83441b76bc", "filename": "clippy_lints/src/replace_consts.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Freplace_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Freplace_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freplace_consts.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,13 +7,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir;\n-use crate::rustc::hir::def::Def;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_errors::Applicability;\n use crate::utils::{match_def_path, span_lint_and_sugg};\n use if_chain::if_chain;\n+use rustc::hir;\n+use rustc::hir::def::Def;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_errors::Applicability;\n \n /// **What it does:** Checks for usage of `ATOMIC_X_INIT`, `ONCE_INIT`, and\n /// `uX/iX::MIN/MAX`."}, {"sha": "1ef03a77bd7042320f3bd41b0c6106ebf5fe60d0", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,15 +7,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::lint::{in_external_macro, EarlyContext, EarlyLintPass, LintArray, LintContext, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_errors::Applicability;\n-use crate::syntax::ast;\n-use crate::syntax::source_map::Span;\n-use crate::syntax::visit::FnKind;\n-use crate::syntax_pos::BytePos;\n use crate::utils::{in_macro, match_path_ast, snippet_opt, span_lint_and_then, span_note_and_lint};\n use if_chain::if_chain;\n+use rustc::lint::{in_external_macro, EarlyContext, EarlyLintPass, LintArray, LintContext, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_errors::Applicability;\n+use syntax::ast;\n+use syntax::source_map::Span;\n+use syntax::visit::FnKind;\n+use syntax_pos::BytePos;\n \n /// **What it does:** Checks for return statements at the end of a block.\n ///"}, {"sha": "d381f8c4419c7485fce8ecb52c2bcc33e9eee5b2", "filename": "clippy_lints/src/serde_api.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fserde_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fserde_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fserde_api.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,10 +7,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n use crate::utils::{get_trait_def_id, paths, span_lint};\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n \n /// **What it does:** Checks for mis-uses of the serde API.\n ///"}, {"sha": "329e83e100bff35aa88e5bbc017d632e823af2bb", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -8,13 +8,13 @@\n // except according to those terms.\n \n use crate::reexport::*;\n-use crate::rustc::hir::intravisit::FnKind;\n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintContext, LintPass};\n-use crate::rustc::ty;\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::syntax::source_map::Span;\n use crate::utils::{contains_name, higher, iter_input_pats, snippet, span_lint_and_then};\n+use rustc::hir::intravisit::FnKind;\n+use rustc::hir::*;\n+use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintContext, LintPass};\n+use rustc::ty;\n+use rustc::{declare_tool_lint, lint_array};\n+use syntax::source_map::Span;\n \n /// **What it does:** Checks for bindings that shadow other bindings already in\n /// scope, while just changing reference level or mutability."}, {"sha": "fde679b6ed2959de0e6afc3a1213da89c18c71c2", "filename": "clippy_lints/src/slow_vector_initialization.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,16 +7,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir::intravisit::{walk_block, walk_expr, walk_stmt, NestedVisitorMap, Visitor};\n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, Lint, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_errors::Applicability;\n-use crate::syntax::ast::{LitKind, NodeId};\n-use crate::syntax_pos::symbol::Symbol;\n use crate::utils::sugg::Sugg;\n use crate::utils::{get_enclosing_block, match_qpath, span_lint_and_then, SpanlessEq};\n use if_chain::if_chain;\n+use rustc::hir::intravisit::{walk_block, walk_expr, walk_stmt, NestedVisitorMap, Visitor};\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, Lint, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_errors::Applicability;\n+use syntax::ast::{LitKind, NodeId};\n+use syntax_pos::symbol::Symbol;\n \n /// **What it does:** Checks slow zero-filled vector initialization\n ///"}, {"sha": "5414a1ac0de9b5e5c5466907af6ce0c313ee9a1b", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,13 +7,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_errors::Applicability;\n-use crate::syntax::source_map::Spanned;\n use crate::utils::SpanlessEq;\n use crate::utils::{get_parent_expr, is_allowed, match_type, paths, span_lint, span_lint_and_sugg, walk_ptrs_ty};\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_errors::Applicability;\n+use syntax::source_map::Spanned;\n \n /// **What it does:** Checks for string appends of the form `x = x + y` (without\n /// `let`!).\n@@ -164,8 +164,8 @@ impl LintPass for StringLitAsBytes {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for StringLitAsBytes {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n-        use crate::syntax::ast::{LitKind, StrStyle};\n         use crate::utils::{in_macro, snippet, snippet_with_applicability};\n+        use syntax::ast::{LitKind, StrStyle};\n \n         if let ExprKind::MethodCall(ref path, _, ref args) = e.node {\n             if path.ident.name == \"as_bytes\" {"}, {"sha": "04f8e4993f0d56d2b75a8a7f260204bf3f7d9a8a", "filename": "clippy_lints/src/suspicious_trait_impl.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,13 +7,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir;\n-use crate::rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::syntax::ast;\n use crate::utils::{get_trait_def_id, span_lint};\n use if_chain::if_chain;\n+use rustc::hir;\n+use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use syntax::ast;\n \n /// **What it does:** Lints for suspicious operations in impls of arithmetic operators, e.g.\n /// subtracting elements in an Add impl."}, {"sha": "4c4fda26253722f6f326b29f9fd610fb21cf6e42", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,17 +7,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::ty;\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_errors::Applicability;\n use crate::utils::sugg::Sugg;\n use crate::utils::{\n     differing_macro_contexts, match_type, paths, snippet, span_lint_and_then, walk_ptrs_ty, SpanlessEq,\n };\n use if_chain::if_chain;\n use matches::matches;\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::ty;\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_errors::Applicability;\n \n /// **What it does:** Checks for manual swapping.\n ///"}, {"sha": "a454b6fd997accd468b6ab56359b24aafb493091", "filename": "clippy_lints/src/temporary_assignment.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Ftemporary_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Ftemporary_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftemporary_assignment.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,11 +7,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir::{Expr, ExprKind};\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n use crate::utils::is_adjusted;\n use crate::utils::span_lint;\n+use rustc::hir::{Expr, ExprKind};\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n \n /// **What it does:** Checks for construction of a structure or tuple just to\n /// assign a value in it."}, {"sha": "be3475f67036d6832d676ecfb058e95a4a409db2", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,16 +7,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::ty::{self, Ty};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_errors::Applicability;\n-use crate::syntax::ast;\n use crate::utils::{last_path_segment, match_def_path, paths, snippet, span_lint, span_lint_and_then};\n use crate::utils::{opt_def_id, sugg};\n use if_chain::if_chain;\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::ty::{self, Ty};\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_errors::Applicability;\n use std::borrow::Cow;\n+use syntax::ast;\n \n /// **What it does:** Checks for transmutes that can't ever be correct on any\n /// architecture."}, {"sha": "efa6c0486eb6b6a1cd1915cfaa3877597972f5d0", "filename": "clippy_lints/src/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -9,21 +9,21 @@\n \n use std::cmp;\n \n-use crate::rustc::hir;\n-use crate::rustc::hir::intravisit::FnKind;\n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::session::config::Config as SessionConfig;\n-use crate::rustc::ty::{self, FnSig};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_errors::Applicability;\n-use crate::rustc_target::abi::LayoutOf;\n-use crate::rustc_target::spec::abi::Abi;\n-use crate::syntax::ast::NodeId;\n-use crate::syntax_pos::Span;\n use crate::utils::{in_macro, is_copy, is_self_ty, snippet, span_lint_and_sugg};\n use if_chain::if_chain;\n use matches::matches;\n+use rustc::hir;\n+use rustc::hir::intravisit::FnKind;\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::session::config::Config as SessionConfig;\n+use rustc::ty::{self, FnSig};\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_errors::Applicability;\n+use rustc_target::abi::LayoutOf;\n+use rustc_target::spec::abi::Abi;\n+use syntax::ast::NodeId;\n+use syntax_pos::Span;\n \n /// **What it does:** Checks for functions taking arguments by reference, where\n /// the argument type is `Copy` and small enough to be more efficient to always"}, {"sha": "f4ca8209d67e29910f66dc983042f179881293a8", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -12,19 +12,6 @@\n \n use crate::consts::{constant, Constant};\n use crate::reexport::*;\n-use crate::rustc::hir;\n-use crate::rustc::hir::intravisit::{walk_body, walk_expr, walk_ty, FnKind, NestedVisitorMap, Visitor};\n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintContext, LintPass};\n-use crate::rustc::ty::layout::LayoutOf;\n-use crate::rustc::ty::{self, Ty, TyCtxt, TypeckTables};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_errors::Applicability;\n-use crate::rustc_target::spec::abi::Abi;\n-use crate::rustc_typeck::hir_ty_to_ty;\n-use crate::syntax::ast::{FloatTy, IntTy, UintTy};\n-use crate::syntax::errors::DiagnosticBuilder;\n-use crate::syntax::source_map::Span;\n use crate::utils::paths;\n use crate::utils::{\n     clip, comparisons, differing_macro_contexts, higher, in_constant, in_macro, int_bits, last_path_segment,\n@@ -33,9 +20,22 @@ use crate::utils::{\n     AbsolutePathBuffer,\n };\n use if_chain::if_chain;\n+use rustc::hir;\n+use rustc::hir::intravisit::{walk_body, walk_expr, walk_ty, FnKind, NestedVisitorMap, Visitor};\n+use rustc::hir::*;\n+use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintContext, LintPass};\n+use rustc::ty::layout::LayoutOf;\n+use rustc::ty::{self, Ty, TyCtxt, TypeckTables};\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_errors::Applicability;\n+use rustc_target::spec::abi::Abi;\n+use rustc_typeck::hir_ty_to_ty;\n use std::borrow::Cow;\n use std::cmp::Ordering;\n use std::collections::BTreeMap;\n+use syntax::ast::{FloatTy, IntTy, UintTy};\n+use syntax::errors::DiagnosticBuilder;\n+use syntax::source_map::Span;\n \n /// Handles all the linting of funky types\n pub struct TypePass;\n@@ -646,7 +646,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnitArg {\n }\n \n fn is_questionmark_desugar_marked_call(expr: &Expr) -> bool {\n-    use crate::syntax_pos::hygiene::CompilerDesugaringKind;\n+    use syntax_pos::hygiene::CompilerDesugaringKind;\n     if let ExprKind::Call(ref callee, _) = expr.node {\n         callee.span.is_compiler_desugaring(CompilerDesugaringKind::QuestionMark)\n     } else {\n@@ -1112,7 +1112,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CastPass {\n             let (cast_from, cast_to) = (cx.tables.expr_ty(ex), cx.tables.expr_ty(expr));\n             lint_fn_to_numeric_cast(cx, expr, ex, cast_from, cast_to);\n             if let ExprKind::Lit(ref lit) = ex.node {\n-                use crate::syntax::ast::{LitIntType, LitKind};\n+                use syntax::ast::{LitIntType, LitKind};\n                 match lit.node {\n                     LitKind::Int(_, LitIntType::Unsuffixed) | LitKind::FloatUnsuffixed(_) => {},\n                     _ => {\n@@ -1460,7 +1460,7 @@ impl LintPass for CharLitAsU8 {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CharLitAsU8 {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n-        use crate::syntax::ast::{LitKind, UintTy};\n+        use syntax::ast::{LitKind, UintTy};\n \n         if let ExprKind::Cast(ref e, _) = expr.node {\n             if let ExprKind::Lit(ref l) = e.node {\n@@ -1734,8 +1734,8 @@ impl Ord for FullInt {\n }\n \n fn numeric_cast_precast_bounds<'a>(cx: &LateContext<'_, '_>, expr: &'a Expr) -> Option<(FullInt, FullInt)> {\n-    use crate::syntax::ast::{IntTy, UintTy};\n     use std::*;\n+    use syntax::ast::{IntTy, UintTy};\n \n     if let ExprKind::Cast(ref cast_exp, _) = expr.node {\n         let pre_cast_ty = cx.tables.expr_ty(cast_exp);\n@@ -1937,7 +1937,7 @@ impl LintPass for ImplicitHasher {\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImplicitHasher {\n     #[allow(clippy::cast_possible_truncation)]\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n-        use crate::syntax_pos::BytePos;\n+        use syntax_pos::BytePos;\n \n         fn suggestion<'a, 'tcx>(\n             cx: &LateContext<'a, 'tcx>,"}, {"sha": "a38fe4a5aa9308c1818948ddeb1a3ee1a1d1d98d", "filename": "clippy_lints/src/unicode.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funicode.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,12 +7,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::syntax::ast::{LitKind, NodeId};\n-use crate::syntax::source_map::Span;\n use crate::utils::{is_allowed, snippet, span_help_and_lint};\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use syntax::ast::{LitKind, NodeId};\n+use syntax::source_map::Span;\n use unicode_normalization::UnicodeNormalization;\n \n /// **What it does:** Checks for the Unicode zero-width space in the code."}, {"sha": "626b1c310137105534895b243984abef4854a0ef", "filename": "clippy_lints/src/unsafe_removed_from_name.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,12 +7,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::syntax::ast::*;\n-use crate::syntax::source_map::Span;\n-use crate::syntax::symbol::LocalInternedString;\n use crate::utils::span_lint;\n+use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use syntax::ast::*;\n+use syntax::source_map::Span;\n+use syntax::symbol::LocalInternedString;\n \n /// **What it does:** Checks for imports that remove \"unsafe\" from an item's\n /// name."}, {"sha": "43f980c72c4cf44553e565dce86f6637e5940076", "filename": "clippy_lints/src/unused_io_amount.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Funused_io_amount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Funused_io_amount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_io_amount.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,10 +7,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n use crate::utils::{is_try, match_qpath, match_trait_method, paths, span_lint};\n+use rustc::hir;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n \n /// **What it does:** Checks for unused written/read amount.\n ///"}, {"sha": "766431c368762b0aac0646770707561aa820d3d7", "filename": "clippy_lints/src/unused_label.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Funused_label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Funused_label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_label.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,15 +7,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir;\n-use crate::rustc::hir::intravisit::{walk_expr, walk_fn, FnKind, NestedVisitorMap, Visitor};\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_data_structures::fx::FxHashMap;\n-use crate::syntax::ast;\n-use crate::syntax::source_map::Span;\n-use crate::syntax::symbol::LocalInternedString;\n use crate::utils::{in_macro, span_lint};\n+use rustc::hir;\n+use rustc::hir::intravisit::{walk_expr, walk_fn, FnKind, NestedVisitorMap, Visitor};\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_data_structures::fx::FxHashMap;\n+use syntax::ast;\n+use syntax::source_map::Span;\n+use syntax::symbol::LocalInternedString;\n \n /// **What it does:** Checks for unused labels.\n ///"}, {"sha": "b61b3b975f566c804c46d78a629a2c7950e74aa1", "filename": "clippy_lints/src/unwrap.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Funwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Funwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funwrap.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,15 +7,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n \n-use crate::rustc::hir::intravisit::*;\n-use crate::rustc::hir::*;\n-use crate::syntax::ast::NodeId;\n-use crate::syntax::source_map::Span;\n use crate::utils::{in_macro, match_type, paths, span_lint_and_then, usage::is_potentially_mutated};\n+use rustc::hir::intravisit::*;\n+use rustc::hir::*;\n+use syntax::ast::NodeId;\n+use syntax::source_map::Span;\n \n /// **What it does:** Checks for calls of `unwrap[_err]()` that cannot fail.\n ///"}, {"sha": "653b6630b3c9c1e8ffc4e810499fe526586b5676", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,16 +7,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir::intravisit::{walk_path, walk_ty, NestedVisitorMap, Visitor};\n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::ty;\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_errors::Applicability;\n-use crate::syntax::ast::NodeId;\n-use crate::syntax_pos::symbol::keywords::SelfUpper;\n use crate::utils::{in_macro, span_lint_and_sugg};\n use if_chain::if_chain;\n+use rustc::hir::intravisit::{walk_path, walk_ty, NestedVisitorMap, Visitor};\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::ty;\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_errors::Applicability;\n+use syntax::ast::NodeId;\n+use syntax_pos::symbol::keywords::SelfUpper;\n \n /// **What it does:** Checks for unnecessary repetition of structure name when a\n /// replacement with `Self` is applicable."}, {"sha": "e13c64b5c788dd18cc0b0e016c00889ca51050ed", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -10,14 +10,14 @@\n //! A group of attributes that can be attached to Rust code in order\n //! to generate a clippy lint detecting said code automatically.\n \n-use crate::rustc::hir;\n-use crate::rustc::hir::intravisit::{NestedVisitorMap, Visitor};\n-use crate::rustc::hir::{BindingAnnotation, DeclKind, Expr, ExprKind, Pat, PatKind, QPath, Stmt, StmtKind, TyKind};\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_data_structures::fx::FxHashMap;\n-use crate::syntax::ast::{Attribute, LitKind, DUMMY_NODE_ID};\n use crate::utils::get_attr;\n+use rustc::hir;\n+use rustc::hir::intravisit::{NestedVisitorMap, Visitor};\n+use rustc::hir::{BindingAnnotation, DeclKind, Expr, ExprKind, Pat, PatKind, QPath, Stmt, StmtKind, TyKind};\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_data_structures::fx::FxHashMap;\n+use syntax::ast::{Attribute, LitKind, DUMMY_NODE_ID};\n \n /// **What it does:** Generates clippy code that detects the offending pattern\n ///"}, {"sha": "8b6a97a505c2546a785a71d3ac99611c555c3e3f", "filename": "clippy_lints/src/utils/comparisons.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Futils%2Fcomparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Futils%2Fcomparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fcomparisons.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -11,7 +11,7 @@\n \n #![deny(clippy::missing_docs_in_private_items)]\n \n-use crate::rustc::hir::{BinOpKind, Expr};\n+use rustc::hir::{BinOpKind, Expr};\n \n #[derive(PartialEq, Eq, Debug, Copy, Clone)]\n /// Represent a normalized comparison operator."}, {"sha": "da3a256a83d5215ec7715d597a4d2335b1ef23a0", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -11,12 +11,12 @@\n \n #![deny(clippy::missing_docs_in_private_items)]\n \n-use crate::syntax::{ast, source_map};\n use lazy_static::lazy_static;\n use std::default::Default;\n use std::io::Read;\n use std::sync::Mutex;\n use std::{env, fmt, fs, io, path};\n+use syntax::{ast, source_map};\n use toml;\n \n /// Get the configuration file from arguments."}, {"sha": "214b3dc10e68c5bf78ce8fb190eb8f29e3db9e99", "filename": "clippy_lints/src/utils/higher.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhigher.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -12,11 +12,11 @@\n \n #![deny(clippy::missing_docs_in_private_items)]\n \n-use crate::rustc::lint::LateContext;\n-use crate::rustc::{hir, ty};\n-use crate::syntax::ast;\n use crate::utils::{is_expn_of, match_def_path, match_qpath, opt_def_id, paths, resolve_node};\n use if_chain::if_chain;\n+use rustc::lint::LateContext;\n+use rustc::{hir, ty};\n+use syntax::ast;\n \n /// Convert a hir binary operator to the corresponding `ast` type.\n pub fn binop(op: hir::BinOpKind) -> ast::BinOpKind {"}, {"sha": "79c9de13571c1590fa5718f77790a2dd15bc45d1", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -8,14 +8,14 @@\n // except according to those terms.\n \n use crate::consts::{constant_context, constant_simple};\n-use crate::rustc::hir::*;\n-use crate::rustc::lint::LateContext;\n-use crate::rustc::ty::TypeckTables;\n-use crate::syntax::ast::Name;\n-use crate::syntax::ptr::P;\n use crate::utils::differing_macro_contexts;\n+use rustc::hir::*;\n+use rustc::lint::LateContext;\n+use rustc::ty::TypeckTables;\n use std::collections::hash_map::DefaultHasher;\n use std::hash::{Hash, Hasher};\n+use syntax::ast::Name;\n+use syntax::ptr::P;\n \n /// Type used to check whether two ast are the same. This is different from the\n /// operator"}, {"sha": "e4710b6a7a49971d5e2cbd5c5ab1c445b934d354", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -9,12 +9,12 @@\n \n //! checks for attributes\n \n-use crate::rustc::hir;\n-use crate::rustc::hir::print;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::syntax::ast::Attribute;\n use crate::utils::get_attr;\n+use rustc::hir;\n+use rustc::hir::print;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use syntax::ast::Attribute;\n \n /// **What it does:** Dumps every ast/hir node which has the `#[clippy::dump]`\n /// attribute"}, {"sha": "3705ab91ac22b8a7fdd4523a29cf4ef8181169ed", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,21 +7,21 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir;\n-use crate::rustc::hir::def::Def;\n-use crate::rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use crate::rustc_errors::Applicability;\n-use crate::syntax::ast::{Crate as AstCrate, Ident, ItemKind, Name};\n-use crate::syntax::source_map::Span;\n-use crate::syntax::symbol::LocalInternedString;\n use crate::utils::{\n     match_def_path, match_type, paths, span_help_and_lint, span_lint, span_lint_and_sugg, walk_ptrs_ty,\n };\n use if_chain::if_chain;\n+use rustc::hir;\n+use rustc::hir::def::Def;\n+use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use rustc::hir::*;\n+use rustc::lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_errors::Applicability;\n+use syntax::ast::{Crate as AstCrate, Ident, ItemKind, Name};\n+use syntax::source_map::Span;\n+use syntax::symbol::LocalInternedString;\n \n /// **What it does:** Checks for various things we like to keep tidy in clippy.\n ///"}, {"sha": "2c0af12818e4f652ba422c1d79e3513087dc51d6", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -8,35 +8,35 @@\n // except according to those terms.\n \n use crate::reexport::*;\n-use crate::rustc::hir;\n-use crate::rustc::hir::def::Def;\n-use crate::rustc::hir::def_id::{DefId, CRATE_DEF_INDEX};\n-use crate::rustc::hir::intravisit::{NestedVisitorMap, Visitor};\n-use crate::rustc::hir::Node;\n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, Level, Lint, LintContext};\n-use crate::rustc::session::Session;\n-use crate::rustc::traits;\n-use crate::rustc::ty::{\n+use if_chain::if_chain;\n+use matches::matches;\n+use rustc::hir;\n+use rustc::hir::def::Def;\n+use rustc::hir::def_id::{DefId, CRATE_DEF_INDEX};\n+use rustc::hir::intravisit::{NestedVisitorMap, Visitor};\n+use rustc::hir::Node;\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, Level, Lint, LintContext};\n+use rustc::session::Session;\n+use rustc::traits;\n+use rustc::ty::{\n     self,\n     layout::{self, IntegerExt},\n     subst::Kind,\n     Binder, Ty, TyCtxt,\n };\n-use crate::rustc_errors::{Applicability, CodeSuggestion, Substitution, SubstitutionPart};\n-use crate::syntax::ast::{self, LitKind};\n-use crate::syntax::attr;\n-use crate::syntax::errors::DiagnosticBuilder;\n-use crate::syntax::source_map::{Span, DUMMY_SP};\n-use crate::syntax::symbol;\n-use crate::syntax::symbol::{keywords, Symbol};\n-use if_chain::if_chain;\n-use matches::matches;\n+use rustc_errors::{Applicability, CodeSuggestion, Substitution, SubstitutionPart};\n use std::borrow::Cow;\n use std::env;\n use std::mem;\n use std::rc::Rc;\n use std::str::FromStr;\n+use syntax::ast::{self, LitKind};\n+use syntax::attr;\n+use syntax::errors::DiagnosticBuilder;\n+use syntax::source_map::{Span, DUMMY_SP};\n+use syntax::symbol;\n+use syntax::symbol::{keywords, Symbol};\n \n pub mod camel_case;\n "}, {"sha": "3f589c3b6870b591ee7ff9f96297e7a4e0285a97", "filename": "clippy_lints/src/utils/ptr.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Futils%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Futils%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fptr.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,13 +7,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n-use crate::rustc::hir::*;\n-use crate::rustc::lint::LateContext;\n-use crate::syntax::ast::Name;\n-use crate::syntax::source_map::Span;\n use crate::utils::{get_pat_name, match_var, snippet};\n+use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use rustc::hir::*;\n+use rustc::lint::LateContext;\n use std::borrow::Cow;\n+use syntax::ast::Name;\n+use syntax::source_map::Span;\n \n pub fn get_spans(\n     cx: &LateContext<'_, '_>,"}, {"sha": "a8bc0f3fca1804b84680f62508b7d734e3f1a83e", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -10,22 +10,22 @@\n //! Contains utility functions to generate suggestions.\n #![deny(clippy::missing_docs_in_private_items)]\n \n-use crate::rustc::hir;\n-use crate::rustc::lint::{EarlyContext, LateContext, LintContext};\n-use crate::rustc_errors;\n-use crate::rustc_errors::Applicability;\n-use crate::syntax::ast;\n-use crate::syntax::parse::token;\n-use crate::syntax::print::pprust::token_to_string;\n-use crate::syntax::source_map::{CharPos, Span};\n-use crate::syntax::util::parser::AssocOp;\n-use crate::syntax_pos::{BytePos, Pos};\n use crate::utils::{higher, in_macro, snippet, snippet_opt};\n use matches::matches;\n+use rustc::hir;\n+use rustc::lint::{EarlyContext, LateContext, LintContext};\n+use rustc_errors;\n+use rustc_errors::Applicability;\n use std;\n use std::borrow::Cow;\n use std::convert::TryInto;\n use std::fmt::Display;\n+use syntax::ast;\n+use syntax::parse::token;\n+use syntax::print::pprust::token_to_string;\n+use syntax::source_map::{CharPos, Span};\n+use syntax::util::parser::AssocOp;\n+use syntax_pos::{BytePos, Pos};\n \n /// A helper type to build suggestion correctly handling parenthesis.\n pub enum Sugg<'a> {\n@@ -122,7 +122,7 @@ impl<'a> Sugg<'a> {\n \n     /// Prepare a suggestion from an expression.\n     pub fn ast(cx: &EarlyContext<'_>, expr: &ast::Expr, default: &'a str) -> Self {\n-        use crate::syntax::ast::RangeLimits;\n+        use syntax::ast::RangeLimits;\n \n         let snippet = snippet(cx, expr.span, default);\n \n@@ -407,7 +407,7 @@ enum Associativity {\n /// they are considered\n /// associative.\n fn associativity(op: &AssocOp) -> Associativity {\n-    use crate::syntax::util::parser::AssocOp::*;\n+    use syntax::util::parser::AssocOp::*;\n \n     match *op {\n         ObsoleteInPlace | Assign | AssignOp(_) => Associativity::Right,\n@@ -420,7 +420,7 @@ fn associativity(op: &AssocOp) -> Associativity {\n \n /// Convert a `hir::BinOp` to the corresponding assigning binary operator.\n fn hirbinop2assignop(op: hir::BinOp) -> AssocOp {\n-    use crate::syntax::parse::token::BinOpToken::*;\n+    use syntax::parse::token::BinOpToken::*;\n \n     AssocOp::AssignOp(match op.node {\n         hir::BinOpKind::Add => Plus,\n@@ -447,8 +447,8 @@ fn hirbinop2assignop(op: hir::BinOp) -> AssocOp {\n \n /// Convert an `ast::BinOp` to the corresponding assigning binary operator.\n fn astbinop2assignop(op: ast::BinOp) -> AssocOp {\n-    use crate::syntax::ast::BinOpKind::*;\n-    use crate::syntax::parse::token::BinOpToken;\n+    use syntax::ast::BinOpKind::*;\n+    use syntax::parse::token::BinOpToken;\n \n     AssocOp::AssignOp(match op.node {\n         Add => BinOpToken::Plus,"}, {"sha": "e4d3fa29996a5d208e4e4fa27b8c7c670c2e0bf7", "filename": "clippy_lints/src/utils/usage.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Futils%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Futils%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fusage.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,17 +7,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::lint::LateContext;\n+use rustc::lint::LateContext;\n \n-use crate::rustc::hir::def::Def;\n-use crate::rustc::hir::*;\n-use crate::rustc::middle::expr_use_visitor::*;\n-use crate::rustc::middle::mem_categorization::cmt_;\n-use crate::rustc::middle::mem_categorization::Categorization;\n-use crate::rustc::ty;\n-use crate::rustc_data_structures::fx::FxHashSet;\n-use crate::syntax::ast::NodeId;\n-use crate::syntax::source_map::Span;\n+use rustc::hir::def::Def;\n+use rustc::hir::*;\n+use rustc::middle::expr_use_visitor::*;\n+use rustc::middle::mem_categorization::cmt_;\n+use rustc::middle::mem_categorization::Categorization;\n+use rustc::ty;\n+use rustc_data_structures::fx::FxHashSet;\n+use syntax::ast::NodeId;\n+use syntax::source_map::Span;\n \n /// Returns a set of mutated local variable ids or None if mutations could not be determined.\n pub fn mutated_variables<'a, 'tcx: 'a>(expr: &'tcx Expr, cx: &'a LateContext<'a, 'tcx>) -> Option<FxHashSet<NodeId>> {"}, {"sha": "2f259bf8bca76c897048bb90e4b7cd1176350302", "filename": "clippy_lints/src/vec.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -8,14 +8,14 @@\n // except according to those terms.\n \n use crate::consts::constant;\n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::ty::{self, Ty};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_errors::Applicability;\n-use crate::syntax::source_map::Span;\n use crate::utils::{higher, is_copy, snippet_with_applicability, span_lint_and_sugg};\n use if_chain::if_chain;\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::ty::{self, Ty};\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_errors::Applicability;\n+use syntax::source_map::Span;\n \n /// **What it does:** Checks for usage of `&vec![..]` when using `&[..]` would\n /// be possible."}, {"sha": "38bce9da932323a7a30b3e3fcedf1af7ab89f8b4", "filename": "clippy_lints/src/wildcard_dependencies.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fwildcard_dependencies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fwildcard_dependencies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwildcard_dependencies.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,10 +7,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::syntax::{ast::*, source_map::DUMMY_SP};\n use crate::utils::span_lint;\n+use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use syntax::{ast::*, source_map::DUMMY_SP};\n \n use cargo_metadata;\n use if_chain::if_chain;"}, {"sha": "6531e71a9fa6beb0c38aafd2d06f6f969aff5f55", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -7,14 +7,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::rustc_errors::Applicability;\n-use crate::syntax::ast::*;\n-use crate::syntax::parse::{parser, token};\n-use crate::syntax::tokenstream::{ThinTokenStream, TokenStream};\n use crate::utils::{snippet_with_applicability, span_lint, span_lint_and_sugg};\n+use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n+use rustc_errors::Applicability;\n use std::borrow::Cow;\n+use syntax::ast::*;\n+use syntax::parse::{parser, token};\n+use syntax::tokenstream::{ThinTokenStream, TokenStream};\n \n /// **What it does:** This lint warns when you use `println!(\"\")` to\n /// print a newline.\n@@ -271,7 +271,7 @@ impl EarlyLintPass for Pass {\n /// (Some(\"string to write: {}\"), Some(buf))\n /// ```\n fn check_tts<'a>(cx: &EarlyContext<'a>, tts: &ThinTokenStream, is_write: bool) -> (Option<String>, Option<Expr>) {\n-    use crate::fmt_macros::*;\n+    use fmt_macros::*;\n     let tts = TokenStream::from(tts.clone());\n     let mut parser = parser::Parser::new(&cx.sess.parse_sess, tts, None, false, false);\n     let mut expr: Option<Expr> = None;"}, {"sha": "93606e378d982d289157af8317d53f69f00c84d6", "filename": "clippy_lints/src/zero_div_zero.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fzero_div_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/clippy_lints%2Fsrc%2Fzero_div_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fzero_div_zero.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -8,11 +8,11 @@\n // except according to those terms.\n \n use crate::consts::{constant_simple, Constant};\n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n use crate::utils::span_help_and_lint;\n use if_chain::if_chain;\n+use rustc::hir::*;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_tool_lint, lint_array};\n \n /// **What it does:** Checks for `0.0 / 0.0`.\n ///"}, {"sha": "00e2f043cbbc2e07926290c93d70d22faaefb444", "filename": "tests/matches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/tests%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a/tests%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmatches.rs?ref=3f62fc3a7e2539e6bfeccbf1cce36ed83e8ab18a", "patch": "@@ -15,8 +15,8 @@ use std::collections::Bound;\n \n #[test]\n fn test_overlapping() {\n-    use crate::syntax::source_map::DUMMY_SP;\n     use clippy_lints::matches::overlapping;\n+    use syntax::source_map::DUMMY_SP;\n \n     let sp = |s, e| clippy_lints::matches::SpannedRange {\n         span: DUMMY_SP,"}]}