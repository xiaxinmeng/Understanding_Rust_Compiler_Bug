{"sha": "caeea3f0a21574419254c72b3e0863742d3c6fd0", "node_id": "C_kwDOAAsO6NoAKGNhZWVhM2YwYTIxNTc0NDE5MjU0YzcyYjNlMDg2Mzc0MmQzYzZmZDA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-13T06:13:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-13T06:13:43Z"}, "message": "Auto merge of #112575 - matthiaskrgr:rollup-7a8d7tg, r=matthiaskrgr\n\nRollup of 2 pull requests\n\nSuccessful merges:\n\n - #111885 (Don't ICE on unsized `extern \"rust-call\"` call)\n - #112558 (Fix typo in mod.rs)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "dbc47fdf3226927f4e15ee1a32d1eecd7a070bbf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbc47fdf3226927f4e15ee1a32d1eecd7a070bbf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/caeea3f0a21574419254c72b3e0863742d3c6fd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/caeea3f0a21574419254c72b3e0863742d3c6fd0", "html_url": "https://github.com/rust-lang/rust/commit/caeea3f0a21574419254c72b3e0863742d3c6fd0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/caeea3f0a21574419254c72b3e0863742d3c6fd0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de1ff0a8b559c300fb8145123accdfa8bda1031e", "url": "https://api.github.com/repos/rust-lang/rust/commits/de1ff0a8b559c300fb8145123accdfa8bda1031e", "html_url": "https://github.com/rust-lang/rust/commit/de1ff0a8b559c300fb8145123accdfa8bda1031e"}, {"sha": "aee8e10a26ea1dd76c2ea11ace36f642c9f2ac50", "url": "https://api.github.com/repos/rust-lang/rust/commits/aee8e10a26ea1dd76c2ea11ace36f642c9f2ac50", "html_url": "https://github.com/rust-lang/rust/commit/aee8e10a26ea1dd76c2ea11ace36f642c9f2ac50"}], "stats": {"total": 44, "additions": 41, "deletions": 3}, "files": [{"sha": "4554d167080bd91573b10063a5275408dd4dbe28", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/caeea3f0a21574419254c72b3e0863742d3c6fd0/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caeea3f0a21574419254c72b3e0863742d3c6fd0/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=caeea3f0a21574419254c72b3e0863742d3c6fd0", "patch": "@@ -1449,14 +1449,20 @@ fn check_fn_or_method<'tcx>(\n         let span = tcx.def_span(def_id);\n         let has_implicit_self = hir_decl.implicit_self != hir::ImplicitSelfKind::None;\n         let mut inputs = sig.inputs().iter().skip(if has_implicit_self { 1 } else { 0 });\n-        // Check that the argument is a tuple\n+        // Check that the argument is a tuple and is sized\n         if let Some(ty) = inputs.next() {\n             wfcx.register_bound(\n                 ObligationCause::new(span, wfcx.body_def_id, ObligationCauseCode::RustCall),\n                 wfcx.param_env,\n                 *ty,\n                 tcx.require_lang_item(hir::LangItem::Tuple, Some(span)),\n             );\n+            wfcx.register_bound(\n+                ObligationCause::new(span, wfcx.body_def_id, ObligationCauseCode::RustCall),\n+                wfcx.param_env,\n+                *ty,\n+                tcx.require_lang_item(hir::LangItem::Sized, Some(span)),\n+            );\n         } else {\n             tcx.sess.span_err(\n                 hir_decl.inputs.last().map_or(span, |input| input.span),"}, {"sha": "9da72aae77660d10c6dde008c08efa62f8d69256", "filename": "compiler/rustc_hir_typeck/src/callee.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/caeea3f0a21574419254c72b3e0863742d3c6fd0/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caeea3f0a21574419254c72b3e0863742d3c6fd0/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs?ref=caeea3f0a21574419254c72b3e0863742d3c6fd0", "patch": "@@ -470,6 +470,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     self.tcx.require_lang_item(hir::LangItem::Tuple, Some(sp)),\n                     traits::ObligationCause::new(sp, self.body_id, traits::RustCall),\n                 );\n+                self.require_type_is_sized(ty, sp, traits::RustCall);\n             } else {\n                 self.tcx.sess.span_err(\n                         sp,"}, {"sha": "5783383e93e3eb089c402f9931bab9292fd09e45", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/caeea3f0a21574419254c72b3e0863742d3c6fd0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caeea3f0a21574419254c72b3e0863742d3c6fd0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=caeea3f0a21574419254c72b3e0863742d3c6fd0", "patch": "@@ -2663,9 +2663,15 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             | ObligationCauseCode::LetElse\n             | ObligationCauseCode::BinOp { .. }\n             | ObligationCauseCode::AscribeUserTypeProvePredicate(..)\n-            | ObligationCauseCode::RustCall\n             | ObligationCauseCode::DropImpl\n             | ObligationCauseCode::ConstParam(_) => {}\n+            ObligationCauseCode::RustCall => {\n+                if let Some(pred) = predicate.to_opt_poly_trait_pred()\n+                    && Some(pred.def_id()) == self.tcx.lang_items().sized_trait()\n+                {\n+                    err.note(\"argument required to be sized due to `extern \\\"rust-call\\\"` ABI\");\n+                }\n+            }\n             ObligationCauseCode::SliceOrArrayElem => {\n                 err.note(\"slice and array elements must have `Sized` type\");\n             }"}, {"sha": "1230bb5deed02f69a6d75bf7878177354668c09b", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/caeea3f0a21574419254c72b3e0863742d3c6fd0/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caeea3f0a21574419254c72b3e0863742d3c6fd0/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=caeea3f0a21574419254c72b3e0863742d3c6fd0", "patch": "@@ -195,7 +195,7 @@ mod local;\n \n cfg_if::cfg_if! {\n     if #[cfg(test)] {\n-        // Avoid duplicating the global state assoicated with thread-locals between this crate and\n+        // Avoid duplicating the global state associated with thread-locals between this crate and\n         // realstd. Miri relies on this.\n         pub use realstd::thread::{local_impl, AccessError, LocalKey};\n     } else {"}, {"sha": "ff4075aa4c03cc329ffbebac93bed36d877d02c7", "filename": "tests/ui/unsized-locals/rust-call.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/caeea3f0a21574419254c72b3e0863742d3c6fd0/tests%2Fui%2Funsized-locals%2Frust-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caeea3f0a21574419254c72b3e0863742d3c6fd0/tests%2Fui%2Funsized-locals%2Frust-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsized-locals%2Frust-call.rs?ref=caeea3f0a21574419254c72b3e0863742d3c6fd0", "patch": "@@ -0,0 +1,12 @@\n+#![feature(unsized_tuple_coercion)]\n+#![feature(unboxed_closures)]\n+#![feature(unsized_fn_params)]\n+\n+fn bad() -> extern \"rust-call\" fn(([u8],)) { todo!() }\n+\n+fn main() {\n+    let f = bad();\n+    let slice: Box<([u8],)> = Box::new(([1; 8],));\n+    f(*slice);\n+    //~^ ERROR the size for values of type `[u8]` cannot be known at compilation time\n+}"}, {"sha": "fff7ef75b3322b044ea6af7de13ad5c9f1895cb5", "filename": "tests/ui/unsized-locals/rust-call.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/caeea3f0a21574419254c72b3e0863742d3c6fd0/tests%2Fui%2Funsized-locals%2Frust-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/caeea3f0a21574419254c72b3e0863742d3c6fd0/tests%2Fui%2Funsized-locals%2Frust-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsized-locals%2Frust-call.stderr?ref=caeea3f0a21574419254c72b3e0863742d3c6fd0", "patch": "@@ -0,0 +1,13 @@\n+error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n+  --> $DIR/rust-call.rs:10:7\n+   |\n+LL |     f(*slice);\n+   |       ^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: within `([u8],)`, the trait `Sized` is not implemented for `[u8]`\n+   = note: required because it appears within the type `([u8],)`\n+   = note: argument required to be sized due to `extern \"rust-call\"` ABI\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}