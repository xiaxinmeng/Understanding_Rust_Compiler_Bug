{"sha": "59237ec66526101e895f6b3430be780aa44c9d9d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5MjM3ZWM2NjUyNjEwMWU4OTVmNmIzNDMwYmU3ODBhYTQ0YzlkOWQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-05T10:11:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-05T10:11:16Z"}, "message": "Rollup merge of #64083 - estebank:tweak-e0308, r=oli-obk\n\nPoint at appropriate arm on type error on if/else/match with one non-! arm\n\nFix https://github.com/rust-lang/rust/issues/61281.", "tree": {"sha": "12a6407550dda49d38b927a54573e1c2983819b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12a6407550dda49d38b927a54573e1c2983819b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59237ec66526101e895f6b3430be780aa44c9d9d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdcN9ECRBK7hj4Ov3rIwAAdHIIAJnFUfHoI9vardgErfYZyWJs\n+2UA3MVQLB8g8vmLjdNl0nY548GrH7yi8KvUxOjSZvkO//KGffl9h5KP3g6MC4Ln\nMc+lGX8suqM7834qepIiy4PdpKtYr/YnrgEo4madstaQbSnwMwfcu2okB64CMwXG\nJYHcmXB7mF2TOjwIiZHOUcoYQrkPA6du38kvJACzhh77sL6h6abmR4LkzpHPB+7m\n0JHtjJ8JCu77UhAh8xI1kf08BuUq9Pb8ZTeo72wCZ+AsGYhI9or88hjuuFql++2d\n9DsDqNQgZziwmYcDG3cekJFLCqyM7eYiCQJxHDxp/6xauatlTRCBNJ3pWemVtbI=\n=Q55c\n-----END PGP SIGNATURE-----\n", "payload": "tree 12a6407550dda49d38b927a54573e1c2983819b8\nparent 2238d1951556af3f54cd102b79fe017143f96ccd\nparent c430d743e90967e621e27cdbb8bd64de67969ca6\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1567678276 +0200\ncommitter GitHub <noreply@github.com> 1567678276 +0200\n\nRollup merge of #64083 - estebank:tweak-e0308, r=oli-obk\n\nPoint at appropriate arm on type error on if/else/match with one non-! arm\n\nFix https://github.com/rust-lang/rust/issues/61281.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59237ec66526101e895f6b3430be780aa44c9d9d", "html_url": "https://github.com/rust-lang/rust/commit/59237ec66526101e895f6b3430be780aa44c9d9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59237ec66526101e895f6b3430be780aa44c9d9d/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2238d1951556af3f54cd102b79fe017143f96ccd", "url": "https://api.github.com/repos/rust-lang/rust/commits/2238d1951556af3f54cd102b79fe017143f96ccd", "html_url": "https://github.com/rust-lang/rust/commit/2238d1951556af3f54cd102b79fe017143f96ccd"}, {"sha": "c430d743e90967e621e27cdbb8bd64de67969ca6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c430d743e90967e621e27cdbb8bd64de67969ca6", "html_url": "https://github.com/rust-lang/rust/commit/c430d743e90967e621e27cdbb8bd64de67969ca6"}], "stats": {"total": 142, "additions": 123, "deletions": 19}, "files": [{"sha": "d8d01624f1d56d836f4954efc781ca4da6cb9a5c", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 37, "deletions": 6, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/59237ec66526101e895f6b3430be780aa44c9d9d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59237ec66526101e895f6b3430be780aa44c9d9d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=59237ec66526101e895f6b3430be780aa44c9d9d", "patch": "@@ -3687,6 +3687,40 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    /// If `expr` is a `match` expression that has only one non-`!` arm, use that arm's tail\n+    /// expression's `Span`, otherwise return `expr.span`. This is done to give better errors\n+    /// when given code like the following:\n+    /// ```text\n+    /// if false { return 0i32; } else { 1u32 }\n+    /// //                               ^^^^ point at this instead of the whole `if` expression\n+    /// ```\n+    fn get_expr_coercion_span(&self, expr: &hir::Expr) -> syntax_pos::Span {\n+        if let hir::ExprKind::Match(_, arms, _) = &expr.node {\n+            let arm_spans: Vec<Span> = arms.iter().filter_map(|arm| {\n+                self.in_progress_tables\n+                    .and_then(|tables| tables.borrow().node_type_opt(arm.body.hir_id))\n+                    .and_then(|arm_ty| {\n+                        if arm_ty.is_never() {\n+                            None\n+                        } else {\n+                            Some(match &arm.body.node {\n+                                // Point at the tail expression when possible.\n+                                hir::ExprKind::Block(block, _) => block.expr\n+                                    .as_ref()\n+                                    .map(|e| e.span)\n+                                    .unwrap_or(block.span),\n+                                _ => arm.body.span,\n+                            })\n+                        }\n+                    })\n+            }).collect();\n+            if arm_spans.len() == 1 {\n+                return arm_spans[0];\n+            }\n+        }\n+        expr.span\n+    }\n+\n     fn check_block_with_expected(\n         &self,\n         blk: &'tcx hir::Block,\n@@ -3746,12 +3780,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let coerce = ctxt.coerce.as_mut().unwrap();\n             if let Some(tail_expr_ty) = tail_expr_ty {\n                 let tail_expr = tail_expr.unwrap();\n-                let cause = self.cause(tail_expr.span,\n-                                       ObligationCauseCode::BlockTailExpression(blk.hir_id));\n-                coerce.coerce(self,\n-                              &cause,\n-                              tail_expr,\n-                              tail_expr_ty);\n+                let span = self.get_expr_coercion_span(tail_expr);\n+                let cause = self.cause(span, ObligationCauseCode::BlockTailExpression(blk.hir_id));\n+                coerce.coerce(self, &cause, tail_expr, tail_expr_ty);\n             } else {\n                 // Subtle: if there is no explicit tail expression,\n                 // that is typically equivalent to a tail expression"}, {"sha": "58109be447e0727d3e86b7360400f4355cd94a4f", "filename": "src/test/ui/point-to-type-err-cause-on-impl-trait-return.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/59237ec66526101e895f6b3430be780aa44c9d9d/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59237ec66526101e895f6b3430be780aa44c9d9d/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.rs?ref=59237ec66526101e895f6b3430be780aa44c9d9d", "patch": "@@ -17,10 +17,10 @@ fn bar() -> impl std::fmt::Display {\n \n fn baz() -> impl std::fmt::Display {\n     if false {\n-    //~^ ERROR mismatched types\n         return 0i32;\n     } else {\n         1u32\n+        //~^ ERROR mismatched types\n     }\n }\n \n@@ -33,4 +33,33 @@ fn qux() -> impl std::fmt::Display {\n     }\n }\n \n+fn bat() -> impl std::fmt::Display {\n+    match 13 {\n+        0 => return 0i32,\n+        _ => 1u32,\n+        //~^ ERROR mismatched types\n+    }\n+}\n+\n+fn can() -> impl std::fmt::Display {\n+    match 13 {\n+    //~^ ERROR mismatched types\n+        0 => return 0i32,\n+        1 => 1u32,\n+        _ => 2u32,\n+    }\n+}\n+\n+fn cat() -> impl std::fmt::Display {\n+    match 13 {\n+        0 => {\n+            return 0i32;\n+        }\n+        _ => {\n+            1u32\n+            //~^ ERROR mismatched types\n+        }\n+    }\n+}\n+\n fn main() {}"}, {"sha": "314ff84ae3c4696dc1c79ec4296836f4edc551ed", "filename": "src/test/ui/point-to-type-err-cause-on-impl-trait-return.stderr", "status": "modified", "additions": 56, "deletions": 12, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/59237ec66526101e895f6b3430be780aa44c9d9d/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59237ec66526101e895f6b3430be780aa44c9d9d/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr?ref=59237ec66526101e895f6b3430be780aa44c9d9d", "patch": "@@ -29,18 +29,16 @@ LL |         return 1u32;\n               found type `u32`\n \n error[E0308]: mismatched types\n-  --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:19:5\n+  --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:22:9\n    |\n-LL |   fn baz() -> impl std::fmt::Display {\n-   |               ---------------------- expected because this return type...\n-LL | /     if false {\n-LL | |\n-LL | |         return 0i32;\n-   | |                ---- ...is found to be `i32` here\n-LL | |     } else {\n-LL | |         1u32\n-LL | |     }\n-   | |_____^ expected i32, found u32\n+LL | fn baz() -> impl std::fmt::Display {\n+   |             ---------------------- expected because this return type...\n+LL |     if false {\n+LL |         return 0i32;\n+   |                ---- ...is found to be `i32` here\n+LL |     } else {\n+LL |         1u32\n+   |         ^^^^ expected i32, found u32\n    |\n    = note: expected type `i32`\n               found type `u32`\n@@ -61,6 +59,52 @@ LL | |     }\n    = note: expected type `i32`\n               found type `u32`\n \n-error: aborting due to 4 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:39:14\n+   |\n+LL | fn bat() -> impl std::fmt::Display {\n+   |             ---------------------- expected because this return type...\n+LL |     match 13 {\n+LL |         0 => return 0i32,\n+   |                     ---- ...is found to be `i32` here\n+LL |         _ => 1u32,\n+   |              ^^^^ expected i32, found u32\n+   |\n+   = note: expected type `i32`\n+              found type `u32`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:45:5\n+   |\n+LL |   fn can() -> impl std::fmt::Display {\n+   |               ---------------------- expected because this return type...\n+LL | /     match 13 {\n+LL | |\n+LL | |         0 => return 0i32,\n+   | |                     ---- ...is found to be `i32` here\n+LL | |         1 => 1u32,\n+LL | |         _ => 2u32,\n+LL | |     }\n+   | |_____^ expected i32, found u32\n+   |\n+   = note: expected type `i32`\n+              found type `u32`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:59:13\n+   |\n+LL | fn cat() -> impl std::fmt::Display {\n+   |             ---------------------- expected because this return type...\n+...\n+LL |             return 0i32;\n+   |                    ---- ...is found to be `i32` here\n+...\n+LL |             1u32\n+   |             ^^^^ expected i32, found u32\n+   |\n+   = note: expected type `i32`\n+              found type `u32`\n+\n+error: aborting due to 7 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}]}