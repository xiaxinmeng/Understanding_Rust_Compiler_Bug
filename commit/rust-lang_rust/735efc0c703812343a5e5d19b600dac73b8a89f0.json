{"sha": "735efc0c703812343a5e5d19b600dac73b8a89f0", "node_id": "C_kwDOAAsO6NoAKDczNWVmYzBjNzAzODEyMzQzYTVlNWQxOWI2MDBkYWM3M2I4YTg5ZjA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-17T09:39:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-17T09:39:26Z"}, "message": "Auto merge of #97012 - oli-obk:\ud83e\udd80_intrinsics, r=davidtwco\n\nAdd a query for checking whether a function is an intrinsic.\n\nwork towards #93145\n\nThis will reduce churn when we add more ways to declare intrinsics\n\nr? `@scottmcm`", "tree": {"sha": "59db2d0d1eba880d8a0b83c2e1a64d346a288551", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59db2d0d1eba880d8a0b83c2e1a64d346a288551"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/735efc0c703812343a5e5d19b600dac73b8a89f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/735efc0c703812343a5e5d19b600dac73b8a89f0", "html_url": "https://github.com/rust-lang/rust/commit/735efc0c703812343a5e5d19b600dac73b8a89f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/735efc0c703812343a5e5d19b600dac73b8a89f0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7355d971a954ed63293e4191f6677f60c1bc07d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/7355d971a954ed63293e4191f6677f60c1bc07d9", "html_url": "https://github.com/rust-lang/rust/commit/7355d971a954ed63293e4191f6677f60c1bc07d9"}, {"sha": "0a6b69106eb1df116404a3be123baf100e6cdf21", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a6b69106eb1df116404a3be123baf100e6cdf21", "html_url": "https://github.com/rust-lang/rust/commit/0a6b69106eb1df116404a3be123baf100e6cdf21"}], "stats": {"total": 95, "additions": 51, "deletions": 44}, "files": [{"sha": "777f4393458e2b3f4033790c02d1e98366ef5de5", "filename": "compiler/rustc_const_eval/src/const_eval/fn_queries.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/735efc0c703812343a5e5d19b600dac73b8a89f0/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735efc0c703812343a5e5d19b600dac73b8a89f0/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs?ref=735efc0c703812343a5e5d19b600dac73b8a89f0", "patch": "@@ -4,7 +4,6 @@ use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{DefIdTree, TyCtxt};\n use rustc_span::symbol::Symbol;\n-use rustc_target::spec::abi::Abi;\n \n /// Whether the `def_id` is an unstable const fn and what feature gate is necessary to enable it\n pub fn is_unstable_const_fn(tcx: TyCtxt<'_>, def_id: DefId) -> Option<Symbol> {\n@@ -34,10 +33,7 @@ fn impl_constness(tcx: TyCtxt<'_>, def_id: DefId) -> hir::Constness {\n         hir::Node::ForeignItem(hir::ForeignItem { kind: hir::ForeignItemKind::Fn(..), .. }) => {\n             // Intrinsics use `rustc_const_{un,}stable` attributes to indicate constness. All other\n             // foreign items cannot be evaluated at compile-time.\n-            let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n-            let is_const = if let Abi::RustIntrinsic | Abi::PlatformIntrinsic =\n-                tcx.hir().get_foreign_abi(hir_id)\n-            {\n+            let is_const = if tcx.is_intrinsic(def_id) {\n                 tcx.lookup_const_stability(def_id).is_some()\n             } else {\n                 false"}, {"sha": "25f9d4baca30446b1743ccd910e0f6d83d77494f", "filename": "compiler/rustc_const_eval/src/interpret/terminator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/735efc0c703812343a5e5d19b600dac73b8a89f0/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735efc0c703812343a5e5d19b600dac73b8a89f0/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs?ref=735efc0c703812343a5e5d19b600dac73b8a89f0", "patch": "@@ -312,8 +312,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         };\n \n         match instance.def {\n-            ty::InstanceDef::Intrinsic(..) => {\n-                assert!(caller_abi == Abi::RustIntrinsic || caller_abi == Abi::PlatformIntrinsic);\n+            ty::InstanceDef::Intrinsic(def_id) => {\n+                assert!(self.tcx.is_intrinsic(def_id));\n                 // caller_fn_abi is not relevant here, we interpret the arguments directly for each intrinsic.\n                 M::call_intrinsic(self, instance, args, ret, unwind)\n             }"}, {"sha": "1104bbf4716826d24aea7b647423598f90496a8c", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/735efc0c703812343a5e5d19b600dac73b8a89f0/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735efc0c703812343a5e5d19b600dac73b8a89f0/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=735efc0c703812343a5e5d19b600dac73b8a89f0", "patch": "@@ -702,8 +702,6 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n \n     #[instrument(level = \"debug\", skip(self))]\n     fn visit_terminator(&mut self, terminator: &Terminator<'tcx>, location: Location) {\n-        use rustc_target::spec::abi::Abi::RustIntrinsic;\n-\n         self.super_terminator(terminator, location);\n \n         match &terminator.kind {\n@@ -885,7 +883,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                     return;\n                 }\n \n-                let is_intrinsic = tcx.fn_sig(callee).abi() == RustIntrinsic;\n+                let is_intrinsic = tcx.is_intrinsic(callee);\n \n                 if !tcx.is_const_fn_raw(callee) {\n                     if tcx.trait_of_item(callee).is_some() {"}, {"sha": "585edfc47e1b8c2743f8cf1ccb95c90132c3c439", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/735efc0c703812343a5e5d19b600dac73b8a89f0/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735efc0c703812343a5e5d19b600dac73b8a89f0/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=735efc0c703812343a5e5d19b600dac73b8a89f0", "patch": "@@ -1252,7 +1252,6 @@ declare_lint_pass!(MutableTransmutes => [MUTABLE_TRANSMUTES]);\n \n impl<'tcx> LateLintPass<'tcx> for MutableTransmutes {\n     fn check_expr(&mut self, cx: &LateContext<'_>, expr: &hir::Expr<'_>) {\n-        use rustc_target::spec::abi::Abi::RustIntrinsic;\n         if let Some((&ty::Ref(_, _, from_mt), &ty::Ref(_, _, to_mt))) =\n             get_transmute_from_to(cx, expr).map(|(ty1, ty2)| (ty1.kind(), ty2.kind()))\n         {\n@@ -1287,8 +1286,7 @@ impl<'tcx> LateLintPass<'tcx> for MutableTransmutes {\n         }\n \n         fn def_id_is_transmute(cx: &LateContext<'_>, def_id: DefId) -> bool {\n-            cx.tcx.fn_sig(def_id).abi() == RustIntrinsic\n-                && cx.tcx.item_name(def_id) == sym::transmute\n+            cx.tcx.is_intrinsic(def_id) && cx.tcx.item_name(def_id) == sym::transmute\n         }\n     }\n }"}, {"sha": "de1e96ebfe722ed6388e1b342aceffc7a8c886ae", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/735efc0c703812343a5e5d19b600dac73b8a89f0/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735efc0c703812343a5e5d19b600dac73b8a89f0/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=735efc0c703812343a5e5d19b600dac73b8a89f0", "patch": "@@ -1752,6 +1752,10 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n     fn get_may_have_doc_links(self, index: DefIndex) -> bool {\n         self.root.tables.may_have_doc_links.get(self, index).is_some()\n     }\n+\n+    fn get_is_intrinsic(self, index: DefIndex) -> bool {\n+        self.root.tables.is_intrinsic.get(self, index).is_some()\n+    }\n }\n \n impl CrateMetadata {"}, {"sha": "065224a2a65d7570a8a4935c90487f0cab0d4b94", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/735efc0c703812343a5e5d19b600dac73b8a89f0/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735efc0c703812343a5e5d19b600dac73b8a89f0/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=735efc0c703812343a5e5d19b600dac73b8a89f0", "patch": "@@ -224,6 +224,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n         tcx.arena.alloc_slice(&result)\n     }\n     defined_lib_features => { cdata.get_lib_features(tcx) }\n+    is_intrinsic => { cdata.get_is_intrinsic(def_id.index) }\n     defined_lang_items => { cdata.get_lang_items(tcx) }\n     diagnostic_items => { cdata.get_diagnostic_items() }\n     missing_lang_items => { cdata.get_missing_lang_items(tcx) }"}, {"sha": "39e6ddb316d71b7a830b0d1c9063d195f240b0c9", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/735efc0c703812343a5e5d19b600dac73b8a89f0/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735efc0c703812343a5e5d19b600dac73b8a89f0/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=735efc0c703812343a5e5d19b600dac73b8a89f0", "patch": "@@ -1318,6 +1318,9 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         }\n         if impl_item.kind == ty::AssocKind::Fn {\n             record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));\n+            if tcx.is_intrinsic(def_id) {\n+                self.tables.is_intrinsic.set(def_id.index, ());\n+            }\n         }\n     }\n \n@@ -1562,6 +1565,9 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         }\n         if let hir::ItemKind::Fn(..) = item.kind {\n             record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));\n+            if tcx.is_intrinsic(def_id) {\n+                self.tables.is_intrinsic.set(def_id.index, ());\n+            }\n         }\n         if let hir::ItemKind::Impl { .. } = item.kind {\n             if let Some(trait_ref) = self.tcx.impl_trait_ref(def_id) {\n@@ -1958,6 +1964,9 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         self.encode_item_type(def_id);\n         if let hir::ForeignItemKind::Fn(..) = nitem.kind {\n             record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));\n+            if tcx.is_intrinsic(def_id) {\n+                self.tables.is_intrinsic.set(def_id.index, ());\n+            }\n         }\n     }\n }"}, {"sha": "1c5774db579a58125267031ceb3025072cf3835d", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/735efc0c703812343a5e5d19b600dac73b8a89f0/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735efc0c703812343a5e5d19b600dac73b8a89f0/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=735efc0c703812343a5e5d19b600dac73b8a89f0", "patch": "@@ -340,6 +340,7 @@ define_tables! {\n     impl_parent: Table<DefIndex, RawDefId>,\n     impl_polarity: Table<DefIndex, ty::ImplPolarity>,\n     impl_constness: Table<DefIndex, hir::Constness>,\n+    is_intrinsic: Table<DefIndex, ()>,\n     impl_defaultness: Table<DefIndex, hir::Defaultness>,\n     // FIXME(eddyb) perhaps compute this on the fly if cheap enough?\n     coerce_unsized_info: Table<DefIndex, Lazy!(ty::adjustment::CoerceUnsizedInfo)>,"}, {"sha": "f133494caaa9a0510329a56849feaaadbe0d2124", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/735efc0c703812343a5e5d19b600dac73b8a89f0/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735efc0c703812343a5e5d19b600dac73b8a89f0/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=735efc0c703812343a5e5d19b600dac73b8a89f0", "patch": "@@ -1601,6 +1601,11 @@ rustc_queries! {\n         desc { \"calculating the lib features defined in a crate\" }\n         separate_provide_extern\n     }\n+    /// Whether the function is an intrinsic\n+    query is_intrinsic(def_id: DefId) -> bool {\n+        desc { |tcx| \"is_intrinsic({})\", tcx.def_path_str(def_id) }\n+        separate_provide_extern\n+    }\n     /// Returns the lang items defined in another crate by loading it from metadata.\n     query get_lang_items(_: ()) -> LanguageItems {\n         storage(ArenaCacheSelector<'tcx>)"}, {"sha": "3fa5a140090a83e8824b7a98cea91a096755e676", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/735efc0c703812343a5e5d19b600dac73b8a89f0/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735efc0c703812343a5e5d19b600dac73b8a89f0/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=735efc0c703812343a5e5d19b600dac73b8a89f0", "patch": "@@ -21,6 +21,7 @@ use rustc_hir::def_id::DefId;\n use rustc_macros::HashStable;\n use rustc_span::{sym, DUMMY_SP};\n use rustc_target::abi::{Integer, Size, TargetDataLayout};\n+use rustc_target::spec::abi::Abi;\n use smallvec::SmallVec;\n use std::{fmt, iter};\n \n@@ -1195,6 +1196,12 @@ pub fn is_doc_hidden(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n         .any(|items| items.iter().any(|item| item.has_name(sym::hidden)))\n }\n \n+/// Determines whether an item is an intrinsic by Abi.\n+pub fn is_intrinsic(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n+    matches!(tcx.fn_sig(def_id).abi(), Abi::RustIntrinsic | Abi::PlatformIntrinsic)\n+}\n+\n pub fn provide(providers: &mut ty::query::Providers) {\n-    *providers = ty::query::Providers { normalize_opaque_types, is_doc_hidden, ..*providers }\n+    *providers =\n+        ty::query::Providers { normalize_opaque_types, is_doc_hidden, is_intrinsic, ..*providers }\n }"}, {"sha": "2f884887ad9feeb69a0b50343ec886bb0bc9dbd8", "filename": "compiler/rustc_mir_dataflow/src/rustc_peek.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/735efc0c703812343a5e5d19b600dac73b8a89f0/compiler%2Frustc_mir_dataflow%2Fsrc%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735efc0c703812343a5e5d19b600dac73b8a89f0/compiler%2Frustc_mir_dataflow%2Fsrc%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Frustc_peek.rs?ref=735efc0c703812343a5e5d19b600dac73b8a89f0", "patch": "@@ -1,6 +1,5 @@\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n-use rustc_target::spec::abi::Abi;\n \n use rustc_index::bit_set::BitSet;\n use rustc_middle::mir::MirPass;\n@@ -193,9 +192,8 @@ impl PeekCall {\n             &terminator.kind\n         {\n             if let ty::FnDef(def_id, substs) = *func.literal.ty().kind() {\n-                let sig = tcx.fn_sig(def_id);\n                 let name = tcx.item_name(def_id);\n-                if sig.abi() != Abi::RustIntrinsic || name != sym::rustc_peek {\n+                if !tcx.is_intrinsic(def_id) || name != sym::rustc_peek {\n                     return None;\n                 }\n "}, {"sha": "5f8e6608ab5c4ad8bea1209f317dd6fa9c37f2e1", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/735efc0c703812343a5e5d19b600dac73b8a89f0/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735efc0c703812343a5e5d19b600dac73b8a89f0/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=735efc0c703812343a5e5d19b600dac73b8a89f0", "patch": "@@ -418,8 +418,7 @@ impl<'tcx> Inliner<'tcx> {\n                             }\n                         }\n                         // Don't give intrinsics the extra penalty for calls\n-                        let f = tcx.fn_sig(def_id);\n-                        if f.abi() == Abi::RustIntrinsic || f.abi() == Abi::PlatformIntrinsic {\n+                        if tcx.is_intrinsic(def_id) {\n                             cost += INSTR_COST;\n                         } else {\n                             cost += CALL_PENALTY;"}, {"sha": "d0d0e09d5255a9fb5d902fd7cb85235b591546a3", "filename": "compiler/rustc_mir_transform/src/lower_intrinsics.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/735efc0c703812343a5e5d19b600dac73b8a89f0/compiler%2Frustc_mir_transform%2Fsrc%2Flower_intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735efc0c703812343a5e5d19b600dac73b8a89f0/compiler%2Frustc_mir_transform%2Fsrc%2Flower_intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flower_intrinsics.rs?ref=735efc0c703812343a5e5d19b600dac73b8a89f0", "patch": "@@ -6,7 +6,6 @@ use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n-use rustc_target::spec::abi::Abi;\n \n pub struct LowerIntrinsics;\n \n@@ -139,8 +138,7 @@ fn resolve_rust_intrinsic<'tcx>(\n     func_ty: Ty<'tcx>,\n ) -> Option<(Symbol, SubstsRef<'tcx>)> {\n     if let ty::FnDef(def_id, substs) = *func_ty.kind() {\n-        let fn_sig = func_ty.fn_sig(tcx);\n-        if let Abi::RustIntrinsic | Abi::PlatformIntrinsic = fn_sig.abi() {\n+        if tcx.is_intrinsic(def_id) {\n             return Some((tcx.item_name(def_id), substs));\n         }\n     }"}, {"sha": "9c840777bafc11b25611f1b870324e0883bdc07b", "filename": "compiler/rustc_passes/src/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/735efc0c703812343a5e5d19b600dac73b8a89f0/compiler%2Frustc_passes%2Fsrc%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735efc0c703812343a5e5d19b600dac73b8a89f0/compiler%2Frustc_passes%2Fsrc%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fintrinsicck.rs?ref=735efc0c703812343a5e5d19b600dac73b8a89f0", "patch": "@@ -14,7 +14,6 @@ use rustc_session::lint;\n use rustc_span::{sym, Span, Symbol, DUMMY_SP};\n use rustc_target::abi::{Pointer, VariantIdx};\n use rustc_target::asm::{InlineAsmRegOrRegClass, InlineAsmType};\n-use rustc_target::spec::abi::Abi::RustIntrinsic;\n \n fn check_mod_intrinsics(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n     tcx.hir().deep_visit_item_likes_in_module(module_def_id, &mut ItemVisitor { tcx });\n@@ -63,8 +62,7 @@ fn unpack_option_like<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> Ty<'tcx> {\n \n impl<'tcx> ExprVisitor<'tcx> {\n     fn def_id_is_transmute(&self, def_id: DefId) -> bool {\n-        self.tcx.fn_sig(def_id).abi() == RustIntrinsic\n-            && self.tcx.item_name(def_id) == sym::transmute\n+        self.tcx.is_intrinsic(def_id) && self.tcx.item_name(def_id) == sym::transmute\n     }\n \n     fn check_transmute(&self, span: Span, from: Ty<'tcx>, to: Ty<'tcx>) {"}, {"sha": "17eac2bb2c9e937908c861a5e60c3cebd4c3bc58", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/735efc0c703812343a5e5d19b600dac73b8a89f0/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735efc0c703812343a5e5d19b600dac73b8a89f0/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=735efc0c703812343a5e5d19b600dac73b8a89f0", "patch": "@@ -5,7 +5,6 @@ use rustc_middle::traits::CodegenObligationError;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, Binder, Instance, Ty, TyCtxt, TypeFoldable, TypeVisitor};\n use rustc_span::{sym, DUMMY_SP};\n-use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::traits;\n use traits::{translate_substs, Reveal};\n \n@@ -155,12 +154,7 @@ fn inner_resolve_instance<'tcx>(\n         let item_type = tcx.subst_and_normalize_erasing_regions(substs, param_env, ty);\n \n         let def = match *item_type.kind() {\n-            ty::FnDef(..)\n-                if {\n-                    let f = item_type.fn_sig(tcx);\n-                    f.abi() == Abi::RustIntrinsic || f.abi() == Abi::PlatformIntrinsic\n-                } =>\n-            {\n+            ty::FnDef(def_id, ..) if tcx.is_intrinsic(def_id) => {\n                 debug!(\" => intrinsic\");\n                 ty::InstanceDef::Intrinsic(def.did)\n             }"}, {"sha": "57d30799354156cd4e1e5ae0541d76858d952d83", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/735efc0c703812343a5e5d19b600dac73b8a89f0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735efc0c703812343a5e5d19b600dac73b8a89f0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=735efc0c703812343a5e5d19b600dac73b8a89f0", "patch": "@@ -775,17 +775,19 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n         match b.kind() {\n             ty::FnPtr(b_sig) => {\n                 let a_sig = a.fn_sig(self.tcx);\n-                // Intrinsics are not coercible to function pointers\n-                if a_sig.abi() == Abi::RustIntrinsic || a_sig.abi() == Abi::PlatformIntrinsic {\n-                    return Err(TypeError::IntrinsicCast);\n-                }\n+                if let ty::FnDef(def_id, _) = *a.kind() {\n+                    // Intrinsics are not coercible to function pointers\n+                    if self.tcx.is_intrinsic(def_id) {\n+                        return Err(TypeError::IntrinsicCast);\n+                    }\n \n-                // Safe `#[target_feature]` functions are not assignable to safe fn pointers (RFC 2396).\n-                if let ty::FnDef(def_id, _) = *a.kind()\n-                    && b_sig.unsafety() == hir::Unsafety::Normal\n-                    && !self.tcx.codegen_fn_attrs(def_id).target_features.is_empty()\n-                {\n-                    return Err(TypeError::TargetFeatureCast(def_id));\n+                    // Safe `#[target_feature]` functions are not assignable to safe fn pointers (RFC 2396).\n+\n+                    if b_sig.unsafety() == hir::Unsafety::Normal\n+                        && !self.tcx.codegen_fn_attrs(def_id).target_features.is_empty()\n+                    {\n+                        return Err(TypeError::TargetFeatureCast(def_id));\n+                    }\n                 }\n \n                 let InferOk { value: a_sig, obligations: o1 } ="}, {"sha": "66d373a1bf81a79506dea1c10b526c88c18cb8c1", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/735efc0c703812343a5e5d19b600dac73b8a89f0/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735efc0c703812343a5e5d19b600dac73b8a89f0/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=735efc0c703812343a5e5d19b600dac73b8a89f0", "patch": "@@ -14,7 +14,6 @@ use rustc_middle::ty::{self, adjustment::PointerCast, Ty, TyCtxt};\n use rustc_semver::RustcVersion;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n-use rustc_target::spec::abi::Abi::RustIntrinsic;\n use std::borrow::Cow;\n \n type McfResult = Result<(), (Span, Cow<'static, str>)>;\n@@ -323,7 +322,7 @@ fn check_terminator<'a, 'tcx>(\n                 // within const fns. `transmute` is allowed in all other const contexts.\n                 // This won't really scale to more intrinsics or functions. Let's allow const\n                 // transmutes in const fn before we add more hacks to this.\n-                if tcx.fn_sig(fn_def_id).abi() == RustIntrinsic && tcx.item_name(fn_def_id) == sym::transmute {\n+                if tcx.is_intrinsic(fn_def_id) && tcx.item_name(fn_def_id) == sym::transmute {\n                     return Err((\n                         span,\n                         \"can only call `transmute` from const items, not `const fn`\".into(),"}]}