{"sha": "5ad7b914c0fe618c1499629e66ed0cf8d305449c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhZDdiOTE0YzBmZTYxOGMxNDk5NjI5ZTY2ZWQwY2Y4ZDMwNTQ0OWM=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2018-08-17T15:23:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-08-17T15:23:43Z"}, "message": "Rollup merge of #53407 - pnkfelix:partial-53351-make-more-ported-compile-fail-tests-more-robust-wrt-nll, r=nikomatsakis\n\nmake more ported compile fail tests more robust w.r.t. NLL\n\nThis is similar to PR #53369, except it covers a disjoint (and much smaller) set of tests that I needed to look at more carefully before being 100% certain they were the same kind of issue.", "tree": {"sha": "d13864bb92072e8ec8823c7406f8723e08c62b23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d13864bb92072e8ec8823c7406f8723e08c62b23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ad7b914c0fe618c1499629e66ed0cf8d305449c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbduh/CRBK7hj4Ov3rIwAAdHIIAGpMPqpGBRNwisel4hBxNj54\nD/4hg3+11L+G7zpAtN8nsaBZq9zhPLqF/biZDGnN07tjw6jnUF0XgSRZv5zrRnU/\n79FGSoR9QIvPQhxTxgqLefYY6RD1DBe3vzXMd9vTois9nHSrax5ZaFBOvv2MWTql\nUawgIOFsPiOHc2J7+lezjBQYj1NppIylqiVWboLSvHcfVQ5iQc+lBMEmJEwfsNvC\nJiAAoTvqCrFLjs9kmsJ/jgTW35lrxnBtPkI9ISc3tZg9GZw/lzJAgsdEj8cArTaZ\nZm2EUuRkdsaYTD1bbSdJflGfLFQIKW0XvxJ9ipgucJaicZE2FK/JUv/VTAP3b7k=\n=jMVC\n-----END PGP SIGNATURE-----\n", "payload": "tree d13864bb92072e8ec8823c7406f8723e08c62b23\nparent 4cdcb23581022b5e2aa4e220a6c0566f8908825d\nparent cd89fdbbc95621e27d77e0d53899b29a3f3a738d\nauthor Corey Farwell <coreyf@rwell.org> 1534519423 -0700\ncommitter GitHub <noreply@github.com> 1534519423 -0700\n\nRollup merge of #53407 - pnkfelix:partial-53351-make-more-ported-compile-fail-tests-more-robust-wrt-nll, r=nikomatsakis\n\nmake more ported compile fail tests more robust w.r.t. NLL\n\nThis is similar to PR #53369, except it covers a disjoint (and much smaller) set of tests that I needed to look at more carefully before being 100% certain they were the same kind of issue.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ad7b914c0fe618c1499629e66ed0cf8d305449c", "html_url": "https://github.com/rust-lang/rust/commit/5ad7b914c0fe618c1499629e66ed0cf8d305449c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ad7b914c0fe618c1499629e66ed0cf8d305449c/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cdcb23581022b5e2aa4e220a6c0566f8908825d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cdcb23581022b5e2aa4e220a6c0566f8908825d", "html_url": "https://github.com/rust-lang/rust/commit/4cdcb23581022b5e2aa4e220a6c0566f8908825d"}, {"sha": "cd89fdbbc95621e27d77e0d53899b29a3f3a738d", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd89fdbbc95621e27d77e0d53899b29a3f3a738d", "html_url": "https://github.com/rust-lang/rust/commit/cd89fdbbc95621e27d77e0d53899b29a3f3a738d"}], "stats": {"total": 259, "additions": 236, "deletions": 23}, "files": [{"sha": "c96799c85f20606117e71831f46ff5106b1ba233", "filename": "src/test/ui/borrowck/borrowck-closures-two-mut-fail.nll.stderr", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/5ad7b914c0fe618c1499629e66ed0cf8d305449c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut-fail.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ad7b914c0fe618c1499629e66ed0cf8d305449c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut-fail.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut-fail.nll.stderr?ref=5ad7b914c0fe618c1499629e66ed0cf8d305449c", "patch": "@@ -0,0 +1,75 @@\n+error[E0499]: cannot borrow `x` as mutable more than once at a time\n+  --> $DIR/borrowck-closures-two-mut-fail.rs:26:24\n+   |\n+LL |     let c1 = to_fn_mut(|| x = 4);\n+   |                        -- - first borrow occurs due to use of `x` in closure\n+   |                        |\n+   |                        first mutable borrow occurs here\n+LL |     let c2 = to_fn_mut(|| x = 5); //~ ERROR cannot borrow `x` as mutable more than once\n+   |                        ^^ - second borrow occurs due to use of `x` in closure\n+   |                        |\n+   |                        second mutable borrow occurs here\n+LL |     c1;\n+   |     -- borrow later used here\n+\n+error[E0499]: cannot borrow `x` as mutable more than once at a time\n+  --> $DIR/borrowck-closures-two-mut-fail.rs:37:24\n+   |\n+LL |     let c1 = to_fn_mut(|| set(&mut x));\n+   |                        --          - first borrow occurs due to use of `x` in closure\n+   |                        |\n+   |                        first mutable borrow occurs here\n+LL |     let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as mutable more than once\n+   |                        ^^          - second borrow occurs due to use of `x` in closure\n+   |                        |\n+   |                        second mutable borrow occurs here\n+LL |     c1;\n+   |     -- borrow later used here\n+\n+error[E0499]: cannot borrow `x` as mutable more than once at a time\n+  --> $DIR/borrowck-closures-two-mut-fail.rs:44:24\n+   |\n+LL |     let c1 = to_fn_mut(|| x = 5);\n+   |                        -- - first borrow occurs due to use of `x` in closure\n+   |                        |\n+   |                        first mutable borrow occurs here\n+LL |     let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as mutable more than once\n+   |                        ^^          - second borrow occurs due to use of `x` in closure\n+   |                        |\n+   |                        second mutable borrow occurs here\n+LL |     c1;\n+   |     -- borrow later used here\n+\n+error[E0499]: cannot borrow `x` as mutable more than once at a time\n+  --> $DIR/borrowck-closures-two-mut-fail.rs:51:24\n+   |\n+LL |     let c1 = to_fn_mut(|| x = 5);\n+   |                        -- - first borrow occurs due to use of `x` in closure\n+   |                        |\n+   |                        first mutable borrow occurs here\n+LL |     let c2 = to_fn_mut(|| { let _y = to_fn_mut(|| set(&mut x)); }); // (nested closure)\n+   |                        ^^                                  - second borrow occurs due to use of `x` in closure\n+   |                        |\n+   |                        second mutable borrow occurs here\n+LL |     //~^ ERROR cannot borrow `x` as mutable more than once\n+LL |     c1;\n+   |     -- borrow later used here\n+\n+error[E0499]: cannot borrow `x` as mutable more than once at a time\n+  --> $DIR/borrowck-closures-two-mut-fail.rs:63:24\n+   |\n+LL |     let c1 = to_fn_mut(|| set(&mut *x.f));\n+   |                        --           - first borrow occurs due to use of `x` in closure\n+   |                        |\n+   |                        first mutable borrow occurs here\n+LL |     let c2 = to_fn_mut(|| set(&mut *x.f));\n+   |                        ^^           - second borrow occurs due to use of `x` in closure\n+   |                        |\n+   |                        second mutable borrow occurs here\n+LL |     //~^ ERROR cannot borrow `x` as mutable more than once\n+LL |     c1;\n+   |     -- borrow later used here\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0499`."}, {"sha": "66ebd346dab62620e58bd893548db35b30b3980c", "filename": "src/test/ui/borrowck/borrowck-closures-two-mut-fail.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5ad7b914c0fe618c1499629e66ed0cf8d305449c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ad7b914c0fe618c1499629e66ed0cf8d305449c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut-fail.rs?ref=5ad7b914c0fe618c1499629e66ed0cf8d305449c", "patch": "@@ -8,22 +8,23 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-compare-mode-nll\n-\n // Tests that two closures cannot simultaneously have mutable\n // access to the variable, whether that mutable access be used\n // for direct assignment or for taking mutable ref. Issue #6801.\n \n-// ignore-compare-mode-nll\n-\n #![feature(box_syntax)]\n \n+\n+\n+\n+\n fn to_fn_mut<F: FnMut()>(f: F) -> F { f }\n \n fn a() {\n     let mut x = 3;\n     let c1 = to_fn_mut(|| x = 4);\n     let c2 = to_fn_mut(|| x = 5); //~ ERROR cannot borrow `x` as mutable more than once\n+    c1;\n }\n \n fn set(x: &mut isize) {\n@@ -34,19 +35,22 @@ fn b() {\n     let mut x = 3;\n     let c1 = to_fn_mut(|| set(&mut x));\n     let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as mutable more than once\n+    c1;\n }\n \n fn c() {\n     let mut x = 3;\n     let c1 = to_fn_mut(|| x = 5);\n     let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as mutable more than once\n+    c1;\n }\n \n fn d() {\n     let mut x = 3;\n     let c1 = to_fn_mut(|| x = 5);\n     let c2 = to_fn_mut(|| { let _y = to_fn_mut(|| set(&mut x)); }); // (nested closure)\n     //~^ ERROR cannot borrow `x` as mutable more than once\n+    c1;\n }\n \n fn g() {\n@@ -58,6 +62,7 @@ fn g() {\n     let c1 = to_fn_mut(|| set(&mut *x.f));\n     let c2 = to_fn_mut(|| set(&mut *x.f));\n     //~^ ERROR cannot borrow `x` as mutable more than once\n+    c1;\n }\n \n fn main() {"}, {"sha": "59104cc4be9b9d0921cb0bd67ef7b1e46458e754", "filename": "src/test/ui/borrowck/borrowck-closures-two-mut-fail.stderr", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5ad7b914c0fe618c1499629e66ed0cf8d305449c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ad7b914c0fe618c1499629e66ed0cf8d305449c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut-fail.stderr?ref=5ad7b914c0fe618c1499629e66ed0cf8d305449c", "patch": "@@ -9,11 +9,12 @@ LL |     let c2 = to_fn_mut(|| x = 5); //~ ERROR cannot borrow `x` as mutable mo\n    |                        ^^ - borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n+LL |     c1;\n LL | }\n    | - first borrow ends here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time\n-  --> $DIR/borrowck-closures-two-mut-fail.rs:36:24\n+  --> $DIR/borrowck-closures-two-mut-fail.rs:37:24\n    |\n LL |     let c1 = to_fn_mut(|| set(&mut x));\n    |                        --          - previous borrow occurs due to use of `x` in closure\n@@ -23,11 +24,12 @@ LL |     let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as muta\n    |                        ^^          - borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n+LL |     c1;\n LL | }\n    | - first borrow ends here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time\n-  --> $DIR/borrowck-closures-two-mut-fail.rs:42:24\n+  --> $DIR/borrowck-closures-two-mut-fail.rs:44:24\n    |\n LL |     let c1 = to_fn_mut(|| x = 5);\n    |                        -- - previous borrow occurs due to use of `x` in closure\n@@ -37,11 +39,12 @@ LL |     let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as muta\n    |                        ^^          - borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n+LL |     c1;\n LL | }\n    | - first borrow ends here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time\n-  --> $DIR/borrowck-closures-two-mut-fail.rs:48:24\n+  --> $DIR/borrowck-closures-two-mut-fail.rs:51:24\n    |\n LL |     let c1 = to_fn_mut(|| x = 5);\n    |                        -- - previous borrow occurs due to use of `x` in closure\n@@ -51,12 +54,12 @@ LL |     let c2 = to_fn_mut(|| { let _y = to_fn_mut(|| set(&mut x)); }); // (nes\n    |                        ^^                                  - borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n-LL |     //~^ ERROR cannot borrow `x` as mutable more than once\n+...\n LL | }\n    | - first borrow ends here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time\n-  --> $DIR/borrowck-closures-two-mut-fail.rs:59:24\n+  --> $DIR/borrowck-closures-two-mut-fail.rs:63:24\n    |\n LL |     let c1 = to_fn_mut(|| set(&mut *x.f));\n    |                        --           - previous borrow occurs due to use of `x` in closure\n@@ -66,7 +69,7 @@ LL |     let c2 = to_fn_mut(|| set(&mut *x.f));\n    |                        ^^           - borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n-LL |     //~^ ERROR cannot borrow `x` as mutable more than once\n+...\n LL | }\n    | - first borrow ends here\n "}, {"sha": "17519ccb1438dded93710c0d229dc3533c02a84c", "filename": "src/test/ui/borrowck/borrowck-closures-unique.nll.stderr", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/5ad7b914c0fe618c1499629e66ed0cf8d305449c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ad7b914c0fe618c1499629e66ed0cf8d305449c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.nll.stderr?ref=5ad7b914c0fe618c1499629e66ed0cf8d305449c", "patch": "@@ -0,0 +1,54 @@\n+error[E0500]: closure requires unique access to `x` but it is already borrowed\n+  --> $DIR/borrowck-closures-unique.rs:36:14\n+   |\n+LL |     let c1 = || get(x);\n+   |              --     - first borrow occurs due to use of `x` in closure\n+   |              |\n+   |              borrow occurs here\n+LL |     let c2 = || set(x); //~ ERROR closure requires unique access to `x`\n+   |              ^^     - second borrow occurs due to use of `x` in closure\n+   |              |\n+   |              closure construction occurs here\n+LL |     c1;\n+   |     -- borrow later used here\n+\n+error[E0500]: closure requires unique access to `x` but it is already borrowed\n+  --> $DIR/borrowck-closures-unique.rs:42:14\n+   |\n+LL |     let c1 = || get(x);\n+   |              --     - first borrow occurs due to use of `x` in closure\n+   |              |\n+   |              borrow occurs here\n+LL |     let c2 = || { get(x); set(x); }; //~ ERROR closure requires unique access to `x`\n+   |              ^^       - second borrow occurs due to use of `x` in closure\n+   |              |\n+   |              closure construction occurs here\n+LL |     c1;\n+   |     -- borrow later used here\n+\n+error[E0524]: two closures require unique access to `x` at the same time\n+  --> $DIR/borrowck-closures-unique.rs:48:14\n+   |\n+LL |     let c1 = || set(x);\n+   |              --     - first borrow occurs due to use of `x` in closure\n+   |              |\n+   |              first closure is constructed here\n+LL |     let c2 = || set(x); //~ ERROR two closures require unique access to `x` at the same time\n+   |              ^^     - second borrow occurs due to use of `x` in closure\n+   |              |\n+   |              second closure is constructed here\n+LL |     c1;\n+   |     -- borrow later used here\n+\n+error[E0594]: cannot assign to `x`, as it is not declared as mutable\n+  --> $DIR/borrowck-closures-unique.rs:57:38\n+   |\n+LL | fn e(x: &'static mut isize) {\n+   |      - help: consider changing this to be mutable: `mut x`\n+LL |     let c1 = |y: &'static mut isize| x = y; //~ ERROR closure cannot assign to immutable argument\n+   |                                      ^^^^^ cannot assign\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors occurred: E0500, E0524, E0594.\n+For more information about an error, try `rustc --explain E0500`."}, {"sha": "caf5785f481c2bded03c8b17be98998af959d92f", "filename": "src/test/ui/borrowck/borrowck-closures-unique.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5ad7b914c0fe618c1499629e66ed0cf8d305449c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ad7b914c0fe618c1499629e66ed0cf8d305449c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.rs?ref=5ad7b914c0fe618c1499629e66ed0cf8d305449c", "patch": "@@ -8,14 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-compare-mode-nll\n-\n // Tests that a closure which requires mutable access to the referent\n // of an `&mut` requires a \"unique\" borrow -- that is, the variable to\n // be borrowed (here, `x`) will not be borrowed *mutably*, but\n //  may be *immutable*, but we cannot allow\n // multiple borrows.\n \n+\n+\n fn get(x: &isize) -> isize {\n     *x\n }\n@@ -27,25 +27,40 @@ fn set(x: &mut isize) -> isize {\n fn a(x: &mut isize) {\n     let c1 = || get(x);\n     let c2 = || get(x);\n+    c1();\n+    c2();\n }\n \n fn b(x: &mut isize) {\n     let c1 = || get(x);\n     let c2 = || set(x); //~ ERROR closure requires unique access to `x`\n+    c1;\n }\n \n fn c(x: &mut isize) {\n     let c1 = || get(x);\n     let c2 = || { get(x); set(x); }; //~ ERROR closure requires unique access to `x`\n+    c1;\n }\n \n fn d(x: &mut isize) {\n     let c1 = || set(x);\n     let c2 = || set(x); //~ ERROR two closures require unique access to `x` at the same time\n+    c1;\n+}\n+\n+// This test was originally encoded in the form shown as `fn f` below.\n+// However, since MIR-borrowck and thus NLL takes more control-flow information\n+// into account, it was necessary to change the test in order to witness the\n+// same (expected) error under both AST-borrowck and NLL.\n+fn e(x: &'static mut isize) {\n+    let c1 = |y: &'static mut isize| x = y; //~ ERROR closure cannot assign to immutable argument\n+    c1;\n }\n \n-fn e(x: &mut isize) {\n+fn f(x: &'static mut isize) {\n     let c1 = || x = panic!(); //~ ERROR closure cannot assign to immutable argument\n+    c1;\n }\n \n fn main() {"}, {"sha": "cfcb81b31e700947cc09d72fd0358eaf004a4872", "filename": "src/test/ui/borrowck/borrowck-closures-unique.stderr", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5ad7b914c0fe618c1499629e66ed0cf8d305449c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ad7b914c0fe618c1499629e66ed0cf8d305449c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.stderr?ref=5ad7b914c0fe618c1499629e66ed0cf8d305449c", "patch": "@@ -1,5 +1,5 @@\n error[E0500]: closure requires unique access to `x` but it is already borrowed\n-  --> $DIR/borrowck-closures-unique.rs:34:14\n+  --> $DIR/borrowck-closures-unique.rs:36:14\n    |\n LL |     let c1 = || get(x);\n    |              --     - previous borrow occurs due to use of `x` in closure\n@@ -9,11 +9,12 @@ LL |     let c2 = || set(x); //~ ERROR closure requires unique access to `x`\n    |              ^^     - borrow occurs due to use of `x` in closure\n    |              |\n    |              closure construction occurs here\n+LL |     c1;\n LL | }\n    | - borrow ends here\n \n error[E0500]: closure requires unique access to `x` but it is already borrowed\n-  --> $DIR/borrowck-closures-unique.rs:39:14\n+  --> $DIR/borrowck-closures-unique.rs:42:14\n    |\n LL |     let c1 = || get(x);\n    |              --     - previous borrow occurs due to use of `x` in closure\n@@ -23,11 +24,12 @@ LL |     let c2 = || { get(x); set(x); }; //~ ERROR closure requires unique acce\n    |              ^^       - borrow occurs due to use of `x` in closure\n    |              |\n    |              closure construction occurs here\n+LL |     c1;\n LL | }\n    | - borrow ends here\n \n error[E0524]: two closures require unique access to `x` at the same time\n-  --> $DIR/borrowck-closures-unique.rs:44:14\n+  --> $DIR/borrowck-closures-unique.rs:48:14\n    |\n LL |     let c1 = || set(x);\n    |              --     - previous borrow occurs due to use of `x` in closure\n@@ -37,11 +39,22 @@ LL |     let c2 = || set(x); //~ ERROR two closures require unique access to `x`\n    |              ^^     - borrow occurs due to use of `x` in closure\n    |              |\n    |              second closure is constructed here\n+LL |     c1;\n LL | }\n    | - borrow from first closure ends here\n \n error[E0595]: closure cannot assign to immutable argument `x`\n-  --> $DIR/borrowck-closures-unique.rs:48:14\n+  --> $DIR/borrowck-closures-unique.rs:57:14\n+   |\n+LL |     let c1 = |y: &'static mut isize| x = y; //~ ERROR closure cannot assign to immutable argument\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow mutably\n+help: consider removing the `&mut`, as it is an immutable binding to a mutable reference\n+   |\n+LL |     x //~ ERROR closure cannot assign to immutable argument\n+   |     ^\n+\n+error[E0595]: closure cannot assign to immutable argument `x`\n+  --> $DIR/borrowck-closures-unique.rs:62:14\n    |\n LL |     let c1 = || x = panic!(); //~ ERROR closure cannot assign to immutable argument\n    |              ^^ cannot borrow mutably\n@@ -50,7 +63,7 @@ help: consider removing the `&mut`, as it is an immutable binding to a mutable r\n LL |     x //~ ERROR closure cannot assign to immutable argument\n    |     ^\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n \n Some errors occurred: E0500, E0524, E0595.\n For more information about an error, try `rustc --explain E0500`."}, {"sha": "943b684fe8d7703c836fd2853abdfd2bece43086", "filename": "src/test/ui/hashmap-lifetimes.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5ad7b914c0fe618c1499629e66ed0cf8d305449c/src%2Ftest%2Fui%2Fhashmap-lifetimes.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ad7b914c0fe618c1499629e66ed0cf8d305449c/src%2Ftest%2Fui%2Fhashmap-lifetimes.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhashmap-lifetimes.nll.stderr?ref=5ad7b914c0fe618c1499629e66ed0cf8d305449c", "patch": "@@ -0,0 +1,13 @@\n+error[E0502]: cannot borrow `my_stuff` as mutable because it is also borrowed as immutable\n+  --> $DIR/hashmap-lifetimes.rs:18:5\n+   |\n+LL |     let mut it = my_stuff.iter();\n+   |                  -------- immutable borrow occurs here\n+LL |     my_stuff.insert(1, 43); //~ ERROR cannot borrow\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n+LL |     it;\n+   |     -- borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0502`."}, {"sha": "eb7404e7b780b9434594c845e515e016d42b5c42", "filename": "src/test/ui/hashmap-lifetimes.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5ad7b914c0fe618c1499629e66ed0cf8d305449c/src%2Ftest%2Fui%2Fhashmap-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ad7b914c0fe618c1499629e66ed0cf8d305449c/src%2Ftest%2Fui%2Fhashmap-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhashmap-lifetimes.rs?ref=5ad7b914c0fe618c1499629e66ed0cf8d305449c", "patch": "@@ -8,12 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-compare-mode-nll\n+\n \n fn main() {\n     let mut my_stuff = std::collections::HashMap::new();\n     my_stuff.insert(0, 42);\n \n     let mut it = my_stuff.iter();\n     my_stuff.insert(1, 43); //~ ERROR cannot borrow\n+    it;\n }"}, {"sha": "187c98ab298b67e1513bde0228f05bde1fbd05f9", "filename": "src/test/ui/hashmap-lifetimes.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ad7b914c0fe618c1499629e66ed0cf8d305449c/src%2Ftest%2Fui%2Fhashmap-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ad7b914c0fe618c1499629e66ed0cf8d305449c/src%2Ftest%2Fui%2Fhashmap-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhashmap-lifetimes.stderr?ref=5ad7b914c0fe618c1499629e66ed0cf8d305449c", "patch": "@@ -5,6 +5,7 @@ LL |     let mut it = my_stuff.iter();\n    |                  -------- immutable borrow occurs here\n LL |     my_stuff.insert(1, 43); //~ ERROR cannot borrow\n    |     ^^^^^^^^ mutable borrow occurs here\n+LL |     it;\n LL | }\n    | - immutable borrow ends here\n "}, {"sha": "6ad57a15465d37a7db96fb90e922566d74166b70", "filename": "src/test/ui/unboxed-closures/unboxed-closure-region.nll.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5ad7b914c0fe618c1499629e66ed0cf8d305449c/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-region.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ad7b914c0fe618c1499629e66ed0cf8d305449c/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-region.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-region.nll.stderr?ref=5ad7b914c0fe618c1499629e66ed0cf8d305449c", "patch": "@@ -0,0 +1,15 @@\n+error[E0597]: `x` does not live long enough\n+  --> $DIR/unboxed-closure-region.rs:18:12\n+   |\n+LL |         || x //~ ERROR `x` does not live long enough\n+   |         -- ^ borrowed value does not live long enough\n+   |         |\n+   |         value captured here\n+LL |     };\n+   |     - `x` dropped here while still borrowed\n+LL |     _f;\n+   |     -- borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "da6dbc6e74f86b7cfe588d05dd3dc0dd082ada34", "filename": "src/test/ui/unboxed-closures/unboxed-closure-region.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5ad7b914c0fe618c1499629e66ed0cf8d305449c/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ad7b914c0fe618c1499629e66ed0cf8d305449c/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-region.rs?ref=5ad7b914c0fe618c1499629e66ed0cf8d305449c", "patch": "@@ -8,13 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-compare-mode-nll\n-\n // Test that an unboxed closure that captures a free variable by\n // reference cannot escape the region of that variable.\n+\n+\n fn main() {\n     let _f = {\n         let x = 0;\n         || x //~ ERROR `x` does not live long enough\n     };\n+    _f;\n }"}, {"sha": "f85f3afff70e8ff0a63221c2977da7be535299f7", "filename": "src/test/ui/unboxed-closures/unboxed-closure-region.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ad7b914c0fe618c1499629e66ed0cf8d305449c/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ad7b914c0fe618c1499629e66ed0cf8d305449c/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-region.stderr?ref=5ad7b914c0fe618c1499629e66ed0cf8d305449c", "patch": "@@ -7,6 +7,7 @@ LL |         || x //~ ERROR `x` does not live long enough\n    |         capture occurs here\n LL |     };\n    |     - borrowed value only lives until here\n+LL |     _f;\n LL | }\n    | - borrowed value needs to live until here\n "}, {"sha": "cadda398c6f339a81965abb467bcc1cddf28852a", "filename": "src/test/ui/unboxed-closures/unboxed-closures-borrow-conflict.nll.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5ad7b914c0fe618c1499629e66ed0cf8d305449c/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-borrow-conflict.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ad7b914c0fe618c1499629e66ed0cf8d305449c/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-borrow-conflict.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-borrow-conflict.nll.stderr?ref=5ad7b914c0fe618c1499629e66ed0cf8d305449c", "patch": "@@ -0,0 +1,15 @@\n+error[E0503]: cannot use `x` because it was mutably borrowed\n+  --> $DIR/unboxed-closures-borrow-conflict.rs:19:14\n+   |\n+LL |     let f = || x += 1;\n+   |             -- - borrow occurs due to use of `x` in closure\n+   |             |\n+   |             borrow of `x` occurs here\n+LL |     let _y = x; //~ ERROR cannot use `x` because it was mutably borrowed\n+   |              ^ use of borrowed `x`\n+LL |     f;\n+   |     - borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0503`."}, {"sha": "aa50fb837733c6ed729ca2254c462489344fd443", "filename": "src/test/ui/unboxed-closures/unboxed-closures-borrow-conflict.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5ad7b914c0fe618c1499629e66ed0cf8d305449c/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-borrow-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ad7b914c0fe618c1499629e66ed0cf8d305449c/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-borrow-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-borrow-conflict.rs?ref=5ad7b914c0fe618c1499629e66ed0cf8d305449c", "patch": "@@ -8,13 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-compare-mode-nll\n-\n // Test that an unboxed closure that mutates a free variable will\n // cause borrow conflicts.\n \n+\n+\n fn main() {\n     let mut x = 0;\n     let f = || x += 1;\n     let _y = x; //~ ERROR cannot use `x` because it was mutably borrowed\n+    f;\n }"}]}