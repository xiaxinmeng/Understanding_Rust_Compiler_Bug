{"sha": "f62f540b4e81a4e67a39f199948406684a343f4a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2MmY1NDBiNGU4MWE0ZTY3YTM5ZjE5OTk0ODQwNjY4NGEzNDNmNGE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-12-30T23:41:19Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-12-30T23:41:19Z"}, "message": "Point at function name span", "tree": {"sha": "85e200adab3a6d9f9a45fa1eac7229311d38eb16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85e200adab3a6d9f9a45fa1eac7229311d38eb16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f62f540b4e81a4e67a39f199948406684a343f4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f62f540b4e81a4e67a39f199948406684a343f4a", "html_url": "https://github.com/rust-lang/rust/commit/f62f540b4e81a4e67a39f199948406684a343f4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f62f540b4e81a4e67a39f199948406684a343f4a/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f65dc07705e9463ffed0395894f1e7d63cec515", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f65dc07705e9463ffed0395894f1e7d63cec515", "html_url": "https://github.com/rust-lang/rust/commit/1f65dc07705e9463ffed0395894f1e7d63cec515"}], "stats": {"total": 209, "additions": 132, "deletions": 77}, "files": [{"sha": "381abcb977b260ba7a514a5d5663c945c93d020c", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 61, "deletions": 47, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/f62f540b4e81a4e67a39f199948406684a343f4a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f62f540b4e81a4e67a39f199948406684a343f4a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=f62f540b4e81a4e67a39f199948406684a343f4a", "patch": "@@ -4796,16 +4796,20 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     // `consider_hint_about_removing_semicolon` will point at the last expression\n                     // if it were a relevant part of the error. This improves usability in editors\n                     // that highlight errors inline.\n-                    let sp = if let Some((decl, _)) = self.get_fn_decl(blk.id) {\n-                        decl.output.span()\n+                    let (sp, fn_span) = if let Some((decl, ident)) = self.get_parent_fn_decl(blk.id) {\n+                        (decl.output.span(), Some(ident.span))\n                     } else {\n-                        blk.span\n+                        (blk.span, None)\n                     };\n                     coerce.coerce_forced_unit(self, &self.misc(sp), &mut |err| {\n                         if let Some(expected_ty) = expected.only_has_type(self) {\n-                            self.consider_hint_about_removing_semicolon(blk,\n-                                                                        expected_ty,\n-                                                                        err);\n+                            self.consider_hint_about_removing_semicolon(blk, expected_ty, err);\n+                        }\n+                        if let Some(fn_span) = fn_span {\n+                            err.span_label(\n+                                fn_span,\n+                                \"this function's body doesn't return the expected type\",\n+                            );\n                         }\n                     }, false);\n                 }\n@@ -4830,59 +4834,69 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         ty\n     }\n \n+    /// Given a function block's `NodeId`, return its `FnDecl` , `None` otherwise.\n+    fn get_parent_fn_decl(&self, blk_id: ast::NodeId) -> Option<(hir::FnDecl, ast::Ident)> {\n+        let parent = self.tcx.hir().get(self.tcx.hir().get_parent(blk_id));\n+        self.get_node_fn_decl(parent).map(|(fn_decl, ident , _)| (fn_decl, ident))\n+    }\n+\n+    /// Given a function `Node`, return its `FnDecl` , `None` otherwise.\n+    fn get_node_fn_decl(&self, node: Node) -> Option<(hir::FnDecl, ast::Ident, bool)> {\n+        if let Node::Item(&hir::Item {\n+            ident, node: hir::ItemKind::Fn(ref decl, ..), ..\n+        }) = node {\n+            decl.clone().and_then(|decl| {\n+                // This is less than ideal, it will not suggest a return type span on any\n+                // method called `main`, regardless of whether it is actually the entry point,\n+                // but it will still present it as the reason for the expected type.\n+                Some((decl, ident, ident.name != Symbol::intern(\"main\")))\n+            })\n+        } else if let Node::TraitItem(&hir::TraitItem {\n+            ident, node: hir::TraitItemKind::Method(hir::MethodSig {\n+                ref decl, ..\n+            }, ..), ..\n+        }) = node {\n+            decl.clone().and_then(|decl| {\n+                Some((decl, ident, true))\n+            })\n+        } else if let Node::ImplItem(&hir::ImplItem {\n+            ident, node: hir::ImplItemKind::Method(hir::MethodSig {\n+                ref decl, ..\n+            }, ..), ..\n+        }) = node {\n+            decl.clone().and_then(|decl| {\n+                Some((decl, ident, false))\n+            })\n+        } else {\n+            None\n+        }\n+    }\n+\n     /// Given a `NodeId`, return the `FnDecl` of the method it is enclosed by and whether a\n     /// suggestion can be made, `None` otherwise.\n     pub fn get_fn_decl(&self, blk_id: ast::NodeId) -> Option<(hir::FnDecl, bool)> {\n         // Get enclosing Fn, if it is a function or a trait method, unless there's a `loop` or\n         // `while` before reaching it, as block tail returns are not available in them.\n-        if let Some(fn_id) = self.tcx.hir().get_return_block(blk_id) {\n-            let parent = self.tcx.hir().get(fn_id);\n-\n-            if let Node::Item(&hir::Item {\n-                ident, node: hir::ItemKind::Fn(ref decl, ..), ..\n-            }) = parent {\n-                decl.clone().and_then(|decl| {\n-                    // This is less than ideal, it will not suggest a return type span on any\n-                    // method called `main`, regardless of whether it is actually the entry point,\n-                    // but it will still present it as the reason for the expected type.\n-                    Some((decl, ident.name != Symbol::intern(\"main\")))\n-                })\n-            } else if let Node::TraitItem(&hir::TraitItem {\n-                node: hir::TraitItemKind::Method(hir::MethodSig {\n-                    ref decl, ..\n-                }, ..), ..\n-            }) = parent {\n-                decl.clone().and_then(|decl| {\n-                    Some((decl, true))\n-                })\n-            } else if let Node::ImplItem(&hir::ImplItem {\n-                node: hir::ImplItemKind::Method(hir::MethodSig {\n-                    ref decl, ..\n-                }, ..), ..\n-            }) = parent {\n-                decl.clone().and_then(|decl| {\n-                    Some((decl, false))\n-                })\n-            } else {\n-                None\n-            }\n-        } else {\n-            None\n-        }\n+        self.tcx.hir().get_return_block(blk_id).and_then(|blk_id| {\n+            let parent = self.tcx.hir().get(blk_id);\n+            self.get_node_fn_decl(parent).map(|(fn_decl, _, is_main)| (fn_decl, is_main))\n+        })\n     }\n \n     /// On implicit return expressions with mismatched types, provide the following suggestions:\n     ///\n     ///  - Point out the method's return type as the reason for the expected type\n     ///  - Possible missing semicolon\n     ///  - Possible missing return type if the return type is the default, and not `fn main()`\n-    pub fn suggest_mismatched_types_on_tail(&self,\n-                                            err: &mut DiagnosticBuilder<'tcx>,\n-                                            expression: &'gcx hir::Expr,\n-                                            expected: Ty<'tcx>,\n-                                            found: Ty<'tcx>,\n-                                            cause_span: Span,\n-                                            blk_id: ast::NodeId) {\n+    pub fn suggest_mismatched_types_on_tail(\n+        &self,\n+        err: &mut DiagnosticBuilder<'tcx>,\n+        expression: &'gcx hir::Expr,\n+        expected: Ty<'tcx>,\n+        found: Ty<'tcx>,\n+        cause_span: Span,\n+        blk_id: ast::NodeId,\n+    ) {\n         self.suggest_missing_semicolon(err, expression, expected, cause_span);\n         if let Some((fn_decl, can_suggest)) = self.get_fn_decl(blk_id) {\n             self.suggest_missing_return_type(err, &fn_decl, expected, found, can_suggest);"}, {"sha": "79e7a536cdc83267b24a4441030ba4b85b643b1b", "filename": "src/test/ui/block-result/consider-removing-last-semi.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f62f540b4e81a4e67a39f199948406684a343f4a/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f62f540b4e81a4e67a39f199948406684a343f4a/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr?ref=f62f540b4e81a4e67a39f199948406684a343f4a", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/consider-removing-last-semi.rs:1:11\n    |\n LL | fn f() -> String {  //~ ERROR mismatched types\n-   |           ^^^^^^ expected struct `std::string::String`, found ()\n+   |    -      ^^^^^^ expected struct `std::string::String`, found ()\n+   |    |\n+   |    this function's body doesn't return the expected type\n LL |     0u8;\n LL |     \"bla\".to_string();\n    |                      - help: consider removing this semicolon\n@@ -14,7 +16,9 @@ error[E0308]: mismatched types\n   --> $DIR/consider-removing-last-semi.rs:6:11\n    |\n LL | fn g() -> String {  //~ ERROR mismatched types\n-   |           ^^^^^^ expected struct `std::string::String`, found ()\n+   |    -      ^^^^^^ expected struct `std::string::String`, found ()\n+   |    |\n+   |    this function's body doesn't return the expected type\n LL |     \"this won't work\".to_string();\n LL |     \"removeme\".to_string();\n    |                           - help: consider removing this semicolon"}, {"sha": "82253911316adff1e851322dc8f40e2c00f68cd3", "filename": "src/test/ui/block-result/issue-11714.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f62f540b4e81a4e67a39f199948406684a343f4a/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f62f540b4e81a4e67a39f199948406684a343f4a/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.stderr?ref=f62f540b4e81a4e67a39f199948406684a343f4a", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/issue-11714.rs:1:14\n    |\n LL | fn blah() -> i32 { //~ ERROR mismatched types\n-   |              ^^^ expected i32, found ()\n+   |    ----      ^^^ expected i32, found ()\n+   |    |\n+   |    this function's body doesn't return the expected type\n ...\n LL |     ;\n    |     - help: consider removing this semicolon"}, {"sha": "8b8eb825377c4bab6fdb9fb1b257e7c2e7617197", "filename": "src/test/ui/block-result/issue-13428.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f62f540b4e81a4e67a39f199948406684a343f4a/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f62f540b4e81a4e67a39f199948406684a343f4a/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr?ref=f62f540b4e81a4e67a39f199948406684a343f4a", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/issue-13428.rs:3:13\n    |\n LL | fn foo() -> String {  //~ ERROR mismatched types\n-   |             ^^^^^^ expected struct `std::string::String`, found ()\n+   |    ---      ^^^^^^ expected struct `std::string::String`, found ()\n+   |    |\n+   |    this function's body doesn't return the expected type\n ...\n LL |     ;\n    |     - help: consider removing this semicolon\n@@ -14,7 +16,9 @@ error[E0308]: mismatched types\n   --> $DIR/issue-13428.rs:11:13\n    |\n LL | fn bar() -> String {  //~ ERROR mismatched types\n-   |             ^^^^^^ expected struct `std::string::String`, found ()\n+   |    ---      ^^^^^^ expected struct `std::string::String`, found ()\n+   |    |\n+   |    this function's body doesn't return the expected type\n LL |     \"foobar\".to_string()\n LL |     ;\n    |     - help: consider removing this semicolon"}, {"sha": "6709747b13767bab6000f2e39f3a1ce24911484e", "filename": "src/test/ui/break-while-condition.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f62f540b4e81a4e67a39f199948406684a343f4a/src%2Ftest%2Fui%2Fbreak-while-condition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f62f540b4e81a4e67a39f199948406684a343f4a/src%2Ftest%2Fui%2Fbreak-while-condition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbreak-while-condition.stderr?ref=f62f540b4e81a4e67a39f199948406684a343f4a", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/break-while-condition.rs:3:11\n    |\n LL | fn main() {\n-   |           ^ expected !, found ()\n+   |    ----   ^ expected !, found ()\n+   |    |\n+   |    this function's body doesn't return the expected type\n    |\n    = note: expected type `!`\n               found type `()`"}, {"sha": "9ace5b8ad3a8d6c4b4f0812f9c1490b290bf8dd0", "filename": "src/test/ui/coercion/coercion-missing-tail-expected-type.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f62f540b4e81a4e67a39f199948406684a343f4a/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f62f540b4e81a4e67a39f199948406684a343f4a/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.stderr?ref=f62f540b4e81a4e67a39f199948406684a343f4a", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/coercion-missing-tail-expected-type.rs:3:24\n    |\n LL | fn plus_one(x: i32) -> i32 { //~ ERROR mismatched types\n-   |                        ^^^ expected i32, found ()\n+   |    --------            ^^^ expected i32, found ()\n+   |    |\n+   |    this function's body doesn't return the expected type\n LL |     x + 1;\n    |          - help: consider removing this semicolon\n    |\n@@ -13,7 +15,9 @@ error[E0308]: mismatched types\n   --> $DIR/coercion-missing-tail-expected-type.rs:7:13\n    |\n LL | fn foo() -> Result<u8, u64> { //~ ERROR mismatched types\n-   |             ^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found ()\n+   |    ---      ^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found ()\n+   |    |\n+   |    this function's body doesn't return the expected type\n LL |     Ok(1);\n    |          - help: consider removing this semicolon\n    |"}, {"sha": "02008470e636f8775f6cb7532348342b917ca459", "filename": "src/test/ui/issues/issue-10536.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f62f540b4e81a4e67a39f199948406684a343f4a/src%2Ftest%2Fui%2Fissues%2Fissue-10536.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f62f540b4e81a4e67a39f199948406684a343f4a/src%2Ftest%2Fui%2Fissues%2Fissue-10536.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10536.stderr?ref=f62f540b4e81a4e67a39f199948406684a343f4a", "patch": "@@ -20,7 +20,9 @@ error[E0308]: mismatched types\n   --> $DIR/issue-10536.rs:11:15\n    |\n LL | pub fn main() {\n-   |               ^ expected bool, found ()\n+   |        ----   ^ expected bool, found ()\n+   |        |\n+   |        this function's body doesn't return the expected type\n    |\n    = note: expected type `bool`\n               found type `()`"}, {"sha": "bef3596103c2b8bbfc2ac877a4157d2e1ca96c60", "filename": "src/test/ui/issues/issue-32323.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f62f540b4e81a4e67a39f199948406684a343f4a/src%2Ftest%2Fui%2Fissues%2Fissue-32323.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f62f540b4e81a4e67a39f199948406684a343f4a/src%2Ftest%2Fui%2Fissues%2Fissue-32323.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32323.stderr?ref=f62f540b4e81a4e67a39f199948406684a343f4a", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/issue-32323.rs:5:30\n    |\n LL | pub fn f<'a, T: Tr<'a>>() -> <T as Tr<'a>>::Out {}\n-   |                              ^^^^^^^^^^^^^^^^^^ expected associated type, found ()\n+   |        -                     ^^^^^^^^^^^^^^^^^^ expected associated type, found ()\n+   |        |\n+   |        this function's body doesn't return the expected type\n    |\n    = note: expected type `<T as Tr<'a>>::Out`\n               found type `()`"}, {"sha": "4d2b3549f8ed4a74dda1e12b07b7a27e24cf058c", "filename": "src/test/ui/issues/issue-43162.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f62f540b4e81a4e67a39f199948406684a343f4a/src%2Ftest%2Fui%2Fissues%2Fissue-43162.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f62f540b4e81a4e67a39f199948406684a343f4a/src%2Ftest%2Fui%2Fissues%2Fissue-43162.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43162.stderr?ref=f62f540b4e81a4e67a39f199948406684a343f4a", "patch": "@@ -14,7 +14,9 @@ error[E0308]: mismatched types\n   --> $DIR/issue-43162.rs:1:13\n    |\n LL | fn foo() -> bool {\n-   |             ^^^^ expected bool, found ()\n+   |    ---      ^^^^ expected bool, found ()\n+   |    |\n+   |    this function's body doesn't return the expected type\n LL |     //~^ ERROR E0308\n LL |     break true; //~ ERROR E0268\n    |               - help: consider removing this semicolon"}, {"sha": "944098a644df2c097fee605e01cffee2f484f090", "filename": "src/test/ui/issues/issue-44023.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f62f540b4e81a4e67a39f199948406684a343f4a/src%2Ftest%2Fui%2Fissues%2Fissue-44023.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f62f540b4e81a4e67a39f199948406684a343f4a/src%2Ftest%2Fui%2Fissues%2Fissue-44023.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-44023.stderr?ref=f62f540b4e81a4e67a39f199948406684a343f4a", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/issue-44023.rs:5:36\n    |\n LL | fn \u10e1\u10d0\u10ed\u10db\u10d4\u10da\u10d0\u10d3_\u10d2\u10d4\u10db\u10e0\u10d8\u10d4\u10da\u10d8_\u10e1\u10d0\u10d3\u10d8\u10da\u10d8 ( ) -> isize { //~ ERROR mismatched types\n-   |                                    ^^^^^ expected isize, found ()\n+   |    ------------------------        ^^^^^ expected isize, found ()\n+   |    |\n+   |    this function's body doesn't return the expected type\n    |\n    = note: expected type `isize`\n               found type `()`"}, {"sha": "f4cdceac1726a8654d1f699d86a400f2ee8a0873", "filename": "src/test/ui/issues/issue-6458-4.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f62f540b4e81a4e67a39f199948406684a343f4a/src%2Ftest%2Fui%2Fissues%2Fissue-6458-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f62f540b4e81a4e67a39f199948406684a343f4a/src%2Ftest%2Fui%2Fissues%2Fissue-6458-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-6458-4.stderr?ref=f62f540b4e81a4e67a39f199948406684a343f4a", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/issue-6458-4.rs:1:20\n    |\n LL | fn foo(b: bool) -> Result<bool,String> { //~ ERROR mismatched types\n-   |                    ^^^^^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found ()\n+   |    ---             ^^^^^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found ()\n+   |    |\n+   |    this function's body doesn't return the expected type\n LL |     Err(\"bar\".to_string());\n    |                           - help: consider removing this semicolon\n    |"}, {"sha": "d7992704c50e887d56a72fc76ba39127938e9fc5", "filename": "src/test/ui/liveness/liveness-closure-require-ret.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f62f540b4e81a4e67a39f199948406684a343f4a/src%2Ftest%2Fui%2Fliveness%2Fliveness-closure-require-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f62f540b4e81a4e67a39f199948406684a343f4a/src%2Ftest%2Fui%2Fliveness%2Fliveness-closure-require-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-closure-require-ret.stderr?ref=f62f540b4e81a4e67a39f199948406684a343f4a", "patch": "@@ -1,8 +1,10 @@\n error[E0308]: mismatched types\n-  --> $DIR/liveness-closure-require-ret.rs:2:37\n+  --> $DIR/liveness-closure-require-ret.rs:2:11\n    |\n LL | fn main() { println!(\"{}\", force(|| {})); } //~ ERROR mismatched types\n-   |                                     ^^ expected isize, found ()\n+   |    ----   ^ expected isize, found ()\n+   |    |\n+   |    this function's body doesn't return the expected type\n    |\n    = note: expected type `isize`\n               found type `()`"}, {"sha": "578890f5e625f103272615b65fff80acba58b2b2", "filename": "src/test/ui/liveness/liveness-forgot-ret.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f62f540b4e81a4e67a39f199948406684a343f4a/src%2Ftest%2Fui%2Fliveness%2Fliveness-forgot-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f62f540b4e81a4e67a39f199948406684a343f4a/src%2Ftest%2Fui%2Fliveness%2Fliveness-forgot-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-forgot-ret.stderr?ref=f62f540b4e81a4e67a39f199948406684a343f4a", "patch": "@@ -2,7 +2,10 @@ error[E0308]: mismatched types\n   --> $DIR/liveness-forgot-ret.rs:3:19\n    |\n LL | fn f(a: isize) -> isize { if god_exists(a) { return 5; }; }\n-   |                   ^^^^^ expected isize, found ()    - expected because of this statement\n+   |    -              ^^^^^                             - expected because of this statement\n+   |    |              |\n+   |    |              expected isize, found ()\n+   |    this function's body doesn't return the expected type\n    |\n    = note: expected type `isize`\n               found type `()`"}, {"sha": "a8a5684207608f478dc4bdf19413b63efa9e9f63", "filename": "src/test/ui/liveness/liveness-issue-2163.stderr", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f62f540b4e81a4e67a39f199948406684a343f4a/src%2Ftest%2Fui%2Fliveness%2Fliveness-issue-2163.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f62f540b4e81a4e67a39f199948406684a343f4a/src%2Ftest%2Fui%2Fliveness%2Fliveness-issue-2163.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-issue-2163.stderr?ref=f62f540b4e81a4e67a39f199948406684a343f4a", "patch": "@@ -1,11 +1,10 @@\n error[E0308]: mismatched types\n-  --> $DIR/liveness-issue-2163.rs:5:30\n+  --> $DIR/liveness-issue-2163.rs:3:11\n    |\n-LL |       a.iter().all(|_| -> bool {\n-   |  ______________________________^\n-LL | |         //~^ ERROR mismatched types\n-LL | |     });\n-   | |_____^ expected bool, found ()\n+LL | fn main() {\n+   |    ----   ^ expected bool, found ()\n+   |    |\n+   |    this function's body doesn't return the expected type\n    |\n    = note: expected type `bool`\n               found type `()`"}, {"sha": "201b3ee6861a1b310f0f56b7006d265c701ee6c0", "filename": "src/test/ui/liveness/liveness-missing-ret2.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f62f540b4e81a4e67a39f199948406684a343f4a/src%2Ftest%2Fui%2Fliveness%2Fliveness-missing-ret2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f62f540b4e81a4e67a39f199948406684a343f4a/src%2Ftest%2Fui%2Fliveness%2Fliveness-missing-ret2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-missing-ret2.stderr?ref=f62f540b4e81a4e67a39f199948406684a343f4a", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/liveness-missing-ret2.rs:1:11\n    |\n LL | fn f() -> isize { //~ ERROR mismatched types\n-   |           ^^^^^ expected isize, found ()\n+   |    -      ^^^^^ expected isize, found ()\n+   |    |\n+   |    this function's body doesn't return the expected type\n    |\n    = note: expected type `isize`\n               found type `()`"}, {"sha": "2ee77f30a660849448e447ea1d77385bcaf5ae5f", "filename": "src/test/ui/liveness/liveness-return-last-stmt-semi.stderr", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f62f540b4e81a4e67a39f199948406684a343f4a/src%2Ftest%2Fui%2Fliveness%2Fliveness-return-last-stmt-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f62f540b4e81a4e67a39f199948406684a343f4a/src%2Ftest%2Fui%2Fliveness%2Fliveness-return-last-stmt-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-return-last-stmt-semi.stderr?ref=f62f540b4e81a4e67a39f199948406684a343f4a", "patch": "@@ -2,9 +2,10 @@ error[E0308]: mismatched types\n   --> $DIR/liveness-return-last-stmt-semi.rs:4:41\n    |\n LL | macro_rules! test { () => { fn foo() -> i32 { 1; } } }\n-   |                                         ^^^    - help: consider removing this semicolon\n-   |                                         |\n-   |                                         expected i32, found ()\n+   |                                ---      ^^^    - help: consider removing this semicolon\n+   |                                |        |\n+   |                                |        expected i32, found ()\n+   |                                this function's body doesn't return the expected type\n ...\n LL |     test!();\n    |     -------- in this macro invocation\n@@ -16,7 +17,9 @@ error[E0308]: mismatched types\n   --> $DIR/liveness-return-last-stmt-semi.rs:7:19\n    |\n LL | fn no_return() -> i32 {} //~ ERROR mismatched types\n-   |                   ^^^ expected i32, found ()\n+   |    ---------      ^^^ expected i32, found ()\n+   |    |\n+   |    this function's body doesn't return the expected type\n    |\n    = note: expected type `i32`\n               found type `()`\n@@ -25,7 +28,9 @@ error[E0308]: mismatched types\n   --> $DIR/liveness-return-last-stmt-semi.rs:9:19\n    |\n LL | fn bar(x: u32) -> u32 { //~ ERROR mismatched types\n-   |                   ^^^ expected u32, found ()\n+   |    ---            ^^^ expected u32, found ()\n+   |    |\n+   |    this function's body doesn't return the expected type\n LL |     x * 2;\n    |          - help: consider removing this semicolon\n    |\n@@ -36,7 +41,9 @@ error[E0308]: mismatched types\n   --> $DIR/liveness-return-last-stmt-semi.rs:13:19\n    |\n LL | fn baz(x: u64) -> u32 { //~ ERROR mismatched types\n-   |                   ^^^ expected u32, found ()\n+   |    ---            ^^^ expected u32, found ()\n+   |    |\n+   |    this function's body doesn't return the expected type\n    |\n    = note: expected type `u32`\n               found type `()`"}, {"sha": "9e6ffd97312f02587fb18522c0757a89734bf796", "filename": "src/test/ui/missing/missing-return.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f62f540b4e81a4e67a39f199948406684a343f4a/src%2Ftest%2Fui%2Fmissing%2Fmissing-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f62f540b4e81a4e67a39f199948406684a343f4a/src%2Ftest%2Fui%2Fmissing%2Fmissing-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-return.stderr?ref=f62f540b4e81a4e67a39f199948406684a343f4a", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/missing-return.rs:3:11\n    |\n LL | fn f() -> isize { }\n-   |           ^^^^^ expected isize, found ()\n+   |    -      ^^^^^ expected isize, found ()\n+   |    |\n+   |    this function's body doesn't return the expected type\n    |\n    = note: expected type `isize`\n               found type `()`"}]}