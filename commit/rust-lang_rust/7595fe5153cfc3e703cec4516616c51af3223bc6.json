{"sha": "7595fe5153cfc3e703cec4516616c51af3223bc6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1OTVmZTUxNTNjZmMzZTcwM2NlYzQ1MTY2MTZjNTFhZjMyMjNiYzY=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-11T12:13:20Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-11T13:32:41Z"}, "message": "Implement record patterns\n\nCloses #469.", "tree": {"sha": "b35cdf3f29627c1d5173f8058ac9f0222bf15b17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b35cdf3f29627c1d5173f8058ac9f0222bf15b17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7595fe5153cfc3e703cec4516616c51af3223bc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7595fe5153cfc3e703cec4516616c51af3223bc6", "html_url": "https://github.com/rust-lang/rust/commit/7595fe5153cfc3e703cec4516616c51af3223bc6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7595fe5153cfc3e703cec4516616c51af3223bc6/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12cb128a0a8cfffeccae910c72831562bd9c3b93", "url": "https://api.github.com/repos/rust-lang/rust/commits/12cb128a0a8cfffeccae910c72831562bd9c3b93", "html_url": "https://github.com/rust-lang/rust/commit/12cb128a0a8cfffeccae910c72831562bd9c3b93"}], "stats": {"total": 195, "additions": 193, "deletions": 2}, "files": [{"sha": "e264b887c388607477e9bfaca0bb11f3a456c8a2", "filename": "src/comp/middle/alias.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7595fe5153cfc3e703cec4516616c51af3223bc6/src%2Fcomp%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7595fe5153cfc3e703cec4516616c51af3223bc6/src%2Fcomp%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Falias.rs?ref=7595fe5153cfc3e703cec4516616c51af3223bc6", "patch": "@@ -297,6 +297,9 @@ fn arm_defnums(&ast::arm arm) -> vec[node_id] {\n             case (ast::pat_tag(_, ?children)) {\n                 for (@ast::pat child in children) { walk_pat(found, child); }\n             }\n+            case (ast::pat_rec(?fields, _)) {\n+                for (ast::field_pat f in fields) { walk_pat(found, f.pat); }\n+            }\n             case (_) { }\n         }\n     }"}, {"sha": "2419824cdff8c52d0d4830f7b2f9ad3756837fb1", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7595fe5153cfc3e703cec4516616c51af3223bc6/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7595fe5153cfc3e703cec4516616c51af3223bc6/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=7595fe5153cfc3e703cec4516616c51af3223bc6", "patch": "@@ -313,6 +313,9 @@ fn resolve_names(&@env e, &@ast::crate c) {\n                     }\n                 }\n             }\n+            case (ast::pat_rec(?fields, _)) {\n+                for (ast::field_pat f in fields) { walk_pat(e, sc, f.pat); }\n+            }\n             case (_) { }\n         }\n     }\n@@ -707,6 +710,12 @@ fn lookup_in_pat(&ident name, &ast::pat pat) -> option::t[def] {\n                 if (!option::is_none(found)) { ret found; }\n             }\n         }\n+        case (ast::pat_rec(?fields, _)) {\n+            for (ast::field_pat f in fields) {\n+                auto found = lookup_in_pat(name, *f.pat);\n+                if (!option::is_none(found)) { ret found; }\n+            }\n+        }\n     }\n     ret none[def];\n }\n@@ -1261,6 +1270,9 @@ fn check_arm(@env e, &ast::arm a, &() x, &vt[()] v) {\n             case (ast::pat_tag(_, ?children)) {\n                 for (@ast::pat child in children) { walk_pat(ch, child); }\n             }\n+            case (ast::pat_rec(?fields, _)) {\n+                for (ast::field_pat f in fields) { walk_pat(ch, f.pat); }\n+            }\n             case (_) { }\n         }\n     }"}, {"sha": "050cd59e1d46f140098e09ebec19f0ed4a7f5f32", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7595fe5153cfc3e703cec4516616c51af3223bc6/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7595fe5153cfc3e703cec4516616c51af3223bc6/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=7595fe5153cfc3e703cec4516616c51af3223bc6", "patch": "@@ -4839,6 +4839,23 @@ fn trans_pat_match(&@block_ctxt cx, &@ast::pat pat, ValueRef llval,\n             }\n             ret rslt(matched_cx, llval);\n         }\n+        case (ast::pat_rec(?field_pats, _)) {\n+            auto bcx = cx;\n+            auto ccx = cx.fcx.lcx.ccx;\n+            auto rec_ty = pat_ty(ccx.tcx, pat);\n+            auto fields = alt (ty::struct(ccx.tcx, rec_ty)) {\n+                ty::ty_rec(?fields) { fields }\n+            };\n+            for (ast::field_pat f in field_pats) {\n+                let uint ix = ty::field_idx(ccx.sess, f.pat.span,\n+                                            f.ident, fields);\n+                auto r = GEP_tup_like(bcx, rec_ty, llval, ~[0, ix as int]);\n+                auto v = load_if_immediate(r.bcx, r.val,\n+                                           pat_ty(ccx.tcx, f.pat));\n+                bcx = trans_pat_match(r.bcx, f.pat, v, next_cx).bcx;\n+            }\n+            ret rslt(bcx, llval);\n+        }\n     }\n }\n \n@@ -4896,6 +4913,21 @@ fn trans_pat_binding(&@block_ctxt cx, &@ast::pat pat, ValueRef llval,\n             }\n             ret rslt(this_cx, llval);\n         }\n+        case (ast::pat_rec(?field_pats, _)) {\n+            auto bcx = cx;\n+            auto ccx = cx.fcx.lcx.ccx;\n+            auto rec_ty = pat_ty(ccx.tcx, pat);\n+            auto fields = alt (ty::struct(ccx.tcx, rec_ty)) {\n+                ty::ty_rec(?fields) { fields }\n+            };\n+            for (ast::field_pat f in field_pats) {\n+                let uint ix = ty::field_idx(ccx.sess, f.pat.span,\n+                                            f.ident, fields);\n+                auto r = GEP_tup_like(bcx, rec_ty, llval, ~[0, ix as int]);\n+                bcx = trans_pat_binding(bcx, f.pat, r.val, true, bound).bcx;\n+            }\n+            ret rslt(bcx, llval);\n+        }\n     }\n }\n "}, {"sha": "cdd106385a58d0c483087b050f1dbaf33b172ea5", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 43, "deletions": 2, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/7595fe5153cfc3e703cec4516616c51af3223bc6/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7595fe5153cfc3e703cec4516616c51af3223bc6/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=7595fe5153cfc3e703cec4516616c51af3223bc6", "patch": "@@ -1278,6 +1278,11 @@ fn replace_expr_type(&@fn_ctxt fcx, &@ast::expr expr,\n     write::ty_fixup(fcx, expr.id, tup(new_tps, new_tyt._1));\n }\n \n+// FIXME remove once std::ivec::find makes it into a snapshot\n+fn ivec_find[T](fn(&T) -> bool  f, &T[] v) -> option::t[T] {\n+    for (T elt in v) { if (f(elt)) { ret some[T](elt); } }\n+    ret none[T];\n+}\n \n // AST fragment checking\n fn check_lit(@crate_ctxt ccx, &@ast::lit lit) -> ty::t {\n@@ -1395,16 +1400,52 @@ fn check_pat(&@fn_ctxt fcx, &ast::pat_id_map map, &@ast::pat pat,\n               case (_) {\n                 // FIXME: Switch expected and actual in this message? I\n                 // can never tell.\n-\n                 fcx.ccx.tcx.sess.span_fatal(pat.span,\n                                             #fmt(\"mismatched types: \\\n-                                                  expected tag, found %s\",\n+                                                  expected %s, found tag\",\n                                                  ty_to_str(fcx.ccx.tcx,\n                                                            expected)));\n               }\n             }\n             write::ty_fixup(fcx, pat.id, path_tpot);\n         }\n+        case (ast::pat_rec(?fields, ?etc)) {\n+            auto ex_fields;\n+            alt (structure_of(fcx, pat.span, expected)) {\n+                case (ty::ty_rec(?fields)) { ex_fields = fields; }\n+                case (_) {\n+                    fcx.ccx.tcx.sess.span_fatal\n+                        (pat.span, #fmt(\"mismatched types: expected %s, \\\n+                                         found record\",\n+                                        ty_to_str(fcx.ccx.tcx, expected)));\n+                }\n+            };\n+            auto f_count = ivec::len(fields);\n+            auto ex_f_count = ivec::len(ex_fields);\n+            if (ex_f_count < f_count || (!etc && ex_f_count > f_count)) {\n+                fcx.ccx.tcx.sess.span_fatal\n+                    (pat.span, #fmt(\"mismatched types: expected a record \\\n+                                     with %u fields, found one with %u \\\n+                                     fields\", ex_f_count, f_count));\n+            }\n+            fn matches(&str name, &ty::field f) -> bool {\n+                ret str::eq(name, f.ident);\n+            }\n+            for (ast::field_pat f in fields) {\n+                alt (ivec_find(bind matches(f.ident, _), ex_fields)) {\n+                    some(?field) {\n+                        check_pat(fcx, map, f.pat, field.mt.ty);\n+                    }\n+                    none {\n+                        fcx.ccx.tcx.sess.span_fatal\n+                            (pat.span, #fmt(\"mismatched types: did not \\\n+                                             expect a record with a field %s\",\n+                                            f.ident));\n+                    }\n+                }\n+            }\n+            write::ty_only_fixup(fcx, pat.id, expected);\n+        }\n     }\n }\n "}, {"sha": "6c9c2f2f249d52f6c5b6b4e29faf467b0285db9d", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7595fe5153cfc3e703cec4516616c51af3223bc6/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7595fe5153cfc3e703cec4516616c51af3223bc6/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=7595fe5153cfc3e703cec4516616c51af3223bc6", "patch": "@@ -118,11 +118,14 @@ type pat = rec(node_id id,\n                pat_ node,\n                span span);\n \n+type field_pat = rec(ident ident, @pat pat);\n+\n tag pat_ {\n     pat_wild;\n     pat_bind(ident);\n     pat_lit(@lit);\n     pat_tag(path, (@pat)[]);\n+    pat_rec(field_pat[], bool);\n }\n \n type pat_id_map = std::map::hashmap[str, ast::node_id];\n@@ -137,6 +140,9 @@ fn pat_id_map(&@pat pat) -> pat_id_map {\n             pat_tag(_, ?sub) {\n                 for (@pat p in sub) { walk(map, p); }\n             }\n+            pat_rec(?fields, _) {\n+                for (field_pat f in fields) { walk(map, f.pat); }\n+            }\n             _ {}\n         }\n     }"}, {"sha": "571473261ff2459d16652c8890a0b5b19afa5506", "filename": "src/comp/syntax/fold.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7595fe5153cfc3e703cec4516616c51af3223bc6/src%2Fcomp%2Fsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7595fe5153cfc3e703cec4516616c51af3223bc6/src%2Fcomp%2Fsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Ffold.rs?ref=7595fe5153cfc3e703cec4516616c51af3223bc6", "patch": "@@ -267,6 +267,13 @@ fn noop_fold_pat(&pat_ p, ast_fold fld) -> pat_ {\n         case (pat_tag(?pth, ?pats)) {\n             pat_tag(fld.fold_path(pth), ivec::map(fld.fold_pat, pats))\n         }\n+        case (pat_rec(?fields, ?etc)) {\n+            auto fs = ~[];\n+            for (ast::field_pat f in fields) {\n+                fs += ~[rec(ident=f.ident, pat=fld.fold_pat(f.pat))];\n+            }\n+            pat_rec(fs, etc)\n+        }\n     };\n }\n "}, {"sha": "29b12763d9123701d7003f5b4a3e3c7becbc14a5", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/7595fe5153cfc3e703cec4516616c51af3223bc6/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7595fe5153cfc3e703cec4516616c51af3223bc6/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=7595fe5153cfc3e703cec4516616c51af3223bc6", "patch": "@@ -1455,6 +1455,45 @@ fn parse_pat(&parser p) -> @ast::pat {\n                 }\n             }\n         }\n+        case (token::LBRACE) {\n+            p.bump();\n+            auto fields = ~[];\n+            auto etc = false;\n+            auto first = true;\n+            while (p.peek() != token::RBRACE) {\n+                if (p.peek() == token::DOT) {\n+                    p.bump();\n+                    expect(p, token::DOT);\n+                    expect(p, token::DOT);\n+                    if (p.peek() != token::RBRACE) {\n+                        p.fatal(\"expecting }, found \" +\n+                                token::to_str(p.get_reader(), p.peek()));\n+                    }\n+                    etc = true;\n+                    break;\n+                }\n+                if (first) { first = false; }\n+                else { expect(p, token::COMMA); }\n+                auto fieldname = parse_ident(p);\n+                auto subpat;\n+                if (p.peek() == token::COLON) {\n+                    p.bump();\n+                    subpat = parse_pat(p);\n+                } else {\n+                    if (p.get_bad_expr_words().contains_key(fieldname)) {\n+                        p.fatal(\"found \" + fieldname +\n+                                \" in binding position\");\n+                    }\n+                    subpat = @rec(id=p.get_id(),\n+                                  node=ast::pat_bind(fieldname),\n+                                  span=rec(lo=lo, hi=hi));\n+                }\n+                fields += ~[rec(ident=fieldname, pat=subpat)];\n+            }\n+            hi = p.get_hi_pos();\n+            p.bump();\n+            pat = ast::pat_rec(fields, etc);\n+        }\n         case (?tok) {\n             if (!is_ident(tok) || is_word(p, \"true\") || is_word(p, \"false\")) {\n                 auto lit = parse_lit(p);"}, {"sha": "e62b37807f2cc823b2d17e42c233c635fbb257b0", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7595fe5153cfc3e703cec4516616c51af3223bc6/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7595fe5153cfc3e703cec4516616c51af3223bc6/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=7595fe5153cfc3e703cec4516616c51af3223bc6", "patch": "@@ -1120,6 +1120,22 @@ fn print_pat(&ps s, &@ast::pat pat) {\n                 pclose(s);\n             }\n         }\n+        case (ast::pat_rec(?fields, ?etc)) {\n+            bopen(s);\n+            fn print_field(&ps s, &ast::field_pat f) {\n+                cbox(s, indent_unit);\n+                word(s.s, f.ident);\n+                word(s.s, \":\");\n+                print_pat(s, f.pat);\n+                end(s);\n+            }\n+            fn get_span(&ast::field_pat f) -> codemap::span {\n+                ret f.pat.span;\n+            }\n+            commasep_cmnt_ivec(s, consistent, fields, print_field, get_span);\n+            if (etc) { space(s.s); word(s.s, \"...\"); }\n+            bclose(s, pat.span);\n+        }\n     }\n     s.ann.post(ann_node);\n }"}, {"sha": "470a8e4e38db4cdf07cd7a4557a741587316ddda", "filename": "src/comp/syntax/visit.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7595fe5153cfc3e703cec4516616c51af3223bc6/src%2Fcomp%2Fsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7595fe5153cfc3e703cec4516616c51af3223bc6/src%2Fcomp%2Fsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fvisit.rs?ref=7595fe5153cfc3e703cec4516616c51af3223bc6", "patch": "@@ -190,6 +190,9 @@ fn visit_pat[E](&@pat p, &E e, &vt[E] v) {\n             for (@ty tp in path.node.types) { v.visit_ty(tp, e, v); }\n             for (@pat child in children) { v.visit_pat(child, e, v); }\n         }\n+        case (pat_rec(?fields, _)) {\n+            for (field_pat f in fields) { v.visit_pat(f.pat, e, v); }\n+        }\n         case (_) { }\n     }\n }"}, {"sha": "024437e43277f4edf31d295ec1f31031b7e6332e", "filename": "src/comp/syntax/walk.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7595fe5153cfc3e703cec4516616c51af3223bc6/src%2Fcomp%2Fsyntax%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7595fe5153cfc3e703cec4516616c51af3223bc6/src%2Fcomp%2Fsyntax%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fwalk.rs?ref=7595fe5153cfc3e703cec4516616c51af3223bc6", "patch": "@@ -189,6 +189,9 @@ fn walk_pat(&ast_visitor v, &@ast::pat p) {\n             for (@ast::ty tp in path.node.types) { walk_ty(v, tp); }\n             for (@ast::pat child in children) { walk_pat(v, child); }\n         }\n+        case (ast::pat_rec(?fields, _)) {\n+            for (ast::field_pat f in fields) { walk_pat(v, f.pat); }\n+        }\n         case (_) { }\n     }\n     v.visit_pat_post(p);"}, {"sha": "037658f631b7f8d7d26bbf75410a807d88c80a1b", "filename": "src/test/compile-fail/bad-record-pat-2.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7595fe5153cfc3e703cec4516616c51af3223bc6/src%2Ftest%2Fcompile-fail%2Fbad-record-pat-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7595fe5153cfc3e703cec4516616c51af3223bc6/src%2Ftest%2Fcompile-fail%2Fbad-record-pat-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-record-pat-2.rs?ref=7595fe5153cfc3e703cec4516616c51af3223bc6", "patch": "@@ -0,0 +1,7 @@\n+// error-pattern:did not expect a record with a field q\n+\n+fn main() {\n+    alt rec(x=1, y=2) {\n+        {x, q} {}\n+    }\n+}"}, {"sha": "9813267f432d5a77fde93eafbb59bc56bd5f9596", "filename": "src/test/compile-fail/bad-record-pat.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7595fe5153cfc3e703cec4516616c51af3223bc6/src%2Ftest%2Fcompile-fail%2Fbad-record-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7595fe5153cfc3e703cec4516616c51af3223bc6/src%2Ftest%2Fcompile-fail%2Fbad-record-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-record-pat.rs?ref=7595fe5153cfc3e703cec4516616c51af3223bc6", "patch": "@@ -0,0 +1,7 @@\n+// error-pattern:expected a record with 2 fields, found one with 1\n+\n+fn main() {\n+    alt rec(x=1, y=2) {\n+        {x} {}\n+    }\n+}"}, {"sha": "b03bc6476b175ca9781965c573613dfe02fb2125", "filename": "src/test/run-pass/record-pat.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7595fe5153cfc3e703cec4516616c51af3223bc6/src%2Ftest%2Frun-pass%2Frecord-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7595fe5153cfc3e703cec4516616c51af3223bc6/src%2Ftest%2Frun-pass%2Frecord-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frecord-pat.rs?ref=7595fe5153cfc3e703cec4516616c51af3223bc6", "patch": "@@ -0,0 +1,15 @@\n+tag t1 { a(int); b(uint); }\n+type t2 = rec(t1 x, int y);\n+tag t3 { c(t2, uint); }\n+\n+fn m(&t3 in) -> int {\n+    alt in {\n+        c({x: a(?m) ...}, _) { ret m; }\n+        c({x: b(?m), y}, ?z) { ret (m + z) as int + y; }\n+    }\n+}\n+\n+fn main() {\n+    assert m(c(rec(x=a(10), y=5), 4u)) == 10;\n+    assert m(c(rec(x=b(10u), y=5), 4u)) == 19;\n+}"}]}