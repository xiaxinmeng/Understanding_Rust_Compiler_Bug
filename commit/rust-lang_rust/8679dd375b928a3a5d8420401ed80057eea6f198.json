{"sha": "8679dd375b928a3a5d8420401ed80057eea6f198", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2NzlkZDM3NWI5MjhhM2E1ZDg0MjA0MDFlZDgwMDU3ZWVhNmYxOTg=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-07-23T15:06:29Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-08-10T21:49:06Z"}, "message": "unnecessary_unwrap, panicking_unwrap: make lints adhere to lint message convention", "tree": {"sha": "5eaa24aeaac628f162345372cebdcae53d1b5e6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5eaa24aeaac628f162345372cebdcae53d1b5e6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8679dd375b928a3a5d8420401ed80057eea6f198", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8679dd375b928a3a5d8420401ed80057eea6f198", "html_url": "https://github.com/rust-lang/rust/commit/8679dd375b928a3a5d8420401ed80057eea6f198", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8679dd375b928a3a5d8420401ed80057eea6f198/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b7ab1d38b13ad8af555793cdf7ce08c12c22595", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b7ab1d38b13ad8af555793cdf7ce08c12c22595", "html_url": "https://github.com/rust-lang/rust/commit/9b7ab1d38b13ad8af555793cdf7ce08c12c22595"}], "stats": {"total": 76, "additions": 38, "deletions": 38}, "files": [{"sha": "fd755dcc79049d9f733f107a5acc87ff4ae892c8", "filename": "clippy_lints/src/unwrap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8679dd375b928a3a5d8420401ed80057eea6f198/clippy_lints%2Fsrc%2Funwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8679dd375b928a3a5d8420401ed80057eea6f198/clippy_lints%2Fsrc%2Funwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funwrap.rs?ref=8679dd375b928a3a5d8420401ed80057eea6f198", "patch": "@@ -181,8 +181,8 @@ impl<'a, 'tcx> Visitor<'tcx> for UnwrappableVariablesVisitor<'a, 'tcx> {\n                             self.cx,\n                             UNNECESSARY_UNWRAP,\n                             expr.span,\n-                            &format!(\"You checked before that `{}()` cannot fail. \\\n-                            Instead of checking and unwrapping, it's better to use `if let` or `match`.\",\n+                            &format!(\"you checked before that `{}()` cannot fail. \\\n+                            Instead of checking and unwrapping, it's better to use `if let` or `match`\",\n                             method_name.ident.name),\n                             |diag| { diag.span_label(unwrappable.check.span, \"the check is happening here\"); },\n                         );\n@@ -191,7 +191,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnwrappableVariablesVisitor<'a, 'tcx> {\n                             self.cx,\n                             PANICKING_UNWRAP,\n                             expr.span,\n-                            &format!(\"This call to `{}()` will always panic.\",\n+                            &format!(\"this call to `{}()` will always panic\",\n                             method_name.ident.name),\n                             |diag| { diag.span_label(unwrappable.check.span, \"because of this check\"); },\n                         );"}, {"sha": "5b62dca629f7cfbbf16b714bed4081ebc9cca815", "filename": "tests/ui/checked_unwrap/complex_conditionals.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/8679dd375b928a3a5d8420401ed80057eea6f198/tests%2Fui%2Fchecked_unwrap%2Fcomplex_conditionals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8679dd375b928a3a5d8420401ed80057eea6f198/tests%2Fui%2Fchecked_unwrap%2Fcomplex_conditionals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchecked_unwrap%2Fcomplex_conditionals.stderr?ref=8679dd375b928a3a5d8420401ed80057eea6f198", "patch": "@@ -1,4 +1,4 @@\n-error: You checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n+error: you checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`\n   --> $DIR/complex_conditionals.rs:8:9\n    |\n LL |     if x.is_ok() && y.is_err() {\n@@ -12,7 +12,7 @@ note: the lint level is defined here\n LL | #![deny(clippy::panicking_unwrap, clippy::unnecessary_unwrap)]\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: This call to `unwrap_err()` will always panic.\n+error: this call to `unwrap_err()` will always panic\n   --> $DIR/complex_conditionals.rs:9:9\n    |\n LL |     if x.is_ok() && y.is_err() {\n@@ -27,7 +27,7 @@ note: the lint level is defined here\n LL | #![deny(clippy::panicking_unwrap, clippy::unnecessary_unwrap)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: This call to `unwrap()` will always panic.\n+error: this call to `unwrap()` will always panic\n   --> $DIR/complex_conditionals.rs:10:9\n    |\n LL |     if x.is_ok() && y.is_err() {\n@@ -36,7 +36,7 @@ LL |     if x.is_ok() && y.is_err() {\n LL |         y.unwrap(); // will panic\n    |         ^^^^^^^^^^\n \n-error: You checked before that `unwrap_err()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n+error: you checked before that `unwrap_err()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`\n   --> $DIR/complex_conditionals.rs:11:9\n    |\n LL |     if x.is_ok() && y.is_err() {\n@@ -45,7 +45,7 @@ LL |     if x.is_ok() && y.is_err() {\n LL |         y.unwrap_err(); // unnecessary\n    |         ^^^^^^^^^^^^^^\n \n-error: This call to `unwrap()` will always panic.\n+error: this call to `unwrap()` will always panic\n   --> $DIR/complex_conditionals.rs:25:9\n    |\n LL |     if x.is_ok() || y.is_ok() {\n@@ -54,7 +54,7 @@ LL |     if x.is_ok() || y.is_ok() {\n LL |         x.unwrap(); // will panic\n    |         ^^^^^^^^^^\n \n-error: You checked before that `unwrap_err()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n+error: you checked before that `unwrap_err()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`\n   --> $DIR/complex_conditionals.rs:26:9\n    |\n LL |     if x.is_ok() || y.is_ok() {\n@@ -63,7 +63,7 @@ LL |     if x.is_ok() || y.is_ok() {\n LL |         x.unwrap_err(); // unnecessary\n    |         ^^^^^^^^^^^^^^\n \n-error: This call to `unwrap()` will always panic.\n+error: this call to `unwrap()` will always panic\n   --> $DIR/complex_conditionals.rs:27:9\n    |\n LL |     if x.is_ok() || y.is_ok() {\n@@ -72,7 +72,7 @@ LL |     if x.is_ok() || y.is_ok() {\n LL |         y.unwrap(); // will panic\n    |         ^^^^^^^^^^\n \n-error: You checked before that `unwrap_err()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n+error: you checked before that `unwrap_err()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`\n   --> $DIR/complex_conditionals.rs:28:9\n    |\n LL |     if x.is_ok() || y.is_ok() {\n@@ -81,15 +81,15 @@ LL |     if x.is_ok() || y.is_ok() {\n LL |         y.unwrap_err(); // unnecessary\n    |         ^^^^^^^^^^^^^^\n \n-error: You checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n+error: you checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`\n   --> $DIR/complex_conditionals.rs:32:9\n    |\n LL |     if x.is_ok() && !(y.is_ok() || z.is_err()) {\n    |        --------- the check is happening here\n LL |         x.unwrap(); // unnecessary\n    |         ^^^^^^^^^^\n \n-error: This call to `unwrap_err()` will always panic.\n+error: this call to `unwrap_err()` will always panic\n   --> $DIR/complex_conditionals.rs:33:9\n    |\n LL |     if x.is_ok() && !(y.is_ok() || z.is_err()) {\n@@ -98,7 +98,7 @@ LL |         x.unwrap(); // unnecessary\n LL |         x.unwrap_err(); // will panic\n    |         ^^^^^^^^^^^^^^\n \n-error: This call to `unwrap()` will always panic.\n+error: this call to `unwrap()` will always panic\n   --> $DIR/complex_conditionals.rs:34:9\n    |\n LL |     if x.is_ok() && !(y.is_ok() || z.is_err()) {\n@@ -107,7 +107,7 @@ LL |     if x.is_ok() && !(y.is_ok() || z.is_err()) {\n LL |         y.unwrap(); // will panic\n    |         ^^^^^^^^^^\n \n-error: You checked before that `unwrap_err()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n+error: you checked before that `unwrap_err()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`\n   --> $DIR/complex_conditionals.rs:35:9\n    |\n LL |     if x.is_ok() && !(y.is_ok() || z.is_err()) {\n@@ -116,7 +116,7 @@ LL |     if x.is_ok() && !(y.is_ok() || z.is_err()) {\n LL |         y.unwrap_err(); // unnecessary\n    |         ^^^^^^^^^^^^^^\n \n-error: You checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n+error: you checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`\n   --> $DIR/complex_conditionals.rs:36:9\n    |\n LL |     if x.is_ok() && !(y.is_ok() || z.is_err()) {\n@@ -125,7 +125,7 @@ LL |     if x.is_ok() && !(y.is_ok() || z.is_err()) {\n LL |         z.unwrap(); // unnecessary\n    |         ^^^^^^^^^^\n \n-error: This call to `unwrap_err()` will always panic.\n+error: this call to `unwrap_err()` will always panic\n   --> $DIR/complex_conditionals.rs:37:9\n    |\n LL |     if x.is_ok() && !(y.is_ok() || z.is_err()) {\n@@ -134,7 +134,7 @@ LL |     if x.is_ok() && !(y.is_ok() || z.is_err()) {\n LL |         z.unwrap_err(); // will panic\n    |         ^^^^^^^^^^^^^^\n \n-error: This call to `unwrap()` will always panic.\n+error: this call to `unwrap()` will always panic\n   --> $DIR/complex_conditionals.rs:45:9\n    |\n LL |     if x.is_ok() || !(y.is_ok() && z.is_err()) {\n@@ -143,7 +143,7 @@ LL |     if x.is_ok() || !(y.is_ok() && z.is_err()) {\n LL |         x.unwrap(); // will panic\n    |         ^^^^^^^^^^\n \n-error: You checked before that `unwrap_err()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n+error: you checked before that `unwrap_err()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`\n   --> $DIR/complex_conditionals.rs:46:9\n    |\n LL |     if x.is_ok() || !(y.is_ok() && z.is_err()) {\n@@ -152,7 +152,7 @@ LL |     if x.is_ok() || !(y.is_ok() && z.is_err()) {\n LL |         x.unwrap_err(); // unnecessary\n    |         ^^^^^^^^^^^^^^\n \n-error: You checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n+error: you checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`\n   --> $DIR/complex_conditionals.rs:47:9\n    |\n LL |     if x.is_ok() || !(y.is_ok() && z.is_err()) {\n@@ -161,7 +161,7 @@ LL |     if x.is_ok() || !(y.is_ok() && z.is_err()) {\n LL |         y.unwrap(); // unnecessary\n    |         ^^^^^^^^^^\n \n-error: This call to `unwrap_err()` will always panic.\n+error: this call to `unwrap_err()` will always panic\n   --> $DIR/complex_conditionals.rs:48:9\n    |\n LL |     if x.is_ok() || !(y.is_ok() && z.is_err()) {\n@@ -170,7 +170,7 @@ LL |     if x.is_ok() || !(y.is_ok() && z.is_err()) {\n LL |         y.unwrap_err(); // will panic\n    |         ^^^^^^^^^^^^^^\n \n-error: This call to `unwrap()` will always panic.\n+error: this call to `unwrap()` will always panic\n   --> $DIR/complex_conditionals.rs:49:9\n    |\n LL |     if x.is_ok() || !(y.is_ok() && z.is_err()) {\n@@ -179,7 +179,7 @@ LL |     if x.is_ok() || !(y.is_ok() && z.is_err()) {\n LL |         z.unwrap(); // will panic\n    |         ^^^^^^^^^^\n \n-error: You checked before that `unwrap_err()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n+error: you checked before that `unwrap_err()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`\n   --> $DIR/complex_conditionals.rs:50:9\n    |\n LL |     if x.is_ok() || !(y.is_ok() && z.is_err()) {"}, {"sha": "46ffc16c23e563a0c0527e29ac4c52c50aa77c2f", "filename": "tests/ui/checked_unwrap/complex_conditionals_nested.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8679dd375b928a3a5d8420401ed80057eea6f198/tests%2Fui%2Fchecked_unwrap%2Fcomplex_conditionals_nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8679dd375b928a3a5d8420401ed80057eea6f198/tests%2Fui%2Fchecked_unwrap%2Fcomplex_conditionals_nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchecked_unwrap%2Fcomplex_conditionals_nested.stderr?ref=8679dd375b928a3a5d8420401ed80057eea6f198", "patch": "@@ -1,4 +1,4 @@\n-error: You checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n+error: you checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`\n   --> $DIR/complex_conditionals_nested.rs:8:13\n    |\n LL |         if x.is_some() {\n@@ -12,7 +12,7 @@ note: the lint level is defined here\n LL | #![deny(clippy::panicking_unwrap, clippy::unnecessary_unwrap)]\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: This call to `unwrap()` will always panic.\n+error: this call to `unwrap()` will always panic\n   --> $DIR/complex_conditionals_nested.rs:10:13\n    |\n LL |         if x.is_some() {"}, {"sha": "bf4b6c930980d82b9a4aa4bbd32a6c0e95f83905", "filename": "tests/ui/checked_unwrap/simple_conditionals.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8679dd375b928a3a5d8420401ed80057eea6f198/tests%2Fui%2Fchecked_unwrap%2Fsimple_conditionals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8679dd375b928a3a5d8420401ed80057eea6f198/tests%2Fui%2Fchecked_unwrap%2Fsimple_conditionals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchecked_unwrap%2Fsimple_conditionals.stderr?ref=8679dd375b928a3a5d8420401ed80057eea6f198", "patch": "@@ -1,4 +1,4 @@\n-error: You checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n+error: you checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`\n   --> $DIR/simple_conditionals.rs:39:9\n    |\n LL |     if x.is_some() {\n@@ -12,7 +12,7 @@ note: the lint level is defined here\n LL | #![deny(clippy::panicking_unwrap, clippy::unnecessary_unwrap)]\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: This call to `unwrap()` will always panic.\n+error: this call to `unwrap()` will always panic\n   --> $DIR/simple_conditionals.rs:41:9\n    |\n LL |     if x.is_some() {\n@@ -27,15 +27,15 @@ note: the lint level is defined here\n LL | #![deny(clippy::panicking_unwrap, clippy::unnecessary_unwrap)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: This call to `unwrap()` will always panic.\n+error: this call to `unwrap()` will always panic\n   --> $DIR/simple_conditionals.rs:44:9\n    |\n LL |     if x.is_none() {\n    |        ----------- because of this check\n LL |         x.unwrap(); // will panic\n    |         ^^^^^^^^^^\n \n-error: You checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n+error: you checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`\n   --> $DIR/simple_conditionals.rs:46:9\n    |\n LL |     if x.is_none() {\n@@ -44,7 +44,7 @@ LL |     if x.is_none() {\n LL |         x.unwrap(); // unnecessary\n    |         ^^^^^^^^^^\n \n-error: You checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n+error: you checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`\n   --> $DIR/simple_conditionals.rs:7:13\n    |\n LL |         if $a.is_some() {\n@@ -57,15 +57,15 @@ LL |     m!(x);\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: You checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n+error: you checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`\n   --> $DIR/simple_conditionals.rs:54:9\n    |\n LL |     if x.is_ok() {\n    |        --------- the check is happening here\n LL |         x.unwrap(); // unnecessary\n    |         ^^^^^^^^^^\n \n-error: This call to `unwrap_err()` will always panic.\n+error: this call to `unwrap_err()` will always panic\n   --> $DIR/simple_conditionals.rs:55:9\n    |\n LL |     if x.is_ok() {\n@@ -74,7 +74,7 @@ LL |         x.unwrap(); // unnecessary\n LL |         x.unwrap_err(); // will panic\n    |         ^^^^^^^^^^^^^^\n \n-error: This call to `unwrap()` will always panic.\n+error: this call to `unwrap()` will always panic\n   --> $DIR/simple_conditionals.rs:57:9\n    |\n LL |     if x.is_ok() {\n@@ -83,7 +83,7 @@ LL |     if x.is_ok() {\n LL |         x.unwrap(); // will panic\n    |         ^^^^^^^^^^\n \n-error: You checked before that `unwrap_err()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n+error: you checked before that `unwrap_err()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`\n   --> $DIR/simple_conditionals.rs:58:9\n    |\n LL |     if x.is_ok() {\n@@ -92,15 +92,15 @@ LL |     if x.is_ok() {\n LL |         x.unwrap_err(); // unnecessary\n    |         ^^^^^^^^^^^^^^\n \n-error: This call to `unwrap()` will always panic.\n+error: this call to `unwrap()` will always panic\n   --> $DIR/simple_conditionals.rs:61:9\n    |\n LL |     if x.is_err() {\n    |        ---------- because of this check\n LL |         x.unwrap(); // will panic\n    |         ^^^^^^^^^^\n \n-error: You checked before that `unwrap_err()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n+error: you checked before that `unwrap_err()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`\n   --> $DIR/simple_conditionals.rs:62:9\n    |\n LL |     if x.is_err() {\n@@ -109,7 +109,7 @@ LL |         x.unwrap(); // will panic\n LL |         x.unwrap_err(); // unnecessary\n    |         ^^^^^^^^^^^^^^\n \n-error: You checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n+error: you checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`\n   --> $DIR/simple_conditionals.rs:64:9\n    |\n LL |     if x.is_err() {\n@@ -118,7 +118,7 @@ LL |     if x.is_err() {\n LL |         x.unwrap(); // unnecessary\n    |         ^^^^^^^^^^\n \n-error: This call to `unwrap_err()` will always panic.\n+error: this call to `unwrap_err()` will always panic\n   --> $DIR/simple_conditionals.rs:65:9\n    |\n LL |     if x.is_err() {"}]}