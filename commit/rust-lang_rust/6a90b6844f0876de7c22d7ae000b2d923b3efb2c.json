{"sha": "6a90b6844f0876de7c22d7ae000b2d923b3efb2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhOTBiNjg0NGYwODc2ZGU3YzIyZDdhZTAwMGIyZDkyM2IzZWZiMmM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-03-08T12:27:43Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-03-08T12:27:43Z"}, "message": "Revert \"Use multiple codegen units\"\n\nThis reverts commit 03acf67a0e3a2780d2a1443f4e4596b69d9a2b09.", "tree": {"sha": "45cbe0c6dedadb46b9ade056c6f08e5d25b60b75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45cbe0c6dedadb46b9ade056c6f08e5d25b60b75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a90b6844f0876de7c22d7ae000b2d923b3efb2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a90b6844f0876de7c22d7ae000b2d923b3efb2c", "html_url": "https://github.com/rust-lang/rust/commit/6a90b6844f0876de7c22d7ae000b2d923b3efb2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a90b6844f0876de7c22d7ae000b2d923b3efb2c/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63f22397ae2a3eb7a4ab43488a1ae1fc77f33d45", "url": "https://api.github.com/repos/rust-lang/rust/commits/63f22397ae2a3eb7a4ab43488a1ae1fc77f33d45", "html_url": "https://github.com/rust-lang/rust/commit/63f22397ae2a3eb7a4ab43488a1ae1fc77f33d45"}], "stats": {"total": 59, "additions": 29, "deletions": 30}, "files": [{"sha": "b6cc3a98257f04347c6af8f8ac8d9c001aade3f9", "filename": "src/driver.rs", "status": "modified", "additions": 29, "deletions": 30, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/6a90b6844f0876de7c22d7ae000b2d923b3efb2c/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a90b6844f0876de7c22d7ae000b2d923b3efb2c/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=6a90b6844f0876de7c22d7ae000b2d923b3efb2c", "patch": "@@ -72,9 +72,7 @@ fn run_jit(tcx: TyCtxt<'_>) -> ! {\n         .iter()\n         .map(|cgu| cgu.items_in_deterministic_order(tcx).into_iter())\n         .flatten()\n-        .collect::<FxHashMap<_, (_, _)>>()\n-        .into_iter()\n-        .collect::<Vec<(_, (_, _))>>();\n+        .collect::<FxHashMap<_, (_, _)>>();\n \n     time(tcx.sess, \"codegen mono items\", || {\n         codegen_mono_items(tcx, &mut jit_module, None, mono_items);\n@@ -210,35 +208,36 @@ fn run_aot(\n         };\n \n     let (_, cgus) = tcx.collect_and_partition_mono_items(LOCAL_CRATE);\n+    let mono_items = cgus\n+        .iter()\n+        .map(|cgu| cgu.items_in_deterministic_order(tcx).into_iter())\n+        .flatten()\n+        .collect::<FxHashMap<_, (_, _)>>();\n \n-    let modules = time(tcx.sess, \"codegen mono items\", move || {\n-        cgus.iter().map(|cgu| {\n-            let mono_items = cgu.items_in_deterministic_order(tcx);\n-\n-            let mut module = new_module(cgu.name().as_str().to_string());\n-\n-            let mut debug = if tcx.sess.opts.debuginfo != DebugInfo::None {\n-                let debug = DebugContext::new(\n-                    tcx,\n-                    module.target_config().pointer_type().bytes() as u8,\n-                );\n-                Some(debug)\n-            } else {\n-                None\n-            };\n+    let mut module = new_module(\"some_file\".to_string());\n \n-            codegen_mono_items(tcx, &mut module, debug.as_mut(), mono_items);\n-            crate::main_shim::maybe_create_entry_wrapper(tcx, &mut module);\n+    let mut debug = if tcx.sess.opts.debuginfo != DebugInfo::None {\n+        let debug = DebugContext::new(\n+            tcx,\n+            module.target_config().pointer_type().bytes() as u8,\n+        );\n+        Some(debug)\n+    } else {\n+        None\n+    };\n \n-            emit_module(\n-                tcx,\n-                cgu.name().as_str().to_string(),\n-                ModuleKind::Regular,\n-                module,\n-                debug,\n-            )\n-        }).collect::<Vec<_>>()\n+    time(tcx.sess, \"codegen mono items\", || {\n+        codegen_mono_items(tcx, &mut module, debug.as_mut(), mono_items);\n     });\n+    crate::main_shim::maybe_create_entry_wrapper(tcx, &mut module);\n+\n+    let modules = vec![emit_module(\n+        tcx,\n+        \"some_file\".to_string(),\n+        ModuleKind::Regular,\n+        module,\n+        debug,\n+    )];\n \n     tcx.sess.abort_if_errors();\n \n@@ -311,12 +310,12 @@ fn codegen_mono_items<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     module: &mut Module<impl Backend + 'static>,\n     debug_context: Option<&mut DebugContext<'tcx>>,\n-    mono_items: Vec<(MonoItem<'tcx>, (RLinkage, Visibility))>,\n+    mono_items: FxHashMap<MonoItem<'tcx>, (RLinkage, Visibility)>,\n ) {\n     let mut cx = CodegenCx::new(tcx, module, debug_context);\n \n     tcx.sess.time(\"predefine functions\", || {\n-        for &(mono_item, (linkage, visibility)) in &mono_items {\n+        for (&mono_item, &(linkage, visibility)) in &mono_items {\n             match mono_item {\n                 MonoItem::Fn(instance) => {\n                     let (name, sig) ="}]}