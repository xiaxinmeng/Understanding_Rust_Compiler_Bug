{"sha": "ec376c783e3a64445c4b55fb5980ae922319a916", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjMzc2Yzc4M2UzYTY0NDQ1YzRiNTVmYjU5ODBhZTkyMjMxOWE5MTY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-18T22:00:49Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-10T21:12:07Z"}, "message": "Move `MacroKind` into `libsyntax_pos`\n\nSo it can be eventually used in `ExpnInfo`", "tree": {"sha": "15053bf984ac34c06a42bb72dc1cff2964262b00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15053bf984ac34c06a42bb72dc1cff2964262b00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec376c783e3a64445c4b55fb5980ae922319a916", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec376c783e3a64445c4b55fb5980ae922319a916", "html_url": "https://github.com/rust-lang/rust/commit/ec376c783e3a64445c4b55fb5980ae922319a916", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec376c783e3a64445c4b55fb5980ae922319a916/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48635226d8d71f18b09ea40f5cdbe34dbaaf378f", "url": "https://api.github.com/repos/rust-lang/rust/commits/48635226d8d71f18b09ea40f5cdbe34dbaaf378f", "html_url": "https://github.com/rust-lang/rust/commit/48635226d8d71f18b09ea40f5cdbe34dbaaf378f"}], "stats": {"total": 57, "additions": 29, "deletions": 28}, "files": [{"sha": "09ff44115b49dae07beb8aa6662c5359a3a7ab8b", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 28, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ec376c783e3a64445c4b55fb5980ae922319a916/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec376c783e3a64445c4b55fb5980ae922319a916/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=ec376c783e3a64445c4b55fb5980ae922319a916", "patch": "@@ -24,6 +24,7 @@ use std::path::PathBuf;\n use std::rc::Rc;\n use std::default::Default;\n \n+pub use syntax_pos::hygiene::MacroKind;\n \n #[derive(Debug,Clone)]\n pub enum Annotatable {\n@@ -518,34 +519,6 @@ impl MacResult for DummyResult {\n     }\n }\n \n-/// Represents different kinds of macro invocations that can be resolved.\n-#[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n-pub enum MacroKind {\n-    /// A bang macro - foo!()\n-    Bang,\n-    /// An attribute macro - #[foo]\n-    Attr,\n-    /// A derive attribute macro - #[derive(Foo)]\n-    Derive,\n-}\n-\n-impl MacroKind {\n-    pub fn descr(self) -> &'static str {\n-        match self {\n-            MacroKind::Bang => \"macro\",\n-            MacroKind::Attr => \"attribute macro\",\n-            MacroKind::Derive => \"derive macro\",\n-        }\n-    }\n-\n-    pub fn article(self) -> &'static str {\n-        match self {\n-            MacroKind::Attr => \"an\",\n-            _ => \"a\",\n-        }\n-    }\n-}\n-\n /// A syntax extension kind.\n pub enum SyntaxExtensionKind {\n     /// A token-based function-like macro."}, {"sha": "6a2aba17a793e8a1f88e00a3fe660726d5c0136a", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ec376c783e3a64445c4b55fb5980ae922319a916/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec376c783e3a64445c4b55fb5980ae922319a916/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=ec376c783e3a64445c4b55fb5980ae922319a916", "patch": "@@ -723,6 +723,34 @@ impl ExpnFormat {\n     }\n }\n \n+/// The kind of macro invocation or definition.\n+#[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+pub enum MacroKind {\n+    /// A bang macro `foo!()`.\n+    Bang,\n+    /// An attribute macro `#[foo]`.\n+    Attr,\n+    /// A derive macro `#[derive(Foo)]`\n+    Derive,\n+}\n+\n+impl MacroKind {\n+    pub fn descr(self) -> &'static str {\n+        match self {\n+            MacroKind::Bang => \"macro\",\n+            MacroKind::Attr => \"attribute macro\",\n+            MacroKind::Derive => \"derive macro\",\n+        }\n+    }\n+\n+    pub fn article(self) -> &'static str {\n+        match self {\n+            MacroKind::Attr => \"an\",\n+            _ => \"a\",\n+        }\n+    }\n+}\n+\n /// The kind of compiler desugaring.\n #[derive(Clone, Copy, Hash, Debug, PartialEq, Eq, RustcEncodable, RustcDecodable)]\n pub enum CompilerDesugaringKind {"}]}