{"sha": "450a9c5b122f3807c9dbabcf29e2bd7d40410dc7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1MGE5YzViMTIyZjM4MDdjOWRiYWJjZjI5ZTJiZDdkNDA0MTBkYzc=", "commit": {"author": {"name": "BooksBaum", "email": "15612932+Booksbaum@users.noreply.github.com", "date": "2021-08-06T08:55:44Z"}, "committer": {"name": "BooksBaum", "email": "15612932+Booksbaum@users.noreply.github.com", "date": "2021-08-17T17:23:05Z"}, "message": "Add destructure in sub-pattern (after `@`)", "tree": {"sha": "36cfc8c75b95391c7beb8db7c1a44be0ef9e68fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36cfc8c75b95391c7beb8db7c1a44be0ef9e68fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/450a9c5b122f3807c9dbabcf29e2bd7d40410dc7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEJTdsK5zmAD3L8AFljIMXU7iI9loFAmEb8HkACgkQjIMXU7iI\n9lqLRQ/8DRpcW8irAKV4mMKokFkFwBbvOXFRMbpLmC1qS5ThSEJHXr0BgO402E3n\nkCUhMuRByelZu0W6O4ob1ZuPl8WwAEMg1ZkjWQqctuGSjq4jK76kP6/vXV41HlYh\n59N5o2wUEUVveSRlwAc1LPxMhpBrgr7mhSr2OVsm19Be5kLZ9VxGPbD1vR5s3dlB\nhVjok0+gSIlmFjZEsqX0I5tT0p8MYr1o+sI9So2oL2trVzBp+XqB6zd7w/OaBYBy\nFwgjby3o5hD7nrNaLczWeEbotYHJOl7ZbCDM/TL0N9pDz2eu132txhreGx6Yhijz\noIFq/4WX6ser9JPipGmAmLn2BFlZ+wuHUas7FC3NjHsAjj79mnv2gj8/4GY/oZdY\nA8bpf5h6gYZvA0AWxOGlIifO9bMy/TpnCJNPVyRAjFsRdSyC5JjzWFLRPQES+Wbo\nA1Pawawh1yUVVORyThINDZn9BosMRwUAMQwOfzEGWVAC90VHJXWzmYFYGoSMwPQI\n6+PF+Yis5bCd85aQ1ks1w9GRlRUp23gQGFpxH3ErKOuFSUyM5K41MOPOdRDllbrr\nSabAs69AszXh9eI8M9HBazq3z0UANRGiyvCgT7PjOJn4g6zP2dyBMKPKskcIbf8a\notTboLKrOtRIEhndIWQCc5cRXhY+cR+12kcY3j3DriTAB/lj4eE=\n=mmYX\n-----END PGP SIGNATURE-----", "payload": "tree 36cfc8c75b95391c7beb8db7c1a44be0ef9e68fc\nparent 3e4051938d5d14fd72498a2d3e515b11437d73c9\nauthor BooksBaum <15612932+Booksbaum@users.noreply.github.com> 1628240144 +0200\ncommitter BooksBaum <15612932+Booksbaum@users.noreply.github.com> 1629220985 +0200\n\nAdd destructure in sub-pattern (after `@`)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/450a9c5b122f3807c9dbabcf29e2bd7d40410dc7", "html_url": "https://github.com/rust-lang/rust/commit/450a9c5b122f3807c9dbabcf29e2bd7d40410dc7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/450a9c5b122f3807c9dbabcf29e2bd7d40410dc7/comments", "author": {"login": "Booksbaum", "id": 15612932, "node_id": "MDQ6VXNlcjE1NjEyOTMy", "avatar_url": "https://avatars.githubusercontent.com/u/15612932?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Booksbaum", "html_url": "https://github.com/Booksbaum", "followers_url": "https://api.github.com/users/Booksbaum/followers", "following_url": "https://api.github.com/users/Booksbaum/following{/other_user}", "gists_url": "https://api.github.com/users/Booksbaum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Booksbaum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Booksbaum/subscriptions", "organizations_url": "https://api.github.com/users/Booksbaum/orgs", "repos_url": "https://api.github.com/users/Booksbaum/repos", "events_url": "https://api.github.com/users/Booksbaum/events{/privacy}", "received_events_url": "https://api.github.com/users/Booksbaum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Booksbaum", "id": 15612932, "node_id": "MDQ6VXNlcjE1NjEyOTMy", "avatar_url": "https://avatars.githubusercontent.com/u/15612932?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Booksbaum", "html_url": "https://github.com/Booksbaum", "followers_url": "https://api.github.com/users/Booksbaum/followers", "following_url": "https://api.github.com/users/Booksbaum/following{/other_user}", "gists_url": "https://api.github.com/users/Booksbaum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Booksbaum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Booksbaum/subscriptions", "organizations_url": "https://api.github.com/users/Booksbaum/orgs", "repos_url": "https://api.github.com/users/Booksbaum/repos", "events_url": "https://api.github.com/users/Booksbaum/events{/privacy}", "received_events_url": "https://api.github.com/users/Booksbaum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e4051938d5d14fd72498a2d3e515b11437d73c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e4051938d5d14fd72498a2d3e515b11437d73c9", "html_url": "https://github.com/rust-lang/rust/commit/3e4051938d5d14fd72498a2d3e515b11437d73c9"}], "stats": {"total": 379, "additions": 323, "deletions": 56}, "files": [{"sha": "4f34c4ea0df8aded2b9060c5400e7939fe5610cc", "filename": "crates/ide_assists/src/handlers/destructure_tuple_binding.rs", "status": "modified", "additions": 323, "deletions": 56, "changes": 379, "blob_url": "https://github.com/rust-lang/rust/blob/450a9c5b122f3807c9dbabcf29e2bd7d40410dc7/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fdestructure_tuple_binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/450a9c5b122f3807c9dbabcf29e2bd7d40410dc7/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fdestructure_tuple_binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fdestructure_tuple_binding.rs?ref=450a9c5b122f3807c9dbabcf29e2bd7d40410dc7", "patch": "@@ -13,7 +13,7 @@ use crate::assist_context::{AssistBuilder, AssistContext, Assists};\n \n // Assist: destructure_tuple_binding\n //\n-// Destructures a tuple binding into its items.\n+// Destructures a tuple binding in place.\n //\n // ```\n // fn main() {\n@@ -28,22 +28,56 @@ use crate::assist_context::{AssistBuilder, AssistContext, Assists};\n //     let v = _0;\n // }\n // ```\n-\n+//\n+//\n+// And (currently disabled):\n+// Assist: destructure_tuple_binding_in_sub_pattern\n+//\n+// Destructures tuple items in sub-pattern (after `@`).\n+//\n+// ```\n+// fn main() {\n+//     let $0t = (1,2);\n+//     let v = t.0;\n+// }\n+// ```\n+// ->\n+// ```\n+// fn main() {\n+//     let t @ (_0, _1) = (1,2);\n+//     let v = _0;\n+// }\n+// ```\n pub(crate) fn destructure_tuple_binding(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    // find variable pattern under cursor\n+    destructure_tuple_binding_impl(acc, ctx, false)\n+}\n+\n+pub(crate) fn destructure_tuple_binding_impl(acc: &mut Assists, ctx: &AssistContext, with_sub_pattern: bool) -> Option<()> {\n     let ident_pat = ctx.find_node_at_offset::<ast::IdentPat>()?;\n     let data = collect_data(ident_pat, ctx)?;\n \n     acc.add(\n         AssistId(\"destructure_tuple\", AssistKind::RefactorRewrite),\n-        \"Destructure tuple\",\n+        if with_sub_pattern { \"Destructure tuple in place\" } else { \"Destructure tuple\" },\n         data.range,\n         |builder| {\n-            edit_tuple_assignment(&data, builder, ctx);\n-            edit_tuple_usages(&data, builder, ctx);\n+            edit_tuple_assignment(&data, builder, ctx, false);\n+            edit_tuple_usages(&data, builder, ctx, false);\n         },\n     );\n \n+    if with_sub_pattern {\n+        acc.add(\n+            AssistId(\"destructure_tuple_in_sub_pattern\", AssistKind::RefactorRewrite),\n+            \"Destructure tuple in sub-pattern\",\n+            data.range,\n+            |builder| {\n+                edit_tuple_assignment(&data, builder, ctx, true);\n+                edit_tuple_usages(&data, builder, ctx, true);\n+            },\n+        );\n+    }\n+\n     Some(())\n }\n \n@@ -102,7 +136,7 @@ struct TupleData {\n     // field_types: Vec<Type>,\n     usages: Option<UsageSearchResult>,\n }\n-fn edit_tuple_assignment(data: &TupleData, builder: &mut AssistBuilder, ctx: &AssistContext) {\n+fn edit_tuple_assignment(data: &TupleData, builder: &mut AssistBuilder, ctx: &AssistContext, in_sub_pattern: bool) {\n     let tuple_pat = {\n         let original = &data.ident_pat;\n         let is_ref = original.ref_token().is_some();\n@@ -121,27 +155,40 @@ fn edit_tuple_assignment(data: &TupleData, builder: &mut AssistBuilder, ctx: &As\n         text.replacen(first_tuple, &format!(\"$0{}\", first_tuple), 1)\n     };\n \n-    let text = tuple_pat.to_string();\n-    match ctx.config.snippet_cap {\n-        Some(cap) => {\n-            let snip = add_cursor(&text);\n-            builder.replace_snippet(cap, data.range, snip);\n-        }\n-        None => builder.replace(data.range, text),\n-    };\n+    // with sub_pattern: keep original tuple and add subpattern: `tup @ (_0, _1)`\n+    if in_sub_pattern {\n+        let text = format!(\" @ {}\", tuple_pat.to_string());\n+        match ctx.config.snippet_cap {\n+            Some(cap) => {\n+                let snip = add_cursor(&text);\n+                builder.insert_snippet(cap, data.range.end(), snip);\n+            }\n+            None => builder.insert(data.range.end(), text),\n+        };\n+    } else {\n+        let text = tuple_pat.to_string();\n+        match ctx.config.snippet_cap {\n+            Some(cap) => {\n+                let snip = add_cursor(&text);\n+                builder.replace_snippet(cap, data.range, snip);\n+            }\n+            None => builder.replace(data.range, text),\n+        };\n+    }\n }\n \n fn edit_tuple_usages(\n     data: &TupleData,\n     builder: &mut AssistBuilder,\n     ctx: &AssistContext,\n+    in_sub_pattern: bool,\n ) {\n     if let Some(usages) = data.usages.as_ref() {\n         for (file_id, refs) in usages.iter() {\n             builder.edit_file(*file_id);\n     \n             for r in refs {\n-                edit_tuple_usage(r, data, builder, ctx);\n+                edit_tuple_usage(r, data, builder, ctx, in_sub_pattern);\n             }\n         }\n     }\n@@ -151,6 +198,7 @@ fn edit_tuple_usage(\n     data: &TupleData,\n     builder: &mut AssistBuilder,\n     _ctx: &AssistContext,\n+    in_sub_pattern: bool,\n ) {\n     match detect_tuple_index(usage.name.syntax(), data) {\n         Some((expr, idx)) => {\n@@ -160,6 +208,11 @@ fn edit_tuple_usage(\n             builder.replace(range, text);\n         }\n         None => {\n+            if in_sub_pattern {\n+                cov_mark::hit!(destructure_tuple_call_with_subpattern);\n+                return;\n+            }\n+\n             // no index access -> make invalid -> requires handling by user\n             // -> put usage in block comment\n             builder.insert(usage.range.start(), \"/*\");\n@@ -202,11 +255,18 @@ mod tests {\n \n     use crate::tests::{check_assist, check_assist_not_applicable};\n \n+    // Tests for direct tuple destructure: \n+    // `let $0t = (1,2);` -> `let (_0, _1) = (1,2);`\n+\n+    fn assist(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+        destructure_tuple_binding_impl(acc, ctx, false)\n+    }\n+\n     #[test]\n     fn dont_trigger_on_unit() {\n         cov_mark::check!(destructure_tuple_no_tuple);\n         check_assist_not_applicable(\n-            destructure_tuple_binding,\n+            assist,\n             r#\"\n fn main() {\n let $0v = ();\n@@ -218,7 +278,7 @@ let $0v = ();\n     fn dont_trigger_on_number() {\n         cov_mark::check!(destructure_tuple_no_tuple);\n         check_assist_not_applicable(\n-            destructure_tuple_binding,\n+            assist,\n             r#\"\n fn main() {\n let $0v = 32;\n@@ -230,7 +290,7 @@ let $0v = 32;\n     #[test]\n     fn destructure_3_tuple() {\n         check_assist(\n-            destructure_tuple_binding,\n+            assist,\n             r#\"\n fn main() {\n     let $0tup = (1,2,3);\n@@ -246,7 +306,7 @@ fn main() {\n     #[test]\n     fn destructure_2_tuple() {\n         check_assist(\n-            destructure_tuple_binding,\n+            assist,\n             r#\"\n fn main() {\n     let $0tup = (1,2);\n@@ -262,7 +322,7 @@ fn main() {\n     #[test]\n     fn replace_indices() {\n         check_assist(\n-            destructure_tuple_binding,\n+            assist,\n             r#\"\n fn main() {\n     let $0tup = (1,2,3);\n@@ -285,7 +345,7 @@ fn main() {\n     #[test]\n     fn replace_usage_in_parentheses() {\n         check_assist(\n-            destructure_tuple_binding,\n+            assist,\n             r#\"\n fn main() {\n     let $0tup = (1,2,3);\n@@ -306,7 +366,7 @@ fn main() {\n     #[test]\n     fn handle_function_call() {\n         check_assist(\n-            destructure_tuple_binding,\n+            assist,\n             r#\"\n fn main() {\n     let $0tup = (1,2);\n@@ -325,7 +385,7 @@ fn main() {\n     #[test]\n     fn handle_invalid_index() {\n         check_assist(\n-            destructure_tuple_binding,\n+            assist,\n             r#\"\n fn main() {\n     let $0tup = (1,2);\n@@ -344,7 +404,7 @@ fn main() {\n     #[test]\n     fn dont_replace_variable_with_same_name_as_tuple() {\n         check_assist(\n-            destructure_tuple_binding,\n+            assist,\n             r#\"\n fn main() {\n     let tup = (1,2);\n@@ -371,7 +431,7 @@ fn main() {\n     #[test]\n     fn keep_function_call_in_tuple_item() {\n         check_assist(\n-            destructure_tuple_binding,\n+            assist,\n             r#\"\n fn main() {\n     let $0t = (\"3.14\", 0);\n@@ -390,7 +450,7 @@ fn main() {\n     #[test]\n     fn keep_type() {\n         check_assist(\n-            destructure_tuple_binding,\n+            assist,\n             r#\"\n fn main() {\n     let $0t: (usize, i32) = (1,2);\n@@ -410,7 +470,7 @@ fn main() {\n         // * in 1st: `i32`\n         // * in 2nd: `&i32`\n         check_assist(\n-            destructure_tuple_binding,\n+            assist,\n             r#\"\n fn main() {\n     let t = (1,2);\n@@ -431,7 +491,7 @@ fn main() {\n     #[test]\n     fn destructure_multiple_reference() {\n         check_assist(\n-            destructure_tuple_binding,\n+            assist,\n             r#\"\n fn main() {\n     let t = (1,2);\n@@ -452,7 +512,7 @@ fn main() {\n     #[test]\n     fn keep_reference() {\n         check_assist(\n-            destructure_tuple_binding,\n+            assist,\n             r#\"\n fn foo(t: &(usize, usize)) -> usize {\n     match t {\n@@ -476,7 +536,7 @@ fn foo(t: &(usize, usize)) -> usize {\n         // * in 1st: `i32`\n         // * in 2nd: `&i32`\n         check_assist(\n-            destructure_tuple_binding,\n+            assist,\n             r#\"\n fn main() {\n     let ref $0t = (1,2);\n@@ -495,7 +555,7 @@ fn main() {\n     #[test]\n     fn with_mut() {\n         check_assist(\n-            destructure_tuple_binding,\n+            assist,\n             r#\"\n fn main() {\n     let mut $0t = (1,2);\n@@ -520,7 +580,7 @@ fn main() {\n         // * in 2nd: `&mut i32`\n         // Note: 2nd `_0 = 42` isn't valid; requires dereferencing (`*_0`), but isn't handled here!\n         check_assist(\n-            destructure_tuple_binding,\n+            assist,\n             r#\"\n fn main() {\n     let ref mut $0t = (1,2);\n@@ -541,7 +601,7 @@ fn main() {\n     #[test]\n     fn dont_trigger_for_non_tuple_reference() {\n         check_assist_not_applicable(\n-            destructure_tuple_binding,\n+            assist,\n             r#\"\n fn main() {\n     let v = 42;\n@@ -554,7 +614,7 @@ fn main() {\n     #[test]\n     fn dont_trigger_on_static_tuple() {\n         check_assist_not_applicable(\n-            destructure_tuple_binding,\n+            assist,\n             r#\"\n static $0TUP: (usize, usize) = (1,2);\n             \"#,\n@@ -564,7 +624,7 @@ static $0TUP: (usize, usize) = (1,2);\n     #[test]\n     fn dont_trigger_on_wildcard() {\n         check_assist_not_applicable(\n-            destructure_tuple_binding,\n+            assist,\n             r#\"\n fn main() {\n     let $0_ = (1,2);\n@@ -576,7 +636,7 @@ fn main() {\n     #[test]\n     fn dont_trigger_in_struct() {\n         check_assist_not_applicable(\n-            destructure_tuple_binding,\n+            assist,\n             r#\"\n struct S {\n     $0tup: (usize, usize),\n@@ -588,7 +648,7 @@ struct S {\n     #[test]\n     fn dont_trigger_in_struct_creation() {\n         check_assist_not_applicable(\n-            destructure_tuple_binding,\n+            assist,\n             r#\"\n struct S {\n     tup: (usize, usize),\n@@ -605,7 +665,7 @@ fn main() {\n     #[test]\n     fn dont_trigger_on_tuple_struct() {\n         check_assist_not_applicable(\n-            destructure_tuple_binding,\n+            assist,\n             r#\"\n struct S(usize, usize);\n fn main() {\n@@ -620,7 +680,7 @@ fn main() {\n         // sub-pattern is only allowed with IdentPat (name), not other patterns (like TuplePat)\n         cov_mark::check!(destructure_tuple_subpattern);\n         check_assist_not_applicable(\n-            destructure_tuple_binding,\n+            assist,\n             r#\"\n fn sum(t: (usize, usize)) -> usize {\n     match t {\n@@ -635,7 +695,7 @@ fn sum(t: (usize, usize)) -> usize {\n     #[test]\n     fn in_subpattern() {\n         check_assist(\n-            destructure_tuple_binding,\n+            assist,\n             r#\"\n fn main() {\n     let t1 @ (_, $0t2) = (1, (2,3));\n@@ -654,7 +714,7 @@ fn main() {\n     #[test]\n     fn in_nested_tuple() {\n         check_assist(\n-            destructure_tuple_binding,\n+            assist,\n             r#\"\n fn main() {\n     let ($0tup, v) = ((1,2),3);\n@@ -671,7 +731,7 @@ fn main() {\n     #[test]\n     fn in_closure() {\n         check_assist(\n-            destructure_tuple_binding,\n+            assist,\n             r#\"\n fn main() {\n     let $0tup = (1,2,3);\n@@ -690,7 +750,7 @@ fn main() {\n     #[test]\n     fn in_closure_args() {\n         check_assist(\n-            destructure_tuple_binding,\n+            assist,\n             r#\"\n fn main() {\n     let f = |$0t| t.0 + t.1;\n@@ -709,7 +769,7 @@ fn main() {\n     #[test]\n     fn in_function_args() {\n         check_assist(\n-            destructure_tuple_binding,\n+            assist,\n             r#\"\n fn f($0t: (usize, usize)) {\n     let v = t.0;\n@@ -726,7 +786,7 @@ fn f(($0_0, _1): (usize, usize)) {\n     #[test]\n     fn in_if_let() {\n         check_assist(\n-            destructure_tuple_binding,\n+            assist,\n             r#\"\n fn f(t: (usize, usize)) {\n     if let $0t = t {\n@@ -746,7 +806,7 @@ fn f(t: (usize, usize)) {\n     #[test]\n     fn in_if_let_option() {\n         check_assist(\n-            destructure_tuple_binding,\n+            assist,\n             r#\"\n //- minicore: option\n fn f(o: Option<(usize, usize)>) {\n@@ -769,7 +829,7 @@ fn f(o: Option<(usize, usize)>) {\n     #[test]\n     fn in_match() {\n         check_assist(\n-            destructure_tuple_binding,\n+            assist,\n             r#\"\n fn main() {\n     match (1,2) {\n@@ -789,7 +849,7 @@ fn main() {\n     #[test]\n     fn in_match_option() {\n         check_assist(\n-            destructure_tuple_binding,\n+            assist,\n             r#\"\n //- minicore: option\n fn main() {\n@@ -812,7 +872,7 @@ fn main() {\n     #[test]\n     fn in_match_reference_option() {\n         check_assist(\n-            destructure_tuple_binding,\n+            assist,\n             r#\"\n //- minicore: option\n fn main() {\n@@ -838,7 +898,7 @@ fn main() {\n     #[test]\n     fn in_for() {\n         check_assist(\n-            destructure_tuple_binding,\n+            assist,\n             r#\"\n //- minicore: iterators\n fn main() {\n@@ -859,7 +919,7 @@ fn main() {\n     #[test]\n     fn in_for_nested() {\n         check_assist(\n-            destructure_tuple_binding,\n+            assist,\n             r#\"\n //- minicore: iterators\n fn main() {\n@@ -882,7 +942,7 @@ fn main() {\n     fn not_applicable_on_tuple_usage() {\n         //Improvement: might be reasonable to allow & implement\n         check_assist_not_applicable(\n-            destructure_tuple_binding,\n+            assist,\n             r#\"\n fn main() {\n     let t = (1,2);\n@@ -895,7 +955,7 @@ fn main() {\n     #[test]\n     fn replace_all() {\n         check_assist(\n-            destructure_tuple_binding,\n+            assist,\n             r#\"\n fn main() {\n     let $0t = (1,2);\n@@ -932,7 +992,7 @@ fn main() {\n     #[test]\n     fn non_trivial_tuple_assignment() {\n         check_assist(\n-            destructure_tuple_binding,\n+            assist,\n             r#\"\n fn main {\n     let $0t = \n@@ -977,7 +1037,7 @@ fn main {\n         // doesn't work: cannot find usage in `println!`\n         // Note: Just `t` works, but not `t.0`\n         check_assist(\n-            destructure_tuple_binding,\n+            assist,\n             r#\"\n fn main() {\n     let $0t = (1,2);\n@@ -992,4 +1052,211 @@ fn main() {\n             \"#,\n         )\n     }\n+\n+    /// Tests for destructure of tuple in sub-pattern: \n+    /// `let $0t = (1,2);` -> `let t @ (_0, _1) = (1,2);`\n+    mod sub_pattern {\n+        use super::*;\n+        use crate::tests::check_assist_by_label;\n+\n+        fn assist(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+            destructure_tuple_binding_impl(acc, ctx, true)\n+        }\n+\n+        fn check_sub_pattern_assist(\n+            ra_fixture_before: &str,\n+            ra_fixture_after: &str,\n+        ) {\n+            // with sub-pattern there are two assists: One with and one without sub-pattern\n+            check_assist_by_label(\n+                assist, \n+                ra_fixture_before, \n+                ra_fixture_after, \n+                \"Destructure tuple in sub-pattern\")\n+        }\n+\n+        #[test]\n+        fn destructure_in_sub_pattern() {\n+            check_sub_pattern_assist(\n+                r#\"\n+#![feature(bindings_after_at)]\n+\n+fn main() {\n+    let $0t = (1,2);\n+}\n+                \"#,\n+                r#\"\n+#![feature(bindings_after_at)]\n+\n+fn main() {\n+    let t @ ($0_0, _1) = (1,2);\n+}\n+                \"#,\n+            )\n+        }\n+    \n+        #[test]\n+        fn trigger_both_destructure_tuple_assists() {\n+            let text = r#\"\n+fn main() {\n+    let $0t = (1,2);\n+}\n+            \"#;\n+            check_assist_by_label(\n+                assist, \n+                text, \n+                r#\"\n+fn main() {\n+    let ($0_0, _1) = (1,2);\n+}\n+            \"#, \n+                \"Destructure tuple in place\",\n+            );\n+            check_assist_by_label(\n+                assist, \n+                text, \n+                r#\"\n+fn main() {\n+    let t @ ($0_0, _1) = (1,2);\n+}\n+            \"#, \n+                \"Destructure tuple in sub-pattern\",\n+            );\n+        }\n+\n+        #[test]\n+        fn replace_indices() {\n+            check_sub_pattern_assist(\n+                r#\"\n+fn main() {\n+    let $0t = (1,2);\n+    let v1 = t.0;\n+    let v2 = t.1;\n+}\n+                \"#,\n+                r#\"\n+fn main() {\n+    let t @ ($0_0, _1) = (1,2);\n+    let v1 = _0;\n+    let v2 = _1;\n+}\n+                \"#,\n+            )\n+        }\n+    \n+        #[test]\n+        fn keep_function_call() {\n+            cov_mark::check!(destructure_tuple_call_with_subpattern);\n+            check_sub_pattern_assist(\n+                r#\"\n+fn main() {\n+    let $0t = (1,2);\n+    let v = t.into();\n+}\n+                \"#,\n+                r#\"\n+fn main() {\n+    let t @ ($0_0, _1) = (1,2);\n+    let v = t.into();\n+}\n+                \"#,\n+            )\n+        }\n+    \n+        #[test]\n+        fn keep_type() {\n+            check_sub_pattern_assist(\n+                r#\"\n+fn main() {\n+    let $0t: (usize, i32) = (1,2);\n+    let v = t.1;\n+    let f = t.into();\n+}\n+                \"#,\n+                r#\"\n+fn main() {\n+    let t @ ($0_0, _1): (usize, i32) = (1,2);\n+    let v = _1;\n+    let f = t.into();\n+}\n+                \"#,\n+            )\n+        }\n+\n+        #[test]\n+        fn in_function_args() {\n+            check_sub_pattern_assist(\n+                r#\"\n+fn f($0t: (usize, usize)) {\n+    let v = t.0;\n+    let f = t.into();\n+}\n+                \"#,\n+                r#\"\n+fn f(t @ ($0_0, _1): (usize, usize)) {\n+    let v = _0;\n+    let f = t.into();\n+}\n+                \"#,\n+            )\n+        }\n+\n+        #[test]\n+        fn with_ref() {\n+            check_sub_pattern_assist(\n+                r#\"\n+fn main() {\n+    let ref $0t = (1,2);\n+    let v = t.1;\n+    let f = t.into();\n+}\n+                \"#,\n+                r#\"\n+fn main() {\n+    let ref t @ (ref $0_0, ref _1) = (1,2);\n+    let v = _1;\n+    let f = t.into();\n+}\n+                \"#,\n+            )\n+        }\n+        #[test]\n+        fn with_mut() {\n+            check_sub_pattern_assist(\n+                r#\"\n+fn main() {\n+    let mut $0t = (1,2);\n+    let v = t.1;\n+    let f = t.into();\n+}\n+                \"#,\n+                r#\"\n+fn main() {\n+    let mut t @ (mut $0_0, mut _1) = (1,2);\n+    let v = _1;\n+    let f = t.into();\n+}\n+                \"#,\n+            )\n+        }\n+        #[test]\n+        fn with_ref_mut() {\n+            check_sub_pattern_assist(\n+                r#\"\n+fn main() {\n+    let ref mut $0t = (1,2);\n+    let v = t.1;\n+    let f = t.into();\n+}\n+                \"#,\n+                r#\"\n+fn main() {\n+    let ref mut t @ (ref mut $0_0, ref mut _1) = (1,2);\n+    let v = _1;\n+    let f = t.into();\n+}\n+                \"#,\n+            )\n+        }\n+    }\n }"}]}