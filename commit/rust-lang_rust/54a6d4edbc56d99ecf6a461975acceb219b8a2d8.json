{"sha": "54a6d4edbc56d99ecf6a461975acceb219b8a2d8", "node_id": "C_kwDOAAsO6NoAKDU0YTZkNGVkYmM1NmQ5OWVjZjZhNDYxOTc1YWNjZWIyMTliOGEyZDg", "commit": {"author": {"name": "Thom Chiovoloni", "email": "thom@shift.click", "date": "2022-11-20T22:19:12Z"}, "committer": {"name": "Thom Chiovoloni", "email": "thom@shift.click", "date": "2022-11-23T16:10:17Z"}, "message": "Add `#![deny(unsafe_op_in_unsafe_fn)]` in liballoc tests", "tree": {"sha": "47d7ef092a9640a7141d9a6c8008b59bdacf119b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47d7ef092a9640a7141d9a6c8008b59bdacf119b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54a6d4edbc56d99ecf6a461975acceb219b8a2d8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQQszICQ1r0Zqrp7OLPXcz0dendfCgUCY35F6wAKCRDXcz0dendf\nCuBtAP9mtLzoc9e0mW4Nef5ruFGX+SxU3quxxMnw8jMZfsXqewEA1n5dMHGgIrGN\nLqjzY7RNi0kr9Ty7y30JFYsWxHxlGQ8=\n=tQfG\n-----END PGP SIGNATURE-----", "payload": "tree 47d7ef092a9640a7141d9a6c8008b59bdacf119b\nparent 4e0d0d757e2f1b61ec809420b006545a9f8974c0\nauthor Thom Chiovoloni <thom@shift.click> 1668982752 -0800\ncommitter Thom Chiovoloni <thom@shift.click> 1669219817 -0800\n\nAdd `#![deny(unsafe_op_in_unsafe_fn)]` in liballoc tests\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54a6d4edbc56d99ecf6a461975acceb219b8a2d8", "html_url": "https://github.com/rust-lang/rust/commit/54a6d4edbc56d99ecf6a461975acceb219b8a2d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54a6d4edbc56d99ecf6a461975acceb219b8a2d8/comments", "author": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e0d0d757e2f1b61ec809420b006545a9f8974c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e0d0d757e2f1b61ec809420b006545a9f8974c0", "html_url": "https://github.com/rust-lang/rust/commit/4e0d0d757e2f1b61ec809420b006545a9f8974c0"}], "stats": {"total": 45, "additions": 38, "deletions": 7}, "files": [{"sha": "af49826ff30a364f4a8d308a13521475e62ea5c5", "filename": "library/alloc/tests/boxed.rs", "status": "modified", "additions": 35, "deletions": 6, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/54a6d4edbc56d99ecf6a461975acceb219b8a2d8/library%2Falloc%2Ftests%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54a6d4edbc56d99ecf6a461975acceb219b8a2d8/library%2Falloc%2Ftests%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fboxed.rs?ref=54a6d4edbc56d99ecf6a461975acceb219b8a2d8", "patch": "@@ -102,8 +102,18 @@ unsafe impl const Allocator for ConstAllocator {\n \n         let new_ptr = self.allocate(new_layout)?;\n         if new_layout.size() > 0 {\n-            new_ptr.as_mut_ptr().copy_from_nonoverlapping(ptr.as_ptr(), old_layout.size());\n-            self.deallocate(ptr, old_layout);\n+            // Safety: `new_ptr` is valid for writes and `ptr` for reads of\n+            // `old_layout.size()`, because `new_layout.size() >=\n+            // old_layout.size()` (which is an invariant that must be upheld by\n+            // callers).\n+            unsafe {\n+                new_ptr.as_mut_ptr().copy_from_nonoverlapping(ptr.as_ptr(), old_layout.size());\n+            }\n+            // Safety: `ptr` is never used again is also an invariant which must\n+            // be upheld by callers.\n+            unsafe {\n+                self.deallocate(ptr, old_layout);\n+            }\n         }\n         Ok(new_ptr)\n     }\n@@ -114,12 +124,21 @@ unsafe impl const Allocator for ConstAllocator {\n         old_layout: Layout,\n         new_layout: Layout,\n     ) -> Result<NonNull<[u8]>, AllocError> {\n-        let new_ptr = self.grow(ptr, old_layout, new_layout)?;\n+        // Safety: Invariants of `grow_zeroed` and `grow` are the same, and must\n+        // be enforced by callers.\n+        let new_ptr = unsafe { self.grow(ptr, old_layout, new_layout)? };\n         if new_layout.size() > 0 {\n             let old_size = old_layout.size();\n             let new_size = new_layout.size();\n             let raw_ptr = new_ptr.as_mut_ptr();\n-            raw_ptr.add(old_size).write_bytes(0, new_size - old_size);\n+            // Safety:\n+            // - `grow` returned Ok, so the returned pointer must be valid for\n+            //   `new_size` bytes\n+            // - `new_size` must be larger than `old_size`, which is an\n+            //   invariant which must be upheld by callers.\n+            unsafe {\n+                raw_ptr.add(old_size).write_bytes(0, new_size - old_size);\n+            }\n         }\n         Ok(new_ptr)\n     }\n@@ -137,8 +156,18 @@ unsafe impl const Allocator for ConstAllocator {\n \n         let new_ptr = self.allocate(new_layout)?;\n         if new_layout.size() > 0 {\n-            new_ptr.as_mut_ptr().copy_from_nonoverlapping(ptr.as_ptr(), new_layout.size());\n-            self.deallocate(ptr, old_layout);\n+            // Safety: `new_ptr` and `ptr` are valid for reads/writes of\n+            // `new_layout.size()` because of the invariants of shrink, which\n+            // include `new_layout.size()` being smaller than (or equal to)\n+            // `old_layout.size()`.\n+            unsafe {\n+                new_ptr.as_mut_ptr().copy_from_nonoverlapping(ptr.as_ptr(), new_layout.size());\n+            }\n+            // Safety: `ptr` is never used again is also an invariant which must\n+            // be upheld by callers.\n+            unsafe {\n+                self.deallocate(ptr, old_layout);\n+            }\n         }\n         Ok(new_ptr)\n     }"}, {"sha": "d6d2b055b2395e8563543ed0628189b5b975823c", "filename": "library/alloc/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/54a6d4edbc56d99ecf6a461975acceb219b8a2d8/library%2Falloc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54a6d4edbc56d99ecf6a461975acceb219b8a2d8/library%2Falloc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Flib.rs?ref=54a6d4edbc56d99ecf6a461975acceb219b8a2d8", "patch": "@@ -48,6 +48,7 @@\n #![feature(once_cell)]\n #![feature(drain_keep_rest)]\n #![deny(fuzzy_provenance_casts)]\n+#![deny(unsafe_op_in_unsafe_fn)]\n \n use std::collections::hash_map::DefaultHasher;\n use std::hash::{Hash, Hasher};"}, {"sha": "7ebed0d5ca6994085d63c3ce2631e9c6d3cbd85d", "filename": "library/alloc/tests/vec.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/54a6d4edbc56d99ecf6a461975acceb219b8a2d8/library%2Falloc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54a6d4edbc56d99ecf6a461975acceb219b8a2d8/library%2Falloc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec.rs?ref=54a6d4edbc56d99ecf6a461975acceb219b8a2d8", "patch": "@@ -1089,7 +1089,8 @@ fn test_into_iter_drop_allocator() {\n         }\n \n         unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout) {\n-            System.deallocate(ptr, layout)\n+            // Safety: Invariants passed to caller.\n+            unsafe { System.deallocate(ptr, layout) }\n         }\n     }\n "}]}