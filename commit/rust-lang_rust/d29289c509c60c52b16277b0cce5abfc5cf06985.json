{"sha": "d29289c509c60c52b16277b0cce5abfc5cf06985", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyOTI4OWM1MDljNjBjNTJiMTYyNzdiMGNjZTVhYmZjNWNmMDY5ODU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-10T00:42:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-10T00:42:31Z"}, "message": "Auto merge of #84507 - crlf0710:codegen_nonlocal_main_wrapper, r=nagisa\n\nAdd primary marker on codegen unit and generate main wrapper on primary codegen.\n\nThis is the codegen part of changes extracted from #84062.\n\nThis add a marker called `primary` on each codegen units, where exactly one codegen unit will be `primary = true` at a time. This specific codegen unit will take charge of generating `main` wrapper when `main` is imported from a foreign crate after the implementation of RFC 1260.\n\ncc #28937\n\nI'm not sure who should i ask for review for codegen changes, so feel free to reassign.\nr? `@nagisa`", "tree": {"sha": "6a2acded658f23aa72493144a765bb951dce645f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a2acded658f23aa72493144a765bb951dce645f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d29289c509c60c52b16277b0cce5abfc5cf06985", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d29289c509c60c52b16277b0cce5abfc5cf06985", "html_url": "https://github.com/rust-lang/rust/commit/d29289c509c60c52b16277b0cce5abfc5cf06985", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d29289c509c60c52b16277b0cce5abfc5cf06985/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c55c26cb36a988d5df8b9f4442dc8af93e687a39", "url": "https://api.github.com/repos/rust-lang/rust/commits/c55c26cb36a988d5df8b9f4442dc8af93e687a39", "html_url": "https://github.com/rust-lang/rust/commit/c55c26cb36a988d5df8b9f4442dc8af93e687a39"}, {"sha": "89a67051a76f8511372d7b9f14610474b1dba6aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/89a67051a76f8511372d7b9f14610474b1dba6aa", "html_url": "https://github.com/rust-lang/rust/commit/89a67051a76f8511372d7b9f14610474b1dba6aa"}], "stats": {"total": 51, "additions": 20, "deletions": 31}, "files": [{"sha": "7a19b0e4d5ac3565205aaa74147e05f6f75cb010", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d29289c509c60c52b16277b0cce5abfc5cf06985/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29289c509c60c52b16277b0cce5abfc5cf06985/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=d29289c509c60c52b16277b0cce5abfc5cf06985", "patch": "@@ -357,20 +357,9 @@ pub fn maybe_create_entry_wrapper<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n         if !cx.codegen_unit().contains_item(&MonoItem::Fn(instance)) {\n             return None;\n         }\n-    } else {\n-        // FIXME: Add support for non-local main fn codegen\n-        let span = cx.tcx().main_def.unwrap().span;\n-        let n = 28937;\n-        cx.sess()\n-            .struct_span_err(span, \"entry symbol `main` from foreign crate is not yet supported.\")\n-            .note(&format!(\n-                \"see issue #{} <https://github.com/rust-lang/rust/issues/{}> \\\n-                 for more information\",\n-                n, n,\n-            ))\n-            .emit();\n-        cx.sess().abort_if_errors();\n-        bug!();\n+    } else if !cx.codegen_unit().is_primary() {\n+        // We want to create the wrapper only when the codegen unit is the primary one\n+        return None;\n     }\n \n     let main_llfn = cx.get_fn_addr(instance);"}, {"sha": "67440e6e0edf03140ae0c5f7a1a2932087a19c19", "filename": "compiler/rustc_middle/src/mir/mono.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d29289c509c60c52b16277b0cce5abfc5cf06985/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29289c509c60c52b16277b0cce5abfc5cf06985/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs?ref=d29289c509c60c52b16277b0cce5abfc5cf06985", "patch": "@@ -229,6 +229,7 @@ pub struct CodegenUnit<'tcx> {\n     name: Symbol,\n     items: FxHashMap<MonoItem<'tcx>, (Linkage, Visibility)>,\n     size_estimate: Option<usize>,\n+    primary: bool,\n }\n \n /// Specifies the linkage type for a `MonoItem`.\n@@ -258,7 +259,7 @@ pub enum Visibility {\n \n impl<'tcx> CodegenUnit<'tcx> {\n     pub fn new(name: Symbol) -> CodegenUnit<'tcx> {\n-        CodegenUnit { name, items: Default::default(), size_estimate: None }\n+        CodegenUnit { name, items: Default::default(), size_estimate: None, primary: false }\n     }\n \n     pub fn name(&self) -> Symbol {\n@@ -269,6 +270,14 @@ impl<'tcx> CodegenUnit<'tcx> {\n         self.name = name;\n     }\n \n+    pub fn is_primary(&self) -> bool {\n+        self.primary\n+    }\n+\n+    pub fn make_primary(&mut self) {\n+        self.primary = true;\n+    }\n+\n     pub fn items(&self) -> &FxHashMap<MonoItem<'tcx>, (Linkage, Visibility)> {\n         &self.items\n     }\n@@ -378,6 +387,7 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for CodegenUnit<'tcx> {\n             name,\n             // The size estimate is not relevant to the hash\n             size_estimate: _,\n+            primary: _,\n         } = *self;\n \n         name.hash_stable(hcx, hasher);"}, {"sha": "333cb30159093b4eaab17c675f6992c4b30d76fe", "filename": "compiler/rustc_mir/src/monomorphize/partitioning/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d29289c509c60c52b16277b0cce5abfc5cf06985/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29289c509c60c52b16277b0cce5abfc5cf06985/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fmod.rs?ref=d29289c509c60c52b16277b0cce5abfc5cf06985", "patch": "@@ -350,12 +350,14 @@ fn collect_and_partition_mono_items<'tcx>(\n     let (codegen_units, _) = tcx.sess.time(\"partition_and_assert_distinct_symbols\", || {\n         sync::join(\n             || {\n-                &*tcx.arena.alloc_from_iter(partition(\n+                let mut codegen_units = partition(\n                     tcx,\n                     &mut items.iter().cloned(),\n                     tcx.sess.codegen_units(),\n                     &inlining_map,\n-                ))\n+                );\n+                codegen_units[0].make_primary();\n+                &*tcx.arena.alloc_from_iter(codegen_units)\n             },\n             || assert_symbols_are_distinct(tcx, items.iter()),\n         )"}, {"sha": "4fddfc44ac60a2afb753d09317d4888013303a2f", "filename": "src/test/ui/entry-point/imported_main_from_extern_crate.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d29289c509c60c52b16277b0cce5abfc5cf06985/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_from_extern_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29289c509c60c52b16277b0cce5abfc5cf06985/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_from_extern_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_from_extern_crate.rs?ref=d29289c509c60c52b16277b0cce5abfc5cf06985", "patch": "@@ -1,9 +1,7 @@\n-// build-fail\n+// run-pass\n // aux-build:main_functions.rs\n \n #![feature(imported_main)]\n \n extern crate main_functions;\n-pub use main_functions::boilerplate as main; //~ ERROR entry symbol `main` from foreign crate\n-\n-// FIXME: Should be run-pass\n+pub use main_functions::boilerplate as main;"}, {"sha": "8792e1e414244b93d36c0c6d11ac8858959265d6", "filename": "src/test/ui/entry-point/imported_main_from_extern_crate.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c55c26cb36a988d5df8b9f4442dc8af93e687a39/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_from_extern_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c55c26cb36a988d5df8b9f4442dc8af93e687a39/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_from_extern_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_from_extern_crate.stderr?ref=c55c26cb36a988d5df8b9f4442dc8af93e687a39", "patch": "@@ -1,10 +0,0 @@\n-error: entry symbol `main` from foreign crate is not yet supported.\n-  --> $DIR/imported_main_from_extern_crate.rs:7:9\n-   |\n-LL | pub use main_functions::boilerplate as main;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #28937 <https://github.com/rust-lang/rust/issues/28937> for more information\n-\n-error: aborting due to previous error\n-"}]}