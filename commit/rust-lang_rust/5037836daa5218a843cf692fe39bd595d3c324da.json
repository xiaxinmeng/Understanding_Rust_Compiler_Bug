{"sha": "5037836daa5218a843cf692fe39bd595d3c324da", "node_id": "C_kwDOAAsO6NoAKDUwMzc4MzZkYWE1MjE4YTg0M2NmNjkyZmUzOWJkNTk1ZDNjMzI0ZGE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-14T16:40:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-14T16:40:03Z"}, "message": "Rollup merge of #108880 - spastorino:new-rpitit-6, r=compiler-errors\n\nRemove tests/ui/impl-trait/in-trait/new-lowering-strategy in favor of using revisions on existing tests\n\nr? `@compiler-errors`\n\nThis one again sits on top of existing approved PRs and it still needs to add revisions to tests in `tests/ui/impl-trait/in-trait` as it only does so for async in traits.", "tree": {"sha": "f706d01a11e7eeb5d32f3623e8fcf17a341c534f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f706d01a11e7eeb5d32f3623e8fcf17a341c534f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5037836daa5218a843cf692fe39bd595d3c324da", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkEKNjCRBK7hj4Ov3rIwAAAegIALK80n6OIn0rSrT8ErsQ+OmO\n6CE/0xKwB5OshiW9RNQigafsOQrJZdzXGzUVer3f3C/qAItpjxAxncbVeaGZgXee\nEgv4mCSgiKFdA23HPaKQCX2HyCFTAwUVOnkZK1vlult0xrjnTOoznRWhSmj7edU9\n7sSBm4E6PfScVwGlsWNFGrU/bQhS39fZXv0by4ZJZFmfcDqjweMYWywQywEiohPN\nM9VYLW0vonX7B85K+BNHLsF/wG9liyYlAQxHIAL+FDmuHY0mkp6B7+V+v3FYoywb\nQKcHwFnKlbYs/XLmTuV2kAeYhYRmNJ1CFzZkkkFUaagdC2PLszg7Uxe1Tg5acJA=\n=Izt+\n-----END PGP SIGNATURE-----\n", "payload": "tree f706d01a11e7eeb5d32f3623e8fcf17a341c534f\nparent e006ee9be88de353845f7aad3f90cb721a50fbdd\nparent b82d6a2e9ee96d4c001e2c3ad74d8dc9521ac5ac\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1678812003 +0100\ncommitter GitHub <noreply@github.com> 1678812003 +0100\n\nRollup merge of #108880 - spastorino:new-rpitit-6, r=compiler-errors\n\nRemove tests/ui/impl-trait/in-trait/new-lowering-strategy in favor of using revisions on existing tests\n\nr? `@compiler-errors`\n\nThis one again sits on top of existing approved PRs and it still needs to add revisions to tests in `tests/ui/impl-trait/in-trait` as it only does so for async in traits.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5037836daa5218a843cf692fe39bd595d3c324da", "html_url": "https://github.com/rust-lang/rust/commit/5037836daa5218a843cf692fe39bd595d3c324da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5037836daa5218a843cf692fe39bd595d3c324da/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e006ee9be88de353845f7aad3f90cb721a50fbdd", "url": "https://api.github.com/repos/rust-lang/rust/commits/e006ee9be88de353845f7aad3f90cb721a50fbdd", "html_url": "https://github.com/rust-lang/rust/commit/e006ee9be88de353845f7aad3f90cb721a50fbdd"}, {"sha": "b82d6a2e9ee96d4c001e2c3ad74d8dc9521ac5ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/b82d6a2e9ee96d4c001e2c3ad74d8dc9521ac5ac", "html_url": "https://github.com/rust-lang/rust/commit/b82d6a2e9ee96d4c001e2c3ad74d8dc9521ac5ac"}], "stats": {"total": 282, "additions": 236, "deletions": 46}, "files": [{"sha": "89ca4039bce9120da804cab91ee7ca3b96aca955", "filename": "tests/ui/async-await/in-trait/async-associated-types.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types.rs?ref=5037836daa5218a843cf692fe39bd595d3c324da", "patch": "@@ -1,5 +1,7 @@\n // check-pass\n // edition: 2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n #![feature(impl_trait_projections)]"}, {"sha": "cdecb02bfad1e53d773eeb13fc3b4eefe4baa2da", "filename": "tests/ui/async-await/in-trait/async-associated-types2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-associated-types2.rs?ref=5037836daa5218a843cf692fe39bd595d3c324da", "patch": "@@ -1,5 +1,7 @@\n // check-pass\n // edition: 2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n #![feature(type_alias_impl_trait)]"}, {"sha": "b5ace9ada4f806317dc92930f80caea86b4bd773", "filename": "tests/ui/async-await/in-trait/async-example-desugared-boxed-in-trait.current.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.current.stderr?ref=5037836daa5218a843cf692fe39bd595d3c324da", "patch": "@@ -1,11 +1,11 @@\n error[E0053]: method `foo` has an incompatible type for trait\n-  --> $DIR/async-example-desugared-boxed-in-trait.rs:15:28\n+  --> $DIR/async-example-desugared-boxed-in-trait.rs:17:28\n    |\n LL |     async fn foo(&self) -> i32 {\n    |                            ^^^ expected `Pin<Box<dyn Future<Output = i32>>>`, found future\n    |\n note: type in trait\n-  --> $DIR/async-example-desugared-boxed-in-trait.rs:11:22\n+  --> $DIR/async-example-desugared-boxed-in-trait.rs:13:22\n    |\n LL |     fn foo(&self) -> Pin<Box<dyn Future<Output = i32> + '_>>;\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "tests/ui/async-await/in-trait/async-example-desugared-boxed-in-trait.stderr"}, {"sha": "b5ace9ada4f806317dc92930f80caea86b4bd773", "filename": "tests/ui/async-await/in-trait/async-example-desugared-boxed-in-trait.next.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.next.stderr?ref=5037836daa5218a843cf692fe39bd595d3c324da", "patch": "@@ -0,0 +1,17 @@\n+error[E0053]: method `foo` has an incompatible type for trait\n+  --> $DIR/async-example-desugared-boxed-in-trait.rs:17:28\n+   |\n+LL |     async fn foo(&self) -> i32 {\n+   |                            ^^^ expected `Pin<Box<dyn Future<Output = i32>>>`, found future\n+   |\n+note: type in trait\n+  --> $DIR/async-example-desugared-boxed-in-trait.rs:13:22\n+   |\n+LL |     fn foo(&self) -> Pin<Box<dyn Future<Output = i32> + '_>>;\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: expected signature `fn(&i32) -> Pin<Box<dyn Future<Output = i32>>>`\n+              found signature `fn(&i32) -> impl Future<Output = i32>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0053`."}, {"sha": "7b53379b24b784cd49d90eb2ee9f76038637a7ac", "filename": "tests/ui/async-await/in-trait/async-example-desugared-boxed-in-trait.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.rs?ref=5037836daa5218a843cf692fe39bd595d3c324da", "patch": "@@ -1,4 +1,6 @@\n // edition: 2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n #![feature(return_position_impl_trait_in_trait)]"}, {"sha": "6c0b5859186b5d096037e84948fcf2f3c4d8fbbe", "filename": "tests/ui/async-await/in-trait/async-example-desugared-boxed.current.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed.current.stderr?ref=5037836daa5218a843cf692fe39bd595d3c324da", "patch": "@@ -1,5 +1,5 @@\n error: method `foo` should be async because the method from the trait is async\n-  --> $DIR/async-example-desugared-boxed.rs:15:5\n+  --> $DIR/async-example-desugared-boxed.rs:17:5\n    |\n LL |     async fn foo(&self) -> i32;\n    |     --------------------------- required because the trait method is async", "previous_filename": "tests/ui/async-await/in-trait/async-example-desugared-boxed.stderr"}, {"sha": "6c0b5859186b5d096037e84948fcf2f3c4d8fbbe", "filename": "tests/ui/async-await/in-trait/async-example-desugared-boxed.next.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed.next.stderr?ref=5037836daa5218a843cf692fe39bd595d3c324da", "patch": "@@ -0,0 +1,11 @@\n+error: method `foo` should be async because the method from the trait is async\n+  --> $DIR/async-example-desugared-boxed.rs:17:5\n+   |\n+LL |     async fn foo(&self) -> i32;\n+   |     --------------------------- required because the trait method is async\n+...\n+LL |     fn foo(&self) -> Pin<Box<dyn Future<Output = i32> + '_>> {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "916488ffafaf45a3d9c30fd9bfd3b05b3f055e54", "filename": "tests/ui/async-await/in-trait/async-example-desugared-boxed.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed.rs?ref=5037836daa5218a843cf692fe39bd595d3c324da", "patch": "@@ -1,4 +1,6 @@\n // edition: 2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n #![feature(return_position_impl_trait_in_trait)]"}, {"sha": "edac0b374a3259ade7e9ae67f5e47e940ffbd241", "filename": "tests/ui/async-await/in-trait/async-example-desugared-extra.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-extra.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-extra.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-extra.rs?ref=5037836daa5218a843cf692fe39bd595d3c324da", "patch": "@@ -1,5 +1,7 @@\n // check-pass\n // edition: 2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n #![feature(return_position_impl_trait_in_trait)]"}, {"sha": "934f7643dd1c9c43fe077cc843724dbb5dacd11d", "filename": "tests/ui/async-await/in-trait/async-example-desugared-in-trait.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-in-trait.rs?ref=5037836daa5218a843cf692fe39bd595d3c324da", "patch": "@@ -1,5 +1,7 @@\n // check-pass\n // edition: 2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n #![feature(return_position_impl_trait_in_trait)]"}, {"sha": "0d2551ab84f959063191d25a9fff68ba13d27a08", "filename": "tests/ui/async-await/in-trait/async-example-desugared-manual.current.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-manual.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-manual.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-manual.current.stderr?ref=5037836daa5218a843cf692fe39bd595d3c324da", "patch": "@@ -1,5 +1,5 @@\n error: method `foo` should be async because the method from the trait is async\n-  --> $DIR/async-example-desugared-manual.rs:23:5\n+  --> $DIR/async-example-desugared-manual.rs:25:5\n    |\n LL |     async fn foo(&self) -> i32;\n    |     --------------------------- required because the trait method is async", "previous_filename": "tests/ui/async-await/in-trait/async-example-desugared-manual.stderr"}, {"sha": "0d2551ab84f959063191d25a9fff68ba13d27a08", "filename": "tests/ui/async-await/in-trait/async-example-desugared-manual.next.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-manual.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-manual.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-manual.next.stderr?ref=5037836daa5218a843cf692fe39bd595d3c324da", "patch": "@@ -0,0 +1,11 @@\n+error: method `foo` should be async because the method from the trait is async\n+  --> $DIR/async-example-desugared-manual.rs:25:5\n+   |\n+LL |     async fn foo(&self) -> i32;\n+   |     --------------------------- required because the trait method is async\n+...\n+LL |     fn foo(&self) -> MyFuture {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "4883828d32fef979507020e6b9313910e5839e3f", "filename": "tests/ui/async-await/in-trait/async-example-desugared-manual.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-manual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-manual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-manual.rs?ref=5037836daa5218a843cf692fe39bd595d3c324da", "patch": "@@ -1,4 +1,6 @@\n // edition: 2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n #![feature(return_position_impl_trait_in_trait)]"}, {"sha": "214171b2e2cba01403af4c80f75c4e6418e7b646", "filename": "tests/ui/async-await/in-trait/async-example-desugared.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared.rs?ref=5037836daa5218a843cf692fe39bd595d3c324da", "patch": "@@ -1,5 +1,7 @@\n // check-pass\n // edition: 2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n #![feature(return_position_impl_trait_in_trait)]"}, {"sha": "67b491f19d2694227a9562d9d6f9085657dd779a", "filename": "tests/ui/async-await/in-trait/async-recursive-generic.current.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive-generic.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive-generic.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive-generic.current.stderr?ref=5037836daa5218a843cf692fe39bd595d3c324da", "patch": "@@ -1,5 +1,5 @@\n error[E0733]: recursion in an `async fn` requires boxing\n-  --> $DIR/async-recursive-generic.rs:11:48\n+  --> $DIR/async-recursive-generic.rs:13:48\n    |\n LL |     async fn foo_recursive(&self, n: usize) -> T {\n    |                                                ^ recursive `async fn`", "previous_filename": "tests/ui/async-await/in-trait/async-recursive-generic.stderr"}, {"sha": "67b491f19d2694227a9562d9d6f9085657dd779a", "filename": "tests/ui/async-await/in-trait/async-recursive-generic.next.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive-generic.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive-generic.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive-generic.next.stderr?ref=5037836daa5218a843cf692fe39bd595d3c324da", "patch": "@@ -0,0 +1,12 @@\n+error[E0733]: recursion in an `async fn` requires boxing\n+  --> $DIR/async-recursive-generic.rs:13:48\n+   |\n+LL |     async fn foo_recursive(&self, n: usize) -> T {\n+   |                                                ^ recursive `async fn`\n+   |\n+   = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`\n+   = note: consider using the `async_recursion` crate: https://crates.io/crates/async_recursion\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0733`."}, {"sha": "64c6ba15c0cf0d9f528e89065e99ebc93ce86e27", "filename": "tests/ui/async-await/in-trait/async-recursive-generic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive-generic.rs?ref=5037836daa5218a843cf692fe39bd595d3c324da", "patch": "@@ -1,4 +1,6 @@\n // edition: 2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n #![allow(incomplete_features)]"}, {"sha": "85af27e3746536f686dc9f521b8d35138c6530c0", "filename": "tests/ui/async-await/in-trait/async-recursive.current.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive.current.stderr?ref=5037836daa5218a843cf692fe39bd595d3c324da", "patch": "@@ -1,5 +1,5 @@\n error[E0733]: recursion in an `async fn` requires boxing\n-  --> $DIR/async-recursive.rs:11:48\n+  --> $DIR/async-recursive.rs:13:48\n    |\n LL |     async fn foo_recursive(&self, n: usize) -> i32 {\n    |                                                ^^^ recursive `async fn`", "previous_filename": "tests/ui/async-await/in-trait/async-recursive.stderr"}, {"sha": "85af27e3746536f686dc9f521b8d35138c6530c0", "filename": "tests/ui/async-await/in-trait/async-recursive.next.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive.next.stderr?ref=5037836daa5218a843cf692fe39bd595d3c324da", "patch": "@@ -0,0 +1,12 @@\n+error[E0733]: recursion in an `async fn` requires boxing\n+  --> $DIR/async-recursive.rs:13:48\n+   |\n+LL |     async fn foo_recursive(&self, n: usize) -> i32 {\n+   |                                                ^^^ recursive `async fn`\n+   |\n+   = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`\n+   = note: consider using the `async_recursion` crate: https://crates.io/crates/async_recursion\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0733`."}, {"sha": "d928909e3ae5bc7f25b2a84203a8905b56cbf3f4", "filename": "tests/ui/async-await/in-trait/async-recursive.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive.rs?ref=5037836daa5218a843cf692fe39bd595d3c324da", "patch": "@@ -1,4 +1,6 @@\n // edition: 2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n #![allow(incomplete_features)]"}, {"sha": "5a05b080c3e57590d587d7ac00469d592f4b45d6", "filename": "tests/ui/async-await/in-trait/bad-signatures.current.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Fbad-signatures.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Fbad-signatures.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fbad-signatures.current.stderr?ref=5037836daa5218a843cf692fe39bd595d3c324da", "patch": "@@ -1,11 +1,11 @@\n error: expected identifier, found keyword `self`\n-  --> $DIR/bad-signatures.rs:7:23\n+  --> $DIR/bad-signatures.rs:9:23\n    |\n LL |     async fn bar(&abc self);\n    |                       ^^^^ expected identifier, found keyword\n \n error: expected one of `:`, `@`, or `|`, found keyword `self`\n-  --> $DIR/bad-signatures.rs:7:23\n+  --> $DIR/bad-signatures.rs:9:23\n    |\n LL |     async fn bar(&abc self);\n    |                  -----^^^^\n@@ -14,7 +14,7 @@ LL |     async fn bar(&abc self);\n    |                  help: declare the type after the parameter binding: `<identifier>: <type>`\n \n warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/bad-signatures.rs:3:12\n+  --> $DIR/bad-signatures.rs:5:12\n    |\n LL | #![feature(async_fn_in_trait)]\n    |            ^^^^^^^^^^^^^^^^^", "previous_filename": "tests/ui/async-await/in-trait/bad-signatures.stderr"}, {"sha": "5a05b080c3e57590d587d7ac00469d592f4b45d6", "filename": "tests/ui/async-await/in-trait/bad-signatures.next.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Fbad-signatures.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Fbad-signatures.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fbad-signatures.next.stderr?ref=5037836daa5218a843cf692fe39bd595d3c324da", "patch": "@@ -0,0 +1,26 @@\n+error: expected identifier, found keyword `self`\n+  --> $DIR/bad-signatures.rs:9:23\n+   |\n+LL |     async fn bar(&abc self);\n+   |                       ^^^^ expected identifier, found keyword\n+\n+error: expected one of `:`, `@`, or `|`, found keyword `self`\n+  --> $DIR/bad-signatures.rs:9:23\n+   |\n+LL |     async fn bar(&abc self);\n+   |                  -----^^^^\n+   |                  |    |\n+   |                  |    expected one of `:`, `@`, or `|`\n+   |                  help: declare the type after the parameter binding: `<identifier>: <type>`\n+\n+warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/bad-signatures.rs:5:12\n+   |\n+LL | #![feature(async_fn_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n+"}, {"sha": "e0093be8cb33fdb3a44d7b75c4115f359f48982e", "filename": "tests/ui/async-await/in-trait/bad-signatures.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Fbad-signatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Fbad-signatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fbad-signatures.rs?ref=5037836daa5218a843cf692fe39bd595d3c324da", "patch": "@@ -1,4 +1,6 @@\n // edition:2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n //~^ WARN the feature `async_fn_in_trait` is incomplete"}, {"sha": "30843473defc77dac6578d54a4b12459d35ac461", "filename": "tests/ui/async-await/in-trait/early-bound-1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Fearly-bound-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Fearly-bound-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fearly-bound-1.rs?ref=5037836daa5218a843cf692fe39bd595d3c324da", "patch": "@@ -1,5 +1,7 @@\n // check-pass\n // edition:2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n #![allow(incomplete_features)]"}, {"sha": "1c5a68c2a5adfb6be7e82c48e0c4604629627e53", "filename": "tests/ui/async-await/in-trait/early-bound-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Fearly-bound-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Fearly-bound-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fearly-bound-2.rs?ref=5037836daa5218a843cf692fe39bd595d3c324da", "patch": "@@ -1,5 +1,7 @@\n // check-pass\n // edition:2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n #![allow(incomplete_features)]"}, {"sha": "1a7495149899a4b1df38de5e4cdd1e7793e60462", "filename": "tests/ui/async-await/in-trait/fn-not-async-err2.current.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.current.stderr?ref=5037836daa5218a843cf692fe39bd595d3c324da", "patch": "@@ -1,5 +1,5 @@\n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `impl` method return types\n-  --> $DIR/fn-not-async-err2.rs:13:22\n+  --> $DIR/fn-not-async-err2.rs:15:22\n    |\n LL |     fn foo(&self) -> impl Future<Output = i32> {\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "tests/ui/async-await/in-trait/fn-not-async-err2.stderr"}, {"sha": "1a7495149899a4b1df38de5e4cdd1e7793e60462", "filename": "tests/ui/async-await/in-trait/fn-not-async-err2.next.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.next.stderr?ref=5037836daa5218a843cf692fe39bd595d3c324da", "patch": "@@ -0,0 +1,12 @@\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `impl` method return types\n+  --> $DIR/fn-not-async-err2.rs:15:22\n+   |\n+LL |     fn foo(&self) -> impl Future<Output = i32> {\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0562`."}, {"sha": "5fdb7296aaf97d2133ace7c2f033dc6b96e8ca34", "filename": "tests/ui/async-await/in-trait/fn-not-async-err2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Ffn-not-async-err2.rs?ref=5037836daa5218a843cf692fe39bd595d3c324da", "patch": "@@ -1,4 +1,6 @@\n // edition: 2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n #![allow(incomplete_features)]"}, {"sha": "45ada1d84c320cb574d1c3f81dac0b1377b5322a", "filename": "tests/ui/async-await/in-trait/implied-bounds.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Fimplied-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Fimplied-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fimplied-bounds.rs?ref=5037836daa5218a843cf692fe39bd595d3c324da", "patch": "@@ -1,5 +1,7 @@\n // check-pass\n // edition: 2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n #![allow(incomplete_features)]"}, {"sha": "ced30b7e4e4b99866ff146301ff57365bbec0e80", "filename": "tests/ui/async-await/in-trait/issue-102138.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Fissue-102138.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Fissue-102138.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fissue-102138.rs?ref=5037836daa5218a843cf692fe39bd595d3c324da", "patch": "@@ -1,5 +1,7 @@\n // check-pass\n // edition:2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n #![allow(incomplete_features)]"}, {"sha": "f3fdfa3459aeaf3949b3bde0385618c66a66205d", "filename": "tests/ui/async-await/in-trait/issue-102219.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Fissue-102219.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fasync-await%2Fin-trait%2Fissue-102219.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fissue-102219.rs?ref=5037836daa5218a843cf692fe39bd595d3c324da", "patch": "@@ -1,6 +1,8 @@\n // compile-flags:--crate-type=lib\n // edition:2021\n // check-pass\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n #![allow(incomplete_features)]"}, {"sha": "5c9d2e356fc7048fb301b9ff7898497599038ab0", "filename": "tests/ui/impl-trait/in-trait/deep-match-works.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdeep-match-works.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdeep-match-works.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdeep-match-works.rs?ref=5037836daa5218a843cf692fe39bd595d3c324da", "patch": "@@ -1,4 +1,6 @@\n // check-pass\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(return_position_impl_trait_in_trait)]\n #![allow(incomplete_features)]\n@@ -10,7 +12,9 @@ trait Foo {\n }\n \n impl Foo for () {\n-    fn bar() -> Wrapper<i32> { Wrapper(0) }\n+    fn bar() -> Wrapper<i32> {\n+        Wrapper(0)\n+    }\n }\n \n fn main() {}"}, {"sha": "400db20c79c928fe1f863df3f8e146b34816d3b4", "filename": "tests/ui/impl-trait/in-trait/deep-match.current.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdeep-match.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdeep-match.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdeep-match.current.stderr?ref=5037836daa5218a843cf692fe39bd595d3c324da", "patch": "@@ -1,7 +1,7 @@\n error[E0053]: method `bar` has an incompatible return type for trait\n-  --> $DIR/deep-match.rs:11:17\n+  --> $DIR/deep-match.rs:14:17\n    |\n-LL |     fn bar() -> i32 { 0 }\n+LL |     fn bar() -> i32 {\n    |                 ^^^\n    |                 |\n    |                 expected `Wrapper<_>`, found `i32`", "previous_filename": "tests/ui/impl-trait/in-trait/deep-match.stderr"}, {"sha": "400db20c79c928fe1f863df3f8e146b34816d3b4", "filename": "tests/ui/impl-trait/in-trait/deep-match.next.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdeep-match.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdeep-match.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdeep-match.next.stderr?ref=5037836daa5218a843cf692fe39bd595d3c324da", "patch": "@@ -0,0 +1,15 @@\n+error[E0053]: method `bar` has an incompatible return type for trait\n+  --> $DIR/deep-match.rs:14:17\n+   |\n+LL |     fn bar() -> i32 {\n+   |                 ^^^\n+   |                 |\n+   |                 expected `Wrapper<_>`, found `i32`\n+   |                 return type in trait\n+   |\n+   = note: expected struct `Wrapper<_>`\n+                found type `i32`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0053`."}, {"sha": "413d054e148a6f8f8a75040c3355397ab642182b", "filename": "tests/ui/impl-trait/in-trait/deep-match.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdeep-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdeep-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdeep-match.rs?ref=5037836daa5218a843cf692fe39bd595d3c324da", "patch": "@@ -1,3 +1,6 @@\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n+\n #![feature(return_position_impl_trait_in_trait)]\n #![allow(incomplete_features)]\n \n@@ -8,8 +11,10 @@ trait Foo {\n }\n \n impl Foo for () {\n-    fn bar() -> i32 { 0 }\n-    //~^ ERROR method `bar` has an incompatible return type for trait\n+    fn bar() -> i32 {\n+        //~^ ERROR method `bar` has an incompatible return type for trait\n+        0\n+    }\n }\n \n fn main() {}"}, {"sha": "a0c0589b9a1c04fb7a7fbd3f4520697cb942ce0c", "filename": "tests/ui/impl-trait/in-trait/default-method-binder-shifting.current.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-binder-shifting.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-binder-shifting.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-binder-shifting.current.stderr?ref=5037836daa5218a843cf692fe39bd595d3c324da", "patch": "@@ -1,5 +1,5 @@\n warning: the feature `return_position_impl_trait_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/default-method-binder-shifting.rs:3:12\n+  --> $DIR/default-method-binder-shifting.rs:5:12\n    |\n LL | #![feature(return_position_impl_trait_in_trait)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "tests/ui/impl-trait/in-trait/default-method-binder-shifting.stderr"}, {"sha": "a0c0589b9a1c04fb7a7fbd3f4520697cb942ce0c", "filename": "tests/ui/impl-trait/in-trait/default-method-binder-shifting.next.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-binder-shifting.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-binder-shifting.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-binder-shifting.next.stderr?ref=5037836daa5218a843cf692fe39bd595d3c324da", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `return_position_impl_trait_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/default-method-binder-shifting.rs:5:12\n+   |\n+LL | #![feature(return_position_impl_trait_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+warning: 1 warning emitted\n+"}, {"sha": "75b0ec939847af189e9b2423f18ad6f7fe5a4bbd", "filename": "tests/ui/impl-trait/in-trait/default-method-binder-shifting.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-binder-shifting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-binder-shifting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-binder-shifting.rs?ref=5037836daa5218a843cf692fe39bd595d3c324da", "patch": "@@ -1,4 +1,6 @@\n // check-pass\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(return_position_impl_trait_in_trait)]\n //~^ WARN the feature `return_position_impl_trait_in_trait` is incomplete"}, {"sha": "98aaf4a6553f53c454123f8d4fecbcbb2817c0f3", "filename": "tests/ui/impl-trait/in-trait/encode.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fencode.rs?ref=5037836daa5218a843cf692fe39bd595d3c324da", "patch": "@@ -1,5 +1,7 @@\n // build-pass\n // compile-flags: --crate-type=lib\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(return_position_impl_trait_in_trait)]\n #![allow(incomplete_features)]"}, {"sha": "ae09d20f6f5b76ae721a5653618b9155abe1d638", "filename": "tests/ui/impl-trait/in-trait/new-lowering-strategy/simple-impl-trait.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e006ee9be88de353845f7aad3f90cb721a50fbdd/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fnew-lowering-strategy%2Fsimple-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e006ee9be88de353845f7aad3f90cb721a50fbdd/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fnew-lowering-strategy%2Fsimple-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fnew-lowering-strategy%2Fsimple-impl-trait.rs?ref=e006ee9be88de353845f7aad3f90cb721a50fbdd", "patch": "@@ -1,17 +0,0 @@\n-// check-pass\n-// compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n-\n-#![feature(return_position_impl_trait_in_trait)]\n-#![allow(incomplete_features)]\n-\n-trait Foo {\n-    fn foo() -> impl Sized;\n-}\n-\n-impl Foo for String {\n-    fn foo() -> i32 {\n-        22\n-    }\n-}\n-\n-fn main() {}"}, {"sha": "dfce973d770b906b4449ca539625ba9699b9a10d", "filename": "tests/ui/impl-trait/in-trait/new-lowering-strategy/simple-trait.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e006ee9be88de353845f7aad3f90cb721a50fbdd/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fnew-lowering-strategy%2Fsimple-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e006ee9be88de353845f7aad3f90cb721a50fbdd/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fnew-lowering-strategy%2Fsimple-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fnew-lowering-strategy%2Fsimple-trait.rs?ref=e006ee9be88de353845f7aad3f90cb721a50fbdd", "patch": "@@ -1,11 +0,0 @@\n-// check-pass\n-// compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n-\n-#![feature(return_position_impl_trait_in_trait)]\n-#![allow(incomplete_features)]\n-\n-trait Foo {\n-    fn foo() -> impl Sized;\n-}\n-\n-fn main() {}"}, {"sha": "a57653b2c9ed76ddb212df8a2a77c2a817326289", "filename": "tests/ui/impl-trait/in-trait/opaque-in-impl-is-opaque.current.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fopaque-in-impl-is-opaque.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fopaque-in-impl-is-opaque.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fopaque-in-impl-is-opaque.current.stderr?ref=5037836daa5218a843cf692fe39bd595d3c324da", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/opaque-in-impl-is-opaque.rs:17:19\n+  --> $DIR/opaque-in-impl-is-opaque.rs:20:19\n    |\n LL |     fn bar(&self) -> impl Display {\n    |                      ------------ the found opaque type", "previous_filename": "tests/ui/impl-trait/in-trait/opaque-in-impl-is-opaque.stderr"}, {"sha": "a57653b2c9ed76ddb212df8a2a77c2a817326289", "filename": "tests/ui/impl-trait/in-trait/opaque-in-impl-is-opaque.next.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fopaque-in-impl-is-opaque.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fopaque-in-impl-is-opaque.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fopaque-in-impl-is-opaque.next.stderr?ref=5037836daa5218a843cf692fe39bd595d3c324da", "patch": "@@ -0,0 +1,17 @@\n+error[E0308]: mismatched types\n+  --> $DIR/opaque-in-impl-is-opaque.rs:20:19\n+   |\n+LL |     fn bar(&self) -> impl Display {\n+   |                      ------------ the found opaque type\n+...\n+LL |     let x: &str = ().bar();\n+   |            ----   ^^^^^^^^ expected `&str`, found opaque type\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected reference `&str`\n+            found opaque type `impl std::fmt::Display`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "c07ece15a8324a919797365665493663e62a87f1", "filename": "tests/ui/impl-trait/in-trait/opaque-in-impl-is-opaque.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fopaque-in-impl-is-opaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fopaque-in-impl-is-opaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fopaque-in-impl-is-opaque.rs?ref=5037836daa5218a843cf692fe39bd595d3c324da", "patch": "@@ -1,3 +1,6 @@\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n+\n #![feature(return_position_impl_trait_in_trait)]\n #![allow(incomplete_features)]\n "}, {"sha": "1f42ec744dbe8031a1e3d4c38de3dae8fd036169", "filename": "tests/ui/impl-trait/in-trait/reveal.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fimpl-trait%2Fin-trait%2Freveal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fimpl-trait%2Fin-trait%2Freveal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Freveal.rs?ref=5037836daa5218a843cf692fe39bd595d3c324da", "patch": "@@ -1,4 +1,6 @@\n // check-pass\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(return_position_impl_trait_in_trait)]\n #![allow(incomplete_features)]"}, {"sha": "eba270af7f0ee918d853f73cfe3345dde343fbb0", "filename": "tests/ui/impl-trait/in-trait/signature-mismatch.current.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fsignature-mismatch.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fsignature-mismatch.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fsignature-mismatch.current.stderr?ref=5037836daa5218a843cf692fe39bd595d3c324da", "patch": "@@ -1,5 +1,5 @@\n error: `impl` item signature doesn't match `trait` item signature\n-  --> $DIR/signature-mismatch.rs:15:5\n+  --> $DIR/signature-mismatch.rs:17:5\n    |\n LL |     fn async_fn(&self, buff: &[u8]) -> impl Future<Output = Vec<u8>>;\n    |     ----------------------------------------------------------------- expected `fn(&'1 Struct, &'2 [u8]) -> impl Future<Output = Vec<u8>> + '3`", "previous_filename": "tests/ui/impl-trait/in-trait/signature-mismatch.stderr"}, {"sha": "eba270af7f0ee918d853f73cfe3345dde343fbb0", "filename": "tests/ui/impl-trait/in-trait/signature-mismatch.next.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fsignature-mismatch.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fsignature-mismatch.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fsignature-mismatch.next.stderr?ref=5037836daa5218a843cf692fe39bd595d3c324da", "patch": "@@ -0,0 +1,16 @@\n+error: `impl` item signature doesn't match `trait` item signature\n+  --> $DIR/signature-mismatch.rs:17:5\n+   |\n+LL |     fn async_fn(&self, buff: &[u8]) -> impl Future<Output = Vec<u8>>;\n+   |     ----------------------------------------------------------------- expected `fn(&'1 Struct, &'2 [u8]) -> impl Future<Output = Vec<u8>> + '3`\n+...\n+LL |     fn async_fn<'a>(&self, buff: &'a [u8]) -> impl Future<Output = Vec<u8>> + 'a {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found `fn(&'1 Struct, &'2 [u8]) -> impl Future<Output = Vec<u8>> + '2`\n+   |\n+   = note: expected signature `fn(&'1 Struct, &'2 [u8]) -> impl Future<Output = Vec<u8>> + '3`\n+              found signature `fn(&'1 Struct, &'2 [u8]) -> impl Future<Output = Vec<u8>> + '2`\n+   = help: the lifetime requirements from the `impl` do not correspond to the requirements in the `trait`\n+   = help: verify the lifetime relationships in the `trait` and `impl` between the `self` argument, the other inputs and its output\n+\n+error: aborting due to previous error\n+"}, {"sha": "38c902a97a980382b60aec36d73800e58455e1a7", "filename": "tests/ui/impl-trait/in-trait/signature-mismatch.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fsignature-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fsignature-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fsignature-mismatch.rs?ref=5037836daa5218a843cf692fe39bd595d3c324da", "patch": "@@ -1,4 +1,6 @@\n // edition:2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(return_position_impl_trait_in_trait)]\n #![allow(incomplete_features)]"}, {"sha": "dbc5d38f192929430e269b407b7148f9c3758ca3", "filename": "tests/ui/impl-trait/in-trait/specialization-substs-remap.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-substs-remap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-substs-remap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-substs-remap.rs?ref=5037836daa5218a843cf692fe39bd595d3c324da", "patch": "@@ -1,4 +1,6 @@\n // check-pass\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(specialization)]\n #![feature(return_position_impl_trait_in_trait)]"}, {"sha": "0e69e0490c776aece731e301d6b812726f433e80", "filename": "tests/ui/impl-trait/in-trait/success.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fsuccess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5037836daa5218a843cf692fe39bd595d3c324da/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fsuccess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fsuccess.rs?ref=5037836daa5218a843cf692fe39bd595d3c324da", "patch": "@@ -1,4 +1,6 @@\n // check-pass\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(return_position_impl_trait_in_trait)]\n #![allow(incomplete_features)]"}]}