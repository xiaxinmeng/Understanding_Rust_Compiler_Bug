{"sha": "633a2e31efb42d0a141bfbd634e67f218e819303", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzM2EyZTMxZWZiNDJkMGExNDFiZmJkNjM0ZTY3ZjIxOGU4MTkzMDM=", "commit": {"author": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-08-18T15:49:51Z"}, "committer": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-08-20T09:27:33Z"}, "message": "Suppress MIR comments for FnDef in ty::Const", "tree": {"sha": "bfd8d29a1eacbc2a73ba28d03ea89cd59609f66a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bfd8d29a1eacbc2a73ba28d03ea89cd59609f66a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/633a2e31efb42d0a141bfbd634e67f218e819303", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/633a2e31efb42d0a141bfbd634e67f218e819303", "html_url": "https://github.com/rust-lang/rust/commit/633a2e31efb42d0a141bfbd634e67f218e819303", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/633a2e31efb42d0a141bfbd634e67f218e819303/comments", "author": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a22a0ff93d63f738151f096434e732466b4a42e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a22a0ff93d63f738151f096434e732466b4a42e", "html_url": "https://github.com/rust-lang/rust/commit/1a22a0ff93d63f738151f096434e732466b4a42e"}], "stats": {"total": 348, "additions": 12, "deletions": 336}, "files": [{"sha": "a5afc9127294a1c2cf833dff8c426e7a468ba28b", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -405,6 +405,7 @@ impl Visitor<'tcx> for ExtraComments<'tcx> {\n         let ty::Const { ty, val, .. } = constant;\n         match ty.kind {\n             ty::Int(_) | ty::Uint(_) | ty::Bool | ty::Char => {}\n+            ty::FnDef(..) => {}\n             _ => {\n                 self.push(\"ty::Const\");\n                 self.push(&format!(\"+ ty: {:?}\", ty));"}, {"sha": "b3facecab5703ec1d91728b004bf3c4087b5f36c", "filename": "src/test/mir-opt/array_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.mir.32bit", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.mir.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.mir.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.mir.32bit?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -37,9 +37,6 @@ fn main() -> () {\n         StorageLive(_6);                 // scope 4 at $DIR/array-index-is-temporary.rs:16:25: 16:26\n         _6 = _3;                         // scope 4 at $DIR/array-index-is-temporary.rs:16:25: 16:26\n         _5 = const foo(move _6) -> bb1;  // scope 4 at $DIR/array-index-is-temporary.rs:16:21: 16:27\n-                                         // ty::Const\n-                                         // + ty: unsafe fn(*mut usize) -> u32 {foo}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/array-index-is-temporary.rs:16:21: 16:24\n                                          // + literal: Const { ty: unsafe fn(*mut usize) -> u32 {foo}, val: Value(Scalar(<ZST>)) }"}, {"sha": "b3facecab5703ec1d91728b004bf3c4087b5f36c", "filename": "src/test/mir-opt/array_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.mir.64bit", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.mir.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.mir.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Farray_index_is_temporary.main.SimplifyCfg-elaborate-drops.after.mir.64bit?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -37,9 +37,6 @@ fn main() -> () {\n         StorageLive(_6);                 // scope 4 at $DIR/array-index-is-temporary.rs:16:25: 16:26\n         _6 = _3;                         // scope 4 at $DIR/array-index-is-temporary.rs:16:25: 16:26\n         _5 = const foo(move _6) -> bb1;  // scope 4 at $DIR/array-index-is-temporary.rs:16:21: 16:27\n-                                         // ty::Const\n-                                         // + ty: unsafe fn(*mut usize) -> u32 {foo}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/array-index-is-temporary.rs:16:21: 16:24\n                                          // + literal: Const { ty: unsafe fn(*mut usize) -> u32 {foo}, val: Value(Scalar(<ZST>)) }"}, {"sha": "eee23590c2135b886e3166559ffb85a7248dde6c", "filename": "src/test/mir-opt/box_expr.main.ElaborateDrops.before.mir", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fbox_expr.main.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fbox_expr.main.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbox_expr.main.ElaborateDrops.before.mir?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -15,9 +15,6 @@ fn main() -> () {\n         StorageLive(_2);                 // scope 0 at $DIR/box_expr.rs:7:13: 7:25\n         _2 = Box(S);                     // scope 0 at $DIR/box_expr.rs:7:13: 7:25\n         (*_2) = const S::new() -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/box_expr.rs:7:17: 7:25\n-                                         // ty::Const\n-                                         // + ty: fn() -> S {S::new}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/box_expr.rs:7:17: 7:23\n                                          // + literal: Const { ty: fn() -> S {S::new}, val: Value(Scalar(<ZST>)) }\n@@ -42,9 +39,6 @@ fn main() -> () {\n         StorageLive(_4);                 // scope 1 at $DIR/box_expr.rs:8:10: 8:11\n         _4 = move _1;                    // scope 1 at $DIR/box_expr.rs:8:10: 8:11\n         _3 = const std::mem::drop::<std::boxed::Box<S>>(move _4) -> [return: bb5, unwind: bb7]; // scope 1 at $DIR/box_expr.rs:8:5: 8:12\n-                                         // ty::Const\n-                                         // + ty: fn(std::boxed::Box<S>) {std::mem::drop::<std::boxed::Box<S>>}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/box_expr.rs:8:5: 8:9\n                                          // + literal: Const { ty: fn(std::boxed::Box<S>) {std::mem::drop::<std::boxed::Box<S>>}, val: Value(Scalar(<ZST>)) }"}, {"sha": "45302087f2d151ede404c6b09113d4adf148ac64", "filename": "src/test/mir-opt/const_promotion_extern_static.BAR.PromoteTemps.diff", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -34,9 +34,6 @@\n +         _2 = &(*_6);                     // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n           _1 = move _2 as &[&i32] (Pointer(Unsize)); // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n           _0 = const core::slice::<impl [&i32]>::as_ptr(move _1) -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:44\n-                                           // ty::Const\n-                                           // + ty: for<'r> fn(&'r [&i32]) -> *const &i32 {core::slice::<impl [&i32]>::as_ptr}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/const-promotion-extern-static.rs:9:36: 9:42\n                                            // + literal: Const { ty: for<'r> fn(&'r [&i32]) -> *const &i32 {core::slice::<impl [&i32]>::as_ptr}, val: Value(Scalar(<ZST>)) }"}, {"sha": "faf86bed9d5c77959e1b23b48d418eaadbe9f5d8", "filename": "src/test/mir-opt/const_promotion_extern_static.FOO.PromoteTemps.diff", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -36,9 +36,6 @@\n +         _2 = &(*_6);                     // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n           _1 = move _2 as &[&i32] (Pointer(Unsize)); // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n           _0 = const core::slice::<impl [&i32]>::as_ptr(move _1) -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:55\n-                                           // ty::Const\n-                                           // + ty: for<'r> fn(&'r [&i32]) -> *const &i32 {core::slice::<impl [&i32]>::as_ptr}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/const-promotion-extern-static.rs:13:47: 13:53\n                                            // + literal: Const { ty: for<'r> fn(&'r [&i32]) -> *const &i32 {core::slice::<impl [&i32]>::as_ptr}, val: Value(Scalar(<ZST>)) }"}, {"sha": "689d91d1f389633ba99a4226016e31d88edbcd67", "filename": "src/test/mir-opt/const_prop/const_prop_fails_gracefully.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.diff?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -31,9 +31,6 @@\n           StorageLive(_5);                 // scope 1 at $DIR/const_prop_fails_gracefully.rs:8:10: 8:11\n           _5 = _1;                         // scope 1 at $DIR/const_prop_fails_gracefully.rs:8:10: 8:11\n           _4 = const read(move _5) -> bb1; // scope 1 at $DIR/const_prop_fails_gracefully.rs:8:5: 8:12\n-                                           // ty::Const\n-                                           // + ty: fn(usize) {read}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/const_prop_fails_gracefully.rs:8:5: 8:9\n                                            // + literal: Const { ty: fn(usize) {read}, val: Value(Scalar(<ZST>)) }"}, {"sha": "c91b35facc9380b549aa93124846ae3ee692b960", "filename": "src/test/mir-opt/const_prop/control_flow_simplification.hello.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.diff?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -29,9 +29,6 @@\n       bb2: {\n           StorageLive(_2);                 // scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n           const std::rt::begin_panic::<&str>(const \"explicit panic\"); // scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: fn(&str) -> ! {std::rt::begin_panic::<&str>}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // + literal: Const { ty: fn(&str) -> ! {std::rt::begin_panic::<&str>}, val: Value(Scalar(<ZST>)) }"}, {"sha": "bba96face23fe4718f202fd31b8b83261b30c670", "filename": "src/test/mir-opt/const_prop/issue_66971.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_66971.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_66971.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_66971.main.ConstProp.diff?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -23,9 +23,6 @@\n           (_2.2: u8) = const 0_u8;         // scope 0 at $DIR/issue-66971.rs:16:12: 16:22\n           StorageDead(_3);                 // scope 0 at $DIR/issue-66971.rs:16:21: 16:22\n           _1 = const encode(move _2) -> bb1; // scope 0 at $DIR/issue-66971.rs:16:5: 16:23\n-                                           // ty::Const\n-                                           // + ty: fn(((), u8, u8)) {encode}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/issue-66971.rs:16:5: 16:11\n                                            // + literal: Const { ty: fn(((), u8, u8)) {encode}, val: Value(Scalar(<ZST>)) }"}, {"sha": "7927f444a6938b2cc10e84d433709c987eb03f18", "filename": "src/test/mir-opt/const_prop/issue_67019.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_67019.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_67019.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_67019.main.ConstProp.diff?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -17,9 +17,6 @@\n +         (_2.0: (u8, u8)) = (const 1_u8, const 2_u8); // scope 0 at $DIR/issue-67019.rs:11:10: 11:19\n           StorageDead(_3);                 // scope 0 at $DIR/issue-67019.rs:11:18: 11:19\n           _1 = const test(move _2) -> bb1; // scope 0 at $DIR/issue-67019.rs:11:5: 11:20\n-                                           // ty::Const\n-                                           // + ty: fn(((u8, u8),)) {test}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/issue-67019.rs:11:5: 11:9\n                                            // + literal: Const { ty: fn(((u8, u8),)) {test}, val: Value(Scalar(<ZST>)) }"}, {"sha": "d245457862b711f2eb818431fd47fe6529ea0ca3", "filename": "src/test/mir-opt/const_prop/mutable_variable_aggregate_partial_read.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_partial_read.main.ConstProp.diff?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -15,9 +15,6 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:5:9: 5:14\n           _1 = const foo() -> bb1;         // scope 0 at $DIR/mutable_variable_aggregate_partial_read.rs:5:29: 5:34\n-                                           // ty::Const\n-                                           // + ty: fn() -> (i32, i32) {foo}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/mutable_variable_aggregate_partial_read.rs:5:29: 5:32\n                                            // + literal: Const { ty: fn() -> (i32, i32) {foo}, val: Value(Scalar(<ZST>)) }"}, {"sha": "01333b84c9e41ccf49fe3c1e9fa0e7a5cfde8571", "filename": "src/test/mir-opt/const_prop/mutable_variable_unprop_assign.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.diff?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -24,9 +24,6 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_unprop_assign.rs:5:9: 5:10\n           _1 = const foo() -> bb1;         // scope 0 at $DIR/mutable_variable_unprop_assign.rs:5:13: 5:18\n-                                           // ty::Const\n-                                           // + ty: fn() -> i32 {foo}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/mutable_variable_unprop_assign.rs:5:13: 5:16\n                                            // + literal: Const { ty: fn() -> i32 {foo}, val: Value(Scalar(<ZST>)) }"}, {"sha": "cc176fda01b195ed6b0e642856c1dfc72357b9f9", "filename": "src/test/mir-opt/const_prop/reify_fn_ptr.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freify_fn_ptr.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freify_fn_ptr.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freify_fn_ptr.main.ConstProp.diff?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -14,9 +14,6 @@\n           StorageLive(_2);                 // scope 0 at $DIR/reify_fn_ptr.rs:4:13: 4:26\n           StorageLive(_3);                 // scope 0 at $DIR/reify_fn_ptr.rs:4:13: 4:17\n           _3 = const main as fn() (Pointer(ReifyFnPointer)); // scope 0 at $DIR/reify_fn_ptr.rs:4:13: 4:17\n-                                           // ty::Const\n-                                           // + ty: fn() {main}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/reify_fn_ptr.rs:4:13: 4:17\n                                            // + literal: Const { ty: fn() {main}, val: Value(Scalar(<ZST>)) }"}, {"sha": "a654b98b5a6ac5bd445a642dd7223e2ba90427d6", "filename": "src/test/mir-opt/const_prop/scalar_literal_propagation.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.main.ConstProp.diff?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -19,9 +19,6 @@\n -         _2 = const consume(move _3) -> bb1; // scope 1 at $DIR/scalar_literal_propagation.rs:4:5: 4:15\n +         _3 = const 1_u32;                // scope 1 at $DIR/scalar_literal_propagation.rs:4:13: 4:14\n +         _2 = const consume(const 1_u32) -> bb1; // scope 1 at $DIR/scalar_literal_propagation.rs:4:5: 4:15\n-                                           // ty::Const\n-                                           // + ty: fn(u32) {consume}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/scalar_literal_propagation.rs:4:5: 4:12\n                                            // + literal: Const { ty: fn(u32) {consume}, val: Value(Scalar(<ZST>)) }"}, {"sha": "8dff267c2f3b5b745f4bedaaeb4bd0f6cd85e0c9", "filename": "src/test/mir-opt/const_prop/switch_int.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.ConstProp.diff?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -14,19 +14,13 @@\n   \n       bb1: {\n           _0 = const foo(const -1_i32) -> bb3; // scope 0 at $DIR/switch_int.rs:9:14: 9:21\n-                                           // ty::Const\n-                                           // + ty: fn(i32) {foo}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/switch_int.rs:9:14: 9:17\n                                            // + literal: Const { ty: fn(i32) {foo}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb2: {\n           _0 = const foo(const 0_i32) -> bb3; // scope 0 at $DIR/switch_int.rs:8:14: 8:20\n-                                           // ty::Const\n-                                           // + ty: fn(i32) {foo}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/switch_int.rs:8:14: 8:17\n                                            // + literal: Const { ty: fn(i32) {foo}, val: Value(Scalar(<ZST>)) }"}, {"sha": "fb88cd3f96ca470c6f71560ed345707734d25fd2", "filename": "src/test/mir-opt/const_prop/switch_int.main.SimplifyBranches-after-const-prop.diff", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.SimplifyBranches-after-const-prop.diff", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.SimplifyBranches-after-const-prop.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.SimplifyBranches-after-const-prop.diff?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -14,19 +14,13 @@\n   \n       bb1: {\n           _0 = const foo(const -1_i32) -> bb3; // scope 0 at $DIR/switch_int.rs:9:14: 9:21\n-                                           // ty::Const\n-                                           // + ty: fn(i32) {foo}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/switch_int.rs:9:14: 9:17\n                                            // + literal: Const { ty: fn(i32) {foo}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb2: {\n           _0 = const foo(const 0_i32) -> bb3; // scope 0 at $DIR/switch_int.rs:8:14: 8:20\n-                                           // ty::Const\n-                                           // + ty: fn(i32) {foo}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/switch_int.rs:8:14: 8:17\n                                            // + literal: Const { ty: fn(i32) {foo}, val: Value(Scalar(<ZST>)) }"}, {"sha": "e6bd2759f775054e1dee820bc2d22c4c7b8a6376", "filename": "src/test/mir-opt/const_prop/tuple_literal_propagation.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.main.ConstProp.diff?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -19,9 +19,6 @@\n -         _3 = _1;                         // scope 1 at $DIR/tuple_literal_propagation.rs:5:13: 5:14\n +         _3 = (const 1_u32, const 2_u32); // scope 1 at $DIR/tuple_literal_propagation.rs:5:13: 5:14\n           _2 = const consume(move _3) -> bb1; // scope 1 at $DIR/tuple_literal_propagation.rs:5:5: 5:15\n-                                           // ty::Const\n-                                           // + ty: fn((u32, u32)) {consume}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/tuple_literal_propagation.rs:5:5: 5:12\n                                            // + literal: Const { ty: fn((u32, u32)) {consume}, val: Value(Scalar(<ZST>)) }"}, {"sha": "8652a962991f53a6d6209c4b04f0304c0851ffe0", "filename": "src/test/mir-opt/copy_propagation_arg.bar.CopyPropagation.diff", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg.bar.CopyPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg.bar.CopyPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg.bar.CopyPropagation.diff?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -12,9 +12,6 @@\n           StorageLive(_3);                 // scope 0 at $DIR/copy_propagation_arg.rs:16:11: 16:12\n           _3 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:16:11: 16:12\n           _2 = const dummy(move _3) -> bb1; // scope 0 at $DIR/copy_propagation_arg.rs:16:5: 16:13\n-                                           // ty::Const\n-                                           // + ty: fn(u8) -> u8 {dummy}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/copy_propagation_arg.rs:16:5: 16:10\n                                            // + literal: Const { ty: fn(u8) -> u8 {dummy}, val: Value(Scalar(<ZST>)) }"}, {"sha": "7615e5f981e28411c6a434c7119abb3c3bd3aee4", "filename": "src/test/mir-opt/copy_propagation_arg.foo.CopyPropagation.diff", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg.foo.CopyPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg.foo.CopyPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcopy_propagation_arg.foo.CopyPropagation.diff?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -12,9 +12,6 @@\n           StorageLive(_3);                 // scope 0 at $DIR/copy_propagation_arg.rs:11:15: 11:16\n           _3 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:11:15: 11:16\n           _2 = const dummy(move _3) -> bb1; // scope 0 at $DIR/copy_propagation_arg.rs:11:9: 11:17\n-                                           // ty::Const\n-                                           // + ty: fn(u8) -> u8 {dummy}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/copy_propagation_arg.rs:11:9: 11:14\n                                            // + literal: Const { ty: fn(u8) -> u8 {dummy}, val: Value(Scalar(<ZST>)) }"}, {"sha": "309153114427707fde0a87214039b1b0cff9da75", "filename": "src/test/mir-opt/funky_arms.float_to_exponential_common.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -39,9 +39,6 @@\n           StorageLive(_5);                 // scope 0 at $DIR/funky_arms.rs:15:22: 15:25\n           _5 = &(*_1);                     // scope 0 at $DIR/funky_arms.rs:15:22: 15:25\n           _4 = const std::fmt::Formatter::sign_plus(move _5) -> bb1; // scope 0 at $DIR/funky_arms.rs:15:22: 15:37\n-                                           // ty::Const\n-                                           // + ty: for<'r> fn(&'r std::fmt::Formatter) -> bool {std::fmt::Formatter::sign_plus}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/funky_arms.rs:15:26: 15:35\n                                            // + literal: Const { ty: for<'r> fn(&'r std::fmt::Formatter) -> bool {std::fmt::Formatter::sign_plus}, val: Value(Scalar(<ZST>)) }\n@@ -68,9 +65,6 @@\n           StorageLive(_8);                 // scope 2 at $DIR/funky_arms.rs:24:30: 24:33\n           _8 = &(*_1);                     // scope 2 at $DIR/funky_arms.rs:24:30: 24:33\n           _7 = const std::fmt::Formatter::precision(move _8) -> bb5; // scope 2 at $DIR/funky_arms.rs:24:30: 24:45\n-                                           // ty::Const\n-                                           // + ty: for<'r> fn(&'r std::fmt::Formatter) -> std::option::Option<usize> {std::fmt::Formatter::precision}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/funky_arms.rs:24:34: 24:43\n                                            // + literal: Const { ty: for<'r> fn(&'r std::fmt::Formatter) -> std::option::Option<usize> {std::fmt::Formatter::precision}, val: Value(Scalar(<ZST>)) }\n@@ -92,9 +86,6 @@\n           StorageLive(_21);                // scope 2 at $DIR/funky_arms.rs:28:62: 28:67\n           _21 = _3;                        // scope 2 at $DIR/funky_arms.rs:28:62: 28:67\n           _0 = const float_to_exponential_common_shortest::<T>(move _18, move _19, move _20, move _21) -> bb9; // scope 2 at $DIR/funky_arms.rs:28:9: 28:68\n-                                           // ty::Const\n-                                           // + ty: for<'r, 's, 't0> fn(&'r mut std::fmt::Formatter<'s>, &'t0 T, core::num::flt2dec::Sign, bool) -> std::result::Result<(), std::fmt::Error> {float_to_exponential_common_shortest::<T>}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/funky_arms.rs:28:9: 28:45\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r mut std::fmt::Formatter<'s>, &'t0 T, core::num::flt2dec::Sign, bool) -> std::result::Result<(), std::fmt::Error> {float_to_exponential_common_shortest::<T>}, val: Value(Scalar(<ZST>)) }\n@@ -120,9 +111,6 @@\n           StorageLive(_17);                // scope 3 at $DIR/funky_arms.rs:26:81: 26:86\n           _17 = _3;                        // scope 3 at $DIR/funky_arms.rs:26:81: 26:86\n           _0 = const float_to_exponential_common_exact::<T>(move _11, move _12, move _13, move _14, move _17) -> bb8; // scope 3 at $DIR/funky_arms.rs:26:9: 26:87\n-                                           // ty::Const\n-                                           // + ty: for<'r, 's, 't0> fn(&'r mut std::fmt::Formatter<'s>, &'t0 T, core::num::flt2dec::Sign, u32, bool) -> std::result::Result<(), std::fmt::Error> {float_to_exponential_common_exact::<T>}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/funky_arms.rs:26:9: 26:42\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r mut std::fmt::Formatter<'s>, &'t0 T, core::num::flt2dec::Sign, u32, bool) -> std::result::Result<(), std::fmt::Error> {float_to_exponential_common_exact::<T>}, val: Value(Scalar(<ZST>)) }"}, {"sha": "d626816673d7b68d8bba3db9d23f69e144db4ea8", "filename": "src/test/mir-opt/generator_storage_dead_unwind.main-{{closure}}.StateTransform.before.mir", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7B%7Bclosure%7D%7D.StateTransform.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7B%7Bclosure%7D%7D.StateTransform.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7B%7Bclosure%7D%7D.StateTransform.before.mir?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -40,9 +40,6 @@ yields ()\n         StorageLive(_8);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:14: 26:15\n         _8 = move _3;                    // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:14: 26:15\n         _7 = const take::<Foo>(move _8) -> [return: bb7, unwind: bb9]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:9: 26:16\n-                                         // ty::Const\n-                                         // + ty: fn(Foo) {take::<Foo>}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/generator-storage-dead-unwind.rs:26:9: 26:13\n                                          // + literal: Const { ty: fn(Foo) {take::<Foo>}, val: Value(Scalar(<ZST>)) }\n@@ -76,9 +73,6 @@ yields ()\n         StorageLive(_10);                // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:14: 27:15\n         _10 = move _4;                   // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:14: 27:15\n         _9 = const take::<Bar>(move _10) -> [return: bb10, unwind: bb11]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:9: 27:16\n-                                         // ty::Const\n-                                         // + ty: fn(Bar) {take::<Bar>}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/generator-storage-dead-unwind.rs:27:9: 27:13\n                                          // + literal: Const { ty: fn(Bar) {take::<Bar>}, val: Value(Scalar(<ZST>)) }"}, {"sha": "4249f5a4f8e483ec98c0639861c2a5de17cb14ba", "filename": "src/test/mir-opt/generator_tiny.main-{{closure}}.generator_resume.0.mir", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fgenerator_tiny.main-%7B%7Bclosure%7D%7D.generator_resume.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fgenerator_tiny.main-%7B%7Bclosure%7D%7D.generator_resume.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator_tiny.main-%7B%7Bclosure%7D%7D.generator_resume.0.mir?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -51,9 +51,6 @@ fn main::{{closure}}#0(_1: std::pin::Pin<&mut [generator@$DIR/generator-tiny.rs:\n         StorageDead(_6);                 // scope 1 at $DIR/generator-tiny.rs:22:18: 22:19\n         StorageLive(_8);                 // scope 1 at $DIR/generator-tiny.rs:23:13: 23:21\n         _8 = const callee() -> bb4;      // scope 1 at $DIR/generator-tiny.rs:23:13: 23:21\n-                                         // ty::Const\n-                                         // + ty: fn() {callee}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/generator-tiny.rs:23:13: 23:19\n                                          // + literal: Const { ty: fn() {callee}, val: Value(Scalar(<ZST>)) }"}, {"sha": "c0bd1b706f870dfdec1e46d40f5d57594d58dfe5", "filename": "src/test/mir-opt/inline/inline_any_operand.bar.Inline.after.mir", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Finline%2Finline_any_operand.bar.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Finline%2Finline_any_operand.bar.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_any_operand.bar.Inline.after.mir?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -17,9 +17,6 @@ fn bar() -> bool {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/inline-any-operand.rs:11:9: 11:10\n         _1 = const foo;                  // scope 0 at $DIR/inline-any-operand.rs:11:13: 11:16\n-                                         // ty::Const\n-                                         // + ty: fn(i32, i32) -> bool {foo}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/inline-any-operand.rs:11:13: 11:16\n                                          // + literal: Const { ty: fn(i32, i32) -> bool {foo}, val: Value(Scalar(<ZST>)) }"}, {"sha": "3ae900092ac791ac763c665d311eb31416e2cb55", "filename": "src/test/mir-opt/inline/inline_into_box_place.main.Inline.diff.32bit", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.diff.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.diff.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.diff.32bit?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -20,9 +20,7 @@\n -         (*_2) = const std::vec::Vec::<u32>::new() -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         _4 = &mut (*_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         ((*_4).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32> { ptr: std::ptr::Unique::<u32> { pointer: {0x4 as *const u32}, _marker: std::marker::PhantomData::<u32> }, cap: 0_usize, alloc: std::alloc::Global }; // scope 2 at $SRC_DIR/alloc/src/vec.rs:LL:COL\n-                                           // ty::Const\n--                                          // + ty: fn() -> std::vec::Vec<u32> {std::vec::Vec::<u32>::new}\n--                                          // + val: Value(Scalar(<ZST>))\n++                                          // ty::Const\n +                                          // + ty: alloc::raw_vec::RawVec<u32>\n +                                          // + val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } })\n                                            // mir::Constant\n@@ -62,9 +60,6 @@\n   \n -     bb4 (cleanup): {\n -         _3 = const alloc::alloc::box_free::<std::vec::Vec<u32>>(move (_2.0: std::ptr::Unique<std::vec::Vec<u32>>)) -> bb1; // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n--                                          // ty::Const\n--                                          // + ty: unsafe fn(std::ptr::Unique<std::vec::Vec<u32>>) {alloc::alloc::box_free::<std::vec::Vec<u32>>}\n--                                          // + val: Value(Scalar(<ZST>))\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-into-box-place.rs:8:42: 8:43\n -                                          // + literal: Const { ty: unsafe fn(std::ptr::Unique<std::vec::Vec<u32>>) {alloc::alloc::box_free::<std::vec::Vec<u32>>}, val: Value(Scalar(<ZST>)) }"}, {"sha": "fb34ec084c7a84978555099fdb153702e1318bc9", "filename": "src/test/mir-opt/inline/inline_into_box_place.main.Inline.diff.64bit", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.diff.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.diff.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.diff.64bit?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -20,9 +20,7 @@\n -         (*_2) = const std::vec::Vec::<u32>::new() -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         _4 = &mut (*_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         ((*_4).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32> { ptr: std::ptr::Unique::<u32> { pointer: {0x4 as *const u32}, _marker: std::marker::PhantomData::<u32> }, cap: 0_usize, alloc: std::alloc::Global }; // scope 2 at $SRC_DIR/alloc/src/vec.rs:LL:COL\n-                                           // ty::Const\n--                                          // + ty: fn() -> std::vec::Vec<u32> {std::vec::Vec::<u32>::new}\n--                                          // + val: Value(Scalar(<ZST>))\n++                                          // ty::Const\n +                                          // + ty: alloc::raw_vec::RawVec<u32>\n +                                          // + val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [65535], len: Size { raw: 16 } }, size: Size { raw: 16 }, align: Align { pow2: 3 }, mutability: Not, extra: () }, offset: Size { raw: 0 } })\n                                            // mir::Constant\n@@ -62,9 +60,6 @@\n   \n -     bb4 (cleanup): {\n -         _3 = const alloc::alloc::box_free::<std::vec::Vec<u32>>(move (_2.0: std::ptr::Unique<std::vec::Vec<u32>>)) -> bb1; // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n--                                          // ty::Const\n--                                          // + ty: unsafe fn(std::ptr::Unique<std::vec::Vec<u32>>) {alloc::alloc::box_free::<std::vec::Vec<u32>>}\n--                                          // + val: Value(Scalar(<ZST>))\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-into-box-place.rs:8:42: 8:43\n -                                          // + literal: Const { ty: unsafe fn(std::ptr::Unique<std::vec::Vec<u32>>) {alloc::alloc::box_free::<std::vec::Vec<u32>>}, val: Value(Scalar(<ZST>)) }"}, {"sha": "78e7dfcc970ad203fd38aeee65e8715b8745cbb8", "filename": "src/test/mir-opt/inline/inline_retag.bar.Inline.after.mir", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Finline%2Finline_retag.bar.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Finline%2Finline_retag.bar.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_retag.bar.Inline.after.mir?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -25,9 +25,6 @@ fn bar() -> bool {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/inline-retag.rs:11:9: 11:10\n         _1 = const foo;                  // scope 0 at $DIR/inline-retag.rs:11:13: 11:16\n-                                         // ty::Const\n-                                         // + ty: for<'r, 's> fn(&'r i32, &'s i32) -> bool {foo}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/inline-retag.rs:11:13: 11:16\n                                          // + literal: Const { ty: for<'r, 's> fn(&'r i32, &'s i32) -> bool {foo}, val: Value(Scalar(<ZST>)) }"}, {"sha": "2cc8fa68399ff063c83826d20aa501f020e43363", "filename": "src/test/mir-opt/inline/inline_specialization.main.Inline.diff", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Finline%2Finline_specialization.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Finline%2Finline_specialization.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_specialization.main.Inline.diff?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -13,9 +13,6 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/inline-specialization.rs:5:9: 5:10\n -         _1 = const <std::vec::Vec<()> as Foo>::bar() -> bb1; // scope 0 at $DIR/inline-specialization.rs:5:13: 5:38\n--                                          // ty::Const\n--                                          // + ty: fn() -> u32 {<std::vec::Vec<()> as Foo>::bar}\n--                                          // + val: Value(Scalar(<ZST>))\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-specialization.rs:5:13: 5:36\n -                                          // + literal: Const { ty: fn() -> u32 {<std::vec::Vec<()> as Foo>::bar}, val: Value(Scalar(<ZST>)) }"}, {"sha": "4e9d17cbb8bd16dc00cbd5419c473e1f53b3f1ca", "filename": "src/test/mir-opt/inline/inline_trait_method.test.Inline.after.mir", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Finline%2Finline_trait_method.test.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Finline%2Finline_trait_method.test.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_trait_method.test.Inline.after.mir?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -9,9 +9,6 @@ fn test(_1: &dyn X) -> u32 {\n         StorageLive(_2);                 // scope 0 at $DIR/inline-trait-method.rs:9:5: 9:6\n         _2 = &(*_1);                     // scope 0 at $DIR/inline-trait-method.rs:9:5: 9:6\n         _0 = const <dyn X as X>::y(move _2) -> bb1; // scope 0 at $DIR/inline-trait-method.rs:9:5: 9:10\n-                                         // ty::Const\n-                                         // + ty: for<'r> fn(&'r dyn X) -> u32 {<dyn X as X>::y}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/inline-trait-method.rs:9:7: 9:8\n                                          // + literal: Const { ty: for<'r> fn(&'r dyn X) -> u32 {<dyn X as X>::y}, val: Value(Scalar(<ZST>)) }"}, {"sha": "af47fbac7629931b0f988152d8aba99ea3129754", "filename": "src/test/mir-opt/inline/inline_trait_method_2.test2.Inline.after.mir", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Finline%2Finline_trait_method_2.test2.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Finline%2Finline_trait_method_2.test2.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_trait_method_2.test2.Inline.after.mir?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -16,9 +16,6 @@ fn test2(_1: &dyn X) -> bool {\n         _2 = move _3 as &dyn X (Pointer(Unsize)); // scope 0 at $DIR/inline-trait-method_2.rs:5:10: 5:11\n         StorageDead(_3);                 // scope 0 at $DIR/inline-trait-method_2.rs:5:10: 5:11\n         _0 = const <dyn X as X>::y(move _2) -> bb1; // scope 1 at $DIR/inline-trait-method_2.rs:10:5: 10:10\n-                                         // ty::Const\n-                                         // + ty: for<'r> fn(&'r dyn X) -> bool {<dyn X as X>::y}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/inline-trait-method_2.rs:10:7: 10:8\n                                          // + literal: Const { ty: for<'r> fn(&'r dyn X) -> bool {<dyn X as X>::y}, val: Value(Scalar(<ZST>)) }"}, {"sha": "6297b28d0fb2cc5ba8d0beac3ec383b66c9e0e90", "filename": "src/test/mir-opt/instrument_coverage.main.InstrumentCoverage.diff", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Finstrument_coverage.main.InstrumentCoverage.diff", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Finstrument_coverage.main.InstrumentCoverage.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finstrument_coverage.main.InstrumentCoverage.diff?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -15,9 +15,6 @@\n       bb1: {\n           StorageLive(_2);                 // scope 0 at /the/src/instrument_coverage.rs:12:12: 12:17\n           _2 = const bar() -> [return: bb3, unwind: bb2]; // scope 0 at /the/src/instrument_coverage.rs:12:12: 12:17\n-                                           // ty::Const\n-                                           // + ty: fn() -> bool {bar}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: /the/src/instrument_coverage.rs:12:12: 12:15\n                                            // + literal: Const { ty: fn() -> bool {bar}, val: Value(Scalar(<ZST>)) }"}, {"sha": "8e978ca341c16e3587cad37a4565b335210b44ec", "filename": "src/test/mir-opt/issue_41110.main.ElaborateDrops.after.mir", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fissue_41110.main.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fissue_41110.main.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_41110.main.ElaborateDrops.after.mir?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -21,9 +21,6 @@ fn main() -> () {\n         StorageLive(_4);                 // scope 0 at $DIR/issue-41110.rs:8:21: 8:22\n         _4 = S;                          // scope 0 at $DIR/issue-41110.rs:8:21: 8:22\n         _3 = const S::id(move _4) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/issue-41110.rs:8:21: 8:27\n-                                         // ty::Const\n-                                         // + ty: fn(S) -> S {S::id}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41110.rs:8:23: 8:25\n                                          // + literal: Const { ty: fn(S) -> S {S::id}, val: Value(Scalar(<ZST>)) }\n@@ -37,9 +34,6 @@ fn main() -> () {\n         StorageDead(_4);                 // scope 0 at $DIR/issue-41110.rs:8:26: 8:27\n         _5 = const false;                // scope 0 at $DIR/issue-41110.rs:8:13: 8:28\n         _1 = const S::other(move _2, move _3) -> [return: bb6, unwind: bb5]; // scope 0 at $DIR/issue-41110.rs:8:13: 8:28\n-                                         // ty::Const\n-                                         // + ty: fn(S, S) {S::other}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41110.rs:8:15: 8:20\n                                          // + literal: Const { ty: fn(S, S) {S::other}, val: Value(Scalar(<ZST>)) }"}, {"sha": "60a4f9f561d4b4592fb640b229328578ddf9343d", "filename": "src/test/mir-opt/issue_41110.test.ElaborateDrops.after.mir", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fissue_41110.test.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fissue_41110.test.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_41110.test.ElaborateDrops.after.mir?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -26,9 +26,6 @@ fn test() -> () {\n         StorageLive(_4);                 // scope 2 at $DIR/issue-41110.rs:17:10: 17:11\n         _4 = move _2;                    // scope 2 at $DIR/issue-41110.rs:17:10: 17:11\n         _3 = const std::mem::drop::<S>(move _4) -> [return: bb2, unwind: bb5]; // scope 2 at $DIR/issue-41110.rs:17:5: 17:12\n-                                         // ty::Const\n-                                         // + ty: fn(S) {std::mem::drop::<S>}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41110.rs:17:5: 17:9\n                                          // + literal: Const { ty: fn(S) {std::mem::drop::<S>}, val: Value(Scalar(<ZST>)) }"}, {"sha": "74d56b6cd1072250b0b9275419e832c028c330c6", "filename": "src/test/mir-opt/issue_41888.main.ElaborateDrops.after.mir", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.after.mir?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -27,9 +27,6 @@ fn main() -> () {\n         StorageLive(_1);                 // scope 0 at $DIR/issue-41888.rs:7:9: 7:10\n         StorageLive(_2);                 // scope 1 at $DIR/issue-41888.rs:8:8: 8:14\n         _2 = const cond() -> [return: bb2, unwind: bb3]; // scope 1 at $DIR/issue-41888.rs:8:8: 8:14\n-                                         // ty::Const\n-                                         // + ty: fn() -> bool {cond}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41888.rs:8:8: 8:12\n                                          // + literal: Const { ty: fn() -> bool {cond}, val: Value(Scalar(<ZST>)) }"}, {"sha": "c9b9b96a8dc210be9d92d9fd13beae2fb12e3be2", "filename": "src/test/mir-opt/issue_49232.main.mir_map.0.mir", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fissue_49232.main.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fissue_49232.main.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_49232.main.mir_map.0.mir?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -81,9 +81,6 @@ fn main() -> () {\n         StorageLive(_6);                 // scope 1 at $DIR/issue-49232.rs:13:14: 13:21\n         _6 = &_2;                        // scope 1 at $DIR/issue-49232.rs:13:14: 13:21\n         _5 = const std::mem::drop::<&i32>(move _6) -> [return: bb13, unwind: bb4]; // scope 1 at $DIR/issue-49232.rs:13:9: 13:22\n-                                         // ty::Const\n-                                         // + ty: fn(&i32) {std::mem::drop::<&i32>}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-49232.rs:13:9: 13:13\n                                          // + literal: Const { ty: fn(&i32) {std::mem::drop::<&i32>}, val: Value(Scalar(<ZST>)) }"}, {"sha": "28779ab9876b69c48eb902abda2e8bc48020c3da", "filename": "src/test/mir-opt/issue_62289.test.ElaborateDrops.before.mir", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -31,9 +31,6 @@ fn test() -> std::option::Option<std::boxed::Box<u32>> {\n         StorageLive(_4);                 // scope 0 at $DIR/issue-62289.rs:9:15: 9:19\n         _4 = std::option::Option::<u32>::None; // scope 0 at $DIR/issue-62289.rs:9:15: 9:19\n         _3 = const <std::option::Option<u32> as std::ops::Try>::into_result(move _4) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n-                                         // ty::Const\n-                                         // + ty: fn(std::option::Option<u32>) -> std::result::Result<<std::option::Option<u32> as std::ops::Try>::Ok, <std::option::Option<u32> as std::ops::Try>::Error> {<std::option::Option<u32> as std::ops::Try>::into_result}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-62289.rs:9:15: 9:20\n                                          // + literal: Const { ty: fn(std::option::Option<u32>) -> std::result::Result<<std::option::Option<u32> as std::ops::Try>::Ok, <std::option::Option<u32> as std::ops::Try>::Error> {<std::option::Option<u32> as std::ops::Try>::into_result}, val: Value(Scalar(<ZST>)) }\n@@ -73,9 +70,6 @@ fn test() -> std::option::Option<std::boxed::Box<u32>> {\n         StorageLive(_9);                 // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n         _9 = _6;                         // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n         _8 = const <std::option::NoneError as std::convert::From<std::option::NoneError>>::from(move _9) -> [return: bb8, unwind: bb3]; // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n-                                         // ty::Const\n-                                         // + ty: fn(std::option::NoneError) -> std::option::NoneError {<std::option::NoneError as std::convert::From<std::option::NoneError>>::from}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-62289.rs:9:19: 9:20\n                                          // + literal: Const { ty: fn(std::option::NoneError) -> std::option::NoneError {<std::option::NoneError as std::convert::From<std::option::NoneError>>::from}, val: Value(Scalar(<ZST>)) }\n@@ -88,9 +82,6 @@ fn test() -> std::option::Option<std::boxed::Box<u32>> {\n     bb8: {\n         StorageDead(_9);                 // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n         _0 = const <std::option::Option<std::boxed::Box<u32>> as std::ops::Try>::from_error(move _8) -> [return: bb9, unwind: bb3]; // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n-                                         // ty::Const\n-                                         // + ty: fn(<std::option::Option<std::boxed::Box<u32>> as std::ops::Try>::Error) -> std::option::Option<std::boxed::Box<u32>> {<std::option::Option<std::boxed::Box<u32>> as std::ops::Try>::from_error}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-62289.rs:9:15: 9:20\n                                          // + literal: Const { ty: fn(<std::option::Option<std::boxed::Box<u32>> as std::ops::Try>::Error) -> std::option::Option<std::boxed::Box<u32>> {<std::option::Option<std::boxed::Box<u32>> as std::ops::Try>::from_error}, val: Value(Scalar(<ZST>)) }"}, {"sha": "15af57439f1954fb1b79bf63cf6951a9caece59a", "filename": "src/test/mir-opt/issue_72181.main.mir_map.0.mir.32bit", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.mir.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.mir.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.mir.32bit?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -23,9 +23,6 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/issue-72181.rs:24:13: 24:34\n         _1 = const std::mem::size_of::<Foo>() -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/issue-72181.rs:24:13: 24:34\n-                                         // ty::Const\n-                                         // + ty: fn() -> usize {std::mem::size_of::<Foo>}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-72181.rs:24:13: 24:32\n                                          // + literal: Const { ty: fn() -> usize {std::mem::size_of::<Foo>}, val: Value(Scalar(<ZST>)) }"}, {"sha": "15af57439f1954fb1b79bf63cf6951a9caece59a", "filename": "src/test/mir-opt/issue_72181.main.mir_map.0.mir.64bit", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.mir.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.mir.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181.main.mir_map.0.mir.64bit?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -23,9 +23,6 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/issue-72181.rs:24:13: 24:34\n         _1 = const std::mem::size_of::<Foo>() -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/issue-72181.rs:24:13: 24:34\n-                                         // ty::Const\n-                                         // + ty: fn() -> usize {std::mem::size_of::<Foo>}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-72181.rs:24:13: 24:32\n                                          // + literal: Const { ty: fn() -> usize {std::mem::size_of::<Foo>}, val: Value(Scalar(<ZST>)) }"}, {"sha": "e501b5a9056a9ced48f83819c80a3df543083456", "filename": "src/test/mir-opt/issue_72181_1.main.mir_map.0.mir", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fissue_72181_1.main.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fissue_72181_1.main.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181_1.main.mir_map.0.mir?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -22,9 +22,6 @@ fn main() -> () {\n         StorageLive(_3);                 // scope 2 at $DIR/issue-72181-1.rs:17:41: 17:43\n         _3 = ();                         // scope 2 at $DIR/issue-72181-1.rs:17:41: 17:43\n         _2 = const std::intrinsics::transmute::<(), Void>(move _3) -> [return: bb2, unwind: bb1]; // scope 2 at $DIR/issue-72181-1.rs:17:9: 17:44\n-                                         // ty::Const\n-                                         // + ty: unsafe extern \"rust-intrinsic\" fn(()) -> Void {std::intrinsics::transmute::<(), Void>}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-72181-1.rs:17:9: 17:40\n                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(()) -> Void {std::intrinsics::transmute::<(), Void>}, val: Value(Scalar(<ZST>)) }\n@@ -42,9 +39,6 @@ fn main() -> () {\n         StorageLive(_5);                 // scope 1 at $DIR/issue-72181-1.rs:20:7: 20:8\n         _5 = move _2;                    // scope 1 at $DIR/issue-72181-1.rs:20:7: 20:8\n         const f(move _5) -> bb1;         // scope 1 at $DIR/issue-72181-1.rs:20:5: 20:9\n-                                         // ty::Const\n-                                         // + ty: fn(Void) -> ! {f}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/issue-72181-1.rs:20:5: 20:6\n                                          // + literal: Const { ty: fn(Void) -> ! {f}, val: Value(Scalar(<ZST>)) }"}, {"sha": "c47e64f547926ec34f2e5543616d2dfba0ea418f", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.diff.32bit", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.diff.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.diff.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.diff.32bit?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -147,17 +147,11 @@\n           _23 = (_18.1: &&i32);            // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_24);                // scope 5 at $SRC_DIR/std/src/macros.rs:LL:COL\n           _25 = const <&i32 as std::fmt::Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n           StorageLive(_28);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _28 = const std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _25) -> bb3; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n@@ -166,9 +160,6 @@\n       bb3: {\n           StorageLive(_29);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _29 = const std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>(move _22) -> bb4; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n@@ -181,17 +172,11 @@\n           StorageDead(_28);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           StorageLive(_26);                // scope 5 at $SRC_DIR/std/src/macros.rs:LL:COL\n           _27 = const <&i32 as std::fmt::Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n           StorageLive(_30);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _30 = const std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _27) -> bb5; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n@@ -200,9 +185,6 @@\n       bb5: {\n           StorageLive(_31);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _31 = const std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>(move _23) -> bb6; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n@@ -226,9 +208,6 @@\n           StorageDead(_32);                // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _12 = &_13;                      // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n           const std::rt::begin_panic_fmt(move _12); // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: for<'r, 's> fn(&'r std::fmt::Arguments<'s>) -> ! {std::rt::begin_panic_fmt}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's> fn(&'r std::fmt::Arguments<'s>) -> ! {std::rt::begin_panic_fmt}, val: Value(Scalar(<ZST>)) }"}, {"sha": "c47e64f547926ec34f2e5543616d2dfba0ea418f", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.diff.64bit", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.diff.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.diff.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.diff.64bit?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -147,17 +147,11 @@\n           _23 = (_18.1: &&i32);            // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_24);                // scope 5 at $SRC_DIR/std/src/macros.rs:LL:COL\n           _25 = const <&i32 as std::fmt::Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n           StorageLive(_28);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _28 = const std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _25) -> bb3; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n@@ -166,9 +160,6 @@\n       bb3: {\n           StorageLive(_29);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _29 = const std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>(move _22) -> bb4; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n@@ -181,17 +172,11 @@\n           StorageDead(_28);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           StorageLive(_26);                // scope 5 at $SRC_DIR/std/src/macros.rs:LL:COL\n           _27 = const <&i32 as std::fmt::Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n           StorageLive(_30);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _30 = const std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _27) -> bb5; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n@@ -200,9 +185,6 @@\n       bb5: {\n           StorageLive(_31);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _31 = const std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>(move _23) -> bb6; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n@@ -226,9 +208,6 @@\n           StorageDead(_32);                // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _12 = &_13;                      // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n           const std::rt::begin_panic_fmt(move _12); // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: for<'r, 's> fn(&'r std::fmt::Arguments<'s>) -> ! {std::rt::begin_panic_fmt}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's> fn(&'r std::fmt::Arguments<'s>) -> ! {std::rt::begin_panic_fmt}, val: Value(Scalar(<ZST>)) }"}, {"sha": "e156637157d22b157cebef1d07d035a0c9b8d0b8", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.diff.32bit", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff.32bit?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -236,19 +236,13 @@\n           _39 = _36;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_40);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _40 = const <&i32 as std::fmt::Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n           StorageLive(_46);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           StorageLive(_47);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _47 = _40;                       // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _46 = const std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _47) -> bb6; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n@@ -260,9 +254,6 @@\n           StorageLive(_49);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _49 = _39;                       // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _48 = const std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>(move _49) -> bb7; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n@@ -281,19 +272,13 @@\n           _42 = _37;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_43);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _43 = const <&i32 as std::fmt::Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n           StorageLive(_50);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           StorageLive(_51);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _51 = _43;                       // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _50 = const std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _51) -> bb8; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n@@ -305,9 +290,6 @@\n           StorageLive(_53);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _53 = _42;                       // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _52 = const std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>(move _53) -> bb9; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n@@ -347,9 +329,6 @@\n           _21 = &_22;                      // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n           _20 = _21;                       // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n           const std::rt::begin_panic_fmt(move _20); // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: for<'r, 's> fn(&'r std::fmt::Arguments<'s>) -> ! {std::rt::begin_panic_fmt}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's> fn(&'r std::fmt::Arguments<'s>) -> ! {std::rt::begin_panic_fmt}, val: Value(Scalar(<ZST>)) }"}, {"sha": "e156637157d22b157cebef1d07d035a0c9b8d0b8", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.diff.64bit", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff.64bit?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -236,19 +236,13 @@\n           _39 = _36;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_40);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _40 = const <&i32 as std::fmt::Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n           StorageLive(_46);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           StorageLive(_47);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _47 = _40;                       // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _46 = const std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _47) -> bb6; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n@@ -260,9 +254,6 @@\n           StorageLive(_49);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _49 = _39;                       // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _48 = const std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>(move _49) -> bb7; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n@@ -281,19 +272,13 @@\n           _42 = _37;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_43);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _43 = const <&i32 as std::fmt::Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n           StorageLive(_50);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           StorageLive(_51);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _51 = _43;                       // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _50 = const std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _51) -> bb8; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n@@ -305,9 +290,6 @@\n           StorageLive(_53);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _53 = _42;                       // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n           _52 = const std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>(move _53) -> bb9; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n@@ -347,9 +329,6 @@\n           _21 = &_22;                      // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n           _20 = _21;                       // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n           const std::rt::begin_panic_fmt(move _20); // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n-                                           // ty::Const\n-                                           // + ty: for<'r, 's> fn(&'r std::fmt::Arguments<'s>) -> ! {std::rt::begin_panic_fmt}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's> fn(&'r std::fmt::Arguments<'s>) -> ! {std::rt::begin_panic_fmt}, val: Value(Scalar(<ZST>)) }"}, {"sha": "fb06c6d76e0652ecd26c9e94fbe82e0130beef35", "filename": "src/test/mir-opt/match_false_edges.full_tested_match.PromoteTemps.after.mir", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -66,9 +66,6 @@ fn full_tested_match() -> () {\n         _4 = &shallow _2;                // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n         StorageLive(_7);                 // scope 0 at $DIR/match_false_edges.rs:16:20: 16:27\n         _7 = const guard() -> [return: bb7, unwind: bb1]; // scope 0 at $DIR/match_false_edges.rs:16:20: 16:27\n-                                         // ty::Const\n-                                         // + ty: fn() -> bool {guard}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/match_false_edges.rs:16:20: 16:25\n                                          // + literal: Const { ty: fn() -> bool {guard}, val: Value(Scalar(<ZST>)) }"}, {"sha": "afd496470b740db0eb2810e76767e562c21f8ee6", "filename": "src/test/mir-opt/match_false_edges.full_tested_match2.PromoteTemps.before.mir", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match2.PromoteTemps.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match2.PromoteTemps.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match2.PromoteTemps.before.mir?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -64,9 +64,6 @@ fn full_tested_match2() -> () {\n         _4 = &shallow _2;                // scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n         StorageLive(_7);                 // scope 0 at $DIR/match_false_edges.rs:27:20: 27:27\n         _7 = const guard() -> [return: bb7, unwind: bb1]; // scope 0 at $DIR/match_false_edges.rs:27:20: 27:27\n-                                         // ty::Const\n-                                         // + ty: fn() -> bool {guard}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/match_false_edges.rs:27:20: 27:25\n                                          // + literal: Const { ty: fn() -> bool {guard}, val: Value(Scalar(<ZST>)) }"}, {"sha": "a74f5ba57198d7791b55a48db820e0d534544569", "filename": "src/test/mir-opt/match_false_edges.main.PromoteTemps.before.mir", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.main.PromoteTemps.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.main.PromoteTemps.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.main.PromoteTemps.before.mir?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -72,9 +72,6 @@ fn main() -> () {\n         _5 = &shallow _2;                // scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n         StorageLive(_8);                 // scope 0 at $DIR/match_false_edges.rs:36:21: 36:28\n         _8 = const guard() -> [return: bb7, unwind: bb1]; // scope 0 at $DIR/match_false_edges.rs:36:21: 36:28\n-                                         // ty::Const\n-                                         // + ty: fn() -> bool {guard}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/match_false_edges.rs:36:21: 36:26\n                                          // + literal: Const { ty: fn() -> bool {guard}, val: Value(Scalar(<ZST>)) }\n@@ -118,9 +115,6 @@ fn main() -> () {\n         StorageLive(_13);                // scope 0 at $DIR/match_false_edges.rs:38:27: 38:28\n         _13 = (*_11);                    // scope 0 at $DIR/match_false_edges.rs:38:27: 38:28\n         _12 = const guard2(move _13) -> [return: bb12, unwind: bb1]; // scope 0 at $DIR/match_false_edges.rs:38:20: 38:29\n-                                         // ty::Const\n-                                         // + ty: fn(i32) -> bool {guard2}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/match_false_edges.rs:38:20: 38:26\n                                          // + literal: Const { ty: fn(i32) -> bool {guard2}, val: Value(Scalar(<ZST>)) }"}, {"sha": "5c42180ef4defb07ee9a21a53a716d793224f4d1", "filename": "src/test/mir-opt/nll/region_subtyping_basic.main.nll.0.mir.32bit", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.mir.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.mir.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.mir.32bit?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -78,9 +78,6 @@ fn main() -> () {\n     bb4: {\n         StorageLive(_10);                // bb4[0]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n         _10 = const Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(const Const(Value(Scalar(0x00000016)): usize)) -> [return: bb7, unwind: bb1]; // bb4[1]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n-                                         // ty::Const\n-                                         // + ty: fn(usize) -> bool {use_x}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/region-subtyping-basic.rs:23:9: 23:14\n                                          // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(Scalar(<ZST>)) }\n@@ -91,9 +88,6 @@ fn main() -> () {\n         StorageLive(_9);                 // bb5[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n         _9 = (*_6);                      // bb5[2]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n         _8 = const Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(move _9) -> [return: bb6, unwind: bb1]; // bb5[3]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n-                                         // ty::Const\n-                                         // + ty: fn(usize) -> bool {use_x}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/region-subtyping-basic.rs:21:9: 21:14\n                                          // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(Scalar(<ZST>)) }"}, {"sha": "adfbac431a51fe2d466d47abdafc34b0401d1341", "filename": "src/test/mir-opt/nll/region_subtyping_basic.main.nll.0.mir.64bit", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.mir.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.mir.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.mir.64bit?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -78,9 +78,6 @@ fn main() -> () {\n     bb4: {\n         StorageLive(_10);                // bb4[0]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n         _10 = const Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(const Const(Value(Scalar(0x0000000000000016)): usize)) -> [return: bb7, unwind: bb1]; // bb4[1]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n-                                         // ty::Const\n-                                         // + ty: fn(usize) -> bool {use_x}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/region-subtyping-basic.rs:23:9: 23:14\n                                          // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(Scalar(<ZST>)) }\n@@ -91,9 +88,6 @@ fn main() -> () {\n         StorageLive(_9);                 // bb5[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n         _9 = (*_6);                      // bb5[2]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n         _8 = const Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(move _9) -> [return: bb6, unwind: bb1]; // bb5[3]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n-                                         // ty::Const\n-                                         // + ty: fn(usize) -> bool {use_x}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/region-subtyping-basic.rs:21:9: 21:14\n                                          // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(Scalar(<ZST>)) }"}, {"sha": "c073fad9420085dad172d10effc12175079bed9b", "filename": "src/test/mir-opt/no_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fno_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fno_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fno_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -21,9 +21,6 @@ fn unwrap(_1: std::option::Option<T>) -> T {\n     bb1: {\n         StorageLive(_4);                 // scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n         const std::rt::begin_panic::<&str>(const \"explicit panic\") -> bb4; // scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n-                                         // ty::Const\n-                                         // + ty: fn(&str) -> ! {std::rt::begin_panic::<&str>}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/std/src/macros.rs:LL:COL\n                                          // + literal: Const { ty: fn(&str) -> ! {std::rt::begin_panic::<&str>}, val: Value(Scalar(<ZST>)) }"}, {"sha": "b32e2019a2c1e42444372c16c6e43fa44b024511", "filename": "src/test/mir-opt/no_spurious_drop_after_call.main.ElaborateDrops.before.mir", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fno_spurious_drop_after_call.main.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fno_spurious_drop_after_call.main.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fno_spurious_drop_after_call.main.ElaborateDrops.before.mir?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -21,9 +21,6 @@ fn main() -> () {\n                                          // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [], len: Size { raw: 0 } }, size: Size { raw: 0 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 0 }) }\n         _3 = &(*_4);                     // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:22\n         _2 = const <str as std::string::ToString>::to_string(move _3) -> bb2; // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:34\n-                                         // ty::Const\n-                                         // + ty: for<'r> fn(&'r str) -> std::string::String {<str as std::string::ToString>::to_string}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/no-spurious-drop-after-call.rs:9:23: 9:32\n                                          // + literal: Const { ty: for<'r> fn(&'r str) -> std::string::String {<str as std::string::ToString>::to_string}, val: Value(Scalar(<ZST>)) }\n@@ -36,9 +33,6 @@ fn main() -> () {\n     bb2: {\n         StorageDead(_3);                 // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:33: 9:34\n         _1 = const std::mem::drop::<std::string::String>(move _2) -> [return: bb3, unwind: bb4]; // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:5: 9:35\n-                                         // ty::Const\n-                                         // + ty: fn(std::string::String) {std::mem::drop::<std::string::String>}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/no-spurious-drop-after-call.rs:9:5: 9:19\n                                          // + literal: Const { ty: fn(std::string::String) {std::mem::drop::<std::string::String>}, val: Value(Scalar(<ZST>)) }"}, {"sha": "7769a9630d9369cce64e401dcf94838263cb025e", "filename": "src/test/mir-opt/retag.core.ptr-drop_in_place.Test.SimplifyCfg-make_shim.after.mir", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fretag.core.ptr-drop_in_place.Test.SimplifyCfg-make_shim.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fretag.core.ptr-drop_in_place.Test.SimplifyCfg-make_shim.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.core.ptr-drop_in_place.Test.SimplifyCfg-make_shim.after.mir?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -9,9 +9,6 @@ fn std::intrinsics::drop_in_place(_1: *mut Test) -> () {\n         Retag([raw] _1);                 // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n         _2 = &mut (*_1);                 // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n         _3 = const <Test as std::ops::Drop>::drop(move _2) -> bb1; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-                                         // ty::Const\n-                                         // + ty: for<'r> fn(&'r mut Test) {<Test as std::ops::Drop>::drop}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n                                          // + literal: Const { ty: for<'r> fn(&'r mut Test) {<Test as std::ops::Drop>::drop}, val: Value(Scalar(<ZST>)) }"}, {"sha": "efbc0e1955a99d2d86a780241b84665804f91c27", "filename": "src/test/mir-opt/retag.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -71,9 +71,6 @@ fn main() -> () {\n         _6 = &mut (*_7);                 // scope 1 at $DIR/retag.rs:32:29: 32:35\n         Retag([2phase] _6);              // scope 1 at $DIR/retag.rs:32:29: 32:35\n         _3 = const Test::foo(move _4, move _6) -> [return: bb2, unwind: bb3]; // scope 1 at $DIR/retag.rs:32:17: 32:36\n-                                         // ty::Const\n-                                         // + ty: for<'r, 'x> fn(&'r Test, &'x mut i32) -> &'x mut i32 {Test::foo}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/retag.rs:32:25: 32:28\n                                          // + literal: Const { ty: for<'r, 'x> fn(&'r Test, &'x mut i32) -> &'x mut i32 {Test::foo}, val: Value(Scalar(<ZST>)) }\n@@ -176,9 +173,6 @@ fn main() -> () {\n         _22 = &(*_23);                   // scope 7 at $DIR/retag.rs:47:21: 47:23\n         Retag(_22);                      // scope 7 at $DIR/retag.rs:47:21: 47:23\n         _19 = const Test::foo_shr(move _20, move _22) -> [return: bb6, unwind: bb7]; // scope 7 at $DIR/retag.rs:47:5: 47:24\n-                                         // ty::Const\n-                                         // + ty: for<'r, 'x> fn(&'r Test, &'x i32) -> &'x i32 {Test::foo_shr}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/retag.rs:47:13: 47:20\n                                          // + literal: Const { ty: for<'r, 'x> fn(&'r Test, &'x i32) -> &'x i32 {Test::foo_shr}, val: Value(Scalar(<ZST>)) }"}, {"sha": "41fb80784924736d335af0548b50e333f0c07fa0", "filename": "src/test/mir-opt/simplify_cfg.main.SimplifyCfg-early-opt.diff", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-early-opt.diff", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-early-opt.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-early-opt.diff?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -15,9 +15,6 @@\n           StorageLive(_2);                 // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n -         _2 = const bar() -> bb3;         // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n +         _2 = const bar() -> bb1;         // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n-                                           // ty::Const\n-                                           // + ty: fn() -> bool {bar}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/simplify_cfg.rs:7:12: 7:15\n                                            // + literal: Const { ty: fn() -> bool {bar}, val: Value(Scalar(<ZST>)) }"}, {"sha": "2f47a59a79714ba6755027542dc13a8791ecdea4", "filename": "src/test/mir-opt/simplify_cfg.main.SimplifyCfg-initial.diff", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-initial.diff", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-initial.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-initial.diff?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -24,9 +24,6 @@\n           StorageLive(_2);                 // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n -         _2 = const bar() -> [return: bb5, unwind: bb4]; // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n +         _2 = const bar() -> [return: bb3, unwind: bb2]; // scope 0 at $DIR/simplify_cfg.rs:7:12: 7:17\n-                                           // ty::Const\n-                                           // + ty: fn() -> bool {bar}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/simplify_cfg.rs:7:12: 7:15\n                                            // + literal: Const { ty: fn() -> bool {bar}, val: Value(Scalar(<ZST>)) }"}, {"sha": "82c9fb2632d8c12b6c6b24afb7ac817ad8c8eb3d", "filename": "src/test/mir-opt/simplify_if.main.SimplifyBranches-after-const-prop.diff", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fsimplify_if.main.SimplifyBranches-after-const-prop.diff", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fsimplify_if.main.SimplifyBranches-after-const-prop.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_if.main.SimplifyBranches-after-const-prop.diff?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -27,9 +27,6 @@\n       bb2: {\n           StorageLive(_2);                 // scope 0 at $DIR/simplify_if.rs:7:9: 7:15\n           _2 = const noop() -> bb3;        // scope 0 at $DIR/simplify_if.rs:7:9: 7:15\n-                                           // ty::Const\n-                                           // + ty: fn() {noop}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/simplify_if.rs:7:9: 7:13\n                                            // + literal: Const { ty: fn() {noop}, val: Value(Scalar(<ZST>)) }"}, {"sha": "f8d912fee4b58f377ae48a7101aadb51a8a5a2e4", "filename": "src/test/mir-opt/simplify_locals_removes_unused_consts.main.SimplifyLocals.diff", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.main.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.main.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.main.SimplifyLocals.diff?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -24,12 +24,12 @@\n -         StorageLive(_2);                 // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:21: 13:23\n -         StorageLive(_3);                 // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:25: 13:27\n -         (_1.0: ()) = const ();           // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:20: 13:28\n-+         StorageLive(_1);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:5: 14:22\n-+         _1 = const use_zst(const ((), ())) -> bb1; // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:5: 14:22\n-                                           // ty::Const\n+-                                          // ty::Const\n -                                          // + ty: ()\n -                                          // + val: Value(Scalar(<ZST>))\n--                                          // mir::Constant\n++         StorageLive(_1);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:5: 14:22\n++         _1 = const use_zst(const ((), ())) -> bb1; // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:5: 14:22\n+                                           // mir::Constant\n -                                          // + span: $DIR/simplify-locals-removes-unused-consts.rs:13:20: 13:28\n -                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n -         (_1.1: ()) = const ();           // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:20: 13:28\n@@ -63,10 +63,7 @@\n -         StorageDead(_7);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:20: 14:21\n -         StorageDead(_6);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:20: 14:21\n -         _4 = const use_zst(const ((), ())) -> bb1; // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:5: 14:22\n--                                          // ty::Const\n-                                           // + ty: fn(((), ())) {use_zst}\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n+-                                          // mir::Constant\n                                            // + span: $DIR/simplify-locals-removes-unused-consts.rs:14:5: 14:12\n                                            // + literal: Const { ty: fn(((), ())) {use_zst}, val: Value(Scalar(<ZST>)) }\n                                            // ty::Const\n@@ -92,9 +89,6 @@\n +         StorageDead(_1);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:22: 14:23\n +         StorageLive(_2);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:5: 16:35\n +         _2 = const use_u8(const 42_u8) -> bb2; // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:5: 16:35\n-                                           // ty::Const\n-                                           // + ty: fn(u8) {use_u8}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/simplify-locals-removes-unused-consts.rs:16:5: 16:11\n                                            // + literal: Const { ty: fn(u8) {use_u8}, val: Value(Scalar(<ZST>)) }"}, {"sha": "864f7583f461dba9c00b32c1726063de2b8aa500", "filename": "src/test/mir-opt/simplify_match.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fsimplify_match.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fsimplify_match.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_match.main.ConstProp.diff?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -33,9 +33,6 @@\n   \n       bb2: {\n           _0 = const noop() -> bb3;        // scope 0 at $DIR/simplify_match.rs:7:17: 7:23\n-                                           // ty::Const\n-                                           // + ty: fn() {noop}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/simplify_match.rs:7:17: 7:21\n                                            // + literal: Const { ty: fn() {noop}, val: Value(Scalar(<ZST>)) }"}, {"sha": "75862b1201519acb66d3de22ae239880e4014229", "filename": "src/test/mir-opt/simplify_try_if_let.{{impl}}-append.SimplifyArmIdentity.diff", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fsimplify_try_if_let.%7B%7Bimpl%7D%7D-append.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fsimplify_try_if_let.%7B%7Bimpl%7D%7D-append.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try_if_let.%7B%7Bimpl%7D%7D-append.SimplifyArmIdentity.diff?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -36,9 +36,6 @@\n           StorageLive(_6);                 // scope 1 at $DIR/simplify_try_if_let.rs:26:43: 26:53\n           _6 = &mut ((*_2).0: std::option::Option<std::ptr::NonNull<Node>>); // scope 1 at $DIR/simplify_try_if_let.rs:26:43: 26:53\n           _5 = const std::option::Option::<std::ptr::NonNull<Node>>::take(move _6) -> bb4; // scope 1 at $DIR/simplify_try_if_let.rs:26:43: 26:60\n-                                           // ty::Const\n-                                           // + ty: for<'r> fn(&'r mut std::option::Option<std::ptr::NonNull<Node>>) -> std::option::Option<std::ptr::NonNull<Node>> {std::option::Option::<std::ptr::NonNull<Node>>::take}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/simplify_try_if_let.rs:26:54: 26:58\n                                            // + literal: Const { ty: for<'r> fn(&'r mut std::option::Option<std::ptr::NonNull<Node>>) -> std::option::Option<std::ptr::NonNull<Node>> {std::option::Option::<std::ptr::NonNull<Node>>::take}, val: Value(Scalar(<ZST>)) }\n@@ -89,9 +86,6 @@\n           StorageLive(_12);                // scope 3 at $DIR/simplify_try_if_let.rs:28:25: 28:29\n           _12 = &mut _4;                   // scope 3 at $DIR/simplify_try_if_let.rs:28:25: 28:29\n           _11 = const std::ptr::NonNull::<Node>::as_mut(move _12) -> bb7; // scope 3 at $DIR/simplify_try_if_let.rs:28:25: 28:38\n-                                           // ty::Const\n-                                           // + ty: for<'r> unsafe fn(&'r mut std::ptr::NonNull<Node>) -> &'r mut Node {std::ptr::NonNull::<Node>::as_mut}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/simplify_try_if_let.rs:28:30: 28:36\n                                            // + literal: Const { ty: for<'r> unsafe fn(&'r mut std::ptr::NonNull<Node>) -> &'r mut Node {std::ptr::NonNull::<Node>::as_mut}, val: Value(Scalar(<ZST>)) }"}, {"sha": "6d9dad94d77ba4dc7661f678a241ab144bacc202", "filename": "src/test/mir-opt/unreachable.main.UnreachablePropagation.diff", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Funreachable.main.UnreachablePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Funreachable.main.UnreachablePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable.main.UnreachablePropagation.diff?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -20,9 +20,6 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/unreachable.rs:9:23: 9:30\n           _1 = const empty() -> bb1;       // scope 0 at $DIR/unreachable.rs:9:23: 9:30\n-                                           // ty::Const\n-                                           // + ty: fn() -> std::option::Option<Empty> {empty}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/unreachable.rs:9:23: 9:28\n                                            // + literal: Const { ty: fn() -> std::option::Option<Empty> {empty}, val: Value(Scalar(<ZST>)) }"}, {"sha": "25b7d55fc6a1a68bc8b28e90ad908af4664ec4f3", "filename": "src/test/mir-opt/unreachable_asm.main.UnreachablePropagation.diff", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Funreachable_asm.main.UnreachablePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Funreachable_asm.main.UnreachablePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable_asm.main.UnreachablePropagation.diff?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -23,9 +23,6 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/unreachable_asm.rs:11:23: 11:30\n           _1 = const empty() -> bb1;       // scope 0 at $DIR/unreachable_asm.rs:11:23: 11:30\n-                                           // ty::Const\n-                                           // + ty: fn() -> std::option::Option<Empty> {empty}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/unreachable_asm.rs:11:23: 11:28\n                                            // + literal: Const { ty: fn() -> std::option::Option<Empty> {empty}, val: Value(Scalar(<ZST>)) }"}, {"sha": "3ddf39d9eee3d0663ebbd93f3456b929aea24e09", "filename": "src/test/mir-opt/unreachable_asm_2.main.UnreachablePropagation.diff", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Funreachable_asm_2.main.UnreachablePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Funreachable_asm_2.main.UnreachablePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable_asm_2.main.UnreachablePropagation.diff?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -26,9 +26,6 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/unreachable_asm_2.rs:11:23: 11:30\n           _1 = const empty() -> bb1;       // scope 0 at $DIR/unreachable_asm_2.rs:11:23: 11:30\n-                                           // ty::Const\n-                                           // + ty: fn() -> std::option::Option<Empty> {empty}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/unreachable_asm_2.rs:11:23: 11:28\n                                            // + literal: Const { ty: fn() -> std::option::Option<Empty> {empty}, val: Value(Scalar(<ZST>)) }"}, {"sha": "1b19100fb631410e4d47717e713d6c1cfa817d4a", "filename": "src/test/mir-opt/unreachable_diverging.main.UnreachablePropagation.diff", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Funreachable_diverging.main.UnreachablePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Funreachable_diverging.main.UnreachablePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable_diverging.main.UnreachablePropagation.diff?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -22,9 +22,6 @@\n           _1 = const true;                 // scope 0 at $DIR/unreachable_diverging.rs:13:13: 13:17\n           StorageLive(_2);                 // scope 1 at $DIR/unreachable_diverging.rs:14:25: 14:32\n           _2 = const empty() -> bb1;       // scope 1 at $DIR/unreachable_diverging.rs:14:25: 14:32\n-                                           // ty::Const\n-                                           // + ty: fn() -> std::option::Option<Empty> {empty}\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/unreachable_diverging.rs:14:25: 14:30\n                                            // + literal: Const { ty: fn() -> std::option::Option<Empty> {empty}, val: Value(Scalar(<ZST>)) }\n@@ -60,22 +57,19 @@\n   \n       bb4: {\n -         _5 = const ();                   // scope 2 at $DIR/unreachable_diverging.rs:15:9: 17:10\n-+         _5 = const loop_forever() -> bb5; // scope 2 at $DIR/unreachable_diverging.rs:16:13: 16:27\n-                                           // ty::Const\n+-                                          // ty::Const\n -                                          // + ty: ()\n -                                          // + val: Value(Scalar(<ZST>))\n--                                          // mir::Constant\n++         _5 = const loop_forever() -> bb5; // scope 2 at $DIR/unreachable_diverging.rs:16:13: 16:27\n+                                           // mir::Constant\n -                                          // + span: $DIR/unreachable_diverging.rs:15:9: 17:10\n -                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n -         goto -> bb6;                     // scope 2 at $DIR/unreachable_diverging.rs:15:9: 17:10\n -     }\n - \n -     bb5: {\n -         _5 = const loop_forever() -> bb6; // scope 2 at $DIR/unreachable_diverging.rs:16:13: 16:27\n--                                          // ty::Const\n-                                           // + ty: fn() {loop_forever}\n-                                           // + val: Value(Scalar(<ZST>))\n-                                           // mir::Constant\n+-                                          // mir::Constant\n                                            // + span: $DIR/unreachable_diverging.rs:16:13: 16:25\n                                            // + literal: Const { ty: fn() {loop_forever}, val: Value(Scalar(<ZST>)) }\n       }"}, {"sha": "d843bef6a95bfe7e5b116158e7b416fa38c2cc63", "filename": "src/test/mir-opt/unusual_item_types.core.ptr-drop_in_place.std__vec__Vec_i32_.AddMovesForPackedDrops.before.mir.32bit", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.std__vec__Vec_i32_.AddMovesForPackedDrops.before.mir.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.std__vec__Vec_i32_.AddMovesForPackedDrops.before.mir.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.std__vec__Vec_i32_.AddMovesForPackedDrops.before.mir.32bit?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -36,9 +36,6 @@ fn std::intrinsics::drop_in_place(_1: *mut std::vec::Vec<i32>) -> () {\n     bb7: {\n         _2 = &mut (*_1);                 // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n         _3 = const <std::vec::Vec<i32> as std::ops::Drop>::drop(move _2) -> [return: bb6, unwind: bb5]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-                                         // ty::Const\n-                                         // + ty: for<'r> fn(&'r mut std::vec::Vec<i32>) {<std::vec::Vec<i32> as std::ops::Drop>::drop}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n                                          // + literal: Const { ty: for<'r> fn(&'r mut std::vec::Vec<i32>) {<std::vec::Vec<i32> as std::ops::Drop>::drop}, val: Value(Scalar(<ZST>)) }"}, {"sha": "d843bef6a95bfe7e5b116158e7b416fa38c2cc63", "filename": "src/test/mir-opt/unusual_item_types.core.ptr-drop_in_place.std__vec__Vec_i32_.AddMovesForPackedDrops.before.mir.64bit", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.std__vec__Vec_i32_.AddMovesForPackedDrops.before.mir.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.std__vec__Vec_i32_.AddMovesForPackedDrops.before.mir.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.std__vec__Vec_i32_.AddMovesForPackedDrops.before.mir.64bit?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -36,9 +36,6 @@ fn std::intrinsics::drop_in_place(_1: *mut std::vec::Vec<i32>) -> () {\n     bb7: {\n         _2 = &mut (*_1);                 // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n         _3 = const <std::vec::Vec<i32> as std::ops::Drop>::drop(move _2) -> [return: bb6, unwind: bb5]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-                                         // ty::Const\n-                                         // + ty: for<'r> fn(&'r mut std::vec::Vec<i32>) {<std::vec::Vec<i32> as std::ops::Drop>::drop}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n                                          // + literal: Const { ty: for<'r> fn(&'r mut std::vec::Vec<i32>) {<std::vec::Vec<i32> as std::ops::Drop>::drop}, val: Value(Scalar(<ZST>)) }"}, {"sha": "6e1aec9f8ab311153643c59c945ab633b7811ab0", "filename": "src/test/mir-opt/while_storage.while_loop.PreCodegen.after.mir", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fwhile_storage.while_loop.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/633a2e31efb42d0a141bfbd634e67f218e819303/src%2Ftest%2Fmir-opt%2Fwhile_storage.while_loop.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile_storage.while_loop.PreCodegen.after.mir?ref=633a2e31efb42d0a141bfbd634e67f218e819303", "patch": "@@ -13,9 +13,6 @@ fn while_loop(_1: bool) -> () {\n         StorageLive(_3);                 // scope 0 at $DIR/while-storage.rs:10:20: 10:21\n         _3 = _1;                         // scope 0 at $DIR/while-storage.rs:10:20: 10:21\n         _2 = const get_bool(move _3) -> bb1; // scope 0 at $DIR/while-storage.rs:10:11: 10:22\n-                                         // ty::Const\n-                                         // + ty: fn(bool) -> bool {get_bool}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/while-storage.rs:10:11: 10:19\n                                          // + literal: Const { ty: fn(bool) -> bool {get_bool}, val: Value(Scalar(<ZST>)) }\n@@ -42,9 +39,6 @@ fn while_loop(_1: bool) -> () {\n         StorageLive(_5);                 // scope 0 at $DIR/while-storage.rs:11:21: 11:22\n         _5 = _1;                         // scope 0 at $DIR/while-storage.rs:11:21: 11:22\n         _4 = const get_bool(move _5) -> bb4; // scope 0 at $DIR/while-storage.rs:11:12: 11:23\n-                                         // ty::Const\n-                                         // + ty: fn(bool) -> bool {get_bool}\n-                                         // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n                                          // + span: $DIR/while-storage.rs:11:12: 11:20\n                                          // + literal: Const { ty: fn(bool) -> bool {get_bool}, val: Value(Scalar(<ZST>)) }"}]}