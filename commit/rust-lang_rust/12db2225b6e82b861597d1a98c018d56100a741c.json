{"sha": "12db2225b6e82b861597d1a98c018d56100a741c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyZGIyMjI1YjZlODJiODYxNTk3ZDFhOThjMDE4ZDU2MTAwYTc0MWM=", "commit": {"author": {"name": "Eric Arellano", "email": "ericarellano@me.com", "date": "2020-12-07T18:59:24Z"}, "committer": {"name": "Eric Arellano", "email": "ericarellano@me.com", "date": "2020-12-07T19:48:44Z"}, "message": "Dogfood 'str_split_once() with `compiler/`", "tree": {"sha": "12b5f1b8c85651b85cd98475295f01ad09ae1de1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12b5f1b8c85651b85cd98475295f01ad09ae1de1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12db2225b6e82b861597d1a98c018d56100a741c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12db2225b6e82b861597d1a98c018d56100a741c", "html_url": "https://github.com/rust-lang/rust/commit/12db2225b6e82b861597d1a98c018d56100a741c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12db2225b6e82b861597d1a98c018d56100a741c/comments", "author": {"login": "Eric-Arellano", "id": 14852634, "node_id": "MDQ6VXNlcjE0ODUyNjM0", "avatar_url": "https://avatars.githubusercontent.com/u/14852634?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Eric-Arellano", "html_url": "https://github.com/Eric-Arellano", "followers_url": "https://api.github.com/users/Eric-Arellano/followers", "following_url": "https://api.github.com/users/Eric-Arellano/following{/other_user}", "gists_url": "https://api.github.com/users/Eric-Arellano/gists{/gist_id}", "starred_url": "https://api.github.com/users/Eric-Arellano/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Eric-Arellano/subscriptions", "organizations_url": "https://api.github.com/users/Eric-Arellano/orgs", "repos_url": "https://api.github.com/users/Eric-Arellano/repos", "events_url": "https://api.github.com/users/Eric-Arellano/events{/privacy}", "received_events_url": "https://api.github.com/users/Eric-Arellano/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Eric-Arellano", "id": 14852634, "node_id": "MDQ6VXNlcjE0ODUyNjM0", "avatar_url": "https://avatars.githubusercontent.com/u/14852634?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Eric-Arellano", "html_url": "https://github.com/Eric-Arellano", "followers_url": "https://api.github.com/users/Eric-Arellano/followers", "following_url": "https://api.github.com/users/Eric-Arellano/following{/other_user}", "gists_url": "https://api.github.com/users/Eric-Arellano/gists{/gist_id}", "starred_url": "https://api.github.com/users/Eric-Arellano/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Eric-Arellano/subscriptions", "organizations_url": "https://api.github.com/users/Eric-Arellano/orgs", "repos_url": "https://api.github.com/users/Eric-Arellano/repos", "events_url": "https://api.github.com/users/Eric-Arellano/events{/privacy}", "received_events_url": "https://api.github.com/users/Eric-Arellano/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f6f2d681b39c5f95459cd09cb936b6ceb27cd82", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f6f2d681b39c5f95459cd09cb936b6ceb27cd82", "html_url": "https://github.com/rust-lang/rust/commit/0f6f2d681b39c5f95459cd09cb936b6ceb27cd82"}], "stats": {"total": 172, "additions": 83, "deletions": 89}, "files": [{"sha": "e6d822086f52180b0c6d36a93c044c7cdedd3108", "filename": "compiler/rustc_mir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/12db2225b6e82b861597d1a98c018d56100a741c/compiler%2Frustc_mir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12db2225b6e82b861597d1a98c018d56100a741c/compiler%2Frustc_mir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Flib.rs?ref=12db2225b6e82b861597d1a98c018d56100a741c", "patch": "@@ -28,6 +28,7 @@ Rust MIR: a lowered representation of Rust.\n #![feature(or_patterns)]\n #![feature(once_cell)]\n #![feature(control_flow_enum)]\n+#![feature(str_split_once)]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "1347656c23ea5b8c94775c8145b514acfb4ff540", "filename": "compiler/rustc_mir/src/transform/coverage/debug.rs", "status": "modified", "additions": 25, "deletions": 23, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/12db2225b6e82b861597d1a98c018d56100a741c/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12db2225b6e82b861597d1a98c018d56100a741c/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fdebug.rs?ref=12db2225b6e82b861597d1a98c018d56100a741c", "patch": "@@ -148,23 +148,19 @@ impl DebugOptions {\n \n         if let Ok(env_debug_options) = std::env::var(RUSTC_COVERAGE_DEBUG_OPTIONS) {\n             for setting_str in env_debug_options.replace(\" \", \"\").replace(\"-\", \"_\").split(',') {\n-                let mut setting = setting_str.splitn(2, '=');\n-                match setting.next() {\n-                    Some(option) if option == \"allow_unused_expressions\" => {\n-                        allow_unused_expressions = bool_option_val(option, setting.next());\n-                        debug!(\n-                            \"{} env option `allow_unused_expressions` is set to {}\",\n-                            RUSTC_COVERAGE_DEBUG_OPTIONS, allow_unused_expressions\n-                        );\n-                    }\n-                    Some(option) if option == \"counter_format\" => {\n-                        if let Some(strval) = setting.next() {\n-                            counter_format = counter_format_option_val(strval);\n-                            debug!(\n-                                \"{} env option `counter_format` is set to {:?}\",\n-                                RUSTC_COVERAGE_DEBUG_OPTIONS, counter_format\n-                            );\n-                        } else {\n+                let (option, value) = match setting_str.split_once('=') {\n+                    None => (setting_str, None),\n+                    Some((k, v)) => (k, Some(v)),\n+                };\n+                if option == \"allow_unused_expressions\" {\n+                    allow_unused_expressions = bool_option_val(option, value);\n+                    debug!(\n+                        \"{} env option `allow_unused_expressions` is set to {}\",\n+                        RUSTC_COVERAGE_DEBUG_OPTIONS, allow_unused_expressions\n+                    );\n+                } else if option == \"counter_format\" {\n+                    match value {\n+                        None => {\n                             bug!(\n                                 \"`{}` option in environment variable {} requires one or more \\\n                                 plus-separated choices (a non-empty subset of \\\n@@ -173,14 +169,20 @@ impl DebugOptions {\n                                 RUSTC_COVERAGE_DEBUG_OPTIONS\n                             );\n                         }\n-                    }\n-                    Some(\"\") => {}\n-                    Some(invalid) => bug!(\n+                        Some(val) => {\n+                            counter_format = counter_format_option_val(val);\n+                            debug!(\n+                                \"{} env option `counter_format` is set to {:?}\",\n+                                RUSTC_COVERAGE_DEBUG_OPTIONS, counter_format\n+                            );\n+                        }\n+                    };\n+                } else {\n+                    bug!(\n                         \"Unsupported setting `{}` in environment variable {}\",\n-                        invalid,\n+                        option,\n                         RUSTC_COVERAGE_DEBUG_OPTIONS\n-                    ),\n-                    None => {}\n+                    )\n                 }\n             }\n         }"}, {"sha": "54abb65dc38834d31879ef112fe237745798415b", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 50, "deletions": 59, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/12db2225b6e82b861597d1a98c018d56100a741c/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12db2225b6e82b861597d1a98c018d56100a741c/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=12db2225b6e82b861597d1a98c018d56100a741c", "patch": "@@ -1296,8 +1296,10 @@ fn parse_output_types(\n     if !debugging_opts.parse_only {\n         for list in matches.opt_strs(\"emit\") {\n             for output_type in list.split(',') {\n-                let mut parts = output_type.splitn(2, '=');\n-                let shorthand = parts.next().unwrap();\n+                let (shorthand, path) = match output_type.split_once('=') {\n+                    None => (output_type, None),\n+                    Some((shorthand, path)) => (shorthand, Some(PathBuf::from(path))),\n+                };\n                 let output_type = OutputType::from_shorthand(shorthand).unwrap_or_else(|| {\n                     early_error(\n                         error_format,\n@@ -1308,7 +1310,6 @@ fn parse_output_types(\n                         ),\n                     )\n                 });\n-                let path = parts.next().map(PathBuf::from);\n                 output_types.insert(output_type, path);\n             }\n         }\n@@ -1452,11 +1453,10 @@ fn parse_opt_level(\n     let max_c = matches\n         .opt_strs_pos(\"C\")\n         .into_iter()\n-        .flat_map(\n-            |(i, s)| {\n-                if let Some(\"opt-level\") = s.splitn(2, '=').next() { Some(i) } else { None }\n-            },\n-        )\n+        .flat_map(|(i, s)| {\n+            // NB: This can match a string without `=`.\n+            if let Some(\"opt-level\") = s.splitn(2, '=').next() { Some(i) } else { None }\n+        })\n         .max();\n     if max_o > max_c {\n         OptLevel::Default\n@@ -1491,11 +1491,10 @@ fn select_debuginfo(\n     let max_c = matches\n         .opt_strs_pos(\"C\")\n         .into_iter()\n-        .flat_map(\n-            |(i, s)| {\n-                if let Some(\"debuginfo\") = s.splitn(2, '=').next() { Some(i) } else { None }\n-            },\n-        )\n+        .flat_map(|(i, s)| {\n+            // NB: This can match a string without `=`.\n+            if let Some(\"debuginfo\") = s.splitn(2, '=').next() { Some(i) } else { None }\n+        })\n         .max();\n     if max_g > max_c {\n         DebugInfo::Full\n@@ -1528,23 +1527,26 @@ fn parse_libs(\n         .map(|s| {\n             // Parse string of the form \"[KIND=]lib[:new_name]\",\n             // where KIND is one of \"dylib\", \"framework\", \"static\".\n-            let mut parts = s.splitn(2, '=');\n-            let kind = parts.next().unwrap();\n-            let (name, kind) = match (parts.next(), kind) {\n-                (None, name) => (name, NativeLibKind::Unspecified),\n-                (Some(name), \"dylib\") => (name, NativeLibKind::Dylib),\n-                (Some(name), \"framework\") => (name, NativeLibKind::Framework),\n-                (Some(name), \"static\") => (name, NativeLibKind::StaticBundle),\n-                (Some(name), \"static-nobundle\") => (name, NativeLibKind::StaticNoBundle),\n-                (_, s) => {\n-                    early_error(\n-                        error_format,\n-                        &format!(\n-                            \"unknown library kind `{}`, expected \\\n-                             one of dylib, framework, or static\",\n-                            s\n-                        ),\n-                    );\n+            let (name, kind) = match s.split_once('=') {\n+                None => (s, NativeLibKind::Unspecified),\n+                Some((kind, name)) => {\n+                    let kind = match kind {\n+                        \"dylib\" => NativeLibKind::Dylib,\n+                        \"framework\" => NativeLibKind::Framework,\n+                        \"static\" => NativeLibKind::StaticBundle,\n+                        \"static-nobundle\" => NativeLibKind::StaticNoBundle,\n+                        s => {\n+                            early_error(\n+                                error_format,\n+                                &format!(\n+                                    \"unknown library kind `{}`, expected \\\n+                                     one of dylib, framework, or static\",\n+                                    s\n+                                ),\n+                            );\n+                        }\n+                    };\n+                    (name.to_string(), kind)\n                 }\n             };\n             if kind == NativeLibKind::StaticNoBundle\n@@ -1556,10 +1558,11 @@ fn parse_libs(\n                      accepted on the nightly compiler\",\n                 );\n             }\n-            let mut name_parts = name.splitn(2, ':');\n-            let name = name_parts.next().unwrap();\n-            let new_name = name_parts.next();\n-            (name.to_owned(), new_name.map(|n| n.to_owned()), kind)\n+            let (name, new_name) = match name.split_once(':') {\n+                None => (name, None),\n+                Some((name, new_name)) => (name.to_string(), Some(new_name.to_owned())),\n+            };\n+            (name, new_name, kind)\n         })\n         .collect()\n }\n@@ -1580,20 +1583,13 @@ pub fn parse_externs(\n     let is_unstable_enabled = debugging_opts.unstable_options;\n     let mut externs: BTreeMap<String, ExternEntry> = BTreeMap::new();\n     for arg in matches.opt_strs(\"extern\") {\n-        let mut parts = arg.splitn(2, '=');\n-        let name = parts\n-            .next()\n-            .unwrap_or_else(|| early_error(error_format, \"--extern value must not be empty\"));\n-        let path = parts.next().map(|s| s.to_string());\n-\n-        let mut name_parts = name.splitn(2, ':');\n-        let first_part = name_parts.next();\n-        let second_part = name_parts.next();\n-        let (options, name) = match (first_part, second_part) {\n-            (Some(opts), Some(name)) => (Some(opts), name),\n-            (Some(name), None) => (None, name),\n-            (None, None) => early_error(error_format, \"--extern name must not be empty\"),\n-            _ => unreachable!(),\n+        let (name, path) = match arg.split_once('=') {\n+            None => (arg, None),\n+            Some((name, path)) => (name.to_string(), Some(path.to_string())),\n+        };\n+        let (options, name) = match name.split_once(':') {\n+            None => (None, name),\n+            Some((opts, name)) => (Some(opts), name.to_string()),\n         };\n \n         let entry = externs.entry(name.to_owned());\n@@ -1682,17 +1678,12 @@ fn parse_remap_path_prefix(\n     matches\n         .opt_strs(\"remap-path-prefix\")\n         .into_iter()\n-        .map(|remap| {\n-            let mut parts = remap.rsplitn(2, '='); // reverse iterator\n-            let to = parts.next();\n-            let from = parts.next();\n-            match (from, to) {\n-                (Some(from), Some(to)) => (PathBuf::from(from), PathBuf::from(to)),\n-                _ => early_error(\n-                    error_format,\n-                    \"--remap-path-prefix must contain '=' between FROM and TO\",\n-                ),\n-            }\n+        .map(|remap| match remap.rsplit_once('=') {\n+            None => early_error(\n+                error_format,\n+                \"--remap-path-prefix must contain '=' between FROM and TO\",\n+            ),\n+            Some((from, to)) => (PathBuf::from(from), PathBuf::from(to)),\n         })\n         .collect()\n }"}, {"sha": "36bf8634c6eeceff97229d50152f2ffc33ae53ff", "filename": "compiler/rustc_session/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/12db2225b6e82b861597d1a98c018d56100a741c/compiler%2Frustc_session%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12db2225b6e82b861597d1a98c018d56100a741c/compiler%2Frustc_session%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Flib.rs?ref=12db2225b6e82b861597d1a98c018d56100a741c", "patch": "@@ -1,6 +1,7 @@\n #![feature(crate_visibility_modifier)]\n #![feature(once_cell)]\n #![feature(or_patterns)]\n+#![feature(str_split_once)]\n \n #[macro_use]\n extern crate bitflags;"}, {"sha": "74578f2dc179fee60fed90bac8c82c53afb13df3", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/12db2225b6e82b861597d1a98c018d56100a741c/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12db2225b6e82b861597d1a98c018d56100a741c/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=12db2225b6e82b861597d1a98c018d56100a741c", "patch": "@@ -179,9 +179,10 @@ macro_rules! options {\n     {\n         let mut op = $defaultfn();\n         for option in matches.opt_strs($prefix) {\n-            let mut iter = option.splitn(2, '=');\n-            let key = iter.next().unwrap();\n-            let value = iter.next();\n+            let (key, value) = match option.split_once('=') {\n+                None => (option, None),\n+                Some((k, v)) => (k.to_string(), Some(v)),\n+            };\n             let option_to_lookup = key.replace(\"-\", \"_\");\n             let mut found = false;\n             for &(candidate, setter, type_desc, _) in $stat {"}, {"sha": "1ad57582ebafbbce87fb1a5e126b057dc791e260", "filename": "compiler/rustc_target/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/12db2225b6e82b861597d1a98c018d56100a741c/compiler%2Frustc_target%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12db2225b6e82b861597d1a98c018d56100a741c/compiler%2Frustc_target%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Flib.rs?ref=12db2225b6e82b861597d1a98c018d56100a741c", "patch": "@@ -15,6 +15,7 @@\n #![feature(never_type)]\n #![feature(associated_type_bounds)]\n #![feature(exhaustive_patterns)]\n+#![feature(str_split_once)]\n \n #[macro_use]\n extern crate rustc_macros;"}, {"sha": "88422395216437fba0678fcf8dc7d06df5171b8d", "filename": "compiler/rustc_target/src/spec/apple_base.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/12db2225b6e82b861597d1a98c018d56100a741c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12db2225b6e82b861597d1a98c018d56100a741c/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs?ref=12db2225b6e82b861597d1a98c018d56100a741c", "patch": "@@ -54,10 +54,7 @@ fn macos_deployment_target() -> (u32, u32) {\n     let deployment_target = env::var(\"MACOSX_DEPLOYMENT_TARGET\").ok();\n     let version = deployment_target\n         .as_ref()\n-        .and_then(|s| {\n-            let mut i = s.splitn(2, '.');\n-            i.next().and_then(|a| i.next().map(|b| (a, b)))\n-        })\n+        .and_then(|s| s.split_once('.'))\n         .and_then(|(a, b)| a.parse::<u32>().and_then(|a| b.parse::<u32>().map(|b| (a, b))).ok());\n \n     version.unwrap_or((10, 7))"}]}