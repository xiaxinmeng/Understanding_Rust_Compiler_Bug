{"sha": "ea188e9d21cd88222be1972f18cc50da97173607", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhMTg4ZTlkMjFjZDg4MjIyYmUxOTcyZjE4Y2M1MGRhOTcxNzM2MDc=", "commit": {"author": {"name": "Yuki Okushi", "email": "yuki.okushi@huawei.com", "date": "2021-06-13T22:04:56Z"}, "committer": {"name": "Yuki Okushi", "email": "yuki.okushi@huawei.com", "date": "2021-06-13T22:42:14Z"}, "message": "Permit zero non-zero-field on transparent types", "tree": {"sha": "7cd235cf52426150438453a965feeea51bfdd509", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7cd235cf52426150438453a965feeea51bfdd509"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea188e9d21cd88222be1972f18cc50da97173607", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEx6scKn6IIf/+FpBu2rpbBylhwYoFAmDGicYACgkQ2rpbBylh\nwYpZcxAAmPB2xpmJ6/vgLj30v0wMVBOu4J9ibm1I5ETSb2aTXWVtz/xNjJMOdLAM\nLjjeY1T1dJwXRwk8DUiozjJdfzEJXi97mst8dd28TO9FSBnRWcuIPGWMMPZ9ZgfK\nriCIxkGQ/RK++RkxjRIUKO2t4dFvBeX4C/nXIGIA/PZEMXfK33eHVkTwRBC9ZAU4\no32y4c1LKaQKH5pPTrs7oHZn6sP/0MS8Yj5x8fUqO/7cVS5+kBXOZV2fL/mO/w6x\nAY0gKtnVok70Qycnez2nrCwxxNnGmn0fbzVgIseW7pVK/0Q6cwzlkrkLI7X8RcPo\ntTvwWkNkHPiTbbcA4cgtvFP9qKNqvPc+bNRXrI2MFVlliG9MZ776ua8y8jLPmWmF\n3UtehzBp+o2/lXfS9P/y2GXr4HDTYBAHBunYlio84mW9ltjlnZJzhOoeQyy5moSi\naCwtLjae2fqFP8ZXU2P2m4xRyylICAVXNtV7bOPualLaPzXifLhzODAHQCi7IVI8\nDEPPPt4m1yiyzw2z6jD3r80N6D2uVJ8APUX6ktfifPbI22TOCsI9eNbu1JLxT3zK\nsSY/18c0+6RzI1efgzhuB4nrhQrQotsgiHRp0CPqtmUmDG3g1Gu8pS/U4W91b/kX\njgsSTarmlr61qv1ir9wOub4cK1Aq6Y3TGzdZp0R2Cz6CLSQnXCY=\n=HHgU\n-----END PGP SIGNATURE-----", "payload": "tree 7cd235cf52426150438453a965feeea51bfdd509\nparent fb3ea63d9b4c3e9bb90d4250b870faaffb9c8fd2\nauthor Yuki Okushi <yuki.okushi@huawei.com> 1623621896 +0900\ncommitter Yuki Okushi <yuki.okushi@huawei.com> 1623624134 +0900\n\nPermit zero non-zero-field on transparent types\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea188e9d21cd88222be1972f18cc50da97173607", "html_url": "https://github.com/rust-lang/rust/commit/ea188e9d21cd88222be1972f18cc50da97173607", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea188e9d21cd88222be1972f18cc50da97173607/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb3ea63d9b4c3e9bb90d4250b870faaffb9c8fd2", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb3ea63d9b4c3e9bb90d4250b870faaffb9c8fd2", "html_url": "https://github.com/rust-lang/rust/commit/fb3ea63d9b4c3e9bb90d4250b870faaffb9c8fd2"}], "stats": {"total": 122, "additions": 46, "deletions": 76}, "files": [{"sha": "77644ea1c3c95046ced8fbe8bf0f23263b2f3f32", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea188e9d21cd88222be1972f18cc50da97173607/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea188e9d21cd88222be1972f18cc50da97173607/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=ea188e9d21cd88222be1972f18cc50da97173607", "patch": "@@ -1382,7 +1382,7 @@ pub(super) fn check_transparent<'tcx>(tcx: TyCtxt<'tcx>, sp: Span, adt: &'tcx ty\n     let non_zst_fields =\n         field_infos.clone().filter_map(|(span, zst, _align1)| if !zst { Some(span) } else { None });\n     let non_zst_count = non_zst_fields.clone().count();\n-    if non_zst_count != 1 {\n+    if non_zst_count >= 2 {\n         bad_non_zero_sized_fields(tcx, adt, non_zst_count, non_zst_fields, sp);\n     }\n     for (span, zst, align1) in field_infos {"}, {"sha": "72d94c3a9c9354d8f86f11dd63f958324dab4928", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ea188e9d21cd88222be1972f18cc50da97173607/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea188e9d21cd88222be1972f18cc50da97173607/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=ea188e9d21cd88222be1972f18cc50da97173607", "patch": "@@ -1029,7 +1029,7 @@ fn suggestion_signature(assoc: &ty::AssocItem, tcx: TyCtxt<'_>) -> String {\n     }\n }\n \n-/// Emit an error when encountering more or less than one variant in a transparent enum.\n+/// Emit an error when encountering two or more variants in a transparent enum.\n fn bad_variant_count<'tcx>(tcx: TyCtxt<'tcx>, adt: &'tcx ty::AdtDef, sp: Span, did: DefId) {\n     let variant_spans: Vec<_> = adt\n         .variants\n@@ -1048,7 +1048,7 @@ fn bad_variant_count<'tcx>(tcx: TyCtxt<'tcx>, adt: &'tcx ty::AdtDef, sp: Span, d\n     err.emit();\n }\n \n-/// Emit an error when encountering more or less than one non-zero-sized field in a transparent\n+/// Emit an error when encountering two or more non-zero-sized fields in a transparent\n /// enum.\n fn bad_non_zero_sized_fields<'tcx>(\n     tcx: TyCtxt<'tcx>,\n@@ -1057,7 +1057,7 @@ fn bad_non_zero_sized_fields<'tcx>(\n     field_spans: impl Iterator<Item = Span>,\n     sp: Span,\n ) {\n-    let msg = format!(\"needs exactly one non-zero-sized field, but has {}\", field_count);\n+    let msg = format!(\"needs at most one non-zero-sized field, but has {}\", field_count);\n     let mut err = struct_span_err!(\n         tcx.sess,\n         sp,"}, {"sha": "8c9d1639c0a51ffc965388a2204fdf14dc4fd1f6", "filename": "src/test/ui/repr/repr-transparent.rs", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ea188e9d21cd88222be1972f18cc50da97173607/src%2Ftest%2Fui%2Frepr%2Frepr-transparent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea188e9d21cd88222be1972f18cc50da97173607/src%2Ftest%2Fui%2Frepr%2Frepr-transparent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Frepr-transparent.rs?ref=ea188e9d21cd88222be1972f18cc50da97173607", "patch": "@@ -8,27 +8,29 @@\n use std::marker::PhantomData;\n \n #[repr(transparent)]\n-struct NoFields; //~ ERROR needs exactly one non-zero-sized field\n+struct NoFields;\n \n #[repr(transparent)]\n-struct ContainsOnlyZst(()); //~ ERROR needs exactly one non-zero-sized field\n+struct ContainsOnlyZst(());\n \n #[repr(transparent)]\n-struct ContainsOnlyZstArray([bool; 0]); //~ ERROR needs exactly one non-zero-sized field\n+struct ContainsOnlyZstArray([bool; 0]);\n \n #[repr(transparent)]\n struct ContainsMultipleZst(PhantomData<*const i32>, NoFields);\n-//~^ ERROR needs exactly one non-zero-sized field\n \n #[repr(transparent)]\n-struct MultipleNonZst(u8, u8); //~ ERROR needs exactly one non-zero-sized field\n+struct ContainsZstAndNonZst((), [i32; 2]);\n+\n+#[repr(transparent)]\n+struct MultipleNonZst(u8, u8); //~ ERROR needs at most one non-zero-sized field\n \n trait Mirror { type It: ?Sized; }\n impl<T: ?Sized> Mirror for T { type It = Self; }\n \n #[repr(transparent)]\n pub struct StructWithProjection(f32, <f32 as Mirror>::It);\n-//~^ ERROR needs exactly one non-zero-sized field\n+//~^ ERROR needs at most one non-zero-sized field\n \n #[repr(transparent)]\n struct NontrivialAlignZst(u32, [u16; 0]); //~ ERROR alignment larger than 1\n@@ -40,22 +42,26 @@ struct ZstAlign32<T>(PhantomData<T>);\n struct GenericAlign<T>(ZstAlign32<T>, u32); //~ ERROR alignment larger than 1\n \n #[repr(transparent)] //~ ERROR unsupported representation for zero-variant enum\n-enum Void {}\n-//~^ ERROR transparent enum needs exactly one variant, but has 0\n+enum Void {} //~ ERROR transparent enum needs exactly one variant, but has 0\n \n #[repr(transparent)]\n-enum FieldlessEnum { //~ ERROR transparent enum needs exactly one non-zero-sized field, but has 0\n+enum FieldlessEnum {\n     Foo,\n }\n \n+#[repr(transparent)]\n+enum UnitFieldEnum {\n+    Foo(()),\n+}\n+\n #[repr(transparent)]\n enum TooManyFieldsEnum {\n     Foo(u32, String),\n }\n-//~^^^ ERROR transparent enum needs exactly one non-zero-sized field, but has 2\n+//~^^^ ERROR transparent enum needs at most one non-zero-sized field, but has 2\n \n #[repr(transparent)]\n-enum TooManyVariants { //~ ERROR transparent enum needs exactly one variant, but has 2\n+enum MultipleVariants { //~ ERROR transparent enum needs exactly one variant, but has 2\n     Foo(String),\n     Bar,\n }\n@@ -71,12 +77,12 @@ enum GenericAlignEnum<T> {\n }\n \n #[repr(transparent)]\n-union UnitUnion { //~ ERROR transparent union needs exactly one non-zero-sized field, but has 0\n+union UnitUnion {\n     u: (),\n }\n \n #[repr(transparent)]\n-union TooManyFields { //~ ERROR transparent union needs exactly one non-zero-sized field, but has 2\n+union TooManyFields { //~ ERROR transparent union needs at most one non-zero-sized field, but has 2\n     u: u32,\n     s: i32\n }"}, {"sha": "001a181881f14cf5775fc3b9e0b73c89e0b86e8b", "filename": "src/test/ui/repr/repr-transparent.stderr", "status": "modified", "additions": 23, "deletions": 59, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/ea188e9d21cd88222be1972f18cc50da97173607/src%2Ftest%2Fui%2Frepr%2Frepr-transparent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea188e9d21cd88222be1972f18cc50da97173607/src%2Ftest%2Fui%2Frepr%2Frepr-transparent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Frepr-transparent.stderr?ref=ea188e9d21cd88222be1972f18cc50da97173607", "patch": "@@ -1,128 +1,92 @@\n-error[E0690]: transparent struct needs exactly one non-zero-sized field, but has 0\n-  --> $DIR/repr-transparent.rs:11:1\n-   |\n-LL | struct NoFields;\n-   | ^^^^^^^^^^^^^^^^ needs exactly one non-zero-sized field, but has 0\n-\n-error[E0690]: transparent struct needs exactly one non-zero-sized field, but has 0\n-  --> $DIR/repr-transparent.rs:14:1\n-   |\n-LL | struct ContainsOnlyZst(());\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ needs exactly one non-zero-sized field, but has 0\n-\n-error[E0690]: transparent struct needs exactly one non-zero-sized field, but has 0\n-  --> $DIR/repr-transparent.rs:17:1\n-   |\n-LL | struct ContainsOnlyZstArray([bool; 0]);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ needs exactly one non-zero-sized field, but has 0\n-\n-error[E0690]: transparent struct needs exactly one non-zero-sized field, but has 0\n-  --> $DIR/repr-transparent.rs:20:1\n-   |\n-LL | struct ContainsMultipleZst(PhantomData<*const i32>, NoFields);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ needs exactly one non-zero-sized field, but has 0\n-\n-error[E0690]: transparent struct needs exactly one non-zero-sized field, but has 2\n-  --> $DIR/repr-transparent.rs:24:1\n+error[E0690]: transparent struct needs at most one non-zero-sized field, but has 2\n+  --> $DIR/repr-transparent.rs:26:1\n    |\n LL | struct MultipleNonZst(u8, u8);\n    | ^^^^^^^^^^^^^^^^^^^^^^--^^--^^\n    | |                     |   |\n    | |                     |   this field is non-zero-sized\n    | |                     this field is non-zero-sized\n-   | needs exactly one non-zero-sized field, but has 2\n+   | needs at most one non-zero-sized field, but has 2\n \n-error[E0690]: transparent struct needs exactly one non-zero-sized field, but has 2\n-  --> $DIR/repr-transparent.rs:30:1\n+error[E0690]: transparent struct needs at most one non-zero-sized field, but has 2\n+  --> $DIR/repr-transparent.rs:32:1\n    |\n LL | pub struct StructWithProjection(f32, <f32 as Mirror>::It);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---^^-------------------^^\n    | |                               |    |\n    | |                               |    this field is non-zero-sized\n    | |                               this field is non-zero-sized\n-   | needs exactly one non-zero-sized field, but has 2\n+   | needs at most one non-zero-sized field, but has 2\n \n error[E0691]: zero-sized field in transparent struct has alignment larger than 1\n-  --> $DIR/repr-transparent.rs:34:32\n+  --> $DIR/repr-transparent.rs:36:32\n    |\n LL | struct NontrivialAlignZst(u32, [u16; 0]);\n    |                                ^^^^^^^^ has alignment larger than 1\n \n error[E0691]: zero-sized field in transparent struct has alignment larger than 1\n-  --> $DIR/repr-transparent.rs:40:24\n+  --> $DIR/repr-transparent.rs:42:24\n    |\n LL | struct GenericAlign<T>(ZstAlign32<T>, u32);\n    |                        ^^^^^^^^^^^^^ has alignment larger than 1\n \n error[E0084]: unsupported representation for zero-variant enum\n-  --> $DIR/repr-transparent.rs:42:1\n+  --> $DIR/repr-transparent.rs:44:1\n    |\n LL | #[repr(transparent)]\n    | ^^^^^^^^^^^^^^^^^^^^\n LL | enum Void {}\n    | ------------ zero-variant enum\n \n error[E0731]: transparent enum needs exactly one variant, but has 0\n-  --> $DIR/repr-transparent.rs:43:1\n+  --> $DIR/repr-transparent.rs:45:1\n    |\n LL | enum Void {}\n    | ^^^^^^^^^ needs exactly one variant, but has 0\n \n-error[E0690]: the variant of a transparent enum needs exactly one non-zero-sized field, but has 0\n-  --> $DIR/repr-transparent.rs:47:1\n-   |\n-LL | enum FieldlessEnum {\n-   | ^^^^^^^^^^^^^^^^^^ needs exactly one non-zero-sized field, but has 0\n-\n-error[E0690]: the variant of a transparent enum needs exactly one non-zero-sized field, but has 2\n-  --> $DIR/repr-transparent.rs:52:1\n+error[E0690]: the variant of a transparent enum needs at most one non-zero-sized field, but has 2\n+  --> $DIR/repr-transparent.rs:58:1\n    |\n LL | enum TooManyFieldsEnum {\n-   | ^^^^^^^^^^^^^^^^^^^^^^ needs exactly one non-zero-sized field, but has 2\n+   | ^^^^^^^^^^^^^^^^^^^^^^ needs at most one non-zero-sized field, but has 2\n LL |     Foo(u32, String),\n    |         ---  ------ this field is non-zero-sized\n    |         |\n    |         this field is non-zero-sized\n \n error[E0731]: transparent enum needs exactly one variant, but has 2\n-  --> $DIR/repr-transparent.rs:58:1\n+  --> $DIR/repr-transparent.rs:64:1\n    |\n-LL | enum TooManyVariants {\n-   | ^^^^^^^^^^^^^^^^^^^^ needs exactly one variant, but has 2\n+LL | enum MultipleVariants {\n+   | ^^^^^^^^^^^^^^^^^^^^^ needs exactly one variant, but has 2\n LL |     Foo(String),\n    |     -----------\n LL |     Bar,\n-   |     --- too many variants in `TooManyVariants`\n+   |     --- too many variants in `MultipleVariants`\n \n error[E0691]: zero-sized field in transparent enum has alignment larger than 1\n-  --> $DIR/repr-transparent.rs:65:14\n+  --> $DIR/repr-transparent.rs:71:14\n    |\n LL |     Foo(u32, [u16; 0]),\n    |              ^^^^^^^^ has alignment larger than 1\n \n error[E0691]: zero-sized field in transparent enum has alignment larger than 1\n-  --> $DIR/repr-transparent.rs:70:11\n+  --> $DIR/repr-transparent.rs:76:11\n    |\n LL |     Foo { bar: ZstAlign32<T>, baz: u32 }\n    |           ^^^^^^^^^^^^^^^^^^ has alignment larger than 1\n \n-error[E0690]: transparent union needs exactly one non-zero-sized field, but has 0\n-  --> $DIR/repr-transparent.rs:74:1\n-   |\n-LL | union UnitUnion {\n-   | ^^^^^^^^^^^^^^^ needs exactly one non-zero-sized field, but has 0\n-\n-error[E0690]: transparent union needs exactly one non-zero-sized field, but has 2\n-  --> $DIR/repr-transparent.rs:79:1\n+error[E0690]: transparent union needs at most one non-zero-sized field, but has 2\n+  --> $DIR/repr-transparent.rs:85:1\n    |\n LL | union TooManyFields {\n-   | ^^^^^^^^^^^^^^^^^^^ needs exactly one non-zero-sized field, but has 2\n+   | ^^^^^^^^^^^^^^^^^^^ needs at most one non-zero-sized field, but has 2\n LL |     u: u32,\n    |     ------ this field is non-zero-sized\n LL |     s: i32\n    |     ------ this field is non-zero-sized\n \n-error: aborting due to 17 previous errors\n+error: aborting due to 11 previous errors\n \n Some errors have detailed explanations: E0084, E0690, E0691, E0731.\n For more information about an error, try `rustc --explain E0084`."}]}