{"sha": "563d58559400c4e5b67377bd10f40fee7695ea46", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2M2Q1ODU1OTQwMGM0ZTViNjczNzdiZDEwZjQwZmVlNzY5NWVhNDY=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-06-25T14:47:21Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-06-25T14:52:15Z"}, "message": "Use IdRange for variants", "tree": {"sha": "9840f7e43d1c8f512e57606d6420529c26921263", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9840f7e43d1c8f512e57606d6420529c26921263"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/563d58559400c4e5b67377bd10f40fee7695ea46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/563d58559400c4e5b67377bd10f40fee7695ea46", "html_url": "https://github.com/rust-lang/rust/commit/563d58559400c4e5b67377bd10f40fee7695ea46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/563d58559400c4e5b67377bd10f40fee7695ea46/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b06214d16408e0b699f9d6051ba244e5fe766578", "url": "https://api.github.com/repos/rust-lang/rust/commits/b06214d16408e0b699f9d6051ba244e5fe766578", "html_url": "https://github.com/rust-lang/rust/commit/b06214d16408e0b699f9d6051ba244e5fe766578"}], "stats": {"total": 38, "additions": 29, "deletions": 9}, "files": [{"sha": "3e603bd55841e5c6a0a05ee59971fcb42913fdb7", "filename": "crates/ra_hir_def/src/item_tree.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/563d58559400c4e5b67377bd10f40fee7695ea46/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/563d58559400c4e5b67377bd10f40fee7695ea46/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs?ref=563d58559400c4e5b67377bd10f40fee7695ea46", "patch": "@@ -5,6 +5,7 @@ mod lower;\n mod tests;\n \n use std::{\n+    any::type_name,\n     fmt::{self, Debug},\n     hash::{Hash, Hasher},\n     marker::PhantomData,\n@@ -540,7 +541,7 @@ pub struct Enum {\n     pub name: Name,\n     pub visibility: RawVisibilityId,\n     pub generic_params: GenericParamsId,\n-    pub variants: Range<Idx<Variant>>,\n+    pub variants: IdRange<Variant>,\n     pub ast_id: FileAstId<ast::EnumDef>,\n }\n \n@@ -698,7 +699,6 @@ pub struct Variant {\n     pub fields: Fields,\n }\n \n-#[derive(Debug, Clone, PartialEq, Eq)]\n pub struct IdRange<T> {\n     range: Range<u32>,\n     _p: PhantomData<T>,\n@@ -717,6 +717,26 @@ impl<T> Iterator for IdRange<T> {\n     }\n }\n \n+impl<T> fmt::Debug for IdRange<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.debug_tuple(&format!(\"IdRange::<{}>\", type_name::<T>())).field(&self.range).finish()\n+    }\n+}\n+\n+impl<T> Clone for IdRange<T> {\n+    fn clone(&self) -> Self {\n+        Self { range: self.range.clone(), _p: PhantomData }\n+    }\n+}\n+\n+impl<T> PartialEq for IdRange<T> {\n+    fn eq(&self, other: &Self) -> bool {\n+        self.range == other.range\n+    }\n+}\n+\n+impl<T> Eq for IdRange<T> {}\n+\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub enum Fields {\n     Record(IdRange<Field>),"}, {"sha": "5149dd141ff3d39ce784a6855b8474fec135ab8d", "filename": "crates/ra_hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/563d58559400c4e5b67377bd10f40fee7695ea46/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/563d58559400c4e5b67377bd10f40fee7695ea46/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=563d58559400c4e5b67377bd10f40fee7695ea46", "patch": "@@ -257,14 +257,14 @@ impl Ctx {\n         let generic_params = self.lower_generic_params(GenericsOwner::Enum, enum_);\n         let variants = match &enum_.variant_list() {\n             Some(variant_list) => self.lower_variants(variant_list),\n-            None => self.next_variant_idx()..self.next_variant_idx(),\n+            None => IdRange::new(self.next_variant_idx()..self.next_variant_idx()),\n         };\n         let ast_id = self.source_ast_id_map.ast_id(enum_);\n         let res = Enum { name, visibility, generic_params, variants, ast_id };\n         Some(id(self.data().enums.alloc(res)))\n     }\n \n-    fn lower_variants(&mut self, variants: &ast::EnumVariantList) -> Range<Idx<Variant>> {\n+    fn lower_variants(&mut self, variants: &ast::EnumVariantList) -> IdRange<Variant> {\n         let start = self.next_variant_idx();\n         for variant in variants.variants() {\n             if let Some(data) = self.lower_variant(&variant) {\n@@ -273,7 +273,7 @@ impl Ctx {\n             }\n         }\n         let end = self.next_variant_idx();\n-        start..end\n+        IdRange::new(start..end)\n     }\n \n     fn lower_variant(&mut self, variant: &ast::EnumVariant) -> Option<Variant> {"}, {"sha": "08559fb92bddf067ae6c87d4acce1de54dbb6464", "filename": "crates/ra_hir_def/src/item_tree/tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/563d58559400c4e5b67377bd10f40fee7695ea46/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/563d58559400c4e5b67377bd10f40fee7695ea46/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs?ref=563d58559400c4e5b67377bd10f40fee7695ea46", "patch": "@@ -237,13 +237,13 @@ Trait { name: Name(Text(\"Tr\")), visibility: RawVisibilityId(\"pub(self)\"), generi\n #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"struct0\"))] }, input: None }]) }]\n Struct { name: Name(Text(\"Struct0\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(1), fields: Unit, ast_id: FileAstId::<ra_syntax::ast::generated::nodes::StructDef>(3), kind: Unit }\n #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"struct1\"))] }, input: None }]) }]\n-Struct { name: Name(Text(\"Struct1\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(2), fields: Tuple(FieldIds { range: 0..1 }), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::StructDef>(4), kind: Tuple }\n+Struct { name: Name(Text(\"Struct1\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(2), fields: Tuple(IdRange::<ra_hir_def::item_tree::Field>(0..1)), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::StructDef>(4), kind: Tuple }\n #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"struct2\"))] }, input: None }]) }]\n-Struct { name: Name(Text(\"Struct2\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(3), fields: Record(FieldIds { range: 1..2 }), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::StructDef>(5), kind: Record }\n+Struct { name: Name(Text(\"Struct2\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(3), fields: Record(IdRange::<ra_hir_def::item_tree::Field>(1..2)), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::StructDef>(5), kind: Record }\n #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"en\"))] }, input: None }]) }]\n-Enum { name: Name(Text(\"En\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), variants: Idx::<Variant>(0)..Idx::<Variant>(1), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::EnumDef>(6) }\n+Enum { name: Name(Text(\"En\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), variants: IdRange::<ra_hir_def::item_tree::Variant>(0..1), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::EnumDef>(6) }\n #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"un\"))] }, input: None }]) }]\n-Union { name: Name(Text(\"Un\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), fields: Record(FieldIds { range: 3..4 }), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::UnionDef>(7) }\n+Union { name: Name(Text(\"Un\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), fields: Record(IdRange::<ra_hir_def::item_tree::Field>(3..4)), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::UnionDef>(7) }\n     \"###);\n }\n "}]}