{"sha": "1064003f8c39e138c3fefa9104fd74ffe81df3e8", "node_id": "C_kwDOAAsO6NoAKDEwNjQwMDNmOGMzOWUxMzhjM2ZlZmE5MTA0ZmQ3NGZmZTgxZGYzZTg", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2022-01-06T02:12:26Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2022-01-06T19:48:47Z"}, "message": "Use fragment instead of side channel for prim. assoc. items\n\nI had the epiphany that now that fragments are \"semantic\" -- rather than\njust strings -- they fill the role that used to be handled by the side\nchannel. I think I may be able to get rid of the other uses of the side\nchannel using this technique too.", "tree": {"sha": "d598dc355eff418b1de4ef2bb93145e4caef23c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d598dc355eff418b1de4ef2bb93145e4caef23c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1064003f8c39e138c3fefa9104fd74ffe81df3e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1064003f8c39e138c3fefa9104fd74ffe81df3e8", "html_url": "https://github.com/rust-lang/rust/commit/1064003f8c39e138c3fefa9104fd74ffe81df3e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1064003f8c39e138c3fefa9104fd74ffe81df3e8/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e3132adb375480aebff297217e3125165cc56b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e3132adb375480aebff297217e3125165cc56b2", "html_url": "https://github.com/rust-lang/rust/commit/7e3132adb375480aebff297217e3125165cc56b2"}], "stats": {"total": 4, "additions": 3, "deletions": 1}, "files": [{"sha": "fe390f6354c6fd7c68b36addcb02a52a69ebad16", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1064003f8c39e138c3fefa9104fd74ffe81df3e8/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1064003f8c39e138c3fefa9104fd74ffe81df3e8/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=1064003f8c39e138c3fefa9104fd74ffe81df3e8", "patch": "@@ -1353,7 +1353,9 @@ impl LinkCollector<'_, '_> {\n \n         match res {\n             Res::Primitive(prim) => {\n-                if let Some((kind, id)) = self.kind_side_channel.take() {\n+                if let Some(UrlFragment::Def(_, id)) = fragment {\n+                    let kind = self.cx.tcx.def_kind(id);\n+\n                     // We're actually resolving an associated item of a primitive, so we need to\n                     // verify the disambiguator (if any) matches the type of the associated item.\n                     // This case should really follow the same flow as the `Res::Def` branch below,"}]}