{"sha": "2819b2d8c91ac7d3b366c3c76dca37d2b7b2b5d5", "node_id": "C_kwDOAAsO6NoAKDI4MTliMmQ4YzkxYWM3ZDNiMzY2YzNjNzZkY2EzN2QyYjdiMmI1ZDU", "commit": {"author": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2022-05-06T10:37:22Z"}, "committer": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2022-05-06T10:37:22Z"}, "message": "wording tweaks", "tree": {"sha": "85d83f65b861243aae722308839a21e1c438aa0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85d83f65b861243aae722308839a21e1c438aa0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2819b2d8c91ac7d3b366c3c76dca37d2b7b2b5d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2819b2d8c91ac7d3b366c3c76dca37d2b7b2b5d5", "html_url": "https://github.com/rust-lang/rust/commit/2819b2d8c91ac7d3b366c3c76dca37d2b7b2b5d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2819b2d8c91ac7d3b366c3c76dca37d2b7b2b5d5/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fea1d765033eada386ffc1684d47c00a48d104f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/fea1d765033eada386ffc1684d47c00a48d104f1", "html_url": "https://github.com/rust-lang/rust/commit/fea1d765033eada386ffc1684d47c00a48d104f1"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "3e15079552ceb59267d0d2dec8a4d51002a05f76", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2819b2d8c91ac7d3b366c3c76dca37d2b7b2b5d5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2819b2d8c91ac7d3b366c3c76dca37d2b7b2b5d5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=2819b2d8c91ac7d3b366c3c76dca37d2b7b2b5d5", "patch": "@@ -1003,7 +1003,7 @@ fn compare_generic_param_kinds<'tcx>(\n         } {\n             let make_param_message = |prefix: &str, param: &ty::GenericParamDef| match param.kind {\n                 Const { .. } => {\n-                    format!(\"{} const parameter with type `{}`\", prefix, tcx.type_of(param.def_id))\n+                    format!(\"{} const parameter of type `{}`\", prefix, tcx.type_of(param.def_id))\n                 }\n                 Type { .. } => format!(\"{} type parameter\", prefix),\n                 Lifetime { .. } => unreachable!(),\n@@ -1016,7 +1016,7 @@ fn compare_generic_param_kinds<'tcx>(\n                 tcx.sess,\n                 param_impl_span,\n                 E0053,\n-                \"{} `{}` has an incompatible generic parameter for trait: `{}`\",\n+                \"{} `{}` has an incompatible generic parameter for trait `{}`\",\n                 assoc_item_kind_str(&impl_item),\n                 trait_item.name,\n                 &tcx.def_path_str(tcx.parent(trait_item.def_id))"}, {"sha": "3455f2c8ea97b3db709d7ae345242ecf40798e92", "filename": "src/test/ui/const-generics/defaults/mismatched_ty_const_in_trait_impl.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2819b2d8c91ac7d3b366c3c76dca37d2b7b2b5d5/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatched_ty_const_in_trait_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2819b2d8c91ac7d3b366c3c76dca37d2b7b2b5d5/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatched_ty_const_in_trait_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatched_ty_const_in_trait_impl.stderr?ref=2819b2d8c91ac7d3b366c3c76dca37d2b7b2b5d5", "patch": "@@ -1,4 +1,4 @@\n-error[E0053]: method `foo` has an incompatible generic parameter for trait: `Trait`\n+error[E0053]: method `foo` has an incompatible generic parameter for trait `Trait`\n   --> $DIR/mismatched_ty_const_in_trait_impl.rs:5:12\n    |\n LL | trait Trait {\n@@ -9,48 +9,48 @@ LL | }\n LL | impl Trait for () {\n    | -----------------\n LL |     fn foo<const M: u64>() {}\n-   |            ^^^^^^^^^^^^ found const parameter with type `u64`\n+   |            ^^^^^^^^^^^^ found const parameter of type `u64`\n \n-error[E0053]: method `bar` has an incompatible generic parameter for trait: `Other`\n+error[E0053]: method `bar` has an incompatible generic parameter for trait `Other`\n   --> $DIR/mismatched_ty_const_in_trait_impl.rs:13:12\n    |\n LL | trait Other {\n    |       -----\n LL |     fn bar<const M: u8>() {}\n-   |            ----------- expected const parameter with type `u8`\n+   |            ----------- expected const parameter of type `u8`\n LL | }\n LL | impl Other for () {\n    | -----------------\n LL |     fn bar<T>() {}\n    |            ^ found type parameter\n \n-error[E0053]: method `baz` has an incompatible generic parameter for trait: `Uwu`\n+error[E0053]: method `baz` has an incompatible generic parameter for trait `Uwu`\n   --> $DIR/mismatched_ty_const_in_trait_impl.rs:21:12\n    |\n LL | trait Uwu {\n    |       ---\n LL |     fn baz<const N: u32>() {}\n-   |            ------------ expected const parameter with type `u32`\n+   |            ------------ expected const parameter of type `u32`\n LL | }\n LL | impl Uwu for () {\n    | ---------------\n LL |     fn baz<const N: i32>() {}\n-   |            ^^^^^^^^^^^^ found const parameter with type `i32`\n+   |            ^^^^^^^^^^^^ found const parameter of type `i32`\n \n-error[E0053]: method `bbbb` has an incompatible generic parameter for trait: `Aaaaaa`\n+error[E0053]: method `bbbb` has an incompatible generic parameter for trait `Aaaaaa`\n   --> $DIR/mismatched_ty_const_in_trait_impl.rs:29:13\n    |\n LL | trait Aaaaaa {\n    |       ------\n LL |     fn bbbb<const N: u32, T>() {}\n-   |             ------------ expected const parameter with type `u32`\n+   |             ------------ expected const parameter of type `u32`\n LL | }\n LL | impl Aaaaaa for () {\n    | ------------------\n LL |     fn bbbb<T, const N: u32>() {}\n    |             ^ found type parameter\n \n-error[E0053]: method `abcd` has an incompatible generic parameter for trait: `Names`\n+error[E0053]: method `abcd` has an incompatible generic parameter for trait `Names`\n   --> $DIR/mismatched_ty_const_in_trait_impl.rs:37:13\n    |\n LL | trait Names {\n@@ -61,7 +61,7 @@ LL | }\n LL | impl Names for () {\n    | -----------------\n LL |     fn abcd<const N: u32, T>() {}\n-   |             ^^^^^^^^^^^^ found const parameter with type `u32`\n+   |             ^^^^^^^^^^^^ found const parameter of type `u32`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "ae4bd943fd415d1414731414603902c6bfb62967", "filename": "src/test/ui/const-generics/issues/issue-86820.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2819b2d8c91ac7d3b366c3c76dca37d2b7b2b5d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86820.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2819b2d8c91ac7d3b366c3c76dca37d2b7b2b5d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86820.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86820.rs?ref=2819b2d8c91ac7d3b366c3c76dca37d2b7b2b5d5", "patch": "@@ -14,7 +14,7 @@ trait Bits {\n \n impl Bits for u8 {\n     fn bit<const I: usize>(self) -> bool {\n-        //~^ ERROR: method `bit` has an incompatible generic parameter for trait: `Bits` [E0053]\n+        //~^ ERROR: method `bit` has an incompatible generic parameter for trait `Bits` [E0053]\n         let i = 1 << I;\n         let mask = u8::from(i);\n         mask & self == mask"}, {"sha": "3a9cd957f35e7a65c3e1959d7a5ce878fa59ac09", "filename": "src/test/ui/const-generics/issues/issue-86820.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2819b2d8c91ac7d3b366c3c76dca37d2b7b2b5d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86820.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2819b2d8c91ac7d3b366c3c76dca37d2b7b2b5d5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86820.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86820.stderr?ref=2819b2d8c91ac7d3b366c3c76dca37d2b7b2b5d5", "patch": "@@ -1,15 +1,15 @@\n-error[E0053]: method `bit` has an incompatible generic parameter for trait: `Bits`\n+error[E0053]: method `bit` has an incompatible generic parameter for trait `Bits`\n   --> $DIR/issue-86820.rs:16:12\n    |\n LL | trait Bits {\n    |       ----\n LL |     fn bit<const I: u8>(self) -> bool;\n-   |            ----------- expected const parameter with type `u8`\n+   |            ----------- expected const parameter of type `u8`\n ...\n LL | impl Bits for u8 {\n    | ----------------\n LL |     fn bit<const I: usize>(self) -> bool {\n-   |            ^^^^^^^^^^^^^^ found const parameter with type `usize`\n+   |            ^^^^^^^^^^^^^^ found const parameter of type `usize`\n \n error: aborting due to previous error\n "}, {"sha": "89c993dee5e694c270b23bc0a000bab3742308b9", "filename": "src/test/ui/generic-associated-types/const_params_have_right_type.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2819b2d8c91ac7d3b366c3c76dca37d2b7b2b5d5/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst_params_have_right_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2819b2d8c91ac7d3b366c3c76dca37d2b7b2b5d5/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst_params_have_right_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst_params_have_right_type.stderr?ref=2819b2d8c91ac7d3b366c3c76dca37d2b7b2b5d5", "patch": "@@ -1,15 +1,15 @@\n-error[E0053]: type `Foo` has an incompatible generic parameter for trait: `Trait`\n+error[E0053]: type `Foo` has an incompatible generic parameter for trait `Trait`\n   --> $DIR/const_params_have_right_type.rs:8:14\n    |\n LL | trait Trait {\n    |       -----\n LL |     type Foo<const N: u8>;\n-   |              ----------- expected const parameter with type `u8`\n+   |              ----------- expected const parameter of type `u8`\n ...\n LL | impl Trait for () {\n    | -----------------\n LL |     type Foo<const N: u64> = u32;\n-   |              ^^^^^^^^^^^^ found const parameter with type `u64`\n+   |              ^^^^^^^^^^^^ found const parameter of type `u64`\n \n error: aborting due to previous error\n "}]}