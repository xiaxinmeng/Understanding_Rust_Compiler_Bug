{"sha": "206495b0a92cfb084b52b92a506d25a756fc9830", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwNjQ5NWIwYTkyY2ZiMDg0YjUyYjkyYTUwNmQyNWE3NTZmYzk4MzA=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-17T03:53:50Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-17T18:05:15Z"}, "message": "Refactor resolve_import\n\nIssue #817", "tree": {"sha": "f38e3319e5967d91f2353a47a5d480e8a7325d86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f38e3319e5967d91f2353a47a5d480e8a7325d86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/206495b0a92cfb084b52b92a506d25a756fc9830", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/206495b0a92cfb084b52b92a506d25a756fc9830", "html_url": "https://github.com/rust-lang/rust/commit/206495b0a92cfb084b52b92a506d25a756fc9830", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/206495b0a92cfb084b52b92a506d25a756fc9830/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45706a63bf0d89d5f6ac73d78cdaa66cb408f91b", "url": "https://api.github.com/repos/rust-lang/rust/commits/45706a63bf0d89d5f6ac73d78cdaa66cb408f91b", "html_url": "https://github.com/rust-lang/rust/commit/45706a63bf0d89d5f6ac73d78cdaa66cb408f91b"}], "stats": {"total": 90, "additions": 47, "deletions": 43}, "files": [{"sha": "8c6217c8beac2f455bc66f7b15f7c9451c336521", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 47, "deletions": 43, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/206495b0a92cfb084b52b92a506d25a756fc9830/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206495b0a92cfb084b52b92a506d25a756fc9830/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=206495b0a92cfb084b52b92a506d25a756fc9830", "patch": "@@ -1,6 +1,7 @@\n \n import syntax::ast;\n import syntax::ast::*;\n+import syntax::codemap;\n import ast::ident;\n import ast::fn_ident;\n import ast::def;\n@@ -92,7 +93,7 @@ fn new_ext_hash() -> ext_hash {\n \n tag mod_index_entry {\n     mie_view_item(@ast::view_item);\n-    mie_import_ident(node_id, syntax::codemap::span);\n+    mie_import_ident(node_id, codemap::span);\n     mie_item(@ast::item);\n     mie_native_item(@ast::native_item);\n     mie_tag_variant(/* tag item */@ast::item, /* variant index */uint);\n@@ -246,26 +247,27 @@ fn map_crate(e: &@env, c: &@ast::crate) {\n     }\n }\n \n-fn vi_from_to_vi(from_item: &@ast::view_item,\n-                 ident: ast::import_ident) -> @ast::view_item {\n-    alt from_item.node {\n-      ast::view_item_import_from(mod_path, idents, _) {\n-        @ast::respan(ident.span,\n-                     ast::view_item_import(ident.node.name,\n-                                           mod_path + ~[ident.node.name],\n-                                           ident.node.id))\n-      }\n-    }\n-}\n-\n fn resolve_imports(e: &env) {\n     for each it: @{key: ast::node_id, val: import_state} in e.imports.items()\n              {\n         alt it.val {\n-          todo(item, sc) { resolve_import(e, item, sc); }\n+          todo(item, sc) {\n+            alt item.node {\n+              ast::view_item_import(name, ids, id) {\n+                resolve_import(e, local_def(id),\n+                               name, ids, item.span, sc);\n+              }\n+            }\n+          }\n           todo_from(item, ident, sc) {\n-            let vi = vi_from_to_vi(item, ident);\n-            resolve_import(e, vi, sc);\n+              alt item.node {\n+                ast::view_item_import_from(mod_path, idents, _) {\n+                  resolve_import(e, local_def(ident.node.id),\n+                                 ident.node.name,\n+                                 mod_path + ~[ident.node.name],\n+                                 ident.span, sc);\n+                }\n+              }\n           }\n           resolved(_, _, _) { }\n         }\n@@ -467,59 +469,50 @@ fn resolve_constr(e: @env, id: node_id, c: &@ast::constr, sc: &scopes,\n }\n \n // Import resolution\n-fn resolve_import(e: &env, it: &@ast::view_item, sc_in: &scopes) {\n-    let defid;\n-    let ids;\n-    let name;\n-    alt it.node {\n-      ast::view_item_import(_name, _ids, _id) {\n-        defid = local_def(_id);\n-        ids = _ids;\n-        name = _name;\n-      }\n-    }\n-    e.imports.insert(defid.node, resolving(it.span));\n+fn resolve_import(e: &env, defid: ast::def_id, name: &ast::ident,\n+                  ids: &[ast::ident], sp: &codemap::span, sc_in: &scopes) {\n+    e.imports.insert(defid.node, resolving(sp));\n     let n_idents = vec::len(ids);\n     let end_id = ids.(n_idents - 1u);\n     // Ignore the current scope if this import would shadow itself.\n     let sc =\n         if str::eq(name, ids.(0)) { std::list::cdr(sc_in) } else { sc_in };\n     if n_idents == 1u {\n-        register(e, defid, it.span, end_id, sc_in,\n-                 lookup_in_scope(e, sc, it.span, end_id, ns_value),\n-                 lookup_in_scope(e, sc, it.span, end_id, ns_type),\n-                 lookup_in_scope(e, sc, it.span, end_id, ns_module));\n+        register(e, defid, sp, end_id, sc_in,\n+                 lookup_in_scope(e, sc, sp, end_id, ns_value),\n+                 lookup_in_scope(e, sc, sp, end_id, ns_type),\n+                 lookup_in_scope(e, sc, sp, end_id, ns_module));\n         remove_if_unresolved(e.imports, defid.node);\n     } else {\n         let  // FIXME (issue #521)\n             dcur =\n-            alt lookup_in_scope(e, sc, it.span, ids.(0), ns_module) {\n+            alt lookup_in_scope(e, sc, sp, ids.(0), ns_module) {\n               some(dcur) { dcur }\n               none. {\n-                unresolved_err(e, sc, it.span, ids.(0), ns_name(ns_module));\n+                unresolved_err(e, sc, sp, ids.(0), ns_name(ns_module));\n                 remove_if_unresolved(e.imports, defid.node);\n                 ret ()\n               }\n             };\n         let i = 1u;\n         while true {\n             if i == n_idents - 1u {\n-                register(e, defid, it.span, end_id, sc_in,\n-                         lookup_in_mod(e, dcur, it.span, end_id, ns_value,\n+                register(e, defid, sp, end_id, sc_in,\n+                         lookup_in_mod(e, dcur, sp, end_id, ns_value,\n                                        outside),\n-                         lookup_in_mod(e, dcur, it.span, end_id, ns_type,\n+                         lookup_in_mod(e, dcur, sp, end_id, ns_type,\n                                        outside),\n-                         lookup_in_mod(e, dcur, it.span, end_id, ns_module,\n+                         lookup_in_mod(e, dcur, sp, end_id, ns_module,\n                                        outside));\n                 remove_if_unresolved(e.imports, defid.node);\n                 break;\n             } else {\n                 dcur =\n-                    alt lookup_in_mod(e, dcur, it.span, ids.(i), ns_module,\n+                    alt lookup_in_mod(e, dcur, sp, ids.(i), ns_module,\n                                       outside) {\n                       some(dcur) { dcur }\n                       none. {\n-                        unresolved_err(e, sc, it.span, ids.(i),\n+                        unresolved_err(e, sc, sp, ids.(i),\n                                        ns_name(ns_module));\n                         remove_if_unresolved(e.imports, defid.node);\n                         ret () // FIXME (issue #521)\n@@ -955,12 +948,23 @@ fn found_view_item(e: &env, vi: @ast::view_item, ns: namespace) ->\n fn lookup_import(e: &env, defid: def_id, ns: namespace) -> option::t<def> {\n     alt e.imports.get(defid.node) {\n       todo(item, sc) {\n-        resolve_import(e, item, sc);\n+        alt item.node {\n+          ast::view_item_import(name, ids, id) {\n+            resolve_import(e, local_def(id),\n+                           name, ids, item.span, sc);\n+          }\n+        }\n         ret lookup_import(e, defid, ns);\n       }\n       todo_from(item, ident, sc) {\n-        let vi = vi_from_to_vi(item, ident);\n-        resolve_import(e, vi, sc);\n+        alt item.node {\n+          ast::view_item_import_from(mod_path, idents, _) {\n+            resolve_import(e, local_def(ident.node.id),\n+                           ident.node.name,\n+                           mod_path + ~[ident.node.name],\n+                           ident.span, sc);\n+          }\n+        }\n         ret lookup_import(e, defid, ns);\n       }\n       resolving(sp) { e.sess.span_err(sp, \"cyclic import\"); ret none; }"}]}