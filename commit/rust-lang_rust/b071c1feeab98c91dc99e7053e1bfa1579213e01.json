{"sha": "b071c1feeab98c91dc99e7053e1bfa1579213e01", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwNzFjMWZlZWFiOThjOTFkYzk5ZTcwNTNlMWJmYTE1NzkyMTNlMDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-06T00:55:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-06T00:55:28Z"}, "message": "Auto merge of #32565 - tbu-:pr_cell_as_mut, r=alexcrichton\n\nAdd `as_mut` methods to the `std::cell` structs\n\nThis is safe since the borrow checking ensures that we have the only\nmutable reference to the struct, thus we can safely borrow its interior.", "tree": {"sha": "b6e7b011d0a4b22b5b5e0d45e555425e19340a9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6e7b011d0a4b22b5b5e0d45e555425e19340a9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b071c1feeab98c91dc99e7053e1bfa1579213e01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b071c1feeab98c91dc99e7053e1bfa1579213e01", "html_url": "https://github.com/rust-lang/rust/commit/b071c1feeab98c91dc99e7053e1bfa1579213e01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b071c1feeab98c91dc99e7053e1bfa1579213e01/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77987ba89894997c174ac8b01185c0dc12913fa5", "url": "https://api.github.com/repos/rust-lang/rust/commits/77987ba89894997c174ac8b01185c0dc12913fa5", "html_url": "https://github.com/rust-lang/rust/commit/77987ba89894997c174ac8b01185c0dc12913fa5"}, {"sha": "9370d3a05107bdcac6fb62d3bd5380e1d7c79b5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9370d3a05107bdcac6fb62d3bd5380e1d7c79b5b", "html_url": "https://github.com/rust-lang/rust/commit/9370d3a05107bdcac6fb62d3bd5380e1d7c79b5b"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "19c778b023490282790d9b6993de94a00cc0828f", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b071c1feeab98c91dc99e7053e1bfa1579213e01/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b071c1feeab98c91dc99e7053e1bfa1579213e01/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=b071c1feeab98c91dc99e7053e1bfa1579213e01", "patch": "@@ -232,6 +232,18 @@ impl<T:Copy> Cell<T> {\n     pub fn as_unsafe_cell(&self) -> &UnsafeCell<T> {\n         &self.value\n     }\n+\n+    /// Returns a mutable reference to the underlying data.\n+    ///\n+    /// This call borrows `Cell` mutably (at compile-time) which guarantees\n+    /// that we possess the only reference.\n+    #[inline]\n+    #[unstable(feature = \"cell_get_mut\", issue = \"33444\")]\n+    pub fn get_mut(&mut self) -> &mut T {\n+        unsafe {\n+            &mut *self.value.get()\n+        }\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -455,6 +467,18 @@ impl<T: ?Sized> RefCell<T> {\n     pub unsafe fn as_unsafe_cell(&self) -> &UnsafeCell<T> {\n         &self.value\n     }\n+\n+    /// Returns a mutable reference to the underlying data.\n+    ///\n+    /// This call borrows `RefCell` mutably (at compile-time) so there is no\n+    /// need for dynamic checks.\n+    #[inline]\n+    #[unstable(feature = \"cell_get_mut\", issue=\"33444\")]\n+    pub fn get_mut(&mut self) -> &mut T {\n+        unsafe {\n+            &mut *self.value.get()\n+        }\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}