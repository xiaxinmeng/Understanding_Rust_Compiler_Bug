{"sha": "7547a4ddef11f0b08ce2b92032012bf34872e4fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1NDdhNGRkZWYxMWYwYjA4Y2UyYjkyMDMyMDEyYmYzNDg3MmU0ZmQ=", "commit": {"author": {"name": "Wim Looman", "email": "wim@nemo157.com", "date": "2018-05-27T12:32:03Z"}, "committer": {"name": "Wim Looman", "email": "wim.looman@kiwi.ki", "date": "2018-06-15T14:53:34Z"}, "message": "New Lint: Pass small trivially copyable objects by value\n\nFixes #1680\n\nHardcoded for 64-bit \"trivial\" size for now", "tree": {"sha": "46232c3d4d8045a6079d5ade5e55d955cca4516c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46232c3d4d8045a6079d5ade5e55d955cca4516c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7547a4ddef11f0b08ce2b92032012bf34872e4fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7547a4ddef11f0b08ce2b92032012bf34872e4fd", "html_url": "https://github.com/rust-lang/rust/commit/7547a4ddef11f0b08ce2b92032012bf34872e4fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7547a4ddef11f0b08ce2b92032012bf34872e4fd/comments", "author": {"login": "Nemo157", "id": 81079, "node_id": "MDQ6VXNlcjgxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/81079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nemo157", "html_url": "https://github.com/Nemo157", "followers_url": "https://api.github.com/users/Nemo157/followers", "following_url": "https://api.github.com/users/Nemo157/following{/other_user}", "gists_url": "https://api.github.com/users/Nemo157/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nemo157/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nemo157/subscriptions", "organizations_url": "https://api.github.com/users/Nemo157/orgs", "repos_url": "https://api.github.com/users/Nemo157/repos", "events_url": "https://api.github.com/users/Nemo157/events{/privacy}", "received_events_url": "https://api.github.com/users/Nemo157/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nemo157", "id": 81079, "node_id": "MDQ6VXNlcjgxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/81079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nemo157", "html_url": "https://github.com/Nemo157", "followers_url": "https://api.github.com/users/Nemo157/followers", "following_url": "https://api.github.com/users/Nemo157/following{/other_user}", "gists_url": "https://api.github.com/users/Nemo157/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nemo157/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nemo157/subscriptions", "organizations_url": "https://api.github.com/users/Nemo157/orgs", "repos_url": "https://api.github.com/users/Nemo157/repos", "events_url": "https://api.github.com/users/Nemo157/events{/privacy}", "received_events_url": "https://api.github.com/users/Nemo157/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c231128467514141a28cd51d4ecabe1431dd8b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c231128467514141a28cd51d4ecabe1431dd8b1", "html_url": "https://github.com/rust-lang/rust/commit/0c231128467514141a28cd51d4ecabe1431dd8b1"}], "stats": {"total": 278, "additions": 269, "deletions": 9}, "files": [{"sha": "56521d440aae1c575050995cbe5ad5f047190c2c", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7547a4ddef11f0b08ce2b92032012bf34872e4fd/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7547a4ddef11f0b08ce2b92032012bf34872e4fd/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=7547a4ddef11f0b08ce2b92032012bf34872e4fd", "patch": "@@ -196,6 +196,7 @@ pub mod suspicious_trait_impl;\n pub mod swap;\n pub mod temporary_assignment;\n pub mod transmute;\n+pub mod trivially_copy_pass_by_ref;\n pub mod types;\n pub mod unicode;\n pub mod unsafe_removed_from_name;\n@@ -399,6 +400,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_late_lint_pass(box large_enum_variant::LargeEnumVariant::new(conf.enum_variant_size_threshold));\n     reg.register_late_lint_pass(box explicit_write::Pass);\n     reg.register_late_lint_pass(box needless_pass_by_value::NeedlessPassByValue);\n+    reg.register_late_lint_pass(box trivially_copy_pass_by_ref::TriviallyCopyPassByRef);\n     reg.register_early_lint_pass(box literal_representation::LiteralDigitGrouping);\n     reg.register_early_lint_pass(box literal_representation::LiteralRepresentation::new(\n             conf.literal_representation_threshold\n@@ -672,6 +674,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         transmute::TRANSMUTE_PTR_TO_REF,\n         transmute::USELESS_TRANSMUTE,\n         transmute::WRONG_TRANSMUTE,\n+        trivially_copy_pass_by_ref::TRIVIALLY_COPY_PASS_BY_REF,\n         types::ABSURD_EXTREME_COMPARISONS,\n         types::BORROWED_BOX,\n         types::BOX_VEC,\n@@ -916,6 +919,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         methods::SINGLE_CHAR_PATTERN,\n         misc::CMP_OWNED,\n         mutex_atomic::MUTEX_ATOMIC,\n+        trivially_copy_pass_by_ref::TRIVIALLY_COPY_PASS_BY_REF,\n         types::BOX_VEC,\n         vec::USELESS_VEC,\n     ]);"}, {"sha": "30b5f65cc8cb57b1af11bf2ec29ee8699dbd3bae", "filename": "clippy_lints/src/trivially_copy_pass_by_ref.rs", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/7547a4ddef11f0b08ce2b92032012bf34872e4fd/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7547a4ddef11f0b08ce2b92032012bf34872e4fd/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs?ref=7547a4ddef11f0b08ce2b92032012bf34872e4fd", "patch": "@@ -0,0 +1,116 @@\n+use rustc::hir::*;\n+use rustc::hir::map::*;\n+use rustc::hir::intravisit::FnKind;\n+use rustc::lint::*;\n+use rustc::ty::TypeVariants;\n+use rustc_target::spec::abi::Abi;\n+use rustc_target::abi::LayoutOf;\n+use syntax::ast::NodeId;\n+use syntax_pos::Span;\n+use crate::utils::{in_macro, is_copy, is_self, span_lint_and_sugg, snippet};\n+\n+/// **What it does:** Checks for functions taking arguments by reference, where\n+/// the argument type is `Copy` and small enough to be more efficient to always\n+/// pass by value.\n+///\n+/// **Why is this bad?** In many calling conventions instances of structs will\n+/// be passed through registers if they fit into two or less general purpose\n+/// registers.\n+///\n+/// **Example:**\n+/// ```rust\n+/// fn foo(v: &u32) {\n+///     assert_eq!(v, 42);\n+/// }\n+/// // should be\n+/// fn foo(v: u32) {\n+///     assert_eq!(v, 42);\n+/// }\n+/// ```\n+declare_clippy_lint! {\n+    pub TRIVIALLY_COPY_PASS_BY_REF,\n+    perf,\n+    \"functions taking small copyable arguments by reference\"\n+}\n+\n+pub struct TriviallyCopyPassByRef;\n+\n+impl LintPass for TriviallyCopyPassByRef {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array![TRIVIALLY_COPY_PASS_BY_REF]\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TriviallyCopyPassByRef {\n+    fn check_fn(\n+        &mut self,\n+        cx: &LateContext<'a, 'tcx>,\n+        kind: FnKind<'tcx>,\n+        decl: &'tcx FnDecl,\n+        body: &'tcx Body,\n+        span: Span,\n+        node_id: NodeId,\n+    ) {\n+        if in_macro(span) {\n+            return;\n+        }\n+\n+        match kind {\n+            FnKind::ItemFn(.., abi, _, attrs) => {\n+                if abi != Abi::Rust {\n+                    return;\n+                }\n+                for a in attrs {\n+                    if a.meta_item_list().is_some() && a.name() == \"proc_macro_derive\" {\n+                        return;\n+                    }\n+                }\n+            },\n+            FnKind::Method(..) => (),\n+            _ => return,\n+        }\n+\n+        // Exclude non-inherent impls\n+        if let Some(NodeItem(item)) = cx.tcx.hir.find(cx.tcx.hir.get_parent_node(node_id)) {\n+            if matches!(item.node, ItemImpl(_, _, _, _, Some(_), _, _) |\n+                ItemTrait(..))\n+            {\n+                return;\n+            }\n+        }\n+\n+        let fn_def_id = cx.tcx.hir.local_def_id(node_id);\n+\n+        let fn_sig = cx.tcx.fn_sig(fn_def_id);\n+        let fn_sig = cx.tcx.erase_late_bound_regions(&fn_sig);\n+\n+        for ((input, &ty), arg) in decl.inputs.iter().zip(fn_sig.inputs()).zip(&body.arguments) {\n+            // All spans generated from a proc-macro invocation are the same...\n+            if span == input.span {\n+                return;\n+            }\n+\n+            if_chain! {\n+                if let TypeVariants::TyRef(_, ty, Mutability::MutImmutable) = ty.sty;\n+                if is_copy(cx, ty);\n+                if let Some(size) = cx.layout_of(ty).ok().map(|l| l.size.bytes());\n+                if size < 16;\n+                if let Ty_::TyRptr(_, MutTy { ty: ref decl_ty, .. }) = input.node;\n+                then {\n+                    let value_type = if is_self(arg) {\n+                        \"self\".into()\n+                    } else {\n+                        snippet(cx, decl_ty.span, \"_\").into()\n+                    };\n+                    span_lint_and_sugg(\n+                        cx,\n+                        TRIVIALLY_COPY_PASS_BY_REF,\n+                        input.span,\n+                        \"this argument is passed by reference, but would be more efficient if passed by value\",\n+                        \"consider passing by value instead\",\n+                        value_type);\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "5b491573c3f9202f0939e6d0d57d4d703432f925", "filename": "tests/ui/clone_on_copy_mut.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7547a4ddef11f0b08ce2b92032012bf34872e4fd/tests%2Fui%2Fclone_on_copy_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7547a4ddef11f0b08ce2b92032012bf34872e4fd/tests%2Fui%2Fclone_on_copy_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclone_on_copy_mut.rs?ref=7547a4ddef11f0b08ce2b92032012bf34872e4fd", "patch": "@@ -5,6 +5,7 @@ pub fn dec_read_dec(i: &mut i32) -> i32 {\n     ret\n }\n \n+#[allow(trivially_copy_pass_by_ref)]\n pub fn minus_1(i: &i32) -> i32 {\n     dec_read_dec(&mut i.clone())\n }"}, {"sha": "6e0b6f8cacd7eba46f055252407c88d9546d315a", "filename": "tests/ui/eta.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7547a4ddef11f0b08ce2b92032012bf34872e4fd/tests%2Fui%2Feta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7547a4ddef11f0b08ce2b92032012bf34872e4fd/tests%2Fui%2Feta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.rs?ref=7547a4ddef11f0b08ce2b92032012bf34872e4fd", "patch": "@@ -1,6 +1,6 @@\n \n \n-#![allow(unknown_lints, unused, no_effect, redundant_closure_call, many_single_char_names, needless_pass_by_value, option_map_unit_fn)]\n+#![allow(unknown_lints, unused, no_effect, redundant_closure_call, many_single_char_names, needless_pass_by_value, option_map_unit_fn, trivially_copy_pass_by_ref)]\n #![warn(redundant_closure, needless_borrow)]\n \n fn main() {"}, {"sha": "2e2ccd9f1ae87706f3bb41e87c785e98081a7757", "filename": "tests/ui/infinite_iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7547a4ddef11f0b08ce2b92032012bf34872e4fd/tests%2Fui%2Finfinite_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7547a4ddef11f0b08ce2b92032012bf34872e4fd/tests%2Fui%2Finfinite_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfinite_iter.rs?ref=7547a4ddef11f0b08ce2b92032012bf34872e4fd", "patch": "@@ -1,7 +1,7 @@\n #![feature(iterator_for_each)]\n \n use std::iter::repeat;\n-\n+#[allow(trivially_copy_pass_by_ref)]\n fn square_is_lower_64(x: &u32) -> bool { x * x < 64 }\n \n #[allow(maybe_infinite_iter)]"}, {"sha": "aa4f8b53f6c7cd7a057d98584c185e8b770309e5", "filename": "tests/ui/infinite_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7547a4ddef11f0b08ce2b92032012bf34872e4fd/tests%2Fui%2Finfinite_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7547a4ddef11f0b08ce2b92032012bf34872e4fd/tests%2Fui%2Finfinite_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfinite_loop.rs?ref=7547a4ddef11f0b08ce2b92032012bf34872e4fd", "patch": "@@ -1,4 +1,4 @@\n-\n+#![allow(trivially_copy_pass_by_ref)]\n \n \n fn fn_val(i: i32) -> i32 { unimplemented!() }"}, {"sha": "d2de1cb8ed851c5f0590b92c63b51cb8534e258c", "filename": "tests/ui/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7547a4ddef11f0b08ce2b92032012bf34872e4fd/tests%2Fui%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7547a4ddef11f0b08ce2b92032012bf34872e4fd/tests%2Fui%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes.rs?ref=7547a4ddef11f0b08ce2b92032012bf34872e4fd", "patch": "@@ -2,7 +2,7 @@\n \n \n #![warn(needless_lifetimes, extra_unused_lifetimes)]\n-#![allow(dead_code, needless_pass_by_value)]\n+#![allow(dead_code, needless_pass_by_value, trivially_copy_pass_by_ref)]\n \n fn distinct_lifetimes<'a, 'b>(_x: &'a u8, _y: &'b u8, _z: u8) { }\n "}, {"sha": "3fc464083c443d1726dc655a6101d8dee3231159", "filename": "tests/ui/mut_from_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7547a4ddef11f0b08ce2b92032012bf34872e4fd/tests%2Fui%2Fmut_from_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7547a4ddef11f0b08ce2b92032012bf34872e4fd/tests%2Fui%2Fmut_from_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_from_ref.rs?ref=7547a4ddef11f0b08ce2b92032012bf34872e4fd", "patch": "@@ -1,6 +1,6 @@\n \n \n-#![allow(unused)]\n+#![allow(unused, trivially_copy_pass_by_ref)]\n #![warn(mut_from_ref)]\n \n struct Foo;"}, {"sha": "34185f6a9c2b94a1dd7ec6c54580d7c3bea5887c", "filename": "tests/ui/mut_reference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7547a4ddef11f0b08ce2b92032012bf34872e4fd/tests%2Fui%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7547a4ddef11f0b08ce2b92032012bf34872e4fd/tests%2Fui%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_reference.rs?ref=7547a4ddef11f0b08ce2b92032012bf34872e4fd", "patch": "@@ -1,7 +1,7 @@\n \n \n \n-#![allow(unused_variables)]\n+#![allow(unused_variables, trivially_copy_pass_by_ref)]\n \n fn takes_an_immutable_reference(a: &i32) {}\n fn takes_a_mutable_reference(a: &mut i32) {}"}, {"sha": "b086f0214a9c27ed5104f33941a269916d604d98", "filename": "tests/ui/needless_borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7547a4ddef11f0b08ce2b92032012bf34872e4fd/tests%2Fui%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7547a4ddef11f0b08ce2b92032012bf34872e4fd/tests%2Fui%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrow.rs?ref=7547a4ddef11f0b08ce2b92032012bf34872e4fd", "patch": "@@ -1,6 +1,6 @@\n use std::borrow::Cow;\n \n-\n+#[allow(trivially_copy_pass_by_ref)]\n fn x(y: &i32) -> i32 {\n     *y\n }"}, {"sha": "aba4aa5ea327bee3e51fcdbef32e2ca678c306a1", "filename": "tests/ui/trivially_copy_pass_by_ref.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/7547a4ddef11f0b08ce2b92032012bf34872e4fd/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7547a4ddef11f0b08ce2b92032012bf34872e4fd/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs?ref=7547a4ddef11f0b08ce2b92032012bf34872e4fd", "patch": "@@ -0,0 +1,57 @@\n+#![allow(many_single_char_names, blacklisted_name)]\n+\n+#[derive(Copy, Clone)]\n+struct Foo(u32);\n+\n+#[derive(Copy, Clone)]\n+struct Bar([u8; 24]);\n+\n+type Baz = u32;\n+\n+fn good(a: &mut u32, b: u32, c: &Bar) {\n+}\n+\n+fn bad(x: &u32, y: &Foo, z: &Baz) {\n+}\n+\n+impl Foo {\n+    fn good(self, a: &mut u32, b: u32, c: &Bar) {\n+    }\n+\n+    fn good2(&mut self) {\n+    }\n+\n+    fn bad(&self, x: &u32, y: &Foo, z: &Baz) {\n+    }\n+\n+    fn bad2(x: &u32, y: &Foo, z: &Baz) {\n+    }\n+}\n+\n+impl AsRef<u32> for Foo {\n+    fn as_ref(&self) -> &u32 {\n+        &self.0\n+    }\n+}\n+\n+impl Bar {\n+    fn good(&self, a: &mut u32, b: u32, c: &Bar) {\n+    }\n+\n+    fn bad2(x: &u32, y: &Foo, z: &Baz) {\n+    }\n+}\n+\n+fn main() {\n+    let (mut foo, bar) = (Foo(0), Bar([0; 24]));\n+    let (mut a, b, c, x, y, z) = (0, 0, Bar([0; 24]), 0, Foo(0), 0);\n+    good(&mut a, b, &c);\n+    bad(&x, &y, &z);\n+    foo.good(&mut a, b, &c);\n+    foo.good2();\n+    foo.bad(&x, &y, &z);\n+    Foo::bad2(&x, &y, &z);\n+    bar.good(&mut a, b, &c);\n+    Bar::bad2(&x, &y, &z);\n+    foo.as_ref();\n+}"}, {"sha": "c6ab968a7c5f97d29e58cc83afa35dd0d90635d6", "filename": "tests/ui/trivially_copy_pass_by_ref.stderr", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/7547a4ddef11f0b08ce2b92032012bf34872e4fd/tests%2Fui%2Ftrivially_copy_pass_by_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7547a4ddef11f0b08ce2b92032012bf34872e4fd/tests%2Fui%2Ftrivially_copy_pass_by_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrivially_copy_pass_by_ref.stderr?ref=7547a4ddef11f0b08ce2b92032012bf34872e4fd", "patch": "@@ -0,0 +1,82 @@\n+error: this argument is passed by reference, but would be more efficient if passed by value\n+  --> $DIR/trivially_copy_pass_by_ref.rs:14:11\n+   |\n+14 | fn bad(x: &u32, y: &Foo, z: &Baz) {\n+   |           ^^^^ help: consider passing by value instead: `u32`\n+   |\n+   = note: `-D trivially-copy-pass-by-ref` implied by `-D warnings`\n+\n+error: this argument is passed by reference, but would be more efficient if passed by value\n+  --> $DIR/trivially_copy_pass_by_ref.rs:14:20\n+   |\n+14 | fn bad(x: &u32, y: &Foo, z: &Baz) {\n+   |                    ^^^^ help: consider passing by value instead: `Foo`\n+\n+error: this argument is passed by reference, but would be more efficient if passed by value\n+  --> $DIR/trivially_copy_pass_by_ref.rs:14:29\n+   |\n+14 | fn bad(x: &u32, y: &Foo, z: &Baz) {\n+   |                             ^^^^ help: consider passing by value instead: `Baz`\n+\n+error: this argument is passed by reference, but would be more efficient if passed by value\n+  --> $DIR/trivially_copy_pass_by_ref.rs:24:12\n+   |\n+24 |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {\n+   |            ^^^^^ help: consider passing by value instead: `self`\n+\n+error: this argument is passed by reference, but would be more efficient if passed by value\n+  --> $DIR/trivially_copy_pass_by_ref.rs:24:22\n+   |\n+24 |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {\n+   |                      ^^^^ help: consider passing by value instead: `u32`\n+\n+error: this argument is passed by reference, but would be more efficient if passed by value\n+  --> $DIR/trivially_copy_pass_by_ref.rs:24:31\n+   |\n+24 |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {\n+   |                               ^^^^ help: consider passing by value instead: `Foo`\n+\n+error: this argument is passed by reference, but would be more efficient if passed by value\n+  --> $DIR/trivially_copy_pass_by_ref.rs:24:40\n+   |\n+24 |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {\n+   |                                        ^^^^ help: consider passing by value instead: `Baz`\n+\n+error: this argument is passed by reference, but would be more efficient if passed by value\n+  --> $DIR/trivially_copy_pass_by_ref.rs:27:16\n+   |\n+27 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n+   |                ^^^^ help: consider passing by value instead: `u32`\n+\n+error: this argument is passed by reference, but would be more efficient if passed by value\n+  --> $DIR/trivially_copy_pass_by_ref.rs:27:25\n+   |\n+27 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n+   |                         ^^^^ help: consider passing by value instead: `Foo`\n+\n+error: this argument is passed by reference, but would be more efficient if passed by value\n+  --> $DIR/trivially_copy_pass_by_ref.rs:27:34\n+   |\n+27 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n+   |                                  ^^^^ help: consider passing by value instead: `Baz`\n+\n+error: this argument is passed by reference, but would be more efficient if passed by value\n+  --> $DIR/trivially_copy_pass_by_ref.rs:41:16\n+   |\n+41 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n+   |                ^^^^ help: consider passing by value instead: `u32`\n+\n+error: this argument is passed by reference, but would be more efficient if passed by value\n+  --> $DIR/trivially_copy_pass_by_ref.rs:41:25\n+   |\n+41 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n+   |                         ^^^^ help: consider passing by value instead: `Foo`\n+\n+error: this argument is passed by reference, but would be more efficient if passed by value\n+  --> $DIR/trivially_copy_pass_by_ref.rs:41:34\n+   |\n+41 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n+   |                                  ^^^^ help: consider passing by value instead: `Baz`\n+\n+error: aborting due to 13 previous errors\n+"}, {"sha": "8b166a34d299fc239e02f9c9c15250192ee538e2", "filename": "tests/ui/unused_lt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7547a4ddef11f0b08ce2b92032012bf34872e4fd/tests%2Fui%2Funused_lt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7547a4ddef11f0b08ce2b92032012bf34872e4fd/tests%2Fui%2Funused_lt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_lt.rs?ref=7547a4ddef11f0b08ce2b92032012bf34872e4fd", "patch": "@@ -1,6 +1,6 @@\n \n \n-#![allow(unused, dead_code, needless_lifetimes, needless_pass_by_value)]\n+#![allow(unused, dead_code, needless_lifetimes, needless_pass_by_value, trivially_copy_pass_by_ref)]\n #![warn(extra_unused_lifetimes)]\n \n fn empty() {"}, {"sha": "07a93d6889bf0cc1787cf751323fa113d254b4fe", "filename": "tests/ui/wrong_self_convention.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7547a4ddef11f0b08ce2b92032012bf34872e4fd/tests%2Fui%2Fwrong_self_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7547a4ddef11f0b08ce2b92032012bf34872e4fd/tests%2Fui%2Fwrong_self_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrong_self_convention.rs?ref=7547a4ddef11f0b08ce2b92032012bf34872e4fd", "patch": "@@ -3,7 +3,7 @@\n \n #![warn(wrong_self_convention)]\n #![warn(wrong_pub_self_convention)]\n-#![allow(dead_code)]\n+#![allow(dead_code, trivially_copy_pass_by_ref)]\n \n fn main() {}\n "}]}