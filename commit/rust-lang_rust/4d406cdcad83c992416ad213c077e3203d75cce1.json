{"sha": "4d406cdcad83c992416ad213c077e3203d75cce1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkNDA2Y2RjYWQ4M2M5OTI0MTZhZDIxM2MwNzdlMzIwM2Q3NWNjZTE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-06-16T09:13:49Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-06-16T09:13:49Z"}, "message": "Rustup to rustc 1.37.0-nightly (0dc9e9c10 2019-06-15)", "tree": {"sha": "4d454f0f2a4b246529b7374ed9a22aa01b6fbb8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d454f0f2a4b246529b7374ed9a22aa01b6fbb8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d406cdcad83c992416ad213c077e3203d75cce1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d406cdcad83c992416ad213c077e3203d75cce1", "html_url": "https://github.com/rust-lang/rust/commit/4d406cdcad83c992416ad213c077e3203d75cce1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d406cdcad83c992416ad213c077e3203d75cce1/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80ab0cac3cb3da8926d53ff29ee21f86e99c2db3", "url": "https://api.github.com/repos/rust-lang/rust/commits/80ab0cac3cb3da8926d53ff29ee21f86e99c2db3", "html_url": "https://github.com/rust-lang/rust/commit/80ab0cac3cb3da8926d53ff29ee21f86e99c2db3"}], "stats": {"total": 123, "additions": 50, "deletions": 73}, "files": [{"sha": "14abc18eea626918316fb53bb08cc3720e8183d5", "filename": "patches/0016-Apply-rust-lang-pr61828.patch", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/80ab0cac3cb3da8926d53ff29ee21f86e99c2db3/patches%2F0016-Apply-rust-lang-pr61828.patch", "raw_url": "https://github.com/rust-lang/rust/raw/80ab0cac3cb3da8926d53ff29ee21f86e99c2db3/patches%2F0016-Apply-rust-lang-pr61828.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0016-Apply-rust-lang-pr61828.patch?ref=80ab0cac3cb3da8926d53ff29ee21f86e99c2db3", "patch": "@@ -1,23 +0,0 @@\n-From e5f840ecb5093e4f5e96f76119d5e3b733e660f3 Mon Sep 17 00:00:00 2001\n-From: Ralf Jung <post@ralfj.de>\n-Date: Fri, 14 Jun 2019 11:00:37 +0200\n-Subject: [PATCH] make sure we use cfg-if as a std dependency\n-\n----\n- src/libstd/Cargo.toml | 2 +-\n- 1 file changed, 1 insertion(+), 1 deletion(-)\n-\n-diff --git a/src/libstd/Cargo.toml b/src/libstd/Cargo.toml\n-index a170dae2b08c..38df1f26d95f 100644\n---- a/src/libstd/Cargo.toml\n-+++ b/src/libstd/Cargo.toml\n-@@ -15,7 +15,7 @@ crate-type = [\"dylib\", \"rlib\"]\n- \n- [dependencies]\n- alloc = { path = \"../liballoc\" }\n--cfg-if = \"0.1.8\"\n-+cfg-if = { version = \"0.1.8\", features = ['rustc-dep-of-std'] }\n- panic_unwind = { path = \"../libpanic_unwind\", optional = true }\n- panic_abort = { path = \"../libpanic_abort\" }\n- core = { path = \"../libcore\" }\n-"}, {"sha": "bb76e48ad72a4a8352380061d0ea19dff4586c32", "filename": "src/abi.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4d406cdcad83c992416ad213c077e3203d75cce1/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d406cdcad83c992416ad213c077e3203d75cce1/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=4d406cdcad83c992416ad213c077e3203d75cce1", "patch": "@@ -40,7 +40,7 @@ pub fn scalar_to_clif_type(tcx: TyCtxt, scalar: Scalar) -> Type {\n }\n \n fn get_pass_mode<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx>,\n     ty: Ty<'tcx>,\n ) -> PassMode {\n     let layout = tcx.layout_of(ParamEnv::reveal_all().and(ty)).unwrap();\n@@ -76,7 +76,7 @@ fn adjust_arg_for_abi<'a, 'tcx: 'a>(\n     }\n }\n \n-fn clif_sig_from_fn_sig<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, sig: FnSig<'tcx>) -> Signature {\n+fn clif_sig_from_fn_sig<'tcx>(tcx: TyCtxt<'tcx>, sig: FnSig<'tcx>) -> Signature {\n     let (call_conv, inputs, output): (CallConv, Vec<Ty>, Ty) = match sig.abi {\n         Abi::Rust => (CallConv::SystemV, sig.inputs().to_vec(), sig.output()),\n         Abi::C => (CallConv::SystemV, sig.inputs().to_vec(), sig.output()),\n@@ -129,7 +129,7 @@ fn clif_sig_from_fn_sig<'tcx>(tcx: TyCtxt<'tcx, 'tcx>, sig: FnSig<'tcx>) -> Sign\n }\n \n pub fn get_function_name_and_sig<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx>,\n     inst: Instance<'tcx>,\n     support_vararg: bool,\n ) -> (String, Signature) {\n@@ -144,7 +144,7 @@ pub fn get_function_name_and_sig<'tcx>(\n \n /// Instance must be monomorphized\n pub fn import_function<'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx>,\n     module: &mut Module<impl Backend>,\n     inst: Instance<'tcx>,\n ) -> FuncId {"}, {"sha": "26b6e39b341a7d128571edfe34b087d33c3927db", "filename": "src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d406cdcad83c992416ad213c077e3203d75cce1/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d406cdcad83c992416ad213c077e3203d75cce1/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=4d406cdcad83c992416ad213c077e3203d75cce1", "patch": "@@ -18,7 +18,7 @@ pub fn trans_fn<'a, 'clif, 'tcx: 'a, B: Backend + 'static>(\n         // Check sig for u128 and i128\n         let fn_sig = tcx.normalize_erasing_late_bound_regions(ParamEnv::reveal_all(), &instance.fn_sig(tcx));\n \n-        struct UI128Visitor<'tcx>(TyCtxt<'tcx, 'tcx>, bool);\n+        struct UI128Visitor<'tcx>(TyCtxt<'tcx>, bool);\n \n         impl<'tcx> rustc::ty::fold::TypeVisitor<'tcx> for UI128Visitor<'tcx> {\n             fn visit_ty(&mut self, t: Ty<'tcx>) -> bool {"}, {"sha": "bffa526c8b40880373679f25a5e888e3481d798e", "filename": "src/common.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4d406cdcad83c992416ad213c077e3203d75cce1/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d406cdcad83c992416ad213c077e3203d75cce1/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=4d406cdcad83c992416ad213c077e3203d75cce1", "patch": "@@ -17,8 +17,8 @@ pub fn pointer_ty(tcx: TyCtxt) -> types::Type {\n     }\n }\n \n-pub fn clif_type_from_ty<'a, 'tcx: 'a>(\n-    tcx: TyCtxt<'tcx, 'tcx>,\n+pub fn clif_type_from_ty<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n     ty: Ty<'tcx>,\n ) -> Option<types::Type> {\n     Some(match ty.sty {\n@@ -95,7 +95,7 @@ pub fn clif_intcast<'a, 'tcx: 'a>(\n \n pub struct FunctionCx<'a, 'tcx: 'a, B: Backend> {\n     // FIXME use a reference to `CodegenCx` instead of `tcx`, `module` and `constants` and `caches`\n-    pub tcx: TyCtxt<'tcx, 'tcx>,\n+    pub tcx: TyCtxt<'tcx>,\n     pub module: &'a mut Module<B>,\n     pub pointer_type: Type, // Cached from module\n \n@@ -123,7 +123,7 @@ impl<'a, 'tcx: 'a, B: Backend> LayoutOf for FunctionCx<'a, 'tcx, B> {\n }\n \n impl<'a, 'tcx, B: Backend + 'a> layout::HasTyCtxt<'tcx> for FunctionCx<'a, 'tcx, B> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx, 'tcx> {\n+    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n }"}, {"sha": "60c583fd67c2e42f5a9150670d06e21dda9aceb9", "filename": "src/constant.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4d406cdcad83c992416ad213c077e3203d75cce1/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d406cdcad83c992416ad213c077e3203d75cce1/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=4d406cdcad83c992416ad213c077e3203d75cce1", "patch": "@@ -26,10 +26,10 @@ enum TodoItem {\n }\n \n impl ConstantCx {\n-    pub fn finalize<'a, 'tcx: 'a, B: Backend>(\n+    pub fn finalize(\n         mut self,\n-        tcx: TyCtxt<'tcx, 'tcx>,\n-        module: &mut Module<B>,\n+        tcx: TyCtxt<'_>,\n+        module: &mut Module<impl Backend>,\n     ) {\n         //println!(\"todo {:?}\", self.todo);\n         define_all_allocs(tcx, module, &mut self);\n@@ -38,7 +38,7 @@ impl ConstantCx {\n     }\n }\n \n-pub fn codegen_static<'a, 'tcx: 'a>(ccx: &mut ConstantCx, def_id: DefId) {\n+pub fn codegen_static(ccx: &mut ConstantCx, def_id: DefId) {\n     ccx.todo.insert(TodoItem::Static(def_id));\n }\n \n@@ -177,15 +177,15 @@ fn trans_const_place<'a, 'tcx: 'a>(\n     cplace_for_dataid(fx, const_.ty, data_id)\n }\n \n-fn data_id_for_alloc_id<B: Backend>(module: &mut Module<B>, alloc_id: AllocId) -> DataId {\n+fn data_id_for_alloc_id(module: &mut Module<impl Backend>, alloc_id: AllocId) -> DataId {\n     module\n         .declare_data(&format!(\"__alloc_{}\", alloc_id.0), Linkage::Local, false, None)\n         .unwrap()\n }\n \n-fn data_id_for_static<'a, 'tcx: 'a, B: Backend>(\n-    tcx: TyCtxt<'tcx, 'tcx>,\n-    module: &mut Module<B>,\n+fn data_id_for_static(\n+    tcx: TyCtxt<'_>,\n+    module: &mut Module<impl Backend>,\n     def_id: DefId,\n     linkage: Linkage,\n ) -> DataId {\n@@ -237,9 +237,9 @@ fn cplace_for_dataid<'a, 'tcx: 'a>(\n     CPlace::for_addr(global_ptr, layout)\n }\n \n-fn define_all_allocs<'a, 'tcx: 'a, B: Backend + 'a>(\n-    tcx: TyCtxt<'tcx, 'tcx>,\n-    module: &mut Module<B>,\n+fn define_all_allocs(\n+    tcx: TyCtxt<'_>,\n+    module: &mut Module<impl Backend>,\n     cx: &mut ConstantCx,\n ) {\n     let memory = Memory::<TransPlaceInterpreter>::new(tcx.at(DUMMY_SP));\n@@ -374,7 +374,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for TransPlaceInterpreter {\n \n     fn find_foreign_static(\n         _: DefId,\n-        _: ::rustc::ty::query::TyCtxtAt<'tcx, 'tcx>,\n+        _: ::rustc::ty::query::TyCtxtAt<'tcx>,\n     ) -> InterpResult<'tcx, Cow<'tcx, Allocation>> {\n         panic!();\n     }"}, {"sha": "ab63d12594518c53e90386f3f866954204d49b8f", "filename": "src/debuginfo.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4d406cdcad83c992416ad213c077e3203d75cce1/src%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d406cdcad83c992416ad213c077e3203d75cce1/src%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo.rs?ref=4d406cdcad83c992416ad213c077e3203d75cce1", "patch": "@@ -92,7 +92,7 @@ pub struct DebugContext<'tcx> {\n     _dummy: PhantomData<&'tcx ()>,\n }\n \n-impl<'a, 'tcx: 'a> DebugContext<'tcx> {\n+impl<'tcx> DebugContext<'tcx> {\n     pub fn new(tcx: TyCtxt, address_size: u8) -> Self {\n         let encoding = Encoding {\n             format: Format::Dwarf32,\n@@ -155,7 +155,7 @@ impl<'a, 'tcx: 'a> DebugContext<'tcx> {\n         }\n     }\n \n-    fn emit_location(&mut self, tcx: TyCtxt<'tcx, 'tcx>, entry_id: UnitEntryId, span: Span) {\n+    fn emit_location(&mut self, tcx: TyCtxt<'tcx>, entry_id: UnitEntryId, span: Span) {\n         let loc = tcx.sess.source_map().lookup_char_pos(span.lo());\n \n         let file_id = line_program_add_file(\n@@ -230,9 +230,9 @@ pub struct FunctionDebugContext<'a, 'tcx> {\n     mir_span: Span,\n }\n \n-impl<'a, 'b, 'tcx: 'b> FunctionDebugContext<'a, 'tcx> {\n+impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n     pub fn new(\n-        tcx: TyCtxt<'tcx, 'tcx>,\n+        tcx: TyCtxt<'tcx>,\n         debug_context: &'a mut DebugContext<'tcx>,\n         mir: &Body,\n         name: &str,"}, {"sha": "413f9f4e04840c419cb85688a3409ca3f2e27ee2", "filename": "src/driver.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4d406cdcad83c992416ad213c077e3203d75cce1/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d406cdcad83c992416ad213c077e3203d75cce1/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=4d406cdcad83c992416ad213c077e3203d75cce1", "patch": "@@ -13,8 +13,8 @@ use cranelift_faerie::*;\n \n use crate::prelude::*;\n \n-pub fn codegen_crate<'a, 'tcx>(\n-    tcx: TyCtxt<'tcx, 'tcx>,\n+pub fn codegen_crate(\n+    tcx: TyCtxt<'_>,\n     metadata: EncodedMetadata,\n     need_metadata_module: bool,\n ) -> Box<dyn Any> {\n@@ -45,7 +45,7 @@ pub fn codegen_crate<'a, 'tcx>(\n }\n \n #[cfg(not(target_arch = \"wasm32\"))]\n-fn run_jit<'a, 'tcx: 'a>(tcx: TyCtxt<'tcx, 'tcx>, log: &mut Option<File>) -> ! {\n+fn run_jit(tcx: TyCtxt<'_>, log: &mut Option<File>) -> ! {\n     use cranelift_simplejit::{SimpleJITBackend, SimpleJITBuilder};\n \n     let mut jit_module: Module<SimpleJITBackend> = Module::new(SimpleJITBuilder::new(\n@@ -95,8 +95,8 @@ fn run_jit<'a, 'tcx: 'a>(tcx: TyCtxt<'tcx, 'tcx>, log: &mut Option<File>) -> ! {\n     std::process::exit(ret);\n }\n \n-fn run_aot<'a, 'tcx: 'a>(\n-    tcx: TyCtxt<'tcx, 'tcx>,\n+fn run_aot(\n+    tcx: TyCtxt<'_>,\n     metadata: EncodedMetadata,\n     need_metadata_module: bool,\n     log: &mut Option<File>,\n@@ -224,8 +224,8 @@ fn run_aot<'a, 'tcx: 'a>(\n     })\n }\n \n-fn codegen_cgus<'a, 'tcx: 'a>(\n-    tcx: TyCtxt<'tcx, 'tcx>,\n+fn codegen_cgus<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n     module: &mut Module<impl Backend + 'static>,\n     debug: &mut Option<DebugContext<'tcx>>,\n     log: &mut Option<File>,\n@@ -242,8 +242,8 @@ fn codegen_cgus<'a, 'tcx: 'a>(\n     crate::main_shim::maybe_create_entry_wrapper(tcx, module);\n }\n \n-fn codegen_mono_items<'a, 'tcx: 'a>(\n-    tcx: TyCtxt<'tcx, 'tcx>,\n+fn codegen_mono_items<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n     module: &mut Module<impl Backend + 'static>,\n     debug_context: Option<&mut DebugContext<'tcx>>,\n     log: &mut Option<File>,\n@@ -262,7 +262,7 @@ fn codegen_mono_items<'a, 'tcx: 'a>(\n     });\n }\n \n-fn trans_mono_item<'a, 'clif, 'tcx: 'a, B: Backend + 'static>(\n+fn trans_mono_item<'clif, 'tcx, B: Backend + 'static>(\n     cx: &mut crate::CodegenCx<'clif, 'tcx, B>,\n     mono_item: MonoItem<'tcx>,\n     linkage: Linkage,"}, {"sha": "0d7cab1f8e341c58d82fa4dbb3879cbb07cb7af9", "filename": "src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4d406cdcad83c992416ad213c077e3203d75cce1/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d406cdcad83c992416ad213c077e3203d75cce1/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=4d406cdcad83c992416ad213c077e3203d75cce1", "patch": "@@ -113,7 +113,7 @@ pub struct Caches<'tcx> {\n     pub vtables: HashMap<(Ty<'tcx>, Option<ty::PolyExistentialTraitRef<'tcx>>), DataId>,\n }\n \n-impl<'tcx> Default for Caches<'tcx> {\n+impl Default for Caches<'_> {\n     fn default() -> Self {\n         Caches {\n             context: Context::new(),\n@@ -123,7 +123,7 @@ impl<'tcx> Default for Caches<'tcx> {\n }\n \n pub struct CodegenCx<'clif, 'tcx, B: Backend + 'static> {\n-    tcx: TyCtxt<'tcx, 'tcx>,\n+    tcx: TyCtxt<'tcx>,\n     module: &'clif mut Module<B>,\n     ccx: ConstantCx,\n     caches: Caches<'tcx>,\n@@ -132,7 +132,7 @@ pub struct CodegenCx<'clif, 'tcx, B: Backend + 'static> {\n \n impl<'clif, 'tcx, B: Backend + 'static> CodegenCx<'clif, 'tcx, B> {\n     fn new(\n-        tcx: TyCtxt<'tcx, 'tcx>,\n+        tcx: TyCtxt<'tcx>,\n         module: &'clif mut Module<B>,\n         debug_context: Option<&'clif mut DebugContext<'tcx>>,\n     ) -> Self {\n@@ -193,9 +193,9 @@ impl CodegenBackend for CraneliftCodegenBackend {\n         rustc_codegen_ssa::back::symbol_export::provide_extern(providers);\n     }\n \n-    fn codegen_crate<'a, 'tcx>(\n+    fn codegen_crate<'tcx>(\n         &self,\n-        tcx: TyCtxt<'tcx, 'tcx>,\n+        tcx: TyCtxt<'tcx>,\n         metadata: EncodedMetadata,\n         need_metadata_module: bool,\n         _rx: mpsc::Receiver<Box<dyn Any + Send>>,"}, {"sha": "1dae9e32baad31b4a76629729e6e80b188aa9172", "filename": "src/main_shim.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4d406cdcad83c992416ad213c077e3203d75cce1/src%2Fmain_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d406cdcad83c992416ad213c077e3203d75cce1/src%2Fmain_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain_shim.rs?ref=4d406cdcad83c992416ad213c077e3203d75cce1", "patch": "@@ -2,8 +2,8 @@ use crate::prelude::*;\n \n /// Create the `main` function which will initialize the rust runtime and call\n /// users main function.\n-pub fn maybe_create_entry_wrapper<'a, 'tcx: 'a>(\n-    tcx: TyCtxt<'tcx, 'tcx>,\n+pub fn maybe_create_entry_wrapper(\n+    tcx: TyCtxt<'_>,\n     module: &mut Module<impl Backend + 'static>,\n ) {\n     use rustc::middle::lang_items::StartFnLangItem;\n@@ -22,8 +22,8 @@ pub fn maybe_create_entry_wrapper<'a, 'tcx: 'a>(\n \n     create_entry_fn(tcx, module, main_def_id, use_start_lang_item);;\n \n-    fn create_entry_fn<'a, 'tcx: 'a>(\n-        tcx: TyCtxt<'tcx, 'tcx>,\n+    fn create_entry_fn(\n+        tcx: TyCtxt<'_>,\n         m: &mut Module<impl Backend + 'static>,\n         rust_main_def_id: DefId,\n         use_start_lang_item: bool,"}, {"sha": "265a160e7a8e4f26f8f56f21f8ceda0cefce62c4", "filename": "src/metadata.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d406cdcad83c992416ad213c077e3203d75cce1/src%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d406cdcad83c992416ad213c077e3203d75cce1/src%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmetadata.rs?ref=4d406cdcad83c992416ad213c077e3203d75cce1", "patch": "@@ -48,8 +48,8 @@ impl MetadataLoader for CraneliftMetadataLoader {\n }\n \n // Adapted from https://github.com/rust-lang/rust/blob/da573206f87b5510de4b0ee1a9c044127e409bd3/src/librustc_codegen_llvm/base.rs#L47-L112\n-pub fn write_metadata<'a, 'gcx>(\n-    tcx: TyCtxt<'gcx, 'gcx>,\n+pub fn write_metadata(\n+    tcx: TyCtxt<'_>,\n     artifact: &mut faerie::Artifact\n ) -> EncodedMetadata {\n     use std::io::Write;"}, {"sha": "57fcebe79c26fccbb552e5141a5f33a688d86132", "filename": "src/pretty_clif.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4d406cdcad83c992416ad213c077e3203d75cce1/src%2Fpretty_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d406cdcad83c992416ad213c077e3203d75cce1/src%2Fpretty_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpretty_clif.rs?ref=4d406cdcad83c992416ad213c077e3203d75cce1", "patch": "@@ -77,7 +77,7 @@ pub struct CommentWriter {\n }\n \n impl CommentWriter {\n-    pub fn new<'a, 'tcx: 'a>(tcx: TyCtxt<'tcx, 'tcx>, instance: Instance<'tcx>) -> Self {\n+    pub fn new<'tcx>(tcx: TyCtxt<'tcx>, instance: Instance<'tcx>) -> Self {\n         CommentWriter {\n             global_comments: vec![\n                 format!(\"symbol {}\", tcx.symbol_name(instance).as_str()),\n@@ -91,7 +91,7 @@ impl CommentWriter {\n     }\n }\n \n-impl<'a> FuncWriter for &'a CommentWriter {\n+impl FuncWriter for &'_ CommentWriter {\n     fn write_preamble(\n         &mut self,\n         w: &mut dyn fmt::Write,\n@@ -193,8 +193,8 @@ impl<'a, 'tcx: 'a, B: Backend + 'a> FunctionCx<'a, 'tcx, B> {\n     }\n }\n \n-pub fn write_clif_file<'a, 'tcx: 'a>(\n-    tcx: TyCtxt<'tcx, 'tcx>,\n+pub fn write_clif_file<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n     postfix: &str,\n     instance: Instance<'tcx>,\n     func: &ir::Function,"}]}