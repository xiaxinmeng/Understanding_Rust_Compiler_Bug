{"sha": "1d9ab77eb75b4fa71883831ce883ce8ff508bda1", "node_id": "C_kwDOAAsO6NoAKDFkOWFiNzdlYjc1YjRmYTcxODgzODMxY2U4ODNjZThmZjUwOGJkYTE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-15T01:25:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-15T01:25:14Z"}, "message": "Rollup merge of #92382 - clarfonthey:const_convert, r=scottmcm\n\nExtend const_convert to rest of blanket core::convert impls\n\nThis adds constness to all the blanket impls in `core::convert` under the existing `const_convert` feature, tracked by #88674.\n\nExisting impls under that feature:\n\n```rust\nimpl<T> const From<T> for T;\nimpl<T, U> const Into<U> for T where U: ~const From<T>;\n\nimpl<T> const ops::Try for Option<T>;\nimpl<T> const ops::FromResidual for Option<T>;\n\nimpl<T, E> const ops::Try for Result<T, E>;\nimpl<T, E, F> const ops::FromResidual<Result<convert::Infallible, E>> for Result<T, F> where F: ~const From<E>;\n```\n\nAdditional impls:\n\n```rust\nimpl<T: ?Sized, U: ?Sized> const AsRef<U> for &T where T: ~const AsRef<U>;\nimpl<T: ?Sized, U: ?Sized> const AsRef<U> for &mut T where T: ~const AsRef<U>;\nimpl<T: ?Sized, U: ?Sized> const AsMut<U> for &mut T where T: ~const AsMut<U>;\n\nimpl<T, U> const TryInto<U> for T where U: ~const TryFrom<T>;\nimpl<T, U> const TryFrom<U> for T where U: ~const Into<T>;\n```", "tree": {"sha": "3c98dae6709c78ba477df68258c7b06c7fb58b20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c98dae6709c78ba477df68258c7b06c7fb58b20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d9ab77eb75b4fa71883831ce883ce8ff508bda1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh4iJ7CRBK7hj4Ov3rIwAAqecIAKa1VWnTwuZQuAqYGnHr9fiL\nkKyWeCYuR2L183rhbtep5diX5MEpRR71T4nxfCKUgihNyKSUov7sRfdo2j6BymWE\neXHSE/96Hzs92si+RTFaphtJkU+G9kevVYCbdHAMShLKAxm7FuRm3q2JtCkyA/WG\nIfI9Nuex++kOgGTuDLH37KNmurwsSeROMiavaTbxRNg3w4U8WuJEv2Q99285kLac\nnzfUB4UrfQZRWPerJ2ba2H+HFHfyiceJRWZfaOXAILJ5Sw9mKzaa9+8fVjG6ldao\nx2FGDVpAmS/tRHNAkP7QQWHDntqxm1r+/cNnxDv9CPYOcyRg5G4FNIhO1G2klEw=\n=AGLM\n-----END PGP SIGNATURE-----\n", "payload": "tree 3c98dae6709c78ba477df68258c7b06c7fb58b20\nparent 64716825b01daedf8eb97b14b128bdab8b3b0f45\nparent b1b873f3659fb8f9c6fd64b7c78126152694495d\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1642209914 +0100\ncommitter GitHub <noreply@github.com> 1642209914 +0100\n\nRollup merge of #92382 - clarfonthey:const_convert, r=scottmcm\n\nExtend const_convert to rest of blanket core::convert impls\n\nThis adds constness to all the blanket impls in `core::convert` under the existing `const_convert` feature, tracked by #88674.\n\nExisting impls under that feature:\n\n```rust\nimpl<T> const From<T> for T;\nimpl<T, U> const Into<U> for T where U: ~const From<T>;\n\nimpl<T> const ops::Try for Option<T>;\nimpl<T> const ops::FromResidual for Option<T>;\n\nimpl<T, E> const ops::Try for Result<T, E>;\nimpl<T, E, F> const ops::FromResidual<Result<convert::Infallible, E>> for Result<T, F> where F: ~const From<E>;\n```\n\nAdditional impls:\n\n```rust\nimpl<T: ?Sized, U: ?Sized> const AsRef<U> for &T where T: ~const AsRef<U>;\nimpl<T: ?Sized, U: ?Sized> const AsRef<U> for &mut T where T: ~const AsRef<U>;\nimpl<T: ?Sized, U: ?Sized> const AsMut<U> for &mut T where T: ~const AsMut<U>;\n\nimpl<T, U> const TryInto<U> for T where U: ~const TryFrom<T>;\nimpl<T, U> const TryFrom<U> for T where U: ~const Into<T>;\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d9ab77eb75b4fa71883831ce883ce8ff508bda1", "html_url": "https://github.com/rust-lang/rust/commit/1d9ab77eb75b4fa71883831ce883ce8ff508bda1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d9ab77eb75b4fa71883831ce883ce8ff508bda1/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64716825b01daedf8eb97b14b128bdab8b3b0f45", "url": "https://api.github.com/repos/rust-lang/rust/commits/64716825b01daedf8eb97b14b128bdab8b3b0f45", "html_url": "https://github.com/rust-lang/rust/commit/64716825b01daedf8eb97b14b128bdab8b3b0f45"}, {"sha": "b1b873f3659fb8f9c6fd64b7c78126152694495d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1b873f3659fb8f9c6fd64b7c78126152694495d", "html_url": "https://github.com/rust-lang/rust/commit/b1b873f3659fb8f9c6fd64b7c78126152694495d"}], "stats": {"total": 25, "additions": 15, "deletions": 10}, "files": [{"sha": "5566c2ffe87deeed0a75bb26e745f2527cd5e079", "filename": "library/core/src/convert/mod.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1d9ab77eb75b4fa71883831ce883ce8ff508bda1/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d9ab77eb75b4fa71883831ce883ce8ff508bda1/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs?ref=1d9ab77eb75b4fa71883831ce883ce8ff508bda1", "patch": "@@ -481,9 +481,10 @@ pub trait TryFrom<T>: Sized {\n \n // As lifts over &\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: ?Sized, U: ?Sized> AsRef<U> for &T\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl<T: ?Sized, U: ?Sized> const AsRef<U> for &T\n where\n-    T: AsRef<U>,\n+    T: ~const AsRef<U>,\n {\n     fn as_ref(&self) -> &U {\n         <T as AsRef<U>>::as_ref(*self)\n@@ -492,9 +493,10 @@ where\n \n // As lifts over &mut\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: ?Sized, U: ?Sized> AsRef<U> for &mut T\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl<T: ?Sized, U: ?Sized> const AsRef<U> for &mut T\n where\n-    T: AsRef<U>,\n+    T: ~const AsRef<U>,\n {\n     fn as_ref(&self) -> &U {\n         <T as AsRef<U>>::as_ref(*self)\n@@ -511,9 +513,10 @@ where\n \n // AsMut lifts over &mut\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: ?Sized, U: ?Sized> AsMut<U> for &mut T\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl<T: ?Sized, U: ?Sized> const AsMut<U> for &mut T\n where\n-    T: AsMut<U>,\n+    T: ~const AsMut<U>,\n {\n     fn as_mut(&mut self) -> &mut U {\n         (*self).as_mut()\n@@ -567,9 +570,10 @@ impl<T> const From<!> for T {\n \n // TryFrom implies TryInto\n #[stable(feature = \"try_from\", since = \"1.34.0\")]\n-impl<T, U> TryInto<U> for T\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl<T, U> const TryInto<U> for T\n where\n-    U: TryFrom<T>,\n+    U: ~const TryFrom<T>,\n {\n     type Error = U::Error;\n \n@@ -581,9 +585,10 @@ where\n // Infallible conversions are semantically equivalent to fallible conversions\n // with an uninhabited error type.\n #[stable(feature = \"try_from\", since = \"1.34.0\")]\n-impl<T, U> TryFrom<U> for T\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl<T, U> const TryFrom<U> for T\n where\n-    U: Into<T>,\n+    U: ~const Into<T>,\n {\n     type Error = Infallible;\n "}]}