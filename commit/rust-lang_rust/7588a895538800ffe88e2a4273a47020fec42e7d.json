{"sha": "7588a895538800ffe88e2a4273a47020fec42e7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1ODhhODk1NTM4ODAwZmZlODhlMmE0MjczYTQ3MDIwZmVjNDJlN2Q=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-08-19T08:24:13Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-08-22T08:42:56Z"}, "message": "Rename copy_glue back to take_glue", "tree": {"sha": "48cee1b61f56a4bce881126a855051cd2102744d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48cee1b61f56a4bce881126a855051cd2102744d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7588a895538800ffe88e2a4273a47020fec42e7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7588a895538800ffe88e2a4273a47020fec42e7d", "html_url": "https://github.com/rust-lang/rust/commit/7588a895538800ffe88e2a4273a47020fec42e7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7588a895538800ffe88e2a4273a47020fec42e7d/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b24f97801138cb675fbb9e9151d189b6527c4ef5", "url": "https://api.github.com/repos/rust-lang/rust/commits/b24f97801138cb675fbb9e9151d189b6527c4ef5", "html_url": "https://github.com/rust-lang/rust/commit/b24f97801138cb675fbb9e9151d189b6527c4ef5"}], "stats": {"total": 60, "additions": 30, "deletions": 30}, "files": [{"sha": "3ee9a546718276b6404b0e6920fa44f49c252f35", "filename": "src/comp/back/abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7588a895538800ffe88e2a4273a47020fec42e7d/src%2Fcomp%2Fback%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7588a895538800ffe88e2a4273a47020fec42e7d/src%2Fcomp%2Fback%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fabi.rs?ref=7588a895538800ffe88e2a4273a47020fec42e7d", "patch": "@@ -49,7 +49,7 @@ const vec_elt_data: int = 4;\n const tydesc_field_first_param: int = 0;\n const tydesc_field_size: int = 1;\n const tydesc_field_align: int = 2;\n-const tydesc_field_copy_glue: int = 3;\n+const tydesc_field_take_glue: int = 3;\n const tydesc_field_drop_glue: int = 4;\n const tydesc_field_free_glue: int = 5;\n const tydesc_field_sever_glue: int = 6;"}, {"sha": "2271fe43ede288babc68a9f0f179d380dfcb35d9", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/7588a895538800ffe88e2a4273a47020fec42e7d/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7588a895538800ffe88e2a4273a47020fec42e7d/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=7588a895538800ffe88e2a4273a47020fec42e7d", "patch": "@@ -1116,7 +1116,7 @@ fn declare_tydesc(cx: &@local_ctxt, sp: &span, t: &ty::t, ty_params: &[uint])\n           tydesc: gvar,\n           size: llsize,\n           align: llalign,\n-          mutable copy_glue: none::<ValueRef>,\n+          mutable take_glue: none::<ValueRef>,\n           mutable drop_glue: none::<ValueRef>,\n           mutable free_glue: none::<ValueRef>,\n           mutable cmp_glue: none::<ValueRef>,\n@@ -1202,8 +1202,8 @@ fn emit_tydescs(ccx: &@crate_ctxt) {\n         let glue_fn_ty = T_ptr(T_glue_fn(*ccx));\n         let cmp_fn_ty = T_ptr(T_cmp_glue_fn(*ccx));\n         let ti = pair.val;\n-        let copy_glue =\n-            alt { ti.copy_glue } {\n+        let take_glue =\n+            alt { ti.take_glue } {\n               none. { ccx.stats.n_null_glues += 1u; C_null(glue_fn_ty) }\n               some(v) { ccx.stats.n_real_glues += 1u; v }\n             };\n@@ -1233,7 +1233,7 @@ fn emit_tydescs(ccx: &@crate_ctxt) {\n                            [C_null(T_ptr(T_ptr(ccx.tydesc_type))),\n                             ti.size, // size\n                             ti.align, // align\n-                            copy_glue, // copy_glue\n+                            take_glue, // take_glue\n                             drop_glue, // drop_glue\n                             free_glue, // free_glue\n                             C_null(glue_fn_ty), // sever_glue\n@@ -1253,7 +1253,7 @@ fn emit_tydescs(ccx: &@crate_ctxt) {\n     }\n }\n \n-fn make_copy_glue(cx: &@block_ctxt, v: ValueRef, t: &ty::t) {\n+fn make_take_glue(cx: &@block_ctxt, v: ValueRef, t: &ty::t) {\n     // NB: v is an *alias* of type t here, not a direct value.\n \n     let bcx;\n@@ -1262,7 +1262,7 @@ fn make_copy_glue(cx: &@block_ctxt, v: ValueRef, t: &ty::t) {\n         bcx = incr_refcnt_of_boxed(cx, cx.build.Load(v)).bcx;\n     } else if ty::type_is_structural(bcx_tcx(cx), t) {\n         bcx = duplicate_heap_parts_if_necessary(cx, v, t).bcx;\n-        bcx = iter_structural_ty(bcx, v, t, bind copy_ty(_, _, _)).bcx;\n+        bcx = iter_structural_ty(bcx, v, t, bind take_ty(_, _, _)).bcx;\n     } else { bcx = cx; }\n \n     build_return(bcx);\n@@ -1966,7 +1966,7 @@ fn iter_sequence(cx: @block_ctxt, v: ValueRef, t: &ty::t, f: &val_and_ty_fn)\n \n fn lazily_emit_all_tydesc_glue(cx: &@block_ctxt,\n                                static_ti: &option::t<@tydesc_info>) {\n-    lazily_emit_tydesc_glue(cx, abi::tydesc_field_copy_glue, static_ti);\n+    lazily_emit_tydesc_glue(cx, abi::tydesc_field_take_glue, static_ti);\n     lazily_emit_tydesc_glue(cx, abi::tydesc_field_drop_glue, static_ti);\n     lazily_emit_tydesc_glue(cx, abi::tydesc_field_free_glue, static_ti);\n     lazily_emit_tydesc_glue(cx, abi::tydesc_field_cmp_glue, static_ti);\n@@ -1984,18 +1984,18 @@ fn lazily_emit_tydesc_glue(cx: &@block_ctxt, field: int,\n     alt static_ti {\n       none. { }\n       some(ti) {\n-        if field == abi::tydesc_field_copy_glue {\n-            alt { ti.copy_glue } {\n+        if field == abi::tydesc_field_take_glue {\n+            alt { ti.take_glue } {\n               some(_) { }\n               none. {\n                 log #fmt[\"+++ lazily_emit_tydesc_glue TAKE %s\",\n                          ty_to_str(bcx_tcx(cx), ti.ty)];\n                 let lcx = cx.fcx.lcx;\n                 let glue_fn =\n                     declare_generic_glue(lcx, ti.ty, T_glue_fn(*lcx.ccx),\n-                                         \"copy\");\n-                ti.copy_glue = some::<ValueRef>(glue_fn);\n-                make_generic_glue(lcx, cx.sp, ti.ty, glue_fn, make_copy_glue,\n+                                         \"take\");\n+                ti.take_glue = some::<ValueRef>(glue_fn);\n+                make_generic_glue(lcx, cx.sp, ti.ty, glue_fn, make_take_glue,\n                                   ti.ty_params, \"take\");\n                 log #fmt[\"--- lazily_emit_tydesc_glue TAKE %s\",\n                          ty_to_str(bcx_tcx(cx), ti.ty)];\n@@ -2059,8 +2059,8 @@ fn call_tydesc_glue_full(cx: &@block_ctxt, v: ValueRef, tydesc: ValueRef,\n     alt static_ti {\n       none. {/* no-op */ }\n       some(sti) {\n-        if field == abi::tydesc_field_copy_glue {\n-            static_glue_fn = sti.copy_glue;\n+        if field == abi::tydesc_field_take_glue {\n+            static_glue_fn = sti.take_glue;\n         } else if field == abi::tydesc_field_drop_glue {\n             static_glue_fn = sti.drop_glue;\n         } else if field == abi::tydesc_field_free_glue {\n@@ -2147,10 +2147,10 @@ fn compare(cx: &@block_ctxt, lhs: ValueRef, rhs: ValueRef, t: &ty::t,\n     ret call_cmp_glue(cx, lhs, rhs, t, llop);\n }\n \n-fn copy_ty(cx: &@block_ctxt, v: ValueRef, t: ty::t) -> result {\n+fn take_ty(cx: &@block_ctxt, v: ValueRef, t: ty::t) -> result {\n     if ty::type_has_pointers(bcx_tcx(cx), t) ||\n            ty::type_owns_heap_mem(bcx_tcx(cx), t) {\n-        ret call_tydesc_glue(cx, v, t, abi::tydesc_field_copy_glue);\n+        ret call_tydesc_glue(cx, v, t, abi::tydesc_field_take_glue);\n     }\n     ret rslt(cx, C_nil());\n }\n@@ -2257,7 +2257,7 @@ fn copy_val(cx: &@block_ctxt, action: copy_action, dst: ValueRef,\n         if action == DROP_EXISTING {\n             bcx = drop_ty(cx, cx.build.Load(dst), t).bcx;\n         } else { bcx = cx; }\n-        bcx = copy_ty(bcx, src, t).bcx;\n+        bcx = take_ty(bcx, src, t).bcx;\n         ret rslt(bcx, bcx.build.Store(src, dst));\n     } else if ty::type_is_structural(ccx.tcx, t) ||\n                   ty::type_has_dynamic_size(ccx.tcx, t) {\n@@ -2273,7 +2273,7 @@ fn copy_val(cx: &@block_ctxt, action: copy_action, dst: ValueRef,\n             do_copy_cx = drop_ty(do_copy_cx, dst, t).bcx;\n         }\n         do_copy_cx = memmove_ty(do_copy_cx, dst, src, t).bcx;\n-        do_copy_cx = copy_ty(do_copy_cx, dst, t).bcx;\n+        do_copy_cx = take_ty(do_copy_cx, dst, t).bcx;\n         do_copy_cx.build.Br(next_cx.llbb);\n \n         ret rslt(next_cx, C_nil());\n@@ -2526,7 +2526,7 @@ fn trans_evec_append(cx: &@block_ctxt, t: &ty::t, lhs: ValueRef,\n     bcx = llvec_tydesc.bcx;\n     ti = none::<@tydesc_info>;\n     let llelt_tydesc = get_tydesc(bcx, elt_ty, false, ti).result;\n-    lazily_emit_tydesc_glue(cx, abi::tydesc_field_copy_glue, ti);\n+    lazily_emit_tydesc_glue(cx, abi::tydesc_field_take_glue, ti);\n     lazily_emit_tydesc_glue(cx, abi::tydesc_field_drop_glue, ti);\n     lazily_emit_tydesc_glue(cx, abi::tydesc_field_free_glue, ti);\n     bcx = llelt_tydesc.bcx;\n@@ -2784,7 +2784,7 @@ mod ivec {\n         bcx = rs.bcx;\n         rs = get_tydesc(bcx, unit_ty, false, no_tydesc_info).result;\n         bcx = rs.bcx;\n-        lazily_emit_tydesc_glue(bcx, abi::tydesc_field_copy_glue, none);\n+        lazily_emit_tydesc_glue(bcx, abi::tydesc_field_take_glue, none);\n         lazily_emit_tydesc_glue(bcx, abi::tydesc_field_drop_glue, none);\n         lazily_emit_tydesc_glue(bcx, abi::tydesc_field_free_glue, none);\n         let rhs_len_and_data = get_len_and_data(bcx, rhs, unit_ty);\n@@ -3076,7 +3076,7 @@ mod ivec {\n     }\n \n     // NB: This does *not* adjust reference counts. The caller must have done\n-    // this via copy_ty() beforehand.\n+    // this via take_ty() beforehand.\n     fn duplicate_heap_part(cx: &@block_ctxt, orig_vptr: ValueRef,\n                            unit_ty: ty::t) -> result {\n         // Cast to an opaque interior vector if we can't trust the pointer\n@@ -4474,7 +4474,7 @@ fn trans_arg_expr(cx: &@block_ctxt, arg: &ty::arg, lldestty0: TypeRef,\n             if lv.is_mem {\n                 val = load_if_immediate(bcx, val, e_ty);\n             }\n-            bcx = copy_ty(bcx, val, e_ty).bcx;\n+            bcx = take_ty(bcx, val, e_ty).bcx;\n             add_clean_temp(bcx, val, e_ty);\n         }\n     } else if type_is_immediate(ccx, e_ty) && !lv.is_mem {\n@@ -5833,7 +5833,7 @@ fn copy_args_to_allocas(fcx: @fn_ctxt, scope: @block_ctxt,\n                 // Args that are locally assigned to need to do a local\n                 // take/drop\n                 if fcx.lcx.ccx.mut_map.contains_key(aarg.id) {\n-                    bcx = copy_ty(bcx, aval, arg_ty).bcx;\n+                    bcx = take_ty(bcx, aval, arg_ty).bcx;\n                     add_clean(scope, addr, arg_ty);\n                 }\n             }"}, {"sha": "29216296633e43434d9301629ebf3103f92623fc", "filename": "src/comp/middle/trans_alt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7588a895538800ffe88e2a4273a47020fec42e7d/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7588a895538800ffe88e2a4273a47020fec42e7d/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_alt.rs?ref=7588a895538800ffe88e2a4273a47020fec42e7d", "patch": "@@ -528,7 +528,7 @@ fn bind_irrefutable_pat(bcx: @block_ctxt, pat: &@ast::pat, val: ValueRef,\n             let alloc = trans::alloca(bcx, llty);\n             bcx = trans::memmove_ty(bcx, alloc, val, ty).bcx;\n             let loaded = trans::load_if_immediate(bcx, alloc, ty);\n-            bcx = trans::copy_ty(bcx, loaded, ty).bcx;\n+            bcx = trans::take_ty(bcx, loaded, ty).bcx;\n             table.insert(pat.id, alloc);\n             trans_common::add_clean(bcx, alloc, ty);\n         } else { table.insert(pat.id, val); }"}, {"sha": "286410e8063baa623902d8e428542d4b99e92c6a", "filename": "src/comp/middle/trans_common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7588a895538800ffe88e2a4273a47020fec42e7d/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7588a895538800ffe88e2a4273a47020fec42e7d/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_common.rs?ref=7588a895538800ffe88e2a4273a47020fec42e7d", "patch": "@@ -81,7 +81,7 @@ type tydesc_info =\n      tydesc: ValueRef,\n      size: ValueRef,\n      align: ValueRef,\n-     mutable copy_glue: option::t<ValueRef>,\n+     mutable take_glue: option::t<ValueRef>,\n      mutable drop_glue: option::t<ValueRef>,\n      mutable free_glue: option::t<ValueRef>,\n      mutable cmp_glue: option::t<ValueRef>,"}, {"sha": "a590c7e22ad9f036783c3a342c1326c3fd4c2dfe", "filename": "src/rt/rust_internal.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7588a895538800ffe88e2a4273a47020fec42e7d/src%2Frt%2Frust_internal.h", "raw_url": "https://github.com/rust-lang/rust/raw/7588a895538800ffe88e2a4273a47020fec42e7d/src%2Frt%2Frust_internal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_internal.h?ref=7588a895538800ffe88e2a4273a47020fec42e7d", "patch": "@@ -272,7 +272,7 @@ struct type_desc {\n     const type_desc **first_param;\n     size_t size;\n     size_t align;\n-    glue_fn *copy_glue;\n+    glue_fn *take_glue;\n     glue_fn *drop_glue;\n     glue_fn *free_glue;\n     glue_fn *sever_glue;    // For GC."}, {"sha": "622baad32c9fb9b289838c40df1110d66a69d878", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7588a895538800ffe88e2a4273a47020fec42e7d/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/7588a895538800ffe88e2a4273a47020fec42e7d/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=7588a895538800ffe88e2a4273a47020fec42e7d", "patch": "@@ -285,12 +285,12 @@ copy_elements(rust_task *task, type_desc *elem_t,\n     memmove(dst, src, n);\n \n     // increment the refcount of each element of the vector\n-    if (elem_t->copy_glue) {\n-        glue_fn *copy_glue = elem_t->copy_glue;\n+    if (elem_t->take_glue) {\n+        glue_fn *take_glue = elem_t->take_glue;\n         size_t elem_size = elem_t->size;\n         const type_desc **tydescs = elem_t->first_param;\n         for (char *p = dst; p < dst+n; p += elem_size) {\n-            copy_glue(NULL, task, NULL, tydescs, p);\n+            take_glue(NULL, task, NULL, tydescs, p);\n         }\n     }\n }"}]}