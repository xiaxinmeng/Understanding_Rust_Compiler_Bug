{"sha": "1cb57e2d2b6400ed6fb6d498cb5639fe6fd5d984", "node_id": "C_kwDOAAsO6NoAKDFjYjU3ZTJkMmI2NDAwZWQ2ZmI2ZDQ5OGNiNTYzOWZlNmZkNWQ5ODQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-20T16:10:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-20T16:10:40Z"}, "message": "Rollup merge of #92992 - kornelski:backtraceopt, r=Mark-Simulacrum\n\nHelp optimize out backtraces when disabled\n\nThe comment in `rust_backtrace_env` says:\n\n>    // If the `backtrace` feature of this crate isn't enabled quickly return\n>   // `None` so this can be constant propagated all over the place to turn\n>  // optimize away callers.\n\nbut this optimization has regressed, because the only caller of this function had an alternative path that unconditionally (and pointlessly) asked for a full backtrace, so the disabled state couldn't propagate.\n\nI've added a getter for the full format that respects the feature flag, so that the caller will now be able to really optimize out the disabled backtrace path. I've also made `rust_backtrace_env` trivially inlineable when backtraces are disabled.", "tree": {"sha": "5e3dcae0bc73dd3264e076302666a31f26993119", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e3dcae0bc73dd3264e076302666a31f26993119"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1cb57e2d2b6400ed6fb6d498cb5639fe6fd5d984", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh6YmACRBK7hj4Ov3rIwAANl8IAJi7Eb2koynWVFdZzkIqRd8s\nPM9klUXzLRM3GOHpZT6rMkQBrEkIMsgQHy71yPFYh/71ukgwntS6l1S6A8rkzn9P\nZ97BYmqc2P2ySnr+q59x9p+PVNnsdiQ2PGjli+1Xr3vdlf46pwTMuZLF8L58YYCI\nzAaGMmY5ql67Jm0FNNNvbj7e8mKpordDFUtloI9g6jZBYmUblB83sT2aHfK8PcUX\nQLqPV8C8jwkSb9ypIj5HwoR5z3aKqLXlX00JKCxsEvo3hwEF/LqZmbYiPBnrWssv\nmHK3ePiBuC+wr1c7rTy1A+9rTOfmncp6c2OHUi8Snrzb4tcv8fHImGB/wTs219E=\n=3YmC\n-----END PGP SIGNATURE-----\n", "payload": "tree 5e3dcae0bc73dd3264e076302666a31f26993119\nparent ed3bf67db74ffa0165bef56d1d6597f5fa56a5fa\nparent c2807525a5d7adff0e340007f73b9558f45e38b5\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1642695040 +0100\ncommitter GitHub <noreply@github.com> 1642695040 +0100\n\nRollup merge of #92992 - kornelski:backtraceopt, r=Mark-Simulacrum\n\nHelp optimize out backtraces when disabled\n\nThe comment in `rust_backtrace_env` says:\n\n>    // If the `backtrace` feature of this crate isn't enabled quickly return\n>   // `None` so this can be constant propagated all over the place to turn\n>  // optimize away callers.\n\nbut this optimization has regressed, because the only caller of this function had an alternative path that unconditionally (and pointlessly) asked for a full backtrace, so the disabled state couldn't propagate.\n\nI've added a getter for the full format that respects the feature flag, so that the caller will now be able to really optimize out the disabled backtrace path. I've also made `rust_backtrace_env` trivially inlineable when backtraces are disabled.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1cb57e2d2b6400ed6fb6d498cb5639fe6fd5d984", "html_url": "https://github.com/rust-lang/rust/commit/1cb57e2d2b6400ed6fb6d498cb5639fe6fd5d984", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1cb57e2d2b6400ed6fb6d498cb5639fe6fd5d984/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed3bf67db74ffa0165bef56d1d6597f5fa56a5fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed3bf67db74ffa0165bef56d1d6597f5fa56a5fa", "html_url": "https://github.com/rust-lang/rust/commit/ed3bf67db74ffa0165bef56d1d6597f5fa56a5fa"}, {"sha": "c2807525a5d7adff0e340007f73b9558f45e38b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2807525a5d7adff0e340007f73b9558f45e38b5", "html_url": "https://github.com/rust-lang/rust/commit/c2807525a5d7adff0e340007f73b9558f45e38b5"}], "stats": {"total": 27, "additions": 19, "deletions": 8}, "files": [{"sha": "d0f332fe5e810f9af151697d9cccdb766a5f034b", "filename": "library/std/src/panicking.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cb57e2d2b6400ed6fb6d498cb5639fe6fd5d984/library%2Fstd%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cb57e2d2b6400ed6fb6d498cb5639fe6fd5d984/library%2Fstd%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanicking.rs?ref=1cb57e2d2b6400ed6fb6d498cb5639fe6fd5d984", "patch": "@@ -263,7 +263,7 @@ fn default_hook(info: &PanicInfo<'_>) {\n     // If this is a double panic, make sure that we print a backtrace\n     // for this panic. Otherwise only print it if logging is enabled.\n     let backtrace_env = if panic_count::get_count() >= 2 {\n-        RustBacktrace::Print(crate::backtrace_rs::PrintFmt::Full)\n+        backtrace::rust_backtrace_print_full()\n     } else {\n         backtrace::rust_backtrace_env()\n     };"}, {"sha": "dc581a0675b38b95580db6953ffcda293df61cdb", "filename": "library/std/src/sys_common/backtrace.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1cb57e2d2b6400ed6fb6d498cb5639fe6fd5d984/library%2Fstd%2Fsrc%2Fsys_common%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cb57e2d2b6400ed6fb6d498cb5639fe6fd5d984/library%2Fstd%2Fsrc%2Fsys_common%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fbacktrace.rs?ref=1cb57e2d2b6400ed6fb6d498cb5639fe6fd5d984", "patch": "@@ -150,16 +150,18 @@ pub enum RustBacktrace {\n     RuntimeDisabled,\n }\n \n+// If the `backtrace` feature of this crate isn't enabled quickly return\n+// `Disabled` so this can be constant propagated all over the place to\n+// optimize away callers.\n+#[cfg(not(feature = \"backtrace\"))]\n+pub fn rust_backtrace_env() -> RustBacktrace {\n+    RustBacktrace::Disabled\n+}\n+\n // For now logging is turned off by default, and this function checks to see\n // whether the magical environment variable is present to see if it's turned on.\n+#[cfg(feature = \"backtrace\")]\n pub fn rust_backtrace_env() -> RustBacktrace {\n-    // If the `backtrace` feature of this crate isn't enabled quickly return\n-    // `None` so this can be constant propagated all over the place to turn\n-    // optimize away callers.\n-    if !cfg!(feature = \"backtrace\") {\n-        return RustBacktrace::Disabled;\n-    }\n-\n     // Setting environment variables for Fuchsia components isn't a standard\n     // or easily supported workflow. For now, always display backtraces.\n     if cfg!(target_os = \"fuchsia\") {\n@@ -189,6 +191,15 @@ pub fn rust_backtrace_env() -> RustBacktrace {\n     format\n }\n \n+/// Setting for printing the full backtrace, unless backtraces are completely disabled\n+pub(crate) fn rust_backtrace_print_full() -> RustBacktrace {\n+    if cfg!(feature = \"backtrace\") {\n+        RustBacktrace::Print(PrintFmt::Full)\n+    } else {\n+        RustBacktrace::Disabled\n+    }\n+}\n+\n /// Prints the filename of the backtrace frame.\n ///\n /// See also `output`."}]}