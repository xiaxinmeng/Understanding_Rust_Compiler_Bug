{"sha": "48ede3f031ee81be017923708e5a6e77160e09c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4ZWRlM2YwMzFlZTgxYmUwMTc5MjM3MDhlNWE2ZTc3MTYwZTA5YzM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-04-04T23:54:30Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-04-04T23:54:30Z"}, "message": "Fix another circulare deps link args issue\n\nIt turns out that the support in #49316 wasn't enough to handle all cases\nnotably the example in #48661. The underlying bug was connected to panic=abort\nwhere lang items were listed in the `missing_lang_items` sets but didn't\nactually exist anywhere.\n\nThis caused the linker backend to deduce that start-group/end-group wasn't\nneeded because not all items were defined. Instead the missing lang items that\ndon't actually need to have a definition are filtered out and not considered for\nthe start-group/end-group arguments\n\nCloses #48661", "tree": {"sha": "dde53cafe98907f9f24b9fdec8a14a01f4fe19d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dde53cafe98907f9f24b9fdec8a14a01f4fe19d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48ede3f031ee81be017923708e5a6e77160e09c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48ede3f031ee81be017923708e5a6e77160e09c3", "html_url": "https://github.com/rust-lang/rust/commit/48ede3f031ee81be017923708e5a6e77160e09c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48ede3f031ee81be017923708e5a6e77160e09c3/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5758c2dd14fd29caf7c7bb2123eb6b23443b9233", "url": "https://api.github.com/repos/rust-lang/rust/commits/5758c2dd14fd29caf7c7bb2123eb6b23443b9233", "html_url": "https://github.com/rust-lang/rust/commit/5758c2dd14fd29caf7c7bb2123eb6b23443b9233"}], "stats": {"total": 40, "additions": 29, "deletions": 11}, "files": [{"sha": "e19f4483f6569f536549ef57501d9bcebe13e025", "filename": "src/librustc/middle/weak_lang_items.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/48ede3f031ee81be017923708e5a6e77160e09c3/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48ede3f031ee81be017923708e5a6e77160e09c3/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs?ref=48ede3f031ee81be017923708e5a6e77160e09c3", "patch": "@@ -64,6 +64,24 @@ pub fn link_name(attrs: &[ast::Attribute]) -> Option<Symbol> {\n     })\n }\n \n+/// Returns whether the specified `lang_item` doesn't actually need to be\n+/// present for this compilation.\n+///\n+/// Not all lang items are always required for each compilation, particularly in\n+/// the case of panic=abort. In these situations some lang items are injected by\n+/// crates and don't actually need to be defined in libstd.\n+pub fn whitelisted(tcx: TyCtxt, lang_item: lang_items::LangItem) -> bool {\n+    // If we're not compiling with unwinding, we won't actually need these\n+    // symbols. Other panic runtimes ensure that the relevant symbols are\n+    // available to link things together, but they're never exercised.\n+    if tcx.sess.panic_strategy() != PanicStrategy::Unwind {\n+        return lang_item == lang_items::EhPersonalityLangItem ||\n+            lang_item == lang_items::EhUnwindResumeLangItem\n+    }\n+\n+    false\n+}\n+\n fn verify<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     items: &lang_items::LanguageItems) {\n     // We only need to check for the presence of weak lang items if we're\n@@ -89,18 +107,9 @@ fn verify<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         }\n     }\n \n-    // If we're not compiling with unwinding, we won't actually need these\n-    // symbols. Other panic runtimes ensure that the relevant symbols are\n-    // available to link things together, but they're never exercised.\n-    let mut whitelisted = HashSet::new();\n-    if tcx.sess.panic_strategy() != PanicStrategy::Unwind {\n-        whitelisted.insert(lang_items::EhPersonalityLangItem);\n-        whitelisted.insert(lang_items::EhUnwindResumeLangItem);\n-    }\n-\n     $(\n         if missing.contains(&lang_items::$item) &&\n-           !whitelisted.contains(&lang_items::$item) &&\n+           !whitelisted(tcx, lang_items::$item) &&\n            items.$name().is_none() {\n             tcx.sess.err(&format!(\"language item required, but not found: `{}`\",\n                                   stringify!($name)));"}, {"sha": "bea195f4f705fbf51c490c264f7aef1e78b57592", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/48ede3f031ee81be017923708e5a6e77160e09c3/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48ede3f031ee81be017923708e5a6e77160e09c3/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=48ede3f031ee81be017923708e5a6e77160e09c3", "patch": "@@ -36,6 +36,7 @@ use llvm;\n use metadata;\n use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc::middle::lang_items::StartFnLangItem;\n+use rustc::middle::weak_lang_items;\n use rustc::mir::mono::{Linkage, Visibility, Stats};\n use rustc::middle::cstore::{EncodedMetadata};\n use rustc::ty::{self, Ty, TyCtxt};\n@@ -1137,6 +1138,13 @@ impl CrateInfo {\n                     info.lang_item_to_crate.insert(item, id.krate);\n                 }\n             }\n+\n+            // No need to look for lang items that are whitelisted and don't\n+            // actually need to exist.\n+            let missing = missing.iter()\n+                .cloned()\n+                .filter(|&l| !weak_lang_items::whitelisted(tcx, l))\n+                .collect();\n             info.missing_lang_items.insert(cnum, missing);\n         }\n "}, {"sha": "6ceddc1be60f34ed51e484dac3742e8d7b498d58", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48ede3f031ee81be017923708e5a6e77160e09c3/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48ede3f031ee81be017923708e5a6e77160e09c3/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=48ede3f031ee81be017923708e5a6e77160e09c3", "patch": "@@ -407,7 +407,7 @@ struct CrateInfo {\n     wasm_custom_sections: BTreeMap<String, Vec<u8>>,\n     wasm_imports: FxHashMap<String, String>,\n     lang_item_to_crate: FxHashMap<LangItem, CrateNum>,\n-    missing_lang_items: FxHashMap<CrateNum, Lrc<Vec<LangItem>>>,\n+    missing_lang_items: FxHashMap<CrateNum, Vec<LangItem>>,\n }\n \n __build_diagnostic_array! { librustc_trans, DIAGNOSTICS }"}, {"sha": "ce3b2d46bbc7b99dffa493e96554995ef49c7a0b", "filename": "src/test/run-make-fulldeps/std-core-cycle/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/48ede3f031ee81be017923708e5a6e77160e09c3/src%2Ftest%2Frun-make-fulldeps%2Fstd-core-cycle%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/48ede3f031ee81be017923708e5a6e77160e09c3/src%2Ftest%2Frun-make-fulldeps%2Fstd-core-cycle%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fstd-core-cycle%2FMakefile?ref=48ede3f031ee81be017923708e5a6e77160e09c3", "patch": "@@ -13,3 +13,4 @@ endif\n all:\n \t$(RUSTC) bar.rs\n \t$(RUSTC) foo.rs $(FLAGS)\n+\t$(RUSTC) foo.rs $(FLAGS) -C panic=abort"}]}