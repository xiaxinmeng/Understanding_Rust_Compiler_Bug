{"sha": "47365c0d656e2e55d1b6b9dad92842540e3ed1af", "node_id": "C_kwDOAAsO6NoAKDQ3MzY1YzBkNjU2ZTJlNTVkMWI2YjlkYWQ5Mjg0MjU0MGUzZWQxYWY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-31T01:17:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-31T01:17:00Z"}, "message": "Auto merge of #97566 - compiler-errors:rollup-qfxw4j8, r=compiler-errors\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #89685 (refactor: VecDeques Iter fields to private)\n - #97172 (Optimize the diagnostic generation for `extern unsafe`)\n - #97395 (Miri call ABI check: ensure type size+align stay the same)\n - #97431 (don't do `Sized` and other return type checks on RPIT's real type)\n - #97555 (Source code page: line number click adds `NaN`)\n - #97558 (Fix typos in comment)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "d894135259174abd7972b44c9b07ed8118b522f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d894135259174abd7972b44c9b07ed8118b522f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47365c0d656e2e55d1b6b9dad92842540e3ed1af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47365c0d656e2e55d1b6b9dad92842540e3ed1af", "html_url": "https://github.com/rust-lang/rust/commit/47365c0d656e2e55d1b6b9dad92842540e3ed1af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47365c0d656e2e55d1b6b9dad92842540e3ed1af/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7be9ec27652f2c3b820d341158b0e005f42e248e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7be9ec27652f2c3b820d341158b0e005f42e248e", "html_url": "https://github.com/rust-lang/rust/commit/7be9ec27652f2c3b820d341158b0e005f42e248e"}, {"sha": "b3dc31ca9ce37a586b0d73a737aa9841671fd7c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3dc31ca9ce37a586b0d73a737aa9841671fd7c1", "html_url": "https://github.com/rust-lang/rust/commit/b3dc31ca9ce37a586b0d73a737aa9841671fd7c1"}], "stats": {"total": 181, "additions": 120, "deletions": 61}, "files": [{"sha": "10da2f803afe789b4004adedf1f427dcd6fa490d", "filename": "compiler/rustc_const_eval/src/interpret/terminator.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/47365c0d656e2e55d1b6b9dad92842540e3ed1af/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47365c0d656e2e55d1b6b9dad92842540e3ed1af/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs?ref=47365c0d656e2e55d1b6b9dad92842540e3ed1af", "patch": "@@ -185,7 +185,14 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 // No question\n                 return true;\n             }\n-            // Compare layout\n+            if caller_abi.layout.size != callee_abi.layout.size\n+                || caller_abi.layout.align.abi != callee_abi.layout.align.abi\n+            {\n+                // This cannot go well...\n+                // FIXME: What about unsized types?\n+                return false;\n+            }\n+            // The rest *should* be okay, but we are extra conservative.\n             match (caller_abi.layout.abi, callee_abi.layout.abi) {\n                 // Different valid ranges are okay (once we enforce validity,\n                 // that will take care to make it UB to leave the range, just"}, {"sha": "a915a4daa9541a287329d1ae16d7db32885f4a57", "filename": "compiler/rustc_data_structures/src/stable_hasher.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47365c0d656e2e55d1b6b9dad92842540e3ed1af/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47365c0d656e2e55d1b6b9dad92842540e3ed1af/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs?ref=47365c0d656e2e55d1b6b9dad92842540e3ed1af", "patch": "@@ -632,10 +632,10 @@ fn stable_hash_reduce<HCX, I, C, F>(\n     }\n }\n \n-/// Controls what data we do or not not hash.\n+/// Controls what data we do or do not hash.\n /// Whenever a `HashStable` implementation caches its\n /// result, it needs to include `HashingControls` as part\n-/// of the key, to ensure that is does not produce an incorrect\n+/// of the key, to ensure that it does not produce an incorrect\n /// result (for example, using a `Fingerprint` produced while\n /// hashing `Span`s when a `Fingerprint` without `Span`s is\n /// being requested)"}, {"sha": "6720399aacb0734177e8c695e50e4dac787ca766", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 15, "deletions": 26, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/47365c0d656e2e55d1b6b9dad92842540e3ed1af/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47365c0d656e2e55d1b6b9dad92842540e3ed1af/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=47365c0d656e2e55d1b6b9dad92842540e3ed1af", "patch": "@@ -996,35 +996,24 @@ impl<'a> Parser<'a> {\n     fn parse_item_foreign_mod(\n         &mut self,\n         attrs: &mut Vec<Attribute>,\n-        unsafety: Unsafe,\n+        mut unsafety: Unsafe,\n     ) -> PResult<'a, ItemInfo> {\n-        let sp_start = self.prev_token.span;\n         let abi = self.parse_abi(); // ABI?\n-        match self.parse_item_list(attrs, |p| p.parse_foreign_item(ForceCollect::No)) {\n-            Ok(items) => {\n-                let module = ast::ForeignMod { unsafety, abi, items };\n-                Ok((Ident::empty(), ItemKind::ForeignMod(module)))\n-            }\n-            Err(mut err) => {\n-                let current_qual_sp = self.prev_token.span;\n-                let current_qual_sp = current_qual_sp.to(sp_start);\n-                if let Ok(current_qual) = self.span_to_snippet(current_qual_sp) {\n-                    // FIXME(davidtwco): avoid depending on the error message text\n-                    if err.message[0].0.expect_str() == \"expected `{`, found keyword `unsafe`\" {\n-                        let invalid_qual_sp = self.token.uninterpolated_span();\n-                        let invalid_qual = self.span_to_snippet(invalid_qual_sp).unwrap();\n-\n-                        err.span_suggestion(\n-                                current_qual_sp.to(invalid_qual_sp),\n-                                &format!(\"`{}` must come before `{}`\", invalid_qual, current_qual),\n-                                format!(\"{} {}\", invalid_qual, current_qual),\n-                                Applicability::MachineApplicable,\n-                            ).note(\"keyword order for functions declaration is `pub`, `default`, `const`, `async`, `unsafe`, `extern`\");\n-                    }\n-                }\n-                Err(err)\n-            }\n+        if unsafety == Unsafe::No\n+            && self.token.is_keyword(kw::Unsafe)\n+            && self.look_ahead(1, |t| t.kind == token::OpenDelim(Delimiter::Brace))\n+        {\n+            let mut err = self.expect(&token::OpenDelim(Delimiter::Brace)).unwrap_err();\n+            err.emit();\n+            unsafety = Unsafe::Yes(self.token.span);\n+            self.eat_keyword(kw::Unsafe);\n         }\n+        let module = ast::ForeignMod {\n+            unsafety,\n+            abi,\n+            items: self.parse_item_list(attrs, |p| p.parse_foreign_item(ForceCollect::No))?,\n+        };\n+        Ok((Ident::empty(), ItemKind::ForeignMod(module)))\n     }\n \n     /// Parses a foreign item (one in an `extern { ... }` block)."}, {"sha": "7499e5efdeeab86670bfd177b2dd221f0f83dcb8", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/47365c0d656e2e55d1b6b9dad92842540e3ed1af/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47365c0d656e2e55d1b6b9dad92842540e3ed1af/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=47365c0d656e2e55d1b6b9dad92842540e3ed1af", "patch": "@@ -105,12 +105,6 @@ pub(super) fn check_fn<'a, 'tcx>(\n             DUMMY_SP,\n             param_env,\n         ));\n-    // HACK(oli-obk): we rewrite the declared return type, too, so that we don't end up inferring all\n-    // unconstrained RPIT to have `()` as their hidden type. This would happen because further down we\n-    // compare the ret_coercion with declared_ret_ty, and anything uninferred would be inferred to the\n-    // opaque type itself. That again would cause writeback to assume we have a recursive call site\n-    // and do the sadly stabilized fallback to `()`.\n-    let declared_ret_ty = ret_ty;\n     fcx.ret_coercion = Some(RefCell::new(CoerceMany::new(ret_ty)));\n     fcx.ret_type_span = Some(decl.output.span());\n \n@@ -254,7 +248,12 @@ pub(super) fn check_fn<'a, 'tcx>(\n             fcx.next_ty_var(TypeVariableOrigin { kind: TypeVariableOriginKind::DynReturnFn, span });\n         debug!(\"actual_return_ty replaced with {:?}\", actual_return_ty);\n     }\n-    fcx.demand_suptype(span, declared_ret_ty, actual_return_ty);\n+\n+    // HACK(oli-obk, compiler-errors): We should be comparing this against\n+    // `declared_ret_ty`, but then anything uninferred would be inferred to\n+    // the opaque type itself. That again would cause writeback to assume\n+    // we have a recursive call site and do the sadly stabilized fallback to `()`.\n+    fcx.demand_suptype(span, ret_ty, actual_return_ty);\n \n     // Check that a function marked as `#[panic_handler]` has signature `fn(&PanicInfo) -> !`\n     if let Some(panic_impl_did) = tcx.lang_items().panic_impl()"}, {"sha": "e696d7ed636b5ceb89fb1db60d4545b450ab91cf", "filename": "library/alloc/src/collections/vec_deque/iter.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/47365c0d656e2e55d1b6b9dad92842540e3ed1af/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47365c0d656e2e55d1b6b9dad92842540e3ed1af/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter.rs?ref=47365c0d656e2e55d1b6b9dad92842540e3ed1af", "patch": "@@ -13,9 +13,15 @@ use super::{count, wrap_index, RingSlices};\n /// [`iter`]: super::VecDeque::iter\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Iter<'a, T: 'a> {\n-    pub(crate) ring: &'a [MaybeUninit<T>],\n-    pub(crate) tail: usize,\n-    pub(crate) head: usize,\n+    ring: &'a [MaybeUninit<T>],\n+    tail: usize,\n+    head: usize,\n+}\n+\n+impl<'a, T> Iter<'a, T> {\n+    pub(super) fn new(ring: &'a [MaybeUninit<T>], tail: usize, head: usize) -> Self {\n+        Iter { ring, tail, head }\n+    }\n }\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]"}, {"sha": "e28a94386c7cd4d81ce656dbb07d6ab7b28ca75e", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/47365c0d656e2e55d1b6b9dad92842540e3ed1af/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47365c0d656e2e55d1b6b9dad92842540e3ed1af/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=47365c0d656e2e55d1b6b9dad92842540e3ed1af", "patch": "@@ -1013,7 +1013,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn iter(&self) -> Iter<'_, T> {\n-        Iter { tail: self.tail, head: self.head, ring: unsafe { self.buffer_as_slice() } }\n+        Iter::new(unsafe { self.buffer_as_slice() }, self.tail, self.head)\n     }\n \n     /// Returns a front-to-back iterator that returns mutable references.\n@@ -1192,12 +1192,8 @@ impl<T, A: Allocator> VecDeque<T, A> {\n         R: RangeBounds<usize>,\n     {\n         let (tail, head) = self.range_tail_head(range);\n-        Iter {\n-            tail,\n-            head,\n-            // The shared reference we have in &self is maintained in the '_ of Iter.\n-            ring: unsafe { self.buffer_as_slice() },\n-        }\n+        // The shared reference we have in &self is maintained in the '_ of Iter.\n+        Iter::new(unsafe { self.buffer_as_slice() }, tail, head)\n     }\n \n     /// Creates an iterator that covers the specified mutable range in the deque.\n@@ -1313,16 +1309,15 @@ impl<T, A: Allocator> VecDeque<T, A> {\n         self.head = drain_tail;\n \n         let deque = NonNull::from(&mut *self);\n-        let iter = Iter {\n-            tail: drain_tail,\n-            head: drain_head,\n+        unsafe {\n             // Crucially, we only create shared references from `self` here and read from\n             // it.  We do not write to `self` nor reborrow to a mutable reference.\n             // Hence the raw pointer we created above, for `deque`, remains valid.\n-            ring: unsafe { self.buffer_as_slice() },\n-        };\n+            let ring = self.buffer_as_slice();\n+            let iter = Iter::new(ring, drain_tail, drain_head);\n \n-        unsafe { Drain::new(drain_head, head, iter, deque) }\n+            Drain::new(drain_head, head, iter, deque)\n+        }\n     }\n \n     /// Clears the deque, removing all values."}, {"sha": "58c036e0b3ca3b53a6b1d48a74ed52125b3abd59", "filename": "src/librustdoc/html/static/js/source-script.js", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47365c0d656e2e55d1b6b9dad92842540e3ed1af/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js", "raw_url": "https://github.com/rust-lang/rust/raw/47365c0d656e2e55d1b6b9dad92842540e3ed1af/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js?ref=47365c0d656e2e55d1b6b9dad92842540e3ed1af", "patch": "@@ -205,6 +205,10 @@ const handleSourceHighlight = (function() {\n \n     return ev => {\n         let cur_line_id = parseInt(ev.target.id, 10);\n+        // It can happen when clicking not on a line number span.\n+        if (isNaN(cur_line_id)) {\n+            return;\n+        }\n         ev.preventDefault();\n \n         if (ev.shiftKey && prev_line_id) {"}, {"sha": "509739c9f295165bb579ef9729a244f302b8a6bd", "filename": "src/test/rustdoc-gui/source-code-page.goml", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/47365c0d656e2e55d1b6b9dad92842540e3ed1af/src%2Ftest%2Frustdoc-gui%2Fsource-code-page.goml", "raw_url": "https://github.com/rust-lang/rust/raw/47365c0d656e2e55d1b6b9dad92842540e3ed1af/src%2Ftest%2Frustdoc-gui%2Fsource-code-page.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsource-code-page.goml?ref=47365c0d656e2e55d1b6b9dad92842540e3ed1af", "patch": "@@ -2,9 +2,9 @@\n goto: file://|DOC_PATH|/src/test_docs/lib.rs.html\n // Check that we can click on the line number.\n click: \".line-numbers > span:nth-child(4)\" // This is the span for line 4.\n-// Unfortunately, \"#4\" isn't a valid query selector, so we have to go around that limitation\n-// by instead getting the nth span.\n-assert-attribute: (\".line-numbers > span:nth-child(4)\", {\"class\": \"line-highlighted\"})\n+// Ensure that the page URL was updated.\n+assert-document-property: ({\"URL\": \"lib.rs.html#4\"}, ENDS_WITH)\n+assert-attribute: (\"//*[@id='4']\", {\"class\": \"line-highlighted\"})\n // We now check that the good spans are highlighted\n goto: file://|DOC_PATH|/src/test_docs/lib.rs.html#4-6\n assert-attribute-false: (\".line-numbers > span:nth-child(3)\", {\"class\": \"line-highlighted\"})\n@@ -17,3 +17,13 @@ compare-elements-position: (\"//*[@id='1']\", \".rust > code > span\", (\"y\"))\n \n // Assert that the line numbers text is aligned to the right.\n assert-css: (\".line-numbers\", {\"text-align\": \"right\"})\n+\n+// Now let's check that clicking on something else than the line number doesn't\n+// do anything (and certainly not add a `#NaN` to the URL!).\n+show-text: true\n+goto: file://|DOC_PATH|/src/test_docs/lib.rs.html\n+// We use this assert-position to know where we will click.\n+assert-position: (\"//*[@id='1']\", {\"x\": 104, \"y\": 103})\n+// We click on the left of the \"1\" span but still in the \"line-number\" `<pre>`.\n+click: (103, 103)\n+assert-document-property: ({\"URL\": \"/lib.rs.html\"}, ENDS_WITH)"}, {"sha": "bd25940780a1622bf51430810c996fb154219b75", "filename": "src/test/ui/impl-trait/rpit-not-sized.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47365c0d656e2e55d1b6b9dad92842540e3ed1af/src%2Ftest%2Fui%2Fimpl-trait%2Frpit-not-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47365c0d656e2e55d1b6b9dad92842540e3ed1af/src%2Ftest%2Fui%2Fimpl-trait%2Frpit-not-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frpit-not-sized.rs?ref=47365c0d656e2e55d1b6b9dad92842540e3ed1af", "patch": "@@ -0,0 +1,6 @@\n+fn foo() -> impl ?Sized {\n+    //~^ ERROR the size for values of type `impl ?Sized` cannot be known at compilation time\n+    ()\n+}\n+\n+fn main() {}"}, {"sha": "608c94fc07237d065dca46f0f4bee8202686bbee", "filename": "src/test/ui/impl-trait/rpit-not-sized.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/47365c0d656e2e55d1b6b9dad92842540e3ed1af/src%2Ftest%2Fui%2Fimpl-trait%2Frpit-not-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47365c0d656e2e55d1b6b9dad92842540e3ed1af/src%2Ftest%2Fui%2Fimpl-trait%2Frpit-not-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frpit-not-sized.stderr?ref=47365c0d656e2e55d1b6b9dad92842540e3ed1af", "patch": "@@ -0,0 +1,12 @@\n+error[E0277]: the size for values of type `impl ?Sized` cannot be known at compilation time\n+  --> $DIR/rpit-not-sized.rs:1:13\n+   |\n+LL | fn foo() -> impl ?Sized {\n+   |             ^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `impl ?Sized`\n+   = note: the return type of a function must have a statically known size\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "1da00960adfe4cc59c1939e408acf217605d397b", "filename": "src/test/ui/parser/issues/issue-19398.stderr", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/47365c0d656e2e55d1b6b9dad92842540e3ed1af/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-19398.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47365c0d656e2e55d1b6b9dad92842540e3ed1af/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-19398.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-19398.stderr?ref=47365c0d656e2e55d1b6b9dad92842540e3ed1af", "patch": "@@ -4,15 +4,10 @@ error: expected `{`, found keyword `unsafe`\n LL | trait T {\n    |         - while parsing this item list starting here\n LL |     extern \"Rust\" unsafe fn foo();\n-   |     --------------^^^^^^\n-   |     |             |\n-   |     |             expected `{`\n-   |     help: `unsafe` must come before `extern \"Rust\"`: `unsafe extern \"Rust\"`\n+   |                   ^^^^^^ expected `{`\n LL |\n LL | }\n    | - the item list ends here\n-   |\n-   = note: keyword order for functions declaration is `pub`, `default`, `const`, `async`, `unsafe`, `extern`\n \n error: aborting due to previous error\n "}, {"sha": "77856fb67340e20de3eb20d765396eec130f591c", "filename": "src/test/ui/parser/unsafe-foreign-mod-2.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/47365c0d656e2e55d1b6b9dad92842540e3ed1af/src%2Ftest%2Fui%2Fparser%2Funsafe-foreign-mod-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47365c0d656e2e55d1b6b9dad92842540e3ed1af/src%2Ftest%2Fui%2Fparser%2Funsafe-foreign-mod-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funsafe-foreign-mod-2.rs?ref=47365c0d656e2e55d1b6b9dad92842540e3ed1af", "patch": "@@ -0,0 +1,8 @@\n+extern \"C\" unsafe {\n+               //~^ ERROR expected `{`, found keyword `unsafe`\n+               //~| ERROR extern block cannot be declared unsafe\n+    unsafe fn foo();\n+        //~^ ERROR functions in `extern` blocks cannot have qualifiers\n+}\n+\n+fn main() {}"}, {"sha": "7cc2de141ae142da6a0297006f9281ddc220497d", "filename": "src/test/ui/parser/unsafe-foreign-mod-2.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/47365c0d656e2e55d1b6b9dad92842540e3ed1af/src%2Ftest%2Fui%2Fparser%2Funsafe-foreign-mod-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47365c0d656e2e55d1b6b9dad92842540e3ed1af/src%2Ftest%2Fui%2Fparser%2Funsafe-foreign-mod-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funsafe-foreign-mod-2.stderr?ref=47365c0d656e2e55d1b6b9dad92842540e3ed1af", "patch": "@@ -0,0 +1,28 @@\n+error: expected `{`, found keyword `unsafe`\n+  --> $DIR/unsafe-foreign-mod-2.rs:1:12\n+   |\n+LL | extern \"C\" unsafe {\n+   |            ^^^^^^ expected `{`\n+\n+error: extern block cannot be declared unsafe\n+  --> $DIR/unsafe-foreign-mod-2.rs:1:12\n+   |\n+LL | extern \"C\" unsafe {\n+   |            ^^^^^^\n+\n+error: functions in `extern` blocks cannot have qualifiers\n+  --> $DIR/unsafe-foreign-mod-2.rs:4:15\n+   |\n+LL | extern \"C\" unsafe {\n+   | ----------------- in this `extern` block\n+...\n+LL |     unsafe fn foo();\n+   |               ^^^\n+   |\n+help: remove the qualifiers\n+   |\n+LL |     fn foo();\n+   |     ~~\n+\n+error: aborting due to 3 previous errors\n+"}]}