{"sha": "3eb524188451fcec6cd5ed7e3cba2404021b75eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlYjUyNDE4ODQ1MWZjZWM2Y2Q1ZWQ3ZTNjYmEyNDA0MDIxYjc1ZWI=", "commit": {"author": {"name": "matthewjasper", "email": "20113453+matthewjasper@users.noreply.github.com", "date": "2020-02-09T10:16:57Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-02-09T10:49:39Z"}, "message": "Apply suggestions from code review\n\nCo-Authored-By: varkor <github@varkor.com>", "tree": {"sha": "2247e8c2f89556b40922e67f657489bde6ae9c7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2247e8c2f89556b40922e67f657489bde6ae9c7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3eb524188451fcec6cd5ed7e3cba2404021b75eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3eb524188451fcec6cd5ed7e3cba2404021b75eb", "html_url": "https://github.com/rust-lang/rust/commit/3eb524188451fcec6cd5ed7e3cba2404021b75eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3eb524188451fcec6cd5ed7e3cba2404021b75eb/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "465b86253ce828e215d564fde53adf8742f0e3f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/465b86253ce828e215d564fde53adf8742f0e3f6", "html_url": "https://github.com/rust-lang/rust/commit/465b86253ce828e215d564fde53adf8742f0e3f6"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "85b9cbf3de15a711245348378a047e79874dc649", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3eb524188451fcec6cd5ed7e3cba2404021b75eb/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eb524188451fcec6cd5ed7e3cba2404021b75eb/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=3eb524188451fcec6cd5ed7e3cba2404021b75eb", "patch": "@@ -2286,7 +2286,7 @@ impl<'tcx> AdtDef {\n         self.flags.contains(AdtFlags::IS_BOX)\n     }\n \n-    /// Returns `true` if this is ManuallyDrop<T>.\n+    /// Returns `true` if this is `ManuallyDrop<T>`.\n     #[inline]\n     pub fn is_manually_drop(&self) -> bool {\n         self.flags.contains(AdtFlags::IS_MANUALLY_DROP)"}, {"sha": "4011c010c0355136ea47f67b498a77e66587e682", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3eb524188451fcec6cd5ed7e3cba2404021b75eb/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eb524188451fcec6cd5ed7e3cba2404021b75eb/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=3eb524188451fcec6cd5ed7e3cba2404021b75eb", "patch": "@@ -1013,12 +1013,12 @@ pub fn needs_drop_components(\n         | ty::Ref(..)\n         | ty::Str => Ok(SmallVec::new()),\n \n-        // Foreign types can never have destructors\n+        // Foreign types can never have destructors.\n         ty::Foreign(..) => Ok(SmallVec::new()),\n \n         // Pessimistically assume that all generators will require destructors\n         // as we don't know if a destructor is a noop or not until after the MIR\n-        // state transformation pass\n+        // state transformation pass.\n         ty::Generator(..) | ty::Dynamic(..) | ty::Error => Err(AlwaysRequiresDrop),\n \n         ty::Slice(ty) => needs_drop_components(ty, target_layout),"}, {"sha": "0f71246c73759353a7d8a45bd1f1b6f20355b066", "filename": "src/librustc_ty/needs_drop.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3eb524188451fcec6cd5ed7e3cba2404021b75eb/src%2Flibrustc_ty%2Fneeds_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eb524188451fcec6cd5ed7e3cba2404021b75eb/src%2Flibrustc_ty%2Fneeds_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Fneeds_drop.rs?ref=3eb524188451fcec6cd5ed7e3cba2404021b75eb", "patch": "@@ -12,9 +12,9 @@ type NeedsDropResult<T> = Result<T, AlwaysRequiresDrop>;\n fn needs_drop_raw<'tcx>(tcx: TyCtxt<'tcx>, query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool {\n     let adt_fields =\n         move |adt_def: &ty::AdtDef| tcx.adt_drop_tys(adt_def.did).map(|tys| tys.iter().copied());\n-    // If we don't know a type doesn't need drop, say it's a type parameter\n-    // without a `Copy` bound, then we conservatively return that it needs\n-    // drop.\n+    // If we don't know a type doesn't need drop, for example if it's a type\n+    // parameter without a `Copy` bound, then we conservatively return that it\n+    // needs drop.\n     let res = NeedsDropTypes::new(tcx, query.param_env, query.value, adt_fields).next().is_some();\n     debug!(\"needs_drop_raw({:?}) = {:?}\", query, res);\n     res\n@@ -25,9 +25,10 @@ struct NeedsDropTypes<'tcx, F> {\n     param_env: ty::ParamEnv<'tcx>,\n     query_ty: Ty<'tcx>,\n     seen_tys: FxHashSet<Ty<'tcx>>,\n-    /// A stack of types left to process. Each round, we pop something from the\n-    /// stack and check if it needs drop. If the result depends on whether some\n-    /// other types need drop we push them onto the stack.\n+    /// A stack of types left to process, and the recursion depth when we\n+    /// pushed that type. Each round, we pop something from the stack and check\n+    /// if it needs drop. If the result depends on whether some other types\n+    /// need drop we push them onto the stack.\n     unchecked_tys: Vec<(Ty<'tcx>, usize)>,\n     recursion_limit: usize,\n     adt_components: F,"}]}