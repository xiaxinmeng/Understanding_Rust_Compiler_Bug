{"sha": "df52e2037ab73828a29c46addf07df5522b305e5", "node_id": "C_kwDOAAsO6NoAKGRmNTJlMjAzN2FiNzM4MjhhMjljNDZhZGRmMDdkZjU1MjJiMzA1ZTU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-07T19:17:04Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-18T19:47:33Z"}, "message": "Use inttoptr to support usize as dyn* value, use pointercast to make sure pointers are compatible", "tree": {"sha": "d766f6483e7b8024d9ed8119a0707760c47586b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d766f6483e7b8024d9ed8119a0707760c47586b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df52e2037ab73828a29c46addf07df5522b305e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df52e2037ab73828a29c46addf07df5522b305e5", "html_url": "https://github.com/rust-lang/rust/commit/df52e2037ab73828a29c46addf07df5522b305e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df52e2037ab73828a29c46addf07df5522b305e5/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88e39ee3149b813af3966388a0d49a92f947e322", "url": "https://api.github.com/repos/rust-lang/rust/commits/88e39ee3149b813af3966388a0d49a92f947e322", "html_url": "https://github.com/rust-lang/rust/commit/88e39ee3149b813af3966388a0d49a92f947e322"}], "stats": {"total": 31, "additions": 31, "deletions": 0}, "files": [{"sha": "4e13d4dbcb7a4dbdbcf260218026ab762a222beb", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df52e2037ab73828a29c46addf07df5522b305e5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df52e2037ab73828a29c46addf07df5522b305e5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=df52e2037ab73828a29c46addf07df5522b305e5", "patch": "@@ -273,6 +273,14 @@ pub fn cast_to_dyn_star<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n         matches!(dst_ty.kind(), ty::Dynamic(_, _, ty::DynStar)),\n         \"destination type must be a dyn*\"\n     );\n+    // FIXME(dyn-star): We can remove this when all supported LLVMs use opaque ptrs only.\n+    let unit_ptr = bx.cx().type_ptr_to(bx.cx().type_struct(&[], false));\n+    let src = match bx.cx().type_kind(bx.cx().backend_type(src_ty_and_layout)) {\n+        TypeKind::Pointer => bx.pointercast(src, unit_ptr),\n+        TypeKind::Integer => bx.inttoptr(src, unit_ptr),\n+        // FIXME(dyn-star): We probably have to do a bitcast first, then inttoptr.\n+        kind => bug!(\"unexpected TypeKind for left-hand side of `dyn*` cast: {kind:?}\"),\n+    };\n     (src, unsized_info(bx, src_ty_and_layout.ty, dst_ty, old_info))\n }\n "}, {"sha": "d35519632becf0ea033c086c2c4c9ebe754f3bcd", "filename": "tests/ui/dyn-star/llvm-old-style-ptrs.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/df52e2037ab73828a29c46addf07df5522b305e5/tests%2Fui%2Fdyn-star%2Fllvm-old-style-ptrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df52e2037ab73828a29c46addf07df5522b305e5/tests%2Fui%2Fdyn-star%2Fllvm-old-style-ptrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdyn-star%2Fllvm-old-style-ptrs.rs?ref=df52e2037ab73828a29c46addf07df5522b305e5", "patch": "@@ -0,0 +1,23 @@\n+// run-pass\n+// compile-flags: -Copt-level=0 -Cllvm-args=-opaque-pointers=0\n+\n+// (opaque-pointers flag is called force-opaque-pointers in LLVM 13...)\n+// min-llvm-version: 14.0\n+\n+// This test can be removed once non-opaque pointers are gone from LLVM, maybe.\n+\n+#![feature(dyn_star, pointer_like_trait)]\n+#![allow(incomplete_features)]\n+\n+use std::fmt::Debug;\n+use std::marker::PointerLike;\n+\n+fn make_dyn_star<'a>(t: impl PointerLike + Debug + 'a) -> dyn* Debug + 'a {\n+    t as _\n+}\n+\n+fn main() {\n+    println!(\"{:?}\", make_dyn_star(Box::new(1i32)));\n+    println!(\"{:?}\", make_dyn_star(2usize));\n+    println!(\"{:?}\", make_dyn_star((3usize,)));\n+}"}]}