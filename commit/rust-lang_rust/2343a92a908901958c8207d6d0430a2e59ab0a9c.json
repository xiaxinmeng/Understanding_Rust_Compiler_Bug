{"sha": "2343a92a908901958c8207d6d0430a2e59ab0a9c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzNDNhOTJhOTA4OTAxOTU4YzgyMDdkNmQwNDMwYTJlNTlhYjBhOWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-21T21:37:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-21T21:37:26Z"}, "message": "Auto merge of #30352 - alexcrichton:new-snashots, r=nikomatsakis\n\nLots of cruft to remove!", "tree": {"sha": "d94ff32886bfd66272eeb64ecf3672169be9372e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d94ff32886bfd66272eeb64ecf3672169be9372e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2343a92a908901958c8207d6d0430a2e59ab0a9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2343a92a908901958c8207d6d0430a2e59ab0a9c", "html_url": "https://github.com/rust-lang/rust/commit/2343a92a908901958c8207d6d0430a2e59ab0a9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2343a92a908901958c8207d6d0430a2e59ab0a9c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "709d00a2317002183b81df26e9b0b546483ba6f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/709d00a2317002183b81df26e9b0b546483ba6f7", "html_url": "https://github.com/rust-lang/rust/commit/709d00a2317002183b81df26e9b0b546483ba6f7"}, {"sha": "cd1848a1a60f40f25019e455b1050efd69707604", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd1848a1a60f40f25019e455b1050efd69707604", "html_url": "https://github.com/rust-lang/rust/commit/cd1848a1a60f40f25019e455b1050efd69707604"}], "stats": {"total": 886, "additions": 45, "deletions": 841}, "files": [{"sha": "2de18c9871a8dfd2f3a46d5f02b4dd0797a9b667", "filename": "mk/main.mk", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2343a92a908901958c8207d6d0430a2e59ab0a9c/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/2343a92a908901958c8207d6d0430a2e59ab0a9c/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=2343a92a908901958c8207d6d0430a2e59ab0a9c", "patch": "@@ -131,11 +131,7 @@ endif\n \n ifdef CFG_ENABLE_DEBUGINFO\n   $(info cfg: enabling debuginfo (CFG_ENABLE_DEBUGINFO))\n-  # FIXME: Re-enable -g in stage0 after new snapshot\n-  #CFG_RUSTC_FLAGS += -g\n-  RUSTFLAGS_STAGE1 += -g\n-  RUSTFLAGS_STAGE2 += -g\n-  RUSTFLAGS_STAGE3 += -g\n+  CFG_RUSTC_FLAGS += -g\n endif\n \n ifdef SAVE_TEMPS"}, {"sha": "755e44899fc86f6e4e204abf72c42535b70bb2b3", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=2343a92a908901958c8207d6d0430a2e59ab0a9c", "patch": "@@ -80,10 +80,8 @@ use core::mem::{align_of_val, size_of_val};\n use core::intrinsics::abort;\n use core::mem;\n use core::ops::Deref;\n-#[cfg(not(stage0))]\n use core::ops::CoerceUnsized;\n use core::ptr::{self, Shared};\n-#[cfg(not(stage0))]\n use core::marker::Unsize;\n use core::hash::{Hash, Hasher};\n use core::{usize, isize};\n@@ -135,8 +133,6 @@ unsafe impl<T: ?Sized + Sync + Send> Send for Arc<T> {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl<T: ?Sized + Sync + Send> Sync for Arc<T> {}\n \n-// remove cfg after new snapshot\n-#[cfg(not(stage0))]\n #[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Arc<U>> for Arc<T> {}\n \n@@ -157,8 +153,6 @@ unsafe impl<T: ?Sized + Sync + Send> Send for Weak<T> {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl<T: ?Sized + Sync + Send> Sync for Weak<T> {}\n \n-// remove cfg after new snapshot\n-#[cfg(not(stage0))]\n #[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Weak<U>> for Weak<T> {}\n "}, {"sha": "93b84cdedd4cdedab7f36ecc0edde86e9ea8aec6", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=2343a92a908901958c8207d6d0430a2e59ab0a9c", "patch": "@@ -56,11 +56,8 @@\n //! The [`heap`](heap/index.html) module defines the low-level interface to the\n //! default global allocator. It is not compatible with the libc allocator API.\n \n-// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n-#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"alloc\"]\n #![crate_type = \"rlib\"]\n-#![cfg_attr(stage0, staged_api)]\n #![allow(unused_attributes)]\n #![unstable(feature = \"alloc\",\n             reason = \"this library is unlikely to be stabilized in its current \\\n@@ -72,19 +69,15 @@\n        issue_tracker_base_url = \"https://github.com/rust-lang/rust/issues/\",\n        test(no_crate_inject, attr(allow(unused_variables), deny(warnings))))]\n #![no_std]\n-#![cfg_attr(not(stage0), needs_allocator)]\n+#![needs_allocator]\n \n-#![cfg_attr(stage0, feature(rustc_attrs))]\n-#![cfg_attr(stage0, feature(no_std))]\n-#![cfg_attr(stage0, allow(unused_attributes))]\n #![feature(allocator)]\n #![feature(box_syntax)]\n #![feature(coerce_unsized)]\n #![feature(core_intrinsics)]\n #![feature(custom_attribute)]\n #![feature(fundamental)]\n #![feature(lang_items)]\n-#![feature(nonzero)]\n #![feature(num_bits_bytes)]\n #![feature(optin_builtin_traits)]\n #![feature(placement_in_syntax)]\n@@ -95,23 +88,15 @@\n #![feature(unboxed_closures)]\n #![feature(unique)]\n #![feature(unsafe_no_drop_flag, filling_drop)]\n-// SNAP 1af31d4\n-#![allow(unused_features)]\n-// SNAP 1af31d4\n-#![allow(unused_attributes)]\n #![feature(dropck_parametricity)]\n #![feature(unsize)]\n #![feature(drop_in_place)]\n #![feature(fn_traits)]\n \n-#![cfg_attr(stage0, feature(alloc_system))]\n-#![cfg_attr(not(stage0), feature(needs_allocator))]\n+#![feature(needs_allocator)]\n \n #![cfg_attr(test, feature(test, rustc_private, box_heap))]\n \n-#[cfg(stage0)]\n-extern crate alloc_system;\n-\n // Allow testing this library\n \n #[cfg(test)]"}, {"sha": "52f035b67bdc98d20752139004aae3b5f4c4b117", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=2343a92a908901958c8207d6d0430a2e59ab0a9c", "patch": "@@ -162,11 +162,9 @@ use core::fmt;\n use core::hash::{Hasher, Hash};\n use core::intrinsics::{assume, abort};\n use core::marker;\n-#[cfg(not(stage0))]\n use core::marker::Unsize;\n use core::mem::{self, align_of_val, size_of_val, forget};\n use core::ops::Deref;\n-#[cfg(not(stage0))]\n use core::ops::CoerceUnsized;\n use core::ptr::{self, Shared};\n use core::convert::From;\n@@ -196,8 +194,6 @@ impl<T: ?Sized> !marker::Send for Rc<T> {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> !marker::Sync for Rc<T> {}\n \n-// remove cfg after new snapshot\n-#[cfg(not(stage0))]\n #[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Rc<U>> for Rc<T> {}\n \n@@ -723,8 +719,6 @@ impl<T: ?Sized> !marker::Send for Weak<T> {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> !marker::Sync for Weak<T> {}\n \n-// remove cfg after new snapshot\n-#[cfg(not(stage0))]\n #[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Weak<U>> for Weak<T> {}\n "}, {"sha": "413eac3cf7942fd7838da275c98bebb46cf155f8", "filename": "src/liballoc_jemalloc/lib.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Fliballoc_jemalloc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Fliballoc_jemalloc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Flib.rs?ref=2343a92a908901958c8207d6d0430a2e59ab0a9c", "patch": "@@ -8,21 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"alloc_jemalloc\"]\n #![crate_type = \"rlib\"]\n-#![cfg_attr(stage0, staged_api)]\n #![no_std]\n-#![cfg_attr(not(stage0), allocator)]\n-#![cfg_attr(stage0, allow(improper_ctypes))]\n+#![allocator]\n #![unstable(feature = \"alloc_jemalloc\",\n             reason = \"this library is unlikely to be stabilized in its current \\\n                       form or name\",\n             issue = \"27783\")]\n #![feature(allocator)]\n #![feature(libc)]\n #![feature(staged_api)]\n-#![cfg_attr(stage0, feature(no_std))]\n \n extern crate libc;\n "}, {"sha": "fccc024603ebdb9921d502b2a93ef54ffea23801", "filename": "src/liballoc_system/lib.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Fliballoc_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Fliballoc_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_system%2Flib.rs?ref=2343a92a908901958c8207d6d0430a2e59ab0a9c", "patch": "@@ -8,21 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"alloc_system\"]\n #![crate_type = \"rlib\"]\n-#![cfg_attr(stage0, staged_api)]\n #![no_std]\n-#![cfg_attr(not(stage0), allocator)]\n-#![cfg_attr(stage0, allow(improper_ctypes))]\n+#![allocator]\n #![unstable(feature = \"alloc_system\",\n             reason = \"this library is unlikely to be stabilized in its current \\\n                       form or name\",\n             issue = \"27783\")]\n #![feature(allocator)]\n #![feature(libc)]\n #![feature(staged_api)]\n-#![cfg_attr(stage0, feature(no_std))]\n \n extern crate libc;\n "}, {"sha": "b5107e411e8510d4b6a30ab1e474edb69344db40", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=2343a92a908901958c8207d6d0430a2e59ab0a9c", "patch": "@@ -19,11 +19,8 @@\n //! arena but can only hold objects of a single type, and `Arena`, which is a\n //! more complex, slower arena which can hold objects of any type.\n \n-// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n-#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"arena\"]\n #![unstable(feature = \"rustc_private\", issue = \"27812\")]\n-#![cfg_attr(stage0, staged_api)]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n@@ -42,11 +39,6 @@\n #![feature(dropck_parametricity)]\n #![cfg_attr(test, feature(test))]\n \n-// SNAP 1af31d4\n-#![allow(unused_features)]\n-// SNAP 1af31d4\n-#![allow(unused_attributes)]\n-\n extern crate alloc;\n \n use std::cell::{Cell, RefCell};"}, {"sha": "000ec4f0f66105a67f4707ab0c457fd9b5ddc0d9", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=2343a92a908901958c8207d6d0430a2e59ab0a9c", "patch": "@@ -13,10 +13,7 @@\n //! See [std::collections](../std/collections) for a detailed discussion of\n //! collections in Rust.\n \n-// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n-#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"collections\"]\n-#![cfg_attr(stage0, staged_api)]\n #![crate_type = \"rlib\"]\n #![unstable(feature = \"collections\",\n             reason = \"library is unlikely to be stabilized with the current \\\n@@ -32,17 +29,14 @@\n #![allow(trivial_casts)]\n #![cfg_attr(test, allow(deprecated))] // rand\n \n-// SNAP 1af31d4\n-#![allow(unused_features)]\n-// SNAP 1af31d4\n-#![allow(unused_attributes)]\n-\n-#![cfg_attr(stage0, feature(rustc_attrs))]\n-#![cfg_attr(stage0, allow(unused_attributes))]\n #![feature(alloc)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n+#![feature(clone_from_slice)]\n #![feature(core_intrinsics)]\n+#![feature(decode_utf16)]\n+#![feature(drop_in_place)]\n+#![feature(dropck_parametricity)]\n #![feature(fmt_internals)]\n #![feature(fmt_radix)]\n #![feature(heap_api)]\n@@ -53,7 +47,6 @@\n #![feature(oom)]\n #![feature(pattern)]\n #![feature(ptr_as_ref)]\n-#![feature(ref_slice)]\n #![feature(slice_bytes)]\n #![feature(slice_patterns)]\n #![feature(staged_api)]\n@@ -62,14 +55,9 @@\n #![feature(unboxed_closures)]\n #![feature(unicode)]\n #![feature(unique)]\n-#![feature(dropck_parametricity)]\n #![feature(unsafe_no_drop_flag, filling_drop)]\n-#![feature(decode_utf16)]\n-#![feature(drop_in_place)]\n-#![feature(clone_from_slice)]\n #![cfg_attr(test, feature(clone_from_slice, rand, test))]\n \n-#![cfg_attr(stage0, feature(no_std))]\n #![no_std]\n \n extern crate rustc_unicode;"}, {"sha": "568c4e143e04b4397fec280bd7b0a77f15e3622c", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 132, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=2343a92a908901958c8207d6d0430a2e59ab0a9c", "patch": "@@ -512,164 +512,32 @@ extern \"rust-intrinsic\" {\n     /// Returns the nearest integer to an `f64`. Rounds half-way cases away from zero.\n     pub fn roundf64(x: f64) -> f64;\n \n-    /// Returns the number of bits set in a `u8`.\n-    #[cfg(stage0)]\n-    pub fn ctpop8(x: u8) -> u8;\n-    /// Returns the number of bits set in a `u16`.\n-    #[cfg(stage0)]\n-    pub fn ctpop16(x: u16) -> u16;\n-    /// Returns the number of bits set in a `u32`.\n-    #[cfg(stage0)]\n-    pub fn ctpop32(x: u32) -> u32;\n-    /// Returns the number of bits set in a `u64`.\n-    #[cfg(stage0)]\n-    pub fn ctpop64(x: u64) -> u64;\n     /// Returns the number of bits set in an integer type `T`\n-    #[cfg(not(stage0))]\n     pub fn ctpop<T>(x: T) -> T;\n \n-    /// Returns the number of leading bits unset in a `u8`.\n-    #[cfg(stage0)]\n-    pub fn ctlz8(x: u8) -> u8;\n-    /// Returns the number of leading bits unset in a `u16`.\n-    #[cfg(stage0)]\n-    pub fn ctlz16(x: u16) -> u16;\n-    /// Returns the number of leading bits unset in a `u32`.\n-    #[cfg(stage0)]\n-    pub fn ctlz32(x: u32) -> u32;\n-    /// Returns the number of leading bits unset in a `u64`.\n-    #[cfg(stage0)]\n-    pub fn ctlz64(x: u64) -> u64;\n     /// Returns the number of leading bits unset in an integer type `T`\n-    #[cfg(not(stage0))]\n     pub fn ctlz<T>(x: T) -> T;\n \n-    /// Returns the number of trailing bits unset in a `u8`.\n-    #[cfg(stage0)]\n-    pub fn cttz8(x: u8) -> u8;\n-    /// Returns the number of trailing bits unset in a `u16`.\n-    #[cfg(stage0)]\n-    pub fn cttz16(x: u16) -> u16;\n-    /// Returns the number of trailing bits unset in a `u32`.\n-    #[cfg(stage0)]\n-    pub fn cttz32(x: u32) -> u32;\n-    /// Returns the number of trailing bits unset in a `u64`.\n-    #[cfg(stage0)]\n-    pub fn cttz64(x: u64) -> u64;\n     /// Returns the number of trailing bits unset in an integer type `T`\n-    #[cfg(not(stage0))]\n     pub fn cttz<T>(x: T) -> T;\n \n-    /// Reverses the bytes in a `u16`.\n-    #[cfg(stage0)]\n-    pub fn bswap16(x: u16) -> u16;\n-    /// Reverses the bytes in a `u32`.\n-    #[cfg(stage0)]\n-    pub fn bswap32(x: u32) -> u32;\n-    /// Reverses the bytes in a `u64`.\n-    #[cfg(stage0)]\n-    pub fn bswap64(x: u64) -> u64;\n     /// Reverses the bytes in an integer type `T`.\n-    #[cfg(not(stage0))]\n     pub fn bswap<T>(x: T) -> T;\n \n-    /// Performs checked `i8` addition.\n-    #[cfg(stage0)]\n-    pub fn i8_add_with_overflow(x: i8, y: i8) -> (i8, bool);\n-    /// Performs checked `i16` addition.\n-    #[cfg(stage0)]\n-    pub fn i16_add_with_overflow(x: i16, y: i16) -> (i16, bool);\n-    /// Performs checked `i32` addition.\n-    #[cfg(stage0)]\n-    pub fn i32_add_with_overflow(x: i32, y: i32) -> (i32, bool);\n-    /// Performs checked `i64` addition.\n-    #[cfg(stage0)]\n-    pub fn i64_add_with_overflow(x: i64, y: i64) -> (i64, bool);\n-\n-    /// Performs checked `u8` addition.\n-    #[cfg(stage0)]\n-    pub fn u8_add_with_overflow(x: u8, y: u8) -> (u8, bool);\n-    /// Performs checked `u16` addition.\n-    #[cfg(stage0)]\n-    pub fn u16_add_with_overflow(x: u16, y: u16) -> (u16, bool);\n-    /// Performs checked `u32` addition.\n-    #[cfg(stage0)]\n-    pub fn u32_add_with_overflow(x: u32, y: u32) -> (u32, bool);\n-    /// Performs checked `u64` addition.\n-    #[cfg(stage0)]\n-    pub fn u64_add_with_overflow(x: u64, y: u64) -> (u64, bool);\n-\n     /// Performs checked integer addition.\n-    #[cfg(not(stage0))]\n     pub fn add_with_overflow<T>(x: T, y: T) -> (T, bool);\n \n-    /// Performs checked `i8` subtraction.\n-    #[cfg(stage0)]\n-    pub fn i8_sub_with_overflow(x: i8, y: i8) -> (i8, bool);\n-    /// Performs checked `i16` subtraction.\n-    #[cfg(stage0)]\n-    pub fn i16_sub_with_overflow(x: i16, y: i16) -> (i16, bool);\n-    /// Performs checked `i32` subtraction.\n-    #[cfg(stage0)]\n-    pub fn i32_sub_with_overflow(x: i32, y: i32) -> (i32, bool);\n-    /// Performs checked `i64` subtraction.\n-    #[cfg(stage0)]\n-    pub fn i64_sub_with_overflow(x: i64, y: i64) -> (i64, bool);\n-\n-    /// Performs checked `u8` subtraction.\n-    #[cfg(stage0)]\n-    pub fn u8_sub_with_overflow(x: u8, y: u8) -> (u8, bool);\n-    /// Performs checked `u16` subtraction.\n-    #[cfg(stage0)]\n-    pub fn u16_sub_with_overflow(x: u16, y: u16) -> (u16, bool);\n-    /// Performs checked `u32` subtraction.\n-    #[cfg(stage0)]\n-    pub fn u32_sub_with_overflow(x: u32, y: u32) -> (u32, bool);\n-    /// Performs checked `u64` subtraction.\n-    #[cfg(stage0)]\n-    pub fn u64_sub_with_overflow(x: u64, y: u64) -> (u64, bool);\n-\n     /// Performs checked integer subtraction\n-    #[cfg(not(stage0))]\n     pub fn sub_with_overflow<T>(x: T, y: T) -> (T, bool);\n \n-    /// Performs checked `i8` multiplication.\n-    #[cfg(stage0)]\n-    pub fn i8_mul_with_overflow(x: i8, y: i8) -> (i8, bool);\n-    /// Performs checked `i16` multiplication.\n-    #[cfg(stage0)]\n-    pub fn i16_mul_with_overflow(x: i16, y: i16) -> (i16, bool);\n-    /// Performs checked `i32` multiplication.\n-    #[cfg(stage0)]\n-    pub fn i32_mul_with_overflow(x: i32, y: i32) -> (i32, bool);\n-    /// Performs checked `i64` multiplication.\n-    #[cfg(stage0)]\n-    pub fn i64_mul_with_overflow(x: i64, y: i64) -> (i64, bool);\n-\n-    /// Performs checked `u8` multiplication.\n-    #[cfg(stage0)]\n-    pub fn u8_mul_with_overflow(x: u8, y: u8) -> (u8, bool);\n-    /// Performs checked `u16` multiplication.\n-    #[cfg(stage0)]\n-    pub fn u16_mul_with_overflow(x: u16, y: u16) -> (u16, bool);\n-    /// Performs checked `u32` multiplication.\n-    #[cfg(stage0)]\n-    pub fn u32_mul_with_overflow(x: u32, y: u32) -> (u32, bool);\n-    /// Performs checked `u64` multiplication.\n-    #[cfg(stage0)]\n-    pub fn u64_mul_with_overflow(x: u64, y: u64) -> (u64, bool);\n-\n     /// Performs checked integer multiplication\n-    #[cfg(not(stage0))]\n     pub fn mul_with_overflow<T>(x: T, y: T) -> (T, bool);\n \n     /// Performs an unchecked division, resulting in undefined behavior\n     /// where y = 0 or x = `T::min_value()` and y = -1\n-    #[cfg(not(stage0))]\n     pub fn unchecked_div<T>(x: T, y: T) -> T;\n     /// Returns the remainder of an unchecked division, resulting in\n     /// undefined behavior where y = 0 or x = `T::min_value()` and y = -1\n-    #[cfg(not(stage0))]\n     pub fn unchecked_rem<T>(x: T, y: T) -> T;\n \n     /// Returns (a + b) mod 2^N, where N is the width of T in bits."}, {"sha": "e8803976937d2d7ea43f49c71d55c6ddfe9fe04e", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=2343a92a908901958c8207d6d0430a2e59ab0a9c", "patch": "@@ -43,11 +43,8 @@\n // Since libcore defines many fundamental lang items, all tests live in a\n // separate crate, libcoretest, to avoid bizarre issues.\n \n-// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n-#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"core\"]\n #![stable(feature = \"core\", since = \"1.6.0\")]\n-#![cfg_attr(stage0, staged_api)]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n@@ -60,8 +57,6 @@\n #![no_core]\n #![deny(missing_docs)]\n \n-#![cfg_attr(stage0, feature(rustc_attrs))]\n-#![cfg_attr(stage0, allow(unused_attributes))]\n #![feature(allow_internal_unstable)]\n #![feature(associated_type_defaults)]\n #![feature(concat_idents)]\n@@ -75,8 +70,7 @@\n #![feature(optin_builtin_traits)]\n #![feature(reflect)]\n #![feature(unwind_attributes)]\n-#![cfg_attr(stage0, feature(simd))]\n-#![cfg_attr(not(stage0), feature(repr_simd, platform_intrinsics))]\n+#![feature(repr_simd, platform_intrinsics)]\n #![feature(staged_api)]\n #![feature(unboxed_closures)]\n "}, {"sha": "92bbc4efb7cc1d78ab45fe0d0828401d544608d3", "filename": "src/libcore/nonzero.rs", "status": "modified", "additions": 6, "deletions": 24, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibcore%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibcore%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnonzero.rs?ref=2343a92a908901958c8207d6d0430a2e59ab0a9c", "patch": "@@ -38,31 +38,13 @@ unsafe impl Zeroable for u64 {}\n #[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Debug, Hash)]\n pub struct NonZero<T: Zeroable>(T);\n \n-#[cfg(stage0)]\n-macro_rules! nonzero_new {\n-    () => (\n-        /// Creates an instance of NonZero with the provided value.\n-        /// You must indeed ensure that the value is actually \"non-zero\".\n-        #[inline(always)]\n-        pub unsafe fn new(inner: T) -> NonZero<T> {\n-            NonZero(inner)\n-        }\n-    )\n-}\n-#[cfg(not(stage0))]\n-macro_rules! nonzero_new {\n-    () => (\n-        /// Creates an instance of NonZero with the provided value.\n-        /// You must indeed ensure that the value is actually \"non-zero\".\n-        #[inline(always)]\n-        pub const unsafe fn new(inner: T) -> NonZero<T> {\n-            NonZero(inner)\n-        }\n-    )\n-}\n-\n impl<T: Zeroable> NonZero<T> {\n-    nonzero_new!{}\n+    /// Creates an instance of NonZero with the provided value.\n+    /// You must indeed ensure that the value is actually \"non-zero\".\n+    #[inline(always)]\n+    pub const unsafe fn new(inner: T) -> NonZero<T> {\n+        NonZero(inner)\n+    }\n }\n \n impl<T: Zeroable> Deref for NonZero<T> {"}, {"sha": "66c6deb361564305d964616cf078a29865549833", "filename": "src/libcore/num/bignum.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibcore%2Fnum%2Fbignum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibcore%2Fnum%2Fbignum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fbignum.rs?ref=2343a92a908901958c8207d6d0430a2e59ab0a9c", "patch": "@@ -55,15 +55,6 @@ macro_rules! impl_full_ops {\n     ($($ty:ty: add($addfn:path), mul/div($bigty:ident);)*) => (\n         $(\n             impl FullOps for $ty {\n-                #[cfg(stage0)]\n-                fn full_add(self, other: $ty, carry: bool) -> (bool, $ty) {\n-                    // this cannot overflow, the output is between 0 and 2*2^nbits - 1\n-                    // FIXME will LLVM optimize this into ADC or similar???\n-                    let (v, carry1) = unsafe { $addfn(self, other) };\n-                    let (v, carry2) = unsafe { $addfn(v, if carry {1} else {0}) };\n-                    (carry1 || carry2, v)\n-                }\n-                #[cfg(not(stage0))]\n                 fn full_add(self, other: $ty, carry: bool) -> (bool, $ty) {\n                     // this cannot overflow, the output is between 0 and 2*2^nbits - 1\n                     // FIXME will LLVM optimize this into ADC or similar???"}, {"sha": "f180a513b869d8bf4374cc3af6b0fc12c81c9a79", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 0, "deletions": 161, "changes": 161, "blob_url": "https://github.com/rust-lang/rust/blob/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=2343a92a908901958c8207d6d0430a2e59ab0a9c", "patch": "@@ -115,11 +115,6 @@ macro_rules! zero_one_impl_float {\n }\n zero_one_impl_float! { f32 f64 }\n \n-// Just for stage0; a byte swap on a byte is a no-op\n-// Delete this once it becomes unused\n-#[cfg(stage0)]\n-unsafe fn bswap8(x: u8) -> u8 { x }\n-\n macro_rules! checked_op {\n     ($U:ty, $op:path, $x:expr, $y:expr) => {{\n         let (result, overflowed) = unsafe { $op($x as $U, $y as $U) };\n@@ -785,15 +780,6 @@ macro_rules! int_impl {\n }\n \n #[lang = \"i8\"]\n-#[cfg(stage0)]\n-impl i8 {\n-    int_impl! { i8, u8, 8,\n-        intrinsics::i8_add_with_overflow,\n-        intrinsics::i8_sub_with_overflow,\n-        intrinsics::i8_mul_with_overflow }\n-}\n-#[lang = \"i8\"]\n-#[cfg(not(stage0))]\n impl i8 {\n     int_impl! { i8, u8, 8,\n         intrinsics::add_with_overflow,\n@@ -802,15 +788,6 @@ impl i8 {\n }\n \n #[lang = \"i16\"]\n-#[cfg(stage0)]\n-impl i16 {\n-    int_impl! { i16, u16, 16,\n-        intrinsics::i16_add_with_overflow,\n-        intrinsics::i16_sub_with_overflow,\n-        intrinsics::i16_mul_with_overflow }\n-}\n-#[lang = \"i16\"]\n-#[cfg(not(stage0))]\n impl i16 {\n     int_impl! { i16, u16, 16,\n         intrinsics::add_with_overflow,\n@@ -819,15 +796,6 @@ impl i16 {\n }\n \n #[lang = \"i32\"]\n-#[cfg(stage0)]\n-impl i32 {\n-    int_impl! { i32, u32, 32,\n-        intrinsics::i32_add_with_overflow,\n-        intrinsics::i32_sub_with_overflow,\n-        intrinsics::i32_mul_with_overflow }\n-}\n-#[lang = \"i32\"]\n-#[cfg(not(stage0))]\n impl i32 {\n     int_impl! { i32, u32, 32,\n         intrinsics::add_with_overflow,\n@@ -836,15 +804,6 @@ impl i32 {\n }\n \n #[lang = \"i64\"]\n-#[cfg(stage0)]\n-impl i64 {\n-    int_impl! { i64, u64, 64,\n-        intrinsics::i64_add_with_overflow,\n-        intrinsics::i64_sub_with_overflow,\n-        intrinsics::i64_mul_with_overflow }\n-}\n-#[lang = \"i64\"]\n-#[cfg(not(stage0))]\n impl i64 {\n     int_impl! { i64, u64, 64,\n         intrinsics::add_with_overflow,\n@@ -854,16 +813,6 @@ impl i64 {\n \n #[cfg(target_pointer_width = \"32\")]\n #[lang = \"isize\"]\n-#[cfg(stage0)]\n-impl isize {\n-    int_impl! { i32, u32, 32,\n-        intrinsics::i32_add_with_overflow,\n-        intrinsics::i32_sub_with_overflow,\n-        intrinsics::i32_mul_with_overflow }\n-}\n-#[cfg(target_pointer_width = \"32\")]\n-#[lang = \"isize\"]\n-#[cfg(not(stage0))]\n impl isize {\n     int_impl! { i32, u32, 32,\n         intrinsics::add_with_overflow,\n@@ -873,16 +822,6 @@ impl isize {\n \n #[cfg(target_pointer_width = \"64\")]\n #[lang = \"isize\"]\n-#[cfg(stage0)]\n-impl isize {\n-    int_impl! { i64, u64, 64,\n-        intrinsics::i64_add_with_overflow,\n-        intrinsics::i64_sub_with_overflow,\n-        intrinsics::i64_mul_with_overflow }\n-}\n-#[cfg(target_pointer_width = \"64\")]\n-#[lang = \"isize\"]\n-#[cfg(not(stage0))]\n impl isize {\n     int_impl! { i64, u64, 64,\n         intrinsics::add_with_overflow,\n@@ -980,25 +919,6 @@ macro_rules! uint_impl {\n             unsafe { $ctlz(self as $ActualT) as u32 }\n         }\n \n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        #[cfg(stage0)]\n-        #[inline]\n-        pub fn trailing_zeros(self) -> u32 {\n-            // As of LLVM 3.6 the codegen for the zero-safe cttz8 intrinsic\n-            // emits two conditional moves on x86_64. By promoting the value to\n-            // u16 and setting bit 8, we get better code without any conditional\n-            // operations.\n-            // FIXME: There's a LLVM patch (http://reviews.llvm.org/D9284)\n-            // pending, remove this workaround once LLVM generates better code\n-            // for cttz8.\n-            unsafe {\n-                if $BITS == 8 {\n-                    intrinsics::cttz16(self as u16 | 0x100) as u32\n-                } else {\n-                    $cttz(self as $ActualT) as u32\n-                }\n-            }\n-        }\n         /// Returns the number of trailing zeros in the binary representation\n         /// of `self`.\n         ///\n@@ -1012,7 +932,6 @@ macro_rules! uint_impl {\n         /// assert_eq!(n.trailing_zeros(), 3);\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        #[cfg(not(stage0))]\n         #[inline]\n         pub fn trailing_zeros(self) -> u32 {\n             // As of LLVM 3.6 the codegen for the zero-safe cttz8 intrinsic\n@@ -1563,19 +1482,6 @@ macro_rules! uint_impl {\n }\n \n #[lang = \"u8\"]\n-#[cfg(stage0)]\n-impl u8 {\n-    uint_impl! { u8, 8,\n-        intrinsics::ctpop8,\n-        intrinsics::ctlz8,\n-        intrinsics::cttz8,\n-        bswap8,\n-        intrinsics::u8_add_with_overflow,\n-        intrinsics::u8_sub_with_overflow,\n-        intrinsics::u8_mul_with_overflow }\n-}\n-#[lang = \"u8\"]\n-#[cfg(not(stage0))]\n impl u8 {\n     uint_impl! { u8, 8,\n         intrinsics::ctpop,\n@@ -1588,19 +1494,6 @@ impl u8 {\n }\n \n #[lang = \"u16\"]\n-#[cfg(stage0)]\n-impl u16 {\n-    uint_impl! { u16, 16,\n-        intrinsics::ctpop16,\n-        intrinsics::ctlz16,\n-        intrinsics::cttz16,\n-        intrinsics::bswap16,\n-        intrinsics::u16_add_with_overflow,\n-        intrinsics::u16_sub_with_overflow,\n-        intrinsics::u16_mul_with_overflow }\n-}\n-#[lang = \"u16\"]\n-#[cfg(not(stage0))]\n impl u16 {\n     uint_impl! { u16, 16,\n         intrinsics::ctpop,\n@@ -1613,19 +1506,6 @@ impl u16 {\n }\n \n #[lang = \"u32\"]\n-#[cfg(stage0)]\n-impl u32 {\n-    uint_impl! { u32, 32,\n-        intrinsics::ctpop32,\n-        intrinsics::ctlz32,\n-        intrinsics::cttz32,\n-        intrinsics::bswap32,\n-        intrinsics::u32_add_with_overflow,\n-        intrinsics::u32_sub_with_overflow,\n-        intrinsics::u32_mul_with_overflow }\n-}\n-#[lang = \"u32\"]\n-#[cfg(not(stage0))]\n impl u32 {\n     uint_impl! { u32, 32,\n         intrinsics::ctpop,\n@@ -1638,19 +1518,6 @@ impl u32 {\n }\n \n #[lang = \"u64\"]\n-#[cfg(stage0)]\n-impl u64 {\n-    uint_impl! { u64, 64,\n-        intrinsics::ctpop64,\n-        intrinsics::ctlz64,\n-        intrinsics::cttz64,\n-        intrinsics::bswap64,\n-        intrinsics::u64_add_with_overflow,\n-        intrinsics::u64_sub_with_overflow,\n-        intrinsics::u64_mul_with_overflow }\n-}\n-#[lang = \"u64\"]\n-#[cfg(not(stage0))]\n impl u64 {\n     uint_impl! { u64, 64,\n         intrinsics::ctpop,\n@@ -1664,20 +1531,6 @@ impl u64 {\n \n #[cfg(target_pointer_width = \"32\")]\n #[lang = \"usize\"]\n-#[cfg(stage0)]\n-impl usize {\n-    uint_impl! { u32, 32,\n-        intrinsics::ctpop32,\n-        intrinsics::ctlz32,\n-        intrinsics::cttz32,\n-        intrinsics::bswap32,\n-        intrinsics::u32_add_with_overflow,\n-        intrinsics::u32_sub_with_overflow,\n-        intrinsics::u32_mul_with_overflow }\n-}\n-#[cfg(target_pointer_width = \"32\")]\n-#[lang = \"usize\"]\n-#[cfg(not(stage0))]\n impl usize {\n     uint_impl! { u32, 32,\n         intrinsics::ctpop,\n@@ -1691,20 +1544,6 @@ impl usize {\n \n #[cfg(target_pointer_width = \"64\")]\n #[lang = \"usize\"]\n-#[cfg(stage0)]\n-impl usize {\n-    uint_impl! { u64, 64,\n-        intrinsics::ctpop64,\n-        intrinsics::ctlz64,\n-        intrinsics::cttz64,\n-        intrinsics::bswap64,\n-        intrinsics::u64_add_with_overflow,\n-        intrinsics::u64_sub_with_overflow,\n-        intrinsics::u64_mul_with_overflow }\n-}\n-#[cfg(target_pointer_width = \"64\")]\n-#[lang = \"usize\"]\n-#[cfg(not(stage0))]\n impl usize {\n     uint_impl! { u64, 64,\n         intrinsics::ctpop,"}, {"sha": "a7d5fcafd56039163fc409a56f50e7fedf736171", "filename": "src/libcore/num/wrapping.rs", "status": "modified", "additions": 1, "deletions": 180, "changes": 181, "blob_url": "https://github.com/rust-lang/rust/blob/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibcore%2Fnum%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibcore%2Fnum%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fwrapping.rs?ref=2343a92a908901958c8207d6d0430a2e59ab0a9c", "patch": "@@ -12,30 +12,7 @@\n #![unstable(feature = \"wrapping\", reason = \"may be removed or relocated\",\n             issue = \"27755\")]\n \n-#[cfg(stage0)]\n-pub use intrinsics::{\n-    u8_add_with_overflow, i8_add_with_overflow,\n-    u16_add_with_overflow, i16_add_with_overflow,\n-    u32_add_with_overflow, i32_add_with_overflow,\n-    u64_add_with_overflow, i64_add_with_overflow,\n-\n-    u8_sub_with_overflow, i8_sub_with_overflow,\n-    u16_sub_with_overflow, i16_sub_with_overflow,\n-    u32_sub_with_overflow, i32_sub_with_overflow,\n-    u64_sub_with_overflow, i64_sub_with_overflow,\n-\n-    u8_mul_with_overflow, i8_mul_with_overflow,\n-    u16_mul_with_overflow, i16_mul_with_overflow,\n-    u32_mul_with_overflow, i32_mul_with_overflow,\n-    u64_mul_with_overflow, i64_mul_with_overflow,\n-};\n-\n-#[cfg(not(stage0))]\n-pub use intrinsics::{\n-    add_with_overflow,\n-    sub_with_overflow,\n-    mul_with_overflow,\n-};\n+pub use intrinsics::{add_with_overflow, sub_with_overflow, mul_with_overflow};\n \n use super::Wrapping;\n \n@@ -203,42 +180,18 @@ macro_rules! signed_overflowing_impl {\n     ($($t:ident)*) => ($(\n         impl OverflowingOps for $t {\n             #[inline(always)]\n-            #[cfg(stage0)]\n-            fn overflowing_add(self, rhs: $t) -> ($t, bool) {\n-                unsafe {\n-                    concat_idents!($t, _add_with_overflow)(self, rhs)\n-                }\n-            }\n-            #[inline(always)]\n-            #[cfg(not(stage0))]\n             fn overflowing_add(self, rhs: $t) -> ($t, bool) {\n                 unsafe {\n                     add_with_overflow(self, rhs)\n                 }\n             }\n             #[inline(always)]\n-            #[cfg(stage0)]\n-            fn overflowing_sub(self, rhs: $t) -> ($t, bool) {\n-                unsafe {\n-                    concat_idents!($t, _sub_with_overflow)(self, rhs)\n-                }\n-            }\n-            #[inline(always)]\n-            #[cfg(not(stage0))]\n             fn overflowing_sub(self, rhs: $t) -> ($t, bool) {\n                 unsafe {\n                     sub_with_overflow(self, rhs)\n                 }\n             }\n             #[inline(always)]\n-            #[cfg(stage0)]\n-            fn overflowing_mul(self, rhs: $t) -> ($t, bool) {\n-                unsafe {\n-                    concat_idents!($t, _mul_with_overflow)(self, rhs)\n-                }\n-            }\n-            #[inline(always)]\n-            #[cfg(not(stage0))]\n             fn overflowing_mul(self, rhs: $t) -> ($t, bool) {\n                 unsafe {\n                     mul_with_overflow(self, rhs)\n@@ -289,42 +242,18 @@ macro_rules! unsigned_overflowing_impl {\n     ($($t:ident)*) => ($(\n         impl OverflowingOps for $t {\n             #[inline(always)]\n-            #[cfg(stage0)]\n-            fn overflowing_add(self, rhs: $t) -> ($t, bool) {\n-                unsafe {\n-                    concat_idents!($t, _add_with_overflow)(self, rhs)\n-                }\n-            }\n-            #[inline(always)]\n-            #[cfg(not(stage0))]\n             fn overflowing_add(self, rhs: $t) -> ($t, bool) {\n                 unsafe {\n                     add_with_overflow(self, rhs)\n                 }\n             }\n             #[inline(always)]\n-            #[cfg(stage0)]\n-            fn overflowing_sub(self, rhs: $t) -> ($t, bool) {\n-                unsafe {\n-                    concat_idents!($t, _sub_with_overflow)(self, rhs)\n-                }\n-            }\n-            #[inline(always)]\n-            #[cfg(not(stage0))]\n             fn overflowing_sub(self, rhs: $t) -> ($t, bool) {\n                 unsafe {\n                     sub_with_overflow(self, rhs)\n                 }\n             }\n             #[inline(always)]\n-            #[cfg(stage0)]\n-            fn overflowing_mul(self, rhs: $t) -> ($t, bool) {\n-                unsafe {\n-                    concat_idents!($t, _mul_with_overflow)(self, rhs)\n-                }\n-            }\n-            #[inline(always)]\n-            #[cfg(not(stage0))]\n             fn overflowing_mul(self, rhs: $t) -> ($t, bool) {\n                 unsafe {\n                     mul_with_overflow(self, rhs)\n@@ -365,45 +294,18 @@ unsigned_overflowing_impl! { u8 u16 u32 u64 }\n #[cfg(target_pointer_width = \"64\")]\n impl OverflowingOps for usize {\n     #[inline(always)]\n-    #[cfg(stage0)]\n-    fn overflowing_add(self, rhs: usize) -> (usize, bool) {\n-        unsafe {\n-            let res = u64_add_with_overflow(self as u64, rhs as u64);\n-            (res.0 as usize, res.1)\n-        }\n-    }\n-    #[inline(always)]\n-    #[cfg(not(stage0))]\n     fn overflowing_add(self, rhs: usize) -> (usize, bool) {\n         unsafe {\n             add_with_overflow(self, rhs)\n         }\n     }\n     #[inline(always)]\n-    #[cfg(stage0)]\n-    fn overflowing_sub(self, rhs: usize) -> (usize, bool) {\n-        unsafe {\n-            let res = u64_sub_with_overflow(self as u64, rhs as u64);\n-            (res.0 as usize, res.1)\n-        }\n-    }\n-    #[inline(always)]\n-    #[cfg(not(stage0))]\n     fn overflowing_sub(self, rhs: usize) -> (usize, bool) {\n         unsafe {\n             sub_with_overflow(self, rhs)\n         }\n     }\n     #[inline(always)]\n-    #[cfg(stage0)]\n-    fn overflowing_mul(self, rhs: usize) -> (usize, bool) {\n-        unsafe {\n-            let res = u64_mul_with_overflow(self as u64, rhs as u64);\n-            (res.0 as usize, res.1)\n-        }\n-    }\n-    #[inline(always)]\n-    #[cfg(not(stage0))]\n     fn overflowing_mul(self, rhs: usize) -> (usize, bool) {\n         unsafe {\n             mul_with_overflow(self, rhs)\n@@ -439,45 +341,18 @@ impl OverflowingOps for usize {\n #[cfg(target_pointer_width = \"32\")]\n impl OverflowingOps for usize {\n     #[inline(always)]\n-    #[cfg(stage0)]\n-    fn overflowing_add(self, rhs: usize) -> (usize, bool) {\n-        unsafe {\n-            let res = u32_add_with_overflow(self as u32, rhs as u32);\n-            (res.0 as usize, res.1)\n-        }\n-    }\n-    #[inline(always)]\n-    #[cfg(not(stage0))]\n     fn overflowing_add(self, rhs: usize) -> (usize, bool) {\n         unsafe {\n             add_with_overflow(self, rhs)\n         }\n     }\n     #[inline(always)]\n-    #[cfg(stage0)]\n-    fn overflowing_sub(self, rhs: usize) -> (usize, bool) {\n-        unsafe {\n-            let res = u32_sub_with_overflow(self as u32, rhs as u32);\n-            (res.0 as usize, res.1)\n-        }\n-    }\n-    #[inline(always)]\n-    #[cfg(not(stage0))]\n     fn overflowing_sub(self, rhs: usize) -> (usize, bool) {\n         unsafe {\n             sub_with_overflow(self, rhs)\n         }\n     }\n     #[inline(always)]\n-    #[cfg(stage0)]\n-    fn overflowing_mul(self, rhs: usize) -> (usize, bool) {\n-        unsafe {\n-            let res = u32_mul_with_overflow(self as u32, rhs as u32);\n-            (res.0 as usize, res.1)\n-        }\n-    }\n-    #[inline(always)]\n-    #[cfg(not(stage0))]\n     fn overflowing_mul(self, rhs: usize) -> (usize, bool) {\n         unsafe {\n             mul_with_overflow(self, rhs)\n@@ -513,45 +388,18 @@ impl OverflowingOps for usize {\n #[cfg(target_pointer_width = \"64\")]\n impl OverflowingOps for isize {\n     #[inline(always)]\n-    #[cfg(stage0)]\n-    fn overflowing_add(self, rhs: isize) -> (isize, bool) {\n-        unsafe {\n-            let res = i64_add_with_overflow(self as i64, rhs as i64);\n-            (res.0 as isize, res.1)\n-        }\n-    }\n-    #[inline(always)]\n-    #[cfg(not(stage0))]\n     fn overflowing_add(self, rhs: isize) -> (isize, bool) {\n         unsafe {\n             add_with_overflow(self, rhs)\n         }\n     }\n     #[inline(always)]\n-    #[cfg(stage0)]\n-    fn overflowing_sub(self, rhs: isize) -> (isize, bool) {\n-        unsafe {\n-            let res = i64_sub_with_overflow(self as i64, rhs as i64);\n-            (res.0 as isize, res.1)\n-        }\n-    }\n-    #[inline(always)]\n-    #[cfg(not(stage0))]\n     fn overflowing_sub(self, rhs: isize) -> (isize, bool) {\n         unsafe {\n             sub_with_overflow(self, rhs)\n         }\n     }\n     #[inline(always)]\n-    #[cfg(stage0)]\n-    fn overflowing_mul(self, rhs: isize) -> (isize, bool) {\n-        unsafe {\n-            let res = i64_mul_with_overflow(self as i64, rhs as i64);\n-            (res.0 as isize, res.1)\n-        }\n-    }\n-    #[inline(always)]\n-    #[cfg(not(stage0))]\n     fn overflowing_mul(self, rhs: isize) -> (isize, bool) {\n         unsafe {\n             mul_with_overflow(self, rhs)\n@@ -587,45 +435,18 @@ impl OverflowingOps for isize {\n #[cfg(target_pointer_width = \"32\")]\n impl OverflowingOps for isize {\n     #[inline(always)]\n-    #[cfg(stage0)]\n-    fn overflowing_add(self, rhs: isize) -> (isize, bool) {\n-        unsafe {\n-            let res = i32_add_with_overflow(self as i32, rhs as i32);\n-            (res.0 as isize, res.1)\n-        }\n-    }\n-    #[inline(always)]\n-    #[cfg(not(stage0))]\n     fn overflowing_add(self, rhs: isize) -> (isize, bool) {\n         unsafe {\n             add_with_overflow(self, rhs)\n         }\n     }\n     #[inline(always)]\n-    #[cfg(stage0)]\n-    fn overflowing_sub(self, rhs: isize) -> (isize, bool) {\n-        unsafe {\n-            let res = i32_sub_with_overflow(self as i32, rhs as i32);\n-            (res.0 as isize, res.1)\n-        }\n-    }\n-    #[inline(always)]\n-    #[cfg(not(stage0))]\n     fn overflowing_sub(self, rhs: isize) -> (isize, bool) {\n         unsafe {\n             sub_with_overflow(self, rhs)\n         }\n     }\n     #[inline(always)]\n-    #[cfg(stage0)]\n-    fn overflowing_mul(self, rhs: isize) -> (isize, bool) {\n-        unsafe {\n-            let res = i32_mul_with_overflow(self as i32, rhs as i32);\n-            (res.0 as isize, res.1)\n-        }\n-    }\n-    #[inline(always)]\n-    #[cfg(not(stage0))]\n     fn overflowing_mul(self, rhs: isize) -> (isize, bool) {\n         unsafe {\n             mul_with_overflow(self, rhs)"}, {"sha": "edbe64db08086bf40ed05b88a74409c8ff9b324b", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 0, "deletions": 73, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=2343a92a908901958c8207d6d0430a2e59ab0a9c", "patch": "@@ -441,7 +441,6 @@ macro_rules! rem_impl_integer {\n \n rem_impl_integer! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n \n-#[cfg(not(stage0))]\n macro_rules! rem_impl_float {\n     ($($t:ty)*) => ($(\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -456,48 +455,8 @@ macro_rules! rem_impl_float {\n     )*)\n }\n \n-#[cfg(not(stage0))]\n rem_impl_float! { f32 f64 }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg(stage0)]\n-impl Rem for f32 {\n-    type Output = f32;\n-\n-    // The builtin f32 rem operator is broken when targeting\n-    // MSVC; see comment in std::f32::floor.\n-    // FIXME: See also #27859.\n-    #[inline]\n-    #[cfg(target_env = \"msvc\")]\n-    fn rem(self, other: f32) -> f32 {\n-        (self as f64).rem(other as f64) as f32\n-    }\n-\n-    #[inline]\n-    #[cfg(not(target_env = \"msvc\"))]\n-    fn rem(self, other: f32) -> f32 {\n-        extern { fn fmodf(a: f32, b: f32) -> f32; }\n-        unsafe { fmodf(self, other) }\n-    }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg(stage0)]\n-impl Rem for f64 {\n-    type Output = f64;\n-\n-    #[inline]\n-    fn rem(self, other: f64) -> f64 {\n-        extern { fn fmod(a: f64, b: f64) -> f64; }\n-        unsafe { fmod(self, other) }\n-    }\n-}\n-\n-#[cfg(stage0)]\n-forward_ref_binop! { impl Rem, rem for f64, f64 }\n-#[cfg(stage0)]\n-forward_ref_binop! { impl Rem, rem for f32, f32 }\n-\n /// The `Neg` trait is used to specify the functionality of unary `-`.\n ///\n /// # Examples\n@@ -954,15 +913,13 @@ shr_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n ///     foo += Foo;\n /// }\n /// ```\n-#[cfg(not(stage0))]\n #[lang = \"add_assign\"]\n #[unstable(feature = \"op_assign_traits\", reason = \"recently added\", issue = \"28235\")]\n pub trait AddAssign<Rhs=Self> {\n     /// The method for the `+=` operator\n     fn add_assign(&mut self, Rhs);\n }\n \n-#[cfg(not(stage0))]\n macro_rules! add_assign_impl {\n     ($($t:ty)+) => ($(\n         #[unstable(feature = \"op_assign_traits\", reason = \"recently added\", issue = \"28235\")]\n@@ -973,7 +930,6 @@ macro_rules! add_assign_impl {\n     )+)\n }\n \n-#[cfg(not(stage0))]\n add_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n \n /// The `SubAssign` trait is used to specify the functionality of `-=`.\n@@ -1004,15 +960,13 @@ add_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n ///     foo -= Foo;\n /// }\n /// ```\n-#[cfg(not(stage0))]\n #[lang = \"sub_assign\"]\n #[unstable(feature = \"op_assign_traits\", reason = \"recently added\", issue = \"28235\")]\n pub trait SubAssign<Rhs=Self> {\n     /// The method for the `-=` operator\n     fn sub_assign(&mut self, Rhs);\n }\n \n-#[cfg(not(stage0))]\n macro_rules! sub_assign_impl {\n     ($($t:ty)+) => ($(\n         #[unstable(feature = \"op_assign_traits\", reason = \"recently added\", issue = \"28235\")]\n@@ -1023,7 +977,6 @@ macro_rules! sub_assign_impl {\n     )+)\n }\n \n-#[cfg(not(stage0))]\n sub_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n \n /// The `MulAssign` trait is used to specify the functionality of `*=`.\n@@ -1054,15 +1007,13 @@ sub_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n ///     foo *= Foo;\n /// }\n /// ```\n-#[cfg(not(stage0))]\n #[lang = \"mul_assign\"]\n #[unstable(feature = \"op_assign_traits\", reason = \"recently added\", issue = \"28235\")]\n pub trait MulAssign<Rhs=Self> {\n     /// The method for the `*=` operator\n     fn mul_assign(&mut self, Rhs);\n }\n \n-#[cfg(not(stage0))]\n macro_rules! mul_assign_impl {\n     ($($t:ty)+) => ($(\n         #[unstable(feature = \"op_assign_traits\", reason = \"recently added\", issue = \"28235\")]\n@@ -1073,7 +1024,6 @@ macro_rules! mul_assign_impl {\n     )+)\n }\n \n-#[cfg(not(stage0))]\n mul_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n \n /// The `DivAssign` trait is used to specify the functionality of `/=`.\n@@ -1104,15 +1054,13 @@ mul_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n ///     foo /= Foo;\n /// }\n /// ```\n-#[cfg(not(stage0))]\n #[lang = \"div_assign\"]\n #[unstable(feature = \"op_assign_traits\", reason = \"recently added\", issue = \"28235\")]\n pub trait DivAssign<Rhs=Self> {\n     /// The method for the `/=` operator\n     fn div_assign(&mut self, Rhs);\n }\n \n-#[cfg(not(stage0))]\n macro_rules! div_assign_impl {\n     ($($t:ty)+) => ($(\n         #[unstable(feature = \"op_assign_traits\", reason = \"recently added\", issue = \"28235\")]\n@@ -1123,7 +1071,6 @@ macro_rules! div_assign_impl {\n     )+)\n }\n \n-#[cfg(not(stage0))]\n div_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n \n /// The `RemAssign` trait is used to specify the functionality of `%=`.\n@@ -1154,15 +1101,13 @@ div_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n ///     foo %= Foo;\n /// }\n /// ```\n-#[cfg(not(stage0))]\n #[lang = \"rem_assign\"]\n #[unstable(feature = \"op_assign_traits\", reason = \"recently added\", issue = \"28235\")]\n pub trait RemAssign<Rhs=Self> {\n     /// The method for the `%=` operator\n     fn rem_assign(&mut self, Rhs);\n }\n \n-#[cfg(not(stage0))]\n macro_rules! rem_assign_impl {\n     ($($t:ty)+) => ($(\n         #[unstable(feature = \"op_assign_traits\", reason = \"recently added\", issue = \"28235\")]\n@@ -1173,7 +1118,6 @@ macro_rules! rem_assign_impl {\n     )+)\n }\n \n-#[cfg(not(stage0))]\n rem_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n \n /// The `BitAndAssign` trait is used to specify the functionality of `&=`.\n@@ -1204,15 +1148,13 @@ rem_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n ///     foo &= Foo;\n /// }\n /// ```\n-#[cfg(not(stage0))]\n #[lang = \"bitand_assign\"]\n #[unstable(feature = \"op_assign_traits\", reason = \"recently added\", issue = \"28235\")]\n pub trait BitAndAssign<Rhs=Self> {\n     /// The method for the `&` operator\n     fn bitand_assign(&mut self, Rhs);\n }\n \n-#[cfg(not(stage0))]\n macro_rules! bitand_assign_impl {\n     ($($t:ty)+) => ($(\n         #[unstable(feature = \"op_assign_traits\", reason = \"recently added\", issue = \"28235\")]\n@@ -1223,7 +1165,6 @@ macro_rules! bitand_assign_impl {\n     )+)\n }\n \n-#[cfg(not(stage0))]\n bitand_assign_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n \n /// The `BitOrAssign` trait is used to specify the functionality of `|=`.\n@@ -1254,15 +1195,13 @@ bitand_assign_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n ///     foo |= Foo;\n /// }\n /// ```\n-#[cfg(not(stage0))]\n #[lang = \"bitor_assign\"]\n #[unstable(feature = \"op_assign_traits\", reason = \"recently added\", issue = \"28235\")]\n pub trait BitOrAssign<Rhs=Self> {\n     /// The method for the `|=` operator\n     fn bitor_assign(&mut self, Rhs);\n }\n \n-#[cfg(not(stage0))]\n macro_rules! bitor_assign_impl {\n     ($($t:ty)+) => ($(\n         #[unstable(feature = \"op_assign_traits\", reason = \"recently added\", issue = \"28235\")]\n@@ -1273,7 +1212,6 @@ macro_rules! bitor_assign_impl {\n     )+)\n }\n \n-#[cfg(not(stage0))]\n bitor_assign_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n \n /// The `BitXorAssign` trait is used to specify the functionality of `^=`.\n@@ -1304,15 +1242,13 @@ bitor_assign_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n ///     foo ^= Foo;\n /// }\n /// ```\n-#[cfg(not(stage0))]\n #[lang = \"bitxor_assign\"]\n #[unstable(feature = \"op_assign_traits\", reason = \"recently added\", issue = \"28235\")]\n pub trait BitXorAssign<Rhs=Self> {\n     /// The method for the `^=` operator\n     fn bitxor_assign(&mut self, Rhs);\n }\n \n-#[cfg(not(stage0))]\n macro_rules! bitxor_assign_impl {\n     ($($t:ty)+) => ($(\n         #[unstable(feature = \"op_assign_traits\", reason = \"recently added\", issue = \"28235\")]\n@@ -1323,7 +1259,6 @@ macro_rules! bitxor_assign_impl {\n     )+)\n }\n \n-#[cfg(not(stage0))]\n bitxor_assign_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n \n /// The `ShlAssign` trait is used to specify the functionality of `<<=`.\n@@ -1354,15 +1289,13 @@ bitxor_assign_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n ///     foo <<= Foo;\n /// }\n /// ```\n-#[cfg(not(stage0))]\n #[lang = \"shl_assign\"]\n #[unstable(feature = \"op_assign_traits\", reason = \"recently added\", issue = \"28235\")]\n pub trait ShlAssign<Rhs> {\n     /// The method for the `<<=` operator\n     fn shl_assign(&mut self, Rhs);\n }\n \n-#[cfg(not(stage0))]\n macro_rules! shl_assign_impl {\n     ($t:ty, $f:ty) => (\n         #[unstable(feature = \"op_assign_traits\", reason = \"recently added\", issue = \"28235\")]\n@@ -1375,7 +1308,6 @@ macro_rules! shl_assign_impl {\n     )\n }\n \n-#[cfg(not(stage0))]\n macro_rules! shl_assign_impl_all {\n     ($($t:ty)*) => ($(\n         shl_assign_impl! { $t, u8 }\n@@ -1392,7 +1324,6 @@ macro_rules! shl_assign_impl_all {\n     )*)\n }\n \n-#[cfg(not(stage0))]\n shl_assign_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n \n /// The `ShrAssign` trait is used to specify the functionality of `>>=`.\n@@ -1423,15 +1354,13 @@ shl_assign_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n ///     foo >>= Foo;\n /// }\n /// ```\n-#[cfg(not(stage0))]\n #[lang = \"shr_assign\"]\n #[unstable(feature = \"op_assign_traits\", reason = \"recently added\", issue = \"28235\")]\n pub trait ShrAssign<Rhs=Self> {\n     /// The method for the `>>=` operator\n     fn shr_assign(&mut self, Rhs);\n }\n \n-#[cfg(not(stage0))]\n macro_rules! shr_assign_impl {\n     ($t:ty, $f:ty) => (\n         #[unstable(feature = \"op_assign_traits\", reason = \"recently added\", issue = \"28235\")]\n@@ -1444,7 +1373,6 @@ macro_rules! shr_assign_impl {\n     )\n }\n \n-#[cfg(not(stage0))]\n macro_rules! shr_assign_impl_all {\n     ($($t:ty)*) => ($(\n         shr_assign_impl! { $t, u8 }\n@@ -1461,7 +1389,6 @@ macro_rules! shr_assign_impl_all {\n     )*)\n }\n \n-#[cfg(not(stage0))]\n shr_assign_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n \n /// The `Index` trait is used to specify the functionality of indexing operations"}, {"sha": "e1e7869d548db03514b8c0cb2522e6e60f0171a1", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 4, "deletions": 22, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=2343a92a908901958c8207d6d0430a2e59ab0a9c", "patch": "@@ -499,28 +499,12 @@ unsafe impl<T: Send + ?Sized> Send for Unique<T> { }\n #[unstable(feature = \"unique\", issue = \"27730\")]\n unsafe impl<T: Sync + ?Sized> Sync for Unique<T> { }\n \n-#[cfg(stage0)]\n-macro_rules! unique_new {\n-    () => (\n-        /// Creates a new `Unique`.\n-        pub unsafe fn new(ptr: *mut T) -> Unique<T> {\n-            Unique { pointer: NonZero::new(ptr), _marker: PhantomData }\n-        }\n-    )\n-}\n-#[cfg(not(stage0))]\n-macro_rules! unique_new {\n-    () => (\n-        /// Creates a new `Unique`.\n-        pub const unsafe fn new(ptr: *mut T) -> Unique<T> {\n-            Unique { pointer: NonZero::new(ptr), _marker: PhantomData }\n-        }\n-    )\n-}\n-\n #[unstable(feature = \"unique\", issue = \"27730\")]\n impl<T: ?Sized> Unique<T> {\n-    unique_new!{}\n+    /// Creates a new `Unique`.\n+    pub const unsafe fn new(ptr: *mut T) -> Unique<T> {\n+        Unique { pointer: NonZero::new(ptr), _marker: PhantomData }\n+    }\n \n     /// Dereferences the content.\n     pub unsafe fn get(&self) -> &T {\n@@ -533,7 +517,6 @@ impl<T: ?Sized> Unique<T> {\n     }\n }\n \n-#[cfg(not(stage0))] // remove cfg after new snapshot\n #[unstable(feature = \"unique\", issue = \"27730\")]\n impl<T: ?Sized, U: ?Sized> CoerceUnsized<Unique<U>> for Unique<T> where T: Unsize<U> { }\n \n@@ -598,7 +581,6 @@ impl<T: ?Sized> Clone for Shared<T> {\n #[unstable(feature = \"shared\", issue = \"27730\")]\n impl<T: ?Sized> Copy for Shared<T> { }\n \n-#[cfg(not(stage0))] // remove cfg after new snapshot\n #[unstable(feature = \"shared\", issue = \"27730\")]\n impl<T: ?Sized, U: ?Sized> CoerceUnsized<Shared<U>> for Shared<T> where T: Unsize<U> { }\n "}, {"sha": "a60a1c67e175d2165d27aaeaf474c018bec53cc0", "filename": "src/libflate/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibflate%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibflate%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibflate%2Flib.rs?ref=2343a92a908901958c8207d6d0430a2e59ab0a9c", "patch": "@@ -14,11 +14,8 @@\n //! [def]: https://en.wikipedia.org/wiki/DEFLATE\n //! [mz]: https://code.google.com/p/miniz/\n \n-// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n-#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"flate\"]\n #![unstable(feature = \"rustc_private\", issue = \"27812\")]\n-#![cfg_attr(stage0, staged_api)]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n@@ -30,7 +27,6 @@\n #![feature(staged_api)]\n #![feature(unique)]\n #![cfg_attr(test, feature(rustc_private, rand, vec_push_all))]\n-#![cfg_attr(stage0, allow(improper_ctypes))]\n \n #[cfg(test)]\n #[macro_use]"}, {"sha": "7a229ad522227a7229e34958f013f91f82097466", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=2343a92a908901958c8207d6d0430a2e59ab0a9c", "patch": "@@ -14,11 +14,8 @@\n //! Parsing does not happen at runtime: structures of `std::fmt::rt` are\n //! generated instead.\n \n-// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n-#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"fmt_macros\"]\n #![unstable(feature = \"rustc_private\", issue = \"27812\")]\n-#![cfg_attr(stage0, staged_api)]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "57ce53e73b02577a95972139abb01612b9ab345e", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=2343a92a908901958c8207d6d0430a2e59ab0a9c", "patch": "@@ -77,14 +77,10 @@\n //! }\n //! ```\n \n-\n-// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n-#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"getopts\"]\n #![unstable(feature = \"rustc_private\",\n             reason = \"use the crates.io `getopts` library instead\",\n             issue = \"27812\")]\n-#![cfg_attr(stage0, staged_api)]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "b9fd5cc1910fc3044ac1405b89e2ccdaa8d33c5b", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=2343a92a908901958c8207d6d0430a2e59ab0a9c", "patch": "@@ -271,12 +271,9 @@\n //!\n //! * [DOT language](http://www.graphviz.org/doc/info/lang.html)\n \n-// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n-#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"graphviz\"]\n #![unstable(feature = \"rustc_private\", issue = \"27812\")]\n #![feature(staged_api)]\n-#![cfg_attr(stage0, staged_api)]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "dbd553acd68fc9f361793f3f65b10948921ec75a", "filename": "src/liblog/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Fliblog%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Fliblog%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Flib.rs?ref=2343a92a908901958c8207d6d0430a2e59ab0a9c", "patch": "@@ -156,13 +156,10 @@\n //! they're turned off (just a load and an integer comparison). This also means that\n //! if logging is disabled, none of the components of the log will be executed.\n \n-// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n-#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"log\"]\n #![unstable(feature = \"rustc_private\",\n             reason = \"use the crates.io `log` library instead\",\n             issue = \"27812\")]\n-#![cfg_attr(stage0, staged_api)]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "06f4c8dfd20a82b65dff234a0dc8c09302274a34", "filename": "src/librand/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=2343a92a908901958c8207d6d0430a2e59ab0a9c", "patch": "@@ -16,8 +16,6 @@\n //! is not recommended to use this library directly, but rather the official\n //! interface through `std::rand`.\n \n-// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n-#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"rand\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk.png\",\n@@ -26,7 +24,6 @@\n        html_playground_url = \"https://play.rust-lang.org/\",\n        test(attr(deny(warnings))))]\n #![no_std]\n-#![cfg_attr(stage0, staged_api)]\n #![unstable(feature = \"rand\",\n             reason = \"use `rand` from crates.io\",\n             issue = \"27703\")]\n@@ -37,7 +34,6 @@\n #![feature(step_by)]\n #![feature(custom_attribute)]\n #![allow(unused_attributes)]\n-#![cfg_attr(stage0, feature(no_std))]\n \n #![cfg_attr(test, feature(test, rand, rustc_private, iter_order_deprecated))]\n "}, {"sha": "d8d6ea93f7569f1b2ff1112072f191602ed203c2", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=2343a92a908901958c8207d6d0430a2e59ab0a9c", "patch": "@@ -111,11 +111,8 @@\n //!\n //! First 0x20 tags are reserved by RBML; custom tags start at 0x20.\n \n-// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n-#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"rbml\"]\n #![unstable(feature = \"rustc_private\", issue = \"27812\")]\n-#![cfg_attr(stage0, staged_api)]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "00d6237b855647298e737e32907f1f5c8a97a70f", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=2343a92a908901958c8207d6d0430a2e59ab0a9c", "patch": "@@ -14,11 +14,8 @@\n //!\n //! This API is completely unstable and subject to change.\n \n-// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n-#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"rustc\"]\n #![unstable(feature = \"rustc_private\", issue = \"27812\")]\n-#![cfg_attr(stage0, staged_api)]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "0273d1a76e9a8ee68645bd628e119cc5238a51d1", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=2343a92a908901958c8207d6d0430a2e59ab0a9c", "patch": "@@ -242,8 +242,6 @@ impl OverloadedCallType {\n // mem_categorization, it requires a TYPER, which is a type that\n // supplies types from the tree. After type checking is complete, you\n // can just use the tcx as the typer.\n-//\n-// FIXME(stage0): the :'t here is probably only important for stage0\n pub struct ExprUseVisitor<'d, 't, 'a: 't, 'tcx:'a+'d> {\n     typer: &'t infer::InferCtxt<'a, 'tcx>,\n     mc: mc::MemCategorizationContext<'t, 'a, 'tcx>,"}, {"sha": "b5d259d9ac999f1c84a3714947da28b1c4a8bc3e", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=2343a92a908901958c8207d6d0430a2e59ab0a9c", "patch": "@@ -90,7 +90,6 @@ fn get_resident() -> Option<usize> {\n }\n \n #[cfg(windows)]\n-#[cfg_attr(stage0, allow(improper_ctypes))]\n fn get_resident() -> Option<usize> {\n     type BOOL = i32;\n     type DWORD = u32;"}, {"sha": "844f4925bd274f7082451d898ab26d44422e9dd4", "filename": "src/librustc_back/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibrustc_back%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibrustc_back%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Flib.rs?ref=2343a92a908901958c8207d6d0430a2e59ab0a9c", "patch": "@@ -21,11 +21,8 @@\n //! one that doesn't; the one that doesn't might get decent parallel\n //! build speedups.\n \n-// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n-#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"rustc_back\"]\n #![unstable(feature = \"rustc_private\", issue = \"27812\")]\n-#![cfg_attr(stage0, staged_api)]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "e2a929f58e14da0b2fe0aa723a9c1c052d8e31d9", "filename": "src/librustc_bitflags/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibrustc_bitflags%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibrustc_bitflags%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_bitflags%2Flib.rs?ref=2343a92a908901958c8207d6d0430a2e59ab0a9c", "patch": "@@ -9,14 +9,10 @@\n // except according to those terms.\n \n \n-// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n-#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"rustc_bitflags\"]\n #![feature(associated_consts)]\n #![feature(staged_api)]\n-#![cfg_attr(stage0, staged_api)]\n #![crate_type = \"rlib\"]\n-#![cfg_attr(stage0, feature(no_std))]\n #![no_std]\n #![unstable(feature = \"rustc_private\", issue = \"27812\")]\n "}, {"sha": "0e1102bd77e0276bc09954045fe2c87d16124151", "filename": "src/librustc_borrowck/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibrustc_borrowck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibrustc_borrowck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Flib.rs?ref=2343a92a908901958c8207d6d0430a2e59ab0a9c", "patch": "@@ -8,11 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n-#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"rustc_borrowck\"]\n #![unstable(feature = \"rustc_private\", issue = \"27812\")]\n-#![cfg_attr(stage0, staged_api)]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "3bba7d651ad7162991f41d20fe96e081ed2e1ae3", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=2343a92a908901958c8207d6d0430a2e59ab0a9c", "patch": "@@ -16,13 +16,10 @@\n //!\n //! This API is completely unstable and subject to change.\n \n-// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n-#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"rustc_data_structures\"]\n #![unstable(feature = \"rustc_private\", issue = \"27812\")]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n-#![cfg_attr(stage0, staged_api)]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"https://www.rust-lang.org/favicon.ico\",\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]"}, {"sha": "210b1a26c21f18cc1aafee3489fe2ea53c3d0b4b", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 4, "deletions": 26, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=2343a92a908901958c8207d6d0430a2e59ab0a9c", "patch": "@@ -14,11 +14,8 @@\n //!\n //! This API is completely unstable and subject to change.\n \n-// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n-#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"rustc_driver\"]\n #![unstable(feature = \"rustc_private\", issue = \"27812\")]\n-#![cfg_attr(stage0, staged_api)]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n@@ -32,7 +29,6 @@\n #![feature(rustc_private)]\n #![feature(set_stdio)]\n #![feature(staged_api)]\n-#![feature(raw)] // remove after snapshot\n \n extern crate arena;\n extern crate flate;\n@@ -105,24 +101,6 @@ pub mod target_features;\n const BUG_REPORT_URL: &'static str = \"https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.\\\n                                       md#bug-reports\";\n \n-// SNAP 1af31d4\n-// This is a terrible hack. Our stage0 is older than 1.4 and does not\n-// support DST coercions, so this function performs the corecion\n-// manually. This should go away.\n-pub fn cstore_to_cratestore(a: Rc<CStore>) -> Rc<for<'s> CrateStore<'s>>\n-{\n-    use std::mem;\n-    use std::raw::TraitObject;\n-    unsafe {\n-        let TraitObject { vtable, .. } =\n-            mem::transmute::<&for<'s> CrateStore<'s>, TraitObject>(&*a);\n-        mem::transmute(TraitObject {\n-            data: mem::transmute(a),\n-            vtable: vtable\n-        })\n-    }\n-}\n-\n pub fn run(args: Vec<String>) -> isize {\n     monitor(move || run_compiler(&args, &mut RustcDefaultCalls));\n     0\n@@ -159,8 +137,8 @@ pub fn run_compiler<'a>(args: &[String], callbacks: &mut CompilerCalls<'a>) {\n     };\n \n     let cstore = Rc::new(CStore::new(token::get_ident_interner()));\n-    let cstore_ = cstore_to_cratestore(cstore.clone());\n-    let mut sess = build_session(sopts, input_file_path, descriptions, cstore_);\n+    let mut sess = build_session(sopts, input_file_path, descriptions,\n+                                 cstore.clone());\n     rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n     if sess.unstable_options() {\n         sess.opts.show_span = matches.opt_str(\"show-span\");\n@@ -356,8 +334,8 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n                     return None;\n                 }\n                 let cstore = Rc::new(CStore::new(token::get_ident_interner()));\n-                let cstore_ = cstore_to_cratestore(cstore.clone());\n-                let sess = build_session(sopts.clone(), None, descriptions.clone(), cstore_);\n+                let sess = build_session(sopts.clone(), None, descriptions.clone(),\n+                                         cstore.clone());\n                 rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n                 let should_stop = RustcDefaultCalls::print_crate_info(&sess, None, odir, ofile);\n                 if should_stop == Compilation::Stop {"}, {"sha": "b12c41d060a077cd488d9fbcfa739585539aa6e5", "filename": "src/librustc_front/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibrustc_front%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibrustc_front%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flib.rs?ref=2343a92a908901958c8207d6d0430a2e59ab0a9c", "patch": "@@ -14,11 +14,8 @@\n //!\n //! This API is completely unstable and subject to change.\n \n-// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n-#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"rustc_front\"]\n #![unstable(feature = \"rustc_private\", issue = \"27812\")]\n-#![cfg_attr(stage0, staged_api)]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "80ef334fe189b1790a6f1eec51bf37563177450f", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=2343a92a908901958c8207d6d0430a2e59ab0a9c", "patch": "@@ -19,11 +19,8 @@\n //!\n //! This API is completely unstable and subject to change.\n \n-// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n-#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"rustc_lint\"]\n #![unstable(feature = \"rustc_private\", issue = \"27812\")]\n-#![cfg_attr(stage0, staged_api)]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "e2217e367a08e01ccb2fe3a2a67dba5342b2df9a", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=2343a92a908901958c8207d6d0430a2e59ab0a9c", "patch": "@@ -8,19 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n-#![cfg_attr(stage0, feature(custom_attribute))]\n #![allow(non_upper_case_globals)]\n #![allow(non_camel_case_types)]\n #![allow(non_snake_case)]\n #![allow(dead_code)]\n #![allow(trivial_casts)]\n \n-#![cfg_attr(stage0, allow(improper_ctypes))]\n-\n #![crate_name = \"rustc_llvm\"]\n #![unstable(feature = \"rustc_private\", issue = \"27812\")]\n-#![cfg_attr(stage0, staged_api)]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "42332c46969790a4d8974e7aaeabce004b0e27d3", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=2343a92a908901958c8207d6d0430a2e59ab0a9c", "patch": "@@ -8,10 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"rustc_metadata\"]\n #![unstable(feature = \"rustc_private\", issue = \"27812\")]\n-#![cfg_attr(stage0, staged_api)]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "e857434682d158a8a16a844bdcb465493733227e", "filename": "src/librustc_platform_intrinsics/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibrustc_platform_intrinsics%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibrustc_platform_intrinsics%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Flib.rs?ref=2343a92a908901958c8207d6d0430a2e59ab0a9c", "patch": "@@ -8,10 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"rustc_platform_intrinsics\"]\n #![unstable(feature = \"rustc_private\", issue = \"27812\")]\n-#![cfg_attr(stage0, staged_api)]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![feature(staged_api, rustc_private)]"}, {"sha": "333c226c2a373f0de6af00782b6f1018cd1ee44c", "filename": "src/librustc_plugin/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibrustc_plugin%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibrustc_plugin%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Flib.rs?ref=2343a92a908901958c8207d6d0430a2e59ab0a9c", "patch": "@@ -50,10 +50,8 @@\n //! See the [Plugins Chapter](../../book/compiler-plugins.html) of the book\n //! for more examples.\n \n-#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"rustc_plugin\"]\n #![unstable(feature = \"rustc_private\", issue = \"27812\")]\n-#![cfg_attr(stage0, staged_api)]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "d1a894c61f7e205feacf8ca75c08a0932addda84", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=2343a92a908901958c8207d6d0430a2e59ab0a9c", "patch": "@@ -8,11 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n-#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"rustc_privacy\"]\n #![unstable(feature = \"rustc_private\", issue = \"27812\")]\n-#![cfg_attr(stage0, staged_api)]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "5711807a6172f6f82928f79bf284ccb343bee3ff", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=2343a92a908901958c8207d6d0430a2e59ab0a9c", "patch": "@@ -8,11 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n-#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"rustc_resolve\"]\n #![unstable(feature = \"rustc_private\", issue = \"27812\")]\n-#![cfg_attr(stage0, staged_api)]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "a17e0a4ccd78dbce24d20571ce145575fdd17d4a", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=2343a92a908901958c8207d6d0430a2e59ab0a9c", "patch": "@@ -14,11 +14,8 @@\n //!\n //! This API is completely unstable and subject to change.\n \n-// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n-#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"rustc_trans\"]\n #![unstable(feature = \"rustc_private\", issue = \"27812\")]\n-#![cfg_attr(stage0, staged_api)]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "70c6d6f05c66ae34a93dee290cbec5a3a0b010e7", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=2343a92a908901958c8207d6d0430a2e59ab0a9c", "patch": "@@ -62,11 +62,9 @@ independently:\n This API is completely unstable and subject to change.\n \n */\n-// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n-#![cfg_attr(stage0, feature(custom_attribute))]\n+\n #![crate_name = \"rustc_typeck\"]\n #![unstable(feature = \"rustc_private\", issue = \"27812\")]\n-#![cfg_attr(stage0, staged_api)]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "161da079110615b877a264c3bce951361fa16dbc", "filename": "src/librustc_unicode/lib.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibrustc_unicode%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibrustc_unicode%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Flib.rs?ref=2343a92a908901958c8207d6d0430a2e59ab0a9c", "patch": "@@ -20,11 +20,8 @@\n //! provide for basic string-related manipulations. This crate does not\n //! (yet) aim to provide a full set of Unicode tables.\n \n-// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n-#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"rustc_unicode\"]\n #![unstable(feature = \"unicode\", issue = \"27783\")]\n-#![cfg_attr(stage0, staged_api)]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n@@ -34,9 +31,6 @@\n        test(no_crate_inject, attr(allow(unused_variables), deny(warnings))))]\n #![no_std]\n \n-#![cfg_attr(stage0, feature(rustc_attrs))]\n-#![cfg_attr(stage0, feature(no_std))]\n-#![cfg_attr(stage0, allow(unused_attributes))]\n #![feature(core_char_ext)]\n #![feature(lang_items)]\n #![feature(staged_api)]"}, {"sha": "d7190a4bea974243ae46801c67ff85df6bbf63b9", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=2343a92a908901958c8207d6d0430a2e59ab0a9c", "patch": "@@ -125,8 +125,8 @@ pub fn run_core(search_paths: SearchPaths, cfgs: Vec<String>, externs: Externs,\n                                                   codemap.clone());\n \n     let cstore = Rc::new(CStore::new(token::get_ident_interner()));\n-    let cstore_ = ::rustc_driver::cstore_to_cratestore(cstore.clone());\n-    let sess = session::build_session_(sessopts, cpath, diagnostic_handler, codemap, cstore_);\n+    let sess = session::build_session_(sessopts, cpath, diagnostic_handler,\n+                                       codemap, cstore.clone());\n     rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n \n     let mut cfg = config::build_configuration(&sess);"}, {"sha": "ffda261c24f3d819ed05f32fa8ba981be261a580", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=2343a92a908901958c8207d6d0430a2e59ab0a9c", "patch": "@@ -8,17 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n-#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"rustdoc\"]\n #![unstable(feature = \"rustdoc\", issue = \"27812\")]\n-#![cfg_attr(stage0, staged_api)]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n-   html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n-   html_root_url = \"https://doc.rust-lang.org/nightly/\",\n-   html_playground_url = \"https://play.rust-lang.org/\")]\n+       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n+       html_root_url = \"https://doc.rust-lang.org/nightly/\",\n+       html_playground_url = \"https://play.rust-lang.org/\")]\n \n #![feature(box_patterns)]\n #![feature(box_syntax)]"}, {"sha": "7aa97d3652f5ab3d03db2fddae1dec8bdc09d9c7", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=2343a92a908901958c8207d6d0430a2e59ab0a9c", "patch": "@@ -80,12 +80,11 @@ pub fn run(input: &str,\n                                                   codemap.clone());\n \n     let cstore = Rc::new(CStore::new(token::get_ident_interner()));\n-    let cstore_ = ::rustc_driver::cstore_to_cratestore(cstore.clone());\n     let sess = session::build_session_(sessopts,\n                                        Some(input_path.clone()),\n                                        diagnostic_handler,\n                                        codemap,\n-                                       cstore_);\n+                                       cstore.clone());\n     rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n \n     let mut cfg = config::build_configuration(&sess);\n@@ -235,12 +234,11 @@ fn runtest(test: &str, cratename: &str, cfgs: Vec<String>, libs: SearchPaths,\n     let diagnostic_handler = errors::Handler::with_emitter(true, false, box emitter);\n \n     let cstore = Rc::new(CStore::new(token::get_ident_interner()));\n-    let cstore_ = ::rustc_driver::cstore_to_cratestore(cstore.clone());\n     let sess = session::build_session_(sessopts,\n                                        None,\n                                        diagnostic_handler,\n                                        codemap,\n-                                       cstore_);\n+                                       cstore.clone());\n     rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n \n     let outdir = TempDir::new(\"rustdoctest\").ok().expect(\"rustdoc needs a tempdir\");"}, {"sha": "2941f6f8a026e4b21e3f19f0e8dc2c9d15f85de7", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=2343a92a908901958c8207d6d0430a2e59ab0a9c", "patch": "@@ -14,13 +14,10 @@\n Core encoding and decoding interfaces.\n */\n \n-// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n-#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"serialize\"]\n #![unstable(feature = \"rustc_private\",\n             reason = \"deprecated in favor of rustc-serialize on crates.io\",\n             issue = \"27812\")]\n-#![cfg_attr(stage0, staged_api)]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "cc158eba3c2896360dfa0ff981720390282733ee", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=2343a92a908901958c8207d6d0430a2e59ab0a9c", "patch": "@@ -199,11 +199,8 @@\n //! [other]: #what-is-in-the-standard-library-documentation\n //! [primitive types]: ../book/primitive-types.html\n \n-// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n-#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"std\"]\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n-#![cfg_attr(stage0, staged_api)]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n@@ -214,12 +211,6 @@\n        test(no_crate_inject, attr(deny(warnings))),\n        test(attr(allow(dead_code, deprecated, unused_variables, unused_mut))))]\n \n-#![cfg_attr(stage0, allow(unused_attributes))]\n-#![cfg_attr(stage0, allow(improper_ctypes))]\n-\n-#![cfg_attr(stage0, feature(rustc_attrs))]\n-#![cfg_attr(stage0, feature(no_std))]\n-#![cfg_attr(stage0, allow(unused_attributes))]\n #![feature(alloc)]\n #![feature(allow_internal_unstable)]\n #![feature(asm)]"}, {"sha": "c7cb10a470748e8af38927e2d1c4235a1b338f4e", "filename": "src/libstd/rand/os.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibstd%2Frand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibstd%2Frand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fos.rs?ref=2343a92a908901958c8207d6d0430a2e59ab0a9c", "patch": "@@ -238,8 +238,6 @@ mod imp {\n \n #[cfg(target_os = \"ios\")]\n mod imp {\n-    #[cfg(stage0)] use prelude::v1::*;\n-\n     use io;\n     use mem;\n     use ptr;"}, {"sha": "feb05c7b56008e7881947f4fc0889607bd3d0fe2", "filename": "src/libstd/sys/common/libunwind.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibstd%2Fsys%2Fcommon%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibstd%2Fsys%2Fcommon%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Flibunwind.rs?ref=2343a92a908901958c8207d6d0430a2e59ab0a9c", "patch": "@@ -131,8 +131,6 @@ extern \"C\" {\n \n     pub fn _Unwind_DeleteException(exception: *mut _Unwind_Exception);\n \n-    // remove cfg after new snapshot\n-    #[cfg(not(all(stage0, target_os=\"windows\", target_arch=\"x86_64\")))]\n     #[unwind]\n     pub fn _Unwind_Resume(exception: *mut _Unwind_Exception) -> !;\n }"}, {"sha": "0f10e7274614ce9a1104ff5bc89f078a51d11300", "filename": "src/libstd/sys/common/unwind/mod.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fmod.rs?ref=2343a92a908901958c8207d6d0430a2e59ab0a9c", "patch": "@@ -88,18 +88,8 @@ use sys_common::mutex::Mutex;\n #[path = \"seh.rs\"] #[doc(hidden)]\n pub mod imp;\n \n-// stage0: i686-pc-windows-gnu\n-#[cfg(all(stage0, windows, target_arch = \"x86_64\", target_env = \"gnu\"))]\n-#[path = \"seh64_gnu.rs\"] #[doc(hidden)]\n-pub mod imp;\n-\n-// stage0: x86_64-pc-windows-msvc\n-#[cfg(all(stage0, windows, target_arch = \"x86_64\", target_env = \"msvc\"))]\n-#[path = \"seh.rs\"] #[doc(hidden)]\n-pub mod imp;\n-\n // x86_64-pc-windows-*\n-#[cfg(all(not(stage0), windows, target_arch = \"x86_64\"))]\n+#[cfg(all(windows, target_arch = \"x86_64\"))]\n #[path = \"seh64_gnu.rs\"] #[doc(hidden)]\n pub mod imp;\n "}, {"sha": "34e32d0d5b62af67e27ef641967cc5514fb5ad88", "filename": "src/libstd/sys/windows/c.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs?ref=2343a92a908901958c8207d6d0430a2e59ab0a9c", "patch": "@@ -17,7 +17,7 @@ use os::raw::{c_char, c_short, c_ulonglong};\n use libc::{wchar_t, size_t, c_void};\n use ptr;\n \n-#[cfg_attr(not(stage0), repr(simd))]\n+#[repr(simd)]\n #[repr(C)]\n struct u64x2(u64, u64);\n "}, {"sha": "c09e35f1077a53fca990cf05ee447ac2ab1369d2", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=2343a92a908901958c8207d6d0430a2e59ab0a9c", "patch": "@@ -14,20 +14,15 @@\n //!\n //! This API is completely unstable and subject to change.\n \n-// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n-#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"syntax\"]\n #![unstable(feature = \"rustc_private\", issue = \"27812\")]\n-#![cfg_attr(stage0, staged_api)]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\",\n        test(attr(deny(warnings))))]\n \n-#![cfg_attr(stage0, feature(rustc_attrs))]\n-#![cfg_attr(stage0, allow(unused_attributes))]\n #![feature(associated_consts)]\n #![feature(filling_drop)]\n #![feature(libc)]"}, {"sha": "a032666595ebeb300069db0660d02aa366ca6a75", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=2343a92a908901958c8207d6d0430a2e59ab0a9c", "patch": "@@ -17,8 +17,6 @@\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n-#![cfg_attr(stage0, feature(custom_attribute))]\n-#![cfg_attr(stage0, staged_api)]\n #![unstable(feature = \"rustc_private\", issue = \"27812\")]\n \n #![feature(rustc_private)]"}, {"sha": "d4c9cb8e2541b4017c7b7c6a7a798006e23303c4", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=2343a92a908901958c8207d6d0430a2e59ab0a9c", "patch": "@@ -40,13 +40,10 @@\n //! [win]: http://msdn.microsoft.com/en-us/library/windows/desktop/ms682010%28v=vs.85%29.aspx\n //! [ti]: https://en.wikipedia.org/wiki/Terminfo\n \n-// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n-#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"term\"]\n #![unstable(feature = \"rustc_private\",\n             reason = \"use the crates.io `term` library instead\",\n             issue = \"27812\")]\n-#![cfg_attr(stage0, staged_api)]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "20d7c66cf12217789cb784875a9dc8d0d8b33c95", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=2343a92a908901958c8207d6d0430a2e59ab0a9c", "patch": "@@ -23,11 +23,8 @@\n // running tests while providing a base that other test frameworks may\n // build off of.\n \n-// Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n-#![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"test\"]\n #![unstable(feature = \"test\", issue = \"27812\")]\n-#![cfg_attr(stage0, staged_api)]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "d1b6fe6655ac6619851b9e1b2fad8bc5f5f9c597", "filename": "src/rtstartup/rsbegin.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Frtstartup%2Frsbegin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Frtstartup%2Frsbegin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frtstartup%2Frsbegin.rs?ref=2343a92a908901958c8207d6d0430a2e59ab0a9c", "patch": "@@ -22,8 +22,6 @@\n // object (usually called `crtX.o), which then invokes initialization callbacks\n // of other runtime components (registered via yet another special image section).\n \n-#![cfg_attr(stage0, feature(no_std))]\n-\n #![crate_type=\"rlib\"]\n #![no_std]\n #![allow(non_camel_case_types)]"}, {"sha": "5e4e13ebd05e4ea13c994a50f4e8275a2aee5843", "filename": "src/rtstartup/rsend.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Frtstartup%2Frsend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Frtstartup%2Frsend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frtstartup%2Frsend.rs?ref=2343a92a908901958c8207d6d0430a2e59ab0a9c", "patch": "@@ -10,8 +10,6 @@\n \n // See rsbegin.rs for details.\n \n-#![cfg_attr(stage0, feature(no_std))]\n-\n #![crate_type=\"rlib\"]\n #![no_std]\n "}, {"sha": "81ff9b051721d60721840366929e3daac58140f2", "filename": "src/snapshots.txt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Fsnapshots.txt", "raw_url": "https://github.com/rust-lang/rust/raw/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Fsnapshots.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsnapshots.txt?ref=2343a92a908901958c8207d6d0430a2e59ab0a9c", "patch": "@@ -1,3 +1,11 @@\n+S 2015-12-18 3391630\n+  linux-i386 a09c4a4036151d0cb28e265101669731600e01f2\n+  linux-x86_64 97e2a5eb8904962df8596e95d6e5d9b574d73bf4\n+  macos-i386 ca52d2d3ba6497ed007705ee3401cf7efc136ca1\n+  macos-x86_64 3c44ffa18f89567c2b81f8d695e711c86d81ffc7\n+  winnt-i386 f9056ebd3db9611d31c2dc6dc5f96c7208d5d227\n+  winnt-x86_64 a85a40e535d828016181d3aa40afe34c3e36ab8c\n+\n S 2015-08-11 1af31d4\n   bitrig-x86_64 739e0635cd5a1b3635f1457aae3ef6390ea9a7a8\n   freebsd-i386 3cd4a44fb97b3135be3d1b760bea604a381e85dc"}, {"sha": "928f2f996a028820aac3931bf75ea61832f612d2", "filename": "src/test/run-make/execution-engine/test.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs?ref=2343a92a908901958c8207d6d0430a2e59ab0a9c", "patch": "@@ -215,9 +215,8 @@ fn compile_program(input: &str, sysroot: PathBuf)\n     let handle = thread.spawn(move || {\n         let opts = build_exec_options(sysroot);\n         let cstore = Rc::new(CStore::new(token::get_ident_interner()));\n-        let cstore_ = ::rustc_driver::cstore_to_cratestore(cstore.clone());\n         let sess = build_session(opts, None, Registry::new(&rustc::DIAGNOSTICS),\n-                                 cstore_);\n+                                 cstore.clone());\n         rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n \n         let cfg = build_configuration(&sess);"}, {"sha": "4b1c84ce64fee3e84c85292a8ae5e88af593011a", "filename": "src/test/run-make/issue-19371/foo.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Ftest%2Frun-make%2Fissue-19371%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2343a92a908901958c8207d6d0430a2e59ab0a9c/src%2Ftest%2Frun-make%2Fissue-19371%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-19371%2Ffoo.rs?ref=2343a92a908901958c8207d6d0430a2e59ab0a9c", "patch": "@@ -55,8 +55,7 @@ fn basic_sess(sysroot: PathBuf) -> (Session, Rc<CStore>) {\n \n     let descriptions = Registry::new(&rustc::DIAGNOSTICS);\n     let cstore = Rc::new(CStore::new(token::get_ident_interner()));\n-    let cstore_ = ::rustc_driver::cstore_to_cratestore(cstore.clone());\n-    let sess = build_session(opts, None, descriptions, cstore_);\n+    let sess = build_session(opts, None, descriptions, cstore.clone());\n     rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n     (sess, cstore)\n }"}]}