{"sha": "8a13abba1d628ee17e1df93923665e6118221012", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhMTNhYmJhMWQ2MjhlZTE3ZTFkZjkzOTIzNjY1ZTYxMTgyMjEwMTI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2021-01-21T01:25:27Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2021-01-22T05:41:46Z"}, "message": "Tweak error for invalid `break expr`\n\nPoint at loop head on invalid `break expr`.\nSuggest removing `expr` or using label if available.", "tree": {"sha": "e1f351d74dbab686c5113ffe6ebef6b2ab048984", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1f351d74dbab686c5113ffe6ebef6b2ab048984"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a13abba1d628ee17e1df93923665e6118221012", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a13abba1d628ee17e1df93923665e6118221012", "html_url": "https://github.com/rust-lang/rust/commit/8a13abba1d628ee17e1df93923665e6118221012", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a13abba1d628ee17e1df93923665e6118221012/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "060dba67b7523a69223a9aef7c9fe2494ec27535", "url": "https://api.github.com/repos/rust-lang/rust/commits/060dba67b7523a69223a9aef7c9fe2494ec27535", "html_url": "https://github.com/rust-lang/rust/commit/060dba67b7523a69223a9aef7c9fe2494ec27535"}], "stats": {"total": 250, "additions": 175, "deletions": 75}, "files": [{"sha": "18b6b98e16a4fedd6787758f4ca751e1f83de8ca", "filename": "compiler/rustc_passes/src/loops.rs", "status": "modified", "additions": 56, "deletions": 20, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/8a13abba1d628ee17e1df93923665e6118221012/compiler%2Frustc_passes%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a13abba1d628ee17e1df93923665e6118221012/compiler%2Frustc_passes%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Floops.rs?ref=8a13abba1d628ee17e1df93923665e6118221012", "patch": "@@ -90,47 +90,83 @@ impl<'a, 'hir> Visitor<'hir> for CheckLoopVisitor<'a, 'hir> {\n                 };\n \n                 if let Some(Node::Block(_)) = loop_id.and_then(|id| self.hir_map.find(id)) {\n-                        return;\n-                    }\n+                    return;\n                 }\n \n-                if opt_expr.is_some() {\n-                    let loop_kind = if let Some(loop_id) = loop_id {\n-                        Some(match self.hir_map.expect_expr(loop_id).kind {\n-                            hir::ExprKind::Loop(_, _, source) => source,\n+                if let Some(break_expr) = opt_expr {\n+                    let (head, label, loop_kind) = if let Some(loop_id) = loop_id {\n+                        match self.hir_map.expect_expr(loop_id).kind {\n+                            hir::ExprKind::Loop(_, label, source, sp) => {\n+                                (Some(sp), label, Some(source))\n+                            }\n                             ref r => {\n                                 span_bug!(e.span, \"break label resolved to a non-loop: {:?}\", r)\n                             }\n-                        })\n+                        }\n                     } else {\n-                        None\n+                        (None, None, None)\n                     };\n                     match loop_kind {\n                         None | Some(hir::LoopSource::Loop) => (),\n                         Some(kind) => {\n-                            struct_span_err!(\n+                            let mut err = struct_span_err!(\n                                 self.sess,\n                                 e.span,\n                                 E0571,\n                                 \"`break` with value from a `{}` loop\",\n                                 kind.name()\n-                            )\n-                            .span_label(\n+                            );\n+                            err.span_label(\n                                 e.span,\n-                                \"can only break with a value inside \\\n-                                            `loop` or breakable block\",\n-                            )\n-                            .span_suggestion(\n+                                \"can only break with a value inside `loop` or breakable block\",\n+                            );\n+                            if let Some(head) = head {\n+                                err.span_label(\n+                                    head,\n+                                    &format!(\n+                                        \"you can't `break` with a value in a `{}` loop\",\n+                                        kind.name()\n+                                    ),\n+                                );\n+                            }\n+                            err.span_suggestion(\n                                 e.span,\n                                 &format!(\n-                                    \"instead, use `break` on its own \\\n-                                        without a value inside this `{}` loop\",\n-                                    kind.name()\n+                                    \"use `break` on its own without a value inside this `{}` loop\",\n+                                    kind.name(),\n                                 ),\n                                 \"break\".to_string(),\n                                 Applicability::MaybeIncorrect,\n-                            )\n-                            .emit();\n+                            );\n+                            if let Some(label) = label {\n+                                match break_expr.kind {\n+                                    hir::ExprKind::Path(hir::QPath::Resolved(\n+                                        None,\n+                                        hir::Path {\n+                                            segments: [segment],\n+                                            res: hir::def::Res::Err,\n+                                            ..\n+                                        },\n+                                    )) if label.ident.to_string()\n+                                        == format!(\"'{}\", segment.ident) =>\n+                                    {\n+                                        // This error is redundant, we will have already emitted a\n+                                        // suggestion to use the label when `segment` wasn't found\n+                                        // (hence the `Res::Err` check).\n+                                        err.delay_as_bug();\n+                                    }\n+                                    _ => {\n+                                        err.span_suggestion(\n+                                            break_expr.span,\n+                                            \"alternatively, you might have meant to use the \\\n+                                             available loop label\",\n+                                            label.ident.to_string(),\n+                                            Applicability::MaybeIncorrect,\n+                                        );\n+                                    }\n+                                }\n+                            }\n+                            err.emit();\n                         }\n                     }\n                 }"}, {"sha": "17c709768d5ed040b33db771b0be8e0001f41e4b", "filename": "src/test/ui/label/label_misspelled.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8a13abba1d628ee17e1df93923665e6118221012/src%2Ftest%2Fui%2Flabel%2Flabel_misspelled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a13abba1d628ee17e1df93923665e6118221012/src%2Ftest%2Fui%2Flabel%2Flabel_misspelled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flabel%2Flabel_misspelled.rs?ref=8a13abba1d628ee17e1df93923665e6118221012", "patch": "@@ -1,8 +1,4 @@\n fn main() {\n-    'LOOP: loop {\n-        LOOP;\n-        //~^ ERROR cannot find value `LOOP` in this scope\n-    };\n     'while_loop: while true { //~ WARN denote infinite loops with\n         while_loop;\n         //~^ ERROR cannot find value `while_loop` in this scope\n@@ -15,6 +11,10 @@ fn main() {\n         for_loop;\n         //~^ ERROR cannot find value `for_loop` in this scope\n     };\n+    'LOOP: loop {\n+        LOOP;\n+        //~^ ERROR cannot find value `LOOP` in this scope\n+    };\n }\n \n fn foo() {\n@@ -25,16 +25,29 @@ fn foo() {\n     'while_loop: while true { //~ WARN denote infinite loops with\n         break while_loop;\n         //~^ ERROR cannot find value `while_loop` in this scope\n-        //~| ERROR `break` with value from a `while` loop\n     };\n     'while_let: while let Some(_) = Some(()) {\n         break while_let;\n         //~^ ERROR cannot find value `while_let` in this scope\n-        //~| ERROR `break` with value from a `while` loop\n     }\n     'for_loop: for _ in 0..3 {\n         break for_loop;\n         //~^ ERROR cannot find value `for_loop` in this scope\n-        //~| ERROR `break` with value from a `for` loop\n+    };\n+}\n+\n+fn bar() {\n+    let foo = ();\n+    'while_loop: while true { //~ WARN denote infinite loops with\n+        break foo;\n+        //~^ ERROR `break` with value from a `while` loop\n+    };\n+    'while_let: while let Some(_) = Some(()) {\n+        break foo;\n+        //~^ ERROR `break` with value from a `while` loop\n+    }\n+    'for_loop: for _ in 0..3 {\n+        break foo;\n+        //~^ ERROR `break` with value from a `for` loop\n     };\n }"}, {"sha": "3e99b0ff9797f1f8680a991271a2efd7426e6298", "filename": "src/test/ui/label/label_misspelled.stderr", "status": "modified", "additions": 51, "deletions": 27, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/8a13abba1d628ee17e1df93923665e6118221012/src%2Ftest%2Fui%2Flabel%2Flabel_misspelled.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a13abba1d628ee17e1df93923665e6118221012/src%2Ftest%2Fui%2Flabel%2Flabel_misspelled.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flabel%2Flabel_misspelled.stderr?ref=8a13abba1d628ee17e1df93923665e6118221012", "patch": "@@ -1,35 +1,35 @@\n-error[E0425]: cannot find value `LOOP` in this scope\n-  --> $DIR/label_misspelled.rs:3:9\n-   |\n-LL |     'LOOP: loop {\n-   |     ----- a label with a similar name exists\n-LL |         LOOP;\n-   |         ^^^^ not found in this scope\n-\n error[E0425]: cannot find value `while_loop` in this scope\n-  --> $DIR/label_misspelled.rs:7:9\n+  --> $DIR/label_misspelled.rs:3:9\n    |\n LL |     'while_loop: while true {\n    |     ----------- a label with a similar name exists\n LL |         while_loop;\n    |         ^^^^^^^^^^ not found in this scope\n \n error[E0425]: cannot find value `while_let` in this scope\n-  --> $DIR/label_misspelled.rs:11:9\n+  --> $DIR/label_misspelled.rs:7:9\n    |\n LL |     'while_let: while let Some(_) = Some(()) {\n    |     ---------- a label with a similar name exists\n LL |         while_let;\n    |         ^^^^^^^^^ not found in this scope\n \n error[E0425]: cannot find value `for_loop` in this scope\n-  --> $DIR/label_misspelled.rs:15:9\n+  --> $DIR/label_misspelled.rs:11:9\n    |\n LL |     'for_loop: for _ in 0..3 {\n    |     --------- a label with a similar name exists\n LL |         for_loop;\n    |         ^^^^^^^^ not found in this scope\n \n+error[E0425]: cannot find value `LOOP` in this scope\n+  --> $DIR/label_misspelled.rs:15:9\n+   |\n+LL |     'LOOP: loop {\n+   |     ----- a label with a similar name exists\n+LL |         LOOP;\n+   |         ^^^^ not found in this scope\n+\n error[E0425]: cannot find value `LOOP` in this scope\n   --> $DIR/label_misspelled.rs:22:15\n    |\n@@ -53,7 +53,7 @@ LL |         break while_loop;\n    |               help: use the similarly named label: `'while_loop`\n \n error[E0425]: cannot find value `while_let` in this scope\n-  --> $DIR/label_misspelled.rs:31:15\n+  --> $DIR/label_misspelled.rs:30:15\n    |\n LL |     'while_let: while let Some(_) = Some(()) {\n    |     ---------- a label with a similar name exists\n@@ -64,7 +64,7 @@ LL |         break while_let;\n    |               help: use the similarly named label: `'while_let`\n \n error[E0425]: cannot find value `for_loop` in this scope\n-  --> $DIR/label_misspelled.rs:36:15\n+  --> $DIR/label_misspelled.rs:34:15\n    |\n LL |     'for_loop: for _ in 0..3 {\n    |     --------- a label with a similar name exists\n@@ -75,7 +75,7 @@ LL |         break for_loop;\n    |               help: use the similarly named label: `'for_loop`\n \n warning: denote infinite loops with `loop { ... }`\n-  --> $DIR/label_misspelled.rs:6:5\n+  --> $DIR/label_misspelled.rs:2:5\n    |\n LL |     'while_loop: while true {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ help: use `loop`\n@@ -88,40 +88,64 @@ warning: denote infinite loops with `loop { ... }`\n LL |     'while_loop: while true {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ help: use `loop`\n \n+warning: denote infinite loops with `loop { ... }`\n+  --> $DIR/label_misspelled.rs:41:5\n+   |\n+LL |     'while_loop: while true {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ help: use `loop`\n+\n error[E0571]: `break` with value from a `while` loop\n-  --> $DIR/label_misspelled.rs:26:9\n+  --> $DIR/label_misspelled.rs:42:9\n    |\n-LL |         break while_loop;\n-   |         ^^^^^^^^^^^^^^^^ can only break with a value inside `loop` or breakable block\n+LL |     'while_loop: while true {\n+   |     ----------------------- you can't `break` with a value in a `while` loop\n+LL |         break foo;\n+   |         ^^^^^^^^^ can only break with a value inside `loop` or breakable block\n    |\n-help: instead, use `break` on its own without a value inside this `while` loop\n+help: use `break` on its own without a value inside this `while` loop\n    |\n LL |         break;\n    |         ^^^^^\n+help: alternatively, you might have meant to use the available loop label\n+   |\n+LL |         break 'while_loop;\n+   |               ^^^^^^^^^^^\n \n error[E0571]: `break` with value from a `while` loop\n-  --> $DIR/label_misspelled.rs:31:9\n+  --> $DIR/label_misspelled.rs:46:9\n    |\n-LL |         break while_let;\n-   |         ^^^^^^^^^^^^^^^ can only break with a value inside `loop` or breakable block\n+LL |     'while_let: while let Some(_) = Some(()) {\n+   |     ---------------------------------------- you can't `break` with a value in a `while` loop\n+LL |         break foo;\n+   |         ^^^^^^^^^ can only break with a value inside `loop` or breakable block\n    |\n-help: instead, use `break` on its own without a value inside this `while` loop\n+help: use `break` on its own without a value inside this `while` loop\n    |\n LL |         break;\n    |         ^^^^^\n+help: alternatively, you might have meant to use the available loop label\n+   |\n+LL |         break 'while_let;\n+   |               ^^^^^^^^^^\n \n error[E0571]: `break` with value from a `for` loop\n-  --> $DIR/label_misspelled.rs:36:9\n+  --> $DIR/label_misspelled.rs:50:9\n    |\n-LL |         break for_loop;\n-   |         ^^^^^^^^^^^^^^ can only break with a value inside `loop` or breakable block\n+LL |     'for_loop: for _ in 0..3 {\n+   |     ------------------------ you can't `break` with a value in a `for` loop\n+LL |         break foo;\n+   |         ^^^^^^^^^ can only break with a value inside `loop` or breakable block\n    |\n-help: instead, use `break` on its own without a value inside this `for` loop\n+help: use `break` on its own without a value inside this `for` loop\n    |\n LL |         break;\n    |         ^^^^^\n+help: alternatively, you might have meant to use the available loop label\n+   |\n+LL |         break 'for_loop;\n+   |               ^^^^^^^^^\n \n-error: aborting due to 11 previous errors; 2 warnings emitted\n+error: aborting due to 11 previous errors; 3 warnings emitted\n \n Some errors have detailed explanations: E0425, E0571.\n For more information about an error, try `rustc --explain E0425`."}, {"sha": "1c0d39a6e5ad738983fa19f94cd1cd28f23f7303", "filename": "src/test/ui/loops/loop-break-value-no-repeat.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a13abba1d628ee17e1df93923665e6118221012/src%2Ftest%2Fui%2Floops%2Floop-break-value-no-repeat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a13abba1d628ee17e1df93923665e6118221012/src%2Ftest%2Fui%2Floops%2Floop-break-value-no-repeat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floop-break-value-no-repeat.stderr?ref=8a13abba1d628ee17e1df93923665e6118221012", "patch": "@@ -1,10 +1,12 @@\n error[E0571]: `break` with value from a `for` loop\n   --> $DIR/loop-break-value-no-repeat.rs:12:9\n    |\n+LL |     for _ in &[1,2,3] {\n+   |     ----------------- you can't `break` with a value in a `for` loop\n LL |         break 22\n    |         ^^^^^^^^ can only break with a value inside `loop` or breakable block\n    |\n-help: instead, use `break` on its own without a value inside this `for` loop\n+help: use `break` on its own without a value inside this `for` loop\n    |\n LL |         break\n    |         ^^^^^"}, {"sha": "51c9a36a0395641c7575c35e402bd3db29927890", "filename": "src/test/ui/loops/loop-break-value.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a13abba1d628ee17e1df93923665e6118221012/src%2Ftest%2Fui%2Floops%2Floop-break-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a13abba1d628ee17e1df93923665e6118221012/src%2Ftest%2Fui%2Floops%2Floop-break-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floop-break-value.rs?ref=8a13abba1d628ee17e1df93923665e6118221012", "patch": "@@ -94,6 +94,5 @@ fn main() {\n     'LOOP: for _ in 0 .. 9 {\n         break LOOP;\n         //~^ ERROR cannot find value `LOOP` in this scope\n-        //~| ERROR `break` with value from a `for` loop\n     }\n }"}, {"sha": "c7cf1017d4b2a410a4a6e982625869f84adefa89", "filename": "src/test/ui/loops/loop-break-value.stderr", "status": "modified", "additions": 45, "deletions": 19, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/8a13abba1d628ee17e1df93923665e6118221012/src%2Ftest%2Fui%2Floops%2Floop-break-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a13abba1d628ee17e1df93923665e6118221012/src%2Ftest%2Fui%2Floops%2Floop-break-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floop-break-value.stderr?ref=8a13abba1d628ee17e1df93923665e6118221012", "patch": "@@ -20,101 +20,127 @@ LL |     'while_loop: while true {\n error[E0571]: `break` with value from a `while` loop\n   --> $DIR/loop-break-value.rs:28:9\n    |\n+LL |     'while_loop: while true {\n+   |     ----------------------- you can't `break` with a value in a `while` loop\n+LL |         break;\n LL |         break ();\n    |         ^^^^^^^^ can only break with a value inside `loop` or breakable block\n    |\n-help: instead, use `break` on its own without a value inside this `while` loop\n+help: use `break` on its own without a value inside this `while` loop\n    |\n LL |         break;\n    |         ^^^^^\n+help: alternatively, you might have meant to use the available loop label\n+   |\n+LL |         break 'while_loop;\n+   |               ^^^^^^^^^^^\n \n error[E0571]: `break` with value from a `while` loop\n   --> $DIR/loop-break-value.rs:30:13\n    |\n+LL |     'while_loop: while true {\n+   |     ----------------------- you can't `break` with a value in a `while` loop\n+...\n LL |             break 'while_loop 123;\n    |             ^^^^^^^^^^^^^^^^^^^^^ can only break with a value inside `loop` or breakable block\n    |\n-help: instead, use `break` on its own without a value inside this `while` loop\n+help: use `break` on its own without a value inside this `while` loop\n    |\n LL |             break;\n    |             ^^^^^\n+help: alternatively, you might have meant to use the available loop label\n+   |\n+LL |             break 'while_loop 'while_loop;\n+   |                               ^^^^^^^^^^^\n \n error[E0571]: `break` with value from a `while` loop\n   --> $DIR/loop-break-value.rs:38:12\n    |\n+LL |     while let Some(_) = Some(()) {\n+   |     ---------------------------- you can't `break` with a value in a `while` loop\n LL |         if break () {\n    |            ^^^^^^^^ can only break with a value inside `loop` or breakable block\n    |\n-help: instead, use `break` on its own without a value inside this `while` loop\n+help: use `break` on its own without a value inside this `while` loop\n    |\n LL |         if break {\n    |            ^^^^^\n \n error[E0571]: `break` with value from a `while` loop\n   --> $DIR/loop-break-value.rs:43:9\n    |\n+LL |     while let Some(_) = Some(()) {\n+   |     ---------------------------- you can't `break` with a value in a `while` loop\n LL |         break None;\n    |         ^^^^^^^^^^ can only break with a value inside `loop` or breakable block\n    |\n-help: instead, use `break` on its own without a value inside this `while` loop\n+help: use `break` on its own without a value inside this `while` loop\n    |\n LL |         break;\n    |         ^^^^^\n \n error[E0571]: `break` with value from a `while` loop\n   --> $DIR/loop-break-value.rs:49:13\n    |\n+LL |     'while_let_loop: while let Some(_) = Some(()) {\n+   |     --------------------------------------------- you can't `break` with a value in a `while` loop\n+LL |         loop {\n LL |             break 'while_let_loop \"nope\";\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can only break with a value inside `loop` or breakable block\n    |\n-help: instead, use `break` on its own without a value inside this `while` loop\n+help: use `break` on its own without a value inside this `while` loop\n    |\n LL |             break;\n    |             ^^^^^\n+help: alternatively, you might have meant to use the available loop label\n+   |\n+LL |             break 'while_let_loop 'while_let_loop;\n+   |                                   ^^^^^^^^^^^^^^^\n \n error[E0571]: `break` with value from a `for` loop\n   --> $DIR/loop-break-value.rs:56:9\n    |\n+LL |     for _ in &[1,2,3] {\n+   |     ----------------- you can't `break` with a value in a `for` loop\n LL |         break ();\n    |         ^^^^^^^^ can only break with a value inside `loop` or breakable block\n    |\n-help: instead, use `break` on its own without a value inside this `for` loop\n+help: use `break` on its own without a value inside this `for` loop\n    |\n LL |         break;\n    |         ^^^^^\n \n error[E0571]: `break` with value from a `for` loop\n   --> $DIR/loop-break-value.rs:57:9\n    |\n+LL |     for _ in &[1,2,3] {\n+   |     ----------------- you can't `break` with a value in a `for` loop\n+LL |         break ();\n LL |         break [()];\n    |         ^^^^^^^^^^ can only break with a value inside `loop` or breakable block\n    |\n-help: instead, use `break` on its own without a value inside this `for` loop\n+help: use `break` on its own without a value inside this `for` loop\n    |\n LL |         break;\n    |         ^^^^^\n \n error[E0571]: `break` with value from a `for` loop\n   --> $DIR/loop-break-value.rs:64:13\n    |\n+LL |     'for_loop: for _ in &[1,2,3] {\n+   |     ---------------------------- you can't `break` with a value in a `for` loop\n+...\n LL |             break 'for_loop Some(17);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^ can only break with a value inside `loop` or breakable block\n    |\n-help: instead, use `break` on its own without a value inside this `for` loop\n+help: use `break` on its own without a value inside this `for` loop\n    |\n LL |             break;\n    |             ^^^^^\n-\n-error[E0571]: `break` with value from a `for` loop\n-  --> $DIR/loop-break-value.rs:95:9\n-   |\n-LL |         break LOOP;\n-   |         ^^^^^^^^^^ can only break with a value inside `loop` or breakable block\n+help: alternatively, you might have meant to use the available loop label\n    |\n-help: instead, use `break` on its own without a value inside this `for` loop\n-   |\n-LL |         break;\n-   |         ^^^^^\n+LL |             break 'for_loop 'for_loop;\n+   |                             ^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/loop-break-value.rs:4:31\n@@ -173,7 +199,7 @@ LL |         break;\n    |         expected integer, found `()`\n    |         help: give it a value of the expected type: `break value`\n \n-error: aborting due to 18 previous errors; 1 warning emitted\n+error: aborting due to 17 previous errors; 1 warning emitted\n \n Some errors have detailed explanations: E0308, E0425, E0571.\n For more information about an error, try `rustc --explain E0308`."}]}