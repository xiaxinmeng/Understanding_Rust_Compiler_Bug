{"sha": "fc307ff582002f36a4400fa4cb0c2e0458e936e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjMzA3ZmY1ODIwMDJmMzZhNDQwMGZhNGNiMGMyZTA0NThlOTM2ZTM=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seiichi.uchida@dena.com", "date": "2018-07-24T15:30:01Z"}, "committer": {"name": "Seiichi Uchida", "email": "seiichi.uchida@dena.com", "date": "2018-07-24T15:30:01Z"}, "message": "Format exitential type", "tree": {"sha": "96fc0a39bdf82e82ec3d7965a1eb3f8d7a7c4958", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96fc0a39bdf82e82ec3d7965a1eb3f8d7a7c4958"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc307ff582002f36a4400fa4cb0c2e0458e936e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc307ff582002f36a4400fa4cb0c2e0458e936e3", "html_url": "https://github.com/rust-lang/rust/commit/fc307ff582002f36a4400fa4cb0c2e0458e936e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc307ff582002f36a4400fa4cb0c2e0458e936e3/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6eb0bf2bb9b7da96436867ac260a071ed274b16f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6eb0bf2bb9b7da96436867ac260a071ed274b16f", "html_url": "https://github.com/rust-lang/rust/commit/6eb0bf2bb9b7da96436867ac260a071ed274b16f"}], "stats": {"total": 141, "additions": 107, "deletions": 34}, "files": [{"sha": "62bcfd0538d852fdb55bb9959e2f67f5b9bea5c6", "filename": "src/items.rs", "status": "modified", "additions": 84, "deletions": 31, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/fc307ff582002f36a4400fa4cb0c2e0458e936e3/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc307ff582002f36a4400fa4cb0c2e0458e936e3/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=fc307ff582002f36a4400fa4cb0c2e0458e936e3", "patch": "@@ -1400,36 +1400,27 @@ fn format_tuple_struct(\n     Some(result)\n }\n \n-pub fn rewrite_type_alias(\n+fn rewrite_type_prefix(\n     context: &RewriteContext,\n     indent: Indent,\n+    prefix: &str,\n     ident: ast::Ident,\n-    ty: &ast::Ty,\n     generics: &ast::Generics,\n-    vis: &ast::Visibility,\n-    span: Span,\n ) -> Option<String> {\n     let mut result = String::with_capacity(128);\n-\n-    result.push_str(&format_visibility(context, vis));\n-    result.push_str(\"type \");\n+    result.push_str(prefix);\n+    let ident_str = rewrite_ident(context, ident);\n \n     // 2 = `= `\n-    let g_shape = Shape::indented(indent, context.config)\n-        .offset_left(result.len())?\n-        .sub_width(2)?;\n-    let g_span = mk_sp(\n-        context.snippet_provider.span_after(span, \"type\"),\n-        ty.span.lo(),\n-    );\n-    let generics_str = rewrite_generics(\n-        context,\n-        rewrite_ident(context, ident),\n-        generics,\n-        g_shape,\n-        g_span,\n-    )?;\n-    result.push_str(&generics_str);\n+    if generics.params.is_empty() {\n+        result.push_str(ident_str)\n+    } else {\n+        let g_shape = Shape::indented(indent, context.config)\n+            .offset_left(result.len())?\n+            .sub_width(2)?;\n+        let generics_str = rewrite_generics(context, ident_str, generics, g_shape, generics.span)?;\n+        result.push_str(&generics_str);\n+    }\n \n     let where_budget = context.budget(last_line_width(&result));\n     let option = WhereClauseOption::snuggled(&result);\n@@ -1440,24 +1431,76 @@ pub fn rewrite_type_alias(\n         Shape::legacy(where_budget, indent),\n         Density::Vertical,\n         \"=\",\n-        Some(span.hi()),\n+        None,\n         generics.span.hi(),\n         option,\n         false,\n     )?;\n     result.push_str(&where_clause_str);\n-    if where_clause_str.is_empty() {\n-        result.push_str(\" =\");\n+\n+    Some(result)\n+}\n+\n+fn rewrite_type_item<R: Rewrite>(\n+    context: &RewriteContext,\n+    indent: Indent,\n+    prefix: &str,\n+    suffix: &str,\n+    ident: ast::Ident,\n+    rhs: &R,\n+    generics: &ast::Generics,\n+    vis: &ast::Visibility,\n+) -> Option<String> {\n+    let mut result = String::with_capacity(128);\n+    result.push_str(&rewrite_type_prefix(\n+        context,\n+        indent,\n+        &format!(\"{}{} \", format_visibility(context, vis), prefix),\n+        ident,\n+        generics,\n+    )?);\n+\n+    if generics.where_clause.predicates.is_empty() {\n+        result.push_str(suffix);\n     } else {\n-        result.push_str(&format!(\n-            \"{}=\",\n-            indent.to_string_with_newline(context.config)\n-        ));\n+        result.push_str(&indent.to_string_with_newline(context.config));\n+        result.push_str(suffix.trim_left());\n     }\n \n     // 1 = \";\"\n-    let ty_shape = Shape::indented(indent, context.config).sub_width(1)?;\n-    rewrite_assign_rhs(context, result, ty, ty_shape).map(|s| s + \";\")\n+    let rhs_shape = Shape::indented(indent, context.config).sub_width(1)?;\n+    rewrite_assign_rhs(context, result, rhs, rhs_shape).map(|s| s + \";\")\n+}\n+\n+pub fn rewrite_type_alias(\n+    context: &RewriteContext,\n+    indent: Indent,\n+    ident: ast::Ident,\n+    ty: &ast::Ty,\n+    generics: &ast::Generics,\n+    vis: &ast::Visibility,\n+) -> Option<String> {\n+    rewrite_type_item(context, indent, \"type\", \" =\", ident, ty, generics, vis)\n+}\n+\n+pub fn rewrite_existential_type(\n+    context: &RewriteContext,\n+    indent: Indent,\n+    ident: ast::Ident,\n+    generic_bounds: &ast::GenericBounds,\n+    generics: &ast::Generics,\n+    vis: &ast::Visibility,\n+) -> Option<String> {\n+    rewrite_type_item(\n+        context,\n+        indent,\n+        \"existential type\",\n+        \":\",\n+        ident,\n+        generic_bounds,\n+        generics,\n+        vis,\n+    )\n }\n \n fn type_annotation_spacing(config: &Config) -> (&str, &str) {\n@@ -1706,6 +1749,16 @@ pub fn rewrite_associated_type(\n     }\n }\n \n+pub fn rewrite_existential_impl_type(\n+    context: &RewriteContext,\n+    ident: ast::Ident,\n+    generic_bounds: &ast::GenericBounds,\n+    indent: Indent,\n+) -> Option<String> {\n+    rewrite_associated_type(ident, None, Some(generic_bounds), context, indent)\n+        .map(|s| format!(\"existential {}\", s))\n+}\n+\n pub fn rewrite_associated_impl_type(\n     ident: ast::Ident,\n     defaultness: ast::Defaultness,"}, {"sha": "4fabb3301fc0b2a589a62abc9bf7aeb69e4cebdd", "filename": "src/visitor.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fc307ff582002f36a4400fa4cb0c2e0458e936e3/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc307ff582002f36a4400fa4cb0c2e0458e936e3/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=fc307ff582002f36a4400fa4cb0c2e0458e936e3", "patch": "@@ -19,8 +19,9 @@ use comment::{CodeCharKind, CommentCodeSlices, FindUncommented};\n use config::{BraceStyle, Config};\n use items::{\n     format_impl, format_trait, format_trait_alias, is_mod_decl, is_use_item,\n-    rewrite_associated_impl_type, rewrite_associated_type, rewrite_extern_crate,\n-    rewrite_type_alias, FnSig, StaticParts, StructParts,\n+    rewrite_associated_impl_type, rewrite_associated_type, rewrite_existential_impl_type,\n+    rewrite_existential_type, rewrite_extern_crate, rewrite_type_alias, FnSig, StaticParts,\n+    StructParts,\n };\n use macros::{rewrite_macro, rewrite_macro_def, MacroPosition};\n use rewrite::{Rewrite, RewriteContext};\n@@ -412,7 +413,17 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                     ty,\n                     generics,\n                     &item.vis,\n-                    item.span,\n+                );\n+                self.push_rewrite(item.span, rewrite);\n+            }\n+            ast::ItemKind::Existential(ref generic_bounds, ref generics) => {\n+                let rewrite = rewrite_existential_type(\n+                    &self.get_context(),\n+                    self.block_indent,\n+                    item.ident,\n+                    generic_bounds,\n+                    generics,\n+                    &item.vis,\n                 );\n                 self.push_rewrite(item.span, rewrite);\n             }\n@@ -510,6 +521,15 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                 );\n                 self.push_rewrite(ii.span, rewrite);\n             }\n+            ast::ImplItemKind::Existential(ref generic_bounds) => {\n+                let rewrite = rewrite_existential_impl_type(\n+                    &self.get_context(),\n+                    ii.ident,\n+                    generic_bounds,\n+                    self.block_indent,\n+                );\n+                self.push_rewrite(ii.span, rewrite);\n+            }\n             ast::ImplItemKind::Macro(ref mac) => {\n                 self.visit_mac(mac, Some(ii.ident), MacroPosition::Item);\n             }"}]}