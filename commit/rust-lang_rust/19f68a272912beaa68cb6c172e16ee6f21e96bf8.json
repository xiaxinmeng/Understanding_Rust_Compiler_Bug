{"sha": "19f68a272912beaa68cb6c172e16ee6f21e96bf8", "node_id": "C_kwDOAAsO6NoAKDE5ZjY4YTI3MjkxMmJlYWE2OGNiNmMxNzJlMTZlZTZmMjFlOTZiZjg", "commit": {"author": {"name": "Ian Chamberlain", "email": "ian.h.chamberlain@gmail.com", "date": "2022-02-10T04:54:38Z"}, "committer": {"name": "Mark Drobnak", "email": "mark.drobnak@gmail.com", "date": "2022-06-14T03:44:57Z"}, "message": "Enable argv support for horizon OS\n\nSee https://github.com/Meziu/rust-horizon/pull/9", "tree": {"sha": "3b22aa8e7fba5a5b26c45f7eb1a9dfd1a87ff794", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b22aa8e7fba5a5b26c45f7eb1a9dfd1a87ff794"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19f68a272912beaa68cb6c172e16ee6f21e96bf8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEJn5ZTY8tfNoIJXFiR6Ez87+dA9MFAmKoBDkACgkQR6Ez87+d\nA9Osngf/QZ4+YDY9D5wpY/PaFFDeXOUUm1p9f8MYVGvmBW9NslqDTGQrOxbJpjWD\nfijrjE59dTWfyLJsUVC0BMwbaQxoCA1Ln+ymLHXs6rdIksl6xI1Ax6VDHS7doNjI\nwLFe8KYsBqaZ3trPAwPyGHAnj+kyo1DXnCDfwQoUNQC9h8sAbtkQ1LGIVqksbOE5\nbScNIsTtgmf75pB32jFeWZnbcK5y3MB8E3fQJ/wkCOHJodA1iHy8n96IGQoQasLx\nG6+QF/h/VJMsthhzYXNmXtKsl66HZS+QXEYZcG/Z7OHSxsYnf8zuvoY0BmQe1/ec\ncm4hI5vT2kh2NyX91CVxx32+5Uh8Sg==\n=atDa\n-----END PGP SIGNATURE-----", "payload": "tree 3b22aa8e7fba5a5b26c45f7eb1a9dfd1a87ff794\nparent 06eae300347447545f5d0e8e94c673da69a1d7fd\nauthor Ian Chamberlain <ian.h.chamberlain@gmail.com> 1644468878 -0500\ncommitter Mark Drobnak <mark.drobnak@gmail.com> 1655178297 -0700\n\nEnable argv support for horizon OS\n\nSee https://github.com/Meziu/rust-horizon/pull/9\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19f68a272912beaa68cb6c172e16ee6f21e96bf8", "html_url": "https://github.com/rust-lang/rust/commit/19f68a272912beaa68cb6c172e16ee6f21e96bf8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19f68a272912beaa68cb6c172e16ee6f21e96bf8/comments", "author": {"login": "ian-h-chamberlain", "id": 11131775, "node_id": "MDQ6VXNlcjExMTMxNzc1", "avatar_url": "https://avatars.githubusercontent.com/u/11131775?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ian-h-chamberlain", "html_url": "https://github.com/ian-h-chamberlain", "followers_url": "https://api.github.com/users/ian-h-chamberlain/followers", "following_url": "https://api.github.com/users/ian-h-chamberlain/following{/other_user}", "gists_url": "https://api.github.com/users/ian-h-chamberlain/gists{/gist_id}", "starred_url": "https://api.github.com/users/ian-h-chamberlain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ian-h-chamberlain/subscriptions", "organizations_url": "https://api.github.com/users/ian-h-chamberlain/orgs", "repos_url": "https://api.github.com/users/ian-h-chamberlain/repos", "events_url": "https://api.github.com/users/ian-h-chamberlain/events{/privacy}", "received_events_url": "https://api.github.com/users/ian-h-chamberlain/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AzureMarker", "id": 4417660, "node_id": "MDQ6VXNlcjQ0MTc2NjA=", "avatar_url": "https://avatars.githubusercontent.com/u/4417660?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AzureMarker", "html_url": "https://github.com/AzureMarker", "followers_url": "https://api.github.com/users/AzureMarker/followers", "following_url": "https://api.github.com/users/AzureMarker/following{/other_user}", "gists_url": "https://api.github.com/users/AzureMarker/gists{/gist_id}", "starred_url": "https://api.github.com/users/AzureMarker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AzureMarker/subscriptions", "organizations_url": "https://api.github.com/users/AzureMarker/orgs", "repos_url": "https://api.github.com/users/AzureMarker/repos", "events_url": "https://api.github.com/users/AzureMarker/events{/privacy}", "received_events_url": "https://api.github.com/users/AzureMarker/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06eae300347447545f5d0e8e94c673da69a1d7fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/06eae300347447545f5d0e8e94c673da69a1d7fd", "html_url": "https://github.com/rust-lang/rust/commit/06eae300347447545f5d0e8e94c673da69a1d7fd"}], "stats": {"total": 11, "additions": 7, "deletions": 4}, "files": [{"sha": "79964e2b2385fd24a732b551786682981846c4fe", "filename": "library/std/src/sys/unix/args.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/19f68a272912beaa68cb6c172e16ee6f21e96bf8/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19f68a272912beaa68cb6c172e16ee6f21e96bf8/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fargs.rs?ref=19f68a272912beaa68cb6c172e16ee6f21e96bf8", "patch": "@@ -68,7 +68,8 @@ impl DoubleEndedIterator for Args {\n     target_os = \"l4re\",\n     target_os = \"fuchsia\",\n     target_os = \"redox\",\n-    target_os = \"vxworks\"\n+    target_os = \"vxworks\",\n+    target_os = \"horizon\"\n ))]\n mod imp {\n     use super::Args;"}, {"sha": "34a023b02c4fe74e4ed5abd41a5a0cfaf997b6a9", "filename": "library/std/src/sys/unix/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/19f68a272912beaa68cb6c172e16ee6f21e96bf8/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19f68a272912beaa68cb6c172e16ee6f21e96bf8/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs?ref=19f68a272912beaa68cb6c172e16ee6f21e96bf8", "patch": "@@ -43,10 +43,10 @@ pub mod thread_local_key;\n pub mod thread_parker;\n pub mod time;\n \n-#[cfg(any(target_os = \"espidf\", target_os = \"horizon\"))]\n+#[cfg(target_os = \"espidf\")]\n pub fn init(argc: isize, argv: *const *const u8) {}\n \n-#[cfg(not(any(target_os = \"espidf\", target_os = \"horizon\")))]\n+#[cfg(not(target_os = \"espidf\"))]\n // SAFETY: must be called only once during runtime initialization.\n // NOTE: this is not guaranteed to run, for example when Rust code is called externally.\n pub unsafe fn init(argc: isize, argv: *const *const u8) {\n@@ -88,6 +88,7 @@ pub unsafe fn init(argc: isize, argv: *const *const u8) {\n             target_os = \"ios\",\n             target_os = \"redox\",\n             target_os = \"l4re\",\n+            target_os = \"horizon\",\n         )))]\n         'poll: {\n             use crate::sys::os::errno;\n@@ -131,6 +132,7 @@ pub unsafe fn init(argc: isize, argv: *const *const u8) {\n             target_os = \"fuchsia\",\n             target_os = \"vxworks\",\n             target_os = \"l4re\",\n+            target_os = \"horizon\",\n         )))]\n         {\n             use crate::sys::os::errno;\n@@ -149,7 +151,7 @@ pub unsafe fn init(argc: isize, argv: *const *const u8) {\n     }\n \n     unsafe fn reset_sigpipe() {\n-        #[cfg(not(any(target_os = \"emscripten\", target_os = \"fuchsia\")))]\n+        #[cfg(not(any(target_os = \"emscripten\", target_os = \"fuchsia\", target_os = \"horizon\")))]\n         rtassert!(signal(libc::SIGPIPE, libc::SIG_IGN) != libc::SIG_ERR);\n     }\n }"}]}