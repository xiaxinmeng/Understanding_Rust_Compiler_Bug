{"sha": "d6c4165182a8825a317604b549e6aa19bbf75680", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2YzQxNjUxODJhODgyNWEzMTc2MDRiNTQ5ZTZhYTE5YmJmNzU2ODA=", "commit": {"author": {"name": "Dawer", "email": "7803845+iDawer@users.noreply.github.com", "date": "2021-08-18T11:05:23Z"}, "committer": {"name": "Dawer", "email": "7803845+iDawer@users.noreply.github.com", "date": "2021-08-18T11:05:23Z"}, "message": "internal: introduce in-place indenting API", "tree": {"sha": "0f3087507dd3d06ed0d9b584eb3d138ac33d3d69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f3087507dd3d06ed0d9b584eb3d138ac33d3d69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6c4165182a8825a317604b549e6aa19bbf75680", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6c4165182a8825a317604b549e6aa19bbf75680", "html_url": "https://github.com/rust-lang/rust/commit/d6c4165182a8825a317604b549e6aa19bbf75680", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6c4165182a8825a317604b549e6aa19bbf75680/comments", "author": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcbaa75bc14c69ab060bffe9b108cb55b325b121", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcbaa75bc14c69ab060bffe9b108cb55b325b121", "html_url": "https://github.com/rust-lang/rust/commit/dcbaa75bc14c69ab060bffe9b108cb55b325b121"}], "stats": {"total": 79, "additions": 61, "deletions": 18}, "files": [{"sha": "5f7d4c9eaea69dab15c636c69883b268db0514cc", "filename": "crates/syntax/src/ast/edit.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d6c4165182a8825a317604b549e6aa19bbf75680/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c4165182a8825a317604b549e6aa19bbf75680/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs?ref=d6c4165182a8825a317604b549e6aa19bbf75680", "patch": "@@ -117,9 +117,8 @@ impl IndentLevel {\n     /// }\n     /// ```\n     /// if you indent the block, the `{` token would stay put.\n-    fn increase_indent(self, node: SyntaxNode) -> SyntaxNode {\n-        let res = node.clone_subtree().clone_for_update();\n-        let tokens = res.preorder_with_tokens().filter_map(|event| match event {\n+    pub(in super) fn increase_indent(self, node: &SyntaxNode) {\n+        let tokens = node.preorder_with_tokens().filter_map(|event| match event {\n             rowan::WalkEvent::Leave(NodeOrToken::Token(it)) => Some(it),\n             _ => None,\n         });\n@@ -131,12 +130,10 @@ impl IndentLevel {\n                 }\n             }\n         }\n-        res.clone_subtree()\n     }\n \n-    fn decrease_indent(self, node: SyntaxNode) -> SyntaxNode {\n-        let res = node.clone_subtree().clone_for_update();\n-        let tokens = res.preorder_with_tokens().filter_map(|event| match event {\n+    pub(in super) fn decrease_indent(self, node: &SyntaxNode) {\n+        let tokens = node.preorder_with_tokens().filter_map(|event| match event {\n             rowan::WalkEvent::Leave(NodeOrToken::Token(it)) => Some(it),\n             _ => None,\n         });\n@@ -150,25 +147,37 @@ impl IndentLevel {\n                 }\n             }\n         }\n-        res.clone_subtree()\n     }\n }\n \n fn prev_tokens(token: SyntaxToken) -> impl Iterator<Item = SyntaxToken> {\n     iter::successors(Some(token), |token| token.prev_token())\n }\n \n+/// Soft-deprecated in favor of mutable tree editing API `edit_in_place::Ident`.\n pub trait AstNodeEdit: AstNode + Clone + Sized {\n     fn indent_level(&self) -> IndentLevel {\n         IndentLevel::from_node(self.syntax())\n     }\n     #[must_use]\n     fn indent(&self, level: IndentLevel) -> Self {\n-        Self::cast(level.increase_indent(self.syntax().clone())).unwrap()\n+        fn indent_inner(node: &SyntaxNode, level: IndentLevel) -> SyntaxNode {\n+            let res = node.clone_subtree().clone_for_update();\n+            level.increase_indent(&res);\n+            res.clone_subtree()\n+        }\n+\n+        Self::cast(indent_inner(self.syntax(), level)).unwrap()\n     }\n     #[must_use]\n     fn dedent(&self, level: IndentLevel) -> Self {\n-        Self::cast(level.decrease_indent(self.syntax().clone())).unwrap()\n+        fn dedent_inner(node: &SyntaxNode, level: IndentLevel) -> SyntaxNode {\n+            let res = node.clone_subtree().clone_for_update();\n+            level.decrease_indent(&res);\n+            res.clone_subtree()\n+        }\n+\n+        Self::cast(dedent_inner(self.syntax(), level)).unwrap()\n     }\n     #[must_use]\n     fn reset_indent(&self) -> Self {"}, {"sha": "d71a7af53431232200379ebf4c127ce871661c87", "filename": "crates/syntax/src/ast/edit_in_place.rs", "status": "modified", "additions": 42, "deletions": 8, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/d6c4165182a8825a317604b549e6aa19bbf75680/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c4165182a8825a317604b549e6aa19bbf75680/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs?ref=d6c4165182a8825a317604b549e6aa19bbf75680", "patch": "@@ -7,11 +7,7 @@ use rowan::SyntaxElement;\n \n use crate::{\n     algo::neighbor,\n-    ast::{\n-        self,\n-        edit::{AstNodeEdit, IndentLevel},\n-        make, GenericParamsOwner,\n-    },\n+    ast::{self, edit::IndentLevel, make, GenericParamsOwner},\n     ted::{self, Position},\n     AstNode, AstToken, Direction,\n     SyntaxKind::{ATTR, COMMENT, WHITESPACE},\n@@ -20,7 +16,7 @@ use crate::{\n \n use super::NameOwner;\n \n-pub trait GenericParamsOwnerEdit: ast::GenericParamsOwner + AstNodeEdit {\n+pub trait GenericParamsOwnerEdit: ast::GenericParamsOwner {\n     fn get_or_create_generic_param_list(&self) -> ast::GenericParamList;\n     fn get_or_create_where_clause(&self) -> ast::WhereClause;\n }\n@@ -198,7 +194,7 @@ fn create_generic_param_list(position: Position) -> ast::GenericParamList {\n     gpl\n }\n \n-pub trait AttrsOwnerEdit: ast::AttrsOwner + AstNodeEdit {\n+pub trait AttrsOwnerEdit: ast::AttrsOwner {\n     fn remove_attrs_and_docs(&self) {\n         remove_attrs_and_docs(self.syntax());\n \n@@ -222,7 +218,7 @@ pub trait AttrsOwnerEdit: ast::AttrsOwner + AstNodeEdit {\n     }\n }\n \n-impl<T: ast::AttrsOwner + AstNodeEdit> AttrsOwnerEdit for T {}\n+impl<T: ast::AttrsOwner> AttrsOwnerEdit for T {}\n \n impl ast::GenericParamList {\n     pub fn add_generic_param(&self, generic_param: ast::GenericParam) {\n@@ -487,6 +483,26 @@ fn normalize_ws_between_braces(node: &SyntaxNode) -> Option<()> {\n     Some(())\n }\n \n+pub trait Indent: AstNode + Clone + Sized {\n+    fn indent_level(&self) -> IndentLevel {\n+        IndentLevel::from_node(self.syntax())\n+    }\n+    fn indent(&self, level: IndentLevel) -> &Self {\n+        level.increase_indent(self.syntax());\n+        self\n+    }\n+    fn dedent(&self, level: IndentLevel) -> &Self {\n+        level.decrease_indent(self.syntax());\n+        self\n+    }\n+    fn reset_indent(&self) -> &Self {\n+        let level = IndentLevel::from_node(self.syntax());\n+        self.dedent(level)\n+    }\n+}\n+\n+impl<N: AstNode + Clone> Indent for N {}\n+\n #[cfg(test)]\n mod tests {\n     use std::fmt;\n@@ -526,4 +542,22 @@ mod tests {\n         check_create_gpl::<ast::Enum>(\"enum E\", \"enum E<>\");\n         check_create_gpl::<ast::Enum>(\"enum E {\", \"enum E<> {\");\n     }\n+\n+    #[test]\n+    fn test_increase_indent() {\n+        let arm_list = ast_mut_from_text::<ast::Fn>(\n+            \"fn foo() {\n+    ;\n+    ;\n+}\",\n+        );\n+        arm_list.indent(IndentLevel(2));\n+        assert_eq!(\n+            arm_list.to_string(),\n+            \"fn foo() {\n+            ;\n+            ;\n+        }\",\n+        );\n+    }\n }"}]}