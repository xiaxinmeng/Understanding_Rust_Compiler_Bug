{"sha": "ffe336d07b73d391563775220a913b01e1d17d1f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmZTMzNmQwN2I3M2QzOTE1NjM3NzUyMjBhOTEzYjAxZTFkMTdkMWY=", "commit": {"author": {"name": "Mikhail Modin", "email": "mikhailm1@gmail.com", "date": "2018-08-08T07:02:47Z"}, "committer": {"name": "Mikhail Modin", "email": "mikhailm1@gmail.com", "date": "2018-08-08T07:02:47Z"}, "message": "Fixes #53119.", "tree": {"sha": "8b56ff1f2a1f3fa20828d7a09281d8422dcbb320", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b56ff1f2a1f3fa20828d7a09281d8422dcbb320"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffe336d07b73d391563775220a913b01e1d17d1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffe336d07b73d391563775220a913b01e1d17d1f", "html_url": "https://github.com/rust-lang/rust/commit/ffe336d07b73d391563775220a913b01e1d17d1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffe336d07b73d391563775220a913b01e1d17d1f/comments", "author": {"login": "mikhail-m1", "id": 5663581, "node_id": "MDQ6VXNlcjU2NjM1ODE=", "avatar_url": "https://avatars.githubusercontent.com/u/5663581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikhail-m1", "html_url": "https://github.com/mikhail-m1", "followers_url": "https://api.github.com/users/mikhail-m1/followers", "following_url": "https://api.github.com/users/mikhail-m1/following{/other_user}", "gists_url": "https://api.github.com/users/mikhail-m1/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikhail-m1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikhail-m1/subscriptions", "organizations_url": "https://api.github.com/users/mikhail-m1/orgs", "repos_url": "https://api.github.com/users/mikhail-m1/repos", "events_url": "https://api.github.com/users/mikhail-m1/events{/privacy}", "received_events_url": "https://api.github.com/users/mikhail-m1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mikhail-m1", "id": 5663581, "node_id": "MDQ6VXNlcjU2NjM1ODE=", "avatar_url": "https://avatars.githubusercontent.com/u/5663581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikhail-m1", "html_url": "https://github.com/mikhail-m1", "followers_url": "https://api.github.com/users/mikhail-m1/followers", "following_url": "https://api.github.com/users/mikhail-m1/following{/other_user}", "gists_url": "https://api.github.com/users/mikhail-m1/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikhail-m1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikhail-m1/subscriptions", "organizations_url": "https://api.github.com/users/mikhail-m1/orgs", "repos_url": "https://api.github.com/users/mikhail-m1/repos", "events_url": "https://api.github.com/users/mikhail-m1/events{/privacy}", "received_events_url": "https://api.github.com/users/mikhail-m1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39e95165323f76042dfab65772a8411dd85fe088", "url": "https://api.github.com/repos/rust-lang/rust/commits/39e95165323f76042dfab65772a8411dd85fe088", "html_url": "https://github.com/rust-lang/rust/commit/39e95165323f76042dfab65772a8411dd85fe088"}], "stats": {"total": 68, "additions": 54, "deletions": 14}, "files": [{"sha": "c6f3efc4038d0630be5cbc06ecf43cff28812be0", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ffe336d07b73d391563775220a913b01e1d17d1f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffe336d07b73d391563775220a913b01e1d17d1f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=ffe336d07b73d391563775220a913b01e1d17d1f", "patch": "@@ -661,28 +661,33 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             test: _,\n         } = type_test;\n \n+\n         let generic_ty = generic_kind.to_ty(tcx);\n         let subject = match self.try_promote_type_test_subject(infcx, generic_ty) {\n             Some(s) => s,\n             None => return false,\n         };\n \n-        // Find some bounding subject-region R+ that is a super-region\n-        // of the existing subject-region R. This should be a non-local, universal\n-        // region, which ensures it can be encoded in a `ClosureOutlivesRequirement`.\n-        let lower_bound_plus = self.non_local_universal_upper_bound(*lower_bound);\n-        assert!(self.universal_regions.is_universal_region(lower_bound_plus));\n-        assert!(\n-            !self\n+        // For each region outlived by lower_bound find a non-local,\n+        // universal region (it may be the same region) and add it to\n+        // `ClosureOutlivesRequirement`.\n+        let r_scc = self.constraint_sccs.scc(*lower_bound);\n+        for ur in self.scc_values.universal_regions_outlived_by(r_scc) {\n+            let non_local_ub = self.universal_region_relations.non_local_upper_bound(ur);\n+\n+            assert!(self.universal_regions.is_universal_region(non_local_ub));\n+            assert!(\n+                !self\n                 .universal_regions\n-                .is_local_free_region(lower_bound_plus)\n-        );\n+                .is_local_free_region(non_local_ub)\n+            );\n \n-        propagated_outlives_requirements.push(ClosureOutlivesRequirement {\n-            subject,\n-            outlived_free_region: lower_bound_plus,\n-            blame_span: locations.span(mir),\n-        });\n+            propagated_outlives_requirements.push(ClosureOutlivesRequirement {\n+                subject,\n+                outlived_free_region: non_local_ub,\n+                blame_span: locations.span(mir),\n+            });\n+        }\n         true\n     }\n "}, {"sha": "bbef4cf34557162e1705348d82bf60c0802bfc7e", "filename": "src/test/ui/nll/issue-53119.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ffe336d07b73d391563775220a913b01e1d17d1f/src%2Ftest%2Fui%2Fnll%2Fissue-53119.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffe336d07b73d391563775220a913b01e1d17d1f/src%2Ftest%2Fui%2Fnll%2Fissue-53119.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-53119.rs?ref=ffe336d07b73d391563775220a913b01e1d17d1f", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-pass\n+\n+#![feature(nll)]\n+\n+use std::ops::Deref;\n+\n+pub struct TypeFieldIterator<'a, T: 'a> {\n+    _t: &'a T,\n+}\n+\n+pub struct Type<Id, T> {\n+    _types: Vec<(Id, T)>,\n+}\n+\n+impl<'a, Id: 'a, T> Iterator for TypeFieldIterator<'a, T>\n+where T: Deref<Target = Type<Id, T>> {\n+    type Item = &'a (Id, T);\n+\n+    fn next(&mut self) -> Option<&'a (Id, T)> {\n+        || self.next();\n+        None\n+    }\n+}\n+\n+fn main() { }"}]}