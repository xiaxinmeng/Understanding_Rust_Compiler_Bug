{"sha": "261364d45d6a90dbe1e6702455f7a6ea661e74c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2MTM2NGQ0NWQ2YTkwZGJlMWU2NzAyNDU1ZjdhNmVhNjYxZTc0Yzk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-18T22:32:02Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-18T22:32:02Z"}, "message": "rollup merge of #22452: nikomatsakis/issue-22040-18956-Self\n\nThe big change here is that we update the object-safety rules to prohibit references to `Self` in the supertrait listing. See #22040 for the motivation. The other change is to handle the interaction of defaults that reference `Self` and object types (where `Self` is erased). We force users to give an explicit type in that scenario.\n\nr? @aturon", "tree": {"sha": "26b54ea2fc4ce728e1876443ea47b898f3991bea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26b54ea2fc4ce728e1876443ea47b898f3991bea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/261364d45d6a90dbe1e6702455f7a6ea661e74c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/261364d45d6a90dbe1e6702455f7a6ea661e74c9", "html_url": "https://github.com/rust-lang/rust/commit/261364d45d6a90dbe1e6702455f7a6ea661e74c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/261364d45d6a90dbe1e6702455f7a6ea661e74c9/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8753a0ec381296b165f0b9025875b97b994223d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8753a0ec381296b165f0b9025875b97b994223d", "html_url": "https://github.com/rust-lang/rust/commit/d8753a0ec381296b165f0b9025875b97b994223d"}, {"sha": "ff388c12770dd8aa33ed48595f780d2aa49cd5d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff388c12770dd8aa33ed48595f780d2aa49cd5d2", "html_url": "https://github.com/rust-lang/rust/commit/ff388c12770dd8aa33ed48595f780d2aa49cd5d2"}], "stats": {"total": 264, "additions": 251, "deletions": 13}, "files": [{"sha": "a8f8d54cba9f5d85f200412e343aa6a6c44f534a", "filename": "src/librustc/middle/traits/object_safety.rs", "status": "modified", "additions": 46, "deletions": 6, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/261364d45d6a90dbe1e6702455f7a6ea661e74c9/src%2Flibrustc%2Fmiddle%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/261364d45d6a90dbe1e6702455f7a6ea661e74c9/src%2Flibrustc%2Fmiddle%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fobject_safety.rs?ref=261364d45d6a90dbe1e6702455f7a6ea661e74c9", "patch": "@@ -20,7 +20,7 @@\n use super::supertraits;\n use super::elaborate_predicates;\n \n-use middle::subst::{self, SelfSpace};\n+use middle::subst::{self, SelfSpace, TypeSpace};\n use middle::traits;\n use middle::ty::{self, Ty};\n use std::rc::Rc;\n@@ -31,6 +31,10 @@ pub enum ObjectSafetyViolation<'tcx> {\n     /// Self : Sized declared on the trait\n     SizedSelf,\n \n+    /// Supertrait reference references `Self` an in illegal location\n+    /// (e.g. `trait Foo : Bar<Self>`)\n+    SupertraitSelf,\n+\n     /// Method has something illegal\n     Method(Rc<ty::Method<'tcx>>, MethodViolationCode),\n }\n@@ -110,6 +114,9 @@ fn object_safety_violations_for_trait<'tcx>(tcx: &ty::ctxt<'tcx>,\n     if trait_has_sized_self(tcx, trait_def_id) {\n         violations.push(ObjectSafetyViolation::SizedSelf);\n     }\n+    if supertraits_reference_self(tcx, trait_def_id) {\n+        violations.push(ObjectSafetyViolation::SupertraitSelf);\n+    }\n \n     debug!(\"object_safety_violations_for_trait(trait_def_id={}) = {}\",\n            trait_def_id.repr(tcx),\n@@ -118,6 +125,34 @@ fn object_safety_violations_for_trait<'tcx>(tcx: &ty::ctxt<'tcx>,\n     violations\n }\n \n+fn supertraits_reference_self<'tcx>(tcx: &ty::ctxt<'tcx>,\n+                                    trait_def_id: ast::DefId)\n+                                    -> bool\n+{\n+    let trait_def = ty::lookup_trait_def(tcx, trait_def_id);\n+    let trait_ref = trait_def.trait_ref.clone();\n+    let predicates = ty::predicates_for_trait_ref(tcx, &ty::Binder(trait_ref));\n+    predicates\n+        .into_iter()\n+        .any(|predicate| {\n+            match predicate {\n+                ty::Predicate::Trait(ref data) => {\n+                    // In the case of a trait predicate, we can skip the \"self\" type.\n+                    data.0.trait_ref.substs.types.get_slice(TypeSpace)\n+                                                 .iter()\n+                                                 .cloned()\n+                                                 .any(is_self)\n+                }\n+                ty::Predicate::Projection(..) |\n+                ty::Predicate::TypeOutlives(..) |\n+                ty::Predicate::RegionOutlives(..) |\n+                ty::Predicate::Equate(..) => {\n+                    false\n+                }\n+            }\n+        })\n+}\n+\n fn trait_has_sized_self<'tcx>(tcx: &ty::ctxt<'tcx>,\n                               trait_def_id: ast::DefId)\n                               -> bool\n@@ -138,11 +173,7 @@ fn trait_has_sized_self<'tcx>(tcx: &ty::ctxt<'tcx>,\n         .any(|predicate| {\n             match predicate {\n                 ty::Predicate::Trait(ref trait_pred) if trait_pred.def_id() == sized_def_id => {\n-                    let self_ty = trait_pred.0.self_ty();\n-                    match self_ty.sty {\n-                        ty::ty_param(ref data) => data.space == subst::SelfSpace,\n-                        _ => false,\n-                    }\n+                    is_self(trait_pred.0.self_ty())\n                 }\n                 ty::Predicate::Projection(..) |\n                 ty::Predicate::Trait(..) |\n@@ -295,8 +326,17 @@ impl<'tcx> Repr<'tcx> for ObjectSafetyViolation<'tcx> {\n         match *self {\n             ObjectSafetyViolation::SizedSelf =>\n                 format!(\"SizedSelf\"),\n+            ObjectSafetyViolation::SupertraitSelf =>\n+                format!(\"SupertraitSelf\"),\n             ObjectSafetyViolation::Method(ref m, code) =>\n                 format!(\"Method({},{:?})\", m.repr(tcx), code),\n         }\n     }\n }\n+\n+fn is_self<'tcx>(ty: Ty<'tcx>) -> bool {\n+    match ty.sty {\n+        ty::ty_param(ref data) => data.space == subst::SelfSpace,\n+        _ => false,\n+    }\n+}"}, {"sha": "fb40e4e9910af4930d257c191f9272d20bb8f197", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/261364d45d6a90dbe1e6702455f7a6ea661e74c9/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/261364d45d6a90dbe1e6702455f7a6ea661e74c9/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=261364d45d6a90dbe1e6702455f7a6ea661e74c9", "patch": "@@ -76,7 +76,7 @@ use std::hash::{Hash, Writer, SipHasher, Hasher};\n use std::mem;\n use std::ops;\n use std::rc::Rc;\n-use std::vec::CowVec;\n+use std::vec::{CowVec, IntoIter};\n use collections::enum_set::{EnumSet, CLike};\n use std::collections::{HashMap, HashSet};\n use syntax::abi;\n@@ -2004,6 +2004,40 @@ impl<'tcx> AsPredicate<'tcx> for PolyProjectionPredicate<'tcx> {\n }\n \n impl<'tcx> Predicate<'tcx> {\n+    /// Iterates over the types in this predicate. Note that in all\n+    /// cases this is skipping over a binder, so late-bound regions\n+    /// with depth 0 are bound by the predicate.\n+    pub fn walk_tys(&self) -> IntoIter<Ty<'tcx>> {\n+        let vec: Vec<_> = match *self {\n+            ty::Predicate::Trait(ref data) => {\n+                data.0.trait_ref.substs.types.as_slice().to_vec()\n+            }\n+            ty::Predicate::Equate(ty::Binder(ref data)) => {\n+                vec![data.0, data.1]\n+            }\n+            ty::Predicate::TypeOutlives(ty::Binder(ref data)) => {\n+                vec![data.0]\n+            }\n+            ty::Predicate::RegionOutlives(..) => {\n+                vec![]\n+            }\n+            ty::Predicate::Projection(ref data) => {\n+                let trait_inputs = data.0.projection_ty.trait_ref.substs.types.as_slice();\n+                trait_inputs.iter()\n+                            .cloned()\n+                            .chain(Some(data.0.ty).into_iter())\n+                            .collect()\n+            }\n+        };\n+\n+        // The only reason to collect into a vector here is that I was\n+        // too lazy to make the full (somewhat complicated) iterator\n+        // type that would be needed here. But I wanted this fn to\n+        // return an iterator conceptually, rather than a `Vec`, so as\n+        // to be closer to `Ty::walk`.\n+        vec.into_iter()\n+    }\n+\n     pub fn has_escaping_regions(&self) -> bool {\n         match *self {\n             Predicate::Trait(ref trait_ref) => trait_ref.has_escaping_regions(),"}, {"sha": "cac60eb75341ab9a05aa046eb36888d8f9729a1f", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/261364d45d6a90dbe1e6702455f7a6ea661e74c9/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/261364d45d6a90dbe1e6702455f7a6ea661e74c9/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=261364d45d6a90dbe1e6702455f7a6ea661e74c9", "patch": "@@ -508,13 +508,26 @@ pub fn parameterized<'tcx,GG>(cx: &ctxt<'tcx>,\n     // avoid those ICEs.\n     let generics = get_generics();\n \n+    let has_self = substs.self_ty().is_some();\n     let tps = substs.types.get_slice(subst::TypeSpace);\n     let ty_params = generics.types.get_slice(subst::TypeSpace);\n     let has_defaults = ty_params.last().map_or(false, |def| def.default.is_some());\n     let num_defaults = if has_defaults {\n         ty_params.iter().zip(tps.iter()).rev().take_while(|&(def, &actual)| {\n             match def.default {\n-                Some(default) => default.subst(cx, substs) == actual,\n+                Some(default) => {\n+                    if !has_self && ty::type_has_self(default) {\n+                        // In an object type, there is no `Self`, and\n+                        // thus if the default value references Self,\n+                        // the user will be required to give an\n+                        // explicit value. We can't even do the\n+                        // substitution below to check without causing\n+                        // an ICE. (#18956).\n+                        false\n+                    } else {\n+                        default.subst(cx, substs) == actual\n+                    }\n+                }\n                 None => false\n             }\n         }).count()"}, {"sha": "19cf3bb93ea1706a7cdd8821067ac97b77bf1cfd", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/261364d45d6a90dbe1e6702455f7a6ea661e74c9/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/261364d45d6a90dbe1e6702455f7a6ea661e74c9/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=261364d45d6a90dbe1e6702455f7a6ea661e74c9", "patch": "@@ -404,17 +404,30 @@ fn create_substs_for_ast_path<'tcx>(\n \n     let actual_supplied_ty_param_count = substs.types.len(TypeSpace);\n     for param in &ty_param_defs[actual_supplied_ty_param_count..] {\n-        match param.default {\n-            Some(default) => {\n+        if let Some(default) = param.default {\n+            // If we are converting an object type, then the\n+            // `Self` parameter is unknown. However, some of the\n+            // other type parameters may reference `Self` in their\n+            // defaults. This will lead to an ICE if we are not\n+            // careful!\n+            if self_ty.is_none() && ty::type_has_self(default) {\n+                tcx.sess.span_err(\n+                    span,\n+                    &format!(\"the type parameter `{}` must be explicitly specified \\\n+                              in an object type because its default value `{}` references \\\n+                              the type `Self`\",\n+                             param.name.user_string(tcx),\n+                             default.user_string(tcx)));\n+                substs.types.push(TypeSpace, tcx.types.err);\n+            } else {\n                 // This is a default type parameter.\n                 let default = default.subst_spanned(tcx,\n                                                     &substs,\n                                                     Some(span));\n                 substs.types.push(TypeSpace, default);\n             }\n-            None => {\n-                tcx.sess.span_bug(span, \"extra parameter without default\");\n-            }\n+        } else {\n+            tcx.sess.span_bug(span, \"extra parameter without default\");\n         }\n     }\n "}, {"sha": "3666b69d1c678ac4cc6a64d60118b794f4bdf449", "filename": "src/librustc_typeck/check/vtable.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/261364d45d6a90dbe1e6702455f7a6ea661e74c9/src%2Flibrustc_typeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/261364d45d6a90dbe1e6702455f7a6ea661e74c9/src%2Flibrustc_typeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fvtable.rs?ref=261364d45d6a90dbe1e6702455f7a6ea661e74c9", "patch": "@@ -126,6 +126,13 @@ pub fn check_object_safety<'tcx>(tcx: &ty::ctxt<'tcx>,\n                     \"the trait cannot require that `Self : Sized`\");\n             }\n \n+            ObjectSafetyViolation::SupertraitSelf => {\n+                tcx.sess.span_note(\n+                    span,\n+                    \"the trait cannot use `Self` as a type parameter \\\n+                     in the supertrait listing\");\n+            }\n+\n             ObjectSafetyViolation::Method(method, MethodViolationCode::ByValueSelf) => {\n                 tcx.sess.span_note(\n                     span,"}, {"sha": "edf32131b6875772f68ea6d46ef90b57622dfc17", "filename": "src/test/compile-fail/object-safety-issue-22040.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/261364d45d6a90dbe1e6702455f7a6ea661e74c9/src%2Ftest%2Fcompile-fail%2Fobject-safety-issue-22040.rs", "raw_url": "https://github.com/rust-lang/rust/raw/261364d45d6a90dbe1e6702455f7a6ea661e74c9/src%2Ftest%2Fcompile-fail%2Fobject-safety-issue-22040.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-safety-issue-22040.rs?ref=261364d45d6a90dbe1e6702455f7a6ea661e74c9", "patch": "@@ -0,0 +1,50 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for #22040.\n+\n+use std::fmt::Debug;\n+\n+trait Expr: Debug + PartialEq {\n+    fn print_element_count(&self);\n+}\n+\n+//#[derive(PartialEq)]\n+#[derive(Debug)]\n+struct SExpr<'x> {\n+    elements: Vec<Box<Expr+ 'x>>,\n+}\n+\n+impl<'x> PartialEq for SExpr<'x> {\n+    fn eq(&self, other:&SExpr<'x>) -> bool {\n+        println!(\"L1: {} L2: {}\", self.elements.len(), other.elements.len());\n+        let result = self.elements.len() == other.elements.len();\n+\n+        println!(\"Got compare {}\", result);\n+        return result;\n+    }\n+}\n+\n+impl <'x> SExpr<'x> {\n+    fn new() -> SExpr<'x> { return SExpr{elements: Vec::new(),}; }\n+}\n+\n+impl <'x> Expr for SExpr<'x> {\n+    fn print_element_count(&self) {\n+        println!(\"element count: {}\", self.elements.len());\n+    }\n+}\n+\n+fn main() {\n+    let a: Box<Expr> = Box::new(SExpr::new()); //~ ERROR trait `Expr` is not object-safe\n+    let b: Box<Expr> = Box::new(SExpr::new()); //~ ERROR trait `Expr` is not object-safe\n+\n+    assert_eq!(a , b);\n+}"}, {"sha": "d3f9dc73020fb3eafe0e2483d00e273dc2b43c19", "filename": "src/test/compile-fail/object-safety-supertrait-mentions-Self.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/261364d45d6a90dbe1e6702455f7a6ea661e74c9/src%2Ftest%2Fcompile-fail%2Fobject-safety-supertrait-mentions-Self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/261364d45d6a90dbe1e6702455f7a6ea661e74c9/src%2Ftest%2Fcompile-fail%2Fobject-safety-supertrait-mentions-Self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-safety-supertrait-mentions-Self.rs?ref=261364d45d6a90dbe1e6702455f7a6ea661e74c9", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that we correctly prevent users from making trait objects\n+// form traits that make use of `Self` in an argument or return position.\n+\n+trait Bar<T> {\n+    fn bar(&self, x: &T);\n+}\n+\n+trait Baz : Bar<Self> {\n+}\n+\n+fn make_bar<T:Bar<u32>>(t: &T) -> &Bar<u32> {\n+    t\n+}\n+\n+fn make_baz<T:Baz>(t: &T) -> &Baz {\n+    t\n+        //~^ ERROR `Baz` is not object-safe\n+        //~| NOTE the trait cannot use `Self` as a type parameter in the supertrait listing\n+}\n+\n+fn main() {\n+}"}, {"sha": "8ff514e04e360fbcef36cf6b39a4d61089b44214", "filename": "src/test/compile-fail/type-parameter-defaults-referencing-Self-ppaux.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/261364d45d6a90dbe1e6702455f7a6ea661e74c9/src%2Ftest%2Fcompile-fail%2Ftype-parameter-defaults-referencing-Self-ppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/261364d45d6a90dbe1e6702455f7a6ea661e74c9/src%2Ftest%2Fcompile-fail%2Ftype-parameter-defaults-referencing-Self-ppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-parameter-defaults-referencing-Self-ppaux.rs?ref=261364d45d6a90dbe1e6702455f7a6ea661e74c9", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test a default that references `Self` which is then used in an\n+// object type. Issue #18956. In this case, the value is supplied by\n+// the user, but pretty-printing the type during the error message\n+// caused an ICE.\n+\n+trait MyAdd<Rhs=Self> { fn add(&self, other: &Rhs) -> Self; }\n+\n+impl MyAdd for i32 {\n+    fn add(&self, other: &i32) -> i32 { *self + *other }\n+}\n+\n+fn main() {\n+    let x = 5;\n+    let y = x as MyAdd<i32>;\n+    //~^ ERROR as `MyAdd<i32>`\n+}"}, {"sha": "9982d4850248bb5851150ed0779dce5eacbd908f", "filename": "src/test/compile-fail/type-parameter-defaults-referencing-Self.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/261364d45d6a90dbe1e6702455f7a6ea661e74c9/src%2Ftest%2Fcompile-fail%2Ftype-parameter-defaults-referencing-Self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/261364d45d6a90dbe1e6702455f7a6ea661e74c9/src%2Ftest%2Fcompile-fail%2Ftype-parameter-defaults-referencing-Self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-parameter-defaults-referencing-Self.rs?ref=261364d45d6a90dbe1e6702455f7a6ea661e74c9", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test a default that references `Self` which is then used in an object type.\n+// Issue #18956.\n+\n+#![feature(default_type_params)]\n+\n+trait Foo<T=Self> {\n+    fn method(&self);\n+}\n+\n+fn foo(x: &Foo) { }\n+//~^ ERROR the type parameter `T` must be explicitly specified\n+\n+fn main() { }"}]}