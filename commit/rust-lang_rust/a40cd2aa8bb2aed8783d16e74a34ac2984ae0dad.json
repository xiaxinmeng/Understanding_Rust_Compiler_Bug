{"sha": "a40cd2aa8bb2aed8783d16e74a34ac2984ae0dad", "node_id": "C_kwDOAAsO6NoAKGE0MGNkMmFhOGJiMmFlZDg3ODNkMTZlNzRhMzRhYzI5ODRhZTBkYWQ", "commit": {"author": {"name": "Keita Nonaka", "email": "iKonnyaku40@gmail.com", "date": "2022-04-15T23:33:55Z"}, "committer": {"name": "Keita Nonaka", "email": "iKonnyaku40@gmail.com", "date": "2022-04-24T18:43:07Z"}, "message": "test: add test cases for VecDeque", "tree": {"sha": "f0b5c152fd80751c3aaea5ea24752f7953c4e1db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0b5c152fd80751c3aaea5ea24752f7953c4e1db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a40cd2aa8bb2aed8783d16e74a34ac2984ae0dad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a40cd2aa8bb2aed8783d16e74a34ac2984ae0dad", "html_url": "https://github.com/rust-lang/rust/commit/a40cd2aa8bb2aed8783d16e74a34ac2984ae0dad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a40cd2aa8bb2aed8783d16e74a34ac2984ae0dad/comments", "author": {"login": "Gumichocopengin8", "id": 34010665, "node_id": "MDQ6VXNlcjM0MDEwNjY1", "avatar_url": "https://avatars.githubusercontent.com/u/34010665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gumichocopengin8", "html_url": "https://github.com/Gumichocopengin8", "followers_url": "https://api.github.com/users/Gumichocopengin8/followers", "following_url": "https://api.github.com/users/Gumichocopengin8/following{/other_user}", "gists_url": "https://api.github.com/users/Gumichocopengin8/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gumichocopengin8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gumichocopengin8/subscriptions", "organizations_url": "https://api.github.com/users/Gumichocopengin8/orgs", "repos_url": "https://api.github.com/users/Gumichocopengin8/repos", "events_url": "https://api.github.com/users/Gumichocopengin8/events{/privacy}", "received_events_url": "https://api.github.com/users/Gumichocopengin8/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Gumichocopengin8", "id": 34010665, "node_id": "MDQ6VXNlcjM0MDEwNjY1", "avatar_url": "https://avatars.githubusercontent.com/u/34010665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gumichocopengin8", "html_url": "https://github.com/Gumichocopengin8", "followers_url": "https://api.github.com/users/Gumichocopengin8/followers", "following_url": "https://api.github.com/users/Gumichocopengin8/following{/other_user}", "gists_url": "https://api.github.com/users/Gumichocopengin8/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gumichocopengin8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gumichocopengin8/subscriptions", "organizations_url": "https://api.github.com/users/Gumichocopengin8/orgs", "repos_url": "https://api.github.com/users/Gumichocopengin8/repos", "events_url": "https://api.github.com/users/Gumichocopengin8/events{/privacy}", "received_events_url": "https://api.github.com/users/Gumichocopengin8/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f391b84552f210adec7893b50c5da74f9362ae4", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f391b84552f210adec7893b50c5da74f9362ae4", "html_url": "https://github.com/rust-lang/rust/commit/3f391b84552f210adec7893b50c5da74f9362ae4"}], "stats": {"total": 294, "additions": 294, "deletions": 0}, "files": [{"sha": "f2869a54713d29d70eb9c6f90189ad9cab8c23c9", "filename": "library/alloc/src/collections/vec_deque/tests.rs", "status": "modified", "additions": 294, "deletions": 0, "changes": 294, "blob_url": "https://github.com/rust-lang/rust/blob/a40cd2aa8bb2aed8783d16e74a34ac2984ae0dad/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a40cd2aa8bb2aed8783d16e74a34ac2984ae0dad/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Ftests.rs?ref=a40cd2aa8bb2aed8783d16e74a34ac2984ae0dad", "patch": "@@ -162,6 +162,300 @@ fn test_insert() {\n     }\n }\n \n+#[test]\n+fn test_get() {\n+    let mut tester = VecDeque::new();\n+    tester.push_back(1);\n+    tester.push_back(2);\n+    tester.push_back(3);\n+\n+    assert_eq!(tester.len(), 3);\n+\n+    assert_eq!(tester.get(1), Some(&2));\n+    assert_eq!(tester.get(2), Some(&3));\n+    assert_eq!(tester.get(0), Some(&1));\n+    assert_eq!(tester.get(3), None);\n+\n+    tester.remove(0);\n+\n+    assert_eq!(tester.len(), 2);\n+    assert_eq!(tester.get(0), Some(&2));\n+    assert_eq!(tester.get(1), Some(&3));\n+    assert_eq!(tester.get(2), None);\n+}\n+\n+#[test]\n+fn test_get_mut() {\n+    let mut tester = VecDeque::new();\n+    tester.push_back(1);\n+    tester.push_back(2);\n+    tester.push_back(3);\n+\n+    assert_eq!(tester.len(), 3);\n+\n+    if let Some(elem) = tester.get_mut(0) {\n+        assert_eq!(*elem, 1);\n+        *elem = 10;\n+    }\n+\n+    if let Some(elem) = tester.get_mut(2) {\n+        assert_eq!(*elem, 3);\n+        *elem = 30;\n+    }\n+\n+    assert_eq!(tester.get(0), Some(&10));\n+    assert_eq!(tester.get(2), Some(&30));\n+    assert_eq!(tester.get_mut(3), None);\n+\n+    tester.remove(2);\n+\n+    assert_eq!(tester.len(), 2);\n+    assert_eq!(tester.get(0), Some(&10));\n+    assert_eq!(tester.get(1), Some(&2));\n+    assert_eq!(tester.get(2), None);\n+}\n+\n+#[test]\n+fn test_swap() {\n+    let mut tester = VecDeque::new();\n+    tester.push_back(1);\n+    tester.push_back(2);\n+    tester.push_back(3);\n+\n+    assert_eq!(tester, [1, 2, 3]);\n+\n+    tester.swap(0, 0);\n+    assert_eq!(tester, [1, 2, 3]);\n+    tester.swap(0, 1);\n+    assert_eq!(tester, [2, 1, 3]);\n+    tester.swap(2, 1);\n+    assert_eq!(tester, [2, 3, 1]);\n+    tester.swap(1, 2);\n+    assert_eq!(tester, [2, 1, 3]);\n+    tester.swap(0, 2);\n+    assert_eq!(tester, [3, 1, 2]);\n+    tester.swap(2, 2);\n+    assert_eq!(tester, [3, 1, 2]);\n+}\n+\n+#[test]\n+#[should_panic = \"assertion failed: j < self.len()\"]\n+fn test_swap_panic() {\n+    let mut tester = VecDeque::new();\n+    tester.push_back(1);\n+    tester.push_back(2);\n+    tester.push_back(3);\n+    tester.swap(2, 3);\n+}\n+\n+#[test]\n+fn test_reserve_exact() {\n+    let mut tester: VecDeque<i32> = VecDeque::with_capacity(1);\n+    assert!(tester.capacity() == 1);\n+    tester.reserve_exact(50);\n+    assert!(tester.capacity() >= 51);\n+    tester.reserve_exact(40);\n+    assert!(tester.capacity() >= 51);\n+    tester.reserve_exact(200);\n+    assert!(tester.capacity() >= 200);\n+}\n+\n+#[test]\n+#[should_panic = \"capacity overflow\"]\n+fn test_reserve_exact_panic() {\n+    let mut tester: VecDeque<i32> = VecDeque::new();\n+    tester.reserve_exact(usize::MAX);\n+}\n+\n+#[test]\n+fn test_try_reserve_exact() {\n+    let mut tester: VecDeque<i32> = VecDeque::with_capacity(1);\n+    assert!(tester.capacity() == 1);\n+    assert_eq!(tester.try_reserve_exact(100), Ok(()));\n+    assert!(tester.capacity() >= 100);\n+    assert_eq!(tester.try_reserve_exact(50), Ok(()));\n+    assert!(tester.capacity() >= 100);\n+    assert_eq!(tester.try_reserve_exact(200), Ok(()));\n+    assert!(tester.capacity() >= 200);\n+    assert_eq!(tester.try_reserve_exact(0), Ok(()));\n+    assert!(tester.capacity() >= 200);\n+    assert!(tester.try_reserve_exact(usize::MAX).is_err());\n+}\n+\n+#[test]\n+fn test_try_reserve() {\n+    let mut tester: VecDeque<i32> = VecDeque::with_capacity(1);\n+    assert!(tester.capacity() == 1);\n+    assert_eq!(tester.try_reserve(100), Ok(()));\n+    assert!(tester.capacity() >= 100);\n+    assert_eq!(tester.try_reserve(50), Ok(()));\n+    assert!(tester.capacity() >= 100);\n+    assert_eq!(tester.try_reserve(200), Ok(()));\n+    assert!(tester.capacity() >= 200);\n+    assert_eq!(tester.try_reserve(0), Ok(()));\n+    assert!(tester.capacity() >= 200);\n+    assert!(tester.try_reserve(usize::MAX).is_err());\n+}\n+\n+#[test]\n+fn test_contains() {\n+    let mut tester = VecDeque::new();\n+    tester.push_back(1);\n+    tester.push_back(2);\n+    tester.push_back(3);\n+\n+    assert!(tester.contains(&1));\n+    assert!(tester.contains(&3));\n+    assert!(!tester.contains(&0));\n+    assert!(!tester.contains(&4));\n+    tester.remove(0);\n+    assert!(!tester.contains(&1));\n+    assert!(tester.contains(&2));\n+    assert!(tester.contains(&3));\n+}\n+\n+#[test]\n+fn test_rotate_left_right() {\n+    let mut tester: VecDeque<_> = (1..=10).collect();\n+\n+    assert_eq!(tester.len(), 10);\n+\n+    tester.rotate_left(0);\n+    assert_eq!(tester, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n+\n+    tester.rotate_right(0);\n+    assert_eq!(tester, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n+\n+    tester.rotate_left(3);\n+    assert_eq!(tester, [4, 5, 6, 7, 8, 9, 10, 1, 2, 3]);\n+\n+    tester.rotate_right(5);\n+    assert_eq!(tester, [9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n+\n+    tester.rotate_left(tester.len());\n+    assert_eq!(tester, [9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n+\n+    tester.rotate_right(tester.len());\n+    assert_eq!(tester, [9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n+\n+    tester.rotate_left(1);\n+    assert_eq!(tester, [10, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\n+}\n+\n+#[test]\n+#[should_panic = \"assertion failed: mid <= self.len()\"]\n+fn test_rotate_left_panic() {\n+    let mut tester: VecDeque<_> = (1..=10).collect();\n+    tester.rotate_left(tester.len() + 1);\n+}\n+\n+#[test]\n+#[should_panic = \"assertion failed: k <= self.len()\"]\n+fn test_rotate_right_panic() {\n+    let mut tester: VecDeque<_> = (1..=10).collect();\n+    tester.rotate_right(tester.len() + 1);\n+}\n+\n+#[test]\n+fn test_binary_search() {\n+    // If the givin VecDeque is not sorted, the returned result is unspecified and meaningless,\n+    // as this method performs a binary search.\n+\n+    let tester: VecDeque<_> = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55].into();\n+\n+    assert_eq!(tester.binary_search(&0), Ok(0));\n+    assert_eq!(tester.binary_search(&5), Ok(5));\n+    assert_eq!(tester.binary_search(&55), Ok(10));\n+    assert_eq!(tester.binary_search(&4), Err(5));\n+    assert_eq!(tester.binary_search(&-1), Err(0));\n+    assert!(matches!(tester.binary_search(&1), Ok(1..=2)));\n+\n+    let tester: VecDeque<_> = [1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3].into();\n+    assert_eq!(tester.binary_search(&1), Ok(0));\n+    assert!(matches!(tester.binary_search(&2), Ok(1..=4)));\n+    assert!(matches!(tester.binary_search(&3), Ok(5..=13)));\n+    assert_eq!(tester.binary_search(&-2), Err(0));\n+    assert_eq!(tester.binary_search(&0), Err(0));\n+    assert_eq!(tester.binary_search(&4), Err(14));\n+    assert_eq!(tester.binary_search(&5), Err(14));\n+}\n+\n+#[test]\n+fn test_binary_search_by() {\n+    // If the givin VecDeque is not sorted, the returned result is unspecified and meaningless,\n+    // as this method performs a binary search.\n+\n+    let tester: VecDeque<_> = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55].into();\n+\n+    assert_eq!(tester.binary_search_by(|x| x.cmp(&0)), Ok(0));\n+    assert_eq!(tester.binary_search_by(|x| x.cmp(&5)), Ok(5));\n+    assert_eq!(tester.binary_search_by(|x| x.cmp(&55)), Ok(10));\n+    assert_eq!(tester.binary_search_by(|x| x.cmp(&4)), Err(5));\n+    assert_eq!(tester.binary_search_by(|x| x.cmp(&-1)), Err(0));\n+    assert!(matches!(tester.binary_search_by(|x| x.cmp(&1)), Ok(1..=2)));\n+}\n+\n+#[test]\n+fn test_binary_search_key() {\n+    // If the givin VecDeque is not sorted, the returned result is unspecified and meaningless,\n+    // as this method performs a binary search.\n+\n+    let tester: VecDeque<_> = [\n+        (-1, 0),\n+        (2, 10),\n+        (6, 5),\n+        (7, 1),\n+        (8, 10),\n+        (10, 2),\n+        (20, 3),\n+        (24, 5),\n+        (25, 18),\n+        (28, 13),\n+        (31, 21),\n+        (32, 4),\n+        (54, 25),\n+    ]\n+    .into();\n+\n+    assert_eq!(tester.binary_search_by_key(&-1, |&(a, _b)| a), Ok(0));\n+    assert_eq!(tester.binary_search_by_key(&8, |&(a, _b)| a), Ok(4));\n+    assert_eq!(tester.binary_search_by_key(&25, |&(a, _b)| a), Ok(8));\n+    assert_eq!(tester.binary_search_by_key(&54, |&(a, _b)| a), Ok(12));\n+    assert_eq!(tester.binary_search_by_key(&-2, |&(a, _b)| a), Err(0));\n+    assert_eq!(tester.binary_search_by_key(&1, |&(a, _b)| a), Err(1));\n+    assert_eq!(tester.binary_search_by_key(&4, |&(a, _b)| a), Err(2));\n+    assert_eq!(tester.binary_search_by_key(&13, |&(a, _b)| a), Err(6));\n+    assert_eq!(tester.binary_search_by_key(&55, |&(a, _b)| a), Err(13));\n+    assert_eq!(tester.binary_search_by_key(&100, |&(a, _b)| a), Err(13));\n+\n+    let tester: VecDeque<_> = [\n+        (0, 0),\n+        (2, 1),\n+        (6, 1),\n+        (5, 1),\n+        (3, 1),\n+        (1, 2),\n+        (2, 3),\n+        (4, 5),\n+        (5, 8),\n+        (8, 13),\n+        (1, 21),\n+        (2, 34),\n+        (4, 55),\n+    ]\n+    .into();\n+\n+    assert_eq!(tester.binary_search_by_key(&0, |&(_a, b)| b), Ok(0));\n+    assert!(matches!(tester.binary_search_by_key(&1, |&(_a, b)| b), Ok(1..=4)));\n+    assert_eq!(tester.binary_search_by_key(&8, |&(_a, b)| b), Ok(8));\n+    assert_eq!(tester.binary_search_by_key(&13, |&(_a, b)| b), Ok(9));\n+    assert_eq!(tester.binary_search_by_key(&55, |&(_a, b)| b), Ok(12));\n+    assert_eq!(tester.binary_search_by_key(&-1, |&(_a, b)| b), Err(0));\n+    assert_eq!(tester.binary_search_by_key(&4, |&(_a, b)| b), Err(7));\n+    assert_eq!(tester.binary_search_by_key(&56, |&(_a, b)| b), Err(13));\n+    assert_eq!(tester.binary_search_by_key(&100, |&(_a, b)| b), Err(13));\n+}\n+\n #[test]\n fn make_contiguous_big_tail() {\n     let mut tester = VecDeque::with_capacity(15);"}]}