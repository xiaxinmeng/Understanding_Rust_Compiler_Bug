{"sha": "99620ad7215d58ada72eabb2d7467fd685ac1090", "node_id": "C_kwDOAAsO6NoAKDk5NjIwYWQ3MjE1ZDU4YWRhNzJlYWJiMmQ3NDY3ZmQ2ODVhYzEwOTA", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-06-20T12:56:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-20T12:56:34Z"}, "message": "Rollup merge of #94855 - m-ou-se:advance-slice-panic-docs, r=kennytm\n\nPanic when advance_slices()'ing too far and update docs.\n\nThis updates advance_slices() to panic when advancing too far, like advance() already does. And updates the docs to say so.\n\nSee https://github.com/rust-lang/rust/issues/62726#issuecomment-1065253213", "tree": {"sha": "d93a6ea7c7794d986743dddc276bcbd3fdd705a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d93a6ea7c7794d986743dddc276bcbd3fdd705a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99620ad7215d58ada72eabb2d7467fd685ac1090", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJisG6DCRBK7hj4Ov3rIwAAKbMIAF495XfSJzF1leksZudfCZnM\n2exHMStSnjcvIKbIKZCRk4EZedpWzSf2huJUFYzHm9+BXTy+Wqs4/5IHLJAn0zqd\nfWlMQANInEUXBT20FXxjfygjlqP1t3Aqx/LkAXwrjjqquiLM8SyaYIHFkRmNVgG8\nVZ+9WkbPRXqH2uPLWwfNcx0UOy/wTFkq/pXfulHaqG7i86uSt8DAc1qVcpsFi+QZ\n/LInORyryezlOf648nMFhO2qe/oSLTIaFVS2ba0DUICWhotJZFa/A5/GMTSxxIfw\nuPLd7NJ0l3t92OO9O1pN/y3Vf4Er1Sup72+/AYNzUj22dK1sUXj4FCEZHIWGWx4=\n=+gMw\n-----END PGP SIGNATURE-----\n", "payload": "tree d93a6ea7c7794d986743dddc276bcbd3fdd705a5\nparent fd9ca0c25ec90f6ed156e6f0e950763ca5171f8a\nparent 1890372c9e64d1fb5ee45bbb2d785510a6011e70\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1655729794 +0200\ncommitter GitHub <noreply@github.com> 1655729794 +0200\n\nRollup merge of #94855 - m-ou-se:advance-slice-panic-docs, r=kennytm\n\nPanic when advance_slices()'ing too far and update docs.\n\nThis updates advance_slices() to panic when advancing too far, like advance() already does. And updates the docs to say so.\n\nSee https://github.com/rust-lang/rust/issues/62726#issuecomment-1065253213\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99620ad7215d58ada72eabb2d7467fd685ac1090", "html_url": "https://github.com/rust-lang/rust/commit/99620ad7215d58ada72eabb2d7467fd685ac1090", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99620ad7215d58ada72eabb2d7467fd685ac1090/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd9ca0c25ec90f6ed156e6f0e950763ca5171f8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd9ca0c25ec90f6ed156e6f0e950763ca5171f8a", "html_url": "https://github.com/rust-lang/rust/commit/fd9ca0c25ec90f6ed156e6f0e950763ca5171f8a"}, {"sha": "1890372c9e64d1fb5ee45bbb2d785510a6011e70", "url": "https://api.github.com/repos/rust-lang/rust/commits/1890372c9e64d1fb5ee45bbb2d785510a6011e70", "html_url": "https://github.com/rust-lang/rust/commit/1890372c9e64d1fb5ee45bbb2d785510a6011e70"}], "stats": {"total": 58, "additions": 38, "deletions": 20}, "files": [{"sha": "cad1fab7b8f840ca6ab7ae1fff35c4dc6a3762a9", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 34, "deletions": 16, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/99620ad7215d58ada72eabb2d7467fd685ac1090/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99620ad7215d58ada72eabb2d7467fd685ac1090/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=99620ad7215d58ada72eabb2d7467fd685ac1090", "patch": "@@ -1084,6 +1084,10 @@ impl<'a> IoSliceMut<'a> {\n     /// Also see [`IoSliceMut::advance_slices`] to advance the cursors of\n     /// multiple buffers.\n     ///\n+    /// # Panics\n+    ///\n+    /// Panics when trying to advance beyond the end of the slice.\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -1105,15 +1109,18 @@ impl<'a> IoSliceMut<'a> {\n         self.0.advance(n)\n     }\n \n-    /// Advance the internal cursor of the slices.\n+    /// Advance a slice of slices.\n     ///\n-    /// # Notes\n+    /// Shrinks the slice to remove any `IoSliceMut`s that are fully advanced over.\n+    /// If the cursor ends up in the middle of an `IoSliceMut`, it is modified\n+    /// to start at that cursor.\n     ///\n-    /// Elements in the slice may be modified if the cursor is not advanced to\n-    /// the end of the slice. For example if we have a slice of buffers with 2\n-    /// `IoSliceMut`s, both of length 8, and we advance the cursor by 10 bytes\n-    /// the first `IoSliceMut` will be untouched however the second will be\n-    /// modified to remove the first 2 bytes (10 - 8).\n+    /// For example, if we have a slice of two 8-byte `IoSliceMut`s, and we advance by 10 bytes,\n+    /// the result will only include the second `IoSliceMut`, advanced by 2 bytes.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics when trying to advance beyond the end of the slices.\n     ///\n     /// # Examples\n     ///\n@@ -1154,7 +1161,9 @@ impl<'a> IoSliceMut<'a> {\n         }\n \n         *bufs = &mut replace(bufs, &mut [])[remove..];\n-        if !bufs.is_empty() {\n+        if bufs.is_empty() {\n+            assert!(n == accumulated_len, \"advancing io slices beyond their length\");\n+        } else {\n             bufs[0].advance(n - accumulated_len)\n         }\n     }\n@@ -1219,6 +1228,10 @@ impl<'a> IoSlice<'a> {\n     /// Also see [`IoSlice::advance_slices`] to advance the cursors of multiple\n     /// buffers.\n     ///\n+    /// # Panics\n+    ///\n+    /// Panics when trying to advance beyond the end of the slice.\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -1240,15 +1253,18 @@ impl<'a> IoSlice<'a> {\n         self.0.advance(n)\n     }\n \n-    /// Advance the internal cursor of the slices.\n+    /// Advance a slice of slices.\n     ///\n-    /// # Notes\n+    /// Shrinks the slice to remove any `IoSlice`s that are fully advanced over.\n+    /// If the cursor ends up in the middle of an `IoSlice`, it is modified\n+    /// to start at that cursor.\n     ///\n-    /// Elements in the slice may be modified if the cursor is not advanced to\n-    /// the end of the slice. For example if we have a slice of buffers with 2\n-    /// `IoSlice`s, both of length 8, and we advance the cursor by 10 bytes the\n-    /// first `IoSlice` will be untouched however the second will be modified to\n-    /// remove the first 2 bytes (10 - 8).\n+    /// For example, if we have a slice of two 8-byte `IoSlice`s, and we advance by 10 bytes,\n+    /// the result will only include the second `IoSlice`, advanced by 2 bytes.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics when trying to advance beyond the end of the slices.\n     ///\n     /// # Examples\n     ///\n@@ -1288,7 +1304,9 @@ impl<'a> IoSlice<'a> {\n         }\n \n         *bufs = &mut replace(bufs, &mut [])[remove..];\n-        if !bufs.is_empty() {\n+        if bufs.is_empty() {\n+            assert!(n == accumulated_len, \"advancing io slices beyond their length\");\n+        } else {\n             bufs[0].advance(n - accumulated_len)\n         }\n     }"}, {"sha": "d5a8c93b0ce9f35cbc48a2b9300813be558e8582", "filename": "library/std/src/io/tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/99620ad7215d58ada72eabb2d7467fd685ac1090/library%2Fstd%2Fsrc%2Fio%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99620ad7215d58ada72eabb2d7467fd685ac1090/library%2Fstd%2Fsrc%2Fio%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ftests.rs?ref=99620ad7215d58ada72eabb2d7467fd685ac1090", "patch": "@@ -423,18 +423,18 @@ fn io_slice_mut_advance_slices() {\n }\n \n #[test]\n+#[should_panic]\n fn io_slice_mut_advance_slices_empty_slice() {\n     let mut empty_bufs = &mut [][..];\n-    // Shouldn't panic.\n     IoSliceMut::advance_slices(&mut empty_bufs, 1);\n }\n \n #[test]\n+#[should_panic]\n fn io_slice_mut_advance_slices_beyond_total_length() {\n     let mut buf1 = [1; 8];\n     let mut bufs = &mut [IoSliceMut::new(&mut buf1)][..];\n \n-    // Going beyond the total length should be ok.\n     IoSliceMut::advance_slices(&mut bufs, 9);\n     assert!(bufs.is_empty());\n }\n@@ -463,18 +463,18 @@ fn io_slice_advance_slices() {\n }\n \n #[test]\n+#[should_panic]\n fn io_slice_advance_slices_empty_slice() {\n     let mut empty_bufs = &mut [][..];\n-    // Shouldn't panic.\n     IoSlice::advance_slices(&mut empty_bufs, 1);\n }\n \n #[test]\n+#[should_panic]\n fn io_slice_advance_slices_beyond_total_length() {\n     let buf1 = [1; 8];\n     let mut bufs = &mut [IoSlice::new(&buf1)][..];\n \n-    // Going beyond the total length should be ok.\n     IoSlice::advance_slices(&mut bufs, 9);\n     assert!(bufs.is_empty());\n }"}]}