{"sha": "e4b87f5edb3b5b0442a5fbe887bfc85068b6a4ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0Yjg3ZjVlZGIzYjViMDQ0MmE1ZmJlODg3YmZjODUwNjhiNmE0ZWY=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-03-31T22:02:46Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-04-03T17:18:07Z"}, "message": "Deny internal lints on librustc_mir", "tree": {"sha": "dd7cf1a877ec3246ee247bfb738d4c0aab1e504c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd7cf1a877ec3246ee247bfb738d4c0aab1e504c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4b87f5edb3b5b0442a5fbe887bfc85068b6a4ef", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZxoS6lESXlRGMHWcaTCGhp1QZjcFAlyk6s8ACgkQaTCGhp1Q\nZjcaUw/+Ps/X2U6pVlUevA3QK2GHFEmCPPU+r5oD905SNhiZFkyQdOIywzMuVpLc\ni1gbzZo/nfDq6xHU2uv0rvqCeSAuaKm612h1PhdUe5yaLfHEMuqkuIKgXtd4ToiR\nJtFG5GJ+Axie2vT0GMdEi3b6DE+MmSYCRWjtg/TNjZFuOHKfMFR/tX9MbKGhnVLr\n34z16QSLc2/1xyQXVXSO6N7chfu2NJDqsGzDyPum85Ez8YeMRfuO/EXnmkefLZJD\njkYwS//8aExXD31zieT/ag8WL0yrHuwBQgHHMeympUU96DK4joBqnK+8SaQ4rbv/\ntkIldMogwElLjJZjXHAW2nJMFE/OkZ5hrTgvWyAAO9PR3OFHRMCENs2Czt+KLybe\nBR2g4NAe4JdrRNDN/LKaiPE5u7EdbizpCHvhZRgwafGhYtnC3+3qJ/i8wrjntm3J\nV+eFXSBnmqczS5QSvngT5DKARe8NTMYRBn4KMF6c/fcKYqL3Ha5lQhQ2ZdC3Se0o\npo6spG4nA5HUdgGRHawsCV6Fj15Q0Nky03P7zCicIbrWPEBegWwsxL6Kab2eSExw\nBaK/PKFRuDbzTEvND/DlHnidNj21sWcKEr9mbNRM9pz+mleij7DAXqgVdUsd0uhL\ne403x5LDltQOKIOrqKXRY+OkTvIHv7ijU9Fs+cjpsu3AmbAuBTc=\n=Bv25\n-----END PGP SIGNATURE-----", "payload": "tree dd7cf1a877ec3246ee247bfb738d4c0aab1e504c\nparent d2bc99135f9a8df325de6b6359390f97ad654831\nauthor flip1995 <hello@philkrones.com> 1554069766 +0200\ncommitter flip1995 <hello@philkrones.com> 1554311887 +0200\n\nDeny internal lints on librustc_mir\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4b87f5edb3b5b0442a5fbe887bfc85068b6a4ef", "html_url": "https://github.com/rust-lang/rust/commit/e4b87f5edb3b5b0442a5fbe887bfc85068b6a4ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4b87f5edb3b5b0442a5fbe887bfc85068b6a4ef/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2bc99135f9a8df325de6b6359390f97ad654831", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2bc99135f9a8df325de6b6359390f97ad654831", "html_url": "https://github.com/rust-lang/rust/commit/d2bc99135f9a8df325de6b6359390f97ad654831"}], "stats": {"total": 91, "additions": 46, "deletions": 45}, "files": [{"sha": "01c06739e290363546343253a6d12b89ab89065d", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e4b87f5edb3b5b0442a5fbe887bfc85068b6a4ef/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b87f5edb3b5b0442a5fbe887bfc85068b6a4ef/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=e4b87f5edb3b5b0442a5fbe887bfc85068b6a4ef", "patch": "@@ -223,7 +223,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     Some(ref name) => format!(\"`{}`\", name),\n                     None => \"value\".to_owned(),\n                 };\n-                if let ty::TyKind::Param(param_ty) = ty.sty {\n+                if let ty::Param(param_ty) = ty.sty {\n                     let tcx = self.infcx.tcx;\n                     let generics = tcx.generics_of(self.mir_def_id);\n                     let def_id = generics.type_param(&param_ty, tcx).def_id;\n@@ -1529,7 +1529,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         if let TerminatorKind::Call {\n             func: Operand::Constant(box Constant {\n                 literal: ty::Const {\n-                    ty: &ty::TyS { sty: ty::TyKind::FnDef(id, _), ..  },\n+                    ty: &ty::TyS { sty: ty::FnDef(id, _), ..  },\n                     ..\n                 },\n                 ..\n@@ -1547,7 +1547,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 };\n \n                 debug!(\"add_moved_or_invoked_closure_note: closure={:?}\", closure);\n-                if let ty::TyKind::Closure(did, _) = self.mir.local_decls[closure].ty.sty {\n+                if let ty::Closure(did, _) = self.mir.local_decls[closure].ty.sty {\n                     let hir_id = self.infcx.tcx.hir().as_local_hir_id(did).unwrap();\n \n                     if let Some((span, name)) = self.infcx.tcx.typeck_tables_of(did)\n@@ -1570,7 +1570,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n         // Check if we are just moving a closure after it has been invoked.\n         if let Some(target) = target {\n-            if let ty::TyKind::Closure(did, _) = self.mir.local_decls[target].ty.sty {\n+            if let ty::Closure(did, _) = self.mir.local_decls[target].ty.sty {\n                 let hir_id = self.infcx.tcx.hir().as_local_hir_id(did).unwrap();\n \n                 if let Some((span, name)) = self.infcx.tcx.typeck_tables_of(did)\n@@ -1919,7 +1919,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             } else {\n                 let ty = self.infcx.tcx.type_of(self.mir_def_id);\n                 match ty.sty {\n-                    ty::TyKind::FnDef(_, _) | ty::TyKind::FnPtr(_) => self.annotate_fn_sig(\n+                    ty::FnDef(_, _) | ty::FnPtr(_) => self.annotate_fn_sig(\n                         self.mir_def_id,\n                         self.infcx.tcx.fn_sig(self.mir_def_id),\n                     ),\n@@ -2164,12 +2164,12 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         //    anything.\n         let return_ty = sig.output();\n         match return_ty.skip_binder().sty {\n-            ty::TyKind::Ref(return_region, _, _) if return_region.has_name() && !is_closure => {\n+            ty::Ref(return_region, _, _) if return_region.has_name() && !is_closure => {\n                 // This is case 1 from above, return type is a named reference so we need to\n                 // search for relevant arguments.\n                 let mut arguments = Vec::new();\n                 for (index, argument) in sig.inputs().skip_binder().iter().enumerate() {\n-                    if let ty::TyKind::Ref(argument_region, _, _) = argument.sty {\n+                    if let ty::Ref(argument_region, _, _) = argument.sty {\n                         if argument_region == return_region {\n                             // Need to use the `rustc::ty` types to compare against the\n                             // `return_region`. Then use the `rustc::hir` type to get only\n@@ -2206,7 +2206,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     return_span,\n                 })\n             }\n-            ty::TyKind::Ref(_, _, _) if is_closure => {\n+            ty::Ref(_, _, _) if is_closure => {\n                 // This is case 2 from above but only for closures, return type is anonymous\n                 // reference so we select\n                 // the first argument.\n@@ -2215,9 +2215,9 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n                 // Closure arguments are wrapped in a tuple, so we need to get the first\n                 // from that.\n-                if let ty::TyKind::Tuple(elems) = argument_ty.sty {\n+                if let ty::Tuple(elems) = argument_ty.sty {\n                     let argument_ty = elems.first()?;\n-                    if let ty::TyKind::Ref(_, _, _) = argument_ty.sty {\n+                    if let ty::Ref(_, _, _) = argument_ty.sty {\n                         return Some(AnnotatedBorrowFnSignature::Closure {\n                             argument_ty,\n                             argument_span,\n@@ -2227,7 +2227,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n                 None\n             }\n-            ty::TyKind::Ref(_, _, _) => {\n+            ty::Ref(_, _, _) => {\n                 // This is also case 2 from above but for functions, return type is still an\n                 // anonymous reference so we select the first argument.\n                 let argument_span = fn_decl.inputs.first()?.span;\n@@ -2238,7 +2238,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n                 // We expect the first argument to be a reference.\n                 match argument_ty.sty {\n-                    ty::TyKind::Ref(_, _, _) => {}\n+                    ty::Ref(_, _, _) => {}\n                     _ => return None,\n                 }\n \n@@ -2366,8 +2366,8 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         // this by hooking into the pretty printer and telling it to label the\n         // lifetimes without names with the value `'0`.\n         match ty.sty {\n-            ty::TyKind::Ref(ty::RegionKind::ReLateBound(_, br), _, _)\n-            | ty::TyKind::Ref(\n+            ty::Ref(ty::RegionKind::ReLateBound(_, br), _, _)\n+            | ty::Ref(\n                 ty::RegionKind::RePlaceholder(ty::PlaceholderRegion { name: br, .. }),\n                 _,\n                 _,\n@@ -2386,7 +2386,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         let mut printer = ty::print::FmtPrinter::new(self.infcx.tcx, &mut s, Namespace::TypeNS);\n \n         let region = match ty.sty {\n-            ty::TyKind::Ref(region, _, _) => {\n+            ty::Ref(region, _, _) => {\n                 match region {\n                     ty::RegionKind::ReLateBound(_, br)\n                     | ty::RegionKind::RePlaceholder(ty::PlaceholderRegion { name: br, .. }) => {"}, {"sha": "bf297ae0debf0b4b212565db140fe9af80d57cb7", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4b87f5edb3b5b0442a5fbe887bfc85068b6a4ef/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b87f5edb3b5b0442a5fbe887bfc85068b6a4ef/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=e4b87f5edb3b5b0442a5fbe887bfc85068b6a4ef", "patch": "@@ -1741,7 +1741,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 // no move out from an earlier location) then this is an attempt at initialization\n                 // of the union - we should error in that case.\n                 let tcx = this.infcx.tcx;\n-                if let ty::TyKind::Adt(def, _) = base.ty(this.mir, tcx).ty.sty {\n+                if let ty::Adt(def, _) = base.ty(this.mir, tcx).ty.sty {\n                     if def.is_union() {\n                         if this.move_data.path_map[mpi].iter().any(|moi| {\n                             this.move_data.moves[*moi].source.is_predecessor_of("}, {"sha": "7efe1d83c2e5fc119e1491e3f615e0ec4a127a8f", "filename": "src/librustc_mir/borrow_check/move_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4b87f5edb3b5b0442a5fbe887bfc85068b6a4ef/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b87f5edb3b5b0442a5fbe887bfc85068b6a4ef/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs?ref=e4b87f5edb3b5b0442a5fbe887bfc85068b6a4ef", "patch": "@@ -532,7 +532,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                     if let StatementKind::Assign(_, box Rvalue::Ref(_, _, source)) = &stmt.kind {\n                         let ty = source.ty(self.mir, self.infcx.tcx).ty;\n                         let ty = match ty.sty {\n-                            ty::TyKind::Ref(_, ty, _) => ty,\n+                            ty::Ref(_, ty, _) => ty,\n                             _ => ty,\n                         };\n                         debug!(\"borrowed_content_source: ty={:?}\", ty);\n@@ -557,7 +557,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n \n                         let ty = source.ty(self.mir, self.infcx.tcx).ty;\n                         let ty = match ty.sty {\n-                            ty::TyKind::Ref(_, ty, _) => ty,\n+                            ty::Ref(_, ty, _) => ty,\n                             _ => ty,\n                         };\n                         debug!(\"borrowed_content_source: ty={:?}\", ty);"}, {"sha": "b780511315d81a021a7041fc7d1ad169f7f817f8", "filename": "src/librustc_mir/borrow_check/mutability_errors.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e4b87f5edb3b5b0442a5fbe887bfc85068b6a4ef/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b87f5edb3b5b0442a5fbe887bfc85068b6a4ef/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs?ref=e4b87f5edb3b5b0442a5fbe887bfc85068b6a4ef", "patch": "@@ -5,7 +5,7 @@ use rustc::mir::{\n     Mutability, Operand, Place, PlaceBase, Projection, ProjectionElem, Static, StaticKind,\n };\n use rustc::mir::{Terminator, TerminatorKind};\n-use rustc::ty::{self, Const, DefIdTree, TyS, TyKind, TyCtxt};\n+use rustc::ty::{self, Const, DefIdTree, TyS, TyCtxt};\n use rustc_data_structures::indexed_vec::Idx;\n use syntax_pos::Span;\n use syntax_pos::symbol::keywords;\n@@ -261,7 +261,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                             // Otherwise, check if the name is the self kewyord - in which case\n                             // we have an explicit self. Do the same thing in this case and check\n                             // for a `self: &mut Self` to suggest removing the `&mut`.\n-                            if let ty::TyKind::Ref(\n+                            if let ty::Ref(\n                                 _, _, hir::Mutability::MutMutable\n                             ) = local_decl.ty.sty {\n                                 true\n@@ -476,7 +476,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                                     func: Operand::Constant(box Constant {\n                                         literal: Const {\n                                             ty: &TyS {\n-                                                sty: TyKind::FnDef(id, substs),\n+                                                sty: ty::FnDef(id, substs),\n                                                 ..\n                                             },\n                                             ..\n@@ -633,8 +633,8 @@ fn annotate_struct_field(\n     field: &mir::Field,\n ) -> Option<(Span, String)> {\n     // Expect our local to be a reference to a struct of some kind.\n-    if let ty::TyKind::Ref(_, ty, _) = ty.sty {\n-        if let ty::TyKind::Adt(def, _) = ty.sty {\n+    if let ty::Ref(_, ty, _) = ty.sty {\n+        if let ty::Adt(def, _) = ty.sty {\n             let field = def.all_fields().nth(field.index())?;\n             // Use the HIR types to construct the diagnostic message.\n             let hir_id = tcx.hir().as_local_hir_id(field.did)?;"}, {"sha": "e30938bc32659397f136593ebfd597cc78523894", "filename": "src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4b87f5edb3b5b0442a5fbe887bfc85068b6a4ef/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b87f5edb3b5b0442a5fbe887bfc85068b6a4ef/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs?ref=e4b87f5edb3b5b0442a5fbe887bfc85068b6a4ef", "patch": "@@ -589,7 +589,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                                 // Check the type for a trait object.\n                                 return match ty.sty {\n                                     // `&dyn Trait`\n-                                    ty::TyKind::Ref(_, ty, _) if ty.is_trait() => true,\n+                                    ty::Ref(_, ty, _) if ty.is_trait() => true,\n                                     // `Box<dyn Trait>`\n                                     _ if ty.is_box() && ty.boxed_ty().is_trait() => true,\n                                     // `dyn Trait`"}, {"sha": "917e383cae82783b06f571047c206b2390691ca6", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4b87f5edb3b5b0442a5fbe887bfc85068b6a4ef/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b87f5edb3b5b0442a5fbe887bfc85068b6a4ef/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs?ref=e4b87f5edb3b5b0442a5fbe887bfc85068b6a4ef", "patch": "@@ -583,7 +583,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             (self.to_error_region(fr), self.to_error_region(outlived_fr))\n         {\n             if let Some(ty::TyS {\n-                sty: ty::TyKind::Opaque(did, substs),\n+                sty: ty::Opaque(did, substs),\n                 ..\n             }) = infcx\n                 .tcx"}, {"sha": "ec5637d17072d4840148ee91990b5809ec71b015", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e4b87f5edb3b5b0442a5fbe887bfc85068b6a4ef/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b87f5edb3b5b0442a5fbe887bfc85068b6a4ef/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=e4b87f5edb3b5b0442a5fbe887bfc85068b6a4ef", "patch": "@@ -39,7 +39,7 @@ use rustc::traits::{ObligationCause, PredicateObligations};\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::subst::{Subst, SubstsRef, UnpackedKind, UserSubsts};\n use rustc::ty::{\n-    self, RegionVid, ToPolyTraitRef, Ty, TyCtxt, TyKind, UserType,\n+    self, RegionVid, ToPolyTraitRef, Ty, TyCtxt, UserType,\n     CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations,\n     UserTypeAnnotationIndex,\n };\n@@ -746,7 +746,7 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n         let (variant, substs) = match base_ty {\n             PlaceTy { ty, variant_index: Some(variant_index) } => {\n                 match ty.sty {\n-                    ty::TyKind::Adt(adt_def, substs) => (&adt_def.variants[variant_index], substs),\n+                    ty::Adt(adt_def, substs) => (&adt_def.variants[variant_index], substs),\n                     _ => bug!(\"can't have downcast of non-adt type\"),\n                 }\n             }\n@@ -1136,7 +1136,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         category: ConstraintCategory,\n     ) -> Fallible<()> {\n         if let Err(terr) = self.sub_types(sub, sup, locations, category) {\n-            if let TyKind::Opaque(..) = sup.sty {\n+            if let ty::Opaque(..) = sup.sty {\n                 // When you have `let x: impl Foo = ...` in a closure,\n                 // the resulting inferend values are stored with the\n                 // def-id of the base function.\n@@ -1389,7 +1389,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             } => {\n                 let place_type = place.ty(mir, tcx).ty;\n                 let adt = match place_type.sty {\n-                    TyKind::Adt(adt, _) if adt.is_enum() => adt,\n+                    ty::Adt(adt, _) if adt.is_enum() => adt,\n                     _ => {\n                         span_bug!(\n                             stmt.source_info.span,"}, {"sha": "2471c01e3f3d0f4f20aef0439a95b56cc847d306", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4b87f5edb3b5b0442a5fbe887bfc85068b6a4ef/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b87f5edb3b5b0442a5fbe887bfc85068b6a4ef/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=e4b87f5edb3b5b0442a5fbe887bfc85068b6a4ef", "patch": "@@ -425,7 +425,7 @@ impl<'b, 'a, 'gcx, 'tcx> Gatherer<'b, 'a, 'gcx, 'tcx> {\n                 base,\n                 elem: ProjectionElem::Field(_, _),\n             }) if match base.ty(self.builder.mir, self.builder.tcx).ty.sty {\n-                    ty::TyKind::Adt(def, _) if def.is_union() => true,\n+                    ty::Adt(def, _) if def.is_union() => true,\n                     _ => false,\n             } => base,\n             // Otherwise, lookup the place."}, {"sha": "a9c521f59a96c4aa39dfa96d76cbebe30e375d65", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4b87f5edb3b5b0442a5fbe887bfc85068b6a4ef/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b87f5edb3b5b0442a5fbe887bfc85068b6a4ef/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=e4b87f5edb3b5b0442a5fbe887bfc85068b6a4ef", "patch": "@@ -1754,7 +1754,7 @@ fn specialize<'p, 'a: 'p, 'tcx: 'a>(\n                     // they should be pointing to memory is when they are subslices of nonzero\n                     // slices\n                     let (opt_ptr, n, ty) = match value.ty.sty {\n-                        ty::TyKind::Array(t, n) => {\n+                        ty::Array(t, n) => {\n                             match value.val {\n                                 ConstValue::ByRef(ptr, alloc) => (\n                                     Some((ptr, alloc)),\n@@ -1767,7 +1767,7 @@ fn specialize<'p, 'a: 'p, 'tcx: 'a>(\n                                 ),\n                             }\n                         },\n-                        ty::TyKind::Slice(t) => {\n+                        ty::Slice(t) => {\n                             match value.val {\n                                 ConstValue::Slice(ptr, n) => (\n                                     ptr.to_ptr().ok().map(|ptr| ("}, {"sha": "7ded973701edcd37724211dc6112778a076703b8", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e4b87f5edb3b5b0442a5fbe887bfc85068b6a4ef/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b87f5edb3b5b0442a5fbe887bfc85068b6a4ef/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=e4b87f5edb3b5b0442a5fbe887bfc85068b6a4ef", "patch": "@@ -10,7 +10,7 @@ use rustc::middle::expr_use_visitor as euv;\n use rustc::middle::mem_categorization::cmt_;\n use rustc::middle::region;\n use rustc::session::Session;\n-use rustc::ty::{self, Ty, TyCtxt, TyKind};\n+use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::subst::{InternalSubsts, SubstsRef};\n use rustc::lint;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n@@ -481,7 +481,7 @@ fn check_exhaustive<'p, 'a: 'p, 'tcx: 'a>(\n             }\n             let patterns = witnesses.iter().map(|p| (**p).clone()).collect::<Vec<Pattern<'_>>>();\n             if patterns.len() < 4 {\n-                for sp in maybe_point_at_variant(cx, &scrut_ty.sty, patterns.as_slice()) {\n+                for sp in maybe_point_at_variant(cx, scrut_ty, patterns.as_slice()) {\n                     err.span_label(sp, \"not covered\");\n                 }\n             }\n@@ -498,11 +498,11 @@ fn check_exhaustive<'p, 'a: 'p, 'tcx: 'a>(\n \n fn maybe_point_at_variant(\n     cx: &mut MatchCheckCtxt<'a, 'tcx>,\n-    sty: &TyKind<'tcx>,\n+    ty: Ty<'tcx>,\n     patterns: &[Pattern<'_>],\n ) -> Vec<Span> {\n     let mut covered = vec![];\n-    if let ty::Adt(def, _) = sty {\n+    if let ty::Adt(def, _) = ty.sty {\n         // Don't point at variants that have already been covered due to other patterns to avoid\n         // visual clutter\n         for pattern in patterns {\n@@ -518,15 +518,15 @@ fn maybe_point_at_variant(\n                         .map(|field_pattern| field_pattern.pattern.clone())\n                         .collect::<Vec<_>>();\n                     covered.extend(\n-                        maybe_point_at_variant(cx, sty, subpatterns.as_slice()),\n+                        maybe_point_at_variant(cx, ty, subpatterns.as_slice()),\n                     );\n                 }\n             }\n             if let PatternKind::Leaf { subpatterns } = pk {\n                 let subpatterns = subpatterns.iter()\n                     .map(|field_pattern| field_pattern.pattern.clone())\n                     .collect::<Vec<_>>();\n-                covered.extend(maybe_point_at_variant(cx, sty, subpatterns.as_slice()));\n+                covered.extend(maybe_point_at_variant(cx, ty, subpatterns.as_slice()));\n             }\n         }\n     }"}, {"sha": "deeed9a0b9846ecc4892e66fc5de96f3c8550ea0", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e4b87f5edb3b5b0442a5fbe887bfc85068b6a4ef/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b87f5edb3b5b0442a5fbe887bfc85068b6a4ef/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=e4b87f5edb3b5b0442a5fbe887bfc85068b6a4ef", "patch": "@@ -28,6 +28,7 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![recursion_limit=\"256\"]\n \n #![deny(rust_2018_idioms)]\n+#![cfg_attr(not(stage0), deny(internal))]\n #![allow(explicit_outlives_requirements)]\n \n #[macro_use] extern crate log;"}, {"sha": "572f7133cad84eb48190563dba2c3e491d97d006", "filename": "src/librustc_mir/lints.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4b87f5edb3b5b0442a5fbe887bfc85068b6a4ef/src%2Flibrustc_mir%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b87f5edb3b5b0442a5fbe887bfc85068b6a4ef/src%2Flibrustc_mir%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flints.rs?ref=e4b87f5edb3b5b0442a5fbe887bfc85068b6a4ef", "patch": "@@ -4,7 +4,7 @@ use rustc::hir::intravisit::FnKind;\n use rustc::hir::map::blocks::FnLikeNode;\n use rustc::lint::builtin::UNCONDITIONAL_RECURSION;\n use rustc::mir::{self, Mir, TerminatorKind};\n-use rustc::ty::{AssociatedItem, AssociatedItemContainer, Instance, TyCtxt, TyKind};\n+use rustc::ty::{self, AssociatedItem, AssociatedItemContainer, Instance, TyCtxt};\n use rustc::ty::subst::InternalSubsts;\n \n pub fn check(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n@@ -86,7 +86,7 @@ fn check_fn_for_unconditional_recursion(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 TerminatorKind::Call { ref func, .. } => {\n                     let func_ty = func.ty(mir, tcx);\n \n-                    if let TyKind::FnDef(fn_def_id, substs) = func_ty.sty {\n+                    if let ty::FnDef(fn_def_id, substs) = func_ty.sty {\n                         let (call_fn_id, call_substs) =\n                             if let Some(instance) = Instance::resolve(tcx,\n                                                                         param_env,"}, {"sha": "8187a81f0edab4c3f1731ea423f9d82189956b07", "filename": "src/librustc_mir/transform/instcombine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4b87f5edb3b5b0442a5fbe887bfc85068b6a4ef/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b87f5edb3b5b0442a5fbe887bfc85068b6a4ef/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs?ref=e4b87f5edb3b5b0442a5fbe887bfc85068b6a4ef", "patch": "@@ -2,7 +2,7 @@\n \n use rustc::mir::{Constant, Location, Place, PlaceBase, Mir, Operand, ProjectionElem, Rvalue, Local};\n use rustc::mir::visit::{MutVisitor, Visitor};\n-use rustc::ty::{TyCtxt, TyKind};\n+use rustc::ty::{self, TyCtxt};\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n use rustc_data_structures::indexed_vec::Idx;\n use std::mem;\n@@ -90,7 +90,7 @@ impl<'b, 'a, 'tcx> Visitor<'tcx> for OptimizationFinder<'b, 'a, 'tcx> {\n \n         if let Rvalue::Len(ref place) = *rvalue {\n             let place_ty = place.ty(&self.mir.local_decls, self.tcx).ty;\n-            if let TyKind::Array(_, len) = place_ty.sty {\n+            if let ty::Array(_, len) = place_ty.sty {\n                 let span = self.mir.source_info(location).span;\n                 let ty = self.tcx.types.usize;\n                 let constant = Constant { span, ty, literal: len, user_ty: None };"}, {"sha": "fd9d6bb5760b1b0646cf97ece7cda0594b9d9a1a", "filename": "src/librustc_mir/transform/lower_128bit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e4b87f5edb3b5b0442a5fbe887bfc85068b6a4ef/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b87f5edb3b5b0442a5fbe887bfc85068b6a4ef/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs?ref=e4b87f5edb3b5b0442a5fbe887bfc85068b6a4ef", "patch": "@@ -3,7 +3,7 @@\n use rustc::hir::def_id::DefId;\n use rustc::middle::lang_items::LangItem;\n use rustc::mir::*;\n-use rustc::ty::{List, Ty, TyCtxt, TyKind};\n+use rustc::ty::{self, List, Ty, TyCtxt};\n use rustc_data_structures::indexed_vec::{Idx};\n use crate::transform::{MirPass, MirSource};\n \n@@ -183,8 +183,8 @@ impl RhsKind {\n \n fn sign_of_128bit(ty: Ty<'_>) -> Option<bool> {\n     match ty.sty {\n-        TyKind::Int(syntax::ast::IntTy::I128) => Some(true),\n-        TyKind::Uint(syntax::ast::UintTy::U128) => Some(false),\n+        ty::Int(syntax::ast::IntTy::I128) => Some(true),\n+        ty::Uint(syntax::ast::UintTy::U128) => Some(false),\n         _ => None,\n     }\n }"}]}