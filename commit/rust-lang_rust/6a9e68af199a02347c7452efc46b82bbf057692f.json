{"sha": "6a9e68af199a02347c7452efc46b82bbf057692f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhOWU2OGFmMTk5YTAyMzQ3Yzc0NTJlZmM0NmI4MmJiZjA1NzY5MmY=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-05-11T10:16:26Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-05-30T19:10:54Z"}, "message": "Expand dynamic drop tests for cases in #47949", "tree": {"sha": "4076b32e9b8b7f65cfa7182799f5586743a3089a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4076b32e9b8b7f65cfa7182799f5586743a3089a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a9e68af199a02347c7452efc46b82bbf057692f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a9e68af199a02347c7452efc46b82bbf057692f", "html_url": "https://github.com/rust-lang/rust/commit/6a9e68af199a02347c7452efc46b82bbf057692f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a9e68af199a02347c7452efc46b82bbf057692f/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aee7012fab26d5e307a2fe767e4e7c847c5a45ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/aee7012fab26d5e307a2fe767e4e7c847c5a45ee", "html_url": "https://github.com/rust-lang/rust/commit/aee7012fab26d5e307a2fe767e4e7c847c5a45ee"}], "stats": {"total": 92, "additions": 91, "deletions": 1}, "files": [{"sha": "eb1a3f3a9f9cbed7f587c9a1dcfc41f726acf78f", "filename": "src/test/run-pass/drop/dynamic-drop.rs", "status": "modified", "additions": 91, "deletions": 1, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/6a9e68af199a02347c7452efc46b82bbf057692f/src%2Ftest%2Frun-pass%2Fdrop%2Fdynamic-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a9e68af199a02347c7452efc46b82bbf057692f/src%2Ftest%2Frun-pass%2Fdrop%2Fdynamic-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop%2Fdynamic-drop.rs?ref=6a9e68af199a02347c7452efc46b82bbf057692f", "patch": "@@ -41,7 +41,7 @@ impl Allocator {\n             data: RefCell::new(vec![])\n         }\n     }\n-    fn alloc(&self) -> Ptr {\n+    fn alloc(&self) -> Ptr<'_> {\n         self.cur_ops.set(self.cur_ops.get() + 1);\n \n         if self.cur_ops.get() == self.failing_op {\n@@ -53,6 +53,20 @@ impl Allocator {\n         data.push(true);\n         Ptr(addr, self)\n     }\n+    // FIXME(#47949) Any use of this indicates a bug in rustc: we should never\n+    // be leaking values in the cases here.\n+    //\n+    // Creates a `Ptr<'_>` and checks that the allocated value is leaked if the\n+    // `failing_op` is in the list of exception.\n+    fn alloc_leaked(&self, exceptions: Vec<usize>) -> Ptr<'_> {\n+        let ptr = self.alloc();\n+\n+        if exceptions.iter().any(|operation| *operation == self.failing_op) {\n+            let mut data = self.data.borrow_mut();\n+            data[ptr.0] = false;\n+        }\n+        ptr\n+    }\n }\n \n struct Ptr<'a>(usize, &'a Allocator);\n@@ -255,6 +269,72 @@ fn subslice_pattern_reassign(a: &Allocator) {\n     let[_, _y..] = ar;\n }\n \n+fn panic_after_return(a: &Allocator) -> Ptr<'_> {\n+    // Panic in the drop of `p` or `q` can leak\n+    let exceptions = vec![8, 9];\n+    a.alloc();\n+    let p = a.alloc();\n+    {\n+        a.alloc();\n+        let p = a.alloc();\n+        // FIXME (#47949) We leak values when we panic in a destructor after\n+        // evaluating an expression with `rustc_mir::build::Builder::into`.\n+        a.alloc_leaked(exceptions)\n+    }\n+}\n+\n+fn panic_after_return_expr(a: &Allocator) -> Ptr<'_> {\n+    // Panic in the drop of `p` or `q` can leak\n+    let exceptions = vec![8, 9];\n+    a.alloc();\n+    let p = a.alloc();\n+    {\n+        a.alloc();\n+        let q = a.alloc();\n+        // FIXME (#47949)\n+        return a.alloc_leaked(exceptions);\n+    }\n+}\n+\n+fn panic_after_init(a: &Allocator) {\n+    // Panic in the drop of `r` can leak\n+    let exceptions = vec![8];\n+    a.alloc();\n+    let p = a.alloc();\n+    let q = {\n+        a.alloc();\n+        let r = a.alloc();\n+        // FIXME (#47949)\n+        a.alloc_leaked(exceptions)\n+    };\n+}\n+\n+fn panic_after_init_temp(a: &Allocator) {\n+    // Panic in the drop of `r` can leak\n+    let exceptions = vec![8];\n+    a.alloc();\n+    let p = a.alloc();\n+    {\n+        a.alloc();\n+        let r = a.alloc();\n+        // FIXME (#47949)\n+        a.alloc_leaked(exceptions)\n+    };\n+}\n+\n+fn panic_after_init_by_loop(a: &Allocator) {\n+    // Panic in the drop of `r` can leak\n+    let exceptions = vec![8];\n+    a.alloc();\n+    let p = a.alloc();\n+    let q = loop {\n+        a.alloc();\n+        let r = a.alloc();\n+        // FIXME (#47949)\n+        break a.alloc_leaked(exceptions);\n+    };\n+}\n+\n fn run_test<F>(mut f: F)\n     where F: FnMut(&Allocator)\n {\n@@ -342,5 +422,15 @@ fn main() {\n     run_test(|a| slice_pattern_reassign(a));\n     run_test(|a| subslice_pattern_reassign(a));\n \n+    run_test(|a| {\n+        panic_after_return(a);\n+    });\n+    run_test(|a| {\n+        panic_after_return_expr(a);\n+    });\n+    run_test(|a| panic_after_init(a));\n+    run_test(|a| panic_after_init_temp(a));\n+    run_test(|a| panic_after_init_by_loop(a));\n+\n     run_test_nopanic(|a| union1(a));\n }"}]}