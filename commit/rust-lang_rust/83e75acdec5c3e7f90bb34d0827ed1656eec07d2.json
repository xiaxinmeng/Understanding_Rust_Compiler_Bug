{"sha": "83e75acdec5c3e7f90bb34d0827ed1656eec07d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzZTc1YWNkZWM1YzNlN2Y5MGJiMzRkMDgyN2VkMTY1NmVlYzA3ZDI=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-08-14T21:46:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-14T21:46:45Z"}, "message": "Rollup merge of #75195 - ssomers:btree_split_up_into_kv_mut, r=Mark-Simulacrum\n\nBTreeMap: purge innocent use of into_kv_mut\n\nReplace the use of `into_kv_mut` into more precise calls. This makes more sense if you know that the single remaining use of `into_kv_mut` is in fact evil and can be trialled in court (#75200) and sent to a correction facility (#73971).\n\nNo real performance difference reported (but functions that might benefit a tiny constant bit like `BTreeMap::get_mut` aren't benchmarked):\n```\nbenchcmp old new --threshold 5\n name                       old ns/iter  new ns/iter  diff ns/iter  diff %  speedup\n btree::map::clone_fat_100  63,073       59,256             -3,817  -6.05%   x 1.06\n btree::map::iter_100       3,514        3,235                -279  -7.94%   x 1.09\n```", "tree": {"sha": "9d74cf535adbc513409209b4a2c30c3675248ba7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d74cf535adbc513409209b4a2c30c3675248ba7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83e75acdec5c3e7f90bb34d0827ed1656eec07d2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfNwZGCRBK7hj4Ov3rIwAAdHIIAIiR7YWqxK/CbrpJED+dQHwO\n96AVR7LFR7A3eAGEoWdl8WK1BC9/hYP2GRh13O/j4+q8l8Jr/e/sapYlZHZ/Apeo\ngrIDcFIIZu9sSBQPCOkz4yTT4mlcdKNAXjIrXTORs9SbDS348tOxgsc55fM4+Eot\n9PJqdUUYrXBEJVTatwiWW8LH8FSYYsQulzA3DK49U8yXZq7Wp/7xUKQ29za+hKK7\nY9WY3KNG3gP4gxj/M0P7ut+X54uoSuA0x4cRRXh+Q0mWudVrVPY8l/kNepEWLuPV\nnGUHoc/o8yg4uRQEz8/AKvDvnQj8soz+eBdSbqfxsIR6Ev2BQxw2f51LCzg6Aaw=\n=V63N\n-----END PGP SIGNATURE-----\n", "payload": "tree 9d74cf535adbc513409209b4a2c30c3675248ba7\nparent 5b61230303824f34a25c388f6c6255d10c4366f8\nparent 3a02e06002e3c34cd63c1237d0998414c56f7efc\nauthor Tyler Mandry <tmandry@gmail.com> 1597441605 -0700\ncommitter GitHub <noreply@github.com> 1597441605 -0700\n\nRollup merge of #75195 - ssomers:btree_split_up_into_kv_mut, r=Mark-Simulacrum\n\nBTreeMap: purge innocent use of into_kv_mut\n\nReplace the use of `into_kv_mut` into more precise calls. This makes more sense if you know that the single remaining use of `into_kv_mut` is in fact evil and can be trialled in court (#75200) and sent to a correction facility (#73971).\n\nNo real performance difference reported (but functions that might benefit a tiny constant bit like `BTreeMap::get_mut` aren't benchmarked):\n```\nbenchcmp old new --threshold 5\n name                       old ns/iter  new ns/iter  diff ns/iter  diff %  speedup\n btree::map::clone_fat_100  63,073       59,256             -3,817  -6.05%   x 1.06\n btree::map::iter_100       3,514        3,235                -279  -7.94%   x 1.09\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83e75acdec5c3e7f90bb34d0827ed1656eec07d2", "html_url": "https://github.com/rust-lang/rust/commit/83e75acdec5c3e7f90bb34d0827ed1656eec07d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83e75acdec5c3e7f90bb34d0827ed1656eec07d2/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b61230303824f34a25c388f6c6255d10c4366f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b61230303824f34a25c388f6c6255d10c4366f8", "html_url": "https://github.com/rust-lang/rust/commit/5b61230303824f34a25c388f6c6255d10c4366f8"}, {"sha": "3a02e06002e3c34cd63c1237d0998414c56f7efc", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a02e06002e3c34cd63c1237d0998414c56f7efc", "html_url": "https://github.com/rust-lang/rust/commit/3a02e06002e3c34cd63c1237d0998414c56f7efc"}], "stats": {"total": 28, "additions": 19, "deletions": 9}, "files": [{"sha": "8e800f48c69de5786cc33b6ec2a7c7ddf5f4740c", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/83e75acdec5c3e7f90bb34d0827ed1656eec07d2/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83e75acdec5c3e7f90bb34d0827ed1656eec07d2/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=83e75acdec5c3e7f90bb34d0827ed1656eec07d2", "patch": "@@ -245,7 +245,7 @@ where\n     fn replace(&mut self, key: K) -> Option<K> {\n         let root = Self::ensure_is_owned(&mut self.root);\n         match search::search_tree::<marker::Mut<'_>, K, (), K>(root.node_as_mut(), &key) {\n-            Found(handle) => Some(mem::replace(handle.into_kv_mut().0, key)),\n+            Found(handle) => Some(mem::replace(handle.into_key_mut(), key)),\n             GoDown(handle) => {\n                 VacantEntry { key, handle, length: &mut self.length, _marker: PhantomData }\n                     .insert(());\n@@ -811,7 +811,7 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     {\n         let root_node = self.root.as_mut()?.node_as_mut();\n         match search::search_tree(root_node, key) {\n-            Found(handle) => Some(handle.into_kv_mut().1),\n+            Found(handle) => Some(handle.into_val_mut()),\n             GoDown(_) => None,\n         }\n     }\n@@ -2748,7 +2748,7 @@ impl<'a, K: Ord, V> OccupiedEntry<'a, K, V> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn into_mut(self) -> &'a mut V {\n-        self.handle.into_kv_mut().1\n+        self.handle.into_val_mut()\n     }\n \n     /// Sets the value of the entry with the `OccupiedEntry`'s key,"}, {"sha": "b0741a2c00dadf987e100d9d06048117da4e4474", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/83e75acdec5c3e7f90bb34d0827ed1656eec07d2/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83e75acdec5c3e7f90bb34d0827ed1656eec07d2/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=83e75acdec5c3e7f90bb34d0827ed1656eec07d2", "patch": "@@ -1067,6 +1067,16 @@ impl<'a, K: 'a, V: 'a, NodeType> Handle<NodeRef<marker::Immut<'a>, K, V, NodeTyp\n }\n \n impl<'a, K: 'a, V: 'a, NodeType> Handle<NodeRef<marker::Mut<'a>, K, V, NodeType>, marker::KV> {\n+    pub fn into_key_mut(self) -> &'a mut K {\n+        let keys = self.node.into_key_slice_mut();\n+        unsafe { keys.get_unchecked_mut(self.idx) }\n+    }\n+\n+    pub fn into_val_mut(self) -> &'a mut V {\n+        let vals = self.node.into_val_slice_mut();\n+        unsafe { vals.get_unchecked_mut(self.idx) }\n+    }\n+\n     pub fn into_kv_mut(self) -> (&'a mut K, &'a mut V) {\n         unsafe {\n             let (keys, vals) = self.node.into_slices_mut();\n@@ -1261,8 +1271,8 @@ impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::\n         unsafe {\n             let (k, v, edge) = self.reborrow_mut().left_edge().descend().pop();\n \n-            let k = mem::replace(self.reborrow_mut().into_kv_mut().0, k);\n-            let v = mem::replace(self.reborrow_mut().into_kv_mut().1, v);\n+            let k = mem::replace(self.kv_mut().0, k);\n+            let v = mem::replace(self.kv_mut().1, v);\n \n             match self.reborrow_mut().right_edge().descend().force() {\n                 ForceResult::Leaf(mut leaf) => leaf.push_front(k, v),\n@@ -1278,8 +1288,8 @@ impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::\n         unsafe {\n             let (k, v, edge) = self.reborrow_mut().right_edge().descend().pop_front();\n \n-            let k = mem::replace(self.reborrow_mut().into_kv_mut().0, k);\n-            let v = mem::replace(self.reborrow_mut().into_kv_mut().1, v);\n+            let k = mem::replace(self.kv_mut().0, k);\n+            let v = mem::replace(self.kv_mut().1, v);\n \n             match self.reborrow_mut().left_edge().descend().force() {\n                 ForceResult::Leaf(mut leaf) => leaf.push(k, v),\n@@ -1307,7 +1317,7 @@ impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::\n                 let left_kv = left_node.reborrow_mut().into_kv_pointers_mut();\n                 let right_kv = right_node.reborrow_mut().into_kv_pointers_mut();\n                 let parent_kv = {\n-                    let kv = self.reborrow_mut().into_kv_mut();\n+                    let kv = self.kv_mut();\n                     (kv.0 as *mut K, kv.1 as *mut V)\n                 };\n \n@@ -1364,7 +1374,7 @@ impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::\n                 let left_kv = left_node.reborrow_mut().into_kv_pointers_mut();\n                 let right_kv = right_node.reborrow_mut().into_kv_pointers_mut();\n                 let parent_kv = {\n-                    let kv = self.reborrow_mut().into_kv_mut();\n+                    let kv = self.kv_mut();\n                     (kv.0 as *mut K, kv.1 as *mut V)\n                 };\n "}]}