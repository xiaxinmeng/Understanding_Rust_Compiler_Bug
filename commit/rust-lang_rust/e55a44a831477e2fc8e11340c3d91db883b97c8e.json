{"sha": "e55a44a831477e2fc8e11340c3d91db883b97c8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1NWE0NGE4MzE0NzdlMmZjOGUxMTM0MGMzZDkxZGI4ODNiOTdjOGU=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-11-14T16:49:36Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-11-14T16:51:09Z"}, "message": "Use shorthand record syntax when renaming struct initializer field", "tree": {"sha": "db334060759bcc4252689e305a466ec3dd2b5d8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db334060759bcc4252689e305a466ec3dd2b5d8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e55a44a831477e2fc8e11340c3d91db883b97c8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e55a44a831477e2fc8e11340c3d91db883b97c8e", "html_url": "https://github.com/rust-lang/rust/commit/e55a44a831477e2fc8e11340c3d91db883b97c8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e55a44a831477e2fc8e11340c3d91db883b97c8e/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99fa139beab0c03583c676554c3d807525f602af", "url": "https://api.github.com/repos/rust-lang/rust/commits/99fa139beab0c03583c676554c3d807525f602af", "html_url": "https://github.com/rust-lang/rust/commit/99fa139beab0c03583c676554c3d807525f602af"}], "stats": {"total": 87, "additions": 68, "deletions": 19}, "files": [{"sha": "b3ade20ef0a278e54ffd52647b11899718326a8e", "filename": "crates/ide/src/references/rename.rs", "status": "modified", "additions": 45, "deletions": 4, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/e55a44a831477e2fc8e11340c3d91db883b97c8e/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55a44a831477e2fc8e11340c3d91db883b97c8e/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences%2Frename.rs?ref=e55a44a831477e2fc8e11340c3d91db883b97c8e", "patch": "@@ -106,7 +106,11 @@ fn find_module_at_offset(\n     Some(module)\n }\n \n-fn source_edit_from_reference(reference: Reference, new_name: &str) -> SourceFileEdit {\n+fn source_edit_from_reference(\n+    sema: &Semantics<RootDatabase>,\n+    reference: Reference,\n+    new_name: &str,\n+) -> SourceFileEdit {\n     let mut replacement_text = String::new();\n     let file_id = reference.file_range.file_id;\n     let range = match reference.kind {\n@@ -122,6 +126,22 @@ fn source_edit_from_reference(reference: Reference, new_name: &str) -> SourceFil\n             replacement_text.push_str(new_name);\n             TextRange::new(reference.file_range.range.end(), reference.file_range.range.end())\n         }\n+        ReferenceKind::RecordExprField => {\n+            replacement_text.push_str(new_name);\n+            let mut range = reference.file_range.range;\n+            if let Some(field_expr) = syntax::algo::find_node_at_range::<ast::RecordExprField>(\n+                sema.parse(file_id).syntax(),\n+                reference.file_range.range,\n+            ) {\n+                // use shorthand initializer if we were to write foo: foo\n+                if let Some(name) = field_expr.expr().and_then(|e| e.name_ref()) {\n+                    if &name.to_string() == new_name {\n+                        range = field_expr.syntax().text_range();\n+                    }\n+                }\n+            }\n+            range\n+        }\n         _ => {\n             replacement_text.push_str(new_name);\n             reference.file_range.range\n@@ -170,7 +190,7 @@ fn rename_mod(\n     let ref_edits = refs\n         .references\n         .into_iter()\n-        .map(|reference| source_edit_from_reference(reference, new_name));\n+        .map(|reference| source_edit_from_reference(sema, reference, new_name));\n     source_file_edits.extend(ref_edits);\n \n     Ok(RangeInfo::new(range, SourceChange::from_edits(source_file_edits, file_system_edits)))\n@@ -211,7 +231,7 @@ fn rename_to_self(\n \n     let mut edits = usages\n         .into_iter()\n-        .map(|reference| source_edit_from_reference(reference, \"self\"))\n+        .map(|reference| source_edit_from_reference(sema, reference, \"self\"))\n         .collect::<Vec<_>>();\n \n     edits.push(SourceFileEdit {\n@@ -300,7 +320,7 @@ fn rename_reference(\n \n     let edit = refs\n         .into_iter()\n-        .map(|reference| source_edit_from_reference(reference, new_name))\n+        .map(|reference| source_edit_from_reference(sema, reference, new_name))\n         .collect::<Vec<_>>();\n \n     if edit.is_empty() {\n@@ -1094,6 +1114,27 @@ impl Foo {\n         foo.i\n     }\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_initializer_use_field_init_shorthand() {\n+        check(\n+            \"bar\",\n+            r#\"\n+struct Foo { i<|>: i32 }\n+\n+fn foo(bar: i32) -> Foo {\n+    Foo { i: bar }\n+}\n+\"#,\n+            r#\"\n+struct Foo { bar: i32 }\n+\n+fn foo(bar: i32) -> Foo {\n+    Foo { bar }\n+}\n \"#,\n         );\n     }"}, {"sha": "4248606c8a35429fca7fe30e721c9553373fbb3c", "filename": "crates/ide_db/src/search.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e55a44a831477e2fc8e11340c3d91db883b97c8e/crates%2Fide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55a44a831477e2fc8e11340c3d91db883b97c8e/crates%2Fide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsearch.rs?ref=e55a44a831477e2fc8e11340c3d91db883b97c8e", "patch": "@@ -30,6 +30,7 @@ pub enum ReferenceKind {\n     FieldShorthandForField,\n     FieldShorthandForLocal,\n     StructLiteral,\n+    RecordExprField,\n     Other,\n }\n \n@@ -278,12 +279,15 @@ impl<'a> FindUsages<'a> {\n     ) -> bool {\n         match NameRefClass::classify(self.sema, &name_ref) {\n             Some(NameRefClass::Definition(def)) if &def == self.def => {\n-                let kind = if is_record_lit_name_ref(&name_ref) || is_call_expr_name_ref(&name_ref)\n-                {\n-                    ReferenceKind::StructLiteral\n-                } else {\n-                    ReferenceKind::Other\n-                };\n+                let kind =\n+                    if name_ref.syntax().parent().and_then(ast::RecordExprField::cast).is_some() {\n+                        ReferenceKind::RecordExprField\n+                    } else if is_record_lit_name_ref(&name_ref) || is_call_expr_name_ref(&name_ref)\n+                    {\n+                        ReferenceKind::StructLiteral\n+                    } else {\n+                        ReferenceKind::Other\n+                    };\n \n                 let reference = Reference {\n                     file_range: self.sema.original_range(name_ref.syntax()),"}, {"sha": "e4a9b945c98f0864ccf825d105c1495b53614b16", "filename": "crates/syntax/src/ast/expr_ext.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e55a44a831477e2fc8e11340c3d91db883b97c8e/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55a44a831477e2fc8e11340c3d91db883b97c8e/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs?ref=e55a44a831477e2fc8e11340c3d91db883b97c8e", "patch": "@@ -22,6 +22,18 @@ impl ast::Expr {\n             _ => false,\n         }\n     }\n+\n+    pub fn name_ref(&self) -> Option<ast::NameRef> {\n+        if let ast::Expr::PathExpr(expr) = self {\n+            let path = expr.path()?;\n+            let segment = path.segment()?;\n+            let name_ref = segment.name_ref()?;\n+            if path.qualifier().is_none() {\n+                return Some(name_ref);\n+            }\n+        }\n+        None\n+    }\n }\n \n #[derive(Debug, Clone, PartialEq, Eq)]"}, {"sha": "b70b840b81abd91b1cec0ee5469817a8f9b50a5d", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e55a44a831477e2fc8e11340c3d91db883b97c8e/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55a44a831477e2fc8e11340c3d91db883b97c8e/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=e55a44a831477e2fc8e11340c3d91db883b97c8e", "patch": "@@ -203,15 +203,7 @@ impl ast::RecordExprField {\n         if let Some(name_ref) = self.name_ref() {\n             return Some(name_ref);\n         }\n-        if let Some(ast::Expr::PathExpr(expr)) = self.expr() {\n-            let path = expr.path()?;\n-            let segment = path.segment()?;\n-            let name_ref = segment.name_ref()?;\n-            if path.qualifier().is_none() {\n-                return Some(name_ref);\n-            }\n-        }\n-        None\n+        self.expr()?.name_ref()\n     }\n }\n "}]}