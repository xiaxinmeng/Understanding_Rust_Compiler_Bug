{"sha": "0162d603b335e7f08b86cdddbb51197202a5a79a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxNjJkNjAzYjMzNWU3ZjA4Yjg2Y2RkZGJiNTExOTcyMDJhNWE3OWE=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2021-01-01T22:14:22Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2021-01-24T20:28:30Z"}, "message": "Factor or-pattern expansion", "tree": {"sha": "7a65634df17ae7402b295c655a3725cfc37921b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a65634df17ae7402b295c655a3725cfc37921b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0162d603b335e7f08b86cdddbb51197202a5a79a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0162d603b335e7f08b86cdddbb51197202a5a79a", "html_url": "https://github.com/rust-lang/rust/commit/0162d603b335e7f08b86cdddbb51197202a5a79a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0162d603b335e7f08b86cdddbb51197202a5a79a/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "293af417903b1a718795e60a1b6de0dea8fc4af0", "url": "https://api.github.com/repos/rust-lang/rust/commits/293af417903b1a718795e60a1b6de0dea8fc4af0", "html_url": "https://github.com/rust-lang/rust/commit/293af417903b1a718795e60a1b6de0dea8fc4af0"}], "stats": {"total": 95, "additions": 58, "deletions": 37}, "files": [{"sha": "d31b5f104e5a95a4a659e5e925fa8fc0fdcc7849", "filename": "compiler/rustc_mir_build/src/thir/pattern/usefulness.rs", "status": "modified", "additions": 36, "deletions": 24, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/0162d603b335e7f08b86cdddbb51197202a5a79a/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0162d603b335e7f08b86cdddbb51197202a5a79a/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs?ref=0162d603b335e7f08b86cdddbb51197202a5a79a", "patch": "@@ -385,6 +385,27 @@ impl<'tcx> Pat<'tcx> {\n     pub(super) fn is_wildcard(&self) -> bool {\n         matches!(*self.kind, PatKind::Binding { subpattern: None, .. } | PatKind::Wild)\n     }\n+\n+    fn is_or_pat(&self) -> bool {\n+        matches!(*self.kind, PatKind::Or { .. })\n+    }\n+\n+    /// Recursively expand this pattern into its subpatterns. Only useful for or-patterns.\n+    fn expand_or_pat(&self) -> Vec<&Self> {\n+        fn expand<'p, 'tcx>(pat: &'p Pat<'tcx>, vec: &mut Vec<&'p Pat<'tcx>>) {\n+            if let PatKind::Or { pats } = pat.kind.as_ref() {\n+                for pat in pats {\n+                    expand(pat, vec);\n+                }\n+            } else {\n+                vec.push(pat)\n+            }\n+        }\n+\n+        let mut pats = Vec::new();\n+        expand(self, &mut pats);\n+        pats\n+    }\n }\n \n /// A row of a matrix. Rows of len 1 are very common, which is why `SmallVec[_; 2]`\n@@ -425,23 +446,14 @@ impl<'p, 'tcx> PatStack<'p, 'tcx> {\n         self.pats.iter().copied()\n     }\n \n-    // If the first pattern is an or-pattern, expand this pattern. Otherwise, return `None`.\n-    fn expand_or_pat(&self) -> Option<Vec<Self>> {\n-        if self.is_empty() {\n-            None\n-        } else if let PatKind::Or { pats } = &*self.head().kind {\n-            Some(\n-                pats.iter()\n-                    .map(|pat| {\n-                        let mut new_patstack = PatStack::from_pattern(pat);\n-                        new_patstack.pats.extend_from_slice(&self.pats[1..]);\n-                        new_patstack\n-                    })\n-                    .collect(),\n-            )\n-        } else {\n-            None\n-        }\n+    // Recursively expand the first pattern into its subpatterns. Only useful if the pattern is an\n+    // or-pattern. Panics if `self` is empty.\n+    fn expand_or_pat<'a>(&'a self) -> impl Iterator<Item = PatStack<'p, 'tcx>> + Captures<'a> {\n+        self.head().expand_or_pat().into_iter().map(move |pat| {\n+            let mut new_patstack = PatStack::from_pattern(pat);\n+            new_patstack.pats.extend_from_slice(&self.pats[1..]);\n+            new_patstack\n+        })\n     }\n \n     /// This computes `S(self.head_ctor(), self)`. See top of the file for explanations.\n@@ -508,13 +520,12 @@ impl<'p, 'tcx> Matrix<'p, 'tcx> {\n         self.patterns.get(0).map(|r| r.len())\n     }\n \n-    /// Pushes a new row to the matrix. If the row starts with an or-pattern, this expands it.\n+    /// Pushes a new row to the matrix. If the row starts with an or-pattern, this recursively\n+    /// expands it.\n     fn push(&mut self, row: PatStack<'p, 'tcx>) {\n-        if let Some(rows) = row.expand_or_pat() {\n-            for row in rows {\n-                // We recursively expand the or-patterns of the new rows.\n-                // This is necessary as we might have `0 | (1 | 2)` or e.g., `x @ 0 | x @ (1 | 2)`.\n-                self.push(row)\n+        if !row.is_empty() && row.head().is_or_pat() {\n+            for row in row.expand_or_pat() {\n+                self.patterns.push(row);\n             }\n         } else {\n             self.patterns.push(row);\n@@ -968,8 +979,9 @@ fn is_useful<'p, 'tcx>(\n     let pcx = PatCtxt { cx, ty, span: v.head().span, is_top_level };\n \n     // If the first pattern is an or-pattern, expand it.\n-    let ret = if let Some(vs) = v.expand_or_pat() {\n+    let ret = if v.head().is_or_pat() {\n         debug!(\"expanding or-pattern\");\n+        let vs: Vec<_> = v.expand_or_pat().collect();\n         let subspans: Vec<_> = vs.iter().map(|v| v.head().span).collect();\n         // We expand the or pattern, trying each of its branches in turn and keeping careful track\n         // of possible unreachable sub-branches."}, {"sha": "9718396ed4822acfe35f11a9c316e90650e907b7", "filename": "src/test/ui/or-patterns/exhaustiveness-unreachable-pattern.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0162d603b335e7f08b86cdddbb51197202a5a79a/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-unreachable-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0162d603b335e7f08b86cdddbb51197202a5a79a/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-unreachable-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-unreachable-pattern.rs?ref=0162d603b335e7f08b86cdddbb51197202a5a79a", "patch": "@@ -53,8 +53,11 @@ fn main() {\n         _ => {}\n     }\n     match 0 {\n+        // We get two errors because recursive or-pattern expansion means we don't notice the two\n+        // errors span a whole pattern. This could be better but doesn't matter much\n         0 | (0 | 0) => {}\n         //~^ ERROR unreachable\n+        //~| ERROR unreachable\n         _ => {}\n     }\n     match None {"}, {"sha": "901a71885eb861c24174494c6c24f4792d7993ba", "filename": "src/test/ui/or-patterns/exhaustiveness-unreachable-pattern.stderr", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0162d603b335e7f08b86cdddbb51197202a5a79a/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-unreachable-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0162d603b335e7f08b86cdddbb51197202a5a79a/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-unreachable-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-unreachable-pattern.stderr?ref=0162d603b335e7f08b86cdddbb51197202a5a79a", "patch": "@@ -83,71 +83,77 @@ LL |         (0 | 1) | 1 => {}\n    |                   ^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:56:14\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:58:14\n    |\n LL |         0 | (0 | 0) => {}\n-   |              ^^^^^\n+   |              ^\n+\n+error: unreachable pattern\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:58:18\n+   |\n+LL |         0 | (0 | 0) => {}\n+   |                  ^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:63:13\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:66:13\n    |\n LL | /             Some(\n LL | |                 0 | 0) => {}\n    | |______________________^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:69:15\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:72:15\n    |\n LL |             | 0\n    |               ^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:71:15\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:74:15\n    |\n LL |             | 0] => {}\n    |               ^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:79:10\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:82:10\n    |\n LL |         [1\n    |          ^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:91:10\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:94:10\n    |\n LL |         [true\n    |          ^^^^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:98:36\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:101:36\n    |\n LL |         (true | false, None | Some(true\n    |                                    ^^^^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:114:14\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:117:14\n    |\n LL |         Some(0\n    |              ^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:133:19\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:136:19\n    |\n LL |                 | false) => {}\n    |                   ^^^^^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:141:15\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:144:15\n    |\n LL |             | true) => {}\n    |               ^^^^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:147:15\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:150:15\n    |\n LL |             | true,\n    |               ^^^^\n \n-error: aborting due to 24 previous errors\n+error: aborting due to 25 previous errors\n "}]}