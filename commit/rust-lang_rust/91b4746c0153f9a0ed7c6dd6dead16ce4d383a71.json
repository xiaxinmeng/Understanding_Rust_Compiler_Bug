{"sha": "91b4746c0153f9a0ed7c6dd6dead16ce4d383a71", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxYjQ3NDZjMDE1M2Y5YTBlZDdjNmRkNmRlYWQxNmNlNGQzODNhNzE=", "commit": {"author": {"name": "vlakreeh", "email": "zeb@zebulon.dev", "date": "2020-09-29T22:22:09Z"}, "committer": {"name": "vlakreeh", "email": "zeb@zebulon.dev", "date": "2020-09-29T22:22:09Z"}, "message": "Add ability to specify ResolvedAssist by label", "tree": {"sha": "c597271123796d9012c4b30116d71dc6798cbf68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c597271123796d9012c4b30116d71dc6798cbf68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91b4746c0153f9a0ed7c6dd6dead16ce4d383a71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91b4746c0153f9a0ed7c6dd6dead16ce4d383a71", "html_url": "https://github.com/rust-lang/rust/commit/91b4746c0153f9a0ed7c6dd6dead16ce4d383a71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91b4746c0153f9a0ed7c6dd6dead16ce4d383a71/comments", "author": {"login": "zebp", "id": 14242997, "node_id": "MDQ6VXNlcjE0MjQyOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/14242997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zebp", "html_url": "https://github.com/zebp", "followers_url": "https://api.github.com/users/zebp/followers", "following_url": "https://api.github.com/users/zebp/following{/other_user}", "gists_url": "https://api.github.com/users/zebp/gists{/gist_id}", "starred_url": "https://api.github.com/users/zebp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zebp/subscriptions", "organizations_url": "https://api.github.com/users/zebp/orgs", "repos_url": "https://api.github.com/users/zebp/repos", "events_url": "https://api.github.com/users/zebp/events{/privacy}", "received_events_url": "https://api.github.com/users/zebp/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zebp", "id": 14242997, "node_id": "MDQ6VXNlcjE0MjQyOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/14242997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zebp", "html_url": "https://github.com/zebp", "followers_url": "https://api.github.com/users/zebp/followers", "following_url": "https://api.github.com/users/zebp/following{/other_user}", "gists_url": "https://api.github.com/users/zebp/gists{/gist_id}", "starred_url": "https://api.github.com/users/zebp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zebp/subscriptions", "organizations_url": "https://api.github.com/users/zebp/orgs", "repos_url": "https://api.github.com/users/zebp/repos", "events_url": "https://api.github.com/users/zebp/events{/privacy}", "received_events_url": "https://api.github.com/users/zebp/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c84fdb8b3ede90db7aff7beaaa90014b0c5e96ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/c84fdb8b3ede90db7aff7beaaa90014b0c5e96ba", "html_url": "https://github.com/rust-lang/rust/commit/c84fdb8b3ede90db7aff7beaaa90014b0c5e96ba"}], "stats": {"total": 27, "additions": 22, "deletions": 5}, "files": [{"sha": "2b687decf3ac4a9ca2df3de8ef3cf81aecd0ecea", "filename": "crates/assists/src/tests.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/91b4746c0153f9a0ed7c6dd6dead16ce4d383a71/crates%2Fassists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b4746c0153f9a0ed7c6dd6dead16ce4d383a71/crates%2Fassists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Ftests.rs?ref=91b4746c0153f9a0ed7c6dd6dead16ce4d383a71", "patch": "@@ -15,18 +15,30 @@ pub(crate) fn with_single_file(text: &str) -> (RootDatabase, FileId) {\n \n pub(crate) fn check_assist(assist: Handler, ra_fixture_before: &str, ra_fixture_after: &str) {\n     let ra_fixture_after = trim_indent(ra_fixture_after);\n-    check(assist, ra_fixture_before, ExpectedResult::After(&ra_fixture_after));\n+    check(assist, ra_fixture_before, ExpectedResult::After(&ra_fixture_after), None);\n+}\n+\n+// There is no way to choose what assist within a group you want to test against,\n+// so this is here to allow you choose.\n+pub(crate) fn check_assist_by_label(\n+    assist: Handler,\n+    ra_fixture_before: &str,\n+    ra_fixture_after: &str,\n+    label: &str,\n+) {\n+    let ra_fixture_after = trim_indent(ra_fixture_after);\n+    check(assist, ra_fixture_before, ExpectedResult::After(&ra_fixture_after), Some(label));\n }\n \n // FIXME: instead of having a separate function here, maybe use\n // `extract_ranges` and mark the target as `<target> </target>` in the\n // fixture?\n pub(crate) fn check_assist_target(assist: Handler, ra_fixture: &str, target: &str) {\n-    check(assist, ra_fixture, ExpectedResult::Target(target));\n+    check(assist, ra_fixture, ExpectedResult::Target(target), None);\n }\n \n pub(crate) fn check_assist_not_applicable(assist: Handler, ra_fixture: &str) {\n-    check(assist, ra_fixture, ExpectedResult::NotApplicable);\n+    check(assist, ra_fixture, ExpectedResult::NotApplicable, None);\n }\n \n fn check_doc_test(assist_id: &str, before: &str, after: &str) {\n@@ -65,7 +77,7 @@ enum ExpectedResult<'a> {\n     Target(&'a str),\n }\n \n-fn check(handler: Handler, before: &str, expected: ExpectedResult) {\n+fn check(handler: Handler, before: &str, expected: ExpectedResult, assist_label: Option<&str>) {\n     let (db, file_with_caret_id, range_or_offset) = RootDatabase::with_range_or_offset(before);\n     let text_without_caret = db.file_text(file_with_caret_id).to_string();\n \n@@ -77,7 +89,12 @@ fn check(handler: Handler, before: &str, expected: ExpectedResult) {\n     let mut acc = Assists::new_resolved(&ctx);\n     handler(&mut acc, &ctx);\n     let mut res = acc.finish_resolved();\n-    let assist = res.pop();\n+\n+    let assist = match assist_label {\n+        Some(label) => res.into_iter().find(|resolved| resolved.assist.label == label),\n+        None => res.pop(),\n+    };\n+\n     match (assist, expected) {\n         (Some(assist), ExpectedResult::After(after)) => {\n             let mut source_change = assist.source_change;"}]}