{"sha": "86071aca3dd729c77d238d449d2c61b2de0b8425", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2MDcxYWNhM2RkNzI5Yzc3ZDIzOGQ0NDlkMmM2MWIyZGUwYjg0MjU=", "commit": {"author": {"name": "Masood Malekghassemi", "email": "atash@google.com", "date": "2016-04-04T19:41:05Z"}, "committer": {"name": "Masood Malekghassemi", "email": "atash@google.com", "date": "2016-04-04T19:41:05Z"}, "message": "Address nits", "tree": {"sha": "a1f77e2bb8ccb678dcdad1ad5eb19e61e00305e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1f77e2bb8ccb678dcdad1ad5eb19e61e00305e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86071aca3dd729c77d238d449d2c61b2de0b8425", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86071aca3dd729c77d238d449d2c61b2de0b8425", "html_url": "https://github.com/rust-lang/rust/commit/86071aca3dd729c77d238d449d2c61b2de0b8425", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86071aca3dd729c77d238d449d2c61b2de0b8425/comments", "author": {"login": "soltanmm-google", "id": 21180148, "node_id": "MDQ6VXNlcjIxMTgwMTQ4", "avatar_url": "https://avatars.githubusercontent.com/u/21180148?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soltanmm-google", "html_url": "https://github.com/soltanmm-google", "followers_url": "https://api.github.com/users/soltanmm-google/followers", "following_url": "https://api.github.com/users/soltanmm-google/following{/other_user}", "gists_url": "https://api.github.com/users/soltanmm-google/gists{/gist_id}", "starred_url": "https://api.github.com/users/soltanmm-google/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soltanmm-google/subscriptions", "organizations_url": "https://api.github.com/users/soltanmm-google/orgs", "repos_url": "https://api.github.com/users/soltanmm-google/repos", "events_url": "https://api.github.com/users/soltanmm-google/events{/privacy}", "received_events_url": "https://api.github.com/users/soltanmm-google/received_events", "type": "User", "site_admin": false}, "committer": {"login": "soltanmm-google", "id": 21180148, "node_id": "MDQ6VXNlcjIxMTgwMTQ4", "avatar_url": "https://avatars.githubusercontent.com/u/21180148?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soltanmm-google", "html_url": "https://github.com/soltanmm-google", "followers_url": "https://api.github.com/users/soltanmm-google/followers", "following_url": "https://api.github.com/users/soltanmm-google/following{/other_user}", "gists_url": "https://api.github.com/users/soltanmm-google/gists{/gist_id}", "starred_url": "https://api.github.com/users/soltanmm-google/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soltanmm-google/subscriptions", "organizations_url": "https://api.github.com/users/soltanmm-google/orgs", "repos_url": "https://api.github.com/users/soltanmm-google/repos", "events_url": "https://api.github.com/users/soltanmm-google/events{/privacy}", "received_events_url": "https://api.github.com/users/soltanmm-google/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcdf3d62c1bd30e896d54374f49ed80a1a1348e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcdf3d62c1bd30e896d54374f49ed80a1a1348e5", "html_url": "https://github.com/rust-lang/rust/commit/dcdf3d62c1bd30e896d54374f49ed80a1a1348e5"}], "stats": {"total": 97, "additions": 49, "deletions": 48}, "files": [{"sha": "3bf618202e9b42b1336ab844a068f94689990e86", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/86071aca3dd729c77d238d449d2c61b2de0b8425/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86071aca3dd729c77d238d449d2c61b2de0b8425/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=86071aca3dd729c77d238d449d2c61b2de0b8425", "patch": "@@ -579,6 +579,12 @@ pub fn drain_fulfillment_cx<'a,'tcx,T>(infcx: &InferCtxt<'a,'tcx>,\n     Ok(infcx.tcx.erase_regions(&result))\n }\n \n+impl<'tcx, T> InferOk<'tcx, T> {\n+    fn unit(self) -> InferOk<'tcx, ()> {\n+        InferOk { value: (), obligations: self.obligations }\n+    }\n+}\n+\n impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     pub fn projection_mode(&self) -> ProjectionMode {\n         self.projection_mode\n@@ -851,8 +857,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         debug!(\"sub_types({:?} <: {:?})\", a, b);\n         self.commit_if_ok(|_| {\n             let trace = TypeTrace::types(origin, a_is_expected, a, b);\n-            self.sub(a_is_expected, trace, &a, &b)\n-                .map(|InferOk { obligations, .. }| InferOk { value: (), obligations: obligations })\n+            self.sub(a_is_expected, trace, &a, &b).map(|ok| ok.unit())\n         })\n     }\n \n@@ -865,8 +870,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     {\n         self.commit_if_ok(|_| {\n             let trace = TypeTrace::types(origin, a_is_expected, a, b);\n-            self.equate(a_is_expected, trace, &a, &b)\n-                .map(|InferOk { obligations, .. }| InferOk { value: (), obligations: obligations })\n+            self.equate(a_is_expected, trace, &a, &b).map(|ok| ok.unit())\n         })\n     }\n \n@@ -885,8 +889,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 origin: origin,\n                 values: TraitRefs(expected_found(a_is_expected, a.clone(), b.clone()))\n             };\n-            self.equate(a_is_expected, trace, &a, &b)\n-                .map(|InferOk { obligations, .. }| InferOk { value: (), obligations: obligations })\n+            self.equate(a_is_expected, trace, &a, &b).map(|ok| ok.unit())\n         })\n     }\n \n@@ -905,8 +908,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 origin: origin,\n                 values: PolyTraitRefs(expected_found(a_is_expected, a.clone(), b.clone()))\n             };\n-            self.sub(a_is_expected, trace, &a, &b)\n-                .map(|InferOk { obligations, .. }| InferOk { value: (), obligations: obligations })\n+            self.sub(a_is_expected, trace, &a, &b).map(|ok| ok.unit())\n         })\n     }\n \n@@ -955,9 +957,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             let (ty::EquatePredicate(a, b), skol_map) =\n                 self.skolemize_late_bound_regions(predicate, snapshot);\n             let origin = TypeOrigin::EquatePredicate(span);\n-            let InferOk { obligations, .. } = mk_eqty(self, false, origin, a, b)?;\n-            self.leak_check(&skol_map, snapshot)\n-                .map(|_| InferOk { value: (), obligations: obligations })\n+            let eqty_ok = mk_eqty(self, false, origin, a, b)?;\n+            self.leak_check(&skol_map, snapshot).map(|_| eqty_ok.unit())\n         })\n     }\n "}, {"sha": "46323cdf77ee4249ba27dd99c34a1089acd852a7", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86071aca3dd729c77d238d449d2c61b2de0b8425/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86071aca3dd729c77d238d449d2c61b2de0b8425/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=86071aca3dd729c77d238d449d2c61b2de0b8425", "patch": "@@ -527,7 +527,7 @@ fn process_predicate1<'a,'tcx>(selcx: &mut SelectionContext<'a,'tcx>,\n         ty::Predicate::Equate(ref binder) => {\n             match selcx.infcx().equality_predicate(obligation.cause.span, binder) {\n                 Ok(InferOk { obligations, .. }) => {\n-                    // FIXME(#????) propagate obligations\n+                    // FIXME(#32730) propagate obligations\n                     assert!(obligations.is_empty());\n                     Ok(Some(Vec::new()))\n                 },"}, {"sha": "71eb0a227b4ed64e32d126c48ccab833f1929402", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/86071aca3dd729c77d238d449d2c61b2de0b8425/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86071aca3dd729c77d238d449d2c61b2de0b8425/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=86071aca3dd729c77d238d449d2c61b2de0b8425", "patch": "@@ -233,7 +233,7 @@ fn project_and_unify_type<'cx,'tcx>(\n     let origin = TypeOrigin::RelateOutputImplTypes(obligation.cause.span);\n     match infer::mk_eqty(infcx, true, origin, normalized_ty, obligation.predicate.ty) {\n         Ok(InferOk { obligations: inferred_obligations, .. }) => {\n-            // FIXME(#????) propagate obligations\n+            // FIXME(#32730) propagate obligations\n             assert!(inferred_obligations.is_empty());\n             Ok(Some(obligations))\n         },\n@@ -283,7 +283,7 @@ fn consider_unification_despite_ambiguity<'cx,'tcx>(selcx: &mut SelectionContext\n             let obligation_ty = obligation.predicate.ty;\n             match infer::mk_eqty(infcx, true, origin, obligation_ty, ret_type) {\n                 Ok(InferOk { obligations, .. }) => {\n-                    // FIXME(#????) propagate obligations\n+                    // FIXME(#32730) propagate obligations\n                     assert!(obligations.is_empty());\n                 }\n                 Err(_) => { /* ignore errors */ }\n@@ -837,7 +837,7 @@ fn assemble_candidates_from_predicates<'cx,'tcx,I>(\n                                               origin,\n                                               data_poly_trait_ref,\n                                               obligation_poly_trait_ref)\n-                        // FIXME(#????) propagate obligations\n+                        // FIXME(#32730) propagate obligations\n                         .map(|InferOk { obligations, .. }| assert!(obligations.is_empty()))\n                         .is_ok()\n                 });\n@@ -1093,7 +1093,7 @@ fn confirm_param_env_candidate<'cx,'tcx>(\n                               obligation.predicate.trait_ref.clone(),\n                               projection.projection_ty.trait_ref.clone()) {\n         Ok(InferOk { obligations, .. }) => {\n-            // FIXME(#????) propagate obligations\n+            // FIXME(#32730) propagate obligations\n             assert!(obligations.is_empty());\n         }\n         Err(e) => {"}, {"sha": "d18f8e9dc53d03766625e6b4d84cb1897966d49a", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/86071aca3dd729c77d238d449d2c61b2de0b8425/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86071aca3dd729c77d238d449d2c61b2de0b8425/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=86071aca3dd729c77d238d449d2c61b2de0b8425", "patch": "@@ -485,7 +485,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 // does this code ever run?\n                 match self.infcx.equality_predicate(obligation.cause.span, p) {\n                     Ok(InferOk { obligations, .. }) => {\n-                        // FIXME(#????) propagate obligations\n+                        // FIXME(#32730) propagate obligations\n                         assert!(obligations.is_empty());\n                         EvaluatedToOk\n                     },\n@@ -1190,7 +1190,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                                              trait_bound.clone(),\n                                              ty::Binder(skol_trait_ref.clone())) {\n             Ok(InferOk { obligations, .. }) => {\n-                // FIXME(#????) propagate obligations\n+                // FIXME(#32730) propagate obligations\n                 assert!(obligations.is_empty());\n             }\n             Err(_) => { return false; }\n@@ -2505,7 +2505,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                                        origin,\n                                        expected_trait_ref.clone(),\n                                        obligation_trait_ref.clone())\n-            // FIXME(#????) propagate obligations\n+            // FIXME(#32730) propagate obligations\n             .map(|InferOk { obligations, .. }| assert!(obligations.is_empty()))\n             .map_err(|e| OutputTypeParameterMismatch(expected_trait_ref, obligation_trait_ref, e))\n     }\n@@ -2541,7 +2541,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 let InferOk { obligations, .. } =\n                     self.infcx.sub_types(false, origin, new_trait, target)\n                     .map_err(|_| Unimplemented)?;\n-                // FIXME(#????) propagate obligations\n+                // FIXME(#32730) propagate obligations\n                 assert!(obligations.is_empty());\n \n                 // Register one obligation for 'a: 'b.\n@@ -2608,7 +2608,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 let InferOk { obligations, .. } =\n                     self.infcx.sub_types(false, origin, a, b)\n                     .map_err(|_| Unimplemented)?;\n-                // FIXME(#????) propagate obligations\n+                // FIXME(#32730) propagate obligations\n                 assert!(obligations.is_empty());\n             }\n \n@@ -2668,7 +2668,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 let InferOk { obligations, .. } =\n                     self.infcx.sub_types(false, origin, new_struct, target)\n                     .map_err(|_| Unimplemented)?;\n-                // FIXME(#????) propagate obligations\n+                // FIXME(#32730) propagate obligations\n                 assert!(obligations.is_empty());\n \n                 // Construct the nested Field<T>: Unsize<Field<U>> predicate.\n@@ -2764,7 +2764,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 debug!(\"match_impl: failed eq_trait_refs due to `{}`\", e);\n                 ()\n             })?;\n-        // FIXME(#????) propagate obligations\n+        // FIXME(#32730) propagate obligations\n         assert!(obligations.is_empty());\n \n         if let Err(e) = self.infcx.leak_check(&skol_map, snapshot) {\n@@ -2832,7 +2832,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                                        origin,\n                                        poly_trait_ref,\n                                        obligation.predicate.to_poly_trait_ref())\n-            // FIXME(#????) propagate obligations\n+            // FIXME(#32730) propagate obligations\n             .map(|InferOk { obligations, .. }| assert!(obligations.is_empty()))\n             .map_err(|_| ())\n     }"}, {"sha": "ce0d42203b987baf56ebe03fe2d0e3e64adb98df", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/86071aca3dd729c77d238d449d2c61b2de0b8425/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86071aca3dd729c77d238d449d2c61b2de0b8425/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=86071aca3dd729c77d238d449d2c61b2de0b8425", "patch": "@@ -375,7 +375,7 @@ impl<'a, 'tcx> Env<'a, 'tcx> {\n     pub fn check_sub(&self, t1: Ty<'tcx>, t2: Ty<'tcx>) {\n         match self.sub(&t1, &t2) {\n             Ok(InferOk { obligations, .. }) => {\n-                // FIXME once obligations are being propagated, assert the right thing.\n+                // FIXME(#32730) once obligations are being propagated, assert the right thing.\n                 assert!(obligations.is_empty());\n             }\n             Err(ref e) => {\n@@ -399,7 +399,7 @@ impl<'a, 'tcx> Env<'a, 'tcx> {\n     pub fn check_lub(&self, t1: Ty<'tcx>, t2: Ty<'tcx>, t_lub: Ty<'tcx>) {\n         match self.lub(&t1, &t2) {\n             Ok(InferOk { obligations, value: t }) => {\n-                // FIXME once obligations are being propagated, assert the right thing.\n+                // FIXME(#32730) once obligations are being propagated, assert the right thing.\n                 assert!(obligations.is_empty());\n \n                 self.assert_eq(t, t_lub);\n@@ -418,7 +418,7 @@ impl<'a, 'tcx> Env<'a, 'tcx> {\n                 panic!(\"unexpected error computing LUB: {:?}\", e)\n             }\n             Ok(InferOk { obligations, value: t }) => {\n-                // FIXME once obligations are being propagated, assert the right thing.\n+                // FIXME(#32730) once obligations are being propagated, assert the right thing.\n                 assert!(obligations.is_empty());\n \n                 self.assert_eq(t, t_glb);"}, {"sha": "ce8ede7f4b9592be12d82a5caf829bc507c81e67", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86071aca3dd729c77d238d449d2c61b2de0b8425/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86071aca3dd729c77d238d449d2c61b2de0b8425/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=86071aca3dd729c77d238d449d2c61b2de0b8425", "patch": "@@ -338,7 +338,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n     {\n         infer::mk_subty(self.infcx, false, infer::TypeOrigin::Misc(span),\n                         sup, sub)\n-            // FIXME(#????) propagate obligations\n+            // FIXME(#32730) propagate obligations\n             .map(|InferOk { obligations, .. }| assert!(obligations.is_empty()))\n     }\n \n@@ -347,7 +347,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n     {\n         infer::mk_eqty(self.infcx, false, infer::TypeOrigin::Misc(span),\n                        a, b)\n-            // FIXME(#????) propagate obligations\n+            // FIXME(#32730) propagate obligations\n             .map(|InferOk { obligations, .. }| assert!(obligations.is_empty()))\n     }\n "}, {"sha": "e359329ebcf7f168afc6691b02ff17ab354168e1", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86071aca3dd729c77d238d449d2c61b2de0b8425/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86071aca3dd729c77d238d449d2c61b2de0b8425/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=86071aca3dd729c77d238d449d2c61b2de0b8425", "patch": "@@ -534,7 +534,7 @@ pub fn check_match<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n         let result = if is_if_let_fallback {\n             fcx.infcx().eq_types(true, origin, arm_ty, result_ty)\n                 .map(|InferOk { obligations, .. }| {\n-                    // FIXME(#????) propagate obligations\n+                    // FIXME(#32730) propagate obligations\n                     assert!(obligations.is_empty());\n                     arm_ty\n                 })"}, {"sha": "a9849e93578c8c5f9380f083ec6e1ee464d3b1d7", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/86071aca3dd729c77d238d449d2c61b2de0b8425/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86071aca3dd729c77d238d449d2c61b2de0b8425/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=86071aca3dd729c77d238d449d2c61b2de0b8425", "patch": "@@ -119,14 +119,14 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n             if self.use_lub {\n                 infcx.lub(false, trace, &a, &b)\n                     .map(|InferOk { value, obligations }| {\n-                        // FIXME(#????) propagate obligations\n+                        // FIXME(#32730) propagate obligations\n                         assert!(obligations.is_empty());\n                         value\n                     })\n             } else {\n                 infcx.sub(false, trace, &a, &b)\n                     .map(|InferOk { value, obligations }| {\n-                        // FIXME(#????) propagate obligations\n+                        // FIXME(#32730) propagate obligations\n                         assert!(obligations.is_empty());\n                         value\n                     })\n@@ -668,7 +668,7 @@ pub fn try_find_lub<'a, 'b, 'tcx, E, I>(fcx: &FnCtxt<'a, 'tcx>,\n             // The signature must always match.\n             let fty = fcx.infcx().lub(true, trace.clone(), a_fty, b_fty)\n                 .map(|InferOk { value, obligations }| {\n-                    // FIXME(#????) propagate obligations\n+                    // FIXME(#32730) propagate obligations\n                     assert!(obligations.is_empty());\n                     value\n                 })?;\n@@ -678,7 +678,7 @@ pub fn try_find_lub<'a, 'b, 'tcx, E, I>(fcx: &FnCtxt<'a, 'tcx>,\n                 let substs = fcx.infcx().commit_if_ok(|_| {\n                     fcx.infcx().lub(true, trace.clone(), a_substs, b_substs)\n                         .map(|InferOk { value, obligations }| {\n-                            // FIXME(#????) propagate obligations\n+                            // FIXME(#32730) propagate obligations\n                             assert!(obligations.is_empty());\n                             value\n                         })\n@@ -746,7 +746,7 @@ pub fn try_find_lub<'a, 'b, 'tcx, E, I>(fcx: &FnCtxt<'a, 'tcx>,\n             return fcx.infcx().commit_if_ok(|_| {\n                 fcx.infcx().lub(true, trace.clone(), &prev_ty, &new_ty)\n                     .map(|InferOk { value, obligations }| {\n-                        // FIXME(#????) propagate obligations\n+                        // FIXME(#32730) propagate obligations\n                         assert!(obligations.is_empty());\n                         value\n                     })\n@@ -763,7 +763,7 @@ pub fn try_find_lub<'a, 'b, 'tcx, E, I>(fcx: &FnCtxt<'a, 'tcx>,\n                 fcx.infcx().commit_if_ok(|_| {\n                     fcx.infcx().lub(true, trace, &prev_ty, &new_ty)\n                         .map(|InferOk { value, obligations }| {\n-                            // FIXME(#????) propagate obligations\n+                            // FIXME(#32730) propagate obligations\n                             assert!(obligations.is_empty());\n                             value\n                         })"}, {"sha": "3c12ab8d59840ea61ade8994d21005ed7ca109f8", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86071aca3dd729c77d238d449d2c61b2de0b8425/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86071aca3dd729c77d238d449d2c61b2de0b8425/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=86071aca3dd729c77d238d449d2c61b2de0b8425", "patch": "@@ -476,7 +476,7 @@ pub fn compare_const_impl<'tcx>(tcx: &TyCtxt<'tcx>,\n \n     match err {\n         Ok(InferOk { obligations, .. }) => {\n-            // FIXME(#????) propagate obligations\n+            // FIXME(#32730) propagate obligations\n             assert!(obligations.is_empty())\n         }\n         Err(terr) => {"}, {"sha": "bc2ef9aafee59d4b669000991d0f8b7606ba0d18", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86071aca3dd729c77d238d449d2c61b2de0b8425/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86071aca3dd729c77d238d449d2c61b2de0b8425/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=86071aca3dd729c77d238d449d2c61b2de0b8425", "patch": "@@ -23,7 +23,7 @@ pub fn suptype<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>, sp: Span,\n     let origin = TypeOrigin::Misc(sp);\n     match fcx.infcx().sub_types(false, origin, actual, expected) {\n         Ok(InferOk { obligations, .. }) => {\n-            // FIXME(#????) propagate obligations\n+            // FIXME(#32730) propagate obligations\n             assert!(obligations.is_empty());\n         },\n         Err(e) => {\n@@ -37,7 +37,7 @@ pub fn eqtype<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>, sp: Span,\n     let origin = TypeOrigin::Misc(sp);\n     match fcx.infcx().eq_types(false, origin, actual, expected) {\n         Ok(InferOk { obligations, .. }) => {\n-            // FIXME(#????) propagate obligations\n+            // FIXME(#32730) propagate obligations\n             assert!(obligations.is_empty());\n         },\n         Err(e) => {"}, {"sha": "7e487c1f717f79b38c92df04733faa5644099d36", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86071aca3dd729c77d238d449d2c61b2de0b8425/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86071aca3dd729c77d238d449d2c61b2de0b8425/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=86071aca3dd729c77d238d449d2c61b2de0b8425", "patch": "@@ -1134,7 +1134,7 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n \n     fn make_sub_ty(&self, sub: Ty<'tcx>, sup: Ty<'tcx>) -> infer::UnitResult<'tcx> {\n         self.infcx().sub_types(false, TypeOrigin::Misc(DUMMY_SP), sub, sup)\n-            // FIXME(#????) propagate obligations\n+            // FIXME(#32730) propagate obligations\n             .map(|InferOk { obligations, .. }| assert!(obligations.is_empty()))\n     }\n "}, {"sha": "da93180c600ddcf3a3dc0e67c6e566624661aff6", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/86071aca3dd729c77d238d449d2c61b2de0b8425/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86071aca3dd729c77d238d449d2c61b2de0b8425/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=86071aca3dd729c77d238d449d2c61b2de0b8425", "patch": "@@ -1628,7 +1628,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     sup: Ty<'tcx>)\n                     -> Result<(), TypeError<'tcx>> {\n         infer::mk_subty(self.infcx(), a_is_expected, origin, sub, sup)\n-            // FIXME(#????) propagate obligations\n+            // FIXME(#32730) propagate obligations\n             .map(|InferOk { obligations, .. }| assert!(obligations.is_empty()))\n     }\n \n@@ -1639,7 +1639,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                    sup: Ty<'tcx>)\n                    -> Result<(), TypeError<'tcx>> {\n         infer::mk_eqty(self.infcx(), a_is_expected, origin, sub, sup)\n-            // FIXME(#????) propagate obligations\n+            // FIXME(#32730) propagate obligations\n             .map(|InferOk { obligations, .. }| assert!(obligations.is_empty()))\n     }\n \n@@ -1920,7 +1920,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                                          TypeOrigin::Misc(default.origin_span),\n                                                          ty, default.ty) {\n                                         Ok(InferOk { obligations, .. }) => {\n-                                            // FIXME(#????) propagate obligations\n+                                            // FIXME(#32730) propagate obligations\n                                             assert!(obligations.is_empty())\n                                         },\n                                         Err(_) => {\n@@ -2015,7 +2015,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             match infer::mk_eqty(self.infcx(), false,\n                                                  TypeOrigin::Misc(default.origin_span),\n                                                  ty, default.ty) {\n-                                // FIXME(#????) propagate obligations\n+                                // FIXME(#32730) propagate obligations\n                                 Ok(InferOk { obligations, .. }) => assert!(obligations.is_empty()),\n                                 Err(_) => {\n                                     result = Some(default);\n@@ -2784,7 +2784,7 @@ fn expected_types_for_fn_args<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                 // FIXME(#15760) can't use try! here, FromError doesn't default\n                 // to identity so the resulting type is not constrained.\n                 match ures {\n-                    // FIXME(#????) propagate obligations\n+                    // FIXME(#32730) propagate obligations\n                     Ok(InferOk { obligations, .. }) => assert!(obligations.is_empty()),\n                     Err(e) => return Err(e),\n                 }\n@@ -2915,7 +2915,7 @@ fn check_expr_with_expectation_and_lvalue_pref<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                     let trace = TypeTrace::types(origin, true, then_ty, else_ty);\n                     fcx.infcx().lub(true, trace, &then_ty, &else_ty)\n                         .map(|InferOk { value, obligations }| {\n-                            // FIXME(#????) propagate obligations\n+                            // FIXME(#32730) propagate obligations\n                             assert!(obligations.is_empty());\n                             value\n                         })\n@@ -2927,7 +2927,7 @@ fn check_expr_with_expectation_and_lvalue_pref<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n             (origin, unit, then_ty,\n              fcx.infcx().eq_types(true, origin, unit, then_ty)\n                  .map(|InferOk { obligations, .. }| {\n-                     // FIXME(#????) propagate obligations\n+                     // FIXME(#32730) propagate obligations\n                      assert!(obligations.is_empty());\n                      unit\n                  }))"}, {"sha": "dae14c33296899a5b6822bedee99de2ed1520a27", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86071aca3dd729c77d238d449d2c61b2de0b8425/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86071aca3dd729c77d238d449d2c61b2de0b8425/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=86071aca3dd729c77d238d449d2c61b2de0b8425", "patch": "@@ -1847,7 +1847,7 @@ fn declared_projection_bounds_from_trait<'a,'tcx>(rcx: &Rcx<'a, 'tcx>,\n                 // check whether this predicate applies to our current projection\n                 match infer::mk_eqty(infcx, false, TypeOrigin::Misc(span), ty, outlives.0) {\n                     Ok(InferOk { obligations, .. }) => {\n-                        // FIXME(#????) propagate obligations\n+                        // FIXME(#32730) propagate obligations\n                         assert!(obligations.is_empty());\n                         Ok(outlives.1)\n                     }"}]}