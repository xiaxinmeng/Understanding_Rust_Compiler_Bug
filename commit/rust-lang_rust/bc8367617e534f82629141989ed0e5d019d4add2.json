{"sha": "bc8367617e534f82629141989ed0e5d019d4add2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjODM2NzYxN2U1MzRmODI2MjkxNDE5ODllZDBlNWQwMTlkNGFkZDI=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-08-12T22:09:55Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-08-12T22:11:17Z"}, "message": "Switch to intra-doc links in `std/io/mod.rs`", "tree": {"sha": "2b3418d1f3c7b8106b0493a9b9ee1c7feba05d53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b3418d1f3c7b8106b0493a9b9ee1c7feba05d53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc8367617e534f82629141989ed0e5d019d4add2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc8367617e534f82629141989ed0e5d019d4add2", "html_url": "https://github.com/rust-lang/rust/commit/bc8367617e534f82629141989ed0e5d019d4add2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc8367617e534f82629141989ed0e5d019d4add2/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef1d58e7c90aa9885c906a6eb7398a2b6256d075", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef1d58e7c90aa9885c906a6eb7398a2b6256d075", "html_url": "https://github.com/rust-lang/rust/commit/ef1d58e7c90aa9885c906a6eb7398a2b6256d075"}], "stats": {"total": 26, "additions": 5, "deletions": 21}, "files": [{"sha": "cbb539971206a7abc015c6fade8567a5009339ee", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 5, "deletions": 21, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/bc8367617e534f82629141989ed0e5d019d4add2/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc8367617e534f82629141989ed0e5d019d4add2/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=bc8367617e534f82629141989ed0e5d019d4add2", "patch": "@@ -1212,7 +1212,6 @@ impl Initializer {\n ///\n /// [`write`]: Self::write\n /// [`flush`]: Self::flush\n-/// [`std::io`]: index.html\n ///\n /// # Examples\n ///\n@@ -1590,8 +1589,6 @@ pub trait Seek {\n     /// # Errors\n     ///\n     /// Seeking to a negative offset is considered an error.\n-    ///\n-    /// [`SeekFrom::Start`]: enum.SeekFrom.html#variant.Start\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn seek(&mut self, pos: SeekFrom) -> Result<u64>;\n \n@@ -1678,8 +1675,6 @@ pub trait Seek {\n /// Enumeration of possible methods to seek within an I/O object.\n ///\n /// It is used by the [`Seek`] trait.\n-///\n-/// [`Seek`]: trait.Seek.html\n #[derive(Copy, PartialEq, Eq, Clone, Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum SeekFrom {\n@@ -1759,11 +1754,9 @@ fn read_until<R: BufRead + ?Sized>(r: &mut R, delim: u8, buf: &mut Vec<u8>) -> R\n /// For example, [`File`] implements [`Read`], but not `BufRead`.\n /// [`BufReader`] to the rescue!\n ///\n-/// [`BufReader`]: struct.BufReader.html\n /// [`File`]: crate::fs::File\n /// [`read_line`]: Self::read_line\n /// [`lines`]: Self::lines\n-/// [`Read`]: trait.Read.html\n ///\n /// ```no_run\n /// use std::io::{self, BufReader};\n@@ -1869,16 +1862,13 @@ pub trait BufRead: Read {\n     /// present in `buf` and its length will have been adjusted appropriately.\n     ///\n     /// [`fill_buf`]: Self::fill_buf\n-    /// [`ErrorKind::Interrupted`]: enum.ErrorKind.html#variant.Interrupted\n     ///\n     /// # Examples\n     ///\n     /// [`std::io::Cursor`][`Cursor`] is a type that implements `BufRead`. In\n     /// this example, we use [`Cursor`] to read all the bytes in a byte slice\n     /// in hyphen delimited segments:\n     ///\n-    /// [`Cursor`]: struct.Cursor.html\n-    ///\n     /// ```\n     /// use std::io::{self, BufRead};\n     ///\n@@ -1940,8 +1930,6 @@ pub trait BufRead: Read {\n     /// [`std::io::Cursor`][`Cursor`] is a type that implements `BufRead`. In\n     /// this example, we use [`Cursor`] to read all the lines in a byte slice:\n     ///\n-    /// [`Cursor`]: struct.Cursor.html\n-    ///\n     /// ```\n     /// use std::io::{self, BufRead};\n     ///\n@@ -1996,8 +1984,6 @@ pub trait BufRead: Read {\n     /// this example, we use [`Cursor`] to iterate over all hyphen delimited\n     /// segments in a byte slice\n     ///\n-    /// [`Cursor`]: struct.Cursor.html\n-    ///\n     /// ```\n     /// use std::io::{self, BufRead};\n     ///\n@@ -2046,8 +2032,6 @@ pub trait BufRead: Read {\n     /// # Errors\n     ///\n     /// Each line of the iterator has the same error semantics as [`BufRead::read_line`].\n-    ///\n-    /// [`BufRead::read_line`]: trait.BufRead.html#method.read_line\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn lines(self) -> Lines<Self>\n     where\n@@ -2062,7 +2046,7 @@ pub trait BufRead: Read {\n /// This struct is generally created by calling [`chain`] on a reader.\n /// Please see the documentation of [`chain`] for more details.\n ///\n-/// [`chain`]: trait.Read.html#method.chain\n+/// [`chain`]: Read::chain\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Chain<T, U> {\n     first: T,\n@@ -2204,7 +2188,7 @@ impl<T: BufRead, U: BufRead> BufRead for Chain<T, U> {\n /// This struct is generally created by calling [`take`] on a reader.\n /// Please see the documentation of [`take`] for more details.\n ///\n-/// [`take`]: trait.Read.html#method.take\n+/// [`take`]: Read::take\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Debug)]\n pub struct Take<T> {\n@@ -2403,7 +2387,7 @@ impl<T: BufRead> BufRead for Take<T> {\n /// This struct is generally created by calling [`bytes`] on a reader.\n /// Please see the documentation of [`bytes`] for more details.\n ///\n-/// [`bytes`]: trait.Read.html#method.bytes\n+/// [`bytes`]: Read::bytes\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Debug)]\n pub struct Bytes<R> {\n@@ -2433,7 +2417,7 @@ impl<R: Read> Iterator for Bytes<R> {\n /// This struct is generally created by calling [`split`] on a `BufRead`.\n /// Please see the documentation of [`split`] for more details.\n ///\n-/// [`split`]: trait.BufRead.html#method.split\n+/// [`split`]: BufRead::split\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Debug)]\n pub struct Split<B> {\n@@ -2465,7 +2449,7 @@ impl<B: BufRead> Iterator for Split<B> {\n /// This struct is generally created by calling [`lines`] on a `BufRead`.\n /// Please see the documentation of [`lines`] for more details.\n ///\n-/// [`lines`]: trait.BufRead.html#method.lines\n+/// [`lines`]: BufRead::lines\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Debug)]\n pub struct Lines<B> {"}]}