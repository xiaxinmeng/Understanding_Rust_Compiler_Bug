{"sha": "d4fbb55c9c1eba39eca81b0d73fe9edf5e3869fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0ZmJiNTVjOWMxZWJhMzllY2E4MWIwZDczZmU5ZWRmNWUzODY5ZmQ=", "commit": {"author": {"name": "Ohad Ravid", "email": "ohad.rv@gmail.com", "date": "2019-12-24T18:14:20Z"}, "committer": {"name": "Ohad Ravid", "email": "ohad.rv@gmail.com", "date": "2019-12-30T17:10:46Z"}, "message": "Suggest adding a lifetime constraint when opaque type is responsible for \"does not live long enough\" error", "tree": {"sha": "27efd367dd70d87b94b84ae5ba27da6e23b7cb2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27efd367dd70d87b94b84ae5ba27da6e23b7cb2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4fbb55c9c1eba39eca81b0d73fe9edf5e3869fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4fbb55c9c1eba39eca81b0d73fe9edf5e3869fd", "html_url": "https://github.com/rust-lang/rust/commit/d4fbb55c9c1eba39eca81b0d73fe9edf5e3869fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4fbb55c9c1eba39eca81b0d73fe9edf5e3869fd/comments", "author": {"login": "ohadravid", "id": 2358365, "node_id": "MDQ6VXNlcjIzNTgzNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/2358365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ohadravid", "html_url": "https://github.com/ohadravid", "followers_url": "https://api.github.com/users/ohadravid/followers", "following_url": "https://api.github.com/users/ohadravid/following{/other_user}", "gists_url": "https://api.github.com/users/ohadravid/gists{/gist_id}", "starred_url": "https://api.github.com/users/ohadravid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ohadravid/subscriptions", "organizations_url": "https://api.github.com/users/ohadravid/orgs", "repos_url": "https://api.github.com/users/ohadravid/repos", "events_url": "https://api.github.com/users/ohadravid/events{/privacy}", "received_events_url": "https://api.github.com/users/ohadravid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ohadravid", "id": 2358365, "node_id": "MDQ6VXNlcjIzNTgzNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/2358365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ohadravid", "html_url": "https://github.com/ohadravid", "followers_url": "https://api.github.com/users/ohadravid/followers", "following_url": "https://api.github.com/users/ohadravid/following{/other_user}", "gists_url": "https://api.github.com/users/ohadravid/gists{/gist_id}", "starred_url": "https://api.github.com/users/ohadravid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ohadravid/subscriptions", "organizations_url": "https://api.github.com/users/ohadravid/orgs", "repos_url": "https://api.github.com/users/ohadravid/repos", "events_url": "https://api.github.com/users/ohadravid/events{/privacy}", "received_events_url": "https://api.github.com/users/ohadravid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fb43801368ae8b5931583f813071120bed55c35", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fb43801368ae8b5931583f813071120bed55c35", "html_url": "https://github.com/rust-lang/rust/commit/0fb43801368ae8b5931583f813071120bed55c35"}], "stats": {"total": 75, "additions": 74, "deletions": 1}, "files": [{"sha": "05bec59ad8926f68d3ea15afc17ed718a55a8da6", "filename": "src/librustc_mir/borrow_check/diagnostics/explain_borrow.rs", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/d4fbb55c9c1eba39eca81b0d73fe9edf5e3869fd/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fbb55c9c1eba39eca81b0d73fe9edf5e3869fd/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs?ref=d4fbb55c9c1eba39eca81b0d73fe9edf5e3869fd", "patch": "@@ -9,7 +9,7 @@ use rustc::mir::{\n use rustc::ty::adjustment::PointerCast;\n use rustc::ty::{self, TyCtxt};\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_errors::DiagnosticBuilder;\n+use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_index::vec::IndexVec;\n use syntax_pos::symbol::Symbol;\n use syntax_pos::Span;\n@@ -206,6 +206,47 @@ impl BorrowExplanation {\n                         ),\n                     );\n                 };\n+\n+                self.add_lifetime_bound_suggestion_to_diagnostic(\n+                    tcx,\n+                    err,\n+                    &category,\n+                    span,\n+                    region_name,\n+                );\n+            }\n+            _ => {}\n+        }\n+    }\n+    pub(in crate::borrow_check) fn add_lifetime_bound_suggestion_to_diagnostic<'tcx>(\n+        &self,\n+        tcx: TyCtxt<'tcx>,\n+        err: &mut DiagnosticBuilder<'_>,\n+        category: &ConstraintCategory,\n+        span: Span,\n+        region_name: &RegionName,\n+    ) {\n+        match category {\n+            ConstraintCategory::OpaqueType => {\n+                if let Ok(snippet) = tcx.sess.source_map().span_to_snippet(span) {\n+                    let suggestable_name = if region_name.was_named() {\n+                        region_name.to_string()\n+                    } else {\n+                        \"'_\".to_string()\n+                    };\n+\n+                    err.span_suggestion(\n+                        span,\n+                        &format!(\n+                            \"you can add a constraint to the {}to make it last less than \\\n+                             `'static` and match `{}`\",\n+                            category.description(),\n+                            region_name,\n+                        ),\n+                        format!(\"{} + {}\", snippet, suggestable_name),\n+                        Applicability::Unspecified,\n+                    );\n+                }\n             }\n             _ => {}\n         }"}, {"sha": "6179132b3f6080e0decb74aebfe80b4a49eb702e", "filename": "src/test/ui/impl-trait/does-not-live-long-enough.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d4fbb55c9c1eba39eca81b0d73fe9edf5e3869fd/src%2Ftest%2Fui%2Fimpl-trait%2Fdoes-not-live-long-enough.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fbb55c9c1eba39eca81b0d73fe9edf5e3869fd/src%2Ftest%2Fui%2Fimpl-trait%2Fdoes-not-live-long-enough.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fdoes-not-live-long-enough.rs?ref=d4fbb55c9c1eba39eca81b0d73fe9edf5e3869fd", "patch": "@@ -0,0 +1,11 @@\n+struct List {\n+    data: Vec<String>,\n+}\n+impl List {\n+    fn started_with<'a>(&'a self, prefix: &'a str) -> impl Iterator<Item=&'a str> {\n+        self.data.iter().filter(|s| s.starts_with(prefix)).map(|s| s.as_ref())\n+        //~^ ERROR does not live long enough\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "ddf81138dafe718f2a5f4c99832f4c6084200aaa", "filename": "src/test/ui/impl-trait/does-not-live-long-enough.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d4fbb55c9c1eba39eca81b0d73fe9edf5e3869fd/src%2Ftest%2Fui%2Fimpl-trait%2Fdoes-not-live-long-enough.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4fbb55c9c1eba39eca81b0d73fe9edf5e3869fd/src%2Ftest%2Fui%2Fimpl-trait%2Fdoes-not-live-long-enough.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fdoes-not-live-long-enough.stderr?ref=d4fbb55c9c1eba39eca81b0d73fe9edf5e3869fd", "patch": "@@ -0,0 +1,21 @@\n+error[E0597]: `prefix` does not live long enough\n+  --> $DIR/does-not-live-long-enough.rs:6:51\n+   |\n+LL |     fn started_with<'a>(&'a self, prefix: &'a str) -> impl Iterator<Item=&'a str> {\n+   |                     -- lifetime `'a` defined here     --------------------------- opaque type requires that `prefix` is borrowed for `'a`\n+LL |         self.data.iter().filter(|s| s.starts_with(prefix)).map(|s| s.as_ref())\n+   |                                 ---               ^^^^^^ borrowed value does not live long enough\n+   |                                 |\n+   |                                 value captured here\n+LL |\n+LL |     }\n+   |     - `prefix` dropped here while still borrowed\n+   |\n+help: you can add a constraint to the opaque type to make it last less than `'static` and match `'a`\n+   |\n+LL |     fn started_with<'a>(&'a self, prefix: &'a str) -> impl Iterator<Item=&'a str> + 'a {\n+   |                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}]}