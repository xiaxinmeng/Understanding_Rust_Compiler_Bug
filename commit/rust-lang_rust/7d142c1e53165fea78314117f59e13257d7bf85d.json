{"sha": "7d142c1e53165fea78314117f59e13257d7bf85d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkMTQyYzFlNTMxNjVmZWE3ODMxNDExN2Y1OWUxMzI1N2Q3YmY4NWQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-07-06T20:18:38Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-07-14T11:57:15Z"}, "message": "Address comments", "tree": {"sha": "ddf1e5cb7e270398948f246c60bc6832b2920320", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddf1e5cb7e270398948f246c60bc6832b2920320"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d142c1e53165fea78314117f59e13257d7bf85d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d142c1e53165fea78314117f59e13257d7bf85d", "html_url": "https://github.com/rust-lang/rust/commit/7d142c1e53165fea78314117f59e13257d7bf85d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d142c1e53165fea78314117f59e13257d7bf85d/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3acb341b2ff743e186c032326d24bfa8827bedc", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3acb341b2ff743e186c032326d24bfa8827bedc", "html_url": "https://github.com/rust-lang/rust/commit/e3acb341b2ff743e186c032326d24bfa8827bedc"}], "stats": {"total": 33, "additions": 15, "deletions": 18}, "files": [{"sha": "5984f8ce5b1fe2010aa9a51dd7610cd5b0c3bda8", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d142c1e53165fea78314117f59e13257d7bf85d/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d142c1e53165fea78314117f59e13257d7bf85d/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=7d142c1e53165fea78314117f59e13257d7bf85d", "patch": "@@ -568,7 +568,7 @@ impl Generics {\n \n /// Synthetic Type Parameters are converted to an other form during lowering, this allows\n /// to track the original form they had. Useful for error messages.\n-#[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum SyntheticTyParamKind {\n     ImplTrait\n }"}, {"sha": "f27ca444672ab52e744bc45b01fd79701e57d32b", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d142c1e53165fea78314117f59e13257d7bf85d/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d142c1e53165fea78314117f59e13257d7bf85d/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=7d142c1e53165fea78314117f59e13257d7bf85d", "patch": "@@ -68,7 +68,7 @@ impl<'a> AstValidator<'a> {\n                                         vis.span,\n                                         E0449,\n                                         \"unnecessary visibility qualifier\");\n-        if vis.node.is_public() {\n+        if vis.node.is_pub() {\n             err.span_label(vis.span, \"`pub` not permitted here because it's implied\");\n         }\n         if let Some(note) = note {"}, {"sha": "34dcdfb757f7390f99fc7c9b8d13c8cca505c60e", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d142c1e53165fea78314117f59e13257d7bf85d/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d142c1e53165fea78314117f59e13257d7bf85d/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=7d142c1e53165fea78314117f59e13257d7bf85d", "patch": "@@ -65,14 +65,14 @@ macro_rules! down_cast_data {\n macro_rules! access_from {\n     ($save_ctxt:expr, $vis:expr, $id:expr) => {\n         Access {\n-            public: $vis.node.is_public(),\n+            public: $vis.node.is_pub(),\n             reachable: $save_ctxt.analysis.access_levels.is_reachable($id),\n         }\n     };\n \n     ($save_ctxt:expr, $item:expr) => {\n         Access {\n-            public: $item.vis.node.is_public(),\n+            public: $item.vis.node.is_pub(),\n             reachable: $save_ctxt.analysis.access_levels.is_reachable($item.id),\n         }\n     };\n@@ -523,7 +523,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n                     .iter()\n                     .enumerate()\n                     .filter_map(|(i, f)| {\n-                        if include_priv_fields || f.vis.node.is_public() {\n+                        if include_priv_fields || f.vis.node.is_pub() {\n                             f.ident\n                                 .map(|i| i.to_string())\n                                 .or_else(|| Some(i.to_string()))"}, {"sha": "030b36c2212ae9a5ab2f011dcbc2dacdf01c7253", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d142c1e53165fea78314117f59e13257d7bf85d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d142c1e53165fea78314117f59e13257d7bf85d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=7d142c1e53165fea78314117f59e13257d7bf85d", "patch": "@@ -1855,7 +1855,7 @@ impl<'tcx> Clean<Type> for ty::ProjectionTy<'tcx> {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Debug, Hash)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Debug, Hash)]\n pub enum GenericParamDefKind {\n     Lifetime,\n     Type {\n@@ -1866,8 +1866,6 @@ pub enum GenericParamDefKind {\n     },\n }\n \n-impl Eq for GenericParamDefKind {}\n-\n #[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Debug, Hash)]\n pub struct GenericParamDef {\n     pub name: String,"}, {"sha": "209e0b6d787906d64e4c439aeff1ab84dc2732f6", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7d142c1e53165fea78314117f59e13257d7bf85d/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d142c1e53165fea78314117f59e13257d7bf85d/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=7d142c1e53165fea78314117f59e13257d7bf85d", "patch": "@@ -1581,7 +1581,8 @@ impl TyKind {\n     pub fn is_implicit_self(&self) -> bool {\n         if let TyKind::ImplicitSelf = *self { true } else { false }\n     }\n-    pub(crate) fn is_empty_tuple(&self) -> bool {\n+\n+    crate fn is_unit(&self) -> bool {\n         if let TyKind::Tup(ref tys) = *self { tys.is_empty() } else { false }\n     }\n }\n@@ -1982,7 +1983,7 @@ pub enum VisibilityKind {\n }\n \n impl VisibilityKind {\n-    pub fn is_public(&self) -> bool {\n+    pub fn is_pub(&self) -> bool {\n         if let VisibilityKind::Public = *self { true } else { false }\n     }\n }"}, {"sha": "62bb5fbd04f7bc5ba702719a31a8b378d9d7cc21", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d142c1e53165fea78314117f59e13257d7bf85d/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d142c1e53165fea78314117f59e13257d7bf85d/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=7d142c1e53165fea78314117f59e13257d7bf85d", "patch": "@@ -6999,7 +6999,7 @@ impl<'a> Parser<'a> {\n \n         // Verify whether we have encountered a struct or method definition where the user forgot to\n         // add the `struct` or `fn` keyword after writing `pub`: `pub S {}`\n-        if visibility.node.is_public() &&\n+        if visibility.node.is_pub() &&\n             self.check_ident() &&\n             self.look_ahead(1, |t| *t != token::Not)\n         {"}, {"sha": "d8b8d13a38c2ea3fb28f4914296f774152eeb951", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d142c1e53165fea78314117f59e13257d7bf85d/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d142c1e53165fea78314117f59e13257d7bf85d/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=7d142c1e53165fea78314117f59e13257d7bf85d", "patch": "@@ -353,7 +353,7 @@ fn is_test_fn(cx: &TestCtxt, i: &ast::Item) -> bool {\n                 // type implements the `Termination` trait as `libtest` enforces that.\n                 let has_output = match decl.output {\n                     ast::FunctionRetTy::Default(..) => false,\n-                    ast::FunctionRetTy::Ty(ref t) if t.node.is_empty_tuple() => false,\n+                    ast::FunctionRetTy::Ty(ref t) if t.node.is_unit() => false,\n                     _ => true\n                 };\n "}, {"sha": "2522fa769c527744b58678c45d1b9189adc759c0", "filename": "src/libsyntax_ext/proc_macro_registrar.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7d142c1e53165fea78314117f59e13257d7bf85d/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d142c1e53165fea78314117f59e13257d7bf85d/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs?ref=7d142c1e53165fea78314117f59e13257d7bf85d", "patch": "@@ -101,9 +101,7 @@ fn is_proc_macro_attr(attr: &ast::Attribute) -> bool {\n \n impl<'a> CollectProcMacros<'a> {\n     fn check_not_pub_in_root(&self, vis: &ast::Visibility, sp: Span) {\n-        if self.is_proc_macro_crate &&\n-           self.in_root &&\n-           vis.node.is_public() {\n+        if self.is_proc_macro_crate && self.in_root && vis.node.is_pub() {\n             self.handler.span_err(sp,\n                                   \"`proc-macro` crate types cannot \\\n                                    export any items other than functions \\\n@@ -181,7 +179,7 @@ impl<'a> CollectProcMacros<'a> {\n             Vec::new()\n         };\n \n-        if self.in_root && item.vis.node.is_public() {\n+        if self.in_root && item.vis.node.is_pub() {\n             self.derives.push(ProcMacroDerive {\n                 span: item.span,\n                 trait_name,\n@@ -206,7 +204,7 @@ impl<'a> CollectProcMacros<'a> {\n             return;\n         }\n \n-        if self.in_root && item.vis.node.is_public() {\n+        if self.in_root && item.vis.node.is_pub() {\n             self.attr_macros.push(ProcMacroDef {\n                 span: item.span,\n                 function_name: item.ident,\n@@ -229,7 +227,7 @@ impl<'a> CollectProcMacros<'a> {\n             return;\n         }\n \n-        if self.in_root && item.vis.node.is_public() {\n+        if self.in_root && item.vis.node.is_pub() {\n             self.bang_macros.push(ProcMacroDef {\n                 span: item.span,\n                 function_name: item.ident,"}]}