{"sha": "7dbccf5b556ece8e69355ee99d6f9bdcfbd71bbf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkYmNjZjViNTU2ZWNlOGU2OTM1NWVlOTlkNmY5YmRjZmJkNzFiYmY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-05T08:40:16Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-11T02:21:34Z"}, "message": "buffered lint infra -> rustc_session", "tree": {"sha": "46114710e06bbcd76f34af7c6841a73100b7ed80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46114710e06bbcd76f34af7c6841a73100b7ed80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7dbccf5b556ece8e69355ee99d6f9bdcfbd71bbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7dbccf5b556ece8e69355ee99d6f9bdcfbd71bbf", "html_url": "https://github.com/rust-lang/rust/commit/7dbccf5b556ece8e69355ee99d6f9bdcfbd71bbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7dbccf5b556ece8e69355ee99d6f9bdcfbd71bbf/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82eeb8573a7caa0b3dc4aaa8236e83fcff9779d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/82eeb8573a7caa0b3dc4aaa8236e83fcff9779d3", "html_url": "https://github.com/rust-lang/rust/commit/82eeb8573a7caa0b3dc4aaa8236e83fcff9779d3"}], "stats": {"total": 273, "additions": 136, "deletions": 137}, "files": [{"sha": "5b9db979750012523f5af4049fad514a7918316c", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7dbccf5b556ece8e69355ee99d6f9bdcfbd71bbf/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/7dbccf5b556ece8e69355ee99d6f9bdcfbd71bbf/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=7dbccf5b556ece8e69355ee99d6f9bdcfbd71bbf", "patch": "@@ -3630,6 +3630,7 @@ dependencies = [\n  \"rustc_plugin_impl\",\n  \"rustc_privacy\",\n  \"rustc_resolve\",\n+ \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\",\n  \"rustc_traits\","}, {"sha": "548b3e27ac69f84a73734638c0ee2d323b3eda64", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7dbccf5b556ece8e69355ee99d6f9bdcfbd71bbf/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dbccf5b556ece8e69355ee99d6f9bdcfbd71bbf/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=7dbccf5b556ece8e69355ee99d6f9bdcfbd71bbf", "patch": "@@ -9,10 +9,9 @@ use crate::middle::stability;\n use crate::session::Session;\n use rustc_errors::{pluralize, Applicability, DiagnosticBuilder};\n use rustc_session::declare_lint;\n+use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc_span::edition::Edition;\n use rustc_span::source_map::Span;\n-use rustc_span::symbol::Symbol;\n-use syntax::ast;\n use syntax::early_buffered_lints::{ILL_FORMED_ATTRIBUTE_INPUT, META_VARIABLE_MISUSE};\n \n declare_lint! {\n@@ -516,22 +515,6 @@ declare_lint_pass! {\n \n impl LateLintPass<'_, '_> for HardwiredLints {}\n \n-// This could be a closure, but then implementing derive trait\n-// becomes hacky (and it gets allocated).\n-#[derive(PartialEq)]\n-pub enum BuiltinLintDiagnostics {\n-    Normal,\n-    BareTraitObject(Span, /* is_global */ bool),\n-    AbsPathWithModule(Span),\n-    ProcMacroDeriveResolutionFallback(Span),\n-    MacroExpandedMacroExportsAccessedByAbsolutePaths(Span),\n-    ElidedLifetimesInPaths(usize, Span, bool, Span, String),\n-    UnknownCrateTypes(Span, String, String),\n-    UnusedImports(String, Vec<(Span, String)>),\n-    RedundantImport(Vec<(Span, bool)>, ast::Ident),\n-    DeprecatedMacro(Option<Symbol>, Span),\n-}\n-\n pub fn add_elided_lifetime_in_path_suggestion(\n     sess: &Session,\n     db: &mut DiagnosticBuilder<'_>,"}, {"sha": "759ab3749d2a7649288a6fe844748db56c856091", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7dbccf5b556ece8e69355ee99d6f9bdcfbd71bbf/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dbccf5b556ece8e69355ee99d6f9bdcfbd71bbf/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=7dbccf5b556ece8e69355ee99d6f9bdcfbd71bbf", "patch": "@@ -17,10 +17,8 @@\n use self::TargetLint::*;\n \n use crate::hir::map::{definitions::DisambiguatedDefPathData, DefPathData};\n-use crate::lint::builtin::BuiltinLintDiagnostics;\n use crate::lint::levels::{LintLevelSets, LintLevelsBuilder};\n use crate::lint::{EarlyLintPassObject, LateLintPassObject};\n-use crate::lint::{FutureIncompatibleInfo, Level, Lint, LintBuffer, LintId};\n use crate::middle::privacy::AccessLevels;\n use crate::session::Session;\n use crate::ty::layout::{LayoutError, LayoutOf, TyLayout};\n@@ -31,6 +29,8 @@ use rustc_error_codes::*;\n use rustc_errors::{struct_span_err, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, DefId};\n+use rustc_session::lint::BuiltinLintDiagnostics;\n+use rustc_session::lint::{FutureIncompatibleInfo, Level, Lint, LintBuffer, LintId};\n use rustc_span::{symbol::Symbol, MultiSpan, Span, DUMMY_SP};\n use syntax::ast;\n use syntax::util::lev_distance::find_best_match_for_name;\n@@ -64,17 +64,6 @@ pub struct LintStore {\n     lint_groups: FxHashMap<&'static str, LintGroup>,\n }\n \n-/// Lints that are buffered up early on in the `Session` before the\n-/// `LintLevels` is calculated\n-#[derive(PartialEq)]\n-pub struct BufferedEarlyLint {\n-    pub lint_id: LintId,\n-    pub ast_id: ast::NodeId,\n-    pub span: MultiSpan,\n-    pub msg: String,\n-    pub diagnostic: BuiltinLintDiagnostics,\n-}\n-\n /// The target of the `by_name` map, which accounts for renaming/deprecation.\n enum TargetLint {\n     /// A direct lint target"}, {"sha": "e59e8ce1c0a76cd25022fcca5771562e4fe21637", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 2, "deletions": 57, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/7dbccf5b556ece8e69355ee99d6f9bdcfbd71bbf/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dbccf5b556ece8e69355ee99d6f9bdcfbd71bbf/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=7dbccf5b556ece8e69355ee99d6f9bdcfbd71bbf", "patch": "@@ -21,12 +21,10 @@\n pub use self::Level::*;\n pub use self::LintSource::*;\n \n-use crate::lint::builtin::BuiltinLintDiagnostics;\n use crate::ty::TyCtxt;\n use rustc_data_structures::sync;\n use rustc_errors::{DiagnosticBuilder, DiagnosticId};\n use rustc_hir as hir;\n-use rustc_session::node_id::NodeMap;\n use rustc_session::{DiagnosticMessageId, Session};\n use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::{DesugaringKind, ExpnKind, MultiSpan};\n@@ -35,10 +33,10 @@ use rustc_span::Span;\n use syntax::ast;\n \n pub use crate::lint::context::{\n-    BufferedEarlyLint, CheckLintNameResult, EarlyContext, LateContext, LintContext, LintStore,\n+    CheckLintNameResult, EarlyContext, LateContext, LintContext, LintStore,\n };\n \n-pub use rustc_session::lint::{FutureIncompatibleInfo, Level, Lint, LintId};\n+pub use rustc_session::lint::{BufferedEarlyLint, FutureIncompatibleInfo, Level, Lint, LintId};\n \n /// Declares a static `LintArray` and return it as an expression.\n #[macro_export]\n@@ -373,59 +371,6 @@ mod levels;\n \n pub use self::levels::{LintLevelMap, LintLevelSets, LintLevelsBuilder};\n \n-#[derive(Default)]\n-pub struct LintBuffer {\n-    pub map: NodeMap<Vec<BufferedEarlyLint>>,\n-}\n-\n-impl LintBuffer {\n-    pub fn add_lint(\n-        &mut self,\n-        lint: &'static Lint,\n-        id: ast::NodeId,\n-        sp: MultiSpan,\n-        msg: &str,\n-        diagnostic: BuiltinLintDiagnostics,\n-    ) {\n-        let early_lint = BufferedEarlyLint {\n-            lint_id: LintId::of(lint),\n-            ast_id: id,\n-            span: sp,\n-            msg: msg.to_string(),\n-            diagnostic,\n-        };\n-        let arr = self.map.entry(id).or_default();\n-        if !arr.contains(&early_lint) {\n-            arr.push(early_lint);\n-        }\n-    }\n-\n-    pub fn take(&mut self, id: ast::NodeId) -> Vec<BufferedEarlyLint> {\n-        self.map.remove(&id).unwrap_or_default()\n-    }\n-\n-    pub fn buffer_lint<S: Into<MultiSpan>>(\n-        &mut self,\n-        lint: &'static Lint,\n-        id: ast::NodeId,\n-        sp: S,\n-        msg: &str,\n-    ) {\n-        self.add_lint(lint, id, sp.into(), msg, BuiltinLintDiagnostics::Normal)\n-    }\n-\n-    pub fn buffer_lint_with_diagnostic<S: Into<MultiSpan>>(\n-        &mut self,\n-        lint: &'static Lint,\n-        id: ast::NodeId,\n-        sp: S,\n-        msg: &str,\n-        diagnostic: BuiltinLintDiagnostics,\n-    ) {\n-        self.add_lint(lint, id, sp.into(), msg, diagnostic)\n-    }\n-}\n-\n pub fn struct_lint_level<'a>(\n     sess: &'a Session,\n     lint: &'static Lint,"}, {"sha": "17e84c24881c1da8ea0ee9f8658bf4d28039ab46", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7dbccf5b556ece8e69355ee99d6f9bdcfbd71bbf/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dbccf5b556ece8e69355ee99d6f9bdcfbd71bbf/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=7dbccf5b556ece8e69355ee99d6f9bdcfbd71bbf", "patch": "@@ -3,7 +3,6 @@\n \n pub use self::StabilityLevel::*;\n \n-use crate::lint::builtin::BuiltinLintDiagnostics;\n use crate::lint::{self, in_derive_expansion, Lint};\n use crate::session::{DiagnosticMessageId, Session};\n use crate::ty::{self, TyCtxt};\n@@ -14,6 +13,7 @@ use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX};\n use rustc_hir::{self, HirId};\n+use rustc_session::lint::{BuiltinLintDiagnostics, LintBuffer};\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{MultiSpan, Span};\n use syntax::ast::CRATE_NODE_ID;\n@@ -195,7 +195,7 @@ pub fn rustc_deprecation_message(depr: &RustcDeprecation, path: &str) -> (String\n }\n \n pub fn early_report_deprecation(\n-    lint_buffer: &'a mut lint::LintBuffer,\n+    lint_buffer: &'a mut LintBuffer,\n     message: &str,\n     suggestion: Option<Symbol>,\n     lint: &'static Lint,"}, {"sha": "77cb9ee35fff72757426ee76661086903f1b4472", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7dbccf5b556ece8e69355ee99d6f9bdcfbd71bbf/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dbccf5b556ece8e69355ee99d6f9bdcfbd71bbf/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=7dbccf5b556ece8e69355ee99d6f9bdcfbd71bbf", "patch": "@@ -37,7 +37,6 @@ use rustc::arena::Arena;\n use rustc::dep_graph::DepGraph;\n use rustc::hir::map::definitions::{DefKey, DefPathData, Definitions};\n use rustc::hir::map::Map;\n-use rustc::lint;\n use rustc::lint::builtin;\n use rustc::{bug, span_bug};\n use rustc_data_structures::captures::Captures;\n@@ -52,6 +51,7 @@ use rustc_hir::intravisit;\n use rustc_hir::{ConstArg, GenericArg, ParamName};\n use rustc_index::vec::IndexVec;\n use rustc_session::config::nightly_options;\n+use rustc_session::lint::{BuiltinLintDiagnostics, LintBuffer};\n use rustc_session::node_id::NodeMap;\n use rustc_session::Session;\n use rustc_span::hygiene::ExpnId;\n@@ -198,7 +198,7 @@ pub trait Resolver {\n         ns: Namespace,\n     ) -> (ast::Path, Res<NodeId>);\n \n-    fn lint_buffer(&mut self) -> &mut lint::LintBuffer;\n+    fn lint_buffer(&mut self) -> &mut LintBuffer;\n \n     fn next_node_id(&mut self) -> NodeId;\n }\n@@ -2617,7 +2617,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 id,\n                 span,\n                 \"trait objects without an explicit `dyn` are deprecated\",\n-                builtin::BuiltinLintDiagnostics::BareTraitObject(span, is_global),\n+                BuiltinLintDiagnostics::BareTraitObject(span, is_global),\n             )\n         }\n     }"}, {"sha": "b50295ebaae5511e8592ac7a3d8145552b0f4f9d", "filename": "src/librustc_ast_lowering/path.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7dbccf5b556ece8e69355ee99d6f9bdcfbd71bbf/src%2Flibrustc_ast_lowering%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dbccf5b556ece8e69355ee99d6f9bdcfbd71bbf/src%2Flibrustc_ast_lowering%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fpath.rs?ref=7dbccf5b556ece8e69355ee99d6f9bdcfbd71bbf", "patch": "@@ -1,14 +1,15 @@\n use super::{AnonymousLifetimeMode, ImplTraitContext, LoweringContext, ParamMode};\n use super::{GenericArgsCtor, ParenthesizedGenericArgs};\n \n-use rustc::lint::builtin::{self, ELIDED_LIFETIMES_IN_PATHS};\n+use rustc::lint::builtin::ELIDED_LIFETIMES_IN_PATHS;\n use rustc::span_bug;\n use rustc_error_codes::*;\n use rustc_errors::{struct_span_err, Applicability};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, PartialRes, Res};\n use rustc_hir::def_id::DefId;\n use rustc_hir::GenericArg;\n+use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc_span::Span;\n use syntax::ast::{self, *};\n \n@@ -304,7 +305,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             E0726,\n                             \"implicit elided lifetime not allowed here\"\n                         );\n-                        crate::lint::builtin::add_elided_lifetime_in_path_suggestion(\n+                        rustc::lint::builtin::add_elided_lifetime_in_path_suggestion(\n                             &self.sess,\n                             &mut err,\n                             expected_lifetimes,\n@@ -321,7 +322,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             CRATE_NODE_ID,\n                             path_span,\n                             \"hidden lifetime parameters in types are deprecated\",\n-                            builtin::BuiltinLintDiagnostics::ElidedLifetimesInPaths(\n+                            BuiltinLintDiagnostics::ElidedLifetimesInPaths(\n                                 expected_lifetimes,\n                                 path_span,\n                                 incl_angl_brckt,"}, {"sha": "9bd19fb38e7717f3f4f5b722e0796f73653b0bf2", "filename": "src/librustc_interface/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7dbccf5b556ece8e69355ee99d6f9bdcfbd71bbf/src%2Flibrustc_interface%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7dbccf5b556ece8e69355ee99d6f9bdcfbd71bbf/src%2Flibrustc_interface%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2FCargo.toml?ref=7dbccf5b556ece8e69355ee99d6f9bdcfbd71bbf", "patch": "@@ -17,6 +17,7 @@ syntax = { path = \"../libsyntax\" }\n rustc_builtin_macros = { path = \"../librustc_builtin_macros\" }\n rustc_expand = { path = \"../librustc_expand\" }\n rustc_parse = { path = \"../librustc_parse\" }\n+rustc_session = { path = \"../librustc_session\" }\n rustc_span = { path = \"../librustc_span\" }\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n rustc = { path = \"../librustc\" }"}, {"sha": "e8210bfacd3bdbe8aa5800c1bfd55e2b48c9cd61", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7dbccf5b556ece8e69355ee99d6f9bdcfbd71bbf/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dbccf5b556ece8e69355ee99d6f9bdcfbd71bbf/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=7dbccf5b556ece8e69355ee99d6f9bdcfbd71bbf", "patch": "@@ -37,7 +37,6 @@ use rustc_span::symbol::Symbol;\n use rustc_span::FileName;\n use rustc_traits;\n use rustc_typeck as typeck;\n-use syntax::early_buffered_lints::BufferedEarlyLint;\n use syntax::mut_visit::MutVisitor;\n use syntax::util::node_count::NodeCounter;\n use syntax::{self, ast, visit};\n@@ -411,8 +410,8 @@ fn configure_and_expand_inner<'a>(\n     // Add all buffered lints from the `ParseSess` to the `Session`.\n     sess.parse_sess.buffered_lints.with_lock(|buffered_lints| {\n         info!(\"{} parse sess buffered_lints\", buffered_lints.len());\n-        for BufferedEarlyLint { id, span, msg, lint_id } in buffered_lints.drain(..) {\n-            resolver.lint_buffer().buffer_lint(lint_id, id, span, &msg);\n+        for early_lint in buffered_lints.drain(..) {\n+            resolver.lint_buffer().add_early_lint(early_lint);\n         }\n     });\n "}, {"sha": "2fafd3af7a5ff2d406b1d0386fd95debe2c30110", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7dbccf5b556ece8e69355ee99d6f9bdcfbd71bbf/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dbccf5b556ece8e69355ee99d6f9bdcfbd71bbf/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=7dbccf5b556ece8e69355ee99d6f9bdcfbd71bbf", "patch": "@@ -1,8 +1,5 @@\n use log::info;\n use rustc::lint;\n-use rustc::session::config::{ErrorOutputType, Input, OutputFilenames};\n-use rustc::session::CrateDisambiguator;\n-use rustc::session::{self, config, early_error, filesearch, DiagnosticOutput, Session};\n use rustc::ty;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use rustc_data_structures::fingerprint::Fingerprint;\n@@ -14,6 +11,11 @@ use rustc_data_structures::sync::{Lock, Lrc};\n use rustc_errors::registry::Registry;\n use rustc_metadata::dynamic_lib::DynamicLibrary;\n use rustc_resolve::{self, Resolver};\n+use rustc_session as session;\n+use rustc_session::config::{ErrorOutputType, Input, OutputFilenames};\n+use rustc_session::lint::{BuiltinLintDiagnostics, LintBuffer};\n+use rustc_session::CrateDisambiguator;\n+use rustc_session::{config, early_error, filesearch, DiagnosticOutput, Session};\n use rustc_span::edition::Edition;\n use rustc_span::source_map::{FileLoader, RealFileLoader, SourceMap};\n use rustc_span::symbol::{sym, Symbol};\n@@ -420,7 +422,7 @@ pub(crate) fn compute_crate_disambiguator(session: &Session) -> CrateDisambiguat\n     CrateDisambiguator::from(hasher.finish::<Fingerprint>())\n }\n \n-pub(crate) fn check_attr_crate_type(attrs: &[ast::Attribute], lint_buffer: &mut lint::LintBuffer) {\n+pub(crate) fn check_attr_crate_type(attrs: &[ast::Attribute], lint_buffer: &mut LintBuffer) {\n     // Unconditionally collect crate types from attributes to make them used\n     for a in attrs.iter() {\n         if a.check_name(sym::crate_type) {\n@@ -442,7 +444,7 @@ pub(crate) fn check_attr_crate_type(attrs: &[ast::Attribute], lint_buffer: &mut\n                             ast::CRATE_NODE_ID,\n                             span,\n                             \"invalid `crate_type` value\",\n-                            lint::builtin::BuiltinLintDiagnostics::UnknownCrateTypes(\n+                            BuiltinLintDiagnostics::UnknownCrateTypes(\n                                 span,\n                                 \"did you mean\".to_string(),\n                                 format!(\"\\\"{}\\\"\", candidate),"}, {"sha": "9a901719851589d7bade9d0e796d34e1650f608e", "filename": "src/librustc_lint/early.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7dbccf5b556ece8e69355ee99d6f9bdcfbd71bbf/src%2Flibrustc_lint%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dbccf5b556ece8e69355ee99d6f9bdcfbd71bbf/src%2Flibrustc_lint%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fearly.rs?ref=7dbccf5b556ece8e69355ee99d6f9bdcfbd71bbf", "patch": "@@ -16,15 +16,15 @@\n \n use rustc::lint::{EarlyContext, LintStore};\n use rustc::lint::{EarlyLintPass, EarlyLintPassObject};\n-use rustc::lint::{LintBuffer, LintContext, LintPass};\n-use rustc::session::Session;\n-\n+use rustc::lint::{LintContext, LintPass};\n+use rustc_session::lint::LintBuffer;\n+use rustc_session::Session;\n use rustc_span::Span;\n-use std::slice;\n use syntax::ast;\n use syntax::visit as ast_visit;\n \n use log::debug;\n+use std::slice;\n \n macro_rules! run_early_pass { ($cx:expr, $f:ident, $($args:expr),*) => ({\n     $cx.pass.$f(&$cx.context, $($args),*);"}, {"sha": "bc8d8a414c44d51826090466a90889d8677b9cbc", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7dbccf5b556ece8e69355ee99d6f9bdcfbd71bbf/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dbccf5b556ece8e69355ee99d6f9bdcfbd71bbf/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=7dbccf5b556ece8e69355ee99d6f9bdcfbd71bbf", "patch": "@@ -6,10 +6,11 @@\n // This pass is supposed to perform only simple checks not requiring name resolution\n // or type checking or some other kind of complex analysis.\n \n-use rustc::lint;\n+use rustc::lint::builtin::PATTERNS_IN_FNS_WITHOUT_BODY;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{struct_span_err, Applicability, FatalError};\n use rustc_parse::validate_attr;\n+use rustc_session::lint::LintBuffer;\n use rustc_session::Session;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym};\n@@ -65,7 +66,7 @@ struct AstValidator<'a> {\n     /// certain positions.\n     is_assoc_ty_bound_banned: bool,\n \n-    lint_buffer: &'a mut lint::LintBuffer,\n+    lint_buffer: &'a mut LintBuffer,\n }\n \n impl<'a> AstValidator<'a> {\n@@ -992,7 +993,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 Self::check_decl_no_pat(&sig.decl, |span, mut_ident| {\n                     if mut_ident {\n                         self.lint_buffer.buffer_lint(\n-                            lint::builtin::PATTERNS_IN_FNS_WITHOUT_BODY,\n+                            PATTERNS_IN_FNS_WITHOUT_BODY,\n                             ti.id,\n                             span,\n                             \"patterns aren't allowed in methods without bodies\",\n@@ -1021,7 +1022,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n     }\n }\n \n-pub fn check_crate(session: &Session, krate: &Crate, lints: &mut lint::LintBuffer) -> bool {\n+pub fn check_crate(session: &Session, krate: &Crate, lints: &mut LintBuffer) -> bool {\n     let mut validator = AstValidator {\n         session,\n         has_proc_macro_decls: false,"}, {"sha": "4a6df92d82260fda278de716af1ce5f44fb14bfc", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7dbccf5b556ece8e69355ee99d6f9bdcfbd71bbf/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dbccf5b556ece8e69355ee99d6f9bdcfbd71bbf/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=7dbccf5b556ece8e69355ee99d6f9bdcfbd71bbf", "patch": "@@ -29,6 +29,7 @@ use crate::Resolver;\n use rustc::{lint, ty};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::pluralize;\n+use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc_session::node_id::NodeMap;\n use rustc_span::{MultiSpan, Span, DUMMY_SP};\n use syntax::ast;\n@@ -317,7 +318,7 @@ impl Resolver<'_> {\n                 unused.use_tree_id,\n                 ms,\n                 &msg,\n-                lint::builtin::BuiltinLintDiagnostics::UnusedImports(fix_msg.into(), fixes),\n+                BuiltinLintDiagnostics::UnusedImports(fix_msg.into(), fixes),\n             );\n         }\n     }"}, {"sha": "ecd51b1ee0519fed8b0daa8e142493d5b245daae", "filename": "src/librustc_resolve/imports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7dbccf5b556ece8e69355ee99d6f9bdcfbd71bbf/src%2Flibrustc_resolve%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dbccf5b556ece8e69355ee99d6f9bdcfbd71bbf/src%2Flibrustc_resolve%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fimports.rs?ref=7dbccf5b556ece8e69355ee99d6f9bdcfbd71bbf", "patch": "@@ -12,9 +12,9 @@ use crate::{CrateLint, Module, ModuleOrUniformRoot, ParentScope, PerNS, ScopeSet\n use crate::{NameBinding, NameBindingKind, PathResult, PrivacyError, ToNameBinding};\n \n use rustc::hir::exports::Export;\n-use rustc::lint::builtin::BuiltinLintDiagnostics;\n use rustc::lint::builtin::{PUB_USE_OF_PRIVATE_EXTERN_CRATE, UNUSED_IMPORTS};\n-use rustc::session::DiagnosticMessageId;\n+use rustc_session::DiagnosticMessageId;\n+use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc::ty;\n use rustc::{bug, span_bug};\n use rustc_data_structures::fx::FxHashSet;"}, {"sha": "8e4630cf7d69641cac65ad7031e8307037b9123b", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7dbccf5b556ece8e69355ee99d6f9bdcfbd71bbf/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dbccf5b556ece8e69355ee99d6f9bdcfbd71bbf/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=7dbccf5b556ece8e69355ee99d6f9bdcfbd71bbf", "patch": "@@ -24,7 +24,6 @@ use rustc::hir::exports::ExportMap;\n use rustc::hir::map::{DefKey, Definitions};\n use rustc::lint;\n use rustc::middle::cstore::{CrateStore, MetadataLoaderDyn};\n-use rustc::session::Session;\n use rustc::span_bug;\n use rustc::ty::query::Providers;\n use rustc::ty::{self, DefIdTree, ResolverOutputs};\n@@ -39,7 +38,9 @@ use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, CRATE_DEF_INDEX, LOCAL_CRATE}\n use rustc_hir::PrimTy::{self, Bool, Char, Float, Int, Str, Uint};\n use rustc_hir::{GlobMap, TraitMap};\n use rustc_metadata::creader::{CStore, CrateLoader};\n+use rustc_session::lint::{BuiltinLintDiagnostics, LintBuffer};\n use rustc_session::node_id::{NodeMap, NodeSet};\n+use rustc_session::Session;\n use rustc_span::hygiene::{ExpnId, ExpnKind, MacroKind, SyntaxContext, Transparency};\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym};\n@@ -960,7 +961,7 @@ pub struct Resolver<'a> {\n     /// when visiting the correspondent variants.\n     variant_vis: DefIdMap<ty::Visibility>,\n \n-    lint_buffer: lint::LintBuffer,\n+    lint_buffer: LintBuffer,\n \n     next_node_id: NodeId,\n }\n@@ -1082,7 +1083,7 @@ impl rustc_ast_lowering::Resolver for Resolver<'_> {\n         &mut self.definitions\n     }\n \n-    fn lint_buffer(&mut self) -> &mut lint::LintBuffer {\n+    fn lint_buffer(&mut self) -> &mut LintBuffer {\n         &mut self.lint_buffer\n     }\n \n@@ -1241,7 +1242,7 @@ impl<'a> Resolver<'a> {\n                 .chain(features.declared_lang_features.iter().map(|(feat, ..)| *feat))\n                 .collect(),\n             variant_vis: Default::default(),\n-            lint_buffer: lint::LintBuffer::default(),\n+            lint_buffer: LintBuffer::default(),\n             next_node_id: NodeId::from_u32(1),\n         }\n     }\n@@ -1256,7 +1257,7 @@ impl<'a> Resolver<'a> {\n         self.next_node_id\n     }\n \n-    pub fn lint_buffer(&mut self) -> &mut lint::LintBuffer {\n+    pub fn lint_buffer(&mut self) -> &mut LintBuffer {\n         &mut self.lint_buffer\n     }\n \n@@ -1713,10 +1714,10 @@ impl<'a> Resolver<'a> {\n                     if let Some(node_id) = poisoned {\n                         self.lint_buffer.buffer_lint_with_diagnostic(\n                             lint::builtin::PROC_MACRO_DERIVE_RESOLUTION_FALLBACK,\n-                            node_id, ident.span,\n+                            node_id,\n+                            ident.span,\n                             &format!(\"cannot find {} `{}` in this scope\", ns.descr(), ident),\n-                            lint::builtin::BuiltinLintDiagnostics::\n-                                ProcMacroDeriveResolutionFallback(ident.span),\n+                            BuiltinLintDiagnostics::ProcMacroDeriveResolutionFallback(ident.span),\n                         );\n                     }\n                     return Some(LexicalScopeBinding::Item(binding));\n@@ -2267,7 +2268,7 @@ impl<'a> Resolver<'a> {\n             }\n         }\n \n-        let diag = lint::builtin::BuiltinLintDiagnostics::AbsPathWithModule(diag_span);\n+        let diag = BuiltinLintDiagnostics::AbsPathWithModule(diag_span);\n         self.lint_buffer.buffer_lint_with_diagnostic(\n             lint::builtin::ABSOLUTE_PATHS_NOT_STARTING_WITH_CRATE,\n             diag_id,\n@@ -2562,9 +2563,10 @@ impl<'a> Resolver<'a> {\n                        cannot be referred to by absolute paths\";\n             self.lint_buffer.buffer_lint_with_diagnostic(\n                 lint::builtin::MACRO_EXPANDED_MACRO_EXPORTS_ACCESSED_BY_ABSOLUTE_PATHS,\n-                CRATE_NODE_ID, span_use, msg,\n-                lint::builtin::BuiltinLintDiagnostics::\n-                    MacroExpandedMacroExportsAccessedByAbsolutePaths(span_def),\n+                CRATE_NODE_ID,\n+                span_use,\n+                msg,\n+                BuiltinLintDiagnostics::MacroExpandedMacroExportsAccessedByAbsolutePaths(span_def),\n             );\n         }\n "}, {"sha": "24e42928f638abb4ad3bbf3c1ec95cd9fd9309da", "filename": "src/librustc_session/lint.rs", "status": "modified", "additions": 78, "deletions": 5, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/7dbccf5b556ece8e69355ee99d6f9bdcfbd71bbf/src%2Flibrustc_session%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dbccf5b556ece8e69355ee99d6f9bdcfbd71bbf/src%2Flibrustc_session%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Flint.rs?ref=7dbccf5b556ece8e69355ee99d6f9bdcfbd71bbf", "patch": "@@ -1,8 +1,8 @@\n pub use self::Level::*;\n-use crate::node_id::NodeId;\n+use crate::node_id::{NodeId, NodeMap};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher, ToStableHashKey};\n use rustc_span::edition::Edition;\n-use rustc_span::{sym, MultiSpan, Symbol};\n+use rustc_span::{sym, symbol::Ident, MultiSpan, Span, Symbol};\n \n /// Setting for how to handle a lint.\n #[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]\n@@ -174,7 +174,25 @@ impl<HCX> ToStableHashKey<HCX> for LintId {\n     }\n }\n \n-/// Stores buffered lint info which can later be passed to `librustc`.\n+// This could be a closure, but then implementing derive trait\n+// becomes hacky (and it gets allocated).\n+#[derive(PartialEq)]\n+pub enum BuiltinLintDiagnostics {\n+    Normal,\n+    BareTraitObject(Span, /* is_global */ bool),\n+    AbsPathWithModule(Span),\n+    ProcMacroDeriveResolutionFallback(Span),\n+    MacroExpandedMacroExportsAccessedByAbsolutePaths(Span),\n+    ElidedLifetimesInPaths(usize, Span, bool, Span, String),\n+    UnknownCrateTypes(Span, String, String),\n+    UnusedImports(String, Vec<(Span, String)>),\n+    RedundantImport(Vec<(Span, bool)>, Ident),\n+    DeprecatedMacro(Option<Symbol>, Span),\n+}\n+\n+/// Lints that are buffered up early on in the `Session` before the\n+/// `LintLevels` is calculated. These are later passed to `librustc`.\n+#[derive(PartialEq)]\n pub struct BufferedEarlyLint {\n     /// The span of code that we are linting on.\n     pub span: MultiSpan,\n@@ -183,10 +201,65 @@ pub struct BufferedEarlyLint {\n     pub msg: String,\n \n     /// The `NodeId` of the AST node that generated the lint.\n-    pub id: NodeId,\n+    pub node_id: NodeId,\n \n     /// A lint Id that can be passed to `rustc::lint::Lint::from_parser_lint_id`.\n-    pub lint_id: &'static Lint,\n+    pub lint_id: LintId,\n+\n+    /// Customization of the `DiagnosticBuilder<'_>` for the lint.\n+    pub diagnostic: BuiltinLintDiagnostics,\n+}\n+\n+#[derive(Default)]\n+pub struct LintBuffer {\n+    pub map: NodeMap<Vec<BufferedEarlyLint>>,\n+}\n+\n+impl LintBuffer {\n+    pub fn add_early_lint(&mut self, early_lint: BufferedEarlyLint) {\n+        let arr = self.map.entry(early_lint.node_id).or_default();\n+        if !arr.contains(&early_lint) {\n+            arr.push(early_lint);\n+        }\n+    }\n+\n+    pub fn add_lint(\n+        &mut self,\n+        lint: &'static Lint,\n+        node_id: NodeId,\n+        span: MultiSpan,\n+        msg: &str,\n+        diagnostic: BuiltinLintDiagnostics,\n+    ) {\n+        let lint_id = LintId::of(lint);\n+        let msg = msg.to_string();\n+        self.add_early_lint(BufferedEarlyLint { lint_id, node_id, span, msg, diagnostic });\n+    }\n+\n+    pub fn take(&mut self, id: NodeId) -> Vec<BufferedEarlyLint> {\n+        self.map.remove(&id).unwrap_or_default()\n+    }\n+\n+    pub fn buffer_lint(\n+        &mut self,\n+        lint: &'static Lint,\n+        id: NodeId,\n+        sp: impl Into<MultiSpan>,\n+        msg: &str,\n+    ) {\n+        self.add_lint(lint, id, sp.into(), msg, BuiltinLintDiagnostics::Normal)\n+    }\n+\n+    pub fn buffer_lint_with_diagnostic(\n+        &mut self,\n+        lint: &'static Lint,\n+        id: NodeId,\n+        sp: impl Into<MultiSpan>,\n+        msg: &str,\n+        diagnostic: BuiltinLintDiagnostics,\n+    ) {\n+        self.add_lint(lint, id, sp.into(), msg, diagnostic)\n+    }\n }\n \n /// Declares a static item of type `&'static Lint`."}, {"sha": "0e342939ff1af210f7cdf91e9a7c7d915533ebc8", "filename": "src/librustc_session/parse.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7dbccf5b556ece8e69355ee99d6f9bdcfbd71bbf/src%2Flibrustc_session%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dbccf5b556ece8e69355ee99d6f9bdcfbd71bbf/src%2Flibrustc_session%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fparse.rs?ref=7dbccf5b556ece8e69355ee99d6f9bdcfbd71bbf", "patch": "@@ -1,7 +1,7 @@\n //! Contains `ParseSess` which holds state living beyond what one `Parser` might.\n //! It also serves as an input to the parser itself.\n \n-use crate::lint::BufferedEarlyLint;\n+use crate::lint::{BufferedEarlyLint, BuiltinLintDiagnostics, Lint, LintId};\n use crate::node_id::NodeId;\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -210,17 +210,18 @@ impl ParseSess {\n \n     pub fn buffer_lint(\n         &self,\n-        lint_id: &'static crate::lint::Lint,\n+        lint: &'static Lint,\n         span: impl Into<MultiSpan>,\n-        id: NodeId,\n+        node_id: NodeId,\n         msg: &str,\n     ) {\n         self.buffered_lints.with_lock(|buffered_lints| {\n             buffered_lints.push(BufferedEarlyLint {\n                 span: span.into(),\n-                id,\n+                node_id,\n                 msg: msg.into(),\n-                lint_id,\n+                lint_id: LintId::of(lint),\n+                diagnostic: BuiltinLintDiagnostics::Normal,\n             });\n         });\n     }"}]}