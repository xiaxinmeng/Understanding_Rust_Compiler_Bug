{"sha": "2405c81c65586df5c65ae8670151b5237edf4398", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0MDVjODFjNjU1ODZkZjVjNjVhZTg2NzAxNTFiNTIzN2VkZjQzOTg=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-01T15:05:20Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-01T16:50:20Z"}, "message": "stepwise interpretation", "tree": {"sha": "d0031cdbc6a36432f0f6c96e74c561046110f7f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0031cdbc6a36432f0f6c96e74c561046110f7f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2405c81c65586df5c65ae8670151b5237edf4398", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXTxJMAAoJEFbW7qD8Z6xG3yUQAJ+EaRpSbYd7Y2KW1quT4E7j\nBqgSy8sF27FS7pKGtj71DIB61HRGFots2qqAjAxBWMRdbXuUKcZVDTLjqHLB5413\nauqtG3GB85MFnVNuQ9FyZDWxeXOWGPixKCZCU+qsuIT+3gvuHAWFFEyS82RjQSq4\nbh9sGqeykGbu7N+bGAzwJO+U/V7MOC3cUWzLdsUuGTzd1FzbUIRVRlS+H88gVGcz\nYAiVO7gHvObUV0TRaZAyT1Z5Gay1CyaFHLr+xspZJR/h9JYf5b4lIf1smAYNyUc7\n+6U/5aUQBIqR40gJQJZs64/zWxkscUPEem23/DLJGrxMsTjo3qHapVDTGA3YEc4D\nBo26B1/Lf/OGsDJ2s8qj//DBeG/m8YVbfrdTTjoZ5X3FBJVjfMt4Mc34DGQs6GOO\nMcfCXLdeffIpL3TlWXvOloi1PizzRenWwR/nat7n1K43ufl7VP1coE/iTY2jeoTf\nbqeHTdPIgde3zDmHVINtrXqbtsS3EcIAdJc3S+bvHa/KM70w0sJQoRniGB5S0KL/\njUaijtIWz5iBS06j/BthsTvEZFv6eKv9EjpJWUrCVjX+GyHhyX49Cr9WfQgyXEsK\nuNTzB/S2HpSZoNdhjwWCR+B/V/fab3PCyHm1HbOkI5qhQ7OF52U4atSRgzWjL+DF\nuQRcKtiRc4UausceSEj+\n=1ddN\n-----END PGP SIGNATURE-----", "payload": "tree d0031cdbc6a36432f0f6c96e74c561046110f7f3\nparent 5a8b0ab5798704fce6ae7fe8fd7073bd48fd244b\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1464793520 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1464799820 +0200\n\nstepwise interpretation"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2405c81c65586df5c65ae8670151b5237edf4398", "html_url": "https://github.com/rust-lang/rust/commit/2405c81c65586df5c65ae8670151b5237edf4398", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2405c81c65586df5c65ae8670151b5237edf4398/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a8b0ab5798704fce6ae7fe8fd7073bd48fd244b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a8b0ab5798704fce6ae7fe8fd7073bd48fd244b", "html_url": "https://github.com/rust-lang/rust/commit/5a8b0ab5798704fce6ae7fe8fd7073bd48fd244b"}], "stats": {"total": 131, "additions": 105, "deletions": 26}, "files": [{"sha": "7793c0df282157392cde04ad0c831bbc96e3fa73", "filename": "src/interpreter/iterator.rs", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/2405c81c65586df5c65ae8670151b5237edf4398/src%2Finterpreter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2405c81c65586df5c65ae8670151b5237edf4398/src%2Finterpreter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fiterator.rs?ref=2405c81c65586df5c65ae8670151b5237edf4398", "patch": "@@ -0,0 +1,92 @@\n+use super::{\n+    FnEvalContext,\n+    CachedMir,\n+    TerminatorTarget,\n+};\n+use error::EvalResult;\n+use rustc::mir::repr as mir;\n+\n+pub enum Event<'a, 'tcx: 'a> {\n+    Assignment(&'a mir::Statement<'tcx>),\n+    Terminator(&'a mir::Terminator<'tcx>),\n+    Done,\n+}\n+\n+pub struct Stepper<'fncx, 'a: 'fncx, 'b: 'a + 'mir, 'mir: 'fncx, 'tcx: 'b>{\n+    fncx: &'fncx mut FnEvalContext<'a, 'b, 'mir, 'tcx>,\n+    block: mir::BasicBlock,\n+    stmt: usize,\n+    mir: CachedMir<'mir, 'tcx>,\n+    process: fn (&mut Stepper<'fncx, 'a, 'b, 'mir, 'tcx>) -> EvalResult<()>,\n+}\n+\n+impl<'fncx, 'a, 'b: 'a + 'mir, 'mir, 'tcx: 'b> Stepper<'fncx, 'a, 'b, 'mir, 'tcx> {\n+    pub(super) fn new(fncx: &'fncx mut FnEvalContext<'a, 'b, 'mir, 'tcx>) -> Self {\n+        Stepper {\n+            block: fncx.frame().next_block,\n+            mir: fncx.mir(),\n+            fncx: fncx,\n+            stmt: 0,\n+            process: Self::dummy,\n+        }\n+    }\n+    fn dummy(&mut self) -> EvalResult<()> { Ok(()) }\n+    fn statement(&mut self) -> EvalResult<()> {\n+        let block_data = self.mir.basic_block_data(self.block);\n+        let stmt = &block_data.statements[self.stmt];\n+        let mir::StatementKind::Assign(ref lvalue, ref rvalue) = stmt.kind;\n+        let result = self.fncx.eval_assignment(lvalue, rvalue);\n+        self.fncx.maybe_report(stmt.span, result)?;\n+        self.stmt += 1;\n+        Ok(())\n+    }\n+    fn terminator(&mut self) -> EvalResult<()> {\n+        self.stmt = 0;\n+        let term = {\n+            let block_data = self.mir.basic_block_data(self.block);\n+            let terminator = block_data.terminator();\n+            let result = self.fncx.eval_terminator(terminator);\n+            self.fncx.maybe_report(terminator.span, result)?\n+        };\n+        match term {\n+            TerminatorTarget::Block(block) => {\n+                self.block = block;\n+            },\n+            TerminatorTarget::Return => {\n+                self.fncx.pop_stack_frame();\n+                self.fncx.name_stack.pop();\n+                if !self.fncx.stack.is_empty() {\n+                    self.block = self.fncx.frame().next_block;\n+                    self.mir = self.fncx.mir();\n+                }\n+            },\n+            TerminatorTarget::Call => {\n+                self.block = self.fncx.frame().next_block;\n+                self.mir = self.fncx.mir();\n+            },\n+        }\n+        Ok(())\n+    }\n+    pub fn step<'step>(&'step mut self) -> EvalResult<Event<'step, 'tcx>> {\n+        (self.process)(self)?;\n+\n+        if self.fncx.stack.is_empty() {\n+            // fuse the iterator\n+            self.process = Self::dummy;\n+            return Ok(Event::Done);\n+        }\n+\n+        let basic_block = self.mir.basic_block_data(self.block);\n+\n+        if let Some(stmt) = basic_block.statements.get(self.stmt) {\n+            self.process = Self::statement;\n+            return Ok(Event::Assignment(&stmt));\n+        }\n+\n+        self.process = Self::terminator;\n+        Ok(Event::Terminator(basic_block.terminator()))\n+    }\n+    pub fn block(&self) -> mir::BasicBlock {\n+        self.block\n+    }\n+}"}, {"sha": "8b93edd888c6c8fe24716356a6abb786fa07c887", "filename": "src/interpreter/mod.rs", "status": "renamed", "additions": 12, "deletions": 26, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/2405c81c65586df5c65ae8670151b5237edf4398/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2405c81c65586df5c65ae8670151b5237edf4398/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=2405c81c65586df5c65ae8670151b5237edf4398", "patch": "@@ -20,6 +20,8 @@ use error::{EvalError, EvalResult};\n use memory::{Memory, Pointer};\n use primval::{self, PrimVal};\n \n+mod iterator;\n+\n struct GlobalEvalContext<'a, 'tcx: 'a> {\n     /// The results of the type checker, from rustc.\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n@@ -184,38 +186,22 @@ impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n     }\n \n     fn run(&mut self) -> EvalResult<()> {\n-        'outer: while !self.stack.is_empty() {\n-            let mut current_block = self.frame().next_block;\n-            let current_mir = self.mir();\n+        let mut stepper = iterator::Stepper::new(self);\n+        'outer: loop {\n+            use self::iterator::Event::*;\n+            trace!(\"// {:?}\", stepper.block());\n \n             loop {\n-                trace!(\"// {:?}\", current_block);\n-                let block_data = current_mir.basic_block_data(current_block);\n-\n-                for stmt in &block_data.statements {\n-                    trace!(\"{:?}\", stmt);\n-                    let mir::StatementKind::Assign(ref lvalue, ref rvalue) = stmt.kind;\n-                    let result = self.eval_assignment(lvalue, rvalue);\n-                    self.maybe_report(stmt.span, result)?;\n-                }\n-\n-                let terminator = block_data.terminator();\n-                trace!(\"{:?}\", terminator.kind);\n-\n-                let result = self.eval_terminator(terminator);\n-                match self.maybe_report(terminator.span, result)? {\n-                    TerminatorTarget::Block(block) => current_block = block,\n-                    TerminatorTarget::Return => {\n-                        self.pop_stack_frame();\n-                        self.name_stack.pop();\n+                match stepper.step()? {\n+                    Assignment(statement) => trace!(\"{:?}\", statement),\n+                    Terminator(terminator) => {\n+                        trace!(\"{:?}\", terminator.kind);\n                         continue 'outer;\n-                    }\n-                    TerminatorTarget::Call => continue 'outer,\n+                    },\n+                    Done => return Ok(()),\n                 }\n             }\n         }\n-\n-        Ok(())\n     }\n \n     fn push_stack_frame(&mut self, mir: CachedMir<'mir, 'tcx>, substs: &'tcx Substs<'tcx>,", "previous_filename": "src/interpreter.rs"}, {"sha": "4e06a3ce38d569fe0c34d9793cbdfbe53d4405b7", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2405c81c65586df5c65ae8670151b5237edf4398/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2405c81c65586df5c65ae8670151b5237edf4398/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=2405c81c65586df5c65ae8670151b5237edf4398", "patch": "@@ -6,6 +6,7 @@\n     filling_drop,\n     question_mark,\n     rustc_private,\n+    pub_restricted,\n )]\n \n // From rustc."}]}