{"sha": "99e6e3ff078162ffec3bb5fd810d54246add2196", "node_id": "C_kwDOAAsO6NoAKDk5ZTZlM2ZmMDc4MTYyZmZlYzNiYjVmZDgxMGQ1NDI0NmFkZDIxOTY", "commit": {"author": {"name": "Jubilee", "email": "46493976+workingjubilee@users.noreply.github.com", "date": "2021-10-05T04:12:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-05T04:12:33Z"}, "message": "Rollup merge of #87993 - kornelski:try_reserve_stable, r=joshtriplett\n\nStabilize try_reserve\n\nStabilization PR for the [`try_reserve` feature](https://github.com/rust-lang/rust/issues/48043#issuecomment-898040475).", "tree": {"sha": "b4bbb5ab9b78e9aa8e4363ca4401f2a234601702", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4bbb5ab9b78e9aa8e4363ca4401f2a234601702"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99e6e3ff078162ffec3bb5fd810d54246add2196", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhW9CxCRBK7hj4Ov3rIwAAx1oIAGBo9QvMuXeZx/cm1FWeGjth\nLrcIzTlughX2yAZosB5uTNk4RCoL8mEMqbdxp8JBmJTQKA9r9NWIf6Q7S3gyzTtr\n6gWfRWgg0wkvOaajnNUPMvgKt77sC+2lsuaIqqEYGhwj6tbJ6oI0S6EomjVlsrLk\nwBuDMQSC0kUkPcT6rdvjKnn7muhASwMO+++96RvAJeXU1MtKXv8/vecCef9XLqCW\nI2ECR4uW1YhLDByDNZA7F2+ImAmmPVl9/pYSMEOq5aIpbcnPSRExo0p4dPNE4bqG\nrvqCwhnNDzPaHUT9nQuMPtWndiTyFNew19SVVIMVcqySZuU/476xhS1QZGuKqPA=\n=F5CX\n-----END PGP SIGNATURE-----\n", "payload": "tree b4bbb5ab9b78e9aa8e4363ca4401f2a234601702\nparent 003d8d3f56848b6f3833340e859b089a09aea36a\nparent 00152d89776b632905cfa4ae58e594055298c9c8\nauthor Jubilee <46493976+workingjubilee@users.noreply.github.com> 1633407153 -0700\ncommitter GitHub <noreply@github.com> 1633407153 -0700\n\nRollup merge of #87993 - kornelski:try_reserve_stable, r=joshtriplett\n\nStabilize try_reserve\n\nStabilization PR for the [`try_reserve` feature](https://github.com/rust-lang/rust/issues/48043#issuecomment-898040475).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99e6e3ff078162ffec3bb5fd810d54246add2196", "html_url": "https://github.com/rust-lang/rust/commit/99e6e3ff078162ffec3bb5fd810d54246add2196", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99e6e3ff078162ffec3bb5fd810d54246add2196/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "003d8d3f56848b6f3833340e859b089a09aea36a", "url": "https://api.github.com/repos/rust-lang/rust/commits/003d8d3f56848b6f3833340e859b089a09aea36a", "html_url": "https://github.com/rust-lang/rust/commit/003d8d3f56848b6f3833340e859b089a09aea36a"}, {"sha": "00152d89776b632905cfa4ae58e594055298c9c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/00152d89776b632905cfa4ae58e594055298c9c8", "html_url": "https://github.com/rust-lang/rust/commit/00152d89776b632905cfa4ae58e594055298c9c8"}], "stats": {"total": 56, "additions": 14, "deletions": 42}, "files": [{"sha": "2de05cd4e56794180ae27b5fb476bed3f07e101c", "filename": "compiler/rustc_data_structures/src/sso/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99e6e3ff078162ffec3bb5fd810d54246add2196/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99e6e3ff078162ffec3bb5fd810d54246add2196/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fmap.rs?ref=99e6e3ff078162ffec3bb5fd810d54246add2196", "patch": "@@ -31,7 +31,7 @@ const SSO_ARRAY_SIZE: usize = 8;\n //\n // Missing HashMap API:\n //   all hasher-related\n-//   try_reserve (unstable)\n+//   try_reserve\n //   shrink_to (unstable)\n //   drain_filter (unstable)\n //   into_keys/into_values (unstable)"}, {"sha": "29baf4e1ddb661c4a4a421e9c58e3b0a81e50afc", "filename": "compiler/rustc_data_structures/src/sso/set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99e6e3ff078162ffec3bb5fd810d54246add2196/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99e6e3ff078162ffec3bb5fd810d54246add2196/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fset.rs?ref=99e6e3ff078162ffec3bb5fd810d54246add2196", "patch": "@@ -13,7 +13,7 @@ use super::map::SsoHashMap;\n //\n // Missing HashSet API:\n //   all hasher-related\n-//   try_reserve (unstable)\n+//   try_reserve\n //   shrink_to (unstable)\n //   drain_filter (unstable)\n //   replace"}, {"sha": "594ac899f158f233ef35bc19e45395a7a4705d54", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/99e6e3ff078162ffec3bb5fd810d54246add2196/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99e6e3ff078162ffec3bb5fd810d54246add2196/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=99e6e3ff078162ffec3bb5fd810d54246add2196", "patch": "@@ -52,7 +52,6 @@\n #![feature(thread_local_const_init)]\n #![feature(trusted_step)]\n #![feature(try_blocks)]\n-#![feature(try_reserve)]\n #![feature(try_reserve_kind)]\n #![feature(nonzero_ops)]\n #![recursion_limit = \"512\"]"}, {"sha": "77d28bdfe647598892f9da5a3f44fb2df0504270", "filename": "library/alloc/src/collections/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99e6e3ff078162ffec3bb5fd810d54246add2196/library%2Falloc%2Fsrc%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99e6e3ff078162ffec3bb5fd810d54246add2196/library%2Falloc%2Fsrc%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fmod.rs?ref=99e6e3ff078162ffec3bb5fd810d54246add2196", "patch": "@@ -57,7 +57,7 @@ use core::fmt::Display;\n \n /// The error type for `try_reserve` methods.\n #[derive(Clone, PartialEq, Eq, Debug)]\n-#[unstable(feature = \"try_reserve\", reason = \"new API\", issue = \"48043\")]\n+#[stable(feature = \"try_reserve\", since = \"1.57.0\")]\n pub struct TryReserveError {\n     kind: TryReserveErrorKind,\n }\n@@ -126,7 +126,7 @@ impl From<LayoutError> for TryReserveErrorKind {\n     }\n }\n \n-#[unstable(feature = \"try_reserve\", reason = \"new API\", issue = \"48043\")]\n+#[stable(feature = \"try_reserve\", since = \"1.57.0\")]\n impl Display for TryReserveError {\n     fn fmt(\n         &self,"}, {"sha": "f4de2b2ebe5dc1afdef8378827fa5b440b5b97ab", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/99e6e3ff078162ffec3bb5fd810d54246add2196/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99e6e3ff078162ffec3bb5fd810d54246add2196/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=99e6e3ff078162ffec3bb5fd810d54246add2196", "patch": "@@ -711,7 +711,6 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(try_reserve)]\n     /// use std::collections::TryReserveError;\n     /// use std::collections::VecDeque;\n     ///\n@@ -730,7 +729,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     /// }\n     /// # process_data(&[1, 2, 3]).expect(\"why is the test harness OOMing on 12 bytes?\");\n     /// ```\n-    #[unstable(feature = \"try_reserve\", reason = \"new API\", issue = \"48043\")]\n+    #[stable(feature = \"try_reserve\", since = \"1.57.0\")]\n     pub fn try_reserve_exact(&mut self, additional: usize) -> Result<(), TryReserveError> {\n         self.try_reserve(additional)\n     }\n@@ -749,7 +748,6 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(try_reserve)]\n     /// use std::collections::TryReserveError;\n     /// use std::collections::VecDeque;\n     ///\n@@ -768,7 +766,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     /// }\n     /// # process_data(&[1, 2, 3]).expect(\"why is the test harness OOMing on 12 bytes?\");\n     /// ```\n-    #[unstable(feature = \"try_reserve\", reason = \"new API\", issue = \"48043\")]\n+    #[stable(feature = \"try_reserve\", since = \"1.57.0\")]\n     pub fn try_reserve(&mut self, additional: usize) -> Result<(), TryReserveError> {\n         let old_cap = self.cap();\n         let used_cap = self.len() + 1;"}, {"sha": "d88b8e398985a94565a81bae1ec41cb4851212f2", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/99e6e3ff078162ffec3bb5fd810d54246add2196/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99e6e3ff078162ffec3bb5fd810d54246add2196/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=99e6e3ff078162ffec3bb5fd810d54246add2196", "patch": "@@ -1009,7 +1009,6 @@ impl String {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(try_reserve)]\n     /// use std::collections::TryReserveError;\n     ///\n     /// fn process_data(data: &str) -> Result<String, TryReserveError> {\n@@ -1025,7 +1024,7 @@ impl String {\n     /// }\n     /// # process_data(\"rust\").expect(\"why is the test harness OOMing on 4 bytes?\");\n     /// ```\n-    #[unstable(feature = \"try_reserve\", reason = \"new API\", issue = \"48043\")]\n+    #[stable(feature = \"try_reserve\", since = \"1.57.0\")]\n     pub fn try_reserve(&mut self, additional: usize) -> Result<(), TryReserveError> {\n         self.vec.try_reserve(additional)\n     }\n@@ -1049,7 +1048,6 @@ impl String {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(try_reserve)]\n     /// use std::collections::TryReserveError;\n     ///\n     /// fn process_data(data: &str) -> Result<String, TryReserveError> {\n@@ -1065,7 +1063,7 @@ impl String {\n     /// }\n     /// # process_data(\"rust\").expect(\"why is the test harness OOMing on 4 bytes?\");\n     /// ```\n-    #[unstable(feature = \"try_reserve\", reason = \"new API\", issue = \"48043\")]\n+    #[stable(feature = \"try_reserve\", since = \"1.57.0\")]\n     pub fn try_reserve_exact(&mut self, additional: usize) -> Result<(), TryReserveError> {\n         self.vec.try_reserve_exact(additional)\n     }"}, {"sha": "4f18a054a0d9899313b610b9755b3566750620b9", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/99e6e3ff078162ffec3bb5fd810d54246add2196/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99e6e3ff078162ffec3bb5fd810d54246add2196/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=99e6e3ff078162ffec3bb5fd810d54246add2196", "patch": "@@ -849,7 +849,6 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(try_reserve)]\n     /// use std::collections::TryReserveError;\n     ///\n     /// fn process_data(data: &[u32]) -> Result<Vec<u32>, TryReserveError> {\n@@ -867,7 +866,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// }\n     /// # process_data(&[1, 2, 3]).expect(\"why is the test harness OOMing on 12 bytes?\");\n     /// ```\n-    #[unstable(feature = \"try_reserve\", reason = \"new API\", issue = \"48043\")]\n+    #[stable(feature = \"try_reserve\", since = \"1.57.0\")]\n     pub fn try_reserve(&mut self, additional: usize) -> Result<(), TryReserveError> {\n         self.buf.try_reserve(self.len, additional)\n     }\n@@ -892,7 +891,6 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(try_reserve)]\n     /// use std::collections::TryReserveError;\n     ///\n     /// fn process_data(data: &[u32]) -> Result<Vec<u32>, TryReserveError> {\n@@ -910,7 +908,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// }\n     /// # process_data(&[1, 2, 3]).expect(\"why is the test harness OOMing on 12 bytes?\");\n     /// ```\n-    #[unstable(feature = \"try_reserve\", reason = \"new API\", issue = \"48043\")]\n+    #[stable(feature = \"try_reserve\", since = \"1.57.0\")]\n     pub fn try_reserve_exact(&mut self, additional: usize) -> Result<(), TryReserveError> {\n         self.buf.try_reserve_exact(self.len, additional)\n     }"}, {"sha": "8c57c804ad2dc149e160344cb55d6f1f525ab5c0", "filename": "library/alloc/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/99e6e3ff078162ffec3bb5fd810d54246add2196/library%2Falloc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99e6e3ff078162ffec3bb5fd810d54246add2196/library%2Falloc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Flib.rs?ref=99e6e3ff078162ffec3bb5fd810d54246add2196", "patch": "@@ -8,7 +8,6 @@\n #![feature(new_uninit)]\n #![feature(pattern)]\n #![feature(trusted_len)]\n-#![feature(try_reserve)]\n #![feature(try_reserve_kind)]\n #![feature(unboxed_closures)]\n #![feature(associated_type_bounds)]"}, {"sha": "528bb1bf6e9f9feb22f73a6af644ad12bd49bcd6", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/99e6e3ff078162ffec3bb5fd810d54246add2196/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99e6e3ff078162ffec3bb5fd810d54246add2196/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=99e6e3ff078162ffec3bb5fd810d54246add2196", "patch": "@@ -625,14 +625,13 @@ where\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(try_reserve)]\n     /// use std::collections::HashMap;\n     ///\n     /// let mut map: HashMap<&str, isize> = HashMap::new();\n     /// map.try_reserve(10).expect(\"why is the test harness OOMing on 10 bytes?\");\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"try_reserve\", reason = \"new API\", issue = \"48043\")]\n+    #[stable(feature = \"try_reserve\", since = \"1.57.0\")]\n     pub fn try_reserve(&mut self, additional: usize) -> Result<(), TryReserveError> {\n         self.base.try_reserve(additional).map_err(map_try_reserve_error)\n     }"}, {"sha": "dcfe322095082a4aea5c663478c43b79a47f8a83", "filename": "library/std/src/collections/hash/set.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/99e6e3ff078162ffec3bb5fd810d54246add2196/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99e6e3ff078162ffec3bb5fd810d54246add2196/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs?ref=99e6e3ff078162ffec3bb5fd810d54246add2196", "patch": "@@ -423,13 +423,12 @@ where\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(try_reserve)]\n     /// use std::collections::HashSet;\n     /// let mut set: HashSet<i32> = HashSet::new();\n     /// set.try_reserve(10).expect(\"why is the test harness OOMing on 10 bytes?\");\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"try_reserve\", reason = \"new API\", issue = \"48043\")]\n+    #[stable(feature = \"try_reserve\", since = \"1.57.0\")]\n     pub fn try_reserve(&mut self, additional: usize) -> Result<(), TryReserveError> {\n         self.base.try_reserve(additional).map_err(map_try_reserve_error)\n     }"}, {"sha": "a19c3431989c0c262f7aa0115285650f1e87fadf", "filename": "library/std/src/collections/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99e6e3ff078162ffec3bb5fd810d54246add2196/library%2Fstd%2Fsrc%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99e6e3ff078162ffec3bb5fd810d54246add2196/library%2Fstd%2Fsrc%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fmod.rs?ref=99e6e3ff078162ffec3bb5fd810d54246add2196", "patch": "@@ -420,7 +420,7 @@ pub use self::hash_map::HashMap;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::hash_set::HashSet;\n \n-#[unstable(feature = \"try_reserve\", reason = \"new API\", issue = \"48043\")]\n+#[stable(feature = \"try_reserve\", since = \"1.57.0\")]\n pub use alloc_crate::collections::TryReserveError;\n #[unstable(\n     feature = \"try_reserve_kind\","}, {"sha": "6ae0bc47a9462ef3bf9812b9b7908b71c5ac850d", "filename": "library/std/src/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99e6e3ff078162ffec3bb5fd810d54246add2196/library%2Fstd%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99e6e3ff078162ffec3bb5fd810d54246add2196/library%2Fstd%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ferror.rs?ref=99e6e3ff078162ffec3bb5fd810d54246add2196", "patch": "@@ -595,7 +595,7 @@ impl Error for char::ParseCharError {\n     }\n }\n \n-#[unstable(feature = \"try_reserve\", reason = \"new API\", issue = \"48043\")]\n+#[stable(feature = \"try_reserve\", since = \"1.57.0\")]\n impl Error for alloc::collections::TryReserveError {}\n \n #[unstable(feature = \"duration_checked_float\", issue = \"83400\")]"}, {"sha": "0ba4e85886caa3db5ab80770312685e37972ce25", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/99e6e3ff078162ffec3bb5fd810d54246add2196/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99e6e3ff078162ffec3bb5fd810d54246add2196/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=99e6e3ff078162ffec3bb5fd810d54246add2196", "patch": "@@ -331,7 +331,6 @@\n #![feature(total_cmp)]\n #![feature(trace_macros)]\n #![feature(try_blocks)]\n-#![feature(try_reserve)]\n #![feature(try_reserve_kind)]\n #![feature(unboxed_closures)]\n #![feature(unwrap_infallible)]"}, {"sha": "efe77f90f0658b0b2b03752f5b4d931ca8c5617e", "filename": "src/test/ui/closures/issue-87814-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/99e6e3ff078162ffec3bb5fd810d54246add2196/src%2Ftest%2Fui%2Fclosures%2Fissue-87814-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99e6e3ff078162ffec3bb5fd810d54246add2196/src%2Ftest%2Fui%2Fclosures%2Fissue-87814-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-87814-2.rs?ref=99e6e3ff078162ffec3bb5fd810d54246add2196", "patch": "@@ -1,5 +1,4 @@\n // check-pass\n-#![feature(try_reserve)]\n \n fn main() {\n     let mut schema_all: (Vec<String>, Vec<String>) = (vec![], vec![]);"}, {"sha": "a19dd58da11b3920853f91e1957c1587bc2d3783", "filename": "src/test/ui/feature-gates/feature-gate-try_reserve.rs", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-try_reserve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-try_reserve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-try_reserve.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,4 +0,0 @@\n-fn main() {\n-    let v = Vec::new();\n-    v.try_reserve(10); //~ ERROR: use of unstable library feature 'try_reserve'\n-}"}, {"sha": "4da9a23a1bd5ff02ce139806be8b149d1abfb34e", "filename": "src/test/ui/feature-gates/feature-gate-try_reserve.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-try_reserve.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-try_reserve.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-try_reserve.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,12 +0,0 @@\n-error[E0658]: use of unstable library feature 'try_reserve': new API\n-  --> $DIR/feature-gate-try_reserve.rs:3:7\n-   |\n-LL |     v.try_reserve(10);\n-   |       ^^^^^^^^^^^\n-   |\n-   = note: see issue #48043 <https://github.com/rust-lang/rust/issues/48043> for more information\n-   = help: add `#![feature(try_reserve)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}]}