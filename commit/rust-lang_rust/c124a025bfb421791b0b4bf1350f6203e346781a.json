{"sha": "c124a025bfb421791b0b4bf1350f6203e346781a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxMjRhMDI1YmZiNDIxNzkxYjBiNGJmMTM1MGY2MjAzZTM0Njc4MWE=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-07-14T19:19:17Z"}, "committer": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-07-14T19:19:17Z"}, "message": "Move rustc to the new llvm type system. Requires an update to llvm trunk.", "tree": {"sha": "c208211e3d188ccd5e18dcbcef1f271ef91d2086", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c208211e3d188ccd5e18dcbcef1f271ef91d2086"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c124a025bfb421791b0b4bf1350f6203e346781a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c124a025bfb421791b0b4bf1350f6203e346781a", "html_url": "https://github.com/rust-lang/rust/commit/c124a025bfb421791b0b4bf1350f6203e346781a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c124a025bfb421791b0b4bf1350f6203e346781a/comments", "author": null, "committer": null, "parents": [{"sha": "be489ee9e2f30d2daf1c9726536631162e21dff5", "url": "https://api.github.com/repos/rust-lang/rust/commits/be489ee9e2f30d2daf1c9726536631162e21dff5", "html_url": "https://github.com/rust-lang/rust/commit/be489ee9e2f30d2daf1c9726536631162e21dff5"}], "stats": {"total": 110, "additions": 43, "deletions": 67}, "files": [{"sha": "2f0abed3d27f8f5b4e02acae9fad74f0541f9534", "filename": "src/comp/lib/llvm.rs", "status": "modified", "additions": 8, "deletions": 26, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c124a025bfb421791b0b4bf1350f6203e346781a/src%2Fcomp%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c124a025bfb421791b0b4bf1350f6203e346781a/src%2Fcomp%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Flib%2Fllvm.rs?ref=c124a025bfb421791b0b4bf1350f6203e346781a", "patch": "@@ -169,11 +169,6 @@ native mod llvm = \"rustllvm\" {\n     fn LLVMGetTarget(ModuleRef M) -> sbuf;\n     fn LLVMSetTarget(ModuleRef M, sbuf Triple);\n \n-    /** See Module::addTypeName. */\n-    fn LLVMAddTypeName(ModuleRef M, sbuf Name, TypeRef Ty) -> Bool;\n-    fn LLVMDeleteTypeName(ModuleRef M, sbuf Name);\n-    fn LLVMGetTypeByName(ModuleRef M, sbuf Name) -> TypeRef;\n-\n     /** See Module::dump. */\n     fn LLVMDumpModule(ModuleRef M);\n \n@@ -250,17 +245,9 @@ native mod llvm = \"rustllvm\" {\n     /* Operations on other types */\n     fn LLVMVoidTypeInContext(ContextRef C) -> TypeRef;\n     fn LLVMLabelTypeInContext(ContextRef C) -> TypeRef;\n-    fn LLVMOpaqueTypeInContext(ContextRef C) -> TypeRef;\n \n     fn LLVMVoidType() -> TypeRef;\n     fn LLVMLabelType() -> TypeRef;\n-    fn LLVMOpaqueType() -> TypeRef;\n-\n-    /* Operations on type handles */\n-    fn LLVMCreateTypeHandle(TypeRef PotentiallyAbstractTy) -> TypeHandleRef;\n-    fn LLVMRefineType(TypeRef AbstractTy, TypeRef ConcreteTy);\n-    fn LLVMResolveTypeHandle(TypeHandleRef TypeHandle) -> TypeRef;\n-    fn LLVMDisposeTypeHandle(TypeHandleRef TypeHandle);\n \n     /* Operations on all values */\n     fn LLVMTypeOf(ValueRef Val) -> TypeRef;\n@@ -792,7 +779,6 @@ native mod llvm = \"rustllvm\" {\n     fn LLVMAddSCCPPass(PassManagerRef PM);\n     fn LLVMAddDeadStoreEliminationPass(PassManagerRef PM);\n     fn LLVMAddStripDeadPrototypesPass(PassManagerRef PM);\n-    fn LLVMAddDeadTypeEliminationPass(PassManagerRef PM);\n     fn LLVMAddConstantMergePass(PassManagerRef PM);\n     fn LLVMAddArgumentPromotionPass(PassManagerRef PM);\n     fn LLVMAddTailCallEliminationPass(PassManagerRef PM);\n@@ -879,6 +865,14 @@ native mod llvm = \"rustllvm\" {\n     /** Print the pass timings since static dtors aren't picking them up. */\n     fn LLVMRustPrintPassTimings();\n \n+    fn LLVMStructCreateNamed(ContextRef C, sbuf Name) -> TypeRef;\n+\n+    fn LLVMStructSetBody(TypeRef StructTy, *TypeRef ElementTypes,\n+                         uint ElementCount, Bool Packed);\n+\n+    fn LLVMConstNamedStruct(TypeRef S, *ValueRef ConstantVals,\n+                            uint Count) -> ValueRef;\n+\n     /** Links LLVM modules together. `Src` is destroyed by this call and\n         must never be referenced again. */\n     fn LLVMLinkModules(ModuleRef Dest, ModuleRef Src) -> Bool;\n@@ -1398,18 +1392,6 @@ obj builder(BuilderRef B, @mutable bool terminated) {\n \n /* Memory-managed object interface to type handles. */\n \n-obj type_handle_dtor(TypeHandleRef TH) {\n-    drop { llvm::LLVMDisposeTypeHandle(TH); }\n-}\n-\n-type type_handle = rec(TypeHandleRef llth, type_handle_dtor dtor);\n-\n-fn mk_type_handle() -> type_handle {\n-    auto th = llvm::LLVMCreateTypeHandle(llvm::LLVMOpaqueType());\n-    ret rec(llth=th, dtor=type_handle_dtor(th));\n-}\n-\n-\n state obj type_names(std::map::hashmap[TypeRef, str] type_names,\n                     std::map::hashmap[str, TypeRef] named_types) {\n "}, {"sha": "ece2fcae21f68bb05f77251b26582df6fdb011fb", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 32, "deletions": 29, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/c124a025bfb421791b0b4bf1350f6203e346781a/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c124a025bfb421791b0b4bf1350f6203e346781a/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=c124a025bfb421791b0b4bf1350f6203e346781a", "patch": "@@ -40,10 +40,8 @@ import syntax::codemap::span;\n import lib::llvm::llvm;\n import lib::llvm::builder;\n import lib::llvm::target_data;\n-import lib::llvm::type_handle;\n import lib::llvm::type_names;\n import lib::llvm::mk_target_data;\n-import lib::llvm::mk_type_handle;\n import lib::llvm::mk_type_names;\n import lib::llvm::llvm::ModuleRef;\n import lib::llvm::llvm::ValueRef;\n@@ -475,18 +473,29 @@ fn T_struct(&TypeRef[] elts) -> TypeRef {\n                              False);\n }\n \n-fn T_opaque() -> TypeRef { ret llvm::LLVMOpaqueType(); }\n+fn T_named_struct(&str name) -> TypeRef {\n+    auto c = llvm::LLVMGetGlobalContext();\n+    ret llvm::LLVMStructCreateNamed(c, str::buf(name));\n+}\n+\n+fn set_struct_body(TypeRef t, &TypeRef[] elts) {\n+    llvm::LLVMStructSetBody(t, std::ivec::to_ptr(elts), std::ivec::len(elts),\n+                            False);\n+}\n \n fn T_empty_struct() -> TypeRef { ret T_struct(~[]); }\n \n fn T_rust_object() -> TypeRef {\n-   auto e = T_ptr(T_empty_struct());\n-   ret T_struct(~[e, e]);\n+    auto t = T_named_struct(\"rust_object\");\n+    auto e = T_ptr(T_empty_struct());\n+    set_struct_body(t, ~[e,e]);\n+    ret t;\n }\n \n fn T_task() -> TypeRef {\n-    auto t =\n-        T_struct(~[T_int(), // Refcount\n+    auto t = T_named_struct(\"task\");\n+\n+    auto elems = ~[T_int(), // Refcount\n                    T_int(), // Delegate pointer\n                    T_int(), // Stack segment pointer\n                    T_int(), // Runtime SP\n@@ -495,7 +504,8 @@ fn T_task() -> TypeRef {\n \n                    T_int(), // Domain pointer\n                             // Crate cache pointer\n-                   T_int()]);\n+                   T_int()];\n+    set_struct_body(t, elems);\n     ret t;\n }\n \n@@ -532,18 +542,17 @@ fn T_cmp_glue_fn(&crate_ctxt cx) -> TypeRef {\n }\n \n fn T_tydesc(TypeRef taskptr_type) -> TypeRef {\n-    auto th = mk_type_handle();\n-    auto abs_tydesc = llvm::LLVMResolveTypeHandle(th.llth);\n-    auto tydescpp = T_ptr(T_ptr(abs_tydesc));\n+    auto tydesc = T_named_struct(\"tydesc\");\n+    auto tydescpp = T_ptr(T_ptr(tydesc));\n     auto pvoid = T_ptr(T_i8());\n     auto glue_fn_ty =\n         T_ptr(T_fn(~[T_ptr(T_nil()), taskptr_type, T_ptr(T_nil()), tydescpp,\n                      pvoid], T_void()));\n     auto cmp_glue_fn_ty =\n         T_ptr(T_fn(~[T_ptr(T_i1()), taskptr_type, T_ptr(T_nil()), tydescpp,\n                      pvoid, pvoid, T_i8()], T_void()));\n-    auto tydesc =\n-        T_struct(~[tydescpp,   // first_param\n+\n+    auto elems = ~[tydescpp,   // first_param\n                    T_int(),    // size\n                    T_int(),    // align\n                    glue_fn_ty, // copy_glue\n@@ -553,11 +562,9 @@ fn T_tydesc(TypeRef taskptr_type) -> TypeRef {\n                    glue_fn_ty, // mark_glue\n                    glue_fn_ty, // obj_drop_glue\n                    glue_fn_ty, // is_stateful\n-                   cmp_glue_fn_ty]); // cmp_glue\n-\n-    llvm::LLVMRefineType(abs_tydesc, tydesc);\n-    auto t = llvm::LLVMResolveTypeHandle(th.llth);\n-    ret t;\n+                   cmp_glue_fn_ty];\n+    set_struct_body(tydesc, elems);\n+    ret tydesc;\n }\n \n fn T_array(TypeRef t, uint n) -> TypeRef { ret llvm::LLVMArrayType(t, n); }\n@@ -915,10 +922,6 @@ fn type_of_inner(&@crate_ctxt cx, &span sp, &ty::t t) -> TypeRef {\n         case (ty::ty_type) { llty = T_ptr(cx.tydesc_type); }\n     }\n     assert (llty as int != 0);\n-    if (cx.sess.get_opts().save_temps) {\n-        llvm::LLVMAddTypeName(cx.llmod, str::buf(ty_to_short_str(cx.tcx, t)),\n-                              llty);\n-    }\n     cx.lltypes.insert(t, llty);\n     ret llty;\n }\n@@ -1096,6 +1099,11 @@ fn C_struct(&ValueRef[] elts) -> ValueRef {\n                               False);\n }\n \n+fn C_named_struct(TypeRef T, &ValueRef[] elts) -> ValueRef {\n+    ret llvm::LLVMConstNamedStruct(T, std::ivec::to_ptr(elts),\n+                                   std::ivec::len(elts));\n+}\n+\n fn C_array(TypeRef ty, &ValueRef[] elts) -> ValueRef {\n     ret llvm::LLVMConstArray(ty, std::ivec::to_ptr(elts),\n                              std::ivec::len(elts));\n@@ -1971,7 +1979,8 @@ fn emit_tydescs(&@crate_ctxt ccx) {\n                 case (some(?v)) { ccx.stats.n_real_glues += 1u; v }\n             };\n         auto tydesc =\n-            C_struct(~[C_null(T_ptr(T_ptr(ccx.tydesc_type))), ti.size,\n+            C_named_struct(ccx.tydesc_type,\n+                     ~[C_null(T_ptr(T_ptr(ccx.tydesc_type))), ti.size,\n                        ti.align, copy_glue, // copy_glue\n                        drop_glue, // drop_glue\n                        free_glue, // free_glue\n@@ -9074,11 +9083,6 @@ fn i2p(ValueRef v, TypeRef t) -> ValueRef {\n     ret llvm::LLVMConstIntToPtr(v, t);\n }\n \n-fn create_typedefs(&@crate_ctxt cx) {\n-    llvm::LLVMAddTypeName(cx.llmod, str::buf(\"task\"), cx.task_type);\n-    llvm::LLVMAddTypeName(cx.llmod, str::buf(\"tydesc\"), cx.tydesc_type);\n-}\n-\n fn declare_intrinsics(ModuleRef llmod) -> hashmap[str, ValueRef] {\n     let TypeRef[] T_memmove32_args =\n         ~[T_ptr(T_i8()), T_ptr(T_i8()), T_i32(), T_i32(), T_i1()];\n@@ -9298,7 +9302,6 @@ fn trans_crate(&session::session sess, &@ast::crate crate, &ty::ctxt tcx,\n              tydesc_type=tydesc_type,\n              task_type=task_type);\n     auto cx = new_local_ctxt(ccx);\n-    create_typedefs(ccx);\n     collect_items(ccx, crate);\n     collect_tag_ctors(ccx, crate);\n     trans_constants(ccx, crate);"}, {"sha": "19e58eec5036f67cbbcc387e5c61f218fd56ebc2", "filename": "src/rustllvm/rustllvm.def.in", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c124a025bfb421791b0b4bf1350f6203e346781a/src%2Frustllvm%2Frustllvm.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/c124a025bfb421791b0b4bf1350f6203e346781a/src%2Frustllvm%2Frustllvm.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.def.in?ref=c124a025bfb421791b0b4bf1350f6203e346781a", "patch": "@@ -30,7 +30,6 @@ LLVMAddConstantPropagationPass\n LLVMAddCorrelatedValuePropagationPass\n LLVMAddDeadArgEliminationPass\n LLVMAddDeadStoreEliminationPass\n-LLVMAddDeadTypeEliminationPass\n LLVMAddDemoteMemoryToRegisterPass\n LLVMAddDestination\n LLVMAddEarlyCSEPass\n@@ -78,7 +77,6 @@ LLVMAddStripSymbolsPass\n LLVMAddTailCallEliminationPass\n LLVMAddTargetData\n LLVMAddTypeBasedAliasAnalysisPass\n-LLVMAddTypeName\n LLVMAddVerifierPass\n LLVMAlignOf\n LLVMAppendBasicBlock\n@@ -279,11 +277,9 @@ LLVMCreateModuleProviderForExistingModule\n LLVMCreateObjectFile\n LLVMCreatePassManager\n LLVMCreateTargetData\n-LLVMCreateTypeHandle\n LLVMDeleteBasicBlock\n LLVMDeleteFunction\n LLVMDeleteGlobal\n-LLVMDeleteTypeName\n LLVMDisposeBuilder\n LLVMDisposeExecutionEngine\n LLVMDisposeGenericValue\n@@ -295,7 +291,6 @@ LLVMDisposeObjectFile\n LLVMDisposePassManager\n LLVMDisposeSectionIterator\n LLVMDisposeTargetData\n-LLVMDisposeTypeHandle\n LLVMDoubleType\n LLVMDoubleTypeInContext\n LLVMDumpModule\n@@ -388,10 +383,8 @@ LLVMGetSectionSize\n LLVMGetSections\n LLVMGetStructElementTypes\n LLVMGetTarget\n-LLVMGetTypeByName\n LLVMGetTypeContext\n LLVMGetTypeKind\n-LLVMGetTypeName\n LLVMGetUndef\n LLVMGetUsedValue\n LLVMGetUser\n@@ -527,8 +520,6 @@ LLVMMoveBasicBlockAfter\n LLVMMoveBasicBlockBefore\n LLVMMoveToNextSection\n LLVMOffsetOfElement\n-LLVMOpaqueType\n-LLVMOpaqueTypeInContext\n LLVMPPCFP128Type\n LLVMPPCFP128TypeInContext\n LLVMParseBitcode\n@@ -541,14 +532,12 @@ LLVMPositionBuilderBefore\n LLVMPreferredAlignmentOfGlobal\n LLVMPreferredAlignmentOfType\n LLVMRecompileAndRelinkFunction\n-LLVMRefineType\n LLVMRemoveAttribute\n LLVMRemoveFunctionAttr\n LLVMRemoveInstrAttribute\n LLVMRemoveModule\n LLVMRemoveModuleProvider\n LLVMReplaceAllUsesWith\n-LLVMResolveTypeHandle\n LLVMRunFunction\n LLVMRunFunctionAsMain\n LLVMRunFunctionPassManager\n@@ -598,4 +587,6 @@ LLVMX86FP80Type\n LLVMX86FP80TypeInContext\n LLVMX86MMXType\n LLVMX86MMXTypeInContext\n-\n+LLVMConstNamedStruct\n+LLVMStructCreateNamed\n+LLVMStructSetBody"}]}