{"sha": "af955a647e538c3bc724cce84fb913d03e1d6c81", "node_id": "C_kwDOAAsO6NoAKGFmOTU1YTY0N2U1MzhjM2JjNzI0Y2NlODRmYjkxM2QwM2UxZDZjODE", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2023-06-15T20:04:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-06-15T20:04:56Z"}, "message": "Rollup merge of #112614 - lukas-code:apit-unsized-suggestion, r=compiler-errors\n\ntweak suggestion for argument-position `impl ?Sized`\n\nfixes this invalid suggestion:\n```text\nhelp: consider removing the `?Sized` bound to make the type parameter `Sized`\n  |\n1 - fn foo(_: impl ?Sized) {}\n1 + fn foo(_: impl ) {}\n  |\n```", "tree": {"sha": "a6d286f9cc18cc7b1602240bf7dff30ec590e2aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6d286f9cc18cc7b1602240bf7dff30ec590e2aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af955a647e538c3bc724cce84fb913d03e1d6c81", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJki27oCRBK7hj4Ov3rIwAAJUsIAJYwSnSkJfOLt8L4fH7WK7ID\nBeiJCcmzdQ2eLR7mbCO6Fx+1JAQFdNvOCB+asvV/hbPiMQ/yxKSHMPAFE0YpSStV\nh72YpYPfHlbE1Z5ef1L4yFnr6rAN71a//CJVOLkVnHJR8PjJuuhdY3E0BRz7SlE1\nGPrar5vJrblO20hLaAC5l1DorTWfzoHzy4QkIOzedLh/Bu+NvONtVJYma2Pc+V8t\nHAqm0bcAe7y3vub5t5sI5sRvTZIDazTYoyLK1K0jy1moFlkfSDSxx3XGn1QVbK+N\nWiwjgpXTq31xswHA3DYiHWxSAQIcWvK55dLLBOWyIaTxpcFtnIb3QsO5e9Eeeec=\n=/l2E\n-----END PGP SIGNATURE-----\n", "payload": "tree a6d286f9cc18cc7b1602240bf7dff30ec590e2aa\nparent d233522418f3195734d0f41d15a5323dd0f0d425\nparent b6a3f126c01d792c448f7b341352f591404bc19a\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1686859496 +0200\ncommitter GitHub <noreply@github.com> 1686859496 +0200\n\nRollup merge of #112614 - lukas-code:apit-unsized-suggestion, r=compiler-errors\n\ntweak suggestion for argument-position `impl ?Sized`\n\nfixes this invalid suggestion:\n```text\nhelp: consider removing the `?Sized` bound to make the type parameter `Sized`\n  |\n1 - fn foo(_: impl ?Sized) {}\n1 + fn foo(_: impl ) {}\n  |\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af955a647e538c3bc724cce84fb913d03e1d6c81", "html_url": "https://github.com/rust-lang/rust/commit/af955a647e538c3bc724cce84fb913d03e1d6c81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af955a647e538c3bc724cce84fb913d03e1d6c81/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d233522418f3195734d0f41d15a5323dd0f0d425", "url": "https://api.github.com/repos/rust-lang/rust/commits/d233522418f3195734d0f41d15a5323dd0f0d425", "html_url": "https://github.com/rust-lang/rust/commit/d233522418f3195734d0f41d15a5323dd0f0d425"}, {"sha": "b6a3f126c01d792c448f7b341352f591404bc19a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6a3f126c01d792c448f7b341352f591404bc19a", "html_url": "https://github.com/rust-lang/rust/commit/b6a3f126c01d792c448f7b341352f591404bc19a"}], "stats": {"total": 227, "additions": 141, "deletions": 86}, "files": [{"sha": "d89baa9c88d8376579e793a96f4b7a217ee78533", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 31, "deletions": 17, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/af955a647e538c3bc724cce84fb913d03e1d6c81/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af955a647e538c3bc724cce84fb913d03e1d6c81/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=af955a647e538c3bc724cce84fb913d03e1d6c81", "patch": "@@ -14,8 +14,8 @@ use rustc_errors::{Applicability, Diagnostic, DiagnosticArgValue, IntoDiagnostic\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n-use rustc_hir::WherePredicate;\n-use rustc_span::Span;\n+use rustc_hir::{PredicateOrigin, WherePredicate};\n+use rustc_span::{BytePos, Span};\n use rustc_type_ir::sty::TyKind::*;\n \n impl<'tcx> IntoDiagnosticArg for Ty<'tcx> {\n@@ -156,10 +156,11 @@ enum SuggestChangingConstraintsMessage<'a> {\n     RestrictBoundFurther,\n     RestrictType { ty: &'a str },\n     RestrictTypeFurther { ty: &'a str },\n-    RemovingQSized,\n+    RemoveMaybeUnsized,\n+    ReplaceMaybeUnsizedWithSized,\n }\n \n-fn suggest_removing_unsized_bound(\n+fn suggest_changing_unsized_bound(\n     generics: &hir::Generics<'_>,\n     suggestions: &mut Vec<(Span, String, SuggestChangingConstraintsMessage<'_>)>,\n     param: &hir::GenericParam<'_>,\n@@ -183,12 +184,25 @@ fn suggest_removing_unsized_bound(\n             if poly.trait_ref.trait_def_id() != def_id {\n                 continue;\n             }\n-            let sp = generics.span_for_bound_removal(where_pos, pos);\n-            suggestions.push((\n-                sp,\n-                String::new(),\n-                SuggestChangingConstraintsMessage::RemovingQSized,\n-            ));\n+            if predicate.origin == PredicateOrigin::ImplTrait && predicate.bounds.len() == 1 {\n+                // For `impl ?Sized` with no other bounds, suggest `impl Sized` instead.\n+                let bound_span = bound.span();\n+                if bound_span.can_be_used_for_suggestions() {\n+                    let question_span = bound_span.with_hi(bound_span.lo() + BytePos(1));\n+                    suggestions.push((\n+                        question_span,\n+                        String::new(),\n+                        SuggestChangingConstraintsMessage::ReplaceMaybeUnsizedWithSized,\n+                    ));\n+                }\n+            } else {\n+                let sp = generics.span_for_bound_removal(where_pos, pos);\n+                suggestions.push((\n+                    sp,\n+                    String::new(),\n+                    SuggestChangingConstraintsMessage::RemoveMaybeUnsized,\n+                ));\n+            }\n         }\n     }\n }\n@@ -238,14 +252,11 @@ pub fn suggest_constraining_type_params<'a>(\n         {\n             let mut sized_constraints =\n                 constraints.extract_if(|(_, def_id)| *def_id == tcx.lang_items().sized_trait());\n-            if let Some((constraint, def_id)) = sized_constraints.next() {\n+            if let Some((_, def_id)) = sized_constraints.next() {\n                 applicability = Applicability::MaybeIncorrect;\n \n-                err.span_label(\n-                    param.span,\n-                    format!(\"this type parameter needs to be `{}`\", constraint),\n-                );\n-                suggest_removing_unsized_bound(generics, &mut suggestions, param, def_id);\n+                err.span_label(param.span, \"this type parameter needs to be `Sized`\");\n+                suggest_changing_unsized_bound(generics, &mut suggestions, param, def_id);\n             }\n         }\n \n@@ -395,9 +406,12 @@ pub fn suggest_constraining_type_params<'a>(\n             SuggestChangingConstraintsMessage::RestrictTypeFurther { ty } => {\n                 Cow::from(format!(\"consider further restricting type parameter `{}`\", ty))\n             }\n-            SuggestChangingConstraintsMessage::RemovingQSized => {\n+            SuggestChangingConstraintsMessage::RemoveMaybeUnsized => {\n                 Cow::from(\"consider removing the `?Sized` bound to make the type parameter `Sized`\")\n             }\n+            SuggestChangingConstraintsMessage::ReplaceMaybeUnsizedWithSized => {\n+                Cow::from(\"consider replacing `?Sized` with `Sized`\")\n+            }\n         };\n \n         err.span_suggestion_verbose(span, msg, suggestion, applicability);"}, {"sha": "7997026dfe498f0b212bd0b03f14319ac2b1ea17", "filename": "tests/ui/const-generics/const-argument-if-length.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af955a647e538c3bc724cce84fb913d03e1d6c81/tests%2Fui%2Fconst-generics%2Fconst-argument-if-length.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af955a647e538c3bc724cce84fb913d03e1d6c81/tests%2Fui%2Fconst-generics%2Fconst-argument-if-length.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fconst-argument-if-length.full.stderr?ref=af955a647e538c3bc724cce84fb913d03e1d6c81", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n   --> $DIR/const-argument-if-length.rs:15:12\n    |\n LL | pub struct AtLeastByte<T: ?Sized> {\n-   |                        - this type parameter needs to be `std::marker::Sized`\n+   |                        - this type parameter needs to be `Sized`\n LL |     value: T,\n    |            ^ doesn't have a size known at compile-time\n    |"}, {"sha": "3ba9ffebd4de6214c7ebf6492e77948899d1ab63", "filename": "tests/ui/const-generics/const-argument-if-length.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af955a647e538c3bc724cce84fb913d03e1d6c81/tests%2Fui%2Fconst-generics%2Fconst-argument-if-length.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af955a647e538c3bc724cce84fb913d03e1d6c81/tests%2Fui%2Fconst-generics%2Fconst-argument-if-length.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fconst-argument-if-length.min.stderr?ref=af955a647e538c3bc724cce84fb913d03e1d6c81", "patch": "@@ -11,7 +11,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n   --> $DIR/const-argument-if-length.rs:15:12\n    |\n LL | pub struct AtLeastByte<T: ?Sized> {\n-   |                        - this type parameter needs to be `std::marker::Sized`\n+   |                        - this type parameter needs to be `Sized`\n LL |     value: T,\n    |            ^ doesn't have a size known at compile-time\n    |"}, {"sha": "cbb7dc5e9f421c7ea370b0169b064bc0f2149d3b", "filename": "tests/ui/dst/dst-object-from-unsized-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af955a647e538c3bc724cce84fb913d03e1d6c81/tests%2Fui%2Fdst%2Fdst-object-from-unsized-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af955a647e538c3bc724cce84fb913d03e1d6c81/tests%2Fui%2Fdst%2Fdst-object-from-unsized-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdst%2Fdst-object-from-unsized-type.stderr?ref=af955a647e538c3bc724cce84fb913d03e1d6c81", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n   --> $DIR/dst-object-from-unsized-type.rs:8:23\n    |\n LL | fn test1<T: ?Sized + Foo>(t: &T) {\n-   |          - this type parameter needs to be `std::marker::Sized`\n+   |          - this type parameter needs to be `Sized`\n LL |     let u: &dyn Foo = t;\n    |                       ^ doesn't have a size known at compile-time\n    |\n@@ -17,7 +17,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n   --> $DIR/dst-object-from-unsized-type.rs:13:23\n    |\n LL | fn test2<T: ?Sized + Foo>(t: &T) {\n-   |          - this type parameter needs to be `std::marker::Sized`\n+   |          - this type parameter needs to be `Sized`\n LL |     let v: &dyn Foo = t as &dyn Foo;\n    |                       ^ doesn't have a size known at compile-time\n    |"}, {"sha": "d77076a28fab6c42c94bde27e65e899c047e00ea", "filename": "tests/ui/generic-associated-types/issue-88287.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af955a647e538c3bc724cce84fb913d03e1d6c81/tests%2Fui%2Fgeneric-associated-types%2Fissue-88287.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af955a647e538c3bc724cce84fb913d03e1d6c81/tests%2Fui%2Fgeneric-associated-types%2Fissue-88287.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fissue-88287.stderr?ref=af955a647e538c3bc724cce84fb913d03e1d6c81", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `A` cannot be known at compilation tim\n   --> $DIR/issue-88287.rs:34:9\n    |\n LL | type SearchFutureTy<'f, A, B: 'f>\n-   |                         - this type parameter needs to be `std::marker::Sized`\n+   |                         - this type parameter needs to be `Sized`\n ...\n LL |         async move { todo!() }\n    |         ^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time"}, {"sha": "3f613d947e488d3d9a5f6cb691aa55a1b4289c77", "filename": "tests/ui/offset-of/offset-of-dst-field.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af955a647e538c3bc724cce84fb913d03e1d6c81/tests%2Fui%2Foffset-of%2Foffset-of-dst-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af955a647e538c3bc724cce84fb913d03e1d6c81/tests%2Fui%2Foffset-of%2Foffset-of-dst-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foffset-of%2Foffset-of-dst-field.stderr?ref=af955a647e538c3bc724cce84fb913d03e1d6c81", "patch": "@@ -70,7 +70,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n   --> $DIR/offset-of-dst-field.rs:50:5\n    |\n LL | fn generic_with_maybe_sized<T: ?Sized>() -> usize {\n-   |                             - this type parameter needs to be `std::marker::Sized`\n+   |                             - this type parameter needs to be `Sized`\n LL |     offset_of!(Delta<T>, z)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |"}, {"sha": "cf5f4e530dc4e140a896a967fd8bf30bcde335ed", "filename": "tests/ui/packed/issue-27060-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af955a647e538c3bc724cce84fb913d03e1d6c81/tests%2Fui%2Fpacked%2Fissue-27060-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af955a647e538c3bc724cce84fb913d03e1d6c81/tests%2Fui%2Fpacked%2Fissue-27060-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpacked%2Fissue-27060-2.stderr?ref=af955a647e538c3bc724cce84fb913d03e1d6c81", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n   --> $DIR/issue-27060-2.rs:3:11\n    |\n LL | pub struct Bad<T: ?Sized> {\n-   |                - this type parameter needs to be `std::marker::Sized`\n+   |                - this type parameter needs to be `Sized`\n LL |     data: T,\n    |           ^ doesn't have a size known at compile-time\n    |"}, {"sha": "d136f5ff6543fcd53d0f8c49ae93e6d5ce966917", "filename": "tests/ui/suggestions/adt-param-with-implicit-sized-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af955a647e538c3bc724cce84fb913d03e1d6c81/tests%2Fui%2Fsuggestions%2Fadt-param-with-implicit-sized-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af955a647e538c3bc724cce84fb913d03e1d6c81/tests%2Fui%2Fsuggestions%2Fadt-param-with-implicit-sized-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fadt-param-with-implicit-sized-bound.stderr?ref=af955a647e538c3bc724cce84fb913d03e1d6c81", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n   --> $DIR/adt-param-with-implicit-sized-bound.rs:25:9\n    |\n LL | struct Struct5<T: ?Sized>{\n-   |                - this type parameter needs to be `std::marker::Sized`\n+   |                - this type parameter needs to be `Sized`\n LL |     _t: X<T>,\n    |         ^^^^ doesn't have a size known at compile-time\n    |"}, {"sha": "eb74679d66049b0267c00408836bf9a58b083022", "filename": "tests/ui/suggestions/removal-of-multiline-trait-bound-in-where-clause.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af955a647e538c3bc724cce84fb913d03e1d6c81/tests%2Fui%2Fsuggestions%2Fremoval-of-multiline-trait-bound-in-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af955a647e538c3bc724cce84fb913d03e1d6c81/tests%2Fui%2Fsuggestions%2Fremoval-of-multiline-trait-bound-in-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fremoval-of-multiline-trait-bound-in-where-clause.stderr?ref=af955a647e538c3bc724cce84fb913d03e1d6c81", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n LL | fn foo<T>(foo: Wrapper<T>)\n    |        -       ^^^^^^^^^^ doesn't have a size known at compile-time\n    |        |\n-   |        this type parameter needs to be `std::marker::Sized`\n+   |        this type parameter needs to be `Sized`\n    |\n note: required by a bound in `Wrapper`\n   --> $DIR/removal-of-multiline-trait-bound-in-where-clause.rs:1:16\n@@ -33,7 +33,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n LL | fn bar<T>(foo: Wrapper<T>)\n    |        -       ^^^^^^^^^^ doesn't have a size known at compile-time\n    |        |\n-   |        this type parameter needs to be `std::marker::Sized`\n+   |        this type parameter needs to be `Sized`\n    |\n note: required by a bound in `Wrapper`\n   --> $DIR/removal-of-multiline-trait-bound-in-where-clause.rs:1:16\n@@ -58,7 +58,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n LL | fn qux<T>(foo: Wrapper<T>)\n    |        -       ^^^^^^^^^^ doesn't have a size known at compile-time\n    |        |\n-   |        this type parameter needs to be `std::marker::Sized`\n+   |        this type parameter needs to be `Sized`\n    |\n note: required by a bound in `Wrapper`\n   --> $DIR/removal-of-multiline-trait-bound-in-where-clause.rs:1:16"}, {"sha": "469d6a6345ed969571561583ad017001355e1fe0", "filename": "tests/ui/trait-bounds/apit-unsized.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af955a647e538c3bc724cce84fb913d03e1d6c81/tests%2Fui%2Ftrait-bounds%2Fapit-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af955a647e538c3bc724cce84fb913d03e1d6c81/tests%2Fui%2Ftrait-bounds%2Fapit-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrait-bounds%2Fapit-unsized.rs?ref=af955a647e538c3bc724cce84fb913d03e1d6c81", "patch": "@@ -0,0 +1,4 @@\n+fn foo(_: impl Iterator<Item = i32> + ?Sized) {} //~ ERROR [E0277]\n+fn bar(_: impl ?Sized) {} //~ ERROR [E0277]\n+\n+fn main() {}"}, {"sha": "0f2dc52599f632136e021b809a719ff3227a9334", "filename": "tests/ui/trait-bounds/apit-unsized.stderr", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/af955a647e538c3bc724cce84fb913d03e1d6c81/tests%2Fui%2Ftrait-bounds%2Fapit-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af955a647e538c3bc724cce84fb913d03e1d6c81/tests%2Fui%2Ftrait-bounds%2Fapit-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrait-bounds%2Fapit-unsized.stderr?ref=af955a647e538c3bc724cce84fb913d03e1d6c81", "patch": "@@ -0,0 +1,41 @@\n+error[E0277]: the size for values of type `impl Iterator<Item = i32> + ?Sized` cannot be known at compilation time\n+  --> $DIR/apit-unsized.rs:1:8\n+   |\n+LL | fn foo(_: impl Iterator<Item = i32> + ?Sized) {}\n+   |        ^  ---------------------------------- this type parameter needs to be `Sized`\n+   |        |\n+   |        doesn't have a size known at compile-time\n+   |\n+   = help: unsized fn params are gated as an unstable feature\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL - fn foo(_: impl Iterator<Item = i32> + ?Sized) {}\n+LL + fn foo(_: impl Iterator<Item = i32>) {}\n+   |\n+help: function arguments must have a statically known size, borrowed types always have a known size\n+   |\n+LL | fn foo(_: &impl Iterator<Item = i32> + ?Sized) {}\n+   |           +\n+\n+error[E0277]: the size for values of type `impl ?Sized` cannot be known at compilation time\n+  --> $DIR/apit-unsized.rs:2:8\n+   |\n+LL | fn bar(_: impl ?Sized) {}\n+   |        ^  ----------- this type parameter needs to be `Sized`\n+   |        |\n+   |        doesn't have a size known at compile-time\n+   |\n+   = help: unsized fn params are gated as an unstable feature\n+help: consider replacing `?Sized` with `Sized`\n+   |\n+LL - fn bar(_: impl ?Sized) {}\n+LL + fn bar(_: impl Sized) {}\n+   |\n+help: function arguments must have a statically known size, borrowed types always have a known size\n+   |\n+LL | fn bar(_: &impl ?Sized) {}\n+   |           +\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "4d45bffabce5e8ccb1a425fd9674d2d72f1a814a", "filename": "tests/ui/trait-bounds/unsized-bound.stderr", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/af955a647e538c3bc724cce84fb913d03e1d6c81/tests%2Fui%2Ftrait-bounds%2Funsized-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af955a647e538c3bc724cce84fb913d03e1d6c81/tests%2Fui%2Ftrait-bounds%2Funsized-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrait-bounds%2Funsized-bound.stderr?ref=af955a647e538c3bc724cce84fb913d03e1d6c81", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the size for values of type `B` cannot be known at compilation tim\n LL | impl<A, B> Trait<(A, B)> for (A, B) where A: ?Sized, B: ?Sized, {}\n    |         -                    ^^^^^^ doesn't have a size known at compile-time\n    |         |\n-   |         this type parameter needs to be `std::marker::Sized`\n+   |         this type parameter needs to be `Sized`\n    |\n    = note: required because it appears within the type `(A, B)`\n note: required by a bound in `Trait`\n@@ -28,7 +28,7 @@ error[E0277]: the size for values of type `A` cannot be known at compilation tim\n LL | impl<A, B> Trait<(A, B)> for (A, B) where A: ?Sized, B: ?Sized, {}\n    |      -                       ^^^^^^ doesn't have a size known at compile-time\n    |      |\n-   |      this type parameter needs to be `std::marker::Sized`\n+   |      this type parameter needs to be `Sized`\n    |\n    = note: only the last element of a tuple may have a dynamically sized type\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n@@ -43,7 +43,7 @@ error[E0277]: the size for values of type `C` cannot be known at compilation tim\n LL | impl<A, B: ?Sized, C: ?Sized> Trait<(A, B, C)> for (A, B, C) where A: ?Sized, {}\n    |                    -                               ^^^^^^^^^ doesn't have a size known at compile-time\n    |                    |\n-   |                    this type parameter needs to be `std::marker::Sized`\n+   |                    this type parameter needs to be `Sized`\n    |\n    = note: required because it appears within the type `(A, B, C)`\n note: required by a bound in `Trait`\n@@ -65,9 +65,7 @@ error[E0277]: the size for values of type `A` cannot be known at compilation tim\n   --> $DIR/unsized-bound.rs:5:52\n    |\n LL | impl<A, B: ?Sized, C: ?Sized> Trait<(A, B, C)> for (A, B, C) where A: ?Sized, {}\n-   |      -                                             ^^^^^^^^^ doesn't have a size known at compile-time\n-   |      |\n-   |      this type parameter needs to be `std::marker::Sized`\n+   |      - this type parameter needs to be `Sized`     ^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = note: only the last element of a tuple may have a dynamically sized type\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n@@ -80,9 +78,7 @@ error[E0277]: the size for values of type `B` cannot be known at compilation tim\n   --> $DIR/unsized-bound.rs:5:52\n    |\n LL | impl<A, B: ?Sized, C: ?Sized> Trait<(A, B, C)> for (A, B, C) where A: ?Sized, {}\n-   |         -                                          ^^^^^^^^^ doesn't have a size known at compile-time\n-   |         |\n-   |         this type parameter needs to be `std::marker::Sized`\n+   |         - this type parameter needs to be `Sized`  ^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = note: only the last element of a tuple may have a dynamically sized type\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n@@ -97,7 +93,7 @@ error[E0277]: the size for values of type `B` cannot be known at compilation tim\n LL | impl<A: ?Sized, B: ?Sized> Trait2<(A, B)> for (A, B) {}\n    |                 -                             ^^^^^^ doesn't have a size known at compile-time\n    |                 |\n-   |                 this type parameter needs to be `std::marker::Sized`\n+   |                 this type parameter needs to be `Sized`\n    |\n    = note: required because it appears within the type `(A, B)`\n note: required by a bound in `Trait2`\n@@ -121,7 +117,7 @@ error[E0277]: the size for values of type `A` cannot be known at compilation tim\n LL | impl<A: ?Sized, B: ?Sized> Trait2<(A, B)> for (A, B) {}\n    |      -                                        ^^^^^^ doesn't have a size known at compile-time\n    |      |\n-   |      this type parameter needs to be `std::marker::Sized`\n+   |      this type parameter needs to be `Sized`\n    |\n    = note: only the last element of a tuple may have a dynamically sized type\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n@@ -136,7 +132,7 @@ error[E0277]: the size for values of type `A` cannot be known at compilation tim\n LL | impl<A> Trait3<A> for A where A: ?Sized {}\n    |      -                ^ doesn't have a size known at compile-time\n    |      |\n-   |      this type parameter needs to be `std::marker::Sized`\n+   |      this type parameter needs to be `Sized`\n    |\n note: required by a bound in `Trait3`\n   --> $DIR/unsized-bound.rs:13:14\n@@ -159,7 +155,7 @@ error[E0277]: the size for values of type `A` cannot be known at compilation tim\n LL | impl<A: ?Sized> Trait4<A> for A {}\n    |      -                        ^ doesn't have a size known at compile-time\n    |      |\n-   |      this type parameter needs to be `std::marker::Sized`\n+   |      this type parameter needs to be `Sized`\n    |\n note: required by a bound in `Trait4`\n   --> $DIR/unsized-bound.rs:16:14\n@@ -182,7 +178,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n LL | impl<X, Y> Trait5<X, Y> for X where X: ?Sized {}\n    |      -                      ^ doesn't have a size known at compile-time\n    |      |\n-   |      this type parameter needs to be `std::marker::Sized`\n+   |      this type parameter needs to be `Sized`\n    |\n note: required by a bound in `Trait5`\n   --> $DIR/unsized-bound.rs:19:14\n@@ -205,7 +201,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n LL | impl<X: ?Sized, Y> Trait6<X, Y> for X {}\n    |      -                              ^ doesn't have a size known at compile-time\n    |      |\n-   |      this type parameter needs to be `std::marker::Sized`\n+   |      this type parameter needs to be `Sized`\n    |\n note: required by a bound in `Trait6`\n   --> $DIR/unsized-bound.rs:22:14\n@@ -228,7 +224,7 @@ error[E0277]: the size for values of type `Y` cannot be known at compilation tim\n LL | impl<X, Y> Trait7<X, Y> for X where Y: ?Sized {}\n    |         -  ^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |         |\n-   |         this type parameter needs to be `std::marker::Sized`\n+   |         this type parameter needs to be `Sized`\n    |\n note: required by a bound in `Trait7`\n   --> $DIR/unsized-bound.rs:25:17\n@@ -251,7 +247,7 @@ error[E0277]: the size for values of type `Y` cannot be known at compilation tim\n LL | impl<X, Y: ?Sized> Trait8<X, Y> for X {}\n    |         -          ^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |         |\n-   |         this type parameter needs to be `std::marker::Sized`\n+   |         this type parameter needs to be `Sized`\n    |\n note: required by a bound in `Trait8`\n   --> $DIR/unsized-bound.rs:28:17"}, {"sha": "f3a4c6890337756cfce3e3e31db056eedb83b39b", "filename": "tests/ui/traits/suggest-where-clause.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af955a647e538c3bc724cce84fb913d03e1d6c81/tests%2Fui%2Ftraits%2Fsuggest-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af955a647e538c3bc724cce84fb913d03e1d6c81/tests%2Fui%2Ftraits%2Fsuggest-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fsuggest-where-clause.stderr?ref=af955a647e538c3bc724cce84fb913d03e1d6c81", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `U` cannot be known at compilation tim\n   --> $DIR/suggest-where-clause.rs:7:20\n    |\n LL | fn check<T: Iterator, U: ?Sized>() {\n-   |                       - this type parameter needs to be `std::marker::Sized`\n+   |                       - this type parameter needs to be `Sized`\n LL |     // suggest a where-clause, if needed\n LL |     mem::size_of::<U>();\n    |                    ^ doesn't have a size known at compile-time\n@@ -19,7 +19,7 @@ error[E0277]: the size for values of type `U` cannot be known at compilation tim\n   --> $DIR/suggest-where-clause.rs:10:20\n    |\n LL | fn check<T: Iterator, U: ?Sized>() {\n-   |                       - this type parameter needs to be `std::marker::Sized`\n+   |                       - this type parameter needs to be `Sized`\n ...\n LL |     mem::size_of::<Misc<U>>();\n    |                    ^^^^^^^ doesn't have a size known at compile-time"}, {"sha": "0a79f8bba01a0950611380d4003a5ce03f8f082c", "filename": "tests/ui/union/union-sized-field.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af955a647e538c3bc724cce84fb913d03e1d6c81/tests%2Fui%2Funion%2Funion-sized-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af955a647e538c3bc724cce84fb913d03e1d6c81/tests%2Fui%2Funion%2Funion-sized-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funion%2Funion-sized-field.stderr?ref=af955a647e538c3bc724cce84fb913d03e1d6c81", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n   --> $DIR/union-sized-field.rs:4:12\n    |\n LL | union Foo<T: ?Sized> {\n-   |           - this type parameter needs to be `std::marker::Sized`\n+   |           - this type parameter needs to be `Sized`\n LL |     value: ManuallyDrop<T>,\n    |            ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n@@ -28,7 +28,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n   --> $DIR/union-sized-field.rs:9:12\n    |\n LL | struct Foo2<T: ?Sized> {\n-   |             - this type parameter needs to be `std::marker::Sized`\n+   |             - this type parameter needs to be `Sized`\n LL |     value: ManuallyDrop<T>,\n    |            ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n@@ -54,7 +54,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n   --> $DIR/union-sized-field.rs:15:11\n    |\n LL | enum Foo3<T: ?Sized> {\n-   |           - this type parameter needs to be `std::marker::Sized`\n+   |           - this type parameter needs to be `Sized`\n LL |     Value(ManuallyDrop<T>),\n    |           ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |"}, {"sha": "daef984404a7951bcdc553283cf4a3568e458827", "filename": "tests/ui/unsized/unsized-bare-typaram.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af955a647e538c3bc724cce84fb913d03e1d6c81/tests%2Fui%2Funsized%2Funsized-bare-typaram.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af955a647e538c3bc724cce84fb913d03e1d6c81/tests%2Fui%2Funsized%2Funsized-bare-typaram.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsized%2Funsized-bare-typaram.stderr?ref=af955a647e538c3bc724cce84fb913d03e1d6c81", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n LL | fn foo<T: ?Sized>() { bar::<T>() }\n    |        -                    ^ doesn't have a size known at compile-time\n    |        |\n-   |        this type parameter needs to be `std::marker::Sized`\n+   |        this type parameter needs to be `Sized`\n    |\n note: required by a bound in `bar`\n   --> $DIR/unsized-bare-typaram.rs:1:8"}, {"sha": "9e6408e8143677ab18121182efbf50ce08780173", "filename": "tests/ui/unsized/unsized-enum.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af955a647e538c3bc724cce84fb913d03e1d6c81/tests%2Fui%2Funsized%2Funsized-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af955a647e538c3bc724cce84fb913d03e1d6c81/tests%2Fui%2Funsized%2Funsized-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsized%2Funsized-enum.stderr?ref=af955a647e538c3bc724cce84fb913d03e1d6c81", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n LL | fn foo2<T: ?Sized>() { not_sized::<Foo<T>>() }\n    |         -                          ^^^^^^ doesn't have a size known at compile-time\n    |         |\n-   |         this type parameter needs to be `std::marker::Sized`\n+   |         this type parameter needs to be `Sized`\n    |\n note: required by a bound in `Foo`\n   --> $DIR/unsized-enum.rs:4:10"}, {"sha": "71cf782120e575a8c0d4896db78cb37cfd24db05", "filename": "tests/ui/unsized/unsized-enum2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/af955a647e538c3bc724cce84fb913d03e1d6c81/tests%2Fui%2Funsized%2Funsized-enum2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af955a647e538c3bc724cce84fb913d03e1d6c81/tests%2Fui%2Funsized%2Funsized-enum2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsized%2Funsized-enum2.stderr?ref=af955a647e538c3bc724cce84fb913d03e1d6c81", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `W` cannot be known at compilation tim\n   --> $DIR/unsized-enum2.rs:23:8\n    |\n LL | enum E<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized> {\n-   |        - this type parameter needs to be `std::marker::Sized`\n+   |        - this type parameter needs to be `Sized`\n LL |     // parameter\n LL |     VA(W),\n    |        ^ doesn't have a size known at compile-time\n@@ -27,7 +27,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized-enum2.rs:25:11\n    |\n LL | enum E<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized> {\n-   |                   - this type parameter needs to be `std::marker::Sized`\n+   |                   - this type parameter needs to be `Sized`\n ...\n LL |     VB{x: X},\n    |           ^ doesn't have a size known at compile-time\n@@ -52,7 +52,7 @@ error[E0277]: the size for values of type `Y` cannot be known at compilation tim\n   --> $DIR/unsized-enum2.rs:27:15\n    |\n LL | enum E<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized> {\n-   |                              - this type parameter needs to be `std::marker::Sized`\n+   |                              - this type parameter needs to be `Sized`\n ...\n LL |     VC(isize, Y),\n    |               ^ doesn't have a size known at compile-time\n@@ -77,7 +77,7 @@ error[E0277]: the size for values of type `Z` cannot be known at compilation tim\n   --> $DIR/unsized-enum2.rs:29:21\n    |\n LL | enum E<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized> {\n-   |                                         - this type parameter needs to be `std::marker::Sized`\n+   |                                         - this type parameter needs to be `Sized`\n ...\n LL |     VD{u: isize, x: Z},\n    |                     ^ doesn't have a size known at compile-time"}, {"sha": "0f6fadde19a05a54dae6577377a328aeb6d07a0f", "filename": "tests/ui/unsized/unsized-fn-arg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af955a647e538c3bc724cce84fb913d03e1d6c81/tests%2Fui%2Funsized%2Funsized-fn-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af955a647e538c3bc724cce84fb913d03e1d6c81/tests%2Fui%2Funsized%2Funsized-fn-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsized%2Funsized-fn-arg.stderr?ref=af955a647e538c3bc724cce84fb913d03e1d6c81", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n LL | fn f<T: ?Sized>(t: T) {}\n    |      -          ^ doesn't have a size known at compile-time\n    |      |\n-   |      this type parameter needs to be `std::marker::Sized`\n+   |      this type parameter needs to be `Sized`\n    |\n    = help: unsized fn params are gated as an unstable feature\n help: consider removing the `?Sized` bound to make the type parameter `Sized`"}, {"sha": "9e5ad92eb04cd010d82a61940ef5a054dfa14241", "filename": "tests/ui/unsized/unsized-inherent-impl-self-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af955a647e538c3bc724cce84fb913d03e1d6c81/tests%2Fui%2Funsized%2Funsized-inherent-impl-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af955a647e538c3bc724cce84fb913d03e1d6c81/tests%2Fui%2Funsized%2Funsized-inherent-impl-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsized%2Funsized-inherent-impl-self-type.stderr?ref=af955a647e538c3bc724cce84fb913d03e1d6c81", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n LL | impl<X: ?Sized> S5<X> {\n    |      -          ^^^^^ doesn't have a size known at compile-time\n    |      |\n-   |      this type parameter needs to be `std::marker::Sized`\n+   |      this type parameter needs to be `Sized`\n    |\n note: required by a bound in `S5`\n   --> $DIR/unsized-inherent-impl-self-type.rs:5:11"}, {"sha": "4e7cb09f0ccafcc83c9e0af57828bf1caad6e600", "filename": "tests/ui/unsized/unsized-struct.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af955a647e538c3bc724cce84fb913d03e1d6c81/tests%2Fui%2Funsized%2Funsized-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af955a647e538c3bc724cce84fb913d03e1d6c81/tests%2Fui%2Funsized%2Funsized-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsized%2Funsized-struct.stderr?ref=af955a647e538c3bc724cce84fb913d03e1d6c81", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n LL | fn foo2<T: ?Sized>() { not_sized::<Foo<T>>() }\n    |         -                          ^^^^^^ doesn't have a size known at compile-time\n    |         |\n-   |         this type parameter needs to be `std::marker::Sized`\n+   |         this type parameter needs to be `Sized`\n    |\n note: required by a bound in `Foo`\n   --> $DIR/unsized-struct.rs:4:12\n@@ -30,7 +30,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n LL | fn bar2<T: ?Sized>() { is_sized::<Bar<T>>() }\n    |         -                         ^^^^^^ doesn't have a size known at compile-time\n    |         |\n-   |         this type parameter needs to be `std::marker::Sized`\n+   |         this type parameter needs to be `Sized`\n    |\n note: required because it appears within the type `Bar<T>`\n   --> $DIR/unsized-struct.rs:11:8"}, {"sha": "4955d463fc26f0b4a6326a7db9df9c1a8ee07f40", "filename": "tests/ui/unsized/unsized-trait-impl-self-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af955a647e538c3bc724cce84fb913d03e1d6c81/tests%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af955a647e538c3bc724cce84fb913d03e1d6c81/tests%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr?ref=af955a647e538c3bc724cce84fb913d03e1d6c81", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n LL | impl<X: ?Sized> T3<X> for S5<X> {\n    |      -                    ^^^^^ doesn't have a size known at compile-time\n    |      |\n-   |      this type parameter needs to be `std::marker::Sized`\n+   |      this type parameter needs to be `Sized`\n    |\n note: required by a bound in `S5`\n   --> $DIR/unsized-trait-impl-self-type.rs:8:11"}, {"sha": "8761c293af46515a44b33109b32424d04d029fc5", "filename": "tests/ui/unsized/unsized-trait-impl-trait-arg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af955a647e538c3bc724cce84fb913d03e1d6c81/tests%2Fui%2Funsized%2Funsized-trait-impl-trait-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af955a647e538c3bc724cce84fb913d03e1d6c81/tests%2Fui%2Funsized%2Funsized-trait-impl-trait-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsized%2Funsized-trait-impl-trait-arg.stderr?ref=af955a647e538c3bc724cce84fb913d03e1d6c81", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n LL | impl<X: ?Sized> T2<X> for S4<X> {\n    |      -          ^^^^^ doesn't have a size known at compile-time\n    |      |\n-   |      this type parameter needs to be `std::marker::Sized`\n+   |      this type parameter needs to be `Sized`\n    |\n note: required by a bound in `T2`\n   --> $DIR/unsized-trait-impl-trait-arg.rs:4:10"}, {"sha": "3ef9a875358c0f1c6d5201df7568e3de04de7718", "filename": "tests/ui/unsized/unsized3.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/af955a647e538c3bc724cce84fb913d03e1d6c81/tests%2Fui%2Funsized%2Funsized3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af955a647e538c3bc724cce84fb913d03e1d6c81/tests%2Fui%2Funsized%2Funsized3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsized%2Funsized3.stderr?ref=af955a647e538c3bc724cce84fb913d03e1d6c81", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized3.rs:7:13\n    |\n LL | fn f1<X: ?Sized>(x: &X) {\n-   |       - this type parameter needs to be `std::marker::Sized`\n+   |       - this type parameter needs to be `Sized`\n LL |     f2::<X>(x);\n    |     ------- ^ doesn't have a size known at compile-time\n    |     |\n@@ -27,7 +27,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized3.rs:18:13\n    |\n LL | fn f3<X: ?Sized + T>(x: &X) {\n-   |       - this type parameter needs to be `std::marker::Sized`\n+   |       - this type parameter needs to be `Sized`\n LL |     f4::<X>(x);\n    |     ------- ^ doesn't have a size known at compile-time\n    |     |\n@@ -52,7 +52,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized3.rs:33:8\n    |\n LL | fn f8<X: ?Sized>(x1: &S<X>, x2: &S<X>) {\n-   |       - this type parameter needs to be `std::marker::Sized`\n+   |       - this type parameter needs to be `Sized`\n LL |     f5(x1);\n    |     -- ^^ doesn't have a size known at compile-time\n    |     |\n@@ -82,7 +82,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized3.rs:40:5\n    |\n LL | fn f9<X: ?Sized>(x1: Box<S<X>>) {\n-   |       - this type parameter needs to be `std::marker::Sized`\n+   |       - this type parameter needs to be `Sized`\n LL |     f5(&(*x1, 34));\n    |     ^^ doesn't have a size known at compile-time\n    |\n@@ -102,7 +102,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized3.rs:45:9\n    |\n LL | fn f10<X: ?Sized>(x1: Box<S<X>>) {\n-   |        - this type parameter needs to be `std::marker::Sized`\n+   |        - this type parameter needs to be `Sized`\n LL |     f5(&(32, *x1));\n    |         ^^^^^^^^^ doesn't have a size known at compile-time\n    |\n@@ -123,7 +123,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized3.rs:45:8\n    |\n LL | fn f10<X: ?Sized>(x1: Box<S<X>>) {\n-   |        - this type parameter needs to be `std::marker::Sized`\n+   |        - this type parameter needs to be `Sized`\n LL |     f5(&(32, *x1));\n    |     -- ^^^^^^^^^^ doesn't have a size known at compile-time\n    |     |"}, {"sha": "53e7fc17ef9f360d065bb94bc36f093f8578cfb8", "filename": "tests/ui/unsized/unsized5.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/af955a647e538c3bc724cce84fb913d03e1d6c81/tests%2Fui%2Funsized%2Funsized5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af955a647e538c3bc724cce84fb913d03e1d6c81/tests%2Fui%2Funsized%2Funsized5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsized%2Funsized5.stderr?ref=af955a647e538c3bc724cce84fb913d03e1d6c81", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized5.rs:4:9\n    |\n LL | struct S1<X: ?Sized> {\n-   |           - this type parameter needs to be `std::marker::Sized`\n+   |           - this type parameter needs to be `Sized`\n LL |     f1: X,\n    |         ^ doesn't have a size known at compile-time\n    |\n@@ -26,7 +26,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized5.rs:10:8\n    |\n LL | struct S2<X: ?Sized> {\n-   |           - this type parameter needs to be `std::marker::Sized`\n+   |           - this type parameter needs to be `Sized`\n LL |     f: isize,\n LL |     g: X,\n    |        ^ doesn't have a size known at compile-time\n@@ -87,7 +87,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized5.rs:25:8\n    |\n LL | enum E<X: ?Sized> {\n-   |        - this type parameter needs to be `std::marker::Sized`\n+   |        - this type parameter needs to be `Sized`\n LL |     V1(X, isize),\n    |        ^ doesn't have a size known at compile-time\n    |\n@@ -111,7 +111,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized5.rs:29:12\n    |\n LL | enum F<X: ?Sized> {\n-   |        - this type parameter needs to be `std::marker::Sized`\n+   |        - this type parameter needs to be `Sized`\n LL |     V2{f1: X, f: isize},\n    |            ^ doesn't have a size known at compile-time\n    |"}, {"sha": "56e7f60f9ff0852733310eda559977f47bed49fb", "filename": "tests/ui/unsized/unsized6.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/af955a647e538c3bc724cce84fb913d03e1d6c81/tests%2Fui%2Funsized%2Funsized6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af955a647e538c3bc724cce84fb913d03e1d6c81/tests%2Fui%2Funsized%2Funsized6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsized%2Funsized6.stderr?ref=af955a647e538c3bc724cce84fb913d03e1d6c81", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `Y` cannot be known at compilation tim\n   --> $DIR/unsized6.rs:9:9\n    |\n LL | fn f1<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized>(x: &X) {\n-   |                             - this type parameter needs to be `std::marker::Sized`\n+   |                             - this type parameter needs to be `Sized`\n ...\n LL |     let y: Y;\n    |         ^ doesn't have a size known at compile-time\n@@ -23,7 +23,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized6.rs:7:12\n    |\n LL | fn f1<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized>(x: &X) {\n-   |                  - this type parameter needs to be `std::marker::Sized`\n+   |                  - this type parameter needs to be `Sized`\n LL |     let _: W; // <-- this is OK, no bindings created, no initializer.\n LL |     let _: (isize, (X, isize));\n    |            ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n@@ -39,7 +39,7 @@ error[E0277]: the size for values of type `Z` cannot be known at compilation tim\n   --> $DIR/unsized6.rs:11:12\n    |\n LL | fn f1<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized>(x: &X) {\n-   |                                        - this type parameter needs to be `std::marker::Sized`\n+   |                                        - this type parameter needs to be `Sized`\n ...\n LL |     let y: (isize, (Z, usize));\n    |            ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n@@ -55,7 +55,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized6.rs:15:9\n    |\n LL | fn f2<X: ?Sized, Y: ?Sized>(x: &X) {\n-   |       - this type parameter needs to be `std::marker::Sized`\n+   |       - this type parameter needs to be `Sized`\n LL |     let y: X;\n    |         ^ doesn't have a size known at compile-time\n    |\n@@ -75,7 +75,7 @@ error[E0277]: the size for values of type `Y` cannot be known at compilation tim\n   --> $DIR/unsized6.rs:17:12\n    |\n LL | fn f2<X: ?Sized, Y: ?Sized>(x: &X) {\n-   |                  - this type parameter needs to be `std::marker::Sized`\n+   |                  - this type parameter needs to be `Sized`\n ...\n LL |     let y: (isize, (Y, isize));\n    |            ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n@@ -91,7 +91,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized6.rs:22:9\n    |\n LL | fn f3<X: ?Sized>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n-   |       - this type parameter needs to be `std::marker::Sized`\n+   |       - this type parameter needs to be `Sized`\n LL |     let y: X = *x1;\n    |         ^ doesn't have a size known at compile-time\n    |\n@@ -111,7 +111,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized6.rs:24:9\n    |\n LL | fn f3<X: ?Sized>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n-   |       - this type parameter needs to be `std::marker::Sized`\n+   |       - this type parameter needs to be `Sized`\n ...\n LL |     let y = *x2;\n    |         ^ doesn't have a size known at compile-time\n@@ -128,7 +128,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized6.rs:26:10\n    |\n LL | fn f3<X: ?Sized>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n-   |       - this type parameter needs to be `std::marker::Sized`\n+   |       - this type parameter needs to be `Sized`\n ...\n LL |     let (y, z) = (*x3, 4);\n    |          ^ doesn't have a size known at compile-time\n@@ -145,7 +145,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized6.rs:30:9\n    |\n LL | fn f4<X: ?Sized + T>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n-   |       - this type parameter needs to be `std::marker::Sized`\n+   |       - this type parameter needs to be `Sized`\n LL |     let y: X = *x1;\n    |         ^ doesn't have a size known at compile-time\n    |\n@@ -165,7 +165,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized6.rs:32:9\n    |\n LL | fn f4<X: ?Sized + T>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n-   |       - this type parameter needs to be `std::marker::Sized`\n+   |       - this type parameter needs to be `Sized`\n ...\n LL |     let y = *x2;\n    |         ^ doesn't have a size known at compile-time\n@@ -182,7 +182,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized6.rs:34:10\n    |\n LL | fn f4<X: ?Sized + T>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n-   |       - this type parameter needs to be `std::marker::Sized`\n+   |       - this type parameter needs to be `Sized`\n ...\n LL |     let (y, z) = (*x3, 4);\n    |          ^ doesn't have a size known at compile-time\n@@ -201,7 +201,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n LL | fn g1<X: ?Sized>(x: X) {}\n    |       -          ^ doesn't have a size known at compile-time\n    |       |\n-   |       this type parameter needs to be `std::marker::Sized`\n+   |       this type parameter needs to be `Sized`\n    |\n    = help: unsized fn params are gated as an unstable feature\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n@@ -220,7 +220,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n LL | fn g2<X: ?Sized + T>(x: X) {}\n    |       -              ^ doesn't have a size known at compile-time\n    |       |\n-   |       this type parameter needs to be `std::marker::Sized`\n+   |       this type parameter needs to be `Sized`\n    |\n    = help: unsized fn params are gated as an unstable feature\n help: consider removing the `?Sized` bound to make the type parameter `Sized`"}, {"sha": "c313a2724c038a74d47851674f26c8a231190187", "filename": "tests/ui/unsized/unsized7.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af955a647e538c3bc724cce84fb913d03e1d6c81/tests%2Fui%2Funsized%2Funsized7.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af955a647e538c3bc724cce84fb913d03e1d6c81/tests%2Fui%2Funsized%2Funsized7.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsized%2Funsized7.stderr?ref=af955a647e538c3bc724cce84fb913d03e1d6c81", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n LL | impl<X: ?Sized + T> T1<X> for S3<X> {\n    |      -              ^^^^^ doesn't have a size known at compile-time\n    |      |\n-   |      this type parameter needs to be `std::marker::Sized`\n+   |      this type parameter needs to be `Sized`\n    |\n note: required by a bound in `T1`\n   --> $DIR/unsized7.rs:7:10"}]}