{"sha": "dbac28b4b4f2adb135104593365943b3eab24685", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiYWMyOGI0YjRmMmFkYjEzNTEwNDU5MzM2NTk0M2IzZWFiMjQ2ODU=", "commit": {"author": {"name": "Ruben Schmidmeister", "email": "ruben.schmidmeister@icloud.com", "date": "2019-06-12T21:59:20Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2019-06-12T21:59:20Z"}, "message": "Use trait to abstract emit modes (#3616)", "tree": {"sha": "84548be52c25f7c4af5cfb1f073b412caee468ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84548be52c25f7c4af5cfb1f073b412caee468ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbac28b4b4f2adb135104593365943b3eab24685", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbac28b4b4f2adb135104593365943b3eab24685", "html_url": "https://github.com/rust-lang/rust/commit/dbac28b4b4f2adb135104593365943b3eab24685", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbac28b4b4f2adb135104593365943b3eab24685/comments", "author": {"login": "bash", "id": 4602612, "node_id": "MDQ6VXNlcjQ2MDI2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/4602612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bash", "html_url": "https://github.com/bash", "followers_url": "https://api.github.com/users/bash/followers", "following_url": "https://api.github.com/users/bash/following{/other_user}", "gists_url": "https://api.github.com/users/bash/gists{/gist_id}", "starred_url": "https://api.github.com/users/bash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bash/subscriptions", "organizations_url": "https://api.github.com/users/bash/orgs", "repos_url": "https://api.github.com/users/bash/repos", "events_url": "https://api.github.com/users/bash/events{/privacy}", "received_events_url": "https://api.github.com/users/bash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cea171cef198cf371a2f6d9182bc44a1a549e56", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cea171cef198cf371a2f6d9182bc44a1a549e56", "html_url": "https://github.com/rust-lang/rust/commit/1cea171cef198cf371a2f6d9182bc44a1a549e56"}], "stats": {"total": 542, "additions": 363, "deletions": 179}, "files": [{"sha": "5c2b46583b43efa2137b4ab1637d2a4ac8888322", "filename": "src/checkstyle.rs", "status": "removed", "additions": 0, "deletions": 102, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/1cea171cef198cf371a2f6d9182bc44a1a549e56/src%2Fcheckstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cea171cef198cf371a2f6d9182bc44a1a549e56/src%2Fcheckstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcheckstyle.rs?ref=1cea171cef198cf371a2f6d9182bc44a1a549e56", "patch": "@@ -1,102 +0,0 @@\n-use std::fmt::{self, Display};\n-use std::io::{self, Write};\n-use std::path::Path;\n-\n-use crate::rustfmt_diff::{DiffLine, Mismatch};\n-\n-/// The checkstyle header - should be emitted before the output of Rustfmt.\n-///\n-/// Note that emitting checkstyle output is not stable and may removed in a\n-/// future version of Rustfmt.\n-pub(crate) fn header() -> String {\n-    let mut xml_heading = String::new();\n-    xml_heading.push_str(r#\"<?xml version=\"1.0\" encoding=\"utf-8\"?>\"#);\n-    xml_heading.push_str(\"\\n\");\n-    xml_heading.push_str(r#\"<checkstyle version=\"4.3\">\"#);\n-    xml_heading\n-}\n-\n-/// The checkstyle footer - should be emitted after the output of Rustfmt.\n-///\n-/// Note that emitting checkstyle output is not stable and may removed in a\n-/// future version of Rustfmt.\n-pub(crate) fn footer() -> String {\n-    \"</checkstyle>\\n\".to_owned()\n-}\n-\n-pub(crate) fn output_checkstyle_file<T>(\n-    mut writer: T,\n-    filename: &Path,\n-    diff: Vec<Mismatch>,\n-) -> Result<(), io::Error>\n-where\n-    T: Write,\n-{\n-    write!(writer, r#\"<file name=\"{}\">\"#, filename.display())?;\n-    for mismatch in diff {\n-        for line in mismatch.lines {\n-            // Do nothing with `DiffLine::Context` and `DiffLine::Resulting`.\n-            if let DiffLine::Expected(message) = line {\n-                write!(\n-                    writer,\n-                    r#\"<error line=\"{}\" severity=\"warning\" message=\"Should be `{}`\" />\"#,\n-                    mismatch.line_number,\n-                    XmlEscaped(&message)\n-                )?;\n-            }\n-        }\n-    }\n-    write!(writer, \"</file>\")?;\n-    Ok(())\n-}\n-\n-/// Convert special characters into XML entities.\n-/// This is needed for checkstyle output.\n-struct XmlEscaped<'a>(&'a str);\n-\n-impl<'a> Display for XmlEscaped<'a> {\n-    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        for char in self.0.chars() {\n-            match char {\n-                '<' => write!(formatter, \"&lt;\"),\n-                '>' => write!(formatter, \"&gt;\"),\n-                '\"' => write!(formatter, \"&quot;\"),\n-                '\\'' => write!(formatter, \"&apos;\"),\n-                '&' => write!(formatter, \"&amp;\"),\n-                _ => write!(formatter, \"{}\", char),\n-            }?;\n-        }\n-\n-        Ok(())\n-    }\n-}\n-\n-#[cfg(test)]\n-mod tests {\n-    use super::*;\n-\n-    #[test]\n-    fn special_characters_are_escaped() {\n-        assert_eq!(\n-            \"&lt;&gt;&quot;&apos;&amp;\",\n-            format!(\"{}\", XmlEscaped(r#\"<>\"'&\"#)),\n-        );\n-    }\n-\n-    #[test]\n-    fn special_characters_are_escaped_in_string_with_other_characters() {\n-        assert_eq!(\n-            \"The quick brown &quot;\ud83e\udd8a&quot; jumps &lt;over&gt; the lazy \ud83d\udc36\",\n-            format!(\n-                \"{}\",\n-                XmlEscaped(r#\"The quick brown \"\ud83e\udd8a\" jumps <over> the lazy \ud83d\udc36\"#)\n-            ),\n-        );\n-    }\n-\n-    #[test]\n-    fn other_characters_are_not_escaped() {\n-        let string = \"The quick brown \ud83e\udd8a jumps over the lazy \ud83d\udc36\";\n-        assert_eq!(string, format!(\"{}\", XmlEscaped(string)));\n-    }\n-}"}, {"sha": "03ca1e35b7209c4a93181da0a0c2d1fbf9844eb8", "filename": "src/emitter.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/dbac28b4b4f2adb135104593365943b3eab24685/src%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbac28b4b4f2adb135104593365943b3eab24685/src%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Femitter.rs?ref=dbac28b4b4f2adb135104593365943b3eab24685", "patch": "@@ -0,0 +1,50 @@\n+pub(crate) use self::checkstyle::*;\n+pub(crate) use self::diff::*;\n+pub(crate) use self::files::*;\n+pub(crate) use self::files_with_backup::*;\n+pub(crate) use self::modified_lines::*;\n+pub(crate) use self::stdout::*;\n+use crate::FileName;\n+use std::io::{self, Write};\n+use std::path::Path;\n+\n+mod checkstyle;\n+mod diff;\n+mod files;\n+mod files_with_backup;\n+mod modified_lines;\n+mod stdout;\n+\n+pub(crate) struct FormattedFile<'a> {\n+    pub(crate) filename: &'a FileName,\n+    pub(crate) original_text: &'a str,\n+    pub(crate) formatted_text: &'a str,\n+}\n+\n+#[derive(Debug, Default, Clone)]\n+pub(crate) struct EmitterResult {\n+    pub(crate) has_diff: bool,\n+}\n+\n+pub(crate) trait Emitter {\n+    fn emit_formatted_file(\n+        &self,\n+        output: &mut dyn Write,\n+        formatted_file: FormattedFile<'_>,\n+    ) -> Result<EmitterResult, io::Error>;\n+\n+    fn emit_header(&self, _output: &mut dyn Write) -> Result<(), io::Error> {\n+        Ok(())\n+    }\n+\n+    fn emit_footer(&self, _output: &mut dyn Write) -> Result<(), io::Error> {\n+        Ok(())\n+    }\n+}\n+\n+fn ensure_real_path(filename: &FileName) -> &Path {\n+    match *filename {\n+        FileName::Real(ref path) => path,\n+        _ => panic!(\"cannot format `{}` and emit to files\", filename),\n+    }\n+}"}, {"sha": "eb1499985fd62d3f6dec2760ade97613f4e97d08", "filename": "src/emitter/checkstyle.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/dbac28b4b4f2adb135104593365943b3eab24685/src%2Femitter%2Fcheckstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbac28b4b4f2adb135104593365943b3eab24685/src%2Femitter%2Fcheckstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Femitter%2Fcheckstyle.rs?ref=dbac28b4b4f2adb135104593365943b3eab24685", "patch": "@@ -0,0 +1,64 @@\n+use self::xml::XmlEscaped;\n+use super::*;\n+use crate::rustfmt_diff::{make_diff, DiffLine, Mismatch};\n+use std::io::{self, Write};\n+use std::path::Path;\n+\n+mod xml;\n+\n+#[derive(Debug, Default)]\n+pub(crate) struct CheckstyleEmitter;\n+\n+impl Emitter for CheckstyleEmitter {\n+    fn emit_header(&self, output: &mut dyn Write) -> Result<(), io::Error> {\n+        writeln!(output, r#\"<?xml version=\"1.0\" encoding=\"utf-8\"?>\"#)?;\n+        write!(output, r#\"<checkstyle version=\"4.3\">\"#)?;\n+        Ok(())\n+    }\n+\n+    fn emit_footer(&self, output: &mut dyn Write) -> Result<(), io::Error> {\n+        writeln!(output, \"</checkstyle>\")\n+    }\n+\n+    fn emit_formatted_file(\n+        &self,\n+        output: &mut dyn Write,\n+        FormattedFile {\n+            filename,\n+            original_text,\n+            formatted_text,\n+        }: FormattedFile<'_>,\n+    ) -> Result<EmitterResult, io::Error> {\n+        const CONTEXT_SIZE: usize = 3;\n+        let filename = ensure_real_path(filename);\n+        let diff = make_diff(original_text, formatted_text, CONTEXT_SIZE);\n+        output_checkstyle_file(output, filename, diff)?;\n+        Ok(EmitterResult::default())\n+    }\n+}\n+\n+pub(crate) fn output_checkstyle_file<T>(\n+    mut writer: T,\n+    filename: &Path,\n+    diff: Vec<Mismatch>,\n+) -> Result<(), io::Error>\n+where\n+    T: Write,\n+{\n+    write!(writer, r#\"<file name=\"{}\">\"#, filename.display())?;\n+    for mismatch in diff {\n+        for line in mismatch.lines {\n+            // Do nothing with `DiffLine::Context` and `DiffLine::Resulting`.\n+            if let DiffLine::Expected(message) = line {\n+                write!(\n+                    writer,\n+                    r#\"<error line=\"{}\" severity=\"warning\" message=\"Should be `{}`\" />\"#,\n+                    mismatch.line_number,\n+                    XmlEscaped(&message)\n+                )?;\n+            }\n+        }\n+    }\n+    write!(writer, \"</file>\")?;\n+    Ok(())\n+}"}, {"sha": "f251aabe8785fc713efece22ad519bec7c0ceafb", "filename": "src/emitter/checkstyle/xml.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/dbac28b4b4f2adb135104593365943b3eab24685/src%2Femitter%2Fcheckstyle%2Fxml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbac28b4b4f2adb135104593365943b3eab24685/src%2Femitter%2Fcheckstyle%2Fxml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Femitter%2Fcheckstyle%2Fxml.rs?ref=dbac28b4b4f2adb135104593365943b3eab24685", "patch": "@@ -0,0 +1,52 @@\n+use std::fmt::{self, Display};\n+\n+/// Convert special characters into XML entities.\n+/// This is needed for checkstyle output.\n+pub(super) struct XmlEscaped<'a>(pub(super) &'a str);\n+\n+impl<'a> Display for XmlEscaped<'a> {\n+    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        for char in self.0.chars() {\n+            match char {\n+                '<' => write!(formatter, \"&lt;\"),\n+                '>' => write!(formatter, \"&gt;\"),\n+                '\"' => write!(formatter, \"&quot;\"),\n+                '\\'' => write!(formatter, \"&apos;\"),\n+                '&' => write!(formatter, \"&amp;\"),\n+                _ => write!(formatter, \"{}\", char),\n+            }?;\n+        }\n+\n+        Ok(())\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    #[test]\n+    fn special_characters_are_escaped() {\n+        assert_eq!(\n+            \"&lt;&gt;&quot;&apos;&amp;\",\n+            format!(\"{}\", XmlEscaped(r#\"<>\"'&\"#)),\n+        );\n+    }\n+\n+    #[test]\n+    fn special_characters_are_escaped_in_string_with_other_characters() {\n+        assert_eq!(\n+            \"The quick brown &quot;\ud83e\udd8a&quot; jumps &lt;over&gt; the lazy \ud83d\udc36\",\n+            format!(\n+                \"{}\",\n+                XmlEscaped(r#\"The quick brown \"\ud83e\udd8a\" jumps <over> the lazy \ud83d\udc36\"#)\n+            ),\n+        );\n+    }\n+\n+    #[test]\n+    fn other_characters_are_not_escaped() {\n+        let string = \"The quick brown \ud83e\udd8a jumps over the lazy \ud83d\udc36\";\n+        assert_eq!(string, format!(\"{}\", XmlEscaped(string)));\n+    }\n+}"}, {"sha": "5e387395b5b23af60537275becae7828f6151360", "filename": "src/emitter/diff.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/dbac28b4b4f2adb135104593365943b3eab24685/src%2Femitter%2Fdiff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbac28b4b4f2adb135104593365943b3eab24685/src%2Femitter%2Fdiff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Femitter%2Fdiff.rs?ref=dbac28b4b4f2adb135104593365943b3eab24685", "patch": "@@ -0,0 +1,35 @@\n+use super::*;\n+use crate::config::Config;\n+use crate::rustfmt_diff::{make_diff, print_diff};\n+\n+pub(crate) struct DiffEmitter {\n+    config: Config,\n+}\n+\n+impl DiffEmitter {\n+    pub(crate) fn new(config: Config) -> Self {\n+        Self { config }\n+    }\n+}\n+\n+impl Emitter for DiffEmitter {\n+    fn emit_formatted_file(\n+        &self,\n+        _output: &mut dyn Write,\n+        FormattedFile {\n+            filename,\n+            original_text,\n+            formatted_text,\n+        }: FormattedFile<'_>,\n+    ) -> Result<EmitterResult, io::Error> {\n+        const CONTEXT_SIZE: usize = 3;\n+        let mismatch = make_diff(&original_text, formatted_text, CONTEXT_SIZE);\n+        let has_diff = !mismatch.is_empty();\n+        print_diff(\n+            mismatch,\n+            |line_num| format!(\"Diff in {} at line {}:\", filename, line_num),\n+            &self.config,\n+        );\n+        return Ok(EmitterResult { has_diff });\n+    }\n+}"}, {"sha": "5b1dbce11c91bb80ae5bf8d0bcfc1f97870cff09", "filename": "src/emitter/files.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/dbac28b4b4f2adb135104593365943b3eab24685/src%2Femitter%2Ffiles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbac28b4b4f2adb135104593365943b3eab24685/src%2Femitter%2Ffiles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Femitter%2Ffiles.rs?ref=dbac28b4b4f2adb135104593365943b3eab24685", "patch": "@@ -0,0 +1,24 @@\n+use super::*;\n+use std::fs;\n+\n+#[derive(Debug, Default)]\n+pub(crate) struct FilesEmitter;\n+\n+impl Emitter for FilesEmitter {\n+    fn emit_formatted_file(\n+        &self,\n+        _output: &mut dyn Write,\n+        FormattedFile {\n+            filename,\n+            original_text,\n+            formatted_text,\n+        }: FormattedFile<'_>,\n+    ) -> Result<EmitterResult, io::Error> {\n+        // Write text directly over original file if there is a diff.\n+        let filename = ensure_real_path(filename);\n+        if original_text != formatted_text {\n+            fs::write(filename, formatted_text)?;\n+        }\n+        Ok(EmitterResult::default())\n+    }\n+}"}, {"sha": "af3e0e2d91da3fee2f0847f8981ef28db6c279e0", "filename": "src/emitter/files_with_backup.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/dbac28b4b4f2adb135104593365943b3eab24685/src%2Femitter%2Ffiles_with_backup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbac28b4b4f2adb135104593365943b3eab24685/src%2Femitter%2Ffiles_with_backup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Femitter%2Ffiles_with_backup.rs?ref=dbac28b4b4f2adb135104593365943b3eab24685", "patch": "@@ -0,0 +1,31 @@\n+use super::*;\n+use std::fs;\n+\n+#[derive(Debug, Default)]\n+pub(crate) struct FilesWithBackupEmitter;\n+\n+impl Emitter for FilesWithBackupEmitter {\n+    fn emit_formatted_file(\n+        &self,\n+        _output: &mut dyn Write,\n+        FormattedFile {\n+            filename,\n+            original_text,\n+            formatted_text,\n+        }: FormattedFile<'_>,\n+    ) -> Result<EmitterResult, io::Error> {\n+        let filename = ensure_real_path(filename);\n+        if original_text != formatted_text {\n+            // Do a little dance to make writing safer - write to a temp file\n+            // rename the original to a .bk, then rename the temp file to the\n+            // original.\n+            let tmp_name = filename.with_extension(\"tmp\");\n+            let bk_name = filename.with_extension(\"bk\");\n+\n+            fs::write(&tmp_name, formatted_text)?;\n+            fs::rename(filename, bk_name)?;\n+            fs::rename(tmp_name, filename)?;\n+        }\n+        Ok(EmitterResult::default())\n+    }\n+}"}, {"sha": "83736c47bd616d24012654e9ec2f6575d2675aa2", "filename": "src/emitter/modified_lines.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/dbac28b4b4f2adb135104593365943b3eab24685/src%2Femitter%2Fmodified_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbac28b4b4f2adb135104593365943b3eab24685/src%2Femitter%2Fmodified_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Femitter%2Fmodified_lines.rs?ref=dbac28b4b4f2adb135104593365943b3eab24685", "patch": "@@ -0,0 +1,24 @@\n+use super::*;\n+use crate::rustfmt_diff::{make_diff, ModifiedLines};\n+use std::io::Write;\n+\n+#[derive(Debug, Default)]\n+pub(crate) struct ModifiedLinesEmitter;\n+\n+impl Emitter for ModifiedLinesEmitter {\n+    fn emit_formatted_file(\n+        &self,\n+        output: &mut dyn Write,\n+        FormattedFile {\n+            original_text,\n+            formatted_text,\n+            ..\n+        }: FormattedFile<'_>,\n+    ) -> Result<EmitterResult, io::Error> {\n+        const CONTEXT_SIZE: usize = 0;\n+        let mismatch = make_diff(original_text, formatted_text, CONTEXT_SIZE);\n+        let has_diff = !mismatch.is_empty();\n+        write!(output, \"{}\", ModifiedLines::from(mismatch))?;\n+        Ok(EmitterResult { has_diff })\n+    }\n+}"}, {"sha": "968de68c74195e0007a0c0e15924a44903605dde", "filename": "src/emitter/stdout.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/dbac28b4b4f2adb135104593365943b3eab24685/src%2Femitter%2Fstdout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbac28b4b4f2adb135104593365943b3eab24685/src%2Femitter%2Fstdout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Femitter%2Fstdout.rs?ref=dbac28b4b4f2adb135104593365943b3eab24685", "patch": "@@ -0,0 +1,32 @@\n+use super::*;\n+use crate::config::Verbosity;\n+use std::io::Write;\n+\n+#[derive(Debug)]\n+pub(crate) struct StdoutEmitter {\n+    verbosity: Verbosity,\n+}\n+\n+impl StdoutEmitter {\n+    pub(crate) fn new(verbosity: Verbosity) -> Self {\n+        Self { verbosity }\n+    }\n+}\n+\n+impl Emitter for StdoutEmitter {\n+    fn emit_formatted_file(\n+        &self,\n+        output: &mut dyn Write,\n+        FormattedFile {\n+            filename,\n+            formatted_text,\n+            ..\n+        }: FormattedFile<'_>,\n+    ) -> Result<EmitterResult, io::Error> {\n+        if self.verbosity != Verbosity::Quiet {\n+            writeln!(output, \"{}:\\n\", filename)?;\n+        }\n+        write!(output, \"{}\", formatted_text)?;\n+        Ok(EmitterResult::default())\n+    }\n+}"}, {"sha": "522de4008405299b3a467012c67fac550f2bbb44", "filename": "src/formatting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbac28b4b4f2adb135104593365943b3eab24685/src%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbac28b4b4f2adb135104593365943b3eab24685/src%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformatting.rs?ref=dbac28b4b4f2adb135104593365943b3eab24685", "patch": "@@ -233,8 +233,8 @@ impl<'b, T: Write + 'b> FormatHandler for Session<'b, T> {\n         report: &mut FormatReport,\n     ) -> Result<(), ErrorKind> {\n         if let Some(ref mut out) = self.out {\n-            match source_file::write_file(Some(source_map), &path, &result, out, &self.config) {\n-                Ok(has_diff) if has_diff => report.add_diff(),\n+            match source_file::write_file(Some(source_map), &path, &result, out, &*self.emitter) {\n+                Ok(ref result) if result.has_diff => report.add_diff(),\n                 Err(e) => {\n                     // Create a new error with path_str to help users see which files failed\n                     let err_msg = format!(\"{}: {}\", path, e);"}, {"sha": "14e2a6fe6e5144f90d1b682b3dc69c9acab73069", "filename": "src/lib.rs", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/dbac28b4b4f2adb135104593365943b3eab24685/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbac28b4b4f2adb135104593365943b3eab24685/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=dbac28b4b4f2adb135104593365943b3eab24685", "patch": "@@ -23,6 +23,7 @@ use ignore;\n use syntax::{ast, parse::DirectoryOwnership};\n \n use crate::comment::LineClasses;\n+use crate::emitter::Emitter;\n use crate::formatting::{FormatErrorMap, FormattingError, ReportedErrors, SourceFile};\n use crate::issues::Issue;\n use crate::shape::Indent;\n@@ -45,10 +46,10 @@ mod release_channel;\n \n mod attr;\n mod chains;\n-pub(crate) mod checkstyle;\n mod closures;\n mod comment;\n pub(crate) mod config;\n+mod emitter;\n mod expr;\n mod format_report_formatter;\n pub(crate) mod formatting;\n@@ -403,17 +404,21 @@ pub struct Session<'b, T: Write> {\n     pub out: Option<&'b mut T>,\n     pub(crate) errors: ReportedErrors,\n     source_file: SourceFile,\n+    emitter: Box<dyn Emitter + 'b>,\n }\n \n impl<'b, T: Write + 'b> Session<'b, T> {\n-    pub fn new(config: Config, out: Option<&'b mut T>) -> Session<'b, T> {\n-        if config.emit_mode() == EmitMode::Checkstyle {\n-            println!(\"{}\", checkstyle::header());\n+    pub fn new(config: Config, mut out: Option<&'b mut T>) -> Session<'b, T> {\n+        let emitter = create_emitter(&config);\n+\n+        if let Some(ref mut out) = out {\n+            let _ = emitter.emit_header(out);\n         }\n \n         Session {\n             config,\n             out,\n+            emitter,\n             errors: ReportedErrors::default(),\n             source_file: SourceFile::new(),\n         }\n@@ -469,10 +474,25 @@ impl<'b, T: Write + 'b> Session<'b, T> {\n     }\n }\n \n+pub(crate) fn create_emitter<'a>(config: &Config) -> Box<dyn Emitter + 'a> {\n+    match config.emit_mode() {\n+        EmitMode::Files if config.make_backup() => {\n+            Box::new(emitter::FilesWithBackupEmitter::default())\n+        }\n+        EmitMode::Files => Box::new(emitter::FilesEmitter::default()),\n+        EmitMode::Stdout | EmitMode::Coverage => {\n+            Box::new(emitter::StdoutEmitter::new(config.verbose()))\n+        }\n+        EmitMode::ModifiedLines => Box::new(emitter::ModifiedLinesEmitter::default()),\n+        EmitMode::Checkstyle => Box::new(emitter::CheckstyleEmitter::default()),\n+        EmitMode::Diff => Box::new(emitter::DiffEmitter::new(config.clone())),\n+    }\n+}\n+\n impl<'b, T: Write + 'b> Drop for Session<'b, T> {\n     fn drop(&mut self) {\n-        if self.config.emit_mode() == EmitMode::Checkstyle {\n-            println!(\"{}\", checkstyle::footer());\n+        if let Some(ref mut out) = self.out {\n+            let _ = self.emitter.emit_footer(out);\n         }\n     }\n }"}, {"sha": "074b7a7315f5c8a7eafb274ca67498eddd1e320a", "filename": "src/source_file.rs", "status": "modified", "additions": 19, "deletions": 66, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/dbac28b4b4f2adb135104593365943b3eab24685/src%2Fsource_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbac28b4b4f2adb135104593365943b3eab24685/src%2Fsource_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsource_file.rs?ref=dbac28b4b4f2adb135104593365943b3eab24685", "patch": "@@ -4,10 +4,13 @@ use std::path::Path;\n \n use syntax::source_map::SourceMap;\n \n-use crate::checkstyle::output_checkstyle_file;\n-use crate::config::{Config, EmitMode, FileName, Verbosity};\n-use crate::rustfmt_diff::{make_diff, print_diff, ModifiedLines};\n+use crate::config::FileName;\n+use crate::emitter::{self, Emitter};\n \n+#[cfg(test)]\n+use crate::config::Config;\n+#[cfg(test)]\n+use crate::create_emitter;\n #[cfg(test)]\n use crate::formatting::FileRecord;\n \n@@ -25,15 +28,13 @@ pub(crate) fn write_all_files<T>(\n where\n     T: Write,\n {\n-    if config.emit_mode() == EmitMode::Checkstyle {\n-        write!(out, \"{}\", crate::checkstyle::header())?;\n-    }\n+    let emitter = create_emitter(config);\n+\n+    emitter.emit_header(out)?;\n     for &(ref filename, ref text) in source_file {\n-        write_file(None, filename, text, out, config)?;\n-    }\n-    if config.emit_mode() == EmitMode::Checkstyle {\n-        write!(out, \"{}\", crate::checkstyle::footer())?;\n+        write_file(None, filename, text, out, &*emitter)?;\n     }\n+    emitter.emit_footer(out)?;\n \n     Ok(())\n }\n@@ -43,8 +44,8 @@ pub(crate) fn write_file<T>(\n     filename: &FileName,\n     formatted_text: &str,\n     out: &mut T,\n-    config: &Config,\n-) -> Result<bool, io::Error>\n+    emitter: &dyn Emitter,\n+) -> Result<emitter::EmitterResult, io::Error>\n where\n     T: Write,\n {\n@@ -75,59 +76,11 @@ where\n         None => fs::read_to_string(ensure_real_path(filename))?,\n     };\n \n-    match config.emit_mode() {\n-        EmitMode::Files if config.make_backup() => {\n-            let filename = ensure_real_path(filename);\n-            if original_text != formatted_text {\n-                // Do a little dance to make writing safer - write to a temp file\n-                // rename the original to a .bk, then rename the temp file to the\n-                // original.\n-                let tmp_name = filename.with_extension(\"tmp\");\n-                let bk_name = filename.with_extension(\"bk\");\n-\n-                fs::write(&tmp_name, formatted_text)?;\n-                fs::rename(filename, bk_name)?;\n-                fs::rename(tmp_name, filename)?;\n-            }\n-        }\n-        EmitMode::Files => {\n-            // Write text directly over original file if there is a diff.\n-            let filename = ensure_real_path(filename);\n-\n-            if original_text != formatted_text {\n-                fs::write(filename, formatted_text)?;\n-            }\n-        }\n-        EmitMode::Stdout | EmitMode::Coverage => {\n-            if config.verbose() != Verbosity::Quiet {\n-                println!(\"{}:\\n\", filename);\n-            }\n-            write!(out, \"{}\", formatted_text)?;\n-        }\n-        EmitMode::ModifiedLines => {\n-            let mismatch = make_diff(&original_text, formatted_text, 0);\n-            let has_diff = !mismatch.is_empty();\n-            write!(out, \"{}\", ModifiedLines::from(mismatch))?;\n-            return Ok(has_diff);\n-        }\n-        EmitMode::Checkstyle => {\n-            let filename = ensure_real_path(filename);\n-\n-            let diff = make_diff(&original_text, formatted_text, 3);\n-            output_checkstyle_file(out, filename, diff)?;\n-        }\n-        EmitMode::Diff => {\n-            let mismatch = make_diff(&original_text, formatted_text, 3);\n-            let has_diff = !mismatch.is_empty();\n-            print_diff(\n-                mismatch,\n-                |line_num| format!(\"Diff in {} at line {}:\", filename, line_num),\n-                config,\n-            );\n-            return Ok(has_diff);\n-        }\n-    }\n+    let formatted_file = emitter::FormattedFile {\n+        filename,\n+        original_text: &original_text,\n+        formatted_text,\n+    };\n \n-    // when we are not in diff mode, don't indicate differing files\n-    Ok(false)\n+    emitter.emit_formatted_file(out, formatted_file)\n }"}, {"sha": "2830f9aeff1ce3a674095069c750181e7f2ef618", "filename": "src/test/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dbac28b4b4f2adb135104593365943b3eab24685/src%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbac28b4b4f2adb135104593365943b3eab24685/src%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod.rs?ref=dbac28b4b4f2adb135104593365943b3eab24685", "patch": "@@ -9,7 +9,7 @@ use std::process::{Command, Stdio};\n use std::str::Chars;\n use std::thread;\n \n-use crate::config::{Color, Config, EmitMode, FileName, NewlineStyle, ReportTactic};\n+use crate::config::{Color, Config, EmitMode, FileName, NewlineStyle, ReportTactic, Verbosity};\n use crate::formatting::{ReportedErrors, SourceFile};\n use crate::is_nightly_channel;\n use crate::rustfmt_diff::{make_diff, print_diff, DiffLine, Mismatch, ModifiedChunk, OutputWriter};\n@@ -344,9 +344,9 @@ fn stdin_formatting_smoke_test() {\n     }\n \n     #[cfg(not(windows))]\n-    assert_eq!(buf, \"fn main() {}\\n\".as_bytes());\n+    assert_eq!(buf, \"stdin:\\n\\nfn main() {}\\n\".as_bytes());\n     #[cfg(windows)]\n-    assert_eq!(buf, \"fn main() {}\\r\\n\".as_bytes());\n+    assert_eq!(buf, \"stdin:\\n\\nfn main() {}\\r\\n\".as_bytes());\n }\n \n #[test]\n@@ -838,6 +838,7 @@ impl ConfigCodeBlock {\n \n     fn get_block_config(&self) -> Config {\n         let mut config = Config::default();\n+        config.set().verbose(Verbosity::Quiet);\n         if self.config_name.is_some() && self.config_value.is_some() {\n             config.override_value(\n                 self.config_name.as_ref().unwrap(),"}]}