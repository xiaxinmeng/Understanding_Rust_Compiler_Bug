{"sha": "d0b133cdc60cf843c5806d90ced710589ba95528", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwYjEzM2NkYzYwY2Y4NDNjNTgwNmQ5MGNlZDcxMDU4OWJhOTU1Mjg=", "commit": {"author": {"name": "LinkTed", "email": "LinkTed@users.noreply.github.com", "date": "2020-09-17T09:25:51Z"}, "committer": {"name": "LinkTed", "email": "LinkTed@users.noreply.github.com", "date": "2020-10-10T13:19:12Z"}, "message": "Remove unsupported target_os for SocketCred", "tree": {"sha": "3474d6d97706441eb802d134bda682f1a8c3d220", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3474d6d97706441eb802d134bda682f1a8c3d220"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0b133cdc60cf843c5806d90ced710589ba95528", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0b133cdc60cf843c5806d90ced710589ba95528", "html_url": "https://github.com/rust-lang/rust/commit/d0b133cdc60cf843c5806d90ced710589ba95528", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0b133cdc60cf843c5806d90ced710589ba95528/comments", "author": {"login": "LinkTed", "id": 6806266, "node_id": "MDQ6VXNlcjY4MDYyNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/6806266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LinkTed", "html_url": "https://github.com/LinkTed", "followers_url": "https://api.github.com/users/LinkTed/followers", "following_url": "https://api.github.com/users/LinkTed/following{/other_user}", "gists_url": "https://api.github.com/users/LinkTed/gists{/gist_id}", "starred_url": "https://api.github.com/users/LinkTed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LinkTed/subscriptions", "organizations_url": "https://api.github.com/users/LinkTed/orgs", "repos_url": "https://api.github.com/users/LinkTed/repos", "events_url": "https://api.github.com/users/LinkTed/events{/privacy}", "received_events_url": "https://api.github.com/users/LinkTed/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LinkTed", "id": 6806266, "node_id": "MDQ6VXNlcjY4MDYyNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/6806266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LinkTed", "html_url": "https://github.com/LinkTed", "followers_url": "https://api.github.com/users/LinkTed/followers", "following_url": "https://api.github.com/users/LinkTed/following{/other_user}", "gists_url": "https://api.github.com/users/LinkTed/gists{/gist_id}", "starred_url": "https://api.github.com/users/LinkTed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LinkTed/subscriptions", "organizations_url": "https://api.github.com/users/LinkTed/orgs", "repos_url": "https://api.github.com/users/LinkTed/repos", "events_url": "https://api.github.com/users/LinkTed/events{/privacy}", "received_events_url": "https://api.github.com/users/LinkTed/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5964d599ac748ef807594f3dcfc8e69a88449204", "url": "https://api.github.com/repos/rust-lang/rust/commits/5964d599ac748ef807594f3dcfc8e69a88449204", "html_url": "https://github.com/rust-lang/rust/commit/5964d599ac748ef807594f3dcfc8e69a88449204"}], "stats": {"total": 132, "additions": 7, "deletions": 125}, "files": [{"sha": "cfe1e328e2c9a7b20fe1bd11a58cee7481fcb782", "filename": "library/std/src/sys/unix/ext/net/ancillary.rs", "status": "modified", "additions": 7, "deletions": 125, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/d0b133cdc60cf843c5806d90ced710589ba95528/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fancillary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0b133cdc60cf843c5806d90ced710589ba95528/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fancillary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fancillary.rs?ref=d0b133cdc60cf843c5806d90ced710589ba95528", "patch": "@@ -166,38 +166,12 @@ impl<'a, T> Iterator for AncillaryDataIter<'a, T> {\n }\n \n /// Unix credential.\n-#[cfg(any(\n-    doc,\n-    target_os = \"android\",\n-    target_os = \"dragonfly\",\n-    target_os = \"emscripten\",\n-    target_os = \"freebsd\",\n-    target_os = \"fuchsia\",\n-    target_os = \"ios\",\n-    target_os = \"linux\",\n-    target_os = \"macos\",\n-    target_os = \"netbsd\",\n-    target_os = \"openbsd\",\n-    target_env = \"uclibc\",\n-))]\n+#[cfg(any(doc, target_os = \"android\", target_os = \"emscripten\", target_os = \"linux\",))]\n #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n #[derive(Clone)]\n pub struct SocketCred(libc::ucred);\n \n-#[cfg(any(\n-    doc,\n-    target_os = \"android\",\n-    target_os = \"dragonfly\",\n-    target_os = \"emscripten\",\n-    target_os = \"freebsd\",\n-    target_os = \"fuchsia\",\n-    target_os = \"ios\",\n-    target_os = \"linux\",\n-    target_os = \"macos\",\n-    target_os = \"netbsd\",\n-    target_os = \"openbsd\",\n-    target_env = \"uclibc\",\n-))]\n+#[cfg(any(doc, target_os = \"android\", target_os = \"emscripten\", target_os = \"linux\",))]\n impl SocketCred {\n     /// Create a Unix credential struct.\n     ///\n@@ -262,37 +236,11 @@ impl<'a> Iterator for ScmRights<'a> {\n /// This control message contains unix credentials.\n ///\n /// The level is equal to `SOL_SOCKET` and the type is equal to `SCM_CREDENTIALS` or `SCM_CREDS`.\n-#[cfg(any(\n-    doc,\n-    target_os = \"android\",\n-    target_os = \"dragonfly\",\n-    target_os = \"emscripten\",\n-    target_os = \"freebsd\",\n-    target_os = \"fuchsia\",\n-    target_os = \"ios\",\n-    target_os = \"linux\",\n-    target_os = \"macos\",\n-    target_os = \"netbsd\",\n-    target_os = \"openbsd\",\n-    target_env = \"uclibc\",\n-))]\n+#[cfg(any(doc, target_os = \"android\", target_os = \"emscripten\", target_os = \"linux\",))]\n #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n pub struct ScmCredentials<'a>(AncillaryDataIter<'a, libc::ucred>);\n \n-#[cfg(any(\n-    doc,\n-    target_os = \"android\",\n-    target_os = \"dragonfly\",\n-    target_os = \"emscripten\",\n-    target_os = \"freebsd\",\n-    target_os = \"fuchsia\",\n-    target_os = \"ios\",\n-    target_os = \"linux\",\n-    target_os = \"macos\",\n-    target_os = \"netbsd\",\n-    target_os = \"openbsd\",\n-    target_env = \"uclibc\",\n-))]\n+#[cfg(any(doc, target_os = \"android\", target_os = \"emscripten\", target_os = \"linux\",))]\n #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n impl<'a> Iterator for ScmCredentials<'a> {\n     type Item = SocketCred;\n@@ -314,20 +262,7 @@ pub enum AncillaryError {\n #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n pub enum AncillaryData<'a> {\n     ScmRights(ScmRights<'a>),\n-    #[cfg(any(\n-        doc,\n-        target_os = \"android\",\n-        target_os = \"dragonfly\",\n-        target_os = \"emscripten\",\n-        target_os = \"freebsd\",\n-        target_os = \"fuchsia\",\n-        target_os = \"ios\",\n-        target_os = \"linux\",\n-        target_os = \"macos\",\n-        target_os = \"netbsd\",\n-        target_os = \"openbsd\",\n-        target_env = \"uclibc\",\n-    ))]\n+    #[cfg(any(doc, target_os = \"android\", target_os = \"emscripten\", target_os = \"linux\",))]\n     ScmCredentials(ScmCredentials<'a>),\n }\n \n@@ -350,20 +285,7 @@ impl<'a> AncillaryData<'a> {\n     ///\n     /// `data` must contain a valid control message and the control message must be type of\n     /// `SOL_SOCKET` and level of `SCM_CREDENTIALS` or `SCM_CREDENTIALS`.\n-    #[cfg(any(\n-        doc,\n-        target_os = \"android\",\n-        target_os = \"dragonfly\",\n-        target_os = \"emscripten\",\n-        target_os = \"freebsd\",\n-        target_os = \"fuchsia\",\n-        target_os = \"ios\",\n-        target_os = \"linux\",\n-        target_os = \"macos\",\n-        target_os = \"netbsd\",\n-        target_os = \"openbsd\",\n-        target_env = \"uclibc\",\n-    ))]\n+    #[cfg(any(doc, target_os = \"android\", target_os = \"emscripten\", target_os = \"linux\",))]\n     unsafe fn as_credentials(data: &'a [u8]) -> Self {\n         let ancillary_data_iter = AncillaryDataIter::new(data);\n         let scm_credentials = ScmCredentials(ancillary_data_iter);\n@@ -383,20 +305,9 @@ impl<'a> AncillaryData<'a> {\n                     #[cfg(any(\n                         target_os = \"android\",\n                         target_os = \"emscripten\",\n-                        target_os = \"fuchsia\",\n                         target_os = \"linux\",\n-                        target_env = \"uclibc\",\n                     ))]\n                     libc::SCM_CREDENTIALS => Ok(AncillaryData::as_credentials(data)),\n-                    #[cfg(any(\n-                        target_os = \"dragonfly\",\n-                        target_os = \"freebsd\",\n-                        target_os = \"ios\",\n-                        target_os = \"macos\",\n-                        target_os = \"netbsd\",\n-                        target_os = \"openbsd\",\n-                    ))]\n-                    libc::SCM_CREDS => Ok(AncillaryData::as_credentials(data)),\n                     cmsg_type => {\n                         Err(AncillaryError::Unknown { cmsg_level: libc::SOL_SOCKET, cmsg_type })\n                     }\n@@ -593,20 +504,7 @@ impl<'a> SocketAncillary<'a> {\n     /// Technically, that means this operation adds a control message with the level `SOL_SOCKET`\n     /// and type `SCM_CREDENTIALS` or `SCM_CREDS`.\n     ///\n-    #[cfg(any(\n-        doc,\n-        target_os = \"android\",\n-        target_os = \"dragonfly\",\n-        target_os = \"emscripten\",\n-        target_os = \"freebsd\",\n-        target_os = \"fuchsia\",\n-        target_os = \"ios\",\n-        target_os = \"linux\",\n-        target_os = \"macos\",\n-        target_os = \"netbsd\",\n-        target_os = \"openbsd\",\n-        target_env = \"uclibc\",\n-    ))]\n+    #[cfg(any(doc, target_os = \"android\", target_os = \"emscripten\", target_os = \"linux\",))]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n     pub fn add_creds(&mut self, creds: &[SocketCred]) -> bool {\n         self.truncated = false;\n@@ -615,23 +513,7 @@ impl<'a> SocketAncillary<'a> {\n             &mut self.length,\n             creds,\n             libc::SOL_SOCKET,\n-            #[cfg(any(\n-                target_os = \"android\",\n-                target_os = \"emscripten\",\n-                target_os = \"fuchsia\",\n-                target_os = \"linux\",\n-                target_env = \"uclibc\",\n-            ))]\n             libc::SCM_CREDENTIALS,\n-            #[cfg(any(\n-                target_os = \"dragonfly\",\n-                target_os = \"freebsd\",\n-                target_os = \"ios\",\n-                target_os = \"macos\",\n-                target_os = \"netbsd\",\n-                target_os = \"openbsd\",\n-            ))]\n-            libc::SCM_CREDS,\n         )\n     }\n "}]}