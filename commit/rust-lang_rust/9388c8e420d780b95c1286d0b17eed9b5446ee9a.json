{"sha": "9388c8e420d780b95c1286d0b17eed9b5446ee9a", "node_id": "C_kwDOAAsO6NoAKDkzODhjOGU0MjBkNzgwYjk1YzEyODZkMGIxN2VlZDliNTQ0NmVlOWE", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-03-02T12:00:46Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-03-02T15:33:55Z"}, "message": "record tests in build metrics", "tree": {"sha": "c4664e325c57d4201f1f5d28a0a9ce0e6c63293f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4664e325c57d4201f1f5d28a0a9ce0e6c63293f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9388c8e420d780b95c1286d0b17eed9b5446ee9a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmQAweMACgkQzXazX3c0\ndp58Jg/+PnB0Ki1vd3eK7yT2+j9yhjFxCIAM4FYS3gjJvyOVZLCwa5Yq/rzd+hNT\n0S1PmdZ99SdYnrKXoW30ovMy06ERO/0trPTIQEjMoNmbKyt6k439NnBPsaVQsC3s\nX1eBun8hHmo+ijzUxK9BnefhSmb3hg7l73VdA8sFFTBJmGq+5ufMcJtQmghPGOtL\nN9jql56GJ1DhuTFUBIZILYY7uB+UILJkmQ1YIS1JVdyW3YAO93OlxubKWYRO7GL0\npVoQV3YJCeZQR9s5s0wzoYGd9i0YZKhD3U95ZL6oWIxS/7vtERLulU0Odz2TXect\nsEi5CMoG2gIBPh43rfZ+vDNuxihy/fLN1OhmNNUSRzSDZ+weqY6btjbksCEo7aKv\nPUnzbZR6NwhTB2N5TbblpHF43FjOUgUgMqZ0wM8sK/F972RBaO2cB8ZYj/SCk6g7\nG+H0htLqENxzlffmTI/HUOp1W5H9QLZ92gJkKPXWRovizglvIdV4+Lz8uepoSmMI\nyf+RS2j6TVlIFdSC8ubN5WQnMc6PP9RyJefHTkBqOyJnzlILI6HFHV9P+11tISUz\niNpQX6YJYZXs3j4gxor8wLq55TxP5lmimL3G/okGUm6T55DeOyCnO2idAMV/dZB0\nJmDJ4Wp6/qtSqRyUe8gap9ObBGy8UENyXG2+ZtFPA7ZDczyersY=\n=PTeF\n-----END PGP SIGNATURE-----", "payload": "tree c4664e325c57d4201f1f5d28a0a9ce0e6c63293f\nparent f816d3a75479ba073570a4e998735be28770a307\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1677758446 +0100\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1677771235 +0100\n\nrecord tests in build metrics\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9388c8e420d780b95c1286d0b17eed9b5446ee9a", "html_url": "https://github.com/rust-lang/rust/commit/9388c8e420d780b95c1286d0b17eed9b5446ee9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9388c8e420d780b95c1286d0b17eed9b5446ee9a/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f816d3a75479ba073570a4e998735be28770a307", "url": "https://api.github.com/repos/rust-lang/rust/commits/f816d3a75479ba073570a4e998735be28770a307", "html_url": "https://github.com/rust-lang/rust/commit/f816d3a75479ba073570a4e998735be28770a307"}], "stats": {"total": 57, "additions": 52, "deletions": 5}, "files": [{"sha": "5f254761aa19f21c18f6360e9e6008eec5422b70", "filename": "src/bootstrap/metrics.rs", "status": "modified", "additions": 39, "deletions": 5, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/9388c8e420d780b95c1286d0b17eed9b5446ee9a/src%2Fbootstrap%2Fmetrics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9388c8e420d780b95c1286d0b17eed9b5446ee9a/src%2Fbootstrap%2Fmetrics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fmetrics.rs?ref=9388c8e420d780b95c1286d0b17eed9b5446ee9a", "patch": "@@ -51,6 +51,7 @@ impl BuildMetrics {\n             duration_excluding_children_sec: Duration::ZERO,\n \n             children: Vec::new(),\n+            tests: Vec::new(),\n         });\n     }\n \n@@ -72,6 +73,16 @@ impl BuildMetrics {\n         }\n     }\n \n+    pub(crate) fn record_test(&self, name: &str, outcome: TestOutcome) {\n+        let mut state = self.state.borrow_mut();\n+        state\n+            .running_steps\n+            .last_mut()\n+            .unwrap()\n+            .tests\n+            .push(Test { name: name.to_string(), outcome });\n+    }\n+\n     fn collect_stats(&self, state: &mut MetricsState) {\n         let step = state.running_steps.last_mut().unwrap();\n \n@@ -125,6 +136,14 @@ impl BuildMetrics {\n     }\n \n     fn prepare_json_step(&self, step: StepMetrics) -> JsonNode {\n+        let mut children = Vec::new();\n+        children.extend(step.children.into_iter().map(|child| self.prepare_json_step(child)));\n+        children.extend(\n+            step.tests\n+                .into_iter()\n+                .map(|test| JsonNode::Test { name: test.name, outcome: test.outcome }),\n+        );\n+\n         JsonNode::RustbuildStep {\n             type_: step.type_,\n             debug_repr: step.debug_repr,\n@@ -135,11 +154,7 @@ impl BuildMetrics {\n                     / step.duration_excluding_children_sec.as_secs_f64(),\n             },\n \n-            children: step\n-                .children\n-                .into_iter()\n-                .map(|child| self.prepare_json_step(child))\n-                .collect(),\n+            children,\n         }\n     }\n }\n@@ -161,6 +176,12 @@ struct StepMetrics {\n     duration_excluding_children_sec: Duration,\n \n     children: Vec<StepMetrics>,\n+    tests: Vec<Test>,\n+}\n+\n+struct Test {\n+    name: String,\n+    outcome: TestOutcome,\n }\n \n #[derive(Serialize, Deserialize)]\n@@ -190,6 +211,19 @@ enum JsonNode {\n \n         children: Vec<JsonNode>,\n     },\n+    Test {\n+        name: String,\n+        #[serde(flatten)]\n+        outcome: TestOutcome,\n+    },\n+}\n+\n+#[derive(Serialize, Deserialize)]\n+#[serde(tag = \"outcome\", rename_all = \"snake_case\")]\n+pub(crate) enum TestOutcome {\n+    Passed,\n+    Failed,\n+    Ignored { ignore_reason: Option<String> },\n }\n \n #[derive(Serialize, Deserialize)]"}, {"sha": "7c702f19c09f770edc0d278a26c418abb6b05d1f", "filename": "src/bootstrap/render_tests.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9388c8e420d780b95c1286d0b17eed9b5446ee9a/src%2Fbootstrap%2Frender_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9388c8e420d780b95c1286d0b17eed9b5446ee9a/src%2Fbootstrap%2Frender_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Frender_tests.rs?ref=9388c8e420d780b95c1286d0b17eed9b5446ee9a", "patch": "@@ -99,6 +99,19 @@ impl<'a> Renderer<'a> {\n \n     fn render_test_outcome(&mut self, outcome: Outcome<'_>, test: &TestOutcome) {\n         self.executed_tests += 1;\n+\n+        #[cfg(feature = \"build-metrics\")]\n+        self.builder.metrics.record_test(\n+            &test.name,\n+            match outcome {\n+                Outcome::Ok => crate::metrics::TestOutcome::Passed,\n+                Outcome::Failed => crate::metrics::TestOutcome::Failed,\n+                Outcome::Ignored { reason } => crate::metrics::TestOutcome::Ignored {\n+                    ignore_reason: reason.map(|s| s.to_string()),\n+                },\n+            },\n+        );\n+\n         if self.builder.config.verbose_tests {\n             self.render_test_outcome_verbose(outcome, test);\n         } else {"}]}