{"sha": "0a70944e043db082353ed05cfa80994f6c56feae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhNzA5NDRlMDQzZGIwODIzNTNlZDA1Y2ZhODA5OTRmNmM1NmZlYWU=", "commit": {"author": {"name": "Aaron Gallagher", "email": "_@habnab.it", "date": "2016-08-14T08:27:11Z"}, "committer": {"name": "Aaron Gallagher", "email": "_@habnab.it", "date": "2016-08-21T23:41:44Z"}, "message": "Use the kernel arc4rand for FreeBSD OsRng.\n\nThis means that /dev/urandom doesn't have to be opened.", "tree": {"sha": "336cf4fe42c19d9de488bc292bd5aa43bf3a008b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/336cf4fe42c19d9de488bc292bd5aa43bf3a008b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a70944e043db082353ed05cfa80994f6c56feae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a70944e043db082353ed05cfa80994f6c56feae", "html_url": "https://github.com/rust-lang/rust/commit/0a70944e043db082353ed05cfa80994f6c56feae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a70944e043db082353ed05cfa80994f6c56feae/comments", "author": {"login": "habnabit", "id": 21168, "node_id": "MDQ6VXNlcjIxMTY4", "avatar_url": "https://avatars.githubusercontent.com/u/21168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/habnabit", "html_url": "https://github.com/habnabit", "followers_url": "https://api.github.com/users/habnabit/followers", "following_url": "https://api.github.com/users/habnabit/following{/other_user}", "gists_url": "https://api.github.com/users/habnabit/gists{/gist_id}", "starred_url": "https://api.github.com/users/habnabit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/habnabit/subscriptions", "organizations_url": "https://api.github.com/users/habnabit/orgs", "repos_url": "https://api.github.com/users/habnabit/repos", "events_url": "https://api.github.com/users/habnabit/events{/privacy}", "received_events_url": "https://api.github.com/users/habnabit/received_events", "type": "User", "site_admin": false}, "committer": {"login": "habnabit", "id": 21168, "node_id": "MDQ6VXNlcjIxMTY4", "avatar_url": "https://avatars.githubusercontent.com/u/21168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/habnabit", "html_url": "https://github.com/habnabit", "followers_url": "https://api.github.com/users/habnabit/followers", "following_url": "https://api.github.com/users/habnabit/following{/other_user}", "gists_url": "https://api.github.com/users/habnabit/gists{/gist_id}", "starred_url": "https://api.github.com/users/habnabit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/habnabit/subscriptions", "organizations_url": "https://api.github.com/users/habnabit/orgs", "repos_url": "https://api.github.com/users/habnabit/repos", "events_url": "https://api.github.com/users/habnabit/events{/privacy}", "received_events_url": "https://api.github.com/users/habnabit/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef6aab2935a504787d01b1d9165d41b184a6027c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef6aab2935a504787d01b1d9165d41b184a6027c", "html_url": "https://github.com/rust-lang/rust/commit/ef6aab2935a504787d01b1d9165d41b184a6027c"}], "stats": {"total": 53, "additions": 52, "deletions": 1}, "files": [{"sha": "e4ca8344ee2873d31ce9c10c8e8dae16594c66ac", "filename": "src/libstd/sys/unix/rand.rs", "status": "modified", "additions": 52, "deletions": 1, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/0a70944e043db082353ed05cfa80994f6c56feae/src%2Flibstd%2Fsys%2Funix%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a70944e043db082353ed05cfa80994f6c56feae/src%2Flibstd%2Fsys%2Funix%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Frand.rs?ref=0a70944e043db082353ed05cfa80994f6c56feae", "patch": "@@ -24,7 +24,10 @@ fn next_u64(mut fill_buf: &mut FnMut(&mut [u8])) -> u64 {\n     unsafe { mem::transmute::<[u8; 8], u64>(buf) }\n }\n \n-#[cfg(all(unix, not(target_os = \"ios\"), not(target_os = \"openbsd\")))]\n+#[cfg(all(unix,\n+          not(target_os = \"ios\"),\n+          not(target_os = \"openbsd\"),\n+          not(target_os = \"freebsd\")))]\n mod imp {\n     use self::OsRngInner::*;\n     use super::{next_u32, next_u64};\n@@ -282,3 +285,51 @@ mod imp {\n         }\n     }\n }\n+\n+#[cfg(target_os = \"freebsd\")]\n+mod imp {\n+    use super::{next_u32, next_u64};\n+\n+    use io;\n+    use libc;\n+    use rand::Rng;\n+    use ptr;\n+\n+    pub struct OsRng {\n+        // dummy field to ensure that this struct cannot be constructed outside\n+        // of this module\n+        _dummy: (),\n+    }\n+\n+    impl OsRng {\n+        /// Create a new `OsRng`.\n+        pub fn new() -> io::Result<OsRng> {\n+            Ok(OsRng { _dummy: () })\n+        }\n+    }\n+\n+    impl Rng for OsRng {\n+        fn next_u32(&mut self) -> u32 {\n+            next_u32(&mut |v| self.fill_bytes(v))\n+        }\n+        fn next_u64(&mut self) -> u64 {\n+            next_u64(&mut |v| self.fill_bytes(v))\n+        }\n+        fn fill_bytes(&mut self, v: &mut [u8]) {\n+            let mib = [libc::CTL_KERN, libc::KERN_ARND];\n+            // kern.arandom permits a maximum buffer size of 256 bytes\n+            for s in v.chunks_mut(256) {\n+                let mut s_len = s.len();\n+                let ret = unsafe {\n+                    libc::sysctl(mib.as_ptr(), mib.len() as libc::c_uint,\n+                                 s.as_mut_ptr() as *mut _, &mut s_len,\n+                                 ptr::null(), 0)\n+                };\n+                if ret == -1 || s_len != s.len() {\n+                    panic!(\"kern.arandom sysctl failed! (returned {}, s.len() {}, oldlenp {})\",\n+                           ret, s.len(), s_len);\n+                }\n+            }\n+        }\n+    }\n+}"}]}