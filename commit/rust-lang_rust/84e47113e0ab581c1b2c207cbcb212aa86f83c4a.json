{"sha": "84e47113e0ab581c1b2c207cbcb212aa86f83c4a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0ZTQ3MTEzZTBhYjU4MWMxYjJjMjA3Y2JjYjIxMmFhODZmODNjNGE=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-02-27T15:59:56Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-02-27T15:59:56Z"}, "message": "Merge #906\n\n906: Add support for goto definition and hover for struct fields r=matklad a=vipentti\n\nThis works partially towards fixing #512\n\nCo-authored-by: Ville Penttinen <villem.penttinen@gmail.com>", "tree": {"sha": "92ff5036db5a7bb4812b63f69d17402b88e3873f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92ff5036db5a7bb4812b63f69d17402b88e3873f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84e47113e0ab581c1b2c207cbcb212aa86f83c4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84e47113e0ab581c1b2c207cbcb212aa86f83c4a", "html_url": "https://github.com/rust-lang/rust/commit/84e47113e0ab581c1b2c207cbcb212aa86f83c4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84e47113e0ab581c1b2c207cbcb212aa86f83c4a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "e1dd31e7e284ef49c2de317a1a81da7a854ffc63", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1dd31e7e284ef49c2de317a1a81da7a854ffc63", "html_url": "https://github.com/rust-lang/rust/commit/e1dd31e7e284ef49c2de317a1a81da7a854ffc63"}, {"sha": "c879f43186a30bd5ab6886600bd6fac8aff035b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c879f43186a30bd5ab6886600bd6fac8aff035b2", "html_url": "https://github.com/rust-lang/rust/commit/c879f43186a30bd5ab6886600bd6fac8aff035b2"}], "stats": {"total": 127, "additions": 124, "deletions": 3}, "files": [{"sha": "6fa430754780f0f89b10b4d269f62f669034d04b", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/84e47113e0ab581c1b2c207cbcb212aa86f83c4a/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84e47113e0ab581c1b2c207cbcb212aa86f83c4a/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=84e47113e0ab581c1b2c207cbcb212aa86f83c4a", "patch": "@@ -74,6 +74,30 @@ pub(crate) fn reference_definition(\n                 return Exact(NavigationTarget::from_field(db, field));\n             };\n         }\n+\n+        // It could also be a named field\n+        if let Some(field_expr) = name_ref.syntax().parent().and_then(ast::NamedField::cast) {\n+            tested_by!(goto_definition_works_for_named_fields);\n+\n+            let infer_result = function.infer(db);\n+            let syntax_mapping = function.body_syntax_mapping(db);\n+\n+            let struct_lit = field_expr.syntax().ancestors().find_map(ast::StructLit::cast);\n+\n+            if let Some(expr) = struct_lit.and_then(|lit| syntax_mapping.node_expr(lit.into())) {\n+                let ty = infer_result[expr].clone();\n+                if let hir::Ty::Adt { def_id, .. } = ty {\n+                    if let hir::AdtDef::Struct(s) = def_id {\n+                        let hir_path = hir::Path::from_name_ref(name_ref);\n+                        let hir_name = hir_path.as_ident().unwrap();\n+\n+                        if let Some(field) = s.field(db, hir_name) {\n+                            return Exact(NavigationTarget::from_field(db, field));\n+                        }\n+                    }\n+                }\n+            }\n+        }\n     }\n     // Try name resolution\n     let resolver = hir::source_binder::resolver_for_node(db, file_id, name_ref.syntax());\n@@ -255,6 +279,26 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn goto_definition_works_for_named_fields() {\n+        covers!(goto_definition_works_for_named_fields);\n+        check_goto(\n+            \"\n+            //- /lib.rs\n+            struct Foo {\n+                spam: u32,\n+            }\n+\n+            fn bar() -> Foo {\n+                Foo {\n+                    spam<|>: 0,\n+                }\n+            }\n+            \",\n+            \"spam NAMED_FIELD_DEF FileId(1) [17; 26) [17; 21)\",\n+        );\n+    }\n+\n     #[test]\n     fn goto_definition_works_when_used_on_definition_name_itself() {\n         check_goto("}, {"sha": "47913d7532432b5eb8c72e07248008cdaec03844", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 79, "deletions": 3, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/84e47113e0ab581c1b2c207cbcb212aa86f83c4a/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84e47113e0ab581c1b2c207cbcb212aa86f83c4a/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=84e47113e0ab581c1b2c207cbcb212aa86f83c4a", "patch": "@@ -1,6 +1,6 @@\n use ra_db::SourceDatabase;\n use ra_syntax::{\n-    AstNode, SyntaxNode, TreeArc, ast::{self, NameOwner, VisibilityOwner},\n+    AstNode, SyntaxNode, TreeArc, ast::{self, NameOwner, VisibilityOwner, TypeAscriptionOwner},\n     algo::{find_covering_node, find_node_at_offset, find_leaf_at_offset, visit::{visitor, Visitor}},\n };\n \n@@ -179,6 +179,7 @@ impl NavigationTarget {\n             .visit(doc_comments::<ast::TypeAliasDef>)\n             .visit(doc_comments::<ast::ConstDef>)\n             .visit(doc_comments::<ast::StaticDef>)\n+            .visit(doc_comments::<ast::NamedFieldDef>)\n             .accept(&node)?\n     }\n \n@@ -189,6 +190,20 @@ impl NavigationTarget {\n         // TODO: After type inference is done, add type information to improve the output\n         let node = self.node(db)?;\n \n+        fn visit_ascribed_node<T>(node: &T, prefix: &str) -> Option<String>\n+        where\n+            T: NameOwner + VisibilityOwner + TypeAscriptionOwner,\n+        {\n+            let mut string = visit_node(node, prefix)?;\n+\n+            if let Some(type_ref) = node.ascribed_type() {\n+                string.push_str(\": \");\n+                type_ref.syntax().text().push_to(&mut string);\n+            }\n+\n+            Some(string)\n+        }\n+\n         fn visit_node<T>(node: &T, label: &str) -> Option<String>\n         where\n             T: NameOwner + VisibilityOwner,\n@@ -207,8 +222,9 @@ impl NavigationTarget {\n             .visit(|node: &ast::TraitDef| visit_node(node, \"trait \"))\n             .visit(|node: &ast::Module| visit_node(node, \"mod \"))\n             .visit(|node: &ast::TypeAliasDef| visit_node(node, \"type \"))\n-            .visit(|node: &ast::ConstDef| visit_node(node, \"const \"))\n-            .visit(|node: &ast::StaticDef| visit_node(node, \"static \"))\n+            .visit(|node: &ast::ConstDef| visit_ascribed_node(node, \"const \"))\n+            .visit(|node: &ast::StaticDef| visit_ascribed_node(node, \"static \"))\n+            .visit(|node: &ast::NamedFieldDef| visit_ascribed_node(node, \"\"))\n             .accept(&node)?\n     }\n }\n@@ -320,6 +336,66 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn hover_shows_struct_field_info() {\n+        // Hovering over the field when instantiating\n+        check_hover_result(\n+            r#\"\n+            //- /main.rs\n+            struct Foo {\n+                field_a: u32,\n+            }\n+\n+            fn main() {\n+                let foo = Foo {\n+                    field_a<|>: 0,\n+                };\n+            }\n+        \"#,\n+            &[\"field_a: u32\"],\n+        );\n+\n+        // Hovering over the field in the definition\n+        check_hover_result(\n+            r#\"\n+            //- /main.rs\n+            struct Foo {\n+                field_a<|>: u32,\n+            }\n+\n+            fn main() {\n+                let foo = Foo {\n+                    field_a: 0,\n+                };\n+            }\n+        \"#,\n+            &[\"field_a: u32\"],\n+        );\n+    }\n+\n+    #[test]\n+    fn hover_const_static() {\n+        check_hover_result(\n+            r#\"\n+            //- /main.rs\n+            fn main() {\n+                const foo<|>: u32 = 0;\n+            }\n+        \"#,\n+            &[\"const foo: u32\"],\n+        );\n+\n+        check_hover_result(\n+            r#\"\n+            //- /main.rs\n+            fn main() {\n+                static foo<|>: u32 = 0;\n+            }\n+        \"#,\n+            &[\"static foo: u32\"],\n+        );\n+    }\n+\n     #[test]\n     fn hover_some() {\n         let (analysis, position) = single_file_with_position("}, {"sha": "bcbe0d21b58a177fa0813cba70ed026eca148913", "filename": "crates/ra_ide_api/src/marks.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84e47113e0ab581c1b2c207cbcb212aa86f83c4a/crates%2Fra_ide_api%2Fsrc%2Fmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84e47113e0ab581c1b2c207cbcb212aa86f83c4a/crates%2Fra_ide_api%2Fsrc%2Fmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fmarks.rs?ref=84e47113e0ab581c1b2c207cbcb212aa86f83c4a", "patch": "@@ -2,6 +2,7 @@ test_utils::marks!(\n     inserts_parens_for_function_calls\n     goto_definition_works_for_methods\n     goto_definition_works_for_fields\n+    goto_definition_works_for_named_fields\n     call_info_bad_offset\n     dont_complete_current_use\n );"}]}