{"sha": "8fe525dd1c49510246e8b68f1a33156f817f1292", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmZTUyNWRkMWM0OTUxMDI0NmU4YjY4ZjFhMzMxNTZmODE3ZjEyOTI=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-11-27T00:23:54Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-11-29T00:18:41Z"}, "message": "Simplify `binding.module()`.", "tree": {"sha": "932518a827638733418feb183b988a2f8e008317", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/932518a827638733418feb183b988a2f8e008317"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8fe525dd1c49510246e8b68f1a33156f817f1292", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8fe525dd1c49510246e8b68f1a33156f817f1292", "html_url": "https://github.com/rust-lang/rust/commit/8fe525dd1c49510246e8b68f1a33156f817f1292", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8fe525dd1c49510246e8b68f1a33156f817f1292/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bccc9d7694240159587857e2b681c46a423a625", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bccc9d7694240159587857e2b681c46a423a625", "html_url": "https://github.com/rust-lang/rust/commit/7bccc9d7694240159587857e2b681c46a423a625"}], "stats": {"total": 18, "additions": 8, "deletions": 10}, "files": [{"sha": "89da3c221c6741c5b407260817c8ca163c13ecbb", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8fe525dd1c49510246e8b68f1a33156f817f1292/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fe525dd1c49510246e8b68f1a33156f817f1292/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=8fe525dd1c49510246e8b68f1a33156f817f1292", "patch": "@@ -908,13 +908,11 @@ struct AmbiguityError<'a> {\n }\n \n impl<'a> NameBinding<'a> {\n-    fn module(&self) -> Result<Module<'a>, bool /* true if an error has already been reported */> {\n+    fn module(&self) -> Option<Module<'a>> {\n         match self.kind {\n-            NameBindingKind::Module(module) => Ok(module),\n+            NameBindingKind::Module(module) => Some(module),\n             NameBindingKind::Import { binding, .. } => binding.module(),\n-            NameBindingKind::Def(Def::Err) => Err(true),\n-            NameBindingKind::Def(_) => Err(false),\n-            NameBindingKind::Ambiguity { ..  } => Err(false),\n+            _ => None,\n         }\n     }\n \n@@ -1332,7 +1330,7 @@ impl<'a> Resolver<'a> {\n     fn record_use(&mut self, name: Name, ns: Namespace, binding: &'a NameBinding<'a>, span: Span)\n                   -> bool /* true if an error was reported */ {\n         // track extern crates for unused_extern_crate lint\n-        if let Some(DefId { krate, .. }) = binding.module().ok().and_then(ModuleS::def_id) {\n+        if let Some(DefId { krate, .. }) = binding.module().and_then(ModuleS::def_id) {\n             self.used_crates.insert(krate);\n         }\n \n@@ -2372,7 +2370,7 @@ impl<'a> Resolver<'a> {\n \n             match binding {\n                 Ok(binding) => {\n-                    if let Ok(next_module) = binding.module() {\n+                    if let Some(next_module) = binding.module() {\n                         module = Some(next_module);\n                     } else if binding.def() == Def::Err {\n                         return PathResult::NonModule(err_path_resolution());\n@@ -2980,7 +2978,7 @@ impl<'a> Resolver<'a> {\n                 }\n \n                 // collect submodules to explore\n-                if let Ok(module) = name_binding.module() {\n+                if let Some(module) = name_binding.module() {\n                     // form the path\n                     let mut path_segments = path_segments.clone();\n                     path_segments.push(PathSegment {\n@@ -3141,8 +3139,8 @@ impl<'a> Resolver<'a> {\n                 (ValueNS, _) => \"a value\",\n                 (MacroNS, _) => \"a macro\",\n                 (TypeNS, _) if old_binding.is_extern_crate() => \"an extern crate\",\n-                (TypeNS, Ok(module)) if module.is_normal() => \"a module\",\n-                (TypeNS, Ok(module)) if module.is_trait() => \"a trait\",\n+                (TypeNS, Some(module)) if module.is_normal() => \"a module\",\n+                (TypeNS, Some(module)) if module.is_trait() => \"a trait\",\n                 (TypeNS, _) => \"a type\",\n             };\n             format!(\"{} named `{}` has already been {} in this {}\","}]}