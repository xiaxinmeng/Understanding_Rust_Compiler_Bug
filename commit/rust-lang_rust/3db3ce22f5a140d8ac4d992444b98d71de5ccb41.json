{"sha": "3db3ce22f5a140d8ac4d992444b98d71de5ccb41", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkYjNjZTIyZjVhMTQwZDhhYzRkOTkyNDQ0Yjk4ZDcxZGU1Y2NiNDE=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-08-06T03:04:52Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-08-06T05:49:33Z"}, "message": "Update Iterator impls to use Saturating\n\nReplace hand-rolled saturation math with calls to Saturating.\n\nFix one impl that didn't use saturating math.", "tree": {"sha": "10f733fc2031537c6598723319e97fbdcd88d164", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10f733fc2031537c6598723319e97fbdcd88d164"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3db3ce22f5a140d8ac4d992444b98d71de5ccb41", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3db3ce22f5a140d8ac4d992444b98d71de5ccb41", "html_url": "https://github.com/rust-lang/rust/commit/3db3ce22f5a140d8ac4d992444b98d71de5ccb41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3db3ce22f5a140d8ac4d992444b98d71de5ccb41/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f713da4aa07a722bfb7d704aa0a91c111700dda", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f713da4aa07a722bfb7d704aa0a91c111700dda", "html_url": "https://github.com/rust-lang/rust/commit/5f713da4aa07a722bfb7d704aa0a91c111700dda"}], "stats": {"total": 35, "additions": 10, "deletions": 25}, "files": [{"sha": "d71bc3156a568a8c42542c652aec651209cee496", "filename": "src/libstd/iterator.rs", "status": "modified", "additions": 10, "deletions": 25, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/3db3ce22f5a140d8ac4d992444b98d71de5ccb41/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3db3ce22f5a140d8ac4d992444b98d71de5ccb41/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=3db3ce22f5a140d8ac4d992444b98d71de5ccb41", "patch": "@@ -18,7 +18,7 @@ implementing the `Iterator` trait.\n */\n \n use cmp;\n-use num::{Zero, One};\n+use num::{Zero, One, Saturating};\n use option::{Option, Some, None};\n use ops::{Add, Mul};\n use cmp::Ord;\n@@ -863,15 +863,10 @@ impl<A, T: Iterator<A>, U: Iterator<A>> Iterator<A> for Chain<T, U> {\n         let (a_lower, a_upper) = self.a.size_hint();\n         let (b_lower, b_upper) = self.b.size_hint();\n \n-        let lower = if uint::max_value - a_lower < b_lower {\n-            uint::max_value\n-        } else {\n-            a_lower + b_lower\n-        };\n+        let lower = a_lower.saturating_add(b_lower);\n \n         let upper = match (a_upper, b_upper) {\n-            (Some(x), Some(y)) if uint::max_value - x < y => Some(uint::max_value),\n-            (Some(x), Some(y)) => Some(x + y),\n+            (Some(x), Some(y)) => Some(x.saturating_add(y)),\n             _ => None\n         };\n \n@@ -895,12 +890,7 @@ for Chain<T, U> {\n     #[inline]\n     fn indexable(&self) -> uint {\n         let (a, b) = (self.a.indexable(), self.b.indexable());\n-        let total = a + b;\n-        if total < a || total < b {\n-            uint::max_value\n-        } else {\n-            total\n-        }\n+        a.saturating_add(b)\n     }\n \n     #[inline]\n@@ -1252,11 +1242,10 @@ impl<A, T: Iterator<A>> Iterator<A> for Skip<T> {\n     fn size_hint(&self) -> (uint, Option<uint>) {\n         let (lower, upper) = self.iter.size_hint();\n \n-        let lower = if lower >= self.n { lower - self.n } else { 0 };\n+        let lower = lower.saturating_sub(self.n);\n \n         let upper = match upper {\n-            Some(x) if x >= self.n => Some(x - self.n),\n-            Some(_) => Some(0),\n+            Some(x) => Some(x.saturating_sub(self.n)),\n             None => None\n         };\n \n@@ -1267,12 +1256,7 @@ impl<A, T: Iterator<A>> Iterator<A> for Skip<T> {\n impl<A, T: RandomAccessIterator<A>> RandomAccessIterator<A> for Skip<T> {\n     #[inline]\n     fn indexable(&self) -> uint {\n-        let N = self.iter.indexable();\n-        if N < self.n {\n-            0\n-        } else {\n-            N - self.n\n-        }\n+        self.iter.indexable().saturating_sub(self.n)\n     }\n \n     #[inline]\n@@ -1389,9 +1373,10 @@ impl<'self, A, T: Iterator<A>, B, U: Iterator<B>> Iterator<B> for\n     fn size_hint(&self) -> (uint, Option<uint>) {\n         let (flo, fhi) = self.frontiter.map_default((0, Some(0)), |it| it.size_hint());\n         let (blo, bhi) = self.backiter.map_default((0, Some(0)), |it| it.size_hint());\n+        let lo = flo.saturating_add(blo);\n         match (self.iter.size_hint(), fhi, bhi) {\n-            ((0, Some(0)), Some(a), Some(b)) => (flo + blo, Some(a + b)),\n-            _ => (flo + blo, None)\n+            ((0, Some(0)), Some(a), Some(b)) => (lo, Some(a.saturating_add(b))),\n+            _ => (lo, None)\n         }\n     }\n }"}]}