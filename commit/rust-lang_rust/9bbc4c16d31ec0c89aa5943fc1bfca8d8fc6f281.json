{"sha": "9bbc4c16d31ec0c89aa5943fc1bfca8d8fc6f281", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliYmM0YzE2ZDMxZWMwYzg5YWE1OTQzZmMxYmZjYThkOGZjNmYyODE=", "commit": {"author": {"name": "Andreas Jonson", "email": "andjo403@users.noreply.github.com", "date": "2020-11-17T18:29:15Z"}, "committer": {"name": "Andreas Jonson", "email": "andjo403@users.noreply.github.com", "date": "2020-11-17T18:54:29Z"}, "message": "add trailing_zeros and leading_zeros to non zero types", "tree": {"sha": "586b23ded2f4ca86d6c0120cd480a2997a2ac3d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/586b23ded2f4ca86d6c0120cd480a2997a2ac3d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9bbc4c16d31ec0c89aa5943fc1bfca8d8fc6f281", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9bbc4c16d31ec0c89aa5943fc1bfca8d8fc6f281", "html_url": "https://github.com/rust-lang/rust/commit/9bbc4c16d31ec0c89aa5943fc1bfca8d8fc6f281", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9bbc4c16d31ec0c89aa5943fc1bfca8d8fc6f281/comments", "author": {"login": "andjo403", "id": 844398, "node_id": "MDQ6VXNlcjg0NDM5OA==", "avatar_url": "https://avatars.githubusercontent.com/u/844398?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andjo403", "html_url": "https://github.com/andjo403", "followers_url": "https://api.github.com/users/andjo403/followers", "following_url": "https://api.github.com/users/andjo403/following{/other_user}", "gists_url": "https://api.github.com/users/andjo403/gists{/gist_id}", "starred_url": "https://api.github.com/users/andjo403/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andjo403/subscriptions", "organizations_url": "https://api.github.com/users/andjo403/orgs", "repos_url": "https://api.github.com/users/andjo403/repos", "events_url": "https://api.github.com/users/andjo403/events{/privacy}", "received_events_url": "https://api.github.com/users/andjo403/received_events", "type": "User", "site_admin": false}, "committer": {"login": "andjo403", "id": 844398, "node_id": "MDQ6VXNlcjg0NDM5OA==", "avatar_url": "https://avatars.githubusercontent.com/u/844398?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andjo403", "html_url": "https://github.com/andjo403", "followers_url": "https://api.github.com/users/andjo403/followers", "following_url": "https://api.github.com/users/andjo403/following{/other_user}", "gists_url": "https://api.github.com/users/andjo403/gists{/gist_id}", "starred_url": "https://api.github.com/users/andjo403/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andjo403/subscriptions", "organizations_url": "https://api.github.com/users/andjo403/orgs", "repos_url": "https://api.github.com/users/andjo403/repos", "events_url": "https://api.github.com/users/andjo403/events{/privacy}", "received_events_url": "https://api.github.com/users/andjo403/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fab31e5ddf5f2613bf57a0a7286dc6f5887e1cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fab31e5ddf5f2613bf57a0a7286dc6f5887e1cb", "html_url": "https://github.com/rust-lang/rust/commit/5fab31e5ddf5f2613bf57a0a7286dc6f5887e1cb"}], "stats": {"total": 179, "additions": 178, "deletions": 1}, "files": [{"sha": "d67f9c15a1916dc218c5d27141df209076ca9659", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bbc4c16d31ec0c89aa5943fc1bfca8d8fc6f281/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bbc4c16d31ec0c89aa5943fc1bfca8d8fc6f281/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=9bbc4c16d31ec0c89aa5943fc1bfca8d8fc6f281", "patch": "@@ -80,6 +80,7 @@\n #![feature(const_mut_refs)]\n #![feature(const_int_pow)]\n #![feature(constctlz)]\n+#![feature(const_cttz)]\n #![feature(const_panic)]\n #![feature(const_pin)]\n #![feature(const_fn)]"}, {"sha": "716b4a90e5ec279885a1647014449ccf9974d891", "filename": "library/core/src/num/nonzero.rs", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/9bbc4c16d31ec0c89aa5943fc1bfca8d8fc6f281/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bbc4c16d31ec0c89aa5943fc1bfca8d8fc6f281/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs?ref=9bbc4c16d31ec0c89aa5943fc1bfca8d8fc6f281", "patch": "@@ -6,6 +6,7 @@ use crate::str::FromStr;\n \n use super::from_str_radix;\n use super::{IntErrorKind, ParseIntError};\n+use crate::intrinsics;\n \n macro_rules! doc_comment {\n     ($x:expr, $($tt:tt)*) => {\n@@ -189,3 +190,76 @@ macro_rules! from_str_radix_nzint_impl {\n \n from_str_radix_nzint_impl! { NonZeroU8 NonZeroU16 NonZeroU32 NonZeroU64 NonZeroU128 NonZeroUsize\n NonZeroI8 NonZeroI16 NonZeroI32 NonZeroI64 NonZeroI128 NonZeroIsize }\n+\n+macro_rules! nonzero_leading_trailing_zeros {\n+    ( $( $Ty: ident($Uint: ty) , $LeadingTestExpr:expr ;)+ ) => {\n+        $(\n+            impl $Ty {\n+                doc_comment! {\n+                    concat!(\"Returns the number of leading zeros in the binary representation of `self`.\n+\n+On many architectures, this function can perform better than `leading_zeros()` on the underlying integer type, as special handling of zero can be avoided.\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+#![feature(nonzero_leading_trailing_zeros)]\n+let n = std::num::\", stringify!($Ty), \"::new(\", stringify!($LeadingTestExpr), \").unwrap();\n+\n+assert_eq!(n.leading_zeros(), 0);\n+```\"),\n+                    #[unstable(feature = \"nonzero_leading_trailing_zeros\", issue = \"79143\")]\n+                    #[rustc_const_unstable(feature = \"nonzero_leading_trailing_zeros\", issue = \"79143\")]\n+                    #[inline]\n+                    pub const fn leading_zeros(self) -> u32 {\n+                        // SAFETY: since `self` can not be zero it is safe to call ctlz_nonzero\n+                        unsafe { intrinsics::ctlz_nonzero(self.0 as $Uint) as u32 }\n+                    }\n+                }\n+\n+                doc_comment! {\n+                    concat!(\"Returns the number of trailing zeros in the binary representation\n+of `self`.\n+\n+On many architectures, this function can perform better than `trailing_zeros()` on the underlying integer type, as special handling of zero can be avoided.\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+#![feature(nonzero_leading_trailing_zeros)]\n+let n = std::num::\", stringify!($Ty), \"::new(0b0101000).unwrap();\n+\n+assert_eq!(n.trailing_zeros(), 3);\n+```\"),\n+                    #[unstable(feature = \"nonzero_leading_trailing_zeros\", issue = \"79143\")]\n+                    #[rustc_const_unstable(feature = \"nonzero_leading_trailing_zeros\", issue = \"79143\")]\n+                    #[inline]\n+                    pub const fn trailing_zeros(self) -> u32 {\n+                        // SAFETY: since `self` can not be zero it is safe to call cttz_nonzero\n+                        unsafe { intrinsics::cttz_nonzero(self.0 as $Uint) as u32 }\n+                    }\n+                }\n+\n+            }\n+        )+\n+    }\n+}\n+\n+nonzero_leading_trailing_zeros! {\n+    NonZeroU8(u8), u8::MAX;\n+    NonZeroU16(u16), u16::MAX;\n+    NonZeroU32(u32), u32::MAX;\n+    NonZeroU64(u64), u64::MAX;\n+    NonZeroU128(u128), u128::MAX;\n+    NonZeroUsize(usize), usize::MAX;\n+    NonZeroI8(u8), -1i8;\n+    NonZeroI16(u16), -1i16;\n+    NonZeroI32(u32), -1i32;\n+    NonZeroI64(u64), -1i64;\n+    NonZeroI128(u128), -1i128;\n+    NonZeroIsize(usize), -1isize;\n+}"}, {"sha": "14ef03fd53ebacbceaf5a9f37a21b6e2df0cbbec", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bbc4c16d31ec0c89aa5943fc1bfca8d8fc6f281/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bbc4c16d31ec0c89aa5943fc1bfca8d8fc6f281/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=9bbc4c16d31ec0c89aa5943fc1bfca8d8fc6f281", "patch": "@@ -60,6 +60,8 @@\n #![feature(once_cell)]\n #![feature(unsafe_block_in_unsafe_fn)]\n #![feature(int_bits_const)]\n+#![feature(nonzero_leading_trailing_zeros)]\n+#![feature(const_option)]\n #![deny(unsafe_op_in_unsafe_fn)]\n \n extern crate test;"}, {"sha": "ca449b4350ede910479698cc7257cc64f2489d50", "filename": "library/core/tests/nonzero.rs", "status": "modified", "additions": 101, "deletions": 1, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/9bbc4c16d31ec0c89aa5943fc1bfca8d8fc6f281/library%2Fcore%2Ftests%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bbc4c16d31ec0c89aa5943fc1bfca8d8fc6f281/library%2Fcore%2Ftests%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnonzero.rs?ref=9bbc4c16d31ec0c89aa5943fc1bfca8d8fc6f281", "patch": "@@ -1,5 +1,8 @@\n use core::convert::TryFrom;\n-use core::num::{IntErrorKind, NonZeroI32, NonZeroI8, NonZeroU32, NonZeroU8};\n+use core::num::{\n+    IntErrorKind, NonZeroI128, NonZeroI16, NonZeroI32, NonZeroI64, NonZeroI8, NonZeroIsize,\n+    NonZeroU128, NonZeroU16, NonZeroU32, NonZeroU64, NonZeroU8, NonZeroUsize,\n+};\n use core::option::Option::{self, None, Some};\n use std::mem::size_of;\n \n@@ -212,3 +215,100 @@ fn nonzero_const() {\n     const ONE: Option<NonZeroU8> = NonZeroU8::new(1);\n     assert!(ONE.is_some());\n }\n+\n+#[test]\n+fn nonzero_leading_zeros() {\n+    assert_eq!(NonZeroU8::new(1).unwrap().leading_zeros(), 7);\n+    assert_eq!(NonZeroI8::new(1).unwrap().leading_zeros(), 7);\n+    assert_eq!(NonZeroU16::new(1).unwrap().leading_zeros(), 15);\n+    assert_eq!(NonZeroI16::new(1).unwrap().leading_zeros(), 15);\n+    assert_eq!(NonZeroU32::new(1).unwrap().leading_zeros(), 31);\n+    assert_eq!(NonZeroI32::new(1).unwrap().leading_zeros(), 31);\n+    assert_eq!(NonZeroU64::new(1).unwrap().leading_zeros(), 63);\n+    assert_eq!(NonZeroI64::new(1).unwrap().leading_zeros(), 63);\n+    assert_eq!(NonZeroU128::new(1).unwrap().leading_zeros(), 127);\n+    assert_eq!(NonZeroI128::new(1).unwrap().leading_zeros(), 127);\n+    assert_eq!(NonZeroUsize::new(1).unwrap().leading_zeros(), usize::BITS - 1);\n+    assert_eq!(NonZeroIsize::new(1).unwrap().leading_zeros(), usize::BITS - 1);\n+\n+    assert_eq!(NonZeroU8::new(u8::MAX >> 2).unwrap().leading_zeros(), 2);\n+    assert_eq!(NonZeroI8::new((u8::MAX >> 2) as i8).unwrap().leading_zeros(), 2);\n+    assert_eq!(NonZeroU16::new(u16::MAX >> 2).unwrap().leading_zeros(), 2);\n+    assert_eq!(NonZeroI16::new((u16::MAX >> 2) as i16).unwrap().leading_zeros(), 2);\n+    assert_eq!(NonZeroU32::new(u32::MAX >> 2).unwrap().leading_zeros(), 2);\n+    assert_eq!(NonZeroI32::new((u32::MAX >> 2) as i32).unwrap().leading_zeros(), 2);\n+    assert_eq!(NonZeroU64::new(u64::MAX >> 2).unwrap().leading_zeros(), 2);\n+    assert_eq!(NonZeroI64::new((u64::MAX >> 2) as i64).unwrap().leading_zeros(), 2);\n+    assert_eq!(NonZeroU128::new(u128::MAX >> 2).unwrap().leading_zeros(), 2);\n+    assert_eq!(NonZeroI128::new((u128::MAX >> 2) as i128).unwrap().leading_zeros(), 2);\n+    assert_eq!(NonZeroUsize::new(usize::MAX >> 2).unwrap().leading_zeros(), 2);\n+    assert_eq!(NonZeroIsize::new((usize::MAX >> 2) as isize).unwrap().leading_zeros(), 2);\n+\n+    assert_eq!(NonZeroU8::new(u8::MAX).unwrap().leading_zeros(), 0);\n+    assert_eq!(NonZeroI8::new(-1i8).unwrap().leading_zeros(), 0);\n+    assert_eq!(NonZeroU16::new(u16::MAX).unwrap().leading_zeros(), 0);\n+    assert_eq!(NonZeroI16::new(-1i16).unwrap().leading_zeros(), 0);\n+    assert_eq!(NonZeroU32::new(u32::MAX).unwrap().leading_zeros(), 0);\n+    assert_eq!(NonZeroI32::new(-1i32).unwrap().leading_zeros(), 0);\n+    assert_eq!(NonZeroU64::new(u64::MAX).unwrap().leading_zeros(), 0);\n+    assert_eq!(NonZeroI64::new(-1i64).unwrap().leading_zeros(), 0);\n+    assert_eq!(NonZeroU128::new(u128::MAX).unwrap().leading_zeros(), 0);\n+    assert_eq!(NonZeroI128::new(-1i128).unwrap().leading_zeros(), 0);\n+    assert_eq!(NonZeroUsize::new(usize::MAX).unwrap().leading_zeros(), 0);\n+    assert_eq!(NonZeroIsize::new(-1isize).unwrap().leading_zeros(), 0);\n+\n+    const LEADING_ZEROS: u32 = NonZeroU16::new(1).unwrap().leading_zeros();\n+    assert_eq!(LEADING_ZEROS, 15);\n+}\n+\n+#[test]\n+fn nonzero_trailing_zeros() {\n+    assert_eq!(NonZeroU8::new(1).unwrap().trailing_zeros(), 0);\n+    assert_eq!(NonZeroI8::new(1).unwrap().trailing_zeros(), 0);\n+    assert_eq!(NonZeroU16::new(1).unwrap().trailing_zeros(), 0);\n+    assert_eq!(NonZeroI16::new(1).unwrap().trailing_zeros(), 0);\n+    assert_eq!(NonZeroU32::new(1).unwrap().trailing_zeros(), 0);\n+    assert_eq!(NonZeroI32::new(1).unwrap().trailing_zeros(), 0);\n+    assert_eq!(NonZeroU64::new(1).unwrap().trailing_zeros(), 0);\n+    assert_eq!(NonZeroI64::new(1).unwrap().trailing_zeros(), 0);\n+    assert_eq!(NonZeroU128::new(1).unwrap().trailing_zeros(), 0);\n+    assert_eq!(NonZeroI128::new(1).unwrap().trailing_zeros(), 0);\n+    assert_eq!(NonZeroUsize::new(1).unwrap().trailing_zeros(), 0);\n+    assert_eq!(NonZeroIsize::new(1).unwrap().trailing_zeros(), 0);\n+\n+    assert_eq!(NonZeroU8::new(1 << 2).unwrap().trailing_zeros(), 2);\n+    assert_eq!(NonZeroI8::new(1 << 2).unwrap().trailing_zeros(), 2);\n+    assert_eq!(NonZeroU16::new(1 << 2).unwrap().trailing_zeros(), 2);\n+    assert_eq!(NonZeroI16::new(1 << 2).unwrap().trailing_zeros(), 2);\n+    assert_eq!(NonZeroU32::new(1 << 2).unwrap().trailing_zeros(), 2);\n+    assert_eq!(NonZeroI32::new(1 << 2).unwrap().trailing_zeros(), 2);\n+    assert_eq!(NonZeroU64::new(1 << 2).unwrap().trailing_zeros(), 2);\n+    assert_eq!(NonZeroI64::new(1 << 2).unwrap().trailing_zeros(), 2);\n+    assert_eq!(NonZeroU128::new(1 << 2).unwrap().trailing_zeros(), 2);\n+    assert_eq!(NonZeroI128::new(1 << 2).unwrap().trailing_zeros(), 2);\n+    assert_eq!(NonZeroUsize::new(1 << 2).unwrap().trailing_zeros(), 2);\n+    assert_eq!(NonZeroIsize::new(1 << 2).unwrap().trailing_zeros(), 2);\n+\n+    assert_eq!(NonZeroU8::new(1 << 7).unwrap().trailing_zeros(), 7);\n+    assert_eq!(NonZeroI8::new(1 << 7).unwrap().trailing_zeros(), 7);\n+    assert_eq!(NonZeroU16::new(1 << 15).unwrap().trailing_zeros(), 15);\n+    assert_eq!(NonZeroI16::new(1 << 15).unwrap().trailing_zeros(), 15);\n+    assert_eq!(NonZeroU32::new(1 << 31).unwrap().trailing_zeros(), 31);\n+    assert_eq!(NonZeroI32::new(1 << 31).unwrap().trailing_zeros(), 31);\n+    assert_eq!(NonZeroU64::new(1 << 63).unwrap().trailing_zeros(), 63);\n+    assert_eq!(NonZeroI64::new(1 << 63).unwrap().trailing_zeros(), 63);\n+    assert_eq!(NonZeroU128::new(1 << 127).unwrap().trailing_zeros(), 127);\n+    assert_eq!(NonZeroI128::new(1 << 127).unwrap().trailing_zeros(), 127);\n+\n+    assert_eq!(\n+        NonZeroUsize::new(1 << (usize::BITS - 1)).unwrap().trailing_zeros(),\n+        usize::BITS - 1\n+    );\n+    assert_eq!(\n+        NonZeroIsize::new(1 << (usize::BITS - 1)).unwrap().trailing_zeros(),\n+        usize::BITS - 1\n+    );\n+\n+    const TRAILING_ZEROS: u32 = NonZeroU16::new(1 << 2).unwrap().trailing_zeros();\n+    assert_eq!(TRAILING_ZEROS, 2);\n+}"}]}