{"sha": "5e04c66885729bb0c5d58e1e1624f89b129bf6dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlMDRjNjY4ODU3MjliYjBjNWQ1OGUxZTE2MjRmODliMTI5YmY2ZGQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-09T20:44:29Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-18T12:47:38Z"}, "message": "remove the `generator_sigs` map, query, and plumbing", "tree": {"sha": "74076c8ece9c6ac1774b96d6e2244bc9851fb0f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74076c8ece9c6ac1774b96d6e2244bc9851fb0f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e04c66885729bb0c5d58e1e1624f89b129bf6dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e04c66885729bb0c5d58e1e1624f89b129bf6dd", "html_url": "https://github.com/rust-lang/rust/commit/5e04c66885729bb0c5d58e1e1624f89b129bf6dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e04c66885729bb0c5d58e1e1624f89b129bf6dd/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7010d8cf51d846acada6229528c729748cceea85", "url": "https://api.github.com/repos/rust-lang/rust/commits/7010d8cf51d846acada6229528c729748cceea85", "html_url": "https://github.com/rust-lang/rust/commit/7010d8cf51d846acada6229528c729748cceea85"}], "stats": {"total": 195, "additions": 24, "deletions": 171}, "files": [{"sha": "db3aa9a1efa4b6fa1ff99f1e30978cf7b2729ff5", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5e04c66885729bb0c5d58e1e1624f89b129bf6dd/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e04c66885729bb0c5d58e1e1624f89b129bf6dd/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=5e04c66885729bb0c5d58e1e1624f89b129bf6dd", "patch": "@@ -499,7 +499,6 @@ define_dep_nodes!( <'tcx>\n     [] ImplTraitRef(DefId),\n     [] ImplPolarity(DefId),\n     [] FnSignature(DefId),\n-    [] GenSignature(DefId),\n     [] CoerceUnsizedInfo(DefId),\n \n     [] ItemVarianceConstraints(DefId),"}, {"sha": "426c61e9ac083eb66042352befedeb6299938c7f", "filename": "src/librustc/infer/freshen.rs", "status": "modified", "additions": 1, "deletions": 106, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/5e04c66885729bb0c5d58e1e1624f89b129bf6dd/src%2Flibrustc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e04c66885729bb0c5d58e1e1624f89b129bf6dd/src%2Flibrustc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ffreshen.rs?ref=5e04c66885729bb0c5d58e1e1624f89b129bf6dd", "patch": "@@ -43,9 +43,7 @@\n \n use ty::{self, Ty, TyCtxt, TypeFoldable};\n use ty::fold::TypeFolder;\n-use ty::subst::Substs;\n use util::nodemap::FxHashMap;\n-use hir::def_id::DefId;\n \n use std::collections::hash_map::Entry;\n \n@@ -56,7 +54,6 @@ pub struct TypeFreshener<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n     freshen_count: u32,\n     freshen_map: FxHashMap<ty::InferTy, Ty<'tcx>>,\n-    closure_set: Vec<DefId>,\n }\n \n impl<'a, 'gcx, 'tcx> TypeFreshener<'a, 'gcx, 'tcx> {\n@@ -66,7 +63,6 @@ impl<'a, 'gcx, 'tcx> TypeFreshener<'a, 'gcx, 'tcx> {\n             infcx,\n             freshen_count: 0,\n             freshen_map: FxHashMap(),\n-            closure_set: vec![],\n         }\n     }\n \n@@ -92,88 +88,6 @@ impl<'a, 'gcx, 'tcx> TypeFreshener<'a, 'gcx, 'tcx> {\n             }\n         }\n     }\n-\n-    fn next_fresh<F>(&mut self,\n-                     freshener: F)\n-                     -> Ty<'tcx>\n-        where F: FnOnce(u32) -> ty::InferTy,\n-    {\n-        let index = self.freshen_count;\n-        self.freshen_count += 1;\n-        self.infcx.tcx.mk_infer(freshener(index))\n-    }\n-\n-    fn freshen_generator_like<M, C>(&mut self,\n-                                  def_id: DefId,\n-                                  substs: ty::ClosureSubsts<'tcx>,\n-                                  t: Ty<'tcx>,\n-                                  markers: M,\n-                                  combine: C)\n-                                  -> Ty<'tcx>\n-        where M: FnOnce(&mut Self) -> (Ty<'tcx>, Ty<'tcx>),\n-              C: FnOnce(&'tcx Substs<'tcx>) -> Ty<'tcx>\n-    {\n-        let tcx = self.infcx.tcx;\n-\n-        let closure_in_progress = self.infcx.in_progress_tables.map_or(false, |tables| {\n-            tcx.hir.as_local_node_id(def_id).map_or(false, |closure_id| {\n-                tables.borrow().local_id_root ==\n-                    Some(DefId::local(tcx.hir.node_to_hir_id(closure_id).owner))\n-            })\n-        });\n-\n-        if !closure_in_progress {\n-            // If this closure belongs to another infcx, its kind etc. were\n-            // fully inferred and its signature/kind are exactly what's listed\n-            // in its infcx. So we don't need to add the markers for them.\n-            return t.super_fold_with(self);\n-        }\n-\n-        // We are encoding a closure in progress. Because we want our freshening\n-        // key to contain all inference information needed to make sense of our\n-        // value, we need to encode the closure signature and kind. The way\n-        // we do that is to add them as 2 variables to the closure substs,\n-        // basically because it's there (and nobody cares about adding extra stuff\n-        // to substs).\n-        //\n-        // This means the \"freshened\" closure substs ends up looking like\n-        //     fresh_substs = [PARENT_SUBSTS* ; UPVARS* ; SIG_MARKER ; KIND_MARKER]\n-        let (marker_1, marker_2) = if self.closure_set.contains(&def_id) {\n-            // We found the closure def-id within its own signature. Just\n-            // leave a new freshened type - any matching operations would\n-            // have found and compared the exterior closure already to\n-            // get here.\n-            //\n-            // In that case, we already know what the signature would\n-            // be - the parent closure on the stack already contains a\n-            // \"copy\" of the signature, so there is no reason to encode\n-            // it again for injectivity. Just use a fresh type variable\n-            // to make everything comparable.\n-            //\n-            // For example (closure kinds omitted for clarity)\n-            //     t=[closure FOO sig=[closure BAR sig=[closure FOO ..]]]\n-            // Would get encoded to\n-            //     t=[closure FOO sig=[closure BAR sig=[closure FOO sig=$0]]]\n-            //\n-            // and we can decode by having\n-            //     $0=[closure BAR {sig doesn't exist in decode}]\n-            // and get\n-            //     t=[closure FOO]\n-            //     sig[FOO] = [closure BAR]\n-            //     sig[BAR] = [closure FOO]\n-            (self.next_fresh(ty::FreshTy), self.next_fresh(ty::FreshTy))\n-        } else {\n-            self.closure_set.push(def_id);\n-            let markers = markers(self);\n-            self.closure_set.pop();\n-            markers\n-        };\n-\n-        combine(tcx.mk_substs(\n-            substs.substs.iter().map(|k| k.fold_with(self)).chain(\n-                [marker_1, marker_2].iter().cloned().map(From::from)\n-                    )))\n-    }\n }\n \n impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for TypeFreshener<'a, 'gcx, 'tcx> {\n@@ -249,26 +163,7 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for TypeFreshener<'a, 'gcx, 'tcx> {\n                 t\n             }\n \n-            ty::TyGenerator(def_id, substs, interior) => {\n-                self.freshen_generator_like(\n-                    def_id, substs, t,\n-                    |this| {\n-                        let gen_sig = this.infcx.generator_sig(def_id).unwrap();\n-                        // FIXME: want to revise this strategy when generator\n-                        // signatures can actually contain LBRs.\n-                        let sig = this.tcx().no_late_bound_regions(&gen_sig)\n-                            .unwrap_or_else(|| {\n-                                bug!(\"late-bound regions in signature of {:?}\",\n-                                     def_id)\n-                            });\n-                        (sig.yield_ty, sig.return_ty).fold_with(this)\n-                    },\n-                    |substs| {\n-                        tcx.mk_generator(def_id, ty::ClosureSubsts { substs }, interior)\n-                    }\n-                )\n-            }\n-\n+            ty::TyGenerator(..) |\n             ty::TyBool |\n             ty::TyChar |\n             ty::TyInt(..) |"}, {"sha": "ca95d4fd291939c2166e5961e89998a17105496e", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5e04c66885729bb0c5d58e1e1624f89b129bf6dd/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e04c66885729bb0c5d58e1e1624f89b129bf6dd/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=5e04c66885729bb0c5d58e1e1624f89b129bf6dd", "patch": "@@ -1501,19 +1501,6 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         self.tcx.fn_sig(def_id)\n     }\n \n-    pub fn generator_sig(&self, def_id: DefId) -> Option<ty::PolyGenSig<'tcx>> {\n-        if let Some(tables) = self.in_progress_tables {\n-            if let Some(id) = self.tcx.hir.as_local_node_id(def_id) {\n-                let hir_id = self.tcx.hir.node_to_hir_id(id);\n-                if let Some(&ty) = tables.borrow().generator_sigs().get(hir_id) {\n-                    return ty.map(|t| ty::Binder(t));\n-                }\n-            }\n-        }\n-\n-        self.tcx.generator_sig(def_id)\n-    }\n-\n     /// Normalizes associated types in `value`, potentially returning\n     /// new obligations that must further be processed.\n     pub fn partially_normalize_associated_types_in<T>(&self,"}, {"sha": "0cc755dc4272767be390cd7afd9455e4813cd08f", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5e04c66885729bb0c5d58e1e1624f89b129bf6dd/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e04c66885729bb0c5d58e1e1624f89b129bf6dd/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=5e04c66885729bb0c5d58e1e1624f89b129bf6dd", "patch": "@@ -1264,8 +1264,7 @@ fn confirm_generator_candidate<'cx, 'gcx, 'tcx>(\n     vtable: VtableGeneratorData<'tcx, PredicateObligation<'tcx>>)\n     -> Progress<'tcx>\n {\n-    let gen_sig = selcx.infcx().generator_sig(vtable.closure_def_id).unwrap()\n-        .subst(selcx.tcx(), vtable.substs.substs);\n+    let gen_sig = vtable.substs.generator_poly_sig(vtable.closure_def_id, selcx.tcx());\n     let Normalized {\n         value: gen_sig,\n         obligations"}, {"sha": "4bc3e2dd4d8d40e40096c2399ef707bea3a9827f", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5e04c66885729bb0c5d58e1e1624f89b129bf6dd/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e04c66885729bb0c5d58e1e1624f89b129bf6dd/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=5e04c66885729bb0c5d58e1e1624f89b129bf6dd", "patch": "@@ -3184,8 +3184,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                                       substs: ty::ClosureSubsts<'tcx>)\n                                       -> ty::PolyTraitRef<'tcx>\n     {\n-        let gen_sig = self.infcx.generator_sig(closure_def_id).unwrap()\n-            .subst(self.tcx(), substs.substs);\n+        let gen_sig = substs.generator_poly_sig(closure_def_id, self.tcx());\n         let ty::Binder((trait_ref, ..)) =\n             self.tcx().generator_trait_ref_and_outputs(obligation.predicate.def_id(),\n                                                        obligation.predicate.0.self_ty(), // (1)"}, {"sha": "228503b1a3f31267701179cb316107932f5cd35d", "filename": "src/librustc/ty/maps/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e04c66885729bb0c5d58e1e1624f89b129bf6dd/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e04c66885729bb0c5d58e1e1624f89b129bf6dd/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs?ref=5e04c66885729bb0c5d58e1e1624f89b129bf6dd", "patch": "@@ -173,10 +173,6 @@ define_maps! { <'tcx>\n     /// The signature of functions and closures.\n     [] fn fn_sig: FnSignature(DefId) -> ty::PolyFnSig<'tcx>,\n \n-    /// Records the signature of each generator. The def ID is the ID of the\n-    /// expression defining the closure.\n-    [] fn generator_sig: GenSignature(DefId) -> Option<ty::PolyGenSig<'tcx>>,\n-\n     /// Caches CoerceUnsized kinds for impls on custom types.\n     [] fn coerce_unsized_info: CoerceUnsizedInfo(DefId)\n         -> ty::adjustment::CoerceUnsizedInfo,"}, {"sha": "739537c7c3a71520dfc23541a8dd71fd02378f55", "filename": "src/librustc/ty/maps/plumbing.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5e04c66885729bb0c5d58e1e1624f89b129bf6dd/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e04c66885729bb0c5d58e1e1624f89b129bf6dd/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs?ref=5e04c66885729bb0c5d58e1e1624f89b129bf6dd", "patch": "@@ -783,7 +783,6 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::ImplTraitRef => { force!(impl_trait_ref, def_id!()); }\n         DepKind::ImplPolarity => { force!(impl_polarity, def_id!()); }\n         DepKind::FnSignature => { force!(fn_sig, def_id!()); }\n-        DepKind::GenSignature => { force!(generator_sig, def_id!()); }\n         DepKind::CoerceUnsizedInfo => { force!(coerce_unsized_info, def_id!()); }\n         DepKind::ItemVariances => { force!(variances_of, def_id!()); }\n         DepKind::IsConstFn => { force!(is_const_fn, def_id!()); }"}, {"sha": "1f671adf4f8a432fe96627b5fa46527a8534454d", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5e04c66885729bb0c5d58e1e1624f89b129bf6dd/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e04c66885729bb0c5d58e1e1624f89b129bf6dd/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=5e04c66885729bb0c5d58e1e1624f89b129bf6dd", "patch": "@@ -136,7 +136,6 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n \n         mir\n     }\n-    generator_sig => { cdata.generator_sig(def_id.index, tcx) }\n     mir_const_qualif => {\n         (cdata.mir_const_qualif(def_id.index), Rc::new(IdxSetBuf::new_empty(0)))\n     }"}, {"sha": "633806d5ef56800d5bde0178f5612457f7955c3c", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5e04c66885729bb0c5d58e1e1624f89b129bf6dd/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e04c66885729bb0c5d58e1e1624f89b129bf6dd/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=5e04c66885729bb0c5d58e1e1624f89b129bf6dd", "patch": "@@ -1036,23 +1036,6 @@ impl<'a, 'tcx> CrateMetadata {\n         sig.decode((self, tcx))\n     }\n \n-    fn get_generator_data(&self,\n-                      id: DefIndex,\n-                      tcx: TyCtxt<'a, 'tcx, 'tcx>)\n-                      -> Option<GeneratorData<'tcx>> {\n-        match self.entry(id).kind {\n-            EntryKind::Generator(data) => Some(data.decode((self, tcx))),\n-            _ => None,\n-        }\n-    }\n-\n-    pub fn generator_sig(&self,\n-                      id: DefIndex,\n-                      tcx: TyCtxt<'a, 'tcx, 'tcx>)\n-                      -> Option<ty::PolyGenSig<'tcx>> {\n-        self.get_generator_data(id, tcx).map(|d| d.sig)\n-    }\n-\n     #[inline]\n     pub fn def_key(&self, index: DefIndex) -> DefKey {\n         self.def_path_table.def_key(index)"}, {"sha": "80b68022fe2acdf26b69877d9b5426b60529d8b6", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5e04c66885729bb0c5d58e1e1624f89b129bf6dd/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e04c66885729bb0c5d58e1e1624f89b129bf6dd/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=5e04c66885729bb0c5d58e1e1624f89b129bf6dd", "patch": "@@ -1205,18 +1205,25 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n         debug!(\"IsolatedEncoder::encode_info_for_closure({:?})\", def_id);\n         let tcx = self.tcx;\n \n-        let kind = if let Some(sig) = self.tcx.generator_sig(def_id) {\n-            let layout = self.tcx.generator_layout(def_id);\n-            let data = GeneratorData {\n-                sig,\n-                layout: layout.clone(),\n-            };\n-            EntryKind::Generator(self.lazy(&data))\n-        } else {\n-            let data = ClosureData {\n-                sig: self.lazy(&tcx.fn_sig(def_id)),\n-            };\n-            EntryKind::Closure(self.lazy(&data))\n+        let tables = self.tcx.typeck_tables_of(def_id);\n+        let node_id = self.tcx.hir.as_local_node_id(def_id).unwrap();\n+        let hir_id = self.tcx.hir.node_to_hir_id(node_id);\n+        let kind = match tables.node_id_to_type(hir_id).sty {\n+            ty::TyGenerator(def_id, ..) => {\n+                let layout = self.tcx.generator_layout(def_id);\n+                let data = GeneratorData {\n+                    layout: layout.clone(),\n+                };\n+                EntryKind::Generator(self.lazy(&data))\n+            }\n+\n+            ty::TyClosure(def_id, substs) => {\n+                let sig = substs.closure_sig(def_id, self.tcx);\n+                let data = ClosureData { sig: self.lazy(&sig) };\n+                EntryKind::Closure(self.lazy(&data))\n+            }\n+\n+            _ => bug!(\"closure that is neither generator nor closure\")\n         };\n \n         Entry {"}, {"sha": "8ff327463917ac36db7c52841c289178c9dae36e", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5e04c66885729bb0c5d58e1e1624f89b129bf6dd/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e04c66885729bb0c5d58e1e1624f89b129bf6dd/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=5e04c66885729bb0c5d58e1e1624f89b129bf6dd", "patch": "@@ -518,7 +518,6 @@ impl_stable_hash_for!(struct ClosureData<'tcx> { sig });\n \n #[derive(RustcEncodable, RustcDecodable)]\n pub struct GeneratorData<'tcx> {\n-    pub sig: ty::PolyGenSig<'tcx>,\n     pub layout: mir::GeneratorLayout<'tcx>,\n }\n-impl_stable_hash_for!(struct GeneratorData<'tcx> { sig, layout });\n+impl_stable_hash_for!(struct GeneratorData<'tcx> { layout });"}, {"sha": "07bbd9b8c3dc181cff2ec1dd4fc04ce3f1f776b0", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e04c66885729bb0c5d58e1e1624f89b129bf6dd/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e04c66885729bb0c5d58e1e1624f89b129bf6dd/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=5e04c66885729bb0c5d58e1e1624f89b129bf6dd", "patch": "@@ -527,7 +527,7 @@ pub fn ty_fn_sig<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         }\n         ty::TyGenerator(def_id, substs, _) => {\n             let tcx = ccx.tcx();\n-            let sig = tcx.generator_sig(def_id).unwrap().subst(tcx, substs.substs);\n+            let sig = substs.generator_poly_sig(def_id, ccx.tcx());\n \n             let env_region = ty::ReLateBound(ty::DebruijnIndex::new(1), ty::BrEnv);\n             let env_ty = tcx.mk_mut_ref(tcx.mk_region(env_region), ty);"}, {"sha": "fe1d81a1231a6794570905bcf6eb0237ce8a3245", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5e04c66885729bb0c5d58e1e1624f89b129bf6dd/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e04c66885729bb0c5d58e1e1624f89b129bf6dd/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=5e04c66885729bb0c5d58e1e1624f89b129bf6dd", "patch": "@@ -722,21 +722,12 @@ pub fn provide(providers: &mut Providers) {\n         typeck_item_bodies,\n         typeck_tables_of,\n         has_typeck_tables,\n-        generator_sig,\n         adt_destructor,\n         used_trait_imports,\n         ..*providers\n     };\n }\n \n-fn generator_sig<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          def_id: DefId)\n-                          -> Option<ty::PolyGenSig<'tcx>> {\n-    let node_id = tcx.hir.as_local_node_id(def_id).unwrap();\n-    let hir_id = tcx.hir.node_to_hir_id(node_id);\n-    tcx.typeck_tables_of(def_id).generator_sigs()[hir_id].map(|s| ty::Binder(s))\n-}\n-\n fn adt_destructor<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                             def_id: DefId)\n                             -> Option<ty::Destructor> {"}]}