{"sha": "7728de3e608ee0b020bd024b9ea0ae386bad3f40", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3MjhkZTNlNjA4ZWUwYjAyMGJkMDI0YjllYTBhZTM4NmJhZDNmNDA=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-10-16T23:18:06Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-10-16T23:18:06Z"}, "message": "Do not force_allocate checked binop destination.", "tree": {"sha": "8ec8fd78045acb4ffad317fcc1e8876b6839b5f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ec8fd78045acb4ffad317fcc1e8876b6839b5f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7728de3e608ee0b020bd024b9ea0ae386bad3f40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7728de3e608ee0b020bd024b9ea0ae386bad3f40", "html_url": "https://github.com/rust-lang/rust/commit/7728de3e608ee0b020bd024b9ea0ae386bad3f40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7728de3e608ee0b020bd024b9ea0ae386bad3f40/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f67c4612c6b9a7ac6579644bea6f5ccfb0803e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f67c4612c6b9a7ac6579644bea6f5ccfb0803e4", "html_url": "https://github.com/rust-lang/rust/commit/3f67c4612c6b9a7ac6579644bea6f5ccfb0803e4"}], "stats": {"total": 75, "additions": 27, "deletions": 48}, "files": [{"sha": "4013d17ede37ab972a381801c69adc378bd3b9db", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/7728de3e608ee0b020bd024b9ea0ae386bad3f40/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7728de3e608ee0b020bd024b9ea0ae386bad3f40/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=7728de3e608ee0b020bd024b9ea0ae386bad3f40", "patch": "@@ -394,6 +394,17 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         Ok(())\n     }\n \n+    fn binop_with_overflow(\n+        &mut self,\n+        op: mir::BinOp,\n+        left: &mir::Operand<'tcx>,\n+        right: &mir::Operand<'tcx>,\n+    ) -> EvalResult<'tcx, (PrimVal, bool)> {\n+        let left_primval = self.eval_operand_to_primval(left)?;\n+        let right_primval = self.eval_operand_to_primval(right)?;\n+        primval::binary_op(op, left_primval, right_primval)\n+    }\n+\n     /// Applies the binary operation `op` to the two operands and writes a tuple of the result\n     /// and a boolean signifying the potential overflow to the destination.\n     fn intrinsic_with_overflow(\n@@ -402,37 +413,25 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         left: &mir::Operand<'tcx>,\n         right: &mir::Operand<'tcx>,\n         dest: Lvalue,\n-        dest_layout: &'tcx Layout,\n+        dest_ty: Ty<'tcx>,\n     ) -> EvalResult<'tcx, ()> {\n-        use rustc::ty::layout::Layout::*;\n-        let tup_layout = match *dest_layout {\n-            Univariant { ref variant, .. } => variant,\n-            _ => bug!(\"checked bin op returns something other than a tuple\"),\n-        };\n-\n-        let overflowed = self.intrinsic_overflowing(op, left, right, dest)?;\n-\n-        // FIXME(solson)\n-        let dest = self.force_allocation(dest)?.to_ptr();\n-\n-        let offset = tup_layout.offsets[1].bytes() as isize;\n-        self.memory.write_bool(dest.offset(offset), overflowed)\n+        let (val, overflowed) = self.binop_with_overflow(op, left, right)?;\n+        let val = Value::ByValPair(val, PrimVal::Bool(overflowed));\n+        self.write_value(val, dest, dest_ty)\n     }\n \n-    /// Applies the binary operation `op` to the arguments and writes the result to the destination.\n-    /// Returns `true` if the operation overflowed.\n+    /// Applies the binary operation `op` to the arguments and writes the result to the\n+    /// destination. Returns `true` if the operation overflowed.\n     fn intrinsic_overflowing(\n         &mut self,\n         op: mir::BinOp,\n         left: &mir::Operand<'tcx>,\n         right: &mir::Operand<'tcx>,\n         dest: Lvalue,\n     ) -> EvalResult<'tcx, bool> {\n-        let left_primval = self.eval_operand_to_primval(left)?;\n-        let right_primval = self.eval_operand_to_primval(right)?;\n-        let (val, overflow) = primval::binary_op(op, left_primval, right_primval)?;\n+        let (val, overflowed) = self.binop_with_overflow(op, left, right)?;\n         self.write_primval(dest, val)?;\n-        Ok(overflow)\n+        Ok(overflowed)\n     }\n \n     fn assign_fields<I: IntoIterator<Item = u64>>(\n@@ -479,7 +478,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n \n             CheckedBinaryOp(bin_op, ref left, ref right) => {\n-                self.intrinsic_with_overflow(bin_op, left, right, dest, dest_layout)?;\n+                self.intrinsic_with_overflow(bin_op, left, right, dest, dest_ty)?;\n             }\n \n             UnaryOp(un_op, ref operand) => {"}, {"sha": "85559a7efc71781de1a16de77a6aabf1f6d0580b", "filename": "src/interpreter/terminator/intrinsics.rs", "status": "modified", "additions": 7, "deletions": 27, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/7728de3e608ee0b020bd024b9ea0ae386bad3f40/src%2Finterpreter%2Fterminator%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7728de3e608ee0b020bd024b9ea0ae386bad3f40/src%2Finterpreter%2Fterminator%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fterminator%2Fintrinsics.rs?ref=7728de3e608ee0b020bd024b9ea0ae386bad3f40", "patch": "@@ -31,35 +31,15 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n         let intrinsic_name = &self.tcx.item_name(def_id).as_str()[..];\n         match intrinsic_name {\n-            \"add_with_overflow\" => {\n-                self.intrinsic_with_overflow(\n-                    mir::BinOp::Add,\n-                    &args[0],\n-                    &args[1],\n-                    dest,\n-                    dest_layout,\n-                )?\n-            }\n+            \"add_with_overflow\" =>\n+                self.intrinsic_with_overflow(mir::BinOp::Add, &args[0], &args[1], dest, dest_ty)?,\n \n-            \"sub_with_overflow\" => {\n-                self.intrinsic_with_overflow(\n-                    mir::BinOp::Sub,\n-                    &args[0],\n-                    &args[1],\n-                    dest,\n-                    dest_layout,\n-                )?\n-            }\n+            \"sub_with_overflow\" =>\n+                self.intrinsic_with_overflow(mir::BinOp::Sub, &args[0], &args[1], dest, dest_ty)?,\n+\n+            \"mul_with_overflow\" =>\n+                self.intrinsic_with_overflow(mir::BinOp::Mul, &args[0], &args[1], dest, dest_ty)?,\n \n-            \"mul_with_overflow\" => {\n-                self.intrinsic_with_overflow(\n-                    mir::BinOp::Mul,\n-                    &args[0],\n-                    &args[1],\n-                    dest,\n-                    dest_layout,\n-                )?\n-            }\n \n             \"arith_offset\" => {\n                 let ptr = args_ptrs[0].read_ptr(&self.memory)?;"}]}