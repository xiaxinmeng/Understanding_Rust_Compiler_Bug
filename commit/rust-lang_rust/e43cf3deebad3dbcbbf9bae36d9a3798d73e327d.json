{"sha": "e43cf3deebad3dbcbbf9bae36d9a3798d73e327d", "node_id": "C_kwDOAAsO6NoAKGU0M2NmM2RlZWJhZDNkYmNiYmY5YmFlMzZkOWEzNzk4ZDczZTMyN2Q", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-08T21:41:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-08T21:41:13Z"}, "message": "Rollup merge of #101587 - BoxyUwU:term_debug, r=compiler-errors\n\nMake `Debug` impl for `Term` useful\n\nbecause `Term { ptr: 78942378998734298342, maker: PhantomData, }` does not excel at communicating the necessary information", "tree": {"sha": "fda26bcbe9b43c46344e941cbe9f22767d28d75c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fda26bcbe9b43c46344e941cbe9f22767d28d75c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e43cf3deebad3dbcbbf9bae36d9a3798d73e327d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjGmF5CRBK7hj4Ov3rIwAAbnEIAG+I8QtkZ1RbnEf/c4jap5qP\norxSn7M52ELH2tEOOPoCkiglKKrnMABJdXoonXmVhKfIkFfGDDyBnv2HXBfQMboH\nokuTWj0/r4KNXz2n0ST8TeMFBNeV/1HztwThF3ThYLdPZzbZgzxOgAuWfiZnSEvr\nwiu8DTUZL1kZeCoajWbpewuGrDpRTk0g+whzQsR032WxxC72BrDMXy5YJA9r5V/a\nWmTwj3c5NS/v1lVCqHYTffViyves3+9K0kWAKuA9OyuNsMTgeVI8dAckH+L7sb8q\nFoIDao6ISDZz2q6QA4rBDHKdVEiUJIWVkYji6f36Zqhx3AXdiPI4maeEQBuBC3M=\n=Nwwk\n-----END PGP SIGNATURE-----\n", "payload": "tree fda26bcbe9b43c46344e941cbe9f22767d28d75c\nparent 7300e4db2d8ca665b579684edb43ee64be95b546\nparent ef36af2f9d44b8b57660e6b6eea227e1e99bcf2b\nauthor Michael Goulet <michael@errs.io> 1662673273 -0700\ncommitter GitHub <noreply@github.com> 1662673273 -0700\n\nRollup merge of #101587 - BoxyUwU:term_debug, r=compiler-errors\n\nMake `Debug` impl for `Term` useful\n\nbecause `Term { ptr: 78942378998734298342, maker: PhantomData, }` does not excel at communicating the necessary information\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e43cf3deebad3dbcbbf9bae36d9a3798d73e327d", "html_url": "https://github.com/rust-lang/rust/commit/e43cf3deebad3dbcbbf9bae36d9a3798d73e327d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e43cf3deebad3dbcbbf9bae36d9a3798d73e327d/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7300e4db2d8ca665b579684edb43ee64be95b546", "url": "https://api.github.com/repos/rust-lang/rust/commits/7300e4db2d8ca665b579684edb43ee64be95b546", "html_url": "https://github.com/rust-lang/rust/commit/7300e4db2d8ca665b579684edb43ee64be95b546"}, {"sha": "ef36af2f9d44b8b57660e6b6eea227e1e99bcf2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef36af2f9d44b8b57660e6b6eea227e1e99bcf2b", "html_url": "https://github.com/rust-lang/rust/commit/ef36af2f9d44b8b57660e6b6eea227e1e99bcf2b"}], "stats": {"total": 15, "additions": 14, "deletions": 1}, "files": [{"sha": "4635a9d5575d41adcbb90b6aae8466aa9430ef0a", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e43cf3deebad3dbcbbf9bae36d9a3798d73e327d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43cf3deebad3dbcbbf9bae36d9a3798d73e327d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=e43cf3deebad3dbcbbf9bae36d9a3798d73e327d", "patch": "@@ -915,12 +915,25 @@ pub struct CoercePredicate<'tcx> {\n }\n pub type PolyCoercePredicate<'tcx> = ty::Binder<'tcx, CoercePredicate<'tcx>>;\n \n-#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub struct Term<'tcx> {\n     ptr: NonZeroUsize,\n     marker: PhantomData<(Ty<'tcx>, Const<'tcx>)>,\n }\n \n+impl Debug for Term<'_> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        let data = if let Some(ty) = self.ty() {\n+            format!(\"Term::Ty({:?})\", ty)\n+        } else if let Some(ct) = self.ct() {\n+            format!(\"Term::Ct({:?})\", ct)\n+        } else {\n+            unreachable!()\n+        };\n+        f.write_str(&data)\n+    }\n+}\n+\n impl<'tcx> From<Ty<'tcx>> for Term<'tcx> {\n     fn from(ty: Ty<'tcx>) -> Self {\n         TermKind::Ty(ty).pack()"}]}