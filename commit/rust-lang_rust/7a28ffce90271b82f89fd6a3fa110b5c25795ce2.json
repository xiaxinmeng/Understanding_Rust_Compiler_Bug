{"sha": "7a28ffce90271b82f89fd6a3fa110b5c25795ce2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhMjhmZmNlOTAyNzFiODJmODlmZDZhM2ZhMTEwYjVjMjU3OTVjZTI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-03-31T10:47:49Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-04-01T16:33:50Z"}, "message": "Fix miri Discriminant() for non-ADT", "tree": {"sha": "ea4b7f3d96dde5f51738452b6ea43d5940bb771f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea4b7f3d96dde5f51738452b6ea43d5940bb771f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a28ffce90271b82f89fd6a3fa110b5c25795ce2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a28ffce90271b82f89fd6a3fa110b5c25795ce2", "html_url": "https://github.com/rust-lang/rust/commit/7a28ffce90271b82f89fd6a3fa110b5c25795ce2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a28ffce90271b82f89fd6a3fa110b5c25795ce2/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c5f8509581c1a3072496db04a6af32c76d1af61", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c5f8509581c1a3072496db04a6af32c76d1af61", "html_url": "https://github.com/rust-lang/rust/commit/3c5f8509581c1a3072496db04a6af32c76d1af61"}], "stats": {"total": 29, "additions": 19, "deletions": 10}, "files": [{"sha": "cf3241fe9be662d6938e7d551020cbee98db5a4d", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7a28ffce90271b82f89fd6a3fa110b5c25795ce2/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a28ffce90271b82f89fd6a3fa110b5c25795ce2/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=7a28ffce90271b82f89fd6a3fa110b5c25795ce2", "patch": "@@ -743,20 +743,29 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n \n             Discriminant(ref place) => {\n                 let ty = self.place_ty(place);\n+                let layout = self.layout_of(ty)?;\n                 let place = self.eval_place(place)?;\n                 let discr_val = self.read_discriminant_value(place, ty)?;\n-                if let ty::TyAdt(adt_def, _) = ty.sty {\n-                    trace!(\"Read discriminant {}, valid discriminants {:?}\", discr_val, adt_def.discriminants(*self.tcx).collect::<Vec<_>>());\n-                    if adt_def.discriminants(*self.tcx).all(|v| {\n-                        discr_val != v.val\n-                    })\n-                    {\n-                        return err!(InvalidDiscriminant);\n+                match layout.variants {\n+                    layout::Variants::Single { index } => {\n+                        assert_eq!(discr_val, index as u128);\n+                    }\n+                    layout::Variants::Tagged { .. } |\n+                    layout::Variants::NicheFilling { .. } => {\n+                        if let ty::TyAdt(adt_def, _) = ty.sty {\n+                            trace!(\"Read discriminant {}, valid discriminants {:?}\", discr_val, adt_def.discriminants(*self.tcx).collect::<Vec<_>>());\n+                            if adt_def.discriminants(*self.tcx).all(|v| {\n+                                discr_val != v.val\n+                            })\n+                            {\n+                                return err!(InvalidDiscriminant);\n+                            }\n+                        } else {\n+                            bug!(\"rustc only generates Rvalue::Discriminant for enums\");\n+                        }\n                     }\n-                    self.write_primval(dest, PrimVal::Bytes(discr_val), dest_ty)?;\n-                } else {\n-                    bug!(\"rustc only generates Rvalue::Discriminant for enums\");\n                 }\n+                self.write_primval(dest, PrimVal::Bytes(discr_val), dest_ty)?;\n             }\n         }\n "}]}