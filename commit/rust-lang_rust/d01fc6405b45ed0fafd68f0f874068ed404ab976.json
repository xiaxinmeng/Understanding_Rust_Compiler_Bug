{"sha": "d01fc6405b45ed0fafd68f0f874068ed404ab976", "node_id": "C_kwDOAAsO6NoAKGQwMWZjNjQwNWI0NWVkMGZhZmQ2OGYwZjg3NDA2OGVkNDA0YWI5NzY", "commit": {"author": {"name": "bruno-ortiz", "email": "brunortiz11@gmail.com", "date": "2022-02-26T00:37:55Z"}, "committer": {"name": "Bruno Ortiz", "email": "brunortiz11@gmail.com", "date": "2023-05-02T13:56:13Z"}, "message": "Creating rust dependencies tree view", "tree": {"sha": "6673d198622c7804f83fce4219b5c27eb4e0046a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6673d198622c7804f83fce4219b5c27eb4e0046a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d01fc6405b45ed0fafd68f0f874068ed404ab976", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d01fc6405b45ed0fafd68f0f874068ed404ab976", "html_url": "https://github.com/rust-lang/rust/commit/d01fc6405b45ed0fafd68f0f874068ed404ab976", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d01fc6405b45ed0fafd68f0f874068ed404ab976/comments", "author": {"login": "bruno-ortiz", "id": 5748995, "node_id": "MDQ6VXNlcjU3NDg5OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/5748995?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bruno-ortiz", "html_url": "https://github.com/bruno-ortiz", "followers_url": "https://api.github.com/users/bruno-ortiz/followers", "following_url": "https://api.github.com/users/bruno-ortiz/following{/other_user}", "gists_url": "https://api.github.com/users/bruno-ortiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/bruno-ortiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bruno-ortiz/subscriptions", "organizations_url": "https://api.github.com/users/bruno-ortiz/orgs", "repos_url": "https://api.github.com/users/bruno-ortiz/repos", "events_url": "https://api.github.com/users/bruno-ortiz/events{/privacy}", "received_events_url": "https://api.github.com/users/bruno-ortiz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bruno-ortiz", "id": 5748995, "node_id": "MDQ6VXNlcjU3NDg5OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/5748995?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bruno-ortiz", "html_url": "https://github.com/bruno-ortiz", "followers_url": "https://api.github.com/users/bruno-ortiz/followers", "following_url": "https://api.github.com/users/bruno-ortiz/following{/other_user}", "gists_url": "https://api.github.com/users/bruno-ortiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/bruno-ortiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bruno-ortiz/subscriptions", "organizations_url": "https://api.github.com/users/bruno-ortiz/orgs", "repos_url": "https://api.github.com/users/bruno-ortiz/repos", "events_url": "https://api.github.com/users/bruno-ortiz/events{/privacy}", "received_events_url": "https://api.github.com/users/bruno-ortiz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09e0a00d3648eb4080d16f07c6dae73f7c73c431", "url": "https://api.github.com/repos/rust-lang/rust/commits/09e0a00d3648eb4080d16f07c6dae73f7c73c431", "html_url": "https://github.com/rust-lang/rust/commit/09e0a00d3648eb4080d16f07c6dae73f7c73c431"}], "stats": {"total": 121, "additions": 115, "deletions": 6}, "files": [{"sha": "b009e381ec9fb97e57bf4a837df587ce11c24ebc", "filename": "editors/code/package.json", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d01fc6405b45ed0fafd68f0f874068ed404ab976/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/d01fc6405b45ed0fafd68f0f874068ed404ab976/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=d01fc6405b45ed0fafd68f0f874068ed404ab976", "patch": "@@ -285,6 +285,14 @@\n                 \"title\": \"Clear flycheck diagnostics\",\n                 \"category\": \"rust-analyzer\"\n             },\n+            {\n+                \"command\": \"rust-analyzer.revealDependency\",\n+                \"title\": \"Reveal File\"\n+            },\n+            {\n+                \"command\": \"rust-analyzer.openFile\",\n+                \"title\": \"Open File\"\n+            },\n             {\n                 \"command\": \"rust-analyzer.revealDependency\",\n                 \"title\": \"Reveal File\"\n@@ -1975,4 +1983,4 @@\n             }\n         ]\n     }\n-}\n+}\n\\ No newline at end of file"}, {"sha": "fb6778b687f4635797db93a866acc1c0a1f1578c", "filename": "editors/code/src/commands.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d01fc6405b45ed0fafd68f0f874068ed404ab976/editors%2Fcode%2Fsrc%2Fcommands.ts", "raw_url": "https://github.com/rust-lang/rust/raw/d01fc6405b45ed0fafd68f0f874068ed404ab976/editors%2Fcode%2Fsrc%2Fcommands.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands.ts?ref=d01fc6405b45ed0fafd68f0f874068ed404ab976", "patch": "@@ -8,7 +8,7 @@ import { applySnippetWorkspaceEdit, applySnippetTextEdits } from \"./snippets\";\n import { spawnSync } from \"child_process\";\n import { RunnableQuickPick, selectRunnable, createTask, createArgs } from \"./run\";\n import { AstInspector } from \"./ast_inspector\";\n-import { isRustDocument, isCargoTomlDocument, sleep, isRustEditor, RustEditor } from \"./util\";\n+import { isRustDocument, isCargoTomlDocument, sleep, isRustEditor, RustEditor } from './util';\n import { startDebugSession, makeDebugConfig } from \"./debug\";\n import { LanguageClient } from \"vscode-languageclient/node\";\n import { LINKED_COMMANDS } from \"./client\";"}, {"sha": "ce70dfd2f6699c6398328478eefb0047f9be5d51", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d01fc6405b45ed0fafd68f0f874068ed404ab976/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/d01fc6405b45ed0fafd68f0f874068ed404ab976/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=d01fc6405b45ed0fafd68f0f874068ed404ab976", "patch": "@@ -3,17 +3,19 @@ import * as lc from \"vscode-languageclient/node\";\n import * as ra from \"./lsp_ext\";\n import * as path from \"path\";\n \n-import {Config, prepareVSCodeConfig} from \"./config\";\n-import {createClient} from \"./client\";\n+import {Config, prepareVSCodeConfig} from './config';\n+import {createClient} from './client';\n import {\n     executeDiscoverProject,\n     isRustDocument,\n     isRustEditor,\n     LazyOutputChannel,\n     log,\n     RustEditor,\n-} from \"./util\";\n-import {ServerStatusParams} from \"./lsp_ext\";\n+} from './util';\n+import {ServerStatusParams} from './lsp_ext';\n+import { Dependency, DependencyFile, RustDependenciesProvider, DependencyId } from './dependencies_provider';\n+import { execRevealDependency } from './commands';\n import {\n     Dependency,\n     DependencyFile,"}, {"sha": "6b40cb678c39c452402e860c2736e8e5c6239a75", "filename": "editors/code/src/toolchain.ts", "status": "modified", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/d01fc6405b45ed0fafd68f0f874068ed404ab976/editors%2Fcode%2Fsrc%2Ftoolchain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/d01fc6405b45ed0fafd68f0f874068ed404ab976/editors%2Fcode%2Fsrc%2Ftoolchain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftoolchain.ts?ref=d01fc6405b45ed0fafd68f0f874068ed404ab976", "patch": "@@ -98,6 +98,43 @@ export class Cargo {\n         return artifacts[0].fileName;\n     }\n \n+    async crates(): Promise<Crate[]> {\n+        const pathToCargo = await cargoPath();\n+        return await new Promise((resolve, reject) => {\n+            const crates: Crate[] = [];\n+\n+            const cargo = cp.spawn(pathToCargo, ['tree', '--prefix', 'none'], {\n+                stdio: ['ignore', 'pipe', 'pipe'],\n+                cwd: this.rootFolder\n+            });\n+            const rl = readline.createInterface({ input: cargo.stdout });\n+            rl.on('line', line => {\n+                const match = line.match(TREE_LINE_PATTERN);\n+                if (match) {\n+                    const name = match[1];\n+                    const version = match[2];\n+                    const extraInfo = match[3];\n+                    // ignore duplicates '(*)' and path dependencies\n+                    if (this.shouldIgnore(extraInfo)) {\n+                        return;\n+                    }\n+                    crates.push({ name, version });\n+                }\n+            });\n+            cargo.on('exit', (exitCode, _) => {\n+                if (exitCode === 0)\n+                    resolve(crates);\n+                else\n+                    reject(new Error(`exit code: ${exitCode}.`));\n+            });\n+\n+        });\n+    }\n+\n+    private shouldIgnore(extraInfo: string): boolean {\n+        return extraInfo !== undefined && (extraInfo === '*' || path.isAbsolute(extraInfo));\n+    }\n+\n     private async runCargo(\n         cargoArgs: string[],\n         onStdoutJson: (obj: any) => void,\n@@ -129,6 +166,58 @@ export class Cargo {\n     }\n }\n \n+export async function activeToolchain(): Promise<string> {\n+    const pathToRustup = await rustupPath();\n+    return await new Promise((resolve, reject) => {\n+        const execution = cp.spawn(pathToRustup, ['show', 'active-toolchain'], {\n+            stdio: ['ignore', 'pipe', 'pipe'],\n+            cwd: os.homedir()\n+        });\n+        const rl = readline.createInterface({ input: execution.stdout });\n+\n+        let currToolchain: string | undefined = undefined;\n+        rl.on('line', line => {\n+            const match = line.match(TOOLCHAIN_PATTERN);\n+            if (match) {\n+                currToolchain = match[1];\n+            }\n+        });\n+        execution.on('exit', (exitCode, _) => {\n+            if (exitCode === 0 && currToolchain)\n+                resolve(currToolchain);\n+            else\n+                reject(new Error(`exit code: ${exitCode}.`));\n+        });\n+\n+    });\n+}\n+\n+export async function rustVersion(): Promise<string> {\n+    const pathToRustup = await rustupPath();\n+    return await new Promise((resolve, reject) => {\n+        const execution = cp.spawn(pathToRustup, ['show', 'active-toolchain'], {\n+            stdio: ['ignore', 'pipe', 'pipe'],\n+            cwd: os.homedir()\n+        });\n+        const rl = readline.createInterface({ input: execution.stdout });\n+\n+        let currToolchain: string | undefined = undefined;\n+        rl.on('line', line => {\n+            const match = line.match(TOOLCHAIN_PATTERN);\n+            if (match) {\n+                currToolchain = match[1];\n+            }\n+        });\n+        execution.on('exit', (exitCode, _) => {\n+            if (exitCode === 1 && currToolchain)\n+                resolve(currToolchain);\n+            else\n+                reject(new Error(`exit code: ${exitCode}.`));\n+        });\n+\n+    });\n+}\n+\n /** Mirrors `project_model::sysroot::discover_sysroot_dir()` implementation*/\n export async function getSysroot(dir: string): Promise<string> {\n     const rustcPath = await getPathForExecutable(\"rustc\");\n@@ -147,6 +236,16 @@ export async function getRustcId(dir: string): Promise<string> {\n     return rx.exec(data)![1];\n }\n \n+export async function getRustcVersion(dir: string): Promise<string> {\n+    const rustcPath = await getPathForExecutable(\"rustc\");\n+\n+    // do not memoize the result because the toolchain may change between runs\n+    const data = await execute(`${rustcPath} -V`, { cwd: dir });\n+    const rx = /(\\d\\.\\d+\\.\\d+)/;\n+\n+    return rx.exec(data)![1];\n+}\n+\n /** Mirrors `toolchain::cargo()` implementation */\n export function cargoPath(): Promise<string> {\n     return getPathForExecutable(\"cargo\");"}]}