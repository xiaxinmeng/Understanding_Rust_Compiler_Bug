{"sha": "0df84ae67c01d44c3d6c0887333bafca1ea7f060", "node_id": "C_kwDOAAsO6NoAKDBkZjg0YWU2N2MwMWQ0NGMzZDZjMDg4NzMzM2JhZmNhMWVhN2YwNjA", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-08-07T20:02:02Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-08-10T16:33:06Z"}, "message": "Ban indirect references to `Self` too.", "tree": {"sha": "7057fd2da93ed2ee256a66eef08f95e73ceda61b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7057fd2da93ed2ee256a66eef08f95e73ceda61b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0df84ae67c01d44c3d6c0887333bafca1ea7f060", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0df84ae67c01d44c3d6c0887333bafca1ea7f060", "html_url": "https://github.com/rust-lang/rust/commit/0df84ae67c01d44c3d6c0887333bafca1ea7f060", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0df84ae67c01d44c3d6c0887333bafca1ea7f060/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1e25a845c2d190afad0c98029cbe368f5bad427", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1e25a845c2d190afad0c98029cbe368f5bad427", "html_url": "https://github.com/rust-lang/rust/commit/e1e25a845c2d190afad0c98029cbe368f5bad427"}], "stats": {"total": 57, "additions": 50, "deletions": 7}, "files": [{"sha": "9ec3002e3aaf1c8ea04f199793d1af0cadafeb38", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 31, "deletions": 7, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0df84ae67c01d44c3d6c0887333bafca1ea7f060/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0df84ae67c01d44c3d6c0887333bafca1ea7f060/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=0df84ae67c01d44c3d6c0887333bafca1ea7f060", "patch": "@@ -43,7 +43,7 @@ use rustc_trait_selection::traits::error_reporting::{\n };\n use rustc_trait_selection::traits::wf::object_region_bounds;\n \n-use smallvec::SmallVec;\n+use smallvec::{smallvec, SmallVec};\n use std::collections::BTreeSet;\n use std::slice;\n \n@@ -1444,19 +1444,26 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 // Verify that `dummy_self` did not leak inside default type parameters.  This\n                 // could not be done at path creation, since we need to see through trait aliases.\n                 let mut missing_type_params = vec![];\n+                let mut references_self = false;\n                 let generics = tcx.generics_of(trait_ref.def_id);\n                 let substs: Vec<_> = trait_ref\n                     .substs\n                     .iter()\n                     .enumerate()\n                     .skip(1) // Remove `Self` for `ExistentialPredicate`.\n                     .map(|(index, arg)| {\n-                        if let ty::GenericArgKind::Type(ty) = arg.unpack()\n-                            && ty == dummy_self\n-                        {\n-                            let param = &generics.params[index];\n-                            missing_type_params.push(param.name);\n-                            tcx.ty_error().into()\n+                        if let ty::GenericArgKind::Type(ty) = arg.unpack() {\n+                            debug!(?ty);\n+                            if ty == dummy_self {\n+                                let param = &generics.params[index];\n+                                missing_type_params.push(param.name);\n+                                tcx.ty_error().into()\n+                            } else if ty.walk().any(|arg| arg == dummy_self.into()) {\n+                                references_self = true;\n+                                tcx.ty_error().into()\n+                            } else {\n+                                arg\n+                            }\n                         } else {\n                             arg\n                         }\n@@ -1476,6 +1483,23 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     empty_generic_args,\n                 );\n \n+                if references_self {\n+                    let def_id = i.bottom().0.def_id();\n+                    let mut err = struct_span_err!(\n+                        tcx.sess,\n+                        i.bottom().1,\n+                        E0038,\n+                        \"the {} `{}` cannot be made into an object\",\n+                        tcx.def_kind(def_id).descr(def_id),\n+                        tcx.item_name(def_id),\n+                    );\n+                    err.note(\n+                        rustc_middle::traits::ObjectSafetyViolation::SupertraitSelf(smallvec![])\n+                            .error_msg(),\n+                    );\n+                    err.emit();\n+                }\n+\n                 ty::ExistentialTraitRef { def_id: trait_ref.def_id, substs }\n             })\n         });"}, {"sha": "6b99431f5bbcfe1fae131936ab8f8fd7c15e358c", "filename": "src/test/ui/traits/alias/self-in-generics.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0df84ae67c01d44c3d6c0887333bafca1ea7f060/src%2Ftest%2Fui%2Ftraits%2Falias%2Fself-in-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0df84ae67c01d44c3d6c0887333bafca1ea7f060/src%2Ftest%2Fui%2Ftraits%2Falias%2Fself-in-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fself-in-generics.rs?ref=0df84ae67c01d44c3d6c0887333bafca1ea7f060", "patch": "@@ -0,0 +1,8 @@\n+#![feature(trait_alias)]\n+\n+pub trait SelfInput = Fn(&mut Self);\n+\n+pub fn f(_f: &dyn SelfInput) {}\n+//~^ ERROR the trait alias `SelfInput` cannot be made into an object [E0038]\n+\n+fn main() {}"}, {"sha": "a1056872ea641b9a56fceda37d5180e062973710", "filename": "src/test/ui/traits/alias/self-in-generics.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0df84ae67c01d44c3d6c0887333bafca1ea7f060/src%2Ftest%2Fui%2Ftraits%2Falias%2Fself-in-generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0df84ae67c01d44c3d6c0887333bafca1ea7f060/src%2Ftest%2Fui%2Ftraits%2Falias%2Fself-in-generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fself-in-generics.stderr?ref=0df84ae67c01d44c3d6c0887333bafca1ea7f060", "patch": "@@ -0,0 +1,11 @@\n+error[E0038]: the trait alias `SelfInput` cannot be made into an object\n+  --> $DIR/self-in-generics.rs:5:19\n+   |\n+LL | pub fn f(_f: &dyn SelfInput) {}\n+   |                   ^^^^^^^^^\n+   |\n+   = note: it cannot use `Self` as a type parameter in a supertrait or `where`-clause\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0038`."}]}