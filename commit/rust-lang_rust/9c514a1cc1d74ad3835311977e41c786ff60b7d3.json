{"sha": "9c514a1cc1d74ad3835311977e41c786ff60b7d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljNTE0YTFjYzFkNzRhZDM4MzUzMTE5NzdlNDFjNzg2ZmY2MGI3ZDM=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-10-19T19:35:32Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-10-24T00:45:12Z"}, "message": "Refactor away `CrateLoader::load_macros`.", "tree": {"sha": "7ff633ace7cb4ccb50d84afe758d2feb2af9618f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ff633ace7cb4ccb50d84afe758d2feb2af9618f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c514a1cc1d74ad3835311977e41c786ff60b7d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c514a1cc1d74ad3835311977e41c786ff60b7d3", "html_url": "https://github.com/rust-lang/rust/commit/9c514a1cc1d74ad3835311977e41c786ff60b7d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c514a1cc1d74ad3835311977e41c786ff60b7d3/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4968600740b7ca71f4c5d0b0badc1082202f199c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4968600740b7ca71f4c5d0b0badc1082202f199c", "html_url": "https://github.com/rust-lang/rust/commit/4968600740b7ca71f4c5d0b0badc1082202f199c"}], "stats": {"total": 56, "additions": 23, "deletions": 33}, "files": [{"sha": "13abdaf109a9dfeb6762978a90e1e0170803cd67", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c514a1cc1d74ad3835311977e41c786ff60b7d3/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c514a1cc1d74ad3835311977e41c786ff60b7d3/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=9c514a1cc1d74ad3835311977e41c786ff60b7d3", "patch": "@@ -423,7 +423,7 @@ pub enum LoadedMacros {\n }\n \n pub trait CrateLoader {\n-    fn load_macros(&mut self, extern_crate: &ast::Item) -> LoadedMacros;\n-    fn process_item(&mut self, item: &ast::Item, defs: &Definitions);\n+    fn process_item(&mut self, item: &ast::Item, defs: &Definitions, load_macros: bool)\n+                    -> Option<LoadedMacros>;\n     fn postprocess(&mut self, krate: &ast::Crate);\n }"}, {"sha": "6f739efdc92732ee5bde723076f2af5cf3a00488", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9c514a1cc1d74ad3835311977e41c786ff60b7d3/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c514a1cc1d74ad3835311977e41c786ff60b7d3/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=9c514a1cc1d74ad3835311977e41c786ff60b7d3", "patch": "@@ -23,7 +23,7 @@ use rustc::session::search_paths::PathKind;\n use rustc::middle;\n use rustc::middle::cstore::{CrateStore, validate_crate_name, ExternCrate};\n use rustc::util::nodemap::{FnvHashMap, FnvHashSet};\n-use rustc::hir::map as hir_map;\n+use rustc::hir::map::Definitions;\n \n use std::cell::{RefCell, Cell};\n use std::ops::Deref;\n@@ -631,8 +631,6 @@ impl<'a> CrateLoader<'a> {\n         use rustc_back::dynamic_lib::DynamicLibrary;\n         use syntax_ext::deriving::custom::CustomDerive;\n \n-        self.cstore.add_used_for_derive_macros(item);\n-\n         // Make sure the path contains a / or the linker will search for it.\n         let path = env::current_dir().unwrap().join(path);\n         let lib = match DynamicLibrary::open(Some(&path)) {\n@@ -1020,29 +1018,33 @@ impl<'a> middle::cstore::CrateLoader for CrateLoader<'a> {\n         self.register_statically_included_foreign_items();\n     }\n \n-    fn process_item(&mut self, item: &ast::Item, definitions: &hir_map::Definitions) {\n+    fn process_item(&mut self, item: &ast::Item, definitions: &Definitions, load_macros: bool)\n+                    -> Option<LoadedMacros> {\n         match item.node {\n             ast::ItemKind::ExternCrate(_) => {}\n-            ast::ItemKind::ForeignMod(ref fm) => return self.process_foreign_mod(item, fm),\n-            _ => return,\n+            ast::ItemKind::ForeignMod(ref fm) => {\n+                self.process_foreign_mod(item, fm);\n+                return None;\n+            }\n+            _ => return None,\n         }\n \n+        let loaded_macros = if load_macros { Some(self.read_macros(item)) } else { None };\n+\n         // If this `extern crate` item has `#[macro_use]` then we can safely skip it.\n         // These annotations were processed during macro expansion and are already loaded\n         // (if necessary) into our crate store.\n         //\n         // Note that it's important we *don't* fall through below as some `#[macro_use]`\n         // crates are explicitly not linked (e.g. macro crates) so we want to ensure\n         // we avoid `resolve_crate` with those.\n-        if attr::contains_name(&item.attrs, \"macro_use\") {\n-            if self.cstore.was_used_for_derive_macros(item) {\n-                return\n-            }\n+        if let Some(LoadedMacros::CustomDerives(..)) = loaded_macros {\n+            return loaded_macros;\n         }\n \n         if let Some(info) = self.extract_crate_info(item) {\n             if !info.should_link {\n-                return;\n+                return loaded_macros;\n             }\n \n             let (cnum, ..) = self.resolve_crate(\n@@ -1058,9 +1060,7 @@ impl<'a> middle::cstore::CrateLoader for CrateLoader<'a> {\n \n             self.cstore.add_extern_mod_stmt_cnum(info.id, cnum);\n         }\n-    }\n \n-    fn load_macros(&mut self, extern_crate: &ast::Item) -> LoadedMacros {\n-        self.read_macros(extern_crate)\n+        loaded_macros\n     }\n }"}, {"sha": "781ebf81d59df865c8d53d9bc03f563246be9b08", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9c514a1cc1d74ad3835311977e41c786ff60b7d3/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c514a1cc1d74ad3835311977e41c786ff60b7d3/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=9c514a1cc1d74ad3835311977e41c786ff60b7d3", "patch": "@@ -21,14 +21,13 @@ use rustc::hir::svh::Svh;\n use rustc::middle::cstore::ExternCrate;\n use rustc_back::PanicStrategy;\n use rustc_data_structures::indexed_vec::IndexVec;\n-use rustc::util::nodemap::{FnvHashMap, NodeMap, NodeSet, DefIdMap, FnvHashSet};\n+use rustc::util::nodemap::{FnvHashMap, NodeMap, NodeSet, DefIdMap};\n \n use std::cell::{RefCell, Cell};\n use std::rc::Rc;\n use std::path::PathBuf;\n use flate::Bytes;\n-use syntax::ast::{self, Ident};\n-use syntax::attr;\n+use syntax::{ast, attr};\n use syntax_pos;\n \n pub use rustc::middle::cstore::{NativeLibraryKind, LinkagePreference};\n@@ -105,7 +104,6 @@ pub struct CStore {\n     pub inlined_item_cache: RefCell<DefIdMap<Option<CachedInlinedItem>>>,\n     pub defid_for_inlined_node: RefCell<NodeMap<DefId>>,\n     pub visible_parent_map: RefCell<DefIdMap<DefId>>,\n-    pub used_for_derive_macro: RefCell<FnvHashSet<Ident>>,\n }\n \n impl CStore {\n@@ -121,7 +119,6 @@ impl CStore {\n             visible_parent_map: RefCell::new(FnvHashMap()),\n             inlined_item_cache: RefCell::new(FnvHashMap()),\n             defid_for_inlined_node: RefCell::new(FnvHashMap()),\n-            used_for_derive_macro: RefCell::new(FnvHashSet()),\n         }\n     }\n \n@@ -277,14 +274,6 @@ impl CStore {\n     {\n         self.extern_mod_crate_map.borrow().get(&emod_id).cloned()\n     }\n-\n-    pub fn was_used_for_derive_macros(&self, i: &ast::Item) -> bool {\n-        self.used_for_derive_macro.borrow().contains(&i.ident)\n-    }\n-\n-    pub fn add_used_for_derive_macros(&self, i: &ast::Item) {\n-        self.used_for_derive_macro.borrow_mut().insert(i.ident);\n-    }\n }\n \n impl CrateMetadata {"}, {"sha": "db86840fd381cf120069e2ef7fbeb5e41a4e3b1e", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9c514a1cc1d74ad3835311977e41c786ff60b7d3/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c514a1cc1d74ad3835311977e41c786ff60b7d3/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=9c514a1cc1d74ad3835311977e41c786ff60b7d3", "patch": "@@ -215,12 +215,11 @@ impl<'b> Resolver<'b> {\n                 }\n \n                 let loaded_macros = if legacy_imports != LegacyMacroImports::default() {\n-                    Some(self.crate_loader.load_macros(item))\n+                    self.crate_loader.process_item(item, &self.definitions, true)\n                 } else {\n-                    None\n+                    self.crate_loader.process_item(item, &self.definitions, false)\n                 };\n \n-                self.crate_loader.process_item(item, &self.definitions);\n                 // n.b. we don't need to look at the path option here, because cstore already did\n                 let crate_id = self.session.cstore.extern_mod_stmt_cnum(item.id);\n                 let module = if let Some(crate_id) = crate_id {\n@@ -270,7 +269,9 @@ impl<'b> Resolver<'b> {\n                 self.current_module = module;\n             }\n \n-            ItemKind::ForeignMod(..) => self.crate_loader.process_item(item, &self.definitions),\n+            ItemKind::ForeignMod(..) => {\n+                self.crate_loader.process_item(item, &self.definitions, false);\n+            }\n \n             // These items live in the value namespace.\n             ItemKind::Static(_, m, _) => {"}]}