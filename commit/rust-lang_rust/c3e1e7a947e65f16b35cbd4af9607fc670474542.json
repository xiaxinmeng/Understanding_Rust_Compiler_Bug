{"sha": "c3e1e7a947e65f16b35cbd4af9607fc670474542", "node_id": "C_kwDOAAsO6NoAKGMzZTFlN2E5NDdlNjVmMTZiMzVjYmQ0YWY5NjA3ZmM2NzA0NzQ1NDI", "commit": {"author": {"name": "ouz-a", "email": "oguz.agcayazi@gmail.com", "date": "2022-05-16T13:23:42Z"}, "committer": {"name": "ouz-a", "email": "oguz.agcayazi@gmail.com", "date": "2022-07-22T14:35:26Z"}, "message": "simplify more, ret_deref -> has_deref", "tree": {"sha": "c8b82fcfca4c8a03ac8e9eb320df6c41b0c485df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8b82fcfca4c8a03ac8e9eb320df6c41b0c485df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3e1e7a947e65f16b35cbd4af9607fc670474542", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3e1e7a947e65f16b35cbd4af9607fc670474542", "html_url": "https://github.com/rust-lang/rust/commit/c3e1e7a947e65f16b35cbd4af9607fc670474542", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3e1e7a947e65f16b35cbd4af9607fc670474542/comments", "author": {"login": "ouz-a", "id": 90461915, "node_id": "MDQ6VXNlcjkwNDYxOTE1", "avatar_url": "https://avatars.githubusercontent.com/u/90461915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ouz-a", "html_url": "https://github.com/ouz-a", "followers_url": "https://api.github.com/users/ouz-a/followers", "following_url": "https://api.github.com/users/ouz-a/following{/other_user}", "gists_url": "https://api.github.com/users/ouz-a/gists{/gist_id}", "starred_url": "https://api.github.com/users/ouz-a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ouz-a/subscriptions", "organizations_url": "https://api.github.com/users/ouz-a/orgs", "repos_url": "https://api.github.com/users/ouz-a/repos", "events_url": "https://api.github.com/users/ouz-a/events{/privacy}", "received_events_url": "https://api.github.com/users/ouz-a/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ouz-a", "id": 90461915, "node_id": "MDQ6VXNlcjkwNDYxOTE1", "avatar_url": "https://avatars.githubusercontent.com/u/90461915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ouz-a", "html_url": "https://github.com/ouz-a", "followers_url": "https://api.github.com/users/ouz-a/followers", "following_url": "https://api.github.com/users/ouz-a/following{/other_user}", "gists_url": "https://api.github.com/users/ouz-a/gists{/gist_id}", "starred_url": "https://api.github.com/users/ouz-a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ouz-a/subscriptions", "organizations_url": "https://api.github.com/users/ouz-a/orgs", "repos_url": "https://api.github.com/users/ouz-a/repos", "events_url": "https://api.github.com/users/ouz-a/events{/privacy}", "received_events_url": "https://api.github.com/users/ouz-a/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0e4230bf5596d83d61c7a4ca5b06f0490ac4dba", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0e4230bf5596d83d61c7a4ca5b06f0490ac4dba", "html_url": "https://github.com/rust-lang/rust/commit/c0e4230bf5596d83d61c7a4ca5b06f0490ac4dba"}], "stats": {"total": 20, "additions": 9, "deletions": 11}, "files": [{"sha": "268c4d765030568f074d975153a2bd6fa30a8f1b", "filename": "compiler/rustc_codegen_ssa/src/mir/place.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c3e1e7a947e65f16b35cbd4af9607fc670474542/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3e1e7a947e65f16b35cbd4af9607fc670474542/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs?ref=c3e1e7a947e65f16b35cbd4af9607fc670474542", "patch": "@@ -435,13 +435,12 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             LocalRef::Place(place) => place,\n             LocalRef::UnsizedPlace(place) => bx.load_operand(place).deref(cx),\n             LocalRef::Operand(..) => {\n-                if place_ref.ret_deref().is_some() {\n+                if place_ref.has_deref() {\n                     base = 1;\n                     let cg_base = self.codegen_consume(\n                         bx,\n                         mir::PlaceRef { projection: &place_ref.projection[..0], ..place_ref },\n                     );\n-\n                     cg_base.deref(bx.cx())\n                 } else {\n                     bug!(\"using operand local {:?} as place\", place_ref);"}, {"sha": "e2084a12cbe6b283020664aff5449db7a3d652f2", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c3e1e7a947e65f16b35cbd4af9607fc670474542/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3e1e7a947e65f16b35cbd4af9607fc670474542/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=c3e1e7a947e65f16b35cbd4af9607fc670474542", "patch": "@@ -1463,11 +1463,11 @@ impl<'tcx> Place<'tcx> {\n \n     /// If MirPhase >= Derefered and if projection contains Deref,\n     /// It's guaranteed to be in the first place\n-    pub fn ret_deref(&self) -> Option<PlaceElem<'tcx>> {\n+    pub fn has_deref(&self) -> bool {\n         if !self.projection.is_empty() && self.projection[0] == PlaceElem::Deref {\n-            return Some(self.projection[0]);\n+            true\n         } else {\n-            None\n+            false\n         }\n     }\n \n@@ -1545,11 +1545,11 @@ impl<'tcx> PlaceRef<'tcx> {\n \n     /// If MirPhase >= Derefered and if projection contains Deref,\n     /// It's guaranteed to be in the first place\n-    pub fn ret_deref(&self) -> Option<PlaceElem<'tcx>> {\n+    pub fn has_deref(&self) -> bool {\n         if !self.projection.is_empty() && self.projection[0] == PlaceElem::Deref {\n-            return Some(self.projection[0]);\n+            true\n         } else {\n-            None\n+            false\n         }\n     }\n "}, {"sha": "c91b3044c4fdfd72e506d1a5cf7e7dd3a049b4be", "filename": "compiler/rustc_mir_transform/src/add_retag.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c3e1e7a947e65f16b35cbd4af9607fc670474542/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3e1e7a947e65f16b35cbd4af9607fc670474542/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_retag.rs?ref=c3e1e7a947e65f16b35cbd4af9607fc670474542", "patch": "@@ -15,7 +15,7 @@ pub struct AddRetag;\n /// (Concurrent accesses by other threads are no problem as these are anyway non-atomic\n /// copies.  Data races are UB.)\n fn is_stable(place: PlaceRef<'_>) -> bool {\n-    if place.ret_deref().is_some() {\n+    if place.has_deref() {\n         // Which place this evaluates to can change with any memory write,\n         // so cannot assume deref to be stable.\n         return false;\n@@ -83,8 +83,7 @@ impl<'tcx> MirPass<'tcx> for AddRetag {\n         let place_base_raw = |place: &Place<'tcx>| {\n             // If this is a `Deref`, get the type of what we are deref'ing.\n             if place.ret_deref().is_some() {\n-                let base_proj = &place.projection[..0];\n-                let ty = Place::ty_from(place.local, base_proj, &*local_decls, tcx).ty;\n+                let ty = place.ty(local_decls, tcx).ty;\n                 ty.is_unsafe_ptr()\n             } else {\n                 // Not a deref, and thus not raw."}]}