{"sha": "7f8530f16b8cc908cb77970967addf39ae1a975d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmODUzMGYxNmI4Y2M5MDhjYjc3OTcwOTY3YWRkZjM5YWUxYTk3NWQ=", "commit": {"author": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2021-02-01T20:05:43Z"}, "committer": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2021-02-01T20:05:50Z"}, "message": "more things are const evaluatable *sparkles*", "tree": {"sha": "8d1794b58d4356023bdc8419a827cf07210c0bce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d1794b58d4356023bdc8419a827cf07210c0bce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f8530f16b8cc908cb77970967addf39ae1a975d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f8530f16b8cc908cb77970967addf39ae1a975d", "html_url": "https://github.com/rust-lang/rust/commit/7f8530f16b8cc908cb77970967addf39ae1a975d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f8530f16b8cc908cb77970967addf39ae1a975d/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02b85d722050d61b40ae9746b3bac54ab55b1056", "url": "https://api.github.com/repos/rust-lang/rust/commits/02b85d722050d61b40ae9746b3bac54ab55b1056", "html_url": "https://github.com/rust-lang/rust/commit/02b85d722050d61b40ae9746b3bac54ab55b1056"}], "stats": {"total": 55, "additions": 42, "deletions": 13}, "files": [{"sha": "631dcb60594f1823aa925a6ae532aad5960b0c62", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f8530f16b8cc908cb77970967addf39ae1a975d/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f8530f16b8cc908cb77970967addf39ae1a975d/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=7f8530f16b8cc908cb77970967addf39ae1a975d", "patch": "@@ -132,7 +132,7 @@ where\n         tcx: TyCtxt<'tcx>,\n         ct: AbstractConst<'tcx>,\n     ) -> ControlFlow<V::BreakTy> {\n-        const_evaluatable::walk_abstract_const(tcx, ct, |node| match node {\n+        const_evaluatable::walk_abstract_const(tcx, ct, |node| match node.root() {\n             ACNode::Leaf(leaf) => {\n                 let leaf = leaf.subst(tcx, ct.substs);\n                 self.visit_const(leaf)"}, {"sha": "3facdd5f84c29112a2a768259ddebfefd6752627", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/7f8530f16b8cc908cb77970967addf39ae1a975d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f8530f16b8cc908cb77970967addf39ae1a975d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=7f8530f16b8cc908cb77970967addf39ae1a975d", "patch": "@@ -50,11 +50,24 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n                             if b_def == def && b_substs == substs {\n                                 debug!(\"is_const_evaluatable: caller_bound ~~> ok\");\n                                 return Ok(());\n-                            } else if AbstractConst::new(tcx, b_def, b_substs)?\n-                                .map_or(false, |b_ct| try_unify(tcx, ct, b_ct))\n-                            {\n-                                debug!(\"is_const_evaluatable: abstract_const ~~> ok\");\n-                                return Ok(());\n+                            }\n+\n+                            if let Some(b_ct) = AbstractConst::new(tcx, b_def, b_substs)? {\n+                                // Try to unify with each subtree in the AbstractConst to allow for\n+                                // `N + 1` being const evaluatable even if theres only a `ConstEvaluatable`\n+                                // predicate for `(N + 1) * 2`\n+                                let result =\n+                                    walk_abstract_const(tcx, b_ct, |b_ct| {\n+                                        match try_unify(tcx, ct, b_ct) {\n+                                            true => ControlFlow::BREAK,\n+                                            false => ControlFlow::CONTINUE,\n+                                        }\n+                                    });\n+\n+                                if let ControlFlow::Break(()) = result {\n+                                    debug!(\"is_const_evaluatable: abstract_const ~~> ok\");\n+                                    return Ok(());\n+                                }\n                             }\n                         }\n                         _ => {} // don't care\n@@ -78,7 +91,7 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n                     Concrete,\n                 }\n                 let mut failure_kind = FailureKind::Concrete;\n-                walk_abstract_const::<!, _>(tcx, ct, |node| match node {\n+                walk_abstract_const::<!, _>(tcx, ct, |node| match node.root() {\n                     Node::Leaf(leaf) => {\n                         let leaf = leaf.subst(tcx, ct.substs);\n                         if leaf.has_infer_types_or_consts() {\n@@ -580,15 +593,15 @@ pub fn walk_abstract_const<'tcx, R, F>(\n     mut f: F,\n ) -> ControlFlow<R>\n where\n-    F: FnMut(Node<'tcx>) -> ControlFlow<R>,\n+    F: FnMut(AbstractConst<'tcx>) -> ControlFlow<R>,\n {\n     fn recurse<'tcx, R>(\n         tcx: TyCtxt<'tcx>,\n         ct: AbstractConst<'tcx>,\n-        f: &mut dyn FnMut(Node<'tcx>) -> ControlFlow<R>,\n+        f: &mut dyn FnMut(AbstractConst<'tcx>) -> ControlFlow<R>,\n     ) -> ControlFlow<R> {\n+        f(ct)?;\n         let root = ct.root();\n-        f(root)?;\n         match root {\n             Node::Leaf(_) => ControlFlow::CONTINUE,\n             Node::Binop(_, l, r) => {"}, {"sha": "3852005ee3f35f0c79a05e1c3b1300def69eab50", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f8530f16b8cc908cb77970967addf39ae1a975d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f8530f16b8cc908cb77970967addf39ae1a975d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=7f8530f16b8cc908cb77970967addf39ae1a975d", "patch": "@@ -828,7 +828,7 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeFoldable<'tcx>>(\n             // constants which are not considered const evaluatable.\n             use rustc_middle::mir::abstract_const::Node;\n             if let Ok(Some(ct)) = AbstractConst::from_const(self.tcx, ct) {\n-                const_evaluatable::walk_abstract_const(self.tcx, ct, |node| match node {\n+                const_evaluatable::walk_abstract_const(self.tcx, ct, |node| match node.root() {\n                     Node::Leaf(leaf) => {\n                         let leaf = leaf.subst(self.tcx, ct.substs);\n                         self.visit_const(leaf)\n@@ -849,7 +849,7 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeFoldable<'tcx>>(\n                 // take a `ty::Const` instead.\n                 use rustc_middle::mir::abstract_const::Node;\n                 if let Ok(Some(ct)) = AbstractConst::new(self.tcx, def, substs) {\n-                    const_evaluatable::walk_abstract_const(self.tcx, ct, |node| match node {\n+                    const_evaluatable::walk_abstract_const(self.tcx, ct, |node| match node.root() {\n                         Node::Leaf(leaf) => {\n                             let leaf = leaf.subst(self.tcx, ct.substs);\n                             self.visit_const(leaf)"}, {"sha": "4d0b87efc77c3549428b09087bbd428a5fb01dd8", "filename": "src/test/ui/const-generics/const_evaluatable_checked/nested_uneval_unification-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7f8530f16b8cc908cb77970967addf39ae1a975d/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fnested_uneval_unification-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f8530f16b8cc908cb77970967addf39ae1a975d/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fnested_uneval_unification-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fnested_uneval_unification-1.rs?ref=7f8530f16b8cc908cb77970967addf39ae1a975d", "patch": "@@ -21,7 +21,6 @@ where\n \n fn substs3<const L: usize>() -> Substs1<{ (L - 1) * 2 }>\n where\n-    [(); (L - 1)]: ,\n     [(); (L - 1) * 2 + 1]: ,\n {\n     substs2::<{ L - 1 }>()"}, {"sha": "11c0760cdfe055765ea382b41ba03aad4ad25903", "filename": "src/test/ui/const-generics/const_evaluatable_checked/subexprs_are_const_evalutable.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7f8530f16b8cc908cb77970967addf39ae1a975d/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsubexprs_are_const_evalutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f8530f16b8cc908cb77970967addf39ae1a975d/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsubexprs_are_const_evalutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsubexprs_are_const_evalutable.rs?ref=7f8530f16b8cc908cb77970967addf39ae1a975d", "patch": "@@ -0,0 +1,17 @@\n+// run-pass\n+#![feature(const_generics, const_evaluatable_checked)]\n+#![allow(incomplete_features)]\n+\n+fn make_array<const M: usize>() -> [(); M + 1] {\n+    [(); M + 1]\n+}\n+\n+fn foo<const N: usize>() -> [(); (N * 2) + 1] {\n+    make_array::<{ N * 2 }>()\n+}\n+\n+fn main() {\n+    assert_eq!(foo::<10>(), [(); 10 * 2 + 1])\n+}\n+\n+// Tests that N * 2 is considered const_evalutable by appearing as part of the (N * 2) + 1 const"}]}