{"sha": "b06856eae0fade6e2eaaaad7ab289069ddb6f037", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwNjg1NmVhZTBmYWRlNmUyZWFhYWFkN2FiMjg5MDY5ZGRiNmYwMzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-24T23:29:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-24T23:29:49Z"}, "message": "Auto merge of #6187 - geoffreycopin:master, r=ebroto\n\nLint unnecessary int-to-int and float-to-float casts\n\nThis is an implementation of a lint that detects unnecessary casts of number literals, as discussed here:\nhttps://github.com/rust-lang/rust-clippy/issues/6116\n\n---\n\nchangelog: lint unnecessary as-casts of literals when they could be written using literal syntax.", "tree": {"sha": "88706afbb777ad0b408c3d11b6779239f842607e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88706afbb777ad0b408c3d11b6779239f842607e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b06856eae0fade6e2eaaaad7ab289069ddb6f037", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b06856eae0fade6e2eaaaad7ab289069ddb6f037", "html_url": "https://github.com/rust-lang/rust/commit/b06856eae0fade6e2eaaaad7ab289069ddb6f037", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b06856eae0fade6e2eaaaad7ab289069ddb6f037/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29979ad0439dff3a9e8e3e74fda6c4f300f69df8", "url": "https://api.github.com/repos/rust-lang/rust/commits/29979ad0439dff3a9e8e3e74fda6c4f300f69df8", "html_url": "https://github.com/rust-lang/rust/commit/29979ad0439dff3a9e8e3e74fda6c4f300f69df8"}, {"sha": "71ac0c0be81019eb81b55eb75ae6318b3d0482ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/71ac0c0be81019eb81b55eb75ae6318b3d0482ea", "html_url": "https://github.com/rust-lang/rust/commit/71ac0c0be81019eb81b55eb75ae6318b3d0482ea"}], "stats": {"total": 235, "additions": 190, "deletions": 45}, "files": [{"sha": "6a33aaaaab204f660f1cda1aae0f158599561ec5", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 54, "deletions": 12, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/b06856eae0fade6e2eaaaad7ab289069ddb6f037/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b06856eae0fade6e2eaaaad7ab289069ddb6f037/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=b06856eae0fade6e2eaaaad7ab289069ddb6f037", "patch": "@@ -11,7 +11,7 @@ use rustc_hir as hir;\n use rustc_hir::intravisit::{walk_body, walk_expr, walk_ty, FnKind, NestedVisitorMap, Visitor};\n use rustc_hir::{\n     BinOpKind, Block, Body, Expr, ExprKind, FnDecl, FnRetTy, FnSig, GenericArg, GenericParamKind, HirId, ImplItem,\n-    ImplItemKind, Item, ItemKind, Lifetime, Local, MatchSource, MutTy, Mutability, Node, QPath, Stmt, StmtKind,\n+    ImplItemKind, Item, ItemKind, Lifetime, Lit, Local, MatchSource, MutTy, Mutability, Node, QPath, Stmt, StmtKind,\n     TraitFn, TraitItem, TraitItemKind, TyKind, UnOp,\n };\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n@@ -1224,7 +1224,8 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for casts to the same type.\n+    /// **What it does:** Checks for casts to the same type, casts of int literals to integer types\n+    /// and casts of float literals to float types.\n     ///\n     /// **Why is this bad?** It's just unnecessary.\n     ///\n@@ -1233,6 +1234,14 @@ declare_clippy_lint! {\n     /// **Example:**\n     /// ```rust\n     /// let _ = 2i32 as i32;\n+    /// let _ = 0.5 as f32;\n+    /// ```\n+    ///\n+    /// Better:\n+    ///\n+    /// ```rust\n+    /// let _ = 2_i32;\n+    /// let _ = 0.5_f32;\n     /// ```\n     pub UNNECESSARY_CAST,\n     complexity,\n@@ -1598,7 +1607,9 @@ impl<'tcx> LateLintPass<'tcx> for Casts {\n         if let ExprKind::Cast(ref ex, _) = expr.kind {\n             let (cast_from, cast_to) = (cx.typeck_results().expr_ty(ex), cx.typeck_results().expr_ty(expr));\n             lint_fn_to_numeric_cast(cx, expr, ex, cast_from, cast_to);\n-            if let ExprKind::Lit(ref lit) = ex.kind {\n+            if let Some(lit) = get_numeric_literal(ex) {\n+                let literal_str = snippet_opt(cx, ex.span).unwrap_or_default();\n+\n                 if_chain! {\n                     if let LitKind::Int(n, _) = lit.node;\n                     if let Some(src) = snippet_opt(cx, lit.span);\n@@ -1608,19 +1619,19 @@ impl<'tcx> LateLintPass<'tcx> for Casts {\n                     let to_nbits = fp_ty_mantissa_nbits(cast_to);\n                     if from_nbits != 0 && to_nbits != 0 && from_nbits <= to_nbits && num_lit.is_decimal();\n                     then {\n-                        span_lint_and_sugg(\n-                            cx,\n-                            UNNECESSARY_CAST,\n-                            expr.span,\n-                            &format!(\"casting integer literal to `{}` is unnecessary\", cast_to),\n-                            \"try\",\n-                            format!(\"{}_{}\", n, cast_to),\n-                            Applicability::MachineApplicable,\n-                        );\n+                        let literal_str = if is_unary_neg(ex) { format!(\"-{}\", num_lit.integer) } else { num_lit.integer.into() };\n+                        show_unnecessary_cast(cx, expr, &literal_str, cast_from, cast_to);\n                         return;\n                     }\n                 }\n+\n                 match lit.node {\n+                    LitKind::Int(_, LitIntType::Unsuffixed) if cast_to.is_integral() => {\n+                        show_unnecessary_cast(cx, expr, &literal_str, cast_from, cast_to);\n+                    },\n+                    LitKind::Float(_, LitFloatType::Unsuffixed) if cast_to.is_floating_point() => {\n+                        show_unnecessary_cast(cx, expr, &literal_str, cast_from, cast_to);\n+                    },\n                     LitKind::Int(_, LitIntType::Unsuffixed) | LitKind::Float(_, LitFloatType::Unsuffixed) => {},\n                     _ => {\n                         if cast_from.kind() == cast_to.kind() && !in_external_macro(cx.sess(), expr.span) {\n@@ -1646,6 +1657,37 @@ impl<'tcx> LateLintPass<'tcx> for Casts {\n     }\n }\n \n+fn is_unary_neg(expr: &Expr<'_>) -> bool {\n+    matches!(expr.kind, ExprKind::Unary(UnOp::UnNeg, _))\n+}\n+\n+fn get_numeric_literal<'e>(expr: &'e Expr<'e>) -> Option<&'e Lit> {\n+    match expr.kind {\n+        ExprKind::Lit(ref lit) => Some(lit),\n+        ExprKind::Unary(UnOp::UnNeg, e) => {\n+            if let ExprKind::Lit(ref lit) = e.kind {\n+                Some(lit)\n+            } else {\n+                None\n+            }\n+        },\n+        _ => None,\n+    }\n+}\n+\n+fn show_unnecessary_cast(cx: &LateContext<'_>, expr: &Expr<'_>, literal_str: &str, cast_from: Ty<'_>, cast_to: Ty<'_>) {\n+    let literal_kind_name = if cast_from.is_integral() { \"integer\" } else { \"float\" };\n+    span_lint_and_sugg(\n+        cx,\n+        UNNECESSARY_CAST,\n+        expr.span,\n+        &format!(\"casting {} literal to `{}` is unnecessary\", literal_kind_name, cast_to),\n+        \"try\",\n+        format!(\"{}_{}\", literal_str, cast_to),\n+        Applicability::MachineApplicable,\n+    );\n+}\n+\n fn lint_numeric_casts<'tcx>(\n     cx: &LateContext<'tcx>,\n     expr: &Expr<'tcx>,"}, {"sha": "140676a5ffcfc82ad79dadf0f18d9c7d79390ae7", "filename": "tests/ui/cast_size_32bit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b06856eae0fade6e2eaaaad7ab289069ddb6f037/tests%2Fui%2Fcast_size_32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b06856eae0fade6e2eaaaad7ab289069ddb6f037/tests%2Fui%2Fcast_size_32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_size_32bit.stderr?ref=b06856eae0fade6e2eaaaad7ab289069ddb6f037", "patch": "@@ -124,7 +124,7 @@ error: casting integer literal to `f64` is unnecessary\n   --> $DIR/cast_size_32bit.rs:34:5\n    |\n LL |     3_999_999_999usize as f64;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `3999999999_f64`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `3_999_999_999_f64`\n    |\n    = note: `-D clippy::unnecessary-cast` implied by `-D warnings`\n "}, {"sha": "4e09d19ea214572f70adbeba6142268609c7a2f7", "filename": "tests/ui/eq_op.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b06856eae0fade6e2eaaaad7ab289069ddb6f037/tests%2Fui%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b06856eae0fade6e2eaaaad7ab289069ddb6f037/tests%2Fui%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feq_op.rs?ref=b06856eae0fade6e2eaaaad7ab289069ddb6f037", "patch": "@@ -6,6 +6,7 @@\n #[allow(clippy::no_effect, unused_variables, clippy::unnecessary_operation, clippy::short_circuit_statement)]\n #[allow(clippy::nonminimal_bool)]\n #[allow(unused)]\n+#[allow(clippy::unnecessary_cast)]\n fn main() {\n     // simple values and comparisons\n     1 == 1;"}, {"sha": "ad81b35a766493c9e81e61bca13a8540ef1e6f91", "filename": "tests/ui/eq_op.stderr", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/b06856eae0fade6e2eaaaad7ab289069ddb6f037/tests%2Fui%2Feq_op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b06856eae0fade6e2eaaaad7ab289069ddb6f037/tests%2Fui%2Feq_op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feq_op.stderr?ref=b06856eae0fade6e2eaaaad7ab289069ddb6f037", "patch": "@@ -1,163 +1,163 @@\n error: equal expressions as operands to `==`\n-  --> $DIR/eq_op.rs:11:5\n+  --> $DIR/eq_op.rs:12:5\n    |\n LL |     1 == 1;\n    |     ^^^^^^\n    |\n    = note: `-D clippy::eq-op` implied by `-D warnings`\n \n error: equal expressions as operands to `==`\n-  --> $DIR/eq_op.rs:12:5\n+  --> $DIR/eq_op.rs:13:5\n    |\n LL |     \"no\" == \"no\";\n    |     ^^^^^^^^^^^^\n \n error: equal expressions as operands to `!=`\n-  --> $DIR/eq_op.rs:14:5\n+  --> $DIR/eq_op.rs:15:5\n    |\n LL |     false != false;\n    |     ^^^^^^^^^^^^^^\n \n error: equal expressions as operands to `<`\n-  --> $DIR/eq_op.rs:15:5\n+  --> $DIR/eq_op.rs:16:5\n    |\n LL |     1.5 < 1.5;\n    |     ^^^^^^^^^\n \n error: equal expressions as operands to `>=`\n-  --> $DIR/eq_op.rs:16:5\n+  --> $DIR/eq_op.rs:17:5\n    |\n LL |     1u64 >= 1u64;\n    |     ^^^^^^^^^^^^\n \n error: equal expressions as operands to `&`\n-  --> $DIR/eq_op.rs:19:5\n+  --> $DIR/eq_op.rs:20:5\n    |\n LL |     (1 as u64) & (1 as u64);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: equal expressions as operands to `^`\n-  --> $DIR/eq_op.rs:20:5\n+  --> $DIR/eq_op.rs:21:5\n    |\n LL |     1 ^ ((((((1))))));\n    |     ^^^^^^^^^^^^^^^^^\n \n error: equal expressions as operands to `<`\n-  --> $DIR/eq_op.rs:23:5\n+  --> $DIR/eq_op.rs:24:5\n    |\n LL |     (-(2) < -(2));\n    |     ^^^^^^^^^^^^^\n \n error: equal expressions as operands to `==`\n-  --> $DIR/eq_op.rs:24:5\n+  --> $DIR/eq_op.rs:25:5\n    |\n LL |     ((1 + 1) & (1 + 1) == (1 + 1) & (1 + 1));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: equal expressions as operands to `&`\n-  --> $DIR/eq_op.rs:24:6\n+  --> $DIR/eq_op.rs:25:6\n    |\n LL |     ((1 + 1) & (1 + 1) == (1 + 1) & (1 + 1));\n    |      ^^^^^^^^^^^^^^^^^\n \n error: equal expressions as operands to `&`\n-  --> $DIR/eq_op.rs:24:27\n+  --> $DIR/eq_op.rs:25:27\n    |\n LL |     ((1 + 1) & (1 + 1) == (1 + 1) & (1 + 1));\n    |                           ^^^^^^^^^^^^^^^^^\n \n error: equal expressions as operands to `==`\n-  --> $DIR/eq_op.rs:25:5\n+  --> $DIR/eq_op.rs:26:5\n    |\n LL |     (1 * 2) + (3 * 4) == 1 * 2 + 3 * 4;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: equal expressions as operands to `!=`\n-  --> $DIR/eq_op.rs:28:5\n+  --> $DIR/eq_op.rs:29:5\n    |\n LL |     ([1] != [1]);\n    |     ^^^^^^^^^^^^\n \n error: equal expressions as operands to `!=`\n-  --> $DIR/eq_op.rs:29:5\n+  --> $DIR/eq_op.rs:30:5\n    |\n LL |     ((1, 2) != (1, 2));\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: equal expressions as operands to `==`\n-  --> $DIR/eq_op.rs:33:5\n+  --> $DIR/eq_op.rs:34:5\n    |\n LL |     1 + 1 == 2;\n    |     ^^^^^^^^^^\n \n error: equal expressions as operands to `==`\n-  --> $DIR/eq_op.rs:34:5\n+  --> $DIR/eq_op.rs:35:5\n    |\n LL |     1 - 1 == 0;\n    |     ^^^^^^^^^^\n \n error: equal expressions as operands to `-`\n-  --> $DIR/eq_op.rs:34:5\n+  --> $DIR/eq_op.rs:35:5\n    |\n LL |     1 - 1 == 0;\n    |     ^^^^^\n \n error: equal expressions as operands to `-`\n-  --> $DIR/eq_op.rs:36:5\n+  --> $DIR/eq_op.rs:37:5\n    |\n LL |     1 - 1;\n    |     ^^^^^\n \n error: equal expressions as operands to `/`\n-  --> $DIR/eq_op.rs:37:5\n+  --> $DIR/eq_op.rs:38:5\n    |\n LL |     1 / 1;\n    |     ^^^^^\n \n error: equal expressions as operands to `&&`\n-  --> $DIR/eq_op.rs:38:5\n+  --> $DIR/eq_op.rs:39:5\n    |\n LL |     true && true;\n    |     ^^^^^^^^^^^^\n \n error: equal expressions as operands to `||`\n-  --> $DIR/eq_op.rs:40:5\n+  --> $DIR/eq_op.rs:41:5\n    |\n LL |     true || true;\n    |     ^^^^^^^^^^^^\n \n error: equal expressions as operands to `&&`\n-  --> $DIR/eq_op.rs:46:5\n+  --> $DIR/eq_op.rs:47:5\n    |\n LL |     a == b && b == a;\n    |     ^^^^^^^^^^^^^^^^\n \n error: equal expressions as operands to `&&`\n-  --> $DIR/eq_op.rs:47:5\n+  --> $DIR/eq_op.rs:48:5\n    |\n LL |     a != b && b != a;\n    |     ^^^^^^^^^^^^^^^^\n \n error: equal expressions as operands to `&&`\n-  --> $DIR/eq_op.rs:48:5\n+  --> $DIR/eq_op.rs:49:5\n    |\n LL |     a < b && b > a;\n    |     ^^^^^^^^^^^^^^\n \n error: equal expressions as operands to `&&`\n-  --> $DIR/eq_op.rs:49:5\n+  --> $DIR/eq_op.rs:50:5\n    |\n LL |     a <= b && b >= a;\n    |     ^^^^^^^^^^^^^^^^\n \n error: equal expressions as operands to `==`\n-  --> $DIR/eq_op.rs:52:5\n+  --> $DIR/eq_op.rs:53:5\n    |\n LL |     a == a;\n    |     ^^^^^^\n \n error: equal expressions as operands to `/`\n-  --> $DIR/eq_op.rs:62:20\n+  --> $DIR/eq_op.rs:63:20\n    |\n LL |     const D: u32 = A / A;\n    |                    ^^^^^"}, {"sha": "350da4965d11d9323433b7cf33631f1fd7e3e0a7", "filename": "tests/ui/unnecessary_cast_fixable.fixed", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b06856eae0fade6e2eaaaad7ab289069ddb6f037/tests%2Fui%2Funnecessary_cast_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/b06856eae0fade6e2eaaaad7ab289069ddb6f037/tests%2Fui%2Funnecessary_cast_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_cast_fixable.fixed?ref=b06856eae0fade6e2eaaaad7ab289069ddb6f037", "patch": "@@ -8,16 +8,31 @@ fn main() {\n     100_f32;\n     100_f64;\n     100_f64;\n+    let _ = -100_f32;\n+    let _ = -100_f64;\n+    let _ = -100_f64;\n     // Should not trigger\n     #[rustfmt::skip]\n     let v = vec!(1);\n     &v as &[i32];\n-    1.0 as f64;\n-    1 as u64;\n     0x10 as f32;\n     0o10 as f32;\n     0b10 as f32;\n     0x11 as f64;\n     0o11 as f64;\n     0b11 as f64;\n+\n+    1_u32;\n+    0x10_i32;\n+    0b10_usize;\n+    0o73_u16;\n+    1_000_000_000_u32;\n+\n+    1.0_f64;\n+    0.5_f32;\n+\n+    1.0 as u16;\n+\n+    let _ = -1_i32;\n+    let _ = -1.0_f32;\n }"}, {"sha": "ad2fb2e628921477fad7cf24c73e87a00b681898", "filename": "tests/ui/unnecessary_cast_fixable.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b06856eae0fade6e2eaaaad7ab289069ddb6f037/tests%2Fui%2Funnecessary_cast_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b06856eae0fade6e2eaaaad7ab289069ddb6f037/tests%2Fui%2Funnecessary_cast_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_cast_fixable.rs?ref=b06856eae0fade6e2eaaaad7ab289069ddb6f037", "patch": "@@ -8,16 +8,31 @@ fn main() {\n     100 as f32;\n     100 as f64;\n     100_i32 as f64;\n+    let _ = -100 as f32;\n+    let _ = -100 as f64;\n+    let _ = -100_i32 as f64;\n     // Should not trigger\n     #[rustfmt::skip]\n     let v = vec!(1);\n     &v as &[i32];\n-    1.0 as f64;\n-    1 as u64;\n     0x10 as f32;\n     0o10 as f32;\n     0b10 as f32;\n     0x11 as f64;\n     0o11 as f64;\n     0b11 as f64;\n+\n+    1 as u32;\n+    0x10 as i32;\n+    0b10 as usize;\n+    0o73 as u16;\n+    1_000_000_000 as u32;\n+\n+    1.0 as f64;\n+    0.5 as f32;\n+\n+    1.0 as u16;\n+\n+    let _ = -1 as i32;\n+    let _ = -1.0 as f32;\n }"}, {"sha": "5a210fc89097bcdc7f5c93260b08ae89709849ed", "filename": "tests/ui/unnecessary_cast_fixable.stderr", "status": "modified", "additions": 73, "deletions": 1, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/b06856eae0fade6e2eaaaad7ab289069ddb6f037/tests%2Fui%2Funnecessary_cast_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b06856eae0fade6e2eaaaad7ab289069ddb6f037/tests%2Fui%2Funnecessary_cast_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_cast_fixable.stderr?ref=b06856eae0fade6e2eaaaad7ab289069ddb6f037", "patch": "@@ -18,5 +18,77 @@ error: casting integer literal to `f64` is unnecessary\n LL |     100_i32 as f64;\n    |     ^^^^^^^^^^^^^^ help: try: `100_f64`\n \n-error: aborting due to 3 previous errors\n+error: casting integer literal to `f32` is unnecessary\n+  --> $DIR/unnecessary_cast_fixable.rs:11:13\n+   |\n+LL |     let _ = -100 as f32;\n+   |             ^^^^^^^^^^^ help: try: `-100_f32`\n+\n+error: casting integer literal to `f64` is unnecessary\n+  --> $DIR/unnecessary_cast_fixable.rs:12:13\n+   |\n+LL |     let _ = -100 as f64;\n+   |             ^^^^^^^^^^^ help: try: `-100_f64`\n+\n+error: casting integer literal to `f64` is unnecessary\n+  --> $DIR/unnecessary_cast_fixable.rs:13:13\n+   |\n+LL |     let _ = -100_i32 as f64;\n+   |             ^^^^^^^^^^^^^^^ help: try: `-100_f64`\n+\n+error: casting integer literal to `u32` is unnecessary\n+  --> $DIR/unnecessary_cast_fixable.rs:25:5\n+   |\n+LL |     1 as u32;\n+   |     ^^^^^^^^ help: try: `1_u32`\n+\n+error: casting integer literal to `i32` is unnecessary\n+  --> $DIR/unnecessary_cast_fixable.rs:26:5\n+   |\n+LL |     0x10 as i32;\n+   |     ^^^^^^^^^^^ help: try: `0x10_i32`\n+\n+error: casting integer literal to `usize` is unnecessary\n+  --> $DIR/unnecessary_cast_fixable.rs:27:5\n+   |\n+LL |     0b10 as usize;\n+   |     ^^^^^^^^^^^^^ help: try: `0b10_usize`\n+\n+error: casting integer literal to `u16` is unnecessary\n+  --> $DIR/unnecessary_cast_fixable.rs:28:5\n+   |\n+LL |     0o73 as u16;\n+   |     ^^^^^^^^^^^ help: try: `0o73_u16`\n+\n+error: casting integer literal to `u32` is unnecessary\n+  --> $DIR/unnecessary_cast_fixable.rs:29:5\n+   |\n+LL |     1_000_000_000 as u32;\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: try: `1_000_000_000_u32`\n+\n+error: casting float literal to `f64` is unnecessary\n+  --> $DIR/unnecessary_cast_fixable.rs:31:5\n+   |\n+LL |     1.0 as f64;\n+   |     ^^^^^^^^^^ help: try: `1.0_f64`\n+\n+error: casting float literal to `f32` is unnecessary\n+  --> $DIR/unnecessary_cast_fixable.rs:32:5\n+   |\n+LL |     0.5 as f32;\n+   |     ^^^^^^^^^^ help: try: `0.5_f32`\n+\n+error: casting integer literal to `i32` is unnecessary\n+  --> $DIR/unnecessary_cast_fixable.rs:36:13\n+   |\n+LL |     let _ = -1 as i32;\n+   |             ^^^^^^^^^ help: try: `-1_i32`\n+\n+error: casting float literal to `f32` is unnecessary\n+  --> $DIR/unnecessary_cast_fixable.rs:37:13\n+   |\n+LL |     let _ = -1.0 as f32;\n+   |             ^^^^^^^^^^^ help: try: `-1.0_f32`\n+\n+error: aborting due to 15 previous errors\n "}]}