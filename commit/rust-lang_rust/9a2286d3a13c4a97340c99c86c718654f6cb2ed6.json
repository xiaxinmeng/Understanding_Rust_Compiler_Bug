{"sha": "9a2286d3a13c4a97340c99c86c718654f6cb2ed6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhMjI4NmQzYTEzYzRhOTczNDBjOTljODZjNzE4NjU0ZjZjYjJlZDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-03T07:33:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-03T07:33:26Z"}, "message": "auto merge of #16995 : kmcallister/rust/plugin-tutorial, r=alexcrichton\n\n@steveklabnik, are you interested in looking this over?", "tree": {"sha": "24be806448f3ba3947f0a2521cce335a68349d11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24be806448f3ba3947f0a2521cce335a68349d11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a2286d3a13c4a97340c99c86c718654f6cb2ed6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a2286d3a13c4a97340c99c86c718654f6cb2ed6", "html_url": "https://github.com/rust-lang/rust/commit/9a2286d3a13c4a97340c99c86c718654f6cb2ed6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a2286d3a13c4a97340c99c86c718654f6cb2ed6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa034cd3bac3155e0f6c74c399314b5ee32f88fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa034cd3bac3155e0f6c74c399314b5ee32f88fc", "html_url": "https://github.com/rust-lang/rust/commit/aa034cd3bac3155e0f6c74c399314b5ee32f88fc"}, {"sha": "3f0c483594e8560cacdb28170e703695d8e74c49", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f0c483594e8560cacdb28170e703695d8e74c49", "html_url": "https://github.com/rust-lang/rust/commit/3f0c483594e8560cacdb28170e703695d8e74c49"}], "stats": {"total": 492, "additions": 473, "deletions": 19}, "files": [{"sha": "ad2dd1b87895a60b3d1d7c655d4c410c2e78ec3b", "filename": "configure", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9a2286d3a13c4a97340c99c86c718654f6cb2ed6/configure", "raw_url": "https://github.com/rust-lang/rust/raw/9a2286d3a13c4a97340c99c86c718654f6cb2ed6/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=9a2286d3a13c4a97340c99c86c718654f6cb2ed6", "patch": "@@ -921,6 +921,7 @@ do\n     make_dir $h/test/doc-guide-pointers\n     make_dir $h/test/doc-guide-container\n     make_dir $h/test/doc-guide-tasks\n+    make_dir $h/test/doc-guide-plugin\n     make_dir $h/test/doc-rust\n done\n "}, {"sha": "26439948aa45d6f51e8b6d276c969dc0883893fc", "filename": "mk/docs.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a2286d3a13c4a97340c99c86c718654f6cb2ed6/mk%2Fdocs.mk", "raw_url": "https://github.com/rust-lang/rust/raw/9a2286d3a13c4a97340c99c86c718654f6cb2ed6/mk%2Fdocs.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdocs.mk?ref=9a2286d3a13c4a97340c99c86c718654f6cb2ed6", "patch": "@@ -27,7 +27,7 @@\n ######################################################################\n DOCS := index intro tutorial guide guide-ffi guide-macros guide-lifetimes \\\n \tguide-tasks guide-container guide-pointers guide-testing \\\n-\tguide-runtime complement-bugreport \\\n+\tguide-runtime guide-plugin complement-bugreport \\\n \tcomplement-lang-faq complement-design-faq complement-project-faq rust \\\n     rustdoc guide-unsafe guide-strings reference\n "}, {"sha": "cf1557e66049e106a4521c4f3421400567b20803", "filename": "src/doc/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a2286d3a13c4a97340c99c86c718654f6cb2ed6/src%2Fdoc%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/9a2286d3a13c4a97340c99c86c718654f6cb2ed6/src%2Fdoc%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2FREADME.md?ref=9a2286d3a13c4a97340c99c86c718654f6cb2ed6", "patch": "@@ -33,7 +33,7 @@ something like:\n pandoc --from=markdown --to=html5 --number-sections -o reference.html reference.md\n ~~~~\n \n-(rust.md being the Rust Reference Manual.)\n+(reference.md being the Rust Reference Manual.)\n \n The syntax for pandoc flavored markdown can be found at:\n http://johnmacfarlane.net/pandoc/README.html#pandocs-markdown"}, {"sha": "6cdaf96d3f50e3c7dc19fce994ac23887d32e094", "filename": "src/doc/complement-design-faq.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9a2286d3a13c4a97340c99c86c718654f6cb2ed6/src%2Fdoc%2Fcomplement-design-faq.md", "raw_url": "https://github.com/rust-lang/rust/raw/9a2286d3a13c4a97340c99c86c718654f6cb2ed6/src%2Fdoc%2Fcomplement-design-faq.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fcomplement-design-faq.md?ref=9a2286d3a13c4a97340c99c86c718654f6cb2ed6", "patch": "@@ -39,7 +39,7 @@ representation as a primitive. This allows using Rust `enum`s in FFI where C\n `enum`s are also used, for most use cases. The attribute can also be applied\n to `struct`s to get the same layout as a C struct would.\n \n-[repr]: http://doc.rust-lang.org/rust.html#miscellaneous-attributes\n+[repr]: reference.html#miscellaneous-attributes\n \n ## There is no GC\n \n@@ -56,7 +56,7 @@ Types which are [`Sync`][sync] are thread-safe when multiple shared\n references to them are used concurrently. Types which are not `Sync` are not\n thread-safe, and thus when used in a global require unsafe code to use.\n \n-[sync]: http://doc.rust-lang.org/core/kinds/trait.Sync.html\n+[sync]: core/kinds/trait.Sync.html\n \n ### If mutable static items that implement `Sync` are safe, why is taking &mut SHARABLE unsafe?\n \n@@ -139,8 +139,8 @@ and explicitly calling the `clone` method. Making user-defined copy operators\n explicit surfaces the underlying complexity, forcing the developer to opt-in\n to potentially expensive operations.\n \n-[copy]: http://doc.rust-lang.org/core/kinds/trait.Copy.html\n-[clone]: http://doc.rust-lang.org/core/clone/trait.Clone.html\n+[copy]: core/kinds/trait.Copy.html\n+[clone]: core/clone/trait.Clone.html\n \n ## No move constructors\n "}, {"sha": "c2c374d3e1f158e5460b391fbf2b13676eb0dc82", "filename": "src/doc/guide-macros.md", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/9a2286d3a13c4a97340c99c86c718654f6cb2ed6/src%2Fdoc%2Fguide-macros.md", "raw_url": "https://github.com/rust-lang/rust/raw/9a2286d3a13c4a97340c99c86c718654f6cb2ed6/src%2Fdoc%2Fguide-macros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-macros.md?ref=9a2286d3a13c4a97340c99c86c718654f6cb2ed6", "patch": "@@ -1,5 +1,14 @@\n % The Rust Macros Guide\n \n+<div class=\"unstable-feature\">\n+<b>Warning:</b> There are currently various problems with invoking macros, how\n+they interact with their environment, and how they are used outside of the\n+location in which they are defined. Macro definitions are likely to change\n+slightly in the future. For this reason, they are hidden behind the\n+<code>macro_rules</code> <a href=\"reference.html#compiler-features\">feature\n+attribute</a>.\n+</div>\n+\n # Introduction\n \n Functions are the primary tool that programmers can use to build abstractions.\n@@ -448,6 +457,66 @@ fn main() {\n The two `'x` names did not clash, which would have caused the loop\n to print \"I am never printed\" and to run forever.\n \n+# Scoping and macro import/export\n+\n+Macros occupy a single global namespace. The interaction with Rust's system of\n+modules and crates is somewhat complex.\n+\n+Definition and expansion of macros both happen in a single depth-first,\n+lexical-order traversal of a crate's source. So a macro defined at module scope\n+is visible to any subsequent code in the same module, which includes the body\n+of any subsequent child `mod` items.\n+\n+If a module has the `macro_escape` attribute, its macros are also visible in\n+its parent module after the child's `mod` item. If the parent also has\n+`macro_escape` then the macros will be visible in the grandparent after the\n+parent's `mod` item, and so forth.\n+\n+Independent of `macro_escape`, the `macro_export` attribute controls visibility\n+between crates.  Any `macro_rules!` definition with the `macro_export`\n+attribute will be visible to other crates that have loaded this crate with\n+`phase(plugin)`. There is currently no way for the importing crate to control\n+which macros are imported.\n+\n+An example:\n+\n+```rust\n+# #![feature(macro_rules)]\n+macro_rules! m1 (() => (()))\n+\n+// visible here: m1\n+\n+mod foo {\n+    // visible here: m1\n+\n+    #[macro_export]\n+    macro_rules! m2 (() => (()))\n+\n+    // visible here: m1, m2\n+}\n+\n+// visible here: m1\n+\n+macro_rules! m3 (() => (()))\n+\n+// visible here: m1, m3\n+\n+#[macro_escape]\n+mod bar {\n+    // visible here: m1, m3\n+\n+    macro_rules! m4 (() => (()))\n+\n+    // visible here: m1, m3, m4\n+}\n+\n+// visible here: m1, m3, m4\n+# fn main() { }\n+```\n+\n+When this library is loaded with `#[phase(plugin)] extern crate`, only `m2`\n+will be imported.\n+\n # A final note\n \n Macros, as currently implemented, are not for the faint of heart. Even\n@@ -457,3 +526,10 @@ tricky. Invoking the `log_syntax!` macro can help elucidate intermediate\n states, invoking `trace_macros!(true)` will automatically print those\n intermediate states out, and passing the flag `--pretty expanded` as a\n command-line argument to the compiler will show the result of expansion.\n+\n+If Rust's macro system can't do what you need, you may want to write a\n+[compiler plugin](guide-plugin.html) instead. Compared to `macro_rules!`\n+macros, this is significantly more work, the interfaces are much less stable,\n+and the warnings about debugging apply ten-fold. In exchange you get the\n+flexibility of running arbitrary Rust code within the compiler. Syntax\n+extension plugins are sometimes called \"procedural macros\" for this reason."}, {"sha": "3830a2126e172709ac58831657891e65a1d3b22e", "filename": "src/doc/guide-plugin.md", "status": "added", "additions": 259, "deletions": 0, "changes": 259, "blob_url": "https://github.com/rust-lang/rust/blob/9a2286d3a13c4a97340c99c86c718654f6cb2ed6/src%2Fdoc%2Fguide-plugin.md", "raw_url": "https://github.com/rust-lang/rust/raw/9a2286d3a13c4a97340c99c86c718654f6cb2ed6/src%2Fdoc%2Fguide-plugin.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-plugin.md?ref=9a2286d3a13c4a97340c99c86c718654f6cb2ed6", "patch": "@@ -0,0 +1,259 @@\n+% The Rust Compiler Plugins Guide\n+\n+<div class=\"unstable-feature\">\n+\n+<p>\n+<b>Warning:</b> Plugins are an advanced, unstable feature! For many details,\n+the only available documentation is the <a\n+href=\"syntax/index.html\"><code>libsyntax</code></a> and <a\n+href=\"rustc/index.html\"><code>librustc</code></a> API docs, or even the source\n+code itself. These internal compiler APIs are also subject to change at any\n+time.\n+</p>\n+\n+<p>\n+For defining new syntax it is often much easier to use Rust's <a\n+href=\"guide-macros.html\">built-in macro system</a>.\n+</p>\n+\n+<p style=\"margin-bottom: 0\">\n+The code in this document uses language features not covered in the Rust\n+Guide.  See the <a href=\"reference.html\">Reference Manual</a> for more\n+information.\n+</p>\n+\n+</div>\n+\n+# Introduction\n+\n+`rustc` can load compiler plugins, which are user-provided libraries that\n+extend the compiler's behavior with new syntax extensions, lint checks, etc.\n+\n+A plugin is a dynamic library crate with a designated \"registrar\" function that\n+registers extensions with `rustc`. Other crates can use these extensions by\n+loading the plugin crate with `#[phase(plugin)] extern crate`. See the\n+[`rustc::plugin`](rustc/plugin/index.html) documentation for more about the\n+mechanics of defining and loading a plugin.\n+\n+# Syntax extensions\n+\n+Plugins can extend Rust's syntax in various ways. One kind of syntax extension\n+is the procedural macro. These are invoked the same way as [ordinary\n+macros](guide-macros.html), but the expansion is performed by arbitrary Rust\n+code that manipulates [syntax trees](syntax/ast/index.html) at\n+compile time.\n+\n+Let's write a plugin\n+[`roman_numerals.rs`](https://github.com/rust-lang/rust/tree/master/src/test/auxiliary/roman_numerals.rs)\n+that implements Roman numeral integer literals.\n+\n+```ignore\n+#![crate_type=\"dylib\"]\n+#![feature(plugin_registrar)]\n+\n+extern crate syntax;\n+extern crate rustc;\n+\n+use syntax::codemap::Span;\n+use syntax::parse::token::{IDENT, get_ident};\n+use syntax::ast::{TokenTree, TTTok};\n+use syntax::ext::base::{ExtCtxt, MacResult, DummyResult, MacExpr};\n+use syntax::ext::build::AstBuilder;  // trait for expr_uint\n+use rustc::plugin::Registry;\n+\n+fn expand_rn(cx: &mut ExtCtxt, sp: Span, args: &[TokenTree])\n+        -> Box<MacResult + 'static> {\n+\n+    static NUMERALS: &'static [(&'static str, uint)] = &[\n+        (\"M\", 1000), (\"CM\", 900), (\"D\", 500), (\"CD\", 400),\n+        (\"C\",  100), (\"XC\",  90), (\"L\",  50), (\"XL\",  40),\n+        (\"X\",   10), (\"IX\",   9), (\"V\",   5), (\"IV\",   4),\n+        (\"I\",    1)];\n+\n+    let text = match args {\n+        [TTTok(_, IDENT(s, _))] => get_ident(s).to_string(),\n+        _ => {\n+            cx.span_err(sp, \"argument should be a single identifier\");\n+            return DummyResult::any(sp);\n+        }\n+    };\n+\n+    let mut text = text.as_slice();\n+    let mut total = 0u;\n+    while !text.is_empty() {\n+        match NUMERALS.iter().find(|&&(rn, _)| text.starts_with(rn)) {\n+            Some(&(rn, val)) => {\n+                total += val;\n+                text = text.slice_from(rn.len());\n+            }\n+            None => {\n+                cx.span_err(sp, \"invalid Roman numeral\");\n+                return DummyResult::any(sp);\n+            }\n+        }\n+    }\n+\n+    MacExpr::new(cx.expr_uint(sp, total))\n+}\n+\n+#[plugin_registrar]\n+pub fn plugin_registrar(reg: &mut Registry) {\n+    reg.register_macro(\"rn\", expand_rn);\n+}\n+```\n+\n+Then we can use `rn!()` like any other macro:\n+\n+```ignore\n+#![feature(phase)]\n+\n+#[phase(plugin)]\n+extern crate roman_numerals;\n+\n+fn main() {\n+    assert_eq!(rn!(MMXV), 2015);\n+}\n+```\n+\n+The advantages over a simple `fn(&str) -> uint` are:\n+\n+* The (arbitrarily complex) conversion is done at compile time.\n+* Input validation is also performed at compile time.\n+* It can be extended to allow use in patterns, which effectively gives\n+  a way to define new literal syntax for any data type.\n+\n+In addition to procedural macros, you can define new\n+[`deriving`](reference.html#deriving)-like attributes and other kinds of\n+extensions.  See\n+[`Registry::register_syntax_extension`](rustc/plugin/registry/struct.Registry.html#method.register_syntax_extension)\n+and the [`SyntaxExtension`\n+enum](http://doc.rust-lang.org/syntax/ext/base/enum.SyntaxExtension.html).  For\n+a more involved macro example, see\n+[`src/libregex_macros/lib.rs`](https://github.com/rust-lang/rust/blob/master/src/libregex_macros/lib.rs)\n+in the Rust distribution.\n+\n+\n+## Tips and tricks\n+\n+To see the results of expanding syntax extensions, run\n+`rustc --pretty expanded`. The output represents a whole crate, so you\n+can also feed it back in to `rustc`, which will sometimes produce better\n+error messages than the original compilation. Note that the\n+`--pretty expanded` output may have a different meaning if multiple\n+variables of the same name (but different syntax contexts) are in play\n+in the same scope. In this case `--pretty expanded,hygiene` will tell\n+you about the syntax contexts.\n+\n+You can use [`syntax::parse`](syntax/parse/index.html) to turn token trees into\n+higher-level syntax elements like expressions:\n+\n+```ignore\n+fn expand_foo(cx: &mut ExtCtxt, sp: Span, args: &[TokenTree])\n+        -> Box<MacResult+'static> {\n+\n+    let mut parser =\n+        parse::new_parser_from_tts(cx.parse_sess(), cx.cfg(), args.to_slice())\n+\n+    let expr: P<Expr> = parser.parse_expr();\n+```\n+\n+Looking through [`libsyntax` parser\n+code](https://github.com/rust-lang/rust/blob/master/src/libsyntax/parse/parser.rs)\n+will give you a feel for how the parsing infrastructure works.\n+\n+Keep the [`Span`s](syntax/codemap/struct.Span.html) of\n+everything you parse, for better error reporting. You can wrap\n+[`Spanned`](syntax/codemap/struct.Spanned.html) around\n+your custom data structures.\n+\n+Calling\n+[`ExtCtxt::span_fatal`](syntax/ext/base/struct.ExtCtxt.html#method.span_fatal)\n+will immediately abort compilation. It's better to instead call\n+[`ExtCtxt::span_err`](syntax/ext/base/struct.ExtCtxt.html#method.span_err)\n+and return\n+[`DummyResult`](syntax/ext/base/struct.DummyResult.html),\n+so that the compiler can continue and find further errors.\n+\n+The example above produced an integer literal using\n+[`AstBuilder::expr_uint`](syntax/ext/build/trait.AstBuilder.html#tymethod.expr_uint).\n+As an alternative to the `AstBuilder` trait, `libsyntax` provides a set of\n+[quasiquote macros](syntax/ext/quote/index.html).  They are undocumented and\n+very rough around the edges.  However, the implementation may be a good\n+starting point for an improved quasiquote as an ordinary plugin library.\n+\n+\n+# Lint plugins\n+\n+Plugins can extend [Rust's lint\n+infrastructure](reference.html#lint-check-attributes) with additional checks for\n+code style, safety, etc. You can see\n+[`src/test/auxiliary/lint_plugin_test.rs`](https://github.com/rust-lang/rust/blob/master/src/test/auxiliary/lint_plugin_test.rs)\n+for a full example, the core of which is reproduced here:\n+\n+```ignore\n+declare_lint!(TEST_LINT, Warn,\n+              \"Warn about items named 'lintme'\")\n+\n+struct Pass;\n+\n+impl LintPass for Pass {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(TEST_LINT)\n+    }\n+\n+    fn check_item(&mut self, cx: &Context, it: &ast::Item) {\n+        let name = token::get_ident(it.ident);\n+        if name.get() == \"lintme\" {\n+            cx.span_lint(TEST_LINT, it.span, \"item is named 'lintme'\");\n+        }\n+    }\n+}\n+\n+#[plugin_registrar]\n+pub fn plugin_registrar(reg: &mut Registry) {\n+    reg.register_lint_pass(box Pass as LintPassObject);\n+}\n+```\n+\n+Then code like\n+\n+```ignore\n+#[phase(plugin)]\n+extern crate lint_plugin_test;\n+\n+fn lintme() { }\n+```\n+\n+will produce a compiler warning:\n+\n+```txt\n+foo.rs:4:1: 4:16 warning: item is named 'lintme', #[warn(test_lint)] on by default\n+foo.rs:4 fn lintme() { }\n+         ^~~~~~~~~~~~~~~\n+```\n+\n+The components of a lint plugin are:\n+\n+* one or more `declare_lint!` invocations, which define static\n+  [`Lint`](rustc/lint/struct.Lint.html) structs;\n+\n+* a struct holding any state needed by the lint pass (here, none);\n+\n+* a [`LintPass`](rustc/lint/trait.LintPass.html)\n+  implementation defining how to check each syntax element. A single\n+  `LintPass` may call `span_lint` for several different `Lint`s, but should\n+  register them all through the `get_lints` method.\n+\n+Lint passes are syntax traversals, but they run at a late stage of compilation\n+where type information is available. `rustc`'s [built-in\n+lints](https://github.com/rust-lang/rust/blob/master/src/librustc/lint/builtin.rs)\n+mostly use the same infrastructure as lint plugins, and provide examples of how\n+to access type information.\n+\n+Lints defined by plugins are controlled by the usual [attributes and compiler\n+flags](reference.html#lint-check-attributes), e.g. `#[allow(test_lint)]` or\n+`-A test-lint`. These identifiers are derived from the first argument to\n+`declare_lint!`, with appropriate case and punctuation conversion.\n+\n+You can run `rustc -W help foo.rs` to see a list of lints known to `rustc`,\n+including those provided by plugins loaded by `foo.rs`."}, {"sha": "7805b3d5681a5c140baf7656ce8ed69a77d85dce", "filename": "src/doc/guide.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9a2286d3a13c4a97340c99c86c718654f6cb2ed6/src%2Fdoc%2Fguide.md", "raw_url": "https://github.com/rust-lang/rust/raw/9a2286d3a13c4a97340c99c86c718654f6cb2ed6/src%2Fdoc%2Fguide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide.md?ref=9a2286d3a13c4a97340c99c86c718654f6cb2ed6", "patch": "@@ -1843,9 +1843,9 @@ that page, but the best part is the search bar. Right up at the top, there's\n a box that you can enter in a search term. The search is pretty primitive\n right now, but is getting better all the time. If you type 'random' in that\n box, the page will update to [this\n-one](http://doc.rust-lang.org/std/index.html?search=random). The very first\n+one](std/index.html?search=random). The very first\n result is a link to\n-[std::rand::random](http://doc.rust-lang.org/std/rand/fn.random.html). If we\n+[std::rand::random](std/rand/fn.random.html). If we\n click on that result, we'll be taken to its documentation page.\n \n This page shows us a few things: the type signature of the function, some\n@@ -3723,7 +3723,7 @@ If you use `Rc<T>` or `Arc<T>`, you have to be careful about introducing\n cycles. If you have two `Rc<T>`s that point to each other, the reference counts\n will never drop to zero, and you'll have a memory leak. To learn more, check\n out [the section on `Rc<T>` and `Arc<T>` in the pointers\n-guide](http://doc.rust-lang.org/guide-pointers.html#rc-and-arc).\n+guide](guide-pointers.html#rc-and-arc).\n \n # Patterns\n \n@@ -5336,6 +5336,6 @@ you will have a firm grasp of basic Rust development. There's a whole lot more\n out there, we've just covered the surface. There's tons of topics that you can\n dig deeper into, and we've built specialized guides for many of them. To learn\n more, dig into the [full documentation\n-index](http://doc.rust-lang.org/index.html).\n+index](index.html).\n \n Happy hacking!"}, {"sha": "f38c5883b538d00d5d403ad7beb3609597b65af5", "filename": "src/doc/index.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9a2286d3a13c4a97340c99c86c718654f6cb2ed6/src%2Fdoc%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/9a2286d3a13c4a97340c99c86c718654f6cb2ed6/src%2Fdoc%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Findex.md?ref=9a2286d3a13c4a97340c99c86c718654f6cb2ed6", "patch": "@@ -63,6 +63,7 @@ a guide that can help you out:\n * [Macros](guide-macros.html)\n * [Testing](guide-testing.html)\n * [Rust's Runtime](guide-runtime.html)\n+* [Compiler Plugins](guide-plugin.html)\n \n # Tools\n "}, {"sha": "54da9bfa716053d3c1dd7a9df527af9ce32f1d26", "filename": "src/doc/po4a.conf", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9a2286d3a13c4a97340c99c86c718654f6cb2ed6/src%2Fdoc%2Fpo4a.conf", "raw_url": "https://github.com/rust-lang/rust/raw/9a2286d3a13c4a97340c99c86c718654f6cb2ed6/src%2Fdoc%2Fpo4a.conf", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fpo4a.conf?ref=9a2286d3a13c4a97340c99c86c718654f6cb2ed6", "patch": "@@ -13,6 +13,7 @@\n [type: text] src/doc/guide-ffi.md $lang:doc/l10n/$lang/guide-ffi.md\n [type: text] src/doc/guide-lifetimes.md $lang:doc/l10n/$lang/guide-lifetimes.md\n [type: text] src/doc/guide-macros.md $lang:doc/l10n/$lang/guide-macros.md\n+[type: text] src/doc/guide-plugin.md $lang:doc/l10n/$lang/guide-plugin.md\n [type: text] src/doc/guide-pointers.md $lang:doc/l10n/$lang/guide-pointers.md\n [type: text] src/doc/guide-runtime.md $lang:doc/l10n/$lang/guide-runtime.md\n [type: text] src/doc/guide-strings.md $lang:doc/l10n/$lang/guide-strings.md"}, {"sha": "9cc70118b145f201bd3b8a7c029adea6f7682589", "filename": "src/doc/reference.md", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9a2286d3a13c4a97340c99c86c718654f6cb2ed6/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/9a2286d3a13c4a97340c99c86c718654f6cb2ed6/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=9a2286d3a13c4a97340c99c86c718654f6cb2ed6", "patch": "@@ -598,6 +598,14 @@ names, and invoked through a consistent syntax: `name!(...)`. Examples include:\n \n All of the above extensions are expressions with values.\n \n+Users of `rustc` can define new syntax extensions in two ways:\n+\n+* [Compiler plugins](guide-plugin.html#syntax-extensions) can include arbitrary\n+  Rust code that manipulates syntax trees at compile time.\n+\n+* [Macros](guide-macros.html) define new syntax in a higher-level,\n+  declarative way.\n+\n ## Macros\n \n ```{.ebnf .gram}\n@@ -615,7 +623,7 @@ transcriber : '(' transcriber * ')' | '[' transcriber * ']'\n \n User-defined syntax extensions are called \"macros\", and the `macro_rules`\n syntax extension defines them. Currently, user-defined macros can expand to\n-expressions, statements, or items.\n+expressions, statements, items, or patterns.\n \n (A `sep_token` is any token other than `*` and `+`. A `non_special_token` is\n any token other than a delimiter or `$`.)\n@@ -1912,7 +1920,7 @@ type int8_t = i8;\n - `main` - indicates that this function should be passed to the entry point,\n   rather than the function in the crate root named `main`.\n - `plugin_registrar` - mark this function as the registration point for\n-  compiler plugins, such as loadable syntax extensions.\n+  [compiler plugins][plugin], such as loadable syntax extensions.\n - `start` - indicates that this function should be used as the entry point,\n   overriding the \"start\" language item. See the \"start\" [language\n   item](#language-items) for more details.\n@@ -1972,8 +1980,8 @@ On `struct`s:\n   align fields.\n - `phase` - on `extern crate` statements, allows specifying which \"phase\" of\n   compilation the crate should be loaded for. Currently, there are two\n-  choices: `link` and `plugin`. `link` is the default. `plugin` will load the\n-  crate at compile-time and use any syntax extensions or lints that the crate\n+  choices: `link` and `plugin`. `link` is the default. `plugin` will [load the\n+  crate at compile-time][plugin] and use any syntax extensions or lints that the crate\n   defines. They can both be specified, `#[phase(link, plugin)]` to use a crate\n   both at runtime and compiletime.\n - `simd` - on certain tuple structs, derive the arithmetic operators, which\n@@ -2061,7 +2069,8 @@ For any lint check `C`:\n * `warn(C)` warns about violations of `C` but continues compilation.\n \n The lint checks supported by the compiler can be found via `rustc -W help`,\n-along with their default settings.\n+along with their default settings.  [Compiler\n+plugins](guide-plugin.html#lint-plugins) can provide additional lint checks.\n \n ```{.ignore}\n mod m1 {\n@@ -2490,7 +2499,7 @@ The currently implemented features of the reference compiler are:\n             considered unwholesome and in need of overhaul, and it is not clear\n             what they will look like moving forward.\n \n-* `plugin_registrar` - Indicates that a crate has compiler plugins that it\n+* `plugin_registrar` - Indicates that a crate has [compiler plugins][plugin] that it\n                        wants to load. As with `phase`, the implementation is\n                        in need of a overhaul, and it is not clear that plugins\n                        defined using this will continue to work.\n@@ -4304,3 +4313,4 @@ Additional specific influences can be seen from the following languages:\n * The block syntax of Ruby.\n \n [ffi]: guide-ffi.html\n+[plugin]: guide-plugin.html"}, {"sha": "22e360d2015d6ccc69b7c657106610188b48fd1f", "filename": "src/doc/rust.css", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9a2286d3a13c4a97340c99c86c718654f6cb2ed6/src%2Fdoc%2Frust.css", "raw_url": "https://github.com/rust-lang/rust/raw/9a2286d3a13c4a97340c99c86c718654f6cb2ed6/src%2Fdoc%2Frust.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.css?ref=9a2286d3a13c4a97340c99c86c718654f6cb2ed6", "patch": "@@ -213,6 +213,10 @@ pre code {\n     color: inherit;\n }\n \n+a > code {\n+    color: #428BCA;\n+}\n+\n /* Code highlighting */\n pre.rust .kw { color: #8959A8; }\n pre.rust .kw-2, pre.rust .prelude-ty { color: #4271AE; }\n@@ -334,6 +338,11 @@ pre.rust { position: relative; }\n     transform: scaleX(-1);\n }\n \n+.unstable-feature {\n+    border: 2px solid red;\n+    padding: 5px;\n+}\n+\n @media (min-width: 1170px) {\n     pre {\n         font-size: 15px;"}, {"sha": "a03ee471be68155e8e87b6957317249762000712", "filename": "src/librustc/plugin/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a2286d3a13c4a97340c99c86c718654f6cb2ed6/src%2Flibrustc%2Fplugin%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a2286d3a13c4a97340c99c86c718654f6cb2ed6/src%2Flibrustc%2Fplugin%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fplugin%2Fmod.rs?ref=9a2286d3a13c4a97340c99c86c718654f6cb2ed6", "patch": "@@ -53,8 +53,8 @@\n  * If you also need the plugin crate available at runtime, use\n  * `phase(plugin, link)`.\n  *\n- * See `src/test/auxiliary/macro_crate_test.rs` and `src/libfourcc`\n- * for examples of syntax extension plugins.\n+ * See [the compiler plugin guide](../../guide-plugin.html)\n+ * for more examples.\n  */\n \n pub use self::registry::Registry;"}, {"sha": "5d4a9025827a020955ae07df1e0a1e3ffbcdbeed", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a2286d3a13c4a97340c99c86c718654f6cb2ed6/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a2286d3a13c4a97340c99c86c718654f6cb2ed6/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=9a2286d3a13c4a97340c99c86c718654f6cb2ed6", "patch": "@@ -73,7 +73,7 @@ static KNOWN_FEATURES: &'static [(&'static str, Status)] = &[\n \n     (\"if_let\", Active),\n \n-    // if you change this list without updating src/doc/rust.md, cmr will be sad\n+    // if you change this list without updating src/doc/reference.md, cmr will be sad\n \n     // A temporary feature gate used to enable parser extensions needed\n     // to bootstrap fix for #5723."}, {"sha": "43842fae70f802412bb5ed2261060ef7e8715ab5", "filename": "src/test/auxiliary/roman_numerals.rs", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/9a2286d3a13c4a97340c99c86c718654f6cb2ed6/src%2Ftest%2Fauxiliary%2Froman_numerals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a2286d3a13c4a97340c99c86c718654f6cb2ed6/src%2Ftest%2Fauxiliary%2Froman_numerals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Froman_numerals.rs?ref=9a2286d3a13c4a97340c99c86c718654f6cb2ed6", "patch": "@@ -0,0 +1,70 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// force-host\n+\n+#![crate_type=\"dylib\"]\n+#![feature(plugin_registrar)]\n+\n+extern crate syntax;\n+extern crate rustc;\n+\n+use syntax::codemap::Span;\n+use syntax::parse::token::{IDENT, get_ident};\n+use syntax::ast::{TokenTree, TTTok};\n+use syntax::ext::base::{ExtCtxt, MacResult, DummyResult, MacExpr};\n+use syntax::ext::build::AstBuilder;  // trait for expr_uint\n+use rustc::plugin::Registry;\n+\n+// WARNING WARNING WARNING WARNING WARNING\n+// =======================================\n+//\n+// This code also appears in src/doc/guide-plugin.md. Please keep\n+// the two copies in sync!  FIXME: have rustdoc read this file\n+\n+fn expand_rn(cx: &mut ExtCtxt, sp: Span, args: &[TokenTree])\n+        -> Box<MacResult + 'static> {\n+\n+    static NUMERALS: &'static [(&'static str, uint)] = &[\n+        (\"M\", 1000), (\"CM\", 900), (\"D\", 500), (\"CD\", 400),\n+        (\"C\",  100), (\"XC\",  90), (\"L\",  50), (\"XL\",  40),\n+        (\"X\",   10), (\"IX\",   9), (\"V\",   5), (\"IV\",   4),\n+        (\"I\",    1)];\n+\n+    let text = match args {\n+        [TTTok(_, IDENT(s, _))] => get_ident(s).to_string(),\n+        _ => {\n+            cx.span_err(sp, \"argument should be a single identifier\");\n+            return DummyResult::any(sp);\n+        }\n+    };\n+\n+    let mut text = text.as_slice();\n+    let mut total = 0u;\n+    while !text.is_empty() {\n+        match NUMERALS.iter().find(|&&(rn, _)| text.starts_with(rn)) {\n+            Some(&(rn, val)) => {\n+                total += val;\n+                text = text.slice_from(rn.len());\n+            }\n+            None => {\n+                cx.span_err(sp, \"invalid Roman numeral\");\n+                return DummyResult::any(sp);\n+            }\n+        }\n+    }\n+\n+    MacExpr::new(cx.expr_uint(sp, total))\n+}\n+\n+#[plugin_registrar]\n+pub fn plugin_registrar(reg: &mut Registry) {\n+    reg.register_macro(\"rn\", expand_rn);\n+}"}, {"sha": "ecd95f2cbe8836f2f827686c9b8bf4ed63b12d50", "filename": "src/test/run-pass-fulldeps/roman-numerals-macro.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9a2286d3a13c4a97340c99c86c718654f6cb2ed6/src%2Ftest%2Frun-pass-fulldeps%2Froman-numerals-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a2286d3a13c4a97340c99c86c718654f6cb2ed6/src%2Ftest%2Frun-pass-fulldeps%2Froman-numerals-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Froman-numerals-macro.rs?ref=9a2286d3a13c4a97340c99c86c718654f6cb2ed6", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:roman_numerals.rs\n+// ignore-stage1\n+// ignore-android\n+\n+#![feature(phase)]\n+\n+#[phase(plugin, link)]\n+extern crate roman_numerals;\n+\n+pub fn main() {\n+    assert_eq!(rn!(MMXV), 2015);\n+    assert_eq!(rn!(MCMXCIX), 1999);\n+    assert_eq!(rn!(XXV), 25);\n+    assert_eq!(rn!(MDCLXVI), 1666);\n+    assert_eq!(rn!(MMMDCCCLXXXVIII), 3888);\n+    assert_eq!(rn!(MMXIV), 2014);\n+}"}]}