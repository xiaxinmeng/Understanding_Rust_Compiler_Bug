{"sha": "a1ba8611907f847d8bc43565566ee739dd9d5202", "node_id": "C_kwDOAAsO6NoAKGExYmE4NjExOTA3Zjg0N2Q4YmM0MzU2NTU2NmVlNzM5ZGQ5ZDUyMDI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-14T17:24:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-14T17:24:40Z"}, "message": "Rollup merge of #107573 - cuviper:drop-llvm-13, r=nagisa\n\nUpdate the minimum external LLVM to 14\n\nWith this change, we'll have stable support for LLVM 14 through 16 (pending release).\nFor reference, the previous increase to LLVM 13 was #100460.", "tree": {"sha": "afb21c982c168c10c8dde37373686cc82e63a469", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afb21c982c168c10c8dde37373686cc82e63a469"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1ba8611907f847d8bc43565566ee739dd9d5202", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj68PYCRBK7hj4Ov3rIwAAG1EIAAVazceDkiRgTFnc/qX/+xeq\n65eWnK39dqwsIBctAYSuWTKgRqrQH7a971DfZ2juYz+ptPo+cpGxUL6a/ZW8tsiC\njreQO4TYmD30HWp5hcLVLNlTmYG8wbuPo83Sic+gDPqrmSICygagITQORgmHQVY7\nfWJS7v8Trw7NyWbC40GnXauv3fyXJBAAwPGeboJ1DK8M3Fs9rJXYTi6adPx6jMtW\n1mHtvVRT7Ay2jEf7DHSMlK5NRTBHV50vL4uPv5FRKNv14vpLj3bQBfFU9jZKA8gh\ndA/hNOb73ZCfnbBdZZB04EgFF9Esihb26FaeOExS57RvRVnk9wqkJBpfihNbG3o=\n=mgWr\n-----END PGP SIGNATURE-----\n", "payload": "tree afb21c982c168c10c8dde37373686cc82e63a469\nparent 9bb6e60d1f1360234aae90c97964c0fa5524f141\nparent ffdbd58d85ef1f172e4b78e00655b36131ed1d4f\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1676395480 +0100\ncommitter GitHub <noreply@github.com> 1676395480 +0100\n\nRollup merge of #107573 - cuviper:drop-llvm-13, r=nagisa\n\nUpdate the minimum external LLVM to 14\n\nWith this change, we'll have stable support for LLVM 14 through 16 (pending release).\nFor reference, the previous increase to LLVM 13 was #100460.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1ba8611907f847d8bc43565566ee739dd9d5202", "html_url": "https://github.com/rust-lang/rust/commit/a1ba8611907f847d8bc43565566ee739dd9d5202", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1ba8611907f847d8bc43565566ee739dd9d5202/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9bb6e60d1f1360234aae90c97964c0fa5524f141", "url": "https://api.github.com/repos/rust-lang/rust/commits/9bb6e60d1f1360234aae90c97964c0fa5524f141", "html_url": "https://github.com/rust-lang/rust/commit/9bb6e60d1f1360234aae90c97964c0fa5524f141"}, {"sha": "ffdbd58d85ef1f172e4b78e00655b36131ed1d4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffdbd58d85ef1f172e4b78e00655b36131ed1d4f", "html_url": "https://github.com/rust-lang/rust/commit/ffdbd58d85ef1f172e4b78e00655b36131ed1d4f"}], "stats": {"total": 276, "additions": 58, "deletions": 218}, "files": [{"sha": "7c17dfd8c8edc15dbbe2fb55a3c35d4bfb7afd92", "filename": ".github/workflows/ci.yml", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a1ba8611907f847d8bc43565566ee739dd9d5202/.github%2Fworkflows%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/a1ba8611907f847d8bc43565566ee739dd9d5202/.github%2Fworkflows%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yml?ref=a1ba8611907f847d8bc43565566ee739dd9d5202", "patch": "@@ -54,7 +54,7 @@ jobs:\n             tidy: true\n             os: ubuntu-20.04-xl\n             env: {}\n-          - name: x86_64-gnu-llvm-13\n+          - name: x86_64-gnu-llvm-14\n             tidy: false\n             os: ubuntu-20.04-xl\n             env: {}\n@@ -300,11 +300,7 @@ jobs:\n             env:\n               RUST_BACKTRACE: 1\n             os: ubuntu-20.04-xl\n-          - name: x86_64-gnu-llvm-13\n-            env:\n-              RUST_BACKTRACE: 1\n-            os: ubuntu-20.04-xl\n-          - name: x86_64-gnu-llvm-13-stage1\n+          - name: x86_64-gnu-llvm-14-stage1\n             env:\n               RUST_BACKTRACE: 1\n             os: ubuntu-20.04-xl"}, {"sha": "f2640cb1574fc640d5388f4030c02bd84f63c4d3", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1ba8611907f847d8bc43565566ee739dd9d5202/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/a1ba8611907f847d8bc43565566ee739dd9d5202/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=a1ba8611907f847d8bc43565566ee739dd9d5202", "patch": "@@ -874,9 +874,9 @@ dependencies = [\n \n [[package]]\n name = \"compiler_builtins\"\n-version = \"0.1.85\"\n+version = \"0.1.87\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"13e81c6cd7ab79f51a0c927d22858d61ad12bd0b3865f0b13ece02a4486aeabb\"\n+checksum = \"f867ce54c09855ccd135ad4a50c777182a0c7af5ff20a8f537617bd648b10d50\"\n dependencies = [\n  \"cc\",\n  \"rustc-std-workspace-core\","}, {"sha": "92629aa18d4586ad574494350844c170c799eaa5", "filename": "compiler/rustc_codegen_llvm/src/consts.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a1ba8611907f847d8bc43565566ee739dd9d5202/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ba8611907f847d8bc43565566ee739dd9d5202/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs?ref=a1ba8611907f847d8bc43565566ee739dd9d5202", "patch": "@@ -3,7 +3,6 @@ use crate::common::{self, CodegenCx};\n use crate::debuginfo;\n use crate::errors::{InvalidMinimumAlignment, SymbolAlreadyDefined};\n use crate::llvm::{self, True};\n-use crate::llvm_util;\n use crate::type_::Type;\n use crate::type_of::LayoutLlvmExt;\n use crate::value::Value;\n@@ -56,13 +55,7 @@ pub fn const_alloc_to_llvm<'ll>(cx: &CodegenCx<'ll, '_>, alloc: ConstAllocation<\n         // to avoid the cost of generating large complex const expressions.\n         // For example, `[(u32, u8); 1024 * 1024]` contains uninit padding in each element,\n         // and would result in `{ [5 x i8] zeroinitializer, [3 x i8] undef, ...repeat 1M times... }`.\n-        let max = if llvm_util::get_version() < (14, 0, 0) {\n-            // Generating partially-uninit consts inhibits optimizations in LLVM < 14.\n-            // See https://github.com/rust-lang/rust/issues/84565.\n-            1\n-        } else {\n-            cx.sess().opts.unstable_opts.uninit_const_chunk_threshold\n-        };\n+        let max = cx.sess().opts.unstable_opts.uninit_const_chunk_threshold;\n         let allow_uninit_chunks = chunks.clone().take(max.saturating_add(1)).count() <= max;\n \n         if allow_uninit_chunks {"}, {"sha": "120dc59dfb3b6a7bbc06e6ea42e2cea233738526", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a1ba8611907f847d8bc43565566ee739dd9d5202/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ba8611907f847d8bc43565566ee739dd9d5202/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=a1ba8611907f847d8bc43565566ee739dd9d5202", "patch": "@@ -143,17 +143,6 @@ pub unsafe fn create_module<'ll>(\n \n     let mut target_data_layout = sess.target.data_layout.to_string();\n     let llvm_version = llvm_util::get_version();\n-    if llvm_version < (14, 0, 0) {\n-        if sess.target.llvm_target == \"i686-pc-windows-msvc\"\n-            || sess.target.llvm_target == \"i586-pc-windows-msvc\"\n-        {\n-            target_data_layout =\n-                \"e-m:x-p:32:32-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:32-n8:16:32-a:0:32-S32\"\n-                    .to_string();\n-        } else if sess.target.arch == \"wasm32\" {\n-            target_data_layout = target_data_layout.replace(\"-p10:8:8-p20:8:8\", \"\");\n-        }\n-    }\n     if llvm_version < (16, 0, 0) {\n         if sess.target.arch == \"s390x\" {\n             target_data_layout = target_data_layout.replace(\"-v128:64\", \"\");"}, {"sha": "20b1dd9415386bb2258877d69015b54813115f8d", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 3, "deletions": 23, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a1ba8611907f847d8bc43565566ee739dd9d5202/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ba8611907f847d8bc43565566ee739dd9d5202/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=a1ba8611907f847d8bc43565566ee739dd9d5202", "patch": "@@ -152,13 +152,7 @@ pub fn time_trace_profiler_finish(file_name: &Path) {\n pub fn to_llvm_features<'a>(sess: &Session, s: &'a str) -> SmallVec<[&'a str; 2]> {\n     let arch = if sess.target.arch == \"x86_64\" { \"x86\" } else { &*sess.target.arch };\n     match (arch, s) {\n-        (\"x86\", \"sse4.2\") => {\n-            if get_version() >= (14, 0, 0) {\n-                smallvec![\"sse4.2\", \"crc32\"]\n-            } else {\n-                smallvec![\"sse4.2\"]\n-            }\n-        }\n+        (\"x86\", \"sse4.2\") => smallvec![\"sse4.2\", \"crc32\"],\n         (\"x86\", \"pclmulqdq\") => smallvec![\"pclmul\"],\n         (\"x86\", \"rdrand\") => smallvec![\"rdrnd\"],\n         (\"x86\", \"bmi1\") => smallvec![\"bmi\"],\n@@ -217,7 +211,7 @@ pub fn check_tied_features(\n /// Must express features in the way Rust understands them\n pub fn target_features(sess: &Session, allow_unstable: bool) -> Vec<Symbol> {\n     let target_machine = create_informational_target_machine(sess);\n-    let mut features: Vec<Symbol> = supported_target_features(sess)\n+    supported_target_features(sess)\n         .iter()\n         .filter_map(|&(feature, gate)| {\n             if sess.is_nightly_build() || allow_unstable || gate.is_none() {\n@@ -237,16 +231,7 @@ pub fn target_features(sess: &Session, allow_unstable: bool) -> Vec<Symbol> {\n             true\n         })\n         .map(|feature| Symbol::intern(feature))\n-        .collect();\n-\n-    // LLVM 14 changed the ABI for i128 arguments to __float/__fix builtins on Win64\n-    // (see https://reviews.llvm.org/D110413). This unstable target feature is intended for use\n-    // by compiler-builtins, to export the builtins with the expected, LLVM-version-dependent ABI.\n-    // The target feature can be dropped once we no longer support older LLVM versions.\n-    if sess.is_nightly_build() && get_version() >= (14, 0, 0) {\n-        features.push(Symbol::intern(\"llvm14-builtins-abi\"));\n-    }\n-    features\n+        .collect()\n }\n \n pub fn print_version() {\n@@ -494,11 +479,6 @@ pub(crate) fn global_llvm_features(sess: &Session, diagnostics: bool) -> Vec<Str\n         .flatten();\n     features.extend(feats);\n \n-    // FIXME: Move v8a to target definition list when earliest supported LLVM is 14.\n-    if get_version() >= (14, 0, 0) && sess.target.arch == \"aarch64\" {\n-        features.push(\"+v8a\".into());\n-    }\n-\n     if diagnostics && let Some(f) = check_tied_features(sess, &featsmap) {\n         sess.emit_err(TargetFeatureDisableOrEnable {\n             features: f,"}, {"sha": "0cb4bc806a1370db7b1b9fe135ed15f8ea0b05fc", "filename": "compiler/rustc_codegen_llvm/src/type_of.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a1ba8611907f847d8bc43565566ee739dd9d5202/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ba8611907f847d8bc43565566ee739dd9d5202/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs?ref=a1ba8611907f847d8bc43565566ee739dd9d5202", "patch": "@@ -1,6 +1,5 @@\n use crate::common::*;\n use crate::context::TypeLowering;\n-use crate::llvm_util::get_version;\n use crate::type_::Type;\n use rustc_codegen_ssa::traits::*;\n use rustc_middle::bug;\n@@ -43,10 +42,8 @@ fn uncached_llvm_type<'a, 'tcx>(\n         // in problematically distinct types due to HRTB and subtyping (see #47638).\n         // ty::Dynamic(..) |\n         ty::Adt(..) | ty::Closure(..) | ty::Foreign(..) | ty::Generator(..) | ty::Str\n-            // For performance reasons we use names only when emitting LLVM IR. Unless we are on\n-            // LLVM < 14, where the use of unnamed types resulted in various issues, e.g., #76213,\n-            // #79564, and #79246.\n-            if get_version() < (14, 0, 0) || !cx.sess().fewer_names() =>\n+            // For performance reasons we use names only when emitting LLVM IR.\n+            if !cx.sess().fewer_names() =>\n         {\n             let mut name = with_no_visible_paths!(with_no_trimmed_paths!(layout.ty.to_string()));\n             if let (&ty::Adt(def, _), &Variants::Single { index }) ="}, {"sha": "fbc1d8ef310c69b896e4a9e608bfaf37d7c22fd4", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 3, "deletions": 41, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/a1ba8611907f847d8bc43565566ee739dd9d5202/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/a1ba8611907f847d8bc43565566ee739dd9d5202/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=a1ba8611907f847d8bc43565566ee739dd9d5202", "patch": "@@ -14,6 +14,7 @@\n #include \"llvm/IR/AssemblyAnnotationWriter.h\"\n #include \"llvm/IR/IntrinsicInst.h\"\n #include \"llvm/IR/Verifier.h\"\n+#include \"llvm/MC/TargetRegistry.h\"\n #include \"llvm/Object/ObjectFile.h\"\n #include \"llvm/Object/IRObjectFile.h\"\n #include \"llvm/Passes/PassBuilder.h\"\n@@ -25,11 +26,6 @@\n #include \"llvm/Support/VirtualFileSystem.h\"\n #endif\n #include \"llvm/Support/Host.h\"\n-#if LLVM_VERSION_LT(14, 0)\n-#include \"llvm/Support/TargetRegistry.h\"\n-#else\n-#include \"llvm/MC/TargetRegistry.h\"\n-#endif\n #include \"llvm/Target/TargetMachine.h\"\n #include \"llvm/Transforms/IPO/PassManagerBuilder.h\"\n #include \"llvm/Transforms/IPO/AlwaysInliner.h\"\n@@ -267,10 +263,6 @@ enum class LLVMRustPassBuilderOptLevel {\n   Oz,\n };\n \n-#if LLVM_VERSION_LT(14,0)\n-using OptimizationLevel = PassBuilder::OptimizationLevel;\n-#endif\n-\n static OptimizationLevel fromRust(LLVMRustPassBuilderOptLevel Level) {\n   switch (Level) {\n   case LLVMRustPassBuilderOptLevel::O0:\n@@ -747,27 +739,18 @@ LLVMRustOptimize(\n \n   if (SanitizerOptions) {\n     if (SanitizerOptions->SanitizeMemory) {\n-#if LLVM_VERSION_GE(14, 0)\n       MemorySanitizerOptions Options(\n           SanitizerOptions->SanitizeMemoryTrackOrigins,\n           SanitizerOptions->SanitizeMemoryRecover,\n           /*CompileKernel=*/false,\n           /*EagerChecks=*/true);\n-#else\n-      MemorySanitizerOptions Options(\n-          SanitizerOptions->SanitizeMemoryTrackOrigins,\n-          SanitizerOptions->SanitizeMemoryRecover,\n-          /*CompileKernel=*/false);\n-#endif\n       OptimizerLastEPCallbacks.push_back(\n         [Options](ModulePassManager &MPM, OptimizationLevel Level) {\n-#if LLVM_VERSION_GE(14, 0) && LLVM_VERSION_LT(16, 0)\n+#if LLVM_VERSION_LT(16, 0)\n           MPM.addPass(ModuleMemorySanitizerPass(Options));\n+          MPM.addPass(createModuleToFunctionPassAdaptor(MemorySanitizerPass(Options)));\n #else\n           MPM.addPass(MemorySanitizerPass(Options));\n-#endif\n-#if LLVM_VERSION_LT(16, 0)\n-          MPM.addPass(createModuleToFunctionPassAdaptor(MemorySanitizerPass(Options)));\n #endif\n         }\n       );\n@@ -776,11 +759,7 @@ LLVMRustOptimize(\n     if (SanitizerOptions->SanitizeThread) {\n       OptimizerLastEPCallbacks.push_back(\n         [](ModulePassManager &MPM, OptimizationLevel Level) {\n-#if LLVM_VERSION_GE(14, 0)\n           MPM.addPass(ModuleThreadSanitizerPass());\n-#else\n-          MPM.addPass(ThreadSanitizerPass());\n-#endif\n           MPM.addPass(createModuleToFunctionPassAdaptor(ThreadSanitizerPass()));\n         }\n       );\n@@ -792,7 +771,6 @@ LLVMRustOptimize(\n #if LLVM_VERSION_LT(15, 0)\n           MPM.addPass(RequireAnalysisPass<ASanGlobalsMetadataAnalysis, Module>());\n #endif\n-#if LLVM_VERSION_GE(14, 0)\n           AddressSanitizerOptions opts = AddressSanitizerOptions{\n             /*CompileKernel=*/false,\n             SanitizerOptions->SanitizeAddressRecover,\n@@ -803,29 +781,17 @@ LLVMRustOptimize(\n           MPM.addPass(ModuleAddressSanitizerPass(opts));\n #else\n           MPM.addPass(AddressSanitizerPass(opts));\n-#endif\n-#else\n-          MPM.addPass(ModuleAddressSanitizerPass(\n-              /*CompileKernel=*/false, SanitizerOptions->SanitizeAddressRecover));\n-          MPM.addPass(createModuleToFunctionPassAdaptor(AddressSanitizerPass(\n-              /*CompileKernel=*/false, SanitizerOptions->SanitizeAddressRecover,\n-              /*UseAfterScope=*/true)));\n #endif\n         }\n       );\n     }\n     if (SanitizerOptions->SanitizeHWAddress) {\n       OptimizerLastEPCallbacks.push_back(\n         [SanitizerOptions](ModulePassManager &MPM, OptimizationLevel Level) {\n-#if LLVM_VERSION_GE(14, 0)\n           HWAddressSanitizerOptions opts(\n               /*CompileKernel=*/false, SanitizerOptions->SanitizeHWAddressRecover,\n               /*DisableOptimization=*/false);\n           MPM.addPass(HWAddressSanitizerPass(opts));\n-#else\n-          MPM.addPass(HWAddressSanitizerPass(\n-              /*CompileKernel=*/false, SanitizerOptions->SanitizeHWAddressRecover));\n-#endif\n         }\n       );\n     }\n@@ -1328,11 +1294,7 @@ extern \"C\" bool\n LLVMRustPrepareThinLTOResolveWeak(const LLVMRustThinLTOData *Data, LLVMModuleRef M) {\n   Module &Mod = *unwrap(M);\n   const auto &DefinedGlobals = Data->ModuleToDefinedGVSummaries.lookup(Mod.getModuleIdentifier());\n-#if LLVM_VERSION_GE(14, 0)\n   thinLTOFinalizeInModule(Mod, DefinedGlobals, /*PropagateAttrs=*/true);\n-#else\n-  thinLTOResolvePrevailingInModule(Mod, DefinedGlobals);\n-#endif\n   return true;\n }\n "}, {"sha": "b1e6534944db37ff1c08ffa83cb57bbcf4f8324f", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a1ba8611907f847d8bc43565566ee739dd9d5202/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/a1ba8611907f847d8bc43565566ee739dd9d5202/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=a1ba8611907f847d8bc43565566ee739dd9d5202", "patch": "@@ -63,11 +63,7 @@ static LLVM_THREAD_LOCAL char *LastError;\n //\n // Notably it exits the process with code 101, unlike LLVM's default of 1.\n static void FatalErrorHandler(void *UserData,\n-#if LLVM_VERSION_LT(14, 0)\n-                              const std::string& Reason,\n-#else\n                               const char* Reason,\n-#endif\n                               bool GenCrashDiag) {\n   // Do the same thing that the default error handler does.\n   std::cerr << \"LLVM ERROR: \" << Reason << std::endl;\n@@ -249,18 +245,10 @@ static Attribute::AttrKind fromRust(LLVMRustAttribute Kind) {\n template<typename T> static inline void AddAttributes(T *t, unsigned Index,\n                                                       LLVMAttributeRef *Attrs, size_t AttrsLen) {\n   AttributeList PAL = t->getAttributes();\n-  AttributeList PALNew;\n-#if LLVM_VERSION_LT(14, 0)\n-  AttrBuilder B;\n-  for (LLVMAttributeRef Attr : makeArrayRef(Attrs, AttrsLen))\n-    B.addAttribute(unwrap(Attr));\n-  PALNew = PAL.addAttributes(t->getContext(), Index, B);\n-#else\n   AttrBuilder B(t->getContext());\n   for (LLVMAttributeRef Attr : ArrayRef<LLVMAttributeRef>(Attrs, AttrsLen))\n     B.addAttribute(unwrap(Attr));\n-  PALNew = PAL.addAttributesAtIndex(t->getContext(), Index, B);\n-#endif\n+  AttributeList PALNew = PAL.addAttributesAtIndex(t->getContext(), Index, B);\n   t->setAttributes(PALNew);\n }\n "}, {"sha": "b84783c0a407b91bcf756752720bbbb5c57e7843", "filename": "compiler/rustc_target/src/spec/aarch64_be_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1ba8611907f847d8bc43565566ee739dd9d5202/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_be_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ba8611907f847d8bc43565566ee739dd9d5202/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_be_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_be_unknown_linux_gnu.rs?ref=a1ba8611907f847d8bc43565566ee739dd9d5202", "patch": "@@ -8,7 +8,7 @@ pub fn target() -> Target {\n         data_layout: \"E-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".into(),\n         arch: \"aarch64\".into(),\n         options: TargetOptions {\n-            features: \"+outline-atomics\".into(),\n+            features: \"+v8a,+outline-atomics\".into(),\n             max_atomic_width: Some(128),\n             mcount: \"\\u{1}_mcount\".into(),\n             endian: Endian::Big,"}, {"sha": "a24e0119f25e9de250eca6beabf26a99a613d40a", "filename": "compiler/rustc_target/src/spec/aarch64_be_unknown_linux_gnu_ilp32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1ba8611907f847d8bc43565566ee739dd9d5202/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_be_unknown_linux_gnu_ilp32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ba8611907f847d8bc43565566ee739dd9d5202/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_be_unknown_linux_gnu_ilp32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_be_unknown_linux_gnu_ilp32.rs?ref=a1ba8611907f847d8bc43565566ee739dd9d5202", "patch": "@@ -12,7 +12,7 @@ pub fn target() -> Target {\n         arch: \"aarch64\".into(),\n         options: TargetOptions {\n             abi: \"ilp32\".into(),\n-            features: \"+outline-atomics\".into(),\n+            features: \"+v8a,+outline-atomics\".into(),\n             mcount: \"\\u{1}_mcount\".into(),\n             endian: Endian::Big,\n             ..base"}, {"sha": "437fd601580309e55d7663eb1c84f20e25f95b93", "filename": "compiler/rustc_target/src/spec/aarch64_kmc_solid_asp3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1ba8611907f847d8bc43565566ee739dd9d5202/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_kmc_solid_asp3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ba8611907f847d8bc43565566ee739dd9d5202/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_kmc_solid_asp3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_kmc_solid_asp3.rs?ref=a1ba8611907f847d8bc43565566ee739dd9d5202", "patch": "@@ -9,7 +9,7 @@ pub fn target() -> Target {\n         arch: \"aarch64\".into(),\n         options: TargetOptions {\n             linker: Some(\"aarch64-kmc-elf-gcc\".into()),\n-            features: \"+neon,+fp-armv8\".into(),\n+            features: \"+v8a,+neon,+fp-armv8\".into(),\n             relocation_model: RelocModel::Static,\n             disable_redzone: true,\n             max_atomic_width: Some(128),"}, {"sha": "071b727b35c56b2a10e0a26d4a25c7e7e2e0398e", "filename": "compiler/rustc_target/src/spec/aarch64_linux_android.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1ba8611907f847d8bc43565566ee739dd9d5202/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ba8611907f847d8bc43565566ee739dd9d5202/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_linux_android.rs?ref=a1ba8611907f847d8bc43565566ee739dd9d5202", "patch": "@@ -13,7 +13,7 @@ pub fn target() -> Target {\n             max_atomic_width: Some(128),\n             // As documented in https://developer.android.com/ndk/guides/cpu-features.html\n             // the neon (ASIMD) and FP must exist on all android aarch64 targets.\n-            features: \"+neon,+fp-armv8\".into(),\n+            features: \"+v8a,+neon,+fp-armv8\".into(),\n             supported_sanitizers: SanitizerSet::CFI\n                 | SanitizerSet::HWADDRESS\n                 | SanitizerSet::MEMTAG"}, {"sha": "e271bdc8a015bc6339c18704b7a7532095b95894", "filename": "compiler/rustc_target/src/spec/aarch64_nintendo_switch_freestanding.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1ba8611907f847d8bc43565566ee739dd9d5202/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_nintendo_switch_freestanding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ba8611907f847d8bc43565566ee739dd9d5202/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_nintendo_switch_freestanding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_nintendo_switch_freestanding.rs?ref=a1ba8611907f847d8bc43565566ee739dd9d5202", "patch": "@@ -10,6 +10,7 @@ pub fn target() -> Target {\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".into(),\n         arch: \"aarch64\".into(),\n         options: TargetOptions {\n+            features: \"+v8a\".into(),\n             linker_flavor: LinkerFlavor::Gnu(Cc::No, Lld::Yes),\n             linker: Some(\"rust-lld\".into()),\n             link_script: Some(LINKER_SCRIPT.into()),"}, {"sha": "cf1d7ca1158d50eedd4441f1758a64e16954097b", "filename": "compiler/rustc_target/src/spec/aarch64_pc_windows_gnullvm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1ba8611907f847d8bc43565566ee739dd9d5202/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_pc_windows_gnullvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ba8611907f847d8bc43565566ee739dd9d5202/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_pc_windows_gnullvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_pc_windows_gnullvm.rs?ref=a1ba8611907f847d8bc43565566ee739dd9d5202", "patch": "@@ -3,7 +3,7 @@ use crate::spec::Target;\n pub fn target() -> Target {\n     let mut base = super::windows_gnullvm_base::opts();\n     base.max_atomic_width = Some(128);\n-    base.features = \"+neon,+fp-armv8\".into();\n+    base.features = \"+v8a,+neon,+fp-armv8\".into();\n     base.linker = Some(\"aarch64-w64-mingw32-clang\".into());\n \n     Target {"}, {"sha": "56b76bc7ada9aa709326c6e99138dc83005f9d48", "filename": "compiler/rustc_target/src/spec/aarch64_pc_windows_msvc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1ba8611907f847d8bc43565566ee739dd9d5202/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ba8611907f847d8bc43565566ee739dd9d5202/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_pc_windows_msvc.rs?ref=a1ba8611907f847d8bc43565566ee739dd9d5202", "patch": "@@ -3,7 +3,7 @@ use crate::spec::Target;\n pub fn target() -> Target {\n     let mut base = super::windows_msvc_base::opts();\n     base.max_atomic_width = Some(128);\n-    base.features = \"+neon,+fp-armv8\".into();\n+    base.features = \"+v8a,+neon,+fp-armv8\".into();\n \n     Target {\n         llvm_target: \"aarch64-pc-windows-msvc\".into(),"}, {"sha": "84fa9814bbeab7d9d4221207a28ab0fdb56fdac6", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_freebsd.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1ba8611907f847d8bc43565566ee739dd9d5202/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ba8611907f847d8bc43565566ee739dd9d5202/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_freebsd.rs?ref=a1ba8611907f847d8bc43565566ee739dd9d5202", "patch": "@@ -7,6 +7,7 @@ pub fn target() -> Target {\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".into(),\n         arch: \"aarch64\".into(),\n         options: TargetOptions {\n+            features: \"+v8a\".into(),\n             max_atomic_width: Some(128),\n             supported_sanitizers: SanitizerSet::ADDRESS\n                 | SanitizerSet::CFI"}, {"sha": "a5683fa7348a75752a0b72a83ff86955aa45a25a", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_fuchsia.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1ba8611907f847d8bc43565566ee739dd9d5202/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ba8611907f847d8bc43565566ee739dd9d5202/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_fuchsia.rs?ref=a1ba8611907f847d8bc43565566ee739dd9d5202", "patch": "@@ -7,6 +7,7 @@ pub fn target() -> Target {\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".into(),\n         arch: \"aarch64\".into(),\n         options: TargetOptions {\n+            features: \"+v8a\".into(),\n             max_atomic_width: Some(128),\n             supported_sanitizers: SanitizerSet::ADDRESS\n                 | SanitizerSet::CFI"}, {"sha": "87e8d627026917f8b63fe5e9ae6d9b9872b29adc", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_hermit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1ba8611907f847d8bc43565566ee739dd9d5202/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_hermit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ba8611907f847d8bc43565566ee739dd9d5202/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_hermit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_hermit.rs?ref=a1ba8611907f847d8bc43565566ee739dd9d5202", "patch": "@@ -3,7 +3,7 @@ use crate::spec::Target;\n pub fn target() -> Target {\n     let mut base = super::hermit_base::opts();\n     base.max_atomic_width = Some(128);\n-    base.features = \"+strict-align,+neon,+fp-armv8\".into();\n+    base.features = \"+v8a,+strict-align,+neon,+fp-armv8\".into();\n \n     Target {\n         llvm_target: \"aarch64-unknown-hermit\".into(),"}, {"sha": "da246089440fc940e15a9c47c4547f83381518aa", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1ba8611907f847d8bc43565566ee739dd9d5202/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ba8611907f847d8bc43565566ee739dd9d5202/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu.rs?ref=a1ba8611907f847d8bc43565566ee739dd9d5202", "patch": "@@ -7,7 +7,7 @@ pub fn target() -> Target {\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".into(),\n         arch: \"aarch64\".into(),\n         options: TargetOptions {\n-            features: \"+outline-atomics\".into(),\n+            features: \"+v8a,+outline-atomics\".into(),\n             mcount: \"\\u{1}_mcount\".into(),\n             max_atomic_width: Some(128),\n             supported_sanitizers: SanitizerSet::ADDRESS"}, {"sha": "ad9df53c2b7fba84fb2ee5c76cc5bea7a7e6b338", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_linux_gnu_ilp32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1ba8611907f847d8bc43565566ee739dd9d5202/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu_ilp32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ba8611907f847d8bc43565566ee739dd9d5202/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu_ilp32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu_ilp32.rs?ref=a1ba8611907f847d8bc43565566ee739dd9d5202", "patch": "@@ -8,7 +8,7 @@ pub fn target() -> Target {\n         arch: \"aarch64\".into(),\n         options: TargetOptions {\n             abi: \"ilp32\".into(),\n-            features: \"+outline-atomics\".into(),\n+            features: \"+v8a,+outline-atomics\".into(),\n             max_atomic_width: Some(128),\n             mcount: \"\\u{1}_mcount\".into(),\n             ..super::linux_gnu_base::opts()"}, {"sha": "d0c950c2e32f6e5038817f1dc8358b0072e74a88", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_linux_musl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1ba8611907f847d8bc43565566ee739dd9d5202/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ba8611907f847d8bc43565566ee739dd9d5202/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_musl.rs?ref=a1ba8611907f847d8bc43565566ee739dd9d5202", "patch": "@@ -4,6 +4,7 @@ pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n     base.max_atomic_width = Some(128);\n     base.supports_xray = true;\n+    base.features = \"+v8a\".into();\n \n     Target {\n         llvm_target: \"aarch64-unknown-linux-musl\".into(),"}, {"sha": "a58b64d3d03a8aa29be44e85de78bc343462f93a", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_netbsd.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1ba8611907f847d8bc43565566ee739dd9d5202/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ba8611907f847d8bc43565566ee739dd9d5202/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_netbsd.rs?ref=a1ba8611907f847d8bc43565566ee739dd9d5202", "patch": "@@ -7,6 +7,7 @@ pub fn target() -> Target {\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".into(),\n         arch: \"aarch64\".into(),\n         options: TargetOptions {\n+            features: \"+v8a\".into(),\n             mcount: \"__mcount\".into(),\n             max_atomic_width: Some(128),\n             ..super::netbsd_base::opts()"}, {"sha": "30fbe6f3c153acf37cb293643c976a38b63ed612", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_none.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1ba8611907f847d8bc43565566ee739dd9d5202/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ba8611907f847d8bc43565566ee739dd9d5202/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none.rs?ref=a1ba8611907f847d8bc43565566ee739dd9d5202", "patch": "@@ -14,7 +14,7 @@ pub fn target() -> Target {\n     let opts = TargetOptions {\n         linker_flavor: LinkerFlavor::Gnu(Cc::No, Lld::Yes),\n         linker: Some(\"rust-lld\".into()),\n-        features: \"+strict-align,+neon,+fp-armv8\".into(),\n+        features: \"+v8a,+strict-align,+neon,+fp-armv8\".into(),\n         supported_sanitizers: SanitizerSet::KCFI,\n         relocation_model: RelocModel::Static,\n         disable_redzone: true,"}, {"sha": "9dfa1f268ac51f7a130d3a8c5cd5dfd9091396d1", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_none_softfloat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1ba8611907f847d8bc43565566ee739dd9d5202/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none_softfloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ba8611907f847d8bc43565566ee739dd9d5202/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none_softfloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none_softfloat.rs?ref=a1ba8611907f847d8bc43565566ee739dd9d5202", "patch": "@@ -13,7 +13,7 @@ pub fn target() -> Target {\n         abi: \"softfloat\".into(),\n         linker_flavor: LinkerFlavor::Gnu(Cc::No, Lld::Yes),\n         linker: Some(\"rust-lld\".into()),\n-        features: \"+strict-align,-neon,-fp-armv8\".into(),\n+        features: \"+v8a,+strict-align,-neon,-fp-armv8\".into(),\n         relocation_model: RelocModel::Static,\n         disable_redzone: true,\n         max_atomic_width: Some(128),"}, {"sha": "8c1126ae6d1ccbaf0bd981886ecaa490114b43e9", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_nto_qnx_710.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1ba8611907f847d8bc43565566ee739dd9d5202/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_nto_qnx_710.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ba8611907f847d8bc43565566ee739dd9d5202/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_nto_qnx_710.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_nto_qnx_710.rs?ref=a1ba8611907f847d8bc43565566ee739dd9d5202", "patch": "@@ -17,6 +17,7 @@ pub fn target() -> Target {\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".into(),\n         arch: \"aarch64\".into(),\n         options: TargetOptions {\n+            features: \"+v8a\".into(),\n             max_atomic_width: Some(128),\n             pre_link_args: TargetOptions::link_args(\n                 LinkerFlavor::Gnu(Cc::Yes, Lld::No),"}, {"sha": "224e31af24f7dba659ad4ee870586881ba9a3660", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_openbsd.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a1ba8611907f847d8bc43565566ee739dd9d5202/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ba8611907f847d8bc43565566ee739dd9d5202/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_openbsd.rs?ref=a1ba8611907f847d8bc43565566ee739dd9d5202", "patch": "@@ -6,6 +6,10 @@ pub fn target() -> Target {\n         pointer_width: 64,\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".into(),\n         arch: \"aarch64\".into(),\n-        options: TargetOptions { max_atomic_width: Some(128), ..super::openbsd_base::opts() },\n+        options: TargetOptions {\n+            features: \"+v8a\".into(),\n+            max_atomic_width: Some(128),\n+            ..super::openbsd_base::opts()\n+        },\n     }\n }"}, {"sha": "5650162cdbc99886896eef26dbd5f4fed1f54ad2", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_redox.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1ba8611907f847d8bc43565566ee739dd9d5202/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_redox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ba8611907f847d8bc43565566ee739dd9d5202/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_redox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_redox.rs?ref=a1ba8611907f847d8bc43565566ee739dd9d5202", "patch": "@@ -3,6 +3,7 @@ use crate::spec::Target;\n pub fn target() -> Target {\n     let mut base = super::redox_base::opts();\n     base.max_atomic_width = Some(128);\n+    base.features = \"+v8a\".into();\n \n     Target {\n         llvm_target: \"aarch64-unknown-redox\".into(),"}, {"sha": "82fb015569d637ceb77916ccf165204f6885540c", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_uefi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1ba8611907f847d8bc43565566ee739dd9d5202/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_uefi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ba8611907f847d8bc43565566ee739dd9d5202/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_uefi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_uefi.rs?ref=a1ba8611907f847d8bc43565566ee739dd9d5202", "patch": "@@ -9,6 +9,7 @@ pub fn target() -> Target {\n \n     base.max_atomic_width = Some(128);\n     base.add_pre_link_args(LinkerFlavor::Msvc(Lld::No), &[\"/machine:arm64\"]);\n+    base.features = \"+v8a\".into();\n \n     Target {\n         llvm_target: \"aarch64-unknown-windows\".into(),"}, {"sha": "d39442d917760ef3017823cc493b715c5a4cbf58", "filename": "compiler/rustc_target/src/spec/aarch64_uwp_windows_msvc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1ba8611907f847d8bc43565566ee739dd9d5202/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_uwp_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ba8611907f847d8bc43565566ee739dd9d5202/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_uwp_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_uwp_windows_msvc.rs?ref=a1ba8611907f847d8bc43565566ee739dd9d5202", "patch": "@@ -3,6 +3,7 @@ use crate::spec::Target;\n pub fn target() -> Target {\n     let mut base = super::windows_uwp_msvc_base::opts();\n     base.max_atomic_width = Some(128);\n+    base.features = \"+v8a\".into();\n \n     Target {\n         llvm_target: \"aarch64-pc-windows-msvc\".into(),"}, {"sha": "7e2af4c7a6a492ba3e03bb0db83230ae7c879b08", "filename": "compiler/rustc_target/src/spec/aarch64_wrs_vxworks.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a1ba8611907f847d8bc43565566ee739dd9d5202/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ba8611907f847d8bc43565566ee739dd9d5202/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_wrs_vxworks.rs?ref=a1ba8611907f847d8bc43565566ee739dd9d5202", "patch": "@@ -6,6 +6,10 @@ pub fn target() -> Target {\n         pointer_width: 64,\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".into(),\n         arch: \"aarch64\".into(),\n-        options: TargetOptions { max_atomic_width: Some(128), ..super::vxworks_base::opts() },\n+        options: TargetOptions {\n+            features: \"+v8a\".into(),\n+            max_atomic_width: Some(128),\n+            ..super::vxworks_base::opts()\n+        },\n     }\n }"}, {"sha": "c757ed45e4725c083aa7627db6ec013137971467", "filename": "compiler/rustc_target/src/spec/arm64_32_apple_watchos.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1ba8611907f847d8bc43565566ee739dd9d5202/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm64_32_apple_watchos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ba8611907f847d8bc43565566ee739dd9d5202/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm64_32_apple_watchos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm64_32_apple_watchos.rs?ref=a1ba8611907f847d8bc43565566ee739dd9d5202", "patch": "@@ -9,7 +9,7 @@ pub fn target() -> Target {\n         data_layout: \"e-m:o-p:32:32-i64:64-i128:128-n32:64-S128\".into(),\n         arch: \"aarch64\".into(),\n         options: TargetOptions {\n-            features: \"+neon,+fp-armv8,+apple-a7\".into(),\n+            features: \"+v8a,+neon,+fp-armv8,+apple-a7\".into(),\n             max_atomic_width: Some(128),\n             forces_embed_bitcode: true,\n             dynamic_linking: false,"}, {"sha": "349cd91c89e694e7f7612812713acb8f79a8e285", "filename": "library/std/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1ba8611907f847d8bc43565566ee739dd9d5202/library%2Fstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a1ba8611907f847d8bc43565566ee739dd9d5202/library%2Fstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2FCargo.toml?ref=a1ba8611907f847d8bc43565566ee739dd9d5202", "patch": "@@ -16,7 +16,7 @@ panic_unwind = { path = \"../panic_unwind\", optional = true }\n panic_abort = { path = \"../panic_abort\" }\n core = { path = \"../core\" }\n libc = { version = \"0.2.138\", default-features = false, features = ['rustc-dep-of-std'] }\n-compiler_builtins = { version = \"0.1.85\" }\n+compiler_builtins = { version = \"0.1.87\" }\n profiler_builtins = { path = \"../profiler_builtins\", optional = true }\n unwind = { path = \"../unwind\" }\n hashbrown = { version = \"0.12\", default-features = false, features = ['rustc-dep-of-std'] }"}, {"sha": "9235de75ec670939d7a7ac408fc107c8ceed91f0", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1ba8611907f847d8bc43565566ee739dd9d5202/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ba8611907f847d8bc43565566ee739dd9d5202/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=a1ba8611907f847d8bc43565566ee739dd9d5202", "patch": "@@ -561,11 +561,11 @@ fn check_llvm_version(builder: &Builder<'_>, llvm_config: &Path) {\n     let version = output(cmd.arg(\"--version\"));\n     let mut parts = version.split('.').take(2).filter_map(|s| s.parse::<u32>().ok());\n     if let (Some(major), Some(_minor)) = (parts.next(), parts.next()) {\n-        if major >= 13 {\n+        if major >= 14 {\n             return;\n         }\n     }\n-    panic!(\"\\n\\nbad LLVM version: {}, need >=13.0\\n\\n\", version)\n+    panic!(\"\\n\\nbad LLVM version: {}, need >=14.0\\n\\n\", version)\n }\n \n fn configure_cmake("}, {"sha": "bcbf58253b1902901f8b95d7f2037c60c05f9c50", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-llvm-13-stage1/Dockerfile", "status": "removed", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/9bb6e60d1f1360234aae90c97964c0fa5524f141/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-13-stage1%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/9bb6e60d1f1360234aae90c97964c0fa5524f141/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-13-stage1%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-13-stage1%2FDockerfile?ref=9bb6e60d1f1360234aae90c97964c0fa5524f141", "patch": "@@ -1,49 +0,0 @@\n-FROM ubuntu:22.04\n-\n-ARG DEBIAN_FRONTEND=noninteractive\n-RUN apt-get update && apt-get install -y --no-install-recommends \\\n-    g++ \\\n-    gcc-multilib \\\n-    make \\\n-    ninja-build \\\n-    file \\\n-    curl \\\n-    ca-certificates \\\n-    python2.7 \\\n-    git \\\n-    cmake \\\n-    sudo \\\n-    gdb \\\n-    llvm-13-tools \\\n-    llvm-13-dev \\\n-    libedit-dev \\\n-    libssl-dev \\\n-    pkg-config \\\n-    zlib1g-dev \\\n-    xz-utils \\\n-    nodejs \\\n-    && rm -rf /var/lib/apt/lists/*\n-\n-COPY scripts/sccache.sh /scripts/\n-RUN sh /scripts/sccache.sh\n-\n-# We are disabling CI LLVM since this builder is intentionally using a host\n-# LLVM, rather than the typical src/llvm-project LLVM.\n-ENV NO_DOWNLOAD_CI_LLVM 1\n-\n-# Using llvm-link-shared due to libffi issues -- see #34486\n-ENV RUST_CONFIGURE_ARGS \\\n-    --build=x86_64-unknown-linux-gnu \\\n-    --llvm-root=/usr/lib/llvm-13 \\\n-    --enable-llvm-link-shared \\\n-    --set rust.thin-lto-import-instr-limit=10\n-\n-ENV SCRIPT python2.7 ../x.py --stage 1 test --exclude src/tools/tidy && \\\n-    # Run the `mir-opt` tests again but this time for a 32-bit target.\n-    # This enforces that tests using `// EMIT_MIR_FOR_EACH_BIT_WIDTH` have\n-    # both 32-bit and 64-bit outputs updated by the PR author, before\n-    # the PR is approved and tested for merging.\n-    # It will also detect tests lacking `// EMIT_MIR_FOR_EACH_BIT_WIDTH`,\n-    # despite having different output on 32-bit vs 64-bit targets.\n-    python2.7 ../x.py --stage 1 test tests/mir-opt \\\n-    --host='' --target=i686-unknown-linux-gnu"}, {"sha": "b99a0886b4d9bfebb89e871c0f4c0b5f939e1d8e", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-llvm-14-stage1/Dockerfile", "status": "renamed", "additions": 8, "deletions": 28, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a1ba8611907f847d8bc43565566ee739dd9d5202/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-14-stage1%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/a1ba8611907f847d8bc43565566ee739dd9d5202/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-14-stage1%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-14-stage1%2FDockerfile?ref=a1ba8611907f847d8bc43565566ee739dd9d5202", "patch": "@@ -1,8 +1,6 @@\n FROM ubuntu:22.04\n \n ARG DEBIAN_FRONTEND=noninteractive\n-\n-# NOTE: intentionally installs both python2 and python3 so we can test support for both.\n RUN apt-get update && apt-get install -y --no-install-recommends \\\n   g++ \\\n   gcc-multilib \\\n@@ -11,28 +9,20 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   file \\\n   curl \\\n   ca-certificates \\\n-  python2.7 \\\n-  python3.9 \\\n+  python3 \\\n   git \\\n   cmake \\\n   sudo \\\n   gdb \\\n-  llvm-13-tools \\\n-  llvm-13-dev \\\n+  llvm-14-tools \\\n+  llvm-14-dev \\\n   libedit-dev \\\n   libssl-dev \\\n   pkg-config \\\n   zlib1g-dev \\\n   xz-utils \\\n   nodejs \\\n-  \\\n-# Install powershell so we can test x.ps1 on Linux\n-    apt-transport-https software-properties-common && \\\n-    curl -s \"https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb\" > packages-microsoft-prod.deb && \\\n-    dpkg -i packages-microsoft-prod.deb && \\\n-    apt-get update && \\\n-    apt-get install -y powershell \\\n-    && rm -rf /var/lib/apt/lists/*\n+  && rm -rf /var/lib/apt/lists/*\n \n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n@@ -44,26 +34,16 @@ ENV NO_DOWNLOAD_CI_LLVM 1\n # Using llvm-link-shared due to libffi issues -- see #34486\n ENV RUST_CONFIGURE_ARGS \\\n       --build=x86_64-unknown-linux-gnu \\\n-      --llvm-root=/usr/lib/llvm-13 \\\n+      --llvm-root=/usr/lib/llvm-14 \\\n       --enable-llvm-link-shared \\\n       --set rust.thin-lto-import-instr-limit=10\n \n-# NOTE: intentionally uses all of `x.py`, `x`, and `x.ps1` to make sure they all work on Linux.\n-ENV SCRIPT ../x.py --stage 2 test --exclude src/tools/tidy && \\\n+ENV SCRIPT ../x.py --stage 1 test --exclude src/tools/tidy && \\\n            # Run the `mir-opt` tests again but this time for a 32-bit target.\n            # This enforces that tests using `// EMIT_MIR_FOR_EACH_BIT_WIDTH` have\n            # both 32-bit and 64-bit outputs updated by the PR author, before\n            # the PR is approved and tested for merging.\n            # It will also detect tests lacking `// EMIT_MIR_FOR_EACH_BIT_WIDTH`,\n            # despite having different output on 32-bit vs 64-bit targets.\n-           ../x --stage 2 test tests/mir-opt \\\n-                             --host='' --target=i686-unknown-linux-gnu && \\\n-           # Run the UI test suite again, but in `--pass=check` mode\n-           #\n-           # This is intended to make sure that both `--pass=check` continues to\n-           # work.\n-           #\n-           ../x.ps1 --stage 2 test tests/ui --pass=check \\\n-                             --host='' --target=i686-unknown-linux-gnu && \\\n-           # Run tidy at the very end, after all the other tests.\n-           python2.7 ../x.py --stage 2 test src/tools/tidy\n+           ../x.py --stage 1 test tests/mir-opt \\\n+                             --host='' --target=i686-unknown-linux-gnu", "previous_filename": "src/ci/docker/host-x86_64/x86_64-gnu-llvm-13/Dockerfile"}, {"sha": "ad9c308ad852db9c580ecfdd644b4f3dd9b995bf", "filename": "src/ci/github-actions/ci.yml", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a1ba8611907f847d8bc43565566ee739dd9d5202/src%2Fci%2Fgithub-actions%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/a1ba8611907f847d8bc43565566ee739dd9d5202/src%2Fci%2Fgithub-actions%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fgithub-actions%2Fci.yml?ref=a1ba8611907f847d8bc43565566ee739dd9d5202", "patch": "@@ -300,7 +300,7 @@ jobs:\n             <<: *job-linux-xl\n             tidy: true\n \n-          - name: x86_64-gnu-llvm-13\n+          - name: x86_64-gnu-llvm-14\n             <<: *job-linux-xl\n             tidy: false\n \n@@ -459,12 +459,7 @@ jobs:\n               RUST_BACKTRACE: 1\n             <<: *job-linux-xl\n \n-          - name: x86_64-gnu-llvm-13\n-            env:\n-              RUST_BACKTRACE: 1\n-            <<: *job-linux-xl\n-\n-          - name: x86_64-gnu-llvm-13-stage1\n+          - name: x86_64-gnu-llvm-14-stage1\n             env:\n               RUST_BACKTRACE: 1\n             <<: *job-linux-xl"}, {"sha": "116edf62bbeda34abc574a42a3dfa7a1db3765cf", "filename": "tests/assembly/align_offset.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1ba8611907f847d8bc43565566ee739dd9d5202/tests%2Fassembly%2Falign_offset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ba8611907f847d8bc43565566ee739dd9d5202/tests%2Fassembly%2Falign_offset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fassembly%2Falign_offset.rs?ref=a1ba8611907f847d8bc43565566ee739dd9d5202", "patch": "@@ -1,7 +1,6 @@\n // assembly-output: emit-asm\n // compile-flags: -Copt-level=1\n // only-x86_64\n-// min-llvm-version: 14.0\n #![crate_type=\"rlib\"]\n \n // CHECK-LABEL: align_offset_byte_ptr"}, {"sha": "d0418d1114289a66649558d117b16829fc3991e6", "filename": "tests/codegen/consts.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1ba8611907f847d8bc43565566ee739dd9d5202/tests%2Fcodegen%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ba8611907f847d8bc43565566ee739dd9d5202/tests%2Fcodegen%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fconsts.rs?ref=a1ba8611907f847d8bc43565566ee739dd9d5202", "patch": "@@ -1,5 +1,4 @@\n // compile-flags: -C no-prepopulate-passes\n-// min-llvm-version: 14.0\n \n #![crate_type = \"lib\"]\n "}, {"sha": "d6caeeee8966985e54e7f46d6fb350600068e581", "filename": "tests/codegen/merge-functions.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1ba8611907f847d8bc43565566ee739dd9d5202/tests%2Fcodegen%2Fmerge-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ba8611907f847d8bc43565566ee739dd9d5202/tests%2Fcodegen%2Fmerge-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fmerge-functions.rs?ref=a1ba8611907f847d8bc43565566ee739dd9d5202", "patch": "@@ -1,4 +1,3 @@\n-// min-llvm-version: 14.0\n // revisions: O Os\n //[Os] compile-flags: -Copt-level=s\n //[O] compile-flags: -O"}, {"sha": "56079d32a8d81000630ac52460d941bed3db2e98", "filename": "tests/codegen/sse42-implies-crc32.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1ba8611907f847d8bc43565566ee739dd9d5202/tests%2Fcodegen%2Fsse42-implies-crc32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ba8611907f847d8bc43565566ee739dd9d5202/tests%2Fcodegen%2Fsse42-implies-crc32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fsse42-implies-crc32.rs?ref=a1ba8611907f847d8bc43565566ee739dd9d5202", "patch": "@@ -1,5 +1,4 @@\n // only-x86_64\n-// min-llvm-version: 14.0\n // compile-flags: -Copt-level=3\n \n #![crate_type = \"lib\"]"}, {"sha": "54e9a9e9bb87694836c06628786a943b7562beff", "filename": "tests/codegen/uninit-consts.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1ba8611907f847d8bc43565566ee739dd9d5202/tests%2Fcodegen%2Funinit-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ba8611907f847d8bc43565566ee739dd9d5202/tests%2Fcodegen%2Funinit-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Funinit-consts.rs?ref=a1ba8611907f847d8bc43565566ee739dd9d5202", "patch": "@@ -1,5 +1,4 @@\n // compile-flags: -C no-prepopulate-passes\n-// min-llvm-version: 14.0\n \n // Check that we use undef (and not zero) for uninitialized bytes in constants.\n "}, {"sha": "9992604221bc4f90e688f520d21a5a27f852af64", "filename": "tests/codegen/vec-in-place.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1ba8611907f847d8bc43565566ee739dd9d5202/tests%2Fcodegen%2Fvec-in-place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ba8611907f847d8bc43565566ee739dd9d5202/tests%2Fcodegen%2Fvec-in-place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fvec-in-place.rs?ref=a1ba8611907f847d8bc43565566ee739dd9d5202", "patch": "@@ -1,4 +1,3 @@\n-// min-llvm-version: 14.0\n // ignore-debug: the debug assertions get in the way\n // compile-flags: -O -Z merge-functions=disabled\n #![crate_type = \"lib\"]"}, {"sha": "4f651b1dcbc29b4947e470d39a10831b5a37e156", "filename": "tests/ui/optimization-remark.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1ba8611907f847d8bc43565566ee739dd9d5202/tests%2Fui%2Foptimization-remark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ba8611907f847d8bc43565566ee739dd9d5202/tests%2Fui%2Foptimization-remark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foptimization-remark.rs?ref=a1ba8611907f847d8bc43565566ee739dd9d5202", "patch": "@@ -1,6 +1,5 @@\n // build-pass\n // ignore-pass\n-// min-llvm-version: 14.0.0\n // revisions: all inline merge1 merge2\n // compile-flags: --crate-type=lib -Cdebuginfo=1 -Copt-level=2\n //"}, {"sha": "0e992b4a5ebbb8293c6d8abc5ee651c8205e64f4", "filename": "tests/ui/sanitize/memory-eager.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a1ba8611907f847d8bc43565566ee739dd9d5202/tests%2Fui%2Fsanitize%2Fmemory-eager.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1ba8611907f847d8bc43565566ee739dd9d5202/tests%2Fui%2Fsanitize%2Fmemory-eager.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsanitize%2Fmemory-eager.rs?ref=a1ba8611907f847d8bc43565566ee739dd9d5202", "patch": "@@ -1,6 +1,5 @@\n // needs-sanitizer-support\n // needs-sanitizer-memory\n-// min-llvm-version: 14.0.0\n //\n // revisions: unoptimized optimized\n //"}]}