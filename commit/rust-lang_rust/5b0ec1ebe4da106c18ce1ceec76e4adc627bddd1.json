{"sha": "5b0ec1ebe4da106c18ce1ceec76e4adc627bddd1", "node_id": "C_kwDOAAsO6NoAKDViMGVjMWViZTRkYTEwNmMxOGNlMWNlZWM3NmU0YWRjNjI3YmRkZDE", "commit": {"author": {"name": "Alex Gaynor", "email": "alex.gaynor@gmail.com", "date": "2022-07-30T03:26:00Z"}, "committer": {"name": "Alex Gaynor", "email": "alex.gaynor@gmail.com", "date": "2022-07-30T03:26:38Z"}, "message": "parallelize HTML checking tool", "tree": {"sha": "0d7efe305e1cf8775571618e0dcef609935ae9d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d7efe305e1cf8775571618e0dcef609935ae9d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b0ec1ebe4da106c18ce1ceec76e4adc627bddd1", "comment_count": 0, "verification": {"verified": false, "reason": "bad_cert", "signature": "-----BEGIN SIGNED MESSAGE-----\nMIIEBwYJKoZIhvcNAQcCoIID+DCCA/QCAQExDTALBglghkgBZQMEAgEwCwYJKoZI\nhvcNAQcBoIICqDCCAqQwggIqoAMCAQICFDpYH5FhXjysjXvqAmDQPXT6RXkYMAoG\nCCqGSM49BAMDMDcxFTATBgNVBAoTDHNpZ3N0b3JlLmRldjEeMBwGA1UEAxMVc2ln\nc3RvcmUtaW50ZXJtZWRpYXRlMB4XDTIyMDczMDAzMjY0MloXDTIyMDczMDAzMzY0\nMlowADBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABFpTl3THLX3cwvmFX+n2nYBR\nGkqp53kdX/dOV/1KNCNLTBtQ4ijlJSpv26eWi3/r5gMQKMYB3FWOFQerxr5ZlaSj\nggFJMIIBRTAOBgNVHQ8BAf8EBAMCB4AwEwYDVR0lBAwwCgYIKwYBBQUHAwMwHQYD\nVR0OBBYEFAZL38M8cw0BYA2XvOI03YlD0S0+MB8GA1UdIwQYMBaAFN/T6c9WJBGW\n+ajY6ShVosYuGGQ/MCMGA1UdEQEB/wQZMBeBFWFsZXguZ2F5bm9yQGdtYWlsLmNv\nbTAsBgorBgEEAYO/MAEBBB5odHRwczovL2dpdGh1Yi5jb20vbG9naW4vb2F1dGgw\ngYoGCisGAQQB1nkCBAIEfAR6AHgAdgAIYJLwKFL/aEXR0WsnhJxFZxisFj3DONJt\n5rwiBjZvcgAAAYJNJFSlAAAEAwBHMEUCIQDWcQ0nl3rzCFz2dMNjWW8GK2R5N6ts\nyFIlc41BCQK/dgIgQ2sgkxu26uWPZR8lSgleC7WimESyfCp1/1N6Z209A5EwCgYI\nKoZIzj0EAwMDaAAwZQIxAM33WC1jIwxfHT6ywkckUqk+FMqYClgNc5pSge5sZMUH\nW08A/ZQjRSlhIeT+br9CkQIwUsNYvfAx466B7bzimSV2RiJHKn3XgxTA15CjnRrd\n1qK642cEe0GjeBiZr5pB6QrqMYIBJTCCASECAQEwTzA3MRUwEwYDVQQKEwxzaWdz\ndG9yZS5kZXYxHjAcBgNVBAMTFXNpZ3N0b3JlLWludGVybWVkaWF0ZQIUOlgfkWFe\nPKyNe+oCYNA9dPpFeRgwCwYJYIZIAWUDBAIBoGkwGAYJKoZIhvcNAQkDMQsGCSqG\nSIb3DQEHATAcBgkqhkiG9w0BCQUxDxcNMjIwNzMwMDMyNjQyWjAvBgkqhkiG9w0B\nCQQxIgQgWku3NAsz7A4hV31r/2L7BKL5FgGI2oRdnCCKAKm8tHwwCgYIKoZIzj0E\nAwIERzBFAiBYHkFwUs7K2iRVo1grWFVhTH5PEbNoP+mhIaiXehEeWAIhAL2erZfB\nUJnAR+PxULoPcYGug3ryMfGssCiwOF8hsc8C\n-----END SIGNED MESSAGE-----", "payload": "tree 0d7efe305e1cf8775571618e0dcef609935ae9d1\nparent 211637d0802a1c17d41b414e091e9a8691b26068\nauthor Alex Gaynor <alex.gaynor@gmail.com> 1659151560 -0400\ncommitter Alex Gaynor <alex.gaynor@gmail.com> 1659151598 -0400\n\nparallelize HTML checking tool\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b0ec1ebe4da106c18ce1ceec76e4adc627bddd1", "html_url": "https://github.com/rust-lang/rust/commit/5b0ec1ebe4da106c18ce1ceec76e4adc627bddd1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b0ec1ebe4da106c18ce1ceec76e4adc627bddd1/comments", "author": {"login": "alex", "id": 772, "node_id": "MDQ6VXNlcjc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alex", "html_url": "https://github.com/alex", "followers_url": "https://api.github.com/users/alex/followers", "following_url": "https://api.github.com/users/alex/following{/other_user}", "gists_url": "https://api.github.com/users/alex/gists{/gist_id}", "starred_url": "https://api.github.com/users/alex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alex/subscriptions", "organizations_url": "https://api.github.com/users/alex/orgs", "repos_url": "https://api.github.com/users/alex/repos", "events_url": "https://api.github.com/users/alex/events{/privacy}", "received_events_url": "https://api.github.com/users/alex/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alex", "id": 772, "node_id": "MDQ6VXNlcjc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alex", "html_url": "https://github.com/alex", "followers_url": "https://api.github.com/users/alex/followers", "following_url": "https://api.github.com/users/alex/following{/other_user}", "gists_url": "https://api.github.com/users/alex/gists{/gist_id}", "starred_url": "https://api.github.com/users/alex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alex/subscriptions", "organizations_url": "https://api.github.com/users/alex/orgs", "repos_url": "https://api.github.com/users/alex/repos", "events_url": "https://api.github.com/users/alex/events{/privacy}", "received_events_url": "https://api.github.com/users/alex/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "211637d0802a1c17d41b414e091e9a8691b26068", "url": "https://api.github.com/repos/rust-lang/rust/commits/211637d0802a1c17d41b414e091e9a8691b26068", "html_url": "https://github.com/rust-lang/rust/commit/211637d0802a1c17d41b414e091e9a8691b26068"}], "stats": {"total": 48, "additions": 27, "deletions": 21}, "files": [{"sha": "ccffbb01518ddcf197ef1aa79afd92000643f8d2", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b0ec1ebe4da106c18ce1ceec76e4adc627bddd1/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/5b0ec1ebe4da106c18ce1ceec76e4adc627bddd1/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=5b0ec1ebe4da106c18ce1ceec76e4adc627bddd1", "patch": "@@ -1788,6 +1788,7 @@ dependencies = [\n name = \"html-checker\"\n version = \"0.1.0\"\n dependencies = [\n+ \"rayon\",\n  \"walkdir\",\n ]\n "}, {"sha": "72d61d9bd2638048050344c787a97d84d11c6a63", "filename": "src/tools/html-checker/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b0ec1ebe4da106c18ce1ceec76e4adc627bddd1/src%2Ftools%2Fhtml-checker%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5b0ec1ebe4da106c18ce1ceec76e4adc627bddd1/src%2Ftools%2Fhtml-checker%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fhtml-checker%2FCargo.toml?ref=5b0ec1ebe4da106c18ce1ceec76e4adc627bddd1", "patch": "@@ -9,3 +9,4 @@ path = \"main.rs\"\n \n [dependencies]\n walkdir = \"2\"\n+rayon = \"1.5\""}, {"sha": "9b4d2c52598068892f8277f1b7bff44a6b23a6f4", "filename": "src/tools/html-checker/main.rs", "status": "modified", "additions": 25, "deletions": 21, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/5b0ec1ebe4da106c18ce1ceec76e4adc627bddd1/src%2Ftools%2Fhtml-checker%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b0ec1ebe4da106c18ce1ceec76e4adc627bddd1/src%2Ftools%2Fhtml-checker%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fhtml-checker%2Fmain.rs?ref=5b0ec1ebe4da106c18ce1ceec76e4adc627bddd1", "patch": "@@ -1,3 +1,4 @@\n+use rayon::iter::{ParallelBridge, ParallelIterator};\n use std::env;\n use std::path::Path;\n use std::process::{Command, Output};\n@@ -56,27 +57,30 @@ const DOCS_TO_CHECK: &[&str] =\n \n // Returns the number of files read and the number of errors.\n fn find_all_html_files(dir: &Path) -> (usize, usize) {\n-    let mut files_read = 0;\n-    let mut errors = 0;\n-\n-    for entry in walkdir::WalkDir::new(dir).into_iter().filter_entry(|e| {\n-        e.depth() != 1\n-            || e.file_name()\n-                .to_str()\n-                .map(|s| DOCS_TO_CHECK.into_iter().any(|d| *d == s))\n-                .unwrap_or(false)\n-    }) {\n-        let entry = entry.expect(\"failed to read file\");\n-        if !entry.file_type().is_file() {\n-            continue;\n-        }\n-        let entry = entry.path();\n-        if entry.extension().and_then(|s| s.to_str()) == Some(\"html\") {\n-            errors += check_html_file(&entry);\n-            files_read += 1;\n-        }\n-    }\n-    (files_read, errors)\n+    walkdir::WalkDir::new(dir)\n+        .into_iter()\n+        .filter_entry(|e| {\n+            e.depth() != 1\n+                || e.file_name()\n+                    .to_str()\n+                    .map(|s| DOCS_TO_CHECK.into_iter().any(|d| *d == s))\n+                    .unwrap_or(false)\n+        })\n+        .par_bridge()\n+        .map(|entry| {\n+            let entry = entry.expect(\"failed to read file\");\n+            if !entry.file_type().is_file() {\n+                return (0, 0);\n+            }\n+            let entry = entry.path();\n+            // (Number of files processed, number of errors)\n+            if entry.extension().and_then(|s| s.to_str()) == Some(\"html\") {\n+                (1, check_html_file(&entry))\n+            } else {\n+                (0, 0)\n+            }\n+        })\n+        .reduce(|| (0, 0), |a, b| (a.0 + b.0, a.1 + b.1))\n }\n \n /// Default `tidy` command for macOS is too old that it does not have `mute-id` and `mute` options."}]}