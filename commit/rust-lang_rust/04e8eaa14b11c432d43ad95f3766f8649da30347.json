{"sha": "04e8eaa14b11c432d43ad95f3766f8649da30347", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0ZThlYWExNGIxMWM0MzJkNDNhZDk1ZjM3NjZmODY0OWRhMzAzNDc=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-12-26T14:49:13Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-12-26T15:23:40Z"}, "message": "Handle privacy for modules", "tree": {"sha": "16b1180e9ff423276932e171f390ad97f3b7ca87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16b1180e9ff423276932e171f390ad97f3b7ca87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04e8eaa14b11c432d43ad95f3766f8649da30347", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04e8eaa14b11c432d43ad95f3766f8649da30347", "html_url": "https://github.com/rust-lang/rust/commit/04e8eaa14b11c432d43ad95f3766f8649da30347", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04e8eaa14b11c432d43ad95f3766f8649da30347/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a4a3eb69bcd48d79da0e227c6e2998d7910e6a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a4a3eb69bcd48d79da0e227c6e2998d7910e6a7", "html_url": "https://github.com/rust-lang/rust/commit/1a4a3eb69bcd48d79da0e227c6e2998d7910e6a7"}], "stats": {"total": 47, "additions": 36, "deletions": 11}, "files": [{"sha": "a80c4f8e9b739c7eff5282962f36ed7d3a2aa780", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/04e8eaa14b11c432d43ad95f3766f8649da30347/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04e8eaa14b11c432d43ad95f3766f8649da30347/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=04e8eaa14b11c432d43ad95f3766f8649da30347", "patch": "@@ -677,9 +677,13 @@ where\n         let is_macro_use = attrs.by_key(\"macro_use\").exists();\n         match module {\n             // inline module, just recurse\n-            raw::ModuleData::Definition { name, items, ast_id } => {\n-                let module_id =\n-                    self.push_child_module(name.clone(), AstId::new(self.file_id, *ast_id), None);\n+            raw::ModuleData::Definition { name, visibility, items, ast_id } => {\n+                let module_id = self.push_child_module(\n+                    name.clone(),\n+                    AstId::new(self.file_id, *ast_id),\n+                    None,\n+                    &visibility,\n+                );\n \n                 ModCollector {\n                     def_collector: &mut *self.def_collector,\n@@ -694,7 +698,7 @@ where\n                 }\n             }\n             // out of line module, resolve, parse and recurse\n-            raw::ModuleData::Declaration { name, ast_id } => {\n+            raw::ModuleData::Declaration { name, visibility, ast_id } => {\n                 let ast_id = AstId::new(self.file_id, *ast_id);\n                 match self.mod_dir.resolve_declaration(\n                     self.def_collector.db,\n@@ -703,7 +707,12 @@ where\n                     path_attr,\n                 ) {\n                     Ok((file_id, mod_dir)) => {\n-                        let module_id = self.push_child_module(name.clone(), ast_id, Some(file_id));\n+                        let module_id = self.push_child_module(\n+                            name.clone(),\n+                            ast_id,\n+                            Some(file_id),\n+                            &visibility,\n+                        );\n                         let raw_items = self.def_collector.db.raw_items(file_id.into());\n                         ModCollector {\n                             def_collector: &mut *self.def_collector,\n@@ -734,7 +743,13 @@ where\n         name: Name,\n         declaration: AstId<ast::Module>,\n         definition: Option<FileId>,\n+        visibility: &crate::visibility::Visibility,\n     ) -> LocalModuleId {\n+        let vis = self\n+            .def_collector\n+            .def_map\n+            .resolve_visibility(self.def_collector.db, self.module_id, visibility)\n+            .unwrap_or(ResolvedVisibility::Public);\n         let modules = &mut self.def_collector.def_map.modules;\n         let res = modules.alloc(ModuleData::default());\n         modules[res].parent = Some(self.module_id);\n@@ -745,7 +760,6 @@ where\n         modules[self.module_id].children.insert(name.clone(), res);\n         let module = ModuleId { krate: self.def_collector.def_map.krate, local_id: res };\n         let def: ModuleDefId = module.into();\n-        let vis = ResolvedVisibility::Public; // TODO handle module visibility\n         self.def_collector.def_map.modules[self.module_id].scope.define_def(def);\n         self.def_collector.update(self.module_id, &[(name, PerNs::from_def(def, vis))], vis);\n         res"}, {"sha": "59f79f7cd8f4f97297f63a02f5340887172e70b3", "filename": "crates/ra_hir_def/src/nameres/raw.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/04e8eaa14b11c432d43ad95f3766f8649da30347/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04e8eaa14b11c432d43ad95f3766f8649da30347/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs?ref=04e8eaa14b11c432d43ad95f3766f8649da30347", "patch": "@@ -125,8 +125,17 @@ impl_arena_id!(Module);\n \n #[derive(Debug, PartialEq, Eq)]\n pub(super) enum ModuleData {\n-    Declaration { name: Name, ast_id: FileAstId<ast::Module> },\n-    Definition { name: Name, ast_id: FileAstId<ast::Module>, items: Vec<RawItem> },\n+    Declaration {\n+        name: Name,\n+        visibility: Visibility,\n+        ast_id: FileAstId<ast::Module>,\n+    },\n+    Definition {\n+        name: Name,\n+        visibility: Visibility,\n+        ast_id: FileAstId<ast::Module>,\n+        items: Vec<RawItem>,\n+    },\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n@@ -283,17 +292,20 @@ impl RawItemsCollector {\n             None => return,\n         };\n         let attrs = self.parse_attrs(&module);\n+        let visibility = Visibility::from_ast_with_hygiene(module.visibility(), &self.hygiene);\n \n         let ast_id = self.source_ast_id_map.ast_id(&module);\n         if module.has_semi() {\n-            let item = self.raw_items.modules.alloc(ModuleData::Declaration { name, ast_id });\n+            let item =\n+                self.raw_items.modules.alloc(ModuleData::Declaration { name, visibility, ast_id });\n             self.push_item(current_module, attrs, RawItemKind::Module(item));\n             return;\n         }\n \n         if let Some(item_list) = module.item_list() {\n             let item = self.raw_items.modules.alloc(ModuleData::Definition {\n                 name,\n+                visibility,\n                 ast_id,\n                 items: Vec::new(),\n             });"}, {"sha": "82d947b78f70f187e489ad9c3417601f9e515383", "filename": "crates/ra_hir_def/src/nameres/tests/globs.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/04e8eaa14b11c432d43ad95f3766f8649da30347/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fglobs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04e8eaa14b11c432d43ad95f3766f8649da30347/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fglobs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fglobs.rs?ref=04e8eaa14b11c432d43ad95f3766f8649da30347", "patch": "@@ -122,7 +122,7 @@ fn glob_privacy_2() {\n         use foo::bar::*;\n \n         //- /foo/mod.rs\n-        pub mod bar;\n+        mod bar;\n         fn Foo() {};\n         pub struct Foo {};\n \n@@ -136,7 +136,6 @@ fn glob_privacy_2() {\n     crate\n     Foo: t\n     PubCrateStruct: t v\n-    bar: t\n     foo: t\n     \n     crate::foo"}]}