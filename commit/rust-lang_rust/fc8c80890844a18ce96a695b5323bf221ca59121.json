{"sha": "fc8c80890844a18ce96a695b5323bf221ca59121", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjOGM4MDg5MDg0NGExOGNlOTZhNjk1YjUzMjNiZjIyMWNhNTkxMjE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-14T19:25:48Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-18T18:46:00Z"}, "message": "libsyntax: Stop parsing old lifetimes, except for the ones on data type declarations.", "tree": {"sha": "02d88420a9cd149c91d2a25ac024b594dcffa805", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02d88420a9cd149c91d2a25ac024b594dcffa805"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc8c80890844a18ce96a695b5323bf221ca59121", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc8c80890844a18ce96a695b5323bf221ca59121", "html_url": "https://github.com/rust-lang/rust/commit/fc8c80890844a18ce96a695b5323bf221ca59121", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc8c80890844a18ce96a695b5323bf221ca59121/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "299995c2b62c520708d450e4b7c6d360be0fd852", "url": "https://api.github.com/repos/rust-lang/rust/commits/299995c2b62c520708d450e4b7c6d360be0fd852", "html_url": "https://github.com/rust-lang/rust/commit/299995c2b62c520708d450e4b7c6d360be0fd852"}], "stats": {"total": 89, "additions": 51, "deletions": 38}, "files": [{"sha": "b580d9c84a85c4d628d270a418becbdb7a7896d8", "filename": "src/libcore/io.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc8c80890844a18ce96a695b5323bf221ca59121/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc8c80890844a18ce96a695b5323bf221ca59121/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=fc8c80890844a18ce96a695b5323bf221ca59121", "patch": "@@ -593,7 +593,7 @@ pub struct BytesReader {\n     mut pos: uint\n }\n \n-impl Reader for BytesReader/&self {\n+impl Reader for BytesReader<'self> {\n     fn read(&self, bytes: &mut [u8], len: uint) -> uint {\n         let count = uint::min(len, self.bytes.len() - self.pos);\n "}, {"sha": "8127f88f25022fa336258983d26b1dd357468eed", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc8c80890844a18ce96a695b5323bf221ca59121/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc8c80890844a18ce96a695b5323bf221ca59121/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=fc8c80890844a18ce96a695b5323bf221ca59121", "patch": "@@ -210,7 +210,7 @@ pub impl<T> ResolveResult<T> {\n     }\n }\n \n-pub enum TypeParameters/& {\n+pub enum TypeParameters<'self> {\n     NoTypeParameters,                  //< No type parameters.\n     HasTypeParameters(&'self Generics,  //< Type parameters.\n                       node_id,         //< ID of the enclosing item"}, {"sha": "8e0633c10cdfb6260842b164a5bcd07d53263d6a", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc8c80890844a18ce96a695b5323bf221ca59121/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc8c80890844a18ce96a695b5323bf221ca59121/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=fc8c80890844a18ce96a695b5323bf221ca59121", "patch": "@@ -43,10 +43,10 @@\n  * as it does not already appear in scope.\n  *\n  * Case (b) says that if you have a type:\n- *   type foo/& = ...;\n+ *   type foo<'self> = ...;\n  *   type bar = fn(&foo, &a.foo)\n  * The fully expanded version of type bar is:\n- *   type bar = fn(&'foo &, &a.foo/&a)\n+ *   type bar = fn(&'foo &, &a.foo<'a>)\n  * Note that the self region for the `foo` defaulted to `&` in the first\n  * case but `&a` in the second.  Basically, defaults that appear inside\n  * an rptr (`&r.T`) use the region `r` that appears in the rptr."}, {"sha": "77258d0b329c1e637d7d2ad877cd2245f6209c7d", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/fc8c80890844a18ce96a695b5323bf221ca59121/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc8c80890844a18ce96a695b5323bf221ca59121/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=fc8c80890844a18ce96a695b5323bf221ca59121", "patch": "@@ -132,21 +132,21 @@ pub fn explain_region_and_span(cx: ctxt, region: ty::Region)\n }\n \n pub fn bound_region_to_str(cx: ctxt, br: bound_region) -> ~str {\n-    bound_region_to_str_adorned(cx, \"&\", br, \"\")\n+    bound_region_to_str_space(cx, \"&\", br)\n }\n \n-pub fn bound_region_to_str_adorned(cx: ctxt, prefix: &str,\n-                                   br: bound_region, sep: &str) -> ~str {\n-    if cx.sess.verbose() { return fmt!(\"%s%?%s\", prefix, br, sep); }\n+pub fn bound_region_to_str_space(cx: ctxt,\n+                                 prefix: &str,\n+                                 br: bound_region)\n+                              -> ~str {\n+    if cx.sess.verbose() { return fmt!(\"%s%? \", prefix, br); }\n \n     match br {\n-      br_named(id)         => fmt!(\"%s%s%s\", prefix, *cx.sess.str_of(id),\n-                                   sep),\n-      br_self              => fmt!(\"%sself%s\", prefix, sep),\n+      br_named(id)         => fmt!(\"%s'%s \", prefix, *cx.sess.str_of(id)),\n+      br_self              => fmt!(\"%s'self \", prefix),\n       br_anon(_)           => prefix.to_str(),\n       br_fresh(_)          => prefix.to_str(),\n-      br_cap_avoid(_, br)  => bound_region_to_str_adorned(cx, prefix,\n-                                                          *br, sep)\n+      br_cap_avoid(_, br)  => bound_region_to_str_space(cx, prefix, *br)\n     }\n }\n \n@@ -194,13 +194,12 @@ pub fn re_scope_id_to_str(cx: ctxt, node_id: ast::node_id) -> ~str {\n // you should use `explain_region()` or, better yet,\n // `note_and_explain_region()`\n pub fn region_to_str(cx: ctxt, region: Region) -> ~str {\n-    region_to_str_adorned(cx, \"&\", region, \"\")\n+    region_to_str_space(cx, \"&\", region)\n }\n \n-pub fn region_to_str_adorned(cx: ctxt, prefix: &str,\n-                             region: Region, sep: &str) -> ~str {\n+pub fn region_to_str_space(cx: ctxt, prefix: &str, region: Region) -> ~str {\n     if cx.sess.verbose() {\n-        return fmt!(\"%s%?%s\", prefix, region, sep);\n+        return fmt!(\"%s%? \", prefix, region);\n     }\n \n     // These printouts are concise.  They do not contain all the information\n@@ -209,13 +208,13 @@ pub fn region_to_str_adorned(cx: ctxt, prefix: &str,\n     // `explain_region()` or `note_and_explain_region()`.\n     match region {\n         re_scope(_) => prefix.to_str(),\n-        re_bound(br) => bound_region_to_str_adorned(cx, prefix, br, sep),\n-        re_free(_, br) => bound_region_to_str_adorned(cx, prefix, br, sep),\n+        re_bound(br) => bound_region_to_str_space(cx, prefix, br),\n+        re_free(_, br) => bound_region_to_str_space(cx, prefix, br),\n         re_infer(ReSkolemized(_, br)) => {\n-            bound_region_to_str_adorned(cx, prefix, br, sep)\n+            bound_region_to_str_space(cx, prefix, br)\n         }\n         re_infer(ReVar(_)) => prefix.to_str(),\n-        re_static => fmt!(\"%sstatic%s\", prefix, sep)\n+        re_static => fmt!(\"%s'static \", prefix)\n     }\n }\n \n@@ -233,7 +232,7 @@ pub fn vstore_to_str(cx: ctxt, vs: ty::vstore) -> ~str {\n       ty::vstore_fixed(n) => fmt!(\"%u\", n),\n       ty::vstore_uniq => ~\"~\",\n       ty::vstore_box => ~\"@\",\n-      ty::vstore_slice(r) => region_to_str_adorned(cx, \"&\", r, \"/\")\n+      ty::vstore_slice(r) => region_to_str_space(cx, \"&\", r)\n     }\n }\n \n@@ -242,7 +241,7 @@ pub fn trait_store_to_str(cx: ctxt, s: ty::TraitStore) -> ~str {\n       ty::BareTraitStore => ~\"\",\n       ty::UniqTraitStore => ~\"~\",\n       ty::BoxTraitStore => ~\"@\",\n-      ty::RegionTraitStore(r) => region_to_str_adorned(cx, \"&\", r, \"\")\n+      ty::RegionTraitStore(r) => region_to_str_space(cx, \"&\", r)\n     }\n }\n \n@@ -252,7 +251,7 @@ pub fn vstore_ty_to_str(cx: ctxt, ty: ~str, vs: ty::vstore) -> ~str {\n         fmt!(\"[%s * %s]\", ty, vstore_to_str(cx, vs))\n       }\n       ty::vstore_slice(_) => {\n-        fmt!(\"%s/%s\", vstore_to_str(cx, vs), ty)\n+        fmt!(\"%s %s\", vstore_to_str(cx, vs), ty)\n       }\n       _ => fmt!(\"%s[%s]\", vstore_to_str(cx, vs), ty)\n     }\n@@ -344,7 +343,7 @@ pub fn ty_to_str(cx: ctxt, typ: t) -> ~str {\n             (ast::OwnedSigil, ty::re_static) => {}\n \n             (_, region) => {\n-                s.push_str(region_to_str_adorned(cx, \"\", region, \"/\"));\n+                s.push_str(region_to_str_space(cx, \"\", region));\n             }\n         }\n \n@@ -418,7 +417,7 @@ pub fn ty_to_str(cx: ctxt, typ: t) -> ~str {\n       ty_uniq(tm) => ~\"~\" + mt_to_str(cx, tm),\n       ty_ptr(tm) => ~\"*\" + mt_to_str(cx, tm),\n       ty_rptr(r, tm) => {\n-        region_to_str_adorned(cx, ~\"&\", r, ~\"/\") + mt_to_str(cx, tm)\n+        region_to_str_space(cx, ~\"&\", r) + mt_to_str(cx, tm)\n       }\n       ty_unboxed_vec(tm) => { ~\"unboxed_vec<\" + mt_to_str(cx, tm) + ~\">\" }\n       ty_type => ~\"type\","}, {"sha": "d47232cc5352e36ad6ca6e5528b416d498e1db7f", "filename": "src/libstd/sync.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc8c80890844a18ce96a695b5323bf221ca59121/src%2Flibstd%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc8c80890844a18ce96a695b5323bf221ca59121/src%2Flibstd%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync.rs?ref=fc8c80890844a18ce96a695b5323bf221ca59121", "patch": "@@ -163,8 +163,8 @@ pub impl Sem<~[Waitqueue]> {\n \n // FIXME(#3588) should go inside of access()\n #[doc(hidden)]\n-type SemRelease = SemReleaseGeneric/&self<()>;\n-type SemAndSignalRelease = SemReleaseGeneric/&self<~[Waitqueue]>;\n+type SemRelease = SemReleaseGeneric<'self, ()>;\n+type SemAndSignalRelease = SemReleaseGeneric<'self, ~[Waitqueue]>;\n struct SemReleaseGeneric<Q> { sem: &'self Sem<Q> }\n \n impl<Q:Owned> Drop for SemReleaseGeneric/&self<Q> {"}, {"sha": "f5e83a1beae08307059db3137486bef2d76d8420", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc8c80890844a18ce96a695b5323bf221ca59121/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc8c80890844a18ce96a695b5323bf221ca59121/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=fc8c80890844a18ce96a695b5323bf221ca59121", "patch": "@@ -57,6 +57,7 @@ pub enum ObsoleteSyntax {\n     ObsoleteNewtypeEnum,\n     ObsoleteMode,\n     ObsoleteImplicitSelf,\n+    ObsoleteLifetimeNotation,\n }\n \n impl to_bytes::IterBytes for ObsoleteSyntax {\n@@ -187,6 +188,11 @@ pub impl Parser {\n                 \"use an explicit `self` declaration or declare the method as \\\n                  static\"\n             ),\n+            ObsoleteLifetimeNotation => (\n+                \"`/` lifetime notation\",\n+                \"instead of `&foo/bar`, write `&'foo bar`; instead of \\\n+                 `bar/&foo`, write `&bar<'foo>\"\n+            ),\n         };\n \n         self.report(sp, kind, kind_str, desc);"}, {"sha": "2ea304a0a9bc51ed7abca63a8b129f00fe18bb22", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fc8c80890844a18ce96a695b5323bf221ca59121/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc8c80890844a18ce96a695b5323bf221ca59121/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=fc8c80890844a18ce96a695b5323bf221ca59121", "patch": "@@ -79,6 +79,7 @@ use parse::obsolete::{ObsoleteRecordType, ObsoleteRecordPattern};\n use parse::obsolete::{ObsoleteAssertion, ObsoletePostFnTySigil};\n use parse::obsolete::{ObsoleteBareFnType, ObsoleteNewtypeEnum};\n use parse::obsolete::{ObsoleteMode, ObsoleteImplicitSelf};\n+use parse::obsolete::{ObsoleteLifetimeNotation};\n use parse::prec::{as_prec, token_to_binop};\n use parse::token::{can_begin_expr, is_ident, is_ident_or_path};\n use parse::token::{is_plain_ident, INTERPOLATED, special_idents};\n@@ -686,6 +687,7 @@ pub impl Parser {\n                     self.token_is_closure_keyword(&self.look_ahead(2u))\n                 {\n                     let lifetime = @self.parse_lifetime();\n+                    self.obsolete(*self.last_span, ObsoleteLifetimeNotation);\n                     return self.parse_ty_closure(sigil, Some(lifetime));\n                 } else if self.token_is_closure_keyword(&copy *self.token) {\n                     return self.parse_ty_closure(sigil, None);\n@@ -963,6 +965,7 @@ pub impl Parser {\n             // Also accept the (obsolete) syntax `foo/`\n             token::IDENT(*) => {\n                 if self.look_ahead(1u) == token::BINOP(token::SLASH) {\n+                    self.obsolete(*self.last_span, ObsoleteLifetimeNotation);\n                     Some(@self.parse_lifetime())\n                 } else {\n                     None\n@@ -997,6 +1000,7 @@ pub impl Parser {\n                 let span = copy self.span;\n                 self.bump();\n                 self.expect(&token::BINOP(token::SLASH));\n+                self.obsolete(*self.last_span, ObsoleteLifetimeNotation);\n                 return ast::Lifetime {\n                     id: self.get_id(),\n                     span: *span,\n@@ -3653,6 +3657,7 @@ pub impl Parser {\n \n     fn parse_region_param(&self) {\n         if self.eat(&token::BINOP(token::SLASH)) {\n+            self.obsolete(*self.last_span, ObsoleteLifetimeNotation);\n             self.expect(&token::BINOP(token::AND));\n         }\n     }"}, {"sha": "3821035a0f6e3d24e52d66607e942a01a4643caa", "filename": "src/test/compile-fail/regions-bounds.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc8c80890844a18ce96a695b5323bf221ca59121/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc8c80890844a18ce96a695b5323bf221ca59121/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs?ref=fc8c80890844a18ce96a695b5323bf221ca59121", "patch": "@@ -16,11 +16,11 @@ struct an_enum(&'self int);\n struct a_class { x:&'self int }\n \n fn a_fn1(e: an_enum<'a>) -> an_enum<'b> {\n-    return e; //~ ERROR mismatched types: expected `an_enum/&b` but found `an_enum/&a`\n+    return e; //~ ERROR mismatched types: expected `an_enum/&'b ` but found `an_enum/&'a `\n }\n \n fn a_fn3(e: a_class<'a>) -> a_class<'b> {\n-    return e; //~ ERROR mismatched types: expected `a_class/&b` but found `a_class/&a`\n+    return e; //~ ERROR mismatched types: expected `a_class/&'b ` but found `a_class/&'a `\n }\n \n fn a_fn4(e: int<'a>) -> int<'b> {"}, {"sha": "add53d3d9b0b9779ecfd7ae066df3ce46ccd4577", "filename": "src/test/compile-fail/regions-fn-bound.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fc8c80890844a18ce96a695b5323bf221ca59121/src%2Ftest%2Fcompile-fail%2Fregions-fn-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc8c80890844a18ce96a695b5323bf221ca59121/src%2Ftest%2Fcompile-fail%2Fregions-fn-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-fn-bound.rs?ref=fc8c80890844a18ce96a695b5323bf221ca59121", "patch": "@@ -1,3 +1,6 @@\n+// xfail-test\n+// xfail'd because the first error does not show up.\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n@@ -8,8 +11,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn of<T>() -> @fn(T) { fail!(); }\n-fn subtype<T>(x: @fn(T)) { fail!(); }\n+fn of<T>() -> &fn(T) { fail!(); }\n+fn subtype<T>(x: &fn(T)) { fail!(); }\n \n fn test_fn<T>(_x: &'x T, _y: &'y T, _z: &'z T) {\n     // Here, x, y, and z are free.  Other letters\n@@ -18,14 +21,14 @@ fn test_fn<T>(_x: &'x T, _y: &'y T, _z: &'z T) {\n     // iff T1 <: T2.\n \n     // should be the default:\n-    subtype::<@static/fn()>(of::<@fn()>());\n-    subtype::<@fn()>(of::<@static/fn()>());\n+    subtype::<&'static fn()>(of::<&fn()>());\n+    subtype::<&fn()>(of::<&'static fn()>());\n \n     //\n-    subtype::<@x/fn()>(of::<@fn()>());    //~ ERROR mismatched types\n-    subtype::<@x/fn()>(of::<@y/fn()>());  //~ ERROR mismatched types\n+    subtype::<&'x fn()>(of::<&fn()>());    //~ ERROR mismatched types\n+    subtype::<&'x fn()>(of::<&'y fn()>());  //~ ERROR mismatched types\n \n-    subtype::<@x/fn()>(of::<@static/fn()>()); //~ ERROR mismatched types\n-    subtype::<@static/fn()>(of::<@x/fn()>());\n+    subtype::<&'x fn()>(of::<&'static fn()>()); //~ ERROR mismatched types\n+    subtype::<&'static fn()>(of::<&'x fn()>());\n \n }"}]}