{"sha": "86621a7cc0251445e9387081e07a1683f9f06059", "node_id": "C_kwDOAAsO6NoAKDg2NjIxYTdjYzAyNTE0NDVlOTM4NzA4MWUwN2ExNjgzZjlmMDYwNTk", "commit": {"author": {"name": "Noritada Kobayashi", "email": "noritada.kobayashi@gmail.com", "date": "2022-12-12T04:09:18Z"}, "committer": {"name": "Noritada Kobayashi", "email": "noritada.kobayashi@gmail.com", "date": "2022-12-12T04:09:18Z"}, "message": "Correct complex list item support in AsciiDoc-to-Markdown conversion\n\nSupport for following cases are added:\n\n- newlines between list items\n- list item with multiline principal text with or without indent\n- list item immediately after a list continuation paragraph without\n  empty lines in between", "tree": {"sha": "72e2090f618d15dca4e713de501a72468abeed02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72e2090f618d15dca4e713de501a72468abeed02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86621a7cc0251445e9387081e07a1683f9f06059", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86621a7cc0251445e9387081e07a1683f9f06059", "html_url": "https://github.com/rust-lang/rust/commit/86621a7cc0251445e9387081e07a1683f9f06059", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86621a7cc0251445e9387081e07a1683f9f06059/comments", "author": {"login": "noritada", "id": 20850, "node_id": "MDQ6VXNlcjIwODUw", "avatar_url": "https://avatars.githubusercontent.com/u/20850?v=4", "gravatar_id": "", "url": "https://api.github.com/users/noritada", "html_url": "https://github.com/noritada", "followers_url": "https://api.github.com/users/noritada/followers", "following_url": "https://api.github.com/users/noritada/following{/other_user}", "gists_url": "https://api.github.com/users/noritada/gists{/gist_id}", "starred_url": "https://api.github.com/users/noritada/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/noritada/subscriptions", "organizations_url": "https://api.github.com/users/noritada/orgs", "repos_url": "https://api.github.com/users/noritada/repos", "events_url": "https://api.github.com/users/noritada/events{/privacy}", "received_events_url": "https://api.github.com/users/noritada/received_events", "type": "User", "site_admin": false}, "committer": {"login": "noritada", "id": 20850, "node_id": "MDQ6VXNlcjIwODUw", "avatar_url": "https://avatars.githubusercontent.com/u/20850?v=4", "gravatar_id": "", "url": "https://api.github.com/users/noritada", "html_url": "https://github.com/noritada", "followers_url": "https://api.github.com/users/noritada/followers", "following_url": "https://api.github.com/users/noritada/following{/other_user}", "gists_url": "https://api.github.com/users/noritada/gists{/gist_id}", "starred_url": "https://api.github.com/users/noritada/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/noritada/subscriptions", "organizations_url": "https://api.github.com/users/noritada/orgs", "repos_url": "https://api.github.com/users/noritada/repos", "events_url": "https://api.github.com/users/noritada/events{/privacy}", "received_events_url": "https://api.github.com/users/noritada/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97ec0ea698cbfeb7a0f62d0cd270050194c95c5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/97ec0ea698cbfeb7a0f62d0cd270050194c95c5d", "html_url": "https://github.com/rust-lang/rust/commit/97ec0ea698cbfeb7a0f62d0cd270050194c95c5d"}], "stats": {"total": 68, "additions": 57, "deletions": 11}, "files": [{"sha": "3ff0f5a28078ec8a260d0f7b7623caca6e9fd569", "filename": "xtask/src/publish/notes.rs", "status": "modified", "additions": 57, "deletions": 11, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/86621a7cc0251445e9387081e07a1683f9f06059/xtask%2Fsrc%2Fpublish%2Fnotes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86621a7cc0251445e9387081e07a1683f9f06059/xtask%2Fsrc%2Fpublish%2Fnotes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fpublish%2Fnotes.rs?ref=86621a7cc0251445e9387081e07a1683f9f06059", "patch": "@@ -42,7 +42,7 @@ impl<'a, 'b, R: BufRead> Converter<'a, 'b, R> {\n             } else if line.starts_with(VIDEO_BLOCK_PREFIX) {\n                 self.process_video_block(None, 0)?;\n             } else {\n-                self.process_paragraph(0)?;\n+                self.process_paragraph(0, |line| line.is_empty())?;\n             }\n \n             self.skip_blank_lines()?;\n@@ -84,16 +84,19 @@ impl<'a, 'b, R: BufRead> Converter<'a, 'b, R> {\n \n     fn process_list(&mut self) -> anyhow::Result<()> {\n         let mut nesting = ListNesting::new();\n-        while let Some(line) = self.iter.next() {\n-            let line = line?;\n-            if line.is_empty() {\n-                break;\n-            }\n+        while let Some(line) = self.iter.peek() {\n+            let line = line.as_deref().map_err(|e| anyhow!(\"{e}\"))?;\n \n-            if let Some((marker, item)) = get_list_item(&line) {\n+            if get_list_item(&line).is_some() {\n+                let line = self.iter.next().unwrap()?;\n+                let (marker, item) = get_list_item(&line).unwrap();\n                 nesting.set_current(marker);\n                 self.write_list_item(item, &nesting);\n+                self.process_paragraph(nesting.indent(), |line| {\n+                    line.is_empty() || get_list_item(line).is_some() || line == \"+\"\n+                })?;\n             } else if line == \"+\" {\n+                let _ = self.iter.next().unwrap()?;\n                 let line = self\n                     .iter\n                     .peek()\n@@ -118,11 +121,17 @@ impl<'a, 'b, R: BufRead> Converter<'a, 'b, R> {\n                     self.process_video_block(None, indent)?;\n                 } else {\n                     self.write_line(\"\", 0);\n-                    self.process_paragraph(indent)?;\n+                    let current = nesting.current().unwrap();\n+                    self.process_paragraph(indent, |line| {\n+                        line.is_empty()\n+                            || get_list_item(line).filter(|(m, _)| m == current).is_some()\n+                            || line == \"+\"\n+                    })?;\n                 }\n             } else {\n-                bail!(\"not a list block\")\n+                break;\n             }\n+            self.skip_blank_lines()?;\n         }\n \n         Ok(())\n@@ -235,15 +244,19 @@ impl<'a, 'b, R: BufRead> Converter<'a, 'b, R> {\n         bail!(\"not a video block\")\n     }\n \n-    fn process_paragraph(&mut self, level: usize) -> anyhow::Result<()> {\n+    fn process_paragraph<P>(&mut self, level: usize, predicate: P) -> anyhow::Result<()>\n+    where\n+        P: Fn(&str) -> bool,\n+    {\n         while let Some(line) = self.iter.peek() {\n             let line = line.as_deref().map_err(|e| anyhow!(\"{e}\"))?;\n-            if line.is_empty() || (level > 0 && line == \"+\") {\n+            if predicate(&line) {\n                 break;\n             }\n \n             self.write_indent(level);\n             let line = self.iter.next().unwrap()?;\n+            let line = line.trim_start();\n             if line.ends_with('+') {\n                 let line = &line[..(line.len() - 1)];\n                 self.output.push_str(line);\n@@ -373,6 +386,10 @@ impl ListNesting {\n         Self(Vec::<ListMarker>::with_capacity(6))\n     }\n \n+    fn current(&mut self) -> Option<&ListMarker> {\n+        self.0.last()\n+    }\n+\n     fn set_current(&mut self, marker: ListMarker) {\n         let Self(markers) = self;\n         if let Some(index) = markers.iter().position(|m| *m == marker) {\n@@ -469,6 +486,22 @@ rustup update nightly\n ----\n This is a plain listing.\n ----\n+* single line item followed by empty lines\n+\n+* multiline list\n+item followed by empty lines\n+\n+* multiline list\n+  item with indent\n+\n+* multiline list\n+item not followed by empty lines\n+* multiline list\n+item followed by different marker\n+** foo\n+** bar\n+* multiline list\n+item followed by list continuation\n +\n paragraph\n paragraph\n@@ -539,6 +572,19 @@ Release: release:2022-01-01[]\n   ```\n   This is a plain listing.\n   ```\n+- single line item followed by empty lines\n+- multiline list\n+  item followed by empty lines\n+- multiline list\n+  item with indent\n+- multiline list\n+  item not followed by empty lines\n+- multiline list\n+  item followed by different marker\n+  - foo\n+  - bar\n+- multiline list\n+  item followed by list continuation\n \n   paragraph\n   paragraph"}]}