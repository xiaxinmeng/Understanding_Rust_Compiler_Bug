{"sha": "30c0738d1f733120a52d9845b3cf592096e57e76", "node_id": "C_kwDOAAsO6NoAKDMwYzA3MzhkMWY3MzMxMjBhNTJkOTg0NWIzY2Y1OTIwOTZlNTdlNzY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-02T20:38:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-02T20:38:20Z"}, "message": "Rollup merge of #95589 - Kobzol:rlink-header, r=bjorn3\n\nInclude a header in .rlink files\n\nI couldn't find the right place where to put tests. Is there some location that tests `.rlink` creation and loading?\nI only found `src/test/run-make-fulldeps/separate-link/Makefile`, but I'm not sure how to check the error message in the Makefile.\n\nFixes: https://github.com/rust-lang/rust/issues/95297\n\nr? `@bjorn3`", "tree": {"sha": "fddd00b0d44a87d39b55cefc7152979068cab2f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fddd00b0d44a87d39b55cefc7152979068cab2f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30c0738d1f733120a52d9845b3cf592096e57e76", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiSLQ8CRBK7hj4Ov3rIwAAqlcIAI+pQnrFmfH1ZVyblF/lKsaO\nQY0GYK9aWNstEdQVCUAt+B74SdlLTe6Mpf6H98AKCXKMOAjT3KGqT3dAHWycM0p+\ngm+FDiZleyICJJpYZymNWtr3ekAPL/OeZiFeoo7WJe3LWjxzTzzj/SU7ZsMXvB66\nKg2nN/tf/Zlfv+5QXABpqdZvX3uk4tdauEwvRytC0kQHLU+g1/Q1VOMsGmKZlUEZ\nmIEqXw91iYlG9Bc2zRACskMn/coBeMevQiyv4CjLxo6jeamhmmTaLPb/1H7hhnJi\nAxTIIm310UziHE2UsUz/zUideyk2xCJQt0eArMjF5D9v5iTehg/K3CUDS+pCo5o=\n=YF/g\n-----END PGP SIGNATURE-----\n", "payload": "tree fddd00b0d44a87d39b55cefc7152979068cab2f8\nparent 2edc4b8e9fef9d7d664e3baff924d29290475770\nparent b81d873cdfb056b4e7462dc99e15c39554ec5217\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1648931900 +0200\ncommitter GitHub <noreply@github.com> 1648931900 +0200\n\nRollup merge of #95589 - Kobzol:rlink-header, r=bjorn3\n\nInclude a header in .rlink files\n\nI couldn't find the right place where to put tests. Is there some location that tests `.rlink` creation and loading?\nI only found `src/test/run-make-fulldeps/separate-link/Makefile`, but I'm not sure how to check the error message in the Makefile.\n\nFixes: https://github.com/rust-lang/rust/issues/95297\n\nr? `@bjorn3`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30c0738d1f733120a52d9845b3cf592096e57e76", "html_url": "https://github.com/rust-lang/rust/commit/30c0738d1f733120a52d9845b3cf592096e57e76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30c0738d1f733120a52d9845b3cf592096e57e76/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2edc4b8e9fef9d7d664e3baff924d29290475770", "url": "https://api.github.com/repos/rust-lang/rust/commits/2edc4b8e9fef9d7d664e3baff924d29290475770", "html_url": "https://github.com/rust-lang/rust/commit/2edc4b8e9fef9d7d664e3baff924d29290475770"}, {"sha": "b81d873cdfb056b4e7462dc99e15c39554ec5217", "url": "https://api.github.com/repos/rust-lang/rust/commits/b81d873cdfb056b4e7462dc99e15c39554ec5217", "html_url": "https://github.com/rust-lang/rust/commit/b81d873cdfb056b4e7462dc99e15c39554ec5217"}], "stats": {"total": 72, "additions": 67, "deletions": 5}, "files": [{"sha": "a2d60472ed9ed86bba9a0ebc43ac1e8341acf3ed", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/30c0738d1f733120a52d9845b3cf592096e57e76/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30c0738d1f733120a52d9845b3cf592096e57e76/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=30c0738d1f733120a52d9845b3cf592096e57e76", "patch": "@@ -29,6 +29,7 @@ use rustc_hir::LangItem;\n use rustc_middle::dep_graph::WorkProduct;\n use rustc_middle::middle::dependency_format::Dependencies;\n use rustc_middle::ty::query::{ExternProviders, Providers};\n+use rustc_serialize::{opaque, Decodable, Decoder, Encoder};\n use rustc_session::config::{CrateType, OutputFilenames, OutputType, RUST_CGU_EXT};\n use rustc_session::cstore::{self, CrateSource};\n use rustc_session::utils::NativeLibKind;\n@@ -190,3 +191,53 @@ pub fn looks_like_rust_object_file(filename: &str) -> bool {\n     // Check if the \"inner\" extension\n     ext2 == Some(RUST_CGU_EXT)\n }\n+\n+const RLINK_VERSION: u32 = 1;\n+const RLINK_MAGIC: &[u8] = b\"rustlink\";\n+\n+const RUSTC_VERSION: Option<&str> = option_env!(\"CFG_VERSION\");\n+\n+impl CodegenResults {\n+    pub fn serialize_rlink(codegen_results: &CodegenResults) -> Vec<u8> {\n+        let mut encoder = opaque::Encoder::new(vec![]);\n+        encoder.emit_raw_bytes(RLINK_MAGIC).unwrap();\n+        // `emit_raw_bytes` is used to make sure that the version representation does not depend on\n+        // Encoder's inner representation of `u32`.\n+        encoder.emit_raw_bytes(&RLINK_VERSION.to_be_bytes()).unwrap();\n+        encoder.emit_str(RUSTC_VERSION.unwrap()).unwrap();\n+\n+        let mut encoder = rustc_serialize::opaque::Encoder::new(encoder.into_inner());\n+        rustc_serialize::Encodable::encode(codegen_results, &mut encoder).unwrap();\n+        encoder.into_inner()\n+    }\n+\n+    pub fn deserialize_rlink(data: Vec<u8>) -> Result<Self, String> {\n+        // The Decodable machinery is not used here because it panics if the input data is invalid\n+        // and because its internal representation may change.\n+        if !data.starts_with(RLINK_MAGIC) {\n+            return Err(\"The input does not look like a .rlink file\".to_string());\n+        }\n+        let data = &data[RLINK_MAGIC.len()..];\n+        if data.len() < 4 {\n+            return Err(\"The input does not contain version number\".to_string());\n+        }\n+\n+        let mut version_array: [u8; 4] = Default::default();\n+        version_array.copy_from_slice(&data[..4]);\n+        if u32::from_be_bytes(version_array) != RLINK_VERSION {\n+            return Err(\".rlink file was produced with encoding version {version_array}, but the current version is {RLINK_VERSION}\".to_string());\n+        }\n+\n+        let mut decoder = opaque::Decoder::new(&data[4..], 0);\n+        let rustc_version = decoder.read_str();\n+        let current_version = RUSTC_VERSION.unwrap();\n+        if rustc_version != current_version {\n+            return Err(format!(\n+                \".rlink file was produced by rustc version {rustc_version}, but the current version is {current_version}.\"\n+            ));\n+        }\n+\n+        let codegen_results = CodegenResults::decode(&mut decoder);\n+        Ok(codegen_results)\n+    }\n+}"}, {"sha": "69f96d07f905dde6bb14a3c597426d2b0a255e53", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/30c0738d1f733120a52d9845b3cf592096e57e76/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30c0738d1f733120a52d9845b3cf592096e57e76/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=30c0738d1f733120a52d9845b3cf592096e57e76", "patch": "@@ -588,8 +588,12 @@ pub fn try_process_rlink(sess: &Session, compiler: &interface::Compiler) -> Comp\n             let rlink_data = fs::read(file).unwrap_or_else(|err| {\n                 sess.fatal(&format!(\"failed to read rlink file: {}\", err));\n             });\n-            let mut decoder = rustc_serialize::opaque::Decoder::new(&rlink_data, 0);\n-            let codegen_results: CodegenResults = rustc_serialize::Decodable::decode(&mut decoder);\n+            let codegen_results = match CodegenResults::deserialize_rlink(rlink_data) {\n+                Ok(codegen) => codegen,\n+                Err(error) => {\n+                    sess.fatal(&format!(\"Could not deserialize .rlink file: {error}\"));\n+                }\n+            };\n             let result = compiler.codegen_backend().link(sess, codegen_results, &outputs);\n             abort_on_err(result, sess);\n         } else {"}, {"sha": "22ab62ac372f218b97cbcad9de86929075f645e6", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30c0738d1f733120a52d9845b3cf592096e57e76/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30c0738d1f733120a52d9845b3cf592096e57e76/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=30c0738d1f733120a52d9845b3cf592096e57e76", "patch": "@@ -3,6 +3,7 @@ use crate::passes::{self, BoxedResolver, QueryContext};\n \n use rustc_ast as ast;\n use rustc_codegen_ssa::traits::CodegenBackend;\n+use rustc_codegen_ssa::CodegenResults;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::{Lrc, OnceCell, WorkerLocal};\n use rustc_hir::def_id::LOCAL_CRATE;\n@@ -360,10 +361,9 @@ impl Linker {\n         }\n \n         if sess.opts.debugging_opts.no_link {\n-            let mut encoder = rustc_serialize::opaque::Encoder::new(Vec::new());\n-            rustc_serialize::Encodable::encode(&codegen_results, &mut encoder).unwrap();\n+            let encoded = CodegenResults::serialize_rlink(&codegen_results);\n             let rlink_file = self.prepare_outputs.with_extension(config::RLINK_EXT);\n-            std::fs::write(&rlink_file, encoder.into_inner()).map_err(|err| {\n+            std::fs::write(&rlink_file, encoded).map_err(|err| {\n                 sess.fatal(&format!(\"failed to write file {}: {}\", rlink_file.display(), err));\n             })?;\n             return Ok(());"}, {"sha": "c759f42a2351e4e9a53d2a589ad56cee81fed244", "filename": "src/test/run-make-fulldeps/separate-link-fail/Makefile", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/30c0738d1f733120a52d9845b3cf592096e57e76/src%2Ftest%2Frun-make-fulldeps%2Fseparate-link-fail%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/30c0738d1f733120a52d9845b3cf592096e57e76/src%2Ftest%2Frun-make-fulldeps%2Fseparate-link-fail%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fseparate-link-fail%2FMakefile?ref=30c0738d1f733120a52d9845b3cf592096e57e76", "patch": "@@ -0,0 +1,7 @@\n+-include ../tools.mk\n+\n+all:\n+\techo 'fn main(){}' > $(TMPDIR)/main.rs\n+\t# Make sure that this fails\n+\t! $(RUSTC) -Z link-only $(TMPDIR)/main.rs 2> $(TMPDIR)/stderr.txt\n+\t$(CGREP) \"The input does not look like a .rlink file\" < $(TMPDIR)/stderr.txt"}]}