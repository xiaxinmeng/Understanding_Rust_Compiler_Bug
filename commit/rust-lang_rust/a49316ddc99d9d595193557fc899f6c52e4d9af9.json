{"sha": "a49316ddc99d9d595193557fc899f6c52e4d9af9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0OTMxNmRkYzk5ZDlkNTk1MTkzNTU3ZmM4OTlmNmM1MmU0ZDlhZjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-29T02:56:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-29T02:56:24Z"}, "message": "Auto merge of #56329 - eddyb:load-operand-overaligned, r=nikomatsakis\n\nrustc_codegen_llvm: don't overalign loads of pair operands.\n\nCounterpart to #56300, but for loads instead of stores.", "tree": {"sha": "50d4aea66b3ada194fe369fd96467d51b4619cba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50d4aea66b3ada194fe369fd96467d51b4619cba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a49316ddc99d9d595193557fc899f6c52e4d9af9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a49316ddc99d9d595193557fc899f6c52e4d9af9", "html_url": "https://github.com/rust-lang/rust/commit/a49316ddc99d9d595193557fc899f6c52e4d9af9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a49316ddc99d9d595193557fc899f6c52e4d9af9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f387a6032ee7c5e575e06c596328ff556a1675d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f387a6032ee7c5e575e06c596328ff556a1675d", "html_url": "https://github.com/rust-lang/rust/commit/5f387a6032ee7c5e575e06c596328ff556a1675d"}, {"sha": "51cf4e9e91ffcb1ab08bbcfa84841efb38c315e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/51cf4e9e91ffcb1ab08bbcfa84841efb38c315e4", "html_url": "https://github.com/rust-lang/rust/commit/51cf4e9e91ffcb1ab08bbcfa84841efb38c315e4"}], "stats": {"total": 30, "additions": 27, "deletions": 3}, "files": [{"sha": "f6bc348b8dc59dd4adbf7177283f7e25f9b0d503", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a49316ddc99d9d595193557fc899f6c52e4d9af9/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a49316ddc99d9d595193557fc899f6c52e4d9af9/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=a49316ddc99d9d595193557fc899f6c52e4d9af9", "patch": "@@ -589,17 +589,23 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n             });\n             OperandValue::Immediate(to_immediate(self, llval, place.layout))\n         } else if let layout::Abi::ScalarPair(ref a, ref b) = place.layout.abi {\n-            let mut load = |i, scalar: &layout::Scalar| {\n+            let b_offset = a.value.size(self).align_to(b.value.align(self).abi);\n+\n+            let mut load = |i, scalar: &layout::Scalar, align| {\n                 let llptr = self.struct_gep(place.llval, i as u64);\n-                let load = self.load(llptr, place.align);\n+                let load = self.load(llptr, align);\n                 scalar_load_metadata(self, load, scalar);\n                 if scalar.is_bool() {\n                     self.trunc(load, self.cx().type_i1())\n                 } else {\n                     load\n                 }\n             };\n-            OperandValue::Pair(load(0, a), load(1, b))\n+\n+            OperandValue::Pair(\n+                load(0, a, place.align),\n+                load(1, b, place.align.restrict_for_offset(b_offset)),\n+            )\n         } else {\n             OperandValue::Ref(place.llval, None, place.align)\n         };"}, {"sha": "53b83f4a5305ba5f84fd48db39a5610a82aa0c84", "filename": "src/test/codegen/issue-56267-2.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a49316ddc99d9d595193557fc899f6c52e4d9af9/src%2Ftest%2Fcodegen%2Fissue-56267-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a49316ddc99d9d595193557fc899f6c52e4d9af9/src%2Ftest%2Fcodegen%2Fissue-56267-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-56267-2.rs?ref=a49316ddc99d9d595193557fc899f6c52e4d9af9", "patch": "@@ -0,0 +1,18 @@\n+// compile-flags: -C no-prepopulate-passes\n+\n+#![crate_type=\"rlib\"]\n+\n+#[allow(dead_code)]\n+pub struct Foo<T> {\n+    foo: u64,\n+    bar: T,\n+}\n+\n+// The load from bar.1 should have alignment 4. Not checking\n+// other loads here, as the alignment will be platform-dependent.\n+\n+// CHECK: %{{.+}} = load i32, i32* %{{.+}}, align 4\n+#[no_mangle]\n+pub fn test(x: Foo<(i32, i32)>) -> (i32, i32) {\n+    x.bar\n+}"}]}