{"sha": "e4c3f753d23752a9fbb01bdf1cd92a8cb1f6681e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0YzNmNzUzZDIzNzUyYTlmYmIwMWJkZjFjZDkyYThjYjFmNjY4MWU=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-12-28T12:54:31Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-12-28T13:09:39Z"}, "message": "Add docs and optimisations", "tree": {"sha": "3533241d0cc71451350c42d5d48404be7b83e575", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3533241d0cc71451350c42d5d48404be7b83e575"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4c3f753d23752a9fbb01bdf1cd92a8cb1f6681e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4c3f753d23752a9fbb01bdf1cd92a8cb1f6681e", "html_url": "https://github.com/rust-lang/rust/commit/e4c3f753d23752a9fbb01bdf1cd92a8cb1f6681e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4c3f753d23752a9fbb01bdf1cd92a8cb1f6681e/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4995cfbd5b265c02d3038d72b8a022cde5f7040", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4995cfbd5b265c02d3038d72b8a022cde5f7040", "html_url": "https://github.com/rust-lang/rust/commit/c4995cfbd5b265c02d3038d72b8a022cde5f7040"}], "stats": {"total": 27, "additions": 18, "deletions": 9}, "files": [{"sha": "aefbdb16321050704fa1bc423e4d8436defbb9f4", "filename": "crates/completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4c3f753d23752a9fbb01bdf1cd92a8cb1f6681e/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4c3f753d23752a9fbb01bdf1cd92a8cb1f6681e/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=e4c3f753d23752a9fbb01bdf1cd92a8cb1f6681e", "patch": "@@ -101,8 +101,8 @@ fn complete_enum_variants(acc: &mut Completions, ctx: &CompletionContext, ty: &T\n //\n // .Fuzzy search details\n //\n-// To avoid an excessive amount of the results returned, completion input is checked for inclusion in the identifiers only\n-// (i.e. in `HashMap` in the `std::collections::HashMap` path), also not in the module indentifiers.\n+// To avoid an excessive amount of the results returned, completion input is checked for inclusion in the names only\n+// (i.e. in `HashMap` in the `std::collections::HashMap` path).\n //\n // .Merge Behavior\n //"}, {"sha": "34a424c601a43abac652a2fcaca4f09384e984ae", "filename": "crates/hir_def/src/import_map.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e4c3f753d23752a9fbb01bdf1cd92a8cb1f6681e/crates%2Fhir_def%2Fsrc%2Fimport_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4c3f753d23752a9fbb01bdf1cd92a8cb1f6681e/crates%2Fhir_def%2Fsrc%2Fimport_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fimport_map.rs?ref=e4c3f753d23752a9fbb01bdf1cd92a8cb1f6681e", "patch": "@@ -238,11 +238,15 @@ pub enum ImportKind {\n     BuiltinType,\n }\n \n-/// todo kb\n+/// A way to match import map contents against the search query.\n #[derive(Debug)]\n pub enum SearchMode {\n+    /// Import map entry should strictly match the query string.\n     Equals,\n+    /// Import map entry should contain the query string.\n     Contains,\n+    /// Import map entry should contain all letters from the query string,\n+    /// in the same order, but not necessary adjacent.\n     Fuzzy,\n }\n \n@@ -270,11 +274,14 @@ impl Query {\n         }\n     }\n \n+    /// Matches entries' names only, ignoring the rest of\n+    /// the qualifier.\n+    /// Example: for `std::marker::PhantomData`, the name is `PhantomData`.\n     pub fn name_only(self) -> Self {\n         Self { name_only: true, ..self }\n     }\n \n-    /// todo kb\n+    /// Specifies the way to search for the entries using the query.\n     pub fn search_mode(self, search_mode: SearchMode) -> Self {\n         Self { search_mode, ..self }\n     }\n@@ -296,7 +303,6 @@ impl Query {\n     }\n }\n \n-// TODO kb: ugly with a special `return true` case and the `enforce_lowercase` one.\n fn contains_query(query: &Query, input_path: &ImportPath, enforce_lowercase: bool) -> bool {\n     let mut input = if query.name_only {\n         input_path.segments.last().unwrap().to_string()\n@@ -378,7 +384,10 @@ pub fn search_dependencies<'a>(\n                     Some(import_kind) => !query.exclude_import_kinds.contains(&import_kind),\n                     None => true,\n                 })\n-                .filter(|item| contains_query(&query, &import_map.map[item].path, false));\n+                .filter(|item| {\n+                    !query.case_sensitive // we've already checked the common importables path case-insensitively\n+                        || contains_query(&query, &import_map.map[item].path, false)\n+                });\n             res.extend(iter);\n \n             if res.len() >= query.limit {"}, {"sha": "b6355af4bd755dbbd3067e99abb9465c5aac980c", "filename": "crates/ide_db/src/imports_locator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e4c3f753d23752a9fbb01bdf1cd92a8cb1f6681e/crates%2Fide_db%2Fsrc%2Fimports_locator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4c3f753d23752a9fbb01bdf1cd92a8cb1f6681e/crates%2Fide_db%2Fsrc%2Fimports_locator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fimports_locator.rs?ref=e4c3f753d23752a9fbb01bdf1cd92a8cb1f6681e", "patch": "@@ -39,18 +39,18 @@ pub fn find_similar_imports<'a>(\n     sema: &Semantics<'a, RootDatabase>,\n     krate: Crate,\n     limit: Option<usize>,\n-    name_to_import: &str,\n+    fuzzy_search_string: &str,\n     name_only: bool,\n ) -> impl Iterator<Item = Either<ModuleDef, MacroDef>> {\n     let _p = profile::span(\"find_similar_imports\");\n \n     let mut external_query =\n-        import_map::Query::new(name_to_import).search_mode(import_map::SearchMode::Fuzzy);\n+        import_map::Query::new(fuzzy_search_string).search_mode(import_map::SearchMode::Fuzzy);\n     if name_only {\n         external_query = external_query.name_only();\n     }\n \n-    let mut local_query = symbol_index::Query::new(name_to_import.to_string());\n+    let mut local_query = symbol_index::Query::new(fuzzy_search_string.to_string());\n \n     if let Some(limit) = limit {\n         local_query.limit(limit);"}]}