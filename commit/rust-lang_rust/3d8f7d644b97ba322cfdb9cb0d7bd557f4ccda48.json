{"sha": "3d8f7d644b97ba322cfdb9cb0d7bd557f4ccda48", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkOGY3ZDY0NGI5N2JhMzIyY2ZkYjljYjBkN2JkNTU3ZjRjY2RhNDg=", "commit": {"author": {"name": "Jeff Olson", "email": "olson.jeffery@gmail.com", "date": "2012-05-02T13:28:50Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-23T05:29:16Z"}, "message": "std: no longer return uv::ll::err_data records from net::tcp\n\nthey're changed into a net::tcp::tcp_err_data record, for now. once the\nscope of possible tcp errors, from libuv, is established ill create an\nerr type for each one and return those where they might occur", "tree": {"sha": "ccd6be9145d8446b2e04ba14e7a48d5e2de09271", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ccd6be9145d8446b2e04ba14e7a48d5e2de09271"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d8f7d644b97ba322cfdb9cb0d7bd557f4ccda48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d8f7d644b97ba322cfdb9cb0d7bd557f4ccda48", "html_url": "https://github.com/rust-lang/rust/commit/3d8f7d644b97ba322cfdb9cb0d7bd557f4ccda48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d8f7d644b97ba322cfdb9cb0d7bd557f4ccda48/comments", "author": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "565c5d694a51882fbbe6f1ebba370682c15bfbe8", "url": "https://api.github.com/repos/rust-lang/rust/commits/565c5d694a51882fbbe6f1ebba370682c15bfbe8", "html_url": "https://github.com/rust-lang/rust/commit/565c5d694a51882fbbe6f1ebba370682c15bfbe8"}], "stats": {"total": 39, "additions": 27, "deletions": 12}, "files": [{"sha": "3f7dd59801fbaabf1dce327e12c275785856f9ff", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 27, "deletions": 12, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/3d8f7d644b97ba322cfdb9cb0d7bd557f4ccda48/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d8f7d644b97ba322cfdb9cb0d7bd557f4ccda48/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=3d8f7d644b97ba322cfdb9cb0d7bd557f4ccda48", "patch": "@@ -4,7 +4,7 @@ High-level interface to libuv's TCP functionality\n \n import ip = net_ip;\n \n-export tcp_connect_result, tcp_write_result, tcp_read_start_result;\n+export tcp_err_data, tcp_connect_result, tcp_write_result, tcp_read_start_result;\n export connect, write;\n \n resource tcp_socket(socket_data: @tcp_socket_data) unsafe {\n@@ -26,25 +26,40 @@ resource tcp_socket(socket_data: @tcp_socket_data) unsafe {\n     log(debug, \"exiting dtor for tcp_socket\");\n }\n \n+type tcp_err_data = {\n+    err_name: str,\n+    err_msg: str\n+};\n+\n+iface to_tcp_err_iface {\n+    fn to_tcp_err() -> tcp_err_data;\n+}\n+\n+impl of to_tcp_err_iface for uv::ll::uv_err_data {\n+    fn to_tcp_err() -> tcp_err_data {\n+        { err_name: self.err_name, err_msg: self.err_msg }\n+    }\n+}\n+\n enum tcp_connect_result {\n     tcp_connected(tcp_socket),\n-    tcp_connect_error(uv::ll::uv_err_data)\n+    tcp_connect_error(tcp_err_data)\n }\n \n enum tcp_write_result {\n     tcp_write_success,\n-    tcp_write_error(uv::ll::uv_err_data)\n+    tcp_write_error(tcp_err_data)\n }\n \n enum tcp_read_start_result {\n     tcp_read_start_success(comm::port<tcp_read_result>),\n-    tcp_read_start_error(uv::ll::uv_err_data)\n+    tcp_read_start_error(tcp_err_data)\n }\n \n enum tcp_read_result {\n     tcp_read_data([u8]),\n     tcp_read_done,\n-    tcp_read_err(uv::ll::uv_err_data)\n+    tcp_read_err(tcp_err_data)\n }\n \n #[doc=\"\n@@ -126,7 +141,7 @@ fn connect(input_ip: ip::ip_addr, port: uint) -> tcp_connect_result unsafe {\n                     // ip or somesuch\n                     let err_data = uv::ll::get_last_err_data(loop_ptr);\n                     comm::send((*conn_data_ptr).result_ch,\n-                               conn_failure(err_data));\n+                               conn_failure(err_data.to_tcp_err()));\n                     uv::ll::set_data_for_uv_handle(stream_handle_ptr,\n                                                    conn_data_ptr);\n                     uv::ll::close(stream_handle_ptr, stream_error_close_cb);\n@@ -139,7 +154,7 @@ fn connect(input_ip: ip::ip_addr, port: uint) -> tcp_connect_result unsafe {\n             // failure to create a tcp handle\n             let err_data = uv::ll::get_last_err_data(loop_ptr);\n             comm::send((*conn_data_ptr).result_ch,\n-                       conn_failure(err_data));\n+                       conn_failure(err_data.to_tcp_err()));\n           }\n         }\n     };\n@@ -151,7 +166,7 @@ fn connect(input_ip: ip::ip_addr, port: uint) -> tcp_connect_result unsafe {\n       conn_failure(err_data) {\n         comm::recv(closed_signal_po);\n         log(debug, \"tcp::connect - received failure on result_po\");\n-        tcp_connect_error(err_data)\n+        tcp_connect_error(err_data.to_tcp_err())\n       }\n     }\n }\n@@ -189,7 +204,7 @@ fn write(sock: tcp_socket, raw_write_data: [[u8]]) -> tcp_write_result\n             log(debug, \"error invoking uv_write()\");\n             let err_data = uv::ll::get_last_err_data(loop_ptr);\n             comm::send((*write_data_ptr).result_ch,\n-                       tcp_write_error(err_data));\n+                       tcp_write_error(err_data.to_tcp_err()));\n           }\n         }\n     };\n@@ -220,7 +235,7 @@ fn read_start(sock: tcp_socket) -> tcp_read_start_result unsafe {\n     };\n     alt comm::recv(start_po) {\n       some(err_data) {\n-        tcp_read_start_error(err_data)\n+        tcp_read_start_error(err_data.to_tcp_err())\n       }\n       none {\n         tcp_read_start_success((**sock).reader_po)\n@@ -230,7 +245,7 @@ fn read_start(sock: tcp_socket) -> tcp_read_start_result unsafe {\n \n fn read_stop(sock: tcp_socket) -> option<uv::ll::uv_err_data> unsafe {\n     let stream_handle_ptr = ptr::addr_of((**sock).stream_handle);\n-    let stop_po = comm::port::<option<uv::ll::uv_err_data>>();\n+    let stop_po = comm::port::<option<tcp_err_data>>();\n     let stop_ch = comm::chan(stop_po);\n     uv::hl::interact((**sock).hl_loop) {|loop_ptr|\n         log(debug, \"in interact cb for tcp::read_stop\");\n@@ -242,7 +257,7 @@ fn read_stop(sock: tcp_socket) -> option<uv::ll::uv_err_data> unsafe {\n           _ {\n             log(debug, \"failure in calling uv_read_stop\");\n             let err_data = uv::ll::get_last_err_data(loop_ptr);\n-            comm::send(stop_ch, some(err_data));\n+            comm::send(stop_ch, some(err_data.to_tcp_err()));\n           }\n         }\n     };"}]}