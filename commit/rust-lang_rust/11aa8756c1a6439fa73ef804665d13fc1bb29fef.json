{"sha": "11aa8756c1a6439fa73ef804665d13fc1bb29fef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExYWE4NzU2YzFhNjQzOWZhNzNlZjgwNDY2NWQxM2ZjMWJiMjlmZWY=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2015-07-25T18:25:51Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2015-07-25T18:25:51Z"}, "message": "Substitute free lifetimes in `Self::T`\n\nFixes #27281", "tree": {"sha": "ea4d2f2a31d9c786a5ece5f42b619baf5bb85f2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea4d2f2a31d9c786a5ece5f42b619baf5bb85f2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11aa8756c1a6439fa73ef804665d13fc1bb29fef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11aa8756c1a6439fa73ef804665d13fc1bb29fef", "html_url": "https://github.com/rust-lang/rust/commit/11aa8756c1a6439fa73ef804665d13fc1bb29fef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11aa8756c1a6439fa73ef804665d13fc1bb29fef/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04badd6a973d2499731b49365a121dbc4c9c468e", "url": "https://api.github.com/repos/rust-lang/rust/commits/04badd6a973d2499731b49365a121dbc4c9c468e", "html_url": "https://github.com/rust-lang/rust/commit/04badd6a973d2499731b49365a121dbc4c9c468e"}], "stats": {"total": 107, "additions": 63, "deletions": 44}, "files": [{"sha": "d516c648d7ed81101c905502a25d81498844ba8d", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 25, "deletions": 32, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/11aa8756c1a6439fa73ef804665d13fc1bb29fef/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11aa8756c1a6439fa73ef804665d13fc1bb29fef/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=11aa8756c1a6439fa73ef804665d13fc1bb29fef", "patch": "@@ -60,7 +60,7 @@ use middle::traits;\n use middle::ty::{self, RegionEscape, Ty, ToPredicate, HasTypeFlags};\n use middle::ty_fold;\n use require_c_abi_if_variadic;\n-use rscope::{self, UnelidableRscope, RegionScope, ElidableRscope, ExplicitRscope,\n+use rscope::{self, UnelidableRscope, RegionScope, ElidableRscope,\n              ObjectLifetimeDefaultRscope, ShiftedRscope, BindingRscope,\n              ElisionFailureInfo, ElidedLifetime};\n use util::common::{ErrorReported, FN_OUTPUT_NAME};\n@@ -1208,40 +1208,33 @@ fn associated_path_def_to_ty<'tcx>(this: &AstConv<'tcx>,\n         (_, def::DefSelfTy(Some(trait_did), Some((impl_id, _)))) => {\n             // `Self` in an impl of a trait - we have a concrete self type and a\n             // trait reference.\n-            match tcx.map.expect_item(impl_id).node {\n-                ast::ItemImpl(_, _, _, Some(ref trait_ref), _, _) => {\n-                    if this.ensure_super_predicates(span, trait_did).is_err() {\n-                        return (tcx.types.err, ty_path_def);\n-                    }\n+            let trait_ref = tcx.impl_trait_ref(ast_util::local_def(impl_id)).unwrap();\n+            let trait_ref = if let Some(free_substs) = this.get_free_substs() {\n+                trait_ref.subst(tcx, free_substs)\n+            } else {\n+                trait_ref\n+            };\n \n-                    let trait_segment = &trait_ref.path.segments.last().unwrap();\n-                    let trait_ref = ast_path_to_mono_trait_ref(this,\n-                                                               &ExplicitRscope,\n-                                                               span,\n-                                                               PathParamMode::Explicit,\n-                                                               trait_did,\n-                                                               Some(ty),\n-                                                               trait_segment);\n-\n-                    let candidates: Vec<ty::PolyTraitRef> =\n-                        traits::supertraits(tcx, ty::Binder(trait_ref.clone()))\n-                        .filter(|r| this.trait_defines_associated_type_named(r.def_id(),\n-                                                                             assoc_name))\n-                        .collect();\n-\n-                    match one_bound_for_assoc_type(tcx,\n-                                                   candidates,\n-                                                   \"Self\",\n-                                                   &token::get_name(assoc_name),\n-                                                   span) {\n-                        Ok(bound) => bound,\n-                        Err(ErrorReported) => return (tcx.types.err, ty_path_def),\n-                    }\n-                }\n-                _ => unreachable!()\n+            if this.ensure_super_predicates(span, trait_did).is_err() {\n+                return (tcx.types.err, ty_path_def);\n+            }\n+\n+            let candidates: Vec<ty::PolyTraitRef> =\n+                traits::supertraits(tcx, ty::Binder(trait_ref))\n+                .filter(|r| this.trait_defines_associated_type_named(r.def_id(),\n+                                                                     assoc_name))\n+                .collect();\n+\n+            match one_bound_for_assoc_type(tcx,\n+                                           candidates,\n+                                           \"Self\",\n+                                           &token::get_name(assoc_name),\n+                                           span) {\n+                Ok(bound) => bound,\n+                Err(ErrorReported) => return (tcx.types.err, ty_path_def),\n             }\n         }\n-        (&ty::TyParam(_), def::DefSelfTy(Some(trait_did),  None)) => {\n+        (&ty::TyParam(_), def::DefSelfTy(Some(trait_did), None)) => {\n             assert_eq!(trait_did.krate, ast::LOCAL_CRATE);\n             match find_bound_for_assoc_item(this,\n                                             trait_did.node,"}, {"sha": "b003f0fc4f8a6a9335fc81105566a7d43ac9ee19", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/11aa8756c1a6439fa73ef804665d13fc1bb29fef/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11aa8756c1a6439fa73ef804665d13fc1bb29fef/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=11aa8756c1a6439fa73ef804665d13fc1bb29fef", "patch": "@@ -836,6 +836,18 @@ fn convert_item(ccx: &CrateCtxt, it: &ast::Item) {\n                                                 ty: selfty });\n             tcx.predicates.borrow_mut().insert(local_def(it.id),\n                                                ty_predicates.clone());\n+            if let &Some(ref ast_trait_ref) = opt_trait_ref {\n+                tcx.impl_trait_refs.borrow_mut().insert(\n+                    local_def(it.id),\n+                    Some(astconv::instantiate_mono_trait_ref(&ccx.icx(&ty_predicates),\n+                                                             &ExplicitRscope,\n+                                                             ast_trait_ref,\n+                                                             Some(selfty)))\n+                        );\n+            } else {\n+                tcx.impl_trait_refs.borrow_mut().insert(local_def(it.id), None);\n+            }\n+\n \n             // If there is a trait reference, treat the methods as always public.\n             // This is to work around some incorrect behavior in privacy checking:\n@@ -935,18 +947,6 @@ fn convert_item(ccx: &CrateCtxt, it: &ast::Item) {\n                 }\n             }\n \n-            if let &Some(ref ast_trait_ref) = opt_trait_ref {\n-                tcx.impl_trait_refs.borrow_mut().insert(\n-                    local_def(it.id),\n-                    Some(astconv::instantiate_mono_trait_ref(&ccx.icx(&ty_predicates),\n-                                                             &ExplicitRscope,\n-                                                             ast_trait_ref,\n-                                                             Some(selfty)))\n-                        );\n-            } else {\n-                tcx.impl_trait_refs.borrow_mut().insert(local_def(it.id), None);\n-            }\n-\n             enforce_impl_params_are_constrained(tcx,\n                                                 generics,\n                                                 local_def(it.id),"}, {"sha": "c84fc0fffe32f086a7df569de904ce21b0a2d527", "filename": "src/test/run-pass/issue-27281.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/11aa8756c1a6439fa73ef804665d13fc1bb29fef/src%2Ftest%2Frun-pass%2Fissue-27281.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11aa8756c1a6439fa73ef804665d13fc1bb29fef/src%2Ftest%2Frun-pass%2Fissue-27281.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-27281.rs?ref=11aa8756c1a6439fa73ef804665d13fc1bb29fef", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub trait Trait<'a> {\n+    type T;\n+    type U;\n+    fn foo(&self, s: &'a ()) -> &'a ();\n+}\n+\n+impl<'a> Trait<'a> for () {\n+    type T = &'a ();\n+    type U = Self::T;\n+\n+    fn foo(&self, s: &'a ()) -> &'a () {\n+        let t: Self::T = s; t\n+    }\n+}\n+\n+fn main() {}"}]}