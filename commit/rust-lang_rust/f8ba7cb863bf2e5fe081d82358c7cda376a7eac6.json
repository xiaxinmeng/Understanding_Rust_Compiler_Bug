{"sha": "f8ba7cb863bf2e5fe081d82358c7cda376a7eac6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4YmE3Y2I4NjNiZjJlNWZlMDgxZDgyMzU4YzdjZGEzNzZhN2VhYzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-09-10T14:03:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-10T14:03:27Z"}, "message": "Auto merge of #36378 - GuillaumeGomez:rollup, r=GuillaumeGomez\n\nRollup of 6 pull requests\n\n- Successful merges: #35691, #36045, #36311, #36314, #36326, #36346\n- Failed merges:", "tree": {"sha": "6145c772d2eadb7594cfbc41ef9ae88faeb1194c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6145c772d2eadb7594cfbc41ef9ae88faeb1194c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8ba7cb863bf2e5fe081d82358c7cda376a7eac6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8ba7cb863bf2e5fe081d82358c7cda376a7eac6", "html_url": "https://github.com/rust-lang/rust/commit/f8ba7cb863bf2e5fe081d82358c7cda376a7eac6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8ba7cb863bf2e5fe081d82358c7cda376a7eac6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5f4cc527de4230359c81799852f6bc770eba0e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5f4cc527de4230359c81799852f6bc770eba0e6", "html_url": "https://github.com/rust-lang/rust/commit/a5f4cc527de4230359c81799852f6bc770eba0e6"}, {"sha": "2ded39938ac365fc843062eeef39439429a845da", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ded39938ac365fc843062eeef39439429a845da", "html_url": "https://github.com/rust-lang/rust/commit/2ded39938ac365fc843062eeef39439429a845da"}], "stats": {"total": 179, "additions": 161, "deletions": 18}, "files": [{"sha": "a6ecf6ab91b4f96c7745af6fa7deab9d146888ff", "filename": "src/doc/nomicon/ownership.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8ba7cb863bf2e5fe081d82358c7cda376a7eac6/src%2Fdoc%2Fnomicon%2Fownership.md", "raw_url": "https://github.com/rust-lang/rust/raw/f8ba7cb863bf2e5fe081d82358c7cda376a7eac6/src%2Fdoc%2Fnomicon%2Fownership.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fownership.md?ref=f8ba7cb863bf2e5fe081d82358c7cda376a7eac6", "patch": "@@ -52,7 +52,7 @@ let mut data = vec![1, 2, 3];\n let x = &data[0];\n \n // OH NO! `push` causes the backing storage of `data` to be reallocated.\n-// Dangling pointer! User after free! Alas!\n+// Dangling pointer! Use after free! Alas!\n // (this does not compile in Rust)\n data.push(4);\n "}, {"sha": "ee2f24d21e07cb846e6f3ea6be5aae8bab081b2a", "filename": "src/librustc_trans/meth.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8ba7cb863bf2e5fe081d82358c7cda376a7eac6/src%2Flibrustc_trans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ba7cb863bf2e5fe081d82358c7cda376a7eac6/src%2Flibrustc_trans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmeth.rs?ref=f8ba7cb863bf2e5fe081d82358c7cda376a7eac6", "patch": "@@ -116,9 +116,11 @@ pub fn trans_object_shim<'a, 'tcx>(ccx: &'a CrateContext<'a, 'tcx>,\n     llfn\n }\n \n-/// Creates a returns a dynamic vtable for the given type and vtable origin.\n+/// Creates a dynamic vtable for the given type and vtable origin.\n /// This is used only for objects.\n ///\n+/// The vtables are cached instead of created on every call.\n+///\n /// The `trait_ref` encodes the erased self type. Hence if we are\n /// making an object `Foo<Trait>` from a value of type `Foo<T>`, then\n /// `trait_ref` would map `T:Trait`."}, {"sha": "8598c561fc2e301f258ae14be1e7b90630fc0fb2", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 30, "deletions": 8, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f8ba7cb863bf2e5fe081d82358c7cda376a7eac6/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ba7cb863bf2e5fe081d82358c7cda376a7eac6/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=f8ba7cb863bf2e5fe081d82358c7cda376a7eac6", "patch": "@@ -3159,14 +3159,36 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 tcx.sess.span_err(span, \"union expressions should have exactly one field\");\n             }\n         } else if check_completeness && !error_happened && !remaining_fields.is_empty() {\n-            span_err!(tcx.sess, span, E0063,\n-                      \"missing field{} {} in initializer of `{}`\",\n-                      if remaining_fields.len() == 1 {\"\"} else {\"s\"},\n-                      remaining_fields.keys()\n-                                      .map(|n| format!(\"`{}`\", n))\n-                                      .collect::<Vec<_>>()\n-                                      .join(\", \"),\n-                      adt_ty);\n+            let len = remaining_fields.len();\n+\n+            let mut displayable_field_names = remaining_fields\n+                                              .keys()\n+                                              .map(|x| x.as_str())\n+                                              .collect::<Vec<_>>();\n+\n+            displayable_field_names.sort();\n+\n+            let truncated_fields_error = if len <= 3 {\n+                \"\".to_string()\n+            } else {\n+                format!(\" and {} other field{}\", (len - 3), if len - 3 == 1 {\"\"} else {\"s\"})\n+            };\n+\n+            let remaining_fields_names = displayable_field_names.iter().take(3)\n+                                        .map(|n| format!(\"`{}`\", n))\n+                                        .collect::<Vec<_>>()\n+                                        .join(\", \");\n+\n+            struct_span_err!(tcx.sess, span, E0063,\n+                        \"missing field{} {}{} in initializer of `{}`\",\n+                        if remaining_fields.len() == 1 {\"\"} else {\"s\"},\n+                        remaining_fields_names,\n+                        truncated_fields_error,\n+                        adt_ty)\n+                        .span_label(span, &format!(\"missing {}{}\",\n+                            remaining_fields_names,\n+                            truncated_fields_error))\n+                        .emit();\n         }\n     }\n "}, {"sha": "6da7423edb89fc03937d2b93161d5857c3f8a916", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f8ba7cb863bf2e5fe081d82358c7cda376a7eac6/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ba7cb863bf2e5fe081d82358c7cda376a7eac6/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=f8ba7cb863bf2e5fe081d82358c7cda376a7eac6", "patch": "@@ -1560,13 +1560,22 @@ impl<'a> fmt::Display for Item<'a> {\n                 } else {\n                     write!(fmt, \"Module \")?;\n                 },\n-            clean::FunctionItem(..) => write!(fmt, \"Function \")?,\n+            clean::FunctionItem(..) | clean::ForeignFunctionItem(..) =>\n+                write!(fmt, \"Function \")?,\n             clean::TraitItem(..) => write!(fmt, \"Trait \")?,\n             clean::StructItem(..) => write!(fmt, \"Struct \")?,\n             clean::UnionItem(..) => write!(fmt, \"Union \")?,\n             clean::EnumItem(..) => write!(fmt, \"Enum \")?,\n+            clean::TypedefItem(..) => write!(fmt, \"Type Definition \")?,\n+            clean::MacroItem(..) => write!(fmt, \"Macro \")?,\n             clean::PrimitiveItem(..) => write!(fmt, \"Primitive Type \")?,\n-            _ => {}\n+            clean::StaticItem(..) | clean::ForeignStaticItem(..) =>\n+                write!(fmt, \"Static \")?,\n+            clean::ConstantItem(..) => write!(fmt, \"Constant \")?,\n+            _ => {\n+                // We don't generate pages for any other type.\n+                unreachable!();\n+            }\n         }\n         if !self.item.is_primitive() {\n             let cur = &self.cx.current;\n@@ -1628,7 +1637,10 @@ impl<'a> fmt::Display for Item<'a> {\n             clean::StaticItem(ref i) | clean::ForeignStaticItem(ref i) =>\n                 item_static(fmt, self.cx, self.item, i),\n             clean::ConstantItem(ref c) => item_constant(fmt, self.cx, self.item, c),\n-            _ => Ok(())\n+            _ => {\n+                // We don't generate pages for any other type.\n+                unreachable!();\n+            }\n         }\n     }\n }"}, {"sha": "bd27bcf48a09d3671b9392aea2b5ba5d72941fe7", "filename": "src/libstd/path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8ba7cb863bf2e5fe081d82358c7cda376a7eac6/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ba7cb863bf2e5fe081d82358c7cda376a7eac6/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=f8ba7cb863bf2e5fe081d82358c7cda376a7eac6", "patch": "@@ -1169,9 +1169,9 @@ impl PathBuf {\n     /// let mut p = PathBuf::from(\"/test/test.rs\");\n     ///\n     /// p.pop();\n-    /// assert_eq!(Path::new(\"/test\"), p.as_path());\n+    /// assert_eq!(Path::new(\"/test\"), p);\n     /// p.pop();\n-    /// assert_eq!(Path::new(\"/\"), p.as_path());\n+    /// assert_eq!(Path::new(\"/\"), p);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn pop(&mut self) -> bool {"}, {"sha": "154f603c84f162f591c7fd75b8b8541676ca6024", "filename": "src/libstd/time/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f8ba7cb863bf2e5fe081d82358c7cda376a7eac6/src%2Flibstd%2Ftime%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ba7cb863bf2e5fe081d82358c7cda376a7eac6/src%2Flibstd%2Ftime%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fmod.rs?ref=f8ba7cb863bf2e5fe081d82358c7cda376a7eac6", "patch": "@@ -150,6 +150,18 @@ impl Instant {\n     /// This function may panic if the current time is earlier than this\n     /// instant, which is something that can happen if an `Instant` is\n     /// produced synthetically.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::thread::sleep;\n+    /// use std::time::{Duration, Instant};\n+    ///\n+    /// let instant = Instant::now();\n+    /// let three_secs = Duration::from_secs(3);\n+    /// sleep(three_secs);\n+    /// assert!(instant.elapsed() >= three_secs);\n+    /// ```\n     #[stable(feature = \"time2\", since = \"1.8.0\")]\n     pub fn elapsed(&self) -> Duration {\n         Instant::now() - *self"}, {"sha": "e7044102abc7148c0b7508b6cb686191ea7c3034", "filename": "src/test/compile-fail/E0063.rs", "status": "modified", "additions": 39, "deletions": 3, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/f8ba7cb863bf2e5fe081d82358c7cda376a7eac6/src%2Ftest%2Fcompile-fail%2FE0063.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ba7cb863bf2e5fe081d82358c7cda376a7eac6/src%2Ftest%2Fcompile-fail%2FE0063.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0063.rs?ref=f8ba7cb863bf2e5fe081d82358c7cda376a7eac6", "patch": "@@ -8,11 +8,47 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct Foo {\n+// ignore-tidy-linelength\n+\n+struct SingleFoo {\n+    x: i32\n+}\n+\n+struct PluralFoo {\n+    x: i32,\n+    y: i32,\n+    z: i32\n+}\n+\n+struct TruncatedFoo {\n+    a: i32,\n+    b: i32,\n     x: i32,\n-    y: i32\n+    y: i32,\n+    z: i32\n }\n \n+struct TruncatedPluralFoo {\n+    a: i32,\n+    b: i32,\n+    c: i32,\n+    x: i32,\n+    y: i32,\n+    z: i32\n+}\n+\n+\n fn main() {\n-    let x = Foo { x: 0 }; //~ ERROR E0063\n+    let w = SingleFoo { };\n+    //~^ ERROR missing field `x` in initializer of `SingleFoo`\n+    //~| NOTE missing `x`\n+    let x = PluralFoo {x: 1};\n+    //~^ ERROR missing fields `y`, `z` in initializer of `PluralFoo`\n+    //~| NOTE missing `y`, `z`\n+    let y = TruncatedFoo{x:1};\n+    //~^ missing fields `a`, `b`, `y` and 1 other field in initializer of `TruncatedFoo`\n+    //~| NOTE `a`, `b`, `y` and 1 other field\n+    let z = TruncatedPluralFoo{x:1};\n+    //~^ ERROR missing fields `a`, `b`, `c` and 2 other fields in initializer of `TruncatedPluralFoo`\n+    //~| NOTE missing `a`, `b`, `c` and 2 other fields\n }"}, {"sha": "a56fa420944f70b9ab900af01b75d2f09649089c", "filename": "src/test/rustdoc/titles.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/f8ba7cb863bf2e5fe081d82358c7cda376a7eac6/src%2Ftest%2Frustdoc%2Ftitles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8ba7cb863bf2e5fe081d82358c7cda376a7eac6/src%2Ftest%2Frustdoc%2Ftitles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftitles.rs?ref=f8ba7cb863bf2e5fe081d82358c7cda376a7eac6", "patch": "@@ -0,0 +1,59 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name = \"foo\"]\n+\n+// @matches 'foo/index.html' '//h1' 'Crate foo'\n+\n+// @matches 'foo/foo_mod/index.html' '//h1' 'Module foo::foo_mod'\n+pub mod foo_mod {\n+    pub struct __Thing {}\n+}\n+\n+extern {\n+    // @matches 'foo/fn.foo_ffn.html' '//h1' 'Function foo::foo_ffn'\n+    pub fn foo_ffn();\n+}\n+\n+// @matches 'foo/fn.foo_fn.html' '//h1' 'Function foo::foo_fn'\n+pub fn foo_fn() {}\n+\n+// @matches 'foo/trait.FooTrait.html' '//h1' 'Trait foo::FooTrait'\n+pub trait FooTrait {}\n+\n+// @matches 'foo/struct.FooStruct.html' '//h1' 'Struct foo::FooStruct'\n+pub struct FooStruct;\n+\n+// @matches 'foo/enum.FooEnum.html' '//h1' 'Enum foo::FooEnum'\n+pub enum FooEnum {}\n+\n+// @matches 'foo/type.FooType.html' '//h1' 'Type Definition foo::FooType'\n+pub type FooType = FooStruct;\n+\n+// @matches 'foo/macro.foo_macro.html' '//h1' 'Macro foo::foo_macro'\n+#[macro_export]\n+macro_rules! foo_macro {\n+    () => ();\n+}\n+\n+// @matches 'foo/primitive.bool.html' '//h1' 'Primitive Type bool'\n+#[doc(primitive = \"bool\")]\n+mod bool {}\n+\n+// @matches 'foo/static.FOO_STATIC.html' '//h1' 'Static foo::FOO_STATIC'\n+pub static FOO_STATIC: FooStruct = FooStruct;\n+\n+extern {\n+    // @matches 'foo/static.FOO_FSTATIC.html' '//h1' 'Static foo::FOO_FSTATIC'\n+    pub static FOO_FSTATIC: FooStruct;\n+}\n+\n+// @matches 'foo/constant.FOO_CONSTANT.html' '//h1' 'Constant foo::FOO_CONSTANT'\n+pub const FOO_CONSTANT: FooStruct = FooStruct;"}]}