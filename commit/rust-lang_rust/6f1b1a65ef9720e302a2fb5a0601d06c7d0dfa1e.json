{"sha": "6f1b1a65ef9720e302a2fb5a0601d06c7d0dfa1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmMWIxYTY1ZWY5NzIwZTMwMmEyZmI1YTA2MDFkMDZjN2QwZGZhMWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-21T12:55:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-21T12:55:54Z"}, "message": "auto merge of #16631 : pcwalton/rust/unboxed-closures-wrong-trait, r=huonw\n\nthe right trait and take the method name into account.\r\n\r\nCloses #16599.\r\n\r\nr? @huonw", "tree": {"sha": "dcae18b49343e9df32be966c9ecae3e50b8f942b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dcae18b49343e9df32be966c9ecae3e50b8f942b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f1b1a65ef9720e302a2fb5a0601d06c7d0dfa1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f1b1a65ef9720e302a2fb5a0601d06c7d0dfa1e", "html_url": "https://github.com/rust-lang/rust/commit/6f1b1a65ef9720e302a2fb5a0601d06c7d0dfa1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f1b1a65ef9720e302a2fb5a0601d06c7d0dfa1e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6de570f8173fb35ad52c4e5b90bae74d282d28ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/6de570f8173fb35ad52c4e5b90bae74d282d28ad", "html_url": "https://github.com/rust-lang/rust/commit/6de570f8173fb35ad52c4e5b90bae74d282d28ad"}, {"sha": "b0931a0a0f8ff10befa1e3037b670badca52a65f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0931a0a0f8ff10befa1e3037b670badca52a65f", "html_url": "https://github.com/rust-lang/rust/commit/b0931a0a0f8ff10befa1e3037b670badca52a65f"}], "stats": {"total": 178, "additions": 134, "deletions": 44}, "files": [{"sha": "f9043ca337fc088b3e02b9b26258b2112da27b13", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 36, "deletions": 13, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/6f1b1a65ef9720e302a2fb5a0601d06c7d0dfa1e/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1b1a65ef9720e302a2fb5a0601d06c7d0dfa1e/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=6f1b1a65ef9720e302a2fb5a0601d06c7d0dfa1e", "patch": "@@ -19,7 +19,8 @@ use middle::def;\n use middle::dependency_format;\n use middle::freevars::CaptureModeMap;\n use middle::freevars;\n-use middle::lang_items::{FnMutTraitLangItem, OpaqueStructLangItem};\n+use middle::lang_items::{FnTraitLangItem, FnMutTraitLangItem};\n+use middle::lang_items::{FnOnceTraitLangItem, OpaqueStructLangItem};\n use middle::lang_items::{TyDescStructLangItem, TyVisitorTraitLangItem};\n use middle::mem_categorization as mc;\n use middle::resolve;\n@@ -1205,6 +1206,24 @@ pub enum UnboxedClosureKind {\n     FnOnceUnboxedClosureKind,\n }\n \n+impl UnboxedClosureKind {\n+    pub fn trait_did(&self, cx: &ctxt) -> ast::DefId {\n+        let result = match *self {\n+            FnUnboxedClosureKind => cx.lang_items.require(FnTraitLangItem),\n+            FnMutUnboxedClosureKind => {\n+                cx.lang_items.require(FnMutTraitLangItem)\n+            }\n+            FnOnceUnboxedClosureKind => {\n+                cx.lang_items.require(FnOnceTraitLangItem)\n+            }\n+        };\n+        match result {\n+            Ok(trait_did) => trait_did,\n+            Err(err) => cx.sess.fatal(err.as_slice()),\n+        }\n+    }\n+}\n+\n pub fn mk_ctxt(s: Session,\n                dm: resolve::DefMap,\n                named_region_map: resolve_lifetime::NamedRegionMap,\n@@ -3195,19 +3214,23 @@ impl AutoRef {\n     }\n }\n \n-pub fn method_call_type_param_defs(tcx: &ctxt, origin: typeck::MethodOrigin)\n-                                   -> VecPerParamSpace<TypeParameterDef> {\n+pub fn method_call_type_param_defs<T>(typer: &T,\n+                                      origin: typeck::MethodOrigin)\n+                                      -> VecPerParamSpace<TypeParameterDef>\n+                                      where T: mc::Typer {\n     match origin {\n         typeck::MethodStatic(did) => {\n-            ty::lookup_item_type(tcx, did).generics.types.clone()\n-        }\n-        typeck::MethodStaticUnboxedClosure(_) => {\n-            match tcx.lang_items.require(FnMutTraitLangItem) {\n-                Ok(def_id) => {\n-                    lookup_trait_def(tcx, def_id).generics.types.clone()\n-                }\n-                Err(s) => tcx.sess.fatal(s.as_slice()),\n-            }\n+            ty::lookup_item_type(typer.tcx(), did).generics.types.clone()\n+        }\n+        typeck::MethodStaticUnboxedClosure(did) => {\n+            let def_id = typer.unboxed_closures()\n+                              .borrow()\n+                              .find(&did)\n+                              .expect(\"method_call_type_param_defs: didn't \\\n+                                       find unboxed closure\")\n+                              .kind\n+                              .trait_did(typer.tcx());\n+            lookup_trait_def(typer.tcx(), def_id).generics.types.clone()\n         }\n         typeck::MethodParam(typeck::MethodParam{\n             trait_id: trt_id,\n@@ -3219,7 +3242,7 @@ pub fn method_call_type_param_defs(tcx: &ctxt, origin: typeck::MethodOrigin)\n                 method_num: n_mth,\n                 ..\n         }) => {\n-            match ty::trait_item(tcx, trt_id, n_mth) {\n+            match ty::trait_item(typer.tcx(), trt_id, n_mth) {\n                 ty::MethodTraitItem(method) => method.generics.types.clone(),\n             }\n         }"}, {"sha": "245bbe396fd0dca8d32500ebe981344ac23f4fff", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 24, "deletions": 29, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/6f1b1a65ef9720e302a2fb5a0601d06c7d0dfa1e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1b1a65ef9720e302a2fb5a0601d06c7d0dfa1e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=6f1b1a65ef9720e302a2fb5a0601d06c7d0dfa1e", "patch": "@@ -534,6 +534,11 @@ impl<'a> LookupContext<'a> {\n             ty::MethodTraitItem(method) => method,\n         };\n \n+        // Make sure it has the right name!\n+        if method.ident.name != self.m_name {\n+            return\n+        }\n+\n         let vcx = self.fcx.vtable_context();\n         let region_params =\n             vec!(vcx.infcx.next_region_var(MiscVariable(self.span)));\n@@ -562,38 +567,28 @@ impl<'a> LookupContext<'a> {\n     fn push_unboxed_closure_call_candidates_if_applicable(\n             &mut self,\n             closure_did: DefId) {\n-        let trait_dids = [\n-            self.tcx().lang_items.fn_trait(),\n-            self.tcx().lang_items.fn_mut_trait(),\n-            self.tcx().lang_items.fn_once_trait()\n-        ];\n-        for optional_trait_did in trait_dids.iter() {\n-            let trait_did = match *optional_trait_did {\n-                Some(trait_did) => trait_did,\n-                None => continue,\n-            };\n-\n-            match self.tcx().unboxed_closures.borrow().find(&closure_did) {\n-                None => {}  // Fall through to try inherited.\n-                Some(closure) => {\n-                    self.push_unboxed_closure_call_candidate_if_applicable(\n-                        trait_did,\n-                        closure_did,\n-                        &closure.closure_type);\n-                    return\n-                }\n+        match self.tcx().unboxed_closures.borrow().find(&closure_did) {\n+            None => {}  // Fall through to try inherited.\n+            Some(closure) => {\n+                let tcx = self.tcx();\n+                self.push_unboxed_closure_call_candidate_if_applicable(\n+                    closure.kind.trait_did(tcx),\n+                    closure_did,\n+                    &closure.closure_type);\n+                return\n             }\n+        }\n \n-            match self.fcx.inh.unboxed_closures.borrow().find(&closure_did) {\n-                Some(closure) => {\n-                    self.push_unboxed_closure_call_candidate_if_applicable(\n-                        trait_did,\n-                        closure_did,\n-                        &closure.closure_type);\n-                    return\n-                }\n-                None => {}\n+        match self.fcx.inh.unboxed_closures.borrow().find(&closure_did) {\n+            Some(closure) => {\n+                let tcx = self.tcx();\n+                self.push_unboxed_closure_call_candidate_if_applicable(\n+                    closure.kind.trait_did(tcx),\n+                    closure_did,\n+                    &closure.closure_type);\n+                return\n             }\n+            None => {}\n         }\n \n         self.tcx().sess.bug(\"didn't find unboxed closure type in tcx map or \\"}, {"sha": "f33406be59580b093e44d1bd434d49c95e5cd43b", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/6f1b1a65ef9720e302a2fb5a0601d06c7d0dfa1e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1b1a65ef9720e302a2fb5a0601d06c7d0dfa1e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=6f1b1a65ef9720e302a2fb5a0601d06c7d0dfa1e", "patch": "@@ -79,7 +79,10 @@ type parameter).\n \n use middle::const_eval;\n use middle::def;\n+use middle::freevars;\n use middle::lang_items::IteratorItem;\n+use middle::mem_categorization::McResult;\n+use middle::mem_categorization;\n use middle::pat_util::pat_id_map;\n use middle::pat_util;\n use middle::subst;\n@@ -110,6 +113,7 @@ use middle::typeck::no_params;\n use middle::typeck::{require_same_types, vtable_map};\n use middle::typeck::{MethodCall, MethodMap};\n use middle::typeck::{TypeAndSubsts};\n+use middle::typeck;\n use middle::lang_items::TypeIdLangItem;\n use lint;\n use util::common::{block_query, indenter, loop_query};\n@@ -261,6 +265,39 @@ pub struct FnCtxt<'a> {\n     ccx: &'a CrateCtxt<'a>,\n }\n \n+impl<'a> mem_categorization::Typer for FnCtxt<'a> {\n+    fn tcx<'a>(&'a self) -> &'a ty::ctxt {\n+        self.ccx.tcx\n+    }\n+    fn node_ty(&self, id: ast::NodeId) -> McResult<ty::t> {\n+        self.ccx.tcx.node_ty(id)\n+    }\n+    fn node_method_ty(&self, method_call: typeck::MethodCall)\n+                      -> Option<ty::t> {\n+        self.ccx.tcx.node_method_ty(method_call)\n+    }\n+    fn adjustments<'a>(&'a self) -> &'a RefCell<NodeMap<ty::AutoAdjustment>> {\n+        self.ccx.tcx.adjustments()\n+    }\n+    fn is_method_call(&self, id: ast::NodeId) -> bool {\n+        self.ccx.tcx.is_method_call(id)\n+    }\n+    fn temporary_scope(&self, rvalue_id: ast::NodeId) -> Option<ast::NodeId> {\n+        self.ccx.tcx.temporary_scope(rvalue_id)\n+    }\n+    fn upvar_borrow(&self, upvar_id: ty::UpvarId) -> ty::UpvarBorrow {\n+        self.ccx.tcx.upvar_borrow(upvar_id)\n+    }\n+    fn capture_mode(&self, closure_expr_id: ast::NodeId)\n+                    -> freevars::CaptureMode {\n+        self.ccx.tcx.capture_mode(closure_expr_id)\n+    }\n+    fn unboxed_closures<'a>(&'a self)\n+                        -> &'a RefCell<DefIdMap<ty::UnboxedClosure>> {\n+        &self.inh.unboxed_closures\n+    }\n+}\n+\n impl<'a> Inherited<'a> {\n     fn new(tcx: &'a ty::ctxt,\n            param_env: ty::ParameterEnvironment)"}, {"sha": "3813dd796424498b5112da7200d9037da596f9e5", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f1b1a65ef9720e302a2fb5a0601d06c7d0dfa1e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1b1a65ef9720e302a2fb5a0601d06c7d0dfa1e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=6f1b1a65ef9720e302a2fb5a0601d06c7d0dfa1e", "patch": "@@ -263,7 +263,7 @@ impl<'a> Rcx<'a> {\n \n impl<'fcx> mc::Typer for Rcx<'fcx> {\n     fn tcx<'a>(&'a self) -> &'a ty::ctxt {\n-        self.fcx.tcx()\n+        self.fcx.ccx.tcx\n     }\n \n     fn node_ty(&self, id: ast::NodeId) -> mc::McResult<ty::t> {"}, {"sha": "0708846af2a59fc345151cde2caeb9c44b93863d", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6f1b1a65ef9720e302a2fb5a0601d06c7d0dfa1e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1b1a65ef9720e302a2fb5a0601d06c7d0dfa1e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=6f1b1a65ef9720e302a2fb5a0601d06c7d0dfa1e", "patch": "@@ -774,7 +774,8 @@ pub fn early_resolve_expr(ex: &ast::Expr, fcx: &FnCtxt, is_early: bool) {\n           Some(method) => {\n               debug!(\"vtable resolution on parameter bounds for method call {}\",\n                      ex.repr(fcx.tcx()));\n-              let type_param_defs = ty::method_call_type_param_defs(cx.tcx, method.origin);\n+              let type_param_defs =\n+                  ty::method_call_type_param_defs(fcx, method.origin);\n               let substs = fcx.method_ty_substs(ex.id);\n               let vcx = fcx.vtable_context();\n               let vtbls = lookup_vtables(&vcx, ex.span,"}, {"sha": "871889f26dfd24da2f62ff218546ebd890da759e", "filename": "src/test/compile-fail/unboxed-closures-static-call-wrong-trait.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6f1b1a65ef9720e302a2fb5a0601d06c7d0dfa1e/src%2Ftest%2Fcompile-fail%2Funboxed-closures-static-call-wrong-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1b1a65ef9720e302a2fb5a0601d06c7d0dfa1e/src%2Ftest%2Fcompile-fail%2Funboxed-closures-static-call-wrong-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-static-call-wrong-trait.rs?ref=6f1b1a65ef9720e302a2fb5a0601d06c7d0dfa1e", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(unboxed_closures)]\n+\n+fn main() {\n+    let mut_ = |&mut: x| x;\n+    mut_.call_once((0i, )); //~ ERROR type `closure` does not implement\n+}\n+"}, {"sha": "beab82e804bf74b8ba0054b3fac8185356a45cd6", "filename": "src/test/run-pass/unboxed-closures-static-call-fn-once.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6f1b1a65ef9720e302a2fb5a0601d06c7d0dfa1e/src%2Ftest%2Frun-pass%2Funboxed-closures-static-call-fn-once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1b1a65ef9720e302a2fb5a0601d06c7d0dfa1e/src%2Ftest%2Frun-pass%2Funboxed-closures-static-call-fn-once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-static-call-fn-once.rs?ref=6f1b1a65ef9720e302a2fb5a0601d06c7d0dfa1e", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(unboxed_closures)]\n+\n+fn main() {\n+    let onetime = |: x| x;\n+    onetime.call_once((0i,));\n+}\n+"}]}