{"sha": "be4cd07a7ea2cf5874693e469c036d91ebfd9457", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlNGNkMDdhN2VhMmNmNTg3NDY5M2U0NjljMDM2ZDkxZWJmZDk0NTc=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-11-07T01:14:45Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-11-07T01:14:45Z"}, "message": "Rollup merge of #29622 - steveklabnik:gh29621, r=bstrie\n\nNow that thread::sleep is a real thing, let's use it\n\nFixes #29621\n\nr? @bstrie", "tree": {"sha": "2e5f179f49a88e14ed2c95cadd7b09c5d20491e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e5f179f49a88e14ed2c95cadd7b09c5d20491e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be4cd07a7ea2cf5874693e469c036d91ebfd9457", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be4cd07a7ea2cf5874693e469c036d91ebfd9457", "html_url": "https://github.com/rust-lang/rust/commit/be4cd07a7ea2cf5874693e469c036d91ebfd9457", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be4cd07a7ea2cf5874693e469c036d91ebfd9457/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50e8707cc3ff4c08c2e45cffae0ab6ab5295d45a", "url": "https://api.github.com/repos/rust-lang/rust/commits/50e8707cc3ff4c08c2e45cffae0ab6ab5295d45a", "html_url": "https://github.com/rust-lang/rust/commit/50e8707cc3ff4c08c2e45cffae0ab6ab5295d45a"}, {"sha": "801f83ff65fd51423cf64aada972722f44b9d789", "url": "https://api.github.com/repos/rust-lang/rust/commits/801f83ff65fd51423cf64aada972722f44b9d789", "html_url": "https://github.com/rust-lang/rust/commit/801f83ff65fd51423cf64aada972722f44b9d789"}], "stats": {"total": 35, "additions": 21, "deletions": 14}, "files": [{"sha": "cc6cfc2f4a0973d0faf6142200759c9293fdcdbe", "filename": "src/doc/trpl/concurrency.md", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/be4cd07a7ea2cf5874693e469c036d91ebfd9457/src%2Fdoc%2Ftrpl%2Fconcurrency.md", "raw_url": "https://github.com/rust-lang/rust/raw/be4cd07a7ea2cf5874693e469c036d91ebfd9457/src%2Fdoc%2Ftrpl%2Fconcurrency.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fconcurrency.md?ref=be4cd07a7ea2cf5874693e469c036d91ebfd9457", "patch": "@@ -121,6 +121,7 @@ languages. It will not compile:\n \n ```ignore\n use std::thread;\n+use std::time::Duration;\n \n fn main() {\n     let mut data = vec![1, 2, 3];\n@@ -131,7 +132,7 @@ fn main() {\n         });\n     }\n \n-    thread::sleep_ms(50);\n+    thread::sleep(Duration::from_millis(50));\n }\n ```\n \n@@ -165,6 +166,7 @@ indivisible operations which can't have data races.\n ```ignore\n use std::thread;\n use std::sync::Arc;\n+use std::time::Duration;\n \n fn main() {\n     let mut data = Arc::new(vec![1, 2, 3]);\n@@ -176,7 +178,7 @@ fn main() {\n         });\n     }\n \n-    thread::sleep_ms(50);\n+    thread::sleep(Duration::from_millis(50));\n }\n ```\n \n@@ -207,6 +209,7 @@ Here's the working version:\n ```rust\n use std::sync::{Arc, Mutex};\n use std::thread;\n+use std::time::Duration;\n \n fn main() {\n     let data = Arc::new(Mutex::new(vec![1, 2, 3]));\n@@ -219,7 +222,7 @@ fn main() {\n         });\n     }\n \n-    thread::sleep_ms(50);\n+    thread::sleep(Duration::from_millis(50));\n }\n ```\n \n@@ -241,6 +244,7 @@ Let's examine the body of the thread more closely:\n ```rust\n # use std::sync::{Arc, Mutex};\n # use std::thread;\n+# use std::time::Duration;\n # fn main() {\n #     let data = Arc::new(Mutex::new(vec![1, 2, 3]));\n #     for i in 0..3 {\n@@ -250,7 +254,7 @@ thread::spawn(move || {\n     data[i] += 1;\n });\n #     }\n-#     thread::sleep_ms(50);\n+#     thread::sleep(Duration::from_millis(50));\n # }\n ```\n "}, {"sha": "5f66a5b9e297c7eae8324dbec5ffa3ee5065efca", "filename": "src/doc/trpl/dining-philosophers.md", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/be4cd07a7ea2cf5874693e469c036d91ebfd9457/src%2Fdoc%2Ftrpl%2Fdining-philosophers.md", "raw_url": "https://github.com/rust-lang/rust/raw/be4cd07a7ea2cf5874693e469c036d91ebfd9457/src%2Fdoc%2Ftrpl%2Fdining-philosophers.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fdining-philosophers.md?ref=be4cd07a7ea2cf5874693e469c036d91ebfd9457", "patch": "@@ -264,6 +264,7 @@ eat. Here\u2019s the next version:\n \n ```rust\n use std::thread;\n+use std::time::Duration;\n \n struct Philosopher {\n     name: String,\n@@ -279,7 +280,7 @@ impl Philosopher {\n     fn eat(&self) {\n         println!(\"{} is eating.\", self.name);\n \n-        thread::sleep_ms(1000);\n+        thread::sleep(Duration::from_millis(1000));\n \n         println!(\"{} is done eating.\", self.name);\n     }\n@@ -313,13 +314,13 @@ from the standard library, and so we need to `use` it.\n     fn eat(&self) {\n         println!(\"{} is eating.\", self.name);\n \n-        thread::sleep_ms(1000);\n+        thread::sleep(Duration::from_millis(1000));\n \n         println!(\"{} is done eating.\", self.name);\n     }\n ```\n \n-We now print out two messages, with a `sleep_ms()` in the middle. This will\n+We now print out two messages, with a `sleep` in the middle. This will\n simulate the time it takes a philosopher to eat.\n \n If you run this program, you should see each philosopher eat in turn:\n@@ -345,6 +346,7 @@ Here\u2019s the next iteration:\n \n ```rust\n use std::thread;\n+use std::time::Duration;\n \n struct Philosopher {\n     name: String,\n@@ -360,7 +362,7 @@ impl Philosopher {\n     fn eat(&self) {\n         println!(\"{} is eating.\", self.name);\n \n-        thread::sleep_ms(1000);\n+        thread::sleep(Duration::from_millis(1000));\n \n         println!(\"{} is done eating.\", self.name);\n     }\n@@ -493,6 +495,7 @@ Let\u2019s modify the program to use the `Table`:\n \n ```rust\n use std::thread;\n+use std::time::Duration;\n use std::sync::{Mutex, Arc};\n \n struct Philosopher {\n@@ -512,12 +515,12 @@ impl Philosopher {\n \n     fn eat(&self, table: &Table) {\n         let _left = table.forks[self.left].lock().unwrap();\n-        thread::sleep_ms(150);\n+        thread::sleep(Duration::from_millis(150));\n         let _right = table.forks[self.right].lock().unwrap();\n \n         println!(\"{} is eating.\", self.name);\n \n-        thread::sleep_ms(1000);\n+        thread::sleep(Duration::from_millis(1000));\n \n         println!(\"{} is done eating.\", self.name);\n     }\n@@ -598,12 +601,12 @@ We now need to construct those `left` and `right` values, so we add them to\n ```rust,ignore\n fn eat(&self, table: &Table) {\n     let _left = table.forks[self.left].lock().unwrap();\n-    thread::sleep_ms(150);\n+    thread::sleep(Duration::from_millis(150));\n     let _right = table.forks[self.right].lock().unwrap();\n \n     println!(\"{} is eating.\", self.name);\n \n-    thread::sleep_ms(1000);\n+    thread::sleep(Duration::from_millis(1000));\n \n     println!(\"{} is done eating.\", self.name);\n }\n@@ -614,8 +617,8 @@ We have three new lines. We\u2019ve added an argument, `table`. We access the\n the fork at that particular index. That gives us access to the `Mutex` at that\n index, and we call `lock()` on it. If the mutex is currently being accessed by\n someone else, we\u2019ll block until it becomes available. We have also a call to\n-`thread::sleep_ms` between the moment first fork is picked and the moment the\n-second forked is picked, as the process  of picking up the fork is not\n+`thread::sleep` between the moment the first fork is picked and the moment the\n+second forked is picked, as the process of picking up the fork is not\n immediate.\n \n The call to `lock()` might fail, and if it does, we want to crash. In this"}]}