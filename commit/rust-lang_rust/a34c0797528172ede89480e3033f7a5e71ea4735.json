{"sha": "a34c0797528172ede89480e3033f7a5e71ea4735", "node_id": "C_kwDOAAsO6NoAKGEzNGMwNzk3NTI4MTcyZWRlODk0ODBlMzAzM2Y3YTVlNzFlYTQ3MzU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-17T09:40:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-17T09:40:29Z"}, "message": "Auto merge of #92816 - tmiasko:rm-llvm-asm, r=Amanieu\n\nRemove deprecated LLVM-style inline assembly\n\nThe `llvm_asm!` was deprecated back in #87590 1.56.0, with intention to remove\nit once `asm!` was stabilized, which already happened in #91728 1.59.0. Now it\nis time to remove `llvm_asm!` to avoid continued maintenance cost.\n\nCloses #70173.\nCloses #92794.\nCloses #87612.\nCloses #82065.\n\ncc `@rust-lang/wg-inline-asm`\n\nr? `@Amanieu`", "tree": {"sha": "2040a76ba69e7102179c469e0cc35a0884e628d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2040a76ba69e7102179c469e0cc35a0884e628d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a34c0797528172ede89480e3033f7a5e71ea4735", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a34c0797528172ede89480e3033f7a5e71ea4735", "html_url": "https://github.com/rust-lang/rust/commit/a34c0797528172ede89480e3033f7a5e71ea4735", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a34c0797528172ede89480e3033f7a5e71ea4735/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "128417f40f80ce585414bf5a017540447e6be775", "url": "https://api.github.com/repos/rust-lang/rust/commits/128417f40f80ce585414bf5a017540447e6be775", "html_url": "https://github.com/rust-lang/rust/commit/128417f40f80ce585414bf5a017540447e6be775"}, {"sha": "b085eb0b107a2dc4f426811d000ca4ac82bb71b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b085eb0b107a2dc4f426811d000ca4ac82bb71b6", "html_url": "https://github.com/rust-lang/rust/commit/b085eb0b107a2dc4f426811d000ca4ac82bb71b6"}], "stats": {"total": 3532, "additions": 235, "deletions": 3297}, "files": [{"sha": "079b9e43373fa4847b9f6941e5bd0285843e0e2e", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 1, "deletions": 38, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -1266,7 +1266,7 @@ impl Expr {\n             ExprKind::Break(..) => ExprPrecedence::Break,\n             ExprKind::Continue(..) => ExprPrecedence::Continue,\n             ExprKind::Ret(..) => ExprPrecedence::Ret,\n-            ExprKind::InlineAsm(..) | ExprKind::LlvmInlineAsm(..) => ExprPrecedence::InlineAsm,\n+            ExprKind::InlineAsm(..) => ExprPrecedence::InlineAsm,\n             ExprKind::MacCall(..) => ExprPrecedence::Mac,\n             ExprKind::Struct(..) => ExprPrecedence::Struct,\n             ExprKind::Repeat(..) => ExprPrecedence::Repeat,\n@@ -1423,8 +1423,6 @@ pub enum ExprKind {\n \n     /// Output of the `asm!()` macro.\n     InlineAsm(P<InlineAsm>),\n-    /// Output of the `llvm_asm!()` macro.\n-    LlvmInlineAsm(P<LlvmInlineAsm>),\n \n     /// A macro invocation; pre-expansion.\n     MacCall(MacCall),\n@@ -2076,41 +2074,6 @@ pub struct InlineAsm {\n     pub line_spans: Vec<Span>,\n }\n \n-/// Inline assembly dialect.\n-///\n-/// E.g., `\"intel\"` as in `llvm_asm!(\"mov eax, 2\" : \"={eax}\"(result) : : : \"intel\")`.\n-#[derive(Clone, PartialEq, Encodable, Decodable, Debug, Copy, Hash, HashStable_Generic)]\n-pub enum LlvmAsmDialect {\n-    Att,\n-    Intel,\n-}\n-\n-/// LLVM-style inline assembly.\n-///\n-/// E.g., `\"={eax}\"(result)` as in `llvm_asm!(\"mov eax, 2\" : \"={eax}\"(result) : : : \"intel\")`.\n-#[derive(Clone, Encodable, Decodable, Debug)]\n-pub struct LlvmInlineAsmOutput {\n-    pub constraint: Symbol,\n-    pub expr: P<Expr>,\n-    pub is_rw: bool,\n-    pub is_indirect: bool,\n-}\n-\n-/// LLVM-style inline assembly.\n-///\n-/// E.g., `llvm_asm!(\"NOP\");`.\n-#[derive(Clone, Encodable, Decodable, Debug)]\n-pub struct LlvmInlineAsm {\n-    pub asm: Symbol,\n-    pub asm_str_style: StrStyle,\n-    pub outputs: Vec<LlvmInlineAsmOutput>,\n-    pub inputs: Vec<(Symbol, P<Expr>)>,\n-    pub clobbers: Vec<Symbol>,\n-    pub volatile: bool,\n-    pub alignstack: bool,\n-    pub dialect: LlvmAsmDialect,\n-}\n-\n /// A parameter in a function header.\n ///\n /// E.g., `bar: usize` as in `fn foo(bar: usize)`."}, {"sha": "564a8a8c8729eba2a7ed09f2664f17ca23541bff", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -1350,23 +1350,6 @@ pub fn noop_visit_expr<T: MutVisitor>(\n             visit_opt(expr, |expr| vis.visit_expr(expr));\n         }\n         ExprKind::InlineAsm(asm) => noop_visit_inline_asm(asm, vis),\n-        ExprKind::LlvmInlineAsm(asm) => {\n-            let LlvmInlineAsm {\n-                asm: _,\n-                asm_str_style: _,\n-                outputs,\n-                inputs,\n-                clobbers: _,\n-                volatile: _,\n-                alignstack: _,\n-                dialect: _,\n-            } = asm.deref_mut();\n-            for out in outputs {\n-                let LlvmInlineAsmOutput { constraint: _, expr, is_rw: _, is_indirect: _ } = out;\n-                vis.visit_expr(expr);\n-            }\n-            visit_vec(inputs, |(_c, expr)| vis.visit_expr(expr));\n-        }\n         ExprKind::MacCall(mac) => vis.visit_mac_call(mac),\n         ExprKind::Struct(se) => {\n             let StructExpr { qself, path, fields, rest } = se.deref_mut();"}, {"sha": "0b95270a4e1ef25804269c7f0de8577f17ca92dd", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -864,14 +864,6 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n         ExprKind::MacCall(ref mac) => visitor.visit_mac_call(mac),\n         ExprKind::Paren(ref subexpression) => visitor.visit_expr(subexpression),\n         ExprKind::InlineAsm(ref asm) => walk_inline_asm(visitor, asm),\n-        ExprKind::LlvmInlineAsm(ref ia) => {\n-            for &(_, ref input) in &ia.inputs {\n-                visitor.visit_expr(input)\n-            }\n-            for output in &ia.outputs {\n-                visitor.visit_expr(&output.expr)\n-            }\n-        }\n         ExprKind::Yield(ref optional_expression) => {\n             walk_list!(visitor, visit_expr, optional_expression);\n         }"}, {"sha": "470e9114217c64e154fca88502bc973d206ce009", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -226,7 +226,6 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 ExprKind::InlineAsm(ref asm) => {\n                     hir::ExprKind::InlineAsm(self.lower_inline_asm(e.span, asm))\n                 }\n-                ExprKind::LlvmInlineAsm(ref asm) => self.lower_expr_llvm_asm(asm),\n                 ExprKind::Struct(ref se) => {\n                     let rest = match &se.rest {\n                         StructRest::Base(e) => Some(self.lower_expr(e)),\n@@ -1286,38 +1285,6 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         result\n     }\n \n-    fn lower_expr_llvm_asm(&mut self, asm: &LlvmInlineAsm) -> hir::ExprKind<'hir> {\n-        let inner = hir::LlvmInlineAsmInner {\n-            inputs: asm.inputs.iter().map(|&(c, _)| c).collect(),\n-            outputs: asm\n-                .outputs\n-                .iter()\n-                .map(|out| hir::LlvmInlineAsmOutput {\n-                    constraint: out.constraint,\n-                    is_rw: out.is_rw,\n-                    is_indirect: out.is_indirect,\n-                    span: self.lower_span(out.expr.span),\n-                })\n-                .collect(),\n-            asm: asm.asm,\n-            asm_str_style: asm.asm_str_style,\n-            clobbers: asm.clobbers.clone(),\n-            volatile: asm.volatile,\n-            alignstack: asm.alignstack,\n-            dialect: asm.dialect,\n-        };\n-        let hir_asm = hir::LlvmInlineAsm {\n-            inner,\n-            inputs_exprs: self.arena.alloc_from_iter(\n-                asm.inputs.iter().map(|&(_, ref input)| self.lower_expr_mut(input)),\n-            ),\n-            outputs_exprs: self\n-                .arena\n-                .alloc_from_iter(asm.outputs.iter().map(|out| self.lower_expr_mut(&out.expr))),\n-        };\n-        hir::ExprKind::LlvmInlineAsm(self.arena.alloc(hir_asm))\n-    }\n-\n     fn lower_expr_field(&mut self, f: &ExprField) -> hir::ExprField<'hir> {\n         hir::ExprField {\n             hir_id: self.next_id(),"}, {"sha": "45920bb27d5b6dab93cb7262ddca99da301dea35", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -960,15 +960,6 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 return;\n             }\n             ExprKind::Let(..) if !let_allowed => this.ban_let_expr(expr),\n-            ExprKind::LlvmInlineAsm(..) if !this.session.target.allow_asm => {\n-                struct_span_err!(\n-                    this.session,\n-                    expr.span,\n-                    E0472,\n-                    \"llvm_asm! is unsupported on this target\"\n-                )\n-                .emit();\n-            }\n             ExprKind::Match(expr, arms) => {\n                 this.visit_expr(expr);\n                 for arm in arms {"}, {"sha": "dab2e1f5ee14b65cb38a676c4249c6e3246bad54", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -2168,62 +2168,6 @@ impl<'a> State<'a> {\n                 self.word(\"asm!\");\n                 self.print_inline_asm(a);\n             }\n-            ast::ExprKind::LlvmInlineAsm(ref a) => {\n-                self.word(\"llvm_asm!\");\n-                self.popen();\n-                self.print_symbol(a.asm, a.asm_str_style);\n-                self.word_space(\":\");\n-\n-                self.commasep(Inconsistent, &a.outputs, |s, out| {\n-                    let constraint = out.constraint.as_str();\n-                    let mut ch = constraint.chars();\n-                    match ch.next() {\n-                        Some('=') if out.is_rw => {\n-                            s.print_string(&format!(\"+{}\", ch.as_str()), ast::StrStyle::Cooked)\n-                        }\n-                        _ => s.print_string(&constraint, ast::StrStyle::Cooked),\n-                    }\n-                    s.popen();\n-                    s.print_expr(&out.expr);\n-                    s.pclose();\n-                });\n-                self.space();\n-                self.word_space(\":\");\n-\n-                self.commasep(Inconsistent, &a.inputs, |s, &(co, ref o)| {\n-                    s.print_symbol(co, ast::StrStyle::Cooked);\n-                    s.popen();\n-                    s.print_expr(o);\n-                    s.pclose();\n-                });\n-                self.space();\n-                self.word_space(\":\");\n-\n-                self.commasep(Inconsistent, &a.clobbers, |s, &co| {\n-                    s.print_symbol(co, ast::StrStyle::Cooked);\n-                });\n-\n-                let mut options = vec![];\n-                if a.volatile {\n-                    options.push(\"volatile\");\n-                }\n-                if a.alignstack {\n-                    options.push(\"alignstack\");\n-                }\n-                if a.dialect == ast::LlvmAsmDialect::Intel {\n-                    options.push(\"intel\");\n-                }\n-\n-                if !options.is_empty() {\n-                    self.space();\n-                    self.word_space(\":\");\n-                    self.commasep(Inconsistent, &options, |s, &co| {\n-                        s.print_string(co, ast::StrStyle::Cooked);\n-                    });\n-                }\n-\n-                self.pclose();\n-            }\n             ast::ExprKind::MacCall(ref m) => self.print_mac(m),\n             ast::ExprKind::Paren(ref e) => {\n                 self.popen();"}, {"sha": "f0036f09c3881fccb3af7fccd7025e3b68c70db0", "filename": "compiler/rustc_borrowck/src/dataflow.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -8,7 +8,6 @@ use rustc_mir_dataflow::ResultsVisitable;\n use rustc_mir_dataflow::{self, fmt::DebugWithContext, CallReturnPlaces, GenKill};\n use rustc_mir_dataflow::{Analysis, Direction, Results};\n use std::fmt;\n-use std::iter;\n \n use crate::{\n     places_conflict, BorrowSet, PlaceConflictBias, PlaceExt, RegionInferenceContext, ToRegionVid,\n@@ -385,14 +384,6 @@ impl<'tcx> rustc_mir_dataflow::GenKillAnalysis<'tcx> for Borrows<'_, 'tcx> {\n                 self.kill_borrows_on_place(trans, Place::from(local));\n             }\n \n-            mir::StatementKind::LlvmInlineAsm(ref asm) => {\n-                for (output, kind) in iter::zip(&*asm.outputs, &asm.asm.outputs) {\n-                    if !kind.is_indirect && !kind.is_rw {\n-                        self.kill_borrows_on_place(trans, *output);\n-                    }\n-                }\n-            }\n-\n             mir::StatementKind::FakeRead(..)\n             | mir::StatementKind::SetDiscriminant { .. }\n             | mir::StatementKind::StorageLive(..)"}, {"sha": "eec994f88b96e3500ab57a9f125e8f243a92ecc5", "filename": "compiler/rustc_borrowck/src/def_use.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_borrowck%2Fsrc%2Fdef_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_borrowck%2Fsrc%2Fdef_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdef_use.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -16,9 +16,6 @@ pub fn categorize(context: PlaceContext) -> Option<DefUse> {\n \n         PlaceContext::MutatingUse(MutatingUseContext::Store) |\n \n-        // This is potentially both a def and a use...\n-        PlaceContext::MutatingUse(MutatingUseContext::LlvmAsmOutput) |\n-\n         // We let Call define the result in both the success and\n         // unwind cases. This is not really correct, however it\n         // does not seem to be observable due to the way that we"}, {"sha": "73ced63e4d75075ce517f7387f5ecaf22249d0eb", "filename": "compiler/rustc_borrowck/src/invalidation.rs", "status": "modified", "additions": 10, "deletions": 41, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -5,12 +5,11 @@ use rustc_middle::mir::{BorrowKind, Mutability, Operand};\n use rustc_middle::mir::{InlineAsmOperand, Terminator, TerminatorKind};\n use rustc_middle::mir::{Statement, StatementKind};\n use rustc_middle::ty::TyCtxt;\n-use std::iter;\n \n use crate::{\n     borrow_set::BorrowSet, facts::AllFacts, location::LocationTable, path_utils::*, AccessDepth,\n-    Activation, ArtificialField, BorrowIndex, Deep, JustWrite, LocalMutationIsAllowed, MutateMode,\n-    Read, ReadKind, ReadOrWrite, Reservation, Shallow, Write, WriteAndRead, WriteKind,\n+    Activation, ArtificialField, BorrowIndex, Deep, LocalMutationIsAllowed, Read, ReadKind,\n+    ReadOrWrite, Reservation, Shallow, Write, WriteKind,\n };\n \n pub(super) fn generate_invalidates<'tcx>(\n@@ -59,37 +58,13 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n             StatementKind::Assign(box (lhs, rhs)) => {\n                 self.consume_rvalue(location, rhs);\n \n-                self.mutate_place(location, *lhs, Shallow(None), JustWrite);\n+                self.mutate_place(location, *lhs, Shallow(None));\n             }\n             StatementKind::FakeRead(box (_, _)) => {\n                 // Only relevant for initialized/liveness/safety checks.\n             }\n             StatementKind::SetDiscriminant { place, variant_index: _ } => {\n-                self.mutate_place(location, **place, Shallow(None), JustWrite);\n-            }\n-            StatementKind::LlvmInlineAsm(asm) => {\n-                for (o, output) in iter::zip(&asm.asm.outputs, &*asm.outputs) {\n-                    if o.is_indirect {\n-                        // FIXME(eddyb) indirect inline asm outputs should\n-                        // be encoded through MIR place derefs instead.\n-                        self.access_place(\n-                            location,\n-                            *output,\n-                            (Deep, Read(ReadKind::Copy)),\n-                            LocalMutationIsAllowed::No,\n-                        );\n-                    } else {\n-                        self.mutate_place(\n-                            location,\n-                            *output,\n-                            if o.is_rw { Deep } else { Shallow(None) },\n-                            if o.is_rw { WriteAndRead } else { JustWrite },\n-                        );\n-                    }\n-                }\n-                for (_, input) in asm.inputs.iter() {\n-                    self.consume_operand(location, input);\n-                }\n+                self.mutate_place(location, **place, Shallow(None));\n             }\n             StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping {\n                 ref src,\n@@ -142,7 +117,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n                 target: _,\n                 unwind: _,\n             } => {\n-                self.mutate_place(location, *drop_place, Deep, JustWrite);\n+                self.mutate_place(location, *drop_place, Deep);\n                 self.consume_operand(location, new_value);\n             }\n             TerminatorKind::Call {\n@@ -158,7 +133,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n                     self.consume_operand(location, arg);\n                 }\n                 if let Some((dest, _ /*bb*/)) = destination {\n-                    self.mutate_place(location, *dest, Deep, JustWrite);\n+                    self.mutate_place(location, *dest, Deep);\n                 }\n             }\n             TerminatorKind::Assert { ref cond, expected: _, ref msg, target: _, cleanup: _ } => {\n@@ -181,7 +156,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n                     }\n                 }\n \n-                self.mutate_place(location, *resume_arg, Deep, JustWrite);\n+                self.mutate_place(location, *resume_arg, Deep);\n             }\n             TerminatorKind::Resume | TerminatorKind::Return | TerminatorKind::GeneratorDrop => {\n                 // Invalidate all borrows of local places\n@@ -208,13 +183,13 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n                         }\n                         InlineAsmOperand::Out { reg: _, late: _, place, .. } => {\n                             if let Some(place) = place {\n-                                self.mutate_place(location, place, Shallow(None), JustWrite);\n+                                self.mutate_place(location, place, Shallow(None));\n                             }\n                         }\n                         InlineAsmOperand::InOut { reg: _, late: _, ref in_value, out_place } => {\n                             self.consume_operand(location, in_value);\n                             if let Some(out_place) = out_place {\n-                                self.mutate_place(location, out_place, Shallow(None), JustWrite);\n+                                self.mutate_place(location, out_place, Shallow(None));\n                             }\n                         }\n                         InlineAsmOperand::Const { value: _ }\n@@ -238,13 +213,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n \n impl<'cx, 'tcx> InvalidationGenerator<'cx, 'tcx> {\n     /// Simulates mutation of a place.\n-    fn mutate_place(\n-        &mut self,\n-        location: Location,\n-        place: Place<'tcx>,\n-        kind: AccessDepth,\n-        _mode: MutateMode,\n-    ) {\n+    fn mutate_place(&mut self, location: Location, place: Place<'tcx>, kind: AccessDepth) {\n         self.access_place(\n             location,\n             place,"}, {"sha": "1e9acb114b7fc46db6632fdadfdcc7c390b3a34d", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 8, "deletions": 72, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -40,7 +40,6 @@ use either::Either;\n use smallvec::SmallVec;\n use std::cell::RefCell;\n use std::collections::BTreeMap;\n-use std::iter;\n use std::mem;\n use std::rc::Rc;\n \n@@ -55,7 +54,6 @@ use rustc_mir_dataflow::MoveDataParamEnv;\n use self::diagnostics::{AccessKind, RegionName};\n use self::location::LocationTable;\n use self::prefixes::PrefixSet;\n-use self::MutateMode::{JustWrite, WriteAndRead};\n use facts::AllFacts;\n \n use self::path_utils::*;\n@@ -630,7 +628,7 @@ impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtx\n             StatementKind::Assign(box (lhs, ref rhs)) => {\n                 self.consume_rvalue(location, (rhs, span), flow_state);\n \n-                self.mutate_place(location, (*lhs, span), Shallow(None), JustWrite, flow_state);\n+                self.mutate_place(location, (*lhs, span), Shallow(None), flow_state);\n             }\n             StatementKind::FakeRead(box (_, ref place)) => {\n                 // Read for match doesn't access any memory and is used to\n@@ -651,41 +649,8 @@ impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtx\n                 );\n             }\n             StatementKind::SetDiscriminant { place, variant_index: _ } => {\n-                self.mutate_place(location, (**place, span), Shallow(None), JustWrite, flow_state);\n+                self.mutate_place(location, (**place, span), Shallow(None), flow_state);\n             }\n-            StatementKind::LlvmInlineAsm(ref asm) => {\n-                for (o, output) in iter::zip(&asm.asm.outputs, &*asm.outputs) {\n-                    if o.is_indirect {\n-                        // FIXME(eddyb) indirect inline asm outputs should\n-                        // be encoded through MIR place derefs instead.\n-                        self.access_place(\n-                            location,\n-                            (*output, o.span),\n-                            (Deep, Read(ReadKind::Copy)),\n-                            LocalMutationIsAllowed::No,\n-                            flow_state,\n-                        );\n-                        self.check_if_path_or_subpath_is_moved(\n-                            location,\n-                            InitializationRequiringAction::Use,\n-                            (output.as_ref(), o.span),\n-                            flow_state,\n-                        );\n-                    } else {\n-                        self.mutate_place(\n-                            location,\n-                            (*output, o.span),\n-                            if o.is_rw { Deep } else { Shallow(None) },\n-                            if o.is_rw { WriteAndRead } else { JustWrite },\n-                            flow_state,\n-                        );\n-                    }\n-                }\n-                for (_, input) in asm.inputs.iter() {\n-                    self.consume_operand(location, (input, span), flow_state);\n-                }\n-            }\n-\n             StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping {\n                 ..\n             }) => {\n@@ -750,7 +715,7 @@ impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtx\n                 target: _,\n                 unwind: _,\n             } => {\n-                self.mutate_place(loc, (drop_place, span), Deep, JustWrite, flow_state);\n+                self.mutate_place(loc, (drop_place, span), Deep, flow_state);\n                 self.consume_operand(loc, (new_value, span), flow_state);\n             }\n             TerminatorKind::Call {\n@@ -766,7 +731,7 @@ impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtx\n                     self.consume_operand(loc, (arg, span), flow_state);\n                 }\n                 if let Some((dest, _ /*bb*/)) = *destination {\n-                    self.mutate_place(loc, (dest, span), Deep, JustWrite, flow_state);\n+                    self.mutate_place(loc, (dest, span), Deep, flow_state);\n                 }\n             }\n             TerminatorKind::Assert { ref cond, expected: _, ref msg, target: _, cleanup: _ } => {\n@@ -780,7 +745,7 @@ impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtx\n \n             TerminatorKind::Yield { ref value, resume: _, resume_arg, drop: _ } => {\n                 self.consume_operand(loc, (value, span), flow_state);\n-                self.mutate_place(loc, (resume_arg, span), Deep, JustWrite, flow_state);\n+                self.mutate_place(loc, (resume_arg, span), Deep, flow_state);\n             }\n \n             TerminatorKind::InlineAsm {\n@@ -798,13 +763,7 @@ impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtx\n                         }\n                         InlineAsmOperand::Out { reg: _, late: _, place, .. } => {\n                             if let Some(place) = place {\n-                                self.mutate_place(\n-                                    loc,\n-                                    (place, span),\n-                                    Shallow(None),\n-                                    JustWrite,\n-                                    flow_state,\n-                                );\n+                                self.mutate_place(loc, (place, span), Shallow(None), flow_state);\n                             }\n                         }\n                         InlineAsmOperand::InOut { reg: _, late: _, ref in_value, out_place } => {\n@@ -814,7 +773,6 @@ impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtx\n                                     loc,\n                                     (out_place, span),\n                                     Shallow(None),\n-                                    JustWrite,\n                                     flow_state,\n                                 );\n                             }\n@@ -886,12 +844,6 @@ impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtx\n     }\n }\n \n-#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n-enum MutateMode {\n-    JustWrite,\n-    WriteAndRead,\n-}\n-\n use self::AccessDepth::{Deep, Shallow};\n use self::ReadOrWrite::{Activation, Read, Reservation, Write};\n \n@@ -977,7 +929,6 @@ enum LocalMutationIsAllowed {\n \n #[derive(Copy, Clone, Debug)]\n enum InitializationRequiringAction {\n-    Update,\n     Borrow,\n     MatchOn,\n     Use,\n@@ -994,7 +945,6 @@ struct RootPlace<'tcx> {\n impl InitializationRequiringAction {\n     fn as_noun(self) -> &'static str {\n         match self {\n-            InitializationRequiringAction::Update => \"update\",\n             InitializationRequiringAction::Borrow => \"borrow\",\n             InitializationRequiringAction::MatchOn => \"use\", // no good noun\n             InitializationRequiringAction::Use => \"use\",\n@@ -1005,7 +955,6 @@ impl InitializationRequiringAction {\n \n     fn as_verb_in_past_tense(self) -> &'static str {\n         match self {\n-            InitializationRequiringAction::Update => \"updated\",\n             InitializationRequiringAction::Borrow => \"borrowed\",\n             InitializationRequiringAction::MatchOn => \"matched on\",\n             InitializationRequiringAction::Use => \"used\",\n@@ -1242,23 +1191,10 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         location: Location,\n         place_span: (Place<'tcx>, Span),\n         kind: AccessDepth,\n-        mode: MutateMode,\n         flow_state: &Flows<'cx, 'tcx>,\n     ) {\n-        // Write of P[i] or *P, or WriteAndRead of any P, requires P init'd.\n-        match mode {\n-            MutateMode::WriteAndRead => {\n-                self.check_if_path_or_subpath_is_moved(\n-                    location,\n-                    InitializationRequiringAction::Update,\n-                    (place_span.0.as_ref(), place_span.1),\n-                    flow_state,\n-                );\n-            }\n-            MutateMode::JustWrite => {\n-                self.check_if_assigned_path_is_moved(location, place_span, flow_state);\n-            }\n-        }\n+        // Write of P[i] or *P requires P init'd.\n+        self.check_if_assigned_path_is_moved(location, place_span, flow_state);\n \n         // Special case: you can assign an immutable local variable\n         // (e.g., `x = ...`) so long as it has never been initialized"}, {"sha": "b6f5f4998a643b3600a5b836d2ada79f3603cf71", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -1478,7 +1478,6 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             StatementKind::FakeRead(..)\n             | StatementKind::StorageLive(..)\n             | StatementKind::StorageDead(..)\n-            | StatementKind::LlvmInlineAsm { .. }\n             | StatementKind::Retag { .. }\n             | StatementKind::Coverage(..)\n             | StatementKind::Nop => {}"}, {"sha": "1a6e56947916f41182136d3d9c96f38cc193c701", "filename": "compiler/rustc_builtin_macros/src/asm.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -50,15 +50,6 @@ pub fn parse_asm_args<'a>(\n         return Err(diag.struct_span_err(sp, \"requires at least a template string argument\"));\n     }\n \n-    // Detect use of the legacy llvm_asm! syntax (which used to be called asm!)\n-    if !is_global_asm && p.look_ahead(1, |t| *t == token::Colon || *t == token::ModSep) {\n-        let mut err =\n-            diag.struct_span_err(sp, \"the legacy LLVM-style asm! syntax is no longer supported\");\n-        err.note(\"consider migrating to the new asm! syntax specified in RFC 2873\");\n-        err.note(\"alternatively, switch to llvm_asm! to keep your code working as it is\");\n-        return Err(err);\n-    }\n-\n     let first_template = p.parse_expr()?;\n     let mut args = AsmArgs {\n         templates: vec![first_template],"}, {"sha": "65f785b9097e72f0bd7e1506e2c57cdb40445219", "filename": "compiler/rustc_builtin_macros/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -33,7 +33,6 @@ mod env;\n mod format;\n mod format_foreign;\n mod global_allocator;\n-mod llvm_asm;\n mod log_syntax;\n mod panic;\n mod source_util;\n@@ -78,7 +77,6 @@ pub fn register_builtin_macros(resolver: &mut dyn ResolverExpand) {\n         include_str: source_util::expand_include_str,\n         include: source_util::expand_include,\n         line: source_util::expand_line,\n-        llvm_asm: llvm_asm::expand_llvm_asm,\n         log_syntax: log_syntax::expand_log_syntax,\n         module_path: source_util::expand_mod,\n         option_env: env::expand_option_env,"}, {"sha": "d72bfa660e58f855725ff145087abd63b2181af3", "filename": "compiler/rustc_builtin_macros/src/llvm_asm.rs", "status": "removed", "additions": 0, "deletions": 303, "changes": 303, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/compiler%2Frustc_builtin_macros%2Fsrc%2Fllvm_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/compiler%2Frustc_builtin_macros%2Fsrc%2Fllvm_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fllvm_asm.rs?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,303 +0,0 @@\n-// Llvm-style inline assembly support.\n-//\n-use State::*;\n-\n-use rustc_ast as ast;\n-use rustc_ast::ptr::P;\n-use rustc_ast::token::{self, Token};\n-use rustc_ast::tokenstream::{self, TokenStream};\n-use rustc_ast::LlvmAsmDialect;\n-use rustc_errors::{struct_span_err, DiagnosticBuilder, PResult};\n-use rustc_expand::base::*;\n-use rustc_parse::parser::Parser;\n-use rustc_span::symbol::{kw, sym, Symbol};\n-use rustc_span::Span;\n-\n-enum State {\n-    Asm,\n-    Outputs,\n-    Inputs,\n-    Clobbers,\n-    Options,\n-    StateNone,\n-}\n-\n-impl State {\n-    fn next(&self) -> State {\n-        match *self {\n-            Asm => Outputs,\n-            Outputs => Inputs,\n-            Inputs => Clobbers,\n-            Clobbers => Options,\n-            Options => StateNone,\n-            StateNone => StateNone,\n-        }\n-    }\n-}\n-\n-const OPTIONS: &[Symbol] = &[sym::volatile, sym::alignstack, sym::intel];\n-\n-pub fn expand_llvm_asm<'cx>(\n-    cx: &'cx mut ExtCtxt<'_>,\n-    sp: Span,\n-    tts: TokenStream,\n-) -> Box<dyn MacResult + 'cx> {\n-    let mut inline_asm = match parse_inline_asm(cx, sp, tts) {\n-        Ok(Some(inline_asm)) => inline_asm,\n-        Ok(None) => return DummyResult::any(sp),\n-        Err(mut err) => {\n-            err.emit();\n-            return DummyResult::any(sp);\n-        }\n-    };\n-\n-    // If there are no outputs, the inline assembly is executed just for its side effects,\n-    // so ensure that it is volatile\n-    if inline_asm.outputs.is_empty() {\n-        inline_asm.volatile = true;\n-    }\n-\n-    MacEager::expr(P(ast::Expr {\n-        id: ast::DUMMY_NODE_ID,\n-        kind: ast::ExprKind::LlvmInlineAsm(P(inline_asm)),\n-        span: cx.with_def_site_ctxt(sp),\n-        attrs: ast::AttrVec::new(),\n-        tokens: None,\n-    }))\n-}\n-\n-fn parse_asm_str<'a>(p: &mut Parser<'a>) -> PResult<'a, Symbol> {\n-    match p.parse_str_lit() {\n-        Ok(str_lit) => Ok(str_lit.symbol_unescaped),\n-        Err(opt_lit) => {\n-            let span = opt_lit.map_or(p.token.span, |lit| lit.span);\n-            let mut err = p.sess.span_diagnostic.struct_span_err(span, \"expected string literal\");\n-            err.span_label(span, \"not a string literal\");\n-            Err(err)\n-        }\n-    }\n-}\n-\n-fn parse_inline_asm<'a>(\n-    cx: &mut ExtCtxt<'a>,\n-    sp: Span,\n-    tts: TokenStream,\n-) -> Result<Option<ast::LlvmInlineAsm>, DiagnosticBuilder<'a>> {\n-    // Split the tts before the first colon, to avoid `llvm_asm!(\"x\": y)`  being\n-    // parsed as `llvm_asm!(z)` with `z = \"x\": y` which is type ascription.\n-    let first_colon = tts\n-        .trees()\n-        .position(|tt| {\n-            matches!(\n-                tt,\n-                tokenstream::TokenTree::Token(Token { kind: token::Colon | token::ModSep, .. })\n-            )\n-        })\n-        .unwrap_or(tts.len());\n-    let mut p = cx.new_parser_from_tts(tts.trees().skip(first_colon).collect());\n-    let mut asm = kw::Empty;\n-    let mut asm_str_style = None;\n-    let mut outputs = Vec::new();\n-    let mut inputs = Vec::new();\n-    let mut clobs = Vec::new();\n-    let mut volatile = false;\n-    let mut alignstack = false;\n-    let mut dialect = LlvmAsmDialect::Att;\n-\n-    let mut state = Asm;\n-\n-    'statement: loop {\n-        match state {\n-            Asm => {\n-                if asm_str_style.is_some() {\n-                    // If we already have a string with instructions,\n-                    // ending up in Asm state again is an error.\n-                    return Err(struct_span_err!(\n-                        cx.sess.parse_sess.span_diagnostic,\n-                        sp,\n-                        E0660,\n-                        \"malformed inline assembly\"\n-                    ));\n-                }\n-                // Nested parser, stop before the first colon (see above).\n-                let mut p2 = cx.new_parser_from_tts(tts.trees().take(first_colon).collect());\n-\n-                if p2.token == token::Eof {\n-                    let mut err =\n-                        cx.struct_span_err(sp, \"macro requires a string literal as an argument\");\n-                    err.span_label(sp, \"string literal required\");\n-                    return Err(err);\n-                }\n-\n-                let expr = p2.parse_expr()?;\n-                let (s, style) =\n-                    match expr_to_string(cx, expr, \"inline assembly must be a string literal\") {\n-                        Some((s, st)) => (s, st),\n-                        None => return Ok(None),\n-                    };\n-\n-                // This is most likely malformed.\n-                if p2.token != token::Eof {\n-                    let mut extra_tts = p2.parse_all_token_trees()?;\n-                    extra_tts.extend(tts.trees().skip(first_colon));\n-                    p = cx.new_parser_from_tts(extra_tts.into_iter().collect());\n-                }\n-\n-                asm = s;\n-                asm_str_style = Some(style);\n-            }\n-            Outputs => {\n-                while p.token != token::Eof && p.token != token::Colon && p.token != token::ModSep {\n-                    if !outputs.is_empty() {\n-                        p.eat(&token::Comma);\n-                    }\n-\n-                    let constraint = parse_asm_str(&mut p)?;\n-\n-                    let span = p.prev_token.span;\n-\n-                    p.expect(&token::OpenDelim(token::Paren))?;\n-                    let expr = p.parse_expr()?;\n-                    p.expect(&token::CloseDelim(token::Paren))?;\n-\n-                    // Expands a read+write operand into two operands.\n-                    //\n-                    // Use '+' modifier when you want the same expression\n-                    // to be both an input and an output at the same time.\n-                    // It's the opposite of '=&' which means that the memory\n-                    // cannot be shared with any other operand (usually when\n-                    // a register is clobbered early.)\n-                    let constraint_str = constraint.as_str();\n-                    let mut ch = constraint_str.chars();\n-                    let output = match ch.next() {\n-                        Some('=') => None,\n-                        Some('+') => Some(Symbol::intern(&format!(\"={}\", ch.as_str()))),\n-                        _ => {\n-                            struct_span_err!(\n-                                cx.sess.parse_sess.span_diagnostic,\n-                                span,\n-                                E0661,\n-                                \"output operand constraint lacks '=' or '+'\"\n-                            )\n-                            .emit();\n-                            None\n-                        }\n-                    };\n-\n-                    let is_rw = output.is_some();\n-                    let is_indirect = constraint_str.contains('*');\n-                    outputs.push(ast::LlvmInlineAsmOutput {\n-                        constraint: output.unwrap_or(constraint),\n-                        expr,\n-                        is_rw,\n-                        is_indirect,\n-                    });\n-                }\n-            }\n-            Inputs => {\n-                while p.token != token::Eof && p.token != token::Colon && p.token != token::ModSep {\n-                    if !inputs.is_empty() {\n-                        p.eat(&token::Comma);\n-                    }\n-\n-                    let constraint = parse_asm_str(&mut p)?;\n-\n-                    if constraint.as_str().starts_with('=') {\n-                        struct_span_err!(\n-                            cx.sess.parse_sess.span_diagnostic,\n-                            p.prev_token.span,\n-                            E0662,\n-                            \"input operand constraint contains '='\"\n-                        )\n-                        .emit();\n-                    } else if constraint.as_str().starts_with('+') {\n-                        struct_span_err!(\n-                            cx.sess.parse_sess.span_diagnostic,\n-                            p.prev_token.span,\n-                            E0663,\n-                            \"input operand constraint contains '+'\"\n-                        )\n-                        .emit();\n-                    }\n-\n-                    p.expect(&token::OpenDelim(token::Paren))?;\n-                    let input = p.parse_expr()?;\n-                    p.expect(&token::CloseDelim(token::Paren))?;\n-\n-                    inputs.push((constraint, input));\n-                }\n-            }\n-            Clobbers => {\n-                while p.token != token::Eof && p.token != token::Colon && p.token != token::ModSep {\n-                    if !clobs.is_empty() {\n-                        p.eat(&token::Comma);\n-                    }\n-\n-                    let s = parse_asm_str(&mut p)?;\n-\n-                    if OPTIONS.iter().any(|&opt| s == opt) {\n-                        cx.span_warn(p.prev_token.span, \"expected a clobber, found an option\");\n-                    } else if s.as_str().starts_with('{') || s.as_str().ends_with('}') {\n-                        struct_span_err!(\n-                            cx.sess.parse_sess.span_diagnostic,\n-                            p.prev_token.span,\n-                            E0664,\n-                            \"clobber should not be surrounded by braces\"\n-                        )\n-                        .emit();\n-                    }\n-\n-                    clobs.push(s);\n-                }\n-            }\n-            Options => {\n-                let option = parse_asm_str(&mut p)?;\n-\n-                if option == sym::volatile {\n-                    // Indicates that the inline assembly has side effects\n-                    // and must not be optimized out along with its outputs.\n-                    volatile = true;\n-                } else if option == sym::alignstack {\n-                    alignstack = true;\n-                } else if option == sym::intel {\n-                    dialect = LlvmAsmDialect::Intel;\n-                } else {\n-                    cx.span_warn(p.prev_token.span, \"unrecognized option\");\n-                }\n-\n-                if p.token == token::Comma {\n-                    p.eat(&token::Comma);\n-                }\n-            }\n-            StateNone => (),\n-        }\n-\n-        loop {\n-            // MOD_SEP is a double colon '::' without space in between.\n-            // When encountered, the state must be advanced twice.\n-            match (&p.token.kind, state.next(), state.next().next()) {\n-                (&token::Colon, StateNone, _) | (&token::ModSep, _, StateNone) => {\n-                    p.bump();\n-                    break 'statement;\n-                }\n-                (&token::Colon, st, _) | (&token::ModSep, _, st) => {\n-                    p.bump();\n-                    state = st;\n-                }\n-                (&token::Eof, ..) => break 'statement,\n-                _ => break,\n-            }\n-        }\n-    }\n-\n-    Ok(Some(ast::LlvmInlineAsm {\n-        asm,\n-        asm_str_style: asm_str_style.unwrap(),\n-        outputs,\n-        inputs,\n-        clobbers: clobs,\n-        volatile,\n-        alignstack,\n-        dialect,\n-    }))\n-}"}, {"sha": "5a889734f215b4007efc699b49e876c289ab0647", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -749,18 +749,6 @@ fn codegen_stmt<'tcx>(\n         | StatementKind::Retag { .. }\n         | StatementKind::AscribeUserType(..) => {}\n \n-        StatementKind::LlvmInlineAsm(asm) => {\n-            match asm.asm.asm.as_str().trim() {\n-                \"\" => {\n-                    // Black box\n-                }\n-                _ => fx.tcx.sess.span_fatal(\n-                    stmt.source_info.span,\n-                    \"Legacy `llvm_asm!` inline assembly is not supported. \\\n-                    Try using the new `asm!` instead.\",\n-                ),\n-            }\n-        }\n         StatementKind::Coverage { .. } => fx.tcx.sess.fatal(\"-Zcoverage is unimplemented\"),\n         StatementKind::CopyNonOverlapping(inner) => {\n             let dst = codegen_operand(fx, &inner.dst);"}, {"sha": "74571817969d32576a599e56620521f88b0dd952", "filename": "compiler/rustc_codegen_cranelift/src/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -508,7 +508,7 @@ pub(crate) fn mir_operand_get_const_val<'tcx>(\n                         {\n                             return None;\n                         }\n-                        StatementKind::LlvmInlineAsm(_) | StatementKind::CopyNonOverlapping(_) => {\n+                        StatementKind::CopyNonOverlapping(_) => {\n                             return None;\n                         } // conservative handling\n                         StatementKind::Assign(_)"}, {"sha": "d620b24e0677ac114adf8ec0ce86127c1ff7f92a", "filename": "compiler/rustc_codegen_gcc/src/asm.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_codegen_gcc%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_codegen_gcc%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fasm.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -4,7 +4,6 @@ use rustc_codegen_ssa::mir::operand::OperandValue;\n use rustc_codegen_ssa::mir::place::PlaceRef;\n use rustc_codegen_ssa::traits::{AsmBuilderMethods, AsmMethods, BaseTypeMethods, BuilderMethods, GlobalAsmOperandRef, InlineAsmOperandRef};\n \n-use rustc_hir::LlvmInlineAsmInner;\n use rustc_middle::{bug, ty::Instance};\n use rustc_span::{Span, Symbol};\n use rustc_target::asm::*;\n@@ -106,17 +105,6 @@ enum ConstraintOrRegister {\n \n \n impl<'a, 'gcc, 'tcx> AsmBuilderMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n-    fn codegen_llvm_inline_asm(&mut self, _ia: &LlvmInlineAsmInner, _outputs: Vec<PlaceRef<'tcx, RValue<'gcc>>>, _inputs: Vec<RValue<'gcc>>, span: Span) -> bool {\n-        self.sess().struct_span_err(span, \"GCC backend does not support `llvm_asm!`\")\n-            .help(\"consider using the `asm!` macro instead\")\n-            .emit();\n-\n-        // We return `true` even if we've failed to generate the asm\n-        // because we want to suppress the \"malformed inline assembly\" error\n-        // generated by the frontend.\n-        true\n-    }\n-\n     fn codegen_inline_asm(&mut self, template: &[InlineAsmTemplatePiece], rust_operands: &[InlineAsmOperandRef<'tcx, Self>], options: InlineAsmOptions, span: &[Span], _instance: Instance<'_>, _dest_catch_funclet: Option<(Self::BasicBlock, Self::BasicBlock, Option<&Self::Funclet>)>) {\n         if options.contains(InlineAsmOptions::MAY_UNWIND) {\n             self.sess()"}, {"sha": "8335f841bec5688acaf2b0fdf5454452a0bf9771", "filename": "compiler/rustc_codegen_llvm/src/asm.rs", "status": "modified", "additions": 5, "deletions": 102, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -7,13 +7,10 @@ use crate::type_::Type;\n use crate::type_of::LayoutLlvmExt;\n use crate::value::Value;\n \n-use rustc_ast::LlvmAsmDialect;\n use rustc_ast::{InlineAsmOptions, InlineAsmTemplatePiece};\n use rustc_codegen_ssa::mir::operand::OperandValue;\n-use rustc_codegen_ssa::mir::place::PlaceRef;\n use rustc_codegen_ssa::traits::*;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_hir as hir;\n use rustc_middle::ty::layout::TyAndLayout;\n use rustc_middle::{bug, span_bug, ty::Instance};\n use rustc_span::{Pos, Span, Symbol};\n@@ -24,100 +21,6 @@ use libc::{c_char, c_uint};\n use tracing::debug;\n \n impl<'ll, 'tcx> AsmBuilderMethods<'tcx> for Builder<'_, 'll, 'tcx> {\n-    fn codegen_llvm_inline_asm(\n-        &mut self,\n-        ia: &hir::LlvmInlineAsmInner,\n-        outputs: Vec<PlaceRef<'tcx, &'ll Value>>,\n-        mut inputs: Vec<&'ll Value>,\n-        span: Span,\n-    ) -> bool {\n-        let mut ext_constraints = vec![];\n-        let mut output_types = vec![];\n-\n-        // Prepare the output operands\n-        let mut indirect_outputs = vec![];\n-        for (i, (out, &place)) in ia.outputs.iter().zip(&outputs).enumerate() {\n-            if out.is_rw {\n-                let operand = self.load_operand(place);\n-                if let OperandValue::Immediate(_) = operand.val {\n-                    inputs.push(operand.immediate());\n-                }\n-                ext_constraints.push(i.to_string());\n-            }\n-            if out.is_indirect {\n-                let operand = self.load_operand(place);\n-                if let OperandValue::Immediate(_) = operand.val {\n-                    indirect_outputs.push(operand.immediate());\n-                }\n-            } else {\n-                output_types.push(place.layout.llvm_type(self.cx));\n-            }\n-        }\n-        if !indirect_outputs.is_empty() {\n-            indirect_outputs.extend_from_slice(&inputs);\n-            inputs = indirect_outputs;\n-        }\n-\n-        let clobbers = ia.clobbers.iter().map(|s| format!(\"~{{{}}}\", &s));\n-\n-        // Default per-arch clobbers\n-        // Basically what clang does\n-        let arch_clobbers = match &self.sess().target.arch[..] {\n-            \"x86\" | \"x86_64\" => &[\"~{dirflag}\", \"~{fpsr}\", \"~{flags}\"][..],\n-            \"mips\" | \"mips64\" => &[\"~{$1}\"],\n-            _ => &[],\n-        };\n-\n-        let all_constraints = ia\n-            .outputs\n-            .iter()\n-            .map(|out| out.constraint.to_string())\n-            .chain(ia.inputs.iter().map(|s| s.to_string()))\n-            .chain(ext_constraints)\n-            .chain(clobbers)\n-            .chain(arch_clobbers.iter().map(|s| (*s).to_string()))\n-            .collect::<Vec<String>>()\n-            .join(\",\");\n-\n-        debug!(\"Asm Constraints: {}\", &all_constraints);\n-\n-        // Depending on how many outputs we have, the return type is different\n-        let num_outputs = output_types.len();\n-        let output_type = match num_outputs {\n-            0 => self.type_void(),\n-            1 => output_types[0],\n-            _ => self.type_struct(&output_types, false),\n-        };\n-\n-        let asm = ia.asm.as_str();\n-        let r = inline_asm_call(\n-            self,\n-            &asm,\n-            &all_constraints,\n-            &inputs,\n-            output_type,\n-            ia.volatile,\n-            ia.alignstack,\n-            ia.dialect,\n-            &[span],\n-            false,\n-            None,\n-        );\n-        if r.is_none() {\n-            return false;\n-        }\n-        let r = r.unwrap();\n-\n-        // Again, based on how many outputs we have\n-        let outputs = ia.outputs.iter().zip(&outputs).filter(|&(o, _)| !o.is_indirect);\n-        for (i, (_, &place)) in outputs.enumerate() {\n-            let v = if num_outputs == 1 { r } else { self.extract_value(r, i as u64) };\n-            OperandValue::Immediate(v).store(self, place);\n-        }\n-\n-        true\n-    }\n-\n     fn codegen_inline_asm(\n         &mut self,\n         template: &[InlineAsmTemplatePiece],\n@@ -349,9 +252,9 @@ impl<'ll, 'tcx> AsmBuilderMethods<'tcx> for Builder<'_, 'll, 'tcx> {\n             InlineAsmArch::X86 | InlineAsmArch::X86_64\n                 if !options.contains(InlineAsmOptions::ATT_SYNTAX) =>\n             {\n-                LlvmAsmDialect::Intel\n+                llvm::AsmDialect::Intel\n             }\n-            _ => LlvmAsmDialect::Att,\n+            _ => llvm::AsmDialect::Att,\n         };\n         let result = inline_asm_call(\n             self,\n@@ -455,7 +358,7 @@ pub(crate) fn inline_asm_call<'ll>(\n     output: &'ll llvm::Type,\n     volatile: bool,\n     alignstack: bool,\n-    dia: LlvmAsmDialect,\n+    dia: llvm::AsmDialect,\n     line_spans: &[Span],\n     unwind: bool,\n     dest_catch_funclet: Option<(\n@@ -498,7 +401,7 @@ pub(crate) fn inline_asm_call<'ll>(\n                 cons.len(),\n                 volatile,\n                 alignstack,\n-                llvm::AsmDialect::from_generic(dia),\n+                dia,\n                 can_throw,\n             );\n \n@@ -522,7 +425,7 @@ pub(crate) fn inline_asm_call<'ll>(\n             // we just encode the start position of each line.\n             // FIXME: Figure out a way to pass the entire line spans.\n             let mut srcloc = vec![];\n-            if dia == LlvmAsmDialect::Intel && line_spans.len() > 1 {\n+            if dia == llvm::AsmDialect::Intel && line_spans.len() > 1 {\n                 // LLVM inserts an extra line to add the \".intel_syntax\", so add\n                 // a dummy srcloc entry for it.\n                 //"}, {"sha": "cebb6d13c4e9f2be272c6605aa488a34326f14e0", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -7,7 +7,6 @@ use crate::type_of::LayoutLlvmExt;\n use crate::va_arg::emit_va_arg;\n use crate::value::Value;\n \n-use rustc_ast as ast;\n use rustc_codegen_ssa::base::{compare_simd_types, wants_msvc_seh};\n use rustc_codegen_ssa::common::span_invalid_monomorphization_error;\n use rustc_codegen_ssa::common::{IntPredicate, TypeKind};\n@@ -351,7 +350,7 @@ impl<'ll, 'tcx> IntrinsicCallMethods<'tcx> for Builder<'_, 'll, 'tcx> {\n                     self.type_void(),\n                     true,\n                     false,\n-                    ast::LlvmAsmDialect::Att,\n+                    llvm::AsmDialect::Att,\n                     &[span],\n                     false,\n                     None,"}, {"sha": "bc8d7b3e9e21c62a3b7e590028fc27d3417caa8b", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -423,22 +423,13 @@ pub enum MetadataType {\n }\n \n /// LLVMRustAsmDialect\n-#[derive(Copy, Clone)]\n+#[derive(Copy, Clone, PartialEq)]\n #[repr(C)]\n pub enum AsmDialect {\n     Att,\n     Intel,\n }\n \n-impl AsmDialect {\n-    pub fn from_generic(asm: rustc_ast::LlvmAsmDialect) -> Self {\n-        match asm {\n-            rustc_ast::LlvmAsmDialect::Att => AsmDialect::Att,\n-            rustc_ast::LlvmAsmDialect::Intel => AsmDialect::Intel,\n-        }\n-    }\n-}\n-\n /// LLVMRustCodeGenOptLevel\n #[derive(Copy, Clone, PartialEq)]\n #[repr(C)]"}, {"sha": "d768d4920c5b45009da0e30a3a042d2cf82b3625", "filename": "compiler/rustc_codegen_ssa/src/mir/analyze.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -211,7 +211,6 @@ impl<'mir, 'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> Visitor<'tcx>\n \n             PlaceContext::MutatingUse(\n                 MutatingUseContext::Store\n-                | MutatingUseContext::LlvmAsmOutput\n                 | MutatingUseContext::AsmOutput\n                 | MutatingUseContext::Borrow\n                 | MutatingUseContext::AddressOf"}, {"sha": "773dc2adcfa0c93705c544bffa4c8a517cd7440e", "filename": "compiler/rustc_codegen_ssa/src/mir/statement.rs", "status": "modified", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fstatement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fstatement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fstatement.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -1,9 +1,7 @@\n-use rustc_errors::struct_span_err;\n use rustc_middle::mir;\n \n use super::FunctionCx;\n use super::LocalRef;\n-use super::OperandValue;\n use crate::traits::BuilderMethods;\n use crate::traits::*;\n \n@@ -66,51 +64,6 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 }\n                 bx\n             }\n-            mir::StatementKind::LlvmInlineAsm(ref asm) => {\n-                let outputs = asm\n-                    .outputs\n-                    .iter()\n-                    .map(|output| self.codegen_place(&mut bx, output.as_ref()))\n-                    .collect();\n-\n-                let input_vals = asm.inputs.iter().fold(\n-                    Vec::with_capacity(asm.inputs.len()),\n-                    |mut acc, (span, input)| {\n-                        let op = self.codegen_operand(&mut bx, input);\n-                        if let OperandValue::Immediate(_) = op.val {\n-                            acc.push(op.immediate());\n-                        } else {\n-                            struct_span_err!(\n-                                bx.sess(),\n-                                span.to_owned(),\n-                                E0669,\n-                                \"invalid value for constraint in inline assembly\"\n-                            )\n-                            .emit();\n-                        }\n-                        acc\n-                    },\n-                );\n-\n-                if input_vals.len() == asm.inputs.len() {\n-                    let res = bx.codegen_llvm_inline_asm(\n-                        &asm.asm,\n-                        outputs,\n-                        input_vals,\n-                        statement.source_info.span,\n-                    );\n-                    if !res {\n-                        struct_span_err!(\n-                            bx.sess(),\n-                            statement.source_info.span,\n-                            E0668,\n-                            \"malformed inline assembly\"\n-                        )\n-                        .emit();\n-                    }\n-                }\n-                bx\n-            }\n             mir::StatementKind::Coverage(box ref coverage) => {\n                 self.codegen_coverage(&mut bx, coverage.clone(), statement.source_info.scope);\n                 bx"}, {"sha": "11111a7974410f1d9ab2ebe377bf7a6ade571c1d", "filename": "compiler/rustc_codegen_ssa/src/traits/asm.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fasm.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -3,7 +3,6 @@ use crate::mir::operand::OperandRef;\n use crate::mir::place::PlaceRef;\n use rustc_ast::{InlineAsmOptions, InlineAsmTemplatePiece};\n use rustc_hir::def_id::DefId;\n-use rustc_hir::LlvmInlineAsmInner;\n use rustc_middle::ty::Instance;\n use rustc_span::Span;\n use rustc_target::asm::InlineAsmRegOrRegClass;\n@@ -42,15 +41,6 @@ pub enum GlobalAsmOperandRef {\n }\n \n pub trait AsmBuilderMethods<'tcx>: BackendTypes {\n-    /// Take an inline assembly expression and splat it out via LLVM\n-    fn codegen_llvm_inline_asm(\n-        &mut self,\n-        ia: &LlvmInlineAsmInner,\n-        outputs: Vec<PlaceRef<'tcx, Self::Value>>,\n-        inputs: Vec<Self::Value>,\n-        span: Span,\n-    ) -> bool;\n-\n     /// Take an inline assembly expression and splat it out via LLVM\n     fn codegen_inline_asm(\n         &mut self,"}, {"sha": "57ba9b4099232f0c7719b9781748e0c23c179c14", "filename": "compiler/rustc_const_eval/src/interpret/step.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -140,8 +140,6 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             // Defined to do nothing. These are added by optimization passes, to avoid changing the\n             // size of MIR constantly.\n             Nop => {}\n-\n-            LlvmInlineAsm { .. } => throw_unsup_format!(\"inline assembly is not supported\"),\n         }\n \n         self.stack_mut()[frame_idx].loc.as_mut().unwrap().statement_index += 1;"}, {"sha": "6799514a4490db098206e2958dff72304158fb10", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -751,10 +751,6 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n         self.super_statement(statement, location);\n \n         match statement.kind {\n-            StatementKind::LlvmInlineAsm { .. } => {\n-                self.check_op(ops::InlineAsm);\n-            }\n-\n             StatementKind::Assign(..)\n             | StatementKind::SetDiscriminant { .. }\n             | StatementKind::FakeRead(..)"}, {"sha": "22ef0b2dda50688197872161a8e26f27fe062f31", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -352,7 +352,6 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n             StatementKind::SetDiscriminant { .. }\n             | StatementKind::StorageLive(..)\n             | StatementKind::StorageDead(..)\n-            | StatementKind::LlvmInlineAsm(..)\n             | StatementKind::Retag(_, _)\n             | StatementKind::Coverage(_)\n             | StatementKind::Nop => {}"}, {"sha": "abf90275915e0344d007bf1283fc8af7e2c195fd", "filename": "compiler/rustc_error_codes/src/error_codes/E0660.md", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0660.md", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0660.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0660.md?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -1,12 +1,9 @@\n+#### Note: this error code is no longer emitted by the compiler.\n+\n The argument to the `llvm_asm` macro is not well-formed.\n \n Erroneous code example:\n \n-```compile_fail,E0660\n+```ignore (no longer emitted)\n llvm_asm!(\"nop\" \"nop\");\n ```\n-\n-Considering that this would be a long explanation, we instead recommend you\n-take a look at the [`llvm_asm`] chapter of the Unstable book:\n-\n-[`llvm_asm`]: https://doc.rust-lang.org/stable/unstable-book/library-features/llvm-asm.html"}, {"sha": "245f755cddd0d649fa0cc64e4b8ebe1571c2778b", "filename": "compiler/rustc_error_codes/src/error_codes/E0661.md", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0661.md", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0661.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0661.md?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -1,13 +1,10 @@\n+#### Note: this error code is no longer emitted by the compiler.\n+\n An invalid syntax was passed to the second argument of an `llvm_asm` macro line.\n \n Erroneous code example:\n \n-```compile_fail,E0661\n+```ignore (no longer emitted)\n let a;\n llvm_asm!(\"nop\" : \"r\"(a));\n ```\n-\n-Considering that this would be a long explanation, we instead recommend you\n-take a look at the [`llvm_asm`] chapter of the Unstable book:\n-\n-[`llvm_asm`]: https://doc.rust-lang.org/stable/unstable-book/library-features/llvm-asm.html"}, {"sha": "ffb716f9957a00dc055fbb4f5f4db9381e48405f", "filename": "compiler/rustc_error_codes/src/error_codes/E0662.md", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0662.md", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0662.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0662.md?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -1,16 +1,13 @@\n+#### Note: this error code is no longer emitted by the compiler.\n+\n An invalid input operand constraint was passed to the `llvm_asm` macro\n (third line).\n \n Erroneous code example:\n \n-```compile_fail,E0662\n+```ignore (no longer emitted)\n llvm_asm!(\"xor %eax, %eax\"\n           :\n           : \"=test\"(\"a\")\n          );\n ```\n-\n-Considering that this would be a long explanation, we instead recommend you\n-take a look at the [`llvm_asm`] chapter of the Unstable book:\n-\n-[`llvm_asm`]: https://doc.rust-lang.org/stable/unstable-book/library-features/llvm-asm.html"}, {"sha": "351cfaca29c1901e7404afe38b18023b7b1c7e31", "filename": "compiler/rustc_error_codes/src/error_codes/E0663.md", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0663.md", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0663.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0663.md?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -1,16 +1,13 @@\n+#### Note: this error code is no longer emitted by the compiler.\n+\n An invalid input operand constraint was passed to the `llvm_asm` macro\n (third line).\n \n Erroneous code example:\n \n-```compile_fail,E0663\n+```ignore (no longer emitted)\n llvm_asm!(\"xor %eax, %eax\"\n           :\n           : \"+test\"(\"a\")\n          );\n ```\n-\n-Considering that this would be a long explanation, we instead recommend you\n-take a look at the [`llvm_asm`] chapter of the Unstable book:\n-\n-[`llvm_asm`]: https://doc.rust-lang.org/stable/unstable-book/library-features/llvm-asm.html"}, {"sha": "34135d5db33388f82e3ac4d69c9f33560fd032a2", "filename": "compiler/rustc_error_codes/src/error_codes/E0664.md", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0664.md", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0664.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0664.md?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -1,16 +1,13 @@\n+#### Note: this error code is no longer emitted by the compiler.\n+\n A clobber was surrounded by braces in the `llvm_asm` macro.\n \n Erroneous code example:\n \n-```compile_fail,E0664\n+```ignore (no longer emitted)\n llvm_asm!(\"mov $$0x200, %eax\"\n           :\n           :\n           : \"{eax}\"\n          );\n ```\n-\n-Considering that this would be a long explanation, we instead recommend you\n-take a look at the [`llvm_asm`] chapter of the Unstable book:\n-\n-[`llvm_asm`]: https://doc.rust-lang.org/stable/unstable-book/library-features/llvm-asm.html"}, {"sha": "393aabe2894c78ef2f8964a748d5913bfe342aba", "filename": "compiler/rustc_error_codes/src/error_codes/E0668.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0668.md", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0668.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0668.md?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -1,8 +1,10 @@\n+#### Note: this error code is no longer emitted by the compiler.\n+\n Malformed inline assembly rejected by LLVM.\n \n Erroneous code example:\n \n-```compile_fail,E0668\n+```ignore (no longer emitted)\n #![feature(llvm_asm)]\n \n fn main() {"}, {"sha": "2be8f04eda0b65ae4b6fb912b795165b8d300f58", "filename": "compiler/rustc_error_codes/src/error_codes/E0669.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0669.md", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0669.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0669.md?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -1,8 +1,10 @@\n+#### Note: this error code is no longer emitted by the compiler.\n+\n Cannot convert inline assembly operand to a single LLVM value.\n \n Erroneous code example:\n \n-```compile_fail,E0669\n+```ignore (no longer emitted)\n #![feature(llvm_asm)]\n \n fn main() {"}, {"sha": "27ec461906419ea93328a5de07aa98cbb9f804a2", "filename": "compiler/rustc_hir/src/arena.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_hir%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_hir%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Farena.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -30,7 +30,6 @@ macro_rules! arena_types {\n             [] impl_item_ref: rustc_hir::ImplItemRef,\n             [] item: rustc_hir::Item<'tcx>,\n             [] inline_asm: rustc_hir::InlineAsm<'tcx>,\n-            [] llvm_inline_asm: rustc_hir::LlvmInlineAsm<'tcx>,\n             [] local: rustc_hir::Local<'tcx>,\n             [] mod_: rustc_hir::Mod<'tcx>,\n             [] owner_info: rustc_hir::OwnerInfo<'tcx>,"}, {"sha": "369b5e6da2d286895f0478a616e7ca2a3a1a9d02", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 2, "deletions": 37, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -5,8 +5,8 @@ use crate::intravisit::FnKind;\n use crate::LangItem;\n \n use rustc_ast::util::parser::ExprPrecedence;\n-use rustc_ast::{self as ast, CrateSugar, LlvmAsmDialect};\n-use rustc_ast::{Attribute, FloatTy, IntTy, Label, LitKind, StrStyle, TraitObjectSyntax, UintTy};\n+use rustc_ast::{self as ast, CrateSugar};\n+use rustc_ast::{Attribute, FloatTy, IntTy, Label, LitKind, TraitObjectSyntax, UintTy};\n pub use rustc_ast::{BorrowKind, ImplPolarity, IsAuto};\n pub use rustc_ast::{CaptureBy, Movability, Mutability};\n use rustc_ast::{InlineAsmOptions, InlineAsmTemplatePiece};\n@@ -1474,7 +1474,6 @@ impl Expr<'_> {\n             ExprKind::Continue(..) => ExprPrecedence::Continue,\n             ExprKind::Ret(..) => ExprPrecedence::Ret,\n             ExprKind::InlineAsm(..) => ExprPrecedence::InlineAsm,\n-            ExprKind::LlvmInlineAsm(..) => ExprPrecedence::InlineAsm,\n             ExprKind::Struct(..) => ExprPrecedence::Struct,\n             ExprKind::Repeat(..) => ExprPrecedence::Repeat,\n             ExprKind::Yield(..) => ExprPrecedence::Yield,\n@@ -1534,7 +1533,6 @@ impl Expr<'_> {\n             | ExprKind::Loop(..)\n             | ExprKind::Assign(..)\n             | ExprKind::InlineAsm(..)\n-            | ExprKind::LlvmInlineAsm(..)\n             | ExprKind::AssignOp(..)\n             | ExprKind::Lit(_)\n             | ExprKind::ConstBlock(..)\n@@ -1617,7 +1615,6 @@ impl Expr<'_> {\n             | ExprKind::Loop(..)\n             | ExprKind::Assign(..)\n             | ExprKind::InlineAsm(..)\n-            | ExprKind::LlvmInlineAsm(..)\n             | ExprKind::AssignOp(..)\n             | ExprKind::ConstBlock(..)\n             | ExprKind::Box(..)\n@@ -1758,8 +1755,6 @@ pub enum ExprKind<'hir> {\n \n     /// Inline assembly (from `asm!`), with its outputs and inputs.\n     InlineAsm(&'hir InlineAsm<'hir>),\n-    /// Inline assembly (from `llvm_asm!`), with its outputs and inputs.\n-    LlvmInlineAsm(&'hir LlvmInlineAsm<'hir>),\n \n     /// A struct or struct-like variant literal expression.\n     ///\n@@ -2371,36 +2366,6 @@ pub struct InlineAsm<'hir> {\n     pub line_spans: &'hir [Span],\n }\n \n-#[derive(Copy, Clone, Encodable, Decodable, Debug, Hash, HashStable_Generic, PartialEq)]\n-pub struct LlvmInlineAsmOutput {\n-    pub constraint: Symbol,\n-    pub is_rw: bool,\n-    pub is_indirect: bool,\n-    pub span: Span,\n-}\n-\n-// NOTE(eddyb) This is used within MIR as well, so unlike the rest of the HIR,\n-// it needs to be `Clone` and `Decodable` and use plain `Vec<T>` instead of\n-// arena-allocated slice.\n-#[derive(Clone, Encodable, Decodable, Debug, Hash, HashStable_Generic, PartialEq)]\n-pub struct LlvmInlineAsmInner {\n-    pub asm: Symbol,\n-    pub asm_str_style: StrStyle,\n-    pub outputs: Vec<LlvmInlineAsmOutput>,\n-    pub inputs: Vec<Symbol>,\n-    pub clobbers: Vec<Symbol>,\n-    pub volatile: bool,\n-    pub alignstack: bool,\n-    pub dialect: LlvmAsmDialect,\n-}\n-\n-#[derive(Debug, HashStable_Generic)]\n-pub struct LlvmInlineAsm<'hir> {\n-    pub inner: LlvmInlineAsmInner,\n-    pub outputs_exprs: &'hir [Expr<'hir>],\n-    pub inputs_exprs: &'hir [Expr<'hir>],\n-}\n-\n /// Represents a parameter in a function header.\n #[derive(Debug, HashStable_Generic)]\n pub struct Param<'hir> {"}, {"sha": "52c0538f1bcfcd5c972bbd357fee1c4fe67cb15f", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -1252,10 +1252,6 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr<'v>)\n         ExprKind::InlineAsm(ref asm) => {\n             walk_inline_asm(visitor, asm);\n         }\n-        ExprKind::LlvmInlineAsm(ref asm) => {\n-            walk_list!(visitor, visit_expr, asm.outputs_exprs);\n-            walk_list!(visitor, visit_expr, asm.inputs_exprs);\n-        }\n         ExprKind::Yield(ref subexpression, _) => {\n             visitor.visit_expr(subexpression);\n         }"}, {"sha": "7675778ff881b6fd1d352b0cd88f4f1468d96b9c", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 0, "deletions": 61, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -1581,67 +1581,6 @@ impl<'a> State<'a> {\n                 self.word(\"asm!\");\n                 self.print_inline_asm(asm);\n             }\n-            hir::ExprKind::LlvmInlineAsm(ref a) => {\n-                let i = &a.inner;\n-                self.word(\"llvm_asm!\");\n-                self.popen();\n-                self.print_symbol(i.asm, i.asm_str_style);\n-                self.word_space(\":\");\n-\n-                let mut out_idx = 0;\n-                self.commasep(Inconsistent, &i.outputs, |s, out| {\n-                    let constraint = out.constraint.as_str();\n-                    let mut ch = constraint.chars();\n-                    match ch.next() {\n-                        Some('=') if out.is_rw => {\n-                            s.print_string(&format!(\"+{}\", ch.as_str()), ast::StrStyle::Cooked)\n-                        }\n-                        _ => s.print_string(&constraint, ast::StrStyle::Cooked),\n-                    }\n-                    s.popen();\n-                    s.print_expr(&a.outputs_exprs[out_idx]);\n-                    s.pclose();\n-                    out_idx += 1;\n-                });\n-                self.space();\n-                self.word_space(\":\");\n-\n-                let mut in_idx = 0;\n-                self.commasep(Inconsistent, &i.inputs, |s, &co| {\n-                    s.print_symbol(co, ast::StrStyle::Cooked);\n-                    s.popen();\n-                    s.print_expr(&a.inputs_exprs[in_idx]);\n-                    s.pclose();\n-                    in_idx += 1;\n-                });\n-                self.space();\n-                self.word_space(\":\");\n-\n-                self.commasep(Inconsistent, &i.clobbers, |s, &co| {\n-                    s.print_symbol(co, ast::StrStyle::Cooked);\n-                });\n-\n-                let mut options = vec![];\n-                if i.volatile {\n-                    options.push(\"volatile\");\n-                }\n-                if i.alignstack {\n-                    options.push(\"alignstack\");\n-                }\n-                if i.dialect == ast::LlvmAsmDialect::Intel {\n-                    options.push(\"intel\");\n-                }\n-\n-                if !options.is_empty() {\n-                    self.space();\n-                    self.word_space(\":\");\n-                    self.commasep(Inconsistent, &options, |s, &co| {\n-                        s.print_string(co, ast::StrStyle::Cooked);\n-                    });\n-                }\n-\n-                self.pclose();\n-            }\n             hir::ExprKind::Yield(ref expr, _) => {\n                 self.word_space(\"yield\");\n                 self.print_expr_maybe_paren(&expr, parser::PREC_JUMP);"}, {"sha": "3f4bbdec31545ae4b334513a8a09f769cef784a0", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -1566,10 +1566,6 @@ pub enum StatementKind<'tcx> {\n     /// End the current live range for the storage of the local.\n     StorageDead(Local),\n \n-    /// Executes a piece of inline Assembly. Stored in a Box to keep the size\n-    /// of `StatementKind` low.\n-    LlvmInlineAsm(Box<LlvmInlineAsm<'tcx>>),\n-\n     /// Retag references in the given place, ensuring they got fresh tags. This is\n     /// part of the Stacked Borrows model. These statements are currently only interpreted\n     /// by miri and only generated when \"-Z mir-emit-retag\" is passed.\n@@ -1689,13 +1685,6 @@ pub enum FakeReadCause {\n     ForIndex,\n }\n \n-#[derive(Clone, Debug, PartialEq, TyEncodable, TyDecodable, Hash, HashStable, TypeFoldable)]\n-pub struct LlvmInlineAsm<'tcx> {\n-    pub asm: hir::LlvmInlineAsmInner,\n-    pub outputs: Box<[Place<'tcx>]>,\n-    pub inputs: Box<[(Span, Operand<'tcx>)]>,\n-}\n-\n impl Debug for Statement<'_> {\n     fn fmt(&self, fmt: &mut Formatter<'_>) -> fmt::Result {\n         use self::StatementKind::*;\n@@ -1720,9 +1709,6 @@ impl Debug for Statement<'_> {\n             SetDiscriminant { ref place, variant_index } => {\n                 write!(fmt, \"discriminant({:?}) = {:?}\", place, variant_index)\n             }\n-            LlvmInlineAsm(ref asm) => {\n-                write!(fmt, \"llvm_asm!({:?} : {:?} : {:?})\", asm.asm, asm.outputs, asm.inputs)\n-            }\n             AscribeUserType(box (ref place, ref c_ty), ref variance) => {\n                 write!(fmt, \"AscribeUserType({:?}, {:?}, {:?})\", place, variance, c_ty)\n             }"}, {"sha": "06cbc3383efff25c8020c404d75a8caa28a87af4", "filename": "compiler/rustc_middle/src/mir/spanview.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -245,7 +245,6 @@ pub fn statement_kind_name(statement: &Statement<'_>) -> &'static str {\n         SetDiscriminant { .. } => \"SetDiscriminant\",\n         StorageLive(..) => \"StorageLive\",\n         StorageDead(..) => \"StorageDead\",\n-        LlvmInlineAsm(..) => \"LlvmInlineAsm\",\n         Retag(..) => \"Retag\",\n         AscribeUserType(..) => \"AscribeUserType\",\n         Coverage(..) => \"Coverage\","}, {"sha": "4452ac5e3e0d4b92f0f46dc7b1e91d5343feb8fc", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -408,19 +408,6 @@ macro_rules! make_mir_visitor {\n                             location\n                         );\n                     }\n-                    StatementKind::LlvmInlineAsm(asm) => {\n-                        for output in & $($mutability)? asm.outputs[..] {\n-                            self.visit_place(\n-                                output,\n-                                PlaceContext::MutatingUse(MutatingUseContext::LlvmAsmOutput),\n-                                location\n-                            );\n-                        }\n-                        for (span, input) in & $($mutability)? asm.inputs[..] {\n-                            self.visit_span(span);\n-                            self.visit_operand(input, location);\n-                        }\n-                    }\n                     StatementKind::Retag(kind, place) => {\n                         self.visit_retag(kind, place, location);\n                     }\n@@ -1178,10 +1165,6 @@ pub enum NonMutatingUseContext {\n pub enum MutatingUseContext {\n     /// Appears as LHS of an assignment.\n     Store,\n-    /// Can often be treated as a `Store`, but needs to be separate because\n-    /// ASM is allowed to read outputs as well, so a `Store`-`LlvmAsmOutput` sequence\n-    /// cannot be simplified the way a `Store`-`Store` can be.\n-    LlvmAsmOutput,\n     /// Output operand of an inline assembly block.\n     AsmOutput,\n     /// Destination of a call.\n@@ -1271,7 +1254,6 @@ impl PlaceContext {\n             PlaceContext::MutatingUse(\n                 MutatingUseContext::Store\n                     | MutatingUseContext::Call\n-                    | MutatingUseContext::LlvmAsmOutput\n                     | MutatingUseContext::AsmOutput,\n             )\n         )"}, {"sha": "eef42666f2a07853940678aa13675df7919d41c1", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -431,12 +431,6 @@ pub enum ExprKind<'tcx> {\n     },\n     /// An expression taking a reference to a thread local.\n     ThreadLocalRef(DefId),\n-    /// Inline LLVM assembly, i.e. `llvm_asm!()`.\n-    LlvmInlineAsm {\n-        asm: &'tcx hir::LlvmInlineAsmInner,\n-        outputs: Box<[ExprId]>,\n-        inputs: Box<[ExprId]>,\n-    },\n     /// A `yield` expression.\n     Yield {\n         value: ExprId,"}, {"sha": "9f9947341c5c1a6079fa9cad8dc83d3ec908e6e3", "filename": "compiler/rustc_middle/src/thir/visit.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -145,14 +145,6 @@ pub fn walk_expr<'a, 'tcx: 'a, V: Visitor<'a, 'tcx>>(visitor: &mut V, expr: &Exp\n             }\n         }\n         ThreadLocalRef(_) => {}\n-        LlvmInlineAsm { ref outputs, ref inputs, asm: _ } => {\n-            for &out_expr in &**outputs {\n-                visitor.visit_expr(&visitor.thir()[out_expr]);\n-            }\n-            for &in_expr in &**inputs {\n-                visitor.visit_expr(&visitor.thir()[in_expr]);\n-            }\n-        }\n         Yield { value } => visitor.visit_expr(&visitor.thir()[value]),\n     }\n }"}, {"sha": "a27169d59e13f654b1ab09a0871423a879aa7990", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -219,7 +219,6 @@ TrivialTypeFoldableAndLiftImpls! {\n     ::rustc_hir::def_id::DefId,\n     ::rustc_hir::def_id::LocalDefId,\n     ::rustc_hir::HirId,\n-    ::rustc_hir::LlvmInlineAsmInner,\n     ::rustc_hir::MatchSource,\n     ::rustc_hir::Mutability,\n     ::rustc_hir::Unsafety,"}, {"sha": "1e94c41d88daa01b4816a106b9199e3c1c80b1cb", "filename": "compiler/rustc_mir_build/src/build/expr/as_place.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -569,7 +569,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             | ExprKind::ConstBlock { .. }\n             | ExprKind::StaticRef { .. }\n             | ExprKind::InlineAsm { .. }\n-            | ExprKind::LlvmInlineAsm { .. }\n             | ExprKind::Yield { .. }\n             | ExprKind::ThreadLocalRef(_)\n             | ExprKind::Call { .. } => {"}, {"sha": "1dc49256a6a9f6430039a43211e94f14a8c70572", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -350,7 +350,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             | ExprKind::Continue { .. }\n             | ExprKind::Return { .. }\n             | ExprKind::InlineAsm { .. }\n-            | ExprKind::LlvmInlineAsm { .. }\n             | ExprKind::PlaceTypeAscription { .. }\n             | ExprKind::ValueTypeAscription { .. } => {\n                 // these do not have corresponding `Rvalue` variants,"}, {"sha": "d31f6ed93840ad08deb23604ceb72a6f91d2c915", "filename": "compiler/rustc_mir_build/src/build/expr/category.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fcategory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fcategory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fcategory.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -67,8 +67,7 @@ impl Category {\n             | ExprKind::Repeat { .. }\n             | ExprKind::Assign { .. }\n             | ExprKind::AssignOp { .. }\n-            | ExprKind::ThreadLocalRef(_)\n-            | ExprKind::LlvmInlineAsm { .. } => Some(Category::Rvalue(RvalueFunc::AsRvalue)),\n+            | ExprKind::ThreadLocalRef(_) => Some(Category::Rvalue(RvalueFunc::AsRvalue)),\n \n             ExprKind::ConstBlock { .. } | ExprKind::Literal { .. } | ExprKind::StaticRef { .. } => {\n                 Some(Category::Constant)"}, {"sha": "43060ecfced12082353f5fa5d8799a759fc86a53", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -477,9 +477,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n \n             // These cases don't actually need a destination\n-            ExprKind::Assign { .. }\n-            | ExprKind::AssignOp { .. }\n-            | ExprKind::LlvmInlineAsm { .. } => {\n+            ExprKind::Assign { .. } | ExprKind::AssignOp { .. } => {\n                 unpack!(block = this.stmt_expr(block, expr, None));\n                 this.cfg.push_assign_unit(block, source_info, destination, this.tcx);\n                 block.unit()"}, {"sha": "7419c5b2f7588e56a556db5ad4fcc3efbd386517", "filename": "compiler/rustc_mir_build/src/build/expr/stmt.rs", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fstmt.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -101,38 +101,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 BreakableTarget::Return,\n                 source_info,\n             ),\n-            ExprKind::LlvmInlineAsm { asm, ref outputs, ref inputs } => {\n-                debug!(\"stmt_expr LlvmInlineAsm block_context.push(SubExpr) : {:?}\", expr);\n-                this.block_context.push(BlockFrame::SubExpr);\n-                let outputs = outputs\n-                    .into_iter()\n-                    .copied()\n-                    .map(|output| unpack!(block = this.as_place(block, &this.thir[output])))\n-                    .collect::<Vec<_>>()\n-                    .into_boxed_slice();\n-                let inputs = inputs\n-                    .into_iter()\n-                    .copied()\n-                    .map(|input| {\n-                        let input = &this.thir[input];\n-                        (input.span, unpack!(block = this.as_local_operand(block, &input)))\n-                    })\n-                    .collect::<Vec<_>>()\n-                    .into_boxed_slice();\n-                this.cfg.push(\n-                    block,\n-                    Statement {\n-                        source_info,\n-                        kind: StatementKind::LlvmInlineAsm(Box::new(LlvmInlineAsm {\n-                            asm: asm.clone(),\n-                            outputs,\n-                            inputs,\n-                        })),\n-                    },\n-                );\n-                this.block_context.pop();\n-                block.unit()\n-            }\n             _ => {\n                 assert!(\n                     statement_scope.is_some(),"}, {"sha": "8ca2449cea9c47d12ab4d8bd82bca5ef2f0c8338", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -329,7 +329,6 @@ impl<'a, 'tcx> Visitor<'a, 'tcx> for UnsafetyVisitor<'a, 'tcx> {\n             | ExprKind::Box { .. }\n             | ExprKind::If { .. }\n             | ExprKind::InlineAsm { .. }\n-            | ExprKind::LlvmInlineAsm { .. }\n             | ExprKind::LogicalOp { .. }\n             | ExprKind::Use { .. } => {\n                 // We don't need to save the old value and restore it\n@@ -377,7 +376,7 @@ impl<'a, 'tcx> Visitor<'a, 'tcx> for UnsafetyVisitor<'a, 'tcx> {\n                     self.requires_unsafe(expr.span, DerefOfRawPointer);\n                 }\n             }\n-            ExprKind::InlineAsm { .. } | ExprKind::LlvmInlineAsm { .. } => {\n+            ExprKind::InlineAsm { .. } => {\n                 self.requires_unsafe(expr.span, UseOfInlineAssembly);\n             }\n             ExprKind::Adt(box Adt {"}, {"sha": "750677f161e447fab2c5da20b1efd8fd24948b75", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -570,12 +570,6 @@ impl<'tcx> Cx<'tcx> {\n                 line_spans: asm.line_spans,\n             },\n \n-            hir::ExprKind::LlvmInlineAsm(ref asm) => ExprKind::LlvmInlineAsm {\n-                asm: &asm.inner,\n-                outputs: self.mirror_exprs(asm.outputs_exprs),\n-                inputs: self.mirror_exprs(asm.inputs_exprs),\n-            },\n-\n             hir::ExprKind::ConstBlock(ref anon_const) => {\n                 let anon_const_def_id = self.tcx.hir().local_def_id(anon_const.hir_id);\n                 let value = ty::Const::from_inline_const(self.tcx, anon_const_def_id);"}, {"sha": "4871320fdb5c08e11e1cbae159cb00407eaab561", "filename": "compiler/rustc_mir_dataflow/src/impls/liveness.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -176,7 +176,6 @@ impl DefUse {\n             // All other contexts are uses...\n             PlaceContext::MutatingUse(\n                 MutatingUseContext::AddressOf\n-                | MutatingUseContext::LlvmAsmOutput\n                 | MutatingUseContext::Borrow\n                 | MutatingUseContext::Drop\n                 | MutatingUseContext::Retag,"}, {"sha": "60cde6546dcfc62d2a7c0e5be2fa7e999d463869", "filename": "compiler/rustc_mir_dataflow/src/impls/storage_liveness.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -134,11 +134,6 @@ impl<'mir, 'tcx> crate::GenKillAnalysis<'tcx> for MaybeRequiresStorage<'mir, 'tc\n             | StatementKind::SetDiscriminant { box place, .. } => {\n                 trans.gen(place.local);\n             }\n-            StatementKind::LlvmInlineAsm(asm) => {\n-                for place in &*asm.outputs {\n-                    trans.gen(place.local);\n-                }\n-            }\n \n             // Nothing to do for these. Match exhaustively so this fails to compile when new\n             // variants are added."}, {"sha": "26bbc34e780bb03a5545706f6f1bc6ddaba3a9f3", "filename": "compiler/rustc_mir_dataflow/src/move_paths/builder.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -4,7 +4,6 @@ use rustc_middle::mir::*;\n use rustc_middle::ty::{self, TyCtxt};\n use smallvec::{smallvec, SmallVec};\n \n-use std::iter;\n use std::mem;\n \n use super::abs_domain::Lift;\n@@ -293,16 +292,6 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n             StatementKind::FakeRead(box (_, place)) => {\n                 self.create_move_path(*place);\n             }\n-            StatementKind::LlvmInlineAsm(ref asm) => {\n-                for (output, kind) in iter::zip(&*asm.outputs, &asm.asm.outputs) {\n-                    if !kind.is_indirect {\n-                        self.gather_init(output.as_ref(), InitKind::Deep);\n-                    }\n-                }\n-                for (_, input) in asm.inputs.iter() {\n-                    self.gather_operand(input);\n-                }\n-            }\n             StatementKind::StorageLive(_) => {}\n             StatementKind::StorageDead(local) => {\n                 self.gather_move(Place::from(*local));"}, {"sha": "4a773c5772dab4af742fa73ea164b6e954ed9e1d", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -104,10 +104,6 @@ impl<'tcx> Visitor<'tcx> for UnsafetyChecker<'_, 'tcx> {\n                 // safe (at least as emitted during MIR construction)\n             }\n \n-            StatementKind::LlvmInlineAsm { .. } => self.require_unsafe(\n-                UnsafetyViolationKind::General,\n-                UnsafetyViolationDetails::UseOfInlineAssembly,\n-            ),\n             StatementKind::CopyNonOverlapping(..) => unreachable!(),\n         }\n         self.super_statement(statement, location);\n@@ -208,7 +204,6 @@ impl<'tcx> Visitor<'tcx> for UnsafetyChecker<'_, 'tcx> {\n                             MutatingUseContext::Store\n                                 | MutatingUseContext::Drop\n                                 | MutatingUseContext::AsmOutput\n-                                | MutatingUseContext::LlvmAsmOutput\n                         )\n                     );\n                 // If this is just an assignment, determine if the assigned type needs dropping."}, {"sha": "98de64cd97c9c49140d806f213359ce64bcb4063", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -1032,8 +1032,7 @@ impl Visitor<'_> for CanConstProp {\n \n             // These could be propagated with a smarter analysis or just some careful thinking about\n             // whether they'd be fine right now.\n-            MutatingUse(MutatingUseContext::LlvmAsmOutput)\n-            | MutatingUse(MutatingUseContext::Yield)\n+            MutatingUse(MutatingUseContext::Yield)\n             | MutatingUse(MutatingUseContext::Drop)\n             | MutatingUse(MutatingUseContext::Retag)\n             // These can't ever be propagated under any scheme, as we can't reason about indirect"}, {"sha": "a9161580bc68185ac0b268c1474dd44ef34477db", "filename": "compiler/rustc_mir_transform/src/coverage/spans.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -835,7 +835,6 @@ pub(super) fn filtered_statement_span(statement: &Statement<'_>) -> Option<Span>\n         | StatementKind::CopyNonOverlapping(..)\n         | StatementKind::Assign(_)\n         | StatementKind::SetDiscriminant { .. }\n-        | StatementKind::LlvmInlineAsm(_)\n         | StatementKind::Retag(_, _)\n         | StatementKind::AscribeUserType(_, _) => {\n             Some(statement.source_info.span)"}, {"sha": "d469be746414414175e81a914b086d3d32fa383d", "filename": "compiler/rustc_mir_transform/src/dest_prop.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -534,25 +534,6 @@ impl<'a> Conflicts<'a> {\n             // eliminate the resulting self-assignments automatically.\n             StatementKind::Assign(_) => {}\n \n-            StatementKind::LlvmInlineAsm(asm) => {\n-                // Inputs and outputs must not overlap.\n-                for (_, input) in &*asm.inputs {\n-                    if let Some(in_place) = input.place() {\n-                        if !in_place.is_indirect() {\n-                            for out_place in &*asm.outputs {\n-                                if !out_place.is_indirect() && !in_place.is_indirect() {\n-                                    self.record_local_conflict(\n-                                        in_place.local,\n-                                        out_place.local,\n-                                        \"aliasing llvm_asm! operands\",\n-                                    );\n-                                }\n-                            }\n-                        }\n-                    }\n-                }\n-            }\n-\n             StatementKind::SetDiscriminant { .. }\n             | StatementKind::StorageLive(..)\n             | StatementKind::StorageDead(..)"}, {"sha": "433a1c6ad67cc2694dd6c2d636555d537e7b7ffc", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -1449,9 +1449,6 @@ impl<'tcx> Visitor<'tcx> for EnsureGeneratorFieldAssignmentsNeverAlias<'_> {\n                 self.check_assigned_place(*lhs, |this| this.visit_rvalue(rhs, location));\n             }\n \n-            // FIXME: Does `llvm_asm!` have any aliasing requirements?\n-            StatementKind::LlvmInlineAsm(_) => {}\n-\n             StatementKind::FakeRead(..)\n             | StatementKind::SetDiscriminant { .. }\n             | StatementKind::StorageLive(_)"}, {"sha": "77fb092d5806f31c95a10be67d9bae9be2b08cee", "filename": "compiler/rustc_mir_transform/src/remove_noop_landing_pads.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -50,7 +50,6 @@ impl RemoveNoopLandingPads {\n \n                 StatementKind::Assign { .. }\n                 | StatementKind::SetDiscriminant { .. }\n-                | StatementKind::LlvmInlineAsm { .. }\n                 | StatementKind::CopyNonOverlapping(..)\n                 | StatementKind::Retag { .. } => {\n                     return false;"}, {"sha": "d265720e18296bfad3ff6469aa7e406a3c6cf8bb", "filename": "compiler/rustc_mir_transform/src/separate_const_switch.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -239,10 +239,6 @@ fn is_likely_const<'tcx>(mut tracked_place: Place<'tcx>, block: &BasicBlockData<\n                 }\n             }\n \n-            // If inline assembly is found, we probably should\n-            // not try to analyze the code\n-            StatementKind::LlvmInlineAsm(_) => return false,\n-\n             // These statements have no influence on the place\n             // we are interested in\n             StatementKind::FakeRead(_)\n@@ -320,10 +316,6 @@ fn find_determining_place<'tcx>(\n             | StatementKind::CopyNonOverlapping(_)\n             | StatementKind::Nop => {}\n \n-            // If inline assembly is found, we probably should\n-            // not try to analyze the code\n-            StatementKind::LlvmInlineAsm(_) => return None,\n-\n             // If the discriminant is set, it is always set\n             // as a constant, so the job is already done.\n             // As we are **ignoring projections**, if the place"}, {"sha": "7e0c8e233e9e8cfd94efa213717d79e860f08261", "filename": "compiler/rustc_mir_transform/src/simplify.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -483,8 +483,7 @@ impl UsedLocals {\n impl<'tcx> Visitor<'tcx> for UsedLocals {\n     fn visit_statement(&mut self, statement: &Statement<'tcx>, location: Location) {\n         match statement.kind {\n-            StatementKind::LlvmInlineAsm(..)\n-            | StatementKind::CopyNonOverlapping(..)\n+            StatementKind::CopyNonOverlapping(..)\n             | StatementKind::Retag(..)\n             | StatementKind::Coverage(..)\n             | StatementKind::FakeRead(..)"}, {"sha": "d5507fcc78cad8016befb447a1bad1c52fa23e39", "filename": "compiler/rustc_mir_transform/src/simplify_try.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_try.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -631,10 +631,6 @@ impl<'tcx> SimplifyBranchSameOptimizationFinder<'_, 'tcx> {\n                     .filter(|(_, bb)| {\n                         // Reaching `unreachable` is UB so assume it doesn't happen.\n                         bb.terminator().kind != TerminatorKind::Unreachable\n-                    // But `asm!(...)` could abort the program,\n-                    // so we cannot assume that the `unreachable` terminator itself is reachable.\n-                    // FIXME(Centril): use a normalization pass instead of a check.\n-                    || bb.statements.iter().any(|stmt| matches!(stmt.kind, StatementKind::LlvmInlineAsm(..)))\n                     })\n                     .peekable();\n "}, {"sha": "f916ca36217b4c0ff4c0ceb15d81cb8e97801b48", "filename": "compiler/rustc_mir_transform/src/unreachable_prop.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_mir_transform%2Fsrc%2Funreachable_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_mir_transform%2Fsrc%2Funreachable_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Funreachable_prop.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -23,23 +23,14 @@ impl MirPass<'_> for UnreachablePropagation {\n \n         for (bb, bb_data) in traversal::postorder(body) {\n             let terminator = bb_data.terminator();\n-            // HACK: If the block contains any asm statement it is not regarded as unreachable.\n-            // This is a temporary solution that handles possibly diverging asm statements.\n-            // Accompanying testcases: mir-opt/unreachable_asm.rs and mir-opt/unreachable_asm_2.rs\n-            let asm_stmt_in_block = || {\n-                bb_data.statements.iter().any(|stmt: &Statement<'_>| {\n-                    matches!(stmt.kind, StatementKind::LlvmInlineAsm(..))\n-                })\n-            };\n-\n-            if terminator.kind == TerminatorKind::Unreachable && !asm_stmt_in_block() {\n+            if terminator.kind == TerminatorKind::Unreachable {\n                 unreachable_blocks.insert(bb);\n             } else {\n                 let is_unreachable = |succ: BasicBlock| unreachable_blocks.contains(&succ);\n                 let terminator_kind_opt = remove_successors(&terminator.kind, is_unreachable);\n \n                 if let Some(terminator_kind) = terminator_kind_opt {\n-                    if terminator_kind == TerminatorKind::Unreachable && !asm_stmt_in_block() {\n+                    if terminator_kind == TerminatorKind::Unreachable {\n                         unreachable_blocks.insert(bb);\n                     }\n                     replacements.insert(bb, terminator_kind);"}, {"sha": "d8f4ce5e464d5655b0d1177c562f6036266df52c", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -103,7 +103,6 @@ use rustc_span::Span;\n use std::collections::VecDeque;\n use std::io;\n use std::io::prelude::*;\n-use std::iter;\n use std::rc::Rc;\n \n mod rwu_table;\n@@ -470,7 +469,6 @@ impl<'tcx> Visitor<'tcx> for IrMaps<'tcx> {\n             | hir::ExprKind::Struct(..)\n             | hir::ExprKind::Repeat(..)\n             | hir::ExprKind::InlineAsm(..)\n-            | hir::ExprKind::LlvmInlineAsm(..)\n             | hir::ExprKind::Box(..)\n             | hir::ExprKind::Type(..)\n             | hir::ExprKind::Err\n@@ -1091,26 +1089,6 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                 succ\n             }\n \n-            hir::ExprKind::LlvmInlineAsm(ref asm) => {\n-                let ia = &asm.inner;\n-                let outputs = asm.outputs_exprs;\n-                let inputs = asm.inputs_exprs;\n-                let succ = iter::zip(&ia.outputs, outputs).rev().fold(succ, |succ, (o, output)| {\n-                    // see comment on places\n-                    // in propagate_through_place_components()\n-                    if o.is_indirect {\n-                        self.propagate_through_expr(output, succ)\n-                    } else {\n-                        let acc = if o.is_rw { ACC_WRITE | ACC_READ } else { ACC_WRITE };\n-                        let succ = self.write_place(output, succ, acc);\n-                        self.propagate_through_place_components(output, succ)\n-                    }\n-                });\n-\n-                // Inputs are executed first. Propagate last because of rev order\n-                self.propagate_through_exprs(inputs, succ)\n-            }\n-\n             hir::ExprKind::Lit(..)\n             | hir::ExprKind::ConstBlock(..)\n             | hir::ExprKind::Err\n@@ -1387,20 +1365,6 @@ fn check_expr<'tcx>(this: &mut Liveness<'_, 'tcx>, expr: &'tcx Expr<'tcx>) {\n             }\n         }\n \n-        hir::ExprKind::LlvmInlineAsm(ref asm) => {\n-            for input in asm.inputs_exprs {\n-                this.visit_expr(input);\n-            }\n-\n-            // Output operands must be places\n-            for (o, output) in iter::zip(&asm.inner.outputs, asm.outputs_exprs) {\n-                if !o.is_indirect {\n-                    this.check_place(output);\n-                }\n-                this.visit_expr(output);\n-            }\n-        }\n-\n         hir::ExprKind::Let(let_expr) => {\n             this.check_unused_vars_in_pat(let_expr.pat, None, |_, _, _, _| {});\n         }"}, {"sha": "dd14dce4b5b83247424fcb6b7400bbef60246f5e", "filename": "compiler/rustc_passes/src/naked_functions.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -236,22 +236,6 @@ impl<'tcx> CheckInlineAssembly<'tcx> {\n                 self.check_inline_asm(expr.hir_id, asm, span);\n             }\n \n-            ExprKind::LlvmInlineAsm(..) => {\n-                self.items.push((ItemKind::Asm, span));\n-                self.tcx.struct_span_lint_hir(\n-                    UNSUPPORTED_NAKED_FUNCTIONS,\n-                    expr.hir_id,\n-                    span,\n-                    |lint| {\n-                        lint.build(\n-                            \"the LLVM-style inline assembly is unsupported in naked functions\",\n-                        )\n-                        .help(\"use the new asm! syntax specified in RFC 2873\")\n-                        .emit();\n-                    },\n-                );\n-            }\n-\n             ExprKind::DropTemps(..) | ExprKind::Block(..) | ExprKind::Err => {\n                 hir::intravisit::walk_expr(self, expr);\n             }"}, {"sha": "8020893e1663ccbd6d0c1d1136db71ea69534daa", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -808,7 +808,6 @@ symbols! {\n         linkage,\n         lint_reasons,\n         literal,\n-        llvm_asm,\n         load,\n         loaded_from_disk,\n         local,"}, {"sha": "96a944017bc2406b375fd18cd5c9273b2da0c279", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -479,7 +479,7 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n             // let expressions imply control flow\n             ExprKind::Match { .. } | ExprKind::If { .. } | ExprKind::Let { .. } =>\n                 self.error(node.span, \"control flow is not supported in generic constants\")?,\n-            ExprKind::LlvmInlineAsm { .. } | ExprKind::InlineAsm { .. } => {\n+            ExprKind::InlineAsm { .. } => {\n                 self.error(node.span, \"assembly is not supported in generic constants\")?\n             }\n "}, {"sha": "3e73cc659ec469bd34f6d28c5905c83988ef028e", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -282,12 +282,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n             ExprKind::Path(ref qpath) => self.check_expr_path(qpath, expr, &[]),\n             ExprKind::InlineAsm(asm) => self.check_expr_asm(asm),\n-            ExprKind::LlvmInlineAsm(asm) => {\n-                for expr in asm.outputs_exprs.iter().chain(asm.inputs_exprs.iter()) {\n-                    self.check_expr(expr);\n-                }\n-                tcx.mk_unit()\n-            }\n             ExprKind::Break(destination, ref expr_opt) => {\n                 self.check_expr_break(destination, expr_opt.as_deref(), expr)\n             }"}, {"sha": "db1c80ae433b20de2a320f81fa66aaa720cb0826", "filename": "compiler/rustc_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -17,7 +17,6 @@ use rustc_middle::hir::place::ProjectionKind;\n use rustc_middle::mir::FakeReadCause;\n use rustc_middle::ty::{self, adjustment, AdtKind, Ty, TyCtxt};\n use rustc_target::abi::VariantIdx;\n-use std::iter;\n \n use crate::mem_categorization as mc;\n \n@@ -360,17 +359,6 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                 }\n             }\n \n-            hir::ExprKind::LlvmInlineAsm(ia) => {\n-                for (o, output) in iter::zip(&ia.inner.outputs, ia.outputs_exprs) {\n-                    if o.is_indirect {\n-                        self.consume_expr(output);\n-                    } else {\n-                        self.mutate_expr(output);\n-                    }\n-                }\n-                self.consume_exprs(ia.inputs_exprs);\n-            }\n-\n             hir::ExprKind::Continue(..)\n             | hir::ExprKind::Lit(..)\n             | hir::ExprKind::ConstBlock(..)"}, {"sha": "2c2d2be8bb5141e9eac2f9c9073b64164243074b", "filename": "compiler/rustc_typeck/src/mem_categorization.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_typeck%2Fsrc%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/compiler%2Frustc_typeck%2Fsrc%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fmem_categorization.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -378,7 +378,6 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n             | hir::ExprKind::Struct(..)\n             | hir::ExprKind::Repeat(..)\n             | hir::ExprKind::InlineAsm(..)\n-            | hir::ExprKind::LlvmInlineAsm(..)\n             | hir::ExprKind::Box(..)\n             | hir::ExprKind::Err => Ok(self.cat_rvalue(expr.hir_id, expr.span, expr_ty)),\n         }"}, {"sha": "d8ac816fb15a0309648809330f6452d5fa894ac8", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -180,7 +180,6 @@\n #![feature(intrinsics)]\n #![feature(lang_items)]\n #![feature(link_llvm_intrinsics)]\n-#![feature(llvm_asm)]\n #![feature(min_specialization)]\n #![feature(mixed_integer_ops)]\n #![feature(must_not_suspend)]"}, {"sha": "488bb875c352685a7213d2ae0d739ebe0b603c85", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -1397,32 +1397,6 @@ pub(crate) mod builtin {\n         ($cond:expr, $($arg:tt)+) => {{ /* compiler built-in */ }};\n     }\n \n-    /// LLVM-style inline assembly.\n-    ///\n-    /// Read the [unstable book] for the usage.\n-    ///\n-    /// [unstable book]: ../unstable-book/library-features/llvm-asm.html\n-    #[unstable(\n-        feature = \"llvm_asm\",\n-        issue = \"70173\",\n-        reason = \"prefer using the new asm! syntax instead\"\n-    )]\n-    #[rustc_deprecated(\n-        since = \"1.56\",\n-        reason = \"will be removed from the compiler, use asm! instead\"\n-    )]\n-    #[rustc_builtin_macro]\n-    #[macro_export]\n-    macro_rules! llvm_asm {\n-        (\"assembly template\"\n-                        : $(\"output\"(operand),)*\n-                        : $(\"input\"(operand),)*\n-                        : $(\"clobbers\",)*\n-                        : $(\"options\",)*) => {\n-            /* compiler built-in */\n-        };\n-    }\n-\n     /// Prints passed tokens into the standard output.\n     #[unstable(\n         feature = \"log_syntax\","}, {"sha": "d91289fad2009ea64c65b8c68df3de8b9f80d4b0", "filename": "library/core/src/prelude/v1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/library%2Fcore%2Fsrc%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/library%2Fcore%2Fsrc%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fprelude%2Fv1.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -56,8 +56,8 @@ pub use crate::hash::macros::Hash;\n #[doc(no_inline)]\n pub use crate::{\n     assert, cfg, column, compile_error, concat, concat_idents, env, file, format_args,\n-    format_args_nl, include, include_bytes, include_str, line, llvm_asm, log_syntax, module_path,\n-    option_env, stringify, trace_macros,\n+    format_args_nl, include, include_bytes, include_str, line, log_syntax, module_path, option_env,\n+    stringify, trace_macros,\n };\n \n #[unstable("}, {"sha": "4f630dcb04d9bcc0afd01399d0e72a099a2518f1", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -294,7 +294,6 @@\n #![feature(intra_doc_pointers)]\n #![feature(lang_items)]\n #![feature(linkage)]\n-#![feature(llvm_asm)]\n #![feature(log_syntax)]\n #![feature(map_try_insert)]\n #![feature(maybe_uninit_slice)]\n@@ -571,8 +570,8 @@ pub use core::{\n #[allow(deprecated)]\n pub use core::{\n     assert, assert_matches, cfg, column, compile_error, concat, concat_idents, const_format_args,\n-    env, file, format_args, format_args_nl, include, include_bytes, include_str, line, llvm_asm,\n-    log_syntax, module_path, option_env, stringify, trace_macros,\n+    env, file, format_args, format_args_nl, include, include_bytes, include_str, line, log_syntax,\n+    module_path, option_env, stringify, trace_macros,\n };\n \n #[unstable("}, {"sha": "53124daa3a683a0fafa0f17766462d428b3b9f90", "filename": "library/std/src/prelude/v1.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/library%2Fstd%2Fsrc%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/library%2Fstd%2Fsrc%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprelude%2Fv1.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -40,9 +40,8 @@ pub use crate::result::Result::{self, Err, Ok};\n #[doc(no_inline)]\n pub use core::prelude::v1::{\n     assert, cfg, column, compile_error, concat, concat_idents, env, file, format_args,\n-    format_args_nl, include, include_bytes, include_str, line, llvm_asm, log_syntax, module_path,\n-    option_env, stringify, trace_macros, Clone, Copy, Debug, Default, Eq, Hash, Ord, PartialEq,\n-    PartialOrd,\n+    format_args_nl, include, include_bytes, include_str, line, log_syntax, module_path, option_env,\n+    stringify, trace_macros, Clone, Copy, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd,\n };\n \n #[unstable("}, {"sha": "094124998b6e738686a98c6400dc1c663efc0c16", "filename": "src/doc/unstable-book/src/library-features/llvm-asm.md", "status": "removed", "additions": 0, "deletions": 190, "changes": 190, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fllvm-asm.md", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fllvm-asm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fllvm-asm.md?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,190 +0,0 @@\n-# `llvm_asm`\n-\n-The tracking issue for this feature is: [#70173]\n-\n-[#70173]: https://github.com/rust-lang/rust/issues/70173\n-\n-------------------------\n-\n-For extremely low-level manipulations and performance reasons, one\n-might wish to control the CPU directly. Rust supports using inline\n-assembly to do this via the `llvm_asm!` macro.\n-\n-```rust,ignore (pseudo-code)\n-llvm_asm!(assembly template\n-   : output operands\n-   : input operands\n-   : clobbers\n-   : options\n-   );\n-```\n-\n-Any use of `llvm_asm` is feature gated (requires `#![feature(llvm_asm)]` on the\n-crate to allow) and of course requires an `unsafe` block.\n-\n-> **Note**: the examples here are given in x86/x86-64 assembly, but\n-> all platforms are supported.\n-\n-## Assembly template\n-\n-The `assembly template` is the only required parameter and must be a\n-literal string (i.e. `\"\"`)\n-\n-```rust\n-#![feature(llvm_asm)]\n-\n-#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n-fn foo() {\n-    unsafe {\n-        llvm_asm!(\"NOP\");\n-    }\n-}\n-\n-// Other platforms:\n-#[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n-fn foo() { /* ... */ }\n-\n-fn main() {\n-    // ...\n-    foo();\n-    // ...\n-}\n-```\n-\n-(The `feature(llvm_asm)` and `#[cfg]`s are omitted from now on.)\n-\n-Output operands, input operands, clobbers and options are all optional\n-but you must add the right number of `:` if you skip them:\n-\n-```rust\n-# #![feature(llvm_asm)]\n-# #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n-# fn main() { unsafe {\n-llvm_asm!(\"xor %eax, %eax\"\n-    :\n-    :\n-    : \"eax\"\n-   );\n-# } }\n-# #[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n-# fn main() {}\n-```\n-\n-Whitespace also doesn't matter:\n-\n-```rust\n-# #![feature(llvm_asm)]\n-# #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n-# fn main() { unsafe {\n-llvm_asm!(\"xor %eax, %eax\" ::: \"eax\");\n-# } }\n-# #[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n-# fn main() {}\n-```\n-\n-## Operands\n-\n-Input and output operands follow the same format: `:\n-\"constraints1\"(expr1), \"constraints2\"(expr2), ...\"`. Output operand\n-expressions must be mutable place, or not yet assigned:\n-\n-```rust\n-# #![feature(llvm_asm)]\n-# #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n-fn add(a: i32, b: i32) -> i32 {\n-    let c: i32;\n-    unsafe {\n-        llvm_asm!(\"add $2, $0\"\n-             : \"=r\"(c)\n-             : \"0\"(a), \"r\"(b)\n-             );\n-    }\n-    c\n-}\n-# #[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n-# fn add(a: i32, b: i32) -> i32 { a + b }\n-\n-fn main() {\n-    assert_eq!(add(3, 14159), 14162)\n-}\n-```\n-\n-If you would like to use real operands in this position, however,\n-you are required to put curly braces `{}` around the register that\n-you want, and you are required to put the specific size of the\n-operand. This is useful for very low level programming, where\n-which register you use is important:\n-\n-```rust\n-# #![feature(llvm_asm)]\n-# #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n-# unsafe fn read_byte_in(port: u16) -> u8 {\n-let result: u8;\n-llvm_asm!(\"in %dx, %al\" : \"={al}\"(result) : \"{dx}\"(port));\n-result\n-# }\n-```\n-\n-## Clobbers\n-\n-Some instructions modify registers which might otherwise have held\n-different values so we use the clobbers list to indicate to the\n-compiler not to assume any values loaded into those registers will\n-stay valid.\n-\n-```rust\n-# #![feature(llvm_asm)]\n-# #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n-# fn main() { unsafe {\n-// Put the value 0x200 in eax:\n-llvm_asm!(\"mov $$0x200, %eax\" : /* no outputs */ : /* no inputs */ : \"eax\");\n-# } }\n-# #[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n-# fn main() {}\n-```\n-\n-Input and output registers need not be listed since that information\n-is already communicated by the given constraints. Otherwise, any other\n-registers used either implicitly or explicitly should be listed.\n-\n-If the assembly changes the condition code register `cc` should be\n-specified as one of the clobbers. Similarly, if the assembly modifies\n-memory, `memory` should also be specified.\n-\n-## Options\n-\n-The last section, `options` is specific to Rust. The format is comma\n-separated literal strings (i.e. `:\"foo\", \"bar\", \"baz\"`). It's used to\n-specify some extra info about the inline assembly:\n-\n-Current valid options are:\n-\n-1. `volatile` - specifying this is analogous to\n-   `__asm__ __volatile__ (...)` in gcc/clang.\n-2. `alignstack` - certain instructions expect the stack to be\n-   aligned a certain way (i.e. SSE) and specifying this indicates to\n-   the compiler to insert its usual stack alignment code\n-3. `intel` - use intel syntax instead of the default AT&T.\n-\n-```rust\n-# #![feature(llvm_asm)]\n-# #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n-# fn main() {\n-let result: i32;\n-unsafe {\n-   llvm_asm!(\"mov eax, 2\" : \"={eax}\"(result) : : : \"intel\")\n-}\n-println!(\"eax is currently {}\", result);\n-# }\n-# #[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n-# fn main() {}\n-```\n-\n-## More Information\n-\n-The current implementation of the `llvm_asm!` macro is a direct binding to [LLVM's\n-inline assembler expressions][llvm-docs], so be sure to check out [their\n-documentation as well][llvm-docs] for more information about clobbers,\n-constraints, etc.\n-\n-[llvm-docs]: http://llvm.org/docs/LangRef.html#inline-assembler-expressions"}, {"sha": "40376218908d10d41cfc0d44a085ea6fa055cf0e", "filename": "src/test/codegen/no-output-asm-is-volatile.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fcodegen%2Fno-output-asm-is-volatile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fcodegen%2Fno-output-asm-is-volatile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fno-output-asm-is-volatile.rs?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,14 +0,0 @@\n-// compile-flags: -O\n-\n-#![feature(llvm_asm)]\n-#![crate_type = \"lib\"]\n-\n-// Check that inline assembly expressions without any outputs\n-// are marked as having side effects / being volatile\n-\n-// CHECK-LABEL: @assembly\n-#[no_mangle]\n-pub fn assembly() {\n-    unsafe { llvm_asm!(\"\") }\n-// CHECK: tail call void asm sideeffect \"\", {{.*}}\n-}"}, {"sha": "bb836f203f5c060f1f2e0ac5dbc801bc3b8e305c", "filename": "src/test/incremental/hashes/inline_asm.rs", "status": "modified", "additions": 53, "deletions": 77, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/src%2Ftest%2Fincremental%2Fhashes%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/src%2Ftest%2Fincremental%2Fhashes%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Finline_asm.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -18,23 +18,19 @@\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]\n-#![feature(llvm_asm)]\n #![crate_type=\"rlib\"]\n \n-\n+use std::arch::asm;\n \n // Change template\n #[cfg(any(cfail1,cfail4))]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n-pub fn change_template(a: i32) -> i32 {\n+pub fn change_template(_a: i32) -> i32 {\n     let c: i32;\n     unsafe {\n-        llvm_asm!(\"add 1, $0\"\n-                  : \"=r\"(c)\n-                  : \"0\"(a)\n-                  :\n-                  :\n-                  );\n+        asm!(\"mov {0}, 1\",\n+             out(reg) c\n+             );\n     }\n     c\n }\n@@ -45,15 +41,12 @@ pub fn change_template(a: i32) -> i32 {\n #[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail6\")]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n-pub fn change_template(a: i32) -> i32 {\n+pub fn change_template(_a: i32) -> i32 {\n     let c: i32;\n     unsafe {\n-        llvm_asm!(\"add 2, $0\"\n-                  : \"=r\"(c)\n-                  : \"0\"(a)\n-                  :\n-                  :\n-                  );\n+        asm!(\"mov {0}, 2\",\n+             out(reg) c\n+             );\n     }\n     c\n }\n@@ -67,12 +60,10 @@ pub fn change_output(a: i32) -> i32 {\n     let mut _out1: i32 = 0;\n     let mut _out2: i32 = 0;\n     unsafe {\n-        llvm_asm!(\"add 1, $0\"\n-                  : \"=r\"(_out1)\n-                  : \"0\"(a)\n-                  :\n-                  :\n-                  );\n+        asm!(\"mov {0}, {1}\",\n+             out(reg) _out1,\n+             in(reg) a\n+             );\n     }\n     _out1\n }\n@@ -87,12 +78,10 @@ pub fn change_output(a: i32) -> i32 {\n     let mut _out1: i32 = 0;\n     let mut _out2: i32 = 0;\n     unsafe {\n-        llvm_asm!(\"add 1, $0\"\n-                  : \"=r\"(_out2)\n-                  : \"0\"(a)\n-                  :\n-                  :\n-                  );\n+        asm!(\"mov {0}, {1}\",\n+             out(reg) _out2,\n+             in(reg) a\n+             );\n     }\n     _out1\n }\n@@ -105,12 +94,10 @@ pub fn change_output(a: i32) -> i32 {\n pub fn change_input(_a: i32, _b: i32) -> i32 {\n     let _out;\n     unsafe {\n-        llvm_asm!(\"add 1, $0\"\n-                  : \"=r\"(_out)\n-                  : \"0\"(_a)\n-                  :\n-                  :\n-                  );\n+        asm!(\"mov {0}, {1}\",\n+             out(reg) _out,\n+             in(reg) _a\n+             );\n     }\n     _out\n }\n@@ -124,12 +111,10 @@ pub fn change_input(_a: i32, _b: i32) -> i32 {\n pub fn change_input(_a: i32, _b: i32) -> i32 {\n     let _out;\n     unsafe {\n-        llvm_asm!(\"add 1, $0\"\n-                  : \"=r\"(_out)\n-                  : \"0\"(_b)\n-                  :\n-                  :\n-                  );\n+        asm!(\"mov {0}, {1}\",\n+             out(reg) _out,\n+             in(reg) _b\n+             );\n     }\n     _out\n }\n@@ -142,12 +127,10 @@ pub fn change_input(_a: i32, _b: i32) -> i32 {\n pub fn change_input_constraint(_a: i32, _b: i32) -> i32 {\n     let _out;\n     unsafe {\n-        llvm_asm!(\"add 1, $0\"\n-                  : \"=r\"(_out)\n-                  : \"0\"(_a), \"r\"(_b)\n-                  :\n-                  :\n-                  );\n+        asm!(\"mov {0}, {1}\",\n+             out(reg) _out,\n+             in(reg) _a,\n+             in(\"eax\") _b);\n     }\n     _out\n }\n@@ -161,30 +144,26 @@ pub fn change_input_constraint(_a: i32, _b: i32) -> i32 {\n pub fn change_input_constraint(_a: i32, _b: i32) -> i32 {\n     let _out;\n     unsafe {\n-        llvm_asm!(\"add 1, $0\"\n-                  : \"=r\"(_out)\n-                  : \"r\"(_a), \"0\"(_b)\n-                  :\n-                  :\n-                  );\n+        asm!(\"mov {0}, {1}\",\n+             out(reg) _out,\n+             in(reg) _a,\n+             in(\"ecx\") _b);\n     }\n     _out\n }\n \n \n-\n // Change clobber\n #[cfg(any(cfail1,cfail4))]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn change_clobber(_a: i32) -> i32 {\n     let _out;\n     unsafe {\n-        llvm_asm!(\"add 1, $0\"\n-                  : \"=r\"(_out)\n-                  : \"0\"(_a)\n-                  :/*--*/\n-                  :\n-                  );\n+        asm!(\"mov {0}, {1}\",\n+             out(reg) _out,\n+             in(reg) _a,\n+             lateout(\"ecx\") _\n+             );\n     }\n     _out\n }\n@@ -198,12 +177,11 @@ pub fn change_clobber(_a: i32) -> i32 {\n pub fn change_clobber(_a: i32) -> i32 {\n     let _out;\n     unsafe {\n-        llvm_asm!(\"add 1, $0\"\n-                  : \"=r\"(_out)\n-                  : \"0\"(_a)\n-                  : \"eax\"\n-                  :\n-                  );\n+        asm!(\"mov {0}, {1}\",\n+             out(reg) _out,\n+             in(reg) _a,\n+             lateout(\"edx\") _\n+             );\n     }\n     _out\n }\n@@ -216,12 +194,11 @@ pub fn change_clobber(_a: i32) -> i32 {\n pub fn change_options(_a: i32) -> i32 {\n     let _out;\n     unsafe {\n-        llvm_asm!(\"add 1, $0\"\n-                  : \"=r\"(_out)\n-                  : \"0\"(_a)\n-                  :\n-                  :/*-------*/\n-                  );\n+        asm!(\"mov {0}, {1}\",\n+             out(reg) _out,\n+             in(reg) _a,\n+             options(readonly),\n+             );\n     }\n     _out\n }\n@@ -235,12 +212,11 @@ pub fn change_options(_a: i32) -> i32 {\n pub fn change_options(_a: i32) -> i32 {\n     let _out;\n     unsafe {\n-        llvm_asm!(\"add 1, $0\"\n-                  : \"=r\"(_out)\n-                  : \"0\"(_a)\n-                  :\n-                  : \"volatile\"\n-                  );\n+        asm!(\"mov {0}, {1}\",\n+             out(reg) _out,\n+             in(reg) _a,\n+             options(nomem   ),\n+             );\n     }\n     _out\n }"}, {"sha": "c60997be5d3c3bf5d26f24416b378db453182226", "filename": "src/test/mir-opt/unreachable_asm.main.UnreachablePropagation.diff", "status": "removed", "additions": 0, "deletions": 75, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fmir-opt%2Funreachable_asm.main.UnreachablePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fmir-opt%2Funreachable_asm.main.UnreachablePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable_asm.main.UnreachablePropagation.diff?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,75 +0,0 @@\n-- // MIR for `main` before UnreachablePropagation\n-+ // MIR for `main` after UnreachablePropagation\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/unreachable_asm.rs:10:11: 10:11\n-      let mut _1: std::option::Option<Empty>; // in scope 0 at $DIR/unreachable_asm.rs:11:23: 11:30\n-      let mut _2: isize;                   // in scope 0 at $DIR/unreachable_asm.rs:11:12: 11:20\n-      let _3: Empty;                       // in scope 0 at $DIR/unreachable_asm.rs:11:17: 11:19\n-      let mut _4: i32;                     // in scope 0 at $DIR/unreachable_asm.rs:12:13: 12:19\n-      let _5: ();                          // in scope 0 at $DIR/unreachable_asm.rs:14:9: 18:10\n-      let mut _6: bool;                    // in scope 0 at $DIR/unreachable_asm.rs:14:12: 14:16\n-      let _7: ();                          // in scope 0 at $DIR/unreachable_asm.rs:21:9: 21:37\n-      let mut _8: !;                       // in scope 0 at $DIR/unreachable_asm.rs:22:9: 22:21\n-      scope 1 {\n-          debug _x => _3;                  // in scope 1 at $DIR/unreachable_asm.rs:11:17: 11:19\n-      }\n-      scope 2 {\n-          debug _y => _4;                  // in scope 2 at $DIR/unreachable_asm.rs:12:13: 12:19\n-          scope 3 {\n-          }\n-      }\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/unreachable_asm.rs:11:23: 11:30\n-          _1 = empty() -> bb1;             // scope 0 at $DIR/unreachable_asm.rs:11:23: 11:30\n-                                           // mir::Constant\n-                                           // + span: $DIR/unreachable_asm.rs:11:23: 11:28\n-                                           // + literal: Const { ty: fn() -> std::option::Option<Empty> {empty}, val: Value(Scalar(<ZST>)) }\n-      }\n-  \n-      bb1: {\n-          _2 = discriminant(_1);           // scope 0 at $DIR/unreachable_asm.rs:11:12: 11:20\n-          switchInt(move _2) -> [1_isize: bb2, otherwise: bb6]; // scope 0 at $DIR/unreachable_asm.rs:11:12: 11:20\n-      }\n-  \n-      bb2: {\n-          StorageLive(_3);                 // scope 0 at $DIR/unreachable_asm.rs:11:17: 11:19\n-          _3 = move ((_1 as Some).0: Empty); // scope 0 at $DIR/unreachable_asm.rs:11:17: 11:19\n-          StorageLive(_4);                 // scope 0 at $DIR/unreachable_asm.rs:12:13: 12:19\n-          StorageLive(_5);                 // scope 2 at $DIR/unreachable_asm.rs:14:9: 18:10\n-          StorageLive(_6);                 // scope 2 at $DIR/unreachable_asm.rs:14:12: 14:16\n-          _6 = const true;                 // scope 2 at $DIR/unreachable_asm.rs:14:12: 14:16\n-          switchInt(move _6) -> [false: bb4, otherwise: bb3]; // scope 2 at $DIR/unreachable_asm.rs:14:12: 14:16\n-      }\n-  \n-      bb3: {\n-          _4 = const 21_i32;               // scope 2 at $DIR/unreachable_asm.rs:15:13: 15:20\n-          _5 = const ();                   // scope 2 at $DIR/unreachable_asm.rs:14:17: 16:10\n-          goto -> bb5;                     // scope 2 at $DIR/unreachable_asm.rs:14:9: 18:10\n-      }\n-  \n-      bb4: {\n-          _4 = const 42_i32;               // scope 2 at $DIR/unreachable_asm.rs:17:13: 17:20\n-          _5 = const ();                   // scope 2 at $DIR/unreachable_asm.rs:16:16: 18:10\n-          goto -> bb5;                     // scope 2 at $DIR/unreachable_asm.rs:14:9: 18:10\n-      }\n-  \n-      bb5: {\n-          StorageDead(_6);                 // scope 2 at $DIR/unreachable_asm.rs:18:9: 18:10\n-          StorageDead(_5);                 // scope 2 at $DIR/unreachable_asm.rs:18:9: 18:10\n-          StorageLive(_7);                 // scope 2 at $DIR/unreachable_asm.rs:21:9: 21:37\n-          llvm_asm!(LlvmInlineAsmInner { asm: \"NOP\", asm_str_style: Cooked, outputs: [], inputs: [], clobbers: [], volatile: true, alignstack: false, dialect: Att } : [] : []); // scope 3 at $DIR/unreachable_asm.rs:21:18: 21:34\n-          _7 = const ();                   // scope 3 at $DIR/unreachable_asm.rs:21:9: 21:37\n-          StorageDead(_7);                 // scope 2 at $DIR/unreachable_asm.rs:21:36: 21:37\n-          StorageLive(_8);                 // scope 2 at $DIR/unreachable_asm.rs:22:9: 22:21\n-          unreachable;                     // scope 2 at $DIR/unreachable_asm.rs:22:15: 22:17\n-      }\n-  \n-      bb6: {\n-          _0 = const ();                   // scope 0 at $DIR/unreachable_asm.rs:23:6: 23:6\n-          StorageDead(_1);                 // scope 0 at $DIR/unreachable_asm.rs:24:1: 24:2\n-          return;                          // scope 0 at $DIR/unreachable_asm.rs:24:2: 24:2\n-      }\n-  }\n-  "}, {"sha": "cbef05a3c05cc6cf99183f655f7b513cc6f0577a", "filename": "src/test/mir-opt/unreachable_asm.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fmir-opt%2Funreachable_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fmir-opt%2Funreachable_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable_asm.rs?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,24 +0,0 @@\n-#![feature(llvm_asm)]\n-\n-enum Empty {}\n-\n-fn empty() -> Option<Empty> {\n-    None\n-}\n-\n-// EMIT_MIR unreachable_asm.main.UnreachablePropagation.diff\n-fn main() {\n-    if let Some(_x) = empty() {\n-        let mut _y;\n-\n-        if true {\n-            _y = 21;\n-        } else {\n-            _y = 42;\n-        }\n-\n-        // asm instruction stops unreachable propagation to if else blocks bb4 and bb5.\n-        unsafe { llvm_asm!(\"NOP\"); }\n-        match _x { }\n-    }\n-}"}, {"sha": "28c5f031dbbe9bda439052aa59b3a23b2b136665", "filename": "src/test/mir-opt/unreachable_asm_2.main.UnreachablePropagation.diff", "status": "removed", "additions": 0, "deletions": 85, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fmir-opt%2Funreachable_asm_2.main.UnreachablePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fmir-opt%2Funreachable_asm_2.main.UnreachablePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable_asm_2.main.UnreachablePropagation.diff?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,85 +0,0 @@\n-- // MIR for `main` before UnreachablePropagation\n-+ // MIR for `main` after UnreachablePropagation\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/unreachable_asm_2.rs:10:11: 10:11\n-      let mut _1: std::option::Option<Empty>; // in scope 0 at $DIR/unreachable_asm_2.rs:11:23: 11:30\n-      let mut _2: isize;                   // in scope 0 at $DIR/unreachable_asm_2.rs:11:12: 11:20\n-      let _3: Empty;                       // in scope 0 at $DIR/unreachable_asm_2.rs:11:17: 11:19\n-      let mut _4: i32;                     // in scope 0 at $DIR/unreachable_asm_2.rs:12:13: 12:19\n-      let _5: ();                          // in scope 0 at $DIR/unreachable_asm_2.rs:14:9: 22:10\n-      let mut _6: bool;                    // in scope 0 at $DIR/unreachable_asm_2.rs:14:12: 14:16\n-      let _7: ();                          // in scope 0 at $DIR/unreachable_asm_2.rs:16:13: 16:41\n-      let _8: ();                          // in scope 0 at $DIR/unreachable_asm_2.rs:20:13: 20:41\n-      let mut _9: !;                       // in scope 0 at $DIR/unreachable_asm_2.rs:24:9: 24:21\n-      scope 1 {\n-          debug _x => _3;                  // in scope 1 at $DIR/unreachable_asm_2.rs:11:17: 11:19\n-      }\n-      scope 2 {\n-          debug _y => _4;                  // in scope 2 at $DIR/unreachable_asm_2.rs:12:13: 12:19\n-          scope 3 {\n-          }\n-          scope 4 {\n-          }\n-      }\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/unreachable_asm_2.rs:11:23: 11:30\n-          _1 = empty() -> bb1;             // scope 0 at $DIR/unreachable_asm_2.rs:11:23: 11:30\n-                                           // mir::Constant\n-                                           // + span: $DIR/unreachable_asm_2.rs:11:23: 11:28\n-                                           // + literal: Const { ty: fn() -> std::option::Option<Empty> {empty}, val: Value(Scalar(<ZST>)) }\n-      }\n-  \n-      bb1: {\n-          _2 = discriminant(_1);           // scope 0 at $DIR/unreachable_asm_2.rs:11:12: 11:20\n--         switchInt(move _2) -> [1_isize: bb2, otherwise: bb6]; // scope 0 at $DIR/unreachable_asm_2.rs:11:12: 11:20\n-+         switchInt(move _2) -> [1_isize: bb2, otherwise: bb5]; // scope 0 at $DIR/unreachable_asm_2.rs:11:12: 11:20\n-      }\n-  \n-      bb2: {\n-          StorageLive(_3);                 // scope 0 at $DIR/unreachable_asm_2.rs:11:17: 11:19\n-          _3 = move ((_1 as Some).0: Empty); // scope 0 at $DIR/unreachable_asm_2.rs:11:17: 11:19\n-          StorageLive(_4);                 // scope 0 at $DIR/unreachable_asm_2.rs:12:13: 12:19\n-          StorageLive(_5);                 // scope 2 at $DIR/unreachable_asm_2.rs:14:9: 22:10\n-          StorageLive(_6);                 // scope 2 at $DIR/unreachable_asm_2.rs:14:12: 14:16\n-          _6 = const true;                 // scope 2 at $DIR/unreachable_asm_2.rs:14:12: 14:16\n-          switchInt(move _6) -> [false: bb4, otherwise: bb3]; // scope 2 at $DIR/unreachable_asm_2.rs:14:12: 14:16\n-      }\n-  \n-      bb3: {\n-          StorageLive(_7);                 // scope 2 at $DIR/unreachable_asm_2.rs:16:13: 16:41\n-          llvm_asm!(LlvmInlineAsmInner { asm: \"NOP\", asm_str_style: Cooked, outputs: [], inputs: [], clobbers: [], volatile: true, alignstack: false, dialect: Att } : [] : []); // scope 3 at $DIR/unreachable_asm_2.rs:16:22: 16:38\n-          _7 = const ();                   // scope 3 at $DIR/unreachable_asm_2.rs:16:13: 16:41\n-          StorageDead(_7);                 // scope 2 at $DIR/unreachable_asm_2.rs:16:40: 16:41\n-          _4 = const 21_i32;               // scope 2 at $DIR/unreachable_asm_2.rs:17:13: 17:20\n-          _5 = const ();                   // scope 2 at $DIR/unreachable_asm_2.rs:14:17: 18:10\n--         goto -> bb5;                     // scope 2 at $DIR/unreachable_asm_2.rs:14:9: 22:10\n-+         unreachable;                     // scope 2 at $DIR/unreachable_asm_2.rs:14:9: 22:10\n-      }\n-  \n-      bb4: {\n-          StorageLive(_8);                 // scope 2 at $DIR/unreachable_asm_2.rs:20:13: 20:41\n-          llvm_asm!(LlvmInlineAsmInner { asm: \"NOP\", asm_str_style: Cooked, outputs: [], inputs: [], clobbers: [], volatile: true, alignstack: false, dialect: Att } : [] : []); // scope 4 at $DIR/unreachable_asm_2.rs:20:22: 20:38\n-          _8 = const ();                   // scope 4 at $DIR/unreachable_asm_2.rs:20:13: 20:41\n-          StorageDead(_8);                 // scope 2 at $DIR/unreachable_asm_2.rs:20:40: 20:41\n-          _4 = const 42_i32;               // scope 2 at $DIR/unreachable_asm_2.rs:21:13: 21:20\n-          _5 = const ();                   // scope 2 at $DIR/unreachable_asm_2.rs:18:16: 22:10\n--         goto -> bb5;                     // scope 2 at $DIR/unreachable_asm_2.rs:14:9: 22:10\n-+         unreachable;                     // scope 2 at $DIR/unreachable_asm_2.rs:14:9: 22:10\n-      }\n-  \n-      bb5: {\n--         StorageDead(_6);                 // scope 2 at $DIR/unreachable_asm_2.rs:22:9: 22:10\n--         StorageDead(_5);                 // scope 2 at $DIR/unreachable_asm_2.rs:22:9: 22:10\n--         StorageLive(_9);                 // scope 2 at $DIR/unreachable_asm_2.rs:24:9: 24:21\n--         unreachable;                     // scope 2 at $DIR/unreachable_asm_2.rs:24:15: 24:17\n--     }\n-- \n--     bb6: {\n-          _0 = const ();                   // scope 0 at $DIR/unreachable_asm_2.rs:25:6: 25:6\n-          StorageDead(_1);                 // scope 0 at $DIR/unreachable_asm_2.rs:26:1: 26:2\n-          return;                          // scope 0 at $DIR/unreachable_asm_2.rs:26:2: 26:2\n-      }\n-  }\n-  "}, {"sha": "e0d8e725147a3b0f7ba54326fbc0a3a65b308fbc", "filename": "src/test/mir-opt/unreachable_asm_2.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fmir-opt%2Funreachable_asm_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fmir-opt%2Funreachable_asm_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funreachable_asm_2.rs?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,26 +0,0 @@\n-#![feature(llvm_asm)]\n-\n-enum Empty {}\n-\n-fn empty() -> Option<Empty> {\n-    None\n-}\n-\n-// EMIT_MIR unreachable_asm_2.main.UnreachablePropagation.diff\n-fn main() {\n-    if let Some(_x) = empty() {\n-        let mut _y;\n-\n-        if true {\n-            // asm instruction stops unreachable propagation to block bb3.\n-            unsafe { llvm_asm!(\"NOP\"); }\n-            _y = 21;\n-        } else {\n-            // asm instruction stops unreachable propagation to block bb3.\n-            unsafe { llvm_asm!(\"NOP\"); }\n-            _y = 42;\n-        }\n-\n-        match _x { }\n-    }\n-}"}, {"sha": "2c09646e47e4ab1b421af5b9a1e9bea1360733a5", "filename": "src/test/pretty/llvm-asm-clobbers.rs", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fpretty%2Fllvm-asm-clobbers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fpretty%2Fllvm-asm-clobbers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fllvm-asm-clobbers.rs?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,3 +0,0 @@\n-#![feature(llvm_asm)]\n-\n-pub fn main() { unsafe { llvm_asm!(\"\" : : : \"hello\", \"world\") }; }"}, {"sha": "86a881bfbd18a8f201d2e532dfb0522e0763fc7b", "filename": "src/test/pretty/llvm-asm-options.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fpretty%2Fllvm-asm-options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fpretty%2Fllvm-asm-options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fllvm-asm-options.rs?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,11 +0,0 @@\n-#![feature(llvm_asm)]\n-\n-// pp-exact\n-\n-pub fn main() {\n-    unsafe {\n-        llvm_asm!(\"\" : : : : \"volatile\");\n-        llvm_asm!(\"\" : : : : \"alignstack\");\n-        llvm_asm!(\"\" : : : : \"intel\");\n-    }\n-}"}, {"sha": "7af80979b4349effb1cc5465ec438822d7c38953", "filename": "src/test/pretty/raw-str-nonexpr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/src%2Ftest%2Fpretty%2Fraw-str-nonexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/src%2Ftest%2Fpretty%2Fraw-str-nonexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fraw-str-nonexpr.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -1,8 +1,8 @@\n // pp-exact\n \n-#![feature(llvm_asm)]\n-\n #[cfg(foo = r#\"just parse this\"#)]\n extern crate blah as blah;\n \n-fn main() { unsafe { llvm_asm!(r###\"blah\"###); } }\n+use std::arch::asm;\n+\n+fn main() { unsafe { asm!(r###\"blah\"###); } }"}, {"sha": "e7b9694d9f2ad6f20a2fb17d70f45b0550451f5c", "filename": "src/test/run-make-fulldeps/intrinsic-unreachable/exit-ret.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/src%2Ftest%2Frun-make-fulldeps%2Fintrinsic-unreachable%2Fexit-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/src%2Ftest%2Frun-make-fulldeps%2Fintrinsic-unreachable%2Fexit-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fintrinsic-unreachable%2Fexit-ret.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -1,12 +1,11 @@\n-#![feature(llvm_asm)]\n #![crate_type=\"lib\"]\n+use std::arch::asm;\n \n #[deny(unreachable_code)]\n pub fn exit(n: usize) -> i32 {\n     unsafe {\n         // Pretend this asm is an exit() syscall.\n-        llvm_asm!(\"\" :: \"r\"(n) :: \"volatile\");\n-        // Can't actually reach this point, but rustc doesn't know that.\n+        asm!(\"/*{0}*/\", in(reg) n);\n     }\n     // This return value is just here to generate some extra code for a return\n     // value, making it easier for the test script to detect whether the"}, {"sha": "ec85db733df04d59a3c461d3eb6c64f252c2f15c", "filename": "src/test/run-make-fulldeps/intrinsic-unreachable/exit-unreachable.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/src%2Ftest%2Frun-make-fulldeps%2Fintrinsic-unreachable%2Fexit-unreachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/src%2Ftest%2Frun-make-fulldeps%2Fintrinsic-unreachable%2Fexit-unreachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fintrinsic-unreachable%2Fexit-unreachable.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -1,13 +1,14 @@\n-#![feature(llvm_asm, core_intrinsics)]\n+#![feature(core_intrinsics)]\n #![crate_type=\"lib\"]\n+use std::arch::asm;\n \n use std::intrinsics;\n \n #[allow(unreachable_code)]\n pub fn exit(n: usize) -> i32 {\n     unsafe {\n         // Pretend this asm is an exit() syscall.\n-        llvm_asm!(\"\" :: \"r\"(n) :: \"volatile\");\n+        asm!(\"/*{0}*/\", in(reg) n);\n         intrinsics::unreachable()\n     }\n     // This return value is just here to generate some extra code for a return"}, {"sha": "e3eff2eb1433e5b30186b1d83631c229454f4884", "filename": "src/test/ui/abi/abi-sysv64-register-usage.rs", "status": "modified", "additions": 30, "deletions": 32, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/src%2Ftest%2Fui%2Fabi%2Fabi-sysv64-register-usage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/src%2Ftest%2Fui%2Fabi%2Fabi-sysv64-register-usage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fabi-sysv64-register-usage.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -5,9 +5,7 @@\n // ignore-android\n // ignore-arm\n // ignore-aarch64\n-\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n+#![feature(asm_sym)]\n \n #[cfg(target_arch = \"x86_64\")]\n pub extern \"sysv64\" fn all_the_registers(rdi: i64, rsi: i64, rdx: i64,\n@@ -54,37 +52,37 @@ pub extern \"sysv64\" fn large_struct_by_val(mut foo: LargeStruct) -> LargeStruct\n \n #[cfg(target_arch = \"x86_64\")]\n pub fn main() {\n+    use std::arch::asm;\n+\n     let result: i64;\n     unsafe {\n-        llvm_asm!(\"mov rdi, 1;\n-                   mov rsi, 2;\n-                   mov rdx, 3;\n-                   mov rcx, 4;\n-                   mov r8,  5;\n-                   mov r9,  6;\n-                   mov eax, 0x3F800000;\n-                   movd xmm0, eax;\n-                   mov eax, 0x40000000;\n-                   movd xmm1, eax;\n-                   mov eax, 0x40800000;\n-                   movd xmm2, eax;\n-                   mov eax, 0x41000000;\n-                   movd xmm3, eax;\n-                   mov eax, 0x41800000;\n-                   movd xmm4, eax;\n-                   mov eax, 0x42000000;\n-                   movd xmm5, eax;\n-                   mov eax, 0x42800000;\n-                   movd xmm6, eax;\n-                   mov eax, 0x43000000;\n-                   movd xmm7, eax;\n-                   call r10\n-                   \"\n-                 : \"={rax}\"(result)\n-                 : \"{r10}\"(all_the_registers as usize)\n-                 : \"rdi\", \"rsi\", \"rdx\", \"rcx\", \"r8\", \"r9\", \"r11\", \"cc\", \"memory\"\n-                 : \"intel\", \"alignstack\"\n-        )\n+        asm!(\"mov rdi, 1\",\n+             \"mov rsi, 2\",\n+             \"mov rdx, 3\",\n+             \"mov rcx, 4\",\n+             \"mov r8,  5\",\n+             \"mov r9,  6\",\n+             \"mov eax, 0x3F800000\",\n+             \"movd xmm0, eax\",\n+             \"mov eax, 0x40000000\",\n+             \"movd xmm1, eax\",\n+             \"mov eax, 0x40800000\",\n+             \"movd xmm2, eax\",\n+             \"mov eax, 0x41000000\",\n+             \"movd xmm3, eax\",\n+             \"mov eax, 0x41800000\",\n+             \"movd xmm4, eax\",\n+             \"mov eax, 0x42000000\",\n+             \"movd xmm5, eax\",\n+             \"mov eax, 0x42800000\",\n+             \"movd xmm6, eax\",\n+             \"mov eax, 0x43000000\",\n+             \"movd xmm7, eax\",\n+             \"call {0}\",\n+             sym all_the_registers,\n+             out(\"rax\") result,\n+             clobber_abi(\"sysv64\"),\n+        );\n     }\n     assert_eq!(result, 42);\n "}, {"sha": "32431d9e7c6fe8bcbcb47f7722d0dc863944bee3", "filename": "src/test/ui/asm/naked-functions.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -3,12 +3,10 @@\n // ignore-spirv\n // ignore-wasm32\n \n-#![feature(llvm_asm)]\n #![feature(naked_functions)]\n #![feature(or_patterns)]\n #![feature(asm_const, asm_sym)]\n #![crate_type = \"lib\"]\n-#![allow(deprecated)] // llvm_asm!\n \n use std::arch::asm;\n \n@@ -114,16 +112,6 @@ pub fn outer(x: u32) -> extern \"C\" fn(usize) -> usize {\n     inner\n }\n \n-#[naked]\n-unsafe extern \"C\" fn llvm() -> ! {\n-    //~^ WARN naked functions must contain a single asm block\n-    //~| WARN this was previously accepted\n-    llvm_asm!(\"\");\n-    //~^ WARN LLVM-style inline assembly is unsupported in naked functions\n-    //~| WARN this was previously accepted\n-    core::hint::unreachable_unchecked();\n-}\n-\n #[naked]\n unsafe extern \"C\" fn invalid_options() {\n     asm!(\"\", options(nomem, preserves_flags, noreturn));"}, {"sha": "c2dfe443d6038baaf5a63d1e6d6603c9232e30ec", "filename": "src/test/ui/asm/naked-functions.stderr", "status": "modified", "additions": 32, "deletions": 59, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.stderr?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -1,43 +1,43 @@\n error: asm with the `pure` option must have at least one output\n-  --> $DIR/naked-functions.rs:136:14\n+  --> $DIR/naked-functions.rs:124:14\n    |\n LL |     asm!(\"\", options(readonly, nostack), options(pure));\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^\n \n error: patterns not allowed in naked function parameters\n-  --> $DIR/naked-functions.rs:23:5\n+  --> $DIR/naked-functions.rs:21:5\n    |\n LL |     mut a: u32,\n    |     ^^^^^\n \n error: patterns not allowed in naked function parameters\n-  --> $DIR/naked-functions.rs:25:5\n+  --> $DIR/naked-functions.rs:23:5\n    |\n LL |     &b: &i32,\n    |     ^^\n \n error: patterns not allowed in naked function parameters\n-  --> $DIR/naked-functions.rs:27:6\n+  --> $DIR/naked-functions.rs:25:6\n    |\n LL |     (None | Some(_)): Option<std::ptr::NonNull<u8>>,\n    |      ^^^^^^^^^^^^^^\n \n error: patterns not allowed in naked function parameters\n-  --> $DIR/naked-functions.rs:29:5\n+  --> $DIR/naked-functions.rs:27:5\n    |\n LL |     P { x, y }: P,\n    |     ^^^^^^^^^^\n \n error: referencing function parameters is not allowed in naked functions\n-  --> $DIR/naked-functions.rs:39:5\n+  --> $DIR/naked-functions.rs:37:5\n    |\n LL |     a + 1\n    |     ^\n    |\n    = help: follow the calling convention in asm block to use parameters\n \n warning: naked functions must contain a single asm block\n-  --> $DIR/naked-functions.rs:36:1\n+  --> $DIR/naked-functions.rs:34:1\n    |\n LL | / pub unsafe extern \"C\" fn inc(a: u32) -> u32 {\n LL | |\n@@ -53,15 +53,15 @@ LL | | }\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n error: referencing function parameters is not allowed in naked functions\n-  --> $DIR/naked-functions.rs:45:31\n+  --> $DIR/naked-functions.rs:43:31\n    |\n LL |     asm!(\"/* {0} */\", in(reg) a, options(noreturn));\n    |                               ^\n    |\n    = help: follow the calling convention in asm block to use parameters\n \n warning: only `const` and `sym` operands are supported in naked functions\n-  --> $DIR/naked-functions.rs:45:23\n+  --> $DIR/naked-functions.rs:43:23\n    |\n LL |     asm!(\"/* {0} */\", in(reg) a, options(noreturn));\n    |                       ^^^^^^^^^\n@@ -70,7 +70,7 @@ LL |     asm!(\"/* {0} */\", in(reg) a, options(noreturn));\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: naked functions must contain a single asm block\n-  --> $DIR/naked-functions.rs:52:1\n+  --> $DIR/naked-functions.rs:50:1\n    |\n LL | / pub unsafe extern \"C\" fn inc_closure(a: u32) -> u32 {\n LL | |\n@@ -84,7 +84,7 @@ LL | | }\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: only `const` and `sym` operands are supported in naked functions\n-  --> $DIR/naked-functions.rs:72:10\n+  --> $DIR/naked-functions.rs:70:10\n    |\n LL |          in(reg) a,\n    |          ^^^^^^^^^\n@@ -102,7 +102,7 @@ LL |          out(reg) e,\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: asm in naked functions must use `noreturn` option\n-  --> $DIR/naked-functions.rs:69:5\n+  --> $DIR/naked-functions.rs:67:5\n    |\n LL | /     asm!(\"/* {0} {1} {2} {3} {4} {5} {6} */\",\n LL | |\n@@ -117,7 +117,7 @@ LL | |     );\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: naked functions must contain a single asm block\n-  --> $DIR/naked-functions.rs:59:1\n+  --> $DIR/naked-functions.rs:57:1\n    |\n LL | / pub unsafe extern \"C\" fn unsupported_operands() {\n LL | |\n@@ -141,7 +141,7 @@ LL | | }\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: naked functions must contain a single asm block\n-  --> $DIR/naked-functions.rs:85:1\n+  --> $DIR/naked-functions.rs:83:1\n    |\n LL | / pub extern \"C\" fn missing_assembly() {\n LL | |\n@@ -153,7 +153,7 @@ LL | | }\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: asm in naked functions must use `noreturn` option\n-  --> $DIR/naked-functions.rs:94:5\n+  --> $DIR/naked-functions.rs:92:5\n    |\n LL |     asm!(\"\");\n    |     ^^^^^^^^\n@@ -162,7 +162,7 @@ LL |     asm!(\"\");\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: asm in naked functions must use `noreturn` option\n-  --> $DIR/naked-functions.rs:97:5\n+  --> $DIR/naked-functions.rs:95:5\n    |\n LL |     asm!(\"\");\n    |     ^^^^^^^^\n@@ -171,7 +171,7 @@ LL |     asm!(\"\");\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: asm in naked functions must use `noreturn` option\n-  --> $DIR/naked-functions.rs:100:5\n+  --> $DIR/naked-functions.rs:98:5\n    |\n LL |     asm!(\"\");\n    |     ^^^^^^^^\n@@ -180,7 +180,7 @@ LL |     asm!(\"\");\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: naked functions must contain a single asm block\n-  --> $DIR/naked-functions.rs:91:1\n+  --> $DIR/naked-functions.rs:89:1\n    |\n LL | / pub extern \"C\" fn too_many_asm_blocks() {\n LL | |\n@@ -202,15 +202,15 @@ LL | | }\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n error: referencing function parameters is not allowed in naked functions\n-  --> $DIR/naked-functions.rs:111:11\n+  --> $DIR/naked-functions.rs:109:11\n    |\n LL |         *&y\n    |           ^\n    |\n    = help: follow the calling convention in asm block to use parameters\n \n warning: naked functions must contain a single asm block\n-  --> $DIR/naked-functions.rs:108:5\n+  --> $DIR/naked-functions.rs:106:5\n    |\n LL | /     pub extern \"C\" fn inner(y: usize) -> usize {\n LL | |\n@@ -224,35 +224,8 @@ LL | |     }\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n-warning: the LLVM-style inline assembly is unsupported in naked functions\n-  --> $DIR/naked-functions.rs:121:5\n-   |\n-LL |     llvm_asm!(\"\");\n-   |     ^^^^^^^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n-   = help: use the new asm! syntax specified in RFC 2873\n-   = note: this warning originates in the macro `llvm_asm` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-warning: naked functions must contain a single asm block\n-  --> $DIR/naked-functions.rs:118:1\n-   |\n-LL | / unsafe extern \"C\" fn llvm() -> ! {\n-LL | |\n-LL | |\n-LL | |     llvm_asm!(\"\");\n-...  |\n-LL | |     core::hint::unreachable_unchecked();\n-   | |     ------------------------------------ non-asm is unsupported in naked functions\n-LL | | }\n-   | |_^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n-\n warning: asm options unsupported in naked functions: `nomem`, `preserves_flags`\n-  --> $DIR/naked-functions.rs:129:5\n+  --> $DIR/naked-functions.rs:117:5\n    |\n LL |     asm!(\"\", options(nomem, preserves_flags, noreturn));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -261,7 +234,7 @@ LL |     asm!(\"\", options(nomem, preserves_flags, noreturn));\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: asm options unsupported in naked functions: `nostack`, `pure`, `readonly`\n-  --> $DIR/naked-functions.rs:136:5\n+  --> $DIR/naked-functions.rs:124:5\n    |\n LL |     asm!(\"\", options(readonly, nostack), options(pure));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -270,7 +243,7 @@ LL |     asm!(\"\", options(readonly, nostack), options(pure));\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: asm in naked functions must use `noreturn` option\n-  --> $DIR/naked-functions.rs:136:5\n+  --> $DIR/naked-functions.rs:124:5\n    |\n LL |     asm!(\"\", options(readonly, nostack), options(pure));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -279,21 +252,21 @@ LL |     asm!(\"\", options(readonly, nostack), options(pure));\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: Rust ABI is unsupported in naked functions\n-  --> $DIR/naked-functions.rs:145:15\n+  --> $DIR/naked-functions.rs:133:15\n    |\n LL | pub unsafe fn default_abi() {\n    |               ^^^^^^^^^^^\n    |\n    = note: `#[warn(undefined_naked_function_abi)]` on by default\n \n warning: Rust ABI is unsupported in naked functions\n-  --> $DIR/naked-functions.rs:151:15\n+  --> $DIR/naked-functions.rs:139:15\n    |\n LL | pub unsafe fn rust_abi() {\n    |               ^^^^^^^^\n \n warning: naked functions cannot be inlined\n-  --> $DIR/naked-functions.rs:191:1\n+  --> $DIR/naked-functions.rs:179:1\n    |\n LL | #[inline]\n    | ^^^^^^^^^\n@@ -302,7 +275,7 @@ LL | #[inline]\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: naked functions cannot be inlined\n-  --> $DIR/naked-functions.rs:199:1\n+  --> $DIR/naked-functions.rs:187:1\n    |\n LL | #[inline(always)]\n    | ^^^^^^^^^^^^^^^^^\n@@ -311,7 +284,7 @@ LL | #[inline(always)]\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: naked functions cannot be inlined\n-  --> $DIR/naked-functions.rs:207:1\n+  --> $DIR/naked-functions.rs:195:1\n    |\n LL | #[inline(never)]\n    | ^^^^^^^^^^^^^^^^\n@@ -320,7 +293,7 @@ LL | #[inline(never)]\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: naked functions cannot be inlined\n-  --> $DIR/naked-functions.rs:215:1\n+  --> $DIR/naked-functions.rs:203:1\n    |\n LL | #[inline]\n    | ^^^^^^^^^\n@@ -329,7 +302,7 @@ LL | #[inline]\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: naked functions cannot be inlined\n-  --> $DIR/naked-functions.rs:218:1\n+  --> $DIR/naked-functions.rs:206:1\n    |\n LL | #[inline(always)]\n    | ^^^^^^^^^^^^^^^^^\n@@ -338,13 +311,13 @@ LL | #[inline(always)]\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: naked functions cannot be inlined\n-  --> $DIR/naked-functions.rs:221:1\n+  --> $DIR/naked-functions.rs:209:1\n    |\n LL | #[inline(never)]\n    | ^^^^^^^^^^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n-error: aborting due to 8 previous errors; 25 warnings emitted\n+error: aborting due to 8 previous errors; 23 warnings emitted\n "}, {"sha": "ce93e4b5d4b2dc9526f36e0d9d2875d6c54d5087", "filename": "src/test/ui/ast-json/ast-json-ice.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/src%2Ftest%2Fui%2Fast-json%2Fast-json-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/src%2Ftest%2Fui%2Fast-json%2Fast-json-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fast-json%2Fast-json-ice.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -8,9 +8,6 @@\n // check-pass\n // dont-check-compiler-stdout - don't check for any AST change.\n \n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n enum V {\n     A(i32),\n     B { f: [i64; 3 + 4] }\n@@ -27,12 +24,6 @@ macro_rules! call_println {\n }\n \n fn main() {\n-    #[cfg(any(target_arch = \"x86\",\n-        target_arch = \"x86_64\",\n-        target_arch = \"arm\",\n-        target_arch = \"aarch64\"))]\n-    unsafe { llvm_asm!(\"\"::::); }\n-\n     let x: (i32) = 35;\n     let y = x as i64<> + 5;\n "}, {"sha": "0d202c1b452d5ca73fca2d12e160271d25efa91f", "filename": "src/test/ui/borrowck/borrowck-asm.rs", "status": "removed", "additions": 0, "deletions": 83, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.rs?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,83 +0,0 @@\n-// ignore-s390x\n-// ignore-emscripten\n-// ignore-powerpc\n-// ignore-powerpc64\n-// ignore-powerpc64le\n-// ignore-riscv64\n-// ignore-sparc\n-// ignore-sparc64\n-\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n-#[cfg(any(target_arch = \"x86\",\n-            target_arch = \"x86_64\",\n-            target_arch = \"arm\",\n-            target_arch = \"aarch64\",\n-            target_arch = \"mips\",\n-            target_arch = \"mips64\"))]\n-mod test_cases {\n-    fn is_move() {\n-        let y: &mut isize;\n-        let x = &mut 0isize;\n-        unsafe {\n-            llvm_asm!(\"nop\" : : \"r\"(x));\n-        }\n-        let z = x;  //~ ERROR use of moved value: `x`\n-    }\n-\n-    fn in_is_read() {\n-        let mut x = 3;\n-        let y = &mut x;\n-        unsafe {\n-            llvm_asm!(\"nop\" : : \"r\"(x)); //~ ERROR cannot use\n-        }\n-        let z = y;\n-    }\n-\n-    fn out_is_assign() {\n-        let x = 3;\n-        unsafe {\n-            llvm_asm!(\"nop\" : \"=r\"(x));  //~ ERROR cannot assign twice\n-        }\n-        let mut a = &mut 3;\n-        let b = &*a;\n-        unsafe {\n-            llvm_asm!(\"nop\" : \"=r\"(a));  // OK, Shallow write to `a`\n-        }\n-        let c = b;\n-        let d = *a;\n-    }\n-\n-    fn rw_is_assign() {\n-        let x = 3;\n-        unsafe {\n-            llvm_asm!(\"nop\" : \"+r\"(x));  //~ ERROR cannot assign twice\n-        }\n-    }\n-\n-    fn indirect_is_not_init() {\n-        let x: i32;\n-        unsafe {\n-            llvm_asm!(\"nop\" : \"=*r\"(x)); //~ ERROR use of possibly-uninitialized variable\n-        }\n-    }\n-\n-    fn rw_is_read() {\n-        let mut x = &mut 3;\n-        let y = &*x;\n-        unsafe {\n-            llvm_asm!(\"nop\" : \"+r\"(x));  //~ ERROR cannot assign to `x` because it is borrowed\n-        }\n-        let z = y;\n-    }\n-\n-    fn two_moves() {\n-        let x = &mut 2;\n-        unsafe {\n-            llvm_asm!(\"nop\" : : \"r\"(x), \"r\"(x) );    //~ ERROR use of moved value\n-        }\n-    }\n-}\n-\n-fn main() {}"}, {"sha": "ff5847d826e9954c23836346c285214f0ee60d2c", "filename": "src/test/ui/borrowck/borrowck-asm.stderr", "status": "removed", "additions": 0, "deletions": 81, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.stderr?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,81 +0,0 @@\n-error[E0382]: use of moved value: `x`\n-  --> $DIR/borrowck-asm.rs:26:17\n-   |\n-LL |         let x = &mut 0isize;\n-   |             - move occurs because `x` has type `&mut isize`, which does not implement the `Copy` trait\n-LL |         unsafe {\n-LL |             llvm_asm!(\"nop\" : : \"r\"(x));\n-   |                                     - value moved here\n-LL |         }\n-LL |         let z = x;\n-   |                 ^ value used here after move\n-\n-error[E0503]: cannot use `x` because it was mutably borrowed\n-  --> $DIR/borrowck-asm.rs:33:37\n-   |\n-LL |         let y = &mut x;\n-   |                 ------ borrow of `x` occurs here\n-LL |         unsafe {\n-LL |             llvm_asm!(\"nop\" : : \"r\"(x));\n-   |                                     ^ use of borrowed `x`\n-LL |         }\n-LL |         let z = y;\n-   |                 - borrow later used here\n-\n-error[E0384]: cannot assign twice to immutable variable `x`\n-  --> $DIR/borrowck-asm.rs:41:36\n-   |\n-LL |         let x = 3;\n-   |             -\n-   |             |\n-   |             first assignment to `x`\n-   |             help: consider making this binding mutable: `mut x`\n-LL |         unsafe {\n-LL |             llvm_asm!(\"nop\" : \"=r\"(x));\n-   |                                    ^ cannot assign twice to immutable variable\n-\n-error[E0384]: cannot assign twice to immutable variable `x`\n-  --> $DIR/borrowck-asm.rs:55:36\n-   |\n-LL |         let x = 3;\n-   |             -\n-   |             |\n-   |             first assignment to `x`\n-   |             help: consider making this binding mutable: `mut x`\n-LL |         unsafe {\n-LL |             llvm_asm!(\"nop\" : \"+r\"(x));\n-   |                                    ^ cannot assign twice to immutable variable\n-\n-error[E0381]: use of possibly-uninitialized variable: `x`\n-  --> $DIR/borrowck-asm.rs:62:37\n-   |\n-LL |             llvm_asm!(\"nop\" : \"=*r\"(x));\n-   |                                     ^ use of possibly-uninitialized `x`\n-\n-error[E0506]: cannot assign to `x` because it is borrowed\n-  --> $DIR/borrowck-asm.rs:70:36\n-   |\n-LL |         let y = &*x;\n-   |                 --- borrow of `x` occurs here\n-LL |         unsafe {\n-LL |             llvm_asm!(\"nop\" : \"+r\"(x));\n-   |                                    ^ assignment to borrowed `x` occurs here\n-LL |         }\n-LL |         let z = y;\n-   |                 - borrow later used here\n-\n-error[E0382]: use of moved value: `x`\n-  --> $DIR/borrowck-asm.rs:78:45\n-   |\n-LL |         let x = &mut 2;\n-   |             - move occurs because `x` has type `&mut i32`, which does not implement the `Copy` trait\n-LL |         unsafe {\n-LL |             llvm_asm!(\"nop\" : : \"r\"(x), \"r\"(x) );\n-   |                                     -       ^ value used here after move\n-   |                                     |\n-   |                                     value moved here\n-\n-error: aborting due to 7 previous errors\n-\n-Some errors have detailed explanations: E0381, E0382, E0384, E0503, E0506.\n-For more information about an error, try `rustc --explain E0381`."}, {"sha": "6971170337d41e6689ad17b01602963891026557", "filename": "src/test/ui/consts/miri_unleashed/inline_asm.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -1,24 +1,13 @@\n // compile-flags: -Zunleash-the-miri-inside-of-you\n // only-x86_64\n-#![feature(llvm_asm)]\n #![allow(const_err)]\n-#![allow(deprecated)] // llvm_asm!\n \n use std::arch::asm;\n \n fn main() {}\n \n // Make sure we catch executing inline assembly.\n-static TEST_BAD1: () = {\n-    unsafe { llvm_asm!(\"xor %eax, %eax\" ::: \"eax\"); }\n-    //~^ ERROR could not evaluate static initializer\n-    //~| NOTE inline assembly is not supported\n-    //~| NOTE in this expansion of llvm_asm!\n-    //~| NOTE in this expansion of llvm_asm!\n-};\n-\n-// Make sure we catch executing inline assembly.\n-static TEST_BAD2: () = {\n+static TEST_BAD: () = {\n     unsafe { asm!(\"nop\"); }\n     //~^ ERROR could not evaluate static initializer\n     //~| NOTE inline assembly is not supported"}, {"sha": "595b859cbcebb1454150011d265a460b68341b90", "filename": "src/test/ui/consts/miri_unleashed/inline_asm.stderr", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.stderr?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -1,31 +1,17 @@\n error[E0080]: could not evaluate static initializer\n-  --> $DIR/inline_asm.rs:13:14\n-   |\n-LL |     unsafe { llvm_asm!(\"xor %eax, %eax\" ::: \"eax\"); }\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ inline assembly is not supported\n-   |\n-   = note: this error originates in the macro `llvm_asm` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0080]: could not evaluate static initializer\n-  --> $DIR/inline_asm.rs:22:14\n+  --> $DIR/inline_asm.rs:11:14\n    |\n LL |     unsafe { asm!(\"nop\"); }\n    |              ^^^^^^^^^^^ inline assembly is not supported\n \n warning: skipping const checks\n    |\n help: skipping check that does not even have a feature gate\n-  --> $DIR/inline_asm.rs:13:14\n-   |\n-LL |     unsafe { llvm_asm!(\"xor %eax, %eax\" ::: \"eax\"); }\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: skipping check that does not even have a feature gate\n-  --> $DIR/inline_asm.rs:22:14\n+  --> $DIR/inline_asm.rs:11:14\n    |\n LL |     unsafe { asm!(\"nop\"); }\n    |              ^^^^^^^^^^^\n-   = note: this warning originates in the macro `llvm_asm` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 2 previous errors; 1 warning emitted\n+error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "43af2406f5ee4d7f3ece4557aab21cc8481356f6", "filename": "src/test/ui/error-codes/E0660.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Ferror-codes%2FE0660.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Ferror-codes%2FE0660.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0660.rs?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,10 +0,0 @@\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n-fn main() {\n-    let a;\n-    llvm_asm!(\"nop\" \"nop\");\n-    //~^ ERROR E0660\n-    llvm_asm!(\"nop\" \"nop\" : \"=r\"(a));\n-    //~^ ERROR E0660\n-}"}, {"sha": "d9d2f35251b9bfc6760e88490a5852ed0a00afcf", "filename": "src/test/ui/error-codes/E0660.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Ferror-codes%2FE0660.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Ferror-codes%2FE0660.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0660.stderr?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,15 +0,0 @@\n-error[E0660]: malformed inline assembly\n-  --> $DIR/E0660.rs:6:5\n-   |\n-LL |     llvm_asm!(\"nop\" \"nop\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0660]: malformed inline assembly\n-  --> $DIR/E0660.rs:8:5\n-   |\n-LL |     llvm_asm!(\"nop\" \"nop\" : \"=r\"(a));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0660`."}, {"sha": "854675c36391c770bbb5d65e250e8523985108d3", "filename": "src/test/ui/error-codes/E0661.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Ferror-codes%2FE0661.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Ferror-codes%2FE0661.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0661.rs?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,10 +0,0 @@\n-// ignore-emscripten\n-\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n-fn main() {\n-    let a; //~ ERROR type annotations needed\n-    llvm_asm!(\"nop\" : \"r\"(a));\n-    //~^ ERROR E0661\n-}"}, {"sha": "73745ef97758d398eca7b0ae02df88bb7731f863", "filename": "src/test/ui/error-codes/E0661.stderr", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Ferror-codes%2FE0661.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Ferror-codes%2FE0661.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0661.stderr?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,16 +0,0 @@\n-error[E0661]: output operand constraint lacks '=' or '+'\n-  --> $DIR/E0661.rs:8:23\n-   |\n-LL |     llvm_asm!(\"nop\" : \"r\"(a));\n-   |                       ^^^\n-\n-error[E0282]: type annotations needed\n-  --> $DIR/E0661.rs:7:9\n-   |\n-LL |     let a;\n-   |         ^ consider giving `a` a type\n-\n-error: aborting due to 2 previous errors\n-\n-Some errors have detailed explanations: E0282, E0661.\n-For more information about an error, try `rustc --explain E0282`."}, {"sha": "679a88c3433c3f893e4934c085ecad7eb3d0abc5", "filename": "src/test/ui/error-codes/E0662.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Ferror-codes%2FE0662.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Ferror-codes%2FE0662.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0662.rs?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,11 +0,0 @@\n-// ignore-emscripten\n-\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n-fn main() {\n-    llvm_asm!(\"xor %eax, %eax\"\n-              :\n-              : \"=test\"(\"a\") //~ ERROR E0662\n-             );\n-}"}, {"sha": "f6695d700fbd4ad88198c235e5da4572868186a5", "filename": "src/test/ui/error-codes/E0662.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Ferror-codes%2FE0662.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Ferror-codes%2FE0662.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0662.stderr?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,9 +0,0 @@\n-error[E0662]: input operand constraint contains '='\n-  --> $DIR/E0662.rs:9:17\n-   |\n-LL |               : \"=test\"(\"a\")\n-   |                 ^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0662`."}, {"sha": "b82f1adfb426d1afeaf40dd54fe0e2dd2f15f14f", "filename": "src/test/ui/error-codes/E0663.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Ferror-codes%2FE0663.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Ferror-codes%2FE0663.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0663.rs?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,11 +0,0 @@\n-// ignore-emscripten\n-\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n-fn main() {\n-    llvm_asm!(\"xor %eax, %eax\"\n-              :\n-              : \"+test\"(\"a\") //~ ERROR E0663\n-             );\n-}"}, {"sha": "5f8dede0242f3dd3d3255c9e78d8869de39d6bfa", "filename": "src/test/ui/error-codes/E0663.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Ferror-codes%2FE0663.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Ferror-codes%2FE0663.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0663.stderr?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,9 +0,0 @@\n-error[E0663]: input operand constraint contains '+'\n-  --> $DIR/E0663.rs:9:17\n-   |\n-LL |               : \"+test\"(\"a\")\n-   |                 ^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0663`."}, {"sha": "d2730f04f4547ca2905b32dd4519e0c94ea8659d", "filename": "src/test/ui/error-codes/E0664.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Ferror-codes%2FE0664.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Ferror-codes%2FE0664.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0664.rs?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,12 +0,0 @@\n-// ignore-emscripten\n-\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n-fn main() {\n-    llvm_asm!(\"mov $$0x200, %eax\"\n-              :\n-              :\n-              : \"{eax}\" //~ ERROR E0664\n-             );\n-}"}, {"sha": "5e6836f28e3de584e51ba4a64a7c7b6a4b1d2e81", "filename": "src/test/ui/error-codes/E0664.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Ferror-codes%2FE0664.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Ferror-codes%2FE0664.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0664.stderr?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,9 +0,0 @@\n-error[E0664]: clobber should not be surrounded by braces\n-  --> $DIR/E0664.rs:10:17\n-   |\n-LL |               : \"{eax}\"\n-   |                 ^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0664`."}, {"sha": "556219b98a93ad4450dc65f9ec45c1ff973b8ae3", "filename": "src/test/ui/feature-gates/feature-gate-asm.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.rs?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,10 +0,0 @@\n-// only-x86_64\n-\n-#![allow(deprecated)] // llvm_asm!\n-\n-fn main() {\n-    unsafe {\n-        llvm_asm!(\"\");\n-        //~^ ERROR prefer using the new asm! syntax instead\n-    }\n-}"}, {"sha": "72ba70d0d9149cc6ff0fb67a20806c24a21d324f", "filename": "src/test/ui/feature-gates/feature-gate-asm.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.stderr?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,12 +0,0 @@\n-error[E0658]: use of unstable library feature 'llvm_asm': prefer using the new asm! syntax instead\n-  --> $DIR/feature-gate-asm.rs:7:9\n-   |\n-LL |         llvm_asm!(\"\");\n-   |         ^^^^^^^^\n-   |\n-   = note: see issue #70173 <https://github.com/rust-lang/rust/issues/70173> for more information\n-   = help: add `#![feature(llvm_asm)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "712e3a56fd87f1a5eb0dbd85961629fea9086a1b", "filename": "src/test/ui/feature-gates/feature-gate-asm2.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.rs?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,10 +0,0 @@\n-// only-x86_64\n-\n-#![allow(deprecated)] // llvm_asm!\n-\n-fn main() {\n-    unsafe {\n-        println!(\"{:?}\", llvm_asm!(\"\"));\n-        //~^ ERROR prefer using the new asm! syntax instead\n-    }\n-}"}, {"sha": "0297fec16dd7252348c4bd63814d64a2adf11b3f", "filename": "src/test/ui/feature-gates/feature-gate-asm2.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.stderr?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,12 +0,0 @@\n-error[E0658]: use of unstable library feature 'llvm_asm': prefer using the new asm! syntax instead\n-  --> $DIR/feature-gate-asm2.rs:7:26\n-   |\n-LL |         println!(\"{:?}\", llvm_asm!(\"\"));\n-   |                          ^^^^^^^^\n-   |\n-   = note: see issue #70173 <https://github.com/rust-lang/rust/issues/70173> for more information\n-   = help: add `#![feature(llvm_asm)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "780a6419c5f305ba60b94c10e04ce4e361a696f7", "filename": "src/test/ui/issues/issue-9129.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/src%2Ftest%2Fui%2Fissues%2Fissue-9129.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/src%2Ftest%2Fui%2Fissues%2Fissue-9129.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-9129.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -2,7 +2,6 @@\n #![allow(dead_code)]\n #![allow(non_camel_case_types)]\n #![allow(non_snake_case)]\n-#![allow(deprecated)] // llvm_asm!\n // ignore-pretty unreported\n \n #![feature(box_syntax)]\n@@ -13,7 +12,6 @@ impl bomb for S { fn boom(&self, _: Ident) { } }\n \n pub struct Ident { name: usize }\n \n-// macro_rules! int3 { () => ( unsafe { llvm_asm!( \"int3\" ); } ) }\n macro_rules! int3 { () => ( { } ) }\n \n fn Ident_new() -> Ident {"}, {"sha": "d178c65dff4970e68f803b59f737e516b61e1e19", "filename": "src/test/ui/llvm-asm/asm-src-loc-codegen-units.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fasm-src-loc-codegen-units.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fasm-src-loc-codegen-units.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fasm-src-loc-codegen-units.rs?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,13 +0,0 @@\n-// build-fail\n-// dont-check-compiler-stderr\n-// compile-flags: -C codegen-units=2\n-// ignore-emscripten\n-\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n-fn main() {\n-    unsafe {\n-        llvm_asm!(\"nowayisthisavalidinstruction\"); //~ ERROR instruction\n-    }\n-}"}, {"sha": "4506c12a0e6b9075c3dee3c5fe10949ef181169b", "filename": "src/test/ui/llvm-asm/asm-src-loc.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fasm-src-loc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fasm-src-loc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fasm-src-loc.rs?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,12 +0,0 @@\n-// build-fail\n-// dont-check-compiler-stderr\n-// ignore-emscripten\n-\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n-fn main() {\n-    unsafe {\n-        llvm_asm!(\"nowayisthisavalidinstruction\"); //~ ERROR instruction\n-    }\n-}"}, {"sha": "6a2ce111cb313e7df2f82d07a12df4723039b85e", "filename": "src/test/ui/llvm-asm/inline-asm-bad-constraint.rs", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Finline-asm-bad-constraint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Finline-asm-bad-constraint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Finline-asm-bad-constraint.rs?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,41 +0,0 @@\n-// Test that the compiler will catch invalid inline assembly constraints.\n-\n-// build-fail\n-// ignore-emscripten\n-\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n-extern \"C\" {\n-    fn foo(a: usize);\n-}\n-\n-fn main() {\n-    bad_register_constraint();\n-    bad_input();\n-    wrong_size_output();\n-}\n-\n-// Issue #54130\n-fn bad_register_constraint() {\n-    let rax: u64;\n-    unsafe {\n-        llvm_asm!(\"\" :\"={rax\"(rax)) //~ ERROR E0668\n-    };\n-    println!(\"Accumulator is: {}\", rax);\n-}\n-\n-// Issue #54376\n-fn bad_input() {\n-    unsafe {\n-        llvm_asm!(\"callq $0\" : : \"0\"(foo)) //~ ERROR E0668\n-    };\n-}\n-\n-fn wrong_size_output() {\n-    let rax: u64 = 0;\n-    unsafe {\n-        llvm_asm!(\"addb $1, $0\" : \"={rax}\"((0i32, rax))); //~ ERROR E0668\n-    }\n-    println!(\"rax: {}\", rax);\n-}"}, {"sha": "a624829f149c8d4c3677cfdb100a1a27032a0d25", "filename": "src/test/ui/llvm-asm/inline-asm-bad-constraint.stderr", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Finline-asm-bad-constraint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Finline-asm-bad-constraint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Finline-asm-bad-constraint.stderr?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,27 +0,0 @@\n-error[E0668]: malformed inline assembly\n-  --> $DIR/inline-asm-bad-constraint.rs:23:9\n-   |\n-LL |         llvm_asm!(\"\" :\"={rax\"(rax))\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this error originates in the macro `llvm_asm` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0668]: malformed inline assembly\n-  --> $DIR/inline-asm-bad-constraint.rs:31:9\n-   |\n-LL |         llvm_asm!(\"callq $0\" : : \"0\"(foo))\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this error originates in the macro `llvm_asm` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0668]: malformed inline assembly\n-  --> $DIR/inline-asm-bad-constraint.rs:38:9\n-   |\n-LL |         llvm_asm!(\"addb $1, $0\" : \"={rax}\"((0i32, rax)));\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this error originates in the macro `llvm_asm` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0668`."}, {"sha": "1746c487b1e32e7d1a61340ec18e9f0351d92828", "filename": "src/test/ui/llvm-asm/inline-asm-bad-operand.rs", "status": "removed", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Finline-asm-bad-operand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Finline-asm-bad-operand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Finline-asm-bad-operand.rs?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,60 +0,0 @@\n-// Test that the compiler will catch passing invalid values to inline assembly\n-// operands.\n-\n-// build-fail\n-// ignore-emscripten\n-\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n-#[repr(C)]\n-struct MyPtr(usize);\n-\n-fn main() {\n-    issue_37433();\n-    issue_37437();\n-    issue_40187();\n-    issue_54067();\n-    multiple_errors();\n-}\n-\n-fn issue_37433() {\n-    unsafe {\n-        llvm_asm!(\"\" :: \"r\"(\"\")); //~ ERROR E0669\n-    }\n-\n-    unsafe {\n-        let target = MyPtr(0);\n-        llvm_asm!(\"ret\" : : \"{rdi}\"(target)); //~ ERROR E0669\n-    }\n-}\n-\n-fn issue_37437() {\n-    let hello: &str = \"hello\";\n-    // this should fail...\n-    unsafe { llvm_asm!(\"\" :: \"i\"(hello)) }; //~ ERROR E0669\n-    // but this should succeed.\n-    unsafe { llvm_asm!(\"\" :: \"r\"(hello.as_ptr())) };\n-}\n-\n-fn issue_40187() {\n-    let arr: [u8; 1] = [0; 1];\n-    unsafe {\n-        llvm_asm!(\"movups $1, %xmm0\"::\"m\"(arr)); //~ ERROR E0669\n-    }\n-}\n-\n-fn issue_54067() {\n-    let addr: Option<u32> = Some(123);\n-    unsafe {\n-        llvm_asm!(\"mov sp, $0\"::\"r\"(addr)); //~ ERROR E0669\n-    }\n-}\n-\n-fn multiple_errors() {\n-    let addr: (u32, u32) = (1, 2);\n-    unsafe {\n-        llvm_asm!(\"mov sp, $0\"::\"r\"(addr), //~ ERROR E0669\n-                                \"r\"(\"hello e0669\")); //~ ERROR E0669\n-    }\n-}"}, {"sha": "8bb8a7ae82ebd13ed7c74bbe800c6f010588d977", "filename": "src/test/ui/llvm-asm/inline-asm-bad-operand.stderr", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Finline-asm-bad-operand.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Finline-asm-bad-operand.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Finline-asm-bad-operand.stderr?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,45 +0,0 @@\n-error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/inline-asm-bad-operand.rs:23:29\n-   |\n-LL |         llvm_asm!(\"\" :: \"r\"(\"\"));\n-   |                             ^^\n-\n-error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/inline-asm-bad-operand.rs:28:37\n-   |\n-LL |         llvm_asm!(\"ret\" : : \"{rdi}\"(target));\n-   |                                     ^^^^^^\n-\n-error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/inline-asm-bad-operand.rs:35:34\n-   |\n-LL |     unsafe { llvm_asm!(\"\" :: \"i\"(hello)) };\n-   |                                  ^^^^^\n-\n-error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/inline-asm-bad-operand.rs:43:43\n-   |\n-LL |         llvm_asm!(\"movups $1, %xmm0\"::\"m\"(arr));\n-   |                                           ^^^\n-\n-error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/inline-asm-bad-operand.rs:50:37\n-   |\n-LL |         llvm_asm!(\"mov sp, $0\"::\"r\"(addr));\n-   |                                     ^^^^\n-\n-error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/inline-asm-bad-operand.rs:57:37\n-   |\n-LL |         llvm_asm!(\"mov sp, $0\"::\"r\"(addr),\n-   |                                     ^^^^\n-\n-error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/inline-asm-bad-operand.rs:58:37\n-   |\n-LL | ...                   \"r\"(\"hello e0669\"));\n-   |                           ^^^^^^^^^^^^^\n-\n-error: aborting due to 7 previous errors\n-\n-For more information about this error, try `rustc --explain E0669`."}, {"sha": "46e5a2a80925faa6e4864ab4098330761d5f0aac", "filename": "src/test/ui/llvm-asm/issue-14936.rs", "status": "removed", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-14936.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-14936.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-14936.rs?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,49 +0,0 @@\n-// build-pass\n-#![allow(unused_macros)]\n-#![allow(dead_code)]\n-#![allow(deprecated)] // llvm_asm!\n-#![feature(llvm_asm)]\n-\n-type History = Vec<&'static str>;\n-\n-fn wrap<A>(x:A, which: &'static str, history: &mut History) -> A {\n-    history.push(which);\n-    x\n-}\n-\n-macro_rules! demo {\n-    ( $output_constraint:tt ) => {\n-        {\n-            let mut x: isize = 0;\n-            let y: isize = 1;\n-\n-            let mut history: History = vec![];\n-            unsafe {\n-                llvm_asm!(\"mov ($1), $0\"\n-                          : $output_constraint (*wrap(&mut x, \"out\", &mut history))\n-                          : \"r\"(&wrap(y, \"in\", &mut history))\n-                          :: \"volatile\");\n-            }\n-            assert_eq!((x,y), (1,1));\n-            let b: &[_] = &[\"out\", \"in\"];\n-            assert_eq!(history, b);\n-        }\n-    }\n-}\n-\n-#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n-fn main() {\n-    fn out_write_only_expr_then_in_expr() {\n-        demo!(\"=r\")\n-    }\n-\n-    fn out_read_write_expr_then_in_expr() {\n-        demo!(\"+r\")\n-    }\n-\n-    out_write_only_expr_then_in_expr();\n-    out_read_write_expr_then_in_expr();\n-}\n-\n-#[cfg(all(not(target_arch = \"x86\"), not(target_arch = \"x86_64\")))]\n-pub fn main() {}"}, {"sha": "d640828c16dce793b414115b146bb0f4ca0e6a2f", "filename": "src/test/ui/llvm-asm/issue-23458.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-23458.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-23458.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-23458.rs?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,12 +0,0 @@\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-// compile-flags: -Ccodegen-units=1\n-// build-fail\n-// only-x86_64\n-\n-fn main() {\n-    unsafe {\n-        llvm_asm!(\"int $3\"); //~ ERROR too few operands for instruction\n-                             //~| ERROR invalid operand in inline asm\n-    }\n-}"}, {"sha": "69e458f7ca0989004992625baec017b483fb175c", "filename": "src/test/ui/llvm-asm/issue-23458.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-23458.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-23458.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-23458.stderr?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,20 +0,0 @@\n-error: invalid operand in inline asm: 'int $3'\n-  --> $DIR/issue-23458.rs:9:9\n-   |\n-LL |         llvm_asm!(\"int $3\");\n-   |         ^\n-\n-error: too few operands for instruction\n-  --> $DIR/issue-23458.rs:9:9\n-   |\n-LL |         llvm_asm!(\"int $3\");\n-   |         ^\n-   |\n-note: instantiated into assembly here\n-  --> <inline asm>:1:2\n-   |\n-LL |     int \n-   |     ^\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "8ebf0cfe217f631ffd891c454c9032204de99550", "filename": "src/test/ui/llvm-asm/issue-33264.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-33264.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-33264.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-33264.rs?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,30 +0,0 @@\n-// build-pass\n-// only-x86_64\n-\n-#![allow(dead_code, non_upper_case_globals)]\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n-#[repr(C)]\n-pub struct D32x4(f32,f32,f32,f32);\n-\n-impl D32x4 {\n-    fn add(&self, vec: Self) -> Self {\n-        unsafe {\n-            let ret: Self;\n-            llvm_asm!(\"\n-                      movaps $1, %xmm1\n-                      movaps $2, %xmm2\n-                      addps %xmm1, %xmm2\n-                      movaps $xmm1, $0\n-                      \"\n-                      : \"=r\"(ret)\n-                      : \"1\"(self), \"2\"(vec)\n-                      : \"xmm1\", \"xmm2\"\n-                      );\n-            ret\n-        }\n-    }\n-}\n-\n-fn main() { }"}, {"sha": "acc2f3e9f5fe1b5cb8341067430007f58adf060b", "filename": "src/test/ui/llvm-asm/issue-37366.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-37366.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-37366.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-37366.rs?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,16 +0,0 @@\n-// check-pass\n-// ignore-emscripten\n-\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n-macro_rules! interrupt_handler {\n-    () => {\n-        unsafe fn _interrupt_handler() {\n-            llvm_asm!(\"pop  eax\" :::: \"intel\");\n-        }\n-    }\n-}\n-interrupt_handler!{}\n-\n-fn main() {}"}, {"sha": "1c362e8aba058e621b081270e8ee209fe84dd20f", "filename": "src/test/ui/llvm-asm/issue-37433.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-37433.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-37433.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-37433.rs?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,12 +0,0 @@\n-// build-fail\n-// ignore-emscripten no llvm_asm! support\n-\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n-fn main() {\n-    unsafe {\n-        llvm_asm!(\"\" :: \"r\"(\"\"));\n-        //~^ ERROR: invalid value for constraint in inline assembly\n-    }\n-}"}, {"sha": "44a8eb32b7ccbf6f301eb03137ad20e62c43b97f", "filename": "src/test/ui/llvm-asm/issue-37433.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-37433.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-37433.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-37433.stderr?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,9 +0,0 @@\n-error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/issue-37433.rs:9:29\n-   |\n-LL |         llvm_asm!(\"\" :: \"r\"(\"\"));\n-   |                             ^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0669`."}, {"sha": "706b714766150e24dbfaac110eeb33d5c7f20b0d", "filename": "src/test/ui/llvm-asm/issue-51431.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-51431.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-51431.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-51431.rs?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,12 +0,0 @@\n-// build-fail\n-// ignore-emscripten no llvm_asm! support\n-\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n-fn main() {\n-    unsafe {\n-        llvm_asm! {\"mov $0,$1\"::\"0\"(\"bx\"),\"1\"(0x00)}\n-        //~^ ERROR: invalid value for constraint in inline assembly\n-    }\n-}"}, {"sha": "35c8c1b66f6a7e7da0baddd3d15ec5263852b7b0", "filename": "src/test/ui/llvm-asm/issue-51431.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-51431.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-51431.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-51431.stderr?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,9 +0,0 @@\n-error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/issue-51431.rs:9:37\n-   |\n-LL |         llvm_asm! {\"mov $0,$1\"::\"0\"(\"bx\"),\"1\"(0x00)}\n-   |                                     ^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0669`."}, {"sha": "d9fe7cada278f23c3a281556e95c821e08df2c6d", "filename": "src/test/ui/llvm-asm/issue-53787-inline-assembler-macro.rs", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-53787-inline-assembler-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-53787-inline-assembler-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-53787-inline-assembler-macro.rs?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,27 +0,0 @@\n-// Regression test for Issue #53787: Fix ICE when creating a label in inline assembler with macros.\n-\n-// build-fail\n-// ignore-emscripten\n-\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n-macro_rules! fake_jump {\n-    ($id:expr) => {\n-        unsafe {\n-            llvm_asm!(\n-            \"\n-            jmp $0\n-            lea eax, [ebx]\n-            xor eax, 0xDEADBEEF\n-            retn\n-            $0:\n-            \"::\"0\"($id)::\"volatile\", \"intel\");\n-        }\n-    };\n-}\n-\n-fn main() {\n-    fake_jump!(\"FirstFunc\"); //~ ERROR invalid value for constraint in inline assembly\n-    println!(\"Hello, world!\");\n-}"}, {"sha": "fd755e30d586837e4f252efbcf29ac6e1b925062", "filename": "src/test/ui/llvm-asm/issue-53787-inline-assembler-macro.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-53787-inline-assembler-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-53787-inline-assembler-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-53787-inline-assembler-macro.stderr?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,9 +0,0 @@\n-error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/issue-53787-inline-assembler-macro.rs:25:16\n-   |\n-LL |     fake_jump!(\"FirstFunc\");\n-   |                ^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0669`."}, {"sha": "6e931b9003a17595deee5a16707179981a345280", "filename": "src/test/ui/llvm-asm/issue-54067.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-54067.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-54067.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-54067.rs?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,13 +0,0 @@\n-// check-pass\n-// ignore-emscripten no llvm_asm! support\n-\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n-pub fn boot(addr: Option<u32>) {\n-    unsafe {\n-        llvm_asm!(\"mov sp, $0\"::\"r\" (addr));\n-    }\n-}\n-\n-fn main() {}"}, {"sha": "38b5f1a1862878a79c192d6100bd06f1dbf98553", "filename": "src/test/ui/llvm-asm/issue-62046.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-62046.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-62046.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-62046.rs?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,12 +0,0 @@\n-// build-fail\n-// ignore-emscripten no asm! support\n-\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n-fn main() {\n-    unsafe {\n-        llvm_asm!(\"nop\" : \"+r\"(\"r15\"));\n-        //~^ malformed inline assembly\n-    }\n-}"}, {"sha": "ae271afe2625efc9b0799dd6daa03c9607e47257", "filename": "src/test/ui/llvm-asm/issue-62046.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-62046.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-62046.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-62046.stderr?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,11 +0,0 @@\n-error[E0668]: malformed inline assembly\n-  --> $DIR/issue-62046.rs:9:9\n-   |\n-LL |         llvm_asm!(\"nop\" : \"+r\"(\"r15\"));\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this error originates in the macro `llvm_asm` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0668`."}, {"sha": "ea1b80cc9b06b69370de9792841abde0b15cc3ff", "filename": "src/test/ui/llvm-asm/issue-69092.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-69092.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-69092.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-69092.rs?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,13 +0,0 @@\n-// build-fail\n-// ignore-emscripten no asm! support\n-// The error message differs slightly between LLVM versions\n-// min-llvm-version: 13.0\n-// Regression test for #69092\n-\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n-fn main() {\n-    unsafe { llvm_asm!(\".ascii \\\"Xen\\0\\\"\"); }\n-    //~^ ERROR: expected string\n-}"}, {"sha": "28c5fbbca3c6045dfc27318fa1aa8af4db456e28", "filename": "src/test/ui/llvm-asm/issue-69092.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-69092.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-69092.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-69092.stderr?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,14 +0,0 @@\n-error: expected string\n-  --> $DIR/issue-69092.rs:11:14\n-   |\n-LL |     unsafe { llvm_asm!(\".ascii \\\"Xen\\0\\\"\"); }\n-   |              ^\n-   |\n-note: instantiated into assembly here\n-  --> <inline asm>:1:9\n-   |\n-LL |     .ascii \"Xen\n-   |            ^\n-\n-error: aborting due to previous error\n-"}, {"sha": "c15009f15e68c0b6b40a93d065271462ab5782dd", "filename": "src/test/ui/llvm-asm/llvm-asm-bad-clobber.rs", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-bad-clobber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-bad-clobber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-bad-clobber.rs?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,27 +0,0 @@\n-// ignore-android\n-// ignore-arm\n-// ignore-aarch64\n-// ignore-s390x\n-// ignore-emscripten\n-// ignore-powerpc\n-// ignore-powerpc64\n-// ignore-powerpc64le\n-// ignore-riscv64\n-// ignore-sparc\n-// ignore-sparc64\n-// ignore-mips\n-// ignore-mips64\n-\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n-#[cfg(any(target_arch = \"x86\",\n-          target_arch = \"x86_64\"))]\n-\n-pub fn main() {\n-    unsafe {\n-        // clobber formatted as register input/output\n-        llvm_asm!(\"xor %eax, %eax\" : : : \"{eax}\");\n-        //~^ ERROR clobber should not be surrounded by braces\n-    }\n-}"}, {"sha": "bb72a142853161e1ac3cb83947c534cff08fdfa6", "filename": "src/test/ui/llvm-asm/llvm-asm-bad-clobber.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-bad-clobber.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-bad-clobber.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-bad-clobber.stderr?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,9 +0,0 @@\n-error[E0664]: clobber should not be surrounded by braces\n-  --> $DIR/llvm-asm-bad-clobber.rs:24:42\n-   |\n-LL |         llvm_asm!(\"xor %eax, %eax\" : : : \"{eax}\");\n-   |                                          ^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0664`."}, {"sha": "722eb07a270022f2cc98f51a269bed8a53861752", "filename": "src/test/ui/llvm-asm/llvm-asm-concat-src.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-concat-src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-concat-src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-concat-src.rs?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,10 +0,0 @@\n-// run-pass\n-// pretty-expanded FIXME #23616\n-// ignore-emscripten no asm\n-\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n-pub fn main() {\n-    unsafe { llvm_asm!(concat!(\"\", \"\")) };\n-}"}, {"sha": "1bccb0b73a89dad8c8ca8d098d157034b982fa7d", "filename": "src/test/ui/llvm-asm/llvm-asm-in-bad-modifier.rs", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-in-bad-modifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-in-bad-modifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-in-bad-modifier.rs?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,36 +0,0 @@\n-// ignore-s390x\n-// ignore-emscripten\n-// ignore-powerpc\n-// ignore-powerpc64\n-// ignore-powerpc64le\n-// ignore-riscv64\n-// ignore-sparc\n-// ignore-sparc64\n-// ignore-mips\n-// ignore-mips64\n-\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n-fn foo(x: isize) { println!(\"{}\", x); }\n-\n-#[cfg(any(target_arch = \"x86\",\n-          target_arch = \"x86_64\",\n-          target_arch = \"arm\",\n-          target_arch = \"aarch64\"))]\n-pub fn main() {\n-    let x: isize;\n-    let y: isize;\n-    unsafe {\n-        llvm_asm!(\"mov $1, $0\" : \"=r\"(x) : \"=r\"(5)); //~ ERROR operand constraint contains '='\n-        llvm_asm!(\"mov $1, $0\" : \"=r\"(y) : \"+r\"(5)); //~ ERROR operand constraint contains '+'\n-    }\n-    foo(x);\n-    foo(y);\n-}\n-\n-#[cfg(not(any(target_arch = \"x86\",\n-              target_arch = \"x86_64\",\n-              target_arch = \"arm\",\n-              target_arch = \"aarch64\")))]\n-pub fn main() {}"}, {"sha": "f6c618e4c1352e8fa4a7f85a0ccb8a2b23e6ef58", "filename": "src/test/ui/llvm-asm/llvm-asm-in-bad-modifier.stderr", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-in-bad-modifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-in-bad-modifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-in-bad-modifier.stderr?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,16 +0,0 @@\n-error[E0662]: input operand constraint contains '='\n-  --> $DIR/llvm-asm-in-bad-modifier.rs:25:44\n-   |\n-LL |         llvm_asm!(\"mov $1, $0\" : \"=r\"(x) : \"=r\"(5));\n-   |                                            ^^^^\n-\n-error[E0663]: input operand constraint contains '+'\n-  --> $DIR/llvm-asm-in-bad-modifier.rs:26:44\n-   |\n-LL |         llvm_asm!(\"mov $1, $0\" : \"=r\"(y) : \"+r\"(5));\n-   |                                            ^^^^\n-\n-error: aborting due to 2 previous errors\n-\n-Some errors have detailed explanations: E0662, E0663.\n-For more information about an error, try `rustc --explain E0662`."}, {"sha": "f7b0fe5566cb7665f66ffdd7014704391b6c1ea4", "filename": "src/test/ui/llvm-asm/llvm-asm-in-moved.rs", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-in-moved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-in-moved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-in-moved.rs?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,32 +0,0 @@\n-// run-pass\n-\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-#![allow(dead_code)]\n-\n-use std::cell::Cell;\n-\n-#[repr(C)]\n-struct NoisyDrop<'a>(&'a Cell<&'static str>);\n-impl<'a> Drop for NoisyDrop<'a> {\n-    fn drop(&mut self) {\n-        self.0.set(\"destroyed\");\n-    }\n-}\n-\n-#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n-fn main() {\n-    let status = Cell::new(\"alive\");\n-    {\n-        let _y: Box<NoisyDrop>;\n-        let x = Box::new(NoisyDrop(&status));\n-        unsafe {\n-            llvm_asm!(\"mov $1, $0\" : \"=r\"(_y) : \"r\"(x));\n-        }\n-        assert_eq!(status.get(), \"alive\");\n-    }\n-    assert_eq!(status.get(), \"destroyed\");\n-}\n-\n-#[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n-fn main() {}"}, {"sha": "2429b512e86d902531bcc2561c62b143c7c86f4e", "filename": "src/test/ui/llvm-asm/llvm-asm-in-out-operand.rs", "status": "removed", "additions": 0, "deletions": 57, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-in-out-operand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-in-out-operand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-in-out-operand.rs?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,57 +0,0 @@\n-// run-pass\n-\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n-#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n-unsafe fn next_power_of_2(n: u32) -> u32 {\n-    let mut tmp = n;\n-    llvm_asm!(\"dec $0\" : \"+rm\"(tmp) :: \"cc\");\n-    let mut shift = 1_u32;\n-    while shift <= 16 {\n-        llvm_asm!(\n-            \"shr %cl, $2\n-            or $2, $0\n-            shl $$1, $1\"\n-            : \"+&rm\"(tmp), \"+{ecx}\"(shift) : \"r\"(tmp) : \"cc\"\n-        );\n-    }\n-    llvm_asm!(\"inc $0\" : \"+rm\"(tmp) :: \"cc\");\n-    return tmp;\n-}\n-\n-#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n-pub fn main() {\n-    unsafe {\n-        assert_eq!(64, next_power_of_2(37));\n-        assert_eq!(2147483648, next_power_of_2(2147483647));\n-    }\n-\n-    let mut y: isize = 5;\n-    let x: isize;\n-    unsafe {\n-        // Treat the output as initialization.\n-        llvm_asm!(\n-            \"shl $2, $1\n-            add $3, $1\n-            mov $1, $0\"\n-            : \"=r\"(x), \"+r\"(y) : \"i\"(3_usize), \"ir\"(7_usize) : \"cc\"\n-        );\n-    }\n-    assert_eq!(x, 47);\n-    assert_eq!(y, 47);\n-\n-    let mut x = x + 1;\n-    assert_eq!(x, 48);\n-\n-    unsafe {\n-        // Assignment to mutable.\n-        // Early clobber \"&\":\n-        // Forbids the use of a single register by both operands.\n-        llvm_asm!(\"shr $$2, $1; add $1, $0\" : \"+&r\"(x) : \"r\"(x) : \"cc\");\n-    }\n-    assert_eq!(x, 60);\n-}\n-\n-#[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n-pub fn main() {}"}, {"sha": "441c62b04b5615694ada94c48e88bc4e51549ef2", "filename": "src/test/ui/llvm-asm/llvm-asm-indirect-memory.rs", "status": "removed", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-indirect-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-indirect-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-indirect-memory.rs?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,44 +0,0 @@\n-// run-pass\n-\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n-#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n-fn read(ptr: &u32) -> u32 {\n-    let out: u32;\n-    unsafe {\n-        llvm_asm!(\"mov $1, $0\" : \"=r\" (out) : \"*m\" (ptr));\n-    }\n-    out\n-}\n-\n-#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n-fn write(ptr: &mut u32, val: u32) {\n-    unsafe {\n-        llvm_asm!(\"mov $1, $0\" : \"=*m\" (ptr) : \"r\" (val));\n-    }\n-}\n-\n-#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n-fn replace(ptr: &mut u32, val: u32) -> u32 {\n-    let out: u32;\n-    unsafe {\n-        llvm_asm!(\"mov $0, $1; mov $2, $0\" : \"+*m\" (ptr), \"=&r\" (out) : \"r\" (val));\n-    }\n-    out\n-}\n-\n-#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n-pub fn main() {\n-    let a = 1;\n-    assert_eq!(read(&a), 1);\n-    let mut b = 2;\n-    write(&mut b, 3);\n-    assert_eq!(b, 3);\n-    let mut c = 4;\n-    assert_eq!(replace(&mut c, 5), 4);\n-    assert_eq!(c, 5);\n-}\n-\n-#[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n-pub fn main() {}"}, {"sha": "ecd0c2f9734f15b9bcd722bd1ef1737180d03d01", "filename": "src/test/ui/llvm-asm/llvm-asm-literal-escaping.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-literal-escaping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-literal-escaping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-literal-escaping.rs?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,13 +0,0 @@\n-// build-pass\n-// only-x86_64\n-\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n-fn main() {\n-    unsafe {\n-        // \"nop\" :: \"r\"(x) : \"eax\" : \"volatile\"\n-        let x = 10;\n-        llvm_asm!(\"\\x6Eop\" :: \"\\x72\"(x) : \"\\x65ax\" : \"\\x76olatile\");\n-    }\n-}"}, {"sha": "04f0972ed4b2873624f5039bebd2ba26dd885fc3", "filename": "src/test/ui/llvm-asm/llvm-asm-misplaced-option.rs", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-misplaced-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-misplaced-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-misplaced-option.rs?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,37 +0,0 @@\n-// check-pass\n-// ignore-android\n-// ignore-arm\n-// ignore-aarch64\n-// ignore-s390x\n-// ignore-emscripten\n-// ignore-powerpc\n-// ignore-powerpc64\n-// ignore-powerpc64le\n-// ignore-riscv64\n-// ignore-sparc\n-// ignore-sparc64\n-// ignore-mips\n-// ignore-mips64\n-\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n-#[cfg(any(target_arch = \"x86\",\n-          target_arch = \"x86_64\"))]\n-fn main() {\n-    // assignment not dead\n-    let mut x: isize = 0;\n-    unsafe {\n-        // extra colon\n-        llvm_asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5_usize), \"0\"(x) : : \"cc\");\n-        //~^ WARNING unrecognized option\n-    }\n-    assert_eq!(x, 5);\n-\n-    unsafe {\n-        // comma in place of a colon\n-        llvm_asm!(\"add $2, $1; mov $1, $0\" : \"=r\"(x) : \"r\"(x), \"r\"(8_usize) : \"cc\", \"volatile\");\n-        //~^ WARNING expected a clobber, found an option\n-    }\n-    assert_eq!(x, 13);\n-}"}, {"sha": "d1250d99b8f33b7e9dac78a1f217cdf4b8df62d1", "filename": "src/test/ui/llvm-asm/llvm-asm-misplaced-option.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-misplaced-option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-misplaced-option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-misplaced-option.stderr?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,14 +0,0 @@\n-warning: unrecognized option\n-  --> $DIR/llvm-asm-misplaced-option.rs:26:69\n-   |\n-LL |         llvm_asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5_usize), \"0\"(x) : : \"cc\");\n-   |                                                                     ^^^^\n-\n-warning: expected a clobber, found an option\n-  --> $DIR/llvm-asm-misplaced-option.rs:33:85\n-   |\n-LL |         llvm_asm!(\"add $2, $1; mov $1, $0\" : \"=r\"(x) : \"r\"(x), \"r\"(8_usize) : \"cc\", \"volatile\");\n-   |                                                                                     ^^^^^^^^^^\n-\n-warning: 2 warnings emitted\n-"}, {"sha": "7f51b50f2586f096574014cc9a9beece033d0622", "filename": "src/test/ui/llvm-asm/llvm-asm-out-assign-imm.rs", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-assign-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-assign-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-assign-imm.rs?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,36 +0,0 @@\n-// ignore-s390x\n-// ignore-emscripten\n-// ignore-powerpc\n-// ignore-powerpc64\n-// ignore-powerpc64le\n-// ignore-riscv64\n-// ignore-sparc\n-// ignore-sparc64\n-// ignore-mips\n-// ignore-mips64\n-\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n-fn foo(x: isize) { println!(\"{}\", x); }\n-\n-#[cfg(any(target_arch = \"x86\",\n-          target_arch = \"x86_64\",\n-          target_arch = \"arm\",\n-          target_arch = \"aarch64\"))]\n-pub fn main() {\n-    let x: isize;\n-    x = 1;\n-    foo(x);\n-    unsafe {\n-        llvm_asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5));\n-        //~^ ERROR cannot assign twice to immutable variable `x`\n-    }\n-    foo(x);\n-}\n-\n-#[cfg(not(any(target_arch = \"x86\",\n-              target_arch = \"x86_64\",\n-              target_arch = \"arm\",\n-              target_arch = \"aarch64\")))]\n-pub fn main() {}"}, {"sha": "390c032460127fa82227f7b084c318eb54a79fe0", "filename": "src/test/ui/llvm-asm/llvm-asm-out-assign-imm.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-assign-imm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-assign-imm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-assign-imm.stderr?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,14 +0,0 @@\n-error[E0384]: cannot assign twice to immutable variable `x`\n-  --> $DIR/llvm-asm-out-assign-imm.rs:26:39\n-   |\n-LL |     let x: isize;\n-   |         - help: consider making this binding mutable: `mut x`\n-LL |     x = 1;\n-   |     ----- first assignment to `x`\n-...\n-LL |         llvm_asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5));\n-   |                                       ^ cannot assign twice to immutable variable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0384`."}, {"sha": "c5f4a9a198e51757d9afdf7a081ddaf6ee31bac3", "filename": "src/test/ui/llvm-asm/llvm-asm-out-assign.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-assign.rs?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,26 +0,0 @@\n-// run-pass\n-\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!s\n-\n-#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n-pub fn main() {\n-    let x: isize;\n-    unsafe {\n-        // Treat the output as initialization.\n-        llvm_asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5_usize));\n-    }\n-    assert_eq!(x, 5);\n-\n-    let mut x = x + 1;\n-    assert_eq!(x, 6);\n-\n-    unsafe {\n-        // Assignment to mutable.\n-        llvm_asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(x + 7));\n-    }\n-    assert_eq!(x, 13);\n-}\n-\n-#[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n-pub fn main() {}"}, {"sha": "c74d156cf3eaea43df7e43d4ce0e407f93aae17d", "filename": "src/test/ui/llvm-asm/llvm-asm-out-no-modifier.rs", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-no-modifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-no-modifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-no-modifier.rs?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,33 +0,0 @@\n-// ignore-s390x\n-// ignore-emscripten\n-// ignore-powerpc\n-// ignore-powerpc64\n-// ignore-powerpc64le\n-// ignore-riscv64\n-// ignore-sparc\n-// ignore-sparc64\n-// ignore-mips\n-// ignore-mips64\n-\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n-fn foo(x: isize) { println!(\"{}\", x); }\n-\n-#[cfg(any(target_arch = \"x86\",\n-          target_arch = \"x86_64\",\n-          target_arch = \"arm\",\n-          target_arch = \"aarch64\"))]\n-pub fn main() {\n-    let x: isize;\n-    unsafe {\n-        llvm_asm!(\"mov $1, $0\" : \"r\"(x) : \"r\"(5)); //~ ERROR output operand constraint lacks '='\n-    }\n-    foo(x);\n-}\n-\n-#[cfg(not(any(target_arch = \"x86\",\n-              target_arch = \"x86_64\",\n-              target_arch = \"arm\",\n-              target_arch = \"aarch64\")))]\n-pub fn main() {}"}, {"sha": "f426170ad87385cf384fe3c65966348f6bf59147", "filename": "src/test/ui/llvm-asm/llvm-asm-out-no-modifier.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-no-modifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-no-modifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-no-modifier.stderr?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,9 +0,0 @@\n-error[E0661]: output operand constraint lacks '=' or '+'\n-  --> $DIR/llvm-asm-out-no-modifier.rs:24:34\n-   |\n-LL |         llvm_asm!(\"mov $1, $0\" : \"r\"(x) : \"r\"(5));\n-   |                                  ^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0661`."}, {"sha": "161add7e56a763deb9c127398b48968359f355c5", "filename": "src/test/ui/llvm-asm/llvm-asm-out-read-uninit.rs", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-read-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-read-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-read-uninit.rs?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,34 +0,0 @@\n-// ignore-s390x\n-// ignore-emscripten\n-// ignore-powerpc\n-// ignore-powerpc64\n-// ignore-powerpc64le\n-// ignore-riscv64\n-// ignore-sparc\n-// ignore-sparc64\n-// ignore-mips\n-// ignore-mips64\n-\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n-fn foo(x: isize) { println!(\"{}\", x); }\n-\n-#[cfg(any(target_arch = \"x86\",\n-          target_arch = \"x86_64\",\n-          target_arch = \"arm\",\n-          target_arch = \"aarch64\"))]\n-pub fn main() {\n-    let x: isize;\n-    unsafe {\n-        llvm_asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(x));\n-        //~^ ERROR use of possibly-uninitialized variable: `x`\n-    }\n-    foo(x);\n-}\n-\n-#[cfg(not(any(target_arch = \"x86\",\n-              target_arch = \"x86_64\",\n-              target_arch = \"arm\",\n-              target_arch = \"aarch64\")))]\n-pub fn main() {}"}, {"sha": "7e57dc45aad49a907d5644c668a4b86ae786c235", "filename": "src/test/ui/llvm-asm/llvm-asm-out-read-uninit.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-read-uninit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-read-uninit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-read-uninit.stderr?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,9 +0,0 @@\n-error[E0381]: use of possibly-uninitialized variable: `x`\n-  --> $DIR/llvm-asm-out-read-uninit.rs:24:48\n-   |\n-LL |         llvm_asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(x));\n-   |                                                ^ use of possibly-uninitialized `x`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0381`."}, {"sha": "cdd0b943b71e6f271d88684adcaa4b440a97fd9b", "filename": "src/test/ui/llvm-asm/llvm-asm-parse-errors.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-parse-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-parse-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-parse-errors.rs?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,16 +0,0 @@\n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n-fn main() {\n-    llvm_asm!(); //~ ERROR requires a string literal as an argument\n-    llvm_asm!(\"nop\" : struct); //~ ERROR expected string literal\n-    llvm_asm!(\"mov %eax, $$0x2\" : struct); //~ ERROR expected string literal\n-    llvm_asm!(\"mov %eax, $$0x2\" : \"={eax}\" struct); //~ ERROR expected `(`\n-    llvm_asm!(\"mov %eax, $$0x2\" : \"={eax}\"(struct)); //~ ERROR expected expression\n-    llvm_asm!(\"in %dx, %al\" : \"={al}\"(result) : struct); //~ ERROR expected string literal\n-    llvm_asm!(\"in %dx, %al\" : \"={al}\"(result) : \"{dx}\" struct); //~ ERROR expected `(`\n-    llvm_asm!(\"in %dx, %al\" : \"={al}\"(result) : \"{dx}\"(struct)); //~ ERROR expected expression\n-    llvm_asm!(\"mov $$0x200, %eax\" : : : struct); //~ ERROR expected string literal\n-    llvm_asm!(\"mov eax, 2\" : \"={eax}\"(foo) : : : struct); //~ ERROR expected string literal\n-    llvm_asm!(123); //~ ERROR inline assembly must be a string literal\n-}"}, {"sha": "715d05beaaee923497339b093f4d72b5a50cdcd5", "filename": "src/test/ui/llvm-asm/llvm-asm-parse-errors.stderr", "status": "removed", "additions": 0, "deletions": 68, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-parse-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/128417f40f80ce585414bf5a017540447e6be775/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-parse-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-parse-errors.stderr?ref=128417f40f80ce585414bf5a017540447e6be775", "patch": "@@ -1,68 +0,0 @@\n-error: macro requires a string literal as an argument\n-  --> $DIR/llvm-asm-parse-errors.rs:5:5\n-   |\n-LL |     llvm_asm!();\n-   |     ^^^^^^^^^^^ string literal required\n-\n-error: expected string literal\n-  --> $DIR/llvm-asm-parse-errors.rs:6:23\n-   |\n-LL |     llvm_asm!(\"nop\" : struct);\n-   |                       ^^^^^^ not a string literal\n-\n-error: expected string literal\n-  --> $DIR/llvm-asm-parse-errors.rs:7:35\n-   |\n-LL |     llvm_asm!(\"mov %eax, $$0x2\" : struct);\n-   |                                   ^^^^^^ not a string literal\n-\n-error: expected `(`, found keyword `struct`\n-  --> $DIR/llvm-asm-parse-errors.rs:8:44\n-   |\n-LL |     llvm_asm!(\"mov %eax, $$0x2\" : \"={eax}\" struct);\n-   |                                            ^^^^^^ expected `(`\n-\n-error: expected expression, found keyword `struct`\n-  --> $DIR/llvm-asm-parse-errors.rs:9:44\n-   |\n-LL |     llvm_asm!(\"mov %eax, $$0x2\" : \"={eax}\"(struct));\n-   |                                            ^^^^^^ expected expression\n-\n-error: expected string literal\n-  --> $DIR/llvm-asm-parse-errors.rs:10:49\n-   |\n-LL |     llvm_asm!(\"in %dx, %al\" : \"={al}\"(result) : struct);\n-   |                                                 ^^^^^^ not a string literal\n-\n-error: expected `(`, found keyword `struct`\n-  --> $DIR/llvm-asm-parse-errors.rs:11:56\n-   |\n-LL |     llvm_asm!(\"in %dx, %al\" : \"={al}\"(result) : \"{dx}\" struct);\n-   |                                                        ^^^^^^ expected `(`\n-\n-error: expected expression, found keyword `struct`\n-  --> $DIR/llvm-asm-parse-errors.rs:12:56\n-   |\n-LL |     llvm_asm!(\"in %dx, %al\" : \"={al}\"(result) : \"{dx}\"(struct));\n-   |                                                        ^^^^^^ expected expression\n-\n-error: expected string literal\n-  --> $DIR/llvm-asm-parse-errors.rs:13:41\n-   |\n-LL |     llvm_asm!(\"mov $$0x200, %eax\" : : : struct);\n-   |                                         ^^^^^^ not a string literal\n-\n-error: expected string literal\n-  --> $DIR/llvm-asm-parse-errors.rs:14:50\n-   |\n-LL |     llvm_asm!(\"mov eax, 2\" : \"={eax}\"(foo) : : : struct);\n-   |                                                  ^^^^^^ not a string literal\n-\n-error: inline assembly must be a string literal\n-  --> $DIR/llvm-asm-parse-errors.rs:15:15\n-   |\n-LL |     llvm_asm!(123);\n-   |               ^^^\n-\n-error: aborting due to 11 previous errors\n-"}, {"sha": "98f64aa6f8025a212c2f18e189dca42e68adbc9b", "filename": "src/test/ui/macros/macros-nonfatal-errors.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -3,11 +3,9 @@\n // test that errors in a (selection) of macros don't kill compilation\n // immediately, so that we get more errors listed at a time.\n \n-#![feature(llvm_asm)]\n #![feature(trace_macros, concat_idents)]\n #![feature(stmt_expr_attributes, arbitrary_enum_discriminant)]\n #![feature(derive_default_enum)]\n-#![allow(deprecated)] // llvm_asm!\n \n use std::arch::asm;\n "}, {"sha": "79e8db9c1d429866e509112373a21be657bcd857", "filename": "src/test/ui/macros/macros-nonfatal-errors.stderr", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.stderr?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -1,41 +1,41 @@\n error: the `#[default]` attribute may only be used on unit enum variants\n-  --> $DIR/macros-nonfatal-errors.rs:16:5\n+  --> $DIR/macros-nonfatal-errors.rs:14:5\n    |\n LL |     #[default]\n    |     ^^^^^^^^^^\n \n error: the `#[default]` attribute may only be used on unit enum variants\n-  --> $DIR/macros-nonfatal-errors.rs:21:36\n+  --> $DIR/macros-nonfatal-errors.rs:19:36\n    |\n LL | struct DefaultInnerAttrTupleStruct(#[default] ());\n    |                                    ^^^^^^^^^^\n \n error: the `#[default]` attribute may only be used on unit enum variants\n-  --> $DIR/macros-nonfatal-errors.rs:25:1\n+  --> $DIR/macros-nonfatal-errors.rs:23:1\n    |\n LL | #[default]\n    | ^^^^^^^^^^\n \n error: the `#[default]` attribute may only be used on unit enum variants\n-  --> $DIR/macros-nonfatal-errors.rs:29:1\n+  --> $DIR/macros-nonfatal-errors.rs:27:1\n    |\n LL | #[default]\n    | ^^^^^^^^^^\n \n error: the `#[default]` attribute may only be used on unit enum variants\n-  --> $DIR/macros-nonfatal-errors.rs:39:11\n+  --> $DIR/macros-nonfatal-errors.rs:37:11\n    |\n LL |     Foo = #[default] 0,\n    |           ^^^^^^^^^^\n \n error: the `#[default]` attribute may only be used on unit enum variants\n-  --> $DIR/macros-nonfatal-errors.rs:40:14\n+  --> $DIR/macros-nonfatal-errors.rs:38:14\n    |\n LL |     Bar([u8; #[default] 1]),\n    |              ^^^^^^^^^^\n \n error: no default declared\n-  --> $DIR/macros-nonfatal-errors.rs:45:10\n+  --> $DIR/macros-nonfatal-errors.rs:43:10\n    |\n LL | #[derive(Default)]\n    |          ^^^^^^^\n@@ -44,7 +44,7 @@ LL | #[derive(Default)]\n    = note: this error originates in the derive macro `Default` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: multiple declared defaults\n-  --> $DIR/macros-nonfatal-errors.rs:51:10\n+  --> $DIR/macros-nonfatal-errors.rs:49:10\n    |\n LL | #[derive(Default)]\n    |          ^^^^^^^\n@@ -62,15 +62,15 @@ LL |     Baz,\n    = note: this error originates in the derive macro `Default` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `#[default]` attribute does not accept a value\n-  --> $DIR/macros-nonfatal-errors.rs:63:5\n+  --> $DIR/macros-nonfatal-errors.rs:61:5\n    |\n LL |     #[default = 1]\n    |     ^^^^^^^^^^^^^^\n    |\n    = help: try using `#[default]`\n \n error: multiple `#[default]` attributes\n-  --> $DIR/macros-nonfatal-errors.rs:71:5\n+  --> $DIR/macros-nonfatal-errors.rs:69:5\n    |\n LL |     #[default]\n    |     ---------- `#[default]` used here\n@@ -81,13 +81,13 @@ LL |     Foo,\n    |\n    = note: only one `#[default]` attribute is needed\n help: try removing this\n-  --> $DIR/macros-nonfatal-errors.rs:70:5\n+  --> $DIR/macros-nonfatal-errors.rs:68:5\n    |\n LL |     #[default]\n    |     ^^^^^^^^^^\n \n error: multiple `#[default]` attributes\n-  --> $DIR/macros-nonfatal-errors.rs:81:5\n+  --> $DIR/macros-nonfatal-errors.rs:79:5\n    |\n LL |     #[default]\n    |     ---------- `#[default]` used here\n@@ -99,7 +99,7 @@ LL |     Foo,\n    |\n    = note: only one `#[default]` attribute is needed\n help: try removing these\n-  --> $DIR/macros-nonfatal-errors.rs:78:5\n+  --> $DIR/macros-nonfatal-errors.rs:76:5\n    |\n LL |     #[default]\n    |     ^^^^^^^^^^\n@@ -109,15 +109,15 @@ LL |     #[default]\n    |     ^^^^^^^^^^\n \n error: the `#[default]` attribute may only be used on unit enum variants\n-  --> $DIR/macros-nonfatal-errors.rs:88:5\n+  --> $DIR/macros-nonfatal-errors.rs:86:5\n    |\n LL |     Foo {},\n    |     ^^^\n    |\n    = help: consider a manual implementation of `Default`\n \n error: default variant must be exhaustive\n-  --> $DIR/macros-nonfatal-errors.rs:96:5\n+  --> $DIR/macros-nonfatal-errors.rs:94:5\n    |\n LL |     #[non_exhaustive]\n    |     ----------------- declared `#[non_exhaustive]` here\n@@ -127,51 +127,45 @@ LL |     Foo,\n    = help: consider a manual implementation of `Default`\n \n error: asm template must be a string literal\n-  --> $DIR/macros-nonfatal-errors.rs:101:10\n+  --> $DIR/macros-nonfatal-errors.rs:99:10\n    |\n LL |     asm!(invalid);\n    |          ^^^^^^^\n \n-error: inline assembly must be a string literal\n-  --> $DIR/macros-nonfatal-errors.rs:102:15\n-   |\n-LL |     llvm_asm!(invalid);\n-   |               ^^^^^^^\n-\n error: concat_idents! requires ident args\n-  --> $DIR/macros-nonfatal-errors.rs:104:5\n+  --> $DIR/macros-nonfatal-errors.rs:102:5\n    |\n LL |     concat_idents!(\"not\", \"idents\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: argument must be a string literal\n-  --> $DIR/macros-nonfatal-errors.rs:106:17\n+  --> $DIR/macros-nonfatal-errors.rs:104:17\n    |\n LL |     option_env!(invalid);\n    |                 ^^^^^^^\n \n error: expected string literal\n-  --> $DIR/macros-nonfatal-errors.rs:107:10\n+  --> $DIR/macros-nonfatal-errors.rs:105:10\n    |\n LL |     env!(invalid);\n    |          ^^^^^^^\n \n error: expected string literal\n-  --> $DIR/macros-nonfatal-errors.rs:108:10\n+  --> $DIR/macros-nonfatal-errors.rs:106:10\n    |\n LL |     env!(foo, abr, baz);\n    |          ^^^\n \n error: environment variable `RUST_HOPEFULLY_THIS_DOESNT_EXIST` not defined\n-  --> $DIR/macros-nonfatal-errors.rs:109:5\n+  --> $DIR/macros-nonfatal-errors.rs:107:5\n    |\n LL |     env!(\"RUST_HOPEFULLY_THIS_DOESNT_EXIST\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `env` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: format argument must be a string literal\n-  --> $DIR/macros-nonfatal-errors.rs:111:13\n+  --> $DIR/macros-nonfatal-errors.rs:109:13\n    |\n LL |     format!(invalid);\n    |             ^^^^^^^\n@@ -182,44 +176,50 @@ LL |     format!(\"{}\", invalid);\n    |             +++++\n \n error: argument must be a string literal\n-  --> $DIR/macros-nonfatal-errors.rs:113:14\n+  --> $DIR/macros-nonfatal-errors.rs:111:14\n    |\n LL |     include!(invalid);\n    |              ^^^^^^^\n \n error: argument must be a string literal\n-  --> $DIR/macros-nonfatal-errors.rs:115:18\n+  --> $DIR/macros-nonfatal-errors.rs:113:18\n    |\n LL |     include_str!(invalid);\n    |                  ^^^^^^^\n \n error: couldn't read $DIR/i'd be quite surprised if a file with this name existed: $FILE_NOT_FOUND_MSG (os error 2)\n-  --> $DIR/macros-nonfatal-errors.rs:116:5\n+  --> $DIR/macros-nonfatal-errors.rs:114:5\n    |\n LL |     include_str!(\"i'd be quite surprised if a file with this name existed\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `include_str` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: argument must be a string literal\n-  --> $DIR/macros-nonfatal-errors.rs:117:20\n+  --> $DIR/macros-nonfatal-errors.rs:115:20\n    |\n LL |     include_bytes!(invalid);\n    |                    ^^^^^^^\n \n error: couldn't read $DIR/i'd be quite surprised if a file with this name existed: $FILE_NOT_FOUND_MSG (os error 2)\n-  --> $DIR/macros-nonfatal-errors.rs:118:5\n+  --> $DIR/macros-nonfatal-errors.rs:116:5\n    |\n LL |     include_bytes!(\"i'd be quite surprised if a file with this name existed\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `include_bytes` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: trace_macros! accepts only `true` or `false`\n-  --> $DIR/macros-nonfatal-errors.rs:120:5\n+  --> $DIR/macros-nonfatal-errors.rs:118:5\n    |\n LL |     trace_macros!(invalid);\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n+error: cannot find macro `llvm_asm` in this scope\n+  --> $DIR/macros-nonfatal-errors.rs:100:5\n+   |\n+LL |     llvm_asm!(invalid);\n+   |     ^^^^^^^^\n+\n error: aborting due to 27 previous errors\n "}, {"sha": "73c31cd9721f65e042412e3bb9aba33cfc49efd8", "filename": "src/test/ui/runtime/out-of-stack.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/src%2Ftest%2Fui%2Fruntime%2Fout-of-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/src%2Ftest%2Fui%2Fruntime%2Fout-of-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fruntime%2Fout-of-stack.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -2,12 +2,11 @@\n \n #![allow(unused_must_use)]\n #![allow(unconditional_recursion)]\n-#![allow(deprecated)] // llvm_asm!\n // ignore-android: FIXME (#20004)\n // ignore-emscripten no processes\n // ignore-sgx no processes\n \n-#![feature(llvm_asm)]\n+#![feature(core_intrinsics)]\n #![feature(rustc_private)]\n \n #[cfg(unix)]\n@@ -17,11 +16,10 @@ use std::env;\n use std::process::Command;\n use std::thread;\n \n-// lifted from the test module\n // Inlining to avoid llvm turning the recursive functions into tail calls,\n // which doesn't consume stack.\n #[inline(always)]\n-pub fn black_box<T>(dummy: T) { unsafe { llvm_asm!(\"\" : : \"r\"(&dummy)) } }\n+pub fn black_box<T>(dummy: T) { std::intrinsics::black_box(dummy); }\n \n fn silent_recurse() {\n     let buf = [0u8; 1000];"}, {"sha": "633f1edb26cef567dca1bd1a7194a07b0be1a26e", "filename": "src/test/ui/unsafe/inline_asm.mir.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/src%2Ftest%2Fui%2Funsafe%2Finline_asm.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/src%2Ftest%2Fui%2Funsafe%2Finline_asm.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Finline_asm.mir.stderr?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -1,20 +1,11 @@\n error[E0133]: use of inline assembly is unsafe and requires unsafe function or block\n-  --> $DIR/inline_asm.rs:11:5\n+  --> $DIR/inline_asm.rs:8:5\n    |\n LL |     asm!(\"nop\");\n    |     ^^^^^^^^^^^ use of inline assembly\n    |\n    = note: inline assembly is entirely unchecked and can cause undefined behavior\n \n-error[E0133]: use of inline assembly is unsafe and requires unsafe function or block\n-  --> $DIR/inline_asm.rs:12:5\n-   |\n-LL |     llvm_asm!(\"nop\");\n-   |     ^^^^^^^^^^^^^^^^ use of inline assembly\n-   |\n-   = note: inline assembly is entirely unchecked and can cause undefined behavior\n-   = note: this error originates in the macro `llvm_asm` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0133`."}, {"sha": "12c7efe4f50b6f802d015d6376d0339d311f4938", "filename": "src/test/ui/unsafe/inline_asm.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/src%2Ftest%2Fui%2Funsafe%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/src%2Ftest%2Fui%2Funsafe%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Finline_asm.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -2,12 +2,8 @@\n // [thir]compile-flags: -Z thir-unsafeck\n // needs-asm-support\n \n-#![feature(llvm_asm)]\n-#![allow(deprecated)] // llvm_asm!\n-\n use std::arch::asm;\n \n fn main() {\n     asm!(\"nop\"); //~ ERROR use of inline assembly is unsafe and requires unsafe function or block\n-    llvm_asm!(\"nop\"); //~ ERROR use of inline assembly is unsafe and requires unsafe function or block\n }"}, {"sha": "633f1edb26cef567dca1bd1a7194a07b0be1a26e", "filename": "src/test/ui/unsafe/inline_asm.thir.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/src%2Ftest%2Fui%2Funsafe%2Finline_asm.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/src%2Ftest%2Fui%2Funsafe%2Finline_asm.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Finline_asm.thir.stderr?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -1,20 +1,11 @@\n error[E0133]: use of inline assembly is unsafe and requires unsafe function or block\n-  --> $DIR/inline_asm.rs:11:5\n+  --> $DIR/inline_asm.rs:8:5\n    |\n LL |     asm!(\"nop\");\n    |     ^^^^^^^^^^^ use of inline assembly\n    |\n    = note: inline assembly is entirely unchecked and can cause undefined behavior\n \n-error[E0133]: use of inline assembly is unsafe and requires unsafe function or block\n-  --> $DIR/inline_asm.rs:12:5\n-   |\n-LL |     llvm_asm!(\"nop\");\n-   |     ^^^^^^^^^^^^^^^^ use of inline assembly\n-   |\n-   = note: inline assembly is entirely unchecked and can cause undefined behavior\n-   = note: this error originates in the macro `llvm_asm` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0133`."}, {"sha": "af46e99c6446ef9c487328eb28f77aff18a7f329", "filename": "src/tools/clippy/clippy_lints/src/dereference.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -449,7 +449,6 @@ fn is_linted_explicit_deref_position(parent: Option<Node<'_>>, child_id: HirId,\n         | ExprKind::Continue(..)\n         | ExprKind::Ret(..)\n         | ExprKind::InlineAsm(..)\n-        | ExprKind::LlvmInlineAsm(..)\n         | ExprKind::Struct(..)\n         | ExprKind::Repeat(..)\n         | ExprKind::Yield(..) => true,"}, {"sha": "26fa41b1a605df7c7cd342402b422d72661e7ea0", "filename": "src/tools/clippy/clippy_lints/src/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fentry.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -504,7 +504,7 @@ impl<'tcx> Visitor<'tcx> for InsertSearcher<'_, 'tcx> {\n                     self.loops.pop();\n                 },\n                 ExprKind::Block(block, _) => self.visit_block(block),\n-                ExprKind::InlineAsm(_) | ExprKind::LlvmInlineAsm(_) => {\n+                ExprKind::InlineAsm(_) => {\n                     self.can_use_entry = false;\n                 },\n                 _ => {"}, {"sha": "3bfc62b19ef2af85f5a1409e6b0ef3945293e7e1", "filename": "src/tools/clippy/clippy_lints/src/loops/never_loop.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fnever_loop.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -181,7 +181,6 @@ fn never_loop_expr(expr: &Expr<'_>, main_loop_id: HirId) -> NeverLoopResult {\n         ExprKind::Struct(_, _, None)\n         | ExprKind::Yield(_, _)\n         | ExprKind::Closure(_, _, _, _, _)\n-        | ExprKind::LlvmInlineAsm(_)\n         | ExprKind::Path(_)\n         | ExprKind::ConstBlock(_)\n         | ExprKind::Lit(_)"}, {"sha": "c3d984fb5ae10b3d57314fedc1f4940dacf75e8e", "filename": "src/tools/clippy/clippy_lints/src/suspicious_operation_groupings.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -567,7 +567,6 @@ fn ident_difference_expr_with_base_location(\n         | (Repeat(_, _), Repeat(_, _))\n         | (Struct(_), Struct(_))\n         | (MacCall(_), MacCall(_))\n-        | (LlvmInlineAsm(_), LlvmInlineAsm(_))\n         | (InlineAsm(_), InlineAsm(_))\n         | (Ret(_), Ret(_))\n         | (Continue(_), Continue(_))"}, {"sha": "1d7bb24302606aab731c945d6e32b2bee4ab35f8", "filename": "src/tools/clippy/clippy_lints/src/utils/author.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -547,10 +547,6 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n                 kind!(\"InlineAsm(_)\");\n                 out!(\"// unimplemented: `ExprKind::InlineAsm` is not further destructured at the moment\");\n             },\n-            ExprKind::LlvmInlineAsm(_) => {\n-                kind!(\"LlvmInlineAsm(_)\");\n-                out!(\"// unimplemented: `ExprKind::LlvmInlineAsm` is not further destructured at the moment\");\n-            },\n             ExprKind::Struct(qpath, fields, base) => {\n                 bind!(self, qpath, fields);\n                 opt_bind!(self, base);"}, {"sha": "89eae06fef79b04a65ca76f986ced2efcc3b4534", "filename": "src/tools/clippy/clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -304,19 +304,6 @@ fn print_expr(cx: &LateContext<'_>, expr: &hir::Expr<'_>, indent: usize) {\n                 }\n             }\n         },\n-        hir::ExprKind::LlvmInlineAsm(asm) => {\n-            let inputs = &asm.inputs_exprs;\n-            let outputs = &asm.outputs_exprs;\n-            println!(\"{}LlvmInlineAsm\", ind);\n-            println!(\"{}inputs:\", ind);\n-            for e in inputs.iter() {\n-                print_expr(cx, e, indent + 1);\n-            }\n-            println!(\"{}outputs:\", ind);\n-            for e in outputs.iter() {\n-                print_expr(cx, e, indent + 1);\n-            }\n-        },\n         hir::ExprKind::Struct(path, fields, ref base) => {\n             println!(\"{}Struct\", ind);\n             println!(\"{}path: {:?}\", ind, path);"}, {"sha": "80ed3c230820fd0b44ea9a1cd5dddcc3c4a1ed6f", "filename": "src/tools/clippy/clippy_utils/src/eager_or_lazy.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Feager_or_lazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Feager_or_lazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Feager_or_lazy.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -180,7 +180,6 @@ fn expr_eagerness<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> EagernessS\n                 | ExprKind::Continue(_)\n                 | ExprKind::Ret(_)\n                 | ExprKind::InlineAsm(_)\n-                | ExprKind::LlvmInlineAsm(_)\n                 | ExprKind::Yield(..)\n                 | ExprKind::Err => {\n                     self.eagerness = ForceNoChange;"}, {"sha": "b0fee46f82474a9d893391ffc0dd6246d6060bac", "filename": "src/tools/clippy/clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -683,7 +683,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 }\n                 self.hash_pat(pat);\n             },\n-            ExprKind::LlvmInlineAsm(..) | ExprKind::Err => {},\n+            ExprKind::Err => {},\n             ExprKind::Lit(ref l) => {\n                 l.node.hash(&mut self.s);\n             },"}, {"sha": "515915d9abee7a014b1683653ab29cc6ed67fda7", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -810,8 +810,7 @@ pub fn can_move_expr_to_closure_no_visit<'tcx>(\n         | ExprKind::Continue(_)\n         | ExprKind::Ret(_)\n         | ExprKind::Yield(..)\n-        | ExprKind::InlineAsm(_)\n-        | ExprKind::LlvmInlineAsm(_) => false,\n+        | ExprKind::InlineAsm(_) => false,\n         // Accessing a field of a local value can only be done if the type isn't\n         // partially moved.\n         ExprKind::Field("}, {"sha": "7512039a480bb95e191d17eed4b34d3708643d42", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -233,8 +233,6 @@ fn check_statement<'tcx>(\n         // just an assignment\n         StatementKind::SetDiscriminant { place, .. } => check_place(tcx, **place, span, body),\n \n-        StatementKind::LlvmInlineAsm { .. } => Err((span, \"cannot use inline assembly in const fn\".into())),\n-\n         StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping { dst, src, count }) => {\n             check_operand(tcx, dst, span, body)?;\n             check_operand(tcx, src, span, body)?;"}, {"sha": "563edd32d25185fb3918e344cfe7680760a64a4d", "filename": "src/tools/clippy/clippy_utils/src/sugg.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -147,7 +147,6 @@ impl<'a> Sugg<'a> {\n             | hir::ExprKind::Field(..)\n             | hir::ExprKind::Index(..)\n             | hir::ExprKind::InlineAsm(..)\n-            | hir::ExprKind::LlvmInlineAsm(..)\n             | hir::ExprKind::ConstBlock(..)\n             | hir::ExprKind::Lit(..)\n             | hir::ExprKind::Loop(..)\n@@ -205,7 +204,6 @@ impl<'a> Sugg<'a> {\n             | ast::ExprKind::ForLoop(..)\n             | ast::ExprKind::Index(..)\n             | ast::ExprKind::InlineAsm(..)\n-            | ast::ExprKind::LlvmInlineAsm(..)\n             | ast::ExprKind::ConstBlock(..)\n             | ast::ExprKind::Lit(..)\n             | ast::ExprKind::Loop(..)"}, {"sha": "e1865c8afc2f0c753c73297989f94e8ced5efd1f", "filename": "src/tools/rustfmt/src/expr.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -334,9 +334,7 @@ pub(crate) fn format_expr(\n         // satisfy our width restrictions.\n         // Style Guide RFC for InlineAsm variant pending\n         // https://github.com/rust-dev-tools/fmt-rfcs/issues/152\n-        ast::ExprKind::LlvmInlineAsm(..) | ast::ExprKind::InlineAsm(..) => {\n-            Some(context.snippet(expr.span).to_owned())\n-        }\n+        ast::ExprKind::InlineAsm(..) => Some(context.snippet(expr.span).to_owned()),\n         ast::ExprKind::TryBlock(ref block) => {\n             if let rw @ Some(_) =\n                 rewrite_single_line_block(context, \"try \", block, Some(&expr.attrs), None, shape)"}, {"sha": "2428d8cb0fd89ee6b934629ccc5cfed909f4487b", "filename": "src/tools/rustfmt/src/utils.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a34c0797528172ede89480e3033f7a5e71ea4735/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34c0797528172ede89480e3033f7a5e71ea4735/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs?ref=a34c0797528172ede89480e3033f7a5e71ea4735", "patch": "@@ -507,7 +507,6 @@ pub(crate) fn is_block_expr(context: &RewriteContext<'_>, expr: &ast::Expr, repr\n         | ast::ExprKind::Err\n         | ast::ExprKind::Field(..)\n         | ast::ExprKind::InlineAsm(..)\n-        | ast::ExprKind::LlvmInlineAsm(..)\n         | ast::ExprKind::Let(..)\n         | ast::ExprKind::Path(..)\n         | ast::ExprKind::Range(..)"}]}