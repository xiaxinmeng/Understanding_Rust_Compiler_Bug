{"sha": "b79f7fbda86748909a6a833521b2fab97de6e654", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3OWY3ZmJkYTg2NzQ4OTA5YTZhODMzNTIxYjJmYWI5N2RlNmU2NTQ=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-06-19T08:05:05Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-27T19:06:36Z"}, "message": "rustdoc", "tree": {"sha": "8a939ace64908b83c02a17f87edc7474e92001ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a939ace64908b83c02a17f87edc7474e92001ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b79f7fbda86748909a6a833521b2fab97de6e654", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b79f7fbda86748909a6a833521b2fab97de6e654", "html_url": "https://github.com/rust-lang/rust/commit/b79f7fbda86748909a6a833521b2fab97de6e654", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b79f7fbda86748909a6a833521b2fab97de6e654/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9852b42b581bbc4843460f4654a2dbd859bd9034", "url": "https://api.github.com/repos/rust-lang/rust/commits/9852b42b581bbc4843460f4654a2dbd859bd9034", "html_url": "https://github.com/rust-lang/rust/commit/9852b42b581bbc4843460f4654a2dbd859bd9034"}], "stats": {"total": 67, "additions": 36, "deletions": 31}, "files": [{"sha": "d49afb551bd8b04f57f6d01185dce3d735a18b83", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b79f7fbda86748909a6a833521b2fab97de6e654/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b79f7fbda86748909a6a833521b2fab97de6e654/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=b79f7fbda86748909a6a833521b2fab97de6e654", "patch": "@@ -315,12 +315,12 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n         tcx: TyCtxt<'tcx>,\n         pred: ty::Predicate<'tcx>,\n     ) -> FxHashSet<GenericParamDef> {\n-        let regions = match pred.kind() {\n-            ty::PredicateKind::Trait(poly_trait_pred, _) => {\n-                tcx.collect_referenced_late_bound_regions(&poly_trait_pred)\n+        let regions = match pred.ignore_qualifiers().skip_binder().kind() {\n+            &ty::PredicateKind::Trait(poly_trait_pred, _) => {\n+                tcx.collect_referenced_late_bound_regions(&ty::Binder::bind(poly_trait_pred))\n             }\n-            ty::PredicateKind::Projection(poly_proj_pred) => {\n-                tcx.collect_referenced_late_bound_regions(&poly_proj_pred)\n+            &ty::PredicateKind::Projection(poly_proj_pred) => {\n+                tcx.collect_referenced_late_bound_regions(&ty::Binder::bind(poly_proj_pred))\n             }\n             _ => return FxHashSet::default(),\n         };"}, {"sha": "fdfdddea0066d23d9b22a636f78b90f32f55c126", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 28, "deletions": 20, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/b79f7fbda86748909a6a833521b2fab97de6e654/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b79f7fbda86748909a6a833521b2fab97de6e654/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=b79f7fbda86748909a6a833521b2fab97de6e654", "patch": "@@ -480,13 +480,14 @@ impl Clean<WherePredicate> for hir::WherePredicate<'_> {\n \n impl<'a> Clean<Option<WherePredicate>> for ty::Predicate<'a> {\n     fn clean(&self, cx: &DocContext<'_>) -> Option<WherePredicate> {\n-        match self.kind() {\n-            ty::PredicateKind::Trait(ref pred, _) => Some(pred.clean(cx)),\n-            ty::PredicateKind::Subtype(ref pred) => Some(pred.clean(cx)),\n-            ty::PredicateKind::RegionOutlives(ref pred) => pred.clean(cx),\n-            ty::PredicateKind::TypeOutlives(ref pred) => pred.clean(cx),\n-            ty::PredicateKind::Projection(ref pred) => Some(pred.clean(cx)),\n-\n+        match self.ignore_qualifiers().skip_binder().kind() {\n+            &ty::PredicateKind::Trait(pred, _) => Some(ty::Binder::bind(pred).clean(cx)),\n+            &ty::PredicateKind::Subtype(pred) => Some(ty::Binder::bind(pred).clean(cx)),\n+            &ty::PredicateKind::RegionOutlives(pred) => ty::Binder::bind(pred).clean(cx),\n+            &ty::PredicateKind::TypeOutlives(pred) => ty::Binder::bind(pred).clean(cx),\n+            &ty::PredicateKind::Projection(pred) => Some(ty::Binder::bind(pred).clean(cx)),\n+\n+            ty::PredicateKind::ForAll(_) => panic!(\"unexpected predicate: {:?}\", self),\n             ty::PredicateKind::WellFormed(..)\n             | ty::PredicateKind::ObjectSafe(..)\n             | ty::PredicateKind::ClosureKind(..)\n@@ -754,19 +755,24 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics, ty::GenericPredicates<'tcx\n             .flat_map(|(p, _)| {\n                 let mut projection = None;\n                 let param_idx = (|| {\n-                    if let Some(trait_ref) = p.to_opt_poly_trait_ref() {\n-                        if let ty::Param(param) = trait_ref.skip_binder().self_ty().kind {\n-                            return Some(param.index);\n+                    match p.ignore_qualifiers().skip_binder().kind() {\n+                        &ty::PredicateKind::Trait(pred, _constness) => {\n+                            if let ty::Param(param) = pred.self_ty().kind {\n+                                return Some(param.index);\n+                            }\n                         }\n-                    } else if let Some(outlives) = p.to_opt_type_outlives() {\n-                        if let ty::Param(param) = outlives.skip_binder().0.kind {\n-                            return Some(param.index);\n+                        &ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(ty, _reg)) => {\n+                            if let ty::Param(param) = ty.kind {\n+                                return Some(param.index);\n+                            }\n                         }\n-                    } else if let ty::PredicateKind::Projection(p) = p.kind() {\n-                        if let ty::Param(param) = p.skip_binder().projection_ty.self_ty().kind {\n-                            projection = Some(p);\n-                            return Some(param.index);\n+                        &ty::PredicateKind::Projection(p) => {\n+                            if let ty::Param(param) = p.projection_ty.self_ty().kind {\n+                                projection = Some(ty::Binder::bind(p));\n+                                return Some(param.index);\n+                            }\n                         }\n+                        _ => (),\n                     }\n \n                     None\n@@ -1657,7 +1663,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                     .filter_map(|predicate| {\n                         let trait_ref = if let Some(tr) = predicate.to_opt_poly_trait_ref() {\n                             tr\n-                        } else if let ty::PredicateKind::TypeOutlives(pred) = predicate.kind() {\n+                        } else if let Some(pred) = predicate.to_opt_type_outlives() {\n                             // these should turn up at the end\n                             if let Some(r) = pred.skip_binder().1.clean(cx) {\n                                 regions.push(GenericBound::Outlives(r));\n@@ -1678,8 +1684,10 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                             .predicates\n                             .iter()\n                             .filter_map(|pred| {\n-                                if let ty::PredicateKind::Projection(proj) = pred.kind() {\n-                                    let proj = proj.skip_binder();\n+                                if let ty::PredicateKind::Projection(proj) =\n+                                    pred.ignore_qualifiers().skip_binder().kind()\n+                                {\n+                                    let proj = proj;\n                                     if proj.projection_ty.trait_ref(cx.tcx)\n                                         == trait_ref.skip_binder()\n                                     {"}, {"sha": "75c5fb4c9f87302381139c842892793374eeb2d0", "filename": "src/librustdoc/clean/simplify.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b79f7fbda86748909a6a833521b2fab97de6e654/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b79f7fbda86748909a6a833521b2fab97de6e654/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fsimplify.rs?ref=b79f7fbda86748909a6a833521b2fab97de6e654", "patch": "@@ -141,12 +141,9 @@ fn trait_is_same_or_supertrait(cx: &DocContext<'_>, child: DefId, trait_: DefId)\n         .predicates\n         .iter()\n         .filter_map(|(pred, _)| {\n-            if let ty::PredicateKind::Trait(ref pred, _) = pred.kind() {\n-                if pred.skip_binder().trait_ref.self_ty() == self_ty {\n-                    Some(pred.def_id())\n-                } else {\n-                    None\n-                }\n+            if let ty::PredicateKind::Trait(pred, _) = pred.ignore_qualifiers().skip_binder().kind()\n+            {\n+                if pred.trait_ref.self_ty() == self_ty { Some(pred.def_id()) } else { None }\n             } else {\n                 None\n             }"}]}