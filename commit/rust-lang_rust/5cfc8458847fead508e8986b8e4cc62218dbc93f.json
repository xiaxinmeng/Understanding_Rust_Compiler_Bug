{"sha": "5cfc8458847fead508e8986b8e4cc62218dbc93f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjZmM4NDU4ODQ3ZmVhZDUwOGU4OTg2YjhlNGNjNjIyMThkYmM5M2Y=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2019-01-07T15:25:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-07T15:25:38Z"}, "message": "Rollup merge of #57369 - petrhosek:llvm-libcxx, r=alexcrichton\n\nProvide the option to use libc++ even on all platforms\n\nThis is the default on platforms which use libc++ as the default C++\nlibrary but this option allows using libc++ on others as well.", "tree": {"sha": "689775e85cdb2cd03ca5ca62de72d20177b80022", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/689775e85cdb2cd03ca5ca62de72d20177b80022"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5cfc8458847fead508e8986b8e4cc62218dbc93f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcM29yCRBK7hj4Ov3rIwAAdHIIACV1SiEYkrvLNwZ+1O69x3X9\nD9ymeR9paTo93eI18GYkAAB++v76wWYBEgc/KxEkFOHQX+UIQ+x6srlt12x2yUn7\njsiLvHVKlPzkUrqx7X7DTloNo9PZ29QvNz99+M1TADbpWaLx2+RPI113pw1quNGq\nwaxUnRIahyMNQz3roy0LtSQuCqy4aQ/aTwQh1yIboU3ZoQF4DTyhhj2XulEuSmg1\n21E5ppfI+ntnJ3oVHhUZ6U0EenAGTBqXto0AsYaB2F9EcQBY36NSZxC9SlKw5aSS\n6dYQ3qTAKzp/Et/HcpPeKue1t6MbLbgwuRTactKiwLtVigDSPeblL5Q14w6PdDY=\n=GfCp\n-----END PGP SIGNATURE-----\n", "payload": "tree 689775e85cdb2cd03ca5ca62de72d20177b80022\nparent 14fb35fa4f6bbcefe8cd28fe5dc3dd53b59a1201\nparent 7306b87f129197177ffac57139839d18fe93a8f6\nauthor Pietro Albini <pietro@pietroalbini.org> 1546874738 +0100\ncommitter GitHub <noreply@github.com> 1546874738 +0100\n\nRollup merge of #57369 - petrhosek:llvm-libcxx, r=alexcrichton\n\nProvide the option to use libc++ even on all platforms\n\nThis is the default on platforms which use libc++ as the default C++\nlibrary but this option allows using libc++ on others as well.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5cfc8458847fead508e8986b8e4cc62218dbc93f", "html_url": "https://github.com/rust-lang/rust/commit/5cfc8458847fead508e8986b8e4cc62218dbc93f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5cfc8458847fead508e8986b8e4cc62218dbc93f/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14fb35fa4f6bbcefe8cd28fe5dc3dd53b59a1201", "url": "https://api.github.com/repos/rust-lang/rust/commits/14fb35fa4f6bbcefe8cd28fe5dc3dd53b59a1201", "html_url": "https://github.com/rust-lang/rust/commit/14fb35fa4f6bbcefe8cd28fe5dc3dd53b59a1201"}, {"sha": "7306b87f129197177ffac57139839d18fe93a8f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/7306b87f129197177ffac57139839d18fe93a8f6", "html_url": "https://github.com/rust-lang/rust/commit/7306b87f129197177ffac57139839d18fe93a8f6"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "c68d358b6a67e03a8469a65b59b042bdb45da5de", "filename": "config.toml.example", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5cfc8458847fead508e8986b8e4cc62218dbc93f/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/5cfc8458847fead508e8986b8e4cc62218dbc93f/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=5cfc8458847fead508e8986b8e4cc62218dbc93f", "patch": "@@ -90,6 +90,12 @@\n # with clang-cl, so this is special in that it only compiles LLVM with clang-cl\n #clang-cl = '/path/to/clang-cl.exe'\n \n+# Use libc++ when building LLVM instead of libstdc++. This is the default on\n+# platforms already use libc++ as the default C++ library, but this option\n+# allows you to use libc++ even on platforms when it's not. You need to ensure\n+# that your host compiler ships with libc++.\n+#use-libcxx = true\n+\n # =============================================================================\n # General build configuration options\n # ============================================================================="}, {"sha": "8bc7c5838edda381d21fe5b4a40b9c7da2d9ebe6", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5cfc8458847fead508e8986b8e4cc62218dbc93f/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cfc8458847fead508e8986b8e4cc62218dbc93f/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=5cfc8458847fead508e8986b8e4cc62218dbc93f", "patch": "@@ -723,6 +723,9 @@ pub fn build_codegen_backend(builder: &Builder,\n             {\n                 cargo.env(\"LLVM_LINK_SHARED\", \"1\");\n             }\n+            if builder.config.llvm_use_libcxx {\n+                cargo.env(\"LLVM_USE_LIBCXX\", \"1\");\n+            }\n         }\n         _ => panic!(\"unknown backend: {}\", backend),\n     }"}, {"sha": "9421817ae6d8e644583263bb49bda30bb240fa15", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5cfc8458847fead508e8986b8e4cc62218dbc93f/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cfc8458847fead508e8986b8e4cc62218dbc93f/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=5cfc8458847fead508e8986b8e4cc62218dbc93f", "patch": "@@ -82,6 +82,8 @@ pub struct Config {\n     pub lldb_enabled: bool,\n     pub llvm_tools_enabled: bool,\n \n+    pub llvm_use_libcxx: bool,\n+\n     // rust codegen options\n     pub rust_optimize: bool,\n     pub rust_codegen_units: Option<u32>,\n@@ -252,6 +254,7 @@ struct Llvm {\n     link_shared: Option<bool>,\n     version_suffix: Option<String>,\n     clang_cl: Option<String>,\n+    use_libcxx: Option<bool>,\n }\n \n #[derive(Deserialize, Default, Clone)]\n@@ -513,6 +516,7 @@ impl Config {\n             config.llvm_link_jobs = llvm.link_jobs;\n             config.llvm_version_suffix = llvm.version_suffix.clone();\n             config.llvm_clang_cl = llvm.clang_cl.clone();\n+            set(&mut config.llvm_use_libcxx, llvm.use_libcxx);\n         }\n \n         if let Some(ref rust) = toml.rust {"}, {"sha": "b0c3c9702498dcbb20dee72d2fc23d6900c73197", "filename": "src/bootstrap/configure.py", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5cfc8458847fead508e8986b8e4cc62218dbc93f/src%2Fbootstrap%2Fconfigure.py", "raw_url": "https://github.com/rust-lang/rust/raw/5cfc8458847fead508e8986b8e4cc62218dbc93f/src%2Fbootstrap%2Fconfigure.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfigure.py?ref=5cfc8458847fead508e8986b8e4cc62218dbc93f", "patch": "@@ -62,6 +62,7 @@ def v(*args):\n o(\"lld\", \"rust.lld\", \"build lld\")\n o(\"lldb\", \"rust.lldb\", \"build lldb\")\n o(\"missing-tools\", \"dist.missing-tools\", \"allow failures when building tools\")\n+o(\"use-libcxx\", \"llvm.use_libcxx\", \"build LLVM with libc++\")\n \n # Optimization and debugging options. These may be overridden by the release\n # channel, etc."}, {"sha": "d4a3ae273fcd40935aae7a13ed48a61a2918c972", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5cfc8458847fead508e8986b8e4cc62218dbc93f/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cfc8458847fead508e8986b8e4cc62218dbc93f/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=5cfc8458847fead508e8986b8e4cc62218dbc93f", "patch": "@@ -236,6 +236,7 @@ fn main() {\n     }\n \n     let llvm_static_stdcpp = env::var_os(\"LLVM_STATIC_STDCPP\");\n+    let llvm_use_libcxx = env::var_os(\"LLVM_USE_LIBCXX\");\n \n     let stdcppname = if target.contains(\"openbsd\") {\n         // llvm-config on OpenBSD doesn't mention stdlib=libc++\n@@ -245,6 +246,8 @@ fn main() {\n     } else if target.contains(\"netbsd\") && llvm_static_stdcpp.is_some() {\n         // NetBSD uses a separate library when relocation is required\n         \"stdc++_pic\"\n+    } else if llvm_use_libcxx.is_some() {\n+        \"c++\"\n     } else {\n         \"stdc++\"\n     };"}]}