{"sha": "adc24d1b5efb768a8e81ec5a26133f2351c4dd3f", "node_id": "C_kwDOAAsO6NoAKGFkYzI0ZDFiNWVmYjc2OGE4ZTgxZWM1YTI2MTMzZjIzNTFjNGRkM2Y", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-10-09T14:15:23Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2022-10-10T16:28:29Z"}, "message": "Fix compiler docs", "tree": {"sha": "ae8bb697398251d09124a50624f6a3f100b88097", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae8bb697398251d09124a50624f6a3f100b88097"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/adc24d1b5efb768a8e81ec5a26133f2351c4dd3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/adc24d1b5efb768a8e81ec5a26133f2351c4dd3f", "html_url": "https://github.com/rust-lang/rust/commit/adc24d1b5efb768a8e81ec5a26133f2351c4dd3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/adc24d1b5efb768a8e81ec5a26133f2351c4dd3f/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3416fa1882a9ea5b4d7c32b62afccbe9d01fb79a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3416fa1882a9ea5b4d7c32b62afccbe9d01fb79a", "html_url": "https://github.com/rust-lang/rust/commit/3416fa1882a9ea5b4d7c32b62afccbe9d01fb79a"}], "stats": {"total": 48, "additions": 32, "deletions": 16}, "files": [{"sha": "77ab27266b286bc77ae14c7b4c7f976526778394", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/adc24d1b5efb768a8e81ec5a26133f2351c4dd3f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc24d1b5efb768a8e81ec5a26133f2351c4dd3f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=adc24d1b5efb768a8e81ec5a26133f2351c4dd3f", "patch": "@@ -707,10 +707,12 @@ pub(super) fn check_opaque_for_cycles<'tcx>(\n /// check those cases in the `param_env` of that function, which may have\n /// bounds not on this opaque type:\n ///\n-/// type X<T> = impl Clone\n+/// ```ignore (illustrative)\n+/// type X<T> = impl Clone;\n /// fn f<T: Clone>(t: T) -> X<T> {\n ///     t\n /// }\n+/// ```\n ///\n /// Without this check the above code is incorrectly accepted: we would ICE if\n /// some tried, for example, to clone an `Option<X<&mut ()>>`."}, {"sha": "213b89fc7843c150ebf94c6c9aa3478ca31f4ac9", "filename": "compiler/rustc_hir_analysis/src/constrained_generic_params.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/adc24d1b5efb768a8e81ec5a26133f2351c4dd3f/compiler%2Frustc_hir_analysis%2Fsrc%2Fconstrained_generic_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc24d1b5efb768a8e81ec5a26133f2351c4dd3f/compiler%2Frustc_hir_analysis%2Fsrc%2Fconstrained_generic_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fconstrained_generic_params.rs?ref=adc24d1b5efb768a8e81ec5a26133f2351c4dd3f", "patch": "@@ -114,9 +114,9 @@ pub fn identify_constrained_generic_params<'tcx>(\n /// ```\n /// The impl's predicates are collected from left to right. Ignoring\n /// the implicit `Sized` bounds, these are\n-///   * T: Debug\n-///   * U: Iterator\n-///   * <U as Iterator>::Item = T -- a desugared ProjectionPredicate\n+///   * `T: Debug`\n+///   * `U: Iterator`\n+///   * `<U as Iterator>::Item = T` -- a desugared ProjectionPredicate\n ///\n /// When we, for example, try to go over the trait-reference\n /// `IntoIter<u32> as Trait`, we substitute the impl parameters with fresh\n@@ -132,12 +132,16 @@ pub fn identify_constrained_generic_params<'tcx>(\n ///\n /// We *do* have to be somewhat careful when projection targets contain\n /// projections themselves, for example in\n+///\n+/// ```ignore (illustrative)\n ///     impl<S,U,V,W> Trait for U where\n /// /* 0 */   S: Iterator<Item = U>,\n /// /* - */   U: Iterator,\n /// /* 1 */   <U as Iterator>::Item: ToOwned<Owned=(W,<V as Iterator>::Item)>\n /// /* 2 */   W: Iterator<Item = V>\n /// /* 3 */   V: Debug\n+/// ```\n+///\n /// we have to evaluate the projections in the order I wrote them:\n /// `V: Debug` requires `V` to be evaluated. The only projection that\n /// *determines* `V` is 2 (1 contains it, but *does not determine it*,"}, {"sha": "e806e94879d932641087b87b842ae3fdab334b98", "filename": "compiler/rustc_hir_analysis/src/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/adc24d1b5efb768a8e81ec5a26133f2351c4dd3f/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc24d1b5efb768a8e81ec5a26133f2351c4dd3f/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs?ref=adc24d1b5efb768a8e81ec5a26133f2351c4dd3f", "patch": "@@ -130,8 +130,10 @@ fn check_always_applicable(tcx: TyCtxt<'_>, impl1_def_id: LocalDefId, impl2_node\n ///\n /// Example\n ///\n+/// ```ignore (illustrative)\n /// impl<A, B> Foo<A> for B { /* impl2 */ }\n /// impl<C> Foo<Vec<C>> for C { /* impl1 */ }\n+/// ```\n ///\n /// Would return `S1 = [C]` and `S2 = [Vec<C>, C]`.\n fn get_impl_substs<'tcx>(\n@@ -225,13 +227,17 @@ fn unconstrained_parent_impl_substs<'tcx>(\n ///\n /// For example forbid the following:\n ///\n+/// ```ignore (illustrative)\n /// impl<A> Tr for A { }\n /// impl<B> Tr for (B, B) { }\n+/// ```\n ///\n /// Note that only consider the unconstrained parameters of the base impl:\n ///\n+/// ```ignore (illustrative)\n /// impl<S, I: IntoIterator<Item = S>> Tr<S> for I { }\n /// impl<T> Tr<T> for Vec<T> { }\n+/// ```\n ///\n /// The substs for the parent impl here are `[T, Vec<T>]`, which repeats `T`,\n /// but `S` is constrained in the parent impl, so `parent_substs` is only\n@@ -256,8 +262,10 @@ fn check_duplicate_params<'tcx>(\n ///\n /// For example forbid the following:\n ///\n+/// ```ignore (illustrative)\n /// impl<A> Tr for A { }\n /// impl Tr for &'static i32 { }\n+/// ```\n fn check_static_lifetimes<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     parent_substs: &Vec<GenericArg<'tcx>>,"}, {"sha": "b62c5b5e077833229e3362075ef7619209fded8b", "filename": "compiler/rustc_hir_analysis/src/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adc24d1b5efb768a8e81ec5a26133f2351c4dd3f/compiler%2Frustc_hir_analysis%2Fsrc%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc24d1b5efb768a8e81ec5a26133f2351c4dd3f/compiler%2Frustc_hir_analysis%2Fsrc%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fmem_categorization.rs?ref=adc24d1b5efb768a8e81ec5a26133f2351c4dd3f", "patch": "@@ -184,7 +184,7 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n     ///   modes #42640) may look like `Some(x)` but in fact have\n     ///   implicit deref patterns attached (e.g., it is really\n     ///   `&Some(x)`). In that case, we return the \"outermost\" type\n-    ///   (e.g., `&Option<T>).\n+    ///   (e.g., `&Option<T>`).\n     pub(crate) fn pat_ty_adjusted(&self, pat: &hir::Pat<'_>) -> McResult<Ty<'tcx>> {\n         // Check for implicit `&` types wrapping the pattern; note\n         // that these are never attached to binding patterns, so"}, {"sha": "f46f0ea4cabed078c20ed232afec33b9c6aedb4b", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adc24d1b5efb768a8e81ec5a26133f2351c4dd3f/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc24d1b5efb768a8e81ec5a26133f2351c4dd3f/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=adc24d1b5efb768a8e81ec5a26133f2351c4dd3f", "patch": "@@ -203,7 +203,7 @@ pub enum StmtKind<'tcx> {\n         /// `let pat: ty = <INIT>`\n         initializer: Option<ExprId>,\n \n-        /// `let pat: ty = <INIT> else { <ELSE> }\n+        /// `let pat: ty = <INIT> else { <ELSE> }`\n         else_block: Option<BlockId>,\n \n         /// The lint level for this `let` statement."}, {"sha": "26b6be7a1b891e9bea15109143440cd576b3f19e", "filename": "compiler/rustc_middle/src/ty/adt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/adc24d1b5efb768a8e81ec5a26133f2351c4dd3f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc24d1b5efb768a8e81ec5a26133f2351c4dd3f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs?ref=adc24d1b5efb768a8e81ec5a26133f2351c4dd3f", "patch": "@@ -332,13 +332,13 @@ impl<'tcx> AdtDef<'tcx> {\n         self.flags().contains(AdtFlags::IS_PHANTOM_DATA)\n     }\n \n-    /// Returns `true` if this is Box<T>.\n+    /// Returns `true` if this is `Box<T>`.\n     #[inline]\n     pub fn is_box(self) -> bool {\n         self.flags().contains(AdtFlags::IS_BOX)\n     }\n \n-    /// Returns `true` if this is UnsafeCell<T>.\n+    /// Returns `true` if this is `UnsafeCell<T>`.\n     #[inline]\n     pub fn is_unsafe_cell(self) -> bool {\n         self.flags().contains(AdtFlags::IS_UNSAFE_CELL)"}, {"sha": "3dcadb4c9115f90ce30d372a7aba764ef6a99e1d", "filename": "compiler/rustc_parse/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/adc24d1b5efb768a8e81ec5a26133f2351c4dd3f/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc24d1b5efb768a8e81ec5a26133f2351c4dd3f/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flib.rs?ref=adc24d1b5efb768a8e81ec5a26133f2351c4dd3f", "patch": "@@ -39,7 +39,8 @@ mod errors;\n // uses a HOF to parse anything, and <source> includes file and\n // `source_str`.\n \n-/// A variant of 'panictry!' that works on a Vec<Diagnostic> instead of a single DiagnosticBuilder.\n+/// A variant of 'panictry!' that works on a `Vec<Diagnostic>` instead of a single\n+/// `DiagnosticBuilder`.\n macro_rules! panictry_buffer {\n     ($handler:expr, $e:expr) => {{\n         use rustc_errors::FatalError;"}, {"sha": "ed34ab95ad6c00009e96e4b4b81062525d40d427", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/adc24d1b5efb768a8e81ec5a26133f2351c4dd3f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc24d1b5efb768a8e81ec5a26133f2351c4dd3f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=adc24d1b5efb768a8e81ec5a26133f2351c4dd3f", "patch": "@@ -66,13 +66,13 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n     /// struct Foo<T> { data: Box<T> }\n     /// ```\n     ///\n-    /// then this might return that Foo<T>: Send if T: Send (encoded in the AutoTraitResult type).\n-    /// The analysis attempts to account for custom impls as well as other complex cases. This\n-    /// result is intended for use by rustdoc and other such consumers.\n+    /// then this might return that `Foo<T>: Send` if `T: Send` (encoded in the AutoTraitResult\n+    /// type). The analysis attempts to account for custom impls as well as other complex cases.\n+    /// This result is intended for use by rustdoc and other such consumers.\n     ///\n     /// (Note that due to the coinductive nature of Send, the full and correct result is actually\n     /// quite simple to generate. That is, when a type has no custom impl, it is Send iff its field\n-    /// types are all Send. So, in our example, we might have that Foo<T>: Send if Box<T>: Send.\n+    /// types are all Send. So, in our example, we might have that `Foo<T>: Send` if `Box<T>: Send`.\n     /// But this is often not the best way to present to the user.)\n     ///\n     /// Warning: The API should be considered highly unstable, and it may be refactored or removed"}, {"sha": "511646b0eaf2963ba65a14f7213deaee3470ffd6", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/adc24d1b5efb768a8e81ec5a26133f2351c4dd3f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc24d1b5efb768a8e81ec5a26133f2351c4dd3f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=adc24d1b5efb768a8e81ec5a26133f2351c4dd3f", "patch": "@@ -62,7 +62,8 @@ enum ProjectionCandidate<'tcx> {\n     /// From a where-clause in the env or object type\n     ParamEnv(ty::PolyProjectionPredicate<'tcx>),\n \n-    /// From the definition of `Trait` when you have something like <<A as Trait>::B as Trait2>::C\n+    /// From the definition of `Trait` when you have something like\n+    /// `<<A as Trait>::B as Trait2>::C`.\n     TraitDef(ty::PolyProjectionPredicate<'tcx>),\n \n     /// Bounds specified on an object type\n@@ -1367,7 +1368,7 @@ fn assemble_candidates_from_param_env<'cx, 'tcx>(\n     );\n }\n \n-/// In the case of a nested projection like <<A as Foo>::FooT as Bar>::BarT, we may find\n+/// In the case of a nested projection like `<<A as Foo>::FooT as Bar>::BarT`, we may find\n /// that the definition of `Foo` has some clues:\n ///\n /// ```ignore (illustrative)"}, {"sha": "ddabea700d374f3a1a6fe2730925b65fefd084f5", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adc24d1b5efb768a8e81ec5a26133f2351c4dd3f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc24d1b5efb768a8e81ec5a26133f2351c4dd3f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=adc24d1b5efb768a8e81ec5a26133f2351c4dd3f", "patch": "@@ -826,7 +826,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     /// must be met of course). One obvious case this comes up is\n     /// marker traits like `Send`. Think of a linked list:\n     ///\n-    ///    struct List<T> { data: T, next: Option<Box<List<T>>> }\n+    ///     struct List<T> { data: T, next: Option<Box<List<T>>> }\n     ///\n     /// `Box<List<T>>` will be `Send` if `T` is `Send` and\n     /// `Option<Box<List<T>>>` is `Send`, and in turn"}]}