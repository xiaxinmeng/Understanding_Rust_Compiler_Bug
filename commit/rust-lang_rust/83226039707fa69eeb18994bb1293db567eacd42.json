{"sha": "83226039707fa69eeb18994bb1293db567eacd42", "node_id": "C_kwDOAAsO6NoAKDgzMjI2MDM5NzA3ZmE2OWVlYjE4OTk0YmIxMjkzZGI1NjdlYWNkNDI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-31T22:14:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-31T22:14:46Z"}, "message": "Rollup merge of #92338 - Xuanwo:try_reserve, r=dtolnay\n\nAdd try_reserve and  try_reserve_exact for OsString\n\nAdd `try_reserve` and `try_reserve_exact` for OsString.\n\nPart of https://github.com/rust-lang/rust/issues/91789\n\nI will squash the commits after PR is ready to merge.\n\nSigned-off-by: Xuanwo <github@xuanwo.io>", "tree": {"sha": "6d5fe61dab791dbbfbaf3a95e788c10092b40f49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d5fe61dab791dbbfbaf3a95e788c10092b40f49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83226039707fa69eeb18994bb1293db567eacd42", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhz4DXCRBK7hj4Ov3rIwAAVmgIAHCAr35A8R88LF5k8xphQmCK\n1UOxrm9xLCEg4JAqdU5FTFaLTsq029QQyvTErGbzvYp3YRlrHKC0cAsg4XUDnsZE\nVg36HruLvfTVbJ2pc2z4aawP+DPqGa6B/HsUxT3WKoltGkeTrcS+2n/4LxM9qkPP\n9h7m1E0Fd3aJxrSyDZty0zux/EtKjjv1Nf4BVPD0mIVRcM1khA6iNtvc1T5yDIVl\nWtEl7pWli6lKZYFZqq3ahTp8b7h+1tDWmosmRkH5jKegbLpArfIIeySoFSY1W+ZN\nHHm5deUJ/AajitlpIjBofehAniPvTZMWbE310r3uuL/x9eCkoFSDSG0+WmFIDZA=\n=awtP\n-----END PGP SIGNATURE-----\n", "payload": "tree 6d5fe61dab791dbbfbaf3a95e788c10092b40f49\nparent 72e36d47e830a175815aba937d8a669d72d028fd\nparent d29941e7249c73327317b0c3ebaa98ae3228bcfc\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1640988886 +0100\ncommitter GitHub <noreply@github.com> 1640988886 +0100\n\nRollup merge of #92338 - Xuanwo:try_reserve, r=dtolnay\n\nAdd try_reserve and  try_reserve_exact for OsString\n\nAdd `try_reserve` and `try_reserve_exact` for OsString.\n\nPart of https://github.com/rust-lang/rust/issues/91789\n\nI will squash the commits after PR is ready to merge.\n\nSigned-off-by: Xuanwo <github@xuanwo.io>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83226039707fa69eeb18994bb1293db567eacd42", "html_url": "https://github.com/rust-lang/rust/commit/83226039707fa69eeb18994bb1293db567eacd42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83226039707fa69eeb18994bb1293db567eacd42/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72e36d47e830a175815aba937d8a669d72d028fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/72e36d47e830a175815aba937d8a669d72d028fd", "html_url": "https://github.com/rust-lang/rust/commit/72e36d47e830a175815aba937d8a669d72d028fd"}, {"sha": "d29941e7249c73327317b0c3ebaa98ae3228bcfc", "url": "https://api.github.com/repos/rust-lang/rust/commits/d29941e7249c73327317b0c3ebaa98ae3228bcfc", "html_url": "https://github.com/rust-lang/rust/commit/d29941e7249c73327317b0c3ebaa98ae3228bcfc"}], "stats": {"total": 138, "additions": 138, "deletions": 0}, "files": [{"sha": "982ad1898788e26104382347d239f8848bbfe1fa", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/83226039707fa69eeb18994bb1293db567eacd42/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83226039707fa69eeb18994bb1293db567eacd42/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=83226039707fa69eeb18994bb1293db567eacd42", "patch": "@@ -3,6 +3,7 @@ mod tests;\n \n use crate::borrow::{Borrow, Cow};\n use crate::cmp;\n+use crate::collections::TryReserveError;\n use crate::fmt;\n use crate::hash::{Hash, Hasher};\n use crate::iter::{Extend, FromIterator};\n@@ -265,6 +266,43 @@ impl OsString {\n         self.inner.reserve(additional)\n     }\n \n+    /// Tries to reserve capacity for at least `additional` more length units\n+    /// in the given `OsString`. The string may reserve more space to avoid\n+    /// frequent reallocations. After calling `try_reserve`, capacity will be\n+    /// greater than or equal to `self.len() + additional`. Does nothing if\n+    /// capacity is already sufficient.\n+    ///\n+    /// # Errors\n+    ///\n+    /// If the capacity overflows, or the allocator reports a failure, then an error\n+    /// is returned.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(try_reserve_2)]\n+    /// use std::ffi::{OsStr, OsString};\n+    /// use std::collections::TryReserveError;\n+    ///\n+    /// fn process_data(data: &str) -> Result<OsString, TryReserveError> {\n+    ///     let mut s = OsString::new();\n+    ///\n+    ///     // Pre-reserve the memory, exiting if we can't\n+    ///     s.try_reserve(OsStr::new(data).len())?;\n+    ///\n+    ///     // Now we know this can't OOM in the middle of our complex work\n+    ///     s.push(data);\n+    ///\n+    ///     Ok(s)\n+    /// }\n+    /// # process_data(\"123\").expect(\"why is the test harness OOMing on 3 bytes?\");\n+    /// ```\n+    #[unstable(feature = \"try_reserve_2\", issue = \"91789\")]\n+    #[inline]\n+    pub fn try_reserve(&mut self, additional: usize) -> Result<(), TryReserveError> {\n+        self.inner.try_reserve(additional)\n+    }\n+\n     /// Reserves the minimum capacity for exactly `additional` more capacity to\n     /// be inserted in the given `OsString`. Does nothing if the capacity is\n     /// already sufficient.\n@@ -290,6 +328,49 @@ impl OsString {\n         self.inner.reserve_exact(additional)\n     }\n \n+    /// Tries to reserve the minimum capacity for exactly `additional`\n+    /// more length units in the given `OsString`. After calling\n+    /// `try_reserve_exact`, capacity will be greater than or equal to\n+    /// `self.len() + additional` if it returns `Ok(())`.\n+    /// Does nothing if the capacity is already sufficient.\n+    ///\n+    /// Note that the allocator may give the `OsString` more space than it\n+    /// requests. Therefore, capacity can not be relied upon to be precisely\n+    /// minimal. Prefer [`try_reserve`] if future insertions are expected.\n+    ///\n+    /// [`try_reserve`]: OsString::try_reserve\n+    ///\n+    /// # Errors\n+    ///\n+    /// If the capacity overflows, or the allocator reports a failure, then an error\n+    /// is returned.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(try_reserve_2)]\n+    /// use std::ffi::{OsStr, OsString};\n+    /// use std::collections::TryReserveError;\n+    ///\n+    /// fn process_data(data: &str) -> Result<OsString, TryReserveError> {\n+    ///     let mut s = OsString::new();\n+    ///\n+    ///     // Pre-reserve the memory, exiting if we can't\n+    ///     s.try_reserve_exact(OsStr::new(data).len())?;\n+    ///\n+    ///     // Now we know this can't OOM in the middle of our complex work\n+    ///     s.push(data);\n+    ///\n+    ///     Ok(s)\n+    /// }\n+    /// # process_data(\"123\").expect(\"why is the test harness OOMing on 3 bytes?\");\n+    /// ```\n+    #[unstable(feature = \"try_reserve_2\", issue = \"91789\")]\n+    #[inline]\n+    pub fn try_reserve_exact(&mut self, additional: usize) -> Result<(), TryReserveError> {\n+        self.inner.try_reserve_exact(additional)\n+    }\n+\n     /// Shrinks the capacity of the `OsString` to match its length.\n     ///\n     /// # Examples"}, {"sha": "ccbc182240cf3ddc9551bb188f38bdc12cefe60d", "filename": "library/std/src/sys/unix/os_str.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/83226039707fa69eeb18994bb1293db567eacd42/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83226039707fa69eeb18994bb1293db567eacd42/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos_str.rs?ref=83226039707fa69eeb18994bb1293db567eacd42", "patch": "@@ -2,6 +2,7 @@\n //! systems: just a `Vec<u8>`/`[u8]`.\n \n use crate::borrow::Cow;\n+use crate::collections::TryReserveError;\n use crate::fmt;\n use crate::fmt::Write;\n use crate::mem;\n@@ -112,11 +113,21 @@ impl Buf {\n         self.inner.reserve(additional)\n     }\n \n+    #[inline]\n+    pub fn try_reserve(&mut self, additional: usize) -> Result<(), TryReserveError> {\n+        self.inner.try_reserve(additional)\n+    }\n+\n     #[inline]\n     pub fn reserve_exact(&mut self, additional: usize) {\n         self.inner.reserve_exact(additional)\n     }\n \n+    #[inline]\n+    pub fn try_reserve_exact(&mut self, additional: usize) -> Result<(), TryReserveError> {\n+        self.inner.try_reserve_exact(additional)\n+    }\n+\n     #[inline]\n     pub fn shrink_to_fit(&mut self) {\n         self.inner.shrink_to_fit()"}, {"sha": "78e92a3331a1c4678ced79fe119cc263cdb5567b", "filename": "library/std/src/sys/windows/os_str.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/83226039707fa69eeb18994bb1293db567eacd42/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83226039707fa69eeb18994bb1293db567eacd42/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fos_str.rs?ref=83226039707fa69eeb18994bb1293db567eacd42", "patch": "@@ -1,6 +1,7 @@\n /// The underlying OsString/OsStr implementation on Windows is a\n /// wrapper around the \"WTF-8\" encoding; see the `wtf8` module for more.\n use crate::borrow::Cow;\n+use crate::collections::TryReserveError;\n use crate::fmt;\n use crate::mem;\n use crate::rc::Rc;\n@@ -104,10 +105,18 @@ impl Buf {\n         self.inner.reserve(additional)\n     }\n \n+    pub fn try_reserve(&mut self, additional: usize) -> Result<(), TryReserveError> {\n+        self.inner.try_reserve(additional)\n+    }\n+\n     pub fn reserve_exact(&mut self, additional: usize) {\n         self.inner.reserve_exact(additional)\n     }\n \n+    pub fn try_reserve_exact(&mut self, additional: usize) -> Result<(), TryReserveError> {\n+        self.inner.try_reserve_exact(additional)\n+    }\n+\n     pub fn shrink_to_fit(&mut self) {\n         self.inner.shrink_to_fit()\n     }"}, {"sha": "7a6e6246357d1d726162237e59db7faf05a079f5", "filename": "library/std/src/sys_common/wtf8.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/83226039707fa69eeb18994bb1293db567eacd42/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83226039707fa69eeb18994bb1293db567eacd42/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8.rs?ref=83226039707fa69eeb18994bb1293db567eacd42", "patch": "@@ -22,6 +22,7 @@ use core::str::next_code_point;\n \n use crate::borrow::Cow;\n use crate::char;\n+use crate::collections::TryReserveError;\n use crate::fmt;\n use crate::hash::{Hash, Hasher};\n use crate::iter::FromIterator;\n@@ -231,11 +232,47 @@ impl Wtf8Buf {\n         self.bytes.reserve(additional)\n     }\n \n+    /// Tries to reserve capacity for at least `additional` more length units\n+    /// in the given `Wtf8Buf`. The `Wtf8Buf` may reserve more space to avoid\n+    /// frequent reallocations. After calling `try_reserve`, capacity will be\n+    /// greater than or equal to `self.len() + additional`. Does nothing if\n+    /// capacity is already sufficient.\n+    ///\n+    /// # Errors\n+    ///\n+    /// If the capacity overflows, or the allocator reports a failure, then an error\n+    /// is returned.\n+    #[inline]\n+    pub fn try_reserve(&mut self, additional: usize) -> Result<(), TryReserveError> {\n+        self.bytes.try_reserve(additional)\n+    }\n+\n     #[inline]\n     pub fn reserve_exact(&mut self, additional: usize) {\n         self.bytes.reserve_exact(additional)\n     }\n \n+    /// Tries to reserve the minimum capacity for exactly `additional`\n+    /// length units in the given `Wtf8Buf`. After calling\n+    /// `try_reserve_exact`, capacity will be greater than or equal to\n+    /// `self.len() + additional` if it returns `Ok(())`.\n+    /// Does nothing if the capacity is already sufficient.\n+    ///\n+    /// Note that the allocator may give the `Wtf8Buf` more space than it\n+    /// requests. Therefore, capacity can not be relied upon to be precisely\n+    /// minimal. Prefer [`try_reserve`] if future insertions are expected.\n+    ///\n+    /// [`try_reserve`]: Wtf8Buf::try_reserve\n+    ///\n+    /// # Errors\n+    ///\n+    /// If the capacity overflows, or the allocator reports a failure, then an error\n+    /// is returned.\n+    #[inline]\n+    pub fn try_reserve_exact(&mut self, additional: usize) -> Result<(), TryReserveError> {\n+        self.bytes.try_reserve_exact(additional)\n+    }\n+\n     #[inline]\n     pub fn shrink_to_fit(&mut self) {\n         self.bytes.shrink_to_fit()"}]}