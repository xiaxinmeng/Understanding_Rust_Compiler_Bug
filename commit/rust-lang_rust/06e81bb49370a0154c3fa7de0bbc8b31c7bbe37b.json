{"sha": "06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2ZTgxYmI0OTM3MGEwMTU0YzNmYTdkZTBiYmM4YjMxYzdiYmUzN2I=", "commit": {"author": {"name": "Samuel E. Moelius III", "email": "sam@moeli.us", "date": "2020-11-08T23:32:12Z"}, "committer": {"name": "Samuel E. Moelius III", "email": "sam@moeli.us", "date": "2020-11-08T23:32:12Z"}, "message": "Update references", "tree": {"sha": "28ccacc96e5bccea53241fd8de8f2e80f143bbc4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28ccacc96e5bccea53241fd8de8f2e80f143bbc4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b", "html_url": "https://github.com/rust-lang/rust/commit/06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b/comments", "author": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "committer": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40d7af50ed9811e427aa65b0111bca261ecf1239", "url": "https://api.github.com/repos/rust-lang/rust/commits/40d7af50ed9811e427aa65b0111bca261ecf1239", "html_url": "https://github.com/rust-lang/rust/commit/40d7af50ed9811e427aa65b0111bca261ecf1239"}], "stats": {"total": 549, "additions": 43, "deletions": 506}, "files": [{"sha": "3eac32815be3fac2bb13dfa886623da7a91bb85f", "filename": "tests/ui/borrow_box.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b/tests%2Fui%2Fborrow_box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b/tests%2Fui%2Fborrow_box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrow_box.stderr?ref=06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b", "patch": "@@ -22,15 +22,6 @@ error: you seem to be trying to use `&Box<T>`. Consider using just `&T`\n LL |     fn test4(a: &Box<bool>);\n    |                 ^^^^^^^^^^ help: try: `&bool`\n \n-error: non-binding let on a type that implements `Drop`\n-  --> $DIR/borrow_box.rs:63:5\n-   |\n-LL |     let _ = foo;\n-   |     ^^^^^^^^^^^^\n-   |\n-   = note: `#[deny(clippy::let_underscore_drop)]` on by default\n-   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n-\n error: you seem to be trying to use `&Box<T>`. Consider using just `&T`\n   --> $DIR/borrow_box.rs:95:25\n    |\n@@ -73,5 +64,5 @@ error: you seem to be trying to use `&Box<T>`. Consider using just `&T`\n LL | pub fn test20(_display: &Box<(dyn Display + Send)>) {}\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&(dyn Display + Send)`\n \n-error: aborting due to 11 previous errors\n+error: aborting due to 10 previous errors\n "}, {"sha": "9a908cf30e945cc100e1a98126448250704031f0", "filename": "tests/ui/borrow_interior_mutable_const/others.stderr", "status": "modified", "additions": 1, "deletions": 26, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b/tests%2Fui%2Fborrow_interior_mutable_const%2Fothers.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b/tests%2Fui%2Fborrow_interior_mutable_const%2Fothers.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrow_interior_mutable_const%2Fothers.stderr?ref=06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b", "patch": "@@ -47,15 +47,6 @@ LL |     let _once_mut = &mut ONCE_INIT; //~ ERROR interior mutability\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n-error: non-binding let on a type that implements `Drop`\n-  --> $DIR/others.rs:72:5\n-   |\n-LL |     let _ = &ATOMIC_TUPLE; //~ ERROR interior mutability\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[deny(clippy::let_underscore_drop)]` on by default\n-   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n-\n error: a `const` item with interior mutability should not be borrowed\n   --> $DIR/others.rs:72:14\n    |\n@@ -104,22 +95,6 @@ LL |     let _ = ATOMIC_TUPLE.0[0]; //~ ERROR interior mutability\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n-error: non-binding let on a type that implements `Drop`\n-  --> $DIR/others.rs:83:5\n-   |\n-LL |     let _ = ATOMIC_TUPLE.1.into_iter();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n-\n-error: non-binding let on a type that implements `Drop`\n-  --> $DIR/others.rs:85:5\n-   |\n-LL |     let _ = &{ ATOMIC_TUPLE };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n-\n error: a `const` item with interior mutability should not be borrowed\n   --> $DIR/others.rs:87:5\n    |\n@@ -136,5 +111,5 @@ LL |     assert_eq!(CELL.get(), 6); //~ ERROR interior mutability\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n-error: aborting due to 17 previous errors\n+error: aborting due to 14 previous errors\n "}, {"sha": "fca12eddd573f04c1721bf2143d235ad2e3a06aa", "filename": "tests/ui/box_vec.stderr", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b/tests%2Fui%2Fbox_vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b/tests%2Fui%2Fbox_vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox_vec.stderr?ref=06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b", "patch": "@@ -1,16 +1,3 @@\n-error: non-binding let on a type that implements `Drop`\n-  --> $DIR/box_vec.rs:7:9\n-   |\n-LL |         let _: Box<$x> = Box::new($init);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-...\n-LL |     boxit!(Vec::new(), Vec<u8>);\n-   |     ---------------------------- in this macro invocation\n-   |\n-   = note: `-D clippy::let-underscore-drop` implied by `-D warnings`\n-   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n error: you seem to be trying to use `Box<Vec<T>>`. Consider using just `Vec<T>`\n   --> $DIR/box_vec.rs:14:18\n    |\n@@ -20,5 +7,5 @@ LL | pub fn test(foo: Box<Vec<bool>>) {\n    = note: `-D clippy::box-vec` implied by `-D warnings`\n    = help: `Vec<T>` is already on the heap, `Box<Vec<T>>` makes an extra allocation.\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}, {"sha": "9ce39027451dc1e3b18a46f89367df550f203000", "filename": "tests/ui/crashes/ice-4968.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/40d7af50ed9811e427aa65b0111bca261ecf1239/tests%2Fui%2Fcrashes%2Fice-4968.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40d7af50ed9811e427aa65b0111bca261ecf1239/tests%2Fui%2Fcrashes%2Fice-4968.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-4968.stderr?ref=40d7af50ed9811e427aa65b0111bca261ecf1239", "patch": "@@ -1,11 +0,0 @@\n-error: non-binding let on a type that implements `Drop`\n-  --> $DIR/ice-4968.rs:16:9\n-   |\n-LL |         let _: Vec<ManuallyDrop<T::Assoc>> = mem::transmute(slice);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[deny(clippy::let_underscore_drop)]` on by default\n-   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n-\n-error: aborting due to previous error\n-"}, {"sha": "3ae2dd5f7705f9b27546e5280427798be5b6d2d7", "filename": "tests/ui/crashes/ice-5223.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/40d7af50ed9811e427aa65b0111bca261ecf1239/tests%2Fui%2Fcrashes%2Fice-5223.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40d7af50ed9811e427aa65b0111bca261ecf1239/tests%2Fui%2Fcrashes%2Fice-5223.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-5223.stderr?ref=40d7af50ed9811e427aa65b0111bca261ecf1239", "patch": "@@ -1,11 +0,0 @@\n-error: non-binding let on a type that implements `Drop`\n-  --> $DIR/ice-5223.rs:14:9\n-   |\n-LL |         let _ = self.arr.iter().cloned().collect::<Vec<_>>();\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[deny(clippy::let_underscore_drop)]` on by default\n-   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n-\n-error: aborting due to previous error\n-"}, {"sha": "c86a769a3da4b170e2dbbc93118ed5a49dd0b216", "filename": "tests/ui/escape_analysis.stderr", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b/tests%2Fui%2Fescape_analysis.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b/tests%2Fui%2Fescape_analysis.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fescape_analysis.stderr?ref=06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b", "patch": "@@ -12,26 +12,5 @@ error: local variable doesn't need to be boxed here\n LL | pub fn new(_needs_name: Box<PeekableSeekable<&()>>) -> () {}\n    |            ^^^^^^^^^^^\n \n-error: non-binding let on a type that implements `Drop`\n-  --> $DIR/escape_analysis.rs:166:9\n-   |\n-LL | /         let _ = move || {\n-LL | |             consume(x);\n-LL | |         };\n-   | |__________^\n-   |\n-   = note: `#[deny(clippy::let_underscore_drop)]` on by default\n-   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n-\n-error: non-binding let on a type that implements `Drop`\n-  --> $DIR/escape_analysis.rs:172:9\n-   |\n-LL | /         let _ = || {\n-LL | |             borrow(&x);\n-LL | |         };\n-   | |__________^\n-   |\n-   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n "}, {"sha": "c4713ca8083dd1f1afb28d0dafe2c7fc793d5da3", "filename": "tests/ui/eta.stderr", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b/tests%2Fui%2Feta.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b/tests%2Fui%2Feta.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.stderr?ref=06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b", "patch": "@@ -64,15 +64,6 @@ error: redundant closure found\n LL |     let e: std::vec::Vec<char> = vec!['a', 'b', 'c'].iter().map(|c| c.to_ascii_uppercase()).collect();\n    |                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove closure as shown: `char::to_ascii_uppercase`\n \n-error: non-binding let on a type that implements `Drop`\n-  --> $DIR/eta.rs:107:5\n-   |\n-LL |     let _: Vec<_> = arr.iter().map(|x| x.map_err(|e| some.take().unwrap()(e))).collect();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[deny(clippy::let_underscore_drop)]` on by default\n-   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n-\n error: redundant closure found\n   --> $DIR/eta.rs:172:27\n    |\n@@ -85,13 +76,5 @@ error: redundant closure found\n LL |     let a = Some(1u8).map(|a| closure(a));\n    |                           ^^^^^^^^^^^^^^ help: remove closure as shown: `closure`\n \n-error: non-binding let on a type that implements `Drop`\n-  --> $DIR/eta.rs:203:5\n-   |\n-LL |     let _ = [Bar].iter().map(|s| s.to_string()).collect::<Vec<_>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n-\n-error: aborting due to 14 previous errors\n+error: aborting due to 12 previous errors\n "}, {"sha": "b5ac90282dc904078fb123a546b38dc306000c7b", "filename": "tests/ui/filter_methods.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b/tests%2Fui%2Ffilter_methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b/tests%2Fui%2Ffilter_methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffilter_methods.stderr?ref=06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b", "patch": "@@ -1,4 +1,4 @@\n-error: non-binding let on a type that implements `Drop`\n+error: non-binding `let` on a type that implements `Drop`\n   --> $DIR/filter_methods.rs:5:5\n    |\n LL |     let _: Vec<_> = vec![5; 6].into_iter().filter(|&x| x == 0).map(|x| x * 2).collect();\n@@ -16,7 +16,7 @@ LL |     let _: Vec<_> = vec![5; 6].into_iter().filter(|&x| x == 0).map(|x| x *\n    = note: `-D clippy::filter-map` implied by `-D warnings`\n    = help: this is more succinctly expressed by calling `.filter_map(..)` instead\n \n-error: non-binding let on a type that implements `Drop`\n+error: non-binding `let` on a type that implements `Drop`\n   --> $DIR/filter_methods.rs:7:5\n    |\n LL | /     let _: Vec<_> = vec![5_i8; 6]\n@@ -40,7 +40,7 @@ LL | |         .flat_map(|x| x.checked_mul(2))\n    |\n    = help: this is more succinctly expressed by calling `.flat_map(..)` and filtering by returning `iter::empty()`\n \n-error: non-binding let on a type that implements `Drop`\n+error: non-binding `let` on a type that implements `Drop`\n   --> $DIR/filter_methods.rs:13:5\n    |\n LL | /     let _: Vec<_> = vec![5_i8; 6]\n@@ -64,7 +64,7 @@ LL | |         .flat_map(|x| x.checked_mul(2))\n    |\n    = help: this is more succinctly expressed by calling `.flat_map(..)` and filtering by returning `iter::empty()`\n \n-error: non-binding let on a type that implements `Drop`\n+error: non-binding `let` on a type that implements `Drop`\n   --> $DIR/filter_methods.rs:19:5\n    |\n LL | /     let _: Vec<_> = vec![5_i8; 6]"}, {"sha": "76a098df82aa199adb0186eb098b0e540fc6ba91", "filename": "tests/ui/get_unwrap.stderr", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b/tests%2Fui%2Fget_unwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b/tests%2Fui%2Fget_unwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fget_unwrap.stderr?ref=06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b", "patch": "@@ -70,34 +70,17 @@ error: called `.get_mut().unwrap()` on a VecDeque. Using `[]` is more clear and\n LL |         *some_vecdeque.get_mut(0).unwrap() = 1;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_vecdeque[0]`\n \n-error: non-binding let on a type that implements `Drop`\n-  --> $DIR/get_unwrap.rs:59:9\n-   |\n-LL |         let _ = some_vec.get(0..1).unwrap().to_vec();\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[deny(clippy::let_underscore_drop)]` on by default\n-   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n-\n error: called `.get().unwrap()` on a Vec. Using `[]` is more clear and more concise\n   --> $DIR/get_unwrap.rs:59:17\n    |\n LL |         let _ = some_vec.get(0..1).unwrap().to_vec();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_vec[0..1]`\n \n-error: non-binding let on a type that implements `Drop`\n-  --> $DIR/get_unwrap.rs:60:9\n-   |\n-LL |         let _ = some_vec.get_mut(0..1).unwrap().to_vec();\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n-\n error: called `.get_mut().unwrap()` on a Vec. Using `[]` is more clear and more concise\n   --> $DIR/get_unwrap.rs:60:17\n    |\n LL |         let _ = some_vec.get_mut(0..1).unwrap().to_vec();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_vec[0..1]`\n \n-error: aborting due to 15 previous errors\n+error: aborting due to 13 previous errors\n "}, {"sha": "28003b365bbd50f675dd7fb11bf4759a3badb243", "filename": "tests/ui/into_iter_on_ref.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b/tests%2Fui%2Finto_iter_on_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b/tests%2Fui%2Finto_iter_on_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finto_iter_on_ref.stderr?ref=06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b", "patch": "@@ -1,12 +1,3 @@\n-error: non-binding let on a type that implements `Drop`\n-  --> $DIR/into_iter_on_ref.rs:13:5\n-   |\n-LL |     let _ = vec![1, 2, 3].into_iter();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[deny(clippy::let_underscore_drop)]` on by default\n-   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n-\n error: this `.into_iter()` call is equivalent to `.iter()` and will not consume the `Vec`\n   --> $DIR/into_iter_on_ref.rs:14:30\n    |\n@@ -171,5 +162,5 @@ error: this `.into_iter()` call is equivalent to `.iter()` and will not consume\n LL |     let _ = (&[1, 2, 3]).into_iter().next(); //~ WARN equivalent to .iter()\n    |                          ^^^^^^^^^ help: call directly: `iter`\n \n-error: aborting due to 28 previous errors\n+error: aborting due to 27 previous errors\n "}, {"sha": "b90a1e6c9196733db6f63a23f2e48a2e0dfe136e", "filename": "tests/ui/iter_cloned_collect.stderr", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b/tests%2Fui%2Fiter_cloned_collect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b/tests%2Fui%2Fiter_cloned_collect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_cloned_collect.stderr?ref=06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b", "patch": "@@ -6,33 +6,12 @@ LL |     let v2: Vec<isize> = v.iter().cloned().collect();\n    |\n    = note: `-D clippy::iter-cloned-collect` implied by `-D warnings`\n \n-error: non-binding let on a type that implements `Drop`\n-  --> $DIR/iter_cloned_collect.rs:15:5\n-   |\n-LL |     let _: Vec<isize> = vec![1, 2, 3].iter().cloned().collect();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[deny(clippy::let_underscore_drop)]` on by default\n-   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n-\n error: called `iter().cloned().collect()` on a slice to create a `Vec`. Calling `to_vec()` is both faster and more readable\n   --> $DIR/iter_cloned_collect.rs:15:38\n    |\n LL |     let _: Vec<isize> = vec![1, 2, 3].iter().cloned().collect();\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.to_vec()`\n \n-error: non-binding let on a type that implements `Drop`\n-  --> $DIR/iter_cloned_collect.rs:19:9\n-   |\n-LL | /         let _: Vec<u8> = std::ffi::CStr::from_ptr(std::ptr::null())\n-LL | |             .to_bytes()\n-LL | |             .iter()\n-LL | |             .cloned()\n-LL | |             .collect();\n-   | |_______________________^\n-   |\n-   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n-\n error: called `iter().cloned().collect()` on a slice to create a `Vec`. Calling `to_vec()` is both faster and more readable\n   --> $DIR/iter_cloned_collect.rs:20:24\n    |\n@@ -43,5 +22,5 @@ LL | |             .cloned()\n LL | |             .collect();\n    | |______________________^ help: try: `.to_vec()`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 3 previous errors\n "}, {"sha": "66069e0c5e13f00a8d524c99351a2f7363da0c89", "filename": "tests/ui/let_underscore_drop.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b/tests%2Fui%2Flet_underscore_drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b/tests%2Fui%2Flet_underscore_drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_underscore_drop.stderr?ref=06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b", "patch": "@@ -1,4 +1,4 @@\n-error: non-binding let on a type that implements `Drop`\n+error: non-binding `let` on a type that implements `Drop`\n   --> $DIR/let_underscore_drop.rs:16:5\n    |\n LL |     let _ = Box::new(());\n@@ -7,15 +7,15 @@ LL |     let _ = Box::new(());\n    = note: `-D clippy::let-underscore-drop` implied by `-D warnings`\n    = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n \n-error: non-binding let on a type that implements `Drop`\n+error: non-binding `let` on a type that implements `Drop`\n   --> $DIR/let_underscore_drop.rs:17:5\n    |\n LL |     let _ = Droppable;\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n \n-error: non-binding let on a type that implements `Drop`\n+error: non-binding `let` on a type that implements `Drop`\n   --> $DIR/let_underscore_drop.rs:18:5\n    |\n LL |     let _ = Some(Droppable);"}, {"sha": "ce92b3c0c30394bbe7a7995bc45a4b25d1481dbe", "filename": "tests/ui/map_clone.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b/tests%2Fui%2Fmap_clone.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b/tests%2Fui%2Fmap_clone.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_clone.fixed?ref=06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b", "patch": "@@ -2,6 +2,7 @@\n #![warn(clippy::all, clippy::pedantic)]\n #![allow(clippy::iter_cloned_collect)]\n #![allow(clippy::clone_on_copy, clippy::redundant_clone)]\n+#![allow(clippy::let_underscore_drop)]\n #![allow(clippy::missing_docs_in_private_items)]\n #![allow(clippy::redundant_closure_for_method_calls)]\n #![allow(clippy::many_single_char_names)]"}, {"sha": "324c776c3c9aa8e1915ec11db0b9ec2333223158", "filename": "tests/ui/map_clone.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b/tests%2Fui%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b/tests%2Fui%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_clone.rs?ref=06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b", "patch": "@@ -2,6 +2,7 @@\n #![warn(clippy::all, clippy::pedantic)]\n #![allow(clippy::iter_cloned_collect)]\n #![allow(clippy::clone_on_copy, clippy::redundant_clone)]\n+#![allow(clippy::let_underscore_drop)]\n #![allow(clippy::missing_docs_in_private_items)]\n #![allow(clippy::redundant_closure_for_method_calls)]\n #![allow(clippy::many_single_char_names)]"}, {"sha": "d84a5bf8d4de6f3bc3543b4861543e19a92264f9", "filename": "tests/ui/map_clone.stderr", "status": "modified", "additions": 7, "deletions": 64, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b/tests%2Fui%2Fmap_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b/tests%2Fui%2Fmap_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_clone.stderr?ref=06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b", "patch": "@@ -1,97 +1,40 @@\n-error: non-binding let on a type that implements `Drop`\n-  --> $DIR/map_clone.rs:10:5\n-   |\n-LL |     let _: Vec<i8> = vec![5_i8; 6].iter().map(|x| *x).collect();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::let-underscore-drop` implied by `-D warnings`\n-   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n-\n error: you are using an explicit closure for copying elements\n-  --> $DIR/map_clone.rs:10:22\n+  --> $DIR/map_clone.rs:11:22\n    |\n LL |     let _: Vec<i8> = vec![5_i8; 6].iter().map(|x| *x).collect();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling the dedicated `copied` method: `vec![5_i8; 6].iter().copied()`\n    |\n    = note: `-D clippy::map-clone` implied by `-D warnings`\n \n-error: non-binding let on a type that implements `Drop`\n-  --> $DIR/map_clone.rs:11:5\n-   |\n-LL |     let _: Vec<String> = vec![String::new()].iter().map(|x| x.clone()).collect();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n-\n error: you are using an explicit closure for cloning elements\n-  --> $DIR/map_clone.rs:11:26\n+  --> $DIR/map_clone.rs:12:26\n    |\n LL |     let _: Vec<String> = vec![String::new()].iter().map(|x| x.clone()).collect();\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling the dedicated `cloned` method: `vec![String::new()].iter().cloned()`\n \n-error: non-binding let on a type that implements `Drop`\n-  --> $DIR/map_clone.rs:12:5\n-   |\n-LL |     let _: Vec<u32> = vec![42, 43].iter().map(|&x| x).collect();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n-\n error: you are using an explicit closure for copying elements\n-  --> $DIR/map_clone.rs:12:23\n+  --> $DIR/map_clone.rs:13:23\n    |\n LL |     let _: Vec<u32> = vec![42, 43].iter().map(|&x| x).collect();\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling the dedicated `copied` method: `vec![42, 43].iter().copied()`\n \n error: you are using an explicit closure for copying elements\n-  --> $DIR/map_clone.rs:14:26\n+  --> $DIR/map_clone.rs:15:26\n    |\n LL |     let _: Option<u64> = Some(&16).map(|b| *b);\n    |                          ^^^^^^^^^^^^^^^^^^^^^ help: consider calling the dedicated `copied` method: `Some(&16).copied()`\n \n error: you are using an explicit closure for copying elements\n-  --> $DIR/map_clone.rs:15:25\n+  --> $DIR/map_clone.rs:16:25\n    |\n LL |     let _: Option<u8> = Some(&1).map(|x| x.clone());\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling the dedicated `copied` method: `Some(&1).copied()`\n \n error: you are needlessly cloning iterator elements\n-  --> $DIR/map_clone.rs:26:29\n+  --> $DIR/map_clone.rs:27:29\n    |\n LL |     let _ = std::env::args().map(|v| v.clone());\n    |                             ^^^^^^^^^^^^^^^^^^^ help: remove the `map` call\n \n-error: non-binding let on a type that implements `Drop`\n-  --> $DIR/map_clone.rs:35:9\n-   |\n-LL |         let _: Vec<u32> = v.into_iter().map(|x| *x).collect();\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n-\n-error: non-binding let on a type that implements `Drop`\n-  --> $DIR/map_clone.rs:42:9\n-   |\n-LL |         let _: Vec<u32> = v.into_iter().map(|x| *x).collect();\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n-\n-error: non-binding let on a type that implements `Drop`\n-  --> $DIR/map_clone.rs:45:9\n-   |\n-LL |         let _: Vec<u32> = v.into_iter().map(|&mut x| x).collect();\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n-\n-error: non-binding let on a type that implements `Drop`\n-  --> $DIR/map_clone.rs:53:9\n-   |\n-LL |         let _: Vec<_> = items.into_iter().map(|x| x.clone()).collect();\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n-\n-error: aborting due to 13 previous errors\n+error: aborting due to 6 previous errors\n "}, {"sha": "8b06e13baa6b4f29eba699643a9b1a984af20068", "filename": "tests/ui/map_collect_result_unit.stderr", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b/tests%2Fui%2Fmap_collect_result_unit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b/tests%2Fui%2Fmap_collect_result_unit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_collect_result_unit.stderr?ref=06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b", "patch": "@@ -12,22 +12,5 @@ error: `.map().collect()` can be replaced with `.try_for_each()`\n LL |         let _: Result<(), _> = (0..3).map(|t| Err(t + 1)).collect();\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `(0..3).try_for_each(|t| Err(t + 1))`\n \n-error: non-binding let on a type that implements `Drop`\n-  --> $DIR/map_collect_result_unit.rs:14:5\n-   |\n-LL |     let _ = (0..3).map(|t| Err(t + 1)).collect::<Result<Vec<i32>, _>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[deny(clippy::let_underscore_drop)]` on by default\n-   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n-\n-error: non-binding let on a type that implements `Drop`\n-  --> $DIR/map_collect_result_unit.rs:15:5\n-   |\n-LL |     let _ = (0..3).map(|t| Err(t + 1)).collect::<Vec<Result<(), _>>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n "}, {"sha": "a7ab5a12cb7655e0a2ed5e7f81359715122de928", "filename": "tests/ui/map_flatten.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b/tests%2Fui%2Fmap_flatten.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b/tests%2Fui%2Fmap_flatten.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_flatten.fixed?ref=06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n \n #![warn(clippy::all, clippy::pedantic)]\n+#![allow(clippy::let_underscore_drop)]\n #![allow(clippy::missing_docs_in_private_items)]\n #![allow(clippy::map_identity)]\n "}, {"sha": "e364a05f3760525532babb874cd193d7ced8fef0", "filename": "tests/ui/map_flatten.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b/tests%2Fui%2Fmap_flatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b/tests%2Fui%2Fmap_flatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_flatten.rs?ref=06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n \n #![warn(clippy::all, clippy::pedantic)]\n+#![allow(clippy::let_underscore_drop)]\n #![allow(clippy::missing_docs_in_private_items)]\n #![allow(clippy::map_identity)]\n "}, {"sha": "d4e27f9aa07501638bf529c6886a96d9072e017d", "filename": "tests/ui/map_flatten.stderr", "status": "modified", "additions": 7, "deletions": 48, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b/tests%2Fui%2Fmap_flatten.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b/tests%2Fui%2Fmap_flatten.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_flatten.stderr?ref=06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b", "patch": "@@ -1,81 +1,40 @@\n-error: non-binding let on a type that implements `Drop`\n-  --> $DIR/map_flatten.rs:14:5\n-   |\n-LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(option_id).flatten().collect();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::let-underscore-drop` implied by `-D warnings`\n-   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n-\n error: called `map(..).flatten()` on an `Iterator`\n-  --> $DIR/map_flatten.rs:14:46\n+  --> $DIR/map_flatten.rs:15:46\n    |\n LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(option_id).flatten().collect();\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `filter_map` instead: `.filter_map(option_id)`\n    |\n    = note: `-D clippy::map-flatten` implied by `-D warnings`\n \n-error: non-binding let on a type that implements `Drop`\n-  --> $DIR/map_flatten.rs:15:5\n-   |\n-LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(option_id_ref).flatten().collect();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n-\n error: called `map(..).flatten()` on an `Iterator`\n-  --> $DIR/map_flatten.rs:15:46\n+  --> $DIR/map_flatten.rs:16:46\n    |\n LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(option_id_ref).flatten().collect();\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `filter_map` instead: `.filter_map(option_id_ref)`\n \n-error: non-binding let on a type that implements `Drop`\n-  --> $DIR/map_flatten.rs:16:5\n-   |\n-LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(option_id_closure).flatten().collect();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n-\n error: called `map(..).flatten()` on an `Iterator`\n-  --> $DIR/map_flatten.rs:16:46\n+  --> $DIR/map_flatten.rs:17:46\n    |\n LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(option_id_closure).flatten().collect();\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `filter_map` instead: `.filter_map(option_id_closure)`\n \n-error: non-binding let on a type that implements `Drop`\n-  --> $DIR/map_flatten.rs:17:5\n-   |\n-LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(|x| x.checked_add(1)).flatten().collect();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n-\n error: called `map(..).flatten()` on an `Iterator`\n-  --> $DIR/map_flatten.rs:17:46\n+  --> $DIR/map_flatten.rs:18:46\n    |\n LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(|x| x.checked_add(1)).flatten().collect();\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `filter_map` instead: `.filter_map(|x| x.checked_add(1))`\n \n-error: non-binding let on a type that implements `Drop`\n-  --> $DIR/map_flatten.rs:20:5\n-   |\n-LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(|x| 0..x).flatten().collect();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n-\n error: called `map(..).flatten()` on an `Iterator`\n-  --> $DIR/map_flatten.rs:20:46\n+  --> $DIR/map_flatten.rs:21:46\n    |\n LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(|x| 0..x).flatten().collect();\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `flat_map` instead: `.flat_map(|x| 0..x)`\n \n error: called `map(..).flatten()` on an `Option`\n-  --> $DIR/map_flatten.rs:23:39\n+  --> $DIR/map_flatten.rs:24:39\n    |\n LL |     let _: Option<_> = (Some(Some(1))).map(|x| x).flatten();\n    |                                       ^^^^^^^^^^^^^^^^^^^^^ help: try using `and_then` instead: `.and_then(|x| x)`\n \n-error: aborting due to 11 previous errors\n+error: aborting due to 6 previous errors\n "}, {"sha": "e4a0320cbda55721fffd017087d3db81a0868937", "filename": "tests/ui/map_identity.stderr", "status": "modified", "additions": 1, "deletions": 34, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b/tests%2Fui%2Fmap_identity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b/tests%2Fui%2Fmap_identity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_identity.stderr?ref=06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b", "patch": "@@ -1,12 +1,3 @@\n-error: non-binding let on a type that implements `Drop`\n-  --> $DIR/map_identity.rs:8:5\n-   |\n-LL |     let _: Vec<_> = x.iter().map(not_identity).map(|x| return x).collect();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[deny(clippy::let_underscore_drop)]` on by default\n-   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n-\n error: unnecessary map of the identity function\n   --> $DIR/map_identity.rs:8:47\n    |\n@@ -15,14 +6,6 @@ LL |     let _: Vec<_> = x.iter().map(not_identity).map(|x| return x).collect();\n    |\n    = note: `-D clippy::map-identity` implied by `-D warnings`\n \n-error: non-binding let on a type that implements `Drop`\n-  --> $DIR/map_identity.rs:9:5\n-   |\n-LL |     let _: Vec<_> = x.iter().map(std::convert::identity).map(|y| y).collect();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n-\n error: unnecessary map of the identity function\n   --> $DIR/map_identity.rs:9:57\n    |\n@@ -50,21 +33,5 @@ LL | |         return x;\n LL | |     });\n    | |______^ help: remove the call to `map`\n \n-error: non-binding let on a type that implements `Drop`\n-  --> $DIR/map_identity.rs:15:5\n-   |\n-LL |     let _: Vec<_> = x.iter().map(|x| 2 * x).collect();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n-\n-error: non-binding let on a type that implements `Drop`\n-  --> $DIR/map_identity.rs:16:5\n-   |\n-LL |     let _: Vec<_> = x.iter().map(not_identity).map(|x| return x - 4).collect();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n-\n-error: aborting due to 9 previous errors\n+error: aborting due to 5 previous errors\n "}, {"sha": "795c8c3e24d7e44816419aabc3c3f2256feb2b4f", "filename": "tests/ui/match_single_binding.stderr", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b/tests%2Fui%2Fmatch_single_binding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b/tests%2Fui%2Fmatch_single_binding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_single_binding.stderr?ref=06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b", "patch": "@@ -150,20 +150,6 @@ LL |     let Point { x, y } = coords();\n LL |     let product = x * y;\n    |\n \n-error: non-binding let on a type that implements `Drop`\n-  --> $DIR/match_single_binding.rs:96:5\n-   |\n-LL | /     let _ = v\n-LL | |         .iter()\n-LL | |         .map(|i| match i.unwrap() {\n-LL | |             unwrapped => unwrapped,\n-LL | |         })\n-LL | |         .collect::<Vec<u8>>();\n-   | |______________________________^\n-   |\n-   = note: `#[deny(clippy::let_underscore_drop)]` on by default\n-   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n-\n error: this match could be written as a `let` statement\n   --> $DIR/match_single_binding.rs:98:18\n    |\n@@ -181,5 +167,5 @@ LL |             unwrapped\n LL |         })\n    |\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 11 previous errors\n "}, {"sha": "9aa783bf904e1224a5d1361c0579fd01a2050c73", "filename": "tests/ui/needless_pass_by_value.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b/tests%2Fui%2Fneedless_pass_by_value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b/tests%2Fui%2Fneedless_pass_by_value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_pass_by_value.stderr?ref=06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b", "patch": "@@ -90,15 +90,6 @@ help: change `v.clone()` to\n LL |     let _ = v.to_owned();\n    |             ^^^^^^^^^^^^\n \n-error: non-binding let on a type that implements `Drop`\n-  --> $DIR/needless_pass_by_value.rs:85:5\n-   |\n-LL |     let _ = v.clone();\n-   |     ^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[deny(clippy::let_underscore_drop)]` on by default\n-   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n-\n error: this argument is passed by value, but not consumed in the function body\n   --> $DIR/needless_pass_by_value.rs:94:12\n    |\n@@ -183,5 +174,5 @@ error: this argument is passed by value, but not consumed in the function body\n LL | fn more_fun(_item: impl Club<'static, i32>) {}\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^ help: consider taking a reference instead: `&impl Club<'static, i32>`\n \n-error: aborting due to 23 previous errors\n+error: aborting due to 22 previous errors\n "}, {"sha": "89b39254299107df27cc468f9b761d3f07d269f0", "filename": "tests/ui/redundant_clone.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b/tests%2Fui%2Fredundant_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b/tests%2Fui%2Fredundant_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_clone.stderr?ref=06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b", "patch": "@@ -167,14 +167,5 @@ note: cloned value is neither consumed nor mutated\n LL |     let y = x.clone().join(\"matthias\");\n    |             ^^^^^^^^^\n \n-error: non-binding let on a type that implements `Drop`\n-  --> $DIR/redundant_clone.rs:180:5\n-   |\n-LL |     let _ = a.clone(); // OK\n-   |     ^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[deny(clippy::let_underscore_drop)]` on by default\n-   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n-\n-error: aborting due to 15 previous errors\n+error: aborting due to 14 previous errors\n "}, {"sha": "de83c4f3d633c141e502bf1cadbcab2eae61f6cc", "filename": "tests/ui/reversed_empty_ranges_fixable.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b/tests%2Fui%2Freversed_empty_ranges_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b/tests%2Fui%2Freversed_empty_ranges_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freversed_empty_ranges_fixable.stderr?ref=06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b", "patch": "@@ -10,15 +10,6 @@ help: consider using the following if you are attempting to iterate over this ra\n LL |     (21..=42).rev().for_each(|x| println!(\"{}\", x));\n    |     ^^^^^^^^^^^^^^^\n \n-error: non-binding let on a type that implements `Drop`\n-  --> $DIR/reversed_empty_ranges_fixable.rs:10:5\n-   |\n-LL |     let _ = (ANSWER..21).filter(|x| x % 2 == 0).take(10).collect::<Vec<_>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[deny(clippy::let_underscore_drop)]` on by default\n-   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n-\n error: this range is empty so it will yield no values\n   --> $DIR/reversed_empty_ranges_fixable.rs:10:13\n    |\n@@ -52,5 +43,5 @@ help: consider using the following if you are attempting to iterate over this ra\n LL |     for _ in (21u32..42u32).rev() {}\n    |              ^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 4 previous errors\n "}, {"sha": "ad9953d12bcc626fb93c7849d0e8b6957406c76b", "filename": "tests/ui/transmute.stderr", "status": "modified", "additions": 1, "deletions": 42, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b/tests%2Fui%2Ftransmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b/tests%2Fui%2Ftransmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute.stderr?ref=06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b", "patch": "@@ -24,71 +24,30 @@ error: transmute from a reference to a pointer\n LL |     let _: *const U = core::intrinsics::transmute(t);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `t as *const T as *const U`\n \n-error: non-binding let on a type that implements `Drop`\n-  --> $DIR/transmute.rs:34:9\n-   |\n-LL |         let _: Vec<i32> = core::intrinsics::transmute(my_vec());\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[deny(clippy::let_underscore_drop)]` on by default\n-   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n-\n error: transmute from a type (`std::vec::Vec<i32>`) to itself\n   --> $DIR/transmute.rs:34:27\n    |\n LL |         let _: Vec<i32> = core::intrinsics::transmute(my_vec());\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: non-binding let on a type that implements `Drop`\n-  --> $DIR/transmute.rs:36:9\n-   |\n-LL |         let _: Vec<i32> = core::mem::transmute(my_vec());\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n-\n error: transmute from a type (`std::vec::Vec<i32>`) to itself\n   --> $DIR/transmute.rs:36:27\n    |\n LL |         let _: Vec<i32> = core::mem::transmute(my_vec());\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: non-binding let on a type that implements `Drop`\n-  --> $DIR/transmute.rs:38:9\n-   |\n-LL |         let _: Vec<i32> = std::intrinsics::transmute(my_vec());\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n-\n error: transmute from a type (`std::vec::Vec<i32>`) to itself\n   --> $DIR/transmute.rs:38:27\n    |\n LL |         let _: Vec<i32> = std::intrinsics::transmute(my_vec());\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: non-binding let on a type that implements `Drop`\n-  --> $DIR/transmute.rs:40:9\n-   |\n-LL |         let _: Vec<i32> = std::mem::transmute(my_vec());\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n-\n error: transmute from a type (`std::vec::Vec<i32>`) to itself\n   --> $DIR/transmute.rs:40:27\n    |\n LL |         let _: Vec<i32> = std::mem::transmute(my_vec());\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: non-binding let on a type that implements `Drop`\n-  --> $DIR/transmute.rs:42:9\n-   |\n-LL |         let _: Vec<i32> = my_transmute(my_vec());\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n-\n error: transmute from a type (`std::vec::Vec<i32>`) to itself\n   --> $DIR/transmute.rs:42:27\n    |\n@@ -195,5 +154,5 @@ error: transmute from a `&mut [u8]` to a `&mut str`\n LL |     let _: &mut str = unsafe { std::mem::transmute(mb) };\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::str::from_utf8_mut(mb).unwrap()`\n \n-error: aborting due to 29 previous errors\n+error: aborting due to 24 previous errors\n "}, {"sha": "ebc05c402abf69b9e0856083c46286677db22e20", "filename": "tests/ui/transmute_collection.stderr", "status": "modified", "additions": 1, "deletions": 66, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b/tests%2Fui%2Ftransmute_collection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b/tests%2Fui%2Ftransmute_collection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_collection.stderr?ref=06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b", "patch": "@@ -1,12 +1,3 @@\n-error: non-binding let on a type that implements `Drop`\n-  --> $DIR/transmute_collection.rs:9:9\n-   |\n-LL |         let _ = transmute::<_, Vec<u32>>(vec![0u8]);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[deny(clippy::let_underscore_drop)]` on by default\n-   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n-\n error: transmute from `std::vec::Vec<u8>` to `std::vec::Vec<u32>` with mismatched layout is unsound\n   --> $DIR/transmute_collection.rs:9:17\n    |\n@@ -15,42 +6,18 @@ LL |         let _ = transmute::<_, Vec<u32>>(vec![0u8]);\n    |\n    = note: `-D clippy::unsound-collection-transmute` implied by `-D warnings`\n \n-error: non-binding let on a type that implements `Drop`\n-  --> $DIR/transmute_collection.rs:11:9\n-   |\n-LL |         let _ = transmute::<_, Vec<[u8; 4]>>(vec![1234u32]);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n-\n error: transmute from `std::vec::Vec<u32>` to `std::vec::Vec<[u8; 4]>` with mismatched layout is unsound\n   --> $DIR/transmute_collection.rs:11:17\n    |\n LL |         let _ = transmute::<_, Vec<[u8; 4]>>(vec![1234u32]);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: non-binding let on a type that implements `Drop`\n-  --> $DIR/transmute_collection.rs:14:9\n-   |\n-LL |         let _ = transmute::<_, VecDeque<u32>>(VecDeque::<u8>::new());\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n-\n error: transmute from `std::collections::VecDeque<u8>` to `std::collections::VecDeque<u32>` with mismatched layout is unsound\n   --> $DIR/transmute_collection.rs:14:17\n    |\n LL |         let _ = transmute::<_, VecDeque<u32>>(VecDeque::<u8>::new());\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: non-binding let on a type that implements `Drop`\n-  --> $DIR/transmute_collection.rs:16:9\n-   |\n-LL |         let _ = transmute::<_, VecDeque<u32>>(VecDeque::<[u8; 4]>::new());\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n-\n error: transmute from `std::collections::VecDeque<[u8; 4]>` to `std::collections::VecDeque<u32>` with mismatched layout is unsound\n   --> $DIR/transmute_collection.rs:16:17\n    |\n@@ -93,56 +60,24 @@ error: transmute from `std::collections::HashSet<[u8; 4]>` to `std::collections:\n LL |         let _ = transmute::<_, HashSet<u32>>(HashSet::<[u8; 4]>::new());\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: non-binding let on a type that implements `Drop`\n-  --> $DIR/transmute_collection.rs:34:9\n-   |\n-LL |         let _ = transmute::<_, BTreeMap<u8, u32>>(BTreeMap::<u8, u8>::new());\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n-\n error: transmute from `std::collections::BTreeMap<u8, u8>` to `std::collections::BTreeMap<u8, u32>` with mismatched layout is unsound\n   --> $DIR/transmute_collection.rs:34:17\n    |\n LL |         let _ = transmute::<_, BTreeMap<u8, u32>>(BTreeMap::<u8, u8>::new());\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: non-binding let on a type that implements `Drop`\n-  --> $DIR/transmute_collection.rs:35:9\n-   |\n-LL |         let _ = transmute::<_, BTreeMap<u8, u32>>(BTreeMap::<u32, u32>::new());\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n-\n error: transmute from `std::collections::BTreeMap<u32, u32>` to `std::collections::BTreeMap<u8, u32>` with mismatched layout is unsound\n   --> $DIR/transmute_collection.rs:35:17\n    |\n LL |         let _ = transmute::<_, BTreeMap<u8, u32>>(BTreeMap::<u32, u32>::new());\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: non-binding let on a type that implements `Drop`\n-  --> $DIR/transmute_collection.rs:37:9\n-   |\n-LL |         let _ = transmute::<_, BTreeMap<u8, u32>>(BTreeMap::<u8, [u8; 4]>::new());\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n-\n error: transmute from `std::collections::BTreeMap<u8, [u8; 4]>` to `std::collections::BTreeMap<u8, u32>` with mismatched layout is unsound\n   --> $DIR/transmute_collection.rs:37:17\n    |\n LL |         let _ = transmute::<_, BTreeMap<u8, u32>>(BTreeMap::<u8, [u8; 4]>::new());\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: non-binding let on a type that implements `Drop`\n-  --> $DIR/transmute_collection.rs:38:9\n-   |\n-LL |         let _ = transmute::<_, BTreeMap<u32, u32>>(BTreeMap::<[u8; 4], u32>::new());\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n-\n error: transmute from `std::collections::BTreeMap<[u8; 4], u32>` to `std::collections::BTreeMap<u32, u32>` with mismatched layout is unsound\n   --> $DIR/transmute_collection.rs:38:17\n    |\n@@ -173,5 +108,5 @@ error: transmute from `std::collections::HashMap<[u8; 4], u32>` to `std::collect\n LL |         let _ = transmute::<_, HashMap<u32, u32>>(HashMap::<[u8; 4], u32>::new());\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 26 previous errors\n+error: aborting due to 18 previous errors\n "}, {"sha": "5ffa6c4fd06167ce0c7e68545fef718f97c00418", "filename": "tests/ui/unnecessary_clone.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b/tests%2Fui%2Funnecessary_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b/tests%2Fui%2Funnecessary_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_clone.stderr?ref=06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b", "patch": "@@ -24,15 +24,6 @@ error: using `.clone()` on a ref-counted pointer\n LL |     arc_weak.clone();\n    |     ^^^^^^^^^^^^^^^^ help: try this: `Weak::<bool>::clone(&arc_weak)`\n \n-error: non-binding let on a type that implements `Drop`\n-  --> $DIR/unnecessary_clone.rs:36:5\n-   |\n-LL |     let _: Arc<dyn SomeTrait> = x.clone();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[deny(clippy::let_underscore_drop)]` on by default\n-   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n-\n error: using `.clone()` on a ref-counted pointer\n   --> $DIR/unnecessary_clone.rs:36:33\n    |\n@@ -111,5 +102,5 @@ error: using `.clone()` on a ref-counted pointer\n LL |         Some(try_opt!(Some(rc)).clone())\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `Rc::<u8>::clone(&try_opt!(Some(rc)))`\n \n-error: aborting due to 13 previous errors\n+error: aborting due to 12 previous errors\n "}, {"sha": "11c6efb25cceace746742c0bf5677c2c21b5043d", "filename": "tests/ui/useless_conversion.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b/tests%2Fui%2Fuseless_conversion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b/tests%2Fui%2Fuseless_conversion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_conversion.stderr?ref=06e81bb49370a0154c3fa7de0bbc8b31c7bbe37b", "patch": "@@ -52,15 +52,6 @@ error: useless conversion to the same type: `std::str::Lines`\n LL |     let _ = \"\".lines().into_iter();\n    |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `\"\".lines()`\n \n-error: non-binding let on a type that implements `Drop`\n-  --> $DIR/useless_conversion.rs:65:5\n-   |\n-LL |     let _ = vec![1, 2, 3].into_iter().into_iter();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[deny(clippy::let_underscore_drop)]` on by default\n-   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`\n-\n error: useless conversion to the same type: `std::vec::IntoIter<i32>`\n   --> $DIR/useless_conversion.rs:65:13\n    |\n@@ -79,5 +70,5 @@ error: useless conversion to the same type: `i32`\n LL |     let _ = i32::from(a + b) * 3;\n    |             ^^^^^^^^^^^^^^^^ help: consider removing `i32::from()`: `(a + b)`\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 11 previous errors\n "}]}