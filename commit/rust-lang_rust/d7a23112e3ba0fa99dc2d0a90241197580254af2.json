{"sha": "d7a23112e3ba0fa99dc2d0a90241197580254af2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3YTIzMTEyZTNiYTBmYTk5ZGMyZDBhOTAyNDExOTc1ODAyNTRhZjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-16T00:08:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-16T00:08:01Z"}, "message": "Auto merge of #6914 - camsteffen:source-utils, r=Manishearth\n\nMove some utils to `clippy_utils::source`\n\nchangelog: none\n\nContinues #6907", "tree": {"sha": "b8c6f1eecab20a6008089265d0ffddc91f93cb1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8c6f1eecab20a6008089265d0ffddc91f93cb1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7a23112e3ba0fa99dc2d0a90241197580254af2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7a23112e3ba0fa99dc2d0a90241197580254af2", "html_url": "https://github.com/rust-lang/rust/commit/d7a23112e3ba0fa99dc2d0a90241197580254af2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7a23112e3ba0fa99dc2d0a90241197580254af2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0929a24d728186cca33fa4c97350a7add7f4493f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0929a24d728186cca33fa4c97350a7add7f4493f", "html_url": "https://github.com/rust-lang/rust/commit/0929a24d728186cca33fa4c97350a7add7f4493f"}, {"sha": "6fc52a63d19c85e952fc81298e7dd2289a774ac6", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fc52a63d19c85e952fc81298e7dd2289a774ac6", "html_url": "https://github.com/rust-lang/rust/commit/6fc52a63d19c85e952fc81298e7dd2289a774ac6"}], "stats": {"total": 1402, "additions": 753, "deletions": 649}, "files": [{"sha": "3b6f64e7769e0697eb700408dfe0ef1328da5d94", "filename": "clippy_lints/src/assertions_on_constants.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassertions_on_constants.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,5 +1,6 @@\n use crate::consts::{constant, Constant};\n-use crate::utils::{is_direct_expn_of, is_expn_of, match_panic_call, snippet_opt, span_lint_and_help};\n+use crate::utils::{is_direct_expn_of, is_expn_of, match_panic_call, span_lint_and_help};\n+use clippy_utils::source::snippet_opt;\n use if_chain::if_chain;\n use rustc_hir::{Expr, ExprKind, UnOp};\n use rustc_lint::{LateContext, LateLintPass};"}, {"sha": "031827e7e89ee84d3f21713cbdbd2562e6045331", "filename": "clippy_lints/src/assign_ops.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassign_ops.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,5 +1,6 @@\n-use crate::utils::{eq_expr_value, get_trait_def_id, snippet_opt, span_lint_and_then, trait_ref_of_method};\n+use crate::utils::{eq_expr_value, get_trait_def_id, span_lint_and_then, trait_ref_of_method};\n use crate::utils::{higher, sugg};\n+use clippy_utils::source::snippet_opt;\n use clippy_utils::ty::implements_trait;\n use if_chain::if_chain;\n use rustc_errors::Applicability;"}, {"sha": "a5ed60168748ac774204e7d47a88315ce1cb0598", "filename": "clippy_lints/src/async_yields_async.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fasync_yields_async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fasync_yields_async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fasync_yields_async.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{snippet, span_lint_and_then};\n+use crate::utils::span_lint_and_then;\n+use clippy_utils::source::snippet;\n use clippy_utils::ty::implements_trait;\n use rustc_errors::Applicability;\n use rustc_hir::{AsyncGeneratorKind, Body, BodyId, ExprKind, GeneratorKind, QPath};"}, {"sha": "04b0e71e4a38bb0dfddbfe5c6f7128fc88b06e42", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,9 +1,7 @@\n //! checks for attributes\n \n-use crate::utils::{\n-    first_line_of_span, is_present_in_source, match_panic_def_id, snippet_opt, span_lint, span_lint_and_help,\n-    span_lint_and_sugg, span_lint_and_then, without_block_comments,\n-};\n+use crate::utils::{match_panic_def_id, span_lint, span_lint_and_help, span_lint_and_sugg, span_lint_and_then};\n+use clippy_utils::source::{first_line_of_span, is_present_in_source, snippet_opt, without_block_comments};\n use if_chain::if_chain;\n use rustc_ast::{AttrKind, AttrStyle, Attribute, Lit, LitKind, MetaItemKind, NestedMetaItem};\n use rustc_errors::Applicability;"}, {"sha": "f43f98d1dc04f92a38db7cee7255bf952a5ee6ba", "filename": "clippy_lints/src/blocks_in_if_conditions.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,6 +1,5 @@\n-use crate::utils::{\n-    differing_macro_contexts, get_parent_expr, snippet_block_with_applicability, span_lint, span_lint_and_sugg,\n-};\n+use crate::utils::{differing_macro_contexts, get_parent_expr, span_lint, span_lint_and_sugg};\n+use clippy_utils::source::snippet_block_with_applicability;\n use clippy_utils::ty::implements_trait;\n use if_chain::if_chain;\n use rustc_errors::Applicability;"}, {"sha": "12a07c60438635630a2c1c01786866b304c78db6", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,6 +1,5 @@\n-use crate::utils::{\n-    eq_expr_value, get_trait_def_id, in_macro, paths, snippet_opt, span_lint_and_sugg, span_lint_and_then,\n-};\n+use crate::utils::{eq_expr_value, get_trait_def_id, in_macro, paths, span_lint_and_sugg, span_lint_and_then};\n+use clippy_utils::source::snippet_opt;\n use clippy_utils::ty::{implements_trait, is_type_diagnostic_item};\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;"}, {"sha": "d02861b1b1eac84a7f6cd71b680940d2d9860166", "filename": "clippy_lints/src/bytecount.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fbytecount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fbytecount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbytecount.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,6 +1,5 @@\n-use crate::utils::{\n-    contains_name, get_pat_name, paths, single_segment_path, snippet_with_applicability, span_lint_and_sugg,\n-};\n+use crate::utils::{contains_name, get_pat_name, paths, single_segment_path, span_lint_and_sugg};\n+use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::ty::match_type;\n use if_chain::if_chain;\n use rustc_errors::Applicability;"}, {"sha": "62ba19c0e160f9df5d9074ff7dad645dc44f48b0", "filename": "clippy_lints/src/casts/cast_lossless.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fcasts%2Fcast_lossless.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fcasts%2Fcast_lossless.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_lossless.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,10 +1,11 @@\n+use clippy_utils::source::snippet_opt;\n use clippy_utils::ty::is_isize_or_usize;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, FloatTy, Ty};\n \n-use crate::utils::{in_constant, snippet_opt, span_lint_and_sugg};\n+use crate::utils::{in_constant, span_lint_and_sugg};\n \n use super::{utils, CAST_LOSSLESS};\n "}, {"sha": "75aa559359c1485fa5ad710dae0d527a6fa5dbe6", "filename": "clippy_lints/src/casts/char_lit_as_u8.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fcasts%2Fchar_lit_as_u8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fcasts%2Fchar_lit_as_u8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fchar_lit_as_u8.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,12 +1,12 @@\n+use clippy_utils::source::snippet_with_applicability;\n+use if_chain::if_chain;\n use rustc_ast::LitKind;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, UintTy};\n \n-use if_chain::if_chain;\n-\n-use crate::utils::{snippet_with_applicability, span_lint_and_then};\n+use crate::utils::span_lint_and_then;\n \n use super::CHAR_LIT_AS_U8;\n "}, {"sha": "723bfa5befe0c56620c2877842e0080528583d14", "filename": "clippy_lints/src/casts/fn_to_numeric_cast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fcasts%2Ffn_to_numeric_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fcasts%2Ffn_to_numeric_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Ffn_to_numeric_cast.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,10 +1,10 @@\n+use crate::utils::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_applicability;\n use rustc_errors::Applicability;\n use rustc_hir::Expr;\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, Ty, UintTy};\n \n-use crate::utils::{snippet_with_applicability, span_lint_and_sugg};\n-\n use super::{utils, FN_TO_NUMERIC_CAST};\n \n pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_expr: &Expr<'_>, cast_from: Ty<'_>, cast_to: Ty<'_>) {"}, {"sha": "a3108f8a9834a84a959561881482b34ecf0b8113", "filename": "clippy_lints/src/casts/fn_to_numeric_cast_with_truncation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fcasts%2Ffn_to_numeric_cast_with_truncation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fcasts%2Ffn_to_numeric_cast_with_truncation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Ffn_to_numeric_cast_with_truncation.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,10 +1,10 @@\n+use crate::utils::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_applicability;\n use rustc_errors::Applicability;\n use rustc_hir::Expr;\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, Ty};\n \n-use crate::utils::{snippet_with_applicability, span_lint_and_sugg};\n-\n use super::{utils, FN_TO_NUMERIC_CAST_WITH_TRUNCATION};\n \n pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_expr: &Expr<'_>, cast_from: Ty<'_>, cast_to: Ty<'_>) {"}, {"sha": "eb0ee012e6c562a373da607ee1d9548132abe2bd", "filename": "clippy_lints/src/casts/unnecessary_cast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fcasts%2Funnecessary_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fcasts%2Funnecessary_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Funnecessary_cast.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,13 +1,13 @@\n+use clippy_utils::source::snippet_opt;\n+use if_chain::if_chain;\n use rustc_ast::{LitFloatType, LitIntType, LitKind};\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, Lit, UnOp};\n use rustc_lint::{LateContext, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{self, FloatTy, InferTy, Ty};\n \n-use if_chain::if_chain;\n-\n-use crate::utils::{numeric_literal::NumericLiteral, snippet_opt, span_lint_and_sugg};\n+use crate::utils::{numeric_literal::NumericLiteral, span_lint_and_sugg};\n \n use super::UNNECESSARY_CAST;\n "}, {"sha": "4f3daa427e3f0330642c1dd3b2ef89b989ebd5ed", "filename": "clippy_lints/src/checked_conversions.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fchecked_conversions.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,5 +1,6 @@\n //! lint on manually implemented checked conversions that could be transformed into `try_from`\n \n+use clippy_utils::source::snippet_with_applicability;\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n@@ -9,7 +10,7 @@ use rustc_middle::lint::in_external_macro;\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n-use crate::utils::{meets_msrv, snippet_with_applicability, span_lint_and_sugg, SpanlessEq};\n+use crate::utils::{meets_msrv, span_lint_and_sugg, SpanlessEq};\n \n const CHECKED_CONVERSIONS_MSRV: RustcVersion = RustcVersion::new(1, 34, 0);\n "}, {"sha": "5b8ef01505bf54db8ffead7a627be5e96653d28c", "filename": "clippy_lints/src/cognitive_complexity.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcognitive_complexity.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,5 +1,6 @@\n //! calculate cognitive complexity and warn about overly complex functions\n \n+use clippy_utils::source::snippet_opt;\n use clippy_utils::ty::is_type_diagnostic_item;\n use rustc_ast::ast::Attribute;\n use rustc_hir::intravisit::{walk_expr, FnKind, NestedVisitorMap, Visitor};\n@@ -10,7 +11,7 @@ use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n use rustc_span::{sym, BytePos};\n \n-use crate::utils::{snippet_opt, span_lint_and_help, LimitStack};\n+use crate::utils::{span_lint_and_help, LimitStack};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for methods with high cognitive complexity."}, {"sha": "c866f18ef3e715b427250db8230e1a1c68c9aea1", "filename": "clippy_lints/src/collapsible_if.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcollapsible_if.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -12,14 +12,15 @@\n //!\n //! This lint is **warn** by default\n \n+use clippy_utils::source::{snippet_block, snippet_block_with_applicability};\n use if_chain::if_chain;\n use rustc_ast::ast;\n+use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n use crate::utils::sugg::Sugg;\n-use crate::utils::{snippet_block, snippet_block_with_applicability, span_lint_and_sugg, span_lint_and_then};\n-use rustc_errors::Applicability;\n+use crate::utils::{span_lint_and_sugg, span_lint_and_then};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for nested `if` statements which can be collapsed"}, {"sha": "0785e25b0a29e95932f837290ccd17cb502b7bf9", "filename": "clippy_lints/src/create_dir.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fcreate_dir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fcreate_dir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcreate_dir.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{match_def_path, paths, snippet, span_lint_and_sugg};\n+use crate::utils::{match_def_path, paths, span_lint_and_sugg};\n+use clippy_utils::source::snippet;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind};"}, {"sha": "3171a945eb02c7242d1850cf8de4d3e4b7d9730b", "filename": "clippy_lints/src/dbg_macro.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fdbg_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fdbg_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdbg_macro.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{snippet_opt, span_lint_and_help, span_lint_and_sugg};\n+use crate::utils::{span_lint_and_help, span_lint_and_sugg};\n+use clippy_utils::source::snippet_opt;\n use rustc_ast::ast;\n use rustc_ast::tokenstream::TokenStream;\n use rustc_errors::Applicability;"}, {"sha": "7d975b5a3d97f7250f43af559dc3884e4196eb18", "filename": "clippy_lints/src/default.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,7 +1,6 @@\n-use crate::utils::{\n-    any_parent_is_automatically_derived, contains_name, match_def_path, paths, snippet_with_macro_callsite,\n-};\n+use crate::utils::{any_parent_is_automatically_derived, contains_name, match_def_path, paths};\n use crate::utils::{span_lint_and_note, span_lint_and_sugg};\n+use clippy_utils::source::snippet_with_macro_callsite;\n use if_chain::if_chain;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;"}, {"sha": "e58dcb942c68d1300f2f270117d571b49f417754", "filename": "clippy_lints/src/default_numeric_fallback.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,3 +1,5 @@\n+use clippy_utils::source::snippet;\n+use if_chain::if_chain;\n use rustc_ast::ast::{LitFloatType, LitIntType, LitKind};\n use rustc_errors::Applicability;\n use rustc_hir::{\n@@ -11,9 +13,7 @@ use rustc_middle::{\n };\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n-use if_chain::if_chain;\n-\n-use crate::utils::{snippet, span_lint_and_sugg};\n+use crate::utils::span_lint_and_sugg;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for usage of unconstrained numeric literals which may cause default numeric fallback in type"}, {"sha": "e112338dfead8a35f95556e564fde348e6f5c285", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{get_parent_node, in_macro, is_allowed, snippet_with_context, span_lint_and_sugg};\n+use crate::utils::{get_parent_node, in_macro, is_allowed, span_lint_and_sugg};\n+use clippy_utils::source::snippet_with_context;\n use clippy_utils::ty::peel_mid_ty_refs;\n use rustc_ast::util::parser::PREC_PREFIX;\n use rustc_errors::Applicability;"}, {"sha": "3de027b2cc6338ffaef87f7cc6d6d2ac13f380e2", "filename": "clippy_lints/src/double_comparison.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fdouble_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fdouble_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdouble_comparison.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,12 +1,13 @@\n //! Lint on unnecessary double comparisons. Some examples:\n \n+use clippy_utils::source::snippet_with_applicability;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n \n-use crate::utils::{eq_expr_value, snippet_with_applicability, span_lint_and_sugg};\n+use crate::utils::{eq_expr_value, span_lint_and_sugg};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for double comparisons that could be simplified to a single expression."}, {"sha": "195143d720dcde1c0247f915d4fa211b73900d27", "filename": "clippy_lints/src/duration_subsec.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fduration_subsec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fduration_subsec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fduration_subsec.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,3 +1,4 @@\n+use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::ty::match_type;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n@@ -8,7 +9,7 @@ use rustc_span::source_map::Spanned;\n \n use crate::consts::{constant, Constant};\n use crate::utils::paths;\n-use crate::utils::{snippet_with_applicability, span_lint_and_sugg};\n+use crate::utils::span_lint_and_sugg;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for calculation of subsecond microseconds or milliseconds"}, {"sha": "937232195945c2a2c03d3b46d84e49c13e8d87de", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,6 +1,7 @@\n+use crate::utils::span_lint_and_then;\n use crate::utils::SpanlessEq;\n-use crate::utils::{get_item_name, paths, snippet, snippet_opt};\n-use crate::utils::{snippet_with_applicability, span_lint_and_then};\n+use crate::utils::{get_item_name, paths};\n+use clippy_utils::source::{snippet, snippet_opt, snippet_with_applicability};\n use clippy_utils::ty::{is_type_diagnostic_item, match_type};\n use if_chain::if_chain;\n use rustc_errors::Applicability;"}, {"sha": "660131cf176c45e01053aefc0573ff96b55189e4", "filename": "clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_variants.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,7 +1,8 @@\n //! lint on enum variants that are prefixed or suffixed by the same characters\n \n-use crate::utils::{camel_case, is_present_in_source};\n+use crate::utils::camel_case;\n use crate::utils::{span_lint, span_lint_and_help};\n+use clippy_utils::source::is_present_in_source;\n use rustc_ast::ast::{EnumDef, Item, ItemKind, VisibilityKind};\n use rustc_lint::{EarlyContext, EarlyLintPass, Lint};\n use rustc_session::{declare_tool_lint, impl_lint_pass};"}, {"sha": "0a5917c10eae3d91c8655855d33ac62011243f7f", "filename": "clippy_lints/src/eq_op.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feq_op.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,7 +1,8 @@\n use crate::utils::{\n-    ast_utils::is_useless_with_eq_exprs, eq_expr_value, higher, in_macro, is_expn_of, multispan_sugg, snippet,\n-    span_lint, span_lint_and_then,\n+    ast_utils::is_useless_with_eq_exprs, eq_expr_value, higher, in_macro, is_expn_of, multispan_sugg, span_lint,\n+    span_lint_and_then,\n };\n+use clippy_utils::source::snippet;\n use clippy_utils::ty::{implements_trait, is_copy};\n use if_chain::if_chain;\n use rustc_errors::Applicability;"}, {"sha": "e8d5b992b630b8f73ff4b4fffcd100ca56c7e4c6", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,5 +1,6 @@\n use clippy_utils::higher;\n use clippy_utils::higher::VecArgs;\n+use clippy_utils::source::snippet_opt;\n use clippy_utils::ty::{implements_trait, type_is_unsafe_function};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n@@ -9,7 +10,7 @@ use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n-use crate::utils::{is_adjusted, iter_input_pats, snippet_opt, span_lint_and_sugg, span_lint_and_then};\n+use crate::utils::{is_adjusted, iter_input_pats, span_lint_and_sugg, span_lint_and_then};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for closures which just call another function where"}, {"sha": "5e31072523d554f6565a3cbba3e2b61638faed4a", "filename": "clippy_lints/src/exhaustive_items.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fexhaustive_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fexhaustive_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexhaustive_items.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,11 +1,14 @@\n-use crate::utils::{indent_of, span_lint_and_then};\n+use clippy_utils::source::indent_of;\n use if_chain::if_chain;\n+\n use rustc_errors::Applicability;\n use rustc_hir::{Item, ItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n \n+use crate::utils::span_lint_and_then;\n+\n declare_clippy_lint! {\n     /// **What it does:** Warns on any exported `enum`s that are not tagged `#[non_exhaustive]`\n     ///"}, {"sha": "c0048bb2175aabec6e06c748d2ef27cb2e888cb0", "filename": "clippy_lints/src/format.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,7 +1,6 @@\n use crate::utils::paths;\n-use crate::utils::{\n-    is_expn_of, last_path_segment, match_def_path, match_function_call, snippet, snippet_opt, span_lint_and_then,\n-};\n+use crate::utils::{is_expn_of, last_path_segment, match_def_path, match_function_call, span_lint_and_then};\n+use clippy_utils::source::{snippet, snippet_opt};\n use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;"}, {"sha": "590de04717a027178453f2cbf483b1927d004fa0", "filename": "clippy_lints/src/formatting.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformatting.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{differing_macro_contexts, snippet_opt, span_lint_and_help, span_lint_and_note};\n+use crate::utils::{differing_macro_contexts, span_lint_and_help, span_lint_and_note};\n+use clippy_utils::source::snippet_opt;\n use if_chain::if_chain;\n use rustc_ast::ast::{BinOpKind, Block, Expr, ExprKind, StmtKind, UnOp};\n use rustc_lint::{EarlyContext, EarlyLintPass};"}, {"sha": "104c692dcec8d1a6e7ca7e3f436e0972d84be578", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,8 +1,8 @@\n use crate::utils::{\n     attr_by_name, attrs::is_proc_macro, is_trait_impl_item, iter_input_pats, match_def_path, must_use_attr,\n-    path_to_local, return_ty, snippet, snippet_opt, span_lint, span_lint_and_help, span_lint_and_then,\n-    trait_ref_of_method,\n+    path_to_local, return_ty, span_lint, span_lint_and_help, span_lint_and_then, trait_ref_of_method,\n };\n+use clippy_utils::source::{snippet, snippet_opt};\n use clippy_utils::ty::{is_must_use_ty, is_type_diagnostic_item, type_is_unsafe_function};\n use if_chain::if_chain;\n use rustc_ast::ast::Attribute;"}, {"sha": "875cd33bc8f7f28c2e0ef25dcfc9ddd58343e8f2", "filename": "clippy_lints/src/get_last_with_len.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fget_last_with_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fget_last_with_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fget_last_with_len.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,6 +1,7 @@\n //! lint on using `x.get(x.len() - 1)` instead of `x.last()`\n \n-use crate::utils::{snippet_with_applicability, span_lint_and_sugg, SpanlessEq};\n+use crate::utils::{span_lint_and_sugg, SpanlessEq};\n+use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;"}, {"sha": "fc93864c74ac5e12a6fd91cbecb4334489b59dde", "filename": "clippy_lints/src/identity_op.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fidentity_op.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,3 +1,4 @@\n+use clippy_utils::source::snippet;\n use if_chain::if_chain;\n use rustc_hir::{BinOp, BinOpKind, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n@@ -6,7 +7,7 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n \n use crate::consts::{constant_simple, Constant};\n-use crate::utils::{clip, snippet, span_lint, unsext};\n+use crate::utils::{clip, span_lint, unsext};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for identity operations, e.g., `x + 0`."}, {"sha": "9f7ca95a8f3acd7a44593417ff5b7b5cd349e22b", "filename": "clippy_lints/src/if_let_some_result.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fif_let_some_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fif_let_some_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_let_some_result.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{method_chain_args, snippet_with_applicability, span_lint_and_sugg};\n+use crate::utils::{method_chain_args, span_lint_and_sugg};\n+use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_errors::Applicability;"}, {"sha": "7e1807786ee68f426993361fcb9ed140f0467d29", "filename": "clippy_lints/src/if_then_some_else_none.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fif_then_some_else_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fif_then_some_else_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_then_some_else_none.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,4 +1,5 @@\n use crate::utils;\n+use clippy_utils::source::snippet_with_macro_callsite;\n use if_chain::if_chain;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n@@ -82,13 +83,13 @@ impl LateLintPass<'_> for IfThenSomeElseNone {\n             if let ExprKind::Path(ref els_call_qpath) = els_expr.kind;\n             if utils::match_qpath(els_call_qpath, &utils::paths::OPTION_NONE);\n             then {\n-                let cond_snip = utils::snippet_with_macro_callsite(cx, cond.span, \"[condition]\");\n+                let cond_snip = snippet_with_macro_callsite(cx, cond.span, \"[condition]\");\n                 let cond_snip = if matches!(cond.kind, ExprKind::Unary(_, _) | ExprKind::Binary(_, _, _)) {\n                     format!(\"({})\", cond_snip)\n                 } else {\n                     cond_snip.into_owned()\n                 };\n-                let arg_snip = utils::snippet_with_macro_callsite(cx, then_arg.span, \"\");\n+                let arg_snip = snippet_with_macro_callsite(cx, then_arg.span, \"\");\n                 let closure_body = if then_block.stmts.is_empty() {\n                     arg_snip.into_owned()\n                 } else {"}, {"sha": "e86bd49251d20fdffe9d4873451e6a7b1652a98c", "filename": "clippy_lints/src/implicit_return.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_return.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{match_panic_def_id, snippet_opt, span_lint_and_then};\n+use crate::utils::{match_panic_def_id, span_lint_and_then};\n+use clippy_utils::source::snippet_opt;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::FnKind;"}, {"sha": "4762d5d40f3e9f3d9e04d51ed06d00ec666f01af", "filename": "clippy_lints/src/inconsistent_struct_constructor.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Finconsistent_struct_constructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Finconsistent_struct_constructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finconsistent_struct_constructor.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,13 +1,13 @@\n+use clippy_utils::source::snippet;\n+use if_chain::if_chain;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::Applicability;\n use rustc_hir::{self as hir, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::Symbol;\n \n-use if_chain::if_chain;\n-\n-use crate::utils::{snippet, span_lint_and_sugg};\n+use crate::utils::span_lint_and_sugg;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for struct constructors where all fields are shorthand and"}, {"sha": "9eae653dd6796b80ef1ff643137fe97b4dbd645c", "filename": "clippy_lints/src/int_plus_one.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fint_plus_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fint_plus_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fint_plus_one.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,11 +1,12 @@\n //! lint on blocks unnecessarily using >= with a + 1 or - 1\n \n+use clippy_utils::source::snippet_opt;\n use rustc_ast::ast::{BinOpKind, Expr, ExprKind, Lit, LitKind};\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n-use crate::utils::{snippet_opt, span_lint_and_sugg};\n+use crate::utils::span_lint_and_sugg;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for usage of `x >= y + 1` or `x - 1 >= y` (and `<=`) in a block"}, {"sha": "cbb5192bfd997637cd4631e5d01d6480264214e8", "filename": "clippy_lints/src/large_enum_variant.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_enum_variant.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,6 +1,7 @@\n //! lint when there is a large size difference between variants on an enum\n \n-use crate::utils::{snippet_opt, span_lint_and_then};\n+use crate::utils::span_lint_and_then;\n+use clippy_utils::source::snippet_opt;\n use rustc_errors::Applicability;\n use rustc_hir::{Item, ItemKind, VariantData};\n use rustc_lint::{LateContext, LateLintPass};"}, {"sha": "ceae4243e63a313fb7920b10892c62fac1059163", "filename": "clippy_lints/src/large_stack_arrays.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Flarge_stack_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Flarge_stack_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_stack_arrays.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,13 +1,13 @@\n+use clippy_utils::source::snippet;\n+use if_chain::if_chain;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::mir::interpret::ConstValue;\n use rustc_middle::ty::{self, ConstKind};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n-use if_chain::if_chain;\n-\n use crate::rustc_target::abi::LayoutOf;\n-use crate::utils::{snippet, span_lint_and_help};\n+use crate::utils::span_lint_and_help;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for local arrays that may be too large."}, {"sha": "e758a269fbe981428efb09310e5dc14df593d328", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,7 +1,5 @@\n-use crate::utils::{\n-    get_item_name, get_parent_as_impl, is_allowed, snippet_with_applicability, span_lint, span_lint_and_sugg,\n-    span_lint_and_then,\n-};\n+use crate::utils::{get_item_name, get_parent_as_impl, is_allowed, span_lint, span_lint_and_sugg, span_lint_and_then};\n+use clippy_utils::source::snippet_with_applicability;\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_data_structures::fx::FxHashSet;"}, {"sha": "7059ba212074bfd099f7231e46935dd9d162e9ba", "filename": "clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_if_seq.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{path_to_local_id, snippet, span_lint_and_then, visitors::LocalUsedVisitor};\n+use crate::utils::{path_to_local_id, span_lint_and_then, visitors::LocalUsedVisitor};\n+use clippy_utils::source::snippet;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;"}, {"sha": "8bc7bf37ef1f074adf564004af690e10af86c1eb", "filename": "clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -4,8 +4,9 @@\n use crate::utils::{\n     in_macro,\n     numeric_literal::{NumericLiteral, Radix},\n-    snippet_opt, span_lint_and_sugg,\n+    span_lint_and_sugg,\n };\n+use clippy_utils::source::snippet_opt;\n use if_chain::if_chain;\n use rustc_ast::ast::{Expr, ExprKind, Lit, LitKind};\n use rustc_errors::Applicability;"}, {"sha": "1f6d48fe915dfe41b6e084a0d80dc279bcb6c1e6", "filename": "clippy_lints/src/loops/explicit_counter_loop.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Floops%2Fexplicit_counter_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Floops%2Fexplicit_counter_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fexplicit_counter_loop.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,7 +1,8 @@\n use super::{\n     get_span_of_entire_for_loop, make_iterator_snippet, IncrementVisitor, InitializeVisitor, EXPLICIT_COUNTER_LOOP,\n };\n-use crate::utils::{get_enclosing_block, is_integer_const, snippet_with_applicability, span_lint_and_sugg};\n+use crate::utils::{get_enclosing_block, is_integer_const, span_lint_and_sugg};\n+use clippy_utils::source::snippet_with_applicability;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_block, walk_expr};"}, {"sha": "e5b3dc7aad79b4705127c98dcfe42b2d2b6c34b1", "filename": "clippy_lints/src/loops/explicit_into_iter_loop.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Floops%2Fexplicit_into_iter_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Floops%2Fexplicit_into_iter_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fexplicit_into_iter_loop.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,5 +1,6 @@\n use super::EXPLICIT_INTO_ITER_LOOP;\n-use crate::utils::{snippet_with_applicability, span_lint_and_sugg};\n+use crate::utils::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_applicability;\n use rustc_errors::Applicability;\n use rustc_hir::Expr;\n use rustc_lint::LateContext;"}, {"sha": "d2000d80ac128caf28e84900c67378fed47db65d", "filename": "clippy_lints/src/loops/explicit_iter_loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Floops%2Fexplicit_iter_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Floops%2Fexplicit_iter_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fexplicit_iter_loop.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,13 +1,13 @@\n use super::EXPLICIT_ITER_LOOP;\n+use crate::utils::{match_trait_method, paths, span_lint_and_sugg};\n+use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::ty::{is_type_diagnostic_item, match_type};\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, Mutability};\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, Ty, TyS};\n use rustc_span::sym;\n \n-use crate::utils::{match_trait_method, paths, snippet_with_applicability, span_lint_and_sugg};\n-\n pub(super) fn check(cx: &LateContext<'_>, args: &[Expr<'_>], arg: &Expr<'_>, method_name: &str) {\n     let should_lint = match method_name {\n         \"iter\" | \"iter_mut\" => is_ref_iterable_type(cx, &args[0]),"}, {"sha": "19a68dd78d10f7d1460fcc7c34ae94d6037ea940", "filename": "clippy_lints/src/loops/for_kv_map.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Floops%2Ffor_kv_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Floops%2Ffor_kv_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Ffor_kv_map.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,6 +1,7 @@\n use super::FOR_KV_MAP;\n use crate::utils::visitors::LocalUsedVisitor;\n-use crate::utils::{multispan_sugg, paths, snippet, span_lint_and_then, sugg};\n+use crate::utils::{multispan_sugg, paths, span_lint_and_then, sugg};\n+use clippy_utils::source::snippet;\n use clippy_utils::ty::{is_type_diagnostic_item, match_type};\n use rustc_hir::{BorrowKind, Expr, ExprKind, Mutability, Pat, PatKind};\n use rustc_lint::LateContext;"}, {"sha": "5140448592d27e947c2fd6865042a6a0d0c3eb8f", "filename": "clippy_lints/src/loops/for_loops_over_fallibles.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Floops%2Ffor_loops_over_fallibles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Floops%2Ffor_loops_over_fallibles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Ffor_loops_over_fallibles.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,6 +1,8 @@\n-use super::FOR_LOOPS_OVER_FALLIBLES;\n-use crate::utils::{snippet, span_lint_and_help};\n+use clippy_utils::source::snippet;\n use clippy_utils::ty::is_type_diagnostic_item;\n+\n+use super::FOR_LOOPS_OVER_FALLIBLES;\n+use crate::utils::span_lint_and_help;\n use rustc_hir::{Expr, Pat};\n use rustc_lint::LateContext;\n use rustc_span::symbol::sym;"}, {"sha": "c9c256411605b0e7c4a3e8006cf1014c46fa0f64", "filename": "clippy_lints/src/loops/manual_memcpy.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,6 +1,7 @@\n use super::{get_span_of_entire_for_loop, IncrementVisitor, InitializeVisitor, MANUAL_MEMCPY};\n use crate::utils::sugg::Sugg;\n-use crate::utils::{get_enclosing_block, higher, path_to_local, snippet, span_lint_and_sugg, sugg};\n+use crate::utils::{get_enclosing_block, higher, path_to_local, span_lint_and_sugg, sugg};\n+use clippy_utils::source::snippet;\n use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_ast::ast;"}, {"sha": "59f7b23af7557933974c457f06076f294cd08f36", "filename": "clippy_lints/src/loops/needless_collect.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,6 +1,7 @@\n use super::NEEDLESS_COLLECT;\n use crate::utils::sugg::Sugg;\n-use crate::utils::{is_trait_method, path_to_local_id, paths, snippet, span_lint_and_sugg, span_lint_and_then};\n+use crate::utils::{is_trait_method, path_to_local_id, paths, span_lint_and_sugg, span_lint_and_then};\n+use clippy_utils::source::snippet;\n use clippy_utils::ty::{is_type_diagnostic_item, match_type};\n use if_chain::if_chain;\n use rustc_errors::Applicability;"}, {"sha": "674cb34c37b2f828e788fd2117f9311fb5f94f65", "filename": "clippy_lints/src/loops/needless_range_loop.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,9 +1,10 @@\n use super::NEEDLESS_RANGE_LOOP;\n use crate::utils::visitors::LocalUsedVisitor;\n use crate::utils::{\n-    contains_name, higher, is_integer_const, match_trait_method, multispan_sugg, path_to_local_id, paths, snippet,\n+    contains_name, higher, is_integer_const, match_trait_method, multispan_sugg, path_to_local_id, paths,\n     span_lint_and_then, sugg, SpanlessEq,\n };\n+use clippy_utils::source::snippet;\n use clippy_utils::ty::has_iter_method;\n use if_chain::if_chain;\n use rustc_ast::ast;"}, {"sha": "255d6de4a361771c73cc622e5173e32dd6e557d9", "filename": "clippy_lints/src/loops/same_item_push.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,5 +1,6 @@\n use super::SAME_ITEM_PUSH;\n-use crate::utils::{snippet_with_macro_callsite, span_lint_and_help};\n+use crate::utils::span_lint_and_help;\n+use clippy_utils::source::snippet_with_macro_callsite;\n use clippy_utils::ty::{implements_trait, is_type_diagnostic_item};\n use if_chain::if_chain;\n use rustc_hir::def::{DefKind, Res};"}, {"sha": "4f83191d919f45f2bdc1a1bb0535e153659907a1", "filename": "clippy_lints/src/loops/single_element_loop.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Floops%2Fsingle_element_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Floops%2Fsingle_element_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fsingle_element_loop.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,5 +1,6 @@\n use super::{get_span_of_entire_for_loop, SINGLE_ELEMENT_LOOP};\n-use crate::utils::{indent_of, single_segment_path, snippet, span_lint_and_sugg};\n+use crate::utils::{single_segment_path, span_lint_and_sugg};\n+use clippy_utils::source::{indent_of, snippet};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{BorrowKind, Expr, ExprKind, Pat, PatKind};"}, {"sha": "dbd9126861f4c5959e31a7bc296ccabb9e847f02", "filename": "clippy_lints/src/loops/while_let_loop.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Floops%2Fwhile_let_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Floops%2Fwhile_let_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fwhile_let_loop.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,5 +1,6 @@\n use super::WHILE_LET_LOOP;\n-use crate::utils::{snippet_with_applicability, span_lint_and_sugg};\n+use crate::utils::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_applicability;\n use rustc_errors::Applicability;\n use rustc_hir::{Block, Expr, ExprKind, MatchSource, StmtKind};\n use rustc_lint::{LateContext, LintContext};"}, {"sha": "ccabe586c2b397812a50cc97fdc1f88f87167f42", "filename": "clippy_lints/src/loops/while_let_on_iterator.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -3,8 +3,9 @@ use super::WHILE_LET_ON_ITERATOR;\n use crate::utils::usage::mutated_variables;\n use crate::utils::{\n     get_enclosing_block, is_refutable, is_trait_method, last_path_segment, path_to_local, path_to_local_id,\n-    snippet_with_applicability, span_lint_and_sugg,\n+    span_lint_and_sugg,\n };\n+use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::ty::implements_trait;\n use if_chain::if_chain;\n use rustc_errors::Applicability;"}, {"sha": "637f10f6609ccccd8c7cb24c715505e02b50e440", "filename": "clippy_lints/src/macro_use.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmacro_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmacro_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmacro_use.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{in_macro, snippet, span_lint_and_sugg};\n+use crate::utils::{in_macro, span_lint_and_sugg};\n+use clippy_utils::source::snippet;\n use hir::def::{DefKind, Res};\n use if_chain::if_chain;\n use rustc_ast::ast;"}, {"sha": "5db2968e42c37455711b534d77f7890520bdbd11", "filename": "clippy_lints/src/main_recursion.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmain_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmain_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmain_recursion.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,9 +1,10 @@\n+use clippy_utils::source::snippet;\n+use if_chain::if_chain;\n use rustc_hir::{Crate, Expr, ExprKind, QPath};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n-use crate::utils::{is_entrypoint_fn, is_no_std_crate, snippet, span_lint_and_help};\n-use if_chain::if_chain;\n+use crate::utils::{is_entrypoint_fn, is_no_std_crate, span_lint_and_help};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for recursion using the entrypoint."}, {"sha": "ebc493c0f7eea54fef890d30af64236decbbbbf6", "filename": "clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,5 +1,6 @@\n use crate::utils::paths::FUTURE_FROM_GENERATOR;\n-use crate::utils::{match_function_call, position_before_rarrow, snippet_block, snippet_opt, span_lint_and_then};\n+use crate::utils::{match_function_call, span_lint_and_then};\n+use clippy_utils::source::{position_before_rarrow, snippet_block, snippet_opt};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::FnKind;"}, {"sha": "3896645ca7d8b5d9bda3883df5cfc4e7d337fe0f", "filename": "clippy_lints/src/manual_map.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmanual_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmanual_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_map.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,11 +1,9 @@\n use crate::{\n     map_unit_fn::OPTION_MAP_UNIT_FN,\n     matches::MATCH_AS_REF,\n-    utils::{\n-        is_allowed, match_def_path, match_var, paths, peel_hir_expr_refs, snippet_with_applicability,\n-        snippet_with_context, span_lint_and_sugg,\n-    },\n+    utils::{is_allowed, match_def_path, match_var, paths, peel_hir_expr_refs, span_lint_and_sugg},\n };\n+use clippy_utils::source::{snippet_with_applicability, snippet_with_context};\n use clippy_utils::ty::{can_partially_move_ty, is_type_diagnostic_item, peel_mid_ty_refs_is_mutable};\n use rustc_ast::util::parser::PREC_POSTFIX;\n use rustc_errors::Applicability;"}, {"sha": "0b8c049b4664000188e0515d837a261aaa76ac87", "filename": "clippy_lints/src/manual_non_exhaustive.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{meets_msrv, snippet_opt, span_lint_and_then};\n+use crate::utils::{meets_msrv, span_lint_and_then};\n+use clippy_utils::source::snippet_opt;\n use if_chain::if_chain;\n use rustc_ast::ast::{Attribute, Item, ItemKind, StructField, Variant, VariantData, VisibilityKind};\n use rustc_attr as attr;"}, {"sha": "f436eccc0dc3a65c636cf40d23f7b83e9228f33b", "filename": "clippy_lints/src/manual_ok_or.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmanual_ok_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmanual_ok_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_ok_or.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,6 +1,5 @@\n-use crate::utils::{\n-    indent_of, match_qpath, path_to_local_id, paths, reindent_multiline, snippet_opt, span_lint_and_sugg,\n-};\n+use crate::utils::{match_qpath, path_to_local_id, paths, span_lint_and_sugg};\n+use clippy_utils::source::{indent_of, reindent_multiline, snippet_opt};\n use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_errors::Applicability;"}, {"sha": "3bfca8bea40722fc304470d70b32b6fa9e7285a5", "filename": "clippy_lints/src/manual_strip.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmanual_strip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmanual_strip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_strip.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,9 +1,7 @@\n use crate::consts::{constant, Constant};\n use crate::utils::usage::mutated_variables;\n-use crate::utils::{\n-    eq_expr_value, higher, match_def_path, meets_msrv, multispan_sugg, paths, snippet, span_lint_and_then,\n-};\n-\n+use crate::utils::{eq_expr_value, higher, match_def_path, meets_msrv, multispan_sugg, paths, span_lint_and_then};\n+use clippy_utils::source::snippet;\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_hir::def::Res;"}, {"sha": "7a4040539e3dc47f2966486cdc644947cc3977c6", "filename": "clippy_lints/src/manual_unwrap_or.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmanual_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmanual_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_unwrap_or.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,6 +1,7 @@\n use crate::consts::constant_simple;\n use crate::utils;\n use crate::utils::{path_to_local_id, sugg};\n+use clippy_utils::source::{indent_of, reindent_multiline, snippet_opt};\n use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n@@ -105,12 +106,12 @@ fn lint_manual_unwrap_or<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n             None\n         };\n         if let Some(or_arm) = applicable_or_arm(match_arms);\n-        if let Some(or_body_snippet) = utils::snippet_opt(cx, or_arm.body.span);\n-        if let Some(indent) = utils::indent_of(cx, expr.span);\n+        if let Some(or_body_snippet) = snippet_opt(cx, or_arm.body.span);\n+        if let Some(indent) = indent_of(cx, expr.span);\n         if constant_simple(cx, cx.typeck_results(), or_arm.body).is_some();\n         then {\n             let reindented_or_body =\n-                utils::reindent_multiline(or_body_snippet.into(), true, Some(indent));\n+                reindent_multiline(or_body_snippet.into(), true, Some(indent));\n             utils::span_lint_and_sugg(\n                 cx,\n                 MANUAL_UNWRAP_OR, expr.span,"}, {"sha": "e10d7647bcf484a7d9d8faa1974c6bdc7e230603", "filename": "clippy_lints/src/map_clone.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_clone.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,5 +1,6 @@\n use crate::utils::is_trait_method;\n-use crate::utils::{remove_blocks, snippet_with_applicability, span_lint_and_sugg};\n+use crate::utils::{remove_blocks, span_lint_and_sugg};\n+use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::ty::{is_copy, is_type_diagnostic_item};\n use if_chain::if_chain;\n use rustc_errors::Applicability;"}, {"sha": "24bcc808585dc9874e35e4d57a1c3b83d678d956", "filename": "clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{iter_input_pats, method_chain_args, snippet, span_lint_and_then};\n+use crate::utils::{iter_input_pats, method_chain_args, span_lint_and_then};\n+use clippy_utils::source::snippet;\n use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_errors::Applicability;"}, {"sha": "57dcd8709b81c30e538fbd4d71b1f86963e7215c", "filename": "clippy_lints/src/match_on_vec_items.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmatch_on_vec_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmatch_on_vec_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatch_on_vec_items.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{snippet, span_lint_and_sugg};\n+use crate::utils::span_lint_and_sugg;\n+use clippy_utils::source::snippet;\n use clippy_utils::ty::{is_type_diagnostic_item, is_type_lang_item};\n use if_chain::if_chain;\n use rustc_errors::Applicability;"}, {"sha": "4ae1ce977f400d51bd587451a7217b1887a4417e", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -2,12 +2,12 @@ use crate::consts::{constant, miri_to_const, Constant};\n use crate::utils::sugg::Sugg;\n use crate::utils::visitors::LocalUsedVisitor;\n use crate::utils::{\n-    expr_block, get_parent_expr, in_macro, indent_of, is_allowed, is_expn_of, is_refutable, is_wild, match_qpath,\n-    meets_msrv, multispan_sugg, path_to_local, path_to_local_id, peel_hir_pat_refs, peel_n_hir_expr_refs,\n-    remove_blocks, snippet, snippet_block, snippet_opt, snippet_with_applicability, span_lint_and_help,\n+    get_parent_expr, in_macro, is_allowed, is_expn_of, is_refutable, is_wild, match_qpath, meets_msrv, multispan_sugg,\n+    path_to_local, path_to_local_id, peel_hir_pat_refs, peel_n_hir_expr_refs, remove_blocks, span_lint_and_help,\n     span_lint_and_note, span_lint_and_sugg, span_lint_and_then, strip_pat_refs,\n };\n use crate::utils::{paths, search_same, SpanlessEq, SpanlessHash};\n+use clippy_utils::source::{expr_block, indent_of, snippet, snippet_block, snippet_opt, snippet_with_applicability};\n use clippy_utils::ty::{implements_trait, is_type_diagnostic_item, match_type, peel_mid_ty_refs};\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n@@ -1614,7 +1614,8 @@ where\n \n mod redundant_pattern_match {\n     use super::REDUNDANT_PATTERN_MATCHING;\n-    use crate::utils::{is_trait_method, match_qpath, paths, snippet, span_lint_and_then};\n+    use crate::utils::{is_trait_method, match_qpath, paths, span_lint_and_then};\n+    use clippy_utils::source::snippet;\n     use if_chain::if_chain;\n     use rustc_ast::ast::LitKind;\n     use rustc_errors::Applicability;"}, {"sha": "fbdc0cdb2d89fd58d87e0a7480693933b026e479", "filename": "clippy_lints/src/mem_discriminant.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmem_discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmem_discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_discriminant.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{match_def_path, paths, snippet, span_lint_and_then};\n+use crate::utils::{match_def_path, paths, span_lint_and_then};\n+use clippy_utils::source::snippet;\n use clippy_utils::ty::walk_ptrs_ty_depth;\n use if_chain::if_chain;\n use rustc_errors::Applicability;"}, {"sha": "bf3f6f7f8307a45f05215df69bf29adf3a76babe", "filename": "clippy_lints/src/mem_replace.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_replace.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,7 +1,9 @@\n use crate::utils::{\n-    in_macro, match_def_path, match_qpath, meets_msrv, paths, snippet, snippet_with_applicability, span_lint_and_help,\n-    span_lint_and_sugg, span_lint_and_then,\n+    in_macro, match_def_path, match_qpath, meets_msrv, paths, span_lint_and_help, span_lint_and_sugg,\n+    span_lint_and_then,\n };\n+use clippy_utils::is_diagnostic_assoc_item;\n+use clippy_utils::source::{snippet, snippet_with_applicability};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::def_id::DefId;\n@@ -13,8 +15,6 @@ use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n use rustc_span::symbol::sym;\n \n-use clippy_utils::is_diagnostic_assoc_item;\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for `mem::replace()` on an `Option` with\n     /// `None`."}, {"sha": "99b3be67f18d673cc18eeb0e4e2d5c380315cbdb", "filename": "clippy_lints/src/methods/bind_instead_of_map.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,8 +1,9 @@\n use super::{contains_return, BIND_INSTEAD_OF_MAP};\n use crate::utils::{\n-    in_macro, match_qpath, method_calls, multispan_sugg_with_applicability, paths, remove_blocks, snippet,\n-    snippet_with_macro_callsite, span_lint_and_sugg, span_lint_and_then, visitors::find_all_ret_expressions,\n+    in_macro, match_qpath, method_calls, multispan_sugg_with_applicability, paths, remove_blocks, span_lint_and_sugg,\n+    span_lint_and_then, visitors::find_all_ret_expressions,\n };\n+use clippy_utils::source::{snippet, snippet_with_macro_callsite};\n use clippy_utils::ty::match_type;\n use if_chain::if_chain;\n use rustc_errors::Applicability;"}, {"sha": "f81e9a8c52435a3857df3210ce62465140a0a34b", "filename": "clippy_lints/src/methods/bytes_nth.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmethods%2Fbytes_nth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmethods%2Fbytes_nth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fbytes_nth.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{snippet_with_applicability, span_lint_and_sugg};\n+use crate::utils::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_errors::Applicability;"}, {"sha": "90ecb2382e7189abd96b1a89616cfe11d97e1fad", "filename": "clippy_lints/src/methods/clone_on_ref_ptr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_ref_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_ref_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_ref_ptr.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{paths, snippet_with_macro_callsite, span_lint_and_sugg};\n+use crate::utils::{paths, span_lint_and_sugg};\n+use clippy_utils::source::snippet_with_macro_callsite;\n use clippy_utils::ty::{is_type_diagnostic_item, match_type};\n use rustc_errors::Applicability;\n use rustc_hir as hir;"}, {"sha": "9e96d571337ffdf50164ab4f5cb5fabdf8c10444", "filename": "clippy_lints/src/methods/expect_fun_call.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmethods%2Fexpect_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmethods%2Fexpect_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fexpect_fun_call.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{is_expn_of, snippet, snippet_with_applicability, span_lint_and_sugg};\n+use crate::utils::{is_expn_of, span_lint_and_sugg};\n+use clippy_utils::source::{snippet, snippet_with_applicability};\n use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_errors::Applicability;"}, {"sha": "964c4903ed204d5907abb1630d5a882f8ca86ce9", "filename": "clippy_lints/src/methods/filter_map.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{is_trait_method, path_to_local_id, snippet, span_lint_and_sugg, SpanlessEq};\n+use crate::utils::{is_trait_method, path_to_local_id, span_lint_and_sugg, SpanlessEq};\n+use clippy_utils::source::snippet;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;"}, {"sha": "ed75315b52c56c3eb9a8c46c5f019b8d4e3af10e", "filename": "clippy_lints/src/methods/filter_map_next.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map_next.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map_next.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map_next.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{is_trait_method, meets_msrv, snippet, span_lint, span_lint_and_sugg};\n+use crate::utils::{is_trait_method, meets_msrv, span_lint, span_lint_and_sugg};\n+use clippy_utils::source::snippet;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;"}, {"sha": "097f9fdf2c4b23ec33745538855f91f0be61713a", "filename": "clippy_lints/src/methods/filter_next.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmethods%2Ffilter_next.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmethods%2Ffilter_next.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffilter_next.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{is_trait_method, snippet, span_lint, span_lint_and_sugg};\n+use crate::utils::{is_trait_method, span_lint, span_lint_and_sugg};\n+use clippy_utils::source::snippet;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;"}, {"sha": "b9d34b402bb0914dd3d65f625dca3ab85e76b0f3", "filename": "clippy_lints/src/methods/get_unwrap.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmethods%2Fget_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmethods%2Fget_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fget_unwrap.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,5 +1,6 @@\n use crate::methods::derefs_to_slice;\n-use crate::utils::{get_parent_expr, paths, snippet_with_applicability, span_lint_and_sugg};\n+use crate::utils::{get_parent_expr, paths, span_lint_and_sugg};\n+use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::ty::{is_type_diagnostic_item, match_type};\n use if_chain::if_chain;\n use rustc_errors::Applicability;"}, {"sha": "19d05b5c6933ced7db6e0570387c499475b3f2eb", "filename": "clippy_lints/src/methods/inefficient_to_string.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,5 +1,6 @@\n use super::INEFFICIENT_TO_STRING;\n-use crate::utils::{match_def_path, paths, snippet_with_applicability, span_lint_and_then};\n+use crate::utils::{match_def_path, paths, span_lint_and_then};\n+use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::ty::{is_type_diagnostic_item, walk_ptrs_ty_depth};\n use if_chain::if_chain;\n use rustc_errors::Applicability;"}, {"sha": "0f393423b7d734546d2bc9f4c7074670e3307386", "filename": "clippy_lints/src/methods/iter_count.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmethods%2Fiter_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmethods%2Fiter_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_count.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,5 +1,6 @@\n use crate::methods::derefs_to_slice;\n-use crate::utils::{paths, snippet_with_applicability, span_lint_and_sugg};\n+use crate::utils::{paths, span_lint_and_sugg};\n+use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::ty::{is_type_diagnostic_item, match_type};\n use rustc_errors::Applicability;\n use rustc_hir::Expr;"}, {"sha": "f79942576da05804db188874b923786b7374579d", "filename": "clippy_lints/src/methods/iter_next_slice.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmethods%2Fiter_next_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmethods%2Fiter_next_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_next_slice.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,5 +1,6 @@\n use crate::methods::derefs_to_slice;\n-use crate::utils::{get_parent_expr, higher, snippet_with_applicability, span_lint_and_sugg};\n+use crate::utils::{get_parent_expr, higher, span_lint_and_sugg};\n+use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_ast::ast;"}, {"sha": "98ddfdfdf9c9eba52816f2386909ac934ff52d5c", "filename": "clippy_lints/src/methods/iter_nth_zero.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmethods%2Fiter_nth_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmethods%2Fiter_nth_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_nth_zero.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,5 +1,6 @@\n use crate::consts::{constant, Constant};\n-use crate::utils::{is_trait_method, snippet_with_applicability, span_lint_and_sugg};\n+use crate::utils::{is_trait_method, span_lint_and_sugg};\n+use clippy_utils::source::snippet_with_applicability;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;"}, {"sha": "d191ea0a831ae4e28dd14d82db8d35ef3b28c71a", "filename": "clippy_lints/src/methods/iter_skip_next.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmethods%2Fiter_skip_next.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmethods%2Fiter_skip_next.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_skip_next.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{is_trait_method, snippet, span_lint_and_sugg};\n+use crate::utils::{is_trait_method, span_lint_and_sugg};\n+use clippy_utils::source::snippet;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;"}, {"sha": "d090a35a3cf9e1e58d4549de02dac3176e2b385b", "filename": "clippy_lints/src/methods/manual_saturating_arithmetic.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{match_qpath, snippet_with_applicability, span_lint_and_sugg};\n+use crate::utils::{match_qpath, span_lint_and_sugg};\n+use clippy_utils::source::snippet_with_applicability;\n use if_chain::if_chain;\n use rustc_ast::ast;\n use rustc_errors::Applicability;"}, {"sha": "349b26b9d585e1f8cd1c0d8971eb360f2abc74d9", "filename": "clippy_lints/src/methods/map_collect_result_unit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmethods%2Fmap_collect_result_unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmethods%2Fmap_collect_result_unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmap_collect_result_unit.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{is_trait_method, snippet, span_lint_and_sugg};\n+use crate::utils::{is_trait_method, span_lint_and_sugg};\n+use clippy_utils::source::snippet;\n use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_errors::Applicability;"}, {"sha": "56719b3cff2f6ddd2815a6931f6e5392f70766a2", "filename": "clippy_lints/src/methods/map_flatten.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmethods%2Fmap_flatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmethods%2Fmap_flatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmap_flatten.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{is_trait_method, snippet, span_lint_and_sugg};\n+use crate::utils::{is_trait_method, span_lint_and_sugg};\n+use clippy_utils::source::snippet;\n use clippy_utils::ty::is_type_diagnostic_item;\n use rustc_errors::Applicability;\n use rustc_hir as hir;"}, {"sha": "96dbc7ddc63c7fab928f0f13dbb23797c9f61494", "filename": "clippy_lints/src/methods/map_unwrap_or.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmethods%2Fmap_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmethods%2Fmap_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmap_unwrap_or.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,5 +1,6 @@\n use crate::utils::usage::mutated_variables;\n-use crate::utils::{meets_msrv, snippet, span_lint, span_lint_and_sugg};\n+use crate::utils::{meets_msrv, span_lint, span_lint_and_sugg};\n+use clippy_utils::source::snippet;\n use clippy_utils::ty::is_type_diagnostic_item;\n use rustc_errors::Applicability;\n use rustc_hir as hir;"}, {"sha": "47617e4722e69f065df361326b7c81a29ba7a567", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -52,6 +52,7 @@ mod wrong_self_convention;\n mod zst_offset;\n \n use bind_instead_of_map::BindInsteadOfMap;\n+use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::ty::{contains_ty, implements_trait, is_copy, is_type_diagnostic_item};\n use if_chain::if_chain;\n use rustc_ast::ast;\n@@ -68,8 +69,8 @@ use rustc_typeck::hir_ty_to_ty;\n \n use crate::utils::{\n     contains_return, get_trait_def_id, in_macro, iter_input_pats, match_def_path, match_qpath, method_calls,\n-    method_chain_args, paths, return_ty, single_segment_path, snippet_with_applicability, span_lint,\n-    span_lint_and_help, span_lint_and_sugg, SpanlessEq,\n+    method_chain_args, paths, return_ty, single_segment_path, span_lint, span_lint_and_help, span_lint_and_sugg,\n+    SpanlessEq,\n };\n \n declare_clippy_lint! {"}, {"sha": "6597e9f96a838e27603988ccff3f6fb854f50871", "filename": "clippy_lints/src/methods/option_as_ref_deref.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{match_def_path, meets_msrv, path_to_local_id, paths, remove_blocks, snippet, span_lint_and_sugg};\n+use crate::utils::{match_def_path, meets_msrv, path_to_local_id, paths, remove_blocks, span_lint_and_sugg};\n+use clippy_utils::source::snippet;\n use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_errors::Applicability;"}, {"sha": "eed71d024671b2755581184bb9812677bce285dc", "filename": "clippy_lints/src/methods/option_map_or_none.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmethods%2Foption_map_or_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmethods%2Foption_map_or_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Foption_map_or_none.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{match_qpath, paths, snippet, span_lint_and_sugg};\n+use crate::utils::{match_qpath, paths, span_lint_and_sugg};\n+use clippy_utils::source::snippet;\n use clippy_utils::ty::is_type_diagnostic_item;\n use rustc_errors::Applicability;\n use rustc_hir as hir;"}, {"sha": "398d8f13bd4a748c25876c1d27a0831cd2462916", "filename": "clippy_lints/src/methods/option_map_unwrap_or.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{differing_macro_contexts, snippet_with_applicability, span_lint_and_then};\n+use crate::utils::{differing_macro_contexts, span_lint_and_then};\n+use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::ty::is_copy;\n use clippy_utils::ty::is_type_diagnostic_item;\n use rustc_data_structures::fx::FxHashSet;"}, {"sha": "634feebe54acfb4722faa5e00587255ac2a2380f", "filename": "clippy_lints/src/methods/or_fun_call.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,8 +1,6 @@\n use crate::utils::eager_or_lazy::is_lazyness_candidate;\n-use crate::utils::{\n-    contains_return, get_trait_def_id, last_path_segment, paths, snippet, snippet_with_applicability,\n-    snippet_with_macro_callsite, span_lint_and_sugg,\n-};\n+use crate::utils::{contains_return, get_trait_def_id, last_path_segment, paths, span_lint_and_sugg};\n+use clippy_utils::source::{snippet, snippet_with_applicability, snippet_with_macro_callsite};\n use clippy_utils::ty::{implements_trait, is_type_diagnostic_item, match_type};\n use if_chain::if_chain;\n use rustc_errors::Applicability;"}, {"sha": "6054579d9881a8fa763474a8d93cb9f0b2a93422", "filename": "clippy_lints/src/methods/search_is_some.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,6 +1,5 @@\n-use crate::utils::{\n-    is_trait_method, snippet, snippet_with_applicability, span_lint_and_help, span_lint_and_sugg, strip_pat_refs,\n-};\n+use crate::utils::{is_trait_method, span_lint_and_help, span_lint_and_sugg, strip_pat_refs};\n+use clippy_utils::source::{snippet, snippet_with_applicability};\n use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_errors::Applicability;"}, {"sha": "ff67564b39d6e4b72382f92b9d26ed567b2facdc", "filename": "clippy_lints/src/methods/single_char_insert_string.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmethods%2Fsingle_char_insert_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmethods%2Fsingle_char_insert_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsingle_char_insert_string.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,5 +1,6 @@\n use crate::methods::get_hint_if_single_char_arg;\n-use crate::utils::{snippet_with_applicability, span_lint_and_sugg};\n+use crate::utils::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_applicability;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;"}, {"sha": "18df90c1ab3609863ea01f7b7ab95d254afd4b87", "filename": "clippy_lints/src/methods/single_char_push_string.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmethods%2Fsingle_char_push_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmethods%2Fsingle_char_push_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsingle_char_push_string.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,5 +1,6 @@\n use crate::methods::get_hint_if_single_char_arg;\n-use crate::utils::{snippet_with_applicability, span_lint_and_sugg};\n+use crate::utils::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_applicability;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;"}, {"sha": "1b26e8314afc58466952d708884c5eb049abd467", "filename": "clippy_lints/src/methods/string_extend_chars.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmethods%2Fstring_extend_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmethods%2Fstring_extend_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fstring_extend_chars.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{method_chain_args, snippet_with_applicability, span_lint_and_sugg};\n+use crate::utils::{method_chain_args, span_lint_and_sugg};\n+use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::ty::is_type_diagnostic_item;\n use rustc_errors::Applicability;\n use rustc_hir as hir;"}, {"sha": "4d5cbdd619d2db238fc465d884c9f411d692e990", "filename": "clippy_lints/src/methods/unnecessary_fold.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_fold.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,6 +1,5 @@\n-use crate::utils::{\n-    is_trait_method, path_to_local_id, remove_blocks, snippet_with_applicability, span_lint_and_sugg, strip_pat_refs,\n-};\n+use crate::utils::{is_trait_method, path_to_local_id, remove_blocks, span_lint_and_sugg, strip_pat_refs};\n+use clippy_utils::source::snippet_with_applicability;\n use if_chain::if_chain;\n use rustc_ast::ast;\n use rustc_errors::Applicability;"}, {"sha": "444abde3d0fadbda03244e6fbaee11e176b37085", "filename": "clippy_lints/src/methods/unnecessary_lazy_eval.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,5 +1,6 @@\n+use crate::utils::span_lint_and_sugg;\n use crate::utils::{eager_or_lazy, usage};\n-use crate::utils::{snippet, span_lint_and_sugg};\n+use clippy_utils::source::snippet;\n use clippy_utils::ty::is_type_diagnostic_item;\n use rustc_errors::Applicability;\n use rustc_hir as hir;"}, {"sha": "c6d84aedc0ab288ab58325dcb5e73638f3f57115", "filename": "clippy_lints/src/methods/useless_asref.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmethods%2Fuseless_asref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmethods%2Fuseless_asref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fuseless_asref.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{get_parent_expr, match_trait_method, paths, snippet_with_applicability, span_lint_and_sugg};\n+use crate::utils::{get_parent_expr, match_trait_method, paths, span_lint_and_sugg};\n+use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::ty::walk_ptrs_ty_depth;\n use if_chain::if_chain;\n use rustc_errors::Applicability;"}, {"sha": "f161054cc8c7fa8f922d67c3365a1e7cecc225ae", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,3 +1,4 @@\n+use clippy_utils::source::{snippet, snippet_opt};\n use clippy_utils::ty::implements_trait;\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n@@ -19,8 +20,8 @@ use crate::consts::{constant, Constant};\n use crate::utils::sugg::Sugg;\n use crate::utils::{\n     get_item_name, get_parent_expr, higher, in_constant, is_diagnostic_assoc_item, is_integer_const, iter_input_pats,\n-    last_path_segment, match_qpath, snippet, snippet_opt, span_lint, span_lint_and_sugg, span_lint_and_then,\n-    span_lint_hir_and_then, unsext, SpanlessEq,\n+    last_path_segment, match_qpath, span_lint, span_lint_and_sugg, span_lint_and_then, span_lint_hir_and_then, unsext,\n+    SpanlessEq,\n };\n \n declare_clippy_lint! {"}, {"sha": "6ec523498e13825add1ed60d2dcc238f9f8a83b1", "filename": "clippy_lints/src/misc_early.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{snippet_opt, span_lint, span_lint_and_help, span_lint_and_sugg, span_lint_and_then};\n+use crate::utils::{span_lint, span_lint_and_help, span_lint_and_sugg, span_lint_and_then};\n+use clippy_utils::source::snippet_opt;\n use rustc_ast::ast::{\n     BindingMode, Expr, ExprKind, GenericParamKind, Generics, Lit, LitFloatType, LitIntType, LitKind, Mutability,\n     NodeId, Pat, PatKind, UnOp,"}, {"sha": "22adbdf09a6f84ffbd2da778c9f93c9aaaa476bb", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -3,7 +3,8 @@\n //! This lint is **warn** by default\n \n use crate::utils::sugg::Sugg;\n-use crate::utils::{is_expn_of, parent_node_is_if_expr, snippet_with_applicability, span_lint, span_lint_and_sugg};\n+use crate::utils::{is_expn_of, parent_node_is_if_expr, span_lint, span_lint_and_sugg};\n+use clippy_utils::source::snippet_with_applicability;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, Block, Expr, ExprKind, StmtKind, UnOp};"}, {"sha": "d8b574af1fee24c05e04f745b0052ca9fb40d02f", "filename": "clippy_lints/src/needless_borrow.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrow.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -2,7 +2,8 @@\n //!\n //! This lint is **warn** by default\n \n-use crate::utils::{is_automatically_derived, snippet_opt, span_lint_and_then};\n+use crate::utils::{is_automatically_derived, span_lint_and_then};\n+use clippy_utils::source::snippet_opt;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{BindingAnnotation, BorrowKind, Expr, ExprKind, Item, Mutability, Pat, PatKind};"}, {"sha": "5ee71f256949b65c496733a2e143d674675d842d", "filename": "clippy_lints/src/needless_borrowed_ref.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{snippet_with_applicability, span_lint_and_then};\n+use crate::utils::span_lint_and_then;\n+use clippy_utils::source::snippet_with_applicability;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{BindingAnnotation, Mutability, Node, Pat, PatKind};"}, {"sha": "4ff9070420714808e3893fd25ed22628e97d74d0", "filename": "clippy_lints/src/needless_continue.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fneedless_continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fneedless_continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_continue.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -33,13 +33,14 @@\n //! ```\n //!\n //! This lint is **warn** by default.\n+use clippy_utils::source::{indent_of, snippet, snippet_block};\n use rustc_ast::ast;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::{original_sp, DUMMY_SP};\n use rustc_span::Span;\n \n-use crate::utils::{indent_of, snippet, snippet_block, span_lint_and_help};\n+use crate::utils::span_lint_and_help;\n \n declare_clippy_lint! {\n     /// **What it does:** The lint checks for `if`-statements appearing in loops"}, {"sha": "6f7a5d85480e25762529fc1ec9f096b0a3fbf09a", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,5 +1,6 @@\n use crate::utils::ptr::get_spans;\n-use crate::utils::{get_trait_def_id, is_self, multispan_sugg, paths, snippet, snippet_opt, span_lint_and_then};\n+use crate::utils::{get_trait_def_id, is_self, multispan_sugg, paths, span_lint_and_then};\n+use clippy_utils::source::{snippet, snippet_opt};\n use clippy_utils::ty::{implements_trait, is_copy, is_type_diagnostic_item};\n use if_chain::if_chain;\n use rustc_ast::ast::Attribute;"}, {"sha": "bcc39ff855c232d75dda37807773b297bfa5ea27", "filename": "clippy_lints/src/needless_question_mark.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fneedless_question_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fneedless_question_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_question_mark.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,3 +1,4 @@\n+use clippy_utils::source::snippet;\n use clippy_utils::ty::is_type_diagnostic_item;\n use rustc_errors::Applicability;\n use rustc_hir::{Body, Expr, ExprKind, LangItem, MatchSource, QPath};\n@@ -145,7 +146,7 @@ fn emit_lint(cx: &LateContext<'_>, expr: &SomeOkCall<'_>) {\n         entire_expr.span,\n         \"question mark operator is useless here\",\n         \"try\",\n-        format!(\"{}\", utils::snippet(cx, inner_expr.span, r#\"\"...\"\"#)),\n+        format!(\"{}\", snippet(cx, inner_expr.span, r#\"\"...\"\"#)),\n         Applicability::MachineApplicable,\n     );\n }"}, {"sha": "7a7bc7a44cd477d91581ad53f886edaa72610d8a", "filename": "clippy_lints/src/no_effect.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_effect.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{snippet_opt, span_lint, span_lint_and_sugg};\n+use crate::utils::{span_lint, span_lint_and_sugg};\n+use clippy_utils::source::snippet_opt;\n use clippy_utils::ty::has_drop;\n use rustc_errors::Applicability;\n use rustc_hir::def::{DefKind, Res};"}, {"sha": "757ead2c24c8df9ac81e55c24f9cf4f392aba913", "filename": "clippy_lints/src/pass_by_ref_or_value.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,6 +1,7 @@\n use std::cmp;\n \n-use crate::utils::{is_self_ty, snippet, span_lint_and_sugg};\n+use crate::utils::{is_self_ty, span_lint_and_sugg};\n+use clippy_utils::source::snippet;\n use clippy_utils::ty::is_copy;\n use if_chain::if_chain;\n use rustc_ast::attr;"}, {"sha": "fbe54e92ab9b1f924928da0925b0963719c7d81b", "filename": "clippy_lints/src/precedence.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fprecedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fprecedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fprecedence.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{snippet_with_applicability, span_lint_and_sugg};\n+use crate::utils::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_applicability;\n use if_chain::if_chain;\n use rustc_ast::ast::{BinOpKind, Expr, ExprKind, LitKind, UnOp};\n use rustc_errors::Applicability;"}, {"sha": "bfe8bf33f518cf2c63feabe6a232a98e19834da4", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,7 +1,8 @@\n //! Checks for usage of  `&Vec[_]` and `&String`.\n \n use crate::utils::ptr::get_spans;\n-use crate::utils::{is_allowed, match_qpath, paths, snippet_opt, span_lint, span_lint_and_sugg, span_lint_and_then};\n+use crate::utils::{is_allowed, match_qpath, paths, span_lint, span_lint_and_sugg, span_lint_and_then};\n+use clippy_utils::source::snippet_opt;\n use clippy_utils::ty::{is_type_diagnostic_item, match_type, walk_ptrs_hir_ty};\n use if_chain::if_chain;\n use rustc_errors::Applicability;"}, {"sha": "4f83e370c5f6513b207c0649996a2bdc35215bcc", "filename": "clippy_lints/src/ptr_eq.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fptr_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fptr_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr_eq.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,4 +1,5 @@\n use crate::utils;\n+use clippy_utils::source::snippet_opt;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, Expr, ExprKind};\n@@ -54,8 +55,8 @@ impl LateLintPass<'_> for PtrEq {\n                 if_chain! {\n                     if let Some(left_var) = expr_as_cast_to_raw_pointer(cx, left);\n                     if let Some(right_var) = expr_as_cast_to_raw_pointer(cx, right);\n-                    if let Some(left_snip) = utils::snippet_opt(cx, left_var.span);\n-                    if let Some(right_snip) = utils::snippet_opt(cx, right_var.span);\n+                    if let Some(left_snip) = snippet_opt(cx, left_var.span);\n+                    if let Some(right_snip) = snippet_opt(cx, right_var.span);\n                     then {\n                         utils::span_lint_and_sugg(\n                             cx,"}, {"sha": "b801defeb24cee63a5ced561d54f1e84225f831b", "filename": "clippy_lints/src/ptr_offset_with_cast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fptr_offset_with_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fptr_offset_with_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr_offset_with_cast.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{snippet_opt, span_lint, span_lint_and_sugg};\n+use crate::utils::{span_lint, span_lint_and_sugg};\n+use clippy_utils::source::snippet_opt;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};"}, {"sha": "43431425a43e4e83ec913d5c1cd873fa82e669e1", "filename": "clippy_lints/src/question_mark.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fquestion_mark.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,3 +1,4 @@\n+use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n@@ -8,7 +9,7 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n \n use crate::utils::sugg::Sugg;\n-use crate::utils::{eq_expr_value, match_def_path, match_qpath, paths, snippet_with_applicability, span_lint_and_sugg};\n+use crate::utils::{eq_expr_value, match_def_path, match_qpath, paths, span_lint_and_sugg};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for expressions that could be replaced by the question mark operator."}, {"sha": "3ce8949bf8bb4aa621d43b65eefa00982cab5fc1", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,4 +1,5 @@\n use crate::consts::{constant, Constant};\n+use clippy_utils::source::{snippet, snippet_opt, snippet_with_applicability};\n use if_chain::if_chain;\n use rustc_ast::ast::RangeLimits;\n use rustc_errors::Applicability;\n@@ -14,8 +15,8 @@ use std::cmp::Ordering;\n \n use crate::utils::sugg::Sugg;\n use crate::utils::{\n-    get_parent_expr, in_constant, is_integer_const, meets_msrv, single_segment_path, snippet, snippet_opt,\n-    snippet_with_applicability, span_lint, span_lint_and_sugg, span_lint_and_then,\n+    get_parent_expr, in_constant, is_integer_const, meets_msrv, single_segment_path, span_lint, span_lint_and_sugg,\n+    span_lint_and_then,\n };\n use crate::utils::{higher, SpanlessEq};\n "}, {"sha": "84723acd034d0fb177cf999108cf1d3ff3d976cc", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,6 +1,5 @@\n-use crate::utils::{\n-    fn_has_unsatisfiable_preds, match_def_path, paths, snippet_opt, span_lint_hir, span_lint_hir_and_then,\n-};\n+use crate::utils::{fn_has_unsatisfiable_preds, match_def_path, paths, span_lint_hir, span_lint_hir_and_then};\n+use clippy_utils::source::snippet_opt;\n use clippy_utils::ty::{has_drop, is_copy, is_type_diagnostic_item, walk_ptrs_ty_depth};\n use if_chain::if_chain;\n use rustc_data_structures::{fx::FxHashMap, transitive_relation::TransitiveRelation};"}, {"sha": "283e25553cf97dc4a40bb877ba9b9ea7a2a2d9e2", "filename": "clippy_lints/src/redundant_closure_call.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fredundant_closure_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fredundant_closure_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_closure_call.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{snippet_with_applicability, span_lint, span_lint_and_then};\n+use crate::utils::{span_lint, span_lint_and_then};\n+use clippy_utils::source::snippet_with_applicability;\n use if_chain::if_chain;\n use rustc_ast::ast;\n use rustc_ast::visit as ast_visit;"}, {"sha": "85ea91a387b80009b3cbe13ccabb2ced4edb9bc6", "filename": "clippy_lints/src/redundant_slicing.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fredundant_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fredundant_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_slicing.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,3 +1,4 @@\n+use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::ty::is_type_lang_item;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n@@ -6,7 +7,7 @@ use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::{lint::in_external_macro, ty::TyS};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n-use crate::utils::{snippet_with_applicability, span_lint_and_sugg};\n+use crate::utils::span_lint_and_sugg;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for redundant slicing expressions which use the full range, and"}, {"sha": "1352a65172389e069db42c0a2cf47c0dac44e39e", "filename": "clippy_lints/src/redundant_static_lifetimes.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{meets_msrv, snippet, span_lint_and_then};\n+use crate::utils::{meets_msrv, span_lint_and_then};\n+use clippy_utils::source::snippet;\n use rustc_ast::ast::{Item, ItemKind, Ty, TyKind};\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};"}, {"sha": "cec6b06262bebc80d998c7b70fe86e84da71c00e", "filename": "clippy_lints/src/ref_option_ref.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fref_option_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fref_option_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fref_option_ref.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,12 +1,12 @@\n-use crate::utils::{last_path_segment, snippet, span_lint_and_sugg};\n+use crate::utils::{last_path_segment, span_lint_and_sugg};\n+use clippy_utils::source::snippet;\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n use rustc_hir::{GenericArg, Mutability, Ty, TyKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::sym;\n \n-use if_chain::if_chain;\n-use rustc_errors::Applicability;\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for usage of `&Option<&T>`.\n     ///"}, {"sha": "31e834ac17447eede2fbc85bab58424399370459", "filename": "clippy_lints/src/reference.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Freference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Freference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freference.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,5 +1,6 @@\n use crate::utils::sugg::Sugg;\n-use crate::utils::{in_macro, snippet_opt, snippet_with_applicability, span_lint_and_sugg};\n+use crate::utils::{in_macro, span_lint_and_sugg};\n+use clippy_utils::source::{snippet_opt, snippet_with_applicability};\n use if_chain::if_chain;\n use rustc_ast::ast::{Expr, ExprKind, Mutability, UnOp};\n use rustc_errors::Applicability;"}, {"sha": "a88078c12a33c1d5d50661e0c8f8c585d9948de3", "filename": "clippy_lints/src/repeat_once.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Frepeat_once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Frepeat_once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Frepeat_once.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,5 +1,6 @@\n use crate::consts::{constant_context, Constant};\n-use crate::utils::{in_macro, snippet, span_lint_and_sugg};\n+use crate::utils::{in_macro, span_lint_and_sugg};\n+use clippy_utils::source::snippet;\n use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_errors::Applicability;"}, {"sha": "eb7fe403fd7a88abced2b898ab688ac9d9ecf7dc", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,3 +1,4 @@\n+use clippy_utils::source::snippet_opt;\n use if_chain::if_chain;\n use rustc_ast::ast::Attribute;\n use rustc_errors::Applicability;\n@@ -11,7 +12,7 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n use rustc_span::sym;\n \n-use crate::utils::{fn_def_id, in_macro, match_qpath, snippet_opt, span_lint_and_sugg, span_lint_and_then};\n+use crate::utils::{fn_def_id, in_macro, match_qpath, span_lint_and_sugg, span_lint_and_then};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for `let`-bindings, which are subsequently"}, {"sha": "e62b75de4ca7d1fa5612719aab30035cb5a9c103", "filename": "clippy_lints/src/self_assignment.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fself_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fself_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fself_assignment.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{eq_expr_value, snippet, span_lint};\n+use crate::utils::{eq_expr_value, span_lint};\n+use clippy_utils::source::snippet;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};"}, {"sha": "695d7233af290c1dc36a80ce6291223b6a4712bf", "filename": "clippy_lints/src/semicolon_if_nothing_returned.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fsemicolon_if_nothing_returned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fsemicolon_if_nothing_returned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsemicolon_if_nothing_returned.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{in_macro, snippet_with_macro_callsite, span_lint_and_sugg, sugg};\n+use crate::utils::{in_macro, span_lint_and_sugg, sugg};\n+use clippy_utils::source::snippet_with_macro_callsite;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Block, ExprKind};"}, {"sha": "4a8cacb31fd627bf72ffbf88aa1c7c812f08282b", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{contains_name, higher, iter_input_pats, snippet, span_lint_and_then};\n+use crate::utils::{contains_name, higher, iter_input_pats, span_lint_and_then};\n+use clippy_utils::source::snippet;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{\n     Block, Body, Expr, ExprKind, FnDecl, Guard, HirId, Local, MutTy, Pat, PatKind, Path, QPath, StmtKind, Ty, TyKind,"}, {"sha": "ce93ab23b2f3e0d3f84ce7694f15181b01e8dcee", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -3,6 +3,7 @@ use crate::utils::{\n     get_parent_expr, is_allowed, match_function_call, method_calls, paths, span_lint, span_lint_and_help,\n     span_lint_and_sugg,\n };\n+use clippy_utils::source::{snippet, snippet_with_applicability};\n use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n@@ -204,7 +205,6 @@ declare_lint_pass!(StringLitAsBytes => [STRING_LIT_AS_BYTES, STRING_FROM_UTF8_AS\n \n impl<'tcx> LateLintPass<'tcx> for StringLitAsBytes {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) {\n-        use crate::utils::{snippet, snippet_with_applicability};\n         use rustc_ast::LitKind;\n \n         if_chain! {"}, {"sha": "3bdd9b7e4cbd9eb749d8176336cc60f7ad3ed016", "filename": "clippy_lints/src/suspicious_operation_groupings.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,5 +1,6 @@\n use crate::utils::ast_utils::{eq_id, is_useless_with_eq_exprs, IdentIter};\n-use crate::utils::{snippet_with_applicability, span_lint_and_sugg};\n+use crate::utils::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_applicability;\n use core::ops::{Add, AddAssign};\n use if_chain::if_chain;\n use rustc_ast::ast::{BinOpKind, Expr, ExprKind, StmtKind};"}, {"sha": "d4a495f3ea97b0918d5802eb6c1f8c882f27a842", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,5 +1,6 @@\n use crate::utils::sugg::Sugg;\n-use crate::utils::{differing_macro_contexts, eq_expr_value, snippet_with_applicability, span_lint_and_then};\n+use crate::utils::{differing_macro_contexts, eq_expr_value, span_lint_and_then};\n+use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_errors::Applicability;"}, {"sha": "940273afc57ba69edbaec707f1bea6356ce8df43", "filename": "clippy_lints/src/to_digit_is_some.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fto_digit_is_some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fto_digit_is_some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fto_digit_is_some.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{match_def_path, snippet_with_applicability, span_lint_and_sugg};\n+use crate::utils::{match_def_path, span_lint_and_sugg};\n+use clippy_utils::source::snippet_with_applicability;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;"}, {"sha": "d3314271c21d8f7677e1fede244c6b523a83e490", "filename": "clippy_lints/src/trait_bounds.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrait_bounds.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{in_macro, snippet, snippet_with_applicability, span_lint_and_help, SpanlessHash};\n+use crate::utils::{in_macro, span_lint_and_help, SpanlessHash};\n+use clippy_utils::source::{snippet, snippet_with_applicability};\n use if_chain::if_chain;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::Applicability;"}, {"sha": "4780eb9b14ed1a010bbd8f4eca92129134958333", "filename": "clippy_lints/src/transmute/transmute_ref_to_ref.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ref_to_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ref_to_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ref_to_ref.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,5 +1,6 @@\n use super::{TRANSMUTE_BYTES_TO_STR, TRANSMUTE_PTR_TO_PTR};\n-use crate::utils::{snippet, span_lint_and_sugg, span_lint_and_then, sugg};\n+use crate::utils::{span_lint_and_sugg, span_lint_and_then, sugg};\n+use clippy_utils::source::snippet;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, Mutability};"}, {"sha": "0633697687a44bd6edd2321648dc85110bdc6b07", "filename": "clippy_lints/src/transmute/utils.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Ftransmute%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Ftransmute%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Futils.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{last_path_segment, snippet};\n+use crate::utils::last_path_segment;\n+use clippy_utils::source::snippet;\n use clippy_utils::ty::is_normalizable;\n use if_chain::if_chain;\n use rustc_hir::{Expr, GenericArg, QPath, TyKind};"}, {"sha": "e356add8e9d8c08b96af7e73e04a2181f30a0fd6", "filename": "clippy_lints/src/try_err.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Ftry_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Ftry_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftry_err.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,7 +1,5 @@\n-use crate::utils::{\n-    differing_macro_contexts, in_macro, match_def_path, match_qpath, paths, snippet, snippet_with_macro_callsite,\n-    span_lint_and_sugg,\n-};\n+use crate::utils::{differing_macro_contexts, in_macro, match_def_path, match_qpath, paths, span_lint_and_sugg};\n+use clippy_utils::source::{snippet, snippet_with_macro_callsite};\n use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_errors::Applicability;"}, {"sha": "01aeea7a67f66f043f042c2a80230f4de5d87295", "filename": "clippy_lints/src/types/borrowed_box.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,14 +1,13 @@\n+use crate::utils::{match_path, paths, span_lint_and_sugg};\n+use clippy_utils::source::snippet;\n+use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{\n     self as hir, GenericArg, GenericBounds, GenericParamKind, HirId, Lifetime, MutTy, Mutability, Node, QPath,\n     SyntheticTyParamKind, TyKind,\n };\n use rustc_lint::LateContext;\n \n-use if_chain::if_chain;\n-\n-use crate::utils::{match_path, paths, snippet, span_lint_and_sugg};\n-\n use super::BORROWED_BOX;\n \n pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, lt: &Lifetime, mut_ty: &MutTy<'_>) -> bool {"}, {"sha": "279a971318cfe39777b76149e6595dbaab5c0c63", "filename": "clippy_lints/src/types/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -13,6 +13,7 @@ use std::borrow::Cow;\n use std::cmp::Ordering;\n use std::collections::BTreeMap;\n \n+use clippy_utils::source::{indent_of, reindent_multiline, snippet, snippet_opt, snippet_with_macro_callsite};\n use clippy_utils::ty::{is_isize_or_usize, is_type_diagnostic_item};\n use if_chain::if_chain;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n@@ -38,9 +39,8 @@ use rustc_typeck::hir_ty_to_ty;\n use crate::consts::{constant, Constant};\n use crate::utils::paths;\n use crate::utils::{\n-    clip, comparisons, differing_macro_contexts, higher, indent_of, int_bits, match_path, multispan_sugg,\n-    reindent_multiline, sext, snippet, snippet_opt, snippet_with_macro_callsite, span_lint, span_lint_and_help,\n-    span_lint_and_then, unsext,\n+    clip, comparisons, differing_macro_contexts, higher, int_bits, match_path, multispan_sugg, sext, span_lint,\n+    span_lint_and_help, span_lint_and_then, unsext,\n };\n \n declare_clippy_lint! {"}, {"sha": "0ace180753592d310b2f1b926f190317560361bd", "filename": "clippy_lints/src/types/rc_buffer.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Ftypes%2Frc_buffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Ftypes%2Frc_buffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Frc_buffer.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,11 +1,10 @@\n+use clippy_utils::source::snippet_with_applicability;\n use rustc_errors::Applicability;\n use rustc_hir::{self as hir, def_id::DefId, QPath, TyKind};\n use rustc_lint::LateContext;\n use rustc_span::symbol::sym;\n \n-use crate::utils::{\n-    get_qpath_generic_tys, is_ty_param_diagnostic_item, snippet_with_applicability, span_lint_and_sugg,\n-};\n+use crate::utils::{get_qpath_generic_tys, is_ty_param_diagnostic_item, span_lint_and_sugg};\n \n use super::RC_BUFFER;\n "}, {"sha": "c6f6a2f656443b2efce233a4da421e2e676fb093", "filename": "clippy_lints/src/types/redundant_allocation.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Ftypes%2Fredundant_allocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Ftypes%2Fredundant_allocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fredundant_allocation.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,12 +1,10 @@\n+use clippy_utils::source::snippet_with_applicability;\n use rustc_errors::Applicability;\n use rustc_hir::{self as hir, def_id::DefId, LangItem, QPath, TyKind};\n use rustc_lint::LateContext;\n use rustc_span::symbol::sym;\n \n-use crate::utils::{\n-    get_qpath_generic_tys, is_ty_param_diagnostic_item, is_ty_param_lang_item, snippet_with_applicability,\n-    span_lint_and_sugg,\n-};\n+use crate::utils::{get_qpath_generic_tys, is_ty_param_diagnostic_item, is_ty_param_lang_item, span_lint_and_sugg};\n \n use super::{utils, REDUNDANT_ALLOCATION};\n "}, {"sha": "6f45442b9baab7ab29c12df52619652f4a3a9e6b", "filename": "clippy_lints/src/types/vec_box.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Ftypes%2Fvec_box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Ftypes%2Fvec_box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fvec_box.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,3 +1,5 @@\n+use clippy_utils::source::snippet;\n+use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{self as hir, def_id::DefId, GenericArg, QPath, TyKind};\n use rustc_lint::LateContext;\n@@ -6,9 +8,7 @@ use rustc_span::symbol::sym;\n use rustc_target::abi::LayoutOf;\n use rustc_typeck::hir_ty_to_ty;\n \n-use if_chain::if_chain;\n-\n-use crate::utils::{last_path_segment, snippet, span_lint_and_sugg};\n+use crate::utils::{last_path_segment, span_lint_and_sugg};\n \n use super::VEC_BOX;\n "}, {"sha": "e44fec7ad8e7f8bdf0f54e01d1c566bde8ad7feb", "filename": "clippy_lints/src/unicode.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funicode.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{is_allowed, snippet, span_lint_and_sugg};\n+use crate::utils::{is_allowed, span_lint_and_sugg};\n+use clippy_utils::source::snippet;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, HirId};"}, {"sha": "01497de3211d2a0f9510729798fb8d40064d632e", "filename": "clippy_lints/src/unnecessary_wraps.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_wraps.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,7 +1,7 @@\n use crate::utils::{\n-    contains_return, in_macro, match_qpath, paths, return_ty, snippet, span_lint_and_then,\n-    visitors::find_all_ret_expressions,\n+    contains_return, in_macro, match_qpath, paths, return_ty, span_lint_and_then, visitors::find_all_ret_expressions,\n };\n+use clippy_utils::source::snippet;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::FnKind;"}, {"sha": "a90d26fc95c69aa5a5577b8a7110e530049b24f8", "filename": "clippy_lints/src/unused_unit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Funused_unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Funused_unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_unit.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,3 +1,4 @@\n+use clippy_utils::source::position_before_rarrow;\n use if_chain::if_chain;\n use rustc_ast::ast;\n use rustc_ast::visit::FnKind;\n@@ -7,7 +8,7 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n use rustc_span::BytePos;\n \n-use crate::utils::{position_before_rarrow, span_lint_and_sugg};\n+use crate::utils::span_lint_and_sugg;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for unit (`()`) expressions that can be removed."}, {"sha": "de7eb42d56dba8c6c00cd4c728310801c7aa0460", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,6 +1,7 @@\n-use crate::utils::{in_macro, meets_msrv, snippet_opt, span_lint_and_sugg};\n+use clippy_utils::source::snippet_opt;\n use if_chain::if_chain;\n \n+use crate::utils::{in_macro, meets_msrv, span_lint_and_sugg};\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;"}, {"sha": "e6b4fde560fdc031804b1b493e9a8ab415a3dd62", "filename": "clippy_lints/src/useless_conversion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuseless_conversion.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,8 +1,8 @@\n use crate::utils::sugg::Sugg;\n use crate::utils::{\n-    get_parent_expr, match_def_path, match_trait_method, paths, snippet, snippet_with_macro_callsite,\n-    span_lint_and_help, span_lint_and_sugg,\n+    get_parent_expr, match_def_path, match_trait_method, paths, span_lint_and_help, span_lint_and_sugg,\n };\n+use clippy_utils::source::{snippet, snippet_with_macro_callsite};\n use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_errors::Applicability;"}, {"sha": "04b8d9ee2c717e4220e079d53976b03303d19fd0", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,8 +1,9 @@\n use crate::consts::{constant_simple, Constant};\n use crate::utils::{\n-    is_expn_of, match_def_path, match_qpath, method_calls, path_to_res, paths, run_lints, snippet, span_lint,\n+    is_expn_of, match_def_path, match_qpath, method_calls, path_to_res, paths, run_lints, span_lint,\n     span_lint_and_help, span_lint_and_sugg, SpanlessEq,\n };\n+use clippy_utils::source::snippet;\n use clippy_utils::ty::match_type;\n use if_chain::if_chain;\n use rustc_ast::ast::{Crate as AstCrate, ItemKind, LitKind, ModKind, NodeId};"}, {"sha": "cd09a5b53e08b66670bd1fffbfb458945b085e1b", "filename": "clippy_lints/src/vec.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,6 +1,7 @@\n use crate::consts::{constant, Constant};\n use crate::rustc_target::abi::LayoutOf;\n-use crate::utils::{higher, snippet_with_applicability, span_lint_and_sugg};\n+use crate::utils::{higher, span_lint_and_sugg};\n+use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::ty::is_copy;\n use if_chain::if_chain;\n use rustc_errors::Applicability;"}, {"sha": "4ad787ecf66f3642fb3a94a3a9f08fbddc2017c0", "filename": "clippy_lints/src/vec_init_then_push.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fvec_init_then_push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fvec_init_then_push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec_init_then_push.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{match_def_path, path_to_local, path_to_local_id, paths, snippet, span_lint_and_sugg};\n+use crate::utils::{match_def_path, path_to_local, path_to_local_id, paths, span_lint_and_sugg};\n+use clippy_utils::source::snippet;\n use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;"}, {"sha": "e12ca49fd4c6212b83f1da34beeec574385787f7", "filename": "clippy_lints/src/wildcard_imports.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fwildcard_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fwildcard_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwildcard_imports.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{in_macro, snippet, snippet_with_applicability, span_lint_and_sugg};\n+use crate::utils::{in_macro, span_lint_and_sugg};\n+use clippy_utils::source::{snippet, snippet_with_applicability};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{"}, {"sha": "f2fef73a641dc363c4ed18c1ccc25b1e45f5607c", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,7 +1,8 @@\n use std::borrow::Cow;\n use std::ops::Range;\n \n-use crate::utils::{snippet_with_applicability, span_lint, span_lint_and_sugg, span_lint_and_then};\n+use crate::utils::{span_lint, span_lint_and_sugg, span_lint_and_then};\n+use clippy_utils::source::snippet_with_applicability;\n use if_chain::if_chain;\n use rustc_ast::ast::{Expr, ExprKind, ImplKind, Item, ItemKind, LitKind, MacCall, StrLit, StrStyle};\n use rustc_ast::token;"}, {"sha": "4c13a185d5de2fe9cd125b695db17710cb92cbd7", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,5 +1,6 @@\n use crate::consts::{constant_context, constant_simple};\n-use crate::{differing_macro_contexts, snippet_opt};\n+use crate::differing_macro_contexts;\n+use crate::source::snippet_opt;\n use rustc_ast::ast::InlineAsmTemplatePiece;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};"}, {"sha": "d895d798b5e4d23ab0b853f2e25db65c6965da23", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 3, "deletions": 413, "changes": 416, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -41,6 +41,7 @@ pub mod numeric_literal;\n pub mod paths;\n pub mod ptr;\n pub mod qualify_min_const_fn;\n+pub mod source;\n pub mod sugg;\n pub mod ty;\n pub mod usage;\n@@ -50,14 +51,12 @@ pub use self::attrs::*;\n pub use self::diagnostics::*;\n pub use self::hir_utils::{both, eq_expr_value, over, SpanlessEq, SpanlessHash};\n \n-use std::borrow::Cow;\n use std::collections::hash_map::Entry;\n use std::hash::BuildHasherDefault;\n \n use if_chain::if_chain;\n use rustc_ast::ast::{self, Attribute, BorrowKind, LitKind};\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, CtorOf, DefKind, Res};\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n@@ -75,11 +74,11 @@ use rustc_middle::ty as rustc_ty;\n use rustc_middle::ty::{layout::IntegerExt, DefIdTree, Ty, TyCtxt, TypeFoldable};\n use rustc_semver::RustcVersion;\n use rustc_session::Session;\n-use rustc_span::hygiene::{self, ExpnKind, MacroKind};\n+use rustc_span::hygiene::{ExpnKind, MacroKind};\n use rustc_span::source_map::original_sp;\n use rustc_span::sym;\n use rustc_span::symbol::{kw, Ident, Symbol};\n-use rustc_span::{BytePos, Pos, Span, SyntaxContext, DUMMY_SP};\n+use rustc_span::{Span, DUMMY_SP};\n use rustc_target::abi::Integer;\n use smallvec::SmallVec;\n \n@@ -236,20 +235,6 @@ pub fn in_macro(span: Span) -> bool {\n     }\n }\n \n-// If the snippet is empty, it's an attribute that was inserted during macro\n-// expansion and we want to ignore those, because they could come from external\n-// sources that the user has no control over.\n-// For some reason these attributes don't have any expansion info on them, so\n-// we have to check it this way until there is a better way.\n-pub fn is_present_in_source<T: LintContext>(cx: &T, span: Span) -> bool {\n-    if let Some(snippet) = snippet_opt(cx, span) {\n-        if snippet.is_empty() {\n-            return false;\n-        }\n-    }\n-    true\n-}\n-\n /// Checks if given pattern is a wildcard (`_`)\n pub fn is_wild<'tcx>(pat: &impl std::ops::Deref<Target = Pat<'tcx>>) -> bool {\n     matches!(pat.kind, PatKind::Wild)\n@@ -713,211 +698,6 @@ pub fn find_macro_calls(names: &[&str], body: &Body<'_>) -> Vec<Span> {\n     fmc.result\n }\n \n-/// Converts a span to a code snippet if available, otherwise use default.\n-///\n-/// This is useful if you want to provide suggestions for your lint or more generally, if you want\n-/// to convert a given `Span` to a `str`.\n-///\n-/// # Example\n-/// ```rust,ignore\n-/// snippet(cx, expr.span, \"..\")\n-/// ```\n-pub fn snippet<'a, T: LintContext>(cx: &T, span: Span, default: &'a str) -> Cow<'a, str> {\n-    snippet_opt(cx, span).map_or_else(|| Cow::Borrowed(default), From::from)\n-}\n-\n-/// Same as `snippet`, but it adapts the applicability level by following rules:\n-///\n-/// - Applicability level `Unspecified` will never be changed.\n-/// - If the span is inside a macro, change the applicability level to `MaybeIncorrect`.\n-/// - If the default value is used and the applicability level is `MachineApplicable`, change it to\n-/// `HasPlaceholders`\n-pub fn snippet_with_applicability<'a, T: LintContext>(\n-    cx: &T,\n-    span: Span,\n-    default: &'a str,\n-    applicability: &mut Applicability,\n-) -> Cow<'a, str> {\n-    if *applicability != Applicability::Unspecified && span.from_expansion() {\n-        *applicability = Applicability::MaybeIncorrect;\n-    }\n-    snippet_opt(cx, span).map_or_else(\n-        || {\n-            if *applicability == Applicability::MachineApplicable {\n-                *applicability = Applicability::HasPlaceholders;\n-            }\n-            Cow::Borrowed(default)\n-        },\n-        From::from,\n-    )\n-}\n-\n-/// Same as `snippet`, but should only be used when it's clear that the input span is\n-/// not a macro argument.\n-pub fn snippet_with_macro_callsite<'a, T: LintContext>(cx: &T, span: Span, default: &'a str) -> Cow<'a, str> {\n-    snippet(cx, span.source_callsite(), default)\n-}\n-\n-/// Converts a span to a code snippet. Returns `None` if not available.\n-pub fn snippet_opt<T: LintContext>(cx: &T, span: Span) -> Option<String> {\n-    cx.sess().source_map().span_to_snippet(span).ok()\n-}\n-\n-/// Converts a span (from a block) to a code snippet if available, otherwise use default.\n-///\n-/// This trims the code of indentation, except for the first line. Use it for blocks or block-like\n-/// things which need to be printed as such.\n-///\n-/// The `indent_relative_to` arg can be used, to provide a span, where the indentation of the\n-/// resulting snippet of the given span.\n-///\n-/// # Example\n-///\n-/// ```rust,ignore\n-/// snippet_block(cx, block.span, \"..\", None)\n-/// // where, `block` is the block of the if expr\n-///     if x {\n-///         y;\n-///     }\n-/// // will return the snippet\n-/// {\n-///     y;\n-/// }\n-/// ```\n-///\n-/// ```rust,ignore\n-/// snippet_block(cx, block.span, \"..\", Some(if_expr.span))\n-/// // where, `block` is the block of the if expr\n-///     if x {\n-///         y;\n-///     }\n-/// // will return the snippet\n-/// {\n-///         y;\n-///     } // aligned with `if`\n-/// ```\n-/// Note that the first line of the snippet always has 0 indentation.\n-pub fn snippet_block<'a, T: LintContext>(\n-    cx: &T,\n-    span: Span,\n-    default: &'a str,\n-    indent_relative_to: Option<Span>,\n-) -> Cow<'a, str> {\n-    let snip = snippet(cx, span, default);\n-    let indent = indent_relative_to.and_then(|s| indent_of(cx, s));\n-    reindent_multiline(snip, true, indent)\n-}\n-\n-/// Same as `snippet_block`, but adapts the applicability level by the rules of\n-/// `snippet_with_applicability`.\n-pub fn snippet_block_with_applicability<'a, T: LintContext>(\n-    cx: &T,\n-    span: Span,\n-    default: &'a str,\n-    indent_relative_to: Option<Span>,\n-    applicability: &mut Applicability,\n-) -> Cow<'a, str> {\n-    let snip = snippet_with_applicability(cx, span, default, applicability);\n-    let indent = indent_relative_to.and_then(|s| indent_of(cx, s));\n-    reindent_multiline(snip, true, indent)\n-}\n-\n-/// Same as `snippet_with_applicability`, but first walks the span up to the given context. This\n-/// will result in the macro call, rather then the expansion, if the span is from a child context.\n-/// If the span is not from a child context, it will be used directly instead.\n-///\n-/// e.g. Given the expression `&vec![]`, getting a snippet from the span for `vec![]` as a HIR node\n-/// would result in `box []`. If given the context of the address of expression, this function will\n-/// correctly get a snippet of `vec![]`.\n-///\n-/// This will also return whether or not the snippet is a macro call.\n-pub fn snippet_with_context(\n-    cx: &LateContext<'_>,\n-    span: Span,\n-    outer: SyntaxContext,\n-    default: &'a str,\n-    applicability: &mut Applicability,\n-) -> (Cow<'a, str>, bool) {\n-    let outer_span = hygiene::walk_chain(span, outer);\n-    let (span, is_macro_call) = if outer_span.ctxt() == outer {\n-        (outer_span, span.ctxt() != outer)\n-    } else {\n-        // The span is from a macro argument, and the outer context is the macro using the argument\n-        if *applicability != Applicability::Unspecified {\n-            *applicability = Applicability::MaybeIncorrect;\n-        }\n-        // TODO: get the argument span.\n-        (span, false)\n-    };\n-\n-    (\n-        snippet_with_applicability(cx, span, default, applicability),\n-        is_macro_call,\n-    )\n-}\n-\n-/// Returns a new Span that extends the original Span to the first non-whitespace char of the first\n-/// line.\n-///\n-/// ```rust,ignore\n-///     let x = ();\n-/// //          ^^\n-/// // will be converted to\n-///     let x = ();\n-/// //  ^^^^^^^^^^\n-/// ```\n-pub fn first_line_of_span<T: LintContext>(cx: &T, span: Span) -> Span {\n-    first_char_in_first_line(cx, span).map_or(span, |first_char_pos| span.with_lo(first_char_pos))\n-}\n-\n-fn first_char_in_first_line<T: LintContext>(cx: &T, span: Span) -> Option<BytePos> {\n-    let line_span = line_span(cx, span);\n-    snippet_opt(cx, line_span).and_then(|snip| {\n-        snip.find(|c: char| !c.is_whitespace())\n-            .map(|pos| line_span.lo() + BytePos::from_usize(pos))\n-    })\n-}\n-\n-/// Returns the indentation of the line of a span\n-///\n-/// ```rust,ignore\n-/// let x = ();\n-/// //      ^^ -- will return 0\n-///     let x = ();\n-/// //          ^^ -- will return 4\n-/// ```\n-pub fn indent_of<T: LintContext>(cx: &T, span: Span) -> Option<usize> {\n-    snippet_opt(cx, line_span(cx, span)).and_then(|snip| snip.find(|c: char| !c.is_whitespace()))\n-}\n-\n-/// Returns the positon just before rarrow\n-///\n-/// ```rust,ignore\n-/// fn into(self) -> () {}\n-///              ^\n-/// // in case of unformatted code\n-/// fn into2(self)-> () {}\n-///               ^\n-/// fn into3(self)   -> () {}\n-///               ^\n-/// ```\n-pub fn position_before_rarrow(s: &str) -> Option<usize> {\n-    s.rfind(\"->\").map(|rpos| {\n-        let mut rpos = rpos;\n-        let chars: Vec<char> = s.chars().collect();\n-        while rpos > 1 {\n-            if let Some(c) = chars.get(rpos - 1) {\n-                if c.is_whitespace() {\n-                    rpos -= 1;\n-                    continue;\n-                }\n-            }\n-            break;\n-        }\n-        rpos\n-    })\n-}\n-\n /// Extends the span to the beginning of the spans line, incl. whitespaces.\n ///\n /// ```rust,ignore\n@@ -935,66 +715,6 @@ fn line_span<T: LintContext>(cx: &T, span: Span) -> Span {\n     Span::new(line_start, span.hi(), span.ctxt())\n }\n \n-/// Like `snippet_block`, but add braces if the expr is not an `ExprKind::Block`.\n-/// Also takes an `Option<String>` which can be put inside the braces.\n-pub fn expr_block<'a, T: LintContext>(\n-    cx: &T,\n-    expr: &Expr<'_>,\n-    option: Option<String>,\n-    default: &'a str,\n-    indent_relative_to: Option<Span>,\n-) -> Cow<'a, str> {\n-    let code = snippet_block(cx, expr.span, default, indent_relative_to);\n-    let string = option.unwrap_or_default();\n-    if expr.span.from_expansion() {\n-        Cow::Owned(format!(\"{{ {} }}\", snippet_with_macro_callsite(cx, expr.span, default)))\n-    } else if let ExprKind::Block(_, _) = expr.kind {\n-        Cow::Owned(format!(\"{}{}\", code, string))\n-    } else if string.is_empty() {\n-        Cow::Owned(format!(\"{{ {} }}\", code))\n-    } else {\n-        Cow::Owned(format!(\"{{\\n{};\\n{}\\n}}\", code, string))\n-    }\n-}\n-\n-/// Reindent a multiline string with possibility of ignoring the first line.\n-#[allow(clippy::needless_pass_by_value)]\n-pub fn reindent_multiline(s: Cow<'_, str>, ignore_first: bool, indent: Option<usize>) -> Cow<'_, str> {\n-    let s_space = reindent_multiline_inner(&s, ignore_first, indent, ' ');\n-    let s_tab = reindent_multiline_inner(&s_space, ignore_first, indent, '\\t');\n-    reindent_multiline_inner(&s_tab, ignore_first, indent, ' ').into()\n-}\n-\n-fn reindent_multiline_inner(s: &str, ignore_first: bool, indent: Option<usize>, ch: char) -> String {\n-    let x = s\n-        .lines()\n-        .skip(ignore_first as usize)\n-        .filter_map(|l| {\n-            if l.is_empty() {\n-                None\n-            } else {\n-                // ignore empty lines\n-                Some(l.char_indices().find(|&(_, x)| x != ch).unwrap_or((l.len(), ch)).0)\n-            }\n-        })\n-        .min()\n-        .unwrap_or(0);\n-    let indent = indent.unwrap_or(0);\n-    s.lines()\n-        .enumerate()\n-        .map(|(i, l)| {\n-            if (ignore_first && i == 0) || l.is_empty() {\n-                l.to_owned()\n-            } else if x > indent {\n-                l.split_at(x - indent).1.to_owned()\n-            } else {\n-                \" \".repeat(indent - x) + l\n-            }\n-        })\n-        .collect::<Vec<String>>()\n-        .join(\"\\n\")\n-}\n-\n /// Gets the span of the node, if there is one.\n pub fn get_node_span(node: Node<'_>) -> Option<Span> {\n     match node {\n@@ -1366,39 +1086,6 @@ pub fn clip(tcx: TyCtxt<'_>, u: u128, ity: rustc_ty::UintTy) -> u128 {\n     (u << amt) >> amt\n }\n \n-/// Removes block comments from the given `Vec` of lines.\n-///\n-/// # Examples\n-///\n-/// ```rust,ignore\n-/// without_block_comments(vec![\"/*\", \"foo\", \"*/\"]);\n-/// // => vec![]\n-///\n-/// without_block_comments(vec![\"bar\", \"/*\", \"foo\", \"*/\"]);\n-/// // => vec![\"bar\"]\n-/// ```\n-pub fn without_block_comments(lines: Vec<&str>) -> Vec<&str> {\n-    let mut without = vec![];\n-\n-    let mut nest_level = 0;\n-\n-    for line in lines {\n-        if line.contains(\"/*\") {\n-            nest_level += 1;\n-            continue;\n-        } else if line.contains(\"*/\") {\n-            nest_level -= 1;\n-            continue;\n-        }\n-\n-        if nest_level == 0 {\n-            without.push(line);\n-        }\n-    }\n-\n-    without\n-}\n-\n pub fn any_parent_is_automatically_derived(tcx: TyCtxt<'_>, node: HirId) -> bool {\n     let map = &tcx.hir();\n     let mut prev_enclosing_node = None;\n@@ -1777,100 +1464,3 @@ pub fn is_some_ctor(cx: &LateContext<'_>, res: Res) -> bool {\n     }\n     false\n }\n-\n-#[cfg(test)]\n-mod test {\n-    use super::{reindent_multiline, without_block_comments};\n-\n-    #[test]\n-    fn test_reindent_multiline_single_line() {\n-        assert_eq!(\"\", reindent_multiline(\"\".into(), false, None));\n-        assert_eq!(\"...\", reindent_multiline(\"...\".into(), false, None));\n-        assert_eq!(\"...\", reindent_multiline(\"    ...\".into(), false, None));\n-        assert_eq!(\"...\", reindent_multiline(\"\\t...\".into(), false, None));\n-        assert_eq!(\"...\", reindent_multiline(\"\\t\\t...\".into(), false, None));\n-    }\n-\n-    #[test]\n-    #[rustfmt::skip]\n-    fn test_reindent_multiline_block() {\n-        assert_eq!(\"\\\n-    if x {\n-        y\n-    } else {\n-        z\n-    }\", reindent_multiline(\"    if x {\n-            y\n-        } else {\n-            z\n-        }\".into(), false, None));\n-        assert_eq!(\"\\\n-    if x {\n-    \\ty\n-    } else {\n-    \\tz\n-    }\", reindent_multiline(\"    if x {\n-        \\ty\n-        } else {\n-        \\tz\n-        }\".into(), false, None));\n-    }\n-\n-    #[test]\n-    #[rustfmt::skip]\n-    fn test_reindent_multiline_empty_line() {\n-        assert_eq!(\"\\\n-    if x {\n-        y\n-\n-    } else {\n-        z\n-    }\", reindent_multiline(\"    if x {\n-            y\n-\n-        } else {\n-            z\n-        }\".into(), false, None));\n-    }\n-\n-    #[test]\n-    #[rustfmt::skip]\n-    fn test_reindent_multiline_lines_deeper() {\n-        assert_eq!(\"\\\n-        if x {\n-            y\n-        } else {\n-            z\n-        }\", reindent_multiline(\"\\\n-    if x {\n-        y\n-    } else {\n-        z\n-    }\".into(), true, Some(8)));\n-    }\n-\n-    #[test]\n-    fn test_without_block_comments_lines_without_block_comments() {\n-        let result = without_block_comments(vec![\"/*\", \"\", \"*/\"]);\n-        println!(\"result: {:?}\", result);\n-        assert!(result.is_empty());\n-\n-        let result = without_block_comments(vec![\"\", \"/*\", \"\", \"*/\", \"#[crate_type = \\\"lib\\\"]\", \"/*\", \"\", \"*/\", \"\"]);\n-        assert_eq!(result, vec![\"\", \"#[crate_type = \\\"lib\\\"]\", \"\"]);\n-\n-        let result = without_block_comments(vec![\"/* rust\", \"\", \"*/\"]);\n-        assert!(result.is_empty());\n-\n-        let result = without_block_comments(vec![\"/* one-line comment */\"]);\n-        assert!(result.is_empty());\n-\n-        let result = without_block_comments(vec![\"/* nested\", \"/* multi-line\", \"comment\", \"*/\", \"test\", \"*/\"]);\n-        assert!(result.is_empty());\n-\n-        let result = without_block_comments(vec![\"/* nested /* inline /* comment */ test */ */\"]);\n-        assert!(result.is_empty());\n-\n-        let result = without_block_comments(vec![\"foo\", \"bar\", \"baz\"]);\n-        assert_eq!(result, vec![\"foo\", \"bar\", \"baz\"]);\n-    }\n-}"}, {"sha": "5885cc83560ff10d62fdec714d415acee760bfb9", "filename": "clippy_utils/src/ptr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_utils%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_utils%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fptr.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,4 +1,5 @@\n-use crate::{get_pat_name, match_var, snippet};\n+use crate::source::snippet;\n+use crate::{get_pat_name, match_var};\n use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc_hir::{Body, BodyId, Expr, ExprKind, Param};\n use rustc_lint::LateContext;"}, {"sha": "2d794d48dc5ff63dba4f0a5ba7901f7e5f7b06de", "filename": "clippy_utils/src/source.rs", "status": "added", "additions": 420, "deletions": 0, "changes": 420, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_utils%2Fsrc%2Fsource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_utils%2Fsrc%2Fsource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsource.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -0,0 +1,420 @@\n+//! Utils for extracting, inspecting or transforming source code\n+\n+#![allow(clippy::module_name_repetitions)]\n+\n+use crate::line_span;\n+use rustc_errors::Applicability;\n+use rustc_hir::{Expr, ExprKind};\n+use rustc_lint::{LateContext, LintContext};\n+use rustc_span::hygiene;\n+use rustc_span::{BytePos, Pos, Span, SyntaxContext};\n+use std::borrow::Cow;\n+\n+/// Like `snippet_block`, but add braces if the expr is not an `ExprKind::Block`.\n+/// Also takes an `Option<String>` which can be put inside the braces.\n+pub fn expr_block<'a, T: LintContext>(\n+    cx: &T,\n+    expr: &Expr<'_>,\n+    option: Option<String>,\n+    default: &'a str,\n+    indent_relative_to: Option<Span>,\n+) -> Cow<'a, str> {\n+    let code = snippet_block(cx, expr.span, default, indent_relative_to);\n+    let string = option.unwrap_or_default();\n+    if expr.span.from_expansion() {\n+        Cow::Owned(format!(\"{{ {} }}\", snippet_with_macro_callsite(cx, expr.span, default)))\n+    } else if let ExprKind::Block(_, _) = expr.kind {\n+        Cow::Owned(format!(\"{}{}\", code, string))\n+    } else if string.is_empty() {\n+        Cow::Owned(format!(\"{{ {} }}\", code))\n+    } else {\n+        Cow::Owned(format!(\"{{\\n{};\\n{}\\n}}\", code, string))\n+    }\n+}\n+\n+/// Returns a new Span that extends the original Span to the first non-whitespace char of the first\n+/// line.\n+///\n+/// ```rust,ignore\n+///     let x = ();\n+/// //          ^^\n+/// // will be converted to\n+///     let x = ();\n+/// //  ^^^^^^^^^^\n+/// ```\n+pub fn first_line_of_span<T: LintContext>(cx: &T, span: Span) -> Span {\n+    first_char_in_first_line(cx, span).map_or(span, |first_char_pos| span.with_lo(first_char_pos))\n+}\n+\n+fn first_char_in_first_line<T: LintContext>(cx: &T, span: Span) -> Option<BytePos> {\n+    let line_span = line_span(cx, span);\n+    snippet_opt(cx, line_span).and_then(|snip| {\n+        snip.find(|c: char| !c.is_whitespace())\n+            .map(|pos| line_span.lo() + BytePos::from_usize(pos))\n+    })\n+}\n+\n+/// Returns the indentation of the line of a span\n+///\n+/// ```rust,ignore\n+/// let x = ();\n+/// //      ^^ -- will return 0\n+///     let x = ();\n+/// //          ^^ -- will return 4\n+/// ```\n+pub fn indent_of<T: LintContext>(cx: &T, span: Span) -> Option<usize> {\n+    snippet_opt(cx, line_span(cx, span)).and_then(|snip| snip.find(|c: char| !c.is_whitespace()))\n+}\n+\n+// If the snippet is empty, it's an attribute that was inserted during macro\n+// expansion and we want to ignore those, because they could come from external\n+// sources that the user has no control over.\n+// For some reason these attributes don't have any expansion info on them, so\n+// we have to check it this way until there is a better way.\n+pub fn is_present_in_source<T: LintContext>(cx: &T, span: Span) -> bool {\n+    if let Some(snippet) = snippet_opt(cx, span) {\n+        if snippet.is_empty() {\n+            return false;\n+        }\n+    }\n+    true\n+}\n+\n+/// Returns the positon just before rarrow\n+///\n+/// ```rust,ignore\n+/// fn into(self) -> () {}\n+///              ^\n+/// // in case of unformatted code\n+/// fn into2(self)-> () {}\n+///               ^\n+/// fn into3(self)   -> () {}\n+///               ^\n+/// ```\n+pub fn position_before_rarrow(s: &str) -> Option<usize> {\n+    s.rfind(\"->\").map(|rpos| {\n+        let mut rpos = rpos;\n+        let chars: Vec<char> = s.chars().collect();\n+        while rpos > 1 {\n+            if let Some(c) = chars.get(rpos - 1) {\n+                if c.is_whitespace() {\n+                    rpos -= 1;\n+                    continue;\n+                }\n+            }\n+            break;\n+        }\n+        rpos\n+    })\n+}\n+\n+/// Reindent a multiline string with possibility of ignoring the first line.\n+#[allow(clippy::needless_pass_by_value)]\n+pub fn reindent_multiline(s: Cow<'_, str>, ignore_first: bool, indent: Option<usize>) -> Cow<'_, str> {\n+    let s_space = reindent_multiline_inner(&s, ignore_first, indent, ' ');\n+    let s_tab = reindent_multiline_inner(&s_space, ignore_first, indent, '\\t');\n+    reindent_multiline_inner(&s_tab, ignore_first, indent, ' ').into()\n+}\n+\n+fn reindent_multiline_inner(s: &str, ignore_first: bool, indent: Option<usize>, ch: char) -> String {\n+    let x = s\n+        .lines()\n+        .skip(ignore_first as usize)\n+        .filter_map(|l| {\n+            if l.is_empty() {\n+                None\n+            } else {\n+                // ignore empty lines\n+                Some(l.char_indices().find(|&(_, x)| x != ch).unwrap_or((l.len(), ch)).0)\n+            }\n+        })\n+        .min()\n+        .unwrap_or(0);\n+    let indent = indent.unwrap_or(0);\n+    s.lines()\n+        .enumerate()\n+        .map(|(i, l)| {\n+            if (ignore_first && i == 0) || l.is_empty() {\n+                l.to_owned()\n+            } else if x > indent {\n+                l.split_at(x - indent).1.to_owned()\n+            } else {\n+                \" \".repeat(indent - x) + l\n+            }\n+        })\n+        .collect::<Vec<String>>()\n+        .join(\"\\n\")\n+}\n+\n+/// Converts a span to a code snippet if available, otherwise use default.\n+///\n+/// This is useful if you want to provide suggestions for your lint or more generally, if you want\n+/// to convert a given `Span` to a `str`.\n+///\n+/// # Example\n+/// ```rust,ignore\n+/// snippet(cx, expr.span, \"..\")\n+/// ```\n+pub fn snippet<'a, T: LintContext>(cx: &T, span: Span, default: &'a str) -> Cow<'a, str> {\n+    snippet_opt(cx, span).map_or_else(|| Cow::Borrowed(default), From::from)\n+}\n+\n+/// Same as `snippet`, but it adapts the applicability level by following rules:\n+///\n+/// - Applicability level `Unspecified` will never be changed.\n+/// - If the span is inside a macro, change the applicability level to `MaybeIncorrect`.\n+/// - If the default value is used and the applicability level is `MachineApplicable`, change it to\n+/// `HasPlaceholders`\n+pub fn snippet_with_applicability<'a, T: LintContext>(\n+    cx: &T,\n+    span: Span,\n+    default: &'a str,\n+    applicability: &mut Applicability,\n+) -> Cow<'a, str> {\n+    if *applicability != Applicability::Unspecified && span.from_expansion() {\n+        *applicability = Applicability::MaybeIncorrect;\n+    }\n+    snippet_opt(cx, span).map_or_else(\n+        || {\n+            if *applicability == Applicability::MachineApplicable {\n+                *applicability = Applicability::HasPlaceholders;\n+            }\n+            Cow::Borrowed(default)\n+        },\n+        From::from,\n+    )\n+}\n+\n+/// Same as `snippet`, but should only be used when it's clear that the input span is\n+/// not a macro argument.\n+pub fn snippet_with_macro_callsite<'a, T: LintContext>(cx: &T, span: Span, default: &'a str) -> Cow<'a, str> {\n+    snippet(cx, span.source_callsite(), default)\n+}\n+\n+/// Converts a span to a code snippet. Returns `None` if not available.\n+pub fn snippet_opt<T: LintContext>(cx: &T, span: Span) -> Option<String> {\n+    cx.sess().source_map().span_to_snippet(span).ok()\n+}\n+\n+/// Converts a span (from a block) to a code snippet if available, otherwise use default.\n+///\n+/// This trims the code of indentation, except for the first line. Use it for blocks or block-like\n+/// things which need to be printed as such.\n+///\n+/// The `indent_relative_to` arg can be used, to provide a span, where the indentation of the\n+/// resulting snippet of the given span.\n+///\n+/// # Example\n+///\n+/// ```rust,ignore\n+/// snippet_block(cx, block.span, \"..\", None)\n+/// // where, `block` is the block of the if expr\n+///     if x {\n+///         y;\n+///     }\n+/// // will return the snippet\n+/// {\n+///     y;\n+/// }\n+/// ```\n+///\n+/// ```rust,ignore\n+/// snippet_block(cx, block.span, \"..\", Some(if_expr.span))\n+/// // where, `block` is the block of the if expr\n+///     if x {\n+///         y;\n+///     }\n+/// // will return the snippet\n+/// {\n+///         y;\n+///     } // aligned with `if`\n+/// ```\n+/// Note that the first line of the snippet always has 0 indentation.\n+pub fn snippet_block<'a, T: LintContext>(\n+    cx: &T,\n+    span: Span,\n+    default: &'a str,\n+    indent_relative_to: Option<Span>,\n+) -> Cow<'a, str> {\n+    let snip = snippet(cx, span, default);\n+    let indent = indent_relative_to.and_then(|s| indent_of(cx, s));\n+    reindent_multiline(snip, true, indent)\n+}\n+\n+/// Same as `snippet_block`, but adapts the applicability level by the rules of\n+/// `snippet_with_applicability`.\n+pub fn snippet_block_with_applicability<'a, T: LintContext>(\n+    cx: &T,\n+    span: Span,\n+    default: &'a str,\n+    indent_relative_to: Option<Span>,\n+    applicability: &mut Applicability,\n+) -> Cow<'a, str> {\n+    let snip = snippet_with_applicability(cx, span, default, applicability);\n+    let indent = indent_relative_to.and_then(|s| indent_of(cx, s));\n+    reindent_multiline(snip, true, indent)\n+}\n+\n+/// Same as `snippet_with_applicability`, but first walks the span up to the given context. This\n+/// will result in the macro call, rather then the expansion, if the span is from a child context.\n+/// If the span is not from a child context, it will be used directly instead.\n+///\n+/// e.g. Given the expression `&vec![]`, getting a snippet from the span for `vec![]` as a HIR node\n+/// would result in `box []`. If given the context of the address of expression, this function will\n+/// correctly get a snippet of `vec![]`.\n+///\n+/// This will also return whether or not the snippet is a macro call.\n+pub fn snippet_with_context(\n+    cx: &LateContext<'_>,\n+    span: Span,\n+    outer: SyntaxContext,\n+    default: &'a str,\n+    applicability: &mut Applicability,\n+) -> (Cow<'a, str>, bool) {\n+    let outer_span = hygiene::walk_chain(span, outer);\n+    let (span, is_macro_call) = if outer_span.ctxt() == outer {\n+        (outer_span, span.ctxt() != outer)\n+    } else {\n+        // The span is from a macro argument, and the outer context is the macro using the argument\n+        if *applicability != Applicability::Unspecified {\n+            *applicability = Applicability::MaybeIncorrect;\n+        }\n+        // TODO: get the argument span.\n+        (span, false)\n+    };\n+\n+    (\n+        snippet_with_applicability(cx, span, default, applicability),\n+        is_macro_call,\n+    )\n+}\n+\n+/// Removes block comments from the given `Vec` of lines.\n+///\n+/// # Examples\n+///\n+/// ```rust,ignore\n+/// without_block_comments(vec![\"/*\", \"foo\", \"*/\"]);\n+/// // => vec![]\n+///\n+/// without_block_comments(vec![\"bar\", \"/*\", \"foo\", \"*/\"]);\n+/// // => vec![\"bar\"]\n+/// ```\n+pub fn without_block_comments(lines: Vec<&str>) -> Vec<&str> {\n+    let mut without = vec![];\n+\n+    let mut nest_level = 0;\n+\n+    for line in lines {\n+        if line.contains(\"/*\") {\n+            nest_level += 1;\n+            continue;\n+        } else if line.contains(\"*/\") {\n+            nest_level -= 1;\n+            continue;\n+        }\n+\n+        if nest_level == 0 {\n+            without.push(line);\n+        }\n+    }\n+\n+    without\n+}\n+\n+#[cfg(test)]\n+mod test {\n+    use super::{reindent_multiline, without_block_comments};\n+\n+    #[test]\n+    fn test_reindent_multiline_single_line() {\n+        assert_eq!(\"\", reindent_multiline(\"\".into(), false, None));\n+        assert_eq!(\"...\", reindent_multiline(\"...\".into(), false, None));\n+        assert_eq!(\"...\", reindent_multiline(\"    ...\".into(), false, None));\n+        assert_eq!(\"...\", reindent_multiline(\"\\t...\".into(), false, None));\n+        assert_eq!(\"...\", reindent_multiline(\"\\t\\t...\".into(), false, None));\n+    }\n+\n+    #[test]\n+    #[rustfmt::skip]\n+    fn test_reindent_multiline_block() {\n+        assert_eq!(\"\\\n+    if x {\n+        y\n+    } else {\n+        z\n+    }\", reindent_multiline(\"    if x {\n+            y\n+        } else {\n+            z\n+        }\".into(), false, None));\n+        assert_eq!(\"\\\n+    if x {\n+    \\ty\n+    } else {\n+    \\tz\n+    }\", reindent_multiline(\"    if x {\n+        \\ty\n+        } else {\n+        \\tz\n+        }\".into(), false, None));\n+    }\n+\n+    #[test]\n+    #[rustfmt::skip]\n+    fn test_reindent_multiline_empty_line() {\n+        assert_eq!(\"\\\n+    if x {\n+        y\n+\n+    } else {\n+        z\n+    }\", reindent_multiline(\"    if x {\n+            y\n+\n+        } else {\n+            z\n+        }\".into(), false, None));\n+    }\n+\n+    #[test]\n+    #[rustfmt::skip]\n+    fn test_reindent_multiline_lines_deeper() {\n+        assert_eq!(\"\\\n+        if x {\n+            y\n+        } else {\n+            z\n+        }\", reindent_multiline(\"\\\n+    if x {\n+        y\n+    } else {\n+        z\n+    }\".into(), true, Some(8)));\n+    }\n+\n+    #[test]\n+    fn test_without_block_comments_lines_without_block_comments() {\n+        let result = without_block_comments(vec![\"/*\", \"\", \"*/\"]);\n+        println!(\"result: {:?}\", result);\n+        assert!(result.is_empty());\n+\n+        let result = without_block_comments(vec![\"\", \"/*\", \"\", \"*/\", \"#[crate_type = \\\"lib\\\"]\", \"/*\", \"\", \"*/\", \"\"]);\n+        assert_eq!(result, vec![\"\", \"#[crate_type = \\\"lib\\\"]\", \"\"]);\n+\n+        let result = without_block_comments(vec![\"/* rust\", \"\", \"*/\"]);\n+        assert!(result.is_empty());\n+\n+        let result = without_block_comments(vec![\"/* one-line comment */\"]);\n+        assert!(result.is_empty());\n+\n+        let result = without_block_comments(vec![\"/* nested\", \"/* multi-line\", \"comment\", \"*/\", \"test\", \"*/\"]);\n+        assert!(result.is_empty());\n+\n+        let result = without_block_comments(vec![\"/* nested /* inline /* comment */ test */ */\"]);\n+        assert!(result.is_empty());\n+\n+        let result = without_block_comments(vec![\"foo\", \"bar\", \"baz\"]);\n+        assert_eq!(result, vec![\"foo\", \"bar\", \"baz\"]);\n+    }\n+}"}, {"sha": "b2fe4317154efb708b6719f9881b2dce0295aaa8", "filename": "clippy_utils/src/sugg.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a23112e3ba0fa99dc2d0a90241197580254af2/clippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsugg.rs?ref=d7a23112e3ba0fa99dc2d0a90241197580254af2", "patch": "@@ -1,7 +1,8 @@\n //! Contains utility functions to generate suggestions.\n #![deny(clippy::missing_docs_in_private_items)]\n \n-use crate::{higher, snippet, snippet_opt, snippet_with_macro_callsite};\n+use crate::higher;\n+use crate::source::{snippet, snippet_opt, snippet_with_macro_callsite};\n use rustc_ast::util::parser::AssocOp;\n use rustc_ast::{ast, token};\n use rustc_ast_pretty::pprust::token_kind_to_string;"}]}