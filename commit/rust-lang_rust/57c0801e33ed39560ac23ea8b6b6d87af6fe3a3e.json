{"sha": "57c0801e33ed39560ac23ea8b6b6d87af6fe3a3e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3YzA4MDFlMzNlZDM5NTYwYWMyM2VhOGI2YjZkODdhZjZmZTNhM2U=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2017-11-16T07:27:02Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2017-11-19T05:51:14Z"}, "message": "Add a MIR pass to lower 128-bit operators to lang item calls\n\nRuns only with `-Z lower_128bit_ops` since it's not hooked into targets yet.", "tree": {"sha": "96fdfface3fe6732d3539f4b9ce7c07bed1d53d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96fdfface3fe6732d3539f4b9ce7c07bed1d53d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57c0801e33ed39560ac23ea8b6b6d87af6fe3a3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57c0801e33ed39560ac23ea8b6b6d87af6fe3a3e", "html_url": "https://github.com/rust-lang/rust/commit/57c0801e33ed39560ac23ea8b6b6d87af6fe3a3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57c0801e33ed39560ac23ea8b6b6d87af6fe3a3e/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6160040d8547222e761ad876cbe3a48c9c90a5bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/6160040d8547222e761ad876cbe3a48c9c90a5bf", "html_url": "https://github.com/rust-lang/rust/commit/6160040d8547222e761ad876cbe3a48c9c90a5bf"}], "stats": {"total": 399, "additions": 399, "deletions": 0}, "files": [{"sha": "1c52a8dbc97d01a39e53b416b105fb72f0d338a1", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/57c0801e33ed39560ac23ea8b6b6d87af6fe3a3e/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c0801e33ed39560ac23ea8b6b6d87af6fe3a3e/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=57c0801e33ed39560ac23ea8b6b6d87af6fe3a3e", "patch": "@@ -310,6 +310,29 @@ language_item_table! {\n     NonZeroItem,                     \"non_zero\",                non_zero;\n \n     DebugTraitLangItem,              \"debug_trait\",             debug_trait;\n+\n+    // A lang item for each of the 128-bit operators we can optionally lower.\n+    I128AddFnLangItem,               \"i128_add\",                i128_add_fn;\n+    I128SubFnLangItem,               \"i128_sub\",                i128_sub_fn;\n+    I128MulFnLangItem,               \"i128_mul\",                i128_mul_fn;\n+    I128DivFnLangItem,               \"i128_div\",                i128_div_fn;\n+    U128DivFnLangItem,               \"u128_div\",                u128_div_fn;\n+    I128RemFnLangItem,               \"i128_rem\",                i128_rem_fn;\n+    U128RemFnLangItem,               \"u128_rem\",                u128_rem_fn;\n+    I128ShlFnLangItem,               \"i128_shl\",                i128_shl_fn;\n+    I128ShrFnLangItem,               \"i128_shr\",                i128_shr_fn;\n+    U128ShrFnLangItem,               \"u128_shr\",                u128_shr_fn;\n+    // And overflow versions for the operators that are checkable.\n+    // While MIR calls these Checked*, they return (T,bool), not Option<T>.\n+    I128AddoFnLangItem,              \"i128_addo\",               i128_addo_fn;\n+    U128AddoFnLangItem,              \"u128_addo\",               u128_addo_fn;\n+    I128SuboFnLangItem,              \"i128_subo\",               i128_subo_fn;\n+    U128SuboFnLangItem,              \"u128_subo\",               u128_subo_fn;\n+    I128MuloFnLangItem,              \"i128_mulo\",               i128_mulo_fn;\n+    U128MuloFnLangItem,              \"u128_mulo\",               u128_mulo_fn;\n+    I128ShloFnLangItem,              \"i128_shlo\",               i128_shlo_fn;\n+    I128ShroFnLangItem,              \"i128_shro\",               i128_shro_fn;\n+    U128ShroFnLangItem,              \"u128_shro\",               u128_shro_fn;\n }\n \n impl<'a, 'tcx, 'gcx> TyCtxt<'a, 'tcx, 'gcx> {"}, {"sha": "485b7a47fa1f4c580e929e0addca083582996f5d", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/57c0801e33ed39560ac23ea8b6b6d87af6fe3a3e/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c0801e33ed39560ac23ea8b6b6d87af6fe3a3e/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=57c0801e33ed39560ac23ea8b6b6d87af6fe3a3e", "patch": "@@ -170,6 +170,15 @@ impl<'tcx> Mir<'tcx> {\n         &mut self.basic_blocks\n     }\n \n+    #[inline]\n+    pub fn basic_blocks_and_local_decls_mut(&mut self) -> (\n+        &mut IndexVec<BasicBlock, BasicBlockData<'tcx>>,\n+        &mut LocalDecls<'tcx>,\n+    ) {\n+        self.cache.invalidate();\n+        (&mut self.basic_blocks, &mut self.local_decls)\n+    }\n+\n     #[inline]\n     pub fn predecessors(&self) -> Ref<IndexVec<BasicBlock, Vec<BasicBlock>>> {\n         self.cache.predecessors(self)"}, {"sha": "d992dbdfcb776d5a781b9a001ee2901590a3b2b0", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/57c0801e33ed39560ac23ea8b6b6d87af6fe3a3e/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c0801e33ed39560ac23ea8b6b6d87af6fe3a3e/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=57c0801e33ed39560ac23ea8b6b6d87af6fe3a3e", "patch": "@@ -1142,6 +1142,9 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n     saturating_float_casts: bool = (false, parse_bool, [TRACKED],\n         \"make float->int casts UB-free: numbers outside the integer type's range are clipped to \\\n          the max/min integer respectively, and NaN is mapped to 0\"),\n+    lower_128bit_ops: bool = (false, parse_bool, [TRACKED],\n+        \"rewrite operators on i128 and u128 into lang item calls (typically provided \\\n+         by compiler-builtins) so translation doesn't need to support them\"),\n }\n \n pub fn default_lib_output() -> CrateType {"}, {"sha": "3a5b8e0790d621c5069d7ece0672cadd22b69c5c", "filename": "src/librustc_mir/transform/lower_128bit.rs", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/57c0801e33ed39560ac23ea8b6b6d87af6fe3a3e/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c0801e33ed39560ac23ea8b6b6d87af6fe3a3e/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs?ref=57c0801e33ed39560ac23ea8b6b6d87af6fe3a3e", "patch": "@@ -0,0 +1,160 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Replaces 128-bit operators with lang item calls\n+\n+use rustc::hir::def_id::DefId;\n+use rustc::middle::lang_items::LangItem;\n+use rustc::mir::*;\n+use rustc::ty::{Slice, Ty, TyCtxt, TypeVariants};\n+use rustc_data_structures::indexed_vec::{Idx};\n+use transform::{MirPass, MirSource};\n+use syntax;\n+\n+pub struct Lower128Bit;\n+\n+impl MirPass for Lower128Bit {\n+    fn run_pass<'a, 'tcx>(&self,\n+                          tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                          _src: MirSource,\n+                          mir: &mut Mir<'tcx>) {\n+        if !tcx.sess.opts.debugging_opts.lower_128bit_ops {\n+            return\n+        }\n+\n+        self.lower_128bit_ops(tcx, mir);\n+    }\n+}\n+\n+impl Lower128Bit {\n+    fn lower_128bit_ops<'a, 'tcx>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, mir: &mut Mir<'tcx>) {\n+        let mut new_blocks = Vec::new();\n+        let cur_len = mir.basic_blocks().len();\n+\n+        let (basic_blocks, local_decls) = mir.basic_blocks_and_local_decls_mut();\n+        for block in basic_blocks.iter_mut() {\n+            for i in (0..block.statements.len()).rev() {\n+                let call_did =\n+                    if let Some(call_did) = lower_to(&block.statements[i], local_decls, tcx) {\n+                        call_did\n+                    } else {\n+                        continue;\n+                    };\n+\n+                let after_call = BasicBlockData {\n+                    statements: block.statements.drain((i+1)..).collect(),\n+                    is_cleanup: block.is_cleanup,\n+                    terminator: block.terminator.take(),\n+                };\n+\n+                let bin_statement = block.statements.pop().unwrap();\n+                let (source_info, lvalue, lhs, rhs) = match bin_statement {\n+                    Statement {\n+                        source_info,\n+                        kind: StatementKind::Assign(\n+                            lvalue,\n+                            Rvalue::BinaryOp(_, lhs, rhs))\n+                    } => (source_info, lvalue, lhs, rhs),\n+                    Statement {\n+                        source_info,\n+                        kind: StatementKind::Assign(\n+                            lvalue,\n+                            Rvalue::CheckedBinaryOp(_, lhs, rhs))\n+                    } => (source_info, lvalue, lhs, rhs),\n+                    _ => bug!(\"Statement doesn't match pattern any more?\"),\n+                };\n+\n+                let bb = BasicBlock::new(cur_len + new_blocks.len());\n+                new_blocks.push(after_call);\n+\n+                block.terminator =\n+                    Some(Terminator {\n+                        source_info,\n+                        kind: TerminatorKind::Call {\n+                            func: Operand::function_handle(tcx, call_did,\n+                                Slice::empty(), source_info.span),\n+                            args: vec![lhs, rhs],\n+                            destination: Some((lvalue, bb)),\n+                            cleanup: None,\n+                        },\n+                    });\n+            }\n+        }\n+\n+        basic_blocks.extend(new_blocks);\n+    }\n+}\n+\n+fn lower_to<'a, 'tcx, D>(statement: &Statement<'tcx>, local_decls: &D, tcx: TyCtxt<'a, 'tcx, 'tcx>)\n+    -> Option<DefId>\n+    where D: HasLocalDecls<'tcx>\n+{\n+    match statement.kind {\n+        StatementKind::Assign(_, Rvalue::BinaryOp(bin_op, ref lhs, _)) => {\n+            let ty = lhs.ty(local_decls, tcx);\n+            if let Some(is_signed) = sign_of_128bit(&ty) {\n+                if let Some(item) = item_for_op(bin_op, is_signed) {\n+                    return Some(tcx.require_lang_item(item))\n+                }\n+            }\n+        },\n+        StatementKind::Assign(_, Rvalue::CheckedBinaryOp(bin_op, ref lhs, _)) => {\n+            let ty = lhs.ty(local_decls, tcx);\n+            if let Some(is_signed) = sign_of_128bit(&ty) {\n+                if let Some(item) = item_for_checked_op(bin_op, is_signed) {\n+                    return Some(tcx.require_lang_item(item))\n+                }\n+            }\n+        },\n+        _ => {},\n+    }\n+    None\n+}\n+\n+fn sign_of_128bit(ty: &Ty) -> Option<bool> {\n+    match ty.sty {\n+        TypeVariants::TyInt(syntax::ast::IntTy::I128) => Some(true),\n+        TypeVariants::TyUint(syntax::ast::UintTy::U128) => Some(false),\n+        _ => None,\n+    }\n+}\n+\n+fn item_for_op(bin_op: BinOp, is_signed: bool) -> Option<LangItem> {\n+    let i = match (bin_op, is_signed) {\n+        (BinOp::Add, _) => LangItem::I128AddFnLangItem,\n+        (BinOp::Sub, _) => LangItem::I128SubFnLangItem,\n+        (BinOp::Mul, _) => LangItem::I128MulFnLangItem,\n+        (BinOp::Div, true) => LangItem::I128DivFnLangItem,\n+        (BinOp::Div, false) => LangItem::U128DivFnLangItem,\n+        (BinOp::Rem, true) => LangItem::I128RemFnLangItem,\n+        (BinOp::Rem, false) => LangItem::U128RemFnLangItem,\n+        (BinOp::Shl, _) => LangItem::I128ShlFnLangItem,\n+        (BinOp::Shr, true) => LangItem::I128ShrFnLangItem,\n+        (BinOp::Shr, false) => LangItem::U128ShrFnLangItem,\n+        _ => return None,\n+    };\n+    Some(i)\n+}\n+\n+fn item_for_checked_op(bin_op: BinOp, is_signed: bool) -> Option<LangItem> {\n+    let i = match (bin_op, is_signed) {\n+        (BinOp::Add, true) => LangItem::I128AddoFnLangItem,\n+        (BinOp::Add, false) => LangItem::U128AddoFnLangItem,\n+        (BinOp::Sub, true) => LangItem::I128SuboFnLangItem,\n+        (BinOp::Sub, false) => LangItem::U128SuboFnLangItem,\n+        (BinOp::Mul, true) => LangItem::I128MuloFnLangItem,\n+        (BinOp::Mul, false) => LangItem::U128MuloFnLangItem,\n+        (BinOp::Shl, _) => LangItem::I128ShloFnLangItem,\n+        (BinOp::Shr, true) => LangItem::I128ShroFnLangItem,\n+        (BinOp::Shr, false) => LangItem::U128ShroFnLangItem,\n+        _ => return None,\n+    };\n+    Some(i)\n+}\n\\ No newline at end of file"}, {"sha": "6987cfa79be097f0ac21fb0f019b04e6fe6aebd4", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/57c0801e33ed39560ac23ea8b6b6d87af6fe3a3e/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c0801e33ed39560ac23ea8b6b6d87af6fe3a3e/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=57c0801e33ed39560ac23ea8b6b6d87af6fe3a3e", "patch": "@@ -42,6 +42,7 @@ pub mod copy_prop;\n pub mod generator;\n pub mod inline;\n pub mod nll;\n+pub mod lower_128bit;\n \n pub(crate) fn provide(providers: &mut Providers) {\n     self::qualify_consts::provide(providers);\n@@ -241,6 +242,8 @@ fn optimized_mir<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx\n         // From here on out, regions are gone.\n         erase_regions::EraseRegions,\n \n+        lower_128bit::Lower128Bit,\n+\n         // Optimizations begin.\n         inline::Inline,\n         instcombine::InstCombine,"}, {"sha": "3280c8db7f2231370a0686ad71c60054da107a09", "filename": "src/test/mir-opt/lower_128bit_debug_test.rs", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/57c0801e33ed39560ac23ea8b6b6d87af6fe3a3e/src%2Ftest%2Fmir-opt%2Flower_128bit_debug_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c0801e33ed39560ac23ea8b6b6d87af6fe3a3e/src%2Ftest%2Fmir-opt%2Flower_128bit_debug_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_128bit_debug_test.rs?ref=57c0801e33ed39560ac23ea8b6b6d87af6fe3a3e", "patch": "@@ -0,0 +1,104 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z lower_128bit_ops -C debug_assertions=yes\n+\n+#![feature(i128_type)]\n+#![feature(lang_items)]\n+\n+#[lang=\"i128_div\"]\n+fn i128_div(_x: i128, _y: i128) -> i128 { 3 }\n+#[lang=\"u128_div\"]\n+fn u128_div(_x: i128, _y: i128) -> i128 { 4 }\n+#[lang=\"i128_rem\"]\n+fn i128_rem(_x: i128, _y: i128) -> i128 { 5 }\n+#[lang=\"u128_rem\"]\n+fn u128_rem(_x: i128, _y: i128) -> i128 { 6 }\n+\n+#[lang=\"i128_addo\"]\n+fn i128_addo(_x: i128, _y: i128) -> (i128, bool) { (0, false) }\n+#[lang=\"u128_addo\"]\n+fn u128_addo(_x: i128, _y: i128) -> (i128, bool) { (1, false) }\n+#[lang=\"i128_subo\"]\n+fn i128_subo(_x: i128, _y: i128) -> (i128, bool) { (2, false) }\n+#[lang=\"u128_subo\"]\n+fn u128_subo(_x: i128, _y: i128) -> (i128, bool) { (3, false) }\n+#[lang=\"i128_mulo\"]\n+fn i128_mulo(_x: i128, _y: i128) -> (i128, bool) { (4, false) }\n+#[lang=\"u128_mulo\"]\n+fn u128_mulo(_x: i128, _y: i128) -> (i128, bool) { (5, false) }\n+#[lang=\"i128_shlo\"]\n+fn i128_shlo(_x: i128, _y: u32) -> (i128, bool) { (6, false) }\n+#[lang=\"i128_shro\"]\n+fn i128_shro(_x: i128, _y: u32) -> (i128, bool) { (7, false) }\n+#[lang=\"u128_shro\"]\n+fn u128_shro(_x: i128, _y: u32) -> (i128, bool) { (8, false) }\n+\n+\n+fn test_signed(mut x: i128) -> i128 {\n+    x += 1;\n+    x -= 2;\n+    x *= 3;\n+    x /= 4;\n+    x %= 5;\n+    x <<= 6;\n+    x >>= 7;\n+    x\n+}\n+\n+fn test_unsigned(mut x: u128) -> u128 {\n+    x += 1;\n+    x -= 2;\n+    x *= 3;\n+    x /= 4;\n+    x %= 5;\n+    x <<= 6;\n+    x >>= 7;\n+    x\n+}\n+\n+fn main() {\n+    test_signed(-200);\n+    test_unsigned(200);\n+}\n+\n+// END RUST SOURCE\n+\n+// START rustc.test_signed.Lower128Bit.after.mir\n+//     _2 = const i128_addo(_1, const 1i128) -> bb10;\n+//     ...\n+//     _3 = const i128_subo(_1, const 2i128) -> bb11;\n+//     ...\n+//     _4 = const i128_mulo(_1, const 3i128) -> bb12;\n+//     ...\n+//     _1 = const i128_div(_1, const 4i128) -> bb13;\n+//     ...\n+//     _1 = const i128_rem(_1, const 5i128) -> bb15;\n+//     ...\n+//     _14 = const i128_shro(_1, const 7i32) -> bb16;\n+//     ...\n+//     _13 = const i128_shlo(_1, const 6i32) -> bb14;\n+// END rustc.test_signed.Lower128Bit.after.mir\n+\n+// START rustc.test_unsigned.Lower128Bit.after.mir\n+//     _2 = const u128_addo(_1, const 1u128) -> bb8;\n+//     ...\n+//     _3 = const u128_subo(_1, const 2u128) -> bb9;\n+//     ...\n+//     _4 = const u128_mulo(_1, const 3u128) -> bb10;\n+//     ...\n+//     _1 = const u128_div(_1, const 4u128) -> bb11;\n+//     ...\n+//     _1 = const u128_rem(_1, const 5u128) -> bb13;\n+//     ...\n+//     _8 = const u128_shro(_1, const 7i32) -> bb14;\n+//     ...\n+//     _7 = const i128_shlo(_1, const 6i32) -> bb12;\n+// END rustc.test_unsigned.Lower128Bit.after.mir"}, {"sha": "15a5535dba4839148e065837c17eda3c0261127a", "filename": "src/test/mir-opt/lower_128bit_test.rs", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/57c0801e33ed39560ac23ea8b6b6d87af6fe3a3e/src%2Ftest%2Fmir-opt%2Flower_128bit_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c0801e33ed39560ac23ea8b6b6d87af6fe3a3e/src%2Ftest%2Fmir-opt%2Flower_128bit_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_128bit_test.rs?ref=57c0801e33ed39560ac23ea8b6b6d87af6fe3a3e", "patch": "@@ -0,0 +1,97 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z lower_128bit_ops -C debug_assertions=no\n+\n+#![feature(i128_type)]\n+#![feature(lang_items)]\n+\n+#[lang=\"i128_add\"]\n+fn i128_add(_x: i128, _y: i128) -> i128 { 0 }\n+#[lang=\"i128_sub\"]\n+fn i128_sub(_x: i128, _y: i128) -> i128 { 1 }\n+#[lang=\"i128_mul\"]\n+fn i128_mul(_x: i128, _y: i128) -> i128 { 2 }\n+#[lang=\"i128_div\"]\n+fn i128_div(_x: i128, _y: i128) -> i128 { 3 }\n+#[lang=\"u128_div\"]\n+fn u128_div(_x: i128, _y: i128) -> i128 { 4 }\n+#[lang=\"i128_rem\"]\n+fn i128_rem(_x: i128, _y: i128) -> i128 { 5 }\n+#[lang=\"u128_rem\"]\n+fn u128_rem(_x: i128, _y: i128) -> i128 { 6 }\n+#[lang=\"i128_shl\"]\n+fn i128_shl(_x: i128, _y: u32) -> i128 { 7 }\n+#[lang=\"i128_shr\"]\n+fn i128_shr(_x: i128, _y: u32) -> i128 { 8 }\n+#[lang=\"u128_shr\"]\n+fn u128_shr(_x: i128, _y: u32) -> i128 { 9 }\n+\n+\n+fn test_signed(mut x: i128) -> i128 {\n+    x += 1;\n+    x -= 2;\n+    x *= 3;\n+    x /= 4;\n+    x %= 5;\n+    x <<= 6;\n+    x >>= 7;\n+    x\n+}\n+\n+fn test_unsigned(mut x: u128) -> u128 {\n+    x += 1;\n+    x -= 2;\n+    x *= 3;\n+    x /= 4;\n+    x %= 5;\n+    x <<= 6;\n+    x >>= 7;\n+    x\n+}\n+\n+fn main() {\n+    test_signed(-200);\n+    test_unsigned(200);\n+}\n+\n+// END RUST SOURCE\n+\n+// START rustc.test_signed.Lower128Bit.after.mir\n+//     _1 = const i128_add(_1, const 1i128) -> bb7;\n+//     ...\n+//     _1 = const i128_div(_1, const 4i128) -> bb8;\n+//     ...\n+//     _1 = const i128_rem(_1, const 5i128) -> bb11;\n+//     ...\n+//     _1 = const i128_mul(_1, const 3i128) -> bb5;\n+//     ...\n+//     _1 = const i128_sub(_1, const 2i128) -> bb6;\n+//     ...\n+//     _1 = const i128_shr(_1, const 7i32) -> bb9;\n+//     ...\n+//     _1 = const i128_shl(_1, const 6i32) -> bb10;\n+// END rustc.test_signed.Lower128Bit.after.mir\n+\n+// START rustc.test_unsigned.Lower128Bit.after.mir\n+//     _1 = const i128_add(_1, const 1u128) -> bb5;\n+//     ...\n+//     _1 = const u128_div(_1, const 4u128) -> bb6;\n+//     ...\n+//     _1 = const u128_rem(_1, const 5u128) -> bb9;\n+//     ...\n+//     _1 = const i128_mul(_1, const 3u128) -> bb3;\n+//     ...\n+//     _1 = const i128_sub(_1, const 2u128) -> bb4;\n+//     ...\n+//     _1 = const u128_shr(_1, const 7i32) -> bb7;\n+//     ...\n+//     _1 = const i128_shl(_1, const 6i32) -> bb8;\n+// END rustc.test_unsigned.Lower128Bit.after.mir"}]}