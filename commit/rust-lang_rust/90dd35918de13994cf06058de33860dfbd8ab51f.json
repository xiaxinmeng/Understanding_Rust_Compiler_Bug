{"sha": "90dd35918de13994cf06058de33860dfbd8ab51f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwZGQzNTkxOGRlMTM5OTRjZjA2MDU4ZGUzMzg2MGRmYmQ4YWI1MWY=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2019-05-18T02:56:35Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2019-05-18T02:56:35Z"}, "message": "Use iter() for iterating arrays by slice\n\nThese `into_iter()` calls will change from iterating references to\nvalues if we ever get `IntoIterator` for arrays, which may break the\ncode using that iterator. Calling `iter()` is future proof.", "tree": {"sha": "ce3e1b288bf4fef55a584b11f854ab12c0b0c4b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce3e1b288bf4fef55a584b11f854ab12c0b0c4b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90dd35918de13994cf06058de33860dfbd8ab51f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90dd35918de13994cf06058de33860dfbd8ab51f", "html_url": "https://github.com/rust-lang/rust/commit/90dd35918de13994cf06058de33860dfbd8ab51f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90dd35918de13994cf06058de33860dfbd8ab51f/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "823a75d9ba34860b9a6712c7a9d35e86e0a88436", "url": "https://api.github.com/repos/rust-lang/rust/commits/823a75d9ba34860b9a6712c7a9d35e86e0a88436", "html_url": "https://github.com/rust-lang/rust/commit/823a75d9ba34860b9a6712c7a9d35e86e0a88436"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "989beb3b1bfd90afbfd55626953080d31016bb39", "filename": "src/liballoc/tests/btree/set.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90dd35918de13994cf06058de33860dfbd8ab51f/src%2Fliballoc%2Ftests%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90dd35918de13994cf06058de33860dfbd8ab51f/src%2Fliballoc%2Ftests%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fbtree%2Fset.rs?ref=90dd35918de13994cf06058de33860dfbd8ab51f", "patch": "@@ -143,8 +143,8 @@ fn test_union() {\n #[test]\n // Only tests the simple function definition with respect to intersection\n fn test_is_disjoint() {\n-    let one = [1].into_iter().collect::<BTreeSet<_>>();\n-    let two = [2].into_iter().collect::<BTreeSet<_>>();\n+    let one = [1].iter().collect::<BTreeSet<_>>();\n+    let two = [2].iter().collect::<BTreeSet<_>>();\n     assert!(one.is_disjoint(&two));\n }\n "}, {"sha": "38c7c9bc4d086c53e9e27eed48168dff5670b4ef", "filename": "src/libcore/iter/traits/iterator.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/90dd35918de13994cf06058de33860dfbd8ab51f/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90dd35918de13994cf06058de33860dfbd8ab51f/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs?ref=90dd35918de13994cf06058de33860dfbd8ab51f", "patch": "@@ -356,7 +356,7 @@ pub trait Iterator {\n     ///\n     /// ```\n     /// let a = [0, 1, 2, 3, 4, 5];\n-    /// let mut iter = a.into_iter().step_by(2);\n+    /// let mut iter = a.iter().step_by(2);\n     ///\n     /// assert_eq!(iter.next(), Some(&0));\n     /// assert_eq!(iter.next(), Some(&2));\n@@ -531,7 +531,7 @@ pub trait Iterator {\n     /// ```\n     /// let a = [1, 2, 3];\n     ///\n-    /// let mut iter = a.into_iter().map(|x| 2 * x);\n+    /// let mut iter = a.iter().map(|x| 2 * x);\n     ///\n     /// assert_eq!(iter.next(), Some(2));\n     /// assert_eq!(iter.next(), Some(4));\n@@ -620,7 +620,7 @@ pub trait Iterator {\n     /// ```\n     /// let a = [0i32, 1, 2];\n     ///\n-    /// let mut iter = a.into_iter().filter(|x| x.is_positive());\n+    /// let mut iter = a.iter().filter(|x| x.is_positive());\n     ///\n     /// assert_eq!(iter.next(), Some(&1));\n     /// assert_eq!(iter.next(), Some(&2));\n@@ -634,7 +634,7 @@ pub trait Iterator {\n     /// ```\n     /// let a = [0, 1, 2];\n     ///\n-    /// let mut iter = a.into_iter().filter(|x| **x > 1); // need two *s!\n+    /// let mut iter = a.iter().filter(|x| **x > 1); // need two *s!\n     ///\n     /// assert_eq!(iter.next(), Some(&2));\n     /// assert_eq!(iter.next(), None);\n@@ -646,7 +646,7 @@ pub trait Iterator {\n     /// ```\n     /// let a = [0, 1, 2];\n     ///\n-    /// let mut iter = a.into_iter().filter(|&x| *x > 1); // both & and *\n+    /// let mut iter = a.iter().filter(|&x| *x > 1); // both & and *\n     ///\n     /// assert_eq!(iter.next(), Some(&2));\n     /// assert_eq!(iter.next(), None);\n@@ -657,7 +657,7 @@ pub trait Iterator {\n     /// ```\n     /// let a = [0, 1, 2];\n     ///\n-    /// let mut iter = a.into_iter().filter(|&&x| x > 1); // two &s\n+    /// let mut iter = a.iter().filter(|&&x| x > 1); // two &s\n     ///\n     /// assert_eq!(iter.next(), Some(&2));\n     /// assert_eq!(iter.next(), None);\n@@ -837,7 +837,7 @@ pub trait Iterator {\n     /// ```\n     /// let a = [-1i32, 0, 1];\n     ///\n-    /// let mut iter = a.into_iter().skip_while(|x| x.is_negative());\n+    /// let mut iter = a.iter().skip_while(|x| x.is_negative());\n     ///\n     /// assert_eq!(iter.next(), Some(&0));\n     /// assert_eq!(iter.next(), Some(&1));\n@@ -851,7 +851,7 @@ pub trait Iterator {\n     /// ```\n     /// let a = [-1, 0, 1];\n     ///\n-    /// let mut iter = a.into_iter().skip_while(|x| **x < 0); // need two *s!\n+    /// let mut iter = a.iter().skip_while(|x| **x < 0); // need two *s!\n     ///\n     /// assert_eq!(iter.next(), Some(&0));\n     /// assert_eq!(iter.next(), Some(&1));\n@@ -863,7 +863,7 @@ pub trait Iterator {\n     /// ```\n     /// let a = [-1, 0, 1, -2];\n     ///\n-    /// let mut iter = a.into_iter().skip_while(|x| **x < 0);\n+    /// let mut iter = a.iter().skip_while(|x| **x < 0);\n     ///\n     /// assert_eq!(iter.next(), Some(&0));\n     /// assert_eq!(iter.next(), Some(&1));\n@@ -898,7 +898,7 @@ pub trait Iterator {\n     /// ```\n     /// let a = [-1i32, 0, 1];\n     ///\n-    /// let mut iter = a.into_iter().take_while(|x| x.is_negative());\n+    /// let mut iter = a.iter().take_while(|x| x.is_negative());\n     ///\n     /// assert_eq!(iter.next(), Some(&-1));\n     /// assert_eq!(iter.next(), None);\n@@ -911,7 +911,7 @@ pub trait Iterator {\n     /// ```\n     /// let a = [-1, 0, 1];\n     ///\n-    /// let mut iter = a.into_iter().take_while(|x| **x < 0); // need two *s!\n+    /// let mut iter = a.iter().take_while(|x| **x < 0); // need two *s!\n     ///\n     /// assert_eq!(iter.next(), Some(&-1));\n     /// assert_eq!(iter.next(), None);\n@@ -922,7 +922,7 @@ pub trait Iterator {\n     /// ```\n     /// let a = [-1, 0, 1, -2];\n     ///\n-    /// let mut iter = a.into_iter().take_while(|x| **x < 0);\n+    /// let mut iter = a.iter().take_while(|x| **x < 0);\n     ///\n     /// assert_eq!(iter.next(), Some(&-1));\n     ///\n@@ -937,7 +937,7 @@ pub trait Iterator {\n     ///\n     /// ```\n     /// let a = [1, 2, 3, 4];\n-    /// let mut iter = a.into_iter();\n+    /// let mut iter = a.iter();\n     ///\n     /// let result: Vec<i32> = iter.by_ref()\n     ///                            .take_while(|n| **n != 3)\n@@ -1321,7 +1321,7 @@ pub trait Iterator {\n     /// ```\n     /// let a = [1, 2, 3];\n     ///\n-    /// let iter = a.into_iter();\n+    /// let iter = a.iter();\n     ///\n     /// let sum: i32 = iter.take(5).fold(0, |acc, i| acc + i );\n     ///\n@@ -1334,7 +1334,7 @@ pub trait Iterator {\n     /// // let's try that again\n     /// let a = [1, 2, 3];\n     ///\n-    /// let mut iter = a.into_iter();\n+    /// let mut iter = a.iter();\n     ///\n     /// // instead, we add in a .by_ref()\n     /// let sum: i32 = iter.by_ref().take(2).fold(0, |acc, i| acc + i );\n@@ -1479,7 +1479,7 @@ pub trait Iterator {\n     /// let a = [1, 2, 3];\n     ///\n     /// let (even, odd): (Vec<i32>, Vec<i32>) = a\n-    ///     .into_iter()\n+    ///     .iter()\n     ///     .partition(|&n| n % 2 == 0);\n     ///\n     /// assert_eq!(even, vec![2]);"}, {"sha": "4fae7e080b14aef046cf68e4c73af475a0bc436a", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90dd35918de13994cf06058de33860dfbd8ab51f/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90dd35918de13994cf06058de33860dfbd8ab51f/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=90dd35918de13994cf06058de33860dfbd8ab51f", "patch": "@@ -538,7 +538,7 @@ fn check_deprecated_options(matches: &getopts::Matches, diag: &errors::Handler)\n        \"passes\",\n     ];\n \n-    for flag in deprecated_flags.into_iter() {\n+    for flag in deprecated_flags.iter() {\n         if matches.opt_present(flag) {\n             let mut err = diag.struct_warn(&format!(\"the '{}' flag is considered deprecated\",\n                                                     flag));"}, {"sha": "964789224ded21fc7b0e4201c50e9120604c9064", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90dd35918de13994cf06058de33860dfbd8ab51f/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90dd35918de13994cf06058de33860dfbd8ab51f/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=90dd35918de13994cf06058de33860dfbd8ab51f", "patch": "@@ -506,7 +506,7 @@ pub fn initial_ids() -> Vec<String> {\n      \"methods\",\n      \"deref-methods\",\n      \"implementations\",\n-    ].into_iter().map(|id| (String::from(*id))).collect()\n+    ].iter().map(|id| (String::from(*id))).collect()\n }\n \n /// Generates the documentation for `crate` into the directory `dst`"}]}