{"sha": "4f429c074b865e2ae7a4dc52eb6f2e5db9244e48", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmNDI5YzA3NGI4NjVlMmFlN2E0ZGM1MmViNmYyZTVkYjkyNDRlNDg=", "commit": {"author": {"name": "Josh Stone", "email": "cuviper@gmail.com", "date": "2020-03-25T18:09:00Z"}, "committer": {"name": "Josh Stone", "email": "cuviper@gmail.com", "date": "2020-03-25T18:09:00Z"}, "message": "impl TrustedRandomAccess for Fuse without FusedIterator", "tree": {"sha": "bbc8c71f61fb2c4496347a9caf4c88a55e232153", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbc8c71f61fb2c4496347a9caf4c88a55e232153"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f429c074b865e2ae7a4dc52eb6f2e5db9244e48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f429c074b865e2ae7a4dc52eb6f2e5db9244e48", "html_url": "https://github.com/rust-lang/rust/commit/4f429c074b865e2ae7a4dc52eb6f2e5db9244e48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f429c074b865e2ae7a4dc52eb6f2e5db9244e48/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "212e6ce7bf67d6475ec4fdfebfcf9f99704b2aa2", "url": "https://api.github.com/repos/rust-lang/rust/commits/212e6ce7bf67d6475ec4fdfebfcf9f99704b2aa2", "html_url": "https://github.com/rust-lang/rust/commit/212e6ce7bf67d6475ec4fdfebfcf9f99704b2aa2"}], "stats": {"total": 8, "additions": 6, "deletions": 2}, "files": [{"sha": "a60ca64ec87c87042331e8cb78e1bfb250d6c350", "filename": "src/libcore/iter/adapters/fuse.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4f429c074b865e2ae7a4dc52eb6f2e5db9244e48/src%2Flibcore%2Fiter%2Fadapters%2Ffuse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f429c074b865e2ae7a4dc52eb6f2e5db9244e48/src%2Flibcore%2Fiter%2Fadapters%2Ffuse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Ffuse.rs?ref=4f429c074b865e2ae7a4dc52eb6f2e5db9244e48", "patch": "@@ -326,10 +326,14 @@ where\n \n unsafe impl<I> TrustedRandomAccess for Fuse<I>\n where\n-    I: TrustedRandomAccess + FusedIterator,\n+    I: TrustedRandomAccess,\n {\n     unsafe fn get_unchecked(&mut self, i: usize) -> I::Item {\n-        self.as_inner_mut().get_unchecked(i)\n+        match self.iter {\n+            Some(ref mut iter) => iter.get_unchecked(i),\n+            // SAFETY: the caller asserts there is an item at `i`, so we're not exhausted.\n+            None => intrinsics::unreachable(),\n+        }\n     }\n \n     fn may_have_side_effect() -> bool {"}]}