{"sha": "408367ba6dad7c687a96c1db47a41851f778f93c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwODM2N2JhNmRhZDdjNjg3YTk2YzFkYjQ3YTQxODUxZjc3OGY5M2M=", "commit": {"author": {"name": "Flaper Fesp", "email": "flaper87@gmail.com", "date": "2013-09-03T23:07:11Z"}, "committer": {"name": "Flaper Fesp", "email": "flaper87@gmail.com", "date": "2013-09-03T23:13:56Z"}, "message": "Add a safe implementation of MutexArc::access* methods\n\nCurrent access methods are nestable and unsafe. This patch renames\ncurrent methods implementation - prepends unsafe_ - and implements 2 new\nmethods that are both safe and un-nestable.\n\nFixes #7473", "tree": {"sha": "6080fb13c30ccd9c46769350d1b84f6cfb305310", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6080fb13c30ccd9c46769350d1b84f6cfb305310"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/408367ba6dad7c687a96c1db47a41851f778f93c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/408367ba6dad7c687a96c1db47a41851f778f93c", "html_url": "https://github.com/rust-lang/rust/commit/408367ba6dad7c687a96c1db47a41851f778f93c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/408367ba6dad7c687a96c1db47a41851f778f93c/comments", "author": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b22861d16d6eae64134824485cc393ff0ee90c6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b22861d16d6eae64134824485cc393ff0ee90c6a", "html_url": "https://github.com/rust-lang/rust/commit/b22861d16d6eae64134824485cc393ff0ee90c6a"}], "stats": {"total": 209, "additions": 188, "deletions": 21}, "files": [{"sha": "2eaf44950c0959895ae0ee01acd4624d8b13f879", "filename": "src/libextra/arc.rs", "status": "modified", "additions": 162, "deletions": 21, "changes": 183, "blob_url": "https://github.com/rust-lang/rust/blob/408367ba6dad7c687a96c1db47a41851f778f93c/src%2Flibextra%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/408367ba6dad7c687a96c1db47a41851f778f93c/src%2Flibextra%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farc.rs?ref=408367ba6dad7c687a96c1db47a41851f778f93c", "patch": "@@ -159,7 +159,9 @@ impl<T:Freeze + Send> Clone for Arc<T> {\n \n #[doc(hidden)]\n struct MutexArcInner<T> { priv lock: Mutex, priv failed: bool, priv data: T }\n+\n /// An Arc with mutable data protected by a blocking mutex.\n+#[no_freeze]\n struct MutexArc<T> { priv x: UnsafeArc<MutexArcInner<T>> }\n \n \n@@ -190,6 +192,35 @@ impl<T:Send> MutexArc<T> {\n         MutexArc { x: UnsafeArc::new(data) }\n     }\n \n+\n+    /// Refer unsafe_access and access methods for the documentaiton. \n+    #[inline]\n+    unsafe fn lock_and_access<U>(&self, blk: &fn(x: &mut T) -> U) -> U {\n+        let state = self.x.get();\n+        // Borrowck would complain about this if the function were\n+        // not already unsafe. See borrow_rwlock, far below.\n+        do (&(*state).lock).lock {\n+            check_poison(true, (*state).failed);\n+            let _z = PoisonOnFail(&mut (*state).failed);\n+            blk(&mut (*state).data)\n+        }\n+    }\n+\n+    #[inline]\n+    unsafe fn lock_and_access_cond<'x, 'c, U>(&self,\n+                                         blk: &fn(x: &'x mut T,\n+                                                  c: &'c Condvar) -> U)\n+                                         -> U {\n+        let state = self.x.get();\n+        do (&(*state).lock).lock_cond |cond| {\n+            check_poison(true, (*state).failed);\n+            let _z = PoisonOnFail(&mut (*state).failed);\n+            blk(&mut (*state).data,\n+                &Condvar {is_mutex: true,\n+                          failed: &mut (*state).failed,\n+                          cond: cond })\n+        }\n+    }\n     /**\n      * Access the underlying mutable data with mutual exclusion from other\n      * tasks. The argument closure will be run with the mutex locked; all\n@@ -215,31 +246,16 @@ impl<T:Send> MutexArc<T> {\n      */\n     #[inline]\n     pub unsafe fn unsafe_access<U>(&self, blk: &fn(x: &mut T) -> U) -> U {\n-        let state = self.x.get();\n-        // Borrowck would complain about this if the function were\n-        // not already unsafe. See borrow_rwlock, far below.\n-        do (&(*state).lock).lock {\n-            check_poison(true, (*state).failed);\n-            let _z = PoisonOnFail(&mut (*state).failed);\n-            blk(&mut (*state).data)\n-        }\n+        self.lock_and_access(blk)\n     }\n \n-    /// As access(), but with a condvar, as sync::mutex.lock_cond().\n+    /// As unsafe_access(), but with a condvar, as sync::mutex.lock_cond().\n     #[inline]\n     pub unsafe fn unsafe_access_cond<'x, 'c, U>(&self,\n                                          blk: &fn(x: &'x mut T,\n                                                   c: &'c Condvar) -> U)\n                                          -> U {\n-        let state = self.x.get();\n-        do (&(*state).lock).lock_cond |cond| {\n-            check_poison(true, (*state).failed);\n-            let _z = PoisonOnFail(&mut (*state).failed);\n-            blk(&mut (*state).data,\n-                &Condvar {is_mutex: true,\n-                          failed: &mut (*state).failed,\n-                          cond: cond })\n-        }\n+        self.lock_and_access_cond(blk)\n     }\n \n     /**\n@@ -259,6 +275,34 @@ impl<T:Send> MutexArc<T> {\n     }\n }\n \n+impl<T:Freeze + Send> MutexArc<T> {\n+\n+    /**\n+     * As unsafe_access.\n+     *\n+     * The difference between access and unsafe_access is that the former\n+     * forbids mutexes to be nested. The purpose of this is to offer a safe\n+     * implementation of both methods access and access_cond to be used instead\n+     * of rwlock in cases where no readers are needed and sightly better performance\n+     * is required.\n+     *\n+     * Both methods have the same failure behaviour as unsafe_access and\n+     * unsafe_access_cond.\n+     */\n+    #[inline]\n+    pub fn access<U>(&self, blk: &fn(x: &mut T) -> U) -> U {\n+        unsafe { self.lock_and_access(blk) }\n+    }\n+    \n+    #[inline]\n+    pub fn access_cond<'x, 'c, U>(&self,\n+                                  blk: &fn(x: &'x mut T,\n+                                           c: &'c Condvar) -> U)\n+                                  -> U {\n+        unsafe { self.lock_and_access_cond(blk) }\n+    }\n+}\n+\n // Common code for {mutex.access,rwlock.write}{,_cond}.\n #[inline]\n #[doc(hidden)]\n@@ -589,6 +633,100 @@ mod tests {\n \n     #[test]\n     fn test_mutex_arc_condvar() {\n+        let arc = ~MutexArc::new(false);\n+        let arc2 = ~arc.clone();\n+        let (p,c) = comm::oneshot();\n+        let (c,p) = (Cell::new(c), Cell::new(p));\n+        do task::spawn || {\n+            // wait until parent gets in\n+            p.take().recv();\n+            do arc2.access_cond |state, cond| {\n+                *state = true;\n+                cond.signal();\n+            }\n+        }\n+\n+        do arc.access_cond |state, cond| {\n+            c.take().send(());\n+            assert!(!*state);\n+            while !*state {\n+                cond.wait();\n+            }\n+        }\n+    }\n+\n+    #[test] #[should_fail]\n+    fn test_arc_condvar_poison() {\n+        let arc = ~MutexArc::new(1);\n+        let arc2 = ~arc.clone();\n+        let (p, c) = comm::stream();\n+\n+        do task::spawn_unlinked || {\n+            let _ = p.recv();\n+            do arc2.access_cond |one, cond| {\n+                cond.signal();\n+                // Parent should fail when it wakes up.\n+                assert_eq!(*one, 0);\n+            }\n+        }\n+\n+        do arc.access_cond |one, cond| {\n+            c.send(());\n+            while *one == 1 {\n+                cond.wait();\n+            }\n+        }\n+    }\n+\n+    #[test] #[should_fail]\n+    fn test_mutex_arc_poison() {\n+        let arc = ~MutexArc::new(1);\n+        let arc2 = ~arc.clone();\n+        do task::try || {\n+            do arc2.access |one| {\n+                assert_eq!(*one, 2);\n+            }\n+        };\n+        do arc.access |one| {\n+            assert_eq!(*one, 1);\n+        }\n+    }\n+\n+    #[test] #[should_fail]\n+    pub fn test_mutex_arc_unwrap_poison() {\n+        let arc = MutexArc::new(1);\n+        let arc2 = ~(&arc).clone();\n+        let (p, c) = comm::stream();\n+        do task::spawn {\n+            do arc2.access |one| {\n+                c.send(());\n+                assert!(*one == 2);\n+            }\n+        }\n+        let _ = p.recv();\n+        let one = arc.unwrap();\n+        assert!(one == 1);\n+    }\n+    \n+    #[test]\n+    fn test_unsafe_mutex_arc_nested() {\n+        unsafe {\n+            // Tests nested mutexes and access\n+            // to underlaying data.\n+            let arc = ~MutexArc::new(1);\n+            let arc2 = ~MutexArc::new(*arc);\n+            do task::spawn || {\n+                do (*arc2).unsafe_access |mutex| {\n+                    do (*mutex).access |one| {\n+                        assert!(*one == 1);\n+                    }\n+                }\n+            };\n+        } \n+    }\n+\n+    #[test]\n+    fn test_unsafe_mutex_arc_condvar() {\n         unsafe {\n             let arc = MutexArc::new(false);\n             let arc2 = arc.clone();\n@@ -613,7 +751,7 @@ mod tests {\n     }\n \n     #[test] #[should_fail]\n-    fn test_arc_condvar_poison() {\n+    fn test_unsafe_arc_condvar_poison() {\n         unsafe {\n             let arc = MutexArc::new(1);\n             let arc2 = arc.clone();\n@@ -637,7 +775,7 @@ mod tests {\n         }\n     }\n     #[test] #[should_fail]\n-    fn test_mutex_arc_poison() {\n+    fn test_unsafe_mutex_arc_poison() {\n         unsafe {\n             let arc = MutexArc::new(1);\n             let arc2 = arc.clone();\n@@ -651,8 +789,9 @@ mod tests {\n             }\n         }\n     }\n+\n     #[test] #[should_fail]\n-    pub fn test_mutex_arc_unwrap_poison() {\n+    pub fn test_unsafe_mutex_arc_unwrap_poison() {\n         let arc = MutexArc::new(1);\n         let arc2 = arc.clone();\n         let (p, c) = comm::stream();\n@@ -668,6 +807,7 @@ mod tests {\n         let one = arc.unwrap();\n         assert!(one == 1);\n     }\n+\n     #[test] #[should_fail]\n     fn test_rw_arc_poison_wr() {\n         let arc = RWArc::new(1);\n@@ -681,6 +821,7 @@ mod tests {\n             assert_eq!(*one, 1);\n         }\n     }\n+\n     #[test] #[should_fail]\n     fn test_rw_arc_poison_ww() {\n         let arc = RWArc::new(1);"}, {"sha": "e5f2a2fbbe10c4930174601d6b64145724b3f182", "filename": "src/test/compile-fail/mutex-arc-nested.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/408367ba6dad7c687a96c1db47a41851f778f93c/src%2Ftest%2Fcompile-fail%2Fmutex-arc-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/408367ba6dad7c687a96c1db47a41851f778f93c/src%2Ftest%2Fcompile-fail%2Fmutex-arc-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutex-arc-nested.rs?ref=408367ba6dad7c687a96c1db47a41851f778f93c", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern mod extra;\n+\n+use std::task;\n+use extra::arc::{MutexArc};\n+\n+fn test_mutex_arc_nested() {\n+    let arc = ~MutexArc::new(1);\n+    let arc2 = ~MutexArc::new(*arc);\n+\n+    do task::spawn || {\n+        do (*arc2).access |mutex| { // This should fail because MutexArc is not Freeze\n+        }\n+    };\n+}\n+\n+fn main() {}"}]}