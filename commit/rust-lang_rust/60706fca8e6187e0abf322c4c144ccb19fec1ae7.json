{"sha": "60706fca8e6187e0abf322c4c144ccb19fec1ae7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwNzA2ZmNhOGU2MTg3ZTBhYmYzMjJjNGMxNDRjY2IxOWZlYzFhZTc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-08-31T13:43:37Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-08-31T13:46:57Z"}, "message": "Remove dead code", "tree": {"sha": "1a2bb26a7f4035b75a17d1eec2316e7d0f3e84a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a2bb26a7f4035b75a17d1eec2316e7d0f3e84a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60706fca8e6187e0abf322c4c144ccb19fec1ae7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60706fca8e6187e0abf322c4c144ccb19fec1ae7", "html_url": "https://github.com/rust-lang/rust/commit/60706fca8e6187e0abf322c4c144ccb19fec1ae7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60706fca8e6187e0abf322c4c144ccb19fec1ae7/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac4b134c6be27642dbe915f32a41f9a21bd0c1c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac4b134c6be27642dbe915f32a41f9a21bd0c1c9", "html_url": "https://github.com/rust-lang/rust/commit/ac4b134c6be27642dbe915f32a41f9a21bd0c1c9"}], "stats": {"total": 14, "additions": 0, "deletions": 14}, "files": [{"sha": "a83f76857804e721ab6f8e464ad4bb9fe125cb63", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/60706fca8e6187e0abf322c4c144ccb19fec1ae7/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60706fca8e6187e0abf322c4c144ccb19fec1ae7/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=60706fca8e6187e0abf322c4c144ccb19fec1ae7", "patch": "@@ -144,10 +144,6 @@ fn expr_from_text(text: &str) -> ast::Expr {\n     ast_from_text(&format!(\"const C: () = {};\", text))\n }\n \n-pub fn try_expr_from_text(text: &str) -> Option<ast::Expr> {\n-    try_ast_from_text(&format!(\"const C: () = {};\", text))\n-}\n-\n pub fn condition(expr: ast::Expr, pattern: Option<ast::Pat>) -> ast::Condition {\n     match pattern {\n         None => ast_from_text(&format!(\"const _: () = while {} {{}};\", expr)),\n@@ -332,16 +328,6 @@ fn ast_from_text<N: AstNode>(text: &str) -> N {\n     node\n }\n \n-fn try_ast_from_text<N: AstNode>(text: &str) -> Option<N> {\n-    let parse = SourceFile::parse(text);\n-    let node = parse.tree().syntax().descendants().find_map(N::cast)?;\n-    let node = node.syntax().clone();\n-    let node = unroot(node);\n-    let node = N::cast(node).unwrap();\n-    assert_eq!(node.syntax().text_range().start(), 0.into());\n-    Some(node)\n-}\n-\n fn unroot(n: SyntaxNode) -> SyntaxNode {\n     SyntaxNode::new_root(n.green().clone())\n }"}]}