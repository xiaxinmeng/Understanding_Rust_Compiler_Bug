{"sha": "c645d3f3b99da97b802b1c757fcd1a3c21c84e8a", "node_id": "C_kwDOAAsO6NoAKGM2NDVkM2YzYjk5ZGE5N2I4MDJiMWM3NTdmY2QxYTNjMjFjODRlOGE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-10-16T08:18:17Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-10-16T16:11:16Z"}, "message": "clippy::complexity changes", "tree": {"sha": "5d19045c7c93edc7c188a793ecc94957c16d4d9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d19045c7c93edc7c188a793ecc94957c16d4d9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c645d3f3b99da97b802b1c757fcd1a3c21c84e8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c645d3f3b99da97b802b1c757fcd1a3c21c84e8a", "html_url": "https://github.com/rust-lang/rust/commit/c645d3f3b99da97b802b1c757fcd1a3c21c84e8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c645d3f3b99da97b802b1c757fcd1a3c21c84e8a/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cc0a764e082d9c0abcf37a768d5889247ba13e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cc0a764e082d9c0abcf37a768d5889247ba13e2", "html_url": "https://github.com/rust-lang/rust/commit/6cc0a764e082d9c0abcf37a768d5889247ba13e2"}], "stats": {"total": 20, "additions": 9, "deletions": 11}, "files": [{"sha": "1b123520961a6601106571a5d53e43dde4a31f33", "filename": "compiler/rustc_expand/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c645d3f3b99da97b802b1c757fcd1a3c21c84e8a/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c645d3f3b99da97b802b1c757fcd1a3c21c84e8a/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs?ref=c645d3f3b99da97b802b1c757fcd1a3c21c84e8a", "patch": "@@ -171,7 +171,7 @@ fn get_features(\n             }\n \n             if let Some(allowed) = sess.opts.debugging_opts.allow_features.as_ref() {\n-                if allowed.iter().find(|&f| name.as_str() == *f).is_none() {\n+                if allowed.iter().all(|f| name.as_str() != *f) {\n                     struct_span_err!(\n                         span_handler,\n                         mi.span(),"}, {"sha": "a36c9b6ed7304ba6fae8b627e84aa04c1561422b", "filename": "compiler/rustc_middle/src/mir/interpret/allocation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c645d3f3b99da97b802b1c757fcd1a3c21c84e8a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c645d3f3b99da97b802b1c757fcd1a3c21c84e8a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs?ref=c645d3f3b99da97b802b1c757fcd1a3c21c84e8a", "patch": "@@ -1004,13 +1004,13 @@ impl<Tag: Copy, Extra> Allocation<Tag, Extra> {\n     /// Checks that a range of bytes is initialized. If not, returns the `InvalidUninitBytes`\n     /// error which will report the first range of bytes which is uninitialized.\n     fn check_init(&self, range: AllocRange) -> AllocResult {\n-        self.is_init(range).or_else(|idx_range| {\n-            Err(AllocError::InvalidUninitBytes(Some(UninitBytesAccess {\n+        self.is_init(range).map_err(|idx_range| {\n+            AllocError::InvalidUninitBytes(Some(UninitBytesAccess {\n                 access_offset: range.start,\n                 access_size: range.size,\n                 uninit_offset: idx_range.start,\n                 uninit_size: idx_range.end - idx_range.start, // `Size` subtraction\n-            })))\n+            }))\n         })\n     }\n "}, {"sha": "05675e086d777ea638c45d918ab48f9efa663929", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c645d3f3b99da97b802b1c757fcd1a3c21c84e8a/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c645d3f3b99da97b802b1c757fcd1a3c21c84e8a/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=c645d3f3b99da97b802b1c757fcd1a3c21c84e8a", "patch": "@@ -1837,7 +1837,7 @@ crate fn show_candidates(\n                 .skip(1)\n                 .all(|(_, descr, _)| descr == descr_first)\n             {\n-                format!(\"{}\", descr_first)\n+                descr_first.to_string()\n             } else {\n                 \"item\".to_string()\n             };"}, {"sha": "c46439b85105070215e051af0ae0d64ec0e5da8b", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c645d3f3b99da97b802b1c757fcd1a3c21c84e8a/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c645d3f3b99da97b802b1c757fcd1a3c21c84e8a/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=c645d3f3b99da97b802b1c757fcd1a3c21c84e8a", "patch": "@@ -765,7 +765,7 @@ crate fn find_testable_code<T: doctest::Tester>(\n                 // If there are characters between the preceding line ending and\n                 // this code block, `str::lines` will return an additional line,\n                 // which we subtract here.\n-                if nb_lines != 0 && !&doc[prev_offset..offset.start].ends_with(\"\\n\") {\n+                if nb_lines != 0 && !&doc[prev_offset..offset.start].ends_with('\\n') {\n                     nb_lines -= 1;\n                 }\n                 let line = tests.get_line() + nb_lines + 1;"}, {"sha": "b13ab64011dc164a943451a89487b8a80dfd2061", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c645d3f3b99da97b802b1c757fcd1a3c21c84e8a/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c645d3f3b99da97b802b1c757fcd1a3c21c84e8a/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=c645d3f3b99da97b802b1c757fcd1a3c21c84e8a", "patch": "@@ -113,11 +113,9 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     .unwrap_or(&[])\n                     .iter()\n                     .filter_map(|attr| {\n-                        Some(\n-                            Cfg::parse(attr.meta_item()?)\n-                                .map_err(|e| self.cx.sess().diagnostic().span_err(e.span, e.msg))\n-                                .ok()?,\n-                        )\n+                        Cfg::parse(attr.meta_item()?)\n+                            .map_err(|e| self.cx.sess().diagnostic().span_err(e.span, e.msg))\n+                            .ok()\n                     })\n                     .collect::<Vec<_>>()\n             })"}]}