{"sha": "82091d421a06db8e37a20bbbfbc017416fea2a0c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyMDkxZDQyMWEwNmRiOGUzN2EyMGJiYmZiYzAxNzQxNmZlYTJhMGM=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-06-27T15:32:48Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-06-30T09:45:10Z"}, "message": "Deduplicate `IsAsync::Async` match", "tree": {"sha": "6d406beb68b22b96f63e506a82a0b511a5ad2967", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d406beb68b22b96f63e506a82a0b511a5ad2967"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82091d421a06db8e37a20bbbfbc017416fea2a0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82091d421a06db8e37a20bbbfbc017416fea2a0c", "html_url": "https://github.com/rust-lang/rust/commit/82091d421a06db8e37a20bbbfbc017416fea2a0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82091d421a06db8e37a20bbbfbc017416fea2a0c/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "acf50b79beb5909c16861cc7c91e8226b7f78272", "url": "https://api.github.com/repos/rust-lang/rust/commits/acf50b79beb5909c16861cc7c91e8226b7f78272", "html_url": "https://github.com/rust-lang/rust/commit/acf50b79beb5909c16861cc7c91e8226b7f78272"}], "stats": {"total": 52, "additions": 24, "deletions": 28}, "files": [{"sha": "c4d8100a1ca8a3dede7da2b3a8d5c1156de49b19", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 24, "deletions": 28, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/82091d421a06db8e37a20bbbfbc017416fea2a0c/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82091d421a06db8e37a20bbbfbc017416fea2a0c/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=82091d421a06db8e37a20bbbfbc017416fea2a0c", "patch": "@@ -2520,6 +2520,28 @@ impl<'a> LoweringContext<'a> {\n         })\n     }\n \n+    fn lower_async_body(\n+        &mut self,\n+        decl: &FnDecl,\n+        asyncness: IsAsync,\n+        body: &Block,\n+    ) -> hir::BodyId {\n+        self.lower_body(Some(decl), |this| {\n+            if let IsAsync::Async(async_node_id) = asyncness {\n+                let async_expr = this.make_async_expr(\n+                    CaptureBy::Value, async_node_id, None,\n+                    |this| {\n+                        let body = this.lower_block(body, false);\n+                        this.expr_block(body, ThinVec::new())\n+                    });\n+                this.expr(body.span, async_expr, ThinVec::new())\n+            } else {\n+                let body = this.lower_block(body, false);\n+                this.expr_block(body, ThinVec::new())\n+            }\n+        })\n+    }\n+\n     fn lower_item_kind(\n         &mut self,\n         id: NodeId,\n@@ -2559,20 +2581,7 @@ impl<'a> LoweringContext<'a> {\n                     // `impl Future<Output = T>` here because lower_body\n                     // only cares about the input argument patterns in the function\n                     // declaration (decl), not the return types.\n-                    let body_id = this.lower_body(Some(decl), |this| {\n-                        if let IsAsync::Async { closure_id, .. } = header.asyncness {\n-                            let async_expr = this.make_async_expr(\n-                                CaptureBy::Value, closure_id, None,\n-                                |this| {\n-                                    let body = this.lower_block(body, false);\n-                                    this.expr_block(body, ThinVec::new())\n-                                });\n-                            this.expr(body.span, async_expr, ThinVec::new())\n-                        } else {\n-                            let body = this.lower_block(body, false);\n-                            this.expr_block(body, ThinVec::new())\n-                        }\n-                    });\n+                    let body_id = this.lower_async_body(decl, header.asyncness, body);\n \n                     let (generics, fn_decl) = this.add_in_band_defs(\n                         generics,\n@@ -2990,20 +2999,7 @@ impl<'a> LoweringContext<'a> {\n                 )\n             }\n             ImplItemKind::Method(ref sig, ref body) => {\n-                let body_id = self.lower_body(Some(&sig.decl), |this| {\n-                    if let IsAsync::Async { closure_id, .. } = sig.header.asyncness {\n-                        let async_expr = this.make_async_expr(\n-                            CaptureBy::Value, closure_id, None,\n-                            |this| {\n-                                let body = this.lower_block(body, false);\n-                                this.expr_block(body, ThinVec::new())\n-                            });\n-                        this.expr(body.span, async_expr, ThinVec::new())\n-                    } else {\n-                        let body = this.lower_block(body, false);\n-                        this.expr_block(body, ThinVec::new())\n-                    }\n-                });\n+                let body_id = self.lower_async_body(&sig.decl, sig.header.asyncness, body);\n                 let impl_trait_return_allow = !self.is_in_trait_impl;\n \n                 self.add_in_band_defs("}]}