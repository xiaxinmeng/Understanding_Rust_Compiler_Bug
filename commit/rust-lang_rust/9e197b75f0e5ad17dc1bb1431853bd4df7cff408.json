{"sha": "9e197b75f0e5ad17dc1bb1431853bd4df7cff408", "node_id": "C_kwDOAAsO6NoAKDllMTk3Yjc1ZjBlNWFkMTdkYzFiYjE0MzE4NTNiZDRkZjdjZmY0MDg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-07-20T16:58:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-20T16:58:17Z"}, "message": "Rollup merge of #99480 - miam-miam100:arg-format, r=oli-obk\n\nDiagnostic width span is not added when '0$' is used as width in format strings\n\nWhen the following code is run rustc does not add diagnostic spans for the width argument. Such spans are necessary for a clippy lint that I am currently writing.\n\n```rust\nprintln!(\"Hello {1:0$}!\", 5, \"x\");\n//                 ^^\n// Should have a span here\n```", "tree": {"sha": "68b799e1e2bba41291b34e52e832e7900571c9ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68b799e1e2bba41291b34e52e832e7900571c9ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e197b75f0e5ad17dc1bb1431853bd4df7cff408", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi2DQqCRBK7hj4Ov3rIwAAguoIAJanZtZICmWXXkwfYHeZeMBH\nOsuDVT22HgbYFA+IcqyxQD6GbnMXfXdyjE+eLuSiI/GAwtHmY5L24jC57IN7qxp/\ntM7MwQwLMG3nl+NIqNccjhZGa7+o8EoxwkDadyVnwF4vulx2blz2Rj97wYui+P3z\nQ3Q+AfqwYmybo2um6SLHx5gAL++v2myIRq056RmpvgAakWKxh1S7ZstiYyFkOlmt\nab0tgXAvOdqwU7kCfG8ged3KwjW9H9orNuTjvFd+0+W6hVRPqOOb4e7VfcrynCJv\nUNDme0wKwKga5IKwXxSE9nF/Zs07z/C383zXdyytHUbaxlCl3RrtTtY2h+DXjgs=\n=XvcZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 68b799e1e2bba41291b34e52e832e7900571c9ce\nparent 82d9ae9ca1a21ba1fa5648e03395ade87ca762f0\nparent f8dfc4bf350bad5140a7d1e7a9030b91dbdc4ce4\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1658336297 +0200\ncommitter GitHub <noreply@github.com> 1658336297 +0200\n\nRollup merge of #99480 - miam-miam100:arg-format, r=oli-obk\n\nDiagnostic width span is not added when '0$' is used as width in format strings\n\nWhen the following code is run rustc does not add diagnostic spans for the width argument. Such spans are necessary for a clippy lint that I am currently writing.\n\n```rust\nprintln!(\"Hello {1:0$}!\", 5, \"x\");\n//                 ^^\n// Should have a span here\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e197b75f0e5ad17dc1bb1431853bd4df7cff408", "html_url": "https://github.com/rust-lang/rust/commit/9e197b75f0e5ad17dc1bb1431853bd4df7cff408", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e197b75f0e5ad17dc1bb1431853bd4df7cff408/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82d9ae9ca1a21ba1fa5648e03395ade87ca762f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/82d9ae9ca1a21ba1fa5648e03395ade87ca762f0", "html_url": "https://github.com/rust-lang/rust/commit/82d9ae9ca1a21ba1fa5648e03395ade87ca762f0"}, {"sha": "f8dfc4bf350bad5140a7d1e7a9030b91dbdc4ce4", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8dfc4bf350bad5140a7d1e7a9030b91dbdc4ce4", "html_url": "https://github.com/rust-lang/rust/commit/f8dfc4bf350bad5140a7d1e7a9030b91dbdc4ce4"}], "stats": {"total": 40, "additions": 36, "deletions": 4}, "files": [{"sha": "bce466921d0ff64d5e2e78146427b5f9358d44cc", "filename": "compiler/rustc_builtin_macros/src/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e197b75f0e5ad17dc1bb1431853bd4df7cff408/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e197b75f0e5ad17dc1bb1431853bd4df7cff408/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs?ref=9e197b75f0e5ad17dc1bb1431853bd4df7cff408", "patch": "@@ -485,7 +485,7 @@ impl<'a, 'b> Context<'a, 'b> {\n             if let Some(span) = fmt.width_span {\n                 let span = self.fmtsp.from_inner(InnerSpan::new(span.start, span.end));\n                 match fmt.width {\n-                    parse::CountIsParam(pos) if pos > self.num_args() => {\n+                    parse::CountIsParam(pos) if pos >= self.num_args() => {\n                         e.span_label(\n                             span,\n                             &format!("}, {"sha": "6e7553f5e496b16d4c62100b20651d1c435eeea7", "filename": "compiler/rustc_parse_format/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9e197b75f0e5ad17dc1bb1431853bd4df7cff408/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e197b75f0e5ad17dc1bb1431853bd4df7cff408/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs?ref=9e197b75f0e5ad17dc1bb1431853bd4df7cff408", "patch": "@@ -572,9 +572,10 @@ impl<'a> Parser<'a> {\n             // '0' flag and then an ill-formatted format string with just a '$'\n             // and no count, but this is better if we instead interpret this as\n             // no '0' flag and '0$' as the width instead.\n-            if self.consume('$') {\n+            if let Some(end) = self.consume_pos('$') {\n                 spec.width = CountIsParam(0);\n                 havewidth = true;\n+                spec.width_span = Some(self.to_span_index(end - 1).to(self.to_span_index(end + 1)));\n             } else {\n                 spec.flags |= 1 << (FlagSignAwareZeroPad as u32);\n             }"}, {"sha": "9c305b4996a13f73fb03ba6af46018e4b88725c8", "filename": "compiler/rustc_parse_format/src/tests.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9e197b75f0e5ad17dc1bb1431853bd4df7cff408/compiler%2Frustc_parse_format%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e197b75f0e5ad17dc1bb1431853bd4df7cff408/compiler%2Frustc_parse_format%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse_format%2Fsrc%2Ftests.rs?ref=9e197b75f0e5ad17dc1bb1431853bd4df7cff408", "patch": "@@ -178,6 +178,23 @@ fn format_counts() {\n             },\n         })],\n     );\n+    same(\n+        \"{1:0$.10x}\",\n+        &[NextArgument(Argument {\n+            position: ArgumentIs(1),\n+            format: FormatSpec {\n+                fill: None,\n+                align: AlignUnknown,\n+                flags: 0,\n+                precision: CountIs(10),\n+                width: CountIsParam(0),\n+                precision_span: None,\n+                width_span: Some(InnerSpan::new(4, 6)),\n+                ty: \"x\",\n+                ty_span: None,\n+            },\n+        })],\n+    );\n     same(\n         \"{:.*x}\",\n         &[NextArgument(Argument {"}, {"sha": "84f4cc7f4ccd81213009e336dd0088001f6ef57c", "filename": "src/test/ui/fmt/ifmt-bad-arg.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9e197b75f0e5ad17dc1bb1431853bd4df7cff408/src%2Ftest%2Fui%2Ffmt%2Fifmt-bad-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e197b75f0e5ad17dc1bb1431853bd4df7cff408/src%2Ftest%2Fui%2Ffmt%2Fifmt-bad-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fifmt-bad-arg.rs?ref=9e197b75f0e5ad17dc1bb1431853bd4df7cff408", "patch": "@@ -86,6 +86,9 @@ tenth number: {}\",\n     println!(\"{:foo}\", 1); //~ ERROR unknown format trait `foo`\n     println!(\"{5} {:4$} {6:7$}\", 1);\n     //~^ ERROR invalid reference to positional arguments 4, 5, 6 and 7 (there is 1 argument)\n+    let foo = 1;\n+    println!(\"{foo:0$}\");\n+    //~^ ERROR invalid reference to positional argument 0 (no arguments were given)\n \n     // We used to ICE here because we tried to unconditionally access the first argument, which\n     // doesn't exist."}, {"sha": "5439ee173985b7298424fd28cd99195662e4cf61", "filename": "src/test/ui/fmt/ifmt-bad-arg.stderr", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9e197b75f0e5ad17dc1bb1431853bd4df7cff408/src%2Ftest%2Fui%2Ffmt%2Fifmt-bad-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e197b75f0e5ad17dc1bb1431853bd4df7cff408/src%2Ftest%2Fui%2Ffmt%2Fifmt-bad-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fifmt-bad-arg.stderr?ref=9e197b75f0e5ad17dc1bb1431853bd4df7cff408", "patch": "@@ -251,8 +251,19 @@ LL |     println!(\"{5} {:4$} {6:7$}\", 1);\n    = note: positional arguments are zero-based\n    = note: for information about formatting flags, visit https://doc.rust-lang.org/std/fmt/index.html\n \n+error: invalid reference to positional argument 0 (no arguments were given)\n+  --> $DIR/ifmt-bad-arg.rs:90:15\n+   |\n+LL |     println!(\"{foo:0$}\");\n+   |               ^^^^^--^\n+   |                    |\n+   |                    this width flag expects an `usize` argument at position 0, but no arguments were given\n+   |\n+   = note: positional arguments are zero-based\n+   = note: for information about formatting flags, visit https://doc.rust-lang.org/std/fmt/index.html\n+\n error: 2 positional arguments in format string, but no arguments were given\n-  --> $DIR/ifmt-bad-arg.rs:92:15\n+  --> $DIR/ifmt-bad-arg.rs:95:15\n    |\n LL |     println!(\"{:.*}\");\n    |               ^^--^\n@@ -328,7 +339,7 @@ LL |     pub fn from_usize(x: &usize) -> ArgumentV1<'_> {\n    |            ^^^^^^^^^^\n    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 36 previous errors\n+error: aborting due to 37 previous errors\n \n Some errors have detailed explanations: E0308, E0425.\n For more information about an error, try `rustc --explain E0308`."}]}