{"sha": "84019aa0dcf8990a770764e99621568a39aeabd3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0MDE5YWEwZGNmODk5MGE3NzA3NjRlOTk2MjE1NjhhMzlhZWFiZDM=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-23T15:05:53Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-23T15:08:01Z"}, "message": "Keep an explicit map of things that have to be spilled\n\nThis prevents us from spilling locals more than once.\n\nCloses #2040", "tree": {"sha": "0279976058c7502ba2dd3e37ce838609add2cd0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0279976058c7502ba2dd3e37ce838609add2cd0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84019aa0dcf8990a770764e99621568a39aeabd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84019aa0dcf8990a770764e99621568a39aeabd3", "html_url": "https://github.com/rust-lang/rust/commit/84019aa0dcf8990a770764e99621568a39aeabd3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84019aa0dcf8990a770764e99621568a39aeabd3/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b81c5112a48cf5a797b5d1fcce4caf31b32002b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b81c5112a48cf5a797b5d1fcce4caf31b32002b", "html_url": "https://github.com/rust-lang/rust/commit/1b81c5112a48cf5a797b5d1fcce4caf31b32002b"}], "stats": {"total": 46, "additions": 35, "deletions": 11}, "files": [{"sha": "61432715d3a8632dc31c1d9a80f759a2ae454b54", "filename": "src/rustc/driver/driver.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/84019aa0dcf8990a770764e99621568a39aeabd3/src%2Frustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84019aa0dcf8990a770764e99621568a39aeabd3/src%2Frustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fdriver.rs?ref=84019aa0dcf8990a770764e99621568a39aeabd3", "patch": "@@ -169,7 +169,7 @@ fn compile_upto(sess: session, cfg: ast::crate_cfg,\n     let (copy_map, ref_map) =\n         time(time_passes, \"alias checking\",\n              bind middle::alias::check_crate(ty_cx, crate));\n-    let last_uses = time(time_passes, \"last use finding\",\n+    let (last_uses, spill_map) = time(time_passes, \"last use finding\",\n         bind last_use::find_last_uses(crate, def_map, ref_map, ty_cx));\n     time(time_passes, \"kind checking\",\n          bind kind::check_crate(ty_cx, method_map, last_uses, crate));\n@@ -181,7 +181,8 @@ fn compile_upto(sess: session, cfg: ast::crate_cfg,\n \n     let maps = {mutbl_map: mutbl_map, copy_map: copy_map,\n                 last_uses: last_uses, impl_map: impl_map,\n-                method_map: method_map, vtable_map: vtable_map};\n+                method_map: method_map, vtable_map: vtable_map,\n+                spill_map: spill_map};\n \n     let (llmod, link_meta) =\n         time(time_passes, \"translation\","}, {"sha": "4e445bb3d4f84f75ccd6d3f001ae6c5a348c63c2", "filename": "src/rustc/metadata/astencode.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/84019aa0dcf8990a770764e99621568a39aeabd3/src%2Frustc%2Fmetadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84019aa0dcf8990a770764e99621568a39aeabd3/src%2Frustc%2Fmetadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fastencode.rs?ref=84019aa0dcf8990a770764e99621568a39aeabd3", "patch": "@@ -512,7 +512,7 @@ impl of tr for method_origin {\n impl of tr for last_use::is_last_use {\n     fn tr(xcx: extended_decode_ctxt) -> last_use::is_last_use {\n         alt self {\n-          last_use::is_last_use | last_use::has_last_use { self }\n+          last_use::is_last_use { self }\n           last_use::closes_over(ids) {\n             last_use::closes_over(vec::map(ids, {|id| xcx.tr_id(id)}))\n           }\n@@ -780,6 +780,12 @@ fn encode_side_tables_for_id(ecx: @e::encode_ctxt,\n         }\n     }\n \n+    option::may(ccx.maps.spill_map.find(id)) {|_m|\n+        ebml_w.tag(c::tag_table_spill) {||\n+            ebml_w.id(id);\n+        }\n+    }\n+\n     option::may(ccx.maps.last_uses.find(id)) {|m|\n         ebml_w.tag(c::tag_table_last_use) {||\n             ebml_w.id(id);\n@@ -869,6 +875,8 @@ fn decode_side_tables(xcx: extended_decode_ctxt,\n             dcx.maps.mutbl_map.insert(id, ());\n         } else if tag == (c::tag_table_copy as uint) {\n             dcx.maps.copy_map.insert(id, ());\n+        } else if tag == (c::tag_table_spill as uint) {\n+            dcx.maps.spill_map.insert(id, ());\n         } else {\n             let val_doc = entry_doc[c::tag_table_val];\n             let val_dsr = ebml::ebml_deserializer(val_doc);"}, {"sha": "a446d5ba90b1dc97efd3c1b88408851694f0bd9c", "filename": "src/rustc/metadata/common.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84019aa0dcf8990a770764e99621568a39aeabd3/src%2Frustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84019aa0dcf8990a770764e99621568a39aeabd3/src%2Frustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcommon.rs?ref=84019aa0dcf8990a770764e99621568a39aeabd3", "patch": "@@ -100,6 +100,7 @@ enum astencode_tag { // Reserves 0x50 -- 0x6f\n     tag_table_mutbl,\n     tag_table_copy,\n     tag_table_last_use,\n+    tag_table_spill,\n     tag_table_method_map,\n     tag_table_vtable_map\n }"}, {"sha": "6c9e61c0fa5642a687e10a00f62a7ae60fbc0454", "filename": "src/rustc/middle/last_use.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/84019aa0dcf8990a770764e99621568a39aeabd3/src%2Frustc%2Fmiddle%2Flast_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84019aa0dcf8990a770764e99621568a39aeabd3/src%2Frustc%2Fmiddle%2Flast_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flast_use.rs?ref=84019aa0dcf8990a770764e99621568a39aeabd3", "patch": "@@ -28,10 +28,10 @@ import std::map::hashmap;\n #[auto_serialize]\n enum is_last_use {\n     is_last_use,\n-    has_last_use,\n     closes_over([node_id]),\n }\n type last_uses = std::map::hashmap<node_id, is_last_use>;\n+type spill_map = std::map::hashmap<node_id, ()>;\n \n enum seen { unset, seen(node_id), }\n enum block_type { func, lp, }\n@@ -46,6 +46,7 @@ fn hash_use_id(id: use_id) -> uint {\n }\n \n type ctx = {last_uses: std::map::hashmap<use_id, bool>,\n+            spill_map: std::map::hashmap<node_id, ()>,\n             def_map: resolve::def_map,\n             ref_map: alias::ref_map,\n             tcx: ty::ctxt,\n@@ -54,12 +55,14 @@ type ctx = {last_uses: std::map::hashmap<use_id, bool>,\n             mutable blocks: list<bl>};\n \n fn find_last_uses(c: @crate, def_map: resolve::def_map,\n-                  ref_map: alias::ref_map, tcx: ty::ctxt) -> last_uses {\n+                  ref_map: alias::ref_map, tcx: ty::ctxt)\n+    -> (last_uses, spill_map) {\n     let v = visit::mk_vt(@{visit_expr: visit_expr,\n                            visit_stmt: visit_stmt,\n                            visit_fn: visit_fn\n                            with *visit::default_visitor()});\n     let cx = {last_uses: std::map::hashmap(hash_use_id, {|a, b| a == b}),\n+              spill_map: std::map::int_hash(),\n               def_map: def_map,\n               ref_map: ref_map,\n               tcx: tcx,\n@@ -73,10 +76,10 @@ fn find_last_uses(c: @crate, def_map: resolve::def_map,\n           path(id) {\n             mini_table.insert(id, is_last_use);\n             let def_node = ast_util::def_id_of_def(def_map.get(id)).node;\n-            mini_table.insert(def_node, has_last_use);\n+            cx.spill_map.insert(def_node, ());\n           }\n           close(fn_id, local_id) {\n-            mini_table.insert(local_id, has_last_use);\n+            cx.spill_map.insert(local_id, ());\n             let known = alt check mini_table.find(fn_id) {\n               some(closes_over(ids)) { ids }\n               none { [] }\n@@ -85,7 +88,7 @@ fn find_last_uses(c: @crate, def_map: resolve::def_map,\n           }\n         }\n     }\n-    ret mini_table;\n+    ret (mini_table, cx.spill_map);\n }\n \n fn visit_expr(ex: @expr, cx: ctx, v: visit::vt<ctx>) {\n@@ -187,7 +190,11 @@ fn visit_expr(ex: @expr, cx: ctx, v: visit::vt<ctx>) {\n               expr_path(_) {\n                 alt ty::arg_mode(cx.tcx, arg_t) {\n                   by_ref | by_val | by_mutbl_ref {\n-                    clear_if_path(cx, arg, v, false);\n+                    let def = cx.def_map.get(arg.id);\n+                    option::may(def_is_owned_local(cx, def)) {|id|\n+                        clear_in_current(cx, id, false);\n+                        cx.spill_map.insert(id, ());\n+                    }\n                   }\n                   _ {}\n                 }"}, {"sha": "6548975801a211ebe5f98063c34b67b61caa8c2e", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84019aa0dcf8990a770764e99621568a39aeabd3/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84019aa0dcf8990a770764e99621568a39aeabd3/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=84019aa0dcf8990a770764e99621568a39aeabd3", "patch": "@@ -3687,7 +3687,7 @@ fn alloc_local(cx: block, local: @ast::local) -> block {\n     let ccx = cx.ccx();\n     if option::is_some(simple_name) &&\n        !ccx.maps.mutbl_map.contains_key(local.node.pat.id) &&\n-       !ccx.maps.last_uses.contains_key(local.node.pat.id) &&\n+       !ccx.maps.spill_map.contains_key(local.node.pat.id) &&\n        ty::type_is_immediate(t) {\n         alt local.node.init {\n           some({op: ast::init_assign, _}) { ret cx; }"}, {"sha": "cee8508dc58ec330932d9051f8b874db19548bb0", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/84019aa0dcf8990a770764e99621568a39aeabd3/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84019aa0dcf8990a770764e99621568a39aeabd3/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=84019aa0dcf8990a770764e99621568a39aeabd3", "patch": "@@ -69,7 +69,8 @@ type maps = {\n     last_uses: middle::last_use::last_uses,\n     impl_map: middle::resolve::impl_map,\n     method_map: middle::typeck::method_map,\n-    vtable_map: middle::typeck::vtable_map\n+    vtable_map: middle::typeck::vtable_map,\n+    spill_map: last_use::spill_map\n };\n \n // Crate context.  Every crate we compile has one of these."}, {"sha": "060994ed48f0a6f261cc62a9ad8234906670dc68", "filename": "src/test/run-pass/stable-addr-of.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/84019aa0dcf8990a770764e99621568a39aeabd3/src%2Ftest%2Frun-pass%2Fstable-addr-of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84019aa0dcf8990a770764e99621568a39aeabd3/src%2Ftest%2Frun-pass%2Fstable-addr-of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstable-addr-of.rs?ref=84019aa0dcf8990a770764e99621568a39aeabd3", "patch": "@@ -0,0 +1,6 @@\n+// Issue #2040\n+\n+fn main() {\n+    let foo = 1;\n+    assert ptr::addr_of(foo) == ptr::addr_of(foo);\n+}"}]}