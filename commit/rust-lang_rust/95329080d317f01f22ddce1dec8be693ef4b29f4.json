{"sha": "95329080d317f01f22ddce1dec8be693ef4b29f4", "node_id": "C_kwDOAAsO6NoAKDk1MzI5MDgwZDMxN2YwMWYyMmRkY2UxZGVjOGJlNjkzZWY0YjI5ZjQ", "commit": {"author": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2023-01-02T19:54:08Z"}, "committer": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2023-01-03T14:54:46Z"}, "message": "jsondoclint: Find selector for missing ID when error is created, not reported.\n\nThis is needed for json output, but even without that, it increases\nperformance massivly. On my machine, in reduces the time to check\ncore.json from 40.190s to 11.333s.", "tree": {"sha": "d64308178c42b4401d199fe0fe1529964e308fde", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d64308178c42b4401d199fe0fe1529964e308fde"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95329080d317f01f22ddce1dec8be693ef4b29f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95329080d317f01f22ddce1dec8be693ef4b29f4", "html_url": "https://github.com/rust-lang/rust/commit/95329080d317f01f22ddce1dec8be693ef4b29f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95329080d317f01f22ddce1dec8be693ef4b29f4/comments", "author": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "855b7e8cf3963b9f187249f1f38b6bb2baa9c353", "url": "https://api.github.com/repos/rust-lang/rust/commits/855b7e8cf3963b9f187249f1f38b6bb2baa9c353", "html_url": "https://github.com/rust-lang/rust/commit/855b7e8cf3963b9f187249f1f38b6bb2baa9c353"}], "stats": {"total": 106, "additions": 64, "deletions": 42}, "files": [{"sha": "266900ea3a22df09ab6de794e117d1c2a57138b5", "filename": "src/tools/jsondoclint/src/main.rs", "status": "modified", "additions": 36, "deletions": 37, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/95329080d317f01f22ddce1dec8be693ef4b29f4/src%2Ftools%2Fjsondoclint%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95329080d317f01f22ddce1dec8be693ef4b29f4/src%2Ftools%2Fjsondoclint%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondoclint%2Fsrc%2Fmain.rs?ref=95329080d317f01f22ddce1dec8be693ef4b29f4", "patch": "@@ -16,7 +16,7 @@ struct Error {\n \n #[derive(Debug, PartialEq, Eq)]\n enum ErrorKind {\n-    NotFound,\n+    NotFound(Vec<json_find::Selector>),\n     Custom(String),\n }\n \n@@ -37,49 +37,48 @@ fn main() -> Result<()> {\n     let krate: Crate = serde_json::from_str(&contents)?;\n     assert_eq!(krate.format_version, FORMAT_VERSION);\n \n-    let mut validator = validator::Validator::new(&krate);\n+    let krate_json: Value = serde_json::from_str(&contents)?;\n+\n+    let mut validator = validator::Validator::new(&krate, krate_json);\n     validator.check_crate();\n \n     if !validator.errs.is_empty() {\n         for err in validator.errs {\n             match err.kind {\n-                ErrorKind::NotFound => {\n-                    let krate_json: Value = serde_json::from_str(&contents)?;\n-\n-                    let sels =\n-                        json_find::find_selector(&krate_json, &Value::String(err.id.0.clone()));\n-                    match &sels[..] {\n-                        [] => unreachable!(\n-                            \"id must be in crate, or it wouldn't be reported as not found\"\n-                        ),\n-                        [sel] => eprintln!(\n-                            \"{} not in index or paths, but refered to at '{}'\",\n-                            err.id.0,\n-                            json_find::to_jsonpath(&sel)\n-                        ),\n-                        [sel, ..] => {\n-                            if verbose {\n-                                let sels = sels\n-                                    .iter()\n-                                    .map(json_find::to_jsonpath)\n-                                    .map(|i| format!(\"'{i}'\"))\n-                                    .collect::<Vec<_>>()\n-                                    .join(\", \");\n-                                eprintln!(\n-                                    \"{} not in index or paths, but refered to at {sels}\",\n-                                    err.id.0\n-                                );\n-                            } else {\n-                                eprintln!(\n-                                    \"{} not in index or paths, but refered to at '{}' and {} more\",\n-                                    err.id.0,\n-                                    json_find::to_jsonpath(&sel),\n-                                    sels.len() - 1,\n-                                )\n-                            }\n+                ErrorKind::NotFound(sels) => match &sels[..] {\n+                    [] => {\n+                        unreachable!(\n+                            \"id {:?} must be in crate, or it wouldn't be reported as not found\",\n+                            err.id\n+                        )\n+                    }\n+                    [sel] => eprintln!(\n+                        \"{} not in index or paths, but refered to at '{}'\",\n+                        err.id.0,\n+                        json_find::to_jsonpath(&sel)\n+                    ),\n+                    [sel, ..] => {\n+                        if verbose {\n+                            let sels = sels\n+                                .iter()\n+                                .map(json_find::to_jsonpath)\n+                                .map(|i| format!(\"'{i}'\"))\n+                                .collect::<Vec<_>>()\n+                                .join(\", \");\n+                            eprintln!(\n+                                \"{} not in index or paths, but refered to at {sels}\",\n+                                err.id.0\n+                            );\n+                        } else {\n+                            eprintln!(\n+                                \"{} not in index or paths, but refered to at '{}' and {} more\",\n+                                err.id.0,\n+                                json_find::to_jsonpath(&sel),\n+                                sels.len() - 1,\n+                            )\n                         }\n                     }\n-                }\n+                },\n                 ErrorKind::Custom(msg) => eprintln!(\"{}: {}\", err.id.0, msg),\n             }\n         }"}, {"sha": "f1b9c1acbaec088097ccf45603b9b88557723001", "filename": "src/tools/jsondoclint/src/validator.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/95329080d317f01f22ddce1dec8be693ef4b29f4/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95329080d317f01f22ddce1dec8be693ef4b29f4/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator.rs?ref=95329080d317f01f22ddce1dec8be693ef4b29f4", "patch": "@@ -7,8 +7,9 @@ use rustdoc_json_types::{\n     Primitive, ProcMacro, Static, Struct, StructKind, Term, Trait, TraitAlias, Type, TypeBinding,\n     TypeBindingKind, Typedef, Union, Variant, VariantKind, WherePredicate,\n };\n+use serde_json::Value;\n \n-use crate::{item_kind::Kind, Error, ErrorKind};\n+use crate::{item_kind::Kind, json_find, Error, ErrorKind};\n \n /// The Validator walks over the JSON tree, and ensures it is well formed.\n /// It is made of several parts.\n@@ -22,6 +23,7 @@ use crate::{item_kind::Kind, Error, ErrorKind};\n pub struct Validator<'a> {\n     pub(crate) errs: Vec<Error>,\n     krate: &'a Crate,\n+    krate_json: Value,\n     /// Worklist of Ids to check.\n     todo: HashSet<&'a Id>,\n     /// Ids that have already been visited, so don't need to be checked again.\n@@ -39,9 +41,10 @@ enum PathKind {\n }\n \n impl<'a> Validator<'a> {\n-    pub fn new(krate: &'a Crate) -> Self {\n+    pub fn new(krate: &'a Crate, krate_json: Value) -> Self {\n         Self {\n             krate,\n+            krate_json,\n             errs: Vec::new(),\n             seen_ids: HashSet::new(),\n             todo: HashSet::new(),\n@@ -373,7 +376,11 @@ impl<'a> Validator<'a> {\n         } else {\n             if !self.missing_ids.contains(id) {\n                 self.missing_ids.insert(id);\n-                self.fail(id, ErrorKind::NotFound)\n+\n+                let sels = json_find::find_selector(&self.krate_json, &Value::String(id.0.clone()));\n+                assert_ne!(sels.len(), 0);\n+\n+                self.fail(id, ErrorKind::NotFound(sels))\n             }\n         }\n     }"}, {"sha": "37b826153efb16dc09c67227adefebea4b206139", "filename": "src/tools/jsondoclint/src/validator/tests.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/95329080d317f01f22ddce1dec8be693ef4b29f4/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95329080d317f01f22ddce1dec8be693ef4b29f4/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator%2Ftests.rs?ref=95329080d317f01f22ddce1dec8be693ef4b29f4", "patch": "@@ -2,11 +2,16 @@ use std::collections::HashMap;\n \n use rustdoc_json_types::{Crate, Item, Visibility};\n \n+use crate::json_find::SelectorPart;\n+\n use super::*;\n \n #[track_caller]\n fn check(krate: &Crate, errs: &[Error]) {\n-    let mut validator = Validator::new(krate);\n+    let krate_string = serde_json::to_string(krate).unwrap();\n+    let krate_json = serde_json::from_str(&krate_string).unwrap();\n+\n+    let mut validator = Validator::new(krate, krate_json);\n     validator.check_crate();\n \n     assert_eq!(errs, &validator.errs[..]);\n@@ -46,5 +51,16 @@ fn errors_on_missing_links() {\n         format_version: rustdoc_json_types::FORMAT_VERSION,\n     };\n \n-    check(&k, &[Error { kind: ErrorKind::NotFound, id: id(\"1\") }]);\n+    check(\n+        &k,\n+        &[Error {\n+            kind: ErrorKind::NotFound(vec![vec![\n+                SelectorPart::Field(\"index\".to_owned()),\n+                SelectorPart::Field(\"0\".to_owned()),\n+                SelectorPart::Field(\"links\".to_owned()),\n+                SelectorPart::Field(\"Not Found\".to_owned()),\n+            ]]),\n+            id: id(\"1\"),\n+        }],\n+    );\n }"}]}