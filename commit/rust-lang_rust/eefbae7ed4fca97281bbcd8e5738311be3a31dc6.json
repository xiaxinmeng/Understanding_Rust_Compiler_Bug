{"sha": "eefbae7ed4fca97281bbcd8e5738311be3a31dc6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlZmJhZTdlZDRmY2E5NzI4MWJiY2Q4ZTU3MzgzMTFiZTNhMzFkYzY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-12-20T11:47:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-20T11:47:01Z"}, "message": "Merge #6921\n\n6921: Higher-ranked trait bounds for where clauses r=flodiebold a=Veykril\n\nThere is a slight problem with this which is also noted in a FIXME now but `LifetimeParameters` of these ForLifetime where clauses allocate the lifetimes in the corresponding arena as if they were lifetimes of the item itself and not just the clause they belong to. I wasn't entirely sure what I could do about this but given nothing really uses lifetimes like that currently I figured it might be fine? Open to suggestions for that problem.\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "2d979ad92fc4a6a2000518feb545f72b88e36cf4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d979ad92fc4a6a2000518feb545f72b88e36cf4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eefbae7ed4fca97281bbcd8e5738311be3a31dc6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf3zm1CRBK7hj4Ov3rIwAAdHIIACdBESxIXxTycDu6YTFqmyAK\nN2Toir5vhmiB0t+Ox89aWHtpTvmTAqvZwoZcnE8KJMyBEOn85N1bsvHObxM0oshj\nLJ9n6tp7p2je154l9S6+7msdUA2YtU+4beFQL1nrlbEhtDCE21Z2YBf0tdRbjknf\nP5KfMz5wFNRJlrh9UO/zGb70+bk2CsejDSl+MGfCDPacgfUCbDPxOhQtpLcrQ9Xa\nUVl2DQ2c+LitcfqqH1uYPTpoJqOzql5ogL+/Rlgo+H/YhaLHPK1QhMEhmFtncNff\n9fHkJSV37gGbYDrnmmmkmd8xhN3B/RSAOYQ9dd98u+ert25fXzyC4mtmyn+v7ME=\n=xKPu\n-----END PGP SIGNATURE-----\n", "payload": "tree 2d979ad92fc4a6a2000518feb545f72b88e36cf4\nparent f3125555a8de6fad4529408436800a6b1243a442\nparent fa65d6ba855fb2da68840b987bfdec258239a59b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1608464821 +0000\ncommitter GitHub <noreply@github.com> 1608464821 +0000\n\nMerge #6921\n\n6921: Higher-ranked trait bounds for where clauses r=flodiebold a=Veykril\n\nThere is a slight problem with this which is also noted in a FIXME now but `LifetimeParameters` of these ForLifetime where clauses allocate the lifetimes in the corresponding arena as if they were lifetimes of the item itself and not just the clause they belong to. I wasn't entirely sure what I could do about this but given nothing really uses lifetimes like that currently I figured it might be fine? Open to suggestions for that problem.\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eefbae7ed4fca97281bbcd8e5738311be3a31dc6", "html_url": "https://github.com/rust-lang/rust/commit/eefbae7ed4fca97281bbcd8e5738311be3a31dc6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eefbae7ed4fca97281bbcd8e5738311be3a31dc6/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3125555a8de6fad4529408436800a6b1243a442", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3125555a8de6fad4529408436800a6b1243a442", "html_url": "https://github.com/rust-lang/rust/commit/f3125555a8de6fad4529408436800a6b1243a442"}, {"sha": "fa65d6ba855fb2da68840b987bfdec258239a59b", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa65d6ba855fb2da68840b987bfdec258239a59b", "html_url": "https://github.com/rust-lang/rust/commit/fa65d6ba855fb2da68840b987bfdec258239a59b"}], "stats": {"total": 93, "additions": 74, "deletions": 19}, "files": [{"sha": "73ca6ba9f481e5555ea6b6534f7e72839a1a3ae6", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eefbae7ed4fca97281bbcd8e5738311be3a31dc6/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eefbae7ed4fca97281bbcd8e5738311be3a31dc6/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=eefbae7ed4fca97281bbcd8e5738311be3a31dc6", "patch": "@@ -1268,7 +1268,6 @@ impl LifetimeParam {\n     }\n }\n \n-// FIXME: rename from `ImplDef` to `Impl`\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct Impl {\n     pub(crate) id: ImplId,"}, {"sha": "bb8fca009a1fd7632c9d8a15bc54e03b29b27bcc", "filename": "crates/hir_def/src/generics.rs", "status": "modified", "additions": 31, "deletions": 6, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/eefbae7ed4fca97281bbcd8e5738311be3a31dc6/crates%2Fhir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eefbae7ed4fca97281bbcd8e5738311be3a31dc6/crates%2Fhir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fgenerics.rs?ref=eefbae7ed4fca97281bbcd8e5738311be3a31dc6", "patch": "@@ -62,14 +62,14 @@ pub struct GenericParams {\n pub enum WherePredicate {\n     TypeBound { target: WherePredicateTypeTarget, bound: TypeBound },\n     Lifetime { target: LifetimeRef, bound: LifetimeRef },\n+    ForLifetime { lifetimes: Box<[Name]>, target: WherePredicateTypeTarget, bound: TypeBound },\n }\n \n #[derive(Clone, PartialEq, Eq, Debug)]\n pub enum WherePredicateTypeTarget {\n     TypeRef(TypeRef),\n     /// For desugared where predicates that can directly refer to a type param.\n     TypeParam(LocalTypeParamId),\n-    // FIXME: ForLifetime(Vec<LifetimeParamId>, TypeRef)\n }\n \n #[derive(Default)]\n@@ -234,7 +234,7 @@ impl GenericParams {\n         for bound in\n             node.type_bound_list().iter().flat_map(|type_bound_list| type_bound_list.bounds())\n         {\n-            self.add_where_predicate_from_bound(lower_ctx, bound, target.clone());\n+            self.add_where_predicate_from_bound(lower_ctx, bound, None, target.clone());\n         }\n     }\n \n@@ -279,8 +279,25 @@ impl GenericParams {\n             } else {\n                 continue;\n             };\n+\n+            let lifetimes: Option<Box<_>> = pred.generic_param_list().map(|param_list| {\n+                // Higher-Ranked Trait Bounds\n+                param_list\n+                    .lifetime_params()\n+                    .map(|lifetime_param| {\n+                        lifetime_param\n+                            .lifetime()\n+                            .map_or_else(Name::missing, |lt| Name::new_lifetime(&lt))\n+                    })\n+                    .collect()\n+            });\n             for bound in pred.type_bound_list().iter().flat_map(|l| l.bounds()) {\n-                self.add_where_predicate_from_bound(lower_ctx, bound, target.clone());\n+                self.add_where_predicate_from_bound(\n+                    lower_ctx,\n+                    bound,\n+                    lifetimes.as_ref(),\n+                    target.clone(),\n+                );\n             }\n         }\n     }\n@@ -289,6 +306,7 @@ impl GenericParams {\n         &mut self,\n         lower_ctx: &LowerCtx,\n         bound: ast::TypeBound,\n+        hrtb_lifetimes: Option<&Box<[Name]>>,\n         target: Either<TypeRef, LifetimeRef>,\n     ) {\n         if bound.question_mark_token().is_some() {\n@@ -297,9 +315,16 @@ impl GenericParams {\n         }\n         let bound = TypeBound::from_ast(lower_ctx, bound);\n         let predicate = match (target, bound) {\n-            (Either::Left(type_ref), bound) => WherePredicate::TypeBound {\n-                target: WherePredicateTypeTarget::TypeRef(type_ref),\n-                bound,\n+            (Either::Left(type_ref), bound) => match hrtb_lifetimes {\n+                Some(hrtb_lifetimes) => WherePredicate::ForLifetime {\n+                    lifetimes: hrtb_lifetimes.clone(),\n+                    target: WherePredicateTypeTarget::TypeRef(type_ref),\n+                    bound,\n+                },\n+                None => WherePredicate::TypeBound {\n+                    target: WherePredicateTypeTarget::TypeRef(type_ref),\n+                    bound,\n+                },\n             },\n             (Either::Right(lifetime), TypeBound::Lifetime(bound)) => {\n                 WherePredicate::Lifetime { target: lifetime, bound }"}, {"sha": "8da56cd11c85b40f7361aec341bae8918c99a9f2", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/eefbae7ed4fca97281bbcd8e5738311be3a31dc6/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eefbae7ed4fca97281bbcd8e5738311be3a31dc6/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=eefbae7ed4fca97281bbcd8e5738311be3a31dc6", "patch": "@@ -675,7 +675,8 @@ impl GenericPredicate {\n         where_predicate: &'a WherePredicate,\n     ) -> impl Iterator<Item = GenericPredicate> + 'a {\n         match where_predicate {\n-            WherePredicate::TypeBound { target, bound } => {\n+            WherePredicate::ForLifetime { target, bound, .. }\n+            | WherePredicate::TypeBound { target, bound } => {\n                 let self_ty = match target {\n                     WherePredicateTypeTarget::TypeRef(type_ref) => Ty::from_hir(ctx, type_ref),\n                     WherePredicateTypeTarget::TypeParam(param_id) => {\n@@ -888,14 +889,13 @@ pub(crate) fn generic_predicates_for_param_query(\n         .where_predicates_in_scope()\n         // we have to filter out all other predicates *first*, before attempting to lower them\n         .filter(|pred| match pred {\n-            WherePredicate::TypeBound {\n-                target: WherePredicateTypeTarget::TypeRef(type_ref),\n-                ..\n-            } => Ty::from_hir_only_param(&ctx, type_ref) == Some(param_id),\n-            WherePredicate::TypeBound {\n-                target: WherePredicateTypeTarget::TypeParam(local_id),\n-                ..\n-            } => *local_id == param_id.local_id,\n+            WherePredicate::ForLifetime { target, .. }\n+            | WherePredicate::TypeBound { target, .. } => match target {\n+                WherePredicateTypeTarget::TypeRef(type_ref) => {\n+                    Ty::from_hir_only_param(&ctx, type_ref) == Some(param_id)\n+                }\n+                WherePredicateTypeTarget::TypeParam(local_id) => *local_id == param_id.local_id,\n+            },\n             WherePredicate::Lifetime { .. } => false,\n         })\n         .flat_map(|pred| {"}, {"sha": "65b79df0d5117fdb885baf70849ac7a5eaddb60c", "filename": "crates/hir_ty/src/utils.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/eefbae7ed4fca97281bbcd8e5738311be3a31dc6/crates%2Fhir_ty%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eefbae7ed4fca97281bbcd8e5738311be3a31dc6/crates%2Fhir_ty%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Futils.rs?ref=eefbae7ed4fca97281bbcd8e5738311be3a31dc6", "patch": "@@ -5,7 +5,9 @@ use std::sync::Arc;\n use hir_def::{\n     adt::VariantData,\n     db::DefDatabase,\n-    generics::{GenericParams, TypeParamData, TypeParamProvenance, WherePredicateTypeTarget},\n+    generics::{\n+        GenericParams, TypeParamData, TypeParamProvenance, WherePredicate, WherePredicateTypeTarget,\n+    },\n     path::Path,\n     resolver::{HasResolver, TypeNs},\n     type_ref::TypeRef,\n@@ -27,7 +29,8 @@ fn direct_super_traits(db: &dyn DefDatabase, trait_: TraitId) -> Vec<TraitId> {\n         .where_predicates\n         .iter()\n         .filter_map(|pred| match pred {\n-            hir_def::generics::WherePredicate::TypeBound { target, bound } => match target {\n+            WherePredicate::ForLifetime { target, bound, .. }\n+            | WherePredicate::TypeBound { target, bound } => match target {\n                 WherePredicateTypeTarget::TypeRef(TypeRef::Path(p))\n                     if p == &Path::from(name![Self]) =>\n                 {\n@@ -38,7 +41,7 @@ fn direct_super_traits(db: &dyn DefDatabase, trait_: TraitId) -> Vec<TraitId> {\n                 }\n                 _ => None,\n             },\n-            hir_def::generics::WherePredicate::Lifetime { .. } => None,\n+            WherePredicate::Lifetime { .. } => None,\n         })\n         .filter_map(|path| match resolver.resolve_path_in_type_ns_fully(db, path.mod_path()) {\n             Some(TypeNs::TraitId(t)) => Some(t),"}, {"sha": "431da5d9c75197126314fcd48d2f38fa956a9974", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/eefbae7ed4fca97281bbcd8e5738311be3a31dc6/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eefbae7ed4fca97281bbcd8e5738311be3a31dc6/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=eefbae7ed4fca97281bbcd8e5738311be3a31dc6", "patch": "@@ -1077,4 +1077,32 @@ fn foo<'foobar>(_: &'foobar ()) {\n }\"#,\n         )\n     }\n+\n+    #[test]\n+    #[ignore] // requires the HIR to somehow track these hrtb lifetimes\n+    fn goto_lifetime_hrtb() {\n+        check(\n+            r#\"trait Foo<T> {}\n+fn foo<T>() where for<'a> T: Foo<&'a<|> (u8, u16)>, {}\n+                    //^^\n+\"#,\n+        );\n+        check(\n+            r#\"trait Foo<T> {}\n+fn foo<T>() where for<'a<|>> T: Foo<&'a (u8, u16)>, {}\n+                    //^^\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    #[ignore] // requires ForTypes to be implemented\n+    fn goto_lifetime_hrtb_for_type() {\n+        check(\n+            r#\"trait Foo<T> {}\n+fn foo<T>() where T: for<'a> Foo<&'a<|> (u8, u16)>, {}\n+                       //^^\n+\"#,\n+        );\n+    }\n }"}]}