{"sha": "3c8caaca7deb27f5946bee120631805e56003269", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjOGNhYWNhN2RlYjI3ZjU5NDZiZWUxMjA2MzE4MDVlNTYwMDMyNjk=", "commit": {"author": {"name": "kenta7777", "email": "k.hasegw7@gmail.com", "date": "2019-04-01T16:02:18Z"}, "committer": {"name": "kenta7777", "email": "k.hasegw7@gmail.com", "date": "2019-04-01T16:02:18Z"}, "message": "renames EvalErrorKind to InterpError", "tree": {"sha": "141c02c5ee04361632eb256a4011c96558ea9bd8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/141c02c5ee04361632eb256a4011c96558ea9bd8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c8caaca7deb27f5946bee120631805e56003269", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c8caaca7deb27f5946bee120631805e56003269", "html_url": "https://github.com/rust-lang/rust/commit/3c8caaca7deb27f5946bee120631805e56003269", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c8caaca7deb27f5946bee120631805e56003269/comments", "author": {"login": "kenta7777", "id": 16369171, "node_id": "MDQ6VXNlcjE2MzY5MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/16369171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kenta7777", "html_url": "https://github.com/kenta7777", "followers_url": "https://api.github.com/users/kenta7777/followers", "following_url": "https://api.github.com/users/kenta7777/following{/other_user}", "gists_url": "https://api.github.com/users/kenta7777/gists{/gist_id}", "starred_url": "https://api.github.com/users/kenta7777/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kenta7777/subscriptions", "organizations_url": "https://api.github.com/users/kenta7777/orgs", "repos_url": "https://api.github.com/users/kenta7777/repos", "events_url": "https://api.github.com/users/kenta7777/events{/privacy}", "received_events_url": "https://api.github.com/users/kenta7777/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kenta7777", "id": 16369171, "node_id": "MDQ6VXNlcjE2MzY5MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/16369171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kenta7777", "html_url": "https://github.com/kenta7777", "followers_url": "https://api.github.com/users/kenta7777/followers", "following_url": "https://api.github.com/users/kenta7777/following{/other_user}", "gists_url": "https://api.github.com/users/kenta7777/gists{/gist_id}", "starred_url": "https://api.github.com/users/kenta7777/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kenta7777/subscriptions", "organizations_url": "https://api.github.com/users/kenta7777/orgs", "repos_url": "https://api.github.com/users/kenta7777/repos", "events_url": "https://api.github.com/users/kenta7777/events{/privacy}", "received_events_url": "https://api.github.com/users/kenta7777/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eab3eb38df8dca99110b6149b3a15deeb4ef0413", "url": "https://api.github.com/repos/rust-lang/rust/commits/eab3eb38df8dca99110b6149b3a15deeb4ef0413", "html_url": "https://github.com/rust-lang/rust/commit/eab3eb38df8dca99110b6149b3a15deeb4ef0413"}], "stats": {"total": 146, "additions": 73, "deletions": 73}, "files": [{"sha": "280e75476b72a9140fbd92e8d81e7043da9079a3", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3c8caaca7deb27f5946bee120631805e56003269/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c8caaca7deb27f5946bee120631805e56003269/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=3c8caaca7deb27f5946bee120631805e56003269", "patch": "@@ -43,7 +43,7 @@ pub type ConstEvalResult<'tcx> = Result<ty::Const<'tcx>, ErrorHandled>;\n #[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n pub struct ConstEvalErr<'tcx> {\n     pub span: Span,\n-    pub error: crate::mir::interpret::EvalErrorKind<'tcx, u64>,\n+    pub error: crate::mir::interpret::InterpError<'tcx, u64>,\n     pub stacktrace: Vec<FrameInfo<'tcx>>,\n }\n \n@@ -135,10 +135,10 @@ impl<'a, 'gcx, 'tcx> ConstEvalErr<'tcx> {\n         lint_root: Option<hir::HirId>,\n     ) -> Result<DiagnosticBuilder<'tcx>, ErrorHandled> {\n         match self.error {\n-            EvalErrorKind::Layout(LayoutError::Unknown(_)) |\n-            EvalErrorKind::TooGeneric => return Err(ErrorHandled::TooGeneric),\n-            EvalErrorKind::Layout(LayoutError::SizeOverflow(_)) |\n-            EvalErrorKind::TypeckError => return Err(ErrorHandled::Reported),\n+            InterpError::Layout(LayoutError::Unknown(_)) |\n+            InterpError::TooGeneric => return Err(ErrorHandled::TooGeneric),\n+            InterpError::Layout(LayoutError::SizeOverflow(_)) |\n+            InterpError::TypeckError => return Err(ErrorHandled::Reported),\n             _ => {},\n         }\n         trace!(\"reporting const eval failure at {:?}\", self.span);\n@@ -180,7 +180,7 @@ pub fn struct_error<'a, 'gcx, 'tcx>(\n \n #[derive(Debug, Clone)]\n pub struct EvalError<'tcx> {\n-    pub kind: EvalErrorKind<'tcx, u64>,\n+    pub kind: InterpError<'tcx, u64>,\n     pub backtrace: Option<Box<Backtrace>>,\n }\n \n@@ -197,8 +197,8 @@ fn print_backtrace(backtrace: &mut Backtrace) {\n     eprintln!(\"\\n\\nAn error occurred in miri:\\n{:?}\", backtrace);\n }\n \n-impl<'tcx> From<EvalErrorKind<'tcx, u64>> for EvalError<'tcx> {\n-    fn from(kind: EvalErrorKind<'tcx, u64>) -> Self {\n+impl<'tcx> From<InterpError<'tcx, u64>> for EvalError<'tcx> {\n+    fn from(kind: InterpError<'tcx, u64>) -> Self {\n         let backtrace = match env::var(\"RUST_CTFE_BACKTRACE\") {\n             // matching RUST_BACKTRACE, we treat \"0\" the same as \"not present\".\n             Ok(ref val) if val != \"0\" => {\n@@ -221,10 +221,10 @@ impl<'tcx> From<EvalErrorKind<'tcx, u64>> for EvalError<'tcx> {\n     }\n }\n \n-pub type AssertMessage<'tcx> = EvalErrorKind<'tcx, mir::Operand<'tcx>>;\n+pub type AssertMessage<'tcx> = InterpError<'tcx, mir::Operand<'tcx>>;\n \n #[derive(Clone, RustcEncodable, RustcDecodable, HashStable)]\n-pub enum EvalErrorKind<'tcx, O> {\n+pub enum InterpError<'tcx, O> {\n     /// This variant is used by machines to signal their own errors that do not\n     /// match an existing variant.\n     MachineError(String),\n@@ -312,9 +312,9 @@ pub enum EvalErrorKind<'tcx, O> {\n \n pub type EvalResult<'tcx, T = ()> = Result<T, EvalError<'tcx>>;\n \n-impl<'tcx, O> EvalErrorKind<'tcx, O> {\n+impl<'tcx, O> InterpError<'tcx, O> {\n     pub fn description(&self) -> &str {\n-        use self::EvalErrorKind::*;\n+        use self::InterpError::*;\n         match *self {\n             MachineError(ref inner) => inner,\n             FunctionAbiMismatch(..) | FunctionArgMismatch(..) | FunctionRetMismatch(..)\n@@ -450,15 +450,15 @@ impl<'tcx> fmt::Display for EvalError<'tcx> {\n     }\n }\n \n-impl<'tcx> fmt::Display for EvalErrorKind<'tcx, u64> {\n+impl<'tcx> fmt::Display for InterpError<'tcx, u64> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"{:?}\", self)\n     }\n }\n \n-impl<'tcx, O: fmt::Debug> fmt::Debug for EvalErrorKind<'tcx, O> {\n+impl<'tcx, O: fmt::Debug> fmt::Debug for InterpError<'tcx, O> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        use self::EvalErrorKind::*;\n+        use self::InterpError::*;\n         match *self {\n             PointerOutOfBounds { ptr, check, allocation_size } => {\n                 write!(f, \"Pointer must be in-bounds{} at offset {}, but is outside bounds of \\"}, {"sha": "2c619a7a25027efd7e6128f920e700cbc8adfa2c", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c8caaca7deb27f5946bee120631805e56003269/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c8caaca7deb27f5946bee120631805e56003269/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=3c8caaca7deb27f5946bee120631805e56003269", "patch": "@@ -2,7 +2,7 @@\n \n #[macro_export]\n macro_rules! err {\n-    ($($tt:tt)*) => { Err($crate::mir::interpret::EvalErrorKind::$($tt)*.into()) };\n+    ($($tt:tt)*) => { Err($crate::mir::interpret::InterpError::$($tt)*.into()) };\n }\n \n mod error;\n@@ -11,7 +11,7 @@ mod allocation;\n mod pointer;\n \n pub use self::error::{\n-    EvalError, EvalResult, EvalErrorKind, AssertMessage, ConstEvalErr, struct_error,\n+    EvalError, EvalResult, InterpError, AssertMessage, ConstEvalErr, struct_error,\n     FrameInfo, ConstEvalRawResult, ConstEvalResult, ErrorHandled,\n };\n "}, {"sha": "a7ab0d6cb0408cca715fdcccf166a8496abcf575", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3c8caaca7deb27f5946bee120631805e56003269/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c8caaca7deb27f5946bee120631805e56003269/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=3c8caaca7deb27f5946bee120631805e56003269", "patch": "@@ -5,7 +5,7 @@\n use crate::hir::def::{CtorKind, Namespace};\n use crate::hir::def_id::DefId;\n use crate::hir::{self, HirId, InlineAsm};\n-use crate::mir::interpret::{ConstValue, EvalErrorKind, Scalar};\n+use crate::mir::interpret::{ConstValue, InterpError, Scalar};\n use crate::mir::visit::MirVisitable;\n use rustc_apfloat::ieee::{Double, Single};\n use rustc_apfloat::Float;\n@@ -3226,8 +3226,8 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n                 target,\n                 cleanup,\n             } => {\n-                let msg = if let EvalErrorKind::BoundsCheck { ref len, ref index } = *msg {\n-                    EvalErrorKind::BoundsCheck {\n+                let msg = if let InterpError::BoundsCheck { ref len, ref index } = *msg {\n+                    InterpError::BoundsCheck {\n                         len: len.fold_with(folder),\n                         index: index.fold_with(folder),\n                     }\n@@ -3301,7 +3301,7 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n                 ref cond, ref msg, ..\n             } => {\n                 if cond.visit_with(visitor) {\n-                    if let EvalErrorKind::BoundsCheck { ref len, ref index } = *msg {\n+                    if let InterpError::BoundsCheck { ref len, ref index } = *msg {\n                         len.visit_with(visitor) || index.visit_with(visitor)\n                     } else {\n                         false"}, {"sha": "4d44dc197cb783e7eb698126382a930d997a5d26", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c8caaca7deb27f5946bee120631805e56003269/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c8caaca7deb27f5946bee120631805e56003269/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=3c8caaca7deb27f5946bee120631805e56003269", "patch": "@@ -560,7 +560,7 @@ macro_rules! make_mir_visitor {\n             fn super_assert_message(&mut self,\n                                     msg: & $($mutability)? AssertMessage<'tcx>,\n                                     location: Location) {\n-                use crate::mir::interpret::EvalErrorKind::*;\n+                use crate::mir::interpret::InterpError::*;\n                 if let BoundsCheck { len, index } = msg {\n                     self.visit_operand(len, location);\n                     self.visit_operand(index, location);"}, {"sha": "53e8f7ed88b4eb5bf9ec056f970f0de68574761e", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3c8caaca7deb27f5946bee120631805e56003269/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c8caaca7deb27f5946bee120631805e56003269/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=3c8caaca7deb27f5946bee120631805e56003269", "patch": "@@ -2,7 +2,7 @@ use rustc::middle::lang_items;\n use rustc::ty::{self, Ty, TypeFoldable};\n use rustc::ty::layout::{self, LayoutOf, HasTyCtxt};\n use rustc::mir::{self, Place, PlaceBase, Static, StaticKind};\n-use rustc::mir::interpret::EvalErrorKind;\n+use rustc::mir::interpret::InterpError;\n use rustc_target::abi::call::{ArgType, FnType, PassMode, IgnoreMode};\n use rustc_target::spec::abi::Abi;\n use rustc_mir::monomorphize;\n@@ -365,7 +365,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         // checked operation, just a comparison with the minimum\n         // value, so we have to check for the assert message.\n         if !bx.check_overflow() {\n-            if let mir::interpret::EvalErrorKind::OverflowNeg = *msg {\n+            if let mir::interpret::InterpError::OverflowNeg = *msg {\n                 const_cond = Some(expected);\n             }\n         }\n@@ -400,7 +400,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n         // Put together the arguments to the panic entry point.\n         let (lang_item, args) = match *msg {\n-            EvalErrorKind::BoundsCheck { ref len, ref index } => {\n+            InterpError::BoundsCheck { ref len, ref index } => {\n                 let len = self.codegen_operand(&mut bx, len).immediate();\n                 let index = self.codegen_operand(&mut bx, index).immediate();\n "}, {"sha": "820a990c633e04f5f78dce181fe61fd45649c0ce", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c8caaca7deb27f5946bee120631805e56003269/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c8caaca7deb27f5946bee120631805e56003269/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=3c8caaca7deb27f5946bee120631805e56003269", "patch": "@@ -688,7 +688,7 @@ impl<'cx, 'gcx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx\n                 cleanup: _,\n             } => {\n                 self.consume_operand(ContextKind::Assert.new(loc), (cond, span), flow_state);\n-                use rustc::mir::interpret::EvalErrorKind::BoundsCheck;\n+                use rustc::mir::interpret::InterpError::BoundsCheck;\n                 if let BoundsCheck { ref len, ref index } = *msg {\n                     self.consume_operand(ContextKind::Assert.new(loc), (len, span), flow_state);\n                     self.consume_operand(ContextKind::Assert.new(loc), (index, span), flow_state);"}, {"sha": "9f51fb9e969c30c7e1b667fb26c36ee1b9dbd990", "filename": "src/librustc_mir/borrow_check/nll/invalidation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c8caaca7deb27f5946bee120631805e56003269/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c8caaca7deb27f5946bee120631805e56003269/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs?ref=3c8caaca7deb27f5946bee120631805e56003269", "patch": "@@ -215,7 +215,7 @@ impl<'cx, 'tcx, 'gcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx, 'gcx> {\n                 cleanup: _,\n             } => {\n                 self.consume_operand(ContextKind::Assert.new(location), cond);\n-                use rustc::mir::interpret::EvalErrorKind::BoundsCheck;\n+                use rustc::mir::interpret::InterpError::BoundsCheck;\n                 if let BoundsCheck { ref len, ref index } = *msg {\n                     self.consume_operand(ContextKind::Assert.new(location), len);\n                     self.consume_operand(ContextKind::Assert.new(location), index);"}, {"sha": "5041a7ffee258ef8c916e00b6425100ae508a7bd", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c8caaca7deb27f5946bee120631805e56003269/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c8caaca7deb27f5946bee120631805e56003269/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=3c8caaca7deb27f5946bee120631805e56003269", "patch": "@@ -28,7 +28,7 @@ use rustc::infer::canonical::QueryRegionConstraint;\n use rustc::infer::outlives::env::RegionBoundPairs;\n use rustc::infer::{InferCtxt, InferOk, LateBoundRegionConversionTime, NLLRegionVariableOrigin};\n use rustc::infer::type_variable::TypeVariableOrigin;\n-use rustc::mir::interpret::{EvalErrorKind::BoundsCheck, ConstValue};\n+use rustc::mir::interpret::{InterpError::BoundsCheck, ConstValue};\n use rustc::mir::tcx::PlaceTy;\n use rustc::mir::visit::{PlaceContext, Visitor, MutatingUseContext, NonMutatingUseContext};\n use rustc::mir::*;"}, {"sha": "f7cf09020138c7592e29e1c3972b1a25ce7b03b1", "filename": "src/librustc_mir/build/expr/as_place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c8caaca7deb27f5946bee120631805e56003269/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c8caaca7deb27f5946bee120631805e56003269/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs?ref=3c8caaca7deb27f5946bee120631805e56003269", "patch": "@@ -4,7 +4,7 @@ use crate::build::expr::category::Category;\n use crate::build::ForGuard::{OutsideGuard, RefWithinGuard};\n use crate::build::{BlockAnd, BlockAndExtension, Builder};\n use crate::hair::*;\n-use rustc::mir::interpret::EvalErrorKind::BoundsCheck;\n+use rustc::mir::interpret::InterpError::BoundsCheck;\n use rustc::mir::*;\n use rustc::ty::{CanonicalUserTypeAnnotation, Variance};\n "}, {"sha": "7289dd96edb8dcf4a733f8221984c345b7658e2a", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3c8caaca7deb27f5946bee120631805e56003269/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c8caaca7deb27f5946bee120631805e56003269/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=3c8caaca7deb27f5946bee120631805e56003269", "patch": "@@ -7,7 +7,7 @@ use crate::build::expr::category::{Category, RvalueFunc};\n use crate::build::{BlockAnd, BlockAndExtension, Builder};\n use crate::hair::*;\n use rustc::middle::region;\n-use rustc::mir::interpret::EvalErrorKind;\n+use rustc::mir::interpret::InterpError;\n use rustc::mir::*;\n use rustc::ty::{self, CanonicalUserTypeAnnotation, Ty, UpvarSubsts};\n use syntax_pos::Span;\n@@ -101,7 +101,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                         block,\n                         Operand::Move(is_min),\n                         false,\n-                        EvalErrorKind::OverflowNeg,\n+                        InterpError::OverflowNeg,\n                         expr_span,\n                     );\n                 }\n@@ -433,7 +433,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             let val = result_value.clone().field(val_fld, ty);\n             let of = result_value.field(of_fld, bool_ty);\n \n-            let err = EvalErrorKind::Overflow(op);\n+            let err = InterpError::Overflow(op);\n \n             block = self.assert(block, Operand::Move(of), false, err, span);\n \n@@ -444,9 +444,9 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 // and 2. there are two possible failure cases, divide-by-zero and overflow.\n \n                 let (zero_err, overflow_err) = if op == BinOp::Div {\n-                    (EvalErrorKind::DivisionByZero, EvalErrorKind::Overflow(op))\n+                    (InterpError::DivisionByZero, InterpError::Overflow(op))\n                 } else {\n-                    (EvalErrorKind::RemainderByZero, EvalErrorKind::Overflow(op))\n+                    (InterpError::RemainderByZero, InterpError::Overflow(op))\n                 };\n \n                 // Check for / 0"}, {"sha": "33715b749f9942b5100886409688be9dd51c076d", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3c8caaca7deb27f5946bee120631805e56003269/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c8caaca7deb27f5946bee120631805e56003269/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=3c8caaca7deb27f5946bee120631805e56003269", "patch": "@@ -23,7 +23,7 @@ use syntax::source_map::{Span, DUMMY_SP};\n use crate::interpret::{self,\n     PlaceTy, MPlaceTy, MemPlace, OpTy, ImmTy, Immediate, Scalar, Pointer,\n     RawConst, ConstValue,\n-    EvalResult, EvalError, EvalErrorKind, GlobalId, InterpretCx, StackPopCleanup,\n+    EvalResult, EvalError, InterpError, GlobalId, InterpretCx, StackPopCleanup,\n     Allocation, AllocId, MemoryKind,\n     snapshot, RefTracking,\n };\n@@ -173,7 +173,7 @@ fn eval_body_using_ecx<'mir, 'tcx>(\n \n impl<'tcx> Into<EvalError<'tcx>> for ConstEvalError {\n     fn into(self) -> EvalError<'tcx> {\n-        EvalErrorKind::MachineError(self.to_string()).into()\n+        InterpError::MachineError(self.to_string()).into()\n     }\n }\n \n@@ -351,7 +351,7 @@ impl<'a, 'mir, 'tcx> interpret::Machine<'a, 'mir, 'tcx>\n         Ok(Some(match ecx.load_mir(instance.def) {\n             Ok(mir) => mir,\n             Err(err) => {\n-                if let EvalErrorKind::NoMirFor(ref path) = err.kind {\n+                if let InterpError::NoMirFor(ref path) = err.kind {\n                     return Err(\n                         ConstEvalError::NeedsRfc(format!(\"calling extern function `{}`\", path))\n                             .into(),\n@@ -679,7 +679,7 @@ pub fn const_eval_raw_provider<'a, 'tcx>(\n                 // any other kind of error will be reported to the user as a deny-by-default lint\n                 _ => if let Some(p) = cid.promoted {\n                     let span = tcx.optimized_mir(def_id).promoted[p].span;\n-                    if let EvalErrorKind::ReferencedConstant = err.error {\n+                    if let InterpError::ReferencedConstant = err.error {\n                         err.report_as_error(\n                             tcx.at(span),\n                             \"evaluation of constant expression failed\","}, {"sha": "5056d79bec4b1c0dc92e41799bc747faf09c6a2d", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c8caaca7deb27f5946bee120631805e56003269/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c8caaca7deb27f5946bee120631805e56003269/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=3c8caaca7deb27f5946bee120631805e56003269", "patch": "@@ -4,7 +4,7 @@ use syntax::ast::{FloatTy, IntTy, UintTy};\n \n use rustc_apfloat::ieee::{Single, Double};\n use rustc::mir::interpret::{\n-    Scalar, EvalResult, Pointer, PointerArithmetic, EvalErrorKind, truncate\n+    Scalar, EvalResult, Pointer, PointerArithmetic, InterpError, truncate\n };\n use rustc::mir::CastKind;\n use rustc_apfloat::Float;\n@@ -85,7 +85,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n                             self.param_env,\n                             def_id,\n                             substs,\n-                        ).ok_or_else(|| EvalErrorKind::TooGeneric.into());\n+                        ).ok_or_else(|| InterpError::TooGeneric.into());\n                         let fn_ptr = self.memory.create_fn_alloc(instance?).with_default_tag();\n                         self.write_scalar(Scalar::Ptr(fn_ptr.into()), dest)?;\n                     }"}, {"sha": "535fc58299bc4bfd37f067c579890fbb75ddb37b", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3c8caaca7deb27f5946bee120631805e56003269/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c8caaca7deb27f5946bee120631805e56003269/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=3c8caaca7deb27f5946bee120631805e56003269", "patch": "@@ -16,7 +16,7 @@ use rustc_data_structures::indexed_vec::IndexVec;\n use rustc::mir::interpret::{\n     ErrorHandled,\n     GlobalId, Scalar, FrameInfo, AllocId,\n-    EvalResult, EvalErrorKind,\n+    EvalResult, InterpError,\n     truncate, sign_extend,\n };\n use rustc_data_structures::fx::FxHashMap;\n@@ -167,7 +167,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> LayoutOf\n     #[inline]\n     fn layout_of(&self, ty: Ty<'tcx>) -> Self::TyLayout {\n         self.tcx.layout_of(self.param_env.and(ty))\n-            .map_err(|layout| EvalErrorKind::Layout(layout).into())\n+            .map_err(|layout| InterpError::Layout(layout).into())\n     }\n }\n \n@@ -255,7 +255,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tc\n             self.param_env,\n             def_id,\n             substs,\n-        ).ok_or_else(|| EvalErrorKind::TooGeneric.into())\n+        ).ok_or_else(|| InterpError::TooGeneric.into())\n     }\n \n     pub fn type_is_sized(&self, ty: Ty<'tcx>) -> bool {\n@@ -647,8 +647,8 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tc\n         // `Memory::get_static_alloc` which has to use `const_eval_raw` to avoid cycles.\n         let val = self.tcx.const_eval_raw(param_env.and(gid)).map_err(|err| {\n             match err {\n-                ErrorHandled::Reported => EvalErrorKind::ReferencedConstant,\n-                ErrorHandled::TooGeneric => EvalErrorKind::TooGeneric,\n+                ErrorHandled::Reported => InterpError::ReferencedConstant,\n+                ErrorHandled::TooGeneric => InterpError::TooGeneric,\n             }\n         })?;\n         self.raw_const_to_mplace(val)\n@@ -670,7 +670,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tc\n \n                 match self.stack[frame].locals[local].access() {\n                     Err(err) => {\n-                        if let EvalErrorKind::DeadLocal = err.kind {\n+                        if let InterpError::DeadLocal = err.kind {\n                             write!(msg, \" is dead\").unwrap();\n                         } else {\n                             panic!(\"Failed to access local: {:?}\", err);"}, {"sha": "d9721a8cadff9ff55547136b492fb8a231770074", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3c8caaca7deb27f5946bee120631805e56003269/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c8caaca7deb27f5946bee120631805e56003269/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=3c8caaca7deb27f5946bee120631805e56003269", "patch": "@@ -7,7 +7,7 @@ use rustc::ty;\n use rustc::ty::layout::{LayoutOf, Primitive, Size};\n use rustc::mir::BinOp;\n use rustc::mir::interpret::{\n-    EvalResult, EvalErrorKind, Scalar,\n+    EvalResult, InterpError, Scalar,\n };\n \n use super::{\n@@ -87,7 +87,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n                 let bits = self.read_scalar(args[0])?.to_bits(layout_of.size)?;\n                 let kind = match layout_of.abi {\n                     ty::layout::Abi::Scalar(ref scalar) => scalar.value,\n-                    _ => Err(::rustc::mir::interpret::EvalErrorKind::TypeNotPrimitive(ty))?,\n+                    _ => Err(::rustc::mir::interpret::InterpError::TypeNotPrimitive(ty))?,\n                 };\n                 let out_val = if intrinsic_name.ends_with(\"_nonzero\") {\n                     if bits == 0 {\n@@ -248,7 +248,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n             let file = Symbol::intern(self.read_str(file_place)?);\n             let line = self.read_scalar(line.into())?.to_u32()?;\n             let col = self.read_scalar(col.into())?.to_u32()?;\n-            return Err(EvalErrorKind::Panic { msg, file, line, col }.into());\n+            return Err(InterpError::Panic { msg, file, line, col }.into());\n         } else if Some(def_id) == self.tcx.lang_items().begin_panic_fn() {\n             assert!(args.len() == 2);\n             // &'static str, &(&'static str, u32, u32)\n@@ -266,7 +266,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n             let file = Symbol::intern(self.read_str(file_place)?);\n             let line = self.read_scalar(line.into())?.to_u32()?;\n             let col = self.read_scalar(col.into())?.to_u32()?;\n-            return Err(EvalErrorKind::Panic { msg, file, line, col }.into());\n+            return Err(InterpError::Panic { msg, file, line, col }.into());\n         } else {\n             return Ok(false);\n         }"}, {"sha": "e5d8341dfcf6d81bdd10f4d542c642c16bcb9219", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3c8caaca7deb27f5946bee120631805e56003269/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c8caaca7deb27f5946bee120631805e56003269/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=3c8caaca7deb27f5946bee120631805e56003269", "patch": "@@ -19,7 +19,7 @@ use syntax::ast::Mutability;\n \n use super::{\n     Pointer, AllocId, Allocation, GlobalId, AllocationExtra,\n-    EvalResult, Scalar, EvalErrorKind, AllocKind, PointerArithmetic,\n+    EvalResult, Scalar, InterpError, AllocKind, PointerArithmetic,\n     Machine, AllocMap, MayLeak, ErrorHandled, InboundsCheck,\n };\n \n@@ -344,8 +344,8 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n             // no need to report anything, the const_eval call takes care of that for statics\n             assert!(tcx.is_static(def_id).is_some());\n             match err {\n-                ErrorHandled::Reported => EvalErrorKind::ReferencedConstant.into(),\n-                ErrorHandled::TooGeneric => EvalErrorKind::TooGeneric.into(),\n+                ErrorHandled::Reported => InterpError::ReferencedConstant.into(),\n+                ErrorHandled::TooGeneric => InterpError::TooGeneric.into(),\n             }\n         }).map(|raw_const| {\n             let allocation = tcx.alloc_map.lock().unwrap_memory(raw_const.alloc_id);\n@@ -458,7 +458,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n         trace!(\"reading fn ptr: {}\", ptr.alloc_id);\n         match self.tcx.alloc_map.lock().get(ptr.alloc_id) {\n             Some(AllocKind::Function(instance)) => Ok(instance),\n-            _ => Err(EvalErrorKind::ExecuteMemory.into()),\n+            _ => Err(InterpError::ExecuteMemory.into()),\n         }\n     }\n "}, {"sha": "7ea56e3647437c54e9baba72bf7e86b75f7ebf3f", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3c8caaca7deb27f5946bee120631805e56003269/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c8caaca7deb27f5946bee120631805e56003269/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=3c8caaca7deb27f5946bee120631805e56003269", "patch": "@@ -9,7 +9,7 @@ use rustc::ty::layout::{self, Size, LayoutOf, TyLayout, HasDataLayout, IntegerEx\n use rustc::mir::interpret::{\n     GlobalId, AllocId, InboundsCheck,\n     ConstValue, Pointer, Scalar,\n-    EvalResult, EvalErrorKind,\n+    EvalResult, InterpError,\n     sign_extend, truncate,\n };\n use super::{\n@@ -369,7 +369,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n         let len = mplace.len(self)?;\n         let bytes = self.memory.read_bytes(mplace.ptr, Size::from_bytes(len as u64))?;\n         let str = ::std::str::from_utf8(bytes)\n-            .map_err(|err| EvalErrorKind::ValidationFailure(err.to_string()))?;\n+            .map_err(|err| InterpError::ValidationFailure(err.to_string()))?;\n         Ok(str)\n     }\n \n@@ -653,7 +653,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n                     .expect(\"tagged layout for non adt\")\n                     .discriminants(self.tcx.tcx)\n                     .find(|(_, var)| var.val == real_discr)\n-                    .ok_or_else(|| EvalErrorKind::InvalidDiscriminant(raw_discr.erase_tag()))?;\n+                    .ok_or_else(|| InterpError::InvalidDiscriminant(raw_discr.erase_tag()))?;\n                 (real_discr, index.0)\n             },\n             layout::DiscriminantKind::Niche {"}, {"sha": "39054e359a4cc7100f91616ab4202b4e03b92af6", "filename": "src/librustc_mir/interpret/snapshot.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c8caaca7deb27f5946bee120631805e56003269/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c8caaca7deb27f5946bee120631805e56003269/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs?ref=3c8caaca7deb27f5946bee120631805e56003269", "patch": "@@ -12,7 +12,7 @@ use rustc::mir;\n use rustc::mir::interpret::{\n     AllocId, Pointer, Scalar,\n     Relocations, Allocation, UndefMask,\n-    EvalResult, EvalErrorKind,\n+    EvalResult, InterpError,\n };\n \n use rustc::ty::{self, TyCtxt};\n@@ -78,7 +78,7 @@ impl<'a, 'mir, 'tcx> InfiniteLoopDetector<'a, 'mir, 'tcx>\n         }\n \n         // Second cycle\n-        Err(EvalErrorKind::InfiniteLoop.into())\n+        Err(InterpError::InfiniteLoop.into())\n     }\n }\n "}, {"sha": "2080a329bb06fc1c026a8de062195b0a61a8e9e2", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3c8caaca7deb27f5946bee120631805e56003269/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c8caaca7deb27f5946bee120631805e56003269/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=3c8caaca7deb27f5946bee120631805e56003269", "patch": "@@ -5,7 +5,7 @@ use rustc::ty::layout::{self, TyLayout, LayoutOf};\n use syntax::source_map::Span;\n use rustc_target::spec::abi::Abi;\n \n-use rustc::mir::interpret::{EvalResult, PointerArithmetic, EvalErrorKind, Scalar};\n+use rustc::mir::interpret::{EvalResult, PointerArithmetic, InterpError, Scalar};\n use super::{\n     InterpretCx, Machine, Immediate, OpTy, ImmTy, PlaceTy, MPlaceTy, StackPopCleanup\n };\n@@ -134,7 +134,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n                     self.goto_block(Some(target))?;\n                 } else {\n                     // Compute error message\n-                    use rustc::mir::interpret::EvalErrorKind::*;\n+                    use rustc::mir::interpret::InterpError::*;\n                     return match *msg {\n                         BoundsCheck { ref len, ref index } => {\n                             let len = self.read_immediate(self.eval_operand(len, None)?)\n@@ -212,7 +212,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n             return Ok(());\n         }\n         let caller_arg = caller_arg.next()\n-            .ok_or_else(|| EvalErrorKind::FunctionArgCountMismatch)?;\n+            .ok_or_else(|| InterpError::FunctionArgCountMismatch)?;\n         if rust_abi {\n             debug_assert!(!caller_arg.layout.is_zst(), \"ZSTs must have been already filtered out\");\n         }"}, {"sha": "d4cf906619d8917307405d73a1acf531336821fc", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3c8caaca7deb27f5946bee120631805e56003269/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c8caaca7deb27f5946bee120631805e56003269/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=3c8caaca7deb27f5946bee120631805e56003269", "patch": "@@ -7,7 +7,7 @@ use rustc::ty::layout::{self, Size, Align, TyLayout, LayoutOf, VariantIdx};\n use rustc::ty;\n use rustc_data_structures::fx::FxHashSet;\n use rustc::mir::interpret::{\n-    Scalar, AllocKind, EvalResult, EvalErrorKind,\n+    Scalar, AllocKind, EvalResult, InterpError,\n };\n \n use super::{\n@@ -258,11 +258,11 @@ impl<'rt, 'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>>\n         match self.walk_value(op) {\n             Ok(()) => Ok(()),\n             Err(err) => match err.kind {\n-                EvalErrorKind::InvalidDiscriminant(val) =>\n+                InterpError::InvalidDiscriminant(val) =>\n                     validation_failure!(\n                         val, self.path, \"a valid enum discriminant\"\n                     ),\n-                EvalErrorKind::ReadPointerAsBytes =>\n+                InterpError::ReadPointerAsBytes =>\n                     validation_failure!(\n                         \"a pointer\", self.path, \"plain (non-pointer) bytes\"\n                     ),\n@@ -355,9 +355,9 @@ impl<'rt, 'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>>\n                     Err(err) => {\n                         error!(\"{:?} is not aligned to {:?}\", ptr, align);\n                         match err.kind {\n-                            EvalErrorKind::InvalidNullPointerUsage =>\n+                            InterpError::InvalidNullPointerUsage =>\n                                 return validation_failure!(\"NULL reference\", self.path),\n-                            EvalErrorKind::AlignmentCheckFailed { required, has } =>\n+                            InterpError::AlignmentCheckFailed { required, has } =>\n                                 return validation_failure!(format!(\"unaligned reference \\\n                                     (required {} byte alignment but found {})\",\n                                     required.bytes(), has.bytes()), self.path),\n@@ -562,7 +562,7 @@ impl<'rt, 'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>>\n                     Err(err) => {\n                         // For some errors we might be able to provide extra information\n                         match err.kind {\n-                            EvalErrorKind::ReadUndefBytes(offset) => {\n+                            InterpError::ReadUndefBytes(offset) => {\n                                 // Some byte was undefined, determine which\n                                 // element that byte belongs to so we can\n                                 // provide an index."}, {"sha": "0d43602d89986c732e3486ca0bc07d0aaa9eab22", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3c8caaca7deb27f5946bee120631805e56003269/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c8caaca7deb27f5946bee120631805e56003269/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=3c8caaca7deb27f5946bee120631805e56003269", "patch": "@@ -7,7 +7,7 @@ use rustc::mir::{Constant, Location, Place, PlaceBase, Mir, Operand, Rvalue, Loc\n use rustc::mir::{NullOp, UnOp, StatementKind, Statement, BasicBlock, LocalKind, Static, StaticKind};\n use rustc::mir::{TerminatorKind, ClearCrossCrate, SourceInfo, BinOp, ProjectionElem};\n use rustc::mir::visit::{Visitor, PlaceContext, MutatingUseContext, NonMutatingUseContext};\n-use rustc::mir::interpret::{EvalErrorKind, Scalar, GlobalId, EvalResult};\n+use rustc::mir::interpret::{InterpError, Scalar, GlobalId, EvalResult};\n use rustc::ty::{TyCtxt, self, Instance};\n use syntax::source_map::{Span, DUMMY_SP};\n use rustc::ty::subst::InternalSubsts;\n@@ -144,7 +144,7 @@ impl<'a, 'mir, 'tcx> ConstPropagator<'a, 'mir, 'tcx> {\n             Ok(val) => Some(val),\n             Err(error) => {\n                 let diagnostic = error_to_const_error(&self.ecx, error);\n-                use rustc::mir::interpret::EvalErrorKind::*;\n+                use rustc::mir::interpret::InterpError::*;\n                 match diagnostic.error {\n                     // don't report these, they make no sense in a const prop context\n                     | MachineError(_)\n@@ -457,7 +457,7 @@ impl<'a, 'mir, 'tcx> ConstPropagator<'a, 'mir, 'tcx> {\n                     )\n                 } else {\n                     if overflow {\n-                        let err = EvalErrorKind::Overflow(op).into();\n+                        let err = InterpError::Overflow(op).into();\n                         let _: Option<()> = self.use_ecx(source_info, |_| Err(err));\n                         return None;\n                     }\n@@ -611,7 +611,7 @@ impl<'b, 'a, 'tcx> Visitor<'tcx> for ConstPropagator<'b, 'a, 'tcx> {\n                         .hir()\n                         .as_local_hir_id(self.source.def_id())\n                         .expect(\"some part of a failing const eval must be local\");\n-                    use rustc::mir::interpret::EvalErrorKind::*;\n+                    use rustc::mir::interpret::InterpError::*;\n                     let msg = match msg {\n                         Overflow(_) |\n                         OverflowNeg |"}, {"sha": "e63c1899fe583ecae177cb72cbcf24f3a54294d4", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c8caaca7deb27f5946bee120631805e56003269/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c8caaca7deb27f5946bee120631805e56003269/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=3c8caaca7deb27f5946bee120631805e56003269", "patch": "@@ -773,7 +773,7 @@ fn create_generator_resume_function<'a, 'tcx>(\n \n     let mut cases = create_cases(mir, &transform, |point| Some(point.resume));\n \n-    use rustc::mir::interpret::EvalErrorKind::{\n+    use rustc::mir::interpret::InterpError::{\n         GeneratorResumedAfterPanic,\n         GeneratorResumedAfterReturn,\n     };"}]}