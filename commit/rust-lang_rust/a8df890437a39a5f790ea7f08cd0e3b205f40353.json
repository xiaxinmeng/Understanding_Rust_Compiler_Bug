{"sha": "a8df890437a39a5f790ea7f08cd0e3b205f40353", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4ZGY4OTA0MzdhMzlhNWY3OTBlYTdmMDhjZDBlM2IyMDVmNDAzNTM=", "commit": {"author": {"name": "Nathan Kleyn", "email": "nathan@nathankleyn.com", "date": "2016-03-08T22:44:40Z"}, "committer": {"name": "Nathan Kleyn", "email": "nathan@nathankleyn.com", "date": "2016-03-08T22:44:40Z"}, "message": "Add missing documentation examples for BTreeMap.\n\nAs part of the ongoing effort to document all methods with examples,\nthis commit adds the missing examples for the `BTreeMap` collection\ntype.\n\nThis is part of issue #29348.", "tree": {"sha": "48e96455572d0271f29c82ddb1955b9612330d3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48e96455572d0271f29c82ddb1955b9612330d3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8df890437a39a5f790ea7f08cd0e3b205f40353", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8df890437a39a5f790ea7f08cd0e3b205f40353", "html_url": "https://github.com/rust-lang/rust/commit/a8df890437a39a5f790ea7f08cd0e3b205f40353", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8df890437a39a5f790ea7f08cd0e3b205f40353/comments", "author": {"login": "nathankleyn", "id": 220826, "node_id": "MDQ6VXNlcjIyMDgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/220826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nathankleyn", "html_url": "https://github.com/nathankleyn", "followers_url": "https://api.github.com/users/nathankleyn/followers", "following_url": "https://api.github.com/users/nathankleyn/following{/other_user}", "gists_url": "https://api.github.com/users/nathankleyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/nathankleyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nathankleyn/subscriptions", "organizations_url": "https://api.github.com/users/nathankleyn/orgs", "repos_url": "https://api.github.com/users/nathankleyn/repos", "events_url": "https://api.github.com/users/nathankleyn/events{/privacy}", "received_events_url": "https://api.github.com/users/nathankleyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nathankleyn", "id": 220826, "node_id": "MDQ6VXNlcjIyMDgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/220826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nathankleyn", "html_url": "https://github.com/nathankleyn", "followers_url": "https://api.github.com/users/nathankleyn/followers", "following_url": "https://api.github.com/users/nathankleyn/following{/other_user}", "gists_url": "https://api.github.com/users/nathankleyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/nathankleyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nathankleyn/subscriptions", "organizations_url": "https://api.github.com/users/nathankleyn/orgs", "repos_url": "https://api.github.com/users/nathankleyn/repos", "events_url": "https://api.github.com/users/nathankleyn/events{/privacy}", "received_events_url": "https://api.github.com/users/nathankleyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f0479b2a5fc16814b68efe9e87dddf231b8941d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f0479b2a5fc16814b68efe9e87dddf231b8941d", "html_url": "https://github.com/rust-lang/rust/commit/8f0479b2a5fc16814b68efe9e87dddf231b8941d"}], "stats": {"total": 76, "additions": 76, "deletions": 0}, "files": [{"sha": "107a9d415a52a560d40565f44440b1eaa01fd9c8", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/a8df890437a39a5f790ea7f08cd0e3b205f40353/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8df890437a39a5f790ea7f08cd0e3b205f40353/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=a8df890437a39a5f790ea7f08cd0e3b205f40353", "patch": "@@ -58,6 +58,74 @@ use self::Entry::*;\n /// It is a logic error for a key to be modified in such a way that the key's ordering relative to\n /// any other key, as determined by the `Ord` trait, changes while it is in the map. This is\n /// normally only possible through `Cell`, `RefCell`, global state, I/O, or unsafe code.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// use std::collections::BTreeMap;\n+///\n+/// // type inference lets us omit an explicit type signature (which\n+/// // would be `BTreeMap<&str, &str>` in this example).\n+/// let mut movie_reviews = BTreeMap::new();\n+///\n+/// // review some books.\n+/// movie_reviews.insert(\"Office Space\",       \"Deals with real issues in the workplace.\");\n+/// movie_reviews.insert(\"Pulp Fiction\",       \"Masterpiece.\");\n+/// movie_reviews.insert(\"The Godfather\",      \"Very enjoyable.\");\n+/// movie_reviews.insert(\"The Blues Brothers\", \"Eye lyked it alot.\");\n+///\n+/// // check for a specific one.\n+/// if !movie_reviews.contains_key(\"Les Mis\u00e9rables\") {\n+///     println!(\"We've got {} reviews, but Les Mis\u00e9rables ain't one.\",\n+///              movie_reviews.len());\n+/// }\n+///\n+/// // oops, this review has a lot of spelling mistakes, let's delete it.\n+/// movie_reviews.remove(\"The Blues Brothers\");\n+///\n+/// // look up the values associated with some keys.\n+/// let to_find = [\"Up!\", \"Office Space\"];\n+/// for book in &to_find {\n+///     match movie_reviews.get(book) {\n+///        Some(review) => println!(\"{}: {}\", book, review),\n+///        None => println!(\"{} is unreviewed.\", book)\n+///     }\n+/// }\n+///\n+/// // iterate over everything.\n+/// for (movie, review) in &movie_reviews {\n+///     println!(\"{}: \\\"{}\\\"\", movie, review);\n+/// }\n+/// ```\n+///\n+/// `BTreeMap` also implements an [`Entry API`](#method.entry), which allows\n+/// for more complex methods of getting, setting, updating and removing keys and\n+/// their values:\n+///\n+/// ```\n+/// use std::collections::BTreeMap;\n+///\n+/// // type inference lets us omit an explicit type signature (which\n+/// // would be `BTreeMap<&str, u8>` in this example).\n+/// let mut player_stats = BTreeMap::new();\n+///\n+/// fn random_stat_buff() -> u8 {\n+///     // could actually return some random value here - let's just return\n+///     // some fixed value for now\n+///     42\n+/// }\n+///\n+/// // insert a key only if it doesn't already exist\n+/// player_stats.entry(\"health\").or_insert(100);\n+///\n+/// // insert a key using a function that provides a new value only if it\n+/// // doesn't already exist\n+/// player_stats.entry(\"defence\").or_insert_with(random_stat_buff);\n+///\n+/// // update a key, guarding against the key possibly not being set\n+/// let stat = player_stats.entry(\"attack\").or_insert(100);\n+/// *stat += random_stat_buff();\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct BTreeMap<K, V> {\n     root: node::Root<K, V>,\n@@ -276,6 +344,14 @@ pub struct OccupiedEntry<'a, K: 'a, V: 'a> {\n \n impl<K: Ord, V> BTreeMap<K, V> {\n     /// Makes a new empty BTreeMap with a reasonable choice for B.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::BTreeMap;\n+    ///\n+    /// let mut map: BTreeMap<&str, isize> = BTreeMap::new();\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new() -> BTreeMap<K, V> {\n         BTreeMap {"}]}