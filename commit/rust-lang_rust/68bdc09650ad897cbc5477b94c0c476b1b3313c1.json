{"sha": "68bdc09650ad897cbc5477b94c0c476b1b3313c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4YmRjMDk2NTBhZDg5N2NiYzU0NzdiOTRjMGM0NzZiMWIzMzEzYzE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-10T19:17:56Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-10T19:18:47Z"}, "message": "rustc: Allow @fn to be used as a synonym for fn@, and likewise with ~ and &", "tree": {"sha": "d7daa940959922db09a3033d0058aba0bbc68e41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7daa940959922db09a3033d0058aba0bbc68e41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68bdc09650ad897cbc5477b94c0c476b1b3313c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68bdc09650ad897cbc5477b94c0c476b1b3313c1", "html_url": "https://github.com/rust-lang/rust/commit/68bdc09650ad897cbc5477b94c0c476b1b3313c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68bdc09650ad897cbc5477b94c0c476b1b3313c1/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2082a979e72a79508f9b5f035002cf070be04301", "url": "https://api.github.com/repos/rust-lang/rust/commits/2082a979e72a79508f9b5f035002cf070be04301", "html_url": "https://github.com/rust-lang/rust/commit/2082a979e72a79508f9b5f035002cf070be04301"}], "stats": {"total": 34, "additions": 29, "deletions": 5}, "files": [{"sha": "124c5154a4641dfd62481bfc7879977121179209", "filename": "src/rustc/middle/typeck/astconv.rs", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/68bdc09650ad897cbc5477b94c0c476b1b3313c1/src%2Frustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68bdc09650ad897cbc5477b94c0c476b1b3313c1/src%2Frustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=68bdc09650ad897cbc5477b94c0c476b1b3313c1", "patch": "@@ -161,10 +161,11 @@ fn ast_ty_to_ty<AC: ast_conv, RS: region_scope copy owned>(\n     }\n \n     // Handle @, ~, and & being able to mean estrs and evecs.\n-    // If a_seq_ty is a str or a vec, make it an estr/evec\n+    // If a_seq_ty is a str or a vec, make it an estr/evec.\n+    // Also handle function sigils.\n     fn mk_maybe_vstore<AC: ast_conv, RS: region_scope copy owned>(\n         self: AC, rscope: RS, a_seq_ty: ast::mt, vst: ty::vstore,\n-        constr: fn(ty::mt) -> ty::t) -> ty::t {\n+        span: span, constr: fn(ty::mt) -> ty::t) -> ty::t {\n \n         let tcx = self.tcx();\n \n@@ -183,6 +184,25 @@ fn ast_ty_to_ty<AC: ast_conv, RS: region_scope copy owned>(\n               _ => ()\n             }\n           }\n+          ast::ty_fn(ast::proto_block, ast_bounds, ast_fn_decl) => {\n+            let new_proto;\n+            match vst {\n+                ty::vstore_fixed(_) => {\n+                    tcx.sess.span_err(span, ~\"fixed-length functions are not \\\n+                                              allowed\");\n+                    new_proto = ast::proto_block;\n+                }\n+                ty::vstore_uniq => new_proto = ast::proto_uniq,\n+                ty::vstore_box => new_proto = ast::proto_box,\n+                ty::vstore_slice(_) => new_proto = ast::proto_block\n+            }\n+\n+            // Run through the normal function type conversion process.\n+            let bounds = collect::compute_bounds(self.ccx(), ast_bounds);\n+            let fn_decl = ty_of_fn_decl(self, rscope, new_proto, bounds,\n+                                        ast_fn_decl, none);\n+            return ty::mk_fn(tcx, fn_decl);\n+          }\n           _ => ()\n         }\n \n@@ -227,11 +247,11 @@ fn ast_ty_to_ty<AC: ast_conv, RS: region_scope copy owned>(\n       ast::ty_nil => ty::mk_nil(tcx),\n       ast::ty_bot => ty::mk_bot(tcx),\n       ast::ty_box(mt) => {\n-        mk_maybe_vstore(self, rscope, mt, ty::vstore_box,\n+        mk_maybe_vstore(self, rscope, mt, ty::vstore_box, ast_ty.span,\n                         |tmt| ty::mk_box(tcx, tmt))\n       }\n       ast::ty_uniq(mt) => {\n-        mk_maybe_vstore(self, rscope, mt, ty::vstore_uniq,\n+        mk_maybe_vstore(self, rscope, mt, ty::vstore_uniq, ast_ty.span,\n                         |tmt| ty::mk_uniq(tcx, tmt))\n       }\n       ast::ty_vec(mt) => {\n@@ -246,8 +266,11 @@ fn ast_ty_to_ty<AC: ast_conv, RS: region_scope copy owned>(\n       }\n       ast::ty_rptr(region, mt) => {\n         let r = ast_region_to_region(self, rscope, ast_ty.span, region);\n-        mk_maybe_vstore(self, in_anon_rscope(rscope, r), mt,\n+        mk_maybe_vstore(self,\n+                        in_anon_rscope(rscope, r),\n+                        mt,\n                         ty::vstore_slice(r),\n+                        ast_ty.span,\n                         |tmt| ty::mk_rptr(tcx, r, tmt))\n       }\n       ast::ty_tup(fields) => {\n@@ -322,6 +345,7 @@ fn ast_ty_to_ty<AC: ast_conv, RS: region_scope copy owned>(\n       ast::ty_fixed_length(a_t, some(u)) => {\n         mk_maybe_vstore(self, rscope, {ty: a_t, mutbl: ast::m_imm},\n                         ty::vstore_fixed(u),\n+                        ast_ty.span,\n                         |ty| {\n                             tcx.sess.span_err(\n                                 a_t.span,"}]}