{"sha": "1f370d9437795d8ad8382d106b3e55715ab0d251", "node_id": "C_kwDOAAsO6NoAKDFmMzcwZDk0Mzc3OTVkOGFkODM4MmQxMDZiM2U1NTcxNWFiMGQyNTE", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-08-27T12:36:14Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-09-13T17:18:23Z"}, "message": "Use tcx.hir() utils for spans in MIR building.\n\nThis corrects the `span_with_body` in the case of closures, which was\nincorrectly shortened to the `def_span`.", "tree": {"sha": "ae68de723bb430c47a8036c0638b5a0430d71e34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae68de723bb430c47a8036c0638b5a0430d71e34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f370d9437795d8ad8382d106b3e55715ab0d251", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f370d9437795d8ad8382d106b3e55715ab0d251", "html_url": "https://github.com/rust-lang/rust/commit/1f370d9437795d8ad8382d106b3e55715ab0d251", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f370d9437795d8ad8382d106b3e55715ab0d251/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffe20d61d662fd5a32505a9b9f5258207351e00b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffe20d61d662fd5a32505a9b9f5258207351e00b", "html_url": "https://github.com/rust-lang/rust/commit/ffe20d61d662fd5a32505a9b9f5258207351e00b"}], "stats": {"total": 650, "additions": 352, "deletions": 298}, "files": [{"sha": "8d4c38d3a8e8c3bf8944de3d40f52982608d7aaf", "filename": "compiler/rustc_borrowck/src/diagnostics/move_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f370d9437795d8ad8382d106b3e55715ab0d251/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f370d9437795d8ad8382d106b3e55715ab0d251/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs?ref=1f370d9437795d8ad8382d106b3e55715ab0d251", "patch": "@@ -360,7 +360,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n \n                 diag.span_label(upvar_span, \"captured outer variable\");\n                 diag.span_label(\n-                    self.body.span,\n+                    self.infcx.tcx.def_span(def_id),\n                     format!(\"captured by this `{closure_kind}` closure\"),\n                 );\n "}, {"sha": "6b5014fa9099706786a5a0d95860df421839e483", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f370d9437795d8ad8382d106b3e55715ab0d251/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f370d9437795d8ad8382d106b3e55715ab0d251/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=1f370d9437795d8ad8382d106b3e55715ab0d251", "patch": "@@ -970,6 +970,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n \n         let hir = self.infcx.tcx.hir();\n         let closure_id = self.mir_hir_id();\n+        let closure_span = self.infcx.tcx.def_span(self.mir_def_id());\n         let fn_call_id = hir.get_parent_node(closure_id);\n         let node = hir.get(fn_call_id);\n         let def_id = hir.enclosing_body_owner(fn_call_id);\n@@ -1021,7 +1022,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 if let Some(span) = arg {\n                     err.span_label(span, \"change this to accept `FnMut` instead of `Fn`\");\n                     err.span_label(func.span, \"expects `Fn` instead of `FnMut`\");\n-                    err.span_label(self.body.span, \"in this closure\");\n+                    err.span_label(closure_span, \"in this closure\");\n                     look_at_return = false;\n                 }\n             }\n@@ -1047,7 +1048,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                         sig.decl.output.span(),\n                         \"change this to return `FnMut` instead of `Fn`\",\n                     );\n-                    err.span_label(self.body.span, \"in this closure\");\n+                    err.span_label(closure_span, \"in this closure\");\n                 }\n                 _ => {}\n             }"}, {"sha": "935827784d367605f4a3b75dcf970de2dc1cc88e", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 16, "deletions": 43, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/1f370d9437795d8ad8382d106b3e55715ab0d251/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f370d9437795d8ad8382d106b3e55715ab0d251/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=1f370d9437795d8ad8382d106b3e55715ab0d251", "patch": "@@ -68,50 +68,25 @@ fn mir_build(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -> Body<'_\n     }\n \n     // Figure out what primary body this item has.\n-    let (body_id, return_ty_span, span_with_body) = match tcx.hir().get(id) {\n-        Node::Expr(hir::Expr {\n-            kind: hir::ExprKind::Closure(hir::Closure { fn_decl, body, .. }),\n-            ..\n-        }) => (*body, fn_decl.output.span(), None),\n-        Node::Item(hir::Item {\n-            kind: hir::ItemKind::Fn(hir::FnSig { decl, .. }, _, body_id),\n-            span,\n-            ..\n-        })\n-        | Node::ImplItem(hir::ImplItem {\n-            kind: hir::ImplItemKind::Fn(hir::FnSig { decl, .. }, body_id),\n-            span,\n-            ..\n-        })\n-        | Node::TraitItem(hir::TraitItem {\n-            kind: hir::TraitItemKind::Fn(hir::FnSig { decl, .. }, hir::TraitFn::Provided(body_id)),\n-            span,\n-            ..\n-        }) => {\n-            // Use the `Span` of the `Item/ImplItem/TraitItem` as the body span,\n-            // since the def span of a function does not include the body\n-            (*body_id, decl.output.span(), Some(*span))\n-        }\n-        Node::Item(hir::Item {\n-            kind: hir::ItemKind::Static(ty, _, body_id) | hir::ItemKind::Const(ty, body_id),\n-            ..\n-        })\n-        | Node::ImplItem(hir::ImplItem { kind: hir::ImplItemKind::Const(ty, body_id), .. })\n-        | Node::TraitItem(hir::TraitItem {\n-            kind: hir::TraitItemKind::Const(ty, Some(body_id)),\n-            ..\n-        }) => (*body_id, ty.span, None),\n-        Node::AnonConst(hir::AnonConst { body, hir_id, .. }) => {\n-            (*body, tcx.hir().span(*hir_id), None)\n+    let body_id = tcx.hir().body_owned_by(def.did);\n+    let span_with_body = tcx.hir().span_with_body(id);\n+    let return_ty_span = if let Some(fn_decl) = tcx.hir().fn_decl_by_hir_id(id) {\n+        fn_decl.output.span()\n+    } else {\n+        match tcx.hir().get(id) {\n+            Node::Item(hir::Item {\n+                kind: hir::ItemKind::Static(ty, _, _) | hir::ItemKind::Const(ty, _),\n+                ..\n+            })\n+            | Node::ImplItem(hir::ImplItem { kind: hir::ImplItemKind::Const(ty, _), .. })\n+            | Node::TraitItem(hir::TraitItem { kind: hir::TraitItemKind::Const(ty, _), .. }) => {\n+                ty.span\n+            }\n+            Node::AnonConst(_) => tcx.def_span(def.did),\n+            _ => span_bug!(tcx.def_span(def.did), \"can't build MIR for {:?}\", def.did),\n         }\n-\n-        _ => span_bug!(tcx.hir().span(id), \"can't build MIR for {:?}\", def.did),\n     };\n \n-    // If we don't have a specialized span for the body, just use the\n-    // normal def span.\n-    let span_with_body = span_with_body.unwrap_or_else(|| tcx.hir().span(id));\n-\n     tcx.infer_ctxt().enter(|infcx| {\n         let body = if let Some(error_reported) = typeck_results.tainted_by_errors {\n             build::construct_error(&infcx, def, id, body_id, body_owner_kind, error_reported)\n@@ -245,8 +220,6 @@ fn mir_build(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -> Body<'_\n             // of `mir_build`, so now we can steal it\n             let thir = thir.steal();\n \n-            let span_with_body = span_with_body.to(tcx.hir().span(body_id.hir_id));\n-\n             build::construct_const(\n                 &thir,\n                 &infcx,"}, {"sha": "f3f5c39bc17d9011156db51ac4a886721374d77a", "filename": "src/test/mir-opt/const_promotion_extern_static.BAR.PromoteTemps.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff?ref=1f370d9437795d8ad8382d106b3e55715ab0d251", "patch": "@@ -40,11 +40,11 @@\n -         StorageDead(_5);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:43: +0:44\n -         StorageDead(_3);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:43: +0:44\n           StorageDead(_1);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:43: +0:44\n-          return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:+0:1: +0:44\n+          return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:+0:1: +0:45\n       }\n   \n       bb2 (cleanup): {\n-          resume;                          // scope 0 at $DIR/const-promotion-extern-static.rs:+0:1: +0:44\n+          resume;                          // scope 0 at $DIR/const-promotion-extern-static.rs:+0:1: +0:45\n       }\n - }\n - "}, {"sha": "90920fbe7f8052287fa6c22b781ef231b0e2923a", "filename": "src/test/mir-opt/const_promotion_extern_static.BOP.mir_map.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BOP.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BOP.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BOP.mir_map.0.mir?ref=1f370d9437795d8ad8382d106b3e55715ab0d251", "patch": "@@ -12,6 +12,6 @@ static BOP: &i32 = {\n         _1 = &_2;                        // scope 0 at $DIR/const-promotion-extern-static.rs:+0:20: +0:23\n         _0 = &(*_1);                     // scope 0 at $DIR/const-promotion-extern-static.rs:+0:20: +0:23\n         StorageDead(_1);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:22: +0:23\n-        return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:+0:1: +0:23\n+        return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:+0:1: +0:24\n     }\n }"}, {"sha": "a4caa20874e2003a8ff130face952f2e899aaf13", "filename": "src/test/mir-opt/const_promotion_extern_static.FOO.PromoteTemps.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff?ref=1f370d9437795d8ad8382d106b3e55715ab0d251", "patch": "@@ -42,11 +42,11 @@\n -         StorageDead(_5);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:54: +0:55\n -         StorageDead(_3);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:54: +0:55\n           StorageDead(_1);                 // scope 0 at $DIR/const-promotion-extern-static.rs:+0:54: +0:55\n-          return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:+0:1: +0:55\n+          return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:+0:1: +0:56\n       }\n   \n       bb2 (cleanup): {\n-          resume;                          // scope 0 at $DIR/const-promotion-extern-static.rs:+0:1: +0:55\n+          resume;                          // scope 0 at $DIR/const-promotion-extern-static.rs:+0:1: +0:56\n       }\n   }\n - "}, {"sha": "c718138b6b37ea3d1b535b4ec85e0b6a28874034", "filename": "src/test/mir-opt/generator_drop_cleanup.main-{closure#0}.generator_drop.0.mir", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fmir-opt%2Fgenerator_drop_cleanup.main-%7Bclosure%230%7D.generator_drop.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fmir-opt%2Fgenerator_drop_cleanup.main-%7Bclosure%230%7D.generator_drop.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator_drop_cleanup.main-%7Bclosure%230%7D.generator_drop.0.mir?ref=1f370d9437795d8ad8382d106b3e55715ab0d251", "patch": "@@ -15,70 +15,70 @@\n } */\n \n fn main::{closure#0}(_1: *mut [generator@$DIR/generator-drop-cleanup.rs:10:15: 10:17]) -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +0:17\n-    let mut _2: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +0:17\n-    let _3: std::string::String;         // in scope 0 at $DIR/generator-drop-cleanup.rs:11:13: 11:15\n-    let _4: ();                          // in scope 0 at $DIR/generator-drop-cleanup.rs:12:9: 12:14\n-    let mut _5: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:12:9: 12:14\n-    let mut _6: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:10:18: 10:18\n-    let mut _7: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +0:17\n-    let mut _8: u32;                     // in scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +0:17\n+    let mut _0: ();                      // return place in scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +3:6\n+    let mut _2: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +3:6\n+    let _3: std::string::String;         // in scope 0 at $DIR/generator-drop-cleanup.rs:+1:13: +1:15\n+    let _4: ();                          // in scope 0 at $DIR/generator-drop-cleanup.rs:+2:9: +2:14\n+    let mut _5: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:+2:9: +2:14\n+    let mut _6: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:+0:18: +0:18\n+    let mut _7: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +3:6\n+    let mut _8: u32;                     // in scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +3:6\n     scope 1 {\n-        debug _s => (((*_1) as variant#3).0: std::string::String); // in scope 1 at $DIR/generator-drop-cleanup.rs:11:13: 11:15\n+        debug _s => (((*_1) as variant#3).0: std::string::String); // in scope 1 at $DIR/generator-drop-cleanup.rs:+1:13: +1:15\n     }\n \n     bb0: {\n-        _8 = discriminant((*_1));        // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +0:17\n-        switchInt(move _8) -> [0_u32: bb7, 3_u32: bb10, otherwise: bb11]; // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +0:17\n+        _8 = discriminant((*_1));        // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +3:6\n+        switchInt(move _8) -> [0_u32: bb7, 3_u32: bb10, otherwise: bb11]; // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +3:6\n     }\n \n     bb1: {\n-        StorageDead(_5);                 // scope 1 at $DIR/generator-drop-cleanup.rs:12:13: 12:14\n-        StorageDead(_4);                 // scope 1 at $DIR/generator-drop-cleanup.rs:12:14: 12:15\n-        drop((((*_1) as variant#3).0: std::string::String)) -> [return: bb2, unwind: bb5]; // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n+        StorageDead(_5);                 // scope 1 at $DIR/generator-drop-cleanup.rs:+2:13: +2:14\n+        StorageDead(_4);                 // scope 1 at $DIR/generator-drop-cleanup.rs:+2:14: +2:15\n+        drop((((*_1) as variant#3).0: std::string::String)) -> [return: bb2, unwind: bb5]; // scope 0 at $DIR/generator-drop-cleanup.rs:+3:5: +3:6\n     }\n \n     bb2: {\n-        nop;                             // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n-        goto -> bb8;                     // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n+        nop;                             // scope 0 at $DIR/generator-drop-cleanup.rs:+3:5: +3:6\n+        goto -> bb8;                     // scope 0 at $DIR/generator-drop-cleanup.rs:+3:5: +3:6\n     }\n \n     bb3: {\n-        return;                          // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +0:17\n+        return;                          // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +3:6\n     }\n \n     bb4 (cleanup): {\n-        resume;                          // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +0:17\n+        resume;                          // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +3:6\n     }\n \n     bb5 (cleanup): {\n-        nop;                             // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n-        goto -> bb4;                     // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n+        nop;                             // scope 0 at $DIR/generator-drop-cleanup.rs:+3:5: +3:6\n+        goto -> bb4;                     // scope 0 at $DIR/generator-drop-cleanup.rs:+3:5: +3:6\n     }\n \n     bb6: {\n-        return;                          // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +0:17\n+        return;                          // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +3:6\n     }\n \n     bb7: {\n-        goto -> bb9;                     // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +0:17\n+        goto -> bb9;                     // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +3:6\n     }\n \n     bb8: {\n-        goto -> bb3;                     // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6\n+        goto -> bb3;                     // scope 0 at $DIR/generator-drop-cleanup.rs:+3:5: +3:6\n     }\n \n     bb9: {\n-        goto -> bb6;                     // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +0:17\n+        goto -> bb6;                     // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +3:6\n     }\n \n     bb10: {\n-        StorageLive(_4);                 // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +0:17\n-        StorageLive(_5);                 // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +0:17\n-        goto -> bb1;                     // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +0:17\n+        StorageLive(_4);                 // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +3:6\n+        StorageLive(_5);                 // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +3:6\n+        goto -> bb1;                     // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +3:6\n     }\n \n     bb11: {\n-        return;                          // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +0:17\n+        return;                          // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +3:6\n     }\n }"}, {"sha": "3184343f207b39ad2a752f885be4a8e4f6a552a0", "filename": "src/test/mir-opt/generator_storage_dead_unwind.main-{closure#0}.StateTransform.before.mir", "status": "modified", "additions": 58, "deletions": 58, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7Bclosure%230%7D.StateTransform.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7Bclosure%230%7D.StateTransform.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7Bclosure%230%7D.StateTransform.before.mir?ref=1f370d9437795d8ad8382d106b3e55715ab0d251", "patch": "@@ -3,122 +3,122 @@\n fn main::{closure#0}(_1: [generator@$DIR/generator-storage-dead-unwind.rs:22:16: 22:18], _2: ()) -> ()\n yields ()\n  {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/generator-storage-dead-unwind.rs:22:19: 22:19\n-    let _3: Foo;                         // in scope 0 at $DIR/generator-storage-dead-unwind.rs:23:13: 23:14\n-    let _5: ();                          // in scope 0 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n-    let mut _6: ();                      // in scope 0 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n-    let _7: ();                          // in scope 0 at $DIR/generator-storage-dead-unwind.rs:26:9: 26:16\n-    let mut _8: Foo;                     // in scope 0 at $DIR/generator-storage-dead-unwind.rs:26:14: 26:15\n-    let _9: ();                          // in scope 0 at $DIR/generator-storage-dead-unwind.rs:27:9: 27:16\n-    let mut _10: Bar;                    // in scope 0 at $DIR/generator-storage-dead-unwind.rs:27:14: 27:15\n+    let mut _0: ();                      // return place in scope 0 at $DIR/generator-storage-dead-unwind.rs:+0:19: +0:19\n+    let _3: Foo;                         // in scope 0 at $DIR/generator-storage-dead-unwind.rs:+1:13: +1:14\n+    let _5: ();                          // in scope 0 at $DIR/generator-storage-dead-unwind.rs:+3:9: +3:14\n+    let mut _6: ();                      // in scope 0 at $DIR/generator-storage-dead-unwind.rs:+3:9: +3:14\n+    let _7: ();                          // in scope 0 at $DIR/generator-storage-dead-unwind.rs:+4:9: +4:16\n+    let mut _8: Foo;                     // in scope 0 at $DIR/generator-storage-dead-unwind.rs:+4:14: +4:15\n+    let _9: ();                          // in scope 0 at $DIR/generator-storage-dead-unwind.rs:+5:9: +5:16\n+    let mut _10: Bar;                    // in scope 0 at $DIR/generator-storage-dead-unwind.rs:+5:14: +5:15\n     scope 1 {\n-        debug a => _3;                   // in scope 1 at $DIR/generator-storage-dead-unwind.rs:23:13: 23:14\n-        let _4: Bar;                     // in scope 1 at $DIR/generator-storage-dead-unwind.rs:24:13: 24:14\n+        debug a => _3;                   // in scope 1 at $DIR/generator-storage-dead-unwind.rs:+1:13: +1:14\n+        let _4: Bar;                     // in scope 1 at $DIR/generator-storage-dead-unwind.rs:+2:13: +2:14\n         scope 2 {\n-            debug b => _4;               // in scope 2 at $DIR/generator-storage-dead-unwind.rs:24:13: 24:14\n+            debug b => _4;               // in scope 2 at $DIR/generator-storage-dead-unwind.rs:+2:13: +2:14\n         }\n     }\n \n     bb0: {\n-        StorageLive(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:23:13: 23:14\n-        _3 = Foo(const 5_i32);           // scope 0 at $DIR/generator-storage-dead-unwind.rs:23:17: 23:23\n-        StorageLive(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:24:13: 24:14\n-        _4 = Bar(const 6_i32);           // scope 1 at $DIR/generator-storage-dead-unwind.rs:24:17: 24:23\n-        StorageLive(_5);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n-        StorageLive(_6);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n-        _6 = ();                         // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n-        _5 = yield(move _6) -> [resume: bb1, drop: bb6]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n+        StorageLive(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:+1:13: +1:14\n+        _3 = Foo(const 5_i32);           // scope 0 at $DIR/generator-storage-dead-unwind.rs:+1:17: +1:23\n+        StorageLive(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:+2:13: +2:14\n+        _4 = Bar(const 6_i32);           // scope 1 at $DIR/generator-storage-dead-unwind.rs:+2:17: +2:23\n+        StorageLive(_5);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+3:9: +3:14\n+        StorageLive(_6);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+3:9: +3:14\n+        _6 = ();                         // scope 2 at $DIR/generator-storage-dead-unwind.rs:+3:9: +3:14\n+        _5 = yield(move _6) -> [resume: bb1, drop: bb6]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:+3:9: +3:14\n     }\n \n     bb1: {\n-        StorageDead(_6);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:13: 25:14\n-        StorageDead(_5);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:14: 25:15\n-        StorageLive(_7);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:9: 26:16\n-        StorageLive(_8);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:14: 26:15\n-        _8 = move _3;                    // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:14: 26:15\n-        _7 = take::<Foo>(move _8) -> [return: bb2, unwind: bb10]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:9: 26:16\n+        StorageDead(_6);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+3:13: +3:14\n+        StorageDead(_5);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+3:14: +3:15\n+        StorageLive(_7);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+4:9: +4:16\n+        StorageLive(_8);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+4:14: +4:15\n+        _8 = move _3;                    // scope 2 at $DIR/generator-storage-dead-unwind.rs:+4:14: +4:15\n+        _7 = take::<Foo>(move _8) -> [return: bb2, unwind: bb10]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:+4:9: +4:16\n                                          // mir::Constant\n                                          // + span: $DIR/generator-storage-dead-unwind.rs:26:9: 26:13\n                                          // + literal: Const { ty: fn(Foo) {take::<Foo>}, val: Value(<ZST>) }\n     }\n \n     bb2: {\n-        StorageDead(_8);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:15: 26:16\n-        StorageDead(_7);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:16: 26:17\n-        StorageLive(_9);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:9: 27:16\n-        StorageLive(_10);                // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:14: 27:15\n-        _10 = move _4;                   // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:14: 27:15\n-        _9 = take::<Bar>(move _10) -> [return: bb3, unwind: bb9]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:9: 27:16\n+        StorageDead(_8);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+4:15: +4:16\n+        StorageDead(_7);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+4:16: +4:17\n+        StorageLive(_9);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+5:9: +5:16\n+        StorageLive(_10);                // scope 2 at $DIR/generator-storage-dead-unwind.rs:+5:14: +5:15\n+        _10 = move _4;                   // scope 2 at $DIR/generator-storage-dead-unwind.rs:+5:14: +5:15\n+        _9 = take::<Bar>(move _10) -> [return: bb3, unwind: bb9]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:+5:9: +5:16\n                                          // mir::Constant\n                                          // + span: $DIR/generator-storage-dead-unwind.rs:27:9: 27:13\n                                          // + literal: Const { ty: fn(Bar) {take::<Bar>}, val: Value(<ZST>) }\n     }\n \n     bb3: {\n-        StorageDead(_10);                // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:15: 27:16\n-        StorageDead(_9);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:16: 27:17\n-        _0 = const ();                   // scope 0 at $DIR/generator-storage-dead-unwind.rs:22:19: 28:6\n-        StorageDead(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n-        goto -> bb4;                     // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        StorageDead(_10);                // scope 2 at $DIR/generator-storage-dead-unwind.rs:+5:15: +5:16\n+        StorageDead(_9);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+5:16: +5:17\n+        _0 = const ();                   // scope 0 at $DIR/generator-storage-dead-unwind.rs:+0:19: +6:6\n+        StorageDead(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n+        goto -> bb4;                     // scope 0 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n     }\n \n     bb4: {\n-        StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n-        drop(_1) -> [return: bb5, unwind: bb14]; // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n+        drop(_1) -> [return: bb5, unwind: bb14]; // scope 0 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n     }\n \n     bb5: {\n-        return;                          // scope 0 at $DIR/generator-storage-dead-unwind.rs:+0:18: +0:18\n+        return;                          // scope 0 at $DIR/generator-storage-dead-unwind.rs:+6:6: +6:6\n     }\n \n     bb6: {\n-        StorageDead(_6);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:13: 25:14\n-        StorageDead(_5);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:14: 25:15\n-        StorageDead(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n-        drop(_3) -> [return: bb7, unwind: bb15]; // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        StorageDead(_6);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+3:13: +3:14\n+        StorageDead(_5);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+3:14: +3:15\n+        StorageDead(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n+        drop(_3) -> [return: bb7, unwind: bb15]; // scope 0 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n     }\n \n     bb7: {\n-        StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n-        drop(_1) -> [return: bb8, unwind: bb14]; // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n+        drop(_1) -> [return: bb8, unwind: bb14]; // scope 0 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n     }\n \n     bb8: {\n-        generator_drop;                  // scope 0 at $DIR/generator-storage-dead-unwind.rs:+0:16: +0:18\n+        generator_drop;                  // scope 0 at $DIR/generator-storage-dead-unwind.rs:+0:16: +6:6\n     }\n \n     bb9 (cleanup): {\n-        StorageDead(_10);                // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:15: 27:16\n-        StorageDead(_9);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:16: 27:17\n+        StorageDead(_10);                // scope 2 at $DIR/generator-storage-dead-unwind.rs:+5:15: +5:16\n+        StorageDead(_9);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+5:16: +5:17\n         goto -> bb12;                    // scope 2 at no-location\n     }\n \n     bb10 (cleanup): {\n-        goto -> bb11;                    // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:15: 26:16\n+        goto -> bb11;                    // scope 2 at $DIR/generator-storage-dead-unwind.rs:+4:15: +4:16\n     }\n \n     bb11 (cleanup): {\n-        StorageDead(_8);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:15: 26:16\n-        StorageDead(_7);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:16: 26:17\n+        StorageDead(_8);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+4:15: +4:16\n+        StorageDead(_7);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:+4:16: +4:17\n         goto -> bb12;                    // scope 2 at no-location\n     }\n \n     bb12 (cleanup): {\n-        StorageDead(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n-        goto -> bb13;                    // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        StorageDead(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n+        goto -> bb13;                    // scope 0 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n     }\n \n     bb13 (cleanup): {\n-        StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n-        drop(_1) -> bb14;                // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n+        drop(_1) -> bb14;                // scope 0 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n     }\n \n     bb14 (cleanup): {\n-        resume;                          // scope 0 at $DIR/generator-storage-dead-unwind.rs:+0:16: +0:18\n+        resume;                          // scope 0 at $DIR/generator-storage-dead-unwind.rs:+0:16: +6:6\n     }\n \n     bb15 (cleanup): {\n-        StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n-        drop(_1) -> bb14;                // scope 0 at $DIR/generator-storage-dead-unwind.rs:28:5: 28:6\n+        StorageDead(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n+        drop(_1) -> bb14;                // scope 0 at $DIR/generator-storage-dead-unwind.rs:+6:5: +6:6\n     }\n }"}, {"sha": "07aeeaae012c977347f890d04624bab2b8f685bd", "filename": "src/test/mir-opt/generator_tiny.main-{closure#0}.generator_resume.0.mir", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fmir-opt%2Fgenerator_tiny.main-%7Bclosure%230%7D.generator_resume.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fmir-opt%2Fgenerator_tiny.main-%7Bclosure%230%7D.generator_resume.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator_tiny.main-%7Bclosure%230%7D.generator_resume.0.mir?ref=1f370d9437795d8ad8382d106b3e55715ab0d251", "patch": "@@ -16,69 +16,69 @@\n \n fn main::{closure#0}(_1: Pin<&mut [generator@$DIR/generator-tiny.rs:19:16: 19:24]>, _2: u8) -> GeneratorState<(), ()> {\n     debug _x => _10;                     // in scope 0 at $DIR/generator-tiny.rs:+0:17: +0:19\n-    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at $DIR/generator-tiny.rs:+0:16: +0:24\n-    let _3: HasDrop;                     // in scope 0 at $DIR/generator-tiny.rs:20:13: 20:15\n-    let mut _4: !;                       // in scope 0 at $DIR/generator-tiny.rs:21:9: 24:10\n-    let mut _5: ();                      // in scope 0 at $DIR/generator-tiny.rs:+0:16: +0:24\n-    let _6: u8;                          // in scope 0 at $DIR/generator-tiny.rs:22:13: 22:18\n-    let mut _7: ();                      // in scope 0 at $DIR/generator-tiny.rs:22:13: 22:18\n-    let _8: ();                          // in scope 0 at $DIR/generator-tiny.rs:23:13: 23:21\n-    let mut _9: ();                      // in scope 0 at $DIR/generator-tiny.rs:19:25: 19:25\n+    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at $DIR/generator-tiny.rs:+0:16: +6:6\n+    let _3: HasDrop;                     // in scope 0 at $DIR/generator-tiny.rs:+1:13: +1:15\n+    let mut _4: !;                       // in scope 0 at $DIR/generator-tiny.rs:+2:9: +5:10\n+    let mut _5: ();                      // in scope 0 at $DIR/generator-tiny.rs:+0:16: +6:6\n+    let _6: u8;                          // in scope 0 at $DIR/generator-tiny.rs:+3:13: +3:18\n+    let mut _7: ();                      // in scope 0 at $DIR/generator-tiny.rs:+3:13: +3:18\n+    let _8: ();                          // in scope 0 at $DIR/generator-tiny.rs:+4:13: +4:21\n+    let mut _9: ();                      // in scope 0 at $DIR/generator-tiny.rs:+0:25: +0:25\n     let _10: u8;                         // in scope 0 at $DIR/generator-tiny.rs:+0:17: +0:19\n-    let mut _11: u32;                    // in scope 0 at $DIR/generator-tiny.rs:+0:16: +0:24\n+    let mut _11: u32;                    // in scope 0 at $DIR/generator-tiny.rs:+0:16: +6:6\n     scope 1 {\n-        debug _d => (((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:19:16: 19:24])) as variant#3).0: HasDrop); // in scope 1 at $DIR/generator-tiny.rs:20:13: 20:15\n+        debug _d => (((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:19:16: 19:24])) as variant#3).0: HasDrop); // in scope 1 at $DIR/generator-tiny.rs:+1:13: +1:15\n     }\n \n     bb0: {\n-        _11 = discriminant((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:19:16: 19:24]))); // scope 0 at $DIR/generator-tiny.rs:+0:16: +0:24\n-        switchInt(move _11) -> [0_u32: bb1, 3_u32: bb5, otherwise: bb6]; // scope 0 at $DIR/generator-tiny.rs:+0:16: +0:24\n+        _11 = discriminant((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:19:16: 19:24]))); // scope 0 at $DIR/generator-tiny.rs:+0:16: +6:6\n+        switchInt(move _11) -> [0_u32: bb1, 3_u32: bb5, otherwise: bb6]; // scope 0 at $DIR/generator-tiny.rs:+0:16: +6:6\n     }\n \n     bb1: {\n-        _10 = move _2;                   // scope 0 at $DIR/generator-tiny.rs:+0:16: +0:24\n-        nop;                             // scope 0 at $DIR/generator-tiny.rs:20:13: 20:15\n-        (((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:19:16: 19:24])) as variant#3).0: HasDrop) = HasDrop; // scope 0 at $DIR/generator-tiny.rs:20:18: 20:25\n-        StorageLive(_4);                 // scope 1 at $DIR/generator-tiny.rs:21:9: 24:10\n-        goto -> bb2;                     // scope 1 at $DIR/generator-tiny.rs:21:9: 24:10\n+        _10 = move _2;                   // scope 0 at $DIR/generator-tiny.rs:+0:16: +6:6\n+        nop;                             // scope 0 at $DIR/generator-tiny.rs:+1:13: +1:15\n+        (((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:19:16: 19:24])) as variant#3).0: HasDrop) = HasDrop; // scope 0 at $DIR/generator-tiny.rs:+1:18: +1:25\n+        StorageLive(_4);                 // scope 1 at $DIR/generator-tiny.rs:+2:9: +5:10\n+        goto -> bb2;                     // scope 1 at $DIR/generator-tiny.rs:+2:9: +5:10\n     }\n \n     bb2: {\n-        StorageLive(_6);                 // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n-        StorageLive(_7);                 // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n-        _7 = ();                         // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n-        Deinit(_0);                      // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n-        ((_0 as Yielded).0: ()) = move _7; // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n-        discriminant(_0) = 0;            // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n-        discriminant((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:19:16: 19:24]))) = 3; // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n-        return;                          // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n+        StorageLive(_6);                 // scope 1 at $DIR/generator-tiny.rs:+3:13: +3:18\n+        StorageLive(_7);                 // scope 1 at $DIR/generator-tiny.rs:+3:13: +3:18\n+        _7 = ();                         // scope 1 at $DIR/generator-tiny.rs:+3:13: +3:18\n+        Deinit(_0);                      // scope 1 at $DIR/generator-tiny.rs:+3:13: +3:18\n+        ((_0 as Yielded).0: ()) = move _7; // scope 1 at $DIR/generator-tiny.rs:+3:13: +3:18\n+        discriminant(_0) = 0;            // scope 1 at $DIR/generator-tiny.rs:+3:13: +3:18\n+        discriminant((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:19:16: 19:24]))) = 3; // scope 1 at $DIR/generator-tiny.rs:+3:13: +3:18\n+        return;                          // scope 1 at $DIR/generator-tiny.rs:+3:13: +3:18\n     }\n \n     bb3: {\n-        StorageDead(_7);                 // scope 1 at $DIR/generator-tiny.rs:22:17: 22:18\n-        StorageDead(_6);                 // scope 1 at $DIR/generator-tiny.rs:22:18: 22:19\n-        StorageLive(_8);                 // scope 1 at $DIR/generator-tiny.rs:23:13: 23:21\n-        _8 = callee() -> bb4;            // scope 1 at $DIR/generator-tiny.rs:23:13: 23:21\n+        StorageDead(_7);                 // scope 1 at $DIR/generator-tiny.rs:+3:17: +3:18\n+        StorageDead(_6);                 // scope 1 at $DIR/generator-tiny.rs:+3:18: +3:19\n+        StorageLive(_8);                 // scope 1 at $DIR/generator-tiny.rs:+4:13: +4:21\n+        _8 = callee() -> bb4;            // scope 1 at $DIR/generator-tiny.rs:+4:13: +4:21\n                                          // mir::Constant\n                                          // + span: $DIR/generator-tiny.rs:23:13: 23:19\n                                          // + literal: Const { ty: fn() {callee}, val: Value(<ZST>) }\n     }\n \n     bb4: {\n-        StorageDead(_8);                 // scope 1 at $DIR/generator-tiny.rs:23:21: 23:22\n-        _5 = const ();                   // scope 1 at $DIR/generator-tiny.rs:21:14: 24:10\n-        goto -> bb2;                     // scope 1 at $DIR/generator-tiny.rs:21:9: 24:10\n+        StorageDead(_8);                 // scope 1 at $DIR/generator-tiny.rs:+4:21: +4:22\n+        _5 = const ();                   // scope 1 at $DIR/generator-tiny.rs:+2:14: +5:10\n+        goto -> bb2;                     // scope 1 at $DIR/generator-tiny.rs:+2:9: +5:10\n     }\n \n     bb5: {\n-        StorageLive(_4);                 // scope 0 at $DIR/generator-tiny.rs:+0:16: +0:24\n-        StorageLive(_6);                 // scope 0 at $DIR/generator-tiny.rs:+0:16: +0:24\n-        StorageLive(_7);                 // scope 0 at $DIR/generator-tiny.rs:+0:16: +0:24\n-        _6 = move _2;                    // scope 0 at $DIR/generator-tiny.rs:+0:16: +0:24\n-        goto -> bb3;                     // scope 0 at $DIR/generator-tiny.rs:+0:16: +0:24\n+        StorageLive(_4);                 // scope 0 at $DIR/generator-tiny.rs:+0:16: +6:6\n+        StorageLive(_6);                 // scope 0 at $DIR/generator-tiny.rs:+0:16: +6:6\n+        StorageLive(_7);                 // scope 0 at $DIR/generator-tiny.rs:+0:16: +6:6\n+        _6 = move _2;                    // scope 0 at $DIR/generator-tiny.rs:+0:16: +6:6\n+        goto -> bb3;                     // scope 0 at $DIR/generator-tiny.rs:+0:16: +6:6\n     }\n \n     bb6: {\n-        unreachable;                     // scope 0 at $DIR/generator-tiny.rs:+0:16: +0:24\n+        unreachable;                     // scope 0 at $DIR/generator-tiny.rs:+0:16: +6:6\n     }\n }"}, {"sha": "a2234e7c1effd472892064bf4f6beca3eca3b2cc", "filename": "src/test/mir-opt/inline/inline_closure_captures.foo.Inline.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir?ref=1f370d9437795d8ad8382d106b3e55715ab0d251", "patch": "@@ -19,8 +19,8 @@ fn foo(_1: T, _2: i32) -> (i32, T) {\n             debug t => (*((*_6).1: &T)); // in scope 2 at $DIR/inline-closure-captures.rs:+0:17: +0:18\n             let mut _10: i32;            // in scope 2 at $DIR/inline-closure-captures.rs:+1:19: +1:20\n             let mut _11: T;              // in scope 2 at $DIR/inline-closure-captures.rs:+1:22: +1:23\n-            let mut _12: &i32;           // in scope 2 at $DIR/inline-closure-captures.rs:+1:13: +1:17\n-            let mut _13: &T;             // in scope 2 at $DIR/inline-closure-captures.rs:+1:13: +1:17\n+            let mut _12: &i32;           // in scope 2 at $DIR/inline-closure-captures.rs:+1:13: +1:24\n+            let mut _13: &T;             // in scope 2 at $DIR/inline-closure-captures.rs:+1:13: +1:24\n         }\n     }\n "}, {"sha": "0b992e3c32ad14d446680a027fcd6e56ad46ec71", "filename": "src/test/mir-opt/inline/inline_generator.main.Inline.diff", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff?ref=1f370d9437795d8ad8382d106b3e55715ab0d251", "patch": "@@ -29,10 +29,10 @@\n +         let mut _9: bool;                // in scope 6 at $DIR/inline-generator.rs:15:20: 15:21\n +         let mut _10: bool;               // in scope 6 at $DIR/inline-generator.rs:15:9: 15:9\n +         let _11: bool;                   // in scope 6 at $DIR/inline-generator.rs:15:6: 15:7\n-+         let mut _12: u32;                // in scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n-+         let mut _13: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]; // in scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n-+         let mut _14: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]; // in scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n-+         let mut _15: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]; // in scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n++         let mut _12: u32;                // in scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n++         let mut _13: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]; // in scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n++         let mut _14: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]; // in scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n++         let mut _15: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]; // in scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n +     }\n   \n       bb0: {\n@@ -75,9 +75,9 @@\n +         _7 = const false;                // scope 0 at $DIR/inline-generator.rs:+1:14: +1:46\n +         StorageLive(_10);                // scope 0 at $DIR/inline-generator.rs:+1:14: +1:46\n +         StorageLive(_11);                // scope 0 at $DIR/inline-generator.rs:+1:14: +1:46\n-+         _13 = deref_copy (_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]); // scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n-+         _12 = discriminant((*_13));      // scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n-+         switchInt(move _12) -> [0_u32: bb3, 1_u32: bb8, 3_u32: bb7, otherwise: bb9]; // scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n++         _13 = deref_copy (_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]); // scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n++         _12 = discriminant((*_13));      // scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n++         switchInt(move _12) -> [0_u32: bb3, 1_u32: bb8, 3_u32: bb7, otherwise: bb9]; // scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n       }\n   \n -     bb3: {\n@@ -98,7 +98,7 @@\n +     }\n + \n +     bb3: {\n-+         _11 = move _7;                   // scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n++         _11 = move _7;                   // scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n +         StorageLive(_8);                 // scope 6 at $DIR/inline-generator.rs:15:17: 15:39\n +         StorageLive(_9);                 // scope 6 at $DIR/inline-generator.rs:15:20: 15:21\n +         _9 = _11;                        // scope 6 at $DIR/inline-generator.rs:15:20: 15:21\n@@ -126,23 +126,23 @@\n +     }\n + \n +     bb7: {\n-+         StorageLive(_8);                 // scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n-+         _10 = move _7;                   // scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n++         StorageLive(_8);                 // scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n++         _10 = move _7;                   // scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n +         StorageDead(_8);                 // scope 6 at $DIR/inline-generator.rs:15:38: 15:39\n-+         Deinit(_1);                      // scope 6 at $DIR/inline-generator.rs:15:8: 15:8\n-+         ((_1 as Complete).0: bool) = move _10; // scope 6 at $DIR/inline-generator.rs:15:8: 15:8\n-+         discriminant(_1) = 1;            // scope 6 at $DIR/inline-generator.rs:15:8: 15:8\n-+         _15 = deref_copy (_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]); // scope 6 at $DIR/inline-generator.rs:15:8: 15:8\n-+         discriminant((*_15)) = 1;        // scope 6 at $DIR/inline-generator.rs:15:8: 15:8\n-+         goto -> bb1;                     // scope 0 at $DIR/inline-generator.rs:15:8: 15:8\n++         Deinit(_1);                      // scope 6 at $DIR/inline-generator.rs:15:41: 15:41\n++         ((_1 as Complete).0: bool) = move _10; // scope 6 at $DIR/inline-generator.rs:15:41: 15:41\n++         discriminant(_1) = 1;            // scope 6 at $DIR/inline-generator.rs:15:41: 15:41\n++         _15 = deref_copy (_2.0: &mut [generator@$DIR/inline-generator.rs:15:5: 15:8]); // scope 6 at $DIR/inline-generator.rs:15:41: 15:41\n++         discriminant((*_15)) = 1;        // scope 6 at $DIR/inline-generator.rs:15:41: 15:41\n++         goto -> bb1;                     // scope 0 at $DIR/inline-generator.rs:15:41: 15:41\n +     }\n + \n +     bb8: {\n-+         assert(const false, \"generator resumed after completion\") -> [success: bb8, unwind: bb2]; // scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n++         assert(const false, \"generator resumed after completion\") -> [success: bb8, unwind: bb2]; // scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n +     }\n + \n +     bb9: {\n-+         unreachable;                     // scope 6 at $DIR/inline-generator.rs:15:5: 15:8\n++         unreachable;                     // scope 6 at $DIR/inline-generator.rs:15:5: 15:41\n       }\n   }\n   "}, {"sha": "44b1a267b34344f73c78ce8a4567e5e705d019cf", "filename": "src/test/mir-opt/retag.main-{closure#0}.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fmir-opt%2Fretag.main-%7Bclosure%230%7D.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fmir-opt%2Fretag.main-%7Bclosure%230%7D.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.main-%7Bclosure%230%7D.SimplifyCfg-elaborate-drops.after.mir?ref=1f370d9437795d8ad8382d106b3e55715ab0d251", "patch": "@@ -3,20 +3,20 @@\n fn main::{closure#0}(_1: &[closure@main::{closure#0}], _2: &i32) -> &i32 {\n     debug x => _2;                       // in scope 0 at $DIR/retag.rs:+0:32: +0:33\n     let mut _0: &i32;                    // return place in scope 0 at $DIR/retag.rs:+0:44: +0:48\n-    let _3: &i32;                        // in scope 0 at $DIR/retag.rs:42:13: 42:15\n+    let _3: &i32;                        // in scope 0 at $DIR/retag.rs:+1:13: +1:15\n     scope 1 {\n-        debug _y => _3;                  // in scope 1 at $DIR/retag.rs:42:13: 42:15\n+        debug _y => _3;                  // in scope 1 at $DIR/retag.rs:+1:13: +1:15\n     }\n \n     bb0: {\n-        Retag([fn entry] _1);            // scope 0 at $DIR/retag.rs:+0:31: +0:48\n+        Retag([fn entry] _1);            // scope 0 at $DIR/retag.rs:+0:31: +3:6\n         Retag([fn entry] _2);            // scope 0 at $DIR/retag.rs:+0:32: +0:33\n-        StorageLive(_3);                 // scope 0 at $DIR/retag.rs:42:13: 42:15\n-        _3 = _2;                         // scope 0 at $DIR/retag.rs:42:18: 42:19\n-        Retag(_3);                       // scope 0 at $DIR/retag.rs:42:18: 42:19\n-        _0 = _2;                         // scope 1 at $DIR/retag.rs:43:9: 43:10\n-        Retag(_0);                       // scope 1 at $DIR/retag.rs:43:9: 43:10\n-        StorageDead(_3);                 // scope 0 at $DIR/retag.rs:44:5: 44:6\n-        return;                          // scope 0 at $DIR/retag.rs:+0:48: +0:48\n+        StorageLive(_3);                 // scope 0 at $DIR/retag.rs:+1:13: +1:15\n+        _3 = _2;                         // scope 0 at $DIR/retag.rs:+1:18: +1:19\n+        Retag(_3);                       // scope 0 at $DIR/retag.rs:+1:18: +1:19\n+        _0 = _2;                         // scope 1 at $DIR/retag.rs:+2:9: +2:10\n+        Retag(_0);                       // scope 1 at $DIR/retag.rs:+2:9: +2:10\n+        StorageDead(_3);                 // scope 0 at $DIR/retag.rs:+3:5: +3:6\n+        return;                          // scope 0 at $DIR/retag.rs:+3:6: +3:6\n     }\n }"}, {"sha": "e50067ea25ef4864ad2ebc2835fd1feacc4232c5", "filename": "src/test/mir-opt/storage_live_dead_in_statics.XXX.mir_map.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.XXX.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.XXX.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.XXX.mir_map.0.mir?ref=1f370d9437795d8ad8382d106b3e55715ab0d251", "patch": "@@ -198,6 +198,6 @@ static XXX: &Foo = {\n         _0 = &(*_1);                     // scope 0 at $DIR/storage_live_dead_in_statics.rs:+0:28: +18:2\n         StorageDead(_5);                 // scope 0 at $DIR/storage_live_dead_in_statics.rs:+18:1: +18:2\n         StorageDead(_1);                 // scope 0 at $DIR/storage_live_dead_in_statics.rs:+18:1: +18:2\n-        return;                          // scope 0 at $DIR/storage_live_dead_in_statics.rs:+0:1: +18:2\n+        return;                          // scope 0 at $DIR/storage_live_dead_in_statics.rs:+0:1: +18:3\n     }\n }"}, {"sha": "5579d25a14fda49d16badc9f1123b158acf62adc", "filename": "src/test/mir-opt/unusual_item_types.{impl#0}-ASSOCIATED_CONSTANT.mir_map.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7Bimpl%230%7D-ASSOCIATED_CONSTANT.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7Bimpl%230%7D-ASSOCIATED_CONSTANT.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7Bimpl%230%7D-ASSOCIATED_CONSTANT.mir_map.0.mir?ref=1f370d9437795d8ad8382d106b3e55715ab0d251", "patch": "@@ -5,6 +5,6 @@ const <impl at $DIR/unusual-item-types.rs:9:1: 9:7>::ASSOCIATED_CONSTANT: i32 =\n \n     bb0: {\n         _0 = const 2_i32;                // scope 0 at $DIR/unusual-item-types.rs:+0:38: +0:39\n-        return;                          // scope 0 at $DIR/unusual-item-types.rs:+0:5: +0:39\n+        return;                          // scope 0 at $DIR/unusual-item-types.rs:+0:5: +0:40\n     }\n }"}, {"sha": "c4cd9c2a49fd7562bee5c160cdba4580ecec8a5c", "filename": "src/test/ui/associated-consts/defaults-cyclic-fail.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-cyclic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-cyclic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-cyclic-fail.stderr?ref=1f370d9437795d8ad8382d106b3e55715ab0d251", "patch": "@@ -2,13 +2,13 @@ error[E0391]: cycle detected when const-evaluating + checking `Tr::A`\n   --> $DIR/defaults-cyclic-fail.rs:5:5\n    |\n LL |     const A: u8 = Self::B;\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: ...which requires const-evaluating + checking `Tr::B`...\n   --> $DIR/defaults-cyclic-fail.rs:8:5\n    |\n LL |     const B: u8 = Self::A;\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which again requires const-evaluating + checking `Tr::A`, completing the cycle\n note: cycle used when const-evaluating + checking `main::promoted[1]`\n   --> $DIR/defaults-cyclic-fail.rs:16:16"}, {"sha": "c8c57bccb5017a10e9474af25f94b1eaf9981636", "filename": "src/test/ui/associated-consts/issue-24949-assoc-const-static-recursion-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-impl.stderr?ref=1f370d9437795d8ad8382d106b3e55715ab0d251", "patch": "@@ -13,7 +13,7 @@ note: ...which requires const-evaluating + checking `IMPL_REF_BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-impl.rs:7:1\n    |\n LL | const IMPL_REF_BAR: u32 = GlobalImplRef::BAR;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires const-evaluating + checking `<impl at $DIR/issue-24949-assoc-const-static-recursion-impl.rs:11:1: 11:19>::BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-impl.rs:12:5\n    |"}, {"sha": "76ed8d4a6e864a5ed8533370358f39b1ef915b02", "filename": "src/test/ui/associated-consts/issue-24949-assoc-const-static-recursion-trait-default.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait-default.stderr?ref=1f370d9437795d8ad8382d106b3e55715ab0d251", "patch": "@@ -13,7 +13,7 @@ note: ...which requires const-evaluating + checking `DEFAULT_REF_BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-trait-default.rs:11:1\n    |\n LL | const DEFAULT_REF_BAR: u32 = <GlobalDefaultRef>::BAR;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires const-evaluating + checking `FooDefault::BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-trait-default.rs:8:5\n    |"}, {"sha": "6a98f08f3d3aeeaffd11f1f5f96e2e445e276406", "filename": "src/test/ui/associated-consts/issue-24949-assoc-const-static-recursion-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fissue-24949-assoc-const-static-recursion-trait.stderr?ref=1f370d9437795d8ad8382d106b3e55715ab0d251", "patch": "@@ -13,7 +13,7 @@ note: ...which requires const-evaluating + checking `TRAIT_REF_BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-trait.rs:7:1\n    |\n LL | const TRAIT_REF_BAR: u32 = <GlobalTraitRef>::BAR;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires const-evaluating + checking `<impl at $DIR/issue-24949-assoc-const-static-recursion-trait.rs:11:1: 11:28>::BAR`...\n   --> $DIR/issue-24949-assoc-const-static-recursion-trait.rs:12:5\n    |"}, {"sha": "9ac6c984cb0cdd8fedb3f9883455c20c40e68d65", "filename": "src/test/ui/consts/issue-36163.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fconsts%2Fissue-36163.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fconsts%2Fissue-36163.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-36163.stderr?ref=1f370d9437795d8ad8382d106b3e55715ab0d251", "patch": "@@ -8,7 +8,7 @@ note: ...which requires const-evaluating + checking `A`...\n   --> $DIR/issue-36163.rs:1:1\n    |\n LL | const A: isize = Foo::B as isize;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which again requires const-evaluating + checking `Foo::B::{constant#0}`, completing the cycle\n note: cycle used when simplifying constant for the type system `Foo::B::{constant#0}`\n   --> $DIR/issue-36163.rs:4:9"}, {"sha": "4856418ed600229d153ce311781e0b01196b158c", "filename": "src/test/ui/issues/issue-17252.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fissues%2Fissue-17252.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fissues%2Fissue-17252.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17252.stderr?ref=1f370d9437795d8ad8382d106b3e55715ab0d251", "patch": "@@ -2,7 +2,7 @@ error[E0391]: cycle detected when const-evaluating + checking `FOO`\n   --> $DIR/issue-17252.rs:1:1\n    |\n LL | const FOO: usize = FOO;\n-   | ^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: ...which immediately requires const-evaluating + checking `FOO` again\n note: cycle used when const-evaluating + checking `main::{constant#0}`"}, {"sha": "074939f68a889737ece861b367bd267718387bec", "filename": "src/test/ui/issues/issue-23302-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fissues%2Fissue-23302-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fissues%2Fissue-23302-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23302-3.stderr?ref=1f370d9437795d8ad8382d106b3e55715ab0d251", "patch": "@@ -2,13 +2,13 @@ error[E0391]: cycle detected when const-evaluating + checking `A`\n   --> $DIR/issue-23302-3.rs:1:1\n    |\n LL | const A: i32 = B;\n-   | ^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^\n    |\n note: ...which requires const-evaluating + checking `B`...\n   --> $DIR/issue-23302-3.rs:3:1\n    |\n LL | const B: i32 = A;\n-   | ^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^\n    = note: ...which again requires const-evaluating + checking `A`, completing the cycle\n note: cycle used when simplifying constant for the type system `A`\n   --> $DIR/issue-23302-3.rs:1:1"}, {"sha": "ff16bf0e078fc191aac6f4729b705846003415f8", "filename": "src/test/ui/nll/closure-requirements/escape-argument-callee.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr?ref=1f370d9437795d8ad8382d106b3e55715ab0d251", "patch": "@@ -2,7 +2,7 @@ note: no external requirements\n   --> $DIR/escape-argument-callee.rs:26:38\n    |\n LL |         let mut closure = expect_sig(|p, y| *p = y);\n-   |                                      ^^^^^^\n+   |                                      ^^^^^^^^^^^^^\n    |\n    = note: defining type: test::{closure#0} with closure substs [\n                i16,"}, {"sha": "49ec0dd931ac0e42c5ebd910322277bba7ed346d", "filename": "src/test/ui/nll/closure-requirements/escape-argument.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr?ref=1f370d9437795d8ad8382d106b3e55715ab0d251", "patch": "@@ -2,7 +2,7 @@ note: no external requirements\n   --> $DIR/escape-argument.rs:26:38\n    |\n LL |         let mut closure = expect_sig(|p, y| *p = y);\n-   |                                      ^^^^^^\n+   |                                      ^^^^^^^^^^^^^\n    |\n    = note: defining type: test::{closure#0} with closure substs [\n                i16,"}, {"sha": "f0ae4c7fb0492430dc6171bfa54401647dbdbb44", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-nested.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr?ref=1f370d9437795d8ad8382d106b3e55715ab0d251", "patch": "@@ -2,7 +2,7 @@ note: external requirements\n   --> $DIR/escape-upvar-nested.rs:21:32\n    |\n LL |             let mut closure1 = || p = &y;\n-   |                                ^^\n+   |                                ^^^^^^^^^\n    |\n    = note: defining type: test::{closure#0}::{closure#0} with closure substs [\n                i16,\n@@ -15,8 +15,12 @@ LL |             let mut closure1 = || p = &y;\n note: external requirements\n   --> $DIR/escape-upvar-nested.rs:20:27\n    |\n-LL |         let mut closure = || {\n-   |                           ^^\n+LL |           let mut closure = || {\n+   |  ___________________________^\n+LL | |             let mut closure1 = || p = &y;\n+LL | |             closure1();\n+LL | |         };\n+   | |_________^\n    |\n    = note: defining type: test::{closure#0} with closure substs [\n                i16,"}, {"sha": "e99fc4b43a23ddb050f7653c70ae323a21b2de31", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr?ref=1f370d9437795d8ad8382d106b3e55715ab0d251", "patch": "@@ -2,7 +2,7 @@ note: external requirements\n   --> $DIR/escape-upvar-ref.rs:23:27\n    |\n LL |         let mut closure = || p = &y;\n-   |                           ^^\n+   |                           ^^^^^^^^^\n    |\n    = note: defining type: test::{closure#0} with closure substs [\n                i16,"}, {"sha": "11420efaa066eeecb1bdf521159525930ac5e63d", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-fail-no-postdom.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr?ref=1f370d9437795d8ad8382d106b3e55715ab0d251", "patch": "@@ -1,8 +1,12 @@\n note: no external requirements\n   --> $DIR/propagate-approximated-fail-no-postdom.rs:43:9\n    |\n-LL |         |_outlives1, _outlives2, _outlives3, x, y| {\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | /         |_outlives1, _outlives2, _outlives3, x, y| {\n+LL | |             // Only works if 'x: 'y:\n+LL | |             let p = x.get();\n+LL | |             demand_y(x, y, p)\n+LL | |         },\n+   | |_________^\n    |\n    = note: defining type: supply::{closure#0} with closure substs [\n                i16,"}, {"sha": "98c3c28fb43ff8382ee5c02e9dca9a78ff75f405", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-ref.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr?ref=1f370d9437795d8ad8382d106b3e55715ab0d251", "patch": "@@ -1,8 +1,13 @@\n note: external requirements\n   --> $DIR/propagate-approximated-ref.rs:43:47\n    |\n-LL |     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n-   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |       establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n+   |  _______________________________________________^\n+LL | |         // Only works if 'x: 'y:\n+LL | |         demand_y(x, y, x.get())\n+LL | |\n+LL | |     });\n+   | |_____^\n    |\n    = note: defining type: supply::{closure#0} with closure substs [\n                i16,"}, {"sha": "3ab55b370c2318e7b3f991f5f97996d245698e87", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-comparing-against-free.stderr", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr?ref=1f370d9437795d8ad8382d106b3e55715ab0d251", "patch": "@@ -1,8 +1,12 @@\n note: no external requirements\n   --> $DIR/propagate-approximated-shorter-to-static-comparing-against-free.rs:21:15\n    |\n-LL |     foo(cell, |cell_a, cell_x| {\n-   |               ^^^^^^^^^^^^^^^^\n+LL |       foo(cell, |cell_a, cell_x| {\n+   |  _______________^\n+LL | |         cell_a.set(cell_x.get()); // forces 'x: 'a, error in closure\n+LL | |\n+LL | |     })\n+   | |_____^\n    |\n    = note: defining type: case1::{closure#0} with closure substs [\n                i32,\n@@ -37,8 +41,11 @@ LL | | }\n note: external requirements\n   --> $DIR/propagate-approximated-shorter-to-static-comparing-against-free.rs:35:15\n    |\n-LL |     foo(cell, |cell_a, cell_x| {\n-   |               ^^^^^^^^^^^^^^^^\n+LL |       foo(cell, |cell_a, cell_x| {\n+   |  _______________^\n+LL | |         cell_x.set(cell_a.get()); // forces 'a: 'x, implies 'a = 'static -> borrow error\n+LL | |     })\n+   | |_____^\n    |\n    = note: defining type: case2::{closure#0} with closure substs [\n                i32,"}, {"sha": "6c2314d197b407216be4ffa4e0f0e6fd01d6fbde", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-no-bound.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr?ref=1f370d9437795d8ad8382d106b3e55715ab0d251", "patch": "@@ -1,8 +1,14 @@\n note: external requirements\n   --> $DIR/propagate-approximated-shorter-to-static-no-bound.rs:32:47\n    |\n-LL |     establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n-   |                                               ^^^^^^^^^^^^^^^^^\n+LL |       establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n+   |  _______________________________________________^\n+LL | |\n+LL | |\n+LL | |         // Only works if 'x: 'y:\n+LL | |         demand_y(x, y, x.get())\n+LL | |     });\n+   | |_____^\n    |\n    = note: defining type: supply::{closure#0} with closure substs [\n                i16,"}, {"sha": "22d11552a3f9e166ad835cd6706e5b76a01b88e0", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-wrong-bound.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr?ref=1f370d9437795d8ad8382d106b3e55715ab0d251", "patch": "@@ -1,8 +1,14 @@\n note: external requirements\n   --> $DIR/propagate-approximated-shorter-to-static-wrong-bound.rs:35:47\n    |\n-LL |     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n-   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |       establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n+   |  _______________________________________________^\n+LL | |\n+LL | |\n+LL | |         // Only works if 'x: 'y:\n+LL | |         demand_y(x, y, x.get())\n+LL | |     });\n+   | |_____^\n    |\n    = note: defining type: supply::{closure#0} with closure substs [\n                i16,"}, {"sha": "2ec9d4d8db1a6aa4d3b133b8bf171292bc1ce56e", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-val.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr?ref=1f370d9437795d8ad8382d106b3e55715ab0d251", "patch": "@@ -1,8 +1,13 @@\n note: external requirements\n   --> $DIR/propagate-approximated-val.rs:36:45\n    |\n-LL |     establish_relationships(cell_a, cell_b, |outlives1, outlives2, x, y| {\n-   |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |       establish_relationships(cell_a, cell_b, |outlives1, outlives2, x, y| {\n+   |  _____________________________________________^\n+LL | |         // Only works if 'x: 'y:\n+LL | |         demand_y(outlives1, outlives2, x.get())\n+LL | |\n+LL | |     });\n+   | |_____^\n    |\n    = note: defining type: test::{closure#0} with closure substs [\n                i16,"}, {"sha": "21e4232c788fb928c4a64b2e1fe3b0d1c6ab327d", "filename": "src/test/ui/nll/closure-requirements/propagate-despite-same-free-region.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr?ref=1f370d9437795d8ad8382d106b3e55715ab0d251", "patch": "@@ -1,8 +1,12 @@\n note: external requirements\n   --> $DIR/propagate-despite-same-free-region.rs:42:9\n    |\n-LL |         |_outlives1, _outlives2, x, y| {\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | /         |_outlives1, _outlives2, x, y| {\n+LL | |             // Only works if 'x: 'y:\n+LL | |             let p = x.get();\n+LL | |             demand_y(x, y, p)\n+LL | |         },\n+   | |_________^\n    |\n    = note: defining type: supply::{closure#0} with closure substs [\n                i16,"}, {"sha": "8b9b0435420573c0dc5e7ec7f65c67bc3d50c4cc", "filename": "src/test/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-no-bounds.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr?ref=1f370d9437795d8ad8382d106b3e55715ab0d251", "patch": "@@ -1,8 +1,13 @@\n note: no external requirements\n   --> $DIR/propagate-fail-to-approximate-longer-no-bounds.rs:35:47\n    |\n-LL |     establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n-   |                                               ^^^^^^^^^^^^^^^^^\n+LL |       establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n+   |  _______________________________________________^\n+LL | |         // Only works if 'x: 'y:\n+LL | |         demand_y(x, y, x.get())\n+LL | |\n+LL | |     });\n+   | |_____^\n    |\n    = note: defining type: supply::{closure#0} with closure substs [\n                i16,"}, {"sha": "060ce690f0306ac492a5d366b9318869cb07be52", "filename": "src/test/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-wrong-bounds.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr?ref=1f370d9437795d8ad8382d106b3e55715ab0d251", "patch": "@@ -1,8 +1,13 @@\n note: no external requirements\n   --> $DIR/propagate-fail-to-approximate-longer-wrong-bounds.rs:39:47\n    |\n-LL |     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n-   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |       establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n+   |  _______________________________________________^\n+LL | |         // Only works if 'x: 'y:\n+LL | |         demand_y(x, y, x.get())\n+LL | |\n+LL | |     });\n+   | |_____^\n    |\n    = note: defining type: supply::{closure#0} with closure substs [\n                i16,"}, {"sha": "08605efa2ea9cba750e333d96162a8f7754f1d13", "filename": "src/test/ui/nll/closure-requirements/propagate-from-trait-match.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr?ref=1f370d9437795d8ad8382d106b3e55715ab0d251", "patch": "@@ -1,8 +1,15 @@\n note: external requirements\n   --> $DIR/propagate-from-trait-match.rs:32:36\n    |\n-LL |     establish_relationships(value, |value| {\n-   |                                    ^^^^^^^\n+LL |       establish_relationships(value, |value| {\n+   |  ____________________________________^\n+LL | |\n+LL | |\n+LL | |         // This function call requires that\n+...  |\n+LL | |         require(value);\n+LL | |     });\n+   | |_____^\n    |\n    = note: defining type: supply::<'_#1r, T>::{closure#0} with closure substs [\n                i32,"}, {"sha": "5fc1d5c43618154f55ac5fc9644402799d72a4cd", "filename": "src/test/ui/nll/closure-requirements/return-wrong-bound-region.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr?ref=1f370d9437795d8ad8382d106b3e55715ab0d251", "patch": "@@ -2,7 +2,7 @@ note: no external requirements\n   --> $DIR/return-wrong-bound-region.rs:11:16\n    |\n LL |     expect_sig(|a, b| b); // ought to return `a`\n-   |                ^^^^^^\n+   |                ^^^^^^^^\n    |\n    = note: defining type: test::{closure#0} with closure substs [\n                i16,"}, {"sha": "8fe25181da1a035c8a7572ee0cebd352861123f7", "filename": "src/test/ui/nll/ty-outlives/projection-no-regions-closure.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr?ref=1f370d9437795d8ad8382d106b3e55715ab0d251", "patch": "@@ -2,7 +2,7 @@ note: external requirements\n   --> $DIR/projection-no-regions-closure.rs:25:23\n    |\n LL |     with_signature(x, |mut y| Box::new(y.next()))\n-   |                       ^^^^^^^\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: no_region::<'_#1r, T>::{closure#0} with closure substs [\n                i32,\n@@ -39,7 +39,7 @@ note: external requirements\n   --> $DIR/projection-no-regions-closure.rs:34:23\n    |\n LL |     with_signature(x, |mut y| Box::new(y.next()))\n-   |                       ^^^^^^^\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: correct_region::<'_#1r, T>::{closure#0} with closure substs [\n                i32,\n@@ -66,7 +66,7 @@ note: external requirements\n   --> $DIR/projection-no-regions-closure.rs:42:23\n    |\n LL |     with_signature(x, |mut y| Box::new(y.next()))\n-   |                       ^^^^^^^\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: wrong_region::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,\n@@ -103,7 +103,7 @@ note: external requirements\n   --> $DIR/projection-no-regions-closure.rs:52:23\n    |\n LL |     with_signature(x, |mut y| Box::new(y.next()))\n-   |                       ^^^^^^^\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: outlives_region::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,"}, {"sha": "caf2e3c47475564a69ef1dda33abc380a417441f", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-closure.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr?ref=1f370d9437795d8ad8382d106b3e55715ab0d251", "patch": "@@ -2,7 +2,7 @@ note: external requirements\n   --> $DIR/projection-one-region-closure.rs:45:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: no_relationships_late::<'_#1r, T>::{closure#0} with closure substs [\n                i32,\n@@ -56,7 +56,7 @@ note: external requirements\n   --> $DIR/projection-one-region-closure.rs:56:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: no_relationships_early::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,\n@@ -109,7 +109,7 @@ note: external requirements\n   --> $DIR/projection-one-region-closure.rs:70:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: projection_outlives::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,\n@@ -137,7 +137,7 @@ note: external requirements\n   --> $DIR/projection-one-region-closure.rs:80:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: elements_outlive::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,"}, {"sha": "4eebe682d4fbcbb191ed6b8799ec3d8b0b382183", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-trait-bound-closure.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr?ref=1f370d9437795d8ad8382d106b3e55715ab0d251", "patch": "@@ -2,7 +2,7 @@ note: external requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:37:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: no_relationships_late::<'_#1r, T>::{closure#0} with closure substs [\n                i32,\n@@ -44,7 +44,7 @@ note: external requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:47:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: no_relationships_early::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,\n@@ -85,7 +85,7 @@ note: external requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:60:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: projection_outlives::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,\n@@ -113,7 +113,7 @@ note: external requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:69:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: elements_outlive::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,\n@@ -141,7 +141,7 @@ note: external requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:81:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: one_region::<'_#1r, T>::{closure#0} with closure substs [\n                i32,"}, {"sha": "46a02598e19bce96c4c966c39f087d2a31e14103", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-trait-bound-static-closure.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.stderr?ref=1f370d9437795d8ad8382d106b3e55715ab0d251", "patch": "@@ -2,7 +2,7 @@ note: no external requirements\n   --> $DIR/projection-one-region-trait-bound-static-closure.rs:36:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: no_relationships_late::<'_#1r, T>::{closure#0} with closure substs [\n                i32,\n@@ -28,7 +28,7 @@ note: no external requirements\n   --> $DIR/projection-one-region-trait-bound-static-closure.rs:45:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: no_relationships_early::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,\n@@ -54,7 +54,7 @@ note: no external requirements\n   --> $DIR/projection-one-region-trait-bound-static-closure.rs:64:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: projection_outlives::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,\n@@ -80,7 +80,7 @@ note: no external requirements\n   --> $DIR/projection-one-region-trait-bound-static-closure.rs:73:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: elements_outlive::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,\n@@ -106,7 +106,7 @@ note: no external requirements\n   --> $DIR/projection-one-region-trait-bound-static-closure.rs:85:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: one_region::<'_#1r, T>::{closure#0} with closure substs [\n                i32,"}, {"sha": "1ee788b40ab9ea296f965e32b8d523dc5801c150", "filename": "src/test/ui/nll/ty-outlives/projection-two-region-trait-bound-closure.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr?ref=1f370d9437795d8ad8382d106b3e55715ab0d251", "patch": "@@ -2,7 +2,7 @@ note: external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:38:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: no_relationships_late::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,\n@@ -40,7 +40,7 @@ note: external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:48:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: no_relationships_early::<'_#1r, '_#2r, '_#3r, T>::{closure#0} with closure substs [\n                i32,\n@@ -77,7 +77,7 @@ note: external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:61:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: projection_outlives::<'_#1r, '_#2r, '_#3r, T>::{closure#0} with closure substs [\n                i32,\n@@ -105,7 +105,7 @@ note: external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:70:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: elements_outlive1::<'_#1r, '_#2r, '_#3r, T>::{closure#0} with closure substs [\n                i32,\n@@ -133,7 +133,7 @@ note: external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:79:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: elements_outlive2::<'_#1r, '_#2r, '_#3r, T>::{closure#0} with closure substs [\n                i32,\n@@ -161,7 +161,7 @@ note: external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:87:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: two_regions::<'_#1r, T>::{closure#0} with closure substs [\n                i32,\n@@ -203,7 +203,7 @@ note: external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:97:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: two_regions_outlive::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,\n@@ -231,7 +231,7 @@ note: external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:109:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: one_region::<'_#1r, T>::{closure#0} with closure substs [\n                i32,"}, {"sha": "a4588730b3f8746d26c3dd1fb51e944509012405", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-approximate-lower-bound.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr?ref=1f370d9437795d8ad8382d106b3e55715ab0d251", "patch": "@@ -2,7 +2,7 @@ note: external requirements\n   --> $DIR/ty-param-closure-approximate-lower-bound.rs:24:24\n    |\n LL |     twice(cell, value, |a, b| invoke(a, b));\n-   |                        ^^^^^^\n+   |                        ^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: generic::<T>::{closure#0} with closure substs [\n                i16,\n@@ -27,7 +27,7 @@ note: external requirements\n   --> $DIR/ty-param-closure-approximate-lower-bound.rs:29:24\n    |\n LL |     twice(cell, value, |a, b| invoke(a, b));\n-   |                        ^^^^^^\n+   |                        ^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: generic_fail::<T>::{closure#0} with closure substs [\n                i16,"}, {"sha": "084dd93cb86b9b3376312c46d03ea202a0c201f9", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-return-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr?ref=1f370d9437795d8ad8382d106b3e55715ab0d251", "patch": "@@ -2,7 +2,7 @@ note: external requirements\n   --> $DIR/ty-param-closure-outlives-from-return-type.rs:26:23\n    |\n LL |     with_signature(x, |y| y)\n-   |                       ^^^\n+   |                       ^^^^^\n    |\n    = note: defining type: no_region::<'_#1r, T>::{closure#0} with closure substs [\n                i32,"}, {"sha": "11a737ba291f06670be5603f2556d8a35b27a795", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-where-clause.stderr", "status": "modified", "additions": 31, "deletions": 8, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr?ref=1f370d9437795d8ad8382d106b3e55715ab0d251", "patch": "@@ -1,8 +1,15 @@\n note: external requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:27:26\n    |\n-LL |     with_signature(a, b, |x, y| {\n-   |                          ^^^^^^\n+LL |       with_signature(a, b, |x, y| {\n+   |  __________________________^\n+LL | |\n+LL | |         //\n+LL | |         // See `correct_region`, which explains the point of this\n+...  |\n+LL | |         require(&x, &y)\n+LL | |     })\n+   | |_____^\n    |\n    = note: defining type: no_region::<T>::{closure#0} with closure substs [\n                i32,\n@@ -48,8 +55,15 @@ LL | fn no_region<'a, T: 'a>(a: Cell<&'a ()>, b: T) {\n note: external requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:43:26\n    |\n-LL |     with_signature(a, b, |x, y| {\n-   |                          ^^^^^^\n+LL |       with_signature(a, b, |x, y| {\n+   |  __________________________^\n+LL | |         // Key point of this test:\n+LL | |         //\n+LL | |         // The *closure* is being type-checked with all of its free\n+...  |\n+LL | |         require(&x, &y)\n+LL | |     })\n+   | |_____^\n    |\n    = note: defining type: correct_region::<'_#1r, T>::{closure#0} with closure substs [\n                i32,\n@@ -76,8 +90,13 @@ LL | | }\n note: external requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:64:26\n    |\n-LL |     with_signature(a, b, |x, y| {\n-   |                          ^^^^^^\n+LL |       with_signature(a, b, |x, y| {\n+   |  __________________________^\n+LL | |\n+LL | |         // See `correct_region`\n+LL | |         require(&x, &y)\n+LL | |     })\n+   | |_____^\n    |\n    = note: defining type: wrong_region::<'_#1r, T>::{closure#0} with closure substs [\n                i32,\n@@ -121,8 +140,12 @@ LL |     T: 'b + 'a,\n note: external requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:77:26\n    |\n-LL |     with_signature(a, b, |x, y| {\n-   |                          ^^^^^^\n+LL |       with_signature(a, b, |x, y| {\n+   |  __________________________^\n+LL | |         // See `correct_region`\n+LL | |         require(&x, &y)\n+LL | |     })\n+   | |_____^\n    |\n    = note: defining type: outlives_region::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,"}, {"sha": "3326fa521fc9cea4efc8e4d26b039fb90f1c7663", "filename": "src/test/ui/nll/user-annotations/adt-nullary-enums.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-nullary-enums.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-nullary-enums.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-nullary-enums.stderr?ref=1f370d9437795d8ad8382d106b3e55715ab0d251", "patch": "@@ -30,14 +30,15 @@ error[E0597]: `c` does not live long enough\n    |\n LL | fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n    |                                              -- lifetime `'a` defined here\n-LL |     let _closure = || {\n-   |                     - `c` dropped here while still borrowed\n ...\n LL |             SomeEnum::SomeVariant(Cell::new(&c)),\n    |                                   ----------^^-\n    |                                   |         |\n    |                                   |         borrowed value does not live long enough\n    |                                   argument requires that `c` is borrowed for `'a`\n+...\n+LL |     };\n+   |     - `c` dropped here while still borrowed\n \n error: aborting due to 3 previous errors\n "}, {"sha": "9664fb9f548317ea13151a99abb06665b64ab03b", "filename": "src/test/ui/nll/user-annotations/adt-tuple-struct-calls.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-struct-calls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-struct-calls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-struct-calls.stderr?ref=1f370d9437795d8ad8382d106b3e55715ab0d251", "patch": "@@ -28,28 +28,28 @@ error[E0597]: `c` does not live long enough\n    |\n LL | fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n    |                                              -- lifetime `'a` defined here\n-LL |     let _closure = || {\n-   |                     - `c` dropped here while still borrowed\n ...\n LL |         f(&c);\n    |         --^^-\n    |         | |\n    |         | borrowed value does not live long enough\n    |         argument requires that `c` is borrowed for `'a`\n+LL |     };\n+   |     - `c` dropped here while still borrowed\n \n error[E0597]: `c` does not live long enough\n   --> $DIR/adt-tuple-struct-calls.rs:53:11\n    |\n LL |     let f = SomeStruct::<&'a u32>;\n    |         - lifetime `'1` appears in the type of `f`\n-LL |     let _closure = || {\n-   |                     - `c` dropped here while still borrowed\n-LL |         let c = 66;\n+...\n LL |         f(&c);\n    |         --^^-\n    |         | |\n    |         | borrowed value does not live long enough\n    |         argument requires that `c` is borrowed for `'1`\n+LL |     };\n+   |     - `c` dropped here while still borrowed\n \n error: aborting due to 4 previous errors\n "}, {"sha": "e0640da39e2b62fb3211d3c89e7fdab35b910ab9", "filename": "src/test/ui/nll/user-annotations/fns.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Ffns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Ffns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Ffns.stderr?ref=1f370d9437795d8ad8382d106b3e55715ab0d251", "patch": "@@ -28,14 +28,14 @@ error[E0597]: `c` does not live long enough\n    |\n LL | fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n    |                                              -- lifetime `'a` defined here\n-LL |     let _closure = || {\n-   |                     - `c` dropped here while still borrowed\n-LL |         let c = 66;\n+...\n LL |         some_fn::<&'a u32>(&c);\n    |         -------------------^^-\n    |         |                  |\n    |         |                  borrowed value does not live long enough\n    |         argument requires that `c` is borrowed for `'a`\n+LL |     };\n+   |     - `c` dropped here while still borrowed\n \n error: aborting due to 3 previous errors\n "}, {"sha": "10447e45a6d422de9a6ad372f19bf5083a0a1f77", "filename": "src/test/ui/nll/user-annotations/method-call.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-call.stderr?ref=1f370d9437795d8ad8382d106b3e55715ab0d251", "patch": "@@ -29,14 +29,13 @@ error[E0597]: `c` does not live long enough\n LL | fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n    |                                              -- lifetime `'a` defined here\n ...\n-LL |     let _closure = || {\n-   |                     - `c` dropped here while still borrowed\n-LL |         let c = 66;\n LL |         a.method::<&'a u32>(b,  &c);\n    |         ------------------------^^-\n    |         |                       |\n    |         |                       borrowed value does not live long enough\n    |         argument requires that `c` is borrowed for `'a`\n+LL |     };\n+   |     - `c` dropped here while still borrowed\n \n error: aborting due to 3 previous errors\n "}, {"sha": "e7851833e93b23a7f77a130197e6dd19f2dfb33d", "filename": "src/test/ui/nll/user-annotations/method-ufcs-3.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f370d9437795d8ad8382d106b3e55715ab0d251/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fmethod-ufcs-3.stderr?ref=1f370d9437795d8ad8382d106b3e55715ab0d251", "patch": "@@ -29,14 +29,13 @@ error[E0597]: `c` does not live long enough\n LL | fn annot_reference_named_lifetime_in_closure<'a>(_: &'a u32) {\n    |                                              -- lifetime `'a` defined here\n ...\n-LL |     let _closure = || {\n-   |                     - `c` dropped here while still borrowed\n-LL |         let c = 66;\n LL |         <_ as Bazoom<_>>::method::<&'a u32>(&a, b, &c);\n    |         -------------------------------------------^^-\n    |         |                                          |\n    |         |                                          borrowed value does not live long enough\n    |         argument requires that `c` is borrowed for `'a`\n+LL |     };\n+   |     - `c` dropped here while still borrowed\n \n error: aborting due to 3 previous errors\n "}]}