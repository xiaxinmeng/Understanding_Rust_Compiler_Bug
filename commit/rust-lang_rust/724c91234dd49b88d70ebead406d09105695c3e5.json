{"sha": "724c91234dd49b88d70ebead406d09105695c3e5", "node_id": "C_kwDOAAsO6NoAKDcyNGM5MTIzNGRkNDliODhkNzBlYmVhZDQwNmQwOTEwNTY5NWMzZTU", "commit": {"author": {"name": "Ziv Dunkelman", "email": "ziv.dunkelman@nextsilicon.com", "date": "2022-06-08T14:30:16Z"}, "committer": {"name": "Ziv Dunkelman", "email": "ziv.dunkelman@nextsilicon.com", "date": "2022-07-14T19:21:26Z"}, "message": "rustc: add ability to output regular LTO bitcode modules\n\nAdding the option to control from rustc CLI\nif the resulted \".o\" bitcode module files are with\nthinLTO info or regular LTO info.\n\nAllows using \"-lto-embed-bitcode=optimized\" during linkage\ncorrectly.\n\nSigned-off-by: Ziv Dunkelman <ziv.dunkelman@nextsilicon.com>", "tree": {"sha": "9ec0f63fb06cfab879d0939d3e467d63decffa59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ec0f63fb06cfab879d0939d3e467d63decffa59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/724c91234dd49b88d70ebead406d09105695c3e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/724c91234dd49b88d70ebead406d09105695c3e5", "html_url": "https://github.com/rust-lang/rust/commit/724c91234dd49b88d70ebead406d09105695c3e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/724c91234dd49b88d70ebead406d09105695c3e5/comments", "author": {"login": "darkness-ai", "id": 85357033, "node_id": "MDQ6VXNlcjg1MzU3MDMz", "avatar_url": "https://avatars.githubusercontent.com/u/85357033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/darkness-ai", "html_url": "https://github.com/darkness-ai", "followers_url": "https://api.github.com/users/darkness-ai/followers", "following_url": "https://api.github.com/users/darkness-ai/following{/other_user}", "gists_url": "https://api.github.com/users/darkness-ai/gists{/gist_id}", "starred_url": "https://api.github.com/users/darkness-ai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/darkness-ai/subscriptions", "organizations_url": "https://api.github.com/users/darkness-ai/orgs", "repos_url": "https://api.github.com/users/darkness-ai/repos", "events_url": "https://api.github.com/users/darkness-ai/events{/privacy}", "received_events_url": "https://api.github.com/users/darkness-ai/received_events", "type": "User", "site_admin": false}, "committer": {"login": "darkness-ai", "id": 85357033, "node_id": "MDQ6VXNlcjg1MzU3MDMz", "avatar_url": "https://avatars.githubusercontent.com/u/85357033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/darkness-ai", "html_url": "https://github.com/darkness-ai", "followers_url": "https://api.github.com/users/darkness-ai/followers", "following_url": "https://api.github.com/users/darkness-ai/following{/other_user}", "gists_url": "https://api.github.com/users/darkness-ai/gists{/gist_id}", "starred_url": "https://api.github.com/users/darkness-ai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/darkness-ai/subscriptions", "organizations_url": "https://api.github.com/users/darkness-ai/orgs", "repos_url": "https://api.github.com/users/darkness-ai/repos", "events_url": "https://api.github.com/users/darkness-ai/events{/privacy}", "received_events_url": "https://api.github.com/users/darkness-ai/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ed9c64c3e63acac9bd77abce62501696c390450", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ed9c64c3e63acac9bd77abce62501696c390450", "html_url": "https://github.com/rust-lang/rust/commit/0ed9c64c3e63acac9bd77abce62501696c390450"}], "stats": {"total": 39, "additions": 32, "deletions": 7}, "files": [{"sha": "9f793a4ef63d444f912010274e89f58c04a7f92d", "filename": "compiler/rustc_codegen_llvm/src/back/lto.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/724c91234dd49b88d70ebead406d09105695c3e5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/724c91234dd49b88d70ebead406d09105695c3e5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs?ref=724c91234dd49b88d70ebead406d09105695c3e5", "patch": "@@ -199,7 +199,7 @@ pub(crate) fn run_thin(\n \n pub(crate) fn prepare_thin(module: ModuleCodegen<ModuleLlvm>) -> (String, ThinBuffer) {\n     let name = module.name.clone();\n-    let buffer = ThinBuffer::new(module.module_llvm.llmod());\n+    let buffer = ThinBuffer::new(module.module_llvm.llmod(), true);\n     (name, buffer)\n }\n \n@@ -709,9 +709,9 @@ unsafe impl Send for ThinBuffer {}\n unsafe impl Sync for ThinBuffer {}\n \n impl ThinBuffer {\n-    pub fn new(m: &llvm::Module) -> ThinBuffer {\n+    pub fn new(m: &llvm::Module, is_thin: bool) -> ThinBuffer {\n         unsafe {\n-            let buffer = llvm::LLVMRustThinLTOBufferCreate(m);\n+            let buffer = llvm::LLVMRustThinLTOBufferCreate(m, is_thin);\n             ThinBuffer(buffer)\n         }\n     }"}, {"sha": "534d32e8a90e994d97aeb27a788f6224d742be32", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/724c91234dd49b88d70ebead406d09105695c3e5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/724c91234dd49b88d70ebead406d09105695c3e5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=724c91234dd49b88d70ebead406d09105695c3e5", "patch": "@@ -790,7 +790,7 @@ pub(crate) unsafe fn codegen(\n             let _timer = cgcx\n                 .prof\n                 .generic_activity_with_arg(\"LLVM_module_codegen_make_bitcode\", &*module.name);\n-            let thin = ThinBuffer::new(llmod);\n+            let thin = ThinBuffer::new(llmod, config.emit_thin_lto);\n             let data = thin.data();\n \n             if let Some(bitcode_filename) = bc_out.file_name() {"}, {"sha": "1928d47df74ef4c830427e4428f56a80e3d38dbf", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/724c91234dd49b88d70ebead406d09105695c3e5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/724c91234dd49b88d70ebead406d09105695c3e5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=724c91234dd49b88d70ebead406d09105695c3e5", "patch": "@@ -2469,7 +2469,7 @@ extern \"C\" {\n     pub fn LLVMRustModuleBufferFree(p: &'static mut ModuleBuffer);\n     pub fn LLVMRustModuleCost(M: &Module) -> u64;\n \n-    pub fn LLVMRustThinLTOBufferCreate(M: &Module) -> &'static mut ThinLTOBuffer;\n+    pub fn LLVMRustThinLTOBufferCreate(M: &Module, is_thin: bool) -> &'static mut ThinLTOBuffer;\n     pub fn LLVMRustThinLTOBufferFree(M: &'static mut ThinLTOBuffer);\n     pub fn LLVMRustThinLTOBufferPtr(M: &ThinLTOBuffer) -> *const c_char;\n     pub fn LLVMRustThinLTOBufferLen(M: &ThinLTOBuffer) -> size_t;"}, {"sha": "ea60f6055f3d5291e543a18325fc87620e1d83f8", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/724c91234dd49b88d70ebead406d09105695c3e5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/724c91234dd49b88d70ebead406d09105695c3e5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=724c91234dd49b88d70ebead406d09105695c3e5", "patch": "@@ -99,6 +99,7 @@ pub struct ModuleConfig {\n     pub emit_ir: bool,\n     pub emit_asm: bool,\n     pub emit_obj: EmitObj,\n+    pub emit_thin_lto: bool,\n     pub bc_cmdline: String,\n \n     // Miscellaneous flags.  These are mostly copied from command-line\n@@ -218,6 +219,7 @@ impl ModuleConfig {\n                 false\n             ),\n             emit_obj,\n+            emit_thin_lto: sess.opts.unstable_opts.emit_thin_lto,\n             bc_cmdline: sess.target.bitcode_llvm_cmdline.to_string(),\n \n             verify_llvm_ir: sess.verify_llvm_ir(),"}, {"sha": "9cbbc603cd01e3fe04bc5bfa8f4f5149e81ff239", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/724c91234dd49b88d70ebead406d09105695c3e5/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/724c91234dd49b88d70ebead406d09105695c3e5/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=724c91234dd49b88d70ebead406d09105695c3e5", "patch": "@@ -734,6 +734,7 @@ fn test_unstable_options_tracking_hash() {\n     tracked!(drop_tracking, true);\n     tracked!(dual_proc_macros, true);\n     tracked!(dwarf_version, Some(5));\n+    tracked!(emit_thin_lto, false);\n     tracked!(fewer_names, Some(true));\n     tracked!(force_unstable_if_unmarked, true);\n     tracked!(fuel, Some((\"abc\".to_string(), 99)));"}, {"sha": "3aac4d83716cd4f28592c9f5660b195b9800de6c", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/724c91234dd49b88d70ebead406d09105695c3e5/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/724c91234dd49b88d70ebead406d09105695c3e5/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=724c91234dd49b88d70ebead406d09105695c3e5", "patch": "@@ -34,6 +34,7 @@\n #include \"llvm/Transforms/Utils/AddDiscriminators.h\"\n #include \"llvm/Transforms/Utils/FunctionImportUtils.h\"\n #include \"llvm/LTO/LTO.h\"\n+#include \"llvm/Bitcode/BitcodeWriterPass.h\"\n #include \"llvm-c/Transforms/PassManagerBuilder.h\"\n \n #include \"llvm/Transforms/Instrumentation.h\"\n@@ -1638,13 +1639,17 @@ struct LLVMRustThinLTOBuffer {\n };\n \n extern \"C\" LLVMRustThinLTOBuffer*\n-LLVMRustThinLTOBufferCreate(LLVMModuleRef M) {\n+LLVMRustThinLTOBufferCreate(LLVMModuleRef M, bool is_thin) {\n   auto Ret = std::make_unique<LLVMRustThinLTOBuffer>();\n   {\n     raw_string_ostream OS(Ret->data);\n     {\n       legacy::PassManager PM;\n-      PM.add(createWriteThinLTOBitcodePass(OS));\n+      if (is_thin) {\n+        PM.add(createWriteThinLTOBitcodePass(OS));\n+      } else {\n+        PM.add(createBitcodeWriterPass(OS));\n+      }\n       PM.run(*unwrap(M));\n     }\n   }"}, {"sha": "77c74a3022075383b539b09ee01165c8c1239f8d", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/724c91234dd49b88d70ebead406d09105695c3e5/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/724c91234dd49b88d70ebead406d09105695c3e5/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=724c91234dd49b88d70ebead406d09105695c3e5", "patch": "@@ -1277,6 +1277,8 @@ options! {\n         \"version of DWARF debug information to emit (default: 2 or 4, depending on platform)\"),\n     emit_stack_sizes: bool = (false, parse_bool, [UNTRACKED],\n         \"emit a section containing stack size metadata (default: no)\"),\n+    emit_thin_lto: bool = (true, parse_bool, [TRACKED],\n+        \"emit the bc module with thin LTO info (default: yes)\"),\n     fewer_names: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"reduce memory use by retaining fewer names within compilation artifacts (LLVM-IR) \\\n         (default: no)\"),"}, {"sha": "157edb20c30a5e3ade27ff47f92edc4ceede3459", "filename": "src/test/run-make-fulldeps/issue-84395-lto-embed-bitcode/Makefile", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/724c91234dd49b88d70ebead406d09105695c3e5/src%2Ftest%2Frun-make-fulldeps%2Fissue-84395-lto-embed-bitcode%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/724c91234dd49b88d70ebead406d09105695c3e5/src%2Ftest%2Frun-make-fulldeps%2Fissue-84395-lto-embed-bitcode%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-84395-lto-embed-bitcode%2FMakefile?ref=724c91234dd49b88d70ebead406d09105695c3e5", "patch": "@@ -0,0 +1,11 @@\n+# needs-matching-clang\n+\n+# This test makes sure the embed bitcode in elf created with\n+# lto-embed-bitcode=optimized is valid llvm BC module.\n+\n+-include ../../run-make-fulldeps/tools.mk\n+\n+all:\n+\t$(RUSTC) test.rs --target $(TARGET) -Clink-arg=-fuse-ld=lld -Clinker-plugin-lto -Clinker=$(CLANG) -Clink-arg=-Wl,--plugin-opt=-lto-embed-bitcode=optimized -Zemit-thin-lto=no\n+\t$(LLVM_BIN_DIR)/objcopy --dump-section .llvmbc=$(TMPDIR)/test.bc $(TMPDIR)/test\n+\t$(LLVM_BIN_DIR)/llvm-dis $(TMPDIR)/test.bc"}, {"sha": "47ad8c634112b312f330c58f581a654f46618be7", "filename": "src/test/run-make-fulldeps/issue-84395-lto-embed-bitcode/test.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/724c91234dd49b88d70ebead406d09105695c3e5/src%2Ftest%2Frun-make-fulldeps%2Fissue-84395-lto-embed-bitcode%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/724c91234dd49b88d70ebead406d09105695c3e5/src%2Ftest%2Frun-make-fulldeps%2Fissue-84395-lto-embed-bitcode%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-84395-lto-embed-bitcode%2Ftest.rs?ref=724c91234dd49b88d70ebead406d09105695c3e5", "patch": "@@ -0,0 +1,3 @@\n+fn main() {\n+    println!(\"Hello World!\");\n+}"}, {"sha": "54c4de0e03187b153de56cf9ce8baa8342b7dc7e", "filename": "src/test/rustdoc-ui/z-help.stdout", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/724c91234dd49b88d70ebead406d09105695c3e5/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/724c91234dd49b88d70ebead406d09105695c3e5/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout?ref=724c91234dd49b88d70ebead406d09105695c3e5", "patch": "@@ -35,6 +35,7 @@\n     -Z                       dump-mir-spanview=val -- in addition to `.mir` files, create `.html` files to view spans for all `statement`s (including terminators), only `terminator` spans, or computed `block` spans (one span encompassing a block's terminator and all statements). If `-Z instrument-coverage` is also enabled, create an additional `.html` file showing the computed coverage spans.\n     -Z                           dwarf-version=val -- version of DWARF debug information to emit (default: 2 or 4, depending on platform)\n     -Z                        emit-stack-sizes=val -- emit a section containing stack size metadata (default: no)\n+    -Z                           emit-thin-lto=val -- emit the bc module with thin LTO info (default: yes)\n     -Z                             fewer-names=val -- reduce memory use by retaining fewer names within compilation artifacts (LLVM-IR) (default: no)\n     -Z              force-unstable-if-unmarked=val -- force all crates to be `rustc_private` unstable (default: no)\n     -Z                                    fuel=val -- set the optimization fuel quota for a crate"}]}