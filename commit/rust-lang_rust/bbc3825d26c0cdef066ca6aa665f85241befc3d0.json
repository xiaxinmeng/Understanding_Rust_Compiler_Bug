{"sha": "bbc3825d26c0cdef066ca6aa665f85241befc3d0", "node_id": "C_kwDOAAsO6NoAKGJiYzM4MjVkMjZjMGNkZWYwNjZjYTZhYTY2NWY4NTI0MWJlZmMzZDA", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-11-20T03:00:37Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-11-20T03:00:37Z"}, "message": "rustdoc: Move doc-reachability visiting back to cleaning\n\nIt populates `cx.cache.access_levels`, which seems to be needed during\ncleaning since a bunch of tests are failing.", "tree": {"sha": "491d781acd3bfbf2056e025fb53c457335e1d782", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/491d781acd3bfbf2056e025fb53c457335e1d782"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbc3825d26c0cdef066ca6aa665f85241befc3d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbc3825d26c0cdef066ca6aa665f85241befc3d0", "html_url": "https://github.com/rust-lang/rust/commit/bbc3825d26c0cdef066ca6aa665f85241befc3d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbc3825d26c0cdef066ca6aa665f85241befc3d0/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c017f071d5894a75c3cb37aa48791e77f50a8f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c017f071d5894a75c3cb37aa48791e77f50a8f2", "html_url": "https://github.com/rust-lang/rust/commit/6c017f071d5894a75c3cb37aa48791e77f50a8f2"}], "stats": {"total": 9, "additions": 6, "deletions": 3}, "files": [{"sha": "9860b21e0a971e6fe93ca23cf3023bbda2e0bb15", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbc3825d26c0cdef066ca6aa665f85241befc3d0/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbc3825d26c0cdef066ca6aa665f85241befc3d0/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=bbc3825d26c0cdef066ca6aa665f85241befc3d0", "patch": "@@ -7,6 +7,7 @@ use crate::clean::{\n };\n use crate::core::DocContext;\n use crate::formats::item_type::ItemType;\n+use crate::visit_lib::LibEmbargoVisitor;\n \n use rustc_ast as ast;\n use rustc_ast::tokenstream::TokenTree;\n@@ -26,6 +27,11 @@ mod tests;\n crate fn krate(cx: &mut DocContext<'_>) -> Crate {\n     let module = crate::visit_ast::RustdocVisitor::new(cx).visit();\n \n+    for &cnum in cx.tcx.crates(()) {\n+        // Analyze doc-reachability for extern items\n+        LibEmbargoVisitor::new(cx).visit_lib(cnum);\n+    }\n+\n     // Clean the crate, translating the entire librustc_ast AST to one that is\n     // understood by rustdoc.\n     let mut module = module.clean(cx);"}, {"sha": "db2b836de86e459b8b318425e5bb952418304094", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bbc3825d26c0cdef066ca6aa665f85241befc3d0/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbc3825d26c0cdef066ca6aa665f85241befc3d0/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=bbc3825d26c0cdef066ca6aa665f85241befc3d0", "patch": "@@ -14,7 +14,6 @@ use crate::formats::Impl;\n use crate::html::markdown::short_markdown_summary;\n use crate::html::render::cache::{get_index_search_type, ExternalLocation};\n use crate::html::render::IndexItem;\n-use crate::visit_lib::LibEmbargoVisitor;\n \n /// This cache is used to store information about the [`clean::Crate`] being\n /// rendered in order to provide more useful documentation. This contains\n@@ -148,8 +147,6 @@ impl Cache {\n         // FIXME: this part is specific to HTML so it'd be nice to remove it from the common code\n         for &crate_num in cx.tcx.crates(()) {\n             let e = ExternalCrate { crate_num };\n-            // Analyze doc-reachability for extern items\n-            LibEmbargoVisitor::new(cx).visit_lib(e.crate_num);\n \n             let name = e.name(tcx);\n             let render_options = &cx.render_options;"}]}