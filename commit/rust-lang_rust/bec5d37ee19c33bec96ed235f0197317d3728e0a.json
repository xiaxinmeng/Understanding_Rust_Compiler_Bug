{"sha": "bec5d37ee19c33bec96ed235f0197317d3728e0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlYzVkMzdlZTE5YzMzYmVjOTZlZDIzNWYwMTk3MzE3ZDM3MjhlMGE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-02-16T13:44:16Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-02-16T13:44:16Z"}, "message": "debug_assert a few more raw pointer methods", "tree": {"sha": "b6957c1bf94f1381a23022f12c5f0d7ccb80b89a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6957c1bf94f1381a23022f12c5f0d7ccb80b89a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bec5d37ee19c33bec96ed235f0197317d3728e0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bec5d37ee19c33bec96ed235f0197317d3728e0a", "html_url": "https://github.com/rust-lang/rust/commit/bec5d37ee19c33bec96ed235f0197317d3728e0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bec5d37ee19c33bec96ed235f0197317d3728e0a/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8040bc983669fcc3fe358dfc9772ea2ecde0ae1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8040bc983669fcc3fe358dfc9772ea2ecde0ae1b", "html_url": "https://github.com/rust-lang/rust/commit/8040bc983669fcc3fe358dfc9772ea2ecde0ae1b"}], "stats": {"total": 21, "additions": 16, "deletions": 5}, "files": [{"sha": "9a23b54dfa0a5f49e6a3ee60ad6a3b0de40dff05", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bec5d37ee19c33bec96ed235f0197317d3728e0a/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bec5d37ee19c33bec96ed235f0197317d3728e0a/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=bec5d37ee19c33bec96ed235f0197317d3728e0a", "patch": "@@ -1423,13 +1423,14 @@ pub(crate) fn is_aligned_and_not_null<T>(ptr: *const T) -> bool {\n }\n \n /// Checks whether the regions of memory starting at `src` and `dst` of size\n-/// `count * size_of::<T>()` overlap.\n-fn overlaps<T>(src: *const T, dst: *const T, count: usize) -> bool {\n+/// `count * size_of::<T>()` do *not* overlap.\n+pub(crate) fn is_nonoverlapping<T>(src: *const T, dst: *const T, count: usize) -> bool {\n     let src_usize = src as usize;\n     let dst_usize = dst as usize;\n     let size = mem::size_of::<T>().checked_mul(count).unwrap();\n     let diff = if src_usize > dst_usize { src_usize - dst_usize } else { dst_usize - src_usize };\n-    size > diff\n+    let overlaps = size > diff;\n+    !overlaps\n }\n \n /// Copies `count * size_of::<T>()` bytes from `src` to `dst`. The source\n@@ -1524,7 +1525,7 @@ pub unsafe fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize) {\n \n     debug_assert!(is_aligned_and_not_null(src), \"attempt to copy from unaligned or null pointer\");\n     debug_assert!(is_aligned_and_not_null(dst), \"attempt to copy to unaligned or null pointer\");\n-    debug_assert!(!overlaps(src, dst, count), \"attempt to copy to overlapping memory\");\n+    debug_assert!(is_nonoverlapping(src, dst, count), \"attempt to copy to overlapping memory\");\n     copy_nonoverlapping(src, dst, count)\n }\n "}, {"sha": "ce21773165a6a58ffd2bdfbf6b25c46eb909da6a", "filename": "src/libcore/ptr/mod.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bec5d37ee19c33bec96ed235f0197317d3728e0a/src%2Flibcore%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bec5d37ee19c33bec96ed235f0197317d3728e0a/src%2Flibcore%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmod.rs?ref=bec5d37ee19c33bec96ed235f0197317d3728e0a", "patch": "@@ -72,7 +72,7 @@\n use crate::cmp::Ordering;\n use crate::fmt;\n use crate::hash;\n-use crate::intrinsics;\n+use crate::intrinsics::{self, is_aligned_and_not_null, is_nonoverlapping};\n use crate::mem::{self, MaybeUninit};\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -389,6 +389,10 @@ pub unsafe fn swap<T>(x: *mut T, y: *mut T) {\n #[inline]\n #[stable(feature = \"swap_nonoverlapping\", since = \"1.27.0\")]\n pub unsafe fn swap_nonoverlapping<T>(x: *mut T, y: *mut T, count: usize) {\n+    debug_assert!(is_aligned_and_not_null(x), \"attempt to swap unaligned or null pointer\");\n+    debug_assert!(is_aligned_and_not_null(y), \"attempt to swap unaligned or null pointer\");\n+    debug_assert!(is_nonoverlapping(x, y, count), \"attempt to swap overlapping memory\");\n+\n     let x = x as *mut u8;\n     let y = y as *mut u8;\n     let len = mem::size_of::<T>() * count;\n@@ -612,6 +616,7 @@ pub unsafe fn replace<T>(dst: *mut T, mut src: T) -> T {\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn read<T>(src: *const T) -> T {\n+    // `copy_nonoverlapping` takes care of debug_assert.\n     let mut tmp = MaybeUninit::<T>::uninit();\n     copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n     tmp.assume_init()\n@@ -703,6 +708,7 @@ pub unsafe fn read<T>(src: *const T) -> T {\n #[inline]\n #[stable(feature = \"ptr_unaligned\", since = \"1.17.0\")]\n pub unsafe fn read_unaligned<T>(src: *const T) -> T {\n+    // `copy_nonoverlapping` takes care of debug_assert.\n     let mut tmp = MaybeUninit::<T>::uninit();\n     copy_nonoverlapping(src as *const u8, tmp.as_mut_ptr() as *mut u8, mem::size_of::<T>());\n     tmp.assume_init()\n@@ -795,6 +801,7 @@ pub unsafe fn read_unaligned<T>(src: *const T) -> T {\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn write<T>(dst: *mut T, src: T) {\n+    debug_assert!(is_aligned_and_not_null(dst), \"attempt to write to unaligned or null pointer\");\n     intrinsics::move_val_init(&mut *dst, src)\n }\n \n@@ -887,6 +894,7 @@ pub unsafe fn write<T>(dst: *mut T, src: T) {\n #[inline]\n #[stable(feature = \"ptr_unaligned\", since = \"1.17.0\")]\n pub unsafe fn write_unaligned<T>(dst: *mut T, src: T) {\n+    // `copy_nonoverlapping` takes care of debug_assert.\n     copy_nonoverlapping(&src as *const T as *const u8, dst as *mut u8, mem::size_of::<T>());\n     mem::forget(src);\n }\n@@ -956,6 +964,7 @@ pub unsafe fn write_unaligned<T>(dst: *mut T, src: T) {\n #[inline]\n #[stable(feature = \"volatile\", since = \"1.9.0\")]\n pub unsafe fn read_volatile<T>(src: *const T) -> T {\n+    debug_assert!(is_aligned_and_not_null(src), \"attempt to read from unaligned or null pointer\");\n     intrinsics::volatile_load(src)\n }\n \n@@ -1024,6 +1033,7 @@ pub unsafe fn read_volatile<T>(src: *const T) -> T {\n #[inline]\n #[stable(feature = \"volatile\", since = \"1.9.0\")]\n pub unsafe fn write_volatile<T>(dst: *mut T, src: T) {\n+    debug_assert!(is_aligned_and_not_null(dst), \"attempt to write to unaligned or null pointer\");\n     intrinsics::volatile_store(dst, src);\n }\n "}]}