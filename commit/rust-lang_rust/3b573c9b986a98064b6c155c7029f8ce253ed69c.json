{"sha": "3b573c9b986a98064b6c155c7029f8ce253ed69c", "node_id": "C_kwDOAAsO6NoAKDNiNTczYzliOTg2YTk4MDY0YjZjMTU1YzcwMjlmOGNlMjUzZWQ2OWM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-03T03:30:17Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-12T03:24:04Z"}, "message": "fn pointers don't implement Fn/FnMut/FnOnce traits if its return type is unsized", "tree": {"sha": "e7fa632aa33181490328fb774234ea2592b3a812", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7fa632aa33181490328fb774234ea2592b3a812"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b573c9b986a98064b6c155c7029f8ce253ed69c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b573c9b986a98064b6c155c7029f8ce253ed69c", "html_url": "https://github.com/rust-lang/rust/commit/3b573c9b986a98064b6c155c7029f8ce253ed69c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b573c9b986a98064b6c155c7029f8ce253ed69c/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98e1f041b6e33598a18edb928ec9db93a850c6cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/98e1f041b6e33598a18edb928ec9db93a850c6cb", "html_url": "https://github.com/rust-lang/rust/commit/98e1f041b6e33598a18edb928ec9db93a850c6cb"}], "stats": {"total": 98, "additions": 96, "deletions": 2}, "files": [{"sha": "59529832615322732d756202e0a22453a7428d71", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3b573c9b986a98064b6c155c7029f8ce253ed69c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b573c9b986a98064b6c155c7029f8ce253ed69c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=3b573c9b986a98064b6c155c7029f8ce253ed69c", "patch": "@@ -617,7 +617,36 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         )\n         .map_bound(|(trait_ref, _)| trait_ref);\n \n-        let nested = self.confirm_poly_trait_refs(obligation, trait_ref)?;\n+        let mut nested = self.confirm_poly_trait_refs(obligation, trait_ref)?;\n+\n+        // Confirm the `type Output: Sized;` bound that is present on `FnOnce`\n+        let cause = obligation.derived_cause(BuiltinDerivedObligation);\n+        // The binder on the Fn obligation is \"less\" important than the one on\n+        // the signature, as evidenced by how we treat it during projection.\n+        // The safe thing to do here is to liberate it, though, which should\n+        // have no worse effect than skipping the binder here.\n+        let liberated_fn_ty = self.infcx.replace_bound_vars_with_placeholders(obligation.self_ty());\n+        let output_ty = self\n+            .infcx\n+            .replace_bound_vars_with_placeholders(liberated_fn_ty.fn_sig(self.tcx()).output());\n+        let output_ty = normalize_with_depth_to(\n+            self,\n+            obligation.param_env,\n+            cause.clone(),\n+            obligation.recursion_depth,\n+            output_ty,\n+            &mut nested,\n+        );\n+        let tr = ty::Binder::dummy(ty::TraitRef::new(\n+            self.tcx().require_lang_item(LangItem::Sized, None),\n+            self.tcx().mk_substs_trait(output_ty, &[]),\n+        ));\n+        nested.push(Obligation::new(\n+            cause,\n+            obligation.param_env,\n+            tr.to_poly_trait_predicate().to_predicate(self.tcx()),\n+        ));\n+\n         Ok(ImplSourceFnPointerData { fn_ty: self_ty, nested })\n     }\n "}, {"sha": "104ac4d222ebea682e8d55e097089c0295717bba", "filename": "src/test/ui/function-pointer/sized-ret-with-binder.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3b573c9b986a98064b6c155c7029f8ce253ed69c/src%2Ftest%2Fui%2Ffunction-pointer%2Fsized-ret-with-binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b573c9b986a98064b6c155c7029f8ce253ed69c/src%2Ftest%2Fui%2Ffunction-pointer%2Fsized-ret-with-binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffunction-pointer%2Fsized-ret-with-binder.rs?ref=3b573c9b986a98064b6c155c7029f8ce253ed69c", "patch": "@@ -0,0 +1,15 @@\n+// check-pass\n+\n+#![feature(unboxed_closures)]\n+\n+fn is_fn<T: for<'a> Fn<(&'a (),)>>() {}\n+fn is_fn2<T: for<'a, 'b> Fn<(&'a &'b (),)>>() {}\n+\n+struct Outlives<'a, 'b>(std::marker::PhantomData<&'a &'b ()>);\n+\n+fn main() {\n+    is_fn::<for<'a> fn(&'a ()) -> &'a ()>();\n+    is_fn::<for<'a> fn(&'a ()) -> &'a dyn std::fmt::Debug>();\n+    is_fn2::<for<'a, 'b> fn(&'a &'b ()) -> Outlives<'a, 'b>>();\n+    is_fn2::<for<'a, 'b> fn(&'a &'b ()) -> (&'a (), &'a ())>();\n+}"}, {"sha": "60af5769d6ddb829250ac28331b3f2035c709ad6", "filename": "src/test/ui/function-pointer/unsized-ret.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3b573c9b986a98064b6c155c7029f8ce253ed69c/src%2Ftest%2Fui%2Ffunction-pointer%2Funsized-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b573c9b986a98064b6c155c7029f8ce253ed69c/src%2Ftest%2Fui%2Ffunction-pointer%2Funsized-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffunction-pointer%2Funsized-ret.rs?ref=3b573c9b986a98064b6c155c7029f8ce253ed69c", "patch": "@@ -0,0 +1,14 @@\n+#![feature(fn_traits)]\n+#![feature(unboxed_closures)]\n+\n+fn foo<F: Fn<T>, T>(f: Option<F>, t: T) {\n+    let y = (f.unwrap()).call(t);\n+}\n+\n+fn main() {\n+    foo::<fn() -> str, _>(None, ());\n+    //~^ ERROR the size for values of type `str` cannot be known at compilation time\n+\n+    foo::<for<'a> fn(&'a ()) -> (dyn std::fmt::Display + 'a), _>(None, (&(),));\n+    //~^ ERROR the size for values of type `(dyn std::fmt::Display + 'a)` cannot be known at compilation time\n+}"}, {"sha": "bec3e2aa3fe6fbc0da0d6cf35f008fe159c91ff0", "filename": "src/test/ui/function-pointer/unsized-ret.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/3b573c9b986a98064b6c155c7029f8ce253ed69c/src%2Ftest%2Fui%2Ffunction-pointer%2Funsized-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b573c9b986a98064b6c155c7029f8ce253ed69c/src%2Ftest%2Fui%2Ffunction-pointer%2Funsized-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffunction-pointer%2Funsized-ret.stderr?ref=3b573c9b986a98064b6c155c7029f8ce253ed69c", "patch": "@@ -0,0 +1,35 @@\n+error[E0277]: the size for values of type `str` cannot be known at compilation time\n+  --> $DIR/unsized-ret.rs:9:27\n+   |\n+LL |     foo::<fn() -> str, _>(None, ());\n+   |     --------------------- ^^^^ doesn't have a size known at compile-time\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: within `fn() -> str`, the trait `Sized` is not implemented for `str`\n+   = note: required because it appears within the type `fn() -> str`\n+note: required by a bound in `foo`\n+  --> $DIR/unsized-ret.rs:4:11\n+   |\n+LL | fn foo<F: Fn<T>, T>(f: Option<F>, t: T) {\n+   |           ^^^^^ required by this bound in `foo`\n+\n+error[E0277]: the size for values of type `(dyn std::fmt::Display + 'a)` cannot be known at compilation time\n+  --> $DIR/unsized-ret.rs:12:66\n+   |\n+LL |     foo::<for<'a> fn(&'a ()) -> (dyn std::fmt::Display + 'a), _>(None, (&(),));\n+   |     ------------------------------------------------------------ ^^^^ doesn't have a size known at compile-time\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: within `for<'a> fn(&'a ()) -> (dyn std::fmt::Display + 'a)`, the trait `for<'a> Sized` is not implemented for `(dyn std::fmt::Display + 'a)`\n+   = note: required because it appears within the type `for<'a> fn(&'a ()) -> (dyn std::fmt::Display + 'a)`\n+note: required by a bound in `foo`\n+  --> $DIR/unsized-ret.rs:4:11\n+   |\n+LL | fn foo<F: Fn<T>, T>(f: Option<F>, t: T) {\n+   |           ^^^^^ required by this bound in `foo`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "0a34e8486a55184d2a166fe50aef8af435ac36b3", "filename": "src/test/ui/type-alias-impl-trait/issue-53398-cyclic-types.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3b573c9b986a98064b6c155c7029f8ce253ed69c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53398-cyclic-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b573c9b986a98064b6c155c7029f8ce253ed69c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53398-cyclic-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53398-cyclic-types.stderr?ref=3b573c9b986a98064b6c155c7029f8ce253ed69c", "patch": "@@ -1,10 +1,11 @@\n-error[E0275]: overflow evaluating the requirement `fn() -> Foo {foo}: Sized`\n+error[E0275]: overflow evaluating the requirement `Foo: Sized`\n   --> $DIR/issue-53398-cyclic-types.rs:5:13\n    |\n LL | fn foo() -> Foo {\n    |             ^^^\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_53398_cyclic_types`)\n+   = note: required because it appears within the type `fn() -> Foo {foo}`\n \n error: aborting due to previous error\n "}]}