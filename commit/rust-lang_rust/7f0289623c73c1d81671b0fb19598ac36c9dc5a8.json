{"sha": "7f0289623c73c1d81671b0fb19598ac36c9dc5a8", "node_id": "C_kwDOAAsO6NoAKDdmMDI4OTYyM2M3M2MxZDgxNjcxYjBmYjE5NTk4YWMzNmM5ZGM1YTg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-20T17:45:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-20T17:45:15Z"}, "message": "Rollup merge of #100769 - TaKO8Ki:suggest-adding-reference-to-trait-assoc-item, r=cjgillot\n\nSuggest adding a reference to a trait assoc item\n\nfixes #100289", "tree": {"sha": "08e1c78f6cf479d6ef9063c04fd1953f5acc3be7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08e1c78f6cf479d6ef9063c04fd1953f5acc3be7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f0289623c73c1d81671b0fb19598ac36c9dc5a8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjAR2rCRBK7hj4Ov3rIwAAPu4IAAeNtuW0Ne/O5ljE6p1RAS6E\nSEBNvGNY2N25A5H+Ec6qcs42viT3H4N6MBHg1eHp4OumhHSr2YGK3kof4/QaUHpY\nGKYHPV6UdSGt9H0JK4gJs/+FsVuEVyvgaDTXXPUq7uV72Qf4WNzrgCQCd/516REU\nywTjpqRKGn09EZlEjlPQGS8/KKYOT0IJEuhKzd52Yrvtc2m50f0C8Fqf0uhELHHs\nv5hCBROSdQTHGNGYMjL0jWD3rQ6n7F1np3tfs828qm+cLclAk7MK0jDHkLy5Ctfi\nTk5gagyzECuv20iSUsmCO5pAS1ldGLBLPj8Z5lJcR22p696UnIwX/TRQnk/ymDM=\n=JGqS\n-----END PGP SIGNATURE-----\n", "payload": "tree 08e1c78f6cf479d6ef9063c04fd1953f5acc3be7\nparent aaa5574a18e679a21232ad0dd93d35216f80568b\nparent a311b8a4c5ed3dfbf80a94c48768fda2e6785e52\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1661017515 +0200\ncommitter GitHub <noreply@github.com> 1661017515 +0200\n\nRollup merge of #100769 - TaKO8Ki:suggest-adding-reference-to-trait-assoc-item, r=cjgillot\n\nSuggest adding a reference to a trait assoc item\n\nfixes #100289\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f0289623c73c1d81671b0fb19598ac36c9dc5a8", "html_url": "https://github.com/rust-lang/rust/commit/7f0289623c73c1d81671b0fb19598ac36c9dc5a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f0289623c73c1d81671b0fb19598ac36c9dc5a8/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aaa5574a18e679a21232ad0dd93d35216f80568b", "url": "https://api.github.com/repos/rust-lang/rust/commits/aaa5574a18e679a21232ad0dd93d35216f80568b", "html_url": "https://github.com/rust-lang/rust/commit/aaa5574a18e679a21232ad0dd93d35216f80568b"}, {"sha": "a311b8a4c5ed3dfbf80a94c48768fda2e6785e52", "url": "https://api.github.com/repos/rust-lang/rust/commits/a311b8a4c5ed3dfbf80a94c48768fda2e6785e52", "html_url": "https://github.com/rust-lang/rust/commit/a311b8a4c5ed3dfbf80a94c48768fda2e6785e52"}], "stats": {"total": 87, "additions": 80, "deletions": 7}, "files": [{"sha": "5bc23a975175e25d2053188777c89b3adf64753b", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7f0289623c73c1d81671b0fb19598ac36c9dc5a8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f0289623c73c1d81671b0fb19598ac36c9dc5a8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=7f0289623c73c1d81671b0fb19598ac36c9dc5a8", "patch": "@@ -882,6 +882,8 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             obligation.cause.code()\n         {\n             &parent_code\n+        } else if let ObligationCauseCode::ItemObligation(_) = obligation.cause.code() {\n+            obligation.cause.code()\n         } else if let ExpnKind::Desugaring(DesugaringKind::ForLoop) =\n             span.ctxt().outer_expn_data().kind\n         {\n@@ -930,10 +932,25 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         self.mk_trait_obligation_with_new_self_ty(param_env, trait_pred_and_new_ty);\n                     self.predicate_must_hold_modulo_regions(&obligation)\n                 };\n-                let imm_result = mk_result(trait_pred_and_imm_ref);\n-                let mut_result = mk_result(trait_pred_and_mut_ref);\n+                let imm_ref_self_ty_satisfies_pred = mk_result(trait_pred_and_imm_ref);\n+                let mut_ref_self_ty_satisfies_pred = mk_result(trait_pred_and_mut_ref);\n+\n+                let (ref_inner_ty_satisfies_pred, ref_inner_ty_mut) =\n+                if let ObligationCauseCode::ItemObligation(_) = obligation.cause.code()\n+                    && let ty::Ref(_, ty, mutability) = old_pred.self_ty().skip_binder().kind()\n+                {\n+                    (\n+                        mk_result(old_pred.map_bound(|trait_pred| (trait_pred, *ty))),\n+                        matches!(mutability, hir::Mutability::Mut),\n+                    )\n+                } else {\n+                    (false, false)\n+                };\n \n-                if imm_result || mut_result {\n+                if imm_ref_self_ty_satisfies_pred\n+                    || mut_ref_self_ty_satisfies_pred\n+                    || ref_inner_ty_satisfies_pred\n+                {\n                     if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n                         // We have a very specific type of error, where just borrowing this argument\n                         // might solve the problem. In cases like this, the important part is the\n@@ -973,21 +990,22 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             // }\n                             // ```\n \n-                            if imm_result && mut_result {\n+                            if imm_ref_self_ty_satisfies_pred && mut_ref_self_ty_satisfies_pred {\n                                 err.span_suggestions(\n                                     span.shrink_to_lo(),\n                                     \"consider borrowing here\",\n                                     [\"&\".to_string(), \"&mut \".to_string()].into_iter(),\n                                     Applicability::MaybeIncorrect,\n                                 );\n                             } else {\n+                                let is_mut = mut_ref_self_ty_satisfies_pred || ref_inner_ty_mut;\n                                 err.span_suggestion_verbose(\n                                     span.shrink_to_lo(),\n                                     &format!(\n                                         \"consider{} borrowing here\",\n-                                        if mut_result { \" mutably\" } else { \"\" }\n+                                        if is_mut { \" mutably\" } else { \"\" }\n                                     ),\n-                                    format!(\"&{}\", if mut_result { \"mut \" } else { \"\" }),\n+                                    format!(\"&{}\", if is_mut { \"mut \" } else { \"\" }),\n                                     Applicability::MaybeIncorrect,\n                                 );\n                             }\n@@ -1001,7 +1019,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         if let ObligationCauseCode::ImplDerivedObligation(cause) = &*code {\n             try_borrowing(cause.derived.parent_trait_pred, &[])\n         } else if let ObligationCauseCode::BindingObligation(_, _)\n-        | ObligationCauseCode::ItemObligation(_) = code\n+        | ObligationCauseCode::ItemObligation(..) = code\n         {\n             try_borrowing(poly_trait_pred, &never_suggest_borrow)\n         } else {"}, {"sha": "e9b8a9caa484a6be3c8e9f0ca772725ded05f9bc", "filename": "src/test/ui/suggestions/suggest-adding-reference-to-trait-assoc-item.fixed", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7f0289623c73c1d81671b0fb19598ac36c9dc5a8/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-adding-reference-to-trait-assoc-item.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7f0289623c73c1d81671b0fb19598ac36c9dc5a8/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-adding-reference-to-trait-assoc-item.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-adding-reference-to-trait-assoc-item.fixed?ref=7f0289623c73c1d81671b0fb19598ac36c9dc5a8", "patch": "@@ -0,0 +1,15 @@\n+// run-rustfix\n+#![allow(unused_variables)]\n+\n+fn foo(foo: &mut usize) {\n+    todo!()\n+}\n+\n+fn bar(bar: &usize) {\n+    todo!()\n+}\n+\n+fn main() {\n+    foo(&mut Default::default()); //~ the trait bound `&mut usize: Default` is not satisfied\n+    bar(&Default::default()); //~ the trait bound `&usize: Default` is not satisfied\n+}"}, {"sha": "5fae21cccef23da3db1d02e7c4fec5d09abfb179", "filename": "src/test/ui/suggestions/suggest-adding-reference-to-trait-assoc-item.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7f0289623c73c1d81671b0fb19598ac36c9dc5a8/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-adding-reference-to-trait-assoc-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f0289623c73c1d81671b0fb19598ac36c9dc5a8/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-adding-reference-to-trait-assoc-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-adding-reference-to-trait-assoc-item.rs?ref=7f0289623c73c1d81671b0fb19598ac36c9dc5a8", "patch": "@@ -0,0 +1,15 @@\n+// run-rustfix\n+#![allow(unused_variables)]\n+\n+fn foo(foo: &mut usize) {\n+    todo!()\n+}\n+\n+fn bar(bar: &usize) {\n+    todo!()\n+}\n+\n+fn main() {\n+    foo(Default::default()); //~ the trait bound `&mut usize: Default` is not satisfied\n+    bar(Default::default()); //~ the trait bound `&usize: Default` is not satisfied\n+}"}, {"sha": "b930d22a3915eb39298983424be06de67f585d4a", "filename": "src/test/ui/suggestions/suggest-adding-reference-to-trait-assoc-item.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7f0289623c73c1d81671b0fb19598ac36c9dc5a8/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-adding-reference-to-trait-assoc-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7f0289623c73c1d81671b0fb19598ac36c9dc5a8/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-adding-reference-to-trait-assoc-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-adding-reference-to-trait-assoc-item.stderr?ref=7f0289623c73c1d81671b0fb19598ac36c9dc5a8", "patch": "@@ -0,0 +1,25 @@\n+error[E0277]: the trait bound `&mut usize: Default` is not satisfied\n+  --> $DIR/suggest-adding-reference-to-trait-assoc-item.rs:13:9\n+   |\n+LL |     foo(Default::default());\n+   |         ^^^^^^^^^^^^^^^^ expected an implementor of trait `Default`\n+   |\n+help: consider mutably borrowing here\n+   |\n+LL |     foo(&mut Default::default());\n+   |         ++++\n+\n+error[E0277]: the trait bound `&usize: Default` is not satisfied\n+  --> $DIR/suggest-adding-reference-to-trait-assoc-item.rs:14:9\n+   |\n+LL |     bar(Default::default());\n+   |         ^^^^^^^^^^^^^^^^ expected an implementor of trait `Default`\n+   |\n+help: consider borrowing here\n+   |\n+LL |     bar(&Default::default());\n+   |         +\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}]}