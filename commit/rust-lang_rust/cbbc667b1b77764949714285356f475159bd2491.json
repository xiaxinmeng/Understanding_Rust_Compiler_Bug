{"sha": "cbbc667b1b77764949714285356f475159bd2491", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiYmM2NjdiMWI3Nzc2NDk0OTcxNDI4NTM1NmY0NzUxNTliZDI0OTE=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-09T23:38:53Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-12T13:30:26Z"}, "message": "Dogfood for future MATCH_SAME_ARMS lint", "tree": {"sha": "1fb7425ec825dac71d0068ab4e29f4713db073cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fb7425ec825dac71d0068ab4e29f4713db073cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbbc667b1b77764949714285356f475159bd2491", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbbc667b1b77764949714285356f475159bd2491", "html_url": "https://github.com/rust-lang/rust/commit/cbbc667b1b77764949714285356f475159bd2491", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbbc667b1b77764949714285356f475159bd2491/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ddc615a40d1f33ab23899a4fe63856be9f96435", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ddc615a40d1f33ab23899a4fe63856be9f96435", "html_url": "https://github.com/rust-lang/rust/commit/5ddc615a40d1f33ab23899a4fe63856be9f96435"}], "stats": {"total": 58, "additions": 27, "deletions": 31}, "files": [{"sha": "125a7c0ae78a3ebe287cd82c7d7de97853d951b5", "filename": "src/len_zero.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbbc667b1b77764949714285356f475159bd2491/src%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbbc667b1b77764949714285356f475159bd2491/src%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flen_zero.rs?ref=cbbc667b1b77764949714285356f475159bd2491", "patch": "@@ -140,9 +140,7 @@ fn check_cmp(cx: &LateContext, span: Span, left: &Expr, right: &Expr, op: &str)\n         }\n     }\n     match (&left.node, &right.node) {\n-        (&ExprLit(ref lit), &ExprMethodCall(ref method, _, ref args)) => {\n-            check_len_zero(cx, span, &method.node, args, lit, op)\n-        }\n+        (&ExprLit(ref lit), &ExprMethodCall(ref method, _, ref args)) |\n         (&ExprMethodCall(ref method, _, ref args), &ExprLit(ref lit)) => {\n             check_len_zero(cx, span, &method.node, args, lit, op)\n         }"}, {"sha": "9263d65737151fdef2a8be4b1fb5566c1c352736", "filename": "src/methods.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cbbc667b1b77764949714285356f475159bd2491/src%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbbc667b1b77764949714285356f475159bd2491/src%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmethods.rs?ref=cbbc667b1b77764949714285356f475159bd2491", "patch": "@@ -865,24 +865,23 @@ enum SelfKind {\n impl SelfKind {\n     fn matches(&self, slf: &ExplicitSelf_, allow_value_for_ref: bool) -> bool {\n         match (self, slf) {\n-            (&SelfKind::Value, &SelfValue(_)) => true,\n-            (&SelfKind::Ref, &SelfRegion(_, Mutability::MutImmutable, _)) => true,\n-            (&SelfKind::RefMut, &SelfRegion(_, Mutability::MutMutable, _)) => true,\n-            (&SelfKind::Ref, &SelfValue(_)) => allow_value_for_ref,\n-            (&SelfKind::RefMut, &SelfValue(_)) => allow_value_for_ref,\n-            (&SelfKind::No, &SelfStatic) => true,\n+            (&SelfKind::Value, &SelfValue(_)) |\n+                (&SelfKind::Ref, &SelfRegion(_, Mutability::MutImmutable, _)) |\n+                (&SelfKind::RefMut, &SelfRegion(_, Mutability::MutMutable, _)) |\n+                (&SelfKind::No, &SelfStatic) => true,\n+            (&SelfKind::Ref, &SelfValue(_)) | (&SelfKind::RefMut, &SelfValue(_)) => allow_value_for_ref,\n             (_, &SelfExplicit(ref ty, _)) => self.matches_explicit_type(ty, allow_value_for_ref),\n             _ => false,\n         }\n     }\n \n     fn matches_explicit_type(&self, ty: &Ty, allow_value_for_ref: bool) -> bool {\n         match (self, &ty.node) {\n-            (&SelfKind::Value, &TyPath(..)) => true,\n-            (&SelfKind::Ref, &TyRptr(_, MutTy { mutbl: Mutability::MutImmutable, .. })) => true,\n-            (&SelfKind::RefMut, &TyRptr(_, MutTy { mutbl: Mutability::MutMutable, .. })) => true,\n-            (&SelfKind::Ref, &TyPath(..)) => allow_value_for_ref,\n-            (&SelfKind::RefMut, &TyPath(..)) => allow_value_for_ref,\n+            (&SelfKind::Value, &TyPath(..)) |\n+                (&SelfKind::Ref, &TyRptr(_, MutTy { mutbl: Mutability::MutImmutable, .. })) |\n+                (&SelfKind::RefMut, &TyRptr(_, MutTy { mutbl: Mutability::MutMutable, .. })) => true,\n+            (&SelfKind::Ref, &TyPath(..)) |\n+                (&SelfKind::RefMut, &TyPath(..)) => allow_value_for_ref,\n             _ => false,\n         }\n     }"}, {"sha": "076e6e385c2ca5f22b32844d4bc27d8272f8a025", "filename": "src/misc.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cbbc667b1b77764949714285356f475159bd2491/src%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbbc667b1b77764949714285356f475159bd2491/src%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmisc.rs?ref=cbbc667b1b77764949714285356f475159bd2491", "patch": "@@ -421,8 +421,7 @@ impl LateLintPass for UsedUnderscoreBinding {\n fn is_used(cx: &LateContext, expr: &Expr) -> bool {\n     if let Some(ref parent) = get_parent_expr(cx, expr) {\n         match parent.node {\n-            ExprAssign(_, ref rhs) => **rhs == *expr,\n-            ExprAssignOp(_, _, ref rhs) => **rhs == *expr,\n+            ExprAssign(_, ref rhs) | ExprAssignOp(_, _, ref rhs) => **rhs == *expr,\n             _ => is_used(cx, &parent),\n         }\n     } else {"}, {"sha": "f8695956f09803ea5c97468a91210998f9a17977", "filename": "src/utils/hir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbbc667b1b77764949714285356f475159bd2491/src%2Futils%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbbc667b1b77764949714285356f475159bd2491/src%2Futils%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils%2Fhir.rs?ref=cbbc667b1b77764949714285356f475159bd2491", "patch": "@@ -38,8 +38,8 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n                     false\n                 }\n             }\n-            (&StmtExpr(ref l, _), &StmtExpr(ref r, _)) => self.eq_expr(l, r),\n-            (&StmtSemi(ref l, _), &StmtSemi(ref r, _)) => self.eq_expr(l, r),\n+            (&StmtExpr(ref l, _), &StmtExpr(ref r, _)) |\n+                (&StmtSemi(ref l, _), &StmtSemi(ref r, _)) => self.eq_expr(l, r),\n             _ => false,\n         }\n     }"}, {"sha": "3a4a83af5c6cb145ffa9475d30eb0d5a6b56fad5", "filename": "tests/compile-fail/cyclomatic_complexity.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cbbc667b1b77764949714285356f475159bd2491/tests%2Fcompile-fail%2Fcyclomatic_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbbc667b1b77764949714285356f475159bd2491/tests%2Fcompile-fail%2Fcyclomatic_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcyclomatic_complexity.rs?ref=cbbc667b1b77764949714285356f475159bd2491", "patch": "@@ -138,15 +138,15 @@ fn bloo() {\n #[cyclomatic_complexity = \"0\"]\n fn baa() { //~ ERROR: the function has a cyclomatic complexity of 2\n     let x = || match 99 {\n-        0 => true,\n-        1 => false,\n-        2 => true,\n-        4 => true,\n-        6 => true,\n-        9 => true,\n-        _ => false,\n+        0 => 0,\n+        1 => 1,\n+        2 => 2,\n+        4 => 4,\n+        6 => 6,\n+        9 => 9,\n+        _ => 42,\n     };\n-    if x() {\n+    if x() == 42 {\n         println!(\"x\");\n     } else {\n         println!(\"not x\");"}, {"sha": "46d3ff8d5fbd6ef9febfbd03efe66f93f760cb3d", "filename": "tests/compile-fail/matches.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cbbc667b1b77764949714285356f475159bd2491/tests%2Fcompile-fail%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbbc667b1b77764949714285356f475159bd2491/tests%2Fcompile-fail%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmatches.rs?ref=cbbc667b1b77764949714285356f475159bd2491", "patch": "@@ -101,8 +101,8 @@ fn match_bool() {\n     let test: bool = true;\n \n     match test {  //~ ERROR you seem to be trying to match on a boolean expression\n-        true => (),\n-        false => (),\n+        true => 0,\n+        false => 42,\n     };\n \n     let option = 1;\n@@ -128,9 +128,9 @@ fn match_bool() {\n \n     // Not linted\n     match option {\n-        1 ... 10 => (),\n-        11 ... 20 => (),\n-        _ => (),\n+        1 ... 10 => 1,\n+        11 ... 20 => 2,\n+        _ => 3,\n     };\n }\n "}]}