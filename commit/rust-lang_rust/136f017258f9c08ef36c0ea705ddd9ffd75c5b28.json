{"sha": "136f017258f9c08ef36c0ea705ddd9ffd75c5b28", "node_id": "C_kwDOAAsO6NoAKDEzNmYwMTcyNThmOWMwOGVmMzZjMGVhNzA1ZGRkOWZmZDc1YzViMjg", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-16T20:53:08Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-19T02:08:49Z"}, "message": "Use LocalDefId in OpaqueTypeKey", "tree": {"sha": "83a8b4b2cb48cc8ac5d57d419fce051ee38af62d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83a8b4b2cb48cc8ac5d57d419fce051ee38af62d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/136f017258f9c08ef36c0ea705ddd9ffd75c5b28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/136f017258f9c08ef36c0ea705ddd9ffd75c5b28", "html_url": "https://github.com/rust-lang/rust/commit/136f017258f9c08ef36c0ea705ddd9ffd75c5b28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/136f017258f9c08ef36c0ea705ddd9ffd75c5b28/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8588549c3c3d45c32b404210cada01e2a45def3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8588549c3c3d45c32b404210cada01e2a45def3", "html_url": "https://github.com/rust-lang/rust/commit/f8588549c3c3d45c32b404210cada01e2a45def3"}], "stats": {"total": 104, "additions": 51, "deletions": 53}, "files": [{"sha": "0961203d76d7d39794882ffdc10c2ba26ec73625", "filename": "compiler/rustc_borrowck/src/nll.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/136f017258f9c08ef36c0ea705ddd9ffd75c5b28/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/136f017258f9c08ef36c0ea705ddd9ffd75c5b28/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs?ref=136f017258f9c08ef36c0ea705ddd9ffd75c5b28", "patch": "@@ -1,7 +1,7 @@\n //! The entry point of the NLL borrow checker.\n \n use rustc_data_structures::vec_map::VecMap;\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::LocalDefId;\n use rustc_index::vec::IndexVec;\n use rustc_infer::infer::InferCtxt;\n use rustc_middle::mir::{create_dump_file, dump_enabled, dump_mir, PassWhere};\n@@ -44,7 +44,7 @@ pub type PoloniusOutput = Output<RustcFacts>;\n /// closure requirements to propagate, and any generated errors.\n pub(crate) struct NllOutput<'tcx> {\n     pub regioncx: RegionInferenceContext<'tcx>,\n-    pub opaque_type_values: VecMap<DefId, OpaqueHiddenType<'tcx>>,\n+    pub opaque_type_values: VecMap<LocalDefId, OpaqueHiddenType<'tcx>>,\n     pub polonius_input: Option<Box<AllFacts>>,\n     pub polonius_output: Option<Rc<PoloniusOutput>>,\n     pub opt_closure_req: Option<ClosureRegionRequirements<'tcx>>,\n@@ -373,7 +373,7 @@ pub(super) fn dump_annotation<'a, 'tcx>(\n     body: &Body<'tcx>,\n     regioncx: &RegionInferenceContext<'tcx>,\n     closure_region_requirements: &Option<ClosureRegionRequirements<'_>>,\n-    opaque_type_values: &VecMap<DefId, OpaqueHiddenType<'tcx>>,\n+    opaque_type_values: &VecMap<LocalDefId, OpaqueHiddenType<'tcx>>,\n     errors: &mut crate::error::BorrowckErrors<'tcx>,\n ) {\n     let tcx = infcx.tcx;"}, {"sha": "de9da845729835c28e33a9a7880db49ba0a6f07e", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/136f017258f9c08ef36c0ea705ddd9ffd75c5b28/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/136f017258f9c08ef36c0ea705ddd9ffd75c5b28/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=136f017258f9c08ef36c0ea705ddd9ffd75c5b28", "patch": "@@ -1,6 +1,6 @@\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::vec_map::VecMap;\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::LocalDefId;\n use rustc_hir::OpaqueTyOrigin;\n use rustc_infer::infer::error_reporting::unexpected_hidden_region_diagnostic;\n use rustc_infer::infer::InferCtxt;\n@@ -63,8 +63,8 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         &self,\n         infcx: &InferCtxt<'_, 'tcx>,\n         opaque_ty_decls: VecMap<OpaqueTypeKey<'tcx>, (OpaqueHiddenType<'tcx>, OpaqueTyOrigin)>,\n-    ) -> VecMap<DefId, OpaqueHiddenType<'tcx>> {\n-        let mut result: VecMap<DefId, OpaqueHiddenType<'tcx>> = VecMap::new();\n+    ) -> VecMap<LocalDefId, OpaqueHiddenType<'tcx>> {\n+        let mut result: VecMap<LocalDefId, OpaqueHiddenType<'tcx>> = VecMap::new();\n         for (opaque_type_key, (concrete_type, origin)) in opaque_ty_decls {\n             let substs = opaque_type_key.substs;\n             debug!(?concrete_type, ?substs);\n@@ -235,7 +235,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         // lifetimes with 'static and remapping only those used in the\n         // `impl Trait` return type, resulting in the parameters\n         // shifting.\n-        let id_substs = InternalSubsts::identity_for_item(self.tcx, def_id);\n+        let id_substs = InternalSubsts::identity_for_item(self.tcx, def_id.to_def_id());\n         debug!(?id_substs);\n         let map: FxHashMap<GenericArg<'tcx>, GenericArg<'tcx>> =\n             substs.iter().enumerate().map(|(index, subst)| (subst, id_substs[index])).collect();\n@@ -268,7 +268,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             // This logic duplicates most of `check_opaque_meets_bounds`.\n             // FIXME(oli-obk): Also do region checks here and then consider removing `check_opaque_meets_bounds` entirely.\n             let param_env = self.tcx.param_env(def_id);\n-            let body_id = self.tcx.local_def_id_to_hir_id(def_id.as_local().unwrap());\n+            let body_id = self.tcx.local_def_id_to_hir_id(def_id);\n             self.tcx.infer_ctxt().enter(move |infcx| {\n                 // Require the hidden type to be well-formed with only the generics of the opaque type.\n                 // Defining use functions may have more bounds than the opaque type, which is ok, as long as the\n@@ -296,7 +296,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         infcx\n                             .report_mismatched_types(\n                                 &ObligationCause::misc(instantiated_ty.span, body_id),\n-                                self.tcx.mk_opaque(def_id, id_substs),\n+                                self.tcx.mk_opaque(def_id.to_def_id(), id_substs),\n                                 definition_ty,\n                                 err,\n                             )\n@@ -423,7 +423,7 @@ fn check_opaque_type_parameter_valid(\n struct ReverseMapper<'tcx> {\n     tcx: TyCtxt<'tcx>,\n \n-    opaque_type_def_id: DefId,\n+    opaque_type_def_id: LocalDefId,\n     map: FxHashMap<GenericArg<'tcx>, GenericArg<'tcx>>,\n     map_missing_regions_to_empty: bool,\n \n@@ -437,7 +437,7 @@ struct ReverseMapper<'tcx> {\n impl<'tcx> ReverseMapper<'tcx> {\n     fn new(\n         tcx: TyCtxt<'tcx>,\n-        opaque_type_def_id: DefId,\n+        opaque_type_def_id: LocalDefId,\n         map: FxHashMap<GenericArg<'tcx>, GenericArg<'tcx>>,\n         hidden_ty: Ty<'tcx>,\n         span: Span,"}, {"sha": "8dc20544f1b1add6279876915572578c8259c64f", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/136f017258f9c08ef36c0ea705ddd9ffd75c5b28/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/136f017258f9c08ef36c0ea705ddd9ffd75c5b28/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=136f017258f9c08ef36c0ea705ddd9ffd75c5b28", "patch": "@@ -153,7 +153,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n             .opaque_type_storage\n             .take_opaque_types()\n             .into_iter()\n-            .map(|(k, v)| (self.tcx.mk_opaque(k.def_id, k.substs), v.hidden_type.ty))\n+            .map(|(k, v)| (self.tcx.mk_opaque(k.def_id.to_def_id(), k.substs), v.hidden_type.ty))\n             .collect()\n     }\n "}, {"sha": "b3dc2e586d251849b2fa63eb211241e68e53496d", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/136f017258f9c08ef36c0ea705ddd9ffd75c5b28/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/136f017258f9c08ef36c0ea705ddd9ffd75c5b28/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=136f017258f9c08ef36c0ea705ddd9ffd75c5b28", "patch": "@@ -938,7 +938,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     #[instrument(skip(self), level = \"debug\")]\n     pub fn member_constraint(\n         &self,\n-        opaque_type_def_id: DefId,\n+        opaque_type_def_id: LocalDefId,\n         definition_span: Span,\n         hidden_ty: Ty<'tcx>,\n         region: ty::Region<'tcx>,"}, {"sha": "4ee9c4eeda40a0ffda176fe394679cc255de1736", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/136f017258f9c08ef36c0ea705ddd9ffd75c5b28/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/136f017258f9c08ef36c0ea705ddd9ffd75c5b28/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=136f017258f9c08ef36c0ea705ddd9ffd75c5b28", "patch": "@@ -51,7 +51,11 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             return InferOk { value: ty, obligations: vec![] };\n         }\n         let mut obligations = vec![];\n-        let replace_opaque_type = |def_id| self.opaque_type_origin(def_id, span).is_some();\n+        let replace_opaque_type = |def_id: DefId| {\n+            def_id\n+                .as_local()\n+                .map_or(false, |def_id| self.opaque_type_origin(def_id, span).is_some())\n+        };\n         let value = ty.fold_with(&mut ty::fold::BottomUpFolder {\n             tcx: self.tcx,\n             lt_op: |lt| lt,\n@@ -96,6 +100,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         let (a, b) = if a_is_expected { (a, b) } else { (b, a) };\n         let process = |a: Ty<'tcx>, b: Ty<'tcx>| match *a.kind() {\n             ty::Opaque(def_id, substs) if def_id.is_local() => {\n+                let def_id = def_id.expect_local();\n                 let origin = if self.defining_use_anchor.is_some() {\n                     // Check that this is `impl Trait` type is\n                     // declared by `parent_def_id` -- i.e., one whose\n@@ -141,7 +146,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     // no one encounters it in practice.\n                     // It does occur however in `fn fut() -> impl Future<Output = i32> { async { 42 } }`,\n                     // where it is of no concern, so we only check for TAITs.\n-                    if let Some(OpaqueTyOrigin::TyAlias) = self.opaque_type_origin(did2, cause.span)\n+                    if let Some(OpaqueTyOrigin::TyAlias) =\n+                        did2.as_local().and_then(|did2| self.opaque_type_origin(did2, cause.span))\n                     {\n                         self.tcx\n                                 .sess\n@@ -399,8 +405,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     }\n \n     #[instrument(skip(self), level = \"trace\")]\n-    pub fn opaque_type_origin(&self, opaque_def_id: DefId, span: Span) -> Option<OpaqueTyOrigin> {\n-        let def_id = opaque_def_id.as_local()?;\n+    pub fn opaque_type_origin(&self, def_id: LocalDefId, span: Span) -> Option<OpaqueTyOrigin> {\n         let opaque_hir_id = self.tcx.hir().local_def_id_to_hir_id(def_id);\n         let parent_def_id = self.defining_use_anchor?;\n         let item_kind = &self.tcx.hir().expect_item(def_id).kind;\n@@ -409,7 +414,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             span_bug!(\n                 span,\n                 \"weird opaque type: {:#?}, {:#?}\",\n-                opaque_def_id,\n+                def_id,\n                 item_kind\n             )\n         };\n@@ -428,12 +433,11 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     }\n \n     #[instrument(skip(self), level = \"trace\")]\n-    fn opaque_ty_origin_unchecked(&self, opaque_def_id: DefId, span: Span) -> OpaqueTyOrigin {\n-        let def_id = opaque_def_id.as_local().unwrap();\n+    fn opaque_ty_origin_unchecked(&self, def_id: LocalDefId, span: Span) -> OpaqueTyOrigin {\n         let origin = match self.tcx.hir().expect_item(def_id).kind {\n             hir::ItemKind::OpaqueTy(hir::OpaqueTy { origin, .. }) => origin,\n             ref itemkind => {\n-                span_bug!(span, \"weird opaque type: {:?}, {:#?}\", opaque_def_id, itemkind)\n+                span_bug!(span, \"weird opaque type: {:?}, {:#?}\", def_id, itemkind)\n             }\n         };\n         trace!(?origin);\n@@ -557,7 +561,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             obligations = self.at(&cause, param_env).eq(prev, hidden_ty)?.obligations;\n         }\n \n-        let item_bounds = tcx.bound_explicit_item_bounds(def_id);\n+        let item_bounds = tcx.bound_explicit_item_bounds(def_id.to_def_id());\n \n         for predicate in item_bounds.transpose_iter().map(|e| e.map_bound(|(p, _)| *p)) {\n             debug!(?predicate);\n@@ -579,7 +583,9 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     }\n                     // Replace all other mentions of the same opaque type with the hidden type,\n                     // as the bounds must hold on the hidden type after all.\n-                    ty::Opaque(def_id2, substs2) if def_id == def_id2 && substs == substs2 => {\n+                    ty::Opaque(def_id2, substs2)\n+                        if def_id.to_def_id() == def_id2 && substs == substs2 =>\n+                    {\n                         hidden_ty\n                     }\n                     _ => ty,"}, {"sha": "551f398e0c2c41b75667078f8ce45fbbb3029901", "filename": "compiler/rustc_infer/src/infer/region_constraints/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/136f017258f9c08ef36c0ea705ddd9ffd75c5b28/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/136f017258f9c08ef36c0ea705ddd9ffd75c5b28/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=136f017258f9c08ef36c0ea705ddd9ffd75c5b28", "patch": "@@ -12,7 +12,7 @@ use rustc_data_structures::intern::Interned;\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::undo_log::UndoLogs;\n use rustc_data_structures::unify as ut;\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::LocalDefId;\n use rustc_index::vec::IndexVec;\n use rustc_middle::infer::unify_key::{RegionVidKey, UnifiedRegion};\n use rustc_middle::ty::ReStatic;\n@@ -533,7 +533,7 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n \n     pub fn member_constraint(\n         &mut self,\n-        opaque_type_def_id: DefId,\n+        opaque_type_def_id: LocalDefId,\n         definition_span: Span,\n         hidden_ty: Ty<'tcx>,\n         member_region: ty::Region<'tcx>,"}, {"sha": "8b2f9bdfd486bdd4555e353a9a07eebbfc4a3b48", "filename": "compiler/rustc_middle/src/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/136f017258f9c08ef36c0ea705ddd9ffd75c5b28/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/136f017258f9c08ef36c0ea705ddd9ffd75c5b28/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fmod.rs?ref=136f017258f9c08ef36c0ea705ddd9ffd75c5b28", "patch": "@@ -4,7 +4,7 @@ pub mod unify_key;\n use crate::ty::Region;\n use crate::ty::Ty;\n use rustc_data_structures::sync::Lrc;\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::LocalDefId;\n use rustc_span::Span;\n \n /// Requires that `region` must be equal to one of the regions in `choice_regions`.\n@@ -16,7 +16,7 @@ use rustc_span::Span;\n #[derive(Debug, Clone, HashStable, TypeFoldable, TypeVisitable, Lift)]\n pub struct MemberConstraint<'tcx> {\n     /// The `DefId` of the opaque type causing this constraint: used for error reporting.\n-    pub opaque_type_def_id: DefId,\n+    pub opaque_type_def_id: LocalDefId,\n \n     /// The span where the hidden type was instantiated.\n     pub definition_span: Span,"}, {"sha": "423e84d88cf738f19d5d9d7d3dd8df737865be82", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/136f017258f9c08ef36c0ea705ddd9ffd75c5b28/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/136f017258f9c08ef36c0ea705ddd9ffd75c5b28/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=136f017258f9c08ef36c0ea705ddd9ffd75c5b28", "patch": "@@ -235,7 +235,7 @@ pub struct BorrowCheckResult<'tcx> {\n     /// All the opaque types that are restricted to concrete types\n     /// by this function. Unlike the value in `TypeckResults`, this has\n     /// unerased regions.\n-    pub concrete_opaque_types: VecMap<DefId, OpaqueHiddenType<'tcx>>,\n+    pub concrete_opaque_types: VecMap<LocalDefId, OpaqueHiddenType<'tcx>>,\n     pub closure_requirements: Option<ClosureRegionRequirements<'tcx>>,\n     pub used_mut_upvars: SmallVec<[Field; 8]>,\n     pub tainted_by_errors: Option<ErrorGuaranteed>,"}, {"sha": "0f98d19820e25b06c5d963d9d00620cd1c3fe38e", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/136f017258f9c08ef36c0ea705ddd9ffd75c5b28/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/136f017258f9c08ef36c0ea705ddd9ffd75c5b28/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=136f017258f9c08ef36c0ea705ddd9ffd75c5b28", "patch": "@@ -542,7 +542,7 @@ pub struct TypeckResults<'tcx> {\n     /// even if they are only set in dead code (which doesn't show up in MIR).\n     /// For type-alias-impl-trait, this map is only used to prevent query cycles,\n     /// so the hidden types are all `None`.\n-    pub concrete_opaque_types: VecMap<DefId, Option<Ty<'tcx>>>,\n+    pub concrete_opaque_types: VecMap<LocalDefId, Option<Ty<'tcx>>>,\n \n     /// Tracks the minimum captures required for a closure;\n     /// see `MinCaptureInformationMap` for more details."}, {"sha": "53919826bf6179df83d3e9447ca4c4927bff8637", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/136f017258f9c08ef36c0ea705ddd9ffd75c5b28/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/136f017258f9c08ef36c0ea705ddd9ffd75c5b28/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=136f017258f9c08ef36c0ea705ddd9ffd75c5b28", "patch": "@@ -1108,8 +1108,7 @@ impl<'tcx> InstantiatedPredicates<'tcx> {\n #[derive(Copy, Clone, Debug, PartialEq, Eq, HashStable, TyEncodable, TyDecodable, Lift)]\n #[derive(TypeFoldable, TypeVisitable)]\n pub struct OpaqueTypeKey<'tcx> {\n-    // FIXME(oli-obk): make this a LocalDefId\n-    pub def_id: DefId,\n+    pub def_id: LocalDefId,\n     pub substs: SubstsRef<'tcx>,\n }\n "}, {"sha": "9f622ad6cd2a12e34c87d0f5a499c89e255ae8e5", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/136f017258f9c08ef36c0ea705ddd9ffd75c5b28/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/136f017258f9c08ef36c0ea705ddd9ffd75c5b28/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=136f017258f9c08ef36c0ea705ddd9ffd75c5b28", "patch": "@@ -1707,13 +1707,6 @@ impl<'tcx> Ty<'tcx> {\n         }\n     }\n \n-    pub fn expect_opaque_type(self) -> ty::OpaqueTypeKey<'tcx> {\n-        match *self.kind() {\n-            Opaque(def_id, substs) => ty::OpaqueTypeKey { def_id, substs },\n-            _ => bug!(\"`expect_opaque_type` called on non-opaque type: {}\", self),\n-        }\n-    }\n-\n     pub fn simd_size_and_type(self, tcx: TyCtxt<'tcx>) -> (u64, Ty<'tcx>) {\n         match self.kind() {\n             Adt(def, substs) => {"}, {"sha": "3fb8e5080f3469868fca9fb11cb2201c19041da7", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/136f017258f9c08ef36c0ea705ddd9ffd75c5b28/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/136f017258f9c08ef36c0ea705ddd9ffd75c5b28/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=136f017258f9c08ef36c0ea705ddd9ffd75c5b28", "patch": "@@ -1513,7 +1513,7 @@ pub fn check_type_bounds<'tcx>(\n                         value.hidden_type.span,\n                         tcx.hir().local_def_id_to_hir_id(impl_ty.def_id.expect_local()),\n                     ),\n-                    tcx.mk_opaque(key.def_id, key.substs),\n+                    tcx.mk_opaque(key.def_id.to_def_id(), key.substs),\n                     value.hidden_type.ty,\n                     TypeError::Mismatch,\n                 )"}, {"sha": "d079aeb4801caeb05c93d24e4995fc8e2303f291", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/136f017258f9c08ef36c0ea705ddd9ffd75c5b28/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/136f017258f9c08ef36c0ea705ddd9ffd75c5b28/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=136f017258f9c08ef36c0ea705ddd9ffd75c5b28", "patch": "@@ -763,12 +763,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // src/test/ui/impl-trait/hidden-type-is-opaque-2.rs for examples that hit this path.\n         if formal_ret.has_infer_types() {\n             for ty in ret_ty.walk() {\n-                if let ty::subst::GenericArgKind::Type(ty) = ty.unpack() {\n-                    if let ty::Opaque(def_id, _) = *ty.kind() {\n-                        if self.infcx.opaque_type_origin(def_id, DUMMY_SP).is_some() {\n-                            return None;\n-                        }\n-                    }\n+                if let ty::subst::GenericArgKind::Type(ty) = ty.unpack()\n+                    && let ty::Opaque(def_id, _) = *ty.kind()\n+                    && let Some(def_id) = def_id.as_local()\n+                    && self.infcx.opaque_type_origin(def_id, DUMMY_SP).is_some() {\n+                    return None;\n                 }\n             }\n         }"}, {"sha": "23ac638b2f430553e1df3e0d017793bc0a88815f", "filename": "compiler/rustc_typeck/src/check/writeback.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/136f017258f9c08ef36c0ea705ddd9ffd75c5b28/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/136f017258f9c08ef36c0ea705ddd9ffd75c5b28/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs?ref=136f017258f9c08ef36c0ea705ddd9ffd75c5b28", "patch": "@@ -4,6 +4,7 @@\n \n use crate::check::FnCtxt;\n \n+use hir::def_id::LocalDefId;\n use rustc_data_structures::stable_map::FxHashMap;\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n@@ -509,13 +510,13 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n                 hir::OpaqueTyOrigin::FnReturn(_) | hir::OpaqueTyOrigin::AsyncFn(_) => {\n                     let ty = self.resolve(decl.hidden_type.ty, &decl.hidden_type.span);\n                     struct RecursionChecker {\n-                        def_id: DefId,\n+                        def_id: LocalDefId,\n                     }\n                     impl<'tcx> ty::TypeVisitor<'tcx> for RecursionChecker {\n                         type BreakTy = ();\n                         fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n                             if let ty::Opaque(def_id, _) = *t.kind() {\n-                                if def_id == self.def_id {\n+                                if def_id == self.def_id.to_def_id() {\n                                     return ControlFlow::Break(());\n                                 }\n                             }"}, {"sha": "faa4f3700bba8799b9346145659a9e91e04f30c7", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/136f017258f9c08ef36c0ea705ddd9ffd75c5b28/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/136f017258f9c08ef36c0ea705ddd9ffd75c5b28/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=136f017258f9c08ef36c0ea705ddd9ffd75c5b28", "patch": "@@ -342,7 +342,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                     let concrete_ty = tcx\n                         .mir_borrowck(owner)\n                         .concrete_opaque_types\n-                        .get(&def_id.to_def_id())\n+                        .get(&def_id)\n                         .copied()\n                         .map(|concrete| concrete.ty)\n                         .unwrap_or_else(|| {\n@@ -353,7 +353,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                                 // the `concrete_opaque_types` table.\n                                 tcx.ty_error()\n                             } else {\n-                                table.concrete_opaque_types.get(&def_id.to_def_id()).copied().unwrap_or_else(|| {\n+                                table.concrete_opaque_types.get(&def_id).copied().unwrap_or_else(|| {\n                                     // We failed to resolve the opaque type or it\n                                     // resolves to itself. We interpret this as the\n                                     // no values of the hidden type ever being constructed,\n@@ -526,7 +526,7 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n         tcx: TyCtxt<'tcx>,\n \n         /// def_id of the opaque type whose defining uses are being checked\n-        def_id: DefId,\n+        def_id: LocalDefId,\n \n         /// as we walk the defining uses, we are checking that all of them\n         /// define the same hidden type. This variable is set to `Some`\n@@ -602,15 +602,15 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n         fn visit_item(&mut self, it: &'tcx Item<'tcx>) {\n             trace!(?it.def_id);\n             // The opaque type itself or its children are not within its reveal scope.\n-            if it.def_id.to_def_id() != self.def_id {\n+            if it.def_id != self.def_id {\n                 self.check(it.def_id);\n                 intravisit::walk_item(self, it);\n             }\n         }\n         fn visit_impl_item(&mut self, it: &'tcx ImplItem<'tcx>) {\n             trace!(?it.def_id);\n             // The opaque type itself or its children are not within its reveal scope.\n-            if it.def_id.to_def_id() != self.def_id {\n+            if it.def_id != self.def_id {\n                 self.check(it.def_id);\n                 intravisit::walk_impl_item(self, it);\n             }\n@@ -624,7 +624,7 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n \n     let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n     let scope = tcx.hir().get_defining_scope(hir_id);\n-    let mut locator = ConstraintLocator { def_id: def_id.to_def_id(), tcx, found: None };\n+    let mut locator = ConstraintLocator { def_id: def_id, tcx, found: None };\n \n     debug!(?scope);\n "}]}