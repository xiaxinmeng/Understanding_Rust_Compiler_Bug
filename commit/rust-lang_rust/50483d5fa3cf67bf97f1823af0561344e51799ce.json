{"sha": "50483d5fa3cf67bf97f1823af0561344e51799ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwNDgzZDVmYTNjZjY3YmY5N2YxODIzYWYwNTYxMzQ0ZTUxNzk5Y2U=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-07-08T15:21:16Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-07-09T09:54:58Z"}, "message": "Improve slice docs", "tree": {"sha": "d8c04e4589336bda861e26c2e3618de173a145d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8c04e4589336bda861e26c2e3618de173a145d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50483d5fa3cf67bf97f1823af0561344e51799ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50483d5fa3cf67bf97f1823af0561344e51799ce", "html_url": "https://github.com/rust-lang/rust/commit/50483d5fa3cf67bf97f1823af0561344e51799ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50483d5fa3cf67bf97f1823af0561344e51799ce/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4114b68eba6914b46202a2108f34f7653e393851", "url": "https://api.github.com/repos/rust-lang/rust/commits/4114b68eba6914b46202a2108f34f7653e393851", "html_url": "https://github.com/rust-lang/rust/commit/4114b68eba6914b46202a2108f34f7653e393851"}], "stats": {"total": 245, "additions": 236, "deletions": 9}, "files": [{"sha": "313b01e3c1afdecfd6dcbf622e3c707d619e3669", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 236, "deletions": 9, "changes": 245, "blob_url": "https://github.com/rust-lang/rust/blob/50483d5fa3cf67bf97f1823af0561344e51799ce/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50483d5fa3cf67bf97f1823af0561344e51799ce/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=50483d5fa3cf67bf97f1823af0561344e51799ce", "patch": "@@ -200,28 +200,74 @@ impl<T> [T] {\n         core_slice::SliceExt::first(self)\n     }\n \n-    /// Returns a mutable pointer to the first element of a slice, or `None` if it is empty\n+    /// Returns a mutable pointer to the first element of a slice, or `None` if it is empty.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let x = &mut [0, 1, 2];\n+    ///\n+    /// if let Some(first) = x.first_mut() {\n+    ///     *first = 5;\n+    /// }\n+    /// assert_eq!(x, &[5, 1, 2]);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn first_mut(&mut self) -> Option<&mut T> {\n         core_slice::SliceExt::first_mut(self)\n     }\n \n     /// Returns the first and all the rest of the elements of a slice.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let x = &[0, 1, 2];\n+    ///\n+    /// if let Some((first, elements)) = x.split_first() {\n+    ///     assert_eq!(first, &0);\n+    ///     assert_eq!(elements, &[1, 2]);\n+    /// }\n+    /// ```\n     #[stable(feature = \"slice_splits\", since = \"1.5.0\")]\n     #[inline]\n     pub fn split_first(&self) -> Option<(&T, &[T])> {\n         core_slice::SliceExt::split_first(self)\n     }\n \n     /// Returns the first and all the rest of the elements of a slice.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let x = &mut [0, 1, 2];\n+    ///\n+    /// if let Some((first, elements)) = x.split_first_mut() {\n+    ///     *first = 3;\n+    ///     elements[0] = 4;\n+    ///     elements[1] = 5;\n+    /// }\n+    /// assert_eq!(x, &[3, 4, 5]);\n+    /// ```\n     #[stable(feature = \"slice_splits\", since = \"1.5.0\")]\n     #[inline]\n     pub fn split_first_mut(&mut self) -> Option<(&mut T, &mut [T])> {\n         core_slice::SliceExt::split_first_mut(self)\n     }\n \n     /// Returns the last and all the rest of the elements of a slice.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let x = &[0, 1, 2];\n+    ///\n+    /// if let Some((last, elements)) = x.split_last() {\n+    ///     assert_eq!(last, &2);\n+    ///     assert_eq!(elements, &[0, 1]);\n+    /// }\n+    /// ```\n     #[stable(feature = \"slice_splits\", since = \"1.5.0\")]\n     #[inline]\n     pub fn split_last(&self) -> Option<(&T, &[T])> {\n@@ -230,6 +276,19 @@ impl<T> [T] {\n     }\n \n     /// Returns the last and all the rest of the elements of a slice.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let x = &mut [0, 1, 2];\n+    ///\n+    /// if let Some((last, elements)) = x.split_last_mut() {\n+    ///     *last = 3;\n+    ///     elements[0] = 4;\n+    ///     elements[1] = 5;\n+    /// }\n+    /// assert_eq!(x, &[4, 5, 3]);\n+    /// ```\n     #[stable(feature = \"slice_splits\", since = \"1.5.0\")]\n     #[inline]\n     pub fn split_last_mut(&mut self) -> Option<(&mut T, &mut [T])> {\n@@ -254,6 +313,17 @@ impl<T> [T] {\n     }\n \n     /// Returns a mutable pointer to the last item in the slice.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let x = &mut [0, 1, 2];\n+    ///\n+    /// if let Some(last) = x.last_mut() {\n+    ///     *last = 10;\n+    /// }\n+    /// assert_eq!(x, &[0, 1, 10]);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn last_mut(&mut self) -> Option<&mut T> {\n@@ -276,7 +346,18 @@ impl<T> [T] {\n         core_slice::SliceExt::get(self, index)\n     }\n \n-    /// Returns a mutable reference to the element at the given index,\n+    /// Returns a mutable reference to the element at the given index.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let x = &mut [0, 1, 2];\n+    ///\n+    /// if let Some(elem) = x.get_mut(1) {\n+    ///     *elem = 42;\n+    /// }\n+    /// assert_eq!(x, &[0, 42, 2]);\n+    /// ```\n     /// or `None` if the index is out of bounds\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -285,14 +366,37 @@ impl<T> [T] {\n     }\n \n     /// Returns a pointer to the element at the given index, without doing\n-    /// bounds checking.\n+    /// bounds checking. So use it very carefully!\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let x = &[1, 2, 4];\n+    ///\n+    /// unsafe {\n+    ///     assert_eq!(x.get_unchecked(1), &2);\n+    /// }\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub unsafe fn get_unchecked(&self, index: usize) -> &T {\n         core_slice::SliceExt::get_unchecked(self, index)\n     }\n \n-    /// Returns an unsafe mutable pointer to the element in index\n+    /// Returns an unsafe mutable pointer to the element in index. So use it\n+    /// very carefully!\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let x = &mut [1, 2, 4];\n+    ///\n+    /// unsafe {\n+    ///     let elem = x.get_unchecked_mut(1);\n+    ///     *elem = 13;\n+    /// }\n+    /// assert_eq!(x, &[1, 13, 4]);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub unsafe fn get_unchecked_mut(&mut self, index: usize) -> &mut T {\n@@ -306,6 +410,19 @@ impl<T> [T] {\n     ///\n     /// Modifying the slice may cause its buffer to be reallocated, which\n     /// would also make any pointers to it invalid.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let x = &[1, 2, 4];\n+    /// let x_ptr = x.as_ptr();\n+    ///\n+    /// unsafe {\n+    ///     for i in 0..x.len() {\n+    ///         assert_eq!(x.get_unchecked(i), &*x_ptr.offset(i as isize));\n+    ///     }\n+    /// }\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn as_ptr(&self) -> *const T {\n@@ -319,6 +436,20 @@ impl<T> [T] {\n     ///\n     /// Modifying the slice may cause its buffer to be reallocated, which\n     /// would also make any pointers to it invalid.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let x = &mut [1, 2, 4];\n+    /// let x_ptr = x.as_mut_ptr();\n+    ///\n+    /// unsafe {\n+    ///     for i in 0..x.len() {\n+    ///         *x_ptr.offset(i as isize) += 2;\n+    ///     }\n+    /// }\n+    /// assert_eq!(x, &[3, 4, 6]);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn as_mut_ptr(&mut self) -> *mut T {\n@@ -336,7 +467,7 @@ impl<T> [T] {\n     ///\n     /// Panics if `a` or `b` are out of bounds.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// let mut v = [\"a\", \"b\", \"c\", \"d\"];\n@@ -365,13 +496,39 @@ impl<T> [T] {\n     }\n \n     /// Returns an iterator over the slice.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let x = &[1, 2, 4];\n+    /// let mut iterator = x.iter();\n+    ///\n+    /// assert_eq!(iterator.next(), Some(&1));\n+    /// assert_eq!(iterator.next(), Some(&2));\n+    /// assert_eq!(iterator.next(), Some(&4));\n+    /// assert_eq!(iterator.next(), None);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn iter(&self) -> Iter<T> {\n         core_slice::SliceExt::iter(self)\n     }\n \n-    /// Returns an iterator that allows modifying each value\n+    /// Returns an iterator that allows modifying each value.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let x = &mut [1, 2, 4];\n+    /// {\n+    ///     let iterator = x.iter_mut();\n+    ///\n+    ///     for elem in iterator {\n+    ///         *elem += 2;\n+    ///     }\n+    /// }\n+    /// assert_eq!(x, &[3, 4, 6]);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn iter_mut(&mut self) -> IterMut<T> {\n@@ -419,6 +576,7 @@ impl<T> [T] {\n     ///\n     /// ```rust\n     /// let v = &[1, 2, 3, 4, 5];\n+    ///\n     /// for chunk in v.chunks(2) {\n     ///     println!(\"{:?}\", chunk);\n     /// }\n@@ -437,6 +595,21 @@ impl<T> [T] {\n     /// # Panics\n     ///\n     /// Panics if `chunk_size` is 0.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let v = &mut [0, 0, 0, 0, 0];\n+    /// let mut count = 1;\n+    ///\n+    /// for chunk in v.chunks_mut(2) {\n+    ///     for elem in chunk.iter_mut() {\n+    ///         *elem += count;\n+    ///     }\n+    ///     count += 1;\n+    /// }\n+    /// assert_eq!(v, &[1, 1, 2, 2, 3]);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn chunks_mut(&mut self, chunk_size: usize) -> ChunksMut<T> {\n@@ -477,7 +650,7 @@ impl<T> [T] {\n     ///\n     /// Panics if `mid > len`.\n     ///\n-    /// # Example\n+    /// # Examples\n     ///\n     /// ```rust\n     /// let mut v = [1, 2, 3, 4, 5, 6];\n@@ -508,7 +681,7 @@ impl<T> [T] {\n     }\n \n     /// Returns an iterator over subslices separated by elements that match\n-    /// `pred`.  The matched element is not contained in the subslices.\n+    /// `pred`. The matched element is not contained in the subslices.\n     ///\n     /// # Examples\n     ///\n@@ -517,6 +690,7 @@ impl<T> [T] {\n     ///\n     /// ```\n     /// let v = [10, 40, 30, 20, 60, 50];\n+    ///\n     /// for group in v.split(|num| *num % 3 == 0) {\n     ///     println!(\"{:?}\", group);\n     /// }\n@@ -530,7 +704,18 @@ impl<T> [T] {\n     }\n \n     /// Returns an iterator over mutable subslices separated by elements that\n-    /// match `pred`.  The matched element is not contained in the subslices.\n+    /// match `pred`. The matched element is not contained in the subslices.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let mut v = [10, 40, 30, 20, 60, 50];\n+    ///\n+    /// for group in v.split_mut(|num| *num % 3 == 0) {\n+    ///     group[0] = 1;\n+    /// }\n+    /// assert_eq!(v, [1, 40, 30, 1, 60, 1]);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn split_mut<F>(&mut self, pred: F) -> SplitMut<T, F>\n@@ -553,6 +738,7 @@ impl<T> [T] {\n     ///\n     /// ```\n     /// let v = [10, 40, 30, 20, 60, 50];\n+    ///\n     /// for group in v.splitn(2, |num| *num % 3 == 0) {\n     ///     println!(\"{:?}\", group);\n     /// }\n@@ -571,6 +757,17 @@ impl<T> [T] {\n     ///\n     /// The last element returned, if any, will contain the remainder of the\n     /// slice.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let mut v = [10, 40, 30, 20, 60, 50];\n+    ///\n+    /// for group in v.splitn_mut(2, |num| *num % 3 == 0) {\n+    ///     group[0] = 1;\n+    /// }\n+    /// assert_eq!(v, [1, 40, 30, 1, 60, 50]);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn splitn_mut<F>(&mut self, n: usize, pred: F) -> SplitNMut<T, F>\n@@ -594,6 +791,7 @@ impl<T> [T] {\n     ///\n     /// ```\n     /// let v = [10, 40, 30, 20, 60, 50];\n+    ///\n     /// for group in v.rsplitn(2, |num| *num % 3 == 0) {\n     ///     println!(\"{:?}\", group);\n     /// }\n@@ -613,6 +811,17 @@ impl<T> [T] {\n     ///\n     /// The last element returned, if any, will contain the remainder of the\n     /// slice.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let mut s = [10, 40, 30, 20, 60, 50];\n+    ///\n+    /// for group in s.rsplitn_mut(2, |num| *num % 3 == 0) {\n+    ///     group[0] = 1;\n+    /// }\n+    /// assert_eq!(s, [1, 40, 30, 20, 60, 1]);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn rsplitn_mut<F>(&mut self, n: usize, pred: F) -> RSplitNMut<T, F>\n@@ -892,6 +1101,14 @@ impl<T> [T] {\n \n \n     /// Copies `self` into a new `Vec`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let s = [10, 40, 30];\n+    /// let x = s.to_vec();\n+    /// // Here, `s` and `x` can be modified independently.\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn to_vec(&self) -> Vec<T>\n@@ -902,6 +1119,16 @@ impl<T> [T] {\n     }\n \n     /// Converts `self` into a vector without clones or allocation.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let s: Box<[i32]> = Box::new([10, 40, 30]);\n+    /// let x = s.into_vec();\n+    /// // `s` cannot be used anymore because it has been converted into `x`.\n+    ///\n+    /// assert_eq!(x, vec!(10, 40, 30));\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn into_vec(self: Box<Self>) -> Vec<T> {"}]}