{"sha": "cd37b950584cb320dc7a9a7bb59e8da5f91eb3c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkMzdiOTUwNTg0Y2IzMjBkYzdhOWE3YmI1OWU4ZGE1ZjkxZWIzYzg=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-05-07T14:19:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-07T14:19:18Z"}, "message": "Rollup merge of #84254 - jclulow:illumos-link-order, r=petrochenkov\n\nillumos should put libc last in library search order\n\nUnder some conditions, the toolchain will produce a sequence of linker\narguments that result in a NEEDED list that puts libc before libgcc_s;\ne.g.,\n\n    [0]  NEEDED            0x2046ba            libc.so.1\n    [1]  NEEDED            0x204723            libm.so.2\n    [2]  NEEDED            0x204736            libsocket.so.1\n    [3]  NEEDED            0x20478b            libumem.so.1\n    [4]  NEEDED            0x204763            libgcc_s.so.1\n\nBoth libc and libgcc_s provide an unwinder implementation, but libgcc_s\nprovides some extra symbols upon which Rust directly depends.  If libc\nis first in the NEEDED list we will find some of those symbols in libc\nbut others in libgcc_s, resulting in undefined behaviour as the two\nimplementations do not use compatible interior data structures.\n\nThis solution is not perfect, but is the simplest way to produce correct\nbinaries on illumos for now.", "tree": {"sha": "cbba68222460064a75818218f1df8dc2ec875591", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbba68222460064a75818218f1df8dc2ec875591"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd37b950584cb320dc7a9a7bb59e8da5f91eb3c8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJglUxmCRBK7hj4Ov3rIwAA0CoIAKQ+TQ9xu6vDucOcKiIB7Io2\nxfn05MbNS7A453FRI4PIJq2J6wz/qsAIxBkQSGK3NRLEskqmHTL6DWLSBR/Dv6M/\n7LBENP5BYAP2bk8FF4DTdO3vtF33s0L+H41+6/IkslM4c290ueJ21huq78ZIsyG+\n2Ojo+c6s9BovHj+xNIavL3A8CTsgeyZcm+eT1s4ZZt8ise9n1On7UWKa7Kn1ZXSE\nBmuoWMEM94RGvxDiJErzx3FCaWhLC5FNZsN2jEeOpYYb3YAL3OXxuwfDjD7d8yWx\nGw5UDjvvIiBcfnzGk9Iewd8L4j5CO2MUmk7wJ+PZnGp7CJnGvEa3svLV8G1YW9w=\n=Z/Wv\n-----END PGP SIGNATURE-----\n", "payload": "tree cbba68222460064a75818218f1df8dc2ec875591\nparent e5f83d24aee866a14753a7cedbb4e301dfe5bef5\nparent 31c2ad0d4cdd06622353a57b3a678586077b84fe\nauthor Dylan DPC <dylan.dpc@gmail.com> 1620397158 +0200\ncommitter GitHub <noreply@github.com> 1620397158 +0200\n\nRollup merge of #84254 - jclulow:illumos-link-order, r=petrochenkov\n\nillumos should put libc last in library search order\n\nUnder some conditions, the toolchain will produce a sequence of linker\narguments that result in a NEEDED list that puts libc before libgcc_s;\ne.g.,\n\n    [0]  NEEDED            0x2046ba            libc.so.1\n    [1]  NEEDED            0x204723            libm.so.2\n    [2]  NEEDED            0x204736            libsocket.so.1\n    [3]  NEEDED            0x20478b            libumem.so.1\n    [4]  NEEDED            0x204763            libgcc_s.so.1\n\nBoth libc and libgcc_s provide an unwinder implementation, but libgcc_s\nprovides some extra symbols upon which Rust directly depends.  If libc\nis first in the NEEDED list we will find some of those symbols in libc\nbut others in libgcc_s, resulting in undefined behaviour as the two\nimplementations do not use compatible interior data structures.\n\nThis solution is not perfect, but is the simplest way to produce correct\nbinaries on illumos for now.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd37b950584cb320dc7a9a7bb59e8da5f91eb3c8", "html_url": "https://github.com/rust-lang/rust/commit/cd37b950584cb320dc7a9a7bb59e8da5f91eb3c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd37b950584cb320dc7a9a7bb59e8da5f91eb3c8/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5f83d24aee866a14753a7cedbb4e301dfe5bef5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5f83d24aee866a14753a7cedbb4e301dfe5bef5", "html_url": "https://github.com/rust-lang/rust/commit/e5f83d24aee866a14753a7cedbb4e301dfe5bef5"}, {"sha": "31c2ad0d4cdd06622353a57b3a678586077b84fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/31c2ad0d4cdd06622353a57b3a678586077b84fe", "html_url": "https://github.com/rust-lang/rust/commit/31c2ad0d4cdd06622353a57b3a678586077b84fe"}], "stats": {"total": 19, "additions": 19, "deletions": 0}, "files": [{"sha": "a66de89f6817996a6ba13390ede306cf1d1e05b7", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd37b950584cb320dc7a9a7bb59e8da5f91eb3c8/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd37b950584cb320dc7a9a7bb59e8da5f91eb3c8/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=cd37b950584cb320dc7a9a7bb59e8da5f91eb3c8", "patch": "@@ -340,6 +340,14 @@ impl<'a> Linker for GccLinker<'a> {\n     }\n \n     fn link_dylib(&mut self, lib: Symbol, verbatim: bool, as_needed: bool) {\n+        if self.sess.target.os == \"illumos\" && lib.as_str() == \"c\" {\n+            // libc will be added via late_link_args on illumos so that it will\n+            // appear last in the library search order.\n+            // FIXME: This should be replaced by a more complete and generic\n+            // mechanism for controlling the order of library arguments passed\n+            // to the linker.\n+            return;\n+        }\n         if !as_needed {\n             if self.sess.target.is_like_osx {\n                 // FIXME(81490): ld64 doesn't support these flags but macOS 11"}, {"sha": "2b8e046c46b0e7135ce9893b3eb4375e87760547", "filename": "compiler/rustc_target/src/spec/illumos_base.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cd37b950584cb320dc7a9a7bb59e8da5f91eb3c8/compiler%2Frustc_target%2Fsrc%2Fspec%2Fillumos_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd37b950584cb320dc7a9a7bb59e8da5f91eb3c8/compiler%2Frustc_target%2Fsrc%2Fspec%2Fillumos_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fillumos_base.rs?ref=cd37b950584cb320dc7a9a7bb59e8da5f91eb3c8", "patch": "@@ -6,6 +6,17 @@ pub fn opts() -> TargetOptions {\n     late_link_args.insert(\n         LinkerFlavor::Gcc,\n         vec![\n+            // The illumos libc contains a stack unwinding implementation, as\n+            // does libgcc_s.  The latter implementation includes several\n+            // additional symbols that are not always in base libc.  To force\n+            // the consistent use of just one unwinder, we ensure libc appears\n+            // after libgcc_s in the NEEDED list for the resultant binary by\n+            // ignoring any attempts to add it as a dynamic dependency until the\n+            // very end.\n+            // FIXME: This should be replaced by a more complete and generic\n+            // mechanism for controlling the order of library arguments passed\n+            // to the linker.\n+            \"-lc\".to_string(),\n             // LLVM will insert calls to the stack protector functions\n             // \"__stack_chk_fail\" and \"__stack_chk_guard\" into code in native\n             // object files.  Some platforms include these symbols directly in"}]}