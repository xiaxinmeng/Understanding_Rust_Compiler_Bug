{"sha": "2f46b763da2c098913884f101b6d71d69af41b49", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmNDZiNzYzZGEyYzA5ODkxMzg4NGYxMDFiNmQ3MWQ2OWFmNDFiNDk=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-02-05T01:41:43Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-02-05T01:42:19Z"}, "message": "core/syntax: Staging fixes", "tree": {"sha": "cbaa51adda027a8bd1e6d576ed8203df244b4089", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbaa51adda027a8bd1e6d576ed8203df244b4089"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f46b763da2c098913884f101b6d71d69af41b49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f46b763da2c098913884f101b6d71d69af41b49", "html_url": "https://github.com/rust-lang/rust/commit/2f46b763da2c098913884f101b6d71d69af41b49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f46b763da2c098913884f101b6d71d69af41b49/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e45d7111c73f348153177ee4a1a988f3d95306d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e45d7111c73f348153177ee4a1a988f3d95306d", "html_url": "https://github.com/rust-lang/rust/commit/4e45d7111c73f348153177ee4a1a988f3d95306d"}], "stats": {"total": 46, "additions": 2, "deletions": 44}, "files": [{"sha": "947976e79afc160b4badc449cda58d391d1b40c0", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2f46b763da2c098913884f101b6d71d69af41b49/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f46b763da2c098913884f101b6d71d69af41b49/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=2f46b763da2c098913884f101b6d71d69af41b49", "patch": "@@ -143,8 +143,8 @@ pub fn BufferHeader() -> BufferHeader {\n // This is for protocols to associate extra data to thread around.\n #[doc(hidden)]\n #[cfg(stage0)]\n-#[cfg(stage1)]\n type Buffer<T> = { header: BufferHeader, data: T };\n+#[cfg(stage1)]\n #[cfg(stage2)]\n pub struct Buffer<T> {\n     header: BufferHeader,\n@@ -258,22 +258,8 @@ fn unibuffer<T: Owned>() -> ~Buffer<Packet<T>> {\n     }\n     move b\n }\n-#[cfg(stage1)]\n-fn unibuffer<T>() -> ~Buffer<Packet<T>> {\n-    let b = ~{\n-        header: BufferHeader(),\n-        data: Packet {\n-            header: PacketHeader(),\n-            payload: None,\n-        }\n-    };\n-\n-    unsafe {\n-        b.data.header.buffer = reinterpret_cast(&b);\n-    }\n-    move b\n-}\n #[doc(hidden)]\n+#[cfg(stage1)]\n #[cfg(stage2)]\n fn unibuffer<T>() -> ~Buffer<Packet<T>> {\n     let b = ~Buffer {"}, {"sha": "da0ac4e08ab06c0b3445173869dee577428a841d", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2f46b763da2c098913884f101b6d71d69af41b49/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f46b763da2c098913884f101b6d71d69af41b49/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=2f46b763da2c098913884f101b6d71d69af41b49", "patch": "@@ -355,34 +355,6 @@ pub impl protocol: gen_init {\n         }))\n     }\n \n-    #[cfg(stage0)]\n-    fn gen_init_bounded(ext_cx: ext_ctxt) -> @ast::expr {\n-        debug!(\"gen_init_bounded\");\n-        let buffer_fields = self.gen_buffer_init(ext_cx);\n-        let buffer = quote_expr!(~{\n-            header: ::pipes::BufferHeader(),\n-            data: $buffer_fields,\n-        });\n-\n-        let entangle_body = ext_cx.block_expr(\n-            ext_cx.block(\n-                self.states.map_to_vec(\n-                    |s| ext_cx.parse_stmt(\n-                        fmt!(\"data.%s.set_buffer(buffer)\",\n-                             s.name))),\n-                ext_cx.parse_expr(\n-                    fmt!(\"::ptr::addr_of(&(data.%s))\",\n-                         self.states[0].name))));\n-\n-        quote_expr!({\n-            let buffer = $buffer;\n-            do ::pipes::entangle_buffer(move buffer) |buffer, data| {\n-                $entangle_body\n-            }\n-        })\n-    }\n-    #[cfg(stage1)]\n-    #[cfg(stage2)]\n     fn gen_init_bounded(ext_cx: ext_ctxt) -> @ast::expr {\n         debug!(\"gen_init_bounded\");\n         let buffer_fields = self.gen_buffer_init(ext_cx);"}]}