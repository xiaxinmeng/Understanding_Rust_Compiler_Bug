{"sha": "3892b7074daeb23ddeaffd3e26b4f7979c6cc5a7", "node_id": "C_kwDOAAsO6NoAKDM4OTJiNzA3NGRhZWIyM2RkZWFmZmQzZTI2YjRmNzk3OWM2Y2M1YTc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-01T00:26:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-01T00:26:53Z"}, "message": "Auto merge of #100210 - mystor:proc_macro_diag_struct, r=eddyb\n\nproc_macro/bridge: send diagnostics over the bridge as a struct\n\nThis removes some RPC when creating and emitting diagnostics, and\nsimplifies the bridge slightly.\n\nAfter this change, there are no remaining methods which take advantage\nof the support for `&mut` references to objects in the store as\narguments, meaning that support for them could technically be removed if\nwe wanted. The only remaining uses of immutable references into the\nstore are `TokenStream` and `SourceFile`.\n\nr? `@eddyb`", "tree": {"sha": "71b63a38646f0101a6a64c1e1a0d76e4605e3197", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71b63a38646f0101a6a64c1e1a0d76e4605e3197"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3892b7074daeb23ddeaffd3e26b4f7979c6cc5a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3892b7074daeb23ddeaffd3e26b4f7979c6cc5a7", "html_url": "https://github.com/rust-lang/rust/commit/3892b7074daeb23ddeaffd3e26b4f7979c6cc5a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3892b7074daeb23ddeaffd3e26b4f7979c6cc5a7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db00199d999dae0e549ff11cfed6d7dee3d4583c", "url": "https://api.github.com/repos/rust-lang/rust/commits/db00199d999dae0e549ff11cfed6d7dee3d4583c", "html_url": "https://github.com/rust-lang/rust/commit/db00199d999dae0e549ff11cfed6d7dee3d4583c"}, {"sha": "1c7c792ddafe2a1aaa76e2ddee4fa9b2187dcfcb", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c7c792ddafe2a1aaa76e2ddee4fa9b2187dcfcb", "html_url": "https://github.com/rust-lang/rust/commit/1c7c792ddafe2a1aaa76e2ddee4fa9b2187dcfcb"}], "stats": {"total": 166, "additions": 41, "deletions": 125}, "files": [{"sha": "59a7b668a83ce96d1da7811bef686cd23980a242", "filename": "compiler/rustc_expand/src/proc_macro_server.rs", "status": "modified", "additions": 17, "deletions": 36, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/3892b7074daeb23ddeaffd3e26b4f7979c6cc5a7/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3892b7074daeb23ddeaffd3e26b4f7979c6cc5a7/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs?ref=3892b7074daeb23ddeaffd3e26b4f7979c6cc5a7", "patch": "@@ -6,7 +6,7 @@ use rustc_ast::tokenstream::{self, Spacing::*, TokenStream};\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n-use rustc_errors::{Diagnostic, MultiSpan, PResult};\n+use rustc_errors::{MultiSpan, PResult};\n use rustc_parse::lexer::nfc_normalize;\n use rustc_parse::parse_stream_from_source_str;\n use rustc_session::parse::ParseSess;\n@@ -15,7 +15,7 @@ use rustc_span::symbol::{self, sym, Symbol};\n use rustc_span::{BytePos, FileName, Pos, SourceFile, Span};\n \n use pm::bridge::{\n-    server, DelimSpan, ExpnGlobals, Group, Ident, LitKind, Literal, Punct, TokenTree,\n+    server, DelimSpan, Diagnostic, ExpnGlobals, Group, Ident, LitKind, Literal, Punct, TokenTree,\n };\n use pm::{Delimiter, Level, LineColumn};\n use std::ops::Bound;\n@@ -368,8 +368,6 @@ impl server::Types for Rustc<'_, '_> {\n     type FreeFunctions = FreeFunctions;\n     type TokenStream = TokenStream;\n     type SourceFile = Lrc<SourceFile>;\n-    type MultiSpan = Vec<Span>;\n-    type Diagnostic = Diagnostic;\n     type Span = Span;\n     type Symbol = Symbol;\n }\n@@ -436,6 +434,21 @@ impl server::FreeFunctions for Rustc<'_, '_> {\n             span: self.call_site,\n         })\n     }\n+\n+    fn emit_diagnostic(&mut self, diagnostic: Diagnostic<Self::Span>) {\n+        let mut diag =\n+            rustc_errors::Diagnostic::new(diagnostic.level.to_internal(), diagnostic.message);\n+        diag.set_span(MultiSpan::from_spans(diagnostic.spans));\n+        for child in diagnostic.children {\n+            diag.sub(\n+                child.level.to_internal(),\n+                child.message,\n+                MultiSpan::from_spans(child.spans),\n+                None,\n+            );\n+        }\n+        self.sess().span_diagnostic.emit_diagnostic(&mut diag);\n+    }\n }\n \n impl server::TokenStream for Rustc<'_, '_> {\n@@ -583,38 +596,6 @@ impl server::SourceFile for Rustc<'_, '_> {\n     }\n }\n \n-impl server::MultiSpan for Rustc<'_, '_> {\n-    fn new(&mut self) -> Self::MultiSpan {\n-        vec![]\n-    }\n-\n-    fn push(&mut self, spans: &mut Self::MultiSpan, span: Self::Span) {\n-        spans.push(span)\n-    }\n-}\n-\n-impl server::Diagnostic for Rustc<'_, '_> {\n-    fn new(&mut self, level: Level, msg: &str, spans: Self::MultiSpan) -> Self::Diagnostic {\n-        let mut diag = Diagnostic::new(level.to_internal(), msg);\n-        diag.set_span(MultiSpan::from_spans(spans));\n-        diag\n-    }\n-\n-    fn sub(\n-        &mut self,\n-        diag: &mut Self::Diagnostic,\n-        level: Level,\n-        msg: &str,\n-        spans: Self::MultiSpan,\n-    ) {\n-        diag.sub(level.to_internal(), msg, MultiSpan::from_spans(spans), None);\n-    }\n-\n-    fn emit(&mut self, mut diag: Self::Diagnostic) {\n-        self.sess().span_diagnostic.emit_diagnostic(&mut diag);\n-    }\n-}\n-\n impl server::Span for Rustc<'_, '_> {\n     fn debug(&mut self, span: Self::Span) -> String {\n         if self.ecx.ecfg.span_debug {"}, {"sha": "4461b21802adbeb91709c3c1ce7fb7f35fab604f", "filename": "library/proc_macro/src/bridge/client.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3892b7074daeb23ddeaffd3e26b4f7979c6cc5a7/library%2Fproc_macro%2Fsrc%2Fbridge%2Fclient.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3892b7074daeb23ddeaffd3e26b4f7979c6cc5a7/library%2Fproc_macro%2Fsrc%2Fbridge%2Fclient.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Fclient.rs?ref=3892b7074daeb23ddeaffd3e26b4f7979c6cc5a7", "patch": "@@ -176,8 +176,6 @@ define_handles! {\n     FreeFunctions,\n     TokenStream,\n     SourceFile,\n-    MultiSpan,\n-    Diagnostic,\n \n     'interned:\n     Span,"}, {"sha": "4c1e196b5ad165c5e679a5a9ffdb0a3c434e1450", "filename": "library/proc_macro/src/bridge/mod.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3892b7074daeb23ddeaffd3e26b4f7979c6cc5a7/library%2Fproc_macro%2Fsrc%2Fbridge%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3892b7074daeb23ddeaffd3e26b4f7979c6cc5a7/library%2Fproc_macro%2Fsrc%2Fbridge%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Fmod.rs?ref=3892b7074daeb23ddeaffd3e26b4f7979c6cc5a7", "patch": "@@ -57,6 +57,7 @@ macro_rules! with_api {\n                 fn track_env_var(var: &str, value: Option<&str>);\n                 fn track_path(path: &str);\n                 fn literal_from_str(s: &str) -> Result<Literal<$S::Span, $S::Symbol>, ()>;\n+                fn emit_diagnostic(diagnostic: Diagnostic<$S::Span>);\n             },\n             TokenStream {\n                 fn drop($self: $S::TokenStream);\n@@ -87,22 +88,6 @@ macro_rules! with_api {\n                 fn path($self: &$S::SourceFile) -> String;\n                 fn is_real($self: &$S::SourceFile) -> bool;\n             },\n-            MultiSpan {\n-                fn drop($self: $S::MultiSpan);\n-                fn new() -> $S::MultiSpan;\n-                fn push($self: &mut $S::MultiSpan, span: $S::Span);\n-            },\n-            Diagnostic {\n-                fn drop($self: $S::Diagnostic);\n-                fn new(level: Level, msg: &str, span: $S::MultiSpan) -> $S::Diagnostic;\n-                fn sub(\n-                    $self: &mut $S::Diagnostic,\n-                    level: Level,\n-                    msg: &str,\n-                    span: $S::MultiSpan,\n-                );\n-                fn emit($self: $S::Diagnostic);\n-            },\n             Span {\n                 fn debug($self: $S::Span) -> String;\n                 fn source_file($self: $S::Span) -> $S::SourceFile;\n@@ -510,6 +495,18 @@ compound_traits!(\n     }\n );\n \n+#[derive(Clone, Debug)]\n+pub struct Diagnostic<Span> {\n+    pub level: Level,\n+    pub message: String,\n+    pub spans: Vec<Span>,\n+    pub children: Vec<Diagnostic<Span>>,\n+}\n+\n+compound_traits!(\n+    struct Diagnostic<Span> { level, message, spans, children }\n+);\n+\n /// Globals provided alongside the initial inputs for a macro expansion.\n /// Provides values such as spans which are used frequently to avoid RPC.\n #[derive(Clone)]"}, {"sha": "e47a77f6c1350530e4f985a31701bc0c28c96e39", "filename": "library/proc_macro/src/bridge/server.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3892b7074daeb23ddeaffd3e26b4f7979c6cc5a7/library%2Fproc_macro%2Fsrc%2Fbridge%2Fserver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3892b7074daeb23ddeaffd3e26b4f7979c6cc5a7/library%2Fproc_macro%2Fsrc%2Fbridge%2Fserver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Fserver.rs?ref=3892b7074daeb23ddeaffd3e26b4f7979c6cc5a7", "patch": "@@ -11,8 +11,6 @@ pub trait Types {\n     type FreeFunctions: 'static;\n     type TokenStream: 'static + Clone;\n     type SourceFile: 'static + Clone;\n-    type MultiSpan: 'static;\n-    type Diagnostic: 'static;\n     type Span: 'static + Copy + Eq + Hash;\n     type Symbol: 'static;\n }"}, {"sha": "5a209f7c7aa1858577d1a4044cb7fddd487f9f54", "filename": "library/proc_macro/src/diagnostic.rs", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3892b7074daeb23ddeaffd3e26b4f7979c6cc5a7/library%2Fproc_macro%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3892b7074daeb23ddeaffd3e26b4f7979c6cc5a7/library%2Fproc_macro%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fdiagnostic.rs?ref=3892b7074daeb23ddeaffd3e26b4f7979c6cc5a7", "patch": "@@ -161,22 +161,15 @@ impl Diagnostic {\n     /// Emit the diagnostic.\n     #[unstable(feature = \"proc_macro_diagnostic\", issue = \"54140\")]\n     pub fn emit(self) {\n-        fn to_internal(spans: Vec<Span>) -> crate::bridge::client::MultiSpan {\n-            let mut multi_span = crate::bridge::client::MultiSpan::new();\n-            for span in spans {\n-                multi_span.push(span.0);\n+        fn to_internal(diag: Diagnostic) -> crate::bridge::Diagnostic<crate::bridge::client::Span> {\n+            crate::bridge::Diagnostic {\n+                level: diag.level,\n+                message: diag.message,\n+                spans: diag.spans.into_iter().map(|s| s.0).collect(),\n+                children: diag.children.into_iter().map(to_internal).collect(),\n             }\n-            multi_span\n         }\n \n-        let mut diag = crate::bridge::client::Diagnostic::new(\n-            self.level,\n-            &self.message[..],\n-            to_internal(self.spans),\n-        );\n-        for c in self.children {\n-            diag.sub(c.level, &c.message[..], to_internal(c.spans));\n-        }\n-        diag.emit();\n+        crate::bridge::client::FreeFunctions::emit_diagnostic(to_internal(self));\n     }\n }"}, {"sha": "e4e43e97dde82eee29821dfb138cc75d14f7f297", "filename": "src/tools/rust-analyzer/crates/proc-macro-srv/src/abis/abi_sysroot/ra_server.rs", "status": "modified", "additions": 4, "deletions": 55, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/3892b7074daeb23ddeaffd3e26b4f7979c6cc5a7/src%2Ftools%2Frust-analyzer%2Fcrates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_sysroot%2Fra_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3892b7074daeb23ddeaffd3e26b4f7979c6cc5a7/src%2Ftools%2Frust-analyzer%2Fcrates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_sysroot%2Fra_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2Fcrates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_sysroot%2Fra_server.rs?ref=3892b7074daeb23ddeaffd3e26b4f7979c6cc5a7", "patch": "@@ -37,23 +37,6 @@ pub struct SourceFile {\n type Level = super::proc_macro::Level;\n type LineColumn = super::proc_macro::LineColumn;\n \n-/// A structure representing a diagnostic message and associated children\n-/// messages.\n-#[derive(Clone, Debug)]\n-pub struct Diagnostic {\n-    level: Level,\n-    message: String,\n-    spans: Vec<Span>,\n-    children: Vec<Diagnostic>,\n-}\n-\n-impl Diagnostic {\n-    /// Creates a new diagnostic with the given `level` and `message`.\n-    pub fn new<T: Into<String>>(level: Level, message: T) -> Diagnostic {\n-        Diagnostic { level, message: message.into(), spans: vec![], children: vec![] }\n-    }\n-}\n-\n pub struct FreeFunctions;\n \n #[derive(Default)]\n@@ -65,8 +48,6 @@ impl server::Types for RustAnalyzer {\n     type FreeFunctions = FreeFunctions;\n     type TokenStream = TokenStream;\n     type SourceFile = SourceFile;\n-    type MultiSpan = Vec<Span>;\n-    type Diagnostic = Diagnostic;\n     type Span = Span;\n     type Symbol = Symbol;\n }\n@@ -90,6 +71,10 @@ impl server::FreeFunctions for RustAnalyzer {\n             span: tt::TokenId::unspecified(),\n         })\n     }\n+\n+    fn emit_diagnostic(&mut self, _: bridge::Diagnostic<Self::Span>) {\n+        // FIXME handle diagnostic\n+    }\n }\n \n impl server::TokenStream for RustAnalyzer {\n@@ -282,30 +267,6 @@ impl server::SourceFile for RustAnalyzer {\n     }\n }\n \n-impl server::Diagnostic for RustAnalyzer {\n-    fn new(&mut self, level: Level, msg: &str, spans: Self::MultiSpan) -> Self::Diagnostic {\n-        let mut diag = Diagnostic::new(level, msg);\n-        diag.spans = spans;\n-        diag\n-    }\n-\n-    fn sub(\n-        &mut self,\n-        _diag: &mut Self::Diagnostic,\n-        _level: Level,\n-        _msg: &str,\n-        _spans: Self::MultiSpan,\n-    ) {\n-        // FIXME handle diagnostic\n-        //\n-    }\n-\n-    fn emit(&mut self, _diag: Self::Diagnostic) {\n-        // FIXME handle diagnostic\n-        // diag.emit()\n-    }\n-}\n-\n impl server::Span for RustAnalyzer {\n     fn debug(&mut self, span: Self::Span) -> String {\n         format!(\"{:?}\", span.0)\n@@ -372,18 +333,6 @@ impl server::Span for RustAnalyzer {\n     }\n }\n \n-impl server::MultiSpan for RustAnalyzer {\n-    fn new(&mut self) -> Self::MultiSpan {\n-        // FIXME handle span\n-        vec![]\n-    }\n-\n-    fn push(&mut self, other: &mut Self::MultiSpan, span: Self::Span) {\n-        //TODP\n-        other.push(span)\n-    }\n-}\n-\n impl server::Symbol for RustAnalyzer {\n     fn normalize_and_validate_ident(&mut self, string: &str) -> Result<Self::Symbol, ()> {\n         // FIXME: nfc-normalize and validate idents"}]}