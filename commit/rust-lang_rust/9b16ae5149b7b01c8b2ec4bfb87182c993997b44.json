{"sha": "9b16ae5149b7b01c8b2ec4bfb87182c993997b44", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliMTZhZTUxNDliN2IwMWM4YjJlYzRiZmI4NzE4MmM5OTM5OTdiNDQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-04-18T18:49:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-18T18:49:38Z"}, "message": "Merge #4033\n\n4033: Refactor codegen r=matklad a=Veetaha\n\n\n\nCo-authored-by: veetaha <veetaha2@gmail.com>", "tree": {"sha": "6cae356ed72227e541eeca1756f102565edefb6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6cae356ed72227e541eeca1756f102565edefb6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b16ae5149b7b01c8b2ec4bfb87182c993997b44", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJem0vCCRBK7hj4Ov3rIwAAdHIIAGp5xjgL6yXsc5RR6cSri1rV\ngx+/dOTPLl/fjq9au+x0Irjl84vFbjNArRp4+zI7JahqnQII1OkZ9JH806SMLS+S\nW5MKoDAZmfq7pySegoc/pmkGnTt6fct0Kz4fmCZDujxixq/ZzcepmWJYoQl1wDjv\nfEHkgde5PedpVPd99z8zUtzCMBuhtYKa3CurLz66LuTueNJQIW5wxNSE/WwuhoSl\nDydebgJxhlFjP/lfEU7A9NXIxvbgGRHbeVuQztxQm96dZ/ADekWndH/fS8S31OSG\nhQaJSHqv9qAqlHiKzb4NJOm4KEFGJn11k5x+8FCr7SLaYYhkmHxXUl4svga22TI=\n=LNbz\n-----END PGP SIGNATURE-----\n", "payload": "tree 6cae356ed72227e541eeca1756f102565edefb6c\nparent 6f60e646fc2aa50eb53e9c644f0f92651b04cc5b\nparent 21b98d585e0c84b14780166f6607e8f1b8560433\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1587235778 +0000\ncommitter GitHub <noreply@github.com> 1587235778 +0000\n\nMerge #4033\n\n4033: Refactor codegen r=matklad a=Veetaha\n\n\n\nCo-authored-by: veetaha <veetaha2@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b16ae5149b7b01c8b2ec4bfb87182c993997b44", "html_url": "https://github.com/rust-lang/rust/commit/9b16ae5149b7b01c8b2ec4bfb87182c993997b44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b16ae5149b7b01c8b2ec4bfb87182c993997b44/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f60e646fc2aa50eb53e9c644f0f92651b04cc5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f60e646fc2aa50eb53e9c644f0f92651b04cc5b", "html_url": "https://github.com/rust-lang/rust/commit/6f60e646fc2aa50eb53e9c644f0f92651b04cc5b"}, {"sha": "21b98d585e0c84b14780166f6607e8f1b8560433", "url": "https://api.github.com/repos/rust-lang/rust/commits/21b98d585e0c84b14780166f6607e8f1b8560433", "html_url": "https://github.com/rust-lang/rust/commit/21b98d585e0c84b14780166f6607e8f1b8560433"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "0e4dcb95a2dfea35cb3defc3a2aeb3b08271bdb2", "filename": "xtask/src/codegen.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9b16ae5149b7b01c8b2ec4bfb87182c993997b44/xtask%2Fsrc%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b16ae5149b7b01c8b2ec4bfb87182c993997b44/xtask%2Fsrc%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen.rs?ref=9b16ae5149b7b01c8b2ec4bfb87182c993997b44", "patch": "@@ -9,9 +9,9 @@ mod gen_syntax;\n mod gen_parser_tests;\n mod gen_assists_docs;\n \n-use std::{fs, mem, path::Path};\n+use std::{mem, path::Path};\n \n-use crate::Result;\n+use crate::{not_bash::fs2, Result};\n \n pub use self::{\n     gen_assists_docs::generate_assists_docs, gen_parser_tests::generate_parser_tests,\n@@ -39,7 +39,7 @@ pub enum Mode {\n /// A helper to update file on disk if it has changed.\n /// With verify = false,\n fn update(path: &Path, contents: &str, mode: Mode) -> Result<()> {\n-    match fs::read_to_string(path) {\n+    match fs2::read_to_string(path) {\n         Ok(ref old_contents) if normalize(old_contents) == normalize(contents) => {\n             return Ok(());\n         }\n@@ -49,7 +49,7 @@ fn update(path: &Path, contents: &str, mode: Mode) -> Result<()> {\n         anyhow::bail!(\"`{}` is not up-to-date\", path.display());\n     }\n     eprintln!(\"updating {}\", path.display());\n-    fs::write(path, contents)?;\n+    fs2::write(path, contents)?;\n     return Ok(());\n \n     fn normalize(s: &str) -> String {\n@@ -65,15 +65,15 @@ fn extract_comment_blocks_with_empty_lines(text: &str) -> Vec<Vec<String>> {\n     do_extract_comment_blocks(text, true)\n }\n \n-fn do_extract_comment_blocks(text: &str, allow_blocks_with_empty_lins: bool) -> Vec<Vec<String>> {\n+fn do_extract_comment_blocks(text: &str, allow_blocks_with_empty_lines: bool) -> Vec<Vec<String>> {\n     let mut res = Vec::new();\n \n     let prefix = \"// \";\n     let lines = text.lines().map(str::trim_start);\n \n     let mut block = vec![];\n     for line in lines {\n-        if line == \"//\" && allow_blocks_with_empty_lins {\n+        if line == \"//\" && allow_blocks_with_empty_lines {\n             block.push(String::new());\n             continue;\n         }"}]}