{"sha": "7d2feae8572cb06dd4dee090f303d788dbfa5115", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkMmZlYWU4NTcyY2IwNmRkNGRlZTA5MGYzMDNkNzg4ZGJmYTUxMTU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-12-16T18:23:47Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-12-16T18:23:47Z"}, "message": "Collect obj items, translate obj-name references and obj-ctor types.", "tree": {"sha": "1ab9af0d49beab692d35be54e540c86dcc6a96b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ab9af0d49beab692d35be54e540c86dcc6a96b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d2feae8572cb06dd4dee090f303d788dbfa5115", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d2feae8572cb06dd4dee090f303d788dbfa5115", "html_url": "https://github.com/rust-lang/rust/commit/7d2feae8572cb06dd4dee090f303d788dbfa5115", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d2feae8572cb06dd4dee090f303d788dbfa5115/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8d2220b30103a1819148944fb5c04de68dfd93e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8d2220b30103a1819148944fb5c04de68dfd93e", "html_url": "https://github.com/rust-lang/rust/commit/d8d2220b30103a1819148944fb5c04de68dfd93e"}], "stats": {"total": 70, "additions": 51, "deletions": 19}, "files": [{"sha": "660b43124edbe7c54befb27246ee783ab2386004", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 51, "deletions": 19, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/7d2feae8572cb06dd4dee090f303d788dbfa5115/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d2feae8572cb06dd4dee090f303d788dbfa5115/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=7d2feae8572cb06dd4dee090f303d788dbfa5115", "patch": "@@ -267,6 +267,31 @@ fn type_of(@crate_ctxt cx, @typeck.ty t) -> TypeRef {\n     ret llty;\n }\n \n+fn type_of_fn(@crate_ctxt cx,\n+              vec[typeck.arg] inputs,\n+              @typeck.ty output) -> TypeRef {\n+    let vec[TypeRef] atys = vec(T_taskptr());\n+    for (typeck.arg arg in inputs) {\n+        let TypeRef t = type_of(cx, arg.ty);\n+        alt (arg.mode) {\n+            case (ast.alias) {\n+                t = T_ptr(t);\n+            }\n+            case (_) { /* fall through */  }\n+        }\n+        atys += t;\n+    }\n+\n+    auto ret_ty;\n+    if (typeck.type_is_nil(output)) {\n+        ret_ty = llvm.LLVMVoidType();\n+    } else {\n+        ret_ty = type_of(cx, output);\n+    }\n+\n+    ret T_fn(atys, ret_ty);\n+}\n+\n fn type_of_inner(@crate_ctxt cx, @typeck.ty t) -> TypeRef {\n     alt (t.struct) {\n         case (typeck.ty_nil) { ret T_nil(); }\n@@ -313,26 +338,19 @@ fn type_of_inner(@crate_ctxt cx, @typeck.ty t) -> TypeRef {\n             ret T_struct(tys);\n         }\n         case (typeck.ty_fn(?args, ?out)) {\n-            let vec[TypeRef] atys = vec(T_taskptr());\n-            for (typeck.arg arg in args) {\n-                let TypeRef t = type_of(cx, arg.ty);\n-                alt (arg.mode) {\n-                    case (ast.alias) {\n-                        t = T_ptr(t);\n-                    }\n-                    case (_) { /* fall through */  }\n-                }\n-                atys += t;\n-            }\n-\n-            auto ret_ty;\n-            if (typeck.type_is_nil(out)) {\n-                ret_ty = llvm.LLVMVoidType();\n-            } else {\n-                ret_ty = type_of(cx, out);\n+            ret type_of_fn(cx, args, out);\n+        }\n+        case (typeck.ty_obj(?meths)) {\n+            let vec[TypeRef] mtys = vec();\n+            for (typeck.method m in meths) {\n+                let TypeRef mty = type_of_fn(cx, m.inputs, m.output);\n+                mtys += T_ptr(mty);\n             }\n-\n-            ret T_fn(atys, ret_ty);\n+            let TypeRef vtbl = T_struct(mtys);\n+            let TypeRef pair =\n+                T_struct(vec(T_ptr(vtbl),\n+                             T_ptr(T_box(T_opaque()))));\n+            ret pair;\n         }\n         case (typeck.ty_var(_)) {\n             // FIXME: implement.\n@@ -1496,6 +1514,11 @@ fn trans_name(@block_ctxt cx, &ast.name n, &option.t[ast.def] dopt)\n                     ret tup(res(cx, cx.fcx.ccx.item_ids.get(did)),\n                             false);\n                 }\n+                case (ast.def_obj(?did)) {\n+                    check (cx.fcx.ccx.item_ids.contains_key(did));\n+                    ret tup(res(cx, cx.fcx.ccx.item_ids.get(did)),\n+                            false);\n+                }\n                 case (ast.def_variant(?tid, ?vid)) {\n                     check (cx.fcx.ccx.tags.contains_key(tid));\n                     check (cx.fcx.ccx.item_ids.contains_key(vid));\n@@ -2360,6 +2383,15 @@ fn collect_item(&@crate_ctxt cx, @ast.item i) -> @crate_ctxt {\n             cx.item_ids.insert(fid, llfn);\n         }\n \n+        case (ast.item_obj(?name, ?ob, _, ?oid, ?ann)) {\n+            // TODO: type-params\n+            cx.items.insert(oid, i);\n+            auto llty = node_type(cx, ann);\n+            let str s = cx.names.next(\"_rust_obj_ctor\") + \".\" + name;\n+            let ValueRef llfn = decl_fastcall_fn(cx.llmod, s, llty);\n+            cx.item_ids.insert(oid, llfn);\n+        }\n+\n         case (ast.item_const(?name, _, _, ?cid, _)) {\n             cx.items.insert(cid, i);\n         }"}]}