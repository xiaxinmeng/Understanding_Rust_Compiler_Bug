{"sha": "e4eddc611afef1d68432022f7dd1a9dbebf40772", "node_id": "C_kwDOAAsO6NoAKGU0ZWRkYzYxMWFmZWYxZDY4NDMyMDIyZjdkZDFhOWRiZWJmNDA3NzI", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2022-07-05T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2022-08-26T12:27:08Z"}, "message": "Replace `Body::basic_blocks()` with field access", "tree": {"sha": "c0ac0a0498739598983c197e7ae5f5f778cccd98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0ac0a0498739598983c197e7ae5f5f778cccd98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4eddc611afef1d68432022f7dd1a9dbebf40772", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4eddc611afef1d68432022f7dd1a9dbebf40772", "html_url": "https://github.com/rust-lang/rust/commit/e4eddc611afef1d68432022f7dd1a9dbebf40772", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4eddc611afef1d68432022f7dd1a9dbebf40772/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2cdc54d265b057ee1677cbb32dc629ce69be7813", "url": "https://api.github.com/repos/rust-lang/rust/commits/2cdc54d265b057ee1677cbb32dc629ce69be7813", "html_url": "https://github.com/rust-lang/rust/commit/2cdc54d265b057ee1677cbb32dc629ce69be7813"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "9fd86331ec755d8fbeafb87bce01d4f98f4786af", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e4eddc611afef1d68432022f7dd1a9dbebf40772/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4eddc611afef1d68432022f7dd1a9dbebf40772/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=e4eddc611afef1d68432022f7dd1a9dbebf40772", "patch": "@@ -105,7 +105,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantClone {\n             vis.into_map(cx, maybe_storage_live_result)\n         };\n \n-        for (bb, bbdata) in mir.basic_blocks().iter_enumerated() {\n+        for (bb, bbdata) in mir.basic_blocks.iter_enumerated() {\n             let terminator = bbdata.terminator();\n \n             if terminator.source_info.span.from_expansion() {\n@@ -186,7 +186,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantClone {\n                     unwrap_or_continue!(find_stmt_assigns_to(cx, mir, pred_arg, true, ps[0]));\n                 let loc = mir::Location {\n                     block: bb,\n-                    statement_index: mir.basic_blocks()[bb].statements.len(),\n+                    statement_index: mir.basic_blocks[bb].statements.len(),\n                 };\n \n                 // This can be turned into `res = move local` if `arg` and `cloned` are not borrowed\n@@ -310,7 +310,7 @@ fn find_stmt_assigns_to<'tcx>(\n     by_ref: bool,\n     bb: mir::BasicBlock,\n ) -> Option<(mir::Local, CannotMoveOut)> {\n-    let rvalue = mir.basic_blocks()[bb].statements.iter().rev().find_map(|stmt| {\n+    let rvalue = mir.basic_blocks[bb].statements.iter().rev().find_map(|stmt| {\n         if let mir::StatementKind::Assign(box (mir::Place { local, .. }, v)) = &stmt.kind {\n             return if *local == to_local { Some(v) } else { None };\n         }"}, {"sha": "74c222bbcbeb99e6bda141ed4af1033c47915b3a", "filename": "clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4eddc611afef1d68432022f7dd1a9dbebf40772/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4eddc611afef1d68432022f7dd1a9dbebf40772/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=e4eddc611afef1d68432022f7dd1a9dbebf40772", "patch": "@@ -55,7 +55,7 @@ pub fn is_min_const_fn<'a, 'tcx>(tcx: TyCtxt<'tcx>, body: &'a Body<'tcx>, msrv:\n         body.local_decls.iter().next().unwrap().source_info.span,\n     )?;\n \n-    for bb in body.basic_blocks() {\n+    for bb in body.basic_blocks.iter() {\n         check_terminator(tcx, body, bb.terminator(), msrv)?;\n         for stmt in &bb.statements {\n             check_statement(tcx, body, def_id, stmt)?;"}]}