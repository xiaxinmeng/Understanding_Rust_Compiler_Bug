{"sha": "675c4aa2c1c142415d4e95bf550ec0b1de2493d0", "node_id": "C_kwDOAAsO6NoAKDY3NWM0YWEyYzFjMTQyNDE1ZDRlOTViZjU1MGVjMGIxZGUyNDkzZDA", "commit": {"author": {"name": "Joshua Nelson", "email": "github@jyn.dev", "date": "2023-03-18T05:29:53Z"}, "committer": {"name": "Joshua Nelson", "email": "github@jyn.dev", "date": "2023-03-18T05:43:37Z"}, "message": "address review comments", "tree": {"sha": "c52d8cadc52235dbe6d2786a19fc1914db8209e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c52d8cadc52235dbe6d2786a19fc1914db8209e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/675c4aa2c1c142415d4e95bf550ec0b1de2493d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/675c4aa2c1c142415d4e95bf550ec0b1de2493d0", "html_url": "https://github.com/rust-lang/rust/commit/675c4aa2c1c142415d4e95bf550ec0b1de2493d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/675c4aa2c1c142415d4e95bf550ec0b1de2493d0/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a58b2b3b065fcb367357482f636ce918d1080bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a58b2b3b065fcb367357482f636ce918d1080bd", "html_url": "https://github.com/rust-lang/rust/commit/3a58b2b3b065fcb367357482f636ce918d1080bd"}], "stats": {"total": 76, "additions": 52, "deletions": 24}, "files": [{"sha": "04d2597ecc69665cf358f4d54774528edd6a14e6", "filename": ".gitignore", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/675c4aa2c1c142415d4e95bf550ec0b1de2493d0/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/675c4aa2c1c142415d4e95bf550ec0b1de2493d0/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=675c4aa2c1c142415d4e95bf550ec0b1de2493d0", "patch": "@@ -42,6 +42,7 @@ no_llvm_build\n /llvm/\n /mingw-build/\n build/\n+!/compiler/rustc_mir_build/src/build/\n /build-rust-analyzer/\n /dist/\n /unicode-downloads"}, {"sha": "140d1154718f741ff101d91fc7ae5abf943f540e", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 35, "deletions": 12, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/675c4aa2c1c142415d4e95bf550ec0b1de2493d0/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/675c4aa2c1c142415d4e95bf550ec0b1de2493d0/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=675c4aa2c1c142415d4e95bf550ec0b1de2493d0", "patch": "@@ -73,19 +73,34 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n             ExprKind::Binary { op, lhs, rhs } => {\n                 let lhs = unpack!(\n-                    block =\n-                        this.as_operand(block, scope, &this.thir[lhs], LocalInfo::Boring, NeedsTemporary::Maybe)\n+                    block = this.as_operand(\n+                        block,\n+                        scope,\n+                        &this.thir[lhs],\n+                        LocalInfo::Boring,\n+                        NeedsTemporary::Maybe\n+                    )\n                 );\n                 let rhs = unpack!(\n-                    block =\n-                        this.as_operand(block, scope, &this.thir[rhs], LocalInfo::Boring, NeedsTemporary::No)\n+                    block = this.as_operand(\n+                        block,\n+                        scope,\n+                        &this.thir[rhs],\n+                        LocalInfo::Boring,\n+                        NeedsTemporary::No\n+                    )\n                 );\n                 this.build_binary_op(block, op, expr_span, expr.ty, lhs, rhs)\n             }\n             ExprKind::Unary { op, arg } => {\n                 let arg = unpack!(\n-                    block =\n-                        this.as_operand(block, scope, &this.thir[arg], LocalInfo::Boring, NeedsTemporary::No)\n+                    block = this.as_operand(\n+                        block,\n+                        scope,\n+                        &this.thir[arg],\n+                        LocalInfo::Boring,\n+                        NeedsTemporary::No\n+                    )\n                 );\n                 // Check for -MIN on signed integers\n                 if this.check_overflow && op == UnOp::Neg && expr.ty.is_signed() {\n@@ -272,8 +287,13 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n             ExprKind::Pointer { cast, source } => {\n                 let source = unpack!(\n-                    block =\n-                        this.as_operand(block, scope, &this.thir[source], LocalInfo::Boring, NeedsTemporary::No)\n+                    block = this.as_operand(\n+                        block,\n+                        scope,\n+                        &this.thir[source],\n+                        LocalInfo::Boring,\n+                        NeedsTemporary::No\n+                    )\n                 );\n                 block.and(Rvalue::Cast(CastKind::Pointer(cast), source, expr.ty))\n             }\n@@ -502,8 +522,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     Category::of(&expr.kind),\n                     Some(Category::Rvalue(RvalueFunc::AsRvalue) | Category::Constant)\n                 ));\n-                let operand =\n-                    unpack!(block = this.as_operand(block, scope, expr, LocalInfo::Boring, NeedsTemporary::No));\n+                let operand = unpack!(\n+                    block =\n+                        this.as_operand(block, scope, expr, LocalInfo::Boring, NeedsTemporary::No)\n+                );\n                 block.and(Rvalue::Use(operand))\n             }\n         }\n@@ -662,8 +684,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             // Repeating a const does nothing\n         } else {\n             // For a non-const, we may need to generate an appropriate `Drop`\n-            let value_operand =\n-                unpack!(block = this.as_operand(block, scope, value, LocalInfo::Boring, NeedsTemporary::No));\n+            let value_operand = unpack!(\n+                block = this.as_operand(block, scope, value, LocalInfo::Boring, NeedsTemporary::No)\n+            );\n             if let Operand::Move(to_drop) = value_operand {\n                 let success = this.cfg.start_new_block();\n                 this.cfg.terminate("}, {"sha": "2d52102db2cc6335674bdb308cd0640b841ad201", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/675c4aa2c1c142415d4e95bf550ec0b1de2493d0/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/675c4aa2c1c142415d4e95bf550ec0b1de2493d0/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=675c4aa2c1c142415d4e95bf550ec0b1de2493d0", "patch": "@@ -2252,7 +2252,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 user_ty: None,\n                 source_info,\n                 internal: false,\n-                local_info: ClearCrossCrate::Set(Box::new(LocalInfo::User(BindingForm::RefForGuard))),\n+                local_info: ClearCrossCrate::Set(Box::new(LocalInfo::User(\n+                    BindingForm::RefForGuard,\n+                ))),\n             });\n             self.var_debug_info.push(VarDebugInfo {\n                 name,"}, {"sha": "80d8b27336c5438ec4a1818e0f4d07c9733fd727", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/675c4aa2c1c142415d4e95bf550ec0b1de2493d0/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/675c4aa2c1c142415d4e95bf550ec0b1de2493d0/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=675c4aa2c1c142415d4e95bf550ec0b1de2493d0", "patch": "@@ -876,21 +876,18 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 } => {\n                     self.local_decls[local].mutability = mutability;\n                     self.local_decls[local].source_info.scope = self.source_scope;\n-                    **self.local_decls[local].local_info.as_mut().assert_crate_local() = if let Some(kind) = param.self_kind {\n-                        LocalInfo::User(\n-                            BindingForm::ImplicitSelf(kind),\n-                        )\n-                    } else {\n-                        let binding_mode = ty::BindingMode::BindByValue(mutability);\n-                        LocalInfo::User(BindingForm::Var(\n-                            VarBindingForm {\n+                    **self.local_decls[local].local_info.as_mut().assert_crate_local() =\n+                        if let Some(kind) = param.self_kind {\n+                            LocalInfo::User(BindingForm::ImplicitSelf(kind))\n+                        } else {\n+                            let binding_mode = ty::BindingMode::BindByValue(mutability);\n+                            LocalInfo::User(BindingForm::Var(VarBindingForm {\n                                 binding_mode,\n                                 opt_ty_info: param.ty_span,\n                                 opt_match_place: Some((None, span)),\n                                 pat_span: span,\n-                            },\n-                        ))\n-                    };\n+                            }))\n+                        };\n                     self.var_indices.insert(var, LocalsForNode::One(local));\n                 }\n                 _ => {"}, {"sha": "a965c98f48491ceff2acea5f3faea512d9ec85a5", "filename": "src/tools/tidy/src/style.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/675c4aa2c1c142415d4e95bf550ec0b1de2493d0/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/675c4aa2c1c142415d4e95bf550ec0b1de2493d0/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs?ref=675c4aa2c1c142415d4e95bf550ec0b1de2493d0", "patch": "@@ -228,6 +228,11 @@ fn is_unexplained_ignore(extension: &str, line: &str) -> bool {\n \n pub fn check(path: &Path, bad: &mut bool) {\n     fn skip(path: &Path) -> bool {\n+        if path.file_name().map_or(false, |name| name.to_string_lossy().starts_with(\".#\")) {\n+            // vim or emacs temporary file\n+            return true;\n+        }\n+\n         if filter_dirs(path) || skip_markdown_path(path) {\n             return true;\n         }"}]}