{"sha": "26b87bf8ff8406e80e70559b71cf0095475cc64a", "node_id": "C_kwDOAAsO6NoAKDI2Yjg3YmY4ZmY4NDA2ZTgwZTcwNTU5YjcxY2YwMDk1NDc1Y2M2NGE", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-11-28T12:28:32Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-11-28T17:27:20Z"}, "message": "Simplify calls to `tcx.mk_const`\n\n`mk_const(ty::ConstKind::X(...), ty)` can now be simplified to\n`mk_cosnt(...,                   ty)`.\n\nI searched with the following regex: \\mk_const\\([\\n\\s]*(ty::)?ConstKind\\\nI've left `ty::ConstKind::{Bound, Error}` as-is, they seem clearer this\nway.", "tree": {"sha": "57fd97d536d1d9513df63ab20b8c98816e7174c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57fd97d536d1d9513df63ab20b8c98816e7174c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26b87bf8ff8406e80e70559b71cf0095475cc64a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26b87bf8ff8406e80e70559b71cf0095475cc64a", "html_url": "https://github.com/rust-lang/rust/commit/26b87bf8ff8406e80e70559b71cf0095475cc64a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26b87bf8ff8406e80e70559b71cf0095475cc64a/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7087d9b2a08385eaf7eb035e5ed420a84ef0902c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7087d9b2a08385eaf7eb035e5ed420a84ef0902c", "html_url": "https://github.com/rust-lang/rust/commit/7087d9b2a08385eaf7eb035e5ed420a84ef0902c"}], "stats": {"total": 73, "additions": 27, "deletions": 46}, "files": [{"sha": "ba0ce16bb81ae33d7c674a4b3b1c555c9bf5d7ad", "filename": "compiler/rustc_infer/src/infer/canonical/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26b87bf8ff8406e80e70559b71cf0095475cc64a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b87bf8ff8406e80e70559b71cf0095475cc64a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs?ref=26b87bf8ff8406e80e70559b71cf0095475cc64a", "patch": "@@ -147,7 +147,7 @@ impl<'tcx> InferCtxt<'tcx> {\n             CanonicalVarKind::PlaceholderConst(ty::PlaceholderConst { universe, name }, ty) => {\n                 let universe_mapped = universe_map(universe);\n                 let placeholder_mapped = ty::PlaceholderConst { universe: universe_mapped, name };\n-                self.tcx.mk_const(ty::ConstKind::Placeholder(placeholder_mapped), ty).into()\n+                self.tcx.mk_const(placeholder_mapped, ty).into()\n             }\n         }\n     }"}, {"sha": "cf895ed0d3e598ba23eb5effcb52345e75982045", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/26b87bf8ff8406e80e70559b71cf0095475cc64a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b87bf8ff8406e80e70559b71cf0095475cc64a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=26b87bf8ff8406e80e70559b71cf0095475cc64a", "patch": "@@ -765,10 +765,7 @@ impl<'tcx> TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n                     substs,\n                     substs,\n                 )?;\n-                Ok(self.tcx().mk_const(\n-                    ty::ConstKind::Unevaluated(ty::UnevaluatedConst { def, substs }),\n-                    c.ty(),\n-                ))\n+                Ok(self.tcx().mk_const(ty::UnevaluatedConst { def, substs }, c.ty()))\n             }\n             _ => relate::super_relate_consts(self, c, c),\n         }\n@@ -988,10 +985,7 @@ impl<'tcx> TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {\n                     substs,\n                 )?;\n \n-                Ok(self.tcx().mk_const(\n-                    ty::ConstKind::Unevaluated(ty::UnevaluatedConst { def, substs }),\n-                    c.ty(),\n-                ))\n+                Ok(self.tcx().mk_const(ty::UnevaluatedConst { def, substs }, c.ty()))\n             }\n             _ => relate::super_relate_consts(self, c, c),\n         }"}, {"sha": "817ae10c7608712d9c3d581ceff14586e73ee990", "filename": "compiler/rustc_infer/src/infer/higher_ranked/mod.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/26b87bf8ff8406e80e70559b71cf0095475cc64a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b87bf8ff8406e80e70559b71cf0095475cc64a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=26b87bf8ff8406e80e70559b71cf0095475cc64a", "patch": "@@ -94,13 +94,8 @@ impl<'tcx> InferCtxt<'tcx> {\n                 }))\n             },\n             consts: &mut |bound_var: ty::BoundVar, ty| {\n-                self.tcx.mk_const(\n-                    ty::ConstKind::Placeholder(ty::PlaceholderConst {\n-                        universe: next_universe,\n-                        name: bound_var,\n-                    }),\n-                    ty,\n-                )\n+                self.tcx\n+                    .mk_const(ty::PlaceholderConst { universe: next_universe, name: bound_var }, ty)\n             },\n         };\n "}, {"sha": "c5de1d6d78af7f24f3bdb75ab763a60951b9ad86", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26b87bf8ff8406e80e70559b71cf0095475cc64a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b87bf8ff8406e80e70559b71cf0095475cc64a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=26b87bf8ff8406e80e70559b71cf0095475cc64a", "patch": "@@ -2049,10 +2049,10 @@ fn replace_param_and_infer_substs_with_placeholder<'tcx>(\n                     bug!(\"const `{ct}`'s type should not reference params or types\");\n                 }\n                 tcx.mk_const(\n-                    ty::ConstKind::Placeholder(ty::PlaceholderConst {\n+                    ty::PlaceholderConst {\n                         universe: ty::UniverseIndex::ROOT,\n                         name: ty::BoundVar::from_usize(idx),\n-                    }),\n+                    },\n                     ty,\n                 )\n                 .into()"}, {"sha": "20dde64e51b0118e52e0927fa631e0e989d50629", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/26b87bf8ff8406e80e70559b71cf0095475cc64a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b87bf8ff8406e80e70559b71cf0095475cc64a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=26b87bf8ff8406e80e70559b71cf0095475cc64a", "patch": "@@ -2527,8 +2527,7 @@ impl<'tcx> ConstantKind<'tcx> {\n                 let generics = tcx.generics_of(item_def_id);\n                 let index = generics.param_def_id_to_index[&def_id];\n                 let name = tcx.item_name(def_id);\n-                let ty_const =\n-                    tcx.mk_const(ty::ConstKind::Param(ty::ParamConst::new(index, name)), ty);\n+                let ty_const = tcx.mk_const(ty::ParamConst::new(index, name), ty);\n                 debug!(?ty_const);\n \n                 return Self::Ty(ty_const);"}, {"sha": "cd0b280ce4e481982d4cd1a4db526a43cabdf430", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/26b87bf8ff8406e80e70559b71cf0095475cc64a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b87bf8ff8406e80e70559b71cf0095475cc64a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=26b87bf8ff8406e80e70559b71cf0095475cc64a", "patch": "@@ -76,10 +76,10 @@ impl<'tcx> Const<'tcx> {\n         match Self::try_eval_lit_or_param(tcx, ty, expr) {\n             Some(v) => v,\n             None => tcx.mk_const(\n-                ty::ConstKind::Unevaluated(ty::UnevaluatedConst {\n+                ty::UnevaluatedConst {\n                     def: def.to_global(),\n                     substs: InternalSubsts::identity_for_item(tcx, def.did.to_def_id()),\n-                }),\n+                },\n                 ty,\n             ),\n         }\n@@ -134,7 +134,7 @@ impl<'tcx> Const<'tcx> {\n                 let generics = tcx.generics_of(item_def_id);\n                 let index = generics.param_def_id_to_index[&def_id];\n                 let name = tcx.item_name(def_id);\n-                Some(tcx.mk_const(ty::ConstKind::Param(ty::ParamConst::new(index, name)), ty))\n+                Some(tcx.mk_const(ty::ParamConst::new(index, name), ty))\n             }\n             _ => None,\n         }\n@@ -143,7 +143,7 @@ impl<'tcx> Const<'tcx> {\n     /// Interns the given value as a constant.\n     #[inline]\n     pub fn from_value(tcx: TyCtxt<'tcx>, val: ty::ValTree<'tcx>, ty: Ty<'tcx>) -> Self {\n-        tcx.mk_const(ConstKind::Value(val), ty)\n+        tcx.mk_const(val, ty)\n     }\n \n     /// Panics if self.kind != ty::ConstKind::Value"}, {"sha": "c759fb6d5e4f4c50c05a7972032f83e6218f10b1", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/26b87bf8ff8406e80e70559b71cf0095475cc64a/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b87bf8ff8406e80e70559b71cf0095475cc64a/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=26b87bf8ff8406e80e70559b71cf0095475cc64a", "patch": "@@ -663,10 +663,7 @@ pub fn super_relate_consts<'tcx, R: TypeRelation<'tcx>>(\n                 au.substs,\n                 bu.substs,\n             )?;\n-            return Ok(tcx.mk_const(\n-                ty::ConstKind::Unevaluated(ty::UnevaluatedConst { def: au.def, substs }),\n-                a.ty(),\n-            ));\n+            return Ok(tcx.mk_const(ty::UnevaluatedConst { def: au.def, substs }, a.ty()));\n         }\n         // Before calling relate on exprs, it is necessary to ensure that the nested consts\n         // have identical types."}, {"sha": "32c0207cb680c2f89a51f255b1e8e47d792439ef", "filename": "compiler/rustc_mir_build/src/build/expr/as_constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26b87bf8ff8406e80e70559b71cf0095475cc64a/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b87bf8ff8406e80e70559b71cf0095475cc64a/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs?ref=26b87bf8ff8406e80e70559b71cf0095475cc64a", "patch": "@@ -77,7 +77,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 Constant { user_ty, span, literal }\n             }\n             ExprKind::ConstParam { param, def_id: _ } => {\n-                let const_param = tcx.mk_const(ty::ConstKind::Param(param), expr.ty);\n+                let const_param = tcx.mk_const(param, expr.ty);\n                 let literal = ConstantKind::Ty(const_param);\n \n                 Constant { user_ty: None, span, literal }"}, {"sha": "e33e89e9c5c3eeadc65ffa9fa1dc5cf53e75d2e8", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26b87bf8ff8406e80e70559b71cf0095475cc64a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b87bf8ff8406e80e70559b71cf0095475cc64a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=26b87bf8ff8406e80e70559b71cf0095475cc64a", "patch": "@@ -818,7 +818,7 @@ impl<'tcx> TypeFolder<'tcx> for BoundVarReplacer<'_, 'tcx> {\n                 let universe = self.universe_for(debruijn);\n                 let p = ty::PlaceholderConst { universe, name: bound_const };\n                 self.mapped_consts.insert(p, bound_const);\n-                self.infcx.tcx.mk_const(ty::ConstKind::Placeholder(p), ct.ty())\n+                self.infcx.tcx.mk_const(p, ct.ty())\n             }\n             _ => ct.super_fold_with(self),\n         }"}, {"sha": "77cb2243482634d5502eee42c23e99033ea6661a", "filename": "compiler/rustc_ty_utils/src/consts.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/26b87bf8ff8406e80e70559b71cf0095475cc64a/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b87bf8ff8406e80e70559b71cf0095475cc64a/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs?ref=26b87bf8ff8406e80e70559b71cf0095475cc64a", "patch": "@@ -5,7 +5,7 @@ use rustc_middle::mir::interpret::{LitToConstError, LitToConstInput};\n use rustc_middle::thir::visit;\n use rustc_middle::thir::visit::Visitor;\n use rustc_middle::ty::abstract_const::CastKind;\n-use rustc_middle::ty::{self, ConstKind, Expr, TyCtxt, TypeVisitable};\n+use rustc_middle::ty::{self, Expr, TyCtxt, TypeVisitable};\n use rustc_middle::{mir, thir};\n use rustc_span::Span;\n use rustc_target::abi::VariantIdx;\n@@ -32,10 +32,8 @@ pub(crate) fn destructure_const<'tcx>(\n     let (fields, variant) = match const_.ty().kind() {\n         ty::Array(inner_ty, _) | ty::Slice(inner_ty) => {\n             // construct the consts for the elements of the array/slice\n-            let field_consts = branches\n-                .iter()\n-                .map(|b| tcx.mk_const(ty::ConstKind::Value(*b), *inner_ty))\n-                .collect::<Vec<_>>();\n+            let field_consts =\n+                branches.iter().map(|b| tcx.mk_const(*b, *inner_ty)).collect::<Vec<_>>();\n             debug!(?field_consts);\n \n             (field_consts, None)\n@@ -53,7 +51,7 @@ pub(crate) fn destructure_const<'tcx>(\n \n             for (field, field_valtree) in iter::zip(fields, branches) {\n                 let field_ty = field.ty(tcx, substs);\n-                let field_const = tcx.mk_const(ty::ConstKind::Value(*field_valtree), field_ty);\n+                let field_const = tcx.mk_const(*field_valtree, field_ty);\n                 field_consts.push(field_const);\n             }\n             debug!(?field_consts);\n@@ -62,9 +60,7 @@ pub(crate) fn destructure_const<'tcx>(\n         }\n         ty::Tuple(elem_tys) => {\n             let fields = iter::zip(*elem_tys, branches)\n-                .map(|(elem_ty, elem_valtree)| {\n-                    tcx.mk_const(ty::ConstKind::Value(*elem_valtree), elem_ty)\n-                })\n+                .map(|(elem_ty, elem_valtree)| tcx.mk_const(*elem_valtree, elem_ty))\n                 .collect::<Vec<_>>();\n \n             (fields, None)\n@@ -137,9 +133,9 @@ fn recurse_build<'tcx>(\n         }\n         &ExprKind::NamedConst { def_id, substs, user_ty: _ } => {\n             let uneval = ty::UnevaluatedConst::new(ty::WithOptConstParam::unknown(def_id), substs);\n-            tcx.mk_const(ty::ConstKind::Unevaluated(uneval), node.ty)\n+            tcx.mk_const(uneval, node.ty)\n         }\n-        ExprKind::ConstParam { param, .. } => tcx.mk_const(ty::ConstKind::Param(*param), node.ty),\n+        ExprKind::ConstParam { param, .. } => tcx.mk_const(*param, node.ty),\n \n         ExprKind::Call { fun, args, .. } => {\n             let fun = recurse_build(tcx, body, *fun, root_span)?;\n@@ -149,16 +145,16 @@ fn recurse_build<'tcx>(\n                 new_args.push(recurse_build(tcx, body, id, root_span)?);\n             }\n             let new_args = tcx.mk_const_list(new_args.iter());\n-            tcx.mk_const(ConstKind::Expr(Expr::FunctionCall(fun, new_args)), node.ty)\n+            tcx.mk_const(Expr::FunctionCall(fun, new_args), node.ty)\n         }\n         &ExprKind::Binary { op, lhs, rhs } if check_binop(op) => {\n             let lhs = recurse_build(tcx, body, lhs, root_span)?;\n             let rhs = recurse_build(tcx, body, rhs, root_span)?;\n-            tcx.mk_const(ConstKind::Expr(Expr::Binop(op, lhs, rhs)), node.ty)\n+            tcx.mk_const(Expr::Binop(op, lhs, rhs), node.ty)\n         }\n         &ExprKind::Unary { op, arg } if check_unop(op) => {\n             let arg = recurse_build(tcx, body, arg, root_span)?;\n-            tcx.mk_const(ConstKind::Expr(Expr::UnOp(op, arg)), node.ty)\n+            tcx.mk_const(Expr::UnOp(op, arg), node.ty)\n         }\n         // This is necessary so that the following compiles:\n         //\n@@ -179,11 +175,11 @@ fn recurse_build<'tcx>(\n         // This is important so that `N as usize as usize` doesnt unify with `N as usize`. (untested)\n         &ExprKind::Use { source } => {\n             let arg = recurse_build(tcx, body, source, root_span)?;\n-            tcx.mk_const(ConstKind::Expr(Expr::Cast(CastKind::Use, arg, node.ty)), node.ty)\n+            tcx.mk_const(Expr::Cast(CastKind::Use, arg, node.ty), node.ty)\n         }\n         &ExprKind::Cast { source } => {\n             let arg = recurse_build(tcx, body, source, root_span)?;\n-            tcx.mk_const(ConstKind::Expr(Expr::Cast(CastKind::As, arg, node.ty)), node.ty)\n+            tcx.mk_const(Expr::Cast(CastKind::As, arg, node.ty), node.ty)\n         }\n         ExprKind::Borrow { arg, .. } => {\n             let arg_node = &body.exprs[*arg];"}]}