{"sha": "878bebfb63db6ea81f1fb738f4eeaa3afb8e55e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3OGJlYmZiNjNkYjZlYTgxZjFmYjczOGY0ZWVhYTNhZmI4ZTU1ZTQ=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-11-10T00:39:55Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-11-12T15:04:31Z"}, "message": "Deprecate signum wrapper and clean up signed impls", "tree": {"sha": "390606a20987e06e94e7e9f7cc0ee2a82041a345", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/390606a20987e06e94e7e9f7cc0ee2a82041a345"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/878bebfb63db6ea81f1fb738f4eeaa3afb8e55e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/878bebfb63db6ea81f1fb738f4eeaa3afb8e55e4", "html_url": "https://github.com/rust-lang/rust/commit/878bebfb63db6ea81f1fb738f4eeaa3afb8e55e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/878bebfb63db6ea81f1fb738f4eeaa3afb8e55e4/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26196715e8e8fb3a578cc89a54c13773dc1a3772", "url": "https://api.github.com/repos/rust-lang/rust/commits/26196715e8e8fb3a578cc89a54c13773dc1a3772", "html_url": "https://github.com/rust-lang/rust/commit/26196715e8e8fb3a578cc89a54c13773dc1a3772"}], "stats": {"total": 80, "additions": 42, "deletions": 38}, "files": [{"sha": "bcc2f9fdd440c12ab6484def7af39a03c13a08ed", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 42, "deletions": 38, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/878bebfb63db6ea81f1fb738f4eeaa3afb8e55e4/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/878bebfb63db6ea81f1fb738f4eeaa3afb8e55e4/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=878bebfb63db6ea81f1fb738f4eeaa3afb8e55e4", "patch": "@@ -64,8 +64,8 @@ pub trait Signed: Neg<Self> {\n     fn is_negative(self) -> bool;\n }\n \n-macro_rules! signed_impl(\n-    ($($T:ty)*) => ($(\n+macro_rules! signed_int_impl {\n+    ($T:ty) => {\n         impl Signed for $T {\n             #[inline]\n             fn abs(self) -> $T {\n@@ -75,9 +75,9 @@ macro_rules! signed_impl(\n             #[inline]\n             fn signum(self) -> $T {\n                 match self {\n-                    n if n > 0 => 1,\n-                    0 => 0,\n-                    _ => -1,\n+                    n if n > 0 =>  1,\n+                    0          =>  0,\n+                    _          => -1,\n                 }\n             }\n \n@@ -87,13 +87,17 @@ macro_rules! signed_impl(\n             #[inline]\n             fn is_negative(self) -> bool { self < 0 }\n         }\n-    )*)\n-)\n+    }\n+}\n \n-signed_impl!(int i8 i16 i32 i64)\n+signed_int_impl!(i8)\n+signed_int_impl!(i16)\n+signed_int_impl!(i32)\n+signed_int_impl!(i64)\n+signed_int_impl!(int)\n \n-macro_rules! signed_float_impl(\n-    ($T:ty, $nan:expr, $inf:expr, $neg_inf:expr, $fabs:path, $fcopysign:path, $fdim:ident) => {\n+macro_rules! signed_float_impl {\n+    ($T:ty, $fabs:path, $fcopysign:path) => {\n         impl Signed for $T {\n             /// Computes the absolute value. Returns `NAN` if the number is `NAN`.\n             #[inline]\n@@ -103,46 +107,42 @@ macro_rules! signed_float_impl(\n \n             /// # Returns\n             ///\n-            /// - `1.0` if the number is positive, `+0.0` or `INFINITY`\n-            /// - `-1.0` if the number is negative, `-0.0` or `NEG_INFINITY`\n-            /// - `NAN` if the number is NaN\n+            /// - `1.0` if the number is positive, `+0.0` or `Float::infinity()`\n+            /// - `-1.0` if the number is negative, `-0.0` or `Float::neg_infinity()`\n+            /// - `Float::nan()` if the number is `Float::nan()`\n             #[inline]\n             fn signum(self) -> $T {\n-                if self != self { $nan } else {\n+                if self.is_nan() {\n+                    Float::nan()\n+                } else {\n                     unsafe { $fcopysign(1.0, self) }\n                 }\n             }\n \n-            /// Returns `true` if the number is positive, including `+0.0` and `INFINITY`\n+            /// Returns `true` if the number is positive, including `+0.0` and\n+            /// `Float::infinity()`.\n             #[inline]\n-            fn is_positive(self) -> bool { self > 0.0 || (1.0 / self) == $inf }\n+            fn is_positive(self) -> bool {\n+                self > 0.0 || (1.0 / self) == Float::infinity()\n+            }\n \n-            /// Returns `true` if the number is negative, including `-0.0` and `NEG_INFINITY`\n+            /// Returns `true` if the number is negative, including `-0.0` and\n+            /// `Float::neg_infinity()`.\n             #[inline]\n-            fn is_negative(self) -> bool { self < 0.0 || (1.0 / self) == $neg_inf }\n+            fn is_negative(self) -> bool {\n+                self < 0.0 || (1.0 / self) == Float::neg_infinity()\n+            }\n         }\n-    }\n-)\n+    };\n+}\n \n-signed_float_impl!(f32, f32::NAN, f32::INFINITY, f32::NEG_INFINITY,\n-                   intrinsics::fabsf32, intrinsics::copysignf32, fdimf)\n-signed_float_impl!(f64, f64::NAN, f64::INFINITY, f64::NEG_INFINITY,\n-                   intrinsics::fabsf64, intrinsics::copysignf64, fdim)\n+signed_float_impl!(f32,\n+    intrinsics::fabsf32,\n+    intrinsics::copysignf32)\n \n-/// Returns the sign of the number.\n-///\n-/// For `f32` and `f64`:\n-///\n-/// * `1.0` if the number is positive, `+0.0` or `INFINITY`\n-/// * `-1.0` if the number is negative, `-0.0` or `NEG_INFINITY`\n-/// * `NaN` if the number is `NaN`\n-///\n-/// For signed integers:\n-///\n-/// * `0` if the number is zero\n-/// * `1` if the number is positive\n-/// * `-1` if the number is negative\n-#[inline(always)] pub fn signum<T: Signed>(value: T) -> T { value.signum() }\n+signed_float_impl!(f64,\n+    intrinsics::fabsf64,\n+    intrinsics::copysignf64)\n \n /// Raises a value to the power of exp, using exponentiation by squaring.\n ///\n@@ -1481,6 +1481,10 @@ one_impl!(f64, 1.0f64)\n pub fn abs<T: Signed>(value: T) -> T {\n     value.abs()\n }\n+#[deprecated = \"Use `Signed::signum`\"]\n+pub fn signum<T: Signed>(value: T) -> T {\n+    value.signum()\n+}\n #[deprecated = \"Use `UnsignedInt::next_power_of_two`\"]\n pub fn next_power_of_two<T: UnsignedInt>(n: T) -> T {\n     n.next_power_of_two()"}]}