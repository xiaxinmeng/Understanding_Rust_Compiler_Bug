{"sha": "9cd66be2351099d2a74aeb67ccb13e148dfdf114", "node_id": "C_kwDOAAsO6NoAKDljZDY2YmUyMzUxMDk5ZDJhNzRhZWI2N2NjYjEzZTE0OGRmZGYxMTQ", "commit": {"author": {"name": "Duarte Nunes", "email": "duarte.nunes@datadoghq.com", "date": "2022-07-13T17:22:50Z"}, "committer": {"name": "Duarte Nunes", "email": "duarte.nunes@datadoghq.com", "date": "2022-07-13T17:29:35Z"}, "message": "docs: be less harsh in wording for Vec::from_raw_parts\n\nIn particular, be clear that it is sound to specify memory not\noriginating from a previous `Vec` allocation. That is already suggested\nin other parts of the documentation about zero-alloc conversions to Box<[T]>.\n\nIncorporate a constraint from `slice::from_raw_parts` that was missing\nbut needs to be fulfilled, since a `Vec` can be converted into a slice.", "tree": {"sha": "5fbd411a0f1fd142ee12a05162afaedd0e88a71a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fbd411a0f1fd142ee12a05162afaedd0e88a71a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9cd66be2351099d2a74aeb67ccb13e148dfdf114", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9cd66be2351099d2a74aeb67ccb13e148dfdf114", "html_url": "https://github.com/rust-lang/rust/commit/9cd66be2351099d2a74aeb67ccb13e148dfdf114", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9cd66be2351099d2a74aeb67ccb13e148dfdf114/comments", "author": {"login": "duarten", "id": 501746, "node_id": "MDQ6VXNlcjUwMTc0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/501746?v=4", "gravatar_id": "", "url": "https://api.github.com/users/duarten", "html_url": "https://github.com/duarten", "followers_url": "https://api.github.com/users/duarten/followers", "following_url": "https://api.github.com/users/duarten/following{/other_user}", "gists_url": "https://api.github.com/users/duarten/gists{/gist_id}", "starred_url": "https://api.github.com/users/duarten/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/duarten/subscriptions", "organizations_url": "https://api.github.com/users/duarten/orgs", "repos_url": "https://api.github.com/users/duarten/repos", "events_url": "https://api.github.com/users/duarten/events{/privacy}", "received_events_url": "https://api.github.com/users/duarten/received_events", "type": "User", "site_admin": false}, "committer": {"login": "duarten", "id": 501746, "node_id": "MDQ6VXNlcjUwMTc0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/501746?v=4", "gravatar_id": "", "url": "https://api.github.com/users/duarten", "html_url": "https://github.com/duarten", "followers_url": "https://api.github.com/users/duarten/followers", "following_url": "https://api.github.com/users/duarten/following{/other_user}", "gists_url": "https://api.github.com/users/duarten/gists{/gist_id}", "starred_url": "https://api.github.com/users/duarten/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/duarten/subscriptions", "organizations_url": "https://api.github.com/users/duarten/orgs", "repos_url": "https://api.github.com/users/duarten/repos", "events_url": "https://api.github.com/users/duarten/events{/privacy}", "received_events_url": "https://api.github.com/users/duarten/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42bd138126b0a9d38d65bc9973e72de3c5b6c37f", "url": "https://api.github.com/repos/rust-lang/rust/commits/42bd138126b0a9d38d65bc9973e72de3c5b6c37f", "html_url": "https://github.com/rust-lang/rust/commit/42bd138126b0a9d38d65bc9973e72de3c5b6c37f"}], "stats": {"total": 20, "additions": 15, "deletions": 5}, "files": [{"sha": "aa822b1f923dffcb283ce0bada9372d9a1cb7c04", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9cd66be2351099d2a74aeb67ccb13e148dfdf114/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cd66be2351099d2a74aeb67ccb13e148dfdf114/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=9cd66be2351099d2a74aeb67ccb13e148dfdf114", "patch": "@@ -490,8 +490,6 @@ impl<T> Vec<T> {\n     /// This is highly unsafe, due to the number of invariants that aren't\n     /// checked:\n     ///\n-    /// * `ptr` needs to have been previously allocated via [`String`]/`Vec<T>`\n-    ///   (at least, it's highly likely to be incorrect if it wasn't).\n     /// * `T` needs to have the same alignment as what `ptr` was allocated with.\n     ///   (`T` having a less strict alignment is not sufficient, the alignment really\n     ///   needs to be equal to satisfy the [`dealloc`] requirement that memory must be\n@@ -500,6 +498,12 @@ impl<T> Vec<T> {\n     ///   to be the same size as the pointer was allocated with. (Because similar to\n     ///   alignment, [`dealloc`] must be called with the same layout `size`.)\n     /// * `length` needs to be less than or equal to `capacity`.\n+    /// * `capacity` needs to be the capacity that the pointer was allocated with.\n+    /// * The allocated size in bytes must be no larger than  `isize::MAX`.\n+    ///   See the safety documentation of [`pointer::offset`].\n+    ///\n+    /// To ensure these requirements are easily met, ensure `ptr` has previously\n+    /// been allocated via `Vec<T>`.\n     ///\n     /// Violating these may cause problems like corrupting the allocator's\n     /// internal data structures. For example it is normally **not** safe\n@@ -648,14 +652,20 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// This is highly unsafe, due to the number of invariants that aren't\n     /// checked:\n     ///\n-    /// * `ptr` needs to have been previously allocated via [`String`]/`Vec<T>`\n-    ///   (at least, it's highly likely to be incorrect if it wasn't).\n-    /// * `T` needs to have the same size and alignment as what `ptr` was allocated with.\n+    /// * `T` needs to have the same alignment as what `ptr` was allocated with.\n     ///   (`T` having a less strict alignment is not sufficient, the alignment really\n     ///   needs to be equal to satisfy the [`dealloc`] requirement that memory must be\n     ///   allocated and deallocated with the same layout.)\n+    /// * The size of `T` times the `capacity` (ie. the allocated size in bytes) needs\n+    ///   to be the same size as the pointer was allocated with. (Because similar to\n+    ///   alignment, [`dealloc`] must be called with the same layout `size`.)\n     /// * `length` needs to be less than or equal to `capacity`.\n     /// * `capacity` needs to be the capacity that the pointer was allocated with.\n+    /// * The allocated size in bytes must be no larger than  `isize::MAX`.\n+    ///   See the safety documentation of [`pointer::offset`].\n+    ///\n+    /// To ensure these requirements are easily met, ensure `ptr` has previously\n+    /// been allocated via `Vec<T>`.\n     ///\n     /// Violating these may cause problems like corrupting the allocator's\n     /// internal data structures. For example it is **not** safe"}]}