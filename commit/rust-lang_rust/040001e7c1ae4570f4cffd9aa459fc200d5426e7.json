{"sha": "040001e7c1ae4570f4cffd9aa459fc200d5426e7", "node_id": "C_kwDOAAsO6NoAKDA0MDAwMWU3YzFhZTQ1NzBmNGNmZmQ5YWE0NTlmYzIwMGQ1NDI2ZTc", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-22T19:08:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-22T19:08:04Z"}, "message": "Rollup merge of #109477 - lcnr:cleanup, r=cjgillot\n\n`HirId` to `LocalDefId` cleanup\n\nrevival of the still relevant parts of #109125", "tree": {"sha": "e40639c33b9874be32d241a0d881ba127bc8ec20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e40639c33b9874be32d241a0d881ba127bc8ec20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/040001e7c1ae4570f4cffd9aa459fc200d5426e7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkG1IUCRBK7hj4Ov3rIwAA0bAIAK//hZCWggKtg8aNNdYjuIkq\nTcmiarKSCxI1EwLvXGrsg/eao6XRTipok6Uzw/mystmraIKNel/d+pBdAjVz1+mO\nYlkhkl9JVzm+YF5JWe41rPa0O65onhmGf91mLTGnI0zgq5CMMWXkDbkxfZa754vZ\nCvOdZCDMBYMfGqhhOMk0oC2f6BC6O/5YW83i+AlBlxiwjX9a/87Q1esVTKZfqwzC\nd/3Qz73PBVGJP6tcZELaqIzCtL9R7wOW5p4dfwZCjMiJqRW3b7hk6GJW9g+egCDj\nTSnejkn8SSFYjsrNNUZMZh0AeeSu1u56MmpmZxsIquJhsa/ex+CYz01qGFxNF+I=\n=xfvb\n-----END PGP SIGNATURE-----\n", "payload": "tree e40639c33b9874be32d241a0d881ba127bc8ec20\nparent 8139f47f43aaa53edd2dc5df1f6339c52ec84d28\nparent 0882def9aa55d6f582c3a7b9c8d9e78f72129bbe\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1679512084 +0100\ncommitter GitHub <noreply@github.com> 1679512084 +0100\n\nRollup merge of #109477 - lcnr:cleanup, r=cjgillot\n\n`HirId` to `LocalDefId` cleanup\n\nrevival of the still relevant parts of #109125\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/040001e7c1ae4570f4cffd9aa459fc200d5426e7", "html_url": "https://github.com/rust-lang/rust/commit/040001e7c1ae4570f4cffd9aa459fc200d5426e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/040001e7c1ae4570f4cffd9aa459fc200d5426e7/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8139f47f43aaa53edd2dc5df1f6339c52ec84d28", "url": "https://api.github.com/repos/rust-lang/rust/commits/8139f47f43aaa53edd2dc5df1f6339c52ec84d28", "html_url": "https://github.com/rust-lang/rust/commit/8139f47f43aaa53edd2dc5df1f6339c52ec84d28"}, {"sha": "0882def9aa55d6f582c3a7b9c8d9e78f72129bbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/0882def9aa55d6f582c3a7b9c8d9e78f72129bbe", "html_url": "https://github.com/rust-lang/rust/commit/0882def9aa55d6f582c3a7b9c8d9e78f72129bbe"}], "stats": {"total": 19, "additions": 7, "deletions": 12}, "files": [{"sha": "c41e96290df1632f95635926afe9133efc523974", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/040001e7c1ae4570f4cffd9aa459fc200d5426e7/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040001e7c1ae4570f4cffd9aa459fc200d5426e7/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=040001e7c1ae4570f4cffd9aa459fc200d5426e7", "patch": "@@ -1208,7 +1208,7 @@ fn infer_return_ty_for_fn_sig<'tcx>(\n                     fn_sig,\n                     Applicability::MachineApplicable,\n                 );\n-            } else if let Some(sugg) = suggest_impl_trait(tcx, ret_ty, ty.span, hir_id, def_id) {\n+            } else if let Some(sugg) = suggest_impl_trait(tcx, ret_ty, ty.span, def_id) {\n                 diag.span_suggestion(\n                     ty.span,\n                     \"replace with an appropriate return type\",\n@@ -1240,12 +1240,10 @@ fn infer_return_ty_for_fn_sig<'tcx>(\n     }\n }\n \n-// FIXME(vincenzopalazzo): remove the hir item when the refactoring is stable\n fn suggest_impl_trait<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     ret_ty: Ty<'tcx>,\n     span: Span,\n-    _hir_id: hir::HirId,\n     def_id: LocalDefId,\n ) -> Option<String> {\n     let format_as_assoc: fn(_, _, _, _, _) -> _ ="}, {"sha": "18a49ef2f0162daae349a10f8afe4b6d2154f49b", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/040001e7c1ae4570f4cffd9aa459fc200d5426e7/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040001e7c1ae4570f4cffd9aa459fc200d5426e7/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=040001e7c1ae4570f4cffd9aa459fc200d5426e7", "patch": "@@ -165,8 +165,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         ty: Ty<'tcx>,\n     ) -> Option<(DefIdOrName, Ty<'tcx>, Vec<Ty<'tcx>>)> {\n-        let body_hir_id = self.tcx.hir().local_def_id_to_hir_id(self.body_id);\n-        self.err_ctxt().extract_callable_info(body_hir_id, self.param_env, ty)\n+        self.err_ctxt().extract_callable_info(self.body_id, self.param_env, ty)\n     }\n \n     pub fn suggest_two_fn_call("}, {"sha": "9b0c6e25d16b4903baaf7dde4f5bcafef8a60c7c", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/040001e7c1ae4570f4cffd9aa459fc200d5426e7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040001e7c1ae4570f4cffd9aa459fc200d5426e7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=040001e7c1ae4570f4cffd9aa459fc200d5426e7", "patch": "@@ -2525,7 +2525,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         ident\n     }\n \n-    // FIXME(vincenzoapalzzo): move the HirId to a LocalDefId\n+    // FIXME(vincenzopalazzo): move the HirId to a LocalDefId\n     pub fn adjust_ident_and_get_scope(\n         self,\n         mut ident: Ident,"}, {"sha": "af108ab6f309f0df5800f0273dbaaee053588a21", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/040001e7c1ae4570f4cffd9aa459fc200d5426e7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040001e7c1ae4570f4cffd9aa459fc200d5426e7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=040001e7c1ae4570f4cffd9aa459fc200d5426e7", "patch": "@@ -212,7 +212,7 @@ pub trait TypeErrCtxtExt<'tcx> {\n \n     fn extract_callable_info(\n         &self,\n-        hir_id: HirId,\n+        body_id: LocalDefId,\n         param_env: ty::ParamEnv<'tcx>,\n         found: Ty<'tcx>,\n     ) -> Option<(DefIdOrName, Ty<'tcx>, Vec<Ty<'tcx>>)>;\n@@ -909,9 +909,8 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             trait_pred.self_ty(),\n         );\n \n-        let body_hir_id = self.tcx.hir().local_def_id_to_hir_id(obligation.cause.body_id);\n         let Some((def_id_or_name, output, inputs)) = self.extract_callable_info(\n-            body_hir_id,\n+            obligation.cause.body_id,\n             obligation.param_env,\n             self_ty,\n         ) else { return false; };\n@@ -1113,10 +1112,9 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n     /// Extracts information about a callable type for diagnostics. This is a\n     /// heuristic -- it doesn't necessarily mean that a type is always callable,\n     /// because the callable type must also be well-formed to be called.\n-    // FIXME(vincenzopalazzo): move the HirId to a LocalDefId\n     fn extract_callable_info(\n         &self,\n-        hir_id: HirId,\n+        body_id: LocalDefId,\n         param_env: ty::ParamEnv<'tcx>,\n         found: Ty<'tcx>,\n     ) -> Option<(DefIdOrName, Ty<'tcx>, Vec<Ty<'tcx>>)> {\n@@ -1168,7 +1166,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     })\n                 }\n                 ty::Param(param) => {\n-                    let generics = self.tcx.generics_of(hir_id.owner.to_def_id());\n+                    let generics = self.tcx.generics_of(body_id);\n                     let name = if generics.count() > param.index as usize\n                         && let def = generics.param_at(param.index as usize, self.tcx)\n                         && matches!(def.kind, ty::GenericParamDefKind::Type { .. })"}]}