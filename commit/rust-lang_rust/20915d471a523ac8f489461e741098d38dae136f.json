{"sha": "20915d471a523ac8f489461e741098d38dae136f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwOTE1ZDQ3MWE1MjNhYzhmNDg5NDYxZTc0MTA5OGQzOGRhZTEzNmY=", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2021-06-18T22:29:45Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2021-06-18T23:08:58Z"}, "message": "Resolve intra-doc links in summary desc\n\nBefore:\n\n![rustdoc-intra-doc-link-summary-before](https://user-images.githubusercontent.com/1593513/122623069-9d995e80-d04f-11eb-8d46-ec2ec126bb5e.png)\n\nAfter:\n\n![rustdoc-intra-doc-link-summary](https://user-images.githubusercontent.com/1593513/122623076-a4c06c80-d04f-11eb-967a-f5916871c34b.png)", "tree": {"sha": "ae19a178bfd12d6d6502f4bcbdde67397165f59e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae19a178bfd12d6d6502f4bcbdde67397165f59e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20915d471a523ac8f489461e741098d38dae136f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20915d471a523ac8f489461e741098d38dae136f", "html_url": "https://github.com/rust-lang/rust/commit/20915d471a523ac8f489461e741098d38dae136f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20915d471a523ac8f489461e741098d38dae136f/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "312b894cc12240a3fcc645474c3daa14f7d568ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/312b894cc12240a3fcc645474c3daa14f7d568ea", "html_url": "https://github.com/rust-lang/rust/commit/312b894cc12240a3fcc645474c3daa14f7d568ea"}], "stats": {"total": 72, "additions": 61, "deletions": 11}, "files": [{"sha": "66f62d97b047d2242a76d68482bab813ed72f94e", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/20915d471a523ac8f489461e741098d38dae136f/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20915d471a523ac8f489461e741098d38dae136f/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=20915d471a523ac8f489461e741098d38dae136f", "patch": "@@ -523,6 +523,33 @@ impl Item {\n             .collect()\n     }\n \n+    /// Find a list of all link names, without finding their href.\n+    ///\n+    /// This is used for generating summary text, which does not include\n+    /// the link text, but does need to know which `[]`-bracketed names\n+    /// are actually links.\n+    crate fn link_names(&self, cache: &Cache) -> Vec<RenderedLink> {\n+        cache\n+            .intra_doc_links\n+            .get(&self.def_id)\n+            .map_or(&[][..], |v| v.as_slice())\n+            .iter()\n+            .filter_map(|ItemLink { link: s, link_text, did, fragment }| {\n+                // FIXME(83083): using fragments as a side-channel for\n+                // primitive names is very unfortunate\n+                if did.is_some() || fragment.is_some() {\n+                    Some(RenderedLink {\n+                        original_text: s.clone(),\n+                        new_text: link_text.clone(),\n+                        href: String::new(),\n+                    })\n+                } else {\n+                    None\n+                }\n+            })\n+            .collect()\n+    }\n+\n     crate fn is_crate(&self) -> bool {\n         self.is_mod() && self.def_id.as_real().map_or(false, |did| did.index == CRATE_DEF_INDEX)\n     }"}, {"sha": "811f682920107a9ae37efa4ffbd2f189366944de", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/20915d471a523ac8f489461e741098d38dae136f/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20915d471a523ac8f489461e741098d38dae136f/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=20915d471a523ac8f489461e741098d38dae136f", "patch": "@@ -292,13 +292,14 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n                     // which should not be indexed. The crate-item itself is\n                     // inserted later on when serializing the search-index.\n                     if item.def_id.index().map_or(false, |idx| idx != CRATE_DEF_INDEX) {\n+                        let desc = item.doc_value().map_or_else(String::new, |x| {\n+                            short_markdown_summary(&x.as_str(), &item.link_names(&self.cache))\n+                        });\n                         self.cache.search_index.push(IndexItem {\n                             ty: item.type_(),\n                             name: s.to_string(),\n                             path: path.join(\"::\"),\n-                            desc: item\n-                                .doc_value()\n-                                .map_or_else(String::new, |x| short_markdown_summary(&x.as_str())),\n+                            desc,\n                             parent,\n                             parent_idx: None,\n                             search_type: get_index_search_type(&item, &self.empty_cache, self.tcx),"}, {"sha": "bafb522f363383733ab5486e354be92f027fb9bd", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/20915d471a523ac8f489461e741098d38dae136f/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20915d471a523ac8f489461e741098d38dae136f/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=20915d471a523ac8f489461e741098d38dae136f", "patch": "@@ -1051,7 +1051,11 @@ impl MarkdownSummaryLine<'_> {\n ///\n /// Returns a tuple of the rendered HTML string and whether the output was shortened\n /// due to the provided `length_limit`.\n-fn markdown_summary_with_limit(md: &str, length_limit: usize) -> (String, bool) {\n+fn markdown_summary_with_limit(\n+    md: &str,\n+    link_names: &[RenderedLink],\n+    length_limit: usize,\n+) -> (String, bool) {\n     if md.is_empty() {\n         return (String::new(), false);\n     }\n@@ -1065,7 +1069,20 @@ fn markdown_summary_with_limit(md: &str, length_limit: usize) -> (String, bool)\n         *text_length += text.len();\n     }\n \n-    'outer: for event in Parser::new_ext(md, summary_opts()) {\n+    let mut replacer = |broken_link: BrokenLink<'_>| {\n+        if let Some(link) =\n+            link_names.iter().find(|link| &*link.original_text == broken_link.reference)\n+        {\n+            Some((link.href.as_str().into(), link.new_text.as_str().into()))\n+        } else {\n+            None\n+        }\n+    };\n+\n+    let p = Parser::new_with_broken_link_callback(md, opts(), Some(&mut replacer));\n+    let p = LinkReplacer::new(p, link_names);\n+\n+    'outer: for event in p {\n         match &event {\n             Event::Text(text) => {\n                 for word in text.split_inclusive(char::is_whitespace) {\n@@ -1121,8 +1138,8 @@ fn markdown_summary_with_limit(md: &str, length_limit: usize) -> (String, bool)\n /// Will shorten to 59 or 60 characters, including an ellipsis (\u2026) if it was shortened.\n ///\n /// See [`markdown_summary_with_limit`] for details about what is rendered and what is not.\n-crate fn short_markdown_summary(markdown: &str) -> String {\n-    let (mut s, was_shortened) = markdown_summary_with_limit(markdown, 59);\n+crate fn short_markdown_summary(markdown: &str, link_names: &[RenderedLink]) -> String {\n+    let (mut s, was_shortened) = markdown_summary_with_limit(markdown, link_names, 59);\n \n     if was_shortened {\n         s.push('\u2026');"}, {"sha": "5b3c445013b54f4a6ecb6072a3b5bb702b9e2374", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/20915d471a523ac8f489461e741098d38dae136f/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20915d471a523ac8f489461e741098d38dae136f/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=20915d471a523ac8f489461e741098d38dae136f", "patch": "@@ -34,11 +34,14 @@ crate fn build_index<'tcx>(krate: &clean::Crate, cache: &mut Cache, tcx: TyCtxt<\n     // has since been learned.\n     for &(did, ref item) in &cache.orphan_impl_items {\n         if let Some(&(ref fqp, _)) = cache.paths.get(&did) {\n+            let desc = item\n+                .doc_value()\n+                .map_or_else(String::new, |s| short_markdown_summary(&s, &item.link_names(&cache)));\n             cache.search_index.push(IndexItem {\n                 ty: item.type_(),\n                 name: item.name.unwrap().to_string(),\n                 path: fqp[..fqp.len() - 1].join(\"::\"),\n-                desc: item.doc_value().map_or_else(String::new, |s| short_markdown_summary(&s)),\n+                desc,\n                 parent: Some(did.into()),\n                 parent_idx: None,\n                 search_type: get_index_search_type(&item, cache, tcx),\n@@ -47,6 +50,11 @@ crate fn build_index<'tcx>(krate: &clean::Crate, cache: &mut Cache, tcx: TyCtxt<\n         }\n     }\n \n+    let crate_doc = krate\n+        .module\n+        .doc_value()\n+        .map_or_else(String::new, |s| short_markdown_summary(&s, &krate.module.link_names(&cache)));\n+\n     let Cache { ref mut search_index, ref paths, .. } = *cache;\n \n     // Aliases added through `#[doc(alias = \"...\")]`. Since a few items can have the same alias,\n@@ -100,9 +108,6 @@ crate fn build_index<'tcx>(krate: &clean::Crate, cache: &mut Cache, tcx: TyCtxt<\n         crate_items.push(&*item);\n     }\n \n-    let crate_doc =\n-        krate.module.doc_value().map_or_else(String::new, |s| short_markdown_summary(&s));\n-\n     struct CrateData<'a> {\n         doc: String,\n         items: Vec<&'a IndexItem>,"}]}