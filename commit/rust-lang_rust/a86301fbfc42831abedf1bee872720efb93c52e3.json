{"sha": "a86301fbfc42831abedf1bee872720efb93c52e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4NjMwMWZiZmM0MjgzMWFiZWRmMWJlZTg3MjcyMGVmYjkzYzUyZTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-07T06:32:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-07T06:32:15Z"}, "message": "Auto merge of #4999 - krishna-veerareddy:issue-4679-atomic-ordering, r=phansch\n\nAdd lint to detect usage of invalid atomic ordering\n\nDetect usage of invalid atomic ordering modes such as `Ordering::{Release, AcqRel}` in atomic loads and `Ordering::{Acquire, AcqRel}` in atomic stores.\n\nFixes #4679\n\nchangelog: Add lint [`invalid_atomic_ordering`]", "tree": {"sha": "3713eb3b5e31d02368b56c76cb9739c45e6edf72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3713eb3b5e31d02368b56c76cb9739c45e6edf72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a86301fbfc42831abedf1bee872720efb93c52e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a86301fbfc42831abedf1bee872720efb93c52e3", "html_url": "https://github.com/rust-lang/rust/commit/a86301fbfc42831abedf1bee872720efb93c52e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a86301fbfc42831abedf1bee872720efb93c52e3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6271f5616983bde95c6d768fbbae5b57f1f20df5", "url": "https://api.github.com/repos/rust-lang/rust/commits/6271f5616983bde95c6d768fbbae5b57f1f20df5", "html_url": "https://github.com/rust-lang/rust/commit/6271f5616983bde95c6d768fbbae5b57f1f20df5"}, {"sha": "fe21ef4e8bf299c2bebc2d8ec7454ca13ba24f9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe21ef4e8bf299c2bebc2d8ec7454ca13ba24f9f", "html_url": "https://github.com/rust-lang/rust/commit/fe21ef4e8bf299c2bebc2d8ec7454ca13ba24f9f"}], "stats": {"total": 739, "additions": 737, "deletions": 2}, "files": [{"sha": "f60ac7d5267bef3c8180734463208c514e909c88", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a86301fbfc42831abedf1bee872720efb93c52e3/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/a86301fbfc42831abedf1bee872720efb93c52e3/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=a86301fbfc42831abedf1bee872720efb93c52e3", "patch": "@@ -1134,6 +1134,7 @@ Released 2018-09-13\n [`integer_division`]: https://rust-lang.github.io/rust-clippy/master/index.html#integer_division\n [`into_iter_on_array`]: https://rust-lang.github.io/rust-clippy/master/index.html#into_iter_on_array\n [`into_iter_on_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#into_iter_on_ref\n+[`invalid_atomic_ordering`]: https://rust-lang.github.io/rust-clippy/master/index.html#invalid_atomic_ordering\n [`invalid_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#invalid_ref\n [`invalid_regex`]: https://rust-lang.github.io/rust-clippy/master/index.html#invalid_regex\n [`invalid_upcast_comparisons`]: https://rust-lang.github.io/rust-clippy/master/index.html#invalid_upcast_comparisons"}, {"sha": "c46d3e16bb17a1e3e10a2f1026dd80e557fb1935", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a86301fbfc42831abedf1bee872720efb93c52e3/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/a86301fbfc42831abedf1bee872720efb93c52e3/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=a86301fbfc42831abedf1bee872720efb93c52e3", "patch": "@@ -6,7 +6,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 344 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 345 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "fe06c63a553c9f878c59f8ae75e9eb0ca38caad9", "filename": "clippy_lints/src/atomic_ordering.rs", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/a86301fbfc42831abedf1bee872720efb93c52e3/clippy_lints%2Fsrc%2Fatomic_ordering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a86301fbfc42831abedf1bee872720efb93c52e3/clippy_lints%2Fsrc%2Fatomic_ordering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fatomic_ordering.rs?ref=a86301fbfc42831abedf1bee872720efb93c52e3", "patch": "@@ -0,0 +1,102 @@\n+use crate::utils::{match_def_path, span_help_and_lint};\n+use if_chain::if_chain;\n+use rustc::declare_lint_pass;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::ty;\n+use rustc_hir::def_id::DefId;\n+use rustc_hir::*;\n+use rustc_session::declare_tool_lint;\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for usage of invalid atomic\n+    /// ordering in Atomic*::{load, store} calls.\n+    ///\n+    /// **Why is this bad?** Using an invalid atomic ordering\n+    /// will cause a panic at run-time.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// ```rust,no_run\n+    /// # use std::sync::atomic::{AtomicBool, Ordering};\n+    ///\n+    /// let x = AtomicBool::new(true);\n+    ///\n+    /// let _ = x.load(Ordering::Release);\n+    /// let _ = x.load(Ordering::AcqRel);\n+    ///\n+    /// x.store(false, Ordering::Acquire);\n+    /// x.store(false, Ordering::AcqRel);\n+    /// ```\n+    pub INVALID_ATOMIC_ORDERING,\n+    correctness,\n+    \"usage of invalid atomic ordering in atomic load/store calls\"\n+}\n+\n+declare_lint_pass!(AtomicOrdering => [INVALID_ATOMIC_ORDERING]);\n+\n+const ATOMIC_TYPES: [&str; 12] = [\n+    \"AtomicBool\",\n+    \"AtomicI8\",\n+    \"AtomicI16\",\n+    \"AtomicI32\",\n+    \"AtomicI64\",\n+    \"AtomicIsize\",\n+    \"AtomicPtr\",\n+    \"AtomicU8\",\n+    \"AtomicU16\",\n+    \"AtomicU32\",\n+    \"AtomicU64\",\n+    \"AtomicUsize\",\n+];\n+\n+fn type_is_atomic(cx: &LateContext<'_, '_>, expr: &Expr<'_>) -> bool {\n+    if let ty::Adt(&ty::AdtDef { did, .. }, _) = cx.tables.expr_ty(expr).kind {\n+        ATOMIC_TYPES\n+            .iter()\n+            .any(|ty| match_def_path(cx, did, &[\"core\", \"sync\", \"atomic\", ty]))\n+    } else {\n+        false\n+    }\n+}\n+\n+fn match_ordering_def_path(cx: &LateContext<'_, '_>, did: DefId, orderings: &[&str]) -> bool {\n+    orderings\n+        .iter()\n+        .any(|ordering| match_def_path(cx, did, &[\"core\", \"sync\", \"atomic\", \"Ordering\", ordering]))\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AtomicOrdering {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_>) {\n+        if_chain! {\n+            if let ExprKind::MethodCall(ref method_path, _, args) = &expr.kind;\n+            let method = method_path.ident.name.as_str();\n+            if type_is_atomic(cx, &args[0]);\n+            if method == \"load\" || method == \"store\";\n+            let ordering_arg = if method == \"load\" { &args[1] } else { &args[2] };\n+            if let ExprKind::Path(ref ordering_qpath) = ordering_arg.kind;\n+            if let Some(ordering_def_id) = cx.tables.qpath_res(ordering_qpath, ordering_arg.hir_id).opt_def_id();\n+            then {\n+                if method == \"load\" &&\n+                    match_ordering_def_path(cx, ordering_def_id, &[\"Release\", \"AcqRel\"]) {\n+                    span_help_and_lint(\n+                        cx,\n+                        INVALID_ATOMIC_ORDERING,\n+                        ordering_arg.span,\n+                        \"atomic loads cannot have `Release` and `AcqRel` ordering\",\n+                        \"consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\"\n+                    );\n+                } else if method == \"store\" &&\n+                    match_ordering_def_path(cx, ordering_def_id, &[\"Acquire\", \"AcqRel\"]) {\n+                    span_help_and_lint(\n+                        cx,\n+                        INVALID_ATOMIC_ORDERING,\n+                        ordering_arg.span,\n+                        \"atomic stores cannot have `Acquire` and `AcqRel` ordering\",\n+                        \"consider using ordering modes `Release`, `SeqCst` or `Relaxed`\"\n+                    );\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "6846730a41561ce5b476c0060b073315108d79c4", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a86301fbfc42831abedf1bee872720efb93c52e3/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a86301fbfc42831abedf1bee872720efb93c52e3/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=a86301fbfc42831abedf1bee872720efb93c52e3", "patch": "@@ -165,6 +165,7 @@ pub mod arithmetic;\n pub mod as_conversions;\n pub mod assertions_on_constants;\n pub mod assign_ops;\n+pub mod atomic_ordering;\n pub mod attrs;\n pub mod bit_mask;\n pub mod blacklisted_name;\n@@ -466,6 +467,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         &assertions_on_constants::ASSERTIONS_ON_CONSTANTS,\n         &assign_ops::ASSIGN_OP_PATTERN,\n         &assign_ops::MISREFACTORED_ASSIGN_OP,\n+        &atomic_ordering::INVALID_ATOMIC_ORDERING,\n         &attrs::DEPRECATED_CFG_ATTR,\n         &attrs::DEPRECATED_SEMVER,\n         &attrs::EMPTY_LINE_AFTER_OUTER_ATTR,\n@@ -984,6 +986,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n     store.register_early_pass(|| box as_conversions::AsConversions);\n     store.register_early_pass(|| box utils::internal_lints::ProduceIce);\n     store.register_late_pass(|| box let_underscore::LetUnderscore);\n+    store.register_late_pass(|| box atomic_ordering::AtomicOrdering);\n \n     store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         LintId::of(&arithmetic::FLOAT_ARITHMETIC),\n@@ -1089,6 +1092,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         LintId::of(&assertions_on_constants::ASSERTIONS_ON_CONSTANTS),\n         LintId::of(&assign_ops::ASSIGN_OP_PATTERN),\n         LintId::of(&assign_ops::MISREFACTORED_ASSIGN_OP),\n+        LintId::of(&atomic_ordering::INVALID_ATOMIC_ORDERING),\n         LintId::of(&attrs::DEPRECATED_CFG_ATTR),\n         LintId::of(&attrs::DEPRECATED_SEMVER),\n         LintId::of(&attrs::UNKNOWN_CLIPPY_LINTS),\n@@ -1509,6 +1513,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n \n     store.register_group(true, \"clippy::correctness\", Some(\"clippy_correctness\"), vec![\n         LintId::of(&approx_const::APPROX_CONSTANT),\n+        LintId::of(&atomic_ordering::INVALID_ATOMIC_ORDERING),\n         LintId::of(&attrs::DEPRECATED_SEMVER),\n         LintId::of(&attrs::USELESS_ATTRIBUTE),\n         LintId::of(&bit_mask::BAD_BIT_MASK),"}, {"sha": "e079fead5720b0c7536b82cd581011251eeadebd", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a86301fbfc42831abedf1bee872720efb93c52e3/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a86301fbfc42831abedf1bee872720efb93c52e3/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=a86301fbfc42831abedf1bee872720efb93c52e3", "patch": "@@ -6,7 +6,7 @@ pub use lint::Lint;\n pub use lint::LINT_LEVELS;\n \n // begin lint list, do not remove this comment, it\u2019s used in `update_lints`\n-pub const ALL_LINTS: [Lint; 344] = [\n+pub const ALL_LINTS: [Lint; 345] = [\n     Lint {\n         name: \"absurd_extreme_comparisons\",\n         group: \"correctness\",\n@@ -833,6 +833,13 @@ pub const ALL_LINTS: [Lint; 344] = [\n         deprecation: None,\n         module: \"methods\",\n     },\n+    Lint {\n+        name: \"invalid_atomic_ordering\",\n+        group: \"correctness\",\n+        desc: \"usage of invalid atomic ordering in atomic load/store calls\",\n+        deprecation: None,\n+        module: \"atomic_ordering\",\n+    },\n     Lint {\n         name: \"invalid_regex\",\n         group: \"correctness\","}, {"sha": "cdbde79b19ebf53f8db58975f6258a9bd13e6abc", "filename": "tests/ui/atomic_ordering_bool.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a86301fbfc42831abedf1bee872720efb93c52e3/tests%2Fui%2Fatomic_ordering_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a86301fbfc42831abedf1bee872720efb93c52e3/tests%2Fui%2Fatomic_ordering_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fatomic_ordering_bool.rs?ref=a86301fbfc42831abedf1bee872720efb93c52e3", "patch": "@@ -0,0 +1,25 @@\n+#![warn(clippy::invalid_atomic_ordering)]\n+\n+use std::sync::atomic::{AtomicBool, Ordering};\n+\n+fn main() {\n+    let x = AtomicBool::new(true);\n+\n+    // Allowed load ordering modes\n+    let _ = x.load(Ordering::Acquire);\n+    let _ = x.load(Ordering::SeqCst);\n+    let _ = x.load(Ordering::Relaxed);\n+\n+    // Disallowed load ordering modes\n+    let _ = x.load(Ordering::Release);\n+    let _ = x.load(Ordering::AcqRel);\n+\n+    // Allowed store ordering modes\n+    x.store(false, Ordering::Release);\n+    x.store(false, Ordering::SeqCst);\n+    x.store(false, Ordering::Relaxed);\n+\n+    // Disallowed store ordering modes\n+    x.store(false, Ordering::Acquire);\n+    x.store(false, Ordering::AcqRel);\n+}"}, {"sha": "397b893aed96478901847e26a6b0ae032b57ca51", "filename": "tests/ui/atomic_ordering_bool.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/a86301fbfc42831abedf1bee872720efb93c52e3/tests%2Fui%2Fatomic_ordering_bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a86301fbfc42831abedf1bee872720efb93c52e3/tests%2Fui%2Fatomic_ordering_bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fatomic_ordering_bool.stderr?ref=a86301fbfc42831abedf1bee872720efb93c52e3", "patch": "@@ -0,0 +1,35 @@\n+error: atomic loads cannot have `Release` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_bool.rs:14:20\n+   |\n+LL |     let _ = x.load(Ordering::Release);\n+   |                    ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::invalid-atomic-ordering` implied by `-D warnings`\n+   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n+\n+error: atomic loads cannot have `Release` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_bool.rs:15:20\n+   |\n+LL |     let _ = x.load(Ordering::AcqRel);\n+   |                    ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n+\n+error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_bool.rs:23:20\n+   |\n+LL |     x.store(false, Ordering::Acquire);\n+   |                    ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n+\n+error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_bool.rs:24:20\n+   |\n+LL |     x.store(false, Ordering::AcqRel);\n+   |                    ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "40a00ba3de3505435770d984a270a36bd98d88ae", "filename": "tests/ui/atomic_ordering_int.rs", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/a86301fbfc42831abedf1bee872720efb93c52e3/tests%2Fui%2Fatomic_ordering_int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a86301fbfc42831abedf1bee872720efb93c52e3/tests%2Fui%2Fatomic_ordering_int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fatomic_ordering_int.rs?ref=a86301fbfc42831abedf1bee872720efb93c52e3", "patch": "@@ -0,0 +1,86 @@\n+#![warn(clippy::invalid_atomic_ordering)]\n+\n+use std::sync::atomic::{AtomicI16, AtomicI32, AtomicI64, AtomicI8, AtomicIsize, Ordering};\n+\n+fn main() {\n+    // `AtomicI8` test cases\n+    let x = AtomicI8::new(0);\n+\n+    // Allowed load ordering modes\n+    let _ = x.load(Ordering::Acquire);\n+    let _ = x.load(Ordering::SeqCst);\n+    let _ = x.load(Ordering::Relaxed);\n+\n+    // Disallowed load ordering modes\n+    let _ = x.load(Ordering::Release);\n+    let _ = x.load(Ordering::AcqRel);\n+\n+    // Allowed store ordering modes\n+    x.store(1, Ordering::Release);\n+    x.store(1, Ordering::SeqCst);\n+    x.store(1, Ordering::Relaxed);\n+\n+    // Disallowed store ordering modes\n+    x.store(1, Ordering::Acquire);\n+    x.store(1, Ordering::AcqRel);\n+\n+    // `AtomicI16` test cases\n+    let x = AtomicI16::new(0);\n+\n+    let _ = x.load(Ordering::Acquire);\n+    let _ = x.load(Ordering::SeqCst);\n+    let _ = x.load(Ordering::Relaxed);\n+    let _ = x.load(Ordering::Release);\n+    let _ = x.load(Ordering::AcqRel);\n+\n+    x.store(1, Ordering::Release);\n+    x.store(1, Ordering::SeqCst);\n+    x.store(1, Ordering::Relaxed);\n+    x.store(1, Ordering::Acquire);\n+    x.store(1, Ordering::AcqRel);\n+\n+    // `AtomicI32` test cases\n+    let x = AtomicI32::new(0);\n+\n+    let _ = x.load(Ordering::Acquire);\n+    let _ = x.load(Ordering::SeqCst);\n+    let _ = x.load(Ordering::Relaxed);\n+    let _ = x.load(Ordering::Release);\n+    let _ = x.load(Ordering::AcqRel);\n+\n+    x.store(1, Ordering::Release);\n+    x.store(1, Ordering::SeqCst);\n+    x.store(1, Ordering::Relaxed);\n+    x.store(1, Ordering::Acquire);\n+    x.store(1, Ordering::AcqRel);\n+\n+    // `AtomicI64` test cases\n+    let x = AtomicI64::new(0);\n+\n+    let _ = x.load(Ordering::Acquire);\n+    let _ = x.load(Ordering::SeqCst);\n+    let _ = x.load(Ordering::Relaxed);\n+    let _ = x.load(Ordering::Release);\n+    let _ = x.load(Ordering::AcqRel);\n+\n+    x.store(1, Ordering::Release);\n+    x.store(1, Ordering::SeqCst);\n+    x.store(1, Ordering::Relaxed);\n+    x.store(1, Ordering::Acquire);\n+    x.store(1, Ordering::AcqRel);\n+\n+    // `AtomicIsize` test cases\n+    let x = AtomicIsize::new(0);\n+\n+    let _ = x.load(Ordering::Acquire);\n+    let _ = x.load(Ordering::SeqCst);\n+    let _ = x.load(Ordering::Relaxed);\n+    let _ = x.load(Ordering::Release);\n+    let _ = x.load(Ordering::AcqRel);\n+\n+    x.store(1, Ordering::Release);\n+    x.store(1, Ordering::SeqCst);\n+    x.store(1, Ordering::Relaxed);\n+    x.store(1, Ordering::Acquire);\n+    x.store(1, Ordering::AcqRel);\n+}"}, {"sha": "bbaf234d3c9f8d0ef3d5ba2a828d9bb05d2af2fb", "filename": "tests/ui/atomic_ordering_int.stderr", "status": "added", "additions": 163, "deletions": 0, "changes": 163, "blob_url": "https://github.com/rust-lang/rust/blob/a86301fbfc42831abedf1bee872720efb93c52e3/tests%2Fui%2Fatomic_ordering_int.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a86301fbfc42831abedf1bee872720efb93c52e3/tests%2Fui%2Fatomic_ordering_int.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fatomic_ordering_int.stderr?ref=a86301fbfc42831abedf1bee872720efb93c52e3", "patch": "@@ -0,0 +1,163 @@\n+error: atomic loads cannot have `Release` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_int.rs:15:20\n+   |\n+LL |     let _ = x.load(Ordering::Release);\n+   |                    ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::invalid-atomic-ordering` implied by `-D warnings`\n+   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n+\n+error: atomic loads cannot have `Release` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_int.rs:16:20\n+   |\n+LL |     let _ = x.load(Ordering::AcqRel);\n+   |                    ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n+\n+error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_int.rs:24:16\n+   |\n+LL |     x.store(1, Ordering::Acquire);\n+   |                ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n+\n+error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_int.rs:25:16\n+   |\n+LL |     x.store(1, Ordering::AcqRel);\n+   |                ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n+\n+error: atomic loads cannot have `Release` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_int.rs:33:20\n+   |\n+LL |     let _ = x.load(Ordering::Release);\n+   |                    ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n+\n+error: atomic loads cannot have `Release` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_int.rs:34:20\n+   |\n+LL |     let _ = x.load(Ordering::AcqRel);\n+   |                    ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n+\n+error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_int.rs:39:16\n+   |\n+LL |     x.store(1, Ordering::Acquire);\n+   |                ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n+\n+error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_int.rs:40:16\n+   |\n+LL |     x.store(1, Ordering::AcqRel);\n+   |                ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n+\n+error: atomic loads cannot have `Release` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_int.rs:48:20\n+   |\n+LL |     let _ = x.load(Ordering::Release);\n+   |                    ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n+\n+error: atomic loads cannot have `Release` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_int.rs:49:20\n+   |\n+LL |     let _ = x.load(Ordering::AcqRel);\n+   |                    ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n+\n+error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_int.rs:54:16\n+   |\n+LL |     x.store(1, Ordering::Acquire);\n+   |                ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n+\n+error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_int.rs:55:16\n+   |\n+LL |     x.store(1, Ordering::AcqRel);\n+   |                ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n+\n+error: atomic loads cannot have `Release` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_int.rs:63:20\n+   |\n+LL |     let _ = x.load(Ordering::Release);\n+   |                    ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n+\n+error: atomic loads cannot have `Release` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_int.rs:64:20\n+   |\n+LL |     let _ = x.load(Ordering::AcqRel);\n+   |                    ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n+\n+error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_int.rs:69:16\n+   |\n+LL |     x.store(1, Ordering::Acquire);\n+   |                ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n+\n+error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_int.rs:70:16\n+   |\n+LL |     x.store(1, Ordering::AcqRel);\n+   |                ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n+\n+error: atomic loads cannot have `Release` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_int.rs:78:20\n+   |\n+LL |     let _ = x.load(Ordering::Release);\n+   |                    ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n+\n+error: atomic loads cannot have `Release` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_int.rs:79:20\n+   |\n+LL |     let _ = x.load(Ordering::AcqRel);\n+   |                    ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n+\n+error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_int.rs:84:16\n+   |\n+LL |     x.store(1, Ordering::Acquire);\n+   |                ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n+\n+error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_int.rs:85:16\n+   |\n+LL |     x.store(1, Ordering::AcqRel);\n+   |                ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n+\n+error: aborting due to 20 previous errors\n+"}, {"sha": "ecbb05c7fbc39508e993bc56b5822fbedf5f03d8", "filename": "tests/ui/atomic_ordering_ptr.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a86301fbfc42831abedf1bee872720efb93c52e3/tests%2Fui%2Fatomic_ordering_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a86301fbfc42831abedf1bee872720efb93c52e3/tests%2Fui%2Fatomic_ordering_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fatomic_ordering_ptr.rs?ref=a86301fbfc42831abedf1bee872720efb93c52e3", "patch": "@@ -0,0 +1,27 @@\n+#![warn(clippy::invalid_atomic_ordering)]\n+\n+use std::sync::atomic::{AtomicPtr, Ordering};\n+\n+fn main() {\n+    let ptr = &mut 5;\n+    let other_ptr = &mut 10;\n+    let x = AtomicPtr::new(ptr);\n+\n+    // Allowed load ordering modes\n+    let _ = x.load(Ordering::Acquire);\n+    let _ = x.load(Ordering::SeqCst);\n+    let _ = x.load(Ordering::Relaxed);\n+\n+    // Disallowed load ordering modes\n+    let _ = x.load(Ordering::Release);\n+    let _ = x.load(Ordering::AcqRel);\n+\n+    // Allowed store ordering modes\n+    x.store(other_ptr, Ordering::Release);\n+    x.store(other_ptr, Ordering::SeqCst);\n+    x.store(other_ptr, Ordering::Relaxed);\n+\n+    // Disallowed store ordering modes\n+    x.store(other_ptr, Ordering::Acquire);\n+    x.store(other_ptr, Ordering::AcqRel);\n+}"}, {"sha": "558ae55518d5a9e26e302a715d0976beeeb2593f", "filename": "tests/ui/atomic_ordering_ptr.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/a86301fbfc42831abedf1bee872720efb93c52e3/tests%2Fui%2Fatomic_ordering_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a86301fbfc42831abedf1bee872720efb93c52e3/tests%2Fui%2Fatomic_ordering_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fatomic_ordering_ptr.stderr?ref=a86301fbfc42831abedf1bee872720efb93c52e3", "patch": "@@ -0,0 +1,35 @@\n+error: atomic loads cannot have `Release` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_ptr.rs:16:20\n+   |\n+LL |     let _ = x.load(Ordering::Release);\n+   |                    ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::invalid-atomic-ordering` implied by `-D warnings`\n+   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n+\n+error: atomic loads cannot have `Release` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_ptr.rs:17:20\n+   |\n+LL |     let _ = x.load(Ordering::AcqRel);\n+   |                    ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n+\n+error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_ptr.rs:25:24\n+   |\n+LL |     x.store(other_ptr, Ordering::Acquire);\n+   |                        ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n+\n+error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_ptr.rs:26:24\n+   |\n+LL |     x.store(other_ptr, Ordering::AcqRel);\n+   |                        ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "a0d5d7c401035d686cd18a90617d5d7c81c28a1e", "filename": "tests/ui/atomic_ordering_uint.rs", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/a86301fbfc42831abedf1bee872720efb93c52e3/tests%2Fui%2Fatomic_ordering_uint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a86301fbfc42831abedf1bee872720efb93c52e3/tests%2Fui%2Fatomic_ordering_uint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fatomic_ordering_uint.rs?ref=a86301fbfc42831abedf1bee872720efb93c52e3", "patch": "@@ -0,0 +1,86 @@\n+#![warn(clippy::invalid_atomic_ordering)]\n+\n+use std::sync::atomic::{AtomicU16, AtomicU32, AtomicU64, AtomicU8, AtomicUsize, Ordering};\n+\n+fn main() {\n+    // `AtomicU8` test cases\n+    let x = AtomicU8::new(0);\n+\n+    // Allowed load ordering modes\n+    let _ = x.load(Ordering::Acquire);\n+    let _ = x.load(Ordering::SeqCst);\n+    let _ = x.load(Ordering::Relaxed);\n+\n+    // Disallowed load ordering modes\n+    let _ = x.load(Ordering::Release);\n+    let _ = x.load(Ordering::AcqRel);\n+\n+    // Allowed store ordering modes\n+    x.store(1, Ordering::Release);\n+    x.store(1, Ordering::SeqCst);\n+    x.store(1, Ordering::Relaxed);\n+\n+    // Disallowed store ordering modes\n+    x.store(1, Ordering::Acquire);\n+    x.store(1, Ordering::AcqRel);\n+\n+    // `AtomicU16` test cases\n+    let x = AtomicU16::new(0);\n+\n+    let _ = x.load(Ordering::Acquire);\n+    let _ = x.load(Ordering::SeqCst);\n+    let _ = x.load(Ordering::Relaxed);\n+    let _ = x.load(Ordering::Release);\n+    let _ = x.load(Ordering::AcqRel);\n+\n+    x.store(1, Ordering::Release);\n+    x.store(1, Ordering::SeqCst);\n+    x.store(1, Ordering::Relaxed);\n+    x.store(1, Ordering::Acquire);\n+    x.store(1, Ordering::AcqRel);\n+\n+    // `AtomicU32` test cases\n+    let x = AtomicU32::new(0);\n+\n+    let _ = x.load(Ordering::Acquire);\n+    let _ = x.load(Ordering::SeqCst);\n+    let _ = x.load(Ordering::Relaxed);\n+    let _ = x.load(Ordering::Release);\n+    let _ = x.load(Ordering::AcqRel);\n+\n+    x.store(1, Ordering::Release);\n+    x.store(1, Ordering::SeqCst);\n+    x.store(1, Ordering::Relaxed);\n+    x.store(1, Ordering::Acquire);\n+    x.store(1, Ordering::AcqRel);\n+\n+    // `AtomicU64` test cases\n+    let x = AtomicU64::new(0);\n+\n+    let _ = x.load(Ordering::Acquire);\n+    let _ = x.load(Ordering::SeqCst);\n+    let _ = x.load(Ordering::Relaxed);\n+    let _ = x.load(Ordering::Release);\n+    let _ = x.load(Ordering::AcqRel);\n+\n+    x.store(1, Ordering::Release);\n+    x.store(1, Ordering::SeqCst);\n+    x.store(1, Ordering::Relaxed);\n+    x.store(1, Ordering::Acquire);\n+    x.store(1, Ordering::AcqRel);\n+\n+    // `AtomicUsize` test cases\n+    let x = AtomicUsize::new(0);\n+\n+    let _ = x.load(Ordering::Acquire);\n+    let _ = x.load(Ordering::SeqCst);\n+    let _ = x.load(Ordering::Relaxed);\n+    let _ = x.load(Ordering::Release);\n+    let _ = x.load(Ordering::AcqRel);\n+\n+    x.store(1, Ordering::Release);\n+    x.store(1, Ordering::SeqCst);\n+    x.store(1, Ordering::Relaxed);\n+    x.store(1, Ordering::Acquire);\n+    x.store(1, Ordering::AcqRel);\n+}"}, {"sha": "5703135bcf1e2a4bb613eba2bfa984f7002ae9b0", "filename": "tests/ui/atomic_ordering_uint.stderr", "status": "added", "additions": 163, "deletions": 0, "changes": 163, "blob_url": "https://github.com/rust-lang/rust/blob/a86301fbfc42831abedf1bee872720efb93c52e3/tests%2Fui%2Fatomic_ordering_uint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a86301fbfc42831abedf1bee872720efb93c52e3/tests%2Fui%2Fatomic_ordering_uint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fatomic_ordering_uint.stderr?ref=a86301fbfc42831abedf1bee872720efb93c52e3", "patch": "@@ -0,0 +1,163 @@\n+error: atomic loads cannot have `Release` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_uint.rs:15:20\n+   |\n+LL |     let _ = x.load(Ordering::Release);\n+   |                    ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::invalid-atomic-ordering` implied by `-D warnings`\n+   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n+\n+error: atomic loads cannot have `Release` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_uint.rs:16:20\n+   |\n+LL |     let _ = x.load(Ordering::AcqRel);\n+   |                    ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n+\n+error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_uint.rs:24:16\n+   |\n+LL |     x.store(1, Ordering::Acquire);\n+   |                ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n+\n+error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_uint.rs:25:16\n+   |\n+LL |     x.store(1, Ordering::AcqRel);\n+   |                ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n+\n+error: atomic loads cannot have `Release` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_uint.rs:33:20\n+   |\n+LL |     let _ = x.load(Ordering::Release);\n+   |                    ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n+\n+error: atomic loads cannot have `Release` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_uint.rs:34:20\n+   |\n+LL |     let _ = x.load(Ordering::AcqRel);\n+   |                    ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n+\n+error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_uint.rs:39:16\n+   |\n+LL |     x.store(1, Ordering::Acquire);\n+   |                ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n+\n+error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_uint.rs:40:16\n+   |\n+LL |     x.store(1, Ordering::AcqRel);\n+   |                ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n+\n+error: atomic loads cannot have `Release` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_uint.rs:48:20\n+   |\n+LL |     let _ = x.load(Ordering::Release);\n+   |                    ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n+\n+error: atomic loads cannot have `Release` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_uint.rs:49:20\n+   |\n+LL |     let _ = x.load(Ordering::AcqRel);\n+   |                    ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n+\n+error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_uint.rs:54:16\n+   |\n+LL |     x.store(1, Ordering::Acquire);\n+   |                ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n+\n+error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_uint.rs:55:16\n+   |\n+LL |     x.store(1, Ordering::AcqRel);\n+   |                ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n+\n+error: atomic loads cannot have `Release` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_uint.rs:63:20\n+   |\n+LL |     let _ = x.load(Ordering::Release);\n+   |                    ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n+\n+error: atomic loads cannot have `Release` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_uint.rs:64:20\n+   |\n+LL |     let _ = x.load(Ordering::AcqRel);\n+   |                    ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n+\n+error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_uint.rs:69:16\n+   |\n+LL |     x.store(1, Ordering::Acquire);\n+   |                ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n+\n+error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_uint.rs:70:16\n+   |\n+LL |     x.store(1, Ordering::AcqRel);\n+   |                ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n+\n+error: atomic loads cannot have `Release` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_uint.rs:78:20\n+   |\n+LL |     let _ = x.load(Ordering::Release);\n+   |                    ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n+\n+error: atomic loads cannot have `Release` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_uint.rs:79:20\n+   |\n+LL |     let _ = x.load(Ordering::AcqRel);\n+   |                    ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n+\n+error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_uint.rs:84:16\n+   |\n+LL |     x.store(1, Ordering::Acquire);\n+   |                ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n+\n+error: atomic stores cannot have `Acquire` and `AcqRel` ordering\n+  --> $DIR/atomic_ordering_uint.rs:85:16\n+   |\n+LL |     x.store(1, Ordering::AcqRel);\n+   |                ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n+\n+error: aborting due to 20 previous errors\n+"}]}