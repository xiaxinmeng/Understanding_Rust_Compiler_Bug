{"sha": "270c94e484e19764a2832ef918c95224eb3f17c7", "node_id": "C_kwDOAAsO6NoAKDI3MGM5NGU0ODRlMTk3NjRhMjgzMmVmOTE4Yzk1MjI0ZWIzZjE3Yzc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-28T17:00:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-28T17:00:00Z"}, "message": "Auto merge of #106215 - matthiaskrgr:rollup-53r89ww, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #106028 (docs/test: add UI test and long-form error docs for `E0461`)\n - #106172 (Suggest `impl Iterator` when possible for `_` return type)\n - #106173 (Deduplicate `op` methods)\n - #106176 (Recover `fn` keyword as `Fn` trait in bounds)\n - #106194 (rustdoc: combine common sidebar background color CSS rules)\n - #106199 (Silence knock-down errors on `[type error]` bindings)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "8806a01d1ba3dd96bcee4cc7a6eb780b850a12fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8806a01d1ba3dd96bcee4cc7a6eb780b850a12fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/270c94e484e19764a2832ef918c95224eb3f17c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/270c94e484e19764a2832ef918c95224eb3f17c7", "html_url": "https://github.com/rust-lang/rust/commit/270c94e484e19764a2832ef918c95224eb3f17c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/270c94e484e19764a2832ef918c95224eb3f17c7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83a28ef095ba4179a63196f16eadd97f110d6cb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/83a28ef095ba4179a63196f16eadd97f110d6cb3", "html_url": "https://github.com/rust-lang/rust/commit/83a28ef095ba4179a63196f16eadd97f110d6cb3"}, {"sha": "d37cb3ff8935a9d28aa2fdcba2b464bbda96213d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d37cb3ff8935a9d28aa2fdcba2b464bbda96213d", "html_url": "https://github.com/rust-lang/rust/commit/d37cb3ff8935a9d28aa2fdcba2b464bbda96213d"}], "stats": {"total": 895, "additions": 500, "deletions": 395}, "files": [{"sha": "e6d26240e242e64f9291651e48850a6599825b9f", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270c94e484e19764a2832ef918c95224eb3f17c7/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270c94e484e19764a2832ef918c95224eb3f17c7/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=270c94e484e19764a2832ef918c95224eb3f17c7", "patch": "@@ -244,6 +244,7 @@ E0457: include_str!(\"./error_codes/E0457.md\"),\n E0458: include_str!(\"./error_codes/E0458.md\"),\n E0459: include_str!(\"./error_codes/E0459.md\"),\n E0460: include_str!(\"./error_codes/E0460.md\"),\n+E0461: include_str!(\"./error_codes/E0461.md\"),\n E0462: include_str!(\"./error_codes/E0462.md\"),\n E0463: include_str!(\"./error_codes/E0463.md\"),\n E0464: include_str!(\"./error_codes/E0464.md\"),\n@@ -595,7 +596,6 @@ E0791: include_str!(\"./error_codes/E0791.md\"),\n //  E0421, // merged into 531\n //  E0427, // merged into 530\n //  E0456, // plugin `..` is not available for triple `..`\n-    E0461, // couldn't find crate `..` with expected target triple ..\n     E0465, // multiple .. candidates for `..` found\n //  E0467, // removed\n //  E0470, // removed"}, {"sha": "33105c43ccfe7391c48424c4ed6b387370141c7e", "filename": "compiler/rustc_error_codes/src/error_codes/E0461.md", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/270c94e484e19764a2832ef918c95224eb3f17c7/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0461.md", "raw_url": "https://github.com/rust-lang/rust/raw/270c94e484e19764a2832ef918c95224eb3f17c7/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0461.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0461.md?ref=270c94e484e19764a2832ef918c95224eb3f17c7", "patch": "@@ -0,0 +1,30 @@\n+Couldn't find crate `..` with expected target triple `..`.\n+\n+Example of erroneous code:\n+\n+`a.rs`\n+```ignore (cannot-link-with-other-tests)\n+#![crate_type = \"lib\"]\n+\n+fn foo() {}\n+```\n+\n+`main.rs`\n+```ignore (cannot-link-with-other-tests)\n+extern crate a;\n+\n+fn main() {\n+    a::foo();\n+}\n+```\n+\n+`a.rs` is then compiled with `--target powerpc-unknown-linux-gnu` and `b.rs`\n+with `--target x86_64-unknown-linux-gnu`. `a.rs` is compiled into a binary\n+format incompatible with `b.rs`; PowerPC and x86 are totally different\n+architectures. This issue also extends to any difference in target triples, as\n+`std` is operating-system specific.\n+\n+This error can be fixed by:\n+ * Using [Cargo](../cargo/index.html), the Rust package manager, automatically\n+   fixing this issue.\n+ * Recompiling either crate so that they target a consistent target triple."}, {"sha": "3401978caf5f0f305b0f6128baf0ac79c6f73784", "filename": "compiler/rustc_error_messages/locales/en-US/parse.ftl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/270c94e484e19764a2832ef918c95224eb3f17c7/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparse.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/270c94e484e19764a2832ef918c95224eb3f17c7/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparse.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparse.ftl?ref=270c94e484e19764a2832ef918c95224eb3f17c7", "patch": "@@ -365,3 +365,6 @@ parse_invalid_identifier_with_leading_number = expected identifier, found number\n \n parse_maybe_fn_typo_with_impl = you might have meant to write `impl` instead of `fn`\n     .suggestion = replace `fn` with `impl` here\n+\n+parse_expected_fn_path_found_fn_keyword = expected identifier, found keyword `fn`\n+    .suggestion = use `Fn` to refer to the trait"}, {"sha": "406e1569a6f753e89edc1768e513429b14195262", "filename": "compiler/rustc_expand/src/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270c94e484e19764a2832ef918c95224eb3f17c7/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270c94e484e19764a2832ef918c95224eb3f17c7/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs?ref=270c94e484e19764a2832ef918c95224eb3f17c7", "patch": "@@ -626,7 +626,7 @@ impl<'a> ExtCtxt<'a> {\n \n     // Builds `#[name = val]`.\n     //\n-    // Note: `span` is used for both the identifer and the value.\n+    // Note: `span` is used for both the identifier and the value.\n     pub fn attr_name_value_str(&self, name: Symbol, val: Symbol, span: Span) -> ast::Attribute {\n         let g = &self.sess.parse_sess.attr_id_generator;\n         attr::mk_attr_name_value_str(g, ast::AttrStyle::Outer, name, val, span)"}, {"sha": "9e46968c408197fff3b87b99809ec66fc05d0a28", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 60, "deletions": 1, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/270c94e484e19764a2832ef918c95224eb3f17c7/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270c94e484e19764a2832ef918c95224eb3f17c7/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=270c94e484e19764a2832ef918c95224eb3f17c7", "patch": "@@ -24,14 +24,18 @@ use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{GenericParamKind, Node};\n+use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n+use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::util::{Discr, IntTypeExt};\n use rustc_middle::ty::{self, AdtKind, Const, IsSuggestable, ToPredicate, Ty, TyCtxt};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::Span;\n use rustc_target::spec::abi;\n+use rustc_trait_selection::infer::InferCtxtExt;\n use rustc_trait_selection::traits::error_reporting::suggestions::NextTypeParamName;\n+use rustc_trait_selection::traits::ObligationCtxt;\n use std::iter;\n \n mod generics_of;\n@@ -1224,7 +1228,17 @@ fn infer_return_ty_for_fn_sig<'tcx>(\n                 // to prevent the user from getting a papercut while trying to use the unique closure\n                 // syntax (e.g. `[closure@src/lib.rs:2:5: 2:9]`).\n                 diag.help(\"consider using an `Fn`, `FnMut`, or `FnOnce` trait bound\");\n-                diag.note(\"for more information on `Fn` traits and closure types, see https://doc.rust-lang.org/book/ch13-01-closures.html\");\n+                diag.note(\n+                    \"for more information on `Fn` traits and closure types, see \\\n+                     https://doc.rust-lang.org/book/ch13-01-closures.html\",\n+                );\n+            } else if let Some(i_ty) = suggest_impl_iterator(tcx, ret_ty, ty.span, hir_id, def_id) {\n+                diag.span_suggestion(\n+                    ty.span,\n+                    \"replace with an appropriate return type\",\n+                    format!(\"impl Iterator<Item = {}>\", i_ty),\n+                    Applicability::MachineApplicable,\n+                );\n             }\n             diag.emit();\n \n@@ -1242,6 +1256,51 @@ fn infer_return_ty_for_fn_sig<'tcx>(\n     }\n }\n \n+fn suggest_impl_iterator<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    ret_ty: Ty<'tcx>,\n+    span: Span,\n+    hir_id: hir::HirId,\n+    def_id: LocalDefId,\n+) -> Option<Ty<'tcx>> {\n+    let Some(iter_trait) = tcx.get_diagnostic_item(sym::Iterator) else { return None; };\n+    let Some(iterator_item) = tcx.get_diagnostic_item(sym::IteratorItem) else { return None; };\n+    if !tcx\n+        .infer_ctxt()\n+        .build()\n+        .type_implements_trait(iter_trait, [ret_ty], tcx.param_env(def_id))\n+        .must_apply_modulo_regions()\n+    {\n+        return None;\n+    }\n+    let infcx = tcx.infer_ctxt().build();\n+    let ocx = ObligationCtxt::new_in_snapshot(&infcx);\n+    // Find the type of `Iterator::Item`.\n+    let origin = TypeVariableOrigin { kind: TypeVariableOriginKind::TypeInference, span };\n+    let ty_var = infcx.next_ty_var(origin);\n+    let projection = ty::Binder::dummy(ty::PredicateKind::Clause(ty::Clause::Projection(\n+        ty::ProjectionPredicate {\n+            projection_ty: tcx.mk_alias_ty(iterator_item, tcx.mk_substs([ret_ty.into()].iter())),\n+            term: ty_var.into(),\n+        },\n+    )));\n+    // Add `<ret_ty as Iterator>::Item = _` obligation.\n+    ocx.register_obligation(crate::traits::Obligation::misc(\n+        tcx,\n+        span,\n+        hir_id,\n+        tcx.param_env(def_id),\n+        projection,\n+    ));\n+    if ocx.select_where_possible().is_empty()\n+        && let item_ty = infcx.resolve_vars_if_possible(ty_var)\n+        && item_ty.is_suggestable(tcx, false)\n+    {\n+        return Some(item_ty);\n+    }\n+    None\n+}\n+\n fn impl_trait_ref(tcx: TyCtxt<'_>, def_id: DefId) -> Option<ty::TraitRef<'_>> {\n     let icx = ItemCtxt::new(tcx, def_id);\n     let item = tcx.hir().expect_item(def_id.expect_local());"}, {"sha": "4bd55a5483147e6c3709f91239dbf31a132c7790", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/270c94e484e19764a2832ef918c95224eb3f17c7/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270c94e484e19764a2832ef918c95224eb3f17c7/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=270c94e484e19764a2832ef918c95224eb3f17c7", "patch": "@@ -5,6 +5,7 @@ use rustc_hir::intravisit;\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::{HirId, Node};\n use rustc_middle::hir::nested_filter;\n+use rustc_middle::ty::print::with_forced_trimmed_paths;\n use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::util::IntTypeExt;\n use rustc_middle::ty::{self, DefIdTree, Ty, TyCtxt, TypeFolder, TypeSuperFoldable, TypeVisitable};\n@@ -907,10 +908,10 @@ fn infer_placeholder_type<'a>(\n                         Applicability::MachineApplicable,\n                     );\n                 } else {\n-                    err.span_note(\n+                    with_forced_trimmed_paths!(err.span_note(\n                         tcx.hir().body(body_id).value.span,\n-                        &format!(\"however, the inferred type `{}` cannot be named\", ty),\n-                    );\n+                        &format!(\"however, the inferred type `{ty}` cannot be named\"),\n+                    ));\n                 }\n             }\n \n@@ -931,10 +932,10 @@ fn infer_placeholder_type<'a>(\n                         Applicability::MaybeIncorrect,\n                     );\n                 } else {\n-                    diag.span_note(\n+                    with_forced_trimmed_paths!(diag.span_note(\n                         tcx.hir().body(body_id).value.span,\n-                        &format!(\"however, the inferred type `{}` cannot be named\", ty),\n-                    );\n+                        &format!(\"however, the inferred type `{ty}` cannot be named\"),\n+                    ));\n                 }\n             }\n "}, {"sha": "829913d278d06233d4c6997da67f003b2f586fb0", "filename": "compiler/rustc_hir_typeck/src/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270c94e484e19764a2832ef918c95224eb3f17c7/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270c94e484e19764a2832ef918c95224eb3f17c7/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs?ref=270c94e484e19764a2832ef918c95224eb3f17c7", "patch": "@@ -241,7 +241,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             });\n \n             if let Some(ok) = self.lookup_method_in_trait(\n-                call_expr.span,\n+                self.misc(call_expr.span),\n                 method_name,\n                 trait_def_id,\n                 adjusted_ty,"}, {"sha": "d342d96a10fad74a3dd8feb6ff80eda3f74ba0e6", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/270c94e484e19764a2832ef918c95224eb3f17c7/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270c94e484e19764a2832ef918c95224eb3f17c7/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=270c94e484e19764a2832ef918c95224eb3f17c7", "patch": "@@ -1307,7 +1307,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // Type check the initializer.\n         if let Some(ref init) = decl.init {\n             let init_ty = self.check_decl_initializer(decl.hir_id, decl.pat, &init);\n-            self.overwrite_local_ty_if_err(decl.hir_id, decl.pat, decl_ty, init_ty);\n+            self.overwrite_local_ty_if_err(decl.hir_id, decl.pat, init_ty);\n         }\n \n         // Does the expected pattern type originate from an expression and what is the span?\n@@ -1322,7 +1322,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // Type check the pattern. Override if necessary to avoid knock-on errors.\n         self.check_pat_top(&decl.pat, decl_ty, ty_span, origin_expr);\n         let pat_ty = self.node_ty(decl.pat.hir_id);\n-        self.overwrite_local_ty_if_err(decl.hir_id, decl.pat, decl_ty, pat_ty);\n+        self.overwrite_local_ty_if_err(decl.hir_id, decl.pat, pat_ty);\n \n         if let Some(blk) = decl.els {\n             let previous_diverges = self.diverges.get();\n@@ -1627,14 +1627,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         hir_id: hir::HirId,\n         pat: &'tcx hir::Pat<'tcx>,\n-        decl_ty: Ty<'tcx>,\n         ty: Ty<'tcx>,\n     ) {\n         if ty.references_error() {\n             // Override the types everywhere with `err()` to avoid knock on errors.\n-            self.write_ty(hir_id, ty);\n-            self.write_ty(pat.hir_id, ty);\n-            let local_ty = LocalTy { decl_ty, revealed_ty: ty };\n+            let err = self.tcx.ty_error();\n+            self.write_ty(hir_id, err);\n+            self.write_ty(pat.hir_id, err);\n+            let local_ty = LocalTy { decl_ty: err, revealed_ty: err };\n             self.locals.borrow_mut().insert(hir_id, local_ty);\n             self.locals.borrow_mut().insert(pat.hir_id, local_ty);\n         }"}, {"sha": "b9b27e8627aff7024bd75538500b368ee1e93280", "filename": "compiler/rustc_hir_typeck/src/method/mod.rs", "status": "modified", "additions": 18, "deletions": 122, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/270c94e484e19764a2832ef918c95224eb3f17c7/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270c94e484e19764a2832ef918c95224eb3f17c7/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs?ref=270c94e484e19764a2832ef918c95224eb3f17c7", "patch": "@@ -11,7 +11,7 @@ pub use self::suggest::SelfSource;\n pub use self::MethodError::*;\n \n use crate::errors::OpMethodGenericParams;\n-use crate::{Expectation, FnCtxt};\n+use crate::FnCtxt;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{Applicability, Diagnostic};\n use rustc_hir as hir;\n@@ -264,7 +264,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     pub(super) fn obligation_for_method(\n         &self,\n-        span: Span,\n+        cause: ObligationCause<'tcx>,\n         trait_def_id: DefId,\n         self_ty: Ty<'tcx>,\n         opt_input_types: Option<&[Ty<'tcx>]>,\n@@ -282,71 +282,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                 }\n             }\n-            self.var_for_def(span, param)\n-        });\n-\n-        let trait_ref = self.tcx.mk_trait_ref(trait_def_id, substs);\n-\n-        // Construct an obligation\n-        let poly_trait_ref = ty::Binder::dummy(trait_ref);\n-        (\n-            traits::Obligation::misc(\n-                self.tcx,\n-                span,\n-                self.body_id,\n-                self.param_env,\n-                poly_trait_ref.without_const(),\n-            ),\n-            substs,\n-        )\n-    }\n-\n-    pub(super) fn obligation_for_op_method(\n-        &self,\n-        span: Span,\n-        trait_def_id: DefId,\n-        self_ty: Ty<'tcx>,\n-        opt_input_type: Option<Ty<'tcx>>,\n-        opt_input_expr: Option<&'tcx hir::Expr<'tcx>>,\n-        expected: Expectation<'tcx>,\n-    ) -> (traits::Obligation<'tcx, ty::Predicate<'tcx>>, &'tcx ty::List<ty::subst::GenericArg<'tcx>>)\n-    {\n-        // Construct a trait-reference `self_ty : Trait<input_tys>`\n-        let substs = InternalSubsts::for_item(self.tcx, trait_def_id, |param, _| {\n-            match param.kind {\n-                GenericParamDefKind::Lifetime | GenericParamDefKind::Const { .. } => {}\n-                GenericParamDefKind::Type { .. } => {\n-                    if param.index == 0 {\n-                        return self_ty.into();\n-                    } else if let Some(input_type) = opt_input_type {\n-                        return input_type.into();\n-                    }\n-                }\n-            }\n-            self.var_for_def(span, param)\n+            self.var_for_def(cause.span, param)\n         });\n \n         let trait_ref = self.tcx.mk_trait_ref(trait_def_id, substs);\n \n         // Construct an obligation\n         let poly_trait_ref = ty::Binder::dummy(trait_ref);\n-        let output_ty = expected.only_has_type(self).and_then(|ty| (!ty.needs_infer()).then(|| ty));\n-\n         (\n             traits::Obligation::new(\n                 self.tcx,\n-                traits::ObligationCause::new(\n-                    span,\n-                    self.body_id,\n-                    traits::BinOp {\n-                        rhs_span: opt_input_expr.map(|expr| expr.span),\n-                        is_lit: opt_input_expr\n-                            .map_or(false, |expr| matches!(expr.kind, hir::ExprKind::Lit(_))),\n-                        output_ty,\n-                    },\n-                ),\n+                cause,\n                 self.param_env,\n-                poly_trait_ref,\n+                poly_trait_ref.without_const(),\n             ),\n             substs,\n         )\n@@ -357,69 +305,29 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// In particular, it doesn't really do any probing: it simply constructs\n     /// an obligation for a particular trait with the given self type and checks\n     /// whether that trait is implemented.\n-    #[instrument(level = \"debug\", skip(self, span))]\n+    #[instrument(level = \"debug\", skip(self))]\n     pub(super) fn lookup_method_in_trait(\n         &self,\n-        span: Span,\n+        cause: ObligationCause<'tcx>,\n         m_name: Ident,\n         trait_def_id: DefId,\n         self_ty: Ty<'tcx>,\n         opt_input_types: Option<&[Ty<'tcx>]>,\n     ) -> Option<InferOk<'tcx, MethodCallee<'tcx>>> {\n         let (obligation, substs) =\n-            self.obligation_for_method(span, trait_def_id, self_ty, opt_input_types);\n-        self.construct_obligation_for_trait(\n-            span,\n-            m_name,\n-            trait_def_id,\n-            obligation,\n-            substs,\n-            None,\n-            false,\n-        )\n-    }\n-\n-    pub(super) fn lookup_op_method_in_trait(\n-        &self,\n-        span: Span,\n-        m_name: Ident,\n-        trait_def_id: DefId,\n-        self_ty: Ty<'tcx>,\n-        opt_input_type: Option<Ty<'tcx>>,\n-        opt_input_expr: Option<&'tcx hir::Expr<'tcx>>,\n-        expected: Expectation<'tcx>,\n-    ) -> Option<InferOk<'tcx, MethodCallee<'tcx>>> {\n-        let (obligation, substs) = self.obligation_for_op_method(\n-            span,\n-            trait_def_id,\n-            self_ty,\n-            opt_input_type,\n-            opt_input_expr,\n-            expected,\n-        );\n-        self.construct_obligation_for_trait(\n-            span,\n-            m_name,\n-            trait_def_id,\n-            obligation,\n-            substs,\n-            opt_input_expr,\n-            true,\n-        )\n+            self.obligation_for_method(cause, trait_def_id, self_ty, opt_input_types);\n+        self.construct_obligation_for_trait(m_name, trait_def_id, obligation, substs)\n     }\n \n     // FIXME(#18741): it seems likely that we can consolidate some of this\n     // code with the other method-lookup code. In particular, the second half\n     // of this method is basically the same as confirmation.\n     fn construct_obligation_for_trait(\n         &self,\n-        span: Span,\n         m_name: Ident,\n         trait_def_id: DefId,\n         obligation: traits::PredicateObligation<'tcx>,\n         substs: &'tcx ty::List<ty::subst::GenericArg<'tcx>>,\n-        opt_input_expr: Option<&'tcx hir::Expr<'tcx>>,\n-        is_op: bool,\n     ) -> Option<InferOk<'tcx, MethodCallee<'tcx>>> {\n         debug!(?obligation);\n \n@@ -435,7 +343,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let tcx = self.tcx;\n         let Some(method_item) = self.associated_value(trait_def_id, m_name) else {\n             tcx.sess.delay_span_bug(\n-                span,\n+                obligation.cause.span,\n                 \"operator trait does not have corresponding operator method\",\n             );\n             return None;\n@@ -461,24 +369,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // with bound regions.\n         let fn_sig = tcx.bound_fn_sig(def_id);\n         let fn_sig = fn_sig.subst(self.tcx, substs);\n-        let fn_sig = self.replace_bound_vars_with_fresh_vars(span, infer::FnCall, fn_sig);\n-\n-        let cause = if is_op {\n-            ObligationCause::new(\n-                span,\n-                self.body_id,\n-                traits::BinOp {\n-                    rhs_span: opt_input_expr.map(|expr| expr.span),\n-                    is_lit: opt_input_expr\n-                        .map_or(false, |expr| matches!(expr.kind, hir::ExprKind::Lit(_))),\n-                    output_ty: None,\n-                },\n-            )\n-        } else {\n-            traits::ObligationCause::misc(span, self.body_id)\n-        };\n+        let fn_sig =\n+            self.replace_bound_vars_with_fresh_vars(obligation.cause.span, infer::FnCall, fn_sig);\n \n-        let InferOk { value, obligations: o } = self.at(&cause, self.param_env).normalize(fn_sig);\n+        let InferOk { value, obligations: o } =\n+            self.at(&obligation.cause, self.param_env).normalize(fn_sig);\n         let fn_sig = {\n             obligations.extend(o);\n             value\n@@ -494,15 +389,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // any late-bound regions appearing in its bounds.\n         let bounds = self.tcx.predicates_of(def_id).instantiate(self.tcx, substs);\n \n-        let InferOk { value, obligations: o } = self.at(&cause, self.param_env).normalize(bounds);\n+        let InferOk { value, obligations: o } =\n+            self.at(&obligation.cause, self.param_env).normalize(bounds);\n         let bounds = {\n             obligations.extend(o);\n             value\n         };\n \n         assert!(!bounds.has_escaping_bound_vars());\n \n-        let predicates_cause = cause.clone();\n+        let predicates_cause = obligation.cause.clone();\n         obligations.extend(traits::predicates_for_generics(\n             move |_, _| predicates_cause.clone(),\n             self.param_env,\n@@ -517,7 +413,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         );\n         obligations.push(traits::Obligation::new(\n             tcx,\n-            cause,\n+            obligation.cause,\n             self.param_env,\n             ty::Binder::dummy(ty::PredicateKind::WellFormed(method_ty.into())),\n         ));"}, {"sha": "34140f3e1fe3e535a0d4d82e5090e9e4e0511821", "filename": "compiler/rustc_hir_typeck/src/op.rs", "status": "modified", "additions": 31, "deletions": 34, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/270c94e484e19764a2832ef918c95224eb3f17c7/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270c94e484e19764a2832ef918c95224eb3f17c7/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs?ref=270c94e484e19764a2832ef918c95224eb3f17c7", "patch": "@@ -12,14 +12,16 @@ use rustc_middle::ty::adjustment::{\n     Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability,\n };\n use rustc_middle::ty::print::with_no_trimmed_paths;\n-use rustc_middle::ty::{self, DefIdTree, Ty, TyCtxt, TypeFolder, TypeSuperFoldable, TypeVisitable};\n+use rustc_middle::ty::{\n+    self, DefIdTree, IsSuggestable, Ty, TyCtxt, TypeFolder, TypeSuperFoldable, TypeVisitable,\n+};\n use rustc_session::errors::ExprParenthesesNeeded;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{sym, Ident};\n use rustc_span::Span;\n use rustc_trait_selection::infer::InferCtxtExt;\n use rustc_trait_selection::traits::error_reporting::suggestions::TypeErrCtxtExt as _;\n-use rustc_trait_selection::traits::FulfillmentError;\n+use rustc_trait_selection::traits::{self, FulfillmentError};\n use rustc_type_ir::sty::TyKind::*;\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n@@ -48,8 +50,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 if self\n                     .lookup_op_method(\n                         lhs_deref_ty,\n-                        Some(rhs_ty),\n-                        Some(rhs),\n+                        Some((rhs, rhs_ty)),\n                         Op::Binary(op, IsAssign::Yes),\n                         expected,\n                     )\n@@ -60,8 +61,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     if self\n                         .lookup_op_method(\n                             lhs_ty,\n-                            Some(rhs_ty),\n-                            Some(rhs),\n+                            Some((rhs, rhs_ty)),\n                             Op::Binary(op, IsAssign::Yes),\n                             expected,\n                         )\n@@ -248,8 +248,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let result = self.lookup_op_method(\n             lhs_ty,\n-            Some(rhs_ty_var),\n-            Some(rhs_expr),\n+            Some((rhs_expr, rhs_ty_var)),\n             Op::Binary(op, is_assign),\n             expected,\n         );\n@@ -382,8 +381,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     if self\n                         .lookup_op_method(\n                             lhs_deref_ty,\n-                            Some(rhs_ty),\n-                            Some(rhs_expr),\n+                            Some((rhs_expr, rhs_ty)),\n                             Op::Binary(op, is_assign),\n                             expected,\n                         )\n@@ -410,8 +408,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let is_compatible = |lhs_ty, rhs_ty| {\n                     self.lookup_op_method(\n                         lhs_ty,\n-                        Some(rhs_ty),\n-                        Some(rhs_expr),\n+                        Some((rhs_expr, rhs_ty)),\n                         Op::Binary(op, is_assign),\n                         expected,\n                     )\n@@ -471,8 +468,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         let errors = self\n                             .lookup_op_method(\n                                 lhs_ty,\n-                                Some(rhs_ty),\n-                                Some(rhs_expr),\n+                                Some((rhs_expr, rhs_ty)),\n                                 Op::Binary(op, is_assign),\n                                 expected,\n                             )\n@@ -492,6 +488,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                             if let Some(output_def_id) = output_def_id\n                                                 && let Some(trait_def_id) = trait_def_id\n                                                 && self.tcx.parent(output_def_id) == trait_def_id\n+                                                && output_ty.is_suggestable(self.tcx, false)\n                                             {\n                                                 Some((\"Output\", *output_ty))\n                                             } else {\n@@ -625,7 +622,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expected: Expectation<'tcx>,\n     ) -> Ty<'tcx> {\n         assert!(op.is_by_value());\n-        match self.lookup_op_method(operand_ty, None, None, Op::Unary(op, ex.span), expected) {\n+        match self.lookup_op_method(operand_ty, None, Op::Unary(op, ex.span), expected) {\n             Ok(method) => {\n                 self.write_method_call(ex.hir_id, method);\n                 method.sig.output()\n@@ -712,8 +709,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     fn lookup_op_method(\n         &self,\n         lhs_ty: Ty<'tcx>,\n-        other_ty: Option<Ty<'tcx>>,\n-        other_ty_expr: Option<&'tcx hir::Expr<'tcx>>,\n+        opt_rhs: Option<(&'tcx hir::Expr<'tcx>, Ty<'tcx>)>,\n         op: Op,\n         expected: Expectation<'tcx>,\n     ) -> Result<MethodCallee<'tcx>, Vec<FulfillmentError<'tcx>>> {\n@@ -742,20 +738,27 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 Op::Unary(..) => 0,\n             },\n         ) {\n+            self.tcx\n+                .sess\n+                .delay_span_bug(span, \"operator didn't have the right number of generic args\");\n             return Err(vec![]);\n         }\n \n         let opname = Ident::with_dummy_span(opname);\n+        let input_types =\n+            opt_rhs.as_ref().map(|(_, ty)| std::slice::from_ref(ty)).unwrap_or_default();\n+        let cause = self.cause(\n+            span,\n+            traits::BinOp {\n+                rhs_span: opt_rhs.map(|(expr, _)| expr.span),\n+                is_lit: opt_rhs\n+                    .map_or(false, |(expr, _)| matches!(expr.kind, hir::ExprKind::Lit(_))),\n+                output_ty: expected.only_has_type(self),\n+            },\n+        );\n+\n         let method = trait_did.and_then(|trait_did| {\n-            self.lookup_op_method_in_trait(\n-                span,\n-                opname,\n-                trait_did,\n-                lhs_ty,\n-                other_ty,\n-                other_ty_expr,\n-                expected,\n-            )\n+            self.lookup_method_in_trait(cause.clone(), opname, trait_did, lhs_ty, Some(input_types))\n         });\n \n         match (method, trait_did) {\n@@ -766,14 +769,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n             (None, None) => Err(vec![]),\n             (None, Some(trait_did)) => {\n-                let (obligation, _) = self.obligation_for_op_method(\n-                    span,\n-                    trait_did,\n-                    lhs_ty,\n-                    other_ty,\n-                    other_ty_expr,\n-                    expected,\n-                );\n+                let (obligation, _) =\n+                    self.obligation_for_method(cause, trait_did, lhs_ty, Some(input_types));\n                 Err(rustc_trait_selection::traits::fully_solve_obligation(self, obligation))\n             }\n         }"}, {"sha": "a0f048fc09b9b017101fb4f59f7602f2ec4bd09d", "filename": "compiler/rustc_hir_typeck/src/place_op.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/270c94e484e19764a2832ef918c95224eb3f17c7/compiler%2Frustc_hir_typeck%2Fsrc%2Fplace_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270c94e484e19764a2832ef918c95224eb3f17c7/compiler%2Frustc_hir_typeck%2Fsrc%2Fplace_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fplace_op.rs?ref=270c94e484e19764a2832ef918c95224eb3f17c7", "patch": "@@ -225,7 +225,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         imm_tr.and_then(|trait_did| {\n             self.lookup_method_in_trait(\n-                span,\n+                self.misc(span),\n                 Ident::with_dummy_span(imm_op),\n                 trait_did,\n                 base_ty,\n@@ -264,7 +264,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         mut_tr.and_then(|trait_did| {\n             self.lookup_method_in_trait(\n-                span,\n+                self.misc(span),\n                 Ident::with_dummy_span(mut_op),\n                 trait_did,\n                 base_ty,"}, {"sha": "4c65fca29b89721542148dcfadf447bee9f7048b", "filename": "compiler/rustc_lexer/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270c94e484e19764a2832ef918c95224eb3f17c7/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270c94e484e19764a2832ef918c95224eb3f17c7/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Flib.rs?ref=270c94e484e19764a2832ef918c95224eb3f17c7", "patch": "@@ -851,7 +851,7 @@ impl Cursor<'_> {\n     }\n \n     // Eats the identifier. Note: succeeds on `_`, which isn't a valid\n-    // identifer.\n+    // identifier.\n     fn eat_identifier(&mut self) {\n         if !is_id_start(self.first()) {\n             return;"}, {"sha": "574591529f33194f240067c2a420ba18923b7223", "filename": "compiler/rustc_parse/src/errors.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/270c94e484e19764a2832ef918c95224eb3f17c7/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270c94e484e19764a2832ef918c95224eb3f17c7/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs?ref=270c94e484e19764a2832ef918c95224eb3f17c7", "patch": "@@ -1229,3 +1229,11 @@ pub(crate) struct FnTypoWithImpl {\n     #[suggestion(applicability = \"maybe-incorrect\", code = \"impl\", style = \"verbose\")]\n     pub fn_span: Span,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(parse_expected_fn_path_found_fn_keyword)]\n+pub(crate) struct ExpectedFnPathFoundFnKeyword {\n+    #[primary_span]\n+    #[suggestion(applicability = \"machine-applicable\", code = \"Fn\", style = \"verbose\")]\n+    pub fn_token_span: Span,\n+}"}, {"sha": "8661e9ca16b8d02abd62981c86d8bcdc3cd89bb6", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 45, "deletions": 3, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/270c94e484e19764a2832ef918c95224eb3f17c7/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270c94e484e19764a2832ef918c95224eb3f17c7/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=270c94e484e19764a2832ef918c95224eb3f17c7", "patch": "@@ -1,8 +1,9 @@\n use super::{Parser, PathStyle, TokenType};\n \n-use crate::errors::{FnPtrWithGenerics, FnPtrWithGenericsSugg};\n+use crate::errors::{ExpectedFnPathFoundFnKeyword, FnPtrWithGenerics, FnPtrWithGenericsSugg};\n use crate::{maybe_recover_from_interpolated_ty_qpath, maybe_whole};\n \n+use ast::DUMMY_NODE_ID;\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, Delimiter, Token, TokenKind};\n use rustc_ast::util::case::Case;\n@@ -12,7 +13,9 @@ use rustc_ast::{\n };\n use rustc_errors::{pluralize, struct_span_err, Applicability, PResult};\n use rustc_span::source_map::Span;\n-use rustc_span::symbol::{kw, sym};\n+use rustc_span::symbol::{kw, sym, Ident};\n+use rustc_span::Symbol;\n+use thin_vec::thin_vec;\n \n /// Any `?` or `~const` modifiers that appear at the start of a bound.\n struct BoundModifiers {\n@@ -931,7 +934,14 @@ impl<'a> Parser<'a> {\n         modifiers: BoundModifiers,\n     ) -> PResult<'a, GenericBound> {\n         let lifetime_defs = self.parse_late_bound_lifetime_defs()?;\n-        let path = self.parse_path(PathStyle::Type)?;\n+        let path = if self.token.is_keyword(kw::Fn)\n+            && self.look_ahead(1, |tok| tok.kind == TokenKind::OpenDelim(Delimiter::Parenthesis))\n+            && let Some(path) = self.recover_path_from_fn()\n+        {\n+            path\n+        } else {\n+            self.parse_path(PathStyle::Type)?\n+        };\n         if has_parens {\n             if self.token.is_like_plus() {\n                 // Someone has written something like `&dyn (Trait + Other)`. The correct code\n@@ -960,6 +970,38 @@ impl<'a> Parser<'a> {\n         Ok(GenericBound::Trait(poly_trait, modifier))\n     }\n \n+    // recovers a `Fn(..)` parenthesized-style path from `fn(..)`\n+    fn recover_path_from_fn(&mut self) -> Option<ast::Path> {\n+        let fn_token_span = self.token.span;\n+        self.bump();\n+        let args_lo = self.token.span;\n+        let snapshot = self.create_snapshot_for_diagnostic();\n+        match self.parse_fn_decl(|_| false, AllowPlus::No, RecoverReturnSign::OnlyFatArrow) {\n+            Ok(decl) => {\n+                self.sess.emit_err(ExpectedFnPathFoundFnKeyword { fn_token_span });\n+                Some(ast::Path {\n+                    span: fn_token_span.to(self.prev_token.span),\n+                    segments: thin_vec![ast::PathSegment {\n+                        ident: Ident::new(Symbol::intern(\"Fn\"), fn_token_span),\n+                        id: DUMMY_NODE_ID,\n+                        args: Some(P(ast::GenericArgs::Parenthesized(ast::ParenthesizedArgs {\n+                            span: args_lo.to(self.prev_token.span),\n+                            inputs: decl.inputs.iter().map(|a| a.ty.clone()).collect(),\n+                            inputs_span: args_lo.until(decl.output.span()),\n+                            output: decl.output.clone(),\n+                        }))),\n+                    }],\n+                    tokens: None,\n+                })\n+            }\n+            Err(diag) => {\n+                diag.cancel();\n+                self.restore_snapshot(snapshot);\n+                None\n+            }\n+        }\n+    }\n+\n     /// Optionally parses `for<$generic_params>`.\n     pub(super) fn parse_late_bound_lifetime_defs(&mut self) -> PResult<'a, Vec<GenericParam>> {\n         if self.eat_keyword(kw::For) {"}, {"sha": "c450c4da9a883a2df2097e705773dbf2fa86622e", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/270c94e484e19764a2832ef918c95224eb3f17c7/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270c94e484e19764a2832ef918c95224eb3f17c7/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=270c94e484e19764a2832ef918c95224eb3f17c7", "patch": "@@ -213,6 +213,7 @@ symbols! {\n         Is,\n         ItemContext,\n         Iterator,\n+        IteratorItem,\n         Layout,\n         Left,\n         LinkedList,"}, {"sha": "b4863bb2589fd46615c3da132d27f5dad29bc706", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/270c94e484e19764a2832ef918c95224eb3f17c7/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270c94e484e19764a2832ef918c95224eb3f17c7/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=270c94e484e19764a2832ef918c95224eb3f17c7", "patch": "@@ -66,6 +66,7 @@ fn _assert_is_object_safe(_: &dyn Iterator<Item = ()>) {}\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n pub trait Iterator {\n     /// The type of the elements being iterated over.\n+    #[rustc_diagnostic_item = \"IteratorItem\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Item;\n "}, {"sha": "2a41d3579e1d8ee1f1564378fed89363380a52bd", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/270c94e484e19764a2832ef918c95224eb3f17c7/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/270c94e484e19764a2832ef918c95224eb3f17c7/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=270c94e484e19764a2832ef918c95224eb3f17c7", "patch": "@@ -378,10 +378,6 @@ img {\n \tfilter: var(--rust-logo-filter);\n }\n \n-.sidebar, .mobile-topbar, .sidebar-menu-toggle {\n-\tbackground-color: var(--sidebar-background-color);\n-}\n-\n .sidebar {\n \tfont-size: 0.875rem;\n \tflex: 0 0 200px;\n@@ -400,7 +396,8 @@ img {\n \toverflow-y: hidden;\n }\n \n-.source .sidebar, #src-sidebar-toggle, #source-sidebar {\n+.sidebar, .mobile-topbar, .sidebar-menu-toggle,\n+#src-sidebar-toggle, #source-sidebar {\n \tbackground-color: var(--sidebar-background-color);\n }\n "}, {"sha": "d5f57ed6102c7103d199eef79f62c40bd5968354", "filename": "src/test/rustdoc-gui/sidebar-source-code.goml", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/270c94e484e19764a2832ef918c95224eb3f17c7/src%2Ftest%2Frustdoc-gui%2Fsidebar-source-code.goml", "raw_url": "https://github.com/rust-lang/rust/raw/270c94e484e19764a2832ef918c95224eb3f17c7/src%2Ftest%2Frustdoc-gui%2Fsidebar-source-code.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsidebar-source-code.goml?ref=270c94e484e19764a2832ef918c95224eb3f17c7", "patch": "@@ -1,7 +1,52 @@\n // The goal of this test is to ensure that the sidebar is working as expected in the source\n // code pages.\n goto: \"file://\" + |DOC_PATH| + \"/src/test_docs/lib.rs.html\"\n-// First: desktop mode.\n+show-text: true\n+\n+// First, check the sidebar colors.\n+define-function: (\n+    \"check-colors\",\n+    (theme, color, background_color),\n+    [\n+        (\"local-storage\", {\n+            \"rustdoc-theme\": |theme|,\n+            \"rustdoc-use-system-theme\": \"false\",\n+        }),\n+        (\"reload\"),\n+        // Checking results colors.\n+        (\"assert-css\", (\".source .sidebar\", {\n+        \t\"color\": |color|,\n+        \t\"background-color\": |background_color|\n+        }, ALL)),\n+    ],\n+)\n+\n+call-function: (\n+\t\"check-colors\",\n+\t{\n+\t\t\"theme\": \"ayu\",\n+\t\t\"color\": \"rgb(197, 197, 197)\",\n+\t\t\"background_color\": \"rgb(20, 25, 31)\",\n+\t}\n+)\n+call-function: (\n+\t\"check-colors\",\n+\t{\n+\t\t\"theme\": \"dark\",\n+\t\t\"color\": \"rgb(221, 221, 221)\",\n+\t\t\"background_color\": \"rgb(80, 80, 80)\",\n+\t}\n+)\n+call-function: (\n+\t\"check-colors\",\n+\t{\n+\t\t\"theme\": \"light\",\n+\t\t\"color\": \"rgb(0, 0, 0)\",\n+\t\t\"background_color\": \"rgb(245, 245, 245)\",\n+\t}\n+)\n+\n+// Next, desktop mode layout.\n size: (1100, 800)\n // We check that the sidebar isn't expanded and has the expected width.\n assert-css: (\"nav.sidebar\", {\"width\": \"50px\"})"}, {"sha": "bfd7567a224244dba02c6c3775bbf1e27f75317e", "filename": "src/test/rustdoc-gui/sidebar.goml", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/270c94e484e19764a2832ef918c95224eb3f17c7/src%2Ftest%2Frustdoc-gui%2Fsidebar.goml", "raw_url": "https://github.com/rust-lang/rust/raw/270c94e484e19764a2832ef918c95224eb3f17c7/src%2Ftest%2Frustdoc-gui%2Fsidebar.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsidebar.goml?ref=270c94e484e19764a2832ef918c95224eb3f17c7", "patch": "@@ -2,6 +2,50 @@\n goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n assert-property: (\".sidebar\", {\"clientWidth\": \"200\"})\n show-text: true\n+\n+// First, check the sidebar colors.\n+define-function: (\n+    \"check-colors\",\n+    (theme, color, background_color),\n+    [\n+        (\"local-storage\", {\n+            \"rustdoc-theme\": |theme|,\n+            \"rustdoc-use-system-theme\": \"false\",\n+        }),\n+        (\"reload\"),\n+        // Checking results colors.\n+        (\"assert-css\", (\".sidebar\", {\n+        \t\"color\": |color|,\n+        \t\"background-color\": |background_color|\n+        }, ALL)),\n+    ],\n+)\n+\n+call-function: (\n+\t\"check-colors\",\n+\t{\n+\t\t\"theme\": \"ayu\",\n+\t\t\"color\": \"rgb(197, 197, 197)\",\n+\t\t\"background_color\": \"rgb(20, 25, 31)\",\n+\t}\n+)\n+call-function: (\n+\t\"check-colors\",\n+\t{\n+\t\t\"theme\": \"dark\",\n+\t\t\"color\": \"rgb(221, 221, 221)\",\n+\t\t\"background_color\": \"rgb(80, 80, 80)\",\n+\t}\n+)\n+call-function: (\n+\t\"check-colors\",\n+\t{\n+\t\t\"theme\": \"light\",\n+\t\t\"color\": \"rgb(0, 0, 0)\",\n+\t\t\"background_color\": \"rgb(245, 245, 245)\",\n+\t}\n+)\n+\n local-storage: {\"rustdoc-theme\": \"light\"}\n // We reload the page so the local storage settings are being used.\n reload:"}, {"sha": "289561bad8a0963a9b28a36b6b0334db00f72728", "filename": "src/test/ui/error-codes/E0033-teach.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/270c94e484e19764a2832ef918c95224eb3f17c7/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270c94e484e19764a2832ef918c95224eb3f17c7/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.rs?ref=270c94e484e19764a2832ef918c95224eb3f17c7", "patch": "@@ -1,13 +1,13 @@\n // compile-flags: -Z teach\n-\n trait SomeTrait {\n-    fn foo(); //~ associated function `foo` has no `self` parameter\n+    fn foo(&self);\n+}\n+struct S;\n+impl SomeTrait for S {\n+    fn foo(&self) {}\n }\n-\n fn main() {\n-    let trait_obj: &dyn SomeTrait = SomeTrait;\n-    //~^ ERROR expected value, found trait `SomeTrait`\n-    //~| ERROR E0038\n+    let trait_obj: &dyn SomeTrait = &S;\n \n     let &invalid = trait_obj;\n     //~^ ERROR E0033"}, {"sha": "31bc6719a562e59ec7a78b3e47d9512c522a1ca8", "filename": "src/test/ui/error-codes/E0033-teach.stderr", "status": "modified", "additions": 2, "deletions": 31, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/270c94e484e19764a2832ef918c95224eb3f17c7/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/270c94e484e19764a2832ef918c95224eb3f17c7/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.stderr?ref=270c94e484e19764a2832ef918c95224eb3f17c7", "patch": "@@ -1,31 +1,3 @@\n-error[E0423]: expected value, found trait `SomeTrait`\n-  --> $DIR/E0033-teach.rs:8:37\n-   |\n-LL |     let trait_obj: &dyn SomeTrait = SomeTrait;\n-   |                                     ^^^^^^^^^ not a value\n-\n-error[E0038]: the trait `SomeTrait` cannot be made into an object\n-  --> $DIR/E0033-teach.rs:8:20\n-   |\n-LL |     let trait_obj: &dyn SomeTrait = SomeTrait;\n-   |                    ^^^^^^^^^^^^^^ `SomeTrait` cannot be made into an object\n-   |\n-note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/E0033-teach.rs:4:8\n-   |\n-LL | trait SomeTrait {\n-   |       --------- this trait cannot be made into an object...\n-LL |     fn foo();\n-   |        ^^^ ...because associated function `foo` has no `self` parameter\n-help: consider turning `foo` into a method by giving it a `&self` argument\n-   |\n-LL |     fn foo(&self);\n-   |            +++++\n-help: alternatively, consider constraining `foo` so it does not apply to trait objects\n-   |\n-LL |     fn foo() where Self: Sized;\n-   |              +++++++++++++++++\n-\n error[E0033]: type `&dyn SomeTrait` cannot be dereferenced\n   --> $DIR/E0033-teach.rs:12:9\n    |\n@@ -36,7 +8,6 @@ LL |     let &invalid = trait_obj;\n            \n            You can read more about trait objects in the Trait Objects section of the Reference: https://doc.rust-lang.org/reference/types.html#trait-objects\n \n-error: aborting due to 3 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0033, E0038, E0423.\n-For more information about an error, try `rustc --explain E0033`.\n+For more information about this error, try `rustc --explain E0033`."}, {"sha": "bd6ec20722313a9c56170ca87161b21031fbb5e5", "filename": "src/test/ui/error-codes/E0033.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/270c94e484e19764a2832ef918c95224eb3f17c7/src%2Ftest%2Fui%2Ferror-codes%2FE0033.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270c94e484e19764a2832ef918c95224eb3f17c7/src%2Ftest%2Fui%2Ferror-codes%2FE0033.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0033.rs?ref=270c94e484e19764a2832ef918c95224eb3f17c7", "patch": "@@ -1,11 +1,12 @@\n trait SomeTrait {\n-    fn foo(); //~ associated function `foo` has no `self` parameter\n+    fn foo(&self);\n+}\n+struct S;\n+impl SomeTrait for S {\n+    fn foo(&self) {}\n }\n-\n fn main() {\n-    let trait_obj: &dyn SomeTrait = SomeTrait;\n-    //~^ ERROR expected value, found trait `SomeTrait`\n-    //~| ERROR E0038\n+    let trait_obj: &dyn SomeTrait = &S;\n \n     let &invalid = trait_obj;\n     //~^ ERROR E0033"}, {"sha": "ab2e780ee624d335bec00638975d1ac68b397efd", "filename": "src/test/ui/error-codes/E0033.stderr", "status": "modified", "additions": 3, "deletions": 32, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/270c94e484e19764a2832ef918c95224eb3f17c7/src%2Ftest%2Fui%2Ferror-codes%2FE0033.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/270c94e484e19764a2832ef918c95224eb3f17c7/src%2Ftest%2Fui%2Ferror-codes%2FE0033.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0033.stderr?ref=270c94e484e19764a2832ef918c95224eb3f17c7", "patch": "@@ -1,38 +1,9 @@\n-error[E0423]: expected value, found trait `SomeTrait`\n-  --> $DIR/E0033.rs:6:37\n-   |\n-LL |     let trait_obj: &dyn SomeTrait = SomeTrait;\n-   |                                     ^^^^^^^^^ not a value\n-\n-error[E0038]: the trait `SomeTrait` cannot be made into an object\n-  --> $DIR/E0033.rs:6:20\n-   |\n-LL |     let trait_obj: &dyn SomeTrait = SomeTrait;\n-   |                    ^^^^^^^^^^^^^^ `SomeTrait` cannot be made into an object\n-   |\n-note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/E0033.rs:2:8\n-   |\n-LL | trait SomeTrait {\n-   |       --------- this trait cannot be made into an object...\n-LL |     fn foo();\n-   |        ^^^ ...because associated function `foo` has no `self` parameter\n-help: consider turning `foo` into a method by giving it a `&self` argument\n-   |\n-LL |     fn foo(&self);\n-   |            +++++\n-help: alternatively, consider constraining `foo` so it does not apply to trait objects\n-   |\n-LL |     fn foo() where Self: Sized;\n-   |              +++++++++++++++++\n-\n error[E0033]: type `&dyn SomeTrait` cannot be dereferenced\n-  --> $DIR/E0033.rs:10:9\n+  --> $DIR/E0033.rs:11:9\n    |\n LL |     let &invalid = trait_obj;\n    |         ^^^^^^^^ type `&dyn SomeTrait` cannot be dereferenced\n \n-error: aborting due to 3 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0033, E0038, E0423.\n-For more information about an error, try `rustc --explain E0033`.\n+For more information about this error, try `rustc --explain E0033`."}, {"sha": "1b498c0fbca67cc05cb75d31072d0296c3cbfd3f", "filename": "src/test/ui/lexer/lex-bad-char-literals-6.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/270c94e484e19764a2832ef918c95224eb3f17c7/src%2Ftest%2Fui%2Flexer%2Flex-bad-char-literals-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270c94e484e19764a2832ef918c95224eb3f17c7/src%2Ftest%2Fui%2Flexer%2Flex-bad-char-literals-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flexer%2Flex-bad-char-literals-6.rs?ref=270c94e484e19764a2832ef918c95224eb3f17c7", "patch": "@@ -7,10 +7,8 @@ fn main() {\n     //~^ ERROR: character literal may only contain one codepoint\n \n     if x == y {}\n-    //~^ ERROR: can't compare `&str` with `char`\n     if y == z {}  // no error here\n     if x == z {}\n-    //~^ ERROR: can't compare `&str` with `char`\n \n     let a: usize = \"\";\n     //~^ ERROR: mismatched types"}, {"sha": "2fe30304a50d694709c25690f35d4d432cb9d538", "filename": "src/test/ui/lexer/lex-bad-char-literals-6.stderr", "status": "modified", "additions": 3, "deletions": 38, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/270c94e484e19764a2832ef918c95224eb3f17c7/src%2Ftest%2Fui%2Flexer%2Flex-bad-char-literals-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/270c94e484e19764a2832ef918c95224eb3f17c7/src%2Ftest%2Fui%2Flexer%2Flex-bad-char-literals-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flexer%2Flex-bad-char-literals-6.stderr?ref=270c94e484e19764a2832ef918c95224eb3f17c7", "patch": "@@ -31,49 +31,14 @@ help: if you meant to write a `str` literal, use double quotes\n LL |     let z = \"ef\";\n    |             ~~~~\n \n-error[E0277]: can't compare `&str` with `char`\n-  --> $DIR/lex-bad-char-literals-6.rs:9:10\n-   |\n-LL |     if x == y {}\n-   |          ^^ no implementation for `&str == char`\n-   |\n-   = help: the trait `PartialEq<char>` is not implemented for `&str`\n-   = help: the following other types implement trait `PartialEq<Rhs>`:\n-             <&'a str as PartialEq<OsString>>\n-             <&'a str as PartialEq<String>>\n-             <&'b str as PartialEq<Cow<'a, str>>>\n-             <str as PartialEq<Cow<'a, str>>>\n-             <str as PartialEq<OsStr>>\n-             <str as PartialEq<OsString>>\n-             <str as PartialEq<String>>\n-             <str as PartialEq>\n-\n error[E0308]: mismatched types\n-  --> $DIR/lex-bad-char-literals-6.rs:15:20\n+  --> $DIR/lex-bad-char-literals-6.rs:13:20\n    |\n LL |     let a: usize = \"\";\n    |            -----   ^^ expected `usize`, found `&str`\n    |            |\n    |            expected due to this\n \n-error[E0277]: can't compare `&str` with `char`\n-  --> $DIR/lex-bad-char-literals-6.rs:12:10\n-   |\n-LL |     if x == z {}\n-   |          ^^ no implementation for `&str == char`\n-   |\n-   = help: the trait `PartialEq<char>` is not implemented for `&str`\n-   = help: the following other types implement trait `PartialEq<Rhs>`:\n-             <&'a str as PartialEq<OsString>>\n-             <&'a str as PartialEq<String>>\n-             <&'b str as PartialEq<Cow<'a, str>>>\n-             <str as PartialEq<Cow<'a, str>>>\n-             <str as PartialEq<OsStr>>\n-             <str as PartialEq<OsString>>\n-             <str as PartialEq<String>>\n-             <str as PartialEq>\n-\n-error: aborting due to 6 previous errors\n+error: aborting due to 4 previous errors\n \n-Some errors have detailed explanations: E0277, E0308.\n-For more information about an error, try `rustc --explain E0277`.\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "e9e85339affa9e1da8bd6aee63e272f04b1a8d08", "filename": "src/test/ui/parser/kw-in-trait-bounds.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/270c94e484e19764a2832ef918c95224eb3f17c7/src%2Ftest%2Fui%2Fparser%2Fkw-in-trait-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270c94e484e19764a2832ef918c95224eb3f17c7/src%2Ftest%2Fui%2Fparser%2Fkw-in-trait-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkw-in-trait-bounds.rs?ref=270c94e484e19764a2832ef918c95224eb3f17c7", "patch": "@@ -4,21 +4,13 @@ fn _f<F: fn(), G>(_: impl fn(), _: &dyn fn())\n //~^ ERROR expected identifier, found keyword `fn`\n //~| ERROR expected identifier, found keyword `fn`\n //~| ERROR expected identifier, found keyword `fn`\n-//~| ERROR cannot find trait `r#fn` in this scope\n-//~| ERROR cannot find trait `r#fn` in this scope\n-//~| ERROR cannot find trait `r#fn` in this scope\n-//~| HELP  a trait with a similar name exists\n-//~| HELP  a trait with a similar name exists\n-//~| HELP  a trait with a similar name exists\n-//~| HELP  escape `fn` to use it as an identifier\n-//~| HELP  escape `fn` to use it as an identifier\n-//~| HELP  escape `fn` to use it as an identifier\n+//~| HELP use `Fn` to refer to the trait\n+//~| HELP use `Fn` to refer to the trait\n+//~| HELP use `Fn` to refer to the trait\n where\n G: fn(),\n     //~^ ERROR expected identifier, found keyword `fn`\n-    //~| ERROR cannot find trait `r#fn` in this scope\n-    //~| HELP  a trait with a similar name exists\n-    //~| HELP  escape `fn` to use it as an identifier\n+    //~| HELP use `Fn` to refer to the trait\n {}\n \n fn _g<A: struct, B>(_: impl struct, _: &dyn struct)"}, {"sha": "2d3aad4d6baf46f5a7733566b7436de8663b44f6", "filename": "src/test/ui/parser/kw-in-trait-bounds.stderr", "status": "modified", "additions": 26, "deletions": 62, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/270c94e484e19764a2832ef918c95224eb3f17c7/src%2Ftest%2Fui%2Fparser%2Fkw-in-trait-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/270c94e484e19764a2832ef918c95224eb3f17c7/src%2Ftest%2Fui%2Fparser%2Fkw-in-trait-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fkw-in-trait-bounds.stderr?ref=270c94e484e19764a2832ef918c95224eb3f17c7", "patch": "@@ -2,48 +2,48 @@ error: expected identifier, found keyword `fn`\n   --> $DIR/kw-in-trait-bounds.rs:3:10\n    |\n LL | fn _f<F: fn(), G>(_: impl fn(), _: &dyn fn())\n-   |          ^^ expected identifier, found keyword\n+   |          ^^\n    |\n-help: escape `fn` to use it as an identifier\n+help: use `Fn` to refer to the trait\n    |\n-LL | fn _f<F: r#fn(), G>(_: impl fn(), _: &dyn fn())\n-   |          ++\n+LL | fn _f<F: Fn(), G>(_: impl fn(), _: &dyn fn())\n+   |          ~~\n \n error: expected identifier, found keyword `fn`\n   --> $DIR/kw-in-trait-bounds.rs:3:27\n    |\n LL | fn _f<F: fn(), G>(_: impl fn(), _: &dyn fn())\n-   |                           ^^ expected identifier, found keyword\n+   |                           ^^\n    |\n-help: escape `fn` to use it as an identifier\n+help: use `Fn` to refer to the trait\n    |\n-LL | fn _f<F: fn(), G>(_: impl r#fn(), _: &dyn fn())\n-   |                           ++\n+LL | fn _f<F: fn(), G>(_: impl Fn(), _: &dyn fn())\n+   |                           ~~\n \n error: expected identifier, found keyword `fn`\n   --> $DIR/kw-in-trait-bounds.rs:3:41\n    |\n LL | fn _f<F: fn(), G>(_: impl fn(), _: &dyn fn())\n-   |                                         ^^ expected identifier, found keyword\n+   |                                         ^^\n    |\n-help: escape `fn` to use it as an identifier\n+help: use `Fn` to refer to the trait\n    |\n-LL | fn _f<F: fn(), G>(_: impl fn(), _: &dyn r#fn())\n-   |                                         ++\n+LL | fn _f<F: fn(), G>(_: impl fn(), _: &dyn Fn())\n+   |                                         ~~\n \n error: expected identifier, found keyword `fn`\n-  --> $DIR/kw-in-trait-bounds.rs:17:4\n+  --> $DIR/kw-in-trait-bounds.rs:11:4\n    |\n LL | G: fn(),\n-   |    ^^ expected identifier, found keyword\n+   |    ^^\n    |\n-help: escape `fn` to use it as an identifier\n+help: use `Fn` to refer to the trait\n    |\n-LL | G: r#fn(),\n-   |    ++\n+LL | G: Fn(),\n+   |    ~~\n \n error: expected identifier, found keyword `struct`\n-  --> $DIR/kw-in-trait-bounds.rs:24:10\n+  --> $DIR/kw-in-trait-bounds.rs:16:10\n    |\n LL | fn _g<A: struct, B>(_: impl struct, _: &dyn struct)\n    |          ^^^^^^ expected identifier, found keyword\n@@ -54,7 +54,7 @@ LL | fn _g<A: r#struct, B>(_: impl struct, _: &dyn struct)\n    |          ++\n \n error: expected identifier, found keyword `struct`\n-  --> $DIR/kw-in-trait-bounds.rs:24:29\n+  --> $DIR/kw-in-trait-bounds.rs:16:29\n    |\n LL | fn _g<A: struct, B>(_: impl struct, _: &dyn struct)\n    |                             ^^^^^^ expected identifier, found keyword\n@@ -65,7 +65,7 @@ LL | fn _g<A: struct, B>(_: impl r#struct, _: &dyn struct)\n    |                             ++\n \n error: expected identifier, found keyword `struct`\n-  --> $DIR/kw-in-trait-bounds.rs:24:45\n+  --> $DIR/kw-in-trait-bounds.rs:16:45\n    |\n LL | fn _g<A: struct, B>(_: impl struct, _: &dyn struct)\n    |                                             ^^^^^^ expected identifier, found keyword\n@@ -76,7 +76,7 @@ LL | fn _g<A: struct, B>(_: impl struct, _: &dyn r#struct)\n    |                                             ++\n \n error: expected identifier, found keyword `struct`\n-  --> $DIR/kw-in-trait-bounds.rs:38:8\n+  --> $DIR/kw-in-trait-bounds.rs:30:8\n    |\n LL |     B: struct,\n    |        ^^^^^^ expected identifier, found keyword\n@@ -86,44 +86,8 @@ help: escape `struct` to use it as an identifier\n LL |     B: r#struct,\n    |        ++\n \n-error[E0405]: cannot find trait `r#fn` in this scope\n-  --> $DIR/kw-in-trait-bounds.rs:3:10\n-   |\n-LL | fn _f<F: fn(), G>(_: impl fn(), _: &dyn fn())\n-   |          ^^ help: a trait with a similar name exists (notice the capitalization): `Fn`\n-  --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n-   |\n-   = note: similarly named trait `Fn` defined here\n-\n-error[E0405]: cannot find trait `r#fn` in this scope\n-  --> $DIR/kw-in-trait-bounds.rs:17:4\n-   |\n-LL | G: fn(),\n-   |    ^^ help: a trait with a similar name exists (notice the capitalization): `Fn`\n-  --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n-   |\n-   = note: similarly named trait `Fn` defined here\n-\n-error[E0405]: cannot find trait `r#fn` in this scope\n-  --> $DIR/kw-in-trait-bounds.rs:3:27\n-   |\n-LL | fn _f<F: fn(), G>(_: impl fn(), _: &dyn fn())\n-   |                           ^^ help: a trait with a similar name exists (notice the capitalization): `Fn`\n-  --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n-   |\n-   = note: similarly named trait `Fn` defined here\n-\n-error[E0405]: cannot find trait `r#fn` in this scope\n-  --> $DIR/kw-in-trait-bounds.rs:3:41\n-   |\n-LL | fn _f<F: fn(), G>(_: impl fn(), _: &dyn fn())\n-   |                                         ^^ help: a trait with a similar name exists (notice the capitalization): `Fn`\n-  --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n-   |\n-   = note: similarly named trait `Fn` defined here\n-\n error[E0405]: cannot find trait `r#struct` in this scope\n-  --> $DIR/kw-in-trait-bounds.rs:24:10\n+  --> $DIR/kw-in-trait-bounds.rs:16:10\n    |\n LL | fn _g<A: struct, B>(_: impl struct, _: &dyn struct)\n    |          ^^^^^^ help: a trait with a similar name exists (notice the capitalization): `Struct`\n@@ -132,7 +96,7 @@ LL | trait Struct {}\n    | ------------ similarly named trait `Struct` defined here\n \n error[E0405]: cannot find trait `r#struct` in this scope\n-  --> $DIR/kw-in-trait-bounds.rs:38:8\n+  --> $DIR/kw-in-trait-bounds.rs:30:8\n    |\n LL |     B: struct,\n    |        ^^^^^^ help: a trait with a similar name exists (notice the capitalization): `Struct`\n@@ -141,7 +105,7 @@ LL | trait Struct {}\n    | ------------ similarly named trait `Struct` defined here\n \n error[E0405]: cannot find trait `r#struct` in this scope\n-  --> $DIR/kw-in-trait-bounds.rs:24:29\n+  --> $DIR/kw-in-trait-bounds.rs:16:29\n    |\n LL | fn _g<A: struct, B>(_: impl struct, _: &dyn struct)\n    |                             ^^^^^^ help: a trait with a similar name exists (notice the capitalization): `Struct`\n@@ -150,14 +114,14 @@ LL | trait Struct {}\n    | ------------ similarly named trait `Struct` defined here\n \n error[E0405]: cannot find trait `r#struct` in this scope\n-  --> $DIR/kw-in-trait-bounds.rs:24:45\n+  --> $DIR/kw-in-trait-bounds.rs:16:45\n    |\n LL | fn _g<A: struct, B>(_: impl struct, _: &dyn struct)\n    |                                             ^^^^^^ help: a trait with a similar name exists (notice the capitalization): `Struct`\n ...\n LL | trait Struct {}\n    | ------------ similarly named trait `Struct` defined here\n \n-error: aborting due to 16 previous errors\n+error: aborting due to 12 previous errors\n \n For more information about this error, try `rustc --explain E0405`."}, {"sha": "b6611e6273d37c429d53871a4a074a70bbc696b5", "filename": "src/test/ui/parser/recover-fn-trait-from-fn-kw.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/270c94e484e19764a2832ef918c95224eb3f17c7/src%2Ftest%2Fui%2Fparser%2Frecover-fn-trait-from-fn-kw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270c94e484e19764a2832ef918c95224eb3f17c7/src%2Ftest%2Fui%2Fparser%2Frecover-fn-trait-from-fn-kw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-fn-trait-from-fn-kw.rs?ref=270c94e484e19764a2832ef918c95224eb3f17c7", "patch": "@@ -0,0 +1,12 @@\n+fn foo(_: impl fn() -> i32) {}\n+//~^ ERROR expected identifier, found keyword `fn`\n+\n+fn foo2<T: fn(i32)>(_: T) {}\n+//~^ ERROR expected identifier, found keyword `fn`\n+\n+fn main() {\n+    foo(|| ());\n+    //~^ mismatched types\n+    foo2(|_: ()| {});\n+    //~^ type mismatch in closure arguments\n+}"}, {"sha": "3681a796c53ed4401621b683ab8471e4bbded6e0", "filename": "src/test/ui/parser/recover-fn-trait-from-fn-kw.stderr", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/270c94e484e19764a2832ef918c95224eb3f17c7/src%2Ftest%2Fui%2Fparser%2Frecover-fn-trait-from-fn-kw.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/270c94e484e19764a2832ef918c95224eb3f17c7/src%2Ftest%2Fui%2Fparser%2Frecover-fn-trait-from-fn-kw.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-fn-trait-from-fn-kw.stderr?ref=270c94e484e19764a2832ef918c95224eb3f17c7", "patch": "@@ -0,0 +1,48 @@\n+error: expected identifier, found keyword `fn`\n+  --> $DIR/recover-fn-trait-from-fn-kw.rs:1:16\n+   |\n+LL | fn foo(_: impl fn() -> i32) {}\n+   |                ^^\n+   |\n+help: use `Fn` to refer to the trait\n+   |\n+LL | fn foo(_: impl Fn() -> i32) {}\n+   |                ~~\n+\n+error: expected identifier, found keyword `fn`\n+  --> $DIR/recover-fn-trait-from-fn-kw.rs:4:12\n+   |\n+LL | fn foo2<T: fn(i32)>(_: T) {}\n+   |            ^^\n+   |\n+help: use `Fn` to refer to the trait\n+   |\n+LL | fn foo2<T: Fn(i32)>(_: T) {}\n+   |            ~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/recover-fn-trait-from-fn-kw.rs:8:12\n+   |\n+LL |     foo(|| ());\n+   |            ^^ expected `i32`, found `()`\n+\n+error[E0631]: type mismatch in closure arguments\n+  --> $DIR/recover-fn-trait-from-fn-kw.rs:10:5\n+   |\n+LL |     foo2(|_: ()| {});\n+   |     ^^^^ ------- found signature defined here\n+   |     |\n+   |     expected due to this\n+   |\n+   = note: expected closure signature `fn(i32) -> _`\n+              found closure signature `fn(()) -> _`\n+note: required by a bound in `foo2`\n+  --> $DIR/recover-fn-trait-from-fn-kw.rs:4:12\n+   |\n+LL | fn foo2<T: fn(i32)>(_: T) {}\n+   |            ^^^^^^^ required by this bound in `foo2`\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0308, E0631.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "e3fa22a8f66f4123a0afe3dcb44bed96c9aafc6b", "filename": "src/test/ui/suggestions/issue-104287.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/270c94e484e19764a2832ef918c95224eb3f17c7/src%2Ftest%2Fui%2Fsuggestions%2Fissue-104287.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270c94e484e19764a2832ef918c95224eb3f17c7/src%2Ftest%2Fui%2Fsuggestions%2Fissue-104287.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-104287.rs?ref=270c94e484e19764a2832ef918c95224eb3f17c7", "patch": "@@ -1,9 +1,13 @@\n // The purpose of this test is not to validate the output of the compiler.\n // Instead, it ensures the suggestion is generated without performing an arithmetic overflow.\n \n+struct S;\n+impl S {\n+    fn foo(&self) {}\n+}\n fn main() {\n-    let x = not_found; //~ ERROR cannot find value `not_found` in this scope\n-    simd_gt::<()>(x);\n+    let x = S;\n+    foo::<()>(x);\n     //~^ ERROR this associated function takes 0 generic arguments but 1 generic argument was supplied\n-    //~| ERROR cannot find function `simd_gt` in this scope\n+    //~| ERROR cannot find function `foo` in this scope\n }"}, {"sha": "602a01828b28b331626e1151a4d2639f8abe0d5b", "filename": "src/test/ui/suggestions/issue-104287.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/270c94e484e19764a2832ef918c95224eb3f17c7/src%2Ftest%2Fui%2Fsuggestions%2Fissue-104287.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/270c94e484e19764a2832ef918c95224eb3f17c7/src%2Ftest%2Fui%2Fsuggestions%2Fissue-104287.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-104287.stderr?ref=270c94e484e19764a2832ef918c95224eb3f17c7", "patch": "@@ -1,30 +1,30 @@\n-error[E0425]: cannot find value `not_found` in this scope\n-  --> $DIR/issue-104287.rs:5:13\n-   |\n-LL |     let x = not_found;\n-   |             ^^^^^^^^^ not found in this scope\n-\n error[E0107]: this associated function takes 0 generic arguments but 1 generic argument was supplied\n-  --> $DIR/issue-104287.rs:6:5\n+  --> $DIR/issue-104287.rs:10:5\n    |\n-LL |     simd_gt::<()>(x);\n-   |     ^^^^^^^------ help: remove these generics\n+LL |     foo::<()>(x);\n+   |     ^^^------ help: remove these generics\n    |     |\n    |     expected 0 generic arguments\n+   |\n+note: associated function defined here, with 0 generic parameters\n+  --> $DIR/issue-104287.rs:6:8\n+   |\n+LL |     fn foo(&self) {}\n+   |        ^^^\n \n-error[E0425]: cannot find function `simd_gt` in this scope\n-  --> $DIR/issue-104287.rs:6:5\n+error[E0425]: cannot find function `foo` in this scope\n+  --> $DIR/issue-104287.rs:10:5\n    |\n-LL |     simd_gt::<()>(x);\n-   |     ^^^^^^^ not found in this scope\n+LL |     foo::<()>(x);\n+   |     ^^^ not found in this scope\n    |\n-help: use the `.` operator to call the method `SimdPartialOrd::simd_gt` on `[type error]`\n+help: use the `.` operator to call the method `foo` on `&S`\n    |\n-LL -     simd_gt::<()>(x);\n-LL +     x.simd_gt();\n+LL -     foo::<()>(x);\n+LL +     x.foo();\n    |\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n Some errors have detailed explanations: E0107, E0425.\n For more information about an error, try `rustc --explain E0107`."}, {"sha": "24bedb5297b1fe9241d4992471c5e2773d859a02", "filename": "src/test/ui/suggestions/unnamable-types.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/270c94e484e19764a2832ef918c95224eb3f17c7/src%2Ftest%2Fui%2Fsuggestions%2Funnamable-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/270c94e484e19764a2832ef918c95224eb3f17c7/src%2Ftest%2Fui%2Fsuggestions%2Funnamable-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Funnamable-types.stderr?ref=270c94e484e19764a2832ef918c95224eb3f17c7", "patch": "@@ -19,7 +19,7 @@ error[E0121]: the placeholder `_` is not allowed within types on item signatures\n LL | const C: _ = || 42;\n    |          ^ not allowed in type signatures\n    |\n-note: however, the inferred type `[closure@$DIR/unnamable-types.rs:17:14: 17:16]` cannot be named\n+note: however, the inferred type `[closure@unnamable-types.rs:17:14]` cannot be named\n   --> $DIR/unnamable-types.rs:17:14\n    |\n LL | const C: _ = || 42;\n@@ -31,7 +31,7 @@ error: missing type for `const` item\n LL | const D = S { t: { let i = 0; move || -> i32 { i } } };\n    |        ^\n    |\n-note: however, the inferred type `S<[closure@$DIR/unnamable-types.rs:23:31: 23:45]>` cannot be named\n+note: however, the inferred type `S<[closure@unnamable-types.rs:23:31]>` cannot be named\n   --> $DIR/unnamable-types.rs:23:11\n    |\n LL | const D = S { t: { let i = 0; move || -> i32 { i } } };"}, {"sha": "a6eab536a6b0957d8823c33a64aea2736968d620", "filename": "src/test/ui/typeck/quiet-type-err-let-binding.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/270c94e484e19764a2832ef918c95224eb3f17c7/src%2Ftest%2Fui%2Ftypeck%2Fquiet-type-err-let-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270c94e484e19764a2832ef918c95224eb3f17c7/src%2Ftest%2Fui%2Ftypeck%2Fquiet-type-err-let-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fquiet-type-err-let-binding.rs?ref=270c94e484e19764a2832ef918c95224eb3f17c7", "patch": "@@ -0,0 +1,17 @@\n+// fn foo() -> String {\n+//    String::new()\n+// }\n+\n+fn test(s: &str) {\n+    println!(\"{}\", s);\n+}\n+\n+fn test2(s: String) {\n+    println!(\"{}\", s);\n+}\n+\n+fn main() {\n+    let x = foo(); //~ERROR cannot find function `foo` in this scope\n+    test(&x);\n+    test2(x); // Does not complain about `x` being a `&str`.\n+}"}, {"sha": "ad7f85e01ec06a0d219ceec1d72f7ea125d0a3e9", "filename": "src/test/ui/typeck/quiet-type-err-let-binding.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/270c94e484e19764a2832ef918c95224eb3f17c7/src%2Ftest%2Fui%2Ftypeck%2Fquiet-type-err-let-binding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/270c94e484e19764a2832ef918c95224eb3f17c7/src%2Ftest%2Fui%2Ftypeck%2Fquiet-type-err-let-binding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fquiet-type-err-let-binding.stderr?ref=270c94e484e19764a2832ef918c95224eb3f17c7", "patch": "@@ -0,0 +1,9 @@\n+error[E0425]: cannot find function `foo` in this scope\n+  --> $DIR/quiet-type-err-let-binding.rs:14:13\n+   |\n+LL |     let x = foo();\n+   |             ^^^ not found in this scope\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0425`."}, {"sha": "b96c5271339598331be6f2479780a645b9f9a32c", "filename": "src/test/ui/typeck/typeck_type_placeholder_item.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/270c94e484e19764a2832ef918c95224eb3f17c7/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270c94e484e19764a2832ef918c95224eb3f17c7/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs?ref=270c94e484e19764a2832ef918c95224eb3f17c7", "patch": "@@ -220,3 +220,11 @@ fn value() -> Option<&'static _> {\n \n const _: Option<_> = map(value);\n //~^ ERROR the placeholder `_` is not allowed within types on item signatures for constants\n+\n+fn evens_squared(n: usize) -> _ {\n+//~^ ERROR the placeholder `_` is not allowed within types on item signatures for return types\n+    (1..n).filter(|x| x % 2 == 0).map(|x| x * x)\n+}\n+\n+const _: _ = (1..10).filter(|x| x % 2 == 0).map(|x| x * x);\n+//~^ ERROR the placeholder `_` is not allowed within types on item signatures for constants"}, {"sha": "bc02547c65eb8d89f4954ea75a31166f7d5de7b1", "filename": "src/test/ui/typeck/typeck_type_placeholder_item.stderr", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/270c94e484e19764a2832ef918c95224eb3f17c7/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/270c94e484e19764a2832ef918c95224eb3f17c7/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr?ref=270c94e484e19764a2832ef918c95224eb3f17c7", "patch": "@@ -428,6 +428,27 @@ LL | const _: Option<_> = map(value);\n    |          not allowed in type signatures\n    |          help: replace with the correct type: `Option<u8>`\n \n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for return types\n+  --> $DIR/typeck_type_placeholder_item.rs:224:31\n+   |\n+LL | fn evens_squared(n: usize) -> _ {\n+   |                               ^\n+   |                               |\n+   |                               not allowed in type signatures\n+   |                               help: replace with an appropriate return type: `impl Iterator<Item = usize>`\n+\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for constants\n+  --> $DIR/typeck_type_placeholder_item.rs:229:10\n+   |\n+LL | const _: _ = (1..10).filter(|x| x % 2 == 0).map(|x| x * x);\n+   |          ^ not allowed in type signatures\n+   |\n+note: however, the inferred type `Map<Filter<Range<i32>, [closure@typeck_type_placeholder_item.rs:229:29]>, [closure@typeck_type_placeholder_item.rs:229:49]>` cannot be named\n+  --> $DIR/typeck_type_placeholder_item.rs:229:14\n+   |\n+LL | const _: _ = (1..10).filter(|x| x % 2 == 0).map(|x| x * x);\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error[E0121]: the placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/typeck_type_placeholder_item.rs:140:31\n    |\n@@ -636,7 +657,7 @@ LL |     const D: _ = 42;\n    |              not allowed in type signatures\n    |              help: replace with the correct type: `i32`\n \n-error: aborting due to 69 previous errors\n+error: aborting due to 71 previous errors\n \n Some errors have detailed explanations: E0121, E0282, E0403.\n For more information about an error, try `rustc --explain E0121`."}]}