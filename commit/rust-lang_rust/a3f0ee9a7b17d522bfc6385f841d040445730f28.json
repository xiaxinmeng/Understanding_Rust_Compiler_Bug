{"sha": "a3f0ee9a7b17d522bfc6385f841d040445730f28", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzZjBlZTlhN2IxN2Q1MjJiZmM2Mzg1Zjg0MWQwNDA0NDU3MzBmMjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-23T08:43:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-23T08:43:52Z"}, "message": "Auto merge of #40113 - smaeul:native-musl, r=alexcrichton\n\nSupport dynamically-linked and/or native musl targets\n\nThese changes allow native compilation on musl-based distributions and the use of dynamic libraries on linux-musl targets. This is intended to remove limitations based on past assumptions about musl targets, while maintaining existing behavior by default.\n\nA minor related bugfix is included.", "tree": {"sha": "db1c5edb8cd72fd64450656f9ca6568d1acbd76a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db1c5edb8cd72fd64450656f9ca6568d1acbd76a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3f0ee9a7b17d522bfc6385f841d040445730f28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3f0ee9a7b17d522bfc6385f841d040445730f28", "html_url": "https://github.com/rust-lang/rust/commit/a3f0ee9a7b17d522bfc6385f841d040445730f28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3f0ee9a7b17d522bfc6385f841d040445730f28/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca898411c35d9b68c91e04d2b9d20392fa3d4805", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca898411c35d9b68c91e04d2b9d20392fa3d4805", "html_url": "https://github.com/rust-lang/rust/commit/ca898411c35d9b68c91e04d2b9d20392fa3d4805"}, {"sha": "e6cd9413718a51e9ce3207cdf4efad6319a34327", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6cd9413718a51e9ce3207cdf4efad6319a34327", "html_url": "https://github.com/rust-lang/rust/commit/e6cd9413718a51e9ce3207cdf4efad6319a34327"}], "stats": {"total": 181, "additions": 133, "deletions": 48}, "files": [{"sha": "fd1f03b9d0e24bb17d73e2bec658316c5c786e1f", "filename": "config.toml.example", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a3f0ee9a7b17d522bfc6385f841d040445730f28/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/a3f0ee9a7b17d522bfc6385f841d040445730f28/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=a3f0ee9a7b17d522bfc6385f841d040445730f28", "patch": "@@ -292,6 +292,12 @@\n # build native code.\n #android-ndk = \"/path/to/ndk\"\n \n+# Force static or dynamic linkage of the standard library for this target. If\n+# this target is a host for rustc, this will also affect the linkage of the\n+# compiler itself. This is useful for building rustc on targets that normally\n+# only use static libraries. If unset, the target's default linkage is used.\n+#crt-static = false\n+\n # The root location of the MUSL installation directory. The library directory\n # will also need to contain libunwind.a for an unwinding implementation. Note\n # that this option only makes sense for MUSL targets that produce statically"}, {"sha": "0baca9e58f4fe2e753b0f7907647a1cdf91ab968", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a3f0ee9a7b17d522bfc6385f841d040445730f28/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f0ee9a7b17d522bfc6385f841d040445730f28/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=a3f0ee9a7b17d522bfc6385f841d040445730f28", "patch": "@@ -237,9 +237,13 @@ fn main() {\n             }\n         }\n \n-        if target.contains(\"pc-windows-msvc\") {\n-            cmd.arg(\"-Z\").arg(\"unstable-options\");\n-            cmd.arg(\"-C\").arg(\"target-feature=+crt-static\");\n+        if let Ok(s) = env::var(\"RUSTC_CRT_STATIC\") {\n+            if s == \"true\" {\n+                cmd.arg(\"-C\").arg(\"target-feature=+crt-static\");\n+            }\n+            if s == \"false\" {\n+                cmd.arg(\"-C\").arg(\"target-feature=-crt-static\");\n+            }\n         }\n \n         // Force all crates compiled by this compiler to (a) be unstable and (b)"}, {"sha": "298f6a004a20aefd1c6da6c892bf62b6c9450bd1", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3f0ee9a7b17d522bfc6385f841d040445730f28/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f0ee9a7b17d522bfc6385f841d040445730f28/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=a3f0ee9a7b17d522bfc6385f841d040445730f28", "patch": "@@ -503,6 +503,10 @@ impl<'a> Builder<'a> {\n             cargo.env(\"RUSTC_METADATA_SUFFIX\", \"rustc\");\n         }\n \n+        if let Some(x) = self.crt_static(target) {\n+            cargo.env(\"RUSTC_CRT_STATIC\", x.to_string());\n+        }\n+\n         // Enable usage of unstable features\n         cargo.env(\"RUSTC_BOOTSTRAP\", \"1\");\n         self.add_rust_test_threads(&mut cargo);"}, {"sha": "335e1690a2ea0252a97860079309257a5aa0e0d4", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 27, "deletions": 13, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a3f0ee9a7b17d522bfc6385f841d040445730f28/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f0ee9a7b17d522bfc6385f841d040445730f28/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=a3f0ee9a7b17d522bfc6385f841d040445730f28", "patch": "@@ -77,6 +77,14 @@ impl Step for Std {\n                 target,\n             });\n             println!(\"Uplifting stage1 std ({} -> {})\", from.host, target);\n+\n+            // Even if we're not building std this stage, the new sysroot must\n+            // still contain the musl startup objects.\n+            if target.contains(\"musl\") && !target.contains(\"mips\") {\n+                let libdir = builder.sysroot_libdir(compiler, target);\n+                copy_musl_third_party_objects(build, target, &libdir);\n+            }\n+\n             builder.ensure(StdLink {\n                 compiler: from,\n                 target_compiler: compiler,\n@@ -89,6 +97,11 @@ impl Step for Std {\n         println!(\"Building stage{} std artifacts ({} -> {})\", compiler.stage,\n                 &compiler.host, target);\n \n+        if target.contains(\"musl\") && !target.contains(\"mips\") {\n+            let libdir = builder.sysroot_libdir(compiler, target);\n+            copy_musl_third_party_objects(build, target, &libdir);\n+        }\n+\n         let out_dir = build.cargo_out(compiler, Mode::Libstd, target);\n         build.clear_if_dirty(&out_dir, &builder.rustc(compiler));\n         let mut cargo = builder.cargo(compiler, Mode::Libstd, target, \"build\");\n@@ -105,6 +118,20 @@ impl Step for Std {\n     }\n }\n \n+/// Copies the crt(1,i,n).o startup objects\n+///\n+/// Since musl supports fully static linking, we can cross link for it even\n+/// with a glibc-targeting toolchain, given we have the appropriate startup\n+/// files. As those shipped with glibc won't work, copy the ones provided by\n+/// musl so we have them on linux-gnu hosts.\n+fn copy_musl_third_party_objects(build: &Build,\n+                                 target: Interned<String>,\n+                                 into: &Path) {\n+    for &obj in &[\"crt1.o\", \"crti.o\", \"crtn.o\"] {\n+        copy(&build.musl_root(target).unwrap().join(\"lib\").join(obj), &into.join(obj));\n+    }\n+}\n+\n /// Configure cargo to compile the standard library, adding appropriate env vars\n /// and such.\n pub fn std_cargo(build: &Build,\n@@ -189,10 +216,6 @@ impl Step for StdLink {\n         let libdir = builder.sysroot_libdir(target_compiler, target);\n         add_to_sysroot(&libdir, &libstd_stamp(build, compiler, target));\n \n-        if target.contains(\"musl\") && !target.contains(\"mips\") {\n-            copy_musl_third_party_objects(build, target, &libdir);\n-        }\n-\n         if build.config.sanitizers && compiler.stage != 0 && target == \"x86_64-apple-darwin\" {\n             // The sanitizers are only built in stage1 or above, so the dylibs will\n             // be missing in stage0 and causes panic. See the `std()` function above\n@@ -208,15 +231,6 @@ impl Step for StdLink {\n     }\n }\n \n-/// Copies the crt(1,i,n).o startup objects\n-///\n-/// Only required for musl targets that statically link to libc\n-fn copy_musl_third_party_objects(build: &Build, target: Interned<String>, into: &Path) {\n-    for &obj in &[\"crt1.o\", \"crti.o\", \"crtn.o\"] {\n-        copy(&build.musl_root(target).unwrap().join(\"lib\").join(obj), &into.join(obj));\n-    }\n-}\n-\n fn copy_apple_sanitizer_dylibs(native_dir: &Path, platform: &str, into: &Path) {\n     for &sanitizer in &[\"asan\", \"tsan\"] {\n         let filename = format!(\"libclang_rt.{}_{}_dynamic.dylib\", sanitizer, platform);"}, {"sha": "f43035fbfe8a1a75b342fee167b2ef449e42441f", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a3f0ee9a7b17d522bfc6385f841d040445730f28/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f0ee9a7b17d522bfc6385f841d040445730f28/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=a3f0ee9a7b17d522bfc6385f841d040445730f28", "patch": "@@ -143,6 +143,7 @@ pub struct Target {\n     pub cc: Option<PathBuf>,\n     pub cxx: Option<PathBuf>,\n     pub ndk: Option<PathBuf>,\n+    pub crt_static: Option<bool>,\n     pub musl_root: Option<PathBuf>,\n     pub qemu_rootfs: Option<PathBuf>,\n }\n@@ -275,6 +276,7 @@ struct TomlTarget {\n     cc: Option<String>,\n     cxx: Option<String>,\n     android_ndk: Option<String>,\n+    crt_static: Option<bool>,\n     musl_root: Option<String>,\n     qemu_rootfs: Option<String>,\n }\n@@ -446,6 +448,7 @@ impl Config {\n                 }\n                 target.cxx = cfg.cxx.clone().map(PathBuf::from);\n                 target.cc = cfg.cc.clone().map(PathBuf::from);\n+                target.crt_static = cfg.crt_static.clone();\n                 target.musl_root = cfg.musl_root.clone().map(PathBuf::from);\n                 target.qemu_rootfs = cfg.qemu_rootfs.clone().map(PathBuf::from);\n "}, {"sha": "55358f2ffcb7334deda2c7e4ecde1180cdd9c7d6", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a3f0ee9a7b17d522bfc6385f841d040445730f28/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f0ee9a7b17d522bfc6385f841d040445730f28/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=a3f0ee9a7b17d522bfc6385f841d040445730f28", "patch": "@@ -656,6 +656,16 @@ impl Build {\n         base\n     }\n \n+    /// Returns if this target should statically link the C runtime, if specified\n+    fn crt_static(&self, target: Interned<String>) -> Option<bool> {\n+        if target.contains(\"pc-windows-msvc\") {\n+            Some(true)\n+        } else {\n+            self.config.target_config.get(&target)\n+                .and_then(|t| t.crt_static)\n+        }\n+    }\n+\n     /// Returns the \"musl root\" for this `target`, if defined\n     fn musl_root(&self, target: Interned<String>) -> Option<&Path> {\n         self.config.target_config.get(&target)"}, {"sha": "a64a6130929cbb7c16792c9a844e999d751a4e56", "filename": "src/bootstrap/sanity.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a3f0ee9a7b17d522bfc6385f841d040445730f28/src%2Fbootstrap%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f0ee9a7b17d522bfc6385f841d040445730f28/src%2Fbootstrap%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsanity.rs?ref=a3f0ee9a7b17d522bfc6385f841d040445730f28", "patch": "@@ -151,8 +151,15 @@ pub fn check(build: &mut Build) {\n             panic!(\"the iOS target is only supported on macOS\");\n         }\n \n-        // Make sure musl-root is valid if specified\n+        // Make sure musl-root is valid\n         if target.contains(\"musl\") && !target.contains(\"mips\") {\n+            // If this is a native target (host is also musl) and no musl-root is given,\n+            // fall back to the system toolchain in /usr before giving up\n+            if build.musl_root(*target).is_none() && build.config.build == *target {\n+                let target = build.config.target_config.entry(target.clone())\n+                                 .or_insert(Default::default());\n+                target.musl_root = Some(\"/usr\".into());\n+            }\n             match build.musl_root(*target) {\n                 Some(root) => {\n                     if fs::metadata(root.join(\"lib/libc.a\")).is_err() {"}, {"sha": "23dcaf27c2c704502a3d4609bf2e8bf491813b30", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a3f0ee9a7b17d522bfc6385f841d040445730f28/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f0ee9a7b17d522bfc6385f841d040445730f28/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=a3f0ee9a7b17d522bfc6385f841d040445730f28", "patch": "@@ -429,6 +429,31 @@ impl Session {\n             .unwrap_or(self.opts.debug_assertions)\n     }\n \n+    pub fn crt_static(&self) -> bool {\n+        // If the target does not opt in to crt-static support, use its default.\n+        if self.target.target.options.crt_static_respected {\n+            self.crt_static_feature()\n+        } else {\n+            self.target.target.options.crt_static_default\n+        }\n+    }\n+\n+    pub fn crt_static_feature(&self) -> bool {\n+        let requested_features = self.opts.cg.target_feature.split(',');\n+        let found_negative = requested_features.clone().any(|r| r == \"-crt-static\");\n+        let found_positive = requested_features.clone().any(|r| r == \"+crt-static\");\n+\n+        // If the target we're compiling for requests a static crt by default,\n+        // then see if the `-crt-static` feature was passed to disable that.\n+        // Otherwise if we don't have a static crt by default then see if the\n+        // `+crt-static` feature was passed.\n+        if self.target.target.options.crt_static_default {\n+            !found_negative\n+        } else {\n+            found_positive\n+        }\n+    }\n+\n     pub fn must_not_eliminate_frame_pointers(&self) -> bool {\n         self.opts.debuginfo != DebugInfoLevel::NoDebugInfo ||\n         !self.target.target.options.eliminate_frame_pointer"}, {"sha": "6e5e139715cccadef9f458f483354a94c3441997", "filename": "src/librustc_back/target/linux_musl_base.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a3f0ee9a7b17d522bfc6385f841d040445730f28/src%2Flibrustc_back%2Ftarget%2Flinux_musl_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f0ee9a7b17d522bfc6385f841d040445730f28/src%2Flibrustc_back%2Ftarget%2Flinux_musl_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Flinux_musl_base.rs?ref=a3f0ee9a7b17d522bfc6385f841d040445730f28", "patch": "@@ -60,15 +60,10 @@ pub fn opts() -> TargetOptions {\n     base.pre_link_objects_exe.push(\"crti.o\".to_string());\n     base.post_link_objects.push(\"crtn.o\".to_string());\n \n-    // MUSL support doesn't currently include dynamic linking, so there's no\n-    // need for dylibs or rpath business. Additionally `-pie` is incompatible\n-    // with `-static`, so we can't pass `-pie`.\n-    base.dynamic_linking = false;\n-    base.has_rpath = false;\n-    base.position_independent_executables = false;\n-\n     // These targets statically link libc by default\n     base.crt_static_default = true;\n+    // These targets allow the user to choose between static and dynamic linking.\n+    base.crt_static_respected = true;\n \n     base\n }"}, {"sha": "130e1b695dbd5b7bbcdab87d5bb3edc6fab29588", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a3f0ee9a7b17d522bfc6385f841d040445730f28/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f0ee9a7b17d522bfc6385f841d040445730f28/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=a3f0ee9a7b17d522bfc6385f841d040445730f28", "patch": "@@ -416,8 +416,12 @@ pub struct TargetOptions {\n     /// ABIs are considered to be supported on all platforms and cannot be blacklisted.\n     pub abi_blacklist: Vec<Abi>,\n \n+    /// Whether or not linking dylibs to a static CRT is allowed.\n+    pub crt_static_allows_dylibs: bool,\n     /// Whether or not the CRT is statically linked by default.\n     pub crt_static_default: bool,\n+    /// Whether or not crt-static is respected by the compiler (or is a no-op).\n+    pub crt_static_respected: bool,\n \n     /// Whether or not stack probes (__rust_probestack) are enabled\n     pub stack_probes: bool,\n@@ -478,7 +482,9 @@ impl Default for TargetOptions {\n             max_atomic_width: None,\n             panic_strategy: PanicStrategy::Unwind,\n             abi_blacklist: vec![],\n+            crt_static_allows_dylibs: false,\n             crt_static_default: false,\n+            crt_static_respected: false,\n             stack_probes: false,\n         }\n     }\n@@ -714,7 +720,9 @@ impl Target {\n         key!(max_atomic_width, Option<u64>);\n         key!(min_atomic_width, Option<u64>);\n         try!(key!(panic_strategy, PanicStrategy));\n+        key!(crt_static_allows_dylibs, bool);\n         key!(crt_static_default, bool);\n+        key!(crt_static_respected, bool);\n         key!(stack_probes, bool);\n \n         if let Some(array) = obj.find(\"abi-blacklist\").and_then(Json::as_array) {\n@@ -902,7 +910,9 @@ impl ToJson for Target {\n         target_option_val!(min_atomic_width);\n         target_option_val!(max_atomic_width);\n         target_option_val!(panic_strategy);\n+        target_option_val!(crt_static_allows_dylibs);\n         target_option_val!(crt_static_default);\n+        target_option_val!(crt_static_respected);\n         target_option_val!(stack_probes);\n \n         if default.abi_blacklist != self.options.abi_blacklist {"}, {"sha": "42a4e6f5f11885e873f933603830d884dad74180", "filename": "src/librustc_back/target/windows_msvc_base.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3f0ee9a7b17d522bfc6385f841d040445730f28/src%2Flibrustc_back%2Ftarget%2Fwindows_msvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f0ee9a7b17d522bfc6385f841d040445730f28/src%2Flibrustc_back%2Ftarget%2Fwindows_msvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fwindows_msvc_base.rs?ref=a3f0ee9a7b17d522bfc6385f841d040445730f28", "patch": "@@ -63,6 +63,8 @@ pub fn opts() -> TargetOptions {\n         is_like_windows: true,\n         is_like_msvc: true,\n         pre_link_args: args,\n+        crt_static_allows_dylibs: true,\n+        crt_static_respected: true,\n \n         .. Default::default()\n     }"}, {"sha": "96264472b5f8e53e0fe752afd6f5d174ef6ebcdf", "filename": "src/librustc_driver/target_features.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a3f0ee9a7b17d522bfc6385f841d040445730f28/src%2Flibrustc_driver%2Ftarget_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f0ee9a7b17d522bfc6385f841d040445730f28/src%2Flibrustc_driver%2Ftarget_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftarget_features.rs?ref=a3f0ee9a7b17d522bfc6385f841d040445730f28", "patch": "@@ -25,21 +25,7 @@ pub fn add_configuration(cfg: &mut ast::CrateConfig, sess: &Session) {\n         cfg.insert((tf, Some(feat)));\n     }\n \n-    let requested_features = sess.opts.cg.target_feature.split(',');\n-    let found_negative = requested_features.clone().any(|r| r == \"-crt-static\");\n-    let found_positive = requested_features.clone().any(|r| r == \"+crt-static\");\n-\n-    // If the target we're compiling for requests a static crt by default,\n-    // then see if the `-crt-static` feature was passed to disable that.\n-    // Otherwise if we don't have a static crt by default then see if the\n-    // `+crt-static` feature was passed.\n-    let crt_static = if sess.target.target.options.crt_static_default {\n-        !found_negative\n-    } else {\n-        found_positive\n-    };\n-\n-    if crt_static {\n+    if sess.crt_static_feature() {\n         cfg.insert((tf, Some(Symbol::intern(\"crt-static\"))));\n     }\n }"}, {"sha": "4e211d83cff3e79551168f2aac1d2dce38d30daf", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a3f0ee9a7b17d522bfc6385f841d040445730f28/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f0ee9a7b17d522bfc6385f841d040445730f28/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=a3f0ee9a7b17d522bfc6385f841d040445730f28", "patch": "@@ -902,7 +902,7 @@ fn link_args(cmd: &mut Linker,\n         let mut args = args.iter().chain(more_args.iter()).chain(used_link_args.iter());\n \n         if get_reloc_model(sess) == llvm::RelocMode::PIC\n-            && !args.any(|x| *x == \"-static\") {\n+            && !sess.crt_static() && !args.any(|x| *x == \"-static\") {\n             cmd.position_independent_executable();\n         }\n     }\n@@ -966,11 +966,13 @@ fn link_args(cmd: &mut Linker,\n     add_upstream_rust_crates(cmd, sess, crate_type, tmpdir);\n     add_upstream_native_libraries(cmd, sess, crate_type);\n \n-    // # Telling the linker what we're doing\n-\n+    // Tell the linker what we're doing.\n     if crate_type != config::CrateTypeExecutable {\n         cmd.build_dylib(out_filename);\n     }\n+    if crate_type == config::CrateTypeExecutable && sess.crt_static() {\n+        cmd.build_static_executable();\n+    }\n \n     // FIXME (#2397): At some point we want to rpath our guesses as to\n     // where extern libraries might live, based on the"}, {"sha": "9b0a5e3f4a5b11603119d84d516d147e5cd843d0", "filename": "src/librustc_trans/back/linker.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a3f0ee9a7b17d522bfc6385f841d040445730f28/src%2Flibrustc_trans%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f0ee9a7b17d522bfc6385f841d040445730f28/src%2Flibrustc_trans%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flinker.rs?ref=a3f0ee9a7b17d522bfc6385f841d040445730f28", "patch": "@@ -110,6 +110,7 @@ pub trait Linker {\n     fn debuginfo(&mut self);\n     fn no_default_libraries(&mut self);\n     fn build_dylib(&mut self, out_filename: &Path);\n+    fn build_static_executable(&mut self);\n     fn args(&mut self, args: &[String]);\n     fn export_symbols(&mut self, tmpdir: &Path, crate_type: CrateType);\n     fn subsystem(&mut self, subsystem: &str);\n@@ -179,6 +180,7 @@ impl<'a> Linker for GccLinker<'a> {\n     fn position_independent_executable(&mut self) { self.cmd.arg(\"-pie\"); }\n     fn partial_relro(&mut self) { self.linker_arg(\"-z,relro\"); }\n     fn full_relro(&mut self) { self.linker_arg(\"-z,relro,-z,now\"); }\n+    fn build_static_executable(&mut self) { self.cmd.arg(\"-static\"); }\n     fn args(&mut self, args: &[String]) { self.cmd.args(args); }\n \n     fn link_rust_dylib(&mut self, lib: &str, _path: &Path) {\n@@ -396,6 +398,10 @@ impl<'a> Linker for MsvcLinker<'a> {\n         self.cmd.arg(arg);\n     }\n \n+    fn build_static_executable(&mut self) {\n+        // noop\n+    }\n+\n     fn gc_sections(&mut self, _keep_metadata: bool) {\n         // MSVC's ICF (Identical COMDAT Folding) link optimization is\n         // slow for Rust and thus we disable it by default when not in\n@@ -683,6 +689,10 @@ impl<'a> Linker for EmLinker<'a> {\n         bug!(\"building dynamic library is unsupported on Emscripten\")\n     }\n \n+    fn build_static_executable(&mut self) {\n+        // noop\n+    }\n+\n     fn export_symbols(&mut self, _tmpdir: &Path, crate_type: CrateType) {\n         let symbols = &self.info.exports[&crate_type];\n "}, {"sha": "aa8637fabe85f0e10cf7b95c9992cc861eb5eb21", "filename": "src/librustc_trans_utils/link.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a3f0ee9a7b17d522bfc6385f841d040445730f28/src%2Flibrustc_trans_utils%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f0ee9a7b17d522bfc6385f841d040445730f28/src%2Flibrustc_trans_utils%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Flink.rs?ref=a3f0ee9a7b17d522bfc6385f841d040445730f28", "patch": "@@ -123,8 +123,11 @@ pub fn invalid_output_for_target(sess: &Session,\n     match (sess.target.target.options.dynamic_linking,\n            sess.target.target.options.executables, crate_type) {\n         (false, _, config::CrateTypeCdylib) |\n-        (false, _, config::CrateTypeProcMacro) |\n-        (false, _, config::CrateTypeDylib) => true,\n+        (false, _, config::CrateTypeDylib) |\n+        (false, _, config::CrateTypeProcMacro) => true,\n+        (true, _, config::CrateTypeCdylib) |\n+        (true, _, config::CrateTypeDylib) => sess.crt_static() &&\n+            !sess.target.target.options.crt_static_allows_dylibs,\n         (_, false, config::CrateTypeExecutable) => true,\n         _ => false\n     }"}, {"sha": "f57dec98b795b652ffea961e3c97b52203b28a71", "filename": "src/libstd/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3f0ee9a7b17d522bfc6385f841d040445730f28/src%2Flibstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f0ee9a7b17d522bfc6385f841d040445730f28/src%2Flibstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbuild.rs?ref=a3f0ee9a7b17d522bfc6385f841d040445730f28", "patch": "@@ -30,7 +30,7 @@ fn main() {\n             println!(\"cargo:rustc-link-lib=dl\");\n             println!(\"cargo:rustc-link-lib=log\");\n             println!(\"cargo:rustc-link-lib=gcc\");\n-        } else if !target.contains(\"musl\") || target.contains(\"mips\") {\n+        } else if !target.contains(\"musl\") {\n             println!(\"cargo:rustc-link-lib=dl\");\n             println!(\"cargo:rustc-link-lib=rt\");\n             println!(\"cargo:rustc-link-lib=pthread\");"}, {"sha": "dc1464b905b0dacb95167815183f1008de61c3c8", "filename": "src/libunwind/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3f0ee9a7b17d522bfc6385f841d040445730f28/src%2Flibunwind%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f0ee9a7b17d522bfc6385f841d040445730f28/src%2Flibunwind%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Fbuild.rs?ref=a3f0ee9a7b17d522bfc6385f841d040445730f28", "patch": "@@ -16,7 +16,7 @@ fn main() {\n \n     if target.contains(\"linux\") {\n         if target.contains(\"musl\") && !target.contains(\"mips\") {\n-            println!(\"cargo:rustc-link-lib=static=unwind\");\n+            // musl is handled in lib.rs\n         } else if !target.contains(\"android\") {\n             println!(\"cargo:rustc-link-lib=gcc_s\");\n         }"}, {"sha": "1ff0a1e19d7b312e6a3f12bfd3bdd60d577fab47", "filename": "src/libunwind/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a3f0ee9a7b17d522bfc6385f841d040445730f28/src%2Flibunwind%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f0ee9a7b17d522bfc6385f841d040445730f28/src%2Flibunwind%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Flib.rs?ref=a3f0ee9a7b17d522bfc6385f841d040445730f28", "patch": "@@ -15,6 +15,7 @@\n #![deny(warnings)]\n \n #![feature(cfg_target_vendor)]\n+#![feature(link_cfg)]\n #![feature(staged_api)]\n #![feature(unwind_attributes)]\n #![feature(static_nobundle)]\n@@ -28,3 +29,8 @@ extern crate libc;\n mod libunwind;\n #[cfg(not(target_env = \"msvc\"))]\n pub use libunwind::*;\n+\n+#[cfg(target_env = \"musl\")]\n+#[link(name = \"unwind\", kind = \"static-nobundle\", cfg(target_feature = \"crt-static\"))]\n+#[link(name = \"gcc_s\", cfg(not(target_feature = \"crt-static\")))]\n+extern {}"}, {"sha": "0ceb5ed5e755dcd3b12febd418422184a4ee42c9", "filename": "src/test/run-pass-fulldeps/issue-13560.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a3f0ee9a7b17d522bfc6385f841d040445730f28/src%2Ftest%2Frun-pass-fulldeps%2Fissue-13560.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f0ee9a7b17d522bfc6385f841d040445730f28/src%2Ftest%2Frun-pass-fulldeps%2Fissue-13560.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fissue-13560.rs?ref=a3f0ee9a7b17d522bfc6385f841d040445730f28", "patch": "@@ -11,7 +11,6 @@\n // aux-build:issue-13560-1.rs\n // aux-build:issue-13560-2.rs\n // aux-build:issue-13560-3.rs\n-// ignore-musl\n \n // Regression test for issue #13560, the test itself is all in the dependent\n // libraries. The fail which previously failed to compile is the one numbered 3."}, {"sha": "9839a2c704105d704ca23e7132675931ab3c938e", "filename": "src/test/run-pass-fulldeps/linkage-visibility.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a3f0ee9a7b17d522bfc6385f841d040445730f28/src%2Ftest%2Frun-pass-fulldeps%2Flinkage-visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f0ee9a7b17d522bfc6385f841d040445730f28/src%2Ftest%2Frun-pass-fulldeps%2Flinkage-visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Flinkage-visibility.rs?ref=a3f0ee9a7b17d522bfc6385f841d040445730f28", "patch": "@@ -11,7 +11,6 @@\n // aux-build:linkage-visibility.rs\n // ignore-android: FIXME(#10356)\n // ignore-windows: std::dynamic_lib does not work on Windows well\n-// ignore-musl\n // ignore-emscripten no dynamic linking\n \n extern crate linkage_visibility as foo;"}]}