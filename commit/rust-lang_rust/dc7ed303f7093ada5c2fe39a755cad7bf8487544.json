{"sha": "dc7ed303f7093ada5c2fe39a755cad7bf8487544", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjN2VkMzAzZjcwOTNhZGE1YzJmZTM5YTc1NWNhZDdiZjg0ODc1NDQ=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-22T04:45:29Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-22T07:34:03Z"}, "message": "Refactor out `parse_struct_expr`.", "tree": {"sha": "624ba83696362304a4445c0dec74f5acf78422d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/624ba83696362304a4445c0dec74f5acf78422d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc7ed303f7093ada5c2fe39a755cad7bf8487544", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc7ed303f7093ada5c2fe39a755cad7bf8487544", "html_url": "https://github.com/rust-lang/rust/commit/dc7ed303f7093ada5c2fe39a755cad7bf8487544", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc7ed303f7093ada5c2fe39a755cad7bf8487544/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cf592fa40ca4104b59b867817881ca056f408ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cf592fa40ca4104b59b867817881ca056f408ad", "html_url": "https://github.com/rust-lang/rust/commit/1cf592fa40ca4104b59b867817881ca056f408ad"}], "stats": {"total": 93, "additions": 48, "deletions": 45}, "files": [{"sha": "1b7f55597702ca8b900de9c06b33f4fe08bf9801", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 48, "deletions": 45, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/dc7ed303f7093ada5c2fe39a755cad7bf8487544/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc7ed303f7093ada5c2fe39a755cad7bf8487544/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=dc7ed303f7093ada5c2fe39a755cad7bf8487544", "patch": "@@ -2333,51 +2333,7 @@ impl<'a> Parser<'a> {\n                             Restrictions::RESTRICTION_NO_STRUCT_LITERAL\n                         );\n                         if !prohibited {\n-                            // It's a struct literal.\n-                            self.bump();\n-                            let mut fields = Vec::new();\n-                            let mut base = None;\n-\n-                            attrs.extend(self.parse_inner_attributes()?);\n-\n-                            while self.token != token::CloseDelim(token::Brace) {\n-                                if self.eat(&token::DotDot) {\n-                                    match self.parse_expr() {\n-                                        Ok(e) => {\n-                                            base = Some(e);\n-                                        }\n-                                        Err(mut e) => {\n-                                            e.emit();\n-                                            self.recover_stmt();\n-                                        }\n-                                    }\n-                                    break;\n-                                }\n-\n-                                match self.parse_field() {\n-                                    Ok(f) => fields.push(f),\n-                                    Err(mut e) => {\n-                                        e.emit();\n-                                        self.recover_stmt();\n-                                        break;\n-                                    }\n-                                }\n-\n-                                match self.expect_one_of(&[token::Comma],\n-                                                         &[token::CloseDelim(token::Brace)]) {\n-                                    Ok(()) => {}\n-                                    Err(mut e) => {\n-                                        e.emit();\n-                                        self.recover_stmt();\n-                                        break;\n-                                    }\n-                                }\n-                            }\n-\n-                            hi = self.span.hi;\n-                            self.expect(&token::CloseDelim(token::Brace))?;\n-                            ex = ExprKind::Struct(pth, fields, base);\n-                            return Ok(self.mk_expr(lo, hi, ex, attrs));\n+                            return self.parse_struct_expr(lo, pth, attrs);\n                         }\n                     }\n \n@@ -2403,6 +2359,53 @@ impl<'a> Parser<'a> {\n         return Ok(self.mk_expr(lo, hi, ex, attrs));\n     }\n \n+    fn parse_struct_expr(&mut self, lo: BytePos, pth: ast::Path, mut attrs: ThinVec<Attribute>)\n+                         -> PResult<'a, P<Expr>> {\n+        self.bump();\n+        let mut fields = Vec::new();\n+        let mut base = None;\n+\n+        attrs.extend(self.parse_inner_attributes()?);\n+\n+        while self.token != token::CloseDelim(token::Brace) {\n+            if self.eat(&token::DotDot) {\n+                match self.parse_expr() {\n+                    Ok(e) => {\n+                        base = Some(e);\n+                    }\n+                    Err(mut e) => {\n+                        e.emit();\n+                        self.recover_stmt();\n+                    }\n+                }\n+                break;\n+            }\n+\n+            match self.parse_field() {\n+                Ok(f) => fields.push(f),\n+                Err(mut e) => {\n+                    e.emit();\n+                    self.recover_stmt();\n+                    break;\n+                }\n+            }\n+\n+            match self.expect_one_of(&[token::Comma],\n+                                     &[token::CloseDelim(token::Brace)]) {\n+                Ok(()) => {}\n+                Err(mut e) => {\n+                    e.emit();\n+                    self.recover_stmt();\n+                    break;\n+                }\n+            }\n+        }\n+\n+        let hi = self.span.hi;\n+        self.expect(&token::CloseDelim(token::Brace))?;\n+        return Ok(self.mk_expr(lo, hi, ExprKind::Struct(pth, fields, base), attrs));\n+    }\n+\n     fn parse_or_use_outer_attributes(&mut self,\n                                      already_parsed_attrs: Option<ThinVec<Attribute>>)\n                                      -> PResult<'a, ThinVec<Attribute>> {"}]}