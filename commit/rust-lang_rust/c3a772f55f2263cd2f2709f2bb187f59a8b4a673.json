{"sha": "c3a772f55f2263cd2f2709f2bb187f59a8b4a673", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzYTc3MmY1NWYyMjYzY2QyZjI3MDlmMmJiMTg3ZjU5YThiNGE2NzM=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-09-10T16:48:18Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-09-18T15:11:34Z"}, "message": "use abstract consts when unifying ConstKind::Unevaluated", "tree": {"sha": "11e0a450b865cde2c2cbe092a279d36b3f7d0982", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11e0a450b865cde2c2cbe092a279d36b3f7d0982"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3a772f55f2263cd2f2709f2bb187f59a8b4a673", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3a772f55f2263cd2f2709f2bb187f59a8b4a673", "html_url": "https://github.com/rust-lang/rust/commit/c3a772f55f2263cd2f2709f2bb187f59a8b4a673", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3a772f55f2263cd2f2709f2bb187f59a8b4a673/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d327fa112b8ca56e8c310a8ec9bf458909beacfe", "url": "https://api.github.com/repos/rust-lang/rust/commits/d327fa112b8ca56e8c310a8ec9bf458909beacfe", "html_url": "https://github.com/rust-lang/rust/commit/d327fa112b8ca56e8c310a8ec9bf458909beacfe"}], "stats": {"total": 106, "additions": 96, "deletions": 10}, "files": [{"sha": "44d906dada5f05b80974efec0767d407127edd8c", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c3a772f55f2263cd2f2709f2bb187f59a8b4a673/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3a772f55f2263cd2f2709f2bb187f59a8b4a673/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=c3a772f55f2263cd2f2709f2bb187f59a8b4a673", "patch": "@@ -263,6 +263,16 @@ rustc_queries! {\n             }\n         }\n \n+        query try_unify_abstract_consts(key: (\n+            (ty::WithOptConstParam<DefId>, SubstsRef<'tcx>),\n+            (ty::WithOptConstParam<DefId>, SubstsRef<'tcx>)\n+        )) -> bool {\n+            desc {\n+                |tcx| \"trying to unify the generic constants {} and {}\",\n+                tcx.def_path_str(key.0.0.did), tcx.def_path_str(key.1.0.did)\n+            }\n+        }\n+\n         query mir_drops_elaborated_and_const_checked(\n             key: ty::WithOptConstParam<LocalDefId>\n         ) -> &'tcx Steal<mir::Body<'tcx>> {"}, {"sha": "a005990264cf11176443819ad7e8446804e15cb8", "filename": "compiler/rustc_middle/src/ty/query/keys.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c3a772f55f2263cd2f2709f2bb187f59a8b4a673/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3a772f55f2263cd2f2709f2bb187f59a8b4a673/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fkeys.rs?ref=c3a772f55f2263cd2f2709f2bb187f59a8b4a673", "patch": "@@ -193,6 +193,22 @@ impl<'tcx> Key for (DefId, SubstsRef<'tcx>) {\n     }\n }\n \n+impl<'tcx> Key\n+    for (\n+        (ty::WithOptConstParam<DefId>, SubstsRef<'tcx>),\n+        (ty::WithOptConstParam<DefId>, SubstsRef<'tcx>),\n+    )\n+{\n+    type CacheSelector = DefaultCacheSelector;\n+\n+    fn query_crate(&self) -> CrateNum {\n+        (self.0).0.did.krate\n+    }\n+    fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n+        (self.0).0.did.default_span(tcx)\n+    }\n+}\n+\n impl<'tcx> Key for (LocalDefId, DefId, SubstsRef<'tcx>) {\n     type CacheSelector = DefaultCacheSelector;\n "}, {"sha": "c4df0bba726cb9d0929c355b7f0021e88061c0e0", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c3a772f55f2263cd2f2709f2bb187f59a8b4a673/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3a772f55f2263cd2f2709f2bb187f59a8b4a673/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=c3a772f55f2263cd2f2709f2bb187f59a8b4a673", "patch": "@@ -576,7 +576,20 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n             new_val.map(ty::ConstKind::Value)\n         }\n \n-        // FIXME(const_generics): this is wrong, as it is a projection\n+        (\n+            ty::ConstKind::Unevaluated(a_def, a_substs, None),\n+            ty::ConstKind::Unevaluated(b_def, b_substs, None),\n+        ) if tcx.features().const_evaluatable_checked => {\n+            if tcx.try_unify_abstract_consts(((a_def, a_substs), (b_def, b_substs))) {\n+                Ok(a.val)\n+            } else {\n+                Err(TypeError::ConstMismatch(expected_found(relation, a, b)))\n+            }\n+        }\n+\n+        // While this is slightly incorrect, it shouldn't matter for `min_const_generics`\n+        // and is the better alternative to waiting until `const_evaluatable_checked` can\n+        // be stabilized.\n         (\n             ty::ConstKind::Unevaluated(a_def, a_substs, a_promoted),\n             ty::ConstKind::Unevaluated(b_def, b_substs, b_promoted),"}, {"sha": "e14af1a27ef447be9449de339e0187eca81d59b3", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c3a772f55f2263cd2f2709f2bb187f59a8b4a673/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3a772f55f2263cd2f2709f2bb187f59a8b4a673/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=c3a772f55f2263cd2f2709f2bb187f59a8b4a673", "patch": "@@ -269,7 +269,27 @@ pub(super) fn mir_abstract_const<'tcx>(\n     }\n }\n \n-pub fn try_unify<'tcx>(tcx: TyCtxt<'tcx>, a: AbstractConst<'tcx>, b: AbstractConst<'tcx>) -> bool {\n+pub(super) fn try_unify_abstract_consts<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    ((a, a_substs), (b, b_substs)): (\n+        (ty::WithOptConstParam<DefId>, SubstsRef<'tcx>),\n+        (ty::WithOptConstParam<DefId>, SubstsRef<'tcx>),\n+    ),\n+) -> bool {\n+    if let Some(a) = AbstractConst::new(tcx, a, a_substs) {\n+        if let Some(b) = AbstractConst::new(tcx, b, b_substs) {\n+            return try_unify(tcx, a, b);\n+        }\n+    }\n+\n+    false\n+}\n+\n+pub(super) fn try_unify<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    a: AbstractConst<'tcx>,\n+    b: AbstractConst<'tcx>,\n+) -> bool {\n     match (a.root(), b.root()) {\n         (Node::Leaf(a_ct), Node::Leaf(b_ct)) => {\n             let a_ct = a_ct.subst(tcx, a.substs);"}, {"sha": "5b4314598deb5e43f7f3f6914895bd6b77df7d6d", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c3a772f55f2263cd2f2709f2bb187f59a8b4a673/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3a772f55f2263cd2f2709f2bb187f59a8b4a673/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=c3a772f55f2263cd2f2709f2bb187f59a8b4a673", "patch": "@@ -476,6 +476,25 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n \n                 ty::PredicateAtom::ConstEquate(c1, c2) => {\n                     debug!(\"equating consts: c1={:?} c2={:?}\", c1, c2);\n+                    if self.selcx.tcx().features().const_evaluatable_checked {\n+                        // FIXME: we probably should only try to unify abstract constants\n+                        // if the constants depend on generic parameters.\n+                        //\n+                        // Let's just see where this breaks :shrug:\n+                        if let (\n+                            ty::ConstKind::Unevaluated(a_def, a_substs, None),\n+                            ty::ConstKind::Unevaluated(b_def, b_substs, None),\n+                        ) = (c1.val, c2.val)\n+                        {\n+                            if self\n+                                .selcx\n+                                .tcx()\n+                                .try_unify_abstract_consts(((a_def, a_substs), (b_def, b_substs)))\n+                            {\n+                                return ProcessResult::Changed(vec![]);\n+                            }\n+                        }\n+                    }\n \n                     let stalled_on = &mut pending_obligation.stalled_on;\n "}, {"sha": "098336453bc6927d939e1553bf51b87f7e1d4aa6", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c3a772f55f2263cd2f2709f2bb187f59a8b4a673/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3a772f55f2263cd2f2709f2bb187f59a8b4a673/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=c3a772f55f2263cd2f2709f2bb187f59a8b4a673", "patch": "@@ -566,6 +566,7 @@ pub fn provide(providers: &mut ty::query::Providers) {\n                 ty::WithOptConstParam { did, const_param_did: Some(param_did) },\n             )\n         },\n+        try_unify_abstract_consts: const_evaluatable::try_unify_abstract_consts,\n         ..*providers\n     };\n }"}, {"sha": "3cac604a7b33a0d1e1b419c2ba87139c29884344", "filename": "src/test/ui/const-generics/const_evaluatable_checked/simple.min.stderr", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c3a772f55f2263cd2f2709f2bb187f59a8b4a673/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c3a772f55f2263cd2f2709f2bb187f59a8b4a673/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple.min.stderr?ref=c3a772f55f2263cd2f2709f2bb187f59a8b4a673", "patch": "@@ -1,10 +1,18 @@\n error: generic parameters must not be used inside of non trivial constant values\n-  --> $DIR/simple.rs:8:33\n+  --> $DIR/simple.rs:8:53\n    |\n-LL | type Arr<const N: usize> = [u8; N - 1];\n-   |                                 ^ non-trivial anonymous constants must not depend on the parameter `N`\n+LL | fn test<const N: usize>() -> [u8; N - 1] where [u8; N - 1]: Default {\n+   |                                                     ^ non-trivial anonymous constants must not depend on the parameter `N`\n    |\n    = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n \n-error: aborting due to previous error\n+error: generic parameters must not be used inside of non trivial constant values\n+  --> $DIR/simple.rs:8:35\n+   |\n+LL | fn test<const N: usize>() -> [u8; N - 1] where [u8; N - 1]: Default {\n+   |                                   ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |\n+   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "dcf0071cb29b6eb5898367e390d3200939075243", "filename": "src/test/ui/const-generics/const_evaluatable_checked/simple.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c3a772f55f2263cd2f2709f2bb187f59a8b4a673/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3a772f55f2263cd2f2709f2bb187f59a8b4a673/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple.rs?ref=c3a772f55f2263cd2f2709f2bb187f59a8b4a673", "patch": "@@ -5,10 +5,9 @@\n #![feature(const_evaluatable_checked)]\n #![allow(incomplete_features)]\n \n-type Arr<const N: usize> = [u8; N - 1];\n-//[min]~^ ERROR generic parameters must not be used inside of non trivial constant values\n-\n-fn test<const N: usize>() -> Arr<N> where Arr<N>: Default {\n+fn test<const N: usize>() -> [u8; N - 1] where [u8; N - 1]: Default {\n+    //[min]~^ ERROR generic parameters\n+    //[min]~| ERROR generic parameters\n     Default::default()\n }\n "}]}