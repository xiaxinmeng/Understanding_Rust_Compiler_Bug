{"sha": "e40cb6a9ddcfd64145aaedb77df3748d9b48e5ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0MGNiNmE5ZGRjZmQ2NDE0NWFhZWRiNzdkZjM3NDhkOWI0OGU1YWM=", "commit": {"author": {"name": "Daniel S Poulin", "email": "crimsonmage+github@gmail.com", "date": "2016-11-20T03:16:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-11-20T03:16:36Z"}, "message": "Further clarify recommended usage\n\nPushed the section on hard dependency installation to the bottom of the usage methods to further discourage its use. Also included a note in that section warning that it is not the recommended method. Lastly, changed what was said in the opening paragraph of the Usage section to reflect the multitude of options.", "tree": {"sha": "ea1e28080a2ca40368a46c2250ecc2b5d2a8536b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea1e28080a2ca40368a46c2250ecc2b5d2a8536b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e40cb6a9ddcfd64145aaedb77df3748d9b48e5ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e40cb6a9ddcfd64145aaedb77df3748d9b48e5ac", "html_url": "https://github.com/rust-lang/rust/commit/e40cb6a9ddcfd64145aaedb77df3748d9b48e5ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e40cb6a9ddcfd64145aaedb77df3748d9b48e5ac/comments", "author": {"login": "EpocSquadron", "id": 414963, "node_id": "MDQ6VXNlcjQxNDk2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/414963?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EpocSquadron", "html_url": "https://github.com/EpocSquadron", "followers_url": "https://api.github.com/users/EpocSquadron/followers", "following_url": "https://api.github.com/users/EpocSquadron/following{/other_user}", "gists_url": "https://api.github.com/users/EpocSquadron/gists{/gist_id}", "starred_url": "https://api.github.com/users/EpocSquadron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EpocSquadron/subscriptions", "organizations_url": "https://api.github.com/users/EpocSquadron/orgs", "repos_url": "https://api.github.com/users/EpocSquadron/repos", "events_url": "https://api.github.com/users/EpocSquadron/events{/privacy}", "received_events_url": "https://api.github.com/users/EpocSquadron/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a415f67de1ec31bdced89876f2c9e2fe81db5e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a415f67de1ec31bdced89876f2c9e2fe81db5e8", "html_url": "https://github.com/rust-lang/rust/commit/5a415f67de1ec31bdced89876f2c9e2fe81db5e8"}], "stats": {"total": 74, "additions": 38, "deletions": 36}, "files": [{"sha": "3c107bbe4aba8fcb3921ac6e31064c6a04b51561", "filename": "README.md", "status": "modified", "additions": 38, "deletions": 36, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/e40cb6a9ddcfd64145aaedb77df3748d9b48e5ac/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/e40cb6a9ddcfd64145aaedb77df3748d9b48e5ac/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=e40cb6a9ddcfd64145aaedb77df3748d9b48e5ac", "patch": "@@ -18,8 +18,9 @@ Table of contents:\n ## Usage\n \n Since this is a tool for helping the developer of a library or application\n-write better code, it is recommended to include clippy as an optional\n-dependency.\n+write better code, it is recommended not to include clippy as a hard dependency.\n+Options include using it as an optional dependency, as a cargo subcommand, or\n+as an included feature during build. All of these options are detailed below.\n \n As a general rule clippy will only work with the *latest* Rust nightly for now.\n \n@@ -52,8 +53,43 @@ Instead of adding the `cfg_attr` attributes you can also run clippy on demand:\n (the `-Z no trans`, while not neccessary, will stop the compilation process after\n typechecking (and lints) have completed, which can significantly reduce the runtime).\n \n+### As a cargo subcommand (`cargo clippy`)\n+\n+An alternate way to use clippy is by installing clippy through cargo as a cargo\n+subcommand.\n+\n+```terminal\n+cargo install clippy\n+```\n+\n+Now you can run clippy by invoking `cargo clippy`, or\n+`rustup run nightly cargo clippy` directly from a directory that is usually\n+compiled with stable.\n+\n+In case you are not using rustup, you need to set the environment flag\n+`SYSROOT` during installation so clippy knows where to find `librustc` and\n+similar crates.\n+\n+```terminal\n+SYSROOT=/path/to/rustc/sysroot cargo install clippy\n+```\n+\n+### Running clippy from the command line without installing\n+\n+To have cargo compile your crate with clippy without needing `#![plugin(clippy)]`\n+in your code, you can use:\n+\n+```terminal\n+cargo rustc -- -L /path/to/clippy_so -Z extra-plugins=clippy\n+```\n+\n+*[Note](https://github.com/Manishearth/rust-clippy/wiki#a-word-of-warning):*\n+Be sure that clippy was compiled with the same version of rustc that cargo invokes here!\n+\n ### As a Compiler Plugin\n \n+*Note:* This is not a recommended installation method.\n+\n Since stable Rust is backwards compatible, you should be able to\n compile your stable programs with nightly Rust with clippy plugged in to\n circumvent this.\n@@ -97,40 +133,6 @@ src/main.rs:8:5: 11:6 help: Try\n if let Some(y) = x { println!(\"{:?}\", y) }\n ```\n \n-### As a cargo subcommand (`cargo clippy`)\n-\n-An alternate way to use clippy is by installing clippy through cargo as a cargo\n-subcommand.\n-\n-```terminal\n-cargo install clippy\n-```\n-\n-Now you can run clippy by invoking `cargo clippy`, or\n-`rustup run nightly cargo clippy` directly from a directory that is usually\n-compiled with stable.\n-\n-In case you are not using rustup, you need to set the environment flag\n-`SYSROOT` during installation so clippy knows where to find `librustc` and\n-similar crates.\n-\n-```terminal\n-SYSROOT=/path/to/rustc/sysroot cargo install clippy\n-```\n-\n-### Running clippy from the command line without installing\n-\n-To have cargo compile your crate with clippy without needing `#![plugin(clippy)]`\n-in your code, you can use:\n-\n-```terminal\n-cargo rustc -- -L /path/to/clippy_so -Z extra-plugins=clippy\n-```\n-\n-*[Note](https://github.com/Manishearth/rust-clippy/wiki#a-word-of-warning):*\n-Be sure that clippy was compiled with the same version of rustc that cargo invokes here!\n-\n-\n ## Configuration\n \n Some lints can be configured in a `clippy.toml` file. It contains basic `variable = value` mapping eg."}]}