{"sha": "5d744e94c2d79573c40de0bfa23345a3a136efb6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkNzQ0ZTk0YzJkNzk1NzNjNDBkZTBiZmEyMzM0NWEzYTEzNmVmYjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-11T09:47:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-11T09:47:06Z"}, "message": "Auto merge of #44410 - alexcrichton:fix-travis, r=Mark-Simulacrum\n\nFix sanitizer tests on buggy kernels\n\nTravis recently pushed an update to the Linux environments, namely the kernels\nthat we're running on. This in turn caused some of the sanitizer tests we run to\nfail. We also apparently weren't the first to hit these failures! Detailed in\ngoogle/sanitizers#837 these tests were failing due to a specific commit in the\nkernel which has since been backed out, but for now work around the buggy kernel\nthat's deployed on Travis and eventually we should be able to remove these\nflags.", "tree": {"sha": "b4420131ee7ba2c36b9f5ab707733a6b1113967f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4420131ee7ba2c36b9f5ab707733a6b1113967f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d744e94c2d79573c40de0bfa23345a3a136efb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d744e94c2d79573c40de0bfa23345a3a136efb6", "html_url": "https://github.com/rust-lang/rust/commit/5d744e94c2d79573c40de0bfa23345a3a136efb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d744e94c2d79573c40de0bfa23345a3a136efb6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0b34199ba6f7c922e7832160328c2a4e90b6ac6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0b34199ba6f7c922e7832160328c2a4e90b6ac6", "html_url": "https://github.com/rust-lang/rust/commit/a0b34199ba6f7c922e7832160328c2a4e90b6ac6"}, {"sha": "43efccee89bdfa2c5e7b47c7ca4b85f6bba36ec3", "url": "https://api.github.com/repos/rust-lang/rust/commits/43efccee89bdfa2c5e7b47c7ca4b85f6bba36ec3", "html_url": "https://github.com/rust-lang/rust/commit/43efccee89bdfa2c5e7b47c7ca4b85f6bba36ec3"}], "stats": {"total": 45, "additions": 31, "deletions": 14}, "files": [{"sha": "23bae6d9f1721eba30a74acc68beb90e1ce5dbd7", "filename": ".travis.yml", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d744e94c2d79573c40de0bfa23345a3a136efb6/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/5d744e94c2d79573c40de0bfa23345a3a136efb6/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=5d744e94c2d79573c40de0bfa23345a3a136efb6", "patch": "@@ -1,8 +1,6 @@\n language: shell\n sudo: required\n dist: trusty\n-# FIXME(#44398) shouldn't need to be here\n-group: deprecated-2017Q3\n services:\n   - docker\n "}, {"sha": "d0ac8903f10f5cf54226801f2628940dd71a251d", "filename": "src/test/run-make/sanitizer-address/Makefile", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5d744e94c2d79573c40de0bfa23345a3a136efb6/src%2Ftest%2Frun-make%2Fsanitizer-address%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/5d744e94c2d79573c40de0bfa23345a3a136efb6/src%2Ftest%2Frun-make%2Fsanitizer-address%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-address%2FMakefile?ref=5d744e94c2d79573c40de0bfa23345a3a136efb6", "patch": "@@ -1,5 +1,7 @@\n -include ../tools.mk\n \n+LOG := $(TMPDIR)/log.txt\n+\n # NOTE the address sanitizer only supports x86_64 linux and macOS\n \n ifeq ($(TARGET),x86_64-apple-darwin)\n@@ -8,12 +10,21 @@ EXTRA_RUSTFLAG=-C rpath\n else\n ifeq ($(TARGET),x86_64-unknown-linux-gnu)\n ASAN_SUPPORT=$(SANITIZER_SUPPORT)\n-EXTRA_RUSTFLAG=\n+\n+# Apparently there are very specific Linux kernels, notably the one that's\n+# currently on Travis CI, which contain a buggy commit that triggers failures in\n+# the ASan implementation, detailed at google/sanitizers#837. As noted in\n+# google/sanitizers#856 the \"fix\" is to avoid using PIE binaries, so we pass a\n+# different relocation model to avoid generating a PIE binary. Once Travis is no\n+# longer running kernel 4.4.0-93 we can remove this and pass an empty set of\n+# flags again.\n+EXTRA_RUSTFLAG=-C relocation-model=dynamic-no-pic\n endif\n endif\n \n all:\n ifeq ($(ASAN_SUPPORT),1)\n \t$(RUSTC) -g -Z sanitizer=address -Z print-link-args $(EXTRA_RUSTFLAG) overflow.rs | grep -q librustc_asan\n-\t$(TMPDIR)/overflow 2>&1 | grep -q stack-buffer-overflow\n+\t$(TMPDIR)/overflow 2>&1 | tee $(LOG)\n+\tgrep -q stack-buffer-overflow $(LOG)\n endif"}, {"sha": "0cc4334f17f4c4f425f3793efd786f7333085aa5", "filename": "src/test/run-make/sanitizer-cdylib-link/Makefile", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5d744e94c2d79573c40de0bfa23345a3a136efb6/src%2Ftest%2Frun-make%2Fsanitizer-cdylib-link%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/5d744e94c2d79573c40de0bfa23345a3a136efb6/src%2Ftest%2Frun-make%2Fsanitizer-cdylib-link%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-cdylib-link%2FMakefile?ref=5d744e94c2d79573c40de0bfa23345a3a136efb6", "patch": "@@ -1,19 +1,23 @@\n -include ../tools.mk\n \n+LOG := $(TMPDIR)/log.txt\n+\n # This test builds a shared object, then an executable that links it as a native\n # rust library (constrast to an rlib). The shared library and executable both\n # are compiled with address sanitizer, and we assert that a fault in the cdylib\n # is correctly detected.\n \n ifeq ($(TARGET),x86_64-unknown-linux-gnu)\n ASAN_SUPPORT=$(SANITIZER_SUPPORT)\n-EXTRA_RUSTFLAG=\n+\n+# See comment in sanitizer-address/Makefile for why this is here\n+EXTRA_RUSTFLAG=-C relocation-model=dynamic-no-pic\n endif\n \n all:\n ifeq ($(ASAN_SUPPORT),1)\n-\t$(RUSTC) -g -Z sanitizer=address --crate-type cdylib --target $(TARGET) library.rs\n-\t$(RUSTC) -g -Z sanitizer=address --crate-type bin --target $(TARGET) -llibrary program.rs\n-\tLD_LIBRARY_PATH=$(TMPDIR) $(TMPDIR)/program 2>&1 | grep -q stack-buffer-overflow\n+\t$(RUSTC) -g -Z sanitizer=address --crate-type cdylib --target $(TARGET) $(EXTRA_RUSTFLAG) library.rs\n+\t$(RUSTC) -g -Z sanitizer=address --crate-type bin --target $(TARGET) $(EXTRA_RUSTFLAG) -llibrary program.rs\n+\tLD_LIBRARY_PATH=$(TMPDIR) $(TMPDIR)/program 2>&1 | tee $(LOG)\n+\tgrep -q stack-buffer-overflow $(LOG)\n endif\n-"}, {"sha": "cdf0b91c1efa7dfbaffa8b21ac101aa1e953179c", "filename": "src/test/run-make/sanitizer-dylib-link/Makefile", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5d744e94c2d79573c40de0bfa23345a3a136efb6/src%2Ftest%2Frun-make%2Fsanitizer-dylib-link%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/5d744e94c2d79573c40de0bfa23345a3a136efb6/src%2Ftest%2Frun-make%2Fsanitizer-dylib-link%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-dylib-link%2FMakefile?ref=5d744e94c2d79573c40de0bfa23345a3a136efb6", "patch": "@@ -1,19 +1,23 @@\n -include ../tools.mk\n \n+LOG := $(TMPDIR)/log.txt\n+\n # This test builds a shared object, then an executable that links it as a native\n # rust library (constrast to an rlib). The shared library and executable both\n # are compiled with address sanitizer, and we assert that a fault in the dylib\n # is correctly detected.\n \n ifeq ($(TARGET),x86_64-unknown-linux-gnu)\n ASAN_SUPPORT=$(SANITIZER_SUPPORT)\n-EXTRA_RUSTFLAG=\n+\n+# See comment in sanitizer-address/Makefile for why this is here\n+EXTRA_RUSTFLAG=-C relocation-model=dynamic-no-pic\n endif\n \n all:\n ifeq ($(ASAN_SUPPORT),1)\n-\t$(RUSTC) -g -Z sanitizer=address --crate-type dylib --target $(TARGET) library.rs\n-\t$(RUSTC) -g -Z sanitizer=address --crate-type bin --target $(TARGET) -llibrary program.rs\n-\tLD_LIBRARY_PATH=$(TMPDIR) $(TMPDIR)/program 2>&1 | grep -q stack-buffer-overflow\n+\t$(RUSTC) -g -Z sanitizer=address --crate-type dylib --target $(TARGET) $(EXTRA_RUSTFLAG) library.rs\n+\t$(RUSTC) -g -Z sanitizer=address --crate-type bin --target $(TARGET) $(EXTRA_RUSTFLAG) -llibrary program.rs\n+\tLD_LIBRARY_PATH=$(TMPDIR) $(TMPDIR)/program 2>&1 | tee $(LOG)\n+\tgrep -q stack-buffer-overflow $(LOG)\n endif\n-"}]}