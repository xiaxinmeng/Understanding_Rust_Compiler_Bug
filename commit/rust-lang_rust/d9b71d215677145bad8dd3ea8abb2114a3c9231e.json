{"sha": "d9b71d215677145bad8dd3ea8abb2114a3c9231e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5YjcxZDIxNTY3NzE0NWJhZDhkZDNlYThhYmIyMTE0YTNjOTIzMWU=", "commit": {"author": {"name": "Roman Stoliar", "email": "rizakrko@rambler.ru", "date": "2018-05-09T09:38:09Z"}, "committer": {"name": "Roman Stoliar", "email": "rizakrko@rambler.ru", "date": "2018-05-11T12:12:53Z"}, "message": "fixed double ref hint", "tree": {"sha": "4a489e719d39df8b4846e8167f91978de1c2f605", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a489e719d39df8b4846e8167f91978de1c2f605"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9b71d215677145bad8dd3ea8abb2114a3c9231e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9b71d215677145bad8dd3ea8abb2114a3c9231e", "html_url": "https://github.com/rust-lang/rust/commit/d9b71d215677145bad8dd3ea8abb2114a3c9231e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9b71d215677145bad8dd3ea8abb2114a3c9231e/comments", "author": {"login": "rizakrko", "id": 18172179, "node_id": "MDQ6VXNlcjE4MTcyMTc5", "avatar_url": "https://avatars.githubusercontent.com/u/18172179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rizakrko", "html_url": "https://github.com/rizakrko", "followers_url": "https://api.github.com/users/rizakrko/followers", "following_url": "https://api.github.com/users/rizakrko/following{/other_user}", "gists_url": "https://api.github.com/users/rizakrko/gists{/gist_id}", "starred_url": "https://api.github.com/users/rizakrko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rizakrko/subscriptions", "organizations_url": "https://api.github.com/users/rizakrko/orgs", "repos_url": "https://api.github.com/users/rizakrko/repos", "events_url": "https://api.github.com/users/rizakrko/events{/privacy}", "received_events_url": "https://api.github.com/users/rizakrko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rizakrko", "id": 18172179, "node_id": "MDQ6VXNlcjE4MTcyMTc5", "avatar_url": "https://avatars.githubusercontent.com/u/18172179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rizakrko", "html_url": "https://github.com/rizakrko", "followers_url": "https://api.github.com/users/rizakrko/followers", "following_url": "https://api.github.com/users/rizakrko/following{/other_user}", "gists_url": "https://api.github.com/users/rizakrko/gists{/gist_id}", "starred_url": "https://api.github.com/users/rizakrko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rizakrko/subscriptions", "organizations_url": "https://api.github.com/users/rizakrko/orgs", "repos_url": "https://api.github.com/users/rizakrko/repos", "events_url": "https://api.github.com/users/rizakrko/events{/privacy}", "received_events_url": "https://api.github.com/users/rizakrko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "747d5d99cdbe49d590b3e0b8856953f1a545fdd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/747d5d99cdbe49d590b3e0b8856953f1a545fdd7", "html_url": "https://github.com/rust-lang/rust/commit/747d5d99cdbe49d590b3e0b8856953f1a545fdd7"}], "stats": {"total": 54, "additions": 35, "deletions": 19}, "files": [{"sha": "629b02bdf13c26379e06d1b810de84614d866568", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 34, "deletions": 18, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/d9b71d215677145bad8dd3ea8abb2114a3c9231e/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b71d215677145bad8dd3ea8abb2114a3c9231e/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=d9b71d215677145bad8dd3ea8abb2114a3c9231e", "patch": "@@ -258,7 +258,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                     format!(\"cannot use `{}=` on type `{}`\",\n                                     op.node.as_str(), lhs_ty));\n                             let mut suggested_deref = false;\n-                            if let TyRef(_, ref ty_mut) = lhs_ty.sty {\n+                            if let TyRef(_, mut ty_mut) = lhs_ty.sty {\n                                 if {\n                                     !self.infcx.type_moves_by_default(self.param_env,\n                                                                         ty_mut.ty,\n@@ -269,10 +269,16 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                             .is_ok()\n                                 } {\n                                     if let Ok(lstring) = codemap.span_to_snippet(lhs_expr.span) {\n+                                        while let TyRef(_, ty_mut_inner) = ty_mut.ty.sty{\n+                                            ty_mut = ty_mut_inner;\n+                                        }\n                                         let msg = &format!(\n                                                 \"`{}=` can be used on '{}', you can \\\n                                                 dereference `{2}`: `*{2}`\",\n-                                                op.node.as_str(), ty_mut.ty, lstring);\n+                                                op.node.as_str(),\n+                                                ty_mut.ty,\n+                                                lstring\n+                                        );\n                                         err.help(msg);\n                                         suggested_deref = true;\n                                     }\n@@ -300,14 +306,16 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                     // we don't want the note in the else clause to be emitted\n                                 } else if let ty::TyParam(_) = lhs_ty.sty {\n                                     // FIXME: point to span of param\n-                                    err.note(\n-                                        &format!(\"`{}` might need a bound for `{}`\",\n-                                                    lhs_ty, missing_trait));\n+                                    err.note(&format!(\n+                                        \"`{}` might need a bound for `{}`\",\n+                                        lhs_ty, missing_trait\n+                                    ));\n                                 } else if !suggested_deref {\n-                                    err.note(\n-                                        &format!(\"an implementation of `{}` might \\\n-                                                    be missing for `{}`\",\n-                                                    missing_trait, lhs_ty));\n+                                    err.note(&format!(\n+                                        \"an implementation of `{}` might \\\n+                                         be missing for `{}`\",\n+                                        missing_trait, lhs_ty\n+                                    ));\n                                 }\n                             }\n                             err.emit();\n@@ -318,7 +326,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                             op.node.as_str(),\n                                             lhs_ty);\n                             let mut suggested_deref = false;\n-                            if let TyRef(_, ref ty_mut) = lhs_ty.sty {\n+                            if let TyRef(_, mut ty_mut) = lhs_ty.sty {\n                                 if {\n                                     !self.infcx.type_moves_by_default(self.param_env,\n                                                                         ty_mut.ty,\n@@ -329,10 +337,16 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                             .is_ok()\n                                 } {\n                                     if let Ok(lstring) = codemap.span_to_snippet(lhs_expr.span) {\n+                                        while let TyRef(_, ty_mut_inner) = ty_mut.ty.sty{\n+                                            ty_mut = ty_mut_inner;\n+                                        }\n                                         let msg = &format!(\n                                                 \"`{}` can be used on '{}', you can \\\n                                                 dereference `{2}`: `*{2}`\",\n-                                                op.node.as_str(), ty_mut.ty, lstring);\n+                                                op.node.as_str(),\n+                                                ty_mut.ty,\n+                                                lstring\n+                                        );\n                                         err.help(msg);\n                                         suggested_deref = true;\n                                     }\n@@ -363,14 +377,16 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                     // we don't want the note in the else clause to be emitted\n                                 } else if let ty::TyParam(_) = lhs_ty.sty {\n                                     // FIXME: point to span of param\n-                                    err.note(\n-                                        &format!(\"`{}` might need a bound for `{}`\",\n-                                                    lhs_ty, missing_trait));\n+                                    err.note(&format!(\n+                                        \"`{}` might need a bound for `{}`\",\n+                                        lhs_ty, missing_trait\n+                                    ));\n                                 } else if !suggested_deref {\n-                                    err.note(\n-                                        &format!(\"an implementation of `{}` might \\\n-                                                    be missing for `{}`\",\n-                                                    missing_trait, lhs_ty));\n+                                    err.note(&format!(\n+                                        \"an implementation of `{}` might \\\n+                                         be missing for `{}`\",\n+                                        missing_trait, lhs_ty\n+                                    ));\n                                 }\n                             }\n                             err.emit();"}, {"sha": "c89defa3dd196d97a4a8822a33b37b1a933b527a", "filename": "src/test/ui/binary-op-on-double-ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9b71d215677145bad8dd3ea8abb2114a3c9231e/src%2Ftest%2Fui%2Fbinary-op-on-double-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9b71d215677145bad8dd3ea8abb2114a3c9231e/src%2Ftest%2Fui%2Fbinary-op-on-double-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinary-op-on-double-ref.stderr?ref=d9b71d215677145bad8dd3ea8abb2114a3c9231e", "patch": "@@ -4,7 +4,7 @@ error[E0369]: binary operation `%` cannot be applied to type `&&{integer}`\n LL |         x % 2 == 0\n    |         ^^^^^\n    |\n-   = help: `%` can be used on '&{integer}', you can dereference `x`: `*x`\n+   = help: `%` can be used on '{integer}', you can dereference `x`: `*x`\n \n error: aborting due to previous error\n "}]}