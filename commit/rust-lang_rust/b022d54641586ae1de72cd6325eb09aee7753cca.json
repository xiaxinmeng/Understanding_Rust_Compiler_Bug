{"sha": "b022d54641586ae1de72cd6325eb09aee7753cca", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwMjJkNTQ2NDE1ODZhZTFkZTcyY2Q2MzI1ZWIwOWFlZTc3NTNjY2E=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-07-21T16:15:03Z"}, "committer": {"name": "Tim Neumann", "email": "mail@timnn.me", "date": "2017-07-21T17:09:10Z"}, "message": "update attributes API usage", "tree": {"sha": "64f1e5f4e1ce2e985e2a755d10e92c6abd7b133f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64f1e5f4e1ce2e985e2a755d10e92c6abd7b133f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b022d54641586ae1de72cd6325eb09aee7753cca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b022d54641586ae1de72cd6325eb09aee7753cca", "html_url": "https://github.com/rust-lang/rust/commit/b022d54641586ae1de72cd6325eb09aee7753cca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b022d54641586ae1de72cd6325eb09aee7753cca/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TimNN", "id": 1178249, "node_id": "MDQ6VXNlcjExNzgyNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1178249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimNN", "html_url": "https://github.com/TimNN", "followers_url": "https://api.github.com/users/TimNN/followers", "following_url": "https://api.github.com/users/TimNN/following{/other_user}", "gists_url": "https://api.github.com/users/TimNN/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimNN/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimNN/subscriptions", "organizations_url": "https://api.github.com/users/TimNN/orgs", "repos_url": "https://api.github.com/users/TimNN/repos", "events_url": "https://api.github.com/users/TimNN/events{/privacy}", "received_events_url": "https://api.github.com/users/TimNN/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ee87b3765b4cc0ab78aec25009e4e5295024f93", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ee87b3765b4cc0ab78aec25009e4e5295024f93", "html_url": "https://github.com/rust-lang/rust/commit/1ee87b3765b4cc0ab78aec25009e4e5295024f93"}], "stats": {"total": 27, "additions": 26, "deletions": 1}, "files": [{"sha": "15a04ba00e2a50fc47be5790979d53df2ad20c14", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b022d54641586ae1de72cd6325eb09aee7753cca/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/b022d54641586ae1de72cd6325eb09aee7753cca/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=b022d54641586ae1de72cd6325eb09aee7753cca", "patch": "@@ -167,10 +167,14 @@ extern \"C\" void LLVMRustAddCallSiteAttribute(LLVMValueRef Instr, unsigned Index,\n                                              LLVMRustAttribute RustAttr) {\n   CallSite Call = CallSite(unwrap<Instruction>(Instr));\n   Attribute Attr = Attribute::get(Call->getContext(), fromRust(RustAttr));\n+#if LLVM_VERSION_GE(5, 0)\n+  Call.addAttribute(Index, Attr);\n+#else\n   AttrBuilder B(Attr);\n   Call.setAttributes(Call.getAttributes().addAttributes(\n       Call->getContext(), Index,\n       AttributeSet::get(Call->getContext(), Index, B)));\n+#endif\n }\n \n extern \"C\" void LLVMRustAddDereferenceableCallSiteAttr(LLVMValueRef Instr,\n@@ -179,25 +183,38 @@ extern \"C\" void LLVMRustAddDereferenceableCallSiteAttr(LLVMValueRef Instr,\n   CallSite Call = CallSite(unwrap<Instruction>(Instr));\n   AttrBuilder B;\n   B.addDereferenceableAttr(Bytes);\n+#if LLVM_VERSION_GE(5, 0)\n+  Call.setAttributes(Call.getAttributes().addAttributes(\n+      Call->getContext(), Index, B));\n+#else\n   Call.setAttributes(Call.getAttributes().addAttributes(\n       Call->getContext(), Index,\n       AttributeSet::get(Call->getContext(), Index, B)));\n+#endif\n }\n \n extern \"C\" void LLVMRustAddFunctionAttribute(LLVMValueRef Fn, unsigned Index,\n                                              LLVMRustAttribute RustAttr) {\n   Function *A = unwrap<Function>(Fn);\n   Attribute Attr = Attribute::get(A->getContext(), fromRust(RustAttr));\n   AttrBuilder B(Attr);\n+#if LLVM_VERSION_GE(5, 0)\n+  A->addAttributes(Index, B);\n+#else\n   A->addAttributes(Index, AttributeSet::get(A->getContext(), Index, B));\n+#endif\n }\n \n extern \"C\" void LLVMRustAddDereferenceableAttr(LLVMValueRef Fn, unsigned Index,\n                                                uint64_t Bytes) {\n   Function *A = unwrap<Function>(Fn);\n   AttrBuilder B;\n   B.addDereferenceableAttr(Bytes);\n+#if LLVM_VERSION_GE(5, 0)\n+  A->addAttributes(Index, B);\n+#else\n   A->addAttributes(Index, AttributeSet::get(A->getContext(), Index, B));\n+#endif\n }\n \n extern \"C\" void LLVMRustAddFunctionAttrStringValue(LLVMValueRef Fn,\n@@ -207,18 +224,26 @@ extern \"C\" void LLVMRustAddFunctionAttrStringValue(LLVMValueRef Fn,\n   Function *F = unwrap<Function>(Fn);\n   AttrBuilder B;\n   B.addAttribute(Name, Value);\n+#if LLVM_VERSION_GE(5, 0)\n+  F->addAttributes(Index, B);\n+#else\n   F->addAttributes(Index, AttributeSet::get(F->getContext(), Index, B));\n+#endif\n }\n \n extern \"C\" void LLVMRustRemoveFunctionAttributes(LLVMValueRef Fn,\n                                                  unsigned Index,\n                                                  LLVMRustAttribute RustAttr) {\n   Function *F = unwrap<Function>(Fn);\n-  const AttributeSet PAL = F->getAttributes();\n   Attribute Attr = Attribute::get(F->getContext(), fromRust(RustAttr));\n   AttrBuilder B(Attr);\n+  auto PAL = F->getAttributes();\n+#if LLVM_VERSION_GE(5, 0)\n+  auto PALNew = PAL.removeAttributes(F->getContext(), Index, B);\n+#else\n   const AttributeSet PALNew = PAL.removeAttributes(\n       F->getContext(), Index, AttributeSet::get(F->getContext(), Index, B));\n+#endif\n   F->setAttributes(PALNew);\n }\n "}]}