{"sha": "7c81fff52015b044a0d5dfadcd1e8caa2f237ea3", "node_id": "C_kwDOAAsO6NoAKDdjODFmZmY1MjAxNWIwNDRhMGQ1ZGZhZGNkMWU4Y2FhMmYyMzdlYTM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-26T20:17:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-26T20:17:24Z"}, "message": "Auto merge of #14910 - Veykril:cargo-features, r=Veykril\n\nFilter out unused cargo features from config\n\nCloses https://github.com/rust-lang/rust-analyzer/issues/11836", "tree": {"sha": "e9d1511812df2e074c3a2768d9278458b18f5f4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9d1511812df2e074c3a2768d9278458b18f5f4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c81fff52015b044a0d5dfadcd1e8caa2f237ea3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c81fff52015b044a0d5dfadcd1e8caa2f237ea3", "html_url": "https://github.com/rust-lang/rust/commit/7c81fff52015b044a0d5dfadcd1e8caa2f237ea3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c81fff52015b044a0d5dfadcd1e8caa2f237ea3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e6ae6bac701e8c49f7f303548b162bcb9839dfb", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e6ae6bac701e8c49f7f303548b162bcb9839dfb", "html_url": "https://github.com/rust-lang/rust/commit/9e6ae6bac701e8c49f7f303548b162bcb9839dfb"}, {"sha": "35b208aaa72b5848050ac4e2d3094ecd948cf3a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/35b208aaa72b5848050ac4e2d3094ecd948cf3a5", "html_url": "https://github.com/rust-lang/rust/commit/35b208aaa72b5848050ac4e2d3094ecd948cf3a5"}], "stats": {"total": 62, "additions": 50, "deletions": 12}, "files": [{"sha": "622da105fdd44711eb7c9d227e3f3ee71e60dfe3", "filename": ".github/workflows/ci.yaml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c81fff52015b044a0d5dfadcd1e8caa2f237ea3/.github%2Fworkflows%2Fci.yaml", "raw_url": "https://github.com/rust-lang/rust/raw/7c81fff52015b044a0d5dfadcd1e8caa2f237ea3/.github%2Fworkflows%2Fci.yaml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yaml?ref=7c81fff52015b044a0d5dfadcd1e8caa2f237ea3", "patch": "@@ -58,7 +58,6 @@ jobs:\n         uses: actions/checkout@v3\n         with:\n           ref: ${{ github.event.pull_request.head.sha }}\n-          fetch-depth: 20\n \n       - name: Install Rust toolchain\n         run: |"}, {"sha": "f9c5417ffb573633926bc07e53a60c39220019c5", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c81fff52015b044a0d5dfadcd1e8caa2f237ea3/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/7c81fff52015b044a0d5dfadcd1e8caa2f237ea3/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=7c81fff52015b044a0d5dfadcd1e8caa2f237ea3", "patch": "@@ -1334,6 +1334,7 @@ dependencies = [\n  \"cargo_metadata\",\n  \"cfg\",\n  \"expect-test\",\n+ \"itertools\",\n  \"la-arena\",\n  \"paths\",\n  \"profile\","}, {"sha": "3abff64a83b2f1ec2a9d8d25588d59a4a61b608c", "filename": "crates/project-model/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c81fff52015b044a0d5dfadcd1e8caa2f237ea3/crates%2Fproject-model%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7c81fff52015b044a0d5dfadcd1e8caa2f237ea3/crates%2Fproject-model%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2FCargo.toml?ref=7c81fff52015b044a0d5dfadcd1e8caa2f237ea3", "patch": "@@ -21,6 +21,7 @@ serde.workspace = true\n triomphe.workspace = true\n anyhow = \"1.0.62\"\n la-arena = { version = \"0.3.0\", path = \"../../lib/la-arena\" }\n+itertools = \"0.10.5\"\n \n # local deps\n base-db.workspace = true"}, {"sha": "6cbf403cb2e14710ee6e52911ff803dd07eb0da4", "filename": "crates/project-model/src/build_scripts.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7c81fff52015b044a0d5dfadcd1e8caa2f237ea3/crates%2Fproject-model%2Fsrc%2Fbuild_scripts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c81fff52015b044a0d5dfadcd1e8caa2f237ea3/crates%2Fproject-model%2Fsrc%2Fbuild_scripts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fbuild_scripts.rs?ref=7c81fff52015b044a0d5dfadcd1e8caa2f237ea3", "patch": "@@ -14,9 +14,10 @@ use std::{\n };\n \n use cargo_metadata::{camino::Utf8Path, Message};\n+use itertools::Itertools;\n use la_arena::ArenaMap;\n use paths::{AbsPath, AbsPathBuf};\n-use rustc_hash::FxHashMap;\n+use rustc_hash::{FxHashMap, FxHashSet};\n use semver::Version;\n use serde::Deserialize;\n \n@@ -56,7 +57,10 @@ impl BuildScriptOutput {\n }\n \n impl WorkspaceBuildScripts {\n-    fn build_command(config: &CargoConfig) -> io::Result<Command> {\n+    fn build_command(\n+        config: &CargoConfig,\n+        allowed_features: &FxHashSet<String>,\n+    ) -> io::Result<Command> {\n         let mut cmd = match config.run_build_script_command.as_deref() {\n             Some([program, args @ ..]) => {\n                 let mut cmd = Command::new(program);\n@@ -88,7 +92,12 @@ impl WorkspaceBuildScripts {\n                         }\n                         if !features.is_empty() {\n                             cmd.arg(\"--features\");\n-                            cmd.arg(features.join(\" \"));\n+                            cmd.arg(\n+                                features\n+                                    .iter()\n+                                    .filter(|&feat| allowed_features.contains(feat))\n+                                    .join(\",\"),\n+                            );\n                         }\n                     }\n                 }\n@@ -127,13 +136,20 @@ impl WorkspaceBuildScripts {\n         }\n         .as_ref();\n \n-        match Self::run_per_ws(Self::build_command(config)?, workspace, current_dir, progress) {\n+        let allowed_features = workspace.workspace_features();\n+\n+        match Self::run_per_ws(\n+            Self::build_command(config, &allowed_features)?,\n+            workspace,\n+            current_dir,\n+            progress,\n+        ) {\n             Ok(WorkspaceBuildScripts { error: Some(error), .. })\n                 if toolchain.as_ref().map_or(false, |it| *it >= RUST_1_62) =>\n             {\n                 // building build scripts failed, attempt to build with --keep-going so\n                 // that we potentially get more build data\n-                let mut cmd = Self::build_command(config)?;\n+                let mut cmd = Self::build_command(config, &allowed_features)?;\n                 cmd.args([\"-Z\", \"unstable-options\", \"--keep-going\"]).env(\"RUSTC_BOOTSTRAP\", \"1\");\n                 let mut res = Self::run_per_ws(cmd, workspace, current_dir, progress)?;\n                 res.error = Some(error);\n@@ -161,7 +177,7 @@ impl WorkspaceBuildScripts {\n                 ))\n             }\n         };\n-        let cmd = Self::build_command(config)?;\n+        let cmd = Self::build_command(config, &Default::default())?;\n         // NB: Cargo.toml could have been modified between `cargo metadata` and\n         // `cargo check`. We shouldn't assume that package ids we see here are\n         // exactly those from `config`."}, {"sha": "649a149504cfa630684c5628db40508d2262ff5f", "filename": "crates/project-model/src/cargo_workspace.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7c81fff52015b044a0d5dfadcd1e8caa2f237ea3/crates%2Fproject-model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c81fff52015b044a0d5dfadcd1e8caa2f237ea3/crates%2Fproject-model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fcargo_workspace.rs?ref=7c81fff52015b044a0d5dfadcd1e8caa2f237ea3", "patch": "@@ -10,7 +10,7 @@ use base_db::Edition;\n use cargo_metadata::{CargoOpt, MetadataCommand};\n use la_arena::{Arena, Idx};\n use paths::{AbsPath, AbsPathBuf};\n-use rustc_hash::FxHashMap;\n+use rustc_hash::{FxHashMap, FxHashSet};\n use serde::Deserialize;\n use serde_json::from_value;\n \n@@ -491,6 +491,21 @@ impl CargoWorkspace {\n         None\n     }\n \n+    /// Returns the union of the features of all member crates in this workspace.\n+    pub fn workspace_features(&self) -> FxHashSet<String> {\n+        self.packages()\n+            .filter_map(|package| {\n+                let package = &self[package];\n+                if package.is_member {\n+                    Some(package.features.keys().cloned())\n+                } else {\n+                    None\n+                }\n+            })\n+            .flatten()\n+            .collect()\n+    }\n+\n     fn is_unique(&self, name: &str) -> bool {\n         self.packages.iter().filter(|(_, v)| v.name == name).count() == 1\n     }"}, {"sha": "3035dc333080e091075f6feadc18dd9198eec85a", "filename": "crates/rust-analyzer/src/cargo_target_spec.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7c81fff52015b044a0d5dfadcd1e8caa2f237ea3/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c81fff52015b044a0d5dfadcd1e8caa2f237ea3/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs?ref=7c81fff52015b044a0d5dfadcd1e8caa2f237ea3", "patch": "@@ -5,6 +5,7 @@ use std::mem;\n use cfg::{CfgAtom, CfgExpr};\n use ide::{Cancellable, FileId, RunnableKind, TestId};\n use project_model::{self, CargoFeatures, ManifestPath, TargetKind};\n+use rustc_hash::FxHashSet;\n use vfs::AbsPathBuf;\n \n use crate::global_state::GlobalStateSnapshot;\n@@ -21,6 +22,7 @@ pub(crate) struct CargoTargetSpec {\n     pub(crate) target: String,\n     pub(crate) target_kind: TargetKind,\n     pub(crate) required_features: Vec<String>,\n+    pub(crate) features: FxHashSet<String>,\n }\n \n impl CargoTargetSpec {\n@@ -73,12 +75,13 @@ impl CargoTargetSpec {\n             }\n         }\n \n-        let target_required_features = if let Some(mut spec) = spec {\n+        let (allowed_features, target_required_features) = if let Some(mut spec) = spec {\n+            let allowed_features = mem::take(&mut spec.features);\n             let required_features = mem::take(&mut spec.required_features);\n             spec.push_to(&mut args, kind);\n-            required_features\n+            (allowed_features, required_features)\n         } else {\n-            Vec::new()\n+            (Default::default(), Default::default())\n         };\n \n         let cargo_config = snap.config.cargo();\n@@ -97,7 +100,9 @@ impl CargoTargetSpec {\n                     required_features(cfg, &mut feats);\n                 }\n \n-                feats.extend(features.iter().cloned());\n+                feats.extend(\n+                    features.iter().filter(|&feat| allowed_features.contains(feat)).cloned(),\n+                );\n                 feats.extend(target_required_features);\n \n                 feats.dedup();\n@@ -136,6 +141,7 @@ impl CargoTargetSpec {\n             target: target_data.name.clone(),\n             target_kind: target_data.kind,\n             required_features: target_data.required_features.clone(),\n+            features: package_data.features.keys().cloned().collect(),\n         };\n \n         Ok(Some(res))"}]}