{"sha": "173958ac80056416fd1905c1a07cd1b9faca82d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3Mzk1OGFjODAwNTY0MTZmZDE5MDVjMWEwN2NkMWI5ZmFjYTgyZDU=", "commit": {"author": {"name": "memoryruins", "email": "memoryruinsmusic@gmail.com", "date": "2019-10-05T07:48:14Z"}, "committer": {"name": "memoryruins", "email": "memoryruinsmusic@gmail.com", "date": "2019-10-05T07:48:14Z"}, "message": "Replaces some instances of `as *[const | mut] _` with `.cast()`", "tree": {"sha": "3d6f9d21b259abf1e91ea33e426fd69b01bc318d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d6f9d21b259abf1e91ea33e426fd69b01bc318d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/173958ac80056416fd1905c1a07cd1b9faca82d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/173958ac80056416fd1905c1a07cd1b9faca82d5", "html_url": "https://github.com/rust-lang/rust/commit/173958ac80056416fd1905c1a07cd1b9faca82d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/173958ac80056416fd1905c1a07cd1b9faca82d5/comments", "author": {"login": "memoryruins", "id": 6868531, "node_id": "MDQ6VXNlcjY4Njg1MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/6868531?v=4", "gravatar_id": "", "url": "https://api.github.com/users/memoryruins", "html_url": "https://github.com/memoryruins", "followers_url": "https://api.github.com/users/memoryruins/followers", "following_url": "https://api.github.com/users/memoryruins/following{/other_user}", "gists_url": "https://api.github.com/users/memoryruins/gists{/gist_id}", "starred_url": "https://api.github.com/users/memoryruins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/memoryruins/subscriptions", "organizations_url": "https://api.github.com/users/memoryruins/orgs", "repos_url": "https://api.github.com/users/memoryruins/repos", "events_url": "https://api.github.com/users/memoryruins/events{/privacy}", "received_events_url": "https://api.github.com/users/memoryruins/received_events", "type": "User", "site_admin": false}, "committer": {"login": "memoryruins", "id": 6868531, "node_id": "MDQ6VXNlcjY4Njg1MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/6868531?v=4", "gravatar_id": "", "url": "https://api.github.com/users/memoryruins", "html_url": "https://github.com/memoryruins", "followers_url": "https://api.github.com/users/memoryruins/followers", "following_url": "https://api.github.com/users/memoryruins/following{/other_user}", "gists_url": "https://api.github.com/users/memoryruins/gists{/gist_id}", "starred_url": "https://api.github.com/users/memoryruins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/memoryruins/subscriptions", "organizations_url": "https://api.github.com/users/memoryruins/orgs", "repos_url": "https://api.github.com/users/memoryruins/repos", "events_url": "https://api.github.com/users/memoryruins/events{/privacy}", "received_events_url": "https://api.github.com/users/memoryruins/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2daa404e9a151a2e8262cbd6d8c209fd067aca16", "url": "https://api.github.com/repos/rust-lang/rust/commits/2daa404e9a151a2e8262cbd6d8c209fd067aca16", "html_url": "https://github.com/rust-lang/rust/commit/2daa404e9a151a2e8262cbd6d8c209fd067aca16"}], "stats": {"total": 48, "additions": 24, "deletions": 24}, "files": [{"sha": "f31765cea4f122f3f4069eac19b5c09793553adc", "filename": "src/librustc_codegen_llvm/allocator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/173958ac80056416fd1905c1a07cd1b9faca82d5/src%2Flibrustc_codegen_llvm%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/173958ac80056416fd1905c1a07cd1b9faca82d5/src%2Flibrustc_codegen_llvm%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fallocator.rs?ref=173958ac80056416fd1905c1a07cd1b9faca82d5", "patch": "@@ -68,7 +68,7 @@ pub(crate) unsafe fn codegen(tcx: TyCtxt<'_>, mods: &mut ModuleLlvm, kind: Alloc\n \n         let llbb = llvm::LLVMAppendBasicBlockInContext(llcx,\n                                                        llfn,\n-                                                       \"entry\\0\".as_ptr() as *const _);\n+                                                       \"entry\\0\".as_ptr().cast());\n \n         let llbuilder = llvm::LLVMCreateBuilderInContext(llcx);\n         llvm::LLVMPositionBuilderAtEnd(llbuilder, llbb);\n@@ -80,7 +80,7 @@ pub(crate) unsafe fn codegen(tcx: TyCtxt<'_>, mods: &mut ModuleLlvm, kind: Alloc\n                                           args.as_ptr(),\n                                           args.len() as c_uint,\n                                           None,\n-                                          \"\\0\".as_ptr() as *const _);\n+                                          \"\\0\".as_ptr().cast());\n         llvm::LLVMSetTailCall(ret, True);\n         if output.is_some() {\n             llvm::LLVMBuildRet(llbuilder, ret);"}, {"sha": "e49c64923aa665067c25c903159812acb218e9e9", "filename": "src/librustc_codegen_llvm/back/lto.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/173958ac80056416fd1905c1a07cd1b9faca82d5/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/173958ac80056416fd1905c1a07cd1b9faca82d5/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs?ref=173958ac80056416fd1905c1a07cd1b9faca82d5", "patch": "@@ -546,7 +546,7 @@ pub(crate) fn run_pass_manager(cgcx: &CodegenContext<LlvmCodegenBackend>,\n         llvm::LLVMRustAddAnalysisPasses(module.module_llvm.tm, pm, module.module_llvm.llmod());\n \n         if config.verify_llvm_ir {\n-            let pass = llvm::LLVMRustFindAndCreatePass(\"verify\\0\".as_ptr() as *const _);\n+            let pass = llvm::LLVMRustFindAndCreatePass(\"verify\\0\".as_ptr().cast());\n             llvm::LLVMRustAddPass(pm, pass.unwrap());\n         }\n \n@@ -581,12 +581,12 @@ pub(crate) fn run_pass_manager(cgcx: &CodegenContext<LlvmCodegenBackend>,\n         // We always generate bitcode through ThinLTOBuffers,\n         // which do not support anonymous globals\n         if config.bitcode_needed() {\n-            let pass = llvm::LLVMRustFindAndCreatePass(\"name-anon-globals\\0\".as_ptr() as *const _);\n+            let pass = llvm::LLVMRustFindAndCreatePass(\"name-anon-globals\\0\".as_ptr().cast());\n             llvm::LLVMRustAddPass(pm, pass.unwrap());\n         }\n \n         if config.verify_llvm_ir {\n-            let pass = llvm::LLVMRustFindAndCreatePass(\"verify\\0\".as_ptr() as *const _);\n+            let pass = llvm::LLVMRustFindAndCreatePass(\"verify\\0\".as_ptr().cast());\n             llvm::LLVMRustAddPass(pm, pass.unwrap());\n         }\n "}, {"sha": "b1a9552d56fba33ce9dfcc61d3744e2d351f6c18", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/173958ac80056416fd1905c1a07cd1b9faca82d5/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/173958ac80056416fd1905c1a07cd1b9faca82d5/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=173958ac80056416fd1905c1a07cd1b9faca82d5", "patch": "@@ -221,8 +221,8 @@ impl<'a> DiagnosticHandlers<'a> {\n                llcx: &'a llvm::Context) -> Self {\n         let data = Box::into_raw(Box::new((cgcx, handler)));\n         unsafe {\n-            llvm::LLVMRustSetInlineAsmDiagnosticHandler(llcx, inline_asm_handler, data as *mut _);\n-            llvm::LLVMContextSetDiagnosticHandler(llcx, diagnostic_handler, data as *mut _);\n+            llvm::LLVMRustSetInlineAsmDiagnosticHandler(llcx, inline_asm_handler, data.cast());\n+            llvm::LLVMContextSetDiagnosticHandler(llcx, diagnostic_handler, data.cast());\n         }\n         DiagnosticHandlers { data, llcx }\n     }\n@@ -672,7 +672,7 @@ unsafe fn embed_bitcode(cgcx: &CodegenContext<LlvmCodegenBackend>,\n     let llglobal = llvm::LLVMAddGlobal(\n         llmod,\n         common::val_ty(llconst),\n-        \"rustc.embedded.module\\0\".as_ptr() as *const _,\n+        \"rustc.embedded.module\\0\".as_ptr().cast(),\n     );\n     llvm::LLVMSetInitializer(llglobal, llconst);\n \n@@ -684,23 +684,23 @@ unsafe fn embed_bitcode(cgcx: &CodegenContext<LlvmCodegenBackend>,\n     } else {\n         \".llvmbc\\0\"\n     };\n-    llvm::LLVMSetSection(llglobal, section.as_ptr() as *const _);\n+    llvm::LLVMSetSection(llglobal, section.as_ptr().cast());\n     llvm::LLVMRustSetLinkage(llglobal, llvm::Linkage::PrivateLinkage);\n     llvm::LLVMSetGlobalConstant(llglobal, llvm::True);\n \n     let llconst = common::bytes_in_context(llcx, &[]);\n     let llglobal = llvm::LLVMAddGlobal(\n         llmod,\n         common::val_ty(llconst),\n-        \"rustc.embedded.cmdline\\0\".as_ptr() as *const _,\n+        \"rustc.embedded.cmdline\\0\".as_ptr().cast(),\n     );\n     llvm::LLVMSetInitializer(llglobal, llconst);\n     let section = if  is_apple {\n         \"__LLVM,__cmdline\\0\"\n     } else {\n         \".llvmcmd\\0\"\n     };\n-    llvm::LLVMSetSection(llglobal, section.as_ptr() as *const _);\n+    llvm::LLVMSetSection(llglobal, section.as_ptr().cast());\n     llvm::LLVMRustSetLinkage(llglobal, llvm::Linkage::PrivateLinkage);\n }\n \n@@ -842,7 +842,7 @@ fn create_msvc_imps(\n         for (imp_name, val) in globals {\n             let imp = llvm::LLVMAddGlobal(llmod,\n                                           i8p_ty,\n-                                          imp_name.as_ptr() as *const _);\n+                                          imp_name.as_ptr().cast());\n             llvm::LLVMSetInitializer(imp, consts::ptrcast(val, i8p_ty));\n             llvm::LLVMRustSetLinkage(imp, llvm::Linkage::ExternalLinkage);\n         }"}, {"sha": "d4df5b4a804ef8345e06ba20a87b1fcd496f1f8c", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/173958ac80056416fd1905c1a07cd1b9faca82d5/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/173958ac80056416fd1905c1a07cd1b9faca82d5/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=173958ac80056416fd1905c1a07cd1b9faca82d5", "patch": "@@ -488,7 +488,7 @@ impl StaticMethods for CodegenCx<'ll, 'tcx> {\n                 if let Some(section) = attrs.link_section {\n                     let section = llvm::LLVMMDStringInContext(\n                         self.llcx,\n-                        section.as_str().as_ptr() as *const _,\n+                        section.as_str().as_ptr().cast(),\n                         section.as_str().len() as c_uint,\n                     );\n                     assert!(alloc.relocations().is_empty());\n@@ -500,14 +500,14 @@ impl StaticMethods for CodegenCx<'ll, 'tcx> {\n                         0..alloc.len());\n                     let alloc = llvm::LLVMMDStringInContext(\n                         self.llcx,\n-                        bytes.as_ptr() as *const _,\n+                        bytes.as_ptr().cast(),\n                         bytes.len() as c_uint,\n                     );\n                     let data = [section, alloc];\n                     let meta = llvm::LLVMMDNodeInContext(self.llcx, data.as_ptr(), 2);\n                     llvm::LLVMAddNamedMetadataOperand(\n                         self.llmod,\n-                        \"wasm.custom_sections\\0\".as_ptr() as *const _,\n+                        \"wasm.custom_sections\\0\".as_ptr().cast(),\n                         meta,\n                     );\n                 }"}, {"sha": "18a5970fcd04432e2c45515d458de2194b8c8607", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/173958ac80056416fd1905c1a07cd1b9faca82d5/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/173958ac80056416fd1905c1a07cd1b9faca82d5/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=173958ac80056416fd1905c1a07cd1b9faca82d5", "patch": "@@ -211,7 +211,7 @@ pub unsafe fn create_module(\n     // If skipping the PLT is enabled, we need to add some module metadata\n     // to ensure intrinsic calls don't use it.\n     if !sess.needs_plt() {\n-        let avoid_plt = \"RtLibUseGOT\\0\".as_ptr() as *const _;\n+        let avoid_plt = \"RtLibUseGOT\\0\".as_ptr().cast();\n         llvm::LLVMRustAddModuleFlag(llmod, avoid_plt, 1);\n     }\n "}, {"sha": "9ed1c1730a697b1a44307c5d72be2454adb8a0b7", "filename": "src/librustc_codegen_llvm/debuginfo/gdb.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/173958ac80056416fd1905c1a07cd1b9faca82d5/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fgdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/173958ac80056416fd1905c1a07cd1b9faca82d5/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fgdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fgdb.rs?ref=173958ac80056416fd1905c1a07cd1b9faca82d5", "patch": "@@ -37,7 +37,7 @@ pub fn get_or_insert_gdb_debug_scripts_section_global(cx: &CodegenCx<'ll, '_>)\n \n     let section_var = unsafe {\n         llvm::LLVMGetNamedGlobal(cx.llmod,\n-                                 c_section_var_name.as_ptr() as *const _)\n+                                 c_section_var_name.as_ptr().cast())\n     };\n \n     section_var.unwrap_or_else(|| {\n@@ -52,7 +52,7 @@ pub fn get_or_insert_gdb_debug_scripts_section_global(cx: &CodegenCx<'ll, '_>)\n                                                      llvm_type).unwrap_or_else(||{\n                 bug!(\"symbol `{}` is already defined\", section_var_name)\n             });\n-            llvm::LLVMSetSection(section_var, section_name.as_ptr() as *const _);\n+            llvm::LLVMSetSection(section_var, section_name.as_ptr().cast());\n             llvm::LLVMSetInitializer(section_var, cx.const_bytes(section_contents));\n             llvm::LLVMSetGlobalConstant(section_var, llvm::True);\n             llvm::LLVMSetUnnamedAddr(section_var, llvm::True);"}, {"sha": "c25622392068effbe145b672802a93e0fce7919a", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/173958ac80056416fd1905c1a07cd1b9faca82d5/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/173958ac80056416fd1905c1a07cd1b9faca82d5/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=173958ac80056416fd1905c1a07cd1b9faca82d5", "patch": "@@ -960,9 +960,9 @@ pub fn compile_unit_metadata(\n             file_metadata,\n             producer.as_ptr(),\n             tcx.sess.opts.optimize != config::OptLevel::No,\n-            flags.as_ptr() as *const _,\n+            flags.as_ptr().cast(),\n             0,\n-            split_name.as_ptr() as *const _,\n+            split_name.as_ptr().cast(),\n             kind);\n \n         if tcx.sess.opts.debugging_opts.profile {\n@@ -991,7 +991,7 @@ pub fn compile_unit_metadata(\n         if tcx.sess.opts.target_triple.triple().starts_with(\"wasm32\") {\n             let name_metadata = llvm::LLVMMDStringInContext(\n                 debug_context.llcontext,\n-                rustc_producer.as_ptr() as *const _,\n+                rustc_producer.as_ptr().cast(),\n                 rustc_producer.as_bytes().len() as c_uint,\n             );\n             llvm::LLVMAddNamedMetadataOperand("}, {"sha": "6e4ed42c45e9792ad2e019c8a0d50457310b34b2", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/173958ac80056416fd1905c1a07cd1b9faca82d5/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/173958ac80056416fd1905c1a07cd1b9faca82d5/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=173958ac80056416fd1905c1a07cd1b9faca82d5", "patch": "@@ -127,20 +127,20 @@ pub fn finalize(cx: &CodegenCx<'_, '_>) {\n         if cx.sess().target.target.options.is_like_osx ||\n            cx.sess().target.target.options.is_like_android {\n             llvm::LLVMRustAddModuleFlag(cx.llmod,\n-                                        \"Dwarf Version\\0\".as_ptr() as *const _,\n+                                        \"Dwarf Version\\0\".as_ptr().cast(),\n                                         2)\n         }\n \n         // Indicate that we want CodeView debug information on MSVC\n         if cx.sess().target.target.options.is_like_msvc {\n             llvm::LLVMRustAddModuleFlag(cx.llmod,\n-                                        \"CodeView\\0\".as_ptr() as *const _,\n+                                        \"CodeView\\0\".as_ptr().cast(),\n                                         1)\n         }\n \n         // Prevent bitcode readers from deleting the debug info.\n         let ptr = \"Debug Info Version\\0\".as_ptr();\n-        llvm::LLVMRustAddModuleFlag(cx.llmod, ptr as *const _,\n+        llvm::LLVMRustAddModuleFlag(cx.llmod, ptr.cast(),\n                                     llvm::LLVMRustDebugMetadataVersion());\n     };\n }"}]}