{"sha": "f8db8ffcf32199dd534768ed30233724dab1fc08", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4ZGI4ZmZjZjMyMTk5ZGQ1MzQ3NjhlZDMwMjMzNzI0ZGFiMWZjMDg=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-10-24T21:21:30Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-10-25T23:04:00Z"}, "message": "Permit #[track_caller] on inherent methods", "tree": {"sha": "320df24a3b229af52edeaf2c63122def713ecbbf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/320df24a3b229af52edeaf2c63122def713ecbbf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8db8ffcf32199dd534768ed30233724dab1fc08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8db8ffcf32199dd534768ed30233724dab1fc08", "html_url": "https://github.com/rust-lang/rust/commit/f8db8ffcf32199dd534768ed30233724dab1fc08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8db8ffcf32199dd534768ed30233724dab1fc08/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6446f192c7aaf913fe32bbaf779b36d53936f867", "url": "https://api.github.com/repos/rust-lang/rust/commits/6446f192c7aaf913fe32bbaf779b36d53936f867", "html_url": "https://github.com/rust-lang/rust/commit/6446f192c7aaf913fe32bbaf779b36d53936f867"}], "stats": {"total": 57, "additions": 43, "deletions": 14}, "files": [{"sha": "7ee1d3448c4e9d023e1582ab22fc4246b1d156ec", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 32, "deletions": 12, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/f8db8ffcf32199dd534768ed30233724dab1fc08/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8db8ffcf32199dd534768ed30233724dab1fc08/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=f8db8ffcf32199dd534768ed30233724dab1fc08", "patch": "@@ -16,6 +16,12 @@ use std::fmt::{self, Display};\n use syntax::{attr, symbol::sym};\n use syntax_pos::Span;\n \n+#[derive(Copy, Clone, PartialEq)]\n+pub(crate) enum MethodKind {\n+    Trait { body: bool },\n+    Inherent,\n+}\n+\n #[derive(Copy, Clone, PartialEq)]\n pub(crate) enum Target {\n     ExternCrate,\n@@ -38,7 +44,7 @@ pub(crate) enum Target {\n     Expression,\n     Statement,\n     AssocConst,\n-    Method { body: bool },\n+    Method(MethodKind),\n     AssocTy,\n     ForeignFn,\n     ForeignStatic,\n@@ -68,7 +74,7 @@ impl Display for Target {\n             Target::Expression => \"expression\",\n             Target::Statement => \"statement\",\n             Target::AssocConst => \"associated const\",\n-            Target::Method { .. } => \"method\",\n+            Target::Method(_) => \"method\",\n             Target::AssocTy => \"associated type\",\n             Target::ForeignFn => \"foreign function\",\n             Target::ForeignStatic => \"foreign static item\",\n@@ -103,10 +109,10 @@ impl Target {\n         match trait_item.kind {\n             TraitItemKind::Const(..) => Target::AssocConst,\n             TraitItemKind::Method(_, hir::TraitMethod::Required(_)) => {\n-                Target::Method { body: false }\n+                Target::Method(MethodKind::Trait { body: false })\n             }\n             TraitItemKind::Method(_, hir::TraitMethod::Provided(_)) => {\n-                Target::Method { body: true }\n+                Target::Method(MethodKind::Trait { body: true })\n             }\n             TraitItemKind::Type(..) => Target::AssocTy,\n         }\n@@ -120,10 +126,22 @@ impl Target {\n         }\n     }\n \n-    fn from_impl_item(impl_item: &hir::ImplItem) -> Target {\n+    fn from_impl_item<'tcx>(tcx: TyCtxt<'tcx>, impl_item: &hir::ImplItem) -> Target {\n         match impl_item.kind {\n             hir::ImplItemKind::Const(..) => Target::Const,\n-            hir::ImplItemKind::Method(..) => Target::Method { body: true },\n+            hir::ImplItemKind::Method(..) => {\n+                let parent_hir_id = tcx.hir().get_parent_item(impl_item.hir_id);\n+                let containing_item = tcx.hir().expect_item(parent_hir_id);\n+                let containing_impl_is_for_trait = match &containing_item.kind {\n+                    hir::ItemKind::Impl(_, _, _, _, tr, _, _) => tr.is_some(),\n+                    _ => bug!(\"parent of an ImplItem must be an Impl\"),\n+                };\n+                if containing_impl_is_for_trait {\n+                    Target::Method(MethodKind::Trait { body: true })\n+                } else {\n+                    Target::Method(MethodKind::Inherent)\n+                }\n+            }\n             hir::ImplItemKind::TyAlias(..) => Target::TyAlias,\n             hir::ImplItemKind::OpaqueTy(..) => Target::OpaqueTy,\n         }\n@@ -176,8 +194,9 @@ impl CheckAttrVisitor<'tcx> {\n     /// Checks if an `#[inline]` is applied to a function or a closure. Returns `true` if valid.\n     fn check_inline(&self, hir_id: HirId, attr: &Attribute, span: &Span, target: Target) -> bool {\n         match target {\n-            Target::Fn | Target::Closure | Target::Method { body: true } => true,\n-            Target::Method { body: false } | Target::ForeignFn => {\n+            Target::Fn | Target::Closure | Target::Method(MethodKind::Trait { body: true })\n+            | Target::Method(MethodKind::Inherent) => true,\n+            Target::Method(MethodKind::Trait { body: false }) | Target::ForeignFn => {\n                 self.tcx.struct_span_lint_hir(\n                     UNUSED_ATTRIBUTES,\n                     hir_id,\n@@ -216,8 +235,8 @@ impl CheckAttrVisitor<'tcx> {\n                 ).emit();\n                 false\n             }\n-            Target::Fn => true,\n-            Target::Method { .. } => {\n+            Target::Fn | Target::Method(MethodKind::Inherent) => true,\n+            Target::Method(_) => {\n                 struct_span_err!(\n                     self.tcx.sess,\n                     *attr_span,\n@@ -278,7 +297,8 @@ impl CheckAttrVisitor<'tcx> {\n     /// Checks if the `#[target_feature]` attribute on `item` is valid. Returns `true` if valid.\n     fn check_target_feature(&self, attr: &Attribute, span: &Span, target: Target) -> bool {\n         match target {\n-            Target::Fn | Target::Method { body: true } => true,\n+            Target::Fn | Target::Method(MethodKind::Trait { body: true })\n+            | Target::Method(MethodKind::Inherent) => true,\n             _ => {\n                 self.tcx.sess\n                     .struct_span_err(attr.span, \"attribute should be applied to a function\")\n@@ -471,7 +491,7 @@ impl Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n     }\n \n     fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem) {\n-        let target = Target::from_impl_item(impl_item);\n+        let target = Target::from_impl_item(self.tcx, impl_item);\n         self.check_attributes(impl_item.hir_id, &impl_item.attrs, &impl_item.span, target, None);\n         intravisit::walk_impl_item(self, impl_item)\n     }"}, {"sha": "b565e11f55b2a22ff9fbca3b21ad0fb38252d54b", "filename": "src/test/ui/rfc-2091-track-caller/error-with-trait-fn-impl.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f8db8ffcf32199dd534768ed30233724dab1fc08/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-fn-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8db8ffcf32199dd534768ed30233724dab1fc08/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-fn-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-fn-impl.rs?ref=f8db8ffcf32199dd534768ed30233724dab1fc08", "patch": "@@ -1,3 +1,5 @@\n+// check-fail\n+\n #![feature(track_caller)] //~ WARN the feature `track_caller` is incomplete\n \n trait Trait {\n@@ -9,4 +11,11 @@ impl Trait for u64 {\n     fn unwrap(&self) {}\n }\n \n+struct S;\n+\n+impl S {\n+    #[track_caller] // ok\n+    fn foo() {}\n+}\n+\n fn main() {}"}, {"sha": "707b367484c2cfb7f55daa79dcdcbb31d5927fec", "filename": "src/test/ui/rfc-2091-track-caller/error-with-trait-fn-impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8db8ffcf32199dd534768ed30233724dab1fc08/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-fn-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8db8ffcf32199dd534768ed30233724dab1fc08/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-fn-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-fn-impl.stderr?ref=f8db8ffcf32199dd534768ed30233724dab1fc08", "patch": "@@ -1,13 +1,13 @@\n warning: the feature `track_caller` is incomplete and may cause the compiler to crash\n-  --> $DIR/error-with-trait-fn-impl.rs:1:12\n+  --> $DIR/error-with-trait-fn-impl.rs:3:12\n    |\n LL | #![feature(track_caller)]\n    |            ^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n \n error[E0738]: `#[track_caller]` may not be used on trait methods\n-  --> $DIR/error-with-trait-fn-impl.rs:8:5\n+  --> $DIR/error-with-trait-fn-impl.rs:10:5\n    |\n LL |     #[track_caller]\n    |     ^^^^^^^^^^^^^^^"}]}