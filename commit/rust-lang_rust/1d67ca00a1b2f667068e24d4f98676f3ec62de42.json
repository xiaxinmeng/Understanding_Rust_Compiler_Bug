{"sha": "1d67ca00a1b2f667068e24d4f98676f3ec62de42", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkNjdjYTAwYTFiMmY2NjcwNjhlMjRkNGY5ODY3NmYzZWM2MmRlNDI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-24T09:16:39Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-25T14:53:53Z"}, "message": "add helper method for ptr ops on Scalar; reduce unnecessary large operand of overflowing_signed_offset", "tree": {"sha": "8833b49479007b323f5875c022b18dff28016a12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8833b49479007b323f5875c022b18dff28016a12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d67ca00a1b2f667068e24d4f98676f3ec62de42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d67ca00a1b2f667068e24d4f98676f3ec62de42", "html_url": "https://github.com/rust-lang/rust/commit/1d67ca00a1b2f667068e24d4f98676f3ec62de42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d67ca00a1b2f667068e24d4f98676f3ec62de42/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afcb6342fa8cf206a80e8555454bff74d9144973", "url": "https://api.github.com/repos/rust-lang/rust/commits/afcb6342fa8cf206a80e8555454bff74d9144973", "html_url": "https://github.com/rust-lang/rust/commit/afcb6342fa8cf206a80e8555454bff74d9144973"}], "stats": {"total": 84, "additions": 35, "deletions": 49}, "files": [{"sha": "3f841cfb3300326addce2ef4de00ed112433a5db", "filename": "src/librustc/mir/interpret/pointer.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1d67ca00a1b2f667068e24d4f98676f3ec62de42/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d67ca00a1b2f667068e24d4f98676f3ec62de42/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs?ref=1d67ca00a1b2f667068e24d4f98676f3ec62de42", "patch": "@@ -73,17 +73,16 @@ pub trait PointerArithmetic: layout::HasDataLayout {\n         self.truncate_to_ptr(res)\n     }\n \n-    // Overflow checking only works properly on the range from -u64 to +u64.\n     #[inline]\n-    fn overflowing_signed_offset(&self, val: u64, i: i128) -> (u64, bool) {\n-        // FIXME: is it possible to over/underflow here?\n+    fn overflowing_signed_offset(&self, val: u64, i: i64) -> (u64, bool) {\n         if i < 0 {\n             // Trickery to ensure that `i64::MIN` works fine: compute `n = -i`.\n             // This formula only works for true negative values; it overflows for zero!\n             let n = u64::MAX - (i as u64) + 1;\n             let res = val.overflowing_sub(n);\n             self.truncate_to_ptr(res)\n         } else {\n+            // `i >= 0`, so the cast is safe.\n             self.overflowing_offset(val, i as u64)\n         }\n     }\n@@ -96,7 +95,7 @@ pub trait PointerArithmetic: layout::HasDataLayout {\n \n     #[inline]\n     fn signed_offset<'tcx>(&self, val: u64, i: i64) -> InterpResult<'tcx, u64> {\n-        let (res, over) = self.overflowing_signed_offset(val, i128::from(i));\n+        let (res, over) = self.overflowing_signed_offset(val, i);\n         if over { throw_ub!(PointerArithOverflow) } else { Ok(res) }\n     }\n }\n@@ -189,14 +188,14 @@ impl<'tcx, Tag> Pointer<Tag> {\n     }\n \n     #[inline]\n-    pub fn overflowing_signed_offset(self, i: i128, cx: &impl HasDataLayout) -> (Self, bool) {\n+    pub fn overflowing_signed_offset(self, i: i64, cx: &impl HasDataLayout) -> (Self, bool) {\n         let (res, over) = cx.data_layout().overflowing_signed_offset(self.offset.bytes(), i);\n         (Pointer::new_with_tag(self.alloc_id, Size::from_bytes(res), self.tag), over)\n     }\n \n     #[inline(always)]\n     pub fn wrapping_signed_offset(self, i: i64, cx: &impl HasDataLayout) -> Self {\n-        self.overflowing_signed_offset(i128::from(i), cx).0\n+        self.overflowing_signed_offset(i, cx).0\n     }\n \n     #[inline(always)]"}, {"sha": "706cf1cd09a79048898f42c97586f78f9630a55d", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 30, "deletions": 43, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/1d67ca00a1b2f667068e24d4f98676f3ec62de42/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d67ca00a1b2f667068e24d4f98676f3ec62de42/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=1d67ca00a1b2f667068e24d4f98676f3ec62de42", "patch": "@@ -1,11 +1,12 @@\n use std::convert::TryFrom;\n+use std::fmt;\n \n use rustc_apfloat::{\n     ieee::{Double, Single},\n     Float,\n };\n use rustc_macros::HashStable;\n-use std::fmt;\n+use rustc_target::abi::TargetDataLayout;\n \n use crate::ty::{\n     layout::{HasDataLayout, Size},\n@@ -200,68 +201,54 @@ impl<'tcx, Tag> Scalar<Tag> {\n         Scalar::Raw { data: 0, size: 0 }\n     }\n \n-    #[inline]\n-    pub fn ptr_offset(self, i: Size, cx: &impl HasDataLayout) -> InterpResult<'tcx, Self> {\n-        let dl = cx.data_layout();\n+    #[inline(always)]\n+    fn ptr_op(\n+        self,\n+        dl: &TargetDataLayout,\n+        f_int: impl FnOnce(u64) -> InterpResult<'tcx, u64>,\n+        f_ptr: impl FnOnce(Pointer<Tag>) -> InterpResult<'tcx, Pointer<Tag>>,\n+    ) -> InterpResult<'tcx, Self> {\n         match self {\n             Scalar::Raw { data, size } => {\n                 assert_eq!(u64::from(size), dl.pointer_size.bytes());\n-                Ok(Scalar::Raw {\n-                    data: u128::from(dl.offset(u64::try_from(data).unwrap(), i.bytes())?),\n-                    size,\n-                })\n+                Ok(Scalar::Raw { data: u128::from(f_int(u64::try_from(data).unwrap())?), size })\n             }\n-            Scalar::Ptr(ptr) => ptr.offset(i, dl).map(Scalar::Ptr),\n+            Scalar::Ptr(ptr) => Ok(Scalar::Ptr(f_ptr(ptr)?)),\n         }\n     }\n \n+    #[inline]\n+    pub fn ptr_offset(self, i: Size, cx: &impl HasDataLayout) -> InterpResult<'tcx, Self> {\n+        let dl = cx.data_layout();\n+        self.ptr_op(dl, |int| dl.offset(int, i.bytes()), |ptr| ptr.offset(i, dl))\n+    }\n+\n     #[inline]\n     pub fn ptr_wrapping_offset(self, i: Size, cx: &impl HasDataLayout) -> Self {\n         let dl = cx.data_layout();\n-        match self {\n-            Scalar::Raw { data, size } => {\n-                assert_eq!(u64::from(size), dl.pointer_size.bytes());\n-                Scalar::Raw {\n-                    data: u128::from(\n-                        dl.overflowing_offset(u64::try_from(data).unwrap(), i.bytes()).0,\n-                    ),\n-                    size,\n-                }\n-            }\n-            Scalar::Ptr(ptr) => Scalar::Ptr(ptr.wrapping_offset(i, dl)),\n-        }\n+        self.ptr_op(\n+            dl,\n+            |int| Ok(dl.overflowing_offset(int, i.bytes()).0),\n+            |ptr| Ok(ptr.wrapping_offset(i, dl)),\n+        )\n+        .unwrap()\n     }\n \n     #[inline]\n     pub fn ptr_signed_offset(self, i: i64, cx: &impl HasDataLayout) -> InterpResult<'tcx, Self> {\n         let dl = cx.data_layout();\n-        match self {\n-            Scalar::Raw { data, size } => {\n-                assert_eq!(u64::from(size), dl.pointer_size.bytes());\n-                Ok(Scalar::Raw {\n-                    data: u128::from(dl.signed_offset(u64::try_from(data).unwrap(), i)?),\n-                    size,\n-                })\n-            }\n-            Scalar::Ptr(ptr) => ptr.signed_offset(i, dl).map(Scalar::Ptr),\n-        }\n+        self.ptr_op(dl, |int| dl.signed_offset(int, i), |ptr| ptr.signed_offset(i, dl))\n     }\n \n     #[inline]\n     pub fn ptr_wrapping_signed_offset(self, i: i64, cx: &impl HasDataLayout) -> Self {\n         let dl = cx.data_layout();\n-        match self {\n-            Scalar::Raw { data, size } => {\n-                assert_eq!(u64::from(size), dl.pointer_size.bytes());\n-                Scalar::Raw {\n-                    data: u128::from(\n-                        dl.overflowing_signed_offset(u64::try_from(data).unwrap(), i128::from(i)).0,\n-                    ),\n-                    size,\n-                }\n-            }\n-            Scalar::Ptr(ptr) => Scalar::Ptr(ptr.wrapping_signed_offset(i, dl)),\n-        }\n+        self.ptr_op(\n+            dl,\n+            |int| Ok(dl.overflowing_signed_offset(int, i).0),\n+            |ptr| Ok(ptr.wrapping_signed_offset(i, dl)),\n+        )\n+        .unwrap()\n     }\n \n     #[inline]"}]}