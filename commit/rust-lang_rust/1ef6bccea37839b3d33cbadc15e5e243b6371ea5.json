{"sha": "1ef6bccea37839b3d33cbadc15e5e243b6371ea5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlZjZiY2NlYTM3ODM5YjNkMzNjYmFkYzE1ZTVlMjQzYjYzNzFlYTU=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-12-23T15:28:58Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-12-23T15:28:58Z"}, "message": "Cargo fmt\n\nRun 'cargo fmt' with the following setting:\n\n```\nreorder_imports = true\nreorder_imports_in_group = true\n```", "tree": {"sha": "657af896d071a3d3725b333b039f5407b00dc779", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/657af896d071a3d3725b333b039f5407b00dc779"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ef6bccea37839b3d33cbadc15e5e243b6371ea5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ef6bccea37839b3d33cbadc15e5e243b6371ea5", "html_url": "https://github.com/rust-lang/rust/commit/1ef6bccea37839b3d33cbadc15e5e243b6371ea5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ef6bccea37839b3d33cbadc15e5e243b6371ea5/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6714a447d063b079de8fb2884ded2c8c3e96bc1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6714a447d063b079de8fb2884ded2c8c3e96bc1d", "html_url": "https://github.com/rust-lang/rust/commit/6714a447d063b079de8fb2884ded2c8c3e96bc1d"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "383e7077d660d3997495db66fbbde3b6cec54bd6", "filename": "src/chains.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ef6bccea37839b3d33cbadc15e5e243b6371ea5/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ef6bccea37839b3d33cbadc15e5e243b6371ea5/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=1ef6bccea37839b3d33cbadc15e5e243b6371ea5", "patch": "@@ -59,11 +59,11 @@\n //!            .qux\n //! ```\n \n-use shape::Shape;\n use config::IndentStyle;\n use expr::rewrite_call;\n use macros::convert_try_mac;\n use rewrite::{Rewrite, RewriteContext};\n+use shape::Shape;\n use utils::{first_line_width, last_line_extendable, last_line_width, mk_sp,\n             trimmed_last_line_width, wrap_str};\n "}, {"sha": "bdf39ed6a2c05486775626d6ad39a18afa82b4d2", "filename": "src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ef6bccea37839b3d33cbadc15e5e243b6371ea5/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ef6bccea37839b3d33cbadc15e5e243b6371ea5/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=1ef6bccea37839b3d33cbadc15e5e243b6371ea5", "patch": "@@ -17,9 +17,9 @@ use std::fs::File;\n use std::io::{Error, ErrorKind, Read};\n use std::path::{Path, PathBuf};\n \n+use Summary;\n use file_lines::FileLines;\n use lists::{ListTactic, SeparatorPlace, SeparatorTactic};\n-use Summary;\n \n /// Check if we're in a nightly build.\n ///"}, {"sha": "3d9e7b502dab567f85c8f1379453afafc250958a", "filename": "src/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ef6bccea37839b3d33cbadc15e5e243b6371ea5/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ef6bccea37839b3d33cbadc15e5e243b6371ea5/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=1ef6bccea37839b3d33cbadc15e5e243b6371ea5", "patch": "@@ -8,14 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::cmp::min;\n use std::borrow::Cow;\n+use std::cmp::min;\n use std::iter::{repeat, ExactSizeIterator};\n \n use syntax::{ast, ptr};\n use syntax::codemap::{BytePos, CodeMap, Span};\n \n-use spanned::Spanned;\n use chains::rewrite_chain;\n use closures;\n use codemap::{LineRangeUtils, SpanUtils};\n@@ -29,6 +28,7 @@ use macros::{rewrite_macro, MacroArg, MacroPosition};\n use patterns::{can_be_overflowed_pat, TuplePatField};\n use rewrite::{Rewrite, RewriteContext};\n use shape::{Indent, Shape};\n+use spanned::Spanned;\n use string::{rewrite_string, StringFormat};\n use types::{can_be_overflowed_type, rewrite_path, PathContext};\n use utils::{colon_spaces, contains_skip, extra_offset, first_line_width, inner_attributes,"}, {"sha": "81f950cfb9b504be4dd42bbe0315bd2db9d71077", "filename": "src/filemap.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1ef6bccea37839b3d33cbadc15e5e243b6371ea5/src%2Ffilemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ef6bccea37839b3d33cbadc15e5e243b6371ea5/src%2Ffilemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffilemap.rs?ref=1ef6bccea37839b3d33cbadc15e5e243b6371ea5", "patch": "@@ -120,7 +120,7 @@ where\n     match config.write_mode() {\n         WriteMode::Replace => {\n             let filename = filename_to_path();\n-            if let Ok((ori, fmt)) = source_and_formatted_text(text, &filename, config) {\n+            if let Ok((ori, fmt)) = source_and_formatted_text(text, filename, config) {\n                 if fmt != ori {\n                     // Do a little dance to make writing safer - write to a temp file\n                     // rename the original to a .bk, then rename the temp file to the\n@@ -141,7 +141,7 @@ where\n         WriteMode::Overwrite => {\n             // Write text directly over original file if there is a diff.\n             let filename = filename_to_path();\n-            let (source, formatted) = source_and_formatted_text(text, &filename, config)?;\n+            let (source, formatted) = source_and_formatted_text(text, filename, config)?;\n             if source != formatted {\n                 let file = File::create(filename)?;\n                 write_system_newlines(file, text, config)?;\n@@ -156,7 +156,7 @@ where\n         }\n         WriteMode::Diff => {\n             let filename = filename_to_path();\n-            if let Ok((ori, fmt)) = source_and_formatted_text(text, &filename, config) {\n+            if let Ok((ori, fmt)) = source_and_formatted_text(text, filename, config) {\n                 let mismatch = make_diff(&ori, &fmt, 3);\n                 let has_diff = !mismatch.is_empty();\n                 print_diff(\n@@ -169,7 +169,7 @@ where\n         }\n         WriteMode::Checkstyle => {\n             let filename = filename_to_path();\n-            let diff = create_diff(&filename, text, config)?;\n+            let diff = create_diff(filename, text, config)?;\n             output_checkstyle_file(out, filename, diff)?;\n         }\n     }"}, {"sha": "dac748af9b1ea8b8d6390c637d4d62eedf5c7965", "filename": "src/imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ef6bccea37839b3d33cbadc15e5e243b6371ea5/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ef6bccea37839b3d33cbadc15e5e243b6371ea5/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=1ef6bccea37839b3d33cbadc15e5e243b6371ea5", "patch": "@@ -13,14 +13,14 @@ use std::cmp::Ordering;\n use syntax::ast;\n use syntax::codemap::{BytePos, Span};\n \n-use spanned::Spanned;\n use codemap::SpanUtils;\n use comment::combine_strs_with_missing_comments;\n use config::IndentStyle;\n use lists::{definitive_tactic, itemize_list, write_list, DefinitiveListTactic, ListFormatting,\n             ListItem, Separator, SeparatorPlace, SeparatorTactic};\n use rewrite::{Rewrite, RewriteContext};\n use shape::Shape;\n+use spanned::Spanned;\n use types::{rewrite_path, PathContext};\n use utils::{format_visibility, mk_sp};\n use visitor::{rewrite_extern_crate, FmtVisitor};"}, {"sha": "35dd5c39d3845531d33d8edb82d45d8e2bfe236b", "filename": "src/items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ef6bccea37839b3d33cbadc15e5e243b6371ea5/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ef6bccea37839b3d33cbadc15e5e243b6371ea5/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=1ef6bccea37839b3d33cbadc15e5e243b6371ea5", "patch": "@@ -18,7 +18,6 @@ use syntax::ast::{CrateSugar, ImplItem};\n use syntax::codemap::{BytePos, Span};\n use syntax::visit;\n \n-use spanned::Spanned;\n use codemap::{LineRangeUtils, SpanUtils};\n use comment::{combine_strs_with_missing_comments, contains_comment, recover_comment_removed,\n               recover_missing_comment_in_span, rewrite_missing_comment, FindUncommented};\n@@ -29,6 +28,7 @@ use lists::{definitive_tactic, itemize_list, write_list, DefinitiveListTactic, L\n             ListItem, ListTactic, Separator, SeparatorPlace, SeparatorTactic};\n use rewrite::{Rewrite, RewriteContext};\n use shape::{Indent, Shape};\n+use spanned::Spanned;\n use types::join_bounds;\n use utils::{colon_spaces, contains_skip, end_typaram, first_line_width, format_abi,\n             format_constness, format_defaultness, format_mutability, format_unsafety,"}, {"sha": "0f439910324e997429af6bb1a499b1426a7b8119", "filename": "src/modules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ef6bccea37839b3d33cbadc15e5e243b6371ea5/src%2Fmodules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ef6bccea37839b3d33cbadc15e5e243b6371ea5/src%2Fmodules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmodules.rs?ref=1ef6bccea37839b3d33cbadc15e5e243b6371ea5", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n use std::collections::BTreeMap;\n-use std::path::{Path, PathBuf};\n use std::io;\n+use std::path::{Path, PathBuf};\n \n use syntax::ast;\n use syntax::codemap::{self, FileName};"}, {"sha": "f877239f51893535b381021c78208204c0bba779", "filename": "src/patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ef6bccea37839b3d33cbadc15e5e243b6371ea5/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ef6bccea37839b3d33cbadc15e5e243b6371ea5/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=1ef6bccea37839b3d33cbadc15e5e243b6371ea5", "patch": "@@ -12,7 +12,6 @@ use syntax::ast::{self, BindingMode, FieldPat, Pat, PatKind, RangeEnd, RangeSynt\n use syntax::codemap::{self, BytePos, Span};\n use syntax::ptr;\n \n-use spanned::Spanned;\n use codemap::SpanUtils;\n use comment::FindUncommented;\n use expr::{can_be_overflowed_expr, rewrite_call_inner, rewrite_pair, rewrite_unary_prefix,\n@@ -22,6 +21,7 @@ use lists::{itemize_list, shape_for_tactic, struct_lit_formatting, struct_lit_sh\n use macros::{rewrite_macro, MacroPosition};\n use rewrite::{Rewrite, RewriteContext};\n use shape::Shape;\n+use spanned::Spanned;\n use types::{rewrite_path, PathContext};\n use utils::{format_mutability, mk_sp};\n "}, {"sha": "77dffd3cd89d0b6d3ec0cff406a2230d2f01f70a", "filename": "src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ef6bccea37839b3d33cbadc15e5e243b6371ea5/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ef6bccea37839b3d33cbadc15e5e243b6371ea5/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=1ef6bccea37839b3d33cbadc15e5e243b6371ea5", "patch": "@@ -16,7 +16,6 @@ use syntax::codemap::{self, BytePos, Span};\n use syntax::print::pprust;\n use syntax::symbol::keywords;\n \n-use spanned::Spanned;\n use codemap::SpanUtils;\n use config::{IndentStyle, TypeDensity};\n use expr::{rewrite_pair, rewrite_tuple, rewrite_unary_prefix, wrap_args_with_parens, PairParts};\n@@ -26,6 +25,7 @@ use lists::{definitive_tactic, itemize_list, write_list, ListFormatting, ListTac\n use macros::{rewrite_macro, MacroPosition};\n use rewrite::{Rewrite, RewriteContext};\n use shape::Shape;\n+use spanned::Spanned;\n use utils::{colon_spaces, extra_offset, first_line_width, format_abi, format_mutability,\n             last_line_width, mk_sp};\n "}, {"sha": "9644f76cca425f1bdb37934bf93bb1a159069f25", "filename": "src/vertical.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ef6bccea37839b3d33cbadc15e5e243b6371ea5/src%2Fvertical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ef6bccea37839b3d33cbadc15e5e243b6371ea5/src%2Fvertical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvertical.rs?ref=1ef6bccea37839b3d33cbadc15e5e243b6371ea5", "patch": "@@ -15,7 +15,6 @@ use std::cmp;\n use syntax::ast;\n use syntax::codemap::{BytePos, Span};\n \n-use spanned::Spanned;\n use codemap::SpanUtils;\n use comment::{combine_strs_with_missing_comments, contains_comment};\n use expr::rewrite_field;\n@@ -24,6 +23,7 @@ use lists::{definitive_tactic, itemize_list, write_list, ListFormatting, ListTac\n             SeparatorPlace};\n use rewrite::{Rewrite, RewriteContext};\n use shape::{Indent, Shape};\n+use spanned::Spanned;\n use utils::{contains_skip, is_attributes_extendable, mk_sp};\n \n pub trait AlignedItem {"}, {"sha": "095f5c6865b103e112f0c2717a5e3b2648bb9709", "filename": "src/visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ef6bccea37839b3d33cbadc15e5e243b6371ea5/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ef6bccea37839b3d33cbadc15e5e243b6371ea5/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=1ef6bccea37839b3d33cbadc15e5e243b6371ea5", "patch": "@@ -15,13 +15,12 @@ use syntax::attr::HasAttrs;\n use syntax::codemap::{self, BytePos, CodeMap, Pos, Span};\n use syntax::parse::ParseSess;\n \n-use expr::rewrite_literal;\n-use spanned::Spanned;\n use codemap::{LineRangeUtils, SpanUtils};\n use comment::{combine_strs_with_missing_comments, contains_comment, remove_trailing_white_spaces,\n               CodeCharKind, CommentCodeSlices, FindUncommented};\n use comment::rewrite_comment;\n use config::{BraceStyle, Config};\n+use expr::rewrite_literal;\n use items::{format_impl, format_trait, format_trait_alias, rewrite_associated_impl_type,\n             rewrite_associated_type, rewrite_type_alias, FnSig, StaticParts, StructParts};\n use lists::{itemize_list, write_list, DefinitiveListTactic, ListFormatting, SeparatorPlace,\n@@ -30,6 +29,7 @@ use macros::{rewrite_macro, MacroPosition};\n use regex::Regex;\n use rewrite::{Rewrite, RewriteContext};\n use shape::{Indent, Shape};\n+use spanned::Spanned;\n use utils::{self, contains_skip, count_newlines, inner_attributes, mk_sp, ptr_vec_to_ref_vec};\n \n fn is_use_item(item: &ast::Item) -> bool {"}]}