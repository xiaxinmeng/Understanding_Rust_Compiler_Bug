{"sha": "ba6863754e6873249c29525bd24e9e5accf442df", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhNjg2Mzc1NGU2ODczMjQ5YzI5NTI1YmQyNGU5ZTVhY2NmNDQyZGY=", "commit": {"author": {"name": "Caio", "email": "c410.f3r@gmail.com", "date": "2019-03-20T19:52:29Z"}, "committer": {"name": "Caio", "email": "c410.f3r@gmail.com", "date": "2019-03-20T19:52:29Z"}, "message": "Fill partial fields", "tree": {"sha": "0cf827377731143cf547360f4dd1a1fb73779fd8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0cf827377731143cf547360f4dd1a1fb73779fd8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba6863754e6873249c29525bd24e9e5accf442df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba6863754e6873249c29525bd24e9e5accf442df", "html_url": "https://github.com/rust-lang/rust/commit/ba6863754e6873249c29525bd24e9e5accf442df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba6863754e6873249c29525bd24e9e5accf442df/comments", "author": {"login": "c410-f3r", "id": 17877264, "node_id": "MDQ6VXNlcjE3ODc3MjY0", "avatar_url": "https://avatars.githubusercontent.com/u/17877264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c410-f3r", "html_url": "https://github.com/c410-f3r", "followers_url": "https://api.github.com/users/c410-f3r/followers", "following_url": "https://api.github.com/users/c410-f3r/following{/other_user}", "gists_url": "https://api.github.com/users/c410-f3r/gists{/gist_id}", "starred_url": "https://api.github.com/users/c410-f3r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c410-f3r/subscriptions", "organizations_url": "https://api.github.com/users/c410-f3r/orgs", "repos_url": "https://api.github.com/users/c410-f3r/repos", "events_url": "https://api.github.com/users/c410-f3r/events{/privacy}", "received_events_url": "https://api.github.com/users/c410-f3r/received_events", "type": "User", "site_admin": false}, "committer": {"login": "c410-f3r", "id": 17877264, "node_id": "MDQ6VXNlcjE3ODc3MjY0", "avatar_url": "https://avatars.githubusercontent.com/u/17877264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c410-f3r", "html_url": "https://github.com/c410-f3r", "followers_url": "https://api.github.com/users/c410-f3r/followers", "following_url": "https://api.github.com/users/c410-f3r/following{/other_user}", "gists_url": "https://api.github.com/users/c410-f3r/gists{/gist_id}", "starred_url": "https://api.github.com/users/c410-f3r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c410-f3r/subscriptions", "organizations_url": "https://api.github.com/users/c410-f3r/orgs", "repos_url": "https://api.github.com/users/c410-f3r/repos", "events_url": "https://api.github.com/users/c410-f3r/events{/privacy}", "received_events_url": "https://api.github.com/users/c410-f3r/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91576afc7e64f11dde2bed14b578e4914d253a6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/91576afc7e64f11dde2bed14b578e4914d253a6a", "html_url": "https://github.com/rust-lang/rust/commit/91576afc7e64f11dde2bed14b578e4914d253a6a"}], "stats": {"total": 159, "additions": 127, "deletions": 32}, "files": [{"sha": "398dbcd2183420baa947c09aa2dea99205e2b988", "filename": "crates/ra_assists/src/fill_struct_fields.rs", "status": "modified", "additions": 127, "deletions": 32, "changes": 159, "blob_url": "https://github.com/rust-lang/rust/blob/ba6863754e6873249c29525bd24e9e5accf442df/crates%2Fra_assists%2Fsrc%2Ffill_struct_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba6863754e6873249c29525bd24e9e5accf442df/crates%2Fra_assists%2Fsrc%2Ffill_struct_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ffill_struct_fields.rs?ref=ba6863754e6873249c29525bd24e9e5accf442df", "patch": "@@ -1,49 +1,102 @@\n use std::fmt::Write;\n \n-use hir::{AdtDef, Ty, source_binder};\n-use hir::db::HirDatabase;\n+use hir::{AdtDef, Ty, db::HirDatabase, source_binder::function_from_child_node, StructField};\n \n use ra_syntax::ast::{self, AstNode};\n \n use crate::{AssistCtx, Assist, AssistId};\n \n pub(crate) fn fill_struct_fields(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let struct_lit = ctx.node_at_offset::<ast::StructLit>()?;\n-    let named_field_list = struct_lit.named_field_list()?;\n-\n-    // If we already have existing struct fields, don't provide the assist.\n-    if named_field_list.fields().count() > 0 {\n+    let mut fsf = FillStructFields {\n+        ctx: &mut ctx,\n+        named_field_list: struct_lit.named_field_list()?,\n+        struct_fields: vec![],\n+        struct_lit,\n+    };\n+    fsf.evaluate_struct_def_fields()?;\n+    if fsf.struct_lit_and_def_have_the_same_number_of_fields() {\n         return None;\n     }\n+    fsf.remove_already_included_fields()?;\n+    fsf.add_action()?;\n+    ctx.build()\n+}\n \n-    let function =\n-        source_binder::function_from_child_node(ctx.db, ctx.frange.file_id, struct_lit.syntax())?;\n+struct FillStructFields<'a, 'b: 'a, DB> {\n+    ctx: &'a mut AssistCtx<'b, DB>,\n+    named_field_list: &'a ast::NamedFieldList,\n+    struct_fields: Vec<StructField>,\n+    struct_lit: &'a ast::StructLit,\n+}\n \n-    let infer_result = function.infer(ctx.db);\n-    let source_map = function.body_source_map(ctx.db);\n-    let node_expr = source_map.node_expr(struct_lit.into())?;\n-    let struct_lit_ty = infer_result[node_expr].clone();\n-    let struct_def = match struct_lit_ty {\n-        Ty::Adt { def_id: AdtDef::Struct(s), .. } => s,\n-        _ => return None,\n-    };\n+impl<DB> FillStructFields<'_, '_, DB>\n+where\n+    DB: HirDatabase,\n+{\n+    fn add_action(&mut self) -> Option<()> {\n+        let named_field_list = self.named_field_list;\n+        let struct_fields_string = self.struct_fields_string()?;\n+        let struct_lit = self.struct_lit;\n+        self.ctx.add_action(AssistId(\"fill_struct_fields\"), \"fill struct fields\", |edit| {\n+            edit.target(struct_lit.syntax().range());\n+            edit.set_cursor(struct_lit.syntax().range().start());\n+            edit.replace_node_and_indent(named_field_list.syntax(), struct_fields_string);\n+        });\n+        Some(())\n+    }\n \n-    let db = ctx.db;\n-    ctx.add_action(AssistId(\"fill_struct_fields\"), \"fill struct fields\", |edit| {\n+    fn struct_lit_and_def_have_the_same_number_of_fields(&self) -> bool {\n+        self.named_field_list.fields().count() == self.struct_fields.len()\n+    }\n+\n+    fn evaluate_struct_def_fields(&mut self) -> Option<()> {\n+        let function = function_from_child_node(\n+            self.ctx.db,\n+            self.ctx.frange.file_id,\n+            self.struct_lit.syntax(),\n+        )?;\n+        let infer_result = function.infer(self.ctx.db);\n+        let source_map = function.body_source_map(self.ctx.db);\n+        let node_expr = source_map.node_expr(self.struct_lit.into())?;\n+        let struct_lit_ty = infer_result[node_expr].clone();\n+        let struct_def = match struct_lit_ty {\n+            Ty::Adt { def_id: AdtDef::Struct(s), .. } => s,\n+            _ => return None,\n+        };\n+        self.struct_fields = struct_def.fields(self.ctx.db);\n+        Some(())\n+    }\n+\n+    fn remove_already_included_fields(&mut self) -> Option<()> {\n+        for ast_field in self.named_field_list.fields() {\n+            let name_from_ast = ast_field.name_ref()?.text().to_string();\n+            if let Some(idx) = self\n+                .struct_fields\n+                .iter()\n+                .map(|f| f.name(self.ctx.db).to_string())\n+                .position(|n| n == name_from_ast)\n+            {\n+                self.struct_fields.remove(idx);\n+            }\n+        }\n+        Some(())\n+    }\n+\n+    fn struct_fields_string(&self) -> Option<String> {\n         let mut buf = String::from(\"{\\n\");\n-        let struct_fields = struct_def.fields(db);\n-        for field in struct_fields {\n-            let field_name = field.name(db).to_string();\n+        for field in self.named_field_list.fields() {\n+            let expr = field.expr()?.syntax().text().to_string();\n+            let field_name = field.name_ref()?.syntax().text().to_string();\n+            write!(&mut buf, \"    {}: {},\\n\", field_name, expr).unwrap();\n+        }\n+        for field in &self.struct_fields {\n+            let field_name = field.name(self.ctx.db).to_string();\n             write!(&mut buf, \"    {}: (),\\n\", field_name).unwrap();\n         }\n         buf.push_str(\"}\");\n-\n-        edit.target(struct_lit.syntax().range());\n-        edit.set_cursor(struct_lit.syntax().range().start());\n-        edit.replace_node_and_indent(named_field_list.syntax(), buf);\n-    });\n-\n-    ctx.build()\n+        Some(buf)\n+    }\n }\n \n #[cfg(test)]\n@@ -62,7 +115,7 @@ mod tests {\n                 b: String,\n                 c: (i32, i32),\n                 d: D,\n-                r: &'a str,\n+                e: &'a str,\n             }\n \n             fn main() {\n@@ -75,7 +128,7 @@ mod tests {\n                 b: String,\n                 c: (i32, i32),\n                 d: D,\n-                r: &'a str,\n+                e: &'a str,\n             }\n \n             fn main() {\n@@ -84,7 +137,7 @@ mod tests {\n                     b: (),\n                     c: (),\n                     d: (),\n-                    r: (),\n+                    e: (),\n                 }\n             }\n             \"#,\n@@ -101,7 +154,7 @@ mod tests {\n                 b: String,\n                 c: (i32, i32),\n                 d: D,\n-                r: &'a str,\n+                e: &'a str,\n             }\n \n             fn main() {\n@@ -148,4 +201,46 @@ mod tests {\n             \"#,\n         );\n     }\n+\n+    #[test]\n+    fn fill_struct_fields_partial() {\n+        check_assist(\n+            fill_struct_fields,\n+            r#\"\n+            struct S<'a, D> {\n+                a: u32,\n+                b: String,\n+                c: (i32, i32),\n+                d: D,\n+                e: &'a str,\n+            }\n+\n+            fn main() {\n+                let s = S {\n+                    c: (1, 2),\n+                    e: \"foo\",<|>\n+                }\n+            }\n+            \"#,\n+            r#\"\n+            struct S<'a, D> {\n+                a: u32,\n+                b: String,\n+                c: (i32, i32),\n+                d: D,\n+                e: &'a str,\n+            }\n+\n+            fn main() {\n+                let s = <|>S {\n+                    c: (1, 2),\n+                    e: \"foo\",\n+                    a: (),\n+                    b: (),\n+                    d: (),\n+                }\n+            }\n+            \"#,\n+        );\n+    }\n }"}]}