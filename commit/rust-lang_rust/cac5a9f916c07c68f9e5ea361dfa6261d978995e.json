{"sha": "cac5a9f916c07c68f9e5ea361dfa6261d978995e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhYzVhOWY5MTZjMDdjNjhmOWU1ZWEzNjFkZmE2MjYxZDk3ODk5NWU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-09-26T00:52:46Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-09-26T00:53:23Z"}, "message": "libcore: De-export core::at_vec", "tree": {"sha": "334e88b292f0eaf962629151f1d5bcf304d82953", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/334e88b292f0eaf962629151f1d5bcf304d82953"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cac5a9f916c07c68f9e5ea361dfa6261d978995e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cac5a9f916c07c68f9e5ea361dfa6261d978995e", "html_url": "https://github.com/rust-lang/rust/commit/cac5a9f916c07c68f9e5ea361dfa6261d978995e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cac5a9f916c07c68f9e5ea361dfa6261d978995e/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d05e2ad66c7bb2418b7c746f87486d4f74180193", "url": "https://api.github.com/repos/rust-lang/rust/commits/d05e2ad66c7bb2418b7c746f87486d4f74180193", "html_url": "https://github.com/rust-lang/rust/commit/d05e2ad66c7bb2418b7c746f87486d4f74180193"}], "stats": {"total": 52, "additions": 21, "deletions": 31}, "files": [{"sha": "fdd0e4fd47e070c209a0004783e2d9671372b9d5", "filename": "src/libcore/at_vec.rs", "status": "modified", "additions": 21, "deletions": 30, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/cac5a9f916c07c68f9e5ea361dfa6261d978995e/src%2Flibcore%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac5a9f916c07c68f9e5ea361dfa6261d978995e/src%2Flibcore%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fat_vec.rs?ref=cac5a9f916c07c68f9e5ea361dfa6261d978995e", "patch": "@@ -2,14 +2,6 @@\n \n use ptr::addr_of;\n \n-export init_op;\n-export capacity;\n-export build_sized, build, build_sized_opt;\n-export map;\n-export from_fn, from_elem;\n-export raw;\n-export traits;\n-\n /// Code for dealing with @-vectors. This is pretty incomplete, and\n /// contains a bunch of duplication from the code for ~-vectors.\n \n@@ -29,7 +21,7 @@ extern mod rusti {\n \n /// Returns the number of elements the vector can hold without reallocating\n #[inline(always)]\n-pure fn capacity<T>(&&v: @[const T]) -> uint {\n+pub pure fn capacity<T>(&&v: @[const T]) -> uint {\n     unsafe {\n         let repr: **raw::VecRepr =\n             ::cast::reinterpret_cast(&addr_of(v));\n@@ -50,8 +42,8 @@ pure fn capacity<T>(&&v: @[const T]) -> uint {\n  *             onto the vector being constructed.\n  */\n #[inline(always)]\n-pure fn build_sized<A>(size: uint,\n-                       builder: fn(push: pure fn(+v: A))) -> @[A] {\n+pub pure fn build_sized<A>(size: uint,\n+                           builder: fn(push: pure fn(+v: A))) -> @[A] {\n     let mut vec = @[];\n     unsafe { raw::reserve(vec, size); }\n     builder(|+x| unsafe { raw::push(vec, move x) });\n@@ -69,7 +61,7 @@ pure fn build_sized<A>(size: uint,\n  *             onto the vector being constructed.\n  */\n #[inline(always)]\n-pure fn build<A>(builder: fn(push: pure fn(+v: A))) -> @[A] {\n+pub pure fn build<A>(builder: fn(push: pure fn(+v: A))) -> @[A] {\n     build_sized(4, builder)\n }\n \n@@ -86,14 +78,14 @@ pure fn build<A>(builder: fn(push: pure fn(+v: A))) -> @[A] {\n  *             onto the vector being constructed.\n  */\n #[inline(always)]\n-pure fn build_sized_opt<A>(size: Option<uint>,\n+pub pure fn build_sized_opt<A>(size: Option<uint>,\n                            builder: fn(push: pure fn(+v: A))) -> @[A] {\n     build_sized(size.get_default(4), builder)\n }\n \n // Appending\n #[inline(always)]\n-pure fn append<T: Copy>(lhs: @[T], rhs: &[const T]) -> @[T] {\n+pub pure fn append<T: Copy>(lhs: @[T], rhs: &[const T]) -> @[T] {\n     do build_sized(lhs.len() + rhs.len()) |push| {\n         for vec::each(lhs) |x| { push(*x); }\n         for uint::range(0, rhs.len()) |i| { push(rhs[i]); }\n@@ -102,7 +94,7 @@ pure fn append<T: Copy>(lhs: @[T], rhs: &[const T]) -> @[T] {\n \n \n /// Apply a function to each element of a vector and return the results\n-pure fn map<T, U>(v: &[T], f: fn(T) -> U) -> @[U] {\n+pub pure fn map<T, U>(v: &[T], f: fn(T) -> U) -> @[U] {\n     do build_sized(v.len()) |push| {\n         for vec::each(v) |elem| {\n             push(f(*elem));\n@@ -116,7 +108,7 @@ pure fn map<T, U>(v: &[T], f: fn(T) -> U) -> @[U] {\n  * Creates an immutable vector of size `n_elts` and initializes the elements\n  * to the value returned by the function `op`.\n  */\n-pure fn from_fn<T>(n_elts: uint, op: iter::InitOp<T>) -> @[T] {\n+pub pure fn from_fn<T>(n_elts: uint, op: iter::InitOp<T>) -> @[T] {\n     do build_sized(n_elts) |push| {\n         let mut i: uint = 0u;\n         while i < n_elts { push(op(i)); i += 1u; }\n@@ -129,7 +121,7 @@ pure fn from_fn<T>(n_elts: uint, op: iter::InitOp<T>) -> @[T] {\n  * Creates an immutable vector of size `n_elts` and initializes the elements\n  * to the value `t`.\n  */\n-pure fn from_elem<T: Copy>(n_elts: uint, t: T) -> @[T] {\n+pub pure fn from_elem<T: Copy>(n_elts: uint, t: T) -> @[T] {\n     do build_sized(n_elts) |push| {\n         let mut i: uint = 0u;\n         while i < n_elts { push(t); i += 1u; }\n@@ -148,13 +140,12 @@ mod traits {\n }\n \n #[cfg(test)]\n-mod traits {\n+pub mod traits {\n     #[legacy_exports];}\n \n-mod raw {\n-    #[legacy_exports];\n-    type VecRepr = vec::raw::VecRepr;\n-    type SliceRepr = vec::raw::SliceRepr;\n+pub mod raw {\n+    pub type VecRepr = vec::raw::VecRepr;\n+    pub type SliceRepr = vec::raw::SliceRepr;\n \n     /**\n      * Sets the length of a vector\n@@ -164,13 +155,13 @@ mod raw {\n      * the vector is actually the specified size.\n      */\n     #[inline(always)]\n-    unsafe fn set_len<T>(&&v: @[const T], new_len: uint) {\n+    pub unsafe fn set_len<T>(&&v: @[const T], new_len: uint) {\n         let repr: **VecRepr = ::cast::reinterpret_cast(&addr_of(v));\n         (**repr).unboxed.fill = new_len * sys::size_of::<T>();\n     }\n \n     #[inline(always)]\n-    unsafe fn push<T>(&v: @[const T], +initval: T) {\n+    pub unsafe fn push<T>(&v: @[const T], +initval: T) {\n         let repr: **VecRepr = ::cast::reinterpret_cast(&addr_of(v));\n         let fill = (**repr).unboxed.fill;\n         if (**repr).unboxed.alloc > fill {\n@@ -182,7 +173,7 @@ mod raw {\n     }\n     // This doesn't bother to make sure we have space.\n     #[inline(always)] // really pretty please\n-    unsafe fn push_fast<T>(&v: @[const T], +initval: T) {\n+    pub unsafe fn push_fast<T>(&v: @[const T], +initval: T) {\n         let repr: **VecRepr = ::cast::reinterpret_cast(&addr_of(v));\n         let fill = (**repr).unboxed.fill;\n         (**repr).unboxed.fill += sys::size_of::<T>();\n@@ -191,7 +182,7 @@ mod raw {\n         rusti::move_val_init(*p, move initval);\n     }\n \n-    unsafe fn push_slow<T>(&v: @[const T], +initval: T) {\n+    pub unsafe fn push_slow<T>(&v: @[const T], +initval: T) {\n         reserve_at_least(v, v.len() + 1u);\n         push_fast(v, move initval);\n     }\n@@ -207,7 +198,7 @@ mod raw {\n      * * v - A vector\n      * * n - The number of elements to reserve space for\n      */\n-    unsafe fn reserve<T>(&v: @[const T], n: uint) {\n+    pub unsafe fn reserve<T>(&v: @[const T], n: uint) {\n         // Only make the (slow) call into the runtime if we have to\n         if capacity(v) < n {\n             let ptr = addr_of(v) as **VecRepr;\n@@ -231,14 +222,14 @@ mod raw {\n      * * v - A vector\n      * * n - The number of elements to reserve space for\n      */\n-    unsafe fn reserve_at_least<T>(&v: @[const T], n: uint) {\n+    pub unsafe fn reserve_at_least<T>(&v: @[const T], n: uint) {\n         reserve(v, uint::next_power_of_two(n));\n     }\n \n }\n \n #[test]\n-fn test() {\n+pub fn test() {\n     // Some code that could use that, then:\n     fn seq_range(lo: uint, hi: uint) -> @[uint] {\n         do build |push| {\n@@ -254,7 +245,7 @@ fn test() {\n }\n \n #[test]\n-fn append_test() {\n+pub fn append_test() {\n     assert @[1,2,3] + @[4,5,6] == @[1,2,3,4,5,6];\n }\n "}, {"sha": "e82c16b1f04d33b49c81b08ba1e2d77646166af3", "filename": "src/libcore/core.rc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cac5a9f916c07c68f9e5ea361dfa6261d978995e/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/cac5a9f916c07c68f9e5ea361dfa6261d978995e/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=cac5a9f916c07c68f9e5ea361dfa6261d978995e", "patch": "@@ -201,7 +201,6 @@ mod str;\n mod ptr;\n #[legacy_exports]\n mod vec;\n-#[legacy_exports]\n mod at_vec;\n #[legacy_exports]\n mod bool;"}]}