{"sha": "fa02dca428314676716c78b5aa1953eea1627bf0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhMDJkY2E0MjgzMTQ2NzY3MTZjNzhiNWFhMTk1M2VlYTE2MjdiZjA=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-03-06T19:10:53Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-03-16T08:40:29Z"}, "message": "Remove Q parameter from QueryCache::lookup.", "tree": {"sha": "ff2b00be6be6e75e29d74ef599ba3a497964e5e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff2b00be6be6e75e29d74ef599ba3a497964e5e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa02dca428314676716c78b5aa1953eea1627bf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa02dca428314676716c78b5aa1953eea1627bf0", "html_url": "https://github.com/rust-lang/rust/commit/fa02dca428314676716c78b5aa1953eea1627bf0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa02dca428314676716c78b5aa1953eea1627bf0/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0f57e24e35a365d9d55f37611edfc6666b5d3c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0f57e24e35a365d9d55f37611edfc6666b5d3c9", "html_url": "https://github.com/rust-lang/rust/commit/a0f57e24e35a365d9d55f37611edfc6666b5d3c9"}], "stats": {"total": 27, "additions": 14, "deletions": 13}, "files": [{"sha": "ae01dcb364bfc54a7a82c571135b9f6a95600f49", "filename": "src/librustc/ty/query/caches.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fa02dca428314676716c78b5aa1953eea1627bf0/src%2Flibrustc%2Fty%2Fquery%2Fcaches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa02dca428314676716c78b5aa1953eea1627bf0/src%2Flibrustc%2Fty%2Fquery%2Fcaches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fcaches.rs?ref=fa02dca428314676716c78b5aa1953eea1627bf0", "patch": "@@ -1,6 +1,5 @@\n use crate::dep_graph::DepNodeIndex;\n-use crate::ty::query::config::QueryAccessors;\n-use crate::ty::query::plumbing::{QueryLookup, QueryState, QueryStateShard};\n+use crate::ty::query::plumbing::{QueryLookupImpl, QueryStateImpl, QueryStateShardImpl};\n use crate::ty::TyCtxt;\n \n use rustc_data_structures::fx::FxHashMap;\n@@ -19,20 +18,21 @@ pub(crate) trait QueryCache<K, V>: Default {\n     /// It returns the shard index and a lock guard to the shard,\n     /// which will be used if the query is not in the cache and we need\n     /// to compute it.\n-    fn lookup<'tcx, R, GetCache, OnHit, OnMiss, Q>(\n+    fn lookup<'tcx, R, GetCache, OnHit, OnMiss>(\n         &self,\n-        state: &'tcx QueryState<'tcx, Q>,\n+        state: &'tcx QueryStateImpl<'tcx, K, V, Self>,\n         get_cache: GetCache,\n         key: K,\n         // `on_hit` can be called while holding a lock to the query state shard.\n         on_hit: OnHit,\n         on_miss: OnMiss,\n     ) -> R\n     where\n-        Q: QueryAccessors<'tcx>,\n-        GetCache: for<'a> Fn(&'a mut QueryStateShard<'tcx, Q>) -> &'a mut Self::Sharded,\n+        GetCache: for<'a> Fn(\n+            &'a mut QueryStateShardImpl<'tcx, K, Self::Sharded>,\n+        ) -> &'a mut Self::Sharded,\n         OnHit: FnOnce(&V, DepNodeIndex) -> R,\n-        OnMiss: FnOnce(K, QueryLookup<'tcx, Q>) -> R;\n+        OnMiss: FnOnce(K, QueryLookupImpl<'tcx, QueryStateShardImpl<'tcx, K, Self::Sharded>>) -> R;\n \n     fn complete(\n         &self,\n@@ -64,19 +64,20 @@ impl<K: Eq + Hash, V: Clone> QueryCache<K, V> for DefaultCache {\n     type Sharded = FxHashMap<K, (V, DepNodeIndex)>;\n \n     #[inline(always)]\n-    fn lookup<'tcx, R, GetCache, OnHit, OnMiss, Q>(\n+    fn lookup<'tcx, R, GetCache, OnHit, OnMiss>(\n         &self,\n-        state: &'tcx QueryState<'tcx, Q>,\n+        state: &'tcx QueryStateImpl<'tcx, K, V, Self>,\n         get_cache: GetCache,\n         key: K,\n         on_hit: OnHit,\n         on_miss: OnMiss,\n     ) -> R\n     where\n-        Q: QueryAccessors<'tcx>,\n-        GetCache: for<'a> Fn(&'a mut QueryStateShard<'tcx, Q>) -> &'a mut Self::Sharded,\n+        GetCache: for<'a> Fn(\n+            &'a mut QueryStateShardImpl<'tcx, K, Self::Sharded>,\n+        ) -> &'a mut Self::Sharded,\n         OnHit: FnOnce(&V, DepNodeIndex) -> R,\n-        OnMiss: FnOnce(K, QueryLookup<'tcx, Q>) -> R,\n+        OnMiss: FnOnce(K, QueryLookupImpl<'tcx, QueryStateShardImpl<'tcx, K, Self::Sharded>>) -> R,\n     {\n         let mut lookup = state.get_lookup(&key);\n         let lock = &mut *lookup.lock;"}, {"sha": "e4d0e96d07c75f5adc5e79ae96394841a6c03f21", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa02dca428314676716c78b5aa1953eea1627bf0/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa02dca428314676716c78b5aa1953eea1627bf0/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=fa02dca428314676716c78b5aa1953eea1627bf0", "patch": "@@ -449,7 +449,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     {\n         let state = Q::query_state(self);\n \n-        state.cache.lookup::<_, _, _, _, Q>(\n+        state.cache.lookup(\n             state,\n             QueryStateShard::<Q>::get_cache,\n             key,"}]}