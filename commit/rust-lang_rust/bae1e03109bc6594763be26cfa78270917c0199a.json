{"sha": "bae1e03109bc6594763be26cfa78270917c0199a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhZTFlMDMxMDliYzY1OTQ3NjNiZTI2Y2ZhNzgyNzA5MTdjMDE5OWE=", "commit": {"author": {"name": "Ayrton", "email": "a.munoz3327@gmail.com", "date": "2020-07-23T20:33:50Z"}, "committer": {"name": "Ayrton", "email": "a.munoz3327@gmail.com", "date": "2020-07-23T21:07:20Z"}, "message": "fixed error reporting for mismatched traits\n\nmismatched traits were previously referred to as types", "tree": {"sha": "e4f4ca6fd9aa983889cea83c1fb0711bb71f1ab8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4f4ca6fd9aa983889cea83c1fb0711bb71f1ab8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bae1e03109bc6594763be26cfa78270917c0199a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bae1e03109bc6594763be26cfa78270917c0199a", "html_url": "https://github.com/rust-lang/rust/commit/bae1e03109bc6594763be26cfa78270917c0199a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bae1e03109bc6594763be26cfa78270917c0199a/comments", "author": {"login": "ayrtonm", "id": 4975834, "node_id": "MDQ6VXNlcjQ5NzU4MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4975834?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ayrtonm", "html_url": "https://github.com/ayrtonm", "followers_url": "https://api.github.com/users/ayrtonm/followers", "following_url": "https://api.github.com/users/ayrtonm/following{/other_user}", "gists_url": "https://api.github.com/users/ayrtonm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ayrtonm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ayrtonm/subscriptions", "organizations_url": "https://api.github.com/users/ayrtonm/orgs", "repos_url": "https://api.github.com/users/ayrtonm/repos", "events_url": "https://api.github.com/users/ayrtonm/events{/privacy}", "received_events_url": "https://api.github.com/users/ayrtonm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ayrtonm", "id": 4975834, "node_id": "MDQ6VXNlcjQ5NzU4MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4975834?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ayrtonm", "html_url": "https://github.com/ayrtonm", "followers_url": "https://api.github.com/users/ayrtonm/followers", "following_url": "https://api.github.com/users/ayrtonm/following{/other_user}", "gists_url": "https://api.github.com/users/ayrtonm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ayrtonm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ayrtonm/subscriptions", "organizations_url": "https://api.github.com/users/ayrtonm/orgs", "repos_url": "https://api.github.com/users/ayrtonm/repos", "events_url": "https://api.github.com/users/ayrtonm/events{/privacy}", "received_events_url": "https://api.github.com/users/ayrtonm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39a295f52637817ba8584cb9bcebef91fd0a9f4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/39a295f52637817ba8584cb9bcebef91fd0a9f4f", "html_url": "https://github.com/rust-lang/rust/commit/39a295f52637817ba8584cb9bcebef91fd0a9f4f"}], "stats": {"total": 29, "additions": 24, "deletions": 5}, "files": [{"sha": "063246f79fe362ff41c69a637fcca09d3e32260d", "filename": "src/librustc_infer/infer/error_reporting/mod.rs", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/bae1e03109bc6594763be26cfa78270917c0199a/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bae1e03109bc6594763be26cfa78270917c0199a/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs?ref=bae1e03109bc6594763be26cfa78270917c0199a", "patch": "@@ -1402,8 +1402,12 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         }\n \n         debug!(\"note_type_err(diag={:?})\", diag);\n+        enum Mismatch<'a> {\n+            Variable(ty::error::ExpectedFound<Ty<'a>>),\n+            Fixed(&'static str),\n+        }\n         let (expected_found, exp_found, is_simple_error) = match values {\n-            None => (None, None, false),\n+            None => (None, Mismatch::Fixed(\"type\"), false),\n             Some(values) => {\n                 let (is_simple_error, exp_found) = match values {\n                     ValuePairs::Types(exp_found) => {\n@@ -1417,9 +1421,10 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                         )\n                         .report(diag);\n \n-                        (is_simple_err, Some(exp_found))\n+                        (is_simple_err, Mismatch::Variable(exp_found))\n                     }\n-                    _ => (false, None),\n+                    ValuePairs::TraitRefs(_) => (false, Mismatch::Fixed(\"trait\")),\n+                    _ => (false, Mismatch::Fixed(\"type\")),\n                 };\n                 let vals = match self.values_str(&values) {\n                     Some((expected, found)) => Some((expected, found)),\n@@ -1445,8 +1450,18 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             }\n         };\n         if let Some((expected, found)) = expected_found {\n-            let expected_label = exp_found.map_or(\"type\".into(), |ef| ef.expected.prefix_string());\n-            let found_label = exp_found.map_or(\"type\".into(), |ef| ef.found.prefix_string());\n+            let expected_label = match exp_found {\n+                Mismatch::Variable(ef) => ef.expected.prefix_string(),\n+                Mismatch::Fixed(s) => s.into(),\n+            };\n+            let found_label = match exp_found {\n+                Mismatch::Variable(ef) => ef.found.prefix_string(),\n+                Mismatch::Fixed(s) => s.into(),\n+            };\n+            let exp_found = match exp_found {\n+                Mismatch::Variable(exp_found) => Some(exp_found),\n+                Mismatch::Fixed(_) => None,\n+            };\n             match (&terr, expected == found) {\n                 (TypeError::Sorts(values), extra) => {\n                     let sort_string = |ty: Ty<'tcx>| match (extra, &ty.kind) {\n@@ -1499,6 +1514,10 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 }\n             }\n         }\n+        let exp_found = match exp_found {\n+            Mismatch::Variable(exp_found) => Some(exp_found),\n+            Mismatch::Fixed(_) => None,\n+        };\n         if let Some(exp_found) = exp_found {\n             self.suggest_as_ref_where_appropriate(span, &exp_found, diag);\n         }"}]}