{"sha": "60a669a1743b845dfa349684ef057bc98ec6d840", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwYTY2OWExNzQzYjg0NWRmYTM0OTY4NGVmMDU3YmM5OGVjNmQ4NDA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-06T14:06:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-06T14:06:59Z"}, "message": "auto merge of #18608 : alexcrichton/rust/lint-some-crates, r=aturon\n\nThis commit adds support for linting `extern crate` statements for stability\r\nattributes attached to the crate itself. This is likely to be the mechanism used\r\nto deny access to experimental crates that are part of the standard\r\ndistribution.\r\n\r\ncc #18585 \r\n\r\nr? @aturon", "tree": {"sha": "2861d1de805d6599fef11e326e0db320ead9734b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2861d1de805d6599fef11e326e0db320ead9734b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60a669a1743b845dfa349684ef057bc98ec6d840", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60a669a1743b845dfa349684ef057bc98ec6d840", "html_url": "https://github.com/rust-lang/rust/commit/60a669a1743b845dfa349684ef057bc98ec6d840", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60a669a1743b845dfa349684ef057bc98ec6d840/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e84e7a00ddec76570bbaa9afea385d544f616814", "url": "https://api.github.com/repos/rust-lang/rust/commits/e84e7a00ddec76570bbaa9afea385d544f616814", "html_url": "https://github.com/rust-lang/rust/commit/e84e7a00ddec76570bbaa9afea385d544f616814"}, {"sha": "68ac44cb97d9f7fd5e552aabb516f61cbb5b6760", "url": "https://api.github.com/repos/rust-lang/rust/commits/68ac44cb97d9f7fd5e552aabb516f61cbb5b6760", "html_url": "https://github.com/rust-lang/rust/commit/68ac44cb97d9f7fd5e552aabb516f61cbb5b6760"}], "stats": {"total": 81, "additions": 51, "deletions": 30}, "files": [{"sha": "b60b2ba984e165969e4f0fb9fc2155d88c3021c1", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 48, "deletions": 27, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/60a669a1743b845dfa349684ef057bc98ec6d840/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60a669a1743b845dfa349684ef057bc98ec6d840/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=60a669a1743b845dfa349684ef057bc98ec6d840", "patch": "@@ -45,7 +45,7 @@ use syntax::ast_map;\n use syntax::ast_util::is_shift_binop;\n use syntax::attr::AttrMetaMethods;\n use syntax::attr;\n-use syntax::codemap::Span;\n+use syntax::codemap::{Span, DUMMY_SP};\n use syntax::parse::token;\n use syntax::{ast, ast_util, visit};\n use syntax::ast::{TyI, TyU, TyI8, TyU8, TyI16, TyU16, TyI32, TyU32, TyI64, TyU64};\n@@ -1553,11 +1553,57 @@ declare_lint!(UNSTABLE, Allow,\n /// `#[unstable]` attributes, or no stability attribute.\n pub struct Stability;\n \n+impl Stability {\n+    fn lint(&self, cx: &Context, id: ast::DefId, span: Span) {\n+        let stability = stability::lookup(cx.tcx, id);\n+        let cross_crate = !ast_util::is_local(id);\n+\n+        // stability attributes are promises made across crates; only\n+        // check DEPRECATED for crate-local usage.\n+        let (lint, label) = match stability {\n+            // no stability attributes == Unstable\n+            None if cross_crate => (UNSTABLE, \"unmarked\"),\n+            Some(attr::Stability { level: attr::Unstable, .. }) if cross_crate =>\n+                (UNSTABLE, \"unstable\"),\n+            Some(attr::Stability { level: attr::Experimental, .. }) if cross_crate =>\n+                (EXPERIMENTAL, \"experimental\"),\n+            Some(attr::Stability { level: attr::Deprecated, .. }) =>\n+                (DEPRECATED, \"deprecated\"),\n+            _ => return\n+        };\n+\n+        let msg = match stability {\n+            Some(attr::Stability { text: Some(ref s), .. }) => {\n+                format!(\"use of {} item: {}\", label, *s)\n+            }\n+            _ => format!(\"use of {} item\", label)\n+        };\n+\n+        cx.span_lint(lint, span, msg.as_slice());\n+    }\n+}\n+\n impl LintPass for Stability {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(DEPRECATED, EXPERIMENTAL, UNSTABLE)\n     }\n \n+    fn check_view_item(&mut self, cx: &Context, item: &ast::ViewItem) {\n+        // compiler-generated `extern crate` statements have a dummy span.\n+        if item.span == DUMMY_SP { return }\n+\n+        let id = match item.node {\n+            ast::ViewItemExternCrate(_, _, id) => id,\n+            ast::ViewItemUse(..) => return,\n+        };\n+        let cnum = match cx.tcx.sess.cstore.find_extern_mod_stmt_cnum(id) {\n+            Some(cnum) => cnum,\n+            None => return,\n+        };\n+        let id = ast::DefId { krate: cnum, node: ast::CRATE_NODE_ID };\n+        self.lint(cx, id, item.span);\n+    }\n+\n     fn check_expr(&mut self, cx: &Context, e: &ast::Expr) {\n         // first, check if the given expression was generated by a macro or not\n         // we need to go back the expn_info tree to check only the arguments\n@@ -1629,32 +1675,7 @@ impl LintPass for Stability {\n             }\n             _ => return\n         };\n-\n-        let stability = stability::lookup(cx.tcx, id);\n-        let cross_crate = !ast_util::is_local(id);\n-\n-        // stability attributes are promises made across crates; only\n-        // check DEPRECATED for crate-local usage.\n-        let (lint, label) = match stability {\n-            // no stability attributes == Unstable\n-            None if cross_crate => (UNSTABLE, \"unmarked\"),\n-            Some(attr::Stability { level: attr::Unstable, .. }) if cross_crate =>\n-                (UNSTABLE, \"unstable\"),\n-            Some(attr::Stability { level: attr::Experimental, .. }) if cross_crate =>\n-                (EXPERIMENTAL, \"experimental\"),\n-            Some(attr::Stability { level: attr::Deprecated, .. }) =>\n-                (DEPRECATED, \"deprecated\"),\n-            _ => return\n-        };\n-\n-        let msg = match stability {\n-            Some(attr::Stability { text: Some(ref s), .. }) => {\n-                format!(\"use of {} item: {}\", label, *s)\n-            }\n-            _ => format!(\"use of {} item\", label)\n-        };\n-\n-        cx.span_lint(lint, span, msg.as_slice());\n+        self.lint(cx, id, span);\n     }\n }\n "}, {"sha": "35721ee5b148f9cfe6329d609db6edb672f8ce65", "filename": "src/test/compile-fail/lint-output-format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60a669a1743b845dfa349684ef057bc98ec6d840/src%2Ftest%2Fcompile-fail%2Flint-output-format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60a669a1743b845dfa349684ef057bc98ec6d840/src%2Ftest%2Fcompile-fail%2Flint-output-format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-output-format.rs?ref=60a669a1743b845dfa349684ef057bc98ec6d840", "patch": "@@ -11,7 +11,7 @@\n // compile-flags:-F experimental -D unstable\n // aux-build:lint_output_format.rs\n \n-extern crate lint_output_format;\n+extern crate lint_output_format; //~ ERROR: use of unmarked item\n use lint_output_format::{foo, bar, baz};\n \n fn main() {"}, {"sha": "babf12e97f2a9adf88ea6512546667edb7352dad", "filename": "src/test/compile-fail/lint-stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60a669a1743b845dfa349684ef057bc98ec6d840/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60a669a1743b845dfa349684ef057bc98ec6d840/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-stability.rs?ref=60a669a1743b845dfa349684ef057bc98ec6d840", "patch": "@@ -19,7 +19,7 @@\n \n mod cross_crate {\n     #[phase(plugin, link)]\n-    extern crate lint_stability;\n+    extern crate lint_stability; //~ ERROR: use of unmarked item\n     use self::lint_stability::*;\n \n     fn test() {\n@@ -144,7 +144,7 @@ mod cross_crate {\n }\n \n mod inheritance {\n-    extern crate inherited_stability;\n+    extern crate inherited_stability; //~ ERROR: use of experimental item\n     use self::inherited_stability::*;\n \n     fn test_inheritance() {"}]}