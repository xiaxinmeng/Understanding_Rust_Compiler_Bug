{"sha": "226e181b80fa0be755872b66916ef7e704601ec2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyNmUxODFiODBmYTBiZTc1NTg3MmI2NjkxNmVmN2U3MDQ2MDFlYzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-04T12:27:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-04T12:27:45Z"}, "message": "Auto merge of #88550 - dpaoliello:dpaoliello/allocdebuginfo, r=estebank\n\nInclude debug info for the allocator shim\n\nIssue Details:\nIn some cases it is necessary to generate an \"allocator shim\" to forward various Rust allocation functions (e.g., `__rust_alloc`) to an underlying function (e.g., `malloc`). However, since this allocator shim is a manually created LLVM module it is not processed via the normal module processing code and so no debug info is generated for it (if debugging info is enabled).\n\nFix Details:\n* Modify the `debuginfo` code to allow creating debug info for a module without a `CodegenCx` (since it is difficult, and expensive, to create one just to emit some debug info).\n* After creating the allocator shim add in basic debug info.", "tree": {"sha": "9c354d2143562358dd2dac4488cc14d7a71d95f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c354d2143562358dd2dac4488cc14d7a71d95f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/226e181b80fa0be755872b66916ef7e704601ec2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/226e181b80fa0be755872b66916ef7e704601ec2", "html_url": "https://github.com/rust-lang/rust/commit/226e181b80fa0be755872b66916ef7e704601ec2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/226e181b80fa0be755872b66916ef7e704601ec2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72a51c39c69256c8a8256e775f2764a1983048d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/72a51c39c69256c8a8256e775f2764a1983048d4", "html_url": "https://github.com/rust-lang/rust/commit/72a51c39c69256c8a8256e775f2764a1983048d4"}, {"sha": "77a96ed5646f7c3ee8897693decc4626fe380643", "url": "https://api.github.com/repos/rust-lang/rust/commits/77a96ed5646f7c3ee8897693decc4626fe380643", "html_url": "https://github.com/rust-lang/rust/commit/77a96ed5646f7c3ee8897693decc4626fe380643"}], "stats": {"total": 107, "additions": 66, "deletions": 41}, "files": [{"sha": "30d91b41a8e8b2b8a02b750a2b38c149cff4b3c3", "filename": "compiler/rustc_codegen_llvm/src/allocator.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/226e181b80fa0be755872b66916ef7e704601ec2/compiler%2Frustc_codegen_llvm%2Fsrc%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/226e181b80fa0be755872b66916ef7e704601ec2/compiler%2Frustc_codegen_llvm%2Fsrc%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fallocator.rs?ref=226e181b80fa0be755872b66916ef7e704601ec2", "patch": "@@ -3,19 +3,22 @@ use libc::c_uint;\n use rustc_ast::expand::allocator::{AllocatorKind, AllocatorTy, ALLOCATOR_METHODS};\n use rustc_middle::bug;\n use rustc_middle::ty::TyCtxt;\n+use rustc_session::config::DebugInfo;\n use rustc_span::symbol::sym;\n \n+use crate::debuginfo;\n use crate::llvm::{self, False, True};\n use crate::ModuleLlvm;\n \n pub(crate) unsafe fn codegen(\n     tcx: TyCtxt<'_>,\n-    mods: &mut ModuleLlvm,\n+    module_llvm: &mut ModuleLlvm,\n+    module_name: &str,\n     kind: AllocatorKind,\n     has_alloc_error_handler: bool,\n ) {\n-    let llcx = &*mods.llcx;\n-    let llmod = mods.llmod();\n+    let llcx = &*module_llvm.llcx;\n+    let llmod = module_llvm.llmod();\n     let usize = match tcx.sess.target.pointer_width {\n         16 => llvm::LLVMInt16TypeInContext(llcx),\n         32 => llvm::LLVMInt32TypeInContext(llcx),\n@@ -132,4 +135,10 @@ pub(crate) unsafe fn codegen(\n     llvm::LLVMSetTailCall(ret, True);\n     llvm::LLVMBuildRetVoid(llbuilder);\n     llvm::LLVMDisposeBuilder(llbuilder);\n+\n+    if tcx.sess.opts.debuginfo != DebugInfo::None {\n+        let dbg_cx = debuginfo::CrateDebugContext::new(llmod);\n+        debuginfo::metadata::compile_unit_metadata(tcx, module_name, &dbg_cx);\n+        dbg_cx.finalize(tcx.sess);\n+    }\n }"}, {"sha": "f6953b8b50ae98f6c03f1496e514d707eda9f530", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/mod.rs", "status": "modified", "additions": 40, "deletions": 32, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/226e181b80fa0be755872b66916ef7e704601ec2/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/226e181b80fa0be755872b66916ef7e704601ec2/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=226e181b80fa0be755872b66916ef7e704601ec2", "patch": "@@ -29,6 +29,7 @@ use rustc_middle::ty::layout::HasTyCtxt;\n use rustc_middle::ty::subst::{GenericArgKind, SubstsRef};\n use rustc_middle::ty::{self, Instance, ParamEnv, Ty, TypeFoldable};\n use rustc_session::config::{self, DebugInfo};\n+use rustc_session::Session;\n use rustc_span::symbol::Symbol;\n use rustc_span::{self, BytePos, Pos, SourceFile, SourceFileAndLine, Span};\n use rustc_target::abi::{LayoutOf, Primitive, Size};\n@@ -95,45 +96,52 @@ impl<'a, 'tcx> CrateDebugContext<'a, 'tcx> {\n             composite_types_completed: Default::default(),\n         }\n     }\n-}\n-\n-/// Creates any deferred debug metadata nodes\n-pub fn finalize(cx: &CodegenCx<'_, '_>) {\n-    if cx.dbg_cx.is_none() {\n-        return;\n-    }\n \n-    debug!(\"finalize\");\n+    pub fn finalize(&self, sess: &Session) {\n+        unsafe {\n+            llvm::LLVMRustDIBuilderFinalize(self.builder);\n+\n+            // Debuginfo generation in LLVM by default uses a higher\n+            // version of dwarf than macOS currently understands. We can\n+            // instruct LLVM to emit an older version of dwarf, however,\n+            // for macOS to understand. For more info see #11352\n+            // This can be overridden using --llvm-opts -dwarf-version,N.\n+            // Android has the same issue (#22398)\n+            if let Some(version) = sess.target.dwarf_version {\n+                llvm::LLVMRustAddModuleFlag(self.llmod, \"Dwarf Version\\0\".as_ptr().cast(), version)\n+            }\n \n-    if gdb::needs_gdb_debug_scripts_section(cx) {\n-        // Add a .debug_gdb_scripts section to this compile-unit. This will\n-        // cause GDB to try and load the gdb_load_rust_pretty_printers.py file,\n-        // which activates the Rust pretty printers for binary this section is\n-        // contained in.\n-        gdb::get_or_insert_gdb_debug_scripts_section_global(cx);\n-    }\n+            // Indicate that we want CodeView debug information on MSVC\n+            if sess.target.is_like_msvc {\n+                llvm::LLVMRustAddModuleFlag(self.llmod, \"CodeView\\0\".as_ptr().cast(), 1)\n+            }\n \n-    unsafe {\n-        llvm::LLVMRustDIBuilderFinalize(DIB(cx));\n-        // Debuginfo generation in LLVM by default uses a higher\n-        // version of dwarf than macOS currently understands. We can\n-        // instruct LLVM to emit an older version of dwarf, however,\n-        // for macOS to understand. For more info see #11352\n-        // This can be overridden using --llvm-opts -dwarf-version,N.\n-        // Android has the same issue (#22398)\n-        if let Some(version) = cx.sess().target.dwarf_version {\n-            llvm::LLVMRustAddModuleFlag(cx.llmod, \"Dwarf Version\\0\".as_ptr().cast(), version)\n+            // Prevent bitcode readers from deleting the debug info.\n+            let ptr = \"Debug Info Version\\0\".as_ptr();\n+            llvm::LLVMRustAddModuleFlag(\n+                self.llmod,\n+                ptr.cast(),\n+                llvm::LLVMRustDebugMetadataVersion(),\n+            );\n         }\n+    }\n+}\n \n-        // Indicate that we want CodeView debug information on MSVC\n-        if cx.sess().target.is_like_msvc {\n-            llvm::LLVMRustAddModuleFlag(cx.llmod, \"CodeView\\0\".as_ptr().cast(), 1)\n+/// Creates any deferred debug metadata nodes\n+pub fn finalize(cx: &CodegenCx<'_, '_>) {\n+    if let Some(dbg_cx) = &cx.dbg_cx {\n+        debug!(\"finalize\");\n+\n+        if gdb::needs_gdb_debug_scripts_section(cx) {\n+            // Add a .debug_gdb_scripts section to this compile-unit. This will\n+            // cause GDB to try and load the gdb_load_rust_pretty_printers.py file,\n+            // which activates the Rust pretty printers for binary this section is\n+            // contained in.\n+            gdb::get_or_insert_gdb_debug_scripts_section_global(cx);\n         }\n \n-        // Prevent bitcode readers from deleting the debug info.\n-        let ptr = \"Debug Info Version\\0\".as_ptr();\n-        llvm::LLVMRustAddModuleFlag(cx.llmod, ptr.cast(), llvm::LLVMRustDebugMetadataVersion());\n-    };\n+        dbg_cx.finalize(cx.sess());\n+    }\n }\n \n impl DebugInfoBuilderMethods for Builder<'a, 'll, 'tcx> {"}, {"sha": "1da14344b1d26616a6f8f4a2f7d42ef28824cfe9", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/226e181b80fa0be755872b66916ef7e704601ec2/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/226e181b80fa0be755872b66916ef7e704601ec2/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=226e181b80fa0be755872b66916ef7e704601ec2", "patch": "@@ -92,11 +92,12 @@ impl ExtraBackendMethods for LlvmCodegenBackend {\n     fn codegen_allocator<'tcx>(\n         &self,\n         tcx: TyCtxt<'tcx>,\n-        mods: &mut ModuleLlvm,\n+        module_llvm: &mut ModuleLlvm,\n+        module_name: &str,\n         kind: AllocatorKind,\n         has_alloc_error_handler: bool,\n     ) {\n-        unsafe { allocator::codegen(tcx, mods, kind, has_alloc_error_handler) }\n+        unsafe { allocator::codegen(tcx, module_llvm, module_name, kind, has_alloc_error_handler) }\n     }\n     fn compile_codegen_unit(\n         &self,"}, {"sha": "f427dd7669399eb58690a1da07fe68aaeee13ac6", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/226e181b80fa0be755872b66916ef7e704601ec2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/226e181b80fa0be755872b66916ef7e704601ec2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=226e181b80fa0be755872b66916ef7e704601ec2", "patch": "@@ -538,12 +538,18 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n     } else if let Some(kind) = tcx.allocator_kind(()) {\n         let llmod_id =\n             cgu_name_builder.build_cgu_name(LOCAL_CRATE, &[\"crate\"], Some(\"allocator\")).to_string();\n-        let mut modules = backend.new_metadata(tcx, &llmod_id);\n+        let mut module_llvm = backend.new_metadata(tcx, &llmod_id);\n         tcx.sess.time(\"write_allocator_module\", || {\n-            backend.codegen_allocator(tcx, &mut modules, kind, tcx.lang_items().oom().is_some())\n+            backend.codegen_allocator(\n+                tcx,\n+                &mut module_llvm,\n+                &llmod_id,\n+                kind,\n+                tcx.lang_items().oom().is_some(),\n+            )\n         });\n \n-        Some(ModuleCodegen { name: llmod_id, module_llvm: modules, kind: ModuleKind::Allocator })\n+        Some(ModuleCodegen { name: llmod_id, module_llvm, kind: ModuleKind::Allocator })\n     } else {\n         None\n     };"}, {"sha": "96e53f51dac8f019f94398066cbb14c642d46bf0", "filename": "compiler/rustc_codegen_ssa/src/traits/backend.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/226e181b80fa0be755872b66916ef7e704601ec2/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/226e181b80fa0be755872b66916ef7e704601ec2/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs?ref=226e181b80fa0be755872b66916ef7e704601ec2", "patch": "@@ -120,7 +120,8 @@ pub trait ExtraBackendMethods: CodegenBackend + WriteBackendMethods + Sized + Se\n     fn codegen_allocator<'tcx>(\n         &self,\n         tcx: TyCtxt<'tcx>,\n-        mods: &mut Self::Module,\n+        module_llvm: &mut Self::Module,\n+        module_name: &str,\n         kind: AllocatorKind,\n         has_alloc_error_handler: bool,\n     );"}]}