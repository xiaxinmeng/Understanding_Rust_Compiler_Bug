{"sha": "fb6040096ca2c21c354a500ab8fd0038d84be193", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiNjA0MDA5NmNhMmMyMWMzNTRhNTAwYWI4ZmQwMDM4ZDg0YmUxOTM=", "commit": {"author": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-01-12T20:49:18Z"}, "committer": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-01-13T22:52:00Z"}, "message": "Querify local proc_macro_decls_static", "tree": {"sha": "132d14d3054bbce0ba7a07da32564a9c3faf6972", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/132d14d3054bbce0ba7a07da32564a9c3faf6972"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb6040096ca2c21c354a500ab8fd0038d84be193", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb6040096ca2c21c354a500ab8fd0038d84be193", "html_url": "https://github.com/rust-lang/rust/commit/fb6040096ca2c21c354a500ab8fd0038d84be193", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb6040096ca2c21c354a500ab8fd0038d84be193/comments", "author": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fadb0a16c8737a45746e95df9138912590ed8ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fadb0a16c8737a45746e95df9138912590ed8ad", "html_url": "https://github.com/rust-lang/rust/commit/2fadb0a16c8737a45746e95df9138912590ed8ad"}], "stats": {"total": 46, "additions": 31, "deletions": 15}, "files": [{"sha": "da2524b8188c5945dee880437564aa08c711e398", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb6040096ca2c21c354a500ab8fd0038d84be193/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb6040096ca2c21c354a500ab8fd0038d84be193/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=fb6040096ca2c21c354a500ab8fd0038d84be193", "patch": "@@ -70,7 +70,6 @@ pub struct Session {\n     /// For a library crate, this is always none\n     pub entry_fn: Once<Option<(NodeId, Span, config::EntryFnType)>>,\n     pub plugin_registrar_fn: Once<Option<ast::NodeId>>,\n-    pub proc_macro_decls_static: Once<Option<ast::NodeId>>,\n     pub sysroot: PathBuf,\n     /// The name of the root source file of the crate, in the local file system.\n     /// `None` means that there is no source file.\n@@ -1175,7 +1174,6 @@ pub fn build_session_(\n         // For a library crate, this is always none\n         entry_fn: Once::new(),\n         plugin_registrar_fn: Once::new(),\n-        proc_macro_decls_static: Once::new(),\n         sysroot,\n         local_crate_source_file,\n         working_dir,"}, {"sha": "c7bf221b9391df9fbb379bb68d06b31439b9371e", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fb6040096ca2c21c354a500ab8fd0038d84be193/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb6040096ca2c21c354a500ab8fd0038d84be193/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=fb6040096ca2c21c354a500ab8fd0038d84be193", "patch": "@@ -147,9 +147,8 @@ fn reachable_non_generics_provider<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         })\n         .collect();\n \n-    if let Some(id) = *tcx.sess.proc_macro_decls_static.get() {\n-        let def_id = tcx.hir().local_def_id(id);\n-        reachable_non_generics.insert(def_id, SymbolExportLevel::C);\n+    if let Some(id) = tcx.proc_macro_decls_static(LOCAL_CRATE) {\n+        reachable_non_generics.insert(id, SymbolExportLevel::C);\n     }\n \n     if let Some(id) = *tcx.sess.plugin_registrar_fn.get() {"}, {"sha": "72f534e486bef4ee3203b28be535fb65b4e82fec", "filename": "src/librustc_codegen_utils/symbol_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb6040096ca2c21c354a500ab8fd0038d84be193/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb6040096ca2c21c354a500ab8fd0038d84be193/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs?ref=fb6040096ca2c21c354a500ab8fd0038d84be193", "patch": "@@ -247,7 +247,7 @@ fn compute_symbol_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, instance: Instance\n             let disambiguator = tcx.sess.local_crate_disambiguator();\n             return tcx.sess.generate_plugin_registrar_symbol(disambiguator);\n         }\n-        if *tcx.sess.proc_macro_decls_static.get() == Some(id) {\n+        if tcx.proc_macro_decls_static(LOCAL_CRATE) == Some(def_id) {\n             let disambiguator = tcx.sess.local_crate_disambiguator();\n             return tcx.sess.generate_proc_macro_decls_symbol(disambiguator);\n         }"}, {"sha": "71bc9968b1c469781b8183575f5c584dc280191c", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fb6040096ca2c21c354a500ab8fd0038d84be193/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb6040096ca2c21c354a500ab8fd0038d84be193/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=fb6040096ca2c21c354a500ab8fd0038d84be193", "patch": "@@ -1158,6 +1158,7 @@ where\n }\n \n pub fn default_provide(providers: &mut ty::query::Providers) {\n+    proc_macro_decls::provide(providers);\n     hir::provide(providers);\n     borrowck::provide(providers);\n     mir::provide(providers);\n@@ -1216,8 +1217,6 @@ where\n         .set(time(sess, \"looking for plugin registrar\", || {\n             plugin::build::find_plugin_registrar(sess.diagnostic(), &hir_map)\n         }));\n-    sess.proc_macro_decls_static\n-        .set(proc_macro_decls::find(&hir_map));\n \n     let mut local_providers = ty::query::Providers::default();\n     default_provide(&mut local_providers);\n@@ -1250,6 +1249,10 @@ where\n \n             time(sess, \"loop checking\", || loops::check_crate(tcx));\n \n+            time(sess, \"looking for derive registrar\", || {\n+                proc_macro_decls::find(tcx)\n+            });\n+\n             time(sess, \"attribute checking\", || {\n                 hir::check_attr::check_crate(tcx)\n             });"}, {"sha": "093d15b7e3c577c4c9212bf4b1b658ff21057708", "filename": "src/librustc_driver/proc_macro_decls.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fb6040096ca2c21c354a500ab8fd0038d84be193/src%2Flibrustc_driver%2Fproc_macro_decls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb6040096ca2c21c354a500ab8fd0038d84be193/src%2Flibrustc_driver%2Fproc_macro_decls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fproc_macro_decls.rs?ref=fb6040096ca2c21c354a500ab8fd0038d84be193", "patch": "@@ -1,15 +1,25 @@\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n-use rustc::hir::map::Map;\n+use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc::hir;\n+use rustc::ty::TyCtxt;\n+use rustc::ty::query::Providers;\n use syntax::ast;\n use syntax::attr;\n \n-pub fn find(hir_map: &Map) -> Option<ast::NodeId> {\n-    let krate = hir_map.krate();\n+pub fn find<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>) -> Option<DefId> {\n+    tcx.proc_macro_decls_static(LOCAL_CRATE)\n+}\n+\n+fn proc_macro_decls_static<'tcx>(\n+    tcx: TyCtxt<'_, 'tcx, 'tcx>,\n+    cnum: CrateNum,\n+) -> Option<DefId> {\n+    assert_eq!(cnum, LOCAL_CRATE);\n \n     let mut finder = Finder { decls: None };\n-    krate.visit_all_item_likes(&mut finder);\n-    finder.decls\n+    tcx.hir().krate().visit_all_item_likes(&mut finder);\n+\n+    finder.decls.map(|id| tcx.hir().local_def_id(id))\n }\n \n struct Finder {\n@@ -30,3 +40,9 @@ impl<'v> ItemLikeVisitor<'v> for Finder {\n     }\n }\n \n+pub(crate) fn provide(providers: &mut Providers<'_>) {\n+    *providers = Providers {\n+        proc_macro_decls_static,\n+        ..*providers\n+    };\n+}"}, {"sha": "56558a1550ab1de9c87be621cedefbfc2dcd5f42", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fb6040096ca2c21c354a500ab8fd0038d84be193/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb6040096ca2c21c354a500ab8fd0038d84be193/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=fb6040096ca2c21c354a500ab8fd0038d84be193", "patch": "@@ -487,8 +487,8 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 .get()\n                 .map(|id| tcx.hir().local_def_id(id).index),\n             proc_macro_decls_static: if is_proc_macro {\n-                let id = tcx.sess.proc_macro_decls_static.get().unwrap();\n-                Some(tcx.hir().local_def_id(id).index)\n+                let id = tcx.proc_macro_decls_static(LOCAL_CRATE).unwrap();\n+                Some(id.index)\n             } else {\n                 None\n             },"}]}