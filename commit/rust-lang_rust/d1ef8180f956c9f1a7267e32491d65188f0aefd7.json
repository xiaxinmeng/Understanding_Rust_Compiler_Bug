{"sha": "d1ef8180f956c9f1a7267e32491d65188f0aefd7", "node_id": "C_kwDOAAsO6NoAKGQxZWY4MTgwZjk1NmM5ZjFhNzI2N2UzMjQ5MWQ2NTE4OGYwYWVmZDc", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-08-20T18:40:08Z"}, "committer": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-08-29T17:34:11Z"}, "message": "Revert let_chains stabilization\n\nThis reverts commit 326646074940222d602f3683d0559088690830f4.\n\nThis is the revert against master, the beta revert was already done in #100538.", "tree": {"sha": "dc1e90fb68dbf6688bf2956e9336ffad353a9b91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc1e90fb68dbf6688bf2956e9336ffad353a9b91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1ef8180f956c9f1a7267e32491d65188f0aefd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1ef8180f956c9f1a7267e32491d65188f0aefd7", "html_url": "https://github.com/rust-lang/rust/commit/d1ef8180f956c9f1a7267e32491d65188f0aefd7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1ef8180f956c9f1a7267e32491d65188f0aefd7/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76eb4f3bfdd5e7012268353a0a38b08b638253cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/76eb4f3bfdd5e7012268353a0a38b08b638253cd", "html_url": "https://github.com/rust-lang/rust/commit/76eb4f3bfdd5e7012268353a0a38b08b638253cd"}], "stats": {"total": 1187, "additions": 791, "deletions": 396}, "files": [{"sha": "27061f300a2b20191e5906ed47ac7a683cfd8aa8", "filename": "compiler/rustc_ast/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1ef8180f956c9f1a7267e32491d65188f0aefd7/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ef8180f956c9f1a7267e32491d65188f0aefd7/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Flib.rs?ref=d1ef8180f956c9f1a7267e32491d65188f0aefd7", "patch": "@@ -14,6 +14,7 @@\n #![feature(const_trait_impl)]\n #![feature(if_let_guard)]\n #![cfg_attr(bootstrap, feature(label_break_value))]\n+#![feature(let_chains)]\n #![feature(min_specialization)]\n #![feature(negative_impls)]\n #![feature(slice_internals)]"}, {"sha": "5e9e8aa553d9f500a47b215f5fc2598299894fdd", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1ef8180f956c9f1a7267e32491d65188f0aefd7/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ef8180f956c9f1a7267e32491d65188f0aefd7/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=d1ef8180f956c9f1a7267e32491d65188f0aefd7", "patch": "@@ -31,6 +31,7 @@\n //! in the HIR, especially for multiple identifiers.\n \n #![feature(box_patterns)]\n+#![feature(let_chains)]\n #![feature(let_else)]\n #![feature(never_type)]\n #![recursion_limit = \"256\"]"}, {"sha": "b46274e4a76c7d015d8524ded4aa12ef1c13754c", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d1ef8180f956c9f1a7267e32491d65188f0aefd7/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ef8180f956c9f1a7267e32491d65188f0aefd7/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=d1ef8180f956c9f1a7267e32491d65188f0aefd7", "patch": "@@ -119,7 +119,33 @@ impl<'a> AstValidator<'a> {\n \n     /// Emits an error banning the `let` expression provided in the given location.\n     fn ban_let_expr(&self, expr: &'a Expr, forbidden_let_reason: ForbiddenLetReason) {\n-        self.session.emit_err(ForbiddenLet { span: expr.span, reason: forbidden_let_reason });\n+        let sess = &self.session;\n+        if sess.opts.unstable_features.is_nightly_build() {\n+            let err = \"`let` expressions are not supported here\";\n+            let mut diag = sess.struct_span_err(expr.span, err);\n+            diag.note(\"only supported directly in conditions of `if` and `while` expressions\");\n+            match forbidden_let_reason {\n+                ForbiddenLetReason::GenericForbidden => {}\n+                ForbiddenLetReason::NotSupportedOr(span) => {\n+                    diag.span_note(\n+                        span,\n+                        \"`||` operators are not supported in let chain expressions\",\n+                    );\n+                }\n+                ForbiddenLetReason::NotSupportedParentheses(span) => {\n+                    diag.span_note(\n+                        span,\n+                        \"`let`s wrapped in parentheses are not supported in a context with let \\\n+                        chains\",\n+                    );\n+                }\n+            }\n+            diag.emit();\n+        } else {\n+            sess.struct_span_err(expr.span, \"expected expression, found statement (`let`)\")\n+                .note(\"variable declaration using `let` is a statement\")\n+                .emit();\n+        }\n     }\n \n     fn check_gat_where("}, {"sha": "6f7e88eb86f195e074a38cab814758c0f57d54d0", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1ef8180f956c9f1a7267e32491d65188f0aefd7/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ef8180f956c9f1a7267e32491d65188f0aefd7/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=d1ef8180f956c9f1a7267e32491d65188f0aefd7", "patch": "@@ -777,6 +777,7 @@ pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n         \"`if let` guards are experimental\",\n         \"you can write `if matches!(<expr>, <pattern>)` instead of `if let <pattern> = <expr>`\"\n     );\n+    gate_all!(let_chains, \"`let` expressions in this position are unstable\");\n     gate_all!(\n         async_closure,\n         \"async closures are unstable\","}, {"sha": "f282ff251bda181ca8c7f97c961382c1cd1c1b95", "filename": "compiler/rustc_ast_passes/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1ef8180f956c9f1a7267e32491d65188f0aefd7/compiler%2Frustc_ast_passes%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ef8180f956c9f1a7267e32491d65188f0aefd7/compiler%2Frustc_ast_passes%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Flib.rs?ref=d1ef8180f956c9f1a7267e32491d65188f0aefd7", "patch": "@@ -8,6 +8,7 @@\n #![feature(box_patterns)]\n #![feature(if_let_guard)]\n #![feature(iter_is_partitioned)]\n+#![feature(let_chains)]\n #![feature(let_else)]\n #![recursion_limit = \"256\"]\n "}, {"sha": "053f848aacbf73351cd2d1bcc99d4663fbad6fa9", "filename": "compiler/rustc_attr/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1ef8180f956c9f1a7267e32491d65188f0aefd7/compiler%2Frustc_attr%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ef8180f956c9f1a7267e32491d65188f0aefd7/compiler%2Frustc_attr%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Flib.rs?ref=d1ef8180f956c9f1a7267e32491d65188f0aefd7", "patch": "@@ -4,6 +4,7 @@\n //! The goal is to move the definition of `MetaItem` and things that don't need to be in `syntax`\n //! to this crate.\n \n+#![feature(let_chains)]\n #![feature(let_else)]\n #![deny(rustc::untranslatable_diagnostic)]\n #![deny(rustc::diagnostic_outside_of_impl)]"}, {"sha": "66fe49e9d1262e09143711c002f71f3ee25c9f7f", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1ef8180f956c9f1a7267e32491d65188f0aefd7/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ef8180f956c9f1a7267e32491d65188f0aefd7/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=d1ef8180f956c9f1a7267e32491d65188f0aefd7", "patch": "@@ -2,6 +2,7 @@\n \n #![allow(rustc::potential_query_instability)]\n #![feature(box_patterns)]\n+#![feature(let_chains)]\n #![feature(let_else)]\n #![feature(min_specialization)]\n #![feature(never_type)]"}, {"sha": "11565ba72d7555f1fb157468fd4c83b957eb873e", "filename": "compiler/rustc_builtin_macros/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1ef8180f956c9f1a7267e32491d65188f0aefd7/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ef8180f956c9f1a7267e32491d65188f0aefd7/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs?ref=d1ef8180f956c9f1a7267e32491d65188f0aefd7", "patch": "@@ -8,6 +8,7 @@\n #![feature(decl_macro)]\n #![feature(if_let_guard)]\n #![feature(is_sorted)]\n+#![feature(let_chains)]\n #![feature(let_else)]\n #![feature(proc_macro_internals)]\n #![feature(proc_macro_quote)]"}, {"sha": "636d689a34b5a900ef1ad0ae41484ac5147b4729", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1ef8180f956c9f1a7267e32491d65188f0aefd7/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ef8180f956c9f1a7267e32491d65188f0aefd7/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=d1ef8180f956c9f1a7267e32491d65188f0aefd7", "patch": "@@ -6,6 +6,7 @@\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(hash_raw_entry)]\n+#![feature(let_chains)]\n #![feature(let_else)]\n #![feature(extern_types)]\n #![feature(once_cell)]"}, {"sha": "72ac6af685dc4b247341c8a9fec847e1177cac83", "filename": "compiler/rustc_const_eval/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1ef8180f956c9f1a7267e32491d65188f0aefd7/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ef8180f956c9f1a7267e32491d65188f0aefd7/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs?ref=d1ef8180f956c9f1a7267e32491d65188f0aefd7", "patch": "@@ -9,6 +9,7 @@ Rust MIR: a lowered representation of Rust.\n #![feature(control_flow_enum)]\n #![feature(decl_macro)]\n #![feature(exact_size_is_empty)]\n+#![feature(let_chains)]\n #![feature(let_else)]\n #![feature(map_try_insert)]\n #![feature(min_specialization)]"}, {"sha": "d1ac326a72c6df731d6abe60c2f0b7a1edf08ab9", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1ef8180f956c9f1a7267e32491d65188f0aefd7/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ef8180f956c9f1a7267e32491d65188f0aefd7/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=d1ef8180f956c9f1a7267e32491d65188f0aefd7", "patch": "@@ -1,3 +1,4 @@\n+#![feature(let_chains)]\n #![feature(once_cell)]\n #![feature(rustc_attrs)]\n #![feature(type_alias_impl_trait)]"}, {"sha": "7b0f4354afdf51d403d56173675457eb27201974", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1ef8180f956c9f1a7267e32491d65188f0aefd7/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ef8180f956c9f1a7267e32491d65188f0aefd7/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=d1ef8180f956c9f1a7267e32491d65188f0aefd7", "patch": "@@ -6,6 +6,7 @@\n #![feature(drain_filter)]\n #![feature(if_let_guard)]\n #![feature(adt_const_params)]\n+#![feature(let_chains)]\n #![feature(let_else)]\n #![feature(never_type)]\n #![feature(result_option_inspect)]"}, {"sha": "75dcbd69674d652c5897b8db9c596fc74307eabc", "filename": "compiler/rustc_expand/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1ef8180f956c9f1a7267e32491d65188f0aefd7/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ef8180f956c9f1a7267e32491d65188f0aefd7/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Flib.rs?ref=d1ef8180f956c9f1a7267e32491d65188f0aefd7", "patch": "@@ -2,6 +2,7 @@\n #![feature(associated_type_bounds)]\n #![feature(associated_type_defaults)]\n #![feature(if_let_guard)]\n+#![feature(let_chains)]\n #![feature(let_else)]\n #![feature(macro_metavar_expr)]\n #![feature(proc_macro_diagnostic)]"}, {"sha": "c22adf77a27f6c4ffaae83ee1ffce37e98bd457e", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1ef8180f956c9f1a7267e32491d65188f0aefd7/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ef8180f956c9f1a7267e32491d65188f0aefd7/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=d1ef8180f956c9f1a7267e32491d65188f0aefd7", "patch": "@@ -188,8 +188,6 @@ declare_features! (\n     (accepted, item_like_imports, \"1.15.0\", Some(35120), None),\n     /// Allows `'a: { break 'a; }`.\n     (accepted, label_break_value, \"CURRENT_RUSTC_VERSION\", Some(48594), None),\n-    /// Allows `if/while p && let q = r && ...` chains.\n-    (accepted, let_chains, \"1.64.0\", Some(53667), None),\n     /// Allows `break {expr}` with a value inside `loop`s.\n     (accepted, loop_break_value, \"1.19.0\", Some(37339), None),\n     /// Allows use of `?` as the Kleene \"at most one\" operator in macros."}, {"sha": "a5091621f66159e475d75bc50058d514854a1ff8", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1ef8180f956c9f1a7267e32491d65188f0aefd7/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ef8180f956c9f1a7267e32491d65188f0aefd7/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=d1ef8180f956c9f1a7267e32491d65188f0aefd7", "patch": "@@ -422,6 +422,8 @@ declare_features! (\n     (active, isa_attribute, \"1.48.0\", Some(74727), None),\n     // Allows setting the threshold for the `large_assignments` lint.\n     (active, large_assignments, \"1.52.0\", Some(83518), None),\n+    /// Allows `if/while p && let q = r && ...` chains.\n+    (active, let_chains, \"1.37.0\", Some(53667), None),\n     /// Allows `let...else` statements.\n     (active, let_else, \"1.56.0\", Some(87335), None),\n     /// Allows `#[link(..., cfg(..))]`."}, {"sha": "931ebca7d014524a579c16c78355a2c0e0c74c03", "filename": "compiler/rustc_infer/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1ef8180f956c9f1a7267e32491d65188f0aefd7/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ef8180f956c9f1a7267e32491d65188f0aefd7/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Flib.rs?ref=d1ef8180f956c9f1a7267e32491d65188f0aefd7", "patch": "@@ -18,6 +18,7 @@\n #![feature(control_flow_enum)]\n #![feature(extend_one)]\n #![cfg_attr(bootstrap, feature(label_break_value))]\n+#![feature(let_chains)]\n #![feature(let_else)]\n #![feature(min_specialization)]\n #![feature(never_type)]"}, {"sha": "c3065e4a2d9383c13d7bb147f2540c5b6d3efef4", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1ef8180f956c9f1a7267e32491d65188f0aefd7/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ef8180f956c9f1a7267e32491d65188f0aefd7/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=d1ef8180f956c9f1a7267e32491d65188f0aefd7", "patch": "@@ -33,6 +33,7 @@\n #![feature(if_let_guard)]\n #![feature(iter_intersperse)]\n #![feature(iter_order_by)]\n+#![feature(let_chains)]\n #![feature(let_else)]\n #![feature(never_type)]\n #![recursion_limit = \"256\"]"}, {"sha": "6440f3e390cf1fde772fe34a0b50f79eef8faf20", "filename": "compiler/rustc_metadata/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1ef8180f956c9f1a7267e32491d65188f0aefd7/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ef8180f956c9f1a7267e32491d65188f0aefd7/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flib.rs?ref=d1ef8180f956c9f1a7267e32491d65188f0aefd7", "patch": "@@ -4,6 +4,7 @@\n #![feature(generators)]\n #![feature(generic_associated_types)]\n #![feature(iter_from_generator)]\n+#![feature(let_chains)]\n #![feature(let_else)]\n #![feature(once_cell)]\n #![feature(proc_macro_internals)]"}, {"sha": "be9e5865e541c515ee1e1a51574be8bca3461e07", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1ef8180f956c9f1a7267e32491d65188f0aefd7/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ef8180f956c9f1a7267e32491d65188f0aefd7/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=d1ef8180f956c9f1a7267e32491d65188f0aefd7", "patch": "@@ -39,6 +39,7 @@\n #![feature(extern_types)]\n #![feature(new_uninit)]\n #![feature(once_cell)]\n+#![feature(let_chains)]\n #![feature(let_else)]\n #![feature(min_specialization)]\n #![feature(trusted_len)]"}, {"sha": "11cd2a9aa4dea9b03ed61d3e6658aa0ad15084fe", "filename": "compiler/rustc_mir_build/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1ef8180f956c9f1a7267e32491d65188f0aefd7/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ef8180f956c9f1a7267e32491d65188f0aefd7/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs?ref=d1ef8180f956c9f1a7267e32491d65188f0aefd7", "patch": "@@ -5,6 +5,7 @@\n #![feature(box_patterns)]\n #![feature(control_flow_enum)]\n #![feature(if_let_guard)]\n+#![feature(let_chains)]\n #![feature(let_else)]\n #![feature(min_specialization)]\n #![feature(once_cell)]"}, {"sha": "75851bf9dfddc9fd8ad181099425c9882819595d", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1ef8180f956c9f1a7267e32491d65188f0aefd7/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ef8180f956c9f1a7267e32491d65188f0aefd7/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=d1ef8180f956c9f1a7267e32491d65188f0aefd7", "patch": "@@ -1,5 +1,6 @@\n #![allow(rustc::potential_query_instability)]\n #![feature(box_patterns)]\n+#![feature(let_chains)]\n #![feature(let_else)]\n #![feature(map_try_insert)]\n #![feature(min_specialization)]"}, {"sha": "3c88e1ef377e2160c42b8c4fc61149529a7bf920", "filename": "compiler/rustc_parse/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1ef8180f956c9f1a7267e32491d65188f0aefd7/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ef8180f956c9f1a7267e32491d65188f0aefd7/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flib.rs?ref=d1ef8180f956c9f1a7267e32491d65188f0aefd7", "patch": "@@ -3,6 +3,7 @@\n #![feature(array_windows)]\n #![feature(box_patterns)]\n #![feature(if_let_guard)]\n+#![feature(let_chains)]\n #![feature(let_else)]\n #![feature(never_type)]\n #![feature(rustc_attrs)]"}, {"sha": "c85416095144dbe171532cbfccd61127a01df84e", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d1ef8180f956c9f1a7267e32491d65188f0aefd7/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ef8180f956c9f1a7267e32491d65188f0aefd7/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=d1ef8180f956c9f1a7267e32491d65188f0aefd7", "patch": "@@ -2251,7 +2251,15 @@ impl<'a> Parser<'a> {\n \n     /// Parses the condition of a `if` or `while` expression.\n     fn parse_cond_expr(&mut self) -> PResult<'a, P<Expr>> {\n-        self.parse_expr_res(Restrictions::NO_STRUCT_LITERAL | Restrictions::ALLOW_LET, None)\n+        let cond =\n+            self.parse_expr_res(Restrictions::NO_STRUCT_LITERAL | Restrictions::ALLOW_LET, None)?;\n+\n+        if let ExprKind::Let(..) = cond.kind {\n+            // Remove the last feature gating of a `let` expression since it's stable.\n+            self.sess.gated_spans.ungate_last(sym::let_chains, cond.span);\n+        }\n+\n+        Ok(cond)\n     }\n \n     /// Parses a `let $pat = $expr` pseudo-expression.\n@@ -2280,6 +2288,7 @@ impl<'a> Parser<'a> {\n             this.parse_assoc_expr_with(1 + prec_let_scrutinee_needs_par(), None.into())\n         })?;\n         let span = lo.to(expr.span);\n+        self.sess.gated_spans.gate(sym::let_chains, span);\n         Ok(self.mk_expr(span, ExprKind::Let(pat, expr, span)))\n     }\n \n@@ -2571,13 +2580,15 @@ impl<'a> Parser<'a> {\n     pub(super) fn parse_arm(&mut self) -> PResult<'a, Arm> {\n         // Used to check the `let_chains` and `if_let_guard` features mostly by scaning\n         // `&&` tokens.\n-        fn check_let_expr(expr: &Expr) -> bool {\n+        fn check_let_expr(expr: &Expr) -> (bool, bool) {\n             match expr.kind {\n                 ExprKind::Binary(BinOp { node: BinOpKind::And, .. }, ref lhs, ref rhs) => {\n-                    check_let_expr(lhs) || check_let_expr(rhs)\n+                    let lhs_rslt = check_let_expr(lhs);\n+                    let rhs_rslt = check_let_expr(rhs);\n+                    (lhs_rslt.0 || rhs_rslt.0, false)\n                 }\n-                ExprKind::Let(..) => true,\n-                _ => false,\n+                ExprKind::Let(..) => (true, true),\n+                _ => (false, true),\n             }\n         }\n         let attrs = self.parse_outer_attributes()?;\n@@ -2592,7 +2603,12 @@ impl<'a> Parser<'a> {\n             let guard = if this.eat_keyword(kw::If) {\n                 let if_span = this.prev_token.span;\n                 let cond = this.parse_expr_res(Restrictions::ALLOW_LET, None)?;\n-                if check_let_expr(&cond) {\n+                let (has_let_expr, does_not_have_bin_op) = check_let_expr(&cond);\n+                if has_let_expr {\n+                    if does_not_have_bin_op {\n+                        // Remove the last feature gating of a `let` expression since it's stable.\n+                        this.sess.gated_spans.ungate_last(sym::let_chains, cond.span);\n+                    }\n                     let span = if_span.to(cond.span);\n                     this.sess.gated_spans.gate(sym::if_let_guard, span);\n                 }"}, {"sha": "7b2f83958af85cd31c4bf0f3ebd87a7c5e8aa87e", "filename": "compiler/rustc_passes/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1ef8180f956c9f1a7267e32491d65188f0aefd7/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ef8180f956c9f1a7267e32491d65188f0aefd7/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flib.rs?ref=d1ef8180f956c9f1a7267e32491d65188f0aefd7", "patch": "@@ -7,6 +7,7 @@\n #![allow(rustc::potential_query_instability)]\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(iter_intersperse)]\n+#![feature(let_chains)]\n #![feature(let_else)]\n #![feature(map_try_insert)]\n #![feature(min_specialization)]"}, {"sha": "d91a58b13ff9235f00cb674f46573436c3f58769", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1ef8180f956c9f1a7267e32491d65188f0aefd7/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ef8180f956c9f1a7267e32491d65188f0aefd7/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=d1ef8180f956c9f1a7267e32491d65188f0aefd7", "patch": "@@ -11,6 +11,7 @@\n #![feature(drain_filter)]\n #![feature(if_let_guard)]\n #![feature(iter_intersperse)]\n+#![feature(let_chains)]\n #![feature(let_else)]\n #![feature(never_type)]\n #![recursion_limit = \"256\"]"}, {"sha": "7353c1ca0e2089025dd59d5a0a4331a578eb0307", "filename": "compiler/rustc_session/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1ef8180f956c9f1a7267e32491d65188f0aefd7/compiler%2Frustc_session%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ef8180f956c9f1a7267e32491d65188f0aefd7/compiler%2Frustc_session%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Flib.rs?ref=d1ef8180f956c9f1a7267e32491d65188f0aefd7", "patch": "@@ -1,4 +1,5 @@\n #![feature(if_let_guard)]\n+#![feature(let_chains)]\n #![feature(let_else)]\n #![feature(min_specialization)]\n #![feature(never_type)]"}, {"sha": "77cc2c164c34c052ca381491d7262a928c429c8f", "filename": "compiler/rustc_trait_selection/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1ef8180f956c9f1a7267e32491d65188f0aefd7/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ef8180f956c9f1a7267e32491d65188f0aefd7/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs?ref=d1ef8180f956c9f1a7267e32491d65188f0aefd7", "patch": "@@ -17,6 +17,7 @@\n #![feature(drain_filter)]\n #![feature(hash_drain_filter)]\n #![cfg_attr(bootstrap, feature(label_break_value))]\n+#![feature(let_chains)]\n #![feature(let_else)]\n #![feature(if_let_guard)]\n #![feature(never_type)]"}, {"sha": "8e910441a5d99d7ab676305a17e30d6c5e37c79b", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1ef8180f956c9f1a7267e32491d65188f0aefd7/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ef8180f956c9f1a7267e32491d65188f0aefd7/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=d1ef8180f956c9f1a7267e32491d65188f0aefd7", "patch": "@@ -65,6 +65,7 @@ This API is completely unstable and subject to change.\n #![feature(is_sorted)]\n #![feature(iter_intersperse)]\n #![cfg_attr(bootstrap, feature(label_break_value))]\n+#![feature(let_chains)]\n #![feature(let_else)]\n #![feature(min_specialization)]\n #![feature(never_type)]"}, {"sha": "b0fef492d92befbd8de71ce1c5fcfef2837f1f0b", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1ef8180f956c9f1a7267e32491d65188f0aefd7/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ef8180f956c9f1a7267e32491d65188f0aefd7/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=d1ef8180f956c9f1a7267e32491d65188f0aefd7", "patch": "@@ -254,6 +254,7 @@\n #![feature(intra_doc_pointers)]\n #![cfg_attr(bootstrap, feature(label_break_value))]\n #![feature(lang_items)]\n+#![feature(let_chains)]\n #![feature(let_else)]\n #![feature(linkage)]\n #![feature(link_cfg)]"}, {"sha": "92380d124292d0a8a3a107fa52a626172163b10d", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1ef8180f956c9f1a7267e32491d65188f0aefd7/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ef8180f956c9f1a7267e32491d65188f0aefd7/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=d1ef8180f956c9f1a7267e32491d65188f0aefd7", "patch": "@@ -8,6 +8,7 @@\n #![feature(box_patterns)]\n #![feature(control_flow_enum)]\n #![feature(drain_filter)]\n+#![feature(let_chains)]\n #![feature(let_else)]\n #![feature(test)]\n #![feature(never_type)]"}, {"sha": "2cd8731141af752a8b65559c9155948f6b47eeb2", "filename": "src/test/ui/expr/if/attrs/let-chains-attr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1ef8180f956c9f1a7267e32491d65188f0aefd7/src%2Ftest%2Fui%2Fexpr%2Fif%2Fattrs%2Flet-chains-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ef8180f956c9f1a7267e32491d65188f0aefd7/src%2Ftest%2Fui%2Fexpr%2Fif%2Fattrs%2Flet-chains-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fattrs%2Flet-chains-attr.rs?ref=d1ef8180f956c9f1a7267e32491d65188f0aefd7", "patch": "@@ -1,5 +1,7 @@\n // check-pass\n \n+#![feature(let_chains)]\n+\n #[cfg(FALSE)]\n fn foo() {\n     #[attr]"}, {"sha": "a8b2a283039fd2fbf320285c38d376c856e3e028", "filename": "src/test/ui/expr/if/bad-if-let-suggestion.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1ef8180f956c9f1a7267e32491d65188f0aefd7/src%2Ftest%2Fui%2Fexpr%2Fif%2Fbad-if-let-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ef8180f956c9f1a7267e32491d65188f0aefd7/src%2Ftest%2Fui%2Fexpr%2Fif%2Fbad-if-let-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fbad-if-let-suggestion.rs?ref=d1ef8180f956c9f1a7267e32491d65188f0aefd7", "patch": "@@ -4,6 +4,7 @@\n fn a() {\n     if let x = 1 && i = 2 {}\n     //~^ ERROR cannot find value `i` in this scope\n+    //~| ERROR `let` expressions in this position are unstable\n     //~| ERROR mismatched types\n     //~| ERROR `let` expressions are not supported here\n }"}, {"sha": "60d286fedf58ab8f463df319e40770afd8eb7596", "filename": "src/test/ui/expr/if/bad-if-let-suggestion.stderr", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d1ef8180f956c9f1a7267e32491d65188f0aefd7/src%2Ftest%2Fui%2Fexpr%2Fif%2Fbad-if-let-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1ef8180f956c9f1a7267e32491d65188f0aefd7/src%2Ftest%2Fui%2Fexpr%2Fif%2Fbad-if-let-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fbad-if-let-suggestion.stderr?ref=d1ef8180f956c9f1a7267e32491d65188f0aefd7", "patch": "@@ -13,7 +13,7 @@ LL |     if let x = 1 && i = 2 {}\n    |                     ^ not found in this scope\n \n error[E0425]: cannot find value `i` in this scope\n-  --> $DIR/bad-if-let-suggestion.rs:12:9\n+  --> $DIR/bad-if-let-suggestion.rs:13:9\n    |\n LL | fn a() {\n    | ------ similarly named function `a` defined here\n@@ -22,7 +22,7 @@ LL |     if (i + j) = i {}\n    |         ^ help: a function with a similar name exists: `a`\n \n error[E0425]: cannot find value `j` in this scope\n-  --> $DIR/bad-if-let-suggestion.rs:12:13\n+  --> $DIR/bad-if-let-suggestion.rs:13:13\n    |\n LL | fn a() {\n    | ------ similarly named function `a` defined here\n@@ -31,7 +31,7 @@ LL |     if (i + j) = i {}\n    |             ^ help: a function with a similar name exists: `a`\n \n error[E0425]: cannot find value `i` in this scope\n-  --> $DIR/bad-if-let-suggestion.rs:12:18\n+  --> $DIR/bad-if-let-suggestion.rs:13:18\n    |\n LL | fn a() {\n    | ------ similarly named function `a` defined here\n@@ -40,21 +40,30 @@ LL |     if (i + j) = i {}\n    |                  ^ help: a function with a similar name exists: `a`\n \n error[E0425]: cannot find value `x` in this scope\n-  --> $DIR/bad-if-let-suggestion.rs:19:8\n+  --> $DIR/bad-if-let-suggestion.rs:20:8\n    |\n LL | fn a() {\n    | ------ similarly named function `a` defined here\n ...\n LL |     if x[0] = 1 {}\n    |        ^ help: a function with a similar name exists: `a`\n \n+error[E0658]: `let` expressions in this position are unstable\n+  --> $DIR/bad-if-let-suggestion.rs:5:8\n+   |\n+LL |     if let x = 1 && i = 2 {}\n+   |        ^^^^^^^^^\n+   |\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n+   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+\n error[E0308]: mismatched types\n   --> $DIR/bad-if-let-suggestion.rs:5:8\n    |\n LL |     if let x = 1 && i = 2 {}\n    |        ^^^^^^^^^^^^^^^^^^ expected `bool`, found `()`\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 8 previous errors\n \n-Some errors have detailed explanations: E0308, E0425.\n+Some errors have detailed explanations: E0308, E0425, E0658.\n For more information about an error, try `rustc --explain E0308`."}, {"sha": "635050f376c8a73c50f2eb946648600e9bfbd34e", "filename": "src/test/ui/mir/issue-92893.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1ef8180f956c9f1a7267e32491d65188f0aefd7/src%2Ftest%2Fui%2Fmir%2Fissue-92893.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ef8180f956c9f1a7267e32491d65188f0aefd7/src%2Ftest%2Fui%2Fmir%2Fissue-92893.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-92893.rs?ref=d1ef8180f956c9f1a7267e32491d65188f0aefd7", "patch": "@@ -1,5 +1,6 @@\n struct Bug<A = [(); (let a = (), 1).1]> {\n     //~^ `let` expressions are not supported here\n+    //~| `let` expressions in this position are unstable [E0658]\n     //~| expected expression, found `let` statement\n     a: A\n }"}, {"sha": "4a0fcce31d7c7b0a6f208a5b2abb65fb69db26f1", "filename": "src/test/ui/mir/issue-92893.stderr", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d1ef8180f956c9f1a7267e32491d65188f0aefd7/src%2Ftest%2Fui%2Fmir%2Fissue-92893.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1ef8180f956c9f1a7267e32491d65188f0aefd7/src%2Ftest%2Fui%2Fmir%2Fissue-92893.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-92893.stderr?ref=d1ef8180f956c9f1a7267e32491d65188f0aefd7", "patch": "@@ -12,5 +12,15 @@ LL | struct Bug<A = [(); (let a = (), 1).1]> {\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n-error: aborting due to 2 previous errors\n+error[E0658]: `let` expressions in this position are unstable\n+  --> $DIR/issue-92893.rs:1:22\n+   |\n+LL | struct Bug<A = [(); (let a = (), 1).1]> {\n+   |                      ^^^^^^^^^^\n+   |\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n+   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+\n+error: aborting due to 3 previous errors\n \n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "6498a5195719493dea0b0b46241c39d744f7c4ab", "filename": "src/test/ui/mir/mir_let_chains_drop_order.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1ef8180f956c9f1a7267e32491d65188f0aefd7/src%2Ftest%2Fui%2Fmir%2Fmir_let_chains_drop_order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ef8180f956c9f1a7267e32491d65188f0aefd7/src%2Ftest%2Fui%2Fmir%2Fmir_let_chains_drop_order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir_let_chains_drop_order.rs?ref=d1ef8180f956c9f1a7267e32491d65188f0aefd7", "patch": "@@ -4,6 +4,7 @@\n \n // See `mir_drop_order.rs` for more information\n \n+#![feature(let_chains)]\n #![allow(irrefutable_let_patterns)]\n \n use std::cell::RefCell;"}, {"sha": "f0105e08e27c3ef12c8883f7bcdde5bda14c5a90", "filename": "src/test/ui/rfc-2294-if-let-guard/feature-gate.rs", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d1ef8180f956c9f1a7267e32491d65188f0aefd7/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ef8180f956c9f1a7267e32491d65188f0aefd7/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.rs?ref=d1ef8180f956c9f1a7267e32491d65188f0aefd7", "patch": "@@ -8,35 +8,49 @@ fn _if_let_guard() {\n         //~^ ERROR `if let` guards are experimental\n \n         () if (let 0 = 1) => {}\n-        //~^ ERROR expected expression, found `let` statement\n+        //~^ ERROR `let` expressions in this position are unstable\n+        //~| ERROR expected expression, found `let` statement\n \n         () if (((let 0 = 1))) => {}\n-        //~^ ERROR expected expression, found `let` statement\n+        //~^ ERROR `let` expressions in this position are unstable\n+        //~| ERROR expected expression, found `let` statement\n \n         () if true && let 0 = 1 => {}\n         //~^ ERROR `if let` guards are experimental\n+        //~| ERROR `let` expressions in this position are unstable\n \n         () if let 0 = 1 && true => {}\n         //~^ ERROR `if let` guards are experimental\n+        //~| ERROR `let` expressions in this position are unstable\n \n         () if (let 0 = 1) && true => {}\n-        //~^ ERROR expected expression, found `let` statement\n+        //~^ ERROR `let` expressions in this position are unstable\n+        //~| ERROR expected expression, found `let` statement\n \n         () if true && (let 0 = 1) => {}\n-        //~^ ERROR expected expression, found `let` statement\n+        //~^ ERROR `let` expressions in this position are unstable\n+        //~| ERROR expected expression, found `let` statement\n \n         () if (let 0 = 1) && (let 0 = 1) => {}\n-        //~^ ERROR expected expression, found `let` statement\n+        //~^ ERROR `let` expressions in this position are unstable\n+        //~| ERROR `let` expressions in this position are unstable\n+        //~| ERROR expected expression, found `let` statement\n         //~| ERROR expected expression, found `let` statement\n \n         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n         //~^ ERROR `if let` guards are experimental\n+        //~| ERROR `let` expressions in this position are unstable\n+        //~| ERROR `let` expressions in this position are unstable\n+        //~| ERROR `let` expressions in this position are unstable\n+        //~| ERROR `let` expressions in this position are unstable\n+        //~| ERROR `let` expressions in this position are unstable\n         //~| ERROR expected expression, found `let` statement\n         //~| ERROR expected expression, found `let` statement\n         //~| ERROR expected expression, found `let` statement\n \n         () if let Range { start: _, end: _ } = (true..true) && false => {}\n         //~^ ERROR `if let` guards are experimental\n+        //~| ERROR `let` expressions in this position are unstable\n \n         _ => {}\n     }\n@@ -52,9 +66,11 @@ fn _macros() {\n         }\n     }\n     use_expr!((let 0 = 1 && 0 == 0));\n-    //~^ ERROR expected expression, found `let` statement\n+    //~^ ERROR `let` expressions in this position are unstable\n+    //~| ERROR expected expression, found `let` statement\n     use_expr!((let 0 = 1));\n-    //~^ ERROR expected expression, found `let` statement\n+    //~^ ERROR `let` expressions in this position are unstable\n+    //~| ERROR expected expression, found `let` statement\n     match () {\n         #[cfg(FALSE)]\n         () if let 0 = 1 => {}"}, {"sha": "e017d04a5c933f987ba2f7a5f37a88ebbc553b0a", "filename": "src/test/ui/rfc-2294-if-let-guard/feature-gate.stderr", "status": "modified", "additions": 161, "deletions": 17, "changes": 178, "blob_url": "https://github.com/rust-lang/rust/blob/d1ef8180f956c9f1a7267e32491d65188f0aefd7/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1ef8180f956c9f1a7267e32491d65188f0aefd7/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.stderr?ref=d1ef8180f956c9f1a7267e32491d65188f0aefd7", "patch": "@@ -5,67 +5,67 @@ LL |         () if (let 0 = 1) => {}\n    |                ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/feature-gate.rs:13:18\n+  --> $DIR/feature-gate.rs:14:18\n    |\n LL |         () if (((let 0 = 1))) => {}\n    |                  ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/feature-gate.rs:22:16\n+  --> $DIR/feature-gate.rs:26:16\n    |\n LL |         () if (let 0 = 1) && true => {}\n    |                ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/feature-gate.rs:25:24\n+  --> $DIR/feature-gate.rs:30:24\n    |\n LL |         () if true && (let 0 = 1) => {}\n    |                        ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/feature-gate.rs:28:16\n+  --> $DIR/feature-gate.rs:34:16\n    |\n LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n    |                ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/feature-gate.rs:28:31\n+  --> $DIR/feature-gate.rs:34:31\n    |\n LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n    |                               ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/feature-gate.rs:32:42\n+  --> $DIR/feature-gate.rs:40:42\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |                                          ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/feature-gate.rs:32:55\n+  --> $DIR/feature-gate.rs:40:55\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |                                                       ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/feature-gate.rs:32:68\n+  --> $DIR/feature-gate.rs:40:68\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |                                                                    ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/feature-gate.rs:54:16\n+  --> $DIR/feature-gate.rs:68:16\n    |\n LL |     use_expr!((let 0 = 1 && 0 == 0));\n    |                ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/feature-gate.rs:56:16\n+  --> $DIR/feature-gate.rs:71:16\n    |\n LL |     use_expr!((let 0 = 1));\n    |                ^^^\n \n error: no rules expected the token `let`\n-  --> $DIR/feature-gate.rs:64:15\n+  --> $DIR/feature-gate.rs:80:15\n    |\n LL |     macro_rules! use_expr {\n    |     --------------------- when calling this macro\n@@ -84,7 +84,7 @@ LL |         () if let 0 = 1 => {}\n    = help: you can write `if matches!(<expr>, <pattern>)` instead of `if let <pattern> = <expr>`\n \n error[E0658]: `if let` guards are experimental\n-  --> $DIR/feature-gate.rs:16:12\n+  --> $DIR/feature-gate.rs:18:12\n    |\n LL |         () if true && let 0 = 1 => {}\n    |            ^^^^^^^^^^^^^^^^^^^^\n@@ -94,7 +94,7 @@ LL |         () if true && let 0 = 1 => {}\n    = help: you can write `if matches!(<expr>, <pattern>)` instead of `if let <pattern> = <expr>`\n \n error[E0658]: `if let` guards are experimental\n-  --> $DIR/feature-gate.rs:19:12\n+  --> $DIR/feature-gate.rs:22:12\n    |\n LL |         () if let 0 = 1 && true => {}\n    |            ^^^^^^^^^^^^^^^^^^^^\n@@ -104,7 +104,7 @@ LL |         () if let 0 = 1 && true => {}\n    = help: you can write `if matches!(<expr>, <pattern>)` instead of `if let <pattern> = <expr>`\n \n error[E0658]: `if let` guards are experimental\n-  --> $DIR/feature-gate.rs:32:12\n+  --> $DIR/feature-gate.rs:40:12\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -114,7 +114,7 @@ LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 =\n    = help: you can write `if matches!(<expr>, <pattern>)` instead of `if let <pattern> = <expr>`\n \n error[E0658]: `if let` guards are experimental\n-  --> $DIR/feature-gate.rs:38:12\n+  --> $DIR/feature-gate.rs:51:12\n    |\n LL |         () if let Range { start: _, end: _ } = (true..true) && false => {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -124,7 +124,7 @@ LL |         () if let Range { start: _, end: _ } = (true..true) && false => {}\n    = help: you can write `if matches!(<expr>, <pattern>)` instead of `if let <pattern> = <expr>`\n \n error[E0658]: `if let` guards are experimental\n-  --> $DIR/feature-gate.rs:60:12\n+  --> $DIR/feature-gate.rs:76:12\n    |\n LL |         () if let 0 = 1 => {}\n    |            ^^^^^^^^^^^^\n@@ -133,6 +133,150 @@ LL |         () if let 0 = 1 => {}\n    = help: add `#![feature(if_let_guard)]` to the crate attributes to enable\n    = help: you can write `if matches!(<expr>, <pattern>)` instead of `if let <pattern> = <expr>`\n \n-error: aborting due to 18 previous errors\n+error[E0658]: `let` expressions in this position are unstable\n+  --> $DIR/feature-gate.rs:10:16\n+   |\n+LL |         () if (let 0 = 1) => {}\n+   |                ^^^^^^^^^\n+   |\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n+   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are unstable\n+  --> $DIR/feature-gate.rs:14:18\n+   |\n+LL |         () if (((let 0 = 1))) => {}\n+   |                  ^^^^^^^^^\n+   |\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n+   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are unstable\n+  --> $DIR/feature-gate.rs:18:23\n+   |\n+LL |         () if true && let 0 = 1 => {}\n+   |                       ^^^^^^^^^\n+   |\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n+   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are unstable\n+  --> $DIR/feature-gate.rs:22:15\n+   |\n+LL |         () if let 0 = 1 && true => {}\n+   |               ^^^^^^^^^\n+   |\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n+   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are unstable\n+  --> $DIR/feature-gate.rs:26:16\n+   |\n+LL |         () if (let 0 = 1) && true => {}\n+   |                ^^^^^^^^^\n+   |\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n+   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are unstable\n+  --> $DIR/feature-gate.rs:30:24\n+   |\n+LL |         () if true && (let 0 = 1) => {}\n+   |                        ^^^^^^^^^\n+   |\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n+   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are unstable\n+  --> $DIR/feature-gate.rs:34:16\n+   |\n+LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n+   |                ^^^^^^^^^\n+   |\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n+   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are unstable\n+  --> $DIR/feature-gate.rs:34:31\n+   |\n+LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n+   |                               ^^^^^^^^^\n+   |\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n+   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are unstable\n+  --> $DIR/feature-gate.rs:40:15\n+   |\n+LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n+   |               ^^^^^^^^^\n+   |\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n+   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are unstable\n+  --> $DIR/feature-gate.rs:40:28\n+   |\n+LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n+   |                            ^^^^^^^^^\n+   |\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n+   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are unstable\n+  --> $DIR/feature-gate.rs:40:42\n+   |\n+LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n+   |                                          ^^^^^^^^^\n+   |\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n+   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are unstable\n+  --> $DIR/feature-gate.rs:40:55\n+   |\n+LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n+   |                                                       ^^^^^^^^^\n+   |\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n+   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are unstable\n+  --> $DIR/feature-gate.rs:40:68\n+   |\n+LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n+   |                                                                    ^^^^^^^^^\n+   |\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n+   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are unstable\n+  --> $DIR/feature-gate.rs:51:15\n+   |\n+LL |         () if let Range { start: _, end: _ } = (true..true) && false => {}\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n+   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are unstable\n+  --> $DIR/feature-gate.rs:68:16\n+   |\n+LL |     use_expr!((let 0 = 1 && 0 == 0));\n+   |                ^^^^^^^^^\n+   |\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n+   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are unstable\n+  --> $DIR/feature-gate.rs:71:16\n+   |\n+LL |     use_expr!((let 0 = 1));\n+   |                ^^^^^^^^^\n+   |\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n+   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+\n+error: aborting due to 34 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "ffe0499fda23a54fc584238c38906fb519441112", "filename": "src/test/ui/rfc-2497-if-let-chains/allowed-syntax.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/76eb4f3bfdd5e7012268353a0a38b08b638253cd/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fallowed-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76eb4f3bfdd5e7012268353a0a38b08b638253cd/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fallowed-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fallowed-syntax.rs?ref=76eb4f3bfdd5e7012268353a0a38b08b638253cd", "patch": "@@ -1,30 +0,0 @@\n-// check-pass\n-\n-#![allow(irrefutable_let_patterns)]\n-\n-use std::ops::Range;\n-\n-fn _if() {\n-    if let 0 = 1 {}\n-\n-    if true && let 0 = 1 {}\n-\n-    if let 0 = 1 && true {}\n-\n-    if let Range { start: _, end: _ } = (true..true) && false {}\n-\n-    if let 1 = 1 && let true = { true } && false {\n-    }\n-}\n-\n-fn _while() {\n-    while let 0 = 1 {}\n-\n-    while true && let 0 = 1 {}\n-\n-    while let 0 = 1 && true {}\n-\n-    while let Range { start: _, end: _ } = (true..true) && false {}\n-}\n-\n-fn main() {}"}, {"sha": "d851fac8e644fdac9dc70743538ff83ffc1322e1", "filename": "src/test/ui/rfc-2497-if-let-chains/ast-lowering-does-not-wrap-let-chains.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1ef8180f956c9f1a7267e32491d65188f0aefd7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fast-lowering-does-not-wrap-let-chains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ef8180f956c9f1a7267e32491d65188f0aefd7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fast-lowering-does-not-wrap-let-chains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fast-lowering-does-not-wrap-let-chains.rs?ref=d1ef8180f956c9f1a7267e32491d65188f0aefd7", "patch": "@@ -1,5 +1,6 @@\n // run-pass\n \n+#![feature(let_chains)]\n #![allow(irrefutable_let_patterns)]\n \n fn main() {"}, {"sha": "2a9a5472b2e5703e753ab40c3a976fa666d2b41a", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d1ef8180f956c9f1a7267e32491d65188f0aefd7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ef8180f956c9f1a7267e32491d65188f0aefd7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.rs?ref=d1ef8180f956c9f1a7267e32491d65188f0aefd7", "patch": "@@ -17,6 +17,8 @@\n //\n // To that end, we check some positions which is not part of the language above.\n \n+#![feature(let_chains)] // Avoid inflating `.stderr` with overzealous gates in this test.\n+\n #![allow(irrefutable_let_patterns)]\n \n use std::ops::Range;\n@@ -102,12 +104,6 @@ fn _macros() {\n     //~^ ERROR `let` expressions are not supported here\n     //~| ERROR `let` expressions are not supported here\n     //~| ERROR expected expression, found `let` statement\n-    use_expr!(true && let 0 = 1);\n-    //~^ ERROR expected expression, found `let` statement\n-\n-    macro_rules! noop_expr { ($e:expr) => {}; }\n-    noop_expr!((let 0 = 1));\n-    //~^ ERROR expected expression, found `let` statement\n }\n \n fn nested_within_if_expr() {\n@@ -481,7 +477,4 @@ fn with_parenthesis() {\n         ([1, 2, 3][let _ = ()])\n         //~^ ERROR expected expression, found `let` statement\n     }\n-\n-    #[cfg(FALSE)] (let 0 = 1);\n-    //~^ ERROR expected expression, found `let` statement\n }"}, {"sha": "fce0cdfe0d569bb9f0208bd837836537a9102139", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.stderr", "status": "modified", "additions": 273, "deletions": 291, "changes": 564, "blob_url": "https://github.com/rust-lang/rust/blob/d1ef8180f956c9f1a7267e32491d65188f0aefd7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1ef8180f956c9f1a7267e32491d65188f0aefd7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr?ref=d1ef8180f956c9f1a7267e32491d65188f0aefd7", "patch": "@@ -1,413 +1,413 @@\n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:27:9\n+  --> $DIR/disallowed-positions.rs:29:9\n    |\n LL |     if (let 0 = 1) {}\n    |         ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:31:11\n+  --> $DIR/disallowed-positions.rs:33:11\n    |\n LL |     if (((let 0 = 1))) {}\n    |           ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:35:9\n+  --> $DIR/disallowed-positions.rs:37:9\n    |\n LL |     if (let 0 = 1) && true {}\n    |         ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:39:17\n+  --> $DIR/disallowed-positions.rs:41:17\n    |\n LL |     if true && (let 0 = 1) {}\n    |                 ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:43:9\n+  --> $DIR/disallowed-positions.rs:45:9\n    |\n LL |     if (let 0 = 1) && (let 0 = 1) {}\n    |         ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:43:24\n+  --> $DIR/disallowed-positions.rs:45:24\n    |\n LL |     if (let 0 = 1) && (let 0 = 1) {}\n    |                        ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:49:35\n+  --> $DIR/disallowed-positions.rs:51:35\n    |\n LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                   ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:49:48\n+  --> $DIR/disallowed-positions.rs:51:48\n    |\n LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                                ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:49:61\n+  --> $DIR/disallowed-positions.rs:51:61\n    |\n LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                                             ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:59:12\n+  --> $DIR/disallowed-positions.rs:61:12\n    |\n LL |     while (let 0 = 1) {}\n    |            ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:63:14\n+  --> $DIR/disallowed-positions.rs:65:14\n    |\n LL |     while (((let 0 = 1))) {}\n    |              ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:67:12\n+  --> $DIR/disallowed-positions.rs:69:12\n    |\n LL |     while (let 0 = 1) && true {}\n    |            ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:71:20\n+  --> $DIR/disallowed-positions.rs:73:20\n    |\n LL |     while true && (let 0 = 1) {}\n    |                    ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:75:12\n+  --> $DIR/disallowed-positions.rs:77:12\n    |\n LL |     while (let 0 = 1) && (let 0 = 1) {}\n    |            ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:75:27\n+  --> $DIR/disallowed-positions.rs:77:27\n    |\n LL |     while (let 0 = 1) && (let 0 = 1) {}\n    |                           ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:81:38\n+  --> $DIR/disallowed-positions.rs:83:38\n    |\n LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                      ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:81:51\n+  --> $DIR/disallowed-positions.rs:83:51\n    |\n LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                                   ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:81:64\n+  --> $DIR/disallowed-positions.rs:83:64\n    |\n LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                                                ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:114:9\n+  --> $DIR/disallowed-positions.rs:110:9\n    |\n LL |     if &let 0 = 0 {}\n    |         ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:119:9\n+  --> $DIR/disallowed-positions.rs:115:9\n    |\n LL |     if !let 0 = 0 {}\n    |         ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:122:9\n+  --> $DIR/disallowed-positions.rs:118:9\n    |\n LL |     if *let 0 = 0 {}\n    |         ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:126:9\n+  --> $DIR/disallowed-positions.rs:122:9\n    |\n LL |     if -let 0 = 0 {}\n    |         ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:136:9\n+  --> $DIR/disallowed-positions.rs:132:9\n    |\n LL |     if (let 0 = 0)? {}\n    |         ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:142:16\n+  --> $DIR/disallowed-positions.rs:138:16\n    |\n LL |     if true || let 0 = 0 {}\n    |                ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:145:17\n+  --> $DIR/disallowed-positions.rs:141:17\n    |\n LL |     if (true || let 0 = 0) {}\n    |                 ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:148:25\n+  --> $DIR/disallowed-positions.rs:144:25\n    |\n LL |     if true && (true || let 0 = 0) {}\n    |                         ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:151:25\n+  --> $DIR/disallowed-positions.rs:147:25\n    |\n LL |     if true || (true && let 0 = 0) {}\n    |                         ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:156:12\n+  --> $DIR/disallowed-positions.rs:152:12\n    |\n LL |     if x = let 0 = 0 {}\n    |            ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:161:15\n+  --> $DIR/disallowed-positions.rs:157:15\n    |\n LL |     if true..(let 0 = 0) {}\n    |               ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:165:11\n+  --> $DIR/disallowed-positions.rs:161:11\n    |\n LL |     if ..(let 0 = 0) {}\n    |           ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:169:9\n+  --> $DIR/disallowed-positions.rs:165:9\n    |\n LL |     if (let 0 = 0).. {}\n    |         ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:200:19\n+  --> $DIR/disallowed-positions.rs:196:19\n    |\n LL |     if let true = let true = true {}\n    |                   ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:206:12\n+  --> $DIR/disallowed-positions.rs:202:12\n    |\n LL |     while &let 0 = 0 {}\n    |            ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:211:12\n+  --> $DIR/disallowed-positions.rs:207:12\n    |\n LL |     while !let 0 = 0 {}\n    |            ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:214:12\n+  --> $DIR/disallowed-positions.rs:210:12\n    |\n LL |     while *let 0 = 0 {}\n    |            ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:218:12\n+  --> $DIR/disallowed-positions.rs:214:12\n    |\n LL |     while -let 0 = 0 {}\n    |            ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:228:12\n+  --> $DIR/disallowed-positions.rs:224:12\n    |\n LL |     while (let 0 = 0)? {}\n    |            ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:234:19\n+  --> $DIR/disallowed-positions.rs:230:19\n    |\n LL |     while true || let 0 = 0 {}\n    |                   ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:237:20\n+  --> $DIR/disallowed-positions.rs:233:20\n    |\n LL |     while (true || let 0 = 0) {}\n    |                    ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:240:28\n+  --> $DIR/disallowed-positions.rs:236:28\n    |\n LL |     while true && (true || let 0 = 0) {}\n    |                            ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:243:28\n+  --> $DIR/disallowed-positions.rs:239:28\n    |\n LL |     while true || (true && let 0 = 0) {}\n    |                            ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:248:15\n+  --> $DIR/disallowed-positions.rs:244:15\n    |\n LL |     while x = let 0 = 0 {}\n    |               ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:253:18\n+  --> $DIR/disallowed-positions.rs:249:18\n    |\n LL |     while true..(let 0 = 0) {}\n    |                  ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:257:14\n+  --> $DIR/disallowed-positions.rs:253:14\n    |\n LL |     while ..(let 0 = 0) {}\n    |              ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:261:12\n+  --> $DIR/disallowed-positions.rs:257:12\n    |\n LL |     while (let 0 = 0).. {}\n    |            ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:292:22\n+  --> $DIR/disallowed-positions.rs:288:22\n    |\n LL |     while let true = let true = true {}\n    |                      ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:308:6\n+  --> $DIR/disallowed-positions.rs:304:6\n    |\n LL |     &let 0 = 0;\n    |      ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:312:6\n+  --> $DIR/disallowed-positions.rs:308:6\n    |\n LL |     !let 0 = 0;\n    |      ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:315:6\n+  --> $DIR/disallowed-positions.rs:311:6\n    |\n LL |     *let 0 = 0;\n    |      ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:319:6\n+  --> $DIR/disallowed-positions.rs:315:6\n    |\n LL |     -let 0 = 0;\n    |      ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:329:6\n+  --> $DIR/disallowed-positions.rs:325:6\n    |\n LL |     (let 0 = 0)?;\n    |      ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:335:13\n+  --> $DIR/disallowed-positions.rs:331:13\n    |\n LL |     true || let 0 = 0;\n    |             ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:338:14\n+  --> $DIR/disallowed-positions.rs:334:14\n    |\n LL |     (true || let 0 = 0);\n    |              ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:341:22\n+  --> $DIR/disallowed-positions.rs:337:22\n    |\n LL |     true && (true || let 0 = 0);\n    |                      ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:346:9\n+  --> $DIR/disallowed-positions.rs:342:9\n    |\n LL |     x = let 0 = 0;\n    |         ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:350:12\n+  --> $DIR/disallowed-positions.rs:346:12\n    |\n LL |     true..(let 0 = 0);\n    |            ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:353:8\n+  --> $DIR/disallowed-positions.rs:349:8\n    |\n LL |     ..(let 0 = 0);\n    |        ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:356:6\n+  --> $DIR/disallowed-positions.rs:352:6\n    |\n LL |     (let 0 = 0)..;\n    |      ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:360:6\n+  --> $DIR/disallowed-positions.rs:356:6\n    |\n LL |     (let Range { start: _, end: _ } = true..true || false);\n    |      ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:365:6\n+  --> $DIR/disallowed-positions.rs:361:6\n    |\n LL |     (let true = let true = true);\n    |      ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:365:17\n+  --> $DIR/disallowed-positions.rs:361:17\n    |\n LL |     (let true = let true = true);\n    |                 ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:372:25\n+  --> $DIR/disallowed-positions.rs:368:25\n    |\n LL |         let x = true && let y = 1;\n    |                         ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:378:19\n+  --> $DIR/disallowed-positions.rs:374:19\n    |\n LL |         [1, 2, 3][let _ = ()]\n    |                   ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:383:6\n+  --> $DIR/disallowed-positions.rs:379:6\n    |\n LL |     &let 0 = 0\n    |      ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:395:17\n+  --> $DIR/disallowed-positions.rs:391:17\n    |\n LL |         true && let 1 = 1\n    |                 ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:401:17\n+  --> $DIR/disallowed-positions.rs:397:17\n    |\n LL |         true && let 1 = 1\n    |                 ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:407:17\n+  --> $DIR/disallowed-positions.rs:403:17\n    |\n LL |         true && let 1 = 1\n    |                 ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:419:17\n+  --> $DIR/disallowed-positions.rs:415:17\n    |\n LL |         true && let 1 = 1\n    |                 ^^^\n \n error: expressions must be enclosed in braces to be used as const generic arguments\n-  --> $DIR/disallowed-positions.rs:419:9\n+  --> $DIR/disallowed-positions.rs:415:9\n    |\n LL |         true && let 1 = 1\n    |         ^^^^^^^^^^^^^^^^^\n@@ -418,1066 +418,1048 @@ LL |         { true && let 1 = 1 }\n    |         +                   +\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:429:9\n+  --> $DIR/disallowed-positions.rs:425:9\n    |\n LL |     if (let Some(a) = opt && true) {\n    |         ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:434:9\n+  --> $DIR/disallowed-positions.rs:430:9\n    |\n LL |     if (let Some(a) = opt) && true {\n    |         ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:438:9\n+  --> $DIR/disallowed-positions.rs:434:9\n    |\n LL |     if (let Some(a) = opt) && (let Some(b) = a) {\n    |         ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:438:32\n+  --> $DIR/disallowed-positions.rs:434:32\n    |\n LL |     if (let Some(a) = opt) && (let Some(b) = a) {\n    |                                ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:447:9\n+  --> $DIR/disallowed-positions.rs:443:9\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && b == 1 {\n    |         ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:447:31\n+  --> $DIR/disallowed-positions.rs:443:31\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && b == 1 {\n    |                               ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:453:9\n+  --> $DIR/disallowed-positions.rs:449:9\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && true {\n    |         ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:453:31\n+  --> $DIR/disallowed-positions.rs:449:31\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && true {\n    |                               ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:459:9\n+  --> $DIR/disallowed-positions.rs:455:9\n    |\n LL |     if (let Some(a) = opt && (true)) && true {\n    |         ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:476:22\n+  --> $DIR/disallowed-positions.rs:472:22\n    |\n LL |     let x = (true && let y = 1);\n    |                      ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:481:20\n+  --> $DIR/disallowed-positions.rs:477:20\n    |\n LL |         ([1, 2, 3][let _ = ()])\n    |                    ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:485:20\n-   |\n-LL |     #[cfg(FALSE)] (let 0 = 1);\n-   |                    ^^^\n-\n-error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:97:16\n+  --> $DIR/disallowed-positions.rs:99:16\n    |\n LL |     use_expr!((let 0 = 1 && 0 == 0));\n    |                ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:101:16\n+  --> $DIR/disallowed-positions.rs:103:16\n    |\n LL |     use_expr!((let 0 = 1));\n    |                ^^^\n \n-error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:105:23\n-   |\n-LL |     use_expr!(true && let 0 = 1);\n-   |                       ^^^\n-\n-error: expected expression, found `let` statement\n-  --> $DIR/disallowed-positions.rs:109:17\n-   |\n-LL |     noop_expr!((let 0 = 1));\n-   |                 ^^^\n-\n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:27:9\n+  --> $DIR/disallowed-positions.rs:29:9\n    |\n LL |     if (let 0 = 1) {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:27:9\n+  --> $DIR/disallowed-positions.rs:29:9\n    |\n LL |     if (let 0 = 1) {}\n    |         ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:31:11\n+  --> $DIR/disallowed-positions.rs:33:11\n    |\n LL |     if (((let 0 = 1))) {}\n    |           ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:31:11\n+  --> $DIR/disallowed-positions.rs:33:11\n    |\n LL |     if (((let 0 = 1))) {}\n    |           ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:35:9\n+  --> $DIR/disallowed-positions.rs:37:9\n    |\n LL |     if (let 0 = 1) && true {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:35:9\n+  --> $DIR/disallowed-positions.rs:37:9\n    |\n LL |     if (let 0 = 1) && true {}\n    |         ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:39:17\n+  --> $DIR/disallowed-positions.rs:41:17\n    |\n LL |     if true && (let 0 = 1) {}\n    |                 ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:39:17\n+  --> $DIR/disallowed-positions.rs:41:17\n    |\n LL |     if true && (let 0 = 1) {}\n    |                 ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:43:9\n+  --> $DIR/disallowed-positions.rs:45:9\n    |\n LL |     if (let 0 = 1) && (let 0 = 1) {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:43:9\n+  --> $DIR/disallowed-positions.rs:45:9\n    |\n LL |     if (let 0 = 1) && (let 0 = 1) {}\n    |         ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:43:24\n+  --> $DIR/disallowed-positions.rs:45:24\n    |\n LL |     if (let 0 = 1) && (let 0 = 1) {}\n    |                        ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:43:24\n+  --> $DIR/disallowed-positions.rs:45:24\n    |\n LL |     if (let 0 = 1) && (let 0 = 1) {}\n    |                        ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:49:35\n+  --> $DIR/disallowed-positions.rs:51:35\n    |\n LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                   ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:49:35\n+  --> $DIR/disallowed-positions.rs:51:35\n    |\n LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:49:48\n+  --> $DIR/disallowed-positions.rs:51:48\n    |\n LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                                ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:49:35\n+  --> $DIR/disallowed-positions.rs:51:35\n    |\n LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:49:61\n+  --> $DIR/disallowed-positions.rs:51:61\n    |\n LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                                             ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:49:35\n+  --> $DIR/disallowed-positions.rs:51:35\n    |\n LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:59:12\n+  --> $DIR/disallowed-positions.rs:61:12\n    |\n LL |     while (let 0 = 1) {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:59:12\n+  --> $DIR/disallowed-positions.rs:61:12\n    |\n LL |     while (let 0 = 1) {}\n    |            ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:63:14\n+  --> $DIR/disallowed-positions.rs:65:14\n    |\n LL |     while (((let 0 = 1))) {}\n    |              ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:63:14\n+  --> $DIR/disallowed-positions.rs:65:14\n    |\n LL |     while (((let 0 = 1))) {}\n    |              ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:67:12\n+  --> $DIR/disallowed-positions.rs:69:12\n    |\n LL |     while (let 0 = 1) && true {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:67:12\n+  --> $DIR/disallowed-positions.rs:69:12\n    |\n LL |     while (let 0 = 1) && true {}\n    |            ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:71:20\n+  --> $DIR/disallowed-positions.rs:73:20\n    |\n LL |     while true && (let 0 = 1) {}\n    |                    ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:71:20\n+  --> $DIR/disallowed-positions.rs:73:20\n    |\n LL |     while true && (let 0 = 1) {}\n    |                    ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:75:12\n+  --> $DIR/disallowed-positions.rs:77:12\n    |\n LL |     while (let 0 = 1) && (let 0 = 1) {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:75:12\n+  --> $DIR/disallowed-positions.rs:77:12\n    |\n LL |     while (let 0 = 1) && (let 0 = 1) {}\n    |            ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:75:27\n+  --> $DIR/disallowed-positions.rs:77:27\n    |\n LL |     while (let 0 = 1) && (let 0 = 1) {}\n    |                           ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:75:27\n+  --> $DIR/disallowed-positions.rs:77:27\n    |\n LL |     while (let 0 = 1) && (let 0 = 1) {}\n    |                           ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:81:38\n+  --> $DIR/disallowed-positions.rs:83:38\n    |\n LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:81:38\n+  --> $DIR/disallowed-positions.rs:83:38\n    |\n LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:81:51\n+  --> $DIR/disallowed-positions.rs:83:51\n    |\n LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                                   ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:81:38\n+  --> $DIR/disallowed-positions.rs:83:38\n    |\n LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:81:64\n+  --> $DIR/disallowed-positions.rs:83:64\n    |\n LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                                                ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:81:38\n+  --> $DIR/disallowed-positions.rs:83:38\n    |\n LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:97:16\n+  --> $DIR/disallowed-positions.rs:99:16\n    |\n LL |     use_expr!((let 0 = 1 && 0 == 0));\n    |                ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:97:16\n+  --> $DIR/disallowed-positions.rs:99:16\n    |\n LL |     use_expr!((let 0 = 1 && 0 == 0));\n    |                ^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:97:16\n+  --> $DIR/disallowed-positions.rs:99:16\n    |\n LL |     use_expr!((let 0 = 1 && 0 == 0));\n    |                ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:97:16\n+  --> $DIR/disallowed-positions.rs:99:16\n    |\n LL |     use_expr!((let 0 = 1 && 0 == 0));\n    |                ^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:101:16\n+  --> $DIR/disallowed-positions.rs:103:16\n    |\n LL |     use_expr!((let 0 = 1));\n    |                ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:101:16\n+  --> $DIR/disallowed-positions.rs:103:16\n    |\n LL |     use_expr!((let 0 = 1));\n    |                ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:101:16\n+  --> $DIR/disallowed-positions.rs:103:16\n    |\n LL |     use_expr!((let 0 = 1));\n    |                ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:101:16\n+  --> $DIR/disallowed-positions.rs:103:16\n    |\n LL |     use_expr!((let 0 = 1));\n    |                ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:114:9\n+  --> $DIR/disallowed-positions.rs:110:9\n    |\n LL |     if &let 0 = 0 {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:119:9\n+  --> $DIR/disallowed-positions.rs:115:9\n    |\n LL |     if !let 0 = 0 {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:122:9\n+  --> $DIR/disallowed-positions.rs:118:9\n    |\n LL |     if *let 0 = 0 {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:126:9\n+  --> $DIR/disallowed-positions.rs:122:9\n    |\n LL |     if -let 0 = 0 {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:136:9\n+  --> $DIR/disallowed-positions.rs:132:9\n    |\n LL |     if (let 0 = 0)? {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:136:9\n+  --> $DIR/disallowed-positions.rs:132:9\n    |\n LL |     if (let 0 = 0)? {}\n    |         ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:142:16\n+  --> $DIR/disallowed-positions.rs:138:16\n    |\n LL |     if true || let 0 = 0 {}\n    |                ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:142:13\n+  --> $DIR/disallowed-positions.rs:138:13\n    |\n LL |     if true || let 0 = 0 {}\n    |             ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:145:17\n+  --> $DIR/disallowed-positions.rs:141:17\n    |\n LL |     if (true || let 0 = 0) {}\n    |                 ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:145:14\n+  --> $DIR/disallowed-positions.rs:141:14\n    |\n LL |     if (true || let 0 = 0) {}\n    |              ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:148:25\n+  --> $DIR/disallowed-positions.rs:144:25\n    |\n LL |     if true && (true || let 0 = 0) {}\n    |                         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:148:22\n+  --> $DIR/disallowed-positions.rs:144:22\n    |\n LL |     if true && (true || let 0 = 0) {}\n    |                      ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:151:25\n+  --> $DIR/disallowed-positions.rs:147:25\n    |\n LL |     if true || (true && let 0 = 0) {}\n    |                         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:151:17\n+  --> $DIR/disallowed-positions.rs:147:17\n    |\n LL |     if true || (true && let 0 = 0) {}\n    |                 ^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:156:12\n+  --> $DIR/disallowed-positions.rs:152:12\n    |\n LL |     if x = let 0 = 0 {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:161:15\n+  --> $DIR/disallowed-positions.rs:157:15\n    |\n LL |     if true..(let 0 = 0) {}\n    |               ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:161:15\n+  --> $DIR/disallowed-positions.rs:157:15\n    |\n LL |     if true..(let 0 = 0) {}\n    |               ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:165:11\n+  --> $DIR/disallowed-positions.rs:161:11\n    |\n LL |     if ..(let 0 = 0) {}\n    |           ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:165:11\n+  --> $DIR/disallowed-positions.rs:161:11\n    |\n LL |     if ..(let 0 = 0) {}\n    |           ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:169:9\n+  --> $DIR/disallowed-positions.rs:165:9\n    |\n LL |     if (let 0 = 0).. {}\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:169:9\n+  --> $DIR/disallowed-positions.rs:165:9\n    |\n LL |     if (let 0 = 0).. {}\n    |         ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:175:8\n+  --> $DIR/disallowed-positions.rs:171:8\n    |\n LL |     if let Range { start: _, end: _ } = true..true && false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:179:8\n+  --> $DIR/disallowed-positions.rs:175:8\n    |\n LL |     if let Range { start: _, end: _ } = true..true || false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:186:8\n+  --> $DIR/disallowed-positions.rs:182:8\n    |\n LL |     if let Range { start: F, end } = F..|| true {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:194:8\n+  --> $DIR/disallowed-positions.rs:190:8\n    |\n LL |     if let Range { start: true, end } = t..&&false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:200:19\n+  --> $DIR/disallowed-positions.rs:196:19\n    |\n LL |     if let true = let true = true {}\n    |                   ^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:206:12\n+  --> $DIR/disallowed-positions.rs:202:12\n    |\n LL |     while &let 0 = 0 {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:211:12\n+  --> $DIR/disallowed-positions.rs:207:12\n    |\n LL |     while !let 0 = 0 {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:214:12\n+  --> $DIR/disallowed-positions.rs:210:12\n    |\n LL |     while *let 0 = 0 {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:218:12\n+  --> $DIR/disallowed-positions.rs:214:12\n    |\n LL |     while -let 0 = 0 {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:228:12\n+  --> $DIR/disallowed-positions.rs:224:12\n    |\n LL |     while (let 0 = 0)? {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:228:12\n+  --> $DIR/disallowed-positions.rs:224:12\n    |\n LL |     while (let 0 = 0)? {}\n    |            ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:234:19\n+  --> $DIR/disallowed-positions.rs:230:19\n    |\n LL |     while true || let 0 = 0 {}\n    |                   ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:234:16\n+  --> $DIR/disallowed-positions.rs:230:16\n    |\n LL |     while true || let 0 = 0 {}\n    |                ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:237:20\n+  --> $DIR/disallowed-positions.rs:233:20\n    |\n LL |     while (true || let 0 = 0) {}\n    |                    ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:237:17\n+  --> $DIR/disallowed-positions.rs:233:17\n    |\n LL |     while (true || let 0 = 0) {}\n    |                 ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:240:28\n+  --> $DIR/disallowed-positions.rs:236:28\n    |\n LL |     while true && (true || let 0 = 0) {}\n    |                            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:240:25\n+  --> $DIR/disallowed-positions.rs:236:25\n    |\n LL |     while true && (true || let 0 = 0) {}\n    |                         ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:243:28\n+  --> $DIR/disallowed-positions.rs:239:28\n    |\n LL |     while true || (true && let 0 = 0) {}\n    |                            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:243:20\n+  --> $DIR/disallowed-positions.rs:239:20\n    |\n LL |     while true || (true && let 0 = 0) {}\n    |                    ^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:248:15\n+  --> $DIR/disallowed-positions.rs:244:15\n    |\n LL |     while x = let 0 = 0 {}\n    |               ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:253:18\n+  --> $DIR/disallowed-positions.rs:249:18\n    |\n LL |     while true..(let 0 = 0) {}\n    |                  ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:253:18\n+  --> $DIR/disallowed-positions.rs:249:18\n    |\n LL |     while true..(let 0 = 0) {}\n    |                  ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:257:14\n+  --> $DIR/disallowed-positions.rs:253:14\n    |\n LL |     while ..(let 0 = 0) {}\n    |              ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:257:14\n+  --> $DIR/disallowed-positions.rs:253:14\n    |\n LL |     while ..(let 0 = 0) {}\n    |              ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:261:12\n+  --> $DIR/disallowed-positions.rs:257:12\n    |\n LL |     while (let 0 = 0).. {}\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:261:12\n+  --> $DIR/disallowed-positions.rs:257:12\n    |\n LL |     while (let 0 = 0).. {}\n    |            ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:267:11\n+  --> $DIR/disallowed-positions.rs:263:11\n    |\n LL |     while let Range { start: _, end: _ } = true..true && false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:271:11\n+  --> $DIR/disallowed-positions.rs:267:11\n    |\n LL |     while let Range { start: _, end: _ } = true..true || false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:278:11\n+  --> $DIR/disallowed-positions.rs:274:11\n    |\n LL |     while let Range { start: F, end } = F..|| true {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:286:11\n+  --> $DIR/disallowed-positions.rs:282:11\n    |\n LL |     while let Range { start: true, end } = t..&&false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:292:22\n+  --> $DIR/disallowed-positions.rs:288:22\n    |\n LL |     while let true = let true = true {}\n    |                      ^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:308:6\n+  --> $DIR/disallowed-positions.rs:304:6\n    |\n LL |     &let 0 = 0;\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:312:6\n+  --> $DIR/disallowed-positions.rs:308:6\n    |\n LL |     !let 0 = 0;\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:315:6\n+  --> $DIR/disallowed-positions.rs:311:6\n    |\n LL |     *let 0 = 0;\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:319:6\n+  --> $DIR/disallowed-positions.rs:315:6\n    |\n LL |     -let 0 = 0;\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:329:6\n+  --> $DIR/disallowed-positions.rs:325:6\n    |\n LL |     (let 0 = 0)?;\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:329:6\n+  --> $DIR/disallowed-positions.rs:325:6\n    |\n LL |     (let 0 = 0)?;\n    |      ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:335:13\n+  --> $DIR/disallowed-positions.rs:331:13\n    |\n LL |     true || let 0 = 0;\n    |             ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:335:10\n+  --> $DIR/disallowed-positions.rs:331:10\n    |\n LL |     true || let 0 = 0;\n    |          ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:338:14\n+  --> $DIR/disallowed-positions.rs:334:14\n    |\n LL |     (true || let 0 = 0);\n    |              ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:338:11\n+  --> $DIR/disallowed-positions.rs:334:11\n    |\n LL |     (true || let 0 = 0);\n    |           ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:341:22\n+  --> $DIR/disallowed-positions.rs:337:22\n    |\n LL |     true && (true || let 0 = 0);\n    |                      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `||` operators are not supported in let chain expressions\n-  --> $DIR/disallowed-positions.rs:341:19\n+  --> $DIR/disallowed-positions.rs:337:19\n    |\n LL |     true && (true || let 0 = 0);\n    |                   ^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:346:9\n+  --> $DIR/disallowed-positions.rs:342:9\n    |\n LL |     x = let 0 = 0;\n    |         ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:350:12\n+  --> $DIR/disallowed-positions.rs:346:12\n    |\n LL |     true..(let 0 = 0);\n    |            ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:350:12\n+  --> $DIR/disallowed-positions.rs:346:12\n    |\n LL |     true..(let 0 = 0);\n    |            ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:353:8\n+  --> $DIR/disallowed-positions.rs:349:8\n    |\n LL |     ..(let 0 = 0);\n    |        ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:353:8\n+  --> $DIR/disallowed-positions.rs:349:8\n    |\n LL |     ..(let 0 = 0);\n    |        ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:356:6\n+  --> $DIR/disallowed-positions.rs:352:6\n    |\n LL |     (let 0 = 0)..;\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:356:6\n+  --> $DIR/disallowed-positions.rs:352:6\n    |\n LL |     (let 0 = 0)..;\n    |      ^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:360:6\n+  --> $DIR/disallowed-positions.rs:356:6\n    |\n LL |     (let Range { start: _, end: _ } = true..true || false);\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:365:6\n+  --> $DIR/disallowed-positions.rs:361:6\n    |\n LL |     (let true = let true = true);\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:365:6\n+  --> $DIR/disallowed-positions.rs:361:6\n    |\n LL |     (let true = let true = true);\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:383:6\n+  --> $DIR/disallowed-positions.rs:379:6\n    |\n LL |     &let 0 = 0\n    |      ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:395:17\n+  --> $DIR/disallowed-positions.rs:391:17\n    |\n LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:401:17\n+  --> $DIR/disallowed-positions.rs:397:17\n    |\n LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:407:17\n+  --> $DIR/disallowed-positions.rs:403:17\n    |\n LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:419:17\n+  --> $DIR/disallowed-positions.rs:415:17\n    |\n LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:429:9\n+  --> $DIR/disallowed-positions.rs:425:9\n    |\n LL |     if (let Some(a) = opt && true) {\n    |         ^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:429:9\n+  --> $DIR/disallowed-positions.rs:425:9\n    |\n LL |     if (let Some(a) = opt && true) {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:434:9\n+  --> $DIR/disallowed-positions.rs:430:9\n    |\n LL |     if (let Some(a) = opt) && true {\n    |         ^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:434:9\n+  --> $DIR/disallowed-positions.rs:430:9\n    |\n LL |     if (let Some(a) = opt) && true {\n    |         ^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:438:9\n+  --> $DIR/disallowed-positions.rs:434:9\n    |\n LL |     if (let Some(a) = opt) && (let Some(b) = a) {\n    |         ^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:438:9\n+  --> $DIR/disallowed-positions.rs:434:9\n    |\n LL |     if (let Some(a) = opt) && (let Some(b) = a) {\n    |         ^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:438:32\n+  --> $DIR/disallowed-positions.rs:434:32\n    |\n LL |     if (let Some(a) = opt) && (let Some(b) = a) {\n    |                                ^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:438:32\n+  --> $DIR/disallowed-positions.rs:434:32\n    |\n LL |     if (let Some(a) = opt) && (let Some(b) = a) {\n    |                                ^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:447:9\n+  --> $DIR/disallowed-positions.rs:443:9\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && b == 1 {\n    |         ^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:447:9\n+  --> $DIR/disallowed-positions.rs:443:9\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && b == 1 {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:447:31\n+  --> $DIR/disallowed-positions.rs:443:31\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && b == 1 {\n    |                               ^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:447:31\n+  --> $DIR/disallowed-positions.rs:443:31\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && b == 1 {\n    |                               ^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:453:9\n+  --> $DIR/disallowed-positions.rs:449:9\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && true {\n    |         ^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:453:9\n+  --> $DIR/disallowed-positions.rs:449:9\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && true {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:453:31\n+  --> $DIR/disallowed-positions.rs:449:31\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && true {\n    |                               ^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:453:31\n+  --> $DIR/disallowed-positions.rs:449:31\n    |\n LL |     if (let Some(a) = opt && (let Some(b) = a)) && true {\n    |                               ^^^^^^^^^^^^^^^\n \n error: `let` expressions are not supported here\n-  --> $DIR/disallowed-positions.rs:459:9\n+  --> $DIR/disallowed-positions.rs:455:9\n    |\n LL |     if (let Some(a) = opt && (true)) && true {\n    |         ^^^^^^^^^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if` and `while` expressions\n note: `let`s wrapped in parentheses are not supported in a context with let chains\n-  --> $DIR/disallowed-positions.rs:459:9\n+  --> $DIR/disallowed-positions.rs:455:9\n    |\n LL |     if (let Some(a) = opt && (true)) && true {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:114:8\n+  --> $DIR/disallowed-positions.rs:110:8\n    |\n LL |     if &let 0 = 0 {}\n    |        ^^^^^^^^^^ expected `bool`, found `&bool`\n@@ -1489,27 +1471,27 @@ LL +     if let 0 = 0 {}\n    |\n \n error[E0614]: type `bool` cannot be dereferenced\n-  --> $DIR/disallowed-positions.rs:122:8\n+  --> $DIR/disallowed-positions.rs:118:8\n    |\n LL |     if *let 0 = 0 {}\n    |        ^^^^^^^^^^\n \n error[E0600]: cannot apply unary operator `-` to type `bool`\n-  --> $DIR/disallowed-positions.rs:126:8\n+  --> $DIR/disallowed-positions.rs:122:8\n    |\n LL |     if -let 0 = 0 {}\n    |        ^^^^^^^^^^ cannot apply unary operator `-`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/disallowed-positions.rs:136:8\n+  --> $DIR/disallowed-positions.rs:132:8\n    |\n LL |     if (let 0 = 0)? {}\n    |        ^^^^^^^^^^^^ the `?` operator cannot be applied to type `bool`\n    |\n    = help: the trait `Try` is not implemented for `bool`\n \n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n-  --> $DIR/disallowed-positions.rs:136:19\n+  --> $DIR/disallowed-positions.rs:132:19\n    |\n LL | / fn nested_within_if_expr() {\n LL | |     if &let 0 = 0 {}\n@@ -1526,7 +1508,7 @@ LL | | }\n    = help: the trait `FromResidual<_>` is not implemented for `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:156:8\n+  --> $DIR/disallowed-positions.rs:152:8\n    |\n LL |     if x = let 0 = 0 {}\n    |        ^^^^^^^^^^^^^ expected `bool`, found `()`\n@@ -1537,7 +1519,7 @@ LL |     if x == let 0 = 0 {}\n    |          ~~\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:161:8\n+  --> $DIR/disallowed-positions.rs:157:8\n    |\n LL |     if true..(let 0 = 0) {}\n    |        ^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1546,7 +1528,7 @@ LL |     if true..(let 0 = 0) {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:165:8\n+  --> $DIR/disallowed-positions.rs:161:8\n    |\n LL |     if ..(let 0 = 0) {}\n    |        ^^^^^^^^^^^^^ expected `bool`, found struct `RangeTo`\n@@ -1555,7 +1537,7 @@ LL |     if ..(let 0 = 0) {}\n             found struct `RangeTo<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:169:8\n+  --> $DIR/disallowed-positions.rs:165:8\n    |\n LL |     if (let 0 = 0).. {}\n    |        ^^^^^^^^^^^^^ expected `bool`, found struct `RangeFrom`\n@@ -1564,7 +1546,7 @@ LL |     if (let 0 = 0).. {}\n             found struct `RangeFrom<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:175:12\n+  --> $DIR/disallowed-positions.rs:171:12\n    |\n LL |     if let Range { start: _, end: _ } = true..true && false {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n@@ -1575,7 +1557,7 @@ LL |     if let Range { start: _, end: _ } = true..true && false {}\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:175:8\n+  --> $DIR/disallowed-positions.rs:171:8\n    |\n LL |     if let Range { start: _, end: _ } = true..true && false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1584,7 +1566,7 @@ LL |     if let Range { start: _, end: _ } = true..true && false {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:179:12\n+  --> $DIR/disallowed-positions.rs:175:12\n    |\n LL |     if let Range { start: _, end: _ } = true..true || false {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n@@ -1595,7 +1577,7 @@ LL |     if let Range { start: _, end: _ } = true..true || false {}\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:179:8\n+  --> $DIR/disallowed-positions.rs:175:8\n    |\n LL |     if let Range { start: _, end: _ } = true..true || false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1604,7 +1586,7 @@ LL |     if let Range { start: _, end: _ } = true..true || false {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:186:12\n+  --> $DIR/disallowed-positions.rs:182:12\n    |\n LL |     if let Range { start: F, end } = F..|| true {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^   - this expression has type `fn() -> bool`\n@@ -1615,20 +1597,20 @@ LL |     if let Range { start: F, end } = F..|| true {}\n                   found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:186:41\n+  --> $DIR/disallowed-positions.rs:182:41\n    |\n LL |     if let Range { start: F, end } = F..|| true {}\n    |                                         ^^^^^^^ expected `bool`, found closure\n    |\n    = note: expected type `bool`\n-           found closure `[closure@$DIR/disallowed-positions.rs:186:41: 186:43]`\n+           found closure `[closure@$DIR/disallowed-positions.rs:182:41: 182:43]`\n help: use parentheses to call this closure\n    |\n LL |     if let Range { start: F, end } = F..(|| true)() {}\n    |                                         +       +++\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:186:8\n+  --> $DIR/disallowed-positions.rs:182:8\n    |\n LL |     if let Range { start: F, end } = F..|| true {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1637,7 +1619,7 @@ LL |     if let Range { start: F, end } = F..|| true {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:194:12\n+  --> $DIR/disallowed-positions.rs:190:12\n    |\n LL |     if let Range { start: true, end } = t..&&false {}\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^   - this expression has type `&&bool`\n@@ -1648,7 +1630,7 @@ LL |     if let Range { start: true, end } = t..&&false {}\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:194:44\n+  --> $DIR/disallowed-positions.rs:190:44\n    |\n LL |     if let Range { start: true, end } = t..&&false {}\n    |                                            ^^^^^^^ expected `bool`, found `&&bool`\n@@ -1660,7 +1642,7 @@ LL +     if let Range { start: true, end } = t..false {}\n    |\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:194:8\n+  --> $DIR/disallowed-positions.rs:190:8\n    |\n LL |     if let Range { start: true, end } = t..&&false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1669,15 +1651,15 @@ LL |     if let Range { start: true, end } = t..&&false {}\n             found struct `std::ops::Range<bool>`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/disallowed-positions.rs:132:20\n+  --> $DIR/disallowed-positions.rs:128:20\n    |\n LL |         if let 0 = 0? {}\n    |                    ^^ the `?` operator cannot be applied to type `{integer}`\n    |\n    = help: the trait `Try` is not implemented for `{integer}`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:206:11\n+  --> $DIR/disallowed-positions.rs:202:11\n    |\n LL |     while &let 0 = 0 {}\n    |           ^^^^^^^^^^ expected `bool`, found `&bool`\n@@ -1689,27 +1671,27 @@ LL +     while let 0 = 0 {}\n    |\n \n error[E0614]: type `bool` cannot be dereferenced\n-  --> $DIR/disallowed-positions.rs:214:11\n+  --> $DIR/disallowed-positions.rs:210:11\n    |\n LL |     while *let 0 = 0 {}\n    |           ^^^^^^^^^^\n \n error[E0600]: cannot apply unary operator `-` to type `bool`\n-  --> $DIR/disallowed-positions.rs:218:11\n+  --> $DIR/disallowed-positions.rs:214:11\n    |\n LL |     while -let 0 = 0 {}\n    |           ^^^^^^^^^^ cannot apply unary operator `-`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/disallowed-positions.rs:228:11\n+  --> $DIR/disallowed-positions.rs:224:11\n    |\n LL |     while (let 0 = 0)? {}\n    |           ^^^^^^^^^^^^ the `?` operator cannot be applied to type `bool`\n    |\n    = help: the trait `Try` is not implemented for `bool`\n \n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n-  --> $DIR/disallowed-positions.rs:228:22\n+  --> $DIR/disallowed-positions.rs:224:22\n    |\n LL | / fn nested_within_while_expr() {\n LL | |     while &let 0 = 0 {}\n@@ -1726,7 +1708,7 @@ LL | | }\n    = help: the trait `FromResidual<_>` is not implemented for `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:248:11\n+  --> $DIR/disallowed-positions.rs:244:11\n    |\n LL |     while x = let 0 = 0 {}\n    |           ^^^^^^^^^^^^^ expected `bool`, found `()`\n@@ -1737,7 +1719,7 @@ LL |     while x == let 0 = 0 {}\n    |             ~~\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:253:11\n+  --> $DIR/disallowed-positions.rs:249:11\n    |\n LL |     while true..(let 0 = 0) {}\n    |           ^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1746,7 +1728,7 @@ LL |     while true..(let 0 = 0) {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:257:11\n+  --> $DIR/disallowed-positions.rs:253:11\n    |\n LL |     while ..(let 0 = 0) {}\n    |           ^^^^^^^^^^^^^ expected `bool`, found struct `RangeTo`\n@@ -1755,7 +1737,7 @@ LL |     while ..(let 0 = 0) {}\n             found struct `RangeTo<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:261:11\n+  --> $DIR/disallowed-positions.rs:257:11\n    |\n LL |     while (let 0 = 0).. {}\n    |           ^^^^^^^^^^^^^ expected `bool`, found struct `RangeFrom`\n@@ -1764,7 +1746,7 @@ LL |     while (let 0 = 0).. {}\n             found struct `RangeFrom<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:267:15\n+  --> $DIR/disallowed-positions.rs:263:15\n    |\n LL |     while let Range { start: _, end: _ } = true..true && false {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n@@ -1775,7 +1757,7 @@ LL |     while let Range { start: _, end: _ } = true..true && false {}\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:267:11\n+  --> $DIR/disallowed-positions.rs:263:11\n    |\n LL |     while let Range { start: _, end: _ } = true..true && false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1784,7 +1766,7 @@ LL |     while let Range { start: _, end: _ } = true..true && false {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:271:15\n+  --> $DIR/disallowed-positions.rs:267:15\n    |\n LL |     while let Range { start: _, end: _ } = true..true || false {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n@@ -1795,7 +1777,7 @@ LL |     while let Range { start: _, end: _ } = true..true || false {}\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:271:11\n+  --> $DIR/disallowed-positions.rs:267:11\n    |\n LL |     while let Range { start: _, end: _ } = true..true || false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1804,7 +1786,7 @@ LL |     while let Range { start: _, end: _ } = true..true || false {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:278:15\n+  --> $DIR/disallowed-positions.rs:274:15\n    |\n LL |     while let Range { start: F, end } = F..|| true {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^   - this expression has type `fn() -> bool`\n@@ -1815,20 +1797,20 @@ LL |     while let Range { start: F, end } = F..|| true {}\n                   found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:278:44\n+  --> $DIR/disallowed-positions.rs:274:44\n    |\n LL |     while let Range { start: F, end } = F..|| true {}\n    |                                            ^^^^^^^ expected `bool`, found closure\n    |\n    = note: expected type `bool`\n-           found closure `[closure@$DIR/disallowed-positions.rs:278:44: 278:46]`\n+           found closure `[closure@$DIR/disallowed-positions.rs:274:44: 274:46]`\n help: use parentheses to call this closure\n    |\n LL |     while let Range { start: F, end } = F..(|| true)() {}\n    |                                            +       +++\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:278:11\n+  --> $DIR/disallowed-positions.rs:274:11\n    |\n LL |     while let Range { start: F, end } = F..|| true {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1837,7 +1819,7 @@ LL |     while let Range { start: F, end } = F..|| true {}\n             found struct `std::ops::Range<bool>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:286:15\n+  --> $DIR/disallowed-positions.rs:282:15\n    |\n LL |     while let Range { start: true, end } = t..&&false {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^   - this expression has type `&&bool`\n@@ -1848,7 +1830,7 @@ LL |     while let Range { start: true, end } = t..&&false {}\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:286:47\n+  --> $DIR/disallowed-positions.rs:282:47\n    |\n LL |     while let Range { start: true, end } = t..&&false {}\n    |                                               ^^^^^^^ expected `bool`, found `&&bool`\n@@ -1860,7 +1842,7 @@ LL +     while let Range { start: true, end } = t..false {}\n    |\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:286:11\n+  --> $DIR/disallowed-positions.rs:282:11\n    |\n LL |     while let Range { start: true, end } = t..&&false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found struct `std::ops::Range`\n@@ -1869,35 +1851,35 @@ LL |     while let Range { start: true, end } = t..&&false {}\n             found struct `std::ops::Range<bool>`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/disallowed-positions.rs:224:23\n+  --> $DIR/disallowed-positions.rs:220:23\n    |\n LL |         while let 0 = 0? {}\n    |                       ^^ the `?` operator cannot be applied to type `{integer}`\n    |\n    = help: the trait `Try` is not implemented for `{integer}`\n \n error[E0614]: type `bool` cannot be dereferenced\n-  --> $DIR/disallowed-positions.rs:315:5\n+  --> $DIR/disallowed-positions.rs:311:5\n    |\n LL |     *let 0 = 0;\n    |     ^^^^^^^^^^\n \n error[E0600]: cannot apply unary operator `-` to type `bool`\n-  --> $DIR/disallowed-positions.rs:319:5\n+  --> $DIR/disallowed-positions.rs:315:5\n    |\n LL |     -let 0 = 0;\n    |     ^^^^^^^^^^ cannot apply unary operator `-`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/disallowed-positions.rs:329:5\n+  --> $DIR/disallowed-positions.rs:325:5\n    |\n LL |     (let 0 = 0)?;\n    |     ^^^^^^^^^^^^ the `?` operator cannot be applied to type `bool`\n    |\n    = help: the trait `Try` is not implemented for `bool`\n \n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n-  --> $DIR/disallowed-positions.rs:329:16\n+  --> $DIR/disallowed-positions.rs:325:16\n    |\n LL | / fn outside_if_and_while_expr() {\n LL | |     &let 0 = 0;\n@@ -1914,7 +1896,7 @@ LL | | }\n    = help: the trait `FromResidual<_>` is not implemented for `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:360:10\n+  --> $DIR/disallowed-positions.rs:356:10\n    |\n LL |     (let Range { start: _, end: _ } = true..true || false);\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n@@ -1925,7 +1907,7 @@ LL |     (let Range { start: _, end: _ } = true..true || false);\n             found struct `std::ops::Range<_>`\n \n error[E0308]: mismatched types\n-  --> $DIR/disallowed-positions.rs:383:5\n+  --> $DIR/disallowed-positions.rs:379:5\n    |\n LL | fn outside_if_and_while_expr() {\n    |                                - help: try adding a return type: `-> &bool`\n@@ -1934,14 +1916,14 @@ LL |     &let 0 = 0\n    |     ^^^^^^^^^^ expected `()`, found `&bool`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/disallowed-positions.rs:325:17\n+  --> $DIR/disallowed-positions.rs:321:17\n    |\n LL |         let 0 = 0?;\n    |                 ^^ the `?` operator cannot be applied to type `{integer}`\n    |\n    = help: the trait `Try` is not implemented for `{integer}`\n \n-error: aborting due to 218 previous errors\n+error: aborting due to 215 previous errors\n \n Some errors have detailed explanations: E0277, E0308, E0600, E0614.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "12befc637c787b5d5dcc6c78d9eac342bda7a50d", "filename": "src/test/ui/rfc-2497-if-let-chains/ensure-that-let-else-does-not-interact-with-let-chains.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1ef8180f956c9f1a7267e32491d65188f0aefd7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fensure-that-let-else-does-not-interact-with-let-chains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ef8180f956c9f1a7267e32491d65188f0aefd7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fensure-that-let-else-does-not-interact-with-let-chains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fensure-that-let-else-does-not-interact-with-let-chains.rs?ref=d1ef8180f956c9f1a7267e32491d65188f0aefd7", "patch": "@@ -1,4 +1,4 @@\n-#![feature(let_else)]\n+#![feature(let_chains, let_else)]\n \n fn main() {\n     let opt = Some(1i32);"}, {"sha": "2b407ef510c5211a90234a1f5e553d846ef7a2e0", "filename": "src/test/ui/rfc-2497-if-let-chains/feature-gate.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/d1ef8180f956c9f1a7267e32491d65188f0aefd7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ef8180f956c9f1a7267e32491d65188f0aefd7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.rs?ref=d1ef8180f956c9f1a7267e32491d65188f0aefd7", "patch": "@@ -0,0 +1,62 @@\n+// gate-test-let_chains\n+\n+// Here we test feature gating for \u00b4let_chains`.\n+// See `disallowed-positions.rs` for the grammar\n+// defining the language for gated allowed positions.\n+\n+#![allow(irrefutable_let_patterns)]\n+\n+use std::ops::Range;\n+\n+fn _if() {\n+    if let 0 = 1 {} // Stable!\n+\n+    if true && let 0 = 1 {}\n+    //~^ ERROR `let` expressions in this position are unstable [E0658]\n+\n+    if let 0 = 1 && true {}\n+    //~^ ERROR `let` expressions in this position are unstable [E0658]\n+\n+    if let Range { start: _, end: _ } = (true..true) && false {}\n+    //~^ ERROR `let` expressions in this position are unstable [E0658]\n+\n+    if let 1 = 1 && let true = { true } && false {\n+    //~^ ERROR `let` expressions in this position are unstable [E0658]\n+    //~| ERROR `let` expressions in this position are unstable [E0658]\n+    }\n+}\n+\n+fn _while() {\n+    while let 0 = 1 {} // Stable!\n+\n+    while true && let 0 = 1 {}\n+    //~^ ERROR `let` expressions in this position are unstable [E0658]\n+\n+    while let 0 = 1 && true {}\n+    //~^ ERROR `let` expressions in this position are unstable [E0658]\n+\n+    while let Range { start: _, end: _ } = (true..true) && false {}\n+    //~^ ERROR `let` expressions in this position are unstable [E0658]\n+}\n+\n+fn _macros() {\n+    macro_rules! noop_expr { ($e:expr) => {}; }\n+\n+    noop_expr!((let 0 = 1));\n+    //~^ ERROR `let` expressions in this position are unstable [E0658]\n+    //~| ERROR expected expression, found `let` statement\n+\n+    macro_rules! use_expr {\n+        ($e:expr) => {\n+            if $e {}\n+            while $e {}\n+        }\n+    }\n+    #[cfg(FALSE)] (let 0 = 1);\n+    //~^ ERROR `let` expressions in this position are unstable [E0658]\n+    //~| ERROR expected expression, found `let` statement\n+    use_expr!(let 0 = 1);\n+    //~^ ERROR no rules expected the token `let`\n+}\n+\n+fn main() {}"}, {"sha": "feea1c254d8da844f8c4fee012e93c21e2c5781f", "filename": "src/test/ui/rfc-2497-if-let-chains/feature-gate.stderr", "status": "added", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/d1ef8180f956c9f1a7267e32491d65188f0aefd7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1ef8180f956c9f1a7267e32491d65188f0aefd7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.stderr?ref=d1ef8180f956c9f1a7267e32491d65188f0aefd7", "patch": "@@ -0,0 +1,114 @@\n+error: expected expression, found `let` statement\n+  --> $DIR/feature-gate.rs:55:20\n+   |\n+LL |     #[cfg(FALSE)] (let 0 = 1);\n+   |                    ^^^\n+\n+error: expected expression, found `let` statement\n+  --> $DIR/feature-gate.rs:45:17\n+   |\n+LL |     noop_expr!((let 0 = 1));\n+   |                 ^^^\n+\n+error: no rules expected the token `let`\n+  --> $DIR/feature-gate.rs:58:15\n+   |\n+LL |     macro_rules! use_expr {\n+   |     --------------------- when calling this macro\n+...\n+LL |     use_expr!(let 0 = 1);\n+   |               ^^^ no rules expected this token in macro call\n+\n+error[E0658]: `let` expressions in this position are unstable\n+  --> $DIR/feature-gate.rs:14:16\n+   |\n+LL |     if true && let 0 = 1 {}\n+   |                ^^^^^^^^^\n+   |\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n+   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are unstable\n+  --> $DIR/feature-gate.rs:17:8\n+   |\n+LL |     if let 0 = 1 && true {}\n+   |        ^^^^^^^^^\n+   |\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n+   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are unstable\n+  --> $DIR/feature-gate.rs:20:8\n+   |\n+LL |     if let Range { start: _, end: _ } = (true..true) && false {}\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n+   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are unstable\n+  --> $DIR/feature-gate.rs:23:8\n+   |\n+LL |     if let 1 = 1 && let true = { true } && false {\n+   |        ^^^^^^^^^\n+   |\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n+   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are unstable\n+  --> $DIR/feature-gate.rs:23:21\n+   |\n+LL |     if let 1 = 1 && let true = { true } && false {\n+   |                     ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n+   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are unstable\n+  --> $DIR/feature-gate.rs:32:19\n+   |\n+LL |     while true && let 0 = 1 {}\n+   |                   ^^^^^^^^^\n+   |\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n+   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are unstable\n+  --> $DIR/feature-gate.rs:35:11\n+   |\n+LL |     while let 0 = 1 && true {}\n+   |           ^^^^^^^^^\n+   |\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n+   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are unstable\n+  --> $DIR/feature-gate.rs:38:11\n+   |\n+LL |     while let Range { start: _, end: _ } = (true..true) && false {}\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n+   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are unstable\n+  --> $DIR/feature-gate.rs:55:20\n+   |\n+LL |     #[cfg(FALSE)] (let 0 = 1);\n+   |                    ^^^^^^^^^\n+   |\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n+   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+\n+error[E0658]: `let` expressions in this position are unstable\n+  --> $DIR/feature-gate.rs:45:17\n+   |\n+LL |     noop_expr!((let 0 = 1));\n+   |                 ^^^^^^^^^\n+   |\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n+   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+\n+error: aborting due to 13 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "a942d1f4cafbfaccc17095f143907126aa0e0bb0", "filename": "src/test/ui/rfc-2497-if-let-chains/invalid-let-in-a-valid-let-context.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1ef8180f956c9f1a7267e32491d65188f0aefd7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Finvalid-let-in-a-valid-let-context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ef8180f956c9f1a7267e32491d65188f0aefd7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Finvalid-let-in-a-valid-let-context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Finvalid-let-in-a-valid-let-context.rs?ref=d1ef8180f956c9f1a7267e32491d65188f0aefd7", "patch": "@@ -1,3 +1,5 @@\n+#![feature(let_chains)]\n+\n fn main() {\n     let _opt = Some(1i32);\n "}, {"sha": "d1ce83c723329d2bf7e64d75bc3fe9a48d370666", "filename": "src/test/ui/rfc-2497-if-let-chains/invalid-let-in-a-valid-let-context.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d1ef8180f956c9f1a7267e32491d65188f0aefd7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Finvalid-let-in-a-valid-let-context.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1ef8180f956c9f1a7267e32491d65188f0aefd7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Finvalid-let-in-a-valid-let-context.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Finvalid-let-in-a-valid-let-context.stderr?ref=d1ef8180f956c9f1a7267e32491d65188f0aefd7", "patch": "@@ -1,35 +1,35 @@\n error: expected expression, found `let` statement\n-  --> $DIR/invalid-let-in-a-valid-let-context.rs:6:19\n+  --> $DIR/invalid-let-in-a-valid-let-context.rs:8:19\n    |\n LL |         let _ = &&let Some(x) = Some(42);\n    |                   ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/invalid-let-in-a-valid-let-context.rs:11:47\n+  --> $DIR/invalid-let-in-a-valid-let-context.rs:13:47\n    |\n LL |         if let Some(elem) = _opt && [1, 2, 3][let _ = &&let Some(x) = Some(42)] = 1 {\n    |                                               ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/invalid-let-in-a-valid-let-context.rs:11:57\n+  --> $DIR/invalid-let-in-a-valid-let-context.rs:13:57\n    |\n LL |         if let Some(elem) = _opt && [1, 2, 3][let _ = &&let Some(x) = Some(42)] = 1 {\n    |                                                         ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/invalid-let-in-a-valid-let-context.rs:21:23\n+  --> $DIR/invalid-let-in-a-valid-let-context.rs:23:23\n    |\n LL |             [1, 2, 3][let _ = ()];\n    |                       ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/invalid-let-in-a-valid-let-context.rs:30:47\n+  --> $DIR/invalid-let-in-a-valid-let-context.rs:32:47\n    |\n LL |         if let Some(elem) = _opt && [1, 2, 3][let _ = ()] = 1 {\n    |                                               ^^^\n \n error: expected expression, found `let` statement\n-  --> $DIR/invalid-let-in-a-valid-let-context.rs:38:21\n+  --> $DIR/invalid-let-in-a-valid-let-context.rs:40:21\n    |\n LL |             let x = let y = 1;\n    |                     ^^^"}, {"sha": "3d1626e8ffb9adb95afc00a8db2aa8e40279be6e", "filename": "src/test/ui/rfc-2497-if-let-chains/irrefutable-lets.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1ef8180f956c9f1a7267e32491d65188f0aefd7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Firrefutable-lets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ef8180f956c9f1a7267e32491d65188f0aefd7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Firrefutable-lets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Firrefutable-lets.rs?ref=d1ef8180f956c9f1a7267e32491d65188f0aefd7", "patch": "@@ -1,7 +1,7 @@\n // revisions: allowed disallowed\n //[allowed] check-pass\n \n-#![feature(if_let_guard)]\n+#![feature(if_let_guard, let_chains)]\n #![cfg_attr(allowed, allow(irrefutable_let_patterns))]\n #![cfg_attr(disallowed, deny(irrefutable_let_patterns))]\n "}, {"sha": "6b7d88356508549ce72a53ad57afd2daa952420a", "filename": "src/test/ui/rfc-2497-if-let-chains/issue-90722.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1ef8180f956c9f1a7267e32491d65188f0aefd7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fissue-90722.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ef8180f956c9f1a7267e32491d65188f0aefd7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fissue-90722.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fissue-90722.rs?ref=d1ef8180f956c9f1a7267e32491d65188f0aefd7", "patch": "@@ -1,5 +1,7 @@\n // check-pass\n \n+#![feature(let_chains)]\n+\n fn main() {\n     let x = Some(vec![\"test\"]);\n "}, {"sha": "7c7e31f4db4007e5a8f7d443239f86af4c77f942", "filename": "src/test/ui/rfc-2497-if-let-chains/issue-92145.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1ef8180f956c9f1a7267e32491d65188f0aefd7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fissue-92145.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ef8180f956c9f1a7267e32491d65188f0aefd7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fissue-92145.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fissue-92145.rs?ref=d1ef8180f956c9f1a7267e32491d65188f0aefd7", "patch": "@@ -1,5 +1,7 @@\n // check-pass\n \n+#![feature(let_chains)]\n+\n fn main() {\n     let opt = Some(\"foo bar\");\n "}, {"sha": "f90b9ab0d40f03c9823583dc785d1e78f56749c8", "filename": "src/test/ui/rfc-2497-if-let-chains/issue-93150.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1ef8180f956c9f1a7267e32491d65188f0aefd7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fissue-93150.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ef8180f956c9f1a7267e32491d65188f0aefd7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fissue-93150.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fissue-93150.rs?ref=d1ef8180f956c9f1a7267e32491d65188f0aefd7", "patch": "@@ -2,6 +2,7 @@ fn main() {\n     match true {\n         _ if let true = true && true => {}\n         //~^ ERROR `if let` guards are\n+        //~| ERROR `let` expressions in this\n         _ => {}\n     }\n }"}, {"sha": "b25f299a2190f939eb8bddcef3fa4e15d9eedd24", "filename": "src/test/ui/rfc-2497-if-let-chains/issue-93150.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d1ef8180f956c9f1a7267e32491d65188f0aefd7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fissue-93150.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1ef8180f956c9f1a7267e32491d65188f0aefd7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fissue-93150.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fissue-93150.stderr?ref=d1ef8180f956c9f1a7267e32491d65188f0aefd7", "patch": "@@ -8,6 +8,15 @@ LL |         _ if let true = true && true => {}\n    = help: add `#![feature(if_let_guard)]` to the crate attributes to enable\n    = help: you can write `if matches!(<expr>, <pattern>)` instead of `if let <pattern> = <expr>`\n \n-error: aborting due to previous error\n+error[E0658]: `let` expressions in this position are unstable\n+  --> $DIR/issue-93150.rs:3:14\n+   |\n+LL |         _ if let true = true && true => {}\n+   |              ^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n+   = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "e061174f667d97a68384d77c36e295d0d52979de", "filename": "src/test/ui/rfc-2497-if-let-chains/then-else-blocks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1ef8180f956c9f1a7267e32491d65188f0aefd7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fthen-else-blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ef8180f956c9f1a7267e32491d65188f0aefd7/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fthen-else-blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fthen-else-blocks.rs?ref=d1ef8180f956c9f1a7267e32491d65188f0aefd7", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n \n-#![feature(if_let_guard)]\n+#![feature(if_let_guard, let_chains)]\n \n fn check_if_let(opt: Option<Option<Option<i32>>>, value: i32) -> bool {\n     if let Some(first) = opt"}, {"sha": "82574a8e64b0ae028eb64769914837fd8c148553", "filename": "src/tools/clippy/clippy_dev/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1ef8180f956c9f1a7267e32491d65188f0aefd7/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ef8180f956c9f1a7267e32491d65188f0aefd7/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Flib.rs?ref=d1ef8180f956c9f1a7267e32491d65188f0aefd7", "patch": "@@ -1,3 +1,4 @@\n+#![feature(let_chains)]\n #![feature(let_else)]\n #![feature(once_cell)]\n #![feature(rustc_private)]"}, {"sha": "ec5c73c135764db66e1271342e7c16d277f3b91e", "filename": "src/tools/clippy/clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1ef8180f956c9f1a7267e32491d65188f0aefd7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ef8180f956c9f1a7267e32491d65188f0aefd7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs?ref=d1ef8180f956c9f1a7267e32491d65188f0aefd7", "patch": "@@ -4,6 +4,7 @@\n #![feature(control_flow_enum)]\n #![feature(drain_filter)]\n #![feature(iter_intersperse)]\n+#![feature(let_chains)]\n #![feature(let_else)]\n #![feature(lint_reasons)]\n #![feature(never_type)]"}, {"sha": "313f1f1d9a6f1dd0d64c9d7bc287ae13b970ef1d", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1ef8180f956c9f1a7267e32491d65188f0aefd7/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ef8180f956c9f1a7267e32491d65188f0aefd7/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=d1ef8180f956c9f1a7267e32491d65188f0aefd7", "patch": "@@ -2,6 +2,7 @@\n #![feature(box_patterns)]\n #![feature(control_flow_enum)]\n #![feature(let_else)]\n+#![feature(let_chains)]\n #![feature(lint_reasons)]\n #![feature(once_cell)]\n #![feature(rustc_private)]"}, {"sha": "fee8e3030b8087cb16a52a6ffa55f67967c9158f", "filename": "src/tools/clippy/tests/ui/needless_late_init.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1ef8180f956c9f1a7267e32491d65188f0aefd7/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_late_init.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d1ef8180f956c9f1a7267e32491d65188f0aefd7/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_late_init.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_late_init.fixed?ref=d1ef8180f956c9f1a7267e32491d65188f0aefd7", "patch": "@@ -1,4 +1,5 @@\n // run-rustfix\n+#![feature(let_chains)]\n #![allow(\n     unused,\n     clippy::assign_op_pattern,"}, {"sha": "402d9f9ef7f81945f4dd9087c314ca0dfe0f8b32", "filename": "src/tools/clippy/tests/ui/needless_late_init.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1ef8180f956c9f1a7267e32491d65188f0aefd7/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_late_init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ef8180f956c9f1a7267e32491d65188f0aefd7/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_late_init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_late_init.rs?ref=d1ef8180f956c9f1a7267e32491d65188f0aefd7", "patch": "@@ -1,4 +1,5 @@\n // run-rustfix\n+#![feature(let_chains)]\n #![allow(\n     unused,\n     clippy::assign_op_pattern,"}, {"sha": "313cdbbeba183c3222fec8dd7848e48b27bb511b", "filename": "src/tools/clippy/tests/ui/needless_late_init.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d1ef8180f956c9f1a7267e32491d65188f0aefd7/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_late_init.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1ef8180f956c9f1a7267e32491d65188f0aefd7/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_late_init.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_late_init.stderr?ref=d1ef8180f956c9f1a7267e32491d65188f0aefd7", "patch": "@@ -1,5 +1,5 @@\n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:22:5\n+  --> $DIR/needless_late_init.rs:23:5\n    |\n LL |     let a;\n    |     ^^^^^^ created here\n@@ -13,7 +13,7 @@ LL |     let a = \"zero\";\n    |     ~~~~~\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:25:5\n+  --> $DIR/needless_late_init.rs:26:5\n    |\n LL |     let b;\n    |     ^^^^^^ created here\n@@ -27,7 +27,7 @@ LL |     let b = 1;\n    |     ~~~~~\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:26:5\n+  --> $DIR/needless_late_init.rs:27:5\n    |\n LL |     let c;\n    |     ^^^^^^ created here\n@@ -41,7 +41,7 @@ LL |     let c = 2;\n    |     ~~~~~\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:30:5\n+  --> $DIR/needless_late_init.rs:31:5\n    |\n LL |     let d: usize;\n    |     ^^^^^^^^^^^^^ created here\n@@ -54,7 +54,7 @@ LL |     let d: usize = 1;\n    |     ~~~~~~~~~~~~\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:33:5\n+  --> $DIR/needless_late_init.rs:34:5\n    |\n LL |     let e;\n    |     ^^^^^^ created here\n@@ -67,7 +67,7 @@ LL |     let e = format!(\"{}\", d);\n    |     ~~~~~\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:38:5\n+  --> $DIR/needless_late_init.rs:39:5\n    |\n LL |     let a;\n    |     ^^^^^^\n@@ -88,7 +88,7 @@ LL |     };\n    |      +\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:47:5\n+  --> $DIR/needless_late_init.rs:48:5\n    |\n LL |     let b;\n    |     ^^^^^^\n@@ -109,7 +109,7 @@ LL |     };\n    |      +\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:54:5\n+  --> $DIR/needless_late_init.rs:55:5\n    |\n LL |     let d;\n    |     ^^^^^^\n@@ -130,7 +130,7 @@ LL |     };\n    |      +\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:62:5\n+  --> $DIR/needless_late_init.rs:63:5\n    |\n LL |     let e;\n    |     ^^^^^^\n@@ -151,7 +151,7 @@ LL |     };\n    |      +\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:69:5\n+  --> $DIR/needless_late_init.rs:70:5\n    |\n LL |     let f;\n    |     ^^^^^^\n@@ -167,7 +167,7 @@ LL +         1 => \"three\",\n    |\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:75:5\n+  --> $DIR/needless_late_init.rs:76:5\n    |\n LL |     let g: usize;\n    |     ^^^^^^^^^^^^^\n@@ -187,7 +187,7 @@ LL |     };\n    |      +\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:83:5\n+  --> $DIR/needless_late_init.rs:84:5\n    |\n LL |     let x;\n    |     ^^^^^^ created here\n@@ -201,7 +201,7 @@ LL |     let x = 1;\n    |     ~~~~~\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:87:5\n+  --> $DIR/needless_late_init.rs:88:5\n    |\n LL |     let x;\n    |     ^^^^^^ created here\n@@ -215,7 +215,7 @@ LL |     let x = SignificantDrop;\n    |     ~~~~~\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:91:5\n+  --> $DIR/needless_late_init.rs:92:5\n    |\n LL |     let x;\n    |     ^^^^^^ created here\n@@ -229,7 +229,7 @@ LL |     let x = SignificantDrop;\n    |     ~~~~~\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:110:5\n+  --> $DIR/needless_late_init.rs:111:5\n    |\n LL |     let a;\n    |     ^^^^^^\n@@ -250,7 +250,7 @@ LL |     };\n    |      +\n \n error: unneeded late initialization\n-  --> $DIR/needless_late_init.rs:127:5\n+  --> $DIR/needless_late_init.rs:128:5\n    |\n LL |     let a;\n    |     ^^^^^^"}]}