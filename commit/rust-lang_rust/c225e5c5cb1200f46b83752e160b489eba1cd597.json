{"sha": "c225e5c5cb1200f46b83752e160b489eba1cd597", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyMjVlNWM1Y2IxMjAwZjQ2YjgzNzUyZTE2MGI0ODllYmExY2Q1OTc=", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2020-06-17T18:05:30Z"}, "committer": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2020-06-30T15:35:11Z"}, "message": "Provide more information on duplicate lang item error.", "tree": {"sha": "3b681db12226705652d3d7a3a5df251c86f6529a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b681db12226705652d3d7a3a5df251c86f6529a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c225e5c5cb1200f46b83752e160b489eba1cd597", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c225e5c5cb1200f46b83752e160b489eba1cd597", "html_url": "https://github.com/rust-lang/rust/commit/c225e5c5cb1200f46b83752e160b489eba1cd597", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c225e5c5cb1200f46b83752e160b489eba1cd597/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "665190b34609c5204a3bd57c571c1dff4d8bc5f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/665190b34609c5204a3bd57c571c1dff4d8bc5f2", "html_url": "https://github.com/rust-lang/rust/commit/665190b34609c5204a3bd57c571c1dff4d8bc5f2"}], "stats": {"total": 53, "additions": 49, "deletions": 4}, "files": [{"sha": "3472d8987c65c6f8928e2dca0c860c3193466312", "filename": "src/librustc_metadata/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c225e5c5cb1200f46b83752e160b489eba1cd597/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c225e5c5cb1200f46b83752e160b489eba1cd597/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=c225e5c5cb1200f46b83752e160b489eba1cd597", "patch": "@@ -27,6 +27,7 @@ use rustc_span::symbol::{Ident, Symbol};\n use rustc_data_structures::sync::Lrc;\n use smallvec::SmallVec;\n use std::any::Any;\n+use std::path::PathBuf;\n \n macro_rules! provide {\n     (<$lt:tt> $tcx:ident, $def_id:ident, $other:ident, $cdata:ident,\n@@ -513,4 +514,8 @@ impl CrateStore for CStore {\n     fn allocator_kind(&self) -> Option<AllocatorKind> {\n         self.allocator_kind()\n     }\n+\n+    fn crate_extern_paths(&self, cnum: CrateNum) -> Vec<PathBuf> {\n+        self.get_crate_data(cnum).source().paths().cloned().collect()\n+    }\n }"}, {"sha": "91754f458c89128a7b3d54686c4c587c8f41a9db", "filename": "src/librustc_middle/middle/cstore.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c225e5c5cb1200f46b83752e160b489eba1cd597/src%2Flibrustc_middle%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c225e5c5cb1200f46b83752e160b489eba1cd597/src%2Flibrustc_middle%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmiddle%2Fcstore.rs?ref=c225e5c5cb1200f46b83752e160b489eba1cd597", "patch": "@@ -203,6 +203,7 @@ pub trait CrateStore {\n     fn encode_metadata(&self, tcx: TyCtxt<'_>) -> EncodedMetadata;\n     fn metadata_encoding_version(&self) -> &[u8];\n     fn allocator_kind(&self) -> Option<AllocatorKind>;\n+    fn crate_extern_paths(&self, cnum: CrateNum) -> Vec<PathBuf>;\n }\n \n pub type CrateStoreDyn = dyn CrateStore + sync::Sync;"}, {"sha": "e6c0cd24bff4def1e4b579aae2f58de5e8250150", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c225e5c5cb1200f46b83752e160b489eba1cd597/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c225e5c5cb1200f46b83752e160b489eba1cd597/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=c225e5c5cb1200f46b83752e160b489eba1cd597", "patch": "@@ -62,6 +62,7 @@ use std::hash::{Hash, Hasher};\n use std::iter;\n use std::mem;\n use std::ops::{Bound, Deref};\n+use std::path::PathBuf;\n use std::sync::Arc;\n \n type InternedSet<'tcx, T> = ShardedHashMap<Interned<'tcx, T>, ()>;\n@@ -1252,6 +1253,14 @@ impl<'tcx> TyCtxt<'tcx> {\n         if cnum == LOCAL_CRATE { false } else { self.cstore.crate_is_private_dep_untracked(cnum) }\n     }\n \n+    pub fn crate_extern_paths(&self, cnum: CrateNum) -> Vec<PathBuf> {\n+        if cnum == LOCAL_CRATE {\n+            self.sess.local_crate_source_file.iter().cloned().collect()\n+        } else {\n+            self.cstore.crate_extern_paths(cnum)\n+        }\n+    }\n+\n     #[inline]\n     pub fn def_path_hash(self, def_id: DefId) -> rustc_hir::definitions::DefPathHash {\n         if let Some(def_id) = def_id.as_local() {"}, {"sha": "d2635b8954502d29fc1143efefc701d4ec40ff7d", "filename": "src/librustc_passes/lang_items.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c225e5c5cb1200f46b83752e160b489eba1cd597/src%2Flibrustc_passes%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c225e5c5cb1200f46b83752e160b489eba1cd597/src%2Flibrustc_passes%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flang_items.rs?ref=c225e5c5cb1200f46b83752e160b489eba1cd597", "patch": "@@ -146,6 +146,27 @@ impl LanguageItemCollector<'tcx> {\n                             ));\n                         }\n                     }\n+                    let mut note_def = |which, def_id: DefId| {\n+                        let location = if def_id.is_local() {\n+                            \"the local crate\".to_string()\n+                        } else {\n+                            let paths: Vec<_> = self\n+                                .tcx\n+                                .crate_extern_paths(def_id.krate)\n+                                .iter()\n+                                .map(|p| p.display().to_string())\n+                                .collect();\n+                            paths.join(\", \")\n+                        };\n+                        err.note(&format!(\n+                            \"{} definition in `{}` loaded from {}\",\n+                            which,\n+                            self.tcx.crate_name(def_id.krate),\n+                            location\n+                        ));\n+                    };\n+                    note_def(\"first\", original_def_id);\n+                    note_def(\"second\", item_def_id);\n                 }\n                 err.emit();\n             }"}, {"sha": "776ecedea7e7eef68cceec287d9d0365aa0c767e", "filename": "src/test/ui/duplicate_entry_error.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c225e5c5cb1200f46b83752e160b489eba1cd597/src%2Ftest%2Fui%2Fduplicate_entry_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c225e5c5cb1200f46b83752e160b489eba1cd597/src%2Ftest%2Fui%2Fduplicate_entry_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fduplicate_entry_error.rs?ref=c225e5c5cb1200f46b83752e160b489eba1cd597", "patch": "@@ -1,3 +1,4 @@\n+// normalize-stderr-test \"loaded from .*libstd-.*.rlib\" -> \"loaded from SYSROOT/libstd-*.rlib\"\n // note-pattern: first defined in crate `std`.\n \n // Test for issue #31788 and E0152"}, {"sha": "93e4f9fa5e94b8803a04ac9255be1140f7fb695b", "filename": "src/test/ui/duplicate_entry_error.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c225e5c5cb1200f46b83752e160b489eba1cd597/src%2Ftest%2Fui%2Fduplicate_entry_error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c225e5c5cb1200f46b83752e160b489eba1cd597/src%2Ftest%2Fui%2Fduplicate_entry_error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fduplicate_entry_error.stderr?ref=c225e5c5cb1200f46b83752e160b489eba1cd597", "patch": "@@ -1,5 +1,5 @@\n error[E0152]: found duplicate lang item `panic_impl`\n-  --> $DIR/duplicate_entry_error.rs:10:1\n+  --> $DIR/duplicate_entry_error.rs:11:1\n    |\n LL | / fn panic_impl(info: &PanicInfo) -> ! {\n LL | |\n@@ -8,6 +8,8 @@ LL | | }\n    | |_^\n    |\n    = note: the lang item is first defined in crate `std` (which `duplicate_entry_error` depends on)\n+   = note: first definition in `std` loaded from SYSROOT/libstd-*.rlib\n+   = note: second definition in `duplicate_entry_error` loaded from the local crate\n \n error: aborting due to previous error\n "}, {"sha": "d716ca1a14fdf3cbfafb57a116ab03198fa576b9", "filename": "src/test/ui/error-codes/E0152.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c225e5c5cb1200f46b83752e160b489eba1cd597/src%2Ftest%2Fui%2Ferror-codes%2FE0152.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c225e5c5cb1200f46b83752e160b489eba1cd597/src%2Ftest%2Fui%2Ferror-codes%2FE0152.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0152.rs?ref=c225e5c5cb1200f46b83752e160b489eba1cd597", "patch": "@@ -1,3 +1,4 @@\n+// normalize-stderr-test \"loaded from .*liballoc-.*.rlib\" -> \"loaded from SYSROOT/liballoc-*.rlib\"\n #![feature(lang_items)]\n \n #[lang = \"owned_box\"]"}, {"sha": "5520b5454f9ed74db96cea7d4c4ef0948b47ccd7", "filename": "src/test/ui/error-codes/E0152.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c225e5c5cb1200f46b83752e160b489eba1cd597/src%2Ftest%2Fui%2Ferror-codes%2FE0152.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c225e5c5cb1200f46b83752e160b489eba1cd597/src%2Ftest%2Fui%2Ferror-codes%2FE0152.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0152.stderr?ref=c225e5c5cb1200f46b83752e160b489eba1cd597", "patch": "@@ -1,10 +1,12 @@\n error[E0152]: found duplicate lang item `owned_box`\n-  --> $DIR/E0152.rs:4:1\n+  --> $DIR/E0152.rs:5:1\n    |\n LL | struct Foo;\n    | ^^^^^^^^^^^\n    |\n    = note: the lang item is first defined in crate `alloc` (which `std` depends on)\n+   = note: first definition in `alloc` loaded from SYSROOT/liballoc-*.rlib\n+   = note: second definition in `E0152` loaded from the local crate\n \n error: aborting due to previous error\n "}, {"sha": "6183c886cfac7194272c611349d46e9a15242061", "filename": "src/test/ui/panic-handler/panic-handler-std.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c225e5c5cb1200f46b83752e160b489eba1cd597/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c225e5c5cb1200f46b83752e160b489eba1cd597/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-std.rs?ref=c225e5c5cb1200f46b83752e160b489eba1cd597", "patch": "@@ -1,3 +1,4 @@\n+// normalize-stderr-test \"loaded from .*libstd-.*.rlib\" -> \"loaded from SYSROOT/libstd-*.rlib\"\n // error-pattern: found duplicate lang item `panic_impl`\n \n "}, {"sha": "1cba0ac3b9aafcae18ec55e06ee6cbd6457601cc", "filename": "src/test/ui/panic-handler/panic-handler-std.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c225e5c5cb1200f46b83752e160b489eba1cd597/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c225e5c5cb1200f46b83752e160b489eba1cd597/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-handler%2Fpanic-handler-std.stderr?ref=c225e5c5cb1200f46b83752e160b489eba1cd597", "patch": "@@ -1,15 +1,17 @@\n error[E0152]: found duplicate lang item `panic_impl`\n-  --> $DIR/panic-handler-std.rs:7:1\n+  --> $DIR/panic-handler-std.rs:8:1\n    |\n LL | / fn panic(info: PanicInfo) -> ! {\n LL | |     loop {}\n LL | | }\n    | |_^\n    |\n    = note: the lang item is first defined in crate `std` (which `panic_handler_std` depends on)\n+   = note: first definition in `std` loaded from SYSROOT/libstd-*.rlib\n+   = note: second definition in `panic_handler_std` loaded from the local crate\n \n error: argument should be `&PanicInfo`\n-  --> $DIR/panic-handler-std.rs:7:16\n+  --> $DIR/panic-handler-std.rs:8:16\n    |\n LL | fn panic(info: PanicInfo) -> ! {\n    |                ^^^^^^^^^"}]}