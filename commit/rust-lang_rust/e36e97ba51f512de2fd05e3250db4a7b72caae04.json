{"sha": "e36e97ba51f512de2fd05e3250db4a7b72caae04", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzNmU5N2JhNTFmNTEyZGUyZmQwNWUzMjUwZGI0YTdiNzJjYWFlMDQ=", "commit": {"author": {"name": "David Voit", "email": "david.voit@gmail.com", "date": "2015-05-23T21:33:37Z"}, "committer": {"name": "Tamir Duberstein", "email": "tamird@gmail.com", "date": "2015-06-08T02:47:01Z"}, "message": "rustc_trans: 'assume' intrinsic is only available on LLVM >= 3.6\n\nBased on the patch from Luca Bruno.\n\nInstead of creating an empty C function in the rt, this version creates an shim\nnoop function using llvm. This function is declared as internal, and the\nunsupported assume intrinsic and the shim gets completly removed by the\noptimizer.", "tree": {"sha": "6975e5f661bed7a634d78da346e3b6e67ac30884", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6975e5f661bed7a634d78da346e3b6e67ac30884"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e36e97ba51f512de2fd05e3250db4a7b72caae04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e36e97ba51f512de2fd05e3250db4a7b72caae04", "html_url": "https://github.com/rust-lang/rust/commit/e36e97ba51f512de2fd05e3250db4a7b72caae04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e36e97ba51f512de2fd05e3250db4a7b72caae04/comments", "author": {"login": "davidvoit", "id": 12702, "node_id": "MDQ6VXNlcjEyNzAy", "avatar_url": "https://avatars.githubusercontent.com/u/12702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidvoit", "html_url": "https://github.com/davidvoit", "followers_url": "https://api.github.com/users/davidvoit/followers", "following_url": "https://api.github.com/users/davidvoit/following{/other_user}", "gists_url": "https://api.github.com/users/davidvoit/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidvoit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidvoit/subscriptions", "organizations_url": "https://api.github.com/users/davidvoit/orgs", "repos_url": "https://api.github.com/users/davidvoit/repos", "events_url": "https://api.github.com/users/davidvoit/events{/privacy}", "received_events_url": "https://api.github.com/users/davidvoit/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tamird", "id": 1535036, "node_id": "MDQ6VXNlcjE1MzUwMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1535036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamird", "html_url": "https://github.com/tamird", "followers_url": "https://api.github.com/users/tamird/followers", "following_url": "https://api.github.com/users/tamird/following{/other_user}", "gists_url": "https://api.github.com/users/tamird/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamird/subscriptions", "organizations_url": "https://api.github.com/users/tamird/orgs", "repos_url": "https://api.github.com/users/tamird/repos", "events_url": "https://api.github.com/users/tamird/events{/privacy}", "received_events_url": "https://api.github.com/users/tamird/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce32f6412e1937c0844aa48e5b4e876b96dcd66d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce32f6412e1937c0844aa48e5b4e876b96dcd66d", "html_url": "https://github.com/rust-lang/rust/commit/ce32f6412e1937c0844aa48e5b4e876b96dcd66d"}], "stats": {"total": 26, "additions": 25, "deletions": 1}, "files": [{"sha": "42e2efa9062522b63feca63c917e3d35c797ee68", "filename": "src/librustc_trans/trans/context.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e36e97ba51f512de2fd05e3250db4a7b72caae04/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e36e97ba51f512de2fd05e3250db4a7b72caae04/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs?ref=e36e97ba51f512de2fd05e3250db4a7b72caae04", "patch": "@@ -933,11 +933,33 @@ fn declare_intrinsic(ccx: &CrateContext, key: & &'static str) -> Option<ValueRef\n     ifn!(\"llvm.lifetime.end\", fn(t_i64, i8p) -> void);\n \n     ifn!(\"llvm.expect.i1\", fn(i1, i1) -> i1);\n-    ifn!(\"llvm.assume\", fn(i1) -> void);\n \n     // Some intrinsics were introduced in later versions of LLVM, but they have\n     // fallbacks in libc or libm and such.\n     macro_rules! compatible_ifn {\n+        ($name:expr, noop($cname:ident ($($arg:expr),*) -> void), $llvm_version:expr) => (\n+            if unsafe { llvm::LLVMVersionMinor() >= $llvm_version } {\n+                // The `if key == $name` is already in ifn!\n+                ifn!($name, fn($($arg),*) -> void);\n+            } else if *key == $name {\n+                let f = declare::declare_cfn(ccx, stringify!($cname),\n+                                             Type::func(&[$($arg),*], &void),\n+                                             ty::mk_nil(ccx.tcx()));\n+                llvm::SetLinkage(f, llvm::InternalLinkage);\n+\n+                let bld = ccx.builder();\n+                let llbb = unsafe {\n+                    llvm::LLVMAppendBasicBlockInContext(ccx.llcx(), f,\n+                                                        \"entry-block\\0\".as_ptr() as *const _)\n+                };\n+\n+                bld.position_at_end(llbb);\n+                bld.ret_void();\n+\n+                ccx.intrinsics().borrow_mut().insert($name, f.clone());\n+                return Some(f);\n+            }\n+        );\n         ($name:expr, $cname:ident ($($arg:expr),*) -> $ret:expr, $llvm_version:expr) => (\n             if unsafe { llvm::LLVMVersionMinor() >= $llvm_version } {\n                 // The `if key == $name` is already in ifn!\n@@ -952,6 +974,8 @@ fn declare_intrinsic(ccx: &CrateContext, key: & &'static str) -> Option<ValueRef\n         )\n     }\n \n+    compatible_ifn!(\"llvm.assume\", noop(llvmcompat_assume(i1) -> void), 6);\n+\n     if ccx.sess().opts.debuginfo != NoDebugInfo {\n         ifn!(\"llvm.dbg.declare\", fn(Type::metadata(ccx), Type::metadata(ccx)) -> void);\n         ifn!(\"llvm.dbg.value\", fn(Type::metadata(ccx), t_i64, Type::metadata(ccx)) -> void);"}]}