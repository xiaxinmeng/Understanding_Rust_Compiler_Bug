{"sha": "654854fdb56ca204bab6b399bf59a8d753e2c13c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1NDg1NGZkYjU2Y2EyMDRiYWI2YjM5OWJmNTlhOGQ3NTNlMmMxM2M=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-06T20:39:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-06T20:39:09Z"}, "message": "Rollup merge of #61376 - czipperz:bound-cloned, r=sfackler\n\nAdd Bound::cloned()\n\nSuggested by #61356", "tree": {"sha": "5dd54e15d68f2e2d1d0c6ea6c84f92774f18b88d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5dd54e15d68f2e2d1d0c6ea6c84f92774f18b88d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/654854fdb56ca204bab6b399bf59a8d753e2c13c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc+XntCRBK7hj4Ov3rIwAAdHIIABXMp4colQ8fysFpPoWXrdEt\nhM3BgNshqWvlgXZslcV/Z8RwDluViGSZKrQWMyHUiqyAMImlsQWEOa6ELXWU3yxV\nR/pzhtrv1opnfaJWoCnxX4eFffEPbET6PAKN/FRaihowXudzpJ1mkms4t/eF/vqh\nJOMiqOTL1D7TjXKJs6eczD8thhqbgS657zvZFwwwAuOYif359nO21JxwVw/NNIzb\nw1m9q/gQxHo5iXXChU5YgZWfk/FBOeNtBxb+Yt5s1NVHcnCjagGumvxHQra98vWW\nMpFp3AdnQDv1HxiCIezLDTRBYXiY9Bwjr328sjTBz1T/2a2o27NrdNE2RgTdnsU=\n=ZI1r\n-----END PGP SIGNATURE-----\n", "payload": "tree 5dd54e15d68f2e2d1d0c6ea6c84f92774f18b88d\nparent 8b36867093fb774bcbd9f787cbc470a5f44c1310\nparent c1bc8f11cb36cade87422b91a0bdec1fe8b5af41\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1559853549 +0200\ncommitter GitHub <noreply@github.com> 1559853549 +0200\n\nRollup merge of #61376 - czipperz:bound-cloned, r=sfackler\n\nAdd Bound::cloned()\n\nSuggested by #61356\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/654854fdb56ca204bab6b399bf59a8d753e2c13c", "html_url": "https://github.com/rust-lang/rust/commit/654854fdb56ca204bab6b399bf59a8d753e2c13c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/654854fdb56ca204bab6b399bf59a8d753e2c13c/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b36867093fb774bcbd9f787cbc470a5f44c1310", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b36867093fb774bcbd9f787cbc470a5f44c1310", "html_url": "https://github.com/rust-lang/rust/commit/8b36867093fb774bcbd9f787cbc470a5f44c1310"}, {"sha": "c1bc8f11cb36cade87422b91a0bdec1fe8b5af41", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1bc8f11cb36cade87422b91a0bdec1fe8b5af41", "html_url": "https://github.com/rust-lang/rust/commit/c1bc8f11cb36cade87422b91a0bdec1fe8b5af41"}], "stats": {"total": 42, "additions": 41, "deletions": 1}, "files": [{"sha": "af24cbe1c5c480ab3499474ea81d3138746efb53", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/654854fdb56ca204bab6b399bf59a8d753e2c13c/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/654854fdb56ca204bab6b399bf59a8d753e2c13c/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=654854fdb56ca204bab6b399bf59a8d753e2c13c", "patch": "@@ -70,6 +70,7 @@\n #![feature(arbitrary_self_types)]\n #![feature(asm)]\n #![feature(associated_type_defaults)]\n+#![feature(bound_cloned)]\n #![feature(cfg_target_has_atomic)]\n #![feature(concat_idents)]\n #![feature(const_fn)]"}, {"sha": "1b4c4218cc15bb95e25ab47e803e6096414fdc1b", "filename": "src/libcore/ops/range.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/654854fdb56ca204bab6b399bf59a8d753e2c13c/src%2Flibcore%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/654854fdb56ca204bab6b399bf59a8d753e2c13c/src%2Flibcore%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Frange.rs?ref=654854fdb56ca204bab6b399bf59a8d753e2c13c", "patch": "@@ -696,6 +696,29 @@ pub enum Bound<T> {\n     Unbounded,\n }\n \n+impl<T: Clone> Bound<&T> {\n+    /// Map a `Bound<&T>` to a `Bound<T>` by cloning the contents of the bound.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(bound_cloned)]\n+    /// use std::ops::Bound::*;\n+    /// use std::ops::RangeBounds;\n+    ///\n+    /// assert_eq!((1..12).start_bound(), Included(&1));\n+    /// assert_eq!((1..12).start_bound().cloned(), Included(1));\n+    /// ```\n+    #[unstable(feature = \"bound_cloned\", issue = \"61356\")]\n+    pub fn cloned(self) -> Bound<T> {\n+        match self {\n+            Bound::Unbounded => Bound::Unbounded,\n+            Bound::Included(x) => Bound::Included(x.clone()),\n+            Bound::Excluded(x) => Bound::Excluded(x.clone()),\n+        }\n+    }\n+}\n+\n #[stable(feature = \"collections_range\", since = \"1.28.0\")]\n /// `RangeBounds` is implemented by Rust's built-in range types, produced\n /// by range syntax like `..`, `a..`, `..b`, `..=c`, `d..e`, or `f..=g`."}, {"sha": "928bdd7a7600256cff29cea50e4c7a75a09f464a", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/654854fdb56ca204bab6b399bf59a8d753e2c13c/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/654854fdb56ca204bab6b399bf59a8d753e2c13c/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=654854fdb56ca204bab6b399bf59a8d753e2c13c", "patch": "@@ -1,3 +1,4 @@\n+#![feature(bound_cloned)]\n #![feature(box_syntax)]\n #![feature(cell_update)]\n #![feature(core_private_bignum)]"}, {"sha": "48755ae4c16411914f3cbd7820f618a8718b1ce0", "filename": "src/libcore/tests/ops.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/654854fdb56ca204bab6b399bf59a8d753e2c13c/src%2Flibcore%2Ftests%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/654854fdb56ca204bab6b399bf59a8d753e2c13c/src%2Flibcore%2Ftests%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fops.rs?ref=654854fdb56ca204bab6b399bf59a8d753e2c13c", "patch": "@@ -1,4 +1,4 @@\n-use core::ops::{Range, RangeFull, RangeFrom, RangeTo, RangeInclusive};\n+use core::ops::{Bound, Range, RangeFull, RangeFrom, RangeTo, RangeInclusive};\n \n // Test the Range structs without the syntactic sugar.\n \n@@ -82,3 +82,18 @@ fn test_range_is_empty() {\n     assert!( (NAN ..= EPSILON).is_empty());\n     assert!( (NAN ..= NAN).is_empty());\n }\n+\n+#[test]\n+fn test_bound_cloned_unbounded() {\n+    assert_eq!(Bound::<&u32>::Unbounded.cloned(), Bound::Unbounded);\n+}\n+\n+#[test]\n+fn test_bound_cloned_included() {\n+    assert_eq!(Bound::Included(&3).cloned(), Bound::Included(3));\n+}\n+\n+#[test]\n+fn test_bound_cloned_excluded() {\n+    assert_eq!(Bound::Excluded(&3).cloned(), Bound::Excluded(3));\n+}"}]}