{"sha": "529f7149d2c3fbf5e8b24325331bf3ae6f393616", "node_id": "C_kwDOAAsO6NoAKDUyOWY3MTQ5ZDJjM2ZiZjVlOGIyNDMyNTMzMWJmM2FlNmYzOTM2MTY", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2022-11-10T15:47:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-10T15:47:38Z"}, "message": "Rollup merge of #104036 - compiler-errors:option-sugg, r=petrochenkov\n\nSuggest `is_some` when we've found `Option` but expected `bool`\n\nThanks `@lunasorcery` for the suggestion.", "tree": {"sha": "91cda1a28289545457d232655a091a40dc359be5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91cda1a28289545457d232655a091a40dc359be5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/529f7149d2c3fbf5e8b24325331bf3ae6f393616", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjbR0aCRBK7hj4Ov3rIwAA5KsIAD9VsctMVHw2GvAr1S+A0e/x\nbd8x3N3huroCElppHQcyI3wG56GrPMovUWxoWxiOqTzbq8u8r3sdmKRvnhDVZzjL\na5TgO04PDJCWLuov2XBCw0TddMjLauowK/dVPzItOWk0S/ImffUEEExOPGHn6lDi\naKpk+ydjqzRhf6GeZKghTax6qJS50o6N9gEsSxVeb03HSmFFJPnS51MjefvbuVGy\nKRAAPRlDAYZHlvKjbVhBXdQ3bUP8YwXuQrfhPea5LjDH2Mrf1RDxvBQ9FiIz7eQn\nBY9GVSpl0EKGRs5GwfhBD/H6kkRchOkkYK/cWEur7oMyif3iZZAXkk7QACP7cVs=\n=ByfB\n-----END PGP SIGNATURE-----\n", "payload": "tree 91cda1a28289545457d232655a091a40dc359be5\nparent 9c0e783f6df363b7bc54b1988780e42b6f84dceb\nparent 38ada60eb68b20d72f0ab0618e3192f9d41770f0\nauthor Manish Goregaokar <manishsmail@gmail.com> 1668095258 -0500\ncommitter GitHub <noreply@github.com> 1668095258 -0500\n\nRollup merge of #104036 - compiler-errors:option-sugg, r=petrochenkov\n\nSuggest `is_some` when we've found `Option` but expected `bool`\n\nThanks `@lunasorcery` for the suggestion.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/529f7149d2c3fbf5e8b24325331bf3ae6f393616", "html_url": "https://github.com/rust-lang/rust/commit/529f7149d2c3fbf5e8b24325331bf3ae6f393616", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/529f7149d2c3fbf5e8b24325331bf3ae6f393616/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c0e783f6df363b7bc54b1988780e42b6f84dceb", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c0e783f6df363b7bc54b1988780e42b6f84dceb", "html_url": "https://github.com/rust-lang/rust/commit/9c0e783f6df363b7bc54b1988780e42b6f84dceb"}, {"sha": "38ada60eb68b20d72f0ab0618e3192f9d41770f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/38ada60eb68b20d72f0ab0618e3192f9d41770f0", "html_url": "https://github.com/rust-lang/rust/commit/38ada60eb68b20d72f0ab0618e3192f9d41770f0"}], "stats": {"total": 89, "additions": 85, "deletions": 4}, "files": [{"sha": "7f78f5fb8a7b2091f39a70ae5927cb2dfa1d6259", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/529f7149d2c3fbf5e8b24325331bf3ae6f393616/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/529f7149d2c3fbf5e8b24325331bf3ae6f393616/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=529f7149d2c3fbf5e8b24325331bf3ae6f393616", "patch": "@@ -42,7 +42,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             || self.suggest_boxing_when_appropriate(err, expr, expected, expr_ty)\n             || self.suggest_block_to_brackets_peeling_refs(err, expr, expr_ty, expected)\n             || self.suggest_copied_or_cloned(err, expr, expr_ty, expected)\n-            || self.suggest_into(err, expr, expr_ty, expected);\n+            || self.suggest_into(err, expr, expr_ty, expected)\n+            || self.suggest_option_to_bool(err, expr, expr_ty, expected);\n \n         self.note_type_is_not_clone(err, expected, expr_ty, expr);\n         self.note_need_for_fn_pointer(err, expected, expr_ty);"}, {"sha": "e948d832e3280997fd134daf86d38b42712ce606", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/529f7149d2c3fbf5e8b24325331bf3ae6f393616/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/529f7149d2c3fbf5e8b24325331bf3ae6f393616/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=529f7149d2c3fbf5e8b24325331bf3ae6f393616", "patch": "@@ -103,8 +103,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n \n         if let Some(mut err) = self.demand_suptype_diag(expr.span, expected_ty, ty) {\n-            let expr = expr.peel_drop_temps();\n-            self.suggest_deref_ref_or_into(&mut err, expr, expected_ty, ty, None);\n+            // FIXME(compiler-errors): We probably should fold some of the\n+            // `suggest_` functions from  `emit_coerce_suggestions` into here,\n+            // since some of those aren't necessarily just coerce suggestions.\n+            let _ = self.suggest_deref_ref_or_into(\n+                &mut err,\n+                expr.peel_drop_temps(),\n+                expected_ty,\n+                ty,\n+                None,\n+            ) || self.suggest_option_to_bool(&mut err, expr, ty, expected_ty);\n             extend_err(&mut err);\n             err.emit();\n         }"}, {"sha": "a14759e254c49216940a4604acd162f48ce3f393", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 48, "deletions": 1, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/529f7149d2c3fbf5e8b24325331bf3ae6f393616/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/529f7149d2c3fbf5e8b24325331bf3ae6f393616/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=529f7149d2c3fbf5e8b24325331bf3ae6f393616", "patch": "@@ -13,7 +13,7 @@ use rustc_hir_analysis::astconv::AstConv;\n use rustc_infer::infer::{self, TyCtxtInferExt};\n use rustc_infer::traits::{self, StatementAsExpression};\n use rustc_middle::lint::in_external_macro;\n-use rustc_middle::ty::{self, Binder, IsSuggestable, ToPredicate, Ty};\n+use rustc_middle::ty::{self, Binder, DefIdTree, IsSuggestable, ToPredicate, Ty};\n use rustc_session::errors::ExprParenthesesNeeded;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n@@ -1116,6 +1116,53 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         false\n     }\n \n+    /// When expecting a `bool` and finding an `Option`, suggests using `let Some(..)` or `.is_some()`\n+    pub(crate) fn suggest_option_to_bool(\n+        &self,\n+        diag: &mut Diagnostic,\n+        expr: &hir::Expr<'_>,\n+        expr_ty: Ty<'tcx>,\n+        expected_ty: Ty<'tcx>,\n+    ) -> bool {\n+        if !expected_ty.is_bool() {\n+            return false;\n+        }\n+\n+        let ty::Adt(def, _) = expr_ty.peel_refs().kind() else { return false; };\n+        if !self.tcx.is_diagnostic_item(sym::Option, def.did()) {\n+            return false;\n+        }\n+\n+        let hir = self.tcx.hir();\n+        let cond_parent = hir.parent_iter(expr.hir_id).skip_while(|(_, node)| {\n+            matches!(node, hir::Node::Expr(hir::Expr { kind: hir::ExprKind::Binary(op, _, _), .. }) if op.node == hir::BinOpKind::And)\n+        }).next();\n+        // Don't suggest:\n+        //     `let Some(_) = a.is_some() && b`\n+        //                     ++++++++++\n+        // since the user probably just misunderstood how `let else`\n+        // and `&&` work together.\n+        if let Some((_, hir::Node::Local(local))) = cond_parent\n+            && let hir::PatKind::Path(qpath) | hir::PatKind::TupleStruct(qpath, _, _) = &local.pat.kind\n+            && let hir::QPath::Resolved(None, path) = qpath\n+            && let Some(did) = path.res.opt_def_id()\n+                .and_then(|did| self.tcx.opt_parent(did))\n+                .and_then(|did| self.tcx.opt_parent(did))\n+            && self.tcx.is_diagnostic_item(sym::Option, did)\n+        {\n+            return false;\n+        }\n+\n+        diag.span_suggestion(\n+            expr.span.shrink_to_hi(),\n+            \"use `Option::is_some` to test if the `Option` has a value\",\n+            \".is_some()\",\n+            Applicability::MachineApplicable,\n+        );\n+\n+        true\n+    }\n+\n     /// Suggest wrapping the block in square brackets instead of curly braces\n     /// in case the block was mistaken array syntax, e.g. `{ 1 }` -> `[ 1 ]`.\n     pub(crate) fn suggest_block_to_brackets("}, {"sha": "2a1823b15f589d61e913ac8394eff1487691bf24", "filename": "src/test/ui/suggestions/option-to-bool.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/529f7149d2c3fbf5e8b24325331bf3ae6f393616/src%2Ftest%2Fui%2Fsuggestions%2Foption-to-bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/529f7149d2c3fbf5e8b24325331bf3ae6f393616/src%2Ftest%2Fui%2Fsuggestions%2Foption-to-bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Foption-to-bool.rs?ref=529f7149d2c3fbf5e8b24325331bf3ae6f393616", "patch": "@@ -0,0 +1,9 @@\n+#![cfg_attr(let_chains, feature(let_chains))]\n+\n+fn foo(x: Option<i32>) {\n+    if true && x {}\n+    //~^ ERROR mismatched types\n+    //~| HELP use `Option::is_some` to test if the `Option` has a value\n+}\n+\n+fn main() {}"}, {"sha": "57a934b83420cc0da80c5d74b191c946cafb1d0c", "filename": "src/test/ui/suggestions/option-to-bool.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/529f7149d2c3fbf5e8b24325331bf3ae6f393616/src%2Ftest%2Fui%2Fsuggestions%2Foption-to-bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/529f7149d2c3fbf5e8b24325331bf3ae6f393616/src%2Ftest%2Fui%2Fsuggestions%2Foption-to-bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Foption-to-bool.stderr?ref=529f7149d2c3fbf5e8b24325331bf3ae6f393616", "patch": "@@ -0,0 +1,16 @@\n+error[E0308]: mismatched types\n+  --> $DIR/option-to-bool.rs:4:16\n+   |\n+LL |     if true && x {}\n+   |                ^ expected `bool`, found enum `Option`\n+   |\n+   = note: expected type `bool`\n+              found enum `Option<i32>`\n+help: use `Option::is_some` to test if the `Option` has a value\n+   |\n+LL |     if true && x.is_some() {}\n+   |                 ++++++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}