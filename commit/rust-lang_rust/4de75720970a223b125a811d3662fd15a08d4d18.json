{"sha": "4de75720970a223b125a811d3662fd15a08d4d18", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkZTc1NzIwOTcwYTIyM2IxMjVhODExZDM2NjJmZDE1YTA4ZDRkMTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-01T21:07:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-01T21:07:10Z"}, "message": "Auto merge of #84410 - BoxyUwU:blue, r=varkor\n\nFix generic arg mismatch errors being ignored with explicit late bound lifetimes\n\nFixes #83466\n\nr? `@varkor`", "tree": {"sha": "d04b75f8ffc18b1bd4a726a003b12dadb9cc4270", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d04b75f8ffc18b1bd4a726a003b12dadb9cc4270"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4de75720970a223b125a811d3662fd15a08d4d18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4de75720970a223b125a811d3662fd15a08d4d18", "html_url": "https://github.com/rust-lang/rust/commit/4de75720970a223b125a811d3662fd15a08d4d18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4de75720970a223b125a811d3662fd15a08d4d18/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e2a34474bb86911c5235476d2ea820e163629fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e2a34474bb86911c5235476d2ea820e163629fe", "html_url": "https://github.com/rust-lang/rust/commit/6e2a34474bb86911c5235476d2ea820e163629fe"}, {"sha": "39054339c17f283cdb34183cc615a448baa108a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/39054339c17f283cdb34183cc615a448baa108a3", "html_url": "https://github.com/rust-lang/rust/commit/39054339c17f283cdb34183cc615a448baa108a3"}], "stats": {"total": 61, "additions": 51, "deletions": 10}, "files": [{"sha": "077375c7c3b4f956d4193e0f52a6794e3d7b8fb4", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4de75720970a223b125a811d3662fd15a08d4d18/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de75720970a223b125a811d3662fd15a08d4d18/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=4de75720970a223b125a811d3662fd15a08d4d18", "patch": "@@ -278,9 +278,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                 // another. This is an error. However, if we already know that\n                                 // the arguments don't match up with the parameters, we won't issue\n                                 // an additional error, as the user already knows what's wrong.\n-                                if arg_count.correct.is_ok()\n-                                    && arg_count.explicit_late_bound == ExplicitLateBound::No\n-                                {\n+                                if arg_count.correct.is_ok() {\n                                     // We're going to iterate over the parameters to sort them out, and\n                                     // show that order to the user as a possible order for the parameters\n                                     let mut param_types_present = defs\n@@ -462,7 +460,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 }\n \n                 if silent {\n-                    return false;\n+                    return true;\n                 }\n \n                 if provided > expected_max {"}, {"sha": "1959fe75e8e9ac1a8435ee4e98b70d6dbd63669e", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4de75720970a223b125a811d3662fd15a08d4d18/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de75720970a223b125a811d3662fd15a08d4d18/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=4de75720970a223b125a811d3662fd15a08d4d18", "patch": "@@ -1282,6 +1282,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let mut infer_args_for_err = FxHashSet::default();\n \n+        let mut explicit_late_bound = ExplicitLateBound::No;\n         for &PathSeg(def_id, index) in &path_segs {\n             let seg = &segments[index];\n             let generics = tcx.generics_of(def_id);\n@@ -1290,17 +1291,20 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // parameter internally, but we don't allow users to specify the\n             // parameter's value explicitly, so we have to do some error-\n             // checking here.\n-            if let GenericArgCountResult {\n-                correct: Err(GenericArgCountMismatch { reported: Some(_), .. }),\n-                ..\n-            } = <dyn AstConv<'_>>::check_generic_arg_count_for_call(\n+            let arg_count = <dyn AstConv<'_>>::check_generic_arg_count_for_call(\n                 tcx,\n                 span,\n                 def_id,\n                 &generics,\n                 seg,\n                 IsMethodCall::No,\n-            ) {\n+            );\n+\n+            if let ExplicitLateBound::Yes = arg_count.explicit_late_bound {\n+                explicit_late_bound = ExplicitLateBound::Yes;\n+            }\n+\n+            if let Err(GenericArgCountMismatch { reported: Some(_), .. }) = arg_count.correct {\n                 infer_args_for_err.insert(index);\n                 self.set_tainted_by_errors(); // See issue #53251.\n             }\n@@ -1357,7 +1361,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let ty = tcx.type_of(def_id);\n \n         let arg_count = GenericArgCountResult {\n-            explicit_late_bound: ExplicitLateBound::No,\n+            explicit_late_bound,\n             correct: if infer_args_for_err.is_empty() {\n                 Ok(())\n             } else {"}, {"sha": "c488a663fbb002167bc811f735dc594ed21c798f", "filename": "src/test/ui/const-generics/issues/issue-83466.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4de75720970a223b125a811d3662fd15a08d4d18/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83466.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de75720970a223b125a811d3662fd15a08d4d18/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83466.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83466.rs?ref=4de75720970a223b125a811d3662fd15a08d4d18", "patch": "@@ -0,0 +1,17 @@\n+// regression test for #83466- tests that generic arg mismatch errors between\n+// consts and types are not supressed when there are explicit late bound lifetimes\n+\n+struct S;\n+impl S {\n+    fn func<'a, U>(self) -> U {\n+        todo!()\n+    }\n+}\n+fn dont_crash<'a, U>() {\n+    S.func::<'a, 10_u32>()\n+    //~^ WARNING cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+    //~^^ WARNING this was previously accepted by\n+    //~^^^ ERROR constant provided when a type was expected [E0747]\n+}\n+\n+fn main() {}"}, {"sha": "a60f71ea61420aa2529a0a9975c443a8790177fb", "filename": "src/test/ui/const-generics/issues/issue-83466.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4de75720970a223b125a811d3662fd15a08d4d18/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83466.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4de75720970a223b125a811d3662fd15a08d4d18/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83466.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83466.stderr?ref=4de75720970a223b125a811d3662fd15a08d4d18", "patch": "@@ -0,0 +1,22 @@\n+warning: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+  --> $DIR/issue-83466.rs:11:14\n+   |\n+LL |     fn func<'a, U>(self) -> U {\n+   |             -- the late bound lifetime parameter is introduced here\n+...\n+LL |     S.func::<'a, 10_u32>()\n+   |              ^^\n+   |\n+   = note: `#[warn(late_bound_lifetime_arguments)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #42868 <https://github.com/rust-lang/rust/issues/42868>\n+\n+error[E0747]: constant provided when a type was expected\n+  --> $DIR/issue-83466.rs:11:18\n+   |\n+LL |     S.func::<'a, 10_u32>()\n+   |                  ^^^^^^\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0747`."}]}