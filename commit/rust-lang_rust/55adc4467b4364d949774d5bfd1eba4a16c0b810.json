{"sha": "55adc4467b4364d949774d5bfd1eba4a16c0b810", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1YWRjNDQ2N2I0MzY0ZDk0OTc3NGQ1YmZkMWViYTRhMTZjMGI4MTA=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-07-02T17:13:07Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-07-20T09:08:55Z"}, "message": "Add AtomicOption::fill() and AtomicOption::is_empty()", "tree": {"sha": "7a029b032369c84298df542fda48108aab7dd972", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a029b032369c84298df542fda48108aab7dd972"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55adc4467b4364d949774d5bfd1eba4a16c0b810", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55adc4467b4364d949774d5bfd1eba4a16c0b810", "html_url": "https://github.com/rust-lang/rust/commit/55adc4467b4364d949774d5bfd1eba4a16c0b810", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55adc4467b4364d949774d5bfd1eba4a16c0b810/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28c9ba91d85e651ecf3568159bc3dfb45882baf8", "url": "https://api.github.com/repos/rust-lang/rust/commits/28c9ba91d85e651ecf3568159bc3dfb45882baf8", "html_url": "https://github.com/rust-lang/rust/commit/28c9ba91d85e651ecf3568159bc3dfb45882baf8"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "dbb9c83ea39546b01d293e819c8af2102150c9df", "filename": "src/libstd/unstable/atomics.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/55adc4467b4364d949774d5bfd1eba4a16c0b810/src%2Flibstd%2Funstable%2Fatomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55adc4467b4364d949774d5bfd1eba4a16c0b810/src%2Flibstd%2Funstable%2Fatomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fatomics.rs?ref=55adc4467b4364d949774d5bfd1eba4a16c0b810", "patch": "@@ -272,6 +272,30 @@ impl<T> AtomicOption<T> {\n             self.swap(cast::transmute(0), order)\n         }\n     }\n+\n+    /// A compare-and-swap. Succeeds if the option is 'None' and returns 'None'\n+    /// if so. If the option was already 'Some', returns 'Some' of the rejected\n+    /// value.\n+    #[inline]\n+    pub fn fill(&mut self, val: ~T, order: Ordering) -> Option<~T> {\n+        unsafe {\n+            let val = cast::transmute(val);\n+            let expected = cast::transmute(0);\n+            let oldval = atomic_compare_and_swap(&mut self.p, expected, val, order);\n+            if oldval == expected {\n+                None\n+            } else {\n+                Some(cast::transmute(val))\n+            }\n+        }\n+    }\n+\n+    /// Be careful: The caller must have some external method of ensuring the\n+    /// result does not get invalidated by another task after this returns.\n+    #[inline]\n+    pub fn is_empty(&mut self, order: Ordering) -> bool {\n+        unsafe { atomic_load(&self.p, order) == cast::transmute(0) }\n+    }\n }\n \n #[unsafe_destructor]\n@@ -374,6 +398,11 @@ mod test {\n         assert!(!flg.test_and_set(SeqCst));\n     }\n \n+    #[test]\n+    fn option_empty() {\n+        assert!(AtomicOption::empty::<()>().is_empty(SeqCst));\n+    }\n+\n     #[test]\n     fn option_swap() {\n         let mut p = AtomicOption::new(~1);\n@@ -398,4 +427,13 @@ mod test {\n         assert_eq!(p.take(SeqCst), Some(~2));\n     }\n \n+    #[test]\n+    fn option_fill() {\n+        let mut p = AtomicOption::new(~1);\n+        assert!(p.fill(~2, SeqCst).is_some()); // should fail; shouldn't leak!\n+        assert_eq!(p.take(SeqCst), Some(~1));\n+\n+        assert!(p.fill(~2, SeqCst).is_none()); // shouldn't fail\n+        assert_eq!(p.take(SeqCst), Some(~2));\n+    }\n }"}]}