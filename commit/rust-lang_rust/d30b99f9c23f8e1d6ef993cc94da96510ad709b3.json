{"sha": "d30b99f9c23f8e1d6ef993cc94da96510ad709b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzMGI5OWY5YzIzZjhlMWQ2ZWY5OTNjYzk0ZGE5NjUxMGFkNzA5YjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-31T11:07:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-31T11:07:41Z"}, "message": "Auto merge of #57514 - michaelwoerister:xlto-tests, r=alexcrichton\n\ncompiletest: Support opt-in Clang-based run-make tests and use them for testing xLTO.\n\nSome cross-language run-make tests need a Clang compiler that matches the LLVM version of `rustc`. Since such a compiler usually isn't available these tests (marked with the `needs-matching-clang`\ndirective) are ignored by default.\n\nFor some CI jobs we do need these tests to run unconditionally though. In order to support this a `--force-clang-based-tests` flag is added to compiletest. If this flag is specified, `compiletest` will fail if it can't detect an appropriate version of Clang.\n\n@rust-lang/infra The PR doesn't yet enable the tests yet. Do you have any recommendation for which jobs to enable them?\n\ncc #57438\n\nr? @alexcrichton", "tree": {"sha": "06c4c2ae28a7962efff74b5deda5f6df5443d7f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06c4c2ae28a7962efff74b5deda5f6df5443d7f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d30b99f9c23f8e1d6ef993cc94da96510ad709b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d30b99f9c23f8e1d6ef993cc94da96510ad709b3", "html_url": "https://github.com/rust-lang/rust/commit/d30b99f9c23f8e1d6ef993cc94da96510ad709b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d30b99f9c23f8e1d6ef993cc94da96510ad709b3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f40aaa68278ef0879af5fe7ce077c64c6515ea05", "url": "https://api.github.com/repos/rust-lang/rust/commits/f40aaa68278ef0879af5fe7ce077c64c6515ea05", "html_url": "https://github.com/rust-lang/rust/commit/f40aaa68278ef0879af5fe7ce077c64c6515ea05"}, {"sha": "b17c10de46b021cb25855d440b6a0c270d4d1f4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b17c10de46b021cb25855d440b6a0c270d4d1f4e", "html_url": "https://github.com/rust-lang/rust/commit/b17c10de46b021cb25855d440b6a0c270d4d1f4e"}], "stats": {"total": 196, "additions": 175, "deletions": 21}, "files": [{"sha": "f45db37c33b86103d1e35929600ebc5167c7e009", "filename": "config.toml.example", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d30b99f9c23f8e1d6ef993cc94da96510ad709b3/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/d30b99f9c23f8e1d6ef993cc94da96510ad709b3/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=d30b99f9c23f8e1d6ef993cc94da96510ad709b3", "patch": "@@ -101,6 +101,10 @@\n # that your host compiler ships with libc++.\n #use-libcxx = true\n \n+# The value specified here will be passed as `-DLLVM_USE_LINKER` to CMake.\n+#use-linker = \"lld\"\n+\n+\n # =============================================================================\n # General build configuration options\n # ============================================================================="}, {"sha": "7d3e584f1a6fa4f649cc6f3b8e506908a44c7838", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d30b99f9c23f8e1d6ef993cc94da96510ad709b3/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d30b99f9c23f8e1d6ef993cc94da96510ad709b3/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=d30b99f9c23f8e1d6ef993cc94da96510ad709b3", "patch": "@@ -77,6 +77,7 @@ pub struct Config {\n     pub llvm_experimental_targets: String,\n     pub llvm_link_jobs: Option<u32>,\n     pub llvm_version_suffix: Option<String>,\n+    pub llvm_use_linker: Option<String>,\n \n     pub lld_enabled: bool,\n     pub lldb_enabled: bool,\n@@ -261,6 +262,7 @@ struct Llvm {\n     cxxflags: Option<String>,\n     ldflags: Option<String>,\n     use_libcxx: Option<bool>,\n+    use_linker: Option<String>,\n }\n \n #[derive(Deserialize, Default, Clone)]\n@@ -527,6 +529,7 @@ impl Config {\n             config.llvm_cxxflags = llvm.cxxflags.clone();\n             config.llvm_ldflags = llvm.ldflags.clone();\n             set(&mut config.llvm_use_libcxx, llvm.use_libcxx);\n+            config.llvm_use_linker = llvm.use_linker.clone();\n         }\n \n         if let Some(ref rust) = toml.rust {"}, {"sha": "f48f9ee752e93e758ae8cff225480a6919eb5c8a", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d30b99f9c23f8e1d6ef993cc94da96510ad709b3/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d30b99f9c23f8e1d6ef993cc94da96510ad709b3/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=d30b99f9c23f8e1d6ef993cc94da96510ad709b3", "patch": "@@ -234,6 +234,10 @@ impl Step for Llvm {\n             cfg.define(\"LLVM_VERSION_SUFFIX\", suffix);\n         }\n \n+        if let Some(ref linker) = builder.config.llvm_use_linker {\n+            cfg.define(\"LLVM_USE_LINKER\", linker);\n+        }\n+\n         if let Some(ref python) = builder.config.python {\n             cfg.define(\"PYTHON_EXECUTABLE\", python);\n         }"}, {"sha": "1a46ebfcabb959211faf0136df056af0df38c14b", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d30b99f9c23f8e1d6ef993cc94da96510ad709b3/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d30b99f9c23f8e1d6ef993cc94da96510ad709b3/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=d30b99f9c23f8e1d6ef993cc94da96510ad709b3", "patch": "@@ -1088,9 +1088,7 @@ impl Step for Compiletest {\n         };\n         let lldb_exe = if builder.config.lldb_enabled && !target.contains(\"emscripten\") {\n             // Test against the lldb that was just built.\n-            builder.llvm_out(target)\n-                .join(\"bin\")\n-                .join(\"lldb\")\n+            builder.llvm_out(target).join(\"bin\").join(\"lldb\")\n         } else {\n             PathBuf::from(\"lldb\")\n         };\n@@ -1107,6 +1105,26 @@ impl Step for Compiletest {\n             }\n         }\n \n+        if let Some(var) = env::var_os(\"RUSTBUILD_FORCE_CLANG_BASED_TESTS\") {\n+            match &var.to_string_lossy().to_lowercase()[..] {\n+                \"1\" | \"yes\" | \"on\" => {\n+                    assert!(builder.config.lldb_enabled,\n+                        \"RUSTBUILD_FORCE_CLANG_BASED_TESTS needs Clang/LLDB to \\\n+                         be built.\");\n+                    let clang_exe = builder.llvm_out(target).join(\"bin\").join(\"clang\");\n+                    cmd.arg(\"--run-clang-based-tests-with\").arg(clang_exe);\n+                }\n+                \"0\" | \"no\" | \"off\" => {\n+                    // Nothing to do.\n+                }\n+                other => {\n+                    // Let's make sure typos don't get unnoticed\n+                    panic!(\"Unrecognized option '{}' set in \\\n+                            RUSTBUILD_FORCE_CLANG_BASED_TESTS\", other);\n+                }\n+            }\n+        }\n+\n         // Get paths from cmd args\n         let paths = match &builder.config.cmd {\n             Subcommand::Test { ref paths, .. } => &paths[..],"}, {"sha": "cd3afc59e560c1390c918b6d4939af7e27e5cb29", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 27, "deletions": 14, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d30b99f9c23f8e1d6ef993cc94da96510ad709b3/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d30b99f9c23f8e1d6ef993cc94da96510ad709b3/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=d30b99f9c23f8e1d6ef993cc94da96510ad709b3", "patch": "@@ -1,6 +1,5 @@\n use std::fs;\n use std::env;\n-use std::iter;\n use std::path::PathBuf;\n use std::process::{Command, exit};\n use std::collections::HashSet;\n@@ -666,27 +665,41 @@ impl<'a> Builder<'a> {\n \n         // Add the llvm/bin directory to PATH since it contains lots of\n         // useful, platform-independent tools\n-        if tool.uses_llvm_tools() {\n+        if tool.uses_llvm_tools() && !self.config.dry_run {\n+            let mut additional_paths = vec![];\n+\n             if let Some(llvm_bin_path) = self.llvm_bin_path() {\n-                if host.contains(\"windows\") {\n-                    // On Windows, PATH and the dynamic library path are the same,\n-                    // so we just add the LLVM bin path to lib_path\n-                    lib_paths.push(llvm_bin_path);\n-                } else {\n-                    let old_path = env::var_os(\"PATH\").unwrap_or_default();\n-                    let new_path = env::join_paths(iter::once(llvm_bin_path)\n-                            .chain(env::split_paths(&old_path)))\n-                        .expect(\"Could not add LLVM bin path to PATH\");\n-                    cmd.env(\"PATH\", new_path);\n-                }\n+                additional_paths.push(llvm_bin_path);\n+            }\n+\n+            // If LLD is available, add that too.\n+            if self.config.lld_enabled {\n+                let lld_install_root = self.ensure(native::Lld {\n+                    target: self.config.build,\n+                });\n+\n+                let lld_bin_path = lld_install_root.join(\"bin\");\n+                additional_paths.push(lld_bin_path);\n+            }\n+\n+            if host.contains(\"windows\") {\n+                // On Windows, PATH and the dynamic library path are the same,\n+                // so we just add the LLVM bin path to lib_path\n+                lib_paths.extend(additional_paths);\n+            } else {\n+                let old_path = env::var_os(\"PATH\").unwrap_or_default();\n+                let new_path = env::join_paths(additional_paths.into_iter()\n+                        .chain(env::split_paths(&old_path)))\n+                    .expect(\"Could not add LLVM bin path to PATH\");\n+                cmd.env(\"PATH\", new_path);\n             }\n         }\n \n         add_lib_path(lib_paths, cmd);\n     }\n \n     fn llvm_bin_path(&self) -> Option<PathBuf> {\n-        if self.config.llvm_enabled && !self.config.dry_run {\n+        if self.config.llvm_enabled {\n             let llvm_config = self.ensure(native::Llvm {\n                 target: self.config.build,\n                 emscripten: false,"}, {"sha": "1c7eff68adc157d49859c0d29bab05eb72d26a42", "filename": "src/ci/docker/x86_64-gnu-debug/Dockerfile", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d30b99f9c23f8e1d6ef993cc94da96510ad709b3/src%2Fci%2Fdocker%2Fx86_64-gnu-debug%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/d30b99f9c23f8e1d6ef993cc94da96510ad709b3/src%2Fci%2Fdocker%2Fx86_64-gnu-debug%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-debug%2FDockerfile?ref=d30b99f9c23f8e1d6ef993cc94da96510ad709b3", "patch": "@@ -1,4 +1,4 @@\n-FROM ubuntu:16.04\n+FROM ubuntu:18.10\n \n RUN apt-get update && apt-get install -y --no-install-recommends \\\n   g++ \\\n@@ -7,18 +7,37 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   curl \\\n   ca-certificates \\\n   python2.7 \\\n+  python2.7-dev \\\n+  libxml2-dev \\\n+  libncurses-dev \\\n+  libedit-dev \\\n+  swig \\\n+  doxygen \\\n   git \\\n   cmake \\\n   sudo \\\n   gdb \\\n-  xz-utils\n+  xz-utils \\\n+  lld \\\n+  clang\n \n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n+ENV RUSTBUILD_FORCE_CLANG_BASED_TESTS 1\n ENV RUN_CHECK_WITH_PARALLEL_QUERIES 1\n+\n ENV RUST_CONFIGURE_ARGS \\\n       --build=x86_64-unknown-linux-gnu \\\n       --enable-debug \\\n-      --enable-optimize\n-ENV SCRIPT python2.7 ../x.py build\n+      --enable-lld \\\n+      --enable-lldb \\\n+      --enable-optimize \\\n+      --set llvm.use-linker=lld \\\n+      --set target.x86_64-unknown-linux-gnu.linker=clang \\\n+      --set target.x86_64-unknown-linux-gnu.cc=clang \\\n+      --set target.x86_64-unknown-linux-gnu.cxx=clang++\n+\n+ENV SCRIPT \\\n+  python2.7 ../x.py build && \\\n+  python2.7 ../x.py test src/test/run-make-fulldeps --test-args clang"}, {"sha": "cf687070bc2edcaa1e78021a079f2588d6d12d68", "filename": "src/test/run-make-fulldeps/cross-lang-lto-clang/Makefile", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d30b99f9c23f8e1d6ef993cc94da96510ad709b3/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-clang%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/d30b99f9c23f8e1d6ef993cc94da96510ad709b3/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-clang%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-clang%2FMakefile?ref=d30b99f9c23f8e1d6ef993cc94da96510ad709b3", "patch": "@@ -0,0 +1,25 @@\n+# needs-matching-clang\n+\n+# This test makes sure that cross-language inlining actually works by checking\n+# the generated machine code.\n+\n+-include ../tools.mk\n+\n+all: cpp-executable rust-executable\n+\n+cpp-executable:\n+\t$(RUSTC) -Zcross-lang-lto=on -o $(TMPDIR)/librustlib-xlto.a -Copt-level=2 -Ccodegen-units=1 ./rustlib.rs\n+\t$(CLANG) -flto=thin -fuse-ld=lld -L $(TMPDIR) -lrustlib-xlto -o $(TMPDIR)/cmain ./cmain.c -O3\n+\t# Make sure we don't find a call instruction to the function we expect to\n+\t# always be inlined.\n+\tllvm-objdump -d $(TMPDIR)/cmain | $(CGREP) -v -e \"call.*rust_always_inlined\"\n+\t# As a sanity check, make sure we do find a call instruction to a\n+\t# non-inlined function\n+\tllvm-objdump -d $(TMPDIR)/cmain | $(CGREP) -e \"call.*rust_never_inlined\"\n+\n+rust-executable:\n+\t$(CLANG) ./clib.c -flto=thin -c -o $(TMPDIR)/clib.o -O2\n+\t(cd $(TMPDIR); $(AR) crus ./libxyz.a ./clib.o)\n+\t$(RUSTC) -Zcross-lang-lto=on -L$(TMPDIR) -Copt-level=2 -Clinker=$(CLANG) -Clink-arg=-fuse-ld=lld ./main.rs -o $(TMPDIR)/rsmain\n+\tllvm-objdump -d $(TMPDIR)/rsmain | $(CGREP) -e \"call.*c_never_inlined\"\n+\tllvm-objdump -d $(TMPDIR)/rsmain | $(CGREP) -v -e \"call.*c_always_inlined\""}, {"sha": "90f33f24dc42425b38b394c08354c4ef3ecd9d9a", "filename": "src/test/run-make-fulldeps/cross-lang-lto-clang/clib.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d30b99f9c23f8e1d6ef993cc94da96510ad709b3/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-clang%2Fclib.c", "raw_url": "https://github.com/rust-lang/rust/raw/d30b99f9c23f8e1d6ef993cc94da96510ad709b3/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-clang%2Fclib.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-clang%2Fclib.c?ref=d30b99f9c23f8e1d6ef993cc94da96510ad709b3", "patch": "@@ -0,0 +1,9 @@\n+#include <stdint.h>\n+\n+uint32_t c_always_inlined() {\n+    return 1234;\n+}\n+\n+__attribute__((noinline)) uint32_t c_never_inlined() {\n+    return 12345;\n+}"}, {"sha": "e62a40117ce83a036da2becf0e4e3b55dc6ab2d9", "filename": "src/test/run-make-fulldeps/cross-lang-lto-clang/cmain.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d30b99f9c23f8e1d6ef993cc94da96510ad709b3/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-clang%2Fcmain.c", "raw_url": "https://github.com/rust-lang/rust/raw/d30b99f9c23f8e1d6ef993cc94da96510ad709b3/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-clang%2Fcmain.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-clang%2Fcmain.c?ref=d30b99f9c23f8e1d6ef993cc94da96510ad709b3", "patch": "@@ -0,0 +1,12 @@\n+#include <stdint.h>\n+\n+// A trivial function defined in Rust, returning a constant value. This should\n+// always be inlined.\n+uint32_t rust_always_inlined();\n+\n+\n+uint32_t rust_never_inlined();\n+\n+int main(int argc, char** argv) {\n+    return rust_never_inlined() + rust_always_inlined();\n+}"}, {"sha": "8129dcb85d96a0442f390f86a63154f3ff580377", "filename": "src/test/run-make-fulldeps/cross-lang-lto-clang/main.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d30b99f9c23f8e1d6ef993cc94da96510ad709b3/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-clang%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d30b99f9c23f8e1d6ef993cc94da96510ad709b3/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-clang%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-clang%2Fmain.rs?ref=d30b99f9c23f8e1d6ef993cc94da96510ad709b3", "patch": "@@ -0,0 +1,11 @@\n+#[link(name = \"xyz\")]\n+extern \"C\" {\n+    fn c_always_inlined() -> u32;\n+    fn c_never_inlined() -> u32;\n+}\n+\n+fn main() {\n+    unsafe {\n+        println!(\"blub: {}\", c_always_inlined() + c_never_inlined());\n+    }\n+}"}, {"sha": "8a74d74a420bd556056268d427ca26493d02f447", "filename": "src/test/run-make-fulldeps/cross-lang-lto-clang/rustlib.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d30b99f9c23f8e1d6ef993cc94da96510ad709b3/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-clang%2Frustlib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d30b99f9c23f8e1d6ef993cc94da96510ad709b3/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-clang%2Frustlib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-clang%2Frustlib.rs?ref=d30b99f9c23f8e1d6ef993cc94da96510ad709b3", "patch": "@@ -0,0 +1,12 @@\n+#![crate_type=\"staticlib\"]\n+\n+#[no_mangle]\n+pub extern \"C\" fn rust_always_inlined() -> u32 {\n+    42\n+}\n+\n+#[no_mangle]\n+#[inline(never)]\n+pub extern \"C\" fn rust_never_inlined() -> u32 {\n+    421\n+}"}, {"sha": "f6f8ef1dff4850cfa12d927b9c15e566617eb737", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d30b99f9c23f8e1d6ef993cc94da96510ad709b3/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d30b99f9c23f8e1d6ef993cc94da96510ad709b3/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=d30b99f9c23f8e1d6ef993cc94da96510ad709b3", "patch": "@@ -144,6 +144,10 @@ pub struct Config {\n     /// (or, alternatively, to silently run them like regular run-pass tests).\n     pub force_valgrind: bool,\n \n+    /// The path to the Clang executable to run Clang-based tests with. If\n+    /// `None` then these tests will be ignored.\n+    pub run_clang_based_tests_with: Option<String>,\n+\n     /// The directory containing the tests to run\n     pub src_base: PathBuf,\n "}, {"sha": "591d92f0cfa14ca977702f8335661728098b7980", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d30b99f9c23f8e1d6ef993cc94da96510ad709b3/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d30b99f9c23f8e1d6ef993cc94da96510ad709b3/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=d30b99f9c23f8e1d6ef993cc94da96510ad709b3", "patch": "@@ -111,6 +111,11 @@ impl EarlyProps {\n                 if ignore_llvm(config, ln) {\n                     props.ignore = Ignore::Ignore;\n                 }\n+\n+                if config.run_clang_based_tests_with.is_none() &&\n+                   config.parse_needs_matching_clang(ln) {\n+                    props.ignore = Ignore::Ignore;\n+                }\n             }\n \n             if (config.mode == common::DebugInfoGdb || config.mode == common::DebugInfoBoth) &&\n@@ -707,6 +712,10 @@ impl Config {\n         }\n     }\n \n+    fn parse_needs_matching_clang(&self, line: &str) -> bool {\n+        self.parse_name_directive(line, \"needs-matching-clang\")\n+    }\n+\n     /// Parses a name-value directive which contains config-specific information, e.g., `ignore-x86`\n     /// or `normalize-stderr-32bit`.\n     fn parse_cfg_name_directive(&self, line: &str, prefix: &str) -> ParsedNameDirective {"}, {"sha": "15d53f1e3755cc3ea7391b626ff3bd2d84442ed6", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d30b99f9c23f8e1d6ef993cc94da96510ad709b3/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d30b99f9c23f8e1d6ef993cc94da96510ad709b3/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=d30b99f9c23f8e1d6ef993cc94da96510ad709b3", "patch": "@@ -108,6 +108,12 @@ pub fn parse_config(args: Vec<String>) -> Config {\n             \"force-valgrind\",\n             \"fail if Valgrind tests cannot be run under Valgrind\",\n         )\n+        .optopt(\n+            \"\",\n+            \"run-clang-based-tests-with\",\n+            \"path to Clang executable\",\n+            \"PATH\",\n+        )\n         .optopt(\n             \"\",\n             \"llvm-filecheck\",\n@@ -298,6 +304,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         docck_python: matches.opt_str(\"docck-python\").unwrap(),\n         valgrind_path: matches.opt_str(\"valgrind-path\"),\n         force_valgrind: matches.opt_present(\"force-valgrind\"),\n+        run_clang_based_tests_with: matches.opt_str(\"run-clang-based-tests-with\"),\n         llvm_filecheck: matches.opt_str(\"llvm-filecheck\").map(|s| PathBuf::from(&s)),\n         src_base,\n         build_base: opt_path(matches, \"build-base\"),"}, {"sha": "ff201b03a0bdc83e7f0642a3cfd7439283cd356a", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d30b99f9c23f8e1d6ef993cc94da96510ad709b3/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d30b99f9c23f8e1d6ef993cc94da96510ad709b3/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=d30b99f9c23f8e1d6ef993cc94da96510ad709b3", "patch": "@@ -2633,6 +2633,10 @@ impl<'test> TestCx<'test> {\n             cmd.env(\"RUSTC_LINKER\", linker);\n         }\n \n+        if let Some(ref clang) = self.config.run_clang_based_tests_with {\n+            cmd.env(\"CLANG\", clang);\n+        }\n+\n         // We don't want RUSTFLAGS set from the outside to interfere with\n         // compiler flags set in the test cases:\n         cmd.env_remove(\"RUSTFLAGS\");"}]}