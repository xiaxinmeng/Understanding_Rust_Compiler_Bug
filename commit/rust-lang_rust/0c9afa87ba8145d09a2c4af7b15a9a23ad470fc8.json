{"sha": "0c9afa87ba8145d09a2c4af7b15a9a23ad470fc8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjOWFmYTg3YmE4MTQ1ZDA5YTJjNGFmN2IxNWE5YTIzYWQ0NzBmYzg=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-02-18T22:36:35Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-02-27T18:45:18Z"}, "message": "Provide missing comma in match arm suggestion\n\nWhen finding:\n\n```rust\nmatch &Some(3) {\n    &None => 1\n    &Some(2) => { 3 }\n    _ => 2\n}\n```\n\nprovide the following diagnostic:\n\n```\nerror: expected one of `,`, `.`, `?`, `}`, or an operator, found `=>`\n --> $DIR/missing-comma-in-match.rs:15:18\n  |\nX |         &None => 1\n  |               --  - help: missing comma\n  |               |\n  |               while parsing the match arm starting here\nX |         &Some(2) => { 3 }\n  |                  ^^ expected one of `,`, `.`, `?`, `}`, or an operator here\n```", "tree": {"sha": "134b21037ed63090afb8e55129abccb254abc284", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/134b21037ed63090afb8e55129abccb254abc284"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c9afa87ba8145d09a2c4af7b15a9a23ad470fc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c9afa87ba8145d09a2c4af7b15a9a23ad470fc8", "html_url": "https://github.com/rust-lang/rust/commit/0c9afa87ba8145d09a2c4af7b15a9a23ad470fc8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c9afa87ba8145d09a2c4af7b15a9a23ad470fc8/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29f5c699b11a6a148f097f82eaa05202f8799bbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/29f5c699b11a6a148f097f82eaa05202f8799bbc", "html_url": "https://github.com/rust-lang/rust/commit/29f5c699b11a6a148f097f82eaa05202f8799bbc"}], "stats": {"total": 70, "additions": 68, "deletions": 2}, "files": [{"sha": "2046bbfa713a5758b744d5b62a82f395fef1acf2", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0c9afa87ba8145d09a2c4af7b15a9a23ad470fc8/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c9afa87ba8145d09a2c4af7b15a9a23ad470fc8/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=0c9afa87ba8145d09a2c4af7b15a9a23ad470fc8", "patch": "@@ -3404,14 +3404,48 @@ impl<'a> Parser<'a> {\n         } else {\n             None\n         };\n+        let arrow_span = self.span;\n         self.expect(&token::FatArrow)?;\n-        let expr = self.parse_expr_res(Restrictions::STMT_EXPR, None)?;\n+        let arm_start_span = self.span;\n+\n+        let expr = self.parse_expr_res(Restrictions::STMT_EXPR, None)\n+            .map_err(|mut err| {\n+                err.span_label(arrow_span, \"while parsing the match arm starting here\");\n+                err\n+            })?;\n \n         let require_comma = classify::expr_requires_semi_to_be_stmt(&expr)\n             && self.token != token::CloseDelim(token::Brace);\n \n         if require_comma {\n-            self.expect_one_of(&[token::Comma], &[token::CloseDelim(token::Brace)])?;\n+            let cm = self.sess.codemap();\n+            self.expect_one_of(&[token::Comma], &[token::CloseDelim(token::Brace)])\n+                .map_err(|mut err| {\n+                    err.span_label(arrow_span, \"while parsing the match arm starting here\");\n+                    match (cm.span_to_lines(expr.span), cm.span_to_lines(arm_start_span)) {\n+                        (Ok(ref expr_lines), Ok(ref arm_start_lines))\n+                        if arm_start_lines.lines[0].end_col == expr_lines.lines[0].end_col\n+                            && expr_lines.lines.len() == 2\n+                            && self.token == token::FatArrow => {\n+                            // We check wether there's any trailing code in the parse span, if there\n+                            // isn't, we very likely have the following:\n+                            //\n+                            // X |     &Y => \"y\"\n+                            //   |        --    - missing comma\n+                            //   |        |\n+                            //   |        arrow_span\n+                            // X |     &X => \"x\"\n+                            //   |      - ^^ self.span\n+                            //   |      |\n+                            //   |      parsed until here as `\"y\" & X`\n+                            err.span_suggestion_short(cm.next_point(arm_start_span),\n+                                                      \"missing a comma here to end this match arm\",\n+                                                      \",\".to_owned());\n+                        }\n+                        _ => {}\n+                    }\n+                    err\n+                })?;\n         } else {\n             self.eat(&token::Comma);\n         }"}, {"sha": "e02a8df3343b391ced1c9ff333535ec0840e31b0", "filename": "src/test/ui/suggestions/missing-comma-in-match.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0c9afa87ba8145d09a2c4af7b15a9a23ad470fc8/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-comma-in-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c9afa87ba8145d09a2c4af7b15a9a23ad470fc8/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-comma-in-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-comma-in-match.rs?ref=0c9afa87ba8145d09a2c4af7b15a9a23ad470fc8", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    match &Some(3) {\n+        &None => 1\n+        &Some(2) => { 3 }\n+        //~^ ERROR expected one of `,`, `.`, `?`, `}`, or an operator, found `=>`\n+        //~| NOTE expected one of `,`, `.`, `?`, `}`, or an operator here\n+        //~^^^^ NOTE while parsing the match arm starting here\n+        _ => 2\n+    };\n+}"}, {"sha": "864fde49a5e519e4ff88eeeb97e836351ebff7bf", "filename": "src/test/ui/suggestions/missing-comma-in-match.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0c9afa87ba8145d09a2c4af7b15a9a23ad470fc8/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-comma-in-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c9afa87ba8145d09a2c4af7b15a9a23ad470fc8/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-comma-in-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-comma-in-match.stderr?ref=0c9afa87ba8145d09a2c4af7b15a9a23ad470fc8", "patch": "@@ -0,0 +1,12 @@\n+error: expected one of `,`, `.`, `?`, `}`, or an operator, found `=>`\n+  --> $DIR/missing-comma-in-match.rs:14:18\n+   |\n+13 |         &None => 1\n+   |               --  - help: missing a comma here to end this match arm\n+   |               |\n+   |               while parsing the match arm starting here\n+14 |         &Some(2) => { 3 }\n+   |                  ^^ expected one of `,`, `.`, `?`, `}`, or an operator here\n+\n+error: aborting due to previous error\n+"}]}