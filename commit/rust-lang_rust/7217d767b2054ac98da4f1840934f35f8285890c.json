{"sha": "7217d767b2054ac98da4f1840934f35f8285890c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyMTdkNzY3YjIwNTRhYzk4ZGE0ZjE4NDA5MzRmMzVmODI4NTg5MGM=", "commit": {"author": {"name": "Fabian Wolff", "email": "fabi.wolff@arcor.de", "date": "2021-05-15T17:53:16Z"}, "committer": {"name": "Fabian Wolff", "email": "fabi.wolff@arcor.de", "date": "2021-05-15T17:53:16Z"}, "message": "Report an error if a lang item has the wrong number of generic arguments", "tree": {"sha": "68473dc0c6c9a7a8bdf57006ce76996bdf215ddc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68473dc0c6c9a7a8bdf57006ce76996bdf215ddc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7217d767b2054ac98da4f1840934f35f8285890c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7217d767b2054ac98da4f1840934f35f8285890c", "html_url": "https://github.com/rust-lang/rust/commit/7217d767b2054ac98da4f1840934f35f8285890c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7217d767b2054ac98da4f1840934f35f8285890c/comments", "author": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b439be03c9c30d173c45785a03a03cba98af5ab6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b439be03c9c30d173c45785a03a03cba98af5ab6", "html_url": "https://github.com/rust-lang/rust/commit/b439be03c9c30d173c45785a03a03cba98af5ab6"}], "stats": {"total": 219, "additions": 212, "deletions": 7}, "files": [{"sha": "111bdd1a117ea0b8ef4eea9c8a87d62b305fa7e1", "filename": "compiler/rustc_passes/src/lang_items.rs", "status": "modified", "additions": 83, "deletions": 5, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/7217d767b2054ac98da4f1840934f35f8285890c/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7217d767b2054ac98da4f1840934f35f8285890c/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs?ref=7217d767b2054ac98da4f1840934f35f8285890c", "patch": "@@ -13,12 +13,13 @@ use crate::weak_lang_items;\n use rustc_middle::middle::cstore::ExternCrate;\n use rustc_middle::ty::TyCtxt;\n \n-use rustc_errors::struct_span_err;\n+use rustc_errors::{pluralize, struct_span_err};\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::lang_items::{extract, ITEM_REFS};\n use rustc_hir::{HirId, LangItem, LanguageItems, Target};\n+use rustc_span::Span;\n \n use rustc_middle::ty::query::Providers;\n \n@@ -61,8 +62,7 @@ impl LanguageItemCollector<'tcx> {\n             match ITEM_REFS.get(&value).cloned() {\n                 // Known lang item with attribute on correct target.\n                 Some((item_index, expected_target)) if actual_target == expected_target => {\n-                    let def_id = self.tcx.hir().local_def_id(hir_id);\n-                    self.collect_item(item_index, def_id.to_def_id());\n+                    self.collect_item_extended(item_index, hir_id, span);\n                 }\n                 // Known lang item with attribute on incorrect target.\n                 Some((_, expected_target)) => {\n@@ -100,11 +100,12 @@ impl LanguageItemCollector<'tcx> {\n     }\n \n     fn collect_item(&mut self, item_index: usize, item_def_id: DefId) {\n+        let lang_item = LangItem::from_u32(item_index as u32).unwrap();\n+        let name = lang_item.name();\n+\n         // Check for duplicates.\n         if let Some(original_def_id) = self.items.items[item_index] {\n             if original_def_id != item_def_id {\n-                let lang_item = LangItem::from_u32(item_index as u32).unwrap();\n-                let name = lang_item.name();\n                 let mut err = match self.tcx.hir().span_if_local(item_def_id) {\n                     Some(span) => struct_span_err!(\n                         self.tcx.sess,\n@@ -180,6 +181,83 @@ impl LanguageItemCollector<'tcx> {\n             self.items.groups[group as usize].push(item_def_id);\n         }\n     }\n+\n+    fn collect_item_extended(&mut self, item_index: usize, hir_id: HirId, span: Span) {\n+        let item_def_id = self.tcx.hir().local_def_id(hir_id).to_def_id();\n+        let lang_item = LangItem::from_u32(item_index as u32).unwrap();\n+        let name = lang_item.name();\n+\n+        self.collect_item(item_index, item_def_id);\n+\n+        // Now check whether the lang_item has the expected number of generic\n+        // arguments. Binary and indexing operations have one (for the RHS/index),\n+        // unary operations have no generic arguments.\n+\n+        let expected_num = match lang_item {\n+            LangItem::Add\n+            | LangItem::Sub\n+            | LangItem::Mul\n+            | LangItem::Div\n+            | LangItem::Rem\n+            | LangItem::BitXor\n+            | LangItem::BitAnd\n+            | LangItem::BitOr\n+            | LangItem::Shl\n+            | LangItem::Shr\n+            | LangItem::AddAssign\n+            | LangItem::SubAssign\n+            | LangItem::MulAssign\n+            | LangItem::DivAssign\n+            | LangItem::RemAssign\n+            | LangItem::BitXorAssign\n+            | LangItem::BitAndAssign\n+            | LangItem::BitOrAssign\n+            | LangItem::ShlAssign\n+            | LangItem::ShrAssign\n+            | LangItem::Index\n+            | LangItem::IndexMut => Some(1),\n+\n+            LangItem::Neg | LangItem::Not | LangItem::Deref | LangItem::DerefMut => Some(0),\n+\n+            // FIXME: add more cases?\n+            _ => None,\n+        };\n+\n+        if let Some(expected_num) = expected_num {\n+            let (actual_num, generics_span) = match self.tcx.hir().get(hir_id) {\n+                hir::Node::Item(hir::Item {\n+                    kind: hir::ItemKind::Trait(_, _, generics, ..),\n+                    ..\n+                }) => (generics.params.len(), generics.span),\n+                _ => bug!(\"op/index/deref lang item target is not a trait: {:?}\", lang_item),\n+            };\n+\n+            if expected_num != actual_num {\n+                // We are issuing E0718 \"incorrect target\" here, because while the\n+                // item kind of the target is correct, the target is still wrong\n+                // because of the wrong number of generic arguments.\n+                struct_span_err!(\n+                    self.tcx.sess,\n+                    span,\n+                    E0718,\n+                    \"`{}` language item must be applied to a trait with {} generic argument{}\",\n+                    name,\n+                    expected_num,\n+                    pluralize!(expected_num)\n+                )\n+                .span_label(\n+                    generics_span,\n+                    format!(\n+                        \"this trait has {} generic argument{}, not {}\",\n+                        actual_num,\n+                        pluralize!(actual_num),\n+                        expected_num\n+                    ),\n+                )\n+                .emit();\n+            }\n+        }\n+    }\n }\n \n /// Traverses and collects all the lang items in all crates."}, {"sha": "427102afee103535dcf882c84e7ac2180fefa083", "filename": "compiler/rustc_typeck/src/check/method/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7217d767b2054ac98da4f1840934f35f8285890c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7217d767b2054ac98da4f1840934f35f8285890c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs?ref=7217d767b2054ac98da4f1840934f35f8285890c", "patch": "@@ -303,8 +303,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         opt_input_types: Option<&[Ty<'tcx>]>,\n     ) -> Option<InferOk<'tcx, MethodCallee<'tcx>>> {\n         debug!(\n-            \"lookup_in_trait_adjusted(self_ty={:?}, m_name={}, trait_def_id={:?})\",\n-            self_ty, m_name, trait_def_id\n+            \"lookup_in_trait_adjusted(self_ty={:?}, m_name={}, trait_def_id={:?}, opt_input_types={:?})\",\n+            self_ty, m_name, trait_def_id, opt_input_types\n         );\n \n         // Construct a trait-reference `self_ty : Trait<input_tys>`"}, {"sha": "87cb2d6d70c579ccfad142eefd9ceebd977ec4af", "filename": "compiler/rustc_typeck/src/check/op.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7217d767b2054ac98da4f1840934f35f8285890c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7217d767b2054ac98da4f1840934f35f8285890c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs?ref=7217d767b2054ac98da4f1840934f35f8285890c", "patch": "@@ -795,6 +795,24 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             lhs_ty, op, opname, trait_did\n         );\n \n+        // Catches cases like #83893, where a lang item is declared with the\n+        // wrong number of generic arguments. Should have yielded an error\n+        // elsewhere by now, but we have to catch it here so that we do not\n+        // index `other_tys` out of bounds (if the lang item has too many\n+        // generic arguments, `other_tys` is too short).\n+        if let Some(trait_did) = trait_did {\n+            let generics = self.tcx.generics_of(trait_did);\n+            let expected_num = match op {\n+                // Binary ops have a generic right-hand side, unary ops don't\n+                Op::Binary(..) => 1,\n+                Op::Unary(..) => 0,\n+            } + if generics.has_self { 1 } else { 0 };\n+            let num_generics = generics.count();\n+            if num_generics != expected_num {\n+                return Err(());\n+            }\n+        }\n+\n         let method = trait_did.and_then(|trait_did| {\n             let opname = Ident::with_dummy_span(opname);\n             self.lookup_method_in_trait(span, opname, trait_did, lhs_ty, Some(other_tys))"}, {"sha": "23677d04d7301506c69866567b8afca527c0be93", "filename": "compiler/rustc_typeck/src/check/place_op.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7217d767b2054ac98da4f1840934f35f8285890c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fplace_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7217d767b2054ac98da4f1840934f35f8285890c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fplace_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fplace_op.rs?ref=7217d767b2054ac98da4f1840934f35f8285890c", "patch": "@@ -153,6 +153,22 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             PlaceOp::Deref => (self.tcx.lang_items().deref_trait(), sym::deref),\n             PlaceOp::Index => (self.tcx.lang_items().index_trait(), sym::index),\n         };\n+\n+        // If the lang item was declared incorrectly, stop here so that we don't\n+        // run into an ICE (#83893). The error is reported where the lang item is\n+        // declared.\n+        if let Some(trait_did) = imm_tr {\n+            let generics = self.tcx.generics_of(trait_did);\n+            let expected_num = match op {\n+                PlaceOp::Deref => 0,\n+                PlaceOp::Index => 1,\n+            } + if generics.has_self { 1 } else { 0 };\n+            let num_generics = generics.count();\n+            if num_generics != expected_num {\n+                return None;\n+            }\n+        }\n+\n         imm_tr.and_then(|trait_did| {\n             self.lookup_method_in_trait(\n                 span,\n@@ -177,6 +193,22 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             PlaceOp::Deref => (self.tcx.lang_items().deref_mut_trait(), sym::deref_mut),\n             PlaceOp::Index => (self.tcx.lang_items().index_mut_trait(), sym::index_mut),\n         };\n+\n+        // If the lang item was declared incorrectly, stop here so that we don't\n+        // run into an ICE (#83893). The error is reported where the lang item is\n+        // declared.\n+        if let Some(trait_did) = mut_tr {\n+            let generics = self.tcx.generics_of(trait_did);\n+            let expected_num = match op {\n+                PlaceOp::Deref => 0,\n+                PlaceOp::Index => 1,\n+            } + if generics.has_self { 1 } else { 0 };\n+            let num_generics = generics.count();\n+            if num_generics != expected_num {\n+                return None;\n+            }\n+        }\n+\n         mut_tr.and_then(|trait_did| {\n             self.lookup_method_in_trait(\n                 span,"}, {"sha": "0c329542928c559adf4f00c268a2b989269476de", "filename": "src/test/ui/lang-items/lang-item-missing-generator.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/7217d767b2054ac98da4f1840934f35f8285890c/src%2Ftest%2Fui%2Flang-items%2Flang-item-missing-generator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7217d767b2054ac98da4f1840934f35f8285890c/src%2Ftest%2Fui%2Flang-items%2Flang-item-missing-generator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flang-items%2Flang-item-missing-generator.rs?ref=7217d767b2054ac98da4f1840934f35f8285890c", "previous_filename": "src/test/ui/lang-item-missing-generator.rs"}, {"sha": "fa13bf0b12719050bb268f8014248e718bc62c1d", "filename": "src/test/ui/lang-items/lang-item-missing-generator.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/7217d767b2054ac98da4f1840934f35f8285890c/src%2Ftest%2Fui%2Flang-items%2Flang-item-missing-generator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7217d767b2054ac98da4f1840934f35f8285890c/src%2Ftest%2Fui%2Flang-items%2Flang-item-missing-generator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flang-items%2Flang-item-missing-generator.stderr?ref=7217d767b2054ac98da4f1840934f35f8285890c", "previous_filename": "src/test/ui/lang-item-missing-generator.stderr"}, {"sha": "4e26343242e0105d46a5b5c4e2304b8699efeb4d", "filename": "src/test/ui/lang-items/lang-item-missing.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/7217d767b2054ac98da4f1840934f35f8285890c/src%2Ftest%2Fui%2Flang-items%2Flang-item-missing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7217d767b2054ac98da4f1840934f35f8285890c/src%2Ftest%2Fui%2Flang-items%2Flang-item-missing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flang-items%2Flang-item-missing.rs?ref=7217d767b2054ac98da4f1840934f35f8285890c", "previous_filename": "src/test/ui/lang-item-missing.rs"}, {"sha": "f7516c7d377dab1ff50429237150044408aa9e26", "filename": "src/test/ui/lang-items/lang-item-missing.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/7217d767b2054ac98da4f1840934f35f8285890c/src%2Ftest%2Fui%2Flang-items%2Flang-item-missing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7217d767b2054ac98da4f1840934f35f8285890c/src%2Ftest%2Fui%2Flang-items%2Flang-item-missing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flang-items%2Flang-item-missing.stderr?ref=7217d767b2054ac98da4f1840934f35f8285890c", "previous_filename": "src/test/ui/lang-item-missing.stderr"}, {"sha": "9f4f2464a1e65db1f9d119abc7b30def5aaf17ff", "filename": "src/test/ui/lang-items/wrong-number-generic-args-add.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7217d767b2054ac98da4f1840934f35f8285890c/src%2Ftest%2Fui%2Flang-items%2Fwrong-number-generic-args-add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7217d767b2054ac98da4f1840934f35f8285890c/src%2Ftest%2Fui%2Flang-items%2Fwrong-number-generic-args-add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flang-items%2Fwrong-number-generic-args-add.rs?ref=7217d767b2054ac98da4f1840934f35f8285890c", "patch": "@@ -0,0 +1,20 @@\n+// Checks whether declaring a lang item with the wrong number\n+// of generic arguments crashes the compiler (issue #83893).\n+\n+#![feature(lang_items,no_core)]\n+#![no_core]\n+#![crate_type=\"lib\"]\n+\n+#[lang = \"sized\"]\n+trait MySized {}\n+\n+#[lang = \"add\"]\n+trait MyAdd<'a, T> {}\n+//~^^ ERROR: `add` language item must be applied to a trait with 1 generic argument [E0718]\n+\n+fn ice() {\n+    let r = 5;\n+    let a = 6;\n+    r + a\n+    //~^ ERROR: cannot add `{integer}` to `{integer}` [E0369]\n+}"}, {"sha": "6f89441fd285d978b460319a62592b4893a7af5f", "filename": "src/test/ui/lang-items/wrong-number-generic-args-add.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7217d767b2054ac98da4f1840934f35f8285890c/src%2Ftest%2Fui%2Flang-items%2Fwrong-number-generic-args-add.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7217d767b2054ac98da4f1840934f35f8285890c/src%2Ftest%2Fui%2Flang-items%2Fwrong-number-generic-args-add.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flang-items%2Fwrong-number-generic-args-add.stderr?ref=7217d767b2054ac98da4f1840934f35f8285890c", "patch": "@@ -0,0 +1,20 @@\n+error[E0718]: `add` language item must be applied to a trait with 1 generic argument\n+  --> $DIR/wrong-number-generic-args-add.rs:11:1\n+   |\n+LL | #[lang = \"add\"]\n+   | ^^^^^^^^^^^^^^^\n+LL | trait MyAdd<'a, T> {}\n+   |            ------- this trait has 2 generic arguments, not 1\n+\n+error[E0369]: cannot add `{integer}` to `{integer}`\n+  --> $DIR/wrong-number-generic-args-add.rs:18:7\n+   |\n+LL |     r + a\n+   |     - ^ - {integer}\n+   |     |\n+   |     {integer}\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0369, E0718.\n+For more information about an error, try `rustc --explain E0369`."}, {"sha": "1d90e63dc5470749fccfd178df32cdc640449f74", "filename": "src/test/ui/lang-items/wrong-number-generic-args-index.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7217d767b2054ac98da4f1840934f35f8285890c/src%2Ftest%2Fui%2Flang-items%2Fwrong-number-generic-args-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7217d767b2054ac98da4f1840934f35f8285890c/src%2Ftest%2Fui%2Flang-items%2Fwrong-number-generic-args-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flang-items%2Fwrong-number-generic-args-index.rs?ref=7217d767b2054ac98da4f1840934f35f8285890c", "patch": "@@ -0,0 +1,19 @@\n+// Checks whether declaring a lang item with the wrong number\n+// of generic arguments crashes the compiler (issue #83893).\n+\n+#![feature(lang_items,no_core)]\n+#![no_core]\n+#![crate_type=\"lib\"]\n+\n+#[lang = \"sized\"]\n+trait MySized {}\n+\n+#[lang = \"index\"]\n+trait MyIndex<'a, T> {}\n+//~^^ ERROR: `index` language item must be applied to a trait with 1 generic argument [E0718]\n+\n+fn ice() {\n+    let arr = [0; 5];\n+    let _ = arr[2];\n+    //~^ ERROR: cannot index into a value of type `[{integer}; 5]` [E0608]\n+}"}, {"sha": "bc3f19ff276239284b9cbbe75d353fc12c264185", "filename": "src/test/ui/lang-items/wrong-number-generic-args-index.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7217d767b2054ac98da4f1840934f35f8285890c/src%2Ftest%2Fui%2Flang-items%2Fwrong-number-generic-args-index.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7217d767b2054ac98da4f1840934f35f8285890c/src%2Ftest%2Fui%2Flang-items%2Fwrong-number-generic-args-index.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flang-items%2Fwrong-number-generic-args-index.stderr?ref=7217d767b2054ac98da4f1840934f35f8285890c", "patch": "@@ -0,0 +1,18 @@\n+error[E0718]: `index` language item must be applied to a trait with 1 generic argument\n+  --> $DIR/wrong-number-generic-args-index.rs:11:1\n+   |\n+LL | #[lang = \"index\"]\n+   | ^^^^^^^^^^^^^^^^^\n+LL | trait MyIndex<'a, T> {}\n+   |              ------- this trait has 2 generic arguments, not 1\n+\n+error[E0608]: cannot index into a value of type `[{integer}; 5]`\n+  --> $DIR/wrong-number-generic-args-index.rs:17:13\n+   |\n+LL |     let _ = arr[2];\n+   |             ^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0608, E0718.\n+For more information about an error, try `rustc --explain E0608`."}]}