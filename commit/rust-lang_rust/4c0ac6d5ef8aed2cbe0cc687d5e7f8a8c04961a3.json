{"sha": "4c0ac6d5ef8aed2cbe0cc687d5e7f8a8c04961a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjMGFjNmQ1ZWY4YWVkMmNiZTBjYzY4N2Q1ZTdmOGE4YzA0OTYxYTM=", "commit": {"author": {"name": "Sean Patrick Santos", "email": "SeanPatrickSantos@gmail.com", "date": "2015-04-25T04:58:40Z"}, "committer": {"name": "Sean Patrick Santos", "email": "SeanPatrickSantos@gmail.com", "date": "2015-04-25T04:58:40Z"}, "message": "Remove obsolete \"MarkerTrait\" from tests.", "tree": {"sha": "65adbeb50e743346f6ce8c4dbfbecae8c5b5a22b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65adbeb50e743346f6ce8c4dbfbecae8c5b5a22b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c0ac6d5ef8aed2cbe0cc687d5e7f8a8c04961a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c0ac6d5ef8aed2cbe0cc687d5e7f8a8c04961a3", "html_url": "https://github.com/rust-lang/rust/commit/4c0ac6d5ef8aed2cbe0cc687d5e7f8a8c04961a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c0ac6d5ef8aed2cbe0cc687d5e7f8a8c04961a3/comments", "author": {"login": "quantheory", "id": 1740206, "node_id": "MDQ6VXNlcjE3NDAyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1740206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/quantheory", "html_url": "https://github.com/quantheory", "followers_url": "https://api.github.com/users/quantheory/followers", "following_url": "https://api.github.com/users/quantheory/following{/other_user}", "gists_url": "https://api.github.com/users/quantheory/gists{/gist_id}", "starred_url": "https://api.github.com/users/quantheory/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/quantheory/subscriptions", "organizations_url": "https://api.github.com/users/quantheory/orgs", "repos_url": "https://api.github.com/users/quantheory/repos", "events_url": "https://api.github.com/users/quantheory/events{/privacy}", "received_events_url": "https://api.github.com/users/quantheory/received_events", "type": "User", "site_admin": false}, "committer": {"login": "quantheory", "id": 1740206, "node_id": "MDQ6VXNlcjE3NDAyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1740206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/quantheory", "html_url": "https://github.com/quantheory", "followers_url": "https://api.github.com/users/quantheory/followers", "following_url": "https://api.github.com/users/quantheory/following{/other_user}", "gists_url": "https://api.github.com/users/quantheory/gists{/gist_id}", "starred_url": "https://api.github.com/users/quantheory/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/quantheory/subscriptions", "organizations_url": "https://api.github.com/users/quantheory/orgs", "repos_url": "https://api.github.com/users/quantheory/repos", "events_url": "https://api.github.com/users/quantheory/events{/privacy}", "received_events_url": "https://api.github.com/users/quantheory/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8", "html_url": "https://github.com/rust-lang/rust/commit/b1db4ec3d0a96a1e83d74fbc7f99dc3be054f4d8"}], "stats": {"total": 58, "additions": 14, "deletions": 44}, "files": [{"sha": "1fd8fee0117c5c31b287405a19faa33526a258f3", "filename": "src/test/auxiliary/associated-const-cc-lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4c0ac6d5ef8aed2cbe0cc687d5e7f8a8c04961a3/src%2Ftest%2Fauxiliary%2Fassociated-const-cc-lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0ac6d5ef8aed2cbe0cc687d5e7f8a8c04961a3/src%2Ftest%2Fauxiliary%2Fassociated-const-cc-lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fassociated-const-cc-lib.rs?ref=4c0ac6d5ef8aed2cbe0cc687d5e7f8a8c04961a3", "patch": "@@ -12,10 +12,8 @@\n \n #![crate_type=\"lib\"]\n \n-use std::marker::MarkerTrait;\n-\n // These items are for testing that associated consts work cross-crate.\n-pub trait Foo: MarkerTrait {\n+pub trait Foo {\n     const BAR: usize;\n }\n \n@@ -26,7 +24,7 @@ impl Foo for FooNoDefault {\n }\n \n // These test that defaults and default resolution work cross-crate.\n-pub trait FooDefault: MarkerTrait {\n+pub trait FooDefault {\n     const BAR: usize = 1;\n }\n "}, {"sha": "4f20d9e78ebd010a74269a7f7598a42cc69693b2", "filename": "src/test/compile-fail/associated-const-impl-wrong-type.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c0ac6d5ef8aed2cbe0cc687d5e7f8a8c04961a3/src%2Ftest%2Fcompile-fail%2Fassociated-const-impl-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0ac6d5ef8aed2cbe0cc687d5e7f8a8c04961a3/src%2Ftest%2Fcompile-fail%2Fassociated-const-impl-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-const-impl-wrong-type.rs?ref=4c0ac6d5ef8aed2cbe0cc687d5e7f8a8c04961a3", "patch": "@@ -10,9 +10,7 @@\n \n #![feature(associated_consts)]\n \n-use std::marker::MarkerTrait;\n-\n-trait Foo: MarkerTrait {\n+trait Foo {\n     const BAR: u32;\n }\n "}, {"sha": "be949db0281d28ebd70ef01c944450c89cfff47b", "filename": "src/test/compile-fail/associated-const-private-impl.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c0ac6d5ef8aed2cbe0cc687d5e7f8a8c04961a3/src%2Ftest%2Fcompile-fail%2Fassociated-const-private-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0ac6d5ef8aed2cbe0cc687d5e7f8a8c04961a3/src%2Ftest%2Fcompile-fail%2Fassociated-const-private-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-const-private-impl.rs?ref=4c0ac6d5ef8aed2cbe0cc687d5e7f8a8c04961a3", "patch": "@@ -10,8 +10,6 @@\n \n #![feature(associated_consts)]\n \n-use std::marker::MarkerTrait;\n-\n mod bar1 {\n     pub use self::bar2::Foo;\n     mod bar2 {"}, {"sha": "21672b18bde449fe631a9413bcf270ce884d98ab", "filename": "src/test/compile-fail/gated-associated_consts.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c0ac6d5ef8aed2cbe0cc687d5e7f8a8c04961a3/src%2Ftest%2Fcompile-fail%2Fgated-associated_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0ac6d5ef8aed2cbe0cc687d5e7f8a8c04961a3/src%2Ftest%2Fcompile-fail%2Fgated-associated_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgated-associated_consts.rs?ref=4c0ac6d5ef8aed2cbe0cc687d5e7f8a8c04961a3", "patch": "@@ -8,9 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::marker::MarkerTrait;\n-\n-trait MyTrait: MarkerTrait {\n+trait MyTrait {\n     const C: bool;\n     //~^ associated constants are experimental\n     //~| add #![feature(associated_consts)] to the crate attributes to enable"}, {"sha": "faf6d255c9afc38c2b26ba93b5ea0105fbbcb59b", "filename": "src/test/compile-fail/method-path-in-pattern.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c0ac6d5ef8aed2cbe0cc687d5e7f8a8c04961a3/src%2Ftest%2Fcompile-fail%2Fmethod-path-in-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0ac6d5ef8aed2cbe0cc687d5e7f8a8c04961a3/src%2Ftest%2Fcompile-fail%2Fmethod-path-in-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-path-in-pattern.rs?ref=4c0ac6d5ef8aed2cbe0cc687d5e7f8a8c04961a3", "patch": "@@ -8,15 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::marker::MarkerTrait;\n-\n struct Foo;\n \n impl Foo {\n     fn bar(&self) {}\n }\n \n-trait MyTrait: MarkerTrait {\n+trait MyTrait {\n     fn trait_bar() {}\n }\n "}, {"sha": "0df824e7f535bd4b83185bad9b2ebe32c4ff1a47", "filename": "src/test/compile-fail/method-resolvable-path-in-pattern.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c0ac6d5ef8aed2cbe0cc687d5e7f8a8c04961a3/src%2Ftest%2Fcompile-fail%2Fmethod-resolvable-path-in-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0ac6d5ef8aed2cbe0cc687d5e7f8a8c04961a3/src%2Ftest%2Fcompile-fail%2Fmethod-resolvable-path-in-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-resolvable-path-in-pattern.rs?ref=4c0ac6d5ef8aed2cbe0cc687d5e7f8a8c04961a3", "patch": "@@ -8,11 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::marker::MarkerTrait;\n-\n struct Foo;\n \n-trait MyTrait: MarkerTrait {\n+trait MyTrait {\n     fn trait_bar() {}\n }\n "}, {"sha": "eeaacbf9dcc788be5daf25e1ace2968314894e3e", "filename": "src/test/run-pass/associated-const-match-patterns.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c0ac6d5ef8aed2cbe0cc687d5e7f8a8c04961a3/src%2Ftest%2Frun-pass%2Fassociated-const-match-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0ac6d5ef8aed2cbe0cc687d5e7f8a8c04961a3/src%2Ftest%2Frun-pass%2Fassociated-const-match-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-const-match-patterns.rs?ref=4c0ac6d5ef8aed2cbe0cc687d5e7f8a8c04961a3", "patch": "@@ -10,8 +10,6 @@\n \n #![feature(associated_consts)]\n \n-use std::marker::MarkerTrait;\n-\n struct Foo;\n \n enum Bar {\n@@ -24,7 +22,7 @@ impl Foo {\n     const MYBAR: Bar = Bar::Var2;\n }\n \n-trait HasBar: MarkerTrait {\n+trait HasBar {\n     const THEBAR: Bar;\n }\n "}, {"sha": "0846ad9a571b34a9106ef35261ba2c0bb6a31cb0", "filename": "src/test/run-pass/associated-const-overwrite-default.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c0ac6d5ef8aed2cbe0cc687d5e7f8a8c04961a3/src%2Ftest%2Frun-pass%2Fassociated-const-overwrite-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0ac6d5ef8aed2cbe0cc687d5e7f8a8c04961a3/src%2Ftest%2Frun-pass%2Fassociated-const-overwrite-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-const-overwrite-default.rs?ref=4c0ac6d5ef8aed2cbe0cc687d5e7f8a8c04961a3", "patch": "@@ -10,9 +10,7 @@\n \n #![feature(associated_consts)]\n \n-use std::marker::MarkerTrait;\n-\n-trait Foo: MarkerTrait {\n+trait Foo {\n     const ID: i32 = 2;\n }\n "}, {"sha": "b1d071799e1a8b3e5db41598a34e2336ddce1efb", "filename": "src/test/run-pass/associated-const-public-impl.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c0ac6d5ef8aed2cbe0cc687d5e7f8a8c04961a3/src%2Ftest%2Frun-pass%2Fassociated-const-public-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0ac6d5ef8aed2cbe0cc687d5e7f8a8c04961a3/src%2Ftest%2Frun-pass%2Fassociated-const-public-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-const-public-impl.rs?ref=4c0ac6d5ef8aed2cbe0cc687d5e7f8a8c04961a3", "patch": "@@ -10,8 +10,6 @@\n \n #![feature(associated_consts)]\n \n-use std::marker::MarkerTrait;\n-\n mod bar1 {\n     pub use self::bar2::Foo;\n     mod bar2 {"}, {"sha": "98b7164ab74ad142846e20d56c42f71eb2a293bf", "filename": "src/test/run-pass/associated-const-resolution-order.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c0ac6d5ef8aed2cbe0cc687d5e7f8a8c04961a3/src%2Ftest%2Frun-pass%2Fassociated-const-resolution-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0ac6d5ef8aed2cbe0cc687d5e7f8a8c04961a3/src%2Ftest%2Frun-pass%2Fassociated-const-resolution-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-const-resolution-order.rs?ref=4c0ac6d5ef8aed2cbe0cc687d5e7f8a8c04961a3", "patch": "@@ -10,15 +10,13 @@\n \n #![feature(associated_consts)]\n \n-use std::marker::MarkerTrait;\n-\n struct MyType;\n \n impl MyType {\n     const IMPL_IS_INHERENT: bool = true;\n }\n \n-trait MyTrait: MarkerTrait {\n+trait MyTrait {\n     const IMPL_IS_INHERENT: bool;\n     const IMPL_IS_ON_TRAIT: bool;\n }"}, {"sha": "d3add976b5af871202d780e29b1f78f45aecb35d", "filename": "src/test/run-pass/associated-const-self-type.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c0ac6d5ef8aed2cbe0cc687d5e7f8a8c04961a3/src%2Ftest%2Frun-pass%2Fassociated-const-self-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0ac6d5ef8aed2cbe0cc687d5e7f8a8c04961a3/src%2Ftest%2Frun-pass%2Fassociated-const-self-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-const-self-type.rs?ref=4c0ac6d5ef8aed2cbe0cc687d5e7f8a8c04961a3", "patch": "@@ -10,9 +10,7 @@\n \n #![feature(associated_consts)]\n \n-use std::marker::MarkerTrait;\n-\n-trait MyInt: MarkerTrait {\n+trait MyInt {\n     const ONE: Self;\n }\n "}, {"sha": "aa3e14a939784cee9620f6f20dd19937a6c76a30", "filename": "src/test/run-pass/associated-const-ufcs-infer-trait.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c0ac6d5ef8aed2cbe0cc687d5e7f8a8c04961a3/src%2Ftest%2Frun-pass%2Fassociated-const-ufcs-infer-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0ac6d5ef8aed2cbe0cc687d5e7f8a8c04961a3/src%2Ftest%2Frun-pass%2Fassociated-const-ufcs-infer-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-const-ufcs-infer-trait.rs?ref=4c0ac6d5ef8aed2cbe0cc687d5e7f8a8c04961a3", "patch": "@@ -10,9 +10,7 @@\n \n #![feature(associated_consts)]\n \n-use std::marker::MarkerTrait;\n-\n-trait Foo: MarkerTrait {\n+trait Foo {\n     const ID: i32;\n }\n "}, {"sha": "5813d86742532b7943148f4a0a5d9fdb26ab5db7", "filename": "src/test/run-pass/associated-const-use-default.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c0ac6d5ef8aed2cbe0cc687d5e7f8a8c04961a3/src%2Ftest%2Frun-pass%2Fassociated-const-use-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0ac6d5ef8aed2cbe0cc687d5e7f8a8c04961a3/src%2Ftest%2Frun-pass%2Fassociated-const-use-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-const-use-default.rs?ref=4c0ac6d5ef8aed2cbe0cc687d5e7f8a8c04961a3", "patch": "@@ -10,9 +10,7 @@\n \n #![feature(associated_consts)]\n \n-use std::marker::MarkerTrait;\n-\n-trait Foo: MarkerTrait {\n+trait Foo {\n     const ID: i32 = 1;\n }\n "}, {"sha": "62658470baa525631c3429f8b703a5b2d85b1492", "filename": "src/test/run-pass/associated-const-use-impl-of-same-trait.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c0ac6d5ef8aed2cbe0cc687d5e7f8a8c04961a3/src%2Ftest%2Frun-pass%2Fassociated-const-use-impl-of-same-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0ac6d5ef8aed2cbe0cc687d5e7f8a8c04961a3/src%2Ftest%2Frun-pass%2Fassociated-const-use-impl-of-same-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-const-use-impl-of-same-trait.rs?ref=4c0ac6d5ef8aed2cbe0cc687d5e7f8a8c04961a3", "patch": "@@ -10,13 +10,11 @@\n \n #![feature(associated_consts)]\n \n-use std::marker::MarkerTrait;\n-\n // The main purpose of this test is to ensure that different impls of the same\n // trait can refer to each other without setting off the static recursion check\n // (as long as there's no actual recursion).\n \n-trait Foo: MarkerTrait {\n+trait Foo {\n     const BAR: u32;\n }\n "}, {"sha": "d9065445009312697a80bb44e877efe45d726d21", "filename": "src/test/run-pass/associated-const.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c0ac6d5ef8aed2cbe0cc687d5e7f8a8c04961a3/src%2Ftest%2Frun-pass%2Fassociated-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0ac6d5ef8aed2cbe0cc687d5e7f8a8c04961a3/src%2Ftest%2Frun-pass%2Fassociated-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-const.rs?ref=4c0ac6d5ef8aed2cbe0cc687d5e7f8a8c04961a3", "patch": "@@ -10,9 +10,7 @@\n \n #![feature(associated_consts)]\n \n-use std::marker::MarkerTrait;\n-\n-trait Foo: MarkerTrait {\n+trait Foo {\n     const ID: i32;\n }\n "}]}