{"sha": "a71ebf9066671de3c86e2419e6032cf4e67e31e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3MWViZjkwNjY2NzFkZTNjODZlMjQxOWU2MDMyY2Y0ZTY3ZTMxZTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-03T15:22:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-03T15:22:09Z"}, "message": "Auto merge of #880 - RalfJung:miri-rustc, r=RalfJung\n\nannotate some unwraps with better messages", "tree": {"sha": "5b60b818abd199fcaea60362596cf6c73def2891", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b60b818abd199fcaea60362596cf6c73def2891"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a71ebf9066671de3c86e2419e6032cf4e67e31e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a71ebf9066671de3c86e2419e6032cf4e67e31e4", "html_url": "https://github.com/rust-lang/rust/commit/a71ebf9066671de3c86e2419e6032cf4e67e31e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a71ebf9066671de3c86e2419e6032cf4e67e31e4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d3fdeeed713a36be3b858c423ee17f9c053303d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d3fdeeed713a36be3b858c423ee17f9c053303d", "html_url": "https://github.com/rust-lang/rust/commit/9d3fdeeed713a36be3b858c423ee17f9c053303d"}, {"sha": "10f46336af2dea648c3b2ecf999d789d33bbfdd0", "url": "https://api.github.com/repos/rust-lang/rust/commits/10f46336af2dea648c3b2ecf999d789d33bbfdd0", "html_url": "https://github.com/rust-lang/rust/commit/10f46336af2dea648c3b2ecf999d789d33bbfdd0"}], "stats": {"total": 32, "additions": 23, "deletions": 9}, "files": [{"sha": "1c0d23336e61a154cb917c8bd7d18fffcdb65b12", "filename": "src/bin/cargo-miri.rs", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a71ebf9066671de3c86e2419e6032cf4e67e31e4/src%2Fbin%2Fcargo-miri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a71ebf9066671de3c86e2419e6032cf4e67e31e4/src%2Fbin%2Fcargo-miri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-miri.rs?ref=a71ebf9066671de3c86e2419e6032cf4e67e31e4", "patch": "@@ -249,15 +249,20 @@ fn setup(ask_user: bool) {\n             println!(\"Installing xargo: `cargo install xargo -f`\");\n         }\n \n-        if !cargo().args(&[\"install\", \"xargo\", \"-f\"]).status().unwrap().success() {\n+        if !cargo().args(&[\"install\", \"xargo\", \"-f\"]).status()\n+            .expect(\"failed to install xargo\")\n+            .success()\n+        {\n             show_error(format!(\"Failed to install xargo\"));\n         }\n     }\n \n     // Then, unless `XARGO_RUST_SRC` is set, we also need rust-src.\n     // Let's see if it is already installed.\n     if std::env::var(\"XARGO_RUST_SRC\").is_err() {\n-        let sysroot = Command::new(\"rustc\").args(&[\"--print\", \"sysroot\"]).output().unwrap().stdout;\n+        let sysroot = Command::new(\"rustc\").args(&[\"--print\", \"sysroot\"]).output()\n+            .expect(\"failed to get rustc sysroot\")\n+            .stdout;\n         let sysroot = std::str::from_utf8(&sysroot).unwrap();\n         let src = Path::new(sysroot.trim_end_matches('\\n')).join(\"lib\").join(\"rustlib\").join(\"src\");\n         if !src.exists() {\n@@ -266,7 +271,10 @@ fn setup(ask_user: bool) {\n             } else {\n                 println!(\"Installing rust-src component: `rustup component add rust-src`\");\n             }\n-            if !Command::new(\"rustup\").args(&[\"component\", \"add\", \"rust-src\"]).status().unwrap().success() {\n+            if !Command::new(\"rustup\").args(&[\"component\", \"add\", \"rust-src\"]).status()\n+                .expect(\"failed to install rust-src component\")\n+                .success()\n+            {\n                 show_error(format!(\"Failed to install rust-src component\"));\n             }\n         }\n@@ -302,18 +310,24 @@ version = \"0.0.0\"\n path = \"lib.rs\"\n         \"#).unwrap();\n     File::create(dir.join(\"lib.rs\")).unwrap();\n-    // Run xargo.\n+    // Prepare xargo invocation.\n     let target = get_arg_flag_value(\"--target\");\n     let print_env = !ask_user && has_arg_flag(\"--env\"); // whether we just print the necessary environment variable\n     let mut command = xargo();\n-    command.arg(\"build\").arg(\"-q\")\n-        .current_dir(&dir)\n-        .env(\"RUSTFLAGS\", miri::miri_default_args().join(\" \"))\n-        .env(\"XARGO_HOME\", dir.to_str().unwrap());\n+    command.arg(\"build\").arg(\"-q\");\n+    command.current_dir(&dir);\n+    command.env(\"RUSTFLAGS\", miri::miri_default_args().join(\" \"));\n+    command.env(\"XARGO_HOME\", dir.to_str().unwrap());\n+    // In bootstrap, make sure we don't get debug assertons into our libstd.\n+    command.env(\"RUSTC_DEBUG_ASSERTIONS\", \"false\");\n+    // Handle target flag.\n     if let Some(ref target) = target {\n         command.arg(\"--target\").arg(&target);\n     }\n-    if !command.status().unwrap().success()\n+    // Finally run it!\n+    if !command.status()\n+        .expect(\"failed to run xargo\")\n+        .success()\n     {\n         show_error(format!(\"Failed to run xargo\"));\n     }"}]}