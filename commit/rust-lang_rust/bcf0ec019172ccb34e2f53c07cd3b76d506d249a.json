{"sha": "bcf0ec019172ccb34e2f53c07cd3b76d506d249a", "node_id": "C_kwDOAAsO6NoAKGJjZjBlYzAxOTE3MmNjYjM0ZTJmNTNjMDdjZDNiNzZkNTA2ZDI0OWE", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-02-16T00:47:50Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-02-17T11:24:31Z"}, "message": "Replace `mk_foo` calls with `infer_foo` where possible.\n\nThere are several `mk_foo`/`intern_foo` pairs, where the former takes an\niterator and the latter takes a slice. (This naming convention is bad,\nbut that's a fix for another PR.)\n\nThis commit changes several `mk_foo` occurrences into `intern_foo`,\navoiding the need for some `.iter()`/`.into_iter()` calls. Affected\ncases:\n- mk_type_list\n- mk_tup\n- mk_substs\n- mk_const_list", "tree": {"sha": "c4c34ce6df6c6c92827b71c0cac8e72756881229", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4c34ce6df6c6c92827b71c0cac8e72756881229"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcf0ec019172ccb34e2f53c07cd3b76d506d249a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcf0ec019172ccb34e2f53c07cd3b76d506d249a", "html_url": "https://github.com/rust-lang/rust/commit/bcf0ec019172ccb34e2f53c07cd3b76d506d249a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcf0ec019172ccb34e2f53c07cd3b76d506d249a/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9556b56dbdbd4238f0051e7230004b0aa488fa14", "url": "https://api.github.com/repos/rust-lang/rust/commits/9556b56dbdbd4238f0051e7230004b0aa488fa14", "html_url": "https://github.com/rust-lang/rust/commit/9556b56dbdbd4238f0051e7230004b0aa488fa14"}], "stats": {"total": 79, "additions": 37, "deletions": 42}, "files": [{"sha": "004b945eada119de86bf3c72770ffe5da0db4a31", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcf0ec019172ccb34e2f53c07cd3b76d506d249a/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf0ec019172ccb34e2f53c07cd3b76d506d249a/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=bcf0ec019172ccb34e2f53c07cd3b76d506d249a", "patch": "@@ -2589,7 +2589,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             DefKind::InlineConst => substs.as_inline_const().parent_substs(),\n             other => bug!(\"unexpected item {:?}\", other),\n         };\n-        let parent_substs = tcx.mk_substs(parent_substs.iter());\n+        let parent_substs = tcx.intern_substs(parent_substs);\n \n         assert_eq!(typeck_root_substs.len(), parent_substs.len());\n         if let Err(_) = self.eq_substs("}, {"sha": "b4a2537b5ea93bcee6e177177fb1160f4a48521f", "filename": "compiler/rustc_codegen_cranelift/src/codegen_i128.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bcf0ec019172ccb34e2f53c07cd3b76d506d249a/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcodegen_i128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf0ec019172ccb34e2f53c07cd3b76d506d249a/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcodegen_i128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcodegen_i128.rs?ref=bcf0ec019172ccb34e2f53c07cd3b76d506d249a", "patch": "@@ -56,7 +56,7 @@ pub(crate) fn maybe_codegen<'tcx>(\n                     Some(fx.easy_call(\"__multi3\", &[lhs, rhs], val_ty))\n                 }\n             } else {\n-                let out_ty = fx.tcx.mk_tup([lhs.layout().ty, fx.tcx.types.bool].iter());\n+                let out_ty = fx.tcx.intern_tup(&[lhs.layout().ty, fx.tcx.types.bool]);\n                 let oflow = CPlace::new_stack_slot(fx, fx.layout_of(fx.tcx.types.i32));\n                 let lhs = lhs.load_scalar(fx);\n                 let rhs = rhs.load_scalar(fx);\n@@ -78,7 +78,7 @@ pub(crate) fn maybe_codegen<'tcx>(\n         }\n         BinOp::Add | BinOp::Sub | BinOp::Mul => {\n             assert!(checked);\n-            let out_ty = fx.tcx.mk_tup([lhs.layout().ty, fx.tcx.types.bool].iter());\n+            let out_ty = fx.tcx.intern_tup(&[lhs.layout().ty, fx.tcx.types.bool]);\n             let out_place = CPlace::new_stack_slot(fx, fx.layout_of(out_ty));\n             let (param_types, args) = if fx.tcx.sess.target.is_like_windows {\n                 let (lhs_ptr, lhs_extra) = lhs.force_stack(fx);"}, {"sha": "cbac2e667652b9a66f09735228be2bd253c5f695", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/llvm_x86.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcf0ec019172ccb34e2f53c07cd3b76d506d249a/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fllvm_x86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf0ec019172ccb34e2f53c07cd3b76d506d249a/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fllvm_x86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fllvm_x86.rs?ref=bcf0ec019172ccb34e2f53c07cd3b76d506d249a", "patch": "@@ -191,7 +191,7 @@ fn llvm_add_sub<'tcx>(\n     // carry0 | carry1 -> carry or borrow respectively\n     let cb_out = fx.bcx.ins().bor(cb0, cb1);\n \n-    let layout = fx.layout_of(fx.tcx.mk_tup([fx.tcx.types.u8, fx.tcx.types.u64].iter()));\n+    let layout = fx.layout_of(fx.tcx.intern_tup(&[fx.tcx.types.u8, fx.tcx.types.u64]));\n     let val = CValue::by_val_pair(cb_out, c, layout);\n     ret.write_cvalue(fx, val);\n }"}, {"sha": "26327107df4c5069f3acffb50a17d3b930e84578", "filename": "compiler/rustc_codegen_cranelift/src/main_shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcf0ec019172ccb34e2f53c07cd3b76d506d249a/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmain_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf0ec019172ccb34e2f53c07cd3b76d506d249a/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmain_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmain_shim.rs?ref=bcf0ec019172ccb34e2f53c07cd3b76d506d249a", "patch": "@@ -119,7 +119,7 @@ pub(crate) fn maybe_create_entry_wrapper(\n                     tcx,\n                     ParamEnv::reveal_all(),\n                     report.def_id,\n-                    tcx.mk_substs([GenericArg::from(main_ret_ty)].iter()),\n+                    tcx.intern_substs(&[GenericArg::from(main_ret_ty)]),\n                 )\n                 .unwrap()\n                 .unwrap()"}, {"sha": "05905a7bcdf30bb2cfbbfb4542ad2c9bf87bd548", "filename": "compiler/rustc_codegen_cranelift/src/num.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcf0ec019172ccb34e2f53c07cd3b76d506d249a/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf0ec019172ccb34e2f53c07cd3b76d506d249a/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fnum.rs?ref=bcf0ec019172ccb34e2f53c07cd3b76d506d249a", "patch": "@@ -289,7 +289,7 @@ pub(crate) fn codegen_checked_int_binop<'tcx>(\n         _ => bug!(\"binop {:?} on checked int/uint lhs: {:?} rhs: {:?}\", bin_op, in_lhs, in_rhs),\n     };\n \n-    let out_layout = fx.layout_of(fx.tcx.mk_tup([in_lhs.layout().ty, fx.tcx.types.bool].iter()));\n+    let out_layout = fx.layout_of(fx.tcx.intern_tup(&[in_lhs.layout().ty, fx.tcx.types.bool]));\n     CValue::by_val_pair(res, has_overflow, out_layout)\n }\n "}, {"sha": "f6a3937870edd3b32cde617c922b6dc2e6fa1763", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics/caller_location.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcf0ec019172ccb34e2f53c07cd3b76d506d249a/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf0ec019172ccb34e2f53c07cd3b76d506d249a/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Fcaller_location.rs?ref=bcf0ec019172ccb34e2f53c07cd3b76d506d249a", "patch": "@@ -96,7 +96,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         let loc_ty = self\n             .tcx\n             .type_of(self.tcx.require_lang_item(LangItem::PanicLocation, None))\n-            .subst(*self.tcx, self.tcx.mk_substs([self.tcx.lifetimes.re_erased.into()].iter()));\n+            .subst(*self.tcx, self.tcx.intern_substs(&[self.tcx.lifetimes.re_erased.into()]));\n         let loc_layout = self.layout_of(loc_ty).unwrap();\n         let location = self.allocate(loc_layout, MemoryKind::CallerLocation).unwrap();\n "}, {"sha": "51700cf846ba82d6c2398a54612e8ae2f99d7444", "filename": "compiler/rustc_hir_analysis/src/check/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcf0ec019172ccb34e2f53c07cd3b76d506d249a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf0ec019172ccb34e2f53c07cd3b76d506d249a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs?ref=bcf0ec019172ccb34e2f53c07cd3b76d506d249a", "patch": "@@ -378,7 +378,7 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n                 (\n                     1,\n                     vec![tcx.mk_imm_ref(tcx.mk_re_late_bound(ty::INNERMOST, br), param(0))],\n-                    tcx.mk_projection(discriminant_def_id, tcx.mk_substs([param(0).into()].iter())),\n+                    tcx.mk_projection(discriminant_def_id, tcx.intern_substs(&[param(0).into()])),\n                 )\n             }\n "}, {"sha": "7c8abb4186f116ea2d43c7aabc8351c2d66673a9", "filename": "compiler/rustc_hir_typeck/src/upvar.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bcf0ec019172ccb34e2f53c07cd3b76d506d249a/compiler%2Frustc_hir_typeck%2Fsrc%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf0ec019172ccb34e2f53c07cd3b76d506d249a/compiler%2Frustc_hir_typeck%2Fsrc%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fupvar.rs?ref=bcf0ec019172ccb34e2f53c07cd3b76d506d249a", "patch": "@@ -301,7 +301,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         // Build a tuple (U0..Un) of the final upvar types U0..Un\n         // and unify the upvar tuple type in the closure with it:\n-        let final_tupled_upvars_type = self.tcx.mk_tup(final_upvar_tys.iter());\n+        let final_tupled_upvars_type = self.tcx.intern_tup(&final_upvar_tys);\n         self.demand_suptype(span, substs.tupled_upvars_ty(), final_tupled_upvars_type);\n \n         let fake_reads = delegate\n@@ -315,8 +315,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self.typeck_results.borrow_mut().closure_size_eval.insert(\n                 closure_def_id,\n                 ClosureSizeProfileData {\n-                    before_feature_tys: self.tcx.mk_tup(before_feature_tys.into_iter()),\n-                    after_feature_tys: self.tcx.mk_tup(after_feature_tys.into_iter()),\n+                    before_feature_tys: self.tcx.intern_tup(&before_feature_tys),\n+                    after_feature_tys: self.tcx.intern_tup(&after_feature_tys),\n                 },\n             );\n         }"}, {"sha": "d823989bb02b8c77b60a106d255eed727a51290b", "filename": "compiler/rustc_metadata/src/native_libs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcf0ec019172ccb34e2f53c07cd3b76d506d249a/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf0ec019172ccb34e2f53c07cd3b76d506d249a/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs?ref=bcf0ec019172ccb34e2f53c07cd3b76d506d249a", "patch": "@@ -502,7 +502,7 @@ impl<'tcx> Collector<'tcx> {\n                 .subst_identity()\n                 .fn_sig(self.tcx)\n                 .inputs()\n-                .map_bound(|slice| self.tcx.mk_type_list(slice.iter())),\n+                .map_bound(|slice| self.tcx.intern_type_list(slice)),\n         );\n \n         argument_types"}, {"sha": "46184cddd51f504c07528489a442287dd5f045ac", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bcf0ec019172ccb34e2f53c07cd3b76d506d249a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf0ec019172ccb34e2f53c07cd3b76d506d249a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=bcf0ec019172ccb34e2f53c07cd3b76d506d249a", "patch": "@@ -2525,14 +2525,12 @@ impl<'tcx> ConstantKind<'tcx> {\n         }\n \n         let hir_id = tcx.hir().local_def_id_to_hir_id(def.did);\n-        let parent_substs = if let Some(parent_hir_id) = tcx.hir().opt_parent_id(hir_id) {\n-            if let Some(parent_did) = parent_hir_id.as_owner() {\n-                InternalSubsts::identity_for_item(tcx, parent_did.to_def_id())\n-            } else {\n-                tcx.mk_substs(Vec::<GenericArg<'tcx>>::new().into_iter())\n-            }\n+        let parent_substs = if let Some(parent_hir_id) = tcx.hir().opt_parent_id(hir_id)\n+            && let Some(parent_did) = parent_hir_id.as_owner()\n+        {\n+            InternalSubsts::identity_for_item(tcx, parent_did.to_def_id())\n         } else {\n-            tcx.mk_substs(Vec::<GenericArg<'tcx>>::new().into_iter())\n+            tcx.intern_substs(&[])\n         };\n         debug!(?parent_substs);\n "}, {"sha": "79879ea20ab8c01f6be479981227170c2b1a4309", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcf0ec019172ccb34e2f53c07cd3b76d506d249a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf0ec019172ccb34e2f53c07cd3b76d506d249a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=bcf0ec019172ccb34e2f53c07cd3b76d506d249a", "patch": "@@ -1190,7 +1190,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.mk_imm_ref(\n             self.lifetimes.re_static,\n             self.type_of(self.require_lang_item(LangItem::PanicLocation, None))\n-                .subst(self, self.mk_substs([self.lifetimes.re_static.into()].iter())),\n+                .subst(self, self.intern_substs(&[self.lifetimes.re_static.into()])),\n         )\n     }\n "}, {"sha": "3d0f9a5053cb31fea3796d3feabc202315025f31", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcf0ec019172ccb34e2f53c07cd3b76d506d249a/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf0ec019172ccb34e2f53c07cd3b76d506d249a/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=bcf0ec019172ccb34e2f53c07cd3b76d506d249a", "patch": "@@ -686,7 +686,7 @@ where\n                         Increase this counter if you tried to implement this but\n                         failed to do it without duplicating a lot of code from\n                         other places in the compiler: 2\n-                        tcx.mk_tup(&[\n+                        tcx.intern_tup(&[\n                             tcx.mk_array(tcx.types.usize, 3),\n                             tcx.mk_array(Option<fn()>),\n                         ])"}, {"sha": "2ba25e8bfadc9223a3db780e2efc33ef798601ad", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcf0ec019172ccb34e2f53c07cd3b76d506d249a/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf0ec019172ccb34e2f53c07cd3b76d506d249a/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=bcf0ec019172ccb34e2f53c07cd3b76d506d249a", "patch": "@@ -673,7 +673,7 @@ pub fn super_relate_consts<'tcx, R: TypeRelation<'tcx>>(\n                     for (a_arg, b_arg) in aa.iter().zip(ba.iter()) {\n                         related_args.push(r.consts(a_arg, b_arg)?);\n                     }\n-                    let related_args = tcx.mk_const_list(related_args.iter());\n+                    let related_args = tcx.intern_const_list(&related_args);\n                     Expr::FunctionCall(func, related_args)\n                 }\n                 _ => return Err(TypeError::ConstMismatch(expected_found(r, a, b))),"}, {"sha": "9c1a6f716d021b60100b054dd28ba41e93fae4df", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcf0ec019172ccb34e2f53c07cd3b76d506d249a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf0ec019172ccb34e2f53c07cd3b76d506d249a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=bcf0ec019172ccb34e2f53c07cd3b76d506d249a", "patch": "@@ -418,7 +418,7 @@ impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for &'tcx ty::List<ty::PolyExistential\n \n impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for &'tcx ty::List<ty::Const<'tcx>> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n-        ty::util::fold_list(self, folder, |tcx, v| tcx.mk_const_list(v.iter()))\n+        ty::util::fold_list(self, folder, |tcx, v| tcx.intern_const_list(v))\n     }\n }\n "}, {"sha": "682ad081f5cf3fd715a1016c2985d67980aa858c", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcf0ec019172ccb34e2f53c07cd3b76d506d249a/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf0ec019172ccb34e2f53c07cd3b76d506d249a/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=bcf0ec019172ccb34e2f53c07cd3b76d506d249a", "patch": "@@ -597,7 +597,7 @@ fn build_call_shim<'tcx>(\n         let untuple_args = sig.inputs();\n \n         // Create substitutions for the `Self` and `Args` generic parameters of the shim body.\n-        let arg_tup = tcx.mk_tup(untuple_args.iter());\n+        let arg_tup = tcx.intern_tup(untuple_args);\n \n         (Some([ty.into(), arg_tup.into()]), Some(untuple_args))\n     } else {"}, {"sha": "fb8695e7eafaad2d89715a5b8da8cf454e8eb809", "filename": "compiler/rustc_symbol_mangling/src/typeid/typeid_itanium_cxx_abi.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bcf0ec019172ccb34e2f53c07cd3b76d506d249a/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf0ec019172ccb34e2f53c07cd3b76d506d249a/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs?ref=bcf0ec019172ccb34e2f53c07cd3b76d506d249a", "patch": "@@ -813,21 +813,18 @@ fn transform_substs<'tcx>(\n     substs: SubstsRef<'tcx>,\n     options: TransformTyOptions,\n ) -> SubstsRef<'tcx> {\n-    let substs: Vec<GenericArg<'tcx>> = substs\n-        .iter()\n-        .map(|subst| {\n-            if let GenericArgKind::Type(ty) = subst.unpack() {\n-                if is_c_void_ty(tcx, ty) {\n-                    tcx.mk_unit().into()\n-                } else {\n-                    transform_ty(tcx, ty, options).into()\n-                }\n+    let substs = substs.iter().map(|subst| {\n+        if let GenericArgKind::Type(ty) = subst.unpack() {\n+            if is_c_void_ty(tcx, ty) {\n+                tcx.mk_unit().into()\n             } else {\n-                subst\n+                transform_ty(tcx, ty, options).into()\n             }\n-        })\n-        .collect();\n-    tcx.mk_substs(substs.iter())\n+        } else {\n+            subst\n+        }\n+    });\n+    tcx.mk_substs(substs)\n }\n \n /// Returns a type metadata identifier for the specified FnAbi using the Itanium C++ ABI with vendor"}, {"sha": "3662463178f8502049513902a1c6b12e274dc59e", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals/structural_traits.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bcf0ec019172ccb34e2f53c07cd3b76d506d249a/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf0ec019172ccb34e2f53c07cd3b76d506d249a/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs?ref=bcf0ec019172ccb34e2f53c07cd3b76d506d249a", "patch": "@@ -191,10 +191,10 @@ pub(crate) fn extract_tupled_inputs_and_output_from_callable<'tcx>(\n         ty::FnDef(def_id, substs) => Ok(Some(\n             tcx.fn_sig(def_id)\n                 .subst(tcx, substs)\n-                .map_bound(|sig| (tcx.mk_tup(sig.inputs().iter()), sig.output())),\n+                .map_bound(|sig| (tcx.intern_tup(sig.inputs()), sig.output())),\n         )),\n         ty::FnPtr(sig) => {\n-            Ok(Some(sig.map_bound(|sig| (tcx.mk_tup(sig.inputs().iter()), sig.output()))))\n+            Ok(Some(sig.map_bound(|sig| (tcx.intern_tup(sig.inputs()), sig.output()))))\n         }\n         ty::Closure(_, substs) => {\n             let closure_substs = substs.as_closure();"}, {"sha": "9143d28b8eedeed61fac820b5700ba8042438369", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcf0ec019172ccb34e2f53c07cd3b76d506d249a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf0ec019172ccb34e2f53c07cd3b76d506d249a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=bcf0ec019172ccb34e2f53c07cd3b76d506d249a", "patch": "@@ -1923,7 +1923,7 @@ fn confirm_builtin_candidate<'cx, 'tcx>(\n ) -> Progress<'tcx> {\n     let tcx = selcx.tcx();\n     let self_ty = obligation.predicate.self_ty();\n-    let substs = tcx.mk_substs([self_ty.into()].iter());\n+    let substs = tcx.intern_substs(&[self_ty.into()]);\n     let lang_items = tcx.lang_items();\n     let item_def_id = obligation.predicate.def_id;\n     let trait_def_id = tcx.trait_of_item(item_def_id).unwrap();"}, {"sha": "852156c24f42ab249fa3b320242fa1e61c2e4442", "filename": "compiler/rustc_ty_utils/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcf0ec019172ccb34e2f53c07cd3b76d506d249a/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf0ec019172ccb34e2f53c07cd3b76d506d249a/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs?ref=bcf0ec019172ccb34e2f53c07cd3b76d506d249a", "patch": "@@ -144,7 +144,7 @@ fn recurse_build<'tcx>(\n             for &id in args.iter() {\n                 new_args.push(recurse_build(tcx, body, id, root_span)?);\n             }\n-            let new_args = tcx.mk_const_list(new_args.iter());\n+            let new_args = tcx.intern_const_list(&new_args);\n             tcx.mk_const(Expr::FunctionCall(fun, new_args), node.ty)\n         }\n         &ExprKind::Binary { op, lhs, rhs } if check_binop(op) => {"}, {"sha": "8ddbacc3d7ad4bb7ce2a76edd3e00404746b5034", "filename": "src/tools/clippy/clippy_lints/src/methods/needless_collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcf0ec019172ccb34e2f53c07cd3b76d506d249a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf0ec019172ccb34e2f53c07cd3b76d506d249a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fneedless_collect.rs?ref=bcf0ec019172ccb34e2f53c07cd3b76d506d249a", "patch": "@@ -173,7 +173,7 @@ fn is_contains_sig(cx: &LateContext<'_>, call_id: HirId, iter_expr: &Expr<'_>) -\n         && let Some(iter_item) = cx.tcx\n             .associated_items(iter_trait)\n             .find_by_name_and_kind(cx.tcx, Ident::with_dummy_span(Symbol::intern(\"Item\")), AssocKind::Type, iter_trait)\n-        && let substs = cx.tcx.mk_substs([GenericArg::from(typeck.expr_ty_adjusted(iter_expr))].into_iter())\n+        && let substs = cx.tcx.intern_substs(&[GenericArg::from(typeck.expr_ty_adjusted(iter_expr))])\n         && let proj_ty = cx.tcx.mk_projection(iter_item.def_id, substs)\n         && let Ok(item_ty) = cx.tcx.try_normalize_erasing_regions(cx.param_env, proj_ty)\n     {"}]}