{"sha": "43e758798c34581b313fae54d28e95fca628b167", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzZTc1ODc5OGMzNDU4MWIzMTNmYWU1NGQyOGU5NWZjYTYyOGIxNjc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-08-27T19:13:59Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-07T21:08:22Z"}, "message": "avoid propagating outlives obligations on locals if we can", "tree": {"sha": "13edf5f8c013226dfcd346f7b4110dd6c0f24f23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13edf5f8c013226dfcd346f7b4110dd6c0f24f23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43e758798c34581b313fae54d28e95fca628b167", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43e758798c34581b313fae54d28e95fca628b167", "html_url": "https://github.com/rust-lang/rust/commit/43e758798c34581b313fae54d28e95fca628b167", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43e758798c34581b313fae54d28e95fca628b167/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db169e53e5c88484718c1be2be6dcb7dab4a278f", "url": "https://api.github.com/repos/rust-lang/rust/commits/db169e53e5c88484718c1be2be6dcb7dab4a278f", "html_url": "https://github.com/rust-lang/rust/commit/db169e53e5c88484718c1be2be6dcb7dab4a278f"}], "stats": {"total": 63, "additions": 63, "deletions": 0}, "files": [{"sha": "cb15c88bb3e6fa3b878052935fbee39a5f5a7634", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/43e758798c34581b313fae54d28e95fca628b167/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e758798c34581b313fae54d28e95fca628b167/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=43e758798c34581b313fae54d28e95fca628b167", "patch": "@@ -701,6 +701,23 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         // `ClosureOutlivesRequirement`.\n         let r_scc = self.constraint_sccs.scc(*lower_bound);\n         for ur in self.scc_values.universal_regions_outlived_by(r_scc) {\n+            // Check whether we can already prove that the \"subject\" outlives `ur`.\n+            // If so, we don't have to propagate this requirement to our caller.\n+            //\n+            // To continue the example from the function, if we are trying to promote\n+            // a requirement that `T: 'X`, and we know that `'X = '1 + '2` (i.e., the union\n+            // `'1` and `'2`), then in this loop `ur` will be `'1` (and `'2`). So here\n+            // we check whether `T: '1` is something we *can* prove. If so, no need\n+            // to propagate that requirement.\n+            //\n+            // This is needed because -- particularly in the case\n+            // where `ur` is a local bound -- we are sometimes in a\n+            // position to prove things that our caller cannot.  See\n+            // #53570 for an example.\n+            if self.eval_region_test(mir, ur, &type_test.test) {\n+                continue;\n+            }\n+\n             debug!(\"try_promote_type_test: ur={:?}\", ur);\n \n             let non_local_ub = self.universal_region_relations.non_local_upper_bound(ur);"}, {"sha": "9617e40ec39d97232eca3503a5954e5dc8046214", "filename": "src/test/ui/nll/issue-53570.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/43e758798c34581b313fae54d28e95fca628b167/src%2Ftest%2Fui%2Fnll%2Fissue-53570.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43e758798c34581b313fae54d28e95fca628b167/src%2Ftest%2Fui%2Fnll%2Fissue-53570.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-53570.rs?ref=43e758798c34581b313fae54d28e95fca628b167", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for #53570. Here, we need to propagate that `T: 'a`\n+// but in some versions of NLL we were propagating a stronger\n+// requirement that `T: 'static`. This arose because we actually had\n+// to propagate both that `T: 'a` but also `T: 'b` where `'b` is the\n+// higher-ranked lifetime that appears in the type of the closure\n+// parameter `x` -- since `'b` cannot be expressed in the caller's\n+// space, that got promoted th `'static`.\n+//\n+// compile-pass\n+\n+#![feature(nll)]\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+\n+use std::cell::{RefCell, Ref};\n+\n+trait AnyVec<'a> {\n+}\n+\n+trait GenericVec<T> {\n+    fn unwrap<'a, 'b>(vec: &'b AnyVec<'a>) -> &'b [T] where T: 'a;\n+}\n+\n+struct Scratchpad<'a> {\n+    buffers: RefCell<Box<AnyVec<'a>>>,\n+}\n+\n+impl<'a> Scratchpad<'a> {\n+    fn get<T: GenericVec<T>>(&self) -> Ref<[T]>\n+    where T: 'a\n+    {\n+        Ref::map(self.buffers.borrow(), |x| T::unwrap(x.as_ref()))\n+    }\n+}\n+\n+fn main() { }"}]}