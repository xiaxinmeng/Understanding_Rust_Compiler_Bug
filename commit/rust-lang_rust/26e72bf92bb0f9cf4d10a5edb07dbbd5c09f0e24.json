{"sha": "26e72bf92bb0f9cf4d10a5edb07dbbd5c09f0e24", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2ZTcyYmY5MmJiMGY5Y2Y0ZDEwYTVlZGIwN2RiYmQ1YzA5ZjBlMjQ=", "commit": {"author": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2013-01-27T02:20:15Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-02-03T23:37:24Z"}, "message": "Converted libcore/int-template.rs to the new string functions.\n\n- Moved ToStr implementation of integers to int-template.rs.\n- Marked the `str()` function as deprecated.\n- Forwarded all conversion functions to `core::num::to_str_common()`\n  and `core::num::from_str_common()`.\n- Fixed most places in the codebase where `to_str()` is being used.\n- Added int-template to_str and from_str overflow tests.", "tree": {"sha": "501512047e5db7add6f1ac7ef005e3362e475bf0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/501512047e5db7add6f1ac7ef005e3362e475bf0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26e72bf92bb0f9cf4d10a5edb07dbbd5c09f0e24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26e72bf92bb0f9cf4d10a5edb07dbbd5c09f0e24", "html_url": "https://github.com/rust-lang/rust/commit/26e72bf92bb0f9cf4d10a5edb07dbbd5c09f0e24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26e72bf92bb0f9cf4d10a5edb07dbbd5c09f0e24/comments", "author": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b0335ec8e14ede924c45eac3b08c66191bfc04a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b0335ec8e14ede924c45eac3b08c66191bfc04a", "html_url": "https://github.com/rust-lang/rust/commit/5b0335ec8e14ede924c45eac3b08c66191bfc04a"}], "stats": {"total": 212, "additions": 133, "deletions": 79}, "files": [{"sha": "27e3b0d04ea055c7cfc8a0c5a6608a4d776c7ae5", "filename": "src/libcore/num/int-template.rs", "status": "modified", "additions": 126, "deletions": 52, "changes": 178, "blob_url": "https://github.com/rust-lang/rust/blob/26e72bf92bb0f9cf4d10a5edb07dbbd5c09f0e24/src%2Flibcore%2Fnum%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e72bf92bb0f9cf4d10a5edb07dbbd5c09f0e24/src%2Flibcore%2Fnum%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template.rs?ref=26e72bf92bb0f9cf4d10a5edb07dbbd5c09f0e24", "patch": "@@ -17,7 +17,9 @@ use T = self::inst::T;\n use char;\n use cmp::{Eq, Ord};\n use cmp;\n+use to_str::ToStr;\n use from_str::FromStr;\n+use num::{ToStrRadix, FromStrRadix};\n use num;\n use num::Num::from_int;\n use prelude::*;\n@@ -212,70 +214,87 @@ impl T: num::Round {\n     pure fn fract(&self) -> T { 0 }\n }\n \n-/**\n- * Parse a buffer of bytes\n- *\n- * # Arguments\n- *\n- * * buf - A byte buffer\n- * * radix - The base of the number\n- */\n-pub pure fn parse_bytes(buf: &[u8], radix: uint) -> Option<T> {\n-    if vec::len(buf) == 0u { return None; }\n-    let mut i = vec::len(buf) - 1u;\n-    let mut start = 0u;\n-    let mut power = 1 as T;\n-\n-    if buf[0] == ('-' as u8) {\n-        power = -1 as T;\n-        start = 1u;\n-    }\n-    let mut n = 0 as T;\n-    loop {\n-        match char::to_digit(buf[i] as char, radix) {\n-          Some(d) => n += (d as T) * power,\n-          None => return None\n-        }\n-        power *= radix as T;\n-        if i <= start { return Some(n); }\n-        i -= 1u;\n-    };\n+// String conversion functions and impl str -> num\n+\n+/// Parse a string as a number in base 10.\n+#[inline(always)]\n+pub pure fn from_str(s: &str) -> Option<T> {\n+    num::from_str_common(s, 10u, true, false, false,\n+                         num::ExpNone, false)\n }\n \n-/// Parse a string to an int\n+/// Parse a string as a number in the given base.\n #[inline(always)]\n-pub pure fn from_str(s: &str) -> Option<T>\n-{\n-    parse_bytes(str::to_bytes(s), 10u)\n+pub pure fn from_str_radix(s: &str, radix: uint) -> Option<T> {\n+    num::from_str_common(s, radix, true, false, false,\n+                         num::ExpNone, false)\n+}\n+\n+/// Parse a byte slice as a number in the given base.\n+#[inline(always)]\n+pub pure fn parse_bytes(buf: &[u8], radix: uint) -> Option<T> {\n+    num::from_str_bytes_common(buf, radix, true, false, false,\n+                               num::ExpNone, false)\n }\n \n impl T : FromStr {\n     #[inline(always)]\n-    static pure fn from_str(s: &str) -> Option<T> { from_str(s) }\n+    static pure fn from_str(s: &str) -> Option<T> {\n+        from_str(s)\n+    }\n }\n \n-/// Convert to a string in a given base\n-#[inline(always)]\n-pub pure fn to_str(n: T, radix: uint) -> ~str {\n-    do to_str_bytes(n, radix) |slice| {\n-        do vec::as_imm_buf(slice) |p, len| {\n-            unsafe { str::raw::from_buf_len(p, len) }\n-        }\n+impl T : FromStrRadix {\n+    #[inline(always)]\n+    static pure fn from_str_radix(&self, s: &str, radix: uint) -> Option<T> {\n+        from_str_radix(s, radix)\n     }\n }\n \n+// String conversion functions and impl num -> str\n+\n+/// Convert to a string as a byte slice in a given base.\n #[inline(always)]\n pub pure fn to_str_bytes<U>(n: T, radix: uint, f: fn(v: &[u8]) -> U) -> U {\n-    if n < 0 as T {\n-        uint::to_str_bytes(true, -n as uint, radix, f)\n-    } else {\n-        uint::to_str_bytes(false, n as uint, radix, f)\n-    }\n+    let (buf, _) = num::to_str_bytes_common(&n, radix, false, false,\n+                                            num::SignNeg, num::DigAll);\n+    f(buf)\n }\n \n-/// Convert to a string\n+/// Convert to a string in base 10.\n #[inline(always)]\n-pub pure fn str(i: T) -> ~str { return to_str(i, 10u); }\n+pub pure fn to_str(num: T) -> ~str {\n+    let (buf, _) = num::to_str_common(&num, 10u, false, false,\n+                                      num::SignNeg, num::DigAll);\n+    buf\n+}\n+\n+/// Convert to a string in a given base.\n+#[inline(always)]\n+pub pure fn to_str_radix(num: T, radix: uint) -> ~str {\n+    let (buf, _) = num::to_str_common(&num, radix, false, false,\n+                                      num::SignNeg, num::DigAll);\n+    buf\n+}\n+\n+/// Convert to a string.\n+/// *Deprecated*, use to_str() instead.\n+#[inline(always)]\n+pub pure fn str(i: T) -> ~str { to_str(i) }\n+\n+impl T : ToStr {\n+    #[inline(always)]\n+    pure fn to_str() -> ~str {\n+        to_str(self)\n+    }\n+}\n+\n+impl T : ToStrRadix {\n+    #[inline(always)]\n+    pure fn to_str_radix(&self, radix: uint) -> ~str {\n+        to_str_radix(*self, radix)\n+    }\n+}\n \n #[test]\n fn test_from_str() {\n@@ -322,11 +341,66 @@ fn test_parse_bytes() {\n \n #[test]\n fn test_to_str() {\n-    assert (to_str(0 as T, 10u) == ~\"0\");\n-    assert (to_str(1 as T, 10u) == ~\"1\");\n-    assert (to_str(-1 as T, 10u) == ~\"-1\");\n-    assert (to_str(127 as T, 16u) == ~\"7f\");\n-    assert (to_str(100 as T, 10u) == ~\"100\");\n+    assert (to_str_radix(0 as T, 10u) == ~\"0\");\n+    assert (to_str_radix(1 as T, 10u) == ~\"1\");\n+    assert (to_str_radix(-1 as T, 10u) == ~\"-1\");\n+    assert (to_str_radix(127 as T, 16u) == ~\"7f\");\n+    assert (to_str_radix(100 as T, 10u) == ~\"100\");\n+\n+}\n+\n+#[test]\n+fn test_int_to_str_overflow() {\n+    let mut i8_val: i8 = 127_i8;\n+    assert (i8::to_str(i8_val) == ~\"127\");\n+    \n+    i8_val += 1 as i8;\n+    assert (i8::to_str(i8_val) == ~\"-128\");\n+\n+    let mut i16_val: i16 = 32_767_i16;\n+    assert (i16::to_str(i16_val) == ~\"32767\");\n+    \n+    i16_val += 1 as i16;\n+    assert (i16::to_str(i16_val) == ~\"-32768\");\n+\n+    let mut i32_val: i32 = 2_147_483_647_i32;\n+    assert (i32::to_str(i32_val) == ~\"2147483647\");\n+    \n+    i32_val += 1 as i32;\n+    assert (i32::to_str(i32_val) == ~\"-2147483648\");\n+\n+    let mut i64_val: i64 = 9_223_372_036_854_775_807_i64;\n+    assert (i64::to_str(i64_val) == ~\"9223372036854775807\");\n+    \n+    i64_val += 1 as i64;\n+    assert (i64::to_str(i64_val) == ~\"-9223372036854775808\");\n+}\n+\n+#[test]\n+fn test_int_from_str_overflow() {\n+    let mut i8_val: i8 = 127_i8;\n+    assert (i8::from_str(~\"127\") == Some(i8_val));\n+    \n+    i8_val += 1 as i8;\n+    assert (i8::from_str(~\"-128\") == Some(i8_val));\n+\n+    let mut i16_val: i16 = 32_767_i16;\n+    assert (i16::from_str(~\"32767\") == Some(i16_val));\n+    \n+    i16_val += 1 as i16;\n+    assert (i16::from_str(~\"-32768\") == Some(i16_val));\n+\n+    let mut i32_val: i32 = 2_147_483_647_i32;\n+    assert (i32::from_str(~\"2147483647\") == Some(i32_val));\n+    \n+    i32_val += 1 as i32;\n+    assert (i32::from_str(~\"-2147483648\") == Some(i32_val));\n+\n+    let mut i64_val: i64 = 9_223_372_036_854_775_807_i64;\n+    assert (i64::from_str(~\"9223372036854775807\") == Some(i64_val));\n+    \n+    i64_val += 1 as i64;\n+    assert (i64::from_str(~\"-9223372036854775808\") == Some(i64_val));\n }\n \n #[test]"}, {"sha": "054512811be17a11ae7f02295db0eaf34af80e0c", "filename": "src/libcore/to_str.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/26e72bf92bb0f9cf4d10a5edb07dbbd5c09f0e24/src%2Flibcore%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e72bf92bb0f9cf4d10a5edb07dbbd5c09f0e24/src%2Flibcore%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fto_str.rs?ref=26e72bf92bb0f9cf4d10a5edb07dbbd5c09f0e24", "patch": "@@ -24,26 +24,6 @@ use vec;\n \n pub trait ToStr { pub pure fn to_str() -> ~str; }\n \n-impl int: ToStr {\n-    #[inline(always)]\n-    pure fn to_str() -> ~str { ::int::str(self) }\n-}\n-impl i8: ToStr {\n-    #[inline(always)]\n-    pure fn to_str() -> ~str { ::i8::str(self) }\n-}\n-impl i16: ToStr {\n-    #[inline(always)]\n-    pure fn to_str() -> ~str { ::i16::str(self) }\n-}\n-impl i32: ToStr {\n-    #[inline(always)]\n-    pure fn to_str() -> ~str { ::i32::str(self) }\n-}\n-impl i64: ToStr {\n-    #[inline(always)]\n-    pure fn to_str() -> ~str { ::i64::str(self) }\n-}\n impl uint: ToStr {\n     #[inline(always)]\n     pure fn to_str() -> ~str { ::uint::str(self) }"}, {"sha": "3dd49f661eefdef6ec6c3e7d54baaf56f205adaa", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/26e72bf92bb0f9cf4d10a5edb07dbbd5c09f0e24/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e72bf92bb0f9cf4d10a5edb07dbbd5c09f0e24/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=26e72bf92bb0f9cf4d10a5edb07dbbd5c09f0e24", "patch": "@@ -382,21 +382,21 @@ pub fn pretty_print_input(sess: Session, +cfg: ast::crate_cfg, input: input,\n         match node {\n           pprust::node_item(s, item) => {\n             pp::space(s.s);\n-            pprust::synth_comment(s, int::to_str(item.id, 10u));\n+            pprust::synth_comment(s, int::to_str(item.id));\n           }\n           pprust::node_block(s, ref blk) => {\n             pp::space(s.s);\n             pprust::synth_comment(\n-                s, ~\"block \" + int::to_str((*blk).node.id, 10u));\n+                s, ~\"block \" + int::to_str((*blk).node.id));\n           }\n           pprust::node_expr(s, expr) => {\n             pp::space(s.s);\n-            pprust::synth_comment(s, int::to_str(expr.id, 10u));\n+            pprust::synth_comment(s, int::to_str(expr.id));\n             pprust::pclose(s);\n           }\n           pprust::node_pat(s, pat) => {\n             pp::space(s.s);\n-            pprust::synth_comment(s, ~\"pat \" + int::to_str(pat.id, 10u));\n+            pprust::synth_comment(s, ~\"pat \" + int::to_str(pat.id));\n           }\n         }\n     }"}, {"sha": "b8a1b942453f0182a289831dee4bb2e54b7741c5", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26e72bf92bb0f9cf4d10a5edb07dbbd5c09f0e24/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e72bf92bb0f9cf4d10a5edb07dbbd5c09f0e24/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=26e72bf92bb0f9cf4d10a5edb07dbbd5c09f0e24", "patch": "@@ -245,7 +245,7 @@ fn encode_discriminant(ecx: @encode_ctxt, ebml_w: writer::Encoder,\n fn encode_disr_val(_ecx: @encode_ctxt, ebml_w: writer::Encoder,\n                    disr_val: int) {\n     ebml_w.start_tag(tag_disr_val);\n-    ebml_w.writer.write(str::to_bytes(int::to_str(disr_val,10u)));\n+    ebml_w.writer.write(str::to_bytes(int::to_str(disr_val)));\n     ebml_w.end_tag();\n }\n "}, {"sha": "5a8fe94a4390a3ba3941a8be17c49d874d8423fd", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26e72bf92bb0f9cf4d10a5edb07dbbd5c09f0e24/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e72bf92bb0f9cf4d10a5edb07dbbd5c09f0e24/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=26e72bf92bb0f9cf4d10a5edb07dbbd5c09f0e24", "patch": "@@ -679,7 +679,7 @@ pub fn iter_structural_ty(cx: block, av: ValueRef, t: ty::t,\n             let variant_cx =\n                 sub_block(cx,\n                                    ~\"enum-iter-variant-\" +\n-                                       int::to_str(variant.disr_val, 10u));\n+                                       int::to_str(variant.disr_val));\n             AddCase(llswitch, C_int(ccx, variant.disr_val), variant_cx.llbb);\n             let variant_cx =\n                 iter_variant(variant_cx, llunion_a_ptr, *variant,"}, {"sha": "96bddf7099b8e46f878a32c713d19315d44630ae", "filename": "src/test/run-pass/reflect-visit-data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26e72bf92bb0f9cf4d10a5edb07dbbd5c09f0e24/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e72bf92bb0f9cf4d10a5edb07dbbd5c09f0e24/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs?ref=26e72bf92bb0f9cf4d10a5edb07dbbd5c09f0e24", "patch": "@@ -517,7 +517,7 @@ impl my_visitor: TyVisitor {\n     }\n     fn visit_int(&self) -> bool {\n       do self.get::<int>() |i| {\n-            self.vals += ~[int::to_str(i, 10u)];\n+            self.vals += ~[int::to_str(i)];\n       };\n       true\n     }"}]}