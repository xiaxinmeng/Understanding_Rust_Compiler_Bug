{"sha": "5e016b88017568824b070fb450cea9cd3c794682", "node_id": "C_kwDOAAsO6NoAKDVlMDE2Yjg4MDE3NTY4ODI0YjA3MGZiNDUwY2VhOWNkM2M3OTQ2ODI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-02T02:02:33Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-02T02:03:09Z"}, "message": "Remove some return-type booleans from FnCtxt", "tree": {"sha": "d8c74d979d3a6265eaee96b3c5f38ed12552307e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8c74d979d3a6265eaee96b3c5f38ed12552307e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e016b88017568824b070fb450cea9cd3c794682", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e016b88017568824b070fb450cea9cd3c794682", "html_url": "https://github.com/rust-lang/rust/commit/5e016b88017568824b070fb450cea9cd3c794682", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e016b88017568824b070fb450cea9cd3c794682/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab5a2bc7316012ee9b2a4a4f3821673f2677f3d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab5a2bc7316012ee9b2a4a4f3821673f2677f3d5", "html_url": "https://github.com/rust-lang/rust/commit/ab5a2bc7316012ee9b2a4a4f3821673f2677f3d5"}], "stats": {"total": 42, "additions": 15, "deletions": 27}, "files": [{"sha": "8d39fa81165ea6bdec7d832b39d3313f31f09b46", "filename": "compiler/rustc_hir_typeck/src/_match.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e016b88017568824b070fb450cea9cd3c794682/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e016b88017568824b070fb450cea9cd3c794682/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs?ref=5e016b88017568824b070fb450cea9cd3c794682", "patch": "@@ -491,11 +491,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     ..\n                 } = self.type_var_origin(expected)? else { return None; };\n \n-                let sig = *self\n-                    .typeck_results\n-                    .borrow()\n-                    .liberated_fn_sigs()\n-                    .get(hir::HirId::make_owner(self.body_id.owner.def_id))?;\n+                let sig = self.body_fn_sig()?;\n \n                 let substs = sig.output().walk().find_map(|arg| {\n                     if let ty::GenericArgKind::Type(ty) = arg.unpack()"}, {"sha": "80147d9009113f329cefc5ca4ada2d660210adad", "filename": "compiler/rustc_hir_typeck/src/check.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5e016b88017568824b070fb450cea9cd3c794682/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e016b88017568824b070fb450cea9cd3c794682/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs?ref=5e016b88017568824b070fb450cea9cd3c794682", "patch": "@@ -31,13 +31,11 @@ pub(super) fn check_fn<'a, 'tcx>(\n     fn_id: hir::HirId,\n     body: &'tcx hir::Body<'tcx>,\n     can_be_generator: Option<hir::Movability>,\n-    return_type_pre_known: bool,\n ) -> (FnCtxt<'a, 'tcx>, Option<GeneratorTypes<'tcx>>) {\n     // Create the function context. This is either derived from scratch or,\n     // in the case of closures, based on the outer context.\n     let mut fcx = FnCtxt::new(inherited, param_env, body.value.hir_id);\n     fcx.ps.set(UnsafetyState::function(fn_sig.unsafety, fn_id));\n-    fcx.return_type_pre_known = return_type_pre_known;\n \n     let tcx = fcx.tcx;\n     let hir = tcx.hir();\n@@ -51,9 +49,6 @@ pub(super) fn check_fn<'a, 'tcx>(\n             decl.output.span(),\n             param_env,\n         ));\n-    // If we replaced declared_ret_ty with infer vars, then we must be inferring\n-    // an opaque type, so set a flag so we can improve diagnostics.\n-    fcx.return_type_has_opaque = ret_ty != declared_ret_ty;\n \n     fcx.ret_coercion = Some(RefCell::new(CoerceMany::new(ret_ty)));\n "}, {"sha": "1c2a7dfd994f9a5533c421a84591863527315bfe", "filename": "compiler/rustc_hir_typeck/src/closure.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5e016b88017568824b070fb450cea9cd3c794682/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e016b88017568824b070fb450cea9cd3c794682/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs?ref=5e016b88017568824b070fb450cea9cd3c794682", "patch": "@@ -82,8 +82,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         debug!(?bound_sig, ?liberated_sig);\n \n-        let return_type_pre_known = !liberated_sig.output().is_ty_infer();\n-\n         let generator_types = check_fn(\n             self,\n             self.param_env.without_const(),\n@@ -92,7 +90,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             expr.hir_id,\n             body,\n             gen,\n-            return_type_pre_known,\n         )\n         .1;\n "}, {"sha": "e8bf299b0378ea2241f04cd11c3fb29700a925df", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5e016b88017568824b070fb450cea9cd3c794682/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e016b88017568824b070fb450cea9cd3c794682/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=5e016b88017568824b070fb450cea9cd3c794682", "patch": "@@ -1782,7 +1782,8 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n             // may occur at the first return expression we see in the closure\n             // (if it conflicts with the declared return type). Skip adding a\n             // note in this case, since it would be incorrect.\n-            && !fcx.return_type_pre_known\n+            && let Some(fn_sig) = fcx.body_fn_sig()\n+            && fn_sig.output().is_ty_var()\n         {\n             err.span_note(\n                 sp,"}, {"sha": "14d36d37776072add01aa1bc2ee430dddc17cb3c", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e016b88017568824b070fb450cea9cd3c794682/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e016b88017568824b070fb450cea9cd3c794682/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=5e016b88017568824b070fb450cea9cd3c794682", "patch": "@@ -840,7 +840,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             return_expr_ty,\n         );\n \n-        if self.return_type_has_opaque {\n+        if let Some(fn_sig) = self.body_fn_sig()\n+            && fn_sig.output().has_opaque_types()\n+        {\n             // Point any obligations that were registered due to opaque type\n             // inference at the return expression.\n             self.select_obligations_where_possible(false, |errors| {"}, {"sha": "3956db7eebea15101b0dbc857ac07edf4f958896", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/mod.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5e016b88017568824b070fb450cea9cd3c794682/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e016b88017568824b070fb450cea9cd3c794682/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fmod.rs?ref=5e016b88017568824b070fb450cea9cd3c794682", "patch": "@@ -118,15 +118,6 @@ pub struct FnCtxt<'a, 'tcx> {\n     pub(super) enclosing_breakables: RefCell<EnclosingBreakables<'tcx>>,\n \n     pub(super) inh: &'a Inherited<'tcx>,\n-\n-    /// True if the function or closure's return type is known before\n-    /// entering the function/closure, i.e. if the return type is\n-    /// either given explicitly or inferred from, say, an `Fn*` trait\n-    /// bound. Used for diagnostic purposes only.\n-    pub(super) return_type_pre_known: bool,\n-\n-    /// True if the return type has an Opaque type\n-    pub(super) return_type_has_opaque: bool,\n }\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n@@ -151,8 +142,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 by_id: Default::default(),\n             }),\n             inh,\n-            return_type_pre_known: true,\n-            return_type_has_opaque: false,\n         }\n     }\n "}, {"sha": "e3b3fb499b16ab888026d0f72ba480bc5003e7f4", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e016b88017568824b070fb450cea9cd3c794682/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e016b88017568824b070fb450cea9cd3c794682/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=5e016b88017568824b070fb450cea9cd3c794682", "patch": "@@ -22,6 +22,14 @@ use rustc_trait_selection::traits::error_reporting::DefIdOrName;\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt as _;\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n+    pub(crate) fn body_fn_sig(&self) -> Option<ty::FnSig<'tcx>> {\n+        self.typeck_results\n+            .borrow()\n+            .liberated_fn_sigs()\n+            .get(self.tcx.hir().get_parent_node(self.body_id))\n+            .copied()\n+    }\n+\n     pub(in super::super) fn suggest_semicolon_at_end(&self, span: Span, err: &mut Diagnostic) {\n         err.span_suggestion_short(\n             span.shrink_to_hi(),"}, {"sha": "d1762598a5206760b70093fe16ab53d181d83039", "filename": "compiler/rustc_hir_typeck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e016b88017568824b070fb450cea9cd3c794682/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e016b88017568824b070fb450cea9cd3c794682/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs?ref=5e016b88017568824b070fb450cea9cd3c794682", "patch": "@@ -250,7 +250,7 @@ fn typeck_with_fallback<'tcx>(\n                 param_env,\n                 fn_sig,\n             );\n-            check_fn(&inh, param_env, fn_sig, decl, id, body, None, true).0\n+            check_fn(&inh, param_env, fn_sig, decl, id, body, None).0\n         } else {\n             let fcx = FnCtxt::new(&inh, param_env, body.value.hir_id);\n             let expected_type = body_ty"}]}