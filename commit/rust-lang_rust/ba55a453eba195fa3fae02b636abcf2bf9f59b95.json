{"sha": "ba55a453eba195fa3fae02b636abcf2bf9f59b95", "node_id": "C_kwDOAAsO6NoAKGJhNTVhNDUzZWJhMTk1ZmEzZmFlMDJiNjM2YWJjZjJiZjlmNTliOTU", "commit": {"author": {"name": "Alan Egerton", "email": "eggyal@gmail.com", "date": "2023-02-09T14:02:47Z"}, "committer": {"name": "Alan Egerton", "email": "eggyal@gmail.com", "date": "2023-02-13T10:24:46Z"}, "message": "Alias folding/visiting traits instead of re-export", "tree": {"sha": "c513f6f979cc03d7f37e88d7b490cb90a5b76307", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c513f6f979cc03d7f37e88d7b490cb90a5b76307"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba55a453eba195fa3fae02b636abcf2bf9f59b95", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJFBAABCAAvFiEEvrRBFuOXsbT1OVTHfUwvbCISJTIFAmPqD+4RHGVnZ3lhbEBn\nbWFpbC5jb20ACgkQfUwvbCISJTINxA//dlTFrXJ3/ktEhnuUG2fp67GCRAzYMiLI\nTdm5q/0hkUgMnCUvlLvVzAYAVtHeNxTpMWQvScK8aasx5KR2B3apdGQqiLNpS7zM\npGz0R8I3CHk1UAOjc+m0NdWOegA38LEUUVn+Q+Y8HOxVBYuCGjtorOxtUE4SReJG\n+9LsNg7TXuGhzA24cmxU7P+dcqCphvoziw3M8hsdntqHgRf6whX2k+mV9cvMAOjc\noWFNsoFj42J0FDa3tQk8goxZkWbeEhkMGmXDbUPUVwS5NSH1T/MBRijxVssMh78U\nzhQtmmctZ/MrgMMYEJbwn3mJKtdS6e+2NOHxxfPcRKZlUTBjfe9s5KyR49aI55qb\n9nQ83Y4qooCtnzeDr5cRJsAk30UPWTW+9AgT5Nbh94W4Ez7JG1GMxDPoccH6mDzO\nJsHQBOByC7ETgIxwk7BLIWzBvy0iH8fCjj7aRDzt8suRc+A1dPyHbZIrLE4OaYoz\nT7NLEYQSR8ubi7oL8SMaA/kOg6WBY6ATY30HI4/FsFPkVtFvfwSrP6RX+/My+e57\n/GbLXkLhzuz1owQdOVwqfAm2d3lxP1mbaGjaFQPQxGOV8zV/WlaI23ogjAJfrkW4\nndgGEQ1UJ25Jvm2FsM5C1lTa6dL9DnC+YRTPscKxxgtXEHe2RMH8PnYpf7CdxiSE\nlSygd/HpgU0=\n=q8qa\n-----END PGP SIGNATURE-----", "payload": "tree c513f6f979cc03d7f37e88d7b490cb90a5b76307\nparent 62846d7c99ca4e17be8c6867fc4b50d10c8a6ec1\nauthor Alan Egerton <eggyal@gmail.com> 1675951367 +0000\ncommitter Alan Egerton <eggyal@gmail.com> 1676283886 +0000\n\nAlias folding/visiting traits instead of re-export\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba55a453eba195fa3fae02b636abcf2bf9f59b95", "html_url": "https://github.com/rust-lang/rust/commit/ba55a453eba195fa3fae02b636abcf2bf9f59b95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba55a453eba195fa3fae02b636abcf2bf9f59b95/comments", "author": {"login": "eggyal", "id": 3089613, "node_id": "MDQ6VXNlcjMwODk2MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3089613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eggyal", "html_url": "https://github.com/eggyal", "followers_url": "https://api.github.com/users/eggyal/followers", "following_url": "https://api.github.com/users/eggyal/following{/other_user}", "gists_url": "https://api.github.com/users/eggyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/eggyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eggyal/subscriptions", "organizations_url": "https://api.github.com/users/eggyal/orgs", "repos_url": "https://api.github.com/users/eggyal/repos", "events_url": "https://api.github.com/users/eggyal/events{/privacy}", "received_events_url": "https://api.github.com/users/eggyal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eggyal", "id": 3089613, "node_id": "MDQ6VXNlcjMwODk2MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3089613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eggyal", "html_url": "https://github.com/eggyal", "followers_url": "https://api.github.com/users/eggyal/followers", "following_url": "https://api.github.com/users/eggyal/following{/other_user}", "gists_url": "https://api.github.com/users/eggyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/eggyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eggyal/subscriptions", "organizations_url": "https://api.github.com/users/eggyal/orgs", "repos_url": "https://api.github.com/users/eggyal/repos", "events_url": "https://api.github.com/users/eggyal/events{/privacy}", "received_events_url": "https://api.github.com/users/eggyal/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62846d7c99ca4e17be8c6867fc4b50d10c8a6ec1", "url": "https://api.github.com/repos/rust-lang/rust/commits/62846d7c99ca4e17be8c6867fc4b50d10c8a6ec1", "html_url": "https://github.com/rust-lang/rust/commit/62846d7c99ca4e17be8c6867fc4b50d10c8a6ec1"}], "stats": {"total": 386, "additions": 201, "deletions": 185}, "files": [{"sha": "70124dba80951620bb8e300c6260a08869f51497", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -17,7 +17,7 @@ use rustc_middle::mir::{\n };\n use rustc_middle::traits::ObligationCause;\n use rustc_middle::traits::ObligationCauseCode;\n-use rustc_middle::ty::{self, RegionVid, Ty, TyCtxt, TypeFoldable, TypeVisitable};\n+use rustc_middle::ty::{self, RegionVid, Ty, TyCtxt, TypeFoldable};\n use rustc_span::Span;\n \n use crate::{"}, {"sha": "c7fe382bac4e3be45f55bf4daea2888bf6a9c80c", "filename": "compiler/rustc_codegen_cranelift/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -86,7 +86,7 @@ mod prelude {\n     pub(crate) use rustc_middle::ty::layout::{self, LayoutOf, TyAndLayout};\n     pub(crate) use rustc_middle::ty::{\n         self, FloatTy, Instance, InstanceDef, IntTy, ParamEnv, Ty, TyCtxt, TypeAndMut,\n-        TypeFoldable, TypeVisitable, UintTy,\n+        TypeFoldable, UintTy,\n     };\n     pub(crate) use rustc_target::abi::{Abi, Scalar, Size, VariantIdx};\n "}, {"sha": "de1734332d448f01cadfcbf99bc230182fa0189f", "filename": "compiler/rustc_codegen_ssa/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -3,7 +3,7 @@ use crate::traits::*;\n use rustc_middle::mir;\n use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::ty::layout::{FnAbiOf, HasTyCtxt, TyAndLayout};\n-use rustc_middle::ty::{self, Instance, Ty, TypeFoldable, TypeVisitable};\n+use rustc_middle::ty::{self, Instance, Ty, TypeFoldable};\n use rustc_target::abi::call::{FnAbi, PassMode};\n \n use std::iter;"}, {"sha": "59c4b92c0e81bcf31eee1d86b7ea26ee7b8dc6e1", "filename": "compiler/rustc_const_eval/src/interpret/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -1,5 +1,5 @@\n use rustc_middle::mir::interpret::InterpResult;\n-use rustc_middle::ty::{self, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor};\n+use rustc_middle::ty::{self, ir::TypeVisitor, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable};\n use std::ops::ControlFlow;\n \n /// Checks whether a type contains generic parameters which require substitution."}, {"sha": "00dea77bad9c016556d2f07b78113fdec373ad79", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -261,7 +261,7 @@ pub(super) fn check_opaque_for_inheriting_lifetimes(\n         selftys: Vec<(Span, Option<String>)>,\n     }\n \n-    impl<'tcx> ty::visit::TypeVisitor<'tcx> for ProhibitOpaqueVisitor<'tcx> {\n+    impl<'tcx> ty::visit::ir::TypeVisitor<'tcx> for ProhibitOpaqueVisitor<'tcx> {\n         type BreakTy = Ty<'tcx>;\n \n         fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n@@ -1447,7 +1447,7 @@ fn opaque_type_cycle_error(\n                     opaques: Vec<DefId>,\n                     closures: Vec<DefId>,\n                 }\n-                impl<'tcx> ty::visit::TypeVisitor<'tcx> for OpaqueTypeCollector {\n+                impl<'tcx> ty::visit::ir::TypeVisitor<'tcx> for OpaqueTypeCollector {\n                     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n                         match *t.kind() {\n                             ty::Alias(ty::Opaque, ty::AliasTy { def_id: def, .. }) => {"}, {"sha": "cdc3216e26c7434723e293cac74e4470b83f4214", "filename": "compiler/rustc_hir_analysis/src/check/compare_impl_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -16,7 +16,7 @@ use rustc_infer::traits::util;\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::util::ExplicitSelf;\n use rustc_middle::ty::{\n-    self, DefIdTree, InternalSubsts, Ty, TypeFoldable, TypeFolder, TypeSuperFoldable, TypeVisitable,\n+    self, ir::TypeFolder, DefIdTree, InternalSubsts, Ty, TypeFoldable, TypeSuperFoldable,\n };\n use rustc_middle::ty::{GenericParamDefKind, ToPredicate, TyCtxt};\n use rustc_span::Span;"}, {"sha": "3ad7e4f130b63b32c6893903b9214f3c1004e3b9", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -16,8 +16,8 @@ use rustc_middle::mir::ConstraintCategory;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::trait_def::TraitSpecializationKind;\n use rustc_middle::ty::{\n-    self, AdtKind, DefIdTree, GenericParamDefKind, Ty, TyCtxt, TypeFoldable, TypeSuperVisitable,\n-    TypeVisitable, TypeVisitor,\n+    self, ir::TypeVisitor, AdtKind, DefIdTree, GenericParamDefKind, Ty, TyCtxt, TypeFoldable,\n+    TypeSuperVisitable,\n };\n use rustc_middle::ty::{GenericArgKind, InternalSubsts};\n use rustc_session::parse::feature_err;\n@@ -1435,7 +1435,7 @@ fn check_where_clauses<'tcx>(wfcx: &WfCheckingCtxt<'_, 'tcx>, span: Span, def_id\n             struct CountParams {\n                 params: FxHashSet<u32>,\n             }\n-            impl<'tcx> ty::visit::TypeVisitor<'tcx> for CountParams {\n+            impl<'tcx> ty::visit::ir::TypeVisitor<'tcx> for CountParams {\n                 type BreakTy = ();\n \n                 fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "a4f7bd9351371b315e78c967ac5e55dd58372d79", "filename": "compiler/rustc_hir_analysis/src/coherence/orphan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -8,7 +8,7 @@ use rustc_hir as hir;\n use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::util::IgnoreRegions;\n use rustc_middle::ty::{\n-    self, AliasKind, ImplPolarity, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor,\n+    self, ir::TypeVisitor, AliasKind, ImplPolarity, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable,\n };\n use rustc_session::lint;\n use rustc_span::def_id::{DefId, LocalDefId};"}, {"sha": "4d296c845f47975df08168d5840f2325d13705ca", "filename": "compiler/rustc_hir_analysis/src/collect/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -17,7 +17,7 @@ use rustc_hir::{GenericArg, GenericParam, GenericParamKind, HirIdMap, LifetimeNa\n use rustc_middle::bug;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::resolve_lifetime::*;\n-use rustc_middle::ty::{self, DefIdTree, TyCtxt, TypeSuperVisitable, TypeVisitor};\n+use rustc_middle::ty::{self, ir::TypeVisitor, DefIdTree, TyCtxt, TypeSuperVisitable};\n use rustc_span::def_id::DefId;\n use rustc_span::symbol::{sym, Ident};\n use rustc_span::Span;"}, {"sha": "5741d9db31d4975b059e8cc036ac3668cd323240", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -9,7 +9,7 @@ use rustc_middle::ty::print::with_forced_trimmed_paths;\n use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::util::IntTypeExt;\n use rustc_middle::ty::{\n-    self, DefIdTree, IsSuggestable, Ty, TyCtxt, TypeFolder, TypeSuperFoldable, TypeVisitable,\n+    self, ir::TypeFolder, DefIdTree, IsSuggestable, Ty, TyCtxt, TypeSuperFoldable, TypeVisitable,\n };\n use rustc_span::symbol::Ident;\n use rustc_span::{Span, DUMMY_SP};"}, {"sha": "e5509318283c58842eb14272a0c197e3b227b585", "filename": "compiler/rustc_hir_analysis/src/constrained_generic_params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_hir_analysis%2Fsrc%2Fconstrained_generic_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_hir_analysis%2Fsrc%2Fconstrained_generic_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fconstrained_generic_params.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -1,5 +1,5 @@\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_middle::ty::visit::{TypeSuperVisitable, TypeVisitable, TypeVisitor};\n+use rustc_middle::ty::visit::{ir::TypeVisitor, TypeSuperVisitable, TypeVisitable};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::source_map::Span;\n use std::ops::ControlFlow;"}, {"sha": "cb9499712e45b5fbc1f0ebf4d246b6282b0a4e0f", "filename": "compiler/rustc_hir_analysis/src/hir_wf_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_hir_analysis%2Fsrc%2Fhir_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_hir_analysis%2Fsrc%2Fhir_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fhir_wf_check.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -5,7 +5,7 @@ use rustc_hir::{ForeignItem, ForeignItemKind};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_infer::traits::{ObligationCause, WellFormedLoc};\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::{self, Region, TyCtxt, TypeFoldable, TypeFolder};\n+use rustc_middle::ty::{self, ir::TypeFolder, Region, TyCtxt, TypeFoldable};\n use rustc_span::def_id::LocalDefId;\n use rustc_trait_selection::traits;\n "}, {"sha": "981bf87db0f462da7003fea4ca1e67e3fd4c1694", "filename": "compiler/rustc_hir_analysis/src/variance/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -99,7 +99,7 @@ fn variance_of_opaque(tcx: TyCtxt<'_>, item_def_id: LocalDefId) -> &[ty::Varianc\n         }\n     }\n \n-    impl<'tcx> ty::TypeVisitor<'tcx> for OpaqueTypeLifetimeCollector<'tcx> {\n+    impl<'tcx> ty::ir::TypeVisitor<'tcx> for OpaqueTypeLifetimeCollector<'tcx> {\n         #[instrument(level = \"trace\", skip(self), ret)]\n         fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n             if let ty::RegionKind::ReEarlyBound(ebr) = r.kind() {"}, {"sha": "c0e4440ef3ad6bdb226680a3c7b6c7b6d070dd78", "filename": "compiler/rustc_hir_typeck/src/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -12,7 +12,7 @@ use rustc_infer::infer::{InferOk, InferResult};\n use rustc_macros::{TypeFoldable, TypeVisitable};\n use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::visit::TypeVisitable;\n-use rustc_middle::ty::{self, Ty, TypeSuperVisitable, TypeVisitor};\n+use rustc_middle::ty::{self, ir::TypeVisitor, Ty, TypeSuperVisitable};\n use rustc_span::def_id::LocalDefId;\n use rustc_span::source_map::Span;\n use rustc_span::sym;"}, {"sha": "c8ee8fc698f7b508876ce5f4ca146beb3e8bdcdf", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/adjust_fulfillment_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -3,7 +3,7 @@ use rustc_hir as hir;\n use rustc_hir::def::Res;\n use rustc_hir::def_id::DefId;\n use rustc_infer::traits::ObligationCauseCode;\n-use rustc_middle::ty::{self, DefIdTree, Ty, TypeSuperVisitable, TypeVisitable, TypeVisitor};\n+use rustc_middle::ty::{self, ir::TypeVisitor, DefIdTree, Ty, TypeSuperVisitable, TypeVisitable};\n use rustc_span::{self, Span};\n use rustc_trait_selection::traits;\n "}, {"sha": "60e0ce3494d4383b0d3d096352a356a48d51abf4", "filename": "compiler/rustc_hir_typeck/src/mem_categorization.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_hir_typeck%2Fsrc%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_hir_typeck%2Fsrc%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmem_categorization.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -51,7 +51,6 @@\n use rustc_middle::hir::place::*;\n use rustc_middle::ty::adjustment;\n use rustc_middle::ty::fold::TypeFoldable;\n-use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n \n use rustc_data_structures::fx::FxIndexMap;"}, {"sha": "b5e6727bfbadf7c8b05ba0209a46ecaca7f59f25", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -20,7 +20,7 @@ use rustc_middle::ty::fast_reject::{simplify_type, TreatParams};\n use rustc_middle::ty::AssocItem;\n use rustc_middle::ty::GenericParamDefKind;\n use rustc_middle::ty::ToPredicate;\n-use rustc_middle::ty::{self, ParamEnvAnd, Ty, TyCtxt, TypeFoldable, TypeVisitable};\n+use rustc_middle::ty::{self, ParamEnvAnd, Ty, TyCtxt, TypeFoldable};\n use rustc_middle::ty::{InternalSubsts, SubstsRef};\n use rustc_session::lint;\n use rustc_span::def_id::DefId;"}, {"sha": "ffaf58cd7b67ba28d0db49a3aa4bb003a06d7313", "filename": "compiler/rustc_hir_typeck/src/op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -13,7 +13,7 @@ use rustc_middle::ty::adjustment::{\n };\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::{\n-    self, DefIdTree, IsSuggestable, Ty, TyCtxt, TypeFolder, TypeSuperFoldable, TypeVisitable,\n+    self, ir::TypeFolder, DefIdTree, IsSuggestable, Ty, TyCtxt, TypeSuperFoldable, TypeVisitable,\n };\n use rustc_session::errors::ExprParenthesesNeeded;\n use rustc_span::source_map::Spanned;"}, {"sha": "f0ce5c28dd4a9c5f58b645a88bc76017bd90907e", "filename": "compiler/rustc_hir_typeck/src/writeback.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -13,8 +13,8 @@ use rustc_infer::infer::InferCtxt;\n use rustc_middle::hir::place::Place as HirPlace;\n use rustc_middle::mir::FakeReadCause;\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, PointerCast};\n-use rustc_middle::ty::fold::{TypeFoldable, TypeFolder, TypeSuperFoldable};\n-use rustc_middle::ty::visit::{TypeSuperVisitable, TypeVisitable};\n+use rustc_middle::ty::fold::{ir::TypeFolder, TypeFoldable, TypeSuperFoldable};\n+use rustc_middle::ty::visit::TypeSuperVisitable;\n use rustc_middle::ty::TypeckResults;\n use rustc_middle::ty::{self, ClosureSizeProfileData, Ty, TyCtxt};\n use rustc_span::symbol::sym;\n@@ -561,7 +561,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n             struct RecursionChecker {\n                 def_id: LocalDefId,\n             }\n-            impl<'tcx> ty::TypeVisitor<'tcx> for RecursionChecker {\n+            impl<'tcx> ty::ir::TypeVisitor<'tcx> for RecursionChecker {\n                 type BreakTy = ();\n                 fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n                     if let ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }) = *t.kind() {"}, {"sha": "b0d1d158a3c58c39e4810d11874dbd949a40e32c", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -10,7 +10,7 @@ use crate::infer::canonical::{\n };\n use crate::infer::InferCtxt;\n use rustc_middle::ty::flags::FlagComputation;\n-use rustc_middle::ty::fold::{TypeFoldable, TypeFolder, TypeSuperFoldable};\n+use rustc_middle::ty::fold::{ir::TypeFolder, TypeFoldable, TypeSuperFoldable};\n use rustc_middle::ty::subst::GenericArg;\n use rustc_middle::ty::{self, BoundVar, InferConst, List, Ty, TyCtxt, TypeFlags};\n use std::sync::atomic::Ordering;"}, {"sha": "b1dfc23f02ec5bec3540fe7253b5f8fd82b0f928", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -38,8 +38,8 @@ use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::relate::{self, Relate, RelateResult, TypeRelation};\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{\n-    self, AliasKind, FallibleTypeFolder, InferConst, ToPredicate, Ty, TyCtxt, TypeFoldable,\n-    TypeSuperFoldable, TypeVisitable,\n+    self, ir::FallibleTypeFolder, AliasKind, InferConst, ToPredicate, Ty, TyCtxt, TypeFoldable,\n+    TypeSuperFoldable,\n };\n use rustc_middle::ty::{IntType, UintType};\n use rustc_span::{Span, DUMMY_SP};"}, {"sha": "083af0e570f257237fe135cc0ece95bda95de023", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -1491,7 +1491,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n             }\n         }\n \n-        impl<'tcx> ty::visit::TypeVisitor<'tcx> for OpaqueTypesVisitor<'tcx> {\n+        impl<'tcx> ty::visit::ir::TypeVisitor<'tcx> for OpaqueTypesVisitor<'tcx> {\n             fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n                 if let Some((kind, def_id)) = TyCategory::from_ty(self.tcx, t) {\n                     let span = self.tcx.def_span(def_id);"}, {"sha": "e444485426e203be385ea3d3b3904fe73ca0dc9b", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -17,7 +17,8 @@ use rustc_hir::{\n     TyKind,\n };\n use rustc_middle::ty::{\n-    self, AssocItemContainer, StaticLifetimeVisitor, Ty, TyCtxt, TypeSuperVisitable, TypeVisitor,\n+    self, ir::TypeVisitor, AssocItemContainer, StaticLifetimeVisitor, Ty, TyCtxt,\n+    TypeSuperVisitable,\n };\n use rustc_span::symbol::Ident;\n use rustc_span::Span;"}, {"sha": "4d6bd6e8e4beae9456e94f2f07d8e27bc182348f", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -75,7 +75,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             }\n         }\n \n-        impl<'tcx> ty::visit::TypeVisitor<'tcx> for HighlightBuilder<'tcx> {\n+        impl<'tcx> ty::visit::ir::TypeVisitor<'tcx> for HighlightBuilder<'tcx> {\n             fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n                 if !r.has_name() && self.counter <= 3 {\n                     self.highlight.highlighting_region(r, self.counter);"}, {"sha": "37da037f91657ba651588d4cd88b9bcc812285c4", "filename": "compiler/rustc_infer/src/infer/freshen.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -33,8 +33,8 @@\n use super::InferCtxt;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_middle::infer::unify_key::ToType;\n-use rustc_middle::ty::fold::TypeFolder;\n-use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable, TypeVisitable};\n+use rustc_middle::ty::fold::ir::TypeFolder;\n+use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable};\n use std::collections::hash_map::Entry;\n \n pub struct TypeFreshener<'a, 'tcx> {"}, {"sha": "aa126814fb5b5a4c86260635d8c9b7e852505dbe", "filename": "compiler/rustc_infer/src/infer/fudge.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffudge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffudge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffudge.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -1,4 +1,4 @@\n-use rustc_middle::ty::fold::{TypeFoldable, TypeFolder, TypeSuperFoldable};\n+use rustc_middle::ty::fold::{ir::TypeFolder, TypeFoldable, TypeSuperFoldable};\n use rustc_middle::ty::{self, ConstVid, FloatVid, IntVid, RegionVid, Ty, TyCtxt, TyVid};\n \n use super::type_variable::TypeVariableOrigin;"}, {"sha": "6a178801306d534d333ba41547c380fde1a11ded", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -26,7 +26,7 @@ use rustc_middle::mir::ConstraintCategory;\n use rustc_middle::traits::select;\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::fold::BoundVarReplacerDelegate;\n-use rustc_middle::ty::fold::{TypeFoldable, TypeFolder, TypeSuperFoldable};\n+use rustc_middle::ty::fold::{ir::TypeFolder, TypeFoldable, TypeSuperFoldable};\n use rustc_middle::ty::relate::RelateResult;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, InternalSubsts, SubstsRef};\n use rustc_middle::ty::visit::TypeVisitable;"}, {"sha": "696cc5f35c950b2cfce737859d39d9e51781ca82", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -29,7 +29,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_middle::traits::ObligationCause;\n use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::relate::{self, Relate, RelateResult, TypeRelation};\n-use rustc_middle::ty::visit::{TypeSuperVisitable, TypeVisitable, TypeVisitor};\n+use rustc_middle::ty::visit::{ir::TypeVisitor, TypeSuperVisitable, TypeVisitable};\n use rustc_middle::ty::{self, InferConst, Ty, TyCtxt};\n use rustc_span::Span;\n use std::fmt::Debug;"}, {"sha": "4105a180eb3bad4e272fad77b6ca368961490254", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -12,8 +12,8 @@ use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::fold::BottomUpFolder;\n use rustc_middle::ty::GenericArgKind;\n use rustc_middle::ty::{\n-    self, OpaqueHiddenType, OpaqueTypeKey, Ty, TyCtxt, TypeFoldable, TypeSuperVisitable,\n-    TypeVisitable, TypeVisitor,\n+    self, ir::TypeVisitor, OpaqueHiddenType, OpaqueTypeKey, Ty, TyCtxt, TypeFoldable,\n+    TypeSuperVisitable, TypeVisitable,\n };\n use rustc_span::Span;\n "}, {"sha": "1011306b7edfdf7367ad38d2896e85586927216b", "filename": "compiler/rustc_infer/src/infer/resolve.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -1,9 +1,12 @@\n use super::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use super::{FixupError, FixupResult, InferCtxt, Span};\n use rustc_middle::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n-use rustc_middle::ty::fold::{FallibleTypeFolder, TypeFolder, TypeSuperFoldable};\n-use rustc_middle::ty::visit::{TypeSuperVisitable, TypeVisitor};\n-use rustc_middle::ty::{self, Const, InferConst, Ty, TyCtxt, TypeFoldable, TypeVisitable};\n+use rustc_middle::ty::fold::{\n+    ir::{FallibleTypeFolder, TypeFolder},\n+    TypeSuperFoldable,\n+};\n+use rustc_middle::ty::visit::{ir::TypeVisitor, TypeSuperVisitable};\n+use rustc_middle::ty::{self, Const, InferConst, Ty, TyCtxt, TypeFoldable};\n \n use std::ops::ControlFlow;\n "}, {"sha": "f0187e8541ef21ad3d03d1ee6b63ed1f7256665d", "filename": "compiler/rustc_infer/src/traits/structural_impls.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fstructural_impls.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -1,8 +1,8 @@\n use crate::traits;\n use crate::traits::project::Normalized;\n-use rustc_middle::ty;\n use rustc_middle::ty::fold::{FallibleTypeFolder, TypeFoldable};\n use rustc_middle::ty::visit::{TypeVisitable, TypeVisitor};\n+use rustc_middle::ty::{self, ir};\n \n use std::fmt;\n use std::ops::ControlFlow;\n@@ -61,7 +61,7 @@ impl<'tcx> fmt::Debug for traits::MismatchedProjectionTypes<'tcx> {\n ///////////////////////////////////////////////////////////////////////////\n // TypeFoldable implementations.\n \n-impl<'tcx, O: TypeFoldable<'tcx>> TypeFoldable<'tcx> for traits::Obligation<'tcx, O> {\n+impl<'tcx, O: TypeFoldable<'tcx>> ir::TypeFoldable<'tcx> for traits::Obligation<'tcx, O> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         Ok(traits::Obligation {\n             cause: self.cause,\n@@ -72,7 +72,7 @@ impl<'tcx, O: TypeFoldable<'tcx>> TypeFoldable<'tcx> for traits::Obligation<'tcx\n     }\n }\n \n-impl<'tcx, O: TypeVisitable<'tcx>> TypeVisitable<'tcx> for traits::Obligation<'tcx, O> {\n+impl<'tcx, O: TypeVisitable<'tcx>> ir::TypeVisitable<'tcx> for traits::Obligation<'tcx, O> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.predicate.visit_with(visitor)?;\n         self.param_env.visit_with(visitor)"}, {"sha": "997f22c0b672734d29338abd79e0050b74eff7d6", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -1144,7 +1144,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n \n     fn check_for_opaque_ty(&mut self, sp: Span, ty: Ty<'tcx>) -> bool {\n         struct ProhibitOpaqueTypes;\n-        impl<'tcx> ty::visit::TypeVisitor<'tcx> for ProhibitOpaqueTypes {\n+        impl<'tcx> ty::visit::ir::TypeVisitor<'tcx> for ProhibitOpaqueTypes {\n             type BreakTy = Ty<'tcx>;\n \n             fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "257b353e17c30acf5e6b796b5f3114e0ae8e0df7", "filename": "compiler/rustc_macros/src/type_foldable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_macros%2Fsrc%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_macros%2Fsrc%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Ftype_foldable.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -17,13 +17,13 @@ pub fn type_foldable_derive(mut s: synstructure::Structure<'_>) -> proc_macro2::\n         vi.construct(|_, index| {\n             let bind = &bindings[index];\n             quote! {\n-                ::rustc_middle::ty::fold::TypeFoldable::try_fold_with(#bind, __folder)?\n+                ::rustc_middle::ty::fold::ir::TypeFoldable::try_fold_with(#bind, __folder)?\n             }\n         })\n     });\n \n     s.bound_impl(\n-        quote!(::rustc_middle::ty::fold::TypeFoldable<'tcx>),\n+        quote!(::rustc_middle::ty::fold::ir::TypeFoldable<'tcx>),\n         quote! {\n             fn try_fold_with<__F: ::rustc_middle::ty::fold::FallibleTypeFolder<'tcx>>(\n                 self,"}, {"sha": "d164dd3cb98e5e78e069febc71012523a9259d63", "filename": "compiler/rustc_macros/src/type_visitable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_macros%2Fsrc%2Ftype_visitable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_macros%2Fsrc%2Ftype_visitable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Ftype_visitable.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -13,13 +13,13 @@ pub fn type_visitable_derive(mut s: synstructure::Structure<'_>) -> proc_macro2:\n     s.add_bounds(synstructure::AddBounds::Generics);\n     let body_visit = s.each(|bind| {\n         quote! {\n-            ::rustc_middle::ty::visit::TypeVisitable::visit_with(#bind, __visitor)?;\n+            ::rustc_middle::ty::visit::ir::TypeVisitable::visit_with(#bind, __visitor)?;\n         }\n     });\n     s.bind_with(|_| synstructure::BindStyle::Move);\n \n     s.bound_impl(\n-        quote!(::rustc_middle::ty::visit::TypeVisitable<'tcx>),\n+        quote!(::rustc_middle::ty::visit::ir::TypeVisitable<'tcx>),\n         quote! {\n             fn visit_with<__V: ::rustc_middle::ty::visit::TypeVisitor<'tcx>>(\n                 &self,"}, {"sha": "c6d67342cadff32cd733f7abc74fa91ed55f8dbe", "filename": "compiler/rustc_middle/src/infer/canonical.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -42,7 +42,7 @@ pub struct Canonical<'tcx, V> {\n \n pub type CanonicalVarInfos<'tcx> = &'tcx List<CanonicalVarInfo<'tcx>>;\n \n-impl<'tcx> ty::TypeFoldable<'tcx> for CanonicalVarInfos<'tcx> {\n+impl<'tcx> ty::ir::TypeFoldable<'tcx> for CanonicalVarInfos<'tcx> {\n     fn try_fold_with<F: ty::FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,"}, {"sha": "ea57f7079f99e50c76719b744f5064e7eb80af00", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -60,6 +60,7 @@\n #![feature(yeet_expr)]\n #![feature(result_option_inspect)]\n #![feature(const_option)]\n+#![feature(trait_alias)]\n #![recursion_limit = \"512\"]\n #![allow(rustc::potential_query_instability)]\n "}, {"sha": "3e387d89d5f9f1c57bf13beeaab9ce060cbc3b54", "filename": "compiler/rustc_middle/src/macros.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -69,7 +69,7 @@ macro_rules! CloneLiftImpls {\n macro_rules! TrivialTypeTraversalImpls {\n     (for <$tcx:lifetime> { $($ty:ty,)+ }) => {\n         $(\n-            impl<$tcx> $crate::ty::fold::TypeFoldable<$tcx> for $ty {\n+            impl<$tcx> $crate::ty::fold::ir::TypeFoldable<$tcx> for $ty {\n                 fn try_fold_with<F: $crate::ty::fold::FallibleTypeFolder<$tcx>>(\n                     self,\n                     _: &mut F,\n@@ -86,7 +86,7 @@ macro_rules! TrivialTypeTraversalImpls {\n                 }\n             }\n \n-            impl<$tcx> $crate::ty::visit::TypeVisitable<$tcx> for $ty {\n+            impl<$tcx> $crate::ty::visit::ir::TypeVisitable<$tcx> for $ty {\n                 #[inline]\n                 fn visit_with<F: $crate::ty::visit::TypeVisitor<$tcx>>(\n                     &self,\n@@ -121,7 +121,7 @@ macro_rules! EnumTypeTraversalImpl {\n     (impl<$($p:tt),*> TypeFoldable<$tcx:tt> for $s:path {\n         $($variants:tt)*\n     } $(where $($wc:tt)*)*) => {\n-        impl<$($p),*> $crate::ty::fold::TypeFoldable<$tcx> for $s\n+        impl<$($p),*> $crate::ty::fold::ir::TypeFoldable<$tcx> for $s\n             $(where $($wc)*)*\n         {\n             fn try_fold_with<V: $crate::ty::fold::FallibleTypeFolder<$tcx>>(\n@@ -136,7 +136,7 @@ macro_rules! EnumTypeTraversalImpl {\n     (impl<$($p:tt),*> TypeVisitable<$tcx:tt> for $s:path {\n         $($variants:tt)*\n     } $(where $($wc:tt)*)*) => {\n-        impl<$($p),*> $crate::ty::visit::TypeVisitable<$tcx> for $s\n+        impl<$($p),*> $crate::ty::visit::ir::TypeVisitable<$tcx> for $s\n             $(where $($wc)*)*\n         {\n             fn visit_with<V: $crate::ty::visit::TypeVisitor<$tcx>>(\n@@ -163,7 +163,7 @@ macro_rules! EnumTypeTraversalImpl {\n                 output(\n                     $variant ( $($variant_arg),* ) => {\n                         $variant (\n-                            $($crate::ty::fold::TypeFoldable::try_fold_with($variant_arg, $folder)?),*\n+                            $($crate::ty::fold::ir::TypeFoldable::try_fold_with($variant_arg, $folder)?),*\n                         )\n                     }\n                     $($output)*\n@@ -180,7 +180,7 @@ macro_rules! EnumTypeTraversalImpl {\n                 output(\n                     $variant { $($variant_arg),* } => {\n                         $variant {\n-                            $($variant_arg: $crate::ty::fold::TypeFoldable::fold_with(\n+                            $($variant_arg: $crate::ty::fold::ir::TypeFoldable::fold_with(\n                                 $variant_arg, $folder\n                             )?),* }\n                     }\n@@ -216,7 +216,7 @@ macro_rules! EnumTypeTraversalImpl {\n                 input($($input)*)\n                 output(\n                     $variant ( $($variant_arg),* ) => {\n-                        $($crate::ty::visit::TypeVisitable::visit_with(\n+                        $($crate::ty::visit::ir::TypeVisitable::visit_with(\n                             $variant_arg, $visitor\n                         )?;)*\n                         ::std::ops::ControlFlow::Continue(())\n@@ -234,7 +234,7 @@ macro_rules! EnumTypeTraversalImpl {\n                 input($($input)*)\n                 output(\n                     $variant { $($variant_arg),* } => {\n-                        $($crate::ty::visit::TypeVisitable::visit_with(\n+                        $($crate::ty::visit::ir::TypeVisitable::visit_with(\n                             $variant_arg, $visitor\n                         )?;)*\n                         ::std::ops::ControlFlow::Continue(())"}, {"sha": "1955866cb43cabc784eac39602a9593165333f20", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -7,10 +7,10 @@ use crate::mir::interpret::{\n };\n use crate::mir::visit::MirVisitable;\n use crate::ty::codec::{TyDecoder, TyEncoder};\n-use crate::ty::fold::{FallibleTypeFolder, TypeFoldable};\n+use crate::ty::fold::{ir::TypeFoldable, FallibleTypeFolder};\n use crate::ty::print::{FmtPrinter, Printer};\n use crate::ty::visit::{TypeVisitable, TypeVisitor};\n-use crate::ty::{self, DefIdTree, List, Ty, TyCtxt};\n+use crate::ty::{self, ir, DefIdTree, List, Ty, TyCtxt};\n use crate::ty::{AdtDef, InstanceDef, ScalarInt, UserTypeAnnotationIndex};\n use crate::ty::{GenericArg, InternalSubsts, SubstsRef};\n \n@@ -2751,7 +2751,7 @@ impl<'tcx> TypeFoldable<'tcx> for UserTypeProjection {\n     }\n }\n \n-impl<'tcx> TypeVisitable<'tcx> for UserTypeProjection {\n+impl<'tcx> ir::TypeVisitable<'tcx> for UserTypeProjection {\n     fn visit_with<Vs: TypeVisitor<'tcx>>(&self, visitor: &mut Vs) -> ControlFlow<Vs::BreakTy> {\n         self.base.visit_with(visitor)\n         // Note: there's nothing in `self.proj` to visit."}, {"sha": "4b6c4d57c626adfb91b765628267f731ff3567b4", "filename": "compiler/rustc_middle/src/mir/type_visitable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_visitable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_visitable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_visitable.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -2,7 +2,7 @@\n \n use super::*;\n \n-impl<'tcx, R: Idx, C: Idx> TypeVisitable<'tcx> for BitMatrix<R, C> {\n+impl<'tcx, R: Idx, C: Idx> ir::TypeVisitable<'tcx> for BitMatrix<R, C> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<V::BreakTy> {\n         ControlFlow::Continue(())\n     }"}, {"sha": "df2fe5f03c81f52f8917c1a6fe452bb213dc8689", "filename": "compiler/rustc_middle/src/traits/solve.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fsolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fsolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fsolve.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -2,7 +2,10 @@ use std::ops::ControlFlow;\n \n use rustc_data_structures::intern::Interned;\n \n-use crate::ty::{FallibleTypeFolder, Ty, TypeFoldable, TypeFolder, TypeVisitable, TypeVisitor};\n+use crate::ty::{\n+    ir::{self, TypeFoldable, TypeVisitable},\n+    FallibleTypeFolder, Ty, TypeFolder, TypeVisitor,\n+};\n \n #[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]\n pub struct ExternalConstraints<'tcx>(pub(crate) Interned<'tcx, ExternalConstraintsData<'tcx>>);\n@@ -25,18 +28,20 @@ pub struct ExternalConstraintsData<'tcx> {\n \n impl<'tcx> TypeFoldable<'tcx> for ExternalConstraints<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n-        Ok(FallibleTypeFolder::tcx(folder).intern_external_constraints(ExternalConstraintsData {\n-            regions: (),\n-            opaque_types: self\n-                .opaque_types\n-                .iter()\n-                .map(|opaque| opaque.try_fold_with(folder))\n-                .collect::<Result<_, F::Error>>()?,\n-        }))\n+        Ok(ir::FallibleTypeFolder::tcx(folder).intern_external_constraints(\n+            ExternalConstraintsData {\n+                regions: (),\n+                opaque_types: self\n+                    .opaque_types\n+                    .iter()\n+                    .map(|opaque| opaque.try_fold_with(folder))\n+                    .collect::<Result<_, F::Error>>()?,\n+            },\n+        ))\n     }\n \n     fn fold_with<F: TypeFolder<'tcx>>(self, folder: &mut F) -> Self {\n-        TypeFolder::tcx(folder).intern_external_constraints(ExternalConstraintsData {\n+        ir::TypeFolder::tcx(folder).intern_external_constraints(ExternalConstraintsData {\n             regions: (),\n             opaque_types: self.opaque_types.iter().map(|opaque| opaque.fold_with(folder)).collect(),\n         })"}, {"sha": "0f4a97d8aed828df0cff49e4b89315f0aa440de0", "filename": "compiler/rustc_middle/src/ty/abstract_const.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -1,7 +1,6 @@\n //! A subset of a mir body used for const evaluatability checking.\n use crate::ty::{\n-    self, Const, EarlyBinder, Ty, TyCtxt, TypeFoldable, TypeFolder, TypeSuperFoldable,\n-    TypeVisitable,\n+    self, ir::TypeFolder, Const, EarlyBinder, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable,\n };\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def_id::DefId;"}, {"sha": "eda801f35212004b8c38f0063c08c60ef537acf0", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -3,9 +3,10 @@\n use std::ops::ControlFlow;\n \n use crate::ty::{\n-    visit::TypeVisitable, AliasTy, Const, ConstKind, DefIdTree, FallibleTypeFolder, InferConst,\n-    InferTy, Opaque, PolyTraitPredicate, Projection, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable,\n-    TypeSuperVisitable, TypeVisitor,\n+    ir::{FallibleTypeFolder, TypeVisitor},\n+    visit::TypeVisitable,\n+    AliasTy, Const, ConstKind, DefIdTree, InferConst, InferTy, Opaque, PolyTraitPredicate,\n+    Projection, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable, TypeSuperVisitable,\n };\n \n use rustc_data_structures::fx::FxHashMap;"}, {"sha": "25df0ee5560d59b65a540009d671a9a99a5d5119", "filename": "compiler/rustc_middle/src/ty/erase_regions.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferase_regions.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -1,5 +1,4 @@\n-use crate::ty::fold::{TypeFoldable, TypeFolder, TypeSuperFoldable};\n-use crate::ty::visit::TypeVisitable;\n+use crate::ty::fold::{ir::TypeFolder, TypeFoldable, TypeSuperFoldable};\n use crate::ty::{self, Ty, TyCtxt, TypeFlags};\n \n pub(super) fn provide(providers: &mut ty::query::Providers) {"}, {"sha": "50222c6d70a92a58bcc38d1f9909e044a5372544", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -48,7 +48,10 @@ use rustc_hir::def_id::DefId;\n \n use std::collections::BTreeMap;\n \n-pub use ir::{FallibleTypeFolder, TypeFoldable, TypeFolder, TypeSuperFoldable};\n+pub trait TypeFoldable<'tcx> = ir::TypeFoldable<'tcx> + TypeVisitable<'tcx>;\n+pub trait TypeSuperFoldable<'tcx> = ir::TypeSuperFoldable<'tcx>;\n+pub trait TypeFolder<'tcx> = ir::TypeFolder<'tcx>;\n+pub trait FallibleTypeFolder<'tcx> = ir::FallibleTypeFolder<'tcx>;\n \n pub mod ir {\n     use crate::ty::{self, ir::TypeVisitable, Binder, Ty, TyCtxt};\n@@ -233,7 +236,7 @@ where\n     pub ct_op: H,\n }\n \n-impl<'tcx, F, G, H> TypeFolder<'tcx> for BottomUpFolder<'tcx, F, G, H>\n+impl<'tcx, F, G, H> ir::TypeFolder<'tcx> for BottomUpFolder<'tcx, F, G, H>\n where\n     F: FnMut(Ty<'tcx>) -> Ty<'tcx>,\n     G: FnMut(ty::Region<'tcx>) -> ty::Region<'tcx>,\n@@ -323,7 +326,7 @@ impl<'a, 'tcx> RegionFolder<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> TypeFolder<'tcx> for RegionFolder<'a, 'tcx> {\n+impl<'a, 'tcx> ir::TypeFolder<'tcx> for RegionFolder<'a, 'tcx> {\n     fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n@@ -397,7 +400,7 @@ impl<'tcx, D: BoundVarReplacerDelegate<'tcx>> BoundVarReplacer<'tcx, D> {\n     }\n }\n \n-impl<'tcx, D> TypeFolder<'tcx> for BoundVarReplacer<'tcx, D>\n+impl<'tcx, D> ir::TypeFolder<'tcx> for BoundVarReplacer<'tcx, D>\n where\n     D: BoundVarReplacerDelegate<'tcx>,\n {\n@@ -663,7 +666,7 @@ impl<'tcx> Shifter<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFolder<'tcx> for Shifter<'tcx> {\n+impl<'tcx> ir::TypeFolder<'tcx> for Shifter<'tcx> {\n     fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n         self.tcx\n     }"}, {"sha": "6c2c11aa5612df15bd6427a3b91fd4260234a485", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -1,6 +1,6 @@\n use crate::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use crate::ty::print::{FmtPrinter, Printer};\n-use crate::ty::{self, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable, TypeVisitable};\n+use crate::ty::{self, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable};\n use crate::ty::{EarlyBinder, InternalSubsts, SubstsRef};\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def::Namespace;\n@@ -674,7 +674,7 @@ fn polymorphize<'tcx>(\n         tcx: TyCtxt<'tcx>,\n     }\n \n-    impl<'tcx> ty::TypeFolder<'tcx> for PolymorphizationFolder<'tcx> {\n+    impl<'tcx> ty::ir::TypeFolder<'tcx> for PolymorphizationFolder<'tcx> {\n         fn tcx<'a>(&'a self) -> TyCtxt<'tcx> {\n             self.tcx\n         }"}, {"sha": "5d6bcb3de26e005f01de4c27a438e3d20a0d2ecd", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -917,13 +917,13 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for Term<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for Term<'tcx> {\n+impl<'tcx> ir::TypeFoldable<'tcx> for Term<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         Ok(self.unpack().try_fold_with(folder)?.pack())\n     }\n }\n \n-impl<'tcx> TypeVisitable<'tcx> for Term<'tcx> {\n+impl<'tcx> ir::TypeVisitable<'tcx> for Term<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.unpack().visit_with(visitor)\n     }\n@@ -1619,7 +1619,7 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for ParamEnv<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for ParamEnv<'tcx> {\n+impl<'tcx> ir::TypeFoldable<'tcx> for ParamEnv<'tcx> {\n     fn try_fold_with<F: ty::fold::FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n@@ -1632,7 +1632,7 @@ impl<'tcx> TypeFoldable<'tcx> for ParamEnv<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeVisitable<'tcx> for ParamEnv<'tcx> {\n+impl<'tcx> ir::TypeVisitable<'tcx> for ParamEnv<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.caller_bounds().visit_with(visitor)?;\n         self.reveal().visit_with(visitor)"}, {"sha": "7967534f96ab434e2f2df8f9488cc3ada0712e45", "filename": "compiler/rustc_middle/src/ty/normalize_erasing_regions.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -9,7 +9,10 @@\n \n use crate::mir;\n use crate::traits::query::NoSolution;\n-use crate::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeFolder};\n+use crate::ty::fold::{\n+    ir::{FallibleTypeFolder, TypeFolder},\n+    TypeFoldable,\n+};\n use crate::ty::{self, EarlyBinder, SubstsRef, Ty, TyCtxt};\n \n #[derive(Debug, Copy, Clone, HashStable, TyEncodable, TyDecodable)]"}, {"sha": "db8f9c82dc3f3cd9aea4c05d06a33b150492a357", "filename": "compiler/rustc_middle/src/ty/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_middle%2Fsrc%2Fty%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_middle%2Fsrc%2Fty%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fopaque_types.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -1,5 +1,5 @@\n use crate::error::ConstNotUsedTraitAlias;\n-use crate::ty::fold::{TypeFolder, TypeSuperFoldable};\n+use crate::ty::fold::{ir::TypeFolder, TypeSuperFoldable};\n use crate::ty::subst::{GenericArg, GenericArgKind};\n use crate::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc_data_structures::fx::FxHashMap;"}, {"sha": "06dd2595c09c384db4f28b58ec33f3a52239867f", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -2221,7 +2221,7 @@ struct RegionFolder<'a, 'tcx> {\n             ),\n }\n \n-impl<'a, 'tcx> ty::TypeFolder<'tcx> for RegionFolder<'a, 'tcx> {\n+impl<'a, 'tcx> ty::ir::TypeFolder<'tcx> for RegionFolder<'a, 'tcx> {\n     fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n@@ -2493,7 +2493,7 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n             }\n         }\n \n-        impl<'tcx> ty::visit::TypeVisitor<'tcx> for RegionNameCollector<'tcx> {\n+        impl<'tcx> ty::visit::ir::TypeVisitor<'tcx> for RegionNameCollector<'tcx> {\n             type BreakTy = ();\n \n             fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "590342a69523d38de668c1be3e3e55526180121b", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 40, "deletions": 40, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -4,10 +4,10 @@\n \n use crate::mir::interpret;\n use crate::mir::{Field, ProjectionKind};\n-use crate::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeSuperFoldable};\n+use crate::ty::fold::{ir::TypeSuperFoldable, FallibleTypeFolder, TypeFoldable};\n use crate::ty::print::{with_no_trimmed_paths, FmtPrinter, Printer};\n-use crate::ty::visit::{TypeSuperVisitable, TypeVisitable, TypeVisitor};\n-use crate::ty::{self, AliasTy, InferConst, Lift, Term, TermKind, Ty, TyCtxt};\n+use crate::ty::visit::{ir::TypeSuperVisitable, TypeVisitable, TypeVisitor};\n+use crate::ty::{self, ir, AliasTy, InferConst, Lift, Term, TermKind, Ty, TyCtxt};\n use rustc_data_structures::functor::IdFunctor;\n use rustc_hir::def::Namespace;\n use rustc_index::vec::{Idx, IndexVec};\n@@ -363,19 +363,19 @@ impl<'a, 'tcx> Lift<'tcx> for ty::ParamEnv<'a> {\n // TypeFoldable implementations.\n \n /// AdtDefs are basically the same as a DefId.\n-impl<'tcx> TypeFoldable<'tcx> for ty::AdtDef<'tcx> {\n+impl<'tcx> ir::TypeFoldable<'tcx> for ty::AdtDef<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, _folder: &mut F) -> Result<Self, F::Error> {\n         Ok(self)\n     }\n }\n \n-impl<'tcx> TypeVisitable<'tcx> for ty::AdtDef<'tcx> {\n+impl<'tcx> ir::TypeVisitable<'tcx> for ty::AdtDef<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         ControlFlow::Continue(())\n     }\n }\n \n-impl<'tcx, T: TypeFoldable<'tcx>, U: TypeFoldable<'tcx>> TypeFoldable<'tcx> for (T, U) {\n+impl<'tcx, T: TypeFoldable<'tcx>, U: TypeFoldable<'tcx>> ir::TypeFoldable<'tcx> for (T, U) {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n@@ -384,15 +384,15 @@ impl<'tcx, T: TypeFoldable<'tcx>, U: TypeFoldable<'tcx>> TypeFoldable<'tcx> for\n     }\n }\n \n-impl<'tcx, T: TypeVisitable<'tcx>, U: TypeVisitable<'tcx>> TypeVisitable<'tcx> for (T, U) {\n+impl<'tcx, T: TypeVisitable<'tcx>, U: TypeVisitable<'tcx>> ir::TypeVisitable<'tcx> for (T, U) {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.0.visit_with(visitor)?;\n         self.1.visit_with(visitor)\n     }\n }\n \n-impl<'tcx, A: TypeFoldable<'tcx>, B: TypeFoldable<'tcx>, C: TypeFoldable<'tcx>> TypeFoldable<'tcx>\n-    for (A, B, C)\n+impl<'tcx, A: TypeFoldable<'tcx>, B: TypeFoldable<'tcx>, C: TypeFoldable<'tcx>>\n+    ir::TypeFoldable<'tcx> for (A, B, C)\n {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n@@ -407,7 +407,7 @@ impl<'tcx, A: TypeFoldable<'tcx>, B: TypeFoldable<'tcx>, C: TypeFoldable<'tcx>>\n }\n \n impl<'tcx, A: TypeVisitable<'tcx>, B: TypeVisitable<'tcx>, C: TypeVisitable<'tcx>>\n-    TypeVisitable<'tcx> for (A, B, C)\n+    ir::TypeVisitable<'tcx> for (A, B, C)\n {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.0.visit_with(visitor)?;\n@@ -442,7 +442,7 @@ EnumTypeTraversalImpl! {\n     } where T: TypeVisitable<'tcx>, E: TypeVisitable<'tcx>,\n }\n \n-impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Rc<T> {\n+impl<'tcx, T: TypeFoldable<'tcx>> ir::TypeFoldable<'tcx> for Rc<T> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(\n         mut self,\n         folder: &mut F,\n@@ -482,13 +482,13 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Rc<T> {\n     }\n }\n \n-impl<'tcx, T: TypeVisitable<'tcx>> TypeVisitable<'tcx> for Rc<T> {\n+impl<'tcx, T: TypeVisitable<'tcx>> ir::TypeVisitable<'tcx> for Rc<T> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         (**self).visit_with(visitor)\n     }\n }\n \n-impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Arc<T> {\n+impl<'tcx, T: TypeFoldable<'tcx>> ir::TypeFoldable<'tcx> for Arc<T> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(\n         mut self,\n         folder: &mut F,\n@@ -528,61 +528,61 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Arc<T> {\n     }\n }\n \n-impl<'tcx, T: TypeVisitable<'tcx>> TypeVisitable<'tcx> for Arc<T> {\n+impl<'tcx, T: TypeVisitable<'tcx>> ir::TypeVisitable<'tcx> for Arc<T> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         (**self).visit_with(visitor)\n     }\n }\n \n-impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Box<T> {\n+impl<'tcx, T: TypeFoldable<'tcx>> ir::TypeFoldable<'tcx> for Box<T> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         self.try_map_id(|value| value.try_fold_with(folder))\n     }\n }\n \n-impl<'tcx, T: TypeVisitable<'tcx>> TypeVisitable<'tcx> for Box<T> {\n+impl<'tcx, T: TypeVisitable<'tcx>> ir::TypeVisitable<'tcx> for Box<T> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         (**self).visit_with(visitor)\n     }\n }\n \n-impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Vec<T> {\n+impl<'tcx, T: TypeFoldable<'tcx>> ir::TypeFoldable<'tcx> for Vec<T> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         self.try_map_id(|t| t.try_fold_with(folder))\n     }\n }\n \n-impl<'tcx, T: TypeVisitable<'tcx>> TypeVisitable<'tcx> for Vec<T> {\n+impl<'tcx, T: TypeVisitable<'tcx>> ir::TypeVisitable<'tcx> for Vec<T> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n }\n \n-impl<'tcx, T: TypeVisitable<'tcx>> TypeVisitable<'tcx> for &[T] {\n+impl<'tcx, T: TypeVisitable<'tcx>> ir::TypeVisitable<'tcx> for &[T] {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n }\n \n-impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Box<[T]> {\n+impl<'tcx, T: TypeFoldable<'tcx>> ir::TypeFoldable<'tcx> for Box<[T]> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         self.try_map_id(|t| t.try_fold_with(folder))\n     }\n }\n \n-impl<'tcx, T: TypeVisitable<'tcx>> TypeVisitable<'tcx> for Box<[T]> {\n+impl<'tcx, T: TypeVisitable<'tcx>> ir::TypeVisitable<'tcx> for Box<[T]> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n }\n \n-impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for ty::Binder<'tcx, T> {\n+impl<'tcx, T: TypeFoldable<'tcx>> ir::TypeFoldable<'tcx> for ty::Binder<'tcx, T> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         folder.try_fold_binder(self)\n     }\n }\n \n-impl<'tcx, T: TypeVisitable<'tcx>> TypeVisitable<'tcx> for ty::Binder<'tcx, T> {\n+impl<'tcx, T: TypeVisitable<'tcx>> ir::TypeVisitable<'tcx> for ty::Binder<'tcx, T> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         visitor.visit_binder(self)\n     }\n@@ -603,31 +603,31 @@ impl<'tcx, T: TypeVisitable<'tcx>> TypeSuperVisitable<'tcx> for ty::Binder<'tcx,\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ty::PolyExistentialPredicate<'tcx>> {\n+impl<'tcx> ir::TypeFoldable<'tcx> for &'tcx ty::List<ty::PolyExistentialPredicate<'tcx>> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         ty::util::fold_list(self, folder, |tcx, v| tcx.intern_poly_existential_predicates(v))\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ty::Const<'tcx>> {\n+impl<'tcx> ir::TypeFoldable<'tcx> for &'tcx ty::List<ty::Const<'tcx>> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         ty::util::fold_list(self, folder, |tcx, v| tcx.mk_const_list(v.iter()))\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ProjectionKind> {\n+impl<'tcx> ir::TypeFoldable<'tcx> for &'tcx ty::List<ProjectionKind> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         ty::util::fold_list(self, folder, |tcx, v| tcx.intern_projs(v))\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n+impl<'tcx> ir::TypeFoldable<'tcx> for Ty<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         folder.try_fold_ty(self)\n     }\n }\n \n-impl<'tcx> TypeVisitable<'tcx> for Ty<'tcx> {\n+impl<'tcx> ir::TypeVisitable<'tcx> for Ty<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         visitor.visit_ty(*self)\n     }\n@@ -727,13 +727,13 @@ impl<'tcx> TypeSuperVisitable<'tcx> for Ty<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for ty::Region<'tcx> {\n+impl<'tcx> ir::TypeFoldable<'tcx> for ty::Region<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         folder.try_fold_region(self)\n     }\n }\n \n-impl<'tcx> TypeVisitable<'tcx> for ty::Region<'tcx> {\n+impl<'tcx> ir::TypeVisitable<'tcx> for ty::Region<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         visitor.visit_region(*self)\n     }\n@@ -754,13 +754,13 @@ impl<'tcx> TypeSuperVisitable<'tcx> for ty::Region<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for ty::Predicate<'tcx> {\n+impl<'tcx> ir::TypeFoldable<'tcx> for ty::Predicate<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         folder.try_fold_predicate(self)\n     }\n }\n \n-impl<'tcx> TypeVisitable<'tcx> for ty::Predicate<'tcx> {\n+impl<'tcx> ir::TypeVisitable<'tcx> for ty::Predicate<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         visitor.visit_predicate(*self)\n     }\n@@ -792,31 +792,31 @@ impl<'tcx> TypeSuperVisitable<'tcx> for ty::Predicate<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ty::Predicate<'tcx>> {\n+impl<'tcx> ir::TypeFoldable<'tcx> for &'tcx ty::List<ty::Predicate<'tcx>> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         ty::util::fold_list(self, folder, |tcx, v| tcx.intern_predicates(v))\n     }\n }\n \n-impl<'tcx, T: TypeFoldable<'tcx>, I: Idx> TypeFoldable<'tcx> for IndexVec<I, T> {\n+impl<'tcx, T: TypeFoldable<'tcx>, I: Idx> ir::TypeFoldable<'tcx> for IndexVec<I, T> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         self.try_map_id(|x| x.try_fold_with(folder))\n     }\n }\n \n-impl<'tcx, T: TypeVisitable<'tcx>, I: Idx> TypeVisitable<'tcx> for IndexVec<I, T> {\n+impl<'tcx, T: TypeVisitable<'tcx>, I: Idx> ir::TypeVisitable<'tcx> for IndexVec<I, T> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for ty::Const<'tcx> {\n+impl<'tcx> ir::TypeFoldable<'tcx> for ty::Const<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         folder.try_fold_const(self)\n     }\n }\n \n-impl<'tcx> TypeVisitable<'tcx> for ty::Const<'tcx> {\n+impl<'tcx> ir::TypeVisitable<'tcx> for ty::Const<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         visitor.visit_const(*self)\n     }\n@@ -844,13 +844,13 @@ impl<'tcx> TypeSuperVisitable<'tcx> for ty::Const<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for InferConst<'tcx> {\n+impl<'tcx> ir::TypeFoldable<'tcx> for InferConst<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, _folder: &mut F) -> Result<Self, F::Error> {\n         Ok(self)\n     }\n }\n \n-impl<'tcx> TypeVisitable<'tcx> for InferConst<'tcx> {\n+impl<'tcx> ir::TypeVisitable<'tcx> for InferConst<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         ControlFlow::Continue(())\n     }\n@@ -862,7 +862,7 @@ impl<'tcx> TypeSuperVisitable<'tcx> for ty::UnevaluatedConst<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeVisitable<'tcx> for TyAndLayout<'tcx, Ty<'tcx>> {\n+impl<'tcx> ir::TypeVisitable<'tcx> for TyAndLayout<'tcx, Ty<'tcx>> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         visitor.visit_ty(self.ty)\n     }"}, {"sha": "1976c7875f3b5c292af42503b0af6446b040617f", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -7,8 +7,10 @@ use crate::ty::subst::{GenericArg, InternalSubsts, SubstsRef};\n use crate::ty::visit::ValidateBoundVars;\n use crate::ty::InferTy::*;\n use crate::ty::{\n-    self, AdtDef, DefIdTree, Discr, FallibleTypeFolder, Term, Ty, TyCtxt, TypeFlags, TypeFoldable,\n-    TypeSuperFoldable, TypeSuperVisitable, TypeVisitable, TypeVisitor,\n+    self,\n+    ir::{FallibleTypeFolder, TypeVisitor},\n+    AdtDef, DefIdTree, Discr, Term, Ty, TyCtxt, TypeFlags, TypeFoldable, TypeSuperFoldable,\n+    TypeSuperVisitable, TypeVisitable,\n };\n use crate::ty::{List, ParamEnv};\n use hir::def::DefKind;"}, {"sha": "195befe39f84373811660cc11c86763afdd8aef2", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -1,10 +1,10 @@\n // Type substitutions.\n \n use crate::ty::codec::{TyDecoder, TyEncoder};\n-use crate::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeFolder, TypeSuperFoldable};\n+use crate::ty::fold::{ir::TypeFolder, FallibleTypeFolder, TypeFoldable, TypeSuperFoldable};\n use crate::ty::sty::{ClosureSubsts, GeneratorSubsts, InlineConstSubsts};\n use crate::ty::visit::{TypeVisitable, TypeVisitor};\n-use crate::ty::{self, Lift, List, ParamConst, Ty, TyCtxt};\n+use crate::ty::{self, ir, Lift, List, ParamConst, Ty, TyCtxt};\n \n use rustc_data_structures::intern::Interned;\n use rustc_errors::{DiagnosticArgValue, IntoDiagnosticArg};\n@@ -227,7 +227,7 @@ impl<'a, 'tcx> Lift<'tcx> for GenericArg<'a> {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for GenericArg<'tcx> {\n+impl<'tcx> ir::TypeFoldable<'tcx> for GenericArg<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         match self.unpack() {\n             GenericArgKind::Lifetime(lt) => lt.try_fold_with(folder).map(Into::into),\n@@ -237,7 +237,7 @@ impl<'tcx> TypeFoldable<'tcx> for GenericArg<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeVisitable<'tcx> for GenericArg<'tcx> {\n+impl<'tcx> ir::TypeVisitable<'tcx> for GenericArg<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         match self.unpack() {\n             GenericArgKind::Lifetime(lt) => lt.visit_with(visitor),\n@@ -475,7 +475,7 @@ impl<'tcx> InternalSubsts<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for SubstsRef<'tcx> {\n+impl<'tcx> ir::TypeFoldable<'tcx> for SubstsRef<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         // This code is hot enough that it's worth specializing for the most\n         // common length lists, to avoid the overhead of `SmallVec` creation.\n@@ -503,7 +503,7 @@ impl<'tcx> TypeFoldable<'tcx> for SubstsRef<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<Ty<'tcx>> {\n+impl<'tcx> ir::TypeFoldable<'tcx> for &'tcx ty::List<Ty<'tcx>> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         // This code is fairly hot, though not as hot as `SubstsRef`.\n         //\n@@ -535,7 +535,7 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<Ty<'tcx>> {\n     }\n }\n \n-impl<'tcx, T: TypeVisitable<'tcx>> TypeVisitable<'tcx> for &'tcx ty::List<T> {\n+impl<'tcx, T: TypeVisitable<'tcx>> ir::TypeVisitable<'tcx> for &'tcx ty::List<T> {\n     #[inline]\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|t| t.visit_with(visitor))\n@@ -553,8 +553,8 @@ impl<'tcx, T: TypeVisitable<'tcx>> TypeVisitable<'tcx> for &'tcx ty::List<T> {\n pub struct EarlyBinder<T>(pub T);\n \n /// For early binders, you should first call `subst` before using any visitors.\n-impl<'tcx, T> !TypeFoldable<'tcx> for ty::EarlyBinder<T> {}\n-impl<'tcx, T> !TypeVisitable<'tcx> for ty::EarlyBinder<T> {}\n+impl<'tcx, T> !ir::TypeFoldable<'tcx> for ty::EarlyBinder<T> {}\n+impl<'tcx, T> !ir::TypeVisitable<'tcx> for ty::EarlyBinder<T> {}\n \n impl<T> EarlyBinder<T> {\n     pub fn as_ref(&self) -> EarlyBinder<&T> {"}, {"sha": "5ce6a21137656e57f5edf89f5d6d83b272ac0aba", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -4,8 +4,8 @@ use crate::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use crate::mir;\n use crate::ty::layout::IntegerExt;\n use crate::ty::{\n-    self, DefIdTree, FallibleTypeFolder, Ty, TyCtxt, TypeFoldable, TypeFolder, TypeSuperFoldable,\n-    TypeVisitable,\n+    self, ir::TypeFolder, DefIdTree, FallibleTypeFolder, Ty, TyCtxt, TypeFoldable,\n+    TypeSuperFoldable,\n };\n use crate::ty::{GenericArgKind, SubstsRef};\n use rustc_apfloat::Float as _;"}, {"sha": "c292dc4272042349ea0846ccb81d87c0fe902ecb", "filename": "compiler/rustc_middle/src/ty/visit.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -44,7 +44,9 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sso::SsoHashSet;\n use std::ops::ControlFlow;\n \n-pub use ir::{TypeSuperVisitable, TypeVisitable, TypeVisitor};\n+pub trait TypeVisitable<'tcx> = ir::TypeVisitable<'tcx>;\n+pub trait TypeSuperVisitable<'tcx> = ir::TypeSuperVisitable<'tcx>;\n+pub trait TypeVisitor<'tcx> = ir::TypeVisitor<'tcx>;\n \n pub mod ir {\n     use crate::ty::{self, Binder, Ty, TypeFlags};\n@@ -292,7 +294,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             callback: F,\n         }\n \n-        impl<'tcx, F> TypeVisitor<'tcx> for RegionVisitor<F>\n+        impl<'tcx, F> ir::TypeVisitor<'tcx> for RegionVisitor<F>\n         where\n             F: FnMut(ty::Region<'tcx>) -> bool,\n         {\n@@ -394,7 +396,7 @@ impl<'tcx> ValidateBoundVars<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeVisitor<'tcx> for ValidateBoundVars<'tcx> {\n+impl<'tcx> ir::TypeVisitor<'tcx> for ValidateBoundVars<'tcx> {\n     type BreakTy = ();\n \n     fn visit_binder<T: TypeVisitable<'tcx>>(\n@@ -506,7 +508,7 @@ struct HasEscapingVarsVisitor {\n     outer_index: ty::DebruijnIndex,\n }\n \n-impl<'tcx> TypeVisitor<'tcx> for HasEscapingVarsVisitor {\n+impl<'tcx> ir::TypeVisitor<'tcx> for HasEscapingVarsVisitor {\n     type BreakTy = FoundEscapingVars;\n \n     fn visit_binder<T: TypeVisitable<'tcx>>(\n@@ -583,7 +585,7 @@ impl std::fmt::Debug for HasTypeFlagsVisitor {\n     }\n }\n \n-impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n+impl<'tcx> ir::TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n     type BreakTy = FoundFlags;\n \n     #[inline]\n@@ -653,7 +655,7 @@ impl LateBoundRegionsCollector {\n     }\n }\n \n-impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector {\n+impl<'tcx> ir::TypeVisitor<'tcx> for LateBoundRegionsCollector {\n     fn visit_binder<T: TypeVisitable<'tcx>>(\n         &mut self,\n         t: &Binder<'tcx, T>,\n@@ -715,7 +717,7 @@ impl MaxUniverse {\n     }\n }\n \n-impl<'tcx> TypeVisitor<'tcx> for MaxUniverse {\n+impl<'tcx> ir::TypeVisitor<'tcx> for MaxUniverse {\n     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         if let ty::Placeholder(placeholder) = t.kind() {\n             self.max_universe = ty::UniverseIndex::from_u32("}, {"sha": "83b8988cecaf88dc5cd8e2fb4d4b68ddae875e5d", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -189,9 +189,7 @@ use rustc_middle::ty::adjustment::{CustomCoerceUnsized, PointerCast};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::query::TyCtxtAt;\n use rustc_middle::ty::subst::{GenericArgKind, InternalSubsts};\n-use rustc_middle::ty::{\n-    self, GenericParamDefKind, Instance, Ty, TyCtxt, TypeFoldable, TypeVisitable, VtblEntry,\n-};\n+use rustc_middle::ty::{self, GenericParamDefKind, Instance, Ty, TyCtxt, TypeFoldable, VtblEntry};\n use rustc_middle::{middle::codegen_fn_attrs::CodegenFnAttrFlags, mir::visit::TyContext};\n use rustc_session::config::EntryFnType;\n use rustc_session::lint::builtin::LARGE_ASSIGNMENTS;"}, {"sha": "8589af89e860f65ca9d12a2074889c5573ce004e", "filename": "compiler/rustc_monomorphize/src/polymorphize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -15,7 +15,7 @@ use rustc_middle::ty::{\n     self,\n     query::Providers,\n     subst::SubstsRef,\n-    visit::{TypeSuperVisitable, TypeVisitable, TypeVisitor},\n+    visit::{ir::TypeVisitor, TypeSuperVisitable, TypeVisitable},\n     Const, Ty, TyCtxt, UnusedGenericParams,\n };\n use rustc_span::symbol::sym;"}, {"sha": "b27f02686b0f011ce45418a9b0abd47277b2aa4c", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -28,7 +28,7 @@ use rustc_middle::span_bug;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::{self, Const, DefIdTree, GenericParamDefKind};\n-use rustc_middle::ty::{TraitRef, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor};\n+use rustc_middle::ty::{ir::TypeVisitor, TraitRef, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable};\n use rustc_session::lint;\n use rustc_span::hygiene::Transparency;\n use rustc_span::symbol::{kw, sym, Ident};"}, {"sha": "c0bfe152a1e8c4784c18198fdea606624fc33e31", "filename": "compiler/rustc_trait_selection/src/infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -6,7 +6,7 @@ use rustc_hir::lang_items::LangItem;\n use rustc_middle::arena::ArenaAllocatable;\n use rustc_middle::infer::canonical::{Canonical, CanonicalQueryResponse, QueryResponse};\n use rustc_middle::traits::query::Fallible;\n-use rustc_middle::ty::{self, Ty, TypeFoldable, TypeVisitable};\n+use rustc_middle::ty::{self, Ty, TypeFoldable};\n use rustc_middle::ty::{GenericArg, ToPredicate};\n use rustc_span::{Span, DUMMY_SP};\n "}, {"sha": "3c74224c71b3bf977013e633260c62d76645d986", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -14,7 +14,7 @@ use rustc_infer::traits::specialization_graph::LeafDef;\n use rustc_infer::traits::Reveal;\n use rustc_middle::ty::fast_reject::{DeepRejectCtxt, TreatParams};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n-use rustc_middle::ty::{ProjectionPredicate, TypeSuperVisitable, TypeVisitor};\n+use rustc_middle::ty::{ir::TypeVisitor, ProjectionPredicate, TypeSuperVisitable};\n use rustc_middle::ty::{ToPredicate, TypeVisitable};\n use rustc_span::{sym, DUMMY_SP};\n use std::iter;"}, {"sha": "d134722e89932aa9cc4ece49fa87acc8fcfefe2e", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -8,7 +8,7 @@ use crate::infer::region_constraints::{Constraint, RegionConstraintData};\n use crate::infer::InferCtxt;\n use crate::traits::project::ProjectAndUnifyResult;\n use rustc_middle::mir::interpret::ErrorHandled;\n-use rustc_middle::ty::fold::{TypeFolder, TypeSuperFoldable};\n+use rustc_middle::ty::fold::{ir::TypeFolder, TypeSuperFoldable};\n use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::{ImplPolarity, Region, RegionVid};\n "}, {"sha": "9f69492863157b4dc89fc7d507e8fdffc1de4e90", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -22,7 +22,7 @@ use rustc_infer::traits::util;\n use rustc_middle::traits::specialization_graph::OverlapMode;\n use rustc_middle::ty::fast_reject::{DeepRejectCtxt, TreatParams};\n use rustc_middle::ty::visit::TypeVisitable;\n-use rustc_middle::ty::{self, ImplSubject, Ty, TyCtxt, TypeVisitor};\n+use rustc_middle::ty::{self, ir::TypeVisitor, ImplSubject, Ty, TyCtxt};\n use rustc_span::symbol::sym;\n use rustc_span::DUMMY_SP;\n use std::fmt::Debug;"}, {"sha": "3a23e2eefc28f3d3aba90418deaadc39c87443d4", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -14,7 +14,7 @@ use rustc_middle::mir::interpret::ErrorHandled;\n \n use rustc_middle::traits::ObligationCause;\n use rustc_middle::ty::abstract_const::NotConstEvaluatable;\n-use rustc_middle::ty::{self, TyCtxt, TypeVisitable, TypeVisitor};\n+use rustc_middle::ty::{self, ir::TypeVisitor, TyCtxt, TypeVisitable};\n \n use rustc_span::Span;\n use std::ops::ControlFlow;"}, {"sha": "68b2f36d15e59987d643329ae3b031b119261dcb", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -34,11 +34,10 @@ use rustc_infer::infer::{InferOk, TypeTrace};\n use rustc_middle::traits::select::OverflowError;\n use rustc_middle::ty::abstract_const::NotConstEvaluatable;\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n-use rustc_middle::ty::fold::{TypeFolder, TypeSuperFoldable};\n+use rustc_middle::ty::fold::{ir::TypeFolder, TypeSuperFoldable};\n use rustc_middle::ty::print::{with_forced_trimmed_paths, FmtPrinter, Print};\n use rustc_middle::ty::{\n     self, SubtypePredicate, ToPolyTraitRef, ToPredicate, TraitRef, Ty, TyCtxt, TypeFoldable,\n-    TypeVisitable,\n };\n use rustc_session::config::TraitSolver;\n use rustc_session::Limit;\n@@ -2964,7 +2963,7 @@ impl ArgKind {\n \n struct HasNumericInferVisitor;\n \n-impl<'tcx> ty::TypeVisitor<'tcx> for HasNumericInferVisitor {\n+impl<'tcx> ty::ir::TypeVisitor<'tcx> for HasNumericInferVisitor {\n     type BreakTy = ();\n \n     fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "5b98375cdd8155ff74afddab9cfa03fed22c1519", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -30,10 +30,10 @@ use rustc_middle::hir::map;\n use rustc_middle::ty::error::TypeError::{self, Sorts};\n use rustc_middle::ty::relate::TypeRelation;\n use rustc_middle::ty::{\n-    self, suggest_arbitrary_trait_bound, suggest_constraining_type_param, AdtKind, DefIdTree,\n-    GeneratorDiagnosticData, GeneratorInteriorTypeCause, Infer, InferTy, InternalSubsts,\n-    IsSuggestable, ToPredicate, Ty, TyCtxt, TypeAndMut, TypeFoldable, TypeFolder,\n-    TypeSuperFoldable, TypeVisitable, TypeckResults,\n+    self, ir::TypeFolder, suggest_arbitrary_trait_bound, suggest_constraining_type_param, AdtKind,\n+    DefIdTree, GeneratorDiagnosticData, GeneratorInteriorTypeCause, Infer, InferTy, InternalSubsts,\n+    IsSuggestable, ToPredicate, Ty, TyCtxt, TypeAndMut, TypeFoldable, TypeSuperFoldable,\n+    TypeckResults,\n };\n use rustc_span::def_id::LocalDefId;\n use rustc_span::symbol::{sym, Ident, Symbol};"}, {"sha": "490261dcf5f8d61bd33d1cac34aa3bb1b9624bf9", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -481,7 +481,7 @@ fn is_impossible_method(tcx: TyCtxt<'_>, (impl_def_id, trait_item_def_id): (DefI\n         generics: &'tcx ty::Generics,\n         trait_item_def_id: DefId,\n     }\n-    impl<'tcx> ty::TypeVisitor<'tcx> for ReferencesOnlyParentGenerics<'tcx> {\n+    impl<'tcx> ty::ir::TypeVisitor<'tcx> for ReferencesOnlyParentGenerics<'tcx> {\n         type BreakTy = ();\n         fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n             // If this is a parameter from the trait item's own generics, then bail"}, {"sha": "428dcbf6ea7348fb19729a593b1d332e6b76ff92", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -19,7 +19,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::subst::{GenericArg, InternalSubsts};\n use rustc_middle::ty::{\n-    self, EarlyBinder, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor,\n+    self, ir::TypeVisitor, EarlyBinder, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable,\n };\n use rustc_middle::ty::{Predicate, ToPredicate};\n use rustc_session::lint::builtin::WHERE_CLAUSES_OBJECT_SAFETY;"}, {"sha": "b16fb819466b06ed31189184f4f0306d26f16690", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -30,7 +30,7 @@ use rustc_infer::infer::at::At;\n use rustc_infer::infer::resolve::OpportunisticRegionResolver;\n use rustc_infer::traits::ImplSourceBuiltinData;\n use rustc_middle::traits::select::OverflowError;\n-use rustc_middle::ty::fold::{TypeFoldable, TypeFolder, TypeSuperFoldable};\n+use rustc_middle::ty::fold::{ir::TypeFolder, TypeFoldable, TypeSuperFoldable};\n use rustc_middle::ty::visit::{MaxUniverse, TypeVisitable};\n use rustc_middle::ty::DefIdTree;\n use rustc_middle::ty::{self, Term, ToPredicate, Ty, TyCtxt};"}, {"sha": "30fa473eb0611202c4579a1bd61b51d6ae6ea173", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -11,9 +11,9 @@ use crate::traits::{ObligationCause, PredicateObligation, Reveal};\n use rustc_data_structures::sso::SsoHashMap;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_infer::traits::Normalized;\n-use rustc_middle::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeSuperFoldable};\n+use rustc_middle::ty::fold::{ir::FallibleTypeFolder, TypeFoldable, TypeSuperFoldable};\n use rustc_middle::ty::visit::{TypeSuperVisitable, TypeVisitable};\n-use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitor};\n+use rustc_middle::ty::{self, ir::TypeVisitor, Ty, TyCtxt};\n use rustc_span::DUMMY_SP;\n \n use std::ops::ControlFlow;"}, {"sha": "302adb797668939ee27715c8a475b7976a02ecbb", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -48,7 +48,7 @@ use rustc_middle::ty::fold::BottomUpFolder;\n use rustc_middle::ty::relate::TypeRelation;\n use rustc_middle::ty::SubstsRef;\n use rustc_middle::ty::{self, EarlyBinder, PolyProjectionPredicate, ToPolyTraitRef, ToPredicate};\n-use rustc_middle::ty::{Ty, TyCtxt, TypeFoldable, TypeVisitable};\n+use rustc_middle::ty::{Ty, TyCtxt, TypeFoldable};\n use rustc_session::config::TraitSolver;\n use rustc_span::symbol::sym;\n "}, {"sha": "53570295d8b82fd9081d3510dfd8c4894268ded2", "filename": "compiler/rustc_trait_selection/src/traits/structural_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -1,6 +1,6 @@\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n-use rustc_middle::ty::{self, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor};\n+use rustc_middle::ty::{self, ir::TypeVisitor, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable};\n use rustc_span::Span;\n use std::ops::ControlFlow;\n "}, {"sha": "5e32b23fdcaaeaa84b763533211e67eaa879a2c7", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -769,7 +769,7 @@ struct ReplaceOpaqueTyFolder<'tcx> {\n     binder_index: ty::DebruijnIndex,\n }\n \n-impl<'tcx> ty::TypeFolder<'tcx> for ReplaceOpaqueTyFolder<'tcx> {\n+impl<'tcx> ty::ir::TypeFolder<'tcx> for ReplaceOpaqueTyFolder<'tcx> {\n     fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n         self.tcx\n     }"}, {"sha": "743320e248d96aa6a9ca11424d419044b5aa5da3", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -35,8 +35,9 @@ use rustc_ast::ast;\n use rustc_middle::traits::{ChalkEnvironmentAndGoal, ChalkRustInterner as RustInterner};\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, SubstsRef};\n use rustc_middle::ty::{\n-    self, Binder, Region, Ty, TyCtxt, TypeFoldable, TypeFolder, TypeSuperFoldable,\n-    TypeSuperVisitable, TypeVisitable, TypeVisitor,\n+    self,\n+    ir::{TypeFolder, TypeVisitor},\n+    Binder, Region, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable, TypeSuperVisitable, TypeVisitable,\n };\n use rustc_span::def_id::DefId;\n "}, {"sha": "f33f9edd6279edd84c1a2a3e9632b64b47d58c89", "filename": "compiler/rustc_traits/src/chalk/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -9,7 +9,7 @@ pub(crate) mod lowering;\n use rustc_middle::infer::canonical::{CanonicalTyVarKind, CanonicalVarKind};\n use rustc_middle::traits::ChalkRustInterner;\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::{self, TyCtxt, TypeFoldable, TypeVisitable};\n+use rustc_middle::ty::{self, TyCtxt, TypeFoldable};\n \n use rustc_infer::infer::canonical::{\n     Canonical, CanonicalVarValues, Certainty, QueryRegionConstraints, QueryResponse,"}, {"sha": "bf3bbeb2dd13361342a7047535172f4d536890ca", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -20,7 +20,7 @@ use rustc_hir::PredicateOrigin;\n use rustc_hir_analysis::hir_ty_to_ty;\n use rustc_infer::infer::region_constraints::{Constraint, RegionConstraintData};\n use rustc_middle::middle::resolve_lifetime as rl;\n-use rustc_middle::ty::fold::TypeFolder;\n+use rustc_middle::ty::fold::ir::TypeFolder;\n use rustc_middle::ty::InternalSubsts;\n use rustc_middle::ty::TypeVisitable;\n use rustc_middle::ty::{self, AdtKind, DefIdTree, EarlyBinder, Ty, TyCtxt};"}, {"sha": "fd9c83759a9c236d2fbdd6c2973e14618cb61b9b", "filename": "src/tools/clippy/clippy_utils/src/mir/possible_borrower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fmir%2Fpossible_borrower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fmir%2Fpossible_borrower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fmir%2Fpossible_borrower.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -4,7 +4,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_index::bit_set::{BitSet, HybridBitSet};\n use rustc_lint::LateContext;\n use rustc_middle::mir::{self, visit::Visitor as _, Mutability};\n-use rustc_middle::ty::{self, visit::TypeVisitor};\n+use rustc_middle::ty::{self, visit::ir::TypeVisitor};\n use rustc_mir_dataflow::{impls::MaybeStorageLive, Analysis, ResultsCursor};\n use std::borrow::Cow;\n use std::ops::ControlFlow;"}, {"sha": "1635b75f718f2e750b8752228424e2e40293f102", "filename": "src/tools/clippy/clippy_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -17,7 +17,7 @@ use rustc_lint::LateContext;\n use rustc_middle::mir::interpret::{ConstValue, Scalar};\n use rustc_middle::ty::{\n     self, AdtDef, AliasTy, AssocKind, Binder, BoundRegion, DefIdTree, FnSig, IntTy, List, ParamEnv, Predicate,\n-    PredicateKind, Region, RegionKind, SubstsRef, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor, UintTy,\n+    PredicateKind, Region, RegionKind, SubstsRef, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, ir::TypeVisitor, UintTy,\n     VariantDef, VariantDiscr,\n };\n use rustc_middle::ty::{GenericArg, GenericArgKind};"}, {"sha": "99eed29207b4aae563341d38da650bf6cd7080d3", "filename": "tests/ui/impl-trait/normalize-tait-in-const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba55a453eba195fa3fae02b636abcf2bf9f59b95/tests%2Fui%2Fimpl-trait%2Fnormalize-tait-in-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba55a453eba195fa3fae02b636abcf2bf9f59b95/tests%2Fui%2Fimpl-trait%2Fnormalize-tait-in-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fnormalize-tait-in-const.stderr?ref=ba55a453eba195fa3fae02b636abcf2bf9f59b95", "patch": "@@ -1,4 +1,4 @@\n-error: internal compiler error: compiler/rustc_middle/src/ty/normalize_erasing_regions.rs:198:90: Failed to normalize <for<'a, 'b> fn(&'a Alias<'b>) {foo} as std::ops::FnOnce<(&&S,)>>::Output, maybe try to call `try_normalize_erasing_regions` instead\n+error: internal compiler error: compiler/rustc_middle/src/ty/normalize_erasing_regions.rs:201:90: Failed to normalize <for<'a, 'b> fn(&'a Alias<'b>) {foo} as std::ops::FnOnce<(&&S,)>>::Output, maybe try to call `try_normalize_erasing_regions` instead\n \n query stack during panic:\n #0 [eval_to_allocation_raw] const-evaluating + checking `BAR`"}]}