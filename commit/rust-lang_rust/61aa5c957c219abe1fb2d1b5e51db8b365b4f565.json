{"sha": "61aa5c957c219abe1fb2d1b5e51db8b365b4f565", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxYWE1Yzk1N2MyMTlhYmUxZmIyZDFiNWU1MWRiOGIzNjViNGY1NjU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2019-03-23T23:53:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-23T23:53:01Z"}, "message": "Merge pull request #3902 from matthiaskrgr/rustup\n\nrustup https://github.com/rust-lang/rust/pull/59096/", "tree": {"sha": "9d702113246499acd6586b533d6fe7d877e0fa54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d702113246499acd6586b533d6fe7d877e0fa54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61aa5c957c219abe1fb2d1b5e51db8b365b4f565", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJclsbdCRBK7hj4Ov3rIwAAdHIIAB9AXCafLLoT5z9Dx1w5ABCd\nan8UTi5fi7PhLtezImth/Ey+UHcA+ZwXezCglvGf/GJTw6XTa4DFRrNlnxl2pwOm\noFIfSk3fx6uHYbfa5+YPGGmnQCphfOgkWqs1DKyYZXSXMuEAPPhbGjR6uVc6UOwX\nv98AuJrKiZfwPNHaweSllWIqViWe3G9dgIIbtUHd6dAaDU+4tZ+4LLVhuODZ/h9n\nEw2/lyBPVo67w2Y83CPKqJ6sCwoFzWPN5x60ZX0IDjc5MbKSRZA2mBElWV1TMMTx\n0uAQBolgbtbgwb5+siA3192ZgBZuBJSmBuz+ZohlQu+Tr3d9mVDbNTO17idzk9o=\n=m9mv\n-----END PGP SIGNATURE-----\n", "payload": "tree 9d702113246499acd6586b533d6fe7d877e0fa54\nparent c7d444508655eab132f0d24d81f9cdc08b848056\nparent b5d82524b4761775533520955574b8eff2fbf480\nauthor Manish Goregaokar <manishsmail@gmail.com> 1553385181 -0700\ncommitter GitHub <noreply@github.com> 1553385181 -0700\n\nMerge pull request #3902 from matthiaskrgr/rustup\n\nrustup https://github.com/rust-lang/rust/pull/59096/"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61aa5c957c219abe1fb2d1b5e51db8b365b4f565", "html_url": "https://github.com/rust-lang/rust/commit/61aa5c957c219abe1fb2d1b5e51db8b365b4f565", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61aa5c957c219abe1fb2d1b5e51db8b365b4f565/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7d444508655eab132f0d24d81f9cdc08b848056", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7d444508655eab132f0d24d81f9cdc08b848056", "html_url": "https://github.com/rust-lang/rust/commit/c7d444508655eab132f0d24d81f9cdc08b848056"}, {"sha": "b5d82524b4761775533520955574b8eff2fbf480", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5d82524b4761775533520955574b8eff2fbf480", "html_url": "https://github.com/rust-lang/rust/commit/b5d82524b4761775533520955574b8eff2fbf480"}], "stats": {"total": 31, "additions": 11, "deletions": 20}, "files": [{"sha": "4313d040474a96d3c699e407015fb2bb3b0dea36", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/61aa5c957c219abe1fb2d1b5e51db8b365b4f565/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61aa5c957c219abe1fb2d1b5e51db8b365b4f565/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=61aa5c957c219abe1fb2d1b5e51db8b365b4f565", "patch": "@@ -256,8 +256,7 @@ impl<'a, 'tcx> Functions {\n         hir_id: hir::HirId,\n     ) {\n         let expr = &body.value;\n-        let node_id = cx.tcx.hir().hir_to_node_id(hir_id);\n-        if unsafety == hir::Unsafety::Normal && cx.access_levels.is_exported(node_id) {\n+        if unsafety == hir::Unsafety::Normal && cx.access_levels.is_exported(hir_id) {\n             let raw_ptrs = iter_input_pats(decl, body)\n                 .zip(decl.inputs.iter())\n                 .filter_map(|(arg, ty)| raw_ptr_arg(arg, ty))"}, {"sha": "177c85adde583a4c19435f6390f42533750a0a24", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/61aa5c957c219abe1fb2d1b5e51db8b365b4f565/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61aa5c957c219abe1fb2d1b5e51db8b365b4f565/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=61aa5c957c219abe1fb2d1b5e51db8b365b4f565", "patch": "@@ -148,9 +148,7 @@ fn check_trait_items(cx: &LateContext<'_, '_>, visited_trait: &Item, trait_items\n         }\n     }\n \n-    let trait_node_id = cx.tcx.hir().hir_to_node_id(visited_trait.hir_id);\n-\n-    if cx.access_levels.is_exported(trait_node_id) && trait_items.iter().any(|i| is_named_self(cx, i, \"len\")) {\n+    if cx.access_levels.is_exported(visited_trait.hir_id) && trait_items.iter().any(|i| is_named_self(cx, i, \"len\")) {\n         let mut current_and_super_traits = FxHashSet::default();\n         let visited_trait_def_id = cx.tcx.hir().local_def_id_from_hir_id(visited_trait.hir_id);\n         fill_trait_set(visited_trait_def_id, &mut current_and_super_traits, cx);\n@@ -193,10 +191,7 @@ fn check_impl_items(cx: &LateContext<'_, '_>, item: &Item, impl_items: &[ImplIte\n     }\n \n     let is_empty = if let Some(is_empty) = impl_items.iter().find(|i| is_named_self(cx, i, \"is_empty\")) {\n-        if cx\n-            .access_levels\n-            .is_exported(cx.tcx.hir().hir_to_node_id(is_empty.id.hir_id))\n-        {\n+        if cx.access_levels.is_exported(is_empty.id.hir_id) {\n             return;\n         } else {\n             \"a private\"\n@@ -206,7 +201,7 @@ fn check_impl_items(cx: &LateContext<'_, '_>, item: &Item, impl_items: &[ImplIte\n     };\n \n     if let Some(i) = impl_items.iter().find(|i| is_named_self(cx, i, \"len\")) {\n-        if cx.access_levels.is_exported(cx.tcx.hir().hir_to_node_id(i.id.hir_id)) {\n+        if cx.access_levels.is_exported(i.id.hir_id) {\n             let def_id = cx.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n             let ty = cx.tcx.type_of(def_id);\n "}, {"sha": "858184d7ea16c673bcb5382b841f969b6ccd4c1b", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/61aa5c957c219abe1fb2d1b5e51db8b365b4f565/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61aa5c957c219abe1fb2d1b5e51db8b365b4f565/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=61aa5c957c219abe1fb2d1b5e51db8b365b4f565", "patch": "@@ -918,8 +918,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             if let Some(first_arg) = iter_input_pats(&sig.decl, cx.tcx.hir().body(id)).next();\n             if let hir::ItemKind::Impl(_, _, _, _, None, ref self_ty, _) = item.node;\n             then {\n-                let node_id = cx.tcx.hir().hir_to_node_id(implitem.hir_id);\n-                if cx.access_levels.is_exported(node_id) {\n+                if cx.access_levels.is_exported(implitem.hir_id) {\n                 // check missing trait implementations\n                     for &(method_name, n_args, self_kind, out_type, trait_name) in &TRAIT_METHODS {\n                         if name == method_name &&"}, {"sha": "090ed6d242d149ff950cf1a9e21ea443fa7b64d5", "filename": "clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/61aa5c957c219abe1fb2d1b5e51db8b365b4f565/clippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61aa5c957c219abe1fb2d1b5e51db8b365b4f565/clippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_inline.rs?ref=61aa5c957c219abe1fb2d1b5e51db8b365b4f565", "patch": "@@ -95,7 +95,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingInline {\n             return;\n         }\n \n-        if !cx.access_levels.is_exported(cx.tcx.hir().hir_to_node_id(it.hir_id)) {\n+        if !cx.access_levels.is_exported(it.hir_id) {\n             return;\n         }\n         match it.node {\n@@ -146,8 +146,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingInline {\n         }\n \n         // If the item being implemented is not exported, then we don't need #[inline]\n-        let node_id = cx.tcx.hir().hir_to_node_id(impl_item.hir_id);\n-        if !cx.access_levels.is_exported(node_id) {\n+        if !cx.access_levels.is_exported(impl_item.hir_id) {\n             return;\n         }\n \n@@ -163,8 +162,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingInline {\n         };\n \n         if let Some(trait_def_id) = trait_def_id {\n-            if let Some(n) = cx.tcx.hir().as_local_node_id(trait_def_id) {\n-                if !cx.access_levels.is_exported(n) {\n+            if cx.tcx.hir().as_local_node_id(trait_def_id).is_some() {\n+                if !cx.access_levels.is_exported(impl_item.hir_id) {\n                     // If a trait is being implemented for an item, and the\n                     // trait is not exported, we don't need #[inline]\n                     return;"}, {"sha": "3bf0c22c322c58b0987ddbce86e85e2f66a11c57", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/61aa5c957c219abe1fb2d1b5e51db8b365b4f565/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61aa5c957c219abe1fb2d1b5e51db8b365b4f565/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=61aa5c957c219abe1fb2d1b5e51db8b365b4f565", "patch": "@@ -111,7 +111,6 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NewWithoutDefault {\n                     if let hir::ImplItemKind::Method(ref sig, _) = impl_item.node {\n                         let name = impl_item.ident.name;\n                         let id = impl_item.hir_id;\n-                        let node_id = cx.tcx.hir().hir_to_node_id(id);\n                         if sig.header.constness == hir::Constness::Const {\n                             // can't be implemented by default\n                             return;\n@@ -129,7 +128,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NewWithoutDefault {\n                             // impl of `Default`\n                             return;\n                         }\n-                        if sig.decl.inputs.is_empty() && name == \"new\" && cx.access_levels.is_reachable(node_id) {\n+                        if sig.decl.inputs.is_empty() && name == \"new\" && cx.access_levels.is_reachable(id) {\n                             let self_did = cx.tcx.hir().local_def_id_from_hir_id(cx.tcx.hir().get_parent_item(id));\n                             let self_ty = cx.tcx.type_of(self_did);\n                             if_chain! {"}, {"sha": "33dea622b3587c48f3bb87e5adc0d3ca0d3519f1", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61aa5c957c219abe1fb2d1b5e51db8b365b4f565/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61aa5c957c219abe1fb2d1b5e51db8b365b4f565/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=61aa5c957c219abe1fb2d1b5e51db8b365b4f565", "patch": "@@ -2075,7 +2075,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImplicitHasher {\n             }\n         }\n \n-        if !cx.access_levels.is_exported(cx.tcx.hir().hir_to_node_id(item.hir_id)) {\n+        if !cx.access_levels.is_exported(item.hir_id) {\n             return;\n         }\n "}]}