{"sha": "01c890ee961aa18e2bfea5c07f4cdd9a29053479", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxYzg5MGVlOTYxYWExOGUyYmZlYTVjMDdmNGNkZDlhMjkwNTM0Nzk=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2017-12-23T03:41:09Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2018-01-10T01:20:50Z"}, "message": "[incremental] Specialize encoding and decoding of Fingerprints\n\nThis saves the storage space used by about 32 bits per `Fingerprint`.\nOn average, this reduces the size of the `/target/{mode}/incremental`\nfolder by roughly 5%.\n\nFixes #45875", "tree": {"sha": "c0ad85a7ec52c381088e8107ee6b8f01869bbe88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0ad85a7ec52c381088e8107ee6b8f01869bbe88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01c890ee961aa18e2bfea5c07f4cdd9a29053479", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01c890ee961aa18e2bfea5c07f4cdd9a29053479", "html_url": "https://github.com/rust-lang/rust/commit/01c890ee961aa18e2bfea5c07f4cdd9a29053479", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01c890ee961aa18e2bfea5c07f4cdd9a29053479/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc2424b988c926004b93c28524be7f8a9388bdf7", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc2424b988c926004b93c28524be7f8a9388bdf7", "html_url": "https://github.com/rust-lang/rust/commit/fc2424b988c926004b93c28524be7f8a9388bdf7"}], "stats": {"total": 72, "additions": 67, "deletions": 5}, "files": [{"sha": "a7adf28c481b95c3fa352aa6345254df6f6a15be", "filename": "src/librustc/ich/fingerprint.rs", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/01c890ee961aa18e2bfea5c07f4cdd9a29053479/src%2Flibrustc%2Fich%2Ffingerprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c890ee961aa18e2bfea5c07f4cdd9a29053479/src%2Flibrustc%2Fich%2Ffingerprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Ffingerprint.rs?ref=01c890ee961aa18e2bfea5c07f4cdd9a29053479", "patch": "@@ -8,9 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::mem;\n use rustc_data_structures::stable_hasher;\n+use serialize;\n+use serialize::opaque::{EncodeResult, Encoder, Decoder};\n \n-#[derive(Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Clone, Copy, RustcEncodable, RustcDecodable)]\n+#[derive(Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Clone, Copy)]\n pub struct Fingerprint(u64, u64);\n \n impl Fingerprint {\n@@ -46,6 +49,21 @@ impl Fingerprint {\n         format!(\"{:x}{:x}\", self.0, self.1)\n     }\n \n+    pub fn encode_opaque(&self, encoder: &mut Encoder) -> EncodeResult {\n+        let bytes: [u8; 16] = unsafe { mem::transmute([self.0.to_le(), self.1.to_le()]) };\n+\n+        encoder.emit_raw_bytes(&bytes)\n+    }\n+\n+    pub fn decode_opaque<'a>(decoder: &mut Decoder<'a>) -> Result<Fingerprint, String> {\n+        let mut bytes = [0; 16];\n+\n+        decoder.read_raw_bytes(&mut bytes)?;\n+\n+        let [l, r]: [u64; 2] = unsafe { mem::transmute(bytes) };\n+\n+        Ok(Fingerprint(u64::from_le(l), u64::from_le(r)))\n+    }\n }\n \n impl ::std::fmt::Display for Fingerprint {\n@@ -69,3 +87,19 @@ impl<CTX> stable_hasher::HashStable<CTX> for Fingerprint {\n         ::std::hash::Hash::hash(self, hasher);\n     }\n }\n+\n+impl serialize::UseSpecializedEncodable for Fingerprint { }\n+\n+impl serialize::UseSpecializedDecodable for Fingerprint { }\n+\n+impl<'a> serialize::SpecializedEncoder<Fingerprint> for serialize::opaque::Encoder<'a> {\n+    fn specialized_encode(&mut self, f: &Fingerprint) -> Result<(), Self::Error> {\n+        f.encode_opaque(self)\n+    }\n+}\n+\n+impl<'a> serialize::SpecializedDecoder<Fingerprint> for serialize::opaque::Decoder<'a> {\n+    fn specialized_decode(&mut self) -> Result<Fingerprint, Self::Error> {\n+        Fingerprint::decode_opaque(self)\n+    }\n+}"}, {"sha": "cd796d3ad963a19daed504c3cfcb98cad6787e67", "filename": "src/librustc/ty/maps/on_disk_cache.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/01c890ee961aa18e2bfea5c07f4cdd9a29053479/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c890ee961aa18e2bfea5c07f4cdd9a29053479/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs?ref=01c890ee961aa18e2bfea5c07f4cdd9a29053479", "patch": "@@ -14,7 +14,7 @@ use hir;\n use hir::def_id::{CrateNum, DefIndex, DefId, LocalDefId,\n                   RESERVED_FOR_INCR_COMP_CACHE, LOCAL_CRATE};\n use hir::map::definitions::DefPathHash;\n-use ich::CachingCodemapView;\n+use ich::{CachingCodemapView, Fingerprint};\n use mir;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n@@ -660,6 +660,12 @@ impl<'a, 'tcx, 'x> SpecializedDecoder<NodeId> for CacheDecoder<'a, 'tcx, 'x> {\n     }\n }\n \n+impl<'a, 'tcx, 'x> SpecializedDecoder<Fingerprint> for CacheDecoder<'a, 'tcx, 'x> {\n+    fn specialized_decode(&mut self) -> Result<Fingerprint, Self::Error> {\n+        Fingerprint::decode_opaque(&mut self.opaque)\n+    }\n+}\n+\n impl<'a, 'tcx, 'x, T: Decodable> SpecializedDecoder<mir::ClearCrossCrate<T>>\n for CacheDecoder<'a, 'tcx, 'x> {\n     #[inline]\n@@ -879,6 +885,14 @@ impl<'enc, 'a, 'tcx, E> SpecializedEncoder<NodeId> for CacheEncoder<'enc, 'a, 't\n     }\n }\n \n+impl<'enc, 'a, 'tcx> SpecializedEncoder<Fingerprint>\n+for CacheEncoder<'enc, 'a, 'tcx, opaque::Encoder<'enc>>\n+{\n+    fn specialized_encode(&mut self, f: &Fingerprint) -> Result<(), Self::Error> {\n+        f.encode_opaque(&mut self.encoder)\n+    }\n+}\n+\n impl<'enc, 'a, 'tcx, E, T> SpecializedEncoder<mir::ClearCrossCrate<T>>\n for CacheEncoder<'enc, 'a, 'tcx, E>\n     where E: 'enc + ty_codec::TyEncoder,"}, {"sha": "48a3d36e5ed0e453441f2e3dc50e01a71c9767f2", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/01c890ee961aa18e2bfea5c07f4cdd9a29053479/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c890ee961aa18e2bfea5c07f4cdd9a29053479/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=01c890ee961aa18e2bfea5c07f4cdd9a29053479", "patch": "@@ -336,6 +336,12 @@ impl<'a, 'tcx> SpecializedDecoder<Span> for DecodeContext<'a, 'tcx> {\n     }\n }\n \n+impl<'a, 'tcx> SpecializedDecoder<Fingerprint> for DecodeContext<'a, 'tcx> {\n+    fn specialized_decode(&mut self) -> Result<Fingerprint, Self::Error> {\n+        Fingerprint::decode_opaque(&mut self.opaque)\n+    }\n+}\n+\n impl<'a, 'tcx, T: Decodable> SpecializedDecoder<mir::ClearCrossCrate<T>>\n for DecodeContext<'a, 'tcx> {\n     #[inline]"}, {"sha": "52ebc25940aca1583fb69d4c2950d4f076ba2b4a", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/01c890ee961aa18e2bfea5c07f4cdd9a29053479/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c890ee961aa18e2bfea5c07f4cdd9a29053479/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=01c890ee961aa18e2bfea5c07f4cdd9a29053479", "patch": "@@ -18,6 +18,7 @@ use rustc::middle::cstore::{LinkMeta, LinkagePreference, NativeLibrary,\n use rustc::hir::def::CtorKind;\n use rustc::hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefIndex, DefId, LOCAL_CRATE};\n use rustc::hir::map::definitions::DefPathTable;\n+use rustc::ich::Fingerprint;\n use rustc::middle::dependency_format::Linkage;\n use rustc::middle::lang_items;\n use rustc::mir;\n@@ -154,6 +155,12 @@ impl<'a, 'tcx> SpecializedEncoder<ty::GenericPredicates<'tcx>> for EncodeContext\n     }\n }\n \n+impl<'a, 'tcx> SpecializedEncoder<Fingerprint> for EncodeContext<'a, 'tcx> {\n+    fn specialized_encode(&mut self, f: &Fingerprint) -> Result<(), Self::Error> {\n+        f.encode_opaque(&mut self.opaque)\n+    }\n+}\n+\n impl<'a, 'tcx, T: Encodable> SpecializedEncoder<mir::ClearCrossCrate<T>>\n for EncodeContext<'a, 'tcx> {\n     fn specialized_encode(&mut self,"}, {"sha": "409366102bacd81e2678169a152c6c69e4f6dd0d", "filename": "src/libserialize/opaque.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/01c890ee961aa18e2bfea5c07f4cdd9a29053479/src%2Flibserialize%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c890ee961aa18e2bfea5c07f4cdd9a29053479/src%2Flibserialize%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fopaque.rs?ref=01c890ee961aa18e2bfea5c07f4cdd9a29053479", "patch": "@@ -175,11 +175,12 @@ impl<'a> Decoder<'a> {\n     }\n \n     pub fn read_raw_bytes(&mut self, s: &mut [u8]) -> Result<(), String> {\n-        let len = s.len();\n+        let start = self.position;\n+        let end = start + s.len();\n \n-        self.position += len;\n+        s.copy_from_slice(&self.data[start..end]);\n \n-        s.copy_from_slice(&self.data[0..len]);\n+        self.position = end;\n \n         Ok(())\n     }"}]}