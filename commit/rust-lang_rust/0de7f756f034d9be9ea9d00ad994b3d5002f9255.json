{"sha": "0de7f756f034d9be9ea9d00ad994b3d5002f9255", "node_id": "C_kwDOAAsO6NoAKDBkZTdmNzU2ZjAzNGQ5YmU5ZWE5ZDAwYWQ5OTRiM2Q1MDAyZjkyNTU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-03T20:29:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-03T20:29:27Z"}, "message": "Rollup merge of #99746 - compiler-errors:more-trait-engine, r=jackh726\n\nUse `TraitEngine` in more places that don't specifically need `FulfillmentContext::new_in_snapshot`\n\nNot sure if this change is worthwhile, but couldn't hurt re: chalkification\n\nr? types", "tree": {"sha": "81bd13fdcc06674912638adfe86172270a5746a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81bd13fdcc06674912638adfe86172270a5746a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0de7f756f034d9be9ea9d00ad994b3d5002f9255", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi6tqoCRBK7hj4Ov3rIwAABZ4IACgBQZ/ubQPj9umwYjjFyBg7\nkmvmNO73tX7zdSsycEzQd6Alu6V2gFQtdYG2bGk9uULB0mmsornUujVWAaiYxEED\nbIqjaiUjfWmsnBa4XCyuqntK/klZmAXQMdkytSiYsl/bhrXPfNN4d1WuSz1OgO4Q\nPRup4udXAKBzDcjNsVhF5Mgp1HSKZxvMsxDlj1tdMkLo/TlTMxOXlQOwkddWAYsJ\nehBEdFBOkKDCU6MIRx+m45UZXWbKhfy0LMJaTAEV18lq0MF2J5mjlkoqgLNO4D0s\nuwY8tNGvgvmjjuXvlctHRpwNj/1I+T2hPgNahKlqrJxJrh/hUrBi1fK0x7C8KDo=\n=GN4+\n-----END PGP SIGNATURE-----\n", "payload": "tree 81bd13fdcc06674912638adfe86172270a5746a1\nparent 88e9417156629a2d2dd0d32ac107560572b26366\nparent 58f107ab567a4cbf167151d0cc5dbe7fcf51762e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1659558567 +0200\ncommitter GitHub <noreply@github.com> 1659558567 +0200\n\nRollup merge of #99746 - compiler-errors:more-trait-engine, r=jackh726\n\nUse `TraitEngine` in more places that don't specifically need `FulfillmentContext::new_in_snapshot`\n\nNot sure if this change is worthwhile, but couldn't hurt re: chalkification\n\nr? types\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0de7f756f034d9be9ea9d00ad994b3d5002f9255", "html_url": "https://github.com/rust-lang/rust/commit/0de7f756f034d9be9ea9d00ad994b3d5002f9255", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0de7f756f034d9be9ea9d00ad994b3d5002f9255/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88e9417156629a2d2dd0d32ac107560572b26366", "url": "https://api.github.com/repos/rust-lang/rust/commits/88e9417156629a2d2dd0d32ac107560572b26366", "html_url": "https://github.com/rust-lang/rust/commit/88e9417156629a2d2dd0d32ac107560572b26366"}, {"sha": "58f107ab567a4cbf167151d0cc5dbe7fcf51762e", "url": "https://api.github.com/repos/rust-lang/rust/commits/58f107ab567a4cbf167151d0cc5dbe7fcf51762e", "html_url": "https://github.com/rust-lang/rust/commit/58f107ab567a4cbf167151d0cc5dbe7fcf51762e"}], "stats": {"total": 45, "additions": 23, "deletions": 22}, "files": [{"sha": "c8a63c9c3f8d34b2b49d12bcb84397ac29d8844d", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0de7f756f034d9be9ea9d00ad994b3d5002f9255/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0de7f756f034d9be9ea9d00ad994b3d5002f9255/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=0de7f756f034d9be9ea9d00ad994b3d5002f9255", "patch": "@@ -10,7 +10,7 @@ use rustc_middle::mir::*;\n use rustc_middle::ty::{self, subst::SubstsRef, AdtDef, Ty};\n use rustc_span::DUMMY_SP;\n use rustc_trait_selection::traits::{\n-    self, FulfillmentContext, ImplSource, Obligation, ObligationCause, SelectionContext,\n+    self, ImplSource, Obligation, ObligationCause, SelectionContext, TraitEngineExt,\n };\n \n use super::ConstCx;\n@@ -191,7 +191,7 @@ impl Qualif for NeedsNonConstDrop {\n \n             // If we successfully found one, then select all of the predicates\n             // implied by our const drop impl.\n-            let mut fcx = FulfillmentContext::new();\n+            let mut fcx = <dyn TraitEngine<'tcx>>::new(cx.tcx);\n             for nested in impl_src.nested_obligations() {\n                 fcx.register_predicate_obligation(&infcx, nested);\n             }"}, {"sha": "294c81d0b2111590f5e408a6a2d1d42b7f2cee8d", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0de7f756f034d9be9ea9d00ad994b3d5002f9255/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0de7f756f034d9be9ea9d00ad994b3d5002f9255/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=0de7f756f034d9be9ea9d00ad994b3d5002f9255", "patch": "@@ -205,7 +205,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n             // At this point, we already have all of the bounds we need. FulfillmentContext is used\n             // to store all of the necessary region/lifetime bounds in the InferContext, as well as\n             // an additional sanity check.\n-            let mut fulfill = FulfillmentContext::new();\n+            let mut fulfill = <dyn TraitEngine<'tcx>>::new(tcx);\n             fulfill.register_bound(&infcx, full_env, ty, trait_did, ObligationCause::dummy());\n             let errors = fulfill.select_all_or_error(&infcx);\n "}, {"sha": "c0700748c79f9d7df78b0bf21458e92ebd509974", "filename": "compiler/rustc_trait_selection/src/traits/codegen.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0de7f756f034d9be9ea9d00ad994b3d5002f9255/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0de7f756f034d9be9ea9d00ad994b3d5002f9255/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs?ref=0de7f756f034d9be9ea9d00ad994b3d5002f9255", "patch": "@@ -5,7 +5,7 @@\n \n use crate::infer::{DefiningAnchor, TyCtxtInferExt};\n use crate::traits::{\n-    FulfillmentContext, ImplSource, Obligation, ObligationCause, SelectionContext, TraitEngine,\n+    ImplSource, Obligation, ObligationCause, SelectionContext, TraitEngine, TraitEngineExt,\n     Unimplemented,\n };\n use rustc_middle::traits::CodegenObligationError;\n@@ -53,7 +53,7 @@ pub fn codegen_fulfill_obligation<'tcx>(\n         // Currently, we use a fulfillment context to completely resolve\n         // all nested obligations. This is because they can inform the\n         // inference of the impl's type parameters.\n-        let mut fulfill_cx = FulfillmentContext::new();\n+        let mut fulfill_cx = <dyn TraitEngine<'tcx>>::new(tcx);\n         let impl_source = selection.map(|predicate| {\n             fulfill_cx.register_predicate_obligation(&infcx, predicate);\n         });"}, {"sha": "1c8cdf4ca8fff52aa9f44ab4f868d53b012a9593", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0de7f756f034d9be9ea9d00ad994b3d5002f9255/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0de7f756f034d9be9ea9d00ad994b3d5002f9255/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=0de7f756f034d9be9ea9d00ad994b3d5002f9255", "patch": "@@ -11,7 +11,7 @@ use crate::traits::util::impl_subject_and_oblig;\n use crate::traits::SkipLeakCheck;\n use crate::traits::{\n     self, FulfillmentContext, Normalized, Obligation, ObligationCause, PredicateObligation,\n-    PredicateObligations, SelectionContext,\n+    PredicateObligations, SelectionContext, TraitEngineExt,\n };\n use rustc_data_structures::fx::FxIndexSet;\n use rustc_errors::Diagnostic;\n@@ -385,7 +385,7 @@ fn resolve_negative_obligation<'cx, 'tcx>(\n         return false;\n     };\n \n-    let mut fulfillment_cx = FulfillmentContext::new();\n+    let mut fulfillment_cx = <dyn TraitEngine<'tcx>>::new(infcx.tcx);\n     fulfillment_cx.register_predicate_obligation(infcx, o);\n \n     let errors = fulfillment_cx.select_all_or_error(infcx);"}, {"sha": "9c6bb0731f441583c18b7cb9fe7d69869eb0f293", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0de7f756f034d9be9ea9d00ad994b3d5002f9255/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0de7f756f034d9be9ea9d00ad994b3d5002f9255/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=0de7f756f034d9be9ea9d00ad994b3d5002f9255", "patch": "@@ -164,7 +164,7 @@ pub fn type_known_to_meet_bound_modulo_regions<'a, 'tcx>(\n         // The handling of regions in this area of the code is terrible,\n         // see issue #29149. We should be able to improve on this with\n         // NLL.\n-        let mut fulfill_cx = FulfillmentContext::new();\n+        let mut fulfill_cx = <dyn TraitEngine<'tcx>>::new(infcx.tcx);\n \n         // We can use a dummy node-id here because we won't pay any mind\n         // to region obligations that arise (there shouldn't really be any"}, {"sha": "28a1cb273a72fe60cb545cd0e9d58cff1ff855f6", "filename": "compiler/rustc_trait_selection/src/traits/specialize/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0de7f756f034d9be9ea9d00ad994b3d5002f9255/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0de7f756f034d9be9ea9d00ad994b3d5002f9255/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs?ref=0de7f756f034d9be9ea9d00ad994b3d5002f9255", "patch": "@@ -14,7 +14,9 @@ use specialization_graph::GraphExt;\n \n use crate::infer::{InferCtxt, InferOk, TyCtxtInferExt};\n use crate::traits::select::IntercrateAmbiguityCause;\n-use crate::traits::{self, coherence, FutureCompatOverlapErrorKind, ObligationCause, TraitEngine};\n+use crate::traits::{\n+    self, coherence, FutureCompatOverlapErrorKind, ObligationCause, TraitEngine, TraitEngineExt,\n+};\n use rustc_data_structures::fx::{FxHashSet, FxIndexSet};\n use rustc_errors::{struct_span_err, EmissionGuarantee, LintDiagnosticBuilder};\n use rustc_hir::def_id::{DefId, LocalDefId};\n@@ -24,8 +26,8 @@ use rustc_session::lint::builtin::COHERENCE_LEAK_CHECK;\n use rustc_session::lint::builtin::ORDER_DEPENDENT_TRAIT_OBJECTS;\n use rustc_span::{Span, DUMMY_SP};\n \n-use super::util;\n-use super::{FulfillmentContext, SelectionContext};\n+use super::SelectionContext;\n+use super::{util, FulfillmentContext};\n \n /// Information pertinent to an overlapping impl error.\n #[derive(Debug)]\n@@ -207,7 +209,7 @@ fn fulfill_implication<'a, 'tcx>(\n     // (which are packed up in penv)\n \n     infcx.save_and_restore_in_snapshot_flag(|infcx| {\n-        let mut fulfill_cx = FulfillmentContext::new();\n+        let mut fulfill_cx = <dyn TraitEngine<'tcx>>::new(infcx.tcx);\n         for oblig in obligations.chain(more_obligations) {\n             fulfill_cx.register_predicate_obligation(&infcx, oblig);\n         }"}, {"sha": "5829a0f92ee410a6ac17997a64629163fd6a600a", "filename": "compiler/rustc_trait_selection/src/traits/structural_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0de7f756f034d9be9ea9d00ad994b3d5002f9255/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0de7f756f034d9be9ea9d00ad994b3d5002f9255/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs?ref=0de7f756f034d9be9ea9d00ad994b3d5002f9255", "patch": "@@ -1,6 +1,6 @@\n use crate::infer::{InferCtxt, TyCtxtInferExt};\n use crate::traits::ObligationCause;\n-use crate::traits::{self, TraitEngine};\n+use crate::traits::{TraitEngine, TraitEngineExt};\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n@@ -72,7 +72,7 @@ fn type_marked_structural<'tcx>(\n     adt_ty: Ty<'tcx>,\n     cause: ObligationCause<'tcx>,\n ) -> bool {\n-    let mut fulfillment_cx = traits::FulfillmentContext::new();\n+    let mut fulfillment_cx = <dyn TraitEngine<'tcx>>::new(infcx.tcx);\n     // require `#[derive(PartialEq)]`\n     let structural_peq_def_id =\n         infcx.tcx.require_lang_item(LangItem::StructuralPeq, Some(cause.span));"}, {"sha": "e3e78f70b15ef9014ba115a63405fde35b50a283", "filename": "compiler/rustc_traits/src/implied_outlives_bounds.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0de7f756f034d9be9ea9d00ad994b3d5002f9255/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0de7f756f034d9be9ea9d00ad994b3d5002f9255/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs?ref=0de7f756f034d9be9ea9d00ad994b3d5002f9255", "patch": "@@ -14,8 +14,7 @@ use rustc_span::source_map::DUMMY_SP;\n use rustc_trait_selection::infer::InferCtxtBuilderExt;\n use rustc_trait_selection::traits::query::{CanonicalTyGoal, Fallible, NoSolution};\n use rustc_trait_selection::traits::wf;\n-use rustc_trait_selection::traits::FulfillmentContext;\n-use rustc_trait_selection::traits::TraitEngine;\n+use rustc_trait_selection::traits::{TraitEngine, TraitEngineExt};\n use smallvec::{smallvec, SmallVec};\n \n pub(crate) fn provide(p: &mut Providers) {\n@@ -52,7 +51,7 @@ fn compute_implied_outlives_bounds<'tcx>(\n \n     let mut implied_bounds = vec![];\n \n-    let mut fulfill_cx = FulfillmentContext::new();\n+    let mut fulfill_cx = <dyn TraitEngine<'tcx>>::new(tcx);\n \n     while let Some(arg) = wf_args.pop() {\n         if !checked_wf_args.insert(arg) {"}, {"sha": "50946cc1def0c64656009ac0872fe6fc78db8a76", "filename": "compiler/rustc_typeck/src/coherence/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0de7f756f034d9be9ea9d00ad994b3d5002f9255/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0de7f756f034d9be9ea9d00ad994b3d5002f9255/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=0de7f756f034d9be9ea9d00ad994b3d5002f9255", "patch": "@@ -109,7 +109,7 @@ fn visit_implementation_of_copy(tcx: TyCtxt<'_>, impl_did: LocalDefId) {\n                 // it is not immediately clear why Copy is not implemented for a field, since\n                 // all we point at is the field itself.\n                 tcx.infer_ctxt().ignoring_regions().enter(|infcx| {\n-                    let mut fulfill_cx = traits::FulfillmentContext::new();\n+                    let mut fulfill_cx = <dyn TraitEngine<'_>>::new(tcx);\n                     fulfill_cx.register_bound(\n                         &infcx,\n                         param_env,"}, {"sha": "55c7a15f9bcd13f2993c8e8ba339084a6b604f70", "filename": "compiler/rustc_typeck/src/hir_wf_check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0de7f756f034d9be9ea9d00ad994b3d5002f9255/compiler%2Frustc_typeck%2Fsrc%2Fhir_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0de7f756f034d9be9ea9d00ad994b3d5002f9255/compiler%2Frustc_typeck%2Fsrc%2Fhir_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fhir_wf_check.rs?ref=0de7f756f034d9be9ea9d00ad994b3d5002f9255", "patch": "@@ -7,7 +7,7 @@ use rustc_infer::traits::TraitEngine;\n use rustc_infer::traits::{ObligationCause, WellFormedLoc};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, Region, ToPredicate, TyCtxt, TypeFoldable, TypeFolder};\n-use rustc_trait_selection::traits;\n+use rustc_trait_selection::traits::{self, TraitEngineExt};\n \n pub fn provide(providers: &mut Providers) {\n     *providers = Providers { diagnostic_hir_wf_check, ..*providers };\n@@ -66,7 +66,7 @@ fn diagnostic_hir_wf_check<'tcx>(\n     impl<'tcx> Visitor<'tcx> for HirWfCheck<'tcx> {\n         fn visit_ty(&mut self, ty: &'tcx hir::Ty<'tcx>) {\n             self.tcx.infer_ctxt().enter(|infcx| {\n-                let mut fulfill = traits::FulfillmentContext::new();\n+                let mut fulfill = <dyn TraitEngine<'tcx>>::new(self.tcx);\n                 let tcx_ty =\n                     self.icx.to_ty(ty).fold_with(&mut EraseAllBoundRegions { tcx: self.tcx });\n                 let cause = traits::ObligationCause::new("}, {"sha": "229a64650848cff7eae1401fe3a5cff720d1354a", "filename": "compiler/rustc_typeck/src/outlives/outlives_bounds.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0de7f756f034d9be9ea9d00ad994b3d5002f9255/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Foutlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0de7f756f034d9be9ea9d00ad994b3d5002f9255/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Foutlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Foutlives_bounds.rs?ref=0de7f756f034d9be9ea9d00ad994b3d5002f9255", "patch": "@@ -3,7 +3,7 @@ use rustc_middle::ty::{self, Ty};\n use rustc_trait_selection::infer::InferCtxt;\n use rustc_trait_selection::traits::query::type_op::{self, TypeOp, TypeOpOutput};\n use rustc_trait_selection::traits::query::NoSolution;\n-use rustc_trait_selection::traits::{FulfillmentContext, ObligationCause, TraitEngine};\n+use rustc_trait_selection::traits::{ObligationCause, TraitEngine, TraitEngineExt};\n \n pub use rustc_middle::traits::query::OutlivesBound;\n \n@@ -63,7 +63,7 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'cx, 'tcx> {\n         if let Some(constraints) = constraints {\n             // Instantiation may have produced new inference variables and constraints on those\n             // variables. Process these constraints.\n-            let mut fulfill_cx = FulfillmentContext::new();\n+            let mut fulfill_cx = <dyn TraitEngine<'tcx>>::new(self.tcx);\n             let cause = ObligationCause::misc(span, body_id);\n             for &constraint in &constraints.outlives {\n                 let obligation = self.query_outlives_constraint_to_obligation("}]}