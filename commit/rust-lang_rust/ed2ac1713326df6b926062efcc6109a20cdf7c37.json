{"sha": "ed2ac1713326df6b926062efcc6109a20cdf7c37", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkMmFjMTcxMzMyNmRmNmI5MjYwNjJlZmNjNjEwOWEyMGNkZjdjMzc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-13T11:24:22Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-13T11:24:22Z"}, "message": "smol_str to a crate", "tree": {"sha": "c1c75d09e2adbbd54190c5b6ce6efdb7ea251da3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1c75d09e2adbbd54190c5b6ce6efdb7ea251da3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed2ac1713326df6b926062efcc6109a20cdf7c37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed2ac1713326df6b926062efcc6109a20cdf7c37", "html_url": "https://github.com/rust-lang/rust/commit/ed2ac1713326df6b926062efcc6109a20cdf7c37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed2ac1713326df6b926062efcc6109a20cdf7c37/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18486a02fae5966e61f16ea7bc5c33c6c7c69487", "url": "https://api.github.com/repos/rust-lang/rust/commits/18486a02fae5966e61f16ea7bc5c33c6c7c69487", "html_url": "https://github.com/rust-lang/rust/commit/18486a02fae5966e61f16ea7bc5c33c6c7c69487"}], "stats": {"total": 124, "additions": 101, "deletions": 23}, "files": [{"sha": "1d210f3c1172e32943cd2fd5555f0cafb51e7451", "filename": "crates/libeditor/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed2ac1713326df6b926062efcc6109a20cdf7c37/crates%2Flibeditor%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ed2ac1713326df6b926062efcc6109a20cdf7c37/crates%2Flibeditor%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2FCargo.toml?ref=ed2ac1713326df6b926062efcc6109a20cdf7c37", "patch": "@@ -9,4 +9,5 @@ itertools = \"0.7.8\"\n superslice = \"0.1.0\"\n \n libsyntax2 = { path = \"../libsyntax2\" }\n+smol_str = { path = \"../smol_str\" }\n assert_eq_text = { path = \"../assert_eq_text\" }"}, {"sha": "e5933cbd65d30e87c581afd7e3ae879c715a6245", "filename": "crates/libeditor/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed2ac1713326df6b926062efcc6109a20cdf7c37/crates%2Flibeditor%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed2ac1713326df6b926062efcc6109a20cdf7c37/crates%2Flibeditor%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Flib.rs?ref=ed2ac1713326df6b926062efcc6109a20cdf7c37", "patch": "@@ -1,6 +1,7 @@\n extern crate libsyntax2;\n extern crate superslice;\n extern crate itertools;\n+extern crate smol_str;\n \n mod extend_selection;\n mod symbols;"}, {"sha": "03f2313f71333da21bf0ce98e4fc32e88096144e", "filename": "crates/libeditor/src/symbols.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed2ac1713326df6b926062efcc6109a20cdf7c37/crates%2Flibeditor%2Fsrc%2Fsymbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed2ac1713326df6b926062efcc6109a20cdf7c37/crates%2Flibeditor%2Fsrc%2Fsymbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Fsymbols.rs?ref=ed2ac1713326df6b926062efcc6109a20cdf7c37", "patch": "@@ -1,3 +1,4 @@\n+use smol_str::SmolStr;\n use libsyntax2::{\n     SyntaxKind, SyntaxNodeRef, SyntaxRoot, AstNode,\n     ast::{self, NameOwner},\n@@ -11,7 +12,7 @@ use TextRange;\n #[derive(Debug)]\n pub struct FileSymbol {\n     pub parent: Option<usize>,\n-    pub name: String,\n+    pub name: SmolStr,\n     pub name_range: TextRange,\n     pub node_range: TextRange,\n     pub kind: SyntaxKind,"}, {"sha": "810952a0f4778a263c62a414cf8cd14b06f1c801", "filename": "crates/libsyntax2/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed2ac1713326df6b926062efcc6109a20cdf7c37/crates%2Flibsyntax2%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ed2ac1713326df6b926062efcc6109a20cdf7c37/crates%2Flibsyntax2%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2FCargo.toml?ref=ed2ac1713326df6b926062efcc6109a20cdf7c37", "patch": "@@ -10,6 +10,7 @@ text_unit = \"0.1.2\"\n itertools = \"0.7.5\"\n drop_bomb = \"0.1.4\"\n parking_lot = \"0.6.0\"\n+smol_str = { path = \"../smol_str\" }\n \n [dev-dependencies]\n assert_eq_text = { path = \"../assert_eq_text\" }"}, {"sha": "e9362d04875b988eb0b065a96a3d06d27c27e657", "filename": "crates/libsyntax2/src/ast/mod.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ed2ac1713326df6b926062efcc6109a20cdf7c37/crates%2Flibsyntax2%2Fsrc%2Fast%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed2ac1713326df6b926062efcc6109a20cdf7c37/crates%2Flibsyntax2%2Fsrc%2Fast%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fast%2Fmod.rs?ref=ed2ac1713326df6b926062efcc6109a20cdf7c37", "patch": "@@ -1,6 +1,9 @@\n mod generated;\n \n use std::sync::Arc;\n+\n+use smol_str::SmolStr;\n+\n use {\n     SyntaxNode, SyntaxRoot, TreeRoot, SyntaxError,\n     SyntaxKind::*,\n@@ -64,7 +67,9 @@ impl<R: TreeRoot> Function<R> {\n }\n \n impl<R: TreeRoot> Name<R> {\n-    pub fn text(&self) -> String {\n-        self.syntax().text()\n+    pub fn text(&self) -> SmolStr {\n+        let ident = self.syntax().first_child()\n+            .unwrap();\n+        ident.leaf_text().unwrap()\n     }\n }"}, {"sha": "feef542c4f0da4759db57258d9d0262256187e17", "filename": "crates/libsyntax2/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed2ac1713326df6b926062efcc6109a20cdf7c37/crates%2Flibsyntax2%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed2ac1713326df6b926062efcc6109a20cdf7c37/crates%2Flibsyntax2%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Flib.rs?ref=ed2ac1713326df6b926062efcc6109a20cdf7c37", "patch": "@@ -21,10 +21,11 @@\n //#![warn(unreachable_pub)] // rust-lang/rust#47816\n \n extern crate itertools;\n-extern crate text_unit;\n extern crate unicode_xid;\n extern crate drop_bomb;\n extern crate parking_lot;\n+extern crate smol_str;\n+extern crate text_unit;\n \n pub mod algo;\n pub mod ast;\n@@ -35,7 +36,6 @@ mod grammar;\n mod parser_impl;\n \n mod syntax_kinds;\n-mod smol_str;\n mod yellow;\n /// Utilities for simple uses of the parser.\n pub mod utils;"}, {"sha": "700f2704f8a302795dead840ee0acd5447635a8f", "filename": "crates/libsyntax2/src/yellow/green.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ed2ac1713326df6b926062efcc6109a20cdf7c37/crates%2Flibsyntax2%2Fsrc%2Fyellow%2Fgreen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed2ac1713326df6b926062efcc6109a20cdf7c37/crates%2Flibsyntax2%2Fsrc%2Fyellow%2Fgreen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fyellow%2Fgreen.rs?ref=ed2ac1713326df6b926062efcc6109a20cdf7c37", "patch": "@@ -1,8 +1,8 @@\n use std::sync::Arc;\n-use {\n-    SyntaxKind, TextUnit,\n-    smol_str::SmolStr,\n-};\n+\n+use smol_str::SmolStr;\n+\n+use {SyntaxKind, TextUnit};\n \n #[derive(Clone, Debug)]\n pub(crate) enum GreenNode {\n@@ -31,7 +31,7 @@ impl GreenNode {\n \n     pub fn text_len(&self) -> TextUnit {\n         match self {\n-            GreenNode::Leaf { text, ..} => TextUnit::of_str(text.as_str()),\n+            GreenNode::Leaf { text, .. } => TextUnit::of_str(text.as_str()),\n             GreenNode::Branch(b) => b.text_len(),\n         }\n     }\n@@ -54,6 +54,13 @@ impl GreenNode {\n             }\n         }\n     }\n+\n+    pub fn leaf_text(&self) -> Option<SmolStr> {\n+        match self {\n+            GreenNode::Leaf { text, .. } => Some(text.clone()),\n+            GreenNode::Branch(_) => None,\n+        }\n+    }\n }\n \n #[derive(Clone, Debug)]"}, {"sha": "b264e008ae0a7a096496622d793ab92db696261b", "filename": "crates/libsyntax2/src/yellow/syntax.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed2ac1713326df6b926062efcc6109a20cdf7c37/crates%2Flibsyntax2%2Fsrc%2Fyellow%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed2ac1713326df6b926062efcc6109a20cdf7c37/crates%2Flibsyntax2%2Fsrc%2Fyellow%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fyellow%2Fsyntax.rs?ref=ed2ac1713326df6b926062efcc6109a20cdf7c37", "patch": "@@ -1,5 +1,7 @@\n use std::{fmt, sync::Arc};\n \n+use smol_str::SmolStr;\n+\n use {\n     yellow::{RedNode, TreeRoot, SyntaxRoot, RedPtr},\n     SyntaxKind::{self, *},\n@@ -116,6 +118,10 @@ impl<R: TreeRoot> SyntaxNode<R> {\n         self.first_child().is_none()\n     }\n \n+    pub fn leaf_text(&self) -> Option<SmolStr> {\n+        self.red().green().leaf_text()\n+    }\n+\n     fn red(&self) -> &RedNode {\n         unsafe { self.red.get(&self.root) }\n     }"}, {"sha": "14dcafc387585c542b0a743f1b7d0fc78cddcf79", "filename": "crates/server/src/main_loop/handlers.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ed2ac1713326df6b926062efcc6109a20cdf7c37/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed2ac1713326df6b926062efcc6109a20cdf7c37/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=ed2ac1713326df6b926062efcc6109a20cdf7c37", "patch": "@@ -50,9 +50,10 @@ pub fn handle_document_symbol(\n     let mut res: Vec<DocumentSymbol> = Vec::new();\n \n     for symbol in libeditor::file_symbols(&file) {\n+        let name = symbol.name.to_string();\n         let doc_symbol = DocumentSymbol {\n-            name: symbol.name.clone(),\n-            detail: Some(symbol.name),\n+            name: name.clone(),\n+            detail: Some(name),\n             kind: symbol.kind.conv(),\n             deprecated: None,\n             range: symbol.node_range.conv_with(&line_index),"}, {"sha": "83ca12f62f4f85c76231b87d91acc2ce6614c3e6", "filename": "crates/smol_str/Cargo.toml", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed2ac1713326df6b926062efcc6109a20cdf7c37/crates%2Fsmol_str%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ed2ac1713326df6b926062efcc6109a20cdf7c37/crates%2Fsmol_str%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsmol_str%2FCargo.toml?ref=ed2ac1713326df6b926062efcc6109a20cdf7c37", "patch": "@@ -0,0 +1,6 @@\n+[package]\n+name = \"smol_str\"\n+version = \"0.1.0\"\n+authors = [\"Aleksey Kladov <aleksey.kladov@gmail.com>\"]\n+\n+[dependencies]"}, {"sha": "4d5fef593224cff07712144171b2700c13279fe6", "filename": "crates/smol_str/src/lib.rs", "status": "renamed", "additions": 60, "deletions": 11, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/ed2ac1713326df6b926062efcc6109a20cdf7c37/crates%2Fsmol_str%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed2ac1713326df6b926062efcc6109a20cdf7c37/crates%2Fsmol_str%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsmol_str%2Fsrc%2Flib.rs?ref=ed2ac1713326df6b926062efcc6109a20cdf7c37", "patch": "@@ -1,24 +1,73 @@\n-use std::{sync::Arc};\n+use std::{sync::Arc, ops::Deref};\n+\n+#[derive(Clone, Debug)]\n+pub struct SmolStr(Repr);\n+\n+impl SmolStr {\n+    pub fn new(text: &str) -> SmolStr {\n+        SmolStr(Repr::new(text))\n+    }\n+\n+    pub fn as_str(&self) -> &str {\n+        self.0.as_str()\n+    }\n+\n+    pub fn to_string(&self) -> String {\n+        self.as_str().to_string()\n+    }\n+}\n+\n+impl Deref for SmolStr {\n+    type Target = str;\n+\n+    fn deref(&self) -> &str {\n+        self.as_str()\n+    }\n+}\n+\n+impl PartialEq<str> for SmolStr {\n+    fn eq(&self, other: &str) -> bool {\n+        self.as_str() == other\n+    }\n+}\n+\n+impl PartialEq<SmolStr> for str {\n+    fn eq(&self, other: &SmolStr) -> bool {\n+        other == self\n+    }\n+}\n+\n+impl<'a> PartialEq<&'a str> for SmolStr {\n+    fn eq(&self, other: &&'a str) -> bool {\n+        self == *other\n+    }\n+}\n+\n+impl<'a> PartialEq<SmolStr> for &'a str {\n+    fn eq(&self, other: &SmolStr) -> bool {\n+        *self == other\n+    }\n+}\n \n const INLINE_CAP: usize = 22;\n const WS_TAG: u8 = (INLINE_CAP + 1) as u8;\n \n #[derive(Clone, Debug)]\n-pub(crate) enum SmolStr {\n+enum Repr {\n     Heap(Arc<str>),\n     Inline {\n         len: u8,\n         buf: [u8; INLINE_CAP],\n     },\n }\n \n-impl SmolStr {\n-    pub fn new(text: &str) -> SmolStr {\n+impl Repr {\n+    fn new(text: &str) -> Repr {\n         let len = text.len();\n         if len <= INLINE_CAP {\n             let mut buf = [0; INLINE_CAP];\n             buf[..len].copy_from_slice(text.as_bytes());\n-            return SmolStr::Inline { len: len as u8, buf };\n+            return Repr::Inline { len: len as u8, buf };\n         }\n \n         let newlines = text.bytes().take_while(|&b| b == b'\\n').count();\n@@ -27,23 +76,23 @@ impl SmolStr {\n             let mut buf = [0; INLINE_CAP];\n             buf[0] = newlines as u8;\n             buf[1] = spaces as u8;\n-            return SmolStr::Inline { len: WS_TAG, buf };\n+            return Repr::Inline { len: WS_TAG, buf };\n         }\n \n-        SmolStr::Heap(\n+        Repr::Heap(\n             text.to_string().into_boxed_str().into()\n         )\n     }\n \n-    pub fn as_str(&self) -> &str {\n+    fn as_str(&self) -> &str {\n         match self {\n-            SmolStr::Heap(data) => &*data,\n-            SmolStr::Inline { len, buf } => {\n+            Repr::Heap(data) => &*data,\n+            Repr::Inline { len, buf } => {\n                 if *len == WS_TAG {\n                     let newlines = buf[0] as usize;\n                     let spaces = buf[1] as usize;\n                     assert!(newlines <= N_NEWLINES && spaces <= N_SPACES);\n-                    return &WS[N_NEWLINES - newlines..N_NEWLINES + spaces]\n+                    return &WS[N_NEWLINES - newlines..N_NEWLINES + spaces];\n                 }\n \n                 let len = *len as usize;", "previous_filename": "crates/libsyntax2/src/smol_str.rs"}]}