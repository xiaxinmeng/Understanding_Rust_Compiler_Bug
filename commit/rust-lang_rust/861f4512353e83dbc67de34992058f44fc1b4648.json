{"sha": "861f4512353e83dbc67de34992058f44fc1b4648", "node_id": "C_kwDOAAsO6NoAKDg2MWY0NTEyMzUzZTgzZGJjNjdkZTM0OTkyMDU4ZjQ0ZmMxYjQ2NDg", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-02-07T14:55:16Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-02-09T10:26:49Z"}, "message": "Change to `ReError(ErrorGuaranteed)`", "tree": {"sha": "0478b87a60ee66956eb3ce137763a947a1c3fd4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0478b87a60ee66956eb3ce137763a947a1c3fd4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/861f4512353e83dbc67de34992058f44fc1b4648", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/861f4512353e83dbc67de34992058f44fc1b4648", "html_url": "https://github.com/rust-lang/rust/commit/861f4512353e83dbc67de34992058f44fc1b4648", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/861f4512353e83dbc67de34992058f44fc1b4648/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffaf2a5c270f6677d7746f6ae30f498692afc750", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffaf2a5c270f6677d7746f6ae30f498692afc750", "html_url": "https://github.com/rust-lang/rust/commit/ffaf2a5c270f6677d7746f6ae30f498692afc750"}], "stats": {"total": 131, "additions": 70, "deletions": 61}, "files": [{"sha": "237e063d8d11faf3522a929f917815883ea2bd76", "filename": "compiler/rustc_borrowck/src/diagnostics/region_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/861f4512353e83dbc67de34992058f44fc1b4648/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861f4512353e83dbc67de34992058f44fc1b4648/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs?ref=861f4512353e83dbc67de34992058f44fc1b4648", "patch": "@@ -368,7 +368,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n             | ty::ReVar(..)\n             | ty::RePlaceholder(..)\n             | ty::ReErased\n-            | ty::ReError => None,\n+            | ty::ReError(_) => None,\n         }\n     }\n "}, {"sha": "c7b22d5f2e604ca20b2d311a81dc7a319debae80", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/861f4512353e83dbc67de34992058f44fc1b4648/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861f4512353e83dbc67de34992058f44fc1b4648/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=861f4512353e83dbc67de34992058f44fc1b4648", "patch": "@@ -91,11 +91,10 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                     }\n                     None => {\n                         subst_regions.push(vid);\n-                        infcx.tcx.sess.delay_span_bug(\n+                        infcx.tcx.re_error_with_message(\n                             concrete_type.span,\n                             \"opaque type with non-universal region substs\",\n-                        );\n-                        infcx.tcx.lifetimes.re_error\n+                        )\n                     }\n                 }\n             };"}, {"sha": "e813ff837ff8a7f686b26f44e9edc7518dad8052", "filename": "compiler/rustc_borrowck/src/universal_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/861f4512353e83dbc67de34992058f44fc1b4648/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861f4512353e83dbc67de34992058f44fc1b4648/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs?ref=861f4512353e83dbc67de34992058f44fc1b4648", "patch": "@@ -821,7 +821,7 @@ impl<'tcx> UniversalRegionIndices<'tcx> {\n     pub fn to_region_vid(&self, r: ty::Region<'tcx>) -> RegionVid {\n         if let ty::ReVar(..) = *r {\n             r.to_region_vid()\n-        } else if let ty::ReError = *r {\n+        } else if let ty::ReError(_) = *r {\n             RegionVid::new(0)\n         } else {\n             *self"}, {"sha": "76dd3b9a0d1865dbb7bb13f7bb85ac218c68f9d1", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/861f4512353e83dbc67de34992058f44fc1b4648/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861f4512353e83dbc67de34992058f44fc1b4648/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=861f4512353e83dbc67de34992058f44fc1b4648", "patch": "@@ -263,8 +263,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     // elision. `resolve_lifetime` should have\n                     // reported an error in this case -- but if\n                     // not, let's error out.\n-                    tcx.sess.delay_span_bug(lifetime.ident.span, \"unelided lifetime in signature\");\n-                    tcx.lifetimes.re_error\n+                    tcx.re_error_with_message(lifetime.ident.span, \"unelided lifetime in signature\")\n                 })\n             }\n         }\n@@ -478,8 +477,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             debug!(?param, \"unelided lifetime in signature\");\n \n                             // This indicates an illegal lifetime in a non-assoc-trait position\n-                            tcx.sess.delay_span_bug(self.span, \"unelided lifetime in signature\");\n-                            tcx.lifetimes.re_error\n+                            tcx.re_error_with_message(self.span, \"unelided lifetime in signature\")\n                         })\n                         .into(),\n                     GenericParamDefKind::Type { has_default, .. } => {\n@@ -1623,7 +1621,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         } else {\n                             err.emit();\n                         }\n-                        tcx.lifetimes.re_error\n+                        tcx.re_error()\n                     })\n                 }\n             })"}, {"sha": "640920638a75513c806d8344e7625f0260fef39a", "filename": "compiler/rustc_hir_analysis/src/check/compare_impl_item.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/861f4512353e83dbc67de34992058f44fc1b4648/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861f4512353e83dbc67de34992058f44fc1b4648/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs?ref=861f4512353e83dbc67de34992058f44fc1b4648", "patch": "@@ -786,13 +786,7 @@ pub(super) fn collect_return_position_impl_trait_in_trait_tys<'tcx>(\n                     }\n                     let Some(ty::ReEarlyBound(e)) = map.get(&region.into()).map(|r| r.expect_region().kind())\n                     else {\n-                        tcx\n-                            .sess\n-                            .delay_span_bug(\n-                                return_span,\n-                                \"expected ReFree to map to ReEarlyBound\"\n-                            );\n-                        return tcx.lifetimes.re_error;\n+                        return tcx.re_error_with_message(return_span, \"expected ReFree to map to ReEarlyBound\")\n                     };\n                     tcx.mk_region(ty::ReEarlyBound(ty::EarlyBoundRegion {\n                         def_id: e.def_id,"}, {"sha": "c5c5f63a108b396e2ca9c95d9d72e250e559fe57", "filename": "compiler/rustc_hir_analysis/src/outlives/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/861f4512353e83dbc67de34992058f44fc1b4648/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861f4512353e83dbc67de34992058f44fc1b4648/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Futils.rs?ref=861f4512353e83dbc67de34992058f44fc1b4648", "patch": "@@ -170,7 +170,7 @@ fn is_free_region(region: Region<'_>) -> bool {\n         // ignore it. We can't put it on the struct header anyway.\n         ty::ReLateBound(..) => false,\n \n-        ty::ReError => false,\n+        ty::ReError(_) => false,\n \n         // These regions don't appear in types from type declarations:\n         ty::ReErased | ty::ReVar(..) | ty::RePlaceholder(..) | ty::ReFree(..) => {"}, {"sha": "b0cf0387f87a99c123fd91937c0d8a0b65dbd438", "filename": "compiler/rustc_hir_analysis/src/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/861f4512353e83dbc67de34992058f44fc1b4648/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861f4512353e83dbc67de34992058f44fc1b4648/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fconstraints.rs?ref=861f4512353e83dbc67de34992058f44fc1b4648", "patch": "@@ -409,7 +409,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 // way early-bound regions do, so we skip them here.\n             }\n \n-            ty::ReError => {}\n+            ty::ReError(_) => {}\n \n             ty::ReFree(..) | ty::ReVar(..) | ty::RePlaceholder(..) | ty::ReErased => {\n                 // We don't expect to see anything but 'static or bound"}, {"sha": "5d861a78af8002f5fadde9634125a0f35cfc6a60", "filename": "compiler/rustc_infer/src/errors/note_and_explain.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/861f4512353e83dbc67de34992058f44fc1b4648/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fnote_and_explain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861f4512353e83dbc67de34992058f44fc1b4648/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fnote_and_explain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fnote_and_explain.rs?ref=861f4512353e83dbc67de34992058f44fc1b4648", "patch": "@@ -31,7 +31,7 @@ impl<'a> DescriptionCtx<'a> {\n \n             ty::RePlaceholder(_) => return None,\n \n-            ty::ReError => return None,\n+            ty::ReError(_) => return None,\n \n             // FIXME(#13998) RePlaceholder should probably print like\n             // ReFree rather than dumping Debug output on the user."}, {"sha": "13c39dab3ad7afc1dbc21024a4ddc4ee71651fba", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/861f4512353e83dbc67de34992058f44fc1b4648/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861f4512353e83dbc67de34992058f44fc1b4648/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=861f4512353e83dbc67de34992058f44fc1b4648", "patch": "@@ -371,7 +371,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Canonicalizer<'cx, 'tcx> {\n \n             ty::ReStatic\n             | ty::ReEarlyBound(..)\n-            | ty::ReError\n+            | ty::ReError(_)\n             | ty::ReFree(_)\n             | ty::RePlaceholder(..)\n             | ty::ReErased => self.canonicalize_mode.canonicalize_free_region(self, r),"}, {"sha": "1360044fe753908be87072a3d89eac4509fab111", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/861f4512353e83dbc67de34992058f44fc1b4648/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861f4512353e83dbc67de34992058f44fc1b4648/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=861f4512353e83dbc67de34992058f44fc1b4648", "patch": "@@ -705,7 +705,7 @@ impl<'tcx> TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n                 return Ok(r);\n             }\n \n-            ty::ReError => {\n+            ty::ReError(_) => {\n                 return Ok(r);\n             }\n \n@@ -865,7 +865,7 @@ impl<'tcx> FallibleTypeFolder<'tcx> for ConstInferUnifier<'_, 'tcx> {\n         match *r {\n             // Never make variables for regions bound within the type itself,\n             // nor for erased regions.\n-            ty::ReLateBound(..) | ty::ReErased | ty::ReError => {\n+            ty::ReLateBound(..) | ty::ReErased | ty::ReError(_) => {\n                 return Ok(r);\n             }\n "}, {"sha": "88a0d6def5ec28a04059b2a39b9e3284a507820a", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/861f4512353e83dbc67de34992058f44fc1b4648/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861f4512353e83dbc67de34992058f44fc1b4648/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=861f4512353e83dbc67de34992058f44fc1b4648", "patch": "@@ -134,7 +134,7 @@ pub(super) fn note_and_explain_region<'tcx>(\n \n         ty::RePlaceholder(_) => return,\n \n-        ty::ReError => return,\n+        ty::ReError(_) => return,\n \n         // FIXME(#13998) RePlaceholder should probably print like\n         // ReFree rather than dumping Debug output on the user.\n@@ -315,7 +315,7 @@ pub fn unexpected_hidden_region_diagnostic<'tcx>(\n                 )\n             }\n         }\n-        ty::ReError => {\n+        ty::ReError(_) => {\n             err.delay_as_bug();\n         }\n         _ => {"}, {"sha": "1c76950cc6c996c6f3377bdbd04f64546ac03098", "filename": "compiler/rustc_infer/src/infer/freshen.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/861f4512353e83dbc67de34992058f44fc1b4648/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861f4512353e83dbc67de34992058f44fc1b4648/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs?ref=861f4512353e83dbc67de34992058f44fc1b4648", "patch": "@@ -126,7 +126,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for TypeFreshener<'a, 'tcx> {\n             | ty::ReFree(_)\n             | ty::ReVar(_)\n             | ty::RePlaceholder(..)\n-            | ty::ReError\n+            | ty::ReError(_)\n             | ty::ReErased => {\n                 // replace all free regions with 'erased\n                 self.tcx().lifetimes.re_erased"}, {"sha": "d4a12195ca01a79a8fe7a12e5954ce3558065b33", "filename": "compiler/rustc_infer/src/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/861f4512353e83dbc67de34992058f44fc1b4648/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861f4512353e83dbc67de34992058f44fc1b4648/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=861f4512353e83dbc67de34992058f44fc1b4648", "patch": "@@ -216,7 +216,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                 Ok(self.tcx().lifetimes.re_static)\n             }\n \n-            ReError => Ok(self.tcx().lifetimes.re_error),\n+            ReError(_) => Ok(self.tcx().re_error()),\n \n             ReEarlyBound(_) | ReFree(_) => {\n                 // All empty regions are less than early-bound, free,\n@@ -438,7 +438,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n             }\n             (VarValue::Value(a), VarValue::Empty(_)) => {\n                 match *a {\n-                    ReLateBound(..) | ReErased | ReError => {\n+                    ReLateBound(..) | ReErased | ReError(_) => {\n                         bug!(\"cannot relate region: {:?}\", a);\n                     }\n \n@@ -467,7 +467,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n             }\n             (VarValue::Empty(a_ui), VarValue::Value(b)) => {\n                 match *b {\n-                    ReLateBound(..) | ReErased | ReError => {\n+                    ReLateBound(..) | ReErased | ReError(_) => {\n                         bug!(\"cannot relate region: {:?}\", b);\n                     }\n \n@@ -548,7 +548,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                 );\n             }\n \n-            (ReError, _) | (_, ReError) => self.tcx().lifetimes.re_error,\n+            (ReError(_), _) | (_, ReError(_)) => self.tcx().re_error(),\n \n             (ReStatic, _) | (_, ReStatic) => {\n                 // nothing lives longer than `'static`\n@@ -1044,7 +1044,7 @@ impl<'tcx> LexicalRegionResolutions<'tcx> {\n             ty::ReVar(rid) => match self.values[rid] {\n                 VarValue::Empty(_) => r,\n                 VarValue::Value(r) => r,\n-                VarValue::ErrorValue => tcx.lifetimes.re_error,\n+                VarValue::ErrorValue => tcx.re_error(),\n             },\n             _ => r,\n         };"}, {"sha": "cb24375c7a3feb4fd6f81bbe8e06027467412cbb", "filename": "compiler/rustc_infer/src/infer/region_constraints/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/861f4512353e83dbc67de34992058f44fc1b4648/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861f4512353e83dbc67de34992058f44fc1b4648/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=861f4512353e83dbc67de34992058f44fc1b4648", "patch": "@@ -696,9 +696,11 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n \n     pub fn universe(&self, region: Region<'tcx>) -> ty::UniverseIndex {\n         match *region {\n-            ty::ReStatic | ty::ReErased | ty::ReFree(..) | ty::ReEarlyBound(..) | ty::ReError => {\n-                ty::UniverseIndex::ROOT\n-            }\n+            ty::ReStatic\n+            | ty::ReErased\n+            | ty::ReFree(..)\n+            | ty::ReEarlyBound(..)\n+            | ty::ReError(_) => ty::UniverseIndex::ROOT,\n             ty::RePlaceholder(placeholder) => placeholder.universe,\n             ty::ReVar(vid) => self.var_universe(vid),\n             ty::ReLateBound(..) => bug!(\"universe(): encountered bound region {:?}\", region),"}, {"sha": "0e6126ae7c5188b1f3e39b03227b0a927b4261b7", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/861f4512353e83dbc67de34992058f44fc1b4648/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861f4512353e83dbc67de34992058f44fc1b4648/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=861f4512353e83dbc67de34992058f44fc1b4648", "patch": "@@ -275,9 +275,6 @@ pub struct CommonLifetimes<'tcx> {\n \n     /// Erased region, used outside of type inference.\n     pub re_erased: Region<'tcx>,\n-\n-    /// Error region, used only for error reporting.\n-    pub re_error: Region<'tcx>,\n }\n \n pub struct CommonConsts<'tcx> {\n@@ -327,11 +324,7 @@ impl<'tcx> CommonLifetimes<'tcx> {\n             ))\n         };\n \n-        CommonLifetimes {\n-            re_static: mk(ty::ReStatic),\n-            re_erased: mk(ty::ReErased),\n-            re_error: mk(ty::ReError),\n-        }\n+        CommonLifetimes { re_static: mk(ty::ReStatic), re_erased: mk(ty::ReErased) }\n     }\n }\n \n@@ -656,6 +649,27 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.mk_ty(Error(reported))\n     }\n \n+    /// Constructs a `RegionKind::ReError` lifetime and registers a `delay_span_bug` to ensure it\n+    /// gets used.\n+    #[track_caller]\n+    pub fn re_error(self) -> Region<'tcx> {\n+        self.re_error_with_message(\n+            DUMMY_SP,\n+            \"RegionKind::ReError constructed but no error reported\",\n+        )\n+    }\n+\n+    /// Constructs a `RegionKind::ReError` lifetime and registers a `delay_span_bug` with the given\n+    /// `msg` to ensure it gets used.\n+    #[track_caller]\n+    pub fn re_error_with_message<S: Into<MultiSpan>>(self, span: S, msg: &str) -> Region<'tcx> {\n+        let reported = self.sess.delay_span_bug(span, msg);\n+        let r = ty::ReError(reported);\n+        Region(Interned::new_unchecked(\n+            self.interners.region.intern(r, |r| InternedInSet(self.interners.arena.alloc(r))).0,\n+        ))\n+    }\n+\n     /// Like [TyCtxt::ty_error] but for constants, with current `ErrorGuaranteed`\n     #[track_caller]\n     pub fn const_error_with_guaranteed("}, {"sha": "0112debc1c821671c703f4138cd2add1ae9ac521", "filename": "compiler/rustc_middle/src/ty/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/861f4512353e83dbc67de34992058f44fc1b4648/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861f4512353e83dbc67de34992058f44fc1b4648/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs?ref=861f4512353e83dbc67de34992058f44fc1b4648", "patch": "@@ -100,7 +100,7 @@ impl GenericParamDef {\n         preceding_substs: &[ty::GenericArg<'tcx>],\n     ) -> ty::GenericArg<'tcx> {\n         match &self.kind {\n-            ty::GenericParamDefKind::Lifetime => tcx.lifetimes.re_error.into(),\n+            ty::GenericParamDefKind::Lifetime => tcx.re_error().into(),\n             ty::GenericParamDefKind::Type { .. } => tcx.ty_error().into(),\n             ty::GenericParamDefKind::Const { .. } => {\n                 tcx.const_error(tcx.bound_type_of(self.def_id).subst(tcx, preceding_substs)).into()"}, {"sha": "624b62e1800a1c4c26c6906d53f319ac12a142da", "filename": "compiler/rustc_middle/src/ty/opaque_types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/861f4512353e83dbc67de34992058f44fc1b4648/compiler%2Frustc_middle%2Fsrc%2Fty%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861f4512353e83dbc67de34992058f44fc1b4648/compiler%2Frustc_middle%2Fsrc%2Fty%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fopaque_types.rs?ref=861f4512353e83dbc67de34992058f44fc1b4648", "patch": "@@ -109,7 +109,7 @@ impl<'tcx> TypeFolder<'tcx> for ReverseMapper<'tcx> {\n             // them.\n             ty::ReErased => return r,\n \n-            ty::ReError => return r,\n+            ty::ReError(_) => return r,\n \n             // The regions that we expect from borrow checking.\n             ty::ReEarlyBound(_) | ty::ReFree(_) => {}\n@@ -140,7 +140,7 @@ impl<'tcx> TypeFolder<'tcx> for ReverseMapper<'tcx> {\n                     )\n                     .emit();\n \n-                self.tcx().lifetimes.re_error\n+                self.tcx().re_error()\n             }\n         }\n     }"}, {"sha": "a8b23e64e820983ff1ea4c879204ff55b9ab04d5", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/861f4512353e83dbc67de34992058f44fc1b4648/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861f4512353e83dbc67de34992058f44fc1b4648/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=861f4512353e83dbc67de34992058f44fc1b4648", "patch": "@@ -2114,7 +2114,7 @@ impl<'tcx> PrettyPrinter<'tcx> for FmtPrinter<'_, 'tcx> {\n \n             ty::ReVar(_) if identify_regions => true,\n \n-            ty::ReVar(_) | ty::ReErased | ty::ReError => false,\n+            ty::ReVar(_) | ty::ReErased | ty::ReError(_) => false,\n \n             ty::ReStatic => true,\n         }\n@@ -2194,7 +2194,7 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n             }\n             ty::ReVar(_) => {}\n             ty::ReErased => {}\n-            ty::ReError => {}\n+            ty::ReError(_) => {}\n             ty::ReStatic => {\n                 p!(\"'static\");\n                 return Ok(self);"}, {"sha": "b3b2a4fd0e5daecd866e8fd74d90b1de86447adf", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/861f4512353e83dbc67de34992058f44fc1b4648/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861f4512353e83dbc67de34992058f44fc1b4648/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=861f4512353e83dbc67de34992058f44fc1b4648", "patch": "@@ -1623,13 +1623,13 @@ impl<'tcx> Region<'tcx> {\n             ty::ReVar(..) => false,\n             ty::RePlaceholder(placeholder) => placeholder.name.is_named(),\n             ty::ReErased => false,\n-            ty::ReError => false,\n+            ty::ReError(_) => false,\n         }\n     }\n \n     #[inline]\n     pub fn is_error(self) -> bool {\n-        matches!(*self, ty::ReError)\n+        matches!(*self, ty::ReError(_))\n     }\n \n     #[inline]\n@@ -1692,7 +1692,7 @@ impl<'tcx> Region<'tcx> {\n             ty::ReErased => {\n                 flags = flags | TypeFlags::HAS_RE_ERASED;\n             }\n-            ty::ReError => {}\n+            ty::ReError(_) => {}\n         }\n \n         debug!(\"type_flags({:?}) = {:?}\", self, flags);"}, {"sha": "710f38264036ce71ddc1ae8b18ec77ba3aa181ed", "filename": "compiler/rustc_symbol_mangling/src/typeid/typeid_itanium_cxx_abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/861f4512353e83dbc67de34992058f44fc1b4648/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861f4512353e83dbc67de34992058f44fc1b4648/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs?ref=861f4512353e83dbc67de34992058f44fc1b4648", "patch": "@@ -299,7 +299,7 @@ fn encode_region<'tcx>(\n         RegionKind::ReEarlyBound(..)\n         | RegionKind::ReFree(..)\n         | RegionKind::ReStatic\n-        | RegionKind::ReError\n+        | RegionKind::ReError(_)\n         | RegionKind::ReVar(..)\n         | RegionKind::RePlaceholder(..) => {\n             bug!(\"encode_region: unexpected `{:?}`\", region.kind());"}, {"sha": "65ed3105d10bcce5aac05be0784d826606c5924d", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/861f4512353e83dbc67de34992058f44fc1b4648/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861f4512353e83dbc67de34992058f44fc1b4648/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=861f4512353e83dbc67de34992058f44fc1b4648", "patch": "@@ -493,7 +493,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Lifetime<RustInterner<'tcx>>> for Region<'t\n             ty::ReEarlyBound(_) => {\n                 panic!(\"Should have already been substituted.\");\n             }\n-            ty::ReError => {\n+            ty::ReError(_) => {\n                 panic!(\"Error lifetime should not have already been lowered.\");\n             }\n             ty::ReLateBound(db, br) => chalk_ir::LifetimeData::BoundVar(chalk_ir::BoundVar::new("}, {"sha": "ea31678b493647423dd4cd371adeaf8e371aaf32", "filename": "compiler/rustc_type_ir/src/sty.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/861f4512353e83dbc67de34992058f44fc1b4648/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861f4512353e83dbc67de34992058f44fc1b4648/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs?ref=861f4512353e83dbc67de34992058f44fc1b4648", "patch": "@@ -962,7 +962,7 @@ pub enum RegionKind<I: Interner> {\n     ReErased,\n \n     /// A region that resulted from some other error. Used exclusively for diagnostics.\n-    ReError,\n+    ReError(I::ErrorGuaranteed),\n }\n \n // This is manually implemented for `RegionKind` because `std::mem::discriminant`\n@@ -977,7 +977,7 @@ const fn regionkind_discriminant<I: Interner>(value: &RegionKind<I>) -> usize {\n         ReVar(_) => 4,\n         RePlaceholder(_) => 5,\n         ReErased => 6,\n-        ReError => 7,\n+        ReError(_) => 7,\n     }\n }\n \n@@ -989,6 +989,7 @@ where\n     I::FreeRegion: Copy,\n     I::RegionVid: Copy,\n     I::PlaceholderRegion: Copy,\n+    I::ErrorGuaranteed: Copy,\n {\n }\n \n@@ -1003,7 +1004,7 @@ impl<I: Interner> Clone for RegionKind<I> {\n             ReVar(r) => ReVar(r.clone()),\n             RePlaceholder(r) => RePlaceholder(r.clone()),\n             ReErased => ReErased,\n-            ReError => ReError,\n+            ReError(r) => ReError(r.clone()),\n         }\n     }\n }\n@@ -1082,7 +1083,7 @@ impl<I: Interner> hash::Hash for RegionKind<I> {\n             ReVar(r) => r.hash(state),\n             RePlaceholder(r) => r.hash(state),\n             ReErased => (),\n-            ReError => (),\n+            ReError(_) => (),\n         }\n     }\n }\n@@ -1107,7 +1108,7 @@ impl<I: Interner> fmt::Debug for RegionKind<I> {\n \n             ReErased => f.write_str(\"ReErased\"),\n \n-            ReError => f.write_str(\"ReError\"),\n+            ReError(_) => f.write_str(\"ReError\"),\n         }\n     }\n }\n@@ -1142,7 +1143,7 @@ where\n                 a.encode(e);\n             }),\n             ReErased => e.emit_enum_variant(disc, |_| {}),\n-            ReError => e.emit_enum_variant(disc, |_| {}),\n+            ReError(_) => e.emit_enum_variant(disc, |_| {}),\n         }\n     }\n }\n@@ -1155,6 +1156,7 @@ where\n     I::FreeRegion: Decodable<D>,\n     I::RegionVid: Decodable<D>,\n     I::PlaceholderRegion: Decodable<D>,\n+    I::ErrorGuaranteed: Decodable<D>,\n {\n     fn decode(d: &mut D) -> Self {\n         match Decoder::read_usize(d) {\n@@ -1165,7 +1167,7 @@ where\n             4 => ReVar(Decodable::decode(d)),\n             5 => RePlaceholder(Decodable::decode(d)),\n             6 => ReErased,\n-            7 => ReError,\n+            7 => ReError(Decodable::decode(d)),\n             _ => panic!(\n                 \"{}\",\n                 format!(\n@@ -1194,7 +1196,7 @@ where\n     ) {\n         std::mem::discriminant(self).hash_stable(hcx, hasher);\n         match self {\n-            ReErased | ReStatic | ReError => {\n+            ReErased | ReStatic | ReError(_) => {\n                 // No variant fields to hash for these ...\n             }\n             ReLateBound(d, r) => {"}, {"sha": "5bda3620dd0fd54b9281c424ca253396964aa5eb", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/861f4512353e83dbc67de34992058f44fc1b4648/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861f4512353e83dbc67de34992058f44fc1b4648/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=861f4512353e83dbc67de34992058f44fc1b4648", "patch": "@@ -242,7 +242,7 @@ pub(crate) fn clean_middle_region<'tcx>(region: ty::Region<'tcx>) -> Option<Life\n         ty::ReLateBound(..)\n         | ty::ReFree(..)\n         | ty::ReVar(..)\n-        | ty::ReError\n+        | ty::ReError(_)\n         | ty::RePlaceholder(..)\n         | ty::ReErased => {\n             debug!(\"cannot clean region {:?}\", region);"}]}