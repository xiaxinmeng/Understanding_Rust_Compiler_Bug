{"sha": "01bfc3ae8bff5131cfd1db748ca996bdb86e100e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxYmZjM2FlOGJmZjUxMzFjZmQxZGI3NDhjYTk5NmJkYjg2ZTEwMGU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-09T00:31:37Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-09T00:32:39Z"}, "message": "Fix generic-bind support for bound aliases and generics.", "tree": {"sha": "118ee67ea3ecb6fa8e35c58de3220203d1c00d81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/118ee67ea3ecb6fa8e35c58de3220203d1c00d81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01bfc3ae8bff5131cfd1db748ca996bdb86e100e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01bfc3ae8bff5131cfd1db748ca996bdb86e100e", "html_url": "https://github.com/rust-lang/rust/commit/01bfc3ae8bff5131cfd1db748ca996bdb86e100e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01bfc3ae8bff5131cfd1db748ca996bdb86e100e/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da9ea9ab69ebcf32ff9cc1ad557a6c2a5134bd0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/da9ea9ab69ebcf32ff9cc1ad557a6c2a5134bd0d", "html_url": "https://github.com/rust-lang/rust/commit/da9ea9ab69ebcf32ff9cc1ad557a6c2a5134bd0d"}], "stats": {"total": 46, "additions": 35, "deletions": 11}, "files": [{"sha": "1572764d62bb3d2830719e18477feceaf7cb0f12", "filename": "src/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/01bfc3ae8bff5131cfd1db748ca996bdb86e100e/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/01bfc3ae8bff5131cfd1db748ca996bdb86e100e/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=01bfc3ae8bff5131cfd1db748ca996bdb86e100e", "patch": "@@ -409,6 +409,7 @@ TEST_XFAILS_BOOT :=  $(TASK_XFAILS) \\\n                     test/run-pass/obj-as.rs \\\n                     test/run-pass/vec-slice.rs \\\n                     test/run-pass/fn-lval.rs \\\n+                    test/run-pass/generic-bind-2.rs \\\n                     test/run-pass/generic-fn-box.rs \\\n                     test/run-pass/generic-tup.rs \\\n                     test/run-pass/iter-ret.rs \\"}, {"sha": "5b2e12a611bf3f76c9aa35d8c20bd41afd7e1060", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/01bfc3ae8bff5131cfd1db748ca996bdb86e100e/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01bfc3ae8bff5131cfd1db748ca996bdb86e100e/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=01bfc3ae8bff5131cfd1db748ca996bdb86e100e", "patch": "@@ -3364,7 +3364,7 @@ fn trans_bind_thunk(@crate_ctxt cx,\n     lltargetclosure = bcx.build.Load(lltargetclosure);\n \n     auto outgoing_ret_ty = ty.ty_fn_ret(outgoing_fty);\n-    auto outgoing_arg_tys = ty.ty_fn_args(outgoing_fty);\n+    auto outgoing_args = ty.ty_fn_args(outgoing_fty);\n \n     auto llretptr = fcx.llretptr;\n     if (ty.type_has_dynamic_size(outgoing_ret_ty)) {\n@@ -3392,7 +3392,14 @@ fn trans_bind_thunk(@crate_ctxt cx,\n     let uint a = 2u + i;    // retptr, task ptr, env come first\n     let int b = 0;\n     let uint outgoing_arg_index = 0u;\n+    let vec[TypeRef] llout_arg_tys =\n+        type_of_explicit_args(cx, outgoing_args);\n+\n     for (option.t[@ast.expr] arg in args) {\n+\n+        auto out_arg = outgoing_args.(outgoing_arg_index);\n+        auto llout_arg_ty = llout_arg_tys.(outgoing_arg_index);\n+\n         alt (arg) {\n \n             // Arg provided at binding time; thunk copies it from closure.\n@@ -3403,22 +3410,31 @@ fn trans_bind_thunk(@crate_ctxt cx,\n                                      abi.box_rc_field_body,\n                                      abi.closure_elt_bindings,\n                                      b));\n-                // FIXME: possibly support passing aliases someday.\n+\n                 bcx = bound_arg.bcx;\n-                llargs += bcx.build.Load(bound_arg.val);\n+                auto val = bound_arg.val;\n+\n+                if (out_arg.mode == ast.val) {\n+                    val = bcx.build.Load(val);\n+                } else if (ty.count_ty_params(out_arg.ty) > 0u) {\n+                    check (out_arg.mode == ast.alias);\n+                    val = bcx.build.PointerCast(val, llout_arg_ty);\n+                }\n+\n+                llargs += val;\n                 b += 1;\n             }\n \n             // Arg will be provided when the thunk is invoked.\n             case (none[@ast.expr]) {\n                 let ValueRef passed_arg = llvm.LLVMGetParam(llthunk, a);\n-                if (ty.type_has_dynamic_size(outgoing_arg_tys.\n-                        (outgoing_arg_index).ty)) {\n-                    // Cast to a generic typaram pointer in order to make a\n-                    // type-compatible call.\n+\n+                if (ty.count_ty_params(out_arg.ty) > 0u) {\n+                    check (out_arg.mode == ast.alias);\n                     passed_arg = bcx.build.PointerCast(passed_arg,\n-                                                       T_typaram_ptr(cx.tn));\n+                                                       llout_arg_ty);\n                 }\n+\n                 llargs += passed_arg;\n                 a += 1u;\n             }"}, {"sha": "95a8cab48cc15b6de67fbace48cb2236a43e8b9a", "filename": "src/test/run-pass/generic-bind-2.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/01bfc3ae8bff5131cfd1db748ca996bdb86e100e/src%2Ftest%2Frun-pass%2Fgeneric-bind-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01bfc3ae8bff5131cfd1db748ca996bdb86e100e/src%2Ftest%2Frun-pass%2Fgeneric-bind-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-bind-2.rs?ref=01bfc3ae8bff5131cfd1db748ca996bdb86e100e", "patch": "@@ -0,0 +1,10 @@\n+fn id[T](&T t) -> T {\n+  ret t;\n+}\n+\n+fn main() {\n+  auto t = tup(1,2,3,4,5,6,7);\n+  check (t._5 == 6);\n+  auto f0 = bind id[tup(int,int,int,int,int,int,int)](t);\n+  check (f0()._5 == 6);\n+}"}, {"sha": "ef1275e3cecd6ebae893c7201dcfe5ccbe078f50", "filename": "src/test/run-pass/generic-bind.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/01bfc3ae8bff5131cfd1db748ca996bdb86e100e/src%2Ftest%2Frun-pass%2Fgeneric-bind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01bfc3ae8bff5131cfd1db748ca996bdb86e100e/src%2Ftest%2Frun-pass%2Fgeneric-bind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-bind.rs?ref=01bfc3ae8bff5131cfd1db748ca996bdb86e100e", "patch": "@@ -5,9 +5,6 @@ fn id[T](&T t) -> T {\n fn main() {\n   auto t = tup(1,2,3,4,5,6,7);\n   check (t._5 == 6);\n-  // FIXME: this needs to work.\n-  // auto f0 = bind id[tup(int,int,int,int,int,int,int)](t);\n   auto f1 = bind id[tup(int,int,int,int,int,int,int)](_);\n-  // check (f0()._5 == 6);\n   check (f1(t)._5 == 6);\n }"}]}