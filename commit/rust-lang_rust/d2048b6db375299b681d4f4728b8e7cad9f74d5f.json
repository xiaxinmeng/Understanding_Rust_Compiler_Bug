{"sha": "d2048b6db375299b681d4f4728b8e7cad9f74d5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyMDQ4YjZkYjM3NTI5OWI2ODFkNGY0NzI4YjhlN2NhZDlmNzRkNWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-20T01:12:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-20T01:12:58Z"}, "message": "Auto merge of #52101 - japaric:linker-flavor, r=alexcrichton\n\ntry to infer linker flavor from linker name and vice versa\n\nThis is a second take on PR #50359 that implements the logic proposed in https://github.com/rust-lang/rust/pull/50359#pullrequestreview-116663121\n\nWith this change it would become possible to link `thumb*` binaries using GNU's LD on stable as `-C linker=arm-none-eabi-ld` would be enough to change both the linker and the linker flavor from their default values of `arm-none-eabi-gcc` and `gcc`.\n\nTo link `thumb*` binaries using rustc's LLD on stable `-Z linker-flavor` would need to be stabilized as `-C linker=rust-lld -Z linker-flavor=ld.lld` are both required to change the linker and the linker flavor, but this PR doesn't propose that. We would probably need some sort of stability guarantee around `rust-lld`'s name and availability to make linking with rustc's LLD truly stable.\n\nWith this change it would also be possible to link `thumb*` binaries using a system installed LLD on stable using the `-C linker=ld.lld` flag (provided that `ld.lld` is a symlink to the system installed LLD).\n\nr? @alexcrichton", "tree": {"sha": "fe497e08e2a0843f20d7e014154ae5c2a443e7f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe497e08e2a0843f20d7e014154ae5c2a443e7f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2048b6db375299b681d4f4728b8e7cad9f74d5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2048b6db375299b681d4f4728b8e7cad9f74d5f", "html_url": "https://github.com/rust-lang/rust/commit/d2048b6db375299b681d4f4728b8e7cad9f74d5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2048b6db375299b681d4f4728b8e7cad9f74d5f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bf6d50a6ff7685b4aa09172d9d09f03f250da9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bf6d50a6ff7685b4aa09172d9d09f03f250da9d", "html_url": "https://github.com/rust-lang/rust/commit/6bf6d50a6ff7685b4aa09172d9d09f03f250da9d"}, {"sha": "a6f4ae864eb9a99117f7475325bf9ffb2c8e8b90", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6f4ae864eb9a99117f7475325bf9ffb2c8e8b90", "html_url": "https://github.com/rust-lang/rust/commit/a6f4ae864eb9a99117f7475325bf9ffb2c8e8b90"}], "stats": {"total": 177, "additions": 133, "deletions": 44}, "files": [{"sha": "ef81cd3a4575e9909a50a710ef1cef6dcdac039e", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d2048b6db375299b681d4f4728b8e7cad9f74d5f/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2048b6db375299b681d4f4728b8e7cad9f74d5f/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=d2048b6db375299b681d4f4728b8e7cad9f74d5f", "patch": "@@ -40,7 +40,7 @@ use syntax::feature_gate::AttributeType;\n use syntax_pos::{MultiSpan, Span};\n use util::profiling::SelfProfiler;\n \n-use rustc_target::spec::{LinkerFlavor, PanicStrategy};\n+use rustc_target::spec::PanicStrategy;\n use rustc_target::spec::{Target, TargetTriple};\n use rustc_data_structures::flock;\n use jobserver::Client;\n@@ -602,13 +602,6 @@ impl Session {\n             .panic\n             .unwrap_or(self.target.target.options.panic_strategy)\n     }\n-    pub fn linker_flavor(&self) -> LinkerFlavor {\n-        self.opts\n-            .debugging_opts\n-            .linker_flavor\n-            .unwrap_or(self.target.target.linker_flavor)\n-    }\n-\n     pub fn fewer_names(&self) -> bool {\n         let more_names = self.opts\n             .output_types"}, {"sha": "34ddfa9455229a8b996fda97b3050369eb271b1e", "filename": "src/librustc_codegen_llvm/back/link.rs", "status": "modified", "additions": 82, "deletions": 33, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/d2048b6db375299b681d4f4728b8e7cad9f74d5f/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2048b6db375299b681d4f4728b8e7cad9f74d5f/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs?ref=d2048b6db375299b681d4f4728b8e7cad9f74d5f", "patch": "@@ -53,7 +53,9 @@ pub use rustc_codegen_utils::link::{find_crate_name, filename_for_input, default\n // The third parameter is for env vars, used on windows to set up the\n // path for MSVC to find its DLLs, and gcc to find its bundled\n // toolchain\n-pub fn get_linker(sess: &Session) -> (PathBuf, Command) {\n+pub fn get_linker(sess: &Session, linker: &Path, flavor: LinkerFlavor) -> (PathBuf, Command) {\n+    let msvc_tool = windows_registry::find_tool(&sess.opts.target_triple.triple(), \"link.exe\");\n+\n     // If our linker looks like a batch script on Windows then to execute this\n     // we'll need to spawn `cmd` explicitly. This is primarily done to handle\n     // emscripten where the linker is `emcc.bat` and needs to be spawned as\n@@ -62,36 +64,19 @@ pub fn get_linker(sess: &Session) -> (PathBuf, Command) {\n     // This worked historically but is needed manually since #42436 (regression\n     // was tagged as #42791) and some more info can be found on #44443 for\n     // emscripten itself.\n-    let cmd = |linker: &Path| {\n-        if let Some(linker) = linker.to_str() {\n-            if cfg!(windows) && linker.ends_with(\".bat\") {\n-                return Command::bat_script(linker)\n-            }\n-        }\n-        match sess.linker_flavor() {\n+    let mut cmd = match linker.to_str() {\n+        Some(linker) if cfg!(windows) && linker.ends_with(\".bat\") => Command::bat_script(linker),\n+        _ => match flavor {\n             LinkerFlavor::Lld(f) => Command::lld(linker, f),\n+            LinkerFlavor::Msvc\n+                if sess.opts.cg.linker.is_none() && sess.target.target.options.linker.is_none() =>\n+            {\n+                Command::new(msvc_tool.as_ref().map(|t| t.path()).unwrap_or(linker))\n+            },\n             _ => Command::new(linker),\n-\n         }\n     };\n \n-    let msvc_tool = windows_registry::find_tool(&sess.opts.target_triple.triple(), \"link.exe\");\n-\n-    let linker_path = sess.opts.cg.linker.as_ref().map(|s| &**s)\n-        .or(sess.target.target.options.linker.as_ref().map(|s| s.as_ref()))\n-        .unwrap_or(match sess.linker_flavor() {\n-            LinkerFlavor::Msvc => {\n-                msvc_tool.as_ref().map(|t| t.path()).unwrap_or(\"link.exe\".as_ref())\n-            }\n-            LinkerFlavor::Em if cfg!(windows) => \"emcc.bat\".as_ref(),\n-            LinkerFlavor::Em => \"emcc\".as_ref(),\n-            LinkerFlavor::Gcc => \"cc\".as_ref(),\n-            LinkerFlavor::Ld => \"ld\".as_ref(),\n-            LinkerFlavor::Lld(_) => \"lld\".as_ref(),\n-        });\n-\n-    let mut cmd = cmd(linker_path);\n-\n     // The compiler's sysroot often has some bundled tools, so add it to the\n     // PATH for the child.\n     let mut new_path = sess.host_filesearch(PathKind::All)\n@@ -118,7 +103,7 @@ pub fn get_linker(sess: &Session) -> (PathBuf, Command) {\n     }\n     cmd.env(\"PATH\", env::join_paths(new_path).unwrap());\n \n-    (linker_path.to_path_buf(), cmd)\n+    (linker.to_path_buf(), cmd)\n }\n \n pub fn remove(sess: &Session, path: &Path) {\n@@ -608,6 +593,69 @@ fn print_native_static_libs(sess: &Session, all_native_libs: &[NativeLibrary]) {\n     }\n }\n \n+pub fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n+    fn infer_from(\n+        sess: &Session,\n+        linker: Option<PathBuf>,\n+        flavor: Option<LinkerFlavor>,\n+    ) -> Option<(PathBuf, LinkerFlavor)> {\n+        match (linker, flavor) {\n+            (Some(linker), Some(flavor)) => Some((linker, flavor)),\n+            // only the linker flavor is known; use the default linker for the selected flavor\n+            (None, Some(flavor)) => Some((PathBuf::from(match flavor {\n+                LinkerFlavor::Em  => if cfg!(windows) { \"emcc.bat\" } else { \"emcc\" },\n+                LinkerFlavor::Gcc => \"cc\",\n+                LinkerFlavor::Ld => \"ld\",\n+                LinkerFlavor::Msvc => \"link.exe\",\n+                LinkerFlavor::Lld(_) => \"lld\",\n+            }), flavor)),\n+            (Some(linker), None) => {\n+                let stem = linker.file_stem().and_then(|stem| stem.to_str()).unwrap_or_else(|| {\n+                    sess.fatal(\"couldn't extract file stem from specified linker\");\n+                }).to_owned();\n+\n+                let flavor = if stem == \"emcc\" {\n+                    LinkerFlavor::Em\n+                } else if stem == \"gcc\" || stem.ends_with(\"-gcc\") {\n+                    LinkerFlavor::Gcc\n+                } else if stem == \"ld\" || stem == \"ld.lld\" || stem.ends_with(\"-ld\") {\n+                    LinkerFlavor::Ld\n+                } else if stem == \"link\" || stem == \"lld-link\" {\n+                    LinkerFlavor::Msvc\n+                } else if stem == \"lld\" || stem == \"rust-lld\" {\n+                    LinkerFlavor::Lld(sess.target.target.options.lld_flavor)\n+                } else {\n+                    // fall back to the value in the target spec\n+                    sess.target.target.linker_flavor\n+                };\n+\n+                Some((linker, flavor))\n+            },\n+            (None, None) => None,\n+        }\n+    }\n+\n+    // linker and linker flavor specified via command line have precedence over what the target\n+    // specification specifies\n+    if let Some(ret) = infer_from(\n+        sess,\n+        sess.opts.cg.linker.clone(),\n+        sess.opts.debugging_opts.linker_flavor,\n+    ) {\n+        return ret;\n+    }\n+\n+    if let Some(ret) = infer_from(\n+        sess,\n+        sess.target.target.options.linker.clone().map(PathBuf::from),\n+        Some(sess.target.target.linker_flavor),\n+    ) {\n+        return ret;\n+    }\n+\n+    bug!(\"Not enough information provided to determine how to invoke the linker\");\n+}\n+\n // Create a dynamic library or executable\n //\n // This will invoke the system linker/cc to create the resulting file. This\n@@ -618,10 +666,10 @@ fn link_natively(sess: &Session,\n                  codegen_results: &CodegenResults,\n                  tmpdir: &Path) {\n     info!(\"preparing {:?} to {:?}\", crate_type, out_filename);\n-    let flavor = sess.linker_flavor();\n+    let (linker, flavor) = linker_and_flavor(sess);\n \n     // The invocations of cc share some flags across platforms\n-    let (pname, mut cmd) = get_linker(sess);\n+    let (pname, mut cmd) = get_linker(sess, &linker, flavor);\n \n     let root = sess.target_filesearch(PathKind::Native).get_lib_path();\n     if let Some(args) = sess.target.target.options.pre_link_args.get(&flavor) {\n@@ -662,8 +710,8 @@ fn link_natively(sess: &Session,\n     }\n \n     {\n-        let mut linker = codegen_results.linker_info.to_linker(cmd, &sess);\n-        link_args(&mut *linker, sess, crate_type, tmpdir,\n+        let mut linker = codegen_results.linker_info.to_linker(cmd, &sess, flavor);\n+        link_args(&mut *linker, flavor, sess, crate_type, tmpdir,\n                   out_filename, codegen_results);\n         cmd = linker.finalize();\n     }\n@@ -735,7 +783,7 @@ fn link_natively(sess: &Session,\n         // linking executables as pie. Different versions of gcc seem to use\n         // different quotes in the error message so don't check for them.\n         if sess.target.target.options.linker_is_gnu &&\n-           sess.linker_flavor() != LinkerFlavor::Ld &&\n+           flavor != LinkerFlavor::Ld &&\n            (out.contains(\"unrecognized command line option\") ||\n             out.contains(\"unknown argument\")) &&\n            out.contains(\"-no-pie\") &&\n@@ -984,6 +1032,7 @@ fn exec_linker(sess: &Session, cmd: &mut Command, out_filename: &Path, tmpdir: &\n }\n \n fn link_args(cmd: &mut dyn Linker,\n+             flavor: LinkerFlavor,\n              sess: &Session,\n              crate_type: config::CrateType,\n              tmpdir: &Path,\n@@ -1068,7 +1117,7 @@ fn link_args(cmd: &mut dyn Linker,\n             // independent executables by default. We have to pass -no-pie to\n             // explicitly turn that off. Not applicable to ld.\n             if sess.target.target.options.linker_is_gnu\n-                && sess.linker_flavor() != LinkerFlavor::Ld {\n+                && flavor != LinkerFlavor::Ld {\n                 cmd.no_position_independent_executable();\n             }\n         }"}, {"sha": "a429e8f2d815df76932262765047c6c57d0e4691", "filename": "src/librustc_codegen_llvm/back/linker.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d2048b6db375299b681d4f4728b8e7cad9f74d5f/src%2Flibrustc_codegen_llvm%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2048b6db375299b681d4f4728b8e7cad9f74d5f/src%2Flibrustc_codegen_llvm%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flinker.rs?ref=d2048b6db375299b681d4f4728b8e7cad9f74d5f", "patch": "@@ -44,8 +44,9 @@ impl LinkerInfo {\n \n     pub fn to_linker<'a>(&'a self,\n                          cmd: Command,\n-                         sess: &'a Session) -> Box<dyn Linker+'a> {\n-        match sess.linker_flavor() {\n+                         sess: &'a Session,\n+                         flavor: LinkerFlavor) -> Box<dyn Linker+'a> {\n+        match flavor {\n             LinkerFlavor::Lld(LldFlavor::Link) |\n             LinkerFlavor::Msvc => {\n                 Box::new(MsvcLinker {"}, {"sha": "462a2c9f0286335fd14cb0b3be265df25b765cd2", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d2048b6db375299b681d4f4728b8e7cad9f74d5f/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2048b6db375299b681d4f4728b8e7cad9f74d5f/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=d2048b6db375299b681d4f4728b8e7cad9f74d5f", "patch": "@@ -1502,7 +1502,9 @@ fn start_executing_work(tcx: TyCtxt,\n \n     let assembler_cmd = if modules_config.no_integrated_as {\n         // HACK: currently we use linker (gcc) as our assembler\n-        let (name, mut cmd) = get_linker(sess);\n+        let (linker, flavor) = link::linker_and_flavor(sess);\n+\n+        let (name, mut cmd) = get_linker(sess, &linker, flavor);\n         cmd.args(&sess.target.target.options.asm_args);\n         Some(Arc::new(AssemblerCommand {\n             name,"}, {"sha": "4a8ae69b2383e80dc98737651f362961955b01dd", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/d2048b6db375299b681d4f4728b8e7cad9f74d5f/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2048b6db375299b681d4f4728b8e7cad9f74d5f/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=d2048b6db375299b681d4f4728b8e7cad9f74d5f", "patch": "@@ -94,6 +94,29 @@ pub enum LldFlavor {\n     Link,\n }\n \n+impl LldFlavor {\n+    fn from_str(s: &str) -> Option<Self> {\n+        Some(match s {\n+            \"darwin\" => LldFlavor::Ld64,\n+            \"gnu\" => LldFlavor::Ld,\n+            \"link\" => LldFlavor::Link,\n+            \"wasm\" => LldFlavor::Wasm,\n+            _ => return None,\n+        })\n+    }\n+}\n+\n+impl ToJson for LldFlavor {\n+    fn to_json(&self) -> Json {\n+        match *self {\n+            LldFlavor::Ld64 => \"darwin\",\n+            LldFlavor::Ld => \"gnu\",\n+            LldFlavor::Link => \"link\",\n+            LldFlavor::Wasm => \"wasm\",\n+        }.to_json()\n+    }\n+}\n+\n impl ToJson for LinkerFlavor {\n     fn to_json(&self) -> Json {\n         self.desc().to_json()\n@@ -437,6 +460,9 @@ pub struct TargetOptions {\n     /// Linker to invoke\n     pub linker: Option<String>,\n \n+    /// LLD flavor\n+    pub lld_flavor: LldFlavor,\n+\n     /// Linker arguments that are passed *before* any user-defined libraries.\n     pub pre_link_args: LinkArgs, // ... unconditionally\n     pub pre_link_args_crt: LinkArgs, // ... when linking with a bundled crt\n@@ -654,6 +680,7 @@ impl Default for TargetOptions {\n         TargetOptions {\n             is_builtin: false,\n             linker: option_env!(\"CFG_DEFAULT_LINKER\").map(|s| s.to_string()),\n+            lld_flavor: LldFlavor::Ld,\n             pre_link_args: LinkArgs::new(),\n             pre_link_args_crt: LinkArgs::new(),\n             post_link_args: LinkArgs::new(),\n@@ -856,6 +883,20 @@ impl Target {\n                         .map(|s| s.to_string() );\n                 }\n             } );\n+            ($key_name:ident, LldFlavor) => ( {\n+                let name = (stringify!($key_name)).replace(\"_\", \"-\");\n+                obj.find(&name[..]).and_then(|o| o.as_string().and_then(|s| {\n+                    if let Some(flavor) = LldFlavor::from_str(&s) {\n+                        base.options.$key_name = flavor;\n+                    } else {\n+                        return Some(Err(format!(\n+                            \"'{}' is not a valid value for lld-flavor. \\\n+                             Use 'darwin', 'gnu', 'link' or 'wasm.\",\n+                            s)))\n+                    }\n+                    Some(Ok(()))\n+                })).unwrap_or(Ok(()))\n+            } );\n             ($key_name:ident, LinkerFlavor) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 obj.find(&name[..]).and_then(|o| o.as_string().map(|s| {\n@@ -911,6 +952,7 @@ impl Target {\n \n         key!(is_builtin, bool);\n         key!(linker, optional);\n+        try!(key!(lld_flavor, LldFlavor));\n         key!(pre_link_args, link_args);\n         key!(pre_link_args_crt, link_args);\n         key!(pre_link_objects_exe, list);\n@@ -1118,6 +1160,7 @@ impl ToJson for Target {\n \n         target_option_val!(is_builtin);\n         target_option_val!(linker);\n+        target_option_val!(lld_flavor);\n         target_option_val!(link_args - pre_link_args);\n         target_option_val!(link_args - pre_link_args_crt);\n         target_option_val!(pre_link_objects_exe);"}, {"sha": "94e7739b1a05afe66191e8fbd5bebb5dbacf91f8", "filename": "src/librustc_target/spec/wasm32_unknown_unknown.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d2048b6db375299b681d4f4728b8e7cad9f74d5f/src%2Flibrustc_target%2Fspec%2Fwasm32_unknown_unknown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2048b6db375299b681d4f4728b8e7cad9f74d5f/src%2Flibrustc_target%2Fspec%2Fwasm32_unknown_unknown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwasm32_unknown_unknown.rs?ref=d2048b6db375299b681d4f4728b8e7cad9f74d5f", "patch": "@@ -53,6 +53,7 @@ pub fn target() -> Result<Target, String> {\n \n         // we use the LLD shipped with the Rust toolchain by default\n         linker: Some(\"rust-lld\".to_owned()),\n+        lld_flavor: LldFlavor::Wasm,\n \n         .. Default::default()\n     };"}]}