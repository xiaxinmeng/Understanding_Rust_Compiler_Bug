{"sha": "a13b13ff46b2d669f0d7a8e024938366fb4a3281", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExM2IxM2ZmNDZiMmQ2NjlmMGQ3YThlMDI0OTM4MzY2ZmI0YTMyODE=", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-09-01T16:34:28Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-09-09T05:21:31Z"}, "message": "Const drop selection candidates", "tree": {"sha": "b0eb25d07e25a9fcbf522e3d9f523a8784662643", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0eb25d07e25a9fcbf522e3d9f523a8784662643"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a13b13ff46b2d669f0d7a8e024938366fb4a3281", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEQ7Fl7qPq2YcWF1dqAn35M4hird0FAmE5mdsACgkQAn35M4hi\nrd21TQ/+JY5IolMZEDm1fgOPWP1yVnvs/durJJUn7Iqp7qmr9WBqyUx01XW+sxNB\n9u/BbeQ6aJLiUSJeEoN5UOAqpjRWLu/2mj7QUiJRmvKlVC+7SUjnyijKDdXYW4Ma\n8Jy+c2pp4xsy4VwIBp9F4Hz07XuyAzt3Ha+GyOxPkDiZxeukIYiR719OuPLVGJCI\nZwBZPg5WQIv5qd1sy3I2eDczcCHelZsr2ZQFKcpHjmuYrZZCer9FWi0j9IbVXw9e\nUGyeZ33VMJ0EjKMx8UViohbbfInw5J9lObfnFNM2RjyAf3gEPzn8lRtFZtiDv3rb\nwS+9j53dKm/DS890/TX0l3nyEar3dUIerO0uD77Kn9p3htXzqcb3T87qUeZAl9yS\nkEqOGW9PbTzJJZcDtTpdRgU7FC4tMOPQY5PaWVCLbvHk4VMRhkG6YXhL8HBDw+PJ\nKi4aPHBdL/X0zu2hskXSBqmkbERBOz/ly+syQ/aLlpcWjzMmg8w6LlFcR2hyZRv1\nhMAjoO2CdtsonFwBm62rQteBcTcio7rREgovNI87SCZaUTROsyyufkMuph1xtTC1\najs3DoQipV3/V0YltvaSPjg3nqbaExpN8tE5Co2JlLvrqsaPv6H2ZsG3UYr9z1VO\nNMNoZtc5S2IIdzRxwPrLgjb/YejnzjWwoiB0zMbb8D4zlrrZqYM=\n=FgSB\n-----END PGP SIGNATURE-----", "payload": "tree b0eb25d07e25a9fcbf522e3d9f523a8784662643\nparent 894ce921a091cb9252fd9d72f1c97b3996e3501c\nauthor Deadbeef <ent3rm4n@gmail.com> 1630514068 +0000\ncommitter Deadbeef <ent3rm4n@gmail.com> 1631164891 +0000\n\nConst drop selection candidates\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a13b13ff46b2d669f0d7a8e024938366fb4a3281", "html_url": "https://github.com/rust-lang/rust/commit/a13b13ff46b2d669f0d7a8e024938366fb4a3281", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a13b13ff46b2d669f0d7a8e024938366fb4a3281/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "894ce921a091cb9252fd9d72f1c97b3996e3501c", "url": "https://api.github.com/repos/rust-lang/rust/commits/894ce921a091cb9252fd9d72f1c97b3996e3501c", "html_url": "https://github.com/rust-lang/rust/commit/894ce921a091cb9252fd9d72f1c97b3996e3501c"}], "stats": {"total": 233, "additions": 210, "deletions": 23}, "files": [{"sha": "444bc2ff043dfb6e2a143eeec5a09292fe4da477", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a13b13ff46b2d669f0d7a8e024938366fb4a3281/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13b13ff46b2d669f0d7a8e024938366fb4a3281/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=a13b13ff46b2d669f0d7a8e024938366fb4a3281", "patch": "@@ -529,6 +529,9 @@ pub enum ImplSource<'tcx, N> {\n \n     /// ImplSource for a trait alias.\n     TraitAlias(ImplSourceTraitAliasData<'tcx, N>),\n+\n+    /// ImplSource for a `const Drop` implementation.\n+    ConstDrop(ImplSourceConstDropData),\n }\n \n impl<'tcx, N> ImplSource<'tcx, N> {\n@@ -543,7 +546,8 @@ impl<'tcx, N> ImplSource<'tcx, N> {\n             ImplSource::Object(d) => d.nested,\n             ImplSource::FnPointer(d) => d.nested,\n             ImplSource::DiscriminantKind(ImplSourceDiscriminantKindData)\n-            | ImplSource::Pointee(ImplSourcePointeeData) => Vec::new(),\n+            | ImplSource::Pointee(ImplSourcePointeeData)\n+            | ImplSource::ConstDrop(ImplSourceConstDropData) => Vec::new(),\n             ImplSource::TraitAlias(d) => d.nested,\n             ImplSource::TraitUpcasting(d) => d.nested,\n         }\n@@ -560,7 +564,8 @@ impl<'tcx, N> ImplSource<'tcx, N> {\n             ImplSource::Object(d) => &d.nested[..],\n             ImplSource::FnPointer(d) => &d.nested[..],\n             ImplSource::DiscriminantKind(ImplSourceDiscriminantKindData)\n-            | ImplSource::Pointee(ImplSourcePointeeData) => &[],\n+            | ImplSource::Pointee(ImplSourcePointeeData)\n+            | ImplSource::ConstDrop(ImplSourceConstDropData) => &[],\n             ImplSource::TraitAlias(d) => &d.nested[..],\n             ImplSource::TraitUpcasting(d) => &d.nested[..],\n         }\n@@ -621,6 +626,9 @@ impl<'tcx, N> ImplSource<'tcx, N> {\n                     nested: d.nested.into_iter().map(f).collect(),\n                 })\n             }\n+            ImplSource::ConstDrop(ImplSourceConstDropData) => {\n+                ImplSource::ConstDrop(ImplSourceConstDropData)\n+            }\n         }\n     }\n }\n@@ -712,6 +720,9 @@ pub struct ImplSourceDiscriminantKindData;\n #[derive(Clone, Debug, PartialEq, Eq, TyEncodable, TyDecodable, HashStable)]\n pub struct ImplSourcePointeeData;\n \n+#[derive(Clone, Debug, PartialEq, Eq, TyEncodable, TyDecodable, HashStable)]\n+pub struct ImplSourceConstDropData;\n+\n #[derive(Clone, PartialEq, Eq, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]\n pub struct ImplSourceTraitAliasData<'tcx, N> {\n     pub alias_def_id: DefId,"}, {"sha": "3c0fedb360827ef9a0900f384afee996e3407ccf", "filename": "compiler/rustc_middle/src/traits/select.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a13b13ff46b2d669f0d7a8e024938366fb4a3281/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13b13ff46b2d669f0d7a8e024938366fb4a3281/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs?ref=a13b13ff46b2d669f0d7a8e024938366fb4a3281", "patch": "@@ -143,6 +143,9 @@ pub enum SelectionCandidate<'tcx> {\n     BuiltinObjectCandidate,\n \n     BuiltinUnsizeCandidate,\n+\n+    /// Implementation of `const Drop`.\n+    ConstDropCandidate,\n }\n \n /// The result of trait evaluation. The order is important"}, {"sha": "d0a2d0d9afb3d31d1c86428606d07ffe98024208", "filename": "compiler/rustc_middle/src/traits/structural_impls.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a13b13ff46b2d669f0d7a8e024938366fb4a3281/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13b13ff46b2d669f0d7a8e024938366fb4a3281/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fstructural_impls.rs?ref=a13b13ff46b2d669f0d7a8e024938366fb4a3281", "patch": "@@ -32,6 +32,8 @@ impl<'tcx, N: fmt::Debug> fmt::Debug for traits::ImplSource<'tcx, N> {\n             super::ImplSource::TraitAlias(ref d) => write!(f, \"{:?}\", d),\n \n             super::ImplSource::TraitUpcasting(ref d) => write!(f, \"{:?}\", d),\n+            \n+            super::ImplSource::ConstDrop(ref d) => write!(f, \"{:?}\", d),\n         }\n     }\n }\n@@ -125,4 +127,5 @@ TrivialTypeFoldableAndLiftImpls! {\n     super::IfExpressionCause,\n     super::ImplSourceDiscriminantKindData,\n     super::ImplSourcePointeeData,\n+    super::ImplSourceConstDropData,\n }"}, {"sha": "49109247663531a334f5ffbb5b1aead974433317", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a13b13ff46b2d669f0d7a8e024938366fb4a3281/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13b13ff46b2d669f0d7a8e024938366fb4a3281/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=a13b13ff46b2d669f0d7a8e024938366fb4a3281", "patch": "@@ -1477,7 +1477,8 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n             }\n             super::ImplSource::AutoImpl(..)\n             | super::ImplSource::Builtin(..)\n-            | super::ImplSource::TraitUpcasting(_) => {\n+            | super::ImplSource::TraitUpcasting(_)\n+            | super::ImplSource::ConstDrop(_) => {\n                 // These traits have no associated types.\n                 selcx.tcx().sess.delay_span_bug(\n                     obligation.cause.span,\n@@ -1549,7 +1550,8 @@ fn confirm_select_candidate<'cx, 'tcx>(\n         | super::ImplSource::Param(..)\n         | super::ImplSource::Builtin(..)\n         | super::ImplSource::TraitUpcasting(_)\n-        | super::ImplSource::TraitAlias(..) => {\n+        | super::ImplSource::TraitAlias(..)\n+        | super::ImplSource::ConstDrop(_) => {\n             // we don't create Select candidates with this kind of resolution\n             span_bug!(\n                 obligation.cause.span,"}, {"sha": "ffaef566cd59d8a85e21248ba5f64bd9d8cc8c3c", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 109, "deletions": 1, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/a13b13ff46b2d669f0d7a8e024938366fb4a3281/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13b13ff46b2d669f0d7a8e024938366fb4a3281/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=a13b13ff46b2d669f0d7a8e024938366fb4a3281", "patch": "@@ -8,7 +8,7 @@\n use rustc_hir as hir;\n use rustc_infer::traits::{Obligation, SelectionError, TraitObligation};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n-use rustc_middle::ty::{self, TypeFoldable};\n+use rustc_middle::ty::{self, Ty, TypeFoldable};\n use rustc_target::spec::abi::Abi;\n \n use crate::traits::coherence::Conflict;\n@@ -277,6 +277,15 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             self.assemble_builtin_bound_candidates(sized_conditions, &mut candidates);\n         } else if lang_items.unsize_trait() == Some(def_id) {\n             self.assemble_candidates_for_unsizing(obligation, &mut candidates);\n+        } else if lang_items.drop_trait() == Some(def_id)\n+            && obligation.predicate.skip_binder().constness == ty::BoundConstness::ConstIfConst\n+        {\n+            if self.is_in_const_context {\n+                self.assemble_const_drop_candidates(obligation, &mut candidates)?;\n+            } else {\n+                // `~const Drop` when we are not in a const context has no effect.\n+                candidates.vec.push(ConstDropCandidate)\n+            }\n         } else {\n             if lang_items.clone_trait() == Some(def_id) {\n                 // Same builtin conditions as `Copy`, i.e., every type which has builtin support\n@@ -803,4 +812,103 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             }\n         }\n     }\n+\n+    fn assemble_const_drop_candidates(\n+        &mut self,\n+        obligation: &TraitObligation<'tcx>,\n+        candidates: &mut SelectionCandidateSet<'tcx>,\n+    ) -> Result<(), SelectionError<'tcx>> {\n+        let mut stack: Vec<(Ty<'tcx>, usize)> = vec![(obligation.self_ty().skip_binder(), 0)];\n+\n+        while let Some((ty, depth)) = stack.pop() {\n+            self.check_recursion_depth(depth, obligation)?;\n+            let mut copy_candidates = SelectionCandidateSet { vec: Vec::new(), ambiguous: false };\n+            let mut copy_obligation =\n+                obligation.with(obligation.predicate.rebind(ty::TraitPredicate {\n+                    trait_ref: ty::TraitRef {\n+                        def_id: self.tcx().require_lang_item(hir::LangItem::Copy, None),\n+                        substs: self.tcx().mk_substs_trait(ty, &[]),\n+                    },\n+                    constness: ty::BoundConstness::NotConst,\n+                }));\n+            copy_obligation.recursion_depth = depth + 1;\n+            self.assemble_candidates_from_impls(&copy_obligation, &mut copy_candidates);\n+            let copy_conditions = self.copy_clone_conditions(&copy_obligation);\n+            self.assemble_builtin_bound_candidates(copy_conditions, &mut copy_candidates);\n+            if !copy_candidates.vec.is_empty() {\n+                continue;\n+            }\n+\n+            match ty.kind() {\n+                ty::Int(_)\n+                | ty::Uint(_)\n+                | ty::Float(_)\n+                | ty::Infer(ty::IntVar(_))\n+                | ty::Infer(ty::FloatVar(_))\n+                | ty::FnPtr(_)\n+                | ty::Never\n+                | ty::Ref(..)\n+                | ty::FnDef(..)\n+                | ty::RawPtr(_)\n+                | ty::Bool\n+                | ty::Char\n+                | ty::Str\n+                | ty::Foreign(_) => {} // Do nothing. These types satisfy `const Drop`.\n+\n+                ty::Adt(def, subst) => {\n+                    let mut set = SelectionCandidateSet { vec: Vec::new(), ambiguous: false };\n+                    self.assemble_candidates_from_impls(obligation, &mut set);\n+                    if set\n+                        .vec\n+                        .into_iter()\n+                        .find(|candidate| {\n+                            if let SelectionCandidate::ImplCandidate(did) = candidate {\n+                                matches!(self.tcx().impl_constness(*did), hir::Constness::NotConst)\n+                            } else {\n+                                false\n+                            }\n+                        })\n+                        .is_none()\n+                    {\n+                        // could not find a const impl for Drop, iterate over its fields.\n+                        stack\n+                            .extend(def.all_fields().map(|f| (f.ty(self.tcx(), subst), depth + 1)));\n+                    }\n+                }\n+\n+                ty::Array(ty, _) => stack.push((ty, depth + 1)),\n+\n+                ty::Tuple(_) => stack.extend(ty.tuple_fields().map(|t| (t, depth + 1))),\n+\n+                ty::Closure(_, substs) => {\n+                    stack.extend(substs.as_closure().upvar_tys().map(|t| (t, depth + 1)))\n+                }\n+\n+                ty::Generator(_, substs, _) => {\n+                    let substs = substs.as_generator();\n+                    stack.extend(substs.upvar_tys().map(|t| (t, depth + 1)));\n+                    stack.push((substs.witness(), depth + 1));\n+                }\n+\n+                ty::GeneratorWitness(tys) => stack.extend(\n+                    self.tcx().erase_late_bound_regions(*tys).iter().map(|t| (t, depth + 1)),\n+                ),\n+\n+                ty::Slice(ty) => stack.push((ty, depth + 1)),\n+\n+                ty::Opaque(..)\n+                | ty::Dynamic(..)\n+                | ty::Error(_)\n+                | ty::Bound(..)\n+                | ty::Infer(_)\n+                | ty::Placeholder(_)\n+                | ty::Projection(..)\n+                | ty::Param(..) => return Ok(()),\n+            }\n+        }\n+        // all types have passed.\n+        candidates.vec.push(ConstDropCandidate);\n+\n+        Ok(())\n+    }\n }"}, {"sha": "3b6555de912e959465d14a13180ee4ed2ffdd9a7", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a13b13ff46b2d669f0d7a8e024938366fb4a3281/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13b13ff46b2d669f0d7a8e024938366fb4a3281/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=a13b13ff46b2d669f0d7a8e024938366fb4a3281", "patch": "@@ -28,7 +28,7 @@ use crate::traits::TraitNotObjectSafe;\n use crate::traits::VtblSegment;\n use crate::traits::{BuiltinDerivedObligation, ImplDerivedObligation};\n use crate::traits::{\n-    ImplSourceAutoImplData, ImplSourceBuiltinData, ImplSourceClosureData,\n+    ImplSourceAutoImplData, ImplSourceBuiltinData, ImplSourceClosureData, ImplSourceConstDropData,\n     ImplSourceDiscriminantKindData, ImplSourceFnPointerData, ImplSourceGeneratorData,\n     ImplSourceObjectData, ImplSourcePointeeData, ImplSourceTraitAliasData,\n     ImplSourceTraitUpcastingData, ImplSourceUserDefinedData,\n@@ -124,6 +124,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 let data = self.confirm_trait_upcasting_unsize_candidate(obligation, idx)?;\n                 Ok(ImplSource::TraitUpcasting(data))\n             }\n+\n+            ConstDropCandidate => Ok(ImplSource::ConstDrop(ImplSourceConstDropData)),\n         }\n     }\n "}, {"sha": "777e4ffc080a4dafdeaf7a15fe384d8d714b6258", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a13b13ff46b2d669f0d7a8e024938366fb4a3281/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13b13ff46b2d669f0d7a8e024938366fb4a3281/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=a13b13ff46b2d669f0d7a8e024938366fb4a3281", "patch": "@@ -1038,19 +1038,15 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         it.for_each(|o| o.recursion_depth = cmp::max(min_depth, o.recursion_depth) + 1);\n     }\n \n-    /// Checks that the recursion limit has not been exceeded.\n-    ///\n-    /// The weird return type of this function allows it to be used with the `try` (`?`)\n-    /// operator within certain functions.\n-    fn check_recursion_limit<T: Display + TypeFoldable<'tcx>, V: Display + TypeFoldable<'tcx>>(\n+    fn check_recursion_depth<T: Display + TypeFoldable<'tcx>>(\n         &self,\n-        obligation: &Obligation<'tcx, T>,\n-        error_obligation: &Obligation<'tcx, V>,\n+        depth: usize,\n+        error_obligation: &Obligation<'tcx, T>,\n     ) -> Result<(), OverflowError> {\n-        if !self.infcx.tcx.recursion_limit().value_within_limit(obligation.recursion_depth) {\n+        if !self.infcx.tcx.recursion_limit().value_within_limit(depth) {\n             match self.query_mode {\n                 TraitQueryMode::Standard => {\n-                    self.infcx().report_overflow_error(error_obligation, true);\n+                    self.infcx.report_overflow_error(error_obligation, true);\n                 }\n                 TraitQueryMode::Canonical => {\n                     return Err(OverflowError);\n@@ -1060,6 +1056,18 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         Ok(())\n     }\n \n+    /// Checks that the recursion limit has not been exceeded.\n+    ///\n+    /// The weird return type of this function allows it to be used with the `try` (`?`)\n+    /// operator within certain functions.\n+    fn check_recursion_limit<T: Display + TypeFoldable<'tcx>, V: Display + TypeFoldable<'tcx>>(\n+        &self,\n+        obligation: &Obligation<'tcx, T>,\n+        error_obligation: &Obligation<'tcx, V>,\n+    ) -> Result<(), OverflowError> {\n+        self.check_recursion_depth(obligation.recursion_depth, error_obligation)\n+    }\n+\n     fn in_task<OP, R>(&mut self, op: OP) -> (R, DepNodeIndex)\n     where\n         OP: FnOnce(&mut Self) -> R,\n@@ -1079,10 +1087,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let tcx = self.tcx();\n         // Respect const trait obligations\n         if self.is_trait_predicate_const(obligation.predicate.skip_binder()) {\n-            if Some(obligation.predicate.skip_binder().trait_ref.def_id)\n-                != tcx.lang_items().sized_trait()\n-            // const Sized bounds are skipped\n-            {\n                 match candidate {\n                     // const impl\n                     ImplCandidate(def_id)\n@@ -1097,12 +1101,12 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     // generator, this will raise error in other places\n                     // or ignore error with const_async_blocks feature\n                     GeneratorCandidate => {}\n+                    ConstDropCandidate => {}\n                     _ => {\n                         // reject all other types of candidates\n                         return Err(Unimplemented);\n                     }\n                 }\n-            }\n         }\n         // Treat negative impls as unimplemented, and reservation impls as ambiguity.\n         if let ImplCandidate(def_id) = candidate {\n@@ -1476,14 +1480,16 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             (\n                 BuiltinCandidate { has_nested: false }\n                 | DiscriminantKindCandidate\n-                | PointeeCandidate,\n+                | PointeeCandidate\n+                | ConstDropCandidate,\n                 _,\n             ) => true,\n             (\n                 _,\n                 BuiltinCandidate { has_nested: false }\n                 | DiscriminantKindCandidate\n-                | PointeeCandidate,\n+                | PointeeCandidate\n+                | ConstDropCandidate,\n             ) => false,\n \n             (ParamCandidate(other), ParamCandidate(victim)) => {"}, {"sha": "87b729faa54e0ad5f34796d330d236b9270612e7", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a13b13ff46b2d669f0d7a8e024938366fb4a3281/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13b13ff46b2d669f0d7a8e024938366fb4a3281/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=a13b13ff46b2d669f0d7a8e024938366fb4a3281", "patch": "@@ -386,7 +386,8 @@ fn resolve_associated_item<'tcx>(\n         | traits::ImplSource::TraitAlias(..)\n         | traits::ImplSource::DiscriminantKind(..)\n         | traits::ImplSource::Pointee(..)\n-        | traits::ImplSource::TraitUpcasting(_) => None,\n+        | traits::ImplSource::TraitUpcasting(_)\n+        | traits::ImplSource::ConstDrop(_) => None,\n     })\n }\n "}, {"sha": "3fcfd42f94e029297e8a79bee285115f4c68147e", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-drop.rs", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/a13b13ff46b2d669f0d7a8e024938366fb4a3281/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13b13ff46b2d669f0d7a8e024938366fb4a3281/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop.rs?ref=a13b13ff46b2d669f0d7a8e024938366fb4a3281", "patch": "@@ -23,6 +23,57 @@ const fn b() -> u8 {\n \n const C: u8 = b();\n \n+macro_rules! implements_const_drop {\n+    ($($exp:expr),*$(,)?) => {\n+        $(\n+            const _: () = a($exp);\n+        )*\n+    }\n+}\n+\n+#[allow(dead_code)]\n+mod t {\n+    pub struct Foo;\n+    pub enum Bar { A }\n+    pub fn foo() {}\n+    pub struct ConstDrop;\n+\n+    impl const Drop for ConstDrop {\n+        fn drop(&mut self) {}\n+    }\n+\n+    pub struct HasConstDrop(pub ConstDrop);\n+    pub struct TrivialFields(pub u8, pub i8, pub usize, pub isize);\n+}\n+\n+use t::*;\n+\n+implements_const_drop! {\n+    1u8,\n+    2,\n+    3.0,\n+    Foo,\n+    Bar::A,\n+    foo,\n+    ConstDrop,\n+    HasConstDrop(ConstDrop),\n+    TrivialFields(1, 2, 3, 4),\n+    &1,\n+    &1 as *const i32,\n+}\n+\n fn main() {\n+    struct HasDropGlue(Box<u8>);\n+    struct HasDropImpl;\n+    impl Drop for HasDropImpl {\n+        fn drop(&mut self) {\n+            println!(\"not trivial drop\");\n+        }\n+    }\n+\n+    // These types should pass because ~const in a non-const context should have no effect.\n+    a(HasDropGlue(Box::new(0)));\n+    a(HasDropImpl);\n+\n     assert_eq!(C, 2);\n }"}]}