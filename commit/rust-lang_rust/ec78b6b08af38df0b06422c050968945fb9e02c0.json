{"sha": "ec78b6b08af38df0b06422c050968945fb9e02c0", "node_id": "C_kwDOAAsO6NoAKGVjNzhiNmIwOGFmMzhkZjBiMDY0MjJjMDUwOTY4OTQ1ZmI5ZTAyYzA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-01T17:00:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-01T17:00:23Z"}, "message": "Auto merge of #12671 - flodiebold:test-for-12669, r=flodiebold\n\nAdd tests for #12669", "tree": {"sha": "342524650afa3482671af4420b71b30c838a2bba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/342524650afa3482671af4420b71b30c838a2bba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec78b6b08af38df0b06422c050968945fb9e02c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec78b6b08af38df0b06422c050968945fb9e02c0", "html_url": "https://github.com/rust-lang/rust/commit/ec78b6b08af38df0b06422c050968945fb9e02c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec78b6b08af38df0b06422c050968945fb9e02c0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "994f3cf74dea8730e473c4ad483bea0baff491c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/994f3cf74dea8730e473c4ad483bea0baff491c9", "html_url": "https://github.com/rust-lang/rust/commit/994f3cf74dea8730e473c4ad483bea0baff491c9"}, {"sha": "9a12d0d6f2955e52b7098142182ff4248c5219cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a12d0d6f2955e52b7098142182ff4248c5219cc", "html_url": "https://github.com/rust-lang/rust/commit/9a12d0d6f2955e52b7098142182ff4248c5219cc"}], "stats": {"total": 94, "additions": 93, "deletions": 1}, "files": [{"sha": "8e8b5c322f9edf1a8c2b50a86ddc32319777274f", "filename": "crates/hir-def/src/data.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ec78b6b08af38df0b06422c050968945fb9e02c0/crates%2Fhir-def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec78b6b08af38df0b06422c050968945fb9e02c0/crates%2Fhir-def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fdata.rs?ref=ec78b6b08af38df0b06422c050968945fb9e02c0", "patch": "@@ -2,7 +2,7 @@\n \n use std::{mem, sync::Arc};\n \n-use hir_expand::{name::Name, AstId, ExpandResult, HirFileId, InFile, MacroCallId};\n+use hir_expand::{name::Name, AstId, ExpandResult, HirFileId, InFile, MacroCallId, MacroDefKind};\n use syntax::ast;\n \n use crate::{\n@@ -498,6 +498,17 @@ impl<'a> AssocItemCollector<'a> {\n                     if !self.db.enable_proc_attr_macros() {\n                         continue 'attrs;\n                     }\n+                    let loc = self.db.lookup_intern_macro_call(call_id);\n+                    if let MacroDefKind::ProcMacro(exp, ..) = loc.def.kind {\n+                        // If there's no expander for the proc macro (e.g. the\n+                        // proc macro is ignored, or building the proc macro\n+                        // crate failed), skip expansion like we would if it was\n+                        // disabled. This is analogous to the handling in\n+                        // `DefCollector::collect_macros`.\n+                        if exp.is_dummy() {\n+                            continue 'attrs;\n+                        }\n+                    }\n                     match self.expander.enter_expand_id(self.db, call_id) {\n                         ExpandResult { value: Some((mark, mac)), .. } => {\n                             self.collect_macro_items(mark, mac);"}, {"sha": "a1ab6060e790c0cdb4a9a02ffcd33e7b66d2aa0e", "filename": "crates/hir-ty/src/tests/macros.rs", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/ec78b6b08af38df0b06422c050968945fb9e02c0/crates%2Fhir-ty%2Fsrc%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec78b6b08af38df0b06422c050968945fb9e02c0/crates%2Fhir-ty%2Fsrc%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fmacros.rs?ref=ec78b6b08af38df0b06422c050968945fb9e02c0", "patch": "@@ -1274,3 +1274,65 @@ impl S {\n         \"#]],\n     );\n }\n+\n+#[test]\n+fn infer_in_unexpandable_attr_proc_macro_1() {\n+    check_types(\n+        r#\"\n+//- /main.rs crate:main deps:mac\n+#[mac::attr_macro]\n+fn foo() {\n+    let xxx = 1;\n+      //^^^ i32\n+}\n+\n+//- /mac.rs crate:mac\n+#![crate_type=\"proc-macro\"]\n+#[proc_macro_attribute]\n+pub fn attr_macro() {}\n+\"#,\n+    );\n+}\n+\n+#[test]\n+fn infer_in_unexpandable_attr_proc_macro_in_impl() {\n+    check_types(\n+        r#\"\n+//- /main.rs crate:main deps:mac\n+struct Foo;\n+impl Foo {\n+    #[mac::attr_macro]\n+    fn foo() {\n+        let xxx = 1;\n+          //^^^ i32\n+    }\n+}\n+\n+//- /mac.rs crate:mac\n+#![crate_type=\"proc-macro\"]\n+#[proc_macro_attribute]\n+pub fn attr_macro() {}\n+\"#,\n+    );\n+}\n+\n+#[test]\n+fn infer_in_unexpandable_attr_proc_macro_in_trait() {\n+    check_types(\n+        r#\"\n+//- /main.rs crate:main deps:mac\n+trait Foo {\n+    #[mac::attr_macro]\n+    fn foo() {\n+        let xxx = 1;\n+          //^^^ i32\n+    }\n+}\n+\n+//- /mac.rs crate:mac\n+#![crate_type=\"proc-macro\"]\n+#[proc_macro_attribute]\n+pub fn attr_macro() {}\n+\"#,\n+    );\n+}"}, {"sha": "97ea5c456a635009b738b151b73faf2ab99113d4", "filename": "crates/ide-diagnostics/src/handlers/inactive_code.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ec78b6b08af38df0b06422c050968945fb9e02c0/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Finactive_code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec78b6b08af38df0b06422c050968945fb9e02c0/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Finactive_code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Finactive_code.rs?ref=ec78b6b08af38df0b06422c050968945fb9e02c0", "patch": "@@ -104,6 +104,25 @@ fn f() {\n         );\n     }\n \n+    #[test]\n+    fn inactive_assoc_item() {\n+        // FIXME these currently don't work, hence the *\n+        check(\n+            r#\"\n+struct Foo;\n+impl Foo {\n+    #[cfg(any())] pub fn f() {}\n+  //*************************** weak: code is inactive due to #[cfg] directives\n+}\n+\n+trait Bar {\n+    #[cfg(any())] pub fn f() {}\n+  //*************************** weak: code is inactive due to #[cfg] directives\n+}\n+\"#,\n+        );\n+    }\n+\n     /// Tests that `cfg` attributes behind `cfg_attr` is handled properly.\n     #[test]\n     fn inactive_via_cfg_attr() {"}]}