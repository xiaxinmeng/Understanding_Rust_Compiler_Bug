{"sha": "8796e7a9cfd4c5c4f1de15ec1c53994ddf288665", "node_id": "C_kwDOAAsO6NoAKDg3OTZlN2E5Y2ZkNGM1YzRmMWRlMTVlYzFjNTM5OTRkZGYyODg2NjU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-08T17:59:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-08T17:59:45Z"}, "message": "Auto merge of #102315 - RalfJung:assert_unsafe_precondition, r=thomcc\n\nadd a few more assert_unsafe_precondition\n\nAdd debug-assertion checking for `ptr.read()`, `ptr.write(_)`, and `unreachable_unchecked.`\n\nThis is quite useful for [cargo-careful](https://github.com/RalfJung/cargo-careful).", "tree": {"sha": "82d32297c678847bba693c43a3be1b806a7a9637", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82d32297c678847bba693c43a3be1b806a7a9637"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8796e7a9cfd4c5c4f1de15ec1c53994ddf288665", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8796e7a9cfd4c5c4f1de15ec1c53994ddf288665", "html_url": "https://github.com/rust-lang/rust/commit/8796e7a9cfd4c5c4f1de15ec1c53994ddf288665", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8796e7a9cfd4c5c4f1de15ec1c53994ddf288665/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c27948d255167d827421401950c6d723ba28de8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c27948d255167d827421401950c6d723ba28de8f", "html_url": "https://github.com/rust-lang/rust/commit/c27948d255167d827421401950c6d723ba28de8f"}, {"sha": "d71a85135ba9209cd93f14149ee4b14765ae8f57", "url": "https://api.github.com/repos/rust-lang/rust/commits/d71a85135ba9209cd93f14149ee4b14765ae8f57", "html_url": "https://github.com/rust-lang/rust/commit/d71a85135ba9209cd93f14149ee4b14765ae8f57"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "80036bcc4def7f28158fe2687a80b26cde987911", "filename": "library/core/src/hint.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8796e7a9cfd4c5c4f1de15ec1c53994ddf288665/library%2Fcore%2Fsrc%2Fhint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8796e7a9cfd4c5c4f1de15ec1c53994ddf288665/library%2Fcore%2Fsrc%2Fhint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhint.rs?ref=8796e7a9cfd4c5c4f1de15ec1c53994ddf288665", "patch": "@@ -100,7 +100,10 @@ use crate::intrinsics;\n pub const unsafe fn unreachable_unchecked() -> ! {\n     // SAFETY: the safety contract for `intrinsics::unreachable` must\n     // be upheld by the caller.\n-    unsafe { intrinsics::unreachable() }\n+    unsafe {\n+        intrinsics::assert_unsafe_precondition!(() => false);\n+        intrinsics::unreachable()\n+    }\n }\n \n /// Emits a machine instruction to signal the processor that it is running in"}, {"sha": "d4ab234cec349898b859d2ee2593391f007c12c7", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8796e7a9cfd4c5c4f1de15ec1c53994ddf288665/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8796e7a9cfd4c5c4f1de15ec1c53994ddf288665/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=8796e7a9cfd4c5c4f1de15ec1c53994ddf288665", "patch": "@@ -1114,6 +1114,7 @@ pub const unsafe fn read<T>(src: *const T) -> T {\n     // Also, since we just wrote a valid value into `tmp`, it is guaranteed\n     // to be properly initialized.\n     unsafe {\n+        assert_unsafe_precondition!([T](src: *const T) => is_aligned_and_not_null(src));\n         copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n         tmp.assume_init()\n     }\n@@ -1307,6 +1308,7 @@ pub const unsafe fn write<T>(dst: *mut T, src: T) {\n     // `dst` cannot overlap `src` because the caller has mutable access\n     // to `dst` while `src` is owned by this function.\n     unsafe {\n+        assert_unsafe_precondition!([T](dst: *mut T) => is_aligned_and_not_null(dst));\n         copy_nonoverlapping(&src as *const T, dst, 1);\n         intrinsics::forget(src);\n     }"}, {"sha": "4318e926e47917dca9b99ac60e79168e38382e29", "filename": "src/test/codegen/mem-replace-direct-memcpy.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8796e7a9cfd4c5c4f1de15ec1c53994ddf288665/src%2Ftest%2Fcodegen%2Fmem-replace-direct-memcpy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8796e7a9cfd4c5c4f1de15ec1c53994ddf288665/src%2Ftest%2Fcodegen%2Fmem-replace-direct-memcpy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fmem-replace-direct-memcpy.rs?ref=8796e7a9cfd4c5c4f1de15ec1c53994ddf288665", "patch": "@@ -4,6 +4,7 @@\n // known to be `1` after inlining).\n \n // compile-flags: -C no-prepopulate-passes -Zinline-mir=no\n+// ignore-debug: the debug assertions get in the way\n \n #![crate_type = \"lib\"]\n "}, {"sha": "f6de3699f778189891594022be12634cd343def9", "filename": "src/test/ui/consts/const_unsafe_unreachable_ub.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8796e7a9cfd4c5c4f1de15ec1c53994ddf288665/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8796e7a9cfd4c5c4f1de15ec1c53994ddf288665/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.stderr?ref=8796e7a9cfd4c5c4f1de15ec1c53994ddf288665", "patch": "@@ -1,11 +1,11 @@\n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/hint.rs:LL:COL\n    |\n-LL |     unsafe { intrinsics::unreachable() }\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |              |\n-   |              entering unreachable code\n-   |              inside `unreachable_unchecked` at $SRC_DIR/core/src/hint.rs:LL:COL\n+LL |         intrinsics::unreachable()\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         |\n+   |         entering unreachable code\n+   |         inside `unreachable_unchecked` at $SRC_DIR/core/src/hint.rs:LL:COL\n    |\n   ::: $DIR/const_unsafe_unreachable_ub.rs:6:18\n    |"}, {"sha": "47d1f782cb6ce0365a9846327bc8654839599393", "filename": "src/tools/miri/tests/fail/unaligned_pointers/unaligned_ptr1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8796e7a9cfd4c5c4f1de15ec1c53994ddf288665/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Funaligned_ptr1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8796e7a9cfd4c5c4f1de15ec1c53994ddf288665/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Funaligned_ptr1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Funaligned_ptr1.rs?ref=8796e7a9cfd4c5c4f1de15ec1c53994ddf288665", "patch": "@@ -3,7 +3,7 @@\n \n fn main() {\n     // Try many times as this might work by chance.\n-    for _ in 0..10 {\n+    for _ in 0..20 {\n         let x = [2u16, 3, 4]; // Make it big enough so we don't get an out-of-bounds error.\n         let x = &x[0] as *const _ as *const u32;\n         // This must fail because alignment is violated: the allocation's base is not sufficiently aligned."}, {"sha": "f1032ab52bc7cda08d0c5ff46bbb43e079ad2d70", "filename": "src/tools/miri/tests/fail/unaligned_pointers/unaligned_ptr_addr_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8796e7a9cfd4c5c4f1de15ec1c53994ddf288665/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Funaligned_ptr_addr_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8796e7a9cfd4c5c4f1de15ec1c53994ddf288665/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Funaligned_ptr_addr_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Funaligned_ptr_addr_of.rs?ref=8796e7a9cfd4c5c4f1de15ec1c53994ddf288665", "patch": "@@ -4,7 +4,7 @@ use std::ptr;\n \n fn main() {\n     // Try many times as this might work by chance.\n-    for _ in 0..10 {\n+    for _ in 0..20 {\n         let x = [2u16, 3, 4]; // Make it big enough so we don't get an out-of-bounds error.\n         let x = &x[0] as *const _ as *const u32;\n         // This must fail because alignment is violated: the allocation's base is not sufficiently aligned."}]}