{"sha": "bb3afe1e609b70ef2a8e75072e6eb5828416c012", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiM2FmZTFlNjA5YjcwZWYyYThlNzUwNzJlNmViNTgyODQxNmMwMTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-09T01:47:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-09T01:47:39Z"}, "message": "Auto merge of #82911 - m-ou-se:rollup-rjomgja, r=m-ou-se\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #82711 (Add documentation for string->Cow conversions)\n - #82767 (Update minifier dependency version)\n - #82800 (Move rustdoc UI tests into a subdirectory)\n - #82810 (Typo fix in Unstable book: `cargo cov` -> `cargo profdata`)\n - #82829 (Handle negative literals in cast overflow warning)\n - #82854 (Account for `if (let pat = expr) {}`)\n - #82870 (Add note about the `#[doc(no-inline)]` usage)\n - #82874 (Add codegen tests for some issues closed by LLVM 12)\n - #82881 (diagnostics: Be clear about \"crate root\" and `::foo` paths in resolve diagnostics)\n - #82888 (Grammar Fixes)\n - #82897 ([.mailmap] Add entry for Ramkumar Ramachandra)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "5096b96092241d2c6d4596be417607a8c19cfefb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5096b96092241d2c6d4596be417607a8c19cfefb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb3afe1e609b70ef2a8e75072e6eb5828416c012", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb3afe1e609b70ef2a8e75072e6eb5828416c012", "html_url": "https://github.com/rust-lang/rust/commit/bb3afe1e609b70ef2a8e75072e6eb5828416c012", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb3afe1e609b70ef2a8e75072e6eb5828416c012/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb476b172f12dfbbee386d027b1ad6c0bc203a9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb476b172f12dfbbee386d027b1ad6c0bc203a9b", "html_url": "https://github.com/rust-lang/rust/commit/eb476b172f12dfbbee386d027b1ad6c0bc203a9b"}, {"sha": "54add8dfcaceb1c8a0bf30ae22cebd681bd17c98", "url": "https://api.github.com/repos/rust-lang/rust/commits/54add8dfcaceb1c8a0bf30ae22cebd681bd17c98", "html_url": "https://github.com/rust-lang/rust/commit/54add8dfcaceb1c8a0bf30ae22cebd681bd17c98"}], "stats": {"total": 798, "additions": 540, "deletions": 258}, "files": [{"sha": "3f23aed31a833e2e53f05da145121b45b3673128", "filename": ".mailmap", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb3afe1e609b70ef2a8e75072e6eb5828416c012/.mailmap", "raw_url": "https://github.com/rust-lang/rust/raw/bb3afe1e609b70ef2a8e75072e6eb5828416c012/.mailmap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.mailmap?ref=bb3afe1e609b70ef2a8e75072e6eb5828416c012", "patch": "@@ -235,6 +235,7 @@ Philipp Matthias Sch\u00e4fer <philipp.matthias.schaefer@posteo.de>\n Przemys\u0142aw Weso\u0142ek <jest@go.art.pl> Przemek Weso\u0142ek <jest@go.art.pl>\n Rafael \u00c1vila de Esp\u00edndola <respindola@mozilla.com> Rafael Avila de Espindola <espindola@dream.(none)>\n Ralph Giles <giles@thaumas.net> Ralph Giles <giles@mozilla.com>\n+Ramkumar Ramachandra <r@artagnon.com> <artagnon@gmail.com>\n Renato Riccieri Santos Zannon <renato@rrsz.com.br>\n Richard Diamond <wichard@vitalitystudios.com> <wichard@hahbee.co>\n Rob Arnold <robarnold@cs.cmu.edu>"}, {"sha": "c067fca5545d6aba99c4248fdec156ceeb6a6453", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb3afe1e609b70ef2a8e75072e6eb5828416c012/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/bb3afe1e609b70ef2a8e75072e6eb5828416c012/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=bb3afe1e609b70ef2a8e75072e6eb5828416c012", "patch": "@@ -2214,9 +2214,9 @@ dependencies = [\n \n [[package]]\n name = \"minifier\"\n-version = \"0.0.33\"\n+version = \"0.0.39\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"70bf0db2475f5e627787da77ca52fe33c294063f49f4134b8bc662eedb5e7332\"\n+checksum = \"6cdf618de5c9c98d4a7b2e0d1f1e44f82a19196cfd94040bb203621c25d28d98\"\n dependencies = [\n  \"macro-utils\",\n ]"}, {"sha": "77a98f4c45c5399a567ff37ad7d4d16bf524ac75", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bb3afe1e609b70ef2a8e75072e6eb5828416c012/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb3afe1e609b70ef2a8e75072e6eb5828416c012/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=bb3afe1e609b70ef2a8e75072e6eb5828416c012", "patch": "@@ -1129,6 +1129,14 @@ impl Expr {\n         }\n     }\n \n+    pub fn peel_parens(&self) -> &Expr {\n+        let mut expr = self;\n+        while let ExprKind::Paren(inner) = &expr.kind {\n+            expr = &inner;\n+        }\n+        expr\n+    }\n+\n     /// Attempts to reparse as `Ty` (for diagnostic purposes).\n     pub fn to_ty(&self) -> Option<P<Ty>> {\n         let kind = match &self.kind {"}, {"sha": "c9a5541585fc73050d55d5f2d19b78dfd3fc1b47", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/bb3afe1e609b70ef2a8e75072e6eb5828416c012/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb3afe1e609b70ef2a8e75072e6eb5828416c012/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=bb3afe1e609b70ef2a8e75072e6eb5828416c012", "patch": "@@ -97,6 +97,23 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     ExprKind::Let(ref pat, ref scrutinee) => {\n                         self.lower_expr_if_let(e.span, pat, scrutinee, then, else_opt.as_deref())\n                     }\n+                    ExprKind::Paren(ref paren) => match paren.peel_parens().kind {\n+                        ExprKind::Let(ref pat, ref scrutinee) => {\n+                            // A user has written `if (let Some(x) = foo) {`, we want to avoid\n+                            // confusing them with mentions of nightly features.\n+                            // If this logic is changed, you will also likely need to touch\n+                            // `unused::UnusedParens::check_expr`.\n+                            self.if_let_expr_with_parens(cond, &paren.peel_parens());\n+                            self.lower_expr_if_let(\n+                                e.span,\n+                                pat,\n+                                scrutinee,\n+                                then,\n+                                else_opt.as_deref(),\n+                            )\n+                        }\n+                        _ => self.lower_expr_if(cond, then, else_opt.as_deref()),\n+                    },\n                     _ => self.lower_expr_if(cond, then, else_opt.as_deref()),\n                 },\n                 ExprKind::While(ref cond, ref body, opt_label) => self\n@@ -346,6 +363,25 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         hir::ExprKind::Call(f, self.lower_exprs(&real_args))\n     }\n \n+    fn if_let_expr_with_parens(&mut self, cond: &Expr, paren: &Expr) {\n+        let start = cond.span.until(paren.span);\n+        let end = paren.span.shrink_to_hi().until(cond.span.shrink_to_hi());\n+        self.sess\n+            .struct_span_err(\n+                vec![start, end],\n+                \"invalid parentheses around `let` expression in `if let`\",\n+            )\n+            .multipart_suggestion(\n+                \"`if let` needs to be written without parentheses\",\n+                vec![(start, String::new()), (end, String::new())],\n+                rustc_errors::Applicability::MachineApplicable,\n+            )\n+            .emit();\n+        // Ideally, we'd remove the feature gating of a `let` expression since we are already\n+        // complaining about it here, but `feature_gate::check_crate` has already run by now:\n+        // self.sess.parse_sess.gated_spans.ungate_last(sym::let_chains, paren.span);\n+    }\n+\n     /// Emit an error and lower `ast::ExprKind::Let(pat, scrutinee)` into:\n     /// ```rust\n     /// match scrutinee { pats => true, _ => false }\n@@ -356,8 +392,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         if self.sess.opts.unstable_features.is_nightly_build() {\n             self.sess\n                 .struct_span_err(span, \"`let` expressions are not supported here\")\n-                .note(\"only supported directly in conditions of `if`- and `while`-expressions\")\n-                .note(\"as well as when nested within `&&` and parenthesis in those conditions\")\n+                .note(\n+                    \"only supported directly without parentheses in conditions of `if`- and \\\n+                     `while`-expressions, as well as in `let` chains within parentheses\",\n+                )\n                 .emit();\n         } else {\n             self.sess"}, {"sha": "053fa5b7897dcbc081c64269f15a7ad61cf59ae2", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bb3afe1e609b70ef2a8e75072e6eb5828416c012/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb3afe1e609b70ef2a8e75072e6eb5828416c012/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=bb3afe1e609b70ef2a8e75072e6eb5828416c012", "patch": "@@ -638,8 +638,16 @@ pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n             }\n         };\n     }\n-    gate_all!(if_let_guard, \"`if let` guards are experimental\");\n-    gate_all!(let_chains, \"`let` expressions in this position are experimental\");\n+    gate_all!(\n+        if_let_guard,\n+        \"`if let` guards are experimental\",\n+        \"you can write `if matches!(<expr>, <pattern>)` instead of `if let <pattern> = <expr>`\"\n+    );\n+    gate_all!(\n+        let_chains,\n+        \"`let` expressions in this position are experimental\",\n+        \"you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\"\n+    );\n     gate_all!(\n         async_closure,\n         \"async closures are unstable\","}, {"sha": "2d311cc32f8b7ba869a08aa1a1487734880afc2c", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/bb3afe1e609b70ef2a8e75072e6eb5828416c012/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb3afe1e609b70ef2a8e75072e6eb5828416c012/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=bb3afe1e609b70ef2a8e75072e6eb5828416c012", "patch": "@@ -217,7 +217,11 @@ fn report_bin_hex_error(\n     cx.struct_span_lint(OVERFLOWING_LITERALS, expr.span, |lint| {\n         let (t, actually) = match ty {\n             attr::IntType::SignedInt(t) => {\n-                let actually = size.sign_extend(val) as i128;\n+                let actually = if negative {\n+                    -(size.sign_extend(val) as i128)\n+                } else {\n+                    size.sign_extend(val) as i128\n+                };\n                 (t.name_str(), actually.to_string())\n             }\n             attr::IntType::UnsignedInt(t) => {\n@@ -226,11 +230,22 @@ fn report_bin_hex_error(\n             }\n         };\n         let mut err = lint.build(&format!(\"literal out of range for `{}`\", t));\n-        err.note(&format!(\n-            \"the literal `{}` (decimal `{}`) does not fit into \\\n-             the type `{}` and will become `{}{}`\",\n-            repr_str, val, t, actually, t\n-        ));\n+        if negative {\n+            // If the value is negative,\n+            // emits a note about the value itself, apart from the literal.\n+            err.note(&format!(\n+                \"the literal `{}` (decimal `{}`) does not fit into \\\n+                 the type `{}`\",\n+                repr_str, val, t\n+            ));\n+            err.note(&format!(\"and the value `-{}` will become `{}{}`\", repr_str, actually, t));\n+        } else {\n+            err.note(&format!(\n+                \"the literal `{}` (decimal `{}`) does not fit into \\\n+                 the type `{}` and will become `{}{}`\",\n+                repr_str, val, t, actually, t\n+            ));\n+        }\n         if let Some(sugg_ty) =\n             get_type_suggestion(&cx.typeck_results().node_type(expr.hir_id), val, negative)\n         {"}, {"sha": "e222f82f20a9196dc2f1a0273227e40fca2ede44", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/bb3afe1e609b70ef2a8e75072e6eb5828416c012/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb3afe1e609b70ef2a8e75072e6eb5828416c012/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=bb3afe1e609b70ef2a8e75072e6eb5828416c012", "patch": "@@ -602,7 +602,7 @@ trait UnusedDelimLint {\n         use rustc_ast::ExprKind::*;\n         let (value, ctx, followed_by_block, left_pos, right_pos) = match e.kind {\n             // Do not lint `unused_braces` in `if let` expressions.\n-            If(ref cond, ref block, ..)\n+            If(ref cond, ref block, _)\n                 if !matches!(cond.kind, Let(_, _)) || Self::LINT_EXPR_IN_PATTERN_MATCHING_CTX =>\n             {\n                 let left = e.span.lo() + rustc_span::BytePos(2);\n@@ -816,8 +816,33 @@ impl UnusedParens {\n \n impl EarlyLintPass for UnusedParens {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, e: &ast::Expr) {\n-        if let ExprKind::Let(ref pat, ..) | ExprKind::ForLoop(ref pat, ..) = e.kind {\n-            self.check_unused_parens_pat(cx, pat, false, false);\n+        match e.kind {\n+            ExprKind::Let(ref pat, _) | ExprKind::ForLoop(ref pat, ..) => {\n+                self.check_unused_parens_pat(cx, pat, false, false);\n+            }\n+            // We ignore parens in cases like `if (((let Some(0) = Some(1))))` because we already\n+            // handle a hard error for them during AST lowering in `lower_expr_mut`, but we still\n+            // want to complain about things like `if let 42 = (42)`.\n+            ExprKind::If(ref cond, ref block, ref else_)\n+                if matches!(cond.peel_parens().kind, ExprKind::Let(..)) =>\n+            {\n+                self.check_unused_delims_expr(\n+                    cx,\n+                    cond.peel_parens(),\n+                    UnusedDelimsCtx::LetScrutineeExpr,\n+                    true,\n+                    None,\n+                    None,\n+                );\n+                for stmt in &block.stmts {\n+                    <Self as UnusedDelimLint>::check_stmt(self, cx, stmt);\n+                }\n+                if let Some(e) = else_ {\n+                    <Self as UnusedDelimLint>::check_expr(self, cx, e);\n+                }\n+                return;\n+            }\n+            _ => {}\n         }\n \n         <Self as UnusedDelimLint>::check_expr(self, cx, e)"}, {"sha": "2ee7f53ffa847e4f800838fc69920666df438865", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bb3afe1e609b70ef2a8e75072e6eb5828416c012/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb3afe1e609b70ef2a8e75072e6eb5828416c012/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=bb3afe1e609b70ef2a8e75072e6eb5828416c012", "patch": "@@ -16,6 +16,7 @@ use rustc_hir::def::{self, CtorKind, CtorOf, DefKind};\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::PrimTy;\n use rustc_session::parse::feature_err;\n+use rustc_span::edition::Edition;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n@@ -133,7 +134,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         let is_enum_variant = &|res| matches!(res, Res::Def(DefKind::Variant, _));\n \n         // Make the base error.\n-        let expected = source.descr_expected();\n+        let mut expected = source.descr_expected();\n         let path_str = Segment::names_to_string(path);\n         let item_str = path.last().unwrap().ident;\n         let (base_msg, fallback_label, base_span, could_be_expr) = if let Some(res) = res {\n@@ -166,6 +167,15 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n             let (mod_prefix, mod_str) = if path.len() == 1 {\n                 (String::new(), \"this scope\".to_string())\n             } else if path.len() == 2 && path[0].ident.name == kw::PathRoot {\n+                if self.r.session.edition() > Edition::Edition2015 {\n+                    // In edition 2018 onwards, the `::foo` syntax may only pull from the extern prelude\n+                    // which overrides all other expectations of item type\n+                    expected = \"crate\";\n+                    (String::new(), \"the list of imported crates\".to_string())\n+                } else {\n+                    (String::new(), \"the crate root\".to_string())\n+                }\n+            } else if path.len() == 2 && path[0].ident.name == kw::Crate {\n                 (String::new(), \"the crate root\".to_string())\n             } else {\n                 let mod_path = &path[..path.len() - 1];"}, {"sha": "2ce54658c0b1074cbce0d07f7430b24aebf904be", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bb3afe1e609b70ef2a8e75072e6eb5828416c012/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb3afe1e609b70ef2a8e75072e6eb5828416c012/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=bb3afe1e609b70ef2a8e75072e6eb5828416c012", "patch": "@@ -2433,8 +2433,10 @@ impl<'a> Resolver<'a> {\n                                     Applicability::MaybeIncorrect,\n                                 )),\n                             )\n-                        } else {\n+                        } else if self.session.edition() == Edition::Edition2015 {\n                             (format!(\"maybe a missing crate `{}`?\", ident), None)\n+                        } else {\n+                            (format!(\"could not find `{}` in the crate root\", ident), None)\n                         }\n                     } else if i == 0 {\n                         if ident\n@@ -2450,10 +2452,16 @@ impl<'a> Resolver<'a> {\n                         }\n                     } else {\n                         let parent = path[i - 1].ident.name;\n-                        let parent = if parent == kw::PathRoot {\n-                            \"crate root\".to_owned()\n-                        } else {\n-                            format!(\"`{}`\", parent)\n+                        let parent = match parent {\n+                            // ::foo is mounted at the crate root for 2015, and is the extern\n+                            // prelude for 2018+\n+                            kw::PathRoot if self.session.edition() > Edition::Edition2015 => {\n+                                \"the list of imported crates\".to_owned()\n+                            }\n+                            kw::PathRoot | kw::Crate => \"the crate root\".to_owned(),\n+                            _ => {\n+                                format!(\"`{}`\", parent)\n+                            }\n                         };\n \n                         let mut msg = format!(\"could not find `{}` in {}\", ident, parent);"}, {"sha": "e2e705d7980caf71ce4a38d344fa5d601d7d77e9", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/bb3afe1e609b70ef2a8e75072e6eb5828416c012/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb3afe1e609b70ef2a8e75072e6eb5828416c012/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=bb3afe1e609b70ef2a8e75072e6eb5828416c012", "patch": "@@ -2352,6 +2352,16 @@ impl<'a> From<Cow<'a, str>> for String {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> From<&'a str> for Cow<'a, str> {\n+    /// Converts a string slice into a Borrowed variant.\n+    /// No heap allocation is performed, and the string\n+    /// is not copied.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// # use std::borrow::Cow;\n+    /// assert_eq!(Cow::from(\"eggplant\"), Cow::Borrowed(\"eggplant\"));\n+    /// ```\n     #[inline]\n     fn from(s: &'a str) -> Cow<'a, str> {\n         Cow::Borrowed(s)\n@@ -2360,6 +2370,18 @@ impl<'a> From<&'a str> for Cow<'a, str> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> From<String> for Cow<'a, str> {\n+    /// Converts a String into an Owned variant.\n+    /// No heap allocation is performed, and the string\n+    /// is not copied.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// # use std::borrow::Cow;\n+    /// let s = \"eggplant\".to_string();\n+    /// let s2 = \"eggplant\".to_string();\n+    /// assert_eq!(Cow::from(s), Cow::<'static, str>::Owned(s2));\n+    /// ```\n     #[inline]\n     fn from(s: String) -> Cow<'a, str> {\n         Cow::Owned(s)\n@@ -2368,6 +2390,17 @@ impl<'a> From<String> for Cow<'a, str> {\n \n #[stable(feature = \"cow_from_string_ref\", since = \"1.28.0\")]\n impl<'a> From<&'a String> for Cow<'a, str> {\n+    /// Converts a String reference into a Borrowed variant.\n+    /// No heap allocation is performed, and the string\n+    /// is not copied.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// # use std::borrow::Cow;\n+    /// let s = \"eggplant\".to_string();\n+    /// assert_eq!(Cow::from(&s), Cow::Borrowed(\"eggplant\"));\n+    /// ```\n     #[inline]\n     fn from(s: &'a String) -> Cow<'a, str> {\n         Cow::Borrowed(s.as_str())"}, {"sha": "8f52985d1df717327a4d149302c436386df300ff", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb3afe1e609b70ef2a8e75072e6eb5828416c012/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb3afe1e609b70ef2a8e75072e6eb5828416c012/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=bb3afe1e609b70ef2a8e75072e6eb5828416c012", "patch": "@@ -42,7 +42,7 @@ pub fn from_mut<T>(s: &mut T) -> &mut [T; 1] {\n /// without causing much metadata bloat.\n ///\n /// The trait is marked unsafe in order to restrict implementors to fixed-size\n-/// arrays. User of this trait can assume that implementors have the exact\n+/// arrays. A user of this trait can assume that implementors have the exact\n /// layout in memory of a fixed size array (for example, for unsafe\n /// initialization).\n ///\n@@ -489,7 +489,7 @@ impl<T, const N: usize> [T; N] {\n     /// ```\n     ///\n     /// This method is particularly useful if combined with other methods, like\n-    /// [`map`](#method.map). This way, you can can avoid moving the original\n+    /// [`map`](#method.map). This way, you can avoid moving the original\n     /// array if its elements are not `Copy`.\n     ///\n     /// ```\n@@ -564,7 +564,7 @@ where\n /// yields fewer than `N` items, `None` is returned and all already yielded\n /// items are dropped.\n ///\n-/// Since the iterator is passed as mutable reference and this function calls\n+/// Since the iterator is passed as a mutable reference and this function calls\n /// `next` at most `N` times, the iterator can still be used afterwards to\n /// retrieve the remaining items.\n ///"}, {"sha": "cebe05c39cb3acacb4836a091e0c703425254c20", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb3afe1e609b70ef2a8e75072e6eb5828416c012/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb3afe1e609b70ef2a8e75072e6eb5828416c012/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=bb3afe1e609b70ef2a8e75072e6eb5828416c012", "patch": "@@ -395,7 +395,11 @@ pub use alloc_crate::vec;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::any;\n #[stable(feature = \"simd_arch\", since = \"1.27.0\")]\n-#[doc(no_inline)]\n+// The `no_inline`-attribute is required to make the documentation of all\n+// targets available.\n+// See https://github.com/rust-lang/rust/pull/57808#issuecomment-457390549 for\n+// more information.\n+#[doc(no_inline)] // Note (#82861): required for correct documentation\n pub use core::arch;\n #[stable(feature = \"core_array\", since = \"1.36.0\")]\n pub use core::array;"}, {"sha": "0d05b80e211a2b6f77ee1bab27eeb7969a23a9f2", "filename": "src/doc/unstable-book/src/compiler-flags/source-based-code-coverage.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsource-based-code-coverage.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsource-based-code-coverage.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsource-based-code-coverage.md?ref=bb3afe1e609b70ef2a8e75072e6eb5828416c012", "patch": "@@ -128,7 +128,7 @@ $ cargo profdata -- --help  # note the additional \"--\" preceding the tool-specif\n \n ## Creating coverage reports\n \n-Raw profiles have to be indexed before they can be used to generate coverage reports. This is done using [`llvm-profdata merge`] (or `cargo cov -- merge`), which can combine multiple raw profiles and index them at the same time:\n+Raw profiles have to be indexed before they can be used to generate coverage reports. This is done using [`llvm-profdata merge`] (or `cargo profdata -- merge`), which can combine multiple raw profiles and index them at the same time:\n \n ```shell\n $ llvm-profdata merge -sparse formatjson5.profraw -o formatjson5.profdata"}, {"sha": "9084a1713cb051608751bef0a5bac220af7b2f42", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=bb3afe1e609b70ef2a8e75072e6eb5828416c012", "patch": "@@ -10,7 +10,7 @@ path = \"lib.rs\"\n [dependencies]\n arrayvec = { version = \"0.5.1\", default-features = false }\n pulldown-cmark = { version = \"0.8\", default-features = false }\n-minifier = \"0.0.33\"\n+minifier = \"0.0.39\"\n rayon = { version = \"0.3.0\", package = \"rustc-rayon\" }\n serde = { version = \"1.0\", features = [\"derive\"] }\n serde_json = \"1.0\""}, {"sha": "6ba4d707f42b14088a21591427e311862d1db77b", "filename": "src/test/codegen/issue-73031.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fcodegen%2Fissue-73031.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fcodegen%2Fissue-73031.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-73031.rs?ref=bb3afe1e609b70ef2a8e75072e6eb5828416c012", "patch": "@@ -0,0 +1,27 @@\n+// min-llvm-version: 12.0.0\n+// compile-flags: -O\n+#![crate_type = \"lib\"]\n+\n+// Test that LLVM can eliminate the unreachable `All::None` branch.\n+\n+pub enum All {\n+    None,\n+    Foo,\n+    Bar,\n+}\n+\n+// CHECK-LABEL: @issue_73031\n+#[no_mangle]\n+pub fn issue_73031(a: &mut All, q: i32) -> i32 {\n+    *a = if q == 5 {\n+        All::Foo\n+    } else {\n+        All::Bar\n+    };\n+    match *a {\n+        // CHECK-NOT: panic\n+        All::None => panic!(),\n+        All::Foo => 1,\n+        All::Bar => 2,\n+    }\n+}"}, {"sha": "49e4d4c7ec56da3ff0761a26b55a4a0044b68101", "filename": "src/test/codegen/issue-75546.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fcodegen%2Fissue-75546.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fcodegen%2Fissue-75546.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-75546.rs?ref=bb3afe1e609b70ef2a8e75072e6eb5828416c012", "patch": "@@ -0,0 +1,16 @@\n+// min-llvm-version: 12.0.0\n+// compile-flags: -O\n+#![crate_type = \"lib\"]\n+\n+// Test that LLVM can eliminate the impossible `i == 0` check.\n+\n+// CHECK-LABEL: @issue_75546\n+#[no_mangle]\n+pub fn issue_75546() {\n+    let mut i = 1u32;\n+    while i < u32::MAX {\n+        // CHECK-NOT: panic\n+        if i == 0 { panic!(); }\n+        i += 1;\n+    }\n+}"}, {"sha": "95042579adb6b65f20c909bfc650c22d390c4f67", "filename": "src/test/codegen/issue-77812.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fcodegen%2Fissue-77812.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fcodegen%2Fissue-77812.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-77812.rs?ref=bb3afe1e609b70ef2a8e75072e6eb5828416c012", "patch": "@@ -0,0 +1,33 @@\n+// min-llvm-version: 12.0.0\n+// compile-flags: -O\n+#![crate_type = \"lib\"]\n+\n+// Test that LLVM can eliminate the unreachable `Variant::Zero` branch.\n+\n+#[derive(Copy, Clone, Eq, PartialEq)]\n+pub enum Variant {\n+    Zero,\n+    One,\n+    Two,\n+}\n+\n+extern {\n+    fn exf1();\n+    fn exf2();\n+}\n+\n+pub static mut GLOBAL: Variant = Variant::Zero;\n+\n+// CHECK-LABEL: @issue_77812\n+#[no_mangle]\n+pub unsafe fn issue_77812() {\n+    let g = GLOBAL;\n+    if g != Variant::Zero {\n+        match g {\n+            Variant::One => exf1(),\n+            Variant::Two => exf2(),\n+            // CHECK-NOT: panic\n+            Variant::Zero => panic!(),\n+        }\n+    }\n+}"}, {"sha": "4c890e3ae69949ece9ee03b83da6caf76d47b143", "filename": "src/test/ui/editions-crate-root-2015.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Feditions-crate-root-2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Feditions-crate-root-2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions-crate-root-2015.rs?ref=bb3afe1e609b70ef2a8e75072e6eb5828416c012", "patch": "@@ -0,0 +1,21 @@\n+// edition:2015\n+\n+mod inner {\n+    fn global_inner(_: ::nonexistant::Foo) {\n+        //~^ ERROR failed to resolve: maybe a missing crate `nonexistant`?\n+    }\n+    fn crate_inner(_: crate::nonexistant::Foo) {\n+        //~^ ERROR failed to resolve: maybe a missing crate `nonexistant`?\n+    }\n+\n+    fn bare_global(_: ::nonexistant) {\n+        //~^ ERROR cannot find type `nonexistant` in the crate root\n+    }\n+    fn bare_crate(_: crate::nonexistant) {\n+        //~^ ERROR cannot find type `nonexistant` in the crate root\n+    }\n+}\n+\n+fn main() {\n+\n+}"}, {"sha": "f8d65fec3d12def79add8452fc4cf944570a6f25", "filename": "src/test/ui/editions-crate-root-2015.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Feditions-crate-root-2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Feditions-crate-root-2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions-crate-root-2015.stderr?ref=bb3afe1e609b70ef2a8e75072e6eb5828416c012", "patch": "@@ -0,0 +1,28 @@\n+error[E0433]: failed to resolve: maybe a missing crate `nonexistant`?\n+  --> $DIR/editions-crate-root-2015.rs:4:26\n+   |\n+LL |     fn global_inner(_: ::nonexistant::Foo) {\n+   |                          ^^^^^^^^^^^ maybe a missing crate `nonexistant`?\n+\n+error[E0433]: failed to resolve: maybe a missing crate `nonexistant`?\n+  --> $DIR/editions-crate-root-2015.rs:7:30\n+   |\n+LL |     fn crate_inner(_: crate::nonexistant::Foo) {\n+   |                              ^^^^^^^^^^^ maybe a missing crate `nonexistant`?\n+\n+error[E0412]: cannot find type `nonexistant` in the crate root\n+  --> $DIR/editions-crate-root-2015.rs:11:25\n+   |\n+LL |     fn bare_global(_: ::nonexistant) {\n+   |                         ^^^^^^^^^^^ not found in the crate root\n+\n+error[E0412]: cannot find type `nonexistant` in the crate root\n+  --> $DIR/editions-crate-root-2015.rs:14:29\n+   |\n+LL |     fn bare_crate(_: crate::nonexistant) {\n+   |                             ^^^^^^^^^^^ not found in the crate root\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0412, E0433.\n+For more information about an error, try `rustc --explain E0412`."}, {"sha": "61e4329bbb347aa2686f51040576b091d1660330", "filename": "src/test/ui/editions-crate-root-2018.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Feditions-crate-root-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Feditions-crate-root-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions-crate-root-2018.rs?ref=bb3afe1e609b70ef2a8e75072e6eb5828416c012", "patch": "@@ -0,0 +1,21 @@\n+// edition:2018\n+\n+mod inner {\n+    fn global_inner(_: ::nonexistant::Foo) {\n+        //~^ ERROR failed to resolve: could not find `nonexistant` in the list of imported crates\n+    }\n+    fn crate_inner(_: crate::nonexistant::Foo) {\n+        //~^ ERROR failed to resolve: could not find `nonexistant` in the crate root\n+    }\n+\n+    fn bare_global(_: ::nonexistant) {\n+        //~^ ERROR cannot find crate `nonexistant` in the list of imported crates\n+    }\n+    fn bare_crate(_: crate::nonexistant) {\n+        //~^ ERROR cannot find type `nonexistant` in the crate root\n+    }\n+}\n+\n+fn main() {\n+\n+}"}, {"sha": "967a5a2fca155f346d5ab0aedd0f8118e3dad58a", "filename": "src/test/ui/editions-crate-root-2018.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Feditions-crate-root-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Feditions-crate-root-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions-crate-root-2018.stderr?ref=bb3afe1e609b70ef2a8e75072e6eb5828416c012", "patch": "@@ -0,0 +1,28 @@\n+error[E0433]: failed to resolve: could not find `nonexistant` in the list of imported crates\n+  --> $DIR/editions-crate-root-2018.rs:4:26\n+   |\n+LL |     fn global_inner(_: ::nonexistant::Foo) {\n+   |                          ^^^^^^^^^^^ could not find `nonexistant` in the list of imported crates\n+\n+error[E0433]: failed to resolve: could not find `nonexistant` in the crate root\n+  --> $DIR/editions-crate-root-2018.rs:7:30\n+   |\n+LL |     fn crate_inner(_: crate::nonexistant::Foo) {\n+   |                              ^^^^^^^^^^^ could not find `nonexistant` in the crate root\n+\n+error[E0412]: cannot find crate `nonexistant` in the list of imported crates\n+  --> $DIR/editions-crate-root-2018.rs:11:25\n+   |\n+LL |     fn bare_global(_: ::nonexistant) {\n+   |                         ^^^^^^^^^^^ not found in the list of imported crates\n+\n+error[E0412]: cannot find type `nonexistant` in the crate root\n+  --> $DIR/editions-crate-root-2018.rs:14:29\n+   |\n+LL |     fn bare_crate(_: crate::nonexistant) {\n+   |                             ^^^^^^^^^^^ not found in the crate root\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0412, E0433.\n+For more information about an error, try `rustc --explain E0412`."}, {"sha": "1cde0f72140d10389349828c91aef2457b1da778", "filename": "src/test/ui/editions/edition-imports-virtual-2015-gated.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Feditions%2Fedition-imports-virtual-2015-gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Feditions%2Fedition-imports-virtual-2015-gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-imports-virtual-2015-gated.stderr?ref=bb3afe1e609b70ef2a8e75072e6eb5828416c012", "patch": "@@ -2,7 +2,7 @@ error[E0432]: unresolved import `E`\n   --> $DIR/edition-imports-virtual-2015-gated.rs:8:5\n    |\n LL |     gen_gated!();\n-   |     ^^^^^^^^^^^^^ could not find `E` in crate root\n+   |     ^^^^^^^^^^^^^ could not find `E` in the list of imported crates\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "8a31fd4474614fa021ff7f3dea980fab2f6cf0a8", "filename": "src/test/ui/lint/type-overflow.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Flint%2Ftype-overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Flint%2Ftype-overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ftype-overflow.stderr?ref=bb3afe1e609b70ef2a8e75072e6eb5828416c012", "patch": "@@ -60,7 +60,8 @@ warning: literal out of range for `i8`\n LL |     let fail = -0b1111_1111i8;\n    |                 ^^^^^^^^^^^^^ help: consider using the type `i16` instead: `0b1111_1111i16`\n    |\n-   = note: the literal `0b1111_1111i8` (decimal `255`) does not fit into the type `i8` and will become `-1i8`\n+   = note: the literal `0b1111_1111i8` (decimal `255`) does not fit into the type `i8`\n+   = note: and the value `-0b1111_1111i8` will become `1i8`\n \n warning: 7 warnings emitted\n "}, {"sha": "5b528d6e1e144eef5861ca594e02f536379704db", "filename": "src/test/ui/parser/lex-bare-cr-nondoc-comment.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Fparser%2Flex-bare-cr-nondoc-comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Fparser%2Flex-bare-cr-nondoc-comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bare-cr-nondoc-comment.rs?ref=bb3afe1e609b70ef2a8e75072e6eb5828416c012", "previous_filename": "src/test/ui/lex-bare-cr-nondoc-comment.rs"}, {"sha": "802be7f5afb5741a972b9894c3b0a14fb16fa0bd", "filename": "src/test/ui/parser/lexer-crlf-line-endings-string-literal-doc-comment.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Fparser%2Flexer-crlf-line-endings-string-literal-doc-comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Fparser%2Flexer-crlf-line-endings-string-literal-doc-comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flexer-crlf-line-endings-string-literal-doc-comment.rs?ref=bb3afe1e609b70ef2a8e75072e6eb5828416c012", "previous_filename": "src/test/ui/lexer-crlf-line-endings-string-literal-doc-comment.rs"}, {"sha": "666b1e785bf6b62103720e220519c99e7845d961", "filename": "src/test/ui/pattern/issue-82290.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Fpattern%2Fissue-82290.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Fpattern%2Fissue-82290.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fissue-82290.stderr?ref=bb3afe1e609b70ef2a8e75072e6eb5828416c012", "patch": "@@ -4,8 +4,7 @@ error: `let` expressions are not supported here\n LL |     if true && let x = 1 {\n    |                ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n warning: the feature `let_chains` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/issue-82290.rs:1:12"}, {"sha": "7f1163bebde67b9327021e4a2d059a2c39a61c8b", "filename": "src/test/ui/resolve/raw-ident-in-path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Fresolve%2Fraw-ident-in-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Fresolve%2Fraw-ident-in-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fraw-ident-in-path.rs?ref=bb3afe1e609b70ef2a8e75072e6eb5828416c012", "patch": "@@ -1,5 +1,5 @@\n // Regression test for issue #63882.\n \n-type A = crate::r#break; //~ ERROR cannot find type `r#break` in module `crate`\n+type A = crate::r#break; //~ ERROR cannot find type `r#break` in the crate root\n \n fn main() {}"}, {"sha": "771dacbbb20d9402089eef0f7bf365980220ecf3", "filename": "src/test/ui/resolve/raw-ident-in-path.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Fresolve%2Fraw-ident-in-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Fresolve%2Fraw-ident-in-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fraw-ident-in-path.stderr?ref=bb3afe1e609b70ef2a8e75072e6eb5828416c012", "patch": "@@ -1,8 +1,8 @@\n-error[E0412]: cannot find type `r#break` in module `crate`\n+error[E0412]: cannot find type `r#break` in the crate root\n   --> $DIR/raw-ident-in-path.rs:3:17\n    |\n LL | type A = crate::r#break;\n-   |                 ^^^^^^^ not found in `crate`\n+   |                 ^^^^^^^ not found in the crate root\n \n error: aborting due to previous error\n "}, {"sha": "def60feb5a6ef18e248c06aeb97588316ac3cc05", "filename": "src/test/ui/rfc-2126-extern-absolute-paths/non-existent-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnon-existent-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnon-existent-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnon-existent-2.rs?ref=bb3afe1e609b70ef2a8e75072e6eb5828416c012", "patch": "@@ -2,5 +2,5 @@\n \n fn main() {\n     let s = ::xcrate::S;\n-    //~^ ERROR failed to resolve: could not find `xcrate` in crate root\n+    //~^ ERROR failed to resolve: could not find `xcrate` in the list of imported crates\n }"}, {"sha": "7df4f06d1c7e53ca1ffe880631131c685f16e663", "filename": "src/test/ui/rfc-2126-extern-absolute-paths/non-existent-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnon-existent-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnon-existent-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnon-existent-2.stderr?ref=bb3afe1e609b70ef2a8e75072e6eb5828416c012", "patch": "@@ -1,8 +1,8 @@\n-error[E0433]: failed to resolve: could not find `xcrate` in crate root\n+error[E0433]: failed to resolve: could not find `xcrate` in the list of imported crates\n   --> $DIR/non-existent-2.rs:4:15\n    |\n LL |     let s = ::xcrate::S;\n-   |               ^^^^^^ could not find `xcrate` in crate root\n+   |               ^^^^^^ could not find `xcrate` in the list of imported crates\n \n error: aborting due to previous error\n "}, {"sha": "00811fe3044df31e08cf255ec7b70d5555aa2ffe", "filename": "src/test/ui/rfc-2294-if-let-guard/feature-gate.stderr", "status": "modified", "additions": 34, "deletions": 32, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.stderr?ref=bb3afe1e609b70ef2a8e75072e6eb5828416c012", "patch": "@@ -15,6 +15,7 @@ LL |         () if let 0 = 1 => {}\n    |\n    = note: see issue #51114 <https://github.com/rust-lang/rust/issues/51114> for more information\n    = help: add `#![feature(if_let_guard)]` to the crate attributes to enable\n+   = help: you can write `if matches!(<expr>, <pattern>)` instead of `if let <pattern> = <expr>`\n \n error[E0658]: `if let` guards are experimental\n   --> $DIR/feature-gate.rs:76:12\n@@ -24,6 +25,7 @@ LL |         () if let 0 = 1 => {}\n    |\n    = note: see issue #51114 <https://github.com/rust-lang/rust/issues/51114> for more information\n    = help: add `#![feature(if_let_guard)]` to the crate attributes to enable\n+   = help: you can write `if matches!(<expr>, <pattern>)` instead of `if let <pattern> = <expr>`\n \n error[E0658]: `let` expressions in this position are experimental\n   --> $DIR/feature-gate.rs:10:16\n@@ -33,6 +35,7 @@ LL |         () if (let 0 = 1) => {}\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n error[E0658]: `let` expressions in this position are experimental\n   --> $DIR/feature-gate.rs:14:18\n@@ -42,6 +45,7 @@ LL |         () if (((let 0 = 1))) => {}\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n error[E0658]: `let` expressions in this position are experimental\n   --> $DIR/feature-gate.rs:18:23\n@@ -51,6 +55,7 @@ LL |         () if true && let 0 = 1 => {}\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n error[E0658]: `let` expressions in this position are experimental\n   --> $DIR/feature-gate.rs:22:15\n@@ -60,6 +65,7 @@ LL |         () if let 0 = 1 && true => {}\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n error[E0658]: `let` expressions in this position are experimental\n   --> $DIR/feature-gate.rs:26:16\n@@ -69,6 +75,7 @@ LL |         () if (let 0 = 1) && true => {}\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n error[E0658]: `let` expressions in this position are experimental\n   --> $DIR/feature-gate.rs:30:24\n@@ -78,6 +85,7 @@ LL |         () if true && (let 0 = 1) => {}\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n error[E0658]: `let` expressions in this position are experimental\n   --> $DIR/feature-gate.rs:34:16\n@@ -87,6 +95,7 @@ LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n error[E0658]: `let` expressions in this position are experimental\n   --> $DIR/feature-gate.rs:34:31\n@@ -96,6 +105,7 @@ LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n error[E0658]: `let` expressions in this position are experimental\n   --> $DIR/feature-gate.rs:40:15\n@@ -105,6 +115,7 @@ LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 =\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n error[E0658]: `let` expressions in this position are experimental\n   --> $DIR/feature-gate.rs:40:28\n@@ -114,6 +125,7 @@ LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 =\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n error[E0658]: `let` expressions in this position are experimental\n   --> $DIR/feature-gate.rs:40:42\n@@ -123,6 +135,7 @@ LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 =\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n error[E0658]: `let` expressions in this position are experimental\n   --> $DIR/feature-gate.rs:40:55\n@@ -132,6 +145,7 @@ LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 =\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n error[E0658]: `let` expressions in this position are experimental\n   --> $DIR/feature-gate.rs:40:68\n@@ -141,6 +155,7 @@ LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 =\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n error[E0658]: `let` expressions in this position are experimental\n   --> $DIR/feature-gate.rs:52:15\n@@ -150,6 +165,7 @@ LL |         () if let Range { start: _, end: _ } = (true..true) && false => {}\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n error[E0658]: `let` expressions in this position are experimental\n   --> $DIR/feature-gate.rs:68:16\n@@ -159,6 +175,7 @@ LL |     use_expr!((let 0 = 1 && 0 == 0));\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n error[E0658]: `let` expressions in this position are experimental\n   --> $DIR/feature-gate.rs:71:16\n@@ -168,150 +185,135 @@ LL |     use_expr!((let 0 = 1));\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:10:16\n    |\n LL |         () if (let 0 = 1) => {}\n    |                ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:14:18\n    |\n LL |         () if (((let 0 = 1))) => {}\n    |                  ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:18:23\n    |\n LL |         () if true && let 0 = 1 => {}\n    |                       ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:22:15\n    |\n LL |         () if let 0 = 1 && true => {}\n    |               ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:26:16\n    |\n LL |         () if (let 0 = 1) && true => {}\n    |                ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:30:24\n    |\n LL |         () if true && (let 0 = 1) => {}\n    |                        ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:34:16\n    |\n LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n    |                ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:34:31\n    |\n LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n    |                               ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:40:15\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |               ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:40:28\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |                            ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:40:42\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |                                          ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:40:55\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |                                                       ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:40:68\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |                                                                    ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:52:15\n    |\n LL |         () if let Range { start: _, end: _ } = (true..true) && false => {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:68:16\n    |\n LL |     use_expr!((let 0 = 1 && 0 == 0));\n    |                ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:71:16\n    |\n LL |     use_expr!((let 0 = 1));\n    |                ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: aborting due to 35 previous errors\n "}, {"sha": "1adce5e01506d315779168c5d9819cd6801bcfba", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.stderr", "status": "modified", "additions": 56, "deletions": 112, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr?ref=bb3afe1e609b70ef2a8e75072e6eb5828416c012", "patch": "@@ -15,503 +15,447 @@ error: `let` expressions are not supported here\n LL |     if &let 0 = 0 {}\n    |         ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:35:9\n    |\n LL |     if !let 0 = 0 {}\n    |         ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:36:9\n    |\n LL |     if *let 0 = 0 {}\n    |         ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:38:9\n    |\n LL |     if -let 0 = 0 {}\n    |         ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:46:9\n    |\n LL |     if (let 0 = 0)? {}\n    |         ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:50:16\n    |\n LL |     if true || let 0 = 0 {}\n    |                ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:51:17\n    |\n LL |     if (true || let 0 = 0) {}\n    |                 ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:52:25\n    |\n LL |     if true && (true || let 0 = 0) {}\n    |                         ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:53:25\n    |\n LL |     if true || (true && let 0 = 0) {}\n    |                         ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:56:12\n    |\n LL |     if x = let 0 = 0 {}\n    |            ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:59:15\n    |\n LL |     if true..(let 0 = 0) {}\n    |               ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:61:11\n    |\n LL |     if ..(let 0 = 0) {}\n    |           ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:63:9\n    |\n LL |     if (let 0 = 0).. {}\n    |         ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:67:8\n    |\n LL |     if let Range { start: _, end: _ } = true..true && false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:71:8\n    |\n LL |     if let Range { start: _, end: _ } = true..true || false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:78:8\n    |\n LL |     if let Range { start: F, end } = F..|| true {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:86:8\n    |\n LL |     if let Range { start: true, end } = t..&&false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:92:19\n    |\n LL |     if let true = let true = true {}\n    |                   ^^^^^^^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:96:12\n    |\n LL |     while &let 0 = 0 {}\n    |            ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:99:12\n    |\n LL |     while !let 0 = 0 {}\n    |            ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:100:12\n    |\n LL |     while *let 0 = 0 {}\n    |            ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:102:12\n    |\n LL |     while -let 0 = 0 {}\n    |            ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:110:12\n    |\n LL |     while (let 0 = 0)? {}\n    |            ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:114:19\n    |\n LL |     while true || let 0 = 0 {}\n    |                   ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:115:20\n    |\n LL |     while (true || let 0 = 0) {}\n    |                    ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:116:28\n    |\n LL |     while true && (true || let 0 = 0) {}\n    |                            ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:117:28\n    |\n LL |     while true || (true && let 0 = 0) {}\n    |                            ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:120:15\n    |\n LL |     while x = let 0 = 0 {}\n    |               ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:123:18\n    |\n LL |     while true..(let 0 = 0) {}\n    |                  ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:125:14\n    |\n LL |     while ..(let 0 = 0) {}\n    |              ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:127:12\n    |\n LL |     while (let 0 = 0).. {}\n    |            ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:131:11\n    |\n LL |     while let Range { start: _, end: _ } = true..true && false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:135:11\n    |\n LL |     while let Range { start: _, end: _ } = true..true || false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:142:11\n    |\n LL |     while let Range { start: F, end } = F..|| true {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:150:11\n    |\n LL |     while let Range { start: true, end } = t..&&false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:156:22\n    |\n LL |     while let true = let true = true {}\n    |                      ^^^^^^^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:170:6\n    |\n LL |     &let 0 = 0;\n    |      ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:172:6\n    |\n LL |     !let 0 = 0;\n    |      ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:173:6\n    |\n LL |     *let 0 = 0;\n    |      ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:175:6\n    |\n LL |     -let 0 = 0;\n    |      ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:183:6\n    |\n LL |     (let 0 = 0)?;\n    |      ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:187:13\n    |\n LL |     true || let 0 = 0;\n    |             ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:188:14\n    |\n LL |     (true || let 0 = 0);\n    |              ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:189:22\n    |\n LL |     true && (true || let 0 = 0);\n    |                      ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:192:9\n    |\n LL |     x = let 0 = 0;\n    |         ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:194:12\n    |\n LL |     true..(let 0 = 0);\n    |            ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:195:8\n    |\n LL |     ..(let 0 = 0);\n    |        ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:196:6\n    |\n LL |     (let 0 = 0)..;\n    |      ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:198:6\n    |\n LL |     (let Range { start: _, end: _ } = true..true || false);\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:202:6\n    |\n LL |     (let true = let true = true);\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:202:17\n    |\n LL |     (let true = let true = true);\n    |                 ^^^^^^^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:207:6\n    |\n LL |     &let 0 = 0\n    |      ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:218:17\n    |\n LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:222:17\n    |\n LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:226:17\n    |\n LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:236:17\n    |\n LL |         true && let 1 = 1\n    |                 ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/disallowed-positions.rs:20:12"}, {"sha": "0b38b5f47efef8f519d91c8ffbee8c7134387266", "filename": "src/test/ui/rfc-2497-if-let-chains/feature-gate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.rs?ref=bb3afe1e609b70ef2a8e75072e6eb5828416c012", "patch": "@@ -13,11 +13,11 @@ fn _if() {\n \n     if (let 0 = 1) {}\n     //~^ ERROR `let` expressions in this position are experimental [E0658]\n-    //~| ERROR `let` expressions are not supported here\n+    //~| ERROR invalid parentheses around `let` expression in `if let`\n \n     if (((let 0 = 1))) {}\n     //~^ ERROR `let` expressions in this position are experimental [E0658]\n-    //~| ERROR `let` expressions are not supported here\n+    //~| ERROR invalid parentheses around `let` expression in `if let`\n \n     if true && let 0 = 1 {}\n     //~^ ERROR `let` expressions in this position are experimental [E0658]\n@@ -126,7 +126,7 @@ fn _macros() {\n     //~| ERROR `let` expressions are not supported here\n     use_expr!((let 0 = 1));\n     //~^ ERROR `let` expressions in this position are experimental [E0658]\n-    //~| ERROR `let` expressions are not supported here\n+    //~| ERROR invalid parentheses around `let` expression in `if let`\n     //~| ERROR `let` expressions are not supported here\n     #[cfg(FALSE)] (let 0 = 1);\n     //~^ ERROR `let` expressions in this position are experimental [E0658]"}, {"sha": "7364f62c922298b9dcb1863c827e88ba334bb97c", "filename": "src/test/ui/rfc-2497-if-let-chains/feature-gate.stderr", "status": "modified", "additions": 82, "deletions": 73, "changes": 155, "blob_url": "https://github.com/rust-lang/rust/blob/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.stderr?ref=bb3afe1e609b70ef2a8e75072e6eb5828416c012", "patch": "@@ -15,6 +15,7 @@ LL |     if (let 0 = 1) {}\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n error[E0658]: `let` expressions in this position are experimental\n   --> $DIR/feature-gate.rs:18:11\n@@ -24,6 +25,7 @@ LL |     if (((let 0 = 1))) {}\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n error[E0658]: `let` expressions in this position are experimental\n   --> $DIR/feature-gate.rs:22:16\n@@ -33,6 +35,7 @@ LL |     if true && let 0 = 1 {}\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n error[E0658]: `let` expressions in this position are experimental\n   --> $DIR/feature-gate.rs:26:8\n@@ -42,6 +45,7 @@ LL |     if let 0 = 1 && true {}\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n error[E0658]: `let` expressions in this position are experimental\n   --> $DIR/feature-gate.rs:30:9\n@@ -51,6 +55,7 @@ LL |     if (let 0 = 1) && true {}\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n error[E0658]: `let` expressions in this position are experimental\n   --> $DIR/feature-gate.rs:34:17\n@@ -60,6 +65,7 @@ LL |     if true && (let 0 = 1) {}\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n error[E0658]: `let` expressions in this position are experimental\n   --> $DIR/feature-gate.rs:38:9\n@@ -69,6 +75,7 @@ LL |     if (let 0 = 1) && (let 0 = 1) {}\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n error[E0658]: `let` expressions in this position are experimental\n   --> $DIR/feature-gate.rs:38:24\n@@ -78,6 +85,7 @@ LL |     if (let 0 = 1) && (let 0 = 1) {}\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n error[E0658]: `let` expressions in this position are experimental\n   --> $DIR/feature-gate.rs:44:8\n@@ -87,6 +95,7 @@ LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n error[E0658]: `let` expressions in this position are experimental\n   --> $DIR/feature-gate.rs:44:21\n@@ -96,6 +105,7 @@ LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n error[E0658]: `let` expressions in this position are experimental\n   --> $DIR/feature-gate.rs:44:35\n@@ -105,6 +115,7 @@ LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n error[E0658]: `let` expressions in this position are experimental\n   --> $DIR/feature-gate.rs:44:48\n@@ -114,6 +125,7 @@ LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n error[E0658]: `let` expressions in this position are experimental\n   --> $DIR/feature-gate.rs:44:61\n@@ -123,6 +135,7 @@ LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n error[E0658]: `let` expressions in this position are experimental\n   --> $DIR/feature-gate.rs:56:8\n@@ -132,6 +145,7 @@ LL |     if let Range { start: _, end: _ } = (true..true) && false {}\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n error[E0658]: `let` expressions in this position are experimental\n   --> $DIR/feature-gate.rs:64:12\n@@ -141,6 +155,7 @@ LL |     while (let 0 = 1) {}\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n error[E0658]: `let` expressions in this position are experimental\n   --> $DIR/feature-gate.rs:68:14\n@@ -150,6 +165,7 @@ LL |     while (((let 0 = 1))) {}\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n error[E0658]: `let` expressions in this position are experimental\n   --> $DIR/feature-gate.rs:72:19\n@@ -159,6 +175,7 @@ LL |     while true && let 0 = 1 {}\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n error[E0658]: `let` expressions in this position are experimental\n   --> $DIR/feature-gate.rs:76:11\n@@ -168,6 +185,7 @@ LL |     while let 0 = 1 && true {}\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n error[E0658]: `let` expressions in this position are experimental\n   --> $DIR/feature-gate.rs:80:12\n@@ -177,6 +195,7 @@ LL |     while (let 0 = 1) && true {}\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n error[E0658]: `let` expressions in this position are experimental\n   --> $DIR/feature-gate.rs:84:20\n@@ -186,6 +205,7 @@ LL |     while true && (let 0 = 1) {}\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n error[E0658]: `let` expressions in this position are experimental\n   --> $DIR/feature-gate.rs:88:12\n@@ -195,6 +215,7 @@ LL |     while (let 0 = 1) && (let 0 = 1) {}\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n error[E0658]: `let` expressions in this position are experimental\n   --> $DIR/feature-gate.rs:88:27\n@@ -204,6 +225,7 @@ LL |     while (let 0 = 1) && (let 0 = 1) {}\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n error[E0658]: `let` expressions in this position are experimental\n   --> $DIR/feature-gate.rs:94:11\n@@ -213,6 +235,7 @@ LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n error[E0658]: `let` expressions in this position are experimental\n   --> $DIR/feature-gate.rs:94:24\n@@ -222,6 +245,7 @@ LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n error[E0658]: `let` expressions in this position are experimental\n   --> $DIR/feature-gate.rs:94:38\n@@ -231,6 +255,7 @@ LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n error[E0658]: `let` expressions in this position are experimental\n   --> $DIR/feature-gate.rs:94:51\n@@ -240,6 +265,7 @@ LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n error[E0658]: `let` expressions in this position are experimental\n   --> $DIR/feature-gate.rs:94:64\n@@ -249,6 +275,7 @@ LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n error[E0658]: `let` expressions in this position are experimental\n   --> $DIR/feature-gate.rs:106:11\n@@ -258,6 +285,7 @@ LL |     while let Range { start: _, end: _ } = (true..true) && false {}\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n error[E0658]: `let` expressions in this position are experimental\n   --> $DIR/feature-gate.rs:131:20\n@@ -267,6 +295,7 @@ LL |     #[cfg(FALSE)] (let 0 = 1);\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n error[E0658]: `let` expressions in this position are experimental\n   --> $DIR/feature-gate.rs:114:17\n@@ -276,6 +305,7 @@ LL |     noop_expr!((let 0 = 1));\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n error[E0658]: `let` expressions in this position are experimental\n   --> $DIR/feature-gate.rs:123:16\n@@ -285,6 +315,7 @@ LL |     use_expr!((let 0 = 1 && 0 == 0));\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n error[E0658]: `let` expressions in this position are experimental\n   --> $DIR/feature-gate.rs:127:16\n@@ -294,294 +325,272 @@ LL |     use_expr!((let 0 = 1));\n    |\n    = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n+   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`\n \n-error: `let` expressions are not supported here\n-  --> $DIR/feature-gate.rs:14:9\n+error: invalid parentheses around `let` expression in `if let`\n+  --> $DIR/feature-gate.rs:14:8\n    |\n LL |     if (let 0 = 1) {}\n-   |         ^^^^^^^^^\n+   |        ^         ^\n+   |\n+help: `if let` needs to be written without parentheses\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+LL |     if let 0 = 1 {}\n+   |       --       --\n \n-error: `let` expressions are not supported here\n-  --> $DIR/feature-gate.rs:18:11\n+error: invalid parentheses around `let` expression in `if let`\n+  --> $DIR/feature-gate.rs:18:8\n    |\n LL |     if (((let 0 = 1))) {}\n-   |           ^^^^^^^^^\n+   |        ^^^         ^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+help: `if let` needs to be written without parentheses\n+   |\n+LL |     if let 0 = 1 {}\n+   |       --       --\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:22:16\n    |\n LL |     if true && let 0 = 1 {}\n    |                ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:26:8\n    |\n LL |     if let 0 = 1 && true {}\n    |        ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:30:9\n    |\n LL |     if (let 0 = 1) && true {}\n    |         ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:34:17\n    |\n LL |     if true && (let 0 = 1) {}\n    |                 ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:38:9\n    |\n LL |     if (let 0 = 1) && (let 0 = 1) {}\n    |         ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:38:24\n    |\n LL |     if (let 0 = 1) && (let 0 = 1) {}\n    |                        ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:44:8\n    |\n LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |        ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:44:21\n    |\n LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                     ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:44:35\n    |\n LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                   ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:44:48\n    |\n LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                                ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:44:61\n    |\n LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                                             ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:56:8\n    |\n LL |     if let Range { start: _, end: _ } = (true..true) && false {}\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:64:12\n    |\n LL |     while (let 0 = 1) {}\n    |            ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:68:14\n    |\n LL |     while (((let 0 = 1))) {}\n    |              ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:72:19\n    |\n LL |     while true && let 0 = 1 {}\n    |                   ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:76:11\n    |\n LL |     while let 0 = 1 && true {}\n    |           ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:80:12\n    |\n LL |     while (let 0 = 1) && true {}\n    |            ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:84:20\n    |\n LL |     while true && (let 0 = 1) {}\n    |                    ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:88:12\n    |\n LL |     while (let 0 = 1) && (let 0 = 1) {}\n    |            ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:88:27\n    |\n LL |     while (let 0 = 1) && (let 0 = 1) {}\n    |                           ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:94:11\n    |\n LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |           ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:94:24\n    |\n LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                        ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:94:38\n    |\n LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                      ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:94:51\n    |\n LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                                   ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:94:64\n    |\n LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}\n    |                                                                ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:106:11\n    |\n LL |     while let Range { start: _, end: _ } = (true..true) && false {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:123:16\n    |\n LL |     use_expr!((let 0 = 1 && 0 == 0));\n    |                ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:123:16\n    |\n LL |     use_expr!((let 0 = 1 && 0 == 0));\n    |                ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n-error: `let` expressions are not supported here\n-  --> $DIR/feature-gate.rs:127:16\n+error: invalid parentheses around `let` expression in `if let`\n+  --> $DIR/feature-gate.rs:127:15\n    |\n LL |     use_expr!((let 0 = 1));\n-   |                ^^^^^^^^^\n+   |               ^         ^\n+   |\n+help: `if let` needs to be written without parentheses\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+LL |     use_expr!(let 0 = 1);\n+   |              --       --\n \n error: `let` expressions are not supported here\n   --> $DIR/feature-gate.rs:127:16\n    |\n LL |     use_expr!((let 0 = 1));\n    |                ^^^^^^^^^\n    |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n+   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses\n \n error: aborting due to 65 previous errors\n "}, {"sha": "1c98ab038ab728f1f088039894573e5edb5bca5a", "filename": "src/test/ui/rustdoc/README.md", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Frustdoc%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Frustdoc%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frustdoc%2FREADME.md?ref=bb3afe1e609b70ef2a8e75072e6eb5828416c012", "patch": "@@ -0,0 +1,3 @@\n+This directory is for tests that have to do with rustdoc, but test the behavior\n+of rustc. For example, rustc should not warn that an attribute rustdoc uses is\n+unknown."}, {"sha": "dd8e1ed97c4d2fb89d89eef8cc3e79abb65d9a74", "filename": "src/test/ui/rustdoc/cfg-rustdoc.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Frustdoc%2Fcfg-rustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Frustdoc%2Fcfg-rustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frustdoc%2Fcfg-rustdoc.rs?ref=bb3afe1e609b70ef2a8e75072e6eb5828416c012", "previous_filename": "src/test/ui/cfg-rustdoc.rs"}, {"sha": "c687d186989c0c5622d9a9d222e1a9d0ba6a7a83", "filename": "src/test/ui/rustdoc/cfg-rustdoc.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Frustdoc%2Fcfg-rustdoc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Frustdoc%2Fcfg-rustdoc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frustdoc%2Fcfg-rustdoc.stderr?ref=bb3afe1e609b70ef2a8e75072e6eb5828416c012", "previous_filename": "src/test/ui/cfg-rustdoc.stderr"}, {"sha": "007d2ae6506d7864a5b276224753059c73d43b32", "filename": "src/test/ui/rustdoc/check-doc-alias-attr-location.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Frustdoc%2Fcheck-doc-alias-attr-location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Frustdoc%2Fcheck-doc-alias-attr-location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frustdoc%2Fcheck-doc-alias-attr-location.rs?ref=bb3afe1e609b70ef2a8e75072e6eb5828416c012", "previous_filename": "src/test/ui/check-doc-alias-attr-location.rs"}, {"sha": "a66e9939eaf18060a370627c079d7869d46fce35", "filename": "src/test/ui/rustdoc/check-doc-alias-attr-location.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Frustdoc%2Fcheck-doc-alias-attr-location.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Frustdoc%2Fcheck-doc-alias-attr-location.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frustdoc%2Fcheck-doc-alias-attr-location.stderr?ref=bb3afe1e609b70ef2a8e75072e6eb5828416c012", "previous_filename": "src/test/ui/check-doc-alias-attr-location.stderr"}, {"sha": "912e35f9165454defd8e64648cbc19c80488bb12", "filename": "src/test/ui/rustdoc/check-doc-alias-attr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Frustdoc%2Fcheck-doc-alias-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Frustdoc%2Fcheck-doc-alias-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frustdoc%2Fcheck-doc-alias-attr.rs?ref=bb3afe1e609b70ef2a8e75072e6eb5828416c012", "previous_filename": "src/test/ui/check-doc-alias-attr.rs"}, {"sha": "1c7fc83bb8dea5d3dae401f52f136cd8094c3d09", "filename": "src/test/ui/rustdoc/check-doc-alias-attr.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Frustdoc%2Fcheck-doc-alias-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Frustdoc%2Fcheck-doc-alias-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frustdoc%2Fcheck-doc-alias-attr.stderr?ref=bb3afe1e609b70ef2a8e75072e6eb5828416c012", "previous_filename": "src/test/ui/check-doc-alias-attr.stderr"}, {"sha": "c7783aae5ea6267abbf35b5699480b3c8988491c", "filename": "src/test/ui/rustdoc/doc-alias-crate-level.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Frustdoc%2Fdoc-alias-crate-level.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Frustdoc%2Fdoc-alias-crate-level.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frustdoc%2Fdoc-alias-crate-level.rs?ref=bb3afe1e609b70ef2a8e75072e6eb5828416c012", "previous_filename": "src/test/ui/doc-alias-crate-level.rs"}, {"sha": "c0467514ae1c7a1cac1f5bc8041a2ae7bc7042b8", "filename": "src/test/ui/rustdoc/doc-alias-crate-level.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Frustdoc%2Fdoc-alias-crate-level.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Frustdoc%2Fdoc-alias-crate-level.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frustdoc%2Fdoc-alias-crate-level.stderr?ref=bb3afe1e609b70ef2a8e75072e6eb5828416c012", "previous_filename": "src/test/ui/doc-alias-crate-level.stderr"}, {"sha": "da97c26761862aab2ddb0ac100a78f7a186ce511", "filename": "src/test/ui/rustdoc/doc-alias-same-name.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Frustdoc%2Fdoc-alias-same-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Frustdoc%2Fdoc-alias-same-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frustdoc%2Fdoc-alias-same-name.rs?ref=bb3afe1e609b70ef2a8e75072e6eb5828416c012", "previous_filename": "src/test/ui/doc-alias-same-name.rs"}, {"sha": "5ba09a2eae1c71ebd4818b6ddc713d7fd1548172", "filename": "src/test/ui/rustdoc/doc-alias-same-name.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Frustdoc%2Fdoc-alias-same-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Frustdoc%2Fdoc-alias-same-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frustdoc%2Fdoc-alias-same-name.stderr?ref=bb3afe1e609b70ef2a8e75072e6eb5828416c012", "previous_filename": "src/test/ui/doc-alias-same-name.stderr"}, {"sha": "4c72e7e96842cb8ad6bfae46999eba8eb1cfce68", "filename": "src/test/ui/rustdoc/doc_keyword.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Frustdoc%2Fdoc_keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Frustdoc%2Fdoc_keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frustdoc%2Fdoc_keyword.rs?ref=bb3afe1e609b70ef2a8e75072e6eb5828416c012", "previous_filename": "src/test/ui/doc_keyword.rs"}, {"sha": "d72a876163eb302975d78f5275ee56bdb11d0bb1", "filename": "src/test/ui/rustdoc/doc_keyword.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Frustdoc%2Fdoc_keyword.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Frustdoc%2Fdoc_keyword.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frustdoc%2Fdoc_keyword.stderr?ref=bb3afe1e609b70ef2a8e75072e6eb5828416c012", "previous_filename": "src/test/ui/doc_keyword.stderr"}, {"sha": "82546fe73da4fd44d105fd289c713cda1bacc141", "filename": "src/test/ui/rustdoc/unterminated-doc-comment.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Frustdoc%2Funterminated-doc-comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Frustdoc%2Funterminated-doc-comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frustdoc%2Funterminated-doc-comment.rs?ref=bb3afe1e609b70ef2a8e75072e6eb5828416c012", "previous_filename": "src/test/ui/unterminated-doc-comment.rs"}, {"sha": "2d5e537973ea8155252e5500b45bbeadd14c95ea", "filename": "src/test/ui/rustdoc/unterminated-doc-comment.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Frustdoc%2Funterminated-doc-comment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftest%2Fui%2Frustdoc%2Funterminated-doc-comment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frustdoc%2Funterminated-doc-comment.stderr?ref=bb3afe1e609b70ef2a8e75072e6eb5828416c012", "previous_filename": "src/test/ui/unterminated-doc-comment.stderr"}, {"sha": "3374a8c9b73fac35952b9d9a992b58b4fefa1c96", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb3afe1e609b70ef2a8e75072e6eb5828416c012/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=bb3afe1e609b70ef2a8e75072e6eb5828416c012", "patch": "@@ -7,7 +7,7 @@ use std::path::Path;\n \n const ENTRY_LIMIT: usize = 1000;\n // FIXME: The following limits should be reduced eventually.\n-const ROOT_ENTRY_LIMIT: usize = 1418;\n+const ROOT_ENTRY_LIMIT: usize = 1408;\n const ISSUES_ENTRY_LIMIT: usize = 2565;\n \n fn check_entries(path: &Path, bad: &mut bool) {"}]}