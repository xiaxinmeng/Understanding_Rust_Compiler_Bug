{"sha": "9980796d6d29f532e9a49a5b3767285e2a5e2d02", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5ODA3OTZkNmQyOWY1MzJlOWE0OWE1YjM3NjcyODVlMmE1ZTJkMDI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-08-15T00:06:09Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-08-21T18:56:20Z"}, "message": "Further unicode checks", "tree": {"sha": "c1e080d255c4618b0efacb2d50169ce20bfffb0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1e080d255c4618b0efacb2d50169ce20bfffb0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9980796d6d29f532e9a49a5b3767285e2a5e2d02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9980796d6d29f532e9a49a5b3767285e2a5e2d02", "html_url": "https://github.com/rust-lang/rust/commit/9980796d6d29f532e9a49a5b3767285e2a5e2d02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9980796d6d29f532e9a49a5b3767285e2a5e2d02/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de2e9fe2c476021c7589d840a3b3ae870e0a75d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/de2e9fe2c476021c7589d840a3b3ae870e0a75d9", "html_url": "https://github.com/rust-lang/rust/commit/de2e9fe2c476021c7589d840a3b3ae870e0a75d9"}], "stats": {"total": 48, "additions": 38, "deletions": 10}, "files": [{"sha": "83c55c0da2b4f7864da6526212c96857a28b616e", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9980796d6d29f532e9a49a5b3767285e2a5e2d02/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9980796d6d29f532e9a49a5b3767285e2a5e2d02/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=9980796d6d29f532e9a49a5b3767285e2a5e2d02", "patch": "@@ -148,7 +148,7 @@ impl Margin {\n                 self.computed_right = self.computed_left + self.column_width;\n             } else if self.span_right - self.span_left <= self.column_width {\n                 // Attempt to fit the code window considering the spans and labels plus padding.\n-                let padding_left = (self.column_width - (self.span_right - self.span_left)) / 2;\n+                let padding_left = (self.column_width - (self.span_right - self.span_left)) / 5 * 2;\n                 self.computed_left = self.span_left - padding_left;\n                 self.computed_right = self.computed_left + self.column_width;\n             } else { // Mostly give up but still don't show the full line.\n@@ -365,20 +365,26 @@ impl EmitterWriter {\n         let left = margin.left(line_len);\n         let right = margin.right(line_len);\n         // On long lines, we strip the source line, accounting for unicode.\n-        let code: String = source_string.chars().skip(left).take(right - left).collect();\n+        let mut taken = 0;\n+        let code: String = source_string.chars().skip(left).take_while(|ch| {\n+            // Make sure that the trimming on the right will fall within the terminal width.\n+            // FIXME: `unicode_width` sometimes disagrees with terminals on how wide a `char` is.\n+            // For now, just accept that sometimes the code line will be longer than desired.\n+            let next = unicode_width::UnicodeWidthChar::width(*ch).unwrap_or(1);\n+            if taken + next > right - left {\n+                return false;\n+            }\n+            taken += next;\n+            true\n+        }).collect();\n         buffer.puts(line_offset, code_offset, &code, Style::Quotation);\n         if margin.was_cut_left() {\n             // We have stripped some code/whitespace from the beginning, make it clear.\n             buffer.puts(line_offset, code_offset, \"...\", Style::LineNumber);\n         }\n         if margin.was_cut_right(line_len) {\n             // We have stripped some code after the right-most span end, make it clear we did so.\n-            buffer.puts(\n-                line_offset,\n-                margin.right(line_len) - margin.left(line_len) + code_offset - 3,\n-                \"...\",\n-                Style::LineNumber,\n-            );\n+            buffer.puts(line_offset, code_offset + taken - 3, \"...\", Style::LineNumber);\n         }\n         buffer.puts(line_offset, 0, &self.maybe_anonymized(line_index), Style::LineNumber);\n \n@@ -420,6 +426,10 @@ impl EmitterWriter {\n         let line_offset = buffer.num_lines();\n \n         let left = margin.left(source_string.len()); // Left trim\n+        // Account for unicode characters of width !=0 that were removed.\n+        let left = source_string.chars().take(left).fold(0, |acc, ch| {\n+            acc + unicode_width::UnicodeWidthChar::width(ch).unwrap_or(1)\n+        });\n \n         self.draw_line(\n             buffer,\n@@ -1465,7 +1475,7 @@ impl EmitterWriter {\n                         // ...or trailing spaces. Account for substitutions containing unicode\n                         // characters.\n                         let sub_len = part.snippet.trim().chars().fold(0, |acc, ch| {\n-                            acc + unicode_width::UnicodeWidthChar::width(ch).unwrap_or(0)\n+                            acc + unicode_width::UnicodeWidthChar::width(ch).unwrap_or(1)\n                         });\n \n                         let underline_start = (span_start_pos + start) as isize + offset;\n@@ -1488,7 +1498,7 @@ impl EmitterWriter {\n \n                         // length of the code after substitution\n                         let full_sub_len = part.snippet.chars().fold(0, |acc, ch| {\n-                            acc + unicode_width::UnicodeWidthChar::width(ch).unwrap_or(0) as isize\n+                            acc + unicode_width::UnicodeWidthChar::width(ch).unwrap_or(1) as isize\n                         });\n \n                         // length of the code to be substituted"}, {"sha": "8d4d1b1627940c2ab2e5d5b08f1d1c9e01b7e57f", "filename": "src/test/ui/terminal-width/non-whitespace-trimming-unicode.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9980796d6d29f532e9a49a5b3767285e2a5e2d02/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming-unicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9980796d6d29f532e9a49a5b3767285e2a5e2d02/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming-unicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming-unicode.rs?ref=9980796d6d29f532e9a49a5b3767285e2a5e2d02", "patch": "@@ -0,0 +1,6 @@\n+// ignore-tidy-linelength\n+\n+fn main() {\n+    let _: &str = \"\ud83e\udd80\u2600\u2601\u2602\u2603\u2604\u2605\u2606\u2607\u2608\u2609\u260a\u260b\u260c\u260d\u260e\u260f\u2610\u2611\u2612\u2613  \u2616\u2617\u2618\u2619\u261a\u261b\u261c\u261d\u261e\u261f\u2620\u2621\u2622\u2623\u2624\u2625\u2626\u2627\u2628\u2629\u262a\u262b\u262c\u262d\u262e\u262f\u2630\u2631\u2632\u2633\u2634\u2635\u2636\u2637\u2638\u2639\u263a\u263b\u263c\u263d\u263e\u263f\u2640\u2641\u2642\u2643\u2644\u2645\u2646\u2647\u264f\u2654\u2655\u2656\u2657\u2658\u2659\u265a\u265b\u265c\u265d\u265e\u265f\u2660\u2661\u2662\u2663\u2664\u2665\u2666\u2667\u2668\u2669\u266a\u266b\u266c\u266d\u266e\u266f\u2670\u2671\u2672\u2673\u2674\u2675\u2676\u2677\u2678\u2679\u267a\u267b\u267c\u267d\u267e\u267f\u2680\u2681\u2682\u2683\u2684\u2685\u2686\u2688\u26894\ud83e\udd80\u2600\u2601\u2602\u2603\u2604\u2605\u2606\u2607\u2608\u2609\u260a\u260b\u260c\u260d\u260e\u260f\u2610\u2611\u2612\u2613\u2616\u2617\u2618\u2619\u261a\u261b\u261c\u261d\u261e\u261f\u2620\u2621\u2622\u2623\u2624\u2625\u2626\u2627\u2628\u2629\u262a\u262b\u262c\u262d\u262e\u262f\u2630\u2631\u2632\u2633\u2634\u2635\u2636\u2637\u2638\u2639\u263a\u263b\u263c\u263d\u263e\u263f\u2640\u2641\u2642\u2643\u2644\u2645\u2646\u2647\u264f\u2654\u2655\u2656\u2657\u2658\u2659\u265a\u265b\u265c\u265d\u265e\u265f\u2660\u2661\u2662\u2663\u2664\u2665\u2666\u2667\u2668\u2669\u266a\u266b\u266c\u266d\u266e\u266f\u2670\u2671\u2672\u2673\u2674\u2675\u2676\u2677\u2678\u2679\u267a\u267b\u267c\u267d\u267e\u267f\u2680\u2681\u2682\u2683\u2684\u2685\u2686\u2688\u26894\ud83e\udd80\ud83e\udd80\u2601\u2602\u2603\u2604\u2605\u2606\u2607\u2608\u2609\u260a\u260b\u260c\u260d\u260e\u260f\u2610\u2611\u2612\u2613\u2616\u2617\u2618\u2619\u261a\u261b\u261c\u261d\u261e\u261f\u2620\u2621\u2622\u2623\u2624\u2625\u2626\u2627\u2628\u2629\u262a\u262b\u262c\u262d\u262e\u262f\u2630\u2631\u2632\u2633\u2634\u2635\u2636\u2637\u2638\u2639\u263a\u263b\u263c\u263d\u263e\u263f\u2640\u2641\u2642\u2643\u2644\u2645\u2646\u2647\u264f\u2654\u2655\u2656\u2657\u2658\u2659\u265a\u265b\u265c\u265d\u265e\u265f\u2660\u2661\u2662\u2663\u2664\u2665\u2666\u2667\u2668\u2669\u266a\u266b\u266c\u266d\u266e\u266f\u2670\u2671\u2672\u2673\u2674\u2675\u2676\u2677\u2678\u2679\u267a\u267b\u267c\u267d\u267e\u267f\u2680\u2681\u2682\u2683\u2684\u2685\u2686\u2688\u26894\"; let _: () = 42;  let _: &str = \"\ud83e\udd80\u2600\u2601\u2602\u2603\u2604\u2605\u2606\u2607\u2608\u2609\u260a\u260b\u260c\u260d\u260e\u260f\u2610\u2611\u2612\u2613  \u2616\u2617\u2618\u2619\u261a\u261b\u261c\u261d\u261e\u261f\u2620\u2621\u2622\u2623\u2624\u2625\u2626\u2627\u2628\u2629\u262a\u262b\u262c\u262d\u262e\u262f\u2630\u2631\u2632\u2633\u2634\u2635\u2636\u2637\u2638\u2639\u263a\u263b\u263c\u263d\u263e\u263f\u2640\u2641\u2642\u2643\u2644\u2645\u2646\u2647\u264f\u2654\u2655\u2656\u2657\u2658\u2659\u265a\u265b\u265c\u265d\u265e\u265f\u2660\u2661\u2662\u2663\u2664\u2665\u2666\u2667\u2668\u2669\u266a\u266b\u266c\u266d\u266e\u266f\u2670\u2671\u2672\u2673\u2674\u2675\u2676\u2677\u2678\u2679\u267a\u267b\u267c\u267d\u267e\u267f\u2680\u2681\u2682\u2683\u2684\u2685\u2686\u2688\u26894\ud83e\udd80\u2600\u2601\u2602\u2603\u2604\u2605\u2606\u2607\u2608\u2609\u260a\u260b\u260c\u260d\u260e\u260f\u2610\u2611\u2612\u2613\u2616\u2617\u2618\u2619\u261a\u261b\u261c\u261d\u261e\u261f\u2620\u2621\u2622\u2623\u2624\u2625\u2626\u2627\u2628\u2629\u262a\u262b\u262c\u262d\u262e\u262f\u2630\u2631\u2632\u2633\u2634\u2635\u2636\u2637\u2638\u2639\u263a\u263b\u263c\u263d\u263e\u263f\u2640\u2641\u2642\u2643\u2644\u2645\u2646\u2647\u264f\u2654\u2655\u2656\u2657\u2658\u2659\u265a\u265b\u265c\u265d\u265e\u265f\u2660\u2661\u2662\u2663\u2664\u2665\u2666\u2667\u2668\u2669\u266a\u266b\u266c\u266d\u266e\u266f\u2670\u2671\u2672\u2673\u2674\u2675\u2676\u2677\u2678\u2679\u267a\u267b\u267c\u267d\u267e\u267f\u2680\u2681\u2682\u2683\u2684\u2685\u2686\u2688\u26894\ud83e\udd80\ud83e\udd80\u2601\u2602\u2603\u2604\u2605\u2606\u2607\u2608\u2609\u260a\u260b\u260c\u260d\u260e\u260f\u2610\u2611\u2612\u2613\u2616\u2617\u2618\u2619\u261a\u261b\u261c\u261d\u261e\u261f\u2620\u2621\u2622\u2623\u2624\u2625\u2626\u2627\u2628\u2629\u262a\u262b\u262c\u262d\u262e\u262f\u2630\u2631\u2632\u2633\u2634\u2635\u2636\u2637\u2638\u2639\u263a\u263b\u263c\u263d\u263e\u263f\u2640\u2641\u2642\u2643\u2644\u2645\u2646\u2647\u264f\u2654\u2655\u2656\u2657\u2658\u2659\u265a\u265b\u265c\u265d\u265e\u265f\u2660\u2661\u2662\u2663\u2664\u2665\u2666\u2667\u2668\u2669\u266a\u266b\u266c\u266d\u266e\u266f\u2670\u2671\u2672\u2673\u2674\u2675\u2676\u2677\u2678\u2679\u267a\u267b\u267c\u267d\u267e\u267f\u2680\u2681\u2682\u2683\u2684\u2685\u2686\u2688\u26894\";\n+//~^ ERROR mismatched types\n+}"}, {"sha": "b56b1948d9e07bfe8aee267844e644f883935ae7", "filename": "src/test/ui/terminal-width/non-whitespace-trimming-unicode.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9980796d6d29f532e9a49a5b3767285e2a5e2d02/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming-unicode.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9980796d6d29f532e9a49a5b3767285e2a5e2d02/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming-unicode.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming-unicode.stderr?ref=9980796d6d29f532e9a49a5b3767285e2a5e2d02", "patch": "@@ -0,0 +1,12 @@\n+error[E0308]: mismatched types\n+  --> $DIR/non-whitespace-trimming-unicode.rs:4:415\n+   |\n+LL | ...\u266f\u2670\u2671\u2672\u2673\u2674\u2675\u2676\u2677\u2678\u2679\u267a\u267b\u267c\u267d\u267e\u267f\u2680\u2681\u2682\u2683\u2684\u2685\u2686\u2688\u26894\"; let _: () = 42;  let _: &str = \"\ud83e\udd80\u2600\u2601\u2602\u2603\u2604\u2605\u2606\u2607\u2608\u2609\u260a\u260b\u260c\u260d\u260e\u260f\u2610\u2611\u2612\u2613  \u2616\u2617\u2618\u2619\u261a\u261b\u261c\u261d\u261e\u261f\u2620\u2621\u2622\u2623\u2624\u2625\u2626\u2627\u2628\u2629\u262a\u262b\u262c\u262d\u262e\u262f\u2630\u2631\u2632\u2633\u2634\u2635\u2636\u2637\u2638\u2639\u263a\u263b\u263c\u263d\u263e\u263f\u2640\u2641\u2642\u2643\u2644\u2645\u2646...\n+   |                                               ^^ expected (), found integer\n+   |\n+   = note: expected type `()`\n+              found type `{integer}`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}