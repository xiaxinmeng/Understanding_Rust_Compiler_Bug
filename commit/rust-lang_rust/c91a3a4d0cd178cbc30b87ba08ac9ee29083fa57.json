{"sha": "c91a3a4d0cd178cbc30b87ba08ac9ee29083fa57", "node_id": "C_kwDOAAsO6NoAKGM5MWEzYTRkMGNkMTc4Y2JjMzBiODdiYTA4YWM5ZWUyOTA4M2ZhNTc", "commit": {"author": {"name": "Jakub Ber\u00e1nek", "email": "berykubik@gmail.com", "date": "2023-06-05T19:54:52Z"}, "committer": {"name": "Jakub Ber\u00e1nek", "email": "berykubik@gmail.com", "date": "2023-06-05T19:54:52Z"}, "message": "Test the PGO/BOLT/LTO optimized x64 Linux compiler on CI", "tree": {"sha": "302ad39cceb2232de5b237f436d759693a5227d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/302ad39cceb2232de5b237f436d759693a5227d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c91a3a4d0cd178cbc30b87ba08ac9ee29083fa57", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEzFQynJm4WzBnfhz8kJzQ0mSDUWsFAmR+PY0ACgkQkJzQ0mSD\nUWsnZwwAzZ3JRNoI8lz4em0ltDPr7yp6ugXaT/D+58CcimosI+IWPC4Q2LFs8QzX\nLm5nJLvpE15b3RWl3I+zqECxHfuTUufx+E0WBilCcbR2uhlg35h3TTF4Js/YTGpB\ncyhrppNC4QfwcLHvWHvMQ/xZoDsV7EKAEW9PtopJAnOUpdvMwP+k6dkvHy/1DEvB\ndoTJH6ZevwP743c++3UmOrk20HWv9VWvfwdLIgPLhKMtOt4HBq1Ln/XAX6Ld3shB\nn9tV4mKphTK1lmK5B3IzvJt9Kh0yLkwLUpL/JaA0OY3p3m8mQoCd04v14USbU453\nKLNdq2PE12Gtg2vO5Cn42kRzE90JWR066fWaIeKU0+z+2itMQid5LKmR3I9MVqKt\nnhWCbK1cvnb4on65Ziex/cd2WKlvO6n9qYibJft+qlAQubWA5ZX3x6i8KiD35J9V\ndxFNommEPIiQFBY6qIkl5FprPDGGaWVZmh4rvWqfPh5enijTgtfuO4WsOcw8YoHS\niDlYgfMd\n=x/To\n-----END PGP SIGNATURE-----", "payload": "tree 302ad39cceb2232de5b237f436d759693a5227d8\nparent 774a3d1523bde3a16f8a92dbaac01d211ba911c3\nauthor Jakub Ber\u00e1nek <berykubik@gmail.com> 1685994892 +0200\ncommitter Jakub Ber\u00e1nek <berykubik@gmail.com> 1685994892 +0200\n\nTest the PGO/BOLT/LTO optimized x64 Linux compiler on CI\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c91a3a4d0cd178cbc30b87ba08ac9ee29083fa57", "html_url": "https://github.com/rust-lang/rust/commit/c91a3a4d0cd178cbc30b87ba08ac9ee29083fa57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c91a3a4d0cd178cbc30b87ba08ac9ee29083fa57/comments", "author": {"login": "Kobzol", "id": 4539057, "node_id": "MDQ6VXNlcjQ1MzkwNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4539057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kobzol", "html_url": "https://github.com/Kobzol", "followers_url": "https://api.github.com/users/Kobzol/followers", "following_url": "https://api.github.com/users/Kobzol/following{/other_user}", "gists_url": "https://api.github.com/users/Kobzol/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kobzol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kobzol/subscriptions", "organizations_url": "https://api.github.com/users/Kobzol/orgs", "repos_url": "https://api.github.com/users/Kobzol/repos", "events_url": "https://api.github.com/users/Kobzol/events{/privacy}", "received_events_url": "https://api.github.com/users/Kobzol/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kobzol", "id": 4539057, "node_id": "MDQ6VXNlcjQ1MzkwNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4539057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kobzol", "html_url": "https://github.com/Kobzol", "followers_url": "https://api.github.com/users/Kobzol/followers", "following_url": "https://api.github.com/users/Kobzol/following{/other_user}", "gists_url": "https://api.github.com/users/Kobzol/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kobzol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kobzol/subscriptions", "organizations_url": "https://api.github.com/users/Kobzol/orgs", "repos_url": "https://api.github.com/users/Kobzol/repos", "events_url": "https://api.github.com/users/Kobzol/events{/privacy}", "received_events_url": "https://api.github.com/users/Kobzol/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "774a3d1523bde3a16f8a92dbaac01d211ba911c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/774a3d1523bde3a16f8a92dbaac01d211ba911c3", "html_url": "https://github.com/rust-lang/rust/commit/774a3d1523bde3a16f8a92dbaac01d211ba911c3"}], "stats": {"total": 134, "additions": 127, "deletions": 7}, "files": [{"sha": "eb121b110d61e0d4576a9816c1a727ca43f2997c", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c91a3a4d0cd178cbc30b87ba08ac9ee29083fa57/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c91a3a4d0cd178cbc30b87ba08ac9ee29083fa57/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=c91a3a4d0cd178cbc30b87ba08ac9ee29083fa57", "patch": "@@ -222,6 +222,7 @@ pub struct Build {\n     initial_cargo: PathBuf,\n     initial_lld: PathBuf,\n     initial_libdir: PathBuf,\n+    initial_sysroot: PathBuf,\n \n     // Runtime state filled in later on\n     // C/C++ compilers and archiver for all targets\n@@ -389,13 +390,16 @@ impl Build {\n             \"/dummy\".to_string()\n         } else {\n             output(Command::new(&config.initial_rustc).arg(\"--print\").arg(\"sysroot\"))\n-        };\n+        }\n+        .trim()\n+        .to_string();\n+\n         let initial_libdir = initial_target_dir\n             .parent()\n             .unwrap()\n             .parent()\n             .unwrap()\n-            .strip_prefix(initial_sysroot.trim())\n+            .strip_prefix(&initial_sysroot)\n             .unwrap()\n             .to_path_buf();\n \n@@ -425,6 +429,7 @@ impl Build {\n             initial_cargo: config.initial_cargo.clone(),\n             initial_lld,\n             initial_libdir,\n+            initial_sysroot: initial_sysroot.into(),\n             local_rebuild: config.local_rebuild,\n             fail_fast: config.cmd.fail_fast(),\n             doc_tests: config.cmd.doc_tests(),"}, {"sha": "35ba3dab7649fdee35013f6451293ca8870cd6d3", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c91a3a4d0cd178cbc30b87ba08ac9ee29083fa57/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c91a3a4d0cd178cbc30b87ba08ac9ee29083fa57/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=c91a3a4d0cd178cbc30b87ba08ac9ee29083fa57", "patch": "@@ -1424,7 +1424,15 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n \n         cmd.arg(\"--src-base\").arg(builder.src.join(\"tests\").join(suite));\n         cmd.arg(\"--build-base\").arg(testdir(builder, compiler.host).join(suite));\n-        cmd.arg(\"--sysroot-base\").arg(builder.sysroot(compiler));\n+\n+        // When top stage is 0, that means that we're testing an externally provided compiler.\n+        // In that case we need to use its specific sysroot for tests to pass.\n+        let sysroot = if builder.top_stage == 0 {\n+            builder.initial_sysroot.clone()\n+        } else {\n+            builder.sysroot(compiler).to_path_buf()\n+        };\n+        cmd.arg(\"--sysroot-base\").arg(sysroot);\n         cmd.arg(\"--stage-id\").arg(stage_id);\n         cmd.arg(\"--suite\").arg(suite);\n         cmd.arg(\"--mode\").arg(mode);"}, {"sha": "91bd137085ee6ec789d097da1de1246833d4e40c", "filename": "src/ci/stage-build.py", "status": "modified", "additions": 111, "deletions": 4, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/c91a3a4d0cd178cbc30b87ba08ac9ee29083fa57/src%2Fci%2Fstage-build.py", "raw_url": "https://github.com/rust-lang/rust/raw/c91a3a4d0cd178cbc30b87ba08ac9ee29083fa57/src%2Fci%2Fstage-build.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fstage-build.py?ref=c91a3a4d0cd178cbc30b87ba08ac9ee29083fa57", "patch": "@@ -124,6 +124,12 @@ def llvm_bolt_profile_merged_file(self) -> Path:\n     def metrics_path(self) -> Path:\n         return self.build_root() / \"build\" / \"metrics.json\"\n \n+    def executable_extension(self) -> str:\n+        raise NotImplementedError\n+\n+    def skipped_tests(self) -> Iterable[str]:\n+        return ()\n+\n \n class LinuxPipeline(Pipeline):\n     def checkout_path(self) -> Path:\n@@ -152,6 +158,13 @@ def build_rustc_perf(self):\n     def supports_bolt(self) -> bool:\n         return True\n \n+    def executable_extension(self) -> str:\n+        return \"\"\n+\n+    def skipped_tests(self) -> Iterable[str]:\n+        # This test fails because of linker errors, as of June 2023.\n+        yield \"tests/ui/process/nofile-limit.rs\"\n+\n \n class WindowsPipeline(Pipeline):\n     def __init__(self):\n@@ -211,6 +224,13 @@ def rustc_profile_template_path(self) -> Path:\n     def supports_bolt(self) -> bool:\n         return False\n \n+    def executable_extension(self) -> str:\n+        return \".exe\"\n+\n+    def skipped_tests(self) -> Iterable[str]:\n+        # This test fails as of June 2023\n+        yield \"tests\\\\codegen\\\\vec-shrink-panik.rs\"\n+\n \n def get_timestamp() -> float:\n     return time.time()\n@@ -403,9 +423,9 @@ def delete_directory(path: Path):\n     shutil.rmtree(path)\n \n \n-def unpack_archive(archive: Path):\n+def unpack_archive(archive: Path, target_dir: Optional[Path] = None):\n     LOGGER.info(f\"Unpacking archive `{archive}`\")\n-    shutil.unpack_archive(archive)\n+    shutil.unpack_archive(str(archive), extract_dir=str(target_dir) if target_dir is not None else None)\n \n \n def download_file(src: str, target: Path):\n@@ -455,6 +475,7 @@ def cmd(\n             )\n     return subprocess.run(args, env=environment, check=True)\n \n+\n class BenchmarkRunner:\n     def run_rustc(self, pipeline: Pipeline):\n         raise NotImplementedError\n@@ -465,6 +486,7 @@ def run_llvm(self, pipeline: Pipeline):\n     def run_bolt(self, pipeline: Pipeline):\n         raise NotImplementedError\n \n+\n class DefaultBenchmarkRunner(BenchmarkRunner):\n     def run_rustc(self, pipeline: Pipeline):\n         # Here we're profiling the `rustc` frontend, so we also include `Check`.\n@@ -478,6 +500,7 @@ def run_rustc(self, pipeline: Pipeline):\n                 LLVM_PROFILE_FILE=str(pipeline.rustc_profile_template_path())\n             )\n         )\n+\n     def run_llvm(self, pipeline: Pipeline):\n         run_compiler_benchmarks(\n             pipeline,\n@@ -494,6 +517,7 @@ def run_bolt(self, pipeline: Pipeline):\n             crates=LLVM_BOLT_CRATES\n         )\n \n+\n def run_compiler_benchmarks(\n         pipeline: Pipeline,\n         profiles: List[str],\n@@ -650,10 +674,8 @@ def gather_llvm_profiles(pipeline: Pipeline, runner: BenchmarkRunner):\n def gather_rustc_profiles(pipeline: Pipeline, runner: BenchmarkRunner):\n     LOGGER.info(\"Running benchmarks with PGO instrumented rustc\")\n \n-\n     runner.run_rustc(pipeline)\n \n-\n     profile_path = pipeline.rustc_profile_merged_file()\n     LOGGER.info(f\"Merging Rustc PGO profiles to {profile_path}\")\n     cmd([\n@@ -770,6 +792,86 @@ def record_metrics(pipeline: Pipeline, timer: Timer):\n     log_metrics(metrics)\n \n \n+def run_tests(pipeline: Pipeline):\n+    \"\"\"\n+    After `dist` is executed, we extract its archived components into a sysroot directory,\n+    and then use that extracted rustc as a stage0 compiler.\n+    Then we run a subset of tests using that compiler, to have a basic smoke test which checks\n+    whether the optimization pipeline hasn't broken something.\n+    \"\"\"\n+    build_dir = pipeline.build_root() / \"build\"\n+    dist_dir = build_dir / \"dist\"\n+\n+    def extract_dist_dir(name: str) -> Path:\n+        target_dir = build_dir / \"optimized-dist\"\n+        target_dir.mkdir(parents=True, exist_ok=True)\n+        unpack_archive(dist_dir / f\"{name}.tar.xz\", target_dir=target_dir)\n+        extracted_path = target_dir / name\n+        assert extracted_path.is_dir()\n+        return extracted_path\n+\n+    # Extract rustc, libstd, cargo and src archives to create the optimized sysroot\n+    rustc_dir = extract_dist_dir(f\"rustc-nightly-{PGO_HOST}\") / \"rustc\"\n+    libstd_dir = extract_dist_dir(f\"rust-std-nightly-{PGO_HOST}\") / f\"rust-std-{PGO_HOST}\"\n+    cargo_dir = extract_dist_dir(f\"cargo-nightly-{PGO_HOST}\") / f\"cargo\"\n+    extracted_src_dir = extract_dist_dir(\"rust-src-nightly\") / \"rust-src\"\n+\n+    # We need to manually copy libstd to the extracted rustc sysroot\n+    shutil.copytree(\n+        libstd_dir / \"lib\" / \"rustlib\" / PGO_HOST / \"lib\",\n+        rustc_dir / \"lib\" / \"rustlib\" / PGO_HOST / \"lib\"\n+    )\n+\n+    # Extract sources - they aren't in the `rustc-nightly-{host}` tarball, so we need to manually copy libstd\n+    # sources to the extracted sysroot. We need sources available so that `-Zsimulate-remapped-rust-src-base`\n+    # works correctly.\n+    shutil.copytree(\n+        extracted_src_dir / \"lib\" / \"rustlib\" / \"src\",\n+        rustc_dir / \"lib\" / \"rustlib\" / \"src\"\n+    )\n+\n+    rustc_path = rustc_dir / \"bin\" / f\"rustc{pipeline.executable_extension()}\"\n+    assert rustc_path.is_file()\n+    cargo_path = cargo_dir / \"bin\" / f\"cargo{pipeline.executable_extension()}\"\n+    assert cargo_path.is_file()\n+\n+    config_content = f\"\"\"profile = \"user\"\n+changelog-seen = 2\n+\n+[build]\n+rustc = \"{rustc_path.as_posix()}\"\n+cargo = \"{cargo_path.as_posix()}\"\n+\n+[llvm]\n+download-ci-llvm = true\n+\"\"\"\n+    logging.info(f\"Using following `config.toml` for running tests:\\n{config_content}\")\n+\n+    # Simulate a stage 0 compiler with the extracted optimized dist artifacts.\n+    with open(\"config.toml\", \"w\") as f:\n+        f.write(config_content)\n+\n+    args = [\n+        sys.executable,\n+        pipeline.checkout_path() / \"x.py\",\n+        \"test\",\n+        \"--stage\", \"0\",\n+        \"tests/assembly\",\n+        \"tests/codegen\",\n+        \"tests/codegen-units\",\n+        \"tests/incremental\",\n+        \"tests/mir-opt\",\n+        \"tests/pretty\",\n+        \"tests/run-pass-valgrind\",\n+        \"tests/ui\",\n+        ]\n+    for test_path in pipeline.skipped_tests():\n+        args.extend([\"--exclude\", test_path])\n+    cmd(args=args, env=dict(\n+        COMPILETEST_FORCE_STAGE0=\"1\"\n+    ))\n+\n+\n def execute_build_pipeline(timer: Timer, pipeline: Pipeline, runner: BenchmarkRunner, final_build_args: List[str]):\n     # Clear and prepare tmp directory\n     shutil.rmtree(pipeline.opt_artifacts(), ignore_errors=True)\n@@ -844,6 +946,11 @@ def execute_build_pipeline(timer: Timer, pipeline: Pipeline, runner: BenchmarkRu\n         cmd(final_build_args)\n         record_metrics(pipeline, stage4)\n \n+    # Try builds can be in various broken states, so we don't want to gatekeep them with tests\n+    if not is_try_build():\n+        with timer.section(\"Run tests\"):\n+            run_tests(pipeline)\n+\n \n def run(runner: BenchmarkRunner):\n     logging.basicConfig("}]}