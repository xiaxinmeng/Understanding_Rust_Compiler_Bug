{"sha": "a8d258454f4aba9e3e4375ff47e2fdc4d48450a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4ZDI1ODQ1NGY0YWJhOWUzZTQzNzVmZjQ3ZTJmZGM0ZDQ4NDUwYTY=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-11-02T13:17:59Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-11-02T13:17:59Z"}, "message": "Merge #3161\n\n3161: New lint: Unknown clippy lints r=phansch a=flip1995\n\nThis is the Clippy version of the `rustc` lint `unknown_lints`. The behavior of this lint is pretty much the same.\r\n\r\nBefore this is merged a small change in the compiler needs to be done: `CheckLintNameResult` needs to be public. See rust-lang/rust#54106\n\nCo-authored-by: flip1995 <9744647+flip1995@users.noreply.github.com>\nCo-authored-by: flip1995 <hello@philkrones.com>", "tree": {"sha": "e9416e81009ebc48539874b9aca3427d6db3e7b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9416e81009ebc48539874b9aca3427d6db3e7b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8d258454f4aba9e3e4375ff47e2fdc4d48450a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8d258454f4aba9e3e4375ff47e2fdc4d48450a6", "html_url": "https://github.com/rust-lang/rust/commit/a8d258454f4aba9e3e4375ff47e2fdc4d48450a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8d258454f4aba9e3e4375ff47e2fdc4d48450a6/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "62568923d5c949fc09eb84330ea352eca3e50870", "url": "https://api.github.com/repos/rust-lang/rust/commits/62568923d5c949fc09eb84330ea352eca3e50870", "html_url": "https://github.com/rust-lang/rust/commit/62568923d5c949fc09eb84330ea352eca3e50870"}, {"sha": "32396f6e181da070269a093efe726fa1a4561cd6", "url": "https://api.github.com/repos/rust-lang/rust/commits/32396f6e181da070269a093efe726fa1a4561cd6", "html_url": "https://github.com/rust-lang/rust/commit/32396f6e181da070269a093efe726fa1a4561cd6"}], "stats": {"total": 130, "additions": 122, "deletions": 8}, "files": [{"sha": "0d5d10c7ae5ceaa8b11475df7d54475e3d0c39cb", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a8d258454f4aba9e3e4375ff47e2fdc4d48450a6/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/a8d258454f4aba9e3e4375ff47e2fdc4d48450a6/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=a8d258454f4aba9e3e4375ff47e2fdc4d48450a6", "patch": "@@ -866,6 +866,7 @@ All notable changes to this project will be documented in this file.\n [`unimplemented`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#unimplemented\n [`unit_arg`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#unit_arg\n [`unit_cmp`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#unit_cmp\n+[`unknown_clippy_lints`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#unknown_clippy_lints\n [`unnecessary_cast`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#unnecessary_cast\n [`unnecessary_filter_map`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#unnecessary_filter_map\n [`unnecessary_fold`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#unnecessary_fold"}, {"sha": "3c056171f02efe8d540e5f57348b6b535df3ace9", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8d258454f4aba9e3e4375ff47e2fdc4d48450a6/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/a8d258454f4aba9e3e4375ff47e2fdc4d48450a6/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=a8d258454f4aba9e3e4375ff47e2fdc4d48450a6", "patch": "@@ -9,7 +9,7 @@ We are currently in the process of discussing Clippy 1.0 via the RFC process in\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 283 lints included in this crate!](https://rust-lang-nursery.github.io/rust-clippy/master/index.html)\n+[There are 284 lints included in this crate!](https://rust-lang-nursery.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "89d676f3f4ceb0fc957d91f8beb804cbc0680102", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 86, "deletions": 7, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/a8d258454f4aba9e3e4375ff47e2fdc4d48450a6/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d258454f4aba9e3e4375ff47e2fdc4d48450a6/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=a8d258454f4aba9e3e4375ff47e2fdc4d48450a6", "patch": "@@ -12,16 +12,20 @@\n \n use crate::reexport::*;\n use crate::utils::{\n-    in_macro, last_line_of_span, match_def_path, opt_def_id, paths, snippet_opt, span_lint, span_lint_and_then,\n-    without_block_comments,\n+    in_macro, last_line_of_span, match_def_path, opt_def_id, paths, snippet_opt, span_lint,\n+    span_lint_and_then, without_block_comments,\n };\n-use crate::rustc::hir::*;\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n use if_chain::if_chain;\n+use crate::rustc::hir::*;\n+use crate::rustc::lint::{\n+    CheckLintNameResult, LateContext, LateLintPass, LintArray, LintContext, LintPass,\n+};\n use crate::rustc::ty::{self, TyCtxt};\n+use crate::rustc::{declare_tool_lint, lint_array};\n use semver::Version;\n-use crate::syntax::ast::{AttrStyle, Attribute, Lit, LitKind, MetaItemKind, NestedMetaItem, NestedMetaItemKind};\n+use crate::syntax::ast::{\n+    AttrStyle, Attribute, Lit, LitKind, MetaItemKind, NestedMetaItem, NestedMetaItemKind,\n+};\n use crate::syntax::source_map::Span;\n use crate::rustc_errors::Applicability;\n \n@@ -138,6 +142,33 @@ declare_clippy_lint! {\n     \"empty line after outer attribute\"\n }\n \n+/// **What it does:** Checks for `allow`/`warn`/`deny`/`forbid` attributes with scoped clippy\n+/// lints and if those lints exist in clippy. If there is a uppercase letter in the lint name\n+/// (not the tool name) and a lowercase version of this lint exists, it will suggest to lowercase\n+/// the lint name.\n+///\n+/// **Why is this bad?** A lint attribute with a mistyped lint name won't have an effect.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// Bad:\n+/// ```rust\n+/// #![warn(if_not_els)]\n+/// #![deny(clippy::All)]\n+/// ```\n+///\n+/// Good:\n+/// ```rust\n+/// #![warn(if_not_else)]\n+/// #![deny(clippy::all)]\n+/// ```\n+declare_clippy_lint! {\n+    pub UNKNOWN_CLIPPY_LINTS,\n+    style,\n+    \"unknown_lints for scoped Clippy lints\"\n+}\n+\n #[derive(Copy, Clone)]\n pub struct AttrPass;\n \n@@ -147,14 +178,21 @@ impl LintPass for AttrPass {\n             INLINE_ALWAYS,\n             DEPRECATED_SEMVER,\n             USELESS_ATTRIBUTE,\n-            EMPTY_LINE_AFTER_OUTER_ATTR\n+            EMPTY_LINE_AFTER_OUTER_ATTR,\n+            UNKNOWN_CLIPPY_LINTS,\n         )\n     }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AttrPass {\n     fn check_attribute(&mut self, cx: &LateContext<'a, 'tcx>, attr: &'tcx Attribute) {\n         if let Some(ref items) = attr.meta_item_list() {\n+            match &*attr.name().as_str() {\n+                \"allow\" | \"warn\" | \"deny\" | \"forbid\" => {\n+                    check_clippy_lint_names(cx, items);\n+                }\n+                _ => {}\n+            }\n             if items.is_empty() || attr.name() != \"deprecated\" {\n                 return;\n             }\n@@ -247,6 +285,47 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AttrPass {\n     }\n }\n \n+#[allow(clippy::single_match_else)]\n+fn check_clippy_lint_names(cx: &LateContext<'_, '_>, items: &[NestedMetaItem]) {\n+    let lint_store = cx.lints();\n+    for lint in items {\n+        if_chain! {\n+            if let Some(word) = lint.word();\n+            if let Some(tool_name) = word.is_scoped();\n+            if tool_name.as_str() == \"clippy\";\n+            let name = word.name();\n+            if let CheckLintNameResult::Tool(Err((None, _))) = lint_store.check_lint_name(\n+                &name.as_str(),\n+                Some(tool_name.as_str()),\n+            );\n+            then {\n+                span_lint_and_then(\n+                    cx,\n+                    UNKNOWN_CLIPPY_LINTS,\n+                    lint.span,\n+                    &format!(\"unknown clippy lint: clippy::{}\", name),\n+                    |db| {\n+                        if name.as_str().chars().any(|c| c.is_uppercase()) {\n+                            let name_lower = name.as_str().to_lowercase().to_string();\n+                            match lint_store.check_lint_name(\n+                                &name_lower,\n+                                Some(tool_name.as_str())\n+                            ) {\n+                                CheckLintNameResult::NoLint => (),\n+                                _ => {\n+                                    db.span_suggestion(lint.span,\n+                                                       \"lowercase the lint name\",\n+                                                       name_lower);\n+                                }\n+                            }\n+                        }\n+                    }\n+                );\n+            }\n+        };\n+    }\n+}\n+\n fn is_relevant_item(tcx: TyCtxt<'_, '_, '_>, item: &Item) -> bool {\n     if let ItemKind::Fn(_, _, _, eid) = item.node {\n         is_relevant_expr(tcx, tcx.body_tables(eid), &tcx.hir.body(eid).value)"}, {"sha": "56cd2ca3e926aad65311afbac2b1dc1cb194bf4b", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8d258454f4aba9e3e4375ff47e2fdc4d48450a6/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d258454f4aba9e3e4375ff47e2fdc4d48450a6/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=a8d258454f4aba9e3e4375ff47e2fdc4d48450a6", "patch": "@@ -533,6 +533,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         assign_ops::ASSIGN_OP_PATTERN,\n         assign_ops::MISREFACTORED_ASSIGN_OP,\n         attrs::DEPRECATED_SEMVER,\n+        attrs::UNKNOWN_CLIPPY_LINTS,\n         attrs::USELESS_ATTRIBUTE,\n         bit_mask::BAD_BIT_MASK,\n         bit_mask::INEFFECTIVE_BIT_MASK,\n@@ -749,6 +750,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n \n     reg.register_lint_group(\"clippy::style\", Some(\"clippy_style\"), vec![\n         assign_ops::ASSIGN_OP_PATTERN,\n+        attrs::UNKNOWN_CLIPPY_LINTS,\n         bit_mask::VERBOSE_BIT_MASK,\n         blacklisted_name::BLACKLISTED_NAME,\n         block_in_if_condition::BLOCK_IN_IF_CONDITION_EXPR,"}, {"sha": "d0b4ae9f5329ee5b985b173397a499d28b09399e", "filename": "tests/ui/unknown_clippy_lints.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a8d258454f4aba9e3e4375ff47e2fdc4d48450a6/tests%2Fui%2Funknown_clippy_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d258454f4aba9e3e4375ff47e2fdc4d48450a6/tests%2Fui%2Funknown_clippy_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funknown_clippy_lints.rs?ref=a8d258454f4aba9e3e4375ff47e2fdc4d48450a6", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2014-2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(clippy::All)]\n+#![warn(clippy::pedantic)]\n+\n+#[warn(clippy::if_not_els)]\n+fn main() {\n+\n+}"}, {"sha": "83ee0e9dd31ae057e2bf488e790768e967825031", "filename": "tests/ui/unknown_clippy_lints.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a8d258454f4aba9e3e4375ff47e2fdc4d48450a6/tests%2Fui%2Funknown_clippy_lints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a8d258454f4aba9e3e4375ff47e2fdc4d48450a6/tests%2Fui%2Funknown_clippy_lints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funknown_clippy_lints.stderr?ref=a8d258454f4aba9e3e4375ff47e2fdc4d48450a6", "patch": "@@ -0,0 +1,16 @@\n+error: unknown clippy lint: clippy::if_not_els\n+  --> $DIR/unknown_clippy_lints.rs:13:8\n+   |\n+13 | #[warn(clippy::if_not_els)]\n+   |        ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::unknown-clippy-lints` implied by `-D warnings`\n+\n+error: unknown clippy lint: clippy::All\n+  --> $DIR/unknown_clippy_lints.rs:10:10\n+   |\n+10 | #![allow(clippy::All)]\n+   |          ^^^^^^^^^^^ help: lowercase the lint name: `all`\n+\n+error: aborting due to 2 previous errors\n+"}]}