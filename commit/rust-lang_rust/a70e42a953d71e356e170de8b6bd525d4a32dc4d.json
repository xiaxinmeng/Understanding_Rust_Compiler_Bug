{"sha": "a70e42a953d71e356e170de8b6bd525d4a32dc4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3MGU0MmE5NTNkNzFlMzU2ZTE3MGRlOGI2YmQ1MjVkNGEzMmRjNGQ=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-04-24T21:10:54Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-04-29T18:34:49Z"}, "message": "Remove use of `ast_map.expect_item()` and improve diagnostics (fixes #33186)", "tree": {"sha": "5e96247c033020600e3bc18a483663676f8de60d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e96247c033020600e3bc18a483663676f8de60d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a70e42a953d71e356e170de8b6bd525d4a32dc4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a70e42a953d71e356e170de8b6bd525d4a32dc4d", "html_url": "https://github.com/rust-lang/rust/commit/a70e42a953d71e356e170de8b6bd525d4a32dc4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a70e42a953d71e356e170de8b6bd525d4a32dc4d/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a4e0b14e39989f327f9f8103cf38ec43cd22131", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a4e0b14e39989f327f9f8103cf38ec43cd22131", "html_url": "https://github.com/rust-lang/rust/commit/5a4e0b14e39989f327f9f8103cf38ec43cd22131"}], "stats": {"total": 95, "additions": 49, "deletions": 46}, "files": [{"sha": "b83d6e9363e9c30465b2e1eeb7ca59f060f58ec2", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 41, "deletions": 42, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/a70e42a953d71e356e170de8b6bd525d4a32dc4d/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a70e42a953d71e356e170de8b6bd525d4a32dc4d/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=a70e42a953d71e356e170de8b6bd525d4a32dc4d", "patch": "@@ -68,7 +68,7 @@ use rustc::hir::intravisit::{self, FnKind, Visitor};\n use rustc::hir;\n use rustc::hir::{Arm, BindByRef, BindByValue, BindingMode, Block};\n use rustc::hir::Crate;\n-use rustc::hir::{Expr, ExprAgain, ExprBreak, ExprCall, ExprField};\n+use rustc::hir::{Expr, ExprAgain, ExprBreak, ExprField};\n use rustc::hir::{ExprLoop, ExprWhile, ExprMethodCall};\n use rustc::hir::{ExprPath, ExprStruct, FnDecl};\n use rustc::hir::{ForeignItemFn, ForeignItemStatic, Generics};\n@@ -163,7 +163,7 @@ enum ResolutionError<'a> {\n     /// error E0424: `self` is not available in a static method\n     SelfNotAvailableInStaticMethod,\n     /// error E0425: unresolved name\n-    UnresolvedName(&'a str, &'a str, UnresolvedNameContext),\n+    UnresolvedName(&'a str, &'a str, UnresolvedNameContext<'a>),\n     /// error E0426: use of undeclared label\n     UndeclaredLabel(&'a str),\n     /// error E0427: cannot use `ref` binding mode with ...\n@@ -186,12 +186,12 @@ enum ResolutionError<'a> {\n \n /// Context of where `ResolutionError::UnresolvedName` arose.\n #[derive(Clone, PartialEq, Eq, Debug)]\n-enum UnresolvedNameContext {\n-    /// `PathIsMod(id)` indicates that a given path, used in\n+enum UnresolvedNameContext<'a> {\n+    /// `PathIsMod(parent)` indicates that a given path, used in\n     /// expression context, actually resolved to a module rather than\n-    /// a value. The `id` attached to the variant is the node id of\n-    /// the erroneous path expression.\n-    PathIsMod(ast::NodeId),\n+    /// a value. The optional expression attached to the variant is the\n+    /// the parent of the erroneous path expression.\n+    PathIsMod(Option<&'a Expr>),\n \n     /// `Other` means we have no extra information about the context\n     /// of the unresolved name error. (Maybe we could eliminate all\n@@ -419,39 +419,25 @@ fn resolve_struct_error<'b, 'a: 'b, 'tcx: 'a>(resolver: &'b Resolver<'a, 'tcx>,\n \n             match context {\n                 UnresolvedNameContext::Other => { } // no help available\n-                UnresolvedNameContext::PathIsMod(id) => {\n-                    let mut help_msg = String::new();\n-                    let parent_id = resolver.ast_map.get_parent_node(id);\n-                    if let Some(hir_map::Node::NodeExpr(e)) = resolver.ast_map.find(parent_id) {\n-                        match e.node {\n-                            ExprField(_, ident) => {\n-                                help_msg = format!(\"To reference an item from the \\\n-                                                    `{module}` module, use \\\n-                                                    `{module}::{ident}`\",\n-                                                   module = path,\n-                                                   ident = ident.node);\n-                            }\n-                            ExprMethodCall(ident, _, _) => {\n-                                help_msg = format!(\"To call a function from the \\\n-                                                    `{module}` module, use \\\n-                                                    `{module}::{ident}(..)`\",\n-                                                   module = path,\n-                                                   ident = ident.node);\n-                            }\n-                            ExprCall(_, _) => {\n-                                help_msg = format!(\"No function corresponds to `{module}(..)`\",\n-                                                   module = path);\n-                            }\n-                            _ => { } // no help available\n+                UnresolvedNameContext::PathIsMod(parent) => {\n+                    err.fileline_help(span, &match parent.map(|parent| &parent.node) {\n+                        Some(&ExprField(_, ident)) => {\n+                            format!(\"To reference an item from the `{module}` module, \\\n+                                     use `{module}::{ident}`\",\n+                                    module = path,\n+                                    ident = ident.node)\n                         }\n-                    } else {\n-                        help_msg = format!(\"Module `{module}` cannot be the value of an expression\",\n-                                           module = path);\n-                    }\n-\n-                    if !help_msg.is_empty() {\n-                        err.fileline_help(span, &help_msg);\n-                    }\n+                        Some(&ExprMethodCall(ident, _, _)) => {\n+                            format!(\"To call a function from the `{module}` module, \\\n+                                     use `{module}::{ident}(..)`\",\n+                                    module = path,\n+                                    ident = ident.node)\n+                        }\n+                        _ => {\n+                            format!(\"Module `{module}` cannot be used as an expression\",\n+                                    module = path)\n+                        }\n+                    });\n                 }\n             }\n             err\n@@ -553,7 +539,7 @@ impl<'a, 'v, 'tcx> Visitor<'v> for Resolver<'a, 'tcx> {\n         self.resolve_block(block);\n     }\n     fn visit_expr(&mut self, expr: &Expr) {\n-        self.resolve_expr(expr);\n+        self.resolve_expr(expr, None);\n     }\n     fn visit_local(&mut self, local: &Local) {\n         self.resolve_local(local);\n@@ -2850,7 +2836,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         } SuggestionType::NotFound\n     }\n \n-    fn resolve_expr(&mut self, expr: &Expr) {\n+    fn resolve_expr(&mut self, expr: &Expr, parent: Option<&Expr>) {\n         // First, record candidate traits for this expression if it could\n         // result in the invocation of a method call.\n \n@@ -2995,7 +2981,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                                                    UseLexicalScope,\n                                                                    expr.span) {\n                                         Success(_) => {\n-                                            context = UnresolvedNameContext::PathIsMod(expr.id);\n+                                            context = UnresolvedNameContext::PathIsMod(parent);\n                                         },\n                                         _ => {},\n                                     };\n@@ -3069,6 +3055,19 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                     }\n                 }\n             }\n+            ExprField(ref subexpression, _) => {\n+                self.resolve_expr(subexpression, Some(expr));\n+            }\n+            ExprMethodCall(_, ref types, ref arguments) => {\n+                let mut arguments = arguments.iter();\n+                self.resolve_expr(arguments.next().unwrap(), Some(expr));\n+                for argument in arguments {\n+                    self.resolve_expr(argument, None);\n+                }\n+                for ty in types.iter() {\n+                    self.visit_ty(ty);\n+                }\n+            }\n \n             _ => {\n                 intravisit::walk_expr(self, expr);"}, {"sha": "412c90fd214c17ae5c3a585e0cd3d22fc032d4d9", "filename": "src/test/compile-fail/suggest-path-instead-of-mod-dot-item.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a70e42a953d71e356e170de8b6bd525d4a32dc4d/src%2Ftest%2Fcompile-fail%2Fsuggest-path-instead-of-mod-dot-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a70e42a953d71e356e170de8b6bd525d4a32dc4d/src%2Ftest%2Fcompile-fail%2Fsuggest-path-instead-of-mod-dot-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsuggest-path-instead-of-mod-dot-item.rs?ref=a70e42a953d71e356e170de8b6bd525d4a32dc4d", "patch": "@@ -47,10 +47,14 @@ fn h4() -> i32 {\n         //~| HELP To reference an item from the `a::b` module, use `a::b::J`\n }\n \n-fn h5() -> i32 {\n-    a.b.f()\n+fn h5() {\n+    a.b.f();\n         //~^ ERROR E0425\n         //~| HELP To reference an item from the `a` module, use `a::b`\n+    let v = Vec::new();\n+    v.push(a::b);\n+        //~^ ERROR E0425\n+        //~| HELP Module `a::b` cannot be used as an expression\n }\n \n fn h6() -> i32 {\n@@ -62,11 +66,11 @@ fn h6() -> i32 {\n fn h7() {\n     a::b\n         //~^ ERROR E0425\n-        //~| HELP Module `a::b` cannot be the value of an expression\n+        //~| HELP Module `a::b` cannot be used as an expression\n }\n \n fn h8() -> i32 {\n     a::b()\n         //~^ ERROR E0425\n-        //~| HELP No function corresponds to `a::b(..)`\n+        //~| HELP Module `a::b` cannot be used as an expression\n }"}]}