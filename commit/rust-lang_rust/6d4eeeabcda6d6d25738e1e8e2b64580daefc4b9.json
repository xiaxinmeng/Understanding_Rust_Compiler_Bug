{"sha": "6d4eeeabcda6d6d25738e1e8e2b64580daefc4b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkNGVlZWFiY2RhNmQ2ZDI1NzM4ZTFlOGUyYjY0NTgwZGFlZmM0Yjk=", "commit": {"author": {"name": "Tim Nielens", "email": "tim.nielens@gmail.com", "date": "2020-10-11T20:55:05Z"}, "committer": {"name": "Tim Nielens", "email": "tim.nielens@gmail.com", "date": "2020-10-14T20:16:48Z"}, "message": "manual-unwrap-or / pr remarks", "tree": {"sha": "dcfa35d33906dab81e4749518ded48228c187f2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dcfa35d33906dab81e4749518ded48228c187f2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d4eeeabcda6d6d25738e1e8e2b64580daefc4b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d4eeeabcda6d6d25738e1e8e2b64580daefc4b9", "html_url": "https://github.com/rust-lang/rust/commit/6d4eeeabcda6d6d25738e1e8e2b64580daefc4b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d4eeeabcda6d6d25738e1e8e2b64580daefc4b9/comments", "author": {"login": "tnielens", "id": 11885535, "node_id": "MDQ6VXNlcjExODg1NTM1", "avatar_url": "https://avatars.githubusercontent.com/u/11885535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tnielens", "html_url": "https://github.com/tnielens", "followers_url": "https://api.github.com/users/tnielens/followers", "following_url": "https://api.github.com/users/tnielens/following{/other_user}", "gists_url": "https://api.github.com/users/tnielens/gists{/gist_id}", "starred_url": "https://api.github.com/users/tnielens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tnielens/subscriptions", "organizations_url": "https://api.github.com/users/tnielens/orgs", "repos_url": "https://api.github.com/users/tnielens/repos", "events_url": "https://api.github.com/users/tnielens/events{/privacy}", "received_events_url": "https://api.github.com/users/tnielens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tnielens", "id": 11885535, "node_id": "MDQ6VXNlcjExODg1NTM1", "avatar_url": "https://avatars.githubusercontent.com/u/11885535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tnielens", "html_url": "https://github.com/tnielens", "followers_url": "https://api.github.com/users/tnielens/followers", "following_url": "https://api.github.com/users/tnielens/following{/other_user}", "gists_url": "https://api.github.com/users/tnielens/gists{/gist_id}", "starred_url": "https://api.github.com/users/tnielens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tnielens/subscriptions", "organizations_url": "https://api.github.com/users/tnielens/orgs", "repos_url": "https://api.github.com/users/tnielens/repos", "events_url": "https://api.github.com/users/tnielens/events{/privacy}", "received_events_url": "https://api.github.com/users/tnielens/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c9327980becadc15a68307705b3a06c28116ae1", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c9327980becadc15a68307705b3a06c28116ae1", "html_url": "https://github.com/rust-lang/rust/commit/9c9327980becadc15a68307705b3a06c28116ae1"}], "stats": {"total": 180, "additions": 101, "deletions": 79}, "files": [{"sha": "d82f970b8bf20a24eb636af059bdf1ddf33516c1", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d4eeeabcda6d6d25738e1e8e2b64580daefc4b9/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/6d4eeeabcda6d6d25738e1e8e2b64580daefc4b9/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=6d4eeeabcda6d6d25738e1e8e2b64580daefc4b9", "patch": "@@ -1781,7 +1781,6 @@ Released 2018-09-13\n [`large_stack_arrays`]: https://rust-lang.github.io/rust-clippy/master/index.html#large_stack_arrays\n [`len_without_is_empty`]: https://rust-lang.github.io/rust-clippy/master/index.html#len_without_is_empty\n [`len_zero`]: https://rust-lang.github.io/rust-clippy/master/index.html#len_zero\n-[`less_concise_than_option_unwrap_or`]: https://rust-lang.github.io/rust-clippy/master/index.html#less_concise_than_option_unwrap_or\n [`let_and_return`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return\n [`let_underscore_lock`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_underscore_lock\n [`let_underscore_must_use`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_underscore_must_use\n@@ -1797,6 +1796,7 @@ Released 2018-09-13\n [`manual_saturating_arithmetic`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_saturating_arithmetic\n [`manual_strip`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_strip\n [`manual_swap`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_swap\n+[`manual_unwrap_or`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_unwrap_or\n [`many_single_char_names`]: https://rust-lang.github.io/rust-clippy/master/index.html#many_single_char_names\n [`map_clone`]: https://rust-lang.github.io/rust-clippy/master/index.html#map_clone\n [`map_entry`]: https://rust-lang.github.io/rust-clippy/master/index.html#map_entry"}, {"sha": "d4d2f92a6a695c7af893688ce2a1c1b966725570", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6d4eeeabcda6d6d25738e1e8e2b64580daefc4b9/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4eeeabcda6d6d25738e1e8e2b64580daefc4b9/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=6d4eeeabcda6d6d25738e1e8e2b64580daefc4b9", "patch": "@@ -224,7 +224,6 @@ mod large_const_arrays;\n mod large_enum_variant;\n mod large_stack_arrays;\n mod len_zero;\n-mod less_concise_than;\n mod let_if_seq;\n mod let_underscore;\n mod lifetimes;\n@@ -235,6 +234,7 @@ mod main_recursion;\n mod manual_async_fn;\n mod manual_non_exhaustive;\n mod manual_strip;\n+mod manual_unwrap_or;\n mod map_clone;\n mod map_err_ignore;\n mod map_identity;\n@@ -610,7 +610,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &large_stack_arrays::LARGE_STACK_ARRAYS,\n         &len_zero::LEN_WITHOUT_IS_EMPTY,\n         &len_zero::LEN_ZERO,\n-        &less_concise_than::LESS_CONCISE_THAN_OPTION_UNWRAP_OR,\n         &let_if_seq::USELESS_LET_IF_SEQ,\n         &let_underscore::LET_UNDERSCORE_LOCK,\n         &let_underscore::LET_UNDERSCORE_MUST_USE,\n@@ -642,6 +641,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &manual_async_fn::MANUAL_ASYNC_FN,\n         &manual_non_exhaustive::MANUAL_NON_EXHAUSTIVE,\n         &manual_strip::MANUAL_STRIP,\n+        &manual_unwrap_or::MANUAL_UNWRAP_OR,\n         &map_clone::MAP_CLONE,\n         &map_err_ignore::MAP_ERR_IGNORE,\n         &map_identity::MAP_IDENTITY,\n@@ -1128,7 +1128,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box repeat_once::RepeatOnce);\n     store.register_late_pass(|| box unwrap_in_result::UnwrapInResult);\n     store.register_late_pass(|| box self_assignment::SelfAssignment);\n-    store.register_late_pass(|| box less_concise_than::LessConciseThan);\n+    store.register_late_pass(|| box manual_unwrap_or::ManualUnwrapOr);\n     store.register_late_pass(|| box float_equality_without_abs::FloatEqualityWithoutAbs);\n     store.register_late_pass(|| box async_yields_async::AsyncYieldsAsync);\n     store.register_late_pass(|| box manual_strip::ManualStrip);\n@@ -1213,7 +1213,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&infinite_iter::MAYBE_INFINITE_ITER),\n         LintId::of(&items_after_statements::ITEMS_AFTER_STATEMENTS),\n         LintId::of(&large_stack_arrays::LARGE_STACK_ARRAYS),\n-        LintId::of(&less_concise_than::LESS_CONCISE_THAN_OPTION_UNWRAP_OR),\n         LintId::of(&literal_representation::LARGE_DIGIT_GROUPS),\n         LintId::of(&literal_representation::UNREADABLE_LITERAL),\n         LintId::of(&loops::EXPLICIT_INTO_ITER_LOOP),\n@@ -1371,6 +1370,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&manual_async_fn::MANUAL_ASYNC_FN),\n         LintId::of(&manual_non_exhaustive::MANUAL_NON_EXHAUSTIVE),\n         LintId::of(&manual_strip::MANUAL_STRIP),\n+        LintId::of(&manual_unwrap_or::MANUAL_UNWRAP_OR),\n         LintId::of(&map_clone::MAP_CLONE),\n         LintId::of(&map_identity::MAP_IDENTITY),\n         LintId::of(&map_unit_fn::OPTION_MAP_UNIT_FN),\n@@ -1666,6 +1666,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&loops::MUT_RANGE_BOUND),\n         LintId::of(&loops::WHILE_LET_LOOP),\n         LintId::of(&manual_strip::MANUAL_STRIP),\n+        LintId::of(&manual_unwrap_or::MANUAL_UNWRAP_OR),\n         LintId::of(&map_identity::MAP_IDENTITY),\n         LintId::of(&map_unit_fn::OPTION_MAP_UNIT_FN),\n         LintId::of(&map_unit_fn::RESULT_MAP_UNIT_FN),"}, {"sha": "9d8fc863424c96d52fe5259911c3076e8f521ef4", "filename": "clippy_lints/src/manual_unwrap_or.rs", "status": "modified", "additions": 59, "deletions": 54, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/6d4eeeabcda6d6d25738e1e8e2b64580daefc4b9/clippy_lints%2Fsrc%2Fmanual_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4eeeabcda6d6d25738e1e8e2b64580daefc4b9/clippy_lints%2Fsrc%2Fmanual_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_unwrap_or.rs?ref=6d4eeeabcda6d6d25738e1e8e2b64580daefc4b9", "patch": "@@ -2,12 +2,14 @@ use crate::utils;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{def, Arm, Expr, ExprKind, PatKind, QPath};\n+use rustc_lint::LintContext;\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n     /// **What it does:**\n-    /// Finds patterns that can be encoded more concisely with `Option::unwrap_or`.\n+    /// Finds patterns that reimplement `Option::unwrap_or`.\n     ///\n     /// **Why is this bad?**\n     /// Concise code helps focusing on behavior instead of boilerplate.\n@@ -16,47 +18,43 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n-    /// match int_optional {\n+    /// match int_option {\n     ///     Some(v) => v,\n     ///     None => 1,\n     /// }\n     /// ```\n     ///\n     /// Use instead:\n     /// ```rust\n-    /// int_optional.unwrap_or(1)\n+    /// int_option.unwrap_or(1)\n     /// ```\n-    pub LESS_CONCISE_THAN_OPTION_UNWRAP_OR,\n-    pedantic,\n-    \"finds patterns that can be encoded more concisely with `Option::unwrap_or`\"\n+    pub MANUAL_UNWRAP_OR,\n+    complexity,\n+    \"finds patterns that can be encoded more concisely with `Option::unwrap_or(_else)`\"\n }\n \n-declare_lint_pass!(LessConciseThan => [LESS_CONCISE_THAN_OPTION_UNWRAP_OR]);\n+declare_lint_pass!(ManualUnwrapOr => [MANUAL_UNWRAP_OR]);\n \n-impl LateLintPass<'_> for LessConciseThan {\n+impl LateLintPass<'_> for ManualUnwrapOr {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n-        if utils::in_macro(expr.span) {\n-            return;\n-        }\n-        if lint_option_unwrap_or_case(cx, expr) {\n+        if in_external_macro(cx.sess(), expr.span) {\n             return;\n         }\n+        lint_option_unwrap_or_case(cx, expr);\n     }\n }\n \n fn lint_option_unwrap_or_case<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) -> bool {\n-    #[allow(clippy::needless_bool)]\n     fn applicable_none_arm<'a>(arms: &'a [Arm<'a>]) -> Option<&'a Arm<'a>> {\n         if_chain! {\n             if arms.len() == 2;\n             if arms.iter().all(|arm| arm.guard.is_none());\n             if let Some((idx, none_arm)) = arms.iter().enumerate().find(|(_, arm)|\n-               if_chain! {\n-                    if let PatKind::Path(ref qpath) = arm.pat.kind;\n-                    if utils::match_qpath(qpath, &utils::paths::OPTION_NONE);\n-                    then { true }\n-                    else { false }\n-               }\n+                if let PatKind::Path(ref qpath) = arm.pat.kind {\n+                    utils::match_qpath(qpath, &utils::paths::OPTION_NONE)\n+                } else {\n+                    false\n+                }\n             );\n             let some_arm = &arms[1 - idx];\n             if let PatKind::TupleStruct(ref some_qpath, &[some_binding], _) = some_arm.pat.kind;\n@@ -65,43 +63,50 @@ fn lint_option_unwrap_or_case<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tc\n             if let ExprKind::Path(QPath::Resolved(_, body_path)) = some_arm.body.kind;\n             if let def::Res::Local(body_path_hir_id) = body_path.res;\n             if body_path_hir_id == binding_hir_id;\n-            then { Some(none_arm) }\n-            else { None }\n+            if !utils::usage::contains_return_break_continue_macro(none_arm.body);\n+            then {\n+                Some(none_arm)\n+            }\n+            else {\n+                None\n+            }\n         }\n     }\n+\n     if_chain! {\n-      if !utils::usage::contains_return_break_continue_macro(expr);\n-      if let ExprKind::Match (match_expr, match_arms, _) = expr.kind;\n-      let ty = cx.typeck_results().expr_ty(match_expr);\n-      if utils::is_type_diagnostic_item(cx, ty, sym!(option_type));\n-      if let Some(none_arm) = applicable_none_arm(match_arms);\n-      if let Some(match_expr_snippet) = utils::snippet_opt(cx, match_expr.span);\n-      if let Some(none_body_snippet) = utils::snippet_opt(cx, none_arm.body.span);\n-      if let Some(indent) = utils::indent_of(cx, expr.span);\n-      then {\n-          let reindented_none_body =\n-              utils::reindent_multiline(none_body_snippet.into(), true, Some(indent));\n-          let eager_eval = utils::eager_or_lazy::is_eagerness_candidate(cx, none_arm.body);\n-          let method = if eager_eval {\n-              \"unwrap_or\"\n-          } else {\n-              \"unwrap_or_else\"\n-          };\n-          utils::span_lint_and_sugg(\n-              cx,\n-              LESS_CONCISE_THAN_OPTION_UNWRAP_OR, expr.span,\n-              \"this pattern can be more concisely encoded with `Option::unwrap_or`\",\n-              \"replace with\",\n-              format!(\n-                  \"{}.{}({}{})\",\n-                  match_expr_snippet,\n-                  method,\n-                  if eager_eval { \"\"} else { \"|| \" },\n-                  reindented_none_body\n-              ),\n-              Applicability::MachineApplicable,\n-          );\n-          true\n-      } else { false}\n+        if let ExprKind::Match(scrutinee, match_arms, _) = expr.kind;\n+        let ty = cx.typeck_results().expr_ty(scrutinee);\n+        if utils::is_type_diagnostic_item(cx, ty, sym!(option_type));\n+        if let Some(none_arm) = applicable_none_arm(match_arms);\n+        if let Some(scrutinee_snippet) = utils::snippet_opt(cx, scrutinee.span);\n+        if let Some(none_body_snippet) = utils::snippet_opt(cx, none_arm.body.span);\n+        if let Some(indent) = utils::indent_of(cx, expr.span);\n+        then {\n+            let reindented_none_body =\n+                utils::reindent_multiline(none_body_snippet.into(), true, Some(indent));\n+            let eager_eval = utils::eager_or_lazy::is_eagerness_candidate(cx, none_arm.body);\n+            let method = if eager_eval {\n+                \"unwrap_or\"\n+            } else {\n+                \"unwrap_or_else\"\n+            };\n+            utils::span_lint_and_sugg(\n+                cx,\n+                MANUAL_UNWRAP_OR, expr.span,\n+                &format!(\"this pattern reimplements `Option::{}`\", &method),\n+                \"replace with\",\n+                format!(\n+                    \"{}.{}({}{})\",\n+                    scrutinee_snippet,\n+                    method,\n+                    if eager_eval { \"\"} else { \"|| \" },\n+                    reindented_none_body\n+                ),\n+                Applicability::MachineApplicable,\n+            );\n+            true\n+        } else {\n+            false\n+        }\n     }\n }"}, {"sha": "debd3c31d8bffec9d40c6f98756623f70e126e11", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6d4eeeabcda6d6d25738e1e8e2b64580daefc4b9/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4eeeabcda6d6d25738e1e8e2b64580daefc4b9/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=6d4eeeabcda6d6d25738e1e8e2b64580daefc4b9", "patch": "@@ -1075,13 +1075,6 @@ vec![\n         deprecation: None,\n         module: \"len_zero\",\n     },\n-    Lint {\n-        name: \"less_concise_than_option_unwrap_or\",\n-        group: \"pedantic\",\n-        desc: \"finds patterns that can be encoded more concisely with `Option::unwrap_or`\",\n-        deprecation: None,\n-        module: \"less_concise_than\",\n-    },\n     Lint {\n         name: \"let_and_return\",\n         group: \"style\",\n@@ -1187,6 +1180,13 @@ vec![\n         deprecation: None,\n         module: \"swap\",\n     },\n+    Lint {\n+        name: \"manual_unwrap_or\",\n+        group: \"complexity\",\n+        desc: \"finds patterns that can be encoded more concisely with `Option::unwrap_or(_else)`\",\n+        deprecation: None,\n+        module: \"manual_unwrap_or\",\n+    },\n     Lint {\n         name: \"many_single_char_names\",\n         group: \"style\","}, {"sha": "99d30360db1a1bef807d4bbdf7b25b2b77bcfa7b", "filename": "tests/ui/manual_unwrap_or.fixed", "status": "renamed", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d4eeeabcda6d6d25738e1e8e2b64580daefc4b9/tests%2Fui%2Fmanual_unwrap_or.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/6d4eeeabcda6d6d25738e1e8e2b64580daefc4b9/tests%2Fui%2Fmanual_unwrap_or.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_unwrap_or.fixed?ref=6d4eeeabcda6d6d25738e1e8e2b64580daefc4b9", "patch": "@@ -1,11 +1,13 @@\n // run-rustfix\n-#![warn(clippy::less_concise_than_option_unwrap_or)]\n #![allow(dead_code)]\n \n fn unwrap_or() {\n     // int case\n     Some(1).unwrap_or(42);\n \n+    // int case reversed\n+    Some(1).unwrap_or(42);\n+\n     // richer none expr\n     Some(1).unwrap_or_else(|| 1 + 42);\n ", "previous_filename": "tests/ui/less_concise_than.fixed"}, {"sha": "5d03d9db16392a2c10f7558441a9d14730e3c306", "filename": "tests/ui/manual_unwrap_or.rs", "status": "renamed", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6d4eeeabcda6d6d25738e1e8e2b64580daefc4b9/tests%2Fui%2Fmanual_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4eeeabcda6d6d25738e1e8e2b64580daefc4b9/tests%2Fui%2Fmanual_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_unwrap_or.rs?ref=6d4eeeabcda6d6d25738e1e8e2b64580daefc4b9", "patch": "@@ -1,5 +1,4 @@\n // run-rustfix\n-#![warn(clippy::less_concise_than_option_unwrap_or)]\n #![allow(dead_code)]\n \n fn unwrap_or() {\n@@ -9,6 +8,12 @@ fn unwrap_or() {\n         None => 42,\n     };\n \n+    // int case reversed\n+    match Some(1) {\n+        None => 42,\n+        Some(i) => i,\n+    };\n+\n     // richer none expr\n     match Some(1) {\n         Some(i) => i,", "previous_filename": "tests/ui/less_concise_than.rs"}, {"sha": "03da118a0c420dd78140ec31fc0f9303999f0869", "filename": "tests/ui/manual_unwrap_or.stderr", "status": "renamed", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6d4eeeabcda6d6d25738e1e8e2b64580daefc4b9/tests%2Fui%2Fmanual_unwrap_or.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d4eeeabcda6d6d25738e1e8e2b64580daefc4b9/tests%2Fui%2Fmanual_unwrap_or.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_unwrap_or.stderr?ref=6d4eeeabcda6d6d25738e1e8e2b64580daefc4b9", "patch": "@@ -1,25 +1,34 @@\n-error: this pattern can be more concisely encoded with `Option::unwrap_or`\n-  --> $DIR/less_concise_than.rs:7:5\n+error: this pattern reimplements `Option::unwrap_or`\n+  --> $DIR/manual_unwrap_or.rs:6:5\n    |\n LL | /     match Some(1) {\n LL | |         Some(i) => i,\n LL | |         None => 42,\n LL | |     };\n    | |_____^ help: replace with: `Some(1).unwrap_or(42)`\n    |\n-   = note: `-D clippy::less-concise-than-option-unwrap-or` implied by `-D warnings`\n+   = note: `-D clippy::manual-unwrap-or` implied by `-D warnings`\n \n-error: this pattern can be more concisely encoded with `Option::unwrap_or`\n-  --> $DIR/less_concise_than.rs:13:5\n+error: this pattern reimplements `Option::unwrap_or`\n+  --> $DIR/manual_unwrap_or.rs:12:5\n+   |\n+LL | /     match Some(1) {\n+LL | |         None => 42,\n+LL | |         Some(i) => i,\n+LL | |     };\n+   | |_____^ help: replace with: `Some(1).unwrap_or(42)`\n+\n+error: this pattern reimplements `Option::unwrap_or_else`\n+  --> $DIR/manual_unwrap_or.rs:18:5\n    |\n LL | /     match Some(1) {\n LL | |         Some(i) => i,\n LL | |         None => 1 + 42,\n LL | |     };\n    | |_____^ help: replace with: `Some(1).unwrap_or_else(|| 1 + 42)`\n \n-error: this pattern can be more concisely encoded with `Option::unwrap_or`\n-  --> $DIR/less_concise_than.rs:19:5\n+error: this pattern reimplements `Option::unwrap_or_else`\n+  --> $DIR/manual_unwrap_or.rs:24:5\n    |\n LL | /     match Some(1) {\n LL | |         Some(i) => i,\n@@ -39,14 +48,14 @@ LL |         b + 42\n LL |     });\n    |\n \n-error: this pattern can be more concisely encoded with `Option::unwrap_or`\n-  --> $DIR/less_concise_than.rs:29:5\n+error: this pattern reimplements `Option::unwrap_or`\n+  --> $DIR/manual_unwrap_or.rs:34:5\n    |\n LL | /     match Some(\"Bob\") {\n LL | |         Some(i) => i,\n LL | |         None => \"Alice\",\n LL | |     };\n    | |_____^ help: replace with: `Some(\"Bob\").unwrap_or(\"Alice\")`\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n ", "previous_filename": "tests/ui/less_concise_than.stderr"}, {"sha": "e366c75335c20357659021928b32b4e834206997", "filename": "tests/ui/shadow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d4eeeabcda6d6d25738e1e8e2b64580daefc4b9/tests%2Fui%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4eeeabcda6d6d25738e1e8e2b64580daefc4b9/tests%2Fui%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshadow.rs?ref=6d4eeeabcda6d6d25738e1e8e2b64580daefc4b9", "patch": "@@ -8,7 +8,7 @@\n #![allow(\n     unused_parens,\n     unused_variables,\n-    clippy::less_concise_than_option_unwrap_or,\n+    clippy::manual_unwrap_or,\n     clippy::missing_docs_in_private_items,\n     clippy::single_match\n )]"}]}