{"sha": "0b7b454820eff3109604c274d095948660a834dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiN2I0NTQ4MjBlZmYzMTA5NjA0YzI3NGQwOTU5NDg2NjBhODM0ZGQ=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-03-10T09:11:15Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-03-26T21:02:29Z"}, "message": "Combine input and eval_always query types", "tree": {"sha": "18b7d97eba53d364e4903c8eb82e77f5be7f19bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18b7d97eba53d364e4903c8eb82e77f5be7f19bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b7b454820eff3109604c274d095948660a834dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b7b454820eff3109604c274d095948660a834dd", "html_url": "https://github.com/rust-lang/rust/commit/0b7b454820eff3109604c274d095948660a834dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b7b454820eff3109604c274d095948660a834dd/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbd34efb32b9efb574899e4335bdc8c6525ac27e", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbd34efb32b9efb574899e4335bdc8c6525ac27e", "html_url": "https://github.com/rust-lang/rust/commit/fbd34efb32b9efb574899e4335bdc8c6525ac27e"}], "stats": {"total": 129, "additions": 45, "deletions": 84}, "files": [{"sha": "330862d7907d1d54e32440e7052a2574d0d98c06", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 29, "deletions": 47, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/0b7b454820eff3109604c274d095948660a834dd/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b7b454820eff3109604c274d095948660a834dd/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=0b7b454820eff3109604c274d095948660a834dd", "patch": "@@ -85,11 +85,6 @@ macro_rules! is_anon_attr {\n     ($attr:ident) => (false);\n }\n \n-macro_rules! is_input_attr {\n-    (input) => (true);\n-    ($attr:ident) => (false);\n-}\n-\n macro_rules! is_eval_always_attr {\n     (eval_always) => (true);\n     ($attr:ident) => (false);\n@@ -99,10 +94,6 @@ macro_rules! contains_anon_attr {\n     ($($attr:ident),*) => ({$(is_anon_attr!($attr) | )* false});\n }\n \n-macro_rules! contains_input_attr {\n-    ($($attr:ident),*) => ({$(is_input_attr!($attr) | )* false});\n-}\n-\n macro_rules! contains_eval_always_attr {\n     ($($attr:ident),*) => ({$(is_eval_always_attr!($attr) | )* false});\n }\n@@ -151,7 +142,7 @@ macro_rules! define_dep_nodes {\n                 }\n             }\n \n-            // FIXME: Make `is_anon`, `is_input`, `is_eval_always` and `has_params` properties\n+            // FIXME: Make `is_anon`, `is_eval_always` and `has_params` properties\n             // of queries\n             #[inline(always)]\n             pub fn is_anon(&self) -> bool {\n@@ -162,15 +153,6 @@ macro_rules! define_dep_nodes {\n                 }\n             }\n \n-            #[inline(always)]\n-            pub fn is_input(&self) -> bool {\n-                match *self {\n-                    $(\n-                        DepKind :: $variant => { contains_input_attr!($($attr),*) }\n-                    )*\n-                }\n-            }\n-\n             #[inline(always)]\n             pub fn is_eval_always(&self) -> bool {\n                 match *self {\n@@ -438,17 +420,17 @@ rustc_dep_node_append!([define_dep_nodes!][ <'tcx>\n     // suitable wrapper, you can use `tcx.dep_graph.ignore()` to gain\n     // access to the krate, but you must remember to add suitable\n     // edges yourself for the individual items that you read.\n-    [input] Krate,\n+    [eval_always] Krate,\n \n     // Represents the body of a function or method. The def-id is that of the\n     // function/method.\n-    [input] HirBody(DefId),\n+    [eval_always] HirBody(DefId),\n \n     // Represents the HIR node with the given node-id\n-    [input] Hir(DefId),\n+    [eval_always] Hir(DefId),\n \n     // Represents metadata from an extern crate.\n-    [input] CrateMetadata(CrateNum),\n+    [eval_always] CrateMetadata(CrateNum),\n \n     // Represents different phases in the compiler.\n     [] RegionScopeTree(DefId),\n@@ -533,7 +515,7 @@ rustc_dep_node_append!([define_dep_nodes!][ <'tcx>\n     // The set of impls for a given trait.\n     [] TraitImpls(DefId),\n \n-    [input] AllLocalTraitImpls,\n+    [eval_always] AllLocalTraitImpls,\n \n     [anon] TraitSelect,\n \n@@ -545,7 +527,7 @@ rustc_dep_node_append!([define_dep_nodes!][ <'tcx>\n     // to make type debuginfo to be source location independent. Declaring\n     // DefSpan an input makes sure that changes to these are always detected\n     // regardless of HIR hashing.\n-    [input] DefSpan(DefId),\n+    [eval_always] DefSpan(DefId),\n     [] LookupStability(DefId),\n     [] LookupDeprecationEntry(DefId),\n     [] ConstIsRvaluePromotableToStatic(DefId),\n@@ -563,10 +545,10 @@ rustc_dep_node_append!([define_dep_nodes!][ <'tcx>\n     [] IsCompilerBuiltins(CrateNum),\n     [] HasGlobalAllocator(CrateNum),\n     [] HasPanicHandler(CrateNum),\n-    [input] ExternCrate(DefId),\n+    [eval_always] ExternCrate(DefId),\n     [] Specializes { impl1: DefId, impl2: DefId },\n-    [input] InScopeTraits(DefIndex),\n-    [input] ModuleExports(DefId),\n+    [eval_always] InScopeTraits(DefIndex),\n+    [eval_always] ModuleExports(DefId),\n     [] IsSanitizerRuntime(CrateNum),\n     [] IsProfilerRuntime(CrateNum),\n     [] GetPanicStrategy(CrateNum),\n@@ -579,10 +561,10 @@ rustc_dep_node_append!([define_dep_nodes!][ <'tcx>\n     [] EntryFn(CrateNum),\n     [] PluginRegistrarFn(CrateNum),\n     [] ProcMacroDeclsStatic(CrateNum),\n-    [input] CrateDisambiguator(CrateNum),\n-    [input] CrateHash(CrateNum),\n-    [input] OriginalCrateName(CrateNum),\n-    [input] ExtraFileName(CrateNum),\n+    [eval_always] CrateDisambiguator(CrateNum),\n+    [eval_always] CrateHash(CrateNum),\n+    [eval_always] OriginalCrateName(CrateNum),\n+    [eval_always] ExtraFileName(CrateNum),\n \n     [] ImplementationsOfTrait { krate: CrateNum, trait_id: DefId },\n     [] AllTraitImplementations(CrateNum),\n@@ -591,16 +573,16 @@ rustc_dep_node_append!([define_dep_nodes!][ <'tcx>\n     [] IsDllimportForeignItem(DefId),\n     [] IsStaticallyIncludedForeignItem(DefId),\n     [] NativeLibraryKind(DefId),\n-    [input] LinkArgs,\n+    [eval_always] LinkArgs,\n \n     [] ResolveLifetimes(CrateNum),\n     [] NamedRegion(DefIndex),\n     [] IsLateBound(DefIndex),\n     [] ObjectLifetimeDefaults(DefIndex),\n \n     [] Visibility(DefId),\n-    [input] DepKind(CrateNum),\n-    [input] CrateName(CrateNum),\n+    [eval_always] DepKind(CrateNum),\n+    [eval_always] CrateName(CrateNum),\n     [] ItemChildren(DefId),\n     [] ExternModStmtCnum(DefId),\n     [eval_always] GetLibFeatures,\n@@ -609,24 +591,24 @@ rustc_dep_node_append!([define_dep_nodes!][ <'tcx>\n     [] DefinedLangItems(CrateNum),\n     [] MissingLangItems(CrateNum),\n     [] VisibleParentMap,\n-    [input] MissingExternCrateItem(CrateNum),\n-    [input] UsedCrateSource(CrateNum),\n-    [input] PostorderCnums,\n-\n-    [input] Freevars(DefId),\n-    [input] MaybeUnusedTraitImport(DefId),\n-    [input] MaybeUnusedExternCrates,\n-    [input] NamesImportedByGlobUse(DefId),\n+    [eval_always] MissingExternCrateItem(CrateNum),\n+    [eval_always] UsedCrateSource(CrateNum),\n+    [eval_always] PostorderCnums,\n+\n+    [eval_always] Freevars(DefId),\n+    [eval_always] MaybeUnusedTraitImport(DefId),\n+    [eval_always] MaybeUnusedExternCrates,\n+    [eval_always] NamesImportedByGlobUse(DefId),\n     [eval_always] StabilityIndex,\n     [eval_always] AllTraits,\n-    [input] AllCrateNums,\n+    [eval_always] AllCrateNums,\n     [] ExportedSymbols(CrateNum),\n     [eval_always] CollectAndPartitionMonoItems,\n     [] IsCodegenedItem(DefId),\n     [] CodegenUnit(InternedString),\n     [] BackendOptimizationLevel(CrateNum),\n     [] CompileCodegenUnit(InternedString),\n-    [input] OutputFilenames,\n+    [eval_always] OutputFilenames,\n     [] NormalizeProjectionTy(CanonicalProjectionGoal<'tcx>),\n     [] NormalizeTyAfterErasingRegions(ParamEnvAnd<'tcx, Ty<'tcx>>),\n     [] ImpliedOutlivesBounds(CanonicalTyGoal<'tcx>),\n@@ -645,11 +627,11 @@ rustc_dep_node_append!([define_dep_nodes!][ <'tcx>\n     [] SubstituteNormalizeAndTestPredicates { key: (DefId, SubstsRef<'tcx>) },\n     [] MethodAutoderefSteps(CanonicalTyGoal<'tcx>),\n \n-    [input] TargetFeaturesWhitelist,\n+    [eval_always] TargetFeaturesWhitelist,\n \n     [] InstanceDefSizeEstimate { instance_def: InstanceDef<'tcx> },\n \n-    [input] Features,\n+    [eval_always] Features,\n \n     [] ForeignModules(CrateNum),\n "}, {"sha": "db81a9d826f8cb59ce651495b9ec2ecf8525716a", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 8, "deletions": 33, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/0b7b454820eff3109604c274d095948660a834dd/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b7b454820eff3109604c274d095948660a834dd/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=0b7b454820eff3109604c274d095948660a834dd", "patch": "@@ -388,10 +388,7 @@ impl DepGraph {\n             |_| None,\n             |data, key, fingerprint, _| {\n                 let mut current = data.borrow_mut();\n-                let krate_idx = current.node_to_node_index[\n-                    &DepNode::new_no_params(DepKind::Krate)\n-                ];\n-                current.alloc_node(key, smallvec![krate_idx], fingerprint)\n+                current.alloc_node(key, smallvec![], fingerprint)\n             },\n             hash_result)\n     }\n@@ -576,7 +573,7 @@ impl DepGraph {\n         tcx: TyCtxt<'_, '_, '_>,\n         dep_node: &DepNode\n     ) -> Option<(SerializedDepNodeIndex, DepNodeIndex)> {\n-        debug_assert!(!dep_node.kind.is_input());\n+        debug_assert!(!dep_node.kind.is_eval_always());\n \n         // Return None if the dep graph is disabled\n         let data = self.data.as_ref()?;\n@@ -620,8 +617,8 @@ impl DepGraph {\n             debug_assert!(data.colors.get(prev_dep_node_index).is_none());\n         }\n \n-        // We never try to mark inputs as green\n-        debug_assert!(!dep_node.kind.is_input());\n+        // We never try to mark eval_always nodes as green\n+        debug_assert!(!dep_node.kind.is_eval_always());\n \n         debug_assert_eq!(data.previous.index_to_node(prev_dep_node_index), *dep_node);\n \n@@ -658,8 +655,8 @@ impl DepGraph {\n                     let dep_dep_node = &data.previous.index_to_node(dep_dep_node_index);\n \n                     // We don't know the state of this dependency. If it isn't\n-                    // an input node, let's try to mark it green recursively.\n-                    if !dep_dep_node.kind.is_input() {\n+                    // an eval_always node, let's try to mark it green recursively.\n+                    if !dep_dep_node.kind.is_eval_always() {\n                          debug!(\"try_mark_previous_green({:?}) --- state of dependency {:?} \\\n                                  is unknown, trying to mark it green\", dep_node,\n                                  dep_dep_node);\n@@ -694,7 +691,7 @@ impl DepGraph {\n                                 }\n                             }\n                             _ => {\n-                                // For other kinds of inputs it's OK to be\n+                                // For other kinds of nodes it's OK to be\n                                 // forced.\n                             }\n                         }\n@@ -1017,33 +1014,11 @@ impl CurrentDepGraph {\n         task_deps: TaskDeps,\n         fingerprint: Fingerprint\n     ) -> DepNodeIndex {\n-        // If this is an input node, we expect that it either has no\n-        // dependencies, or that it just depends on DepKind::CrateMetadata\n-        // or DepKind::Krate. This happens for some \"thin wrapper queries\"\n-        // like `crate_disambiguator` which sometimes have zero deps (for\n-        // when called for LOCAL_CRATE) or they depend on a CrateMetadata\n-        // node.\n-        if cfg!(debug_assertions) {\n-            if node.kind.is_input() && task_deps.reads.len() > 0 &&\n-                // FIXME(mw): Special case for DefSpan until Spans are handled\n-                //            better in general.\n-                node.kind != DepKind::DefSpan &&\n-                task_deps.reads.iter().any(|&i| {\n-                    !(self.data[i].node.kind == DepKind::CrateMetadata ||\n-                        self.data[i].node.kind == DepKind::Krate)\n-                })\n-            {\n-                bug!(\"Input node {:?} with unexpected reads: {:?}\",\n-                    node,\n-                    task_deps.reads.iter().map(|&i| self.data[i].node).collect::<Vec<_>>())\n-            }\n-        }\n-\n         self.alloc_node(node, task_deps.reads, fingerprint)\n     }\n \n     fn complete_anon_task(&mut self, kind: DepKind, task_deps: TaskDeps) -> DepNodeIndex {\n-        debug_assert!(!kind.is_input());\n+        debug_assert!(!kind.is_eval_always());\n \n         let mut fingerprint = self.anon_id_seed;\n         let mut hasher = StableHasher::new();"}, {"sha": "ba5ed12a0c084e9bc941318edf2ec217bc8e5f28", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b7b454820eff3109604c274d095948660a834dd/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b7b454820eff3109604c274d095948660a834dd/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=0b7b454820eff3109604c274d095948660a834dd", "patch": "@@ -153,7 +153,7 @@ impl Forest {\n         &self.krate\n     }\n \n-    /// This is internally in the depedency tracking system.\n+    /// This is used internally in the dependency tracking system.\n     /// Use the `krate` method to ensure your dependency on the\n     /// crate is tracked.\n     pub fn untracked_krate<'hir>(&'hir self) -> &'hir Crate {"}, {"sha": "0a9bcac760301ec5ec2df7ddf4b482a8737ce080", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0b7b454820eff3109604c274d095948660a834dd/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b7b454820eff3109604c274d095948660a834dd/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=0b7b454820eff3109604c274d095948660a834dd", "patch": "@@ -414,7 +414,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             return result;\n         }\n \n-        if !dep_node.kind.is_input() {\n+        if !dep_node.kind.is_eval_always() {\n             // The diagnostics for this query will be\n             // promoted to the current session during\n             // try_mark_green(), so we can ignore them here.\n@@ -601,9 +601,13 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub(super) fn ensure_query<Q: QueryDescription<'gcx>>(self, key: Q::Key) -> () {\n         let dep_node = Q::to_dep_node(self, &key);\n \n-        // Ensuring an \"input\" or anonymous query makes no sense\n+        if dep_node.kind.is_eval_always() {\n+            let _ = self.get_query::<Q>(DUMMY_SP, key);\n+            return;\n+        }\n+\n+        // Ensuring an anonymous query makes no sense\n         assert!(!dep_node.kind.is_anon());\n-        assert!(!dep_node.kind.is_input());\n         if self.dep_graph.try_mark_green_and_read(self, &dep_node).is_none() {\n             // A None return from `try_mark_green_and_read` means that this is either\n             // a new dep node or that the dep node has already been marked red."}]}