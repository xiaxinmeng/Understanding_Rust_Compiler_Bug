{"sha": "40009e07d002bf676b4b32e90a858aed37ea4cc2", "node_id": "C_kwDOAAsO6NoAKDQwMDA5ZTA3ZDAwMmJmNjc2YjRiMzJlOTBhODU4YWVkMzdlYTRjYzI", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-01-07T14:10:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-07T14:10:11Z"}, "message": "Merge #11145\n\n11145: feat: add config to use reasonable default expression instead of todo! when filling missing fields r=Veykril a=bnjjj\n\nUse `Default::default()` in struct fields when we ask to fill it instead of putting `todo!()` for every fields\r\n\r\nbefore:\r\n\r\n```rust\r\npub enum Other {\r\n    One,\r\n    Two,\r\n}\r\n\r\npub struct Test {\r\n    text: String,\r\n    num: usize,\r\n    other: Other,\r\n}\r\n\r\nfn t_test() {\r\n    let test = Test {<|>};\r\n}\r\n``` \r\n\r\nafter: \r\n\r\n```rust\r\npub enum Other {\r\n    One,\r\n    Two,\r\n}\r\n\r\npub struct Test {\r\n    text: String,\r\n    num: usize,\r\n    other: Other,\r\n}\r\n\r\nfn t_test() {\r\n    let test = Test {\r\n        text: String::new(),\r\n        num: 0,\r\n        other: todo!(),\r\n    };\r\n}\r\n``` \r\n\r\n\n\nCo-authored-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>\nCo-authored-by: Coenen Benjamin <benjamin.coenen@hotmail.com>", "tree": {"sha": "03cbb6821b271c292ed6a206c83367d60292be21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03cbb6821b271c292ed6a206c83367d60292be21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40009e07d002bf676b4b32e90a858aed37ea4cc2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh2EnDCRBK7hj4Ov3rIwAA0kcIACNoSdwXSKJNfFAmZumAdx1f\nZNhgOULlUh0G+dkBLTpIuFD3UszKR5qsDoZtBm35fm98EqXRWWGDn7cTpaR9EiRY\n0jvo8nVp8ncNsQAnasLqogV1IwrfzzM78MBSLoMMhRpRu1MDgYdWPqMDPxL3tlnd\nZT8t8pxtpW4FJ9l5/DBl0igAk77scZiLrcAxnvaBKkVLVYhtWv2vU/l4l2b0k6fr\ncOhAyoLIh8ZxxExty3AGoBsQby7N0iDdi4oq4FkFEzai2ZHm8ZlPSshpkOEJDY//\nmG85IAm3WkHoIQwFGpudPxoSokTIspx4PK3B++4FaxKDOAFy0M6w2vobDb/G1XU=\n=V9HK\n-----END PGP SIGNATURE-----\n", "payload": "tree 03cbb6821b271c292ed6a206c83367d60292be21\nparent efb9b89163e4a6080f5d87133028de28cbaf310c\nparent 8e0a05eb70d2a3506e1441fb491c0f8b6ae4ac59\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1641564611 +0000\ncommitter GitHub <noreply@github.com> 1641564611 +0000\n\nMerge #11145\n\n11145: feat: add config to use reasonable default expression instead of todo! when filling missing fields r=Veykril a=bnjjj\n\nUse `Default::default()` in struct fields when we ask to fill it instead of putting `todo!()` for every fields\r\n\r\nbefore:\r\n\r\n```rust\r\npub enum Other {\r\n    One,\r\n    Two,\r\n}\r\n\r\npub struct Test {\r\n    text: String,\r\n    num: usize,\r\n    other: Other,\r\n}\r\n\r\nfn t_test() {\r\n    let test = Test {<|>};\r\n}\r\n``` \r\n\r\nafter: \r\n\r\n```rust\r\npub enum Other {\r\n    One,\r\n    Two,\r\n}\r\n\r\npub struct Test {\r\n    text: String,\r\n    num: usize,\r\n    other: Other,\r\n}\r\n\r\nfn t_test() {\r\n    let test = Test {\r\n        text: String::new(),\r\n        num: 0,\r\n        other: todo!(),\r\n    };\r\n}\r\n``` \r\n\r\n\n\nCo-authored-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>\nCo-authored-by: Coenen Benjamin <benjamin.coenen@hotmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40009e07d002bf676b4b32e90a858aed37ea4cc2", "html_url": "https://github.com/rust-lang/rust/commit/40009e07d002bf676b4b32e90a858aed37ea4cc2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40009e07d002bf676b4b32e90a858aed37ea4cc2/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efb9b89163e4a6080f5d87133028de28cbaf310c", "url": "https://api.github.com/repos/rust-lang/rust/commits/efb9b89163e4a6080f5d87133028de28cbaf310c", "html_url": "https://github.com/rust-lang/rust/commit/efb9b89163e4a6080f5d87133028de28cbaf310c"}, {"sha": "8e0a05eb70d2a3506e1441fb491c0f8b6ae4ac59", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e0a05eb70d2a3506e1441fb491c0f8b6ae4ac59", "html_url": "https://github.com/rust-lang/rust/commit/8e0a05eb70d2a3506e1441fb491c0f8b6ae4ac59"}], "stats": {"total": 296, "additions": 271, "deletions": 25}, "files": [{"sha": "3b28b14668ec264e1a0953213c1fec8e5de37e8d", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/40009e07d002bf676b4b32e90a858aed37ea4cc2/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40009e07d002bf676b4b32e90a858aed37ea4cc2/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=40009e07d002bf676b4b32e90a858aed37ea4cc2", "patch": "@@ -1689,6 +1689,26 @@ impl BuiltinType {\n     pub fn name(self) -> Name {\n         self.inner.as_name()\n     }\n+\n+    pub fn is_int(&self) -> bool {\n+        matches!(self.inner, hir_def::builtin_type::BuiltinType::Int(_))\n+    }\n+\n+    pub fn is_uint(&self) -> bool {\n+        matches!(self.inner, hir_def::builtin_type::BuiltinType::Uint(_))\n+    }\n+\n+    pub fn is_float(&self) -> bool {\n+        matches!(self.inner, hir_def::builtin_type::BuiltinType::Float(_))\n+    }\n+\n+    pub fn is_char(&self) -> bool {\n+        matches!(self.inner, hir_def::builtin_type::BuiltinType::Char)\n+    }\n+\n+    pub fn is_str(&self) -> bool {\n+        matches!(self.inner, hir_def::builtin_type::BuiltinType::Str)\n+    }\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n@@ -2615,6 +2635,10 @@ impl Type {\n         matches!(&self.ty.kind(Interner), TyKind::FnDef(..) | TyKind::Function { .. })\n     }\n \n+    pub fn is_array(&self) -> bool {\n+        matches!(&self.ty.kind(Interner), TyKind::Array(..))\n+    }\n+\n     pub fn is_packed(&self, db: &dyn HirDatabase) -> bool {\n         let adt_id = match *self.ty.kind(Interner) {\n             TyKind::Adt(hir_ty::AdtId(adt_id), ..) => adt_id,\n@@ -2713,7 +2737,7 @@ impl Type {\n     // This would be nicer if it just returned an iterator, but that runs into\n     // lifetime problems, because we need to borrow temp `CrateImplDefs`.\n     pub fn iterate_assoc_items<T>(\n-        self,\n+        &self,\n         db: &dyn HirDatabase,\n         krate: Crate,\n         mut callback: impl FnMut(AssocItem) -> Option<T>,\n@@ -2727,7 +2751,7 @@ impl Type {\n     }\n \n     fn iterate_assoc_items_dyn(\n-        self,\n+        &self,\n         db: &dyn HirDatabase,\n         krate: Crate,\n         callback: &mut dyn FnMut(AssocItemId) -> bool,\n@@ -2769,6 +2793,7 @@ impl Type {\n     ) -> Option<T> {\n         let _p = profile::span(\"iterate_method_candidates\");\n         let mut slot = None;\n+\n         self.iterate_method_candidates_dyn(\n             db,\n             krate,"}, {"sha": "3636ab62131bbebb04fc1a98b6ca39866017e5be", "filename": "crates/hir_expand/src/name.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/40009e07d002bf676b4b32e90a858aed37ea4cc2/crates%2Fhir_expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40009e07d002bf676b4b32e90a858aed37ea4cc2/crates%2Fhir_expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fname.rs?ref=40009e07d002bf676b4b32e90a858aed37ea4cc2", "patch": "@@ -226,6 +226,7 @@ pub mod known {\n         iter_mut,\n         len,\n         is_empty,\n+        new,\n         // Builtin macros\n         asm,\n         assert,"}, {"sha": "1a451ae79f513cf77e6f2679bfd3fdf0ada6e47d", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/40009e07d002bf676b4b32e90a858aed37ea4cc2/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40009e07d002bf676b4b32e90a858aed37ea4cc2/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=40009e07d002bf676b4b32e90a858aed37ea4cc2", "patch": "@@ -542,6 +542,7 @@ pub fn iterate_method_candidates_dyn(\n \n             let deref_chain = autoderef_method_receiver(db, krate, ty);\n             let mut deref_chains = stdx::slice_tails(&deref_chain);\n+\n             deref_chains.try_for_each(|deref_chain| {\n                 iterate_method_candidates_with_autoref(\n                     deref_chain,"}, {"sha": "b8482d0222b4ae20816c305b155c1e00605d2406", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40009e07d002bf676b4b32e90a858aed37ea4cc2/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40009e07d002bf676b4b32e90a858aed37ea4cc2/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=40009e07d002bf676b4b32e90a858aed37ea4cc2", "patch": "@@ -118,7 +118,7 @@ pub use ide_db::{\n     symbol_index::Query,\n     RootDatabase, SymbolKind,\n };\n-pub use ide_diagnostics::{Diagnostic, DiagnosticsConfig, Severity};\n+pub use ide_diagnostics::{Diagnostic, DiagnosticsConfig, ExprFillDefaultMode, Severity};\n pub use ide_ssr::SsrError;\n pub use syntax::{TextRange, TextSize};\n pub use text_edit::{Indel, TextEdit};"}, {"sha": "186bfc3d5846cd8c5a1ca1f70d1ed0ebcc7df834", "filename": "crates/ide_diagnostics/src/handlers/missing_fields.rs", "status": "modified", "additions": 157, "deletions": 11, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/40009e07d002bf676b4b32e90a858aed37ea4cc2/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40009e07d002bf676b4b32e90a858aed37ea4cc2/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs?ref=40009e07d002bf676b4b32e90a858aed37ea4cc2", "patch": "@@ -1,9 +1,16 @@\n use either::Either;\n-use hir::{db::AstDatabase, InFile};\n-use ide_db::{assists::Assist, source_change::SourceChange};\n+use hir::{\n+    db::{AstDatabase, HirDatabase},\n+    known, AssocItem, HirDisplay, InFile, Type,\n+};\n+use ide_db::{assists::Assist, helpers::FamousDefs, source_change::SourceChange};\n use rustc_hash::FxHashMap;\n use stdx::format_to;\n-use syntax::{algo, ast::make, AstNode, SyntaxNodePtr};\n+use syntax::{\n+    algo,\n+    ast::{self, make},\n+    AstNode, SyntaxNodePtr,\n+};\n use text_edit::TextEdit;\n \n use crate::{fix, Diagnostic, DiagnosticsContext};\n@@ -63,17 +70,29 @@ fn fixes(ctx: &DiagnosticsContext<'_>, d: &hir::MissingFields) -> Option<Vec<Ass\n         }\n     });\n     let missing_fields = ctx.sema.record_literal_missing_fields(&field_list_parent);\n+\n+    let generate_fill_expr = |ty: &Type| match ctx.config.expr_fill_default {\n+        crate::ExprFillDefaultMode::Todo => Some(make::ext::expr_todo()),\n+        crate::ExprFillDefaultMode::Default => {\n+            let default_constr = get_default_constructor(ctx, d, ty);\n+            match default_constr {\n+                Some(default_constr) => Some(default_constr),\n+                _ => Some(make::ext::expr_todo()),\n+            }\n+        }\n+    };\n+\n     for (f, ty) in missing_fields.iter() {\n         let field_expr = if let Some(local_candidate) = locals.get(&f.name(ctx.sema.db)) {\n             cov_mark::hit!(field_shorthand);\n             let candidate_ty = local_candidate.ty(ctx.sema.db);\n             if ty.could_unify_with(ctx.sema.db, &candidate_ty) {\n                 None\n             } else {\n-                Some(make::ext::expr_todo())\n+                generate_fill_expr(ty)\n             }\n         } else {\n-            Some(make::ext::expr_todo())\n+            generate_fill_expr(ty)\n         };\n         let field =\n             make::record_expr_field(make::name_ref(&f.name(ctx.sema.db).to_smol_str()), field_expr)\n@@ -102,6 +121,68 @@ fn fixes(ctx: &DiagnosticsContext<'_>, d: &hir::MissingFields) -> Option<Vec<Ass\n     )])\n }\n \n+fn make_ty(ty: &hir::Type, db: &dyn HirDatabase, module: hir::Module) -> ast::Type {\n+    let ty_str = match ty.as_adt() {\n+        Some(adt) => adt.name(db).to_string(),\n+        None => ty.display_source_code(db, module.into()).ok().unwrap_or_else(|| \"_\".to_string()),\n+    };\n+\n+    make::ty(&ty_str)\n+}\n+\n+fn get_default_constructor(\n+    ctx: &DiagnosticsContext<'_>,\n+    d: &hir::MissingFields,\n+    ty: &Type,\n+) -> Option<ast::Expr> {\n+    if let Some(builtin_ty) = ty.as_builtin() {\n+        if builtin_ty.is_int() || builtin_ty.is_uint() {\n+            return Some(make::ext::zero_number());\n+        }\n+        if builtin_ty.is_float() {\n+            return Some(make::ext::zero_float());\n+        }\n+        if builtin_ty.is_char() {\n+            return Some(make::ext::empty_char());\n+        }\n+        if builtin_ty.is_str() {\n+            return Some(make::ext::empty_str());\n+        }\n+    }\n+\n+    let krate = ctx.sema.to_module_def(d.file.original_file(ctx.sema.db))?.krate();\n+    let module = krate.root_module(ctx.sema.db);\n+\n+    // Look for a ::new() associated function\n+    let has_new_func = ty\n+        .iterate_assoc_items(ctx.sema.db, krate, |assoc_item| {\n+            if let AssocItem::Function(func) = assoc_item {\n+                if func.name(ctx.sema.db) == known::new\n+                    && func.assoc_fn_params(ctx.sema.db).is_empty()\n+                {\n+                    return Some(());\n+                }\n+            }\n+\n+            None\n+        })\n+        .is_some();\n+\n+    if has_new_func {\n+        Some(make::ext::expr_ty_new(&make_ty(ty, ctx.sema.db, module)))\n+    } else if !ty.is_array()\n+        && ty.impls_trait(\n+            ctx.sema.db,\n+            FamousDefs(&ctx.sema, Some(krate)).core_default_Default()?,\n+            &[],\n+        )\n+    {\n+        Some(make::ext::expr_ty_default(&make_ty(ty, ctx.sema.db, module)))\n+    } else {\n+        None\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use crate::tests::{check_diagnostics, check_fix};\n@@ -182,7 +263,7 @@ fn here() {}\n macro_rules! id { ($($tt:tt)*) => { $($tt)*}; }\n \n fn main() {\n-    let _x = id![Foo {a:42, b: todo!() }];\n+    let _x = id![Foo {a:42, b: 0 }];\n }\n \n pub struct Foo { pub a: i32, pub b: i32 }\n@@ -204,7 +285,7 @@ fn test_fn() {\n struct TestStruct { one: i32, two: i64 }\n \n fn test_fn() {\n-    let s = TestStruct { one: todo!(), two: todo!() };\n+    let s = TestStruct { one: 0, two: 0 };\n }\n \"#,\n         );\n@@ -224,7 +305,7 @@ impl TestStruct {\n struct TestStruct { one: i32 }\n \n impl TestStruct {\n-    fn test_fn() { let s = Self { one: todo!() }; }\n+    fn test_fn() { let s = Self { one: 0 }; }\n }\n \"#,\n         );\n@@ -272,7 +353,72 @@ fn test_fn() {\n struct TestStruct { one: i32, two: i64 }\n \n fn test_fn() {\n-    let s = TestStruct{ two: 2, one: todo!() };\n+    let s = TestStruct{ two: 2, one: 0 };\n+}\n+\",\n+        );\n+    }\n+\n+    #[test]\n+    fn test_fill_struct_fields_new() {\n+        check_fix(\n+            r#\"\n+struct TestWithNew(usize);\n+impl TestWithNew {\n+    pub fn new() -> Self {\n+        Self(0)\n+    }\n+}\n+struct TestStruct { one: i32, two: TestWithNew }\n+\n+fn test_fn() {\n+    let s = TestStruct{ $0 };\n+}\n+\"#,\n+            r\"\n+struct TestWithNew(usize);\n+impl TestWithNew {\n+    pub fn new() -> Self {\n+        Self(0)\n+    }\n+}\n+struct TestStruct { one: i32, two: TestWithNew }\n+\n+fn test_fn() {\n+    let s = TestStruct{ one: 0, two: TestWithNew::new()  };\n+}\n+\",\n+        );\n+    }\n+\n+    #[test]\n+    fn test_fill_struct_fields_default() {\n+        check_fix(\n+            r#\"\n+//- minicore: default\n+struct TestWithDefault(usize);\n+impl Default for TestWithDefault {\n+    pub fn default() -> Self {\n+        Self(0)\n+    }\n+}\n+struct TestStruct { one: i32, two: TestWithDefault }\n+\n+fn test_fn() {\n+    let s = TestStruct{ $0 };\n+}\n+\"#,\n+            r\"\n+struct TestWithDefault(usize);\n+impl Default for TestWithDefault {\n+    pub fn default() -> Self {\n+        Self(0)\n+    }\n+}\n+struct TestStruct { one: i32, two: TestWithDefault }\n+\n+fn test_fn() {\n+    let s = TestStruct{ one: 0, two: TestWithDefault::default()  };\n }\n \",\n         );\n@@ -292,7 +438,7 @@ fn test_fn() {\n struct TestStruct { r#type: u8 }\n \n fn test_fn() {\n-    TestStruct { r#type: todo!()  };\n+    TestStruct { r#type: 0  };\n }\n \",\n         );\n@@ -403,7 +549,7 @@ fn f() {\n     let b = 1usize;\n     S {\n         a,\n-        b: todo!(),\n+        b: 0,\n     };\n }\n \"#,"}, {"sha": "86d76751ad6c659f186dab8f473c7da5e7bd51b0", "filename": "crates/ide_diagnostics/src/lib.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/40009e07d002bf676b4b32e90a858aed37ea4cc2/crates%2Fide_diagnostics%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40009e07d002bf676b4b32e90a858aed37ea4cc2/crates%2Fide_diagnostics%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Flib.rs?ref=40009e07d002bf676b4b32e90a858aed37ea4cc2", "patch": "@@ -129,10 +129,22 @@ pub enum Severity {\n     WeakWarning,\n }\n \n+#[derive(Clone, Debug, PartialEq, Eq)]\n+pub enum ExprFillDefaultMode {\n+    Todo,\n+    Default,\n+}\n+impl Default for ExprFillDefaultMode {\n+    fn default() -> Self {\n+        Self::Todo\n+    }\n+}\n+\n #[derive(Default, Debug, Clone)]\n pub struct DiagnosticsConfig {\n     pub disable_experimental: bool,\n     pub disabled: FxHashSet<String>,\n+    pub expr_fill_default: ExprFillDefaultMode,\n }\n \n struct DiagnosticsContext<'a> {"}, {"sha": "7d06e9d36fffeb6dfb1b94506ce152dee1a9e1f1", "filename": "crates/ide_diagnostics/src/tests.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/40009e07d002bf676b4b32e90a858aed37ea4cc2/crates%2Fide_diagnostics%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40009e07d002bf676b4b32e90a858aed37ea4cc2/crates%2Fide_diagnostics%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Ftests.rs?ref=40009e07d002bf676b4b32e90a858aed37ea4cc2", "patch": "@@ -9,7 +9,7 @@ use ide_db::{\n use stdx::trim_indent;\n use test_utils::{assert_eq_text, extract_annotations};\n \n-use crate::{DiagnosticsConfig, Severity};\n+use crate::{DiagnosticsConfig, ExprFillDefaultMode, Severity};\n \n /// Takes a multi-file input fixture with annotated cursor positions,\n /// and checks that:\n@@ -36,14 +36,12 @@ fn check_nth_fix(nth: usize, ra_fixture_before: &str, ra_fixture_after: &str) {\n     let after = trim_indent(ra_fixture_after);\n \n     let (db, file_position) = RootDatabase::with_position(ra_fixture_before);\n-    let diagnostic = super::diagnostics(\n-        &db,\n-        &DiagnosticsConfig::default(),\n-        &AssistResolveStrategy::All,\n-        file_position.file_id,\n-    )\n-    .pop()\n-    .expect(\"no diagnostics\");\n+    let mut conf = DiagnosticsConfig::default();\n+    conf.expr_fill_default = ExprFillDefaultMode::Default;\n+    let diagnostic =\n+        super::diagnostics(&db, &conf, &AssistResolveStrategy::All, file_position.file_id)\n+            .pop()\n+            .expect(\"no diagnostics\");\n     let fix = &diagnostic.fixes.expect(\"diagnostic misses fixes\")[nth];\n     let actual = {\n         let source_change = fix.source_change.as_ref().unwrap();"}, {"sha": "88d86ef503895bd36707793b9f946c71dab05a0e", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/40009e07d002bf676b4b32e90a858aed37ea4cc2/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40009e07d002bf676b4b32e90a858aed37ea4cc2/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=40009e07d002bf676b4b32e90a858aed37ea4cc2", "patch": "@@ -11,8 +11,8 @@ use std::{ffi::OsString, iter, path::PathBuf};\n \n use flycheck::FlycheckConfig;\n use ide::{\n-    AssistConfig, CompletionConfig, DiagnosticsConfig, HighlightRelatedConfig, HoverConfig,\n-    HoverDocFormat, InlayHintsConfig, JoinLinesConfig, Snippet, SnippetScope,\n+    AssistConfig, CompletionConfig, DiagnosticsConfig, ExprFillDefaultMode, HighlightRelatedConfig,\n+    HoverConfig, HoverDocFormat, InlayHintsConfig, JoinLinesConfig, Snippet, SnippetScope,\n };\n use ide_db::helpers::{\n     insert_use::{ImportGranularity, InsertUseConfig, PrefixKind},\n@@ -45,6 +45,8 @@ use crate::{\n // parsing the old name.\n config_data! {\n     struct ConfigData {\n+        /// Placeholder for missing expressions in assists.\n+        assist_exprFillDefault: ExprFillDefaultDef              = \"\\\"todo\\\"\",\n         /// How imports should be grouped into use statements.\n         assist_importGranularity |\n         assist_importMergeBehavior |\n@@ -708,6 +710,10 @@ impl Config {\n         DiagnosticsConfig {\n             disable_experimental: !self.data.diagnostics_enableExperimental,\n             disabled: self.data.diagnostics_disabled.clone(),\n+            expr_fill_default: match self.data.assist_exprFillDefault {\n+                ExprFillDefaultDef::Todo => ExprFillDefaultMode::Todo,\n+                ExprFillDefaultDef::Default => ExprFillDefaultMode::Default,\n+            },\n         }\n     }\n     pub fn diagnostics_map(&self) -> DiagnosticsMapConfig {\n@@ -1079,6 +1085,15 @@ enum ManifestOrProjectJson {\n     ProjectJson(ProjectJsonData),\n }\n \n+#[derive(Deserialize, Debug, Clone)]\n+#[serde(rename_all = \"snake_case\")]\n+pub enum ExprFillDefaultDef {\n+    #[serde(alias = \"todo\")]\n+    Todo,\n+    #[serde(alias = \"default\")]\n+    Default,\n+}\n+\n #[derive(Deserialize, Debug, Clone)]\n #[serde(rename_all = \"snake_case\")]\n enum ImportGranularityDef {\n@@ -1285,6 +1300,14 @@ fn field_props(field: &str, ty: &str, doc: &[&str], default: &str) -> serde_json\n                 \"Merge imports from the same module into a single `use` statement.\"\n             ],\n         },\n+        \"ExprFillDefaultDef\" => set! {\n+            \"type\": \"string\",\n+            \"enum\": [\"todo\", \"default\"],\n+            \"enumDescriptions\": [\n+                \"Fill missing expressions with the `todo` macro\",\n+                \"Fill missing expressions with reasonable defaults, `new` or `default` constructors.\"\n+            ],\n+        },\n         \"ImportGranularityDef\" => set! {\n             \"type\": \"string\",\n             \"enum\": [\"preserve\", \"crate\", \"module\", \"item\"],"}, {"sha": "357502097544b5e7bd6b47fba4ff51d6fc4372b8", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/40009e07d002bf676b4b32e90a858aed37ea4cc2/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40009e07d002bf676b4b32e90a858aed37ea4cc2/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=40009e07d002bf676b4b32e90a858aed37ea4cc2", "patch": "@@ -59,6 +59,28 @@ pub mod ext {\n     pub fn expr_todo() -> ast::Expr {\n         expr_from_text(\"todo!()\")\n     }\n+    pub fn expr_ty_default(ty: &ast::Type) -> ast::Expr {\n+        expr_from_text(&format!(\"{}::default()\", ty))\n+    }\n+    pub fn expr_ty_new(ty: &ast::Type) -> ast::Expr {\n+        expr_from_text(&format!(\"{}::new()\", ty))\n+    }\n+\n+    pub fn zero_number() -> ast::Expr {\n+        expr_from_text(\"0\")\n+    }\n+    pub fn zero_float() -> ast::Expr {\n+        expr_from_text(\"0.0\")\n+    }\n+    pub fn empty_str() -> ast::Expr {\n+        expr_from_text(r#\"\"\"\"#)\n+    }\n+    pub fn empty_char() -> ast::Expr {\n+        expr_from_text(\"'\\x00'\")\n+    }\n+    pub fn default_bool() -> ast::Expr {\n+        expr_from_text(\"false\")\n+    }\n     pub fn empty_block_expr() -> ast::BlockExpr {\n         block_expr(None, None)\n     }"}, {"sha": "88dcacfe8333f538e3c69885be1cd79a90216bc7", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/40009e07d002bf676b4b32e90a858aed37ea4cc2/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/40009e07d002bf676b4b32e90a858aed37ea4cc2/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=40009e07d002bf676b4b32e90a858aed37ea4cc2", "patch": "@@ -1,3 +1,8 @@\n+[[rust-analyzer.assist.exprFillDefault]]rust-analyzer.assist.exprFillDefault (default: `\"todo\"`)::\n++\n+--\n+Placeholder for missing expressions in assists.\n+--\n [[rust-analyzer.assist.importGranularity]]rust-analyzer.assist.importGranularity (default: `\"crate\"`)::\n +\n --"}, {"sha": "2c7d6c3773ebf4b2abe227551199a9a063916fa7", "filename": "editors/code/package.json", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/40009e07d002bf676b4b32e90a858aed37ea4cc2/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/40009e07d002bf676b4b32e90a858aed37ea4cc2/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=40009e07d002bf676b4b32e90a858aed37ea4cc2", "patch": "@@ -378,6 +378,19 @@\n                     \"markdownDescription\": \"Optional settings passed to the debug engine. Example: `{ \\\"lldb\\\": { \\\"terminal\\\":\\\"external\\\"} }`\"\n                 },\n                 \"$generated-start\": {},\n+                \"rust-analyzer.assist.exprFillDefault\": {\n+                    \"markdownDescription\": \"Placeholder for missing expressions in assists.\",\n+                    \"default\": \"todo\",\n+                    \"type\": \"string\",\n+                    \"enum\": [\n+                        \"todo\",\n+                        \"default\"\n+                    ],\n+                    \"enumDescriptions\": [\n+                        \"Fill missing expressions with the `todo` macro\",\n+                        \"Fill missing expressions with reasonable defaults, `new` or `default` constructors.\"\n+                    ]\n+                },\n                 \"rust-analyzer.assist.importGranularity\": {\n                     \"markdownDescription\": \"How imports should be grouped into use statements.\",\n                     \"default\": \"crate\","}]}