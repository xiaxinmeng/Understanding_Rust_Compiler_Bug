{"sha": "5193d542f61cd6723d053dff5782d9038a027a7b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxOTNkNTQyZjYxY2Q2NzIzZDA1M2RmZjU3ODJkOTAzOGEwMjdhN2I=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-12-15T04:03:00Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-12-20T05:49:37Z"}, "message": "Fix the fallout of removing feature(import_shadowing).", "tree": {"sha": "9f95708e9ba136e9676216f94f2a56d4cc6629e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f95708e9ba136e9676216f94f2a56d4cc6629e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5193d542f61cd6723d053dff5782d9038a027a7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5193d542f61cd6723d053dff5782d9038a027a7b", "html_url": "https://github.com/rust-lang/rust/commit/5193d542f61cd6723d053dff5782d9038a027a7b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5193d542f61cd6723d053dff5782d9038a027a7b/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5267d584563d5ae5e4428bcaa7fa0a04dc4c57a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5267d584563d5ae5e4428bcaa7fa0a04dc4c57a", "html_url": "https://github.com/rust-lang/rust/commit/d5267d584563d5ae5e4428bcaa7fa0a04dc4c57a"}], "stats": {"total": 106, "additions": 41, "deletions": 65}, "files": [{"sha": "a783d8e63390bc9b53e48e90e703d72fcb6ffaa4", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5193d542f61cd6723d053dff5782d9038a027a7b/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5193d542f61cd6723d053dff5782d9038a027a7b/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=5193d542f61cd6723d053dff5782d9038a027a7b", "patch": "@@ -54,7 +54,6 @@ use core::default::Default;\n use core::fmt;\n use core::hash::{mod, Hash};\n use core::kinds::marker::{ContravariantLifetime, InvariantType};\n-use core::kinds::Sized;\n use core::mem;\n use core::num::{Int, UnsignedInt};\n use core::ops;"}, {"sha": "75b7c917ced58d902ee19dd3dfbcf1dd792cd557", "filename": "src/libcollections/vec_map.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5193d542f61cd6723d053dff5782d9038a027a7b/src%2Flibcollections%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5193d542f61cd6723d053dff5782d9038a027a7b/src%2Flibcollections%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_map.rs?ref=5193d542f61cd6723d053dff5782d9038a027a7b", "patch": "@@ -21,7 +21,6 @@ use core::hash::{Hash, Writer};\n use core::iter;\n use core::iter::{Enumerate, FilterMap, Map};\n use core::mem::replace;\n-use core::ops::FnOnce;\n \n use {vec, slice};\n use vec::Vec;"}, {"sha": "2dc0d87c5469bd7c0fd8fc7a1298e04a426bc2b6", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5193d542f61cd6723d053dff5782d9038a027a7b/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5193d542f61cd6723d053dff5782d9038a027a7b/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=5193d542f61cd6723d053dff5782d9038a027a7b", "patch": "@@ -22,7 +22,7 @@ use middle::expr_use_visitor as euv;\n use middle::mem_categorization::cmt;\n use middle::pat_util::*;\n use middle::ty::*;\n-use middle::ty::{mod, Ty};\n+use middle::ty;\n use std::fmt;\n use std::iter::AdditiveIterator;\n use std::iter::range_inclusive;"}, {"sha": "5d2faa52f1ad0f288b33031a1a8039decaf2df24", "filename": "src/librustc_borrowck/borrowck/move_data.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5193d542f61cd6723d053dff5782d9038a027a7b/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5193d542f61cd6723d053dff5782d9038a027a7b/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs?ref=5193d542f61cd6723d053dff5782d9038a027a7b", "patch": "@@ -14,8 +14,6 @@\n pub use self::MoveKind::*;\n \n use borrowck::*;\n-use borrowck::LoanPathKind::{LpVar, LpUpvar, LpDowncast, LpExtend};\n-use borrowck::LoanPathElem::{LpInterior};\n use rustc::middle::cfg;\n use rustc::middle::dataflow::DataFlowContext;\n use rustc::middle::dataflow::BitwiseOperator;"}, {"sha": "1a753901f7ea4ca01133168aa7dd0168fe9bd71e", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5193d542f61cd6723d053dff5782d9038a027a7b/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5193d542f61cd6723d053dff5782d9038a027a7b/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=5193d542f61cd6723d053dff5782d9038a027a7b", "patch": "@@ -487,7 +487,7 @@ pub fn trans_fn_ref_with_substs<'blk, 'tcx>(\n \n         let opt_ref_id = match node {\n             ExprId(id) => if id != 0 { Some(id) } else { None },\n-            MethodCall(_) => None,\n+            MethodCallKey(_) => None,\n         };\n \n         let (val, must_cast) =\n@@ -498,7 +498,7 @@ pub fn trans_fn_ref_with_substs<'blk, 'tcx>(\n             // are subst'd)\n             let ref_ty = match node {\n                 ExprId(id) => node_id_type(bcx, id),\n-                MethodCall(method_call) => {\n+                MethodCallKey(method_call) => {\n                     let t = (*bcx.tcx().method_map.borrow())[method_call].ty;\n                     monomorphize_type(bcx, t)\n                 }"}, {"sha": "09a4bdcefc54a97f240fb1a00703b56a8f50197f", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5193d542f61cd6723d053dff5782d9038a027a7b/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5193d542f61cd6723d053dff5782d9038a027a7b/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=5193d542f61cd6723d053dff5782d9038a027a7b", "patch": "@@ -867,7 +867,7 @@ pub enum ExprOrMethodCall {\n     ExprId(ast::NodeId),\n \n     // Type parameters for a method call like `a.foo::<int>()`\n-    MethodCall(ty::MethodCall)\n+    MethodCallKey(ty::MethodCall)\n }\n \n pub fn node_id_substs<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n@@ -879,7 +879,7 @@ pub fn node_id_substs<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         ExprId(id) => {\n             ty::node_id_item_substs(tcx, id).substs\n         }\n-        MethodCall(method_call) => {\n+        MethodCallKey(method_call) => {\n             (*tcx.method_map.borrow())[method_call].substs.clone()\n         }\n     };"}, {"sha": "211f8a1f4208fc663d81c8c76cf22b987c693eaf", "filename": "src/librustc_trans/trans/controlflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5193d542f61cd6723d053dff5782d9038a027a7b/src%2Flibrustc_trans%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5193d542f61cd6723d053dff5782d9038a027a7b/src%2Flibrustc_trans%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcontrolflow.rs?ref=5193d542f61cd6723d053dff5782d9038a027a7b", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use llvm::*;\n+use llvm::ValueRef;\n use middle::def;\n use middle::lang_items::{PanicFnLangItem, PanicBoundsCheckFnLangItem};\n use trans::_match;"}, {"sha": "15f6d7bc3f42d7d11b7ffe7b5b24cd9dc4480886", "filename": "src/librustc_trans/trans/meth.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5193d542f61cd6723d053dff5782d9038a027a7b/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5193d542f61cd6723d053dff5782d9038a027a7b/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=5193d542f61cd6723d053dff5782d9038a027a7b", "patch": "@@ -124,7 +124,7 @@ pub fn trans_method_callee<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                 bcx: bcx,\n                 data: Fn(callee::trans_fn_ref(bcx,\n                                               did,\n-                                              MethodCall(method_call))),\n+                                              MethodCallKey(method_call))),\n             }\n         }\n \n@@ -344,12 +344,12 @@ fn trans_monomorphized_callee<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             // those from the impl and those from the method:\n             let callee_substs =\n                 combine_impl_and_methods_tps(\n-                    bcx, MethodCall(method_call), vtable_impl.substs);\n+                    bcx, MethodCallKey(method_call), vtable_impl.substs);\n \n             // translate the function\n             let llfn = trans_fn_ref_with_substs(bcx,\n                                                 mth_id,\n-                                                MethodCall(method_call),\n+                                                MethodCallKey(method_call),\n                                                 callee_substs);\n \n             Callee { bcx: bcx, data: Fn(llfn) }\n@@ -359,7 +359,7 @@ fn trans_monomorphized_callee<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             // after passing through fulfill_obligation\n             let llfn = trans_fn_ref_with_substs(bcx,\n                                                 closure_def_id,\n-                                                MethodCall(method_call),\n+                                                MethodCallKey(method_call),\n                                                 substs);\n \n             Callee {"}, {"sha": "e520c70824e16c089da0053ea2a03ae5c9889bc3", "filename": "src/libstd/dynamic_lib.rs", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5193d542f61cd6723d053dff5782d9038a027a7b/src%2Flibstd%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5193d542f61cd6723d053dff5782d9038a027a7b/src%2Flibstd%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdynamic_lib.rs?ref=5193d542f61cd6723d053dff5782d9038a027a7b", "patch": "@@ -15,21 +15,10 @@\n #![experimental]\n #![allow(missing_docs)]\n \n-use clone::Clone;\n-use c_str::ToCStr;\n-use iter::IteratorExt;\n+use prelude::*;\n use mem;\n-use ops::*;\n-use option::*;\n-use option::Option::{None, Some};\n use os;\n-use path::{Path,GenericPath};\n-use result::*;\n-use result::Result::{Err, Ok};\n-use slice::{AsSlice,SliceExt};\n use str;\n-use string::String;\n-use vec::Vec;\n \n #[allow(missing_copy_implementations)]\n pub struct DynamicLibrary {\n@@ -213,13 +202,10 @@ mod test {\n pub mod dl {\n     pub use self::Rtld::*;\n \n-    use c_str::{CString, ToCStr};\n+    use prelude::*;\n+    use c_str::CString;\n     use libc;\n-    use ops::FnOnce;\n     use ptr;\n-    use result::*;\n-    use result::Result::{Err, Ok};\n-    use string::String;\n \n     pub unsafe fn open_external<T: ToCStr>(filename: T) -> *mut u8 {\n         filename.with_c_str(|raw_name| {"}, {"sha": "77500ca74d092c628296e8f07557b241028adc73", "filename": "src/libstd/rt/util.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5193d542f61cd6723d053dff5782d9038a027a7b/src%2Flibstd%2Frt%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5193d542f61cd6723d053dff5782d9038a027a7b/src%2Flibstd%2Frt%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Futil.rs?ref=5193d542f61cd6723d053dff5782d9038a027a7b", "patch": "@@ -20,7 +20,6 @@ use core::str;\n \n use libc::{mod, uintptr_t};\n use os;\n-use str::{FromStr, from_str, Str};\n use sync::atomic;\n \n /// Dynamically inquire about whether we're running under V.\n@@ -66,7 +65,7 @@ pub fn min_stack() -> uint {\n pub fn default_sched_threads() -> uint {\n     match os::getenv(\"RUST_THREADS\") {\n         Some(nstr) => {\n-            let opt_n: Option<uint> = FromStr::from_str(nstr.as_slice());\n+            let opt_n: Option<uint> = from_str(nstr.as_slice());\n             match opt_n {\n                 Some(n) if n > 0 => n,\n                 _ => panic!(\"`RUST_THREADS` is `{}`, should be a positive integer\", nstr)"}, {"sha": "1a8a92a105a777d9e055be230611c31146d48b59", "filename": "src/libstd/sys/common/mutex.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5193d542f61cd6723d053dff5782d9038a027a7b/src%2Flibstd%2Fsys%2Fcommon%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5193d542f61cd6723d053dff5782d9038a027a7b/src%2Flibstd%2Fsys%2Fcommon%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fmutex.rs?ref=5193d542f61cd6723d053dff5782d9038a027a7b", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub use sys::mutex::raw;\n-\n use sys::mutex as imp;\n \n /// An OS-based mutual exclusion lock."}, {"sha": "98d860f964649bed70b2ec478abd401e0b3c0f0c", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5193d542f61cd6723d053dff5782d9038a027a7b/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5193d542f61cd6723d053dff5782d9038a027a7b/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=5193d542f61cd6723d053dff5782d9038a027a7b", "patch": "@@ -18,14 +18,11 @@ use io;\n use prelude::*;\n \n use io::{FilePermission, Write, UnstableFileStat, Open, FileAccess, FileMode};\n-use io::{IoResult, FileStat, SeekStyle, Reader};\n+use io::{IoResult, FileStat, SeekStyle};\n use io::{Read, Truncate, SeekCur, SeekSet, ReadWrite, SeekEnd, Append};\n-use result::Result::{Ok, Err};\n use sys::retry;\n use sys_common::{keep_going, eof, mkerr_libc};\n \n-pub use path::PosixPath as Path;\n-\n pub type fd_t = libc::c_int;\n \n pub struct FileDesc {"}, {"sha": "6c909d7562d9aa213f1e50cb57bd468f69cfab74", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5193d542f61cd6723d053dff5782d9038a027a7b/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5193d542f61cd6723d053dff5782d9038a027a7b/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=5193d542f61cd6723d053dff5782d9038a027a7b", "patch": "@@ -16,8 +16,8 @@ use error::{FromError, Error};\n use fmt;\n use io::{IoError, IoResult};\n use libc::{mod, c_int, c_char, c_void};\n-use path::{Path, GenericPath, BytesContainer};\n-use ptr::{mod, RawPtr};\n+use path::BytesContainer;\n+use ptr;\n use sync::atomic::{AtomicInt, INIT_ATOMIC_INT, SeqCst};\n use sys::fs::FileDesc;\n use os;"}, {"sha": "dacd754582ba77f64546c16ce7d5f422454bd456", "filename": "src/libstd/sys/unix/tcp.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5193d542f61cd6723d053dff5782d9038a027a7b/src%2Flibstd%2Fsys%2Funix%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5193d542f61cd6723d053dff5782d9038a027a7b/src%2Flibstd%2Fsys%2Funix%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ftcp.rs?ref=5193d542f61cd6723d053dff5782d9038a027a7b", "patch": "@@ -20,7 +20,7 @@ use sys::fs::FileDesc;\n use sys::{set_nonblocking, wouldblock};\n use sys;\n use sys_common;\n-use sys_common::net::*;\n+use sys_common::net;\n \n pub use sys_common::net::TcpStream;\n \n@@ -34,17 +34,19 @@ pub struct TcpListener {\n \n impl TcpListener {\n     pub fn bind(addr: ip::SocketAddr) -> IoResult<TcpListener> {\n-        let fd = try!(socket(addr, libc::SOCK_STREAM));\n+        let fd = try!(net::socket(addr, libc::SOCK_STREAM));\n         let ret = TcpListener { inner: FileDesc::new(fd, true) };\n \n         let mut storage = unsafe { mem::zeroed() };\n-        let len = addr_to_sockaddr(addr, &mut storage);\n+        let len = net::addr_to_sockaddr(addr, &mut storage);\n         let addrp = &storage as *const _ as *const libc::sockaddr;\n \n         // On platforms with Berkeley-derived sockets, this allows\n         // to quickly rebind a socket, without needing to wait for\n         // the OS to clean up the previous one.\n-        try!(setsockopt(fd, libc::SOL_SOCKET, libc::SO_REUSEADDR, 1 as libc::c_int));\n+        try!(net::setsockopt(fd, libc::SOL_SOCKET,\n+                             libc::SO_REUSEADDR,\n+                             1 as libc::c_int));\n \n \n         match unsafe { libc::bind(fd, addrp, len) } {\n@@ -77,7 +79,7 @@ impl TcpListener {\n     }\n \n     pub fn socket_name(&mut self) -> IoResult<ip::SocketAddr> {\n-        sockname(self.fd(), libc::getsockname)\n+        net::sockname(self.fd(), libc::getsockname)\n     }\n }\n \n@@ -121,15 +123,15 @@ impl TcpAcceptor {\n                 -1 => return Err(last_net_error()),\n                 fd => return Ok(TcpStream::new(fd as sock_t)),\n             }\n-            try!(await(&[self.fd(), self.inner.reader.fd()],\n-                       deadline, Readable));\n+            try!(net::await(&[self.fd(), self.inner.reader.fd()],\n+                       deadline, net::Readable));\n         }\n \n         Err(sys_common::eof())\n     }\n \n     pub fn socket_name(&mut self) -> IoResult<ip::SocketAddr> {\n-        sockname(self.fd(), libc::getsockname)\n+        net::sockname(self.fd(), libc::getsockname)\n     }\n \n     pub fn set_timeout(&mut self, timeout: Option<u64>) {"}, {"sha": "7f9d669c44748ec5cacb2649a040c67f634f92f2", "filename": "src/libstd/sys/windows/condvar.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5193d542f61cd6723d053dff5782d9038a027a7b/src%2Flibstd%2Fsys%2Fwindows%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5193d542f61cd6723d053dff5782d9038a027a7b/src%2Flibstd%2Fsys%2Fwindows%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fcondvar.rs?ref=5193d542f61cd6723d053dff5782d9038a027a7b", "patch": "@@ -10,7 +10,6 @@\n \n use cell::UnsafeCell;\n use libc::{mod, DWORD};\n-use libc;\n use os;\n use sys::mutex::{mod, Mutex};\n use sys::sync as ffi;"}, {"sha": "d5bf8c5b62916e581388fad172799c21e8edfa44", "filename": "src/libstd/sys/windows/fs.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5193d542f61cd6723d053dff5782d9038a027a7b/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5193d542f61cd6723d053dff5782d9038a027a7b/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs?ref=5193d542f61cd6723d053dff5782d9038a027a7b", "patch": "@@ -26,10 +26,9 @@ use sys;\n use sys_common::{keep_going, eof, mkerr_libc};\n \n use io::{FilePermission, Write, UnstableFileStat, Open, FileAccess, FileMode};\n-use io::{IoResult, IoError, FileStat, SeekStyle, Seek, Writer, Reader};\n+use io::{IoResult, IoError, FileStat, SeekStyle};\n use io::{Read, Truncate, SeekCur, SeekSet, ReadWrite, SeekEnd, Append};\n \n-pub use path::WindowsPath as Path;\n pub type fd_t = libc::c_int;\n \n pub struct FileDesc {"}, {"sha": "e2220b7b67bbd6e5dbb5f50c78901c27a731f454", "filename": "src/libstd/sys/windows/os.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5193d542f61cd6723d053dff5782d9038a027a7b/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5193d542f61cd6723d053dff5782d9038a027a7b/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs?ref=5193d542f61cd6723d053dff5782d9038a027a7b", "patch": "@@ -20,12 +20,10 @@ use io::{IoResult, IoError};\n use libc::{c_int, c_char, c_void};\n use libc;\n use os;\n-use path::{Path, GenericPath, BytesContainer};\n-use ptr::{mod, RawPtr};\n+use path::BytesContainer;\n+use ptr;\n use sync::atomic::{AtomicInt, INIT_ATOMIC_INT, SeqCst};\n use sys::fs::FileDesc;\n-use option::Option;\n-use option::Option::{Some, None};\n use slice;\n \n use os::TMPBUF_SZ;"}, {"sha": "8945c155e66cedeb6816cb7c652a38d345195d6d", "filename": "src/libstd/sys/windows/process.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5193d542f61cd6723d053dff5782d9038a027a7b/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5193d542f61cd6723d053dff5782d9038a027a7b/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs?ref=5193d542f61cd6723d053dff5782d9038a027a7b", "patch": "@@ -29,7 +29,6 @@ use sys_common::helper_thread::Helper;\n use sys_common::{AsInner, mkerr_libc, timeout};\n \n use io::fs::PathExtensions;\n-use string::String;\n \n pub use sys_common::ProcessConfig;\n "}, {"sha": "505e6137bf9047162416ccaa277497642224b030", "filename": "src/libstd/sys/windows/tcp.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5193d542f61cd6723d053dff5782d9038a027a7b/src%2Flibstd%2Fsys%2Fwindows%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5193d542f61cd6723d053dff5782d9038a027a7b/src%2Flibstd%2Fsys%2Fwindows%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ftcp.rs?ref=5193d542f61cd6723d053dff5782d9038a027a7b", "patch": "@@ -18,8 +18,7 @@ use super::{last_error, last_net_error, retry, sock_t};\n use sync::{Arc, atomic};\n use sys::fs::FileDesc;\n use sys::{mod, c, set_nonblocking, wouldblock, timer};\n-use sys_common::{mod, timeout, eof};\n-use sys_common::net::*;\n+use sys_common::{mod, timeout, eof, net};\n \n pub use sys_common::net::TcpStream;\n \n@@ -54,11 +53,11 @@ impl TcpListener {\n     pub fn bind(addr: ip::SocketAddr) -> IoResult<TcpListener> {\n         sys::init_net();\n \n-        let sock = try!(socket(addr, libc::SOCK_STREAM));\n+        let sock = try!(net::socket(addr, libc::SOCK_STREAM));\n         let ret = TcpListener { sock: sock };\n \n         let mut storage = unsafe { mem::zeroed() };\n-        let len = addr_to_sockaddr(addr, &mut storage);\n+        let len = net::addr_to_sockaddr(addr, &mut storage);\n         let addrp = &storage as *const _ as *const libc::sockaddr;\n \n         match unsafe { libc::bind(sock, addrp, len) } {\n@@ -95,7 +94,7 @@ impl TcpListener {\n     }\n \n     pub fn socket_name(&mut self) -> IoResult<ip::SocketAddr> {\n-        sockname(self.socket(), libc::getsockname)\n+        net::sockname(self.socket(), libc::getsockname)\n     }\n }\n \n@@ -195,7 +194,7 @@ impl TcpAcceptor {\n     }\n \n     pub fn socket_name(&mut self) -> IoResult<ip::SocketAddr> {\n-        sockname(self.socket(), libc::getsockname)\n+        net::sockname(self.socket(), libc::getsockname)\n     }\n \n     pub fn set_timeout(&mut self, timeout: Option<u64>) {"}, {"sha": "ff9ee01b40ac82f7cc20c80fb34bb1c2549c252d", "filename": "src/libstd/thread.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5193d542f61cd6723d053dff5782d9038a027a7b/src%2Flibstd%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5193d542f61cd6723d053dff5782d9038a027a7b/src%2Flibstd%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread.rs?ref=5193d542f61cd6723d053dff5782d9038a027a7b", "patch": "@@ -124,13 +124,17 @@\n //!\n //! * It can be implemented highly efficiently on many platforms.\n \n-use core::prelude::*;\n-\n use any::Any;\n use borrow::IntoCow;\n use boxed::Box;\n use cell::UnsafeCell;\n+use clone::Clone;\n+use kinds::Send;\n+use ops::{Drop, FnOnce};\n+use option::Option::{mod, Some, None};\n+use result::Result::{Err, Ok};\n use sync::{Mutex, Condvar, Arc};\n+use str::Str;\n use string::String;\n use rt::{mod, unwind};\n use io::{Writer, stdio};"}]}