{"sha": "ee27c49dfc33c12b41527948069b125236e74893", "node_id": "C_kwDOAAsO6NoAKGVlMjdjNDlkZmMzM2MxMmI0MTUyNzk0ODA2OWIxMjUyMzZlNzQ4OTM", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-05-25T18:17:02Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-05-25T18:17:02Z"}, "message": "Add NOTE annotations.", "tree": {"sha": "c55d6738770c7eaaba3122bb4d076df9e399a19d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c55d6738770c7eaaba3122bb4d076df9e399a19d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee27c49dfc33c12b41527948069b125236e74893", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee27c49dfc33c12b41527948069b125236e74893", "html_url": "https://github.com/rust-lang/rust/commit/ee27c49dfc33c12b41527948069b125236e74893", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee27c49dfc33c12b41527948069b125236e74893/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "320f6f43f6f2d0a3460cf70ec23bf48665661286", "url": "https://api.github.com/repos/rust-lang/rust/commits/320f6f43f6f2d0a3460cf70ec23bf48665661286", "html_url": "https://github.com/rust-lang/rust/commit/320f6f43f6f2d0a3460cf70ec23bf48665661286"}], "stats": {"total": 216, "additions": 141, "deletions": 75}, "files": [{"sha": "49b6dfca62e5d2193f8e19b4187654b1440365b8", "filename": "tests/ui/pattern/usefulness/empty-match.exhaustive_patterns.stderr", "status": "modified", "additions": 39, "deletions": 37, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/ee27c49dfc33c12b41527948069b125236e74893/tests%2Fui%2Fpattern%2Fusefulness%2Fempty-match.exhaustive_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee27c49dfc33c12b41527948069b125236e74893/tests%2Fui%2Fpattern%2Fusefulness%2Fempty-match.exhaustive_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fusefulness%2Fempty-match.exhaustive_patterns.stderr?ref=ee27c49dfc33c12b41527948069b125236e74893", "patch": "@@ -1,5 +1,5 @@\n error: unreachable pattern\n-  --> $DIR/empty-match.rs:37:9\n+  --> $DIR/empty-match.rs:58:9\n    |\n LL |         _ => {},\n    |         ^\n@@ -11,25 +11,25 @@ LL | #![deny(unreachable_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/empty-match.rs:40:9\n+  --> $DIR/empty-match.rs:61:9\n    |\n LL |         _ if false => {},\n    |         ^\n \n error: unreachable pattern\n-  --> $DIR/empty-match.rs:47:9\n+  --> $DIR/empty-match.rs:68:9\n    |\n LL |         _ => {},\n    |         ^\n \n error: unreachable pattern\n-  --> $DIR/empty-match.rs:50:9\n+  --> $DIR/empty-match.rs:71:9\n    |\n LL |         _ if false => {},\n    |         ^\n \n error[E0005]: refutable pattern in local binding\n-  --> $DIR/empty-match.rs:55:9\n+  --> $DIR/empty-match.rs:76:9\n    |\n LL |     let None = x;\n    |         ^^^^ pattern `Some(_)` not covered\n@@ -44,19 +44,19 @@ LL |     if let None = x { todo!() };\n    |     ++              +++++++++++\n \n error: unreachable pattern\n-  --> $DIR/empty-match.rs:61:9\n+  --> $DIR/empty-match.rs:88:9\n    |\n LL |         _ => {},\n    |         ^\n \n error: unreachable pattern\n-  --> $DIR/empty-match.rs:64:9\n+  --> $DIR/empty-match.rs:91:9\n    |\n LL |         _ if false => {},\n    |         ^\n \n error[E0004]: non-exhaustive patterns: type `u8` is non-empty\n-  --> $DIR/empty-match.rs:82:20\n+  --> $DIR/empty-match.rs:109:20\n    |\n LL |     match_no_arms!(0u8);\n    |                    ^^^\n@@ -65,69 +65,69 @@ LL |     match_no_arms!(0u8);\n    = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyStruct1` is non-empty\n-  --> $DIR/empty-match.rs:83:20\n+  --> $DIR/empty-match.rs:111:20\n    |\n LL |     match_no_arms!(NonEmptyStruct1);\n    |                    ^^^^^^^^^^^^^^^\n    |\n note: `NonEmptyStruct1` defined here\n-  --> $DIR/empty-match.rs:14:8\n+  --> $DIR/empty-match.rs:15:8\n    |\n LL | struct NonEmptyStruct1;\n    |        ^^^^^^^^^^^^^^^\n    = note: the matched value is of type `NonEmptyStruct1`\n    = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyStruct2` is non-empty\n-  --> $DIR/empty-match.rs:84:20\n+  --> $DIR/empty-match.rs:113:20\n    |\n LL |     match_no_arms!(NonEmptyStruct2(true));\n    |                    ^^^^^^^^^^^^^^^^^^^^^\n    |\n note: `NonEmptyStruct2` defined here\n-  --> $DIR/empty-match.rs:15:8\n+  --> $DIR/empty-match.rs:18:8\n    |\n LL | struct NonEmptyStruct2(bool);\n    |        ^^^^^^^^^^^^^^^\n    = note: the matched value is of type `NonEmptyStruct2`\n    = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyUnion1` is non-empty\n-  --> $DIR/empty-match.rs:85:20\n+  --> $DIR/empty-match.rs:115:20\n    |\n LL |     match_no_arms!((NonEmptyUnion1 { foo: () }));\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: `NonEmptyUnion1` defined here\n-  --> $DIR/empty-match.rs:16:7\n+  --> $DIR/empty-match.rs:21:7\n    |\n LL | union NonEmptyUnion1 {\n    |       ^^^^^^^^^^^^^^\n    = note: the matched value is of type `NonEmptyUnion1`\n    = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyUnion2` is non-empty\n-  --> $DIR/empty-match.rs:86:20\n+  --> $DIR/empty-match.rs:117:20\n    |\n LL |     match_no_arms!((NonEmptyUnion2 { foo: () }));\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: `NonEmptyUnion2` defined here\n-  --> $DIR/empty-match.rs:19:7\n+  --> $DIR/empty-match.rs:26:7\n    |\n LL | union NonEmptyUnion2 {\n    |       ^^^^^^^^^^^^^^\n    = note: the matched value is of type `NonEmptyUnion2`\n    = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern\n \n error[E0004]: non-exhaustive patterns: `NonEmptyEnum1::Foo(_)` not covered\n-  --> $DIR/empty-match.rs:87:20\n+  --> $DIR/empty-match.rs:119:20\n    |\n LL |     match_no_arms!(NonEmptyEnum1::Foo(true));\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^ pattern `NonEmptyEnum1::Foo(_)` not covered\n    |\n note: `NonEmptyEnum1` defined here\n-  --> $DIR/empty-match.rs:24:5\n+  --> $DIR/empty-match.rs:33:5\n    |\n LL | enum NonEmptyEnum1 {\n    |      -------------\n@@ -137,39 +137,40 @@ LL |     Foo(bool),\n    = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern\n \n error[E0004]: non-exhaustive patterns: `NonEmptyEnum2::Foo(_)` and `NonEmptyEnum2::Bar` not covered\n-  --> $DIR/empty-match.rs:88:20\n+  --> $DIR/empty-match.rs:122:20\n    |\n LL |     match_no_arms!(NonEmptyEnum2::Foo(true));\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^ patterns `NonEmptyEnum2::Foo(_)` and `NonEmptyEnum2::Bar` not covered\n    |\n note: `NonEmptyEnum2` defined here\n-  --> $DIR/empty-match.rs:27:5\n+  --> $DIR/empty-match.rs:40:5\n    |\n LL | enum NonEmptyEnum2 {\n    |      -------------\n LL |     Foo(bool),\n    |     ^^^ not covered\n+...\n LL |     Bar,\n    |     ^^^ not covered\n    = note: the matched value is of type `NonEmptyEnum2`\n    = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or multiple match arms\n \n error[E0004]: non-exhaustive patterns: `NonEmptyEnum5::V1`, `NonEmptyEnum5::V2`, `NonEmptyEnum5::V3` and 2 more not covered\n-  --> $DIR/empty-match.rs:89:20\n+  --> $DIR/empty-match.rs:125:20\n    |\n LL |     match_no_arms!(NonEmptyEnum5::V1);\n    |                    ^^^^^^^^^^^^^^^^^ patterns `NonEmptyEnum5::V1`, `NonEmptyEnum5::V2`, `NonEmptyEnum5::V3` and 2 more not covered\n    |\n note: `NonEmptyEnum5` defined here\n-  --> $DIR/empty-match.rs:30:6\n+  --> $DIR/empty-match.rs:49:6\n    |\n LL | enum NonEmptyEnum5 {\n    |      ^^^^^^^^^^^^^\n    = note: the matched value is of type `NonEmptyEnum5`\n    = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or multiple match arms\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n-  --> $DIR/empty-match.rs:91:24\n+  --> $DIR/empty-match.rs:129:24\n    |\n LL |     match_guarded_arm!(0u8);\n    |                        ^^^ pattern `_` not covered\n@@ -182,13 +183,13 @@ LL +             _ => todo!()\n    |\n \n error[E0004]: non-exhaustive patterns: `NonEmptyStruct1` not covered\n-  --> $DIR/empty-match.rs:92:24\n+  --> $DIR/empty-match.rs:133:24\n    |\n LL |     match_guarded_arm!(NonEmptyStruct1);\n    |                        ^^^^^^^^^^^^^^^ pattern `NonEmptyStruct1` not covered\n    |\n note: `NonEmptyStruct1` defined here\n-  --> $DIR/empty-match.rs:14:8\n+  --> $DIR/empty-match.rs:15:8\n    |\n LL | struct NonEmptyStruct1;\n    |        ^^^^^^^^^^^^^^^\n@@ -200,13 +201,13 @@ LL +             NonEmptyStruct1 => todo!()\n    |\n \n error[E0004]: non-exhaustive patterns: `NonEmptyStruct2(_)` not covered\n-  --> $DIR/empty-match.rs:93:24\n+  --> $DIR/empty-match.rs:137:24\n    |\n LL |     match_guarded_arm!(NonEmptyStruct2(true));\n    |                        ^^^^^^^^^^^^^^^^^^^^^ pattern `NonEmptyStruct2(_)` not covered\n    |\n note: `NonEmptyStruct2` defined here\n-  --> $DIR/empty-match.rs:15:8\n+  --> $DIR/empty-match.rs:18:8\n    |\n LL | struct NonEmptyStruct2(bool);\n    |        ^^^^^^^^^^^^^^^\n@@ -218,13 +219,13 @@ LL +             NonEmptyStruct2(_) => todo!()\n    |\n \n error[E0004]: non-exhaustive patterns: `NonEmptyUnion1 { .. }` not covered\n-  --> $DIR/empty-match.rs:94:24\n+  --> $DIR/empty-match.rs:141:24\n    |\n LL |     match_guarded_arm!((NonEmptyUnion1 { foo: () }));\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pattern `NonEmptyUnion1 { .. }` not covered\n    |\n note: `NonEmptyUnion1` defined here\n-  --> $DIR/empty-match.rs:16:7\n+  --> $DIR/empty-match.rs:21:7\n    |\n LL | union NonEmptyUnion1 {\n    |       ^^^^^^^^^^^^^^\n@@ -236,13 +237,13 @@ LL +             NonEmptyUnion1 { .. } => todo!()\n    |\n \n error[E0004]: non-exhaustive patterns: `NonEmptyUnion2 { .. }` not covered\n-  --> $DIR/empty-match.rs:95:24\n+  --> $DIR/empty-match.rs:145:24\n    |\n LL |     match_guarded_arm!((NonEmptyUnion2 { foo: () }));\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pattern `NonEmptyUnion2 { .. }` not covered\n    |\n note: `NonEmptyUnion2` defined here\n-  --> $DIR/empty-match.rs:19:7\n+  --> $DIR/empty-match.rs:26:7\n    |\n LL | union NonEmptyUnion2 {\n    |       ^^^^^^^^^^^^^^\n@@ -254,13 +255,13 @@ LL +             NonEmptyUnion2 { .. } => todo!()\n    |\n \n error[E0004]: non-exhaustive patterns: `NonEmptyEnum1::Foo(_)` not covered\n-  --> $DIR/empty-match.rs:96:24\n+  --> $DIR/empty-match.rs:149:24\n    |\n LL |     match_guarded_arm!(NonEmptyEnum1::Foo(true));\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^ pattern `NonEmptyEnum1::Foo(_)` not covered\n    |\n note: `NonEmptyEnum1` defined here\n-  --> $DIR/empty-match.rs:24:5\n+  --> $DIR/empty-match.rs:33:5\n    |\n LL | enum NonEmptyEnum1 {\n    |      -------------\n@@ -274,18 +275,19 @@ LL +             NonEmptyEnum1::Foo(_) => todo!()\n    |\n \n error[E0004]: non-exhaustive patterns: `NonEmptyEnum2::Foo(_)` and `NonEmptyEnum2::Bar` not covered\n-  --> $DIR/empty-match.rs:97:24\n+  --> $DIR/empty-match.rs:153:24\n    |\n LL |     match_guarded_arm!(NonEmptyEnum2::Foo(true));\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^ patterns `NonEmptyEnum2::Foo(_)` and `NonEmptyEnum2::Bar` not covered\n    |\n note: `NonEmptyEnum2` defined here\n-  --> $DIR/empty-match.rs:27:5\n+  --> $DIR/empty-match.rs:40:5\n    |\n LL | enum NonEmptyEnum2 {\n    |      -------------\n LL |     Foo(bool),\n    |     ^^^ not covered\n+...\n LL |     Bar,\n    |     ^^^ not covered\n    = note: the matched value is of type `NonEmptyEnum2`\n@@ -296,13 +298,13 @@ LL +             NonEmptyEnum2::Foo(_) | NonEmptyEnum2::Bar => todo!()\n    |\n \n error[E0004]: non-exhaustive patterns: `NonEmptyEnum5::V1`, `NonEmptyEnum5::V2`, `NonEmptyEnum5::V3` and 2 more not covered\n-  --> $DIR/empty-match.rs:98:24\n+  --> $DIR/empty-match.rs:157:24\n    |\n LL |     match_guarded_arm!(NonEmptyEnum5::V1);\n    |                        ^^^^^^^^^^^^^^^^^ patterns `NonEmptyEnum5::V1`, `NonEmptyEnum5::V2`, `NonEmptyEnum5::V3` and 2 more not covered\n    |\n note: `NonEmptyEnum5` defined here\n-  --> $DIR/empty-match.rs:30:6\n+  --> $DIR/empty-match.rs:49:6\n    |\n LL | enum NonEmptyEnum5 {\n    |      ^^^^^^^^^^^^^"}, {"sha": "f54a3f3364ff960954e8e8878c1033678cd8d575", "filename": "tests/ui/pattern/usefulness/empty-match.normal.stderr", "status": "modified", "additions": 39, "deletions": 37, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/ee27c49dfc33c12b41527948069b125236e74893/tests%2Fui%2Fpattern%2Fusefulness%2Fempty-match.normal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee27c49dfc33c12b41527948069b125236e74893/tests%2Fui%2Fpattern%2Fusefulness%2Fempty-match.normal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fusefulness%2Fempty-match.normal.stderr?ref=ee27c49dfc33c12b41527948069b125236e74893", "patch": "@@ -1,5 +1,5 @@\n error: unreachable pattern\n-  --> $DIR/empty-match.rs:37:9\n+  --> $DIR/empty-match.rs:58:9\n    |\n LL |         _ => {},\n    |         ^\n@@ -11,25 +11,25 @@ LL | #![deny(unreachable_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/empty-match.rs:40:9\n+  --> $DIR/empty-match.rs:61:9\n    |\n LL |         _ if false => {},\n    |         ^\n \n error: unreachable pattern\n-  --> $DIR/empty-match.rs:47:9\n+  --> $DIR/empty-match.rs:68:9\n    |\n LL |         _ => {},\n    |         ^\n \n error: unreachable pattern\n-  --> $DIR/empty-match.rs:50:9\n+  --> $DIR/empty-match.rs:71:9\n    |\n LL |         _ if false => {},\n    |         ^\n \n error[E0005]: refutable pattern in local binding\n-  --> $DIR/empty-match.rs:55:9\n+  --> $DIR/empty-match.rs:76:9\n    |\n LL |     let None = x;\n    |         ^^^^ pattern `Some(_)` not covered\n@@ -43,19 +43,19 @@ LL |     if let None = x { todo!() };\n    |     ++              +++++++++++\n \n error: unreachable pattern\n-  --> $DIR/empty-match.rs:61:9\n+  --> $DIR/empty-match.rs:88:9\n    |\n LL |         _ => {},\n    |         ^\n \n error: unreachable pattern\n-  --> $DIR/empty-match.rs:64:9\n+  --> $DIR/empty-match.rs:91:9\n    |\n LL |         _ if false => {},\n    |         ^\n \n error[E0004]: non-exhaustive patterns: type `u8` is non-empty\n-  --> $DIR/empty-match.rs:82:20\n+  --> $DIR/empty-match.rs:109:20\n    |\n LL |     match_no_arms!(0u8);\n    |                    ^^^\n@@ -64,69 +64,69 @@ LL |     match_no_arms!(0u8);\n    = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyStruct1` is non-empty\n-  --> $DIR/empty-match.rs:83:20\n+  --> $DIR/empty-match.rs:111:20\n    |\n LL |     match_no_arms!(NonEmptyStruct1);\n    |                    ^^^^^^^^^^^^^^^\n    |\n note: `NonEmptyStruct1` defined here\n-  --> $DIR/empty-match.rs:14:8\n+  --> $DIR/empty-match.rs:15:8\n    |\n LL | struct NonEmptyStruct1;\n    |        ^^^^^^^^^^^^^^^\n    = note: the matched value is of type `NonEmptyStruct1`\n    = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyStruct2` is non-empty\n-  --> $DIR/empty-match.rs:84:20\n+  --> $DIR/empty-match.rs:113:20\n    |\n LL |     match_no_arms!(NonEmptyStruct2(true));\n    |                    ^^^^^^^^^^^^^^^^^^^^^\n    |\n note: `NonEmptyStruct2` defined here\n-  --> $DIR/empty-match.rs:15:8\n+  --> $DIR/empty-match.rs:18:8\n    |\n LL | struct NonEmptyStruct2(bool);\n    |        ^^^^^^^^^^^^^^^\n    = note: the matched value is of type `NonEmptyStruct2`\n    = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyUnion1` is non-empty\n-  --> $DIR/empty-match.rs:85:20\n+  --> $DIR/empty-match.rs:115:20\n    |\n LL |     match_no_arms!((NonEmptyUnion1 { foo: () }));\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: `NonEmptyUnion1` defined here\n-  --> $DIR/empty-match.rs:16:7\n+  --> $DIR/empty-match.rs:21:7\n    |\n LL | union NonEmptyUnion1 {\n    |       ^^^^^^^^^^^^^^\n    = note: the matched value is of type `NonEmptyUnion1`\n    = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern\n \n error[E0004]: non-exhaustive patterns: type `NonEmptyUnion2` is non-empty\n-  --> $DIR/empty-match.rs:86:20\n+  --> $DIR/empty-match.rs:117:20\n    |\n LL |     match_no_arms!((NonEmptyUnion2 { foo: () }));\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: `NonEmptyUnion2` defined here\n-  --> $DIR/empty-match.rs:19:7\n+  --> $DIR/empty-match.rs:26:7\n    |\n LL | union NonEmptyUnion2 {\n    |       ^^^^^^^^^^^^^^\n    = note: the matched value is of type `NonEmptyUnion2`\n    = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern\n \n error[E0004]: non-exhaustive patterns: `NonEmptyEnum1::Foo(_)` not covered\n-  --> $DIR/empty-match.rs:87:20\n+  --> $DIR/empty-match.rs:119:20\n    |\n LL |     match_no_arms!(NonEmptyEnum1::Foo(true));\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^ pattern `NonEmptyEnum1::Foo(_)` not covered\n    |\n note: `NonEmptyEnum1` defined here\n-  --> $DIR/empty-match.rs:24:5\n+  --> $DIR/empty-match.rs:33:5\n    |\n LL | enum NonEmptyEnum1 {\n    |      -------------\n@@ -136,39 +136,40 @@ LL |     Foo(bool),\n    = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern\n \n error[E0004]: non-exhaustive patterns: `NonEmptyEnum2::Foo(_)` and `NonEmptyEnum2::Bar` not covered\n-  --> $DIR/empty-match.rs:88:20\n+  --> $DIR/empty-match.rs:122:20\n    |\n LL |     match_no_arms!(NonEmptyEnum2::Foo(true));\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^ patterns `NonEmptyEnum2::Foo(_)` and `NonEmptyEnum2::Bar` not covered\n    |\n note: `NonEmptyEnum2` defined here\n-  --> $DIR/empty-match.rs:27:5\n+  --> $DIR/empty-match.rs:40:5\n    |\n LL | enum NonEmptyEnum2 {\n    |      -------------\n LL |     Foo(bool),\n    |     ^^^ not covered\n+...\n LL |     Bar,\n    |     ^^^ not covered\n    = note: the matched value is of type `NonEmptyEnum2`\n    = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or multiple match arms\n \n error[E0004]: non-exhaustive patterns: `NonEmptyEnum5::V1`, `NonEmptyEnum5::V2`, `NonEmptyEnum5::V3` and 2 more not covered\n-  --> $DIR/empty-match.rs:89:20\n+  --> $DIR/empty-match.rs:125:20\n    |\n LL |     match_no_arms!(NonEmptyEnum5::V1);\n    |                    ^^^^^^^^^^^^^^^^^ patterns `NonEmptyEnum5::V1`, `NonEmptyEnum5::V2`, `NonEmptyEnum5::V3` and 2 more not covered\n    |\n note: `NonEmptyEnum5` defined here\n-  --> $DIR/empty-match.rs:30:6\n+  --> $DIR/empty-match.rs:49:6\n    |\n LL | enum NonEmptyEnum5 {\n    |      ^^^^^^^^^^^^^\n    = note: the matched value is of type `NonEmptyEnum5`\n    = help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or multiple match arms\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n-  --> $DIR/empty-match.rs:91:24\n+  --> $DIR/empty-match.rs:129:24\n    |\n LL |     match_guarded_arm!(0u8);\n    |                        ^^^ pattern `_` not covered\n@@ -181,13 +182,13 @@ LL +             _ => todo!()\n    |\n \n error[E0004]: non-exhaustive patterns: `NonEmptyStruct1` not covered\n-  --> $DIR/empty-match.rs:92:24\n+  --> $DIR/empty-match.rs:133:24\n    |\n LL |     match_guarded_arm!(NonEmptyStruct1);\n    |                        ^^^^^^^^^^^^^^^ pattern `NonEmptyStruct1` not covered\n    |\n note: `NonEmptyStruct1` defined here\n-  --> $DIR/empty-match.rs:14:8\n+  --> $DIR/empty-match.rs:15:8\n    |\n LL | struct NonEmptyStruct1;\n    |        ^^^^^^^^^^^^^^^\n@@ -199,13 +200,13 @@ LL +             NonEmptyStruct1 => todo!()\n    |\n \n error[E0004]: non-exhaustive patterns: `NonEmptyStruct2(_)` not covered\n-  --> $DIR/empty-match.rs:93:24\n+  --> $DIR/empty-match.rs:137:24\n    |\n LL |     match_guarded_arm!(NonEmptyStruct2(true));\n    |                        ^^^^^^^^^^^^^^^^^^^^^ pattern `NonEmptyStruct2(_)` not covered\n    |\n note: `NonEmptyStruct2` defined here\n-  --> $DIR/empty-match.rs:15:8\n+  --> $DIR/empty-match.rs:18:8\n    |\n LL | struct NonEmptyStruct2(bool);\n    |        ^^^^^^^^^^^^^^^\n@@ -217,13 +218,13 @@ LL +             NonEmptyStruct2(_) => todo!()\n    |\n \n error[E0004]: non-exhaustive patterns: `NonEmptyUnion1 { .. }` not covered\n-  --> $DIR/empty-match.rs:94:24\n+  --> $DIR/empty-match.rs:141:24\n    |\n LL |     match_guarded_arm!((NonEmptyUnion1 { foo: () }));\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pattern `NonEmptyUnion1 { .. }` not covered\n    |\n note: `NonEmptyUnion1` defined here\n-  --> $DIR/empty-match.rs:16:7\n+  --> $DIR/empty-match.rs:21:7\n    |\n LL | union NonEmptyUnion1 {\n    |       ^^^^^^^^^^^^^^\n@@ -235,13 +236,13 @@ LL +             NonEmptyUnion1 { .. } => todo!()\n    |\n \n error[E0004]: non-exhaustive patterns: `NonEmptyUnion2 { .. }` not covered\n-  --> $DIR/empty-match.rs:95:24\n+  --> $DIR/empty-match.rs:145:24\n    |\n LL |     match_guarded_arm!((NonEmptyUnion2 { foo: () }));\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pattern `NonEmptyUnion2 { .. }` not covered\n    |\n note: `NonEmptyUnion2` defined here\n-  --> $DIR/empty-match.rs:19:7\n+  --> $DIR/empty-match.rs:26:7\n    |\n LL | union NonEmptyUnion2 {\n    |       ^^^^^^^^^^^^^^\n@@ -253,13 +254,13 @@ LL +             NonEmptyUnion2 { .. } => todo!()\n    |\n \n error[E0004]: non-exhaustive patterns: `NonEmptyEnum1::Foo(_)` not covered\n-  --> $DIR/empty-match.rs:96:24\n+  --> $DIR/empty-match.rs:149:24\n    |\n LL |     match_guarded_arm!(NonEmptyEnum1::Foo(true));\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^ pattern `NonEmptyEnum1::Foo(_)` not covered\n    |\n note: `NonEmptyEnum1` defined here\n-  --> $DIR/empty-match.rs:24:5\n+  --> $DIR/empty-match.rs:33:5\n    |\n LL | enum NonEmptyEnum1 {\n    |      -------------\n@@ -273,18 +274,19 @@ LL +             NonEmptyEnum1::Foo(_) => todo!()\n    |\n \n error[E0004]: non-exhaustive patterns: `NonEmptyEnum2::Foo(_)` and `NonEmptyEnum2::Bar` not covered\n-  --> $DIR/empty-match.rs:97:24\n+  --> $DIR/empty-match.rs:153:24\n    |\n LL |     match_guarded_arm!(NonEmptyEnum2::Foo(true));\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^ patterns `NonEmptyEnum2::Foo(_)` and `NonEmptyEnum2::Bar` not covered\n    |\n note: `NonEmptyEnum2` defined here\n-  --> $DIR/empty-match.rs:27:5\n+  --> $DIR/empty-match.rs:40:5\n    |\n LL | enum NonEmptyEnum2 {\n    |      -------------\n LL |     Foo(bool),\n    |     ^^^ not covered\n+...\n LL |     Bar,\n    |     ^^^ not covered\n    = note: the matched value is of type `NonEmptyEnum2`\n@@ -295,13 +297,13 @@ LL +             NonEmptyEnum2::Foo(_) | NonEmptyEnum2::Bar => todo!()\n    |\n \n error[E0004]: non-exhaustive patterns: `NonEmptyEnum5::V1`, `NonEmptyEnum5::V2`, `NonEmptyEnum5::V3` and 2 more not covered\n-  --> $DIR/empty-match.rs:98:24\n+  --> $DIR/empty-match.rs:157:24\n    |\n LL |     match_guarded_arm!(NonEmptyEnum5::V1);\n    |                        ^^^^^^^^^^^^^^^^^ patterns `NonEmptyEnum5::V1`, `NonEmptyEnum5::V2`, `NonEmptyEnum5::V3` and 2 more not covered\n    |\n note: `NonEmptyEnum5` defined here\n-  --> $DIR/empty-match.rs:30:6\n+  --> $DIR/empty-match.rs:49:6\n    |\n LL | enum NonEmptyEnum5 {\n    |      ^^^^^^^^^^^^^"}, {"sha": "062241faa4cf22cfe9c70e6aee0175b259d4e52b", "filename": "tests/ui/pattern/usefulness/empty-match.rs", "status": "modified", "additions": 63, "deletions": 1, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/ee27c49dfc33c12b41527948069b125236e74893/tests%2Fui%2Fpattern%2Fusefulness%2Fempty-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee27c49dfc33c12b41527948069b125236e74893/tests%2Fui%2Fpattern%2Fusefulness%2Fempty-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fusefulness%2Fempty-match.rs?ref=ee27c49dfc33c12b41527948069b125236e74893", "patch": "@@ -6,28 +6,49 @@\n #![feature(never_type_fallback)]\n #![cfg_attr(exhaustive_patterns, feature(exhaustive_patterns))]\n #![deny(unreachable_patterns)]\n+//~^ NOTE the lint level is defined here\n \n extern crate empty;\n \n enum EmptyEnum {}\n \n struct NonEmptyStruct1;\n+//~^ NOTE `NonEmptyStruct1` defined here\n+//~| NOTE `NonEmptyStruct1` defined here\n struct NonEmptyStruct2(bool);\n+//~^ NOTE `NonEmptyStruct2` defined here\n+//~| NOTE `NonEmptyStruct2` defined here\n union NonEmptyUnion1 {\n+    //~^ NOTE `NonEmptyUnion1` defined here\n+    //~| NOTE `NonEmptyUnion1` defined here\n     foo: (),\n }\n union NonEmptyUnion2 {\n+    //~^ NOTE `NonEmptyUnion2` defined here\n+    //~| NOTE `NonEmptyUnion2` defined here\n     foo: (),\n     bar: (),\n }\n enum NonEmptyEnum1 {\n     Foo(bool),\n+    //~^ NOTE `NonEmptyEnum1` defined here\n+    //~| NOTE `NonEmptyEnum1` defined here\n+    //~| NOTE not covered\n+    //~| NOTE not covered\n }\n enum NonEmptyEnum2 {\n     Foo(bool),\n+    //~^ NOTE `NonEmptyEnum2` defined here\n+    //~| NOTE `NonEmptyEnum2` defined here\n+    //~| NOTE not covered\n+    //~| NOTE not covered\n     Bar,\n+    //~^ NOTE not covered\n+    //~| NOTE not covered\n }\n enum NonEmptyEnum5 {\n+    //~^ NOTE `NonEmptyEnum5` defined here\n+    //~| NOTE `NonEmptyEnum5` defined here\n     V1, V2, V3, V4, V5,\n }\n \n@@ -52,7 +73,13 @@ fn empty_foreign_enum(x: empty::EmptyForeignEnum) {\n }\n \n fn empty_foreign_enum_private(x: Option<empty::SecretlyUninhabitedForeignStruct>) {\n-    let None = x; //~ ERROR refutable pattern in local binding\n+    let None = x;\n+    //~^ ERROR refutable pattern in local binding\n+    //~| NOTE `let` bindings require an \"irrefutable pattern\"\n+    //~| NOTE for more information, visit\n+    //~| NOTE the matched value is of type\n+    //~| NOTE pattern `Some(_)` not covered\n+    //[exhaustive_patterns]~| NOTE currently uninhabited, but this variant contains private fields\n }\n \n fn never(x: !) {\n@@ -80,20 +107,55 @@ macro_rules! match_guarded_arm {\n \n fn main() {\n     match_no_arms!(0u8); //~ ERROR type `u8` is non-empty\n+                         //~| NOTE the matched value is of type\n     match_no_arms!(NonEmptyStruct1); //~ ERROR type `NonEmptyStruct1` is non-empty\n+                                     //~| NOTE the matched value is of type\n     match_no_arms!(NonEmptyStruct2(true)); //~ ERROR type `NonEmptyStruct2` is non-empty\n+                                           //~| NOTE the matched value is of type\n     match_no_arms!((NonEmptyUnion1 { foo: () })); //~ ERROR type `NonEmptyUnion1` is non-empty\n+                                                  //~| NOTE the matched value is of type\n     match_no_arms!((NonEmptyUnion2 { foo: () })); //~ ERROR type `NonEmptyUnion2` is non-empty\n+                                                  //~| NOTE the matched value is of type\n     match_no_arms!(NonEmptyEnum1::Foo(true)); //~ ERROR `NonEmptyEnum1::Foo(_)` not covered\n+                                              //~| NOTE pattern `NonEmptyEnum1::Foo(_)` not covered\n+                                              //~| NOTE the matched value is of type\n     match_no_arms!(NonEmptyEnum2::Foo(true)); //~ ERROR `NonEmptyEnum2::Foo(_)` and `NonEmptyEnum2::Bar` not covered\n+                                              //~| NOTE patterns `NonEmptyEnum2::Foo(_)` and\n+                                              //~| NOTE the matched value is of type\n     match_no_arms!(NonEmptyEnum5::V1); //~ ERROR `NonEmptyEnum5::V1`, `NonEmptyEnum5::V2`, `NonEmptyEnum5::V3` and 2 more not covered\n+                                       //~| NOTE patterns `NonEmptyEnum5::V1`, `NonEmptyEnum5::V2`\n+                                       //~| NOTE the matched value is of type\n \n     match_guarded_arm!(0u8); //~ ERROR `_` not covered\n+                             //~| NOTE the matched value is of type\n+                             //~| NOTE pattern `_` not covered\n+                             //~| NOTE in this expansion of match_guarded_arm!\n     match_guarded_arm!(NonEmptyStruct1); //~ ERROR `NonEmptyStruct1` not covered\n+                                         //~| NOTE pattern `NonEmptyStruct1` not covered\n+                                         //~| NOTE the matched value is of type\n+                                         //~| NOTE in this expansion of match_guarded_arm!\n     match_guarded_arm!(NonEmptyStruct2(true)); //~ ERROR `NonEmptyStruct2(_)` not covered\n+                                               //~| NOTE the matched value is of type\n+                                               //~| NOTE pattern `NonEmptyStruct2(_)` not covered\n+                                               //~| NOTE in this expansion of match_guarded_arm!\n     match_guarded_arm!((NonEmptyUnion1 { foo: () })); //~ ERROR `NonEmptyUnion1 { .. }` not covered\n+                                                      //~| NOTE the matched value is of type\n+                                                      //~| NOTE pattern `NonEmptyUnion1 { .. }` not covered\n+                                                      //~| NOTE in this expansion of match_guarded_arm!\n     match_guarded_arm!((NonEmptyUnion2 { foo: () })); //~ ERROR `NonEmptyUnion2 { .. }` not covered\n+                                                      //~| NOTE the matched value is of type\n+                                                      //~| NOTE pattern `NonEmptyUnion2 { .. }` not covered\n+                                                      //~| NOTE in this expansion of match_guarded_arm!\n     match_guarded_arm!(NonEmptyEnum1::Foo(true)); //~ ERROR `NonEmptyEnum1::Foo(_)` not covered\n+                                                  //~| NOTE the matched value is of type\n+                                                  //~| NOTE pattern `NonEmptyEnum1::Foo(_)` not covered\n+                                                  //~| NOTE in this expansion of match_guarded_arm!\n     match_guarded_arm!(NonEmptyEnum2::Foo(true)); //~ ERROR `NonEmptyEnum2::Foo(_)` and `NonEmptyEnum2::Bar` not covered\n+                                                  //~| NOTE the matched value is of type\n+                                                  //~| NOTE patterns `NonEmptyEnum2::Foo(_)` and\n+                                                  //~| NOTE in this expansion of match_guarded_arm!\n     match_guarded_arm!(NonEmptyEnum5::V1); //~ ERROR `NonEmptyEnum5::V1`, `NonEmptyEnum5::V2`, `NonEmptyEnum5::V3` and 2 more not covered\n+                                           //~| NOTE the matched value is of type\n+                                           //~| NOTE patterns `NonEmptyEnum5::V1`,\n+                                           //~| NOTE in this expansion of match_guarded_arm!\n }"}]}