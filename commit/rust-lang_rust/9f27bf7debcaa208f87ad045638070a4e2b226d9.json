{"sha": "9f27bf7debcaa208f87ad045638070a4e2b226d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmMjdiZjdkZWJjYWEyMDhmODdhZDA0NTYzODA3MGE0ZTJiMjI2ZDk=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-12-05T01:06:10Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-12-07T19:21:14Z"}, "message": "syntax: fix the accidental binding of interner state between parse and quote.", "tree": {"sha": "353467de8801fe22eb7b7f8492946d57711ff826", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/353467de8801fe22eb7b7f8492946d57711ff826"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f27bf7debcaa208f87ad045638070a4e2b226d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f27bf7debcaa208f87ad045638070a4e2b226d9", "html_url": "https://github.com/rust-lang/rust/commit/9f27bf7debcaa208f87ad045638070a4e2b226d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f27bf7debcaa208f87ad045638070a4e2b226d9/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65db4315abd7b65e2f22b5b07086de892368bf23", "url": "https://api.github.com/repos/rust-lang/rust/commits/65db4315abd7b65e2f22b5b07086de892368bf23", "html_url": "https://github.com/rust-lang/rust/commit/65db4315abd7b65e2f22b5b07086de892368bf23"}], "stats": {"total": 16, "additions": 6, "deletions": 10}, "files": [{"sha": "eb5c90320df7871ec11797da0f2ad646e81a4cec", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9f27bf7debcaa208f87ad045638070a4e2b226d9/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f27bf7debcaa208f87ad045638070a4e2b226d9/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=9f27bf7debcaa208f87ad045638070a4e2b226d9", "patch": "@@ -19,7 +19,7 @@ use token::*;\n *\n * Quasiquoting works via token trees.\n *\n-* This is registered as a expression syntax extension called quote! that lifts\n+* This is registered as a set of expression syntax extension called quote! that lifts\n * its argument token-tree to an AST representing the construction of the same\n * token tree, with ast::tt_nonterminal nodes interpreted as antiquotes\n * (splices).\n@@ -146,16 +146,12 @@ fn mk_span(cx: ext_ctxt, qsp: span, sp: span) -> @ast::expr {\n }\n \n // Lift an ident to the expr that evaluates to that ident.\n-//\n-// NB: this identifies the interner used when re-parsing the token tree\n-// with the interner used during initial parse. This is _wrong_ and we\n-// should be emitting a &str here and the token type should be ok with\n-// &static/str or &session/str. Longer-term issue.\n fn mk_ident(cx: ext_ctxt, sp: span, ident: ast::ident) -> @ast::expr {\n-    build::mk_struct_e(cx, sp,\n-                       ids_ext(cx, ~[~\"ident\"]),\n-                       ~[{ident: id_ext(cx, ~\"repr\"),\n-                          ex: build::mk_uint(cx, sp, ident.repr) }])\n+    let e_meth = build::mk_access(cx, sp,\n+                                  ids_ext(cx, ~[~\"ext_cx\"]),\n+                                  id_ext(cx, ~\"ident_of\"));\n+    let e_str = build::mk_uniq_str(cx, sp, cx.str_of(ident));\n+    build::mk_call_(cx, sp, e_meth, ~[e_str])\n }\n \n fn mk_bytepos(cx: ext_ctxt, sp: span, bpos: BytePos) -> @ast::expr {"}]}