{"sha": "2ffee89b752212d4e7d72ece16636d7c43b11c63", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmZmVlODliNzUyMjEyZDRlN2Q3MmVjZTE2NjM2ZDdjNDNiMTFjNjM=", "commit": {"author": {"name": "Mateusz Gacek", "email": "96mateusz.gacek@gmail.com", "date": "2021-03-20T13:30:45Z"}, "committer": {"name": "Mateusz Gacek", "email": "96mateusz.gacek@gmail.com", "date": "2021-03-21T20:23:36Z"}, "message": "search_is_some: check also when search is none", "tree": {"sha": "03e9f9fdc3a86c623c3819755e4f5174ffc5cfa4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03e9f9fdc3a86c623c3819755e4f5174ffc5cfa4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ffee89b752212d4e7d72ece16636d7c43b11c63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ffee89b752212d4e7d72ece16636d7c43b11c63", "html_url": "https://github.com/rust-lang/rust/commit/2ffee89b752212d4e7d72ece16636d7c43b11c63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ffee89b752212d4e7d72ece16636d7c43b11c63/comments", "author": {"login": "mgacek8", "id": 24357739, "node_id": "MDQ6VXNlcjI0MzU3NzM5", "avatar_url": "https://avatars.githubusercontent.com/u/24357739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mgacek8", "html_url": "https://github.com/mgacek8", "followers_url": "https://api.github.com/users/mgacek8/followers", "following_url": "https://api.github.com/users/mgacek8/following{/other_user}", "gists_url": "https://api.github.com/users/mgacek8/gists{/gist_id}", "starred_url": "https://api.github.com/users/mgacek8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mgacek8/subscriptions", "organizations_url": "https://api.github.com/users/mgacek8/orgs", "repos_url": "https://api.github.com/users/mgacek8/repos", "events_url": "https://api.github.com/users/mgacek8/events{/privacy}", "received_events_url": "https://api.github.com/users/mgacek8/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mgacek8", "id": 24357739, "node_id": "MDQ6VXNlcjI0MzU3NzM5", "avatar_url": "https://avatars.githubusercontent.com/u/24357739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mgacek8", "html_url": "https://github.com/mgacek8", "followers_url": "https://api.github.com/users/mgacek8/followers", "following_url": "https://api.github.com/users/mgacek8/following{/other_user}", "gists_url": "https://api.github.com/users/mgacek8/gists{/gist_id}", "starred_url": "https://api.github.com/users/mgacek8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mgacek8/subscriptions", "organizations_url": "https://api.github.com/users/mgacek8/orgs", "repos_url": "https://api.github.com/users/mgacek8/repos", "events_url": "https://api.github.com/users/mgacek8/events{/privacy}", "received_events_url": "https://api.github.com/users/mgacek8/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d3c539fbbdddc2c0ab2c512e70f4f6ea2d37c5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d3c539fbbdddc2c0ab2c512e70f4f6ea2d37c5e", "html_url": "https://github.com/rust-lang/rust/commit/1d3c539fbbdddc2c0ab2c512e70f4f6ea2d37c5e"}], "stats": {"total": 407, "additions": 359, "deletions": 48}, "files": [{"sha": "5be28354769ab858f985ed0ba02ba90c231827ca", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 46, "deletions": 11, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/2ffee89b752212d4e7d72ece16636d7c43b11c63/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ffee89b752212d4e7d72ece16636d7c43b11c63/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=2ffee89b752212d4e7d72ece16636d7c43b11c63", "patch": "@@ -588,26 +588,31 @@ declare_clippy_lint! {\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for an iterator or string search (such as `find()`,\n-    /// `position()`, or `rposition()`) followed by a call to `is_some()`.\n+    /// `position()`, or `rposition()`) followed by a call to `is_some()` or `is_none()`.\n     ///\n-    /// **Why is this bad?** Readability, this can be written more concisely as\n-    /// `_.any(_)` or `_.contains(_)`.\n+    /// **Why is this bad?** Readability, this can be written more concisely as:\n+    /// * `_.any(_)`, or `_.contains(_)` for `is_some()`,\n+    /// * `!_.any(_)`, or `!_.contains(_)` for `is_none()`.\n     ///\n     /// **Known problems:** None.\n     ///\n     /// **Example:**\n     /// ```rust\n-    /// # let vec = vec![1];\n+    /// let vec = vec![1];\n     /// vec.iter().find(|x| **x == 0).is_some();\n+    ///\n+    /// let _ = \"hello world\".find(\"world\").is_none();\n     /// ```\n     /// Could be written as\n     /// ```rust\n-    /// # let vec = vec![1];\n+    /// let vec = vec![1];\n     /// vec.iter().any(|x| *x == 0);\n+    ///\n+    /// let _ = !\"hello world\".contains(\"world\");\n     /// ```\n     pub SEARCH_IS_SOME,\n     complexity,\n-    \"using an iterator or string search followed by `is_some()`, which is more succinctly expressed as a call to `any()` or `contains()`\"\n+    \"using an iterator or string search followed by `is_some()` or `is_none()`, which is more succinctly expressed as a call to `any()` or `contains()` (with negation in case of `is_none()`)\"\n }\n \n declare_clippy_lint! {\n@@ -1720,12 +1725,42 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             [\"flat_map\", \"filter_map\"] => filter_map_flat_map::check(cx, expr, arg_lists[1], arg_lists[0]),\n             [\"flat_map\", ..] => flat_map_identity::check(cx, expr, arg_lists[0], method_spans[0]),\n             [\"flatten\", \"map\"] => map_flatten::check(cx, expr, arg_lists[1]),\n-            [\"is_some\", \"find\"] => search_is_some::check(cx, expr, \"find\", arg_lists[1], arg_lists[0], method_spans[1]),\n-            [\"is_some\", \"position\"] => {\n-                search_is_some::check(cx, expr, \"position\", arg_lists[1], arg_lists[0], method_spans[1])\n+            [option_check_method, \"find\"] if \"is_some\" == *option_check_method || \"is_none\" == *option_check_method => {\n+                search_is_some::check(\n+                    cx,\n+                    expr,\n+                    \"find\",\n+                    option_check_method,\n+                    arg_lists[1],\n+                    arg_lists[0],\n+                    method_spans[1],\n+                )\n             },\n-            [\"is_some\", \"rposition\"] => {\n-                search_is_some::check(cx, expr, \"rposition\", arg_lists[1], arg_lists[0], method_spans[1])\n+            [option_check_method, \"position\"]\n+                if \"is_some\" == *option_check_method || \"is_none\" == *option_check_method =>\n+            {\n+                search_is_some::check(\n+                    cx,\n+                    expr,\n+                    \"position\",\n+                    option_check_method,\n+                    arg_lists[1],\n+                    arg_lists[0],\n+                    method_spans[1],\n+                )\n+            },\n+            [option_check_method, \"rposition\"]\n+                if \"is_some\" == *option_check_method || \"is_none\" == *option_check_method =>\n+            {\n+                search_is_some::check(\n+                    cx,\n+                    expr,\n+                    \"rposition\",\n+                    option_check_method,\n+                    arg_lists[1],\n+                    arg_lists[0],\n+                    method_spans[1],\n+                )\n             },\n             [\"extend\", ..] => string_extend_chars::check(cx, expr, arg_lists[0]),\n             [\"count\", \"into_iter\"] => iter_count::check(cx, expr, &arg_lists[1], \"into_iter\"),"}, {"sha": "de7d168295fb90907a8e1af1d1dd6cdb1271fd45", "filename": "clippy_lints/src/methods/search_is_some.rs", "status": "modified", "additions": 78, "deletions": 29, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/2ffee89b752212d4e7d72ece16636d7c43b11c63/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ffee89b752212d4e7d72ece16636d7c43b11c63/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs?ref=2ffee89b752212d4e7d72ece16636d7c43b11c63", "patch": "@@ -14,22 +14,23 @@ use rustc_span::symbol::sym;\n use super::SEARCH_IS_SOME;\n \n /// lint searching an Iterator followed by `is_some()`\n-/// or calling `find()` on a string followed by `is_some()`\n+/// or calling `find()` on a string followed by `is_some()` or `is_none()`\n+#[allow(clippy::too_many_lines)]\n pub(super) fn check<'tcx>(\n     cx: &LateContext<'tcx>,\n     expr: &'tcx hir::Expr<'_>,\n     search_method: &str,\n+    option_check_method: &str,\n     search_args: &'tcx [hir::Expr<'_>],\n     is_some_args: &'tcx [hir::Expr<'_>],\n     method_span: Span,\n ) {\n     // lint if caller of search is an Iterator\n     if is_trait_method(cx, &is_some_args[0], sym::Iterator) {\n         let msg = format!(\n-            \"called `is_some()` after searching an `Iterator` with `{}`\",\n-            search_method\n+            \"called `{}()` after searching an `Iterator` with `{}`\",\n+            option_check_method, search_method\n         );\n-        let hint = \"this is more succinctly expressed by calling `any()`\";\n         let search_snippet = snippet(cx, search_args[1].span, \"..\");\n         if search_snippet.lines().count() <= 1 {\n             // suggest `any(|x| ..)` instead of `any(|&x| ..)` for `find(|&x| ..).is_some()`\n@@ -53,20 +54,49 @@ pub(super) fn check<'tcx>(\n                 }\n             };\n             // add note if not multi-line\n-            span_lint_and_sugg(\n-                cx,\n-                SEARCH_IS_SOME,\n-                method_span.with_hi(expr.span.hi()),\n-                &msg,\n-                \"use `any()` instead\",\n-                format!(\n-                    \"any({})\",\n-                    any_search_snippet.as_ref().map_or(&*search_snippet, String::as_str)\n-                ),\n-                Applicability::MachineApplicable,\n-            );\n+            match option_check_method {\n+                \"is_some\" => {\n+                    span_lint_and_sugg(\n+                        cx,\n+                        SEARCH_IS_SOME,\n+                        method_span.with_hi(expr.span.hi()),\n+                        &msg,\n+                        \"use `any()` instead\",\n+                        format!(\n+                            \"any({})\",\n+                            any_search_snippet.as_ref().map_or(&*search_snippet, String::as_str)\n+                        ),\n+                        Applicability::MachineApplicable,\n+                    );\n+                },\n+                \"is_none\" => {\n+                    let iter = snippet(cx, search_args[0].span, \"..\");\n+                    span_lint_and_sugg(\n+                        cx,\n+                        SEARCH_IS_SOME,\n+                        expr.span,\n+                        &msg,\n+                        \"use `!_.any()` instead\",\n+                        format!(\n+                            \"!{}.any({})\",\n+                            iter,\n+                            any_search_snippet.as_ref().map_or(&*search_snippet, String::as_str)\n+                        ),\n+                        Applicability::MachineApplicable,\n+                    );\n+                },\n+                _ => (),\n+            }\n         } else {\n-            span_lint_and_help(cx, SEARCH_IS_SOME, expr.span, &msg, None, hint);\n+            let hint = format!(\n+                \"this is more succinctly expressed by calling `any()`{}\",\n+                if option_check_method == \"is_none\" {\n+                    \" with negation\"\n+                } else {\n+                    \"\"\n+                }\n+            );\n+            span_lint_and_help(cx, SEARCH_IS_SOME, expr.span, &msg, None, &hint);\n         }\n     }\n     // lint if `find()` is called by `String` or `&str`\n@@ -83,18 +113,37 @@ pub(super) fn check<'tcx>(\n             if is_string_or_str_slice(&search_args[0]);\n             if is_string_or_str_slice(&search_args[1]);\n             then {\n-                let msg = \"called `is_some()` after calling `find()` on a string\";\n-                let mut applicability = Applicability::MachineApplicable;\n-                let find_arg = snippet_with_applicability(cx, search_args[1].span, \"..\", &mut applicability);\n-                span_lint_and_sugg(\n-                    cx,\n-                    SEARCH_IS_SOME,\n-                    method_span.with_hi(expr.span.hi()),\n-                    msg,\n-                    \"use `contains()` instead\",\n-                    format!(\"contains({})\", find_arg),\n-                    applicability,\n-                );\n+                let msg = format!(\"called `{}()` after calling `find()` on a string\", option_check_method);\n+                match option_check_method {\n+                    \"is_some\" => {\n+                        let mut applicability = Applicability::MachineApplicable;\n+                        let find_arg = snippet_with_applicability(cx, search_args[1].span, \"..\", &mut applicability);\n+                        span_lint_and_sugg(\n+                            cx,\n+                            SEARCH_IS_SOME,\n+                            method_span.with_hi(expr.span.hi()),\n+                            &msg,\n+                            \"use `contains()` instead\",\n+                            format!(\"contains({})\", find_arg),\n+                            applicability,\n+                        );\n+                    },\n+                    \"is_none\" => {\n+                        let string = snippet(cx, search_args[0].span, \"..\");\n+                        let mut applicability = Applicability::MachineApplicable;\n+                        let find_arg = snippet_with_applicability(cx, search_args[1].span, \"..\", &mut applicability);\n+                        span_lint_and_sugg(\n+                            cx,\n+                            SEARCH_IS_SOME,\n+                            expr.span,\n+                            &msg,\n+                            \"use `!_.contains()` instead\",\n+                            format!(\"!{}.contains({})\", string, find_arg),\n+                            applicability,\n+                        );\n+                    },\n+                    _ => (),\n+                }\n             }\n         }\n     }"}, {"sha": "72bc6ef35d317b02f9c5300affc0e6923fdd7790", "filename": "tests/ui/search_is_some.rs", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/2ffee89b752212d4e7d72ece16636d7c43b11c63/tests%2Fui%2Fsearch_is_some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ffee89b752212d4e7d72ece16636d7c43b11c63/tests%2Fui%2Fsearch_is_some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some.rs?ref=2ffee89b752212d4e7d72ece16636d7c43b11c63", "patch": "@@ -1,8 +1,9 @@\n // aux-build:option_helpers.rs\n+#![warn(clippy::search_is_some)]\n+#![allow(dead_code)]\n extern crate option_helpers;\n use option_helpers::IteratorFalsePositives;\n \n-#[warn(clippy::search_is_some)]\n #[rustfmt::skip]\n fn main() {\n     let v = vec![3, 2, 1, 0, -1, -2, -3];\n@@ -36,3 +37,37 @@ fn main() {\n     // `Pattern` that is not a string\n     let _ = \"hello world\".find(|c: char| c == 'o' || c == 'l').is_some();\n }\n+\n+#[rustfmt::skip]\n+fn is_none() {\n+    let v = vec![3, 2, 1, 0, -1, -2, -3];\n+    let y = &&42;\n+\n+\n+    // Check `find().is_none()`, multi-line case.\n+    let _ = v.iter().find(|&x| {\n+                              *x < 0\n+                          }\n+                   ).is_none();\n+\n+    // Check `position().is_none()`, multi-line case.\n+    let _ = v.iter().position(|&x| {\n+                                  x < 0\n+                              }\n+                   ).is_none();\n+\n+    // Check `rposition().is_none()`, multi-line case.\n+    let _ = v.iter().rposition(|&x| {\n+                                   x < 0\n+                               }\n+                   ).is_none();\n+\n+    // Check that we don't lint if the caller is not an `Iterator` or string\n+    let falsepos = IteratorFalsePositives { foo: 0 };\n+    let _ = falsepos.find().is_none();\n+    let _ = falsepos.position().is_none();\n+    let _ = falsepos.rposition().is_none();\n+    // check that we don't lint if `find()` is called with\n+    // `Pattern` that is not a string\n+    let _ = \"hello world\".find(|c: char| c == 'o' || c == 'l').is_none();\n+}"}, {"sha": "f3c758e451ef1436047b24be7d696156b4c075fb", "filename": "tests/ui/search_is_some.stderr", "status": "modified", "additions": 40, "deletions": 4, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/2ffee89b752212d4e7d72ece16636d7c43b11c63/tests%2Fui%2Fsearch_is_some.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ffee89b752212d4e7d72ece16636d7c43b11c63/tests%2Fui%2Fsearch_is_some.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some.stderr?ref=2ffee89b752212d4e7d72ece16636d7c43b11c63", "patch": "@@ -1,5 +1,5 @@\n error: called `is_some()` after searching an `Iterator` with `find`\n-  --> $DIR/search_is_some.rs:13:13\n+  --> $DIR/search_is_some.rs:14:13\n    |\n LL |       let _ = v.iter().find(|&x| {\n    |  _____________^\n@@ -12,7 +12,7 @@ LL | |                    ).is_some();\n    = help: this is more succinctly expressed by calling `any()`\n \n error: called `is_some()` after searching an `Iterator` with `position`\n-  --> $DIR/search_is_some.rs:19:13\n+  --> $DIR/search_is_some.rs:20:13\n    |\n LL |       let _ = v.iter().position(|&x| {\n    |  _____________^\n@@ -24,7 +24,7 @@ LL | |                    ).is_some();\n    = help: this is more succinctly expressed by calling `any()`\n \n error: called `is_some()` after searching an `Iterator` with `rposition`\n-  --> $DIR/search_is_some.rs:25:13\n+  --> $DIR/search_is_some.rs:26:13\n    |\n LL |       let _ = v.iter().rposition(|&x| {\n    |  _____________^\n@@ -35,5 +35,41 @@ LL | |                    ).is_some();\n    |\n    = help: this is more succinctly expressed by calling `any()`\n \n-error: aborting due to 3 previous errors\n+error: called `is_none()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some.rs:48:13\n+   |\n+LL |       let _ = v.iter().find(|&x| {\n+   |  _____________^\n+LL | |                               *x < 0\n+LL | |                           }\n+LL | |                    ).is_none();\n+   | |______________________________^\n+   |\n+   = help: this is more succinctly expressed by calling `any()` with negation\n+\n+error: called `is_none()` after searching an `Iterator` with `position`\n+  --> $DIR/search_is_some.rs:54:13\n+   |\n+LL |       let _ = v.iter().position(|&x| {\n+   |  _____________^\n+LL | |                                   x < 0\n+LL | |                               }\n+LL | |                    ).is_none();\n+   | |______________________________^\n+   |\n+   = help: this is more succinctly expressed by calling `any()` with negation\n+\n+error: called `is_none()` after searching an `Iterator` with `rposition`\n+  --> $DIR/search_is_some.rs:60:13\n+   |\n+LL |       let _ = v.iter().rposition(|&x| {\n+   |  _____________^\n+LL | |                                    x < 0\n+LL | |                                }\n+LL | |                    ).is_none();\n+   | |______________________________^\n+   |\n+   = help: this is more succinctly expressed by calling `any()` with negation\n+\n+error: aborting due to 6 previous errors\n "}, {"sha": "62ff16f67f41b7aa5641af3829a70ec3c04be4fd", "filename": "tests/ui/search_is_some_fixable.fixed", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/2ffee89b752212d4e7d72ece16636d7c43b11c63/tests%2Fui%2Fsearch_is_some_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2ffee89b752212d4e7d72ece16636d7c43b11c63/tests%2Fui%2Fsearch_is_some_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable.fixed?ref=2ffee89b752212d4e7d72ece16636d7c43b11c63", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-\n+#![allow(dead_code)]\n #![warn(clippy::search_is_some)]\n \n fn main() {\n@@ -33,3 +33,36 @@ fn main() {\n     let _ = s1[2..].contains(&s2);\n     let _ = s1[2..].contains(&s2[2..]);\n }\n+\n+fn is_none() {\n+    let v = vec![3, 2, 1, 0, -1, -2, -3];\n+    let y = &&42;\n+\n+    // Check `find().is_none()`, single-line case.\n+    let _ = !v.iter().any(|x| *x < 0);\n+    let _ = !(0..1).any(|x| **y == x); // one dereference less\n+    let _ = !(0..1).any(|x| x == 0);\n+    let _ = !v.iter().any(|x| *x == 0);\n+\n+    // Check `position().is_none()`, single-line case.\n+    let _ = !v.iter().any(|&x| x < 0);\n+\n+    // Check `rposition().is_none()`, single-line case.\n+    let _ = !v.iter().any(|&x| x < 0);\n+\n+    let s1 = String::from(\"hello world\");\n+    let s2 = String::from(\"world\");\n+\n+    // caller of `find()` is a `&`static str`\n+    let _ = !\"hello world\".contains(\"world\");\n+    let _ = !\"hello world\".contains(&s2);\n+    let _ = !\"hello world\".contains(&s2[2..]);\n+    // caller of `find()` is a `String`\n+    let _ = !s1.contains(\"world\");\n+    let _ = !s1.contains(&s2);\n+    let _ = !s1.contains(&s2[2..]);\n+    // caller of `find()` is slice of `String`\n+    let _ = !s1[2..].contains(\"world\");\n+    let _ = !s1[2..].contains(&s2);\n+    let _ = !s1[2..].contains(&s2[2..]);\n+}"}, {"sha": "8407f71664740d1aa8a4f6daf33e4841bec1bba3", "filename": "tests/ui/search_is_some_fixable.rs", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/2ffee89b752212d4e7d72ece16636d7c43b11c63/tests%2Fui%2Fsearch_is_some_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ffee89b752212d4e7d72ece16636d7c43b11c63/tests%2Fui%2Fsearch_is_some_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable.rs?ref=2ffee89b752212d4e7d72ece16636d7c43b11c63", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-\n+#![allow(dead_code)]\n #![warn(clippy::search_is_some)]\n \n fn main() {\n@@ -33,3 +33,36 @@ fn main() {\n     let _ = s1[2..].find(&s2).is_some();\n     let _ = s1[2..].find(&s2[2..]).is_some();\n }\n+\n+fn is_none() {\n+    let v = vec![3, 2, 1, 0, -1, -2, -3];\n+    let y = &&42;\n+\n+    // Check `find().is_none()`, single-line case.\n+    let _ = v.iter().find(|&x| *x < 0).is_none();\n+    let _ = (0..1).find(|x| **y == *x).is_none(); // one dereference less\n+    let _ = (0..1).find(|x| *x == 0).is_none();\n+    let _ = v.iter().find(|x| **x == 0).is_none();\n+\n+    // Check `position().is_none()`, single-line case.\n+    let _ = v.iter().position(|&x| x < 0).is_none();\n+\n+    // Check `rposition().is_none()`, single-line case.\n+    let _ = v.iter().rposition(|&x| x < 0).is_none();\n+\n+    let s1 = String::from(\"hello world\");\n+    let s2 = String::from(\"world\");\n+\n+    // caller of `find()` is a `&`static str`\n+    let _ = \"hello world\".find(\"world\").is_none();\n+    let _ = \"hello world\".find(&s2).is_none();\n+    let _ = \"hello world\".find(&s2[2..]).is_none();\n+    // caller of `find()` is a `String`\n+    let _ = s1.find(\"world\").is_none();\n+    let _ = s1.find(&s2).is_none();\n+    let _ = s1.find(&s2[2..]).is_none();\n+    // caller of `find()` is slice of `String`\n+    let _ = s1[2..].find(\"world\").is_none();\n+    let _ = s1[2..].find(&s2).is_none();\n+    let _ = s1[2..].find(&s2[2..]).is_none();\n+}"}, {"sha": "bd1b6955a97283bba14a32d8e9bad58b7c638493", "filename": "tests/ui/search_is_some_fixable.stderr", "status": "modified", "additions": 91, "deletions": 1, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/2ffee89b752212d4e7d72ece16636d7c43b11c63/tests%2Fui%2Fsearch_is_some_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ffee89b752212d4e7d72ece16636d7c43b11c63/tests%2Fui%2Fsearch_is_some_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable.stderr?ref=2ffee89b752212d4e7d72ece16636d7c43b11c63", "patch": "@@ -90,5 +90,95 @@ error: called `is_some()` after calling `find()` on a string\n LL |     let _ = s1[2..].find(&s2[2..]).is_some();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: use `contains()` instead: `contains(&s2[2..])`\n \n-error: aborting due to 15 previous errors\n+error: called `is_none()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable.rs:42:13\n+   |\n+LL |     let _ = v.iter().find(|&x| *x < 0).is_none();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.any()` instead: `!v.iter().any(|x| *x < 0)`\n+\n+error: called `is_none()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable.rs:43:13\n+   |\n+LL |     let _ = (0..1).find(|x| **y == *x).is_none(); // one dereference less\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.any()` instead: `!(0..1).any(|x| **y == x)`\n+\n+error: called `is_none()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable.rs:44:13\n+   |\n+LL |     let _ = (0..1).find(|x| *x == 0).is_none();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.any()` instead: `!(0..1).any(|x| x == 0)`\n+\n+error: called `is_none()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable.rs:45:13\n+   |\n+LL |     let _ = v.iter().find(|x| **x == 0).is_none();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.any()` instead: `!v.iter().any(|x| *x == 0)`\n+\n+error: called `is_none()` after searching an `Iterator` with `position`\n+  --> $DIR/search_is_some_fixable.rs:48:13\n+   |\n+LL |     let _ = v.iter().position(|&x| x < 0).is_none();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.any()` instead: `!v.iter().any(|&x| x < 0)`\n+\n+error: called `is_none()` after searching an `Iterator` with `rposition`\n+  --> $DIR/search_is_some_fixable.rs:51:13\n+   |\n+LL |     let _ = v.iter().rposition(|&x| x < 0).is_none();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.any()` instead: `!v.iter().any(|&x| x < 0)`\n+\n+error: called `is_none()` after calling `find()` on a string\n+  --> $DIR/search_is_some_fixable.rs:57:13\n+   |\n+LL |     let _ = \"hello world\".find(\"world\").is_none();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.contains()` instead: `!\"hello world\".contains(\"world\")`\n+\n+error: called `is_none()` after calling `find()` on a string\n+  --> $DIR/search_is_some_fixable.rs:58:13\n+   |\n+LL |     let _ = \"hello world\".find(&s2).is_none();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.contains()` instead: `!\"hello world\".contains(&s2)`\n+\n+error: called `is_none()` after calling `find()` on a string\n+  --> $DIR/search_is_some_fixable.rs:59:13\n+   |\n+LL |     let _ = \"hello world\".find(&s2[2..]).is_none();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.contains()` instead: `!\"hello world\".contains(&s2[2..])`\n+\n+error: called `is_none()` after calling `find()` on a string\n+  --> $DIR/search_is_some_fixable.rs:61:13\n+   |\n+LL |     let _ = s1.find(\"world\").is_none();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.contains()` instead: `!s1.contains(\"world\")`\n+\n+error: called `is_none()` after calling `find()` on a string\n+  --> $DIR/search_is_some_fixable.rs:62:13\n+   |\n+LL |     let _ = s1.find(&s2).is_none();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.contains()` instead: `!s1.contains(&s2)`\n+\n+error: called `is_none()` after calling `find()` on a string\n+  --> $DIR/search_is_some_fixable.rs:63:13\n+   |\n+LL |     let _ = s1.find(&s2[2..]).is_none();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.contains()` instead: `!s1.contains(&s2[2..])`\n+\n+error: called `is_none()` after calling `find()` on a string\n+  --> $DIR/search_is_some_fixable.rs:65:13\n+   |\n+LL |     let _ = s1[2..].find(\"world\").is_none();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.contains()` instead: `!s1[2..].contains(\"world\")`\n+\n+error: called `is_none()` after calling `find()` on a string\n+  --> $DIR/search_is_some_fixable.rs:66:13\n+   |\n+LL |     let _ = s1[2..].find(&s2).is_none();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.contains()` instead: `!s1[2..].contains(&s2)`\n+\n+error: called `is_none()` after calling `find()` on a string\n+  --> $DIR/search_is_some_fixable.rs:67:13\n+   |\n+LL |     let _ = s1[2..].find(&s2[2..]).is_none();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.contains()` instead: `!s1[2..].contains(&s2[2..])`\n+\n+error: aborting due to 30 previous errors\n "}]}