{"sha": "fae440c32aa8a1e3f31e90ca5bdc10968c08efa3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhZTQ0MGMzMmFhOGExZTNmMzFlOTBjYTViZGMxMDk2OGMwOGVmYTM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-08-28T14:14:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-28T14:14:54Z"}, "message": "Merge #10025\n\n10025: Don't mutate syntax trees when preparing proc-macro input r=Veykril a=Veykril\n\nFixes #10013\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "38c514e881bf3ff25ea003135b9bb2bece6f5943", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38c514e881bf3ff25ea003135b9bb2bece6f5943"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fae440c32aa8a1e3f31e90ca5bdc10968c08efa3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhKkTeCRBK7hj4Ov3rIwAAKsMIABnvSW2QhRHloZNj6BVzd1dT\nbvHZxkFNTumvuxGeK0nMPakKXlSL45EiGkPZWobhkzvEi/v0CEZsWPFS79NCHPWE\nqsokY6qfn+AP2pY6zyjMdzvrG3+Rye7npI70uDIh10qtnl4tICq0ExkR174Uznzb\nEx5+ulRbA6qYwQ9rsatYvGUGAzJTofjzFbv161Z7rxqDcCsIlXVAV1U82LXVIuFQ\nhdv/3vPGi3g+2d66WlUTOl4r6dLN7gFw0Bp73R4xtOBYWRkQKmGbpKys46q6XJHW\n2h+HzbitQ4koITSUPJkDqPauEUmuTcnXycAhYnzAymW1IxPoCmyikLbkmyX2dKA=\n=JHkU\n-----END PGP SIGNATURE-----\n", "payload": "tree 38c514e881bf3ff25ea003135b9bb2bece6f5943\nparent 9ea3c4d53bc41984b96013a6085d92d6b19e9952\nparent 1195cb50c25ca86b6d555c08687dfb5bca237753\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1630160094 +0000\ncommitter GitHub <noreply@github.com> 1630160094 +0000\n\nMerge #10025\n\n10025: Don't mutate syntax trees when preparing proc-macro input r=Veykril a=Veykril\n\nFixes #10013\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fae440c32aa8a1e3f31e90ca5bdc10968c08efa3", "html_url": "https://github.com/rust-lang/rust/commit/fae440c32aa8a1e3f31e90ca5bdc10968c08efa3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fae440c32aa8a1e3f31e90ca5bdc10968c08efa3/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ea3c4d53bc41984b96013a6085d92d6b19e9952", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ea3c4d53bc41984b96013a6085d92d6b19e9952", "html_url": "https://github.com/rust-lang/rust/commit/9ea3c4d53bc41984b96013a6085d92d6b19e9952"}, {"sha": "1195cb50c25ca86b6d555c08687dfb5bca237753", "url": "https://api.github.com/repos/rust-lang/rust/commits/1195cb50c25ca86b6d555c08687dfb5bca237753", "html_url": "https://github.com/rust-lang/rust/commit/1195cb50c25ca86b6d555c08687dfb5bca237753"}], "stats": {"total": 235, "additions": 100, "deletions": 135}, "files": [{"sha": "90fcb2ac27dc6b55f3c084f49bdb7709c88e4814", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fae440c32aa8a1e3f31e90ca5bdc10968c08efa3/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/fae440c32aa8a1e3f31e90ca5bdc10968c08efa3/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=fae440c32aa8a1e3f31e90ca5bdc10968c08efa3", "patch": "@@ -511,6 +511,7 @@ dependencies = [\n  \"cov-mark\",\n  \"either\",\n  \"expect-test\",\n+ \"itertools\",\n  \"la-arena\",\n  \"limit\",\n  \"log\",\n@@ -887,6 +888,7 @@ name = \"mbe\"\n version = \"0.0.0\"\n dependencies = [\n  \"cov-mark\",\n+ \"expect-test\",\n  \"log\",\n  \"parser\",\n  \"profile\","}, {"sha": "743e8079103c8984b693c7a07e581d1d29a8d182", "filename": "crates/hir_expand/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fae440c32aa8a1e3f31e90ca5bdc10968c08efa3/crates%2Fhir_expand%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/fae440c32aa8a1e3f31e90ca5bdc10968c08efa3/crates%2Fhir_expand%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2FCargo.toml?ref=fae440c32aa8a1e3f31e90ca5bdc10968c08efa3", "patch": "@@ -14,6 +14,7 @@ log = \"0.4.8\"\n either = \"1.5.3\"\n rustc-hash = \"1.0.0\"\n la-arena = { version = \"0.2.0\", path = \"../../lib/arena\" }\n+itertools = \"0.10.0\"\n \n base_db = { path = \"../base_db\", version = \"0.0.0\" }\n cfg = { path = \"../cfg\", version = \"0.0.0\" }"}, {"sha": "fc1dc048ef232c148bcf44fe5fdb7e923f798134", "filename": "crates/hir_expand/src/db.rs", "status": "modified", "additions": 27, "deletions": 8, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/fae440c32aa8a1e3f31e90ca5bdc10968c08efa3/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fae440c32aa8a1e3f31e90ca5bdc10968c08efa3/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fdb.rs?ref=fae440c32aa8a1e3f31e90ca5bdc10968c08efa3", "patch": "@@ -3,19 +3,20 @@\n use std::sync::Arc;\n \n use base_db::{salsa, SourceDatabase};\n+use itertools::Itertools;\n use limit::Limit;\n use mbe::{ExpandError, ExpandResult};\n use parser::{FragmentKind, T};\n use syntax::{\n     algo::diff,\n-    ast::{self, NameOwner},\n-    AstNode, GreenNode, Parse, SyntaxNode, SyntaxToken,\n+    ast::{self, AttrsOwner, NameOwner},\n+    AstNode, GreenNode, Parse, SyntaxNode, SyntaxToken, TextRange,\n };\n \n use crate::{\n-    ast_id_map::AstIdMap, hygiene::HygieneFrame, input::process_macro_input, BuiltinAttrExpander,\n-    BuiltinDeriveExpander, BuiltinFnLikeExpander, HirFileId, HirFileIdRepr, MacroCallId,\n-    MacroCallKind, MacroCallLoc, MacroDefId, MacroDefKind, MacroFile, ProcMacroExpander,\n+    ast_id_map::AstIdMap, hygiene::HygieneFrame, BuiltinAttrExpander, BuiltinDeriveExpander,\n+    BuiltinFnLikeExpander, HirFileId, HirFileIdRepr, MacroCallId, MacroCallKind, MacroCallLoc,\n+    MacroDefId, MacroDefKind, MacroFile, ProcMacroExpander,\n };\n \n /// Total limit on the number of tokens produced by any macro invocation.\n@@ -257,9 +258,28 @@ fn parse_macro_expansion(\n \n fn macro_arg(db: &dyn AstDatabase, id: MacroCallId) -> Option<Arc<(tt::Subtree, mbe::TokenMap)>> {\n     let arg = db.macro_arg_text(id)?;\n-    let (mut tt, tmap) = mbe::syntax_node_to_token_tree(&SyntaxNode::new_root(arg));\n+    let loc = db.lookup_intern_macro(id);\n+\n+    let node = SyntaxNode::new_root(arg);\n+    let censor = match loc.kind {\n+        MacroCallKind::FnLike { .. } => None,\n+        MacroCallKind::Derive { derive_attr_index, .. } => match ast::Item::cast(node.clone()) {\n+            Some(item) => item\n+                .attrs()\n+                .map(|attr| attr.syntax().text_range())\n+                .take(derive_attr_index as usize + 1)\n+                .fold1(TextRange::cover),\n+            None => None,\n+        },\n+        MacroCallKind::Attr { invoc_attr_index, .. } => match ast::Item::cast(node.clone()) {\n+            Some(item) => {\n+                item.attrs().nth(invoc_attr_index as usize).map(|attr| attr.syntax().text_range())\n+            }\n+            None => None,\n+        },\n+    };\n+    let (mut tt, tmap) = mbe::syntax_node_to_token_tree_censored(&node, censor);\n \n-    let loc: MacroCallLoc = db.lookup_intern_macro(id);\n     if loc.def.is_proc_macro() {\n         // proc macros expect their inputs without parentheses, MBEs expect it with them included\n         tt.delimiter = None;\n@@ -271,7 +291,6 @@ fn macro_arg(db: &dyn AstDatabase, id: MacroCallId) -> Option<Arc<(tt::Subtree,\n fn macro_arg_text(db: &dyn AstDatabase, id: MacroCallId) -> Option<GreenNode> {\n     let loc = db.lookup_intern_macro(id);\n     let arg = loc.kind.arg(db)?;\n-    let arg = process_macro_input(&loc.kind, arg);\n     if matches!(loc.kind, MacroCallKind::FnLike { .. }) {\n         let first = arg.first_child_or_token().map_or(T![.], |it| it.kind());\n         let last = arg.last_child_or_token().map_or(T![.], |it| it.kind());"}, {"sha": "0ad48a470b2953c42a8aa07437ea623afce99d15", "filename": "crates/hir_expand/src/input.rs", "status": "removed", "additions": 0, "deletions": 120, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/9ea3c4d53bc41984b96013a6085d92d6b19e9952/crates%2Fhir_expand%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ea3c4d53bc41984b96013a6085d92d6b19e9952/crates%2Fhir_expand%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Finput.rs?ref=9ea3c4d53bc41984b96013a6085d92d6b19e9952", "patch": "@@ -1,120 +0,0 @@\n-//! Macro input conditioning.\n-\n-use syntax::{\n-    ast::{self, make, AttrsOwner},\n-    AstNode, SyntaxNode,\n-};\n-\n-use crate::{\n-    name::{name, AsName},\n-    MacroCallKind,\n-};\n-\n-pub(crate) fn process_macro_input(macro_call_kind: &MacroCallKind, node: SyntaxNode) -> SyntaxNode {\n-    match macro_call_kind {\n-        MacroCallKind::FnLike { .. } => node,\n-        MacroCallKind::Derive { derive_attr_index, .. } => {\n-            let item = match ast::Item::cast(node.clone()) {\n-                Some(item) => item,\n-                None => return node,\n-            };\n-\n-            remove_derives_up_to(item, *derive_attr_index as usize).syntax().clone()\n-        }\n-        MacroCallKind::Attr { invoc_attr_index, .. } => {\n-            let item = match ast::Item::cast(node.clone()) {\n-                Some(item) => item,\n-                None => return node,\n-            };\n-\n-            remove_attr_invoc(item, *invoc_attr_index as usize).syntax().clone()\n-        }\n-    }\n-}\n-\n-/// Removes `#[derive]` attributes from `item`, up to `attr_index`.\n-fn remove_derives_up_to(item: ast::Item, attr_index: usize) -> ast::Item {\n-    let item = item.clone_for_update();\n-    for attr in item.attrs().take(attr_index + 1) {\n-        if let Some(name) =\n-            attr.path().and_then(|path| path.as_single_segment()).and_then(|seg| seg.name_ref())\n-        {\n-            if name.as_name() == name![derive] {\n-                replace_attr(&item, &attr);\n-            }\n-        }\n-    }\n-    item\n-}\n-\n-/// Removes the attribute invoking an attribute macro from `item`.\n-fn remove_attr_invoc(item: ast::Item, attr_index: usize) -> ast::Item {\n-    let item = item.clone_for_update();\n-    let attr = item\n-        .attrs()\n-        .nth(attr_index)\n-        .unwrap_or_else(|| panic!(\"cannot find attribute #{}\", attr_index));\n-    replace_attr(&item, &attr);\n-    item\n-}\n-\n-fn replace_attr(item: &ast::Item, attr: &ast::Attr) {\n-    let syntax_index = attr.syntax().index();\n-    let ws = make::tokens::whitespace(&\" \".repeat(u32::from(attr.syntax().text().len()) as usize));\n-    item.syntax().splice_children(syntax_index..syntax_index + 1, vec![ws.into()]);\n-}\n-\n-#[cfg(test)]\n-mod tests {\n-    use base_db::{fixture::WithFixture, SourceDatabase};\n-    use expect_test::{expect, Expect};\n-\n-    use crate::test_db::TestDB;\n-\n-    use super::*;\n-\n-    fn test_remove_derives_up_to(attr: usize, ra_fixture: &str, expect: Expect) {\n-        let (db, file_id) = TestDB::with_single_file(ra_fixture);\n-        let parsed = db.parse(file_id);\n-\n-        let mut items: Vec<_> =\n-            parsed.syntax_node().descendants().filter_map(ast::Item::cast).collect();\n-        assert_eq!(items.len(), 1);\n-\n-        let item = remove_derives_up_to(items.pop().unwrap(), attr);\n-        let res: String =\n-            item.syntax().children_with_tokens().map(|e| format!(\"{:?}\\n\", e)).collect();\n-        expect.assert_eq(&res);\n-    }\n-\n-    #[test]\n-    fn remove_derive() {\n-        test_remove_derives_up_to(\n-            2,\n-            r#\"\n-#[allow(unused)]\n-#[derive(Copy)]\n-#[derive(Hello)]\n-#[derive(Clone)]\n-struct A {\n-    bar: u32\n-}\n-        \"#,\n-            expect![[r#\"\n-                Node(ATTR@0..16)\n-                Token(WHITESPACE@16..17 \"\\n\")\n-                Token(WHITESPACE@17..32 \"               \")\n-                Token(WHITESPACE@32..33 \"\\n\")\n-                Token(WHITESPACE@33..49 \"                \")\n-                Token(WHITESPACE@49..50 \"\\n\")\n-                Node(ATTR@50..66)\n-                Token(WHITESPACE@66..67 \"\\n\")\n-                Token(STRUCT_KW@67..73 \"struct\")\n-                Token(WHITESPACE@73..74 \" \")\n-                Node(NAME@74..75)\n-                Token(WHITESPACE@75..76 \" \")\n-                Node(RECORD_FIELD_LIST@76..92)\n-            \"#]],\n-        );\n-    }\n-}"}, {"sha": "a12dd07426a365c7784156cc2dd0a157a3036dfb", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fae440c32aa8a1e3f31e90ca5bdc10968c08efa3/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fae440c32aa8a1e3f31e90ca5bdc10968c08efa3/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=fae440c32aa8a1e3f31e90ca5bdc10968c08efa3", "patch": "@@ -14,7 +14,6 @@ pub mod builtin_macro;\n pub mod proc_macro;\n pub mod quote;\n pub mod eager;\n-mod input;\n \n use base_db::ProcMacroKind;\n use either::Either;"}, {"sha": "411bb75dbcabcd24fdd422b9d5ba80bf58cde45e", "filename": "crates/mbe/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fae440c32aa8a1e3f31e90ca5bdc10968c08efa3/crates%2Fmbe%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/fae440c32aa8a1e3f31e90ca5bdc10968c08efa3/crates%2Fmbe%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2FCargo.toml?ref=fae440c32aa8a1e3f31e90ca5bdc10968c08efa3", "patch": "@@ -13,6 +13,7 @@ cov-mark = \"2.0.0-pre.1\"\n rustc-hash = \"1.1.0\"\n smallvec = \"1.2.0\"\n log = \"0.4.8\"\n+expect-test = \"1.1\"\n \n syntax = { path = \"../syntax\", version = \"0.0.0\" }\n parser = { path = \"../parser\", version = \"0.0.0\" }"}, {"sha": "242d07c9ec271e38e882877d7409644f7adf51e8", "filename": "crates/mbe/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fae440c32aa8a1e3f31e90ca5bdc10968c08efa3/crates%2Fmbe%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fae440c32aa8a1e3f31e90ca5bdc10968c08efa3/crates%2Fmbe%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Flib.rs?ref=fae440c32aa8a1e3f31e90ca5bdc10968c08efa3", "patch": "@@ -67,7 +67,7 @@ impl fmt::Display for ExpandError {\n pub use crate::{\n     syntax_bridge::{\n         parse_exprs_with_sep, parse_to_token_tree, syntax_node_to_token_tree,\n-        token_tree_to_syntax_node,\n+        syntax_node_to_token_tree_censored, token_tree_to_syntax_node,\n     },\n     token_map::TokenMap,\n };"}, {"sha": "6aa034abdc6235332ed3a170ad4f035c22decf94", "filename": "crates/mbe/src/syntax_bridge.rs", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/fae440c32aa8a1e3f31e90ca5bdc10968c08efa3/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fae440c32aa8a1e3f31e90ca5bdc10968c08efa3/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs?ref=fae440c32aa8a1e3f31e90ca5bdc10968c08efa3", "patch": "@@ -1,5 +1,7 @@\n //! Conversions between [`SyntaxNode`] and [`tt::TokenTree`].\n \n+use std::iter;\n+\n use parser::{FragmentKind, ParseError, TreeSink};\n use rustc_hash::FxHashMap;\n use syntax::{\n@@ -16,8 +18,17 @@ use crate::{ExpandError, TokenMap};\n /// Convert the syntax node to a `TokenTree` (what macro\n /// will consume).\n pub fn syntax_node_to_token_tree(node: &SyntaxNode) -> (tt::Subtree, TokenMap) {\n+    syntax_node_to_token_tree_censored(node, None)\n+}\n+\n+/// Convert the syntax node to a `TokenTree` (what macro will consume)\n+/// with the censored range excluded.\n+pub fn syntax_node_to_token_tree_censored(\n+    node: &SyntaxNode,\n+    censor: Option<TextRange>,\n+) -> (tt::Subtree, TokenMap) {\n     let global_offset = node.text_range().start();\n-    let mut c = Convertor::new(node, global_offset);\n+    let mut c = Convertor::new(node, global_offset, censor);\n     let subtree = convert_tokens(&mut c);\n     c.id_alloc.map.shrink_to_fit();\n     (subtree, c.id_alloc.map)\n@@ -446,16 +457,24 @@ impl<'a> TokenConvertor for RawConvertor<'a> {\n struct Convertor {\n     id_alloc: TokenIdAlloc,\n     current: Option<SyntaxToken>,\n+    censor: Option<TextRange>,\n     range: TextRange,\n     punct_offset: Option<(SyntaxToken, TextSize)>,\n }\n \n impl Convertor {\n-    fn new(node: &SyntaxNode, global_offset: TextSize) -> Convertor {\n+    fn new(node: &SyntaxNode, global_offset: TextSize, censor: Option<TextRange>) -> Convertor {\n+        let first = node.first_token();\n+        let current = match censor {\n+            Some(censor) => iter::successors(first, |token| token.next_token())\n+                .find(|token| !censor.contains_range(token.text_range())),\n+            None => first,\n+        };\n         Convertor {\n             id_alloc: { TokenIdAlloc { map: TokenMap::default(), global_offset, next_id: 0 } },\n-            current: node.first_token(),\n+            current,\n             range: node.text_range(),\n+            censor,\n             punct_offset: None,\n         }\n     }\n@@ -512,8 +531,11 @@ impl TokenConvertor for Convertor {\n         if !&self.range.contains_range(curr.text_range()) {\n             return None;\n         }\n-        self.current = curr.next_token();\n-\n+        self.current = match self.censor {\n+            Some(censor) => iter::successors(curr.next_token(), |token| token.next_token())\n+                .find(|token| !censor.contains_range(token.text_range())),\n+            None => curr.next_token(),\n+        };\n         let token = if curr.kind().is_punct() {\n             let range = curr.text_range();\n             let range = TextRange::at(range.start(), TextSize::of('.'));"}, {"sha": "c2a1696b3d086f7dac14c5864177aa10f3c2ec75", "filename": "crates/mbe/src/tests.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/fae440c32aa8a1e3f31e90ca5bdc10968c08efa3/crates%2Fmbe%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fae440c32aa8a1e3f31e90ca5bdc10968c08efa3/crates%2Fmbe%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Ftests.rs?ref=fae440c32aa8a1e3f31e90ca5bdc10968c08efa3", "patch": "@@ -228,3 +228,44 @@ fn debug_dump_ignore_spaces(node: &syntax::SyntaxNode) -> String {\n \n     buf\n }\n+\n+#[test]\n+fn test_node_to_tt_censor() {\n+    use syntax::ast::{AttrsOwner, ModuleItemOwner};\n+\n+    let source = r##\"\n+#[attr0]\n+#[attr1]\n+#[attr2]\n+struct Struct {\n+    field: ()\n+}\n+\"##;\n+    let source_file = ast::SourceFile::parse(&source).ok().unwrap();\n+    let item = source_file.items().next().unwrap();\n+    let attr = item.attrs().nth(1).unwrap();\n+\n+    let (tt, _) =\n+        syntax_node_to_token_tree_censored(item.syntax(), Some(attr.syntax().text_range()));\n+    expect_test::expect![[r##\"# [attr0] # [attr2] struct Struct {field : ()}\"##]]\n+        .assert_eq(&tt.to_string());\n+\n+    let source = r##\"\n+#[derive(Derive0)]\n+#[derive(Derive1)]\n+#[derive(Derive2)]\n+struct Struct {\n+    field: ()\n+}\n+\"##;\n+    let source_file = ast::SourceFile::parse(&source).ok().unwrap();\n+    let item = source_file.items().next().unwrap();\n+    let attr = item.attrs().nth(1).unwrap();\n+\n+    let (tt, _) = syntax_node_to_token_tree_censored(\n+        item.syntax(),\n+        Some(attr.syntax().text_range().cover_offset(0.into())),\n+    );\n+    expect_test::expect![[r##\"# [derive (Derive2)] struct Struct {field : ()}\"##]]\n+        .assert_eq(&tt.to_string());\n+}"}]}