{"sha": "589108baf644ea44a10a7258d67da254e1e09fae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4OTEwOGJhZjY0NGVhNDRhMTBhNzI1OGQ2N2RhMjU0ZTFlMDlmYWU=", "commit": {"author": {"name": "Jonathan S", "email": "gereeter+code@gmail.com", "date": "2016-03-31T02:57:31Z"}, "committer": {"name": "Jonathan S", "email": "gereeter+code@gmail.com", "date": "2016-03-31T03:02:36Z"}, "message": "Test that HashMap, HashSet, and their iterators are properly covariant", "tree": {"sha": "3eadc85319441c15cd0e979e4fc418e4bd2081cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3eadc85319441c15cd0e979e4fc418e4bd2081cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/589108baf644ea44a10a7258d67da254e1e09fae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/589108baf644ea44a10a7258d67da254e1e09fae", "html_url": "https://github.com/rust-lang/rust/commit/589108baf644ea44a10a7258d67da254e1e09fae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/589108baf644ea44a10a7258d67da254e1e09fae/comments", "author": {"login": "gereeter", "id": 2328242, "node_id": "MDQ6VXNlcjIzMjgyNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2328242?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gereeter", "html_url": "https://github.com/gereeter", "followers_url": "https://api.github.com/users/gereeter/followers", "following_url": "https://api.github.com/users/gereeter/following{/other_user}", "gists_url": "https://api.github.com/users/gereeter/gists{/gist_id}", "starred_url": "https://api.github.com/users/gereeter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gereeter/subscriptions", "organizations_url": "https://api.github.com/users/gereeter/orgs", "repos_url": "https://api.github.com/users/gereeter/repos", "events_url": "https://api.github.com/users/gereeter/events{/privacy}", "received_events_url": "https://api.github.com/users/gereeter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gereeter", "id": 2328242, "node_id": "MDQ6VXNlcjIzMjgyNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2328242?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gereeter", "html_url": "https://github.com/gereeter", "followers_url": "https://api.github.com/users/gereeter/followers", "following_url": "https://api.github.com/users/gereeter/following{/other_user}", "gists_url": "https://api.github.com/users/gereeter/gists{/gist_id}", "starred_url": "https://api.github.com/users/gereeter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gereeter/subscriptions", "organizations_url": "https://api.github.com/users/gereeter/orgs", "repos_url": "https://api.github.com/users/gereeter/repos", "events_url": "https://api.github.com/users/gereeter/events{/privacy}", "received_events_url": "https://api.github.com/users/gereeter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1639f2d2899310038635be2c307b60adf2bde125", "url": "https://api.github.com/repos/rust-lang/rust/commits/1639f2d2899310038635be2c307b60adf2bde125", "html_url": "https://github.com/rust-lang/rust/commit/1639f2d2899310038635be2c307b60adf2bde125"}], "stats": {"total": 29, "additions": 29, "deletions": 0}, "files": [{"sha": "80b5448800e348b53957e8f4bc450b891765457c", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/589108baf644ea44a10a7258d67da254e1e09fae/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/589108baf644ea44a10a7258d67da254e1e09fae/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=589108baf644ea44a10a7258d67da254e1e09fae", "patch": "@@ -1670,6 +1670,20 @@ impl<K, S, Q: ?Sized> super::Recover<Q> for HashMap<K, (), S>\n     }\n }\n \n+#[allow(dead_code)]\n+fn assert_covariance() {\n+    fn map_key<'new>(v: HashMap<&'static str, u8>) -> HashMap<&'new str, u8> { v }\n+    fn map_val<'new>(v: HashMap<u8, &'static str>) -> HashMap<u8, &'new str> { v }\n+    fn iter_key<'a, 'new>(v: Iter<'a, &'static str, u8>) -> Iter<'a, &'new str, u8> { v }\n+    fn iter_val<'a, 'new>(v: Iter<'a, u8, &'static str>) -> Iter<'a, u8, &'new str> { v }\n+    fn into_iter_key<'new>(v: IntoIter<&'static str, u8>) -> IntoIter<&'new str, u8> { v }\n+    fn into_iter_val<'new>(v: IntoIter<u8, &'static str>) -> IntoIter<u8, &'new str> { v }\n+    fn keys_key<'a, 'new>(v: Keys<'a, &'static str, u8>) -> Keys<'a, &'new str, u8> { v }\n+    fn keys_val<'a, 'new>(v: Keys<'a, u8, &'static str>) -> Keys<'a, u8, &'new str> { v }\n+    fn values_key<'a, 'new>(v: Values<'a, &'static str, u8>) -> Values<'a, &'new str, u8> { v }\n+    fn values_val<'a, 'new>(v: Values<'a, u8, &'static str>) -> Values<'a, u8, &'new str> { v }\n+}\n+\n #[cfg(test)]\n mod test_map {\n     use prelude::v1::*;"}, {"sha": "954adf313be0db086de984ac1f8797ff1e2ff90f", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/589108baf644ea44a10a7258d67da254e1e09fae/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/589108baf644ea44a10a7258d67da254e1e09fae/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=589108baf644ea44a10a7258d67da254e1e09fae", "patch": "@@ -1024,6 +1024,21 @@ impl<'a, T, S> Iterator for Union<'a, T, S>\n     fn size_hint(&self) -> (usize, Option<usize>) { self.iter.size_hint() }\n }\n \n+#[allow(dead_code)]\n+fn assert_covariance() {\n+    fn set<'new>(v: HashSet<&'static str>) -> HashSet<&'new str> { v }\n+    fn iter<'a, 'new>(v: Iter<'a, &'static str>) -> Iter<'a, &'new str> { v }\n+    fn into_iter<'new>(v: IntoIter<&'static str>) -> IntoIter<&'new str> { v }\n+    fn difference<'a, 'new>(v: Difference<'a, &'static str, RandomState>)\n+        -> Difference<'a, &'new str, RandomState> { v }\n+    fn symmetric_difference<'a, 'new>(v: SymmetricDifference<'a, &'static str, RandomState>)\n+        -> SymmetricDifference<'a, &'new str, RandomState> { v }\n+    fn intersection<'a, 'new>(v: Intersection<'a, &'static str, RandomState>)\n+        -> Intersection<'a, &'new str, RandomState> { v }\n+    fn union<'a, 'new>(v: Union<'a, &'static str, RandomState>)\n+        -> Union<'a, &'new str, RandomState> { v }\n+}\n+\n #[cfg(test)]\n mod test_set {\n     use prelude::v1::*;"}]}