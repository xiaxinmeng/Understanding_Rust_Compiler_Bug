{"sha": "d98fcbd56171186b246ea249d309415d502b4910", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5OGZjYmQ1NjE3MTE4NmIyNDZlYTI0OWQzMDk0MTVkNTAyYjQ5MTA=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-01-28T06:09:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-28T06:09:20Z"}, "message": "Rollup merge of #81433 - lcnr:stop-looking-into-ty-alias, r=oli-obk\n\nconst_evaluatable: stop looking into type aliases\n\nsee https://rust-lang.zulipchat.com/#narrow/stream/260443-project-const-generics/topic/const_evaluatable.3A.20type.20alias\n\nr? ````@oli-obk````", "tree": {"sha": "05c46193f11ecbe6cd85b6c275301966524a5699", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05c46193f11ecbe6cd85b6c275301966524a5699"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d98fcbd56171186b246ea249d309415d502b4910", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgElUQCRBK7hj4Ov3rIwAAdHIIAJ3WCO2ZlBsbTkLWL/ZBLCpt\nKJDl+qUK4cnSIsGuxeGqsA+VFZBSuGrkOXjZASs/LcKwlYZkgxIDB4QHrq39bM/r\nm/j6vR4bcuQxNGNFL4JybQ8EMk6Zm+GOC/Sgcs3S9LHl3fyf8oR5YAFTrDxNdFF9\nUNcpQ5E658eEx6Dzl5ylrGHtFYOJ7/1JA1TBxPA/4liuX0sSyWvE9w8pmbbYEFbm\nziNUB2K0AISyPRlKNVCgfSi8yaW3AZn/Y4Loq1Bt0r/A+HODlZFle5pHFzBsnyN+\nb17M+VDMmXwrg89fwXnc8OxQLTcse7TgQwPwvqYdov8OSt7hIXEOWu5AON2BtOI=\n=QKT9\n-----END PGP SIGNATURE-----\n", "payload": "tree 05c46193f11ecbe6cd85b6c275301966524a5699\nparent 76548bacb6af74a6d3f7607ad4e205b45d18135e\nparent b519deb224cf94f61599ba0626e2ef3db22826f3\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1611814160 +0900\ncommitter GitHub <noreply@github.com> 1611814160 +0900\n\nRollup merge of #81433 - lcnr:stop-looking-into-ty-alias, r=oli-obk\n\nconst_evaluatable: stop looking into type aliases\n\nsee https://rust-lang.zulipchat.com/#narrow/stream/260443-project-const-generics/topic/const_evaluatable.3A.20type.20alias\n\nr? ````@oli-obk````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d98fcbd56171186b246ea249d309415d502b4910", "html_url": "https://github.com/rust-lang/rust/commit/d98fcbd56171186b246ea249d309415d502b4910", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d98fcbd56171186b246ea249d309415d502b4910/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76548bacb6af74a6d3f7607ad4e205b45d18135e", "url": "https://api.github.com/repos/rust-lang/rust/commits/76548bacb6af74a6d3f7607ad4e205b45d18135e", "html_url": "https://github.com/rust-lang/rust/commit/76548bacb6af74a6d3f7607ad4e205b45d18135e"}, {"sha": "b519deb224cf94f61599ba0626e2ef3db22826f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b519deb224cf94f61599ba0626e2ef3db22826f3", "html_url": "https://github.com/rust-lang/rust/commit/b519deb224cf94f61599ba0626e2ef3db22826f3"}], "stats": {"total": 73, "additions": 35, "deletions": 38}, "files": [{"sha": "b1d98d75196d5be4b3cc351839fda86c5ad5c31b", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d98fcbd56171186b246ea249d309415d502b4910/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d98fcbd56171186b246ea249d309415d502b4910/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=d98fcbd56171186b246ea249d309415d502b4910", "patch": "@@ -50,8 +50,6 @@ use rustc_span::{Span, DUMMY_SP};\n use rustc_target::spec::abi;\n use rustc_trait_selection::traits::error_reporting::suggestions::NextTypeParamName;\n \n-use std::ops::ControlFlow;\n-\n mod item_bounds;\n mod type_of;\n \n@@ -2080,38 +2078,6 @@ fn const_evaluatable_predicates_of<'tcx>(\n                 ));\n             }\n         }\n-\n-        // Look into `TyAlias`.\n-        fn visit_ty(&mut self, ty: &'tcx hir::Ty<'tcx>) {\n-            use ty::fold::{TypeFoldable, TypeVisitor};\n-            struct TyAliasVisitor<'a, 'tcx> {\n-                tcx: TyCtxt<'tcx>,\n-                preds: &'a mut FxIndexSet<(ty::Predicate<'tcx>, Span)>,\n-                span: Span,\n-            }\n-\n-            impl<'a, 'tcx> TypeVisitor<'tcx> for TyAliasVisitor<'a, 'tcx> {\n-                fn visit_const(&mut self, ct: &'tcx Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n-                    if let ty::ConstKind::Unevaluated(def, substs, None) = ct.val {\n-                        self.preds.insert((\n-                            ty::PredicateKind::ConstEvaluatable(def, substs).to_predicate(self.tcx),\n-                            self.span,\n-                        ));\n-                    }\n-                    ControlFlow::CONTINUE\n-                }\n-            }\n-\n-            if let hir::TyKind::Path(hir::QPath::Resolved(None, path)) = ty.kind {\n-                if let Res::Def(DefKind::TyAlias, def_id) = path.res {\n-                    let mut visitor =\n-                        TyAliasVisitor { tcx: self.tcx, preds: &mut self.preds, span: path.span };\n-                    self.tcx.type_of(def_id).visit_with(&mut visitor);\n-                }\n-            }\n-\n-            intravisit::walk_ty(self, ty)\n-        }\n     }\n \n     let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);"}, {"sha": "acf0a52ce5be1462359f10500e32ec9378675590", "filename": "src/test/ui/const-generics/const_evaluatable_checked/simple_fail.full.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d98fcbd56171186b246ea249d309415d502b4910/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d98fcbd56171186b246ea249d309415d502b4910/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.full.stderr?ref=d98fcbd56171186b246ea249d309415d502b4910", "patch": "@@ -1,9 +1,15 @@\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/simple_fail.rs:9:48\n+   |\n+LL | fn test<const N: usize>() -> Arr<N> where [u8; N - 1]: Sized {\n+   |                                                ^^^^^ attempt to compute `0_usize - 1_usize`, which would overflow\n+\n error[E0080]: evaluation of constant value failed\n   --> $DIR/simple_fail.rs:6:33\n    |\n LL | type Arr<const N: usize> = [u8; N - 1];\n    |                                 ^^^^^ attempt to compute `0_usize - 1_usize`, which would overflow\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "fe5463f8acc4a8ad264388ff3d99dbe1852d448a", "filename": "src/test/ui/const-generics/const_evaluatable_checked/simple_fail.min.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d98fcbd56171186b246ea249d309415d502b4910/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d98fcbd56171186b246ea249d309415d502b4910/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.min.stderr?ref=d98fcbd56171186b246ea249d309415d502b4910", "patch": "@@ -7,5 +7,14 @@ LL | type Arr<const N: usize> = [u8; N - 1];\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n    = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n \n-error: aborting due to previous error\n+error: generic parameters may not be used in const operations\n+  --> $DIR/simple_fail.rs:9:48\n+   |\n+LL | fn test<const N: usize>() -> Arr<N> where [u8; N - 1]: Sized {\n+   |                                                ^ cannot perform const operation using `N`\n+   |\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n+   = help: use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "c9535d04244d86fa61e74027289f7496313cf40b", "filename": "src/test/ui/const-generics/const_evaluatable_checked/simple_fail.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d98fcbd56171186b246ea249d309415d502b4910/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d98fcbd56171186b246ea249d309415d502b4910/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.rs?ref=d98fcbd56171186b246ea249d309415d502b4910", "patch": "@@ -1,12 +1,14 @@\n // revisions: full min\n #![cfg_attr(full, feature(const_generics))]\n-#![feature(const_evaluatable_checked)]\n+#![cfg_attr(full, feature(const_evaluatable_checked))]\n #![allow(incomplete_features)]\n \n type Arr<const N: usize> = [u8; N - 1]; //[full]~ ERROR evaluation of constant\n //[min]~^ ERROR generic parameters may not be used in const operations\n \n-fn test<const N: usize>() -> Arr<N> where Arr<N>: Sized {\n+fn test<const N: usize>() -> Arr<N> where [u8; N - 1]: Sized {\n+//[min]~^ ERROR generic parameters may not be used in const operations\n+//[full]~^^ ERROR evaluation of constant\n     todo!()\n }\n "}, {"sha": "5c768a61be25e1e8d6b56c8976ca955d3f8e65e6", "filename": "src/test/ui/const-generics/const_evaluatable_checked/ty-alias-substitution.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d98fcbd56171186b246ea249d309415d502b4910/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fty-alias-substitution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d98fcbd56171186b246ea249d309415d502b4910/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fty-alias-substitution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fty-alias-substitution.rs?ref=d98fcbd56171186b246ea249d309415d502b4910", "patch": "@@ -0,0 +1,14 @@\n+// check-pass\n+// Test that we correctly substitute generic arguments for type aliases.\n+#![feature(const_generics, const_evaluatable_checked)]\n+#![allow(incomplete_features)]\n+\n+type Alias<T, const N: usize> = [T; N + 1];\n+\n+fn foo<const M: usize>() -> Alias<u32, M>  where [u8; M + 1]: Sized {\n+    [0; M + 1]\n+}\n+\n+fn main() {\n+    foo::<0>();\n+}"}]}