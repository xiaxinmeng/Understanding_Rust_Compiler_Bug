{"sha": "9b538e8e62240e9736fcdaa5355b4effd87f126d", "node_id": "C_kwDOAAsO6NoAKDliNTM4ZThlNjIyNDBlOTczNmZjZGFhNTM1NWI0ZWZmZDg3ZjEyNmQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-12T05:52:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-12T05:52:34Z"}, "message": "Rollup merge of #106309 - compiler-errors:prefer-non-err-candidates, r=oli-obk\n\nPrefer non-`[type error]` candidates during selection\n\nFixes #102130\nFixes #106351\n\nr? types\n\nnote: Alternatively we could filter out error where-clauses during param-env construction? But we still need to filter out impls with errors during `match_impl`, I think.", "tree": {"sha": "28ea070ddd05a2d44f68a2b1e82ca164e214d4e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28ea070ddd05a2d44f68a2b1e82ca164e214d4e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b538e8e62240e9736fcdaa5355b4effd87f126d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjv6AiCRBK7hj4Ov3rIwAA304IADzEMZAMayuBYiaHoWUjEaI+\n32h8MoqzxMb3C24ROnDQJ78tKzyFS6M2UgJYNJZpYwqT/Dtvn+HUct5qLDVVEsDW\ndWPk5UH6ntTnGtI53WOpPywN8Q5hb6r49vfv/k9J2W7ERTw8b0hKupCsNk7j9cdb\nSnR6iclD7VYeGHRn71O1liPD4eKbBXA3ksOHze+J//tbXFH38YjAyIgJI2Y5KTa/\nGSDhQI0KEAVDbPu9/P20nn42Nz/mTIYlX25y/+BJeOqo3tsfBzcD6mX+6tFcSQZs\n7tPn1Lhbe+VWvbX/YUCyDiAw21MaS7L4K1fHb4z4O7cP18Zad8QGWb8rxX/Yyqc=\n=Ia/n\n-----END PGP SIGNATURE-----\n", "payload": "tree 28ea070ddd05a2d44f68a2b1e82ca164e214d4e2\nparent a8bd0c04b480255ed3c2eb329fdba403cbf66ecd\nparent 83fbc71d021d2aa741ad18890e7a51a28830d45e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1673502754 +0100\ncommitter GitHub <noreply@github.com> 1673502754 +0100\n\nRollup merge of #106309 - compiler-errors:prefer-non-err-candidates, r=oli-obk\n\nPrefer non-`[type error]` candidates during selection\n\nFixes #102130\nFixes #106351\n\nr? types\n\nnote: Alternatively we could filter out error where-clauses during param-env construction? But we still need to filter out impls with errors during `match_impl`, I think.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b538e8e62240e9736fcdaa5355b4effd87f126d", "html_url": "https://github.com/rust-lang/rust/commit/9b538e8e62240e9736fcdaa5355b4effd87f126d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b538e8e62240e9736fcdaa5355b4effd87f126d/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8bd0c04b480255ed3c2eb329fdba403cbf66ecd", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8bd0c04b480255ed3c2eb329fdba403cbf66ecd", "html_url": "https://github.com/rust-lang/rust/commit/a8bd0c04b480255ed3c2eb329fdba403cbf66ecd"}, {"sha": "83fbc71d021d2aa741ad18890e7a51a28830d45e", "url": "https://api.github.com/repos/rust-lang/rust/commits/83fbc71d021d2aa741ad18890e7a51a28830d45e", "html_url": "https://github.com/rust-lang/rust/commit/83fbc71d021d2aa741ad18890e7a51a28830d45e"}], "stats": {"total": 124, "additions": 58, "deletions": 66}, "files": [{"sha": "b9c5a4e0d0d49b2cb028ea937c0cd79fa3d46dfb", "filename": "compiler/rustc_middle/src/ty/_match.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b538e8e62240e9736fcdaa5355b4effd87f126d/compiler%2Frustc_middle%2Fsrc%2Fty%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b538e8e62240e9736fcdaa5355b4effd87f126d/compiler%2Frustc_middle%2Fsrc%2Fty%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2F_match.rs?ref=9b538e8e62240e9736fcdaa5355b4effd87f126d", "patch": "@@ -89,7 +89,9 @@ impl<'tcx> TypeRelation<'tcx> for Match<'tcx> {\n                 Err(TypeError::Sorts(relate::expected_found(self, a, b)))\n             }\n \n-            (&ty::Error(_), _) | (_, &ty::Error(_)) => Ok(self.tcx().ty_error()),\n+            (&ty::Error(guar), _) | (_, &ty::Error(guar)) => {\n+                Ok(self.tcx().ty_error_with_guaranteed(guar))\n+            }\n \n             _ => relate::super_relate_tys(self, a, b),\n         }"}, {"sha": "65fd8d9753de18b7ad6982fe5124671803917d2b", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b538e8e62240e9736fcdaa5355b4effd87f126d/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b538e8e62240e9736fcdaa5355b4effd87f126d/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=9b538e8e62240e9736fcdaa5355b4effd87f126d", "patch": "@@ -414,7 +414,7 @@ pub fn super_relate_tys<'tcx, R: TypeRelation<'tcx>>(\n             bug!(\"bound types encountered in super_relate_tys\")\n         }\n \n-        (&ty::Error(_), _) | (_, &ty::Error(_)) => Ok(tcx.ty_error()),\n+        (&ty::Error(guar), _) | (_, &ty::Error(guar)) => Ok(tcx.ty_error_with_guaranteed(guar)),\n \n         (&ty::Never, _)\n         | (&ty::Char, _)"}, {"sha": "170c1673dbd77333c14b7deabff40899e1645e52", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b538e8e62240e9736fcdaa5355b4effd87f126d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b538e8e62240e9736fcdaa5355b4effd87f126d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=9b538e8e62240e9736fcdaa5355b4effd87f126d", "patch": "@@ -174,7 +174,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             .param_env\n             .caller_bounds()\n             .iter()\n-            .filter_map(|o| o.to_opt_poly_trait_pred());\n+            .filter_map(|p| p.to_opt_poly_trait_pred())\n+            .filter(|p| !p.references_error());\n \n         // Micro-optimization: filter out predicates relating to different traits.\n         let matching_bounds ="}, {"sha": "2615e2622821d767a2a3d188eeca40f3d14eb01b", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b538e8e62240e9736fcdaa5355b4effd87f126d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b538e8e62240e9736fcdaa5355b4effd87f126d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=9b538e8e62240e9736fcdaa5355b4effd87f126d", "patch": "@@ -2377,6 +2377,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let impl_substs = self.infcx.fresh_substs_for_item(obligation.cause.span, impl_def_id);\n \n         let impl_trait_ref = impl_trait_ref.subst(self.tcx(), impl_substs);\n+        if impl_trait_ref.references_error() {\n+            return Err(());\n+        }\n \n         debug!(?impl_trait_ref);\n "}, {"sha": "49d5c0390bc134508afa37fbdfb7a80572e55140", "filename": "tests/ui/c-variadic/issue-86053-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b538e8e62240e9736fcdaa5355b4effd87f126d/tests%2Fui%2Fc-variadic%2Fissue-86053-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b538e8e62240e9736fcdaa5355b4effd87f126d/tests%2Fui%2Fc-variadic%2Fissue-86053-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fc-variadic%2Fissue-86053-1.rs?ref=9b538e8e62240e9736fcdaa5355b4effd87f126d", "patch": "@@ -2,7 +2,7 @@\n // error-pattern:unexpected `self` parameter in function\n // error-pattern:`...` must be the last argument of a C-variadic function\n // error-pattern:cannot find type `F` in this scope\n-// error-pattern:in type `&'a &'b usize`, reference has a longer lifetime than the data it references\n+\n \n #![feature(c_variadic)]\n #![crate_type=\"lib\"]"}, {"sha": "5a02f4aa93a959651514c560498d0d937a15e814", "filename": "tests/ui/c-variadic/issue-86053-1.stderr", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9b538e8e62240e9736fcdaa5355b4effd87f126d/tests%2Fui%2Fc-variadic%2Fissue-86053-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b538e8e62240e9736fcdaa5355b4effd87f126d/tests%2Fui%2Fc-variadic%2Fissue-86053-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fc-variadic%2Fissue-86053-1.stderr?ref=9b538e8e62240e9736fcdaa5355b4effd87f126d", "patch": "@@ -76,24 +76,6 @@ help: you might be missing a type parameter\n LL | fn ordering4 < 'a , 'b, F     > ( a :            ,   self , self ,   self ,\n    |                       +++\n \n-error[E0491]: in type `&'a &'b usize`, reference has a longer lifetime than the data it references\n-  --> $DIR/issue-86053-1.rs:11:52\n-   |\n-LL |     self , ... ,   self ,   self , ... ) where F : FnOnce ( & 'a & 'b usize ) {\n-   |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: the pointer is valid for the lifetime `'a` as defined here\n-  --> $DIR/issue-86053-1.rs:10:16\n-   |\n-LL | fn ordering4 < 'a , 'b     > ( a :            ,   self , self ,   self ,\n-   |                ^^\n-note: but the referenced data is only valid for the lifetime `'b` as defined here\n-  --> $DIR/issue-86053-1.rs:10:21\n-   |\n-LL | fn ordering4 < 'a , 'b     > ( a :            ,   self , self ,   self ,\n-   |                     ^^\n-\n-error: aborting due to 12 previous errors\n+error: aborting due to 11 previous errors\n \n-Some errors have detailed explanations: E0412, E0491.\n-For more information about an error, try `rustc --explain E0412`.\n+For more information about this error, try `rustc --explain E0412`."}, {"sha": "ea6f5f6927659a751148834a79cbe109a7203e8e", "filename": "tests/ui/const-generics/generic_const_exprs/issue-72787.min.stderr", "status": "modified", "additions": 3, "deletions": 40, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/9b538e8e62240e9736fcdaa5355b4effd87f126d/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72787.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b538e8e62240e9736fcdaa5355b4effd87f126d/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72787.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72787.min.stderr?ref=9b538e8e62240e9736fcdaa5355b4effd87f126d", "patch": "@@ -17,7 +17,7 @@ LL |     Condition<{ LHS <= RHS }>: True\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/issue-72787.rs:25:25\n+  --> $DIR/issue-72787.rs:23:25\n    |\n LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n    |                         ^ cannot perform const operation using `I`\n@@ -26,50 +26,13 @@ LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/issue-72787.rs:25:36\n+  --> $DIR/issue-72787.rs:23:36\n    |\n LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n    |                                    ^ cannot perform const operation using `J`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `J`\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n-error[E0283]: type annotations needed: cannot satisfy `IsLessOrEqual<I, 8>: True`\n-  --> $DIR/issue-72787.rs:21:26\n-   |\n-LL |     IsLessOrEqual<I, 8>: True,\n-   |                          ^^^^\n-   |\n-note: multiple `impl`s or `where` clauses satisfying `IsLessOrEqual<I, 8>: True` found\n-  --> $DIR/issue-72787.rs:10:1\n-   |\n-LL | impl<const LHS: u32, const RHS: u32> True for IsLessOrEqual<LHS, RHS> where\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-...\n-LL |     IsLessOrEqual<I, 8>: True,\n-   |                          ^^^^\n-...\n-LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n-   |                                          ^^^^\n-\n-error[E0283]: type annotations needed: cannot satisfy `IsLessOrEqual<I, 8>: True`\n-  --> $DIR/issue-72787.rs:21:26\n-   |\n-LL |     IsLessOrEqual<I, 8>: True,\n-   |                          ^^^^\n-   |\n-note: multiple `impl`s or `where` clauses satisfying `IsLessOrEqual<I, 8>: True` found\n-  --> $DIR/issue-72787.rs:10:1\n-   |\n-LL | impl<const LHS: u32, const RHS: u32> True for IsLessOrEqual<LHS, RHS> where\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-...\n-LL |     IsLessOrEqual<I, 8>: True,\n-   |                          ^^^^\n-...\n-LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n-   |                                          ^^^^\n-\n-error: aborting due to 6 previous errors\n+error: aborting due to 4 previous errors\n \n-For more information about this error, try `rustc --explain E0283`."}, {"sha": "657fec2e9cb70eb1403f81e8f962264e3386c1b8", "filename": "tests/ui/const-generics/generic_const_exprs/issue-72787.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b538e8e62240e9736fcdaa5355b4effd87f126d/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72787.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b538e8e62240e9736fcdaa5355b4effd87f126d/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72787.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72787.rs?ref=9b538e8e62240e9736fcdaa5355b4effd87f126d", "patch": "@@ -19,8 +19,6 @@ struct S<const I: u32, const J: u32>;\n impl<const I: u32, const J: u32> S<I, J>\n where\n     IsLessOrEqual<I, 8>: True,\n-//[min]~^ Error type annotations needed\n-//[min]~| Error type annotations needed\n     IsLessOrEqual<J, 8>: True,\n     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n //[min]~^ Error generic parameters may not be used in const operations"}, {"sha": "67e880b006a7f9135ae8e3b9b5bee9bf81cfce88", "filename": "tests/ui/traits/ignore-err-impls.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9b538e8e62240e9736fcdaa5355b4effd87f126d/tests%2Fui%2Ftraits%2Fignore-err-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b538e8e62240e9736fcdaa5355b4effd87f126d/tests%2Fui%2Ftraits%2Fignore-err-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fignore-err-impls.rs?ref=9b538e8e62240e9736fcdaa5355b4effd87f126d", "patch": "@@ -0,0 +1,9 @@\n+pub struct S;\n+\n+trait Generic<T> {}\n+\n+impl<'a, T> Generic<&'a T> for S {}\n+impl Generic<Type> for S {}\n+//~^ ERROR cannot find type `Type` in this scope\n+\n+fn main() {}"}, {"sha": "1390106a29125b9caa56b440ef567e8d19bae48a", "filename": "tests/ui/traits/ignore-err-impls.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9b538e8e62240e9736fcdaa5355b4effd87f126d/tests%2Fui%2Ftraits%2Fignore-err-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b538e8e62240e9736fcdaa5355b4effd87f126d/tests%2Fui%2Ftraits%2Fignore-err-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fignore-err-impls.stderr?ref=9b538e8e62240e9736fcdaa5355b4effd87f126d", "patch": "@@ -0,0 +1,11 @@\n+error[E0412]: cannot find type `Type` in this scope\n+  --> $DIR/ignore-err-impls.rs:6:14\n+   |\n+LL | impl Generic<Type> for S {}\n+   |     -        ^^^^ not found in this scope\n+   |     |\n+   |     help: you might be missing a type parameter: `<Type>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0412`."}, {"sha": "c76f0e1a8b2b53499ea2f50bf609a3afa4e136ab", "filename": "tests/ui/where-clauses/ignore-err-clauses.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9b538e8e62240e9736fcdaa5355b4effd87f126d/tests%2Fui%2Fwhere-clauses%2Fignore-err-clauses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b538e8e62240e9736fcdaa5355b4effd87f126d/tests%2Fui%2Fwhere-clauses%2Fignore-err-clauses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhere-clauses%2Fignore-err-clauses.rs?ref=9b538e8e62240e9736fcdaa5355b4effd87f126d", "patch": "@@ -0,0 +1,14 @@\n+use std::ops::Add;\n+\n+fn dbl<T>(x: T) -> <T as Add>::Output\n+where\n+    T: Copy + Add,\n+    UUU: Copy,\n+    //~^ ERROR cannot find type `UUU` in this scope\n+{\n+    x + x\n+}\n+\n+fn main() {\n+    println!(\"{}\", dbl(3));\n+}"}, {"sha": "cfddc3e10b64a510070569aa0b10252068626d82", "filename": "tests/ui/where-clauses/ignore-err-clauses.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9b538e8e62240e9736fcdaa5355b4effd87f126d/tests%2Fui%2Fwhere-clauses%2Fignore-err-clauses.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b538e8e62240e9736fcdaa5355b4effd87f126d/tests%2Fui%2Fwhere-clauses%2Fignore-err-clauses.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhere-clauses%2Fignore-err-clauses.stderr?ref=9b538e8e62240e9736fcdaa5355b4effd87f126d", "patch": "@@ -0,0 +1,9 @@\n+error[E0412]: cannot find type `UUU` in this scope\n+  --> $DIR/ignore-err-clauses.rs:6:5\n+   |\n+LL |     UUU: Copy,\n+   |     ^^^ not found in this scope\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0412`."}]}