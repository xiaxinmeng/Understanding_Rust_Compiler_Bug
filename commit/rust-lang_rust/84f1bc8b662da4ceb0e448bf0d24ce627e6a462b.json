{"sha": "84f1bc8b662da4ceb0e448bf0d24ce627e6a462b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0ZjFiYzhiNjYyZGE0Y2ViMGU0NDhiZjBkMjRjZTYyN2U2YTQ2MmI=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-06-29T22:53:17Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-06-29T22:53:32Z"}, "message": "Address comments", "tree": {"sha": "f43a60b5fbefba0ccb7fad613f5df8bfafebdc51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f43a60b5fbefba0ccb7fad613f5df8bfafebdc51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84f1bc8b662da4ceb0e448bf0d24ce627e6a462b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84f1bc8b662da4ceb0e448bf0d24ce627e6a462b", "html_url": "https://github.com/rust-lang/rust/commit/84f1bc8b662da4ceb0e448bf0d24ce627e6a462b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84f1bc8b662da4ceb0e448bf0d24ce627e6a462b/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b69d51162b5391119e86d1c6e884aa09292a7806", "url": "https://api.github.com/repos/rust-lang/rust/commits/b69d51162b5391119e86d1c6e884aa09292a7806", "html_url": "https://github.com/rust-lang/rust/commit/b69d51162b5391119e86d1c6e884aa09292a7806"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "fb5cbf473a387e782f593d4b20dc4e305db1b370", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/84f1bc8b662da4ceb0e448bf0d24ce627e6a462b/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f1bc8b662da4ceb0e448bf0d24ce627e6a462b/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=84f1bc8b662da4ceb0e448bf0d24ce627e6a462b", "patch": "@@ -1434,9 +1434,12 @@ pub mod __internal {\n         CURRENT_SESS.with(|p| {\n             let _reset = Reset { prev: p.get() };\n \n-            // No way to determine def location for a proc macro rigth now, so use call location.\n+            // No way to determine def location for a proc macro right now, so use call location.\n             let location = cx.current_expansion.mark.expn_info().unwrap().call_site;\n             // Opaque mark was already created by expansion, now create its transparent twin.\n+            // We can't use the call-site span literally here, even if it appears to provide\n+            // correct name resolution, because it has all the `ExpnInfo` wrong, so the edition\n+            // checks, lint macro checks, macro backtraces will all break.\n             let opaque_mark = cx.current_expansion.mark;\n             let transparent_mark = Mark::fresh_cloned(opaque_mark);\n             transparent_mark.set_transparency(Transparency::Transparent);"}, {"sha": "8a32ec6978c4d7324cf54a367ae9a52cca5808e8", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/84f1bc8b662da4ceb0e448bf0d24ce627e6a462b/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f1bc8b662da4ceb0e448bf0d24ce627e6a462b/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=84f1bc8b662da4ceb0e448bf0d24ce627e6a462b", "patch": "@@ -2005,10 +2005,9 @@ impl<'a> Resolver<'a> {\n                 }\n             }\n             // Then find the last legacy mark from the end if it exists.\n-            while let Some(&mark) = iter.peek() {\n+            for mark in iter {\n                 if mark.transparency() == Transparency::SemiTransparent {\n                     result = Some(mark);\n-                    iter.next();\n                 } else {\n                     break;\n                 }"}, {"sha": "33d02d0b10a7bd5283558892069b7d78f65cb1cf", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84f1bc8b662da4ceb0e448bf0d24ce627e6a462b/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f1bc8b662da4ceb0e448bf0d24ce627e6a462b/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=84f1bc8b662da4ceb0e448bf0d24ce627e6a462b", "patch": "@@ -57,7 +57,6 @@ struct MarkData {\n pub enum Transparency {\n     /// Identifier produced by a transparent expansion is always resolved at call-site.\n     /// Call-site spans in procedural macros, hygiene opt-out in `macro` should use this.\n-    /// (Not used yet.)\n     Transparent,\n     /// Identifier produced by a semi-transparent expansion may be resolved\n     /// either at call-site or at definition-site."}, {"sha": "9a0c92f679366929916399b3aa08c655fe863dbb", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/84f1bc8b662da4ceb0e448bf0d24ce627e6a462b/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f1bc8b662da4ceb0e448bf0d24ce627e6a462b/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=84f1bc8b662da4ceb0e448bf0d24ce627e6a462b", "patch": "@@ -68,11 +68,11 @@ impl Ident {\n         Ident::new(self.name, self.span.modern())\n     }\n \n-    // \"Normalize\" ident for use in comparisons using \"local variable hygiene\".\n-    // Identifiers with same string value become same if they came from the same non-transparent\n-    // macro (e.g. `macro` or `macro_rules!` items) and stay different if they came from different\n-    // non-transparent macros.\n-    // Technically, this operation strips all transparent marks from ident's syntactic context.\n+    /// \"Normalize\" ident for use in comparisons using \"local variable hygiene\".\n+    /// Identifiers with same string value become same if they came from the same non-transparent\n+    /// macro (e.g. `macro` or `macro_rules!` items) and stay different if they came from different\n+    /// non-transparent macros.\n+    /// Technically, this operation strips all transparent marks from ident's syntactic context.\n     pub fn modern_and_legacy(self) -> Ident {\n         Ident::new(self.name, self.span.modern_and_legacy())\n     }"}]}