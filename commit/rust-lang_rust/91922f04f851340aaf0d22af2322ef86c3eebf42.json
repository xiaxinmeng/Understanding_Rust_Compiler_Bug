{"sha": "91922f04f851340aaf0d22af2322ef86c3eebf42", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxOTIyZjA0Zjg1MTM0MGFhZjBkMjJhZjIzMjJlZjg2YzNlZWJmNDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-04T15:50:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-04T15:50:57Z"}, "message": "auto merge of #8966 : FlaPer87/rust/issue/7473, r=bblum\n\nCurrent access methods are nestable and unsafe. This patch renames\r\ncurrent methods implementation - prepends unsafe_ - and implements 2 new\r\nmethods that are both safe and un-nestable.\r\n\r\nFixes #7473", "tree": {"sha": "51ff18712213584100d240cc3bee947396abd641", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51ff18712213584100d240cc3bee947396abd641"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91922f04f851340aaf0d22af2322ef86c3eebf42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91922f04f851340aaf0d22af2322ef86c3eebf42", "html_url": "https://github.com/rust-lang/rust/commit/91922f04f851340aaf0d22af2322ef86c3eebf42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91922f04f851340aaf0d22af2322ef86c3eebf42/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67555d9bd40a36d93e193fe2d178713481ad445e", "url": "https://api.github.com/repos/rust-lang/rust/commits/67555d9bd40a36d93e193fe2d178713481ad445e", "html_url": "https://github.com/rust-lang/rust/commit/67555d9bd40a36d93e193fe2d178713481ad445e"}, {"sha": "d0ad2513766733abc99da6af0cfe130abcd70744", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0ad2513766733abc99da6af0cfe130abcd70744", "html_url": "https://github.com/rust-lang/rust/commit/d0ad2513766733abc99da6af0cfe130abcd70744"}], "stats": {"total": 187, "additions": 131, "deletions": 56}, "files": [{"sha": "3fbfae52c6300bf925d071a95c611447149476ec", "filename": "src/libextra/arc.rs", "status": "modified", "additions": 105, "deletions": 56, "changes": 161, "blob_url": "https://github.com/rust-lang/rust/blob/91922f04f851340aaf0d22af2322ef86c3eebf42/src%2Flibextra%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91922f04f851340aaf0d22af2322ef86c3eebf42/src%2Flibextra%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farc.rs?ref=91922f04f851340aaf0d22af2322ef86c3eebf42", "patch": "@@ -159,7 +159,9 @@ impl<T:Freeze + Send> Clone for Arc<T> {\n \n #[doc(hidden)]\n struct MutexArcInner<T> { priv lock: Mutex, priv failed: bool, priv data: T }\n+\n /// An Arc with mutable data protected by a blocking mutex.\n+#[no_freeze]\n struct MutexArc<T> { priv x: UnsafeArc<MutexArcInner<T>> }\n \n \n@@ -199,10 +201,10 @@ impl<T:Send> MutexArc<T> {\n      * The reason this function is 'unsafe' is because it is possible to\n      * construct a circular reference among multiple Arcs by mutating the\n      * underlying data. This creates potential for deadlock, but worse, this\n-     * will guarantee a memory leak of all involved Arcs. Using mutex Arcs\n+     * will guarantee a memory leak of all involved Arcs. Using MutexArcs\n      * inside of other Arcs is safe in absence of circular references.\n      *\n-     * If you wish to nest mutex_arcs, one strategy for ensuring safety at\n+     * If you wish to nest MutexArcs, one strategy for ensuring safety at\n      * runtime is to add a \"nesting level counter\" inside the stored data, and\n      * when traversing the arcs, assert that they monotonically decrease.\n      *\n@@ -214,7 +216,7 @@ impl<T:Send> MutexArc<T> {\n      * blocked on the mutex) will also fail immediately.\n      */\n     #[inline]\n-    pub unsafe fn access<U>(&self, blk: &fn(x: &mut T) -> U) -> U {\n+    pub unsafe fn unsafe_access<U>(&self, blk: &fn(x: &mut T) -> U) -> U {\n         let state = self.x.get();\n         // Borrowck would complain about this if the function were\n         // not already unsafe. See borrow_rwlock, far below.\n@@ -225,9 +227,9 @@ impl<T:Send> MutexArc<T> {\n         }\n     }\n \n-    /// As access(), but with a condvar, as sync::mutex.lock_cond().\n+    /// As unsafe_access(), but with a condvar, as sync::mutex.lock_cond().\n     #[inline]\n-    pub unsafe fn access_cond<'x, 'c, U>(&self,\n+    pub unsafe fn unsafe_access_cond<'x, 'c, U>(&self,\n                                          blk: &fn(x: &'x mut T,\n                                                   c: &'c Condvar) -> U)\n                                          -> U {\n@@ -259,6 +261,39 @@ impl<T:Send> MutexArc<T> {\n     }\n }\n \n+impl<T:Freeze + Send> MutexArc<T> {\n+\n+    /**\n+     * As unsafe_access.\n+     *\n+     * The difference between access and unsafe_access is that the former\n+     * forbids mutexes to be nested. While unsafe_access can be used on\n+     * MutexArcs without freezable interiors, this safe version of access\n+     * requires the Freeze bound, which prohibits access on MutexArcs which\n+     * might contain nested MutexArcs inside.\n+     *\n+     * The purpose of this is to offer a safe implementation of MutexArc to be\n+     * used instead of RWArc in cases where no readers are needed and sightly\n+     * better performance is required.\n+     *\n+     * Both methods have the same failure behaviour as unsafe_access and\n+     * unsafe_access_cond.\n+     */\n+    #[inline]\n+    pub fn access<U>(&self, blk: &fn(x: &mut T) -> U) -> U {\n+        unsafe { self.unsafe_access(blk) }\n+    }\n+\n+    /// As unsafe_access_cond but safe and Freeze.\n+    #[inline]\n+    pub fn access_cond<'x, 'c, U>(&self,\n+                                  blk: &fn(x: &'x mut T,\n+                                           c: &'c Condvar) -> U)\n+                                  -> U {\n+        unsafe { self.unsafe_access_cond(blk) }\n+    }\n+}\n+\n // Common code for {mutex.access,rwlock.write}{,_cond}.\n #[inline]\n #[doc(hidden)]\n@@ -589,85 +624,98 @@ mod tests {\n \n     #[test]\n     fn test_mutex_arc_condvar() {\n-        unsafe {\n-            let arc = MutexArc::new(false);\n-            let arc2 = arc.clone();\n-            let (p, c) = comm::oneshot();\n-            let (c, p) = (Cell::new(c), Cell::new(p));\n-            do task::spawn {\n-                // wait until parent gets in\n-                p.take().recv();\n-                do arc2.access_cond |state, cond| {\n-                    *state = true;\n-                    cond.signal();\n-                }\n+        let arc = ~MutexArc::new(false);\n+        let arc2 = ~arc.clone();\n+        let (p,c) = comm::oneshot();\n+        let (c,p) = (Cell::new(c), Cell::new(p));\n+        do task::spawn || {\n+            // wait until parent gets in\n+            p.take().recv();\n+            do arc2.access_cond |state, cond| {\n+                *state = true;\n+                cond.signal();\n             }\n-            do arc.access_cond |state, cond| {\n-                c.take().send(());\n-                assert!(!*state);\n-                while !*state {\n-                    cond.wait();\n-                }\n+        }\n+\n+        do arc.access_cond |state, cond| {\n+            c.take().send(());\n+            assert!(!*state);\n+            while !*state {\n+                cond.wait();\n             }\n         }\n     }\n \n     #[test] #[should_fail]\n     fn test_arc_condvar_poison() {\n-        unsafe {\n-            let arc = MutexArc::new(1);\n-            let arc2 = arc.clone();\n-            let (p, c) = comm::stream();\n-\n-            do task::spawn_unlinked {\n-                let _ = p.recv();\n-                do arc2.access_cond |one, cond| {\n-                    cond.signal();\n-                    // Parent should fail when it wakes up.\n-                    assert_eq!(*one, 0);\n-                }\n+        let arc = ~MutexArc::new(1);\n+        let arc2 = ~arc.clone();\n+        let (p, c) = comm::stream();\n+\n+        do task::spawn_unlinked || {\n+            let _ = p.recv();\n+            do arc2.access_cond |one, cond| {\n+                cond.signal();\n+                // Parent should fail when it wakes up.\n+                assert_eq!(*one, 0);\n             }\n+        }\n \n-            do arc.access_cond |one, cond| {\n-                c.send(());\n-                while *one == 1 {\n-                    cond.wait();\n-                }\n+        do arc.access_cond |one, cond| {\n+            c.send(());\n+            while *one == 1 {\n+                cond.wait();\n             }\n         }\n     }\n+\n     #[test] #[should_fail]\n     fn test_mutex_arc_poison() {\n-        unsafe {\n-            let arc = MutexArc::new(1);\n-            let arc2 = arc.clone();\n-            do task::try {\n-                do arc2.access |one| {\n-                    assert_eq!(*one, 2);\n-                }\n-            };\n-            do arc.access |one| {\n-                assert_eq!(*one, 1);\n+        let arc = ~MutexArc::new(1);\n+        let arc2 = ~arc.clone();\n+        do task::try || {\n+            do arc2.access |one| {\n+                assert_eq!(*one, 2);\n             }\n+        };\n+        do arc.access |one| {\n+            assert_eq!(*one, 1);\n         }\n     }\n+\n     #[test] #[should_fail]\n     pub fn test_mutex_arc_unwrap_poison() {\n         let arc = MutexArc::new(1);\n-        let arc2 = arc.clone();\n+        let arc2 = ~(&arc).clone();\n         let (p, c) = comm::stream();\n         do task::spawn {\n-            unsafe {\n-                do arc2.access |one| {\n-                    c.send(());\n-                    assert!(*one == 2);\n-                }\n+            do arc2.access |one| {\n+                c.send(());\n+                assert!(*one == 2);\n             }\n         }\n         let _ = p.recv();\n         let one = arc.unwrap();\n         assert!(one == 1);\n     }\n+\n+    #[test]\n+    fn test_unsafe_mutex_arc_nested() {\n+        unsafe {\n+            // Tests nested mutexes and access\n+            // to underlaying data.\n+            let arc = ~MutexArc::new(1);\n+            let arc2 = ~MutexArc::new(*arc);\n+            do task::spawn || {\n+                do (*arc2).unsafe_access |mutex| {\n+                    do (*mutex).access |one| {\n+                        assert!(*one == 1);\n+                    }\n+                }\n+            };\n+        }\n+    }\n+\n     #[test] #[should_fail]\n     fn test_rw_arc_poison_wr() {\n         let arc = RWArc::new(1);\n@@ -681,6 +729,7 @@ mod tests {\n             assert_eq!(*one, 1);\n         }\n     }\n+\n     #[test] #[should_fail]\n     fn test_rw_arc_poison_ww() {\n         let arc = RWArc::new(1);"}, {"sha": "bac17dec8ecbcbdefeecca1c03e24181dbc7d4cc", "filename": "src/test/compile-fail/mutex-arc-nested.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/91922f04f851340aaf0d22af2322ef86c3eebf42/src%2Ftest%2Fcompile-fail%2Fmutex-arc-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91922f04f851340aaf0d22af2322ef86c3eebf42/src%2Ftest%2Fcompile-fail%2Fmutex-arc-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutex-arc-nested.rs?ref=91922f04f851340aaf0d22af2322ef86c3eebf42", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern mod extra;\n+\n+use std::task;\n+use extra::arc::{MutexArc};\n+\n+fn test_mutex_arc_nested() {\n+    let arc = ~MutexArc::new(1);\n+    let arc2 = ~MutexArc::new(*arc);\n+\n+    do task::spawn || {\n+        do (*arc2).access |mutex| { //~ ERROR instantiating a type parameter with an incompatible type\n+        }\n+    };\n+}\n+\n+fn main() {}"}]}