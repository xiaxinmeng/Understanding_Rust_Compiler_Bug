{"sha": "a3a722de9ffaefdd0a46194e7ea2edac9754fd38", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzYTcyMmRlOWZmYWVmZGQwYTQ2MTk0ZTdlYTJlZGFjOTc1NGZkMzg=", "commit": {"author": {"name": "unexge", "email": "unexge@gmail.com", "date": "2021-01-15T19:14:51Z"}, "committer": {"name": "unexge", "email": "unexge@gmail.com", "date": "2021-01-15T19:14:51Z"}, "message": "Add Unmerge Use assist", "tree": {"sha": "8c083ed2295472816203e6c4b297f3ce28bcab6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c083ed2295472816203e6c4b297f3ce28bcab6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3a722de9ffaefdd0a46194e7ea2edac9754fd38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3a722de9ffaefdd0a46194e7ea2edac9754fd38", "html_url": "https://github.com/rust-lang/rust/commit/a3a722de9ffaefdd0a46194e7ea2edac9754fd38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3a722de9ffaefdd0a46194e7ea2edac9754fd38/comments", "author": {"login": "unexge", "id": 16212576, "node_id": "MDQ6VXNlcjE2MjEyNTc2", "avatar_url": "https://avatars.githubusercontent.com/u/16212576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unexge", "html_url": "https://github.com/unexge", "followers_url": "https://api.github.com/users/unexge/followers", "following_url": "https://api.github.com/users/unexge/following{/other_user}", "gists_url": "https://api.github.com/users/unexge/gists{/gist_id}", "starred_url": "https://api.github.com/users/unexge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unexge/subscriptions", "organizations_url": "https://api.github.com/users/unexge/orgs", "repos_url": "https://api.github.com/users/unexge/repos", "events_url": "https://api.github.com/users/unexge/events{/privacy}", "received_events_url": "https://api.github.com/users/unexge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "unexge", "id": 16212576, "node_id": "MDQ6VXNlcjE2MjEyNTc2", "avatar_url": "https://avatars.githubusercontent.com/u/16212576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unexge", "html_url": "https://github.com/unexge", "followers_url": "https://api.github.com/users/unexge/followers", "following_url": "https://api.github.com/users/unexge/following{/other_user}", "gists_url": "https://api.github.com/users/unexge/gists{/gist_id}", "starred_url": "https://api.github.com/users/unexge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unexge/subscriptions", "organizations_url": "https://api.github.com/users/unexge/orgs", "repos_url": "https://api.github.com/users/unexge/repos", "events_url": "https://api.github.com/users/unexge/events{/privacy}", "received_events_url": "https://api.github.com/users/unexge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a869e870ac6328967fb120a0ebe44a9c900eaf0", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a869e870ac6328967fb120a0ebe44a9c900eaf0", "html_url": "https://github.com/rust-lang/rust/commit/8a869e870ac6328967fb120a0ebe44a9c900eaf0"}], "stats": {"total": 239, "additions": 236, "deletions": 3}, "files": [{"sha": "d7dfe70d9d04e9c112ae5e85a4ecb6c7818309d0", "filename": "crates/assists/src/handlers/unmerge_use.rs", "status": "added", "additions": 213, "deletions": 0, "changes": 213, "blob_url": "https://github.com/rust-lang/rust/blob/a3a722de9ffaefdd0a46194e7ea2edac9754fd38/crates%2Fassists%2Fsrc%2Fhandlers%2Funmerge_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3a722de9ffaefdd0a46194e7ea2edac9754fd38/crates%2Fassists%2Fsrc%2Fhandlers%2Funmerge_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Funmerge_use.rs?ref=a3a722de9ffaefdd0a46194e7ea2edac9754fd38", "patch": "@@ -0,0 +1,213 @@\n+use syntax::{\n+    algo::SyntaxRewriter,\n+    ast::{self, edit::AstNodeEdit, VisibilityOwner},\n+    AstNode, SyntaxKind,\n+};\n+\n+use crate::{\n+    assist_context::{AssistContext, Assists},\n+    AssistId, AssistKind,\n+};\n+\n+// Assist: unmerge_use\n+//\n+// Extracts single use item from use list.\n+//\n+// ```\n+// use std::fmt::{Debug, Display$0};\n+// ```\n+// ->\n+// ```\n+// use std::fmt::{Debug};\n+// use std::fmt::Display;\n+// ```\n+pub(crate) fn unmerge_use(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    let tree: ast::UseTree = ctx.find_node_at_offset()?;\n+\n+    let tree_list = tree.syntax().parent().and_then(ast::UseTreeList::cast)?;\n+    if tree_list.use_trees().count() < 2 {\n+        return None;\n+    }\n+\n+    let use_: ast::Use = tree_list.syntax().ancestors().find_map(ast::Use::cast)?;\n+    let path = resolve_full_path(&tree)?;\n+\n+    let new_use = ast::make::use_(\n+        use_.visibility(),\n+        ast::make::use_tree(path, None, tree.rename(), tree.star_token().is_some()),\n+    );\n+\n+    let mut rewriter = SyntaxRewriter::default();\n+    rewriter += tree.remove();\n+    rewriter.insert_after(use_.syntax(), &ast::make::tokens::single_newline());\n+    if let ident_level @ 1..=usize::MAX = use_.indent_level().0 as usize {\n+        rewriter.insert_after(\n+            use_.syntax(),\n+            &ast::make::tokens::whitespace(&\" \".repeat(4 * ident_level)),\n+        );\n+    }\n+    rewriter.insert_after(use_.syntax(), new_use.syntax());\n+\n+    let target = tree.syntax().text_range();\n+    acc.add(\n+        AssistId(\"unmerge_use\", AssistKind::RefactorRewrite),\n+        \"Unmerge use\",\n+        target,\n+        |builder| {\n+            builder.rewrite(rewriter);\n+        },\n+    )\n+}\n+\n+fn resolve_full_path(tree: &ast::UseTree) -> Option<ast::Path> {\n+    let mut paths = tree\n+        .syntax()\n+        .ancestors()\n+        .take_while(|n| n.kind() != SyntaxKind::USE_KW)\n+        .filter_map(ast::UseTree::cast)\n+        .filter_map(|t| t.path());\n+\n+    let mut final_path = paths.next()?;\n+    for path in paths {\n+        final_path = ast::make::path_concat(path, final_path)\n+    }\n+    Some(final_path)\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n+\n+    use super::*;\n+\n+    #[test]\n+    fn skip_single_use_item() {\n+        check_assist_not_applicable(\n+            unmerge_use,\n+            r\"\n+use std::fmt::Debug$0;\n+\",\n+        );\n+        check_assist_not_applicable(\n+            unmerge_use,\n+            r\"\n+use std::fmt::{Debug$0};\n+\",\n+        );\n+        check_assist_not_applicable(\n+            unmerge_use,\n+            r\"\n+use std::fmt::Debug as Dbg$0;\n+\",\n+        );\n+    }\n+\n+    #[test]\n+    fn skip_single_glob_import() {\n+        check_assist_not_applicable(\n+            unmerge_use,\n+            r\"\n+use std::fmt::*$0;\n+\",\n+        );\n+    }\n+\n+    #[test]\n+    fn unmerge_use_item() {\n+        check_assist(\n+            unmerge_use,\n+            r\"\n+use std::fmt::{Debug, Display$0};\n+\",\n+            r\"\n+use std::fmt::{Debug};\n+use std::fmt::Display;\n+\",\n+        );\n+\n+        check_assist(\n+            unmerge_use,\n+            r\"\n+use std::fmt::{Debug, format$0, Display};\n+\",\n+            r\"\n+use std::fmt::{Debug, Display};\n+use std::fmt::format;\n+\",\n+        );\n+    }\n+\n+    #[test]\n+    fn unmerge_glob_import() {\n+        check_assist(\n+            unmerge_use,\n+            r\"\n+use std::fmt::{*$0, Display};\n+\",\n+            r\"\n+use std::fmt::{Display};\n+use std::fmt::*;\n+\",\n+        );\n+    }\n+\n+    #[test]\n+    fn unmerge_renamed_use_item() {\n+        check_assist(\n+            unmerge_use,\n+            r\"\n+use std::fmt::{Debug, Display as Disp$0};\n+\",\n+            r\"\n+use std::fmt::{Debug};\n+use std::fmt::Display as Disp;\n+\",\n+        );\n+    }\n+\n+    #[test]\n+    fn unmerge_indented_use_item() {\n+        check_assist(\n+            unmerge_use,\n+            r\"\n+mod format {\n+    use std::fmt::{Debug, Display$0 as Disp, format};\n+}\n+\",\n+            r\"\n+mod format {\n+    use std::fmt::{Debug, format};\n+    use std::fmt::Display as Disp;\n+}\n+\",\n+        );\n+    }\n+\n+    #[test]\n+    fn unmerge_nested_use_item() {\n+        check_assist(\n+            unmerge_use,\n+            r\"\n+use foo::bar::{baz::{qux$0, foobar}, barbaz};\n+\",\n+            r\"\n+use foo::bar::{baz::{foobar}, barbaz};\n+use foo::bar::baz::qux;\n+\",\n+        );\n+    }\n+\n+    #[test]\n+    fn unmerge_use_item_with_visibility() {\n+        check_assist(\n+            unmerge_use,\n+            r\"\n+pub use std::fmt::{Debug, Display$0};\n+\",\n+            r\"\n+pub use std::fmt::{Debug};\n+pub use std::fmt::Display;\n+\",\n+        );\n+    }\n+}"}, {"sha": "3d79718060a4eaac54fe93854dcec3251c6124f6", "filename": "crates/assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3a722de9ffaefdd0a46194e7ea2edac9754fd38/crates%2Fassists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3a722de9ffaefdd0a46194e7ea2edac9754fd38/crates%2Fassists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Flib.rs?ref=a3a722de9ffaefdd0a46194e7ea2edac9754fd38", "patch": "@@ -156,6 +156,7 @@ mod handlers {\n     mod replace_unwrap_with_match;\n     mod split_import;\n     mod toggle_ignore;\n+    mod unmerge_use;\n     mod unwrap_block;\n     mod wrap_return_type_in_result;\n \n@@ -213,6 +214,7 @@ mod handlers {\n             replace_unwrap_with_match::replace_unwrap_with_match,\n             split_import::split_import,\n             toggle_ignore::toggle_ignore,\n+            unmerge_use::unmerge_use,\n             unwrap_block::unwrap_block,\n             wrap_return_type_in_result::wrap_return_type_in_result,\n             // These are manually sorted for better priorities"}, {"sha": "d48d063b407621b701737f4cedd3915421f792a9", "filename": "crates/assists/src/tests/generated.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a3a722de9ffaefdd0a46194e7ea2edac9754fd38/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3a722de9ffaefdd0a46194e7ea2edac9754fd38/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs?ref=a3a722de9ffaefdd0a46194e7ea2edac9754fd38", "patch": "@@ -1137,6 +1137,20 @@ fn arithmetics {\n     )\n }\n \n+#[test]\n+fn doctest_unmerge_use() {\n+    check_doc_test(\n+        \"unmerge_use\",\n+        r#####\"\n+use std::fmt::{Debug, Display$0};\n+\"#####,\n+        r#####\"\n+use std::fmt::{Debug};\n+use std::fmt::Display;\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_unwrap_block() {\n     check_doc_test("}, {"sha": "d2f9f5d25c193a8705b57d0e5ad658353dad45f5", "filename": "crates/ide_db/src/helpers/insert_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3a722de9ffaefdd0a46194e7ea2edac9754fd38/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3a722de9ffaefdd0a46194e7ea2edac9754fd38/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs?ref=a3a722de9ffaefdd0a46194e7ea2edac9754fd38", "patch": "@@ -97,7 +97,7 @@ pub fn insert_use<'a>(\n ) -> SyntaxRewriter<'a> {\n     let _p = profile::span(\"insert_use\");\n     let mut rewriter = SyntaxRewriter::default();\n-    let use_item = make::use_(make::use_tree(path.clone(), None, None, false));\n+    let use_item = make::use_(None, make::use_tree(path.clone(), None, None, false));\n     // merge into existing imports if possible\n     if let Some(mb) = merge {\n         for existing_use in scope.as_syntax_node().children().filter_map(ast::Use::cast) {"}, {"sha": "9ffc3ae110ec91e5de87ed20930e6032798de90e", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a3a722de9ffaefdd0a46194e7ea2edac9754fd38/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3a722de9ffaefdd0a46194e7ea2edac9754fd38/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=a3a722de9ffaefdd0a46194e7ea2edac9754fd38", "patch": "@@ -108,8 +108,12 @@ pub fn use_tree_list(use_trees: impl IntoIterator<Item = ast::UseTree>) -> ast::\n     ast_from_text(&format!(\"use {{{}}};\", use_trees))\n }\n \n-pub fn use_(use_tree: ast::UseTree) -> ast::Use {\n-    ast_from_text(&format!(\"use {};\", use_tree))\n+pub fn use_(visibility: Option<ast::Visibility>, use_tree: ast::UseTree) -> ast::Use {\n+    let visibility = match visibility {\n+        None => String::new(),\n+        Some(it) => format!(\"{} \", it),\n+    };\n+    ast_from_text(&format!(\"{}use {};\", visibility, use_tree))\n }\n \n pub fn record_expr_field(name: ast::NameRef, expr: Option<ast::Expr>) -> ast::RecordExprField {"}]}