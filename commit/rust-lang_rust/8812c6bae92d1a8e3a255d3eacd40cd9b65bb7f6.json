{"sha": "8812c6bae92d1a8e3a255d3eacd40cd9b65bb7f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4MTJjNmJhZTkyZDFhOGUzYTI1NWQzZWFjZDQwY2Q5YjY1YmI3ZjY=", "commit": {"author": {"name": "F001", "email": "changchun.fan@qq.com", "date": "2018-07-17T03:30:17Z"}, "committer": {"name": "F001", "email": "changchun.fan@qq.com", "date": "2018-07-18T04:30:20Z"}, "message": "revert Deref", "tree": {"sha": "1fc8a4603a8f02236275dbdf8c9ed925f1496ec7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fc8a4603a8f02236275dbdf8c9ed925f1496ec7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8812c6bae92d1a8e3a255d3eacd40cd9b65bb7f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8812c6bae92d1a8e3a255d3eacd40cd9b65bb7f6", "html_url": "https://github.com/rust-lang/rust/commit/8812c6bae92d1a8e3a255d3eacd40cd9b65bb7f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8812c6bae92d1a8e3a255d3eacd40cd9b65bb7f6/comments", "author": {"login": "F001", "id": 3314340, "node_id": "MDQ6VXNlcjMzMTQzNDA=", "avatar_url": "https://avatars.githubusercontent.com/u/3314340?v=4", "gravatar_id": "", "url": "https://api.github.com/users/F001", "html_url": "https://github.com/F001", "followers_url": "https://api.github.com/users/F001/followers", "following_url": "https://api.github.com/users/F001/following{/other_user}", "gists_url": "https://api.github.com/users/F001/gists{/gist_id}", "starred_url": "https://api.github.com/users/F001/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/F001/subscriptions", "organizations_url": "https://api.github.com/users/F001/orgs", "repos_url": "https://api.github.com/users/F001/repos", "events_url": "https://api.github.com/users/F001/events{/privacy}", "received_events_url": "https://api.github.com/users/F001/received_events", "type": "User", "site_admin": false}, "committer": {"login": "F001", "id": 3314340, "node_id": "MDQ6VXNlcjMzMTQzNDA=", "avatar_url": "https://avatars.githubusercontent.com/u/3314340?v=4", "gravatar_id": "", "url": "https://api.github.com/users/F001", "html_url": "https://github.com/F001", "followers_url": "https://api.github.com/users/F001/followers", "following_url": "https://api.github.com/users/F001/following{/other_user}", "gists_url": "https://api.github.com/users/F001/gists{/gist_id}", "starred_url": "https://api.github.com/users/F001/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/F001/subscriptions", "organizations_url": "https://api.github.com/users/F001/orgs", "repos_url": "https://api.github.com/users/F001/repos", "events_url": "https://api.github.com/users/F001/events{/privacy}", "received_events_url": "https://api.github.com/users/F001/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e1b983579ec582dfbe409342756252f6b080918", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e1b983579ec582dfbe409342756252f6b080918", "html_url": "https://github.com/rust-lang/rust/commit/7e1b983579ec582dfbe409342756252f6b080918"}], "stats": {"total": 28, "additions": 10, "deletions": 18}, "files": [{"sha": "8a0f499b598a594df503fa1c8a6c59435f203184", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8812c6bae92d1a8e3a255d3eacd40cd9b65bb7f6/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8812c6bae92d1a8e3a255d3eacd40cd9b65bb7f6/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=8812c6bae92d1a8e3a255d3eacd40cd9b65bb7f6", "patch": "@@ -200,8 +200,9 @@ use cmp::Ordering;\n use fmt::{self, Debug, Display};\n use marker::Unsize;\n use mem;\n-use ops::{Deref, DerefMut, CoerceUnsized};\n+use ops::{Deref, DerefMut, CoerceUnsized, Index};\n use ptr;\n+use slice::SliceIndex;\n \n /// A mutable memory location.\n ///\n@@ -510,7 +511,7 @@ impl<T: ?Sized> Cell<T> {\n     ///\n     /// let slice: &mut [i32] = &mut [1, 2, 3];\n     /// let cell_slice: &Cell<[i32]> = Cell::from_mut(slice);\n-    /// assert_eq!(cell_slice.len(), 3);\n+    /// assert_eq!(cell_slice[..].len(), 3);\n     ///\n     /// let slice_cell: &[Cell<i32>] = &cell_slice[..];\n     /// assert_eq!(slice_cell.len(), 3);\n@@ -548,23 +549,14 @@ impl<T: Default> Cell<T> {\n impl<T: CoerceUnsized<U>, U> CoerceUnsized<Cell<U>> for Cell<T> {}\n \n #[unstable(feature = \"as_cell\", issue=\"43038\")]\n-impl<T> Deref for Cell<[T]> {\n-    type Target = [Cell<T>];\n+impl<T, I> Index<I> for Cell<[T]>\n+    where I: SliceIndex<[Cell<T>]>\n+{\n+    type Output = I::Output;\n \n-    #[inline]\n-    fn deref(&self) -> &[Cell<T>] {\n-        unsafe {\n-            &*(self as *const Cell<[T]> as *const [Cell<T>])\n-        }\n-    }\n-}\n-\n-#[unstable(feature = \"as_cell\", issue=\"43038\")]\n-impl<T> DerefMut for Cell<[T]> {\n-    #[inline]\n-    fn deref_mut(&mut self) -> &mut [Cell<T>] {\n+    fn index(&self, index: I) -> &Self::Output {\n         unsafe {\n-            &mut *(self as *mut Cell<[T]> as *mut [Cell<T>])\n+            Index::index(&*(self as *const Cell<[T]> as *const [Cell<T>]), index)\n         }\n     }\n }"}, {"sha": "bd00f305cc49a4c7ab0089498e75409b7f761c82", "filename": "src/test/run-pass/rfc-1789-as-cell/from-mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8812c6bae92d1a8e3a255d3eacd40cd9b65bb7f6/src%2Ftest%2Frun-pass%2Frfc-1789-as-cell%2Ffrom-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8812c6bae92d1a8e3a255d3eacd40cd9b65bb7f6/src%2Ftest%2Frun-pass%2Frfc-1789-as-cell%2Ffrom-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-1789-as-cell%2Ffrom-mut.rs?ref=8812c6bae92d1a8e3a255d3eacd40cd9b65bb7f6", "patch": "@@ -15,7 +15,7 @@ use std::cell::Cell;\n fn main() {\n     let slice: &mut [i32] = &mut [1, 2, 3];\n     let cell_slice: &Cell<[i32]> = Cell::from_mut(slice);\n-    assert_eq!(cell_slice.len(), 3);\n+    assert_eq!(cell_slice[..].len(), 3);\n \n     let sub_slice: &[Cell<i32>] = &cell_slice[1..];\n     assert_eq!(sub_slice.len(), 2);"}]}