{"sha": "a3fd2faba5b0736fd51c7b94cae55e0a9609cdb0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzZmQyZmFiYTViMDczNmZkNTFjN2I5NGNhZTU1ZTBhOTYwOWNkYjA=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-02-28T19:44:09Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-02-28T19:44:09Z"}, "message": "Remove Substs from Ty::ForeignType", "tree": {"sha": "c99eee1f422e009f039bc5c1fd68120bc217d417", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c99eee1f422e009f039bc5c1fd68120bc217d417"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3fd2faba5b0736fd51c7b94cae55e0a9609cdb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3fd2faba5b0736fd51c7b94cae55e0a9609cdb0", "html_url": "https://github.com/rust-lang/rust/commit/a3fd2faba5b0736fd51c7b94cae55e0a9609cdb0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3fd2faba5b0736fd51c7b94cae55e0a9609cdb0/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e995adcf690778739fe94fb94ae317d42b4e51b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e995adcf690778739fe94fb94ae317d42b4e51b", "html_url": "https://github.com/rust-lang/rust/commit/0e995adcf690778739fe94fb94ae317d42b4e51b"}], "stats": {"total": 27, "additions": 9, "deletions": 18}, "files": [{"sha": "4a25a49e3f5419fdf4665aa86e3fe3103a114c9f", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a3fd2faba5b0736fd51c7b94cae55e0a9609cdb0/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3fd2faba5b0736fd51c7b94cae55e0a9609cdb0/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=a3fd2faba5b0736fd51c7b94cae55e0a9609cdb0", "patch": "@@ -471,14 +471,9 @@ impl HirDisplay for Ty {\n                     projection_ty.hir_fmt(f)?;\n                 }\n             }\n-            Ty::ForeignType(type_alias, parameters) => {\n+            Ty::ForeignType(type_alias) => {\n                 let type_alias = f.db.type_alias_data(*type_alias);\n                 write!(f, \"{}\", type_alias.name)?;\n-                if parameters.len() > 0 {\n-                    write!(f, \"<\")?;\n-                    f.write_joined(&*parameters.0, \", \")?;\n-                    write!(f, \">\")?;\n-                }\n             }\n             Ty::OpaqueType(opaque_ty_id, parameters) => {\n                 match opaque_ty_id {"}, {"sha": "4c0ebcfe334fc83bb1595226c72b3059dc36aca1", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a3fd2faba5b0736fd51c7b94cae55e0a9609cdb0/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3fd2faba5b0736fd51c7b94cae55e0a9609cdb0/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=a3fd2faba5b0736fd51c7b94cae55e0a9609cdb0", "patch": "@@ -169,7 +169,7 @@ pub enum Ty {\n     Closure { def: DefWithBodyId, expr: ExprId, substs: Substs },\n \n     /// Represents a foreign type declared in external blocks.\n-    ForeignType(TypeAliasId, Substs),\n+    ForeignType(TypeAliasId),\n \n     /// A pointer to a function.  Written as `fn() -> i32`.\n     ///\n@@ -755,7 +755,6 @@ impl Ty {\n             | Ty::Tuple(_, substs)\n             | Ty::OpaqueType(_, substs)\n             | Ty::AssociatedType(_, substs)\n-            | Ty::ForeignType(_, substs)\n             | Ty::Closure { substs, .. } => {\n                 assert_eq!(substs.len(), new_substs.len());\n                 *substs = new_substs;\n@@ -779,7 +778,6 @@ impl Ty {\n             | Ty::Tuple(_, substs)\n             | Ty::OpaqueType(_, substs)\n             | Ty::AssociatedType(_, substs)\n-            | Ty::ForeignType(_, substs)\n             | Ty::Closure { substs, .. } => Some(substs),\n             _ => None,\n         }\n@@ -797,7 +795,6 @@ impl Ty {\n             | Ty::Tuple(_, substs)\n             | Ty::OpaqueType(_, substs)\n             | Ty::AssociatedType(_, substs)\n-            | Ty::ForeignType(_, substs)\n             | Ty::Closure { substs, .. } => Some(substs),\n             _ => None,\n         }"}, {"sha": "84734bc0bd13b9f22ab0a35ec04b445ece74cef1", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3fd2faba5b0736fd51c7b94cae55e0a9609cdb0/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3fd2faba5b0736fd51c7b94cae55e0a9609cdb0/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=a3fd2faba5b0736fd51c7b94cae55e0a9609cdb0", "patch": "@@ -1100,10 +1100,10 @@ fn type_for_type_alias(db: &dyn HirDatabase, t: TypeAliasId) -> Binders<Ty> {\n     let resolver = t.resolver(db.upcast());\n     let ctx =\n         TyLoweringContext::new(db, &resolver).with_type_param_mode(TypeParamLoweringMode::Variable);\n-    let substs = Substs::bound_vars(&generics, DebruijnIndex::INNERMOST);\n     if db.type_alias_data(t).is_extern {\n-        Binders::new(substs.len(), Ty::ForeignType(t, substs))\n+        Binders::new(0, Ty::ForeignType(t))\n     } else {\n+        let substs = Substs::bound_vars(&generics, DebruijnIndex::INNERMOST);\n         let type_ref = &db.type_alias_data(t).type_ref;\n         let inner = Ty::from_hir(&ctx, type_ref.as_ref().unwrap_or(&TypeRef::Error));\n         Binders::new(substs.len(), inner)"}, {"sha": "ff8ce5599b1295275e0f82a4070f3189da2bad02", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3fd2faba5b0736fd51c7b94cae55e0a9609cdb0/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3fd2faba5b0736fd51c7b94cae55e0a9609cdb0/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=a3fd2faba5b0736fd51c7b94cae55e0a9609cdb0", "patch": "@@ -235,7 +235,7 @@ impl Ty {\n             Ty::Adt(def_id, _) => {\n                 return mod_to_crate_ids(def_id.module(db.upcast()));\n             }\n-            Ty::ForeignType(type_alias_id, _) => {\n+            Ty::ForeignType(type_alias_id) => {\n                 return mod_to_crate_ids(type_alias_id.lookup(db.upcast()).module(db.upcast()));\n             }\n             Ty::Scalar(Scalar::Bool) => lang_item_crate!(\"bool\"),"}, {"sha": "c17c196385f7da55d74218bb8084198b7b959a18", "filename": "crates/hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a3fd2faba5b0736fd51c7b94cae55e0a9609cdb0/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3fd2faba5b0736fd51c7b94cae55e0a9609cdb0/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=a3fd2faba5b0736fd51c7b94cae55e0a9609cdb0", "patch": "@@ -55,7 +55,7 @@ impl ToChalk for Ty {\n                 chalk_ir::TyKind::OpaqueType(id, substitution).intern(&Interner)\n             }\n \n-            Ty::ForeignType(type_alias, _) => {\n+            Ty::ForeignType(type_alias) => {\n                 let foreign_type = TypeAliasAsForeignType(type_alias);\n                 let foreign_type_id = foreign_type.to_chalk(db);\n                 chalk_ir::TyKind::Foreign(foreign_type_id).intern(&Interner)\n@@ -221,10 +221,9 @@ impl ToChalk for Ty {\n                 Ty::Closure { def, expr, substs: from_chalk(db, subst) }\n             }\n \n-            chalk_ir::TyKind::Foreign(foreign_def_id) => Ty::ForeignType(\n-                from_chalk::<TypeAliasAsForeignType, _>(db, foreign_def_id).0,\n-                Substs::empty(),\n-            ),\n+            chalk_ir::TyKind::Foreign(foreign_def_id) => {\n+                Ty::ForeignType(from_chalk::<TypeAliasAsForeignType, _>(db, foreign_def_id).0)\n+            }\n             chalk_ir::TyKind::Generator(_, _) => unimplemented!(), // FIXME\n             chalk_ir::TyKind::GeneratorWitness(_, _) => unimplemented!(), // FIXME\n         }"}]}