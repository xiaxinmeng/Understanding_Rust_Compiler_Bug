{"sha": "0d06001449d56e6e138644e1035c84148a56e557", "node_id": "C_kwDOAAsO6NoAKDBkMDYwMDE0NDlkNTZlNmUxMzg2NDRlMTAzNWM4NDE0OGE1NmU1NTc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-12T08:27:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-12T08:27:12Z"}, "message": "Auto merge of #10621 - fee1-dead-contrib:bump_syn, r=flip1995\n\nbump syn to 2.0\n\nchangelog: none", "tree": {"sha": "363b02e1bc044bc531801673403f1067c7fd1b78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/363b02e1bc044bc531801673403f1067c7fd1b78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d06001449d56e6e138644e1035c84148a56e557", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d06001449d56e6e138644e1035c84148a56e557", "html_url": "https://github.com/rust-lang/rust/commit/0d06001449d56e6e138644e1035c84148a56e557", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d06001449d56e6e138644e1035c84148a56e557/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a774bb2c789b4dc5ca5d595c467b01a42b56803", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a774bb2c789b4dc5ca5d595c467b01a42b56803", "html_url": "https://github.com/rust-lang/rust/commit/2a774bb2c789b4dc5ca5d595c467b01a42b56803"}, {"sha": "d406f653c9e4d52a19ec7e0c9b7b1bb88c04071e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d406f653c9e4d52a19ec7e0c9b7b1bb88c04071e", "html_url": "https://github.com/rust-lang/rust/commit/d406f653c9e4d52a19ec7e0c9b7b1bb88c04071e"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "5bb9f527081e2909edac7ee0932af0e973e30cec", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d06001449d56e6e138644e1035c84148a56e557/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0d06001449d56e6e138644e1035c84148a56e557/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=0d06001449d56e6e138644e1035c84148a56e557", "patch": "@@ -49,7 +49,7 @@ if_chain = \"1.0\"\n itertools = \"0.10.1\"\n quote = \"1.0\"\n serde = { version = \"1.0.125\", features = [\"derive\"] }\n-syn = { version = \"1.0\", features = [\"full\"] }\n+syn = { version = \"2.0\", features = [\"full\"] }\n futures = \"0.3\"\n parking_lot = \"0.12\"\n tokio = { version = \"1\", features = [\"io-util\"] }"}, {"sha": "bd26f4fc91395c0a76462f1db6fc3f208f87ce63", "filename": "declare_clippy_lint/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d06001449d56e6e138644e1035c84148a56e557/declare_clippy_lint%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0d06001449d56e6e138644e1035c84148a56e557/declare_clippy_lint%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/declare_clippy_lint%2FCargo.toml?ref=0d06001449d56e6e138644e1035c84148a56e557", "patch": "@@ -10,7 +10,7 @@ proc-macro = true\n [dependencies]\n itertools = \"0.10.1\"\n quote = \"1.0.21\"\n-syn = \"1.0.100\"\n+syn = \"2.0\"\n \n [features]\n deny-warnings = []"}, {"sha": "5232e4ab7d754c9062a001ead79aa64f7a843299", "filename": "declare_clippy_lint/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0d06001449d56e6e138644e1035c84148a56e557/declare_clippy_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d06001449d56e6e138644e1035c84148a56e557/declare_clippy_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/declare_clippy_lint%2Fsrc%2Flib.rs?ref=0d06001449d56e6e138644e1035c84148a56e557", "patch": "@@ -6,16 +6,16 @@\n use proc_macro::TokenStream;\n use quote::{format_ident, quote};\n use syn::parse::{Parse, ParseStream};\n-use syn::{parse_macro_input, Attribute, Error, Ident, Lit, LitStr, Meta, Result, Token};\n+use syn::{parse_macro_input, Attribute, Error, Expr, ExprLit, Ident, Lit, LitStr, Meta, Result, Token};\n \n fn parse_attr<const LEN: usize>(path: [&'static str; LEN], attr: &Attribute) -> Option<LitStr> {\n-    if let Meta::NameValue(name_value) = attr.parse_meta().ok()? {\n+    if let Meta::NameValue(name_value) = &attr.meta {\n         let path_idents = name_value.path.segments.iter().map(|segment| &segment.ident);\n \n         if itertools::equal(path_idents, path)\n-            && let Lit::Str(lit) = name_value.lit\n+            && let Expr::Lit(ExprLit { lit: Lit::Str(s), .. }) = &name_value.value\n         {\n-            return Some(lit);\n+            return Some(s.clone());\n         }\n     }\n "}, {"sha": "b498fece513223d5e5912d1dfb3b27335cf1237f", "filename": "tests/ui/auxiliary/proc_macro_attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d06001449d56e6e138644e1035c84148a56e557/tests%2Fui%2Fauxiliary%2Fproc_macro_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d06001449d56e6e138644e1035c84148a56e557/tests%2Fui%2Fauxiliary%2Fproc_macro_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fproc_macro_attr.rs?ref=0d06001449d56e6e138644e1035c84148a56e557", "patch": "@@ -28,7 +28,7 @@ pub fn dummy(_args: TokenStream, input: TokenStream) -> TokenStream {\n pub fn fake_async_trait(_args: TokenStream, input: TokenStream) -> TokenStream {\n     let mut item = parse_macro_input!(input as ItemTrait);\n     for inner in &mut item.items {\n-        if let TraitItem::Method(method) = inner {\n+        if let TraitItem::Fn(method) = inner {\n             let sig = &method.sig;\n             let block = &mut method.default;\n             if let Some(block) = block {\n@@ -70,7 +70,7 @@ pub fn rename_my_lifetimes(_args: TokenStream, input: TokenStream) -> TokenStrea\n \n     // Look for methods having arbitrary self type taken by &mut ref\n     for inner in &mut item.items {\n-        if let ImplItem::Method(method) = inner {\n+        if let ImplItem::Fn(method) = inner {\n             if let Some(FnArg::Typed(pat_type)) = mut_receiver_of(&mut method.sig) {\n                 if let box Type::Reference(reference) = &mut pat_type.ty {\n                     // Target only unnamed lifetimes"}, {"sha": "c7df5936d706a5c3c094836846d0d140d47fc299", "filename": "tests/ui/needless_arbitrary_self_type_unfixable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d06001449d56e6e138644e1035c84148a56e557/tests%2Fui%2Fneedless_arbitrary_self_type_unfixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d06001449d56e6e138644e1035c84148a56e557/tests%2Fui%2Fneedless_arbitrary_self_type_unfixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_arbitrary_self_type_unfixable.stderr?ref=0d06001449d56e6e138644e1035c84148a56e557", "patch": "@@ -2,7 +2,7 @@ error: the type of the `self` parameter does not need to be arbitrary\n   --> $DIR/needless_arbitrary_self_type_unfixable.rs:42:31\n    |\n LL |         fn call_with_mut_self(self: &mut Self) {}\n-   |                               ^^^^^^^^^^^^^^^ help: consider to change this parameter to: `&'_ mut self`\n+   |                               ^^^^^^^^^^^^^^^ help: consider to change this parameter to: `&mut self`\n    |\n    = note: `-D clippy::needless-arbitrary-self-type` implied by `-D warnings`\n "}]}