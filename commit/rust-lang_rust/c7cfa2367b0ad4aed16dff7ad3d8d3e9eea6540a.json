{"sha": "c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3Y2ZhMjM2N2IwYWQ0YWVkMTZkZmY3YWQzZDhkM2U5ZWVhNjU0MGE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-04T10:40:43Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-15T15:27:50Z"}, "message": "thread through an implicit region body of the fn body", "tree": {"sha": "6a9f663c0e4649eb5e47614389ac6b43e05c58ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a9f663c0e4649eb5e47614389ac6b43e05c58ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a", "html_url": "https://github.com/rust-lang/rust/commit/c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "154cd9419763f35c0f38b1cb044f43eeece1ebf0", "url": "https://api.github.com/repos/rust-lang/rust/commits/154cd9419763f35c0f38b1cb044f43eeece1ebf0", "html_url": "https://github.com/rust-lang/rust/commit/154cd9419763f35c0f38b1cb044f43eeece1ebf0"}], "stats": {"total": 180, "additions": 135, "deletions": 45}, "files": [{"sha": "9e7c94cd7ffb782cac495704605e4594b1f11fc8", "filename": "src/librustc_mir/borrow_check/nll/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs?ref=c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a", "patch": "@@ -78,11 +78,13 @@ pub(in borrow_check) fn compute_regions<'cx, 'gcx, 'tcx>(\n     // Run the MIR type-checker.\n     let mir_node_id = infcx.tcx.hir.as_local_node_id(def_id).unwrap();\n     let liveness = &LivenessResults::compute(mir);\n+    let fr_fn_body = infcx.tcx.mk_region(ty::ReVar(universal_regions.fr_fn_body));\n     let constraint_sets = &type_check::type_check(\n         infcx,\n         mir_node_id,\n         param_env,\n         mir,\n+        fr_fn_body,\n         &liveness,\n         flow_inits,\n         move_data,"}, {"sha": "4759185d2262379ae15213239dc49b17b55963df", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a", "patch": "@@ -439,6 +439,8 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// have no evidence that `'b` outlives `'a`, so we want to report\n     /// an error.\n     fn check_type_tests(&self, infcx: &InferCtxt<'_, '_, 'tcx>, mir: &Mir<'tcx>) {\n+        let tcx = infcx.tcx;\n+\n         for type_test in &self.type_tests {\n             debug!(\"check_type_test: {:?}\", type_test);\n \n@@ -452,7 +454,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             }\n \n             // Oh the humanity. Obviously we will do better than this error eventually.\n-            infcx.tcx.sess.span_err(\n+            tcx.sess.span_err(\n                 type_test.span,\n                 &format!(\"failed type test: {:?}\", type_test),\n             );"}, {"sha": "f7493f653e08177fdf4305b05369fa827d9648ba", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a", "patch": "@@ -51,23 +51,30 @@ pub(crate) fn type_check<'gcx, 'tcx>(\n     body_id: ast::NodeId,\n     param_env: ty::ParamEnv<'gcx>,\n     mir: &Mir<'tcx>,\n+    implicit_region_bound: ty::Region<'tcx>,\n     liveness: &LivenessResults,\n     flow_inits: &mut FlowAtLocation<MaybeInitializedLvals<'_, 'gcx, 'tcx>>,\n     move_data: &MoveData<'tcx>,\n ) -> MirTypeckRegionConstraints<'tcx> {\n-    type_check_internal(infcx, body_id, param_env, mir, &mut |cx| {\n-        liveness::generate(cx, mir, liveness, flow_inits, move_data)\n-    })\n+    type_check_internal(\n+        infcx,\n+        body_id,\n+        param_env,\n+        mir,\n+        Some(implicit_region_bound),\n+        &mut |cx| liveness::generate(cx, mir, liveness, flow_inits, move_data),\n+    )\n }\n \n fn type_check_internal<'gcx, 'tcx>(\n     infcx: &InferCtxt<'_, 'gcx, 'tcx>,\n     body_id: ast::NodeId,\n     param_env: ty::ParamEnv<'gcx>,\n     mir: &Mir<'tcx>,\n+    implicit_region_bound: Option<ty::Region<'tcx>>,\n     extra: &mut FnMut(&mut TypeChecker<'_, 'gcx, 'tcx>),\n ) -> MirTypeckRegionConstraints<'tcx> {\n-    let mut checker = TypeChecker::new(infcx, body_id, param_env);\n+    let mut checker = TypeChecker::new(infcx, body_id, param_env, implicit_region_bound);\n     let errors_reported = {\n         let mut verifier = TypeVerifier::new(&mut checker, mir);\n         verifier.visit_mir(mir);\n@@ -535,6 +542,7 @@ struct TypeChecker<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     param_env: ty::ParamEnv<'gcx>,\n     last_span: Span,\n     body_id: ast::NodeId,\n+    implicit_region_bound: Option<ty::Region<'tcx>>,\n     reported_errors: FxHashSet<(Ty<'tcx>, Span)>,\n     constraints: MirTypeckRegionConstraints<'tcx>,\n }\n@@ -588,12 +596,14 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n         body_id: ast::NodeId,\n         param_env: ty::ParamEnv<'gcx>,\n+        implicit_region_bound: Option<ty::Region<'tcx>>,\n     ) -> Self {\n         TypeChecker {\n             infcx,\n             last_span: DUMMY_SP,\n             body_id,\n             param_env,\n+            implicit_region_bound,\n             reported_errors: FxHashSet(),\n             constraints: MirTypeckRegionConstraints::default(),\n         }\n@@ -618,8 +628,12 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             span_mirbug!(self, \"\", \"errors selecting obligation: {:?}\", e);\n         }\n \n-        self.infcx\n-            .process_registered_region_obligations(&[], None, self.param_env, self.body_id);\n+        self.infcx.process_registered_region_obligations(\n+            &[],\n+            self.implicit_region_bound,\n+            self.param_env,\n+            self.body_id,\n+        );\n \n         let data = self.infcx.take_and_reset_region_constraints();\n         if !data.is_empty() {\n@@ -1501,7 +1515,7 @@ impl MirPass for TypeckMir {\n         }\n         let param_env = tcx.param_env(def_id);\n         tcx.infer_ctxt().enter(|infcx| {\n-            let _ = type_check_internal(&infcx, id, param_env, mir, &mut |_| ());\n+            let _ = type_check_internal(&infcx, id, param_env, mir, None, &mut |_| ());\n \n             // For verification purposes, we just ignore the resulting\n             // region constraint sets. Not our problem. =)"}, {"sha": "ce931a68a0c3b7f05a3215204ba918ac3646fd77", "filename": "src/librustc_mir/borrow_check/nll/universal_regions.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs?ref=c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a", "patch": "@@ -45,6 +45,11 @@ pub struct UniversalRegions<'tcx> {\n     /// The vid assigned to `'static`\n     pub fr_static: RegionVid,\n \n+    /// A special region vid created to represent the current MIR fn\n+    /// body.  It will outlive the entire CFG but it will not outlive\n+    /// any other universal regions.\n+    pub fr_fn_body: RegionVid,\n+\n     /// We create region variables such that they are ordered by their\n     /// `RegionClassification`. The first block are globals, then\n     /// externals, then locals. So things from:\n@@ -408,6 +413,7 @@ impl<'cx, 'gcx, 'tcx> UniversalRegionsBuilder<'cx, 'gcx, 'tcx> {\n         let first_local_index = self.infcx.num_region_vars();\n         let inputs_and_output = self.infcx\n             .replace_bound_regions_with_nll_infer_vars(FR, &bound_inputs_and_output);\n+        let fr_fn_body = self.infcx.next_nll_region_var(FR).to_region_vid();\n         let num_universals = self.infcx.num_region_vars();\n \n         // Insert the facts we know from the predicates. Why? Why not.\n@@ -419,12 +425,16 @@ impl<'cx, 'gcx, 'tcx> UniversalRegionsBuilder<'cx, 'gcx, 'tcx> {\n             self.add_implied_bounds(&indices, ty);\n         }\n \n-        // Finally, outlives is reflexive, and static outlives every\n-        // other free region.\n+        // Finally:\n+        // - outlives is reflexive, so `'r: 'r` for every region `'r`\n+        // - `'static: 'r` for every region `'r`\n+        // - `'r: 'fn_body` for every (other) universally quantified\n+        //   region `'r`, all of which are provided by our caller\n         for fr in (FIRST_GLOBAL_INDEX..num_universals).map(RegionVid::new) {\n             debug!(\"build: relating free region {:?} to itself and to 'static\", fr);\n             self.relations.relate_universal_regions(fr, fr);\n             self.relations.relate_universal_regions(fr_static, fr);\n+            self.relations.relate_universal_regions(fr, fr_fn_body);\n         }\n \n         let (output_ty, input_tys) = inputs_and_output.split_last().unwrap();\n@@ -445,6 +455,7 @@ impl<'cx, 'gcx, 'tcx> UniversalRegionsBuilder<'cx, 'gcx, 'tcx> {\n         UniversalRegions {\n             indices,\n             fr_static,\n+            fr_fn_body,\n             first_extern_index,\n             first_local_index,\n             num_universals,"}, {"sha": "71304f71b61013d22b61799e507b7b6c5e1d0ac6", "filename": "src/test/mir-opt/nll/named-lifetimes-basic.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed-lifetimes-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed-lifetimes-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed-lifetimes-basic.rs?ref=c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a", "patch": "@@ -27,16 +27,18 @@ fn main() {\n // END RUST SOURCE\n // START rustc.use_x.nll.0.mir\n // | Free Region Mapping\n-// | '_#0r    | Global   | ['_#2r, '_#1r, '_#0r, '_#3r]\n-// | '_#1r    | External | ['_#1r]\n-// | '_#2r    | External | ['_#2r, '_#1r]\n-// | '_#3r    | Local    | ['_#3r]\n+// | '_#0r    | Global   | ['_#2r, '_#1r, '_#0r, '_#4r, '_#3r]\n+// | '_#1r    | External | ['_#1r, '_#4r]\n+// | '_#2r    | External | ['_#2r, '_#1r, '_#4r]\n+// | '_#3r    | Local    | ['_#4r, '_#3r]\n+// | '_#4r    | Local    | ['_#4r]\n // |\n // | Inferred Region Values\n // | '_#0r    | {'_#0r, bb0[0], bb0[1]}\n // | '_#1r    | {'_#1r, bb0[0], bb0[1]}\n // | '_#2r    | {'_#2r, bb0[0], bb0[1]}\n // | '_#3r    | {'_#3r, bb0[0], bb0[1]}\n+// | '_#4r    | {'_#4r, bb0[0], bb0[1]}\n // |\n // ...\n // fn use_x(_1: &'_#1r mut i32, _2: &'_#2r u32, _3: &'_#1r u32, _4: &'_#3r u32) -> bool {"}, {"sha": "9e6d6aaee15bea19009d4ba28c63b99cfddca5a7", "filename": "src/test/mir-opt/nll/reborrow-basic.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a/src%2Ftest%2Fmir-opt%2Fnll%2Freborrow-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a/src%2Ftest%2Fmir-opt%2Fnll%2Freborrow-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Freborrow-basic.rs?ref=c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a", "patch": "@@ -28,11 +28,11 @@ fn main() {\n \n // END RUST SOURCE\n // START rustc.main.nll.0.mir\n-// | '_#6r    | {bb0[6], bb0[7], bb0[8], bb0[9], bb0[10], bb0[11], bb0[12], bb0[13], bb0[14]}\n+// | '_#7r    | {bb0[6], bb0[7], bb0[8], bb0[9], bb0[10], bb0[11], bb0[12], bb0[13], bb0[14]}\n // ...\n-// | '_#8r    | {bb0[11], bb0[12], bb0[13], bb0[14]}\n+// | '_#9r    | {bb0[11], bb0[12], bb0[13], bb0[14]}\n // ...\n-// let _2: &'_#6r mut i32;\n+// let _2: &'_#7r mut i32;\n // ...\n-// let _4: &'_#8r mut i32;\n+// let _4: &'_#9r mut i32;\n // END rustc.main.nll.0.mir"}, {"sha": "ab99d79d7f388ab2dfe8235145a0a88c3ac80a0a", "filename": "src/test/mir-opt/nll/region-liveness-basic.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-liveness-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-liveness-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-liveness-basic.rs?ref=c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a", "patch": "@@ -31,15 +31,15 @@ fn main() {\n \n // END RUST SOURCE\n // START rustc.main.nll.0.mir\n-// | '_#1r    | {bb2[0], bb2[1], bb3[0], bb3[1]}\n-// | '_#2r    | {bb2[1], bb3[0], bb3[1]}\n+// | '_#2r    | {bb2[0], bb2[1], bb3[0], bb3[1]}\n+// | '_#3r    | {bb2[1], bb3[0], bb3[1]}\n // ...\n-//             let _2: &'_#2r usize;\n+//             let _2: &'_#3r usize;\n // END rustc.main.nll.0.mir\n // START rustc.main.nll.0.mir\n //    bb2: {\n //            | Live variables on entry to bb2[0]: [_1, _3]\n-//        _2 = &'_#1r _1[_3];\n+//        _2 = &'_#2r _1[_3];\n //            | Live variables on entry to bb2[1]: [_2]\n //        switchInt(const true) -> [0u8: bb4, otherwise: bb3];\n //    }"}, {"sha": "515772a9427116abee38812ebf5979307b600fb6", "filename": "src/test/mir-opt/nll/region-liveness-drop-may-dangle.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-liveness-drop-may-dangle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-liveness-drop-may-dangle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-liveness-drop-may-dangle.rs?ref=c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a", "patch": "@@ -44,5 +44,7 @@ unsafe impl<#[may_dangle] T> Drop for Wrap<T> {\n \n // END RUST SOURCE\n // START rustc.main.nll.0.mir\n-// | '_#5r    | {bb2[3], bb2[4], bb2[5], bb3[0], bb3[1]}\n+// | '_#6r    | {bb2[3], bb2[4], bb2[5], bb3[0], bb3[1]}\n+// ...\n+// let _2: Wrap<&'_#6r usize>;\n // END rustc.main.nll.0.mir"}, {"sha": "a257910b0b80bd6764035f7b6c00f86c824c6f44", "filename": "src/test/mir-opt/nll/region-liveness-drop-no-may-dangle.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-liveness-drop-no-may-dangle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-liveness-drop-no-may-dangle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-liveness-drop-no-may-dangle.rs?ref=c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a", "patch": "@@ -46,5 +46,7 @@ impl<T> Drop for Wrap<T> {\n \n // END RUST SOURCE\n // START rustc.main.nll.0.mir\n-// | '_#5r    | {bb2[3], bb2[4], bb2[5], bb3[0], bb3[1], bb3[2], bb4[0], bb5[0], bb5[1], bb5[2], bb6[0], bb7[0], bb7[1], bb8[0]}\n+// | '_#6r    | {bb2[3], bb2[4], bb2[5], bb3[0], bb3[1], bb3[2], bb4[0], bb5[0], bb5[1], bb5[2], bb6[0], bb7[0], bb7[1], bb8[0]}\n+// ...\n+// let _2: Wrap<&'_#6r usize>;\n // END rustc.main.nll.0.mir"}, {"sha": "3041c2cb061625ab0b01058ea4b97691428ae429", "filename": "src/test/mir-opt/nll/region-liveness-two-disjoint-uses.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-liveness-two-disjoint-uses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-liveness-two-disjoint-uses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-liveness-two-disjoint-uses.rs?ref=c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a", "patch": "@@ -36,14 +36,14 @@ fn main() {\n \n // END RUST SOURCE\n // START rustc.main.nll.0.mir\n-// | '_#1r    | {bb2[0], bb2[1], bb3[0], bb3[1]}\n+// | '_#2r    | {bb2[0], bb2[1], bb3[0], bb3[1]}\n // ...\n-// | '_#3r    | {bb8[1], bb8[2], bb8[3], bb8[4]}\n-// | '_#4r    | {bb2[1], bb3[0], bb3[1], bb8[2], bb8[3], bb8[4]}\n+// | '_#4r    | {bb8[1], bb8[2], bb8[3], bb8[4]}\n+// | '_#5r    | {bb2[1], bb3[0], bb3[1], bb8[2], bb8[3], bb8[4]}\n // ...\n-// let mut _2: &'_#4r usize;\n+// let mut _2: &'_#5r usize;\n // ...\n-// _2 = &'_#1r _1[_3];\n+// _2 = &'_#2r _1[_3];\n // ...\n-// _2 = &'_#3r (*_10);\n+// _2 = &'_#4r (*_10);\n // END rustc.main.nll.0.mir"}, {"sha": "5a3f831331c43fd7155ecc24381754ae40967d20", "filename": "src/test/mir-opt/nll/region-subtyping-basic.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic.rs?ref=c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a", "patch": "@@ -32,16 +32,16 @@ fn main() {\n \n // END RUST SOURCE\n // START rustc.main.nll.0.mir\n-// | '_#1r    | {bb2[0], bb2[1], bb2[2], bb2[3], bb2[4], bb2[5], bb2[6], bb3[0], bb3[1]}\n-// | '_#2r    | {bb2[1], bb2[2], bb2[3], bb2[4], bb2[5], bb2[6], bb3[0], bb3[1]}\n-// | '_#3r    | {bb2[5], bb2[6], bb3[0], bb3[1]}\n+// | '_#2r    | {bb2[0], bb2[1], bb2[2], bb2[3], bb2[4], bb2[5], bb2[6], bb3[0], bb3[1]}\n+// | '_#3r    | {bb2[1], bb2[2], bb2[3], bb2[4], bb2[5], bb2[6], bb3[0], bb3[1]}\n+// | '_#4r    | {bb2[5], bb2[6], bb3[0], bb3[1]}\n // END rustc.main.nll.0.mir\n // START rustc.main.nll.0.mir\n-// let _2: &'_#2r usize;\n+// let _2: &'_#3r usize;\n // ...\n-// let _6: &'_#3r usize;\n+// let _6: &'_#4r usize;\n // ...\n-// _2 = &'_#1r _1[_3];\n+// _2 = &'_#2r _1[_3];\n // ...\n // _7 = _2;\n // ..."}, {"sha": "9f62b2a41c5b988e737999fc5c68db040145c895", "filename": "src/test/ui/nll/capture-ref-in-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.stderr?ref=c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a", "patch": "@@ -7,7 +7,7 @@ error[E0597]: `y` does not live long enough\n 37 |     }\n    |      - borrowed value only lives until here\n    |\n-   = note: borrowed value must be valid for lifetime '_#4r...\n+   = note: borrowed value must be valid for lifetime '_#5r...\n \n error: aborting due to previous error\n "}, {"sha": "2b0e3661376d31ff171a0acb33722c31fae8ea6d", "filename": "src/test/ui/nll/closure-requirements/escape-argument.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr?ref=c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a", "patch": "@@ -32,7 +32,7 @@ error[E0597]: `y` does not live long enough\n 39 |     }\n    |      - borrowed value only lives until here\n    |\n-   = note: borrowed value must be valid for lifetime '_#5r...\n+   = note: borrowed value must be valid for lifetime '_#6r...\n \n error: aborting due to previous error\n "}, {"sha": "ddda72c5686ef75091bd3cb133e2dcbbaa2128bb", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-nested.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr?ref=c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a", "patch": "@@ -59,7 +59,7 @@ error[E0597]: `y` does not live long enough\n 36 |       }\n    |        - borrowed value only lives until here\n    |\n-   = note: borrowed value must be valid for lifetime '_#3r...\n+   = note: borrowed value must be valid for lifetime '_#4r...\n \n error: aborting due to previous error\n "}, {"sha": "a0814cfc15fa4b6caf440e77d2066602a249070b", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr?ref=c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a", "patch": "@@ -36,7 +36,7 @@ error[E0597]: `y` does not live long enough\n 36 |     }\n    |      - borrowed value only lives until here\n    |\n-   = note: borrowed value must be valid for lifetime '_#3r...\n+   = note: borrowed value must be valid for lifetime '_#4r...\n \n error: aborting due to previous error\n "}, {"sha": "c5107322f6f2c876b23f5aa796ceab07a22f9587", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-comparing-against-free.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr?ref=c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a", "patch": "@@ -79,7 +79,7 @@ error[E0597]: `a` does not live long enough\n 49 | }\n    | - borrowed value only lives until here\n    |\n-   = note: borrowed value must be valid for lifetime '_#1r...\n+   = note: borrowed value must be valid for lifetime '_#2r...\n \n error: aborting due to 2 previous errors\n "}, {"sha": "77eabef654566dd4359786582f92786c80c8fc59", "filename": "src/test/ui/nll/ty-outlives/projection-fn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-fn.stderr?ref=c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a", "patch": "@@ -10,13 +10,13 @@ warning: not reporting region error due to -Znll\n 40 |     Box::new(x.next())\n    |     ^^^^^^^^^^^^^^^^^^\n \n-error: failed type test: TypeTest { generic_kind: ProjectionTy { substs: Slice([T]), item_def_id: DefId(2/0:1695 ~ core[2633]::iter[0]::iterator[0]::Iterator[0]::Item[0]) }, lower_bound: '_#3r, point: bb5[0], span: $DIR/projection-fn.rs:24:5: 24:23, test: IsOutlivedByAnyRegionIn([]) }\n+error: failed type test: TypeTest { generic_kind: ProjectionTy { substs: Slice([T]), item_def_id: DefId(2/0:1695 ~ core[2633]::iter[0]::iterator[0]::Iterator[0]::Item[0]) }, lower_bound: '_#4r, point: bb5[0], span: $DIR/projection-fn.rs:24:5: 24:23, test: IsOutlivedByAnyRegionIn(['_#2r]) }\n   --> $DIR/projection-fn.rs:24:5\n    |\n 24 |     Box::new(x.next())\n    |     ^^^^^^^^^^^^^^^^^^\n \n-error: failed type test: TypeTest { generic_kind: ProjectionTy { substs: Slice([T]), item_def_id: DefId(2/0:1695 ~ core[2633]::iter[0]::iterator[0]::Iterator[0]::Item[0]) }, lower_bound: '_#4r, point: bb5[0], span: $DIR/projection-fn.rs:40:5: 40:23, test: IsOutlivedByAnyRegionIn(['_#2r]) }\n+error: failed type test: TypeTest { generic_kind: ProjectionTy { substs: Slice([T]), item_def_id: DefId(2/0:1695 ~ core[2633]::iter[0]::iterator[0]::Iterator[0]::Item[0]) }, lower_bound: '_#5r, point: bb5[0], span: $DIR/projection-fn.rs:40:5: 40:23, test: IsOutlivedByAnyRegionIn(['_#2r, '_#3r]) }\n   --> $DIR/projection-fn.rs:40:5\n    |\n 40 |     Box::new(x.next())"}, {"sha": "42e62b2389685a68e257b53032de8f43a2c96655", "filename": "src/test/ui/nll/ty-outlives/ty-param-fn-body.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn-body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn-body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn-body.rs?ref=c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a", "patch": "@@ -0,0 +1,41 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:-Znll -Zborrowck=mir\n+\n+// Test that we assume that universal types like `T` outlive the\n+// function body.\n+\n+#![allow(warnings)]\n+#![feature(dyn_trait)]\n+\n+use std::cell::Cell;\n+\n+// No errors here, because `'a` is local to the body.\n+fn region_within_body<T>(t: T) {\n+    let some_int = 22;\n+    let cell = Cell::new(&some_int);\n+    outlives(cell, t)\n+}\n+\n+// Error here, because T: 'a is not satisfied.\n+fn region_static<'a, T>(cell: Cell<&'a usize>, t: T) {\n+    outlives(cell, t)\n+    //~^ WARNING not reporting region error due to -Znll\n+    //~| ERROR failed type test\n+}\n+\n+fn outlives<'a, T>(x: Cell<&'a usize>, y: T)\n+where\n+    T: 'a,\n+{\n+}\n+\n+fn main() {}"}, {"sha": "3cc335bb29db2d2ec2d69fe8f8d5a55bb42b2316", "filename": "src/test/ui/nll/ty-outlives/ty-param-fn-body.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn-body.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn-body.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn-body.stderr?ref=c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a", "patch": "@@ -0,0 +1,14 @@\n+warning: not reporting region error due to -Znll\n+  --> $DIR/ty-param-fn-body.rs:30:5\n+   |\n+30 |     outlives(cell, t)\n+   |     ^^^^^^^^\n+\n+error: failed type test: TypeTest { generic_kind: T/#0, lower_bound: '_#4r, point: bb0[4], span: $DIR/ty-param-fn-body.rs:30:5: 30:22, test: IsOutlivedByAnyRegionIn(['_#2r]) }\n+  --> $DIR/ty-param-fn-body.rs:30:5\n+   |\n+30 |     outlives(cell, t)\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "426bece3e9de98d2b846dcdf4b21a5ff5022d4c7", "filename": "src/test/ui/nll/ty-outlives/ty-param-fn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn.stderr?ref=c7cfa2367b0ad4aed16dff7ad3d8d3e9eea6540a", "patch": "@@ -10,13 +10,13 @@ warning: not reporting region error due to -Znll\n 38 |     x\n    |     ^\n \n-error: failed type test: TypeTest { generic_kind: T/#1, lower_bound: '_#2r, point: bb0[3], span: $DIR/ty-param-fn.rs:22:5: 22:6, test: IsOutlivedByAnyRegionIn([]) }\n+error: failed type test: TypeTest { generic_kind: T/#1, lower_bound: '_#3r, point: bb0[3], span: $DIR/ty-param-fn.rs:22:5: 22:6, test: IsOutlivedByAnyRegionIn(['_#2r]) }\n   --> $DIR/ty-param-fn.rs:22:5\n    |\n 22 |     x\n    |     ^\n \n-error: failed type test: TypeTest { generic_kind: T/#2, lower_bound: '_#3r, point: bb0[3], span: $DIR/ty-param-fn.rs:38:5: 38:6, test: IsOutlivedByAnyRegionIn(['_#2r]) }\n+error: failed type test: TypeTest { generic_kind: T/#2, lower_bound: '_#4r, point: bb0[3], span: $DIR/ty-param-fn.rs:38:5: 38:6, test: IsOutlivedByAnyRegionIn(['_#2r, '_#3r]) }\n   --> $DIR/ty-param-fn.rs:38:5\n    |\n 38 |     x"}]}