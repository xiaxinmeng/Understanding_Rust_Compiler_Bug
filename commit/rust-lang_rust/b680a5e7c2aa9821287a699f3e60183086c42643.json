{"sha": "b680a5e7c2aa9821287a699f3e60183086c42643", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2ODBhNWU3YzJhYTk4MjEyODdhNjk5ZjNlNjAxODMwODZjNDI2NDM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-20T19:18:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-20T19:18:48Z"}, "message": "Rollup merge of #68877 - estebank:point-at-params, r=petrochenkov\n\nOn mismatched argument count point at arguments", "tree": {"sha": "38a7974141ccf345b198e92be6a4605351a35ddc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38a7974141ccf345b198e92be6a4605351a35ddc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b680a5e7c2aa9821287a699f3e60183086c42643", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeTtuZCRBK7hj4Ov3rIwAAdHIIAAjBPhqAr1YrI3ZavpHX1GKb\ndCc4g3Z4Imp5+vMe8gS7wY5DZWIIZ0Vrq0FaPy4KpkXjjTf2RKf5s1WHDQY10Tlo\nq/XHAIamF+1+ieucTF5aSLLwiXDKrvOCIQj3VP3+mqyDpXcJIMJxIifjXj/Zmlhl\nwVuwRgO9rYp8uL6PCz77R8YwLYMlCWcufRDn9sk1t4KRxkaRniRU5bQNXI9D9cYm\ndPfcKUMIg4vOjy6GTPa1XiPUEbA3WICwMsYzYU8DRLYYVkDpw91lvt9rN4BnBIqo\ngvLyvraX8ByIRrnWsS+REupEiVrHvD8l73BJrCiN94GZyW76aeJT8QTnzRa/P6o=\n=dVsV\n-----END PGP SIGNATURE-----\n", "payload": "tree 38a7974141ccf345b198e92be6a4605351a35ddc\nparent bfb96048b5946e8c695790ae66ca105cb78da60b\nparent 683ebc2dec0a5b88eb3eaf146e6855ea299d17b8\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1582226328 +0100\ncommitter GitHub <noreply@github.com> 1582226328 +0100\n\nRollup merge of #68877 - estebank:point-at-params, r=petrochenkov\n\nOn mismatched argument count point at arguments\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b680a5e7c2aa9821287a699f3e60183086c42643", "html_url": "https://github.com/rust-lang/rust/commit/b680a5e7c2aa9821287a699f3e60183086c42643", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b680a5e7c2aa9821287a699f3e60183086c42643/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfb96048b5946e8c695790ae66ca105cb78da60b", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfb96048b5946e8c695790ae66ca105cb78da60b", "html_url": "https://github.com/rust-lang/rust/commit/bfb96048b5946e8c695790ae66ca105cb78da60b"}, {"sha": "683ebc2dec0a5b88eb3eaf146e6855ea299d17b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/683ebc2dec0a5b88eb3eaf146e6855ea299d17b8", "html_url": "https://github.com/rust-lang/rust/commit/683ebc2dec0a5b88eb3eaf146e6855ea299d17b8"}], "stats": {"total": 319, "additions": 214, "deletions": 105}, "files": [{"sha": "5325b3137af7999b2f04b2b4f3e1c21f60f91274", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 47, "deletions": 7, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=b680a5e7c2aa9821287a699f3e60183086c42643", "patch": "@@ -3843,17 +3843,58 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                  error_code: &str,\n                                  c_variadic: bool,\n                                  sugg_unit: bool| {\n+            let (span, start_span, args) = match &expr.kind {\n+                hir::ExprKind::Call(hir::Expr { span, .. }, args) => (*span, *span, &args[..]),\n+                hir::ExprKind::MethodCall(path_segment, span, args) => (\n+                    *span,\n+                    // `sp` doesn't point at the whole `foo.bar()`, only at `bar`.\n+                    path_segment\n+                        .args\n+                        .and_then(|args| args.args.iter().last())\n+                        // Account for `foo.bar::<T>()`.\n+                        .map(|arg| {\n+                            // Skip the closing `>`.\n+                            tcx.sess\n+                                .source_map()\n+                                .next_point(tcx.sess.source_map().next_point(arg.span()))\n+                        })\n+                        .unwrap_or(*span),\n+                    &args[1..], // Skip the receiver.\n+                ),\n+                k => span_bug!(sp, \"checking argument types on a non-call: `{:?}`\", k),\n+            };\n+            let arg_spans = if args.is_empty() {\n+                // foo()\n+                // ^^^-- supplied 0 arguments\n+                // |\n+                // expected 2 arguments\n+                vec![tcx.sess.source_map().next_point(start_span).with_hi(sp.hi())]\n+            } else {\n+                // foo(1, 2, 3)\n+                // ^^^ -  -  - supplied 3 arguments\n+                // |\n+                // expected 2 arguments\n+                args.iter().map(|arg| arg.span).collect::<Vec<Span>>()\n+            };\n+\n             let mut err = tcx.sess.struct_span_err_with_code(\n-                sp,\n+                span,\n                 &format!(\n                     \"this function takes {}{} but {} {} supplied\",\n                     if c_variadic { \"at least \" } else { \"\" },\n-                    potentially_plural_count(expected_count, \"parameter\"),\n-                    potentially_plural_count(arg_count, \"parameter\"),\n+                    potentially_plural_count(expected_count, \"argument\"),\n+                    potentially_plural_count(arg_count, \"argument\"),\n                     if arg_count == 1 { \"was\" } else { \"were\" }\n                 ),\n                 DiagnosticId::Error(error_code.to_owned()),\n             );\n+            let label = format!(\"supplied {}\", potentially_plural_count(arg_count, \"argument\"));\n+            for (i, span) in arg_spans.into_iter().enumerate() {\n+                err.span_label(\n+                    span,\n+                    if arg_count == 0 || i + 1 == arg_count { &label } else { \"\" },\n+                );\n+            }\n \n             if let Some(def_s) = def_span.map(|sp| tcx.sess.source_map().def_span(sp)) {\n                 err.span_label(def_s, \"defined here\");\n@@ -3870,11 +3911,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 );\n             } else {\n                 err.span_label(\n-                    sp,\n+                    span,\n                     format!(\n                         \"expected {}{}\",\n                         if c_variadic { \"at least \" } else { \"\" },\n-                        potentially_plural_count(expected_count, \"parameter\")\n+                        potentially_plural_count(expected_count, \"argument\")\n                     ),\n                 );\n             }\n@@ -5622,8 +5663,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         self.tcx.sess.span_err(\n             span,\n-            \"this function can only be invoked \\\n-                                      directly, not through a function pointer\",\n+            \"this function can only be invoked directly, not through a function pointer\",\n         );\n     }\n "}, {"sha": "18926f5daf71a7a91f8db9357c9d548421bf64f0", "filename": "src/test/ui/arg-count-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Farg-count-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Farg-count-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farg-count-mismatch.rs?ref=b680a5e7c2aa9821287a699f3e60183086c42643", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: parameters were supplied\n+// error-pattern: arguments were supplied\n \n fn f(x: isize) { }\n "}, {"sha": "7bc06134a690dd145903152909d5d7ab107e30b2", "filename": "src/test/ui/arg-count-mismatch.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Farg-count-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Farg-count-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farg-count-mismatch.stderr?ref=b680a5e7c2aa9821287a699f3e60183086c42643", "patch": "@@ -1,11 +1,13 @@\n-error[E0061]: this function takes 1 parameter but 0 parameters were supplied\n+error[E0061]: this function takes 1 argument but 0 arguments were supplied\n   --> $DIR/arg-count-mismatch.rs:5:28\n    |\n LL | fn f(x: isize) { }\n    | -------------- defined here\n LL | \n LL | fn main() { let i: (); i = f(); }\n-   |                            ^^^ expected 1 parameter\n+   |                            ^-- supplied 0 arguments\n+   |                            |\n+   |                            expected 1 argument\n \n error: aborting due to previous error\n "}, {"sha": "e7197a9d16859e0bae5ab3e2d11a1f3c328f68ab", "filename": "src/test/ui/c-variadic/variadic-ffi-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.rs?ref=b680a5e7c2aa9821287a699f3e60183086c42643", "patch": "@@ -13,8 +13,8 @@ extern \"C\" fn bar(f: isize, x: u8) {}\n \n fn main() {\n     unsafe {\n-        foo();  //~ ERROR this function takes at least 2 parameters but 0 parameters were supplied\n-        foo(1); //~ ERROR this function takes at least 2 parameters but 1 parameter was supplied\n+        foo();  //~ ERROR this function takes at least 2 arguments but 0 arguments were supplied\n+        foo(1); //~ ERROR this function takes at least 2 arguments but 1 argument was supplied\n \n         let x: unsafe extern \"C\" fn(f: isize, x: u8) = foo; //~ ERROR mismatched types\n         let y: extern \"C\" fn(f: isize, x: u8, ...) = bar; //~ ERROR mismatched types"}, {"sha": "318b8aabafb4931430ea5b5f8f88e3322b2b10eb", "filename": "src/test/ui/c-variadic/variadic-ffi-1.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.stderr?ref=b680a5e7c2aa9821287a699f3e60183086c42643", "patch": "@@ -4,23 +4,27 @@ error[E0045]: C-variadic function must have C or cdecl calling convention\n LL |     fn printf(_: *const u8, ...);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ C-variadics require C or cdecl calling convention\n \n-error[E0060]: this function takes at least 2 parameters but 0 parameters were supplied\n+error[E0060]: this function takes at least 2 arguments but 0 arguments were supplied\n   --> $DIR/variadic-ffi-1.rs:16:9\n    |\n LL |     fn foo(f: isize, x: u8, ...);\n    |     ----------------------------- defined here\n ...\n LL |         foo();\n-   |         ^^^^^ expected at least 2 parameters\n+   |         ^^^-- supplied 0 arguments\n+   |         |\n+   |         expected at least 2 arguments\n \n-error[E0060]: this function takes at least 2 parameters but 1 parameter was supplied\n+error[E0060]: this function takes at least 2 arguments but 1 argument was supplied\n   --> $DIR/variadic-ffi-1.rs:17:9\n    |\n LL |     fn foo(f: isize, x: u8, ...);\n    |     ----------------------------- defined here\n ...\n LL |         foo(1);\n-   |         ^^^^^^ expected at least 2 parameters\n+   |         ^^^ - supplied 1 argument\n+   |         |\n+   |         expected at least 2 arguments\n \n error[E0308]: mismatched types\n   --> $DIR/variadic-ffi-1.rs:19:56"}, {"sha": "31579e282896402d067d47b61d507c0921f252ae", "filename": "src/test/ui/error-codes/E0057.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Ferror-codes%2FE0057.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Ferror-codes%2FE0057.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0057.stderr?ref=b680a5e7c2aa9821287a699f3e60183086c42643", "patch": "@@ -1,14 +1,18 @@\n-error[E0057]: this function takes 1 parameter but 0 parameters were supplied\n+error[E0057]: this function takes 1 argument but 0 arguments were supplied\n   --> $DIR/E0057.rs:3:13\n    |\n LL |     let a = f();\n-   |             ^^^ expected 1 parameter\n+   |             ^-- supplied 0 arguments\n+   |             |\n+   |             expected 1 argument\n \n-error[E0057]: this function takes 1 parameter but 2 parameters were supplied\n+error[E0057]: this function takes 1 argument but 2 arguments were supplied\n   --> $DIR/E0057.rs:5:13\n    |\n LL |     let c = f(2, 3);\n-   |             ^^^^^^^ expected 1 parameter\n+   |             ^ -  - supplied 2 arguments\n+   |             |\n+   |             expected 1 argument\n \n error: aborting due to 2 previous errors\n "}, {"sha": "941eb2a210bf37b0ab7c77d38f8c7c9d158d83b5", "filename": "src/test/ui/error-codes/E0060.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Ferror-codes%2FE0060.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Ferror-codes%2FE0060.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0060.rs?ref=b680a5e7c2aa9821287a699f3e60183086c42643", "patch": "@@ -5,5 +5,5 @@ extern \"C\" {\n fn main() {\n     unsafe { printf(); }\n     //~^ ERROR E0060\n-    //~| expected at least 1 parameter\n+    //~| expected at least 1 argument\n }"}, {"sha": "a600592c6c2e7f7b54247710af5449524c9fa8f4", "filename": "src/test/ui/error-codes/E0060.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Ferror-codes%2FE0060.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Ferror-codes%2FE0060.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0060.stderr?ref=b680a5e7c2aa9821287a699f3e60183086c42643", "patch": "@@ -1,11 +1,13 @@\n-error[E0060]: this function takes at least 1 parameter but 0 parameters were supplied\n+error[E0060]: this function takes at least 1 argument but 0 arguments were supplied\n   --> $DIR/E0060.rs:6:14\n    |\n LL |     fn printf(_: *const u8, ...) -> u32;\n    |     ------------------------------------ defined here\n ...\n LL |     unsafe { printf(); }\n-   |              ^^^^^^^^ expected at least 1 parameter\n+   |              ^^^^^^-- supplied 0 arguments\n+   |              |\n+   |              expected at least 1 argument\n \n error: aborting due to previous error\n "}, {"sha": "c7b5fe4310e9328f5c7de0cb1bbbd20bc2732fa7", "filename": "src/test/ui/error-codes/E0061.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Ferror-codes%2FE0061.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Ferror-codes%2FE0061.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0061.rs?ref=b680a5e7c2aa9821287a699f3e60183086c42643", "patch": "@@ -5,9 +5,9 @@ fn f2(a: u16) {}\n fn main() {\n     f(0);\n     //~^ ERROR E0061\n-    //~| expected 2 parameters\n+    //~| expected 2 arguments\n \n     f2();\n     //~^ ERROR E0061\n-    //~| expected 1 parameter\n+    //~| expected 1 argument\n }"}, {"sha": "dfefa0df31332cc8d656a816a50d87e8e2f5a6e1", "filename": "src/test/ui/error-codes/E0061.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Ferror-codes%2FE0061.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Ferror-codes%2FE0061.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0061.stderr?ref=b680a5e7c2aa9821287a699f3e60183086c42643", "patch": "@@ -1,20 +1,24 @@\n-error[E0061]: this function takes 2 parameters but 1 parameter was supplied\n+error[E0061]: this function takes 2 arguments but 1 argument was supplied\n   --> $DIR/E0061.rs:6:5\n    |\n LL | fn f(a: u16, b: &str) {}\n    | --------------------- defined here\n ...\n LL |     f(0);\n-   |     ^^^^ expected 2 parameters\n+   |     ^ - supplied 1 argument\n+   |     |\n+   |     expected 2 arguments\n \n-error[E0061]: this function takes 1 parameter but 0 parameters were supplied\n+error[E0061]: this function takes 1 argument but 0 arguments were supplied\n   --> $DIR/E0061.rs:10:5\n    |\n LL | fn f2(a: u16) {}\n    | ------------- defined here\n ...\n LL |     f2();\n-   |     ^^^^ expected 1 parameter\n+   |     ^^-- supplied 0 arguments\n+   |     |\n+   |     expected 1 argument\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f36d549e476b8baa6b04d25125475c8dd3284965", "filename": "src/test/ui/hrtb/issue-58451.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fhrtb%2Fissue-58451.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fhrtb%2Fissue-58451.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-58451.rs?ref=b680a5e7c2aa9821287a699f3e60183086c42643", "patch": "@@ -9,5 +9,5 @@ where\n {}\n \n fn main() {\n-    f(&[f()]); //~ ERROR this function takes 1 parameter\n+    f(&[f()]); //~ ERROR this function takes 1 argument\n }"}, {"sha": "c0915808bf523992aadf7ce13cc774862c1f92aa", "filename": "src/test/ui/hrtb/issue-58451.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fhrtb%2Fissue-58451.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fhrtb%2Fissue-58451.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-58451.stderr?ref=b680a5e7c2aa9821287a699f3e60183086c42643", "patch": "@@ -1,4 +1,4 @@\n-error[E0061]: this function takes 1 parameter but 0 parameters were supplied\n+error[E0061]: this function takes 1 argument but 0 arguments were supplied\n   --> $DIR/issue-58451.rs:12:9\n    |\n LL | / fn f<I>(i: I)\n@@ -9,7 +9,9 @@ LL | | {}\n    | |__- defined here\n ...\n LL |       f(&[f()]);\n-   |           ^^^ expected 1 parameter\n+   |           ^-- supplied 0 arguments\n+   |           |\n+   |           expected 1 argument\n \n error: aborting due to previous error\n "}, {"sha": "103f56fa04dd332fc1dc05322b1a4ee549adea23", "filename": "src/test/ui/issues/issue-16939.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fissues%2Fissue-16939.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fissues%2Fissue-16939.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16939.stderr?ref=b680a5e7c2aa9821287a699f3e60183086c42643", "patch": "@@ -1,8 +1,10 @@\n-error[E0057]: this function takes 0 parameters but 1 parameter was supplied\n+error[E0057]: this function takes 0 arguments but 1 argument was supplied\n   --> $DIR/issue-16939.rs:5:9\n    |\n LL |     |t| f(t);\n-   |         ^^^^ expected 0 parameters\n+   |         ^ - supplied 1 argument\n+   |         |\n+   |         expected 0 arguments\n \n error: aborting due to previous error\n "}, {"sha": "a952c9b46c9d8ec6a75c82986efd7f8a212c0145", "filename": "src/test/ui/issues/issue-18819.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fissues%2Fissue-18819.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fissues%2Fissue-18819.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18819.stderr?ref=b680a5e7c2aa9821287a699f3e60183086c42643", "patch": "@@ -1,11 +1,13 @@\n-error[E0061]: this function takes 2 parameters but 1 parameter was supplied\n+error[E0061]: this function takes 2 arguments but 1 argument was supplied\n   --> $DIR/issue-18819.rs:16:5\n    |\n LL | fn print_x(_: &dyn Foo<Item=bool>, extra: &str) {\n    | ----------------------------------------------- defined here\n ...\n LL |     print_x(X);\n-   |     ^^^^^^^^^^ expected 2 parameters\n+   |     ^^^^^^^ - supplied 1 argument\n+   |     |\n+   |     expected 2 arguments\n \n error: aborting due to previous error\n "}, {"sha": "78fb0491d82ddd6a548d50f4fc9d66134814a1f8", "filename": "src/test/ui/issues/issue-26094.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fissues%2Fissue-26094.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fissues%2Fissue-26094.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26094.rs?ref=b680a5e7c2aa9821287a699f3e60183086c42643", "patch": "@@ -1,13 +1,13 @@\n macro_rules! some_macro {\n     ($other: expr) => ({\n-        $other(None)\n-        //~^ this function takes 0 parameters but 1 parameter was supplied\n+        $other(None) //~ NOTE supplied 1 argument\n     })\n }\n \n-fn some_function() {}\n+fn some_function() {} //~ NOTE defined here\n \n fn main() {\n     some_macro!(some_function);\n-    //~^ in this expansion of some_macro!\n+    //~^ ERROR this function takes 0 arguments but 1 argument was supplied\n+    //~| NOTE expected 0 arguments\n }"}, {"sha": "2038d88bf46519a128604be53654e63d16a6647d", "filename": "src/test/ui/issues/issue-26094.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fissues%2Fissue-26094.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fissues%2Fissue-26094.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26094.stderr?ref=b680a5e7c2aa9821287a699f3e60183086c42643", "patch": "@@ -1,16 +1,14 @@\n-error[E0061]: this function takes 0 parameters but 1 parameter was supplied\n-  --> $DIR/issue-26094.rs:3:9\n+error[E0061]: this function takes 0 arguments but 1 argument was supplied\n+  --> $DIR/issue-26094.rs:10:17\n    |\n LL |         $other(None)\n-   |         ^^^^^^^^^^^^ expected 0 parameters\n+   |                ---- supplied 1 argument\n ...\n LL | fn some_function() {}\n    | ------------------ defined here\n ...\n LL |     some_macro!(some_function);\n-   |     --------------------------- in this macro invocation\n-   |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   |                 ^^^^^^^^^^^^^ expected 0 arguments\n \n error: aborting due to previous error\n "}, {"sha": "81d76a90eb0ac42ab2f63936e838b418dfd8ec76", "filename": "src/test/ui/issues/issue-3044.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fissues%2Fissue-3044.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fissues%2Fissue-3044.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3044.rs?ref=b680a5e7c2aa9821287a699f3e60183086c42643", "patch": "@@ -2,5 +2,5 @@ fn main() {\n     let needlesArr: Vec<char> = vec!['a', 'f'];\n     needlesArr.iter().fold(|x, y| {\n     });\n-    //~^^ ERROR this function takes 2 parameters but 1 parameter was supplied\n+    //~^^ ERROR this function takes 2 arguments but 1 argument was supplied\n }"}, {"sha": "d2c010659edd0fb477611d053c94ad776ce7eb98", "filename": "src/test/ui/issues/issue-3044.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fissues%2Fissue-3044.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fissues%2Fissue-3044.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3044.stderr?ref=b680a5e7c2aa9821287a699f3e60183086c42643", "patch": "@@ -1,8 +1,12 @@\n-error[E0061]: this function takes 2 parameters but 1 parameter was supplied\n+error[E0061]: this function takes 2 arguments but 1 argument was supplied\n   --> $DIR/issue-3044.rs:3:23\n    |\n-LL |     needlesArr.iter().fold(|x, y| {\n-   |                       ^^^^ expected 2 parameters\n+LL |       needlesArr.iter().fold(|x, y| {\n+   |  _______________________^^^^_-\n+   | |                       |\n+   | |                       expected 2 arguments\n+LL | |     });\n+   | |_____- supplied 1 argument\n \n error: aborting due to previous error\n "}, {"sha": "b342bbb1b8eab90d69c2b0f3ea61100b7654413e", "filename": "src/test/ui/issues/issue-4935.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fissues%2Fissue-4935.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fissues%2Fissue-4935.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4935.rs?ref=b680a5e7c2aa9821287a699f3e60183086c42643", "patch": "@@ -3,4 +3,4 @@\n fn foo(a: usize) {}\n //~^ defined here\n fn main() { foo(5, 6) }\n-//~^ ERROR this function takes 1 parameter but 2 parameters were supplied\n+//~^ ERROR this function takes 1 argument but 2 arguments were supplied"}, {"sha": "0cc686e1cf87f9f18e52b4b5724e0c49d60c61c6", "filename": "src/test/ui/issues/issue-4935.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fissues%2Fissue-4935.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fissues%2Fissue-4935.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4935.stderr?ref=b680a5e7c2aa9821287a699f3e60183086c42643", "patch": "@@ -1,11 +1,13 @@\n-error[E0061]: this function takes 1 parameter but 2 parameters were supplied\n+error[E0061]: this function takes 1 argument but 2 arguments were supplied\n   --> $DIR/issue-4935.rs:5:13\n    |\n LL | fn foo(a: usize) {}\n    | ---------------- defined here\n LL |\n LL | fn main() { foo(5, 6) }\n-   |             ^^^^^^^^^ expected 1 parameter\n+   |             ^^^ -  - supplied 2 arguments\n+   |             |\n+   |             expected 1 argument\n \n error: aborting due to previous error\n "}, {"sha": "9bfacc7babf2e25244b76169968e4574a73c2e83", "filename": "src/test/ui/methods/method-call-err-msg.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.rs?ref=b680a5e7c2aa9821287a699f3e60183086c42643", "patch": "@@ -5,16 +5,18 @@ impl Foo {\n     fn zero(self) -> Foo { self }\n     fn one(self, _: isize) -> Foo { self }\n     fn two(self, _: isize, _: isize) -> Foo { self }\n+    fn three<T>(self, _: T, _: T, _: T) -> Foo { self }\n }\n \n fn main() {\n     let x = Foo;\n-    x.zero(0)   //~ ERROR this function takes 0 parameters but 1 parameter was supplied\n-     .one()     //~ ERROR this function takes 1 parameter but 0 parameters were supplied\n-     .two(0);   //~ ERROR this function takes 2 parameters but 1 parameter was supplied\n+    x.zero(0)   //~ ERROR this function takes 0 arguments but 1 argument was supplied\n+     .one()     //~ ERROR this function takes 1 argument but 0 arguments were supplied\n+     .two(0);   //~ ERROR this function takes 2 arguments but 1 argument was supplied\n \n     let y = Foo;\n     y.zero()\n      .take()    //~ ERROR no method named `take` found\n      .one(0);\n+    y.three::<usize>(); //~ ERROR this function takes 3 arguments but 0 arguments were supplied\n }"}, {"sha": "ab1ef5b9d5aed6980f3c7f27fa94906c08119fc8", "filename": "src/test/ui/methods/method-call-err-msg.stderr", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr?ref=b680a5e7c2aa9821287a699f3e60183086c42643", "patch": "@@ -1,32 +1,38 @@\n-error[E0061]: this function takes 0 parameters but 1 parameter was supplied\n-  --> $DIR/method-call-err-msg.rs:12:7\n+error[E0061]: this function takes 0 arguments but 1 argument was supplied\n+  --> $DIR/method-call-err-msg.rs:13:7\n    |\n LL |     fn zero(self) -> Foo { self }\n    |     -------------------- defined here\n ...\n LL |     x.zero(0)\n-   |       ^^^^ expected 0 parameters\n+   |       ^^^^ - supplied 1 argument\n+   |       |\n+   |       expected 0 arguments\n \n-error[E0061]: this function takes 1 parameter but 0 parameters were supplied\n-  --> $DIR/method-call-err-msg.rs:13:7\n+error[E0061]: this function takes 1 argument but 0 arguments were supplied\n+  --> $DIR/method-call-err-msg.rs:14:7\n    |\n LL |     fn one(self, _: isize) -> Foo { self }\n    |     ----------------------------- defined here\n ...\n LL |      .one()\n-   |       ^^^ expected 1 parameter\n+   |       ^^^- supplied 0 arguments\n+   |       |\n+   |       expected 1 argument\n \n-error[E0061]: this function takes 2 parameters but 1 parameter was supplied\n-  --> $DIR/method-call-err-msg.rs:14:7\n+error[E0061]: this function takes 2 arguments but 1 argument was supplied\n+  --> $DIR/method-call-err-msg.rs:15:7\n    |\n LL |     fn two(self, _: isize, _: isize) -> Foo { self }\n    |     --------------------------------------- defined here\n ...\n LL |      .two(0);\n-   |       ^^^ expected 2 parameters\n+   |       ^^^ - supplied 1 argument\n+   |       |\n+   |       expected 2 arguments\n \n error[E0599]: no method named `take` found for struct `Foo` in the current scope\n-  --> $DIR/method-call-err-msg.rs:18:7\n+  --> $DIR/method-call-err-msg.rs:19:7\n    |\n LL | pub struct Foo;\n    | --------------- method `take` not found for this\n@@ -41,7 +47,18 @@ LL |      .take()\n            candidate #1: `std::io::Read`\n            candidate #2: `std::iter::Iterator`\n \n-error: aborting due to 4 previous errors\n+error[E0061]: this function takes 3 arguments but 0 arguments were supplied\n+  --> $DIR/method-call-err-msg.rs:21:7\n+   |\n+LL |     fn three<T>(self, _: T, _: T, _: T) -> Foo { self }\n+   |     ------------------------------------------ defined here\n+...\n+LL |     y.three::<usize>();\n+   |       ^^^^^--------- supplied 0 arguments\n+   |       |\n+   |       expected 3 arguments\n+\n+error: aborting due to 5 previous errors\n \n Some errors have detailed explanations: E0061, E0599.\n For more information about an error, try `rustc --explain E0061`."}, {"sha": "902a6ec81d60b9cd87d328c50e1a3c89f6495382", "filename": "src/test/ui/mismatched_types/overloaded-calls-bad.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.rs?ref=b680a5e7c2aa9821287a699f3e60183086c42643", "patch": "@@ -27,7 +27,7 @@ fn main() {\n     };\n     let ans = s(\"what\");    //~ ERROR mismatched types\n     let ans = s();\n-    //~^ ERROR this function takes 1 parameter but 0 parameters were supplied\n+    //~^ ERROR this function takes 1 argument but 0 arguments were supplied\n     let ans = s(\"burma\", \"shave\");\n-    //~^ ERROR this function takes 1 parameter but 2 parameters were supplied\n+    //~^ ERROR this function takes 1 argument but 2 arguments were supplied\n }"}, {"sha": "706e25529bfafbd62b2d86e2b72a0fcf30f9a2d2", "filename": "src/test/ui/mismatched_types/overloaded-calls-bad.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.stderr?ref=b680a5e7c2aa9821287a699f3e60183086c42643", "patch": "@@ -4,17 +4,21 @@ error[E0308]: mismatched types\n LL |     let ans = s(\"what\");\n    |                 ^^^^^^ expected `isize`, found `&str`\n \n-error[E0057]: this function takes 1 parameter but 0 parameters were supplied\n+error[E0057]: this function takes 1 argument but 0 arguments were supplied\n   --> $DIR/overloaded-calls-bad.rs:29:15\n    |\n LL |     let ans = s();\n-   |               ^^^ expected 1 parameter\n+   |               ^-- supplied 0 arguments\n+   |               |\n+   |               expected 1 argument\n \n-error[E0057]: this function takes 1 parameter but 2 parameters were supplied\n+error[E0057]: this function takes 1 argument but 2 arguments were supplied\n   --> $DIR/overloaded-calls-bad.rs:31:15\n    |\n LL |     let ans = s(\"burma\", \"shave\");\n-   |               ^^^^^^^^^^^^^^^^^^^ expected 1 parameter\n+   |               ^ -------  ------- supplied 2 arguments\n+   |               |\n+   |               expected 1 argument\n \n error: aborting due to 3 previous errors\n "}, {"sha": "631bb1dd27415c272305dfb21ebfef79147c909d", "filename": "src/test/ui/not-enough-arguments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fnot-enough-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fnot-enough-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-enough-arguments.rs?ref=b680a5e7c2aa9821287a699f3e60183086c42643", "patch": "@@ -8,5 +8,5 @@ fn foo(a: isize, b: isize, c: isize, d:isize) {\n \n fn main() {\n   foo(1, 2, 3);\n-  //~^ ERROR this function takes 4 parameters but 3\n+  //~^ ERROR this function takes 4 arguments but 3\n }"}, {"sha": "f2b57f71400f1c9fb15679185346b3c84ce60352", "filename": "src/test/ui/not-enough-arguments.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fnot-enough-arguments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fnot-enough-arguments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-enough-arguments.stderr?ref=b680a5e7c2aa9821287a699f3e60183086c42643", "patch": "@@ -1,11 +1,13 @@\n-error[E0061]: this function takes 4 parameters but 3 parameters were supplied\n+error[E0061]: this function takes 4 arguments but 3 arguments were supplied\n   --> $DIR/not-enough-arguments.rs:10:3\n    |\n LL | fn foo(a: isize, b: isize, c: isize, d:isize) {\n    | --------------------------------------------- defined here\n ...\n LL |   foo(1, 2, 3);\n-   |   ^^^^^^^^^^^^ expected 4 parameters\n+   |   ^^^ -  -  - supplied 3 arguments\n+   |   |\n+   |   expected 4 arguments\n \n error: aborting due to previous error\n "}, {"sha": "992bcd7977fcfc12931981cf7d89739229bbf3d4", "filename": "src/test/ui/resolve/resolve-primitive-fallback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fresolve%2Fresolve-primitive-fallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fresolve%2Fresolve-primitive-fallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-primitive-fallback.rs?ref=b680a5e7c2aa9821287a699f3e60183086c42643", "patch": "@@ -2,7 +2,7 @@ fn main() {\n     // Make sure primitive type fallback doesn't work in value namespace\n     std::mem::size_of(u16);\n     //~^ ERROR expected value, found builtin type `u16`\n-    //~| ERROR this function takes 0 parameters but 1 parameter was supplied\n+    //~| ERROR this function takes 0 arguments but 1 argument was supplied\n \n     // Make sure primitive type fallback doesn't work with global paths\n     let _: ::u8;"}, {"sha": "6d61d2f16cafa5861132ca1cdef748ca4c666941", "filename": "src/test/ui/resolve/resolve-primitive-fallback.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fresolve%2Fresolve-primitive-fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fresolve%2Fresolve-primitive-fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-primitive-fallback.stderr?ref=b680a5e7c2aa9821287a699f3e60183086c42643", "patch": "@@ -10,11 +10,13 @@ error[E0412]: cannot find type `u8` in the crate root\n LL |     let _: ::u8;\n    |              ^^ not found in the crate root\n \n-error[E0061]: this function takes 0 parameters but 1 parameter was supplied\n+error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> $DIR/resolve-primitive-fallback.rs:3:5\n    |\n LL |     std::mem::size_of(u16);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ expected 0 parameters\n+   |     ^^^^^^^^^^^^^^^^^ --- supplied 1 argument\n+   |     |\n+   |     expected 0 arguments\n \n error: aborting due to 3 previous errors\n "}, {"sha": "31579e282896402d067d47b61d507c0921f252ae", "filename": "src/test/ui/span/E0057.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fspan%2FE0057.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fspan%2FE0057.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2FE0057.stderr?ref=b680a5e7c2aa9821287a699f3e60183086c42643", "patch": "@@ -1,14 +1,18 @@\n-error[E0057]: this function takes 1 parameter but 0 parameters were supplied\n+error[E0057]: this function takes 1 argument but 0 arguments were supplied\n   --> $DIR/E0057.rs:3:13\n    |\n LL |     let a = f();\n-   |             ^^^ expected 1 parameter\n+   |             ^-- supplied 0 arguments\n+   |             |\n+   |             expected 1 argument\n \n-error[E0057]: this function takes 1 parameter but 2 parameters were supplied\n+error[E0057]: this function takes 1 argument but 2 arguments were supplied\n   --> $DIR/E0057.rs:5:13\n    |\n LL |     let c = f(2, 3);\n-   |             ^^^^^^^ expected 1 parameter\n+   |             ^ -  - supplied 2 arguments\n+   |             |\n+   |             expected 1 argument\n \n error: aborting due to 2 previous errors\n "}, {"sha": "116f5ddd5b4b20c73f997e34b150bb2186460acc", "filename": "src/test/ui/span/issue-34264.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr?ref=b680a5e7c2aa9821287a699f3e60183086c42643", "patch": "@@ -50,29 +50,33 @@ help: if this is a type, explicitly ignore the parameter name\n LL | fn bar(_: x, y: usize) {}\n    |        ^^^^\n \n-error[E0061]: this function takes 2 parameters but 3 parameters were supplied\n+error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n   --> $DIR/issue-34264.rs:7:5\n    |\n LL | fn foo(Option<i32>, String) {}\n    | --------------------------- defined here\n ...\n LL |     foo(Some(42), 2, \"\");\n-   |     ^^^^^^^^^^^^^^^^^^^^ expected 2 parameters\n+   |     ^^^ --------  -  -- supplied 3 arguments\n+   |     |\n+   |     expected 2 arguments\n \n error[E0308]: mismatched types\n   --> $DIR/issue-34264.rs:8:13\n    |\n LL |     bar(\"\", \"\");\n    |             ^^ expected `usize`, found `&str`\n \n-error[E0061]: this function takes 2 parameters but 3 parameters were supplied\n+error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n   --> $DIR/issue-34264.rs:10:5\n    |\n LL | fn bar(x, y: usize) {}\n    | ------------------- defined here\n ...\n LL |     bar(1, 2, 3);\n-   |     ^^^^^^^^^^^^ expected 2 parameters\n+   |     ^^^ -  -  - supplied 3 arguments\n+   |     |\n+   |     expected 2 arguments\n \n error: aborting due to 6 previous errors\n "}, {"sha": "f6344fba3d3684ebca198be5241dc110582f3833", "filename": "src/test/ui/span/missing-unit-argument.stderr", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.stderr?ref=b680a5e7c2aa9821287a699f3e60183086c42643", "patch": "@@ -1,68 +1,72 @@\n-error[E0061]: this function takes 1 parameter but 0 parameters were supplied\n+error[E0061]: this function takes 1 argument but 0 arguments were supplied\n   --> $DIR/missing-unit-argument.rs:11:33\n    |\n LL |     let _: Result<(), String> = Ok();\n-   |                                 ^^^^\n+   |                                 ^^-- supplied 0 arguments\n    |\n help: expected the unit value `()`; create it with empty parentheses\n    |\n LL |     let _: Result<(), String> = Ok(());\n    |                                    ^^\n \n-error[E0061]: this function takes 2 parameters but 0 parameters were supplied\n+error[E0061]: this function takes 2 arguments but 0 arguments were supplied\n   --> $DIR/missing-unit-argument.rs:12:5\n    |\n LL | fn foo(():(), ():()) {}\n    | -------------------- defined here\n ...\n LL |     foo();\n-   |     ^^^^^ expected 2 parameters\n+   |     ^^^-- supplied 0 arguments\n+   |     |\n+   |     expected 2 arguments\n \n-error[E0061]: this function takes 2 parameters but 1 parameter was supplied\n+error[E0061]: this function takes 2 arguments but 1 argument was supplied\n   --> $DIR/missing-unit-argument.rs:13:5\n    |\n LL | fn foo(():(), ():()) {}\n    | -------------------- defined here\n ...\n LL |     foo(());\n-   |     ^^^^^^^ expected 2 parameters\n+   |     ^^^ -- supplied 1 argument\n+   |     |\n+   |     expected 2 arguments\n \n-error[E0061]: this function takes 1 parameter but 0 parameters were supplied\n+error[E0061]: this function takes 1 argument but 0 arguments were supplied\n   --> $DIR/missing-unit-argument.rs:14:5\n    |\n LL | fn bar(():()) {}\n    | ------------- defined here\n ...\n LL |     bar();\n-   |     ^^^^^\n+   |     ^^^-- supplied 0 arguments\n    |\n help: expected the unit value `()`; create it with empty parentheses\n    |\n LL |     bar(());\n    |         ^^\n \n-error[E0061]: this function takes 1 parameter but 0 parameters were supplied\n+error[E0061]: this function takes 1 argument but 0 arguments were supplied\n   --> $DIR/missing-unit-argument.rs:15:7\n    |\n LL |     fn baz(self, (): ()) { }\n    |     -------------------- defined here\n ...\n LL |     S.baz();\n-   |       ^^^\n+   |       ^^^- supplied 0 arguments\n    |\n help: expected the unit value `()`; create it with empty parentheses\n    |\n LL |     S.baz(());\n    |           ^^\n \n-error[E0061]: this function takes 1 parameter but 0 parameters were supplied\n+error[E0061]: this function takes 1 argument but 0 arguments were supplied\n   --> $DIR/missing-unit-argument.rs:16:7\n    |\n LL |     fn generic<T>(self, _: T) { }\n    |     ------------------------- defined here\n ...\n LL |     S.generic::<()>();\n-   |       ^^^^^^^\n+   |       ^^^^^^^------ supplied 0 arguments\n    |\n help: expected the unit value `()`; create it with empty parentheses\n    |"}, {"sha": "d012687533bbeda82d1816771d1ba9fc125272a0", "filename": "src/test/ui/type-alias-enum-variants/enum-variant-priority-higher-than-other-inherent.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-priority-higher-than-other-inherent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-priority-higher-than-other-inherent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-priority-higher-than-other-inherent.rs?ref=b680a5e7c2aa9821287a699f3e60183086c42643", "patch": "@@ -18,6 +18,6 @@ impl E2 {\n }\n \n fn main() {\n-    <E>::V(); //~ ERROR this function takes 1 parameter but 0 parameters were supplied\n+    <E>::V(); //~ ERROR this function takes 1 argument but 0 arguments were supplied\n     let _: u8 = <E2>::V; //~ ERROR mismatched types\n }"}, {"sha": "46e7dd0c517e858ae9d081b6b31050fee1cdf8d7", "filename": "src/test/ui/type-alias-enum-variants/enum-variant-priority-higher-than-other-inherent.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-priority-higher-than-other-inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-priority-higher-than-other-inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-priority-higher-than-other-inherent.stderr?ref=b680a5e7c2aa9821287a699f3e60183086c42643", "patch": "@@ -1,11 +1,13 @@\n-error[E0061]: this function takes 1 parameter but 0 parameters were supplied\n+error[E0061]: this function takes 1 argument but 0 arguments were supplied\n   --> $DIR/enum-variant-priority-higher-than-other-inherent.rs:21:5\n    |\n LL |     V(u8)\n    |     ----- defined here\n ...\n LL |     <E>::V();\n-   |     ^^^^^^^^ expected 1 parameter\n+   |     ^^^^^^-- supplied 0 arguments\n+   |     |\n+   |     expected 1 argument\n \n error[E0308]: mismatched types\n   --> $DIR/enum-variant-priority-higher-than-other-inherent.rs:22:17"}, {"sha": "9f9b6f06bbc24f9a781d38a9b2ec0b29d32adc4b", "filename": "src/test/ui/type/type-ascription-instead-of-initializer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-initializer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-initializer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-initializer.rs?ref=b680a5e7c2aa9821287a699f3e60183086c42643", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n     let x: Vec::with_capacity(10, 20);  //~ ERROR expected type, found `10`\n-    //~^ ERROR this function takes 1 parameter\n+    //~^ ERROR this function takes 1 argument\n }"}, {"sha": "530f77e5ae9b946cd99c55495357d6c5a71ad47d", "filename": "src/test/ui/type/type-ascription-instead-of-initializer.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-initializer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b680a5e7c2aa9821287a699f3e60183086c42643/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-initializer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-initializer.stderr?ref=b680a5e7c2aa9821287a699f3e60183086c42643", "patch": "@@ -7,11 +7,13 @@ LL |     let x: Vec::with_capacity(10, 20);\n    |         |help: use `=` if you meant to assign\n    |         while parsing the type for `x`\n \n-error[E0061]: this function takes 1 parameter but 2 parameters were supplied\n+error[E0061]: this function takes 1 argument but 2 arguments were supplied\n   --> $DIR/type-ascription-instead-of-initializer.rs:2:12\n    |\n LL |     let x: Vec::with_capacity(10, 20);\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected 1 parameter\n+   |            ^^^^^^^^^^^^^^^^^^ --  -- supplied 2 arguments\n+   |            |\n+   |            expected 1 argument\n \n error: aborting due to 2 previous errors\n "}]}