{"sha": "84254948c2e7eee3869e132453d7b870639890f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0MjU0OTQ4YzJlN2VlZTM4NjllMTMyNDUzZDdiODcwNjM5ODkwZjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-29T17:38:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-29T17:38:40Z"}, "message": "Auto merge of #25880 - nikomatsakis:const-fn-feature-gate-calls, r=alexcrichton\n\nThe previous feature gate assumed we would not define any (stable) const fns. But then @eddyb went and cleaned up the code. So this now extends the feature-gate to prohibit calls; but calls inside of macros are considered ok.\r\n\r\nr? @alexcrichton", "tree": {"sha": "e586677d6bda3dbc64c6e06a7dafa6a114ce1d03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e586677d6bda3dbc64c6e06a7dafa6a114ce1d03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84254948c2e7eee3869e132453d7b870639890f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84254948c2e7eee3869e132453d7b870639890f3", "html_url": "https://github.com/rust-lang/rust/commit/84254948c2e7eee3869e132453d7b870639890f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84254948c2e7eee3869e132453d7b870639890f3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d447e40e29bbb47120dd01b3d25b2510b345284", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d447e40e29bbb47120dd01b3d25b2510b345284", "html_url": "https://github.com/rust-lang/rust/commit/2d447e40e29bbb47120dd01b3d25b2510b345284"}, {"sha": "808b4112444932f97b997ea0c9baedf4c5edb7c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/808b4112444932f97b997ea0c9baedf4c5edb7c5", "html_url": "https://github.com/rust-lang/rust/commit/808b4112444932f97b997ea0c9baedf4c5edb7c5"}], "stats": {"total": 239, "additions": 232, "deletions": 7}, "files": [{"sha": "0e3f9d5aaddf6aa29c87069a0dfcd52cfaa61c37", "filename": "src/libcollectionstest/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84254948c2e7eee3869e132453d7b870639890f3/src%2Flibcollectionstest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84254948c2e7eee3869e132453d7b870639890f3/src%2Flibcollectionstest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Flib.rs?ref=84254948c2e7eee3869e132453d7b870639890f3", "patch": "@@ -14,6 +14,7 @@\n #![feature(collections)]\n #![feature(collections_drain)]\n #![feature(core)]\n+#![feature(const_fn)]\n #![feature(hash)]\n #![feature(rand)]\n #![feature(rustc_private)]"}, {"sha": "6ec3f5b7869b017700c53db81ced0087b54b3bd5", "filename": "src/libcoretest/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84254948c2e7eee3869e132453d7b870639890f3/src%2Flibcoretest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84254948c2e7eee3869e132453d7b870639890f3/src%2Flibcoretest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Flib.rs?ref=84254948c2e7eee3869e132453d7b870639890f3", "patch": "@@ -14,6 +14,7 @@\n #![feature(box_syntax)]\n #![feature(unboxed_closures)]\n #![feature(core)]\n+#![feature(const_fn)]\n #![feature(test)]\n #![feature(rand)]\n #![feature(unicode)]"}, {"sha": "15767024ba80fb3eec77a348f1418f0518136edf", "filename": "src/liblog/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84254948c2e7eee3869e132453d7b870639890f3/src%2Fliblog%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84254948c2e7eee3869e132453d7b870639890f3/src%2Fliblog%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Flib.rs?ref=84254948c2e7eee3869e132453d7b870639890f3", "patch": "@@ -173,6 +173,7 @@\n #![feature(staged_api)]\n #![feature(box_syntax)]\n #![feature(core)]\n+#![feature(const_fn)]\n #![feature(std_misc)]\n \n use std::boxed;"}, {"sha": "4a715ca621cc2abf21f52947228667c2eaa978a4", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84254948c2e7eee3869e132453d7b870639890f3/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84254948c2e7eee3869e132453d7b870639890f3/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=84254948c2e7eee3869e132453d7b870639890f3", "patch": "@@ -29,6 +29,7 @@\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(collections)]\n+#![feature(const_fn)]\n #![feature(core)]\n #![feature(duration)]\n #![feature(duration_span)]"}, {"sha": "ff7c570284f8edac30c9c50cf41639cdee801d88", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/84254948c2e7eee3869e132453d7b870639890f3/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84254948c2e7eee3869e132453d7b870639890f3/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=84254948c2e7eee3869e132453d7b870639890f3", "patch": "@@ -199,8 +199,32 @@ impl<'a, 'tcx> CheckCrateVisitor<'a, 'tcx> {\n     }\n \n     /// Returns true if the call is to a const fn or method.\n-    fn handle_const_fn_call(&mut self, def_id: ast::DefId, ret_ty: Ty<'tcx>) -> bool {\n+    fn handle_const_fn_call(&mut self,\n+                            expr: &ast::Expr,\n+                            def_id: ast::DefId,\n+                            ret_ty: Ty<'tcx>)\n+                            -> bool {\n         if let Some(fn_like) = const_eval::lookup_const_fn_by_id(self.tcx, def_id) {\n+            if\n+                // we are in a static/const initializer\n+                self.mode != Mode::Var &&\n+\n+                // feature-gate is not enabled\n+                !self.tcx.sess.features.borrow().const_fn &&\n+\n+                // this doesn't come from a macro that has #[allow_internal_unstable]\n+                !self.tcx.sess.codemap().span_allows_unstable(expr.span)\n+            {\n+                self.tcx.sess.span_err(\n+                    expr.span,\n+                    &format!(\"const fns are an unstable feature\"));\n+                fileline_help!(\n+                    self.tcx.sess,\n+                    expr.span,\n+                    \"in Nightly builds, add `#![feature(const_fn)]` to the crate \\\n+                     attributes to enable\");\n+            }\n+\n             let qualif = self.fn_like(fn_like.kind(),\n                                       fn_like.decl(),\n                                       fn_like.body(),\n@@ -657,7 +681,7 @@ fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>,\n                 }\n                 Some(def::DefMethod(did, def::FromImpl(_))) |\n                 Some(def::DefFn(did, _)) => {\n-                    v.handle_const_fn_call(did, node_ty)\n+                    v.handle_const_fn_call(e, did, node_ty)\n                 }\n                 _ => false\n             };\n@@ -677,7 +701,7 @@ fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>,\n                 _ => None\n             };\n             let is_const = match method_did {\n-                Some(did) => v.handle_const_fn_call(did, node_ty),\n+                Some(did) => v.handle_const_fn_call(e, did, node_ty),\n                 None => false\n             };\n             if !is_const {"}, {"sha": "f25c6eb21a47b0a364c238af86476a9c9ab158f8", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84254948c2e7eee3869e132453d7b870639890f3/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84254948c2e7eee3869e132453d7b870639890f3/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=84254948c2e7eee3869e132453d7b870639890f3", "patch": "@@ -30,6 +30,7 @@\n #![feature(box_syntax)]\n #![feature(collections)]\n #![feature(core)]\n+#![feature(const_fn)]\n #![feature(libc)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]"}, {"sha": "729e0b721f11a690f15284484f0a43ee3f779f29", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/84254948c2e7eee3869e132453d7b870639890f3/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84254948c2e7eee3869e132453d7b870639890f3/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=84254948c2e7eee3869e132453d7b870639890f3", "patch": "@@ -332,7 +332,8 @@ pub struct Features {\n     /// spans of #![feature] attrs for stable language features. for error reporting\n     pub declared_stable_lang_features: Vec<Span>,\n     /// #![feature] attrs for non-language (library) features\n-    pub declared_lib_features: Vec<(InternedString, Span)>\n+    pub declared_lib_features: Vec<(InternedString, Span)>,\n+    pub const_fn: bool,\n }\n \n impl Features {\n@@ -352,7 +353,8 @@ impl Features {\n             unmarked_api: false,\n             negate_unsigned: false,\n             declared_stable_lang_features: Vec::new(),\n-            declared_lib_features: Vec::new()\n+            declared_lib_features: Vec::new(),\n+            const_fn: false,\n         }\n     }\n }\n@@ -802,7 +804,8 @@ fn check_crate_inner<F>(cm: &CodeMap, span_handler: &SpanHandler,\n         unmarked_api: cx.has_feature(\"unmarked_api\"),\n         negate_unsigned: cx.has_feature(\"negate_unsigned\"),\n         declared_stable_lang_features: accepted_features,\n-        declared_lib_features: unknown_features\n+        declared_lib_features: unknown_features,\n+        const_fn: cx.has_feature(\"const_fn\"),\n     }\n }\n "}, {"sha": "b0d5a6b12727b16225778adc037b0943931a7cc2", "filename": "src/test/auxiliary/const_fn_lib.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/84254948c2e7eee3869e132453d7b870639890f3/src%2Ftest%2Fauxiliary%2Fconst_fn_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84254948c2e7eee3869e132453d7b870639890f3/src%2Ftest%2Fauxiliary%2Fconst_fn_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fconst_fn_lib.rs?ref=84254948c2e7eee3869e132453d7b870639890f3", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Crate that exports a const fn. Used for testing cross-crate.\n+\n+#![crate_type=\"rlib\"]\n+#![feature(const_fn)]\n+\n+pub const fn foo() -> usize { 22 } //~ ERROR const fn is unstable"}, {"sha": "373fc04217540d3d3ec3665ba6cbcc8310758cce", "filename": "src/test/auxiliary/issue-17718.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84254948c2e7eee3869e132453d7b870639890f3/src%2Ftest%2Fauxiliary%2Fissue-17718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84254948c2e7eee3869e132453d7b870639890f3/src%2Ftest%2Fauxiliary%2Fissue-17718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-17718.rs?ref=84254948c2e7eee3869e132453d7b870639890f3", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(const_fn)]\n+\n use std::sync::atomic;\n \n pub const C1: usize = 1;"}, {"sha": "dd9a415311e534d37ec7acba8c590dafff46bd43", "filename": "src/test/compile-fail/const-fn-stability-calls-2.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/84254948c2e7eee3869e132453d7b870639890f3/src%2Ftest%2Fcompile-fail%2Fconst-fn-stability-calls-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84254948c2e7eee3869e132453d7b870639890f3/src%2Ftest%2Fcompile-fail%2Fconst-fn-stability-calls-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-fn-stability-calls-2.rs?ref=84254948c2e7eee3869e132453d7b870639890f3", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test use of const fn from another crate without a feature gate.\n+\n+// aux-build:const_fn_lib.rs\n+\n+extern crate const_fn_lib;\n+\n+use const_fn_lib::foo;\n+\n+fn main() {\n+    let x: [usize; foo()] = []; //~ ERROR unsupported constant expr\n+}"}, {"sha": "0f413b0bbc11201bbf4adfab5dedf3689b8d0a99", "filename": "src/test/compile-fail/const-fn-stability-calls-3.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/84254948c2e7eee3869e132453d7b870639890f3/src%2Ftest%2Fcompile-fail%2Fconst-fn-stability-calls-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84254948c2e7eee3869e132453d7b870639890f3/src%2Ftest%2Fcompile-fail%2Fconst-fn-stability-calls-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-fn-stability-calls-3.rs?ref=84254948c2e7eee3869e132453d7b870639890f3", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test use of const fn from another crate without a feature gate.\n+\n+#![feature(rustc_attrs)]\n+#![allow(unused_variables)]\n+\n+// aux-build:const_fn_lib.rs\n+\n+extern crate const_fn_lib;\n+\n+use const_fn_lib::foo;\n+\n+#[rustc_error]\n+fn main() { //~ ERROR compilation successful\n+    let x = foo(); // use outside a constant is ok\n+}"}, {"sha": "609077663ef5420f721e2391e0640f42ae0aa074", "filename": "src/test/compile-fail/const-fn-stability-calls.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/84254948c2e7eee3869e132453d7b870639890f3/src%2Ftest%2Fcompile-fail%2Fconst-fn-stability-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84254948c2e7eee3869e132453d7b870639890f3/src%2Ftest%2Fcompile-fail%2Fconst-fn-stability-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-fn-stability-calls.rs?ref=84254948c2e7eee3869e132453d7b870639890f3", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test use of const fn from another crate without a feature gate.\n+\n+// aux-build:const_fn_lib.rs\n+\n+extern crate const_fn_lib;\n+\n+use const_fn_lib::foo;\n+\n+static FOO: usize = foo(); //~ ERROR const fns are an unstable feature\n+const BAR: usize = foo(); //~ ERROR const fns are an unstable feature\n+\n+macro_rules! constant {\n+    ($n:ident: $t:ty = $v:expr) => {\n+        const $n: $t = $v;\n+    }\n+}\n+\n+constant! {\n+    BAZ: usize = foo() //~ ERROR const fns are an unstable feature\n+}\n+\n+fn main() {\n+//    let x: [usize; foo()] = [];\n+}"}, {"sha": "9913c2fa12c4a45d29a83e8a31a962f546a1986b", "filename": "src/test/compile-fail/const-fn-stability.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/84254948c2e7eee3869e132453d7b870639890f3/src%2Ftest%2Fcompile-fail%2Fconst-fn-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84254948c2e7eee3869e132453d7b870639890f3/src%2Ftest%2Fcompile-fail%2Fconst-fn-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-fn-stability.rs?ref=84254948c2e7eee3869e132453d7b870639890f3", "patch": "@@ -25,4 +25,19 @@ impl Foo for u32 {\n     const fn foo() -> u32 { 0 } //~ ERROR const fn is unstable\n }\n \n-fn main() { }\n+static FOO: usize = foo();\n+const BAR: usize = foo();\n+\n+macro_rules! constant {\n+    ($n:ident: $t:ty = $v:expr) => {\n+        const $n: $t = $v;\n+    }\n+}\n+\n+constant! {\n+    BAZ: usize = foo()\n+}\n+\n+fn main() {\n+    let x: [usize; foo()] = [];\n+}"}, {"sha": "19f790ddc90717875b915d866a5bd7670bfe7ae0", "filename": "src/test/compile-fail/dropck_arr_cycle_checked.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84254948c2e7eee3869e132453d7b870639890f3/src%2Ftest%2Fcompile-fail%2Fdropck_arr_cycle_checked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84254948c2e7eee3869e132453d7b870639890f3/src%2Ftest%2Fcompile-fail%2Fdropck_arr_cycle_checked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdropck_arr_cycle_checked.rs?ref=84254948c2e7eee3869e132453d7b870639890f3", "patch": "@@ -13,6 +13,8 @@\n //\n // (Compare against compile-fail/dropck_vec_cycle_checked.rs)\n \n+#![feature(const_fn)]\n+\n use std::cell::Cell;\n use id::Id;\n "}, {"sha": "584e5eabf0cd8f7e21cee5de46b9ea11bcfac8e3", "filename": "src/test/compile-fail/dropck_tarena_cycle_checked.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84254948c2e7eee3869e132453d7b870639890f3/src%2Ftest%2Fcompile-fail%2Fdropck_tarena_cycle_checked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84254948c2e7eee3869e132453d7b870639890f3/src%2Ftest%2Fcompile-fail%2Fdropck_tarena_cycle_checked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdropck_tarena_cycle_checked.rs?ref=84254948c2e7eee3869e132453d7b870639890f3", "patch": "@@ -17,6 +17,7 @@\n //  for the error message we see here.)\n \n #![allow(unstable)]\n+#![feature(const_fn)]\n \n extern crate arena;\n "}, {"sha": "6e0679da949e1792c3e3881ed0a915175c53511a", "filename": "src/test/compile-fail/dropck_trait_cycle_checked.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84254948c2e7eee3869e132453d7b870639890f3/src%2Ftest%2Fcompile-fail%2Fdropck_trait_cycle_checked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84254948c2e7eee3869e132453d7b870639890f3/src%2Ftest%2Fcompile-fail%2Fdropck_trait_cycle_checked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdropck_trait_cycle_checked.rs?ref=84254948c2e7eee3869e132453d7b870639890f3", "patch": "@@ -13,6 +13,8 @@\n //\n // (Compare against compile-fail/dropck_vec_cycle_checked.rs)\n \n+#![feature(const_fn)]\n+\n use std::cell::Cell;\n use id::Id;\n "}, {"sha": "bc33ff8399aa5611fd59cd17c55469a61e0fec16", "filename": "src/test/compile-fail/dropck_vec_cycle_checked.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84254948c2e7eee3869e132453d7b870639890f3/src%2Ftest%2Fcompile-fail%2Fdropck_vec_cycle_checked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84254948c2e7eee3869e132453d7b870639890f3/src%2Ftest%2Fcompile-fail%2Fdropck_vec_cycle_checked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdropck_vec_cycle_checked.rs?ref=84254948c2e7eee3869e132453d7b870639890f3", "patch": "@@ -12,6 +12,8 @@\n //\n // (Compare against compile-fail/dropck_arr_cycle_checked.rs)\n \n+#![feature(const_fn)]\n+\n use std::cell::Cell;\n use id::Id;\n "}, {"sha": "d2df0d9ef270204834ffaf8f1d96c204292d30ec", "filename": "src/test/compile-fail/functional-struct-update-respects-privacy.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84254948c2e7eee3869e132453d7b870639890f3/src%2Ftest%2Fcompile-fail%2Ffunctional-struct-update-respects-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84254948c2e7eee3869e132453d7b870639890f3/src%2Ftest%2Fcompile-fail%2Ffunctional-struct-update-respects-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffunctional-struct-update-respects-privacy.rs?ref=84254948c2e7eee3869e132453d7b870639890f3", "patch": "@@ -10,6 +10,8 @@\n \n // RFC 736 (and Issue 21407): functional struct update should respect privacy.\n \n+#![feature(const_fn)]\n+\n // The `foo` module attempts to maintains an invariant that each `S`\n // has a unique `u64` id.\n use self::foo::S;"}, {"sha": "ec6d1141c1a057aff2677424b9393f8884bc888d", "filename": "src/test/compile-fail/issue-17718-const-borrow.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84254948c2e7eee3869e132453d7b870639890f3/src%2Ftest%2Fcompile-fail%2Fissue-17718-const-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84254948c2e7eee3869e132453d7b870639890f3/src%2Ftest%2Fcompile-fail%2Fissue-17718-const-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17718-const-borrow.rs?ref=84254948c2e7eee3869e132453d7b870639890f3", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(const_fn)]\n+\n use std::cell::UnsafeCell;\n \n const A: UnsafeCell<usize> = UnsafeCell::new(1);"}, {"sha": "7d0a9007829926e1ea4bb198ffcfd4ef5d0ffa1e", "filename": "src/test/compile-fail/issue-7364.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84254948c2e7eee3869e132453d7b870639890f3/src%2Ftest%2Fcompile-fail%2Fissue-7364.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84254948c2e7eee3869e132453d7b870639890f3/src%2Ftest%2Fcompile-fail%2Fissue-7364.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7364.rs?ref=84254948c2e7eee3869e132453d7b870639890f3", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![feature(box_syntax)]\n+#![feature(const_fn)]\n \n use std::cell::RefCell;\n "}, {"sha": "375289596841d5ae59474d5a80034f71ac5926e3", "filename": "src/test/compile-fail/vec-must-not-hide-type-from-dropck.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84254948c2e7eee3869e132453d7b870639890f3/src%2Ftest%2Fcompile-fail%2Fvec-must-not-hide-type-from-dropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84254948c2e7eee3869e132453d7b870639890f3/src%2Ftest%2Fcompile-fail%2Fvec-must-not-hide-type-from-dropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvec-must-not-hide-type-from-dropck.rs?ref=84254948c2e7eee3869e132453d7b870639890f3", "patch": "@@ -23,6 +23,8 @@\n // conditions above to be satisfied, meaning that if the dropck is\n // sound, it should reject this code.\n \n+#![feature(const_fn)]\n+\n use std::cell::Cell;\n use id::Id;\n "}, {"sha": "8032b53e9dd7ca4aa8dc21082fb63bc2d46e131c", "filename": "src/test/debuginfo/constant-debug-locs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84254948c2e7eee3869e132453d7b870639890f3/src%2Ftest%2Fdebuginfo%2Fconstant-debug-locs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84254948c2e7eee3869e132453d7b870639890f3/src%2Ftest%2Fdebuginfo%2Fconstant-debug-locs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fconstant-debug-locs.rs?ref=84254948c2e7eee3869e132453d7b870639890f3", "patch": "@@ -15,6 +15,7 @@\n #![allow(dead_code, unused_variables)]\n #![omit_gdb_pretty_printer_section]\n #![feature(std_misc, core)]\n+#![feature(const_fn)]\n \n // This test makes sure that the compiler doesn't crash when trying to assign\n // debug locations to const-expressions."}, {"sha": "b13e34256d2293704864de1db0c3144240b40dd9", "filename": "src/test/run-pass-valgrind/cast-enum-with-dtor.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84254948c2e7eee3869e132453d7b870639890f3/src%2Ftest%2Frun-pass-valgrind%2Fcast-enum-with-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84254948c2e7eee3869e132453d7b870639890f3/src%2Ftest%2Frun-pass-valgrind%2Fcast-enum-with-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-valgrind%2Fcast-enum-with-dtor.rs?ref=84254948c2e7eee3869e132453d7b870639890f3", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![allow(dead_code)]\n+#![feature(const_fn)]\n \n // check dtor calling order when casting enums.\n "}, {"sha": "8dc7d79ec2a7772c5c6d4162cd767d94ac118a2f", "filename": "src/test/run-pass/associated-types-project-from-type-param-via-bound-in-where-clause.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84254948c2e7eee3869e132453d7b870639890f3/src%2Ftest%2Frun-pass%2Fassociated-types-project-from-type-param-via-bound-in-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84254948c2e7eee3869e132453d7b870639890f3/src%2Ftest%2Frun-pass%2Fassociated-types-project-from-type-param-via-bound-in-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-project-from-type-param-via-bound-in-where-clause.rs?ref=84254948c2e7eee3869e132453d7b870639890f3", "patch": "@@ -12,6 +12,8 @@\n // `Item` originates in a where-clause, not the declaration of\n // `T`. Issue #20300.\n \n+#![feature(const_fn)]\n+\n use std::marker::{PhantomData};\n use std::sync::atomic::{AtomicUsize};\n use std::sync::atomic::Ordering::SeqCst;"}, {"sha": "e889d74c7ccc4e85be6317f0087bc3bf66e34c69", "filename": "src/test/run-pass/box-of-array-of-drop-1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84254948c2e7eee3869e132453d7b870639890f3/src%2Ftest%2Frun-pass%2Fbox-of-array-of-drop-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84254948c2e7eee3869e132453d7b870639890f3/src%2Ftest%2Frun-pass%2Fbox-of-array-of-drop-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-of-array-of-drop-1.rs?ref=84254948c2e7eee3869e132453d7b870639890f3", "patch": "@@ -11,6 +11,8 @@\n // Test that we cleanup a fixed size Box<[D; k]> properly when D has a\n // destructor.\n \n+#![feature(const_fn)]\n+\n use std::thread;\n use std::sync::atomic::{AtomicUsize, Ordering};\n "}, {"sha": "f108ef4f5d22de94deefff812dc0ceca310bb88c", "filename": "src/test/run-pass/box-of-array-of-drop-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84254948c2e7eee3869e132453d7b870639890f3/src%2Ftest%2Frun-pass%2Fbox-of-array-of-drop-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84254948c2e7eee3869e132453d7b870639890f3/src%2Ftest%2Frun-pass%2Fbox-of-array-of-drop-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-of-array-of-drop-2.rs?ref=84254948c2e7eee3869e132453d7b870639890f3", "patch": "@@ -11,6 +11,8 @@\n // Test that we cleanup dynamic sized Box<[D]> properly when D has a\n // destructor.\n \n+#![feature(const_fn)]\n+\n use std::thread;\n use std::sync::atomic::{AtomicUsize, Ordering};\n "}, {"sha": "5d0c17af7171902a2bd6441220c597633913dc62", "filename": "src/test/run-pass/const-fn-cross-crate.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/84254948c2e7eee3869e132453d7b870639890f3/src%2Ftest%2Frun-pass%2Fconst-fn-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84254948c2e7eee3869e132453d7b870639890f3/src%2Ftest%2Frun-pass%2Fconst-fn-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-fn-cross-crate.rs?ref=84254948c2e7eee3869e132453d7b870639890f3", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:const_fn_lib.rs\n+\n+// A very basic test of const fn functionality.\n+\n+#![feature(const_fn)]\n+\n+extern crate const_fn_lib;\n+\n+use const_fn_lib::foo;\n+\n+const FOO: usize = foo();\n+\n+fn main() {\n+    assert_eq!(FOO, 22);\n+}"}, {"sha": "42c7a47c59db1f24791dfa6772a1e90a6c883306", "filename": "src/test/run-pass/const-fn-method.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/84254948c2e7eee3869e132453d7b870639890f3/src%2Ftest%2Frun-pass%2Fconst-fn-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84254948c2e7eee3869e132453d7b870639890f3/src%2Ftest%2Frun-pass%2Fconst-fn-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-fn-method.rs?ref=84254948c2e7eee3869e132453d7b870639890f3", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(const_fn)]\n+\n+struct Foo { value: u32 }\n+\n+impl Foo {\n+    const fn new() -> Foo {\n+        Foo { value: 22 }\n+    }\n+}\n+\n+const FOO: Foo = Foo::new();\n+\n+pub fn main() {\n+    assert_eq!(FOO.value, 22);\n+}"}, {"sha": "993e5e1c1e6e90f0eaa8f0f96f79de320ae0634c", "filename": "src/test/run-pass/issue-17718-static-unsafe-interior.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84254948c2e7eee3869e132453d7b870639890f3/src%2Ftest%2Frun-pass%2Fissue-17718-static-unsafe-interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84254948c2e7eee3869e132453d7b870639890f3/src%2Ftest%2Frun-pass%2Fissue-17718-static-unsafe-interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17718-static-unsafe-interior.rs?ref=84254948c2e7eee3869e132453d7b870639890f3", "patch": "@@ -11,6 +11,8 @@\n // pretty-expanded FIXME #23616\n \n #![feature(core)]\n+#![feature(const_fn)]\n+\n \n use std::marker;\n use std::cell::UnsafeCell;"}, {"sha": "2bb69d105ff5d8c50b05836f29e9e330f3a26e90", "filename": "src/test/run-pass/issue-17718.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84254948c2e7eee3869e132453d7b870639890f3/src%2Ftest%2Frun-pass%2Fissue-17718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84254948c2e7eee3869e132453d7b870639890f3/src%2Ftest%2Frun-pass%2Fissue-17718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17718.rs?ref=84254948c2e7eee3869e132453d7b870639890f3", "patch": "@@ -12,6 +12,7 @@\n \n \n #![feature(core)]\n+#![feature(const_fn)]\n \n extern crate issue_17718 as other;\n "}, {"sha": "699189a4e6aedd88657acc9e56aedbb1b121e14e", "filename": "src/test/run-pass/issue-21486.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84254948c2e7eee3869e132453d7b870639890f3/src%2Ftest%2Frun-pass%2Fissue-21486.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84254948c2e7eee3869e132453d7b870639890f3/src%2Ftest%2Frun-pass%2Fissue-21486.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-21486.rs?ref=84254948c2e7eee3869e132453d7b870639890f3", "patch": "@@ -12,6 +12,7 @@\n // created via FRU and control-flow breaks in the middle of\n // construction.\n \n+#![feature(const_fn)]\n \n use std::sync::atomic::{Ordering, AtomicUsize};\n "}, {"sha": "89ac626158392f73f33da2da2c93039add3d0f0b", "filename": "src/test/run-pass/nested-vec-3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84254948c2e7eee3869e132453d7b870639890f3/src%2Ftest%2Frun-pass%2Fnested-vec-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84254948c2e7eee3869e132453d7b870639890f3/src%2Ftest%2Frun-pass%2Fnested-vec-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnested-vec-3.rs?ref=84254948c2e7eee3869e132453d7b870639890f3", "patch": "@@ -12,6 +12,7 @@\n // the contents implement Drop and we hit a panic in the middle of\n // construction.\n \n+#![feature(const_fn)]\n \n use std::thread;\n use std::sync::atomic::{AtomicUsize, Ordering};"}, {"sha": "b67eb205396b29cff30bdf088bc3877469b2c534", "filename": "src/test/run-pass/struct-order-of-eval-3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84254948c2e7eee3869e132453d7b870639890f3/src%2Ftest%2Frun-pass%2Fstruct-order-of-eval-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84254948c2e7eee3869e132453d7b870639890f3/src%2Ftest%2Frun-pass%2Fstruct-order-of-eval-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-order-of-eval-3.rs?ref=84254948c2e7eee3869e132453d7b870639890f3", "patch": "@@ -11,6 +11,7 @@\n // Checks that functional-record-update order-of-eval is as expected\n // even when no Drop-implementations are involved.\n \n+#![feature(const_fn)]\n \n use std::sync::atomic::{Ordering, AtomicUsize};\n "}, {"sha": "20d27d8b309bbb9c35795c129ffa4d61c906d7de", "filename": "src/test/run-pass/struct-order-of-eval-4.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84254948c2e7eee3869e132453d7b870639890f3/src%2Ftest%2Frun-pass%2Fstruct-order-of-eval-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84254948c2e7eee3869e132453d7b870639890f3/src%2Ftest%2Frun-pass%2Fstruct-order-of-eval-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-order-of-eval-4.rs?ref=84254948c2e7eee3869e132453d7b870639890f3", "patch": "@@ -11,6 +11,7 @@\n // Checks that struct-literal expression order-of-eval is as expected\n // even when no Drop-implementations are involved.\n \n+#![feature(const_fn)]\n \n use std::sync::atomic::{Ordering, AtomicUsize};\n "}, {"sha": "209fe22207f49b5386b012c2ff48134a2a5d72f8", "filename": "src/test/run-pass/vector-sort-panic-safe.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84254948c2e7eee3869e132453d7b870639890f3/src%2Ftest%2Frun-pass%2Fvector-sort-panic-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84254948c2e7eee3869e132453d7b870639890f3/src%2Ftest%2Frun-pass%2Fvector-sort-panic-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvector-sort-panic-safe.rs?ref=84254948c2e7eee3869e132453d7b870639890f3", "patch": "@@ -10,6 +10,7 @@\n \n \n #![feature(rand, core)]\n+#![feature(const_fn)]\n \n use std::sync::atomic::{AtomicUsize, Ordering};\n use std::__rand::{thread_rng, Rng};"}]}