{"sha": "1f969da5704b357276ef08d7d217218f76f80bc3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmOTY5ZGE1NzA0YjM1NzI3NmVmMDhkN2QyMTcyMThmNzZmODBiYzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-30T14:38:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-30T14:38:10Z"}, "message": "Auto merge of #1863 - hyd-dev:parallel-compiler, r=RalfJung\n\nUse `Lrc` instead of `Rc` in `MiriCompilerCalls::config()`\n\nThe `used_crate_source` query defines its return type as [`Lrc<CrateSource>`](https://github.com/rust-lang/rust/blob/1195bea5a7b73e079fa14b37ac7e375fc77d368a/compiler/rustc_middle/src/query/mod.rs#L1418), which would be `Arc` when `parallel-compiler = true`.\n\nI assume this fixes rust-lang/rust#87623. I didn't test that locally -- I'm not interested in `parallel-compiler = true` enough to be willing to recompile rustc with that configuration to test it, but I'm submitting this in case it might be useful for `parallel-compiler = true` users.", "tree": {"sha": "2fdbd92221022cb73feca4b188355be0f02a8e67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fdbd92221022cb73feca4b188355be0f02a8e67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f969da5704b357276ef08d7d217218f76f80bc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f969da5704b357276ef08d7d217218f76f80bc3", "html_url": "https://github.com/rust-lang/rust/commit/1f969da5704b357276ef08d7d217218f76f80bc3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f969da5704b357276ef08d7d217218f76f80bc3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "453e3ef7dab5aad6450bee09b2c02de94c5b18cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/453e3ef7dab5aad6450bee09b2c02de94c5b18cb", "html_url": "https://github.com/rust-lang/rust/commit/453e3ef7dab5aad6450bee09b2c02de94c5b18cb"}, {"sha": "a789b49e4c0e7d742cc39713484596293d844537", "url": "https://api.github.com/repos/rust-lang/rust/commits/a789b49e4c0e7d742cc39713484596293d844537", "html_url": "https://github.com/rust-lang/rust/commit/a789b49e4c0e7d742cc39713484596293d844537"}], "stats": {"total": 5, "additions": 3, "deletions": 2}, "files": [{"sha": "18c393815ca5e9422fe0428e519eef710afa828c", "filename": "src/bin/miri.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f969da5704b357276ef08d7d217218f76f80bc3/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f969da5704b357276ef08d7d217218f76f80bc3/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=1f969da5704b357276ef08d7d217218f76f80bc3", "patch": "@@ -1,5 +1,6 @@\n #![feature(rustc_private, bool_to_option, stmt_expr_attributes)]\n \n+extern crate rustc_data_structures;\n extern crate rustc_driver;\n extern crate rustc_errors;\n extern crate rustc_hir;\n@@ -12,12 +13,12 @@ use std::convert::TryFrom;\n use std::env;\n use std::num::NonZeroU64;\n use std::path::PathBuf;\n-use std::rc::Rc;\n use std::str::FromStr;\n \n use hex::FromHexError;\n use log::debug;\n \n+use rustc_data_structures::sync::Lrc;\n use rustc_driver::Compilation;\n use rustc_errors::emitter::{ColorConfig, HumanReadableErrorType};\n use rustc_hir::{self as hir, def_id::LOCAL_CRATE, Node};\n@@ -42,7 +43,7 @@ impl rustc_driver::Callbacks for MiriCompilerCalls {\n                 // HACK: rustc will emit \"crate ... required to be available in rlib format, but\n                 // was not found in this form\" errors once we use `tcx.dependency_formats()` if\n                 // there's no rlib provided, so setting a dummy path here to workaround those errors.\n-                Rc::make_mut(&mut crate_source).rlib = Some((PathBuf::new(), PathKind::All));\n+                Lrc::make_mut(&mut crate_source).rlib = Some((PathBuf::new(), PathKind::All));\n                 crate_source\n             };\n         });"}]}