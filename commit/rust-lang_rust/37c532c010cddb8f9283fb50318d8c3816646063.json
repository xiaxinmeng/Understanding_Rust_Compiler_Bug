{"sha": "37c532c010cddb8f9283fb50318d8c3816646063", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3YzUzMmMwMTBjZGRiOGY5MjgzZmI1MDMxOGQ4YzM4MTY2NDYwNjM=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-02-14T18:43:07Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-02-14T18:44:48Z"}, "message": "Suggest correct replacement for panic![123].\n\nBefore this change, the suggestion was `std::panic::panic_any(123]`,\nchanging the opening brace but not the closing one.", "tree": {"sha": "ae0f393a007f4a9046d7cd71132f26f9cdc0ce0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae0f393a007f4a9046d7cd71132f26f9cdc0ce0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37c532c010cddb8f9283fb50318d8c3816646063", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37c532c010cddb8f9283fb50318d8c3816646063", "html_url": "https://github.com/rust-lang/rust/commit/37c532c010cddb8f9283fb50318d8c3816646063", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37c532c010cddb8f9283fb50318d8c3816646063/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f97a0b364bcbb261f05d6ac62436b6802bfa80b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f97a0b364bcbb261f05d6ac62436b6802bfa80b", "html_url": "https://github.com/rust-lang/rust/commit/9f97a0b364bcbb261f05d6ac62436b6802bfa80b"}], "stats": {"total": 56, "additions": 37, "deletions": 19}, "files": [{"sha": "c4627745648d3398cd501bf0a056a464d3469477", "filename": "compiler/rustc_lint/src/non_fmt_panic.rs", "status": "modified", "additions": 33, "deletions": 15, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/37c532c010cddb8f9283fb50318d8c3816646063/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c532c010cddb8f9283fb50318d8c3816646063/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs?ref=37c532c010cddb8f9283fb50318d8c3816646063", "patch": "@@ -93,12 +93,12 @@ fn check_panic<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>, arg: &'tc\n         if arg_macro.map_or(false, |id| cx.tcx.is_diagnostic_item(sym::format_macro, id)) {\n             // A case of `panic!(format!(..))`.\n             l.note(\"the panic!() macro supports formatting, so there's no need for the format!() macro here\");\n-            if let Some(inner) = find_inner_span(cx, arg_span) {\n+            if let Some((open, close, _)) = find_delimiters(cx, arg_span) {\n                 l.multipart_suggestion(\n                     \"remove the `format!(..)` macro call\",\n                     vec![\n-                        (arg_span.until(inner), \"\".into()),\n-                        (inner.between(arg_span.shrink_to_hi()), \"\".into()),\n+                        (arg_span.until(open.shrink_to_hi()), \"\".into()),\n+                        (close.until(arg_span.shrink_to_hi()), \"\".into()),\n                     ],\n                     Applicability::MachineApplicable,\n                 );\n@@ -111,12 +111,20 @@ fn check_panic<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>, arg: &'tc\n                 Applicability::MaybeIncorrect,\n             );\n             if panic == sym::std_panic_macro {\n-                l.span_suggestion_verbose(\n-                    span.until(arg_span),\n-                    \"or use std::panic::panic_any instead\",\n-                    \"std::panic::panic_any(\".into(),\n-                    Applicability::MachineApplicable,\n-                );\n+                if let Some((open, close, del)) = find_delimiters(cx, span) {\n+                    l.multipart_suggestion(\n+                        \"or use std::panic::panic_any instead\",\n+                        if del == '(' {\n+                            vec![(span.until(open), \"std::panic::panic_any\".into())]\n+                        } else {\n+                            vec![\n+                                (span.until(open.shrink_to_hi()), \"std::panic::panic_any(\".into()),\n+                                (close, \")\".into()),\n+                            ]\n+                        },\n+                        Applicability::MachineApplicable,\n+                    );\n+                }\n             }\n         }\n         l.emit();\n@@ -206,13 +214,23 @@ fn check_panic_str<'tcx>(\n     }\n }\n \n-/// Given the span of `some_macro!(args)`, gives the span of `args`.\n-fn find_inner_span<'tcx>(cx: &LateContext<'tcx>, span: Span) -> Option<Span> {\n+/// Given the span of `some_macro!(args);`, gives the span of `(` and `)`,\n+/// and the type of (opening) delimiter used.\n+fn find_delimiters<'tcx>(cx: &LateContext<'tcx>, span: Span) -> Option<(Span, Span, char)> {\n     let snippet = cx.sess().parse_sess.source_map().span_to_snippet(span).ok()?;\n-    Some(span.from_inner(InnerSpan {\n-        start: snippet.find(&['(', '{', '['][..])? + 1,\n-        end: snippet.rfind(&[')', '}', ']'][..])?,\n-    }))\n+    let (open, open_ch) = snippet.char_indices().find(|&(_, c)| \"([{\".contains(c))?;\n+    let close = snippet.rfind(|c| \")]}\".contains(c))?;\n+    Some((\n+        span.from_inner(InnerSpan {\n+            start: open,\n+            end: open + 1,\n+        }),\n+        span.from_inner(InnerSpan {\n+            start: close,\n+            end: close + 1,\n+        }),\n+        open_ch,\n+    ))\n }\n \n fn panic_call<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>) -> (Span, Symbol) {"}, {"sha": "001f066ad212ac917e2ea47f0dbfde0e2a047d86", "filename": "src/test/ui/non-fmt-panic.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37c532c010cddb8f9283fb50318d8c3816646063/src%2Ftest%2Fui%2Fnon-fmt-panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37c532c010cddb8f9283fb50318d8c3816646063/src%2Ftest%2Fui%2Fnon-fmt-panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-fmt-panic.stderr?ref=37c532c010cddb8f9283fb50318d8c3816646063", "patch": "@@ -93,7 +93,7 @@ LL |     panic!(\"{}\", C);\n help: or use std::panic::panic_any instead\n    |\n LL |     std::panic::panic_any(C);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n \n warning: panic message is not a string literal\n   --> $DIR/non-fmt-panic.rs:20:12\n@@ -109,7 +109,7 @@ LL |     panic!(\"{}\", S);\n help: or use std::panic::panic_any instead\n    |\n LL |     std::panic::panic_any(S);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n \n warning: panic message is not a string literal\n   --> $DIR/non-fmt-panic.rs:21:17\n@@ -125,7 +125,7 @@ LL |     std::panic!(\"{}\", 123);\n help: or use std::panic::panic_any instead\n    |\n LL |     std::panic::panic_any(123);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n \n warning: panic message is not a string literal\n   --> $DIR/non-fmt-panic.rs:22:18\n@@ -197,7 +197,7 @@ LL |     panic!(\"{}\", a!());\n help: or use std::panic::panic_any instead\n    |\n LL |     std::panic::panic_any(a!());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n \n warning: panic message is not a string literal\n   --> $DIR/non-fmt-panic.rs:38:12"}]}