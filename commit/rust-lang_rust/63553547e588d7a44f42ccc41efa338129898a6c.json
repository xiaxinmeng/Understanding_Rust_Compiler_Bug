{"sha": "63553547e588d7a44f42ccc41efa338129898a6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzNTUzNTQ3ZTU4OGQ3YTQ0ZjQyY2NjNDFlZmEzMzgxMjk4OThhNmM=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-02-24T02:40:40Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-15T13:20:19Z"}, "message": "Rename ty::Generics::parameters to params", "tree": {"sha": "829e0d28d4d93b780dbd019841e017dcdf863325", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/829e0d28d4d93b780dbd019841e017dcdf863325"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63553547e588d7a44f42ccc41efa338129898a6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63553547e588d7a44f42ccc41efa338129898a6c", "html_url": "https://github.com/rust-lang/rust/commit/63553547e588d7a44f42ccc41efa338129898a6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63553547e588d7a44f42ccc41efa338129898a6c/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de1c29c95e075af9d95b20860b7f2d9af1449c07", "url": "https://api.github.com/repos/rust-lang/rust/commits/de1c29c95e075af9d95b20860b7f2d9af1449c07", "html_url": "https://github.com/rust-lang/rust/commit/de1c29c95e075af9d95b20860b7f2d9af1449c07"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "dbd7175272a3651b8d057593f321a18021100f1a", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63553547e588d7a44f42ccc41efa338129898a6c/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63553547e588d7a44f42ccc41efa338129898a6c/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=63553547e588d7a44f42ccc41efa338129898a6c", "patch": "@@ -736,7 +736,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for ty::Generics {\n         let ty::Generics {\n             parent,\n             ref parent_count,\n-            ref parameters,\n+            ref params,\n \n             // Reverse map to each `TypeParameterDef`'s `index` field, from\n             // `def_id.index` (`def_id.krate` is the same as the item's).\n@@ -747,7 +747,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for ty::Generics {\n \n         parent.hash_stable(hcx, hasher);\n         parent_count.hash_stable(hcx, hasher);\n-        parameters.hash_stable(hcx, hasher);\n+        params.hash_stable(hcx, hasher);\n         has_self.hash_stable(hcx, hasher);\n         has_late_bound_regions.hash_stable(hcx, hasher);\n     }"}, {"sha": "8b69ba1780ec2d1be58a1b75474e13b00a198db3", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/63553547e588d7a44f42ccc41efa338129898a6c/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63553547e588d7a44f42ccc41efa338129898a6c/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=63553547e588d7a44f42ccc41efa338129898a6c", "patch": "@@ -785,7 +785,7 @@ impl GenericParameterDef {\n pub struct Generics {\n     pub parent: Option<DefId>,\n     pub parent_count: usize,\n-    pub parameters: Vec<GenericParameterDef>,\n+    pub params: Vec<GenericParameterDef>,\n \n     /// Reverse map to each `TypeParameterDef`'s `index` field\n     pub type_param_to_index: FxHashMap<DefId, u32>,\n@@ -796,15 +796,15 @@ pub struct Generics {\n \n impl<'a, 'gcx, 'tcx> Generics {\n     pub fn own_count(&self) -> usize {\n-        self.parameters.len()\n+        self.params.len()\n     }\n \n     pub fn count(&self) -> usize {\n         self.parent_count + self.own_count()\n     }\n \n     pub fn lifetimes(&self) -> Vec<&RegionParameterDef> {\n-        self.parameters.iter().filter_map(|p| {\n+        self.params.iter().filter_map(|p| {\n             if let GenericParameterDef::Lifetime(lt) = p {\n                 Some(lt)\n             } else {\n@@ -814,7 +814,7 @@ impl<'a, 'gcx, 'tcx> Generics {\n     }\n \n     pub fn types(&self) -> Vec<&TypeParameterDef> {\n-        self.parameters.iter().filter_map(|p| {\n+        self.params.iter().filter_map(|p| {\n             if let GenericParameterDef::Type(ty) = p {\n                 Some(ty)\n             } else {\n@@ -842,7 +842,7 @@ impl<'a, 'gcx, 'tcx> Generics {\n     {\n         if let Some(index) = param.index.checked_sub(self.parent_count as u32) {\n             // We're currently assuming that lifetimes precede other generic parameters.\n-            match self.parameters[index as usize - self.has_self as usize] {\n+            match self.params[index as usize - self.has_self as usize] {\n                 ty::GenericParameterDef::Lifetime(ref lt) => lt,\n                 _ => bug!(\"expected region parameter, but found another generic parameter\")\n             }\n@@ -892,13 +892,13 @@ impl<'a, 'gcx, 'tcx> Generics {\n \n             if let Some(_) = (idx as usize).checked_sub(type_param_offset) {\n                 assert!(!is_separated_self, \"found a Self after type_param_offset\");\n-                match self.parameters[idx as usize] {\n+                match self.params[idx as usize] {\n                     ty::GenericParameterDef::Type(ref ty) => ty,\n                     _ => bug!(\"expected type parameter, but found another generic parameter\")\n                 }\n             } else {\n                 assert!(is_separated_self, \"non-Self param before type_param_offset\");\n-                match self.parameters[type_param_offset] {\n+                match self.params[type_param_offset] {\n                     ty::GenericParameterDef::Type(ref ty) => ty,\n                     _ => bug!(\"expected type parameter, but found another generic parameter\")\n                 }"}, {"sha": "a6960339fd4aac869a7ce9285e1e54655644fc26", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63553547e588d7a44f42ccc41efa338129898a6c/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63553547e588d7a44f42ccc41efa338129898a6c/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=63553547e588d7a44f42ccc41efa338129898a6c", "patch": "@@ -252,7 +252,7 @@ impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n             substs.push(ty.into());\n         }\n \n-        for def in &defs.parameters {\n+        for def in &defs.params {\n             let param = match def {\n                 ty::GenericParameterDef::Lifetime(ref lt) => {\n                     UnpackedKind::Lifetime(mk_region(lt, substs))"}, {"sha": "83f132d88691a14ea0de6adbdfb54dea5981fb84", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63553547e588d7a44f42ccc41efa338129898a6c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63553547e588d7a44f42ccc41efa338129898a6c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=63553547e588d7a44f42ccc41efa338129898a6c", "patch": "@@ -288,7 +288,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         let method_item = self.associated_item(trait_def_id, m_name, Namespace::Value).unwrap();\n         let def_id = method_item.def_id;\n         let generics = tcx.generics_of(def_id);\n-        assert_eq!(generics.parameters.len(), 0);\n+        assert_eq!(generics.params.len(), 0);\n \n         debug!(\"lookup_in_trait_adjusted: method_item={:?}\", method_item);\n         let mut obligations = vec![];"}, {"sha": "9d762ca38347677c521f4b9ff83f78d3fa57aa8a", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63553547e588d7a44f42ccc41efa338129898a6c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63553547e588d7a44f42ccc41efa338129898a6c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=63553547e588d7a44f42ccc41efa338129898a6c", "patch": "@@ -1384,7 +1384,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n         // in the values from the substitution.\n         let xform_fn_sig = self.erase_late_bound_regions(&fn_sig);\n \n-        if generics.parameters.is_empty() {\n+        if generics.params.is_empty() {\n             xform_fn_sig.subst(self.tcx, substs)\n         } else {\n             let substs = Substs::for_item(self.tcx, method, |def, _| {"}, {"sha": "6783f6f1987d7bae0b74c12f36ff2ae24120e974", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/63553547e588d7a44f42ccc41efa338129898a6c/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63553547e588d7a44f42ccc41efa338129898a6c/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=63553547e588d7a44f42ccc41efa338129898a6c", "patch": "@@ -881,7 +881,7 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         assert_eq!(has_self, false);\n         parent_has_self = generics.has_self;\n         own_start = generics.count() as u32;\n-        generics.parent_count + generics.parameters.len()\n+        generics.parent_count + generics.params.len()\n     });\n \n     let early_lifetimes = early_bound_lifetimes_from_generics(tcx, ast_generics);\n@@ -974,12 +974,12 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         regions.into_iter().map(|lt| ty::GenericParameterDef::Lifetime(lt)).collect();\n     let types: Vec<ty::GenericParameterDef> =\n         types.into_iter().map(|ty| ty::GenericParameterDef::Type(ty)).collect();\n-    let parameters = lifetimes.into_iter().chain(types.into_iter()).collect();\n+    let params = lifetimes.into_iter().chain(types.into_iter()).collect();\n \n     tcx.alloc_generics(ty::Generics {\n         parent: parent_def_id,\n         parent_count,\n-        parameters,\n+        params,\n         type_param_to_index,\n         has_self: has_self || parent_has_self,\n         has_late_bound_regions: has_late_bound_regions(tcx, node),"}]}