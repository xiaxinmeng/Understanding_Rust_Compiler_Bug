{"sha": "98edd1fbf8a68977a2a7c1312eb1ebff80515a92", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4ZWRkMWZiZjhhNjg5NzdhMmE3YzEzMTJlYjFlYmZmODA1MTVhOTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-06T21:11:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-06T21:11:04Z"}, "message": "Auto merge of #77386 - joshtriplett:static-glibc, r=petrochenkov\n\nSupport static linking with glibc and target-feature=+crt-static\n\nWith this change, it's possible to build on a linux-gnu target and pass\nRUSTFLAGS='-C target-feature=+crt-static' or the equivalent via a\n`.cargo/config.toml` file, and get a statically linked executable.\n\nUpdate to libc 0.2.78, which adds support for static linking with glibc.\n\nAdd `crt_static_respected` to the `linux_base` target spec.\n\nUpdate `android_base` and `linux_musl_base` accordingly. Avoid enabling\ncrt_static_respected on Android platforms, since that hasn't been\ntested.\n\nCloses https://github.com/rust-lang/rust/issues/65447.", "tree": {"sha": "37642e103442b1779acb7e269a3e9248f1e58a05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37642e103442b1779acb7e269a3e9248f1e58a05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98edd1fbf8a68977a2a7c1312eb1ebff80515a92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98edd1fbf8a68977a2a7c1312eb1ebff80515a92", "html_url": "https://github.com/rust-lang/rust/commit/98edd1fbf8a68977a2a7c1312eb1ebff80515a92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98edd1fbf8a68977a2a7c1312eb1ebff80515a92/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fdaeb393a16951f6fdef087193fef576e36aba6", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fdaeb393a16951f6fdef087193fef576e36aba6", "html_url": "https://github.com/rust-lang/rust/commit/9fdaeb393a16951f6fdef087193fef576e36aba6"}, {"sha": "d9f29fd9ed558a5ef0462736ac3c13e3cc12b736", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9f29fd9ed558a5ef0462736ac3c13e3cc12b736", "html_url": "https://github.com/rust-lang/rust/commit/d9f29fd9ed558a5ef0462736ac3c13e3cc12b736"}], "stats": {"total": 49, "additions": 17, "deletions": 32}, "files": [{"sha": "ade525811bdb7edebb8b6742dae9c44c1a0306ca", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98edd1fbf8a68977a2a7c1312eb1ebff80515a92/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/98edd1fbf8a68977a2a7c1312eb1ebff80515a92/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=98edd1fbf8a68977a2a7c1312eb1ebff80515a92", "patch": "@@ -1660,9 +1660,9 @@ checksum = \"830d08ce1d1d941e6b30645f1a0eb5643013d835ce3779a5fc208261dbe10f55\"\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.77\"\n+version = \"0.2.79\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f2f96b10ec2560088a8e76961b00d47107b3a625fecb76dedb29ee7ccbf98235\"\n+checksum = \"2448f6066e80e3bfc792e9c98bf705b4b0fc6e8ef5b43e5889aff0eaa9c58743\"\n dependencies = [\n  \"rustc-std-workspace-core\",\n ]"}, {"sha": "bb11ce8ef28c20c8faacfd233d1a3ec6599428a9", "filename": "compiler/rustc_target/src/spec/android_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98edd1fbf8a68977a2a7c1312eb1ebff80515a92/compiler%2Frustc_target%2Fsrc%2Fspec%2Fandroid_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98edd1fbf8a68977a2a7c1312eb1ebff80515a92/compiler%2Frustc_target%2Fsrc%2Fspec%2Fandroid_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fandroid_base.rs?ref=98edd1fbf8a68977a2a7c1312eb1ebff80515a92", "patch": "@@ -12,5 +12,6 @@ pub fn opts() -> TargetOptions {\n     base.position_independent_executables = true;\n     base.has_elf_tls = false;\n     base.requires_uwtable = true;\n+    base.crt_static_respected = false;\n     base\n }"}, {"sha": "7ad972b069210d1950ebd32670ffa433a22dffb2", "filename": "compiler/rustc_target/src/spec/linux_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98edd1fbf8a68977a2a7c1312eb1ebff80515a92/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98edd1fbf8a68977a2a7c1312eb1ebff80515a92/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_base.rs?ref=98edd1fbf8a68977a2a7c1312eb1ebff80515a92", "patch": "@@ -28,6 +28,7 @@ pub fn opts() -> TargetOptions {\n         position_independent_executables: true,\n         relro_level: RelroLevel::Full,\n         has_elf_tls: true,\n+        crt_static_respected: true,\n         ..Default::default()\n     }\n }"}, {"sha": "16cc3b762f623f181f400f80a205f0c2c4a2f343", "filename": "compiler/rustc_target/src/spec/linux_musl_base.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98edd1fbf8a68977a2a7c1312eb1ebff80515a92/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_musl_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98edd1fbf8a68977a2a7c1312eb1ebff80515a92/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_musl_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_musl_base.rs?ref=98edd1fbf8a68977a2a7c1312eb1ebff80515a92", "patch": "@@ -10,8 +10,6 @@ pub fn opts() -> TargetOptions {\n \n     // These targets statically link libc by default\n     base.crt_static_default = true;\n-    // These targets allow the user to choose between static and dynamic linking.\n-    base.crt_static_respected = true;\n \n     base\n }"}, {"sha": "c08828bc0cde9024a8a0a41f1d8cba3f2fd98000", "filename": "library/std/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98edd1fbf8a68977a2a7c1312eb1ebff80515a92/library%2Fstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/98edd1fbf8a68977a2a7c1312eb1ebff80515a92/library%2Fstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2FCargo.toml?ref=98edd1fbf8a68977a2a7c1312eb1ebff80515a92", "patch": "@@ -16,7 +16,7 @@ cfg-if = { version = \"0.1.8\", features = ['rustc-dep-of-std'] }\n panic_unwind = { path = \"../panic_unwind\", optional = true }\n panic_abort = { path = \"../panic_abort\" }\n core = { path = \"../core\" }\n-libc = { version = \"0.2.77\", default-features = false, features = ['rustc-dep-of-std'] }\n+libc = { version = \"0.2.79\", default-features = false, features = ['rustc-dep-of-std'] }\n compiler_builtins = { version = \"0.1.35\" }\n profiler_builtins = { path = \"../profiler_builtins\", optional = true }\n unwind = { path = \"../unwind\" }"}, {"sha": "eb600d2465ca02c225aa5f86aa1a76c110411dfe", "filename": "library/std/src/sys/unix/process/process_unix.rs", "status": "modified", "additions": 3, "deletions": 23, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/98edd1fbf8a68977a2a7c1312eb1ebff80515a92/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98edd1fbf8a68977a2a7c1312eb1ebff80515a92/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=98edd1fbf8a68977a2a7c1312eb1ebff80515a92", "patch": "@@ -461,39 +461,19 @@ impl ExitStatus {\n     }\n \n     fn exited(&self) -> bool {\n-        // On Linux-like OSes this function is safe, on others it is not. See\n-        // libc issue: https://github.com/rust-lang/libc/issues/1888.\n-        #[cfg_attr(\n-            any(target_os = \"linux\", target_os = \"android\", target_os = \"emscripten\"),\n-            allow(unused_unsafe)\n-        )]\n-        unsafe {\n-            libc::WIFEXITED(self.0)\n-        }\n+        libc::WIFEXITED(self.0)\n     }\n \n     pub fn success(&self) -> bool {\n         self.code() == Some(0)\n     }\n \n     pub fn code(&self) -> Option<i32> {\n-        // On Linux-like OSes this function is safe, on others it is not. See\n-        // libc issue: https://github.com/rust-lang/libc/issues/1888.\n-        #[cfg_attr(\n-            any(target_os = \"linux\", target_os = \"android\", target_os = \"emscripten\"),\n-            allow(unused_unsafe)\n-        )]\n-        if self.exited() { Some(unsafe { libc::WEXITSTATUS(self.0) }) } else { None }\n+        if self.exited() { Some(libc::WEXITSTATUS(self.0)) } else { None }\n     }\n \n     pub fn signal(&self) -> Option<i32> {\n-        // On Linux-like OSes this function is safe, on others it is not. See\n-        // libc issue: https://github.com/rust-lang/libc/issues/1888.\n-        #[cfg_attr(\n-            any(target_os = \"linux\", target_os = \"android\", target_os = \"emscripten\"),\n-            allow(unused_unsafe)\n-        )]\n-        if !self.exited() { Some(unsafe { libc::WTERMSIG(self.0) }) } else { None }\n+        if !self.exited() { Some(libc::WTERMSIG(self.0)) } else { None }\n     }\n }\n "}, {"sha": "7138d0c8fea6d4713aacf5c6c042cf5ebb34210c", "filename": "library/unwind/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98edd1fbf8a68977a2a7c1312eb1ebff80515a92/library%2Funwind%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/98edd1fbf8a68977a2a7c1312eb1ebff80515a92/library%2Funwind%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Funwind%2FCargo.toml?ref=98edd1fbf8a68977a2a7c1312eb1ebff80515a92", "patch": "@@ -14,7 +14,7 @@ doc = false\n \n [dependencies]\n core = { path = \"../core\" }\n-libc = { version = \"0.2.51\", features = ['rustc-dep-of-std'], default-features = false }\n+libc = { version = \"0.2.79\", features = ['rustc-dep-of-std'], default-features = false }\n compiler_builtins = \"0.1.0\"\n cfg-if = \"0.1.8\"\n "}, {"sha": "24bcd40c3a8eee89af9fe84691754af102debe56", "filename": "library/unwind/build.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98edd1fbf8a68977a2a7c1312eb1ebff80515a92/library%2Funwind%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98edd1fbf8a68977a2a7c1312eb1ebff80515a92/library%2Funwind%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Funwind%2Fbuild.rs?ref=98edd1fbf8a68977a2a7c1312eb1ebff80515a92", "patch": "@@ -12,11 +12,9 @@ fn main() {\n     } else if target.contains(\"x86_64-fortanix-unknown-sgx\") {\n         llvm_libunwind::compile();\n     } else if target.contains(\"linux\") {\n+        // linking for Linux is handled in lib.rs\n         if target.contains(\"musl\") {\n-            // linking for musl is handled in lib.rs\n             llvm_libunwind::compile();\n-        } else if !target.contains(\"android\") {\n-            println!(\"cargo:rustc-link-lib=gcc_s\");\n         }\n     } else if target.contains(\"freebsd\") {\n         println!(\"cargo:rustc-link-lib=gcc_s\");"}, {"sha": "e7fa37bc9db19762fd1d71420cfe0087228bbb60", "filename": "library/unwind/src/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/98edd1fbf8a68977a2a7c1312eb1ebff80515a92/library%2Funwind%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98edd1fbf8a68977a2a7c1312eb1ebff80515a92/library%2Funwind%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Funwind%2Fsrc%2Flib.rs?ref=98edd1fbf8a68977a2a7c1312eb1ebff80515a92", "patch": "@@ -42,6 +42,13 @@ cfg_if::cfg_if! {\n #[link(name = \"gcc_s\", cfg(not(target_feature = \"crt-static\")))]\n extern \"C\" {}\n \n+// When building with crt-static, we get `gcc_eh` from the `libc` crate, since\n+// glibc needs it, and needs it listed later on the linker command line. We\n+// don't want to duplicate it here.\n+#[cfg(all(target_os = \"linux\", target_env = \"gnu\", not(feature = \"llvm-libunwind\")))]\n+#[link(name = \"gcc_s\", cfg(not(target_feature = \"crt-static\")))]\n+extern \"C\" {}\n+\n #[cfg(target_os = \"redox\")]\n #[link(name = \"gcc_eh\", kind = \"static-nobundle\", cfg(target_feature = \"crt-static\"))]\n #[link(name = \"gcc_s\", cfg(not(target_feature = \"crt-static\")))]"}]}