{"sha": "f6c2816f4779eae60e9d2eb12f72b6450c789864", "node_id": "C_kwDOAAsO6NoAKGY2YzI4MTZmNDc3OWVhZTYwZTlkMmViMTJmNzJiNjQ1MGM3ODk4NjQ", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-08-14T12:17:53Z"}, "committer": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-08-14T14:00:17Z"}, "message": "Add tests for the drop behavior of some control flow constructs\n\nIn #100513 it was shown that the drop behavior of let_chains is not correct\ncurrently. Since drop behavior is something pretty subtle, this adds\nexplicit tests for the drop behavior of `if`, `if let` and `match` to\nmake sure that it does not regress in the future.\n\nThe `println!`s were left in to make debugging easier in case something\ngoes wrong, but they are not required for the test.", "tree": {"sha": "fb4987e4a96db0cbbec94679bc27f7bbe8776c0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb4987e4a96db0cbbec94679bc27f7bbe8776c0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6c2816f4779eae60e9d2eb12f72b6450c789864", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6c2816f4779eae60e9d2eb12f72b6450c789864", "html_url": "https://github.com/rust-lang/rust/commit/f6c2816f4779eae60e9d2eb12f72b6450c789864", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6c2816f4779eae60e9d2eb12f72b6450c789864/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fbc08e2ce64dee45a29cb6133da6b32366268aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fbc08e2ce64dee45a29cb6133da6b32366268aa", "html_url": "https://github.com/rust-lang/rust/commit/2fbc08e2ce64dee45a29cb6133da6b32366268aa"}], "stats": {"total": 145, "additions": 145, "deletions": 0}, "files": [{"sha": "e42150dcc09d289a7d366504709af51233004b36", "filename": "src/test/ui/drop/drop_order.rs", "status": "added", "additions": 145, "deletions": 0, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/f6c2816f4779eae60e9d2eb12f72b6450c789864/src%2Ftest%2Fui%2Fdrop%2Fdrop_order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6c2816f4779eae60e9d2eb12f72b6450c789864/src%2Ftest%2Fui%2Fdrop%2Fdrop_order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fdrop_order.rs?ref=f6c2816f4779eae60e9d2eb12f72b6450c789864", "patch": "@@ -0,0 +1,145 @@\n+// run-pass\n+\n+use std::cell::RefCell;\n+use std::convert::TryInto;\n+\n+#[derive(Default)]\n+struct DropOrderCollector(RefCell<Vec<u32>>);\n+\n+struct LoudDrop<'a>(&'a DropOrderCollector, u32);\n+\n+impl Drop for LoudDrop<'_> {\n+    fn drop(&mut self) {\n+        println!(\"{}\", self.1);\n+        self.0.0.borrow_mut().push(self.1);\n+    }\n+}\n+\n+impl DropOrderCollector {\n+    fn option_loud_drop(&self, n: u32) -> Option<LoudDrop> {\n+        Some(LoudDrop(self, n))\n+    }\n+\n+    fn loud_drop(&self, n: u32) -> LoudDrop {\n+        LoudDrop(self, n)\n+    }\n+\n+    fn print(&self, n: u32) {\n+        println!(\"{}\", n);\n+        self.0.borrow_mut().push(n)\n+    }\n+\n+    fn if_(&self) {\n+        if self.option_loud_drop(1).is_some() {\n+            self.print(2);\n+        }\n+\n+        if self.option_loud_drop(3).is_none() {\n+            unreachable!();\n+        } else if self.option_loud_drop(4).is_some() {\n+            self.print(5);\n+        }\n+\n+        if {\n+            if self.option_loud_drop(7).is_some() && self.option_loud_drop(6).is_some() {\n+                self.loud_drop(8);\n+                true\n+            } else {\n+                false\n+            }\n+        } {\n+            self.print(9);\n+        }\n+    }\n+\n+    fn if_let(&self) {\n+        if let None = self.option_loud_drop(2) {\n+            unreachable!();\n+        } else {\n+            self.print(1);\n+        }\n+\n+        if let Some(_) = self.option_loud_drop(4) {\n+            self.print(3);\n+        }\n+\n+        if let Some(_d) = self.option_loud_drop(6) {\n+            self.print(5);\n+        }\n+    }\n+\n+    fn match_(&self) {\n+        match self.option_loud_drop(2) {\n+            _any => self.print(1),\n+        }\n+\n+        match self.option_loud_drop(4) {\n+            _ => self.print(3),\n+        }\n+\n+        match self.option_loud_drop(6) {\n+            Some(_) => self.print(5),\n+            _ => unreachable!(),\n+        }\n+\n+        match {\n+            let _ = self.loud_drop(7);\n+            let _d = self.loud_drop(9);\n+            self.print(8);\n+            ()\n+        } {\n+            () => self.print(10),\n+        }\n+\n+        match {\n+            match self.option_loud_drop(14) {\n+                _ => {\n+                    self.print(11);\n+                    self.option_loud_drop(13)\n+                }\n+            }\n+        } {\n+            _ => self.print(12),\n+        }\n+\n+        match {\n+            loop {\n+                break match self.option_loud_drop(16) {\n+                    _ => {\n+                        self.print(15);\n+                        self.option_loud_drop(18)\n+                    }\n+                };\n+            }\n+        } {\n+            _ => self.print(17),\n+        }\n+    }\n+\n+    fn assert_sorted(self) {\n+        assert!(\n+            self.0\n+                .into_inner()\n+                .into_iter()\n+                .enumerate()\n+                .all(|(idx, item)| idx + 1 == item.try_into().unwrap())\n+        );\n+    }\n+}\n+\n+fn main() {\n+    println!(\"-- if --\");\n+    let collector = DropOrderCollector::default();\n+    collector.if_();\n+    collector.assert_sorted();\n+\n+    println!(\"-- if let --\");\n+    let collector = DropOrderCollector::default();\n+    collector.if_let();\n+    collector.assert_sorted();\n+\n+    println!(\"-- match --\");\n+    let collector = DropOrderCollector::default();\n+    collector.match_();\n+    collector.assert_sorted();\n+}"}]}