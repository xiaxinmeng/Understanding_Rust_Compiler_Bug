{"sha": "39f39d5405b7e55eb08cb927e78686a5ce7377d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5ZjM5ZDU0MDViN2U1NWViMDhjYjkyN2U3ODY4NmE1Y2U3Mzc3ZDQ=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-01-01T16:43:24Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-01-03T19:28:46Z"}, "message": "match_like_matches_macro: strip refs in suggestion\n\nfixes #6503\n\nchangelog: match_like_matches_macro: strip refs in suggestion (#6503)", "tree": {"sha": "57521aad1e8682102b92b8096ef0b0cde7eb5c3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57521aad1e8682102b92b8096ef0b0cde7eb5c3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39f39d5405b7e55eb08cb927e78686a5ce7377d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39f39d5405b7e55eb08cb927e78686a5ce7377d4", "html_url": "https://github.com/rust-lang/rust/commit/39f39d5405b7e55eb08cb927e78686a5ce7377d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39f39d5405b7e55eb08cb927e78686a5ce7377d4/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a02806e00d24f0fcb3e1f285ad9c25ed52ed7c8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a02806e00d24f0fcb3e1f285ad9c25ed52ed7c8c", "html_url": "https://github.com/rust-lang/rust/commit/a02806e00d24f0fcb3e1f285ad9c25ed52ed7c8c"}], "stats": {"total": 204, "additions": 202, "deletions": 2}, "files": [{"sha": "6372cb86616ec07c12cfb615f24df935b070fc0d", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/39f39d5405b7e55eb08cb927e78686a5ce7377d4/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f39d5405b7e55eb08cb927e78686a5ce7377d4/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=39f39d5405b7e55eb08cb927e78686a5ce7377d4", "patch": "@@ -1185,6 +1185,14 @@ fn find_matches_sugg(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>], expr\n             } else {\n                 pat\n             };\n+\n+            // strip potential borrows (#6503), but only if the type is a reference\n+            let mut ex_new = ex;\n+            if let ExprKind::AddrOf(BorrowKind::Ref, .., ex_inner) = ex.kind {\n+                if let ty::Ref(..) = cx.typeck_results().expr_ty(&ex_inner).kind() {\n+                    ex_new = ex_inner;\n+                }\n+            };\n             span_lint_and_sugg(\n                 cx,\n                 MATCH_LIKE_MATCHES_MACRO,\n@@ -1194,7 +1202,7 @@ fn find_matches_sugg(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>], expr\n                 format!(\n                     \"{}matches!({}, {})\",\n                     if b0 { \"\" } else { \"!\" },\n-                    snippet_with_applicability(cx, ex.span, \"..\", &mut applicability),\n+                    snippet_with_applicability(cx, ex_new.span, \"..\", &mut applicability),\n                     pat_and_guard,\n                 ),\n                 applicability,"}, {"sha": "319299862a7003462cbaffe429edb6235c28f482", "filename": "tests/ui/match_expr_like_matches_macro.fixed", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/39f39d5405b7e55eb08cb927e78686a5ce7377d4/tests%2Fui%2Fmatch_expr_like_matches_macro.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/39f39d5405b7e55eb08cb927e78686a5ce7377d4/tests%2Fui%2Fmatch_expr_like_matches_macro.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_expr_like_matches_macro.fixed?ref=39f39d5405b7e55eb08cb927e78686a5ce7377d4", "patch": "@@ -99,4 +99,51 @@ fn main() {\n             _ => false,\n         };\n     }\n+\n+    {\n+        // should print \"z\" in suggestion (#6503)\n+        let z = &Some(3);\n+        let _z = matches!(z, Some(3));\n+    }\n+\n+    {\n+        // this could also print \"z\" in suggestion..?\n+        let z = Some(3);\n+        let _z = matches!(&z, Some(3));\n+    }\n+\n+    {\n+        enum AnEnum {\n+            X,\n+            Y,\n+        }\n+\n+        fn foo(_x: AnEnum) {}\n+\n+        fn main() {\n+            let z = AnEnum::X;\n+            // we can't remove the reference here!\n+            let _ = matches!(&z, AnEnum::X);\n+            foo(z);\n+        }\n+    }\n+\n+    {\n+        struct S(i32);\n+\n+        fn fun(_val: Option<S>) {}\n+        let val = Some(S(42));\n+        // we need the reference here because later val is consumed by fun()\n+        let _res = matches!(&val, &Some(ref _a));\n+        fun(val);\n+    }\n+\n+    {\n+        struct S(i32);\n+\n+        fn fun(_val: Option<S>) {}\n+        let val = Some(S(42));\n+        let _res = matches!(&val, &Some(ref _a));\n+        fun(val);\n+    }\n }"}, {"sha": "2ef6cf42387f6e5b5cd71d788fbabe4f8f7ac01d", "filename": "tests/ui/match_expr_like_matches_macro.rs", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/39f39d5405b7e55eb08cb927e78686a5ce7377d4/tests%2Fui%2Fmatch_expr_like_matches_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f39d5405b7e55eb08cb927e78686a5ce7377d4/tests%2Fui%2Fmatch_expr_like_matches_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_expr_like_matches_macro.rs?ref=39f39d5405b7e55eb08cb927e78686a5ce7377d4", "patch": "@@ -119,4 +119,66 @@ fn main() {\n             _ => false,\n         };\n     }\n+\n+    {\n+        // should print \"z\" in suggestion (#6503)\n+        let z = &Some(3);\n+        let _z = match &z {\n+            Some(3) => true,\n+            _ => false,\n+        };\n+    }\n+\n+    {\n+        // this could also print \"z\" in suggestion..?\n+        let z = Some(3);\n+        let _z = match &z {\n+            Some(3) => true,\n+            _ => false,\n+        };\n+    }\n+\n+    {\n+        enum AnEnum {\n+            X,\n+            Y,\n+        }\n+\n+        fn foo(_x: AnEnum) {}\n+\n+        fn main() {\n+            let z = AnEnum::X;\n+            // we can't remove the reference here!\n+            let _ = match &z {\n+                AnEnum::X => true,\n+                _ => false,\n+            };\n+            foo(z);\n+        }\n+    }\n+\n+    {\n+        struct S(i32);\n+\n+        fn fun(_val: Option<S>) {}\n+        let val = Some(S(42));\n+        // we need the reference here because later val is consumed by fun()\n+        let _res = match &val {\n+            &Some(ref _a) => true,\n+            _ => false,\n+        };\n+        fun(val);\n+    }\n+\n+    {\n+        struct S(i32);\n+\n+        fn fun(_val: Option<S>) {}\n+        let val = Some(S(42));\n+        let _res = match &val {\n+            &Some(ref _a) => true,\n+            _ => false,\n+        };\n+        fun(val);\n+    }\n }"}, {"sha": "f27b4e9cb20b11786aec24c4066c147e3a51350c", "filename": "tests/ui/match_expr_like_matches_macro.stderr", "status": "modified", "additions": 84, "deletions": 1, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/39f39d5405b7e55eb08cb927e78686a5ce7377d4/tests%2Fui%2Fmatch_expr_like_matches_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f39d5405b7e55eb08cb927e78686a5ce7377d4/tests%2Fui%2Fmatch_expr_like_matches_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_expr_like_matches_macro.stderr?ref=39f39d5405b7e55eb08cb927e78686a5ce7377d4", "patch": "@@ -70,5 +70,88 @@ LL | |             _ => true,\n LL | |         };\n    | |_________^ help: try this: `!matches!(x, E::B(_) | E::C)`\n \n-error: aborting due to 7 previous errors\n+error: match expression looks like `matches!` macro\n+  --> $DIR/match_expr_like_matches_macro.rs:126:18\n+   |\n+LL |           let _z = match &z {\n+   |  __________________^\n+LL | |             Some(3) => true,\n+LL | |             _ => false,\n+LL | |         };\n+   | |_________^ help: try this: `matches!(z, Some(3))`\n+\n+error: match expression looks like `matches!` macro\n+  --> $DIR/match_expr_like_matches_macro.rs:135:18\n+   |\n+LL |           let _z = match &z {\n+   |  __________________^\n+LL | |             Some(3) => true,\n+LL | |             _ => false,\n+LL | |         };\n+   | |_________^ help: try this: `matches!(&z, Some(3))`\n+\n+error: match expression looks like `matches!` macro\n+  --> $DIR/match_expr_like_matches_macro.rs:152:21\n+   |\n+LL |               let _ = match &z {\n+   |  _____________________^\n+LL | |                 AnEnum::X => true,\n+LL | |                 _ => false,\n+LL | |             };\n+   | |_____________^ help: try this: `matches!(&z, AnEnum::X)`\n+\n+error: match expression looks like `matches!` macro\n+  --> $DIR/match_expr_like_matches_macro.rs:166:20\n+   |\n+LL |           let _res = match &val {\n+   |  ____________________^\n+LL | |             &Some(ref _a) => true,\n+LL | |             _ => false,\n+LL | |         };\n+   | |_________^ help: try this: `matches!(&val, &Some(ref _a))`\n+\n+error: you don't need to add `&` to both the expression and the patterns\n+  --> $DIR/match_expr_like_matches_macro.rs:166:20\n+   |\n+LL |           let _res = match &val {\n+   |  ____________________^\n+LL | |             &Some(ref _a) => true,\n+LL | |             _ => false,\n+LL | |         };\n+   | |_________^\n+   |\n+   = note: `-D clippy::match-ref-pats` implied by `-D warnings`\n+help: try\n+   |\n+LL |         let _res = match val {\n+LL |             Some(ref _a) => true,\n+   |\n+\n+error: match expression looks like `matches!` macro\n+  --> $DIR/match_expr_like_matches_macro.rs:178:20\n+   |\n+LL |           let _res = match &val {\n+   |  ____________________^\n+LL | |             &Some(ref _a) => true,\n+LL | |             _ => false,\n+LL | |         };\n+   | |_________^ help: try this: `matches!(&val, &Some(ref _a))`\n+\n+error: you don't need to add `&` to both the expression and the patterns\n+  --> $DIR/match_expr_like_matches_macro.rs:178:20\n+   |\n+LL |           let _res = match &val {\n+   |  ____________________^\n+LL | |             &Some(ref _a) => true,\n+LL | |             _ => false,\n+LL | |         };\n+   | |_________^\n+   |\n+help: try\n+   |\n+LL |         let _res = match val {\n+LL |             Some(ref _a) => true,\n+   |\n+\n+error: aborting due to 14 previous errors\n "}]}