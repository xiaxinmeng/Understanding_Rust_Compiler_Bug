{"sha": "98957f4e6f66469310072dff5dfc3e521a7cd555", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4OTU3ZjRlNmY2NjQ2OTMxMDA3MmRmZjVkZmMzZTUyMWE3Y2Q1NTU=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-01-06T00:00:34Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-01-06T00:13:31Z"}, "message": "Add fn signature query", "tree": {"sha": "8c8075dcc234c3548f63bfb74fbc9d5806933c14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c8075dcc234c3548f63bfb74fbc9d5806933c14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98957f4e6f66469310072dff5dfc3e521a7cd555", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98957f4e6f66469310072dff5dfc3e521a7cd555", "html_url": "https://github.com/rust-lang/rust/commit/98957f4e6f66469310072dff5dfc3e521a7cd555", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98957f4e6f66469310072dff5dfc3e521a7cd555/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5a6cf815372150ad40dee995b7b89f29e701427", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5a6cf815372150ad40dee995b7b89f29e701427", "html_url": "https://github.com/rust-lang/rust/commit/e5a6cf815372150ad40dee995b7b89f29e701427"}], "stats": {"total": 93, "additions": 86, "deletions": 7}, "files": [{"sha": "1709be5cf4b085c6aa9656bfeed712ae15a36d5c", "filename": "crates/ra_analysis/src/db.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98957f4e6f66469310072dff5dfc3e521a7cd555/crates%2Fra_analysis%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98957f4e6f66469310072dff5dfc3e521a7cd555/crates%2Fra_analysis%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdb.rs?ref=98957f4e6f66469310072dff5dfc3e521a7cd555", "patch": "@@ -108,6 +108,7 @@ salsa::database_storage! {\n             fn impls_in_module() for hir::db::ImplsInModuleQuery;\n             fn body_hir() for hir::db::BodyHirQuery;\n             fn body_syntax_mapping() for hir::db::BodySyntaxMappingQuery;\n+            fn fn_signature() for hir::db::FnSignatureQuery;\n         }\n     }\n }"}, {"sha": "96a3c60b9e85b0f86941e552b54fd63510c7578f", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/98957f4e6f66469310072dff5dfc3e521a7cd555/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98957f4e6f66469310072dff5dfc3e521a7cd555/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=98957f4e6f66469310072dff5dfc3e521a7cd555", "patch": "@@ -7,7 +7,7 @@ use crate::{\n     DefLoc, DefId, MacroCallLoc, MacroCallId, Name, HirFileId,\n     SourceFileItems, SourceItemId,\n     query_definitions,\n-    FnScopes,\n+    FnSignature, FnScopes,\n     macros::MacroExpansion,\n     module::{ModuleId, ModuleTree, ModuleSource,\n     nameres::{ItemMap, InputModuleItems}},\n@@ -103,6 +103,11 @@ pub trait HirDatabase: SyntaxDatabase\n         type BodySyntaxMappingQuery;\n         use fn crate::expr::body_syntax_mapping;\n     }\n+\n+    fn fn_signature(def_id: DefId) -> Arc<FnSignature> {\n+        type FnSignatureQuery;\n+        use fn crate::function::fn_signature;\n+    }\n }\n \n }"}, {"sha": "4627be071f12efac54f46a4443a70a6fe6f4af91", "filename": "crates/ra_hir/src/function.rs", "status": "modified", "additions": 59, "deletions": 1, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/98957f4e6f66469310072dff5dfc3e521a7cd555/crates%2Fra_hir%2Fsrc%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98957f4e6f66469310072dff5dfc3e521a7cd555/crates%2Fra_hir%2Fsrc%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffunction.rs?ref=98957f4e6f66469310072dff5dfc3e521a7cd555", "patch": "@@ -11,7 +11,7 @@ use ra_syntax::{\n     ast::{self, AstNode, DocCommentsOwner, NameOwner},\n };\n \n-use crate::{DefId, DefKind, HirDatabase, ty::InferenceResult, Module, Crate, impl_block::ImplBlock, expr::{Body, BodySyntaxMapping}};\n+use crate::{DefId, DefKind, HirDatabase, ty::InferenceResult, Module, Crate, impl_block::ImplBlock, expr::{Body, BodySyntaxMapping}, type_ref::{TypeRef, Mutability}, Name};\n \n pub use self::scope::{FnScopes, ScopesWithSyntaxMapping};\n \n@@ -53,6 +53,10 @@ impl Function {\n         })\n     }\n \n+    pub fn signature(&self, db: &impl HirDatabase) -> Arc<FnSignature> {\n+        db.fn_signature(self.def_id)\n+    }\n+\n     pub fn signature_info(&self, db: &impl HirDatabase) -> Option<FnSignatureInfo> {\n         let syntax = self.syntax(db);\n         FnSignatureInfo::new(syntax.borrowed())\n@@ -76,6 +80,60 @@ impl Function {\n     }\n }\n \n+/// The declared signature of a function.\n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub struct FnSignature {\n+    args: Vec<TypeRef>,\n+    ret_type: TypeRef,\n+}\n+\n+impl FnSignature {\n+    pub fn args(&self) -> &[TypeRef] {\n+        &self.args\n+    }\n+\n+    pub fn ret_type(&self) -> &TypeRef {\n+        &self.ret_type\n+    }\n+}\n+\n+pub(crate) fn fn_signature(db: &impl HirDatabase, def_id: DefId) -> Arc<FnSignature> {\n+    let func = Function::new(def_id);\n+    let syntax = func.syntax(db);\n+    let node = syntax.borrowed();\n+    let mut args = Vec::new();\n+    if let Some(param_list) = node.param_list() {\n+        if let Some(self_param) = param_list.self_param() {\n+            let self_type = if let Some(type_ref) = self_param.type_ref() {\n+                TypeRef::from_ast(type_ref)\n+            } else {\n+                let self_type = TypeRef::Path(Name::self_type().into());\n+                match self_param.flavor() {\n+                    ast::SelfParamFlavor::Owned => self_type,\n+                    ast::SelfParamFlavor::Ref => {\n+                        TypeRef::Reference(Box::new(self_type), Mutability::Shared)\n+                    }\n+                    ast::SelfParamFlavor::MutRef => {\n+                        TypeRef::Reference(Box::new(self_type), Mutability::Mut)\n+                    }\n+                }\n+            };\n+            args.push(self_type);\n+        }\n+        for param in param_list.params() {\n+            let type_ref = TypeRef::from_ast_opt(param.type_ref());\n+            args.push(type_ref);\n+        }\n+    }\n+    let ret_type = if let Some(type_ref) = node.ret_type().and_then(|rt| rt.type_ref()) {\n+        TypeRef::from_ast(type_ref)\n+    } else {\n+        TypeRef::unit()\n+    };\n+    let sig = FnSignature { args, ret_type };\n+    Arc::new(sig)\n+}\n+\n #[derive(Debug, Clone)]\n pub struct FnSignatureInfo {\n     pub name: String,"}, {"sha": "d600b91df3184a1974fb4a9414d25b519b0ec9b6", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98957f4e6f66469310072dff5dfc3e521a7cd555/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98957f4e6f66469310072dff5dfc3e521a7cd555/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=98957f4e6f66469310072dff5dfc3e521a7cd555", "patch": "@@ -47,7 +47,7 @@ pub use self::{\n     ids::{HirFileId, DefId, DefLoc, MacroCallId, MacroCallLoc},\n     macros::{MacroDef, MacroInput, MacroExpansion},\n     module::{Module, ModuleId, Problem, nameres::{ItemMap, PerNs, Namespace}, ModuleScope, Resolution},\n-    function::{Function, FnScopes, ScopesWithSyntaxMapping},\n+    function::{Function, FnSignature, FnScopes, ScopesWithSyntaxMapping},\n     adt::{Struct, Enum},\n     ty::Ty,\n     impl_block::{ImplBlock, ImplItem},"}, {"sha": "8d176662cd13e27786f019333dfed4e4b04fc86a", "filename": "crates/ra_hir/src/mock.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98957f4e6f66469310072dff5dfc3e521a7cd555/crates%2Fra_hir%2Fsrc%2Fmock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98957f4e6f66469310072dff5dfc3e521a7cd555/crates%2Fra_hir%2Fsrc%2Fmock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmock.rs?ref=98957f4e6f66469310072dff5dfc3e521a7cd555", "patch": "@@ -210,6 +210,7 @@ salsa::database_storage! {\n             fn impls_in_module() for db::ImplsInModuleQuery;\n             fn body_hir() for db::BodyHirQuery;\n             fn body_syntax_mapping() for db::BodySyntaxMappingQuery;\n+            fn fn_signature() for db::FnSignatureQuery;\n         }\n     }\n }"}, {"sha": "90229bc5404e072000d2492efe45ea8ac6c50d76", "filename": "crates/ra_hir/src/name.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98957f4e6f66469310072dff5dfc3e521a7cd555/crates%2Fra_hir%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98957f4e6f66469310072dff5dfc3e521a7cd555/crates%2Fra_hir%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fname.rs?ref=98957f4e6f66469310072dff5dfc3e521a7cd555", "patch": "@@ -35,6 +35,10 @@ impl Name {\n         Name::new(\"self\".into())\n     }\n \n+    pub(crate) fn self_type() -> Name {\n+        Name::new(\"Self\".into())\n+    }\n+\n     pub(crate) fn tuple_field_name(idx: usize) -> Name {\n         Name::new(idx.to_string().into())\n     }"}, {"sha": "dcf4cf8b651e89f943c30b3245b166e1a7583639", "filename": "crates/ra_hir/src/path.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/98957f4e6f66469310072dff5dfc3e521a7cd555/crates%2Fra_hir%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98957f4e6f66469310072dff5dfc3e521a7cd555/crates%2Fra_hir%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fpath.rs?ref=98957f4e6f66469310072dff5dfc3e521a7cd555", "patch": "@@ -67,10 +67,7 @@ impl Path {\n \n     /// Converts an `ast::NameRef` into a single-identifier `Path`.\n     pub fn from_name_ref(name_ref: ast::NameRef) -> Path {\n-        Path {\n-            kind: PathKind::Plain,\n-            segments: vec![name_ref.as_name()],\n-        }\n+        name_ref.as_name().into()\n     }\n \n     /// `true` is this path is a single identifier, like `foo`\n@@ -92,6 +89,15 @@ impl Path {\n     }\n }\n \n+impl From<Name> for Path {\n+    fn from(name: Name) -> Path {\n+        Path {\n+            kind: PathKind::Plain,\n+            segments: vec![name],\n+        }\n+    }\n+}\n+\n fn expand_use_tree(\n     prefix: Option<Path>,\n     tree: ast::UseTree,"}, {"sha": "859f330c246c6ae81bf66fa8472cf6230482ecab", "filename": "crates/ra_hir/src/type_ref.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98957f4e6f66469310072dff5dfc3e521a7cd555/crates%2Fra_hir%2Fsrc%2Ftype_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98957f4e6f66469310072dff5dfc3e521a7cd555/crates%2Fra_hir%2Fsrc%2Ftype_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ftype_ref.rs?ref=98957f4e6f66469310072dff5dfc3e521a7cd555", "patch": "@@ -107,4 +107,8 @@ impl TypeRef {\n             TypeRef::Error\n         }\n     }\n+\n+    pub fn unit() -> TypeRef {\n+        TypeRef::Tuple(Vec::new())\n+    }\n }"}]}