{"sha": "810e0151afe652ab4c8310543f9bcd5463eb8d2f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxMGUwMTUxYWZlNjUyYWI0YzgzMTA1NDNmOWJjZDU0NjNlYjhkMmY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-04-18T09:57:39Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-04-18T11:08:40Z"}, "message": "convert calls to `visit_all_item_likes_in_krate`\n\nWe no longer need to track the tasks in these cases since these\nparticular tasks have no outputs (except, potentially, errors...)  and\nthey always execute.", "tree": {"sha": "78edd6bd94402765584bf7c51c71d3762ce86b3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78edd6bd94402765584bf7c51c71d3762ce86b3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/810e0151afe652ab4c8310543f9bcd5463eb8d2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/810e0151afe652ab4c8310543f9bcd5463eb8d2f", "html_url": "https://github.com/rust-lang/rust/commit/810e0151afe652ab4c8310543f9bcd5463eb8d2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/810e0151afe652ab4c8310543f9bcd5463eb8d2f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e621e1c73f1487b4450446eafe6ccad3a99e3cd8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e621e1c73f1487b4450446eafe6ccad3a99e3cd8", "html_url": "https://github.com/rust-lang/rust/commit/e621e1c73f1487b4450446eafe6ccad3a99e3cd8"}], "stats": {"total": 117, "additions": 21, "deletions": 96}, "files": [{"sha": "dfec80aafcd6c21265d10ecc3a4fbfa6ed603993", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/810e0151afe652ab4c8310543f9bcd5463eb8d2f/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/810e0151afe652ab4c8310543f9bcd5463eb8d2f/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=810e0151afe652ab4c8310543f9bcd5463eb8d2f", "patch": "@@ -61,8 +61,6 @@ pub enum DepNode<D: Clone + Debug> {\n     RegionResolveCrate,\n     PluginRegistrar,\n     StabilityIndex,\n-    CollectItem(D),\n-    CollectItemSig(D),\n     Coherence,\n     Resolve,\n     EntryPoint,\n@@ -71,15 +69,9 @@ pub enum DepNode<D: Clone + Debug> {\n     CoherenceCheckImpl(D),\n     CoherenceOverlapCheck(D),\n     CoherenceOverlapCheckSpecial(D),\n-    CoherenceOrphanCheck(D),\n     Variance,\n-    WfCheck(D),\n-    TypeckItemType(D),\n     UnusedTraitCheck,\n-    CheckConst(D),\n     PrivacyAccessLevels(CrateNum),\n-    IntrinsicCheck(D),\n-    MatchCheck(D),\n \n     // Represents the MIR for a fn; also used as the task node for\n     // things read/modify that MIR.\n@@ -92,7 +84,6 @@ pub enum DepNode<D: Clone + Debug> {\n     RvalueCheck(D),\n     Reachability,\n     DeadCheck,\n-    StabilityCheck(D),\n     LateLintCheck,\n     TransCrate,\n     TransCrateItem(D),\n@@ -184,12 +175,10 @@ impl<D: Clone + Debug> DepNode<D> {\n         }\n \n         check! {\n-            CollectItem,\n             BorrowCheck,\n             Hir,\n             HirBody,\n             TransCrateItem,\n-            TypeckItemType,\n             AssociatedItems,\n             ItemSignature,\n             AssociatedItemDefIds,\n@@ -237,26 +226,17 @@ impl<D: Clone + Debug> DepNode<D> {\n             Hir(ref d) => op(d).map(Hir),\n             HirBody(ref d) => op(d).map(HirBody),\n             MetaData(ref d) => op(d).map(MetaData),\n-            CollectItem(ref d) => op(d).map(CollectItem),\n-            CollectItemSig(ref d) => op(d).map(CollectItemSig),\n             CoherenceCheckTrait(ref d) => op(d).map(CoherenceCheckTrait),\n             CoherenceCheckImpl(ref d) => op(d).map(CoherenceCheckImpl),\n             CoherenceOverlapCheck(ref d) => op(d).map(CoherenceOverlapCheck),\n             CoherenceOverlapCheckSpecial(ref d) => op(d).map(CoherenceOverlapCheckSpecial),\n-            CoherenceOrphanCheck(ref d) => op(d).map(CoherenceOrphanCheck),\n-            WfCheck(ref d) => op(d).map(WfCheck),\n-            TypeckItemType(ref d) => op(d).map(TypeckItemType),\n-            CheckConst(ref d) => op(d).map(CheckConst),\n-            IntrinsicCheck(ref d) => op(d).map(IntrinsicCheck),\n-            MatchCheck(ref d) => op(d).map(MatchCheck),\n             Mir(ref d) => op(d).map(Mir),\n             MirShim(ref def_ids) => {\n                 let def_ids: Option<Vec<E>> = def_ids.iter().map(op).collect();\n                 def_ids.map(MirShim)\n             }\n             BorrowCheck(ref d) => op(d).map(BorrowCheck),\n             RvalueCheck(ref d) => op(d).map(RvalueCheck),\n-            StabilityCheck(ref d) => op(d).map(StabilityCheck),\n             TransCrateItem(ref d) => op(d).map(TransCrateItem),\n             TransInlinedItem(ref d) => op(d).map(TransInlinedItem),\n             AssociatedItems(ref d) => op(d).map(AssociatedItems),"}, {"sha": "ecc0bb9fe497f2b70d87d188776cb00f7e470dfd", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/810e0151afe652ab4c8310543f9bcd5463eb8d2f/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/810e0151afe652ab4c8310543f9bcd5463eb8d2f/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=810e0151afe652ab4c8310543f9bcd5463eb8d2f", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use dep_graph::DepNode;\n use hir::def::Def;\n use hir::def_id::DefId;\n use infer::InferCtxt;\n@@ -25,7 +24,7 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let mut visitor = ItemVisitor {\n         tcx: tcx\n     };\n-    tcx.visit_all_item_likes_in_krate(DepNode::IntrinsicCheck, &mut visitor.as_deep_visitor());\n+    tcx.hir.krate().visit_all_item_likes(&mut visitor.as_deep_visitor());\n }\n \n struct ItemVisitor<'a, 'tcx: 'a> {"}, {"sha": "f618386c610bdde21c2b142787a95fb219ff81d0", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/810e0151afe652ab4c8310543f9bcd5463eb8d2f/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/810e0151afe652ab4c8310543f9bcd5463eb8d2f/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=810e0151afe652ab4c8310543f9bcd5463eb8d2f", "patch": "@@ -424,7 +424,7 @@ impl<'a, 'tcx> Index<'tcx> {\n /// features and possibly prints errors.\n pub fn check_unstable_api_usage<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let mut checker = Checker { tcx: tcx };\n-    tcx.visit_all_item_likes_in_krate(DepNode::StabilityCheck, &mut checker.as_deep_visitor());\n+    tcx.hir.krate().visit_all_item_likes(&mut checker.as_deep_visitor());\n }\n \n struct Checker<'a, 'tcx: 'a> {"}, {"sha": "2e0afe789c62dbba3c9e6590f3be0666285372e7", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/810e0151afe652ab4c8310543f9bcd5463eb8d2f/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/810e0151afe652ab4c8310543f9bcd5463eb8d2f/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=810e0151afe652ab4c8310543f9bcd5463eb8d2f", "patch": "@@ -14,8 +14,6 @@ use _match::WitnessPreference::*;\n \n use pattern::{Pattern, PatternContext, PatternError, PatternKind};\n \n-use rustc::dep_graph::DepNode;\n-\n use rustc::middle::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor};\n use rustc::middle::expr_use_visitor::{LoanCause, MutateMode};\n use rustc::middle::expr_use_visitor as euv;\n@@ -56,8 +54,7 @@ impl<'a, 'tcx> Visitor<'tcx> for OuterVisitor<'a, 'tcx> {\n }\n \n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    tcx.visit_all_item_likes_in_krate(DepNode::MatchCheck,\n-                                      &mut OuterVisitor { tcx: tcx }.as_deep_visitor());\n+    tcx.hir.krate().visit_all_item_likes(&mut OuterVisitor { tcx: tcx }.as_deep_visitor());\n     tcx.sess.abort_if_errors();\n }\n "}, {"sha": "9dfe1a34c9ce03aa5a2ae0bf9eb74c7de4c6fb99", "filename": "src/librustc_mir/mir_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/810e0151afe652ab4c8310543f9bcd5463eb8d2f/src%2Flibrustc_mir%2Fmir_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/810e0151afe652ab4c8310543f9bcd5463eb8d2f/src%2Flibrustc_mir%2Fmir_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmir_map.rs?ref=810e0151afe652ab4c8310543f9bcd5463eb8d2f", "patch": "@@ -68,7 +68,7 @@ pub fn build_mir_for_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n                 NestedVisitorMap::None\n             }\n         }\n-        tcx.visit_all_item_likes_in_krate(DepNode::Mir, &mut GatherCtors {\n+        tcx.hir.krate().visit_all_item_likes(&mut GatherCtors {\n             tcx: tcx\n         }.as_deep_visitor());\n     }"}, {"sha": "2c4439f80a23906e250356a4a0d86729d90adfe6", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/810e0151afe652ab4c8310543f9bcd5463eb8d2f/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/810e0151afe652ab4c8310543f9bcd5463eb8d2f/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=810e0151afe652ab4c8310543f9bcd5463eb8d2f", "patch": "@@ -24,7 +24,6 @@\n // - It's not possible to take the address of a static item with unsafe interior. This is enforced\n // by borrowck::gather_loans\n \n-use rustc::dep_graph::DepNode;\n use rustc::ty::cast::CastKind;\n use rustc_const_eval::ConstContext;\n use rustc::middle::const_val::ConstEvalErr;\n@@ -459,15 +458,14 @@ fn check_adjustments<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>, e: &hir::Exp\n }\n \n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    tcx.visit_all_item_likes_in_krate(DepNode::CheckConst,\n-                                      &mut CheckCrateVisitor {\n-                                          tcx: tcx,\n-                                          tables: &ty::TypeckTables::empty(),\n-                                          in_fn: false,\n-                                          promotable: false,\n-                                          mut_rvalue_borrows: NodeSet(),\n-                                          param_env: tcx.empty_parameter_environment(),\n-                                      }.as_deep_visitor());\n+    tcx.hir.krate().visit_all_item_likes(&mut CheckCrateVisitor {\n+        tcx: tcx,\n+        tables: &ty::TypeckTables::empty(),\n+        in_fn: false,\n+        promotable: false,\n+        mut_rvalue_borrows: NodeSet(),\n+        param_env: tcx.empty_parameter_environment(),\n+    }.as_deep_visitor());\n     tcx.sess.abort_if_errors();\n }\n "}, {"sha": "32aeeeb110556804c12f3287f0f8b35cb3d5941a", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/810e0151afe652ab4c8310543f9bcd5463eb8d2f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/810e0151afe652ab4c8310543f9bcd5463eb8d2f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=810e0151afe652ab4c8310543f9bcd5463eb8d2f", "patch": "@@ -82,7 +82,6 @@ pub use self::compare_method::{compare_impl_method, compare_const_impl};\n use self::TupleArgumentsFlag::*;\n \n use astconv::AstConv;\n-use dep_graph::DepNode;\n use fmt_macros::{Parser, Piece, Position};\n use hir::def::{Def, CtorKind};\n use hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n@@ -577,14 +576,13 @@ impl<'a, 'tcx> ItemLikeVisitor<'tcx> for CheckItemTypesVisitor<'a, 'tcx> {\n pub fn check_wf_new<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> CompileResult {\n     tcx.sess.track_errors(|| {\n         let mut visit = wfcheck::CheckTypeWellFormedVisitor::new(tcx);\n-        tcx.visit_all_item_likes_in_krate(DepNode::WfCheck, &mut visit.as_deep_visitor());\n+        tcx.hir.krate().visit_all_item_likes(&mut visit.as_deep_visitor());\n     })\n }\n \n pub fn check_item_types<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> CompileResult {\n     tcx.sess.track_errors(|| {\n-        tcx.visit_all_item_likes_in_krate(DepNode::TypeckItemType,\n-                                          &mut CheckItemTypesVisitor { tcx });\n+        tcx.hir.krate().visit_all_item_likes(&mut CheckItemTypesVisitor { tcx });\n     })\n }\n "}, {"sha": "8ded3003c78eb312fa943f79f6f287d71156b5d8", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/810e0151afe652ab4c8310543f9bcd5463eb8d2f/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/810e0151afe652ab4c8310543f9bcd5463eb8d2f/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=810e0151afe652ab4c8310543f9bcd5463eb8d2f", "patch": "@@ -13,13 +13,12 @@\n \n use rustc::traits;\n use rustc::ty::{self, TyCtxt};\n-use rustc::dep_graph::DepNode;\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir;\n \n pub fn check<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let mut orphan = OrphanChecker { tcx: tcx };\n-    tcx.visit_all_item_likes_in_krate(DepNode::CoherenceOrphanCheck, &mut orphan);\n+    tcx.hir.krate().visit_all_item_likes(&mut orphan);\n }\n \n struct OrphanChecker<'cx, 'tcx: 'cx> {"}, {"sha": "74edc7bff495c24dfcbcd4ee2fdca0ef7eeb801f", "filename": "src/librustc_typeck/coherence/overlap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/810e0151afe652ab4c8310543f9bcd5463eb8d2f/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/810e0151afe652ab4c8310543f9bcd5463eb8d2f/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs?ref=810e0151afe652ab4c8310543f9bcd5463eb8d2f", "patch": "@@ -24,7 +24,7 @@ pub fn check_default_impls<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n \n     // this secondary walk specifically checks for some other cases,\n     // like defaulted traits, for which additional overlap rules exist\n-    tcx.visit_all_item_likes_in_krate(DepNode::CoherenceOverlapCheckSpecial, &mut overlap);\n+    tcx.hir.krate().visit_all_item_likes(&mut overlap);\n }\n \n pub fn check_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, node_id: ast::NodeId) {"}, {"sha": "af0ef279e4f0dfdc894524d9ea31fede68b117aa", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 4, "deletions": 49, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/810e0151afe652ab4c8310543f9bcd5463eb8d2f/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/810e0151afe652ab4c8310543f9bcd5463eb8d2f/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=810e0151afe652ab4c8310543f9bcd5463eb8d2f", "patch": "@@ -64,7 +64,6 @@ use rustc::ty::{ToPredicate, ReprOptions};\n use rustc::ty::{self, AdtKind, ToPolyTraitRef, Ty, TyCtxt};\n use rustc::ty::maps::Providers;\n use rustc::ty::util::IntTypeExt;\n-use rustc::dep_graph::DepNode;\n use util::nodemap::{NodeMap, FxHashMap};\n \n use rustc_const_math::ConstInt;\n@@ -87,7 +86,7 @@ use rustc::hir::def_id::DefId;\n \n pub fn collect_item_types<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let mut visitor = CollectItemTypesVisitor { tcx: tcx };\n-    tcx.visit_all_item_likes_in_krate(DepNode::CollectItem, &mut visitor.as_deep_visitor());\n+    tcx.hir.krate().visit_all_item_likes(&mut visitor.as_deep_visitor());\n }\n \n pub fn provide(providers: &mut Providers) {\n@@ -126,57 +125,13 @@ struct CollectItemTypesVisitor<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>\n }\n \n-impl<'a, 'tcx> CollectItemTypesVisitor<'a, 'tcx> {\n-    /// Collect item types is structured into two tasks. The outer\n-    /// task, `CollectItem`, walks the entire content of an item-like\n-    /// thing, including its body. It also spawns an inner task,\n-    /// `CollectItemSig`, which walks only the signature. This inner\n-    /// task is the one that writes the item-type into the various\n-    /// maps.  This setup ensures that the item body is never\n-    /// accessible to the task that computes its signature, so that\n-    /// changes to the body don't affect the signature.\n-    ///\n-    /// Consider an example function `foo` that also has a closure in its body:\n-    ///\n-    /// ```\n-    /// fn foo(<sig>) {\n-    ///     ...\n-    ///     let bar = || ...; // we'll label this closure as \"bar\" below\n-    /// }\n-    /// ```\n-    ///\n-    /// This results in a dep-graph like so. I've labeled the edges to\n-    /// document where they arise.\n-    ///\n-    /// ```\n-    /// [HirBody(foo)] -2--> [CollectItem(foo)] -4-> [ItemSignature(bar)]\n-    ///                       ^           ^\n-    ///                       1           3\n-    /// [Hir(foo)] -----------+-6-> [CollectItemSig(foo)] -5-> [ItemSignature(foo)]\n-    /// ```\n-    ///\n-    /// 1. This is added by the `visit_all_item_likes_in_krate`.\n-    /// 2. This is added when we fetch the item body.\n-    /// 3. This is added because `CollectItem` launches `CollectItemSig`.\n-    ///    - it is arguably false; if we refactor the `with_task` system;\n-    ///      we could get probably rid of it, but it is also harmless enough.\n-    /// 4. This is added by the code in `visit_expr` when we write to `item_types`.\n-    /// 5. This is added by the code in `convert_item` when we write to `item_types`;\n-    ///    note that this write occurs inside the `CollectItemSig` task.\n-    /// 6. Added by reads from within `op`.\n-    fn with_collect_item_sig(&self, id: ast::NodeId, op: fn(TyCtxt<'a, 'tcx, 'tcx>, ast::NodeId)) {\n-        let def_id = self.tcx.hir.local_def_id(id);\n-        self.tcx.dep_graph.with_task(DepNode::CollectItemSig(def_id), self.tcx, id, op);\n-    }\n-}\n-\n impl<'a, 'tcx> Visitor<'tcx> for CollectItemTypesVisitor<'a, 'tcx> {\n     fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n         NestedVisitorMap::OnlyBodies(&self.tcx.hir)\n     }\n \n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n-        self.with_collect_item_sig(item.id, convert_item);\n+        convert_item(self.tcx, item.id);\n         intravisit::walk_item(self, item);\n     }\n \n@@ -209,12 +164,12 @@ impl<'a, 'tcx> Visitor<'tcx> for CollectItemTypesVisitor<'a, 'tcx> {\n     }\n \n     fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem) {\n-        self.with_collect_item_sig(trait_item.id, convert_trait_item);\n+        convert_trait_item(self.tcx, trait_item.id);\n         intravisit::walk_trait_item(self, trait_item);\n     }\n \n     fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem) {\n-        self.with_collect_item_sig(impl_item.id, convert_impl_item);\n+        convert_impl_item(self.tcx, impl_item.id);\n         intravisit::walk_impl_item(self, impl_item);\n     }\n }"}, {"sha": "5751dc5ab8a0ab867a8500694ccb8bc09ead1f3f", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/810e0151afe652ab4c8310543f9bcd5463eb8d2f/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/810e0151afe652ab4c8310543f9bcd5463eb8d2f/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=810e0151afe652ab4c8310543f9bcd5463eb8d2f", "patch": "@@ -19,7 +19,6 @@\n //! fixed, but for the moment it's easier to do these checks early.\n \n use constrained_type_params as ctp;\n-use rustc::dep_graph::DepNode;\n use rustc::hir;\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir::def_id::DefId;\n@@ -63,7 +62,7 @@ pub fn impl_wf_check<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     // We will tag this as part of the WF check -- logically, it is,\n     // but it's one that we must perform earlier than the rest of\n     // WfCheck.\n-    tcx.visit_all_item_likes_in_krate(DepNode::WfCheck, &mut ImplWfCheck { tcx: tcx });\n+    tcx.hir.krate().visit_all_item_likes(&mut ImplWfCheck { tcx: tcx });\n }\n \n struct ImplWfCheck<'a, 'tcx: 'a> {"}]}