{"sha": "842448d3102f236401d6a2d176e39977efe91176", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0MjQ0OGQzMTAyZjIzNjQwMWQ2YTJkMTc2ZTM5OTc3ZWZlOTExNzY=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-01-31T18:28:15Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-02-11T21:53:51Z"}, "message": "Add newline between summary and stable version documentation", "tree": {"sha": "1d06b694f0e544f23cc50d7439cc63189f533565", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d06b694f0e544f23cc50d7439cc63189f533565"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/842448d3102f236401d6a2d176e39977efe91176", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/842448d3102f236401d6a2d176e39977efe91176", "html_url": "https://github.com/rust-lang/rust/commit/842448d3102f236401d6a2d176e39977efe91176", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/842448d3102f236401d6a2d176e39977efe91176/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c37061896e444392997b2a0a5607c20df9a52531", "url": "https://api.github.com/repos/rust-lang/rust/commits/c37061896e444392997b2a0a5607c20df9a52531", "html_url": "https://github.com/rust-lang/rust/commit/c37061896e444392997b2a0a5607c20df9a52531"}], "stats": {"total": 145, "additions": 144, "deletions": 1}, "files": [{"sha": "571ef2389a91b58f53f76447ac105c74c73f51ff", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 144, "deletions": 1, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/842448d3102f236401d6a2d176e39977efe91176/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/842448d3102f236401d6a2d176e39977efe91176/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=842448d3102f236401d6a2d176e39977efe91176", "patch": "@@ -68,6 +68,7 @@ extern \"rust-intrinsic\" {\n     // memory, which is not valid for either `&` or `&mut`.\n \n     /// Stores a value if the current value is the same as the `old` value.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `compare_exchange` method by passing\n     /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n@@ -77,6 +78,7 @@ extern \"rust-intrinsic\" {\n     /// [compare_exchange]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange\n     pub fn atomic_cxchg<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `compare_exchange` method by passing\n     /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n@@ -86,6 +88,7 @@ extern \"rust-intrinsic\" {\n     /// [compare_exchange]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange\n     pub fn atomic_cxchg_acq<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `compare_exchange` method by passing\n     /// [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n@@ -97,6 +100,7 @@ extern \"rust-intrinsic\" {\n     /// [compare_exchange]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange\n     pub fn atomic_cxchg_rel<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `compare_exchange` method by passing\n     /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n@@ -108,6 +112,7 @@ extern \"rust-intrinsic\" {\n     /// [compare_exchange]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange\n     pub fn atomic_cxchg_acqrel<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `compare_exchange` method by passing\n     /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n@@ -117,6 +122,7 @@ extern \"rust-intrinsic\" {\n     /// [compare_exchange]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange\n     pub fn atomic_cxchg_relaxed<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `compare_exchange` method by passing\n     /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n@@ -128,6 +134,7 @@ extern \"rust-intrinsic\" {\n     /// [compare_exchange]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange\n     pub fn atomic_cxchg_failrelaxed<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `compare_exchange` method by passing\n     /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n@@ -139,6 +146,7 @@ extern \"rust-intrinsic\" {\n     /// [compare_exchange]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange\n     pub fn atomic_cxchg_failacq<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `compare_exchange` method by passing\n     /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n@@ -150,6 +158,7 @@ extern \"rust-intrinsic\" {\n     /// [compare_exchange]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange\n     pub fn atomic_cxchg_acq_failrelaxed<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `compare_exchange` method by passing\n     /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n@@ -162,6 +171,7 @@ extern \"rust-intrinsic\" {\n     pub fn atomic_cxchg_acqrel_failrelaxed<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n \n     /// Stores a value if the current value is the same as the `old` value.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n     /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n@@ -171,6 +181,7 @@ extern \"rust-intrinsic\" {\n     /// [cew]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak\n     pub fn atomic_cxchgweak<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n     /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n@@ -180,6 +191,7 @@ extern \"rust-intrinsic\" {\n     /// [cew]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak\n     pub fn atomic_cxchgweak_acq<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n     /// [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n@@ -191,6 +203,7 @@ extern \"rust-intrinsic\" {\n     /// [cew]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak\n     pub fn atomic_cxchgweak_rel<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n     /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n@@ -202,6 +215,7 @@ extern \"rust-intrinsic\" {\n     /// [cew]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak\n     pub fn atomic_cxchgweak_acqrel<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n     /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n@@ -211,6 +225,7 @@ extern \"rust-intrinsic\" {\n     /// [cew]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak\n     pub fn atomic_cxchgweak_relaxed<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n     /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n@@ -222,6 +237,7 @@ extern \"rust-intrinsic\" {\n     /// [cew]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak\n     pub fn atomic_cxchgweak_failrelaxed<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n     /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n@@ -233,6 +249,7 @@ extern \"rust-intrinsic\" {\n     /// [cew]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak\n     pub fn atomic_cxchgweak_failacq<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n     /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n@@ -244,6 +261,7 @@ extern \"rust-intrinsic\" {\n     /// [cew]: ../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak\n     pub fn atomic_cxchgweak_acq_failrelaxed<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n     /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n@@ -256,20 +274,23 @@ extern \"rust-intrinsic\" {\n     pub fn atomic_cxchgweak_acqrel_failrelaxed<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n \n     /// Loads the current value of the pointer.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `load` method by passing\n     /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `order`. For example,\n     /// [`AtomicBool::load`](../../std/sync/atomic/struct.AtomicBool.html#method.load).\n     pub fn atomic_load<T>(src: *const T) -> T;\n     /// Loads the current value of the pointer.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `load` method by passing\n     /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `order`. For example,\n     /// [`AtomicBool::load`](../../std/sync/atomic/struct.AtomicBool.html#method.load).\n     pub fn atomic_load_acq<T>(src: *const T) -> T;\n     /// Loads the current value of the pointer.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `load` method by passing\n     /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n@@ -279,20 +300,23 @@ extern \"rust-intrinsic\" {\n     pub fn atomic_load_unordered<T>(src: *const T) -> T;\n \n     /// Stores the value at the specified memory location.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `store` method by passing\n     /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `order`. For example,\n     /// [`AtomicBool::store`](../../std/sync/atomic/struct.AtomicBool.html#method.store).\n     pub fn atomic_store<T>(dst: *mut T, val: T);\n     /// Stores the value at the specified memory location.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `store` method by passing\n     /// [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `order`. For example,\n     /// [`AtomicBool::store`](../../std/sync/atomic/struct.AtomicBool.html#method.store).\n     pub fn atomic_store_rel<T>(dst: *mut T, val: T);\n     /// Stores the value at the specified memory location.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `store` method by passing\n     /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n@@ -302,34 +326,39 @@ extern \"rust-intrinsic\" {\n     pub fn atomic_store_unordered<T>(dst: *mut T, val: T);\n \n     /// Stores the value at the specified memory location, returning the old value.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `swap` method by passing\n     /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `order`. For example,\n     /// [`AtomicBool::swap`](../../std/sync/atomic/struct.AtomicBool.html#method.swap).\n     pub fn atomic_xchg<T>(dst: *mut T, src: T) -> T;\n     /// Stores the value at the specified memory location, returning the old value.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `swap` method by passing\n     /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `order`. For example,\n     /// [`AtomicBool::swap`](../../std/sync/atomic/struct.AtomicBool.html#method.swap).\n     pub fn atomic_xchg_acq<T>(dst: *mut T, src: T) -> T;\n     /// Stores the value at the specified memory location, returning the old value.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `swap` method by passing\n     /// [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `order`. For example,\n     /// [`AtomicBool::swap`](../../std/sync/atomic/struct.AtomicBool.html#method.swap).\n     pub fn atomic_xchg_rel<T>(dst: *mut T, src: T) -> T;\n     /// Stores the value at the specified memory location, returning the old value.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `swap` method by passing\n     /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `order`. For example,\n     /// [`AtomicBool::swap`](../../std/sync/atomic/struct.AtomicBool.html#method.swap).\n     pub fn atomic_xchg_acqrel<T>(dst: *mut T, src: T) -> T;\n     /// Stores the value at the specified memory location, returning the old value.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `swap` method by passing\n     /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n@@ -338,34 +367,39 @@ extern \"rust-intrinsic\" {\n     pub fn atomic_xchg_relaxed<T>(dst: *mut T, src: T) -> T;\n \n     /// Adds to the current value, returning the previous value.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_add` method by passing\n     /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `order`. For example,\n     /// [`AtomicIsize::fetch_add`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_add).\n     pub fn atomic_xadd<T>(dst: *mut T, src: T) -> T;\n     /// Adds to the current value, returning the previous value.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_add` method by passing\n     /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `order`. For example,\n     /// [`AtomicIsize::fetch_add`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_add).\n     pub fn atomic_xadd_acq<T>(dst: *mut T, src: T) -> T;\n     /// Adds to the current value, returning the previous value.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_add` method by passing\n     /// [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `order`. For example,\n     /// [`AtomicIsize::fetch_add`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_add).\n     pub fn atomic_xadd_rel<T>(dst: *mut T, src: T) -> T;\n     /// Adds to the current value, returning the previous value.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_add` method by passing\n     /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `order`. For example,\n     /// [`AtomicIsize::fetch_add`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_add).\n     pub fn atomic_xadd_acqrel<T>(dst: *mut T, src: T) -> T;\n     /// Adds to the current value, returning the previous value.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_add` method by passing\n     /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n@@ -374,34 +408,39 @@ extern \"rust-intrinsic\" {\n     pub fn atomic_xadd_relaxed<T>(dst: *mut T, src: T) -> T;\n \n     /// Subtract from the current value, returning the previous value.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_sub` method by passing\n     /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `order`. For example,\n     /// [`AtomicIsize::fetch_sub`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_sub).\n     pub fn atomic_xsub<T>(dst: *mut T, src: T) -> T;\n     /// Subtract from the current value, returning the previous value.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_sub` method by passing\n     /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `order`. For example,\n     /// [`AtomicIsize::fetch_sub`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_sub).\n     pub fn atomic_xsub_acq<T>(dst: *mut T, src: T) -> T;\n     /// Subtract from the current value, returning the previous value.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_sub` method by passing\n     /// [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `order`. For example,\n     /// [`AtomicIsize::fetch_sub`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_sub).\n     pub fn atomic_xsub_rel<T>(dst: *mut T, src: T) -> T;\n     /// Subtract from the current value, returning the previous value.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_sub` method by passing\n     /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `order`. For example,\n     /// [`AtomicIsize::fetch_sub`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_sub).\n     pub fn atomic_xsub_acqrel<T>(dst: *mut T, src: T) -> T;\n     /// Subtract from the current value, returning the previous value.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_sub` method by passing\n     /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n@@ -410,34 +449,39 @@ extern \"rust-intrinsic\" {\n     pub fn atomic_xsub_relaxed<T>(dst: *mut T, src: T) -> T;\n \n     /// Bitwise and with the current value, returning the previous value.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_and` method by passing\n     /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `order`. For example,\n     /// [`AtomicBool::fetch_and`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_and).\n     pub fn atomic_and<T>(dst: *mut T, src: T) -> T;\n     /// Bitwise and with the current value, returning the previous value.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_and` method by passing\n     /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `order`. For example,\n     /// [`AtomicBool::fetch_and`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_and).\n     pub fn atomic_and_acq<T>(dst: *mut T, src: T) -> T;\n     /// Bitwise and with the current value, returning the previous value.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_and` method by passing\n     /// [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `order`. For example,\n     /// [`AtomicBool::fetch_and`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_and).\n     pub fn atomic_and_rel<T>(dst: *mut T, src: T) -> T;\n     /// Bitwise and with the current value, returning the previous value.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_and` method by passing\n     /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `order`. For example,\n     /// [`AtomicBool::fetch_and`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_and).\n     pub fn atomic_and_acqrel<T>(dst: *mut T, src: T) -> T;\n     /// Bitwise and with the current value, returning the previous value.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_and` method by passing\n     /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n@@ -446,34 +490,39 @@ extern \"rust-intrinsic\" {\n     pub fn atomic_and_relaxed<T>(dst: *mut T, src: T) -> T;\n \n     /// Bitwise nand with the current value, returning the previous value.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing\n     /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `order`. For example,\n     /// [`AtomicBool::fetch_nand`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_nand).\n     pub fn atomic_nand<T>(dst: *mut T, src: T) -> T;\n     /// Bitwise nand with the current value, returning the previous value.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing\n     /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `order`. For example,\n     /// [`AtomicBool::fetch_nand`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_nand).\n     pub fn atomic_nand_acq<T>(dst: *mut T, src: T) -> T;\n     /// Bitwise nand with the current value, returning the previous value.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing\n     /// [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `order`. For example,\n     /// [`AtomicBool::fetch_nand`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_nand).\n     pub fn atomic_nand_rel<T>(dst: *mut T, src: T) -> T;\n     /// Bitwise nand with the current value, returning the previous value.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing\n     /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `order`. For example,\n     /// [`AtomicBool::fetch_nand`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_nand).\n     pub fn atomic_nand_acqrel<T>(dst: *mut T, src: T) -> T;\n     /// Bitwise nand with the current value, returning the previous value.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing\n     /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n@@ -482,34 +531,39 @@ extern \"rust-intrinsic\" {\n     pub fn atomic_nand_relaxed<T>(dst: *mut T, src: T) -> T;\n \n     /// Bitwise or with the current value, returning the previous value.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_or` method by passing\n     /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `order`. For example,\n     /// [`AtomicBool::fetch_or`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_or).\n     pub fn atomic_or<T>(dst: *mut T, src: T) -> T;\n     /// Bitwise or with the current value, returning the previous value.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_or` method by passing\n     /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `order`. For example,\n     /// [`AtomicBool::fetch_or`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_or).\n     pub fn atomic_or_acq<T>(dst: *mut T, src: T) -> T;\n     /// Bitwise or with the current value, returning the previous value.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_or` method by passing\n     /// [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `order`. For example,\n     /// [`AtomicBool::fetch_or`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_or).\n     pub fn atomic_or_rel<T>(dst: *mut T, src: T) -> T;\n     /// Bitwise or with the current value, returning the previous value.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_or` method by passing\n     /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `order`. For example,\n     /// [`AtomicBool::fetch_or`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_or).\n     pub fn atomic_or_acqrel<T>(dst: *mut T, src: T) -> T;\n     /// Bitwise or with the current value, returning the previous value.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_or` method by passing\n     /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n@@ -518,34 +572,39 @@ extern \"rust-intrinsic\" {\n     pub fn atomic_or_relaxed<T>(dst: *mut T, src: T) -> T;\n \n     /// Bitwise xor with the current value, returning the previous value.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_xor` method by passing\n     /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `order`. For example,\n     /// [`AtomicBool::fetch_xor`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_xor).\n     pub fn atomic_xor<T>(dst: *mut T, src: T) -> T;\n     /// Bitwise xor with the current value, returning the previous value.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_xor` method by passing\n     /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `order`. For example,\n     /// [`AtomicBool::fetch_xor`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_xor).\n     pub fn atomic_xor_acq<T>(dst: *mut T, src: T) -> T;\n     /// Bitwise xor with the current value, returning the previous value.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_xor` method by passing\n     /// [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `order`. For example,\n     /// [`AtomicBool::fetch_xor`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_xor).\n     pub fn atomic_xor_rel<T>(dst: *mut T, src: T) -> T;\n     /// Bitwise xor with the current value, returning the previous value.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_xor` method by passing\n     /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n     /// as the `order`. For example,\n     /// [`AtomicBool::fetch_xor`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_xor).\n     pub fn atomic_xor_acqrel<T>(dst: *mut T, src: T) -> T;\n     /// Bitwise xor with the current value, returning the previous value.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_xor` method by passing\n     /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n@@ -554,34 +613,39 @@ extern \"rust-intrinsic\" {\n     pub fn atomic_xor_relaxed<T>(dst: *mut T, src: T) -> T;\n \n     /// Maximum with the current value using a sized comparison.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` signed integer types via the `fetch_max` method by passing\n     /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html#variant.SeqCst)\n     /// as the `order`. For example,\n     /// [`AtomicI32::fetch_max`](../../std/sync/atomic/struct.AtomicI32.html#method.fetch_max).\n     pub fn atomic_max<T>(dst: *mut T, src: T) -> T;\n     /// Maximum with the current value using a sized comparison.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` signed integer types via the `fetch_max` method by passing\n     /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html#variant.Acquire)\n     /// as the `order`. For example,\n     /// [`AtomicI32::fetch_max`](../../std/sync/atomic/struct.AtomicI32.html#method.fetch_max).\n     pub fn atomic_max_acq<T>(dst: *mut T, src: T) -> T;\n     /// Maximum with the current value using a sized comparison.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` signed integer types via the `fetch_max` method by passing\n     /// [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html#variant.Release)\n     /// as the `order`. For example,\n     /// [`AtomicI32::fetch_max`](../../std/sync/atomic/struct.AtomicI32.html#method.fetch_max).\n     pub fn atomic_max_rel<T>(dst: *mut T, src: T) -> T;\n     /// Maximum with the current value using a sized comparison.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` signed integer types via the `fetch_max` method by passing\n     /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html#variant.AcqRel)\n     /// as the `order`. For example,\n     /// [`AtomicI32::fetch_max`](../../std/sync/atomic/struct.AtomicI32.html#method.fetch_max).\n     pub fn atomic_max_acqrel<T>(dst: *mut T, src: T) -> T;\n     /// Maximum with the current value.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` signed integer types via the `fetch_max` method by passing\n     /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html#variant.Relaxed)\n@@ -590,34 +654,39 @@ extern \"rust-intrinsic\" {\n     pub fn atomic_max_relaxed<T>(dst: *mut T, src: T) -> T;\n \n     /// Minimum with the current value using a sized comparison.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` signed integer types via the `fetch_min` method by passing\n     /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html#variant.SeqCst)\n     /// as the `order`. For example,\n     /// [`AtomicI32::fetch_min`](../../std/sync/atomic/struct.AtomicI32.html#method.fetch_min).\n     pub fn atomic_min<T>(dst: *mut T, src: T) -> T;\n     /// Minimum with the current value using a sized comparison.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` signed integer types via the `fetch_min` method by passing\n     /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html#variant.Acquire)\n     /// as the `order`. For example,\n     /// [`AtomicI32::fetch_min`](../../std/sync/atomic/struct.AtomicI32.html#method.fetch_min).\n     pub fn atomic_min_acq<T>(dst: *mut T, src: T) -> T;\n     /// Minimum with the current value using a sized comparison.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` signed integer types via the `fetch_min` method by passing\n     /// [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html#variant.Release)\n     /// as the `order`. For example,\n     /// [`AtomicI32::fetch_min`](../../std/sync/atomic/struct.AtomicI32.html#method.fetch_min).\n     pub fn atomic_min_rel<T>(dst: *mut T, src: T) -> T;\n     /// Minimum with the current value using a sized comparison.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` signed integer types via the `fetch_min` method by passing\n     /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html#variant.AcqRel)\n     /// as the `order`. For example,\n     /// [`AtomicI32::fetch_min`](../../std/sync/atomic/struct.AtomicI32.html#method.fetch_min).\n     pub fn atomic_min_acqrel<T>(dst: *mut T, src: T) -> T;\n     /// Minimum with the current value using a sized comparison.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` signed integer types via the `fetch_min` method by passing\n     /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html#variant.Relaxed)\n@@ -626,34 +695,39 @@ extern \"rust-intrinsic\" {\n     pub fn atomic_min_relaxed<T>(dst: *mut T, src: T) -> T;\n \n     /// Minimum with the current value using an unsized comparison.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` unsigned integer types via the `fetch_min` method by passing\n     /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html#variant.SeqCst)\n     /// as the `order`. For example,\n     /// [`AtomicU32::fetch_min`](../../std/sync/atomic/struct.AtomicU32.html#method.fetch_min).\n     pub fn atomic_umin<T>(dst: *mut T, src: T) -> T;\n     /// Minimum with the current value using an unsized comparison.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` unsigned integer types via the `fetch_min` method by passing\n     /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html#variant.Acquire)\n     /// as the `order`. For example,\n     /// [`AtomicU32::fetch_min`](../../std/sync/atomic/struct.AtomicU32.html#method.fetch_min).\n     pub fn atomic_umin_acq<T>(dst: *mut T, src: T) -> T;\n     /// Minimum with the current value using an unsized comparison.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` unsigned integer types via the `fetch_min` method by passing\n     /// [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html#variant.Release)\n     /// as the `order`. For example,\n     /// [`AtomicU32::fetch_min`](../../std/sync/atomic/struct.AtomicU32.html#method.fetch_min).\n     pub fn atomic_umin_rel<T>(dst: *mut T, src: T) -> T;\n     /// Minimum with the current value using an unsized comparison.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` unsigned integer types via the `fetch_min` method by passing\n     /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html#variant.AcqRel)\n     /// as the `order`. For example,\n     /// [`AtomicU32::fetch_min`](../../std/sync/atomic/struct.AtomicU32.html#method.fetch_min).\n     pub fn atomic_umin_acqrel<T>(dst: *mut T, src: T) -> T;\n     /// Minimum with the current value using an unsized comparison.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` unsigned integer types via the `fetch_min` method by passing\n     /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html#variant.Relaxed)\n@@ -662,34 +736,39 @@ extern \"rust-intrinsic\" {\n     pub fn atomic_umin_relaxed<T>(dst: *mut T, src: T) -> T;\n \n     /// Maximum with the current value using an unsized comparison.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` unsigned integer types via the `fetch_max` method by passing\n     /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html#variant.SeqCst)\n     /// as the `order`. For example,\n     /// [`AtomicU32::fetch_max`](../../std/sync/atomic/struct.AtomicU32.html#method.fetch_max).\n     pub fn atomic_umax<T>(dst: *mut T, src: T) -> T;\n     /// Maximum with the current value using an unsized comparison.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` unsigned integer types via the `fetch_max` method by passing\n     /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html#variant.Acquire)\n     /// as the `order`. For example,\n     /// [`AtomicU32::fetch_max`](../../std/sync/atomic/struct.AtomicU32.html#method.fetch_max).\n     pub fn atomic_umax_acq<T>(dst: *mut T, src: T) -> T;\n     /// Maximum with the current value using an unsized comparison.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` unsigned integer types via the `fetch_max` method by passing\n     /// [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html#variant.Release)\n     /// as the `order`. For example,\n     /// [`AtomicU32::fetch_max`](../../std/sync/atomic/struct.AtomicU32.html#method.fetch_max).\n     pub fn atomic_umax_rel<T>(dst: *mut T, src: T) -> T;\n     /// Maximum with the current value using an unsized comparison.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` unsigned integer types via the `fetch_max` method by passing\n     /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html#variant.AcqRel)\n     /// as the `order`. For example,\n     /// [`AtomicU32::fetch_max`](../../std/sync/atomic/struct.AtomicU32.html#method.fetch_max).\n     pub fn atomic_umax_acqrel<T>(dst: *mut T, src: T) -> T;\n     /// Maximum with the current value using an unsized comparison.\n+    ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` unsigned integer types via the `fetch_max` method by passing\n     /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html#variant.Relaxed)\n@@ -734,27 +813,31 @@ extern \"rust-intrinsic\" {\n extern \"rust-intrinsic\" {\n \n     /// An atomic fence.\n+    ///\n     /// The stabilized version of this intrinsic is available in\n     /// [`std::sync::atomic::fence`](../../std/sync/atomic/fn.fence.html)\n     /// by passing\n     /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html#variant.SeqCst)\n     /// as the `order`.\n     pub fn atomic_fence();\n     /// An atomic fence.\n+    ///\n     /// The stabilized version of this intrinsic is available in\n     /// [`std::sync::atomic::fence`](../../std/sync/atomic/fn.fence.html)\n     /// by passing\n     /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html#variant.Acquire)\n     /// as the `order`.\n     pub fn atomic_fence_acq();\n     /// An atomic fence.\n+    ///\n     /// The stabilized version of this intrinsic is available in\n     /// [`std::sync::atomic::fence`](../../std/sync/atomic/fn.fence.html)\n     /// by passing\n     /// [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html#variant.Release)\n     /// as the `order`.\n     pub fn atomic_fence_rel();\n     /// An atomic fence.\n+    ///\n     /// The stabilized version of this intrinsic is available in\n     /// [`std::sync::atomic::fence`](../../std/sync/atomic/fn.fence.html)\n     /// by passing\n@@ -881,6 +964,7 @@ extern \"rust-intrinsic\" {\n     pub fn min_align_of_val<T: ?Sized>(_: &T) -> usize;\n \n     /// Gets a static string slice containing the name of a type.\n+    ///\n     /// The stabilized version of this intrinsic is\n     /// [`std::any::type_name`](../../std/any/fn.type_name.html)\n     #[rustc_const_unstable(feature = \"const_type_name\", issue = \"none\")]\n@@ -889,6 +973,7 @@ extern \"rust-intrinsic\" {\n     /// Gets an identifier which is globally unique to the specified type. This\n     /// function will return the same value for a type regardless of whichever\n     /// crate it is invoked in.\n+    ///\n     /// The stabilized version of this intrinsic is\n     /// [`std::any::TypeId::of`](../../std/any/struct.TypeId.html#method.of)\n     #[rustc_const_unstable(feature = \"const_type_id\", issue = \"none\")]\n@@ -1220,10 +1305,12 @@ extern \"rust-intrinsic\" {\n     pub fn volatile_set_memory<T>(dst: *mut T, val: u8, count: usize);\n \n     /// Performs a volatile load from the `src` pointer.\n+    ///\n     /// The stabilized version of this intrinsic is\n     /// [`std::ptr::read_volatile`](../../std/ptr/fn.read_volatile.html).\n     pub fn volatile_load<T>(src: *const T) -> T;\n     /// Performs a volatile store to the `dst` pointer.\n+    ///\n     /// The stabilized version of this intrinsic is\n     /// [`std::ptr::write_volatile`](../../std/ptr/fn.write_volatile.html).\n     pub fn volatile_store<T>(dst: *mut T, val: T);\n@@ -1236,162 +1323,198 @@ extern \"rust-intrinsic\" {\n     pub fn unaligned_volatile_store<T>(dst: *mut T, val: T);\n \n     /// Returns the square root of an `f32`\n+    ///\n     /// The stabilized version of this intrinsic is\n     /// [`std::f32::sqrt`](../../std/primitive.f32.html#method.sqrt)\n     pub fn sqrtf32(x: f32) -> f32;\n     /// Returns the square root of an `f64`\n+    ///\n     /// The stabilized version of this intrinsic is\n     /// [`std::f64::sqrt`](../../std/primitive.f64.html#method.sqrt)\n     pub fn sqrtf64(x: f64) -> f64;\n \n     /// Raises an `f32` to an integer power.\n+    ///\n     /// The stabilized version of this intrinsic is\n     /// [`std::f32::powi`](../../std/primitive.f32.html#method.powi)\n     pub fn powif32(a: f32, x: i32) -> f32;\n     /// Raises an `f64` to an integer power.\n+    ///\n     /// The stabilized version of this intrinsic is\n     /// [`std::f64::powi`](../../std/primitive.f64.html#method.powi)\n     pub fn powif64(a: f64, x: i32) -> f64;\n \n     /// Returns the sine of an `f32`.\n+    ///\n     /// The stabilized version of this intrinsic is\n     /// [`std::f32::sin`](../../std/primitive.f32.html#method.sin)\n     pub fn sinf32(x: f32) -> f32;\n     /// Returns the sine of an `f64`.\n+    ///\n     /// The stabilized version of this intrinsic is\n     /// [`std::f64::sin`](../../std/primitive.f64.html#method.sin)\n     pub fn sinf64(x: f64) -> f64;\n \n     /// Returns the cosine of an `f32`.\n+    ///\n     /// The stabilized version of this intrinsic is\n     /// [`std::f32::cos`](../../std/primitive.f32.html#method.cos)\n     pub fn cosf32(x: f32) -> f32;\n     /// Returns the cosine of an `f64`.\n+    ///\n     /// The stabilized version of this intrinsic is\n     /// [`std::f64::cos`](../../std/primitive.f64.html#method.cos)\n     pub fn cosf64(x: f64) -> f64;\n \n     /// Raises an `f32` to an `f32` power.\n+    ///\n     /// The stabilized version of this intrinsic is\n     /// [`std::f32::powf`](../../std/primitive.f32.html#method.powf)\n     pub fn powf32(a: f32, x: f32) -> f32;\n     /// Raises an `f64` to an `f64` power.\n+    ///\n     /// The stabilized version of this intrinsic is\n     /// [`std::f64::powf`](../../std/primitive.f64.html#method.powf)\n     pub fn powf64(a: f64, x: f64) -> f64;\n \n     /// Returns the exponential of an `f32`.\n+    ///\n     /// The stabilized version of this intrinsic is\n     /// [`std::f32::exp`](../../std/primitive.f32.html#method.exp)\n     pub fn expf32(x: f32) -> f32;\n     /// Returns the exponential of an `f64`.\n+    ///\n     /// The stabilized version of this intrinsic is\n     /// [`std::f64::exp`](../../std/primitive.f64.html#method.exp)\n     pub fn expf64(x: f64) -> f64;\n \n     /// Returns 2 raised to the power of an `f32`.\n+    ///\n     /// The stabilized version of this intrinsic is\n     /// [`std::f32::exp2`](../../std/primitive.f32.html#method.exp2)\n     pub fn exp2f32(x: f32) -> f32;\n     /// Returns 2 raised to the power of an `f64`.\n+    ///\n     /// The stabilized version of this intrinsic is\n     /// [`std::f64::exp2`](../../std/primitive.f64.html#method.exp2)\n     pub fn exp2f64(x: f64) -> f64;\n \n     /// Returns the natural logarithm of an `f32`.\n+    ///\n     /// The stabilized version of this intrinsic is\n     /// [`std::f32::ln`](../../std/primitive.f32.html#method.ln)\n     pub fn logf32(x: f32) -> f32;\n     /// Returns the natural logarithm of an `f64`.\n+    ///\n     /// The stabilized version of this intrinsic is\n     /// [`std::f64::ln`](../../std/primitive.f64.html#method.ln)\n     pub fn logf64(x: f64) -> f64;\n \n     /// Returns the base 10 logarithm of an `f32`.\n+    ///\n     /// The stabilized version of this intrinsic is\n     /// [`std::f32::log10`](../../std/primitive.f32.html#method.log10)\n     pub fn log10f32(x: f32) -> f32;\n     /// Returns the base 10 logarithm of an `f64`.\n+    ///\n     /// The stabilized version of this intrinsic is\n     /// [`std::f64::log10`](../../std/primitive.f64.html#method.log10)\n     pub fn log10f64(x: f64) -> f64;\n \n     /// Returns the base 2 logarithm of an `f32`.\n+    ///\n     /// The stabilized version of this intrinsic is\n     /// [`std::f32::log2`](../../std/primitive.f32.html#method.log2)\n     pub fn log2f32(x: f32) -> f32;\n     /// Returns the base 2 logarithm of an `f64`.\n+    ///\n     /// The stabilized version of this intrinsic is\n     /// [`std::f64::log2`](../../std/primitive.f64.html#method.log2)\n     pub fn log2f64(x: f64) -> f64;\n \n     /// Returns `a * b + c` for `f32` values.\n+    ///\n     /// The stabilized version of this intrinsic is\n     /// [`std::f32::mul_add`](../../std/primitive.f32.html#method.mul_add)\n     pub fn fmaf32(a: f32, b: f32, c: f32) -> f32;\n     /// Returns `a * b + c` for `f64` values.\n+    ///\n     /// The stabilized version of this intrinsic is\n     /// [`std::f64::mul_add`](../../std/primitive.f64.html#method.mul_add)\n     pub fn fmaf64(a: f64, b: f64, c: f64) -> f64;\n \n     /// Returns the absolute value of an `f32`.\n+    ///\n     /// The stabilized version of this intrinsic is\n     /// [`std::f32::abs`](../../std/primitive.f32.html#method.abs)\n     pub fn fabsf32(x: f32) -> f32;\n     /// Returns the absolute value of an `f64`.\n+    ///\n     /// The stabilized version of this intrinsic is\n     /// [`std::f64::abs`](../../std/primitive.f64.html#method.abs)\n     pub fn fabsf64(x: f64) -> f64;\n \n     /// Returns the minimum of two `f32` values.\n+    ///\n     /// The stabilized version of this intrinsic is\n     /// [`std::f32::min`](../../std/primitive.f32.html#method.min)\n     pub fn minnumf32(x: f32, y: f32) -> f32;\n     /// Returns the minimum of two `f64` values.\n+    ///\n     /// The stabilized version of this intrinsic is\n     /// [`std::f64::min`](../../std/primitive.f64.html#method.min)\n     pub fn minnumf64(x: f64, y: f64) -> f64;\n     /// Returns the maximum of two `f32` values.\n+    ///\n     /// The stabilized version of this intrinsic is\n     /// [`std::f32::max`](../../std/primitive.f32.html#method.max)\n     pub fn maxnumf32(x: f32, y: f32) -> f32;\n     /// Returns the maximum of two `f64` values.\n+    ///\n     /// The stabilized version of this intrinsic is\n     /// [`std::f64::max`](../../std/primitive.f64.html#method.max)\n     pub fn maxnumf64(x: f64, y: f64) -> f64;\n \n     /// Copies the sign from `y` to `x` for `f32` values.\n+    ///\n     /// The stabilized version of this intrinsic is\n     /// [`std::f32::copysign`](../../std/primitive.f32.html#method.copysign)\n     pub fn copysignf32(x: f32, y: f32) -> f32;\n     /// Copies the sign from `y` to `x` for `f64` values.\n+    ///\n     /// The stabilized version of this intrinsic is\n     /// [`std::f64::copysign`](../../std/primitive.f64.html#method.copysign)\n     pub fn copysignf64(x: f64, y: f64) -> f64;\n \n     /// Returns the largest integer less than or equal to an `f32`.\n+    ///\n     /// The stabilized version of this intrinsic is\n     /// [`std::f32::floor`](../../std/primitive.f32.html#method.floor)\n     pub fn floorf32(x: f32) -> f32;\n     /// Returns the largest integer less than or equal to an `f64`.\n+    ///\n     /// The stabilized version of this intrinsic is\n     /// [`std::f64::floor`](../../std/primitive.f64.html#method.floor)\n     pub fn floorf64(x: f64) -> f64;\n \n     /// Returns the smallest integer greater than or equal to an `f32`.\n+    ///\n     /// The stabilized version of this intrinsic is\n     /// [`std::f32::ceil`](../../std/primitive.f32.html#method.ceil)\n     pub fn ceilf32(x: f32) -> f32;\n     /// Returns the smallest integer greater than or equal to an `f64`.\n+    ///\n     /// The stabilized version of this intrinsic is\n     /// [`std::f64::ceil`](../../std/primitive.f64.html#method.ceil)\n     pub fn ceilf64(x: f64) -> f64;\n \n     /// Returns the integer part of an `f32`.\n+    ///\n     /// The stabilized version of this intrinsic is\n     /// [`std::f32::trunc`](../../std/primitive.f32.html#method.trunc)\n     pub fn truncf32(x: f32) -> f32;\n     /// Returns the integer part of an `f64`.\n+    ///\n     /// The stabilized version of this intrinsic is\n     /// [`std::f64::trunc`](../../std/primitive.f64.html#method.trunc)\n     pub fn truncf64(x: f64) -> f64;\n@@ -1409,10 +1532,12 @@ extern \"rust-intrinsic\" {\n     pub fn nearbyintf64(x: f64) -> f64;\n \n     /// Returns the nearest integer to an `f32`. Rounds half-way cases away from zero.\n+    ///\n     /// The stabilized version of this intrinsic is\n     /// [`std::f32::round`](../../std/primitive.f32.html#method.round)\n     pub fn roundf32(x: f32) -> f32;\n     /// Returns the nearest integer to an `f64`. Rounds half-way cases away from zero.\n+    ///\n     /// The stabilized version of this intrinsic is\n     /// [`std::f64::round`](../../std/primitive.f64.html#method.round)\n     pub fn roundf64(x: f64) -> f64;\n@@ -1443,13 +1568,15 @@ extern \"rust-intrinsic\" {\n     pub fn float_to_int_approx_unchecked<Float, Int>(value: Float) -> Int;\n \n     /// Returns the number of bits set in an integer type `T`\n+    ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `count_ones` method. For example,\n     /// [`std::u32::count_ones`](../../std/primitive.u32.html#method.count_ones)\n     #[rustc_const_stable(feature = \"const_ctpop\", since = \"1.40.0\")]\n     pub fn ctpop<T>(x: T) -> T;\n \n     /// Returns the number of leading unset bits (zeroes) in an integer type `T`.\n+    ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `leading_zeros` method. For example,\n     /// [`std::u32::leading_zeros`](../../std/primitive.u32.html#method.leading_zeros)\n@@ -1498,6 +1625,7 @@ extern \"rust-intrinsic\" {\n     pub fn ctlz_nonzero<T>(x: T) -> T;\n \n     /// Returns the number of trailing unset bits (zeroes) in an integer type `T`.\n+    ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `trailing_zeros` method. For example,\n     /// [`std::u32::trailing_zeros`](../../std/primitive.u32.html#method.trailing_zeros)\n@@ -1546,34 +1674,39 @@ extern \"rust-intrinsic\" {\n     pub fn cttz_nonzero<T>(x: T) -> T;\n \n     /// Reverses the bytes in an integer type `T`.\n+    ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `swap_bytes` method. For example,\n     /// [`std::u32::swap_bytes`](../../std/primitive.u32.html#method.swap_bytes)\n     #[rustc_const_stable(feature = \"const_bswap\", since = \"1.40.0\")]\n     pub fn bswap<T>(x: T) -> T;\n \n     /// Reverses the bits in an integer type `T`.\n+    ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `reverse_bits` method. For example,\n     /// [`std::u32::reverse_bits`](../../std/primitive.u32.html#method.reverse_bits)\n     #[rustc_const_stable(feature = \"const_bitreverse\", since = \"1.40.0\")]\n     pub fn bitreverse<T>(x: T) -> T;\n \n     /// Performs checked integer addition.\n+    ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `overflowing_add` method. For example,\n     /// [`std::u32::overflowing_add`](../../std/primitive.u32.html#method.overflowing_add)\n     #[rustc_const_stable(feature = \"const_int_overflow\", since = \"1.40.0\")]\n     pub fn add_with_overflow<T>(x: T, y: T) -> (T, bool);\n \n     /// Performs checked integer subtraction\n+    ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `overflowing_sub` method. For example,\n     /// [`std::u32::overflowing_sub`](../../std/primitive.u32.html#method.overflowing_sub)\n     #[rustc_const_stable(feature = \"const_int_overflow\", since = \"1.40.0\")]\n     pub fn sub_with_overflow<T>(x: T, y: T) -> (T, bool);\n \n     /// Performs checked integer multiplication\n+    ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `overflowing_mul` method. For example,\n     /// [`std::u32::overflowing_mul`](../../std/primitive.u32.html#method.overflowing_mul)\n@@ -1585,7 +1718,7 @@ extern \"rust-intrinsic\" {\n     pub fn exact_div<T>(x: T, y: T) -> T;\n \n     /// Performs an unchecked division, resulting in undefined behavior\n-    /// where y = 0 or x = `T::min_value()` and y = -1.\n+    /// where y = 0 or x = `T::min_value()` and y = -1\n     ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `checked_div` method. For example,\n@@ -1603,13 +1736,15 @@ extern \"rust-intrinsic\" {\n \n     /// Performs an unchecked left shift, resulting in undefined behavior when\n     /// y < 0 or y >= N, where N is the width of T in bits.\n+    ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `wrapping_shl` method. For example,\n     /// [`std::u32::wrapping_shl`](../../std/primitive.u32.html#method.wrapping_shl)\n     #[rustc_const_stable(feature = \"const_int_unchecked\", since = \"1.40.0\")]\n     pub fn unchecked_shl<T>(x: T, y: T) -> T;\n     /// Performs an unchecked right shift, resulting in undefined behavior when\n     /// y < 0 or y >= N, where N is the width of T in bits.\n+    ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `wrapping_shr` method. For example,\n     /// [`std::u32::wrapping_shr`](../../std/primitive.u32.html#method.wrapping_shr)\n@@ -1632,45 +1767,52 @@ extern \"rust-intrinsic\" {\n     pub fn unchecked_mul<T>(x: T, y: T) -> T;\n \n     /// Performs rotate left.\n+    ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `rotate_left` method. For example,\n     /// [`std::u32::rotate_left`](../../std/primitive.u32.html#method.rotate_left)\n     #[rustc_const_stable(feature = \"const_int_rotate\", since = \"1.40.0\")]\n     pub fn rotate_left<T>(x: T, y: T) -> T;\n \n     /// Performs rotate right.\n+    ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `rotate_right` method. For example,\n     /// [`std::u32::rotate_right`](../../std/primitive.u32.html#method.rotate_right)\n     #[rustc_const_stable(feature = \"const_int_rotate\", since = \"1.40.0\")]\n     pub fn rotate_right<T>(x: T, y: T) -> T;\n \n     /// Returns (a + b) mod 2<sup>N</sup>, where N is the width of T in bits.\n+    ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `wrapping_add` method. For example,\n     /// [`std::u32::wrapping_add`](../../std/primitive.u32.html#method.wrapping_add)\n     #[rustc_const_stable(feature = \"const_int_wrapping\", since = \"1.40.0\")]\n     pub fn wrapping_add<T>(a: T, b: T) -> T;\n     /// Returns (a - b) mod 2<sup>N</sup>, where N is the width of T in bits.\n+    ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `wrapping_sub` method. For example,\n     /// [`std::u32::wrapping_sub`](../../std/primitive.u32.html#method.wrapping_sub)\n     #[rustc_const_stable(feature = \"const_int_wrapping\", since = \"1.40.0\")]\n     pub fn wrapping_sub<T>(a: T, b: T) -> T;\n     /// Returns (a * b) mod 2<sup>N</sup>, where N is the width of T in bits.\n+    ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `wrapping_mul` method. For example,\n     /// [`std::u32::wrapping_mul`](../../std/primitive.u32.html#method.wrapping_mul)\n     #[rustc_const_stable(feature = \"const_int_wrapping\", since = \"1.40.0\")]\n     pub fn wrapping_mul<T>(a: T, b: T) -> T;\n \n     /// Computes `a + b`, while saturating at numeric bounds.\n+    ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `saturating_add` method. For example,\n     /// [`std::u32::saturating_add`](../../std/primitive.u32.html#method.saturating_add)\n     #[rustc_const_stable(feature = \"const_int_saturating\", since = \"1.40.0\")]\n     pub fn saturating_add<T>(a: T, b: T) -> T;\n     /// Computes `a - b`, while saturating at numeric bounds.\n+    ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `saturating_sub` method. For example,\n     /// [`std::u32::saturating_sub`](../../std/primitive.u32.html#method.saturating_sub)\n@@ -1679,6 +1821,7 @@ extern \"rust-intrinsic\" {\n \n     /// Returns the value of the discriminant for the variant in 'v',\n     /// cast to a `u64`; if `T` has no discriminant, returns 0.\n+    ///\n     /// The stabilized version of this intrinsic is\n     /// [`std::mem::discriminant`](../../std/mem/fn.discriminant.html)\n     pub fn discriminant_value<T>(v: &T) -> u64;"}]}