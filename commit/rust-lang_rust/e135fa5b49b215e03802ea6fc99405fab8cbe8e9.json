{"sha": "e135fa5b49b215e03802ea6fc99405fab8cbe8e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxMzVmYTViNDliMjE1ZTAzODAyZWE2ZmM5OTQwNWZhYjhjYmU4ZTk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-11-27T12:21:26Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-04T15:04:51Z"}, "message": "Remove dependencies on driver from trans et al. by moving various\nstructs out from driver and into other places.", "tree": {"sha": "caa889088e394e74da55d3e107020d94c8943199", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/caa889088e394e74da55d3e107020d94c8943199"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e135fa5b49b215e03802ea6fc99405fab8cbe8e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e135fa5b49b215e03802ea6fc99405fab8cbe8e9", "html_url": "https://github.com/rust-lang/rust/commit/e135fa5b49b215e03802ea6fc99405fab8cbe8e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e135fa5b49b215e03802ea6fc99405fab8cbe8e9/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc32f867d8337cfb97fbddf832169dc79556e31d", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc32f867d8337cfb97fbddf832169dc79556e31d", "html_url": "https://github.com/rust-lang/rust/commit/cc32f867d8337cfb97fbddf832169dc79556e31d"}], "stats": {"total": 366, "additions": 171, "deletions": 195}, "files": [{"sha": "994f0c2090a57245964898f223f1d740c4df1b78", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e135fa5b49b215e03802ea6fc99405fab8cbe8e9/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e135fa5b49b215e03802ea6fc99405fab8cbe8e9/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=e135fa5b49b215e03802ea6fc99405fab8cbe8e9", "patch": "@@ -92,6 +92,17 @@ pub const INITIAL_DISCRIMINANT_VALUE: Disr = 0;\n \n // Data types\n \n+/// The complete set of all analyses described in this module. This is\n+/// produced by the driver and fed to trans and later passes.\n+pub struct CrateAnalysis<'tcx> {\n+    pub exp_map2: middle::resolve::ExportMap2,\n+    pub exported_items: middle::privacy::ExportedItems,\n+    pub public_items: middle::privacy::PublicItems,\n+    pub ty_cx: ty::ctxt<'tcx>,\n+    pub reachable: NodeSet,\n+    pub name: String,\n+}\n+\n #[deriving(PartialEq, Eq, Hash)]\n pub struct field<'tcx> {\n     pub name: ast::Name,"}, {"sha": "cbc9dd9145bfb7fd4382d676ce37f4e30b10bd51", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/e135fa5b49b215e03802ea6fc99405fab8cbe8e9/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e135fa5b49b215e03802ea6fc99405fab8cbe8e9/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=e135fa5b49b215e03802ea6fc99405fab8cbe8e9", "patch": "@@ -114,6 +114,59 @@ pub struct Options {\n     pub alt_std_name: Option<String>\n }\n \n+pub enum Input {\n+    /// Load source from file\n+    File(Path),\n+    /// The string is the source\n+    Str(String)\n+}\n+\n+impl Input {\n+    pub fn filestem(&self) -> String {\n+        match *self {\n+            Input::File(ref ifile) => ifile.filestem_str().unwrap().to_string(),\n+            Input::Str(_) => \"rust_out\".to_string(),\n+        }\n+    }\n+}\n+\n+#[deriving(Clone)]\n+pub struct OutputFilenames {\n+    pub out_directory: Path,\n+    pub out_filestem: String,\n+    pub single_output_file: Option<Path>,\n+    pub extra: String,\n+}\n+\n+impl OutputFilenames {\n+    pub fn path(&self, flavor: OutputType) -> Path {\n+        match self.single_output_file {\n+            Some(ref path) => return path.clone(),\n+            None => {}\n+        }\n+        self.temp_path(flavor)\n+    }\n+\n+    pub fn temp_path(&self, flavor: OutputType) -> Path {\n+        let base = self.out_directory.join(self.filestem());\n+        match flavor {\n+            OutputTypeBitcode => base.with_extension(\"bc\"),\n+            OutputTypeAssembly => base.with_extension(\"s\"),\n+            OutputTypeLlvmAssembly => base.with_extension(\"ll\"),\n+            OutputTypeObject => base.with_extension(\"o\"),\n+            OutputTypeExe => base,\n+        }\n+    }\n+\n+    pub fn with_extension(&self, extension: &str) -> Path {\n+        self.out_directory.join(self.filestem()).with_extension(extension)\n+    }\n+\n+    pub fn filestem(&self) -> String {\n+        format!(\"{}{}\", self.out_filestem, self.extra)\n+    }\n+}\n+\n pub fn host_triple() -> &'static str {\n     // Get the host triple out of the build environment. This ensures that our\n     // idea of the host triple is the same as for the set of libraries we've"}, {"sha": "6057f9d90819029e473e745c9681ba7882e27d7e", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e135fa5b49b215e03802ea6fc99405fab8cbe8e9/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e135fa5b49b215e03802ea6fc99405fab8cbe8e9/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=e135fa5b49b215e03802ea6fc99405fab8cbe8e9", "patch": "@@ -13,15 +13,13 @@ use super::archive;\n use super::rpath;\n use super::rpath::RPathConfig;\n use super::svh::Svh;\n-use driver::driver::{CrateTranslation, OutputFilenames, Input, FileInput};\n use session::config;\n use session::config::NoDebugInfo;\n-use session::config::{OutputTypeBitcode, OutputTypeExe, OutputTypeObject};\n+use session::config::{OutputFilenames, Input, OutputTypeBitcode, OutputTypeExe, OutputTypeObject};\n use session::Session;\n use metadata::common::LinkMeta;\n use metadata::{encoder, cstore, filesearch, csearch, creader};\n-use trans::context::CrateContext;\n-use trans::common::gensym_name;\n+use trans::{CrateContext, CrateTranslation, gensym_name};\n use middle::ty::{mod, Ty};\n use util::common::time;\n use util::ppaux;\n@@ -156,7 +154,7 @@ pub fn find_crate_name(sess: Option<&Session>,\n     if let Some((attr, s)) = attr_crate_name {\n         return validate(s.get().to_string(), Some(attr.span));\n     }\n-    if let FileInput(ref path) = *input {\n+    if let Input::File(ref path) = *input {\n         if let Some(s) = path.filestem_str() {\n             return validate(s.to_string(), None);\n         }"}, {"sha": "e5ffe2675d6f4fdcf6d192a1942f6c3b6177751f", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e135fa5b49b215e03802ea6fc99405fab8cbe8e9/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e135fa5b49b215e03802ea6fc99405fab8cbe8e9/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=e135fa5b49b215e03802ea6fc99405fab8cbe8e9", "patch": "@@ -10,13 +10,13 @@\n \n use back::lto;\n use back::link::{get_cc_prog, remove};\n-use driver::driver::{CrateTranslation, ModuleTranslation, OutputFilenames};\n-use session::config::{NoDebugInfo, Passes, SomePasses, AllPasses};\n+use session::config::{OutputFilenames, NoDebugInfo, Passes, SomePasses, AllPasses};\n use session::Session;\n use session::config;\n use llvm;\n use llvm::{ModuleRef, TargetMachineRef, PassManagerRef, DiagnosticInfoRef, ContextRef};\n use llvm::SMDiagnosticRef;\n+use trans::{CrateTranslation, ModuleTranslation};\n use util::common::time;\n use syntax::codemap;\n use syntax::diagnostic;"}, {"sha": "47ba048a21b35bb33ec353e917c0ca637fb31439", "filename": "src/librustc_trans/driver/driver.rs", "status": "modified", "additions": 15, "deletions": 99, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/e135fa5b49b215e03802ea6fc99405fab8cbe8e9/src%2Flibrustc_trans%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e135fa5b49b215e03802ea6fc99405fab8cbe8e9/src%2Flibrustc_trans%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdriver%2Fdriver.rs?ref=e135fa5b49b215e03802ea6fc99405fab8cbe8e9", "patch": "@@ -8,15 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub use self::Input::*;\n-\n use back::link;\n use back::write;\n use session::Session;\n-use session::config;\n+use session::config::{mod, Input, OutputFilenames};\n use lint;\n-use llvm::{ContextRef, ModuleRef};\n-use metadata::common::LinkMeta;\n use metadata::creader;\n use middle::{stability, ty, reachable};\n use middle::dependency_format;\n@@ -28,7 +24,6 @@ use rustc::typeck;\n use trans;\n \n use util::common::time;\n-use util::nodemap::{NodeSet};\n \n use serialize::{json, Encodable};\n \n@@ -114,36 +109,19 @@ pub fn anon_src() -> String {\n pub fn source_name(input: &Input) -> String {\n     match *input {\n         // FIXME (#9639): This needs to handle non-utf8 paths\n-        FileInput(ref ifile) => ifile.as_str().unwrap().to_string(),\n-        StrInput(_) => anon_src()\n-    }\n-}\n-\n-pub enum Input {\n-    /// Load source from file\n-    FileInput(Path),\n-    /// The string is the source\n-    StrInput(String)\n-}\n-\n-impl Input {\n-    fn filestem(&self) -> String {\n-        match *self {\n-            FileInput(ref ifile) => ifile.filestem_str().unwrap().to_string(),\n-            StrInput(_) => \"rust_out\".to_string(),\n-        }\n+        Input::File(ref ifile) => ifile.as_str().unwrap().to_string(),\n+        Input::Str(_) => anon_src()\n     }\n }\n \n-\n pub fn phase_1_parse_input(sess: &Session, cfg: ast::CrateConfig, input: &Input)\n     -> ast::Crate {\n     let krate = time(sess.time_passes(), \"parsing\", (), |_| {\n         match *input {\n-            FileInput(ref file) => {\n+            Input::File(ref file) => {\n                 parse::parse_crate_from_file(&(*file), cfg.clone(), &sess.parse_sess)\n             }\n-            StrInput(ref src) => {\n+            Input::Str(ref src) => {\n                 parse::parse_crate_from_source_str(anon_src().to_string(),\n                                                    src.to_string(),\n                                                    cfg.clone(),\n@@ -343,23 +321,13 @@ pub fn assign_node_ids_and_map<'ast>(sess: &Session,\n     map\n }\n \n-pub struct CrateAnalysis<'tcx> {\n-    pub exp_map2: middle::resolve::ExportMap2,\n-    pub exported_items: middle::privacy::ExportedItems,\n-    pub public_items: middle::privacy::PublicItems,\n-    pub ty_cx: ty::ctxt<'tcx>,\n-    pub reachable: NodeSet,\n-    pub name: String,\n-}\n-\n-\n /// Run the resolution, typechecking, region checking and other\n /// miscellaneous analysis passes on the crate. Return various\n /// structures carrying the results of the analysis.\n pub fn phase_3_run_analysis_passes<'tcx>(sess: Session,\n                                          ast_map: ast_map::Map<'tcx>,\n                                          type_arena: &'tcx TypedArena<ty::TyS<'tcx>>,\n-                                         name: String) -> CrateAnalysis<'tcx> {\n+                                         name: String) -> ty::CrateAnalysis<'tcx> {\n     let time_passes = sess.time_passes();\n     let krate = ast_map.krate();\n \n@@ -474,7 +442,7 @@ pub fn phase_3_run_analysis_passes<'tcx>(sess: Session,\n     time(time_passes, \"lint checking\", (), |_|\n          lint::check_crate(&ty_cx, &exported_items));\n \n-    CrateAnalysis {\n+    ty::CrateAnalysis {\n         exp_map2: exp_map2,\n         ty_cx: ty_cx,\n         exported_items: exported_items,\n@@ -486,7 +454,7 @@ pub fn phase_3_run_analysis_passes<'tcx>(sess: Session,\n \n pub fn phase_save_analysis(sess: &Session,\n                            krate: &ast::Crate,\n-                           analysis: &CrateAnalysis,\n+                           analysis: &ty::CrateAnalysis,\n                            odir: &Option<Path>) {\n     if (sess.opts.debugging_opts & config::SAVE_ANALYSIS) == 0 {\n         return;\n@@ -495,39 +463,24 @@ pub fn phase_save_analysis(sess: &Session,\n          save::process_crate(sess, krate, analysis, odir));\n }\n \n-pub struct ModuleTranslation {\n-    pub llcx: ContextRef,\n-    pub llmod: ModuleRef,\n-}\n-\n-pub struct CrateTranslation {\n-    pub modules: Vec<ModuleTranslation>,\n-    pub metadata_module: ModuleTranslation,\n-    pub link: LinkMeta,\n-    pub metadata: Vec<u8>,\n-    pub reachable: Vec<String>,\n-    pub crate_formats: dependency_format::Dependencies,\n-    pub no_builtins: bool,\n-}\n-\n /// Run the translation phase to LLVM, after which the AST and analysis can\n /// be discarded.\n-pub fn phase_4_translate_to_llvm<'tcx>(analysis: CrateAnalysis<'tcx>)\n-                                       -> (ty::ctxt<'tcx>, CrateTranslation) {\n+pub fn phase_4_translate_to_llvm<'tcx>(analysis: ty::CrateAnalysis<'tcx>)\n+                                       -> (ty::ctxt<'tcx>, trans::CrateTranslation) {\n     let time_passes = analysis.ty_cx.sess.time_passes();\n \n     time(time_passes, \"resolving dependency formats\", (), |_|\n          dependency_format::calculate(&analysis.ty_cx));\n \n     // Option dance to work around the lack of stack once closures.\n     time(time_passes, \"translation\", analysis, |analysis|\n-         trans::base::trans_crate(analysis))\n+         trans::trans_crate(analysis))\n }\n \n /// Run LLVM itself, producing a bitcode file, assembly file or object file\n /// as a side effect.\n pub fn phase_5_run_llvm_passes(sess: &Session,\n-                               trans: &CrateTranslation,\n+                               trans: &trans::CrateTranslation,\n                                outputs: &OutputFilenames) {\n     if sess.opts.cg.no_integrated_as {\n         let output_type = config::OutputTypeAssembly;\n@@ -555,7 +508,7 @@ pub fn phase_5_run_llvm_passes(sess: &Session,\n /// Run the linker on any artifacts that resulted from the LLVM run.\n /// This should produce either a finished executable or library.\n pub fn phase_6_link_output(sess: &Session,\n-                           trans: &CrateTranslation,\n+                           trans: &trans::CrateTranslation,\n                            outputs: &OutputFilenames) {\n     let old_path = os::getenv(\"PATH\").unwrap_or_else(||String::new());\n     let mut new_path = sess.host_filesearch().get_tools_search_paths();\n@@ -640,8 +593,8 @@ fn write_out_deps(sess: &Session,\n         // Use default filename: crate source filename with extension replaced\n         // by \".d\"\n         (true, None) => match *input {\n-            FileInput(..) => outputs.with_extension(\"d\"),\n-            StrInput(..) => {\n+            Input::File(..) => outputs.with_extension(\"d\"),\n+            Input::Str(..) => {\n                 sess.warn(\"can not write --dep-info without a filename \\\n                            when compiling stdin.\");\n                 return\n@@ -752,43 +705,6 @@ pub fn collect_crate_metadata(session: &Session,\n     session.opts.cg.metadata.clone()\n }\n \n-#[deriving(Clone)]\n-pub struct OutputFilenames {\n-    pub out_directory: Path,\n-    pub out_filestem: String,\n-    pub single_output_file: Option<Path>,\n-    extra: String,\n-}\n-\n-impl OutputFilenames {\n-    pub fn path(&self, flavor: config::OutputType) -> Path {\n-        match self.single_output_file {\n-            Some(ref path) => return path.clone(),\n-            None => {}\n-        }\n-        self.temp_path(flavor)\n-    }\n-\n-    pub fn temp_path(&self, flavor: config::OutputType) -> Path {\n-        let base = self.out_directory.join(self.filestem());\n-        match flavor {\n-            config::OutputTypeBitcode => base.with_extension(\"bc\"),\n-            config::OutputTypeAssembly => base.with_extension(\"s\"),\n-            config::OutputTypeLlvmAssembly => base.with_extension(\"ll\"),\n-            config::OutputTypeObject => base.with_extension(\"o\"),\n-            config::OutputTypeExe => base,\n-        }\n-    }\n-\n-    pub fn with_extension(&self, extension: &str) -> Path {\n-        self.out_directory.join(self.filestem()).with_extension(extension)\n-    }\n-\n-    fn filestem(&self) -> String {\n-        format!(\"{}{}\", self.out_filestem, self.extra)\n-    }\n-}\n-\n pub fn build_output_filenames(input: &Input,\n                               odir: &Option<Path>,\n                               ofile: &Option<Path>,"}, {"sha": "dc450ac5f3814d21411814efbcf3e8e3f76ea6a4", "filename": "src/librustc_trans/driver/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e135fa5b49b215e03802ea6fc99405fab8cbe8e9/src%2Flibrustc_trans%2Fdriver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e135fa5b49b215e03802ea6fc99405fab8cbe8e9/src%2Flibrustc_trans%2Fdriver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdriver%2Fmod.rs?ref=e135fa5b49b215e03802ea6fc99405fab8cbe8e9", "patch": "@@ -11,8 +11,8 @@\n pub use syntax::diagnostic;\n \n use back::link;\n-use driver::driver::{Input, FileInput, StrInput};\n use session::{config, Session, build_session};\n+use session::config::Input;\n use lint::Lint;\n use lint;\n use metadata;\n@@ -89,9 +89,9 @@ fn run_compiler(args: &[String]) {\n             if ifile == \"-\" {\n                 let contents = io::stdin().read_to_end().unwrap();\n                 let src = String::from_utf8(contents).unwrap();\n-                (StrInput(src), None)\n+                (Input::Str(src), None)\n             } else {\n-                (FileInput(Path::new(ifile)), Some(Path::new(ifile)))\n+                (Input::File(Path::new(ifile)), Some(Path::new(ifile)))\n             }\n         }\n         _ => early_error(\"multiple input filenames provided\")\n@@ -116,11 +116,11 @@ fn run_compiler(args: &[String]) {\n     let r = matches.opt_strs(\"Z\");\n     if r.contains(&(\"ls\".to_string())) {\n         match input {\n-            FileInput(ref ifile) => {\n+            Input::File(ref ifile) => {\n                 let mut stdout = io::stdout();\n                 list_metadata(&sess, &(*ifile), &mut stdout).unwrap();\n             }\n-            StrInput(_) => {\n+            Input::Str(_) => {\n                 early_error(\"can not list metadata for stdin\");\n             }\n         }\n@@ -411,12 +411,12 @@ fn print_crate_info(sess: &Session,\n fn parse_crate_attrs(sess: &Session, input: &Input) ->\n                      Vec<ast::Attribute> {\n     let result = match *input {\n-        FileInput(ref ifile) => {\n+        Input::File(ref ifile) => {\n             parse::parse_crate_attrs_from_file(ifile,\n                                                Vec::new(),\n                                                &sess.parse_sess)\n         }\n-        StrInput(ref src) => {\n+        Input::Str(ref src) => {\n             parse::parse_crate_attrs_from_source_str(\n                 driver::anon_src().to_string(),\n                 src.to_string(),"}, {"sha": "ad110cfeafcbc8989c73f8f69cff3cf86950bdd7", "filename": "src/librustc_trans/driver/pretty.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e135fa5b49b215e03802ea6fc99405fab8cbe8e9/src%2Flibrustc_trans%2Fdriver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e135fa5b49b215e03802ea6fc99405fab8cbe8e9/src%2Flibrustc_trans%2Fdriver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdriver%2Fpretty.rs?ref=e135fa5b49b215e03802ea6fc99405fab8cbe8e9", "patch": "@@ -17,8 +17,9 @@ use self::NodesMatchingUII::*;\n \n use back::link;\n \n-use session::{config, Session};\n-use driver::driver::{mod, CrateAnalysis};\n+use session::Session;\n+use session::config::{mod, Input};\n+use driver::driver::{mod};\n \n use middle::ty;\n use middle::borrowck::{mod, FnPartsWithCFG};\n@@ -242,7 +243,7 @@ impl<'ast> pprust::PpAnn for HygieneAnnotation<'ast> {\n \n \n struct TypedAnnotation<'tcx> {\n-    analysis: CrateAnalysis<'tcx>,\n+    analysis: ty::CrateAnalysis<'tcx>,\n }\n \n impl<'tcx> PrinterSupport<'tcx> for TypedAnnotation<'tcx> {\n@@ -409,7 +410,7 @@ fn needs_expansion(ppm: &PpMode) -> bool {\n \n pub fn pretty_print_input(sess: Session,\n                           cfg: ast::CrateConfig,\n-                          input: &driver::Input,\n+                          input: &Input,\n                           ppm: PpMode,\n                           opt_uii: Option<UserIdentifiedItem>,\n                           ofile: Option<Path>) {\n@@ -536,7 +537,7 @@ pub fn pretty_print_input(sess: Session,\n }\n \n fn print_flowgraph<W:io::Writer>(variants: Vec<borrowck_dot::Variant>,\n-                                 analysis: CrateAnalysis,\n+                                 analysis: ty::CrateAnalysis,\n                                  code: blocks::Code,\n                                  mut out: W) -> io::IoResult<()> {\n     let ty_cx = &analysis.ty_cx;"}, {"sha": "1482422b8d03eecfd22db5a6753ac9b58e96aae7", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e135fa5b49b215e03802ea6fc99405fab8cbe8e9/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e135fa5b49b215e03802ea6fc99405fab8cbe8e9/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=e135fa5b49b215e03802ea6fc99405fab8cbe8e9", "patch": "@@ -27,7 +27,6 @@\n //! the format of the output away from extracting it from the compiler.\n //! DxrVisitor walks the AST and processes it.\n \n-use driver::driver::CrateAnalysis;\n use session::Session;\n \n use middle::def;\n@@ -68,7 +67,7 @@ fn generated_code(span: Span) -> bool {\n \n struct DxrVisitor<'l, 'tcx: 'l> {\n     sess: &'l Session,\n-    analysis: &'l CrateAnalysis<'tcx>,\n+    analysis: &'l ty::CrateAnalysis<'tcx>,\n \n     collected_paths: Vec<(NodeId, ast::Path, bool, recorder::Row)>,\n     collecting: bool,\n@@ -1473,7 +1472,7 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DxrVisitor<'l, 'tcx> {\n \n pub fn process_crate(sess: &Session,\n                      krate: &ast::Crate,\n-                     analysis: &CrateAnalysis,\n+                     analysis: &ty::CrateAnalysis,\n                      odir: &Option<Path>) {\n     if generated_code(krate.span) {\n         return;"}, {"sha": "9d0e096c71d646758191a6798557ca7c07cac1ab", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e135fa5b49b215e03802ea6fc99405fab8cbe8e9/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e135fa5b49b215e03802ea6fc99405fab8cbe8e9/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=e135fa5b49b215e03802ea6fc99405fab8cbe8e9", "patch": "@@ -28,9 +28,11 @@\n pub use self::ValueOrigin::*;\n pub use self::scalar_type::*;\n \n+use super::CrateTranslation;\n+use super::ModuleTranslation;\n+\n use back::link::{mangle_exported_name};\n use back::{link, abi};\n-use driver::driver::{CrateAnalysis, CrateTranslation, ModuleTranslation};\n use lint;\n use llvm::{BasicBlockRef, Linkage, ValueRef, Vector, get_param};\n use llvm;\n@@ -1078,12 +1080,6 @@ pub fn store_ty(cx: Block, v: ValueRef, dst: ValueRef, t: Ty) {\n     };\n }\n \n-pub fn ignore_lhs(_bcx: Block, local: &ast::Local) -> bool {\n-    match local.pat.node {\n-        ast::PatWild(ast::PatWildSingle) => true, _ => false\n-    }\n-}\n-\n pub fn init_local<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, local: &ast::Local)\n                               -> Block<'blk, 'tcx> {\n     debug!(\"init_local(bcx={}, local.id={})\", bcx.to_str(), local.id);\n@@ -2916,12 +2912,6 @@ fn register_method(ccx: &CrateContext, id: ast::NodeId,\n     llfn\n }\n \n-pub fn p2i(ccx: &CrateContext, v: ValueRef) -> ValueRef {\n-    unsafe {\n-        return llvm::LLVMConstPtrToInt(v, ccx.int_type().to_ref());\n-    }\n-}\n-\n pub fn crate_ctxt_to_encode_parms<'a, 'tcx>(cx: &'a SharedCrateContext<'tcx>,\n                                             ie: encoder::EncodeInlinedItem<'a>)\n                                             -> encoder::EncodeParams<'a, 'tcx> {\n@@ -3055,9 +3045,9 @@ fn internalize_symbols(cx: &SharedCrateContext, reachable: &HashSet<String>) {\n     }\n }\n \n-pub fn trans_crate<'tcx>(analysis: CrateAnalysis<'tcx>)\n+pub fn trans_crate<'tcx>(analysis: ty::CrateAnalysis<'tcx>)\n                          -> (ty::ctxt<'tcx>, CrateTranslation) {\n-    let CrateAnalysis { ty_cx: tcx, exp_map2, reachable, name, .. } = analysis;\n+    let ty::CrateAnalysis { ty_cx: tcx, exp_map2, reachable, name, .. } = analysis;\n     let krate = tcx.map.krate();\n \n     // Before we touch LLVM, make sure that multithreading is enabled."}, {"sha": "a8256176c2658a737ff6b0e21e3aec6fcee14ed1", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e135fa5b49b215e03802ea6fc99405fab8cbe8e9/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e135fa5b49b215e03802ea6fc99405fab8cbe8e9/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=e135fa5b49b215e03802ea6fc99405fab8cbe8e9", "patch": "@@ -272,11 +272,6 @@ impl<'a, 'tcx> FunctionContext<'a, 'tcx> {\n         }\n     }\n \n-    pub fn out_arg_pos(&self) -> uint {\n-        assert!(self.caller_expects_out_pointer);\n-        0u\n-    }\n-\n     pub fn env_arg_pos(&self) -> uint {\n         if self.caller_expects_out_pointer {\n             1u"}, {"sha": "fd9d6b8f2c3b20b6ee1e6e6e14c2ac6eca5f9926", "filename": "src/librustc_trans/trans/context.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e135fa5b49b215e03802ea6fc99405fab8cbe8e9/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e135fa5b49b215e03802ea6fc99405fab8cbe8e9/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs?ref=e135fa5b49b215e03802ea6fc99405fab8cbe8e9", "patch": "@@ -347,10 +347,6 @@ impl<'tcx> SharedCrateContext<'tcx> {\n         &self.link_meta\n     }\n \n-    pub fn symbol_hasher<'a>(&'a self) -> &'a RefCell<Sha256> {\n-        &self.symbol_hasher\n-    }\n-\n     pub fn tcx<'a>(&'a self) -> &'a ty::ctxt<'tcx> {\n         &self.tcx\n     }"}, {"sha": "532ef6908186640fda81e2cbebaeaa81946f2f09", "filename": "src/librustc_trans/trans/datum.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e135fa5b49b215e03802ea6fc99405fab8cbe8e9/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e135fa5b49b215e03802ea6fc99405fab8cbe8e9/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs?ref=e135fa5b49b215e03802ea6fc99405fab8cbe8e9", "patch": "@@ -352,13 +352,6 @@ impl<'tcx> Datum<'tcx, Expr> {\n             |_| bcx.sess().bug(\"assert_lvalue given rvalue\"))\n     }\n \n-    /// Asserts that this datum *is* an lvalue and returns it.\n-    pub fn assert_rvalue(self, bcx: Block) -> Datum<'tcx, Rvalue> {\n-        self.match_kind(\n-            |_| bcx.sess().bug(\"assert_rvalue given lvalue\"),\n-            |r| r)\n-    }\n-\n     pub fn store_to_dest<'blk>(self,\n                                bcx: Block<'blk, 'tcx>,\n                                dest: expr::Dest,"}, {"sha": "c00c477f4b8d2d3e5df4c31e47ac6aab2cd62c17", "filename": "src/librustc_trans/trans/mod.rs", "status": "modified", "additions": 61, "deletions": 37, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/e135fa5b49b215e03802ea6fc99405fab8cbe8e9/src%2Flibrustc_trans%2Ftrans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e135fa5b49b215e03802ea6fc99405fab8cbe8e9/src%2Flibrustc_trans%2Ftrans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmod.rs?ref=e135fa5b49b215e03802ea6fc99405fab8cbe8e9", "patch": "@@ -8,40 +8,64 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub mod doc;\n-pub mod macros;\n-pub mod inline;\n-pub mod monomorphize;\n-pub mod controlflow;\n-pub mod glue;\n-pub mod datum;\n-pub mod callee;\n-pub mod expr;\n-pub mod common;\n-pub mod context;\n-pub mod consts;\n-pub mod type_of;\n-pub mod build;\n-pub mod builder;\n-pub mod base;\n-pub mod _match;\n-pub mod closure;\n-pub mod tvec;\n-pub mod meth;\n-pub mod cabi;\n-pub mod cabi_x86;\n-pub mod cabi_x86_64;\n-pub mod cabi_x86_win64;\n-pub mod cabi_arm;\n-pub mod cabi_mips;\n-pub mod foreign;\n-pub mod intrinsic;\n-pub mod debuginfo;\n-pub mod machine;\n-pub mod adt;\n-pub mod asm;\n-pub mod type_;\n-pub mod value;\n-pub mod basic_block;\n-pub mod llrepr;\n-pub mod cleanup;\n+use llvm::{ContextRef, ModuleRef};\n+use metadata::common::LinkMeta;\n+use middle::dependency_format;\n+\n+pub use self::base::trans_crate;\n+pub use self::context::CrateContext;\n+pub use self::common::gensym_name;\n+\n+mod doc;\n+mod macros;\n+mod inline;\n+mod monomorphize;\n+mod controlflow;\n+mod glue;\n+mod datum;\n+mod callee;\n+mod expr;\n+mod common;\n+mod context;\n+mod consts;\n+mod type_of;\n+mod build;\n+mod builder;\n+mod base;\n+mod _match;\n+mod closure;\n+mod tvec;\n+mod meth;\n+mod cabi;\n+mod cabi_x86;\n+mod cabi_x86_64;\n+mod cabi_x86_win64;\n+mod cabi_arm;\n+mod cabi_mips;\n+mod foreign;\n+mod intrinsic;\n+mod debuginfo;\n+mod machine;\n+mod adt;\n+mod asm;\n+mod type_;\n+mod value;\n+mod basic_block;\n+mod llrepr;\n+mod cleanup;\n+\n+pub struct ModuleTranslation {\n+    pub llcx: ContextRef,\n+    pub llmod: ModuleRef,\n+}\n+\n+pub struct CrateTranslation {\n+    pub modules: Vec<ModuleTranslation>,\n+    pub metadata_module: ModuleTranslation,\n+    pub link: LinkMeta,\n+    pub metadata: Vec<u8>,\n+    pub reachable: Vec<String>,\n+    pub crate_formats: dependency_format::Dependencies,\n+    pub no_builtins: bool,\n+}\n+"}, {"sha": "7e02891160ad2fa96f63b2c386053442c843ee73", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e135fa5b49b215e03802ea6fc99405fab8cbe8e9/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e135fa5b49b215e03802ea6fc99405fab8cbe8e9/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=e135fa5b49b215e03802ea6fc99405fab8cbe8e9", "patch": "@@ -39,7 +39,6 @@ use syntax::parse::token;\n use syntax::ptr::P;\n \n use rustc_trans::back::link;\n-use rustc_trans::driver::driver;\n use rustc::metadata::cstore;\n use rustc::metadata::csearch;\n use rustc::metadata::decoder;\n@@ -48,6 +47,7 @@ use rustc::middle::subst;\n use rustc::middle::subst::VecPerParamSpace;\n use rustc::middle::ty;\n use rustc::middle::stability;\n+use rustc::session::config;\n \n use std::rc::Rc;\n use std::u32;\n@@ -131,7 +131,7 @@ impl<'a, 'tcx> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx> {\n         externs.sort_by(|&(a, _), &(b, _)| a.cmp(&b));\n \n         // Figure out the name of this crate\n-        let input = driver::FileInput(cx.src.clone());\n+        let input = config::Input::File(cx.src.clone());\n         let name = link::find_crate_name(None, self.attrs.as_slice(), &input);\n \n         // Clean the crate, translating the entire libsyntax AST to one that is"}, {"sha": "1eb6ba65860a12b61794b166d61e7f21ec020497", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e135fa5b49b215e03802ea6fc99405fab8cbe8e9/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e135fa5b49b215e03802ea6fc99405fab8cbe8e9/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=e135fa5b49b215e03802ea6fc99405fab8cbe8e9", "patch": "@@ -83,7 +83,7 @@ pub fn run_core(libs: Vec<Path>, cfgs: Vec<String>, externs: Externs,\n \n     // Parse, resolve, and typecheck the given crate.\n \n-    let input = driver::FileInput(cpath.clone());\n+    let input = config::Input::File(cpath.clone());\n \n     let warning_lint = lint::builtin::WARNINGS.name_lower();\n \n@@ -122,7 +122,7 @@ pub fn run_core(libs: Vec<Path>, cfgs: Vec<String>, externs: Externs,\n     let ast_map = driver::assign_node_ids_and_map(&sess, &mut forest);\n \n     let type_arena = TypedArena::new();\n-    let driver::CrateAnalysis {\n+    let ty::CrateAnalysis {\n         exported_items, public_items, ty_cx, ..\n     } = driver::phase_3_run_analysis_passes(sess, ast_map, &type_arena, name);\n "}, {"sha": "8a18c75beddc3d349ed1b071a72767bd00b2cdd0", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e135fa5b49b215e03802ea6fc99405fab8cbe8e9/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e135fa5b49b215e03802ea6fc99405fab8cbe8e9/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=e135fa5b49b215e03802ea6fc99405fab8cbe8e9", "patch": "@@ -42,7 +42,7 @@ pub fn run(input: &str,\n            crate_name: Option<String>)\n            -> int {\n     let input_path = Path::new(input);\n-    let input = driver::FileInput(input_path.clone());\n+    let input = config::Input::File(input_path.clone());\n \n     let sessopts = config::Options {\n         maybe_sysroot: Some(os::self_exe_path().unwrap().dir_path()),\n@@ -110,7 +110,7 @@ fn runtest(test: &str, cratename: &str, libs: Vec<Path>, externs: core::Externs,\n     // the test harness wants its own `main` & top level functions, so\n     // never wrap the test in `fn main() { ... }`\n     let test = maketest(test, Some(cratename), true, as_test_harness);\n-    let input = driver::StrInput(test.to_string());\n+    let input = config::Input::Str(test.to_string());\n \n     let sessopts = config::Options {\n         maybe_sysroot: Some(os::self_exe_path().unwrap().dir_path()),"}]}