{"sha": "343b0ccfb9e7dd341c1badbb9fb4583ceba85fd4", "node_id": "C_kwDOAAsO6NoAKDM0M2IwY2NmYjllN2RkMzQxYzFiYWRiYjlmYjQ1ODNjZWJhODVmZDQ", "commit": {"author": {"name": "Jake Heinz", "email": "jh@discordapp.com", "date": "2022-01-14T09:21:25Z"}, "committer": {"name": "Jake Heinz", "email": "jh@discordapp.com", "date": "2022-01-14T09:21:25Z"}, "message": "simplify", "tree": {"sha": "99cbe8fe5851e79384877827f2fcd32edf135e02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99cbe8fe5851e79384877827f2fcd32edf135e02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/343b0ccfb9e7dd341c1badbb9fb4583ceba85fd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/343b0ccfb9e7dd341c1badbb9fb4583ceba85fd4", "html_url": "https://github.com/rust-lang/rust/commit/343b0ccfb9e7dd341c1badbb9fb4583ceba85fd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/343b0ccfb9e7dd341c1badbb9fb4583ceba85fd4/comments", "author": {"login": "jhgg", "id": 5489149, "node_id": "MDQ6VXNlcjU0ODkxNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5489149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhgg", "html_url": "https://github.com/jhgg", "followers_url": "https://api.github.com/users/jhgg/followers", "following_url": "https://api.github.com/users/jhgg/following{/other_user}", "gists_url": "https://api.github.com/users/jhgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhgg/subscriptions", "organizations_url": "https://api.github.com/users/jhgg/orgs", "repos_url": "https://api.github.com/users/jhgg/repos", "events_url": "https://api.github.com/users/jhgg/events{/privacy}", "received_events_url": "https://api.github.com/users/jhgg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jhgg", "id": 5489149, "node_id": "MDQ6VXNlcjU0ODkxNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5489149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhgg", "html_url": "https://github.com/jhgg", "followers_url": "https://api.github.com/users/jhgg/followers", "following_url": "https://api.github.com/users/jhgg/following{/other_user}", "gists_url": "https://api.github.com/users/jhgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhgg/subscriptions", "organizations_url": "https://api.github.com/users/jhgg/orgs", "repos_url": "https://api.github.com/users/jhgg/repos", "events_url": "https://api.github.com/users/jhgg/events{/privacy}", "received_events_url": "https://api.github.com/users/jhgg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3168148cc626c26658d49f7304ff7f07194baec2", "url": "https://api.github.com/repos/rust-lang/rust/commits/3168148cc626c26658d49f7304ff7f07194baec2", "html_url": "https://github.com/rust-lang/rust/commit/3168148cc626c26658d49f7304ff7f07194baec2"}], "stats": {"total": 31, "additions": 13, "deletions": 18}, "files": [{"sha": "6464d599f08fd5dd078c2a8353e3042c4ee7a627", "filename": "crates/ide/src/prime_caches.rs", "status": "modified", "additions": 13, "deletions": 18, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/343b0ccfb9e7dd341c1badbb9fb4583ceba85fd4/crates%2Fide%2Fsrc%2Fprime_caches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/343b0ccfb9e7dd341c1badbb9fb4583ceba85fd4/crates%2Fide%2Fsrc%2Fprime_caches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fprime_caches.rs?ref=343b0ccfb9e7dd341c1badbb9fb4583ceba85fd4", "patch": "@@ -79,26 +79,18 @@ where\n \n         enum ParallelPrimeCacheWorkerProgress {\n             BeginCrate { crate_id: CrateId, crate_name: String },\n-            EndCrate { crate_id: CrateId, cancelled: bool },\n+            EndCrate { crate_id: CrateId },\n         }\n \n         let prime_caches_worker = move |db: Snapshot<RootDatabase>| {\n             while let Ok((crate_id, crate_name)) = work_receiver.recv() {\n                 progress_sender\n                     .send(ParallelPrimeCacheWorkerProgress::BeginCrate { crate_id, crate_name })?;\n \n-                let cancelled = Cancelled::catch(|| {\n-                    // This also computes the DefMap\n-                    db.import_map(crate_id);\n-                })\n-                .is_err();\n+                // This also computes the DefMap\n+                db.import_map(crate_id);\n \n-                progress_sender\n-                    .send(ParallelPrimeCacheWorkerProgress::EndCrate { crate_id, cancelled })?;\n-\n-                if cancelled {\n-                    break;\n-                }\n+                progress_sender.send(ParallelPrimeCacheWorkerProgress::EndCrate { crate_id })?;\n             }\n \n             Ok::<_, crossbeam_channel::SendError<_>>(())\n@@ -113,11 +105,12 @@ where\n         let crates_total = crates_to_prime.len();\n         let mut crates_done = 0;\n \n-        let mut is_cancelled = false;\n         let mut crates_currently_indexing =\n             FxHashMap::with_capacity_and_hasher(num_worker_threads as _, Default::default());\n \n-        while !crates_to_prime.is_empty() && !is_cancelled {\n+        while !crates_to_prime.is_empty() {\n+            db.unwind_if_cancelled();\n+\n             for crate_id in &mut crates_to_prime {\n                 work_sender\n                     .send((\n@@ -129,17 +122,20 @@ where\n \n             let worker_progress = match progress_receiver.recv() {\n                 Ok(p) => p,\n-                Err(_) => break,\n+                Err(_) => {\n+                    // our workers may have died from a cancelled task, so we'll check and re-raise here.\n+                    db.unwind_if_cancelled();\n+                    break;\n+                }\n             };\n             match worker_progress {\n                 ParallelPrimeCacheWorkerProgress::BeginCrate { crate_id, crate_name } => {\n                     crates_currently_indexing.insert(crate_id, crate_name);\n                 }\n-                ParallelPrimeCacheWorkerProgress::EndCrate { crate_id, cancelled } => {\n+                ParallelPrimeCacheWorkerProgress::EndCrate { crate_id } => {\n                     crates_currently_indexing.remove(&crate_id);\n                     crates_to_prime.mark_done(crate_id);\n                     crates_done += 1;\n-                    is_cancelled = cancelled;\n                 }\n             };\n \n@@ -150,7 +146,6 @@ where\n             };\n \n             cb(progress);\n-            db.unwind_if_cancelled();\n         }\n     })\n     .unwrap();"}]}