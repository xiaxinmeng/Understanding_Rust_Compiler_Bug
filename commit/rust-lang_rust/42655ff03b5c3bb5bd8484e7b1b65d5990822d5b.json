{"sha": "42655ff03b5c3bb5bd8484e7b1b65d5990822d5b", "node_id": "C_kwDOAAsO6NoAKDQyNjU1ZmYwM2I1YzNiYjViZDg0ODRlN2IxYjY1ZDU5OTA4MjJkNWI", "commit": {"author": {"name": "Lukas Bergdoll", "email": "lukas.bergdoll@gmail.com", "date": "2023-05-16T16:38:32Z"}, "committer": {"name": "Lukas Bergdoll", "email": "lukas.bergdoll@gmail.com", "date": "2023-05-16T16:38:32Z"}, "message": "Use code with reliable branchless code-gen for slice::sort merge\n\nThe recent LLVM 16 update changes code-gen to be not branchless anymore, in the\nslice::sort implementation merge function. This improves performance by 30% for\nrandom patterns, restoring the performance to the state with LLVM 15.", "tree": {"sha": "39cb5525d5d0557dbcc562e955c67aa06b05e2f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39cb5525d5d0557dbcc562e955c67aa06b05e2f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42655ff03b5c3bb5bd8484e7b1b65d5990822d5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42655ff03b5c3bb5bd8484e7b1b65d5990822d5b", "html_url": "https://github.com/rust-lang/rust/commit/42655ff03b5c3bb5bd8484e7b1b65d5990822d5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42655ff03b5c3bb5bd8484e7b1b65d5990822d5b/comments", "author": {"login": "Voultapher", "id": 6864584, "node_id": "MDQ6VXNlcjY4NjQ1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6864584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Voultapher", "html_url": "https://github.com/Voultapher", "followers_url": "https://api.github.com/users/Voultapher/followers", "following_url": "https://api.github.com/users/Voultapher/following{/other_user}", "gists_url": "https://api.github.com/users/Voultapher/gists{/gist_id}", "starred_url": "https://api.github.com/users/Voultapher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Voultapher/subscriptions", "organizations_url": "https://api.github.com/users/Voultapher/orgs", "repos_url": "https://api.github.com/users/Voultapher/repos", "events_url": "https://api.github.com/users/Voultapher/events{/privacy}", "received_events_url": "https://api.github.com/users/Voultapher/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Voultapher", "id": 6864584, "node_id": "MDQ6VXNlcjY4NjQ1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6864584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Voultapher", "html_url": "https://github.com/Voultapher", "followers_url": "https://api.github.com/users/Voultapher/followers", "following_url": "https://api.github.com/users/Voultapher/following{/other_user}", "gists_url": "https://api.github.com/users/Voultapher/gists{/gist_id}", "starred_url": "https://api.github.com/users/Voultapher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Voultapher/subscriptions", "organizations_url": "https://api.github.com/users/Voultapher/orgs", "repos_url": "https://api.github.com/users/Voultapher/repos", "events_url": "https://api.github.com/users/Voultapher/events{/privacy}", "received_events_url": "https://api.github.com/users/Voultapher/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a673ad6b5746a6256cb898edb8b888163df1872c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a673ad6b5746a6256cb898edb8b888163df1872c", "html_url": "https://github.com/rust-lang/rust/commit/a673ad6b5746a6256cb898edb8b888163df1872c"}], "stats": {"total": 38, "additions": 12, "deletions": 26}, "files": [{"sha": "eb8595ca90d56601ef3bb39206f9acef2780cb5e", "filename": "library/core/src/slice/sort.rs", "status": "modified", "additions": 12, "deletions": 26, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/42655ff03b5c3bb5bd8484e7b1b65d5990822d5b/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42655ff03b5c3bb5bd8484e7b1b65d5990822d5b/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs?ref=42655ff03b5c3bb5bd8484e7b1b65d5990822d5b", "patch": "@@ -1085,12 +1085,12 @@ where\n \n             // SAFETY: left and right must be valid and part of v same for out.\n             unsafe {\n-                let to_copy = if is_less(&*right, &**left) {\n-                    get_and_increment(&mut right)\n-                } else {\n-                    get_and_increment(left)\n-                };\n-                ptr::copy_nonoverlapping(to_copy, get_and_increment(out), 1);\n+                let is_l = is_less(&*right, &**left);\n+                let to_copy = if is_l { right } else { *left };\n+                ptr::copy_nonoverlapping(to_copy, *out, 1);\n+                *out = out.add(1);\n+                right = right.add(is_l as usize);\n+                *left = left.add(!is_l as usize);\n             }\n         }\n     } else {\n@@ -1113,32 +1113,18 @@ where\n \n             // SAFETY: left and right must be valid and part of v same for out.\n             unsafe {\n-                let to_copy = if is_less(&*right.sub(1), &*left.sub(1)) {\n-                    decrement_and_get(left)\n-                } else {\n-                    decrement_and_get(right)\n-                };\n-                ptr::copy_nonoverlapping(to_copy, decrement_and_get(&mut out), 1);\n+                let is_l = is_less(&*right.sub(1), &*left.sub(1));\n+                *left = left.sub(is_l as usize);\n+                *right = right.sub(!is_l as usize);\n+                let to_copy = if is_l { *left } else { *right };\n+                out = out.sub(1);\n+                ptr::copy_nonoverlapping(to_copy, out, 1);\n             }\n         }\n     }\n     // Finally, `hole` gets dropped. If the shorter run was not fully consumed, whatever remains of\n     // it will now be copied into the hole in `v`.\n \n-    unsafe fn get_and_increment<T>(ptr: &mut *mut T) -> *mut T {\n-        let old = *ptr;\n-\n-        // SAFETY: ptr.add(1) must still be a valid pointer and part of `v`.\n-        *ptr = unsafe { ptr.add(1) };\n-        old\n-    }\n-\n-    unsafe fn decrement_and_get<T>(ptr: &mut *mut T) -> *mut T {\n-        // SAFETY: ptr.sub(1) must still be a valid pointer and part of `v`.\n-        *ptr = unsafe { ptr.sub(1) };\n-        *ptr\n-    }\n-\n     // When dropped, copies the range `start..end` into `dest..`.\n     struct MergeHole<T> {\n         start: *mut T,"}]}