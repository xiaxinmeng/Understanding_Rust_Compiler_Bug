{"sha": "615fd141bde1e4319f95c3ea2981a1f5a8aa5dbd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxNWZkMTQxYmRlMWU0MzE5Zjk1YzNlYTI5ODFhMWY1YThhYTVkYmQ=", "commit": {"author": {"name": "Nam Nguyen", "email": "nanguye@microsoft.com", "date": "2021-02-08T19:52:59Z"}, "committer": {"name": "Nam Nguyen", "email": "nanguye@microsoft.com", "date": "2021-02-09T23:59:28Z"}, "message": "Set the kind for local variables created by &str and slice arguments to LocalVariable", "tree": {"sha": "27acf6281373a4326f538772c90976d153fd921e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27acf6281373a4326f538772c90976d153fd921e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/615fd141bde1e4319f95c3ea2981a1f5a8aa5dbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/615fd141bde1e4319f95c3ea2981a1f5a8aa5dbd", "html_url": "https://github.com/rust-lang/rust/commit/615fd141bde1e4319f95c3ea2981a1f5a8aa5dbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/615fd141bde1e4319f95c3ea2981a1f5a8aa5dbd/comments", "author": {"login": "nanguye", "id": 58788112, "node_id": "MDQ6VXNlcjU4Nzg4MTEy", "avatar_url": "https://avatars.githubusercontent.com/u/58788112?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nanguye", "html_url": "https://github.com/nanguye", "followers_url": "https://api.github.com/users/nanguye/followers", "following_url": "https://api.github.com/users/nanguye/following{/other_user}", "gists_url": "https://api.github.com/users/nanguye/gists{/gist_id}", "starred_url": "https://api.github.com/users/nanguye/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nanguye/subscriptions", "organizations_url": "https://api.github.com/users/nanguye/orgs", "repos_url": "https://api.github.com/users/nanguye/repos", "events_url": "https://api.github.com/users/nanguye/events{/privacy}", "received_events_url": "https://api.github.com/users/nanguye/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nanguye", "id": 58788112, "node_id": "MDQ6VXNlcjU4Nzg4MTEy", "avatar_url": "https://avatars.githubusercontent.com/u/58788112?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nanguye", "html_url": "https://github.com/nanguye", "followers_url": "https://api.github.com/users/nanguye/followers", "following_url": "https://api.github.com/users/nanguye/following{/other_user}", "gists_url": "https://api.github.com/users/nanguye/gists{/gist_id}", "starred_url": "https://api.github.com/users/nanguye/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nanguye/subscriptions", "organizations_url": "https://api.github.com/users/nanguye/orgs", "repos_url": "https://api.github.com/users/nanguye/repos", "events_url": "https://api.github.com/users/nanguye/events{/privacy}", "received_events_url": "https://api.github.com/users/nanguye/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "921ec4b3fca17cc777766c240038d7d50ba98e0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/921ec4b3fca17cc777766c240038d7d50ba98e0d", "html_url": "https://github.com/rust-lang/rust/commit/921ec4b3fca17cc777766c240038d7d50ba98e0d"}], "stats": {"total": 30, "additions": 25, "deletions": 5}, "files": [{"sha": "ea59e1831188b82bca2bb0db58037f9d3c1bcba9", "filename": "compiler/rustc_codegen_ssa/src/mir/debuginfo.rs", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/615fd141bde1e4319f95c3ea2981a1f5a8aa5dbd/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/615fd141bde1e4319f95c3ea2981a1f5a8aa5dbd/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs?ref=615fd141bde1e4319f95c3ea2981a1f5a8aa5dbd", "patch": "@@ -320,6 +320,8 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     ) -> Option<IndexVec<mir::Local, Vec<PerLocalVarDebugInfo<'tcx, Bx::DIVariable>>>> {\n         let full_debug_info = self.cx.sess().opts.debuginfo == DebugInfo::Full;\n \n+        let target_is_msvc = self.cx.sess().target.is_like_msvc;\n+\n         if !full_debug_info && self.cx.sess().fewer_names() {\n             return None;\n         }\n@@ -341,11 +343,29 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                             && var.source_info.scope == mir::OUTERMOST_SOURCE_SCOPE\n                         {\n                             let arg_index = place.local.index() - 1;\n-\n-                            // FIXME(eddyb) shouldn't `ArgumentVariable` indices be\n-                            // offset in closures to account for the hidden environment?\n-                            // Also, is this `+ 1` needed at all?\n-                            VariableKind::ArgumentVariable(arg_index + 1)\n+                            if target_is_msvc {\n+                                // Rust compiler decomposes every &str or slice argument into two components:\n+                                // a pointer to the memory address where the data is stored and a usize representing\n+                                // the length of the str (or slice). These components will later be used to reconstruct\n+                                // the original argument inside the body of the function that owns it (see the\n+                                // definition of debug_introduce_local for more details).\n+                                //\n+                                // Since the original argument is declared inside a function rather than being passed\n+                                // in as an argument, it must be marked as a LocalVariable for MSVC debuggers to visualize\n+                                // its data correctly. (See issue #81894 for an in-depth description of the problem).\n+                                match *var_ty.kind() {\n+                                    ty::Ref(_, inner_type, _) => match *inner_type.kind() {\n+                                        ty::Slice(_) | ty::Str => VariableKind::LocalVariable,\n+                                        _ => VariableKind::ArgumentVariable(arg_index + 1),\n+                                    },\n+                                    _ => VariableKind::ArgumentVariable(arg_index + 1),\n+                                }\n+                            } else {\n+                                // FIXME(eddyb) shouldn't `ArgumentVariable` indices be\n+                                // offset in closures to account for the hidden environment?\n+                                // Also, is this `+ 1` needed at all?\n+                                VariableKind::ArgumentVariable(arg_index + 1)\n+                            }\n                         } else {\n                             VariableKind::LocalVariable\n                         };"}]}