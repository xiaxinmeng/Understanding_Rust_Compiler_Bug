{"sha": "378b64392f5bdbcffbdc6506b00b6bfcfcd46d73", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3OGI2NDM5MmY1YmRiY2ZmYmRjNjUwNmIwMGI2YmZjZmNkNDZkNzM=", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-09-15T20:11:46Z"}, "committer": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-09-15T23:10:44Z"}, "message": "BTreeMap: avoid slices even more", "tree": {"sha": "5d90b09c8e175daedc7fbbc735fa329dd6d84be0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d90b09c8e175daedc7fbbc735fa329dd6d84be0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/378b64392f5bdbcffbdc6506b00b6bfcfcd46d73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/378b64392f5bdbcffbdc6506b00b6bfcfcd46d73", "html_url": "https://github.com/rust-lang/rust/commit/378b64392f5bdbcffbdc6506b00b6bfcfcd46d73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/378b64392f5bdbcffbdc6506b00b6bfcfcd46d73/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a874956d940ecb3ed524b6176a171219ac4787ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/a874956d940ecb3ed524b6176a171219ac4787ea", "html_url": "https://github.com/rust-lang/rust/commit/a874956d940ecb3ed524b6176a171219ac4787ea"}], "stats": {"total": 45, "additions": 29, "deletions": 16}, "files": [{"sha": "8776a5efbe4f5ad084f450efd848426beaf305fa", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 29, "deletions": 16, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/378b64392f5bdbcffbdc6506b00b6bfcfcd46d73/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/378b64392f5bdbcffbdc6506b00b6bfcfcd46d73/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=378b64392f5bdbcffbdc6506b00b6bfcfcd46d73", "patch": "@@ -465,6 +465,22 @@ impl<'a, K, V, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n         unsafe { &mut (*self.node.as_ptr()) }\n     }\n \n+    /// Borrows a mutable reference to one of the keys stored in the node.\n+    ///\n+    /// # Safety\n+    /// The node has more than `idx` initialized elements.\n+    pub unsafe fn key_mut_at(&mut self, idx: usize) -> &mut K {\n+        unsafe { self.reborrow_mut().into_key_mut_at(idx) }\n+    }\n+\n+    /// Borrows a mutable reference to one of the values stored in the node.\n+    ///\n+    /// # Safety\n+    /// The node has more than `idx` initialized elements.\n+    pub unsafe fn val_mut_at(&mut self, idx: usize) -> &mut V {\n+        unsafe { self.reborrow_mut().into_val_mut_at(idx) }\n+    }\n+\n     fn keys_mut(&mut self) -> &mut [K] {\n         // SAFETY: the caller will not be able to call further methods on self\n         // until the key slice reference is dropped, as we have unique access\n@@ -555,15 +571,14 @@ impl<'a, K, V, Type> NodeRef<marker::ValMut<'a>, K, V, Type> {\n impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::Leaf> {\n     /// Adds a key/value pair to the end of the node.\n     pub fn push(&mut self, key: K, val: V) {\n-        assert!(self.len() < CAPACITY);\n-\n-        let idx = self.len();\n-\n+        let len = &mut self.as_leaf_mut().len;\n+        let idx = *len as usize;\n+        assert!(idx < CAPACITY);\n+        *len += 1;\n         unsafe {\n-            ptr::write(self.keys_mut().get_unchecked_mut(idx), key);\n-            ptr::write(self.vals_mut().get_unchecked_mut(idx), val);\n+            ptr::write(self.key_mut_at(idx), key);\n+            ptr::write(self.val_mut_at(idx), val);\n         }\n-        self.as_leaf_mut().len += 1;\n     }\n \n     /// Adds a key/value pair to the beginning of the node.\n@@ -600,17 +615,15 @@ impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {\n     /// the end of the node.\n     pub fn push(&mut self, key: K, val: V, edge: Root<K, V>) {\n         assert!(edge.height == self.height - 1);\n-        assert!(self.len() < CAPACITY);\n-\n-        let idx = self.len();\n \n+        let len = &mut self.as_leaf_mut().len;\n+        let idx = *len as usize;\n+        assert!(idx < CAPACITY);\n+        *len += 1;\n         unsafe {\n-            ptr::write(self.keys_mut().get_unchecked_mut(idx), key);\n-            ptr::write(self.vals_mut().get_unchecked_mut(idx), val);\n+            ptr::write(self.key_mut_at(idx), key);\n+            ptr::write(self.val_mut_at(idx), val);\n             self.as_internal_mut().edges.get_unchecked_mut(idx + 1).write(edge.node);\n-\n-            self.as_leaf_mut().len += 1;\n-\n             Handle::new_edge(self.reborrow_mut(), idx + 1).correct_parent_link();\n         }\n     }\n@@ -903,7 +916,7 @@ impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, mark\n     /// The returned pointer points to the inserted value.\n     fn insert_fit(&mut self, key: K, val: V) -> *mut V {\n         self.leafy_insert_fit(key, val);\n-        unsafe { self.node.vals_mut().get_unchecked_mut(self.idx) }\n+        unsafe { self.node.val_mut_at(self.idx) }\n     }\n }\n "}]}