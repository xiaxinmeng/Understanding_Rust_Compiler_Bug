{"sha": "9d5fa7ac3b7b4720dcfcb37001a5b82098597e44", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkNWZhN2FjM2I3YjQ3MjBkY2ZjYjM3MDAxYTViODIwOTg1OTdlNDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-16T20:22:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-16T20:22:26Z"}, "message": "auto merge of #17947 : lukemetz/rust/master, r=aturon\n\nAsciiStr::to_lower is now AsciiStr::to_lowercase and AsciiStr::to_upper is AsciiStr::to_uppercase to match Ascii trait.\r\n\r\nPart of issue #17790.\r\n\r\nThis is my first pull request so let me know if anything is incorrect.\r\n\r\nThanks!\r\n\r\n[breaking-changes]", "tree": {"sha": "b7539c901cb427f55b1c78f77fd76cef2b3dd4e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7539c901cb427f55b1c78f77fd76cef2b3dd4e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d5fa7ac3b7b4720dcfcb37001a5b82098597e44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d5fa7ac3b7b4720dcfcb37001a5b82098597e44", "html_url": "https://github.com/rust-lang/rust/commit/9d5fa7ac3b7b4720dcfcb37001a5b82098597e44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d5fa7ac3b7b4720dcfcb37001a5b82098597e44/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b979739713f54eb9315ed5f88b8f06d43d0bbb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b979739713f54eb9315ed5f88b8f06d43d0bbb5", "html_url": "https://github.com/rust-lang/rust/commit/8b979739713f54eb9315ed5f88b8f06d43d0bbb5"}, {"sha": "0ad6f0aa556e91e34fd46c20672bad973614adc0", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ad6f0aa556e91e34fd46c20672bad973614adc0", "html_url": "https://github.com/rust-lang/rust/commit/0ad6f0aa556e91e34fd46c20672bad973614adc0"}], "stats": {"total": 58, "additions": 39, "deletions": 19}, "files": [{"sha": "3751f8f4dc0bfbd3b94b73858a33e696f28f11c5", "filename": "src/compiletest/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d5fa7ac3b7b4720dcfcb37001a5b82098597e44/src%2Fcompiletest%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d5fa7ac3b7b4720dcfcb37001a5b82098597e44/src%2Fcompiletest%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Ferrors.rs?ref=9d5fa7ac3b7b4720dcfcb37001a5b82098597e44", "patch": "@@ -31,7 +31,7 @@ pub fn load_errors(re: &Regex, testfile: &Path) -> Vec<ExpectedError> {\n fn parse_expected(line_num: uint, line: &str, re: &Regex) -> Option<ExpectedError> {\n     re.captures(line).and_then(|caps| {\n         let adjusts = caps.name(\"adjusts\").len();\n-        let kind = caps.name(\"kind\").to_ascii().to_lower().into_string();\n+        let kind = caps.name(\"kind\").to_ascii().to_lowercase().into_string();\n         let msg = caps.name(\"msg\").trim().to_string();\n \n         debug!(\"line={} kind={} msg={}\", line_num, kind, msg);"}, {"sha": "3f1590773aa7c06ded09286bc1af43d00f9b3877", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d5fa7ac3b7b4720dcfcb37001a5b82098597e44/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d5fa7ac3b7b4720dcfcb37001a5b82098597e44/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=9d5fa7ac3b7b4720dcfcb37001a5b82098597e44", "patch": "@@ -228,7 +228,7 @@ pub fn render(w: &mut fmt::Formatter, s: &str, print_toc: bool) -> fmt::Result {\n         // Transform the contents of the header into a hyphenated string\n         let id = s.as_slice().words().map(|s| {\n             match s.to_ascii_opt() {\n-                Some(s) => s.to_lower().into_string(),\n+                Some(s) => s.to_lowercase().into_string(),\n                 None => s.to_string()\n             }\n         }).collect::<Vec<String>>().connect(\"-\");"}, {"sha": "1c80627d3282bb002032473fa17639eda1ce2e51", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 34, "deletions": 14, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/9d5fa7ac3b7b4720dcfcb37001a5b82098597e44/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d5fa7ac3b7b4720dcfcb37001a5b82098597e44/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=9d5fa7ac3b7b4720dcfcb37001a5b82098597e44", "patch": "@@ -62,8 +62,8 @@ impl Ascii {\n         Ascii{chr: ASCII_LOWER_MAP[self.chr as uint]}\n     }\n \n+    /// Deprecated: use `to_uppercase`\n     #[inline]\n-    #[allow(missing_doc)]\n     #[deprecated=\"renamed to `to_uppercase`\"]\n     pub fn to_upper(self) -> Ascii {\n         self.to_uppercase()\n@@ -139,8 +139,8 @@ impl Ascii {\n         (self.chr - 0x20) < 0x5F\n     }\n \n+    /// Deprecated: use `to_lowercase`\n     #[inline]\n-    #[allow(missing_doc)]\n     #[deprecated=\"renamed to `is_lowercase`\"]\n     pub fn is_lower(&self) -> bool {\n         self.is_lowercase()\n@@ -319,12 +319,20 @@ pub trait AsciiStr {\n     /// Convert to a string.\n     fn as_str_ascii<'a>(&'a self) -> &'a str;\n \n-    /// Convert to vector representing a lower cased ascii string.\n+    /// Deprecated: use `to_lowercase`\n+    #[deprecated=\"renamed `to_lowercase`\"]\n     fn to_lower(&self) -> Vec<Ascii>;\n \n-    /// Convert to vector representing a upper cased ascii string.\n+    /// Convert to vector representing a lower cased ascii string.\n+    fn to_lowercase(&self) -> Vec<Ascii>;\n+\n+    /// Deprecated: use `to_uppercase`\n+    #[deprecated=\"renamed `to_uppercase`\"]\n     fn to_upper(&self) -> Vec<Ascii>;\n \n+    /// Convert to vector representing a upper cased ascii string.\n+    fn to_uppercase(&self) -> Vec<Ascii>;\n+\n     /// Compares two Ascii strings ignoring case.\n     fn eq_ignore_case(self, other: &[Ascii]) -> bool;\n }\n@@ -337,11 +345,21 @@ impl<'a> AsciiStr for &'a [Ascii] {\n \n     #[inline]\n     fn to_lower(&self) -> Vec<Ascii> {\n+      self.to_lowercase()\n+    }\n+\n+    #[inline]\n+    fn to_lowercase(&self) -> Vec<Ascii> {\n         self.iter().map(|a| a.to_lowercase()).collect()\n     }\n \n     #[inline]\n     fn to_upper(&self) -> Vec<Ascii> {\n+      self.to_uppercase()\n+    }\n+\n+    #[inline]\n+    fn to_uppercase(&self) -> Vec<Ascii> {\n         self.iter().map(|a| a.to_uppercase()).collect()\n     }\n \n@@ -615,12 +633,13 @@ mod tests {\n         assert_eq!(v.as_slice().to_ascii(), b);\n         assert_eq!(\"( ;\".to_string().as_slice().to_ascii(), b);\n \n-        assert_eq!(\"abCDef&?#\".to_ascii().to_lower().into_string(), \"abcdef&?#\".to_string());\n-        assert_eq!(\"abCDef&?#\".to_ascii().to_upper().into_string(), \"ABCDEF&?#\".to_string());\n+        assert_eq!(\"abCDef&?#\".to_ascii().to_lowercase().into_string(), \"abcdef&?#\".to_string());\n+        assert_eq!(\"abCDef&?#\".to_ascii().to_uppercase().into_string(), \"ABCDEF&?#\".to_string());\n \n-        assert_eq!(\"\".to_ascii().to_lower().into_string(), \"\".to_string());\n-        assert_eq!(\"YMCA\".to_ascii().to_lower().into_string(), \"ymca\".to_string());\n-        assert_eq!(\"abcDEFxyz:.;\".to_ascii().to_upper().into_string(), \"ABCDEFXYZ:.;\".to_string());\n+        assert_eq!(\"\".to_ascii().to_lowercase().into_string(), \"\".to_string());\n+        assert_eq!(\"YMCA\".to_ascii().to_lowercase().into_string(), \"ymca\".to_string());\n+        let mixed = \"abcDEFxyz:.;\".to_ascii();\n+        assert_eq!(mixed.to_uppercase().into_string(), \"ABCDEFXYZ:.;\".to_string());\n \n         assert!(\"aBcDeF&?#\".to_ascii().eq_ignore_case(\"AbCdEf&?#\".to_ascii()));\n \n@@ -632,11 +651,12 @@ mod tests {\n \n     #[test]\n     fn test_ascii_vec_ng() {\n-        assert_eq!(\"abCDef&?#\".to_ascii().to_lower().into_string(), \"abcdef&?#\".to_string());\n-        assert_eq!(\"abCDef&?#\".to_ascii().to_upper().into_string(), \"ABCDEF&?#\".to_string());\n-        assert_eq!(\"\".to_ascii().to_lower().into_string(), \"\".to_string());\n-        assert_eq!(\"YMCA\".to_ascii().to_lower().into_string(), \"ymca\".to_string());\n-        assert_eq!(\"abcDEFxyz:.;\".to_ascii().to_upper().into_string(), \"ABCDEFXYZ:.;\".to_string());\n+        assert_eq!(\"abCDef&?#\".to_ascii().to_lowercase().into_string(), \"abcdef&?#\".to_string());\n+        assert_eq!(\"abCDef&?#\".to_ascii().to_uppercase().into_string(), \"ABCDEF&?#\".to_string());\n+        assert_eq!(\"\".to_ascii().to_lowercase().into_string(), \"\".to_string());\n+        assert_eq!(\"YMCA\".to_ascii().to_lowercase().into_string(), \"ymca\".to_string());\n+        let mixed = \"abcDEFxyz:.;\".to_ascii();\n+        assert_eq!(mixed.to_uppercase().into_string(), \"ABCDEFXYZ:.;\".to_string());\n     }\n \n     #[test]"}, {"sha": "586f420dc3e002fff1848b424a504bd073d04348", "filename": "src/libterm/terminfo/parm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d5fa7ac3b7b4720dcfcb37001a5b82098597e44/src%2Flibterm%2Fterminfo%2Fparm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d5fa7ac3b7b4720dcfcb37001a5b82098597e44/src%2Flibterm%2Fterminfo%2Fparm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparm.rs?ref=9d5fa7ac3b7b4720dcfcb37001a5b82098597e44", "patch": "@@ -530,7 +530,7 @@ fn format(val: Param, op: FormatOp, flags: Flags) -> Result<Vec<u8> ,String> {\n                 FormatHEX => {\n                     s = s.as_slice()\n                          .to_ascii()\n-                         .to_upper()\n+                         .to_uppercase()\n                          .into_bytes()\n                          .into_iter()\n                          .collect();"}, {"sha": "1754df9bf44a1305fc50c100a3a54b0907489dee", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d5fa7ac3b7b4720dcfcb37001a5b82098597e44/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d5fa7ac3b7b4720dcfcb37001a5b82098597e44/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=9d5fa7ac3b7b4720dcfcb37001a5b82098597e44", "patch": "@@ -65,7 +65,7 @@ fn sort_and_fmt(mm: &HashMap<Vec<u8> , uint>, total: uint) -> String {\n        buffer.push_str(format!(\"{} {:0.3f}\\n\",\n                                k.as_slice()\n                                .to_ascii()\n-                               .to_upper()\n+                               .to_uppercase()\n                                .into_string(), v).as_slice());\n    }\n \n@@ -74,7 +74,7 @@ fn sort_and_fmt(mm: &HashMap<Vec<u8> , uint>, total: uint) -> String {\n \n // given a map, search for the frequency of a pattern\n fn find(mm: &HashMap<Vec<u8> , uint>, key: String) -> uint {\n-   let key = key.into_ascii().as_slice().to_lower().into_string();\n+   let key = key.into_ascii().as_slice().to_lowercase().into_string();\n    match mm.find_equiv(&key.as_bytes()) {\n       option::None      => { return 0u; }\n       option::Some(&num) => { return num; }"}]}