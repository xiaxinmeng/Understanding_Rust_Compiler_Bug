{"sha": "66751ea73e849a9afaacaa15fc1cba0cb9d6e689", "node_id": "C_kwDOAAsO6NoAKDY2NzUxZWE3M2U4NDlhOWFmYWFjYWExNWZjMWNiYTBjYjlkNmU2ODk", "commit": {"author": {"name": "Waffle Maybe", "email": "waffle.lapkin@gmail.com", "date": "2023-01-09T16:42:36Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-01-17T07:48:19Z"}, "message": "tidy\n\nrustfmt, pleaaaaase, start supporting rust\n\nCo-authored-by: nils <48135649+Nilstrieb@users.noreply.github.com>", "tree": {"sha": "91413343a519467cee868481e34f58669f0830a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91413343a519467cee868481e34f58669f0830a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66751ea73e849a9afaacaa15fc1cba0cb9d6e689", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66751ea73e849a9afaacaa15fc1cba0cb9d6e689", "html_url": "https://github.com/rust-lang/rust/commit/66751ea73e849a9afaacaa15fc1cba0cb9d6e689", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66751ea73e849a9afaacaa15fc1cba0cb9d6e689/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09485eaae12b2f268d8e0c90671d759138d82778", "url": "https://api.github.com/repos/rust-lang/rust/commits/09485eaae12b2f268d8e0c90671d759138d82778", "html_url": "https://github.com/rust-lang/rust/commit/09485eaae12b2f268d8e0c90671d759138d82778"}], "stats": {"total": 35, "additions": 17, "deletions": 18}, "files": [{"sha": "fae6117f8f05224616eb95d0ed345b606b785890", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66751ea73e849a9afaacaa15fc1cba0cb9d6e689/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66751ea73e849a9afaacaa15fc1cba0cb9d6e689/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=66751ea73e849a9afaacaa15fc1cba0cb9d6e689", "patch": "@@ -847,7 +847,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n             let local_decls = &mut self.source.local_decls;\n             let loc = candidate.location;\n             let statement = &mut blocks[loc.block].statements[loc.statement_index];\n-            let StatementKind::Assign(box (_, Rvalue::Ref(region, borrow_kind, place)))= &mut statement.kind else {\n+            let StatementKind::Assign(box (_, Rvalue::Ref(region, borrow_kind, place))) = &mut statement.kind else {\n                 bug!()\n             };\n "}, {"sha": "72659bbeb3ab50cac6a4db60531a0bcf79ccf2d5", "filename": "compiler/rustc_mir_build/src/build/expr/stmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66751ea73e849a9afaacaa15fc1cba0cb9d6e689/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66751ea73e849a9afaacaa15fc1cba0cb9d6e689/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fstmt.rs?ref=66751ea73e849a9afaacaa15fc1cba0cb9d6e689", "patch": "@@ -113,7 +113,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 //\n                 // it is usually better to focus on `the_value` rather\n                 // than the entirety of block(s) surrounding it.\n-                let adjusted_span = \n+                let adjusted_span =\n                     if let ExprKind::Block { block } = expr.kind\n                         && let Some(tail_ex) = this.thir[block].expr\n                     {"}, {"sha": "aba5429da435f84292cb698a9e62d7d6b53b61ba", "filename": "compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/66751ea73e849a9afaacaa15fc1cba0cb9d6e689/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66751ea73e849a9afaacaa15fc1cba0cb9d6e689/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs?ref=66751ea73e849a9afaacaa15fc1cba0cb9d6e689", "patch": "@@ -141,23 +141,22 @@ impl IntRange {\n     ) -> Option<IntRange> {\n         let ty = value.ty();\n         if let Some((target_size, bias)) = Self::integral_size_and_signed_bias(tcx, ty) {\n-            let val =\n-                if let mir::ConstantKind::Val(ConstValue::Scalar(scalar), _) = value {\n-                    // For this specific pattern we can skip a lot of effort and go\n-                    // straight to the result, after doing a bit of checking. (We\n-                    // could remove this branch and just fall through, which\n-                    // is more general but much slower.)\n-                    scalar.to_bits_or_ptr_internal(target_size).unwrap().left()?\n-                } else {\n-                    if let mir::ConstantKind::Ty(c) = value\n-                        && let ty::ConstKind::Value(_) = c.kind() \n-                    {\n-                        bug!(\"encountered ConstValue in mir::ConstantKind::Ty, whereas this is expected to be in ConstantKind::Val\");\n-                    }\n+            let val = if let mir::ConstantKind::Val(ConstValue::Scalar(scalar), _) = value {\n+                // For this specific pattern we can skip a lot of effort and go\n+                // straight to the result, after doing a bit of checking. (We\n+                // could remove this branch and just fall through, which\n+                // is more general but much slower.)\n+                scalar.to_bits_or_ptr_internal(target_size).unwrap().left()?\n+            } else {\n+                if let mir::ConstantKind::Ty(c) = value\n+                    && let ty::ConstKind::Value(_) = c.kind()\n+                {\n+                    bug!(\"encountered ConstValue in mir::ConstantKind::Ty, whereas this is expected to be in ConstantKind::Val\");\n+                }\n \n-                    // This is a more general form of the previous case.\n-                    value.try_eval_bits(tcx, param_env, ty)?\n-                };\n+                // This is a more general form of the previous case.\n+                value.try_eval_bits(tcx, param_env, ty)?\n+            };\n             let val = val ^ bias;\n             Some(IntRange { range: val..=val, bias })\n         } else {"}]}