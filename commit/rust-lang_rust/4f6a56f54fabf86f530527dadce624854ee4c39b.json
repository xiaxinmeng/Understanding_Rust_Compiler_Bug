{"sha": "4f6a56f54fabf86f530527dadce624854ee4c39b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmNmE1NmY1NGZhYmY4NmY1MzA1MjdkYWRjZTYyNDg1NGVlNGMzOWI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-06-30T14:43:05Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-06T08:07:21Z"}, "message": "better error message when the program tries to spawn a thread", "tree": {"sha": "73e23862e57994c95e817e67d5e7ac0362d79f96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73e23862e57994c95e817e67d5e7ac0362d79f96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f6a56f54fabf86f530527dadce624854ee4c39b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f6a56f54fabf86f530527dadce624854ee4c39b", "html_url": "https://github.com/rust-lang/rust/commit/4f6a56f54fabf86f530527dadce624854ee4c39b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f6a56f54fabf86f530527dadce624854ee4c39b/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ca1b94e6d7e1a078b7fcef9a10e2ed07145e1bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ca1b94e6d7e1a078b7fcef9a10e2ed07145e1bd", "html_url": "https://github.com/rust-lang/rust/commit/2ca1b94e6d7e1a078b7fcef9a10e2ed07145e1bd"}], "stats": {"total": 76, "additions": 53, "deletions": 23}, "files": [{"sha": "20c24ad54fe846a62b4fd89fd3963b3c53f3d576", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f6a56f54fabf86f530527dadce624854ee4c39b/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6a56f54fabf86f530527dadce624854ee4c39b/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=4f6a56f54fabf86f530527dadce624854ee4c39b", "patch": "@@ -38,7 +38,7 @@ pub use crate::helpers::{EvalContextExt as HelpersEvalContextExt};\n pub use crate::mono_hash_map::MonoHashMap;\n pub use crate::stacked_borrows::{EvalContextExt as StackedBorEvalContextExt, Tag, Permission, Stack, Stacks, Item};\n pub use crate::machine::{\n-    PAGE_SIZE, STACK_ADDR, NUM_CPUS,\n+    PAGE_SIZE, STACK_ADDR, STACK_SIZE, NUM_CPUS,\n     MemoryExtra, AllocExtra, MiriMemoryKind, Evaluator, MiriEvalContext, MiriEvalContextExt,\n };\n pub use crate::eval::{eval_main, create_ecx, MiriConfig};"}, {"sha": "58c1cb51ca5236892fd75bb8cf7bb842a245a778", "filename": "src/machine.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4f6a56f54fabf86f530527dadce624854ee4c39b/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6a56f54fabf86f530527dadce624854ee4c39b/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=4f6a56f54fabf86f530527dadce624854ee4c39b", "patch": "@@ -18,7 +18,8 @@ use crate::*;\n \n // Some global facts about the emulated machine.\n pub const PAGE_SIZE: u64 = 4*1024; // FIXME: adjust to target architecture\n-pub const STACK_ADDR: u64 = 16*PAGE_SIZE; // not really about the \"stack\", but where we start assigning integer addresses to allocations\n+pub const STACK_ADDR: u64 = 32*PAGE_SIZE; // not really about the \"stack\", but where we start assigning integer addresses to allocations\n+pub const STACK_SIZE: u64 = 16*PAGE_SIZE; // whatever\n pub const NUM_CPUS: u64 = 1;\n \n /// Extra memory kinds"}, {"sha": "602d8064e82ef5aa419a300856cc599d8ffeb7db", "filename": "src/shims/dlsym.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4f6a56f54fabf86f530527dadce624854ee4c39b/src%2Fshims%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6a56f54fabf86f530527dadce624854ee4c39b/src%2Fshims%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fdlsym.rs?ref=4f6a56f54fabf86f530527dadce624854ee4c39b", "patch": "@@ -8,11 +8,17 @@ pub enum Dlsym {\n }\n \n impl Dlsym {\n-    pub fn from_str(name: &str) -> Option<Dlsym> {\n+    // Returns an error for unsupported symbols, and None if this symbol\n+    // should become a NULL pointer (pretend it does not exist).\n+    pub fn from_str(name: &str) -> InterpResult<'static, Option<Dlsym>> {\n         use self::Dlsym::*;\n-        Some(match name {\n-            \"getentropy\" => GetEntropy,\n-            _ => return None,\n+        Ok(match name {\n+            \"getentropy\" => Some(GetEntropy),\n+            \"__pthread_get_minstack\" => None,\n+            _ =>\n+                return err!(Unimplemented(format!(\n+                    \"Unsupported dlsym: {}\", name\n+                ))),\n         })\n     }\n }\n@@ -32,7 +38,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         let dest = dest.expect(\"we don't support any diverging dlsym\");\n         let ret = ret.expect(\"dest is `Some` but ret is `None`\");\n-        \n+\n         match dlsym {\n             GetEntropy => {\n                 let ptr = this.read_scalar(args[0])?.not_undef()?;"}, {"sha": "e31a34a601589616149f34f372bf526415540ec8", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 32, "deletions": 16, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/4f6a56f54fabf86f530527dadce624854ee4c39b/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6a56f54fabf86f530527dadce624854ee4c39b/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=4f6a56f54fabf86f530527dadce624854ee4c39b", "patch": "@@ -324,13 +324,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let symbol_name = this.memory().get(symbol.alloc_id)?.read_c_str(tcx, symbol)?;\n                 let err = format!(\"bad c unicode symbol: {:?}\", symbol_name);\n                 let symbol_name = ::std::str::from_utf8(symbol_name).unwrap_or(&err);\n-                if let Some(dlsym) = Dlsym::from_str(symbol_name) {\n+                if let Some(dlsym) = Dlsym::from_str(symbol_name)? {\n                     let ptr = this.memory_mut().create_fn_alloc(FnVal::Other(dlsym));\n                     this.write_scalar(Scalar::from(ptr), dest)?;\n                 } else {\n-                    return err!(Unimplemented(format!(\n-                        \"Unsupported dlsym: {}\", symbol_name\n-                    )));\n+                    this.write_null(dest)?;\n                 }\n             }\n \n@@ -713,24 +711,31 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_null(dest)?;\n             }\n \n-            // Determine stack base address.\n-            \"pthread_attr_init\" | \"pthread_attr_destroy\" | \"pthread_attr_get_np\" |\n-            \"pthread_getattr_np\" | \"pthread_self\" | \"pthread_get_stacksize_np\" => {\n+            // Stack size/address stuff.\n+            \"pthread_attr_init\" | \"pthread_attr_destroy\" | \"pthread_self\" |\n+            \"pthread_attr_setstacksize\" => {\n                 this.write_null(dest)?;\n             }\n             \"pthread_attr_getstack\" => {\n-                // Second argument is where we are supposed to write the stack size.\n-                let ptr = this.deref_operand(args[1])?;\n-                // Just any address.\n-                let stack_addr = Scalar::from_uint(STACK_ADDR, args[1].layout.size);\n-                this.write_scalar(stack_addr, ptr.into())?;\n+                let addr_place = this.deref_operand(args[1])?;\n+                let size_place = this.deref_operand(args[2])?;\n+\n+                this.write_scalar(\n+                    Scalar::from_uint(STACK_ADDR, addr_place.layout.size),\n+                    addr_place.into(),\n+                )?;\n+                this.write_scalar(\n+                    Scalar::from_uint(STACK_SIZE, size_place.layout.size),\n+                    size_place.into(),\n+                )?;\n+\n                 // Return success (`0`).\n                 this.write_null(dest)?;\n             }\n-            \"pthread_get_stackaddr_np\" => {\n-                // Just any address.\n-                let stack_addr = Scalar::from_uint(STACK_ADDR, dest.layout.size);\n-                this.write_scalar(stack_addr, dest)?;\n+\n+            // We don't support threading.\n+            \"pthread_create\" => {\n+                return err!(Unimplemented(format!(\"Miri does not support threading\")));\n             }\n \n             // Stub out calls for condvar, mutex and rwlock, to just return `0`.\n@@ -758,6 +763,17 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n \n             // macOS API stubs.\n+            \"pthread_attr_get_np\" | \"pthread_getattr_np\" => {\n+                this.write_null(dest)?;\n+            }\n+            \"pthread_get_stackaddr_np\" => {\n+                let stack_addr = Scalar::from_uint(STACK_ADDR, dest.layout.size);\n+                this.write_scalar(stack_addr, dest)?;\n+            }\n+            \"pthread_get_stacksize_np\" => {\n+                let stack_size = Scalar::from_uint(STACK_SIZE, dest.layout.size);\n+                this.write_scalar(stack_size, dest)?;\n+            }\n             \"_tlv_atexit\" => {\n                 // FIXME: register the destructor.\n             },"}, {"sha": "450dea99f552f78b0f4c472fad1c8ccf7962f2b0", "filename": "tests/compile-fail/thread-spawn.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4f6a56f54fabf86f530527dadce624854ee4c39b/tests%2Fcompile-fail%2Fthread-spawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f6a56f54fabf86f530527dadce624854ee4c39b/tests%2Fcompile-fail%2Fthread-spawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fthread-spawn.rs?ref=4f6a56f54fabf86f530527dadce624854ee4c39b", "patch": "@@ -0,0 +1,7 @@\n+use std::thread;\n+\n+// error-pattern: Miri does not support threading\n+\n+fn main() {\n+    thread::spawn(|| {});\n+}"}]}