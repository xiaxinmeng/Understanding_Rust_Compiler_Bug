{"sha": "585b071aa1d8f28b2b5134205cd3946634a69aed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4NWIwNzFhYTFkOGYyOGIyYjUxMzQyMDVjZDM5NDY2MzRhNjlhZWQ=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-12-06T20:01:38Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-12-06T20:01:38Z"}, "message": "Merge pull request #678 from marcusklaas/length-one-tuplez\n\nFixed named arguments in bare function types", "tree": {"sha": "c53218e5793197a8973e0e6756aab758614ccf43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c53218e5793197a8973e0e6756aab758614ccf43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/585b071aa1d8f28b2b5134205cd3946634a69aed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/585b071aa1d8f28b2b5134205cd3946634a69aed", "html_url": "https://github.com/rust-lang/rust/commit/585b071aa1d8f28b2b5134205cd3946634a69aed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/585b071aa1d8f28b2b5134205cd3946634a69aed/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db72e0390cf03a57eeaffad612a0df1e7d87b849", "url": "https://api.github.com/repos/rust-lang/rust/commits/db72e0390cf03a57eeaffad612a0df1e7d87b849", "html_url": "https://github.com/rust-lang/rust/commit/db72e0390cf03a57eeaffad612a0df1e7d87b849"}, {"sha": "97e4e7e5ba2010fe98c1775e96c6444a68e3cb80", "url": "https://api.github.com/repos/rust-lang/rust/commits/97e4e7e5ba2010fe98c1775e96c6444a68e3cb80", "html_url": "https://github.com/rust-lang/rust/commit/97e4e7e5ba2010fe98c1775e96c6444a68e3cb80"}], "stats": {"total": 82, "additions": 64, "deletions": 18}, "files": [{"sha": "350b9c53a253c5ce5bedec135523d59631617de6", "filename": "src/expr.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/585b071aa1d8f28b2b5134205cd3946634a69aed/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/585b071aa1d8f28b2b5134205cd3946634a69aed/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=585b071aa1d8f28b2b5134205cd3946634a69aed", "patch": "@@ -11,6 +11,8 @@\n use std::cmp::Ordering;\n use std::borrow::Borrow;\n use std::mem::swap;\n+use std::ops::Deref;\n+use std::iter::ExactSizeIterator;\n \n use {Indent, Spanned};\n use rewrite::{Rewrite, RewriteContext};\n@@ -75,7 +77,11 @@ impl Rewrite for ast::Expr {\n                                    offset)\n             }\n             ast::Expr_::ExprTup(ref items) => {\n-                rewrite_tuple(context, items, self.span, width, offset)\n+                rewrite_tuple(context,\n+                              items.iter().map(|x| &**x),\n+                              self.span,\n+                              width,\n+                              offset)\n             }\n             ast::Expr_::ExprWhile(ref cond, ref block, label) => {\n                 Loop::new_while(None, cond, block, label).rewrite(context, width, offset)\n@@ -960,7 +966,7 @@ impl Rewrite for ast::Arm {\n             let budget = context.config.max_width - line_start - comma.len() - 4;\n             let offset = Indent::new(offset.block_indent, line_start + 4 - offset.block_indent);\n             let rewrite = nop_block_collapse(body.rewrite(context, budget, offset), budget);\n-            let is_block = if let ast::ExprBlock(ref block) = body.node {\n+            let is_block = if let ast::ExprBlock(..) = body.node {\n                 true\n             } else {\n                 false\n@@ -1431,25 +1437,27 @@ fn rewrite_field(context: &RewriteContext,\n     expr.map(|s| format!(\"{}: {}\", name, s))\n }\n \n-pub fn rewrite_tuple<'a, R>(context: &RewriteContext,\n-                            items: &'a [ptr::P<R>],\n+pub fn rewrite_tuple<'a, I>(context: &RewriteContext,\n+                            mut items: I,\n                             span: Span,\n                             width: usize,\n                             offset: Indent)\n                             -> Option<String>\n-    where R: Rewrite + Spanned + 'a\n+    where I: ExactSizeIterator,\n+          <I as Iterator>::Item: Deref,\n+          <I::Item as Deref>::Target: Rewrite + Spanned + 'a\n {\n-    debug!(\"rewrite_tuple_lit: width: {}, offset: {:?}\", width, offset);\n     let indent = offset + 1;\n     // In case of length 1, need a trailing comma\n     if items.len() == 1 {\n         // 3 = \"(\" + \",)\"\n         let budget = try_opt!(width.checked_sub(3));\n-        return items[0].rewrite(context, budget, indent).map(|s| format!(\"({},)\", s));\n+        return items.next().unwrap().rewrite(context, budget, indent).map(|s| format!(\"({},)\", s));\n     }\n \n+    let list_lo = span_after(span, \"(\", context.codemap);\n     let items = itemize_list(context.codemap,\n-                             items.iter(),\n+                             items,\n                              \")\",\n                              |item| item.span().lo,\n                              |item| item.span().hi,\n@@ -1460,7 +1468,7 @@ pub fn rewrite_tuple<'a, R>(context: &RewriteContext,\n                                                                                 1));\n                                  item.rewrite(context, inner_width, indent)\n                              },\n-                             span.lo + BytePos(1), // Remove parens\n+                             list_lo,\n                              span.hi - BytePos(1));\n     let budget = try_opt!(width.checked_sub(2));\n     let list_str = try_opt!(format_fn_args(items, budget, indent, context.config));"}, {"sha": "0229a1321fbeed5e95eb253f078ceb2dd8d12c15", "filename": "src/items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/585b071aa1d8f28b2b5134205cd3946634a69aed/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/585b071aa1d8f28b2b5134205cd3946634a69aed/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=585b071aa1d8f28b2b5134205cd3946634a69aed", "patch": "@@ -966,7 +966,7 @@ pub fn span_hi_for_arg(arg: &ast::Arg) -> BytePos {\n     }\n }\n \n-fn is_named_arg(arg: &ast::Arg) -> bool {\n+pub fn is_named_arg(arg: &ast::Arg) -> bool {\n     if let ast::Pat_::PatIdent(_, ident, _) = arg.pat.node {\n         ident.node != token::special_idents::invalid\n     } else {"}, {"sha": "86ab1a73022d80682afd7d0e1c21e5f2e025b167", "filename": "src/lib.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/585b071aa1d8f28b2b5134205cd3946634a69aed/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/585b071aa1d8f28b2b5134205cd3946634a69aed/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=585b071aa1d8f28b2b5134205cd3946634a69aed", "patch": "@@ -26,7 +26,7 @@ extern crate diff;\n extern crate term;\n \n use syntax::ast;\n-use syntax::codemap::Span;\n+use syntax::codemap::{mk_sp, Span};\n use syntax::diagnostic::{EmitterWriter, Handler};\n use syntax::parse::{self, ParseSess};\n \n@@ -88,6 +88,16 @@ impl Spanned for ast::Ty {\n     }\n }\n \n+impl Spanned for ast::Arg {\n+    fn span(&self) -> Span {\n+        if items::is_named_arg(self) {\n+            mk_sp(self.pat.span.lo, self.ty.span.hi)\n+        } else {\n+            self.ty.span\n+        }\n+    }\n+}\n+\n #[derive(Copy, Clone, Debug)]\n pub struct Indent {\n     // Width of the block indent, in characters. Must be a multiple of"}, {"sha": "fdc418733fb22460104ec7e612f8a1344d5886f6", "filename": "src/patterns.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/585b071aa1d8f28b2b5134205cd3946634a69aed/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/585b071aa1d8f28b2b5134205cd3946634a69aed/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=585b071aa1d8f28b2b5134205cd3946634a69aed", "patch": "@@ -48,7 +48,13 @@ impl Rewrite for Pat {\n                 let prefix = format!(\"&{}\", format_mutability(mutability));\n                 rewrite_unary_prefix(context, &prefix, &**pat, width, offset)\n             }\n-            Pat_::PatTup(ref items) => rewrite_tuple(context, items, self.span, width, offset),\n+            Pat_::PatTup(ref items) => {\n+                rewrite_tuple(context,\n+                              items.iter().map(|x| &**x),\n+                              self.span,\n+                              width,\n+                              offset)\n+            }\n             Pat_::PatEnum(ref path, Some(ref pat_vec)) => {\n                 let path_str = try_opt!(::types::rewrite_path(context,\n                                                               true,"}, {"sha": "1d9522d0f90d4b4c4b758eb454d07d3667d50641", "filename": "src/types.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/585b071aa1d8f28b2b5134205cd3946634a69aed/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/585b071aa1d8f28b2b5134205cd3946634a69aed/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=585b071aa1d8f28b2b5134205cd3946634a69aed", "patch": "@@ -8,12 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::ops::Deref;\n+use std::iter::ExactSizeIterator;\n+\n use syntax::ast::{self, Mutability, FunctionRetTy};\n use syntax::print::pprust;\n use syntax::codemap::{self, Span, BytePos};\n use syntax::abi;\n \n-use Indent;\n+use {Indent, Spanned};\n use lists::{format_item_list, itemize_list, format_fn_args};\n use rewrite::{Rewrite, RewriteContext};\n use utils::{extra_offset, span_after, format_mutability, wrap_str};\n@@ -239,7 +242,9 @@ fn format_function_type<'a, I>(inputs: I,\n                                width: usize,\n                                offset: Indent)\n                                -> Option<String>\n-    where I: Iterator<Item = &'a ast::Ty>\n+    where I: ExactSizeIterator,\n+          <I as Iterator>::Item: Deref,\n+          <I::Item as Deref>::Target: Rewrite + Spanned + 'a\n {\n     // 2 for ()\n     let budget = try_opt!(width.checked_sub(2));\n@@ -249,8 +254,8 @@ fn format_function_type<'a, I>(inputs: I,\n     let items = itemize_list(context.codemap,\n                              inputs,\n                              \")\",\n-                             |ty| ty.span.lo,\n-                             |ty| ty.span.hi,\n+                             |ty| ty.span().lo,\n+                             |ty| ty.span().hi,\n                              |ty| ty.rewrite(context, budget, offset),\n                              list_lo,\n                              span.hi);\n@@ -506,7 +511,13 @@ impl Rewrite for ast::Ty {\n                 let budget = try_opt!(width.checked_sub(2));\n                 ty.rewrite(context, budget, offset + 1).map(|ty_str| format!(\"[{}]\", ty_str))\n             }\n-            ast::TyTup(ref items) => rewrite_tuple(context, items, self.span, width, offset),\n+            ast::TyTup(ref items) => {\n+                rewrite_tuple(context,\n+                              items.iter().map(|x| &**x),\n+                              self.span,\n+                              width,\n+                              offset)\n+            }\n             ast::TyPolyTraitRef(ref trait_ref) => trait_ref.rewrite(context, width, offset),\n             ast::TyPath(ref q_self, ref path) => {\n                 rewrite_path(context, false, q_self.as_ref(), path, width, offset)\n@@ -548,7 +559,7 @@ fn rewrite_bare_fn(bare_fn: &ast::BareFnTy,\n     let budget = try_opt!(width.checked_sub(result.len()));\n     let indent = offset + result.len();\n \n-    let rewrite = try_opt!(format_function_type(bare_fn.decl.inputs.iter().map(|x| &*(x.ty)),\n+    let rewrite = try_opt!(format_function_type(bare_fn.decl.inputs.iter(),\n                                                 &bare_fn.decl.output,\n                                                 span,\n                                                 context,"}, {"sha": "38469efa2d9503debddc290fae068821f4954413", "filename": "tests/source/structs.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/585b071aa1d8f28b2b5134205cd3946634a69aed/tests%2Fsource%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/585b071aa1d8f28b2b5134205cd3946634a69aed/tests%2Fsource%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fstructs.rs?ref=585b071aa1d8f28b2b5134205cd3946634a69aed", "patch": "@@ -145,3 +145,9 @@ mod m {\n struct Foo<T>(TTTTTTTTTTTTTTTTTTT,\n               /// Qux\n     UUUUUUUUUUUUUUUUUUU);\n+\n+struct Issue677 {\n+    pub ptr: *const libc::c_void,\n+    pub trace: fn(  obj: \n+          *const libc::c_void, tracer   : *mut   JSTracer   ),\n+}"}, {"sha": "adaa626c096aa243d04af1006e6d7f7b9235028e", "filename": "tests/target/structs.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/585b071aa1d8f28b2b5134205cd3946634a69aed/tests%2Ftarget%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/585b071aa1d8f28b2b5134205cd3946634a69aed/tests%2Ftarget%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstructs.rs?ref=585b071aa1d8f28b2b5134205cd3946634a69aed", "patch": "@@ -153,3 +153,8 @@ mod m {\n struct Foo<T>(TTTTTTTTTTTTTTTTTTT,\n               /// Qux\n               UUUUUUUUUUUUUUUUUUU);\n+\n+struct Issue677 {\n+    pub ptr: *const libc::c_void,\n+    pub trace: fn(obj: *const libc::c_void, tracer: *mut JSTracer),\n+}"}]}