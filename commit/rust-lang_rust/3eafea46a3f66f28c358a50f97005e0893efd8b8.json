{"sha": "3eafea46a3f66f28c358a50f97005e0893efd8b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlYWZlYTQ2YTNmNjZmMjhjMzU4YTUwZjk3MDA1ZTA4OTNlZmQ4Yjg=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-05-25T15:36:34Z"}, "committer": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-05-25T15:36:34Z"}, "message": "Dead code.", "tree": {"sha": "c31f8753fc113ed4aa457665707f5b2eebbbab5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c31f8753fc113ed4aa457665707f5b2eebbbab5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3eafea46a3f66f28c358a50f97005e0893efd8b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3eafea46a3f66f28c358a50f97005e0893efd8b8", "html_url": "https://github.com/rust-lang/rust/commit/3eafea46a3f66f28c358a50f97005e0893efd8b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3eafea46a3f66f28c358a50f97005e0893efd8b8/comments", "author": null, "committer": null, "parents": [{"sha": "70106f35ce603e60530abe333d6f4fcd75fe675e", "url": "https://api.github.com/repos/rust-lang/rust/commits/70106f35ce603e60530abe333d6f4fcd75fe675e", "html_url": "https://github.com/rust-lang/rust/commit/70106f35ce603e60530abe333d6f4fcd75fe675e"}], "stats": {"total": 99, "additions": 2, "deletions": 97}, "files": [{"sha": "0f4ffad1b37b5e588fd66d348f2cb0c002fea186", "filename": "src/rt/rust_crate_cache.cpp", "status": "modified", "additions": 1, "deletions": 82, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/3eafea46a3f66f28c358a50f97005e0893efd8b8/src%2Frt%2Frust_crate_cache.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/3eafea46a3f66f28c358a50f97005e0893efd8b8/src%2Frt%2Frust_crate_cache.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_crate_cache.cpp?ref=3eafea46a3f66f28c358a50f97005e0893efd8b8", "patch": "@@ -65,73 +65,6 @@ rust_crate_cache::c_sym::get_val() {\n     return val;\n }\n \n-\n-\n-rust_crate_cache::rust_sym::rust_sym(rust_dom *dom,\n-                                     rust_crate const *curr_crate,\n-                                     c_sym *crate_sym,\n-                                     char const **path)\n-    : val(0),\n-      crate_sym(crate_sym),\n-      dom(dom)\n-{\n-    crate_sym->ref();\n-    typedef rust_crate_reader::die die;\n-    rust_crate const *crate = (rust_crate*)crate_sym->get_val();\n-    if (!crate) {\n-        DLOG_ERR(dom, cache, \"failed to resolve symbol, null crate symbol\");\n-        return;\n-    }\n-    rust_crate_reader rdr(dom, crate);\n-    bool found_root = false;\n-    bool found_leaf = false;\n-    for (die d = rdr.dies.first_die();\n-         !(found_root || d.is_null());\n-         d = d.next_sibling()) {\n-\n-        die t1 = d;\n-        die t2 = d;\n-        for (char const **c = crate_rel(curr_crate, path);\n-             (*c\n-              && !t1.is_null()\n-              && t1.find_child_by_name(crate_rel(curr_crate, *c), t2));\n-             ++c, t1=t2) {\n-            DLOG(dom, dwarf, \"matched die <0x%\"  PRIxPTR\n-                    \">, child '%s' = die<0x%\" PRIxPTR \">\",\n-                    t1.off, crate_rel(curr_crate, *c), t2.off);\n-            found_root = found_root || true;\n-            if (!*(c+1) && t2.find_num_attr(DW_AT_low_pc, val)) {\n-                DLOG(dom, dwarf, \"found relative address: 0x%\"  PRIxPTR, val);\n-                DLOG(dom, dwarf, \"plus image-base 0x%\"  PRIxPTR,\n-                     crate->get_image_base());\n-                val += crate->get_image_base();\n-                found_leaf = true;\n-                break;\n-            }\n-        }\n-        if (found_root || found_leaf)\n-            break;\n-    }\n-    if (found_leaf) {\n-        DLOG(dom, cache, \"resolved symbol to 0x%\"  PRIxPTR, val);\n-    } else {\n-        DLOG_ERR(dom, cache, \"failed to resolve symbol\");\n-    }\n-}\n-\n-rust_crate_cache::rust_sym::~rust_sym() {\n-    DLOG(dom, cache,\n-             \"~rust_crate_cache::rust_sym(0x%\" PRIxPTR \")\", val);\n-    crate_sym->deref();\n-}\n-\n-uintptr_t\n-rust_crate_cache::rust_sym::get_val() {\n-    return val;\n-}\n-\n-\n-\n static inline void\n adjust_disp(uintptr_t &disp, const void *oldp, const void *newp)\n {\n@@ -180,33 +113,20 @@ rust_crate_cache::get_type_desc(size_t size,\n \n rust_crate_cache::rust_crate_cache(rust_dom *dom,\n                                    rust_crate const *crate)\n-    : rust_syms((rust_sym**)\n-                dom->calloc(sizeof(rust_sym*) * crate->n_rust_syms)),\n-      c_syms((c_sym**) dom->calloc(sizeof(c_sym*) * crate->n_c_syms)),\n+    : c_syms((c_sym**) dom->calloc(sizeof(c_sym*) * crate->n_c_syms)),\n       libs((lib**) dom->calloc(sizeof(lib*) * crate->n_libs)),\n       type_descs(NULL),\n       crate(crate),\n       dom(dom),\n       idx(0)\n {\n-    I(dom, rust_syms);\n     I(dom, c_syms);\n     I(dom, libs);\n }\n \n void\n rust_crate_cache::flush() {\n     DLOG(dom, cache, \"rust_crate_cache::flush()\");\n-    for (size_t i = 0; i < crate->n_rust_syms; ++i) {\n-        rust_sym *s = rust_syms[i];\n-        if (s) {\n-            DLOG(dom, cache,\n-                     \"rust_crate_cache::flush() deref rust_sym %\"\n-                     PRIdPTR \" (rc=%\" PRIdPTR \")\", i, s->ref_count);\n-            s->deref();\n-        }\n-        rust_syms[i] = NULL;\n-    }\n \n     for (size_t i = 0; i < crate->n_c_syms; ++i) {\n         c_sym *s = c_syms[i];\n@@ -240,7 +160,6 @@ rust_crate_cache::flush() {\n rust_crate_cache::~rust_crate_cache()\n {\n     flush();\n-    dom->free(rust_syms);\n     dom->free(c_syms);\n     dom->free(libs);\n }"}, {"sha": "45414c1647af1a203d1e065efa323b788081772a", "filename": "src/rt/rust_internal.h", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3eafea46a3f66f28c358a50f97005e0893efd8b8/src%2Frt%2Frust_internal.h", "raw_url": "https://github.com/rust-lang/rust/raw/3eafea46a3f66f28c358a50f97005e0893efd8b8/src%2Frt%2Frust_internal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_internal.h?ref=3eafea46a3f66f28c358a50f97005e0893efd8b8", "patch": "@@ -239,7 +239,7 @@ class rust_crate {\n \n public:\n \n-    size_t n_rust_syms;\n+    size_t pad6;\n     size_t n_c_syms;\n     size_t n_libs;\n \n@@ -309,27 +309,13 @@ rust_crate_cache : public dom_owned<rust_crate_cache>,\n         ~c_sym();\n     };\n \n-    class rust_sym :\n-        public rc_base<rust_sym>, public dom_owned<rust_sym>\n-    {\n-        uintptr_t val;\n-        c_sym *crate_sym;\n-    public:\n-        rust_dom *dom;\n-        rust_sym(rust_dom *dom, rust_crate const *curr_crate,\n-                 c_sym *crate_sym, char const **path);\n-        uintptr_t get_val();\n-        ~rust_sym();\n-    };\n-\n     type_desc *get_type_desc(size_t size,\n                              size_t align,\n                              size_t n_descs,\n                              type_desc const **descs);\n \n private:\n \n-    rust_sym **rust_syms;\n     c_sym **c_syms;\n     lib **libs;\n     type_desc *type_descs;"}]}