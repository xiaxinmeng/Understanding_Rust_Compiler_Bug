{"sha": "463e623ca967c2bd301cc0291fae219130b53daf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2M2U2MjNjYTk2N2MyYmQzMDFjYzAyOTFmYWUyMTkxMzBiNTNkYWY=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-01-24T22:24:58Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-01-25T10:15:16Z"}, "message": "Suggestion moving types before associated types.\n\nThis commit extends existing suggestions to move lifetimes before types\nin generic arguments to also suggest moving types behind associated type\nbindings.", "tree": {"sha": "e2cbc05116853eed511d4484752ab6e89b4d9ce7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2cbc05116853eed511d4484752ab6e89b4d9ce7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/463e623ca967c2bd301cc0291fae219130b53daf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlxK4bQACgkQAXYLT59T\n8VRuUA//aM7vAtFSgkuRUptqApSmBH92nIpJpJnNbjEKIojDEHxbEQ2i5+l8Ls/t\nxnI3H+teGBJjh+h0cDW+EGShbv5neKxgSeM8H8XONKge1iT4BDqEkiTKhy9ixXgc\ngFArDaoxjSMGsMXwVKoxxvH+5lyZbid1arjkgy7yGtl5X0hCayHjMBJc6aA+G1K6\nt5GqOXfKgDYgFaKX24ag/WyEsxvuCTGBIvISKAO6ZHWepPzsFl3hXxB72M7kKY8e\nNS81A/muS1OHYkV1Luvrc+XBM4wG7lO5Xb0Afur9O5gQcpacPclo4sMSOLwotPLF\neJ5jprme68otrmiINUc8dbO3csHvq/m/XIj5uCw4oT7ZV1gMOj5fvM2YZDoX/wKv\na61OT11+yWWUmqNbOwtwmXr1syJmzFCP3HjlWEdBgRHj19+JRNXtoFsi/tO3Zcm9\n6GmH4d74kPQaUUZWr8myYl79zuTtfCx6s7YXGYtLwqkEwHORZvei9uJSJw+42M0j\nEV+wgZQXzRhU8+uS1maTndGVFer643k7LoISiSAG+0/dJ8fHfqIwowMLLjplfH2R\n8nF/h/2ZK8/kXTRz3JvMsNhJ/zxk/UlI8HU2c6QWkUcC7cOjzpVUsUbexq8rvUWl\nfa3Cuvkucpf5GY5xniOFSyK8cf1tDYPgcQ+x9bS39h9RL9Apa5M=\n=9qOi\n-----END PGP SIGNATURE-----", "payload": "tree e2cbc05116853eed511d4484752ab6e89b4d9ce7\nparent 095b44c83b540bb4dbf74be1cae604f4bae87989\nauthor David Wood <david@davidtw.co> 1548368698 +0100\ncommitter David Wood <david@davidtw.co> 1548411316 +0100\n\nSuggestion moving types before associated types.\n\nThis commit extends existing suggestions to move lifetimes before types\nin generic arguments to also suggest moving types behind associated type\nbindings.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/463e623ca967c2bd301cc0291fae219130b53daf", "html_url": "https://github.com/rust-lang/rust/commit/463e623ca967c2bd301cc0291fae219130b53daf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/463e623ca967c2bd301cc0291fae219130b53daf/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "095b44c83b540bb4dbf74be1cae604f4bae87989", "url": "https://api.github.com/repos/rust-lang/rust/commits/095b44c83b540bb4dbf74be1cae604f4bae87989", "html_url": "https://github.com/rust-lang/rust/commit/095b44c83b540bb4dbf74be1cae604f4bae87989"}], "stats": {"total": 162, "additions": 147, "deletions": 15}, "files": [{"sha": "232b8bb5966c74c3a6c5e66d3941354970f24ebb", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 52, "deletions": 15, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/463e623ca967c2bd301cc0291fae219130b53daf/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/463e623ca967c2bd301cc0291fae219130b53daf/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=463e623ca967c2bd301cc0291fae219130b53daf", "patch": "@@ -5530,22 +5530,31 @@ impl<'a> Parser<'a> {\n     fn parse_generic_args(&mut self) -> PResult<'a, (Vec<GenericArg>, Vec<TypeBinding>)> {\n         let mut args = Vec::new();\n         let mut bindings = Vec::new();\n+\n         let mut seen_type = false;\n         let mut seen_binding = false;\n+\n+        let mut last_comma_span = None;\n         let mut first_type_or_binding_span: Option<Span> = None;\n+        let mut first_binding_span: Option<Span> = None;\n+\n         let mut bad_lifetime_pos = vec![];\n-        let mut last_comma_span = None;\n-        let mut suggestions = vec![];\n+        let mut bad_type_pos = vec![];\n+\n+        let mut lifetime_suggestions = vec![];\n+        let mut type_suggestions = vec![];\n         loop {\n             if self.check_lifetime() && self.look_ahead(1, |t| !t.is_like_plus()) {\n                 // Parse lifetime argument.\n                 args.push(GenericArg::Lifetime(self.expect_lifetime()));\n+\n                 if seen_type || seen_binding {\n                     let remove_sp = last_comma_span.unwrap_or(self.prev_span).to(self.prev_span);\n                     bad_lifetime_pos.push(self.prev_span);\n+\n                     if let Ok(snippet) = self.sess.source_map().span_to_snippet(self.prev_span) {\n-                        suggestions.push((remove_sp, String::new()));\n-                        suggestions.push((\n+                        lifetime_suggestions.push((remove_sp, String::new()));\n+                        lifetime_suggestions.push((\n                             first_type_or_binding_span.unwrap().shrink_to_lo(),\n                             format!(\"{}, \", snippet)));\n                     }\n@@ -5563,24 +5572,29 @@ impl<'a> Parser<'a> {\n                     ty,\n                     span,\n                 });\n+\n                 seen_binding = true;\n                 if first_type_or_binding_span.is_none() {\n                     first_type_or_binding_span = Some(span);\n                 }\n+                if first_binding_span.is_none() {\n+                    first_binding_span = Some(span);\n+                }\n             } else if self.check_type() {\n                 // Parse type argument.\n                 let ty_param = self.parse_ty()?;\n                 if seen_binding {\n-                    self.struct_span_err(\n-                        ty_param.span,\n-                        \"type parameters must be declared prior to associated type bindings\"\n-                    )\n-                        .span_label(\n-                            ty_param.span,\n-                            \"must be declared prior to associated type bindings\",\n-                        )\n-                        .emit();\n+                    let remove_sp = last_comma_span.unwrap_or(self.prev_span).to(self.prev_span);\n+                    bad_type_pos.push(self.prev_span);\n+\n+                    if let Ok(snippet) = self.sess.source_map().span_to_snippet(self.prev_span) {\n+                        type_suggestions.push((remove_sp, String::new()));\n+                        type_suggestions.push((\n+                            first_binding_span.unwrap().shrink_to_lo(),\n+                            format!(\"{}, \", snippet)));\n+                    }\n                 }\n+\n                 if first_type_or_binding_span.is_none() {\n                     first_type_or_binding_span = Some(ty_param.span);\n                 }\n@@ -5596,6 +5610,7 @@ impl<'a> Parser<'a> {\n                 last_comma_span = Some(self.prev_span);\n             }\n         }\n+\n         if !bad_lifetime_pos.is_empty() {\n             let mut err = self.struct_span_err(\n                 bad_lifetime_pos.clone(),\n@@ -5604,18 +5619,40 @@ impl<'a> Parser<'a> {\n             for sp in &bad_lifetime_pos {\n                 err.span_label(*sp, \"must be declared prior to type parameters\");\n             }\n-            if !suggestions.is_empty() {\n+            if !lifetime_suggestions.is_empty() {\n                 err.multipart_suggestion_with_applicability(\n                     &format!(\n                         \"move the lifetime parameter{} prior to the first type parameter\",\n                         if bad_lifetime_pos.len() > 1 { \"s\" } else { \"\" },\n                     ),\n-                    suggestions,\n+                    lifetime_suggestions,\n                     Applicability::MachineApplicable,\n                 );\n             }\n             err.emit();\n         }\n+\n+        if !bad_type_pos.is_empty() {\n+            let mut err = self.struct_span_err(\n+                bad_type_pos.clone(),\n+                \"type parameters must be declared prior to associated type bindings\"\n+            );\n+            for sp in &bad_type_pos {\n+                err.span_label(*sp, \"must be declared prior to associated type bindings\");\n+            }\n+            if !type_suggestions.is_empty() {\n+                err.multipart_suggestion_with_applicability(\n+                    &format!(\n+                        \"move the type parameter{} prior to the first associated type binding\",\n+                        if bad_type_pos.len() > 1 { \"s\" } else { \"\" },\n+                    ),\n+                    type_suggestions,\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+            err.emit();\n+        }\n+\n         Ok((args, bindings))\n     }\n "}, {"sha": "660e517c85a13d32aaf54fecb7a60b1e768a4764", "filename": "src/test/ui/parser/issue-32214.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/463e623ca967c2bd301cc0291fae219130b53daf/src%2Ftest%2Fui%2Fparser%2Fissue-32214.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/463e623ca967c2bd301cc0291fae219130b53daf/src%2Ftest%2Fui%2Fparser%2Fissue-32214.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-32214.stderr?ref=463e623ca967c2bd301cc0291fae219130b53daf", "patch": "@@ -3,6 +3,10 @@ error: type parameters must be declared prior to associated type bindings\n    |\n LL | pub fn test<W, I: Trait<Item=(), W> >() {}\n    |                                  ^ must be declared prior to associated type bindings\n+help: move the type parameter prior to the first associated type binding\n+   |\n+LL | pub fn test<W, I: Trait<W, Item=()> >() {}\n+   |                         ^^       --\n \n error: aborting due to previous error\n "}, {"sha": "8f35e4ecbcace6902f7293a4a0c3cb9b4c7200bf", "filename": "src/test/ui/suggestions/suggest-move-types.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/463e623ca967c2bd301cc0291fae219130b53daf/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/463e623ca967c2bd301cc0291fae219130b53daf/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-types.rs?ref=463e623ca967c2bd301cc0291fae219130b53daf", "patch": "@@ -0,0 +1,42 @@\n+#![allow(warnings)]\n+\n+// This test verifies that the suggestion to move types before associated type bindings\n+// is correct.\n+\n+trait One<T> {\n+  type A;\n+}\n+\n+trait Three<T, U, V> {\n+  type A;\n+  type B;\n+  type C;\n+}\n+\n+struct A<T, M: One<A=(), T>> { //~ ERROR type parameters must be declared\n+    m: M,\n+    t: T,\n+}\n+\n+struct B<T, U, V, M: Three<A=(), B=(), C=(), T, U, V>> { //~ ERROR type parameters must be declared\n+    m: M,\n+    t: T,\n+    u: U,\n+    v: V,\n+}\n+\n+struct C<T, U, V, M: Three<T, A=(), B=(), C=(), U, V>> { //~ ERROR type parameters must be declared\n+    m: M,\n+    t: T,\n+    u: U,\n+    v: V,\n+}\n+\n+struct D<T, U, V, M: Three<T, A=(), B=(), U, C=(), V>> { //~ ERROR type parameters must be declared\n+    m: M,\n+    t: T,\n+    u: U,\n+    v: V,\n+}\n+\n+fn main() {}"}, {"sha": "c74f79a00c78c27fd92c8ad9c42a15eb8357144f", "filename": "src/test/ui/suggestions/suggest-move-types.stderr", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/463e623ca967c2bd301cc0291fae219130b53daf/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/463e623ca967c2bd301cc0291fae219130b53daf/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-types.stderr?ref=463e623ca967c2bd301cc0291fae219130b53daf", "patch": "@@ -0,0 +1,49 @@\n+error: type parameters must be declared prior to associated type bindings\n+  --> $DIR/suggest-move-types.rs:16:26\n+   |\n+LL | struct A<T, M: One<A=(), T>> { //~ ERROR type parameters must be declared\n+   |                          ^ must be declared prior to associated type bindings\n+help: move the type parameter prior to the first associated type binding\n+   |\n+LL | struct A<T, M: One<T, A=()>> { //~ ERROR type parameters must be declared\n+   |                    ^^    --\n+\n+error: type parameters must be declared prior to associated type bindings\n+  --> $DIR/suggest-move-types.rs:21:46\n+   |\n+LL | struct B<T, U, V, M: Three<A=(), B=(), C=(), T, U, V>> { //~ ERROR type parameters must be declared\n+   |                                              ^  ^  ^ must be declared prior to associated type bindings\n+   |                                              |  |\n+   |                                              |  must be declared prior to associated type bindings\n+   |                                              must be declared prior to associated type bindings\n+help: move the type parameters prior to the first associated type binding\n+   |\n+LL | struct B<T, U, V, M: Three<T, U, V, A=(), B=(), C=()>> { //~ ERROR type parameters must be declared\n+   |                            ^^ ^^ ^^                --\n+\n+error: type parameters must be declared prior to associated type bindings\n+  --> $DIR/suggest-move-types.rs:28:49\n+   |\n+LL | struct C<T, U, V, M: Three<T, A=(), B=(), C=(), U, V>> { //~ ERROR type parameters must be declared\n+   |                                                 ^  ^ must be declared prior to associated type bindings\n+   |                                                 |\n+   |                                                 must be declared prior to associated type bindings\n+help: move the type parameters prior to the first associated type binding\n+   |\n+LL | struct C<T, U, V, M: Three<T, U, V, A=(), B=(), C=()>> { //~ ERROR type parameters must be declared\n+   |                               ^^ ^^                --\n+\n+error: type parameters must be declared prior to associated type bindings\n+  --> $DIR/suggest-move-types.rs:35:43\n+   |\n+LL | struct D<T, U, V, M: Three<T, A=(), B=(), U, C=(), V>> { //~ ERROR type parameters must be declared\n+   |                                           ^        ^ must be declared prior to associated type bindings\n+   |                                           |\n+   |                                           must be declared prior to associated type bindings\n+help: move the type parameters prior to the first associated type binding\n+   |\n+LL | struct D<T, U, V, M: Three<T, U, V, A=(), B=(), C=()>> { //~ ERROR type parameters must be declared\n+   |                               ^^ ^^          --    --\n+\n+error: aborting due to 4 previous errors\n+"}]}