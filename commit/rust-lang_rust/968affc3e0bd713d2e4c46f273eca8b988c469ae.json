{"sha": "968affc3e0bd713d2e4c46f273eca8b988c469ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2OGFmZmMzZTBiZDcxM2QyZTRjNDZmMjczZWNhOGI5ODhjNDY5YWU=", "commit": {"author": {"name": "Maximilian Roos", "email": "m@maxroos.com", "date": "2018-09-01T20:26:47Z"}, "committer": {"name": "Maximilian Roos", "email": "m@maxroos.com", "date": "2018-09-01T20:32:38Z"}, "message": "final clippy changes", "tree": {"sha": "af70af41792b8080d88ceecaf8fc07afe5c9e7d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af70af41792b8080d88ceecaf8fc07afe5c9e7d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/968affc3e0bd713d2e4c46f273eca8b988c469ae", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEj6KCL6bSss5r72KTMjLyi+2mb80FAluK92YACgkQMjLyi+2m\nb83P2Q//a5pilVChAuvZIfZQHOd4/SDuOJ76aFQOTt9hrUpTscCAk3X+PXrWlZts\n9S0kYFmsGbG27+6gFWH/gkVbeAN2lEyxM3+Lj1bcF6ouOuM0Ktw3g8KA+yGY0UT3\n7Dd0EFQj2z2BwqZTWkujP7NR22AgTq4uJnrvKFg45DoMGXUzEB7m78T44zE7Irb5\nzVL8YWApzj5Kci+OUQAz257mHgIcvevH0wm++mfNpQtjjPk+QxsBUUWRYGAQZvKX\nH3gS53RhgbKYuIhJt7/MfgfeefsnIK5C2J9Irjaa4biYOv4zepDsow5MILVwqPeq\nH1BdZOUsdyHbcrhcrUtLiSNPTnEXg3eaELoi7g/onFpHLzEYYcBLNM9GXzgN9eyl\noR68hHiTKZUUA+9cNwlnjYuWTUlDO7upqk4Xv3jR4Gt3mTT94b3tyFIlm4Wfun7X\nM4SfrSxHHGTqk4PgwV/NPJN8nZczVdZtE72YilW0v6k2w55nHU+zVPWUOa61Xfjs\n7+K4t0f5NFe9YZVuyDuOwdJQ53c+euFHrvj0aZdxQ6+pjchNflCiHZubvH0knUfW\nkZtGI1LUHcWmA0qiNI4HKE9W2Iykf6fDCwrXD4SP326N1BPqNitkvklDFB17vJLO\ncoRza84cXIr4ZG/uUOEvYsbDFiMR2Vj/BYE4IUVQ2XiDtW4MU6g=\n=rjyo\n-----END PGP SIGNATURE-----", "payload": "tree af70af41792b8080d88ceecaf8fc07afe5c9e7d0\nparent b1da2a53b489f86c17771a2b77acabdd236a115d\nauthor Maximilian Roos <m@maxroos.com> 1535833607 -0400\ncommitter Maximilian Roos <m@maxroos.com> 1535833958 -0400\n\nfinal clippy changes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/968affc3e0bd713d2e4c46f273eca8b988c469ae", "html_url": "https://github.com/rust-lang/rust/commit/968affc3e0bd713d2e4c46f273eca8b988c469ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/968affc3e0bd713d2e4c46f273eca8b988c469ae/comments", "author": {"login": "max-sixty", "id": 5635139, "node_id": "MDQ6VXNlcjU2MzUxMzk=", "avatar_url": "https://avatars.githubusercontent.com/u/5635139?v=4", "gravatar_id": "", "url": "https://api.github.com/users/max-sixty", "html_url": "https://github.com/max-sixty", "followers_url": "https://api.github.com/users/max-sixty/followers", "following_url": "https://api.github.com/users/max-sixty/following{/other_user}", "gists_url": "https://api.github.com/users/max-sixty/gists{/gist_id}", "starred_url": "https://api.github.com/users/max-sixty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/max-sixty/subscriptions", "organizations_url": "https://api.github.com/users/max-sixty/orgs", "repos_url": "https://api.github.com/users/max-sixty/repos", "events_url": "https://api.github.com/users/max-sixty/events{/privacy}", "received_events_url": "https://api.github.com/users/max-sixty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "max-sixty", "id": 5635139, "node_id": "MDQ6VXNlcjU2MzUxMzk=", "avatar_url": "https://avatars.githubusercontent.com/u/5635139?v=4", "gravatar_id": "", "url": "https://api.github.com/users/max-sixty", "html_url": "https://github.com/max-sixty", "followers_url": "https://api.github.com/users/max-sixty/followers", "following_url": "https://api.github.com/users/max-sixty/following{/other_user}", "gists_url": "https://api.github.com/users/max-sixty/gists{/gist_id}", "starred_url": "https://api.github.com/users/max-sixty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/max-sixty/subscriptions", "organizations_url": "https://api.github.com/users/max-sixty/orgs", "repos_url": "https://api.github.com/users/max-sixty/repos", "events_url": "https://api.github.com/users/max-sixty/events{/privacy}", "received_events_url": "https://api.github.com/users/max-sixty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1da2a53b489f86c17771a2b77acabdd236a115d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1da2a53b489f86c17771a2b77acabdd236a115d", "html_url": "https://github.com/rust-lang/rust/commit/b1da2a53b489f86c17771a2b77acabdd236a115d"}], "stats": {"total": 127, "additions": 64, "deletions": 63}, "files": [{"sha": "fc29c69b498c1f8e78fc928d3176444990923b3f", "filename": "src/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/968affc3e0bd713d2e4c46f273eca8b988c469ae/src%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/968affc3e0bd713d2e4c46f273eca8b988c469ae/src%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattr.rs?ref=968affc3e0bd713d2e4c46f273eca8b988c469ae", "patch": "@@ -48,7 +48,7 @@ fn is_derive(attr: &ast::Attribute) -> bool {\n }\n \n /// Returns the arguments of `#[derive(...)]`.\n-fn get_derive_spans<'a>(attr: &ast::Attribute) -> Option<Vec<Span>> {\n+fn get_derive_spans(attr: &ast::Attribute) -> Option<Vec<Span>> {\n     attr.meta_item_list().map(|meta_item_list| {\n         meta_item_list\n             .iter()"}, {"sha": "a3d2819e1db7f7e6cd741227afeb99b6e9480ff7", "filename": "src/bin/main.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/968affc3e0bd713d2e4c46f273eca8b988c469ae/src%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/968affc3e0bd713d2e4c46f273eca8b988c469ae/src%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmain.rs?ref=968affc3e0bd713d2e4c46f273eca8b988c469ae", "patch": "@@ -172,19 +172,19 @@ fn execute(opts: &Options) -> Result<i32, failure::Error> {\n     match determine_operation(&matches)? {\n         Operation::Help(HelpOp::None) => {\n             print_usage_to_stdout(opts, \"\");\n-            return Ok(0);\n+            Ok(0)\n         }\n         Operation::Help(HelpOp::Config) => {\n             Config::print_docs(&mut stdout(), options.unstable_features);\n-            return Ok(0);\n+            Ok(0)\n         }\n         Operation::Help(HelpOp::FileLines) => {\n             print_help_file_lines();\n-            return Ok(0);\n+            Ok(0)\n         }\n         Operation::Version => {\n             print_version();\n-            return Ok(0);\n+            Ok(0)\n         }\n         Operation::ConfigOutputDefault { path } => {\n             let toml = Config::default().all_options().to_toml().map_err(err_msg)?;\n@@ -194,13 +194,13 @@ fn execute(opts: &Options) -> Result<i32, failure::Error> {\n             } else {\n                 io::stdout().write_all(toml.as_bytes())?;\n             }\n-            return Ok(0);\n+            Ok(0)\n         }\n         Operation::Stdin { input } => format_string(input, options),\n         Operation::Format {\n             files,\n             minimal_config_path,\n-        } => format(files, minimal_config_path, options),\n+        } => format(files, minimal_config_path, &options),\n     }\n }\n \n@@ -236,7 +236,7 @@ fn format_string(input: String, options: GetOptsOptions) -> Result<i32, failure:\n fn format(\n     files: Vec<PathBuf>,\n     minimal_config_path: Option<String>,\n-    options: GetOptsOptions,\n+    options: &GetOptsOptions,\n ) -> Result<i32, failure::Error> {\n     options.verify_file_lines(&files);\n     let (config, config_path) = load_config(None, Some(options.clone()))?;"}, {"sha": "de0fca11f7150bf3228cdaedd49b6863ac21bdb4", "filename": "src/comment.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/968affc3e0bd713d2e4c46f273eca8b988c469ae/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/968affc3e0bd713d2e4c46f273eca8b988c469ae/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=968affc3e0bd713d2e4c46f273eca8b988c469ae", "patch": "@@ -47,7 +47,7 @@ fn custom_opener(s: &str) -> &str {\n     s.lines().next().map_or(\"\", |first_line| {\n         first_line\n             .find(' ')\n-            .map_or(first_line, |space_index| &first_line[0..space_index + 1])\n+            .map_or(first_line, |space_index| &first_line[0..=space_index])\n     })\n }\n \n@@ -1151,7 +1151,7 @@ pub fn recover_comment_removed(\n             context.report.append(\n                 context.source_map.span_to_filename(span).into(),\n                 vec![FormattingError::from_span(\n-                    &span,\n+                    span,\n                     &context.source_map,\n                     ErrorKind::LostComment,\n                 )],\n@@ -1428,7 +1428,7 @@ mod test {\n \n     #[test]\n     fn test_remove_trailing_white_spaces() {\n-        let s = format!(\"    r#\\\"\\n        test\\n    \\\"#\");\n+        let s = \"    r#\\\"\\n        test\\n    \\\"#\";\n         assert_eq!(remove_trailing_white_spaces(&s), s);\n     }\n "}, {"sha": "95ccef96fc538e231ea331875f5dcf2584e2f424", "filename": "src/config/options.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/968affc3e0bd713d2e4c46f273eca8b988c469ae/src%2Fconfig%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/968affc3e0bd713d2e4c46f273eca8b988c469ae/src%2Fconfig%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Foptions.rs?ref=968affc3e0bd713d2e4c46f273eca8b988c469ae", "patch": "@@ -264,7 +264,7 @@ configuration_option_enum! { Color:\n \n impl Color {\n     /// Whether we should use a coloured terminal.\n-    pub fn use_colored_tty(&self) -> bool {\n+    pub fn use_colored_tty(self) -> bool {\n         match self {\n             Color::Always => true,\n             Color::Never => false,\n@@ -417,7 +417,7 @@ configuration_option_enum!{ Edition:\n }\n \n impl Edition {\n-    pub(crate) fn to_libsyntax_pos_edition(&self) -> syntax_pos::edition::Edition {\n+    pub(crate) fn to_libsyntax_pos_edition(self) -> syntax_pos::edition::Edition {\n         match self {\n             Edition::Edition2015 => syntax_pos::edition::Edition::Edition2015,\n             Edition::Edition2018 => syntax_pos::edition::Edition::Edition2018,"}, {"sha": "a5435f53f8dac863f1570c3a06621da5336a96dc", "filename": "src/expr.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/968affc3e0bd713d2e4c46f273eca8b988c469ae/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/968affc3e0bd713d2e4c46f273eca8b988c469ae/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=968affc3e0bd713d2e4c46f273eca8b988c469ae", "patch": "@@ -100,7 +100,7 @@ pub fn format_expr(\n                 )\n             })\n         }\n-        ast::ExprKind::Unary(ref op, ref subexpr) => rewrite_unary_op(context, op, subexpr, shape),\n+        ast::ExprKind::Unary(op, ref subexpr) => rewrite_unary_op(context, op, subexpr, shape),\n         ast::ExprKind::Struct(ref path, ref fields, ref base) => rewrite_struct_lit(\n             context,\n             path,\n@@ -1519,7 +1519,7 @@ fn rewrite_index(\n     }\n }\n \n-fn struct_lit_can_be_aligned(fields: &[ast::Field], base: &Option<&ast::Expr>) -> bool {\n+fn struct_lit_can_be_aligned(fields: &[ast::Field], base: Option<&ast::Expr>) -> bool {\n     if base.is_some() {\n         return false;\n     }\n@@ -1555,7 +1555,7 @@ fn rewrite_struct_lit<'a>(\n \n     let one_line_width = h_shape.map_or(0, |shape| shape.width);\n     let body_lo = context.snippet_provider.span_after(span, \"{\");\n-    let fields_str = if struct_lit_can_be_aligned(fields, &base)\n+    let fields_str = if struct_lit_can_be_aligned(fields, base)\n         && context.config.struct_field_align_threshold() > 0\n     {\n         rewrite_with_alignment(\n@@ -1676,7 +1676,7 @@ pub fn rewrite_field(\n     };\n     let name = context.snippet(field.ident.span);\n     if field.is_shorthand {\n-        Some(attrs_str + &name)\n+        Some(attrs_str + name)\n     } else {\n         let mut separator = String::from(struct_lit_field_separator(context.config));\n         for _ in 0..prefix_max_width.saturating_sub(name.len()) {\n@@ -1688,7 +1688,7 @@ pub fn rewrite_field(\n \n         match expr {\n             Some(ref e) if e.as_str() == name && context.config.use_field_init_shorthand() => {\n-                Some(attrs_str + &name)\n+                Some(attrs_str + name)\n             }\n             Some(e) => Some(format!(\"{}{}{}{}\", attrs_str, name, separator, e)),\n             None => {\n@@ -1827,12 +1827,12 @@ pub fn rewrite_unary_suffix<R: Rewrite>(\n \n fn rewrite_unary_op(\n     context: &RewriteContext,\n-    op: &ast::UnOp,\n+    op: ast::UnOp,\n     expr: &ast::Expr,\n     shape: Shape,\n ) -> Option<String> {\n     // For some reason, an UnOp is not spanned like BinOp!\n-    let operator_str = match *op {\n+    let operator_str = match op {\n         ast::UnOp::Deref => \"*\",\n         ast::UnOp::Not => \"!\",\n         ast::UnOp::Neg => \"-\","}, {"sha": "d509a4429b4998fbac53813ff805a8b8ac3cd161", "filename": "src/format-diff/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/968affc3e0bd713d2e4c46f273eca8b988c469ae/src%2Fformat-diff%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/968affc3e0bd713d2e4c46f273eca8b988c469ae/src%2Fformat-diff%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformat-diff%2Fmain.rs?ref=968affc3e0bd713d2e4c46f273eca8b988c469ae", "patch": "@@ -214,7 +214,7 @@ where\n \n #[test]\n fn scan_simple_git_diff() {\n-    const DIFF: &'static str = include_str!(\"test/bindgen.diff\");\n+    const DIFF: &str = include_str!(\"test/bindgen.diff\");\n     let (files, ranges) = scan_diff(DIFF.as_bytes(), 1, r\".*\\.rs\").expect(\"scan_diff failed?\");\n \n     assert!("}, {"sha": "9386302c479e7eff23f39775f51bf534aa4b4439", "filename": "src/formatting.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/968affc3e0bd713d2e4c46f273eca8b988c469ae/src%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/968affc3e0bd713d2e4c46f273eca8b988c469ae/src%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformatting.rs?ref=968affc3e0bd713d2e4c46f273eca8b988c469ae", "patch": "@@ -194,11 +194,11 @@ impl<'b, T: Write + 'b> FormatHandler for Session<'b, T> {\n     fn handle_formatted_file(\n         &mut self,\n         path: FileName,\n-        mut result: String,\n+        result: String,\n         report: &mut FormatReport,\n     ) -> Result<(), ErrorKind> {\n         if let Some(ref mut out) = self.out {\n-            match source_file::write_file(&mut result, &path, out, &self.config) {\n+            match source_file::write_file(&result, &path, out, &self.config) {\n                 Ok(b) if b => report.add_diff(),\n                 Err(e) => {\n                     // Create a new error with path_str to help users see which files failed\n@@ -224,7 +224,7 @@ pub(crate) struct FormattingError {\n \n impl FormattingError {\n     pub(crate) fn from_span(\n-        span: &Span,\n+        span: Span,\n         source_map: &SourceMap,\n         kind: ErrorKind,\n     ) -> FormattingError {\n@@ -234,13 +234,13 @@ impl FormattingError {\n             kind,\n             is_string: false,\n             line_buffer: source_map\n-                .span_to_lines(*span)\n+                .span_to_lines(span)\n                 .ok()\n                 .and_then(|fl| {\n                     fl.file\n                         .get_line(fl.lines[0].line_index)\n                         .map(|l| l.into_owned())\n-                }).unwrap_or_else(|| String::new()),\n+                }).unwrap_or_else(String::new),\n         }\n     }\n "}, {"sha": "3ca063a58e72655118401627bac52e3aff59f8ff", "filename": "src/imports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/968affc3e0bd713d2e4c46f273eca8b988c469ae/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/968affc3e0bd713d2e4c46f273eca8b988c469ae/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=968affc3e0bd713d2e4c46f273eca8b988c469ae", "patch": "@@ -179,7 +179,7 @@ pub fn merge_use_trees(use_trees: Vec<UseTree>) -> Vec<UseTree> {\n fn merge_use_trees_inner(trees: &mut Vec<UseTree>, use_tree: UseTree) {\n     for tree in trees.iter_mut() {\n         if tree.share_prefix(&use_tree) {\n-            tree.merge(use_tree);\n+            tree.merge(&use_tree);\n             return;\n         }\n     }\n@@ -536,7 +536,7 @@ impl UseTree {\n         }\n     }\n \n-    fn merge(&mut self, other: UseTree) {\n+    fn merge(&mut self, other: &UseTree) {\n         let mut new_path = vec![];\n         for (a, b) in self\n             .path"}, {"sha": "f1b01ea8055f84046cc77e72365a8b8994f4a42c", "filename": "src/lists.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/968affc3e0bd713d2e4c46f273eca8b988c469ae/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/968affc3e0bd713d2e4c46f273eca8b988c469ae/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=968affc3e0bd713d2e4c46f273eca8b988c469ae", "patch": "@@ -475,7 +475,7 @@ where\n                     formatted_comment = rewrite_post_comment(&mut item_max_width)?;\n                     comment_alignment = post_comment_alignment(item_max_width, inner_item.len());\n                 }\n-                for _ in 0..(comment_alignment + 1) {\n+                for _ in 0..=comment_alignment {\n                     result.push(' ');\n                 }\n                 // An additional space for the missing trailing separator."}, {"sha": "6aae1b23f0c60ea0cf21d4002a93d1d2884d36a7", "filename": "src/macros.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/968affc3e0bd713d2e4c46f273eca8b988c469ae/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/968affc3e0bd713d2e4c46f273eca8b988c469ae/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=968affc3e0bd713d2e4c46f273eca8b988c469ae", "patch": "@@ -524,12 +524,12 @@ enum MacroArgKind {\n \n fn delim_token_to_str(\n     context: &RewriteContext,\n-    delim_token: &DelimToken,\n+    delim_token: DelimToken,\n     shape: Shape,\n     use_multiple_lines: bool,\n     inner_is_empty: bool,\n ) -> (String, String) {\n-    let (lhs, rhs) = match *delim_token {\n+    let (lhs, rhs) = match delim_token {\n         DelimToken::Paren => (\"(\", \")\"),\n         DelimToken::Bracket => (\"[\", \"]\"),\n         DelimToken::Brace => {\n@@ -612,7 +612,7 @@ impl MacroArgKind {\n             MacroArgKind::MetaVariable(ty, ref name) => {\n                 Some(format!(\"${}:{}\", name, ty.name.as_str()))\n             }\n-            MacroArgKind::Repeat(ref delim_tok, ref args, ref another, ref tok) => {\n+            MacroArgKind::Repeat(delim_tok, ref args, ref another, ref tok) => {\n                 let (lhs, inner, rhs) = rewrite_delimited_inner(delim_tok, args)?;\n                 let another = another\n                     .as_ref()\n@@ -622,7 +622,7 @@ impl MacroArgKind {\n \n                 Some(format!(\"${}{}{}{}{}\", lhs, inner, rhs, another, repeat_tok))\n             }\n-            MacroArgKind::Delimited(ref delim_tok, ref args) => {\n+            MacroArgKind::Delimited(delim_tok, ref args) => {\n                 rewrite_delimited_inner(delim_tok, args)\n                     .map(|(lhs, inner, rhs)| format!(\"{}{}{}\", lhs, inner, rhs))\n             }\n@@ -755,8 +755,8 @@ impl MacroArgParser {\n         let mut hi = span.hi();\n \n         // Parse '*', '+' or '?.\n-        for ref tok in iter {\n-            self.set_last_tok(tok);\n+        for tok in iter {\n+            self.set_last_tok(&tok);\n             if first {\n                 first = false;\n                 lo = tok.span().lo();\n@@ -977,7 +977,7 @@ enum SpaceState {\n fn force_space_before(tok: &Token) -> bool {\n     debug!(\"tok: force_space_before {:?}\", tok);\n \n-    match *tok {\n+    match tok {\n         Token::Eq\n         | Token::Lt\n         | Token::Le\n@@ -1002,7 +1002,7 @@ fn force_space_before(tok: &Token) -> bool {\n }\n \n fn ident_like(tok: &Token) -> bool {\n-    match *tok {\n+    match tok {\n         Token::Ident(..) | Token::Literal(..) | Token::Lifetime(_) => true,\n         _ => false,\n     }\n@@ -1011,7 +1011,7 @@ fn ident_like(tok: &Token) -> bool {\n fn next_space(tok: &Token) -> SpaceState {\n     debug!(\"next_space: {:?}\", tok);\n \n-    match *tok {\n+    match tok {\n         Token::Not\n         | Token::BinOp(BinOpToken::And)\n         | Token::Tilde"}, {"sha": "f2f2295a8720b30ea2c203186d9ffa905c9840d9", "filename": "src/missed_spans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/968affc3e0bd713d2e4c46f273eca8b988c469ae/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/968affc3e0bd713d2e4c46f273eca8b988c469ae/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=968affc3e0bd713d2e4c46f273eca8b988c469ae", "patch": "@@ -315,7 +315,7 @@ impl<'a> FmtVisitor<'a> {\n                     self.push_str(\"\\n\");\n                     status.last_wspace = None;\n                 } else {\n-                    self.push_str(&snippet[status.line_start..i + 1]);\n+                    self.push_str(&snippet[status.line_start..=i]);\n                 }\n \n                 status.cur_line += 1;"}, {"sha": "47aae3bfc2ad099c43b30482ce7a601a8bad32fd", "filename": "src/reorder.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/968affc3e0bd713d2e4c46f273eca8b988c469ae/src%2Freorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/968affc3e0bd713d2e4c46f273eca8b988c469ae/src%2Freorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Freorder.rs?ref=968affc3e0bd713d2e4c46f273eca8b988c469ae", "patch": "@@ -193,21 +193,21 @@ impl ReorderableItemKind {\n         }\n     }\n \n-    fn is_same_item_kind(&self, item: &ast::Item) -> bool {\n-        ReorderableItemKind::from(item) == *self\n+    fn is_same_item_kind(self, item: &ast::Item) -> bool {\n+        ReorderableItemKind::from(item) == self\n     }\n \n-    fn is_reorderable(&self, config: &Config) -> bool {\n-        match *self {\n+    fn is_reorderable(self, config: &Config) -> bool {\n+        match self {\n             ReorderableItemKind::ExternCrate => config.reorder_imports(),\n             ReorderableItemKind::Mod => config.reorder_modules(),\n             ReorderableItemKind::Use => config.reorder_imports(),\n             ReorderableItemKind::Other => false,\n         }\n     }\n \n-    fn in_group(&self) -> bool {\n-        match *self {\n+    fn in_group(self) -> bool {\n+        match self {\n             ReorderableItemKind::ExternCrate\n             | ReorderableItemKind::Mod\n             | ReorderableItemKind::Use => true,"}, {"sha": "5868f0b85fdff2b1c89ce79219e0c55aa152defe", "filename": "src/shape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/968affc3e0bd713d2e4c46f273eca8b988c469ae/src%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/968affc3e0bd713d2e4c46f273eca8b988c469ae/src%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshape.rs?ref=968affc3e0bd713d2e4c46f273eca8b988c469ae", "patch": "@@ -91,7 +91,7 @@ impl Indent {\n         };\n         let num_chars = num_tabs + num_spaces;\n         if num_tabs == 0 && num_chars + offset <= INDENT_BUFFER_LEN {\n-            Cow::from(&INDENT_BUFFER[offset..num_chars + 1])\n+            Cow::from(&INDENT_BUFFER[offset..=num_chars])\n         } else {\n             let mut indent = String::with_capacity(num_chars + if offset == 0 { 1 } else { 0 });\n             if offset == 0 {"}, {"sha": "17f8ffec9a1504e66aa1d745c7c0044af1fc0d22", "filename": "src/test/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/968affc3e0bd713d2e4c46f273eca8b988c469ae/src%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/968affc3e0bd713d2e4c46f273eca8b988c469ae/src%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod.rs?ref=968affc3e0bd713d2e4c46f273eca8b988c469ae", "patch": "@@ -102,7 +102,7 @@ fn verify_config_test_names() {\n // `print_diff` selects the approach not used.\n fn write_message(msg: &str) {\n     let mut writer = OutputWriter::new(Color::Auto);\n-    writer.writeln(&format!(\"{}\", msg), None);\n+    writer.writeln(msg, None);\n }\n \n // Integration tests. The files in the tests/source are formatted and compared\n@@ -949,7 +949,7 @@ fn rustfmt() -> PathBuf {\n         me.is_file() || me.with_extension(\"exe\").is_file(),\n         \"no rustfmt bin, try running `cargo build` before testing\"\n     );\n-    return me;\n+    me\n }\n \n #[test]"}, {"sha": "3f5339201063fb183e90f48157943a3af4876186", "filename": "src/vertical.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/968affc3e0bd713d2e4c46f273eca8b988c469ae/src%2Fvertical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/968affc3e0bd713d2e4c46f273eca8b988c469ae/src%2Fvertical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvertical.rs?ref=968affc3e0bd713d2e4c46f273eca8b988c469ae", "patch": "@@ -126,7 +126,7 @@ pub fn rewrite_with_alignment<T: AlignedItem>(\n     } else {\n         (\"\", fields.len() - 1)\n     };\n-    let init = &fields[0..group_index + 1];\n+    let init = &fields[0..=group_index];\n     let rest = &fields[group_index + 1..];\n     let init_last_pos = if rest.is_empty() {\n         span.hi()"}, {"sha": "e6ef7f23da0470bc9c544fe8b7ffcf4dce380760", "filename": "src/visitor.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/968affc3e0bd713d2e4c46f273eca8b988c469ae/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/968affc3e0bd713d2e4c46f273eca8b988c469ae/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=968affc3e0bd713d2e4c46f273eca8b988c469ae", "patch": "@@ -621,24 +621,25 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                 self.report.append(\n                     file_name,\n                     vec![FormattingError::from_span(\n-                        &attr.span,\n+                        attr.span,\n                         &self.source_map,\n                         ErrorKind::DeprecatedAttr,\n                     )],\n                 );\n-            } else if attr.path.segments[0].ident.to_string() == \"rustfmt\"\n-                && (attr.path.segments.len() == 1\n-                    || attr.path.segments[1].ident.to_string() != \"skip\")\n-            {\n-                let file_name = self.source_map.span_to_filename(attr.span).into();\n-                self.report.append(\n-                    file_name,\n-                    vec![FormattingError::from_span(\n-                        &attr.span,\n-                        &self.source_map,\n-                        ErrorKind::BadAttr,\n-                    )],\n-                );\n+            } else if attr.path.segments[0].ident.to_string() == \"rustfmt\" {\n+                if attr.path.segments.len() == 1\n+                    || attr.path.segments[1].ident.to_string() != \"skip\"\n+                {\n+                    let file_name = self.source_map.span_to_filename(attr.span).into();\n+                    self.report.append(\n+                        file_name,\n+                        vec![FormattingError::from_span(\n+                            attr.span,\n+                            &self.source_map,\n+                            ErrorKind::BadAttr,\n+                        )],\n+                    );\n+                }\n             }\n         }\n         if contains_skip(attrs) {"}]}