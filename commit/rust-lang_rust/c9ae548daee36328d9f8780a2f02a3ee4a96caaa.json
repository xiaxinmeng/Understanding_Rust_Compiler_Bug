{"sha": "c9ae548daee36328d9f8780a2f02a3ee4a96caaa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5YWU1NDhkYWVlMzYzMjhkOWY4NzgwYTJmMDJhM2VlNGE5NmNhYWE=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-08-03T18:43:50Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-08-03T18:43:50Z"}, "message": "Reject programs that do a put outside of iterators.\n\nCloses #774.", "tree": {"sha": "efbf5169f7b86d73599612ec3ea0434797603758", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efbf5169f7b86d73599612ec3ea0434797603758"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9ae548daee36328d9f8780a2f02a3ee4a96caaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9ae548daee36328d9f8780a2f02a3ee4a96caaa", "html_url": "https://github.com/rust-lang/rust/commit/c9ae548daee36328d9f8780a2f02a3ee4a96caaa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9ae548daee36328d9f8780a2f02a3ee4a96caaa/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88714625758808e69943b472e329b00c4aa73c97", "url": "https://api.github.com/repos/rust-lang/rust/commits/88714625758808e69943b472e329b00c4aa73c97", "html_url": "https://github.com/rust-lang/rust/commit/88714625758808e69943b472e329b00c4aa73c97"}], "stats": {"total": 15, "additions": 9, "deletions": 6}, "files": [{"sha": "d5bc8b0cbe32f2e7284e29b8cf021b4c9b59c40b", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c9ae548daee36328d9f8780a2f02a3ee4a96caaa/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9ae548daee36328d9f8780a2f02a3ee4a96caaa/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=c9ae548daee36328d9f8780a2f02a3ee4a96caaa", "patch": "@@ -67,6 +67,7 @@ type fn_ctxt =\n     // (and with any functions whose environment is being captured).\n     {ret_ty: ty::t,\n      purity: ast::purity,\n+     proto: ast::proto,\n      var_bindings: @ty::unify::var_bindings,\n      locals: hashmap[ast::node_id, int],\n      local_names: hashmap[ast::node_id, ast::ident],\n@@ -1883,22 +1884,24 @@ fn check_expr(fcx: &@fn_ctxt, expr: &@ast::expr) -> bool {\n       }\n       ast::expr_put(expr_opt) {\n         require_impure(tcx.sess, fcx.purity, expr.span);\n+        if (fcx.proto != ast::proto_iter) {\n+            tcx.sess.span_fatal(expr.span, \"put in non-iterator\");\n+        }\n         alt expr_opt {\n           none. {\n             let nil = ty::mk_nil(tcx);\n             if !are_compatible(fcx, fcx.ret_ty, nil) {\n                 tcx.sess.span_fatal(expr.span,\n                                     \"put; in iterator yielding non-nil\");\n             }\n-            write::nil_ty(tcx, id);\n           }\n           some(e) {\n             bot = check_expr(fcx, e);\n             demand::simple(fcx, expr.span, fcx.ret_ty,\n                            expr_ty(tcx, e));\n-            write::nil_ty(tcx, id);\n           }\n         }\n+        write::nil_ty(tcx, id);\n       }\n       ast::expr_be(e) {\n         // FIXME: prove instead of assert\n@@ -2619,12 +2622,12 @@ fn check_const(ccx: &@crate_ctxt, sp: &span, e: &@ast::expr,\n                id: &ast::node_id) {\n     // FIXME: this is kinda a kludge; we manufacture a fake function context\n     // and statement context for checking the initializer expression.\n-\n     let rty = node_id_to_type(ccx.tcx, id);\n     let fixups: ast::node_id[] = ~[];\n     let fcx: @fn_ctxt =\n         @{ret_ty: rty,\n           purity: ast::pure_fn,\n+          proto: ast::proto_fn,\n           var_bindings: ty::unify::mk_var_bindings(),\n           locals: new_int_hash[int](),\n           local_names: new_int_hash[ast::ident](),\n@@ -2643,13 +2646,13 @@ fn check_fn(ccx: &@crate_ctxt, f: &ast::_fn, id: &ast::node_id,\n     let fcx: @fn_ctxt =\n         @{ret_ty: ast_ty_to_ty_crate(ccx, decl.output),\n           purity: decl.purity,\n+          proto: f.proto,\n           var_bindings: gather_result.var_bindings,\n           locals: gather_result.locals,\n           local_names: gather_result.local_names,\n           next_var_id: gather_result.next_var_id,\n           mutable fixups: fixups,\n           ccx: ccx};\n-\n     check_block(fcx, body);\n     alt decl.purity {\n       ast::pure_fn. {"}, {"sha": "f8ea3bdde4142b20743445af59bc74e812ae88f1", "filename": "src/test/compile-fail/put-in-fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9ae548daee36328d9f8780a2f02a3ee4a96caaa/src%2Ftest%2Fcompile-fail%2Fput-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9ae548daee36328d9f8780a2f02a3ee4a96caaa/src%2Ftest%2Fcompile-fail%2Fput-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fput-in-fn.rs?ref=c9ae548daee36328d9f8780a2f02a3ee4a96caaa", "patch": "@@ -1,8 +1,8 @@\n // xfail-stage1\n // xfail-stage2\n // xfail-stage3\n-// error-pattern: iterator function\n+// error-pattern:put in non-iterator\n \n fn f() -> int { put 10; }\n \n-fn main() { }\n\\ No newline at end of file\n+fn main() { }"}]}