{"sha": "af3f4c7f298f28965fee571945ecde1344b6908b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmM2Y0YzdmMjk4ZjI4OTY1ZmVlNTcxOTQ1ZWNkZTEzNDRiNjkwOGI=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-04-14T10:27:05Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-05-01T06:57:02Z"}, "message": "Remove duplicates", "tree": {"sha": "cd066a952cb6dee7762a8f64c45dacba6f005f20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd066a952cb6dee7762a8f64c45dacba6f005f20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af3f4c7f298f28965fee571945ecde1344b6908b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af3f4c7f298f28965fee571945ecde1344b6908b", "html_url": "https://github.com/rust-lang/rust/commit/af3f4c7f298f28965fee571945ecde1344b6908b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af3f4c7f298f28965fee571945ecde1344b6908b/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a2577322d71c0faa4d2b6e36e4f100324d6c228", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a2577322d71c0faa4d2b6e36e4f100324d6c228", "html_url": "https://github.com/rust-lang/rust/commit/7a2577322d71c0faa4d2b6e36e4f100324d6c228"}], "stats": {"total": 53, "additions": 21, "deletions": 32}, "files": [{"sha": "8c405c1f6ef225e10bd9628a72be1fe51dcac07b", "filename": "src/chains.rs", "status": "modified", "additions": 21, "deletions": 32, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/af3f4c7f298f28965fee571945ecde1344b6908b/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3f4c7f298f28965fee571945ecde1344b6908b/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=af3f4c7f298f28965fee571945ecde1344b6908b", "patch": "@@ -104,11 +104,16 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n         parent_shape = chain_indent(context, shape);\n     }\n     let parent_rewrite = try_opt!(parent.rewrite(context, parent_shape));\n+    let parent_rewrite_contains_newline = parent_rewrite.contains('\\n');\n \n     // Decide how to layout the rest of the chain. `extend` is true if we can\n     // put the first non-parent item on the same line as the parent.\n-    let (nested_shape, extend) = if !parent_rewrite.contains('\\n') && is_continuable(&parent) {\n-        let nested_shape = if let ast::ExprKind::Try(..) = subexpr_list.last().unwrap().node {\n+    let first_subexpr_is_try = match subexpr_list.last().unwrap().node {\n+        ast::ExprKind::Try(..) => true,\n+        _ => false,\n+    };\n+    let (nested_shape, extend) = if !parent_rewrite_contains_newline && is_continuable(&parent) {\n+        let nested_shape = if first_subexpr_is_try {\n             parent_shape.block_indent(context.config.tab_spaces)\n         } else {\n             chain_indent(context, shape.add_offset(parent_rewrite.len()))\n@@ -120,7 +125,7 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n         // The parent is a block, so align the rest of the chain with the closing\n         // brace.\n         (parent_shape, false)\n-    } else if parent_rewrite.contains('\\n') {\n+    } else if parent_rewrite_contains_newline {\n         (chain_indent(context,\n                       parent_shape.block_indent(context.config.tab_spaces)),\n          false)\n@@ -137,9 +142,9 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n         ..nested_shape\n     };\n     let first_child_shape = if extend {\n-        let mut shape = try_opt!(parent_shape.shrink_left(last_line_width(&parent_rewrite)));\n+        let mut shape = try_opt!(parent_shape.offset_left(last_line_width(&parent_rewrite)));\n         match context.config.chain_indent {\n-            IndentStyle::Visual => other_child_shape,\n+            IndentStyle::Visual => shape,\n             IndentStyle::Block => {\n                 shape.offset = shape\n                     .offset\n@@ -207,17 +212,15 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n         }\n     }\n \n-    let connector = if fits_single_line && !parent_rewrite.contains('\\n') {\n+    let connector = if fits_single_line && !parent_rewrite_contains_newline {\n         // Yay, we can put everything on one line.\n         String::new()\n     } else {\n         // Use new lines.\n         format!(\"\\n{}\", nested_shape.indent.to_string(context.config))\n     };\n \n-    let first_connector = if extend || subexpr_list.is_empty() {\n-        \"\"\n-    } else if let ast::ExprKind::Try(_) = subexpr_list.last().unwrap().node {\n+    let first_connector = if extend || subexpr_list.is_empty() || first_subexpr_is_try {\n         \"\"\n     } else {\n         &*connector\n@@ -375,33 +378,19 @@ fn rewrite_chain_subexpr(expr: &ast::Expr,\n                          context: &RewriteContext,\n                          shape: Shape)\n                          -> Option<String> {\n+    let rewrite_element = |expr_str: String| if expr_str.len() <= shape.width {\n+        Some(expr_str)\n+    } else {\n+        None\n+    };\n+\n     match expr.node {\n         ast::ExprKind::MethodCall(ref method_name, ref types, ref expressions) => {\n             rewrite_method_call(method_name.node, types, expressions, span, context, shape)\n         }\n-        ast::ExprKind::Field(_, ref field) => {\n-            let s = format!(\".{}\", field.node);\n-            if s.len() <= shape.width {\n-                Some(s)\n-            } else {\n-                None\n-            }\n-        }\n-        ast::ExprKind::TupField(_, ref field) => {\n-            let s = format!(\".{}\", field.node);\n-            if s.len() <= shape.width {\n-                Some(s)\n-            } else {\n-                None\n-            }\n-        }\n-        ast::ExprKind::Try(_) => {\n-            if shape.width >= 1 {\n-                Some(\"?\".into())\n-            } else {\n-                None\n-            }\n-        }\n+        ast::ExprKind::Field(_, ref field) => rewrite_element(format!(\".{}\", field.node)),\n+        ast::ExprKind::TupField(_, ref field) => rewrite_element(format!(\".{}\", field.node)),\n+        ast::ExprKind::Try(_) => rewrite_element(String::from(\"?\")),\n         _ => unreachable!(),\n     }\n }"}]}