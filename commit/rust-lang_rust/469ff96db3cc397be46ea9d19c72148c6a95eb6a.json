{"sha": "469ff96db3cc397be46ea9d19c72148c6a95eb6a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2OWZmOTZkYjNjYzM5N2JlNDZlYTlkMTljNzIxNDhjNmE5NWViNmE=", "commit": {"author": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-01-13T19:01:15Z"}, "committer": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-04-05T11:33:45Z"}, "message": "The shared_code_in_if_blocks lint only operats on entire if expr not else ifs", "tree": {"sha": "2cd40f47e68ac177472b9c5aefe2b560c26453a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cd40f47e68ac177472b9c5aefe2b560c26453a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/469ff96db3cc397be46ea9d19c72148c6a95eb6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/469ff96db3cc397be46ea9d19c72148c6a95eb6a", "html_url": "https://github.com/rust-lang/rust/commit/469ff96db3cc397be46ea9d19c72148c6a95eb6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/469ff96db3cc397be46ea9d19c72148c6a95eb6a/comments", "author": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1df73228a7cdadb4d635c6ed77daeeaebbe10ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1df73228a7cdadb4d635c6ed77daeeaebbe10ff", "html_url": "https://github.com/rust-lang/rust/commit/d1df73228a7cdadb4d635c6ed77daeeaebbe10ff"}], "stats": {"total": 169, "additions": 148, "deletions": 21}, "files": [{"sha": "7162d809ec67672574fbdbbc49911e2c3f34e44f", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 33, "deletions": 19, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/469ff96db3cc397be46ea9d19c72148c6a95eb6a/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/469ff96db3cc397be46ea9d19c72148c6a95eb6a/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=469ff96db3cc397be46ea9d19c72148c6a95eb6a", "patch": "@@ -1,7 +1,12 @@\n-use clippy_utils::diagnostics::span_lint_and_note;\n-use clippy_utils::{eq_expr_value, in_macro, search_same, SpanlessEq, SpanlessHash};\n-use clippy_utils::{get_parent_expr, if_sequence};\n-use rustc_hir::{Block, Expr, ExprKind};\n+use crate::utils::{both, count_eq, eq_expr_value, in_macro, search_same, SpanlessEq, SpanlessHash};\n+use crate::utils::{\n+    first_line_of_span, get_parent_expr, higher, if_sequence, indent_of, parent_node_is_if_expr, reindent_multiline,\n+    snippet, span_lint_and_note, span_lint_and_sugg, span_lint_and_then,\n+};\n+use rustc_data_structures::fx::FxHashSet;\n+use rustc_errors::Applicability;\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc_hir::{Block, Expr, HirId};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -136,7 +141,7 @@ declare_clippy_lint! {\n     /// };\n     /// ```\n     pub SHARED_CODE_IN_IF_BLOCKS,\n-    pedantic,\n+    nursery,\n     \"`if` statement with shared code in all blocks\"\n }\n \n@@ -180,7 +185,7 @@ fn lint_same_then_else<'tcx>(\n ) {\n     // We only lint ifs with multiple blocks\n     // TODO xFrednet 2021-01-01: Check if it's an else if block\n-    if blocks.len() < 2 {\n+    if blocks.len() < 2 || parent_node_is_if_expr(expr, cx) {\n         return;\n     }\n \n@@ -190,7 +195,7 @@ fn lint_same_then_else<'tcx>(\n     let mut start_eq = usize::MAX;\n     let mut end_eq = usize::MAX;\n     let mut expr_eq = true;\n-    for (index, win) in blocks.windows(2).enumerate() {\n+    for win in blocks.windows(2) {\n         let l_stmts = win[0].stmts;\n         let r_stmts = win[1].stmts;\n \n@@ -202,9 +207,7 @@ fn lint_same_then_else<'tcx>(\n         let block_expr_eq = both(&win[0].expr, &win[1].expr, |l, r| evaluator.eq_expr(l, r));\n \n         // IF_SAME_THEN_ELSE\n-        // We only lint the first two blocks (index == 0). Further blocks will be linted when that if\n-        // statement is checked\n-        if index == 0 && block_expr_eq && l_stmts.len() == r_stmts.len() && l_stmts.len() == current_start_eq {\n+        if block_expr_eq && l_stmts.len() == r_stmts.len() && l_stmts.len() == current_start_eq {\n             span_lint_and_note(\n                 cx,\n                 IF_SAME_THEN_ELSE,\n@@ -215,16 +218,24 @@ fn lint_same_then_else<'tcx>(\n             );\n \n             return;\n+        } else {\n+            println!(\n+                \"{:?}\\n - expr_eq: {:10}, l_stmts.len(): {:10}, r_stmts.len(): {:10}\",\n+                win[0].span,\n+                block_expr_eq,\n+                l_stmts.len(),\n+                r_stmts.len()\n+            )\n         }\n \n         start_eq = start_eq.min(current_start_eq);\n         end_eq = end_eq.min(current_end_eq);\n         expr_eq &= block_expr_eq;\n+    }\n \n-        // We can return if the eq count is 0 from both sides or if it has no unconditional else case\n-        if !has_unconditional_else || (start_eq == 0 && end_eq == 0 && (has_expr && !expr_eq)) {\n-            return;\n-        }\n+    // SHARED_CODE_IN_IF_BLOCKS prerequisites\n+    if !has_unconditional_else || (start_eq == 0 && end_eq == 0 && (has_expr && !expr_eq)) {\n+        return;\n     }\n \n     if has_expr && !expr_eq {\n@@ -275,11 +286,14 @@ fn lint_same_then_else<'tcx>(\n             end_eq -= moved_start;\n         }\n \n-        let mut end_linable = true;\n-        if let Some(expr) = block.expr {\n+        let end_linable = if let Some(expr) = block.expr {\n             intravisit::walk_expr(&mut walker, expr);\n-            end_linable = walker.uses.iter().any(|x| !block_defs.contains(x));\n-        }\n+            walker.uses.iter().any(|x| !block_defs.contains(x))\n+        } else if end_eq == 0 {\n+            false\n+        } else {\n+            true\n+        };\n \n         emit_shared_code_in_if_blocks_lint(cx, start_eq, end_eq, end_linable, blocks, expr);\n     }\n@@ -351,7 +365,7 @@ fn emit_shared_code_in_if_blocks_lint(\n             SHARED_CODE_IN_IF_BLOCKS,\n             *span,\n             \"All code blocks contain the same code\",\n-            \"Consider moving the code out like this\",\n+            \"Consider moving the statements out like this\",\n             sugg.clone(),\n             Applicability::Unspecified,\n         );"}, {"sha": "b85bb2e1f96f32989b9e6698738ab7836f554406", "filename": "tests/ui/shared_code_in_if_blocks/shared_at_bot.rs", "status": "modified", "additions": 105, "deletions": 2, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/469ff96db3cc397be46ea9d19c72148c6a95eb6a/tests%2Fui%2Fshared_code_in_if_blocks%2Fshared_at_bot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/469ff96db3cc397be46ea9d19c72148c6a95eb6a/tests%2Fui%2Fshared_code_in_if_blocks%2Fshared_at_bot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshared_code_in_if_blocks%2Fshared_at_bot.rs?ref=469ff96db3cc397be46ea9d19c72148c6a95eb6a", "patch": "@@ -32,16 +32,119 @@ fn simple_examples() {\n         println!(\"Block end!\");\n         result\n     };\n+\n+    if x == 9 {\n+        println!(\"The index is: 6\");\n+\n+        println!(\"Same end of block\");\n+    } else if x == 8 {\n+        println!(\"The index is: 4\");\n+\n+        println!(\"Same end of block\");\n+    } else {\n+        println!(\"Same end of block\");\n+    }\n+\n+    // TODO xFrednet 2021-01.13: Fix lint for `if let`\n+    let index = Some(8);\n+    if let Some(index) = index {\n+        println!(\"The index is: {}\", index);\n+\n+        println!(\"Same end of block\");\n+    } else {\n+        println!(\"Same end of block\");\n+    }\n+\n+    if x == 9 {\n+        if x == 8 {\n+            // No parent!!\n+            println!(\"Hello World\");\n+            println!(\"---\");\n+        } else {\n+            println!(\"Hello World\");\n+        }\n+    }\n }\n \n /// Simple examples where the move can cause some problems due to moved values\n fn simple_but_suggestion_is_invalid() {\n-    // TODO xFrednet 2021-01-12: This\n+    let x = 16;\n+\n+    // Local value\n+    let later_used_value = 17;\n+    if x == 9 {\n+        let _ = 9;\n+        let later_used_value = \"A string value\";\n+        println!(\"{}\", later_used_value);\n+    } else {\n+        let later_used_value = \"A string value\";\n+        println!(\"{}\", later_used_value);\n+        // I'm expecting a note about this\n+    }\n+    println!(\"{}\", later_used_value);\n+\n+    // outer function\n+    if x == 78 {\n+        let simple_examples = \"I now identify as a &str :)\";\n+        println!(\"This is the new simple_example: {}\", simple_examples);\n+    } else {\n+        println!(\"Separator print statement\");\n+\n+        let simple_examples = \"I now identify as a &str :)\";\n+        println!(\"This is the new simple_example: {}\", simple_examples);\n+    }\n+    simple_examples();\n }\n \n /// Tests where the blocks are not linted due to the used value scope\n fn not_moveable_due_to_value_scope() {\n-    // TODO xFrednet 2021-01-12: This\n+    let x = 18;\n+\n+    // Using a local value in the moved code\n+    if x == 9 {\n+        let y = 18;\n+        println!(\"y is: `{}`\", y);\n+    } else {\n+        let y = \"A string\";\n+        println!(\"y is: `{}`\", y);\n+    }\n+\n+    // Using a local value in the expression\n+    let _ = if x == 0 {\n+        let mut result = x + 1;\n+\n+        println!(\"1. Doing some calculations\");\n+        println!(\"2. Some more calculations\");\n+        println!(\"3. Setting result\");\n+\n+        result\n+    } else {\n+        let mut result = x - 1;\n+\n+        println!(\"1. Doing some calculations\");\n+        println!(\"2. Some more calculations\");\n+        println!(\"3. Setting result\");\n+\n+        result\n+    };\n+\n+    let _ = if x == 7 {\n+        let z1 = 100;\n+        println!(\"z1: {}\", z1);\n+\n+        let z2 = z1;\n+        println!(\"z2: {}\", z2);\n+\n+        z2\n+    } else {\n+        let z1 = 300;\n+        println!(\"z1: {}\", z1);\n+\n+        let z2 = z1;\n+        println!(\"z2: {}\", z2);\n+\n+        z2\n+    };\n }\n \n fn main() {}"}, {"sha": "480758777f16181d78b8665a996a5bae5dbf222a", "filename": "tests/ui/shared_code_in_if_blocks/valid_if_blocks.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/469ff96db3cc397be46ea9d19c72148c6a95eb6a/tests%2Fui%2Fshared_code_in_if_blocks%2Fvalid_if_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/469ff96db3cc397be46ea9d19c72148c6a95eb6a/tests%2Fui%2Fshared_code_in_if_blocks%2Fvalid_if_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshared_code_in_if_blocks%2Fvalid_if_blocks.rs?ref=469ff96db3cc397be46ea9d19c72148c6a95eb6a", "patch": "@@ -152,6 +152,16 @@ fn trigger_other_lint() {\n             \":D\"\n         }\n     };\n+\n+    if x == 0 {\n+        println!(\"I'm single\");\n+    } else if x == 68 {\n+        println!(\"I'm a doppelg\u00e4nger\");\n+        // Don't listen to my clone below\n+    } else {\n+        // Don't listen to my clone above\n+        println!(\"I'm a doppelg\u00e4nger\");\n+    }\n }\n \n fn main() {}"}]}