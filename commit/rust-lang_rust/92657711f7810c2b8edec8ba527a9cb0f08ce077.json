{"sha": "92657711f7810c2b8edec8ba527a9cb0f08ce077", "node_id": "C_kwDOAAsO6NoAKDkyNjU3NzExZjc4MTBjMmI4ZWRlYzhiYTUyN2E5Y2IwZjA4Y2UwNzc", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-02-20T11:24:00Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-02-20T11:24:00Z"}, "message": "Sync from rust 7aa413d59206fd511137728df3d9e0fd377429bd", "tree": {"sha": "75eb8d6ccaa7da8355d6d9ff1089c759399c61a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75eb8d6ccaa7da8355d6d9ff1089c759399c61a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92657711f7810c2b8edec8ba527a9cb0f08ce077", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92657711f7810c2b8edec8ba527a9cb0f08ce077", "html_url": "https://github.com/rust-lang/rust/commit/92657711f7810c2b8edec8ba527a9cb0f08ce077", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92657711f7810c2b8edec8ba527a9cb0f08ce077/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5220e60ac63353735203afd1603f46609b5a4804", "url": "https://api.github.com/repos/rust-lang/rust/commits/5220e60ac63353735203afd1603f46609b5a4804", "html_url": "https://github.com/rust-lang/rust/commit/5220e60ac63353735203afd1603f46609b5a4804"}, {"sha": "8996171e8891d8b1f715a6e39b28753860113e56", "url": "https://api.github.com/repos/rust-lang/rust/commits/8996171e8891d8b1f715a6e39b28753860113e56", "html_url": "https://github.com/rust-lang/rust/commit/8996171e8891d8b1f715a6e39b28753860113e56"}], "stats": {"total": 31, "additions": 7, "deletions": 24}, "files": [{"sha": "bcbb93a7765fa4cc57f5ce0d47988cb372675ad3", "filename": "src/base.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/92657711f7810c2b8edec8ba527a9cb0f08ce077/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92657711f7810c2b8edec8ba527a9cb0f08ce077/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=92657711f7810c2b8edec8ba527a9cb0f08ce077", "patch": "@@ -347,7 +347,12 @@ fn codegen_fn_body(fx: &mut FunctionCx<'_, '_, '_>, start_block: Block) {\n             }\n             TerminatorKind::Assert { cond, expected, msg, target, cleanup: _ } => {\n                 if !fx.tcx.sess.overflow_checks() {\n-                    if let mir::AssertKind::OverflowNeg(_) = *msg {\n+                    let overflow_not_to_check = match msg {\n+                        AssertKind::OverflowNeg(..) => true,\n+                        AssertKind::Overflow(op, ..) => op.is_checkable(),\n+                        _ => false,\n+                    };\n+                    if overflow_not_to_check {\n                         let target = fx.get_block(*target);\n                         fx.bcx.ins().jump(target, &[]);\n                         continue;\n@@ -567,15 +572,7 @@ fn codegen_stmt<'tcx>(\n                     let lhs = codegen_operand(fx, &lhs_rhs.0);\n                     let rhs = codegen_operand(fx, &lhs_rhs.1);\n \n-                    let res = if !fx.tcx.sess.overflow_checks() {\n-                        let val =\n-                            crate::num::codegen_int_binop(fx, bin_op, lhs, rhs).load_scalar(fx);\n-                        let is_overflow = fx.bcx.ins().iconst(types::I8, 0);\n-                        CValue::by_val_pair(val, is_overflow, lval.layout())\n-                    } else {\n-                        crate::num::codegen_checked_int_binop(fx, bin_op, lhs, rhs)\n-                    };\n-\n+                    let res = crate::num::codegen_checked_int_binop(fx, bin_op, lhs, rhs);\n                     lval.write_cvalue(fx, res);\n                 }\n                 Rvalue::UnaryOp(un_op, ref operand) => {"}, {"sha": "662d474f7776b12613ae3ef5a6a2f821d736b58e", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/92657711f7810c2b8edec8ba527a9cb0f08ce077/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92657711f7810c2b8edec8ba527a9cb0f08ce077/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=92657711f7810c2b8edec8ba527a9cb0f08ce077", "patch": "@@ -500,20 +500,6 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             let res = crate::num::codegen_int_binop(fx, bin_op, x, y);\n             ret.write_cvalue(fx, res);\n         }\n-        sym::add_with_overflow | sym::sub_with_overflow | sym::mul_with_overflow => {\n-            intrinsic_args!(fx, args => (x, y); intrinsic);\n-\n-            assert_eq!(x.layout().ty, y.layout().ty);\n-            let bin_op = match intrinsic {\n-                sym::add_with_overflow => BinOp::Add,\n-                sym::sub_with_overflow => BinOp::Sub,\n-                sym::mul_with_overflow => BinOp::Mul,\n-                _ => unreachable!(),\n-            };\n-\n-            let res = crate::num::codegen_checked_int_binop(fx, bin_op, x, y);\n-            ret.write_cvalue(fx, res);\n-        }\n         sym::saturating_add | sym::saturating_sub => {\n             intrinsic_args!(fx, args => (lhs, rhs); intrinsic);\n "}]}