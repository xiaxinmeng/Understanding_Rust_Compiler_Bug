{"sha": "6cb69ea790ad635acb3a8d4826e03ac29ca10351", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjYjY5ZWE3OTBhZDYzNWFjYjNhOGQ0ODI2ZTAzYWMyOWNhMTAzNTE=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-07-19T09:37:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-19T09:37:49Z"}, "message": "Rollup merge of #87268 - SkiFire13:fix-uninit-ref-list, r=nagisa\n\nDon't create references to uninitialized data in `List::from_arena`\n\nPreviously `result` and `arena_slice` were references pointing to uninitialized data, which is technically UB. They may have been fine because the pointed data is `Copy` and and they were only written to, but the semantics of this aren't clearly defined yet, and since we have a sound way to do the same thing I don't think we should keep the possibly-unsound way.", "tree": {"sha": "8929ee5e23a7bd91146213570268566f37deb884", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8929ee5e23a7bd91146213570268566f37deb884"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6cb69ea790ad635acb3a8d4826e03ac29ca10351", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg9UftCRBK7hj4Ov3rIwAAmYwIAKStcnVAR3d6403HjVrt/eVQ\ngCj5kkKhbIQoD87fAOeXVRZOnkw5bbPPkL3C7/cYCJHB1kcWS29vs1zg5YXJpexh\nG4cU4MOkuXCZkBMZ6QIqm5vMXtV9B9tJ1pkMlpthR0TRC9vclJ69KAV+JtTuXc4u\n3TTIZYdpYQA8a351R7mn81WUU+OTXjty3vma0s1gLPl2tetKDkyiRLh1l13RIfFP\nHnM58DyTGFW/1GRlfNzzoskhYONo27guWL7RJPMWvxGwmPOQVGZpWjtZQSXNmEIO\nt/QYc9Z0O6X4pQQMTfZXZsbg9eDMCKLXrmDylNuW/3P9hm90I5Ju2HCHDnAxUdo=\n=GINf\n-----END PGP SIGNATURE-----\n", "payload": "tree 8929ee5e23a7bd91146213570268566f37deb884\nparent 5ef6439c8d4df4f54cfdb96e7ff66ebd062e26e9\nparent 98e9d16d258154c319d7e48159ad2f65c3244713\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1626687469 +0200\ncommitter GitHub <noreply@github.com> 1626687469 +0200\n\nRollup merge of #87268 - SkiFire13:fix-uninit-ref-list, r=nagisa\n\nDon't create references to uninitialized data in `List::from_arena`\n\nPreviously `result` and `arena_slice` were references pointing to uninitialized data, which is technically UB. They may have been fine because the pointed data is `Copy` and and they were only written to, but the semantics of this aren't clearly defined yet, and since we have a sound way to do the same thing I don't think we should keep the possibly-unsound way.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6cb69ea790ad635acb3a8d4826e03ac29ca10351", "html_url": "https://github.com/rust-lang/rust/commit/6cb69ea790ad635acb3a8d4826e03ac29ca10351", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6cb69ea790ad635acb3a8d4826e03ac29ca10351/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ef6439c8d4df4f54cfdb96e7ff66ebd062e26e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ef6439c8d4df4f54cfdb96e7ff66ebd062e26e9", "html_url": "https://github.com/rust-lang/rust/commit/5ef6439c8d4df4f54cfdb96e7ff66ebd062e26e9"}, {"sha": "98e9d16d258154c319d7e48159ad2f65c3244713", "url": "https://api.github.com/repos/rust-lang/rust/commits/98e9d16d258154c319d7e48159ad2f65c3244713", "html_url": "https://github.com/rust-lang/rust/commit/98e9d16d258154c319d7e48159ad2f65c3244713"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "1dceda6c7aad0f9e81353601732ef047139ac2ff", "filename": "compiler/rustc_middle/src/ty/list.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6cb69ea790ad635acb3a8d4826e03ac29ca10351/compiler%2Frustc_middle%2Fsrc%2Fty%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cb69ea790ad635acb3a8d4826e03ac29ca10351/compiler%2Frustc_middle%2Fsrc%2Fty%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flist.rs?ref=6cb69ea790ad635acb3a8d4826e03ac29ca10351", "patch": "@@ -63,17 +63,17 @@ impl<T: Copy> List<T> {\n \n         let (layout, _offset) =\n             Layout::new::<usize>().extend(Layout::for_value::<[T]>(slice)).unwrap();\n-        let mem = arena.dropless.alloc_raw(layout);\n+        let mem = arena.dropless.alloc_raw(layout) as *mut List<T>;\n         unsafe {\n-            let result = &mut *(mem as *mut List<T>);\n             // Write the length\n-            result.len = slice.len();\n+            ptr::addr_of_mut!((*mem).len).write(slice.len());\n \n             // Write the elements\n-            let arena_slice = slice::from_raw_parts_mut(result.data.as_mut_ptr(), result.len);\n-            arena_slice.copy_from_slice(slice);\n+            ptr::addr_of_mut!((*mem).data)\n+                .cast::<T>()\n+                .copy_from_nonoverlapping(slice.as_ptr(), slice.len());\n \n-            result\n+            &mut *mem\n         }\n     }\n "}]}