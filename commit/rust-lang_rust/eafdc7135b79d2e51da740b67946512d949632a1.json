{"sha": "eafdc7135b79d2e51da740b67946512d949632a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhZmRjNzEzNWI3OWQyZTUxZGE3NDBiNjc5NDY1MTJkOTQ5NjMyYTE=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-02-25T11:37:12Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-02-26T05:26:34Z"}, "message": "Record the publicity of struct fields and enum variants.\n\nThe stability check checks the `PublicItems` map when giving errors if\nthere is a #[stable] item with a public contents that doesn't not have\nits own stability. Without recording this, struct fields and enum\nvariants will not get errors for e.g. stable modules with unmarked\nfunctions internally.\n\nThis is just improving the compiler's precision to give the standard\nlibrary developers more information earlier.\n\nE.g.\n\n    #![staged_api]\n    #![feature(staged_api)]\n    #![crate_type = \"lib\"]\n\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    pub struct Foo {\n        pub x: i32\n    }\n\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    pub mod bar {\n        pub fn baz() {}\n    }\n\nWithout the patch it gives:\n\n    test.rs:12:5: 12:20 error: This node does not have a stability attribute\n    test.rs:12     pub fn baz() {}\n                   ^~~~~~~~~~~~~~~\n    error: aborting due to previous error\n\nWith the patch it gives:\n\n    test.rs:7:9: 7:15 error: This node does not have a stability attribute\n    test.rs:7     pub x: i32\n                      ^~~~~~\n    test.rs:12:5: 12:20 error: This node does not have a stability attribute\n    test.rs:12     pub fn baz() {}\n                   ^~~~~~~~~~~~~~~\n    error: aborting due to 2 previous errors", "tree": {"sha": "3fc901423b11f7bd8b5aacb4a3d930972749be42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3fc901423b11f7bd8b5aacb4a3d930972749be42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eafdc7135b79d2e51da740b67946512d949632a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eafdc7135b79d2e51da740b67946512d949632a1", "html_url": "https://github.com/rust-lang/rust/commit/eafdc7135b79d2e51da740b67946512d949632a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eafdc7135b79d2e51da740b67946512d949632a1/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19cb8f32d894719ece5b2308dabab45be1b94fcf", "url": "https://api.github.com/repos/rust-lang/rust/commits/19cb8f32d894719ece5b2308dabab45be1b94fcf", "html_url": "https://github.com/rust-lang/rust/commit/19cb8f32d894719ece5b2308dabab45be1b94fcf"}], "stats": {"total": 10, "additions": 10, "deletions": 0}, "files": [{"sha": "46729988bb6bd976c658bb1c23e4be691c0e8c38", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eafdc7135b79d2e51da740b67946512d949632a1/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafdc7135b79d2e51da740b67946512d949632a1/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=eafdc7135b79d2e51da740b67946512d949632a1", "patch": "@@ -233,6 +233,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n             ast::ItemEnum(ref def, _) if public_first => {\n                 for variant in &def.variants {\n                     self.exported_items.insert(variant.node.id);\n+                    self.public_items.insert(variant.node.id);\n                 }\n             }\n \n@@ -321,6 +322,15 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n                     Some(id) => { self.exported_items.insert(id); }\n                     None => {}\n                 }\n+                // fields can be public or private, so lets check\n+                for field in &def.fields {\n+                    let vis = match field.node.kind {\n+                        ast::NamedField(_, vis) | ast::UnnamedField(vis) => vis\n+                    };\n+                    if vis == ast::Public {\n+                        self.public_items.insert(field.node.id);\n+                    }\n+                }\n             }\n \n             ast::ItemTy(ref ty, _) if public_first => {"}]}