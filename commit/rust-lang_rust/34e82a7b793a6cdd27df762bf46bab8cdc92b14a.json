{"sha": "34e82a7b793a6cdd27df762bf46bab8cdc92b14a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0ZTgyYTdiNzkzYTZjZGQyN2RmNzYyYmY0NmJhYjhjZGM5MmIxNGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-10T16:19:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-10T16:19:48Z"}, "message": "Auto merge of #64354 - Centril:rollup-oaq0xoi, r=Centril\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #63786 (Make `abs`, `wrapping_abs`, `overflowing_abs` const functions)\n - #63989 (Add Yaah to clippy toolstain notification list)\n - #64256 (test/c-variadic: Fix patterns on powerpc64)\n - #64292 (lowering: extend temporary lifetimes around await)\n - #64311 (lldb: avoid mixing \"Hit breakpoint\" message with other output.)\n - #64330 (Clarify E0507 to note Fn/FnMut relationship to borrowing)\n - #64331 (Changed instant is earlier to instant is later)\n - #64344 (rustc_mir: buffer -Zdump-mir output instead of pestering the kernel constantly.)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "fba9fd9e3b84c88b19e650ba1da44075f23b7220", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fba9fd9e3b84c88b19e650ba1da44075f23b7220"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34e82a7b793a6cdd27df762bf46bab8cdc92b14a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34e82a7b793a6cdd27df762bf46bab8cdc92b14a", "html_url": "https://github.com/rust-lang/rust/commit/34e82a7b793a6cdd27df762bf46bab8cdc92b14a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34e82a7b793a6cdd27df762bf46bab8cdc92b14a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87b0c9036f0557568cfc939542508e9adf874b83", "url": "https://api.github.com/repos/rust-lang/rust/commits/87b0c9036f0557568cfc939542508e9adf874b83", "html_url": "https://github.com/rust-lang/rust/commit/87b0c9036f0557568cfc939542508e9adf874b83"}, {"sha": "8d2ef194a10fb1e1d2355170e30fef27a45b315b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d2ef194a10fb1e1d2355170e30fef27a45b315b", "html_url": "https://github.com/rust-lang/rust/commit/8d2ef194a10fb1e1d2355170e30fef27a45b315b"}], "stats": {"total": 187, "additions": 117, "deletions": 70}, "files": [{"sha": "7c2e91474c1f1710e5f85c62d09c47ea957e19ba", "filename": "src/etc/lldb_batchmode.py", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/34e82a7b793a6cdd27df762bf46bab8cdc92b14a/src%2Fetc%2Flldb_batchmode.py", "raw_url": "https://github.com/rust-lang/rust/raw/34e82a7b793a6cdd27df762bf46bab8cdc92b14a/src%2Fetc%2Flldb_batchmode.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Flldb_batchmode.py?ref=34e82a7b793a6cdd27df762bf46bab8cdc92b14a", "patch": "@@ -45,7 +45,10 @@ def normalize_whitespace(s):\n \n def breakpoint_callback(frame, bp_loc, dict):\n     \"\"\"This callback is registered with every breakpoint and makes sure that the\n-    frame containing the breakpoint location is selected\"\"\"\n+    frame containing the breakpoint location is selected \"\"\"\n+\n+    # HACK(eddyb) print a newline to avoid continuing an unfinished line.\n+    print(\"\")\n     print(\"Hit breakpoint \" + str(bp_loc))\n \n     # Select the frame and the thread containing it"}, {"sha": "df1c00ccd184f17e7c4cdf9004b8eff68ad95ef9", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 9, "deletions": 21, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/34e82a7b793a6cdd27df762bf46bab8cdc92b14a/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34e82a7b793a6cdd27df762bf46bab8cdc92b14a/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=34e82a7b793a6cdd27df762bf46bab8cdc92b14a", "patch": "@@ -1401,12 +1401,8 @@ $EndFeature, \"\n ```\"),\n             #[stable(feature = \"no_panic_abs\", since = \"1.13.0\")]\n             #[inline]\n-            pub fn wrapping_abs(self) -> Self {\n-                if self.is_negative() {\n-                    self.wrapping_neg()\n-                } else {\n-                    self\n-                }\n+            pub const fn wrapping_abs(self) -> Self {\n+                (self ^ (self >> ($BITS - 1))).wrapping_sub(self >> ($BITS - 1))\n             }\n         }\n \n@@ -1764,12 +1760,8 @@ $EndFeature, \"\n ```\"),\n             #[stable(feature = \"no_panic_abs\", since = \"1.13.0\")]\n             #[inline]\n-            pub fn overflowing_abs(self) -> (Self, bool) {\n-                if self.is_negative() {\n-                    self.overflowing_neg()\n-                } else {\n-                    (self, false)\n-                }\n+            pub const fn overflowing_abs(self) -> (Self, bool) {\n+                (self ^ (self >> ($BITS - 1))).overflowing_sub(self >> ($BITS - 1))\n             }\n         }\n \n@@ -1973,15 +1965,11 @@ $EndFeature, \"\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[inline]\n             #[rustc_inherit_overflow_checks]\n-            pub fn abs(self) -> Self {\n-                if self.is_negative() {\n-                    // Note that the #[inline] above means that the overflow\n-                    // semantics of this negation depend on the crate we're being\n-                    // inlined into.\n-                    -self\n-                } else {\n-                    self\n-                }\n+            pub const fn abs(self) -> Self {\n+                // Note that the #[inline] above means that the overflow\n+                // semantics of the subtraction depend on the crate we're being\n+                // inlined into.\n+                (self ^ (self >> ($BITS - 1))) - (self >> ($BITS - 1))\n             }\n         }\n "}, {"sha": "a46cdabbb518fd74c1dd8270e60fd872b97095ae", "filename": "src/librustc/hir/lowering/expr.rs", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/34e82a7b793a6cdd27df762bf46bab8cdc92b14a/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34e82a7b793a6cdd27df762bf46bab8cdc92b14a/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs?ref=34e82a7b793a6cdd27df762bf46bab8cdc92b14a", "patch": "@@ -507,14 +507,13 @@ impl LoweringContext<'_> {\n \n     /// Desugar `<expr>.await` into:\n     /// ```rust\n-    /// {\n-    ///     let mut pinned = <expr>;\n-    ///     loop {\n+    /// match <expr> {\n+    ///     mut pinned => loop {\n     ///         match ::std::future::poll_with_tls_context(unsafe {\n-    ///             ::std::pin::Pin::new_unchecked(&mut pinned)\n+    ///             <::std::pin::Pin>::new_unchecked(&mut pinned)\n     ///         }) {\n     ///             ::std::task::Poll::Ready(result) => break result,\n-    ///             ::std::task::Poll::Pending => {},\n+    ///             ::std::task::Poll::Pending => {}\n     ///         }\n     ///         yield ();\n     ///     }\n@@ -549,21 +548,12 @@ impl LoweringContext<'_> {\n             self.allow_gen_future.clone(),\n         );\n \n-        // let mut pinned = <expr>;\n-        let expr = P(self.lower_expr(expr));\n         let pinned_ident = Ident::with_dummy_span(sym::pinned);\n         let (pinned_pat, pinned_pat_hid) = self.pat_ident_binding_mode(\n             span,\n             pinned_ident,\n             hir::BindingAnnotation::Mutable,\n         );\n-        let pinned_let = self.stmt_let_pat(\n-            ThinVec::new(),\n-            span,\n-            Some(expr),\n-            pinned_pat,\n-            hir::LocalSource::AwaitDesugar,\n-        );\n \n         // ::std::future::poll_with_tls_context(unsafe {\n         //     ::std::pin::Pin::new_unchecked(&mut pinned)\n@@ -621,7 +611,7 @@ impl LoweringContext<'_> {\n             self.arm(hir_vec![pending_pat], empty_block)\n         };\n \n-        let match_stmt = {\n+        let inner_match_stmt = {\n             let match_expr = self.expr_match(\n                 span,\n                 poll_expr,\n@@ -643,10 +633,11 @@ impl LoweringContext<'_> {\n \n         let loop_block = P(self.block_all(\n             span,\n-            hir_vec![match_stmt, yield_stmt],\n+            hir_vec![inner_match_stmt, yield_stmt],\n             None,\n         ));\n \n+        // loop { .. }\n         let loop_expr = P(hir::Expr {\n             hir_id: loop_hir_id,\n             node: hir::ExprKind::Loop(\n@@ -658,10 +649,14 @@ impl LoweringContext<'_> {\n             attrs: ThinVec::new(),\n         });\n \n-        hir::ExprKind::Block(\n-            P(self.block_all(span, hir_vec![pinned_let], Some(loop_expr))),\n-            None,\n-        )\n+        // mut pinned => loop { ... }\n+        let pinned_arm = self.arm(hir_vec![pinned_pat], loop_expr);\n+\n+        // match <expr> {\n+        //     mut pinned => loop { .. }\n+        // }\n+        let expr = P(self.lower_expr(expr));\n+        hir::ExprKind::Match(expr, hir_vec![pinned_arm], hir::MatchSource::AwaitDesugar)\n     }\n \n     fn lower_expr_closure("}, {"sha": "ba299e9463b8d90af04308adba8b5953ca654ce1", "filename": "src/librustc_mir/error_codes.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/34e82a7b793a6cdd27df762bf46bab8cdc92b14a/src%2Flibrustc_mir%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34e82a7b793a6cdd27df762bf46bab8cdc92b14a/src%2Flibrustc_mir%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ferror_codes.rs?ref=34e82a7b793a6cdd27df762bf46bab8cdc92b14a", "patch": "@@ -1646,7 +1646,14 @@ fn print_fancy_ref(fancy_ref: &FancyNum){\n \"##,\n \n E0507: r##\"\n-You tried to move out of a value which was borrowed. Erroneous code example:\n+You tried to move out of a value which was borrowed.\n+\n+This can also happen when using a type implementing `Fn` or `FnMut`, as neither\n+allows moving out of them (they usually represent closures which can be called\n+more than once). Much of the text following applies equally well to non-`FnOnce`\n+closure bodies.\n+\n+Erroneous code example:\n \n ```compile_fail,E0507\n use std::cell::RefCell;"}, {"sha": "c35c9e4da9f4846be217a9cabc0ed3205f56d0c9", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34e82a7b793a6cdd27df762bf46bab8cdc92b14a/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34e82a7b793a6cdd27df762bf46bab8cdc92b14a/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=34e82a7b793a6cdd27df762bf46bab8cdc92b14a", "patch": "@@ -227,12 +227,12 @@ pub(crate) fn create_dump_file(\n     pass_name: &str,\n     disambiguator: &dyn Display,\n     source: MirSource<'tcx>,\n-) -> io::Result<fs::File> {\n+) -> io::Result<io::BufWriter<fs::File>> {\n     let file_path = dump_path(tcx, extension, pass_num, pass_name, disambiguator, source);\n     if let Some(parent) = file_path.parent() {\n         fs::create_dir_all(parent)?;\n     }\n-    fs::File::create(&file_path)\n+    Ok(io::BufWriter::new(fs::File::create(&file_path)?))\n }\n \n /// Write out a human-readable textual representation for the given MIR."}, {"sha": "dbec4da24f96afdd606f5fa23a6aa7e5b3998d06", "filename": "src/libstd/time.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34e82a7b793a6cdd27df762bf46bab8cdc92b14a/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34e82a7b793a6cdd27df762bf46bab8cdc92b14a/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=34e82a7b793a6cdd27df762bf46bab8cdc92b14a", "patch": "@@ -216,7 +216,7 @@ impl Instant {\n     }\n \n     /// Returns the amount of time elapsed from another instant to this one,\n-    /// or None if that instant is earlier than this one.\n+    /// or None if that instant is later than this one.\n     ///\n     /// # Examples\n     ///"}, {"sha": "2acf95de97ee8fcf4ecd83829ac3f92b274cb8a2", "filename": "src/test/codegen/c-variadic.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/34e82a7b793a6cdd27df762bf46bab8cdc92b14a/src%2Ftest%2Fcodegen%2Fc-variadic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34e82a7b793a6cdd27df762bf46bab8cdc92b14a/src%2Ftest%2Fcodegen%2Fc-variadic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fc-variadic.rs?ref=34e82a7b793a6cdd27df762bf46bab8cdc92b14a", "patch": "@@ -1,4 +1,5 @@\n // compile-flags: -C no-prepopulate-passes\n+// ignore-tidy-linelength\n \n #![crate_type = \"lib\"]\n #![feature(c_variadic)]\n@@ -14,13 +15,13 @@ extern \"C\" {\n #[unwind(aborts)] // FIXME(#58794)\n pub unsafe extern \"C\" fn use_foreign_c_variadic_0() {\n     // Ensure that we correctly call foreign C-variadic functions.\n-    // CHECK: invoke void (i32, ...) @foreign_c_variadic_0(i32 0)\n+    // CHECK: invoke void (i32, ...) @foreign_c_variadic_0([[PARAM:i32( signext)?]] 0)\n     foreign_c_variadic_0(0);\n-    // CHECK: invoke void (i32, ...) @foreign_c_variadic_0(i32 0, i32 42)\n+    // CHECK: invoke void (i32, ...) @foreign_c_variadic_0([[PARAM]] 0, [[PARAM]] 42)\n     foreign_c_variadic_0(0, 42i32);\n-    // CHECK: invoke void (i32, ...) @foreign_c_variadic_0(i32 0, i32 42, i32 1024)\n+    // CHECK: invoke void (i32, ...) @foreign_c_variadic_0([[PARAM]] 0, [[PARAM]] 42, [[PARAM]] 1024)\n     foreign_c_variadic_0(0, 42i32, 1024i32);\n-    // CHECK: invoke void (i32, ...) @foreign_c_variadic_0(i32 0, i32 42, i32 1024, i32 0)\n+    // CHECK: invoke void (i32, ...) @foreign_c_variadic_0([[PARAM]] 0, [[PARAM]] 42, [[PARAM]] 1024, [[PARAM]] 0)\n     foreign_c_variadic_0(0, 42i32, 1024i32, 0i32);\n }\n \n@@ -34,18 +35,18 @@ pub unsafe extern \"C\" fn use_foreign_c_variadic_1_0(ap: VaList) {\n \n #[unwind(aborts)] // FIXME(#58794)\n pub unsafe extern \"C\" fn use_foreign_c_variadic_1_1(ap: VaList) {\n-    // CHECK: invoke void ({{.*}}*, ...) @foreign_c_variadic_1({{.*}} %ap, i32 42)\n+    // CHECK: invoke void ({{.*}}*, ...) @foreign_c_variadic_1({{.*}} %ap, [[PARAM]] 42)\n     foreign_c_variadic_1(ap, 42i32);\n }\n #[unwind(aborts)] // FIXME(#58794)\n pub unsafe extern \"C\" fn use_foreign_c_variadic_1_2(ap: VaList) {\n-    // CHECK: invoke void ({{.*}}*, ...) @foreign_c_variadic_1({{.*}} %ap, i32 2, i32 42)\n+    // CHECK: invoke void ({{.*}}*, ...) @foreign_c_variadic_1({{.*}} %ap, [[PARAM]] 2, [[PARAM]] 42)\n     foreign_c_variadic_1(ap, 2i32, 42i32);\n }\n \n #[unwind(aborts)] // FIXME(#58794)\n pub unsafe extern \"C\" fn use_foreign_c_variadic_1_3(ap: VaList) {\n-    // CHECK: invoke void ({{.*}}*, ...) @foreign_c_variadic_1({{.*}} %ap, i32 2, i32 42, i32 0)\n+    // CHECK: invoke void ({{.*}}*, ...) @foreign_c_variadic_1({{.*}} %ap, [[PARAM]] 2, [[PARAM]] 42, [[PARAM]] 0)\n     foreign_c_variadic_1(ap, 2i32, 42i32, 0i32);\n }\n \n@@ -64,12 +65,12 @@ pub unsafe extern \"C\" fn c_variadic(n: i32, mut ap: ...) -> i32 {\n // Ensure that we generate the correct `call` signature when calling a Rust\n // defined C-variadic.\n pub unsafe fn test_c_variadic_call() {\n-    // CHECK: call i32 (i32, ...) @c_variadic(i32 0)\n+    // CHECK: call [[RET:(signext )?i32]] (i32, ...) @c_variadic([[PARAM]] 0)\n     c_variadic(0);\n-    // CHECK: call i32 (i32, ...) @c_variadic(i32 0, i32 42)\n+    // CHECK: call [[RET]] (i32, ...) @c_variadic([[PARAM]] 0, [[PARAM]] 42)\n     c_variadic(0, 42i32);\n-    // CHECK: call i32 (i32, ...) @c_variadic(i32 0, i32 42, i32 1024)\n+    // CHECK: call [[RET]] (i32, ...) @c_variadic([[PARAM]] 0, [[PARAM]] 42, [[PARAM]] 1024)\n     c_variadic(0, 42i32, 1024i32);\n-    // CHECK: call i32 (i32, ...) @c_variadic(i32 0, i32 42, i32 1024, i32 0)\n+    // CHECK: call [[RET]] (i32, ...) @c_variadic([[PARAM]] 0, [[PARAM]] 42, [[PARAM]] 1024, [[PARAM]] 0)\n     c_variadic(0, 42i32, 1024i32, 0i32);\n }"}, {"sha": "d2f92f04f40a716c078e7ca4b72c757b02b635d6", "filename": "src/test/ui/async-await/async-fn-nonsend.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/34e82a7b793a6cdd27df762bf46bab8cdc92b14a/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34e82a7b793a6cdd27df762bf46bab8cdc92b14a/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr?ref=34e82a7b793a6cdd27df762bf46bab8cdc92b14a", "patch": "@@ -9,9 +9,9 @@ LL |     assert_send(local_dropped_before_await());\n    |\n    = help: within `impl std::future::Future`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<()>`\n    = note: required because it appears within the type `impl std::fmt::Debug`\n-   = note: required because it appears within the type `{impl std::fmt::Debug, impl std::future::Future, ()}`\n-   = note: required because it appears within the type `[static generator@$DIR/async-fn-nonsend.rs:21:39: 26:2 {impl std::fmt::Debug, impl std::future::Future, ()}]`\n-   = note: required because it appears within the type `std::future::GenFuture<[static generator@$DIR/async-fn-nonsend.rs:21:39: 26:2 {impl std::fmt::Debug, impl std::future::Future, ()}]>`\n+   = note: required because it appears within the type `{impl std::fmt::Debug, fn() -> impl std::future::Future {fut}, impl std::future::Future, ()}`\n+   = note: required because it appears within the type `[static generator@$DIR/async-fn-nonsend.rs:21:39: 26:2 {impl std::fmt::Debug, fn() -> impl std::future::Future {fut}, impl std::future::Future, ()}]`\n+   = note: required because it appears within the type `std::future::GenFuture<[static generator@$DIR/async-fn-nonsend.rs:21:39: 26:2 {impl std::fmt::Debug, fn() -> impl std::future::Future {fut}, impl std::future::Future, ()}]>`\n    = note: required because it appears within the type `impl std::future::Future`\n    = note: required because it appears within the type `impl std::future::Future`\n \n@@ -26,9 +26,9 @@ LL |     assert_send(non_send_temporary_in_match());\n    |\n    = help: within `impl std::future::Future`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<()>`\n    = note: required because it appears within the type `impl std::fmt::Debug`\n-   = note: required because it appears within the type `{fn(impl std::fmt::Debug) -> std::option::Option<impl std::fmt::Debug> {std::option::Option::<impl std::fmt::Debug>::Some}, fn() -> impl std::fmt::Debug {non_send}, impl std::fmt::Debug, std::option::Option<impl std::fmt::Debug>, impl std::future::Future, ()}`\n-   = note: required because it appears within the type `[static generator@$DIR/async-fn-nonsend.rs:28:40: 37:2 {fn(impl std::fmt::Debug) -> std::option::Option<impl std::fmt::Debug> {std::option::Option::<impl std::fmt::Debug>::Some}, fn() -> impl std::fmt::Debug {non_send}, impl std::fmt::Debug, std::option::Option<impl std::fmt::Debug>, impl std::future::Future, ()}]`\n-   = note: required because it appears within the type `std::future::GenFuture<[static generator@$DIR/async-fn-nonsend.rs:28:40: 37:2 {fn(impl std::fmt::Debug) -> std::option::Option<impl std::fmt::Debug> {std::option::Option::<impl std::fmt::Debug>::Some}, fn() -> impl std::fmt::Debug {non_send}, impl std::fmt::Debug, std::option::Option<impl std::fmt::Debug>, impl std::future::Future, ()}]>`\n+   = note: required because it appears within the type `{fn(impl std::fmt::Debug) -> std::option::Option<impl std::fmt::Debug> {std::option::Option::<impl std::fmt::Debug>::Some}, fn() -> impl std::fmt::Debug {non_send}, impl std::fmt::Debug, std::option::Option<impl std::fmt::Debug>, fn() -> impl std::future::Future {fut}, impl std::future::Future, ()}`\n+   = note: required because it appears within the type `[static generator@$DIR/async-fn-nonsend.rs:28:40: 37:2 {fn(impl std::fmt::Debug) -> std::option::Option<impl std::fmt::Debug> {std::option::Option::<impl std::fmt::Debug>::Some}, fn() -> impl std::fmt::Debug {non_send}, impl std::fmt::Debug, std::option::Option<impl std::fmt::Debug>, fn() -> impl std::future::Future {fut}, impl std::future::Future, ()}]`\n+   = note: required because it appears within the type `std::future::GenFuture<[static generator@$DIR/async-fn-nonsend.rs:28:40: 37:2 {fn(impl std::fmt::Debug) -> std::option::Option<impl std::fmt::Debug> {std::option::Option::<impl std::fmt::Debug>::Some}, fn() -> impl std::fmt::Debug {non_send}, impl std::fmt::Debug, std::option::Option<impl std::fmt::Debug>, fn() -> impl std::future::Future {fut}, impl std::future::Future, ()}]>`\n    = note: required because it appears within the type `impl std::future::Future`\n    = note: required because it appears within the type `impl std::future::Future`\n \n@@ -45,9 +45,9 @@ LL |     assert_send(non_sync_with_method_call());\n    = note: required because of the requirements on the impl of `std::marker::Send` for `&mut dyn std::fmt::Write`\n    = note: required because it appears within the type `std::fmt::Formatter<'_>`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `&mut std::fmt::Formatter<'_>`\n-   = note: required because it appears within the type `for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, impl std::future::Future, ()}`\n-   = note: required because it appears within the type `[static generator@$DIR/async-fn-nonsend.rs:39:38: 45:2 for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, impl std::future::Future, ()}]`\n-   = note: required because it appears within the type `std::future::GenFuture<[static generator@$DIR/async-fn-nonsend.rs:39:38: 45:2 for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, impl std::future::Future, ()}]>`\n+   = note: required because it appears within the type `for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, fn() -> impl std::future::Future {fut}, impl std::future::Future, ()}`\n+   = note: required because it appears within the type `[static generator@$DIR/async-fn-nonsend.rs:39:38: 45:2 for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, fn() -> impl std::future::Future {fut}, impl std::future::Future, ()}]`\n+   = note: required because it appears within the type `std::future::GenFuture<[static generator@$DIR/async-fn-nonsend.rs:39:38: 45:2 for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, fn() -> impl std::future::Future {fut}, impl std::future::Future, ()}]>`\n    = note: required because it appears within the type `impl std::future::Future`\n    = note: required because it appears within the type `impl std::future::Future`\n \n@@ -68,9 +68,9 @@ LL |     assert_send(non_sync_with_method_call());\n    = note: required because of the requirements on the impl of `std::marker::Send` for `std::slice::Iter<'_, std::fmt::ArgumentV1<'_>>`\n    = note: required because it appears within the type `std::fmt::Formatter<'_>`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `&mut std::fmt::Formatter<'_>`\n-   = note: required because it appears within the type `for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, impl std::future::Future, ()}`\n-   = note: required because it appears within the type `[static generator@$DIR/async-fn-nonsend.rs:39:38: 45:2 for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, impl std::future::Future, ()}]`\n-   = note: required because it appears within the type `std::future::GenFuture<[static generator@$DIR/async-fn-nonsend.rs:39:38: 45:2 for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, impl std::future::Future, ()}]>`\n+   = note: required because it appears within the type `for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, fn() -> impl std::future::Future {fut}, impl std::future::Future, ()}`\n+   = note: required because it appears within the type `[static generator@$DIR/async-fn-nonsend.rs:39:38: 45:2 for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, fn() -> impl std::future::Future {fut}, impl std::future::Future, ()}]`\n+   = note: required because it appears within the type `std::future::GenFuture<[static generator@$DIR/async-fn-nonsend.rs:39:38: 45:2 for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, fn() -> impl std::future::Future {fut}, impl std::future::Future, ()}]>`\n    = note: required because it appears within the type `impl std::future::Future`\n    = note: required because it appears within the type `impl std::future::Future`\n "}, {"sha": "54059b29f72e27fd476fe4f4c1fe0ea2dcce2577", "filename": "src/test/ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/34e82a7b793a6cdd27df762bf46bab8cdc92b14a/src%2Ftest%2Fui%2Fasync-await%2Fissue-63832-await-short-temporary-lifetime-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34e82a7b793a6cdd27df762bf46bab8cdc92b14a/src%2Ftest%2Fui%2Fasync-await%2Fissue-63832-await-short-temporary-lifetime-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-63832-await-short-temporary-lifetime-1.rs?ref=34e82a7b793a6cdd27df762bf46bab8cdc92b14a", "patch": "@@ -0,0 +1,19 @@\n+// check-pass\n+// edition:2018\n+\n+struct Test(String);\n+\n+impl Test {\n+    async fn borrow_async(&self) {}\n+\n+    fn with(&mut self, s: &str) -> &mut Self {\n+        self.0 = s.into();\n+        self\n+    }\n+}\n+\n+async fn test() {\n+    Test(\"\".to_string()).with(\"123\").borrow_async().await;\n+}\n+\n+fn main() { }"}, {"sha": "c5ea2b821ad782b53796875147081ba0ec4d1cff", "filename": "src/test/ui/async-await/issue-63832-await-short-temporary-lifetime.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/34e82a7b793a6cdd27df762bf46bab8cdc92b14a/src%2Ftest%2Fui%2Fasync-await%2Fissue-63832-await-short-temporary-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34e82a7b793a6cdd27df762bf46bab8cdc92b14a/src%2Ftest%2Fui%2Fasync-await%2Fissue-63832-await-short-temporary-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-63832-await-short-temporary-lifetime.rs?ref=34e82a7b793a6cdd27df762bf46bab8cdc92b14a", "patch": "@@ -0,0 +1,12 @@\n+// check-pass\n+// edition:2018\n+\n+async fn foo(x: &[Vec<u32>]) -> u32 {\n+    0\n+}\n+\n+async fn bar() {\n+    foo(&[vec![123]]).await;\n+}\n+\n+fn main() { }"}, {"sha": "9be87a6447cda77bb659efc34f6b9371878e99f8", "filename": "src/test/ui/consts/const-int-overflowing-rpass.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/34e82a7b793a6cdd27df762bf46bab8cdc92b14a/src%2Ftest%2Fui%2Fconsts%2Fconst-int-overflowing-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34e82a7b793a6cdd27df762bf46bab8cdc92b14a/src%2Ftest%2Fui%2Fconsts%2Fconst-int-overflowing-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-overflowing-rpass.rs?ref=34e82a7b793a6cdd27df762bf46bab8cdc92b14a", "patch": "@@ -18,6 +18,10 @@ const SHR_B: (u32, bool) = 0x10u32.overflowing_shr(132);\n const NEG_A: (u32, bool) = 0u32.overflowing_neg();\n const NEG_B: (u32, bool) = core::u32::MAX.overflowing_neg();\n \n+const ABS_POS: (i32, bool) = 10i32.overflowing_abs();\n+const ABS_NEG: (i32, bool) = (-10i32).overflowing_abs();\n+const ABS_MIN: (i32, bool) = i32::min_value().overflowing_abs();\n+\n fn main() {\n     assert_eq!(ADD_A, (7, false));\n     assert_eq!(ADD_B, (0, true));\n@@ -36,4 +40,8 @@ fn main() {\n \n     assert_eq!(NEG_A, (0, false));\n     assert_eq!(NEG_B, (1, true));\n+\n+    assert_eq!(ABS_POS, (10, false));\n+    assert_eq!(ABS_NEG, (10, false));\n+    assert_eq!(ABS_MIN, (i32::min_value(), true));\n }"}, {"sha": "dc46fce39a93c4ec279c5effea5e9a6da614c0a8", "filename": "src/test/ui/consts/const-int-sign-rpass.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/34e82a7b793a6cdd27df762bf46bab8cdc92b14a/src%2Ftest%2Fui%2Fconsts%2Fconst-int-sign-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34e82a7b793a6cdd27df762bf46bab8cdc92b14a/src%2Ftest%2Fui%2Fconsts%2Fconst-int-sign-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-sign-rpass.rs?ref=34e82a7b793a6cdd27df762bf46bab8cdc92b14a", "patch": "@@ -11,6 +11,9 @@ const SIGNUM_POS: i32 = 10i32.signum();\n const SIGNUM_NIL: i32 = 0i32.signum();\n const SIGNUM_NEG: i32 = (-42i32).signum();\n \n+const ABS_A: i32 = 10i32.abs();\n+const ABS_B: i32 = (-10i32).abs();\n+\n fn main() {\n     assert!(NEGATIVE_A);\n     assert!(!NEGATIVE_B);\n@@ -20,4 +23,7 @@ fn main() {\n     assert_eq!(SIGNUM_POS, 1);\n     assert_eq!(SIGNUM_NIL, 0);\n     assert_eq!(SIGNUM_NEG, -1);\n+\n+    assert_eq!(ABS_A, 10);\n+    assert_eq!(ABS_B, 10);\n }"}, {"sha": "2bbad99a52a902ea5b3e72f325b5b4955a84e122", "filename": "src/test/ui/consts/const-int-wrapping-rpass.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/34e82a7b793a6cdd27df762bf46bab8cdc92b14a/src%2Ftest%2Fui%2Fconsts%2Fconst-int-wrapping-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34e82a7b793a6cdd27df762bf46bab8cdc92b14a/src%2Ftest%2Fui%2Fconsts%2Fconst-int-wrapping-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-wrapping-rpass.rs?ref=34e82a7b793a6cdd27df762bf46bab8cdc92b14a", "patch": "@@ -18,6 +18,10 @@ const SHR_B: u32 = 128u32.wrapping_shr(128);\n const NEG_A: u32 = 5u32.wrapping_neg();\n const NEG_B: u32 = 1234567890u32.wrapping_neg();\n \n+const ABS_POS: i32 = 10i32.wrapping_abs();\n+const ABS_NEG: i32 = (-10i32).wrapping_abs();\n+const ABS_MIN: i32 = i32::min_value().wrapping_abs();\n+\n fn main() {\n     assert_eq!(ADD_A, 255);\n     assert_eq!(ADD_B, 199);\n@@ -36,4 +40,8 @@ fn main() {\n \n     assert_eq!(NEG_A, 4294967291);\n     assert_eq!(NEG_B, 3060399406);\n+\n+    assert_eq!(ABS_POS, 10);\n+    assert_eq!(ABS_NEG, 10);\n+    assert_eq!(ABS_MIN, i32::min_value());\n }"}, {"sha": "2e2505b7f0246611604f054e3a15dfb957e791f3", "filename": "src/tools/publish_toolstate.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34e82a7b793a6cdd27df762bf46bab8cdc92b14a/src%2Ftools%2Fpublish_toolstate.py", "raw_url": "https://github.com/rust-lang/rust/raw/34e82a7b793a6cdd27df762bf46bab8cdc92b14a/src%2Ftools%2Fpublish_toolstate.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fpublish_toolstate.py?ref=34e82a7b793a6cdd27df762bf46bab8cdc92b14a", "patch": "@@ -22,7 +22,7 @@\n # List of people to ping when the status of a tool or a book changed.\n MAINTAINERS = {\n     'miri': '@oli-obk @RalfJung @eddyb',\n-    'clippy-driver': '@Manishearth @llogiq @mcarton @oli-obk @phansch @flip1995',\n+    'clippy-driver': '@Manishearth @llogiq @mcarton @oli-obk @phansch @flip1995 @yaahc',\n     'rls': '@Xanewok',\n     'rustfmt': '@topecongiro',\n     'book': '@carols10cents @steveklabnik',"}]}