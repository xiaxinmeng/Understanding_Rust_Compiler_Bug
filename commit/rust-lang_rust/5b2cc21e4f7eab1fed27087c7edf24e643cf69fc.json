{"sha": "5b2cc21e4f7eab1fed27087c7edf24e643cf69fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViMmNjMjFlNGY3ZWFiMWZlZDI3MDg3YzdlZGYyNGU2NDNjZjY5ZmM=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-04T06:55:21Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-04T06:55:21Z"}, "message": "More corrections to drop/free path to accommodate TY_box.", "tree": {"sha": "75cef6320418a37c835c074c17305755cfac55af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75cef6320418a37c835c074c17305755cfac55af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b2cc21e4f7eab1fed27087c7edf24e643cf69fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b2cc21e4f7eab1fed27087c7edf24e643cf69fc", "html_url": "https://github.com/rust-lang/rust/commit/5b2cc21e4f7eab1fed27087c7edf24e643cf69fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b2cc21e4f7eab1fed27087c7edf24e643cf69fc/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2ffa57ddf01a6670ff0954184006cfb814b1088", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2ffa57ddf01a6670ff0954184006cfb814b1088", "html_url": "https://github.com/rust-lang/rust/commit/f2ffa57ddf01a6670ff0954184006cfb814b1088"}], "stats": {"total": 78, "additions": 41, "deletions": 37}, "files": [{"sha": "c2adada001222b1fba7a39361c7ac46481d39fab", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 41, "deletions": 37, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/5b2cc21e4f7eab1fed27087c7edf24e643cf69fc/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/5b2cc21e4f7eab1fed27087c7edf24e643cf69fc/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=5b2cc21e4f7eab1fed27087c7edf24e643cf69fc", "patch": "@@ -1089,6 +1089,9 @@ let trans_visitor\n       begin\n         fun _ ->\n           let tydesc_fixup = new_fixup \"tydesc\" in\n+          let fix fixup =\n+            fixup_rel_word tydesc_fixup fixup\n+          in\n           log cx \"tydesc for %a has sz=%Ld, align=%Ld\"\n             Ast.sprintf_ty t sz align;\n             Asm.DEF\n@@ -1098,14 +1101,17 @@ let trans_visitor\n                    Asm.WORD (word_ty_mach, Asm.IMM 0L);\n                    Asm.WORD (word_ty_mach, Asm.IMM sz);\n                    Asm.WORD (word_ty_mach, Asm.IMM align);\n-                   table_of_fixup_rel_fixups tydesc_fixup\n-                     [|\n-                       get_copy_glue t None;\n-                       get_drop_glue t None;\n-                       get_free_glue t (type_has_state t) None;\n-                       get_sever_glue t None;\n-                       get_mark_glue t None;\n-                     |];\n+                   fix (get_copy_glue t None);\n+                   fix (get_drop_glue t None);\n+                   begin\n+                     match ty_mem_ctrl t with\n+                         MEM_interior ->\n+                           Asm.WORD (word_ty_mach, Asm.IMM 0L);\n+                       | _ ->\n+                           fix (get_free_glue t (type_has_state t) None);\n+                   end;\n+                   fix (get_sever_glue t None);\n+                   fix (get_mark_glue t None);\n                    (* Include any obj-dtor, if this is an obj and has one. *)\n                    begin\n                      match idopt with\n@@ -1114,10 +1120,7 @@ let trans_visitor\n                            begin\n                              let g = GLUE_obj_drop oid in\n                                match htab_search cx.ctxt_glue_code g with\n-                                   Some code ->\n-                                     fixup_rel_word\n-                                       tydesc_fixup\n-                                       code.code_fixup;\n+                                   Some code -> fix code.code_fixup\n                                  | None ->\n                                      Asm.WORD (word_ty_mach, Asm.IMM 0L);\n                            end\n@@ -1610,25 +1613,10 @@ let trans_visitor\n        *)\n       let ty_params = deref (get_element_ptr args 0) in\n       let cell = get_element_ptr args 1 in\n-      let (body_mem, _) =\n-        need_mem_cell\n-          (get_element_ptr_dyn ty_params (deref cell)\n-             Abi.box_rc_slot_field_body)\n-      in\n-      let body_ty = simplified_ty ty in\n-      let vr = next_vreg_cell Il.voidptr_t in\n-        lea vr body_mem;\n-        note_drop_step body_ty \"in free-glue, calling drop-glue on body\";\n-        trace_word cx.ctxt_sess.Session.sess_trace_drop vr;\n-        trans_call_simple_static_glue\n-          (get_drop_glue body_ty curr_iso) ty_params vr;\n-        note_drop_step ty \"back in free-glue, calling free\";\n-        trans_free cell is_gc;\n-        trace_str cx.ctxt_sess.Session.sess_trace_drop\n-          \"free-glue complete\";\n+        free_ty is_gc ty_params ty cell curr_iso\n     in\n     let ty_params_ptr = ty_params_covering ty in\n-    let fty = mk_simple_ty_fn [| ty_params_ptr; box_slot ty |] in\n+    let fty = mk_simple_ty_fn [| ty_params_ptr; local_slot ty |] in\n       get_typed_mem_glue g fty inner\n \n \n@@ -2514,13 +2502,9 @@ let trans_visitor\n                    * further box members; if it doesn't we can elide the\n                    * call to the glue function.  *)\n \n-                  if mctrl = MEM_rc_opaque\n-                  then\n-                    free_ty false ty_params ty cell curr_iso\n-                  else\n-                    trans_call_simple_static_glue\n-                      (get_free_glue ty (mctrl = MEM_gc) curr_iso)\n-                      ty_params cell;\n+                  trans_call_simple_static_glue\n+                    (get_free_glue ty (mctrl = MEM_gc) curr_iso)\n+                    ty_params cell;\n \n                   (* Null the slot out to prevent double-free if the frame\n                    * unwinds.\n@@ -2618,16 +2602,36 @@ let trans_visitor\n       (cell:Il.cell)\n       (curr_iso:Ast.ty_iso option)\n       : unit =\n+    check_box_rty cell;\n+    note_drop_step ty \"in free-ty\";\n+    begin\n     match simplified_ty ty with\n         Ast.TY_port _ -> trans_del_port cell\n       | Ast.TY_chan _ -> trans_del_chan cell\n       | Ast.TY_task -> trans_kill_task cell\n+      | Ast.TY_str -> trans_free cell false\n       | Ast.TY_vec s ->\n           iter_seq_parts ty_params cell cell s\n             (fun _ src ty iso -> drop_ty ty_params src ty iso) curr_iso;\n           trans_free cell is_gc\n \n-      | _ -> trans_free cell is_gc\n+      | _ ->\n+          note_drop_step ty \"in free-ty, dropping structured body\";\n+          let (body_mem, _) =\n+            need_mem_cell\n+              (get_element_ptr_dyn ty_params (deref cell)\n+                 Abi.box_rc_slot_field_body)\n+          in\n+          let body_ty = simplified_ty ty in\n+          let vr = next_vreg_cell Il.voidptr_t in\n+            lea vr body_mem;\n+            trace_word cx.ctxt_sess.Session.sess_trace_drop vr;\n+            trans_call_simple_static_glue\n+              (get_drop_glue body_ty curr_iso) ty_params vr;\n+            note_drop_step ty \"in free-ty, calling free\";\n+            trans_free cell is_gc;\n+    end;\n+    note_drop_step ty \"free-ty done\";\n \n   and maybe_iso\n       (curr_iso:Ast.ty_iso option)"}]}