{"sha": "dfaea9c9677f97656ad75f6bacd78f8f87e1d339", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmYWVhOWM5Njc3Zjk3NjU2YWQ3NWY2YmFjZDc4ZjhmODdlMWQzMzk=", "commit": {"author": {"name": "Aleksei Latyshev", "email": "alex_700_95@mail.ru", "date": "2020-12-25T11:45:04Z"}, "committer": {"name": "Aleksei Latyshev", "email": "alex_700_95@mail.ru", "date": "2020-12-25T12:06:34Z"}, "message": "lint &PathBuf instead of &Path in PTR_ARG\n\n- extract get_only_generic_arg_snippet to improve readability", "tree": {"sha": "00f4cbccc924211c1c2710da2edbb22395d2f027", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00f4cbccc924211c1c2710da2edbb22395d2f027"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfaea9c9677f97656ad75f6bacd78f8f87e1d339", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEopQOAF0V9HUfAT+fRv3WL5zBFNsFAl/l1coACgkQRv3WL5zB\nFNs3mA//cBMEaK0dnepIaciMs8u57PWR/CfWluWurPsCjBwkgGwIi+KgJfsBX4A3\n46AbWsEi0mbomfIrBGfdZ7IuBsKA3uJUrAxosZ36jksWhqedvOmzhumAbTWLTnrL\nFMrMDsrqUODE4F64CfmRZPIygktZ84CxTDPc0jyD55dsJ6qDyHK3IdOKrsQAmcuY\nlOX9UMN+Ll/TdYvcRcVL3GwlydEU3O6X4yMArdDHt9V4vkQuZ9jz7/JMvLj+Ko4t\nUDqcrHh0cvP/uDZTGdTtdREAm3sawKHVMR2VSBKDInqkB+CDWqquPcX0z9I2atE6\nDezzdz4Xe3UL2DQvM7soxvCfQWy6Gy3WOyni4c5v24Sqv0pydzQVZRxuxesQlt+Z\nLR6lv3SiGNoFnGmMiLoZ0ipRSLXs+R7Wx0nbShCH4VBdNDXmcuEM7q84i4iw4oUI\nMpH3oMXoL+mKKFeATjkj5Q1qsMGpgKyzhui6oPbMYb7q1UKQnoO5wHmFIos1DDTX\nqYRr1J3UoBdgpefgXGjNzMYdxfHy/92ugAwW5Au+2mxb6TDOVNt9AqSCjLty4w9X\nYlXIEma9MmteoNJIhlgGF3KiSduiLucGVPpBKz3rv3pw32OJeabouBFfRJUS5p+n\nPf0ifS/yNp94Ve2BSfpWe5aT2rXRlVK0ymqYpN83jzyuzqe9DPI=\n=q2G1\n-----END PGP SIGNATURE-----", "payload": "tree 00f4cbccc924211c1c2710da2edbb22395d2f027\nparent 02399f4b25d549b54973e0ff1a15fd5fcb37e2cc\nauthor Aleksei Latyshev <alex_700_95@mail.ru> 1608896704 +0300\ncommitter Aleksei Latyshev <alex_700_95@mail.ru> 1608897994 +0300\n\nlint &PathBuf instead of &Path in PTR_ARG\n\n- extract get_only_generic_arg_snippet to improve readability\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfaea9c9677f97656ad75f6bacd78f8f87e1d339", "html_url": "https://github.com/rust-lang/rust/commit/dfaea9c9677f97656ad75f6bacd78f8f87e1d339", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfaea9c9677f97656ad75f6bacd78f8f87e1d339/comments", "author": {"login": "alex-700", "id": 8705888, "node_id": "MDQ6VXNlcjg3MDU4ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/8705888?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alex-700", "html_url": "https://github.com/alex-700", "followers_url": "https://api.github.com/users/alex-700/followers", "following_url": "https://api.github.com/users/alex-700/following{/other_user}", "gists_url": "https://api.github.com/users/alex-700/gists{/gist_id}", "starred_url": "https://api.github.com/users/alex-700/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alex-700/subscriptions", "organizations_url": "https://api.github.com/users/alex-700/orgs", "repos_url": "https://api.github.com/users/alex-700/repos", "events_url": "https://api.github.com/users/alex-700/events{/privacy}", "received_events_url": "https://api.github.com/users/alex-700/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alex-700", "id": 8705888, "node_id": "MDQ6VXNlcjg3MDU4ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/8705888?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alex-700", "html_url": "https://github.com/alex-700", "followers_url": "https://api.github.com/users/alex-700/followers", "following_url": "https://api.github.com/users/alex-700/following{/other_user}", "gists_url": "https://api.github.com/users/alex-700/gists{/gist_id}", "starred_url": "https://api.github.com/users/alex-700/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alex-700/subscriptions", "organizations_url": "https://api.github.com/users/alex-700/orgs", "repos_url": "https://api.github.com/users/alex-700/repos", "events_url": "https://api.github.com/users/alex-700/events{/privacy}", "received_events_url": "https://api.github.com/users/alex-700/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02399f4b25d549b54973e0ff1a15fd5fcb37e2cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/02399f4b25d549b54973e0ff1a15fd5fcb37e2cc", "html_url": "https://github.com/rust-lang/rust/commit/02399f4b25d549b54973e0ff1a15fd5fcb37e2cc"}], "stats": {"total": 131, "additions": 106, "deletions": 25}, "files": [{"sha": "5f5048e79e7825162beb876071fa887e233298f8", "filename": "clippy_dev/src/ra_setup.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfaea9c9677f97656ad75f6bacd78f8f87e1d339/clippy_dev%2Fsrc%2Fra_setup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfaea9c9677f97656ad75f6bacd78f8f87e1d339/clippy_dev%2Fsrc%2Fra_setup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fra_setup.rs?ref=dfaea9c9677f97656ad75f6bacd78f8f87e1d339", "patch": "@@ -3,7 +3,7 @@\n use std::fs;\n use std::fs::File;\n use std::io::prelude::*;\n-use std::path::PathBuf;\n+use std::path::{Path, PathBuf};\n \n // This module takes an absolute path to a rustc repo and alters the dependencies to point towards\n // the respective rustc subcrates instead of using extern crate xyz.\n@@ -44,7 +44,7 @@ pub fn run(rustc_path: Option<&str>) {\n }\n \n fn inject_deps_into_manifest(\n-    rustc_source_dir: &PathBuf,\n+    rustc_source_dir: &Path,\n     manifest_path: &str,\n     cargo_toml: &str,\n     lib_rs: &str,"}, {"sha": "c494a713631311403392539b2a3a8a6760c22c5c", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 45, "deletions": 15, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/dfaea9c9677f97656ad75f6bacd78f8f87e1d339/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfaea9c9677f97656ad75f6bacd78f8f87e1d339/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=dfaea9c9677f97656ad75f6bacd78f8f87e1d339", "patch": "@@ -182,20 +182,6 @@ fn check_fn(cx: &LateContext<'_>, decl: &FnDecl<'_>, fn_id: HirId, opt_body_id:\n \n         if let ty::Ref(_, ty, Mutability::Not) = ty.kind() {\n             if is_type_diagnostic_item(cx, ty, sym::vec_type) {\n-                let mut ty_snippet = None;\n-                if_chain! {\n-                    if let TyKind::Path(QPath::Resolved(_, ref path)) = walk_ptrs_hir_ty(arg).kind;\n-                    if let Some(&PathSegment{args: Some(ref parameters), ..}) = path.segments.last();\n-                    then {\n-                        let types: Vec<_> = parameters.args.iter().filter_map(|arg| match arg {\n-                            GenericArg::Type(ty) => Some(ty),\n-                            _ => None,\n-                        }).collect();\n-                        if types.len() == 1 {\n-                            ty_snippet = snippet_opt(cx, types[0].span);\n-                        }\n-                    }\n-                };\n                 if let Some(spans) = get_spans(cx, opt_body_id, idx, &[(\"clone\", \".to_owned()\")]) {\n                     span_lint_and_then(\n                         cx,\n@@ -204,7 +190,7 @@ fn check_fn(cx: &LateContext<'_>, decl: &FnDecl<'_>, fn_id: HirId, opt_body_id:\n                         \"writing `&Vec<_>` instead of `&[_]` involves one more reference and cannot be used \\\n                          with non-Vec-based slices.\",\n                         |diag| {\n-                            if let Some(ref snippet) = ty_snippet {\n+                            if let Some(ref snippet) = get_only_generic_arg_snippet(cx, arg) {\n                                 diag.span_suggestion(\n                                     arg.span,\n                                     \"change this to\",\n@@ -247,6 +233,33 @@ fn check_fn(cx: &LateContext<'_>, decl: &FnDecl<'_>, fn_id: HirId, opt_body_id:\n                         },\n                     );\n                 }\n+            } else if match_type(cx, ty, &paths::PATH_BUF) {\n+                if let Some(spans) = get_spans(cx, opt_body_id, idx, &[(\"clone\", \".to_path_buf()\"), (\"as_path\", \"\")]) {\n+                    span_lint_and_then(\n+                        cx,\n+                        PTR_ARG,\n+                        arg.span,\n+                        \"writing `&PathBuf` instead of `&Path` involves a new object where a slice will do.\",\n+                        |diag| {\n+                            diag.span_suggestion(\n+                                arg.span,\n+                                \"change this to\",\n+                                \"&Path\".into(),\n+                                Applicability::Unspecified,\n+                            );\n+                            for (clonespan, suggestion) in spans {\n+                                diag.span_suggestion_short(\n+                                    clonespan,\n+                                    &snippet_opt(cx, clonespan).map_or(\"change the call to\".into(), |x| {\n+                                        Cow::Owned(format!(\"change `{}` to\", x))\n+                                    }),\n+                                    suggestion.into(),\n+                                    Applicability::Unspecified,\n+                                );\n+                            }\n+                        },\n+                    );\n+                }\n             } else if match_type(cx, ty, &paths::COW) {\n                 if_chain! {\n                     if let TyKind::Rptr(_, MutTy { ref ty, ..} ) = arg.kind;\n@@ -309,6 +322,23 @@ fn check_fn(cx: &LateContext<'_>, decl: &FnDecl<'_>, fn_id: HirId, opt_body_id:\n     }\n }\n \n+fn get_only_generic_arg_snippet(cx: &LateContext<'_>, arg: &Ty<'_>) -> Option<String> {\n+    if_chain! {\n+        if let TyKind::Path(QPath::Resolved(_, ref path)) = walk_ptrs_hir_ty(arg).kind;\n+        if let Some(&PathSegment{args: Some(ref parameters), ..}) = path.segments.last();\n+        let types: Vec<_> = parameters.args.iter().filter_map(|arg| match arg {\n+            GenericArg::Type(ty) => Some(ty),\n+            _ => None,\n+        }).collect();\n+        if types.len() == 1;\n+        then {\n+            snippet_opt(cx, types[0].span)\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n fn get_rptr_lm<'tcx>(ty: &'tcx Ty<'tcx>) -> Option<(&'tcx Lifetime, Mutability, Span)> {\n     if let TyKind::Rptr(ref lt, ref m) = ty.kind {\n         Some((lt, m.mutbl, ty.span))"}, {"sha": "e8854fb73d966672bb8a0de0645053527f68215d", "filename": "tests/ui/ptr_arg.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/dfaea9c9677f97656ad75f6bacd78f8f87e1d339/tests%2Fui%2Fptr_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfaea9c9677f97656ad75f6bacd78f8f87e1d339/tests%2Fui%2Fptr_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_arg.rs?ref=dfaea9c9677f97656ad75f6bacd78f8f87e1d339", "patch": "@@ -2,6 +2,7 @@\n #![warn(clippy::ptr_arg)]\n \n use std::borrow::Cow;\n+use std::path::PathBuf;\n \n fn do_vec(x: &Vec<i64>) {\n     //Nothing here\n@@ -21,6 +22,15 @@ fn do_str_mut(x: &mut String) {\n     //Nothing here either\n }\n \n+fn do_path(x: &PathBuf) {\n+    //Nothing here either\n+}\n+\n+fn do_path_mut(x: &mut PathBuf) {\n+    // no error here\n+    //Nothing here either\n+}\n+\n fn main() {}\n \n trait Foo {\n@@ -55,6 +65,14 @@ fn str_cloned(x: &String) -> String {\n     x.clone()\n }\n \n+fn path_cloned(x: &PathBuf) -> PathBuf {\n+    let a = x.clone();\n+    let b = x.clone();\n+    let c = b.clone();\n+    let d = a.clone().clone().clone();\n+    x.clone()\n+}\n+\n fn false_positive_capacity(x: &Vec<u8>, y: &String) {\n     let a = x.capacity();\n     let b = y.clone();\n@@ -87,10 +105,12 @@ impl Foo2 for String {\n // Check that the allow attribute on parameters is honored\n mod issue_5644 {\n     use std::borrow::Cow;\n+    use std::path::PathBuf;\n \n     fn allowed(\n         #[allow(clippy::ptr_arg)] _v: &Vec<u32>,\n         #[allow(clippy::ptr_arg)] _s: &String,\n+        #[allow(clippy::ptr_arg)] _p: &PathBuf,\n         #[allow(clippy::ptr_arg)] _c: &Cow<[i32]>,\n     ) {\n     }\n@@ -100,6 +120,7 @@ mod issue_5644 {\n         fn allowed(\n             #[allow(clippy::ptr_arg)] _v: &Vec<u32>,\n             #[allow(clippy::ptr_arg)] _s: &String,\n+            #[allow(clippy::ptr_arg)] _p: &PathBuf,\n             #[allow(clippy::ptr_arg)] _c: &Cow<[i32]>,\n         ) {\n         }\n@@ -109,6 +130,7 @@ mod issue_5644 {\n         fn allowed(\n             #[allow(clippy::ptr_arg)] _v: &Vec<u32>,\n             #[allow(clippy::ptr_arg)] _s: &String,\n+            #[allow(clippy::ptr_arg)] _p: &PathBuf,\n             #[allow(clippy::ptr_arg)] _c: &Cow<[i32]>,\n         ) {\n         }"}, {"sha": "70d1b2f5258eb5055239b81d5a817c8f89b9d7c9", "filename": "tests/ui/ptr_arg.stderr", "status": "modified", "additions": 37, "deletions": 8, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/dfaea9c9677f97656ad75f6bacd78f8f87e1d339/tests%2Fui%2Fptr_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfaea9c9677f97656ad75f6bacd78f8f87e1d339/tests%2Fui%2Fptr_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_arg.stderr?ref=dfaea9c9677f97656ad75f6bacd78f8f87e1d339", "patch": "@@ -1,25 +1,31 @@\n error: writing `&Vec<_>` instead of `&[_]` involves one more reference and cannot be used with non-Vec-based slices.\n-  --> $DIR/ptr_arg.rs:6:14\n+  --> $DIR/ptr_arg.rs:7:14\n    |\n LL | fn do_vec(x: &Vec<i64>) {\n    |              ^^^^^^^^^ help: change this to: `&[i64]`\n    |\n    = note: `-D clippy::ptr-arg` implied by `-D warnings`\n \n error: writing `&String` instead of `&str` involves a new object where a slice will do.\n-  --> $DIR/ptr_arg.rs:15:14\n+  --> $DIR/ptr_arg.rs:16:14\n    |\n LL | fn do_str(x: &String) {\n    |              ^^^^^^^ help: change this to: `&str`\n \n+error: writing `&PathBuf` instead of `&Path` involves a new object where a slice will do.\n+  --> $DIR/ptr_arg.rs:25:15\n+   |\n+LL | fn do_path(x: &PathBuf) {\n+   |               ^^^^^^^^ help: change this to: `&Path`\n+\n error: writing `&Vec<_>` instead of `&[_]` involves one more reference and cannot be used with non-Vec-based slices.\n-  --> $DIR/ptr_arg.rs:28:18\n+  --> $DIR/ptr_arg.rs:38:18\n    |\n LL |     fn do_vec(x: &Vec<i64>);\n    |                  ^^^^^^^^^ help: change this to: `&[i64]`\n \n error: writing `&Vec<_>` instead of `&[_]` involves one more reference and cannot be used with non-Vec-based slices.\n-  --> $DIR/ptr_arg.rs:41:14\n+  --> $DIR/ptr_arg.rs:51:14\n    |\n LL | fn cloned(x: &Vec<u8>) -> Vec<u8> {\n    |              ^^^^^^^^\n@@ -38,7 +44,7 @@ LL |     x.to_owned()\n    |\n \n error: writing `&String` instead of `&str` involves a new object where a slice will do.\n-  --> $DIR/ptr_arg.rs:50:18\n+  --> $DIR/ptr_arg.rs:60:18\n    |\n LL | fn str_cloned(x: &String) -> String {\n    |                  ^^^^^^^\n@@ -60,8 +66,31 @@ help: change `x.clone()` to\n LL |     x.to_string()\n    |\n \n+error: writing `&PathBuf` instead of `&Path` involves a new object where a slice will do.\n+  --> $DIR/ptr_arg.rs:68:19\n+   |\n+LL | fn path_cloned(x: &PathBuf) -> PathBuf {\n+   |                   ^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL | fn path_cloned(x: &Path) -> PathBuf {\n+   |                   ^^^^^\n+help: change `x.clone()` to\n+   |\n+LL |     let a = x.to_path_buf();\n+   |             ^^^^^^^^^^^^^^^\n+help: change `x.clone()` to\n+   |\n+LL |     let b = x.to_path_buf();\n+   |             ^^^^^^^^^^^^^^^\n+help: change `x.clone()` to\n+   |\n+LL |     x.to_path_buf()\n+   |\n+\n error: writing `&String` instead of `&str` involves a new object where a slice will do.\n-  --> $DIR/ptr_arg.rs:58:44\n+  --> $DIR/ptr_arg.rs:76:44\n    |\n LL | fn false_positive_capacity(x: &Vec<u8>, y: &String) {\n    |                                            ^^^^^^^\n@@ -80,10 +109,10 @@ LL |     let c = y;\n    |             ^\n \n error: using a reference to `Cow` is not recommended.\n-  --> $DIR/ptr_arg.rs:72:25\n+  --> $DIR/ptr_arg.rs:90:25\n    |\n LL | fn test_cow_with_ref(c: &Cow<[i32]>) {}\n    |                         ^^^^^^^^^^^ help: change this to: `&[i32]`\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 9 previous errors\n "}]}