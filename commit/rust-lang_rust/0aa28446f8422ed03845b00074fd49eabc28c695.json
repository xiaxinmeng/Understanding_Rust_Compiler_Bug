{"sha": "0aa28446f8422ed03845b00074fd49eabc28c695", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhYTI4NDQ2Zjg0MjJlZDAzODQ1YjAwMDc0ZmQ0OWVhYmMyOGM2OTU=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-04-23T00:22:46Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-05-05T01:56:27Z"}, "message": "rustdoc: Remove unnecessary `StripItem` wrapper", "tree": {"sha": "ed15118a5a38e7f503ed1a31198d96c93ee6ab87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed15118a5a38e7f503ed1a31198d96c93ee6ab87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0aa28446f8422ed03845b00074fd49eabc28c695", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0aa28446f8422ed03845b00074fd49eabc28c695", "html_url": "https://github.com/rust-lang/rust/commit/0aa28446f8422ed03845b00074fd49eabc28c695", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0aa28446f8422ed03845b00074fd49eabc28c695/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae8b84bf04cddda2379b36c45a575132e6a44fb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae8b84bf04cddda2379b36c45a575132e6a44fb0", "html_url": "https://github.com/rust-lang/rust/commit/ae8b84bf04cddda2379b36c45a575132e6a44fb0"}], "stats": {"total": 25, "additions": 9, "deletions": 16}, "files": [{"sha": "723792381ef09df8d1820090f1a53a3bf4fada9b", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0aa28446f8422ed03845b00074fd49eabc28c695/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa28446f8422ed03845b00074fd49eabc28c695/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=0aa28446f8422ed03845b00074fd49eabc28c695", "patch": "@@ -1,17 +1,10 @@\n use crate::clean::*;\n \n-crate struct StripItem(pub Item);\n-\n-impl StripItem {\n-    crate fn strip(self) -> Item {\n-        match self.0 {\n-            Item { kind: box StrippedItem(..), .. } => self.0,\n-            mut i => {\n-                i.kind = box StrippedItem(i.kind);\n-                i\n-            }\n-        }\n+crate fn strip_item(mut item: Item) -> Item {\n+    if !matches!(*item.kind, StrippedItem(..)) {\n+        item.kind = box StrippedItem(item.kind);\n     }\n+    item\n }\n \n crate trait DocFolder: Sized {"}, {"sha": "87573e8e037a96c22d546d48647b19c735d65727", "filename": "src/librustdoc/passes/strip_hidden.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0aa28446f8422ed03845b00074fd49eabc28c695/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa28446f8422ed03845b00074fd49eabc28c695/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs?ref=0aa28446f8422ed03845b00074fd49eabc28c695", "patch": "@@ -4,7 +4,7 @@ use std::mem;\n use crate::clean;\n use crate::clean::{FakeDefIdSet, Item, NestedAttributesExt};\n use crate::core::DocContext;\n-use crate::fold::{DocFolder, StripItem};\n+use crate::fold::{strip_item, DocFolder};\n use crate::passes::{ImplStripper, Pass};\n \n crate const STRIP_HIDDEN: Pass = Pass {\n@@ -44,7 +44,7 @@ impl<'a> DocFolder for Stripper<'a> {\n                     // strip things like impl methods but when doing so\n                     // we must not add any items to the `retained` set.\n                     let old = mem::replace(&mut self.update_retained, false);\n-                    let ret = StripItem(self.fold_item_recur(i)).strip();\n+                    let ret = strip_item(self.fold_item_recur(i));\n                     self.update_retained = old;\n                     return Some(ret);\n                 }"}, {"sha": "528518410aa0680a7c0dc24cd7e2cfba1b891b22", "filename": "src/librustdoc/passes/stripper.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0aa28446f8422ed03845b00074fd49eabc28c695/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0aa28446f8422ed03845b00074fd49eabc28c695/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstripper.rs?ref=0aa28446f8422ed03845b00074fd49eabc28c695", "patch": "@@ -3,7 +3,7 @@ use rustc_middle::middle::privacy::AccessLevels;\n use std::mem;\n \n use crate::clean::{self, FakeDefIdSet, GetDefId, Item};\n-use crate::fold::{DocFolder, StripItem};\n+use crate::fold::{strip_item, DocFolder};\n \n crate struct Stripper<'a> {\n     crate retained: &'a mut FakeDefIdSet,\n@@ -51,15 +51,15 @@ impl<'a> DocFolder for Stripper<'a> {\n \n             clean::StructFieldItem(..) => {\n                 if !i.visibility.is_public() {\n-                    return Some(StripItem(i).strip());\n+                    return Some(strip_item(i));\n                 }\n             }\n \n             clean::ModuleItem(..) => {\n                 if i.def_id.is_local() && !i.visibility.is_public() {\n                     debug!(\"Stripper: stripping module {:?}\", i.name);\n                     let old = mem::replace(&mut self.update_retained, false);\n-                    let ret = StripItem(self.fold_item_recur(i)).strip();\n+                    let ret = strip_item(self.fold_item_recur(i));\n                     self.update_retained = old;\n                     return Some(ret);\n                 }"}]}