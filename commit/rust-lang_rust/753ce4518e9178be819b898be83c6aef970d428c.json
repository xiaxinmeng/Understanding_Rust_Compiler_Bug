{"sha": "753ce4518e9178be819b898be83c6aef970d428c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1M2NlNDUxOGU5MTc4YmU4MTliODk4YmU4M2M2YWVmOTcwZDQyOGM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-11-23T22:10:12Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-11-28T17:59:56Z"}, "message": "rustc_metadata: Merge `cstore.rs` into `creader.rs`", "tree": {"sha": "0db18862e89c1717671c391b43e2bf6fd64ab8f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0db18862e89c1717671c391b43e2bf6fd64ab8f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/753ce4518e9178be819b898be83c6aef970d428c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/753ce4518e9178be819b898be83c6aef970d428c", "html_url": "https://github.com/rust-lang/rust/commit/753ce4518e9178be819b898be83c6aef970d428c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/753ce4518e9178be819b898be83c6aef970d428c/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b1d60a6bcd4d6b31bb7ab7758808dd5f15e51e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b1d60a6bcd4d6b31bb7ab7758808dd5f15e51e8", "html_url": "https://github.com/rust-lang/rust/commit/3b1d60a6bcd4d6b31bb7ab7758808dd5f15e51e8"}], "stats": {"total": 224, "additions": 103, "deletions": 121}, "files": [{"sha": "5f00bebced35a30293e8c49a6b0593d41c426a46", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/753ce4518e9178be819b898be83c6aef970d428c/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753ce4518e9178be819b898be83c6aef970d428c/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=753ce4518e9178be819b898be83c6aef970d428c", "patch": "@@ -25,7 +25,6 @@ use rustc_data_structures::{box_region_allow_access, declare_box_region_type, pa\n use rustc_data_structures::sync::{Lrc, ParallelIterator, par_iter};\n use rustc_errors::PResult;\n use rustc_incremental;\n-use rustc_metadata::cstore;\n use rustc_mir as mir;\n use rustc_parse::{parse_crate_from_file, parse_crate_from_source_str};\n use rustc_passes::{self, ast_validation, hir_stats, layout_test};\n@@ -728,15 +727,15 @@ pub fn default_provide(providers: &mut ty::query::Providers<'_>) {\n     rustc_passes::provide(providers);\n     rustc_traits::provide(providers);\n     middle::region::provide(providers);\n-    cstore::provide(providers);\n+    rustc_metadata::provide(providers);\n     lint::provide(providers);\n     rustc_lint::provide(providers);\n     rustc_codegen_utils::provide(providers);\n     rustc_codegen_ssa::provide(providers);\n }\n \n pub fn default_provide_extern(providers: &mut ty::query::Providers<'_>) {\n-    cstore::provide_extern(providers);\n+    rustc_metadata::provide_extern(providers);\n     rustc_codegen_ssa::provide_extern(providers);\n }\n "}, {"sha": "342e6ff52f8179b307b5166fab4f94dea78fe37b", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 93, "deletions": 16, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/753ce4518e9178be819b898be83c6aef970d428c/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753ce4518e9178be819b898be83c6aef970d428c/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=753ce4518e9178be819b898be83c6aef970d428c", "patch": "@@ -1,11 +1,12 @@\n //! Validates all used crates and extern libraries and loads their metadata\n \n-use crate::cstore::CStore;\n use crate::locator::{CrateLocator, CratePaths};\n use crate::rmeta::{CrateMetadata, CrateNumMap, CrateRoot, CrateDep, MetadataBlob};\n \n use rustc::hir::def_id::CrateNum;\n use rustc_data_structures::svh::Svh;\n+use rustc_data_structures::sync::Lrc;\n+use rustc_index::vec::IndexVec;\n use rustc::middle::cstore::DepKind;\n use rustc::session::{Session, CrateDisambiguator};\n use rustc::session::config::{Sanitizer, self};\n@@ -21,18 +22,22 @@ use std::{cmp, fs};\n \n use syntax::ast;\n use syntax::attr;\n+use syntax::edition::Edition;\n use syntax::expand::allocator::{global_allocator_spans, AllocatorKind};\n use syntax::symbol::{Symbol, sym};\n use syntax::span_fatal;\n+use syntax_expand::base::SyntaxExtension;\n use syntax_pos::{Span, DUMMY_SP};\n use log::{debug, info, log_enabled};\n use proc_macro::bridge::client::ProcMacro;\n \n use rustc_error_codes::*;\n \n-crate struct Library {\n-    pub source: CrateSource,\n-    pub metadata: MetadataBlob,\n+#[derive(Clone)]\n+pub struct CStore {\n+    metas: IndexVec<CrateNum, Option<Lrc<CrateMetadata>>>,\n+    crate injected_panic_runtime: Option<CrateNum>,\n+    crate allocator_kind: Option<AllocatorKind>,\n }\n \n pub struct CrateLoader<'a> {\n@@ -44,6 +49,33 @@ pub struct CrateLoader<'a> {\n     cstore: CStore,\n }\n \n+pub enum LoadedMacro {\n+    MacroDef(ast::Item, Edition),\n+    ProcMacro(SyntaxExtension),\n+}\n+\n+crate struct Library {\n+    pub source: CrateSource,\n+    pub metadata: MetadataBlob,\n+}\n+\n+enum LoadResult {\n+    Previous(CrateNum),\n+    Loaded(Library),\n+}\n+\n+enum LoadError<'a> {\n+    LocatorError(CrateLocator<'a>),\n+}\n+\n+impl<'a> LoadError<'a> {\n+    fn report(self) -> ! {\n+        match self {\n+            LoadError::LocatorError(locator) => locator.report_errs(),\n+        }\n+    }\n+}\n+\n fn dump_crates(cstore: &CStore) {\n     info!(\"resolved crates:\");\n     cstore.iter_crate_data(|cnum, data| {\n@@ -58,21 +90,58 @@ fn dump_crates(cstore: &CStore) {\n     });\n }\n \n-enum LoadResult {\n-    Previous(CrateNum),\n-    Loaded(Library),\n-}\n+impl CStore {\n+    crate fn alloc_new_crate_num(&mut self) -> CrateNum {\n+        self.metas.push(None);\n+        CrateNum::new(self.metas.len() - 1)\n+    }\n \n-enum LoadError<'a> {\n-    LocatorError(CrateLocator<'a>),\n-}\n+    crate fn get_crate_data(&self, cnum: CrateNum) -> &CrateMetadata {\n+        self.metas[cnum].as_ref()\n+            .unwrap_or_else(|| panic!(\"Failed to get crate data for {:?}\", cnum))\n+    }\n \n-impl<'a> LoadError<'a> {\n-    fn report(self) -> ! {\n-        match self {\n-            LoadError::LocatorError(locator) => locator.report_errs(),\n+    crate fn set_crate_data(&mut self, cnum: CrateNum, data: CrateMetadata) {\n+        assert!(self.metas[cnum].is_none(), \"Overwriting crate metadata entry\");\n+        self.metas[cnum] = Some(Lrc::new(data));\n+    }\n+\n+    crate fn iter_crate_data(&self, mut f: impl FnMut(CrateNum, &CrateMetadata)) {\n+        for (cnum, data) in self.metas.iter_enumerated() {\n+            if let Some(data) = data {\n+                f(cnum, data);\n+            }\n+        }\n+    }\n+\n+    fn push_dependencies_in_postorder(&self, deps: &mut Vec<CrateNum>, cnum: CrateNum) {\n+        if !deps.contains(&cnum) {\n+            let data = self.get_crate_data(cnum);\n+            for &dep in data.dependencies().iter() {\n+                if dep != cnum {\n+                    self.push_dependencies_in_postorder(deps, dep);\n+                }\n+            }\n+\n+            deps.push(cnum);\n         }\n     }\n+\n+    crate fn crate_dependencies_in_postorder(&self, cnum: CrateNum) -> Vec<CrateNum> {\n+        let mut deps = Vec::new();\n+        if cnum == LOCAL_CRATE {\n+            self.iter_crate_data(|cnum, _| self.push_dependencies_in_postorder(&mut deps, cnum));\n+        } else {\n+            self.push_dependencies_in_postorder(&mut deps, cnum);\n+        }\n+        deps\n+    }\n+\n+    crate fn crate_dependencies_in_reverse_postorder(&self, cnum: CrateNum) -> Vec<CrateNum> {\n+        let mut deps = self.crate_dependencies_in_postorder(cnum);\n+        deps.reverse();\n+        deps\n+    }\n }\n \n impl<'a> CrateLoader<'a> {\n@@ -85,7 +154,15 @@ impl<'a> CrateLoader<'a> {\n             sess,\n             metadata_loader,\n             local_crate_name: Symbol::intern(local_crate_name),\n-            cstore: Default::default(),\n+            cstore: CStore {\n+                // We add an empty entry for LOCAL_CRATE (which maps to zero) in\n+                // order to make array indices in `metas` match with the\n+                // corresponding `CrateNum`. This first entry will always remain\n+                // `None`.\n+                metas: IndexVec::from_elem_n(None, 1),\n+                injected_panic_runtime: None,\n+                allocator_kind: None,\n+            }\n         }\n     }\n "}, {"sha": "aac286427250d6be2e71de90427fdffdbb7fb4e9", "filename": "src/librustc_metadata/cstore.rs", "status": "removed", "additions": 0, "deletions": 94, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/3b1d60a6bcd4d6b31bb7ab7758808dd5f15e51e8/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1d60a6bcd4d6b31bb7ab7758808dd5f15e51e8/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=3b1d60a6bcd4d6b31bb7ab7758808dd5f15e51e8", "patch": "@@ -1,94 +0,0 @@\n-// The crate store - a central repo for information collected about external\n-// crates and libraries\n-\n-use crate::rmeta::CrateMetadata;\n-\n-use rustc_data_structures::sync::Lrc;\n-use rustc_index::vec::IndexVec;\n-use rustc::hir::def_id::{LOCAL_CRATE, CrateNum};\n-use syntax::ast;\n-use syntax::edition::Edition;\n-use syntax::expand::allocator::AllocatorKind;\n-use syntax_expand::base::SyntaxExtension;\n-\n-pub use crate::rmeta::{provide, provide_extern};\n-\n-#[derive(Clone)]\n-pub struct CStore {\n-    metas: IndexVec<CrateNum, Option<Lrc<CrateMetadata>>>,\n-    crate injected_panic_runtime: Option<CrateNum>,\n-    crate allocator_kind: Option<AllocatorKind>,\n-}\n-\n-pub enum LoadedMacro {\n-    MacroDef(ast::Item, Edition),\n-    ProcMacro(SyntaxExtension),\n-}\n-\n-impl Default for CStore {\n-    fn default() -> Self {\n-        CStore {\n-            // We add an empty entry for LOCAL_CRATE (which maps to zero) in\n-            // order to make array indices in `metas` match with the\n-            // corresponding `CrateNum`. This first entry will always remain\n-            // `None`.\n-            metas: IndexVec::from_elem_n(None, 1),\n-            injected_panic_runtime: None,\n-            allocator_kind: None,\n-        }\n-    }\n-}\n-\n-impl CStore {\n-    crate fn alloc_new_crate_num(&mut self) -> CrateNum {\n-        self.metas.push(None);\n-        CrateNum::new(self.metas.len() - 1)\n-    }\n-\n-    crate fn get_crate_data(&self, cnum: CrateNum) -> &CrateMetadata {\n-        self.metas[cnum].as_ref()\n-            .unwrap_or_else(|| panic!(\"Failed to get crate data for {:?}\", cnum))\n-    }\n-\n-    crate fn set_crate_data(&mut self, cnum: CrateNum, data: CrateMetadata) {\n-        assert!(self.metas[cnum].is_none(), \"Overwriting crate metadata entry\");\n-        self.metas[cnum] = Some(Lrc::new(data));\n-    }\n-\n-    crate fn iter_crate_data(&self, mut f: impl FnMut(CrateNum, &CrateMetadata)) {\n-        for (cnum, data) in self.metas.iter_enumerated() {\n-            if let Some(data) = data {\n-                f(cnum, data);\n-            }\n-        }\n-    }\n-\n-    fn push_dependencies_in_postorder(&self, deps: &mut Vec<CrateNum>, cnum: CrateNum) {\n-        if !deps.contains(&cnum) {\n-            let data = self.get_crate_data(cnum);\n-            for &dep in data.dependencies().iter() {\n-                if dep != cnum {\n-                    self.push_dependencies_in_postorder(deps, dep);\n-                }\n-            }\n-\n-            deps.push(cnum);\n-        }\n-    }\n-\n-    crate fn crate_dependencies_in_postorder(&self, cnum: CrateNum) -> Vec<CrateNum> {\n-        let mut deps = Vec::new();\n-        if cnum == LOCAL_CRATE {\n-            self.iter_crate_data(|cnum, _| self.push_dependencies_in_postorder(&mut deps, cnum));\n-        } else {\n-            self.push_dependencies_in_postorder(&mut deps, cnum);\n-        }\n-        deps\n-    }\n-\n-    crate fn crate_dependencies_in_reverse_postorder(&self, cnum: CrateNum) -> Vec<CrateNum> {\n-        let mut deps = self.crate_dependencies_in_postorder(cnum);\n-        deps.reverse();\n-        deps\n-    }\n-}"}, {"sha": "8c0b7345e1e8aa0a81cea3b9b5acf345f98d08ca", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/753ce4518e9178be819b898be83c6aef970d428c/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753ce4518e9178be819b898be83c6aef970d428c/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=753ce4518e9178be819b898be83c6aef970d428c", "patch": "@@ -24,14 +24,15 @@ extern crate rustc;\n #[macro_use]\n extern crate rustc_data_structures;\n \n+pub use rmeta::{provide, provide_extern};\n+\n mod dependency_format;\n mod foreign_modules;\n mod link_args;\n mod native_libs;\n mod rmeta;\n \n pub mod creader;\n-pub mod cstore;\n pub mod dynamic_lib;\n pub mod locator;\n "}, {"sha": "eb5e3115dd27eb1d6393a83844109c35943097e4", "filename": "src/librustc_metadata/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/753ce4518e9178be819b898be83c6aef970d428c/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753ce4518e9178be819b898be83c6aef970d428c/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=753ce4518e9178be819b898be83c6aef970d428c", "patch": "@@ -1,4 +1,4 @@\n-use crate::cstore::{self, LoadedMacro};\n+use crate::creader::{CStore, LoadedMacro};\n use crate::link_args;\n use crate::native_libs;\n use crate::foreign_modules;\n@@ -382,7 +382,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     };\n }\n \n-impl cstore::CStore {\n+impl CStore {\n     pub fn export_macros_untracked(&self, cnum: CrateNum) {\n         let data = self.get_crate_data(cnum);\n         let mut dep_kind = data.dep_kind.lock();\n@@ -458,7 +458,7 @@ impl cstore::CStore {\n     }\n }\n \n-impl CrateStore for cstore::CStore {\n+impl CrateStore for CStore {\n     fn crate_data_as_any(&self, cnum: CrateNum) -> &dyn Any {\n         self.get_crate_data(cnum)\n     }"}, {"sha": "eb7265cb9ccd1920f44339dd4c965ceb8088055c", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/753ce4518e9178be819b898be83c6aef970d428c/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753ce4518e9178be819b898be83c6aef970d428c/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=753ce4518e9178be819b898be83c6aef970d428c", "patch": "@@ -19,7 +19,7 @@ use rustc::hir::def::{self, *};\n use rustc::hir::def_id::{CRATE_DEF_INDEX, LOCAL_CRATE, DefId};\n use rustc::ty;\n use rustc::middle::cstore::CrateStore;\n-use rustc_metadata::cstore::LoadedMacro;\n+use rustc_metadata::creader::LoadedMacro;\n \n use std::cell::Cell;\n use std::ptr;"}, {"sha": "be36e02f5b5b1e17fc8659c2d5092a98890f3b91", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/753ce4518e9178be819b898be83c6aef970d428c/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753ce4518e9178be819b898be83c6aef970d428c/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=753ce4518e9178be819b898be83c6aef970d428c", "patch": "@@ -32,8 +32,7 @@ use rustc::ty::{self, DefIdTree, ResolverOutputs};\n use rustc::util::nodemap::{NodeMap, NodeSet, FxHashMap, FxHashSet, DefIdMap};\n use rustc::span_bug;\n \n-use rustc_metadata::creader::CrateLoader;\n-use rustc_metadata::cstore::CStore;\n+use rustc_metadata::creader::{CrateLoader, CStore};\n \n use syntax::{struct_span_err, unwrap_or};\n use syntax::ast::{self, Name, NodeId, Ident, FloatTy, IntTy, UintTy};"}, {"sha": "4b5fc7c2a1e541490b21791e35fc99fa49a14f85", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/753ce4518e9178be819b898be83c6aef970d428c/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753ce4518e9178be819b898be83c6aef970d428c/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=753ce4518e9178be819b898be83c6aef970d428c", "patch": "@@ -10,7 +10,7 @@ use syntax_pos::Span;\n use rustc::hir;\n use rustc::hir::def::{Res, DefKind, CtorKind};\n use rustc::hir::def_id::DefId;\n-use rustc_metadata::cstore::LoadedMacro;\n+use rustc_metadata::creader::LoadedMacro;\n use rustc::ty;\n use rustc::util::nodemap::FxHashSet;\n "}]}