{"sha": "d01648b60e74ae12e990b0858e68023504b9bd29", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwMTY0OGI2MGU3NGFlMTJlOTkwYjA4NThlNjgwMjM1MDRiOWJkMjk=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-03-10T16:55:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-10T16:55:43Z"}, "message": "Rollup merge of #82949 - the8472:forget-envlock-on-fork, r=joshtriplett\n\nDo not attempt to unlock envlock in child process after a fork.\n\nThis implements the first two points from https://github.com/rust-lang/rust/issues/64718#issuecomment-793030479\n\nThis is a breaking change for cases where the environment is accessed in a Command::pre_exec closure. Except for single-threaded programs these uses were not correct anyway since they aren't async-signal safe.\n\nNote that we had a ui test that explicitly tried `env::set_var` in `pre_exec`. As expected it failed with these changes when I tested locally.", "tree": {"sha": "4ebaa90d3fba92e860c394c2150027ef633d48b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ebaa90d3fba92e860c394c2150027ef633d48b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d01648b60e74ae12e990b0858e68023504b9bd29", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgSPoPCRBK7hj4Ov3rIwAAdHIIAHEWl5QDNrP6w0rKJYmtxI+s\n6WwPRJB2ykKNxIcbHAA+4p6onb+Zcr8wj+NCphpjxRgDGUWSbXNXWft107lGBLGB\n+H6m5HtcuC6y4BpTSU0k63pbp02teF3giuWrG4SuW2ojbF1N67RPy4SBkrfjIGig\norgvkS5TOkXI9sl9i6C5Jnv3FcV5s5AreghVryAgHdlw6+tmKs+VSkKZ+QCGGwaM\nroEjIC/UpwbWIYtXcbBkXczmfqhcXQZE29Q2+2Tuu/68JmPf70cj241I+PRJhcHh\ngf4fgfLImrQN53eFBqRtdO4PYr62AJpaJ6vsYHi+iseUexzegyLJ4aHdluNHgJw=\n=S61q\n-----END PGP SIGNATURE-----\n", "payload": "tree 4ebaa90d3fba92e860c394c2150027ef633d48b1\nparent 881bbb758a928b60d790936280d4ee3c38e05eaf\nparent d854789ce191be25f2953c60fd50ce711776d9eb\nauthor Dylan DPC <dylan.dpc@gmail.com> 1615395343 +0100\ncommitter GitHub <noreply@github.com> 1615395343 +0100\n\nRollup merge of #82949 - the8472:forget-envlock-on-fork, r=joshtriplett\n\nDo not attempt to unlock envlock in child process after a fork.\n\nThis implements the first two points from https://github.com/rust-lang/rust/issues/64718#issuecomment-793030479\n\nThis is a breaking change for cases where the environment is accessed in a Command::pre_exec closure. Except for single-threaded programs these uses were not correct anyway since they aren't async-signal safe.\n\nNote that we had a ui test that explicitly tried `env::set_var` in `pre_exec`. As expected it failed with these changes when I tested locally.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d01648b60e74ae12e990b0858e68023504b9bd29", "html_url": "https://github.com/rust-lang/rust/commit/d01648b60e74ae12e990b0858e68023504b9bd29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d01648b60e74ae12e990b0858e68023504b9bd29/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "881bbb758a928b60d790936280d4ee3c38e05eaf", "url": "https://api.github.com/repos/rust-lang/rust/commits/881bbb758a928b60d790936280d4ee3c38e05eaf", "html_url": "https://github.com/rust-lang/rust/commit/881bbb758a928b60d790936280d4ee3c38e05eaf"}, {"sha": "d854789ce191be25f2953c60fd50ce711776d9eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/d854789ce191be25f2953c60fd50ce711776d9eb", "html_url": "https://github.com/rust-lang/rust/commit/d854789ce191be25f2953c60fd50ce711776d9eb"}], "stats": {"total": 40, "additions": 19, "deletions": 21}, "files": [{"sha": "1276edc6af6c8c6b44deed19844a9a46475fbed0", "filename": "library/std/src/sys/unix/ext/process.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d01648b60e74ae12e990b0858e68023504b9bd29/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d01648b60e74ae12e990b0858e68023504b9bd29/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fprocess.rs?ref=d01648b60e74ae12e990b0858e68023504b9bd29", "patch": "@@ -62,9 +62,14 @@ pub trait CommandExt: Sealed {\n     /// `fork`. This primarily means that any modifications made to memory on\n     /// behalf of this closure will **not** be visible to the parent process.\n     /// This is often a very constrained environment where normal operations\n-    /// like `malloc` or acquiring a mutex are not guaranteed to work (due to\n+    /// like `malloc`, accessing environment variables through [`std::env`]\n+    /// or acquiring a mutex are not guaranteed to work (due to\n     /// other threads perhaps still running when the `fork` was run).\n     ///\n+    /// For further details refer to the [POSIX fork() specification]\n+    /// and the equivalent documentation for any targeted\n+    /// platform, especially the requirements around *async-signal-safety*.\n+    ///\n     /// This also means that all resources such as file descriptors and\n     /// memory-mapped regions got duplicated. It is your responsibility to make\n     /// sure that the closure does not violate library invariants by making\n@@ -73,6 +78,10 @@ pub trait CommandExt: Sealed {\n     /// When this closure is run, aspects such as the stdio file descriptors and\n     /// working directory have successfully been changed, so output to these\n     /// locations may not appear where intended.\n+    ///\n+    /// [POSIX fork() specification]:\n+    ///     https://pubs.opengroup.org/onlinepubs/9699919799/functions/fork.html\n+    /// [`std::env`]: mod@crate::env\n     #[stable(feature = \"process_pre_exec\", since = \"1.34.0\")]\n     unsafe fn pre_exec<F>(&mut self, f: F) -> &mut process::Command\n     where"}, {"sha": "2eb64a99e599a06406a0dd99a37c864cd660a0a7", "filename": "library/std/src/sys/unix/process/process_unix.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d01648b60e74ae12e990b0858e68023504b9bd29/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d01648b60e74ae12e990b0858e68023504b9bd29/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=d01648b60e74ae12e990b0858e68023504b9bd29", "patch": "@@ -1,6 +1,7 @@\n use crate::convert::TryInto;\n use crate::fmt;\n use crate::io::{self, Error, ErrorKind};\n+use crate::mem;\n use crate::ptr;\n use crate::sys;\n use crate::sys::cvt;\n@@ -45,15 +46,14 @@ impl Command {\n         //\n         // Note that as soon as we're done with the fork there's no need to hold\n         // a lock any more because the parent won't do anything and the child is\n-        // in its own process.\n-        let result = unsafe {\n-            let _env_lock = sys::os::env_lock();\n-            cvt(libc::fork())?\n-        };\n+        // in its own process. Thus the parent drops the lock guard while the child\n+        // forgets it to avoid unlocking it on a new thread, which would be invalid.\n+        let (env_lock, result) = unsafe { (sys::os::env_lock(), cvt(libc::fork())?) };\n \n         let pid = unsafe {\n             match result {\n                 0 => {\n+                    mem::forget(env_lock);\n                     drop(input);\n                     let Err(err) = self.do_exec(theirs, envp.as_ref());\n                     let errno = err.raw_os_error().unwrap_or(libc::EINVAL) as u32;\n@@ -74,7 +74,10 @@ impl Command {\n                     rtassert!(output.write(&bytes).is_ok());\n                     libc::_exit(1)\n                 }\n-                n => n,\n+                n => {\n+                    drop(env_lock);\n+                    n\n+                }\n             }\n         };\n "}, {"sha": "819ed0b2ddef7c8e6a648faebb670623088af8a7", "filename": "src/test/ui/command/command-pre-exec.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d01648b60e74ae12e990b0858e68023504b9bd29/src%2Ftest%2Fui%2Fcommand%2Fcommand-pre-exec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d01648b60e74ae12e990b0858e68023504b9bd29/src%2Ftest%2Fui%2Fcommand%2Fcommand-pre-exec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcommand%2Fcommand-pre-exec.rs?ref=d01648b60e74ae12e990b0858e68023504b9bd29", "patch": "@@ -43,20 +43,6 @@ fn main() {\n     assert!(output.stderr.is_empty());\n     assert_eq!(output.stdout, b\"hello\\nhello2\\n\");\n \n-    let output = unsafe {\n-        Command::new(&me)\n-            .arg(\"test2\")\n-            .pre_exec(|| {\n-                env::set_var(\"FOO\", \"BAR\");\n-                Ok(())\n-            })\n-            .output()\n-            .unwrap()\n-    };\n-    assert!(output.status.success());\n-    assert!(output.stderr.is_empty());\n-    assert!(output.stdout.is_empty());\n-\n     let output = unsafe {\n         Command::new(&me)\n             .arg(\"test3\")"}]}