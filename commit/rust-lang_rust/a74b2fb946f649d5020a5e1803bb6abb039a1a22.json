{"sha": "a74b2fb946f649d5020a5e1803bb6abb039a1a22", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3NGIyZmI5NDZmNjQ5ZDUwMjBhNWUxODAzYmI2YWJiMDM5YTFhMjI=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-01-30T00:03:20Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-02-02T18:57:46Z"}, "message": "Fix early lints inside an async desugaring\n\nFixes #81531\n\nWhen we buffer an early lint for a macro invocation,\nwe need to determine which NodeId to take the lint level from.\nCurrently, we use the `NodeId` of the closest def parent. However, if\nthe macro invocation is inside the desugared closure from an `async fn`\nor async closure, that `NodeId` does not actually exist in the AST.\n\nThis commit explicitly calls `check_lint` for the `NodeId`s of closures\ndesugared from async expressions, ensuring that we do not miss any\nbuffered lints.", "tree": {"sha": "5cfa31edd13cb1ff802c6647a4a680acb9c20ded", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cfa31edd13cb1ff802c6647a4a680acb9c20ded"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a74b2fb946f649d5020a5e1803bb6abb039a1a22", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAmAZoNkACgkQtAh+UQ6Y\nsWTF/w/9G29D/E8AnMCZQGvXB2cHP6OWpV0gVSW1jq5WgTD3FRk18Mr+eWK/3Rpb\nfZ6LVaNPABHvz091IpMLrb5iKLswfMltAHbG9GiCpp7FyhlhcqSL6EQl6jLQYaAZ\n+09zRVWZmG1VQRF3G6i9mFbMlP42LcCGO+dsoOo0XrKrvyQ5glKGVRLJpPGeS/Mh\nsXvv2wEY1HgA9Kt0hDLekVqyg1vk1kKDakgkP3NSPamOXHgheHzNhLLYoG1CUZWk\nHS5vG285XdyHi8evYkQTriKD/y9aMxJDGP8QgKT/TnxScQpjfLjJ0agywtMrWGNc\n1b/GlmkqAP/OfT+3vgqLa3d0AvAQvgNW1SKNZQtIHiLH2iFtYItn7iRsKQgWShfq\nWVA2S1coI/jRs07gqtnVuQxQHq69oOwPXgSiMo09b8yiFXjG3gqYeRX0obw3N/i8\nhviQOP+ObECqFcYDSE6FkjjF1mF8HxIADj1Nyh3Fcu/Rmt00pE1uTTUkesKs4cgL\ny7t9UCl735/E2UGAkOc5o87H88Arqkk+s3vRIkr4uwIlkaclzcIHJVsXPsXwA7Jq\n+xrloltI6mTz2YsaxvRkwCDuwPbdBACJrAD8eEzj4diSrMpepu2U1BSc1/KW4u0d\nvKUbowbx+Bl2gQ1uUeAocrP4IkWIlG00t73OC1TfKQ68MQcHxPg=\n=qzCL\n-----END PGP SIGNATURE-----", "payload": "tree 5cfa31edd13cb1ff802c6647a4a680acb9c20ded\nparent b81f5811f96fe750ab28c15219d1b0dba6b1dc90\nauthor Aaron Hill <aa1ronham@gmail.com> 1611965000 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1612292266 -0500\n\nFix early lints inside an async desugaring\n\nFixes #81531\n\nWhen we buffer an early lint for a macro invocation,\nwe need to determine which NodeId to take the lint level from.\nCurrently, we use the `NodeId` of the closest def parent. However, if\nthe macro invocation is inside the desugared closure from an `async fn`\nor async closure, that `NodeId` does not actually exist in the AST.\n\nThis commit explicitly calls `check_lint` for the `NodeId`s of closures\ndesugared from async expressions, ensuring that we do not miss any\nbuffered lints.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a74b2fb946f649d5020a5e1803bb6abb039a1a22", "html_url": "https://github.com/rust-lang/rust/commit/a74b2fb946f649d5020a5e1803bb6abb039a1a22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a74b2fb946f649d5020a5e1803bb6abb039a1a22/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b81f5811f96fe750ab28c15219d1b0dba6b1dc90", "url": "https://api.github.com/repos/rust-lang/rust/commits/b81f5811f96fe750ab28c15219d1b0dba6b1dc90", "html_url": "https://github.com/rust-lang/rust/commit/b81f5811f96fe750ab28c15219d1b0dba6b1dc90"}], "stats": {"total": 28, "additions": 25, "deletions": 3}, "files": [{"sha": "c02465f59795040ce419eed46187c406b83e2aac", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a74b2fb946f649d5020a5e1803bb6abb039a1a22/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a74b2fb946f649d5020a5e1803bb6abb039a1a22/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=a74b2fb946f649d5020a5e1803bb6abb039a1a22", "patch": "@@ -143,6 +143,14 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n         run_early_pass!(self, check_fn, fk, span, id);\n         self.check_id(id);\n         ast_visit::walk_fn(self, fk, span);\n+\n+        // Explicitly check for lints associated with 'closure_id', since\n+        // it does not have a corresponding AST node\n+        if let ast_visit::FnKind::Fn(_, _, sig, _, _) = fk {\n+            if let ast::Async::Yes { closure_id, .. } = sig.header.asyncness {\n+                self.check_id(closure_id);\n+            }\n+        }\n         run_early_pass!(self, check_fn_post, fk, span, id);\n     }\n \n@@ -208,6 +216,14 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n \n     fn visit_expr_post(&mut self, e: &'a ast::Expr) {\n         run_early_pass!(self, check_expr_post, e);\n+\n+        // Explicitly check for lints associated with 'closure_id', since\n+        // it does not have a corresponding AST node\n+        if let ast::ExprKind::Closure(_, asyncness, ..) = e.kind {\n+            if let ast::Async::Yes { closure_id, .. } = asyncness {\n+                self.check_id(closure_id);\n+            }\n+        }\n     }\n \n     fn visit_generic_arg(&mut self, arg: &'a ast::GenericArg) {"}, {"sha": "4f39d088b1282a8e1e60ad4a5e8646eee91b9683", "filename": "src/test/ui/lint/semicolon-in-expressions-from-macros/semicolon-in-expressions-from-macros.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a74b2fb946f649d5020a5e1803bb6abb039a1a22/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fsemicolon-in-expressions-from-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a74b2fb946f649d5020a5e1803bb6abb039a1a22/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fsemicolon-in-expressions-from-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fsemicolon-in-expressions-from-macros.rs?ref=a74b2fb946f649d5020a5e1803bb6abb039a1a22", "patch": "@@ -1,4 +1,5 @@\n // check-pass\n+// edition:2018\n #![warn(semicolon_in_expressions_from_macros)]\n \n #[allow(dead_code)]\n@@ -11,6 +12,11 @@ macro_rules! foo {\n     }\n }\n \n+#[allow(semicolon_in_expressions_from_macros)]\n+async fn bar() {\n+    foo!(first);\n+}\n+\n fn main() {\n     // This `allow` doesn't work\n     #[allow(semicolon_in_expressions_from_macros)]"}, {"sha": "bfdce732e029d102ad1f8fa8c1da777f1233b0a0", "filename": "src/test/ui/lint/semicolon-in-expressions-from-macros/semicolon-in-expressions-from-macros.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a74b2fb946f649d5020a5e1803bb6abb039a1a22/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fsemicolon-in-expressions-from-macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a74b2fb946f649d5020a5e1803bb6abb039a1a22/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fsemicolon-in-expressions-from-macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fsemicolon-in-expressions-from-macros.stderr?ref=a74b2fb946f649d5020a5e1803bb6abb039a1a22", "patch": "@@ -1,5 +1,5 @@\n warning: trailing semicolon in macro used in expression position\n-  --> $DIR/semicolon-in-expressions-from-macros.rs:7:13\n+  --> $DIR/semicolon-in-expressions-from-macros.rs:8:13\n    |\n LL |         true;\n    |             ^\n@@ -8,7 +8,7 @@ LL |         foo!(first)\n    |         ----------- in this macro invocation\n    |\n note: the lint level is defined here\n-  --> $DIR/semicolon-in-expressions-from-macros.rs:2:9\n+  --> $DIR/semicolon-in-expressions-from-macros.rs:3:9\n    |\n LL | #![warn(semicolon_in_expressions_from_macros)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -17,7 +17,7 @@ LL | #![warn(semicolon_in_expressions_from_macros)]\n    = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: trailing semicolon in macro used in expression position\n-  --> $DIR/semicolon-in-expressions-from-macros.rs:7:13\n+  --> $DIR/semicolon-in-expressions-from-macros.rs:8:13\n    |\n LL |         true;\n    |             ^"}]}