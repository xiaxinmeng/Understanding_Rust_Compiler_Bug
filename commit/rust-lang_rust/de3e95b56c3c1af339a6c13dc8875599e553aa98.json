{"sha": "de3e95b56c3c1af339a6c13dc8875599e553aa98", "node_id": "C_kwDOAAsO6NoAKGRlM2U5NWI1NmMzYzFhZjMzOWE2YzEzZGM4ODc1NTk5ZTU1M2FhOTg", "commit": {"author": {"name": "Matthew Kelly", "email": "matthew.kelly2@gmail.com", "date": "2022-08-26T19:01:49Z"}, "committer": {"name": "Matthew Kelly", "email": "matthew.kelly2@gmail.com", "date": "2022-08-27T18:20:59Z"}, "message": "Review updates: simpler MWE and docs\n\n- use the simpler minimum working example from the review\n- add an alterate \"fix\" that helps make the cause of the error more\n  clear\n- attempt to add an improved description of what is going on", "tree": {"sha": "2e3adad0e8c1dfa3afc72a748627ef274d12b65a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e3adad0e8c1dfa3afc72a748627ef274d12b65a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de3e95b56c3c1af339a6c13dc8875599e553aa98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de3e95b56c3c1af339a6c13dc8875599e553aa98", "html_url": "https://github.com/rust-lang/rust/commit/de3e95b56c3c1af339a6c13dc8875599e553aa98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de3e95b56c3c1af339a6c13dc8875599e553aa98/comments", "author": {"login": "MatthewPeterKelly", "id": 8137529, "node_id": "MDQ6VXNlcjgxMzc1Mjk=", "avatar_url": "https://avatars.githubusercontent.com/u/8137529?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MatthewPeterKelly", "html_url": "https://github.com/MatthewPeterKelly", "followers_url": "https://api.github.com/users/MatthewPeterKelly/followers", "following_url": "https://api.github.com/users/MatthewPeterKelly/following{/other_user}", "gists_url": "https://api.github.com/users/MatthewPeterKelly/gists{/gist_id}", "starred_url": "https://api.github.com/users/MatthewPeterKelly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MatthewPeterKelly/subscriptions", "organizations_url": "https://api.github.com/users/MatthewPeterKelly/orgs", "repos_url": "https://api.github.com/users/MatthewPeterKelly/repos", "events_url": "https://api.github.com/users/MatthewPeterKelly/events{/privacy}", "received_events_url": "https://api.github.com/users/MatthewPeterKelly/received_events", "type": "User", "site_admin": false}, "committer": {"login": "MatthewPeterKelly", "id": 8137529, "node_id": "MDQ6VXNlcjgxMzc1Mjk=", "avatar_url": "https://avatars.githubusercontent.com/u/8137529?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MatthewPeterKelly", "html_url": "https://github.com/MatthewPeterKelly", "followers_url": "https://api.github.com/users/MatthewPeterKelly/followers", "following_url": "https://api.github.com/users/MatthewPeterKelly/following{/other_user}", "gists_url": "https://api.github.com/users/MatthewPeterKelly/gists{/gist_id}", "starred_url": "https://api.github.com/users/MatthewPeterKelly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MatthewPeterKelly/subscriptions", "organizations_url": "https://api.github.com/users/MatthewPeterKelly/orgs", "repos_url": "https://api.github.com/users/MatthewPeterKelly/repos", "events_url": "https://api.github.com/users/MatthewPeterKelly/events{/privacy}", "received_events_url": "https://api.github.com/users/MatthewPeterKelly/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f194a76c8482ffcd16526a08b1dc489a5a75e96", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f194a76c8482ffcd16526a08b1dc489a5a75e96", "html_url": "https://github.com/rust-lang/rust/commit/4f194a76c8482ffcd16526a08b1dc489a5a75e96"}], "stats": {"total": 152, "additions": 52, "deletions": 100}, "files": [{"sha": "b1fa61d365c73c781387ab3a9aeea5baa2c9cd3b", "filename": "compiler/rustc_error_codes/src/error_codes/E0311.md", "status": "modified", "additions": 33, "deletions": 50, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/de3e95b56c3c1af339a6c13dc8875599e553aa98/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0311.md", "raw_url": "https://github.com/rust-lang/rust/raw/de3e95b56c3c1af339a6c13dc8875599e553aa98/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0311.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0311.md?ref=de3e95b56c3c1af339a6c13dc8875599e553aa98", "patch": "@@ -1,69 +1,52 @@\n-This error occurs when there is an unsatisfied outlives bound on a generic\n-type parameter or associated type.\n+This error occurs when there is an unsatisfied outlives bound involving an\n+elided region on a generic type parameter or associated type.\n \n Erroneous code example:\n \n ```compile_fail,E0311\n-use std::borrow::BorrowMut;\n-\n-trait NestedBorrowMut<U, V> {\n-    fn nested_borrow_mut(&mut self) -> &mut V;\n+fn no_restriction<T>(x: &()) -> &() {\n+    with_restriction::<T>(x)\n }\n \n-impl<T, U, V> NestedBorrowMut<U, V> for T\n-where\n-    T: BorrowMut<U>,\n-    U: BorrowMut<V>,\n-{\n-    fn nested_borrow_mut(&mut self) -> &mut V {\n-        let u_ref = self.borrow_mut();\n-        let v_ref = u_ref.borrow_mut();\n-        v_ref\n-    }\n+fn with_restriction<'a, T: 'a>(x: &'a ()) -> &'a () {\n+    x\n }\n ```\n \n-Why doesn't this code compile? It helps to look at the lifetime bounds that\n-the compiler is automatically adding (\"Lifetime Ellision\", Chapter 10.3 in the\n-Rust book) to the `nested_borrow_mut()` and `borrow_mut()` functions. In both\n-cases the input is a reference to `self`, so the compiler attempts to assign\n-the same lifetime to the input and output.\n+Why doesn't this code compile? It helps to look at the lifetime bounds that are\n+automatically adding by the compiler. For more details see the Rust\n+Documentation for Lifetime Elision:\n+https://doc.rust-lang.org/reference/lifetime-elision.html]\n \n-Looking specifically at `nested_borrow_mut()`, we see that there are three\n-object references to keep track of, along with their associated lifetimes:\n-- `self` (which is a `&mut T`)\n-- `u_ref` (which is a `&mut U`)\n-- `v_ref` (which is a `&mut V`)\n+There are two lifetimes being passed into the `no_restriction()` function: one\n+associated with the generic type `T` parameter and the other with the input\n+argument `x`. The compiler does not know which of these lifetimes can be\n+assigned to the output reference, so we get an error.\n \n-The `borrow_mut()` method implicitly requires that that the input and output\n-have the same lifetime bounds. Thus the lines: `let u_ref = self.borrow_mut();`\n-and `let v_ref = u_ref.borrow_mut();` in `nested_borrow_mut()` above imply that\n-`u_ref` and `self` must share a lifetime bound, and also that `v_ref` and\n-`u_ref` share a lifetime bound. The problem is that the function signature for\n-`nested_borrow_mut()` only gives the compiler information about the lifetimes\n-of `self` and `v_ref` -- nothing about `u_ref`.\n+One way to \"fix\" this code would be to remove the generic type argument `T`.\n+In this case, the lifetime elision works because there is a single input\n+lifetime, which is associated with `x`.\n \n-The way to fix this error is then to explicitly tell the compiler that the\n-lifetime of `u_ref` is the same as `self` and `v_ref`, which then allows it\n-to satisfy the two lifetime bound requirements described above.\n+```\n+fn no_restriction(x: &()) -> &() {\n+    with_restriction(x)\n+}\n \n-Here is the working version of the code:\n+fn with_restriction<'a>(x: &'a ()) -> &'a () {\n+    x\n+}\n ```\n-use std::borrow::BorrowMut;\n \n-trait NestedBorrowMut<'a, U, V> {\n-    fn nested_borrow_mut(&'a mut self) -> &'a mut V;\n+The \"correct\" way to resolve this error is to explicitly tell the compiler\n+which input lifetime should be assigned to the output. In this case we give\n+both the generic type `T` parameter and the argument `x` the same lifetime\n+requirement as the output reference, producing a working version of the code:\n+```\n+fn no_restriction<'a, T: 'a>(x: &'a ()) -> &'a () {\n+    with_restriction::<T>(x)\n }\n \n-impl<'a, T, U, V> NestedBorrowMut<'a, U, V> for T\n-where\n-    T: BorrowMut<U>,\n-    U: BorrowMut<V> + 'a,\n-{\n-    fn nested_borrow_mut(&'a mut self) -> &'a mut V {\n-        let u_ref = self.borrow_mut();\n-        let v_ref = u_ref.borrow_mut();\n-        v_ref\n-    }\n+fn with_restriction<'a, T: 'a>(x: &'a ()) -> &'a () {\n+    x\n }\n ```"}, {"sha": "566b518b4331dec8dec96379f1a10649698193eb", "filename": "src/test/ui/error-codes/E0311.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/de3e95b56c3c1af339a6c13dc8875599e553aa98/src%2Ftest%2Fui%2Ferror-codes%2FE0311.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de3e95b56c3c1af339a6c13dc8875599e553aa98/src%2Ftest%2Fui%2Ferror-codes%2FE0311.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0311.rs?ref=de3e95b56c3c1af339a6c13dc8875599e553aa98", "patch": "@@ -1,19 +1,9 @@\n-use std::borrow::BorrowMut;\n-\n-trait NestedBorrowMut<U, V> {\n-    fn nested_borrow_mut(&mut self) -> &mut V;\n+fn no_restriction<T>(x: &()) -> &() {\n+    with_restriction::<T>(x) //~ ERROR E0311\n }\n \n-impl<T, U, V> NestedBorrowMut<U, V> for T\n-where\n-    T: BorrowMut<U>,\n-    U: BorrowMut<V>, // Error is caused by missing lifetime here\n-{\n-    fn nested_borrow_mut(&mut self) -> &mut V {\n-        let u_ref = self.borrow_mut(); //~ ERROR E0311\n-        let v_ref = u_ref.borrow_mut(); //~ ERROR E0311\n-        v_ref\n-    }\n+fn with_restriction<'a, T: 'a>(x: &'a ()) -> &'a () {\n+    x\n }\n \n fn main() {}"}, {"sha": "bc0182555af864b90268810542e1a1b264117216", "filename": "src/test/ui/error-codes/E0311.stderr", "status": "modified", "additions": 15, "deletions": 36, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/de3e95b56c3c1af339a6c13dc8875599e553aa98/src%2Ftest%2Fui%2Ferror-codes%2FE0311.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de3e95b56c3c1af339a6c13dc8875599e553aa98/src%2Ftest%2Fui%2Ferror-codes%2FE0311.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0311.stderr?ref=de3e95b56c3c1af339a6c13dc8875599e553aa98", "patch": "@@ -1,45 +1,24 @@\n-error[E0311]: the parameter type `U` may not live long enough\n-  --> $DIR/E0311.rs:13:21\n+error[E0311]: the parameter type `T` may not live long enough\n+  --> $DIR/E0311.rs:2:5\n    |\n-LL |         let u_ref = self.borrow_mut();\n-   |                     ^^^^^^^^^^^^^^^^^\n+LL |     with_restriction::<T>(x)\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the parameter type `U` must be valid for the anonymous lifetime defined here...\n-  --> $DIR/E0311.rs:12:26\n+note: the parameter type `T` must be valid for the anonymous lifetime defined here...\n+  --> $DIR/E0311.rs:1:25\n    |\n-LL |     fn nested_borrow_mut(&mut self) -> &mut V {\n-   |                          ^^^^^^^^^\n-note: ...so that the type `U` will meet its required lifetime bounds\n-  --> $DIR/E0311.rs:13:21\n+LL | fn no_restriction<T>(x: &()) -> &() {\n+   |                         ^^^\n+note: ...so that the type `T` will meet its required lifetime bounds\n+  --> $DIR/E0311.rs:2:5\n    |\n-LL |         let u_ref = self.borrow_mut();\n-   |                     ^^^^^^^^^^^^^^^^^\n+LL |     with_restriction::<T>(x)\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n help: consider adding an explicit lifetime bound...\n    |\n-LL |     U: BorrowMut<V> + 'a, // Error is caused by missing lifetime here\n-   |                     ++++\n+LL | fn no_restriction<T: 'a>(x: &()) -> &() {\n+   |                    ++++\n \n-error[E0311]: the parameter type `U` may not live long enough\n-  --> $DIR/E0311.rs:14:21\n-   |\n-LL |         let v_ref = u_ref.borrow_mut();\n-   |                     ^^^^^^^^^^^^^^^^^^\n-   |\n-note: the parameter type `U` must be valid for the anonymous lifetime defined here...\n-  --> $DIR/E0311.rs:12:26\n-   |\n-LL |     fn nested_borrow_mut(&mut self) -> &mut V {\n-   |                          ^^^^^^^^^\n-note: ...so that the type `U` will meet its required lifetime bounds\n-  --> $DIR/E0311.rs:14:21\n-   |\n-LL |         let v_ref = u_ref.borrow_mut();\n-   |                     ^^^^^^^^^^^^^^^^^^\n-help: consider adding an explicit lifetime bound...\n-   |\n-LL |     U: BorrowMut<V> + 'a, // Error is caused by missing lifetime here\n-   |                     ++++\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0311`."}]}