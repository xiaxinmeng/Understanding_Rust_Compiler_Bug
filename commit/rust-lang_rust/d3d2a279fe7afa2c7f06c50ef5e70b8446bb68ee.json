{"sha": "d3d2a279fe7afa2c7f06c50ef5e70b8446bb68ee", "node_id": "C_kwDOAAsO6NoAKGQzZDJhMjc5ZmU3YWZhMmM3ZjA2YzUwZWY1ZTcwYjg0NDZiYjY4ZWU", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2022-02-25T23:30:29Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2022-02-25T23:30:29Z"}, "message": "Add Atomic*::from_mut_slice", "tree": {"sha": "97c95cffef4d4093fa81053b64ea84ce7183a2f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97c95cffef4d4093fa81053b64ea84ce7183a2f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3d2a279fe7afa2c7f06c50ef5e70b8446bb68ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3d2a279fe7afa2c7f06c50ef5e70b8446bb68ee", "html_url": "https://github.com/rust-lang/rust/commit/d3d2a279fe7afa2c7f06c50ef5e70b8446bb68ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3d2a279fe7afa2c7f06c50ef5e70b8446bb68ee/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d981633ed6669c6f7b1cb46d1d1a7282e281ca8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d981633ed6669c6f7b1cb46d1d1a7282e281ca8e", "html_url": "https://github.com/rust-lang/rust/commit/d981633ed6669c6f7b1cb46d1d1a7282e281ca8e"}], "stats": {"total": 94, "additions": 94, "deletions": 0}, "files": [{"sha": "2b8bbe1924450a41a8f20d01e3018631f6da3aae", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/d3d2a279fe7afa2c7f06c50ef5e70b8446bb68ee/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3d2a279fe7afa2c7f06c50ef5e70b8446bb68ee/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=d3d2a279fe7afa2c7f06c50ef5e70b8446bb68ee", "patch": "@@ -340,6 +340,32 @@ impl AtomicBool {\n         unsafe { &mut *(v as *mut bool as *mut Self) }\n     }\n \n+    /// Get atomic access to a `&mut [bool]` slice.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(atomic_from_mut, scoped_threads)]\n+    /// use std::sync::atomic::{AtomicBool, Ordering};\n+    ///\n+    /// let mut some_bools = [false; 10];\n+    /// let a = &*AtomicBool::from_mut_slice(&mut some_bools);\n+    /// std::thread::scope(|s| {\n+    ///     for i in 0..a.len() {\n+    ///         s.spawn(move |_| a[i].store(true, Ordering::Relaxed));\n+    ///     }\n+    /// });\n+    /// assert_eq!(some_bools, [true; 10]);\n+    /// ```\n+    #[inline]\n+    #[cfg(target_has_atomic_equal_alignment = \"8\")]\n+    #[unstable(feature = \"atomic_from_mut\", issue = \"76314\")]\n+    pub fn from_mut_slice(v: &mut [bool]) -> &mut [Self] {\n+        // SAFETY: the mutable reference guarantees unique ownership, and\n+        // alignment of both `bool` and `Self` is 1.\n+        unsafe { &mut *(v as *mut [bool] as *mut [Self]) }\n+    }\n+\n     /// Consumes the atomic and returns the contained value.\n     ///\n     /// This is safe because passing `self` by value guarantees that no other threads are\n@@ -945,6 +971,42 @@ impl<T> AtomicPtr<T> {\n         unsafe { &mut *(v as *mut *mut T as *mut Self) }\n     }\n \n+    /// Get atomic access to a slice of pointers.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(atomic_from_mut, scoped_threads)]\n+    /// use std::ptr::null_mut;\n+    /// use std::sync::atomic::{AtomicPtr, Ordering};\n+    ///\n+    /// let mut some_ptrs = [null_mut::<String>(); 10];\n+    /// let a = &*AtomicPtr::from_mut_slice(&mut some_ptrs);\n+    /// std::thread::scope(|s| {\n+    ///     for i in 0..a.len() {\n+    ///         s.spawn(move |_| {\n+    ///             let name = Box::new(format!(\"thread{i}\"));\n+    ///             a[i].store(Box::into_raw(name), Ordering::Relaxed);\n+    ///         });\n+    ///     }\n+    /// });\n+    /// for p in some_ptrs {\n+    ///     assert!(!p.is_null());\n+    ///     let name = unsafe { Box::from_raw(p) };\n+    ///     println!(\"Hello, {name}!\");\n+    /// }\n+    /// ```\n+    #[inline]\n+    #[cfg(target_has_atomic_equal_alignment = \"ptr\")]\n+    #[unstable(feature = \"atomic_from_mut\", issue = \"76314\")]\n+    pub fn from_mut_slice(v: &mut [*mut T]) -> &mut [Self] {\n+        // SAFETY:\n+        //  - the mutable reference guarantees unique ownership.\n+        //  - the alignment of `*mut T` and `Self` is the same on all platforms\n+        //    supported by rust, as verified above.\n+        unsafe { &mut *(v as *mut [*mut T] as *mut [Self]) }\n+    }\n+\n     /// Consumes the atomic and returns the contained value.\n     ///\n     /// This is safe because passing `self` by value guarantees that no other threads are\n@@ -1459,6 +1521,38 @@ macro_rules! atomic_int {\n                 unsafe { &mut *(v as *mut $int_type as *mut Self) }\n             }\n \n+            #[doc = concat!(\"Get atomic access to a `&mut [\", stringify!($int_type), \"]` slice.\")]\n+            ///\n+            /// # Examples\n+            ///\n+            /// ```\n+            /// #![feature(atomic_from_mut, scoped_threads)]\n+            #[doc = concat!($extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\")]\n+            ///\n+            /// let mut some_ints = [0; 10];\n+            #[doc = concat!(\"let a = &*\", stringify!($atomic_type), \"::from_mut_slice(&mut some_ints);\")]\n+            /// std::thread::scope(|s| {\n+            ///     for i in 0..a.len() {\n+            ///         s.spawn(move |_| a[i].store(i as _, Ordering::Relaxed));\n+            ///     }\n+            /// });\n+            /// for (i, n) in some_ints.into_iter().enumerate() {\n+            ///     assert_eq!(i, n as usize);\n+            /// }\n+            /// ```\n+            #[inline]\n+            #[$cfg_align]\n+            #[unstable(feature = \"atomic_from_mut\", issue = \"76314\")]\n+            pub fn from_mut_slice(v: &mut [$int_type]) -> &mut [Self] {\n+                use crate::mem::align_of;\n+                let [] = [(); align_of::<Self>() - align_of::<$int_type>()];\n+                // SAFETY:\n+                //  - the mutable reference guarantees unique ownership.\n+                //  - the alignment of `$int_type` and `Self` is the\n+                //    same, as promised by $cfg_align and verified above.\n+                unsafe { &mut *(v as *mut [$int_type] as *mut [Self]) }\n+            }\n+\n             /// Consumes the atomic and returns the contained value.\n             ///\n             /// This is safe because passing `self` by value guarantees that no other threads are"}]}