{"sha": "709b7515e744cdf242ab53806414aa295ea6977f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwOWI3NTE1ZTc0NGNkZjI0MmFiNTM4MDY0MTRhYTI5NWVhNjk3N2Y=", "commit": {"author": {"name": "Taylor Cramer", "email": "cramertj@google.com", "date": "2018-11-15T23:49:16Z"}, "committer": {"name": "Taylor Cramer", "email": "cramertj@google.com", "date": "2018-12-12T20:23:58Z"}, "message": "Rename Pinned marker type to PhantomPinned", "tree": {"sha": "66b387fe2d361342c10098e511a7da1ff63ecc5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66b387fe2d361342c10098e511a7da1ff63ecc5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/709b7515e744cdf242ab53806414aa295ea6977f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/709b7515e744cdf242ab53806414aa295ea6977f", "html_url": "https://github.com/rust-lang/rust/commit/709b7515e744cdf242ab53806414aa295ea6977f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/709b7515e744cdf242ab53806414aa295ea6977f/comments", "author": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94856a7553e6a99eb99f2ee8022df7cb9bcbb2bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/94856a7553e6a99eb99f2ee8022df7cb9bcbb2bd", "html_url": "https://github.com/rust-lang/rust/commit/94856a7553e6a99eb99f2ee8022df7cb9bcbb2bd"}], "stats": {"total": 19, "additions": 11, "deletions": 8}, "files": [{"sha": "d3d16127ed5fe117a42b78e8982cd2122defaa89", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/709b7515e744cdf242ab53806414aa295ea6977f/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709b7515e744cdf242ab53806414aa295ea6977f/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=709b7515e744cdf242ab53806414aa295ea6977f", "patch": "@@ -640,15 +640,15 @@ unsafe impl<T: ?Sized> Freeze for &mut T {}\n #[unstable(feature = \"pin\", issue = \"49150\")]\n pub auto trait Unpin {}\n \n-/// A type which does not implement `Unpin`.\n+/// A marker type which does not implement `Unpin`.\n ///\n-/// If a type contains a `Pinned`, it will not implement `Unpin` by default.\n+/// If a type contains a `PhantomPinned`, it will not implement `Unpin` by default.\n #[unstable(feature = \"pin\", issue = \"49150\")]\n #[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]\n-pub struct Pinned;\n+pub struct PhantomPinned;\n \n #[unstable(feature = \"pin\", issue = \"49150\")]\n-impl !Unpin for Pinned {}\n+impl !Unpin for PhantomPinned {}\n \n #[unstable(feature = \"pin\", issue = \"49150\")]\n impl<'a, T: ?Sized + 'a> Unpin for &'a T {}"}, {"sha": "0ad6e8c7c1c7dcc5d7c1eda0a3a0ab11e62b72eb", "filename": "src/libcore/pin.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/709b7515e744cdf242ab53806414aa295ea6977f/src%2Flibcore%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/709b7515e744cdf242ab53806414aa295ea6977f/src%2Flibcore%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpin.rs?ref=709b7515e744cdf242ab53806414aa295ea6977f", "patch": "@@ -19,7 +19,10 @@\n //! Since data can be moved out of `&mut` and `Box` with functions such as [`swap`],\n //! changing the location of the underlying data, [`Pin`] prohibits accessing the\n //! underlying pointer type (the `&mut` or `Box`) directly, and provides its own set of\n-//! APIs for accessing and using the value.\n+//! APIs for accessing and using the value. [`Pin`] also guarantees that no other\n+//! functions will move the pointed-to value. This allows for the creation of\n+//! self-references and other special behaviors that are only possible for unmovable\n+//! values.\n //!\n //! However, these restrictions are usually not necessary. Many types are always freely\n //! movable. These types implement the [`Unpin`] auto-trait, which nullifies the affect\n@@ -43,7 +46,7 @@\n //! #![feature(pin)]\n //!\n //! use std::pin::Pin;\n-//! use std::marker::Pinned;\n+//! use std::marker::PhantomPinned;\n //! use std::ptr::NonNull;\n //!\n //! // This is a self-referential struct since the slice field points to the data field.\n@@ -54,7 +57,7 @@\n //! struct Unmovable {\n //!     data: String,\n //!     slice: NonNull<String>,\n-//!     _pin: Pinned,\n+//!     _pin: PhantomPinned,\n //! }\n //!\n //! impl Unmovable {\n@@ -67,7 +70,7 @@\n //!             // we only create the pointer once the data is in place\n //!             // otherwise it will have already moved before we even started\n //!             slice: NonNull::dangling(),\n-//!             _pin: Pinned,\n+//!             _pin: PhantomPinned,\n //!         };\n //!         let mut boxed = Box::pinned(res);\n //!"}]}