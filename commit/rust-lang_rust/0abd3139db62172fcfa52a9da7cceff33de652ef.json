{"sha": "0abd3139db62172fcfa52a9da7cceff33de652ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhYmQzMTM5ZGI2MjE3MmZjZmE1MmE5ZGE3Y2NlZmYzM2RlNjUyZWY=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-29T10:50:58Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-29T16:36:01Z"}, "message": "rustc_platform_intrinsics: remove unused rustc dependency.", "tree": {"sha": "a162159029e7f39852f696bb425371fd4ef6a38c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a162159029e7f39852f696bb425371fd4ef6a38c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0abd3139db62172fcfa52a9da7cceff33de652ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0abd3139db62172fcfa52a9da7cceff33de652ef", "html_url": "https://github.com/rust-lang/rust/commit/0abd3139db62172fcfa52a9da7cceff33de652ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0abd3139db62172fcfa52a9da7cceff33de652ef/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "352b44d1fa9ec2c969d7c8360106e6838233bcba", "url": "https://api.github.com/repos/rust-lang/rust/commits/352b44d1fa9ec2c969d7c8360106e6838233bcba", "html_url": "https://github.com/rust-lang/rust/commit/352b44d1fa9ec2c969d7c8360106e6838233bcba"}], "stats": {"total": 35, "additions": 12, "deletions": 23}, "files": [{"sha": "9b8e145f22a18c1e3c0e6176a91028c5fa9115b7", "filename": "mk/crates.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0abd3139db62172fcfa52a9da7cceff33de652ef/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0abd3139db62172fcfa52a9da7cceff33de652ef/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=0abd3139db62172fcfa52a9da7cceff33de652ef", "patch": "@@ -110,7 +110,7 @@ DEPS_rustc_metadata := rustc rustc_front syntax rbml rustc_const_eval\n DEPS_rustc_passes := syntax rustc core rustc_front\n DEPS_rustc_mir := rustc rustc_front syntax rustc_const_eval\n DEPS_rustc_resolve := arena rustc rustc_front log syntax\n-DEPS_rustc_platform_intrinsics := rustc rustc_llvm\n+DEPS_rustc_platform_intrinsics := std\n DEPS_rustc_plugin := rustc rustc_metadata syntax rustc_mir\n DEPS_rustc_privacy := rustc rustc_front log syntax\n DEPS_rustc_trans := arena flate getopts graphviz libc rustc rustc_back rustc_mir \\"}, {"sha": "a21194962f9b061663203c969ce6c115b4bc097b", "filename": "src/etc/platform-intrinsics/generator.py", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0abd3139db62172fcfa52a9da7cceff33de652ef/src%2Fetc%2Fplatform-intrinsics%2Fgenerator.py", "raw_url": "https://github.com/rust-lang/rust/raw/0abd3139db62172fcfa52a9da7cceff33de652ef/src%2Fetc%2Fplatform-intrinsics%2Fgenerator.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fgenerator.py?ref=0abd3139db62172fcfa52a9da7cceff33de652ef", "patch": "@@ -759,12 +759,11 @@ def open(self, platform):\n \n use {{Intrinsic, Type}};\n use IntrinsicDef::Named;\n-use rustc::middle::ty::TyCtxt;\n \n // The default inlining settings trigger a pathological behaviour in\n // LLVM, which causes makes compilation very slow. See #28273.\n #[inline(never)]\n-pub fn find<'tcx>(_tcx: &TyCtxt<'tcx>, name: &str) -> Option<Intrinsic> {{\n+pub fn find(name: &str) -> Option<Intrinsic> {{\n     if !name.starts_with(\"{0}\") {{ return None }}\n     Some(match &name[\"{0}\".len()..] {{'''.format(platform.intrinsic_prefix())\n "}, {"sha": "92f37f974efdccf5ea0623e692149da48779a95c", "filename": "src/librustc_platform_intrinsics/Cargo.toml", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0abd3139db62172fcfa52a9da7cceff33de652ef/src%2Flibrustc_platform_intrinsics%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0abd3139db62172fcfa52a9da7cceff33de652ef/src%2Flibrustc_platform_intrinsics%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2FCargo.toml?ref=0abd3139db62172fcfa52a9da7cceff33de652ef", "patch": "@@ -7,6 +7,3 @@ version = \"0.0.0\"\n name = \"rustc_platform_intrinsics\"\n path = \"lib.rs\"\n crate-type = [\"dylib\"]\n-\n-[dependencies]\n-rustc = { path = \"../librustc\" }"}, {"sha": "0fb8513e138f3d9ee8fde83369bb4acbce4a0280", "filename": "src/librustc_platform_intrinsics/aarch64.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0abd3139db62172fcfa52a9da7cceff33de652ef/src%2Flibrustc_platform_intrinsics%2Faarch64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0abd3139db62172fcfa52a9da7cceff33de652ef/src%2Flibrustc_platform_intrinsics%2Faarch64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Faarch64.rs?ref=0abd3139db62172fcfa52a9da7cceff33de652ef", "patch": "@@ -15,12 +15,11 @@\n \n use {Intrinsic, Type};\n use IntrinsicDef::Named;\n-use rustc::ty::TyCtxt;\n \n // The default inlining settings trigger a pathological behaviour in\n // LLVM, which causes makes compilation very slow. See #28273.\n #[inline(never)]\n-pub fn find<'tcx>(_tcx: &TyCtxt<'tcx>, name: &str) -> Option<Intrinsic> {\n+pub fn find(name: &str) -> Option<Intrinsic> {\n     if !name.starts_with(\"aarch64_v\") { return None }\n     Some(match &name[\"aarch64_v\".len()..] {\n         \"hadd_s8\" => Intrinsic {"}, {"sha": "834528aaaa314ccf0f3c5eb697e65bbc431c11d7", "filename": "src/librustc_platform_intrinsics/arm.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0abd3139db62172fcfa52a9da7cceff33de652ef/src%2Flibrustc_platform_intrinsics%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0abd3139db62172fcfa52a9da7cceff33de652ef/src%2Flibrustc_platform_intrinsics%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Farm.rs?ref=0abd3139db62172fcfa52a9da7cceff33de652ef", "patch": "@@ -15,12 +15,11 @@\n \n use {Intrinsic, Type};\n use IntrinsicDef::Named;\n-use rustc::ty::TyCtxt;\n \n // The default inlining settings trigger a pathological behaviour in\n // LLVM, which causes makes compilation very slow. See #28273.\n #[inline(never)]\n-pub fn find<'tcx>(_tcx: &TyCtxt<'tcx>, name: &str) -> Option<Intrinsic> {\n+pub fn find(name: &str) -> Option<Intrinsic> {\n     if !name.starts_with(\"arm_v\") { return None }\n     Some(match &name[\"arm_v\".len()..] {\n         \"hadd_s8\" => Intrinsic {"}, {"sha": "6fe1f0c2b9cc6ca08d83d58424c0e2ed8f2baace", "filename": "src/librustc_platform_intrinsics/lib.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0abd3139db62172fcfa52a9da7cceff33de652ef/src%2Flibrustc_platform_intrinsics%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0abd3139db62172fcfa52a9da7cceff33de652ef/src%2Flibrustc_platform_intrinsics%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Flib.rs?ref=0abd3139db62172fcfa52a9da7cceff33de652ef", "patch": "@@ -12,14 +12,10 @@\n #![unstable(feature = \"rustc_private\", issue = \"27812\")]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n-#![feature(staged_api, rustc_private)]\n+#![feature(staged_api)]\n #![cfg_attr(not(stage0), deny(warnings))]\n #![allow(bad_style)]\n \n-extern crate rustc;\n-\n-use rustc::ty::TyCtxt;\n-\n pub struct Intrinsic {\n     pub inputs: &'static [&'static Type],\n     pub output: &'static Type,\n@@ -101,13 +97,13 @@ mod arm;\n mod aarch64;\n \n impl Intrinsic {\n-    pub fn find<'tcx>(tcx: &TyCtxt<'tcx>, name: &str) -> Option<Intrinsic> {\n+    pub fn find(name: &str) -> Option<Intrinsic> {\n         if name.starts_with(\"x86_\") {\n-            x86::find(tcx, name)\n+            x86::find(name)\n         } else if name.starts_with(\"arm_\") {\n-            arm::find(tcx, name)\n+            arm::find(name)\n         } else if name.starts_with(\"aarch64_\") {\n-            aarch64::find(tcx, name)\n+            aarch64::find(name)\n         } else {\n             None\n         }"}, {"sha": "54e2cb929b87a38ebab56d1aa1285941ee3199b5", "filename": "src/librustc_platform_intrinsics/x86.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0abd3139db62172fcfa52a9da7cceff33de652ef/src%2Flibrustc_platform_intrinsics%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0abd3139db62172fcfa52a9da7cceff33de652ef/src%2Flibrustc_platform_intrinsics%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Fx86.rs?ref=0abd3139db62172fcfa52a9da7cceff33de652ef", "patch": "@@ -15,12 +15,11 @@\n \n use {Intrinsic, Type};\n use IntrinsicDef::Named;\n-use rustc::ty::TyCtxt;\n \n // The default inlining settings trigger a pathological behaviour in\n // LLVM, which causes makes compilation very slow. See #28273.\n #[inline(never)]\n-pub fn find<'tcx>(_tcx: &TyCtxt<'tcx>, name: &str) -> Option<Intrinsic> {\n+pub fn find(name: &str) -> Option<Intrinsic> {\n     if !name.starts_with(\"x86_mm\") { return None }\n     Some(match &name[\"x86_mm\".len()..] {\n         \"_movemask_ps\" => Intrinsic {"}, {"sha": "130a864f5e6ec7e129e1a2743e8a3ea06a8b45a3", "filename": "src/librustc_trans/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0abd3139db62172fcfa52a9da7cceff33de652ef/src%2Flibrustc_trans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0abd3139db62172fcfa52a9da7cceff33de652ef/src%2Flibrustc_trans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fintrinsic.rs?ref=0abd3139db62172fcfa52a9da7cceff33de652ef", "patch": "@@ -818,7 +818,7 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n         }\n \n         (_, _) => {\n-            let intr = match Intrinsic::find(tcx, &name) {\n+            let intr = match Intrinsic::find(&name) {\n                 Some(intr) => intr,\n                 None => unreachable!(\"unknown intrinsic '{}'\", name),\n             };"}, {"sha": "3c43e0d521743ce471cf3dcf1d018660399a3883", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0abd3139db62172fcfa52a9da7cceff33de652ef/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0abd3139db62172fcfa52a9da7cceff33de652ef/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=0abd3139db62172fcfa52a9da7cceff33de652ef", "patch": "@@ -360,7 +360,7 @@ pub fn check_platform_intrinsic_type(ccx: &CrateCtxt,\n             }\n         }\n         _ => {\n-            match intrinsics::Intrinsic::find(tcx, &name) {\n+            match intrinsics::Intrinsic::find(&name) {\n                 Some(intr) => {\n                     // this function is a platform specific intrinsic\n                     if i_n_tps != 0 {"}]}