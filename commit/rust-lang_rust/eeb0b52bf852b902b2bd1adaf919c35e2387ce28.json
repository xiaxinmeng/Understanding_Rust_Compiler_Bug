{"sha": "eeb0b52bf852b902b2bd1adaf919c35e2387ce28", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlYjBiNTJiZjg1MmI5MDJiMmJkMWFkYWY5MTljMzVlMjM4N2NlMjg=", "commit": {"author": {"name": "linux1", "email": "tmaloney@pdx.edu", "date": "2021-08-22T21:26:18Z"}, "committer": {"name": "linux1", "email": "tmaloney@pdx.edu", "date": "2021-08-22T21:55:03Z"}, "message": "Feat: further testing & support for i64 general register use", "tree": {"sha": "8e43229518b37c4a0b81fdf035a4b066821db223", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e43229518b37c4a0b81fdf035a4b066821db223"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eeb0b52bf852b902b2bd1adaf919c35e2387ce28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eeb0b52bf852b902b2bd1adaf919c35e2387ce28", "html_url": "https://github.com/rust-lang/rust/commit/eeb0b52bf852b902b2bd1adaf919c35e2387ce28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eeb0b52bf852b902b2bd1adaf919c35e2387ce28/comments", "author": {"login": "Sl1mb0", "id": 56142018, "node_id": "MDQ6VXNlcjU2MTQyMDE4", "avatar_url": "https://avatars.githubusercontent.com/u/56142018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sl1mb0", "html_url": "https://github.com/Sl1mb0", "followers_url": "https://api.github.com/users/Sl1mb0/followers", "following_url": "https://api.github.com/users/Sl1mb0/following{/other_user}", "gists_url": "https://api.github.com/users/Sl1mb0/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sl1mb0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sl1mb0/subscriptions", "organizations_url": "https://api.github.com/users/Sl1mb0/orgs", "repos_url": "https://api.github.com/users/Sl1mb0/repos", "events_url": "https://api.github.com/users/Sl1mb0/events{/privacy}", "received_events_url": "https://api.github.com/users/Sl1mb0/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Sl1mb0", "id": 56142018, "node_id": "MDQ6VXNlcjU2MTQyMDE4", "avatar_url": "https://avatars.githubusercontent.com/u/56142018?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sl1mb0", "html_url": "https://github.com/Sl1mb0", "followers_url": "https://api.github.com/users/Sl1mb0/followers", "following_url": "https://api.github.com/users/Sl1mb0/following{/other_user}", "gists_url": "https://api.github.com/users/Sl1mb0/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sl1mb0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sl1mb0/subscriptions", "organizations_url": "https://api.github.com/users/Sl1mb0/orgs", "repos_url": "https://api.github.com/users/Sl1mb0/repos", "events_url": "https://api.github.com/users/Sl1mb0/events{/privacy}", "received_events_url": "https://api.github.com/users/Sl1mb0/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66e95b17ecfc93e39b1846436a86f0e924ab30b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/66e95b17ecfc93e39b1846436a86f0e924ab30b3", "html_url": "https://github.com/rust-lang/rust/commit/66e95b17ecfc93e39b1846436a86f0e924ab30b3"}], "stats": {"total": 54, "additions": 47, "deletions": 7}, "files": [{"sha": "dbf4168e4a80f296ddad885fe4f2b92de2d94c0e", "filename": "compiler/rustc_target/src/asm/s390x.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eeb0b52bf852b902b2bd1adaf919c35e2387ce28/compiler%2Frustc_target%2Fsrc%2Fasm%2Fs390x.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eeb0b52bf852b902b2bd1adaf919c35e2387ce28/compiler%2Frustc_target%2Fsrc%2Fasm%2Fs390x.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fs390x.rs?ref=eeb0b52bf852b902b2bd1adaf919c35e2387ce28", "patch": "@@ -35,7 +35,7 @@ impl S390xInlineAsmRegClass {\n         arch: InlineAsmArch,\n     ) -> &'static [(InlineAsmType, Option<&'static str>)] {\n         match (self, arch) {\n-            (Self::reg, _) => types! { _: I8, I16, I32; },\n+            (Self::reg, _) => types! { _: I8, I16, I32, I64; },\n             (Self::freg, _) => types! { _: F32, F64; },\n         }\n     }"}, {"sha": "692193158405ffed929682d7345e9b3b460a3d89", "filename": "src/test/assembly/asm/s390x-types.rs", "status": "modified", "additions": 46, "deletions": 6, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/eeb0b52bf852b902b2bd1adaf919c35e2387ce28/src%2Ftest%2Fassembly%2Fasm%2Fs390x-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eeb0b52bf852b902b2bd1adaf919c35e2387ce28/src%2Ftest%2Fassembly%2Fasm%2Fs390x-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fs390x-types.rs?ref=eeb0b52bf852b902b2bd1adaf919c35e2387ce28", "patch": "@@ -60,7 +60,7 @@ macro_rules! check { ($func:ident, $ty:ty, $class:ident, $mov:literal) => {\n };}\n \n macro_rules! check_reg { ($func:ident, $ty:ty, $reg:tt, $mov:literal) => {\n-    \n+    #[no_mangle]    \n     pub unsafe fn $func(x: $ty) -> $ty {\n         dont_merge(stringify!(func));\n \n@@ -70,17 +70,57 @@ macro_rules! check_reg { ($func:ident, $ty:ty, $reg:tt, $mov:literal) => {\n     }\n };}\n \n-// systemz-LABEL: sym_fn_32:\n-// systemz: #APP\n-// systemz: brasl %r14, extern_func@PLT\n-// systemz: #NO_APP\n+// CHECK-LABEL: sym_fn_32:\n+// CHECK: #APP\n+// CHECK: brasl %r14, extern_func\n+// CHECK: #NO_APP\n #[cfg(s390x)]\n+#[no_mangle]\n pub unsafe fn sym_fn_32() {\n     asm!(\"brasl %r14, {}\", sym extern_func);\n }\n \n+// CHECK-LABEL: sym_static:\n+// CHECK: #APP\n+// CHECK: brasl %r14, extern_static\n+// CHECK: #NO_APP\n+#[no_mangle]\n+pub unsafe fn sym_static() {\n+    asm!(\"brasl %r14, {}\", sym extern_static);\n+}\n+\n+// CHECK-LABEL: reg_i8:\n+// CHECK: #APP\n+// CHECK: lgr %r{{[0-9]+}}, %r{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(reg_i8, i8, reg, \"lgr\");\n+\n+// CHECK-LABEL: reg_i16:\n+// CHECK: #APP\n+// CHECK: lgr %r{{[0-9]+}}, %r{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(reg_i16, i16, reg, \"lgr\");\n+\n // CHECK-LABEL: reg_i32:\n // CHECK: #APP\n-// CHECK: lgr r{{[0-15]+}}, r{{[0-15]+}}\n+// CHECK: lgr %r{{[0-9]+}}, %r{{[0-9]+}}\n // CHECK: #NO_APP\n check!(reg_i32, i32, reg, \"lgr\");\n+\n+// CHECK-LABEL: reg_i64:\n+// CHECK: #APP\n+// CHECK: lgr %r{{[0-9]+}}, %r{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(reg_i64, i64, reg, \"lgr\");\n+\n+// CHECK-LABEL: reg_f32:\n+// CHECK: #APP\n+// CHECK: ler %f{{[0-9]+}}, %f{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(reg_f32, f32, freg, \"ler\");\n+\n+// CHECK-LABEL: reg_f64:\n+// CHECK: #APP\n+// CHECK: ldr %f{{[0-9]+}}, %f{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(reg_f64, f64, freg, \"ldr\");"}]}