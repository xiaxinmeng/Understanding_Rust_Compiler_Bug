{"sha": "b44b033bf1a8f74f190854048616ca90db21319e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0NGIwMzNiZjFhOGY3NGYxOTA4NTQwNDg2MTZjYTkwZGIyMTMxOWU=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-01-25T20:58:10Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-02-08T09:53:09Z"}, "message": "get differences", "tree": {"sha": "948372274c7051a4cbb11b2322aaba71d52db588", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/948372274c7051a4cbb11b2322aaba71d52db588"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b44b033bf1a8f74f190854048616ca90db21319e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b44b033bf1a8f74f190854048616ca90db21319e", "html_url": "https://github.com/rust-lang/rust/commit/b44b033bf1a8f74f190854048616ca90db21319e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b44b033bf1a8f74f190854048616ca90db21319e/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94ad4e1d38d4f3ac0f3e532b5cd07f0e15025c87", "url": "https://api.github.com/repos/rust-lang/rust/commits/94ad4e1d38d4f3ac0f3e532b5cd07f0e15025c87", "html_url": "https://github.com/rust-lang/rust/commit/94ad4e1d38d4f3ac0f3e532b5cd07f0e15025c87"}], "stats": {"total": 53, "additions": 43, "deletions": 10}, "files": [{"sha": "613ac67f03bf56dd8a4eee14d96fd7c7bcec6378", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b44b033bf1a8f74f190854048616ca90db21319e/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b44b033bf1a8f74f190854048616ca90db21319e/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=b44b033bf1a8f74f190854048616ca90db21319e", "patch": "@@ -330,9 +330,11 @@ pub fn main_args(args: &[String]) -> isize {\n         println!(\"rustdoc: [theme-checker] Starting tests!\");\n         for theme_file in to_check.iter() {\n             print!(\" - Checking \\\"{}\\\"...\", theme_file);\n-            if !theme::test_theme_against(theme_file, &pathes) {\n+            let differences = theme::test_theme_against(theme_file, &pathes);\n+            if !differences.is_empty() {\n                 eprintln!(\" FAILED\");\n                 errors += 1;\n+                eprintln!(\"{}\", differences.join(\"\\n\"));\n             } else {\n                 println!(\" OK\");\n             }"}, {"sha": "933749cfcf9baa9624ccceef35ad3d6e9d82e01b", "filename": "src/librustdoc/theme.rs", "status": "modified", "additions": 40, "deletions": 9, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/b44b033bf1a8f74f190854048616ca90db21319e/src%2Flibrustdoc%2Ftheme.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b44b033bf1a8f74f190854048616ca90db21319e/src%2Flibrustdoc%2Ftheme.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftheme.rs?ref=b44b033bf1a8f74f190854048616ca90db21319e", "patch": "@@ -14,13 +14,13 @@ use std::hash::{Hash, Hasher};\n use std::io::Read;\n use std::path::Path;\n \n-macro_rules! try_false {\n-    ($e:expr) => ({\n+macro_rules! try_something {\n+    ($e:expr, $out:expr) => ({\n         match $e {\n             Ok(c) => c,\n             Err(e) => {\n                 eprintln!(\"rustdoc: got an error: {}\", e);\n-                return false;\n+                return $out;\n             }\n         }\n     })\n@@ -215,18 +215,49 @@ pub fn load_css_pathes(v: &[u8]) -> CssPath {\n     parent\n }\n \n-pub fn test_theme_against<P: AsRef<Path>>(f: &P, against: &CssPath) -> bool {\n-    let mut file = try_false!(File::open(f));\n+fn get_differences(against: &CssPath, other: &CssPath, v: &mut Vec<String>) {\n+    if against.name != other.name {\n+        return\n+    } else {\n+        for child in &against.children {\n+            let mut found = false;\n+            let mut found_working = false;\n+            let mut tmp = Vec::new();\n+\n+            for other_child in &other.children {\n+                if child.name == other_child.name {\n+                    if child != other_child {\n+                        get_differences(child, other_child, &mut tmp);\n+                    } else {\n+                        found_working = true;\n+                    }\n+                    found = true;\n+                    break\n+                }\n+            }\n+            if found == false {\n+                v.push(format!(\"  Missing \\\"{}\\\" rule\", child.name));\n+            } else if found_working == false {\n+                v.extend(tmp.iter().cloned());\n+            }\n+        }\n+    }\n+}\n+\n+pub fn test_theme_against<P: AsRef<Path>>(f: &P, against: &CssPath) -> Vec<String> {\n+    let mut file = try_something!(File::open(f), Vec::new());\n     let mut data = Vec::with_capacity(1000);\n \n-    try_false!(file.read_to_end(&mut data));\n+    try_something!(file.read_to_end(&mut data), Vec::new());\n     let pathes = load_css_pathes(&data);\n     println!(\"========= {:?}\", pathes);\n     println!(\"========= {:?}\", against);\n-    pathes == *against\n+    let mut ret = Vec::new();\n+    get_differences(against, &pathes, &mut ret);\n+    ret\n }\n \n-#[test]\n+/*#[test]\n fn test_comments_in_rules() {\n     let text = r#\"\n rule a {}\n@@ -255,4 +286,4 @@ you like things like \"{}\" in there? :)\n */\n end {}\n \"#;\n-}\n\\ No newline at end of file\n+}*/"}]}