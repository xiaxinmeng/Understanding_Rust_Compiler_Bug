{"sha": "72176cf96cb79a0ebf62972b76dbe68c933bef4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyMTc2Y2Y5NmNiNzlhMGViZjYyOTcyYjc2ZGJlNjhjOTMzYmVmNGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-06T14:50:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-06T14:50:14Z"}, "message": "Auto merge of #47141 - alexcrichton:bump-bootstrap, r=alexcrichton\n\nBump to 1.25.0\n\n* Bump the release version to 1.25\n* Bump the bootstrap compiler to the recent beta\n* Allow using unstable rustdoc features on beta - this fix has been applied to\n  the beta branch but needed to go to the master branch as well.", "tree": {"sha": "700594b27355c4c9c7a708d9a1e16c9c0ff90293", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/700594b27355c4c9c7a708d9a1e16c9c0ff90293"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72176cf96cb79a0ebf62972b76dbe68c933bef4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72176cf96cb79a0ebf62972b76dbe68c933bef4d", "html_url": "https://github.com/rust-lang/rust/commit/72176cf96cb79a0ebf62972b76dbe68c933bef4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72176cf96cb79a0ebf62972b76dbe68c933bef4d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9a03d9bfb0e82322439fe6c252ebd4ba6f23d98", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9a03d9bfb0e82322439fe6c252ebd4ba6f23d98", "html_url": "https://github.com/rust-lang/rust/commit/a9a03d9bfb0e82322439fe6c252ebd4ba6f23d98"}, {"sha": "fcdca7f2da86111704e54e932f3e5ffa31d70366", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcdca7f2da86111704e54e932f3e5ffa31d70366", "html_url": "https://github.com/rust-lang/rust/commit/fcdca7f2da86111704e54e932f3e5ffa31d70366"}], "stats": {"total": 108, "additions": 46, "deletions": 62}, "files": [{"sha": "ce30d1f4cec42a050b21e567cc7f88ce98225c62", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/72176cf96cb79a0ebf62972b76dbe68c933bef4d/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72176cf96cb79a0ebf62972b76dbe68c933bef4d/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=72176cf96cb79a0ebf62972b76dbe68c933bef4d", "patch": "@@ -419,7 +419,8 @@ impl<'a> Builder<'a> {\n            .env(\"RUSTC_LIBDIR\", self.sysroot_libdir(compiler, self.build.build))\n            .env(\"CFG_RELEASE_CHANNEL\", &self.build.config.channel)\n            .env(\"RUSTDOC_REAL\", self.rustdoc(host))\n-           .env(\"RUSTDOC_CRATE_VERSION\", self.build.rust_version());\n+           .env(\"RUSTDOC_CRATE_VERSION\", self.build.rust_version())\n+           .env(\"RUSTC_BOOTSTRAP\", \"1\");\n         if let Some(linker) = self.build.linker(host) {\n             cmd.env(\"RUSTC_TARGET_LINKER\", linker);\n         }\n@@ -483,8 +484,8 @@ impl<'a> Builder<'a> {\n              } else {\n                  PathBuf::from(\"/path/to/nowhere/rustdoc/not/required\")\n              })\n-             .env(\"TEST_MIRI\", self.config.test_miri.to_string());\n-\n+             .env(\"TEST_MIRI\", self.config.test_miri.to_string())\n+             .env(\"RUSTC_ERROR_METADATA_DST\", self.extended_error_dir());\n         if let Some(n) = self.config.rust_codegen_units {\n             cargo.env(\"RUSTC_CODEGEN_UNITS\", n.to_string());\n         }"}, {"sha": "4e3f3a00b15eee4b1c975207e789a761583941bf", "filename": "src/bootstrap/channel.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72176cf96cb79a0ebf62972b76dbe68c933bef4d/src%2Fbootstrap%2Fchannel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72176cf96cb79a0ebf62972b76dbe68c933bef4d/src%2Fbootstrap%2Fchannel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fchannel.rs?ref=72176cf96cb79a0ebf62972b76dbe68c933bef4d", "patch": "@@ -24,7 +24,7 @@ use Build;\n use config::Config;\n \n // The version number\n-pub const CFG_RELEASE_NUM: &str = \"1.24.0\";\n+pub const CFG_RELEASE_NUM: &str = \"1.25.0\";\n \n // An optional number to put after the label, e.g. '.2' -> '-beta.2'\n // Be sure to make this starts with a dot to conform to semver pre-release"}, {"sha": "cc9be3cec34762fd073e998cbcd7b20c85e441e4", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72176cf96cb79a0ebf62972b76dbe68c933bef4d/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72176cf96cb79a0ebf62972b76dbe68c933bef4d/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=72176cf96cb79a0ebf62972b76dbe68c933bef4d", "patch": "@@ -975,7 +975,8 @@ impl Step for ErrorIndex {\n         build.run(builder.tool_cmd(Tool::ErrorIndex)\n                     .arg(\"markdown\")\n                     .arg(&output)\n-                    .env(\"CFG_BUILD\", &build.build));\n+                    .env(\"CFG_BUILD\", &build.build)\n+                    .env(\"RUSTC_ERROR_METADATA_DST\", build.extended_error_dir()));\n \n         markdown_test(builder, compiler, &output);\n     }"}, {"sha": "832da24c994db784d0d7f4015523c0b98dcd0fdc", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72176cf96cb79a0ebf62972b76dbe68c933bef4d/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72176cf96cb79a0ebf62972b76dbe68c933bef4d/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=72176cf96cb79a0ebf62972b76dbe68c933bef4d", "patch": "@@ -671,7 +671,8 @@ impl Step for ErrorIndex {\n         index.arg(out.join(\"error-index.html\"));\n \n         // FIXME: shouldn't have to pass this env var\n-        index.env(\"CFG_BUILD\", &build.build);\n+        index.env(\"CFG_BUILD\", &build.build)\n+             .env(\"RUSTC_ERROR_METADATA_DST\", build.extended_error_dir());\n \n         build.run(&mut index);\n     }"}, {"sha": "948bf29bbacc3b2d6a30b5d489ac124269751a4a", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/72176cf96cb79a0ebf62972b76dbe68c933bef4d/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72176cf96cb79a0ebf62972b76dbe68c933bef4d/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=72176cf96cb79a0ebf62972b76dbe68c933bef4d", "patch": "@@ -718,6 +718,11 @@ impl Build {\n         self.config.python.as_ref().unwrap()\n     }\n \n+    /// Temporary directory that extended error information is emitted to.\n+    fn extended_error_dir(&self) -> PathBuf {\n+        self.out.join(\"tmp/extended-error-metadata\")\n+    }\n+\n     /// Tests whether the `compiler` compiling for `target` should be forced to\n     /// use a stage1 compiler instead.\n     ///"}, {"sha": "07941e588387ccfe11da9581838d562a9c137095", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72176cf96cb79a0ebf62972b76dbe68c933bef4d/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72176cf96cb79a0ebf62972b76dbe68c933bef4d/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=72176cf96cb79a0ebf62972b76dbe68c933bef4d", "patch": "@@ -315,7 +315,7 @@ pub fn symlink_dir(src: &Path, dest: &Path) -> io::Result<()> {\n             let mut data = [0u8; MAXIMUM_REPARSE_DATA_BUFFER_SIZE];\n             let db = data.as_mut_ptr()\n                             as *mut REPARSE_MOUNTPOINT_DATA_BUFFER;\n-            let buf = &mut (*db).ReparseTarget as *mut _;\n+            let buf = &mut (*db).ReparseTarget as *mut u16;\n             let mut i = 0;\n             // FIXME: this conversion is very hacky\n             let v = br\"\\??\\\";"}, {"sha": "7304ed6015cc9042f5e552df3244d45f105d932e", "filename": "src/ci/docker/x86_64-gnu-incremental/Dockerfile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72176cf96cb79a0ebf62972b76dbe68c933bef4d/src%2Fci%2Fdocker%2Fx86_64-gnu-incremental%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/72176cf96cb79a0ebf62972b76dbe68c933bef4d/src%2Fci%2Fdocker%2Fx86_64-gnu-incremental%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-incremental%2FDockerfile?ref=72176cf96cb79a0ebf62972b76dbe68c933bef4d", "patch": "@@ -19,3 +19,4 @@ RUN sh /scripts/sccache.sh\n ENV RUST_CONFIGURE_ARGS --build=x86_64-unknown-linux-gnu\n ENV RUSTFLAGS -Zincremental=/tmp/rust-incr-cache\n ENV RUST_CHECK_TARGET check\n+ENV CARGO_INCREMENTAL 0"}, {"sha": "a611dc02469e8abc68f2ff67c171b4d6f4ea8c59", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72176cf96cb79a0ebf62972b76dbe68c933bef4d/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72176cf96cb79a0ebf62972b76dbe68c933bef4d/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=72176cf96cb79a0ebf62972b76dbe68c933bef4d", "patch": "@@ -1390,6 +1390,5 @@ extern \"rust-intrinsic\" {\n \n     /// Emits a `!nontemporal` store according to LLVM (see their docs).\n     /// Probably will never become stable.\n-    #[cfg(not(stage0))]\n     pub fn nontemporal_store<T>(ptr: *mut T, val: T);\n }"}, {"sha": "44f23c11b04c3f8f0af61bd8505e09df59e34ba0", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72176cf96cb79a0ebf62972b76dbe68c933bef4d/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72176cf96cb79a0ebf62972b76dbe68c933bef4d/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=72176cf96cb79a0ebf62972b76dbe68c933bef4d", "patch": "@@ -175,4 +175,5 @@ fn noop() {\n \n \n // Build the diagnostics array at the end so that the metadata includes error use sites.\n+#[cfg(not(stage0))] // remove after the next snapshot\n __build_diagnostic_array! { librustc, DIAGNOSTICS }"}, {"sha": "19fbbe10be9e079b833e17bdc749f5bd5ce364c1", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72176cf96cb79a0ebf62972b76dbe68c933bef4d/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72176cf96cb79a0ebf62972b76dbe68c933bef4d/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=72176cf96cb79a0ebf62972b76dbe68c933bef4d", "patch": "@@ -642,6 +642,7 @@ impl Session {\n             IncrCompSession::Active { ref session_directory, .. } => {\n                 session_directory.clone()\n             }\n+            IncrCompSession::InvalidBecauseOfErrors { .. } => return,\n             _ => bug!(\"Trying to invalidate IncrCompSession `{:?}`\",\n                       *incr_comp_session),\n         };"}, {"sha": "b4563f6cf2e7591b2c8eacf508c8f298b82689a7", "filename": "src/librustc_const_eval/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72176cf96cb79a0ebf62972b76dbe68c933bef4d/src%2Flibrustc_const_eval%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72176cf96cb79a0ebf62972b76dbe68c933bef4d/src%2Flibrustc_const_eval%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Flib.rs?ref=72176cf96cb79a0ebf62972b76dbe68c933bef4d", "patch": "@@ -56,4 +56,5 @@ pub fn provide(providers: &mut Providers) {\n }\n \n // Build the diagnostics array at the end so that the metadata includes error use sites.\n+#[cfg(not(stage0))] // remove after the next snapshot\n __build_diagnostic_array! { librustc_const_eval, DIAGNOSTICS }"}, {"sha": "223c602ccd34a85222dbdd9fb9fe574f8c90fdd4", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72176cf96cb79a0ebf62972b76dbe68c933bef4d/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72176cf96cb79a0ebf62972b76dbe68c933bef4d/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=72176cf96cb79a0ebf62972b76dbe68c933bef4d", "patch": "@@ -1268,6 +1268,14 @@ fn exit_on_err() -> ! {\n     panic!();\n }\n \n+#[cfg(stage0)]\n+pub fn diagnostics_registry() -> errors::registry::Registry {\n+    use errors::registry::Registry;\n+\n+    Registry::new(&[])\n+}\n+\n+#[cfg(not(stage0))]\n pub fn diagnostics_registry() -> errors::registry::Registry {\n     use errors::registry::Registry;\n "}, {"sha": "18117533c18f1479c4f4f2671b7ac2bfb066a33c", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72176cf96cb79a0ebf62972b76dbe68c933bef4d/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72176cf96cb79a0ebf62972b76dbe68c933bef4d/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=72176cf96cb79a0ebf62972b76dbe68c933bef4d", "patch": "@@ -58,4 +58,5 @@ pub mod cstore;\n pub mod dynamic_lib;\n pub mod locator;\n \n+#[cfg(not(stage0))] // remove after the next snapshot\n __build_diagnostic_array! { librustc_metadata, DIAGNOSTICS }"}, {"sha": "e9e7e688f1f072170625b30e28bd1bf5c7feebfa", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72176cf96cb79a0ebf62972b76dbe68c933bef4d/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72176cf96cb79a0ebf62972b76dbe68c933bef4d/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=72176cf96cb79a0ebf62972b76dbe68c933bef4d", "patch": "@@ -79,4 +79,5 @@ pub fn provide(providers: &mut Providers) {\n     providers.const_eval = interpret::const_eval_provider;\n }\n \n+#[cfg(not(stage0))] // remove after the next snapshot\n __build_diagnostic_array! { librustc_mir, DIAGNOSTICS }"}, {"sha": "754c3bbd07406f49746d92dc768dcfea84b72b9e", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72176cf96cb79a0ebf62972b76dbe68c933bef4d/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72176cf96cb79a0ebf62972b76dbe68c933bef4d/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=72176cf96cb79a0ebf62972b76dbe68c933bef4d", "patch": "@@ -45,6 +45,7 @@ mod mir_stats;\n pub mod no_asm;\n pub mod static_recursion;\n \n+#[cfg(not(stage0))] // remove after the next snapshot\n __build_diagnostic_array! { librustc_passes, DIAGNOSTICS }\n \n pub fn provide(providers: &mut Providers) {"}, {"sha": "38df5986ce2a90428911d4cda9216f5421da0e4c", "filename": "src/librustc_plugin/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72176cf96cb79a0ebf62972b76dbe68c933bef4d/src%2Flibrustc_plugin%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72176cf96cb79a0ebf62972b76dbe68c933bef4d/src%2Flibrustc_plugin%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Flib.rs?ref=72176cf96cb79a0ebf62972b76dbe68c933bef4d", "patch": "@@ -82,4 +82,5 @@ pub mod registry;\n pub mod load;\n pub mod build;\n \n+#[cfg(not(stage0))] // remove after the next snapshot\n __build_diagnostic_array! { librustc_plugin, DIAGNOSTICS }"}, {"sha": "d1dc54e7c3a8ec0ca622a050fe46b34af8939047", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72176cf96cb79a0ebf62972b76dbe68c933bef4d/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72176cf96cb79a0ebf62972b76dbe68c933bef4d/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=72176cf96cb79a0ebf62972b76dbe68c933bef4d", "patch": "@@ -1725,4 +1725,5 @@ fn privacy_access_levels<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     Rc::new(visitor.access_levels)\n }\n \n+#[cfg(not(stage0))] // remove after the next snapshot\n __build_diagnostic_array! { librustc_privacy, DIAGNOSTICS }"}, {"sha": "f7d1c88fbc8dc363dfdbc5603eeafe8b3dd6b70b", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72176cf96cb79a0ebf62972b76dbe68c933bef4d/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72176cf96cb79a0ebf62972b76dbe68c933bef4d/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=72176cf96cb79a0ebf62972b76dbe68c933bef4d", "patch": "@@ -4089,4 +4089,5 @@ pub enum MakeGlobMap {\n     No,\n }\n \n+#[cfg(not(stage0))] // remove after the next snapshot\n __build_diagnostic_array! { librustc_resolve, DIAGNOSTICS }"}, {"sha": "039dd94465d5b72d06c14e7fa43712d006b41441", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72176cf96cb79a0ebf62972b76dbe68c933bef4d/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72176cf96cb79a0ebf62972b76dbe68c933bef4d/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=72176cf96cb79a0ebf62972b76dbe68c933bef4d", "patch": "@@ -328,4 +328,5 @@ pub struct CrateInfo {\n     used_crates_dynamic: Vec<(CrateNum, LibSource)>,\n }\n \n+#[cfg(not(stage0))] // remove after the next snapshot\n __build_diagnostic_array! { librustc_trans, DIAGNOSTICS }"}, {"sha": "1dc98bc7a0072825a7ed32b1939f687774b3985b", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72176cf96cb79a0ebf62972b76dbe68c933bef4d/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72176cf96cb79a0ebf62972b76dbe68c933bef4d/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=72176cf96cb79a0ebf62972b76dbe68c933bef4d", "patch": "@@ -380,4 +380,5 @@ pub fn hir_trait_to_predicates<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, hir_trait:\n     (principal, projections)\n }\n \n+#[cfg(not(stage0))] // remove after the next snapshot\n __build_diagnostic_array! { librustc_typeck, DIAGNOSTICS }"}, {"sha": "af414d25b5f949053b33c98558bd4eea65239836", "filename": "src/libstd/rt.rs", "status": "modified", "additions": 2, "deletions": 47, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/72176cf96cb79a0ebf62972b76dbe68c933bef4d/src%2Flibstd%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72176cf96cb79a0ebf62972b76dbe68c933bef4d/src%2Flibstd%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt.rs?ref=72176cf96cb79a0ebf62972b76dbe68c933bef4d", "patch": "@@ -28,7 +28,7 @@ pub use panicking::{begin_panic, begin_panic_fmt, update_panic_count};\n \n // To reduce the generated code of the new `lang_start`, this function is doing\n // the real work.\n-#[cfg(not(any(test, stage0)))]\n+#[cfg(not(test))]\n fn lang_start_internal(main: &(Fn() -> i32 + Sync + ::panic::RefUnwindSafe),\n                        argc: isize, argv: *const *const u8) -> isize {\n     use panic;\n@@ -66,55 +66,10 @@ fn lang_start_internal(main: &(Fn() -> i32 + Sync + ::panic::RefUnwindSafe),\n     }\n }\n \n-#[cfg(not(any(test, stage0)))]\n+#[cfg(not(test))]\n #[lang = \"start\"]\n fn lang_start<T: ::termination::Termination + 'static>\n     (main: fn() -> T, argc: isize, argv: *const *const u8) -> isize\n {\n     lang_start_internal(&move || main().report(), argc, argv)\n }\n-\n-#[cfg(all(not(test), stage0))]\n-#[lang = \"start\"]\n-fn lang_start(main: fn(), argc: isize, argv: *const *const u8) -> isize {\n-    use panic;\n-    use sys;\n-    use sys_common;\n-    use sys_common::thread_info;\n-    use thread::Thread;\n-    #[cfg(not(feature = \"backtrace\"))]\n-    use mem;\n-\n-    sys::init();\n-\n-    let failed = unsafe {\n-        let main_guard = sys::thread::guard::init();\n-        sys::stack_overflow::init();\n-\n-        // Next, set up the current Thread with the guard information we just\n-        // created. Note that this isn't necessary in general for new threads,\n-        // but we just do this to name the main thread and to give it correct\n-        // info about the stack bounds.\n-        let thread = Thread::new(Some(\"main\".to_owned()));\n-        thread_info::set(main_guard, thread);\n-\n-        // Store our args if necessary in a squirreled away location\n-        sys::args::init(argc, argv);\n-\n-        // Let's run some code!\n-        #[cfg(feature = \"backtrace\")]\n-        let res = panic::catch_unwind(|| {\n-            ::sys_common::backtrace::__rust_begin_short_backtrace(main)\n-        });\n-        #[cfg(not(feature = \"backtrace\"))]\n-        let res = panic::catch_unwind(mem::transmute::<_, fn()>(main));\n-        sys_common::cleanup();\n-        res.is_err()\n-    };\n-\n-    if failed {\n-        101\n-    } else {\n-        0\n-    }\n-}"}, {"sha": "93a913bb540b7aa55340c7bc70461944e87c41b1", "filename": "src/libstd/termination.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72176cf96cb79a0ebf62972b76dbe68c933bef4d/src%2Flibstd%2Ftermination.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72176cf96cb79a0ebf62972b76dbe68c933bef4d/src%2Flibstd%2Ftermination.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftermination.rs?ref=72176cf96cb79a0ebf62972b76dbe68c933bef4d", "patch": "@@ -29,7 +29,7 @@ mod exit {\n ///\n /// The default implementations are returning `libc::EXIT_SUCCESS` to indicate\n /// a successful execution. In case of a failure, `libc::EXIT_FAILURE` is returned.\n-#[cfg_attr(not(any(stage0, test)), lang = \"termination\")]\n+#[cfg_attr(not(test), lang = \"termination\")]\n #[unstable(feature = \"termination_trait\", issue = \"43301\")]\n #[rustc_on_unimplemented =\n   \"`main` can only return types that implement {Termination}, not `{Self}`\"]"}, {"sha": "dc01a79190b3ad90eb884b20bf59a87f58e2c0e8", "filename": "src/libsyntax/diagnostics/metadata.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/72176cf96cb79a0ebf62972b76dbe68c933bef4d/src%2Flibsyntax%2Fdiagnostics%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72176cf96cb79a0ebf62972b76dbe68c933bef4d/src%2Flibsyntax%2Fdiagnostics%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fmetadata.rs?ref=72176cf96cb79a0ebf62972b76dbe68c933bef4d", "patch": "@@ -14,19 +14,17 @@\n //! currently always a crate name.\n \n use std::collections::BTreeMap;\n-use std::path::PathBuf;\n+use std::env;\n use std::fs::{remove_file, create_dir_all, File};\n use std::io::Write;\n+use std::path::PathBuf;\n use std::error::Error;\n use rustc_serialize::json::as_json;\n \n use syntax_pos::{Span, FileName};\n use ext::base::ExtCtxt;\n use diagnostics::plugin::{ErrorMap, ErrorInfo};\n \n-// Default metadata directory to use for extended error JSON.\n-const ERROR_METADATA_PREFIX: &'static str = \"tmp/extended-errors\";\n-\n /// JSON encodable/decodable version of `ErrorInfo`.\n #[derive(PartialEq, RustcDecodable, RustcEncodable)]\n pub struct ErrorMetadata {\n@@ -59,7 +57,10 @@ impl ErrorLocation {\n ///\n /// See `output_metadata`.\n pub fn get_metadata_dir(prefix: &str) -> PathBuf {\n-    PathBuf::from(ERROR_METADATA_PREFIX).join(prefix)\n+    env::var_os(\"RUSTC_ERROR_METADATA_DST\")\n+        .map(PathBuf::from)\n+        .expect(\"env var `RUSTC_ERROR_METADATA_DST` isn't set\")\n+        .join(prefix)\n }\n \n /// Map `name` to a path in the given directory: <directory>/<name>.json"}, {"sha": "d7f7ff554db4bbf6ab64adfaa35e38ea87fdfe0a", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72176cf96cb79a0ebf62972b76dbe68c933bef4d/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72176cf96cb79a0ebf62972b76dbe68c933bef4d/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=72176cf96cb79a0ebf62972b76dbe68c933bef4d", "patch": "@@ -151,4 +151,5 @@ pub mod ext {\n #[cfg(test)]\n mod test_snippet;\n \n+#[cfg(not(stage0))] // remove after the next snapshot\n __build_diagnostic_array! { libsyntax, DIAGNOSTICS }"}, {"sha": "38a8ef2acd261f213e1cea7f98386b2277f4925d", "filename": "src/stage0.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72176cf96cb79a0ebf62972b76dbe68c933bef4d/src%2Fstage0.txt", "raw_url": "https://github.com/rust-lang/rust/raw/72176cf96cb79a0ebf62972b76dbe68c933bef4d/src%2Fstage0.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.txt?ref=72176cf96cb79a0ebf62972b76dbe68c933bef4d", "patch": "@@ -12,7 +12,7 @@\n # source tarball for a stable release you'll likely see `1.x.0` for rustc and\n # `0.x.0` for Cargo where they were released on `date`.\n \n-date: 2017-11-21\n+date: 2018-01-02\n rustc: beta\n cargo: beta\n "}]}