{"sha": "4013e094f59109779f1294adad96caa2eebf7e2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwMTNlMDk0ZjU5MTA5Nzc5ZjEyOTRhZGFkOTZjYWEyZWViZjdlMmQ=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-07-31T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-08-04T13:51:30Z"}, "message": "Prepare gep for opaque pointers\n\nImplement gep using LLVMBuildGEP2 which takes an explicit type argument\ninstead of deriving it from a pointer type.", "tree": {"sha": "2e19a388b0e70c1ce55128e62dd45827ad8ec5a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e19a388b0e70c1ce55128e62dd45827ad8ec5a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4013e094f59109779f1294adad96caa2eebf7e2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4013e094f59109779f1294adad96caa2eebf7e2d", "html_url": "https://github.com/rust-lang/rust/commit/4013e094f59109779f1294adad96caa2eebf7e2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4013e094f59109779f1294adad96caa2eebf7e2d/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "838042aa4e9f7b313cd79420d7613dc5af5343e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/838042aa4e9f7b313cd79420d7613dc5af5343e5", "html_url": "https://github.com/rust-lang/rust/commit/838042aa4e9f7b313cd79420d7613dc5af5343e5"}], "stats": {"total": 22, "additions": 13, "deletions": 9}, "files": [{"sha": "e81fbdf0742440eb301fcb7917d3c74c340de727", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4013e094f59109779f1294adad96caa2eebf7e2d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4013e094f59109779f1294adad96caa2eebf7e2d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=4013e094f59109779f1294adad96caa2eebf7e2d", "patch": "@@ -640,10 +640,11 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         }\n     }\n \n-    fn gep(&mut self, ptr: &'ll Value, indices: &[&'ll Value]) -> &'ll Value {\n+    fn gep(&mut self, ty: &'ll Type, ptr: &'ll Value, indices: &[&'ll Value]) -> &'ll Value {\n         unsafe {\n-            llvm::LLVMBuildGEP(\n+            llvm::LLVMBuildGEP2(\n                 self.llbuilder,\n+                ty,\n                 ptr,\n                 indices.as_ptr(),\n                 indices.len() as c_uint,"}, {"sha": "78c7410e6820b8dcf5d1604a570a89fad8a9157b", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4013e094f59109779f1294adad96caa2eebf7e2d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4013e094f59109779f1294adad96caa2eebf7e2d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=4013e094f59109779f1294adad96caa2eebf7e2d", "patch": "@@ -1394,8 +1394,9 @@ extern \"C\" {\n \n     pub fn LLVMBuildStore(B: &Builder<'a>, Val: &'a Value, Ptr: &'a Value) -> &'a Value;\n \n-    pub fn LLVMBuildGEP(\n+    pub fn LLVMBuildGEP2(\n         B: &Builder<'a>,\n+        Ty: &'a Type,\n         Pointer: &'a Value,\n         Indices: *const &'a Value,\n         NumIndices: c_uint,"}, {"sha": "d5000b4df3c12ce31dd1f978d3c3ff6d01d9a075", "filename": "compiler/rustc_codegen_llvm/src/va_arg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4013e094f59109779f1294adad96caa2eebf7e2d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fva_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4013e094f59109779f1294adad96caa2eebf7e2d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fva_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fva_arg.rs?ref=4013e094f59109779f1294adad96caa2eebf7e2d", "patch": "@@ -146,11 +146,11 @@ fn emit_aapcs_va_arg(\n     let top = in_reg.load(top_type, top, bx.tcx().data_layout.pointer_align.abi);\n \n     // reg_value = *(@top + reg_off_v);\n-    let mut reg_addr = in_reg.gep(top, &[reg_off_v]);\n+    let mut reg_addr = in_reg.gep(bx.type_i8(), top, &[reg_off_v]);\n     if bx.tcx().sess.target.endian == Endian::Big && layout.size.bytes() != slot_size {\n         // On big-endian systems the value is right-aligned in its slot.\n         let offset = bx.const_i32((slot_size - layout.size.bytes()) as i32);\n-        reg_addr = in_reg.gep(reg_addr, &[offset]);\n+        reg_addr = in_reg.gep(bx.type_i8(), reg_addr, &[offset]);\n     }\n     let reg_type = layout.llvm_type(bx);\n     let reg_addr = in_reg.bitcast(reg_addr, bx.cx.type_ptr_to(reg_type));"}, {"sha": "b7ca19aba89765bfcf7b7f1957b488762abde0ad", "filename": "compiler/rustc_codegen_ssa/src/mir/intrinsic.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4013e094f59109779f1294adad96caa2eebf7e2d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4013e094f59109779f1294adad96caa2eebf7e2d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs?ref=4013e094f59109779f1294adad96caa2eebf7e2d", "patch": "@@ -121,9 +121,11 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 bx.inbounds_gep(ptr, &[offset])\n             }\n             sym::arith_offset => {\n+                let ty = substs.type_at(0);\n+                let layout = bx.layout_of(ty);\n                 let ptr = args[0].immediate();\n                 let offset = args[1].immediate();\n-                bx.gep(ptr, &[offset])\n+                bx.gep(bx.backend_type(layout), ptr, &[offset])\n             }\n             sym::copy => {\n                 copy_intrinsic("}, {"sha": "40961839e3f49cf989f690806814de224d42d0b4", "filename": "compiler/rustc_codegen_ssa/src/mir/place.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4013e094f59109779f1294adad96caa2eebf7e2d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4013e094f59109779f1294adad96caa2eebf7e2d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs?ref=4013e094f59109779f1294adad96caa2eebf7e2d", "patch": "@@ -109,7 +109,7 @@ impl<'a, 'tcx, V: CodegenObject> PlaceRef<'tcx, V> {\n                 Abi::Scalar(_) | Abi::ScalarPair(..) | Abi::Vector { .. } if field.is_zst() => {\n                     // ZST fields are not included in Scalar, ScalarPair, and Vector layouts, so manually offset the pointer.\n                     let byte_ptr = bx.pointercast(self.llval, bx.cx().type_i8p());\n-                    bx.gep(byte_ptr, &[bx.const_usize(offset.bytes())])\n+                    bx.gep(bx.cx().type_i8(), byte_ptr, &[bx.const_usize(offset.bytes())])\n                 }\n                 Abi::Scalar(_) | Abi::ScalarPair(..) => {\n                     // All fields of Scalar and ScalarPair layouts must have been handled by this point.\n@@ -189,7 +189,7 @@ impl<'a, 'tcx, V: CodegenObject> PlaceRef<'tcx, V> {\n \n         // Cast and adjust pointer.\n         let byte_ptr = bx.pointercast(self.llval, bx.cx().type_i8p());\n-        let byte_ptr = bx.gep(byte_ptr, &[offset]);\n+        let byte_ptr = bx.gep(bx.cx().type_i8(), byte_ptr, &[offset]);\n \n         // Finally, cast back to the type expected.\n         let ll_fty = bx.cx().backend_type(field);"}, {"sha": "5e8ebcf9682262046f661428f953cfd90d3fe565", "filename": "compiler/rustc_codegen_ssa/src/traits/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4013e094f59109779f1294adad96caa2eebf7e2d/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4013e094f59109779f1294adad96caa2eebf7e2d/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs?ref=4013e094f59109779f1294adad96caa2eebf7e2d", "patch": "@@ -176,7 +176,7 @@ pub trait BuilderMethods<'a, 'tcx>:\n         size: Size,\n     );\n \n-    fn gep(&mut self, ptr: Self::Value, indices: &[Self::Value]) -> Self::Value;\n+    fn gep(&mut self, ty: Self::Type, ptr: Self::Value, indices: &[Self::Value]) -> Self::Value;\n     fn inbounds_gep(&mut self, ptr: Self::Value, indices: &[Self::Value]) -> Self::Value;\n     fn struct_gep(&mut self, ty: Self::Type, ptr: Self::Value, idx: u64) -> Self::Value;\n "}]}