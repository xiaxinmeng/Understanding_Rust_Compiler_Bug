{"sha": "9b1d2229ff7f408b923c26943d8492a71ea91740", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliMWQyMjI5ZmY3ZjQwOGI5MjNjMjY5NDNkODQ5MmE3MWVhOTE3NDA=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-27T20:04:32Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-27T20:04:32Z"}, "message": "change the `enter_canonical_trait_query` method to give a fulfill cx", "tree": {"sha": "5805add49cb91dd92dbe107061ceffdd4e371a61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5805add49cb91dd92dbe107061ceffdd4e371a61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b1d2229ff7f408b923c26943d8492a71ea91740", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b1d2229ff7f408b923c26943d8492a71ea91740", "html_url": "https://github.com/rust-lang/rust/commit/9b1d2229ff7f408b923c26943d8492a71ea91740", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b1d2229ff7f408b923c26943d8492a71ea91740/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0fdce31d962c3ca4f04f1729ec63af7781ed79f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0fdce31d962c3ca4f04f1729ec63af7781ed79f", "html_url": "https://github.com/rust-lang/rust/commit/f0fdce31d962c3ca4f04f1729ec63af7781ed79f"}], "stats": {"total": 148, "additions": 79, "deletions": 69}, "files": [{"sha": "24f70eb87575d78238b29bbc5b138a811ed55998", "filename": "src/librustc/infer/canonical/query_result.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9b1d2229ff7f408b923c26943d8492a71ea91740/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b1d2229ff7f408b923c26943d8492a71ea91740/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_result.rs?ref=9b1d2229ff7f408b923c26943d8492a71ea91740", "patch": "@@ -56,7 +56,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxtBuilder<'cx, 'gcx, 'tcx> {\n     pub fn enter_canonical_trait_query<K, R>(\n         &'tcx mut self,\n         canonical_key: &Canonical<'tcx, K>,\n-        op: impl FnOnce(&InferCtxt<'_, 'gcx, 'tcx>, K) -> Fallible<InferOk<'tcx, R>>,\n+        op: impl FnOnce(&InferCtxt<'_, 'gcx, 'tcx>, &mut FulfillmentContext<'tcx>, K) -> Fallible<R>,\n     ) -> Fallible<CanonicalizedQueryResult<'gcx, R>>\n     where\n         K: TypeFoldable<'tcx>,\n@@ -65,9 +65,8 @@ impl<'cx, 'gcx, 'tcx> InferCtxtBuilder<'cx, 'gcx, 'tcx> {\n         self.enter(|ref infcx| {\n             let (key, canonical_inference_vars) =\n                 infcx.instantiate_canonical_with_fresh_inference_vars(DUMMY_SP, &canonical_key);\n-            let InferOk { value, obligations } = op(infcx, key)?;\n             let fulfill_cx = &mut FulfillmentContext::new();\n-            fulfill_cx.register_predicate_obligations(infcx, obligations);\n+            let value = op(infcx, fulfill_cx, key)?;\n             infcx.make_canonicalized_query_result(canonical_inference_vars, value, fulfill_cx)\n         })\n     }"}, {"sha": "5b5ae6473f84011cdf3215cc4d3a7e8e532d19f1", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9b1d2229ff7f408b923c26943d8492a71ea91740/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b1d2229ff7f408b923c26943d8492a71ea91740/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=9b1d2229ff7f408b923c26943d8492a71ea91740", "patch": "@@ -27,7 +27,7 @@ use ty::{self, Ty, TyCtxt, GenericParamDefKind};\n use ty::error::{ExpectedFound, TypeError, UnconstrainedNumeric};\n use ty::fold::TypeFoldable;\n use ty::relate::RelateResult;\n-use traits::{self, ObligationCause, PredicateObligations};\n+use traits::{self, ObligationCause, PredicateObligations, TraitEngine};\n use rustc_data_structures::unify as ut;\n use std::cell::{Cell, RefCell, Ref, RefMut};\n use std::collections::BTreeMap;\n@@ -485,6 +485,19 @@ impl<'tcx, T> InferOk<'tcx, T> {\n     pub fn unit(self) -> InferOk<'tcx, ()> {\n         InferOk { value: (), obligations: self.obligations }\n     }\n+\n+    /// Extract `value`, registering any obligations into `fulfill_cx`\n+    pub fn into_value_registering_obligations(\n+        self,\n+        infcx: &InferCtxt<'_, '_, 'tcx>,\n+        fulfill_cx: &mut impl TraitEngine<'tcx>,\n+    ) -> T {\n+        let InferOk { value, obligations } = self;\n+        for obligation in obligations {\n+            fulfill_cx.register_predicate_obligation(infcx, obligation);\n+        }\n+        value\n+    }\n }\n \n impl<'tcx> InferOk<'tcx, ()> {"}, {"sha": "57abdd18d353cb52a5084480b76726d3ddc2b27d", "filename": "src/librustc/infer/outlives/bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b1d2229ff7f408b923c26943d8492a71ea91740/src%2Flibrustc%2Finfer%2Foutlives%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b1d2229ff7f408b923c26943d8492a71ea91740/src%2Flibrustc%2Finfer%2Foutlives%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fbounds.rs?ref=9b1d2229ff7f408b923c26943d8492a71ea91740", "patch": "@@ -11,7 +11,7 @@\n use infer::InferCtxt;\n use syntax::ast;\n use syntax::codemap::Span;\n-use traits::{FulfillmentContext, TraitEngine};\n+use traits::{FulfillmentContext, TraitEngine, TraitEngineExt};\n use ty::{self, Ty, TypeFoldable};\n use ty::outlives::Component;\n use ty::wf;"}, {"sha": "acbf5392cf54c0b7f633d2bc4c6e405b44d39ab3", "filename": "src/librustc/traits/engine.rs", "status": "modified", "additions": 28, "deletions": 20, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/9b1d2229ff7f408b923c26943d8492a71ea91740/src%2Flibrustc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b1d2229ff7f408b923c26943d8492a71ea91740/src%2Flibrustc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fengine.rs?ref=9b1d2229ff7f408b923c26943d8492a71ea91740", "patch": "@@ -16,56 +16,64 @@ use super::{FulfillmentContext, FulfillmentError};\n use super::{ObligationCause, PredicateObligation};\n \n pub trait TraitEngine<'tcx>: 'tcx {\n-    fn normalize_projection_type<'a, 'gcx>(\n+    fn normalize_projection_type(\n         &mut self,\n-        infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n+        infcx: &InferCtxt<'_, 'gcx, 'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n         projection_ty: ty::ProjectionTy<'tcx>,\n         cause: ObligationCause<'tcx>,\n     ) -> Ty<'tcx>;\n \n-    fn register_bound<'a, 'gcx>(\n+    fn register_bound(\n         &mut self,\n-        infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n+        infcx: &InferCtxt<'_, 'gcx, 'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n         ty: Ty<'tcx>,\n         def_id: DefId,\n         cause: ObligationCause<'tcx>,\n     );\n \n-    fn register_predicate_obligation<'a, 'gcx>(\n+    fn register_predicate_obligation(\n         &mut self,\n-        infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n+        infcx: &InferCtxt<'_, 'gcx, 'tcx>,\n         obligation: PredicateObligation<'tcx>,\n     );\n \n-    fn select_all_or_error<'a, 'gcx>(\n+    fn select_all_or_error(\n         &mut self,\n-        infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n+        infcx: &InferCtxt<'_, 'gcx, 'tcx>,\n     ) -> Result<(), Vec<FulfillmentError<'tcx>>>;\n \n-    fn select_where_possible<'a, 'gcx>(\n+    fn select_where_possible(\n         &mut self,\n-        infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n+        infcx: &InferCtxt<'_, 'gcx, 'tcx>,\n     ) -> Result<(), Vec<FulfillmentError<'tcx>>>;\n \n     fn pending_obligations(&self) -> Vec<PredicateObligation<'tcx>>;\n }\n \n-impl<'a, 'gcx, 'tcx> dyn TraitEngine<'tcx> {\n-    pub fn new(_tcx: TyCtxt<'_, '_, 'tcx>) -> Box<Self> {\n-        Box::new(FulfillmentContext::new())\n-    }\n+pub trait TraitEngineExt<'tcx> {\n+    fn register_predicate_obligations(\n+        &mut self,\n+        infcx: &InferCtxt<'_, 'gcx, 'tcx>,\n+        obligations: impl IntoIterator<Item = PredicateObligation<'tcx>>,\n+    );\n+}\n \n-    pub fn register_predicate_obligations<I>(\n+impl<T: ?Sized + TraitEngine<'tcx>> TraitEngineExt<'tcx> for T {\n+    fn register_predicate_obligations(\n         &mut self,\n-        infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n-        obligations: I,\n-    ) where\n-        I: IntoIterator<Item = PredicateObligation<'tcx>>,\n-    {\n+        infcx: &InferCtxt<'_, 'gcx, 'tcx>,\n+        obligations: impl IntoIterator<Item = PredicateObligation<'tcx>>,\n+    ) {\n         for obligation in obligations {\n             self.register_predicate_obligation(infcx, obligation);\n         }\n     }\n }\n+\n+impl dyn TraitEngine<'tcx> {\n+    pub fn new(_tcx: TyCtxt<'_, '_, 'tcx>) -> Box<Self> {\n+        Box::new(FulfillmentContext::new())\n+    }\n+}"}, {"sha": "b3f56d4de65340971f4372bc9f954621a4979942", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9b1d2229ff7f408b923c26943d8492a71ea91740/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b1d2229ff7f408b923c26943d8492a71ea91740/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=9b1d2229ff7f408b923c26943d8492a71ea91740", "patch": "@@ -21,7 +21,7 @@ use middle::const_val::{ConstEvalErr, ErrKind};\n use super::CodeAmbiguity;\n use super::CodeProjectionError;\n use super::CodeSelectionError;\n-use super::engine::TraitEngine;\n+use super::engine::{TraitEngine, TraitEngineExt};\n use super::{FulfillmentError, FulfillmentErrorCode};\n use super::{ObligationCause, PredicateObligation, Obligation};\n use super::project;\n@@ -86,16 +86,6 @@ impl<'a, 'gcx, 'tcx> FulfillmentContext<'tcx> {\n         }\n     }\n \n-    pub fn register_predicate_obligations<I>(&mut self,\n-                                             infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n-                                             obligations: I)\n-        where I: IntoIterator<Item = PredicateObligation<'tcx>>\n-    {\n-        for obligation in obligations {\n-            self.register_predicate_obligation(infcx, obligation);\n-        }\n-    }\n-\n     /// Attempts to select obligations using `selcx`. If `only_new_obligations` is true, then it\n     /// only attempts to select obligations that haven't been seen before.\n     fn select(&mut self, selcx: &mut SelectionContext<'a, 'gcx, 'tcx>)"}, {"sha": "c7e55fa574f94cf5ca0e28686a18535e37e2bbc6", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b1d2229ff7f408b923c26943d8492a71ea91740/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b1d2229ff7f408b923c26943d8492a71ea91740/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=9b1d2229ff7f408b923c26943d8492a71ea91740", "patch": "@@ -47,7 +47,7 @@ pub use self::select::{EvaluationCache, SelectionContext, SelectionCache};\n pub use self::select::{EvaluationResult, IntercrateAmbiguityCause, OverflowError};\n pub use self::specialize::{OverlapError, specialization_graph, translate_substs};\n pub use self::specialize::{SpecializesCache, find_associated_item};\n-pub use self::engine::TraitEngine;\n+pub use self::engine::{TraitEngine, TraitEngineExt};\n pub use self::util::elaborate_predicates;\n pub use self::util::supertraits;\n pub use self::util::Supertraits;"}, {"sha": "3d10ce805853d973b0c8f3cd870d9dcecbaad8bb", "filename": "src/librustc/traits/query/type_op/custom.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b1d2229ff7f408b923c26943d8492a71ea91740/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b1d2229ff7f408b923c26943d8492a71ea91740/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs?ref=9b1d2229ff7f408b923c26943d8492a71ea91740", "patch": "@@ -16,7 +16,7 @@ use infer::canonical::query_result;\n use infer::canonical::QueryRegionConstraint;\n use std::rc::Rc;\n use syntax::codemap::DUMMY_SP;\n-use traits::{ObligationCause, TraitEngine};\n+use traits::{ObligationCause, TraitEngine, TraitEngineExt};\n \n pub struct CustomTypeOp<F, G> {\n     closure: F,"}, {"sha": "5f9060b36234644c9f59ba75fc44240662c2b075", "filename": "src/librustc_traits/dropck_outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b1d2229ff7f408b923c26943d8492a71ea91740/src%2Flibrustc_traits%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b1d2229ff7f408b923c26943d8492a71ea91740/src%2Flibrustc_traits%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fdropck_outlives.rs?ref=9b1d2229ff7f408b923c26943d8492a71ea91740", "patch": "@@ -12,7 +12,7 @@ use rustc::hir::def_id::DefId;\n use rustc::infer::canonical::{Canonical, QueryResult};\n use rustc::traits::query::dropck_outlives::{DropckOutlivesResult, DtorckConstraint};\n use rustc::traits::query::{CanonicalTyGoal, NoSolution};\n-use rustc::traits::{FulfillmentContext, Normalized, ObligationCause};\n+use rustc::traits::{FulfillmentContext, Normalized, ObligationCause, TraitEngineExt};\n use rustc::ty::query::Providers;\n use rustc::ty::subst::{Subst, Substs};\n use rustc::ty::{self, ParamEnvAnd, Ty, TyCtxt};"}, {"sha": "1c0f677fbf3cbf369f226ff07c9eb350006d89bf", "filename": "src/librustc_traits/normalize_projection_ty.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9b1d2229ff7f408b923c26943d8492a71ea91740/src%2Flibrustc_traits%2Fnormalize_projection_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b1d2229ff7f408b923c26943d8492a71ea91740/src%2Flibrustc_traits%2Fnormalize_projection_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fnormalize_projection_ty.rs?ref=9b1d2229ff7f408b923c26943d8492a71ea91740", "patch": "@@ -9,9 +9,8 @@\n // except according to those terms.\n \n use rustc::infer::canonical::{Canonical, QueryResult};\n-use rustc::infer::InferOk;\n use rustc::traits::query::{normalize::NormalizationResult, CanonicalProjectionGoal, NoSolution};\n-use rustc::traits::{self, ObligationCause, SelectionContext};\n+use rustc::traits::{self, ObligationCause, SelectionContext, TraitEngineExt};\n use rustc::ty::query::Providers;\n use rustc::ty::{ParamEnvAnd, TyCtxt};\n use rustc_data_structures::sync::Lrc;\n@@ -39,6 +38,7 @@ fn normalize_projection_ty<'tcx>(\n     tcx.infer_ctxt().enter_canonical_trait_query(\n         &goal,\n         |infcx,\n+         fulfill_cx,\n          ParamEnvAnd {\n              param_env,\n              value: goal,\n@@ -54,11 +54,9 @@ fn normalize_projection_ty<'tcx>(\n                 0,\n                 &mut obligations,\n             );\n-            Ok(InferOk {\n-                value: NormalizationResult {\n-                    normalized_ty: answer,\n-                },\n-                obligations,\n+            fulfill_cx.register_predicate_obligations(infcx, obligations);\n+            Ok(NormalizationResult {\n+                normalized_ty: answer,\n             })\n         },\n     )"}, {"sha": "ca746722f58104a6c3048cb5634da84b8d6de911", "filename": "src/librustc_traits/type_op.rs", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/9b1d2229ff7f408b923c26943d8492a71ea91740/src%2Flibrustc_traits%2Ftype_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b1d2229ff7f408b923c26943d8492a71ea91740/src%2Flibrustc_traits%2Ftype_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Ftype_op.rs?ref=9b1d2229ff7f408b923c26943d8492a71ea91740", "patch": "@@ -9,15 +9,15 @@\n // except according to those terms.\n \n use rustc::infer::canonical::{Canonical, QueryResult};\n-use rustc::infer::{InferCtxt, InferOk};\n+use rustc::infer::InferCtxt;\n use rustc::traits::query::type_op::eq::Eq;\n use rustc::traits::query::type_op::normalize::Normalize;\n use rustc::traits::query::type_op::prove_predicate::ProvePredicate;\n use rustc::traits::query::type_op::subtype::Subtype;\n use rustc::traits::query::{Fallible, NoSolution};\n-use rustc::traits::{Obligation, Normalized, ObligationCause};\n+use rustc::traits::{FulfillmentContext, Normalized, Obligation, ObligationCause, TraitEngine, TraitEngineExt};\n use rustc::ty::query::Providers;\n-use rustc::ty::{ParamEnvAnd, FnSig, Lift, PolyFnSig, Predicate, Ty, TyCtxt, TypeFoldable};\n+use rustc::ty::{FnSig, Lift, ParamEnvAnd, PolyFnSig, Predicate, Ty, TyCtxt, TypeFoldable};\n use rustc_data_structures::sync::Lrc;\n use std::fmt;\n \n@@ -39,24 +39,29 @@ fn type_op_eq<'tcx>(\n     canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Eq<'tcx>>>,\n ) -> Result<Lrc<Canonical<'tcx, QueryResult<'tcx, ()>>>, NoSolution> {\n     tcx.infer_ctxt()\n-        .enter_canonical_trait_query(&canonicalized, |infcx, key| {\n+        .enter_canonical_trait_query(&canonicalized, |infcx, fulfill_cx, key| {\n             let (param_env, Eq { a, b }) = key.into_parts();\n-            Ok(infcx.at(&ObligationCause::dummy(), param_env).eq(a, b)?)\n+            Ok(infcx\n+                .at(&ObligationCause::dummy(), param_env)\n+                .eq(a, b)?\n+                .into_value_registering_obligations(infcx, fulfill_cx))\n         })\n }\n \n fn type_op_normalize<T>(\n     infcx: &InferCtxt<'_, 'gcx, 'tcx>,\n+    fulfill_cx: &mut FulfillmentContext<'tcx>,\n     key: ParamEnvAnd<'tcx, Normalize<T>>,\n-) -> Fallible<InferOk<'tcx, T>>\n+) -> Fallible<T>\n where\n     T: fmt::Debug + TypeFoldable<'tcx> + Lift<'gcx>,\n {\n     let (param_env, Normalize { value }) = key.into_parts();\n     let Normalized { value, obligations } = infcx\n         .at(&ObligationCause::dummy(), param_env)\n         .normalize(&value)?;\n-    Ok(InferOk { value, obligations }) // ugh we should merge these two structs\n+    fulfill_cx.register_predicate_obligations(infcx, obligations);\n+    Ok(value)\n }\n \n fn type_op_normalize_ty(\n@@ -95,30 +100,27 @@ fn type_op_subtype<'tcx>(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Subtype<'tcx>>>,\n ) -> Result<Lrc<Canonical<'tcx, QueryResult<'tcx, ()>>>, NoSolution> {\n-    tcx.infer_ctxt().enter_canonical_trait_query(\n-        &canonicalized, |infcx, key| {\n+    tcx.infer_ctxt()\n+        .enter_canonical_trait_query(&canonicalized, |infcx, fulfill_cx, key| {\n             let (param_env, Subtype { sub, sup }) = key.into_parts();\n             Ok(infcx\n                 .at(&ObligationCause::dummy(), param_env)\n-                .sup(sup, sub)?)\n-        },\n-    )\n+                .sup(sup, sub)?\n+                .into_value_registering_obligations(infcx, fulfill_cx))\n+        })\n }\n \n fn type_op_prove_predicate<'tcx>(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, ProvePredicate<'tcx>>>,\n ) -> Result<Lrc<Canonical<'tcx, QueryResult<'tcx, ()>>>, NoSolution> {\n     tcx.infer_ctxt()\n-        .enter_canonical_trait_query(&canonicalized, |_infcx, key| {\n+        .enter_canonical_trait_query(&canonicalized, |infcx, fulfill_cx, key| {\n             let (param_env, ProvePredicate { predicate }) = key.into_parts();\n-            Ok(InferOk {\n-                value: (),\n-                obligations: vec![Obligation::new(\n-                    ObligationCause::dummy(),\n-                    param_env,\n-                    predicate,\n-                )],\n-            })\n+            fulfill_cx.register_predicate_obligation(\n+                infcx,\n+                Obligation::new(ObligationCause::dummy(), param_env, predicate),\n+            );\n+            Ok(())\n         })\n }"}, {"sha": "f9166851f6fcc75bfac80b0f48c39bd64b916310", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b1d2229ff7f408b923c26943d8492a71ea91740/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b1d2229ff7f408b923c26943d8492a71ea91740/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=9b1d2229ff7f408b923c26943d8492a71ea91740", "patch": "@@ -16,7 +16,7 @@ use rustc::infer::outlives::env::OutlivesEnvironment;\n use rustc::middle::region;\n use rustc::ty::subst::{Subst, Substs, UnpackedKind};\n use rustc::ty::{self, Ty, TyCtxt};\n-use rustc::traits::{ObligationCause, TraitEngine};\n+use rustc::traits::{ObligationCause, TraitEngine, TraitEngineExt};\n use util::common::ErrorReported;\n \n use syntax::ast;"}, {"sha": "b18e5ca54ff476775b6ce75b0ddbe379a65f8768", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b1d2229ff7f408b923c26943d8492a71ea91740/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b1d2229ff7f408b923c26943d8492a71ea91740/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=9b1d2229ff7f408b923c26943d8492a71ea91740", "patch": "@@ -108,7 +108,7 @@ use rustc::infer::InferOk;\n use rustc::ty::subst::Substs;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::query::Providers;\n-use rustc::traits::{ObligationCause, ObligationCauseCode, TraitEngine};\n+use rustc::traits::{ObligationCause, ObligationCauseCode, TraitEngine, TraitEngineExt};\n use session::{CompileIncomplete, config};\n use util::common::time;\n "}]}