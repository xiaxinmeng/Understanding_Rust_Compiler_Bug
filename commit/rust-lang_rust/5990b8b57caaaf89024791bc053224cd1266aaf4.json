{"sha": "5990b8b57caaaf89024791bc053224cd1266aaf4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5OTBiOGI1N2NhYWFmODkwMjQ3OTFiYzA1MzIyNGNkMTI2NmFhZjQ=", "commit": {"author": {"name": "Tommy Ip", "email": "hkmp7tommy@gmail.com", "date": "2017-12-10T17:11:48Z"}, "committer": {"name": "Tommy Ip", "email": "hkmp7tommy@gmail.com", "date": "2017-12-10T21:14:57Z"}, "message": "Enforce successful ui tests to have must-compile-successfully flag.", "tree": {"sha": "05ae13e75ab52e9f8eaddcb88c7cea0501fa660d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05ae13e75ab52e9f8eaddcb88c7cea0501fa660d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5990b8b57caaaf89024791bc053224cd1266aaf4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5990b8b57caaaf89024791bc053224cd1266aaf4", "html_url": "https://github.com/rust-lang/rust/commit/5990b8b57caaaf89024791bc053224cd1266aaf4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5990b8b57caaaf89024791bc053224cd1266aaf4/comments", "author": {"login": "tommyip", "id": 18504232, "node_id": "MDQ6VXNlcjE4NTA0MjMy", "avatar_url": "https://avatars.githubusercontent.com/u/18504232?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tommyip", "html_url": "https://github.com/tommyip", "followers_url": "https://api.github.com/users/tommyip/followers", "following_url": "https://api.github.com/users/tommyip/following{/other_user}", "gists_url": "https://api.github.com/users/tommyip/gists{/gist_id}", "starred_url": "https://api.github.com/users/tommyip/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tommyip/subscriptions", "organizations_url": "https://api.github.com/users/tommyip/orgs", "repos_url": "https://api.github.com/users/tommyip/repos", "events_url": "https://api.github.com/users/tommyip/events{/privacy}", "received_events_url": "https://api.github.com/users/tommyip/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tommyip", "id": 18504232, "node_id": "MDQ6VXNlcjE4NTA0MjMy", "avatar_url": "https://avatars.githubusercontent.com/u/18504232?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tommyip", "html_url": "https://github.com/tommyip", "followers_url": "https://api.github.com/users/tommyip/followers", "following_url": "https://api.github.com/users/tommyip/following{/other_user}", "gists_url": "https://api.github.com/users/tommyip/gists{/gist_id}", "starred_url": "https://api.github.com/users/tommyip/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tommyip/subscriptions", "organizations_url": "https://api.github.com/users/tommyip/orgs", "repos_url": "https://api.github.com/users/tommyip/repos", "events_url": "https://api.github.com/users/tommyip/events{/privacy}", "received_events_url": "https://api.github.com/users/tommyip/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2537a499c2f1983011ad04ba2e59e5ff2e2989b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/2537a499c2f1983011ad04ba2e59e5ff2e2989b6", "html_url": "https://github.com/rust-lang/rust/commit/2537a499c2f1983011ad04ba2e59e5ff2e2989b6"}], "stats": {"total": 18, "additions": 11, "deletions": 7}, "files": [{"sha": "8d8eb4d5cb8c4c1a1c3af60d6797fd9b97c2fd59", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5990b8b57caaaf89024791bc053224cd1266aaf4/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5990b8b57caaaf89024791bc053224cd1266aaf4/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=5990b8b57caaaf89024791bc053224cd1266aaf4", "patch": "@@ -218,7 +218,7 @@ pub struct TestProps {\n     // testing harness and used when generating compilation\n     // arguments. (In particular, it propagates to the aux-builds.)\n     pub incremental_dir: Option<PathBuf>,\n-    // Specifies that a cfail test must actually compile without errors.\n+    // Specifies that a test must actually compile without errors.\n     pub must_compile_successfully: bool,\n     // rustdoc will test the output of the `--test` option\n     pub check_test_line_numbers_match: bool,"}, {"sha": "74da774c6d55a2809a77157129b0d32599e4a0f2", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5990b8b57caaaf89024791bc053224cd1266aaf4/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5990b8b57caaaf89024791bc053224cd1266aaf4/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=5990b8b57caaaf89024791bc053224cd1266aaf4", "patch": "@@ -147,23 +147,26 @@ impl<'test> TestCx<'test> {\n         assert!(self.revision.is_none(), \"init_all invoked for a revision\");\n     }\n \n-    fn run_cfail_test(&self) {\n-        let proc_res = self.compile_test();\n-\n+    fn check_if_test_should_compile(&self, proc_res: &ProcRes) {\n         if self.props.must_compile_successfully {\n             if !proc_res.status.success() {\n-                self.fatal_proc_rec(\"test compilation failed although it shouldn't!\", &proc_res);\n+                self.fatal_proc_rec(\"test compilation failed although it shouldn't!\", proc_res);\n             }\n         } else {\n             if proc_res.status.success() {\n                 self.fatal_proc_rec(\n                     &format!(\"{} test compiled successfully!\", self.config.mode)[..],\n-                    &proc_res,\n+                    proc_res,\n                 );\n             }\n \n-            self.check_correct_failure_status(&proc_res);\n+            self.check_correct_failure_status(proc_res);\n         }\n+    }\n+\n+    fn run_cfail_test(&self) {\n+        let proc_res = self.compile_test();\n+        self.check_if_test_should_compile(&proc_res);\n \n         let output_to_check = self.get_output(&proc_res);\n         let expected_errors = errors::load_errors(&self.testpaths.file, self.revision);\n@@ -2388,6 +2391,7 @@ impl<'test> TestCx<'test> {\n             .any(|s| s.contains(\"--error-format\"));\n \n         let proc_res = self.compile_test();\n+        self.check_if_test_should_compile(&proc_res);\n \n         let expected_stderr_path = self.expected_output_path(UI_STDERR);\n         let expected_stderr = self.load_expected_output(&expected_stderr_path);"}]}