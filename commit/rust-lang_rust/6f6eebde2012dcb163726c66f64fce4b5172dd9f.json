{"sha": "6f6eebde2012dcb163726c66f64fce4b5172dd9f", "node_id": "C_kwDOAAsO6NoAKDZmNmVlYmRlMjAxMmRjYjE2MzcyNmM2NmY2NGZjZTRiNTE3MmRkOWY", "commit": {"author": {"name": "beetrees", "email": "b@beetr.ee", "date": "2022-10-06T14:14:29Z"}, "committer": {"name": "beetrees", "email": "b@beetr.ee", "date": "2022-10-09T08:33:43Z"}, "message": "Add a test for C-style repr128 enum DWARF debuginfo", "tree": {"sha": "967568106dc1f045c772b96b3c16a9d2d186fc34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/967568106dc1f045c772b96b3c16a9d2d186fc34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f6eebde2012dcb163726c66f64fce4b5172dd9f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQT9oej+Slbzs/bk2IuHkb11QZHr1gUCY0KHZwAKCRCHkb11QZHr\n1itKAPwMNc1R22C8B+XytkN2VoJUOkTC0QxEKH9Pxj+t1+wBIwD/VmgUwrloMOyu\nmyc0Nhmgu3Ur24XagBHZMXx/H2BOggk=\n=ylDp\n-----END PGP SIGNATURE-----", "payload": "tree 967568106dc1f045c772b96b3c16a9d2d186fc34\nparent 25c1c635e5b7df5b651f587b1427751bfe463339\nauthor beetrees <b@beetr.ee> 1665065669 +0100\ncommitter beetrees <b@beetr.ee> 1665304423 +0100\n\nAdd a test for C-style repr128 enum DWARF debuginfo\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f6eebde2012dcb163726c66f64fce4b5172dd9f", "html_url": "https://github.com/rust-lang/rust/commit/6f6eebde2012dcb163726c66f64fce4b5172dd9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f6eebde2012dcb163726c66f64fce4b5172dd9f/comments", "author": {"login": "beetrees", "id": 107947675, "node_id": "U_kgDOBm8mmw", "avatar_url": "https://avatars.githubusercontent.com/u/107947675?v=4", "gravatar_id": "", "url": "https://api.github.com/users/beetrees", "html_url": "https://github.com/beetrees", "followers_url": "https://api.github.com/users/beetrees/followers", "following_url": "https://api.github.com/users/beetrees/following{/other_user}", "gists_url": "https://api.github.com/users/beetrees/gists{/gist_id}", "starred_url": "https://api.github.com/users/beetrees/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/beetrees/subscriptions", "organizations_url": "https://api.github.com/users/beetrees/orgs", "repos_url": "https://api.github.com/users/beetrees/repos", "events_url": "https://api.github.com/users/beetrees/events{/privacy}", "received_events_url": "https://api.github.com/users/beetrees/received_events", "type": "User", "site_admin": false}, "committer": {"login": "beetrees", "id": 107947675, "node_id": "U_kgDOBm8mmw", "avatar_url": "https://avatars.githubusercontent.com/u/107947675?v=4", "gravatar_id": "", "url": "https://api.github.com/users/beetrees", "html_url": "https://github.com/beetrees", "followers_url": "https://api.github.com/users/beetrees/followers", "following_url": "https://api.github.com/users/beetrees/following{/other_user}", "gists_url": "https://api.github.com/users/beetrees/gists{/gist_id}", "starred_url": "https://api.github.com/users/beetrees/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/beetrees/subscriptions", "organizations_url": "https://api.github.com/users/beetrees/orgs", "repos_url": "https://api.github.com/users/beetrees/repos", "events_url": "https://api.github.com/users/beetrees/events{/privacy}", "received_events_url": "https://api.github.com/users/beetrees/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25c1c635e5b7df5b651f587b1427751bfe463339", "url": "https://api.github.com/repos/rust-lang/rust/commits/25c1c635e5b7df5b651f587b1427751bfe463339", "html_url": "https://github.com/rust-lang/rust/commit/25c1c635e5b7df5b651f587b1427751bfe463339"}], "stats": {"total": 39, "additions": 39, "deletions": 0}, "files": [{"sha": "a840e3ee6d80bd15e22d6ff69581cc7b101a5dc9", "filename": "src/test/run-make/repr128-dwarf/Makefile", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6f6eebde2012dcb163726c66f64fce4b5172dd9f/src%2Ftest%2Frun-make%2Frepr128-dwarf%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/6f6eebde2012dcb163726c66f64fce4b5172dd9f/src%2Ftest%2Frun-make%2Frepr128-dwarf%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frepr128-dwarf%2FMakefile?ref=6f6eebde2012dcb163726c66f64fce4b5172dd9f", "patch": "@@ -0,0 +1,16 @@\n+# ignore-windows\n+# This test should be replaced with one in src/test/debuginfo once GDB or LLDB support 128-bit\n+# enums.\n+\n+include ../../run-make-fulldeps/tools.mk\n+\n+all:\n+\t$(RUSTC) -Cdebuginfo=2 lib.rs -o $(TMPDIR)/repr128.rlib\n+\t\"$(LLVM_BIN_DIR)\"/llvm-dwarfdump -n U128A $(TMPDIR)/repr128.rlib | $(CGREP) \"DW_AT_const_value\t(<0x10> 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 )\"\n+\t\"$(LLVM_BIN_DIR)\"/llvm-dwarfdump -n U128B $(TMPDIR)/repr128.rlib | $(CGREP) \"DW_AT_const_value\t(<0x10> 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 )\"\n+\t\"$(LLVM_BIN_DIR)\"/llvm-dwarfdump -n U128C $(TMPDIR)/repr128.rlib | $(CGREP) \"DW_AT_const_value\t(<0x10> 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 )\"\n+\t\"$(LLVM_BIN_DIR)\"/llvm-dwarfdump -n U128D $(TMPDIR)/repr128.rlib | $(CGREP) \"DW_AT_const_value\t(<0x10> ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff )\"\n+\t\"$(LLVM_BIN_DIR)\"/llvm-dwarfdump -n I128A $(TMPDIR)/repr128.rlib | $(CGREP) \"DW_AT_const_value\t(<0x10> 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 )\"\n+\t\"$(LLVM_BIN_DIR)\"/llvm-dwarfdump -n I128B $(TMPDIR)/repr128.rlib | $(CGREP) \"DW_AT_const_value\t(<0x10> ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff )\"\n+\t\"$(LLVM_BIN_DIR)\"/llvm-dwarfdump -n I128C $(TMPDIR)/repr128.rlib | $(CGREP) \"DW_AT_const_value\t(<0x10> 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 80 )\"\n+\t\"$(LLVM_BIN_DIR)\"/llvm-dwarfdump -n I128D $(TMPDIR)/repr128.rlib | $(CGREP) \"DW_AT_const_value\t(<0x10> ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 7f )\""}, {"sha": "63675441d4babc8d255c273fdc6598ad6682935a", "filename": "src/test/run-make/repr128-dwarf/lib.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6f6eebde2012dcb163726c66f64fce4b5172dd9f/src%2Ftest%2Frun-make%2Frepr128-dwarf%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f6eebde2012dcb163726c66f64fce4b5172dd9f/src%2Ftest%2Frun-make%2Frepr128-dwarf%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frepr128-dwarf%2Flib.rs?ref=6f6eebde2012dcb163726c66f64fce4b5172dd9f", "patch": "@@ -0,0 +1,23 @@\n+#![crate_type = \"lib\"]\n+#![feature(repr128)]\n+\n+// Use .to_le() to ensure that the bytes are in the same order on both little- and big-endian\n+// platforms.\n+\n+#[repr(u128)]\n+pub enum U128Enum {\n+    U128A = 0_u128.to_le(),\n+    U128B = 1_u128.to_le(),\n+    U128C = (u64::MAX as u128 + 1).to_le(),\n+    U128D = u128::MAX.to_le(),\n+}\n+\n+#[repr(i128)]\n+pub enum I128Enum {\n+    I128A = 0_i128.to_le(),\n+    I128B = (-1_i128).to_le(),\n+    I128C = i128::MIN.to_le(),\n+    I128D = i128::MAX.to_le(),\n+}\n+\n+pub fn f(_: U128Enum, _: I128Enum) {}"}]}