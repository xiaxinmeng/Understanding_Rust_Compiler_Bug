{"sha": "c814ee0d2a7b9f67cf2be6a6488d07105606c64c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4MTRlZTBkMmE3YjlmNjdjZjJiZTZhNjQ4OGQwNzEwNTYwNmM2NGM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-06-27T18:49:39Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-07-26T09:28:04Z"}, "message": "[WIP]", "tree": {"sha": "3ae29a282ec3efec49eccd7317ea9931b06ceb78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ae29a282ec3efec49eccd7317ea9931b06ceb78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c814ee0d2a7b9f67cf2be6a6488d07105606c64c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c814ee0d2a7b9f67cf2be6a6488d07105606c64c", "html_url": "https://github.com/rust-lang/rust/commit/c814ee0d2a7b9f67cf2be6a6488d07105606c64c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c814ee0d2a7b9f67cf2be6a6488d07105606c64c/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "596fdd5a6463d55d8dedd202c41a6392eca2c4c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/596fdd5a6463d55d8dedd202c41a6392eca2c4c8", "html_url": "https://github.com/rust-lang/rust/commit/596fdd5a6463d55d8dedd202c41a6392eca2c4c8"}], "stats": {"total": 131, "additions": 20, "deletions": 111}, "files": [{"sha": "532216ba8514fbe63319ae1f01b10604fd6253bb", "filename": "build_sysroot/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c814ee0d2a7b9f67cf2be6a6488d07105606c64c/build_sysroot%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c814ee0d2a7b9f67cf2be6a6488d07105606c64c/build_sysroot%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_sysroot%2FCargo.toml?ref=c814ee0d2a7b9f67cf2be6a6488d07105606c64c", "patch": "@@ -14,7 +14,7 @@ alloc_system = { path = \"./alloc_system\" }\n [patch.crates-io]\n rustc-std-workspace-core = { path = \"./sysroot_src/src/tools/rustc-std-workspace-core\" }\n rustc-std-workspace-alloc = { path = \"./rustc-std-workspace-alloc\" }\n-compiler_builtins = { path = \"./compiler_builtins\" }\n+#compiler_builtins = { path = \"./compiler_builtins\" }\n \n [profile.release]\n debug = true"}, {"sha": "d435e3470051df8c5a716c177d35f47e9ccc9326", "filename": "example/mini_core_hello_world.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c814ee0d2a7b9f67cf2be6a6488d07105606c64c/example%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c814ee0d2a7b9f67cf2be6a6488d07105606c64c/example%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core_hello_world.rs?ref=c814ee0d2a7b9f67cf2be6a6488d07105606c64c", "patch": "@@ -118,5 +118,5 @@ fn take_f32(_f: f32) {}\n fn take_unique(_u: Unique<()>) {}\n \n fn main() {\n-    assert_eq!((1u128 + 2) as u16, 3);\n+\n }"}, {"sha": "ae77616a83db55a8790b1f80d23fa4d7764e519c", "filename": "example/std_example.rs", "status": "modified", "additions": 1, "deletions": 26, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c814ee0d2a7b9f67cf2be6a6488d07105606c64c/example%2Fstd_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c814ee0d2a7b9f67cf2be6a6488d07105606c64c/example%2Fstd_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fstd_example.rs?ref=c814ee0d2a7b9f67cf2be6a6488d07105606c64c", "patch": "@@ -3,32 +3,7 @@\n use std::io::Write;\n \n fn main() {\n-    let _ = ::std::iter::repeat('a' as u8).take(10).collect::<Vec<_>>();\n-    let stderr = ::std::io::stderr();\n-    let mut stderr = stderr.lock();\n-\n-    writeln!(stderr, \"some {} text\", \"<unknown>\").unwrap();\n-\n-    let _ = std::process::Command::new(\"true\").env(\"c\", \"d\").spawn();\n-\n-    println!(\"cargo:rustc-link-lib=z\");\n-\n-    static ONCE: std::sync::Once = std::sync::ONCE_INIT;\n-    ONCE.call_once(|| {});\n-\n-    LoopState::Continue(()) == LoopState::Break(());\n-\n-    // Make sure ByValPair values with differently sized components are correctly passed\n-    map(None::<(u8, Box<Instruction>)>);\n-\n-    println!(\"{}\", 2.3f32.exp());\n-    println!(\"{}\", 2.3f32.exp2());\n-    println!(\"{}\", 2.3f32.abs());\n-    println!(\"{}\", 2.3f32.sqrt());\n-    println!(\"{}\", 2.3f32.floor());\n-    println!(\"{}\", 2.3f32.ceil());\n-    println!(\"{}\", 2.3f32.min(1.0));\n-    println!(\"{}\", 2.3f32.max(1.0));\n+    assert_eq!((1u128 + 2) as u16, 3);\n }\n \n #[derive(PartialEq)]"}, {"sha": "7163c0949f7730fdfe69e7bb961c4a672d255f4e", "filename": "src/base.rs", "status": "modified", "additions": 7, "deletions": 82, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/c814ee0d2a7b9f67cf2be6a6488d07105606c64c/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c814ee0d2a7b9f67cf2be6a6488d07105606c64c/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=c814ee0d2a7b9f67cf2be6a6488d07105606c64c", "patch": "@@ -11,83 +11,6 @@ pub fn trans_fn<'a, 'clif, 'tcx: 'a, B: Backend + 'static>(\n \n     let mir = tcx.instance_mir(instance.def);\n \n-    // Check fn sig for u128 and i128 and replace those functions with a trap.\n-    {\n-        // FIXME implement u128 and i128 support\n-\n-        // Check sig for u128 and i128\n-        let fn_sig = tcx.normalize_erasing_late_bound_regions(ParamEnv::reveal_all(), &instance.fn_sig(tcx));\n-\n-        struct UI128Visitor<'tcx>(TyCtxt<'tcx>, bool);\n-\n-        impl<'tcx> rustc::ty::fold::TypeVisitor<'tcx> for UI128Visitor<'tcx> {\n-            fn visit_ty(&mut self, t: Ty<'tcx>) -> bool {\n-                if t.sty == self.0.types.u128.sty || t.sty == self.0.types.i128.sty {\n-                    self.1 = true;\n-                    return false; // stop visiting\n-                }\n-\n-                t.super_visit_with(self)\n-            }\n-        }\n-\n-        let mut visitor = UI128Visitor(tcx, false);\n-        fn_sig.visit_with(&mut visitor);\n-\n-        //If found replace function with a trap.\n-        if visitor.1 {\n-            tcx.sess.warn(\"u128 and i128 are not yet supported. \\\n-            Functions using these as args will be replaced with a trap.\");\n-\n-            // Declare function with fake signature\n-            let sig = Signature {\n-                params: vec![AbiParam::new(types::INVALID)],\n-                returns: vec![],\n-                call_conv: CallConv::Fast,\n-            };\n-            let name = tcx.symbol_name(instance).as_str();\n-            let func_id = cx.module.declare_function(&*name, linkage, &sig).unwrap();\n-\n-            // Create trapping function\n-            let mut func = Function::with_name_signature(ExternalName::user(0, 0), sig);\n-            let mut func_ctx = FunctionBuilderContext::new();\n-            let mut bcx = FunctionBuilder::new(&mut func, &mut func_ctx);\n-            let start_ebb = bcx.create_ebb();\n-            bcx.append_ebb_params_for_function_params(start_ebb);\n-            bcx.switch_to_block(start_ebb);\n-\n-            let mut fx = FunctionCx {\n-                tcx,\n-                module: cx.module,\n-                pointer_type: pointer_ty(tcx),\n-\n-                instance,\n-                mir,\n-\n-                bcx,\n-                ebb_map: HashMap::new(),\n-                local_map: HashMap::new(),\n-\n-                clif_comments: crate::pretty_clif::CommentWriter::new(tcx, instance),\n-                constants: &mut cx.ccx,\n-                caches: &mut cx.caches,\n-                source_info_set: indexmap::IndexSet::new(),\n-            };\n-\n-            crate::trap::trap_unreachable(&mut fx, \"[unimplemented] Called function with u128 or i128 as argument.\");\n-            fx.bcx.seal_all_blocks();\n-            fx.bcx.finalize();\n-\n-            // Define function\n-            cx.caches.context.func = func;\n-            cx.module\n-                .define_function(func_id, &mut cx.caches.context)\n-                .unwrap();\n-            cx.caches.context.clear();\n-            return;\n-        }\n-    }\n-\n     // Declare function\n     let (name, sig) = get_function_name_and_sig(tcx, instance, false);\n     let func_id = cx.module.declare_function(&name, linkage, &sig).unwrap();\n@@ -391,7 +314,7 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                     let rhs = trans_operand(fx, rhs);\n \n                     let res = match ty.sty {\n-                        ty::Bool => trans_bool_binop(fx, *bin_op, lhs, rhs, lval.layout().ty),\n+                        ty::Bool => trans_bool_binop(fx, *bin_op, lhs, rhs),\n                         ty::Uint(_) => {\n                             trans_int_binop(fx, *bin_op, lhs, rhs, lval.layout().ty, false)\n                         }\n@@ -666,7 +589,7 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                 clobbers, // Vec<Name>\n                 volatile, // bool\n                 alignstack, // bool\n-                dialect, // syntax::ast::AsmDialect\n+                dialect: _, // syntax::ast::AsmDialect\n                 asm_str_style: _,\n                 ctxt: _,\n             } = asm;\n@@ -705,6 +628,9 @@ fn trans_stmt<'a, 'tcx: 'a>(\n \n                     crate::trap::trap_unimplemented(fx, \"_xgetbv arch intrinsic is not supported\");\n                 }\n+                _ if fx.tcx.symbol_name(fx.instance).as_str() == \"__rust_probestack\" => {\n+                    crate::trap::trap_unimplemented(fx, \"__rust_probestack is not supported\");\n+                }\n                 _ => unimpl!(\"Inline assembly is not supported\"),\n             }\n         }\n@@ -856,10 +782,9 @@ fn trans_bool_binop<'a, 'tcx: 'a>(\n     bin_op: BinOp,\n     lhs: CValue<'tcx>,\n     rhs: CValue<'tcx>,\n-    ty: Ty<'tcx>,\n ) -> CValue<'tcx> {\n     let res = binop_match! {\n-        fx, bin_op, false, lhs, rhs, ty, \"bool\";\n+        fx, bin_op, false, lhs, rhs, fx.tcx.types.bool, \"bool\";\n         Add (_) bug;\n         Sub (_) bug;\n         Mul (_) bug;\n@@ -900,7 +825,7 @@ pub fn trans_int_binop<'a, 'tcx: 'a>(\n         );\n     }\n \n-    if out_ty == fx.tcx.types.u128 || out_ty == fx.tcx.types.i128 {\n+    if lhs.layout().ty == fx.tcx.types.u128 || lhs.layout().ty == fx.tcx.types.i128 {\n         return match (bin_op, signed) {\n             _ => {\n                 let layout = fx.layout_of(out_ty);"}, {"sha": "57794a66b9c24f99c572f947a7a8fe27f4885f66", "filename": "src/common.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c814ee0d2a7b9f67cf2be6a6488d07105606c64c/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c814ee0d2a7b9f67cf2be6a6488d07105606c64c/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=c814ee0d2a7b9f67cf2be6a6488d07105606c64c", "patch": "@@ -82,14 +82,23 @@ pub fn clif_intcast<'a, 'tcx: 'a>(\n     if from == to {\n         return val;\n     }\n+    if to == types::I128 {\n+        let wider = if signed {\n+            fx.bcx.ins().sextend(types::I64, val)\n+        } else {\n+            fx.bcx.ins().uextend(types::I64, val)\n+        };\n+        let zero = fx.bcx.ins().iconst(types::I64, 0);\n+        return fx.bcx.ins().iconcat(wider, zero);\n+    }\n     if to.wider_or_equal(from) {\n         if signed {\n             fx.bcx.ins().sextend(to, val)\n         } else {\n             fx.bcx.ins().uextend(to, val)\n         }\n     } else if from == types::I128 {\n-        let (lsb, msb) = fx.bcx.ins().isplit(val);\n+        let (lsb, _msb) = fx.bcx.ins().isplit(val);\n         fx.bcx.ins().ireduce(to, lsb)\n     } else {\n         fx.bcx.ins().ireduce(to, val)"}]}