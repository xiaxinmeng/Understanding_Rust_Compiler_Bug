{"sha": "f0212e65321cf4e6a05ac78d44ec242829ffa289", "node_id": "C_kwDOAAsO6NoAKGYwMjEyZTY1MzIxY2Y0ZTZhMDVhYzc4ZDQ0ZWMyNDI4MjlmZmEyODk", "commit": {"author": {"name": "Nathan Fenner", "email": "nfenneremail@gmail.com", "date": "2023-02-28T22:58:14Z"}, "committer": {"name": "Nathan Fenner", "email": "nfenneremail@gmail.com", "date": "2023-02-28T22:58:14Z"}, "message": "Fix error spans for arguments to tuple enum constructors", "tree": {"sha": "3572a0e0367f5af64990dbd0ef760a8ff9de8799", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3572a0e0367f5af64990dbd0ef760a8ff9de8799"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0212e65321cf4e6a05ac78d44ec242829ffa289", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0212e65321cf4e6a05ac78d44ec242829ffa289", "html_url": "https://github.com/rust-lang/rust/commit/f0212e65321cf4e6a05ac78d44ec242829ffa289", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0212e65321cf4e6a05ac78d44ec242829ffa289/comments", "author": {"login": "Nathan-Fenner", "id": 6179181, "node_id": "MDQ6VXNlcjYxNzkxODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6179181?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nathan-Fenner", "html_url": "https://github.com/Nathan-Fenner", "followers_url": "https://api.github.com/users/Nathan-Fenner/followers", "following_url": "https://api.github.com/users/Nathan-Fenner/following{/other_user}", "gists_url": "https://api.github.com/users/Nathan-Fenner/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nathan-Fenner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nathan-Fenner/subscriptions", "organizations_url": "https://api.github.com/users/Nathan-Fenner/orgs", "repos_url": "https://api.github.com/users/Nathan-Fenner/repos", "events_url": "https://api.github.com/users/Nathan-Fenner/events{/privacy}", "received_events_url": "https://api.github.com/users/Nathan-Fenner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nathan-Fenner", "id": 6179181, "node_id": "MDQ6VXNlcjYxNzkxODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6179181?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nathan-Fenner", "html_url": "https://github.com/Nathan-Fenner", "followers_url": "https://api.github.com/users/Nathan-Fenner/followers", "following_url": "https://api.github.com/users/Nathan-Fenner/following{/other_user}", "gists_url": "https://api.github.com/users/Nathan-Fenner/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nathan-Fenner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nathan-Fenner/subscriptions", "organizations_url": "https://api.github.com/users/Nathan-Fenner/orgs", "repos_url": "https://api.github.com/users/Nathan-Fenner/repos", "events_url": "https://api.github.com/users/Nathan-Fenner/events{/privacy}", "received_events_url": "https://api.github.com/users/Nathan-Fenner/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2566b4105d60a422229c645a784186b52e15fde6", "url": "https://api.github.com/repos/rust-lang/rust/commits/2566b4105d60a422229c645a784186b52e15fde6", "html_url": "https://github.com/rust-lang/rust/commit/2566b4105d60a422229c645a784186b52e15fde6"}], "stats": {"total": 382, "additions": 371, "deletions": 11}, "files": [{"sha": "778e0bdaefd63392d8e2e0df2b4e190bea6bc187", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/adjust_fulfillment_errors.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f0212e65321cf4e6a05ac78d44ec242829ffa289/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0212e65321cf4e6a05ac78d44ec242829ffa289/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs?ref=f0212e65321cf4e6a05ac78d44ec242829ffa289", "patch": "@@ -714,12 +714,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     self.tcx.parent(expr_ctor_def_id)\n                 }\n                 hir::def::DefKind::Ctor(hir::def::CtorOf::Variant, hir::def::CtorKind::Fn) => {\n-                    if in_ty_adt.did() == self.tcx.parent(expr_ctor_def_id) {\n-                        // The constructor definition refers to the variant:\n-                        // For example, for a local type `MyEnum::MyVariant` triggers this case.\n-                        expr_ctor_def_id\n-                    } else if in_ty_adt.did() == self.tcx.parent(self.tcx.parent(expr_ctor_def_id))\n-                    {\n+                    // For a typical enum like\n+                    // `enum Blah<T> { Variant(T) }`\n+                    // we get the following resolutions:\n+                    // - expr_ctor_def_id :::                                   DefId(0:29 ~ source_file[b442]::Blah::Variant::{constructor#0})\n+                    // - self.tcx.parent(expr_ctor_def_id) :::                  DefId(0:28 ~ source_file[b442]::Blah::Variant)\n+                    // - self.tcx.parent(self.tcx.parent(expr_ctor_def_id)) ::: DefId(0:26 ~ source_file[b442]::Blah)\n+\n+                    // Therefore, we need to go up once to obtain the variant and up twice to obtain the type.\n+                    // Note that this pattern still holds even when we `use` a variant or `use` an enum type to rename it, or chain `use` expressions\n+                    // together; this resolution is handled automatically by `qpath_res`.\n+\n+                    // FIXME: Deal with type aliases?\n+                    if in_ty_adt.did() == self.tcx.parent(self.tcx.parent(expr_ctor_def_id)) {\n                         // The constructor definition refers to the \"constructor\" of the variant:\n                         // For example, `Some(5)` triggers this case.\n                         self.tcx.parent(expr_ctor_def_id)"}, {"sha": "0fbd851431ea6c6fa9959856fa3e558a1f0c6f1a", "filename": "tests/ui/errors/trait-bound-error-spans/blame-trait-error.rs", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/f0212e65321cf4e6a05ac78d44ec242829ffa289/tests%2Fui%2Ferrors%2Ftrait-bound-error-spans%2Fblame-trait-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0212e65321cf4e6a05ac78d44ec242829ffa289/tests%2Fui%2Ferrors%2Ftrait-bound-error-spans%2Fblame-trait-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferrors%2Ftrait-bound-error-spans%2Fblame-trait-error.rs?ref=f0212e65321cf4e6a05ac78d44ec242829ffa289", "patch": "@@ -24,6 +24,31 @@ impl<'a, A: T1> T1 for &'a A {}\n \n fn want<V: T1>(_x: V) {}\n \n+enum ExampleTuple<T> {\n+    ExampleTupleVariant(T),\n+}\n+use ExampleDifferentTupleVariantName as ExampleYetAnotherTupleVariantName;\n+use ExampleTuple as ExampleOtherTuple;\n+use ExampleTuple::ExampleTupleVariant as ExampleDifferentTupleVariantName;\n+use ExampleTuple::*;\n+\n+impl<A> T1 for ExampleTuple<A> where A: T3 {}\n+\n+enum ExampleStruct<T> {\n+    ExampleStructVariant { field: T },\n+}\n+use ExampleDifferentStructVariantName as ExampleYetAnotherStructVariantName;\n+use ExampleStruct as ExampleOtherStruct;\n+use ExampleStruct::ExampleStructVariant as ExampleDifferentStructVariantName;\n+use ExampleStruct::*;\n+\n+impl<A> T1 for ExampleStruct<A> where A: T3 {}\n+\n+struct ExampleActuallyTupleStruct<T>(T, i32);\n+use ExampleActuallyTupleStruct as ExampleActuallyTupleStructOther;\n+\n+impl<A> T1 for ExampleActuallyTupleStruct<A> where A: T3 {}\n+\n fn example<Q>(q: Q) {\n     want(Wrapper { value: Burrito { filling: q } });\n     //~^ ERROR the trait bound `Q: T3` is not satisfied [E0277]\n@@ -36,6 +61,42 @@ fn example<Q>(q: Q) {\n \n     want(&Some(q));\n     //~^ ERROR `Q` is not an iterator [E0277]\n+\n+    want(&ExampleTuple::ExampleTupleVariant(q));\n+    //~^ ERROR `Q: T3` is not satisfied [E0277]\n+\n+    want(&ExampleTupleVariant(q));\n+    //~^ ERROR `Q: T3` is not satisfied [E0277]\n+\n+    want(&ExampleOtherTuple::ExampleTupleVariant(q));\n+    //~^ ERROR `Q: T3` is not satisfied [E0277]\n+\n+    want(&ExampleDifferentTupleVariantName(q));\n+    //~^ ERROR `Q: T3` is not satisfied [E0277]\n+\n+    want(&ExampleYetAnotherTupleVariantName(q));\n+    //~^ ERROR `Q: T3` is not satisfied [E0277]\n+\n+    want(&ExampleStruct::ExampleStructVariant { field: q });\n+    //~^ ERROR `Q: T3` is not satisfied [E0277]\n+\n+    want(&ExampleStructVariant { field: q });\n+    //~^ ERROR `Q: T3` is not satisfied [E0277]\n+\n+    want(&ExampleOtherStruct::ExampleStructVariant { field: q });\n+    //~^ ERROR `Q: T3` is not satisfied [E0277]\n+\n+    want(&ExampleDifferentStructVariantName { field: q });\n+    //~^ ERROR `Q: T3` is not satisfied [E0277]\n+\n+    want(&ExampleYetAnotherStructVariantName { field: q });\n+    //~^ ERROR `Q: T3` is not satisfied [E0277]\n+\n+    want(&ExampleActuallyTupleStruct(q, 0));\n+    //~^ ERROR `Q: T3` is not satisfied [E0277]\n+\n+    want(&ExampleActuallyTupleStructOther(q, 0));\n+    //~^ ERROR `Q: T3` is not satisfied [E0277]\n }\n \n fn main() {}"}, {"sha": "9228a047e8785c0930d45b5e40ec2a435f744552", "filename": "tests/ui/errors/trait-bound-error-spans/blame-trait-error.stderr", "status": "modified", "additions": 297, "deletions": 5, "changes": 302, "blob_url": "https://github.com/rust-lang/rust/blob/f0212e65321cf4e6a05ac78d44ec242829ffa289/tests%2Fui%2Ferrors%2Ftrait-bound-error-spans%2Fblame-trait-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0212e65321cf4e6a05ac78d44ec242829ffa289/tests%2Fui%2Ferrors%2Ftrait-bound-error-spans%2Fblame-trait-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferrors%2Ftrait-bound-error-spans%2Fblame-trait-error.stderr?ref=f0212e65321cf4e6a05ac78d44ec242829ffa289", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Q: T3` is not satisfied\n-  --> $DIR/blame-trait-error.rs:28:46\n+  --> $DIR/blame-trait-error.rs:53:46\n    |\n LL |     want(Wrapper { value: Burrito { filling: q } });\n    |     ----                                     ^ the trait `T3` is not implemented for `Q`\n@@ -31,7 +31,7 @@ LL | fn example<Q: T3>(q: Q) {\n    |             ++++\n \n error[E0277]: `()` is not an iterator\n-  --> $DIR/blame-trait-error.rs:31:15\n+  --> $DIR/blame-trait-error.rs:56:15\n    |\n LL |     want(Some(()));\n    |     ----      ^^ `()` is not an iterator\n@@ -54,7 +54,7 @@ LL | fn want<V: T1>(_x: V) {}\n    |            ^^ required by this bound in `want`\n \n error[E0277]: `Q` is not an iterator\n-  --> $DIR/blame-trait-error.rs:34:15\n+  --> $DIR/blame-trait-error.rs:59:15\n    |\n LL |     want(Some(q));\n    |     ----      ^ `Q` is not an iterator\n@@ -79,7 +79,7 @@ LL | fn example<Q: std::iter::Iterator>(q: Q) {\n    |             +++++++++++++++++++++\n \n error[E0277]: `Q` is not an iterator\n-  --> $DIR/blame-trait-error.rs:37:16\n+  --> $DIR/blame-trait-error.rs:62:16\n    |\n LL |     want(&Some(q));\n    |     ----       ^ `Q` is not an iterator\n@@ -105,6 +105,298 @@ help: consider restricting type parameter `Q`\n LL | fn example<Q: std::iter::Iterator>(q: Q) {\n    |             +++++++++++++++++++++\n \n-error: aborting due to 4 previous errors\n+error[E0277]: the trait bound `Q: T3` is not satisfied\n+  --> $DIR/blame-trait-error.rs:65:45\n+   |\n+LL |     want(&ExampleTuple::ExampleTupleVariant(q));\n+   |     ----                                    ^ the trait `T3` is not implemented for `Q`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required for `ExampleTuple<Q>` to implement `T1`\n+  --> $DIR/blame-trait-error.rs:35:9\n+   |\n+LL | impl<A> T1 for ExampleTuple<A> where A: T3 {}\n+   |         ^^     ^^^^^^^^^^^^^^^          -- unsatisfied trait bound introduced here\n+   = note: 1 redundant requirement hidden\n+   = note: required for `&ExampleTuple<Q>` to implement `T1`\n+note: required by a bound in `want`\n+  --> $DIR/blame-trait-error.rs:25:12\n+   |\n+LL | fn want<V: T1>(_x: V) {}\n+   |            ^^ required by this bound in `want`\n+help: consider restricting type parameter `Q`\n+   |\n+LL | fn example<Q: T3>(q: Q) {\n+   |             ++++\n+\n+error[E0277]: the trait bound `Q: T3` is not satisfied\n+  --> $DIR/blame-trait-error.rs:68:31\n+   |\n+LL |     want(&ExampleTupleVariant(q));\n+   |     ----                      ^ the trait `T3` is not implemented for `Q`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required for `ExampleTuple<Q>` to implement `T1`\n+  --> $DIR/blame-trait-error.rs:35:9\n+   |\n+LL | impl<A> T1 for ExampleTuple<A> where A: T3 {}\n+   |         ^^     ^^^^^^^^^^^^^^^          -- unsatisfied trait bound introduced here\n+   = note: 1 redundant requirement hidden\n+   = note: required for `&ExampleTuple<Q>` to implement `T1`\n+note: required by a bound in `want`\n+  --> $DIR/blame-trait-error.rs:25:12\n+   |\n+LL | fn want<V: T1>(_x: V) {}\n+   |            ^^ required by this bound in `want`\n+help: consider restricting type parameter `Q`\n+   |\n+LL | fn example<Q: T3>(q: Q) {\n+   |             ++++\n+\n+error[E0277]: the trait bound `Q: T3` is not satisfied\n+  --> $DIR/blame-trait-error.rs:71:50\n+   |\n+LL |     want(&ExampleOtherTuple::ExampleTupleVariant(q));\n+   |     ----                                         ^ the trait `T3` is not implemented for `Q`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required for `ExampleTuple<Q>` to implement `T1`\n+  --> $DIR/blame-trait-error.rs:35:9\n+   |\n+LL | impl<A> T1 for ExampleTuple<A> where A: T3 {}\n+   |         ^^     ^^^^^^^^^^^^^^^          -- unsatisfied trait bound introduced here\n+   = note: 1 redundant requirement hidden\n+   = note: required for `&ExampleTuple<Q>` to implement `T1`\n+note: required by a bound in `want`\n+  --> $DIR/blame-trait-error.rs:25:12\n+   |\n+LL | fn want<V: T1>(_x: V) {}\n+   |            ^^ required by this bound in `want`\n+help: consider restricting type parameter `Q`\n+   |\n+LL | fn example<Q: T3>(q: Q) {\n+   |             ++++\n+\n+error[E0277]: the trait bound `Q: T3` is not satisfied\n+  --> $DIR/blame-trait-error.rs:74:44\n+   |\n+LL |     want(&ExampleDifferentTupleVariantName(q));\n+   |     ----                                   ^ the trait `T3` is not implemented for `Q`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required for `ExampleTuple<Q>` to implement `T1`\n+  --> $DIR/blame-trait-error.rs:35:9\n+   |\n+LL | impl<A> T1 for ExampleTuple<A> where A: T3 {}\n+   |         ^^     ^^^^^^^^^^^^^^^          -- unsatisfied trait bound introduced here\n+   = note: 1 redundant requirement hidden\n+   = note: required for `&ExampleTuple<Q>` to implement `T1`\n+note: required by a bound in `want`\n+  --> $DIR/blame-trait-error.rs:25:12\n+   |\n+LL | fn want<V: T1>(_x: V) {}\n+   |            ^^ required by this bound in `want`\n+help: consider restricting type parameter `Q`\n+   |\n+LL | fn example<Q: T3>(q: Q) {\n+   |             ++++\n+\n+error[E0277]: the trait bound `Q: T3` is not satisfied\n+  --> $DIR/blame-trait-error.rs:77:45\n+   |\n+LL |     want(&ExampleYetAnotherTupleVariantName(q));\n+   |     ----                                    ^ the trait `T3` is not implemented for `Q`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required for `ExampleTuple<Q>` to implement `T1`\n+  --> $DIR/blame-trait-error.rs:35:9\n+   |\n+LL | impl<A> T1 for ExampleTuple<A> where A: T3 {}\n+   |         ^^     ^^^^^^^^^^^^^^^          -- unsatisfied trait bound introduced here\n+   = note: 1 redundant requirement hidden\n+   = note: required for `&ExampleTuple<Q>` to implement `T1`\n+note: required by a bound in `want`\n+  --> $DIR/blame-trait-error.rs:25:12\n+   |\n+LL | fn want<V: T1>(_x: V) {}\n+   |            ^^ required by this bound in `want`\n+help: consider restricting type parameter `Q`\n+   |\n+LL | fn example<Q: T3>(q: Q) {\n+   |             ++++\n+\n+error[E0277]: the trait bound `Q: T3` is not satisfied\n+  --> $DIR/blame-trait-error.rs:80:56\n+   |\n+LL |     want(&ExampleStruct::ExampleStructVariant { field: q });\n+   |     ---- required by a bound introduced by this call   ^ the trait `T3` is not implemented for `Q`\n+   |\n+note: required for `ExampleStruct<Q>` to implement `T1`\n+  --> $DIR/blame-trait-error.rs:45:9\n+   |\n+LL | impl<A> T1 for ExampleStruct<A> where A: T3 {}\n+   |         ^^     ^^^^^^^^^^^^^^^^          -- unsatisfied trait bound introduced here\n+   = note: 1 redundant requirement hidden\n+   = note: required for `&ExampleStruct<Q>` to implement `T1`\n+note: required by a bound in `want`\n+  --> $DIR/blame-trait-error.rs:25:12\n+   |\n+LL | fn want<V: T1>(_x: V) {}\n+   |            ^^ required by this bound in `want`\n+help: consider restricting type parameter `Q`\n+   |\n+LL | fn example<Q: T3>(q: Q) {\n+   |             ++++\n+\n+error[E0277]: the trait bound `Q: T3` is not satisfied\n+  --> $DIR/blame-trait-error.rs:83:41\n+   |\n+LL |     want(&ExampleStructVariant { field: q });\n+   |     ----                                ^ the trait `T3` is not implemented for `Q`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required for `ExampleStruct<Q>` to implement `T1`\n+  --> $DIR/blame-trait-error.rs:45:9\n+   |\n+LL | impl<A> T1 for ExampleStruct<A> where A: T3 {}\n+   |         ^^     ^^^^^^^^^^^^^^^^          -- unsatisfied trait bound introduced here\n+   = note: 1 redundant requirement hidden\n+   = note: required for `&ExampleStruct<Q>` to implement `T1`\n+note: required by a bound in `want`\n+  --> $DIR/blame-trait-error.rs:25:12\n+   |\n+LL | fn want<V: T1>(_x: V) {}\n+   |            ^^ required by this bound in `want`\n+help: consider restricting type parameter `Q`\n+   |\n+LL | fn example<Q: T3>(q: Q) {\n+   |             ++++\n+\n+error[E0277]: the trait bound `Q: T3` is not satisfied\n+  --> $DIR/blame-trait-error.rs:86:61\n+   |\n+LL |     want(&ExampleOtherStruct::ExampleStructVariant { field: q });\n+   |     ---- required by a bound introduced by this call        ^ the trait `T3` is not implemented for `Q`\n+   |\n+note: required for `ExampleStruct<Q>` to implement `T1`\n+  --> $DIR/blame-trait-error.rs:45:9\n+   |\n+LL | impl<A> T1 for ExampleStruct<A> where A: T3 {}\n+   |         ^^     ^^^^^^^^^^^^^^^^          -- unsatisfied trait bound introduced here\n+   = note: 1 redundant requirement hidden\n+   = note: required for `&ExampleStruct<Q>` to implement `T1`\n+note: required by a bound in `want`\n+  --> $DIR/blame-trait-error.rs:25:12\n+   |\n+LL | fn want<V: T1>(_x: V) {}\n+   |            ^^ required by this bound in `want`\n+help: consider restricting type parameter `Q`\n+   |\n+LL | fn example<Q: T3>(q: Q) {\n+   |             ++++\n+\n+error[E0277]: the trait bound `Q: T3` is not satisfied\n+  --> $DIR/blame-trait-error.rs:89:54\n+   |\n+LL |     want(&ExampleDifferentStructVariantName { field: q });\n+   |     ---- required by a bound introduced by this call ^ the trait `T3` is not implemented for `Q`\n+   |\n+note: required for `ExampleStruct<Q>` to implement `T1`\n+  --> $DIR/blame-trait-error.rs:45:9\n+   |\n+LL | impl<A> T1 for ExampleStruct<A> where A: T3 {}\n+   |         ^^     ^^^^^^^^^^^^^^^^          -- unsatisfied trait bound introduced here\n+   = note: 1 redundant requirement hidden\n+   = note: required for `&ExampleStruct<Q>` to implement `T1`\n+note: required by a bound in `want`\n+  --> $DIR/blame-trait-error.rs:25:12\n+   |\n+LL | fn want<V: T1>(_x: V) {}\n+   |            ^^ required by this bound in `want`\n+help: consider restricting type parameter `Q`\n+   |\n+LL | fn example<Q: T3>(q: Q) {\n+   |             ++++\n+\n+error[E0277]: the trait bound `Q: T3` is not satisfied\n+  --> $DIR/blame-trait-error.rs:92:55\n+   |\n+LL |     want(&ExampleYetAnotherStructVariantName { field: q });\n+   |     ---- required by a bound introduced by this call  ^ the trait `T3` is not implemented for `Q`\n+   |\n+note: required for `ExampleStruct<Q>` to implement `T1`\n+  --> $DIR/blame-trait-error.rs:45:9\n+   |\n+LL | impl<A> T1 for ExampleStruct<A> where A: T3 {}\n+   |         ^^     ^^^^^^^^^^^^^^^^          -- unsatisfied trait bound introduced here\n+   = note: 1 redundant requirement hidden\n+   = note: required for `&ExampleStruct<Q>` to implement `T1`\n+note: required by a bound in `want`\n+  --> $DIR/blame-trait-error.rs:25:12\n+   |\n+LL | fn want<V: T1>(_x: V) {}\n+   |            ^^ required by this bound in `want`\n+help: consider restricting type parameter `Q`\n+   |\n+LL | fn example<Q: T3>(q: Q) {\n+   |             ++++\n+\n+error[E0277]: the trait bound `Q: T3` is not satisfied\n+  --> $DIR/blame-trait-error.rs:95:38\n+   |\n+LL |     want(&ExampleActuallyTupleStruct(q, 0));\n+   |     ----                             ^ the trait `T3` is not implemented for `Q`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required for `ExampleActuallyTupleStruct<Q>` to implement `T1`\n+  --> $DIR/blame-trait-error.rs:50:9\n+   |\n+LL | impl<A> T1 for ExampleActuallyTupleStruct<A> where A: T3 {}\n+   |         ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          -- unsatisfied trait bound introduced here\n+   = note: 1 redundant requirement hidden\n+   = note: required for `&ExampleActuallyTupleStruct<Q>` to implement `T1`\n+note: required by a bound in `want`\n+  --> $DIR/blame-trait-error.rs:25:12\n+   |\n+LL | fn want<V: T1>(_x: V) {}\n+   |            ^^ required by this bound in `want`\n+help: consider restricting type parameter `Q`\n+   |\n+LL | fn example<Q: T3>(q: Q) {\n+   |             ++++\n+\n+error[E0277]: the trait bound `Q: T3` is not satisfied\n+  --> $DIR/blame-trait-error.rs:98:43\n+   |\n+LL |     want(&ExampleActuallyTupleStructOther(q, 0));\n+   |     ----                                  ^ the trait `T3` is not implemented for `Q`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required for `ExampleActuallyTupleStruct<Q>` to implement `T1`\n+  --> $DIR/blame-trait-error.rs:50:9\n+   |\n+LL | impl<A> T1 for ExampleActuallyTupleStruct<A> where A: T3 {}\n+   |         ^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          -- unsatisfied trait bound introduced here\n+   = note: 1 redundant requirement hidden\n+   = note: required for `&ExampleActuallyTupleStruct<Q>` to implement `T1`\n+note: required by a bound in `want`\n+  --> $DIR/blame-trait-error.rs:25:12\n+   |\n+LL | fn want<V: T1>(_x: V) {}\n+   |            ^^ required by this bound in `want`\n+help: consider restricting type parameter `Q`\n+   |\n+LL | fn example<Q: T3>(q: Q) {\n+   |             ++++\n+\n+error: aborting due to 16 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}]}