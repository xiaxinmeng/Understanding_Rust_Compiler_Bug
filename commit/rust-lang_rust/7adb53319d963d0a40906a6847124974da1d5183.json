{"sha": "7adb53319d963d0a40906a6847124974da1d5183", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhZGI1MzMxOWQ5NjNkMGE0MDkwNmE2ODQ3MTI0OTc0ZGExZDUxODM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-20T15:47:22Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-20T15:52:02Z"}, "message": "Make items private", "tree": {"sha": "a4bb71f92d6492e7826f0c54a44e09cd1647e701", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4bb71f92d6492e7826f0c54a44e09cd1647e701"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7adb53319d963d0a40906a6847124974da1d5183", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7adb53319d963d0a40906a6847124974da1d5183", "html_url": "https://github.com/rust-lang/rust/commit/7adb53319d963d0a40906a6847124974da1d5183", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7adb53319d963d0a40906a6847124974da1d5183/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6b1194f2f33722f0cfed32465f778b256162626", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6b1194f2f33722f0cfed32465f778b256162626", "html_url": "https://github.com/rust-lang/rust/commit/e6b1194f2f33722f0cfed32465f778b256162626"}], "stats": {"total": 88, "additions": 42, "deletions": 46}, "files": [{"sha": "ac56986cd49f431778efa1170c445c0720ca3336", "filename": "crates/ra_hir_def/src/item_scope.rs", "status": "modified", "additions": 40, "deletions": 36, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/7adb53319d963d0a40906a6847124974da1d5183/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7adb53319d963d0a40906a6847124974da1d5183/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs?ref=7adb53319d963d0a40906a6847124974da1d5183", "patch": "@@ -9,7 +9,7 @@ use crate::{per_ns::PerNs, BuiltinType, ImplId, LocalImportId, MacroDefId, Modul\n \n #[derive(Debug, Default, PartialEq, Eq)]\n pub struct ItemScope {\n-    pub(crate) items: FxHashMap<Name, Resolution>,\n+    items: FxHashMap<Name, Resolution>,\n     pub(crate) impls: Vec<ImplId>,\n     /// Macros visible in current module in legacy textual scope\n     ///\n@@ -47,41 +47,6 @@ pub(crate) enum BuiltinShadowMode {\n /// Legacy macros can only be accessed through special methods like `get_legacy_macros`.\n /// Other methods will only resolve values, types and module scoped macros only.\n impl ItemScope {\n-    pub fn push_res(\n-        &mut self,\n-        name: Name,\n-        res: &Resolution,\n-        import: Option<LocalImportId>,\n-    ) -> bool {\n-        let mut changed = false;\n-        let existing = self.items.entry(name.clone()).or_default();\n-\n-        if existing.def.types.is_none() && res.def.types.is_some() {\n-            existing.def.types = res.def.types;\n-            existing.import = import.or(res.import);\n-            changed = true;\n-        }\n-        if existing.def.values.is_none() && res.def.values.is_some() {\n-            existing.def.values = res.def.values;\n-            existing.import = import.or(res.import);\n-            changed = true;\n-        }\n-        if existing.def.macros.is_none() && res.def.macros.is_some() {\n-            existing.def.macros = res.def.macros;\n-            existing.import = import.or(res.import);\n-            changed = true;\n-        }\n-\n-        if existing.def.is_none()\n-            && res.def.is_none()\n-            && existing.import.is_none()\n-            && res.import.is_some()\n-        {\n-            existing.import = res.import;\n-        }\n-        changed\n-    }\n-\n     pub fn entries<'a>(&'a self) -> impl Iterator<Item = (&'a Name, &'a Resolution)> + 'a {\n         //FIXME: shadowing\n         self.items.iter().chain(BUILTIN_SCOPE.iter())\n@@ -138,6 +103,45 @@ impl ItemScope {\n     pub(crate) fn get_legacy_macro(&self, name: &Name) -> Option<MacroDefId> {\n         self.legacy_macros.get(name).copied()\n     }\n+\n+    pub(crate) fn push_res(\n+        &mut self,\n+        name: Name,\n+        res: &Resolution,\n+        import: Option<LocalImportId>,\n+    ) -> bool {\n+        let mut changed = false;\n+        let existing = self.items.entry(name.clone()).or_default();\n+\n+        if existing.def.types.is_none() && res.def.types.is_some() {\n+            existing.def.types = res.def.types;\n+            existing.import = import.or(res.import);\n+            changed = true;\n+        }\n+        if existing.def.values.is_none() && res.def.values.is_some() {\n+            existing.def.values = res.def.values;\n+            existing.import = import.or(res.import);\n+            changed = true;\n+        }\n+        if existing.def.macros.is_none() && res.def.macros.is_some() {\n+            existing.def.macros = res.def.macros;\n+            existing.import = import.or(res.import);\n+            changed = true;\n+        }\n+\n+        if existing.def.is_none()\n+            && res.def.is_none()\n+            && existing.import.is_none()\n+            && res.import.is_some()\n+        {\n+            existing.import = res.import;\n+        }\n+        changed\n+    }\n+\n+    pub(crate) fn collect_resolutions(&self) -> Vec<(Name, Resolution)> {\n+        self.items.iter().map(|(name, res)| (name.clone(), res.clone())).collect()\n+    }\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Default)]"}, {"sha": "d62fae8a6450fab85b5df3148d3d8adba73d7f6b", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7adb53319d963d0a40906a6847124974da1d5183/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7adb53319d963d0a40906a6847124974da1d5183/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=7adb53319d963d0a40906a6847124974da1d5183", "patch": "@@ -372,11 +372,7 @@ where\n                         let scope = &item_map[m.local_id].scope;\n \n                         // Module scoped macros is included\n-                        let items = scope\n-                            .items\n-                            .iter()\n-                            .map(|(name, res)| (name.clone(), res.clone()))\n-                            .collect::<Vec<_>>();\n+                        let items = scope.collect_resolutions();\n \n                         self.update(module_id, Some(import_id), &items);\n                     } else {\n@@ -386,11 +382,7 @@ where\n                         let scope = &self.def_map[m.local_id].scope;\n \n                         // Module scoped macros is included\n-                        let items = scope\n-                            .items\n-                            .iter()\n-                            .map(|(name, res)| (name.clone(), res.clone()))\n-                            .collect::<Vec<_>>();\n+                        let items = scope.collect_resolutions();\n \n                         self.update(module_id, Some(import_id), &items);\n                         // record the glob import in case we add further items"}]}