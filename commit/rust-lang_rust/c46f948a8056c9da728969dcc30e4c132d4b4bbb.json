{"sha": "c46f948a8056c9da728969dcc30e4c132d4b4bbb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0NmY5NDhhODA1NmM5ZGE3Mjg5NjlkY2MzMGU0YzEzMmQ0YjRiYmI=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-03-09T23:01:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-09T23:01:25Z"}, "message": "Rollup merge of #79208 - LeSeulArtichaut:stable-unsafe_op_in_unsafe_fn, r=nikomatsakis\n\nStabilize `unsafe_op_in_unsafe_fn` lint\n\nThis makes it possible to override the level of the `unsafe_op_in_unsafe_fn`, as proposed in https://github.com/rust-lang/rust/issues/71668#issuecomment-729770896.\n\nTracking issue: #71668\nr? ```@nikomatsakis``` cc ```@SimonSapin``` ```@RalfJung```\n\n# Stabilization report\n\nThis is a stabilization report for `#![feature(unsafe_block_in_unsafe_fn)]`.\n\n## Summary\n\nCurrently, the body of unsafe functions is an unsafe block, i.e. you can perform unsafe operations inside.\n\nThe `unsafe_op_in_unsafe_fn` lint, stabilized here, can be used to change this behavior, so performing unsafe operations in unsafe functions requires an unsafe block.\n\nFor now, the lint is allow-by-default, which means that this PR does not change anything without overriding the lint level.\n\nFor more information, see [RFC 2585](https://github.com/rust-lang/rfcs/blob/master/text/2585-unsafe-block-in-unsafe-fn.md)\n\n### Example\n\n```rust\n// An `unsafe fn` for demonstration purposes.\n// Calling this is an unsafe operation.\nunsafe fn unsf() {}\n\n// #[allow(unsafe_op_in_unsafe_fn)] by default,\n// the behavior of `unsafe fn` is unchanged\nunsafe fn allowed() {\n    // Here, no `unsafe` block is needed to\n    // perform unsafe operations...\n    unsf();\n\n    // ...and any `unsafe` block is considered\n    // unused and is warned on by the compiler.\n    unsafe {\n        unsf();\n    }\n}\n\n#[warn(unsafe_op_in_unsafe_fn)]\nunsafe fn warned() {\n    // Removing this `unsafe` block will\n    // cause the compiler to emit a warning.\n    // (Also, no \"unused unsafe\" warning will be emitted here.)\n    unsafe {\n        unsf();\n    }\n}\n\n#[deny(unsafe_op_in_unsafe_fn)]\nunsafe fn denied() {\n    // Removing this `unsafe` block will\n    // cause a compilation error.\n    // (Also, no \"unused unsafe\" warning will be emitted here.)\n    unsafe {\n        unsf();\n    }\n}\n```", "tree": {"sha": "e6ffe2368f60c6bcf0433f3d3599cbc1a616e91e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6ffe2368f60c6bcf0433f3d3599cbc1a616e91e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c46f948a8056c9da728969dcc30e4c132d4b4bbb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgR/5GCRBK7hj4Ov3rIwAAdHIIAAENQCDoR+gwcNVXtb8rt7Co\nQL/d/FAM4v/+0rtU4fDBI8XY+8/YxaojHQZs6z8b4XSF8jWxOTomQJpqVuTJViYi\n3Nnhe2ZEehp0im69jqWv2ElCvOYVneCRcmUgL1h03dvbpeZ76kttxmuAOeJG/48v\n/xd3s7wF8JHOYznzD4B/CypZ2vxza7fdSdD3A+zzzKasCARb6RC1K5gs9CnZ5FNA\n00FjRYVHOfG7wp4ch60MlxiSSp2OYGeFJKdnr1T2Aa2gr9JRR/dfe6PZGDzDdIJD\nwlm5B/WrQ3FudYf9qhE2bqAp96eARUlLWjWFm2r3H9ZzB+qerMyzn5sSckI4fII=\n=jvnM\n-----END PGP SIGNATURE-----\n", "payload": "tree e6ffe2368f60c6bcf0433f3d3599cbc1a616e91e\nparent 25fd50412ed119fae398b6a31c59c6c6a9a5b94b\nparent ec20993c4db26c431e700d5f6b59fe26028cab31\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1615330885 +0900\ncommitter GitHub <noreply@github.com> 1615330885 +0900\n\nRollup merge of #79208 - LeSeulArtichaut:stable-unsafe_op_in_unsafe_fn, r=nikomatsakis\n\nStabilize `unsafe_op_in_unsafe_fn` lint\n\nThis makes it possible to override the level of the `unsafe_op_in_unsafe_fn`, as proposed in https://github.com/rust-lang/rust/issues/71668#issuecomment-729770896.\n\nTracking issue: #71668\nr? ```@nikomatsakis``` cc ```@SimonSapin``` ```@RalfJung```\n\n# Stabilization report\n\nThis is a stabilization report for `#![feature(unsafe_block_in_unsafe_fn)]`.\n\n## Summary\n\nCurrently, the body of unsafe functions is an unsafe block, i.e. you can perform unsafe operations inside.\n\nThe `unsafe_op_in_unsafe_fn` lint, stabilized here, can be used to change this behavior, so performing unsafe operations in unsafe functions requires an unsafe block.\n\nFor now, the lint is allow-by-default, which means that this PR does not change anything without overriding the lint level.\n\nFor more information, see [RFC 2585](https://github.com/rust-lang/rfcs/blob/master/text/2585-unsafe-block-in-unsafe-fn.md)\n\n### Example\n\n```rust\n// An `unsafe fn` for demonstration purposes.\n// Calling this is an unsafe operation.\nunsafe fn unsf() {}\n\n// #[allow(unsafe_op_in_unsafe_fn)] by default,\n// the behavior of `unsafe fn` is unchanged\nunsafe fn allowed() {\n    // Here, no `unsafe` block is needed to\n    // perform unsafe operations...\n    unsf();\n\n    // ...and any `unsafe` block is considered\n    // unused and is warned on by the compiler.\n    unsafe {\n        unsf();\n    }\n}\n\n#[warn(unsafe_op_in_unsafe_fn)]\nunsafe fn warned() {\n    // Removing this `unsafe` block will\n    // cause the compiler to emit a warning.\n    // (Also, no \"unused unsafe\" warning will be emitted here.)\n    unsafe {\n        unsf();\n    }\n}\n\n#[deny(unsafe_op_in_unsafe_fn)]\nunsafe fn denied() {\n    // Removing this `unsafe` block will\n    // cause a compilation error.\n    // (Also, no \"unused unsafe\" warning will be emitted here.)\n    unsafe {\n        unsf();\n    }\n}\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c46f948a8056c9da728969dcc30e4c132d4b4bbb", "html_url": "https://github.com/rust-lang/rust/commit/c46f948a8056c9da728969dcc30e4c132d4b4bbb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c46f948a8056c9da728969dcc30e4c132d4b4bbb/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25fd50412ed119fae398b6a31c59c6c6a9a5b94b", "url": "https://api.github.com/repos/rust-lang/rust/commits/25fd50412ed119fae398b6a31c59c6c6a9a5b94b", "html_url": "https://github.com/rust-lang/rust/commit/25fd50412ed119fae398b6a31c59c6c6a9a5b94b"}, {"sha": "ec20993c4db26c431e700d5f6b59fe26028cab31", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec20993c4db26c431e700d5f6b59fe26028cab31", "html_url": "https://github.com/rust-lang/rust/commit/ec20993c4db26c431e700d5f6b59fe26028cab31"}], "stats": {"total": 100, "additions": 26, "deletions": 74}, "files": [{"sha": "9902b6cc9e84209d436d8c77fa650380dd348c13", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c46f948a8056c9da728969dcc30e4c132d4b4bbb/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c46f948a8056c9da728969dcc30e4c132d4b4bbb/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=c46f948a8056c9da728969dcc30e4c132d4b4bbb", "patch": "@@ -275,6 +275,8 @@ declare_features! (\n     (accepted, move_ref_pattern, \"1.49.0\", Some(68354), None),\n     /// The smallest useful subset of `const_generics`.\n     (accepted, min_const_generics, \"1.51.0\", Some(74878), None),\n+    /// The `unsafe_op_in_unsafe_fn` lint (allowed by default): no longer treat an unsafe function as an unsafe block.\n+    (accepted, unsafe_block_in_unsafe_fn, \"1.51.0\", Some(71668), None),\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: accepted features"}, {"sha": "9cb06684c0fd0768d60c3bb81838860fcff00bf7", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c46f948a8056c9da728969dcc30e4c132d4b4bbb/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c46f948a8056c9da728969dcc30e4c132d4b4bbb/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=c46f948a8056c9da728969dcc30e4c132d4b4bbb", "patch": "@@ -557,9 +557,6 @@ declare_features! (\n     /// Allows the use of `#[ffi_const]` on foreign functions.\n     (active, ffi_const, \"1.45.0\", Some(58328), None),\n \n-    /// No longer treat an unsafe function as an unsafe block.\n-    (active, unsafe_block_in_unsafe_fn, \"1.45.0\", Some(71668), None),\n-\n     /// Allows `extern \"avr-interrupt\" fn()` and `extern \"avr-non-blocking-interrupt\" fn()`.\n     (active, abi_avr_interrupt, \"1.45.0\", Some(69664), None),\n "}, {"sha": "af48f6c2a5d9920823188802c1a3a26240865150", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c46f948a8056c9da728969dcc30e4c132d4b4bbb/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c46f948a8056c9da728969dcc30e4c132d4b4bbb/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=c46f948a8056c9da728969dcc30e4c132d4b4bbb", "patch": "@@ -8,7 +8,6 @@\n \n use crate::{declare_lint, declare_lint_pass};\n use rustc_span::edition::Edition;\n-use rustc_span::symbol::sym;\n \n declare_lint! {\n     /// The `forbidden_lint_groups` lint detects violations of\n@@ -2489,16 +2488,11 @@ declare_lint! {\n \n declare_lint! {\n     /// The `unsafe_op_in_unsafe_fn` lint detects unsafe operations in unsafe\n-    /// functions without an explicit unsafe block. This lint only works on\n-    /// the [**nightly channel**] with the\n-    /// `#![feature(unsafe_block_in_unsafe_fn)]` feature.\n-    ///\n-    /// [**nightly channel**]: https://doc.rust-lang.org/book/appendix-07-nightly-rust.html\n+    /// functions without an explicit unsafe block.\n     ///\n     /// ### Example\n     ///\n     /// ```rust,compile_fail\n-    /// #![feature(unsafe_block_in_unsafe_fn)]\n     /// #![deny(unsafe_op_in_unsafe_fn)]\n     ///\n     /// unsafe fn foo() {}\n@@ -2536,7 +2530,6 @@ declare_lint! {\n     pub UNSAFE_OP_IN_UNSAFE_FN,\n     Allow,\n     \"unsafe operations in unsafe functions without an explicit unsafe block are deprecated\",\n-    @feature_gate = sym::unsafe_block_in_unsafe_fn;\n }\n \n declare_lint! {"}, {"sha": "bde480180136bc9d192e3eb87fd40e7c65d3620b", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c46f948a8056c9da728969dcc30e4c132d4b4bbb/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c46f948a8056c9da728969dcc30e4c132d4b4bbb/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=c46f948a8056c9da728969dcc30e4c132d4b4bbb", "patch": "@@ -28,11 +28,9 @@ pub enum UnsafetyViolationKind {\n     BorrowPacked,\n     /// Unsafe operation in an `unsafe fn` but outside an `unsafe` block.\n     /// Has to be handled as a lint for backwards compatibility.\n-    /// Should stay gated under `#![feature(unsafe_block_in_unsafe_fn)]`.\n     UnsafeFn,\n     /// Borrow of packed field in an `unsafe fn` but outside an `unsafe` block.\n     /// Has to be handled as a lint for backwards compatibility.\n-    /// Should stay gated under `#![feature(unsafe_block_in_unsafe_fn)]`.\n     UnsafeFnBorrowPacked,\n }\n "}, {"sha": "532d201e056d178e47d6ad08de1fa013edf14552", "filename": "compiler/rustc_mir/src/transform/check_unsafety.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c46f948a8056c9da728969dcc30e4c132d4b4bbb/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c46f948a8056c9da728969dcc30e4c132d4b4bbb/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_unsafety.rs?ref=c46f948a8056c9da728969dcc30e4c132d4b4bbb", "patch": "@@ -341,7 +341,7 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n                 false\n             }\n             // With the RFC 2585, no longer allow `unsafe` operations in `unsafe fn`s\n-            Safety::FnUnsafe if self.tcx.features().unsafe_block_in_unsafe_fn => {\n+            Safety::FnUnsafe => {\n                 for violation in violations {\n                     let mut violation = *violation;\n \n@@ -356,8 +356,7 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n                 }\n                 false\n             }\n-            // `unsafe` function bodies allow unsafe without additional unsafe blocks (before RFC 2585)\n-            Safety::BuiltinUnsafe | Safety::FnUnsafe => true,\n+            Safety::BuiltinUnsafe => true,\n             Safety::ExplicitUnsafe(hir_id) => {\n                 // mark unsafe block as used if there are any unsafe operations inside\n                 if !violations.is_empty() {"}, {"sha": "a70812bd13c060f908fb0852e9cef3fdcd09cc11", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c46f948a8056c9da728969dcc30e4c132d4b4bbb/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c46f948a8056c9da728969dcc30e4c132d4b4bbb/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=c46f948a8056c9da728969dcc30e4c132d4b4bbb", "patch": "@@ -133,7 +133,7 @@\n #![feature(trusted_len)]\n #![feature(unboxed_closures)]\n #![feature(unicode_internals)]\n-#![feature(unsafe_block_in_unsafe_fn)]\n+#![cfg_attr(bootstrap, feature(unsafe_block_in_unsafe_fn))]\n #![feature(unsize)]\n #![feature(unsized_fn_params)]\n #![feature(allocator_internals)]"}, {"sha": "e10e1738de55c3856db27a6d2168aaf5a0130397", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c46f948a8056c9da728969dcc30e4c132d4b4bbb/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c46f948a8056c9da728969dcc30e4c132d4b4bbb/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=c46f948a8056c9da728969dcc30e4c132d4b4bbb", "patch": "@@ -164,8 +164,8 @@\n #![feature(const_caller_location)]\n #![feature(slice_ptr_get)]\n #![feature(no_niche)] // rust-lang/rust#68303\n-#![feature(unsafe_block_in_unsafe_fn)]\n #![feature(int_error_matching)]\n+#![cfg_attr(bootstrap, feature(unsafe_block_in_unsafe_fn))]\n #![deny(unsafe_op_in_unsafe_fn)]\n \n #[prelude_import]"}, {"sha": "b7fcc740363811be50261b16948b3488328c771f", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c46f948a8056c9da728969dcc30e4c132d4b4bbb/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c46f948a8056c9da728969dcc30e4c132d4b4bbb/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=c46f948a8056c9da728969dcc30e4c132d4b4bbb", "patch": "@@ -72,16 +72,16 @@\n #![feature(peekable_peek_mut)]\n #![cfg_attr(not(bootstrap), feature(ptr_metadata))]\n #![feature(once_cell)]\n-#![feature(unsafe_block_in_unsafe_fn)]\n #![feature(unsized_tuple_coercion)]\n #![feature(int_bits_const)]\n #![feature(nonzero_leading_trailing_zeros)]\n #![feature(const_option)]\n #![feature(integer_atomics)]\n #![feature(slice_group_by)]\n #![feature(trusted_random_access)]\n-#![deny(unsafe_op_in_unsafe_fn)]\n+#![cfg_attr(bootstrap, feature(unsafe_block_in_unsafe_fn))]\n #![cfg_attr(not(bootstrap), feature(unsize))]\n+#![deny(unsafe_op_in_unsafe_fn)]\n \n extern crate test;\n "}, {"sha": "247d39743bef5046c443ba3b7fcb4472e17e2a2b", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c46f948a8056c9da728969dcc30e4c132d4b4bbb/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c46f948a8056c9da728969dcc30e4c132d4b4bbb/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=c46f948a8056c9da728969dcc30e4c132d4b4bbb", "patch": "@@ -327,7 +327,7 @@\n #![feature(try_blocks)]\n #![feature(try_reserve)]\n #![feature(unboxed_closures)]\n-#![feature(unsafe_block_in_unsafe_fn)]\n+#![cfg_attr(bootstrap, feature(unsafe_block_in_unsafe_fn))]\n #![feature(unsafe_cell_raw_get)]\n #![feature(unwind_attributes)]\n #![feature(vec_into_raw_parts)]"}, {"sha": "61e512a12a18d117e3a05c326fe3e20acf3a1853", "filename": "src/test/ui/feature-gates/feature-gate-unsafe_block_in_unsafe_fn.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/25fd50412ed119fae398b6a31c59c6c6a9a5b94b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsafe_block_in_unsafe_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25fd50412ed119fae398b6a31c59c6c6a9a5b94b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsafe_block_in_unsafe_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsafe_block_in_unsafe_fn.rs?ref=25fd50412ed119fae398b6a31c59c6c6a9a5b94b", "patch": "@@ -1,6 +0,0 @@\n-#![deny(unsafe_op_in_unsafe_fn)]\n-//~^ ERROR the `unsafe_op_in_unsafe_fn` lint is unstable\n-//~| ERROR the `unsafe_op_in_unsafe_fn` lint is unstable\n-//~| ERROR the `unsafe_op_in_unsafe_fn` lint is unstable\n-\n-fn main() {}"}, {"sha": "c5cad4a98d9ca29172af13b5a6a539831f1e010e", "filename": "src/test/ui/feature-gates/feature-gate-unsafe_block_in_unsafe_fn.stderr", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/25fd50412ed119fae398b6a31c59c6c6a9a5b94b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsafe_block_in_unsafe_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25fd50412ed119fae398b6a31c59c6c6a9a5b94b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsafe_block_in_unsafe_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsafe_block_in_unsafe_fn.stderr?ref=25fd50412ed119fae398b6a31c59c6c6a9a5b94b", "patch": "@@ -1,30 +0,0 @@\n-error[E0658]: the `unsafe_op_in_unsafe_fn` lint is unstable\n-  --> $DIR/feature-gate-unsafe_block_in_unsafe_fn.rs:1:1\n-   |\n-LL | #![deny(unsafe_op_in_unsafe_fn)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #71668 <https://github.com/rust-lang/rust/issues/71668> for more information\n-   = help: add `#![feature(unsafe_block_in_unsafe_fn)]` to the crate attributes to enable\n-\n-error[E0658]: the `unsafe_op_in_unsafe_fn` lint is unstable\n-  --> $DIR/feature-gate-unsafe_block_in_unsafe_fn.rs:1:1\n-   |\n-LL | #![deny(unsafe_op_in_unsafe_fn)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #71668 <https://github.com/rust-lang/rust/issues/71668> for more information\n-   = help: add `#![feature(unsafe_block_in_unsafe_fn)]` to the crate attributes to enable\n-\n-error[E0658]: the `unsafe_op_in_unsafe_fn` lint is unstable\n-  --> $DIR/feature-gate-unsafe_block_in_unsafe_fn.rs:1:1\n-   |\n-LL | #![deny(unsafe_op_in_unsafe_fn)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #71668 <https://github.com/rust-lang/rust/issues/71668> for more information\n-   = help: add `#![feature(unsafe_block_in_unsafe_fn)]` to the crate attributes to enable\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "c8400a6fc4d0d43269f814521a9549ce2ceeca8f", "filename": "src/test/ui/unsafe/rfc-2585-unsafe_op_in_unsafe_fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c46f948a8056c9da728969dcc30e4c132d4b4bbb/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c46f948a8056c9da728969dcc30e4c132d4b4bbb/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.rs?ref=c46f948a8056c9da728969dcc30e4c132d4b4bbb", "patch": "@@ -1,4 +1,3 @@\n-#![feature(unsafe_block_in_unsafe_fn)]\n #![deny(unsafe_op_in_unsafe_fn)]\n #![deny(unused_unsafe)]\n "}, {"sha": "3157783acb6af08c9f40bfdbb9ad840cadae5082", "filename": "src/test/ui/unsafe/rfc-2585-unsafe_op_in_unsafe_fn.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c46f948a8056c9da728969dcc30e4c132d4b4bbb/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c46f948a8056c9da728969dcc30e4c132d4b4bbb/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.stderr?ref=c46f948a8056c9da728969dcc30e4c132d4b4bbb", "patch": "@@ -1,90 +1,90 @@\n error: call to unsafe function is unsafe and requires unsafe block (error E0133)\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:10:5\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:9:5\n    |\n LL |     unsf();\n    |     ^^^^^^ call to unsafe function\n    |\n note: the lint level is defined here\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:2:9\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:1:9\n    |\n LL | #![deny(unsafe_op_in_unsafe_fn)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error: dereference of raw pointer is unsafe and requires unsafe block (error E0133)\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:12:5\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:11:5\n    |\n LL |     *PTR;\n    |     ^^^^ dereference of raw pointer\n    |\n    = note: raw pointers may be NULL, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n \n error: use of mutable static is unsafe and requires unsafe block (error E0133)\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:14:5\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:13:5\n    |\n LL |     VOID = ();\n    |     ^^^^^^^^^ use of mutable static\n    |\n    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior\n \n error: unnecessary `unsafe` block\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:17:5\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:16:5\n    |\n LL |     unsafe {}\n    |     ^^^^^^ unnecessary `unsafe` block\n    |\n note: the lint level is defined here\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:3:9\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:2:9\n    |\n LL | #![deny(unused_unsafe)]\n    |         ^^^^^^^^^^^^^\n \n error: call to unsafe function is unsafe and requires unsafe block (error E0133)\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:25:5\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:24:5\n    |\n LL |     unsf();\n    |     ^^^^^^ call to unsafe function\n    |\n note: the lint level is defined here\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:23:8\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:22:8\n    |\n LL | #[deny(warnings)]\n    |        ^^^^^^^^\n    = note: `#[deny(unsafe_op_in_unsafe_fn)]` implied by `#[deny(warnings)]`\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error: dereference of raw pointer is unsafe and requires unsafe block (error E0133)\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:27:5\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:26:5\n    |\n LL |     *PTR;\n    |     ^^^^ dereference of raw pointer\n    |\n    = note: raw pointers may be NULL, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n \n error: use of mutable static is unsafe and requires unsafe block (error E0133)\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:29:5\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:28:5\n    |\n LL |     VOID = ();\n    |     ^^^^^^^^^ use of mutable static\n    |\n    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior\n \n error: unnecessary `unsafe` block\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:31:5\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:30:5\n    |\n LL |     unsafe {}\n    |     ^^^^^^ unnecessary `unsafe` block\n \n error: unnecessary `unsafe` block\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:45:14\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:44:14\n    |\n LL |     unsafe { unsafe { unsf() } }\n    |     ------   ^^^^^^ unnecessary `unsafe` block\n    |     |\n    |     because it's nested under this `unsafe` block\n \n error: unnecessary `unsafe` block\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:56:5\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:55:5\n    |\n LL | unsafe fn allow_level() {\n    | ----------------------- because it's nested under this `unsafe` fn\n@@ -93,7 +93,7 @@ LL |     unsafe { unsf() }\n    |     ^^^^^^ unnecessary `unsafe` block\n \n error: unnecessary `unsafe` block\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:68:9\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:67:9\n    |\n LL | unsafe fn nested_allow_level() {\n    | ------------------------------ because it's nested under this `unsafe` fn\n@@ -102,15 +102,15 @@ LL |         unsafe { unsf() }\n    |         ^^^^^^ unnecessary `unsafe` block\n \n error[E0133]: call to unsafe function is unsafe and requires unsafe block\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:74:5\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:73:5\n    |\n LL |     unsf();\n    |     ^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:78:9\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:77:9\n    |\n LL |         unsf();\n    |         ^^^^^^ call to unsafe function"}]}