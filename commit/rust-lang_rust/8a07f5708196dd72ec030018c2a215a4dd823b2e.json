{"sha": "8a07f5708196dd72ec030018c2a215a4dd823b2e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhMDdmNTcwODE5NmRkNzJlYzAzMDAxOGMyYTIxNWE0ZGQ4MjNiMmU=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-08-12T17:55:42Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-08-28T12:16:19Z"}, "message": "Teach compiletest to use multiple --src-base's", "tree": {"sha": "aa92d959fb747d9becb1f0c5ed494b9371b103b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa92d959fb747d9becb1f0c5ed494b9371b103b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a07f5708196dd72ec030018c2a215a4dd823b2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a07f5708196dd72ec030018c2a215a4dd823b2e", "html_url": "https://github.com/rust-lang/rust/commit/8a07f5708196dd72ec030018c2a215a4dd823b2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a07f5708196dd72ec030018c2a215a4dd823b2e/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14cdc26e8a7794e437946f46df5769362b42acdf", "url": "https://api.github.com/repos/rust-lang/rust/commits/14cdc26e8a7794e437946f46df5769362b42acdf", "html_url": "https://github.com/rust-lang/rust/commit/14cdc26e8a7794e437946f46df5769362b42acdf"}], "stats": {"total": 36, "additions": 19, "deletions": 17}, "files": [{"sha": "bbe8026030f4377fa7098479c42d000754b3bc41", "filename": "src/compiletest/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a07f5708196dd72ec030018c2a215a4dd823b2e/src%2Fcompiletest%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a07f5708196dd72ec030018c2a215a4dd823b2e/src%2Fcompiletest%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcommon.rs?ref=8a07f5708196dd72ec030018c2a215a4dd823b2e", "patch": "@@ -36,7 +36,7 @@ pub struct config {\n     llvm_bin_path: Option<Path>,\n \n     // The directory containing the tests to run\n-    src_base: Path,\n+    src_base: ~[Path],\n \n     // The directory where programs should be built\n     build_base: Path,"}, {"sha": "ab76fca865f2f886425e5010fce7f8259598e9f1", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8a07f5708196dd72ec030018c2a215a4dd823b2e/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a07f5708196dd72ec030018c2a215a4dd823b2e/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=8a07f5708196dd72ec030018c2a215a4dd823b2e", "patch": "@@ -19,7 +19,7 @@ use std::os;\n use std::f64;\n \n use extra::getopts;\n-use extra::getopts::groups::{optopt, optflag, reqopt};\n+use extra::getopts::groups::{optopt, optflag, reqopt, optmulti};\n use extra::test;\n \n use common::config;\n@@ -49,19 +49,19 @@ pub fn main() {\n pub fn parse_config(args: ~[~str]) -> config {\n \n     let groups : ~[getopts::groups::OptGroup] =\n-        ~[reqopt(\"\", \"compile-lib-path\", \"path to host shared libraries\", \"PATH\"),\n-          reqopt(\"\", \"run-lib-path\", \"path to target shared libraries\", \"PATH\"),\n-          reqopt(\"\", \"rustc-path\", \"path to rustc to use for compiling\", \"PATH\"),\n-          optopt(\"\", \"clang-path\", \"path to  executable for codegen tests\", \"PATH\"),\n-          optopt(\"\", \"llvm-bin-path\", \"path to directory holding llvm binaries\", \"DIR\"),\n-          reqopt(\"\", \"src-base\", \"directory to scan for test files\", \"PATH\"),\n-          reqopt(\"\", \"build-base\", \"directory to deposit test outputs\", \"PATH\"),\n-          reqopt(\"\", \"aux-base\", \"directory to find auxiliary test files\", \"PATH\"),\n-          reqopt(\"\", \"stage-id\", \"the target-stage identifier\", \"stageN-TARGET\"),\n-          reqopt(\"\", \"mode\", \"which sort of compile tests to run\",\n-                 \"(compile-fail|run-fail|run-pass|pretty|debug-info)\"),\n-          optflag(\"\", \"ignored\", \"run tests marked as ignored / xfailed\"),\n-          optopt(\"\", \"runtool\", \"supervisor program to run tests under \\\n+        ~[reqopt   (\"\", \"compile-lib-path\", \"path to host shared libraries\", \"PATH\"),\n+          reqopt   (\"\", \"run-lib-path\", \"path to target shared libraries\", \"PATH\"),\n+          reqopt   (\"\", \"rustc-path\", \"path to rustc to use for compiling\", \"PATH\"),\n+          optopt   (\"\", \"clang-path\", \"path to  executable for codegen tests\", \"PATH\"),\n+          optopt   (\"\", \"llvm-bin-path\", \"path to directory holding llvm binaries\", \"DIR\"),\n+          optmulti (\"\", \"src-base\", \"directory to scan for test files\", \"PATH\"),\n+          reqopt   (\"\", \"build-base\", \"directory to deposit test outputs\", \"PATH\"),\n+          reqopt   (\"\", \"aux-base\", \"directory to find auxiliary test files\", \"PATH\"),\n+          reqopt   (\"\", \"stage-id\", \"the target-stage identifier\", \"stageN-TARGET\"),\n+          reqopt   (\"\", \"mode\", \"which sort of compile tests to run\",\n+                    \" (compile-fail|run-fail|run-pass|pretty|debug-info)\"),\n+          optflag  (\"\", \"ignored\", \"run tests marked as ignored / xfailed\"),\n+          optopt   (\"\", \"runtool\", \"supervisor program to run tests under \\\n                                  (eg. emulator, valgrind)\", \"PROGRAM\"),\n           optopt(\"\", \"rustcflags\", \"flags to pass to rustc\", \"FLAGS\"),\n           optflag(\"\", \"verbose\", \"run tests verbosely, showing all output\"),\n@@ -105,14 +105,16 @@ pub fn parse_config(args: ~[~str]) -> config {\n     fn opt_path(m: &getopts::Matches, nm: &str) -> Path {\n         Path(getopts::opt_str(m, nm))\n     }\n+    \n+    let src_base = getopts::opt_strs(matches, \"src-base\");\n \n     config {\n         compile_lib_path: getopts::opt_str(matches, \"compile-lib-path\"),\n         run_lib_path: getopts::opt_str(matches, \"run-lib-path\"),\n         rustc_path: opt_path(matches, \"rustc-path\"),\n         clang_path: getopts::opt_maybe_str(matches, \"clang-path\").map_move(|s| Path(s)),\n         llvm_bin_path: getopts::opt_maybe_str(matches, \"llvm-bin-path\").map_move(|s| Path(s)),\n-        src_base: opt_path(matches, \"src-base\"),\n+        src_base: src_base.iter().map(|x| Path(x.clone())).collect(),\n         build_base: opt_path(matches, \"build-base\"),\n         aux_base: opt_path(matches, \"aux-base\"),\n         stage_id: getopts::opt_str(matches, \"stage-id\"),\n@@ -248,7 +250,7 @@ pub fn make_tests(config: &config) -> ~[test::TestDescAndFn] {\n     debug!(\"making tests from %s\",\n            config.src_base.to_str());\n     let mut tests = ~[];\n-    let dirs = os::list_dir_path(&config.src_base);\n+    let dirs = config.src_base.iter().flat_map(|x| os::list_dir_path(x).move_iter()).to_owned_vec();\n     for file in dirs.iter() {\n         let file = file.clone();\n         debug!(\"inspecting file %s\", file.to_str());"}]}