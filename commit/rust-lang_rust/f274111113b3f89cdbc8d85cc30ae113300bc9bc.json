{"sha": "f274111113b3f89cdbc8d85cc30ae113300bc9bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyNzQxMTExMTNiM2Y4OWNkYmM4ZDg1Y2MzMGFlMTEzMzAwYmM5YmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-28T09:41:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-28T09:41:25Z"}, "message": "Auto merge of #1269 - RalfJung:windows-dtor, r=RalfJung\n\nrun Windows TLS dtor function\n\nMostly fixes https://github.com/rust-lang/miri/issues/442", "tree": {"sha": "e5451d522ec4cb58975560b51894e9b3fb37cb32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5451d522ec4cb58975560b51894e9b3fb37cb32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f274111113b3f89cdbc8d85cc30ae113300bc9bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f274111113b3f89cdbc8d85cc30ae113300bc9bc", "html_url": "https://github.com/rust-lang/rust/commit/f274111113b3f89cdbc8d85cc30ae113300bc9bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f274111113b3f89cdbc8d85cc30ae113300bc9bc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4308a07286fc65a365d87e8ba5d8ba6ad16027e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4308a07286fc65a365d87e8ba5d8ba6ad16027e", "html_url": "https://github.com/rust-lang/rust/commit/f4308a07286fc65a365d87e8ba5d8ba6ad16027e"}, {"sha": "876bded2e8d5fe0dc3b084c3e9faa2739493d797", "url": "https://api.github.com/repos/rust-lang/rust/commits/876bded2e8d5fe0dc3b084c3e9faa2739493d797", "html_url": "https://github.com/rust-lang/rust/commit/876bded2e8d5fe0dc3b084c3e9faa2739493d797"}], "stats": {"total": 96, "additions": 67, "deletions": 29}, "files": [{"sha": "512b4176df8b4b427be1cad54702e0f3323fad48", "filename": "src/eval.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f274111113b3f89cdbc8d85cc30ae113300bc9bc/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f274111113b3f89cdbc8d85cc30ae113300bc9bc/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=f274111113b3f89cdbc8d85cc30ae113300bc9bc", "patch": "@@ -184,10 +184,9 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n /// Returns `Some(return_code)` if program executed completed.\n /// Returns `None` if an evaluation error occured.\n pub fn eval_main<'tcx>(tcx: TyCtxt<'tcx>, main_id: DefId, config: MiriConfig) -> Option<i64> {\n-    // FIXME: We always ignore leaks on some OSs where we do not\n-    // correctly implement TLS destructors.\n-    let target_os = &tcx.sess.target.target.target_os;\n-    let ignore_leaks = config.ignore_leaks || target_os == \"windows\";\n+    // FIXME: on Windows, locks and TLS dtor management allocate and leave that memory in `static`s.\n+    // So we need https://github.com/rust-lang/miri/issues/940 to fix the leaks there.\n+    let ignore_leaks = config.ignore_leaks || tcx.sess.target.target.target_os == \"windows\";\n \n     let (mut ecx, ret_place) = match create_ecx(tcx, main_id, config) {\n         Ok(v) => v,"}, {"sha": "aa327b468bf812c12eb047fff67a245102eb4fcc", "filename": "src/helpers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f274111113b3f89cdbc8d85cc30ae113300bc9bc/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f274111113b3f89cdbc8d85cc30ae113300bc9bc/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=f274111113b3f89cdbc8d85cc30ae113300bc9bc", "patch": "@@ -413,7 +413,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn set_last_error_from_io_error(&mut self, e: std::io::Error) -> InterpResult<'tcx> {\n         use std::io::ErrorKind::*;\n         let this = self.eval_context_mut();\n-        let target = &this.tcx.tcx.sess.target.target;\n+        let target = &this.tcx.sess.target.target;\n         let last_error = if target.options.target_family == Some(\"unix\".to_owned()) {\n             this.eval_libc(match e.kind() {\n                 ConnectionRefused => \"ECONNREFUSED\","}, {"sha": "4bf3d0d7f4465c5a5c40f16f2fe3dbf7a17bcd04", "filename": "src/machine.rs", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f274111113b3f89cdbc8d85cc30ae113300bc9bc/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f274111113b3f89cdbc8d85cc30ae113300bc9bc/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=f274111113b3f89cdbc8d85cc30ae113300bc9bc", "patch": "@@ -102,6 +102,20 @@ impl MemoryExtra {\n         }\n     }\n \n+    fn add_extern_static<'tcx, 'mir>(\n+        this: &mut MiriEvalContext<'mir, 'tcx>,\n+        name: &str,\n+        ptr: Scalar<Tag>,\n+    ) {\n+        let ptr = ptr.assert_ptr();\n+        assert_eq!(ptr.offset, Size::ZERO);\n+        this.memory\n+            .extra\n+            .extern_statics\n+            .insert(Symbol::intern(name), ptr.alloc_id)\n+            .unwrap_none();\n+    }\n+\n     /// Sets up the \"extern statics\" for this machine.\n     pub fn init_extern_statics<'tcx, 'mir>(\n         this: &mut MiriEvalContext<'mir, 'tcx>,\n@@ -113,17 +127,17 @@ impl MemoryExtra {\n                 let layout = this.layout_of(this.tcx.types.usize)?;\n                 let place = this.allocate(layout, MiriMemoryKind::Machine.into());\n                 this.write_scalar(Scalar::from_machine_usize(0, &*this.tcx), place.into())?;\n-                this.memory\n-                    .extra\n-                    .extern_statics\n-                    .insert(Symbol::intern(\"__cxa_thread_atexit_impl\"), place.ptr.assert_ptr().alloc_id)\n-                    .unwrap_none();\n+                Self::add_extern_static(this, \"__cxa_thread_atexit_impl\", place.ptr);\n                 // \"environ\"\n-                this.memory\n-                    .extra\n-                    .extern_statics\n-                    .insert(Symbol::intern(\"environ\"), this.machine.env_vars.environ.unwrap().ptr.assert_ptr().alloc_id)\n-                    .unwrap_none();\n+                Self::add_extern_static(this, \"environ\", this.machine.env_vars.environ.unwrap().ptr);\n+            }\n+            \"windows\" => {\n+                // \"_tls_used\"\n+                // This is some obscure hack that is part of the Windows TLS story. It's a `u8`.\n+                let layout = this.layout_of(this.tcx.types.u8)?;\n+                let place = this.allocate(layout, MiriMemoryKind::Machine.into());\n+                this.write_scalar(Scalar::from_u8(0), place.into())?;\n+                Self::add_extern_static(this, \"_tls_used\", place.ptr);\n             }\n             _ => {} // No \"extern statics\" supported on this target\n         }"}, {"sha": "ecf24e2f20384a60af67a638569efbf7edcbddb3", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f274111113b3f89cdbc8d85cc30ae113300bc9bc/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f274111113b3f89cdbc8d85cc30ae113300bc9bc/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=f274111113b3f89cdbc8d85cc30ae113300bc9bc", "patch": "@@ -19,7 +19,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn min_align(&self, size: u64, kind: MiriMemoryKind) -> Align {\n         let this = self.eval_context_ref();\n         // List taken from `libstd/sys_common/alloc.rs`.\n-        let min_align = match this.tcx.tcx.sess.target.target.arch.as_str() {\n+        let min_align = match this.tcx.sess.target.target.arch.as_str() {\n             \"x86\" | \"arm\" | \"mips\" | \"powerpc\" | \"powerpc64\" | \"asmjs\" | \"wasm32\" => 8,\n             \"x86_64\" | \"aarch64\" | \"mips64\" | \"s390x\" | \"sparc64\" => 16,\n             arch => bug!(\"Unsupported target architecture: {}\", arch),\n@@ -124,7 +124,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         };\n         // Strip linker suffixes (seen on 32-bit macOS).\n         let link_name = link_name.trim_end_matches(\"$UNIX2003\");\n-        let tcx = &{ this.tcx.tcx };\n+        let tcx = this.tcx.tcx;\n \n         // First: functions that diverge.\n         let (dest, ret) = match ret {\n@@ -133,8 +133,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 // The implementation is provided by the function with the `#[panic_handler]` attribute.\n                 \"panic_impl\" => {\n                     this.check_panic_supported()?;\n-                    let panic_impl_id = this.tcx.lang_items().panic_impl().unwrap();\n-                    let panic_impl_instance = ty::Instance::mono(*this.tcx, panic_impl_id);\n+                    let panic_impl_id = tcx.lang_items().panic_impl().unwrap();\n+                    let panic_impl_instance = ty::Instance::mono(tcx, panic_impl_id);\n                     return Ok(Some(&*this.load_mir(panic_impl_instance.def, None)?));\n                 }\n                 | \"exit\""}, {"sha": "425fe4b1b479a3d3eb477b372a8d6075751b7491", "filename": "src/shims/foreign_items/posix.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f274111113b3f89cdbc8d85cc30ae113300bc9bc/src%2Fshims%2Fforeign_items%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f274111113b3f89cdbc8d85cc30ae113300bc9bc/src%2Fshims%2Fforeign_items%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix.rs?ref=f274111113b3f89cdbc8d85cc30ae113300bc9bc", "patch": "@@ -17,7 +17,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         ret: mir::BasicBlock,\n     ) -> InterpResult<'tcx, bool> {\n         let this = self.eval_context_mut();\n-        let tcx = &{ this.tcx.tcx };\n \n         match link_name {\n             // Environment related shims\n@@ -65,7 +64,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             \"write\" => {\n                 let fd = this.read_scalar(args[0])?.to_i32()?;\n                 let buf = this.read_scalar(args[1])?.not_undef()?;\n-                let n = this.read_scalar(args[2])?.to_machine_usize(tcx)?;\n+                let n = this.read_scalar(args[2])?.to_machine_usize(this)?;\n                 trace!(\"Called write({:?}, {:?}, {:?})\", fd, buf, n);\n                 let result = if fd == 1 || fd == 2 {\n                     // stdout/stderr\n@@ -209,7 +208,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n             \"pthread_getspecific\" => {\n                 let key = this.force_bits(this.read_scalar(args[0])?.not_undef()?, args[0].layout.size)?;\n-                let ptr = this.machine.tls.load_tls(key, tcx)?;\n+                let ptr = this.machine.tls.load_tls(key, this)?;\n                 this.write_scalar(ptr, dest)?;\n             }\n             \"pthread_setspecific\" => {"}, {"sha": "9e71ba7d90741c6f7ddc316d1bb5a51670874a3a", "filename": "src/shims/foreign_items/windows.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f274111113b3f89cdbc8d85cc30ae113300bc9bc/src%2Fshims%2Fforeign_items%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f274111113b3f89cdbc8d85cc30ae113300bc9bc/src%2Fshims%2Fforeign_items%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fwindows.rs?ref=f274111113b3f89cdbc8d85cc30ae113300bc9bc", "patch": "@@ -13,7 +13,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         _ret: mir::BasicBlock,\n     ) -> InterpResult<'tcx, bool> {\n         let this = self.eval_context_mut();\n-        let tcx = &{ this.tcx.tcx };\n \n         match link_name {\n             // Windows API stubs.\n@@ -160,7 +159,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n             \"TlsGetValue\" => {\n                 let key = u128::from(this.read_scalar(args[0])?.to_u32()?);\n-                let ptr = this.machine.tls.load_tls(key, tcx)?;\n+                let ptr = this.machine.tls.load_tls(key, this)?;\n                 this.write_scalar(ptr, dest)?;\n             }\n             \"TlsSetValue\" => {"}, {"sha": "84e8cca556a1ce0bb9e01d472e920dd3bf93ca03", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f274111113b3f89cdbc8d85cc30ae113300bc9bc/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f274111113b3f89cdbc8d85cc30ae113300bc9bc/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=f274111113b3f89cdbc8d85cc30ae113300bc9bc", "patch": "@@ -24,13 +24,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         if this.emulate_intrinsic(span, instance, args, ret)? {\n             return Ok(());\n         }\n-        let tcx = &{ this.tcx.tcx };\n         let substs = instance.substs;\n \n         // All these intrinsics take raw pointers, so if we access memory directly\n         // (as opposed to through a place), we have to remember to erase any tag\n         // that might still hang around!\n-        let intrinsic_name = &*tcx.item_name(instance.def_id()).as_str();\n+        let intrinsic_name = &*this.tcx.item_name(instance.def_id()).as_str();\n \n         // First handle intrinsics without return place.\n         let (dest, ret) = match ret {"}, {"sha": "c753689f4c258de5749a799a83788bf346ddbc7b", "filename": "src/shims/tls.rs", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f274111113b3f89cdbc8d85cc30ae113300bc9bc/src%2Fshims%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f274111113b3f89cdbc8d85cc30ae113300bc9bc/src%2Fshims%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftls.rs?ref=f274111113b3f89cdbc8d85cc30ae113300bc9bc", "patch": "@@ -70,7 +70,7 @@ impl<'tcx> TlsData<'tcx> {\n     }\n \n     pub fn load_tls(\n-        &mut self,\n+        &self,\n         key: TlsKey,\n         cx: &impl HasDataLayout,\n     ) -> InterpResult<'tcx, Scalar<Tag>> {\n@@ -107,7 +107,8 @@ impl<'tcx> TlsData<'tcx> {\n         Ok(())\n     }\n \n-    /// Returns a dtor, its argument and its index, if one is supposed to run\n+    /// Returns a dtor, its argument and its index, if one is supposed to run.\n+    /// `key` is the last dtors that was run; we return the *next* one after that.\n     ///\n     /// An optional destructor function may be associated with each key value.\n     /// At thread exit, if a key value has a non-NULL destructor pointer,\n@@ -158,6 +159,32 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         assert!(!this.machine.tls.dtors_running, \"running TLS dtors twice\");\n         this.machine.tls.dtors_running = true;\n \n+        if this.tcx.sess.target.target.target_os == \"windows\" {\n+            // Windows has a special magic linker section that is run on certain events.\n+            // Instead of searching for that section and supporting arbitrary hooks in there\n+            // (that would be basically https://github.com/rust-lang/miri/issues/450),\n+            // we specifically look up the static in libstd that we know is placed\n+            // in that section.\n+            let thread_callback = this.eval_path_scalar(&[\"std\", \"sys\", \"windows\", \"thread_local\", \"p_thread_callback\"])?;\n+            let thread_callback = this.memory.get_fn(thread_callback.not_undef()?)?.as_instance()?;\n+\n+            // The signature of this function is `unsafe extern \"system\" fn(h: c::LPVOID, dwReason: c::DWORD, pv: c::LPVOID)`.\n+            let reason = this.eval_path_scalar(&[\"std\", \"sys\", \"windows\", \"c\", \"DLL_PROCESS_DETACH\"])?;\n+            let ret_place = MPlaceTy::dangling(this.layout_of(this.tcx.mk_unit())?, this).into();\n+            this.call_function(\n+                thread_callback,\n+                &[Scalar::ptr_null(this).into(), reason.into(), Scalar::ptr_null(this).into()],\n+                Some(ret_place),\n+                StackPopCleanup::None { cleanup: true },\n+            )?;\n+\n+            // step until out of stackframes\n+            this.run()?;\n+\n+            // Windows doesn't have other destructors.\n+            return Ok(());\n+        }\n+\n         // The macOS global dtor runs \"before any TLS slots get freed\", so do that first.\n         if let Some((instance, data)) = this.machine.tls.global_dtor {\n             trace!(\"Running global dtor {:?} on {:?}\", instance, data);\n@@ -191,12 +218,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // step until out of stackframes\n             this.run()?;\n \n+            // Fetch next dtor after `key`.\n             dtor = match this.machine.tls.fetch_tls_dtor(Some(key)) {\n                 dtor @ Some(_) => dtor,\n+                // We ran each dtor once, start over from the beginning.\n                 None => this.machine.tls.fetch_tls_dtor(None),\n             };\n         }\n-        // FIXME: On a windows target, call `unsafe extern \"system\" fn on_tls_callback`.\n         Ok(())\n     }\n }"}]}