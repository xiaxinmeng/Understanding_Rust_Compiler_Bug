{"sha": "1c3cce8ba586c634d70a304d7e1a0da58b35bbea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjM2NjZThiYTU4NmM2MzRkNzBhMzA0ZDdlMWEwZGE1OGIzNWJiZWE=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-27T16:59:04Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-27T17:18:53Z"}, "message": "Add a lint about suspiciously formatted `else if`", "tree": {"sha": "2e2d16442758ddb5da34a50e89b3cdf28fe32414", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e2d16442758ddb5da34a50e89b3cdf28fe32414"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c3cce8ba586c634d70a304d7e1a0da58b35bbea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c3cce8ba586c634d70a304d7e1a0da58b35bbea", "html_url": "https://github.com/rust-lang/rust/commit/1c3cce8ba586c634d70a304d7e1a0da58b35bbea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c3cce8ba586c634d70a304d7e1a0da58b35bbea/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "810de56079b678caf72e9fa712798da61f11fe77", "url": "https://api.github.com/repos/rust-lang/rust/commits/810de56079b678caf72e9fa712798da61f11fe77", "html_url": "https://github.com/rust-lang/rust/commit/810de56079b678caf72e9fa712798da61f11fe77"}], "stats": {"total": 160, "additions": 158, "deletions": 2}, "files": [{"sha": "c9730c4c58b6d186249cff0111240697e363d815", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c3cce8ba586c634d70a304d7e1a0da58b35bbea/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/1c3cce8ba586c634d70a304d7e1a0da58b35bbea/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=1c3cce8ba586c634d70a304d7e1a0da58b35bbea", "patch": "@@ -113,6 +113,7 @@ name\n [string_lit_as_bytes](https://github.com/Manishearth/rust-clippy/wiki#string_lit_as_bytes)                           | warn    | calling `as_bytes` on a string literal; suggests using a byte string literal instead\n [string_to_string](https://github.com/Manishearth/rust-clippy/wiki#string_to_string)                                 | warn    | calling `String::to_string` which is inefficient\n [suspicious_assignment_formatting](https://github.com/Manishearth/rust-clippy/wiki#suspicious_assignment_formatting) | warn    | suspicious formatting of `*=`, `-=` or `!=`\n+[suspicious_else_formatting](https://github.com/Manishearth/rust-clippy/wiki#suspicious_else_formatting)             | warn    | suspicious formatting of `else if`\n [temporary_assignment](https://github.com/Manishearth/rust-clippy/wiki#temporary_assignment)                         | warn    | assignments to temporaries\n [toplevel_ref_arg](https://github.com/Manishearth/rust-clippy/wiki#toplevel_ref_arg)                                 | warn    | An entire binding was declared as `ref`, in a function argument (`fn foo(ref x: Bar)`), or a `let` statement (`let ref x = foo()`). In such cases, it is preferred to take references with `&`.\n [trivial_regex](https://github.com/Manishearth/rust-clippy/wiki#trivial_regex)                                       | warn    | finds trivial regular expressions in `Regex::new(_)` invocations"}, {"sha": "f82aa7d8188e444b4b990d198225794db4f601c2", "filename": "src/formatting.rs", "status": "modified", "additions": 108, "deletions": 2, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/1c3cce8ba586c634d70a304d7e1a0da58b35bbea/src%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c3cce8ba586c634d70a304d7e1a0da58b35bbea/src%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformatting.rs?ref=1c3cce8ba586c634d70a304d7e1a0da58b35bbea", "patch": "@@ -6,7 +6,7 @@ use syntax::ptr::P;\n \n /// **What it does:** This lint looks for use of the non-existent `=*`, `=!` and `=-` operators.\n ///\n-/// **Why is this bad?** This either a typo of `*=`, `!=` or `-=` or confusing.\n+/// **Why is this bad?** This is either a typo of `*=`, `!=` or `-=` or confusing.\n ///\n /// **Known problems:** None.\n ///\n@@ -20,18 +20,65 @@ declare_lint! {\n     \"suspicious formatting of `*=`, `-=` or `!=`\"\n }\n \n+/// **What it does:** This lint checks for formatting of `else if`. It lints if the `else` and `if`\n+/// are not on the same line or the `else` seems to be missing.\n+///\n+/// **Why is this bad?** This is probably some refactoring remnant, even if the code is correct, it\n+/// might look confusing.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust,ignore\n+/// if foo {\n+/// } if bar { // looks like an `else` is missing here\n+/// }\n+///\n+/// if foo {\n+/// } else\n+///\n+/// if bar { // this is the `else` block of the previous `if`, but should it be?\n+/// }\n+/// ```\n+declare_lint! {\n+    pub SUSPICIOUS_ELSE_FORMATTING,\n+    Warn,\n+    \"suspicious formatting of `else if`\"\n+}\n+\n #[derive(Copy,Clone)]\n pub struct Formatting;\n \n impl LintPass for Formatting {\n     fn get_lints(&self) -> LintArray {\n-        lint_array![SUSPICIOUS_ASSIGNMENT_FORMATTING]\n+        lint_array![SUSPICIOUS_ASSIGNMENT_FORMATTING, SUSPICIOUS_ELSE_FORMATTING]\n     }\n }\n \n impl EarlyLintPass for Formatting {\n+    fn check_block(&mut self, cx: &EarlyContext, block: &ast::Block) {\n+        for w in block.stmts.windows(2) {\n+            match (&w[0].node, &w[1].node) {\n+                (&ast::StmtKind::Expr(ref first, _), &ast::StmtKind::Expr(ref second, _)) |\n+                (&ast::StmtKind::Expr(ref first, _), &ast::StmtKind::Semi(ref second, _)) => {\n+                    check_consecutive_ifs(cx, first, second);\n+                }\n+                _ => (),\n+            }\n+        }\n+\n+        if let Some(ref expr) = block.expr {\n+            if let Some(ref stmt) = block.stmts.iter().last() {\n+                if let ast::StmtKind::Expr(ref first, _) = stmt.node {\n+                    check_consecutive_ifs(cx, first, expr);\n+                }\n+            }\n+        }\n+    }\n+\n     fn check_expr(&mut self, cx: &EarlyContext, expr: &ast::Expr) {\n         check_assign(cx, expr);\n+        check_else_if(cx, expr);\n     }\n }\n \n@@ -64,3 +111,62 @@ fn check_unop(expr: &ast::Expr) -> Option<(&P<ast::Expr>, &'static str)> {\n         _ => None,\n     }\n }\n+\n+/// Implementation of the SUSPICIOUS_ELSE_FORMATTING lint for weird `else if`.\n+fn check_else_if(cx: &EarlyContext, expr: &ast::Expr) {\n+    if let Some((then, &Some(ref else_))) = unsugar_if(expr) {\n+        if unsugar_if(else_).is_some() &&\n+        !differing_macro_contexts(then.span, else_.span) &&\n+        !in_macro(cx, then.span) {\n+            // this will be a span from the closing \u2018}\u2019 of the \u201cthen\u201d block (excluding) to the\n+            // \u201cif\u201d of the \u201celse if\u201d block (excluding)\n+            let else_span = mk_sp(then.span.hi, else_.span.lo);\n+\n+            // the snippet should look like \" else \\n    \" with maybe comments anywhere\n+            // it\u2019s bad when there is a \u2018\\n\u2019 after the \u201celse\u201d\n+            if let Some(else_snippet) = snippet_opt(cx, else_span) {\n+                let else_pos = else_snippet.find(\"else\").expect(\"there must be a `else` here\");\n+\n+                if else_snippet[else_pos..].contains('\\n') {\n+                    span_note_and_lint(cx,\n+                                       SUSPICIOUS_ELSE_FORMATTING,\n+                                       else_span,\n+                                       \"this is an `else if` but the formatting might hide it\",\n+                                       else_span,\n+                                       \"to remove this lint, remove the `else` or remove the new line between `else` and `if`\");\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+/// Implementation of the `SUSPICIOUS_ELSE_FORMATTING` lint for consecutive ifs.\n+fn check_consecutive_ifs(cx: &EarlyContext, first: &ast::Expr, second: &ast::Expr) {\n+    if !differing_macro_contexts(first.span, second.span) &&\n+    !in_macro(cx, first.span) &&\n+    unsugar_if(first).is_some() &&\n+    unsugar_if(second).is_some() {\n+        // where the else would be\n+        let else_span = mk_sp(first.span.hi, second.span.lo);\n+\n+        if let Some(else_snippet) = snippet_opt(cx, else_span) {\n+            if !else_snippet.contains('\\n') {\n+                span_note_and_lint(cx,\n+                                   SUSPICIOUS_ELSE_FORMATTING,\n+                                   else_span,\n+                                   \"this looks like an `else if` but the `else` is missing\",\n+                                   else_span,\n+                                   \"to remove this lint, add the missing `else` or add a new line before the second `if`\");\n+            }\n+        }\n+    }\n+}\n+\n+/// Match `if` or `else if` expressions and return the `then` and `else` block.\n+fn unsugar_if(expr: &ast::Expr) -> Option<(&P<ast::Block>, &Option<P<ast::Expr>>)>{\n+    match expr.node {\n+        ast::ExprKind::If(_, ref then, ref else_) |\n+        ast::ExprKind::IfLet(_, _, ref then, ref else_) => Some((then, else_)),\n+        _ => None,\n+    }\n+}"}, {"sha": "47d9fc6f24c50da0809cff61fdd91aff8c719312", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c3cce8ba586c634d70a304d7e1a0da58b35bbea/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c3cce8ba586c634d70a304d7e1a0da58b35bbea/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=1c3cce8ba586c634d70a304d7e1a0da58b35bbea", "patch": "@@ -215,6 +215,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         eta_reduction::REDUNDANT_CLOSURE,\n         format::USELESS_FORMAT,\n         formatting::SUSPICIOUS_ASSIGNMENT_FORMATTING,\n+        formatting::SUSPICIOUS_ELSE_FORMATTING,\n         identity_op::IDENTITY_OP,\n         items_after_statements::ITEMS_AFTER_STATEMENTS,\n         len_zero::LEN_WITHOUT_IS_EMPTY,"}, {"sha": "14a23111ec7e54def16121c710316c0a89103842", "filename": "tests/compile-fail/formatting.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/1c3cce8ba586c634d70a304d7e1a0da58b35bbea/tests%2Fcompile-fail%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c3cce8ba586c634d70a304d7e1a0da58b35bbea/tests%2Fcompile-fail%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fformatting.rs?ref=1c3cce8ba586c634d70a304d7e1a0da58b35bbea", "patch": "@@ -6,7 +6,55 @@\n #![allow(unused_assignments)]\n #![allow(if_same_then_else)]\n \n+fn foo() -> bool { true }\n+\n fn main() {\n+    // weird `else if` formatting:\n+    if foo() {\n+    } if foo() { //~ERROR this looks like an `else if` but the `else` is missing\n+    }\n+\n+    let _ = {\n+        if foo() {\n+        } if foo() { //~ERROR this looks like an `else if` but the `else` is missing\n+        }\n+        else {\n+        }\n+    };\n+\n+    if foo() {\n+    } else //~ERROR this is an `else if` but the formatting might hide it\n+    if foo() { // the span of the above error should continue here\n+    }\n+\n+    if foo() {\n+    } //~ERROR this is an `else if` but the formatting might hide it\n+    else\n+    if foo() { // the span of the above error should continue here\n+    }\n+\n+    // those are ok:\n+    if foo() {\n+    }\n+    if foo() {\n+    }\n+\n+    if foo() {\n+    } else if foo() {\n+    }\n+\n+    if foo() {\n+    }\n+    else if foo() {\n+    }\n+\n+    if foo() {\n+    }\n+\n+    else if\n+\n+    foo() {}\n+\n     // weird op_eq formatting:\n     let mut a = 42;\n     a =- 35;"}]}