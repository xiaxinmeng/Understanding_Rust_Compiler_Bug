{"sha": "eb8a7031ef1ecd9b44a929f0b93f0e41c78fda25", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViOGE3MDMxZWYxZWNkOWI0NGE5MjlmMGI5M2YwZTQxYzc4ZmRhMjU=", "commit": {"author": {"name": "YI", "email": "uuuuuu@protonmail.com", "date": "2020-04-26T02:28:33Z"}, "committer": {"name": "YI", "email": "uuuuuu@protonmail.com", "date": "2020-04-26T02:28:33Z"}, "message": "use defkind.descr in wrong namespace resolve failure", "tree": {"sha": "2c3342d656f4bf6a396d373465a6446c6da0a63e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c3342d656f4bf6a396d373465a6446c6da0a63e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb8a7031ef1ecd9b44a929f0b93f0e41c78fda25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb8a7031ef1ecd9b44a929f0b93f0e41c78fda25", "html_url": "https://github.com/rust-lang/rust/commit/eb8a7031ef1ecd9b44a929f0b93f0e41c78fda25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb8a7031ef1ecd9b44a929f0b93f0e41c78fda25/comments", "author": {"login": "contrun", "id": 32609395, "node_id": "MDQ6VXNlcjMyNjA5Mzk1", "avatar_url": "https://avatars.githubusercontent.com/u/32609395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/contrun", "html_url": "https://github.com/contrun", "followers_url": "https://api.github.com/users/contrun/followers", "following_url": "https://api.github.com/users/contrun/following{/other_user}", "gists_url": "https://api.github.com/users/contrun/gists{/gist_id}", "starred_url": "https://api.github.com/users/contrun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/contrun/subscriptions", "organizations_url": "https://api.github.com/users/contrun/orgs", "repos_url": "https://api.github.com/users/contrun/repos", "events_url": "https://api.github.com/users/contrun/events{/privacy}", "received_events_url": "https://api.github.com/users/contrun/received_events", "type": "User", "site_admin": false}, "committer": {"login": "contrun", "id": 32609395, "node_id": "MDQ6VXNlcjMyNjA5Mzk1", "avatar_url": "https://avatars.githubusercontent.com/u/32609395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/contrun", "html_url": "https://github.com/contrun", "followers_url": "https://api.github.com/users/contrun/followers", "following_url": "https://api.github.com/users/contrun/following{/other_user}", "gists_url": "https://api.github.com/users/contrun/gists{/gist_id}", "starred_url": "https://api.github.com/users/contrun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/contrun/subscriptions", "organizations_url": "https://api.github.com/users/contrun/orgs", "repos_url": "https://api.github.com/users/contrun/repos", "events_url": "https://api.github.com/users/contrun/events{/privacy}", "received_events_url": "https://api.github.com/users/contrun/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb1eedb026931853e2f37e752c45b7f3b59c5fa6", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb1eedb026931853e2f37e752c45b7f3b59c5fa6", "html_url": "https://github.com/rust-lang/rust/commit/bb1eedb026931853e2f37e752c45b7f3b59c5fa6"}], "stats": {"total": 45, "additions": 24, "deletions": 21}, "files": [{"sha": "2d53b7553a15695e12cc3ecfeb8f57fb4d1e7fc8", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/eb8a7031ef1ecd9b44a929f0b93f0e41c78fda25/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb8a7031ef1ecd9b44a929f0b93f0e41c78fda25/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=eb8a7031ef1ecd9b44a929f0b93f0e41c78fda25", "patch": "@@ -2213,25 +2213,28 @@ impl<'a> Resolver<'a> {\n                     } else {\n                         let mut msg =\n                             format!(\"could not find `{}` in `{}`\", ident, path[i - 1].ident);\n-                        if ns == TypeNS {\n-                            if let FindBindingResult::Binding(Ok(_)) =\n-                                find_binding_in_ns(self, ValueNS)\n+                        if ns == TypeNS || ns == ValueNS {\n+                            let ns_to_try = if ns == TypeNS { ValueNS } else { TypeNS };\n+                            if let FindBindingResult::Binding(Ok(binding)) =\n+                                find_binding_in_ns(self, ns_to_try)\n                             {\n-                                msg = format!(\n-                                    \"`{}` in `{}` is a concrete value, not a module or Struct you specified\",\n-                                    ident,\n-                                    path[i - 1].ident\n-                                );\n-                            };\n-                        } else if ns == ValueNS {\n-                            if let FindBindingResult::Binding(Ok(_)) =\n-                                find_binding_in_ns(self, TypeNS)\n-                            {\n-                                msg = format!(\n-                                    \"`{}` in `{}` is a type, not a concrete value you specified\",\n-                                    ident,\n-                                    path[i - 1].ident\n-                                );\n+                                let mut found = |what| {\n+                                    msg = format!(\n+                                        \"expected {}, found {} `{}` in `{}`\",\n+                                        ns.descr(),\n+                                        what,\n+                                        ident,\n+                                        path[i - 1].ident\n+                                    )\n+                                };\n+                                if binding.module().is_some() {\n+                                    found(\"module\")\n+                                } else {\n+                                    match binding.res() {\n+                                        def::Res::<NodeId>::Def(kind, id) => found(kind.descr(id)),\n+                                        _ => found(ns_to_try.descr()),\n+                                    }\n+                                }\n                             };\n                         }\n                         (msg, None)"}, {"sha": "6266112c3a86c0526309d415d2c7a7de3388ae48", "filename": "src/test/ui/issues/issue-71406.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb8a7031ef1ecd9b44a929f0b93f0e41c78fda25/src%2Ftest%2Fui%2Fissues%2Fissue-71406.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb8a7031ef1ecd9b44a929f0b93f0e41c78fda25/src%2Ftest%2Fui%2Fissues%2Fissue-71406.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-71406.rs?ref=eb8a7031ef1ecd9b44a929f0b93f0e41c78fda25", "patch": "@@ -2,5 +2,5 @@ use std::sync::mpsc;\n \n fn main() {\n     let (tx, rx) = mpsc::channel::new(1);\n-    //~^ ERROR `channel` in `mpsc` is a concrete value, not a module or Struct you specified\n+    //~^ ERROR expected type, found function `channel` in `mpsc`\n }"}, {"sha": "918163b60947309b5a55fb0ecd87c2c695d86f9c", "filename": "src/test/ui/issues/issue-71406.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb8a7031ef1ecd9b44a929f0b93f0e41c78fda25/src%2Ftest%2Fui%2Fissues%2Fissue-71406.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb8a7031ef1ecd9b44a929f0b93f0e41c78fda25/src%2Ftest%2Fui%2Fissues%2Fissue-71406.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-71406.stderr?ref=eb8a7031ef1ecd9b44a929f0b93f0e41c78fda25", "patch": "@@ -1,8 +1,8 @@\n-error[E0433]: failed to resolve: `channel` in `mpsc` is a concrete value, not a module or Struct you specified\n+error[E0433]: failed to resolve: expected type, found function `channel` in `mpsc`\n   --> $DIR/issue-71406.rs:4:26\n    |\n LL |     let (tx, rx) = mpsc::channel::new(1);\n-   |                          ^^^^^^^ `channel` in `mpsc` is a concrete value, not a module or Struct you specified\n+   |                          ^^^^^^^ expected type, found function `channel` in `mpsc`\n \n error: aborting due to previous error\n "}]}