{"sha": "404a4619dc132c53c6c5c9e023316c779275b223", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwNGE0NjE5ZGMxMzJjNTNjNmM1YzllMDIzMzE2Yzc3OTI3NWIyMjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-19T09:46:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-19T09:46:25Z"}, "message": "auto merge of #9939 : sinma/rust/doc, r=alexcrichton\n\nRecently, the float type, and the rust and rusti tools have been removed from master.\r\n\r\nfloat replaced by f64 in code examples, removed mentions of float, f suffix, rust and rusti in explanations.\r\n\r\n(+ some stupid things like rust -> Rust)", "tree": {"sha": "5ce3d89862eab1bb3e5a641655f3cb91c7cbe437", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ce3d89862eab1bb3e5a641655f3cb91c7cbe437"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/404a4619dc132c53c6c5c9e023316c779275b223", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/404a4619dc132c53c6c5c9e023316c779275b223", "html_url": "https://github.com/rust-lang/rust/commit/404a4619dc132c53c6c5c9e023316c779275b223", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/404a4619dc132c53c6c5c9e023316c779275b223/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f2480420e5412e03d1b046be283573af312bdd8", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f2480420e5412e03d1b046be283573af312bdd8", "html_url": "https://github.com/rust-lang/rust/commit/8f2480420e5412e03d1b046be283573af312bdd8"}, {"sha": "62cb92d4ea46b73a18e43c45b7445e71cd926d4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/62cb92d4ea46b73a18e43c45b7445e71cd926d4c", "html_url": "https://github.com/rust-lang/rust/commit/62cb92d4ea46b73a18e43c45b7445e71cd926d4c"}], "stats": {"total": 425, "additions": 209, "deletions": 216}, "files": [{"sha": "076ef7f245263fff3e64acfdc15c0fc00773afac", "filename": "doc/po/ja/tutorial.md.po", "status": "modified", "additions": 121, "deletions": 126, "changes": 247, "blob_url": "https://github.com/rust-lang/rust/blob/404a4619dc132c53c6c5c9e023316c779275b223/doc%2Fpo%2Fja%2Ftutorial.md.po", "raw_url": "https://github.com/rust-lang/rust/raw/404a4619dc132c53c6c5c9e023316c779275b223/doc%2Fpo%2Fja%2Ftutorial.md.po", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fpo%2Fja%2Ftutorial.md.po?ref=404a4619dc132c53c6c5c9e023316c779275b223", "patch": "@@ -39,18 +39,18 @@ msgstr \"\"\n #, no-wrap\n msgid \"\"\n \"~~~\\n\"\n-\"# trait Shape { fn area(&self) -> float; }\\n\"\n-\"# trait Circle : Shape { fn radius(&self) -> float; }\\n\"\n-\"fn radius_times_area<T: Circle>(c: T) -> float {\\n\"\n+\"# trait Shape { fn area(&self) -> f64; }\\n\"\n+\"# trait Circle : Shape { fn radius(&self) -> f64; }\\n\"\n+\"fn radius_times_area<T: Circle>(c: T) -> f64 {\\n\"\n \"    // `c` is both a Circle and a Shape\\n\"\n \"    c.radius() * c.area()\\n\"\n \"}\\n\"\n \"~~~\\n\"\n msgstr \"\"\n \"~~~\\n\"\n-\"# trait Shape { fn area(&self) -> float; }\\n\"\n-\"# trait Circle : Shape { fn radius(&self) -> float; }\\n\"\n-\"fn radius_times_area<T: Circle>(c: T) -> float {\\n\"\n+\"# trait Shape { fn area(&self) -> f64; }\\n\"\n+\"# trait Circle : Shape { fn radius(&self) -> f64; }\\n\"\n+\"fn radius_times_area<T: Circle>(c: T) -> f64 {\\n\"\n \"    // `c` \u306f Circle \u3067\u3082\u3042\u308a\u3001Shape \u3067\u3082\u3042\u308b\\n\"\n \"    c.radius() * c.area()\\n\"\n \"}\\n\"\n@@ -369,19 +369,14 @@ msgstr \"\"\n msgid \"\"\n \"When complete, `make install` will place several programs into `/usr/local/\"\n \"bin`: `rustc`, the Rust compiler; `rustdoc`, the API-documentation tool; \"\n-\"`rustpkg`, the Rust package manager; `rusti`, the Rust REPL; and `rust`, a \"\n-\"tool which acts both as a unified interface for them, and for a few common \"\n-\"command line scenarios.\"\n+\"and `rustpkg`, the Rust package manager.\"\n msgstr \"\"\n \"\u30d3\u30eb\u30c9\u5b8c\u4e86\u5f8c\u3001`make install` \u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u304c `/usr/local/\"\n \"bin` \u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u307e\u3059\u3002\\n\"\n \"\\n\"\n \"* `rustc`: Rust \u306e\u30b3\u30f3\u30d1\u30a4\u30e9\\n\"\n \"* `rustdoc`: API \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u4f5c\u6210\u30c4\u30fc\u30eb\\n\"\n \"* `rustpkg`: Rust \u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u30de\u30cd\u30fc\u30b8\u30e3\\n\"\n-\"* `rust`: Rust \u306e REPL\\n\"\n-\"* `rust`: Rust \u306e\u30c4\u30fc\u30eb\u7fa4\u3078\u306e\u5171\u901a\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3068\u3001\u3044\u304f\u3064\u304b\u306e\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\"\n-\"\u30f3\u30b7\u30ca\u30ea\u30aa\u3092\u63d0\u4f9b\u3059\u308b\u30c4\u30fc\u30eb\"\n \n #. type: Plain text\n #: doc/tutorial.md:123\n@@ -491,12 +486,12 @@ msgstr \"\"\n #. type: Plain text\n #: doc/tutorial.md:169\n msgid \"\"\n-\"The `rust` tool provides central access to the other rust tools, as well as \"\n+\"The `rust` tool provides central access to the other Rust tools, as well as \"\n \"handy shortcuts for directly running source files.  For example, if you have \"\n \"a file `foo.rs` in your current directory, `rust run foo.rs` would attempt \"\n \"to compile it and, if successful, directly run the resulting binary.\"\n msgstr \"\"\n-\"`rust` \u30c4\u30fc\u30eb\u306b\u306f\u3001rust \u30c4\u30fc\u30eb\u7fa4\u3092\u7d71\u4e00\u7684\u306a\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3067\u547c\u3073\u51fa\u3059\u6a5f\u80fd\u3060\u3051\"\n+\"`rust` \u30c4\u30fc\u30eb\u306b\u306f\u3001Rust \u30c4\u30fc\u30eb\u7fa4\u3092\u7d71\u4e00\u7684\u306a\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3067\u547c\u3073\u51fa\u3059\u6a5f\u80fd\u3060\u3051\"\n \"\u3067\u306a\u304f\u3001\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3092\u76f4\u63a5\u5b9f\u884c\u3059\u308b\u4fbf\u5229\u306a\u30b7\u30e7\u30fc\u30c8\u30ab\u30c3\u30c8\u6a5f\u80fd\u3082\u3042\u308a\u307e\u3059\u3002\u4f8b\u3048\"\n \"\u3070\u3001\u30ab\u30ec\u30f3\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u3042\u308b `foo.rs` \u3092\u5b9f\u884c\u3057\u3088\u3046\u3068\u3059\u308b\u5834\u5408\u3001 `rust run \"\n \"foo.rs` \u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u304b\u3089\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u6210\u529f\u5f8c\u306b\u751f\u6210\u3055\u308c\u308b\u30d0\u30a4\u30ca\"\n@@ -667,11 +662,11 @@ msgstr \"\"\n #. type: Plain text\n #: doc/tutorial.md:243\n msgid \"\"\n-\"~~~~ static MONSTER_FACTOR: float = 57.8; let monster_size = MONSTER_FACTOR \"\n+\"~~~~ static MONSTER_FACTOR: f64 = 57.8; let monster_size = MONSTER_FACTOR \"\n \"* 10.0; let monster_size: int = 50; ~~~~\"\n msgstr \"\"\n \"~~~~\\n\"\n-\"static MONSTER_FACTOR: float = 57.8;\\n\"\n+\"static MONSTER_FACTOR: f64 = 57.8;\\n\"\n \"let monster_size = MONSTER_FACTOR * 10.0;\\n\"\n \"let monster_size: int = 50;\\n\"\n \"~~~~\"\n@@ -680,7 +675,7 @@ msgstr \"\"\n #: doc/tutorial.md:252\n msgid \"\"\n \"Local variables may shadow earlier declarations, as in the previous example: \"\n-\"`monster_size` was first declared as a `float`, and then a second \"\n+\"`monster_size` was first declared as a `f64`, and then a second \"\n \"`monster_size` was declared as an `int`. If you were to actually compile \"\n \"this example, though, the compiler would determine that the first \"\n \"`monster_size` is unused and issue a warning (because this situation is \"\n@@ -689,7 +684,7 @@ msgid \"\"\n \"the warning, like `let _monster_size = 50;`.\"\n msgstr \"\"\n \"\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u306f\u3001\u5148\u884c\u3059\u308b\u5ba3\u8a00\u3092\u96a0\u3059\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\u5148\u306e\u4f8b\u3067\u306f\u30011\u3064\u76ee\u306e \"\n-\"`monster_size` \u306f `float` \u3068\u3057\u3066\u5ba3\u8a00\u3055\u308c\u30012\u3064\u76ee\u306e `monster_size` \u306f `int` \u3068\"\n+\"`monster_size` \u306f `f64` \u3068\u3057\u3066\u5ba3\u8a00\u3055\u308c\u30012\u3064\u76ee\u306e `monster_size` \u306f `int` \u3068\"\n \"\u3057\u3066\u5ba3\u8a00\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u305f\u5834\u5408\u3001\u300c1\u3064\u76ee\u306e \"\n \"`monster_size` \u306f\u672a\u4f7f\u7528\u3067\u3042\u308b\u300d\u3068\u3044\u3046\u8b66\u544a\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u51fa\u529b\u3055\u308c\u307e\u3059 (\u30d7\u30ed\u30b0\u30e9\u30de\"\n \"\u304c\u4f55\u3089\u304b\u306e\u8aa4\u308a\u3092\u72af\u3057\u3066\u3044\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u305f\u3081)\u3002\u672a\u4f7f\u7528\u5909\u6570\u306e\u5b58\u5728\u304c\u610f\u56f3\u7684\u306a\u3082\u306e\u3067\"\n@@ -899,15 +894,15 @@ msgstr \"\"\n #. type: Plain text\n #: doc/tutorial.md:349\n msgid \"\"\n-\"There are three floating-point types: `float`, `f32`, and `f64`.  Floating-\"\n-\"point numbers are written `0.0`, `1e6`, or `2.1e-4`.  Like integers, \"\n-\"floating-point literals are inferred to the correct type.  Suffixes `f`, \"\n+\"There are two floating-point types: `f32`, and `f64`. Floating-\"\n+\"point numbers are written `0.0`, `1e6`, or `2.1e-4`. Like integers, \"\n+\"floating-point literals are inferred to the correct type. Suffixes \"\n \"`f32`, and `f64` can be used to create literals of a specific type.\"\n msgstr \"\"\n-\"\u6d6e\u52d5\u5c0f\u6570\u578b\u306f\u3001 `float`, `f32`, `f64` \u306e3\u7a2e\u985e\u304c\u3042\u308a\u307e\u3059\u3002\u6d6e\u52d5\u5c0f\u6570\u30ea\u30c6\u30e9\u30eb\u306f \"\n+\"\u6d6e\u52d5\u5c0f\u6570\u578b\u306f\u3001 `f32`, `f64` \u306e2\u7a2e\u985e\u304c\u3042\u308a\u307e\u3059\u3002\u6d6e\u52d5\u5c0f\u6570\u30ea\u30c6\u30e9\u30eb\u306f \"\n \"`0.0` \u3084\u3001 `1e6`\u3001 `2.1e-4` \u3068\u3044\u3063\u305f\u8868\u8a18\u304c\u53ef\u80fd\u3067\u3059\u3002\u6574\u6570\u3068\u540c\u3058\u304f\u3001\u30b5\u30d5\u30a3\u30c3\u30af\"\n \"\u30b9\u304c\u7701\u7565\u3055\u308c\u305f\u6d6e\u52d5\u5c0f\u6570\u30ea\u30c6\u30e9\u30eb\u306f\u578b\u63a8\u8ad6\u3055\u308c\u307e\u3059\u3002\u6d6e\u52d5\u5c0f\u6570\u306e\u30b5\u30d5\u30a3\u30c3\u30af\u30b9\u306f \"\n-\"`f`\u3001`f32`\u3001`f64` \u306e3\u7a2e\u985e\u3067\u3001\u30ea\u30c6\u30e9\u30eb\u306e\u672b\u5c3e\u306b\u3064\u3051\u308b\u3053\u3068\u3067\u3001\u5bfe\u5fdc\u3059\u308b\u578b\u306e\u5024\u3092\u4f5c\"\n+\"`f32`\u3001`f64` \u306e3\u7a2e\u985e\u3067\u3001\u30ea\u30c6\u30e9\u30eb\u306e\u672b\u5c3e\u306b\u3064\u3051\u308b\u3053\u3068\u3067\u3001\u5bfe\u5fdc\u3059\u308b\u578b\u306e\u5024\u3092\u4f5c\"\n \"\u308a\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\"\n \n #. type: Plain text\n@@ -991,10 +986,10 @@ msgstr \"\"\n #. type: Plain text\n #: doc/tutorial.md:385\n msgid \"\"\n-\"~~~~ let x: float = 4.0; let y: uint = x as uint; assert!(y == 4u); ~~~~\"\n+\"~~~~ let x: f64 = 4.0; let y: uint = x as uint; assert!(y == 4u); ~~~~\"\n msgstr \"\"\n \"~~~~\\n\"\n-\"let x: float = 4.0;\\n\"\n+\"let x: f64 = 4.0;\\n\"\n \"let y: uint = x as uint;\\n\"\n \"assert!(y == 4u);\\n\"\n \"~~~~\"\n@@ -1245,11 +1240,11 @@ msgstr \"\"\n #. type: Plain text\n #: doc/tutorial.md:500\n msgid \"\"\n-\"> ***Note:*** The following code makes use of tuples (`(float, float)`) \"\n+\"> ***Note:*** The following code makes use of tuples (`(f64, f64)`) \"\n \"which > are explained in section 5.3. For now you can think of tuples as a \"\n \"list of > items.\"\n msgstr \"\"\n-\"> ***\u6ce8\u610f:*** \u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u4f8b\u3067\u306f5.3 \u7bc0\u3067\u8aac\u660e\u3055\u308c\u308b\u30bf\u30d7\u30eb (`(float, float)`) \"\n+\"> ***\u6ce8\u610f:*** \u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u4f8b\u3067\u306f5.3 \u7bc0\u3067\u8aac\u660e\u3055\u308c\u308b\u30bf\u30d7\u30eb (`(f64, f64)`) \"\n \"\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\u73fe\u6642\u70b9\u3067\u306f\u3001\u30bf\u30d7\u30eb\u306f\u9805\u76ee\u306e\u30ea\u30b9\u30c8\u306e\u3088\u3046\u306a\u3082\u306e\u3060\u3068\u307f\u306a\u3057\u3066\u304f\u3060\"\n \"\u3055\u3044\u3002\"\n \n@@ -1258,10 +1253,10 @@ msgstr \"\"\n #, no-wrap\n msgid \"\"\n \"~~~~\\n\"\n-\"use std::float;\\n\"\n+\"use std::f64;\\n\"\n \"use std::num::atan;\\n\"\n-\"fn angle(vector: (float, float)) -> float {\\n\"\n-\"    let pi = float::consts::pi;\\n\"\n+\"fn angle(vector: (f64, f64)) -> f64 {\\n\"\n+\"    let pi = f64::consts::pi;\\n\"\n \"    match vector {\\n\"\n \"      (0f, y) if y < 0f => 1.5 * pi,\\n\"\n \"      (0f, y) => 0.5 * pi,\\n\"\n@@ -1438,8 +1433,8 @@ msgstr \"\"\n msgid \"\"\n \"~~~~\\n\"\n \"struct Point {\\n\"\n-\"    x: float,\\n\"\n-\"    y: float\\n\"\n+\"    x: f64,\\n\"\n+\"    y: f64\\n\"\n \"}\\n\"\n \"~~~~\\n\"\n msgstr \"\"\n@@ -1471,11 +1466,11 @@ msgstr \"\"\n #. type: Plain text\n #: doc/tutorial.md:602\n msgid \"\"\n-\"~~~~ {.xfail-test} # struct Point { x: float, y: float } let mut mypoint = \"\n+\"~~~~ {.xfail-test} # struct Point { x: f64, y: f64 } let mut mypoint = \"\n \"Point { x: 1.0, y: 1.0 }; let origin = Point { x: 0.0, y: 0.0 };\"\n msgstr \"\"\n \"~~~~ {.xfail-test}\\n\"\n-\"# struct Point { x: float, y: float }\\n\"\n+\"# struct Point { x: f64, y: f64 }\\n\"\n \"let mut mypoint = Point { x: 1.0, y: 1.0 };\\n\"\n \"let origin = Point { x: 0.0, y: 0.0 };\"\n \n@@ -1504,7 +1499,7 @@ msgstr \"\"\n #, no-wrap\n msgid \"\"\n \"~~~~\\n\"\n-\"# struct Point { x: float, y: float }\\n\"\n+\"# struct Point { x: f64, y: f64 }\\n\"\n \"# let mypoint = Point { x: 0.0, y: 0.0 };\\n\"\n \"match mypoint {\\n\"\n \"    Point { x: 0.0, y: yy } => { println(yy.to_str());                     }\\n\"\n@@ -1533,7 +1528,7 @@ msgstr \"\"\n #, no-wrap\n msgid \"\"\n \"~~~\\n\"\n-\"# struct Point { x: float, y: float }\\n\"\n+\"# struct Point { x: f64, y: f64 }\\n\"\n \"# let mypoint = Point { x: 0.0, y: 0.0 };\\n\"\n \"match mypoint {\\n\"\n \"    Point { x, _ } => { println(x.to_str()) }\\n\"\n@@ -1560,9 +1555,9 @@ msgstr \"\"\n #, no-wrap\n msgid \"\"\n \"~~~~\\n\"\n-\"# struct Point { x: float, y: float }\\n\"\n+\"# struct Point { x: f64, y: f64 }\\n\"\n \"enum Shape {\\n\"\n-\"    Circle(Point, float),\\n\"\n+\"    Circle(Point, f64),\\n\"\n \"    Rectangle(Point, Point)\\n\"\n \"}\\n\"\n \"~~~~\\n\"\n@@ -1572,12 +1567,12 @@ msgstr \"\"\n #: doc/tutorial.md:652\n msgid \"\"\n \"A value of this type is either a `Circle`, in which case it contains a \"\n-\"`Point` struct and a float, or a `Rectangle`, in which case it contains two \"\n+\"`Point` struct and a `f64`, or a `Rectangle`, in which case it contains two \"\n \"`Point` structs. The run-time representation of such a value includes an \"\n \"identifier of the actual form that it holds, much like the \\\"tagged union\\\" \"\n \"pattern in C, but with better static guarantees.\"\n msgstr \"\"\n-\"\u3053\u306e\u578b\u306e\u5024\u306f\u3001`Point` \u69cb\u9020\u4f53\u3068 `float` \u3092\u542b\u3080 `Circle` \u304b\u30012\u3064\u306e `Point` \u69cb\u9020\"\n+\"\u3053\u306e\u578b\u306e\u5024\u306f\u3001`Point` \u69cb\u9020\u4f53\u3068 `f64` \u3092\u542b\u3080 `Circle` \u304b\u30012\u3064\u306e `Point` \u69cb\u9020\"\n \"\u4f53\u3092\u542b\u3080 `Rectangle` \u306e\u3069\u3061\u3089\u304b\u306b\u306a\u308a\u307e\u3059\u3002\u5217\u6319\u578b\u306e\u5024\u306e\u5b9f\u884c\u6642\u8868\u73fe\u306b\u306f\u3001\u5024\u304c\u3069\"\n \"\u306e\u5f62\u5f0f\u3092\u3068\u3063\u3066\u3044\u308b\u306e\u304b\u793a\u3059\u8b58\u5225\u5b50\u304c\u542b\u307e\u308c\u307e\u3059\u3002\u3053\u306e\u8868\u73fe\u65b9\u6cd5\u306f C \u306e \\\"\u30bf\u30b0\u4ed8\u304d\"\n \"\u5171\u7528\u4f53\\\" \u3068\u975e\u5e38\u306b\u3088\u304f\u4f3c\u3066\u3044\u307e\u3059\u304c\u3001Rust \u306e\u5217\u6319\u578b\u306f\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u3088\u308a\u5024\u306e\u6b63\u5f53\u6027\"\n@@ -1689,12 +1684,12 @@ msgstr \"\"\n #, no-wrap\n msgid \"\"\n \"~~~~\\n\"\n-\"use std::float;\\n\"\n-\"# struct Point {x: float, y: float}\\n\"\n-\"# enum Shape { Circle(Point, float), Rectangle(Point, Point) }\\n\"\n-\"fn area(sh: Shape) -> float {\\n\"\n+\"use std::f64;\\n\"\n+\"# struct Point {x: f64, y: f64}\\n\"\n+\"# enum Shape { Circle(Point, f64), Rectangle(Point, Point) }\\n\"\n+\"fn area(sh: Shape) -> f64 {\\n\"\n \"    match sh {\\n\"\n-\"        Circle(_, size) => float::consts::pi * size * size,\\n\"\n+\"        Circle(_, size) => f64::consts::pi * size * size,\\n\"\n \"        Rectangle(Point { x, y }, Point { x: x2, y: y2 }) => (x2 - x) * (y2 - y)\\n\"\n \"    }\\n\"\n \"}\\n\"\n@@ -1719,7 +1714,7 @@ msgstr \"\"\n #, no-wrap\n msgid \"\"\n \"~~~~\\n\"\n-\"# struct Point { x: float, y: float }\\n\"\n+\"# struct Point { x: f64, y: f64 }\\n\"\n \"# enum Direction { North, East, South, West }\\n\"\n \"fn point_from_direction(dir: Direction) -> Point {\\n\"\n \"    match dir {\\n\"\n@@ -1742,16 +1737,16 @@ msgstr \"\u4ee5\u4e0b\u306e\u4f8b\u306e\u3088\u3046\u306b\u3001\u5217\u6319\u578b\u30d0\u30ea\u30a2\u30f3\u30c8\u3092\u69cb\u9020\u4f53\u306b\u3059\u308b\n #, no-wrap\n msgid \"\"\n \"~~~~\\n\"\n-\"use std::float;\\n\"\n-\"# struct Point { x: float, y: float }\\n\"\n-\"# fn square(x: float) -> float { x * x }\\n\"\n+\"use std::f64;\\n\"\n+\"# struct Point { x: f64, y: f64 }\\n\"\n+\"# fn square(x: f64) -> f64 { x * x }\\n\"\n \"enum Shape {\\n\"\n-\"    Circle { center: Point, radius: float },\\n\"\n+\"    Circle { center: Point, radius: f64 },\\n\"\n \"    Rectangle { top_left: Point, bottom_right: Point }\\n\"\n \"}\\n\"\n-\"fn area(sh: Shape) -> float {\\n\"\n+\"fn area(sh: Shape) -> f64 {\\n\"\n \"    match sh {\\n\"\n-\"        Circle { radius: radius, _ } => float::consts::pi * square(radius),\\n\"\n+\"        Circle { radius: radius, _ } => f64::consts::pi * square(radius),\\n\"\n \"        Rectangle { top_left: top_left, bottom_right: bottom_right } => {\\n\"\n \"            (bottom_right.x - top_left.x) * (bottom_right.y - top_left.y)\\n\"\n \"        }\\n\"\n@@ -1783,7 +1778,7 @@ msgstr \"\"\n #, no-wrap\n msgid \"\"\n \"~~~~\\n\"\n-\"let mytup: (int, int, float) = (10, 20, 30.0);\\n\"\n+\"let mytup: (int, int, f64) = (10, 20, 30.0);\\n\"\n \"match mytup {\\n\"\n \"  (a, b, c) => info!(a + b + (c as int))\\n\"\n \"}\\n\"\n@@ -1814,15 +1809,15 @@ msgstr \"\"\n msgid \"\"\n \"For example:\\n\"\n \"~~~~\\n\"\n-\"struct MyTup(int, int, float);\\n\"\n+\"struct MyTup(int, int, f64);\\n\"\n \"let mytup: MyTup = MyTup(10, 20, 30.0);\\n\"\n \"match mytup {\\n\"\n \"  MyTup(a, b, c) => info!(a + b + (c as int))\\n\"\n \"}\\n\"\n \"~~~~\\n\"\n msgstr \"\"\n \"~~~~\\n\"\n-\"struct MyTup(int, int, float);\\n\"\n+\"struct MyTup(int, int, f64);\\n\"\n \"let mytup: MyTup = MyTup(10, 20, 30.0);\\n\"\n \"match mytup {\\n\"\n \"  MyTup(a, b, c) => info!(a + b + (c as int))\\n\"\n@@ -2023,10 +2018,10 @@ msgstr \"\"\n \n #. type: Plain text\n #: doc/tutorial.md:866\n-msgid \"~~~ fn first((value, _): (int, float)) -> int { value } ~~~\"\n+msgid \"~~~ fn first((value, _): (int, f64)) -> int { value } ~~~\"\n msgstr \"\"\n \"~~~\\n\"\n-\"fn first((value, _): (int, float)) -> int { value }\\n\"\n+\"fn first((value, _): (int, f64)) -> int { value }\\n\"\n \"~~~\"\n \n #. type: Plain text\n@@ -2521,8 +2516,8 @@ msgstr \"\u4f8b\u3068\u3057\u3066\u3001\u30b7\u30f3\u30d7\u30eb\u306a\u69cb\u9020\u4f53\u578b\u306e `Point` \u306b\u3064\u3044\u3066\u8003\u3048\n msgid \"\"\n \"~~~\\n\"\n \"struct Point {\\n\"\n-\"    x: float,\\n\"\n-\"    y: float\\n\"\n+\"    x: f64,\\n\"\n+\"    y: f64\\n\"\n \"}\\n\"\n \"~~~~\\n\"\n msgstr \"\"\n@@ -2543,7 +2538,7 @@ msgstr \"\"\n #, no-wrap\n msgid \"\"\n \"~~~\\n\"\n-\"# struct Point { x: float, y: float }\\n\"\n+\"# struct Point { x: f64, y: f64 }\\n\"\n \"let on_the_stack : Point  =  Point { x: 3.0, y: 4.0 };\\n\"\n \"let managed_box  : @Point = @Point { x: 5.0, y: 1.0 };\\n\"\n \"let owned_box    : ~Point = ~Point { x: 7.0, y: 9.0 };\\n\"\n@@ -2579,9 +2574,9 @@ msgstr \"\"\n #, no-wrap\n msgid \"\"\n \"~~~\\n\"\n-\"# struct Point { x: float, y: float }\\n\"\n-\"# fn sqrt(f: float) -> float { 0f }\\n\"\n-\"fn compute_distance(p1: &Point, p2: &Point) -> float {\\n\"\n+\"# struct Point { x: f64, y: f64 }\\n\"\n+\"# fn sqrt(f: f64) -> f64 { 0f }\\n\"\n+\"fn compute_distance(p1: &Point, p2: &Point) -> f64 {\\n\"\n \"    let x_d = p1.x - p2.x;\\n\"\n \"    let y_d = p1.y - p2.y;\\n\"\n \"    sqrt(x_d * x_d + y_d * y_d)\\n\"\n@@ -2600,11 +2595,11 @@ msgstr \"\"\n #, no-wrap\n msgid \"\"\n \"~~~\\n\"\n-\"# struct Point{ x: float, y: float };\\n\"\n+\"# struct Point{ x: f64, y: f64 };\\n\"\n \"# let on_the_stack : Point  =  Point { x: 3.0, y: 4.0 };\\n\"\n \"# let managed_box  : @Point = @Point { x: 5.0, y: 1.0 };\\n\"\n \"# let owned_box    : ~Point = ~Point { x: 7.0, y: 9.0 };\\n\"\n-\"# fn compute_distance(p1: &Point, p2: &Point) -> float { 0f }\\n\"\n+\"# fn compute_distance(p1: &Point, p2: &Point) -> f64 { 0f }\\n\"\n \"compute_distance(&on_the_stack, managed_box);\\n\"\n \"compute_distance(managed_box, owned_box);\\n\"\n \"~~~\\n\"\n@@ -2824,13 +2819,13 @@ msgstr \"\"\n #. type: Plain text\n #: doc/tutorial.md:1209\n msgid \"\"\n-\"~~~ # struct Point { x: float, y: float } # enum Shape { Rectangle(Point, \"\n+\"~~~ # struct Point { x: f64, y: f64 } # enum Shape { Rectangle(Point, \"\n \"Point) } # impl Shape { fn area(&self) -> int { 0 } } let start = @Point \"\n \"{ x: 10f, y: 20f }; let end = ~Point { x: (*start).x + 100f, y: (*start).y + \"\n \"100f }; let rect = &Rectangle(*start, *end); let area = (*rect).area(); ~~~\"\n msgstr \"\"\n \"~~~\\n\"\n-\"# struct Point { x: float, y: float }\\n\"\n+\"# struct Point { x: f64, y: f64 }\\n\"\n \"# enum Shape { Rectangle(Point, Point) }\\n\"\n \"# impl Shape { fn area(&self) -> int { 0 } }\\n\"\n \"let start = @Point { x: 10f, y: 20f };\\n\"\n@@ -2853,13 +2848,13 @@ msgstr \"\"\n #. type: Plain text\n #: doc/tutorial.md:1223\n msgid \"\"\n-\"~~~ # struct Point { x: float, y: float } # enum Shape { Rectangle(Point, \"\n+\"~~~ # struct Point { x: f64, y: f64 } # enum Shape { Rectangle(Point, \"\n \"Point) } # impl Shape { fn area(&self) -> int { 0 } } let start = @Point \"\n \"{ x: 10f, y: 20f }; let end = ~Point { x: start.x + 100f, y: start.y + \"\n \"100f }; let rect = &Rectangle(*start, *end); let area = rect.area(); ~~~\"\n msgstr \"\"\n \"~~~\\n\"\n-\"# struct Point { x: float, y: float }\\n\"\n+\"# struct Point { x: f64, y: f64 }\\n\"\n \"# enum Shape { Rectangle(Point, Point) }\\n\"\n \"# impl Shape { fn area(&self) -> int { 0 } }\\n\"\n \"let start = @Point { x: 10f, y: 20f };\\n\"\n@@ -2881,11 +2876,11 @@ msgstr \"\"\n #. type: Plain text\n #: doc/tutorial.md:1233\n msgid \"\"\n-\"~~~ # struct Point { x: float, y: float } let point = &@~Point { x: 10f, y: \"\n+\"~~~ # struct Point { x: f64, y: f64 } let point = &@~Point { x: 10f, y: \"\n \"20f }; println(fmt!(\\\"%f\\\", point.x)); ~~~\"\n msgstr \"\"\n \"~~~\\n\"\n-\"# struct Point { x: float, y: float }\\n\"\n+\"# struct Point { x: f64, y: f64 }\\n\"\n \"let point = &@~Point { x: 10f, y: 20f };\\n\"\n \"println(fmt!(\\\"%f\\\", point.x));\\n\"\n \"~~~\"\n@@ -3764,11 +3759,11 @@ msgstr \"\"\n #, no-wrap\n msgid \"\"\n \"~~~\\n\"\n-\"# fn draw_circle(p: Point, f: float) { }\\n\"\n+\"# fn draw_circle(p: Point, f: f64) { }\\n\"\n \"# fn draw_rectangle(p: Point, p: Point) { }\\n\"\n \"struct Point {\\n\"\n-\"    x: float,\\n\"\n-\"    y: float\\n\"\n+\"    x: f64,\\n\"\n+\"    y: f64\\n\"\n \"}\\n\"\n msgstr \"\"\n \n@@ -3777,7 +3772,7 @@ msgstr \"\"\n #, no-wrap\n msgid \"\"\n \"enum Shape {\\n\"\n-\"    Circle(Point, float),\\n\"\n+\"    Circle(Point, f64),\\n\"\n \"    Rectangle(Point, Point)\\n\"\n \"}\\n\"\n msgstr \"\"\n@@ -3832,11 +3827,11 @@ msgstr \"\"\n #, no-wrap\n msgid \"\"\n \"~~~\\n\"\n-\"# fn draw_circle(p: Point, f: float) { }\\n\"\n+\"# fn draw_circle(p: Point, f: f64) { }\\n\"\n \"# fn draw_rectangle(p: Point, p: Point) { }\\n\"\n-\"# struct Point { x: float, y: float }\\n\"\n+\"# struct Point { x: f64, y: f64 }\\n\"\n \"# enum Shape {\\n\"\n-\"#     Circle(Point, float),\\n\"\n+\"#     Circle(Point, f64),\\n\"\n \"#     Rectangle(Point, Point)\\n\"\n \"# }\\n\"\n \"impl Shape {\\n\"\n@@ -3878,11 +3873,11 @@ msgstr \"\"\n #, no-wrap\n msgid \"\"\n \"~~~\\n\"\n-\"# fn draw_circle(p: Point, f: float) { }\\n\"\n+\"# fn draw_circle(p: Point, f: f64) { }\\n\"\n \"# fn draw_rectangle(p: Point, p: Point) { }\\n\"\n-\"# struct Point { x: float, y: float }\\n\"\n+\"# struct Point { x: f64, y: f64 }\\n\"\n \"# enum Shape {\\n\"\n-\"#     Circle(Point, float),\\n\"\n+\"#     Circle(Point, f64),\\n\"\n \"#     Rectangle(Point, Point)\\n\"\n \"# }\\n\"\n \"# impl Shape {\\n\"\n@@ -3896,11 +3891,11 @@ msgid \"\"\n \"// are automatically converted to borrowed pointers\\n\"\n msgstr \"\"\n \"~~~\\n\"\n-\"# fn draw_circle(p: Point, f: float) { }\\n\"\n+\"# fn draw_circle(p: Point, f: f64) { }\\n\"\n \"# fn draw_rectangle(p: Point, p: Point) { }\\n\"\n-\"# struct Point { x: float, y: float }\\n\"\n+\"# struct Point { x: f64, y: f64 }\\n\"\n \"# enum Shape {\\n\"\n-\"#     Circle(Point, float),\\n\"\n+\"#     Circle(Point, f64),\\n\"\n \"#     Rectangle(Point, Point)\\n\"\n \"# }\\n\"\n \"# impl Shape {\\n\"\n@@ -3962,8 +3957,8 @@ msgstr \"\"\n msgid \"\"\n \"~~~~ {.xfail-test}\\n\"\n \"impl Circle {\\n\"\n-\"    fn area(&self) -> float { ... }\\n\"\n-\"    fn new(area: float) -> Circle { ... }\\n\"\n+\"    fn area(&self) -> f64 { ... }\\n\"\n+\"    fn new(area: f64) -> Circle { ... }\\n\"\n \"}\\n\"\n \"~~~~\\n\"\n msgstr \"\"\n@@ -3981,10 +3976,10 @@ msgstr \"\"\n #, no-wrap\n msgid \"\"\n \"~~~~\\n\"\n-\"use std::float::consts::pi;\\n\"\n-\"struct Circle { radius: float }\\n\"\n+\"use std::f64::consts::pi;\\n\"\n+\"struct Circle { radius: f64 }\\n\"\n \"impl Circle {\\n\"\n-\"    fn new(area: float) -> Circle { Circle { radius: (area / pi).sqrt() } }\\n\"\n+\"    fn new(area: f64) -> Circle { Circle { radius: (area / pi).sqrt() } }\\n\"\n \"}\\n\"\n \"let c = Circle::new(42.5);\\n\"\n \"~~~~\\n\"\n@@ -4122,9 +4117,9 @@ msgstr \"\"\n #, no-wrap\n msgid \"\"\n \"~~~~\\n\"\n-\"# struct Point { x: float, y: float }\\n\"\n-\"# enum Shape { Circle(Point, float), Rectangle(Point, Point) }\\n\"\n-\"fn radius(shape: Shape) -> Option<float> {\\n\"\n+\"# struct Point { x: f64, y: f64 }\\n\"\n+\"# enum Shape { Circle(Point, f64), Rectangle(Point, Point) }\\n\"\n+\"fn radius(shape: Shape) -> Option<f64> {\\n\"\n \"    match shape {\\n\"\n \"        Circle(_, radius) => Some(radius),\\n\"\n \"        Rectangle(*)      => None\\n\"\n@@ -4558,24 +4553,24 @@ msgstr \"\"\n #. type: Plain text\n #: doc/tutorial.md:2002\n msgid \"\"\n-\"~~~~ use std::float::consts::pi; trait Shape { fn new(area: float) -> \"\n-\"Self; } struct Circle { radius: float } struct Square { length: float }\"\n+\"~~~~ use std::f64::consts::pi; trait Shape { fn new(area: f64) -> \"\n+\"Self; } struct Circle { radius: f64 } struct Square { length: f64 }\"\n msgstr \"\"\n \"~~~~\\n\"\n-\"use std::float::consts::pi;\\n\"\n-\"trait Shape { fn new(area: float) -> Self; }\\n\"\n-\"struct Circle { radius: float }\\n\"\n-\"struct Square { length: float }\"\n+\"use std::f64::consts::pi;\\n\"\n+\"trait Shape { fn new(area: f64) -> Self; }\\n\"\n+\"struct Circle { radius: f64 }\\n\"\n+\"struct Square { length: f64 }\"\n \n #. type: Plain text\n #: doc/tutorial.md:2009\n #, no-wrap\n msgid \"\"\n \"impl Shape for Circle {\\n\"\n-\"    fn new(area: float) -> Circle { Circle { radius: (area / pi).sqrt() } }\\n\"\n+\"    fn new(area: f64) -> Circle { Circle { radius: (area / pi).sqrt() } }\\n\"\n \"}\\n\"\n \"impl Shape for Square {\\n\"\n-\"    fn new(area: float) -> Square { Square { length: (area).sqrt() } }\\n\"\n+\"    fn new(area: f64) -> Square { Square { length: (area).sqrt() } }\\n\"\n \"}\\n\"\n msgstr \"\"\n \n@@ -4871,12 +4866,12 @@ msgstr \"\"\n #. type: Plain text\n #: doc/tutorial.md:2150\n msgid \"\"\n-\"~~~~ trait Shape { fn area(&self) -> float; } trait Circle : Shape { fn \"\n-\"radius(&self) -> float; } ~~~~\"\n+\"~~~~ trait Shape { fn area(&self) -> f64; } trait Circle : Shape { fn \"\n+\"radius(&self) -> f64; } ~~~~\"\n msgstr \"\"\n \"~~~~\\n\"\n-\"trait Shape { fn area(&self) -> float; }\\n\"\n-\"trait Circle : Shape { fn radius(&self) -> float; }\\n\"\n+\"trait Shape { fn area(&self) -> f64; }\\n\"\n+\"trait Circle : Shape { fn radius(&self) -> f64; }\\n\"\n \"~~~~\"\n \n #. type: Plain text\n@@ -4890,17 +4885,17 @@ msgstr \"`Circle` \u30c8\u30ec\u30a4\u30c8\u306e\u5b9f\u88c5\u306f\u3001 `Shape` \u3092\u5b9f\u88c5\u3057\u305f\u578b\u306b\u3064\u3044\n #, no-wrap\n msgid \"\"\n \"~~~~\\n\"\n-\"use std::float::consts::pi;\\n\"\n-\"# trait Shape { fn area(&self) -> float; }\\n\"\n-\"# trait Circle : Shape { fn radius(&self) -> float; }\\n\"\n-\"# struct Point { x: float, y: float }\\n\"\n-\"# fn square(x: float) -> float { x * x }\\n\"\n-\"struct CircleStruct { center: Point, radius: float }\\n\"\n+\"use std::f64::consts::pi;\\n\"\n+\"# trait Shape { fn area(&self) -> f64; }\\n\"\n+\"# trait Circle : Shape { fn radius(&self) -> f64; }\\n\"\n+\"# struct Point { x: f64, y: f64 }\\n\"\n+\"# fn square(x: f64) -> f64 { x * x }\\n\"\n+\"struct CircleStruct { center: Point, radius: f64 }\\n\"\n \"impl Circle for CircleStruct {\\n\"\n-\"    fn radius(&self) -> float { (self.area() / pi).sqrt() }\\n\"\n+\"    fn radius(&self) -> f64 { (self.area() / pi).sqrt() }\\n\"\n \"}\\n\"\n \"impl Shape for CircleStruct {\\n\"\n-\"    fn area(&self) -> float { pi * square(self.radius) }\\n\"\n+\"    fn area(&self) -> f64 { pi * square(self.radius) }\\n\"\n \"}\\n\"\n \"~~~~\\n\"\n msgstr \"\"\n@@ -4921,22 +4916,22 @@ msgstr \"\"\n #. type: Plain text\n #: doc/tutorial.md:2196\n msgid \"\"\n-\"~~~ {.xfail-test} use std::float::consts::pi; # trait Shape { fn area(&self) \"\n-\"-> float; } # trait Circle : Shape { fn radius(&self) -> float; } # struct \"\n-\"Point { x: float, y: float } # struct CircleStruct { center: Point, radius: \"\n-\"float } # impl Circle for CircleStruct { fn radius(&self) -> float { (self.\"\n+\"~~~ {.xfail-test} use std::f64::consts::pi; # trait Shape { fn area(&self) \"\n+\"-> f64; } # trait Circle : Shape { fn radius(&self) -> f64; } # struct \"\n+\"Point { x: f64, y: f64 } # struct CircleStruct { center: Point, radius: \"\n+\"f64 } # impl Circle for CircleStruct { fn radius(&self) -> f64 { (self.\"\n \"area() / pi).sqrt() } } # impl Shape for CircleStruct { fn area(&self) -> \"\n-\"float { pi * square(self.radius) } }\"\n+\"f64 { pi * square(self.radius) } }\"\n msgstr \"\"\n \"~~~ {.xfail-test}\\n\"\n-\"use std::float::consts::pi;\\n\"\n-\"# trait Shape { fn area(&self) -> float; }\\n\"\n-\"# trait Circle : Shape { fn radius(&self) -> float; }\\n\"\n-\"# struct Point { x: float, y: float }\\n\"\n-\"# struct CircleStruct { center: Point, radius: float }\\n\"\n-\"# impl Circle for CircleStruct { fn radius(&self) -> float { (self.area() / \"\n+\"use std::f64::consts::pi;\\n\"\n+\"# trait Shape { fn area(&self) -> f64; }\\n\"\n+\"# trait Circle : Shape { fn radius(&self) -> f64; }\\n\"\n+\"# struct Point { x: f64, y: f64 }\\n\"\n+\"# struct CircleStruct { center: Point, radius: f64 }\\n\"\n+\"# impl Circle for CircleStruct { fn radius(&self) -> f64 { (self.area() / \"\n \"pi).sqrt() } }\\n\"\n-\"# impl Shape for CircleStruct { fn area(&self) -> float { pi * square(self.\"\n+\"# impl Shape for CircleStruct { fn area(&self) -> f64 { pi * square(self.\"\n \"radius) } }\"\n \n #. type: Plain text\n@@ -4981,11 +4976,11 @@ msgstr \"\"\n \n #. type: Plain text\n #: doc/tutorial.md:2216\n-msgid \"~~~ #[deriving(Eq)] struct Circle { radius: float }\"\n+msgid \"~~~ #[deriving(Eq)] struct Circle { radius: f64 }\"\n msgstr \"\"\n \"~~~\\n\"\n \"#[deriving(Eq)]\\n\"\n-\"struct Circle { radius: float }\"\n+\"struct Circle { radius: f64 }\"\n \n #. type: Plain text\n #: doc/tutorial.md:2220"}, {"sha": "fc0403da2182b943cf0992ad94002ff4cffe6a3e", "filename": "doc/po/tutorial.md.pot", "status": "modified", "additions": 88, "deletions": 90, "changes": 178, "blob_url": "https://github.com/rust-lang/rust/blob/404a4619dc132c53c6c5c9e023316c779275b223/doc%2Fpo%2Ftutorial.md.pot", "raw_url": "https://github.com/rust-lang/rust/raw/404a4619dc132c53c6c5c9e023316c779275b223/doc%2Fpo%2Ftutorial.md.pot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fpo%2Ftutorial.md.pot?ref=404a4619dc132c53c6c5c9e023316c779275b223", "patch": "@@ -36,9 +36,9 @@ msgstr \"\"\n #, no-wrap\n msgid \"\"\n \"~~~\\n\"\n-\"# trait Shape { fn area(&self) -> float; }\\n\"\n-\"# trait Circle : Shape { fn radius(&self) -> float; }\\n\"\n-\"fn radius_times_area<T: Circle>(c: T) -> float {\\n\"\n+\"# trait Shape { fn area(&self) -> f64; }\\n\"\n+\"# trait Circle : Shape { fn radius(&self) -> f64; }\\n\"\n+\"fn radius_times_area<T: Circle>(c: T) -> f64 {\\n\"\n \"    // `c` is both a Circle and a Shape\\n\"\n \"    c.radius() * c.area()\\n\"\n \"}\\n\"\n@@ -290,9 +290,7 @@ msgstr \"\"\n msgid \"\"\n \"When complete, `make install` will place several programs into `/usr/local/\"\n \"bin`: `rustc`, the Rust compiler; `rustdoc`, the API-documentation tool; \"\n-\"`rustpkg`, the Rust package manager; `rusti`, the Rust REPL; and `rust`, a \"\n-\"tool which acts both as a unified interface for them, and for a few common \"\n-\"command line scenarios.\"\n+\"and `rustpkg`, the Rust package manager.\"\n msgstr \"\"\n \n #. type: Plain text\n@@ -381,7 +379,7 @@ msgstr \"\"\n #. type: Plain text\n #: doc/tutorial.md:169\n msgid \"\"\n-\"The `rust` tool provides central access to the other rust tools, as well as \"\n+\"The `rust` tool provides central access to the other Rust tools, as well as \"\n \"handy shortcuts for directly running source files.  For example, if you have \"\n \"a file `foo.rs` in your current directory, `rust run foo.rs` would attempt \"\n \"to compile it and, if successful, directly run the resulting binary.\"\n@@ -506,15 +504,15 @@ msgstr \"\"\n #. type: Plain text\n #: doc/tutorial.md:243\n msgid \"\"\n-\"~~~~ static MONSTER_FACTOR: float = 57.8; let monster_size = MONSTER_FACTOR \"\n+\"~~~~ static MONSTER_FACTOR: f64 = 57.8; let monster_size = MONSTER_FACTOR \"\n \"* 10.0; let monster_size: int = 50; ~~~~\"\n msgstr \"\"\n \n #. type: Plain text\n #: doc/tutorial.md:252\n msgid \"\"\n \"Local variables may shadow earlier declarations, as in the previous example: \"\n-\"`monster_size` was first declared as a `float`, and then a second \"\n+\"`monster_size` was first declared as a `f64`, and then a second \"\n \"`monster_size` was declared as an `int`. If you were to actually compile \"\n \"this example, though, the compiler would determine that the first \"\n \"`monster_size` is unused and issue a warning (because this situation is \"\n@@ -678,10 +676,10 @@ msgstr \"\"\n #. type: Plain text\n #: doc/tutorial.md:349\n msgid \"\"\n-\"There are three floating-point types: `float`, `f32`, and `f64`.  Floating-\"\n-\"point numbers are written `0.0`, `1e6`, or `2.1e-4`.  Like integers, \"\n-\"floating-point literals are inferred to the correct type.  Suffixes `f`, \"\n-\"`f32`, and `f64` can be used to create literals of a specific type.\"\n+\"There are two floating-point types: `f32`, and `f64`. Floating-\"\n+\"point numbers are written `0.0`, `1e6`, or `2.1e-4`. Like integers, \"\n+\"floating-point literals are inferred to the correct type. Suffixes \"\n+\"`f32` and `f64` can be used to create literals of a specific type.\"\n msgstr \"\"\n \n #. type: Plain text\n@@ -746,7 +744,7 @@ msgstr \"\"\n #. type: Plain text\n #: doc/tutorial.md:385\n msgid \"\"\n-\"~~~~ let x: float = 4.0; let y: uint = x as uint; assert!(y == 4u); ~~~~\"\n+\"~~~~ let x: f64 = 4.0; let y: uint = x as uint; assert!(y == 4u); ~~~~\"\n msgstr \"\"\n \n #. type: Plain text\n@@ -949,7 +947,7 @@ msgstr \"\"\n #. type: Plain text\n #: doc/tutorial.md:500\n msgid \"\"\n-\"> ***Note:*** The following code makes use of tuples (`(float, float)`) \"\n+\"> ***Note:*** The following code makes use of tuples (`(f64, f64)`) \"\n \"which > are explained in section 5.3. For now you can think of tuples as a \"\n \"list of > items.\"\n msgstr \"\"\n@@ -959,10 +957,10 @@ msgstr \"\"\n #, no-wrap\n msgid \"\"\n \"~~~~\\n\"\n-\"use std::float;\\n\"\n+\"use std::f64;\\n\"\n \"use std::num::atan;\\n\"\n-\"fn angle(vector: (float, float)) -> float {\\n\"\n-\"    let pi = float::consts::pi;\\n\"\n+\"fn angle(vector: (f64, f64)) -> f64 {\\n\"\n+\"    let pi = f64::consts::pi;\\n\"\n \"    match vector {\\n\"\n \"      (0f, y) if y < 0f => 1.5 * pi,\\n\"\n \"      (0f, y) => 0.5 * pi,\\n\"\n@@ -1104,8 +1102,8 @@ msgstr \"\"\n msgid \"\"\n \"~~~~\\n\"\n \"struct Point {\\n\"\n-\"    x: float,\\n\"\n-\"    y: float\\n\"\n+\"    x: f64,\\n\"\n+\"    y: f64\\n\"\n \"}\\n\"\n \"~~~~\\n\"\n msgstr \"\"\n@@ -1129,7 +1127,7 @@ msgstr \"\"\n #. type: Plain text\n #: doc/tutorial.md:602\n msgid \"\"\n-\"~~~~ {.xfail-test} # struct Point { x: float, y: float } let mut mypoint = \"\n+\"~~~~ {.xfail-test} # struct Point { x: f64, y: f64 } let mut mypoint = \"\n \"Point { x: 1.0, y: 1.0 }; let origin = Point { x: 0.0, y: 0.0 };\"\n msgstr \"\"\n \n@@ -1152,7 +1150,7 @@ msgstr \"\"\n #, no-wrap\n msgid \"\"\n \"~~~~\\n\"\n-\"# struct Point { x: float, y: float }\\n\"\n+\"# struct Point { x: f64, y: f64 }\\n\"\n \"# let mypoint = Point { x: 0.0, y: 0.0 };\\n\"\n \"match mypoint {\\n\"\n \"    Point { x: 0.0, y: yy } => { println(yy.to_str());                     }\\n\"\n@@ -1177,7 +1175,7 @@ msgstr \"\"\n #, no-wrap\n msgid \"\"\n \"~~~\\n\"\n-\"# struct Point { x: float, y: float }\\n\"\n+\"# struct Point { x: f64, y: f64 }\\n\"\n \"# let mypoint = Point { x: 0.0, y: 0.0 };\\n\"\n \"match mypoint {\\n\"\n \"    Point { x, _ } => { println(x.to_str()) }\\n\"\n@@ -1202,9 +1200,9 @@ msgstr \"\"\n #, no-wrap\n msgid \"\"\n \"~~~~\\n\"\n-\"# struct Point { x: float, y: float }\\n\"\n+\"# struct Point { x: f64, y: f64 }\\n\"\n \"enum Shape {\\n\"\n-\"    Circle(Point, float),\\n\"\n+\"    Circle(Point, f64),\\n\"\n \"    Rectangle(Point, Point)\\n\"\n \"}\\n\"\n \"~~~~\\n\"\n@@ -1214,7 +1212,7 @@ msgstr \"\"\n #: doc/tutorial.md:652\n msgid \"\"\n \"A value of this type is either a `Circle`, in which case it contains a \"\n-\"`Point` struct and a float, or a `Rectangle`, in which case it contains two \"\n+\"`Point` struct and a `f64`, or a `Rectangle`, in which case it contains two \"\n \"`Point` structs. The run-time representation of such a value includes an \"\n \"identifier of the actual form that it holds, much like the \\\"tagged union\\\" \"\n \"pattern in C, but with better static guarantees.\"\n@@ -1307,12 +1305,12 @@ msgstr \"\"\n #, no-wrap\n msgid \"\"\n \"~~~~\\n\"\n-\"use std::float;\\n\"\n-\"# struct Point {x: float, y: float}\\n\"\n-\"# enum Shape { Circle(Point, float), Rectangle(Point, Point) }\\n\"\n-\"fn area(sh: Shape) -> float {\\n\"\n+\"use std::f64;\\n\"\n+\"# struct Point {x: f64, y: f64}\\n\"\n+\"# enum Shape { Circle(Point, f64), Rectangle(Point, Point) }\\n\"\n+\"fn area(sh: Shape) -> f64 {\\n\"\n \"    match sh {\\n\"\n-\"        Circle(_, size) => float::consts::pi * size * size,\\n\"\n+\"        Circle(_, size) => f64::consts::pi * size * size,\\n\"\n \"        Rectangle(Point { x, y }, Point { x: x2, y: y2 }) => (x2 - x) * (y2 - y)\\n\"\n \"    }\\n\"\n \"}\\n\"\n@@ -1332,7 +1330,7 @@ msgstr \"\"\n #, no-wrap\n msgid \"\"\n \"~~~~\\n\"\n-\"# struct Point { x: float, y: float }\\n\"\n+\"# struct Point { x: f64, y: f64 }\\n\"\n \"# enum Direction { North, East, South, West }\\n\"\n \"fn point_from_direction(dir: Direction) -> Point {\\n\"\n \"    match dir {\\n\"\n@@ -1355,16 +1353,16 @@ msgstr \"\"\n #, no-wrap\n msgid \"\"\n \"~~~~\\n\"\n-\"use std::float;\\n\"\n-\"# struct Point { x: float, y: float }\\n\"\n-\"# fn square(x: float) -> float { x * x }\\n\"\n+\"use std::f64;\\n\"\n+\"# struct Point { x: f64, y: f64 }\\n\"\n+\"# fn square(x: f64) -> f64 { x * x }\\n\"\n \"enum Shape {\\n\"\n-\"    Circle { center: Point, radius: float },\\n\"\n+\"    Circle { center: Point, radius: f64 },\\n\"\n \"    Rectangle { top_left: Point, bottom_right: Point }\\n\"\n \"}\\n\"\n-\"fn area(sh: Shape) -> float {\\n\"\n+\"fn area(sh: Shape) -> f64 {\\n\"\n \"    match sh {\\n\"\n-\"        Circle { radius: radius, _ } => float::consts::pi * square(radius),\\n\"\n+\"        Circle { radius: radius, _ } => f64::consts::pi * square(radius),\\n\"\n \"        Rectangle { top_left: top_left, bottom_right: bottom_right } => {\\n\"\n \"            (bottom_right.x - top_left.x) * (bottom_right.y - top_left.y)\\n\"\n \"        }\\n\"\n@@ -1392,7 +1390,7 @@ msgstr \"\"\n #, no-wrap\n msgid \"\"\n \"~~~~\\n\"\n-\"let mytup: (int, int, float) = (10, 20, 30.0);\\n\"\n+\"let mytup: (int, int, f64) = (10, 20, 30.0);\\n\"\n \"match mytup {\\n\"\n \"  (a, b, c) => info!(a + b + (c as int))\\n\"\n \"}\\n\"\n@@ -1419,7 +1417,7 @@ msgstr \"\"\n msgid \"\"\n \"For example:\\n\"\n \"~~~~\\n\"\n-\"struct MyTup(int, int, float);\\n\"\n+\"struct MyTup(int, int, f64);\\n\"\n \"let mytup: MyTup = MyTup(10, 20, 30.0);\\n\"\n \"match mytup {\\n\"\n \"  MyTup(a, b, c) => info!(a + b + (c as int))\\n\"\n@@ -1574,7 +1572,7 @@ msgstr \"\"\n \n #. type: Plain text\n #: doc/tutorial.md:866\n-msgid \"~~~ fn first((value, _): (int, float)) -> int { value } ~~~\"\n+msgid \"~~~ fn first((value, _): (int, f64)) -> int { value } ~~~\"\n msgstr \"\"\n \n #. type: Plain text\n@@ -1935,8 +1933,8 @@ msgstr \"\"\n msgid \"\"\n \"~~~\\n\"\n \"struct Point {\\n\"\n-\"    x: float,\\n\"\n-\"    y: float\\n\"\n+\"    x: f64,\\n\"\n+\"    y: f64\\n\"\n \"}\\n\"\n \"~~~~\\n\"\n msgstr \"\"\n@@ -1954,7 +1952,7 @@ msgstr \"\"\n #, no-wrap\n msgid \"\"\n \"~~~\\n\"\n-\"# struct Point { x: float, y: float }\\n\"\n+\"# struct Point { x: f64, y: f64 }\\n\"\n \"let on_the_stack : Point  =  Point { x: 3.0, y: 4.0 };\\n\"\n \"let managed_box  : @Point = @Point { x: 5.0, y: 1.0 };\\n\"\n \"let owned_box    : ~Point = ~Point { x: 7.0, y: 9.0 };\\n\"\n@@ -1980,9 +1978,9 @@ msgstr \"\"\n #, no-wrap\n msgid \"\"\n \"~~~\\n\"\n-\"# struct Point { x: float, y: float }\\n\"\n-\"# fn sqrt(f: float) -> float { 0f }\\n\"\n-\"fn compute_distance(p1: &Point, p2: &Point) -> float {\\n\"\n+\"# struct Point { x: f64, y: f64 }\\n\"\n+\"# fn sqrt(f: f64) -> f64 { 0f }\\n\"\n+\"fn compute_distance(p1: &Point, p2: &Point) -> f64 {\\n\"\n \"    let x_d = p1.x - p2.x;\\n\"\n \"    let y_d = p1.y - p2.y;\\n\"\n \"    sqrt(x_d * x_d + y_d * y_d)\\n\"\n@@ -2000,11 +1998,11 @@ msgstr \"\"\n #, no-wrap\n msgid \"\"\n \"~~~\\n\"\n-\"# struct Point{ x: float, y: float };\\n\"\n+\"# struct Point{ x: f64, y: f64 };\\n\"\n \"# let on_the_stack : Point  =  Point { x: 3.0, y: 4.0 };\\n\"\n \"# let managed_box  : @Point = @Point { x: 5.0, y: 1.0 };\\n\"\n \"# let owned_box    : ~Point = ~Point { x: 7.0, y: 9.0 };\\n\"\n-\"# fn compute_distance(p1: &Point, p2: &Point) -> float { 0f }\\n\"\n+\"# fn compute_distance(p1: &Point, p2: &Point) -> f64 { 0f }\\n\"\n \"compute_distance(&on_the_stack, managed_box);\\n\"\n \"compute_distance(managed_box, owned_box);\\n\"\n \"~~~\\n\"\n@@ -2164,7 +2162,7 @@ msgstr \"\"\n #. type: Plain text\n #: doc/tutorial.md:1209\n msgid \"\"\n-\"~~~ # struct Point { x: float, y: float } # enum Shape { Rectangle(Point, \"\n+\"~~~ # struct Point { x: f64, y: f64 } # enum Shape { Rectangle(Point, \"\n \"Point) } # impl Shape { fn area(&self) -> int { 0 } } let start = @Point \"\n \"{ x: 10f, y: 20f }; let end = ~Point { x: (*start).x + 100f, y: (*start).y + \"\n \"100f }; let rect = &Rectangle(*start, *end); let area = (*rect).area(); ~~~\"\n@@ -2181,7 +2179,7 @@ msgstr \"\"\n #. type: Plain text\n #: doc/tutorial.md:1223\n msgid \"\"\n-\"~~~ # struct Point { x: float, y: float } # enum Shape { Rectangle(Point, \"\n+\"~~~ # struct Point { x: f64, y: f64 } # enum Shape { Rectangle(Point, \"\n \"Point) } # impl Shape { fn area(&self) -> int { 0 } } let start = @Point \"\n \"{ x: 10f, y: 20f }; let end = ~Point { x: start.x + 100f, y: start.y + \"\n \"100f }; let rect = &Rectangle(*start, *end); let area = rect.area(); ~~~\"\n@@ -2198,7 +2196,7 @@ msgstr \"\"\n #. type: Plain text\n #: doc/tutorial.md:1233\n msgid \"\"\n-\"~~~ # struct Point { x: float, y: float } let point = &@~Point { x: 10f, y: \"\n+\"~~~ # struct Point { x: f64, y: f64 } let point = &@~Point { x: 10f, y: \"\n \"20f }; println(fmt!(\\\"%f\\\", point.x)); ~~~\"\n msgstr \"\"\n \n@@ -2883,11 +2881,11 @@ msgstr \"\"\n #, no-wrap\n msgid \"\"\n \"~~~\\n\"\n-\"# fn draw_circle(p: Point, f: float) { }\\n\"\n+\"# fn draw_circle(p: Point, f: f64) { }\\n\"\n \"# fn draw_rectangle(p: Point, p: Point) { }\\n\"\n \"struct Point {\\n\"\n-\"    x: float,\\n\"\n-\"    y: float\\n\"\n+\"    x: f64,\\n\"\n+\"    y: f64\\n\"\n \"}\\n\"\n msgstr \"\"\n \n@@ -2896,7 +2894,7 @@ msgstr \"\"\n #, no-wrap\n msgid \"\"\n \"enum Shape {\\n\"\n-\"    Circle(Point, float),\\n\"\n+\"    Circle(Point, f64),\\n\"\n \"    Rectangle(Point, Point)\\n\"\n \"}\\n\"\n msgstr \"\"\n@@ -2942,11 +2940,11 @@ msgstr \"\"\n #, no-wrap\n msgid \"\"\n \"~~~\\n\"\n-\"# fn draw_circle(p: Point, f: float) { }\\n\"\n+\"# fn draw_circle(p: Point, f: f64) { }\\n\"\n \"# fn draw_rectangle(p: Point, p: Point) { }\\n\"\n-\"# struct Point { x: float, y: float }\\n\"\n+\"# struct Point { x: f64, y: f64 }\\n\"\n \"# enum Shape {\\n\"\n-\"#     Circle(Point, float),\\n\"\n+\"#     Circle(Point, f64),\\n\"\n \"#     Rectangle(Point, Point)\\n\"\n \"# }\\n\"\n \"impl Shape {\\n\"\n@@ -2981,11 +2979,11 @@ msgstr \"\"\n #, no-wrap\n msgid \"\"\n \"~~~\\n\"\n-\"# fn draw_circle(p: Point, f: float) { }\\n\"\n+\"# fn draw_circle(p: Point, f: f64) { }\\n\"\n \"# fn draw_rectangle(p: Point, p: Point) { }\\n\"\n-\"# struct Point { x: float, y: float }\\n\"\n+\"# struct Point { x: f64, y: f64 }\\n\"\n \"# enum Shape {\\n\"\n-\"#     Circle(Point, float),\\n\"\n+\"#     Circle(Point, f64),\\n\"\n \"#     Rectangle(Point, Point)\\n\"\n \"# }\\n\"\n \"# impl Shape {\\n\"\n@@ -3035,8 +3033,8 @@ msgstr \"\"\n msgid \"\"\n \"~~~~ {.xfail-test}\\n\"\n \"impl Circle {\\n\"\n-\"    fn area(&self) -> float { ... }\\n\"\n-\"    fn new(area: float) -> Circle { ... }\\n\"\n+\"    fn area(&self) -> f64 { ... }\\n\"\n+\"    fn new(area: f64) -> Circle { ... }\\n\"\n \"}\\n\"\n \"~~~~\\n\"\n msgstr \"\"\n@@ -3052,10 +3050,10 @@ msgstr \"\"\n #, no-wrap\n msgid \"\"\n \"~~~~\\n\"\n-\"use std::float::consts::pi;\\n\"\n-\"struct Circle { radius: float }\\n\"\n+\"use std::f64::consts::pi;\\n\"\n+\"struct Circle { radius: f64 }\\n\"\n \"impl Circle {\\n\"\n-\"    fn new(area: float) -> Circle { Circle { radius: (area / pi).sqrt() } }\\n\"\n+\"    fn new(area: f64) -> Circle { Circle { radius: (area / pi).sqrt() } }\\n\"\n \"}\\n\"\n \"let c = Circle::new(42.5);\\n\"\n \"~~~~\\n\"\n@@ -3166,9 +3164,9 @@ msgstr \"\"\n #, no-wrap\n msgid \"\"\n \"~~~~\\n\"\n-\"# struct Point { x: float, y: float }\\n\"\n-\"# enum Shape { Circle(Point, float), Rectangle(Point, Point) }\\n\"\n-\"fn radius(shape: Shape) -> Option<float> {\\n\"\n+\"# struct Point { x: f64, y: f64 }\\n\"\n+\"# enum Shape { Circle(Point, f64), Rectangle(Point, Point) }\\n\"\n+\"fn radius(shape: Shape) -> Option<f64> {\\n\"\n \"    match shape {\\n\"\n \"        Circle(_, radius) => Some(radius),\\n\"\n \"        Rectangle(*)      => None\\n\"\n@@ -3503,19 +3501,19 @@ msgstr \"\"\n #. type: Plain text\n #: doc/tutorial.md:2002\n msgid \"\"\n-\"~~~~ use std::float::consts::pi; trait Shape { fn new(area: float) -> \"\n-\"Self; } struct Circle { radius: float } struct Square { length: float }\"\n+\"~~~~ use std::f64::consts::pi; trait Shape { fn new(area: f64) -> \"\n+\"Self; } struct Circle { radius: f64 } struct Square { length: f64 }\"\n msgstr \"\"\n \n #. type: Plain text\n #: doc/tutorial.md:2009\n #, no-wrap\n msgid \"\"\n \"impl Shape for Circle {\\n\"\n-\"    fn new(area: float) -> Circle { Circle { radius: (area / pi).sqrt() } }\\n\"\n+\"    fn new(area: f64) -> Circle { Circle { radius: (area / pi).sqrt() } }\\n\"\n \"}\\n\"\n \"impl Shape for Square {\\n\"\n-\"    fn new(area: float) -> Square { Square { length: (area).sqrt() } }\\n\"\n+\"    fn new(area: f64) -> Square { Square { length: (area).sqrt() } }\\n\"\n \"}\\n\"\n msgstr \"\"\n \n@@ -3738,8 +3736,8 @@ msgstr \"\"\n #. type: Plain text\n #: doc/tutorial.md:2150\n msgid \"\"\n-\"~~~~ trait Shape { fn area(&self) -> float; } trait Circle : Shape { fn \"\n-\"radius(&self) -> float; } ~~~~\"\n+\"~~~~ trait Shape { fn area(&self) -> f64; } trait Circle : Shape { fn \"\n+\"radius(&self) -> f64; } ~~~~\"\n msgstr \"\"\n \n #. type: Plain text\n@@ -3753,17 +3751,17 @@ msgstr \"\"\n #, no-wrap\n msgid \"\"\n \"~~~~\\n\"\n-\"use std::float::consts::pi;\\n\"\n-\"# trait Shape { fn area(&self) -> float; }\\n\"\n-\"# trait Circle : Shape { fn radius(&self) -> float; }\\n\"\n-\"# struct Point { x: float, y: float }\\n\"\n-\"# fn square(x: float) -> float { x * x }\\n\"\n-\"struct CircleStruct { center: Point, radius: float }\\n\"\n+\"use std::f64::consts::pi;\\n\"\n+\"# trait Shape { fn area(&self) -> f64; }\\n\"\n+\"# trait Circle : Shape { fn radius(&self) -> f64; }\\n\"\n+\"# struct Point { x: f64, y: f64 }\\n\"\n+\"# fn square(x: f64) -> f64 { x * x }\\n\"\n+\"struct CircleStruct { center: Point, radius: f64 }\\n\"\n \"impl Circle for CircleStruct {\\n\"\n-\"    fn radius(&self) -> float { (self.area() / pi).sqrt() }\\n\"\n+\"    fn radius(&self) -> f64 { (self.area() / pi).sqrt() }\\n\"\n \"}\\n\"\n \"impl Shape for CircleStruct {\\n\"\n-\"    fn area(&self) -> float { pi * square(self.radius) }\\n\"\n+\"    fn area(&self) -> f64 { pi * square(self.radius) }\\n\"\n \"}\\n\"\n \"~~~~\\n\"\n msgstr \"\"\n@@ -3780,12 +3778,12 @@ msgstr \"\"\n #. type: Plain text\n #: doc/tutorial.md:2196\n msgid \"\"\n-\"~~~ {.xfail-test} use std::float::consts::pi; # trait Shape { fn area(&self) \"\n-\"-> float; } # trait Circle : Shape { fn radius(&self) -> float; } # struct \"\n-\"Point { x: float, y: float } # struct CircleStruct { center: Point, radius: \"\n-\"float } # impl Circle for CircleStruct { fn radius(&self) -> float { (self.\"\n+\"~~~ {.xfail-test} use std::f64::consts::pi; # trait Shape { fn area(&self) \"\n+\"-> f64; } # trait Circle : Shape { fn radius(&self) -> f64; } # struct \"\n+\"Point { x: f64, y: f64 } # struct CircleStruct { center: Point, radius: \"\n+\"f64 } # impl Circle for CircleStruct { fn radius(&self) -> f64 { (self.\"\n \"area() / pi).sqrt() } } # impl Shape for CircleStruct { fn area(&self) -> \"\n-\"float { pi * square(self.radius) } }\"\n+\"f64 { pi * square(self.radius) } }\"\n msgstr \"\"\n \n #. type: Plain text\n@@ -3819,7 +3817,7 @@ msgstr \"\"\n \n #. type: Plain text\n #: doc/tutorial.md:2216\n-msgid \"~~~ #[deriving(Eq)] struct Circle { radius: float }\"\n+msgid \"~~~ #[deriving(Eq)] struct Circle { radius: f64 }\"\n msgstr \"\"\n \n #. type: Plain text"}]}