{"sha": "9a68098e87bdc5a73c6714064eb1627590b4c0bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhNjgwOThlODdiZGM1YTczYzY3MTQwNjRlYjE2Mjc1OTBiNGMwYmM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-12-18T20:26:59Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-12-20T19:43:47Z"}, "message": "Move impls for qpath recovery trait from `ast.rs`", "tree": {"sha": "081ba5793c9982f37db30e8b080264fc61a1ca36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/081ba5793c9982f37db30e8b080264fc61a1ca36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a68098e87bdc5a73c6714064eb1627590b4c0bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a68098e87bdc5a73c6714064eb1627590b4c0bc", "html_url": "https://github.com/rust-lang/rust/commit/9a68098e87bdc5a73c6714064eb1627590b4c0bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a68098e87bdc5a73c6714064eb1627590b4c0bc/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81622c6b02536bdcf56145beb317da0d336703c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/81622c6b02536bdcf56145beb317da0d336703c1", "html_url": "https://github.com/rust-lang/rust/commit/81622c6b02536bdcf56145beb317da0d336703c1"}], "stats": {"total": 123, "additions": 65, "deletions": 58}, "files": [{"sha": "1d399f159c8153a01d18993cac6922fcd52635e9", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 25, "deletions": 56, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/9a68098e87bdc5a73c6714064eb1627590b4c0bc/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a68098e87bdc5a73c6714064eb1627590b4c0bc/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=9a68098e87bdc5a73c6714064eb1627590b4c0bc", "patch": "@@ -20,7 +20,6 @@ use syntax_pos::{Span, DUMMY_SP};\n use codemap::{respan, Spanned};\n use abi::Abi;\n use ext::hygiene::{Mark, SyntaxContext};\n-use parse::parser::{RecoverQPath, PathStyle};\n use print::pprust;\n use ptr::P;\n use rustc_data_structures::indexed_vec;\n@@ -485,6 +484,30 @@ impl fmt::Debug for Pat {\n }\n \n impl Pat {\n+    pub(super) fn to_ty(&self) -> Option<P<Ty>> {\n+        let node = match &self.node {\n+            PatKind::Wild => TyKind::Infer,\n+            PatKind::Ident(BindingMode::ByValue(Mutability::Immutable), ident, None) =>\n+                TyKind::Path(None, Path::from_ident(ident.span, ident.node)),\n+            PatKind::Path(qself, path) => TyKind::Path(qself.clone(), path.clone()),\n+            PatKind::Mac(mac) => TyKind::Mac(mac.clone()),\n+            PatKind::Ref(pat, mutbl) =>\n+                pat.to_ty().map(|ty| TyKind::Rptr(None, MutTy { ty, mutbl: *mutbl }))?,\n+            PatKind::Slice(pats, None, _) if pats.len() == 1 =>\n+                pats[0].to_ty().map(TyKind::Slice)?,\n+            PatKind::Tuple(pats, None) => {\n+                let mut tys = Vec::new();\n+                for pat in pats {\n+                    tys.push(pat.to_ty()?);\n+                }\n+                TyKind::Tup(tys)\n+            }\n+            _ => return None,\n+        };\n+\n+        Some(P(Ty { node, id: self.id, span: self.span }))\n+    }\n+\n     pub fn walk<F>(&self, it: &mut F) -> bool\n         where F: FnMut(&Pat) -> bool\n     {\n@@ -520,38 +543,6 @@ impl Pat {\n     }\n }\n \n-impl RecoverQPath for Pat {\n-    fn to_ty(&self) -> Option<P<Ty>> {\n-        let node = match &self.node {\n-            PatKind::Wild => TyKind::Infer,\n-            PatKind::Ident(BindingMode::ByValue(Mutability::Immutable), ident, None) =>\n-                TyKind::Path(None, Path::from_ident(ident.span, ident.node)),\n-            PatKind::Path(qself, path) => TyKind::Path(qself.clone(), path.clone()),\n-            PatKind::Mac(mac) => TyKind::Mac(mac.clone()),\n-            PatKind::Ref(pat, mutbl) =>\n-                pat.to_ty().map(|ty| TyKind::Rptr(None, MutTy { ty, mutbl: *mutbl }))?,\n-            PatKind::Slice(pats, None, _) if pats.len() == 1 =>\n-                pats[0].to_ty().map(TyKind::Slice)?,\n-            PatKind::Tuple(pats, None) => {\n-                let mut tys = Vec::new();\n-                for pat in pats {\n-                    tys.push(pat.to_ty()?);\n-                }\n-                TyKind::Tup(tys)\n-            }\n-            _ => return None,\n-        };\n-\n-        Some(P(Ty { node, id: self.id, span: self.span }))\n-    }\n-    fn to_recovered(&self, qself: Option<QSelf>, path: Path) -> Self {\n-        Self { span: path.span, node: PatKind::Path(qself, path), id: self.id }\n-    }\n-    fn to_string(&self) -> String {\n-        pprust::pat_to_string(self)\n-    }\n-}\n-\n /// A single field in a struct pattern\n ///\n /// Patterns like the fields of Foo `{ x, ref y, ref mut z }`\n@@ -919,10 +910,8 @@ impl Expr {\n             _ => None,\n         }\n     }\n-}\n \n-impl RecoverQPath for Expr {\n-    fn to_ty(&self) -> Option<P<Ty>> {\n+    pub(super) fn to_ty(&self) -> Option<P<Ty>> {\n         let node = match &self.node {\n             ExprKind::Path(qself, path) => TyKind::Path(qself.clone(), path.clone()),\n             ExprKind::Mac(mac) => TyKind::Mac(mac.clone()),\n@@ -951,13 +940,6 @@ impl RecoverQPath for Expr {\n \n         Some(P(Ty { node, id: self.id, span: self.span }))\n     }\n-    fn to_recovered(&self, qself: Option<QSelf>, path: Path) -> Self {\n-        Self { span: path.span, node: ExprKind::Path(qself, path),\n-               id: self.id, attrs: self.attrs.clone() }\n-    }\n-    fn to_string(&self) -> String {\n-        pprust::expr_to_string(self)\n-    }\n }\n \n impl fmt::Debug for Expr {\n@@ -1469,19 +1451,6 @@ pub struct Ty {\n     pub span: Span,\n }\n \n-impl RecoverQPath for Ty {\n-    fn to_ty(&self) -> Option<P<Ty>> {\n-        Some(P(self.clone()))\n-    }\n-    fn to_recovered(&self, qself: Option<QSelf>, path: Path) -> Self {\n-        Self { span: path.span, node: TyKind::Path(qself, path), id: self.id }\n-    }\n-    fn to_string(&self) -> String {\n-        pprust::ty_to_string(self)\n-    }\n-    const PATH_STYLE: PathStyle = PathStyle::Type;\n-}\n-\n impl fmt::Debug for Ty {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"type({})\", pprust::ty_to_string(self))"}, {"sha": "010ab3c27810a3a7b4aaeb501471c4882d4f239f", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/9a68098e87bdc5a73c6714064eb1627590b4c0bc/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a68098e87bdc5a73c6714064eb1627590b4c0bc/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=9a68098e87bdc5a73c6714064eb1627590b4c0bc", "patch": "@@ -169,11 +169,49 @@ enum PrevTokenKind {\n     Other,\n }\n \n-pub(crate) trait RecoverQPath: Sized {\n+trait RecoverQPath: Sized {\n+    const PATH_STYLE: PathStyle = PathStyle::Expr;\n     fn to_ty(&self) -> Option<P<Ty>>;\n     fn to_recovered(&self, qself: Option<QSelf>, path: ast::Path) -> Self;\n     fn to_string(&self) -> String;\n-    const PATH_STYLE: PathStyle = PathStyle::Expr;\n+}\n+\n+impl RecoverQPath for Ty {\n+    const PATH_STYLE: PathStyle = PathStyle::Type;\n+    fn to_ty(&self) -> Option<P<Ty>> {\n+        Some(P(self.clone()))\n+    }\n+    fn to_recovered(&self, qself: Option<QSelf>, path: ast::Path) -> Self {\n+        Self { span: path.span, node: TyKind::Path(qself, path), id: self.id }\n+    }\n+    fn to_string(&self) -> String {\n+        pprust::ty_to_string(self)\n+    }\n+}\n+\n+impl RecoverQPath for Pat {\n+    fn to_ty(&self) -> Option<P<Ty>> {\n+        self.to_ty()\n+    }\n+    fn to_recovered(&self, qself: Option<QSelf>, path: ast::Path) -> Self {\n+        Self { span: path.span, node: PatKind::Path(qself, path), id: self.id }\n+    }\n+    fn to_string(&self) -> String {\n+        pprust::pat_to_string(self)\n+    }\n+}\n+\n+impl RecoverQPath for Expr {\n+    fn to_ty(&self) -> Option<P<Ty>> {\n+        self.to_ty()\n+    }\n+    fn to_recovered(&self, qself: Option<QSelf>, path: ast::Path) -> Self {\n+        Self { span: path.span, node: ExprKind::Path(qself, path),\n+               id: self.id, attrs: self.attrs.clone() }\n+    }\n+    fn to_string(&self) -> String {\n+        pprust::expr_to_string(self)\n+    }\n }\n \n /* ident is handled by common.rs */"}]}