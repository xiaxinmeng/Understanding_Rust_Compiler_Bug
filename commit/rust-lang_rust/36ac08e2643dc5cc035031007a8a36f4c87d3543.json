{"sha": "36ac08e2643dc5cc035031007a8a36f4c87d3543", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2YWMwOGUyNjQzZGM1Y2MwMzUwMzEwMDdhOGEzNmY0Yzg3ZDM1NDM=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-06-11T17:42:22Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-06-26T19:46:22Z"}, "message": "Make `fn_arg_names` return `Ident` instead of symbol\n\nAlso, implement this query for the local crate, not just foreign crates.", "tree": {"sha": "70c57034f78e910d5eb3fd07ed1015fc6d54326b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70c57034f78e910d5eb3fd07ed1015fc6d54326b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36ac08e2643dc5cc035031007a8a36f4c87d3543", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl72UI4ACgkQtAh+UQ6Y\nsWQGUw/+JDfCLauvjexThaSVvfTKNbkj7UgC4a5A7VJ+feWmaQDMfaXD3vwLRQlK\n971cPkpkEBL5UngB5vsEGFLM2gdnOTaWRCQvb1vbHGVrSu14J0gBcsGSvHuiOeBX\nPQL8Nrt6PtQsHBjd+AlKcKJAAzjphghfirO2jQEw6juTc5Xit/8D9MUedzobiAcT\n2BoJGKiRn1vg8y8iSV9Y0tzJjjfoU1/llgACiGULZzd1unjYTu20/BGSTgXivwvH\ngKAyXii5UJTXI3AWPyYsaGiH3YxX/F/BZgfglDmAJb9nuUVvd4dtn/9GPHwXXUCT\nloiG/fQEBquhzaf37Km0T6TJon9Cqtt0yTRZb/jDO0R0rMCksa5zhSxknK+PNfPb\nKbavJWiocZOT8wDZjoWboNS3yN54Si6ENZKion4eMh/8irda9eyCD7r8AuQeu9im\nYznMUEqqmTIPO+hT7L8eZX3U94til9C7Ox8Fji/jufGJkfXvNrQn9p1PXeNy+ODR\nrzNDGtimq0D8gDFlHRD6USok74WteGp3tIwi6uUs7LSWbTW9wCwfsDbCEPCVU5XV\npjryGYNm6FXfZjXTjFcbAl8v/B9ZUjxBnm3qDwGcwwoCPeunpcx4oSiuoHNyZwWM\nSWidZl/+qJGEfoH5P5tN4V78r+n2T/soSccDp2dmf8mRZjZhNUg=\n=HIBl\n-----END PGP SIGNATURE-----", "payload": "tree 70c57034f78e910d5eb3fd07ed1015fc6d54326b\nparent 7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772\nauthor Aaron Hill <aa1ronham@gmail.com> 1591897342 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1593200782 -0400\n\nMake `fn_arg_names` return `Ident` instead of symbol\n\nAlso, implement this query for the local crate, not just foreign crates.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36ac08e2643dc5cc035031007a8a36f4c87d3543", "html_url": "https://github.com/rust-lang/rust/commit/36ac08e2643dc5cc035031007a8a36f4c87d3543", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36ac08e2643dc5cc035031007a8a36f4c87d3543/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "url": "https://api.github.com/repos/rust-lang/rust/commits/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772", "html_url": "https://github.com/rust-lang/rust/commit/7750c3d46bc19784adb1ee6e37a5ec7e4cd7e772"}], "stats": {"total": 55, "additions": 34, "deletions": 21}, "files": [{"sha": "2254d553337d5fed65d94daa7b19b3d40311af0f", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36ac08e2643dc5cc035031007a8a36f4c87d3543/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36ac08e2643dc5cc035031007a8a36f4c87d3543/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=36ac08e2643dc5cc035031007a8a36f4c87d3543", "patch": "@@ -1339,13 +1339,13 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         }\n     }\n \n-    fn get_fn_param_names(&self, tcx: TyCtxt<'tcx>, id: DefIndex) -> &'tcx [Symbol] {\n+    fn get_fn_param_names(&self, tcx: TyCtxt<'tcx>, id: DefIndex) -> &'tcx [Ident] {\n         let param_names = match self.kind(id) {\n             EntryKind::Fn(data) | EntryKind::ForeignFn(data) => data.decode(self).param_names,\n             EntryKind::AssocFn(data) => data.decode(self).fn_data.param_names,\n             _ => Lazy::empty(),\n         };\n-        tcx.arena.alloc_from_iter(param_names.decode(self))\n+        tcx.arena.alloc_from_iter(param_names.decode((self, tcx)))\n     }\n \n     fn exported_symbols("}, {"sha": "d01c767e2bc044219b9c74695c9370e69c90e33c", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/36ac08e2643dc5cc035031007a8a36f4c87d3543/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36ac08e2643dc5cc035031007a8a36f4c87d3543/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=36ac08e2643dc5cc035031007a8a36f4c87d3543", "patch": "@@ -30,7 +30,7 @@ use rustc_middle::ty::{self, SymbolName, Ty, TyCtxt};\n use rustc_serialize::{opaque, Encodable, Encoder, SpecializedEncoder, UseSpecializedEncodable};\n use rustc_session::config::CrateType;\n use rustc_span::source_map::Spanned;\n-use rustc_span::symbol::{kw, sym, Ident, Symbol};\n+use rustc_span::symbol::{sym, Ident, Symbol};\n use rustc_span::{self, ExternalSource, FileName, SourceFile, Span};\n use rustc_target::abi::VariantIdx;\n use std::hash::Hash;\n@@ -1004,18 +1004,12 @@ impl EncodeContext<'tcx> {\n         }\n     }\n \n-    fn encode_fn_param_names_for_body(&mut self, body_id: hir::BodyId) -> Lazy<[Symbol]> {\n-        self.tcx.dep_graph.with_ignore(|| {\n-            let body = self.tcx.hir().body(body_id);\n-            self.lazy(body.params.iter().map(|arg| match arg.pat.kind {\n-                hir::PatKind::Binding(_, _, ident, _) => ident.name,\n-                _ => kw::Invalid,\n-            }))\n-        })\n+    fn encode_fn_param_names_for_body(&mut self, body_id: hir::BodyId) -> Lazy<[Ident]> {\n+        self.tcx.dep_graph.with_ignore(|| self.lazy(self.tcx.hir().body_param_names(body_id)))\n     }\n \n-    fn encode_fn_param_names(&mut self, param_names: &[Ident]) -> Lazy<[Symbol]> {\n-        self.lazy(param_names.iter().map(|ident| ident.name))\n+    fn encode_fn_param_names(&mut self, param_names: &[Ident]) -> Lazy<[Ident]> {\n+        self.lazy(param_names.iter())\n     }\n \n     fn encode_optimized_mir(&mut self, def_id: LocalDefId) {"}, {"sha": "381e7ee115e173ceac4a535c6b8bf621513b663f", "filename": "src/librustc_metadata/rmeta/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36ac08e2643dc5cc035031007a8a36f4c87d3543/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36ac08e2643dc5cc035031007a8a36f4c87d3543/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs?ref=36ac08e2643dc5cc035031007a8a36f4c87d3543", "patch": "@@ -19,7 +19,7 @@ use rustc_serialize::opaque::Encoder;\n use rustc_session::config::SymbolManglingVersion;\n use rustc_session::CrateDisambiguator;\n use rustc_span::edition::Edition;\n-use rustc_span::symbol::Symbol;\n+use rustc_span::symbol::{Ident, Symbol};\n use rustc_span::{self, Span};\n use rustc_target::spec::{PanicStrategy, TargetTriple};\n \n@@ -327,7 +327,7 @@ struct ModData {\n struct FnData {\n     asyncness: hir::IsAsync,\n     constness: hir::Constness,\n-    param_names: Lazy<[Symbol]>,\n+    param_names: Lazy<[Ident]>,\n }\n \n #[derive(RustcEncodable, RustcDecodable)]"}, {"sha": "d60d24aa9aed5473ca70f86df966c29528ad9e2c", "filename": "src/librustc_middle/hir/map/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/36ac08e2643dc5cc035031007a8a36f4c87d3543/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36ac08e2643dc5cc035031007a8a36f4c87d3543/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs?ref=36ac08e2643dc5cc035031007a8a36f4c87d3543", "patch": "@@ -14,7 +14,7 @@ use rustc_hir::*;\n use rustc_index::vec::IndexVec;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::Spanned;\n-use rustc_span::symbol::{kw, Symbol};\n+use rustc_span::symbol::{kw, Ident, Symbol};\n use rustc_span::Span;\n use rustc_target::spec::abi::Abi;\n \n@@ -374,6 +374,13 @@ impl<'hir> Map<'hir> {\n         })\n     }\n \n+    pub fn body_param_names(&self, id: BodyId) -> impl Iterator<Item = Ident> + 'hir {\n+        self.body(id).params.iter().map(|arg| match arg.pat.kind {\n+            PatKind::Binding(_, _, ident, _) => ident,\n+            _ => Ident::new(kw::Invalid, rustc_span::DUMMY_SP),\n+        })\n+    }\n+\n     /// Returns the `BodyOwnerKind` of this `LocalDefId`.\n     ///\n     /// Panics if `LocalDefId` does not have an associated body."}, {"sha": "e152d11c081a12bb430fe39ca9432bc5f7680a39", "filename": "src/librustc_middle/hir/mod.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/36ac08e2643dc5cc035031007a8a36f4c87d3543/src%2Flibrustc_middle%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36ac08e2643dc5cc035031007a8a36f4c87d3543/src%2Flibrustc_middle%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fhir%2Fmod.rs?ref=36ac08e2643dc5cc035031007a8a36f4c87d3543", "patch": "@@ -12,10 +12,7 @@ use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_hir::def_id::{LocalDefId, LOCAL_CRATE};\n-use rustc_hir::Body;\n-use rustc_hir::HirId;\n-use rustc_hir::ItemLocalId;\n-use rustc_hir::Node;\n+use rustc_hir::*;\n use rustc_index::vec::IndexVec;\n \n pub struct Owner<'tcx> {\n@@ -79,5 +76,20 @@ pub fn provide(providers: &mut Providers<'_>) {\n     };\n     providers.hir_owner = |tcx, id| tcx.index_hir(LOCAL_CRATE).map[id].signature;\n     providers.hir_owner_nodes = |tcx, id| tcx.index_hir(LOCAL_CRATE).map[id].with_bodies.as_deref();\n+    providers.fn_arg_names = |tcx, id| {\n+        let hir = tcx.hir();\n+        let hir_id = hir.as_local_hir_id(id.expect_local());\n+        if let Some(body_id) = hir.maybe_body_owned_by(hir_id) {\n+            tcx.arena.alloc_from_iter(hir.body_param_names(body_id))\n+        } else if let Node::TraitItem(&TraitItem {\n+            kind: TraitItemKind::Fn(_, TraitFn::Required(idents)),\n+            ..\n+        }) = hir.get(hir_id)\n+        {\n+            tcx.arena.alloc_slice(idents)\n+        } else {\n+            span_bug!(hir.span(hir_id), \"fn_arg_names: unexpected item {:?}\", id);\n+        }\n+    };\n     map::provide(providers);\n }"}, {"sha": "f10f38dc935a817314acfbfeb090a1b29489ce90", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36ac08e2643dc5cc035031007a8a36f4c87d3543/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36ac08e2643dc5cc035031007a8a36f4c87d3543/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=36ac08e2643dc5cc035031007a8a36f4c87d3543", "patch": "@@ -729,7 +729,7 @@ rustc_queries! {\n     }\n \n     Other {\n-        query fn_arg_names(def_id: DefId) -> &'tcx [Symbol] {\n+        query fn_arg_names(def_id: DefId) -> &'tcx [rustc_span::symbol::Ident] {\n             desc { |tcx| \"looking up function parameter names for `{}`\", tcx.def_path_str(def_id) }\n         }\n         /// Gets the rendered value of the specified constant or associated constant."}]}