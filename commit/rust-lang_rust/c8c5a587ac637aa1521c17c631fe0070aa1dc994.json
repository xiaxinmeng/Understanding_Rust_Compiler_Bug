{"sha": "c8c5a587ac637aa1521c17c631fe0070aa1dc994", "node_id": "C_kwDOAAsO6NoAKGM4YzVhNTg3YWM2MzdhYTE1MjFjMTdjNjMxZmUwMDcwYWExZGM5OTQ", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-05-05T09:29:40Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-05-07T05:56:43Z"}, "message": "Tune the `is_ascii` implementation used for short slices", "tree": {"sha": "4794d57ec969965ce27f9000eb986f47745f0bbb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4794d57ec969965ce27f9000eb986f47745f0bbb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8c5a587ac637aa1521c17c631fe0070aa1dc994", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8c5a587ac637aa1521c17c631fe0070aa1dc994", "html_url": "https://github.com/rust-lang/rust/commit/c8c5a587ac637aa1521c17c631fe0070aa1dc994", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8c5a587ac637aa1521c17c631fe0070aa1dc994/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cfcf71e0428b5fa314b8e82aae2ef5858e8a79a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cfcf71e0428b5fa314b8e82aae2ef5858e8a79a", "html_url": "https://github.com/rust-lang/rust/commit/1cfcf71e0428b5fa314b8e82aae2ef5858e8a79a"}], "stats": {"total": 68, "additions": 58, "deletions": 10}, "files": [{"sha": "f3311f76a7f0663c6c58e811aa4c9c1319ba871d", "filename": "library/core/src/slice/ascii.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c8c5a587ac637aa1521c17c631fe0070aa1dc994/library%2Fcore%2Fsrc%2Fslice%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8c5a587ac637aa1521c17c631fe0070aa1dc994/library%2Fcore%2Fsrc%2Fslice%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fascii.rs?ref=c8c5a587ac637aa1521c17c631fe0070aa1dc994", "patch": "@@ -268,6 +268,24 @@ const fn contains_nonascii(v: usize) -> bool {\n     (NONASCII_MASK & v) != 0\n }\n \n+/// ASCII test *without* the chunk-at-a-time optimizations.\n+///\n+/// This is carefully structured to produce nice small code -- it's smaller in\n+/// `-O` than what the \"obvious\" ways produces under `-C opt-level=s`.  If you\n+/// touch it, be sure to run (and update if needed) the assembly test.\n+#[unstable(feature = \"str_internals\", issue = \"none\")]\n+#[doc(hidden)]\n+#[inline]\n+pub const fn is_ascii_simple(mut bytes: &[u8]) -> bool {\n+    while let [rest @ .., last] = bytes {\n+        if !last.is_ascii() {\n+            break;\n+        }\n+        bytes = rest;\n+    }\n+    bytes.is_empty()\n+}\n+\n /// Optimized ASCII test that will use usize-at-a-time operations instead of\n /// byte-at-a-time operations (when possible).\n ///\n@@ -293,16 +311,7 @@ const fn is_ascii(s: &[u8]) -> bool {\n     // We also do this for architectures where `size_of::<usize>()` isn't\n     // sufficient alignment for `usize`, because it's a weird edge case.\n     if len < USIZE_SIZE || len < align_offset || USIZE_SIZE < mem::align_of::<usize>() {\n-        // FIXME: once iterators and closures can be used in `const fn`,\n-        // return s.iter().all(|b| b.is_ascii());\n-        let mut i = 0;\n-        while i < len {\n-            if !s[i].is_ascii() {\n-                return false;\n-            }\n-            i += 1;\n-        }\n-        return true;\n+        return is_ascii_simple(s);\n     }\n \n     // We always read the first word unaligned, which means `align_offset` is"}, {"sha": "4c891ba550f3c840a1f876c1177d62d7d61bc260", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8c5a587ac637aa1521c17c631fe0070aa1dc994/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8c5a587ac637aa1521c17c631fe0070aa1dc994/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=c8c5a587ac637aa1521c17c631fe0070aa1dc994", "patch": "@@ -44,6 +44,10 @@ mod raw;\n mod rotate;\n mod specialize;\n \n+#[unstable(feature = \"str_internals\", issue = \"none\")]\n+#[doc(hidden)]\n+pub use ascii::is_ascii_simple;\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use iter::{Chunks, ChunksMut, Windows};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "b3e1fee15a715cad555cd7eb3ffc1fb6f3a18e80", "filename": "tests/assembly/slice-is_ascii.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c8c5a587ac637aa1521c17c631fe0070aa1dc994/tests%2Fassembly%2Fslice-is_ascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8c5a587ac637aa1521c17c631fe0070aa1dc994/tests%2Fassembly%2Fslice-is_ascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fassembly%2Fslice-is_ascii.rs?ref=c8c5a587ac637aa1521c17c631fe0070aa1dc994", "patch": "@@ -0,0 +1,35 @@\n+// revisions: WIN LIN\n+// [WIN] only-windows\n+// [LIN] only-linux\n+// assembly-output: emit-asm\n+// compile-flags: --crate-type=lib -O -C llvm-args=-x86-asm-syntax=intel\n+// min-llvm-version: 14\n+// only-x86_64\n+// ignore-sgx\n+// ignore-debug\n+\n+#![feature(str_internals)]\n+\n+// CHECK-LABEL: is_ascii_simple_demo:\n+#[no_mangle]\n+pub fn is_ascii_simple_demo(bytes: &[u8]) -> bool {\n+    // Linux (System V): pointer is rdi; length is rsi\n+    // Windows: pointer is rcx; length is rdx.\n+\n+    // CHECK-NOT: mov\n+    // CHECK-NOT: test\n+    // CHECK-NOT: cmp\n+\n+    // CHECK: .[[LOOPHEAD:.+]]:\n+    // CHECK-NEXT: mov [[TEMP:.+]], [[LEN:rsi|rdx]]\n+    // CHECK-NEXT: sub [[LEN]], 1\n+    // CHECK-NEXT: jb .[[LOOPEXIT:.+]]\n+    // CHECK-NEXT: cmp byte ptr [{{rdi|rcx}} + [[TEMP]] - 1], 0\n+    // CHECK-NEXT: jns .[[LOOPHEAD]]\n+\n+    // CHECK-NEXT: .[[LOOPEXIT]]:\n+    // CHECK-NEXT: test [[TEMP]], [[TEMP]]\n+    // CHECK-NEXT: sete al\n+    // CHECK-NEXT: ret\n+    core::slice::is_ascii_simple(bytes)\n+}"}]}