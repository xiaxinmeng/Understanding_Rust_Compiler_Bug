{"sha": "eaf6905c558093c101b41b791ac4fba3dbe96779", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhZjY5MDVjNTU4MDkzYzEwMWI0MWI3OTFhYzRmYmEzZGJlOTY3Nzk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-09T11:57:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-09T11:57:48Z"}, "message": "Rollup merge of #69685 - cuviper:soft-segv, r=sfackler\n\nunix: Don't override existing SIGSEGV/BUS handlers\n\nAlthough `stack_overflow::init` runs very early in the process, even\nbefore `main`, there may already be signal handlers installed for things\nlike the address sanitizer. In that case, just leave it alone, and don't\nbother trying to allocate our own signal stacks either.\n\nFixes #69524.", "tree": {"sha": "d268e68354ce38bcf3dbade354b2152db7269ebe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d268e68354ce38bcf3dbade354b2152db7269ebe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eaf6905c558093c101b41b791ac4fba3dbe96779", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeZi88CRBK7hj4Ov3rIwAAdHIIADx7rb4R3UyIFUjMPPg1eVxh\nQu5Ah9pVkzgIo0BsQmKWciyM0yekdg+ppSOy6rLZdm2BpzDFl727rLuLmpfB8NV6\naiuE1u5x8tro+Au7Qqjh//JEBMfsMB//S3HjTdlAnke7TAx/esjDjOUQYF48dwEE\nKR/Ni77whnLFpN5GdukkhVtPTCBfk48cC1aaigwGP4GJVbjw9qDO9ej9vnL4+6Kd\nvtPrqrcTNq1D8xgM60mh9T3KTSNjYTctC88y9FQL994cdeKy+vEyj9741btKcW/5\nvN+LRwc/IcJrKSJaj8/2nDDCY2eETv/R9V2nQPyn88cQoM9z91qrgfsTzhJt9zg=\n=hyIL\n-----END PGP SIGNATURE-----\n", "payload": "tree d268e68354ce38bcf3dbade354b2152db7269ebe\nparent 4ec997503c94913af44e7f9ec8a75a21c45b7bac\nparent 676b9bc477dfe58971b7df9df4e3a053bb187dee\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1583755068 +0100\ncommitter GitHub <noreply@github.com> 1583755068 +0100\n\nRollup merge of #69685 - cuviper:soft-segv, r=sfackler\n\nunix: Don't override existing SIGSEGV/BUS handlers\n\nAlthough `stack_overflow::init` runs very early in the process, even\nbefore `main`, there may already be signal handlers installed for things\nlike the address sanitizer. In that case, just leave it alone, and don't\nbother trying to allocate our own signal stacks either.\n\nFixes #69524.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eaf6905c558093c101b41b791ac4fba3dbe96779", "html_url": "https://github.com/rust-lang/rust/commit/eaf6905c558093c101b41b791ac4fba3dbe96779", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eaf6905c558093c101b41b791ac4fba3dbe96779/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ec997503c94913af44e7f9ec8a75a21c45b7bac", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ec997503c94913af44e7f9ec8a75a21c45b7bac", "html_url": "https://github.com/rust-lang/rust/commit/4ec997503c94913af44e7f9ec8a75a21c45b7bac"}, {"sha": "676b9bc477dfe58971b7df9df4e3a053bb187dee", "url": "https://api.github.com/repos/rust-lang/rust/commits/676b9bc477dfe58971b7df9df4e3a053bb187dee", "html_url": "https://github.com/rust-lang/rust/commit/676b9bc477dfe58971b7df9df4e3a053bb187dee"}], "stats": {"total": 47, "additions": 39, "deletions": 8}, "files": [{"sha": "9e8be55075578611593cf9e71f1f7c2972f90c44", "filename": "src/libstd/sys/unix/stack_overflow.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/eaf6905c558093c101b41b791ac4fba3dbe96779/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf6905c558093c101b41b791ac4fba3dbe96779/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs?ref=eaf6905c558093c101b41b791ac4fba3dbe96779", "patch": "@@ -13,6 +13,10 @@ impl Handler {\n     pub unsafe fn new() -> Handler {\n         make_handler()\n     }\n+\n+    fn null() -> Handler {\n+        Handler { _data: crate::ptr::null_mut() }\n+    }\n }\n \n impl Drop for Handler {\n@@ -108,13 +112,20 @@ mod imp {\n     }\n \n     static mut MAIN_ALTSTACK: *mut libc::c_void = ptr::null_mut();\n+    static mut NEED_ALTSTACK: bool = false;\n \n     pub unsafe fn init() {\n         let mut action: sigaction = mem::zeroed();\n-        action.sa_flags = SA_SIGINFO | SA_ONSTACK;\n-        action.sa_sigaction = signal_handler as sighandler_t;\n-        sigaction(SIGSEGV, &action, ptr::null_mut());\n-        sigaction(SIGBUS, &action, ptr::null_mut());\n+        for &signal in &[SIGSEGV, SIGBUS] {\n+            sigaction(signal, ptr::null_mut(), &mut action);\n+            // Configure our signal handler if one is not already set.\n+            if action.sa_sigaction == SIG_DFL {\n+                action.sa_flags = SA_SIGINFO | SA_ONSTACK;\n+                action.sa_sigaction = signal_handler as sighandler_t;\n+                sigaction(signal, &action, ptr::null_mut());\n+                NEED_ALTSTACK = true;\n+            }\n+        }\n \n         let handler = make_handler();\n         MAIN_ALTSTACK = handler._data;\n@@ -152,6 +163,9 @@ mod imp {\n     }\n \n     pub unsafe fn make_handler() -> Handler {\n+        if !NEED_ALTSTACK {\n+            return Handler::null();\n+        }\n         let mut stack = mem::zeroed();\n         sigaltstack(ptr::null(), &mut stack);\n         // Configure alternate signal stack, if one is not already set.\n@@ -160,7 +174,7 @@ mod imp {\n             sigaltstack(&stack, ptr::null_mut());\n             Handler { _data: stack.ss_sp as *mut libc::c_void }\n         } else {\n-            Handler { _data: ptr::null_mut() }\n+            Handler::null()\n         }\n     }\n \n@@ -191,14 +205,12 @@ mod imp {\n     target_os = \"openbsd\"\n )))]\n mod imp {\n-    use crate::ptr;\n-\n     pub unsafe fn init() {}\n \n     pub unsafe fn cleanup() {}\n \n     pub unsafe fn make_handler() -> super::Handler {\n-        super::Handler { _data: ptr::null_mut() }\n+        super::Handler::null()\n     }\n \n     pub unsafe fn drop_handler(_handler: &mut super::Handler) {}"}, {"sha": "1ca082c8b47042f8444a34801e2ca12c0515b34b", "filename": "src/test/ui/sanitize/badfree.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/eaf6905c558093c101b41b791ac4fba3dbe96779/src%2Ftest%2Fui%2Fsanitize%2Fbadfree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf6905c558093c101b41b791ac4fba3dbe96779/src%2Ftest%2Fui%2Fsanitize%2Fbadfree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitize%2Fbadfree.rs?ref=eaf6905c558093c101b41b791ac4fba3dbe96779", "patch": "@@ -0,0 +1,19 @@\n+// needs-sanitizer-support\n+// only-x86_64\n+//\n+// compile-flags: -Z sanitizer=address -O\n+//\n+// run-fail\n+// error-pattern: AddressSanitizer: SEGV\n+\n+use std::ffi::c_void;\n+\n+extern \"C\" {\n+    fn free(ptr: *mut c_void);\n+}\n+\n+fn main() {\n+    unsafe {\n+        free(1 as *mut c_void);\n+    }\n+}"}]}