{"sha": "34812e82d066dc1b3ef89df4272300662374f907", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0ODEyZTgyZDA2NmRjMWIzZWY4OWRmNDI3MjMwMDY2MjM3NGY5MDc=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-07T17:10:03Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-09T20:22:30Z"}, "message": "Use const_eval in loops", "tree": {"sha": "4a35406df05585681553b2526c019bb5ac878746", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a35406df05585681553b2526c019bb5ac878746"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34812e82d066dc1b3ef89df4272300662374f907", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34812e82d066dc1b3ef89df4272300662374f907", "html_url": "https://github.com/rust-lang/rust/commit/34812e82d066dc1b3ef89df4272300662374f907", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34812e82d066dc1b3ef89df4272300662374f907/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93461afffc04e475bcbb74a20ea4da84c9f5b80d", "url": "https://api.github.com/repos/rust-lang/rust/commits/93461afffc04e475bcbb74a20ea4da84c9f5b80d", "html_url": "https://github.com/rust-lang/rust/commit/93461afffc04e475bcbb74a20ea4da84c9f5b80d"}], "stats": {"total": 65, "additions": 48, "deletions": 17}, "files": [{"sha": "cecf47daf55639e62bc1a1011406007758c38afc", "filename": "src/loops.rs", "status": "modified", "additions": 29, "deletions": 14, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/34812e82d066dc1b3ef89df4272300662374f907/src%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34812e82d066dc1b3ef89df4272300662374f907/src%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Floops.rs?ref=34812e82d066dc1b3ef89df4272300662374f907", "patch": "@@ -1,11 +1,12 @@\n+use reexport::*;\n+use rustc::front::map::Node::NodeBlock;\n use rustc::lint::*;\n+use rustc::middle::const_eval::EvalHint::ExprTypeChecked;\n+use rustc::middle::const_eval::{ConstVal, eval_const_expr_partial};\n+use rustc::middle::def::Def;\n+use rustc::middle::ty;\n use rustc_front::hir::*;\n-use reexport::*;\n use rustc_front::intravisit::{Visitor, walk_expr, walk_block, walk_decl};\n-use rustc::middle::ty;\n-use rustc::middle::def::Def;\n-use consts::{constant_simple, Constant};\n-use rustc::front::map::Node::NodeBlock;\n use std::borrow::Cow;\n use std::collections::{HashSet, HashMap};\n \n@@ -421,22 +422,36 @@ fn check_for_loop_reverse_range(cx: &LateContext, arg: &Expr, expr: &Expr) {\n     // if this for loop is iterating over a two-sided range...\n     if let ExprRange(Some(ref start_expr), Some(ref stop_expr)) = arg.node {\n         // ...and both sides are compile-time constant integers...\n-        if let Some(start_idx @ Constant::Int(..)) = constant_simple(start_expr) {\n-            if let Some(stop_idx @ Constant::Int(..)) = constant_simple(stop_expr) {\n+        if let Ok(start_idx) = eval_const_expr_partial(&cx.tcx, start_expr, ExprTypeChecked, None) {\n+            if let Ok(stop_idx) = eval_const_expr_partial(&cx.tcx, stop_expr, ExprTypeChecked, None) {\n                 // ...and the start index is greater than the stop index,\n                 // this loop will never run. This is often confusing for developers\n                 // who think that this will iterate from the larger value to the\n                 // smaller value.\n-                if start_idx > stop_idx {\n-                    span_help_and_lint(cx,\n+                let (sup, eq) = match (start_idx, stop_idx) {\n+                    (ConstVal::Int(start_idx), ConstVal::Int(stop_idx)) => (start_idx > stop_idx, start_idx == stop_idx),\n+                    (ConstVal::Uint(start_idx), ConstVal::Uint(stop_idx)) => (start_idx > stop_idx, start_idx == stop_idx),\n+                    _ => (false, false),\n+                };\n+\n+                if sup {\n+                    let start_snippet = snippet(cx, start_expr.span, \"_\");\n+                    let stop_snippet = snippet(cx, stop_expr.span, \"_\");\n+\n+                    span_lint_and_then(cx,\n                                        REVERSE_RANGE_LOOP,\n                                        expr.span,\n                                        \"this range is empty so this for loop will never run\",\n-                                       &format!(\"Consider using `({}..{}).rev()` if you are attempting to iterate \\\n-                                                 over this range in reverse\",\n-                                                stop_idx,\n-                                                start_idx));\n-                } else if start_idx == stop_idx {\n+                                       |db| {\n+                                           db.span_suggestion(expr.span,\n+                                                              \"consider using the following if \\\n+                                                               you are attempting to iterate \\\n+                                                               over this range in reverse\",\n+                                                               format!(\"({}..{}).rev()` \",\n+                                                                       stop_snippet,\n+                                                                       start_snippet));\n+                                       });\n+                } else if eq {\n                     // if they are equal, it's also problematic - this loop\n                     // will never run.\n                     span_lint(cx,"}, {"sha": "4609c840836cad68d6950793d9cc8d2b15742689", "filename": "tests/compile-fail/for_loop.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/34812e82d066dc1b3ef89df4272300662374f907/tests%2Fcompile-fail%2Ffor_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34812e82d066dc1b3ef89df4272300662374f907/tests%2Fcompile-fail%2Ffor_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffor_loop.rs?ref=34812e82d066dc1b3ef89df4272300662374f907", "patch": "@@ -65,7 +65,7 @@ fn for_loop_over_option_and_result() {\n         break;\n     }\n \n-    // while let false positive for Option\n+    // while let false positive for Result\n     while let Ok(x) = result {\n         println!(\"{}\", x);\n         break;\n@@ -85,8 +85,10 @@ impl Unrelated {\n \n #[deny(needless_range_loop, explicit_iter_loop, iter_next_loop, reverse_range_loop, explicit_counter_loop)]\n #[deny(unused_collect)]\n-#[allow(linkedlist,shadow_unrelated,unnecessary_mut_passed, cyclomatic_complexity)]\n+#[allow(linkedlist, shadow_unrelated, unnecessary_mut_passed, cyclomatic_complexity)]\n fn main() {\n+    const MAX_LEN: usize = 42;\n+\n     let mut vec = vec![1, 2, 3, 4];\n     let vec2 = vec![1, 2, 3, 4];\n     for i in 0..vec.len() {\n@@ -111,6 +113,11 @@ fn main() {\n         println!(\"{}\", vec[i]);\n     }\n \n+    for i in 0..MAX_LEN {\n+        //~^ ERROR `i` is only used to index `vec`. Consider using `for item in vec.iter().take(MAX_LEN)`\n+        println!(\"{}\", vec[i]);\n+    }\n+\n     for i in 5..10 {\n         //~^ ERROR `i` is only used to index `vec`. Consider using `for item in vec.iter().take(10).skip(5)`\n         println!(\"{}\", vec[i]);\n@@ -126,7 +133,16 @@ fn main() {\n         println!(\"{} {}\", vec[i], i);\n     }\n \n-    for i in 10..0 { //~ERROR this range is empty so this for loop will never run\n+    for i in 10..0 {\n+        //~^ERROR this range is empty so this for loop will never run\n+        //~|HELP consider\n+        //~|SUGGESTION (0..10).rev()\n+        println!(\"{}\", i);\n+    }\n+\n+    for i in MAX_LEN..0 { //~ERROR this range is empty so this for loop will never run\n+        //~|HELP consider\n+        //~|SUGGESTION (0..MAX_LEN).rev()\n         println!(\"{}\", i);\n     }\n "}]}