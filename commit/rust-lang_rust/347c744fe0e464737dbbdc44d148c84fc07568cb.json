{"sha": "347c744fe0e464737dbbdc44d148c84fc07568cb", "node_id": "C_kwDOAAsO6NoAKDM0N2M3NDRmZTBlNDY0NzM3ZGJiZGM0NGQxNDhjODRmYzA3NTY4Y2I", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-14T06:47:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-14T06:47:32Z"}, "message": "Rollup merge of #92381 - ThePuzzlemaker:issue-92308, r=estebank\n\nSuggest `return`ing tail expressions in async functions\n\nThis PR fixes #92308.\n\nPreviously, the suggestion to `return` tail expressions (introduced in #81769) did not apply to `async` functions, as the suggestion checked whether the types were equal disregarding `impl Future<Output = T>` syntax sugar for `async` functions. This PR changes that in order to fix a potential papercut.\n\nI'm not sure if this is the \"right\" way to do this, so if there is a better way then please let me know.\n\nI amended an existing test introduced in #81769 to add a regression test for this, if you think I should make a separate test I will.", "tree": {"sha": "14030d488ca3fccf39bff1c20f3d22807c828211", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14030d488ca3fccf39bff1c20f3d22807c828211"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/347c744fe0e464737dbbdc44d148c84fc07568cb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh4RyECRBK7hj4Ov3rIwAAucYIAKVe2XN1ws6lsnf1IbV4H/0P\n1ayCE5wXtB0QtOs813MBE+rssOhLWbeFy6c4AsCkKlrBNtCVR9MtgonvKX1criSw\n4UKK98HUAr/s/v7xthichbWaWgjIwZgVa99JS6Cdtn5oh+DzEWYnRiUFIO/1YFbh\nflZRlZYQVQ+c0UBygAr/va0FNEvASPY9COmWz2hdjnrSzPKCmjUFHLvDnfDPhRdF\nNXncbMkzntiNKtnjqAbq/CLMDr6nFmjlu+3c1FAmapuASwa2yNcu1j257P3APd6Z\nTKkxABP25xNNHQZXIiEUDYGqJ9x0yJB3YmajMSG/TpdSoUy4kW4Q7WADX5cWY2o=\n=JaQ8\n-----END PGP SIGNATURE-----\n", "payload": "tree 14030d488ca3fccf39bff1c20f3d22807c828211\nparent f13e871ac561b54ddeac2b6173b1905fb4b20138\nparent ab7c4464920531559c4da0a9e9b8972ae2443ed1\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1642142852 +0100\ncommitter GitHub <noreply@github.com> 1642142852 +0100\n\nRollup merge of #92381 - ThePuzzlemaker:issue-92308, r=estebank\n\nSuggest `return`ing tail expressions in async functions\n\nThis PR fixes #92308.\n\nPreviously, the suggestion to `return` tail expressions (introduced in #81769) did not apply to `async` functions, as the suggestion checked whether the types were equal disregarding `impl Future<Output = T>` syntax sugar for `async` functions. This PR changes that in order to fix a potential papercut.\n\nI'm not sure if this is the \"right\" way to do this, so if there is a better way then please let me know.\n\nI amended an existing test introduced in #81769 to add a regression test for this, if you think I should make a separate test I will.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/347c744fe0e464737dbbdc44d148c84fc07568cb", "html_url": "https://github.com/rust-lang/rust/commit/347c744fe0e464737dbbdc44d148c84fc07568cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/347c744fe0e464737dbbdc44d148c84fc07568cb/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f13e871ac561b54ddeac2b6173b1905fb4b20138", "url": "https://api.github.com/repos/rust-lang/rust/commits/f13e871ac561b54ddeac2b6173b1905fb4b20138", "html_url": "https://github.com/rust-lang/rust/commit/f13e871ac561b54ddeac2b6173b1905fb4b20138"}, {"sha": "ab7c4464920531559c4da0a9e9b8972ae2443ed1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab7c4464920531559c4da0a9e9b8972ae2443ed1", "html_url": "https://github.com/rust-lang/rust/commit/ab7c4464920531559c4da0a9e9b8972ae2443ed1"}], "stats": {"total": 57, "additions": 54, "deletions": 3}, "files": [{"sha": "e8a0cc946b5e118d1ceba3bb1cd20f3c44953a7f", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/347c744fe0e464737dbbdc44d148c84fc07568cb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/347c744fe0e464737dbbdc44d148c84fc07568cb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=347c744fe0e464737dbbdc44d148c84fc07568cb", "patch": "@@ -9,7 +9,7 @@ use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind};\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{Expr, ExprKind, ItemKind, Node, Path, QPath, Stmt, StmtKind, TyKind};\n-use rustc_infer::infer;\n+use rustc_infer::infer::{self, TyCtxtInferExt};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{self, Binder, Ty};\n use rustc_span::symbol::{kw, sym};\n@@ -608,6 +608,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let bound_vars = self.tcx.late_bound_vars(fn_id);\n             let ty = self.tcx.erase_late_bound_regions(Binder::bind_with_vars(ty, bound_vars));\n             let ty = self.normalize_associated_types_in(expr.span, ty);\n+            let ty = match self.tcx.asyncness(fn_id.owner) {\n+                hir::IsAsync::Async => self.tcx.infer_ctxt().enter(|infcx| {\n+                    infcx.get_impl_future_output_ty(ty).unwrap_or_else(|| {\n+                        span_bug!(\n+                            fn_decl.output.span(),\n+                            \"failed to get output type of async function\"\n+                        )\n+                    })\n+                }),\n+                hir::IsAsync::NotAsync => ty,\n+            };\n             if self.can_coerce(found, ty) {\n                 err.multipart_suggestion(\n                     \"you might have meant to return this value\","}, {"sha": "2c3610fb24d4e952e72299ca597ea1e8b6760b4d", "filename": "src/test/ui/return/tail-expr-as-potential-return.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/347c744fe0e464737dbbdc44d148c84fc07568cb/src%2Ftest%2Fui%2Freturn%2Ftail-expr-as-potential-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/347c744fe0e464737dbbdc44d148c84fc07568cb/src%2Ftest%2Fui%2Freturn%2Ftail-expr-as-potential-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freturn%2Ftail-expr-as-potential-return.rs?ref=347c744fe0e464737dbbdc44d148c84fc07568cb", "patch": "@@ -1,10 +1,32 @@\n+// > Suggest `return`ing tail expressions that match return type\n+// >\n+// > Some newcomers are confused by the behavior of tail expressions,\n+// > interpreting that \"leaving out the `;` makes it the return value\".\n+// > To help them go in the right direction, suggest using `return` instead\n+// > when applicable.\n+// (original commit description for this test)\n+//\n+// This test was amended to also serve as a regression test for #92308, where\n+// this suggestion would not trigger with async functions.\n+//\n+// edition:2018\n+\n fn main() {\n     let _ = foo(true);\n }\n \n fn foo(x: bool) -> Result<f64, i32> {\n     if x {\n         Err(42) //~ ERROR mismatched types\n+                //| HELP you might have meant to return this value\n+    }\n+    Ok(42.0)\n+}\n+\n+async fn bar(x: bool) -> Result<f64, i32> {\n+    if x {\n+        Err(42) //~ ERROR mismatched types\n+                //| HELP you might have meant to return this value\n     }\n     Ok(42.0)\n }"}, {"sha": "dec1cbc4624ef5bece1d9262d612b21663ccb1e7", "filename": "src/test/ui/return/tail-expr-as-potential-return.stderr", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/347c744fe0e464737dbbdc44d148c84fc07568cb/src%2Ftest%2Fui%2Freturn%2Ftail-expr-as-potential-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/347c744fe0e464737dbbdc44d148c84fc07568cb/src%2Ftest%2Fui%2Freturn%2Ftail-expr-as-potential-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freturn%2Ftail-expr-as-potential-return.stderr?ref=347c744fe0e464737dbbdc44d148c84fc07568cb", "patch": "@@ -1,9 +1,10 @@\n error[E0308]: mismatched types\n-  --> $DIR/tail-expr-as-potential-return.rs:7:9\n+  --> $DIR/tail-expr-as-potential-return.rs:28:9\n    |\n LL | /     if x {\n LL | |         Err(42)\n    | |         ^^^^^^^ expected `()`, found enum `Result`\n+LL | |                 //| HELP you might have meant to return this value\n LL | |     }\n    | |_____- expected this to be `()`\n    |\n@@ -14,6 +15,23 @@ help: you might have meant to return this value\n LL |         return Err(42);\n    |         ++++++        +\n \n-error: aborting due to previous error\n+error[E0308]: mismatched types\n+  --> $DIR/tail-expr-as-potential-return.rs:20:9\n+   |\n+LL | /     if x {\n+LL | |         Err(42)\n+   | |         ^^^^^^^ expected `()`, found enum `Result`\n+LL | |                 //| HELP you might have meant to return this value\n+LL | |     }\n+   | |_____- expected this to be `()`\n+   |\n+   = note: expected unit type `()`\n+                   found enum `Result<_, {integer}>`\n+help: you might have meant to return this value\n+   |\n+LL |         return Err(42);\n+   |         ++++++        +\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}]}