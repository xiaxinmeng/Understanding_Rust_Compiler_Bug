{"sha": "1a254e4f434e0cbb9ffcb24971416cb574df4751", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhMjU0ZTRmNDM0ZTBjYmI5ZmZjYjI0OTcxNDE2Y2I1NzRkZjQ3NTE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-05T08:55:33Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-05T08:55:33Z"}, "message": "expand slice from_raw_part docs", "tree": {"sha": "d3409ea87443e199368e8dbfc8c9c01e228243c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3409ea87443e199368e8dbfc8c9c01e228243c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a254e4f434e0cbb9ffcb24971416cb574df4751", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a254e4f434e0cbb9ffcb24971416cb574df4751", "html_url": "https://github.com/rust-lang/rust/commit/1a254e4f434e0cbb9ffcb24971416cb574df4751", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a254e4f434e0cbb9ffcb24971416cb574df4751/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82dc3aa5fb6642fe0450305015ee68e0c2d1d492", "url": "https://api.github.com/repos/rust-lang/rust/commits/82dc3aa5fb6642fe0450305015ee68e0c2d1d492", "html_url": "https://github.com/rust-lang/rust/commit/82dc3aa5fb6642fe0450305015ee68e0c2d1d492"}], "stats": {"total": 64, "additions": 46, "deletions": 18}, "files": [{"sha": "407f8a6218e4fb4ce98d7c9ebbe7d530d8567e07", "filename": "src/libcore/ptr/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a254e4f434e0cbb9ffcb24971416cb574df4751/src%2Flibcore%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a254e4f434e0cbb9ffcb24971416cb574df4751/src%2Flibcore%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmod.rs?ref=1a254e4f434e0cbb9ffcb24971416cb574df4751", "patch": "@@ -18,6 +18,10 @@\n //! * A [null] pointer is *never* valid, not even for accesses of [size zero][zst].\n //! * All pointers (except for the null pointer) are valid for all operations of\n //!   [size zero][zst].\n+//! * For a pointer to be valid, it is necessary (but not always sufficient) that the pointer\n+//!   be *dereferencable*: the memory range of the given size starting at the pointer must all be\n+//!   within the bounds of a single allocated object. Note that in Rust,\n+//!   every (stack-allocated) variable is considered a separate allocated object.\n //! * All accesses performed by functions in this module are *non-atomic* in the sense\n //!   of [atomic operations] used to synchronize between threads. This means it is\n //!   undefined behavior to perform two concurrent accesses to the same location from different"}, {"sha": "a7b759f523103a19cf19d81d46bc7ac2a24d05f9", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 42, "deletions": 18, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/1a254e4f434e0cbb9ffcb24971416cb574df4751/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a254e4f434e0cbb9ffcb24971416cb574df4751/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=1a254e4f434e0cbb9ffcb24971416cb574df4751", "patch": "@@ -5272,18 +5272,24 @@ unsafe impl<'a, T> TrustedRandomAccess for RChunksExactMut<'a, T> {\n ///\n /// # Safety\n ///\n-/// This function is unsafe as there is no guarantee that the given pointer is\n-/// valid for `len` elements, nor whether the lifetime inferred is a suitable\n-/// lifetime for the returned slice.\n+/// Behavior is undefined if any of the following conditions are violated:\n ///\n-/// `data` must be non-null and aligned, even for zero-length slices. One\n-/// reason for this is that enum layout optimizations may rely on references\n-/// (including slices of any length) being aligned and non-null to distinguish\n-/// them from other data. You can obtain a pointer that is usable as `data`\n-/// for zero-length slices using [`NonNull::dangling()`].\n+/// * `data` must be [valid] for reads for `len * mem::size_of::<T>()` many bytes,\n+///   and it must be properly aligned. This means in particular:\n ///\n-/// The total size of the slice must be no larger than `isize::MAX` **bytes**\n-/// in memory. See the safety documentation of [`pointer::offset`].\n+///     * The entire memory range of this slice must be contained within a single allocated object!\n+///       Slices can never span across multiple allocated objects.\n+///     * `data` must be non-null and aligned even for zero-length slices. One\n+///       reason for this is that enum layout optimizations may rely on references\n+///       (including slices of any length) being aligned and non-null to distinguish\n+///       them from other data. You can obtain a pointer that is usable as `data`\n+///       for zero-length slices using [`NonNull::dangling()`].\n+///\n+/// * The memory referenced by the returned slice must not be mutated for the duration\n+///   of lifetime `'a`, except inside an `UnsafeCell`.\n+///\n+/// * The total size `len * mem::size_of::<T>()` of the slice must be no larger than `isize::MAX`.\n+///   See the safety documentation of [`pointer::offset`].\n ///\n /// # Caveat\n ///\n@@ -5305,35 +5311,53 @@ unsafe impl<'a, T> TrustedRandomAccess for RChunksExactMut<'a, T> {\n /// assert_eq!(slice[0], 42);\n /// ```\n ///\n+/// [valid]: ../ptr/index.html#safety\n /// [`NonNull::dangling()`]: ../../std/ptr/struct.NonNull.html#method.dangling\n /// [`pointer::offset`]: ../../std/primitive.pointer.html#method.offset\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {\n     debug_assert!(is_aligned_and_not_null(data), \"attempt to create unaligned or null slice\");\n     debug_assert!(mem::size_of::<T>().saturating_mul(len) <= isize::MAX as usize,\n-                  \"attempt to create slice covering half the address space\");\n+                  \"attempt to create slice covering at least half the address space\");\n     &*ptr::slice_from_raw_parts(data, len)\n }\n \n /// Performs the same functionality as [`from_raw_parts`], except that a\n /// mutable slice is returned.\n ///\n-/// This function is unsafe for the same reasons as [`from_raw_parts`], as well\n-/// as not being able to provide a non-aliasing guarantee of the returned\n-/// mutable slice. `data` must be non-null and aligned even for zero-length\n-/// slices as with [`from_raw_parts`]. The total size of the slice must be no\n-/// larger than `isize::MAX` **bytes** in memory.\n+/// # Safety\n+///\n+/// Behavior is undefined if any of the following conditions are violated:\n+///\n+/// * `data` must be [valid] for writes for `len * mem::size_of::<T>()` many bytes,\n+///   and it must be properly aligned. This means in particular:\n ///\n-/// See the documentation of [`from_raw_parts`] for more details.\n+///     * The entire memory range of this slice must be contained within a single allocated object!\n+///       Slices can never span across multiple allocated objects.\n+///     * `data` must be non-null and aligned even for zero-length slices. One\n+///       reason for this is that enum layout optimizations may rely on references\n+///       (including slices of any length) being aligned and non-null to distinguish\n+///       them from other data. You can obtain a pointer that is usable as `data`\n+///       for zero-length slices using [`NonNull::dangling()`].\n ///\n+/// * The memory referenced by the returned slice must not be accessed through any other pointer\n+///   (not derived from the return value) for the duration of lifetime `'a`.\n+///   Both read and write accesses are forbidden.\n+///\n+/// * The total size `len * mem::size_of::<T>()` of the slice must be no larger than `isize::MAX`.\n+///   See the safety documentation of [`pointer::offset`].\n+///\n+/// [valid]: ../ptr/index.html#safety\n+/// [`NonNull::dangling()`]: ../../std/ptr/struct.NonNull.html#method.dangling\n+/// [`pointer::offset`]: ../../std/primitive.pointer.html#method.offset\n /// [`from_raw_parts`]: ../../std/slice/fn.from_raw_parts.html\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn from_raw_parts_mut<'a, T>(data: *mut T, len: usize) -> &'a mut [T] {\n     debug_assert!(is_aligned_and_not_null(data), \"attempt to create unaligned or null slice\");\n     debug_assert!(mem::size_of::<T>().saturating_mul(len) <= isize::MAX as usize,\n-                  \"attempt to create slice covering half the address space\");\n+                  \"attempt to create slice covering at least half the address space\");\n     &mut *ptr::slice_from_raw_parts_mut(data, len)\n }\n "}]}