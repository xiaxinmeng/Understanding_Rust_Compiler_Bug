{"sha": "f8e73ede831727ed1808d245b381703c0142b9ba", "node_id": "C_kwDOAAsO6NoAKGY4ZTczZWRlODMxNzI3ZWQxODA4ZDI0NWIzODE3MDNjMDE0MmI5YmE", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-06-03T18:26:20Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-06-08T08:13:02Z"}, "message": "need_type_info: don't ICE when detected ty alias\n\nfixes #97698", "tree": {"sha": "c2819420b372e45b7c68edae469a1b7f0b0cc8f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2819420b372e45b7c68edae469a1b7f0b0cc8f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8e73ede831727ed1808d245b381703c0142b9ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8e73ede831727ed1808d245b381703c0142b9ba", "html_url": "https://github.com/rust-lang/rust/commit/f8e73ede831727ed1808d245b381703c0142b9ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8e73ede831727ed1808d245b381703c0142b9ba/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ea468e386230375229c68a09affcba23cd79487", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ea468e386230375229c68a09affcba23cd79487", "html_url": "https://github.com/rust-lang/rust/commit/2ea468e386230375229c68a09affcba23cd79487"}], "stats": {"total": 99, "additions": 93, "deletions": 6}, "files": [{"sha": "40b73eb670cf83f8b486ad5a516a43e9fc21c402", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f8e73ede831727ed1808d245b381703c0142b9ba/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8e73ede831727ed1808d245b381703c0142b9ba/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=f8e73ede831727ed1808d245b381703c0142b9ba", "patch": "@@ -2,6 +2,7 @@ use crate::infer::type_variable::TypeVariableOriginKind;\n use crate::infer::InferCtxt;\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed};\n use rustc_hir as hir;\n+use rustc_hir::def::Res;\n use rustc_hir::def::{CtorOf, DefKind, Namespace};\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{self, Visitor};\n@@ -853,12 +854,20 @@ impl<'a, 'tcx> FindInferSourceVisitor<'a, 'tcx> {\n                             hir::TyKind::Path(hir::QPath::Resolved(_self_ty, path)),\n                         ) => {\n                             if tcx.res_generics_def_id(path.res) != Some(def.did()) {\n-                                bug!(\n-                                    \"unexpected path: def={:?} substs={:?} path={:?}\",\n-                                    def,\n-                                    substs,\n-                                    path,\n-                                );\n+                                match path.res {\n+                                    Res::Def(DefKind::TyAlias, _) => {\n+                                        // FIXME: Ideally we should support this. For that\n+                                        // we have to map back from the self type to the\n+                                        // type alias though. That's difficult.\n+                                        //\n+                                        // See the `need_type_info/type-alias.rs` test for\n+                                        // some examples.\n+                                    }\n+                                    _ => warn!(\n+                                        \"unexpected path: def={:?} substs={:?} path={:?}\",\n+                                        def, substs, path,\n+                                    ),\n+                                }\n                             } else {\n                                 return Box::new(\n                                     self.resolved_path_inferred_subst_iter(path, substs)"}, {"sha": "0ed02ddc5f390029072bb576415060634d87f60c", "filename": "src/test/ui/inference/need_type_info/type-alias-indirect.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f8e73ede831727ed1808d245b381703c0142b9ba/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Ftype-alias-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8e73ede831727ed1808d245b381703c0142b9ba/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Ftype-alias-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Ftype-alias-indirect.rs?ref=f8e73ede831727ed1808d245b381703c0142b9ba", "patch": "@@ -0,0 +1,18 @@\n+// An addition to the `type-alias.rs` test,\n+// see the FIXME in that file for why this test\n+// exists.\n+//\n+// If there is none, feel free to remove this test\n+// again.\n+struct Ty<T>(T);\n+impl<T> Ty<T> {\n+    fn new() {}\n+}\n+\n+type IndirectAlias<T> = Ty<Box<T>>;\n+fn indirect_alias() {\n+    IndirectAlias::new();\n+    //~^ ERROR type annotations needed\n+}\n+\n+fn main() {}"}, {"sha": "6161690df50503aa976d0ba9f74f1d8f03ce5cc1", "filename": "src/test/ui/inference/need_type_info/type-alias-indirect.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f8e73ede831727ed1808d245b381703c0142b9ba/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Ftype-alias-indirect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8e73ede831727ed1808d245b381703c0142b9ba/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Ftype-alias-indirect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Ftype-alias-indirect.stderr?ref=f8e73ede831727ed1808d245b381703c0142b9ba", "patch": "@@ -0,0 +1,9 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/type-alias-indirect.rs:14:5\n+   |\n+LL |     IndirectAlias::new();\n+   |     ^^^^^^^^^^^^^ cannot infer type for type parameter `T` declared on the type alias `IndirectAlias`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "f921b046b6cac524f36cee427b81e2c56f0ada09", "filename": "src/test/ui/inference/need_type_info/type-alias.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f8e73ede831727ed1808d245b381703c0142b9ba/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Ftype-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8e73ede831727ed1808d245b381703c0142b9ba/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Ftype-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Ftype-alias.rs?ref=f8e73ede831727ed1808d245b381703c0142b9ba", "patch": "@@ -0,0 +1,36 @@\n+// Test the inference errors in case the relevant path\n+// uses a type alias.\n+//\n+// Regression test for #97698.\n+struct Ty<T>(T);\n+impl<T> Ty<T> {\n+    fn new() {}\n+}\n+\n+type DirectAlias<T> = Ty<T>;\n+fn direct_alias() {\n+    DirectAlias::new()\n+    //~^ ERROR type annotations needed\n+}\n+\n+type IndirectAlias<T> = Ty<Box<T>>;\n+fn indirect_alias() {\n+    IndirectAlias::new();\n+    // FIXME: This should also emit an error.\n+    //\n+    // Added it separately as `type-alias-indirect.rs`\n+    // where it does error.\n+}\n+\n+struct TyDefault<T, U = u32>(T, U);\n+impl<T> TyDefault<T> {\n+    fn new() {}\n+}\n+\n+type DirectButWithDefaultAlias<T> = TyDefault<T>;\n+fn direct_but_with_default_alias() {\n+    DirectButWithDefaultAlias::new();\n+    //~^ ERROR type annotations needed\n+}\n+\n+fn main() {}"}, {"sha": "a33f49baf549f4506e793bd31a00000b33dbd51e", "filename": "src/test/ui/inference/need_type_info/type-alias.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f8e73ede831727ed1808d245b381703c0142b9ba/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Ftype-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8e73ede831727ed1808d245b381703c0142b9ba/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Ftype-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Ftype-alias.stderr?ref=f8e73ede831727ed1808d245b381703c0142b9ba", "patch": "@@ -0,0 +1,15 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/type-alias.rs:12:5\n+   |\n+LL |     DirectAlias::new()\n+   |     ^^^^^^^^^^^^^^^^ cannot infer type for type parameter `T`\n+\n+error[E0282]: type annotations needed\n+  --> $DIR/type-alias.rs:32:5\n+   |\n+LL |     DirectButWithDefaultAlias::new();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type for type parameter `T`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0282`."}]}