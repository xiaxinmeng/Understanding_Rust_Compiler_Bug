{"sha": "bee2d3748ef472e416b4a690af89543ed0edd302", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlZTJkMzc0OGVmNDcyZTQxNmI0YTY5MGFmODk1NDNlZDBlZGQzMDI=", "commit": {"author": {"name": "Andreas Molzer", "email": "andreas.molzer@gmx.de", "date": "2019-08-30T02:17:18Z"}, "committer": {"name": "Andreas Molzer", "email": "andreas.molzer@gmx.de", "date": "2019-08-30T02:17:18Z"}, "message": "Move relocation range copies into allocation", "tree": {"sha": "a846e4a842df99f7e75019bdcd9c4a3fde1c7950", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a846e4a842df99f7e75019bdcd9c4a3fde1c7950"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bee2d3748ef472e416b4a690af89543ed0edd302", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bee2d3748ef472e416b4a690af89543ed0edd302", "html_url": "https://github.com/rust-lang/rust/commit/bee2d3748ef472e416b4a690af89543ed0edd302", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bee2d3748ef472e416b4a690af89543ed0edd302/comments", "author": {"login": "HeroicKatora", "id": 5550310, "node_id": "MDQ6VXNlcjU1NTAzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/5550310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HeroicKatora", "html_url": "https://github.com/HeroicKatora", "followers_url": "https://api.github.com/users/HeroicKatora/followers", "following_url": "https://api.github.com/users/HeroicKatora/following{/other_user}", "gists_url": "https://api.github.com/users/HeroicKatora/gists{/gist_id}", "starred_url": "https://api.github.com/users/HeroicKatora/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HeroicKatora/subscriptions", "organizations_url": "https://api.github.com/users/HeroicKatora/orgs", "repos_url": "https://api.github.com/users/HeroicKatora/repos", "events_url": "https://api.github.com/users/HeroicKatora/events{/privacy}", "received_events_url": "https://api.github.com/users/HeroicKatora/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HeroicKatora", "id": 5550310, "node_id": "MDQ6VXNlcjU1NTAzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/5550310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HeroicKatora", "html_url": "https://github.com/HeroicKatora", "followers_url": "https://api.github.com/users/HeroicKatora/followers", "following_url": "https://api.github.com/users/HeroicKatora/following{/other_user}", "gists_url": "https://api.github.com/users/HeroicKatora/gists{/gist_id}", "starred_url": "https://api.github.com/users/HeroicKatora/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HeroicKatora/subscriptions", "organizations_url": "https://api.github.com/users/HeroicKatora/orgs", "repos_url": "https://api.github.com/users/HeroicKatora/repos", "events_url": "https://api.github.com/users/HeroicKatora/events{/privacy}", "received_events_url": "https://api.github.com/users/HeroicKatora/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fe31fefd80cd1c4300b03b1e55c63de12134eed", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fe31fefd80cd1c4300b03b1e55c63de12134eed", "html_url": "https://github.com/rust-lang/rust/commit/6fe31fefd80cd1c4300b03b1e55c63de12134eed"}], "stats": {"total": 80, "additions": 53, "deletions": 27}, "files": [{"sha": "8f47bf9d0fd5aa9b8a26593889217b82507bab0c", "filename": "src/librustc/mir/interpret/allocation.rs", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/bee2d3748ef472e416b4a690af89543ed0edd302/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bee2d3748ef472e416b4a690af89543ed0edd302/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs?ref=bee2d3748ef472e416b4a690af89543ed0edd302", "patch": "@@ -693,6 +693,56 @@ impl<Tag> DerefMut for Relocations<Tag> {\n     }\n }\n \n+/// A partial, owned list of relocations to transfer into another allocation.\n+pub struct AllocationRelocations<Tag> {\n+    relative_relocations: Vec<(Size, (Tag, AllocId))>,\n+}\n+\n+impl<Tag: Copy, Extra> Allocation<Tag, Extra> {\n+    pub fn prepare_relocation_copy(\n+        &self,\n+        cx: &impl HasDataLayout,\n+        src: Pointer<Tag>,\n+        size: Size,\n+        dest: Pointer<Tag>,\n+        length: u64,\n+    ) -> AllocationRelocations<Tag> {\n+        let relocations = self.get_relocations(cx, src, size);\n+        if relocations.is_empty() {\n+            return AllocationRelocations { relative_relocations: Vec::new() };\n+        }\n+\n+        let mut new_relocations = Vec::with_capacity(relocations.len() * (length as usize));\n+\n+        for i in 0..length {\n+            new_relocations.extend(\n+                relocations\n+                .iter()\n+                .map(|&(offset, reloc)| {\n+                    // compute offset for current repetition\n+                    let dest_offset = dest.offset + (i * size);\n+                    (\n+                        // shift offsets from source allocation to destination allocation\n+                        offset + dest_offset - src.offset,\n+                        reloc,\n+                        )\n+                })\n+                );\n+        }\n+\n+        AllocationRelocations {\n+            relative_relocations: new_relocations,\n+        }\n+    }\n+\n+    pub fn mark_relocation_range(\n+        &mut self,\n+        relocations: AllocationRelocations<Tag>,\n+    ) {\n+        self.relocations.insert_presorted(relocations.relative_relocations);\n+    }\n+}\n+\n ////////////////////////////////////////////////////////////////////////////////\n // Undefined byte tracking\n ////////////////////////////////////////////////////////////////////////////////"}, {"sha": "6e0d77235fe2b39fa90a6b3ed7dd3a8467acd3ca", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 3, "deletions": 27, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/bee2d3748ef472e416b4a690af89543ed0edd302/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bee2d3748ef472e416b4a690af89543ed0edd302/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=bee2d3748ef472e416b4a690af89543ed0edd302", "patch": "@@ -808,32 +808,8 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         // since we don't want to keep any relocations at the target.\n         // (`get_bytes_with_undef_and_ptr` below checks that there are no\n         // relocations overlapping the edges; those would not be handled correctly).\n-        let relocations = {\n-            let relocations = self.get(src.alloc_id)?.get_relocations(self, src, size);\n-            if relocations.is_empty() {\n-                // nothing to copy, ignore even the `length` loop\n-                Vec::new()\n-            } else {\n-                let mut new_relocations = Vec::with_capacity(relocations.len() * (length as usize));\n-                for i in 0..length {\n-                    new_relocations.extend(\n-                        relocations\n-                        .iter()\n-                        .map(|&(offset, reloc)| {\n-                            // compute offset for current repetition\n-                            let dest_offset = dest.offset + (i * size);\n-                            (\n-                                // shift offsets from source allocation to destination allocation\n-                                offset + dest_offset - src.offset,\n-                                reloc,\n-                            )\n-                        })\n-                    );\n-                }\n-\n-                new_relocations\n-            }\n-        };\n+        let relocations = self.get(src.alloc_id)?\n+            .prepare_relocation_copy(self, src, size, dest, length);\n \n         let tcx = self.tcx.tcx;\n \n@@ -880,7 +856,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         // copy definedness to the destination\n         self.copy_undef_mask(src, dest, size, length)?;\n         // copy the relocations to the destination\n-        self.get_mut(dest.alloc_id)?.relocations.insert_presorted(relocations);\n+        self.get_mut(dest.alloc_id)?.mark_relocation_range(relocations);\n \n         Ok(())\n     }"}]}