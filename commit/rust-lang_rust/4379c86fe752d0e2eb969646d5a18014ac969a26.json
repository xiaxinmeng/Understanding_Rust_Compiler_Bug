{"sha": "4379c86fe752d0e2eb969646d5a18014ac969a26", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzNzljODZmZTc1MmQwZTJlYjk2OTY0NmQ1YTE4MDE0YWM5NjlhMjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-30T11:48:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-30T11:48:10Z"}, "message": "Auto merge of #49403 - oli-obk:try2, r=eddyb\n\nTrim discriminants to their final type size\n\nr? @eddyb\n\nfixes  #49181", "tree": {"sha": "6729641d89233b55bee1da33d127cc3c6ef8fe1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6729641d89233b55bee1da33d127cc3c6ef8fe1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4379c86fe752d0e2eb969646d5a18014ac969a26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4379c86fe752d0e2eb969646d5a18014ac969a26", "html_url": "https://github.com/rust-lang/rust/commit/4379c86fe752d0e2eb969646d5a18014ac969a26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4379c86fe752d0e2eb969646d5a18014ac969a26/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "051050dab9b39d29c8a5978bc79c7895dfa1118b", "url": "https://api.github.com/repos/rust-lang/rust/commits/051050dab9b39d29c8a5978bc79c7895dfa1118b", "html_url": "https://github.com/rust-lang/rust/commit/051050dab9b39d29c8a5978bc79c7895dfa1118b"}, {"sha": "422efd793b0d65bd1d1725937a853244af8124c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/422efd793b0d65bd1d1725937a853244af8124c8", "html_url": "https://github.com/rust-lang/rust/commit/422efd793b0d65bd1d1725937a853244af8124c8"}], "stats": {"total": 44, "additions": 38, "deletions": 6}, "files": [{"sha": "798d635318180937696cddae0546b3e8e2ef7461", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 31, "deletions": 6, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/4379c86fe752d0e2eb969646d5a18014ac969a26/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4379c86fe752d0e2eb969646d5a18014ac969a26/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=4379c86fe752d0e2eb969646d5a18014ac969a26", "patch": "@@ -851,13 +851,38 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n             ty::TyAdt(adt_def, substs) if adt_def.is_enum() => {\n                 match cv.val {\n                     ConstVal::Value(val) => {\n-                        let discr = const_discr(\n+                        let discr_val = const_discr(\n                             self.tcx, self.param_env, instance, val, cv.ty\n-                        ).unwrap();\n-                        let variant_index = adt_def\n-                            .discriminants(self.tcx)\n-                            .position(|var| var.val == discr)\n-                            .unwrap();\n+                        ).expect(\"const_discr failed\");\n+                        let layout = self\n+                            .tcx\n+                            .layout_of(self.param_env.and(cv.ty))\n+                            .expect(\"layout of enum not available\");\n+                        let variant_index = match layout.variants {\n+                            ty::layout::Variants::Single { index } => index,\n+                            ty::layout::Variants::Tagged { ref discr, .. } => {\n+                                // raw discriminants for enums are isize or bigger during\n+                                // their computation, but later shrunk to the smallest possible\n+                                // representation\n+                                let size = discr.value.size(self.tcx).bits();\n+                                let amt = 128 - size;\n+                                adt_def\n+                                    .discriminants(self.tcx)\n+                                    .position(|var| ((var.val << amt) >> amt) == discr_val)\n+                                    .unwrap_or_else(|| {\n+                                        bug!(\"discriminant {} not found in {:#?}\",\n+                                            discr_val,\n+                                            adt_def\n+                                                .discriminants(self.tcx)\n+                                                .collect::<Vec<_>>(),\n+                                            );\n+                                    })\n+                            }\n+                            ty::layout::Variants::NicheFilling { .. } => {\n+                                assert_eq!(discr_val as usize as u128, discr_val);\n+                                discr_val as usize\n+                            },\n+                        };\n                         let subpatterns = adt_subpatterns(\n                             adt_def.variants[variant_index].fields.len(),\n                             Some(variant_index),"}, {"sha": "ca6ef2e42777bec4d5f0f07b272d24b8a3c09cb5", "filename": "src/test/run-pass/match-arm-statics.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4379c86fe752d0e2eb969646d5a18014ac969a26/src%2Ftest%2Frun-pass%2Fmatch-arm-statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4379c86fe752d0e2eb969646d5a18014ac969a26/src%2Ftest%2Frun-pass%2Fmatch-arm-statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-arm-statics.rs?ref=4379c86fe752d0e2eb969646d5a18014ac969a26", "patch": "@@ -94,6 +94,13 @@ fn issue_14576() {\n     const F : C = C::D;\n \n     assert_eq!(match C::D { F => 1, _ => 2, }, 1);\n+\n+    // test gaps\n+    #[derive(PartialEq, Eq)]\n+    enum G { H = 3, I = 5 }\n+    const K : G = G::I;\n+\n+    assert_eq!(match G::I { K => 1, _ => 2, }, 1);\n }\n \n fn issue_13731() {"}]}