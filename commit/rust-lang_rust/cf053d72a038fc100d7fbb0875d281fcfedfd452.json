{"sha": "cf053d72a038fc100d7fbb0875d281fcfedfd452", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmMDUzZDcyYTAzOGZjMTAwZDdmYmIwODc1ZDI4MWZjZmVkZmQ0NTI=", "commit": {"author": {"name": "tynopex", "email": "tynopex@users.noreply.github.com", "date": "2015-04-29T21:00:10Z"}, "committer": {"name": "tynopex", "email": "tynopex@users.noreply.github.com", "date": "2015-04-29T21:00:10Z"}, "message": "std: Fixup docs for std::process", "tree": {"sha": "4b93243141c66a4b756186c2369fd0dcf051b042", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b93243141c66a4b756186c2369fd0dcf051b042"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf053d72a038fc100d7fbb0875d281fcfedfd452", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf053d72a038fc100d7fbb0875d281fcfedfd452", "html_url": "https://github.com/rust-lang/rust/commit/cf053d72a038fc100d7fbb0875d281fcfedfd452", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf053d72a038fc100d7fbb0875d281fcfedfd452/comments", "author": {"login": "tynopex", "id": 7083688, "node_id": "MDQ6VXNlcjcwODM2ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/7083688?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tynopex", "html_url": "https://github.com/tynopex", "followers_url": "https://api.github.com/users/tynopex/followers", "following_url": "https://api.github.com/users/tynopex/following{/other_user}", "gists_url": "https://api.github.com/users/tynopex/gists{/gist_id}", "starred_url": "https://api.github.com/users/tynopex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tynopex/subscriptions", "organizations_url": "https://api.github.com/users/tynopex/orgs", "repos_url": "https://api.github.com/users/tynopex/repos", "events_url": "https://api.github.com/users/tynopex/events{/privacy}", "received_events_url": "https://api.github.com/users/tynopex/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tynopex", "id": 7083688, "node_id": "MDQ6VXNlcjcwODM2ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/7083688?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tynopex", "html_url": "https://github.com/tynopex", "followers_url": "https://api.github.com/users/tynopex/followers", "following_url": "https://api.github.com/users/tynopex/following{/other_user}", "gists_url": "https://api.github.com/users/tynopex/gists{/gist_id}", "starred_url": "https://api.github.com/users/tynopex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tynopex/subscriptions", "organizations_url": "https://api.github.com/users/tynopex/orgs", "repos_url": "https://api.github.com/users/tynopex/repos", "events_url": "https://api.github.com/users/tynopex/events{/privacy}", "received_events_url": "https://api.github.com/users/tynopex/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "551a74dddd84cf01440ee84148ebd18bc68bd7c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/551a74dddd84cf01440ee84148ebd18bc68bd7c8", "html_url": "https://github.com/rust-lang/rust/commit/551a74dddd84cf01440ee84148ebd18bc68bd7c8"}], "stats": {"total": 29, "additions": 16, "deletions": 13}, "files": [{"sha": "55ea3a5a83642a6684376fe4dda39afae41ffbae", "filename": "src/libstd/process.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/cf053d72a038fc100d7fbb0875d281fcfedfd452/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf053d72a038fc100d7fbb0875d281fcfedfd452/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=cf053d72a038fc100d7fbb0875d281fcfedfd452", "patch": "@@ -40,11 +40,15 @@ use thread;\n /// ```should_panic\n /// use std::process::Command;\n ///\n-/// let output = Command::new(\"/bin/cat\").arg(\"file.txt\").output().unwrap_or_else(|e| {\n-///     panic!(\"failed to execute child: {}\", e)\n-/// });\n-/// let contents = output.stdout;\n-/// assert!(output.status.success());\n+/// let mut child = Command::new(\"/bin/cat\")\n+///     .arg(\"file.txt\")\n+///     .spawn()\n+///     .unwrap_or_else(|e| { panic!(\"failed to execute child: {}\", e) });\n+///\n+/// let ecode = child.wait()\n+///     .unwrap_or_else(|e| { panic!(\"failed to wait on child: {}\", e) });\n+///\n+/// assert!(ecode.success());\n /// ```\n #[stable(feature = \"process\", since = \"1.0.0\")]\n pub struct Child {\n@@ -118,9 +122,11 @@ impl Read for ChildStderr {\n /// ```\n /// use std::process::Command;\n ///\n-/// let output = Command::new(\"sh\").arg(\"-c\").arg(\"echo hello\").output().unwrap_or_else(|e| {\n-///   panic!(\"failed to execute process: {}\", e)\n-/// });\n+/// let output = Command::new(\"sh\")\n+///     .arg(\"-c\")\n+///     .arg(\"echo hello\")\n+///     .output()\n+///     .unwrap_or_else(|e| { panic!(\"failed to execute process: {}\", e) });\n /// let hello = output.stdout;\n /// ```\n #[stable(feature = \"process\", since = \"1.0.0\")]\n@@ -140,7 +146,7 @@ impl Command {\n     /// * No arguments to the program\n     /// * Inherit the current process's environment\n     /// * Inherit the current process's working directory\n-    /// * Inherit stdin/stdout/stderr for `run` or `status`, but create pipes for `output`\n+    /// * Inherit stdin/stdout/stderr for `spawn` or `status`, but create pipes for `output`\n     ///\n     /// Builder methods are provided to change these defaults and\n     /// otherwise configure the process.\n@@ -202,23 +208,20 @@ impl Command {\n     }\n \n     /// Configuration for the child process's stdin handle (file descriptor 0).\n-    /// Defaults to `CreatePipe(true, false)` so the input can be written to.\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n     pub fn stdin(&mut self, cfg: Stdio) -> &mut Command {\n         self.stdin = Some(cfg.0);\n         self\n     }\n \n     /// Configuration for the child process's stdout handle (file descriptor 1).\n-    /// Defaults to `CreatePipe(false, true)` so the output can be collected.\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n     pub fn stdout(&mut self, cfg: Stdio) -> &mut Command {\n         self.stdout = Some(cfg.0);\n         self\n     }\n \n     /// Configuration for the child process's stderr handle (file descriptor 2).\n-    /// Defaults to `CreatePipe(false, true)` so the output can be collected.\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n     pub fn stderr(&mut self, cfg: Stdio) -> &mut Command {\n         self.stderr = Some(cfg.0);\n@@ -356,7 +359,7 @@ pub struct Output {\n     pub stderr: Vec<u8>,\n }\n \n-/// Describes what to do with a standard io stream for a child process.\n+/// Describes what to do with a standard I/O stream for a child process.\n #[stable(feature = \"process\", since = \"1.0.0\")]\n pub struct Stdio(StdioImp);\n "}]}