{"sha": "4d247ad7d3d2a9f72cd60e281f39b5d85bd6a463", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkMjQ3YWQ3ZDNkMmE5ZjcyY2Q2MGUyODFmMzliNWQ4NWJkNmE0NjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-18T16:10:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-18T16:10:00Z"}, "message": "Auto merge of #77306 - lcnr:inline-ok, r=eddyb\n\nnormalize substs while inlining\n\nfixes #68347 or more precisely, this fixes the same ICE in rust analyser as veloren is pinned to a specific nightly\nand had an error with the current one.\n\nI didn't look into creating an MVCE here as that seems fairly annoying, will spend a few minutes doing so rn. (failed)\n\nr? `@eddyb` cc `@bjorn3`", "tree": {"sha": "9f0630d41ba5e14274e052921b2ae339c690528e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f0630d41ba5e14274e052921b2ae339c690528e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d247ad7d3d2a9f72cd60e281f39b5d85bd6a463", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d247ad7d3d2a9f72cd60e281f39b5d85bd6a463", "html_url": "https://github.com/rust-lang/rust/commit/4d247ad7d3d2a9f72cd60e281f39b5d85bd6a463", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d247ad7d3d2a9f72cd60e281f39b5d85bd6a463/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "834821e3b666f77bb7caf1ed88ed662c395fbc11", "url": "https://api.github.com/repos/rust-lang/rust/commits/834821e3b666f77bb7caf1ed88ed662c395fbc11", "html_url": "https://github.com/rust-lang/rust/commit/834821e3b666f77bb7caf1ed88ed662c395fbc11"}, {"sha": "ac893b8a02788eec6f6fad0cc89de0177b0c0a50", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac893b8a02788eec6f6fad0cc89de0177b0c0a50", "html_url": "https://github.com/rust-lang/rust/commit/ac893b8a02788eec6f6fad0cc89de0177b0c0a50"}], "stats": {"total": 98, "additions": 91, "deletions": 7}, "files": [{"sha": "796ad6c9c2978d9487deab33e95bb1ca8d31779d", "filename": "compiler/rustc_mir/src/transform/inline.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4d247ad7d3d2a9f72cd60e281f39b5d85bd6a463/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d247ad7d3d2a9f72cd60e281f39b5d85bd6a463/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs?ref=4d247ad7d3d2a9f72cd60e281f39b5d85bd6a463", "patch": "@@ -201,9 +201,13 @@ impl Inliner<'tcx> {\n         let terminator = bb_data.terminator();\n         if let TerminatorKind::Call { func: ref op, .. } = terminator.kind {\n             if let ty::FnDef(callee_def_id, substs) = *op.ty(caller_body, self.tcx).kind() {\n-                let instance = Instance::resolve(self.tcx, self.param_env, callee_def_id, substs)\n-                    .ok()\n-                    .flatten()?;\n+                // To resolve an instance its substs have to be fully normalized, so\n+                // we do this here.\n+                let normalized_substs = self.tcx.normalize_erasing_regions(self.param_env, substs);\n+                let instance =\n+                    Instance::resolve(self.tcx, self.param_env, callee_def_id, normalized_substs)\n+                        .ok()\n+                        .flatten()?;\n \n                 if let InstanceDef::Virtual(..) = instance.def {\n                     return None;"}, {"sha": "05e6c4804ff6526ff4d66bbffc2c6fb460718e40", "filename": "compiler/rustc_trait_selection/src/traits/codegen/mod.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4d247ad7d3d2a9f72cd60e281f39b5d85bd6a463/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d247ad7d3d2a9f72cd60e281f39b5d85bd6a463/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen%2Fmod.rs?ref=4d247ad7d3d2a9f72cd60e281f39b5d85bd6a463", "patch": "@@ -17,14 +17,17 @@ use rustc_middle::ty::{self, TyCtxt};\n /// (necessarily) resolve all nested obligations on the impl. Note\n /// that type check should guarantee to us that all nested\n /// obligations *could be* resolved if we wanted to.\n+///\n /// Assumes that this is run after the entire crate has been successfully type-checked.\n+/// This also expects that `trait_ref` is fully normalized.\n pub fn codegen_fulfill_obligation<'tcx>(\n-    ty: TyCtxt<'tcx>,\n+    tcx: TyCtxt<'tcx>,\n     (param_env, trait_ref): (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>),\n ) -> Result<ImplSource<'tcx, ()>, ErrorReported> {\n     // Remove any references to regions; this helps improve caching.\n-    let trait_ref = ty.erase_regions(&trait_ref);\n-\n+    let trait_ref = tcx.erase_regions(&trait_ref);\n+    // We expect the input to be fully normalized.\n+    debug_assert_eq!(trait_ref, tcx.normalize_erasing_regions(param_env, trait_ref));\n     debug!(\n         \"codegen_fulfill_obligation(trait_ref={:?}, def_id={:?})\",\n         (param_env, trait_ref),\n@@ -33,7 +36,7 @@ pub fn codegen_fulfill_obligation<'tcx>(\n \n     // Do the initial selection for the obligation. This yields the\n     // shallow result we are looking for -- that is, what specific impl.\n-    ty.infer_ctxt().enter(|infcx| {\n+    tcx.infer_ctxt().enter(|infcx| {\n         let mut selcx = SelectionContext::new(&infcx);\n \n         let obligation_cause = ObligationCause::dummy();"}, {"sha": "88b80bc3333c1ba40af590a310522f877b9db0c8", "filename": "src/test/ui/mir/mir-inlining/ice-issue-68347.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4d247ad7d3d2a9f72cd60e281f39b5d85bd6a463/src%2Ftest%2Fui%2Fmir%2Fmir-inlining%2Fice-issue-68347.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d247ad7d3d2a9f72cd60e281f39b5d85bd6a463/src%2Ftest%2Fui%2Fmir%2Fmir-inlining%2Fice-issue-68347.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir-inlining%2Fice-issue-68347.rs?ref=4d247ad7d3d2a9f72cd60e281f39b5d85bd6a463", "patch": "@@ -0,0 +1,28 @@\n+// run-pass\n+// compile-flags:-Zmir-opt-level=2\n+pub fn main() {\n+    let _x: fn() = handle_debug_column;\n+}\n+\n+fn handle_debug_column() {\n+    let sampler = sample_columns();\n+\n+    let foo = || {\n+        sampler.get(17);\n+    };\n+    foo();\n+}\n+\n+fn sample_columns() -> impl Sampler {\n+    ColumnGen {}\n+}\n+\n+struct ColumnGen {}\n+\n+trait Sampler {\n+    fn get(&self, index: i32);\n+}\n+\n+impl Sampler for ColumnGen {\n+    fn get(&self, _index: i32) {}\n+}"}, {"sha": "4d083bf23215599a16ecf1c8f16cabcf6a678488", "filename": "src/test/ui/mir/mir-inlining/ice-issue-77306-1.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4d247ad7d3d2a9f72cd60e281f39b5d85bd6a463/src%2Ftest%2Fui%2Fmir%2Fmir-inlining%2Fice-issue-77306-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d247ad7d3d2a9f72cd60e281f39b5d85bd6a463/src%2Ftest%2Fui%2Fmir%2Fmir-inlining%2Fice-issue-77306-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir-inlining%2Fice-issue-77306-1.rs?ref=4d247ad7d3d2a9f72cd60e281f39b5d85bd6a463", "patch": "@@ -0,0 +1,17 @@\n+// run-pass\n+// compile-flags:-Zmir-opt-level=2\n+\n+// Previously ICEd because we did not normalize during inlining,\n+// see https://github.com/rust-lang/rust/pull/77306 for more discussion.\n+\n+pub fn write() {\n+    create()()\n+}\n+\n+pub fn create() -> impl FnOnce() {\n+   || ()\n+}\n+\n+fn main() {\n+    write();\n+}"}, {"sha": "a346d450586bb706a871e8c45dfb4ebba6622df2", "filename": "src/test/ui/mir/mir-inlining/ice-issue-77306-2.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4d247ad7d3d2a9f72cd60e281f39b5d85bd6a463/src%2Ftest%2Fui%2Fmir%2Fmir-inlining%2Fice-issue-77306-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d247ad7d3d2a9f72cd60e281f39b5d85bd6a463/src%2Ftest%2Fui%2Fmir%2Fmir-inlining%2Fice-issue-77306-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir-inlining%2Fice-issue-77306-2.rs?ref=4d247ad7d3d2a9f72cd60e281f39b5d85bd6a463", "patch": "@@ -0,0 +1,32 @@\n+// run-pass\n+// compile-flags:-Zmir-opt-level=2\n+\n+struct Cursor {}\n+struct TokenTree {}\n+\n+impl Iterator for Cursor {\n+    type Item = TokenTree;\n+\n+    fn next(&mut self) -> Option<TokenTree> {\n+        None\n+    }\n+}\n+\n+fn tokenstream_probably_equal_for_proc_macro() {\n+    fn break_tokens(_tree: TokenTree) -> impl Iterator<Item = TokenTree> {\n+        let token_trees: Vec<TokenTree> = vec![];\n+        token_trees.into_iter()\n+    }\n+\n+    let c1 = Cursor {};\n+    let c2 = Cursor {};\n+\n+    let mut t1 = c1.flat_map(break_tokens);\n+    let mut t2 = c2.flat_map(break_tokens);\n+\n+    for (_t1, _t2) in t1.by_ref().zip(t2.by_ref()) {}\n+}\n+\n+fn main() {\n+    tokenstream_probably_equal_for_proc_macro();\n+}"}]}