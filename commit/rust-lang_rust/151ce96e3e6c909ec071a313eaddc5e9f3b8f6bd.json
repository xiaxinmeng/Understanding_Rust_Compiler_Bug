{"sha": "151ce96e3e6c909ec071a313eaddc5e9f3b8f6bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1MWNlOTZlM2U2YzkwOWVjMDcxYTMxM2VhZGRjNWU5ZjNiOGY2YmQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-30T07:32:51Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-30T07:32:51Z"}, "message": "syntax: reduce repetition in fn parsing.", "tree": {"sha": "494bfe4d57d98de93686812cfeb88eb949e13a3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/494bfe4d57d98de93686812cfeb88eb949e13a3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/151ce96e3e6c909ec071a313eaddc5e9f3b8f6bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/151ce96e3e6c909ec071a313eaddc5e9f3b8f6bd", "html_url": "https://github.com/rust-lang/rust/commit/151ce96e3e6c909ec071a313eaddc5e9f3b8f6bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/151ce96e3e6c909ec071a313eaddc5e9f3b8f6bd/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bea404f292f0ec60a990de28433b9eaa1dfecb4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/bea404f292f0ec60a990de28433b9eaa1dfecb4c", "html_url": "https://github.com/rust-lang/rust/commit/bea404f292f0ec60a990de28433b9eaa1dfecb4c"}], "stats": {"total": 47, "additions": 21, "deletions": 26}, "files": [{"sha": "e8ca264f1c5ff5253ecec200dd5283e5b41f3dbf", "filename": "src/libsyntax/parse/parser/item.rs", "status": "modified", "additions": 21, "deletions": 26, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/151ce96e3e6c909ec071a313eaddc5e9f3b8f6bd/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/151ce96e3e6c909ec071a313eaddc5e9f3b8f6bd/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs?ref=151ce96e3e6c909ec071a313eaddc5e9f3b8f6bd", "patch": "@@ -122,15 +122,12 @@ impl<'a> Parser<'a> {\n             if self.eat_keyword(kw::Fn) {\n                 // EXTERN FUNCTION ITEM\n                 let fn_span = self.prev_span;\n-                let (ident, item_, extra_attrs) = self.parse_item_fn(FnHeader {\n+                return self.parse_item_fn(lo, visibility, attrs, FnHeader {\n                     unsafety: Unsafety::Normal,\n                     asyncness: respan(fn_span, IsAsync::NotAsync),\n                     constness: respan(fn_span, Constness::NotConst),\n                     abi: opt_abi.unwrap_or(Abi::C),\n-                })?;\n-                let span = lo.to(self.prev_span);\n-                let attrs = maybe_append(attrs, extra_attrs);\n-                return Ok(Some(self.mk_item(span, ident, item_, visibility, attrs)));\n+                });\n             } else if self.check(&token::OpenDelim(token::Brace)) {\n                 return Ok(Some(\n                     self.parse_item_foreign_mod(lo, opt_abi, visibility, attrs, extern_sp)?,\n@@ -157,15 +154,12 @@ impl<'a> Parser<'a> {\n                 // CONST FUNCTION ITEM\n                 let unsafety = self.parse_unsafety();\n                 self.bump();\n-                let (ident, item_, extra_attrs) = self.parse_item_fn(FnHeader {\n+                return self.parse_item_fn(lo, visibility, attrs, FnHeader {\n                     unsafety,\n                     asyncness: respan(const_span, IsAsync::NotAsync),\n                     constness: respan(const_span, Constness::Const),\n                     abi: Abi::Rust,\n-                })?;\n-                let span = lo.to(self.prev_span);\n-                let attrs = maybe_append(attrs, extra_attrs);\n-                return Ok(Some(self.mk_item(span, ident, item_, visibility, attrs)));\n+                });\n             }\n \n             // CONST ITEM\n@@ -202,16 +196,14 @@ impl<'a> Parser<'a> {\n                     closure_id: DUMMY_NODE_ID,\n                     return_impl_trait_id: DUMMY_NODE_ID,\n                 });\n-                let (ident, item_, extra_attrs) = self.parse_item_fn(FnHeader {\n+                let item = self.parse_item_fn(lo, visibility, attrs, FnHeader {\n                     unsafety,\n                     asyncness,\n                     constness: respan(fn_span, Constness::NotConst),\n                     abi: Abi::Rust,\n                 })?;\n                 self.ban_async_in_2015(async_span);\n-                let span = lo.to(self.prev_span);\n-                let attrs = maybe_append(attrs, extra_attrs);\n-                return Ok(Some(self.mk_item(span, ident, item_, visibility, attrs)));\n+                return Ok(item);\n             }\n         }\n         if self.check_keyword(kw::Unsafe) &&\n@@ -249,15 +241,12 @@ impl<'a> Parser<'a> {\n             // FUNCTION ITEM\n             self.bump();\n             let fn_span = self.prev_span;\n-            let (ident, item_, extra_attrs) = self.parse_item_fn(FnHeader {\n+            return self.parse_item_fn(lo, visibility, attrs, FnHeader {\n                 unsafety: Unsafety::Normal,\n                 asyncness: respan(fn_span, IsAsync::NotAsync),\n                 constness: respan(fn_span, Constness::NotConst),\n                 abi: Abi::Rust,\n-            })?;\n-            let span = lo.to(self.prev_span);\n-            let attrs = maybe_append(attrs, extra_attrs);\n-            return Ok(Some(self.mk_item(span, ident, item_, visibility, attrs)));\n+            });\n         }\n         if self.check_keyword(kw::Unsafe)\n             && self.look_ahead(1, |t| *t != token::OpenDelim(token::Brace)) {\n@@ -272,15 +261,12 @@ impl<'a> Parser<'a> {\n             };\n             self.expect_keyword(kw::Fn)?;\n             let fn_span = self.prev_span;\n-            let (ident, item_, extra_attrs) = self.parse_item_fn(FnHeader {\n+            return self.parse_item_fn(lo, visibility, attrs, FnHeader {\n                 unsafety: Unsafety::Unsafe,\n                 asyncness: respan(fn_span, IsAsync::NotAsync),\n                 constness: respan(fn_span, Constness::NotConst),\n                 abi,\n-            })?;\n-            let span = lo.to(self.prev_span);\n-            let attrs = maybe_append(attrs, extra_attrs);\n-            return Ok(Some(self.mk_item(span, ident, item_, visibility, attrs)));\n+            });\n         }\n         if self.eat_keyword(kw::Mod) {\n             // MODULE ITEM\n@@ -1195,11 +1181,20 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses an item-position function declaration.\n-    fn parse_item_fn(&mut self, header: FnHeader) -> PResult<'a, ItemInfo> {\n+    fn parse_item_fn(\n+        &mut self,\n+        lo: Span,\n+        vis: Visibility,\n+        attrs: Vec<Attribute>,\n+        header: FnHeader,\n+    ) -> PResult<'a, Option<P<Item>>> {\n         let allow_c_variadic = header.abi == Abi::C && header.unsafety == Unsafety::Unsafe;\n         let (ident, decl, generics) = self.parse_fn_sig(allow_c_variadic)?;\n         let (inner_attrs, body) = self.parse_inner_attrs_and_block()?;\n-        Ok((ident, ItemKind::Fn(decl, header, generics, body), Some(inner_attrs)))\n+        let span = lo.to(self.prev_span);\n+        let kind = ItemKind::Fn(decl, header, generics, body);\n+        let attrs = maybe_append(attrs, Some(inner_attrs));\n+        Ok(Some(self.mk_item(span, ident, kind, vis, attrs)))\n     }\n \n     /// Parse the \"signature\", including the identifier, parameters, and generics of a function."}]}