{"sha": "ef524710669a003cf2b24361dc6b04b566e560fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmNTI0NzEwNjY5YTAwM2NmMmIyNDM2MWRjNmIwNGI1NjZlNTYwZmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-29T12:38:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-29T12:38:05Z"}, "message": "Auto merge of #88208 - petrochenkov:lowspan, r=Aaron1011\n\nast_lowering: Introduce `lower_span` for catching all spans entering HIR\n\nThis PR cherry-picks the `fn lower_span` change from https://github.com/rust-lang/rust/pull/84373.\nI also introduced `fn lower_ident` for lowering spans in identifiers, and audited places where HIR structures with spans or identifiers are constructed and added a few missing `lower_span`s/`lower_ident`s.\n\nHaving a hook for spans entering HIR can be useful for things other than https://github.com/rust-lang/rust/pull/84373, e.g. https://github.com/rust-lang/rust/issues/35148.\nI also want to check whether this change causes perf regressions due to some accidental inlining issues.\n\nr? `@cjgillot`", "tree": {"sha": "dc419f09932cc682a01987d3572474b97e7c6e9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc419f09932cc682a01987d3572474b97e7c6e9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef524710669a003cf2b24361dc6b04b566e560fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef524710669a003cf2b24361dc6b04b566e560fa", "html_url": "https://github.com/rust-lang/rust/commit/ef524710669a003cf2b24361dc6b04b566e560fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef524710669a003cf2b24361dc6b04b566e560fa/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59ce76548484806ac4970c57c0bb6ad9e53b80f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/59ce76548484806ac4970c57c0bb6ad9e53b80f6", "html_url": "https://github.com/rust-lang/rust/commit/59ce76548484806ac4970c57c0bb6ad9e53b80f6"}, {"sha": "59013cdebe665377e0d733ea3906c84216bd33db", "url": "https://api.github.com/repos/rust-lang/rust/commits/59013cdebe665377e0d733ea3906c84216bd33db", "html_url": "https://github.com/rust-lang/rust/commit/59013cdebe665377e0d733ea3906c84216bd33db"}], "stats": {"total": 499, "additions": 330, "deletions": 169}, "files": [{"sha": "7165b3bcb9fc1eee77267759de7c315c8e02548f", "filename": "compiler/rustc_ast_lowering/src/asm.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ef524710669a003cf2b24361dc6b04b566e560fa/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef524710669a003cf2b24361dc6b04b566e560fa/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs?ref=ef524710669a003cf2b24361dc6b04b566e560fa", "patch": "@@ -128,7 +128,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         hir::InlineAsmOperand::Sym { expr: self.lower_expr_mut(expr) }\n                     }\n                 };\n-                (op, *op_sp)\n+                (op, self.lower_span(*op_sp))\n             })\n             .collect();\n \n@@ -384,16 +384,21 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             late: true,\n                             expr: None,\n                         },\n-                        abi_span,\n+                        self.lower_span(abi_span),\n                     ));\n                 }\n             }\n         }\n \n         let operands = self.arena.alloc_from_iter(operands);\n         let template = self.arena.alloc_from_iter(asm.template.iter().cloned());\n-        let template_strs = self.arena.alloc_from_iter(asm.template_strs.iter().cloned());\n-        let line_spans = self.arena.alloc_slice(&asm.line_spans[..]);\n+        let template_strs = self.arena.alloc_from_iter(\n+            asm.template_strs\n+                .iter()\n+                .map(|(sym, snippet, span)| (*sym, *snippet, self.lower_span(*span))),\n+        );\n+        let line_spans =\n+            self.arena.alloc_from_iter(asm.line_spans.iter().map(|span| self.lower_span(*span)));\n         let hir_asm =\n             hir::InlineAsm { template, template_strs, operands, options: asm.options, line_spans };\n         self.arena.alloc(hir_asm)"}, {"sha": "80633e141fc6de85e78bcaa9b8d67c434f8add9f", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 134, "deletions": 50, "changes": 184, "blob_url": "https://github.com/rust-lang/rust/blob/ef524710669a003cf2b24361dc6b04b566e560fa/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef524710669a003cf2b24361dc6b04b566e560fa/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=ef524710669a003cf2b24361dc6b04b566e560fa", "patch": "@@ -58,7 +58,12 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         None,\n                     ));\n                     let args = self.lower_exprs(args);\n-                    hir::ExprKind::MethodCall(hir_seg, seg.ident.span, args, span)\n+                    hir::ExprKind::MethodCall(\n+                        hir_seg,\n+                        self.lower_span(seg.ident.span),\n+                        args,\n+                        self.lower_span(span),\n+                    )\n                 }\n                 ExprKind::Binary(binop, ref lhs, ref rhs) => {\n                     let binop = self.lower_binop(binop);\n@@ -71,7 +76,9 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     let ohs = self.lower_expr(ohs);\n                     hir::ExprKind::Unary(op, ohs)\n                 }\n-                ExprKind::Lit(ref l) => hir::ExprKind::Lit(respan(l.span, l.kind.clone())),\n+                ExprKind::Lit(ref l) => {\n+                    hir::ExprKind::Lit(respan(self.lower_span(l.span), l.kind.clone()))\n+                }\n                 ExprKind::Cast(ref expr, ref ty) => {\n                     let expr = self.lower_expr(expr);\n                     let ty = self.lower_ty(ty, ImplTraitContext::disallowed());\n@@ -86,9 +93,11 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     let ohs = self.lower_expr(ohs);\n                     hir::ExprKind::AddrOf(k, m, ohs)\n                 }\n-                ExprKind::Let(ref pat, ref scrutinee, span) => {\n-                    hir::ExprKind::Let(self.lower_pat(pat), self.lower_expr(scrutinee), span)\n-                }\n+                ExprKind::Let(ref pat, ref scrutinee, span) => hir::ExprKind::Let(\n+                    self.lower_pat(pat),\n+                    self.lower_expr(scrutinee),\n+                    self.lower_span(span),\n+                ),\n                 ExprKind::If(ref cond, ref then, ref else_opt) => {\n                     self.lower_expr_if(cond, then, else_opt.as_deref())\n                 }\n@@ -99,7 +108,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 ExprKind::Loop(ref body, opt_label) => self.with_loop_scope(e.id, |this| {\n                     hir::ExprKind::Loop(\n                         this.lower_block(body, false),\n-                        opt_label,\n+                        this.lower_label(opt_label),\n                         hir::LoopSource::Loop,\n                         DUMMY_SP,\n                     )\n@@ -147,6 +156,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     }\n                 }\n                 ExprKind::Block(ref blk, opt_label) => {\n+                    let opt_label = self.lower_label(opt_label);\n                     hir::ExprKind::Block(self.lower_block(blk, opt_label.is_some()), opt_label)\n                 }\n                 ExprKind::Assign(ref el, ref er, span) => {\n@@ -157,7 +167,9 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     self.lower_expr(el),\n                     self.lower_expr(er),\n                 ),\n-                ExprKind::Field(ref el, ident) => hir::ExprKind::Field(self.lower_expr(el), ident),\n+                ExprKind::Field(ref el, ident) => {\n+                    hir::ExprKind::Field(self.lower_expr(el), self.lower_ident(ident))\n+                }\n                 ExprKind::Index(ref el, ref er) => {\n                     hir::ExprKind::Index(self.lower_expr(el), self.lower_expr(er))\n                 }\n@@ -234,7 +246,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     let mut ex = self.lower_expr_mut(ex);\n                     // Include parens in span, but only if it is a super-span.\n                     if e.span.contains(ex.span) {\n-                        ex.span = e.span;\n+                        ex.span = self.lower_span(e.span);\n                     }\n                     // Merge attributes into the inner expression.\n                     if !e.attrs.is_empty() {\n@@ -262,7 +274,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n             let hir_id = self.lower_node_id(e.id);\n             self.lower_attrs(hir_id, &e.attrs);\n-            hir::Expr { hir_id, kind, span: e.span }\n+            hir::Expr { hir_id, kind, span: self.lower_span(e.span) }\n         })\n     }\n \n@@ -296,7 +308,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 BinOpKind::Ge => hir::BinOpKind::Ge,\n                 BinOpKind::Gt => hir::BinOpKind::Gt,\n             },\n-            span: b.span,\n+            span: self.lower_span(b.span),\n         }\n     }\n \n@@ -478,7 +490,13 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         });\n         let hir_id = self.next_id();\n         self.lower_attrs(hir_id, &arm.attrs);\n-        hir::Arm { hir_id, pat, guard, body: self.lower_expr(&arm.body), span: arm.span }\n+        hir::Arm {\n+            hir_id,\n+            pat,\n+            guard,\n+            body: self.lower_expr(&arm.body),\n+            span: self.lower_span(arm.span),\n+        }\n     }\n \n     /// Lower an `async` construct to a generator that is then wrapped so it implements `Future`.\n@@ -501,12 +519,16 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     ) -> hir::ExprKind<'hir> {\n         let output = match ret_ty {\n             Some(ty) => hir::FnRetTy::Return(self.lower_ty(&ty, ImplTraitContext::disallowed())),\n-            None => hir::FnRetTy::DefaultReturn(span),\n+            None => hir::FnRetTy::DefaultReturn(self.lower_span(span)),\n         };\n \n         // Resume argument type. We let the compiler infer this to simplify the lowering. It is\n         // fully constrained by `future::from_generator`.\n-        let input_ty = hir::Ty { hir_id: self.next_id(), kind: hir::TyKind::Infer, span };\n+        let input_ty = hir::Ty {\n+            hir_id: self.next_id(),\n+            kind: hir::TyKind::Infer,\n+            span: self.lower_span(span),\n+        };\n \n         // The closure/generator `FnDecl` takes a single (resume) argument of type `input_ty`.\n         let decl = self.arena.alloc(hir::FnDecl {\n@@ -522,7 +544,12 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             Ident::with_dummy_span(sym::_task_context),\n             hir::BindingAnnotation::Mutable,\n         );\n-        let param = hir::Param { hir_id: self.next_id(), pat, ty_span: span, span };\n+        let param = hir::Param {\n+            hir_id: self.next_id(),\n+            pat,\n+            ty_span: self.lower_span(span),\n+            span: self.lower_span(span),\n+        };\n         let params = arena_vec![self; param];\n \n         let body_id = self.lower_body(move |this| {\n@@ -540,11 +567,14 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             capture_clause,\n             decl,\n             body_id,\n-            span,\n+            self.lower_span(span),\n             Some(hir::Movability::Static),\n         );\n-        let generator =\n-            hir::Expr { hir_id: self.lower_node_id(closure_node_id), kind: generator_kind, span };\n+        let generator = hir::Expr {\n+            hir_id: self.lower_node_id(closure_node_id),\n+            kind: generator_kind,\n+            span: self.lower_span(span),\n+        };\n \n         // `future::from_generator`:\n         let unstable_span =\n@@ -681,8 +711,11 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n             if let Some(task_context_hid) = self.task_context {\n                 let lhs = self.expr_ident(span, task_context_ident, task_context_hid);\n-                let assign =\n-                    self.expr(span, hir::ExprKind::Assign(lhs, yield_expr, span), AttrVec::new());\n+                let assign = self.expr(\n+                    span,\n+                    hir::ExprKind::Assign(lhs, yield_expr, self.lower_span(span)),\n+                    AttrVec::new(),\n+                );\n                 self.stmt_expr(span, assign)\n             } else {\n                 // Use of `await` outside of an async context. Return `yield_expr` so that we can\n@@ -696,8 +729,13 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         // loop { .. }\n         let loop_expr = self.arena.alloc(hir::Expr {\n             hir_id: loop_hir_id,\n-            kind: hir::ExprKind::Loop(loop_block, None, hir::LoopSource::Loop, span),\n-            span,\n+            kind: hir::ExprKind::Loop(\n+                loop_block,\n+                None,\n+                hir::LoopSource::Loop,\n+                self.lower_span(span),\n+            ),\n+            span: self.lower_span(span),\n         });\n \n         // mut pinned => loop { ... }\n@@ -735,7 +773,13 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         // Lower outside new scope to preserve `is_in_loop_condition`.\n         let fn_decl = self.lower_fn_decl(decl, None, false, None);\n \n-        hir::ExprKind::Closure(capture_clause, fn_decl, body_id, fn_decl_span, generator_option)\n+        hir::ExprKind::Closure(\n+            capture_clause,\n+            fn_decl,\n+            body_id,\n+            self.lower_span(fn_decl_span),\n+            generator_option,\n+        )\n     }\n \n     fn generator_movability_for_fn(\n@@ -821,7 +865,13 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         // closure argument types.\n         let fn_decl = self.lower_fn_decl(&outer_decl, None, false, None);\n \n-        hir::ExprKind::Closure(capture_clause, fn_decl, body_id, fn_decl_span, None)\n+        hir::ExprKind::Closure(\n+            capture_clause,\n+            fn_decl,\n+            body_id,\n+            self.lower_span(fn_decl_span),\n+            None,\n+        )\n     }\n \n     /// Destructure the LHS of complex assignments.\n@@ -853,7 +903,11 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             }\n         }\n         if is_ordinary(self, lhs) {\n-            return hir::ExprKind::Assign(self.lower_expr(lhs), self.lower_expr(rhs), eq_sign_span);\n+            return hir::ExprKind::Assign(\n+                self.lower_expr(lhs),\n+                self.lower_expr(rhs),\n+                self.lower_span(eq_sign_span),\n+            );\n         }\n         if !self.sess.features_untracked().destructuring_assignment {\n             feature_err(\n@@ -878,7 +932,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             whole_span,\n             Some(rhs),\n             pat,\n-            hir::LocalSource::AssignDesugar(eq_sign_span),\n+            hir::LocalSource::AssignDesugar(self.lower_span(eq_sign_span)),\n         );\n \n         // `a = lhs1; b = lhs2;`.\n@@ -978,10 +1032,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     let pat = self.destructure_assign(&f.expr, eq_sign_span, assignments);\n                     hir::PatField {\n                         hir_id: self.next_id(),\n-                        ident: f.ident,\n+                        ident: self.lower_ident(f.ident),\n                         pat,\n                         is_shorthand: f.is_shorthand,\n-                        span: f.span,\n+                        span: self.lower_span(f.span),\n                     }\n                 }));\n                 let qpath = self.lower_qpath(\n@@ -1033,10 +1087,11 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             _ => {}\n         }\n         // Treat all other cases as normal lvalue.\n-        let ident = Ident::new(sym::lhs, lhs.span);\n+        let ident = Ident::new(sym::lhs, self.lower_span(lhs.span));\n         let (pat, binding) = self.pat_ident_mut(lhs.span, ident);\n         let ident = self.expr_ident(lhs.span, ident, binding);\n-        let assign = hir::ExprKind::Assign(self.lower_expr(lhs), ident, eq_sign_span);\n+        let assign =\n+            hir::ExprKind::Assign(self.lower_expr(lhs), ident, self.lower_span(eq_sign_span));\n         let expr = self.expr(lhs.span, assign, ThinVec::new());\n         assignments.push(self.stmt_expr(lhs.span, expr));\n         pat\n@@ -1076,7 +1131,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     fn lower_expr_range_closed(&mut self, span: Span, e1: &Expr, e2: &Expr) -> hir::ExprKind<'hir> {\n         let e1 = self.lower_expr_mut(e1);\n         let e2 = self.lower_expr_mut(e2);\n-        let fn_path = hir::QPath::LangItem(hir::LangItem::RangeInclusiveNew, span);\n+        let fn_path = hir::QPath::LangItem(hir::LangItem::RangeInclusiveNew, self.lower_span(span));\n         let fn_expr =\n             self.arena.alloc(self.expr(span, hir::ExprKind::Path(fn_path), ThinVec::new()));\n         hir::ExprKind::Call(fn_expr, arena_vec![self; e1, e2])\n@@ -1104,12 +1159,21 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let fields = self.arena.alloc_from_iter(\n             e1.iter().map(|e| (\"start\", e)).chain(e2.iter().map(|e| (\"end\", e))).map(|(s, e)| {\n                 let expr = self.lower_expr(&e);\n-                let ident = Ident::new(Symbol::intern(s), e.span);\n+                let ident = Ident::new(Symbol::intern(s), self.lower_span(e.span));\n                 self.expr_field(ident, expr, e.span)\n             }),\n         );\n \n-        hir::ExprKind::Struct(self.arena.alloc(hir::QPath::LangItem(lang_item, span)), fields, None)\n+        hir::ExprKind::Struct(\n+            self.arena.alloc(hir::QPath::LangItem(lang_item, self.lower_span(span))),\n+            fields,\n+            None,\n+        )\n+    }\n+\n+    fn lower_label(&self, opt_label: Option<Label>) -> Option<Label> {\n+        let label = opt_label?;\n+        Some(Label { ident: self.lower_ident(label.ident) })\n     }\n \n     fn lower_loop_destination(&mut self, destination: Option<(NodeId, Label)>) -> hir::Destination {\n@@ -1128,7 +1192,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 .map(|id| Ok(self.lower_node_id(id)))\n                 .unwrap_or(Err(hir::LoopIdError::OutsideLoopScope)),\n         };\n-        hir::Destination { label: destination.map(|(_, label)| label), target_id }\n+        let label = self.lower_label(destination.map(|(_, label)| label));\n+        hir::Destination { label, target_id }\n     }\n \n     fn lower_jump_destination(&mut self, id: NodeId, opt_label: Option<Label>) -> hir::Destination {\n@@ -1201,7 +1266,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     constraint: out.constraint,\n                     is_rw: out.is_rw,\n                     is_indirect: out.is_indirect,\n-                    span: out.expr.span,\n+                    span: self.lower_span(out.expr.span),\n                 })\n                 .collect(),\n             asm: asm.asm,\n@@ -1226,9 +1291,9 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     fn lower_expr_field(&mut self, f: &ExprField) -> hir::ExprField<'hir> {\n         hir::ExprField {\n             hir_id: self.next_id(),\n-            ident: f.ident,\n+            ident: self.lower_ident(f.ident),\n             expr: self.lower_expr(&f.expr),\n-            span: f.span,\n+            span: self.lower_span(f.span),\n             is_shorthand: f.is_shorthand,\n         }\n     }\n@@ -1289,7 +1354,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             orig_head_span,\n             None,\n         );\n-        head.span = desugared_span;\n+        head.span = self.lower_span(desugared_span);\n \n         let iter = Ident::with_dummy_span(sym::iter);\n \n@@ -1308,7 +1373,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             let next_expr = self.expr_ident(pat.span, next_ident, next_pat_hid);\n             let assign = self.arena.alloc(self.expr(\n                 pat.span,\n-                hir::ExprKind::Assign(next_expr, val_expr, pat.span),\n+                hir::ExprKind::Assign(next_expr, val_expr, self.lower_span(pat.span)),\n                 ThinVec::new(),\n             ));\n             let some_pat = self.pat_some(pat.span, val_pat);\n@@ -1376,12 +1441,15 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         // `[opt_ident]: loop { ... }`\n         let kind = hir::ExprKind::Loop(\n             loop_block,\n-            opt_label,\n+            self.lower_label(opt_label),\n             hir::LoopSource::ForLoop,\n-            e.span.with_hi(orig_head_span.hi()),\n+            self.lower_span(e.span.with_hi(orig_head_span.hi())),\n         );\n-        let loop_expr =\n-            self.arena.alloc(hir::Expr { hir_id: self.lower_node_id(e.id), kind, span: e.span });\n+        let loop_expr = self.arena.alloc(hir::Expr {\n+            hir_id: self.lower_node_id(e.id),\n+            kind,\n+            span: self.lower_span(e.span),\n+        });\n \n         // `mut iter => { ... }`\n         let iter_arm = self.arm(iter_pat, loop_expr);\n@@ -1460,8 +1528,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let attr = {\n             // `allow(unreachable_code)`\n             let allow = {\n-                let allow_ident = Ident::new(sym::allow, span);\n-                let uc_ident = Ident::new(sym::unreachable_code, span);\n+                let allow_ident = Ident::new(sym::allow, self.lower_span(span));\n+                let uc_ident = Ident::new(sym::unreachable_code, self.lower_span(span));\n                 let uc_nested = attr::mk_nested_word_item(uc_ident);\n                 attr::mk_list_item(allow_ident, vec![uc_nested])\n             };\n@@ -1630,7 +1698,11 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         lang_item: hir::LangItem,\n         attrs: AttrVec,\n     ) -> hir::Expr<'hir> {\n-        self.expr(span, hir::ExprKind::Path(hir::QPath::LangItem(lang_item, span)), attrs)\n+        self.expr(\n+            span,\n+            hir::ExprKind::Path(hir::QPath::LangItem(lang_item, self.lower_span(span))),\n+            attrs,\n+        )\n     }\n \n     pub(super) fn expr_ident(\n@@ -1661,7 +1733,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let expr_path = hir::ExprKind::Path(hir::QPath::Resolved(\n             None,\n             self.arena.alloc(hir::Path {\n-                span,\n+                span: self.lower_span(span),\n                 res: Res::Local(binding),\n                 segments: arena_vec![self; hir::PathSegment::from_ident(ident)],\n             }),\n@@ -1681,7 +1753,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     expr: Some(expr),\n                     hir_id,\n                     rules: hir::BlockCheckMode::UnsafeBlock(hir::UnsafeSource::CompilerGenerated),\n-                    span,\n+                    span: self.lower_span(span),\n                     targeted_by_break: false,\n                 }),\n                 None,\n@@ -1712,7 +1784,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     ) -> hir::Expr<'hir> {\n         let hir_id = self.next_id();\n         self.lower_attrs(hir_id, &attrs);\n-        hir::Expr { hir_id, kind, span }\n+        hir::Expr { hir_id, kind, span: self.lower_span(span) }\n     }\n \n     fn expr_field(\n@@ -1721,10 +1793,22 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         expr: &'hir hir::Expr<'hir>,\n         span: Span,\n     ) -> hir::ExprField<'hir> {\n-        hir::ExprField { hir_id: self.next_id(), ident, span, expr, is_shorthand: false }\n+        hir::ExprField {\n+            hir_id: self.next_id(),\n+            ident,\n+            span: self.lower_span(span),\n+            expr,\n+            is_shorthand: false,\n+        }\n     }\n \n     fn arm(&mut self, pat: &'hir hir::Pat<'hir>, expr: &'hir hir::Expr<'hir>) -> hir::Arm<'hir> {\n-        hir::Arm { hir_id: self.next_id(), pat, guard: None, span: expr.span, body: expr }\n+        hir::Arm {\n+            hir_id: self.next_id(),\n+            pat,\n+            guard: None,\n+            span: self.lower_span(expr.span),\n+            body: expr,\n+        }\n     }\n }"}, {"sha": "014c240f11ee7d3a9d8a8ec869e318453c6ee830", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 64, "deletions": 37, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/ef524710669a003cf2b24361dc6b04b566e560fa/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef524710669a003cf2b24361dc6b04b566e560fa/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=ef524710669a003cf2b24361dc6b04b566e560fa", "patch": "@@ -158,7 +158,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n     pub(super) fn lower_mod(&mut self, items: &[P<Item>], inner: Span) -> hir::Mod<'hir> {\n         hir::Mod {\n-            inner,\n+            inner: self.lower_span(inner),\n             item_ids: self.arena.alloc_from_iter(items.iter().flat_map(|x| self.lower_item_id(x))),\n         }\n     }\n@@ -214,7 +214,13 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let hir_id = self.lower_node_id(i.id);\n         let attrs = self.lower_attrs(hir_id, &i.attrs);\n         let kind = self.lower_item_kind(i.span, i.id, hir_id, &mut ident, attrs, &mut vis, &i.kind);\n-        Some(hir::Item { def_id: hir_id.expect_owner(), ident, kind, vis, span: i.span })\n+        Some(hir::Item {\n+            def_id: hir_id.expect_owner(),\n+            ident: self.lower_ident(ident),\n+            kind,\n+            vis,\n+            span: self.lower_span(i.span),\n+        })\n     }\n \n     fn lower_item_kind(\n@@ -278,7 +284,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     let sig = hir::FnSig {\n                         decl,\n                         header: this.lower_fn_header(header, fn_sig_span, id),\n-                        span: fn_sig_span,\n+                        span: this.lower_span(fn_sig_span),\n                     };\n                     hir::ItemKind::Fn(sig, generics, body_id)\n                 })\n@@ -407,6 +413,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 // to not cause an assertion failure inside the `lower_defaultness` function.\n                 let has_val = true;\n                 let (defaultness, defaultness_span) = self.lower_defaultness(defaultness, has_val);\n+                let polarity = match polarity {\n+                    ImplPolarity::Positive => ImplPolarity::Positive,\n+                    ImplPolarity::Negative(s) => ImplPolarity::Negative(self.lower_span(s)),\n+                };\n                 hir::ItemKind::Impl(hir::Impl {\n                     unsafety: self.lower_unsafety(unsafety),\n                     polarity,\n@@ -525,10 +535,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n                         this.insert_item(hir::Item {\n                             def_id: new_id.expect_owner(),\n-                            ident,\n+                            ident: this.lower_ident(ident),\n                             kind,\n                             vis,\n-                            span,\n+                            span: this.lower_span(span),\n                         });\n                     });\n                 }\n@@ -599,10 +609,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n                         this.insert_item(hir::Item {\n                             def_id: new_hir_id.expect_owner(),\n-                            ident,\n+                            ident: this.lower_ident(ident),\n                             kind,\n                             vis,\n-                            span: use_tree.span,\n+                            span: this.lower_span(use_tree.span),\n                         });\n                     });\n                 }\n@@ -621,7 +631,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     hir::VisibilityKind::Public\n                     | hir::VisibilityKind::Crate(_)\n                     | hir::VisibilityKind::Inherited => {\n-                        *vis = respan(prefix.span.shrink_to_lo(), hir::VisibilityKind::Inherited);\n+                        *vis = respan(\n+                            self.lower_span(prefix.span.shrink_to_lo()),\n+                            hir::VisibilityKind::Inherited,\n+                        );\n                     }\n                     hir::VisibilityKind::Restricted { .. } => {\n                         // Do nothing here, as described in the comment on the match.\n@@ -664,7 +677,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 }\n             }\n         };\n-        respan(vis.span, vis_kind)\n+        respan(self.lower_span(vis.span), vis_kind)\n     }\n \n     fn lower_foreign_item(&mut self, i: &ForeignItem) -> hir::ForeignItem<'hir> {\n@@ -673,7 +686,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         self.lower_attrs(hir_id, &i.attrs);\n         hir::ForeignItem {\n             def_id,\n-            ident: i.ident,\n+            ident: self.lower_ident(i.ident),\n             kind: match i.kind {\n                 ForeignItemKind::Fn(box FnKind(_, ref sig, ref generics, _)) => {\n                     let fdec = &sig.decl;\n@@ -700,15 +713,15 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 ForeignItemKind::MacCall(_) => panic!(\"macro shouldn't exist here\"),\n             },\n             vis: self.lower_visibility(&i.vis, None),\n-            span: i.span,\n+            span: self.lower_span(i.span),\n         }\n     }\n \n     fn lower_foreign_item_ref(&mut self, i: &ForeignItem) -> hir::ForeignItemRef<'hir> {\n         hir::ForeignItemRef {\n             id: hir::ForeignItemId { def_id: self.lower_node_id(i.id).expect_owner() },\n-            ident: i.ident,\n-            span: i.span,\n+            ident: self.lower_ident(i.ident),\n+            span: self.lower_span(i.span),\n             vis: self.lower_visibility(&i.vis, Some(i.id)),\n         }\n     }\n@@ -720,8 +733,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             id,\n             data: self.lower_variant_data(id, &v.data),\n             disr_expr: v.disr_expr.as_ref().map(|e| self.lower_anon_const(e)),\n-            ident: v.ident,\n-            span: v.span,\n+            ident: self.lower_ident(v.ident),\n+            span: self.lower_span(v.span),\n         }\n     }\n \n@@ -773,12 +786,12 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let hir_id = self.lower_node_id(f.id);\n         self.lower_attrs(hir_id, &f.attrs);\n         hir::FieldDef {\n-            span: f.span,\n+            span: self.lower_span(f.span),\n             hir_id,\n             ident: match f.ident {\n-                Some(ident) => ident,\n+                Some(ident) => self.lower_ident(ident),\n                 // FIXME(jseyfried): positional field hygiene.\n-                None => Ident::new(sym::integer(index), f.span),\n+                None => Ident::new(sym::integer(index), self.lower_span(f.span)),\n             },\n             vis: self.lower_visibility(&f.vis, None),\n             ty,\n@@ -829,7 +842,13 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         };\n \n         self.lower_attrs(hir_id, &i.attrs);\n-        hir::TraitItem { def_id: trait_item_def_id, ident: i.ident, generics, kind, span: i.span }\n+        hir::TraitItem {\n+            def_id: trait_item_def_id,\n+            ident: self.lower_ident(i.ident),\n+            generics,\n+            kind,\n+            span: self.lower_span(i.span),\n+        }\n     }\n \n     fn lower_trait_item_ref(&mut self, i: &AssocItem) -> hir::TraitItemRef {\n@@ -845,7 +864,13 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         };\n         let id = hir::TraitItemId { def_id: self.lower_node_id(i.id).expect_owner() };\n         let defaultness = hir::Defaultness::Default { has_value: has_default };\n-        hir::TraitItemRef { id, ident: i.ident, span: i.span, defaultness, kind }\n+        hir::TraitItemRef {\n+            id,\n+            ident: self.lower_ident(i.ident),\n+            span: self.lower_span(i.span),\n+            defaultness,\n+            kind,\n+        }\n     }\n \n     /// Construct `ExprKind::Err` for the given `span`.\n@@ -910,12 +935,12 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         self.lower_attrs(hir_id, &i.attrs);\n         hir::ImplItem {\n             def_id: hir_id.expect_owner(),\n-            ident: i.ident,\n+            ident: self.lower_ident(i.ident),\n             generics,\n             vis: self.lower_visibility(&i.vis, None),\n             defaultness,\n             kind,\n-            span: i.span,\n+            span: self.lower_span(i.span),\n         }\n     }\n \n@@ -925,8 +950,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let (defaultness, _) = self.lower_defaultness(i.kind.defaultness(), has_value);\n         hir::ImplItemRef {\n             id: hir::ImplItemId { def_id: self.lower_node_id(i.id).expect_owner() },\n-            ident: i.ident,\n-            span: i.span,\n+            ident: self.lower_ident(i.ident),\n+            span: self.lower_span(i.span),\n             vis: self.lower_visibility(&i.vis, Some(i.id)),\n             defaultness,\n             kind: match &i.kind {\n@@ -969,7 +994,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             }\n             VisibilityKind::Inherited => hir::VisibilityKind::Inherited,\n         };\n-        respan(v.span, node)\n+        respan(self.lower_span(v.span), node)\n     }\n \n     fn lower_defaultness(\n@@ -978,7 +1003,9 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         has_value: bool,\n     ) -> (hir::Defaultness, Option<Span>) {\n         match d {\n-            Defaultness::Default(sp) => (hir::Defaultness::Default { has_value }, Some(sp)),\n+            Defaultness::Default(sp) => {\n+                (hir::Defaultness::Default { has_value }, Some(self.lower_span(sp)))\n+            }\n             Defaultness::Final => {\n                 assert!(has_value);\n                 (hir::Defaultness::Final, None)\n@@ -1016,8 +1043,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         hir::Param {\n             hir_id,\n             pat: self.lower_pat(&param.pat),\n-            ty_span: param.ty.span,\n-            span: param.span,\n+            ty_span: self.lower_span(param.ty.span),\n+            span: self.lower_span(param.span),\n         }\n     }\n \n@@ -1151,8 +1178,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 let new_parameter = hir::Param {\n                     hir_id: parameter.hir_id,\n                     pat: new_parameter_pat,\n-                    ty_span: parameter.ty_span,\n-                    span: parameter.span,\n+                    ty_span: this.lower_span(parameter.ty_span),\n+                    span: this.lower_span(parameter.span),\n                 };\n \n                 if is_simple_parameter {\n@@ -1285,7 +1312,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 )\n             },\n         );\n-        (generics, hir::FnSig { header, decl, span: sig.span })\n+        (generics, hir::FnSig { header, decl, span: self.lower_span(sig.span) })\n     }\n \n     fn lower_fn_header(&mut self, h: FnHeader, span: Span, id: NodeId) -> hir::FnHeader {\n@@ -1385,7 +1412,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         GenericsCtor {\n             params: self.lower_generic_params_mut(&generics.params, &add_bounds, itctx).collect(),\n             where_clause: self.lower_where_clause(&generics.where_clause),\n-            span: generics.span,\n+            span: self.lower_span(generics.span),\n         }\n     }\n \n@@ -1404,7 +1431,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 predicates: this.arena.alloc_from_iter(\n                     wc.predicates.iter().map(|predicate| this.lower_where_predicate(predicate)),\n                 ),\n-                span: wc.span,\n+                span: this.lower_span(wc.span),\n             }\n         })\n     }\n@@ -1433,12 +1460,12 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                                 // `suggest_constraining_type_param`. This will need to change if\n                                 // we ever allow something *other* than `?Sized`.\n                                 GenericBound::Trait(p, TraitBoundModifier::Maybe) => {\n-                                    hir::GenericBound::Unsized(p.span)\n+                                    hir::GenericBound::Unsized(this.lower_span(p.span))\n                                 }\n                                 _ => this.lower_param_bound(bound, ImplTraitContext::disallowed()),\n                             },\n                         )),\n-                        span,\n+                        span: this.lower_span(span),\n                     })\n                 })\n             }\n@@ -1447,7 +1474,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 ref bounds,\n                 span,\n             }) => hir::WherePredicate::RegionPredicate(hir::WhereRegionPredicate {\n-                span,\n+                span: self.lower_span(span),\n                 lifetime: self.lower_lifetime(lifetime),\n                 bounds: self.lower_param_bounds(bounds, ImplTraitContext::disallowed()),\n             }),\n@@ -1456,7 +1483,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     hir_id: self.lower_node_id(id),\n                     lhs_ty: self.lower_ty(lhs_ty, ImplTraitContext::disallowed()),\n                     rhs_ty: self.lower_ty(rhs_ty, ImplTraitContext::disallowed()),\n-                    span,\n+                    span: self.lower_span(span),\n                 })\n             }\n         }"}, {"sha": "b71fcb7a349cc93773fa4f74b99e5c69ac6571a1", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 102, "deletions": 65, "changes": 167, "blob_url": "https://github.com/rust-lang/rust/blob/ef524710669a003cf2b24361dc6b04b566e560fa/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef524710669a003cf2b24361dc6b04b566e560fa/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=ef524710669a003cf2b24361dc6b04b566e560fa", "patch": "@@ -760,6 +760,16 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         result\n     }\n \n+    /// Intercept all spans entering HIR.\n+    /// For now we are not doing anything with the intercepted spans.\n+    fn lower_span(&self, span: Span) -> Span {\n+        span\n+    }\n+\n+    fn lower_ident(&self, ident: Ident) -> Ident {\n+        Ident::new(ident.name, self.lower_span(ident.span))\n+    }\n+\n     /// Creates a new `hir::GenericParam` for every new lifetime and\n     /// type parameter encountered while evaluating `f`. Definitions\n     /// are created with the parent provided. If no `parent_id` is\n@@ -828,7 +838,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             hir_id: self.lower_node_id(node_id),\n             name: hir_name,\n             bounds: &[],\n-            span,\n+            span: self.lower_span(span),\n             pure_wrt_drop: false,\n             kind: hir::GenericParamKind::Lifetime { kind },\n         }\n@@ -989,7 +999,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             AttrKind::DocComment(comment_kind, data) => AttrKind::DocComment(comment_kind, data),\n         };\n \n-        Attribute { kind, id: attr.id, style: attr.style, span: attr.span }\n+        Attribute { kind, id: attr.id, style: attr.style, span: self.lower_span(attr.span) }\n     }\n \n     fn alias_attrs(&mut self, id: hir::HirId, target_id: hir::HirId) {\n@@ -1117,7 +1127,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     .0\n                 }\n             };\n-            self.arena.alloc(gen_args_ctor.into_generic_args(&self.arena))\n+            gen_args_ctor.into_generic_args(self)\n         } else {\n             self.arena.alloc(hir::GenericArgs::none())\n         };\n@@ -1198,7 +1208,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             &Ty {\n                                 id: node_id,\n                                 kind: TyKind::ImplTrait(impl_trait_node_id, bounds.clone()),\n-                                span: constraint.span,\n+                                span: this.lower_span(constraint.span),\n                                 tokens: None,\n                             },\n                             itctx,\n@@ -1218,10 +1228,10 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n         hir::TypeBinding {\n             hir_id: self.lower_node_id(constraint.id),\n-            ident: constraint.ident,\n+            ident: self.lower_ident(constraint.ident),\n             gen_args,\n             kind,\n-            span: constraint.span,\n+            span: self.lower_span(constraint.span),\n         }\n     }\n \n@@ -1235,10 +1245,9 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             ast::GenericArg::Type(ty) => {\n                 match ty.kind {\n                     TyKind::Infer if self.sess.features_untracked().generic_arg_infer => {\n-                        let hir_id = self.lower_node_id(ty.id);\n                         return GenericArg::Infer(hir::InferArg {\n-                            hir_id,\n-                            span: ty.span,\n+                            hir_id: self.lower_node_id(ty.id),\n+                            span: self.lower_span(ty.span),\n                             kind: InferKind::Type,\n                         });\n                     }\n@@ -1269,10 +1278,11 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                                     ty.span,\n                                 );\n \n+                                let span = self.lower_span(ty.span);\n                                 let path_expr = Expr {\n                                     id: ty.id,\n                                     kind: ExprKind::Path(qself.clone(), path.clone()),\n-                                    span: ty.span,\n+                                    span,\n                                     attrs: AttrVec::new(),\n                                     tokens: None,\n                                 };\n@@ -1281,7 +1291,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                                     hir_id: this.lower_node_id(node_id),\n                                     body: this.lower_const_body(path_expr.span, Some(&path_expr)),\n                                 });\n-                                return GenericArg::Const(ConstArg { value: ct, span: ty.span });\n+                                return GenericArg::Const(ConstArg { value: ct, span });\n                             }\n                         }\n                     }\n@@ -1291,7 +1301,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             }\n             ast::GenericArg::Const(ct) => GenericArg::Const(ConstArg {\n                 value: self.lower_anon_const(&ct),\n-                span: ct.value.span,\n+                span: self.lower_span(ct.value.span),\n             }),\n         }\n     }\n@@ -1318,7 +1328,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     }\n \n     fn ty(&mut self, span: Span, kind: hir::TyKind<'hir>) -> hir::Ty<'hir> {\n-        hir::Ty { hir_id: self.next_id(), kind, span }\n+        hir::Ty { hir_id: self.next_id(), kind, span: self.lower_span(span) }\n     }\n \n     fn ty_tup(&mut self, span: Span, tys: &'hir [hir::Ty<'hir>]) -> hir::Ty<'hir> {\n@@ -1386,7 +1396,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         segments: arena_vec![self; hir::PathSegment::from_ident(\n                             Ident::with_dummy_span(kw::SelfUpper)\n                         )],\n-                        span: t.span,\n+                        span: self.lower_span(t.span),\n                     }),\n                 ))\n             }\n@@ -1467,10 +1477,10 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         let ident = Ident::from_str_and_span(&pprust::ty_to_string(t), span);\n                         in_band_ty_params.push(hir::GenericParam {\n                             hir_id: self.lower_node_id(def_node_id),\n-                            name: ParamName::Plain(ident),\n+                            name: ParamName::Plain(self.lower_ident(ident)),\n                             pure_wrt_drop: false,\n                             bounds: hir_bounds,\n-                            span,\n+                            span: self.lower_span(span),\n                             kind: hir::GenericParamKind::Type {\n                                 default: None,\n                                 synthetic: Some(hir::SyntheticTyParamKind::ImplTrait),\n@@ -1480,9 +1490,9 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         hir::TyKind::Path(hir::QPath::Resolved(\n                             None,\n                             self.arena.alloc(hir::Path {\n-                                span,\n+                                span: self.lower_span(span),\n                                 res: Res::Def(DefKind::TyParam, def_id.to_def_id()),\n-                                segments: arena_vec![self; hir::PathSegment::from_ident(ident)],\n+                                segments: arena_vec![self; hir::PathSegment::from_ident(self.lower_ident(ident))],\n                             }),\n                         ))\n                     }\n@@ -1509,7 +1519,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             }\n         };\n \n-        hir::Ty { kind, span: t.span, hir_id: self.lower_node_id(t.id) }\n+        hir::Ty { kind, span: self.lower_span(t.span), hir_id: self.lower_node_id(t.id) }\n     }\n \n     fn lower_opaque_impl_trait(\n@@ -1554,8 +1564,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             let opaque_ty_item = hir::OpaqueTy {\n                 generics: hir::Generics {\n                     params: lifetime_defs,\n-                    where_clause: hir::WhereClause { predicates: &[], span },\n-                    span,\n+                    where_clause: hir::WhereClause { predicates: &[], span: lctx.lower_span(span) },\n+                    span: lctx.lower_span(span),\n                 },\n                 bounds: hir_bounds,\n                 impl_trait_fn: fn_def_id,\n@@ -1586,8 +1596,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             def_id: opaque_ty_id,\n             ident: Ident::invalid(),\n             kind: opaque_ty_item_kind,\n-            vis: respan(span.shrink_to_lo(), hir::VisibilityKind::Inherited),\n-            span: opaque_ty_span,\n+            vis: respan(self.lower_span(span.shrink_to_lo()), hir::VisibilityKind::Inherited),\n+            span: self.lower_span(opaque_ty_span),\n         };\n \n         // Insert the item into the global item list. This usually happens\n@@ -1714,7 +1724,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n                     self.output_lifetimes.push(hir::GenericArg::Lifetime(hir::Lifetime {\n                         hir_id: self.context.next_id(),\n-                        span: lifetime.span,\n+                        span: self.context.lower_span(lifetime.span),\n                         name,\n                     }));\n \n@@ -1739,11 +1749,17 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         }\n                         _ => panic!(\"expected `LifetimeName::Param` or `ParamName::Plain`\"),\n                     };\n+                    let name = match name {\n+                        hir::ParamName::Plain(ident) => {\n+                            hir::ParamName::Plain(self.context.lower_ident(ident))\n+                        }\n+                        name => name,\n+                    };\n \n                     self.output_lifetime_params.push(hir::GenericParam {\n                         hir_id,\n                         name,\n-                        span: lifetime.span,\n+                        span: self.context.lower_span(lifetime.span),\n                         pure_wrt_drop: false,\n                         bounds: &[],\n                         kind: hir::GenericParamKind::Lifetime { kind },\n@@ -1790,7 +1806,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             ty,\n             pat: self.lower_pat(&l.pat),\n             init,\n-            span: l.span,\n+            span: self.lower_span(l.span),\n             source: hir::LocalSource::Normal,\n         }\n     }\n@@ -1804,8 +1820,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             inputs = &inputs[..inputs.len() - 1];\n         }\n         self.arena.alloc_from_iter(inputs.iter().map(|param| match param.pat.kind {\n-            PatKind::Ident(_, ident, _) => ident,\n-            _ => Ident::new(kw::Empty, param.pat.span),\n+            PatKind::Ident(_, ident, _) => self.lower_ident(ident),\n+            _ => Ident::new(kw::Empty, self.lower_span(param.pat.span)),\n         }))\n     }\n \n@@ -1889,7 +1905,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     };\n                     hir::FnRetTy::Return(self.lower_ty(ty, context))\n                 }\n-                FnRetTy::Default(span) => hir::FnRetTy::DefaultReturn(span),\n+                FnRetTy::Default(span) => hir::FnRetTy::DefaultReturn(self.lower_span(span)),\n             }\n         };\n \n@@ -2046,8 +2062,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             let opaque_ty_item = hir::OpaqueTy {\n                 generics: hir::Generics {\n                     params: generic_params,\n-                    where_clause: hir::WhereClause { predicates: &[], span },\n-                    span,\n+                    where_clause: hir::WhereClause { predicates: &[], span: this.lower_span(span) },\n+                    span: this.lower_span(span),\n                 },\n                 bounds: arena_vec![this; future_bound],\n                 impl_trait_fn: Some(fn_def_id),\n@@ -2082,7 +2098,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 // Input lifetime like `'a` or `'1`:\n                 GenericArg::Lifetime(hir::Lifetime {\n                     hir_id: self.next_id(),\n-                    span,\n+                    span: self.lower_span(span),\n                     name: hir::LifetimeName::Param(hir_name),\n                 })\n             },\n@@ -2091,7 +2107,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             // Output lifetime like `'_`.\n             GenericArg::Lifetime(hir::Lifetime {\n                 hir_id: self.next_id(),\n-                span,\n+                span: self.lower_span(span),\n                 name: hir::LifetimeName::Implicit,\n             })));\n         let generic_args = self.arena.alloc_from_iter(generic_args);\n@@ -2139,7 +2155,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         hir::GenericBound::LangItemTrait(\n             // ::std::future::Future<future_params>\n             hir::LangItem::Future,\n-            span,\n+            self.lower_span(span),\n             self.next_id(),\n             future_args,\n         )\n@@ -2162,7 +2178,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     }\n \n     fn lower_lifetime(&mut self, l: &Lifetime) -> hir::Lifetime {\n-        let span = l.ident.span;\n+        let span = self.lower_span(l.ident.span);\n         match l.ident {\n             ident if ident.name == kw::StaticLifetime => {\n                 self.new_named_lifetime(l.id, span, hir::LifetimeName::Static)\n@@ -2181,7 +2197,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             },\n             ident => {\n                 self.maybe_collect_in_band_lifetime(ident);\n-                let param_name = ParamName::Plain(ident);\n+                let param_name = ParamName::Plain(self.lower_ident(ident));\n                 self.new_named_lifetime(l.id, span, hir::LifetimeName::Param(param_name))\n             }\n         }\n@@ -2193,7 +2209,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         span: Span,\n         name: hir::LifetimeName,\n     ) -> hir::Lifetime {\n-        hir::Lifetime { hir_id: self.lower_node_id(id), span, name }\n+        hir::Lifetime { hir_id: self.lower_node_id(id), span: self.lower_span(span), name }\n     }\n \n     fn lower_generic_params_mut<'s>(\n@@ -2276,24 +2292,31 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         .next(),\n                 };\n \n-                (hir::ParamName::Plain(param.ident), kind)\n+                (hir::ParamName::Plain(self.lower_ident(param.ident)), kind)\n             }\n             GenericParamKind::Const { ref ty, kw_span: _, ref default } => {\n                 let ty = self\n                     .with_anonymous_lifetime_mode(AnonymousLifetimeMode::ReportError, |this| {\n                         this.lower_ty(&ty, ImplTraitContext::disallowed())\n                     });\n                 let default = default.as_ref().map(|def| self.lower_anon_const(def));\n-                (hir::ParamName::Plain(param.ident), hir::GenericParamKind::Const { ty, default })\n+                (\n+                    hir::ParamName::Plain(self.lower_ident(param.ident)),\n+                    hir::GenericParamKind::Const { ty, default },\n+                )\n             }\n         };\n+        let name = match name {\n+            hir::ParamName::Plain(ident) => hir::ParamName::Plain(self.lower_ident(ident)),\n+            name => name,\n+        };\n \n         let hir_id = self.lower_node_id(param.id);\n         self.lower_attrs(hir_id, &param.attrs);\n         hir::GenericParam {\n             hir_id,\n             name,\n-            span: param.ident.span,\n+            span: self.lower_span(param.ident.span),\n             pure_wrt_drop: self.sess.contains_name(&param.attrs, sym::may_dangle),\n             bounds: self.arena.alloc_from_iter(bounds),\n             kind,\n@@ -2350,7 +2373,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             res\n         });\n \n-        hir::PolyTraitRef { bound_generic_params, trait_ref, span: p.span }\n+        hir::PolyTraitRef { bound_generic_params, trait_ref, span: self.lower_span(p.span) }\n     }\n \n     fn lower_mt(&mut self, mt: &MutTy, itctx: ImplTraitContext<'_, 'hir>) -> hir::MutTy<'hir> {\n@@ -2387,7 +2410,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let rules = self.lower_block_check_mode(&b.rules);\n         let hir_id = self.lower_node_id(b.id);\n \n-        hir::Block { hir_id, stmts, expr, rules, span: b.span, targeted_by_break }\n+        hir::Block { hir_id, stmts, expr, rules, span: self.lower_span(b.span), targeted_by_break }\n     }\n \n     /// Lowers a block directly to an expression, presuming that it\n@@ -2413,7 +2436,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 return smallvec![hir::Stmt {\n                     hir_id,\n                     kind: hir::StmtKind::Local(self.arena.alloc(l)),\n-                    span: s.span,\n+                    span: self.lower_span(s.span),\n                 }];\n             }\n             StmtKind::Item(ref it) => {\n@@ -2428,7 +2451,11 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             .map(|id| self.lower_node_id(id))\n                             .unwrap_or_else(|| self.next_id());\n \n-                        hir::Stmt { hir_id, kind: hir::StmtKind::Item(item_id), span: s.span }\n+                        hir::Stmt {\n+                            hir_id,\n+                            kind: hir::StmtKind::Item(item_id),\n+                            span: self.lower_span(s.span),\n+                        }\n                     })\n                     .collect();\n             }\n@@ -2447,7 +2474,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             StmtKind::Empty => return smallvec![],\n             StmtKind::MacCall(..) => panic!(\"shouldn't exist here\"),\n         };\n-        smallvec![hir::Stmt { hir_id, kind, span: s.span }]\n+        smallvec![hir::Stmt { hir_id, kind, span: self.lower_span(s.span) }]\n     }\n \n     fn lower_block_check_mode(&mut self, b: &BlockCheckMode) -> hir::BlockCheckMode {\n@@ -2482,7 +2509,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     // Helper methods for building HIR.\n \n     fn stmt(&mut self, span: Span, kind: hir::StmtKind<'hir>) -> hir::Stmt<'hir> {\n-        hir::Stmt { span, kind, hir_id: self.next_id() }\n+        hir::Stmt { span: self.lower_span(span), kind, hir_id: self.next_id() }\n     }\n \n     fn stmt_expr(&mut self, span: Span, expr: hir::Expr<'hir>) -> hir::Stmt<'hir> {\n@@ -2502,7 +2529,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             debug_assert!(!a.is_empty());\n             self.attrs.insert(hir_id, a);\n         }\n-        let local = hir::Local { hir_id, init, pat, source, span, ty: None };\n+        let local = hir::Local { hir_id, init, pat, source, span: self.lower_span(span), ty: None };\n         self.stmt(span, hir::StmtKind::Local(self.arena.alloc(local)))\n     }\n \n@@ -2521,7 +2548,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             expr,\n             hir_id: self.next_id(),\n             rules: hir::BlockCheckMode::DefaultBlock,\n-            span,\n+            span: self.lower_span(span),\n             targeted_by_break: false,\n         };\n         self.arena.alloc(blk)\n@@ -2553,10 +2580,10 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     ) -> &'hir [hir::PatField<'hir>] {\n         let field = hir::PatField {\n             hir_id: self.next_id(),\n-            ident: Ident::new(sym::integer(0), span),\n+            ident: Ident::new(sym::integer(0), self.lower_span(span)),\n             is_shorthand: false,\n             pat,\n-            span,\n+            span: self.lower_span(span),\n         };\n         arena_vec![self; field]\n     }\n@@ -2567,7 +2594,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         lang_item: hir::LangItem,\n         fields: &'hir [hir::PatField<'hir>],\n     ) -> &'hir hir::Pat<'hir> {\n-        let qpath = hir::QPath::LangItem(lang_item, span);\n+        let qpath = hir::QPath::LangItem(lang_item, self.lower_span(span));\n         self.pat(span, hir::PatKind::Struct(qpath, fields, false))\n     }\n \n@@ -2600,8 +2627,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         (\n             hir::Pat {\n                 hir_id,\n-                kind: hir::PatKind::Binding(bm, hir_id, ident.with_span_pos(span), None),\n-                span,\n+                kind: hir::PatKind::Binding(bm, hir_id, self.lower_ident(ident), None),\n+                span: self.lower_span(span),\n                 default_binding_modes: true,\n             },\n             hir_id,\n@@ -2612,13 +2639,18 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         self.arena.alloc(hir::Pat {\n             hir_id: self.next_id(),\n             kind,\n-            span,\n+            span: self.lower_span(span),\n             default_binding_modes: true,\n         })\n     }\n \n     fn pat_without_dbm(&mut self, span: Span, kind: hir::PatKind<'hir>) -> hir::Pat<'hir> {\n-        hir::Pat { hir_id: self.next_id(), kind, span, default_binding_modes: false }\n+        hir::Pat {\n+            hir_id: self.next_id(),\n+            kind,\n+            span: self.lower_span(span),\n+            default_binding_modes: false,\n+        }\n     }\n \n     fn ty_path(\n@@ -2635,7 +2667,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         let principal = hir::PolyTraitRef {\n                             bound_generic_params: &[],\n                             trait_ref: hir::TraitRef { path, hir_ref_id: hir_id },\n-                            span,\n+                            span: self.lower_span(span),\n                         };\n \n                         // The original ID is taken by the `PolyTraitRef`,\n@@ -2653,7 +2685,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             _ => hir::TyKind::Path(qpath),\n         };\n \n-        hir::Ty { hir_id, kind, span }\n+        hir::Ty { hir_id, kind, span: self.lower_span(span) }\n     }\n \n     /// Invoked to create the lifetime argument for a type `&T`\n@@ -2668,7 +2700,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 let fresh_name = self.collect_fresh_in_band_lifetime(span);\n                 hir::Lifetime {\n                     hir_id: self.next_id(),\n-                    span,\n+                    span: self.lower_span(span),\n                     name: hir::LifetimeName::Param(fresh_name),\n                 }\n             }\n@@ -2763,15 +2795,19 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n         let r = hir::Lifetime {\n             hir_id: self.next_id(),\n-            span,\n+            span: self.lower_span(span),\n             name: hir::LifetimeName::ImplicitObjectLifetimeDefault,\n         };\n         debug!(\"elided_dyn_bound: r={:?}\", r);\n         r\n     }\n \n     fn new_implicit_lifetime(&mut self, span: Span) -> hir::Lifetime {\n-        hir::Lifetime { hir_id: self.next_id(), span, name: hir::LifetimeName::Implicit }\n+        hir::Lifetime {\n+            hir_id: self.next_id(),\n+            span: self.lower_span(span),\n+            name: hir::LifetimeName::Implicit,\n+        }\n     }\n \n     fn maybe_lint_bare_trait(&mut self, span: Span, id: NodeId, is_global: bool) {\n@@ -2849,12 +2885,13 @@ impl<'hir> GenericArgsCtor<'hir> {\n         self.args.is_empty() && self.bindings.is_empty() && !self.parenthesized\n     }\n \n-    fn into_generic_args(self, arena: &'hir Arena<'hir>) -> hir::GenericArgs<'hir> {\n-        hir::GenericArgs {\n-            args: arena.alloc_from_iter(self.args),\n+    fn into_generic_args(self, this: &LoweringContext<'_, 'hir>) -> &'hir hir::GenericArgs<'hir> {\n+        let ga = hir::GenericArgs {\n+            args: this.arena.alloc_from_iter(self.args),\n             bindings: self.bindings,\n             parenthesized: self.parenthesized,\n-            span_ext: self.span,\n-        }\n+            span_ext: this.lower_span(self.span),\n+        };\n+        this.arena.alloc(ga)\n     }\n }"}, {"sha": "0a9b264aa42636a319b48bca8f2c0a3e2c736c44", "filename": "compiler/rustc_ast_lowering/src/pat.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ef524710669a003cf2b24361dc6b04b566e560fa/compiler%2Frustc_ast_lowering%2Fsrc%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef524710669a003cf2b24361dc6b04b566e560fa/compiler%2Frustc_ast_lowering%2Fsrc%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpat.rs?ref=ef524710669a003cf2b24361dc6b04b566e560fa", "patch": "@@ -62,10 +62,10 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n                         let fs = self.arena.alloc_from_iter(fields.iter().map(|f| hir::PatField {\n                             hir_id: self.next_id(),\n-                            ident: f.ident,\n+                            ident: self.lower_ident(f.ident),\n                             pat: self.lower_pat(&f.pat),\n                             is_shorthand: f.is_shorthand,\n-                            span: f.span,\n+                            span: self.lower_span(f.span),\n                         }));\n                         break hir::PatKind::Struct(qpath, fs, etc);\n                     }\n@@ -247,16 +247,16 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 hir::PatKind::Binding(\n                     self.lower_binding_mode(binding_mode),\n                     self.lower_node_id(canonical_id),\n-                    ident,\n+                    self.lower_ident(ident),\n                     lower_sub(self),\n                 )\n             }\n             Some(res) => hir::PatKind::Path(hir::QPath::Resolved(\n                 None,\n                 self.arena.alloc(hir::Path {\n-                    span: ident.span,\n+                    span: self.lower_span(ident.span),\n                     res: self.lower_res(res),\n-                    segments: arena_vec![self; hir::PathSegment::from_ident(ident)],\n+                    segments: arena_vec![self; hir::PathSegment::from_ident(self.lower_ident(ident))],\n                 }),\n             )),\n         }\n@@ -280,7 +280,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         hir::Pat {\n             hir_id: self.lower_node_id(p.id),\n             kind,\n-            span: p.span,\n+            span: self.lower_span(p.span),\n             default_binding_modes: true,\n         }\n     }"}, {"sha": "a11d020c9315f79f76ffa3dfcbfc123561c5bb39", "filename": "compiler/rustc_ast_lowering/src/path.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ef524710669a003cf2b24361dc6b04b566e560fa/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef524710669a003cf2b24361dc6b04b566e560fa/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs?ref=ef524710669a003cf2b24361dc6b04b566e560fa", "patch": "@@ -110,9 +110,11 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     )\n                 },\n             )),\n-            span: p.segments[..proj_start]\n-                .last()\n-                .map_or(path_span_lo, |segment| path_span_lo.to(segment.span())),\n+            span: self.lower_span(\n+                p.segments[..proj_start]\n+                    .last()\n+                    .map_or(path_span_lo, |segment| path_span_lo.to(segment.span())),\n+            ),\n         });\n \n         // Simple case, either no projections, or only fully-qualified.\n@@ -198,7 +200,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     explicit_owner,\n                 )\n             })),\n-            span: p.span,\n+            span: self.lower_span(p.span),\n         })\n     }\n \n@@ -370,14 +372,14 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         );\n \n         hir::PathSegment {\n-            ident: segment.ident,\n+            ident: self.lower_ident(segment.ident),\n             hir_id: Some(id),\n             res: Some(self.lower_res(res)),\n             infer_args,\n             args: if generic_args.is_empty() && generic_args.span.is_empty() {\n                 None\n             } else {\n-                Some(self.arena.alloc(generic_args.into_generic_args(self.arena)))\n+                Some(generic_args.into_generic_args(self))\n             },\n         }\n     }\n@@ -459,6 +461,12 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             parenthesized: false,\n             span_ext: DUMMY_SP,\n         });\n-        hir::TypeBinding { hir_id: self.next_id(), gen_args, span, ident, kind }\n+        hir::TypeBinding {\n+            hir_id: self.next_id(),\n+            gen_args,\n+            span: self.lower_span(span),\n+            ident,\n+            kind,\n+        }\n     }\n }"}]}