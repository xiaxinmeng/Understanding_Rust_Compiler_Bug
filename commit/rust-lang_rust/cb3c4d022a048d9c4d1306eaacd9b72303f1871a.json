{"sha": "cb3c4d022a048d9c4d1306eaacd9b72303f1871a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiM2M0ZDAyMmEwNDhkOWM0ZDEzMDZlYWFjZDliNzIzMDNmMTg3MWE=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-03-08T18:03:04Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-04-12T17:20:53Z"}, "message": "rustc_trans: don't emit ZST allocas that are only assigned to.", "tree": {"sha": "2596038b8c4eceaea2a984bb451f742e7fc0815d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2596038b8c4eceaea2a984bb451f742e7fc0815d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb3c4d022a048d9c4d1306eaacd9b72303f1871a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb3c4d022a048d9c4d1306eaacd9b72303f1871a", "html_url": "https://github.com/rust-lang/rust/commit/cb3c4d022a048d9c4d1306eaacd9b72303f1871a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb3c4d022a048d9c4d1306eaacd9b72303f1871a/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "910c4816fdee01a1299d11a5e85ebb4aceee6d1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/910c4816fdee01a1299d11a5e85ebb4aceee6d1a", "html_url": "https://github.com/rust-lang/rust/commit/910c4816fdee01a1299d11a5e85ebb4aceee6d1a"}], "stats": {"total": 90, "additions": 49, "deletions": 41}, "files": [{"sha": "889f9dc4cded5880f85a9c2171a7b24e708d350c", "filename": "src/librustc_trans/mir/analyze.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb3c4d022a048d9c4d1306eaacd9b72303f1871a/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb3c4d022a048d9c4d1306eaacd9b72303f1871a/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs?ref=cb3c4d022a048d9c4d1306eaacd9b72303f1871a", "patch": "@@ -19,7 +19,6 @@ use rustc::mir::visit::{Visitor, LvalueContext};\n use rustc::mir::traversal;\n use common;\n use super::MirContext;\n-use super::rvalue;\n \n pub fn lvalue_locals<'a, 'tcx>(mircx: &MirContext<'a, 'tcx>) -> BitVector {\n     let mir = mircx.mir;\n@@ -93,7 +92,7 @@ impl<'mir, 'a, 'tcx> Visitor<'tcx> for LocalAnalyzer<'mir, 'a, 'tcx> {\n \n         if let mir::Lvalue::Local(index) = *lvalue {\n             self.mark_assigned(index);\n-            if !rvalue::rvalue_creates_operand(rvalue) {\n+            if !self.cx.rvalue_creates_operand(rvalue) {\n                 self.mark_as_lvalue(index);\n             }\n         } else {"}, {"sha": "99d8cd594ecddc032f51dedb69016fb0829e581c", "filename": "src/librustc_trans/mir/mod.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cb3c4d022a048d9c4d1306eaacd9b72303f1871a/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb3c4d022a048d9c4d1306eaacd9b72303f1871a/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fmod.rs?ref=cb3c4d022a048d9c4d1306eaacd9b72303f1871a", "patch": "@@ -11,17 +11,16 @@\n use libc::c_uint;\n use llvm::{self, ValueRef, BasicBlockRef};\n use llvm::debuginfo::DIScope;\n-use rustc::ty;\n+use rustc::ty::{self, Ty, TypeFoldable};\n use rustc::ty::layout::{self, LayoutTyper};\n use rustc::mir::{self, Mir};\n use rustc::mir::tcx::LvalueTy;\n use rustc::ty::subst::Substs;\n use rustc::infer::TransNormalize;\n-use rustc::ty::TypeFoldable;\n use session::config::FullDebugInfo;\n use base;\n use builder::Builder;\n-use common::{self, CrateContext, C_null, Funclet};\n+use common::{self, CrateContext, Funclet};\n use debuginfo::{self, declare_local, VariableAccess, VariableKind, FunctionDebugContext};\n use monomorphize::{self, Instance};\n use abi::FnType;\n@@ -171,23 +170,12 @@ enum LocalRef<'tcx> {\n \n impl<'tcx> LocalRef<'tcx> {\n     fn new_operand<'a>(ccx: &CrateContext<'a, 'tcx>,\n-                         ty: ty::Ty<'tcx>) -> LocalRef<'tcx> {\n+                       ty: Ty<'tcx>) -> LocalRef<'tcx> {\n         if common::type_is_zero_size(ccx, ty) {\n             // Zero-size temporaries aren't always initialized, which\n             // doesn't matter because they don't contain data, but\n             // we need something in the operand.\n-            let llty = type_of::type_of(ccx, ty);\n-            let val = if common::type_is_imm_pair(ccx, ty) {\n-                let fields = llty.field_types();\n-                OperandValue::Pair(C_null(fields[0]), C_null(fields[1]))\n-            } else {\n-                OperandValue::Immediate(C_null(llty))\n-            };\n-            let op = OperandRef {\n-                val: val,\n-                ty: ty\n-            };\n-            LocalRef::Operand(Some(op))\n+            LocalRef::Operand(Some(OperandRef::new_zst(ccx, ty)))\n         } else {\n             LocalRef::Operand(None)\n         }"}, {"sha": "c31142323c85f56f8514978e701f82d548b85ee6", "filename": "src/librustc_trans/mir/operand.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cb3c4d022a048d9c4d1306eaacd9b72303f1871a/src%2Flibrustc_trans%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb3c4d022a048d9c4d1306eaacd9b72303f1871a/src%2Flibrustc_trans%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Foperand.rs?ref=cb3c4d022a048d9c4d1306eaacd9b72303f1871a", "patch": "@@ -16,7 +16,7 @@ use rustc::mir::tcx::LvalueTy;\n use rustc_data_structures::indexed_vec::Idx;\n \n use base;\n-use common;\n+use common::{self, CrateContext, C_null};\n use builder::Builder;\n use value::Value;\n use type_of;\n@@ -79,6 +79,22 @@ impl<'tcx> fmt::Debug for OperandRef<'tcx> {\n }\n \n impl<'a, 'tcx> OperandRef<'tcx> {\n+    pub fn new_zst(ccx: &CrateContext<'a, 'tcx>,\n+                   ty: Ty<'tcx>) -> OperandRef<'tcx> {\n+        assert!(common::type_is_zero_size(ccx, ty));\n+        let llty = type_of::type_of(ccx, ty);\n+        let val = if common::type_is_imm_pair(ccx, ty) {\n+            let fields = llty.field_types();\n+            OperandValue::Pair(C_null(fields[0]), C_null(fields[1]))\n+        } else {\n+            OperandValue::Immediate(C_null(llty))\n+        };\n+        OperandRef {\n+            val: val,\n+            ty: ty\n+        }\n+    }\n+\n     /// Asserts that this operand refers to a scalar and returns\n     /// a reference to its value.\n     pub fn immediate(self) -> ValueRef {"}, {"sha": "aa41720d717a7268a979ccd7c8b3a955e6eae572", "filename": "src/librustc_trans/mir/rvalue.rs", "status": "modified", "additions": 27, "deletions": 22, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/cb3c4d022a048d9c4d1306eaacd9b72303f1871a/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb3c4d022a048d9c4d1306eaacd9b72303f1871a/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Frvalue.rs?ref=cb3c4d022a048d9c4d1306eaacd9b72303f1871a", "patch": "@@ -158,7 +158,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n             }\n \n             _ => {\n-                assert!(rvalue_creates_operand(rvalue));\n+                assert!(self.rvalue_creates_operand(rvalue));\n                 let (bcx, temp) = self.trans_rvalue_operand(bcx, rvalue);\n                 self.store_operand(&bcx, dest.llval, dest.alignment.to_align(), temp);\n                 bcx\n@@ -171,7 +171,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                                 rvalue: &mir::Rvalue<'tcx>)\n                                 -> (Builder<'a, 'tcx>, OperandRef<'tcx>)\n     {\n-        assert!(rvalue_creates_operand(rvalue), \"cannot trans {:?} to operand\", rvalue);\n+        assert!(self.rvalue_creates_operand(rvalue), \"cannot trans {:?} to operand\", rvalue);\n \n         match *rvalue {\n             mir::Rvalue::Cast(ref kind, ref source, cast_ty) => {\n@@ -466,8 +466,10 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n             }\n             mir::Rvalue::Repeat(..) |\n             mir::Rvalue::Aggregate(..) => {\n-                bug!(\"cannot generate operand from rvalue {:?}\", rvalue);\n-\n+                // According to `rvalue_creates_operand`, only ZST\n+                // aggregate rvalues are allowed to be operands.\n+                let ty = rvalue.ty(self.mir, self.ccx.tcx());\n+                (bcx, OperandRef::new_zst(self.ccx, self.monomorphize(&ty)))\n             }\n         }\n     }\n@@ -650,26 +652,29 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n \n         OperandValue::Pair(val, of)\n     }\n-}\n \n-pub fn rvalue_creates_operand(rvalue: &mir::Rvalue) -> bool {\n-    match *rvalue {\n-        mir::Rvalue::Ref(..) |\n-        mir::Rvalue::Len(..) |\n-        mir::Rvalue::Cast(..) | // (*)\n-        mir::Rvalue::BinaryOp(..) |\n-        mir::Rvalue::CheckedBinaryOp(..) |\n-        mir::Rvalue::UnaryOp(..) |\n-        mir::Rvalue::Discriminant(..) |\n-        mir::Rvalue::Box(..) |\n-        mir::Rvalue::Use(..) => // (*)\n-            true,\n-        mir::Rvalue::Repeat(..) |\n-        mir::Rvalue::Aggregate(..) =>\n-            false,\n-    }\n+    pub fn rvalue_creates_operand(&self, rvalue: &mir::Rvalue<'tcx>) -> bool {\n+        match *rvalue {\n+            mir::Rvalue::Ref(..) |\n+            mir::Rvalue::Len(..) |\n+            mir::Rvalue::Cast(..) | // (*)\n+            mir::Rvalue::BinaryOp(..) |\n+            mir::Rvalue::CheckedBinaryOp(..) |\n+            mir::Rvalue::UnaryOp(..) |\n+            mir::Rvalue::Discriminant(..) |\n+            mir::Rvalue::Box(..) |\n+            mir::Rvalue::Use(..) => // (*)\n+                true,\n+            mir::Rvalue::Repeat(..) |\n+            mir::Rvalue::Aggregate(..) => {\n+                let ty = rvalue.ty(self.mir, self.ccx.tcx());\n+                let ty = self.monomorphize(&ty);\n+                common::type_is_zero_size(self.ccx, ty)\n+            }\n+        }\n \n-    // (*) this is only true if the type is suitable\n+        // (*) this is only true if the type is suitable\n+    }\n }\n \n #[derive(Copy, Clone)]"}]}