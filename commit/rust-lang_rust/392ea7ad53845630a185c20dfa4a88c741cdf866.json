{"sha": "392ea7ad53845630a185c20dfa4a88c741cdf866", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5MmVhN2FkNTM4NDU2MzBhMTg1YzIwZGZhNGE4OGM3NDFjZGY4NjY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-09-30T10:37:00Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-09-30T10:37:00Z"}, "message": "do not normalize non-scalar constants to a ConstValue::ScalarPair", "tree": {"sha": "ce5741fba5b80969fd182f3c7711e60e737edb94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce5741fba5b80969fd182f3c7711e60e737edb94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/392ea7ad53845630a185c20dfa4a88c741cdf866", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/392ea7ad53845630a185c20dfa4a88c741cdf866", "html_url": "https://github.com/rust-lang/rust/commit/392ea7ad53845630a185c20dfa4a88c741cdf866", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/392ea7ad53845630a185c20dfa4a88c741cdf866/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb50e75729bce449272ffb3bfbca2f7234f2ae13", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb50e75729bce449272ffb3bfbca2f7234f2ae13", "html_url": "https://github.com/rust-lang/rust/commit/eb50e75729bce449272ffb3bfbca2f7234f2ae13"}], "stats": {"total": 90, "additions": 53, "deletions": 37}, "files": [{"sha": "bd1061d9bcfc4e34e45dc08fceaf96a866eda248", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/392ea7ad53845630a185c20dfa4a88c741cdf866/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/392ea7ad53845630a185c20dfa4a88c741cdf866/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=392ea7ad53845630a185c20dfa4a88c741cdf866", "patch": "@@ -24,15 +24,18 @@ pub enum ConstValue<'tcx> {\n     /// to allow HIR creation to happen for everything before needing to be able to run constant\n     /// evaluation\n     Unevaluated(DefId, &'tcx Substs<'tcx>),\n+\n     /// Used only for types with layout::abi::Scalar ABI and ZSTs\n     ///\n     /// Not using the enum `Value` to encode that this must not be `Undef`\n     Scalar(Scalar),\n-    /// Used only for types with layout::abi::ScalarPair\n+\n+    /// Used only for *fat pointers* with layout::abi::ScalarPair\n     ///\n-    /// The second field may be undef in case of `Option<usize>::None`\n-    ScalarPair(Scalar, ScalarMaybeUndef),\n-    /// Used only for the remaining cases. An allocation + offset into the allocation.\n+    /// Needed for pattern matching code related to slices and strings.\n+    ScalarPair(Scalar, Scalar),\n+\n+    /// An allocation + offset into the allocation.\n     /// Invariant: The AllocId matches the allocation.\n     ByRef(AllocId, &'tcx Allocation, Size),\n }\n@@ -67,12 +70,12 @@ impl<'tcx> ConstValue<'tcx> {\n         ConstValue::ScalarPair(val, Scalar::Bits {\n             bits: len as u128,\n             size: cx.data_layout().pointer_size.bytes() as u8,\n-        }.into())\n+        })\n     }\n \n     #[inline]\n     pub fn new_dyn_trait(val: Scalar, vtable: Pointer) -> Self {\n-        ConstValue::ScalarPair(val, Scalar::Ptr(vtable).into())\n+        ConstValue::ScalarPair(val, Scalar::Ptr(vtable))\n     }\n }\n "}, {"sha": "6ef20f32d157722cb857782d1d108792d92357fc", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/392ea7ad53845630a185c20dfa4a88c741cdf866/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/392ea7ad53845630a185c20dfa4a88c741cdf866/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=392ea7ad53845630a185c20dfa4a88c741cdf866", "patch": "@@ -17,7 +17,7 @@ use hir::def::CtorKind;\n use hir::def_id::DefId;\n use hir::{self, HirId, InlineAsm};\n use middle::region;\n-use mir::interpret::{ConstValue, EvalErrorKind, Scalar, ScalarMaybeUndef};\n+use mir::interpret::{ConstValue, EvalErrorKind, Scalar};\n use mir::visit::MirVisitable;\n use rustc_apfloat::ieee::{Double, Single};\n use rustc_apfloat::Float;\n@@ -2397,7 +2397,7 @@ pub fn fmt_const_val(f: &mut impl Write, const_val: &ty::Const) -> fmt::Result {\n     // print string literals\n     if let ConstValue::ScalarPair(ptr, len) = value {\n         if let Scalar::Ptr(ptr) = ptr {\n-            if let ScalarMaybeUndef::Scalar(Scalar::Bits { bits: len, .. }) = len {\n+            if let Scalar::Bits { bits: len, .. } = len {\n                 if let Ref(_, &ty::TyS { sty: Str, .. }, _) = ty.sty {\n                     return ty::tls::with(|tcx| {\n                         let alloc = tcx.alloc_map.lock().get(ptr.alloc_id);"}, {"sha": "ab43531240f3f5509637915e1fb7529be2dcfee6", "filename": "src/librustc_codegen_llvm/mir/operand.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/392ea7ad53845630a185c20dfa4a88c741cdf866/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/392ea7ad53845630a185c20dfa4a88c741cdf866/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs?ref=392ea7ad53845630a185c20dfa4a88c741cdf866", "patch": "@@ -8,9 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use rustc::mir::interpret::ConstEvalErr;\n+use rustc::mir::interpret::{ConstValue, ConstEvalErr};\n use rustc::mir;\n-use rustc::mir::interpret::{ConstValue, ScalarMaybeUndef};\n use rustc::ty;\n use rustc::ty::layout::{self, Align, LayoutOf, TyLayout};\n use rustc_data_structures::sync::Lrc;\n@@ -114,15 +113,12 @@ impl OperandRef<'ll, 'tcx> {\n                     layout.scalar_pair_element_llvm_type(bx.cx, 0, true),\n                 );\n                 let b_layout = layout.scalar_pair_element_llvm_type(bx.cx, 1, true);\n-                let b_llval = match b {\n-                    ScalarMaybeUndef::Scalar(b) => scalar_to_llvm(\n-                        bx.cx,\n-                        b,\n-                        b_scalar,\n-                        b_layout,\n-                    ),\n-                    ScalarMaybeUndef::Undef => C_undef(b_layout),\n-                };\n+                let b_llval = scalar_to_llvm(\n+                    bx.cx,\n+                    b,\n+                    b_scalar,\n+                    b_layout,\n+                );\n                 OperandValue::Pair(a_llval, b_llval)\n             },\n             ConstValue::ByRef(_, alloc, offset) => {"}, {"sha": "07e2cfe1e80d2f318c4214aa24c2c08b41e31c5e", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/392ea7ad53845630a185c20dfa4a88c741cdf866/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/392ea7ad53845630a185c20dfa4a88c741cdf866/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=392ea7ad53845630a185c20dfa4a88c741cdf866", "patch": "@@ -17,7 +17,7 @@ use rustc::hir::{self, def_id::DefId};\n use rustc::mir::interpret::ConstEvalErr;\n use rustc::mir;\n use rustc::ty::{self, TyCtxt, Instance, query::TyCtxtAt};\n-use rustc::ty::layout::{LayoutOf, TyLayout};\n+use rustc::ty::layout::{self, LayoutOf, TyLayout};\n use rustc::ty::subst::Subst;\n use rustc_data_structures::indexed_vec::IndexVec;\n \n@@ -97,8 +97,18 @@ pub(crate) fn eval_promoted<'a, 'mir, 'tcx>(\n pub fn op_to_const<'tcx>(\n     ecx: &CompileTimeEvalContext<'_, '_, 'tcx>,\n     op: OpTy<'tcx>,\n-    normalize: bool,\n+    may_normalize: bool,\n ) -> EvalResult<'tcx, &'tcx ty::Const<'tcx>> {\n+    // We do not normalize just any data.  Only scalar layout and fat pointers.\n+    let normalize = may_normalize\n+        && match op.layout.abi {\n+            layout::Abi::Scalar(..) => true,\n+            layout::Abi::ScalarPair(..) => {\n+                // Must be a fat pointer\n+                op.layout.ty.builtin_deref(true).is_some()\n+            },\n+            _ => false,\n+        };\n     let normalized_op = if normalize {\n         ecx.try_read_value(op)?\n     } else {\n@@ -125,7 +135,7 @@ pub fn op_to_const<'tcx>(\n         Ok(Value::Scalar(x)) =>\n             ConstValue::Scalar(x.not_undef()?),\n         Ok(Value::ScalarPair(a, b)) =>\n-            ConstValue::ScalarPair(a.not_undef()?, b),\n+            ConstValue::ScalarPair(a.not_undef()?, b.not_undef()?),\n     };\n     Ok(ty::Const::from_const_value(ecx.tcx.tcx, val, op.layout.ty))\n }"}, {"sha": "b22cc4a1a42b50d14c1d139f99a9044c334b13b9", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/392ea7ad53845630a185c20dfa4a88c741cdf866/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/392ea7ad53845630a185c20dfa4a88c741cdf866/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=392ea7ad53845630a185c20dfa4a88c741cdf866", "patch": "@@ -1124,13 +1124,6 @@ pub fn compare_const_vals<'a, 'tcx>(\n                         len_b,\n                     ),\n                 ) if ptr_a.offset.bytes() == 0 && ptr_b.offset.bytes() == 0 => {\n-                    let len_a = len_a.not_undef().ok();\n-                    let len_b = len_b.not_undef().ok();\n-                    if len_a.is_none() || len_b.is_none() {\n-                        tcx.sess.struct_err(\"str slice len is undef\").delay_as_bug();\n-                    }\n-                    let len_a = len_a?;\n-                    let len_b = len_b?;\n                     if let Ok(len_a) = len_a.to_bits(tcx.data_layout.pointer_size) {\n                         if let Ok(len_b) = len_b.to_bits(tcx.data_layout.pointer_size) {\n                             if len_a == len_b {"}, {"sha": "8efd2c6af67c446f2fbd09c305a3019be0f28738", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/392ea7ad53845630a185c20dfa4a88c741cdf866/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/392ea7ad53845630a185c20dfa4a88c741cdf866/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=392ea7ad53845630a185c20dfa4a88c741cdf866", "patch": "@@ -490,7 +490,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                 Ok(Operand::Indirect(MemPlace::from_ptr(Pointer::new(id, offset), alloc.align)))\n             },\n             ConstValue::ScalarPair(a, b) =>\n-                Ok(Operand::Immediate(Value::ScalarPair(a.into(), b))),\n+                Ok(Operand::Immediate(Value::ScalarPair(a.into(), b.into()))),\n             ConstValue::Scalar(x) =>\n                 Ok(Operand::Immediate(Value::Scalar(x.into()))),\n         }"}, {"sha": "b2fa83493849cf37f2dad731c8e11cadd67a59ba", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/392ea7ad53845630a185c20dfa4a88c741cdf866/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/392ea7ad53845630a185c20dfa4a88c741cdf866/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=392ea7ad53845630a185c20dfa4a88c741cdf866", "patch": "@@ -193,7 +193,7 @@ use rustc::hir::itemlikevisit::ItemLikeVisitor;\n \n use rustc::hir::Node;\n use rustc::hir::def_id::DefId;\n-use rustc::mir::interpret::{AllocId, ConstValue, ScalarMaybeUndef};\n+use rustc::mir::interpret::{AllocId, ConstValue};\n use rustc::middle::lang_items::{ExchangeMallocFnLangItem, StartFnLangItem};\n use rustc::ty::subst::Substs;\n use rustc::ty::{self, TypeFoldable, Ty, TyCtxt, GenericParamDefKind};\n@@ -1263,11 +1263,11 @@ fn collect_const<'a, 'tcx>(\n     };\n     match val {\n         ConstValue::Unevaluated(..) => bug!(\"const eval yielded unevaluated const\"),\n-        ConstValue::ScalarPair(Scalar::Ptr(a), ScalarMaybeUndef::Scalar(Scalar::Ptr(b))) => {\n+        ConstValue::ScalarPair(Scalar::Ptr(a), Scalar::Ptr(b)) => {\n             collect_miri(tcx, a.alloc_id, output);\n             collect_miri(tcx, b.alloc_id, output);\n         }\n-        ConstValue::ScalarPair(_, ScalarMaybeUndef::Scalar(Scalar::Ptr(ptr))) |\n+        ConstValue::ScalarPair(_, Scalar::Ptr(ptr)) |\n         ConstValue::ScalarPair(Scalar::Ptr(ptr), _) |\n         ConstValue::Scalar(Scalar::Ptr(ptr)) =>\n             collect_miri(tcx, ptr.alloc_id, output),"}, {"sha": "5d50004e5549d112925063af615bf2cb444cca51", "filename": "src/test/ui/consts/const-eval/union-ice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/392ea7ad53845630a185c20dfa4a88c741cdf866/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/392ea7ad53845630a185c20dfa4a88c741cdf866/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.rs?ref=392ea7ad53845630a185c20dfa4a88c741cdf866", "patch": "@@ -22,7 +22,7 @@ const UNION: DummyUnion = DummyUnion { field1: 1065353216 };\n \n const FIELD3: Field3 = unsafe { UNION.field3 }; //~ ERROR this constant cannot be used\n \n-const FIELD_PATH: Struct = Struct { //~ ERROR this constant cannot be used\n+const FIELD_PATH: Struct = Struct { //~ ERROR this constant likely exhibits undefined behavior\n     a: 42,\n     b: unsafe { UNION.field3 },\n };"}, {"sha": "ec51802681e0df40295b55d80407b9800539969f", "filename": "src/test/ui/consts/const-eval/union-ice.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/392ea7ad53845630a185c20dfa4a88c741cdf866/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/392ea7ad53845630a185c20dfa4a88c741cdf866/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.stderr?ref=392ea7ad53845630a185c20dfa4a88c741cdf866", "patch": "@@ -6,14 +6,16 @@ LL | const FIELD3: Field3 = unsafe { UNION.field3 }; //~ ERROR this constant can\n    |\n    = note: #[deny(const_err)] on by default\n \n-error: this constant cannot be used\n+error[E0080]: this constant likely exhibits undefined behavior\n   --> $DIR/union-ice.rs:25:1\n    |\n-LL | / const FIELD_PATH: Struct = Struct { //~ ERROR this constant cannot be used\n+LL | / const FIELD_PATH: Struct = Struct { //~ ERROR this constant likely exhibits undefined behavior\n LL | |     a: 42,\n LL | |     b: unsafe { UNION.field3 },\n LL | | };\n-   | |__^ attempted to read undefined bytes\n+   | |__^ type validation failed: encountered undefined bytes at .b\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: this constant likely exhibits undefined behavior\n   --> $DIR/union-ice.rs:35:1"}, {"sha": "ac1033add0ee49376c5eea7cf30bf169a601fcba", "filename": "src/test/ui/issues/issue-54387.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/392ea7ad53845630a185c20dfa4a88c741cdf866/src%2Ftest%2Fui%2Fissues%2Fissue-54387.rs", "raw_url": "https://github.com/rust-lang/rust/raw/392ea7ad53845630a185c20dfa4a88c741cdf866/src%2Ftest%2Fui%2Fissues%2Fissue-54387.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54387.rs?ref=392ea7ad53845630a185c20dfa4a88c741cdf866", "patch": "@@ -0,0 +1,12 @@\n+// compile-pass\n+\n+pub struct GstRc {\n+    _obj: *const (),\n+    _borrowed: bool,\n+}\n+\n+const FOO: Option<GstRc> = None;\n+\n+fn main() {\n+    let _meh = FOO;\n+}"}]}