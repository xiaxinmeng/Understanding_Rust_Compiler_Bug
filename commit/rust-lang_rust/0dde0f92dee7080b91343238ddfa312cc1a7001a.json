{"sha": "0dde0f92dee7080b91343238ddfa312cc1a7001a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkZGUwZjkyZGVlNzA4MGI5MTM0MzIzOGRkZmEzMTJjYzFhNzAwMWE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-02T09:33:49Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-02T09:33:49Z"}, "message": "Reorder fields", "tree": {"sha": "054de70d45697d49887501910a25c1f14b1e4fc9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/054de70d45697d49887501910a25c1f14b1e4fc9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0dde0f92dee7080b91343238ddfa312cc1a7001a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0dde0f92dee7080b91343238ddfa312cc1a7001a", "html_url": "https://github.com/rust-lang/rust/commit/0dde0f92dee7080b91343238ddfa312cc1a7001a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0dde0f92dee7080b91343238ddfa312cc1a7001a/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ee96dcf4a2b47a6df0e3ea379d36aec2e6e1784", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ee96dcf4a2b47a6df0e3ea379d36aec2e6e1784", "html_url": "https://github.com/rust-lang/rust/commit/9ee96dcf4a2b47a6df0e3ea379d36aec2e6e1784"}], "stats": {"total": 91, "additions": 47, "deletions": 44}, "files": [{"sha": "f4c15405898609a9753f13545c9c76c77a0d0de9", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 47, "deletions": 44, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/0dde0f92dee7080b91343238ddfa312cc1a7001a/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dde0f92dee7080b91343238ddfa312cc1a7001a/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=0dde0f92dee7080b91343238ddfa312cc1a7001a", "patch": "@@ -16,20 +16,24 @@ use serde::Deserialize;\n #[derive(Debug, Clone)]\n pub struct Config {\n     pub client_caps: ClientCapsConfig,\n+\n+    pub with_sysroot: bool,\n     pub publish_diagnostics: bool,\n-    pub notifications: NotificationsConfig,\n-    pub inlay_hints: InlayHintsConfig,\n-    pub completion: CompletionConfig,\n-    pub call_info_full: bool,\n-    pub rustfmt: RustfmtConfig,\n-    pub check: Option<FlycheckConfig>,\n+    pub use_client_watching: bool,\n+    // TODO: move to experimental capabilities\n     pub vscode_lldb: bool,\n-    pub proc_macro_srv: Option<String>,\n     pub lru_capacity: Option<usize>,\n-    pub use_client_watching: bool,\n+    pub proc_macro_srv: Option<String>,\n     pub exclude_globs: Vec<String>,\n+    pub notifications: NotificationsConfig,\n+\n     pub cargo: CargoConfig,\n-    pub with_sysroot: bool,\n+    pub rustfmt: RustfmtConfig,\n+    pub check: Option<FlycheckConfig>,\n+\n+    pub inlay_hints: InlayHintsConfig,\n+    pub completion: CompletionConfig,\n+    pub call_info_full: bool,\n }\n \n #[derive(Debug, Clone)]\n@@ -59,12 +63,28 @@ pub struct ClientCapsConfig {\n impl Default for Config {\n     fn default() -> Self {\n         Config {\n+            client_caps: ClientCapsConfig::default(),\n+\n+            with_sysroot: true,\n             publish_diagnostics: true,\n+            use_client_watching: false,\n+            vscode_lldb: false,\n+            lru_capacity: None,\n+            proc_macro_srv: None,\n+            exclude_globs: Vec::new(),\n             notifications: NotificationsConfig {\n                 workspace_loaded: true,\n                 cargo_toml_not_found: true,\n             },\n-            client_caps: ClientCapsConfig::default(),\n+\n+            cargo: CargoConfig::default(),\n+            rustfmt: RustfmtConfig::Rustfmt { extra_args: Vec::new() },\n+            check: Some(FlycheckConfig::CargoCommand {\n+                command: \"check\".to_string(),\n+                all_targets: true,\n+                extra_args: Vec::new(),\n+            }),\n+\n             inlay_hints: InlayHintsConfig {\n                 type_hints: true,\n                 parameter_hints: true,\n@@ -77,19 +97,6 @@ impl Default for Config {\n                 add_call_argument_snippets: true,\n             },\n             call_info_full: true,\n-            rustfmt: RustfmtConfig::Rustfmt { extra_args: Vec::new() },\n-            check: Some(FlycheckConfig::CargoCommand {\n-                command: \"check\".to_string(),\n-                all_targets: true,\n-                extra_args: Vec::new(),\n-            }),\n-            vscode_lldb: false,\n-            proc_macro_srv: None,\n-            lru_capacity: None,\n-            use_client_watching: false,\n-            exclude_globs: Vec::new(),\n-            cargo: CargoConfig::default(),\n-            with_sysroot: true,\n         }\n     }\n }\n@@ -103,15 +110,22 @@ impl Config {\n         *self = Default::default();\n         self.client_caps = client_caps;\n \n-        set(value, \"/excludeGlobs\", &mut self.exclude_globs);\n+        set(value, \"/withSysroot\", &mut self.with_sysroot);\n+        set(value, \"/featureFlags/lsp.diagnostics\", &mut self.publish_diagnostics);\n         set(value, \"/useClientWatching\", &mut self.use_client_watching);\n+        set(value, \"/vscodeLldb\", &mut self.vscode_lldb);\n         set(value, \"/lruCapacity\", &mut self.lru_capacity);\n+        set(value, \"/excludeGlobs\", &mut self.exclude_globs);\n+        set(value, \"/featureFlags/notifications.workspace-loaded\", &mut self.notifications.workspace_loaded);\n+        set(value, \"/featureFlags/notifications.cargo-toml-not-found\", &mut self.notifications.cargo_toml_not_found);\n \n-        set(value, \"/inlayHintsType\", &mut self.inlay_hints.type_hints);\n-        set(value, \"/inlayHintsParameter\", &mut self.inlay_hints.parameter_hints);\n-        set(value, \"/inlayHintsChaining\", &mut self.inlay_hints.chaining_hints);\n-        set(value, \"/inlayHintsMaxLength\", &mut self.inlay_hints.max_length);\n-\n+        set(value, \"/cargoFeatures/noDefaultFeatures\", &mut self.cargo.no_default_features);\n+        set(value, \"/cargoFeatures/allFeatures\", &mut self.cargo.all_features);\n+        set(value, \"/cargoFeatures/features\", &mut self.cargo.features);\n+        set(value, \"/cargoFeatures/loadOutDirsFromCheck\", &mut self.cargo.load_out_dirs_from_check);\n+        if let RustfmtConfig::Rustfmt { extra_args } = &mut self.rustfmt {\n+            set(value, \"/rustfmtArgs\", extra_args);\n+        }\n         if let Some(false) = get(value, \"cargo_watch_enable\") {\n             self.check = None\n         } else {\n@@ -123,21 +137,10 @@ impl Config {\n             }\n         };\n \n-        set(value, \"/withSysroot\", &mut self.with_sysroot);\n-        if let RustfmtConfig::Rustfmt { extra_args } = &mut self.rustfmt {\n-            set(value, \"/rustfmtArgs\", extra_args);\n-        }\n-\n-        set(value, \"/cargoFeatures/noDefaultFeatures\", &mut self.cargo.no_default_features);\n-        set(value, \"/cargoFeatures/allFeatures\", &mut self.cargo.all_features);\n-        set(value, \"/cargoFeatures/features\", &mut self.cargo.features);\n-        set(value, \"/cargoFeatures/loadOutDirsFromCheck\", &mut self.cargo.load_out_dirs_from_check);\n-\n-        set(value, \"/vscodeLldb\", &mut self.vscode_lldb);\n-\n-        set(value, \"/featureFlags/lsp.diagnostics\", &mut self.publish_diagnostics);\n-        set(value, \"/featureFlags/notifications.workspace-loaded\", &mut self.notifications.workspace_loaded);\n-        set(value, \"/featureFlags/notifications.cargo-toml-not-found\", &mut self.notifications.cargo_toml_not_found);\n+        set(value, \"/inlayHintsType\", &mut self.inlay_hints.type_hints);\n+        set(value, \"/inlayHintsParameter\", &mut self.inlay_hints.parameter_hints);\n+        set(value, \"/inlayHintsChaining\", &mut self.inlay_hints.chaining_hints);\n+        set(value, \"/inlayHintsMaxLength\", &mut self.inlay_hints.max_length);\n         set(value, \"/featureFlags/completion.enable-postfix\", &mut self.completion.enable_postfix_completions);\n         set(value, \"/featureFlags/completion.insertion.add-call-parenthesis\", &mut self.completion.add_call_parenthesis);\n         set(value, \"/featureFlags/completion.insertion.add-argument-snippets\", &mut self.completion.add_call_argument_snippets);"}]}