{"sha": "084ee7a875cb02c0f0c0c6d1ffaff81d69cec74e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4NGVlN2E4NzVjYjAyYzBmMGMwYzZkMWZmYWZmODFkNjljZWM3NGU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-22T21:35:18Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-22T21:37:54Z"}, "message": "examples for MaybeUninit::zeroed", "tree": {"sha": "3882a8d414c393824eca04beab48d7af947987d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3882a8d414c393824eca04beab48d7af947987d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/084ee7a875cb02c0f0c0c6d1ffaff81d69cec74e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/084ee7a875cb02c0f0c0c6d1ffaff81d69cec74e", "html_url": "https://github.com/rust-lang/rust/commit/084ee7a875cb02c0f0c0c6d1ffaff81d69cec74e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/084ee7a875cb02c0f0c0c6d1ffaff81d69cec74e/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48aa59e74d6a2b3fea5162eaed902798dc0f95f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/48aa59e74d6a2b3fea5162eaed902798dc0f95f8", "html_url": "https://github.com/rust-lang/rust/commit/48aa59e74d6a2b3fea5162eaed902798dc0f95f8"}], "stats": {"total": 29, "additions": 29, "deletions": 0}, "files": [{"sha": "8f6798e0f6e61f46e461882defc7a5a1507ecda9", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/084ee7a875cb02c0f0c0c6d1ffaff81d69cec74e/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084ee7a875cb02c0f0c0c6d1ffaff81d69cec74e/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=084ee7a875cb02c0f0c0c6d1ffaff81d69cec74e", "patch": "@@ -1141,6 +1141,35 @@ impl<T> MaybeUninit<T> {\n     ///\n     /// Note that dropping a `MaybeUninit` will never call `T`'s drop code.\n     /// It is your responsibility to make sure `T` gets dropped if it got initialized.\n+    ///\n+    /// # Example\n+    ///\n+    /// Correct usage of this method: initializing a struct with zero, where all\n+    /// fields of the struct can hold 0 as a valid value.\n+    ///\n+    /// ```rust\n+    /// #![feature(maybe_uninit)]\n+    /// use std::mem::MaybeUninit;\n+    ///\n+    /// let x = MaybeUninit::<(u8, bool)>::zeroed();\n+    /// let x = unsafe { x.into_initialized() };\n+    /// assert_eq!(x, (0, false));\n+    /// ```\n+    ///\n+    /// *Incorrect* usage of this method: initializing a struct with zero, where some fields\n+    /// cannot hold 0 as a valid value.\n+    ///\n+    /// ```rust,no_run\n+    /// #![feature(maybe_uninit)]\n+    /// use std::mem::MaybeUninit;\n+    ///\n+    /// enum NotZero { One = 1, Two = 2 };\n+    ///\n+    /// let x = MaybeUninit::<(u8, NotZero)>::zeroed();\n+    /// let x = unsafe { x.into_initialized() };\n+    /// // We create a `NotZero` (inside a pair) that does not have a valid discriminant.\n+    /// // This is undefined behavior.\n+    /// ```\n     #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n     #[inline]\n     pub fn zeroed() -> MaybeUninit<T> {"}]}