{"sha": "c5fbcd35a8217a17f6b63a22217ace06cf8f5f02", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1ZmJjZDM1YTgyMTdhMTdmNmI2M2EyMjIxN2FjZTA2Y2Y4ZjVmMDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-10T03:11:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-10T03:11:24Z"}, "message": "Auto merge of #86186 - JohnTitor:rollup-upaw6wx, r=JohnTitor\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #82037 (Make symbols stripping work on MacOS X)\n - #84687 (Multiple improvements to RwLocks)\n - #85997 (rustdoc: Print a warning if the diff when comparing to old nightlies is empty)\n - #86051 (Updated code examples and wording in move keyword documentation )\n - #86111 (fix off by one in `std::iter::Iterator` documentation)\n - #86113 (build doctests with lld if use-lld = true)\n - #86175 (update Miri)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "32d947c1d7b0e634a699956cdae8c2fd664ba58f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32d947c1d7b0e634a699956cdae8c2fd664ba58f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5fbcd35a8217a17f6b63a22217ace06cf8f5f02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5fbcd35a8217a17f6b63a22217ace06cf8f5f02", "html_url": "https://github.com/rust-lang/rust/commit/c5fbcd35a8217a17f6b63a22217ace06cf8f5f02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5fbcd35a8217a17f6b63a22217ace06cf8f5f02/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1639a16ebfaad2aa74fd535c778fd1614475b53d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1639a16ebfaad2aa74fd535c778fd1614475b53d", "html_url": "https://github.com/rust-lang/rust/commit/1639a16ebfaad2aa74fd535c778fd1614475b53d"}, {"sha": "a6b7e1c121152a222e732fb71c2eeb1bfb9c1d3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6b7e1c121152a222e732fb71c2eeb1bfb9c1d3d", "html_url": "https://github.com/rust-lang/rust/commit/a6b7e1c121152a222e732fb71c2eeb1bfb9c1d3d"}], "stats": {"total": 403, "additions": 219, "deletions": 184}, "files": [{"sha": "cb56e3f9e8a1995ef8adb936b539651437b7c027", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 42, "deletions": 9, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/c5fbcd35a8217a17f6b63a22217ace06cf8f5f02/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5fbcd35a8217a17f6b63a22217ace06cf8f5f02/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=c5fbcd35a8217a17f6b63a22217ace06cf8f5f02", "patch": "@@ -5,7 +5,7 @@ use rustc_fs_util::fix_windows_verbatim_for_gcc;\n use rustc_hir::def_id::CrateNum;\n use rustc_middle::middle::cstore::{DllImport, LibSource};\n use rustc_middle::middle::dependency_format::Linkage;\n-use rustc_session::config::{self, CFGuard, CrateType, DebugInfo};\n+use rustc_session::config::{self, CFGuard, CrateType, DebugInfo, Strip};\n use rustc_session::config::{OutputFilenames, OutputType, PrintRequest};\n use rustc_session::output::{check_file_is_writeable, invalid_output_for_target, out_filename};\n use rustc_session::search_paths::PathKind;\n@@ -907,14 +907,6 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n         }\n     }\n \n-    fn escape_string(s: &[u8]) -> String {\n-        str::from_utf8(s).map(|s| s.to_owned()).unwrap_or_else(|_| {\n-            let mut x = \"Non-UTF-8 output: \".to_string();\n-            x.extend(s.iter().flat_map(|&b| ascii::escape_default(b)).map(char::from));\n-            x\n-        })\n-    }\n-\n     match prog {\n         Ok(prog) => {\n             if !prog.status.success() {\n@@ -1056,6 +1048,47 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n         // ... and otherwise we're processing a `*.dwp` packed dwarf file.\n         SplitDebuginfo::Packed => link_dwarf_object(sess, &out_filename),\n     }\n+\n+    if sess.target.is_like_osx {\n+        if let Some(option) = osx_strip_opt(sess.opts.debugging_opts.strip) {\n+            strip_symbols_in_osx(sess, &out_filename, option);\n+        }\n+    }\n+}\n+\n+fn strip_symbols_in_osx<'a>(sess: &'a Session, out_filename: &Path, option: &str) {\n+    let prog = Command::new(\"strip\").arg(option).arg(out_filename).output();\n+    match prog {\n+        Ok(prog) => {\n+            if !prog.status.success() {\n+                let mut output = prog.stderr.clone();\n+                output.extend_from_slice(&prog.stdout);\n+                sess.struct_warn(&format!(\n+                    \"stripping debug info with `strip` failed: {}\",\n+                    prog.status\n+                ))\n+                .note(&escape_string(&output))\n+                .emit();\n+            }\n+        }\n+        Err(e) => sess.fatal(&format!(\"unable to run `strip`: {}\", e)),\n+    }\n+}\n+\n+fn osx_strip_opt<'a>(strip: Strip) -> Option<&'a str> {\n+    match strip {\n+        Strip::Debuginfo => Some(\"-S\"),\n+        Strip::Symbols => Some(\"-x\"),\n+        Strip::None => None,\n+    }\n+}\n+\n+fn escape_string(s: &[u8]) -> String {\n+    str::from_utf8(s).map(|s| s.to_owned()).unwrap_or_else(|_| {\n+        let mut x = \"Non-UTF-8 output: \".to_string();\n+        x.extend(s.iter().flat_map(|&b| ascii::escape_default(b)).map(char::from));\n+        x\n+    })\n }\n \n fn add_sanitizer_libraries(sess: &Session, crate_type: CrateType, linker: &mut dyn Linker) {"}, {"sha": "43ff664c3e641059488a75f90f672990418144bb", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c5fbcd35a8217a17f6b63a22217ace06cf8f5f02/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5fbcd35a8217a17f6b63a22217ace06cf8f5f02/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=c5fbcd35a8217a17f6b63a22217ace06cf8f5f02", "patch": "@@ -526,15 +526,18 @@ impl<'a> Linker for GccLinker<'a> {\n     fn control_flow_guard(&mut self) {}\n \n     fn debuginfo(&mut self, strip: Strip) {\n+        // MacOS linker doesn't support stripping symbols directly anymore.\n+        if self.sess.target.is_like_osx {\n+            return;\n+        }\n+\n         match strip {\n             Strip::None => {}\n             Strip::Debuginfo => {\n-                // MacOS linker does not support longhand argument --strip-debug\n-                self.linker_arg(\"-S\");\n+                self.linker_arg(\"--strip-debug\");\n             }\n             Strip::Symbols => {\n-                // MacOS linker does not support longhand argument --strip-all\n-                self.linker_arg(\"-s\");\n+                self.linker_arg(\"--strip-all\");\n             }\n         }\n     }"}, {"sha": "11dea400a46ef6d8fa59fc8f669de85fab4901bf", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5fbcd35a8217a17f6b63a22217ace06cf8f5f02/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5fbcd35a8217a17f6b63a22217ace06cf8f5f02/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=c5fbcd35a8217a17f6b63a22217ace06cf8f5f02", "patch": "@@ -138,7 +138,7 @@ pub trait Iterator {\n     /// A more complex example:\n     ///\n     /// ```\n-    /// // The even numbers from zero to ten.\n+    /// // The even numbers in the range of zero to nine.\n     /// let iter = (0..10).filter(|x| x % 2 == 0);\n     ///\n     /// // We might iterate from zero to ten times. Knowing that it's five"}, {"sha": "5b8e83766f0e846444405df1aacf15c96a5cde6b", "filename": "library/std/src/keyword_docs.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c5fbcd35a8217a17f6b63a22217ace06cf8f5f02/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5fbcd35a8217a17f6b63a22217ace06cf8f5f02/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fkeyword_docs.rs?ref=c5fbcd35a8217a17f6b63a22217ace06cf8f5f02", "patch": "@@ -987,13 +987,13 @@ mod mod_keyword {}\n /// Capture a [closure]'s environment by value.\n ///\n /// `move` converts any variables captured by reference or mutable reference\n-/// to owned by value variables.\n+/// to variables captured by value.\n ///\n /// ```rust\n-/// let capture = \"hello\";\n-/// let closure = move || {\n-///     println!(\"rust says {}\", capture);\n-/// };\n+/// let data = vec![1, 2, 3];\n+/// let closure = move || println!(\"captured {:?} by value\", data);\n+///\n+/// // data is no longer available, it is owned by the closure\n /// ```\n ///\n /// Note: `move` closures may still implement [`Fn`] or [`FnMut`], even though\n@@ -1004,31 +1004,29 @@ mod mod_keyword {}\n /// ```rust\n /// fn create_fn() -> impl Fn() {\n ///     let text = \"Fn\".to_owned();\n-///\n ///     move || println!(\"This is a: {}\", text)\n /// }\n ///\n /// let fn_plain = create_fn();\n-///\n /// fn_plain();\n /// ```\n ///\n /// `move` is often used when [threads] are involved.\n ///\n /// ```rust\n-/// let x = 5;\n+/// let data = vec![1, 2, 3];\n ///\n /// std::thread::spawn(move || {\n-///     println!(\"captured {} by value\", x)\n+///     println!(\"captured {:?} by value\", data)\n /// }).join().unwrap();\n ///\n-/// // x is no longer available\n+/// // data was moved to the spawned thread, so we cannot use it here\n /// ```\n ///\n /// `move` is also valid before an async block.\n ///\n /// ```rust\n-/// let capture = \"hello\";\n+/// let capture = \"hello\".to_owned();\n /// let block = async move {\n ///     println!(\"rust says {} from async block\", capture);\n /// };"}, {"sha": "0b9c9fb479f51dd1f09f37deea5d50beccab494d", "filename": "library/std/src/panicking.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c5fbcd35a8217a17f6b63a22217ace06cf8f5f02/library%2Fstd%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5fbcd35a8217a17f6b63a22217ace06cf8f5f02/library%2Fstd%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanicking.rs?ref=c5fbcd35a8217a17f6b63a22217ace06cf8f5f02", "patch": "@@ -19,7 +19,7 @@ use crate::process;\n use crate::sync::atomic::{AtomicBool, Ordering};\n use crate::sys::stdio::panic_output;\n use crate::sys_common::backtrace::{self, RustBacktrace};\n-use crate::sys_common::rwlock::RWLock;\n+use crate::sys_common::rwlock::StaticRWLock;\n use crate::sys_common::thread_info;\n use crate::thread;\n \n@@ -74,7 +74,7 @@ enum Hook {\n     Custom(*mut (dyn Fn(&PanicInfo<'_>) + 'static + Sync + Send)),\n }\n \n-static HOOK_LOCK: RWLock = RWLock::new();\n+static HOOK_LOCK: StaticRWLock = StaticRWLock::new();\n static mut HOOK: Hook = Hook::Default;\n \n /// Registers a custom panic hook, replacing any that was previously registered.\n@@ -117,10 +117,10 @@ pub fn set_hook(hook: Box<dyn Fn(&PanicInfo<'_>) + 'static + Sync + Send>) {\n     }\n \n     unsafe {\n-        HOOK_LOCK.write();\n+        let guard = HOOK_LOCK.write();\n         let old_hook = HOOK;\n         HOOK = Hook::Custom(Box::into_raw(hook));\n-        HOOK_LOCK.write_unlock();\n+        drop(guard);\n \n         if let Hook::Custom(ptr) = old_hook {\n             #[allow(unused_must_use)]\n@@ -165,10 +165,10 @@ pub fn take_hook() -> Box<dyn Fn(&PanicInfo<'_>) + 'static + Sync + Send> {\n     }\n \n     unsafe {\n-        HOOK_LOCK.write();\n+        let guard = HOOK_LOCK.write();\n         let hook = HOOK;\n         HOOK = Hook::Default;\n-        HOOK_LOCK.write_unlock();\n+        drop(guard);\n \n         match hook {\n             Hook::Default => Box::new(default_hook),\n@@ -608,7 +608,7 @@ fn rust_panic_with_hook(\n \n     unsafe {\n         let mut info = PanicInfo::internal_constructor(message, location);\n-        HOOK_LOCK.read();\n+        let _guard = HOOK_LOCK.read();\n         match HOOK {\n             // Some platforms (like wasm) know that printing to stderr won't ever actually\n             // print anything, and if that's the case we can skip the default\n@@ -626,7 +626,6 @@ fn rust_panic_with_hook(\n                 (*ptr)(&info);\n             }\n         };\n-        HOOK_LOCK.read_unlock();\n     }\n \n     if panics > 1 {"}, {"sha": "0d00f74eaa1ec839e9356bd729fe7a42b6641ed1", "filename": "library/std/src/sync/rwlock.rs", "status": "modified", "additions": 4, "deletions": 30, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c5fbcd35a8217a17f6b63a22217ace06cf8f5f02/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5fbcd35a8217a17f6b63a22217ace06cf8f5f02/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs?ref=c5fbcd35a8217a17f6b63a22217ace06cf8f5f02", "patch": "@@ -3,9 +3,7 @@ mod tests;\n \n use crate::cell::UnsafeCell;\n use crate::fmt;\n-use crate::mem;\n use crate::ops::{Deref, DerefMut};\n-use crate::ptr;\n use crate::sync::{poison, LockResult, TryLockError, TryLockResult};\n use crate::sys_common::rwlock as sys;\n \n@@ -66,7 +64,7 @@ use crate::sys_common::rwlock as sys;\n /// [`Mutex`]: super::Mutex\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RwLock<T: ?Sized> {\n-    inner: Box<sys::RWLock>,\n+    inner: sys::MovableRWLock,\n     poison: poison::Flag,\n     data: UnsafeCell<T>,\n }\n@@ -130,7 +128,7 @@ impl<T> RwLock<T> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new(t: T) -> RwLock<T> {\n         RwLock {\n-            inner: box sys::RWLock::new(),\n+            inner: sys::MovableRWLock::new(),\n             poison: poison::Flag::new(),\n             data: UnsafeCell::new(t),\n         }\n@@ -376,24 +374,8 @@ impl<T: ?Sized> RwLock<T> {\n     where\n         T: Sized,\n     {\n-        // We know statically that there are no outstanding references to\n-        // `self` so there's no need to lock the inner lock.\n-        //\n-        // To get the inner value, we'd like to call `data.into_inner()`,\n-        // but because `RwLock` impl-s `Drop`, we can't move out of it, so\n-        // we'll have to destructure it manually instead.\n-        unsafe {\n-            // Like `let RwLock { inner, poison, data } = self`.\n-            let (inner, poison, data) = {\n-                let RwLock { ref inner, ref poison, ref data } = self;\n-                (ptr::read(inner), ptr::read(poison), ptr::read(data))\n-            };\n-            mem::forget(self);\n-            inner.destroy(); // Keep in sync with the `Drop` impl.\n-            drop(inner);\n-\n-            poison::map_result(poison.borrow(), |_| data.into_inner())\n-        }\n+        let data = self.data.into_inner();\n+        poison::map_result(self.poison.borrow(), |_| data)\n     }\n \n     /// Returns a mutable reference to the underlying data.\n@@ -424,14 +406,6 @@ impl<T: ?Sized> RwLock<T> {\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-unsafe impl<#[may_dangle] T: ?Sized> Drop for RwLock<T> {\n-    fn drop(&mut self) {\n-        // IMPORTANT: This code needs to be kept in sync with `RwLock::into_inner`.\n-        unsafe { self.inner.destroy() }\n-    }\n-}\n-\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized + fmt::Debug> fmt::Debug for RwLock<T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {"}, {"sha": "d2058180121dc9dee568f7142bdc51c7dd86b7c8", "filename": "library/std/src/sys/hermit/rwlock.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5fbcd35a8217a17f6b63a22217ace06cf8f5f02/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5fbcd35a8217a17f6b63a22217ace06cf8f5f02/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Frwlock.rs?ref=c5fbcd35a8217a17f6b63a22217ace06cf8f5f02", "patch": "@@ -8,6 +8,8 @@ pub struct RWLock {\n     state: UnsafeCell<State>,\n }\n \n+pub type MovableRWLock = Box<RWLock>;\n+\n enum State {\n     Unlocked,\n     Reading(usize),"}, {"sha": "2d038b518965b6988ecac528ec5e72ac03c14efd", "filename": "library/std/src/sys/sgx/rwlock.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5fbcd35a8217a17f6b63a22217ace06cf8f5f02/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5fbcd35a8217a17f6b63a22217ace06cf8f5f02/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Frwlock.rs?ref=c5fbcd35a8217a17f6b63a22217ace06cf8f5f02", "patch": "@@ -13,6 +13,8 @@ pub struct RWLock {\n     writer: SpinMutex<WaitVariable<bool>>,\n }\n \n+pub type MovableRWLock = Box<RWLock>;\n+\n // Check at compile time that RWLock size matches C definition (see test_c_rwlock_initializer below)\n //\n // # Safety"}, {"sha": "41ca9762390c6f4a5f0cc32c89b4e13d52a5d5e3", "filename": "library/std/src/sys/unix/os.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c5fbcd35a8217a17f6b63a22217ace06cf8f5f02/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5fbcd35a8217a17f6b63a22217ace06cf8f5f02/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs?ref=c5fbcd35a8217a17f6b63a22217ace06cf8f5f02", "patch": "@@ -20,8 +20,7 @@ use crate::str;\n use crate::sys::cvt;\n use crate::sys::fd;\n use crate::sys::memchr;\n-use crate::sys::rwlock::{RWLockReadGuard, StaticRWLock};\n-use crate::sys_common::mutex::{StaticMutex, StaticMutexGuard};\n+use crate::sys_common::rwlock::{StaticRWLock, StaticRWLockReadGuard};\n use crate::vec;\n \n use libc::{c_char, c_int, c_void};\n@@ -490,8 +489,8 @@ pub unsafe fn environ() -> *mut *const *const c_char {\n \n static ENV_LOCK: StaticRWLock = StaticRWLock::new();\n \n-pub fn env_read_lock() -> RWLockReadGuard {\n-    ENV_LOCK.read_with_guard()\n+pub fn env_read_lock() -> StaticRWLockReadGuard {\n+    ENV_LOCK.read()\n }\n \n /// Returns a vector of (variable, value) byte-vector pairs for all the\n@@ -551,7 +550,7 @@ pub fn setenv(k: &OsStr, v: &OsStr) -> io::Result<()> {\n     let v = CString::new(v.as_bytes())?;\n \n     unsafe {\n-        let _guard = ENV_LOCK.write_with_guard();\n+        let _guard = ENV_LOCK.write();\n         cvt(libc::setenv(k.as_ptr(), v.as_ptr(), 1)).map(drop)\n     }\n }\n@@ -560,7 +559,7 @@ pub fn unsetenv(n: &OsStr) -> io::Result<()> {\n     let nbuf = CString::new(n.as_bytes())?;\n \n     unsafe {\n-        let _guard = ENV_LOCK.write_with_guard();\n+        let _guard = ENV_LOCK.write();\n         cvt(libc::unsetenv(nbuf.as_ptr())).map(drop)\n     }\n }"}, {"sha": "b1faf12c2261452e1b191c8a91f3b2810ae0a3ff", "filename": "library/std/src/sys/unix/rwlock.rs", "status": "modified", "additions": 2, "deletions": 52, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/c5fbcd35a8217a17f6b63a22217ace06cf8f5f02/library%2Fstd%2Fsrc%2Fsys%2Funix%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5fbcd35a8217a17f6b63a22217ace06cf8f5f02/library%2Fstd%2Fsrc%2Fsys%2Funix%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Frwlock.rs?ref=c5fbcd35a8217a17f6b63a22217ace06cf8f5f02", "patch": "@@ -7,6 +7,8 @@ pub struct RWLock {\n     num_readers: AtomicUsize,\n }\n \n+pub type MovableRWLock = Box<RWLock>;\n+\n unsafe impl Send for RWLock {}\n unsafe impl Sync for RWLock {}\n \n@@ -139,55 +141,3 @@ impl RWLock {\n         }\n     }\n }\n-\n-pub struct StaticRWLock(RWLock);\n-\n-impl StaticRWLock {\n-    pub const fn new() -> StaticRWLock {\n-        StaticRWLock(RWLock::new())\n-    }\n-\n-    /// Acquires shared access to the underlying lock, blocking the current\n-    /// thread to do so.\n-    ///\n-    /// The lock is automatically unlocked when the returned guard is dropped.\n-    #[inline]\n-    pub fn read_with_guard(&'static self) -> RWLockReadGuard {\n-        // SAFETY: All methods require static references, therefore self\n-        // cannot be moved between invocations.\n-        unsafe {\n-            self.0.read();\n-        }\n-        RWLockReadGuard(&self.0)\n-    }\n-\n-    /// Acquires write access to the underlying lock, blocking the current thread\n-    /// to do so.\n-    ///\n-    /// The lock is automatically unlocked when the returned guard is dropped.\n-    #[inline]\n-    pub fn write_with_guard(&'static self) -> RWLockWriteGuard {\n-        // SAFETY: All methods require static references, therefore self\n-        // cannot be moved between invocations.\n-        unsafe {\n-            self.0.write();\n-        }\n-        RWLockWriteGuard(&self.0)\n-    }\n-}\n-\n-pub struct RWLockReadGuard(&'static RWLock);\n-\n-impl Drop for RWLockReadGuard {\n-    fn drop(&mut self) {\n-        unsafe { self.0.read_unlock() }\n-    }\n-}\n-\n-pub struct RWLockWriteGuard(&'static RWLock);\n-\n-impl Drop for RWLockWriteGuard {\n-    fn drop(&mut self) {\n-        unsafe { self.0.write_unlock() }\n-    }\n-}"}, {"sha": "8438adeb5b533b6098daa9d8535effc57a62cd5b", "filename": "library/std/src/sys/unsupported/rwlock.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5fbcd35a8217a17f6b63a22217ace06cf8f5f02/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5fbcd35a8217a17f6b63a22217ace06cf8f5f02/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Frwlock.rs?ref=c5fbcd35a8217a17f6b63a22217ace06cf8f5f02", "patch": "@@ -5,6 +5,8 @@ pub struct RWLock {\n     mode: Cell<isize>,\n }\n \n+pub type MovableRWLock = RWLock;\n+\n unsafe impl Send for RWLock {}\n unsafe impl Sync for RWLock {} // no threads on this platform\n "}, {"sha": "64eaa2fc482dc2ee31706d37e5a8515e6dee774d", "filename": "library/std/src/sys/wasm/atomics/rwlock.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5fbcd35a8217a17f6b63a22217ace06cf8f5f02/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5fbcd35a8217a17f6b63a22217ace06cf8f5f02/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Frwlock.rs?ref=c5fbcd35a8217a17f6b63a22217ace06cf8f5f02", "patch": "@@ -8,6 +8,8 @@ pub struct RWLock {\n     state: UnsafeCell<State>,\n }\n \n+pub type MovableRWLock = RWLock;\n+\n enum State {\n     Unlocked,\n     Reading(usize),"}, {"sha": "b7a5b1e7accd0cb9b3188a58543ec0648d1649e1", "filename": "library/std/src/sys/windows/rwlock.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5fbcd35a8217a17f6b63a22217ace06cf8f5f02/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5fbcd35a8217a17f6b63a22217ace06cf8f5f02/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Frwlock.rs?ref=c5fbcd35a8217a17f6b63a22217ace06cf8f5f02", "patch": "@@ -5,6 +5,8 @@ pub struct RWLock {\n     inner: UnsafeCell<c::SRWLOCK>,\n }\n \n+pub type MovableRWLock = RWLock;\n+\n unsafe impl Send for RWLock {}\n unsafe impl Sync for RWLock {}\n "}, {"sha": "07ec20f4dc6177fa0c4642ac9e96bab00d9affd7", "filename": "library/std/src/sys_common/rwlock.rs", "status": "modified", "additions": 83, "deletions": 37, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/c5fbcd35a8217a17f6b63a22217ace06cf8f5f02/library%2Fstd%2Fsrc%2Fsys_common%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5fbcd35a8217a17f6b63a22217ace06cf8f5f02/library%2Fstd%2Fsrc%2Fsys_common%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Frwlock.rs?ref=c5fbcd35a8217a17f6b63a22217ace06cf8f5f02", "patch": "@@ -1,63 +1,112 @@\n use crate::sys::rwlock as imp;\n \n+/// An OS-based reader-writer lock, meant for use in static variables.\n+///\n+/// This rwlock does not implement poisoning.\n+///\n+/// This rwlock has a const constructor ([`StaticRWLock::new`]), does not\n+/// implement `Drop` to cleanup resources.\n+pub struct StaticRWLock(imp::RWLock);\n+\n+impl StaticRWLock {\n+    /// Creates a new rwlock for use.\n+    pub const fn new() -> Self {\n+        Self(imp::RWLock::new())\n+    }\n+\n+    /// Acquires shared access to the underlying lock, blocking the current\n+    /// thread to do so.\n+    ///\n+    /// The lock is automatically unlocked when the returned guard is dropped.\n+    #[inline]\n+    pub fn read(&'static self) -> StaticRWLockReadGuard {\n+        unsafe { self.0.read() };\n+        StaticRWLockReadGuard(&self.0)\n+    }\n+\n+    /// Acquires write access to the underlying lock, blocking the current thread\n+    /// to do so.\n+    ///\n+    /// The lock is automatically unlocked when the returned guard is dropped.\n+    #[inline]\n+    pub fn write(&'static self) -> StaticRWLockWriteGuard {\n+        unsafe { self.0.write() };\n+        StaticRWLockWriteGuard(&self.0)\n+    }\n+}\n+\n+#[must_use]\n+pub struct StaticRWLockReadGuard(&'static imp::RWLock);\n+\n+impl Drop for StaticRWLockReadGuard {\n+    #[inline]\n+    fn drop(&mut self) {\n+        unsafe {\n+            self.0.read_unlock();\n+        }\n+    }\n+}\n+\n+#[must_use]\n+pub struct StaticRWLockWriteGuard(&'static imp::RWLock);\n+\n+impl Drop for StaticRWLockWriteGuard {\n+    #[inline]\n+    fn drop(&mut self) {\n+        unsafe {\n+            self.0.write_unlock();\n+        }\n+    }\n+}\n+\n /// An OS-based reader-writer lock.\n ///\n-/// This structure is entirely unsafe and serves as the lowest layer of a\n-/// cross-platform binding of system rwlocks. It is recommended to use the\n-/// safer types at the top level of this crate instead of this type.\n-pub struct RWLock(imp::RWLock);\n+/// This rwlock does *not* have a const constructor, cleans up its resources in\n+/// its `Drop` implementation and may safely be moved (when not borrowed).\n+///\n+/// This rwlock does not implement poisoning.\n+///\n+/// This is either a wrapper around `Box<imp::RWLock>` or `imp::RWLock`,\n+/// depending on the platform. It is boxed on platforms where `imp::RWLock` may\n+/// not be moved.\n+pub struct MovableRWLock(imp::MovableRWLock);\n \n-impl RWLock {\n+impl MovableRWLock {\n     /// Creates a new reader-writer lock for use.\n-    ///\n-    /// Behavior is undefined if the reader-writer lock is moved after it is\n-    /// first used with any of the functions below.\n-    pub const fn new() -> RWLock {\n-        RWLock(imp::RWLock::new())\n+    pub fn new() -> Self {\n+        Self(imp::MovableRWLock::from(imp::RWLock::new()))\n     }\n \n     /// Acquires shared access to the underlying lock, blocking the current\n     /// thread to do so.\n-    ///\n-    /// Behavior is undefined if the rwlock has been moved between this and any\n-    /// previous method call.\n     #[inline]\n-    pub unsafe fn read(&self) {\n-        self.0.read()\n+    pub fn read(&self) {\n+        unsafe { self.0.read() }\n     }\n \n     /// Attempts to acquire shared access to this lock, returning whether it\n     /// succeeded or not.\n     ///\n     /// This function does not block the current thread.\n-    ///\n-    /// Behavior is undefined if the rwlock has been moved between this and any\n-    /// previous method call.\n     #[inline]\n-    pub unsafe fn try_read(&self) -> bool {\n-        self.0.try_read()\n+    pub fn try_read(&self) -> bool {\n+        unsafe { self.0.try_read() }\n     }\n \n     /// Acquires write access to the underlying lock, blocking the current thread\n     /// to do so.\n-    ///\n-    /// Behavior is undefined if the rwlock has been moved between this and any\n-    /// previous method call.\n     #[inline]\n-    pub unsafe fn write(&self) {\n-        self.0.write()\n+    pub fn write(&self) {\n+        unsafe { self.0.write() }\n     }\n \n     /// Attempts to acquire exclusive access to this lock, returning whether it\n     /// succeeded or not.\n     ///\n     /// This function does not block the current thread.\n-    ///\n-    /// Behavior is undefined if the rwlock has been moved between this and any\n-    /// previous method call.\n     #[inline]\n-    pub unsafe fn try_write(&self) -> bool {\n-        self.0.try_write()\n+    pub fn try_write(&self) -> bool {\n+        unsafe { self.0.try_write() }\n     }\n \n     /// Unlocks previously acquired shared access to this lock.\n@@ -76,13 +125,10 @@ impl RWLock {\n     pub unsafe fn write_unlock(&self) {\n         self.0.write_unlock()\n     }\n+}\n \n-    /// Destroys OS-related resources with this RWLock.\n-    ///\n-    /// Behavior is undefined if there are any currently active users of this\n-    /// lock.\n-    #[inline]\n-    pub unsafe fn destroy(&self) {\n-        self.0.destroy()\n+impl Drop for MovableRWLock {\n+    fn drop(&mut self) {\n+        unsafe { self.0.destroy() };\n     }\n }"}, {"sha": "e4396d53016ea5cf6cf0b95a90de99249cb2f0ab", "filename": "src/bootstrap/bin/rustdoc.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c5fbcd35a8217a17f6b63a22217ace06cf8f5f02/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5fbcd35a8217a17f6b63a22217ace06cf8f5f02/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustdoc.rs?ref=c5fbcd35a8217a17f6b63a22217ace06cf8f5f02", "patch": "@@ -41,7 +41,12 @@ fn main() {\n         cmd.arg(arg);\n     }\n     if env::var_os(\"RUSTDOC_FUSE_LD_LLD\").is_some() {\n-        cmd.arg(\"-Clink-args=-fuse-ld=lld\");\n+        cmd.arg(\"-Clink-arg=-fuse-ld=lld\");\n+        if cfg!(windows) {\n+            cmd.arg(\"-Clink-arg=-Wl,/threads:1\");\n+        } else {\n+            cmd.arg(\"-Clink-arg=-Wl,--threads=1\");\n+        }\n     }\n \n     // Needed to be able to run all rustdoc tests."}, {"sha": "bc499fdba5996379d74b4926102d371705d77684", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5fbcd35a8217a17f6b63a22217ace06cf8f5f02/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5fbcd35a8217a17f6b63a22217ace06cf8f5f02/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=c5fbcd35a8217a17f6b63a22217ace06cf8f5f02", "patch": "@@ -1142,6 +1142,7 @@ impl<'a> Builder<'a> {\n         }\n         if self.is_fuse_ld_lld(compiler.host) {\n             cargo.env(\"RUSTC_HOST_FUSE_LD_LLD\", \"1\");\n+            cargo.env(\"RUSTDOC_FUSE_LD_LLD\", \"1\");\n         }\n \n         if let Some(target_linker) = self.linker(target) {\n@@ -1151,6 +1152,9 @@ impl<'a> Builder<'a> {\n         if self.is_fuse_ld_lld(target) {\n             rustflags.arg(\"-Clink-args=-fuse-ld=lld\");\n         }\n+        self.lld_flags(target).for_each(|flag| {\n+            rustdocflags.arg(&flag);\n+        });\n \n         if !([\"build\", \"check\", \"clippy\", \"fix\", \"rustc\"].contains(&cmd)) && want_rustdoc {\n             cargo.env(\"RUSTDOC_LIBDIR\", self.rustc_libdir(compiler));"}, {"sha": "347236c655a02d90a3af1740b308d4d6fc226453", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c5fbcd35a8217a17f6b63a22217ace06cf8f5f02/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5fbcd35a8217a17f6b63a22217ace06cf8f5f02/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=c5fbcd35a8217a17f6b63a22217ace06cf8f5f02", "patch": "@@ -923,6 +923,21 @@ impl Build {\n         self.config.use_lld && !target.contains(\"msvc\")\n     }\n \n+    fn lld_flags(&self, target: TargetSelection) -> impl Iterator<Item = String> {\n+        let mut options = [None, None];\n+\n+        if self.config.use_lld {\n+            if self.is_fuse_ld_lld(target) {\n+                options[0] = Some(\"-Clink-arg=-fuse-ld=lld\".to_string());\n+            }\n+\n+            let threads = if target.contains(\"windows\") { \"/threads:1\" } else { \"--threads=1\" };\n+            options[1] = Some(format!(\"-Clink-arg=-Wl,{}\", threads));\n+        }\n+\n+        std::array::IntoIter::new(options).flatten()\n+    }\n+\n     /// Returns if this target should statically link the C runtime, if specified\n     fn crt_static(&self, target: TargetSelection) -> Option<bool> {\n         if target.contains(\"pc-windows-msvc\") {"}, {"sha": "70cf1b105c0620d934d86a7c95192a871ca9cfa1", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c5fbcd35a8217a17f6b63a22217ace06cf8f5f02/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5fbcd35a8217a17f6b63a22217ace06cf8f5f02/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=c5fbcd35a8217a17f6b63a22217ace06cf8f5f02", "patch": "@@ -1131,19 +1131,6 @@ struct Compiletest {\n     compare_mode: Option<&'static str>,\n }\n \n-impl Compiletest {\n-    fn add_lld_flags(builder: &Builder<'_>, target: TargetSelection, flags: &mut Vec<String>) {\n-        if builder.config.use_lld {\n-            if builder.is_fuse_ld_lld(target) {\n-                flags.push(\"-Clink-arg=-fuse-ld=lld\".to_string());\n-            }\n-\n-            let threads = if target.contains(\"windows\") { \"/threads:1\" } else { \"--threads=1\" };\n-            flags.push(format!(\"-Clink-arg=-Wl,{}\", threads));\n-        }\n-    }\n-}\n-\n impl Step for Compiletest {\n     type Output = ();\n \n@@ -1289,12 +1276,12 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n \n         let mut hostflags = flags.clone();\n         hostflags.push(format!(\"-Lnative={}\", builder.test_helpers_out(compiler.host).display()));\n-        Self::add_lld_flags(builder, compiler.host, &mut hostflags);\n+        hostflags.extend(builder.lld_flags(compiler.host));\n         cmd.arg(\"--host-rustcflags\").arg(hostflags.join(\" \"));\n \n         let mut targetflags = flags;\n         targetflags.push(format!(\"-Lnative={}\", builder.test_helpers_out(target).display()));\n-        Self::add_lld_flags(builder, target, &mut targetflags);\n+        targetflags.extend(builder.lld_flags(target));\n         cmd.arg(\"--target-rustcflags\").arg(targetflags.join(\" \"));\n \n         cmd.arg(\"--docck-python\").arg(builder.python());"}, {"sha": "1e7c3930246b30e77589057ff6c6497d2e105c9f", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c5fbcd35a8217a17f6b63a22217ace06cf8f5f02/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5fbcd35a8217a17f6b63a22217ace06cf8f5f02/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=c5fbcd35a8217a17f6b63a22217ace06cf8f5f02", "patch": "@@ -2488,6 +2488,7 @@ impl<'test> TestCx<'test> {\n \n         {\n             let mut diff_output = File::create(&diff_filename).unwrap();\n+            let mut wrote_data = false;\n             for entry in walkdir::WalkDir::new(out_dir) {\n                 let entry = entry.expect(\"failed to read file\");\n                 let extension = entry.path().extension().and_then(|p| p.to_str());\n@@ -2500,17 +2501,28 @@ impl<'test> TestCx<'test> {\n                         if let Ok(s) = std::fs::read(&expected_path) { s } else { continue };\n                     let actual_path = entry.path();\n                     let actual = std::fs::read(&actual_path).unwrap();\n-                    diff_output\n-                        .write_all(&unified_diff::diff(\n-                            &expected,\n-                            &expected_path.to_string_lossy(),\n-                            &actual,\n-                            &actual_path.to_string_lossy(),\n-                            3,\n-                        ))\n-                        .unwrap();\n+                    let diff = unified_diff::diff(\n+                        &expected,\n+                        &expected_path.to_string_lossy(),\n+                        &actual,\n+                        &actual_path.to_string_lossy(),\n+                        3,\n+                    );\n+                    wrote_data |= !diff.is_empty();\n+                    diff_output.write_all(&diff).unwrap();\n                 }\n             }\n+\n+            if !wrote_data {\n+                println!(\"note: diff is identical to nightly rustdoc\");\n+                assert!(diff_output.metadata().unwrap().len() == 0);\n+                return;\n+            } else if self.config.verbose {\n+                eprintln!(\"printing diff:\");\n+                let mut buf = Vec::new();\n+                diff_output.read_to_end(&mut buf).unwrap();\n+                std::io::stderr().lock().write_all(&mut buf).unwrap();\n+            }\n         }\n \n         match self.config.color {"}, {"sha": "e5c3af6f516311cc4b1fc017c58d83b7442cbc34", "filename": "src/tools/miri", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri?ref=c5fbcd35a8217a17f6b63a22217ace06cf8f5f02", "patch": "@@ -1 +1 @@\n-Subproject commit c8713c2f9fc1e28c90876b9ec9557d8c5729757b\n+Subproject commit e5c3af6f516311cc4b1fc017c58d83b7442cbc34"}]}