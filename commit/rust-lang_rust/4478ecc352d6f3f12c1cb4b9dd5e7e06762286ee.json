{"sha": "4478ecc352d6f3f12c1cb4b9dd5e7e06762286ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0NzhlY2MzNTJkNmYzZjEyYzFjYjRiOWRkNWU3ZTA2NzYyMjg2ZWU=", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-08-26T03:09:17Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-08-26T03:09:17Z"}, "message": "Don't panic if `close_tag()` is called without tags to close\n\nThis can happen when a tag is opened after the length limit is reached;\nthe tag will not end up being added to `unclosed_tags` because the queue\nwill never be flushed. So, now, if the `unclosed_tags` stack is empty,\n`close_tag()` does nothing.\n\nThis change fixes a panic in the `limit_0` unit test.", "tree": {"sha": "ee5a8d865ca92a95b53447400046fb2e92a4bade", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee5a8d865ca92a95b53447400046fb2e92a4bade"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4478ecc352d6f3f12c1cb4b9dd5e7e06762286ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4478ecc352d6f3f12c1cb4b9dd5e7e06762286ee", "html_url": "https://github.com/rust-lang/rust/commit/4478ecc352d6f3f12c1cb4b9dd5e7e06762286ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4478ecc352d6f3f12c1cb4b9dd5e7e06762286ee/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d932e62dd9a6137a831d0917aa80aefd7ff47018", "url": "https://api.github.com/repos/rust-lang/rust/commits/d932e62dd9a6137a831d0917aa80aefd7ff47018", "html_url": "https://github.com/rust-lang/rust/commit/d932e62dd9a6137a831d0917aa80aefd7ff47018"}], "stats": {"total": 17, "additions": 14, "deletions": 3}, "files": [{"sha": "bbdc91c8d2ec8fbbe3b686002cd0bf34e249c32b", "filename": "src/librustdoc/html/length_limit.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4478ecc352d6f3f12c1cb4b9dd5e7e06762286ee/src%2Flibrustdoc%2Fhtml%2Flength_limit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4478ecc352d6f3f12c1cb4b9dd5e7e06762286ee/src%2Flibrustdoc%2Fhtml%2Flength_limit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flength_limit.rs?ref=4478ecc352d6f3f12c1cb4b9dd5e7e06762286ee", "patch": "@@ -86,8 +86,16 @@ impl HtmlWithLimit {\n \n     /// Close the most recently opened HTML tag.\n     pub(super) fn close_tag(&mut self) {\n-        let tag_name = self.unclosed_tags.pop().unwrap();\n-        write!(self.buf, \"</{}>\", tag_name).unwrap();\n+        match self.unclosed_tags.pop() {\n+            // Close the most recently opened tag.\n+            Some(tag_name) => write!(self.buf, \"</{}>\", tag_name).unwrap(),\n+            // There are valid cases where `close_tag()` is called without\n+            // there being any tags to close. For example, this occurs when\n+            // a tag is opened after the length limit is exceeded;\n+            // `flush_queue()` will never be called, and thus, the tag will\n+            // not end up being added to `unclosed_tags`.\n+            None => {}\n+        }\n     }\n \n     /// Write all queued tags and add them to the `unclosed_tags` list."}, {"sha": "2d02b8a16da67415c0e6b8f8016a318bfe117f89", "filename": "src/librustdoc/html/length_limit/tests.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4478ecc352d6f3f12c1cb4b9dd5e7e06762286ee/src%2Flibrustdoc%2Fhtml%2Flength_limit%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4478ecc352d6f3f12c1cb4b9dd5e7e06762286ee/src%2Flibrustdoc%2Fhtml%2Flength_limit%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flength_limit%2Ftests.rs?ref=4478ecc352d6f3f12c1cb4b9dd5e7e06762286ee", "patch": "@@ -107,11 +107,14 @@ fn quickly_past_the_limit() {\n }\n \n #[test]\n-#[should_panic = \"called `Option::unwrap()` on a `None` value\"]\n fn close_too_many() {\n     let mut buf = HtmlWithLimit::new(60);\n     buf.open_tag(\"p\");\n     buf.push(\"Hello\");\n     buf.close_tag();\n+    // This call does not panic because there are valid cases\n+    // where `close_tag()` is called with no tags left to close.\n+    // So `close_tag()` does nothing in this case.\n     buf.close_tag();\n+    assert_eq!(buf.finish(), \"<p>Hello</p>\");\n }"}]}