{"sha": "69862b74fab2a24230a9157c988bad50d8538fda", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5ODYyYjc0ZmFiMmEyNDIzMGE5MTU3Yzk4OGJhZDUwZDg1MzhmZGE=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-12T21:47:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-12T21:47:41Z"}, "message": "Rollup merge of #71069 - marmeladema:dummy-hir-id-obligation-clause, r=eddyb\n\nRemove some usage of `DUMMY_HIR_ID`\n\nUse `ObligationClause::dummy()` when appropriate or replace `hir::DUMMY_HIR_ID`by `hir::CRATE_HIR_ID`, as used in `ObligationClause::dummy()`.", "tree": {"sha": "490e55838be3c4593b0528952e6fd9699d7ee961", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/490e55838be3c4593b0528952e6fd9699d7ee961"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69862b74fab2a24230a9157c988bad50d8538fda", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJek4x9CRBK7hj4Ov3rIwAAdHIIAH5wRkw2o4ytHKytabrGettl\nF+27Cz2tWoMdEYe+yd3dD+fkhRc9GmdyQnhsWYQC9bhZYPioJcillo3TvIRMbfTs\n2i1ZuS/Z/zty7+6YBz8uFSj5Fbj6axuQ2bsr+ElWWmjQxzzRcRGt3uhlajGUvQDY\nljbxPtqBSMDEk3Z2hB/I4wLdap5um7umypD73pOTvOFPlvoyaIDz81ELM3h3bpSd\nqL9jWFn6mnPY/uIBNOe1DJK0zMwEOVkMU2hNHUFTZfD00EOUXzA9PLaW7KuOJjiJ\nVcW7reyi88g4kfTiZBx5HylOxfWHMgO1FJW7HWI7dzDJ4wPTaQOE1T18svrITjQ=\n=tbhL\n-----END PGP SIGNATURE-----\n", "payload": "tree 490e55838be3c4593b0528952e6fd9699d7ee961\nparent ebb1a8b6ff2475213a45cebed9583e3e6c7951c8\nparent 0634789dee9fadf31bd0fe94898eb5937c130f77\nauthor Dylan DPC <dylan.dpc@gmail.com> 1586728061 +0200\ncommitter GitHub <noreply@github.com> 1586728061 +0200\n\nRollup merge of #71069 - marmeladema:dummy-hir-id-obligation-clause, r=eddyb\n\nRemove some usage of `DUMMY_HIR_ID`\n\nUse `ObligationClause::dummy()` when appropriate or replace `hir::DUMMY_HIR_ID`by `hir::CRATE_HIR_ID`, as used in `ObligationClause::dummy()`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69862b74fab2a24230a9157c988bad50d8538fda", "html_url": "https://github.com/rust-lang/rust/commit/69862b74fab2a24230a9157c988bad50d8538fda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69862b74fab2a24230a9157c988bad50d8538fda/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebb1a8b6ff2475213a45cebed9583e3e6c7951c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebb1a8b6ff2475213a45cebed9583e3e6c7951c8", "html_url": "https://github.com/rust-lang/rust/commit/ebb1a8b6ff2475213a45cebed9583e3e6c7951c8"}, {"sha": "0634789dee9fadf31bd0fe94898eb5937c130f77", "url": "https://api.github.com/repos/rust-lang/rust/commits/0634789dee9fadf31bd0fe94898eb5937c130f77", "html_url": "https://github.com/rust-lang/rust/commit/0634789dee9fadf31bd0fe94898eb5937c130f77"}], "stats": {"total": 63, "additions": 27, "deletions": 36}, "files": [{"sha": "db81ceea43f01329ce2e65fe56de5b7c1680276c", "filename": "src/librustc_infer/infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69862b74fab2a24230a9157c988bad50d8538fda/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69862b74fab2a24230a9157c988bad50d8538fda/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs?ref=69862b74fab2a24230a9157c988bad50d8538fda", "patch": "@@ -93,7 +93,8 @@ pub(super) fn note_and_explain_region(\n             let unknown_scope =\n                 || format!(\"{}unknown scope: {:?}{}.  Please report a bug.\", prefix, scope, suffix);\n             let span = scope.span(tcx, region_scope_tree);\n-            let tag = match tcx.hir().find(scope.hir_id(region_scope_tree)) {\n+            let hir_id = scope.hir_id(region_scope_tree);\n+            let tag = match hir_id.and_then(|hir_id| tcx.hir().find(hir_id)) {\n                 Some(Node::Block(_)) => \"block\",\n                 Some(Node::Expr(expr)) => match expr.kind {\n                     hir::ExprKind::Call(..) => \"call\","}, {"sha": "2ad6fe14ec716fbfb1474b95541b2d6985044ef5", "filename": "src/librustc_middle/middle/region.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/69862b74fab2a24230a9157c988bad50d8538fda/src%2Flibrustc_middle%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69862b74fab2a24230a9157c988bad50d8538fda/src%2Flibrustc_middle%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmiddle%2Fregion.rs?ref=69862b74fab2a24230a9157c988bad50d8538fda", "patch": "@@ -159,21 +159,20 @@ impl Scope {\n         self.id\n     }\n \n-    pub fn hir_id(&self, scope_tree: &ScopeTree) -> hir::HirId {\n-        match scope_tree.root_body {\n-            Some(hir_id) => hir::HirId { owner: hir_id.owner, local_id: self.item_local_id() },\n-            None => hir::DUMMY_HIR_ID,\n-        }\n+    pub fn hir_id(&self, scope_tree: &ScopeTree) -> Option<hir::HirId> {\n+        scope_tree\n+            .root_body\n+            .map(|hir_id| hir::HirId { owner: hir_id.owner, local_id: self.item_local_id() })\n     }\n \n     /// Returns the span of this `Scope`. Note that in general the\n     /// returned span may not correspond to the span of any `NodeId` in\n     /// the AST.\n     pub fn span(&self, tcx: TyCtxt<'_>, scope_tree: &ScopeTree) -> Span {\n-        let hir_id = self.hir_id(scope_tree);\n-        if hir_id == hir::DUMMY_HIR_ID {\n-            return DUMMY_SP;\n-        }\n+        let hir_id = match self.hir_id(scope_tree) {\n+            Some(hir_id) => hir_id,\n+            None => return DUMMY_SP,\n+        };\n         let span = tcx.hir().span(hir_id);\n         if let ScopeData::Remainder(first_statement_index) = self.data {\n             if let Node::Block(ref blk) = tcx.hir().get(hir_id) {"}, {"sha": "6c9d25cfaa54b850503f14f853611b170a46248e", "filename": "src/librustc_passes/check_attr.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/69862b74fab2a24230a9157c988bad50d8538fda/src%2Flibrustc_passes%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69862b74fab2a24230a9157c988bad50d8538fda/src%2Flibrustc_passes%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_attr.rs?ref=69862b74fab2a24230a9157c988bad50d8538fda", "patch": "@@ -14,7 +14,6 @@ use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n-use rustc_hir::DUMMY_HIR_ID;\n use rustc_hir::{self, HirId, Item, ItemKind, TraitItem};\n use rustc_hir::{MethodKind, Target};\n use rustc_session::lint::builtin::{CONFLICTING_REPR_HINTS, UNUSED_ATTRIBUTES};\n@@ -360,7 +359,7 @@ impl CheckAttrVisitor<'tcx> {\n         if let hir::StmtKind::Local(ref l) = stmt.kind {\n             for attr in l.attrs.iter() {\n                 if attr.check_name(sym::inline) {\n-                    self.check_inline(DUMMY_HIR_ID, attr, &stmt.span, Target::Statement);\n+                    self.check_inline(l.hir_id, attr, &stmt.span, Target::Statement);\n                 }\n                 if attr.check_name(sym::repr) {\n                     self.emit_repr_error(\n@@ -381,7 +380,7 @@ impl CheckAttrVisitor<'tcx> {\n         };\n         for attr in expr.attrs.iter() {\n             if attr.check_name(sym::inline) {\n-                self.check_inline(DUMMY_HIR_ID, attr, &expr.span, target);\n+                self.check_inline(expr.hir_id, attr, &expr.span, target);\n             }\n             if attr.check_name(sym::repr) {\n                 self.emit_repr_error("}, {"sha": "23a605bef0cd322c8059a6ef27abde18e15cfc32", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/69862b74fab2a24230a9157c988bad50d8538fda/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69862b74fab2a24230a9157c988bad50d8538fda/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=69862b74fab2a24230a9157c988bad50d8538fda", "patch": "@@ -77,31 +77,31 @@ impl<'a, 'hir> Visitor<'hir> for CheckLoopVisitor<'a, 'hir> {\n                 }\n \n                 let loop_id = match label.target_id {\n-                    Ok(loop_id) => loop_id,\n-                    Err(hir::LoopIdError::OutsideLoopScope) => hir::DUMMY_HIR_ID,\n+                    Ok(loop_id) => Some(loop_id),\n+                    Err(hir::LoopIdError::OutsideLoopScope) => None,\n                     Err(hir::LoopIdError::UnlabeledCfInWhileCondition) => {\n                         self.emit_unlabled_cf_in_while_condition(e.span, \"break\");\n-                        hir::DUMMY_HIR_ID\n+                        None\n                     }\n-                    Err(hir::LoopIdError::UnresolvedLabel) => hir::DUMMY_HIR_ID,\n+                    Err(hir::LoopIdError::UnresolvedLabel) => None,\n                 };\n \n-                if loop_id != hir::DUMMY_HIR_ID {\n+                if let Some(loop_id) = loop_id {\n                     if let Node::Block(_) = self.hir_map.find(loop_id).unwrap() {\n                         return;\n                     }\n                 }\n \n                 if opt_expr.is_some() {\n-                    let loop_kind = if loop_id == hir::DUMMY_HIR_ID {\n-                        None\n-                    } else {\n+                    let loop_kind = if let Some(loop_id) = loop_id {\n                         Some(match self.hir_map.expect_expr(loop_id).kind {\n                             hir::ExprKind::Loop(_, _, source) => source,\n                             ref r => {\n                                 span_bug!(e.span, \"break label resolved to a non-loop: {:?}\", r)\n                             }\n                         })\n+                    } else {\n+                        None\n                     };\n                     match loop_kind {\n                         None | Some(hir::LoopSource::Loop) => (),"}, {"sha": "052de4a4e5b555682ea13162fb964a15449cf12c", "filename": "src/librustc_trait_selection/traits/auto_trait.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/69862b74fab2a24230a9157c988bad50d8538fda/src%2Flibrustc_trait_selection%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69862b74fab2a24230a9157c988bad50d8538fda/src%2Flibrustc_trait_selection%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fauto_trait.rs?ref=69862b74fab2a24230a9157c988bad50d8538fda", "patch": "@@ -187,13 +187,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n             // to store all of the necessary region/lifetime bounds in the InferContext, as well as\n             // an additional sanity check.\n             let mut fulfill = FulfillmentContext::new();\n-            fulfill.register_bound(\n-                &infcx,\n-                full_env,\n-                ty,\n-                trait_did,\n-                ObligationCause::misc(DUMMY_SP, hir::DUMMY_HIR_ID),\n-            );\n+            fulfill.register_bound(&infcx, full_env, ty, trait_did, ObligationCause::dummy());\n             fulfill.select_all_or_error(&infcx).unwrap_or_else(|e| {\n                 panic!(\"Unable to fulfill trait {:?} for '{:?}': {:?}\", trait_did, ty, e)\n             });\n@@ -292,7 +286,7 @@ impl AutoTraitFinder<'tcx> {\n             user_env.caller_bounds.iter().cloned().collect();\n \n         let mut new_env = param_env;\n-        let dummy_cause = ObligationCause::misc(DUMMY_SP, hir::DUMMY_HIR_ID);\n+        let dummy_cause = ObligationCause::dummy();\n \n         while let Some(pred) = predicates.pop_front() {\n             infcx.clear_caches();\n@@ -615,7 +609,7 @@ impl AutoTraitFinder<'tcx> {\n         select: &mut SelectionContext<'_, 'tcx>,\n         only_projections: bool,\n     ) -> bool {\n-        let dummy_cause = ObligationCause::misc(DUMMY_SP, hir::DUMMY_HIR_ID);\n+        let dummy_cause = ObligationCause::dummy();\n \n         for (obligation, mut predicate) in nested.map(|o| (o.clone(), o.predicate)) {\n             let is_new_pred = fresh_preds.insert(self.clean_pred(select.infcx(), predicate));"}, {"sha": "f5f4a51eb54e21dda7fbb984eba12bf5e26a531a", "filename": "src/librustc_trait_selection/traits/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/69862b74fab2a24230a9157c988bad50d8538fda/src%2Flibrustc_trait_selection%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69862b74fab2a24230a9157c988bad50d8538fda/src%2Flibrustc_trait_selection%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fmod.rs?ref=69862b74fab2a24230a9157c988bad50d8538fda", "patch": "@@ -31,7 +31,7 @@ use rustc_middle::middle::region;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::subst::{InternalSubsts, SubstsRef};\n use rustc_middle::ty::{self, GenericParamDefKind, ToPredicate, Ty, TyCtxt, WithConstness};\n-use rustc_span::{Span, DUMMY_SP};\n+use rustc_span::Span;\n \n use std::fmt::Debug;\n \n@@ -136,7 +136,7 @@ pub fn type_known_to_meet_bound_modulo_regions<'a, 'tcx>(\n     let trait_ref = ty::TraitRef { def_id, substs: infcx.tcx.mk_substs_trait(ty, &[]) };\n     let obligation = Obligation {\n         param_env,\n-        cause: ObligationCause::misc(span, hir::DUMMY_HIR_ID),\n+        cause: ObligationCause::misc(span, hir::CRATE_HIR_ID),\n         recursion_depth: 0,\n         predicate: trait_ref.without_const().to_predicate(),\n     };\n@@ -163,7 +163,7 @@ pub fn type_known_to_meet_bound_modulo_regions<'a, 'tcx>(\n         // We can use a dummy node-id here because we won't pay any mind\n         // to region obligations that arise (there shouldn't really be any\n         // anyhow).\n-        let cause = ObligationCause::misc(span, hir::DUMMY_HIR_ID);\n+        let cause = ObligationCause::misc(span, hir::CRATE_HIR_ID);\n \n         fulfill_cx.register_bound(infcx, param_env, ty, def_id, cause);\n "}, {"sha": "d6d3e86a2c8d37dee0f3d781d6fb2de3f9737ffe", "filename": "src/librustc_traits/normalize_projection_ty.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69862b74fab2a24230a9157c988bad50d8538fda/src%2Flibrustc_traits%2Fnormalize_projection_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69862b74fab2a24230a9157c988bad50d8538fda/src%2Flibrustc_traits%2Fnormalize_projection_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fnormalize_projection_ty.rs?ref=69862b74fab2a24230a9157c988bad50d8538fda", "patch": "@@ -1,10 +1,8 @@\n-use rustc_hir as hir;\n use rustc_infer::infer::canonical::{Canonical, QueryResponse};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_infer::traits::TraitEngineExt as _;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{ParamEnvAnd, TyCtxt};\n-use rustc_span::DUMMY_SP;\n use rustc_trait_selection::infer::InferCtxtBuilderExt;\n use rustc_trait_selection::traits::query::{\n     normalize::NormalizationResult, CanonicalProjectionGoal, NoSolution,\n@@ -27,7 +25,7 @@ fn normalize_projection_ty<'tcx>(\n         &goal,\n         |infcx, fulfill_cx, ParamEnvAnd { param_env, value: goal }| {\n             let selcx = &mut SelectionContext::new(infcx);\n-            let cause = ObligationCause::misc(DUMMY_SP, hir::DUMMY_HIR_ID);\n+            let cause = ObligationCause::dummy();\n             let mut obligations = vec![];\n             let answer = traits::normalize_projection_type(\n                 selcx,"}]}