{"sha": "0a780c0ab3869d92fb56ae3b2ddc7636fb169314", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhNzgwYzBhYjM4NjlkOTJmYjU2YWUzYjJkZGM3NjM2ZmIxNjkzMTQ=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-12-23T11:15:38Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-12-23T11:15:38Z"}, "message": "Implement const pat inference", "tree": {"sha": "9323c15986fdb61054e972fcebf88717f1ebb277", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9323c15986fdb61054e972fcebf88717f1ebb277"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a780c0ab3869d92fb56ae3b2ddc7636fb169314", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a780c0ab3869d92fb56ae3b2ddc7636fb169314", "html_url": "https://github.com/rust-lang/rust/commit/0a780c0ab3869d92fb56ae3b2ddc7636fb169314", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a780c0ab3869d92fb56ae3b2ddc7636fb169314/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd1fcf2c2e90ab04103a6aa9d033ec64dcc8d555", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd1fcf2c2e90ab04103a6aa9d033ec64dcc8d555", "html_url": "https://github.com/rust-lang/rust/commit/fd1fcf2c2e90ab04103a6aa9d033ec64dcc8d555"}], "stats": {"total": 56, "additions": 51, "deletions": 5}, "files": [{"sha": "4492a7d7734d09d67c9b9d6ca3ad49bca9faec65", "filename": "crates/hir_def/src/body/lower.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0a780c0ab3869d92fb56ae3b2ddc7636fb169314/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a780c0ab3869d92fb56ae3b2ddc7636fb169314/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs?ref=0a780c0ab3869d92fb56ae3b2ddc7636fb169314", "patch": "@@ -932,10 +932,16 @@ impl ExprCollector<'_> {\n                 let inner = self.collect_pat_opt(boxpat.pat());\n                 Pat::Box { inner }\n             }\n-            // FIXME: implement\n-            ast::Pat::RangePat(_) | ast::Pat::MacroPat(_) | ast::Pat::ConstBlockPat(_) => {\n-                Pat::Missing\n+            ast::Pat::ConstBlockPat(const_block_pat) => {\n+                if let Some(expr) = const_block_pat.block_expr() {\n+                    let expr_id = self.collect_block(expr);\n+                    Pat::ConstBlock(expr_id)\n+                } else {\n+                    Pat::Missing\n+                }\n             }\n+            // FIXME: implement\n+            ast::Pat::RangePat(_) | ast::Pat::MacroPat(_) => Pat::Missing,\n         };\n         let ptr = AstPtr::new(&pat);\n         self.alloc_pat(pattern, Either::Left(ptr))"}, {"sha": "b1e57c693186cc5b1fda5c6456547ae91c04148d", "filename": "crates/hir_def/src/expr.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a780c0ab3869d92fb56ae3b2ddc7636fb169314/crates%2Fhir_def%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a780c0ab3869d92fb56ae3b2ddc7636fb169314/crates%2Fhir_def%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fexpr.rs?ref=0a780c0ab3869d92fb56ae3b2ddc7636fb169314", "patch": "@@ -399,12 +399,18 @@ pub enum Pat {\n     TupleStruct { path: Option<Path>, args: Vec<PatId>, ellipsis: Option<usize> },\n     Ref { pat: PatId, mutability: Mutability },\n     Box { inner: PatId },\n+    ConstBlock(ExprId),\n }\n \n impl Pat {\n     pub fn walk_child_pats(&self, mut f: impl FnMut(PatId)) {\n         match self {\n-            Pat::Range { .. } | Pat::Lit(..) | Pat::Path(..) | Pat::Wild | Pat::Missing => {}\n+            Pat::Range { .. }\n+            | Pat::Lit(..)\n+            | Pat::Path(..)\n+            | Pat::ConstBlock(..)\n+            | Pat::Wild\n+            | Pat::Missing => {}\n             Pat::Bind { subpat, .. } => {\n                 subpat.iter().copied().for_each(f);\n             }"}, {"sha": "d974f805b5ba82ac3a7f8ae45d63fea52713d956", "filename": "crates/hir_ty/src/infer/pat.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a780c0ab3869d92fb56ae3b2ddc7636fb169314/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a780c0ab3869d92fb56ae3b2ddc7636fb169314/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs?ref=0a780c0ab3869d92fb56ae3b2ddc7636fb169314", "patch": "@@ -243,6 +243,9 @@ impl<'a> InferenceContext<'a> {\n                 }\n                 None => Ty::Unknown,\n             },\n+            Pat::ConstBlock(expr) => {\n+                self.infer_expr(*expr, &Expectation::has_type(expected.clone()))\n+            }\n             Pat::Missing => Ty::Unknown,\n         };\n         // use a new type variable if we got Ty::Unknown here\n@@ -264,8 +267,9 @@ fn is_non_ref_pat(body: &hir_def::body::Body, pat: PatId) -> bool {\n         | Pat::Range { .. }\n         | Pat::Slice { .. } => true,\n         Pat::Or(pats) => pats.iter().all(|p| is_non_ref_pat(body, *p)),\n-        // FIXME: Path/Lit might actually evaluate to ref, but inference is unimplemented.\n+        // FIXME: ConstBlock/Path/Lit might actually evaluate to ref, but inference is unimplemented.\n         Pat::Path(..) => true,\n+        Pat::ConstBlock(..) => true,\n         Pat::Lit(expr) => match body[*expr] {\n             Expr::Literal(Literal::String(..)) => false,\n             _ => true,"}, {"sha": "2053d8f56ee085bc933f16249c634a64ad8dc0d3", "filename": "crates/hir_ty/src/tests/patterns.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0a780c0ab3869d92fb56ae3b2ddc7636fb169314/crates%2Fhir_ty%2Fsrc%2Ftests%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a780c0ab3869d92fb56ae3b2ddc7636fb169314/crates%2Fhir_ty%2Fsrc%2Ftests%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fpatterns.rs?ref=0a780c0ab3869d92fb56ae3b2ddc7636fb169314", "patch": "@@ -774,3 +774,33 @@ fn foo(tuple: Tuple) {\n         \"#]],\n     );\n }\n+\n+#[test]\n+fn const_block_pattern() {\n+    check_infer(\n+        r#\"\n+struct Foo(usize);\n+fn foo(foo: Foo) {\n+    match foo {\n+        const { Foo(15 + 32) } => {},\n+        _ => {}\n+    }\n+}\"#,\n+        expect![[r#\"\n+            26..29 'foo': Foo\n+            36..115 '{     ...   } }': ()\n+            42..113 'match ...     }': ()\n+            48..51 'foo': Foo\n+            62..84 'const ... 32) }': Foo\n+            68..84 '{ Foo(... 32) }': Foo\n+            70..73 'Foo': Foo(usize) -> Foo\n+            70..82 'Foo(15 + 32)': Foo\n+            74..76 '15': usize\n+            74..81 '15 + 32': usize\n+            79..81 '32': usize\n+            88..90 '{}': ()\n+            100..101 '_': Foo\n+            105..107 '{}': ()\n+        \"#]],\n+    );\n+}"}]}