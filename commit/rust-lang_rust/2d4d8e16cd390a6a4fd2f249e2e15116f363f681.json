{"sha": "2d4d8e16cd390a6a4fd2f249e2e15116f363f681", "node_id": "C_kwDOAAsO6NoAKDJkNGQ4ZTE2Y2QzOTBhNmE0ZmQyZjI0OWUyZTE1MTE2ZjM2M2Y2ODE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-27T17:38:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-27T17:38:40Z"}, "message": "Auto merge of #8984 - xanathar:pr/suspicious_to_owned, r=llogiq\n\nImplemented `suspicious_to_owned` lint to check if `to_owned` is called on a `Cow`\n\nchangelog: Add lint ``[`suspicious_to_owned`]``\n\n-----------------\nHi,\nposting this unsolicited PR as I've been burned by this issue :)\nBeing unsolicited, feel free to reject it or reassign a different lint level etc.\n\nThis lint checks whether `to_owned` is called on `Cow<'_, _>`. This is done because `to_owned` is very similarly named to `into_owned`, but the effect of calling those two methods is completely different (one makes the `Cow::Borrowed` into a `Cow::Owned`, the other just clones the `Cow`). If the cow is then passed to code for which the type is not checked (e.g. generics, closures, etc.) it might slip through and if the cow data is coming from an unsafe context there is the potential for accidentally cause undefined behavior.\nEven if not falling into this painful case, there's really no reason to call `to_owned` on a `Cow` other than confusing people reading the code: either `into_owned` or `clone` should be called.\n\nNote that this overlaps perfectly with `implicit_clone` as a warning, but `implicit_clone` is classified pedantic (while the consequences for `Cow` might be of a wider blast radius than just pedantry); given the overlap, I set-up the lint so that if `suspicious_to_owned` triggers `implicit_clone` will not trigger. I'm not 100% sure this is done in the correct way (I tried to copy what other lints were doing) so please provide feedback on it if it isn't.\n\n### Checklist\n\n- \\[x] Followed [lint naming conventions][lint_naming]\n- \\[x] Added passing UI tests (including committed `.stderr` file)\n- \\[x] `cargo test` passes locally\n- \\[x] Executed `cargo dev update_lints`\n- \\[x] Added lint documentation\n- \\[x] Run `cargo dev fmt`", "tree": {"sha": "09cb736777a71ebd7aae33ccc642617123cbb0a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09cb736777a71ebd7aae33ccc642617123cbb0a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d4d8e16cd390a6a4fd2f249e2e15116f363f681", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d4d8e16cd390a6a4fd2f249e2e15116f363f681", "html_url": "https://github.com/rust-lang/rust/commit/2d4d8e16cd390a6a4fd2f249e2e15116f363f681", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d4d8e16cd390a6a4fd2f249e2e15116f363f681/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be8bd600009dd087f6c2cd4b354cf016b2072fd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/be8bd600009dd087f6c2cd4b354cf016b2072fd3", "html_url": "https://github.com/rust-lang/rust/commit/be8bd600009dd087f6c2cd4b354cf016b2072fd3"}, {"sha": "de028e2fb9d81d58d62dfc7bc8fd2335a9885641", "url": "https://api.github.com/repos/rust-lang/rust/commits/de028e2fb9d81d58d62dfc7bc8fd2335a9885641", "html_url": "https://github.com/rust-lang/rust/commit/de028e2fb9d81d58d62dfc7bc8fd2335a9885641"}], "stats": {"total": 203, "additions": 202, "deletions": 1}, "files": [{"sha": "a076997eebdfd5a55b787d57446cd31e4de34fa3", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2d4d8e16cd390a6a4fd2f249e2e15116f363f681/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/2d4d8e16cd390a6a4fd2f249e2e15116f363f681/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=2d4d8e16cd390a6a4fd2f249e2e15116f363f681", "patch": "@@ -4082,6 +4082,7 @@ Released 2018-09-13\n [`suspicious_op_assign_impl`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_op_assign_impl\n [`suspicious_operation_groupings`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_operation_groupings\n [`suspicious_splitn`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_splitn\n+[`suspicious_to_owned`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_to_owned\n [`suspicious_unary_op_formatting`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_unary_op_formatting\n [`swap_ptr_to_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#swap_ptr_to_ref\n [`tabs_in_doc_comments`]: https://rust-lang.github.io/rust-clippy/master/index.html#tabs_in_doc_comments"}, {"sha": "64982851b56770ddc0d535961c05fcf348584451", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2d4d8e16cd390a6a4fd2f249e2e15116f363f681/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d4d8e16cd390a6a4fd2f249e2e15116f363f681/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=2d4d8e16cd390a6a4fd2f249e2e15116f363f681", "patch": "@@ -207,6 +207,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(methods::STRING_EXTEND_CHARS),\n     LintId::of(methods::SUSPICIOUS_MAP),\n     LintId::of(methods::SUSPICIOUS_SPLITN),\n+    LintId::of(methods::SUSPICIOUS_TO_OWNED),\n     LintId::of(methods::UNINIT_ASSUMED_INIT),\n     LintId::of(methods::UNIT_HASH),\n     LintId::of(methods::UNNECESSARY_FILTER_MAP),"}, {"sha": "fbf77fb734fa7fbbefe6baed827125e337f9d1d3", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2d4d8e16cd390a6a4fd2f249e2e15116f363f681/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d4d8e16cd390a6a4fd2f249e2e15116f363f681/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=2d4d8e16cd390a6a4fd2f249e2e15116f363f681", "patch": "@@ -358,6 +358,7 @@ store.register_lints(&[\n     methods::STRING_EXTEND_CHARS,\n     methods::SUSPICIOUS_MAP,\n     methods::SUSPICIOUS_SPLITN,\n+    methods::SUSPICIOUS_TO_OWNED,\n     methods::UNINIT_ASSUMED_INIT,\n     methods::UNIT_HASH,\n     methods::UNNECESSARY_FILTER_MAP,"}, {"sha": "aa4e571dbe23d01a4a7b66bd1d44f1479c60cde1", "filename": "clippy_lints/src/lib.register_suspicious.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2d4d8e16cd390a6a4fd2f249e2e15116f363f681/clippy_lints%2Fsrc%2Flib.register_suspicious.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d4d8e16cd390a6a4fd2f249e2e15116f363f681/clippy_lints%2Fsrc%2Flib.register_suspicious.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_suspicious.rs?ref=2d4d8e16cd390a6a4fd2f249e2e15116f363f681", "patch": "@@ -24,6 +24,7 @@ store.register_group(true, \"clippy::suspicious\", Some(\"clippy_suspicious\"), vec!\n     LintId::of(loops::MUT_RANGE_BOUND),\n     LintId::of(methods::NO_EFFECT_REPLACE),\n     LintId::of(methods::SUSPICIOUS_MAP),\n+    LintId::of(methods::SUSPICIOUS_TO_OWNED),\n     LintId::of(multi_assignments::MULTI_ASSIGNMENTS),\n     LintId::of(mut_key::MUTABLE_KEY_TYPE),\n     LintId::of(octal_escapes::OCTAL_ESCAPES),"}, {"sha": "a0d190a58aff9a7f10478600f0d8ddab1b3b2840", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 57, "deletions": 1, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/2d4d8e16cd390a6a4fd2f249e2e15116f363f681/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d4d8e16cd390a6a4fd2f249e2e15116f363f681/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=2d4d8e16cd390a6a4fd2f249e2e15116f363f681", "patch": "@@ -78,6 +78,7 @@ mod str_splitn;\n mod string_extend_chars;\n mod suspicious_map;\n mod suspicious_splitn;\n+mod suspicious_to_owned;\n mod uninit_assumed_init;\n mod unit_hash;\n mod unnecessary_filter_map;\n@@ -2053,6 +2054,55 @@ declare_clippy_lint! {\n     \"replace `.iter().count()` with `.len()`\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for the usage of `_.to_owned()`, on a `Cow<'_, _>`.\n+    ///\n+    /// ### Why is this bad?\n+    /// Calling `to_owned()` on a `Cow` creates a clone of the `Cow`\n+    /// itself, without taking ownership of the `Cow` contents (i.e.\n+    /// it's equivalent to calling `Cow::clone`).\n+    /// The similarly named `into_owned` method, on the other hand,\n+    /// clones the `Cow` contents, effectively turning any `Cow::Borrowed`\n+    /// into a `Cow::Owned`.\n+    ///\n+    /// Given the potential ambiguity, consider replacing `to_owned`\n+    /// with `clone` for better readability or, if getting a `Cow::Owned`\n+    /// was the original intent, using `into_owned` instead.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// # use std::borrow::Cow;\n+    /// let s = \"Hello world!\";\n+    /// let cow = Cow::Borrowed(s);\n+    ///\n+    /// let data = cow.to_owned();\n+    /// assert!(matches!(data, Cow::Borrowed(_)))\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// # use std::borrow::Cow;\n+    /// let s = \"Hello world!\";\n+    /// let cow = Cow::Borrowed(s);\n+    ///\n+    /// let data = cow.clone();\n+    /// assert!(matches!(data, Cow::Borrowed(_)))\n+    /// ```\n+    /// or\n+    /// ```rust\n+    /// # use std::borrow::Cow;\n+    /// let s = \"Hello world!\";\n+    /// let cow = Cow::Borrowed(s);\n+    ///\n+    /// let data = cow.into_owned();\n+    /// assert!(matches!(data, String))\n+    /// ```\n+    #[clippy::version = \"1.65.0\"]\n+    pub SUSPICIOUS_TO_OWNED,\n+    suspicious,\n+    \"calls to `to_owned` on a `Cow<'_, _>` might not do what they are expected\"\n+}\n+\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for calls to [`splitn`]\n@@ -3075,6 +3125,7 @@ impl_lint_pass!(Methods => [\n     FROM_ITER_INSTEAD_OF_COLLECT,\n     INSPECT_FOR_EACH,\n     IMPLICIT_CLONE,\n+    SUSPICIOUS_TO_OWNED,\n     SUSPICIOUS_SPLITN,\n     MANUAL_STR_REPEAT,\n     EXTEND_WITH_DRAIN,\n@@ -3553,7 +3604,12 @@ impl Methods {\n                     }\n                     unnecessary_lazy_eval::check(cx, expr, recv, arg, \"then_some\");\n                 },\n-                (\"to_os_string\" | \"to_owned\" | \"to_path_buf\" | \"to_vec\", []) => {\n+                (\"to_owned\", []) => {\n+                    if !suspicious_to_owned::check(cx, expr, recv) {\n+                        implicit_clone::check(cx, name, expr, recv);\n+                    }\n+                },\n+                (\"to_os_string\" | \"to_path_buf\" | \"to_vec\", []) => {\n                     implicit_clone::check(cx, name, expr, recv);\n                 },\n                 (\"unwrap\", []) => {"}, {"sha": "6b306fbf0085541a3bad26b1ecab72a036a65be1", "filename": "clippy_lints/src/methods/suspicious_to_owned.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2d4d8e16cd390a6a4fd2f249e2e15116f363f681/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d4d8e16cd390a6a4fd2f249e2e15116f363f681/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_to_owned.rs?ref=2d4d8e16cd390a6a4fd2f249e2e15116f363f681", "patch": "@@ -0,0 +1,36 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::is_diag_trait_item;\n+use clippy_utils::source::snippet_with_context;\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n+use rustc_hir as hir;\n+use rustc_lint::LateContext;\n+use rustc_middle::ty;\n+use rustc_span::sym;\n+\n+use super::SUSPICIOUS_TO_OWNED;\n+\n+pub fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, recv: &hir::Expr<'_>) -> bool {\n+    if_chain! {\n+        if let Some(method_def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n+        if is_diag_trait_item(cx, method_def_id, sym::ToOwned);\n+        let input_type = cx.typeck_results().expr_ty(expr);\n+        if let ty::Adt(adt, _) = cx.typeck_results().expr_ty(expr).kind();\n+        if cx.tcx.is_diagnostic_item(sym::Cow, adt.did());\n+        then {\n+            let mut app = Applicability::MaybeIncorrect;\n+            let recv_snip = snippet_with_context(cx, recv.span, expr.span.ctxt(), \"..\", &mut app).0;\n+            span_lint_and_sugg(\n+                cx,\n+                SUSPICIOUS_TO_OWNED,\n+                expr.span,\n+                &format!(\"this `to_owned` call clones the {0} itself and does not cause the {0} contents to become owned\", input_type),\n+                \"consider using, depending on intent\",\n+                format!(\"{0}.clone()` or `{0}.into_owned()\", recv_snip),\n+                app,\n+            );\n+            return true;\n+        }\n+    }\n+    false\n+}"}, {"sha": "ba6186e599e9637f0481df911ab18085ee3a441f", "filename": "tests/compile-test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2d4d8e16cd390a6a4fd2f249e2e15116f363f681/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d4d8e16cd390a6a4fd2f249e2e15116f363f681/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=2d4d8e16cd390a6a4fd2f249e2e15116f363f681", "patch": "@@ -393,6 +393,7 @@ const RUSTFIX_COVERAGE_KNOWN_EXCEPTIONS: &[&str] = &[\n     \"search_is_some.rs\",\n     \"single_component_path_imports_nested_first.rs\",\n     \"string_add.rs\",\n+    \"suspicious_to_owned.rs\",\n     \"toplevel_ref_arg_non_rustfix.rs\",\n     \"unit_arg.rs\",\n     \"unnecessary_clone.rs\","}, {"sha": "a90e78a0ea03abf0ea7c89aa09788c5b1516cee6", "filename": "tests/ui/suspicious_to_owned.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/2d4d8e16cd390a6a4fd2f249e2e15116f363f681/tests%2Fui%2Fsuspicious_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d4d8e16cd390a6a4fd2f249e2e15116f363f681/tests%2Fui%2Fsuspicious_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuspicious_to_owned.rs?ref=2d4d8e16cd390a6a4fd2f249e2e15116f363f681", "patch": "@@ -0,0 +1,62 @@\n+#![warn(clippy::suspicious_to_owned)]\n+#![warn(clippy::implicit_clone)]\n+#![allow(clippy::redundant_clone)]\n+use std::borrow::Cow;\n+use std::ffi::CStr;\n+\n+fn main() {\n+    let moo = \"Moooo\";\n+    let c_moo = b\"Moooo\\0\";\n+    let c_moo_ptr = c_moo.as_ptr() as *const i8;\n+    let moos = ['M', 'o', 'o'];\n+    let moos_vec = moos.to_vec();\n+\n+    // we expect this to be linted\n+    let cow = Cow::Borrowed(moo);\n+    let _ = cow.to_owned();\n+    // we expect no lints for this\n+    let cow = Cow::Borrowed(moo);\n+    let _ = cow.into_owned();\n+    // we expect no lints for this\n+    let cow = Cow::Borrowed(moo);\n+    let _ = cow.clone();\n+\n+    // we expect this to be linted\n+    let cow = Cow::Borrowed(&moos);\n+    let _ = cow.to_owned();\n+    // we expect no lints for this\n+    let cow = Cow::Borrowed(&moos);\n+    let _ = cow.into_owned();\n+    // we expect no lints for this\n+    let cow = Cow::Borrowed(&moos);\n+    let _ = cow.clone();\n+\n+    // we expect this to be linted\n+    let cow = Cow::Borrowed(&moos_vec);\n+    let _ = cow.to_owned();\n+    // we expect no lints for this\n+    let cow = Cow::Borrowed(&moos_vec);\n+    let _ = cow.into_owned();\n+    // we expect no lints for this\n+    let cow = Cow::Borrowed(&moos_vec);\n+    let _ = cow.clone();\n+\n+    // we expect this to be linted\n+    let cow = unsafe { CStr::from_ptr(c_moo_ptr) }.to_string_lossy();\n+    let _ = cow.to_owned();\n+    // we expect no lints for this\n+    let cow = unsafe { CStr::from_ptr(c_moo_ptr) }.to_string_lossy();\n+    let _ = cow.into_owned();\n+    // we expect no lints for this\n+    let cow = unsafe { CStr::from_ptr(c_moo_ptr) }.to_string_lossy();\n+    let _ = cow.clone();\n+\n+    // we expect no lints for these\n+    let _ = moo.to_owned();\n+    let _ = c_moo.to_owned();\n+    let _ = moos.to_owned();\n+\n+    // we expect implicit_clone lints for these\n+    let _ = String::from(moo).to_owned();\n+    let _ = moos_vec.to_owned();\n+}"}, {"sha": "92e1024bf1f4ecd212275549e05dd323296bb49a", "filename": "tests/ui/suspicious_to_owned.stderr", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/2d4d8e16cd390a6a4fd2f249e2e15116f363f681/tests%2Fui%2Fsuspicious_to_owned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d4d8e16cd390a6a4fd2f249e2e15116f363f681/tests%2Fui%2Fsuspicious_to_owned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuspicious_to_owned.stderr?ref=2d4d8e16cd390a6a4fd2f249e2e15116f363f681", "patch": "@@ -0,0 +1,42 @@\n+error: this `to_owned` call clones the std::borrow::Cow<str> itself and does not cause the std::borrow::Cow<str> contents to become owned\n+  --> $DIR/suspicious_to_owned.rs:16:13\n+   |\n+LL |     let _ = cow.to_owned();\n+   |             ^^^^^^^^^^^^^^ help: consider using, depending on intent: `cow.clone()` or `cow.into_owned()`\n+   |\n+   = note: `-D clippy::suspicious-to-owned` implied by `-D warnings`\n+\n+error: this `to_owned` call clones the std::borrow::Cow<[char; 3]> itself and does not cause the std::borrow::Cow<[char; 3]> contents to become owned\n+  --> $DIR/suspicious_to_owned.rs:26:13\n+   |\n+LL |     let _ = cow.to_owned();\n+   |             ^^^^^^^^^^^^^^ help: consider using, depending on intent: `cow.clone()` or `cow.into_owned()`\n+\n+error: this `to_owned` call clones the std::borrow::Cow<std::vec::Vec<char>> itself and does not cause the std::borrow::Cow<std::vec::Vec<char>> contents to become owned\n+  --> $DIR/suspicious_to_owned.rs:36:13\n+   |\n+LL |     let _ = cow.to_owned();\n+   |             ^^^^^^^^^^^^^^ help: consider using, depending on intent: `cow.clone()` or `cow.into_owned()`\n+\n+error: this `to_owned` call clones the std::borrow::Cow<str> itself and does not cause the std::borrow::Cow<str> contents to become owned\n+  --> $DIR/suspicious_to_owned.rs:46:13\n+   |\n+LL |     let _ = cow.to_owned();\n+   |             ^^^^^^^^^^^^^^ help: consider using, depending on intent: `cow.clone()` or `cow.into_owned()`\n+\n+error: implicitly cloning a `String` by calling `to_owned` on its dereferenced type\n+  --> $DIR/suspicious_to_owned.rs:60:13\n+   |\n+LL |     let _ = String::from(moo).to_owned();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `String::from(moo).clone()`\n+   |\n+   = note: `-D clippy::implicit-clone` implied by `-D warnings`\n+\n+error: implicitly cloning a `Vec` by calling `to_owned` on its dereferenced type\n+  --> $DIR/suspicious_to_owned.rs:61:13\n+   |\n+LL |     let _ = moos_vec.to_owned();\n+   |             ^^^^^^^^^^^^^^^^^^^ help: consider using: `moos_vec.clone()`\n+\n+error: aborting due to 6 previous errors\n+"}]}