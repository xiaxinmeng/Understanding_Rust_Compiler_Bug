{"sha": "2a1fe26b6d354dbbd1b3843d288d56e74fa00557", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhMWZlMjZiNmQzNTRkYmJkMWIzODQzZDI4OGQ1NmU3NGZhMDA1NTc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-06-11T00:17:29Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-06-11T15:28:51Z"}, "message": "use Source more", "tree": {"sha": "6784274854b9808eb997eb868d5a4f2bc889f9a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6784274854b9808eb997eb868d5a4f2bc889f9a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a1fe26b6d354dbbd1b3843d288d56e74fa00557", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a1fe26b6d354dbbd1b3843d288d56e74fa00557", "html_url": "https://github.com/rust-lang/rust/commit/2a1fe26b6d354dbbd1b3843d288d56e74fa00557", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a1fe26b6d354dbbd1b3843d288d56e74fa00557/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91c120ccea4f0cfef20fd4d918154c8152f83816", "url": "https://api.github.com/repos/rust-lang/rust/commits/91c120ccea4f0cfef20fd4d918154c8152f83816", "html_url": "https://github.com/rust-lang/rust/commit/91c120ccea4f0cfef20fd4d918154c8152f83816"}], "stats": {"total": 103, "additions": 39, "deletions": 64}, "files": [{"sha": "2b372333fc92cb8b19b1a280315f26af64eff7ee", "filename": "crates/ra_hir/src/adt.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2a1fe26b6d354dbbd1b3843d288d56e74fa00557/crates%2Fra_hir%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a1fe26b6d354dbbd1b3843d288d56e74fa00557/crates%2Fra_hir%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fadt.rs?ref=2a1fe26b6d354dbbd1b3843d288d56e74fa00557", "patch": "@@ -11,7 +11,7 @@ use ra_syntax::{\n \n use crate::{\n     Name, AsName, Struct, Union, Enum, EnumVariant, Crate, AstDatabase,\n-    HirDatabase, HirFileId, StructField, FieldSource,\n+    HirDatabase, HirFileId, StructField, FieldSource, Source,\n     type_ref::TypeRef, DefDatabase,\n };\n \n@@ -72,15 +72,15 @@ impl EnumVariant {\n     pub(crate) fn source_impl(\n         &self,\n         db: &(impl DefDatabase + AstDatabase),\n-    ) -> (HirFileId, TreeArc<ast::EnumVariant>) {\n-        let (file_id, enum_def) = self.parent.source(db);\n-        let var = variants(&*enum_def)\n+    ) -> Source<TreeArc<ast::EnumVariant>> {\n+        let src = self.parent.source(db);\n+        let ast = variants(&*src.ast)\n             .zip(db.enum_data(self.parent).variants.iter())\n             .find(|(_syntax, (id, _))| *id == self.id)\n             .unwrap()\n             .0\n             .to_owned();\n-        (file_id, var)\n+        Source { file_id: src.file_id, ast }\n     }\n     pub(crate) fn variant_data(&self, db: &impl DefDatabase) -> Arc<VariantData> {\n         db.enum_data(self.parent).variants[self.id].variant_data.clone()\n@@ -95,9 +95,9 @@ pub struct EnumData {\n \n impl EnumData {\n     pub(crate) fn enum_data_query(db: &(impl DefDatabase + AstDatabase), e: Enum) -> Arc<EnumData> {\n-        let (_file_id, enum_def) = e.source(db);\n-        let name = enum_def.name().map(|n| n.as_name());\n-        let variants = variants(&*enum_def)\n+        let src = e.source(db);\n+        let name = src.ast.name().map(|n| n.as_name());\n+        let variants = variants(&*src.ast)\n             .map(|var| EnumVariantData {\n                 name: var.name().map(|it| it.as_name()),\n                 variant_data: Arc::new(VariantData::new(var.kind())),\n@@ -215,9 +215,8 @@ impl StructField {\n                 (ss.file_id, ss.ast.kind())\n             }\n             VariantDef::EnumVariant(e) => {\n-                let (file_id, source) = e.source(db);\n-                es = source;\n-                (file_id, es.kind())\n+                es = e.source(db);\n+                (es.file_id, es.ast.kind())\n             }\n         };\n "}, {"sha": "63fdca55ed5481d0d4a1f765105fb7c4802b57ec", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2a1fe26b6d354dbbd1b3843d288d56e74fa00557/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a1fe26b6d354dbbd1b3843d288d56e74fa00557/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=2a1fe26b6d354dbbd1b3843d288d56e74fa00557", "patch": "@@ -456,11 +456,8 @@ pub struct Enum {\n }\n \n impl Enum {\n-    pub fn source(\n-        self,\n-        db: &(impl DefDatabase + AstDatabase),\n-    ) -> (HirFileId, TreeArc<ast::EnumDef>) {\n-        self.id.source(db)\n+    pub fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<TreeArc<ast::EnumDef>> {\n+        self.id.source(db).into()\n     }\n \n     pub fn module(self, db: &impl HirDatabase) -> Module {\n@@ -509,7 +506,7 @@ impl EnumVariant {\n     pub fn source(\n         &self,\n         db: &(impl DefDatabase + AstDatabase),\n-    ) -> (HirFileId, TreeArc<ast::EnumVariant>) {\n+    ) -> Source<TreeArc<ast::EnumVariant>> {\n         self.source_impl(db)\n     }\n     pub fn module(&self, db: &impl HirDatabase) -> Module {"}, {"sha": "70b9d13b2ed26b9efc62804321483377ccf11d50", "filename": "crates/ra_hir/src/docs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a1fe26b6d354dbbd1b3843d288d56e74fa00557/crates%2Fra_hir%2Fsrc%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a1fe26b6d354dbbd1b3843d288d56e74fa00557/crates%2Fra_hir%2Fsrc%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdocs.rs?ref=2a1fe26b6d354dbbd1b3843d288d56e74fa00557", "patch": "@@ -77,8 +77,8 @@ pub(crate) fn documentation_query(\n             FieldSource::Pos(..) => return None,\n         },\n         DocDef::Struct(it) => docs_from_ast(&*it.source(db).ast),\n-        DocDef::Enum(it) => docs_from_ast(&*it.source(db).1),\n-        DocDef::EnumVariant(it) => docs_from_ast(&*it.source(db).1),\n+        DocDef::Enum(it) => docs_from_ast(&*it.source(db).ast),\n+        DocDef::EnumVariant(it) => docs_from_ast(&*it.source(db).ast),\n         DocDef::Static(it) => docs_from_ast(&*it.source(db).1),\n         DocDef::Const(it) => docs_from_ast(&*it.source(db).1),\n         DocDef::Function(it) => docs_from_ast(&*it.source(db).1),"}, {"sha": "2a92d594507db4056f748c18e591c12616f03cf0", "filename": "crates/ra_hir/src/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a1fe26b6d354dbbd1b3843d288d56e74fa00557/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a1fe26b6d354dbbd1b3843d288d56e74fa00557/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fgenerics.rs?ref=2a1fe26b6d354dbbd1b3843d288d56e74fa00557", "patch": "@@ -71,7 +71,7 @@ impl GenericParams {\n             GenericDef::Function(it) => generics.fill(&*it.source(db).1, start),\n             GenericDef::Struct(it) => generics.fill(&*it.source(db).ast, start),\n             GenericDef::Union(it) => generics.fill(&*it.source(db).1, start),\n-            GenericDef::Enum(it) => generics.fill(&*it.source(db).1, start),\n+            GenericDef::Enum(it) => generics.fill(&*it.source(db).ast, start),\n             GenericDef::Trait(it) => {\n                 // traits get the Self type as an implicit first type parameter\n                 generics.params.push(GenericParam {"}, {"sha": "90e3f1275cc9aa4b96ab267fd6d6a4ed7e419586", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a1fe26b6d354dbbd1b3843d288d56e74fa00557/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a1fe26b6d354dbbd1b3843d288d56e74fa00557/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=2a1fe26b6d354dbbd1b3843d288d56e74fa00557", "patch": "@@ -81,5 +81,5 @@ pub use self::code_model::{\n     StructField, FieldSource,\n     Static, Const, ConstSignature,\n     Trait, TypeAlias, MacroDef, Container,\n-    BuiltinType,\n+    BuiltinType, Source,\n };"}, {"sha": "7c68bb41ccbf27628d3cb9c514b98ed7e510255b", "filename": "crates/ra_ide_api/src/display/navigation_target.rs", "status": "modified", "additions": 13, "deletions": 37, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/2a1fe26b6d354dbbd1b3843d288d56e74fa00557/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a1fe26b6d354dbbd1b3843d288d56e74fa00557/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=2a1fe26b6d354dbbd1b3843d288d56e74fa00557", "patch": "@@ -207,12 +207,12 @@ impl NavigationTarget {\n                 )\n             }\n             hir::AdtDef::Enum(s) => {\n-                let (file_id, node) = s.source(db);\n+                let src = s.source(db);\n                 NavigationTarget::from_named(\n-                    file_id.original_file(db),\n-                    &*node,\n-                    node.doc_comment_text(),\n-                    node.short_label(),\n+                    src.file_id.original_file(db),\n+                    &*src.ast,\n+                    src.ast.doc_comment_text(),\n+                    src.ast.short_label(),\n                 )\n             }\n         }\n@@ -225,24 +225,9 @@ impl NavigationTarget {\n         let nav = match module_def {\n             hir::ModuleDef::Module(module) => NavigationTarget::from_module(db, module),\n             hir::ModuleDef::Function(func) => NavigationTarget::from_function(db, func),\n-            hir::ModuleDef::Struct(s) => {\n-                let src = s.source(db);\n-                NavigationTarget::from_named(\n-                    src.file_id.original_file(db),\n-                    &*src.ast,\n-                    src.ast.doc_comment_text(),\n-                    src.ast.short_label(),\n-                )\n-            }\n-            hir::ModuleDef::Union(s) => {\n-                let (file_id, node) = s.source(db);\n-                NavigationTarget::from_named(\n-                    file_id.original_file(db),\n-                    &*node,\n-                    node.doc_comment_text(),\n-                    node.short_label(),\n-                )\n-            }\n+            hir::ModuleDef::Struct(it) => NavigationTarget::from_adt_def(db, it.into()),\n+            hir::ModuleDef::Enum(it) => NavigationTarget::from_adt_def(db, it.into()),\n+            hir::ModuleDef::Union(it) => NavigationTarget::from_adt_def(db, it.into()),\n             hir::ModuleDef::Const(s) => {\n                 let (file_id, node) = s.source(db);\n                 NavigationTarget::from_named(\n@@ -261,22 +246,13 @@ impl NavigationTarget {\n                     node.short_label(),\n                 )\n             }\n-            hir::ModuleDef::Enum(e) => {\n-                let (file_id, node) = e.source(db);\n-                NavigationTarget::from_named(\n-                    file_id.original_file(db),\n-                    &*node,\n-                    node.doc_comment_text(),\n-                    node.short_label(),\n-                )\n-            }\n             hir::ModuleDef::EnumVariant(var) => {\n-                let (file_id, node) = var.source(db);\n+                let src = var.source(db);\n                 NavigationTarget::from_named(\n-                    file_id.original_file(db),\n-                    &*node,\n-                    node.doc_comment_text(),\n-                    node.short_label(),\n+                    src.file_id.original_file(db),\n+                    &*src.ast,\n+                    src.ast.doc_comment_text(),\n+                    src.ast.short_label(),\n                 )\n             }\n             hir::ModuleDef::Trait(e) => {"}, {"sha": "ee0f2dde88013817948b7002f50f3f7958219a78", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2a1fe26b6d354dbbd1b3843d288d56e74fa00557/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a1fe26b6d354dbbd1b3843d288d56e74fa00557/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=2a1fe26b6d354dbbd1b3843d288d56e74fa00557", "patch": "@@ -144,12 +144,12 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n                         res.extend(hover_text(it.doc_comment_text(), it.short_label()))\n                     }\n                     hir::ModuleDef::Enum(it) => {\n-                        let it = it.source(db).1;\n-                        res.extend(hover_text(it.doc_comment_text(), it.short_label()))\n+                        let src = it.source(db);\n+                        res.extend(hover_text(src.ast.doc_comment_text(), src.ast.short_label()))\n                     }\n                     hir::ModuleDef::EnumVariant(it) => {\n-                        let it = it.source(db).1;\n-                        res.extend(hover_text(it.doc_comment_text(), it.short_label()))\n+                        let src = it.source(db);\n+                        res.extend(hover_text(src.ast.doc_comment_text(), src.ast.short_label()))\n                     }\n                     hir::ModuleDef::Const(it) => {\n                         let it = it.source(db).1;\n@@ -187,8 +187,11 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n                             res.extend(hover_text(it.doc_comment_text(), it.short_label()))\n                         }\n                         hir::AdtDef::Enum(it) => {\n-                            let it = it.source(db).1;\n-                            res.extend(hover_text(it.doc_comment_text(), it.short_label()))\n+                            let src = it.source(db);\n+                            res.extend(hover_text(\n+                                src.ast.doc_comment_text(),\n+                                src.ast.short_label(),\n+                            ))\n                         }\n                     }\n                 }"}]}