{"sha": "163b01aa140299ca5934031e5edf17cb23184941", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2M2IwMWFhMTQwMjk5Y2E1OTM0MDMxZTVlZGYxN2NiMjMxODQ5NDE=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-02-12T05:03:24Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-03-01T05:30:40Z"}, "message": "Remove unused `RenderInfo` struct", "tree": {"sha": "84d40276c1fa84dc41f2658a768a950c60b58170", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84d40276c1fa84dc41f2658a768a950c60b58170"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/163b01aa140299ca5934031e5edf17cb23184941", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/163b01aa140299ca5934031e5edf17cb23184941", "html_url": "https://github.com/rust-lang/rust/commit/163b01aa140299ca5934031e5edf17cb23184941", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/163b01aa140299ca5934031e5edf17cb23184941/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d7a6484852603749f765479ee7288e6ae7186f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d7a6484852603749f765479ee7288e6ae7186f4", "html_url": "https://github.com/rust-lang/rust/commit/4d7a6484852603749f765479ee7288e6ae7186f4"}], "stats": {"total": 59, "additions": 6, "deletions": 53}, "files": [{"sha": "d9f5b5bfa3ae2c20c480c94797f662cdab58605f", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/163b01aa140299ca5934031e5edf17cb23184941/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/163b01aa140299ca5934031e5edf17cb23184941/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=163b01aa140299ca5934031e5edf17cb23184941", "patch": "@@ -4,9 +4,7 @@ use std::ffi::OsStr;\n use std::fmt;\n use std::path::PathBuf;\n \n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_hir::def_id::DefId;\n-use rustc_middle::middle::privacy::AccessLevels;\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_session::config::{self, parse_crate_types_from_list, parse_externs, CrateType};\n use rustc_session::config::{\n     build_codegen_options, build_debugging_options, get_cmd_lint_options, host_triple,\n@@ -268,20 +266,6 @@ crate struct RenderOptions {\n     crate unstable_features: rustc_feature::UnstableFeatures,\n }\n \n-/// Temporary storage for data obtained during `RustdocVisitor::clean()`.\n-/// Later on moved into `cache`.\n-#[derive(Default, Clone)]\n-crate struct RenderInfo {\n-    crate inlined: FxHashSet<DefId>,\n-    crate external_paths: crate::core::ExternalPaths,\n-    crate exact_paths: FxHashMap<DefId, Vec<String>>,\n-    crate access_levels: AccessLevels<DefId>,\n-    crate deref_trait_did: Option<DefId>,\n-    crate deref_mut_trait_did: Option<DefId>,\n-    crate owned_box_did: Option<DefId>,\n-    crate output_format: OutputFormat,\n-}\n-\n impl Options {\n     /// Parses the given command-line for options. If an error message or other early-return has\n     /// been printed, returns `Err` with the exit code."}, {"sha": "1d55fa42a3a9bc0b3cb764ca65f9edf7e85a7c3f", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/163b01aa140299ca5934031e5edf17cb23184941/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/163b01aa140299ca5934031e5edf17cb23184941/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=163b01aa140299ca5934031e5edf17cb23184941", "patch": "@@ -31,15 +31,12 @@ use std::{cell::RefCell, collections::hash_map::Entry};\n use crate::clean;\n use crate::clean::inline::build_external_trait;\n use crate::clean::{AttributesExt, TraitWithExtraInfo, MAX_DEF_IDX};\n-use crate::config::{Options as RustdocOptions, RenderOptions};\n-use crate::config::{OutputFormat, RenderInfo};\n+use crate::config::{Options as RustdocOptions, OutputFormat, RenderOptions};\n use crate::formats::cache::Cache;\n use crate::passes::{self, Condition::*, ConditionalPass};\n \n crate use rustc_session::config::{DebuggingOptions, Input, Options};\n \n-crate type ExternalPaths = FxHashMap<DefId, (Vec<String>, clean::TypeKind)>;\n-\n crate struct DocContext<'tcx> {\n     crate tcx: TyCtxt<'tcx>,\n     /// Name resolver. Used for intra-doc links.\n@@ -506,10 +503,6 @@ crate fn run_global_ctxt(\n             .collect(),\n     };\n \n-    let mut renderinfo = RenderInfo::default();\n-    renderinfo.access_levels = access_levels;\n-    renderinfo.output_format = output_format;\n-\n     let mut ctxt = DocContext {\n         tcx,\n         resolver,\n@@ -529,7 +522,7 @@ crate fn run_global_ctxt(\n             .filter(|trait_def_id| tcx.trait_is_auto(*trait_def_id))\n             .collect(),\n         module_trait_cache: RefCell::new(FxHashMap::default()),\n-        cache: Cache::new(renderinfo, render_options.document_private),\n+        cache: Cache::new(access_levels, render_options.document_private),\n         inlined: FxHashSet::default(),\n         output_format,\n         render_options,"}, {"sha": "1636af70a9ae5b136857c864cbbb111afa3bf77f", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 3, "deletions": 27, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/163b01aa140299ca5934031e5edf17cb23184941/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/163b01aa140299ca5934031e5edf17cb23184941/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=163b01aa140299ca5934031e5edf17cb23184941", "patch": "@@ -11,7 +11,6 @@ use rustc_span::symbol::sym;\n use rustc_span::Symbol;\n \n use crate::clean::{self, GetDefId};\n-use crate::config::RenderInfo;\n use crate::fold::DocFolder;\n use crate::formats::item_type::ItemType;\n use crate::formats::Impl;\n@@ -131,32 +130,8 @@ struct CacheBuilder<'a, 'tcx> {\n }\n \n impl Cache {\n-    crate fn new(render_info: RenderInfo, document_private: bool) -> Self {\n-        // Crawl the crate to build various caches used for the output\n-        let RenderInfo {\n-            inlined: _,\n-            external_paths,\n-            exact_paths,\n-            access_levels,\n-            deref_trait_did,\n-            deref_mut_trait_did,\n-            owned_box_did,\n-            ..\n-        } = render_info;\n-\n-        let external_paths =\n-            external_paths.into_iter().map(|(k, (v, t))| (k, (v, ItemType::from(t)))).collect();\n-\n-        Cache {\n-            external_paths,\n-            exact_paths,\n-            access_levels,\n-            document_private,\n-            deref_trait_did,\n-            deref_mut_trait_did,\n-            owned_box_did,\n-            ..Cache::default()\n-        }\n+    crate fn new(access_levels: AccessLevels<DefId>, document_private: bool) -> Self {\n+        Cache { access_levels, document_private, ..Cache::default() }\n     }\n \n     /// Populates the `Cache` with more data. The returned `Crate` will be missing some data that was\n@@ -168,6 +143,7 @@ impl Cache {\n         extern_html_root_urls: &BTreeMap<String, String>,\n         dst: &Path,\n     ) -> clean::Crate {\n+        // Crawl the crate to build various caches used for the output\n         self.crate_version = krate.version.take();\n         debug!(?self.crate_version);\n         self.traits = krate.external_traits.take();"}]}