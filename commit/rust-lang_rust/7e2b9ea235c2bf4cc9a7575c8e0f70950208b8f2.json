{"sha": "7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlMmI5ZWEyMzVjMmJmNGNjOWE3NTc1YzhlMGY3MDk1MDIwOGI4ZjI=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-12-30T08:19:41Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-01-01T21:28:19Z"}, "message": "Fallout - change array syntax to use `;`", "tree": {"sha": "6a5a44169970430b93c4d57e782b4f8bde45a5cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a5a44169970430b93c4d57e782b4f8bde45a5cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "html_url": "https://github.com/rust-lang/rust/commit/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57a74eda8811bb04da2e081e3029aeec2f0bdcf4", "url": "https://api.github.com/repos/rust-lang/rust/commits/57a74eda8811bb04da2e081e3029aeec2f0bdcf4", "html_url": "https://github.com/rust-lang/rust/commit/57a74eda8811bb04da2e081e3029aeec2f0bdcf4"}], "stats": {"total": 445, "additions": 223, "deletions": 222}, "files": [{"sha": "289587b9ded1ed9eac55f8ce60097be427cf1b32", "filename": "src/doc/guide.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Fdoc%2Fguide.md", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Fdoc%2Fguide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide.md?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -1606,15 +1606,15 @@ things. The most basic is the **array**, a fixed-size list of elements of the\n same type. By default, arrays are immutable.\n \n ```{rust}\n-let a = [1i, 2i, 3i];     // a: [int, ..3]\n-let mut m = [1i, 2i, 3i]; // mut m: [int, ..3]\n+let a = [1i, 2i, 3i];     // a: [int; 3]\n+let mut m = [1i, 2i, 3i]; // mut m: [int; 3]\n ```\n \n There's a shorthand for initializing each element of an array to the same\n value. In this example, each element of `a` will be initialized to `0i`:\n \n ```{rust}\n-let a = [0i, ..20]; // a: [int, ..20]\n+let a = [0i; 20]; // a: [int; 20]\n ```\n \n Arrays have type `[T,..N]`. We'll talk about this `T` notation later, when we"}, {"sha": "f3ad19bbd2a6c038cdb2b2ea3ff730a054035cb4", "filename": "src/doc/reference.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -1438,11 +1438,11 @@ the `static` lifetime, fixed-size arrays, tuples, enum variants, and structs.\n const BIT1: uint = 1 << 0;\n const BIT2: uint = 1 << 1;\n \n-const BITS: [uint, ..2] = [BIT1, BIT2];\n+const BITS: [uint; 2] = [BIT1, BIT2];\n const STRING: &'static str = \"bitstring\";\n \n struct BitsNStrings<'a> {\n-    mybits: [uint, ..2],\n+    mybits: [uint; 2],\n     mystring: &'a str\n }\n \n@@ -2923,7 +2923,7 @@ constant expression that can be evaluated at compile time, such as a\n ```\n [1i, 2, 3, 4];\n [\"a\", \"b\", \"c\", \"d\"];\n-[0i, ..128];             // array with 128 zeros\n+[0i; 128];             // array with 128 zeros\n [0u8, 0u8, 0u8, 0u8];\n ```\n \n@@ -3691,7 +3691,7 @@ An example of each kind:\n \n ```{rust}\n let vec: Vec<int>  = vec![1, 2, 3];\n-let arr: [int, ..3] = [1, 2, 3];\n+let arr: [int; 3] = [1, 2, 3];\n let s: &[int]      = vec.as_slice();\n ```\n "}, {"sha": "c4ebf436c972903c328aafdc841d78a88289481b", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -1322,7 +1322,7 @@ mod tests {\n \n     #[bench]\n     fn bench_collect_into(b: &mut test::Bencher) {\n-        let v = &[0i, ..64];\n+        let v = &[0i; 64];\n         b.iter(|| {\n             let _: DList<int> = v.iter().map(|x| *x).collect();\n         })\n@@ -1384,31 +1384,31 @@ mod tests {\n \n     #[bench]\n     fn bench_iter(b: &mut test::Bencher) {\n-        let v = &[0i, ..128];\n+        let v = &[0i; 128];\n         let m: DList<int> = v.iter().map(|&x|x).collect();\n         b.iter(|| {\n             assert!(m.iter().count() == 128);\n         })\n     }\n     #[bench]\n     fn bench_iter_mut(b: &mut test::Bencher) {\n-        let v = &[0i, ..128];\n+        let v = &[0i; 128];\n         let mut m: DList<int> = v.iter().map(|&x|x).collect();\n         b.iter(|| {\n             assert!(m.iter_mut().count() == 128);\n         })\n     }\n     #[bench]\n     fn bench_iter_rev(b: &mut test::Bencher) {\n-        let v = &[0i, ..128];\n+        let v = &[0i; 128];\n         let m: DList<int> = v.iter().map(|&x|x).collect();\n         b.iter(|| {\n             assert!(m.iter().rev().count() == 128);\n         })\n     }\n     #[bench]\n     fn bench_iter_mut_rev(b: &mut test::Bencher) {\n-        let v = &[0i, ..128];\n+        let v = &[0i; 128];\n         let mut m: DList<int> = v.iter().map(|&x|x).collect();\n         b.iter(|| {\n             assert!(m.iter_mut().rev().count() == 128);"}, {"sha": "5f72fc696394ca7fe1c1aba977e29a2da9e358a4", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -861,6 +861,7 @@ pub trait CloneSliceExt<T> for Sized? {\n     fn clone_from_slice(&mut self, &[T]) -> uint;\n }\n \n+\n #[unstable = \"trait is unstable\"]\n impl<T: Clone> CloneSliceExt<T> for [T] {\n     /// Returns a copy of `v`.\n@@ -1482,14 +1483,14 @@ mod tests {\n \n     #[test]\n     fn test_is_empty() {\n-        let xs: [int, ..0] = [];\n+        let xs: [int; 0] = [];\n         assert!(xs.is_empty());\n         assert!(![0i].is_empty());\n     }\n \n     #[test]\n     fn test_len_divzero() {\n-        type Z = [i8, ..0];\n+        type Z = [i8; 0];\n         let v0 : &[Z] = &[];\n         let v1 : &[Z] = &[[]];\n         let v2 : &[Z] = &[[], []];\n@@ -1856,7 +1857,7 @@ mod tests {\n     #[test]\n     fn test_permutations() {\n         {\n-            let v: [int, ..0] = [];\n+            let v: [int; 0] = [];\n             let mut it = v.permutations();\n             let (min_size, max_opt) = it.size_hint();\n             assert_eq!(min_size, 1);\n@@ -2116,28 +2117,28 @@ mod tests {\n \n     #[test]\n     fn test_concat() {\n-        let v: [Vec<int>, ..0] = [];\n+        let v: [Vec<int>; 0] = [];\n         let c: Vec<int> = v.concat();\n         assert_eq!(c, []);\n         let d: Vec<int> = [vec![1i], vec![2i,3i]].concat();\n         assert_eq!(d, vec![1i, 2, 3]);\n \n-        let v: [&[int], ..2] = [&[1], &[2, 3]];\n+        let v: [&[int]; 2] = [&[1], &[2, 3]];\n         assert_eq!(v.connect(&0), vec![1i, 0, 2, 3]);\n-        let v: [&[int], ..3] = [&[1i], &[2], &[3]];\n+        let v: [&[int]; 3] = [&[1i], &[2], &[3]];\n         assert_eq!(v.connect(&0), vec![1i, 0, 2, 0, 3]);\n     }\n \n     #[test]\n     fn test_connect() {\n-        let v: [Vec<int>, ..0] = [];\n+        let v: [Vec<int>; 0] = [];\n         assert_eq!(v.connect_vec(&0), vec![]);\n         assert_eq!([vec![1i], vec![2i, 3]].connect_vec(&0), vec![1, 0, 2, 3]);\n         assert_eq!([vec![1i], vec![2i], vec![3i]].connect_vec(&0), vec![1, 0, 2, 0, 3]);\n \n-        let v: [&[int], ..2] = [&[1], &[2, 3]];\n+        let v: [&[int]; 2] = [&[1], &[2, 3]];\n         assert_eq!(v.connect_vec(&0), vec![1, 0, 2, 3]);\n-        let v: [&[int], ..3] = [&[1], &[2], &[3]];\n+        let v: [&[int]; 3] = [&[1], &[2], &[3]];\n         assert_eq!(v.connect_vec(&0), vec![1, 0, 2, 0, 3]);\n     }\n \n@@ -2710,7 +2711,7 @@ mod tests {\n         }\n         assert_eq!(cnt, 11);\n \n-        let xs: [Foo, ..3] = [Foo, Foo, Foo];\n+        let xs: [Foo; 3] = [Foo, Foo, Foo];\n         cnt = 0;\n         for f in xs.iter() {\n             assert!(*f == Foo);"}, {"sha": "7caeb563db724bb4763031a9fbee36a03873d7ec", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -2517,7 +2517,7 @@ mod tests {\n \n     #[test]\n     fn test_chars_decoding() {\n-        let mut bytes = [0u8, ..4];\n+        let mut bytes = [0u8; 4];\n         for c in range(0u32, 0x110000).filter_map(|c| ::core::char::from_u32(c)) {\n             let len = c.encode_utf8(&mut bytes).unwrap_or(0);\n             let s = ::core::str::from_utf8(bytes[..len]).unwrap();\n@@ -2529,7 +2529,7 @@ mod tests {\n \n     #[test]\n     fn test_chars_rev_decoding() {\n-        let mut bytes = [0u8, ..4];\n+        let mut bytes = [0u8; 4];\n         for c in range(0u32, 0x110000).filter_map(|c| ::core::char::from_u32(c)) {\n             let len = c.encode_utf8(&mut bytes).unwrap_or(0);\n             let s = ::core::str::from_utf8(bytes[..len]).unwrap();"}, {"sha": "37a6e690f5d30ee5688931da70761286a34b67a7", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -675,7 +675,7 @@ impl String {\n         assert!(idx <= len);\n         assert!(self.is_char_boundary(idx));\n         self.vec.reserve(4);\n-        let mut bits = [0, ..4];\n+        let mut bits = [0; 4];\n         let amt = ch.encode_utf8(&mut bits).unwrap();\n \n         unsafe {"}, {"sha": "e1728d762ed10ac97344ea723522f81ac9fcf9f7", "filename": "src/libcore/fmt/float.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibcore%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibcore%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Ffloat.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -123,7 +123,7 @@ pub fn float_to_str_bytes_common<T: Float, U, F>(\n     // For an f64 the exponent is in the range of [-1022, 1023] for base 2, so\n     // we may have up to that many digits. Give ourselves some extra wiggle room\n     // otherwise as well.\n-    let mut buf = [0u8, ..1536];\n+    let mut buf = [0u8; 1536];\n     let mut end = 0;\n     let radix_gen: T = cast(radix as int).unwrap();\n "}, {"sha": "87fcb12e29f9c95ddc442e94899f7f1dd7d47890", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -400,7 +400,7 @@ impl<'a> Formatter<'a> {\n         // Writes the sign if it exists, and then the prefix if it was requested\n         let write_prefix = |&: f: &mut Formatter| {\n             for c in sign.into_iter() {\n-                let mut b = [0, ..4];\n+                let mut b = [0; 4];\n                 let n = c.encode_utf8(&mut b).unwrap_or(0);\n                 try!(f.buf.write(b[..n]));\n             }\n@@ -505,7 +505,7 @@ impl<'a> Formatter<'a> {\n             rt::AlignCenter => (padding / 2, (padding + 1) / 2),\n         };\n \n-        let mut fill = [0u8, ..4];\n+        let mut fill = [0u8; 4];\n         let len = self.fill.encode_utf8(&mut fill).unwrap_or(0);\n \n         for _ in range(0, pre_pad) {\n@@ -606,7 +606,7 @@ impl Show for char {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         use char::Char;\n \n-        let mut utf8 = [0u8, ..4];\n+        let mut utf8 = [0u8; 4];\n         let amt = self.encode_utf8(&mut utf8).unwrap_or(0);\n         let s: &str = unsafe { mem::transmute(utf8[..amt]) };\n         Show::fmt(s, f)"}, {"sha": "7de3e847dc68350986086c7e5c4e2b4814967741", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -37,7 +37,7 @@ trait GenericRadix {\n         // characters for a base 2 number.\n         let zero = Int::zero();\n         let is_positive = x >= zero;\n-        let mut buf = [0u8, ..64];\n+        let mut buf = [0u8; 64];\n         let mut curr = buf.len();\n         let base = cast(self.base()).unwrap();\n         if is_positive {"}, {"sha": "51c0827186d51eed097baf04ac83a2c2002df328", "filename": "src/libcore/hash/sip.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibcore%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibcore%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fsip.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -292,7 +292,7 @@ mod tests {\n     #[test]\n     #[allow(unused_must_use)]\n     fn test_siphash() {\n-        let vecs : [[u8, ..8], ..64] = [\n+        let vecs : [[u8; 8]; 64] = [\n             [ 0x31, 0x0e, 0x0e, 0xdd, 0x47, 0xdb, 0x6f, 0x72, ],\n             [ 0xfd, 0x67, 0xdc, 0x93, 0xc5, 0x39, 0xf8, 0x74, ],\n             [ 0x5a, 0x4f, 0xa9, 0xd9, 0x09, 0x80, 0x6c, 0x0d, ],\n@@ -366,7 +366,7 @@ mod tests {\n         let mut state_inc = SipState::new_with_keys(k0, k1);\n         let mut state_full = SipState::new_with_keys(k0, k1);\n \n-        fn to_hex_str(r: &[u8, ..8]) -> String {\n+        fn to_hex_str(r: &[u8; 8]) -> String {\n             let mut s = String::new();\n             for b in r.iter() {\n                 s.push_str(format!(\"{}\", fmt::radix(*b, 16)).as_slice());"}, {"sha": "7c53503b1ceb7ef4688756c9f74642c8c8914df3", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -1037,7 +1037,7 @@ pub trait IteratorOrdExt<A> {\n     /// ```rust\n     /// use std::iter::{NoElements, OneElement, MinMax};\n     ///\n-    /// let v: [int, ..0] = [];\n+    /// let v: [int; 0] = [];\n     /// assert_eq!(v.iter().min_max(), NoElements);\n     ///\n     /// let v = [1i];"}, {"sha": "f4fe86a0d7ec08c1a7aea723a20e68666ff64370", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -1027,7 +1027,7 @@ pub fn truncate_utf16_at_nul<'a>(v: &'a [u16]) -> &'a [u16] {\n }\n \n // https://tools.ietf.org/html/rfc3629\n-static UTF8_CHAR_WIDTH: [u8, ..256] = [\n+static UTF8_CHAR_WIDTH: [u8; 256] = [\n 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,\n 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, // 0x1F\n 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,"}, {"sha": "e9e2028dc614775acd99f1ffbba443493546da04", "filename": "src/libcoretest/any.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibcoretest%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibcoretest%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fany.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -113,10 +113,10 @@ fn any_downcast_mut() {\n \n #[test]\n fn any_fixed_vec() {\n-    let test = [0u, ..8];\n+    let test = [0u; 8];\n     let test = &test as &Any;\n-    assert!(test.is::<[uint, ..8]>());\n-    assert!(!test.is::<[uint, ..10]>());\n+    assert!(test.is::<[uint; 8]>());\n+    assert!(!test.is::<[uint; 10]>());\n }\n \n "}, {"sha": "b931809e6036ed184f090419fd17f257a89791a9", "filename": "src/libcoretest/char.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibcoretest%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibcoretest%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fchar.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -169,7 +169,7 @@ fn test_escape_unicode() {\n #[test]\n fn test_encode_utf8() {\n     fn check(input: char, expect: &[u8]) {\n-        let mut buf = [0u8, ..4];\n+        let mut buf = [0u8; 4];\n         let n = input.encode_utf8(buf.as_mut_slice()).unwrap_or(0);\n         assert_eq!(buf[..n], expect);\n     }\n@@ -183,7 +183,7 @@ fn test_encode_utf8() {\n #[test]\n fn test_encode_utf16() {\n     fn check(input: char, expect: &[u16]) {\n-        let mut buf = [0u16, ..2];\n+        let mut buf = [0u16; 2];\n         let n = input.encode_utf16(buf.as_mut_slice()).unwrap_or(0);\n         assert_eq!(buf[..n], expect);\n     }"}, {"sha": "431f7e748f6db0e29a6bc4ea3bbc3dc5260cb423", "filename": "src/libcoretest/hash/sip.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibcoretest%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibcoretest%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fhash%2Fsip.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -33,7 +33,7 @@ impl<'a, S: Writer> Hash<S> for Bytes<'a> {\n #[test]\n #[allow(unused_must_use)]\n fn test_siphash() {\n-    let vecs : [[u8, ..8], ..64] = [\n+    let vecs : [[u8; 8]; 64] = [\n         [ 0x31, 0x0e, 0x0e, 0xdd, 0x47, 0xdb, 0x6f, 0x72, ],\n         [ 0xfd, 0x67, 0xdc, 0x93, 0xc5, 0x39, 0xf8, 0x74, ],\n         [ 0x5a, 0x4f, 0xa9, 0xd9, 0x09, 0x80, 0x6c, 0x0d, ],\n@@ -107,7 +107,7 @@ fn test_siphash() {\n     let mut state_inc = SipState::new_with_keys(k0, k1);\n     let mut state_full = SipState::new_with_keys(k0, k1);\n \n-    fn to_hex_str(r: &[u8, ..8]) -> String {\n+    fn to_hex_str(r: &[u8; 8]) -> String {\n         let mut s = String::new();\n         for b in r.iter() {\n             s.push_str(format!(\"{}\", fmt::radix(*b, 16)).as_slice());"}, {"sha": "d450e557383a40fe6df3bd198d7ddc26031764ca", "filename": "src/libcoretest/iter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibcoretest%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibcoretest%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fiter.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -19,7 +19,7 @@ use test::Bencher;\n \n #[test]\n fn test_lt() {\n-    let empty: [int, ..0] = [];\n+    let empty: [int; 0] = [];\n     let xs = [1i,2,3];\n     let ys = [1i,2,0];\n \n@@ -781,7 +781,7 @@ fn test_peekable_is_empty() {\n \n #[test]\n fn test_min_max() {\n-    let v: [int, ..0] = [];\n+    let v: [int; 0] = [];\n     assert_eq!(v.iter().min_max(), NoElements);\n \n     let v = [1i];"}, {"sha": "162f75763de429e8eef4fb5f82fc0c26797815f9", "filename": "src/libcoretest/ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibcoretest%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibcoretest%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fptr.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -165,8 +165,8 @@ fn test_ptr_subtraction() {\n \n #[test]\n fn test_set_memory() {\n-    let mut xs = [0u8, ..20];\n+    let mut xs = [0u8; 20];\n     let ptr = xs.as_mut_ptr();\n     unsafe { set_memory(ptr, 5u8, xs.len()); }\n-    assert!(xs == [5u8, ..20]);\n+    assert!(xs == [5u8; 20]);\n }"}, {"sha": "ad8895924f9596371e3a96d21c06b070444f1617", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 49, "deletions": 49, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -425,20 +425,20 @@ pub mod types {\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct sockaddr {\n                     pub sa_family: sa_family_t,\n-                    pub sa_data: [u8, ..14],\n+                    pub sa_data: [u8; 14],\n                 }\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct sockaddr_storage {\n                     pub ss_family: sa_family_t,\n                     pub __ss_align: i64,\n-                    pub __ss_pad2: [u8, ..112],\n+                    pub __ss_pad2: [u8; 112],\n                 }\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct sockaddr_in {\n                     pub sin_family: sa_family_t,\n                     pub sin_port: in_port_t,\n                     pub sin_addr: in_addr,\n-                    pub sin_zero: [u8, ..8],\n+                    pub sin_zero: [u8; 8],\n                 }\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct in_addr {\n@@ -454,7 +454,7 @@ pub mod types {\n                 }\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct in6_addr {\n-                    pub s6_addr: [u16, ..8]\n+                    pub s6_addr: [u16; 8]\n                 }\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct ip_mreq {\n@@ -491,7 +491,7 @@ pub mod types {\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct sockaddr_un {\n                     pub sun_family: sa_family_t,\n-                    pub sun_path: [c_char, ..108]\n+                    pub sun_path: [c_char; 108]\n                 }\n \n                 #[repr(C)]\n@@ -609,7 +609,7 @@ pub mod types {\n \n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct pthread_attr_t {\n-                    pub __size: [u32, ..9]\n+                    pub __size: [u32; 9]\n                 }\n             }\n             #[cfg(target_arch = \"arm\")]\n@@ -625,14 +625,14 @@ pub mod types {\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct stat {\n                     pub st_dev: c_ulonglong,\n-                    pub __pad0: [c_uchar, ..4],\n+                    pub __pad0: [c_uchar; 4],\n                     pub __st_ino: ino_t,\n                     pub st_mode: c_uint,\n                     pub st_nlink: c_uint,\n                     pub st_uid: uid_t,\n                     pub st_gid: gid_t,\n                     pub st_rdev: c_ulonglong,\n-                    pub __pad3: [c_uchar, ..4],\n+                    pub __pad3: [c_uchar; 4],\n                     pub st_size: c_longlong,\n                     pub st_blksize: blksize_t,\n                     pub st_blocks: c_ulonglong,\n@@ -653,7 +653,7 @@ pub mod types {\n \n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct pthread_attr_t {\n-                    pub __size: [u32, ..9]\n+                    pub __size: [u32; 9]\n                 }\n             }\n             #[cfg(any(target_arch = \"mips\", target_arch = \"mipsel\"))]\n@@ -670,14 +670,14 @@ pub mod types {\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct stat {\n                     pub st_dev: c_ulong,\n-                    pub st_pad1: [c_long, ..3],\n+                    pub st_pad1: [c_long; 3],\n                     pub st_ino: ino_t,\n                     pub st_mode: mode_t,\n                     pub st_nlink: nlink_t,\n                     pub st_uid: uid_t,\n                     pub st_gid: gid_t,\n                     pub st_rdev: c_ulong,\n-                    pub st_pad2: [c_long, ..2],\n+                    pub st_pad2: [c_long; 2],\n                     pub st_size: off_t,\n                     pub st_pad3: c_long,\n                     pub st_atime: time_t,\n@@ -688,7 +688,7 @@ pub mod types {\n                     pub st_ctime_nsec: c_long,\n                     pub st_blksize: blksize_t,\n                     pub st_blocks: blkcnt_t,\n-                    pub st_pad5: [c_long, ..14],\n+                    pub st_pad5: [c_long; 14],\n                 }\n \n                 #[repr(C)]\n@@ -699,7 +699,7 @@ pub mod types {\n \n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct pthread_attr_t {\n-                    pub __size: [u32, ..9]\n+                    pub __size: [u32; 9]\n                 }\n             }\n             pub mod posix08 {}\n@@ -714,7 +714,7 @@ pub mod types {\n                     pub sll_hatype: c_ushort,\n                     pub sll_pkttype: c_uchar,\n                     pub sll_halen: c_uchar,\n-                    pub sll_addr: [c_uchar, ..8]\n+                    pub sll_addr: [c_uchar; 8]\n                 }\n             }\n \n@@ -788,7 +788,7 @@ pub mod types {\n                     pub st_mtime_nsec: c_long,\n                     pub st_ctime: time_t,\n                     pub st_ctime_nsec: c_long,\n-                    pub __unused: [c_long, ..3],\n+                    pub __unused: [c_long; 3],\n                 }\n \n                 #[repr(C)]\n@@ -799,7 +799,7 @@ pub mod types {\n \n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct pthread_attr_t {\n-                    pub __size: [u64, ..7]\n+                    pub __size: [u64; 7]\n                 }\n             }\n             pub mod posix08 {\n@@ -815,7 +815,7 @@ pub mod types {\n                     pub sll_hatype: c_ushort,\n                     pub sll_pkttype: c_uchar,\n                     pub sll_halen: c_uchar,\n-                    pub sll_addr: [c_uchar, ..8]\n+                    pub sll_addr: [c_uchar; 8]\n                 }\n \n             }\n@@ -878,23 +878,23 @@ pub mod types {\n                 #[deriving(Copy)] pub struct sockaddr {\n                     pub sa_len: u8,\n                     pub sa_family: sa_family_t,\n-                    pub sa_data: [u8, ..14],\n+                    pub sa_data: [u8; 14],\n                 }\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct sockaddr_storage {\n                     pub ss_len: u8,\n                     pub ss_family: sa_family_t,\n-                    pub __ss_pad1: [u8, ..6],\n+                    pub __ss_pad1: [u8; 6],\n                     pub __ss_align: i64,\n-                    pub __ss_pad2: [u8, ..112],\n+                    pub __ss_pad2: [u8; 112],\n                 }\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct sockaddr_in {\n                     pub sin_len: u8,\n                     pub sin_family: sa_family_t,\n                     pub sin_port: in_port_t,\n                     pub sin_addr: in_addr,\n-                    pub sin_zero: [u8, ..8],\n+                    pub sin_zero: [u8; 8],\n                 }\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct in_addr {\n@@ -911,7 +911,7 @@ pub mod types {\n                 }\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct in6_addr {\n-                    pub s6_addr: [u16, ..8]\n+                    pub s6_addr: [u16; 8]\n                 }\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct ip_mreq {\n@@ -938,7 +938,7 @@ pub mod types {\n                 #[deriving(Copy)] pub struct sockaddr_un {\n                     pub sun_len: u8,\n                     pub sun_family: sa_family_t,\n-                    pub sun_path: [c_char, ..104]\n+                    pub sun_path: [c_char; 104]\n                 }\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct ifaddrs {\n@@ -1030,7 +1030,7 @@ pub mod types {\n                     pub st_lspare: int32_t,\n                     pub st_birthtime: time_t,\n                     pub st_birthtime_nsec: c_long,\n-                    pub __unused: [uint8_t, ..2],\n+                    pub __unused: [uint8_t; 2],\n                 }\n \n                 #[repr(C)]\n@@ -1106,23 +1106,23 @@ pub mod types {\n                 #[deriving(Copy)] pub struct sockaddr {\n                     pub sa_len: u8,\n                     pub sa_family: sa_family_t,\n-                    pub sa_data: [u8, ..14],\n+                    pub sa_data: [u8; 14],\n                 }\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct sockaddr_storage {\n                     pub ss_len: u8,\n                     pub ss_family: sa_family_t,\n-                    pub __ss_pad1: [u8, ..6],\n+                    pub __ss_pad1: [u8; 6],\n                     pub __ss_align: i64,\n-                    pub __ss_pad2: [u8, ..112],\n+                    pub __ss_pad2: [u8; 112],\n                 }\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct sockaddr_in {\n                     pub sin_len: u8,\n                     pub sin_family: sa_family_t,\n                     pub sin_port: in_port_t,\n                     pub sin_addr: in_addr,\n-                    pub sin_zero: [u8, ..8],\n+                    pub sin_zero: [u8; 8],\n                 }\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct in_addr {\n@@ -1139,7 +1139,7 @@ pub mod types {\n                 }\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct in6_addr {\n-                    pub s6_addr: [u16, ..8]\n+                    pub s6_addr: [u16; 8]\n                 }\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct ip_mreq {\n@@ -1166,7 +1166,7 @@ pub mod types {\n                 #[deriving(Copy)] pub struct sockaddr_un {\n                     pub sun_len: u8,\n                     pub sun_family: sa_family_t,\n-                    pub sun_path: [c_char, ..104]\n+                    pub sun_path: [c_char; 104]\n                 }\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct ifaddrs {\n@@ -1337,21 +1337,21 @@ pub mod types {\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct sockaddr {\n                     pub sa_family: sa_family_t,\n-                    pub sa_data: [u8, ..14],\n+                    pub sa_data: [u8; 14],\n                 }\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct sockaddr_storage {\n                     pub ss_family: sa_family_t,\n-                    pub __ss_pad1: [u8, ..6],\n+                    pub __ss_pad1: [u8; 6],\n                     pub __ss_align: i64,\n-                    pub __ss_pad2: [u8, ..112],\n+                    pub __ss_pad2: [u8; 112],\n                 }\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct sockaddr_in {\n                     pub sin_family: sa_family_t,\n                     pub sin_port: in_port_t,\n                     pub sin_addr: in_addr,\n-                    pub sin_zero: [u8, ..8],\n+                    pub sin_zero: [u8; 8],\n                 }\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct in_addr {\n@@ -1367,7 +1367,7 @@ pub mod types {\n                 }\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct in6_addr {\n-                    pub s6_addr: [u16, ..8]\n+                    pub s6_addr: [u16; 8]\n                 }\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct ip_mreq {\n@@ -1393,7 +1393,7 @@ pub mod types {\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct sockaddr_un {\n                     pub sun_family: sa_family_t,\n-                    pub sun_path: [c_char, ..108]\n+                    pub sun_path: [c_char; 108]\n                 }\n             }\n         }\n@@ -1626,7 +1626,7 @@ pub mod types {\n                     pub Data1: DWORD,\n                     pub Data2: WORD,\n                     pub Data3: WORD,\n-                    pub Data4: [BYTE, ..8],\n+                    pub Data4: [BYTE; 8],\n                 }\n \n                 #[repr(C)]\n@@ -1675,8 +1675,8 @@ pub mod types {\n                     pub nFileSizeLow: DWORD,\n                     pub dwReserved0: DWORD,\n                     pub dwReserved1: DWORD,\n-                    pub cFileName: [wchar_t, ..260], // #define MAX_PATH 260\n-                    pub cAlternateFileName: [wchar_t, ..14],\n+                    pub cFileName: [wchar_t; 260], // #define MAX_PATH 260\n+                    pub cAlternateFileName: [wchar_t; 14],\n                 }\n \n                 pub type LPWIN32_FIND_DATAW = *mut WIN32_FIND_DATAW;\n@@ -1741,16 +1741,16 @@ pub mod types {\n                 #[deriving(Copy)] pub struct sockaddr {\n                     pub sa_len: u8,\n                     pub sa_family: sa_family_t,\n-                    pub sa_data: [u8, ..14],\n+                    pub sa_data: [u8; 14],\n                 }\n \n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct sockaddr_storage {\n                     pub ss_len: u8,\n                     pub ss_family: sa_family_t,\n-                    pub __ss_pad1: [u8, ..6],\n+                    pub __ss_pad1: [u8; 6],\n                     pub __ss_align: i64,\n-                    pub __ss_pad2: [u8, ..112],\n+                    pub __ss_pad2: [u8; 112],\n                 }\n \n                 #[repr(C)]\n@@ -1759,7 +1759,7 @@ pub mod types {\n                     pub sin_family: sa_family_t,\n                     pub sin_port: in_port_t,\n                     pub sin_addr: in_addr,\n-                    pub sin_zero: [u8, ..8],\n+                    pub sin_zero: [u8; 8],\n                 }\n \n                 #[repr(C)]\n@@ -1779,7 +1779,7 @@ pub mod types {\n \n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct in6_addr {\n-                    pub s6_addr: [u16, ..8]\n+                    pub s6_addr: [u16; 8]\n                 }\n \n                 #[repr(C)]\n@@ -1810,7 +1810,7 @@ pub mod types {\n                 #[deriving(Copy)] pub struct sockaddr_un {\n                     pub sun_len: u8,\n                     pub sun_family: sa_family_t,\n-                    pub sun_path: [c_char, ..104]\n+                    pub sun_path: [c_char; 104]\n                 }\n \n                 #[repr(C)]\n@@ -1899,7 +1899,7 @@ pub mod types {\n                     pub st_flags: uint32_t,\n                     pub st_gen: uint32_t,\n                     pub st_lspare: int32_t,\n-                    pub st_qspare: [int64_t, ..2],\n+                    pub st_qspare: [int64_t; 2],\n                 }\n \n                 #[repr(C)]\n@@ -1911,7 +1911,7 @@ pub mod types {\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct pthread_attr_t {\n                     pub __sig: c_long,\n-                    pub __opaque: [c_char, ..36]\n+                    pub __opaque: [c_char; 36]\n                 }\n             }\n             pub mod posix08 {\n@@ -2003,7 +2003,7 @@ pub mod types {\n                     pub st_flags: uint32_t,\n                     pub st_gen: uint32_t,\n                     pub st_lspare: int32_t,\n-                    pub st_qspare: [int64_t, ..2],\n+                    pub st_qspare: [int64_t; 2],\n                 }\n \n                 #[repr(C)]\n@@ -2015,7 +2015,7 @@ pub mod types {\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct pthread_attr_t {\n                     pub __sig: c_long,\n-                    pub __opaque: [c_char, ..56]\n+                    pub __opaque: [c_char; 56]\n                 }\n             }\n             pub mod posix08 {"}, {"sha": "7e21f5f48f16389b9b8d8d45f919d44c933d393f", "filename": "src/liblog/directive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Fliblog%2Fdirective.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Fliblog%2Fdirective.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Fdirective.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -18,7 +18,7 @@ pub struct LogDirective {\n     pub level: u32,\n }\n \n-pub static LOG_LEVEL_NAMES: [&'static str, ..4] = [\"ERROR\", \"WARN\", \"INFO\",\n+pub static LOG_LEVEL_NAMES: [&'static str; 4] = [\"ERROR\", \"WARN\", \"INFO\",\n                                                \"DEBUG\"];\n \n /// Parse an individual log level that is either a number or a symbolic log level"}, {"sha": "0cf9ce851085ff8c381c458c641889d09ab03ae2", "filename": "src/librand/chacha.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibrand%2Fchacha.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibrand%2Fchacha.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fchacha.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -246,7 +246,7 @@ mod test {\n     fn test_rng_true_values() {\n         // Test vectors 1 and 2 from\n         // http://tools.ietf.org/html/draft-nir-cfrg-chacha20-poly1305-04\n-        let seed : &[_] = &[0u32, ..8];\n+        let seed : &[_] = &[0u32; 8];\n         let mut ra: ChaChaRng = SeedableRng::from_seed(seed);\n \n         let v = Vec::from_fn(16, |_| ra.next_u32());"}, {"sha": "5bfe7e15a930764c25dfbb9a52cbff1ff0fea56a", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -200,7 +200,7 @@ pub mod reader {\n         // the most significant bit is set, the second most significant bit is set etc. we can\n         // replace up to three \"and+branch\" with a single table lookup which gives us a measured\n         // speedup of around 2x on x86_64.\n-        static SHIFT_MASK_TABLE: [(uint, u32), ..16] = [\n+        static SHIFT_MASK_TABLE: [(uint, u32); 16] = [\n             (0, 0x0), (0, 0x0fffffff),\n             (8, 0x1fffff), (8, 0x1fffff),\n             (16, 0x3fff), (16, 0x3fff), (16, 0x3fff), (16, 0x3fff),"}, {"sha": "1ebb18f976e4c247962397732ca2b84c9450fa0e", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -1085,7 +1085,7 @@ impl<'d,'t,'tcx,TYPER:mc::Typer<'tcx>> ExprUseVisitor<'d,'t,'tcx,TYPER> {\n                         // Note: We declare here that the borrow\n                         // occurs upon entering the `[...]`\n                         // pattern. This implies that something like\n-                        // `[a, ..b]` where `a` is a move is illegal,\n+                        // `[a; b]` where `a` is a move is illegal,\n                         // because the borrow is already in effect.\n                         // In fact such a move would be safe-ish, but\n                         // it effectively *requires* that we use the"}, {"sha": "da00d737b473e785aa807d5ecf6fe8155441b522", "filename": "src/librustc/middle/graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibrustc%2Fmiddle%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibrustc%2Fmiddle%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fgraph.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -42,12 +42,12 @@ pub struct Graph<N,E> {\n }\n \n pub struct Node<N> {\n-    first_edge: [EdgeIndex, ..2], // see module comment\n+    first_edge: [EdgeIndex; 2], // see module comment\n     pub data: N,\n }\n \n pub struct Edge<E> {\n-    next_edge: [EdgeIndex, ..2], // see module comment\n+    next_edge: [EdgeIndex; 2], // see module comment\n     source: NodeIndex,\n     target: NodeIndex,\n     pub data: E,"}, {"sha": "3c5459ff3bc754cf19a7032e540359978c418d82", "filename": "src/librustc/middle/subst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsubst.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -188,7 +188,7 @@ pub enum ParamSpace {\n }\n \n impl ParamSpace {\n-    pub fn all() -> [ParamSpace, ..3] {\n+    pub fn all() -> [ParamSpace; 3] {\n         [TypeSpace, SelfSpace, FnSpace]\n     }\n "}, {"sha": "1e55f442fb9ac97df9d16266671836d80a75c15e", "filename": "src/librustc_back/sha2.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibrustc_back%2Fsha2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibrustc_back%2Fsha2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fsha2.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -111,15 +111,15 @@ trait FixedBuffer {\n \n /// A FixedBuffer of 64 bytes useful for implementing Sha256 which has a 64 byte blocksize.\n struct FixedBuffer64 {\n-    buffer: [u8, ..64],\n+    buffer: [u8; 64],\n     buffer_idx: uint,\n }\n \n impl FixedBuffer64 {\n     /// Create a new FixedBuffer64\n     fn new() -> FixedBuffer64 {\n         return FixedBuffer64 {\n-            buffer: [0u8, ..64],\n+            buffer: [0u8; 64],\n             buffer_idx: 0\n         };\n     }\n@@ -284,7 +284,7 @@ struct Engine256State {\n }\n \n impl Engine256State {\n-    fn new(h: &[u32, ..8]) -> Engine256State {\n+    fn new(h: &[u32; 8]) -> Engine256State {\n         return Engine256State {\n             h0: h[0],\n             h1: h[1],\n@@ -297,7 +297,7 @@ impl Engine256State {\n         };\n     }\n \n-    fn reset(&mut self, h: &[u32, ..8]) {\n+    fn reset(&mut self, h: &[u32; 8]) {\n         self.h0 = h[0];\n         self.h1 = h[1];\n         self.h2 = h[2];\n@@ -342,7 +342,7 @@ impl Engine256State {\n         let mut g = self.h6;\n         let mut h = self.h7;\n \n-        let mut w = [0u32, ..64];\n+        let mut w = [0u32; 64];\n \n         // Sha-512 and Sha-256 use basically the same calculations which are implemented\n         // by these macros. Inlining the calculations seems to result in better generated code.\n@@ -408,7 +408,7 @@ impl Engine256State {\n     }\n }\n \n-static K32: [u32, ..64] = [\n+static K32: [u32; 64] = [\n     0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\n     0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n     0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n@@ -437,7 +437,7 @@ struct Engine256 {\n }\n \n impl Engine256 {\n-    fn new(h: &[u32, ..8]) -> Engine256 {\n+    fn new(h: &[u32; 8]) -> Engine256 {\n         return Engine256 {\n             length_bits: 0,\n             buffer: FixedBuffer64::new(),\n@@ -446,7 +446,7 @@ impl Engine256 {\n         }\n     }\n \n-    fn reset(&mut self, h: &[u32, ..8]) {\n+    fn reset(&mut self, h: &[u32; 8]) {\n         self.length_bits = 0;\n         self.buffer.reset();\n         self.state.reset(h);\n@@ -515,7 +515,7 @@ impl Digest for Sha256 {\n     fn output_bits(&self) -> uint { 256 }\n }\n \n-static H256: [u32, ..8] = [\n+static H256: [u32; 8] = [\n     0x6a09e667,\n     0xbb67ae85,\n     0x3c6ef372,\n@@ -658,7 +658,7 @@ mod bench {\n     #[bench]\n     pub fn sha256_10(b: &mut Bencher) {\n         let mut sh = Sha256::new();\n-        let bytes = [1u8, ..10];\n+        let bytes = [1u8; 10];\n         b.iter(|| {\n             sh.input(&bytes);\n         });\n@@ -668,7 +668,7 @@ mod bench {\n     #[bench]\n     pub fn sha256_1k(b: &mut Bencher) {\n         let mut sh = Sha256::new();\n-        let bytes = [1u8, ..1024];\n+        let bytes = [1u8; 1024];\n         b.iter(|| {\n             sh.input(&bytes);\n         });\n@@ -678,7 +678,7 @@ mod bench {\n     #[bench]\n     pub fn sha256_64k(b: &mut Bencher) {\n         let mut sh = Sha256::new();\n-        let bytes = [1u8, ..65536];\n+        let bytes = [1u8; 65536];\n         b.iter(|| {\n             sh.input(&bytes);\n         });"}, {"sha": "ac2ab56b2c5f8edbb492b5d27787b8eb821bd84a", "filename": "src/librustc_borrowck/borrowck/doc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibrustc_borrowck%2Fborrowck%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibrustc_borrowck%2Fborrowck%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fdoc.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -1152,7 +1152,7 @@\n //! the following:\n //!\n //! ```rust\n-//! fn foo(a: [D, ..10], i: uint) -> D {\n+//! fn foo(a: [D; 10], i: uint) -> D {\n //!     a[i]\n //! }\n //! ```\n@@ -1168,7 +1168,7 @@\n //! would arise is the following:\n //!\n //! ```rust\n-//! fn foo(a: [D, ..10], b: [D, ..10], i: uint, t: bool) -> D {\n+//! fn foo(a: [D; 10], b: [D; 10], i: uint, t: bool) -> D {\n //!     if t {\n //!         a[i]\n //!     } else {\n@@ -1182,7 +1182,7 @@\n //! ```\n //!\n //! There are a number of ways that the trans backend could choose to\n-//! compile this (e.g. a `[bool, ..10]` array for each such moved array;\n+//! compile this (e.g. a `[bool; 10]` array for each such moved array;\n //! or an `Option<uint>` for each moved array).  From the viewpoint of the\n //! borrow-checker, the important thing is to record what kind of fragment\n //! is implied by the relevant moves."}, {"sha": "d748266ed2ea9907a1aa24d0ca7a9a348f23798e", "filename": "src/librustc_typeck/check/method/doc.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fdoc.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -53,12 +53,12 @@\n //! The first thing that the probe phase does is to create a series of\n //! *steps*. This is done by progressively dereferencing the receiver type\n //! until it cannot be deref'd anymore, as well as applying an optional\n-//! \"unsize\" step. So if the receiver has type `Rc<Box<[T, ..3]>>`, this\n+//! \"unsize\" step. So if the receiver has type `Rc<Box<[T; 3]>>`, this\n //! might yield:\n //!\n-//!     Rc<Box<[T, ..3]>>\n-//!     Box<[T, ..3]>\n-//!     [T, ..3]\n+//!     Rc<Box<[T; 3]>>\n+//!     Box<[T; 3]>\n+//!     [T; 3]\n //!     [T]\n //!\n //! ### Candidate assembly\n@@ -96,13 +96,13 @@\n //! method.\n //!\n //! So, let's continue our example. Imagine that we were calling a method\n-//! `foo` with the receiver `Rc<Box<[T, ..3]>>` and there is a trait `Foo`\n+//! `foo` with the receiver `Rc<Box<[T; 3]>>` and there is a trait `Foo`\n //! that defines it with `&self` for the type `Rc<U>` as well as a method\n //! on the type `Box` that defines `Foo` but with `&mut self`. Then we\n //! might have two candidates:\n //!\n-//!     &Rc<Box<[T, ..3]>> from the impl of `Foo` for `Rc<U>` where `U=Box<T, ..3]>\n-//!     &mut Box<[T, ..3]>> from the inherent impl on `Box<U>` where `U=[T, ..3]`\n+//!     &Rc<Box<[T; 3]>> from the impl of `Foo` for `Rc<U>` where `U=Box<T; 3]>\n+//!     &mut Box<[T; 3]>> from the inherent impl on `Box<U>` where `U=[T; 3]`\n //!\n //! ### Candidate search\n //!\n@@ -112,9 +112,9 @@\n //! that makes any of the candidates match. We pick the first step where\n //! we find a match.\n //!\n-//! In the case of our example, the first step is `Rc<Box<[T, ..3]>>`,\n+//! In the case of our example, the first step is `Rc<Box<[T; 3]>>`,\n //! which does not itself match any candidate. But when we autoref it, we\n-//! get the type `&Rc<Box<[T, ..3]>>` which does match. We would then\n+//! get the type `&Rc<Box<[T; 3]>>` which does match. We would then\n //! recursively consider all where-clauses that appear on the impl: if\n //! those match (or we cannot rule out that they do), then this is the\n //! method we would pick. Otherwise, we would continue down the series of"}, {"sha": "ac2c4337907b105a01cc73973ac3e80c4b4ba0e0", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -4544,7 +4544,7 @@ impl<'tcx> Expectation<'tcx> {\n     /// In this case, the expected type for the `&[1, 2, 3]` expression is\n     /// `&[int]`. If however we were to say that `[1, 2, 3]` has the\n     /// expectation `ExpectHasType([int])`, that would be too strong --\n-    /// `[1, 2, 3]` does not have the type `[int]` but rather `[int, ..3]`.\n+    /// `[1, 2, 3]` does not have the type `[int]` but rather `[int; 3]`.\n     /// It is only the `&[1, 2, 3]` expression as a whole that can be coerced\n     /// to the type `&[int]`. Therefore, we propagate this more limited hint,\n     /// which still is useful, because it informs integer literals and the like."}, {"sha": "a17f3b31be3213139fe6cae69abe182a3612f35a", "filename": "src/librustc_typeck/variance.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibrustc_typeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibrustc_typeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -407,9 +407,9 @@ struct ConstraintContext<'a, 'tcx: 'a> {\n     // are indexed by the `ParamKind` (type, lifetime, self). Note\n     // that there are no marker types for self, so the entries for\n     // self are always None.\n-    invariant_lang_items: [Option<ast::DefId>, ..2],\n-    covariant_lang_items: [Option<ast::DefId>, ..2],\n-    contravariant_lang_items: [Option<ast::DefId>, ..2],\n+    invariant_lang_items: [Option<ast::DefId>; 2],\n+    covariant_lang_items: [Option<ast::DefId>; 2],\n+    contravariant_lang_items: [Option<ast::DefId>; 2],\n     unsafe_lang_item: Option<ast::DefId>,\n \n     // These are pointers to common `ConstantTerm` instances\n@@ -432,9 +432,9 @@ struct Constraint<'a> {\n fn add_constraints_from_crate<'a, 'tcx>(terms_cx: TermsContext<'a, 'tcx>,\n                                         krate: &ast::Crate)\n                                         -> ConstraintContext<'a, 'tcx> {\n-    let mut invariant_lang_items = [None, ..2];\n-    let mut covariant_lang_items = [None, ..2];\n-    let mut contravariant_lang_items = [None, ..2];\n+    let mut invariant_lang_items = [None; 2];\n+    let mut covariant_lang_items = [None; 2];\n+    let mut contravariant_lang_items = [None; 2];\n \n     covariant_lang_items[TypeParam as uint] =\n         terms_cx.tcx.lang_items.covariant_type();"}, {"sha": "2c05524ea7f7b51b0133db598fc6bee72c75b8ce", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -80,7 +80,7 @@ struct hoedown_renderer {\n     blockhtml: Option<extern \"C\" fn(*mut hoedown_buffer, *const hoedown_buffer,\n                                     *mut libc::c_void)>,\n     header: Option<headerfn>,\n-    other: [libc::size_t, ..28],\n+    other: [libc::size_t; 28],\n }\n \n #[repr(C)]"}, {"sha": "54b390e0c3f0ab575e8eebc161c7496209b592aa", "filename": "src/libserialize/base64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibserialize%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibserialize%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fbase64.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -314,7 +314,7 @@ mod tests {\n \n     #[test]\n     fn test_to_base64_crlf_line_break() {\n-        assert!(![0u8, ..1000].to_base64(Config {line_length: None, ..STANDARD})\n+        assert!(![0u8; 1000].to_base64(Config {line_length: None, ..STANDARD})\n                               .contains(\"\\r\\n\"));\n         assert_eq!(b\"foobar\".to_base64(Config {line_length: Some(4),\n                                                ..STANDARD}),\n@@ -323,7 +323,7 @@ mod tests {\n \n     #[test]\n     fn test_to_base64_lf_line_break() {\n-        assert!(![0u8, ..1000].to_base64(Config {line_length: None,\n+        assert!(![0u8; 1000].to_base64(Config {line_length: None,\n                                                  newline: Newline::LF,\n                                                  ..STANDARD})\n                               .as_slice()"}, {"sha": "d88bc88dcbae5cce94d63d347b3399f83cc7aeb9", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -399,7 +399,7 @@ fn escape_char(writer: &mut io::Writer, v: char) -> Result<(), io::IoError> {\n \n fn spaces(wr: &mut io::Writer, mut n: uint) -> Result<(), io::IoError> {\n     const LEN: uint = 16;\n-    static BUF: [u8, ..LEN] = [b' ', ..LEN];\n+    static BUF: [u8; LEN] = [b' '; LEN];\n \n     while n >= LEN {\n         try!(wr.write(&BUF));"}, {"sha": "2c2b7313a7bb44a3e3ef053bae2a758329d9ce17", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -234,7 +234,7 @@ pub fn escape_default<F>(c: u8, mut f: F) where\n     }\n }\n \n-static ASCII_LOWERCASE_MAP: [u8, ..256] = [\n+static ASCII_LOWERCASE_MAP: [u8; 256] = [\n     0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n     0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n     0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n@@ -273,7 +273,7 @@ static ASCII_LOWERCASE_MAP: [u8, ..256] = [\n     0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff,\n ];\n \n-static ASCII_UPPERCASE_MAP: [u8, ..256] = [\n+static ASCII_UPPERCASE_MAP: [u8; 256] = [\n     0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n     0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n     0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,"}, {"sha": "c5405601048cea55b9f88eb1eed3804d6474e297", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -39,7 +39,7 @@ use kinds::{Send,Sync};\n /// let file = File::open(&Path::new(\"message.txt\"));\n /// let mut reader = BufferedReader::new(file);\n ///\n-/// let mut buf = [0, ..100];\n+/// let mut buf = [0; 100];\n /// match reader.read(&mut buf) {\n ///     Ok(nread) => println!(\"Read {} bytes\", nread),\n ///     Err(e) => println!(\"error reading: {}\", e)\n@@ -326,7 +326,7 @@ impl<W: Reader> Reader for InternalBufferedWriter<W> {\n /// stream.write(\"hello, world\".as_bytes());\n /// stream.flush();\n ///\n-/// let mut buf = [0, ..100];\n+/// let mut buf = [0; 100];\n /// match stream.read(&mut buf) {\n ///     Ok(nread) => println!(\"Read {} bytes\", nread),\n ///     Err(e) => println!(\"error reading: {}\", e)"}, {"sha": "077f75e2edd6f9e77bf88c55dd93d9bbb8f9c49c", "filename": "src/libstd/io/comm_adapters.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibstd%2Fio%2Fcomm_adapters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibstd%2Fio%2Fcomm_adapters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcomm_adapters.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -29,7 +29,7 @@ use vec::Vec;\n /// # drop(tx);\n /// let mut reader = ChanReader::new(rx);\n ///\n-/// let mut buf = [0u8, ..100];\n+/// let mut buf = [0u8; 100];\n /// match reader.read(&mut buf) {\n ///     Ok(nread) => println!(\"Read {} bytes\", nread),\n ///     Err(e) => println!(\"read error: {}\", e),\n@@ -171,7 +171,7 @@ mod test {\n         }).detach();\n \n         let mut reader = ChanReader::new(rx);\n-        let mut buf = [0u8, ..3];\n+        let mut buf = [0u8; 3];\n \n         assert_eq!(Ok(0), reader.read(&mut []));\n "}, {"sha": "51e09e547e3eef4fb77642fffd8b5344940a1ee9", "filename": "src/libstd/io/extensions.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibstd%2Fio%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibstd%2Fio%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fextensions.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -86,9 +86,9 @@ pub fn u64_to_le_bytes<T, F>(n: u64, size: uint, f: F) -> T where\n     assert!(size <= 8u);\n     match size {\n       1u => f(&[n as u8]),\n-      2u => f(unsafe { & transmute::<_, [u8, ..2]>((n as u16).to_le()) }),\n-      4u => f(unsafe { & transmute::<_, [u8, ..4]>((n as u32).to_le()) }),\n-      8u => f(unsafe { & transmute::<_, [u8, ..8]>(n.to_le()) }),\n+      2u => f(unsafe { & transmute::<_, [u8; 2]>((n as u16).to_le()) }),\n+      4u => f(unsafe { & transmute::<_, [u8; 4]>((n as u32).to_le()) }),\n+      8u => f(unsafe { & transmute::<_, [u8; 8]>(n.to_le()) }),\n       _ => {\n \n         let mut bytes = vec!();\n@@ -127,9 +127,9 @@ pub fn u64_to_be_bytes<T, F>(n: u64, size: uint, f: F) -> T where\n     assert!(size <= 8u);\n     match size {\n       1u => f(&[n as u8]),\n-      2u => f(unsafe { & transmute::<_, [u8, ..2]>((n as u16).to_be()) }),\n-      4u => f(unsafe { & transmute::<_, [u8, ..4]>((n as u32).to_be()) }),\n-      8u => f(unsafe { & transmute::<_, [u8, ..8]>(n.to_be()) }),\n+      2u => f(unsafe { & transmute::<_, [u8; 2]>((n as u16).to_be()) }),\n+      4u => f(unsafe { & transmute::<_, [u8; 4]>((n as u32).to_be()) }),\n+      8u => f(unsafe { & transmute::<_, [u8; 8]>(n.to_be()) }),\n       _ => {\n         let mut bytes = vec!();\n         let mut i = size;\n@@ -164,7 +164,7 @@ pub fn u64_from_be_bytes(data: &[u8], start: uint, size: uint) -> u64 {\n         panic!(\"index out of bounds\");\n     }\n \n-    let mut buf = [0u8, ..8];\n+    let mut buf = [0u8; 8];\n     unsafe {\n         let ptr = data.as_ptr().offset(start as int);\n         let out = buf.as_mut_ptr();"}, {"sha": "f6fb7ec435f14d97eb6880cf9d5978b240ad1c8f", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -1546,7 +1546,7 @@ mod test {\n     fn binary_file() {\n         use rand::{StdRng, Rng};\n \n-        let mut bytes = [0, ..1024];\n+        let mut bytes = [0; 1024];\n         StdRng::new().ok().unwrap().fill_bytes(&mut bytes);\n \n         let tmpdir = tmpdir();"}, {"sha": "9d73cae094d9dfb52316d73081d4b9a64bbff2ae", "filename": "src/libstd/io/mem.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibstd%2Fio%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibstd%2Fio%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmem.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -252,7 +252,7 @@ impl<'a> Buffer for &'a [u8] {\n /// # #![allow(unused_must_use)]\n /// use std::io::BufWriter;\n ///\n-/// let mut buf = [0, ..4];\n+/// let mut buf = [0; 4];\n /// {\n ///     let mut w = BufWriter::new(&mut buf);\n ///     w.write(&[0, 1, 2]);\n@@ -427,7 +427,7 @@ mod test {\n \n     #[test]\n     fn test_buf_writer() {\n-        let mut buf = [0 as u8, ..9];\n+        let mut buf = [0 as u8; 9];\n         {\n             let mut writer = BufWriter::new(&mut buf);\n             assert_eq!(writer.tell(), Ok(0));\n@@ -448,7 +448,7 @@ mod test {\n \n     #[test]\n     fn test_buf_writer_seek() {\n-        let mut buf = [0 as u8, ..8];\n+        let mut buf = [0 as u8; 8];\n         {\n             let mut writer = BufWriter::new(&mut buf);\n             assert_eq!(writer.tell(), Ok(0));\n@@ -477,7 +477,7 @@ mod test {\n \n     #[test]\n     fn test_buf_writer_error() {\n-        let mut buf = [0 as u8, ..2];\n+        let mut buf = [0 as u8; 2];\n         let mut writer = BufWriter::new(&mut buf);\n         writer.write(&[0]).unwrap();\n \n@@ -498,7 +498,7 @@ mod test {\n         assert_eq!(reader.tell(), Ok(1));\n         let b: &[_] = &[0];\n         assert_eq!(buf, b);\n-        let mut buf = [0, ..4];\n+        let mut buf = [0; 4];\n         assert_eq!(reader.read(&mut buf), Ok(4));\n         assert_eq!(reader.tell(), Ok(5));\n         let b: &[_] = &[1, 2, 3, 4];\n@@ -524,7 +524,7 @@ mod test {\n         assert_eq!(reader.len(), 7);\n         let b: &[_] = &[0];\n         assert_eq!(buf.as_slice(), b);\n-        let mut buf = [0, ..4];\n+        let mut buf = [0; 4];\n         assert_eq!(reader.read(&mut buf), Ok(4));\n         assert_eq!(reader.len(), 3);\n         let b: &[_] = &[1, 2, 3, 4];\n@@ -551,7 +551,7 @@ mod test {\n         assert_eq!(reader.tell(), Ok(1));\n         let b: &[_] = &[0];\n         assert_eq!(buf, b);\n-        let mut buf = [0, ..4];\n+        let mut buf = [0; 4];\n         assert_eq!(reader.read(&mut buf), Ok(4));\n         assert_eq!(reader.tell(), Ok(5));\n         let b: &[_] = &[1, 2, 3, 4];\n@@ -648,7 +648,7 @@ mod test {\n     #[test]\n     fn io_read_at_least() {\n         let mut r = MemReader::new(vec![1, 2, 3, 4, 5, 6, 7, 8]);\n-        let mut buf = [0, ..3];\n+        let mut buf = [0; 3];\n         assert!(r.read_at_least(buf.len(), &mut buf).is_ok());\n         let b: &[_] = &[1, 2, 3];\n         assert_eq!(buf, b);\n@@ -721,7 +721,7 @@ mod test {\n     #[bench]\n     fn bench_mem_reader(b: &mut Bencher) {\n         b.iter(|| {\n-            let buf = [5 as u8, ..100].to_vec();\n+            let buf = [5 as u8; 100].to_vec();\n             {\n                 let mut rdr = MemReader::new(buf);\n                 for _i in range(0u, 10) {\n@@ -736,7 +736,7 @@ mod test {\n     #[bench]\n     fn bench_buf_writer(b: &mut Bencher) {\n         b.iter(|| {\n-            let mut buf = [0 as u8, ..100];\n+            let mut buf = [0 as u8; 100];\n             {\n                 let mut wr = BufWriter::new(&mut buf);\n                 for _i in range(0u, 10) {\n@@ -750,7 +750,7 @@ mod test {\n     #[bench]\n     fn bench_buf_reader(b: &mut Bencher) {\n         b.iter(|| {\n-            let buf = [5 as u8, ..100];\n+            let buf = [5 as u8; 100];\n             {\n                 let mut rdr = BufReader::new(&buf);\n                 for _i in range(0u, 10) {"}, {"sha": "e8b852ee492b95c02e42ae4bc47daf4bf7d19449", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -1081,7 +1081,7 @@ pub trait Writer {\n     /// Write a single char, encoded as UTF-8.\n     #[inline]\n     fn write_char(&mut self, c: char) -> IoResult<()> {\n-        let mut buf = [0u8, ..4];\n+        let mut buf = [0u8; 4];\n         let n = c.encode_utf8(buf.as_mut_slice()).unwrap_or(0);\n         self.write(buf[..n])\n     }\n@@ -1968,7 +1968,7 @@ mod tests {\n     fn test_read_at_least() {\n         let mut r = BadReader::new(MemReader::new(b\"hello, world!\".to_vec()),\n                                    vec![GoodBehavior(uint::MAX)]);\n-        let buf = &mut [0u8, ..5];\n+        let buf = &mut [0u8; 5];\n         assert!(r.read_at_least(1, buf).unwrap() >= 1);\n         assert!(r.read_exact(5).unwrap().len() == 5); // read_exact uses read_at_least\n         assert!(r.read_at_least(0, buf).is_ok());"}, {"sha": "49ab9ddb92487a6c24038e54a910f2bbd830ac98", "filename": "src/libstd/io/net/ip.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fip.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -223,7 +223,7 @@ impl<'a> Parser<'a> {\n     }\n \n     fn read_ipv4_addr_impl(&mut self) -> Option<IpAddr> {\n-        let mut bs = [0u8, ..4];\n+        let mut bs = [0u8; 4];\n         let mut i = 0;\n         while i < 4 {\n             if i != 0 && self.read_given_char('.').is_none() {\n@@ -248,13 +248,13 @@ impl<'a> Parser<'a> {\n     fn read_ipv6_addr_impl(&mut self) -> Option<IpAddr> {\n         fn ipv6_addr_from_head_tail(head: &[u16], tail: &[u16]) -> IpAddr {\n             assert!(head.len() + tail.len() <= 8);\n-            let mut gs = [0u16, ..8];\n+            let mut gs = [0u16; 8];\n             gs.clone_from_slice(head);\n             gs.slice_mut(8 - tail.len(), 8).clone_from_slice(tail);\n             Ipv6Addr(gs[0], gs[1], gs[2], gs[3], gs[4], gs[5], gs[6], gs[7])\n         }\n \n-        fn read_groups(p: &mut Parser, groups: &mut [u16, ..8], limit: uint) -> (uint, bool) {\n+        fn read_groups(p: &mut Parser, groups: &mut [u16; 8], limit: uint) -> (uint, bool) {\n             let mut i = 0;\n             while i < limit {\n                 if i < limit - 1 {\n@@ -291,7 +291,7 @@ impl<'a> Parser<'a> {\n             (i, false)\n         }\n \n-        let mut head = [0u16, ..8];\n+        let mut head = [0u16; 8];\n         let (head_size, head_ipv4) = read_groups(self, &mut head, 8);\n \n         if head_size == 8 {\n@@ -310,7 +310,7 @@ impl<'a> Parser<'a> {\n             return None;\n         }\n \n-        let mut tail = [0u16, ..8];\n+        let mut tail = [0u16; 8];\n         let (tail_size, _) = read_groups(self, &mut tail, 8 - head_size);\n         Some(ipv6_addr_from_head_tail(head[..head_size], tail[..tail_size]))\n     }"}, {"sha": "4706ab35d1d3f14fb44aa0109f6102ead1fb7d91", "filename": "src/libstd/io/net/tcp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -979,7 +979,7 @@ mod test {\n \n         rx.recv();\n         let mut c = TcpStream::connect(addr).unwrap();\n-        let mut b = [0, ..10];\n+        let mut b = [0; 10];\n         assert_eq!(c.read(&mut b), Ok(1));\n         c.write(&[1]).unwrap();\n         rx.recv();"}, {"sha": "62868afa00a31338d4e97ef16517d4270de70d71", "filename": "src/libstd/io/net/udp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fudp.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -45,7 +45,7 @@ use sys_common;\n ///         Err(e) => panic!(\"couldn't bind socket: {}\", e),\n ///     };\n ///\n-///     let mut buf = [0, ..10];\n+///     let mut buf = [0; 10];\n ///     match socket.recv_from(&mut buf) {\n ///         Ok((amt, src)) => {\n ///             // Send a reply to the socket we received data from"}, {"sha": "93465d5510b87893a2373627362686da901218fb", "filename": "src/libstd/io/pipe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibstd%2Fio%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibstd%2Fio%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fpipe.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -129,7 +129,7 @@ mod test {\n             rx.recv(); // don't close the pipe until the other read has finished\n         });\n \n-        let mut buf = [0, ..10];\n+        let mut buf = [0; 10];\n         input.read(&mut buf).unwrap();\n         tx.send(());\n     }"}, {"sha": "40941fda79c93821cd3a604fc7a1516f48c68d90", "filename": "src/libstd/io/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibstd%2Fio%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibstd%2Fio%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ftest.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -130,7 +130,7 @@ mod darwin_fd_limit {\n         use os::last_os_error;\n \n         // Fetch the kern.maxfilesperproc value\n-        let mut mib: [libc::c_int, ..2] = [CTL_KERN, KERN_MAXFILESPERPROC];\n+        let mut mib: [libc::c_int; 2] = [CTL_KERN, KERN_MAXFILESPERPROC];\n         let mut maxfiles: libc::c_int = 0;\n         let mut size: libc::size_t = size_of_val(&maxfiles) as libc::size_t;\n         if sysctl(&mut mib[0], 2, &mut maxfiles as *mut libc::c_int as *mut libc::c_void, &mut size,"}, {"sha": "f88e8d7e7e3b4f000e11027de7b8d0a9d241c318", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -103,7 +103,7 @@ impl Reader for ZeroReader {\n \n impl Buffer for ZeroReader {\n     fn fill_buf<'a>(&'a mut self) -> io::IoResult<&'a [u8]> {\n-        static DATA: [u8, ..64] = [0, ..64];\n+        static DATA: [u8; 64] = [0; 64];\n         Ok(DATA.as_slice())\n     }\n "}, {"sha": "febdf5f6118a58cbd485f78991f04b7d928f3c2b", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -104,7 +104,7 @@ fn int_to_str_bytes_common<T, F>(num: T, radix: uint, sign: SignFormat, mut f: F\n     // This is just for integral types, the largest of which is a u64. The\n     // smallest base that we can have is 2, so the most number of digits we're\n     // ever going to have is 64\n-    let mut buf = [0u8, ..64];\n+    let mut buf = [0u8; 64];\n     let mut cur = 0;\n \n     // Loop at least once to make sure at least a `0` gets emitted."}, {"sha": "e74f45f8f0a159d26f744a9ba40962673797e613", "filename": "src/libstd/num/uint_macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibstd%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibstd%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint_macros.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -38,7 +38,7 @@ pub fn to_str_bytes<U, F>(n: $T, radix: uint, f: F) -> U where\n     use io::{Writer, Seek};\n     // The radix can be as low as 2, so we need at least 64 characters for a\n     // base 2 number, and then we need another for a possible '-' character.\n-    let mut buf = [0u8, ..65];\n+    let mut buf = [0u8; 65];\n     let amt = {\n         let mut wr = ::io::BufWriter::new(&mut buf);\n         (write!(&mut wr, \"{}\", ::fmt::radix(n, radix as u8))).unwrap();"}, {"sha": "3b3e9ae627595bd725b62215ec7b8d1ef58132fa", "filename": "src/libstd/rand/os.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibstd%2Frand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibstd%2Frand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fos.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -70,15 +70,15 @@ mod imp {\n     }\n \n     fn getrandom_next_u32() -> u32 {\n-        let mut buf: [u8, ..4] = [0u8, ..4];\n+        let mut buf: [u8; 4] = [0u8; 4];\n         getrandom_fill_bytes(&mut buf);\n-        unsafe { mem::transmute::<[u8, ..4], u32>(buf) }\n+        unsafe { mem::transmute::<[u8; 4], u32>(buf) }\n     }\n \n     fn getrandom_next_u64() -> u64 {\n-        let mut buf: [u8, ..8] = [0u8, ..8];\n+        let mut buf: [u8; 8] = [0u8; 8];\n         getrandom_fill_bytes(&mut buf);\n-        unsafe { mem::transmute::<[u8, ..8], u64>(buf) }\n+        unsafe { mem::transmute::<[u8; 8], u64>(buf) }\n     }\n \n     #[cfg(all(target_os = \"linux\",\n@@ -90,7 +90,7 @@ mod imp {\n         static GETRANDOM_AVAILABLE: AtomicBool = INIT_ATOMIC_BOOL;\n \n         if !GETRANDOM_CHECKED.load(Relaxed) {\n-            let mut buf: [u8, ..0] = [];\n+            let mut buf: [u8; 0] = [];\n             let result = getrandom(&mut buf);\n             let available = if result == -1 {\n                 let err = errno() as libc::c_int;"}, {"sha": "fee86e33455d40c086e96c835bc0c675eca5537f", "filename": "src/libstd/rt/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibstd%2Frt%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibstd%2Frt%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Futil.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -134,7 +134,7 @@ pub fn abort(args: fmt::Arguments) -> ! {\n     }\n \n     // Convert the arguments into a stack-allocated string\n-    let mut msg = [0u8, ..512];\n+    let mut msg = [0u8; 512];\n     let mut w = BufWriter { buf: &mut msg, pos: 0 };\n     let _ = write!(&mut w, \"{}\", args);\n     let msg = str::from_utf8(w.buf[mut ..w.pos]).unwrap_or(\"aborted\");"}, {"sha": "9e26475f814b79d483b04438bfd55eb01524ece5", "filename": "src/libstd/sys/unix/backtrace.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibstd%2Fsys%2Funix%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibstd%2Fsys%2Funix%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fbacktrace.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -123,7 +123,7 @@ pub fn write(w: &mut Writer) -> IoResult<()> {\n     try!(writeln!(w, \"stack backtrace:\"));\n     // 100 lines should be enough\n     const SIZE: uint = 100;\n-    let mut buf: [*mut libc::c_void, ..SIZE] = unsafe {mem::zeroed()};\n+    let mut buf: [*mut libc::c_void; SIZE] = unsafe {mem::zeroed()};\n     let cnt = unsafe { backtrace(buf.as_mut_ptr(), SIZE as libc::c_int) as uint};\n \n     // skipping the first one as it is write itself\n@@ -320,7 +320,7 @@ fn print(w: &mut Writer, idx: int, addr: *mut libc::c_void) -> IoResult<()> {\n     //        tested if this is required or not.\n     unsafe fn init_state() -> *mut backtrace_state {\n         static mut STATE: *mut backtrace_state = 0 as *mut backtrace_state;\n-        static mut LAST_FILENAME: [libc::c_char, ..256] = [0, ..256];\n+        static mut LAST_FILENAME: [libc::c_char; 256] = [0; 256];\n         if !STATE.is_null() { return STATE }\n         let selfname = if cfg!(target_os = \"freebsd\") ||\n                           cfg!(target_os = \"dragonfly\") {"}, {"sha": "417f1bf76028160c35e27f95bb9922f2c452a527", "filename": "src/libstd/sys/unix/c.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibstd%2Fsys%2Funix%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibstd%2Fsys%2Funix%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fc.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -168,13 +168,13 @@ mod signal {\n     #[repr(C)]\n     #[cfg(target_word_size = \"32\")]\n     pub struct sigset_t {\n-        __val: [libc::c_ulong, ..32],\n+        __val: [libc::c_ulong; 32],\n     }\n \n     #[repr(C)]\n     #[cfg(target_word_size = \"64\")]\n     pub struct sigset_t {\n-        __val: [libc::c_ulong, ..16],\n+        __val: [libc::c_ulong; 16],\n     }\n }\n \n@@ -211,15 +211,15 @@ mod signal {\n         pub sa_handler: extern fn(libc::c_int),\n         pub sa_mask: sigset_t,\n         sa_restorer: *mut libc::c_void,\n-        sa_resv: [libc::c_int, ..1],\n+        sa_resv: [libc::c_int; 1],\n     }\n \n     unsafe impl ::kinds::Send for sigaction { }\n     unsafe impl ::kinds::Sync for sigaction { }\n \n     #[repr(C)]\n     pub struct sigset_t {\n-        __val: [libc::c_ulong, ..32],\n+        __val: [libc::c_ulong; 32],\n     }\n }\n \n@@ -244,7 +244,7 @@ mod signal {\n     #[cfg(any(target_os = \"freebsd\", target_os = \"dragonfly\"))]\n     #[repr(C)]\n     pub struct sigset_t {\n-        bits: [u32, ..4],\n+        bits: [u32; 4],\n     }\n \n     // This structure has more fields, but we're not all that interested in"}, {"sha": "8de4ffa7022a92ece4d9e289b25a90f3668ccd7b", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -372,7 +372,7 @@ mod tests {\n         let mut writer = FileDesc::new(writer, true);\n \n         writer.write(b\"test\").ok().unwrap();\n-        let mut buf = [0u8, ..4];\n+        let mut buf = [0u8; 4];\n         match reader.read(&mut buf) {\n             Ok(4) => {\n                 assert_eq!(buf[0], 't' as u8);"}, {"sha": "624d61cd41ff5f56cb92fe73bf89824bdee1b091", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -113,7 +113,7 @@ pub fn error_string(errno: i32) -> String {\n }\n \n pub unsafe fn pipe() -> IoResult<(FileDesc, FileDesc)> {\n-    let mut fds = [0, ..2];\n+    let mut fds = [0; 2];\n     if libc::pipe(fds.as_mut_ptr()) == 0 {\n         Ok((FileDesc::new(fds[0], true), FileDesc::new(fds[1], true)))\n     } else {"}, {"sha": "c1c28bd5fc4dfaf3154ac600c494e7e4bac5c037", "filename": "src/libstd/sys/unix/process.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -120,7 +120,7 @@ impl Process {\n \n                     let p = Process{ pid: pid };\n                     drop(output);\n-                    let mut bytes = [0, ..8];\n+                    let mut bytes = [0; 8];\n                     return match input.read(&mut bytes) {\n                         Ok(8) => {\n                             assert!(combine(CLOEXEC_MSG_FOOTER) == combine(bytes.slice(4, 8)),\n@@ -348,7 +348,7 @@ impl Process {\n         // handler we're going to start receiving signals.\n         fn register_sigchld() -> (libc::c_int, c::sigaction) {\n             unsafe {\n-                let mut pipes = [0, ..2];\n+                let mut pipes = [0; 2];\n                 assert_eq!(libc::pipe(pipes.as_mut_ptr()), 0);\n                 set_nonblocking(pipes[0], true).ok().unwrap();\n                 set_nonblocking(pipes[1], true).ok().unwrap();\n@@ -482,7 +482,7 @@ impl Process {\n         fn drain(fd: libc::c_int) -> bool {\n             let mut ret = false;\n             loop {\n-                let mut buf = [0u8, ..1];\n+                let mut buf = [0u8; 1];\n                 match unsafe {\n                     libc::read(fd, buf.as_mut_ptr() as *mut libc::c_void,\n                                buf.len() as libc::size_t)"}, {"sha": "95ab9b459d671b152f8db2eed0bd75db538929c4", "filename": "src/libstd/sys/unix/stack_overflow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -184,12 +184,12 @@ mod imp {\n         #[cfg(target_word_size = \"32\")]\n         #[repr(C)]\n         pub struct sigset_t {\n-            __val: [libc::c_ulong, ..32],\n+            __val: [libc::c_ulong; 32],\n         }\n         #[cfg(target_word_size = \"64\")]\n         #[repr(C)]\n         pub struct sigset_t {\n-            __val: [libc::c_ulong, ..16],\n+            __val: [libc::c_ulong; 16],\n         }\n \n         #[repr(C)]"}, {"sha": "8b62def62b61b5a26288cbba73ec9b062e7f30a4", "filename": "src/libstd/sys/unix/sync.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibstd%2Fsys%2Funix%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibstd%2Fsys%2Funix%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fsync.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -187,7 +187,7 @@ mod os {\n         writerThreadId: libc::c_int,\n         pendingReaders: libc::c_int,\n         pendingWriters: libc::c_int,\n-        reserved: [*mut libc::c_void, ..4],\n+        reserved: [*mut libc::c_void; 4],\n     }\n \n     pub const PTHREAD_MUTEX_INITIALIZER: pthread_mutex_t = pthread_mutex_t {\n@@ -203,6 +203,6 @@ mod os {\n         writerThreadId: 0,\n         pendingReaders: 0,\n         pendingWriters: 0,\n-        reserved: [0 as *mut _, ..4],\n+        reserved: [0 as *mut _; 4],\n     };\n }"}, {"sha": "4f45831cb3af4756a53c63b74b2a3dd3e90d22a9", "filename": "src/libstd/sys/windows/backtrace.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -68,7 +68,7 @@ const IMAGE_FILE_MACHINE_AMD64: libc::DWORD = 0x8664;\n struct SYMBOL_INFO {\n     SizeOfStruct: libc::c_ulong,\n     TypeIndex: libc::c_ulong,\n-    Reserved: [u64, ..2],\n+    Reserved: [u64; 2],\n     Index: libc::c_ulong,\n     Size: libc::c_ulong,\n     ModBase: u64,\n@@ -108,10 +108,10 @@ struct STACKFRAME64 {\n     AddrStack: ADDRESS64,\n     AddrBStore: ADDRESS64,\n     FuncTableEntry: *mut libc::c_void,\n-    Params: [u64, ..4],\n+    Params: [u64; 4],\n     Far: libc::BOOL,\n     Virtual: libc::BOOL,\n-    Reserved: [u64, ..3],\n+    Reserved: [u64; 3],\n     KdHelp: KDHELP64,\n }\n \n@@ -127,7 +127,7 @@ struct KDHELP64 {\n     KiUserExceptionDispatcher: u64,\n     StackBase: u64,\n     StackLimit: u64,\n-    Reserved: [u64, ..5],\n+    Reserved: [u64; 5],\n }\n \n #[cfg(target_arch = \"x86\")]\n@@ -174,7 +174,7 @@ mod arch {\n         ErrorSelector: libc::DWORD,\n         DataOffset: libc::DWORD,\n         DataSelector: libc::DWORD,\n-        RegisterArea: [u8, ..80],\n+        RegisterArea: [u8; 80],\n         Cr0NpxState: libc::DWORD,\n     }\n \n@@ -198,7 +198,7 @@ mod arch {\n \n     #[repr(C)]\n     pub struct CONTEXT {\n-        _align_hack: [simd::u64x2, ..0], // FIXME align on 16-byte\n+        _align_hack: [simd::u64x2; 0], // FIXME align on 16-byte\n         P1Home: DWORDLONG,\n         P2Home: DWORDLONG,\n         P3Home: DWORDLONG,\n@@ -257,15 +257,15 @@ mod arch {\n \n     #[repr(C)]\n     pub struct M128A {\n-        _align_hack: [simd::u64x2, ..0], // FIXME align on 16-byte\n+        _align_hack: [simd::u64x2; 0], // FIXME align on 16-byte\n         Low:  c_ulonglong,\n         High: c_longlong\n     }\n \n     #[repr(C)]\n     pub struct FLOATING_SAVE_AREA {\n-        _align_hack: [simd::u64x2, ..0], // FIXME align on 16-byte\n-        _Dummy: [u8, ..512] // FIXME: Fill this out\n+        _align_hack: [simd::u64x2; 0], // FIXME align on 16-byte\n+        _Dummy: [u8; 512] // FIXME: Fill this out\n     }\n \n     pub fn init_frame(frame: &mut super::STACKFRAME64,"}, {"sha": "127d4f996220057f7f3b666c9ce5efb6e364cd75", "filename": "src/libstd/sys/windows/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -112,7 +112,7 @@ pub unsafe fn pipe() -> IoResult<(FileDesc, FileDesc)> {\n     // fully understand. Here we explicitly make the pipe non-inheritable,\n     // which means to pass it to a subprocess they need to be duplicated\n     // first, as in std::run.\n-    let mut fds = [0, ..2];\n+    let mut fds = [0; 2];\n     match libc::pipe(fds.as_mut_ptr(), 1024 as ::libc::c_uint,\n                      (libc::O_BINARY | libc::O_NOINHERIT) as c_int) {\n         0 => {"}, {"sha": "457085f5cc84878c61d935fe0ba8af1d5a83b6b4", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -292,7 +292,7 @@ pub struct Parser<'a> {\n     pub cfg: CrateConfig,\n     /// the previous token or None (only stashed sometimes).\n     pub last_token: Option<Box<token::Token>>,\n-    pub buffer: [TokenAndSpan, ..4],\n+    pub buffer: [TokenAndSpan; 4],\n     pub buffer_start: int,\n     pub buffer_end: int,\n     pub tokens_consumed: uint,\n@@ -2146,7 +2146,7 @@ impl<'a> Parser<'a> {\n             (&None, &Some(ref e)) => (e.span.lo, e.span.hi),\n             (&None, &None) => (DUMMY_SP.lo, DUMMY_SP.hi),\n         };\n-        ExprIndex(expr, self.mk_expr(lo, hi, self.mk_range(start, end)))\n+        ExprIndex(expr, self.mk_expr(lo, hi, ExprRange(start, end)))\n     }\n \n     pub fn mk_range(&mut self,"}, {"sha": "35d1e166e9ca4cc1744d5ad0f375105be29810e0", "filename": "src/libterm/terminfo/parm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibterm%2Fterminfo%2Fparm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibterm%2Fterminfo%2Fparm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparm.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -53,9 +53,9 @@ pub enum Param {\n /// Container for static and dynamic variable arrays\n pub struct Variables {\n     /// Static variables A-Z\n-    sta: [Param, ..26],\n+    sta: [Param; 26],\n     /// Dynamic variables a-z\n-    dyn: [Param, ..26]\n+    dyn: [Param; 26]\n }\n \n impl Variables {"}, {"sha": "3130ad0af3fa7a26e8c4cbff0b598defb1cb07b9", "filename": "src/libterm/win.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibterm%2Fwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibterm%2Fwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fwin.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -32,11 +32,11 @@ pub struct WinConsole<T> {\n #[allow(non_snake_case)]\n #[repr(C)]\n struct CONSOLE_SCREEN_BUFFER_INFO {\n-    dwSize: [libc::c_short, ..2],\n-    dwCursorPosition: [libc::c_short, ..2],\n+    dwSize: [libc::c_short; 2],\n+    dwCursorPosition: [libc::c_short; 2],\n     wAttributes: libc::WORD,\n-    srWindow: [libc::c_short, ..4],\n-    dwMaximumWindowSize: [libc::c_short, ..2],\n+    srWindow: [libc::c_short; 4],\n+    dwMaximumWindowSize: [libc::c_short; 2],\n }\n \n #[allow(non_snake_case)]"}, {"sha": "19821ecb7ca7a03b75effb31f911d7ed7b699eb3", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -1387,7 +1387,7 @@ impl Bencher {\n         if n == 0 { n = 1; }\n \n         let mut total_run = Duration::nanoseconds(0);\n-        let samples : &mut [f64] = &mut [0.0_f64, ..50];\n+        let samples : &mut [f64] = &mut [0.0_f64; 50];\n         loop {\n             let mut summ = None;\n             let mut summ5 = None;"}, {"sha": "9b473ea5f54a709fe84fe88f28c24ecbd13be288", "filename": "src/libunicode/u_str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibunicode%2Fu_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Flibunicode%2Fu_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Fu_str.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -353,7 +353,7 @@ impl<'a> DoubleEndedIterator<&'a str> for Graphemes<'a> {\n }\n \n // https://tools.ietf.org/html/rfc3629\n-static UTF8_CHAR_WIDTH: [u8, ..256] = [\n+static UTF8_CHAR_WIDTH: [u8; 256] = [\n 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,\n 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, // 0x1F\n 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,\n@@ -519,7 +519,7 @@ impl<I> Iterator<u16> for Utf16Encoder<I> where I: Iterator<char> {\n             return Some(tmp);\n         }\n \n-        let mut buf = [0u16, ..2];\n+        let mut buf = [0u16; 2];\n         self.chars.next().map(|ch| {\n             let n = ch.encode_utf16(buf.as_mut_slice()).unwrap_or(0);\n             if n == 2 { self.extra = buf[1]; }"}, {"sha": "84c592defaa26cbc5cad3216e91b73a6e483adca", "filename": "src/test/pretty/issue-4264.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Ftest%2Fpretty%2Fissue-4264.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Ftest%2Fpretty%2Fissue-4264.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-4264.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -14,11 +14,11 @@\n \n // #4264 fixed-length vector types\n \n-pub fn foo(_: [int, ..3]) {}\n+pub fn foo(_: [int; 3]) {}\n \n pub fn bar() {\n     const FOO: uint = 5u - 4u;\n-    let _: [(), ..FOO] = [()];\n+    let _: [(); FOO] = [()];\n \n     let _ : [(), ..1u] = [()];\n "}, {"sha": "34ff0b3821cc6dfc85ce519e46c962ae5e03fb65", "filename": "src/test/run-pass/enum-null-pointer-opt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Ftest%2Frun-pass%2Fenum-null-pointer-opt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Ftest%2Frun-pass%2Fenum-null-pointer-opt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-null-pointer-opt.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -54,7 +54,7 @@ fn main() {\n     // and tuples\n     assert_eq!(size_of::<(u8, Box<int>)>(), size_of::<Option<(u8, Box<int>)>>());\n     // and fixed-size arrays\n-    assert_eq!(size_of::<[Box<int>, ..1]>(), size_of::<Option<[Box<int>, ..1]>>());\n+    assert_eq!(size_of::<[Box<int>; 1]>(), size_of::<Option<[Box<int>; 1]>>());\n \n     // Should apply to NonZero\n     assert_eq!(size_of::<NonZero<uint>>(), size_of::<Option<NonZero<uint>>>());"}, {"sha": "961a4472bd4e7cae4ed0e1d77889f196b7ebe019", "filename": "src/test/run-pass/type-sizes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Ftest%2Frun-pass%2Ftype-sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2/src%2Ftest%2Frun-pass%2Ftype-sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-sizes.rs?ref=7e2b9ea235c2bf4cc9a7575c8e0f70950208b8f2", "patch": "@@ -26,7 +26,7 @@ enum e2 {\n }\n \n enum e3 {\n-    a([u16, ..0], u8), b\n+    a([u16; 0], u8), b\n }\n \n pub fn main() {"}]}