{"sha": "17395b45b102b365e6fb19796223d190b5f2bebf", "node_id": "C_kwDOAAsO6NoAKDE3Mzk1YjQ1YjEwMmIzNjVlNmZiMTk3OTYyMjNkMTkwYjVmMmJlYmY", "commit": {"author": {"name": "Jakob Degen", "email": "jakob.e.degen@gmail.com", "date": "2022-10-31T00:17:25Z"}, "committer": {"name": "Jakob Degen", "email": "jakob.e.degen@gmail.com", "date": "2022-11-01T04:45:41Z"}, "message": "Detect unused files in `src/test/mir-opt` and error on them in tidy.", "tree": {"sha": "e7a768e6f1e5eefd81f3b14257eeaab60d3fda4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7a768e6f1e5eefd81f3b14257eeaab60d3fda4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17395b45b102b365e6fb19796223d190b5f2bebf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17395b45b102b365e6fb19796223d190b5f2bebf", "html_url": "https://github.com/rust-lang/rust/commit/17395b45b102b365e6fb19796223d190b5f2bebf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17395b45b102b365e6fb19796223d190b5f2bebf/comments", "author": {"login": "JakobDegen", "id": 51179609, "node_id": "MDQ6VXNlcjUxMTc5NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/51179609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakobDegen", "html_url": "https://github.com/JakobDegen", "followers_url": "https://api.github.com/users/JakobDegen/followers", "following_url": "https://api.github.com/users/JakobDegen/following{/other_user}", "gists_url": "https://api.github.com/users/JakobDegen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakobDegen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakobDegen/subscriptions", "organizations_url": "https://api.github.com/users/JakobDegen/orgs", "repos_url": "https://api.github.com/users/JakobDegen/repos", "events_url": "https://api.github.com/users/JakobDegen/events{/privacy}", "received_events_url": "https://api.github.com/users/JakobDegen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JakobDegen", "id": 51179609, "node_id": "MDQ6VXNlcjUxMTc5NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/51179609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakobDegen", "html_url": "https://github.com/JakobDegen", "followers_url": "https://api.github.com/users/JakobDegen/followers", "following_url": "https://api.github.com/users/JakobDegen/following{/other_user}", "gists_url": "https://api.github.com/users/JakobDegen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakobDegen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakobDegen/subscriptions", "organizations_url": "https://api.github.com/users/JakobDegen/orgs", "repos_url": "https://api.github.com/users/JakobDegen/repos", "events_url": "https://api.github.com/users/JakobDegen/events{/privacy}", "received_events_url": "https://api.github.com/users/JakobDegen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "024207ab43aceb49f2ca957509c503ccf12089d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/024207ab43aceb49f2ca957509c503ccf12089d7", "html_url": "https://github.com/rust-lang/rust/commit/024207ab43aceb49f2ca957509c503ccf12089d7"}], "stats": {"total": 664, "additions": 168, "deletions": 496}, "files": [{"sha": "301167e02cc5dbd70358c4d69bf1af50367183e3", "filename": "Cargo.lock", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/17395b45b102b365e6fb19796223d190b5f2bebf/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/17395b45b102b365e6fb19796223d190b5f2bebf/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=17395b45b102b365e6fb19796223d190b5f2bebf", "patch": "@@ -816,6 +816,7 @@ dependencies = [\n  \"lazycell\",\n  \"libc\",\n  \"miow\",\n+ \"miropt-test-tools\",\n  \"regex\",\n  \"rustfix\",\n  \"serde\",\n@@ -2268,6 +2269,13 @@ dependencies = [\n  \"ui_test\",\n ]\n \n+[[package]]\n+name = \"miropt-test-tools\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"regex\",\n+]\n+\n [[package]]\n name = \"new_debug_unreachable\"\n version = \"1.0.4\"\n@@ -4920,6 +4928,7 @@ version = \"0.1.0\"\n dependencies = [\n  \"cargo_metadata 0.14.0\",\n  \"lazy_static\",\n+ \"miropt-test-tools\",\n  \"regex\",\n  \"walkdir\",\n ]"}, {"sha": "13a98eedde86704608ea81167f78ea3e3f5cae69", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/17395b45b102b365e6fb19796223d190b5f2bebf/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/17395b45b102b365e6fb19796223d190b5f2bebf/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=17395b45b102b365e6fb19796223d190b5f2bebf", "patch": "@@ -11,6 +11,7 @@ members = [\n   \"src/tools/error_index_generator\",\n   \"src/tools/linkchecker\",\n   \"src/tools/lint-docs\",\n+  \"src/tools/miropt-test-tools\",\n   \"src/tools/rustbook\",\n   \"src/tools/unstable-book-gen\",\n   \"src/tools/tidy\","}, {"sha": "6de3746363337e992ca038f2c4a58901c25c7184", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/17395b45b102b365e6fb19796223d190b5f2bebf/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17395b45b102b365e6fb19796223d190b5f2bebf/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=17395b45b102b365e6fb19796223d190b5f2bebf", "patch": "@@ -622,6 +622,7 @@ impl<'a> Builder<'a> {\n                 check::Clippy,\n                 check::Miri,\n                 check::CargoMiri,\n+                check::MiroptTestTools,\n                 check::Rls,\n                 check::RustAnalyzer,\n                 check::Rustfmt,"}, {"sha": "2e1bd8d6d1f6db817547866633ae240c7dd9d685", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/17395b45b102b365e6fb19796223d190b5f2bebf/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17395b45b102b365e6fb19796223d190b5f2bebf/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=17395b45b102b365e6fb19796223d190b5f2bebf", "patch": "@@ -460,6 +460,7 @@ tool_check_step!(Miri, \"src/tools/miri\", SourceType::InTree);\n tool_check_step!(CargoMiri, \"src/tools/miri/cargo-miri\", SourceType::InTree);\n tool_check_step!(Rls, \"src/tools/rls\", SourceType::InTree);\n tool_check_step!(Rustfmt, \"src/tools/rustfmt\", SourceType::InTree);\n+tool_check_step!(MiroptTestTools, \"src/tools/miropt-test-tools\", SourceType::InTree);\n \n tool_check_step!(Bootstrap, \"src/bootstrap\", SourceType::InTree, false);\n "}, {"sha": "c3e503bf2c686bf784accdb4776e0d3047ca25ad", "filename": "src/test/mir-opt/rustc.try_identity.DestinationPropagation.diff", "status": "removed", "additions": 0, "deletions": 72, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/024207ab43aceb49f2ca957509c503ccf12089d7/src%2Ftest%2Fmir-opt%2Frustc.try_identity.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/024207ab43aceb49f2ca957509c503ccf12089d7/src%2Ftest%2Fmir-opt%2Frustc.try_identity.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Frustc.try_identity.DestinationPropagation.diff?ref=024207ab43aceb49f2ca957509c503ccf12089d7", "patch": "@@ -1,72 +0,0 @@\n-- // MIR for `try_identity` before DestinationPropagation\n-+ // MIR for `try_identity` after DestinationPropagation\n-  \n-  fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i32> {\n-      debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:6:17: 6:18\n-      let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:6:41: 6:57\n-      let _2: u32;                         // in scope 0 at $DIR/simplify_try.rs:7:9: 7:10\n-      let mut _3: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:7:13: 7:15\n-      let mut _4: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:7:13: 7:14\n-      let mut _5: isize;                   // in scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-      let _6: i32;                         // in scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-      let mut _7: !;                       // in scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-      let mut _8: i32;                     // in scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-      let mut _9: i32;                     // in scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-      let _10: u32;                        // in scope 0 at $DIR/simplify_try.rs:7:13: 7:15\n-      let mut _11: u32;                    // in scope 0 at $DIR/simplify_try.rs:8:8: 8:9\n-      scope 1 {\n-          debug y => _2;                   // in scope 1 at $DIR/simplify_try.rs:7:9: 7:10\n-      }\n-      scope 2 {\n-          debug err => _6;                 // in scope 2 at $DIR/simplify_try.rs:7:14: 7:15\n-          scope 3 {\n-              scope 7 {\n-                  debug t => _9;           // in scope 7 at $SRC_DIR/libcore/convert/mod.rs:LL:COL\n-              }\n-              scope 8 {\n-                  debug v => _8;           // in scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n-                  let mut _12: i32;        // in scope 8 at $DIR/simplify_try.rs:7:14: 7:15\n-              }\n-          }\n-      }\n-      scope 4 {\n-          debug val => _10;                // in scope 4 at $DIR/simplify_try.rs:7:13: 7:15\n-          scope 5 {\n-          }\n-      }\n-      scope 6 {\n--         debug self => _4;                // in scope 6 at $SRC_DIR/libcore/result.rs:LL:COL\n-+         debug self => _0;                // in scope 6 at $SRC_DIR/libcore/result.rs:LL:COL\n-      }\n-  \n-      bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/simplify_try.rs:7:9: 7:10\n--         StorageLive(_3);                 // scope 0 at $DIR/simplify_try.rs:7:13: 7:15\n--         StorageLive(_4);                 // scope 0 at $DIR/simplify_try.rs:7:13: 7:14\n--         _4 = _1;                         // scope 0 at $DIR/simplify_try.rs:7:13: 7:14\n--         _3 = move _4;                    // scope 6 at $SRC_DIR/libcore/result.rs:LL:COL\n--         StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n--         _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-+         nop;                             // scope 0 at $DIR/simplify_try.rs:7:13: 7:15\n-+         nop;                             // scope 0 at $DIR/simplify_try.rs:7:13: 7:14\n-+         _0 = _1;                         // scope 0 at $DIR/simplify_try.rs:7:13: 7:14\n-+         nop;                             // scope 6 at $SRC_DIR/libcore/result.rs:LL:COL\n-+         nop;                             // scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-+         _5 = discriminant(_0);           // scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-          goto -> bb1;                     // scope 0 at $DIR/simplify_try.rs:7:14: 7:15\n-      }\n-  \n-      bb1: {\n--         _0 = move _3;                    // scope 1 at $DIR/simplify_try.rs:8:5: 8:10\n--         StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:7:15: 7:16\n-+         nop;                             // scope 1 at $DIR/simplify_try.rs:8:5: 8:10\n-+         nop;                             // scope 0 at $DIR/simplify_try.rs:7:15: 7:16\n-          StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:9:1: 9:2\n-          goto -> bb2;                     // scope 0 at $DIR/simplify_try.rs:9:2: 9:2\n-      }\n-  \n-      bb2: {\n-          return;                          // scope 0 at $DIR/simplify_try.rs:9:2: 9:2\n-      }\n-  }\n-  "}, {"sha": "83b91309be308f006ca20b652329d53c99b792b4", "filename": "src/test/mir-opt/simplify_try.try_identity.DestinationPropagation.diff", "status": "removed", "additions": 0, "deletions": 106, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/024207ab43aceb49f2ca957509c503ccf12089d7/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/024207ab43aceb49f2ca957509c503ccf12089d7/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.DestinationPropagation.diff?ref=024207ab43aceb49f2ca957509c503ccf12089d7", "patch": "@@ -1,106 +0,0 @@\n-- // MIR for `try_identity` before DestinationPropagation\n-+ // MIR for `try_identity` after DestinationPropagation\n-  \n-  fn try_identity(_1: Result<u32, i32>) -> Result<u32, i32> {\n-      debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:+0:17: +0:18\n-      let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:+0:41: +0:57\n-      let _2: u32;                         // in scope 0 at $DIR/simplify_try.rs:+1:9: +1:10\n-      let mut _3: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:+1:19: +1:33\n-      let mut _4: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:+1:31: +1:32\n-      let mut _5: isize;                   // in scope 0 at $DIR/simplify_try.rs:+2:9: +2:15\n-      let _6: i32;                         // in scope 0 at $DIR/simplify_try.rs:+2:13: +2:14\n-      let mut _7: !;                       // in scope 0 at $DIR/simplify_try.rs:+2:19: +2:51\n-      let mut _8: i32;                     // in scope 0 at $DIR/simplify_try.rs:+2:37: +2:50\n-      let mut _9: i32;                     // in scope 0 at $DIR/simplify_try.rs:+2:48: +2:49\n-      let _10: u32;                        // in scope 0 at $DIR/simplify_try.rs:+3:12: +3:13\n-      let mut _11: u32;                    // in scope 0 at $DIR/simplify_try.rs:+5:8: +5:9\n-      scope 1 {\n--         debug y => _2;                   // in scope 1 at $DIR/simplify_try.rs:+1:9: +1:10\n-+         debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:+1:9: +1:10\n-      }\n-      scope 2 {\n-          debug e => _6;                   // in scope 2 at $DIR/simplify_try.rs:+2:13: +2:14\n-          scope 5 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify_try.rs:22:37: 22:50\n-              debug t => _9;               // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-          }\n-          scope 6 (inlined from_error::<u32, i32>) { // at $DIR/simplify_try.rs:22:26: 22:51\n-              debug e => _8;               // in scope 6 at $DIR/simplify_try.rs:12:21: 12:22\n-          }\n-      }\n-      scope 3 {\n--         debug v => _10;                  // in scope 3 at $DIR/simplify_try.rs:+3:12: +3:13\n-+         debug v => ((_0 as Ok).0: u32);  // in scope 3 at $DIR/simplify_try.rs:+3:12: +3:13\n-      }\n-      scope 4 (inlined into_result::<u32, i32>) { // at $DIR/simplify_try.rs:21:19: 21:33\n--         debug r => _4;                   // in scope 4 at $DIR/simplify_try.rs:8:22: 8:23\n-+         debug r => _3;                   // in scope 4 at $DIR/simplify_try.rs:8:22: 8:23\n-      }\n-  \n-      bb0: {\n--         StorageLive(_2);                 // scope 0 at $DIR/simplify_try.rs:+1:9: +1:10\n--         StorageLive(_3);                 // scope 0 at $DIR/simplify_try.rs:+1:19: +1:33\n--         StorageLive(_4);                 // scope 0 at $DIR/simplify_try.rs:+1:31: +1:32\n--         _4 = _1;                         // scope 0 at $DIR/simplify_try.rs:+1:31: +1:32\n--         _3 = move _4;                    // scope 4 at $DIR/simplify_try.rs:9:5: 9:6\n--         StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:+1:32: +1:33\n-+         nop;                             // scope 0 at $DIR/simplify_try.rs:+1:9: +1:10\n-+         nop;                             // scope 0 at $DIR/simplify_try.rs:+1:19: +1:33\n-+         nop;                             // scope 0 at $DIR/simplify_try.rs:+1:31: +1:32\n-+         _3 = _1;                         // scope 0 at $DIR/simplify_try.rs:+1:31: +1:32\n-+         nop;                             // scope 4 at $DIR/simplify_try.rs:9:5: 9:6\n-+         nop;                             // scope 0 at $DIR/simplify_try.rs:+1:32: +1:33\n-          _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:+1:19: +1:33\n-          switchInt(move _5) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify_try.rs:+1:13: +1:33\n-      }\n-  \n-      bb1: {\n--         StorageLive(_10);                // scope 0 at $DIR/simplify_try.rs:+3:12: +3:13\n--         _10 = ((_3 as Ok).0: u32);       // scope 0 at $DIR/simplify_try.rs:+3:12: +3:13\n--         _2 = _10;                        // scope 3 at $DIR/simplify_try.rs:+3:18: +3:19\n--         StorageDead(_10);                // scope 0 at $DIR/simplify_try.rs:+3:18: +3:19\n--         StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:+4:6: +4:7\n--         StorageLive(_11);                // scope 1 at $DIR/simplify_try.rs:+5:8: +5:9\n--         _11 = _2;                        // scope 1 at $DIR/simplify_try.rs:+5:8: +5:9\n-+         nop;                             // scope 0 at $DIR/simplify_try.rs:+3:12: +3:13\n-+         ((_0 as Ok).0: u32) = ((_3 as Ok).0: u32); // scope 0 at $DIR/simplify_try.rs:+3:12: +3:13\n-+         nop;                             // scope 3 at $DIR/simplify_try.rs:+3:18: +3:19\n-+         nop;                             // scope 0 at $DIR/simplify_try.rs:+3:18: +3:19\n-+         nop;                             // scope 0 at $DIR/simplify_try.rs:+4:6: +4:7\n-+         nop;                             // scope 1 at $DIR/simplify_try.rs:+5:8: +5:9\n-+         nop;                             // scope 1 at $DIR/simplify_try.rs:+5:8: +5:9\n-          Deinit(_0);                      // scope 1 at $DIR/simplify_try.rs:+5:5: +5:10\n--         ((_0 as Ok).0: u32) = move _11;  // scope 1 at $DIR/simplify_try.rs:+5:5: +5:10\n-+         nop;                             // scope 1 at $DIR/simplify_try.rs:+5:5: +5:10\n-          discriminant(_0) = 0;            // scope 1 at $DIR/simplify_try.rs:+5:5: +5:10\n--         StorageDead(_11);                // scope 1 at $DIR/simplify_try.rs:+5:9: +5:10\n--         StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:+6:1: +6:2\n-+         nop;                             // scope 1 at $DIR/simplify_try.rs:+5:9: +5:10\n-+         nop;                             // scope 0 at $DIR/simplify_try.rs:+6:1: +6:2\n-          return;                          // scope 0 at $DIR/simplify_try.rs:+6:2: +6:2\n-      }\n-  \n-      bb2: {\n-          unreachable;                     // scope 0 at $DIR/simplify_try.rs:+1:19: +1:33\n-      }\n-  \n-      bb3: {\n-          StorageLive(_6);                 // scope 0 at $DIR/simplify_try.rs:+2:13: +2:14\n-          nop;                             // scope 0 at $DIR/simplify_try.rs:+2:13: +2:14\n-          StorageLive(_8);                 // scope 2 at $DIR/simplify_try.rs:+2:37: +2:50\n-          StorageLive(_9);                 // scope 2 at $DIR/simplify_try.rs:+2:48: +2:49\n-          nop;                             // scope 2 at $DIR/simplify_try.rs:+2:48: +2:49\n-          nop;                             // scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-          StorageDead(_9);                 // scope 2 at $DIR/simplify_try.rs:+2:49: +2:50\n-          nop;                             // scope 6 at $DIR/simplify_try.rs:13:9: 13:10\n-          Deinit(_0);                      // scope 6 at $DIR/simplify_try.rs:13:5: 13:11\n-          discriminant(_0) = 1;            // scope 6 at $DIR/simplify_try.rs:13:5: 13:11\n-          StorageDead(_8);                 // scope 2 at $DIR/simplify_try.rs:+2:50: +2:51\n-          StorageDead(_6);                 // scope 0 at $DIR/simplify_try.rs:+2:50: +2:51\n--         StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:+4:6: +4:7\n--         StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:+6:1: +6:2\n-+         nop;                             // scope 0 at $DIR/simplify_try.rs:+4:6: +4:7\n-+         nop;                             // scope 0 at $DIR/simplify_try.rs:+6:1: +6:2\n-          return;                          // scope 0 at $DIR/simplify_try.rs:+6:2: +6:2\n-      }\n-  }\n-  "}, {"sha": "e025ae7c55111e4b3b7a841a1e277ed502b4b7c4", "filename": "src/test/mir-opt/simplify_try.try_identity.SimplifyArmIdentity.diff", "status": "removed", "additions": 0, "deletions": 85, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/024207ab43aceb49f2ca957509c503ccf12089d7/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/024207ab43aceb49f2ca957509c503ccf12089d7/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyArmIdentity.diff?ref=024207ab43aceb49f2ca957509c503ccf12089d7", "patch": "@@ -1,85 +0,0 @@\n-- // MIR for `try_identity` before SimplifyArmIdentity\n-+ // MIR for `try_identity` after SimplifyArmIdentity\n-  \n-  fn try_identity(_1: Result<u32, i32>) -> Result<u32, i32> {\n-      debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:+0:17: +0:18\n-      let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:+0:41: +0:57\n-      let _2: u32;                         // in scope 0 at $DIR/simplify_try.rs:+1:9: +1:10\n-      let mut _3: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:+1:19: +1:33\n-      let mut _4: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:+1:31: +1:32\n-      let mut _5: isize;                   // in scope 0 at $DIR/simplify_try.rs:+2:9: +2:15\n-      let _6: i32;                         // in scope 0 at $DIR/simplify_try.rs:+2:13: +2:14\n-      let mut _7: !;                       // in scope 0 at $DIR/simplify_try.rs:+2:19: +2:51\n-      let mut _8: i32;                     // in scope 0 at $DIR/simplify_try.rs:+2:37: +2:50\n-      let mut _9: i32;                     // in scope 0 at $DIR/simplify_try.rs:+2:48: +2:49\n-      let _10: u32;                        // in scope 0 at $DIR/simplify_try.rs:+3:12: +3:13\n-      let mut _11: u32;                    // in scope 0 at $DIR/simplify_try.rs:+5:8: +5:9\n-      scope 1 {\n-          debug y => _2;                   // in scope 1 at $DIR/simplify_try.rs:+1:9: +1:10\n-      }\n-      scope 2 {\n-          debug e => _6;                   // in scope 2 at $DIR/simplify_try.rs:+2:13: +2:14\n-          scope 5 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify_try.rs:22:37: 22:50\n-              debug t => _9;               // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-          }\n-          scope 6 (inlined from_error::<u32, i32>) { // at $DIR/simplify_try.rs:22:26: 22:51\n-              debug e => _8;               // in scope 6 at $DIR/simplify_try.rs:12:21: 12:22\n-          }\n-      }\n-      scope 3 {\n-          debug v => _10;                  // in scope 3 at $DIR/simplify_try.rs:+3:12: +3:13\n-      }\n-      scope 4 (inlined into_result::<u32, i32>) { // at $DIR/simplify_try.rs:21:19: 21:33\n-          debug r => _4;                   // in scope 4 at $DIR/simplify_try.rs:8:22: 8:23\n-      }\n-  \n-      bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/simplify_try.rs:+1:9: +1:10\n-          StorageLive(_3);                 // scope 0 at $DIR/simplify_try.rs:+1:19: +1:33\n-          StorageLive(_4);                 // scope 0 at $DIR/simplify_try.rs:+1:31: +1:32\n-          _4 = _1;                         // scope 0 at $DIR/simplify_try.rs:+1:31: +1:32\n-          _3 = move _4;                    // scope 4 at $DIR/simplify_try.rs:9:5: 9:6\n-          StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:+1:32: +1:33\n-          _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:+1:19: +1:33\n-          switchInt(move _5) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify_try.rs:+1:13: +1:33\n-      }\n-  \n-      bb1: {\n-          StorageLive(_10);                // scope 0 at $DIR/simplify_try.rs:+3:12: +3:13\n-          _10 = ((_3 as Ok).0: u32);       // scope 0 at $DIR/simplify_try.rs:+3:12: +3:13\n-          _2 = _10;                        // scope 3 at $DIR/simplify_try.rs:+3:18: +3:19\n-          StorageDead(_10);                // scope 0 at $DIR/simplify_try.rs:+3:18: +3:19\n-          StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:+4:6: +4:7\n-          StorageLive(_11);                // scope 1 at $DIR/simplify_try.rs:+5:8: +5:9\n-          _11 = _2;                        // scope 1 at $DIR/simplify_try.rs:+5:8: +5:9\n-          Deinit(_0);                      // scope 1 at $DIR/simplify_try.rs:+5:5: +5:10\n-          ((_0 as Ok).0: u32) = move _11;  // scope 1 at $DIR/simplify_try.rs:+5:5: +5:10\n-          discriminant(_0) = 0;            // scope 1 at $DIR/simplify_try.rs:+5:5: +5:10\n-          StorageDead(_11);                // scope 1 at $DIR/simplify_try.rs:+5:9: +5:10\n-          StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:+6:1: +6:2\n-          return;                          // scope 0 at $DIR/simplify_try.rs:+6:2: +6:2\n-      }\n-  \n-      bb2: {\n-          unreachable;                     // scope 0 at $DIR/simplify_try.rs:+1:19: +1:33\n-      }\n-  \n-      bb3: {\n-          StorageLive(_6);                 // scope 0 at $DIR/simplify_try.rs:+2:13: +2:14\n-          _6 = ((_3 as Err).0: i32);       // scope 0 at $DIR/simplify_try.rs:+2:13: +2:14\n-          StorageLive(_8);                 // scope 2 at $DIR/simplify_try.rs:+2:37: +2:50\n-          StorageLive(_9);                 // scope 2 at $DIR/simplify_try.rs:+2:48: +2:49\n-          _9 = _6;                         // scope 2 at $DIR/simplify_try.rs:+2:48: +2:49\n-          _8 = move _9;                    // scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-          StorageDead(_9);                 // scope 2 at $DIR/simplify_try.rs:+2:49: +2:50\n-          ((_0 as Err).0: i32) = move _8;  // scope 6 at $DIR/simplify_try.rs:13:9: 13:10\n-          Deinit(_0);                      // scope 6 at $DIR/simplify_try.rs:13:5: 13:11\n-          discriminant(_0) = 1;            // scope 6 at $DIR/simplify_try.rs:13:5: 13:11\n-          StorageDead(_8);                 // scope 2 at $DIR/simplify_try.rs:+2:50: +2:51\n-          StorageDead(_6);                 // scope 0 at $DIR/simplify_try.rs:+2:50: +2:51\n-          StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:+4:6: +4:7\n-          StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:+6:1: +6:2\n-          return;                          // scope 0 at $DIR/simplify_try.rs:+6:2: +6:2\n-      }\n-  }\n-  "}, {"sha": "eb5af2227ec9be4f801e3d3ea609191fd53830a0", "filename": "src/test/mir-opt/simplify_try.try_identity.SimplifyBranchSame.after.mir", "status": "removed", "additions": 0, "deletions": 83, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/024207ab43aceb49f2ca957509c503ccf12089d7/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyBranchSame.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/024207ab43aceb49f2ca957509c503ccf12089d7/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyBranchSame.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyBranchSame.after.mir?ref=024207ab43aceb49f2ca957509c503ccf12089d7", "patch": "@@ -1,83 +0,0 @@\n-// MIR for `try_identity` after SimplifyBranchSame\n-\n-fn try_identity(_1: Result<u32, i32>) -> Result<u32, i32> {\n-    debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:+0:17: +0:18\n-    let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:+0:41: +0:57\n-    let _2: u32;                         // in scope 0 at $DIR/simplify_try.rs:+1:9: +1:10\n-    let mut _3: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:+1:19: +1:33\n-    let mut _4: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:+1:31: +1:32\n-    let mut _5: isize;                   // in scope 0 at $DIR/simplify_try.rs:+2:9: +2:15\n-    let _6: i32;                         // in scope 0 at $DIR/simplify_try.rs:+2:13: +2:14\n-    let mut _7: !;                       // in scope 0 at $DIR/simplify_try.rs:+2:19: +2:51\n-    let mut _8: i32;                     // in scope 0 at $DIR/simplify_try.rs:+2:37: +2:50\n-    let mut _9: i32;                     // in scope 0 at $DIR/simplify_try.rs:+2:48: +2:49\n-    let _10: u32;                        // in scope 0 at $DIR/simplify_try.rs:+3:12: +3:13\n-    let mut _11: u32;                    // in scope 0 at $DIR/simplify_try.rs:+5:8: +5:9\n-    scope 1 {\n-        debug y => _2;                   // in scope 1 at $DIR/simplify_try.rs:+1:9: +1:10\n-    }\n-    scope 2 {\n-        debug e => _6;                   // in scope 2 at $DIR/simplify_try.rs:+2:13: +2:14\n-        scope 5 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify_try.rs:22:37: 22:50\n-            debug t => _9;               // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-        }\n-        scope 6 (inlined from_error::<u32, i32>) { // at $DIR/simplify_try.rs:22:26: 22:51\n-            debug e => _8;               // in scope 6 at $DIR/simplify_try.rs:12:21: 12:22\n-        }\n-    }\n-    scope 3 {\n-        debug v => _10;                  // in scope 3 at $DIR/simplify_try.rs:+3:12: +3:13\n-    }\n-    scope 4 (inlined into_result::<u32, i32>) { // at $DIR/simplify_try.rs:21:19: 21:33\n-        debug r => _4;                   // in scope 4 at $DIR/simplify_try.rs:8:22: 8:23\n-    }\n-\n-    bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/simplify_try.rs:+1:9: +1:10\n-        StorageLive(_3);                 // scope 0 at $DIR/simplify_try.rs:+1:19: +1:33\n-        StorageLive(_4);                 // scope 0 at $DIR/simplify_try.rs:+1:31: +1:32\n-        _4 = _1;                         // scope 0 at $DIR/simplify_try.rs:+1:31: +1:32\n-        _3 = move _4;                    // scope 4 at $DIR/simplify_try.rs:9:5: 9:6\n-        StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:+1:32: +1:33\n-        _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:+1:19: +1:33\n-        switchInt(move _5) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify_try.rs:+1:13: +1:33\n-    }\n-\n-    bb1: {\n-        StorageLive(_10);                // scope 0 at $DIR/simplify_try.rs:+3:12: +3:13\n-        _10 = ((_3 as Ok).0: u32);       // scope 0 at $DIR/simplify_try.rs:+3:12: +3:13\n-        _2 = _10;                        // scope 3 at $DIR/simplify_try.rs:+3:18: +3:19\n-        StorageDead(_10);                // scope 0 at $DIR/simplify_try.rs:+3:18: +3:19\n-        StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:+4:6: +4:7\n-        StorageLive(_11);                // scope 1 at $DIR/simplify_try.rs:+5:8: +5:9\n-        _11 = _2;                        // scope 1 at $DIR/simplify_try.rs:+5:8: +5:9\n-        Deinit(_0);                      // scope 1 at $DIR/simplify_try.rs:+5:5: +5:10\n-        ((_0 as Ok).0: u32) = move _11;  // scope 1 at $DIR/simplify_try.rs:+5:5: +5:10\n-        discriminant(_0) = 0;            // scope 1 at $DIR/simplify_try.rs:+5:5: +5:10\n-        StorageDead(_11);                // scope 1 at $DIR/simplify_try.rs:+5:9: +5:10\n-        StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:+6:1: +6:2\n-        return;                          // scope 0 at $DIR/simplify_try.rs:+6:2: +6:2\n-    }\n-\n-    bb2: {\n-        unreachable;                     // scope 0 at $DIR/simplify_try.rs:+1:19: +1:33\n-    }\n-\n-    bb3: {\n-        StorageLive(_6);                 // scope 0 at $DIR/simplify_try.rs:+2:13: +2:14\n-        _6 = ((_3 as Err).0: i32);       // scope 0 at $DIR/simplify_try.rs:+2:13: +2:14\n-        StorageLive(_8);                 // scope 2 at $DIR/simplify_try.rs:+2:37: +2:50\n-        StorageLive(_9);                 // scope 2 at $DIR/simplify_try.rs:+2:48: +2:49\n-        _9 = _6;                         // scope 2 at $DIR/simplify_try.rs:+2:48: +2:49\n-        _8 = move _9;                    // scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-        StorageDead(_9);                 // scope 2 at $DIR/simplify_try.rs:+2:49: +2:50\n-        ((_0 as Err).0: i32) = move _8;  // scope 6 at $DIR/simplify_try.rs:13:9: 13:10\n-        Deinit(_0);                      // scope 6 at $DIR/simplify_try.rs:13:5: 13:11\n-        discriminant(_0) = 1;            // scope 6 at $DIR/simplify_try.rs:13:5: 13:11\n-        StorageDead(_8);                 // scope 2 at $DIR/simplify_try.rs:+2:50: +2:51\n-        StorageDead(_6);                 // scope 0 at $DIR/simplify_try.rs:+2:50: +2:51\n-        StorageDead(_3);                 // scope 0 at $DIR/simplify_try.rs:+4:6: +4:7\n-        StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:+6:1: +6:2\n-        return;                          // scope 0 at $DIR/simplify_try.rs:+6:2: +6:2\n-    }\n-}"}, {"sha": "1efa8a67e5cd1a080a23910182410d1dff937480", "filename": "src/test/mir-opt/simplify_try.try_identity.SimplifyLocals.after.mir", "status": "removed", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/024207ab43aceb49f2ca957509c503ccf12089d7/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyLocals.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/024207ab43aceb49f2ca957509c503ccf12089d7/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyLocals.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyLocals.after.mir?ref=024207ab43aceb49f2ca957509c503ccf12089d7", "patch": "@@ -1,58 +0,0 @@\n-// MIR for `try_identity` after SimplifyLocals\n-\n-fn try_identity(_1: Result<u32, i32>) -> Result<u32, i32> {\n-    debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:+0:17: +0:18\n-    let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:+0:41: +0:57\n-    let mut _2: std::result::Result<u32, i32>; // in scope 0 at $DIR/simplify_try.rs:+1:19: +1:33\n-    let mut _3: isize;                   // in scope 0 at $DIR/simplify_try.rs:+2:9: +2:15\n-    let _4: i32;                         // in scope 0 at $DIR/simplify_try.rs:+2:13: +2:14\n-    let mut _5: i32;                     // in scope 0 at $DIR/simplify_try.rs:+2:37: +2:50\n-    let mut _6: i32;                     // in scope 0 at $DIR/simplify_try.rs:+2:48: +2:49\n-    scope 1 {\n-        debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:+1:9: +1:10\n-    }\n-    scope 2 {\n-        debug e => _4;                   // in scope 2 at $DIR/simplify_try.rs:+2:13: +2:14\n-        scope 5 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify_try.rs:22:37: 22:50\n-            debug t => _6;               // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-        }\n-        scope 6 (inlined from_error::<u32, i32>) { // at $DIR/simplify_try.rs:22:26: 22:51\n-            debug e => _5;               // in scope 6 at $DIR/simplify_try.rs:12:21: 12:22\n-        }\n-    }\n-    scope 3 {\n-        debug v => ((_0 as Ok).0: u32);  // in scope 3 at $DIR/simplify_try.rs:+3:12: +3:13\n-    }\n-    scope 4 (inlined into_result::<u32, i32>) { // at $DIR/simplify_try.rs:21:19: 21:33\n-        debug r => _2;                   // in scope 4 at $DIR/simplify_try.rs:8:22: 8:23\n-    }\n-\n-    bb0: {\n-        _2 = _1;                         // scope 0 at $DIR/simplify_try.rs:+1:31: +1:32\n-        _3 = discriminant(_2);           // scope 0 at $DIR/simplify_try.rs:+1:19: +1:33\n-        switchInt(move _3) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify_try.rs:+1:13: +1:33\n-    }\n-\n-    bb1: {\n-        ((_0 as Ok).0: u32) = ((_2 as Ok).0: u32); // scope 0 at $DIR/simplify_try.rs:+3:12: +3:13\n-        Deinit(_0);                      // scope 1 at $DIR/simplify_try.rs:+5:5: +5:10\n-        discriminant(_0) = 0;            // scope 1 at $DIR/simplify_try.rs:+5:5: +5:10\n-        return;                          // scope 0 at $DIR/simplify_try.rs:+6:2: +6:2\n-    }\n-\n-    bb2: {\n-        unreachable;                     // scope 0 at $DIR/simplify_try.rs:+1:19: +1:33\n-    }\n-\n-    bb3: {\n-        StorageLive(_4);                 // scope 0 at $DIR/simplify_try.rs:+2:13: +2:14\n-        StorageLive(_5);                 // scope 2 at $DIR/simplify_try.rs:+2:37: +2:50\n-        StorageLive(_6);                 // scope 2 at $DIR/simplify_try.rs:+2:48: +2:49\n-        StorageDead(_6);                 // scope 2 at $DIR/simplify_try.rs:+2:49: +2:50\n-        Deinit(_0);                      // scope 6 at $DIR/simplify_try.rs:13:5: 13:11\n-        discriminant(_0) = 1;            // scope 6 at $DIR/simplify_try.rs:13:5: 13:11\n-        StorageDead(_5);                 // scope 2 at $DIR/simplify_try.rs:+2:50: +2:51\n-        StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:+2:50: +2:51\n-        return;                          // scope 0 at $DIR/simplify_try.rs:+6:2: +6:2\n-    }\n-}"}, {"sha": "1911f0f9c941c8ff9d855ef58d1ad713e4b7d1bd", "filename": "src/tools/compiletest/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/17395b45b102b365e6fb19796223d190b5f2bebf/src%2Ftools%2Fcompiletest%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/17395b45b102b365e6fb19796223d190b5f2bebf/src%2Ftools%2Fcompiletest%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2FCargo.toml?ref=17395b45b102b365e6fb19796223d190b5f2bebf", "patch": "@@ -8,6 +8,7 @@ colored = \"2\"\n diff = \"0.1.10\"\n unified-diff = \"0.2.1\"\n getopts = \"0.2\"\n+miropt-test-tools = { path = \"../miropt-test-tools\" }\n tracing = \"0.1\"\n tracing-subscriber = { version = \"0.3.3\", default-features = false, features = [\"fmt\", \"env-filter\", \"smallvec\", \"parking_lot\", \"ansi\"] }\n regex = \"1.0\""}, {"sha": "c37f81d17071dd98122df3d7b11841de79124547", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 38, "deletions": 92, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/17395b45b102b365e6fb19796223d190b5f2bebf/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17395b45b102b365e6fb19796223d190b5f2bebf/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=17395b45b102b365e6fb19796223d190b5f2bebf", "patch": "@@ -3399,103 +3399,49 @@ impl<'test> TestCx<'test> {\n             }\n         }\n \n-        for l in test_file_contents.lines() {\n-            if l.starts_with(\"// EMIT_MIR \") {\n-                let test_name = l.trim_start_matches(\"// EMIT_MIR \").trim();\n-                let mut test_names = test_name.split(' ');\n-                // sometimes we specify two files so that we get a diff between the two files\n-                let test_name = test_names.next().unwrap();\n-                let mut expected_file;\n-                let from_file;\n-                let to_file;\n-\n-                if test_name.ends_with(\".diff\") {\n-                    let trimmed = test_name.trim_end_matches(\".diff\");\n-                    let test_against = format!(\"{}.after.mir\", trimmed);\n-                    from_file = format!(\"{}.before.mir\", trimmed);\n-                    expected_file = format!(\"{}{}.diff\", trimmed, bit_width);\n-                    assert!(\n-                        test_names.next().is_none(),\n-                        \"two mir pass names specified for MIR diff\"\n-                    );\n-                    to_file = Some(test_against);\n-                } else if let Some(first_pass) = test_names.next() {\n-                    let second_pass = test_names.next().unwrap();\n-                    assert!(\n-                        test_names.next().is_none(),\n-                        \"three mir pass names specified for MIR diff\"\n-                    );\n-                    expected_file =\n-                        format!(\"{}{}.{}-{}.diff\", test_name, bit_width, first_pass, second_pass);\n-                    let second_file = format!(\"{}.{}.mir\", test_name, second_pass);\n-                    from_file = format!(\"{}.{}.mir\", test_name, first_pass);\n-                    to_file = Some(second_file);\n-                } else {\n-                    let ext_re = Regex::new(r#\"(\\.(mir|dot|html))$\"#).unwrap();\n-                    let cap = ext_re\n-                        .captures_iter(test_name)\n-                        .next()\n-                        .expect(\"test_name has an invalid extension\");\n-                    let extension = cap.get(1).unwrap().as_str();\n-                    expected_file = format!(\n-                        \"{}{}{}\",\n-                        test_name.trim_end_matches(extension),\n-                        bit_width,\n-                        extension,\n-                    );\n-                    from_file = test_name.to_string();\n-                    assert!(\n-                        test_names.next().is_none(),\n-                        \"two mir pass names specified for MIR dump\"\n+        let files = miropt_test_tools::files_for_miropt_test(\n+            &self.testpaths.file,\n+            self.config.get_pointer_width(),\n+        );\n+\n+        for miropt_test_tools::MiroptTestFiles { from_file, to_file, expected_file } in files {\n+            let dumped_string = if let Some(after) = to_file {\n+                self.diff_mir_files(from_file.into(), after.into())\n+            } else {\n+                let mut output_file = PathBuf::new();\n+                output_file.push(self.get_mir_dump_dir());\n+                output_file.push(&from_file);\n+                debug!(\n+                    \"comparing the contents of: {} with {}\",\n+                    output_file.display(),\n+                    expected_file.display()\n+                );\n+                if !output_file.exists() {\n+                    panic!(\n+                        \"Output file `{}` from test does not exist, available files are in `{}`\",\n+                        output_file.display(),\n+                        output_file.parent().unwrap().display()\n                     );\n-                    to_file = None;\n-                };\n-                if !expected_file.starts_with(&test_crate) {\n-                    expected_file = format!(\"{}.{}\", test_crate, expected_file);\n                 }\n-                let expected_file = test_dir.join(expected_file);\n+                self.check_mir_test_timestamp(&from_file, &output_file);\n+                let dumped_string = fs::read_to_string(&output_file).unwrap();\n+                self.normalize_output(&dumped_string, &[])\n+            };\n \n-                let dumped_string = if let Some(after) = to_file {\n-                    self.diff_mir_files(from_file.into(), after.into())\n-                } else {\n-                    let mut output_file = PathBuf::new();\n-                    output_file.push(self.get_mir_dump_dir());\n-                    output_file.push(&from_file);\n-                    debug!(\n-                        \"comparing the contents of: {} with {}\",\n-                        output_file.display(),\n+            if self.config.bless {\n+                let _ = std::fs::remove_file(&expected_file);\n+                std::fs::write(expected_file, dumped_string.as_bytes()).unwrap();\n+            } else {\n+                if !expected_file.exists() {\n+                    panic!(\"Output file `{}` from test does not exist\", expected_file.display());\n+                }\n+                let expected_string = fs::read_to_string(&expected_file).unwrap();\n+                if dumped_string != expected_string {\n+                    print!(\"{}\", write_diff(&expected_string, &dumped_string, 3));\n+                    panic!(\n+                        \"Actual MIR output differs from expected MIR output {}\",\n                         expected_file.display()\n                     );\n-                    if !output_file.exists() {\n-                        panic!(\n-                            \"Output file `{}` from test does not exist, available files are in `{}`\",\n-                            output_file.display(),\n-                            output_file.parent().unwrap().display()\n-                        );\n-                    }\n-                    self.check_mir_test_timestamp(&from_file, &output_file);\n-                    let dumped_string = fs::read_to_string(&output_file).unwrap();\n-                    self.normalize_output(&dumped_string, &[])\n-                };\n-\n-                if self.config.bless {\n-                    let _ = std::fs::remove_file(&expected_file);\n-                    std::fs::write(expected_file, dumped_string.as_bytes()).unwrap();\n-                } else {\n-                    if !expected_file.exists() {\n-                        panic!(\n-                            \"Output file `{}` from test does not exist\",\n-                            expected_file.display()\n-                        );\n-                    }\n-                    let expected_string = fs::read_to_string(&expected_file).unwrap();\n-                    if dumped_string != expected_string {\n-                        print!(\"{}\", write_diff(&expected_string, &dumped_string, 3));\n-                        panic!(\n-                            \"Actual MIR output differs from expected MIR output {}\",\n-                            expected_file.display()\n-                        );\n-                    }\n                 }\n             }\n         }"}, {"sha": "8589a44cf1bab513f93dcd2b97d01f086bf0b8c7", "filename": "src/tools/miropt-test-tools/Cargo.toml", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/17395b45b102b365e6fb19796223d190b5f2bebf/src%2Ftools%2Fmiropt-test-tools%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/17395b45b102b365e6fb19796223d190b5f2bebf/src%2Ftools%2Fmiropt-test-tools%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiropt-test-tools%2FCargo.toml?ref=17395b45b102b365e6fb19796223d190b5f2bebf", "patch": "@@ -0,0 +1,7 @@\n+[package]\n+name = \"miropt-test-tools\"\n+version = \"0.1.0\"\n+edition = \"2021\"\n+\n+[dependencies]\n+regex = \"1.0\""}, {"sha": "96819d3547b29987b0ce6aae8e5330e8887fedd0", "filename": "src/tools/miropt-test-tools/src/lib.rs", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/17395b45b102b365e6fb19796223d190b5f2bebf/src%2Ftools%2Fmiropt-test-tools%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17395b45b102b365e6fb19796223d190b5f2bebf/src%2Ftools%2Fmiropt-test-tools%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiropt-test-tools%2Fsrc%2Flib.rs?ref=17395b45b102b365e6fb19796223d190b5f2bebf", "patch": "@@ -0,0 +1,70 @@\n+use std::fs;\n+\n+pub struct MiroptTestFiles {\n+    pub expected_file: std::path::PathBuf,\n+    pub from_file: String,\n+    pub to_file: Option<String>,\n+}\n+\n+pub fn files_for_miropt_test(testfile: &std::path::Path, bit_width: u32) -> Vec<MiroptTestFiles> {\n+    let mut out = Vec::new();\n+    let test_file_contents = fs::read_to_string(&testfile).unwrap();\n+\n+    let test_dir = testfile.parent().unwrap();\n+    let test_crate = testfile.file_stem().unwrap().to_str().unwrap().replace(\"-\", \"_\");\n+\n+    let bit_width = if test_file_contents.lines().any(|l| l == \"// EMIT_MIR_FOR_EACH_BIT_WIDTH\") {\n+        format!(\".{}bit\", bit_width)\n+    } else {\n+        String::new()\n+    };\n+\n+    for l in test_file_contents.lines() {\n+        if l.starts_with(\"// EMIT_MIR \") {\n+            let test_name = l.trim_start_matches(\"// EMIT_MIR \").trim();\n+            let mut test_names = test_name.split(' ');\n+            // sometimes we specify two files so that we get a diff between the two files\n+            let test_name = test_names.next().unwrap();\n+            let mut expected_file;\n+            let from_file;\n+            let to_file;\n+\n+            if test_name.ends_with(\".diff\") {\n+                let trimmed = test_name.trim_end_matches(\".diff\");\n+                let test_against = format!(\"{}.after.mir\", trimmed);\n+                from_file = format!(\"{}.before.mir\", trimmed);\n+                expected_file = format!(\"{}{}.diff\", trimmed, bit_width);\n+                assert!(test_names.next().is_none(), \"two mir pass names specified for MIR diff\");\n+                to_file = Some(test_against);\n+            } else if let Some(first_pass) = test_names.next() {\n+                let second_pass = test_names.next().unwrap();\n+                assert!(test_names.next().is_none(), \"three mir pass names specified for MIR diff\");\n+                expected_file =\n+                    format!(\"{}{}.{}-{}.diff\", test_name, bit_width, first_pass, second_pass);\n+                let second_file = format!(\"{}.{}.mir\", test_name, second_pass);\n+                from_file = format!(\"{}.{}.mir\", test_name, first_pass);\n+                to_file = Some(second_file);\n+            } else {\n+                let ext_re = regex::Regex::new(r#\"(\\.(mir|dot|html))$\"#).unwrap();\n+                let cap = ext_re\n+                    .captures_iter(test_name)\n+                    .next()\n+                    .expect(\"test_name has an invalid extension\");\n+                let extension = cap.get(1).unwrap().as_str();\n+                expected_file =\n+                    format!(\"{}{}{}\", test_name.trim_end_matches(extension), bit_width, extension,);\n+                from_file = test_name.to_string();\n+                assert!(test_names.next().is_none(), \"two mir pass names specified for MIR dump\");\n+                to_file = None;\n+            };\n+            if !expected_file.starts_with(&test_crate) {\n+                expected_file = format!(\"{}.{}\", test_crate, expected_file);\n+            }\n+            let expected_file = test_dir.join(expected_file);\n+\n+            out.push(MiroptTestFiles { expected_file, from_file, to_file });\n+        }\n+    }\n+\n+    out\n+}"}, {"sha": "774c97b7777d2c7467b2bf9aac4b9295346aecd9", "filename": "src/tools/tidy/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/17395b45b102b365e6fb19796223d190b5f2bebf/src%2Ftools%2Ftidy%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/17395b45b102b365e6fb19796223d190b5f2bebf/src%2Ftools%2Ftidy%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2FCargo.toml?ref=17395b45b102b365e6fb19796223d190b5f2bebf", "patch": "@@ -7,6 +7,7 @@ autobins = false\n [dependencies]\n cargo_metadata = \"0.14\"\n regex = \"1\"\n+miropt-test-tools = { path = \"../miropt-test-tools\" }\n lazy_static = \"1\"\n walkdir = \"2\"\n "}, {"sha": "698e4850bea9bdf1e8d94875c2ffde8f8e358696", "filename": "src/tools/tidy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/17395b45b102b365e6fb19796223d190b5f2bebf/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17395b45b102b365e6fb19796223d190b5f2bebf/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs?ref=17395b45b102b365e6fb19796223d190b5f2bebf", "patch": "@@ -47,6 +47,7 @@ pub mod error_codes_check;\n pub mod errors;\n pub mod extdeps;\n pub mod features;\n+pub mod mir_opt_tests;\n pub mod pal;\n pub mod primitive_docs;\n pub mod style;"}, {"sha": "ee883777c31d91d4c59ab33bfd37f9708957bd2e", "filename": "src/tools/tidy/src/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/17395b45b102b365e6fb19796223d190b5f2bebf/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17395b45b102b365e6fb19796223d190b5f2bebf/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs?ref=17395b45b102b365e6fb19796223d190b5f2bebf", "patch": "@@ -64,6 +64,7 @@ fn main() {\n         // Checks over tests.\n         check!(debug_artifacts, &src_path);\n         check!(ui_tests, &src_path);\n+        check!(mir_opt_tests, &src_path);\n \n         // Checks that only make sense for the compiler.\n         check!(errors, &compiler_path);"}, {"sha": "f9e8b55497b589ad6b44f4f286f299022c1fc387", "filename": "src/tools/tidy/src/mir_opt_tests.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/17395b45b102b365e6fb19796223d190b5f2bebf/src%2Ftools%2Ftidy%2Fsrc%2Fmir_opt_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17395b45b102b365e6fb19796223d190b5f2bebf/src%2Ftools%2Ftidy%2Fsrc%2Fmir_opt_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmir_opt_tests.rs?ref=17395b45b102b365e6fb19796223d190b5f2bebf", "patch": "@@ -0,0 +1,37 @@\n+//! Tidy check to ensure that mir opt directories do not have stale files.\n+\n+use std::collections::HashSet;\n+use std::path::{Path, PathBuf};\n+\n+pub fn check(path: &Path, bad: &mut bool) {\n+    let mut rs_files = Vec::<PathBuf>::new();\n+    let mut output_files = HashSet::<PathBuf>::new();\n+    let files = walkdir::WalkDir::new(&path.join(\"test/mir-opt\")).into_iter();\n+\n+    for file in files.filter_map(Result::ok).filter(|e| e.file_type().is_file()) {\n+        let filepath = file.path();\n+        if filepath.extension() == Some(\"rs\".as_ref()) {\n+            rs_files.push(filepath.to_owned());\n+        } else {\n+            output_files.insert(filepath.to_owned());\n+        }\n+    }\n+\n+    for file in rs_files {\n+        for bw in [32, 64] {\n+            for output_file in miropt_test_tools::files_for_miropt_test(&file, bw) {\n+                output_files.remove(&output_file.expected_file);\n+            }\n+        }\n+    }\n+\n+    for extra in output_files {\n+        if extra.file_name() != Some(\"README.md\".as_ref()) {\n+            tidy_error!(\n+                bad,\n+                \"the following output file is not associated with any mir-opt test, you can remove it: {}\",\n+                extra.display()\n+            );\n+        }\n+    }\n+}"}]}