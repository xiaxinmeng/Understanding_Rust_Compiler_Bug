{"sha": "1b6b20ac173eeb9ee50077a3e7614b37299cdbb7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiNmIyMGFjMTczZWViOWVlNTAwNzdhM2U3NjE0YjM3Mjk5Y2RiYjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-02-02T05:10:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-02-02T05:10:40Z"}, "message": "Auto merge of #38932 - petrochenkov:privctor, r=jseyfried\n\nPrivatize constructors of tuple structs with private fields\n\nThis PR implements the strictest version of such \"privatization\" - it just sets visibilities for struct constructors, this affects everything including imports.\n```\nvisibility(struct_ctor) = min(visibility(struct), visibility(field_1), ..., visibility(field_N))\n```\nNeeds crater run before proceeding.\n\nResolves https://github.com/rust-lang/rfcs/issues/902\n\nr? @nikomatsakis", "tree": {"sha": "d5b97e4dc9ef2a5a9485b18d1aaa664320568bca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5b97e4dc9ef2a5a9485b18d1aaa664320568bca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b6b20ac173eeb9ee50077a3e7614b37299cdbb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b6b20ac173eeb9ee50077a3e7614b37299cdbb7", "html_url": "https://github.com/rust-lang/rust/commit/1b6b20ac173eeb9ee50077a3e7614b37299cdbb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b6b20ac173eeb9ee50077a3e7614b37299cdbb7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a6f7e41fc89ff1070f9d57cff526d9989481e29", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a6f7e41fc89ff1070f9d57cff526d9989481e29", "html_url": "https://github.com/rust-lang/rust/commit/2a6f7e41fc89ff1070f9d57cff526d9989481e29"}, {"sha": "d38a8ad488047b8acdeed44bb7c67dc776324624", "url": "https://api.github.com/repos/rust-lang/rust/commits/d38a8ad488047b8acdeed44bb7c67dc776324624", "html_url": "https://github.com/rust-lang/rust/commit/d38a8ad488047b8acdeed44bb7c67dc776324624"}], "stats": {"total": 465, "additions": 295, "deletions": 170}, "files": [{"sha": "e1605959922c0530e64e1a2b1ab299282afc6639", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1b6b20ac173eeb9ee50077a3e7614b37299cdbb7/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6b20ac173eeb9ee50077a3e7614b37299cdbb7/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=1b6b20ac173eeb9ee50077a3e7614b37299cdbb7", "patch": "@@ -223,6 +223,12 @@ declare_lint! {\n     \"detects names that resolve to ambiguous glob imports with RFC 1560\"\n }\n \n+declare_lint! {\n+    pub LEGACY_CONSTRUCTOR_VISIBILITY,\n+    Deny,\n+    \"detects use of struct constructors that would be invisible with new visibility rules\"\n+}\n+\n declare_lint! {\n     pub DEPRECATED,\n     Warn,\n@@ -271,6 +277,7 @@ impl LintPass for HardwiredLints {\n             EXTRA_REQUIREMENT_IN_IMPL,\n             LEGACY_DIRECTORY_OWNERSHIP,\n             LEGACY_IMPORTS,\n+            LEGACY_CONSTRUCTOR_VISIBILITY,\n             DEPRECATED\n         )\n     }"}, {"sha": "18067cb86739b51cd0787c63973d8455cc183d92", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b6b20ac173eeb9ee50077a3e7614b37299cdbb7/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6b20ac173eeb9ee50077a3e7614b37299cdbb7/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=1b6b20ac173eeb9ee50077a3e7614b37299cdbb7", "patch": "@@ -240,6 +240,10 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             id: LintId::of(LEGACY_IMPORTS),\n             reference: \"issue #38260 <https://github.com/rust-lang/rust/issues/38260>\",\n         },\n+        FutureIncompatibleInfo {\n+            id: LintId::of(LEGACY_CONSTRUCTOR_VISIBILITY),\n+            reference: \"issue #39207 <https://github.com/rust-lang/rust/issues/39207>\",\n+        },\n         ]);\n \n     // Register renamed and removed lints"}, {"sha": "b9c2f0622b6988e70ff1fc5bd0c121948bd3352d", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b6b20ac173eeb9ee50077a3e7614b37299cdbb7/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6b20ac173eeb9ee50077a3e7614b37299cdbb7/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=1b6b20ac173eeb9ee50077a3e7614b37299cdbb7", "patch": "@@ -396,10 +396,16 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n         let struct_id = tcx.hir.as_local_node_id(adt_def_id).unwrap();\n         let struct_vis = &tcx.hir.expect_item(struct_id).vis;\n+        let mut ctor_vis = ty::Visibility::from_hir(struct_vis, struct_id, tcx);\n+        for field in &variant.fields {\n+            if ctor_vis.is_at_least(field.vis, tcx) {\n+                ctor_vis = field.vis;\n+            }\n+        }\n \n         Entry {\n             kind: EntryKind::Struct(self.lazy(&data)),\n-            visibility: self.lazy(&ty::Visibility::from_hir(struct_vis, struct_id, tcx)),\n+            visibility: self.lazy(&ctor_vis),\n             span: self.lazy(&tcx.def_span(def_id)),\n             attributes: LazySeq::empty(),\n             children: LazySeq::empty(),"}, {"sha": "49f2ccb7c57f59865c723449bcc968c7b2e9e61c", "filename": "src/librustc_privacy/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 39, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/1b6b20ac173eeb9ee50077a3e7614b37299cdbb7/src%2Flibrustc_privacy%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6b20ac173eeb9ee50077a3e7614b37299cdbb7/src%2Flibrustc_privacy%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Fdiagnostics.rs?ref=1b6b20ac173eeb9ee50077a3e7614b37299cdbb7", "patch": "@@ -115,45 +115,6 @@ pub enum Foo {\n ```\n \"##,\n \n-E0450: r##\"\n-A tuple constructor was invoked while some of its fields are private. Erroneous\n-code example:\n-\n-```compile_fail,E0450\n-mod Bar {\n-    pub struct Foo(isize);\n-}\n-\n-let f = Bar::Foo(0); // error: cannot invoke tuple struct constructor with\n-                     //        private fields\n-```\n-\n-To solve this issue, please ensure that all of the fields of the tuple struct\n-are public. Alternatively, provide a `new()` method to the tuple struct to\n-construct it from a given inner value. Example:\n-\n-```\n-mod Bar {\n-    pub struct Foo(pub isize); // we set its field to public\n-}\n-\n-let f = Bar::Foo(0); // ok!\n-\n-// or:\n-mod bar {\n-    pub struct Foo(isize);\n-\n-    impl Foo {\n-        pub fn new(x: isize) -> Foo {\n-            Foo(x)\n-        }\n-    }\n-}\n-\n-let f = bar::Foo::new(1);\n-```\n-\"##,\n-\n E0451: r##\"\n A struct constructor with private fields was invoked. Erroneous code example:\n \n@@ -204,3 +165,7 @@ let f = Bar::Foo::new(); // ok!\n \"##,\n \n }\n+\n+register_diagnostics! {\n+//  E0450, moved into resolve\n+}"}, {"sha": "9dc94745cff7b72fc64b4c8f142605e058502e40", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 28, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1b6b20ac173eeb9ee50077a3e7614b37299cdbb7/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6b20ac173eeb9ee50077a3e7614b37299cdbb7/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=1b6b20ac173eeb9ee50077a3e7614b37299cdbb7", "patch": "@@ -27,7 +27,7 @@ extern crate syntax_pos;\n \n use rustc::dep_graph::DepNode;\n use rustc::hir::{self, PatKind};\n-use rustc::hir::def::{self, Def, CtorKind};\n+use rustc::hir::def::{self, Def};\n use rustc::hir::def_id::{CRATE_DEF_INDEX, DefId};\n use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use rustc::hir::itemlikevisit::DeepVisitor;\n@@ -478,33 +478,6 @@ impl<'a, 'tcx> Visitor<'tcx> for PrivacyVisitor<'a, 'tcx> {\n                     }\n                 }\n             }\n-            hir::ExprPath(hir::QPath::Resolved(_, ref path)) => {\n-                if let Def::StructCtor(_, CtorKind::Fn) = path.def {\n-                    let adt_def = self.tcx.expect_variant_def(path.def);\n-                    let private_indexes = adt_def.fields.iter().enumerate().filter(|&(_, field)| {\n-                        !field.vis.is_accessible_from(self.curitem, self.tcx)\n-                    }).map(|(i, _)| i).collect::<Vec<_>>();\n-\n-                    if !private_indexes.is_empty() {\n-                        let mut error = struct_span_err!(self.tcx.sess, expr.span, E0450,\n-                                                         \"cannot invoke tuple struct constructor \\\n-                                                          with private fields\");\n-                        error.span_label(expr.span,\n-                                         &format!(\"cannot construct with a private field\"));\n-\n-                        if let Some(node_id) = self.tcx.hir.as_local_node_id(adt_def.did) {\n-                            let node = self.tcx.hir.find(node_id);\n-                            if let Some(hir::map::NodeStructCtor(vdata)) = node {\n-                                for i in private_indexes {\n-                                    error.span_label(vdata.fields()[i].span,\n-                                                     &format!(\"private field declared here\"));\n-                                }\n-                            }\n-                        }\n-                        error.emit();\n-                    }\n-                }\n-            }\n             _ => {}\n         }\n "}, {"sha": "eb6c7f4bed5deaddb2cdeec5528afc97a4f3d2b0", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 24, "deletions": 11, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/1b6b20ac173eeb9ee50077a3e7614b37299cdbb7/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6b20ac173eeb9ee50077a3e7614b37299cdbb7/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=1b6b20ac173eeb9ee50077a3e7614b37299cdbb7", "patch": "@@ -327,21 +327,26 @@ impl<'a> Resolver<'a> {\n                 let def = Def::Struct(self.definitions.local_def_id(item.id));\n                 self.define(parent, ident, TypeNS, (def, vis, sp, expansion));\n \n-                // If this is a tuple or unit struct, define a name\n-                // in the value namespace as well.\n-                if !struct_def.is_struct() {\n-                    let ctor_def = Def::StructCtor(self.definitions.local_def_id(struct_def.id()),\n-                                                   CtorKind::from_ast(struct_def));\n-                    self.define(parent, ident, ValueNS, (ctor_def, vis, sp, expansion));\n-                }\n-\n                 // Record field names for error reporting.\n+                let mut ctor_vis = vis;\n                 let field_names = struct_def.fields().iter().filter_map(|field| {\n-                    self.resolve_visibility(&field.vis);\n+                    let field_vis = self.resolve_visibility(&field.vis);\n+                    if ctor_vis.is_at_least(field_vis, &*self) {\n+                        ctor_vis = field_vis;\n+                    }\n                     field.ident.map(|ident| ident.name)\n                 }).collect();\n                 let item_def_id = self.definitions.local_def_id(item.id);\n                 self.insert_field_names(item_def_id, field_names);\n+\n+                // If this is a tuple or unit struct, define a name\n+                // in the value namespace as well.\n+                if !struct_def.is_struct() {\n+                    let ctor_def = Def::StructCtor(self.definitions.local_def_id(struct_def.id()),\n+                                                   CtorKind::from_ast(struct_def));\n+                    self.define(parent, ident, ValueNS, (ctor_def, ctor_vis, sp, expansion));\n+                    self.struct_constructors.insert(def.def_id(), (ctor_def, ctor_vis));\n+                }\n             }\n \n             ItemKind::Union(ref vdata, _) => {\n@@ -434,9 +439,17 @@ impl<'a> Resolver<'a> {\n             Def::Variant(..) | Def::TyAlias(..) => {\n                 self.define(parent, ident, TypeNS, (def, vis, DUMMY_SP, Mark::root()));\n             }\n-            Def::Fn(..) | Def::Static(..) | Def::Const(..) |\n-            Def::VariantCtor(..) | Def::StructCtor(..) => {\n+            Def::Fn(..) | Def::Static(..) | Def::Const(..) | Def::VariantCtor(..) => {\n+                self.define(parent, ident, ValueNS, (def, vis, DUMMY_SP, Mark::root()));\n+            }\n+            Def::StructCtor(..) => {\n                 self.define(parent, ident, ValueNS, (def, vis, DUMMY_SP, Mark::root()));\n+\n+                if let Some(struct_def_id) =\n+                        self.session.cstore.def_key(def_id).parent\n+                            .map(|index| DefId { krate: def_id.krate, index: index }) {\n+                    self.struct_constructors.insert(struct_def_id, (def, vis));\n+                }\n             }\n             Def::Trait(..) => {\n                 let module_kind = ModuleKind::Def(def, ident.name);"}, {"sha": "676ff98e602d6714fe1204b2f625583f874a594d", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1b6b20ac173eeb9ee50077a3e7614b37299cdbb7/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6b20ac173eeb9ee50077a3e7614b37299cdbb7/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=1b6b20ac173eeb9ee50077a3e7614b37299cdbb7", "patch": "@@ -45,7 +45,7 @@ use rustc::hir::def::*;\n use rustc::hir::def_id::{CrateNum, CRATE_DEF_INDEX, LOCAL_CRATE, DefId};\n use rustc::ty;\n use rustc::hir::{Freevar, FreevarMap, TraitCandidate, TraitMap, GlobMap};\n-use rustc::util::nodemap::{NodeMap, NodeSet, FxHashMap, FxHashSet};\n+use rustc::util::nodemap::{NodeMap, NodeSet, FxHashMap, FxHashSet, DefIdMap};\n \n use syntax::ext::hygiene::{Mark, SyntaxContext};\n use syntax::ast::{self, Name, NodeId, Ident, SpannedIdent, FloatTy, IntTy, UintTy};\n@@ -1131,6 +1131,10 @@ pub struct Resolver<'a> {\n     warned_proc_macros: FxHashSet<Name>,\n \n     potentially_unused_imports: Vec<&'a ImportDirective<'a>>,\n+\n+    // This table maps struct IDs into struct constructor IDs,\n+    // it's not used during normal resolution, only for better error reporting.\n+    struct_constructors: DefIdMap<(Def, ty::Visibility)>,\n }\n \n pub struct ResolverArenas<'a> {\n@@ -1310,6 +1314,7 @@ impl<'a> Resolver<'a> {\n             proc_macro_enabled: features.proc_macro,\n             warned_proc_macros: FxHashSet(),\n             potentially_unused_imports: Vec::new(),\n+            struct_constructors: DefIdMap(),\n         }\n     }\n \n@@ -2205,6 +2210,15 @@ impl<'a> Resolver<'a> {\n                         _ => {}\n                     },\n                     _ if ns == ValueNS && is_struct_like(def) => {\n+                        if let Def::Struct(def_id) = def {\n+                            if let Some((ctor_def, ctor_vis))\n+                                    = this.struct_constructors.get(&def_id).cloned() {\n+                                if is_expected(ctor_def) && !this.is_accessible(ctor_vis) {\n+                                    err.span_label(span, &format!(\"constructor is not visible \\\n+                                                                   here due to private fields\"));\n+                                }\n+                            }\n+                        }\n                         err.span_label(span, &format!(\"did you mean `{} {{ /* fields */ }}`?\",\n                                                        path_str));\n                         return err;\n@@ -2235,7 +2249,23 @@ impl<'a> Resolver<'a> {\n                 if is_expected(resolution.base_def) || resolution.base_def == Def::Err {\n                     resolution\n                 } else {\n-                    report_errors(self, Some(resolution.base_def))\n+                    // Add a temporary hack to smooth the transition to new struct ctor\n+                    // visibility rules. See #38932 for more details.\n+                    let mut res = None;\n+                    if let Def::Struct(def_id) = resolution.base_def {\n+                        if let Some((ctor_def, ctor_vis))\n+                                = self.struct_constructors.get(&def_id).cloned() {\n+                            if is_expected(ctor_def) && self.is_accessible(ctor_vis) {\n+                                let lint = lint::builtin::LEGACY_CONSTRUCTOR_VISIBILITY;\n+                                self.session.add_lint(lint, id, span,\n+                                    \"private struct constructors are not usable through \\\n+                                     reexports in outer modules\".to_string());\n+                                res = Some(PathResolution::new(ctor_def));\n+                            }\n+                        }\n+                    }\n+\n+                    res.unwrap_or_else(|| report_errors(self, Some(resolution.base_def)))\n                 }\n             }\n             Some(resolution) if source.defer_to_typeck() => {"}, {"sha": "442a2f4074215a4f519ea4ec2c792520ca8ebf75", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b6b20ac173eeb9ee50077a3e7614b37299cdbb7/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6b20ac173eeb9ee50077a3e7614b37299cdbb7/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=1b6b20ac173eeb9ee50077a3e7614b37299cdbb7", "patch": "@@ -660,8 +660,6 @@ mod tests {\n         t(\"no_run\",                false,        true,   false,  true,  false, false, Vec::new());\n         t(\"test_harness\",          false,        false,  false,  true,  true,  false, Vec::new());\n         t(\"compile_fail\",          false,        true,   false,  true,  false, true,  Vec::new());\n-        t(\"E0450\",                 false,        false,  false,  true,  false, false,\n-                                   vec![\"E0450\".to_owned()]);\n         t(\"{.no_run .example}\",    false,        true,   false,  true,  false, false, Vec::new());\n         t(\"{.sh .should_panic}\",   true,         false,  false,  true,  false, false, Vec::new());\n         t(\"{.example .rust}\",      false,        false,  false,  true,  false, false, Vec::new());"}, {"sha": "c278171aa109a81120433777fafd9a4504dedb53", "filename": "src/libsyntax/symbol.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1b6b20ac173eeb9ee50077a3e7614b37299cdbb7/src%2Flibsyntax%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6b20ac173eeb9ee50077a3e7614b37299cdbb7/src%2Flibsyntax%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsymbol.rs?ref=1b6b20ac173eeb9ee50077a3e7614b37299cdbb7", "patch": "@@ -140,7 +140,7 @@ macro_rules! declare_keywords {(\n         $(\n             #[allow(non_upper_case_globals)]\n             pub const $konst: Keyword = Keyword {\n-                ident: ast::Ident::with_empty_ctxt(ast::Name($index))\n+                ident: ast::Ident::with_empty_ctxt(super::Symbol($index))\n             };\n         )*\n     }\n@@ -282,25 +282,24 @@ impl Encodable for InternedString {\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use ast::Name;\n \n     #[test]\n     fn interner_tests() {\n         let mut i: Interner = Interner::new();\n         // first one is zero:\n-        assert_eq!(i.intern(\"dog\"), Name(0));\n+        assert_eq!(i.intern(\"dog\"), Symbol(0));\n         // re-use gets the same entry:\n-        assert_eq!(i.intern (\"dog\"), Name(0));\n+        assert_eq!(i.intern (\"dog\"), Symbol(0));\n         // different string gets a different #:\n-        assert_eq!(i.intern(\"cat\"), Name(1));\n-        assert_eq!(i.intern(\"cat\"), Name(1));\n+        assert_eq!(i.intern(\"cat\"), Symbol(1));\n+        assert_eq!(i.intern(\"cat\"), Symbol(1));\n         // dog is still at zero\n-        assert_eq!(i.intern(\"dog\"), Name(0));\n+        assert_eq!(i.intern(\"dog\"), Symbol(0));\n         // gensym gets 3\n-        assert_eq!(i.gensym(\"zebra\"), Name(2));\n+        assert_eq!(i.gensym(\"zebra\"), Symbol(2));\n         // gensym of same string gets new number :\n-        assert_eq!(i.gensym(\"zebra\"), Name(3));\n+        assert_eq!(i.gensym(\"zebra\"), Symbol(3));\n         // gensym of *existing* string gets new number:\n-        assert_eq!(i.gensym(\"dog\"), Name(4));\n+        assert_eq!(i.gensym(\"dog\"), Symbol(4));\n     }\n }"}, {"sha": "b9839edea2dc4e5b4e39e6423e53525341c60b61", "filename": "src/test/compile-fail-fulldeps/explore-issue-38412.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1b6b20ac173eeb9ee50077a3e7614b37299cdbb7/src%2Ftest%2Fcompile-fail-fulldeps%2Fexplore-issue-38412.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6b20ac173eeb9ee50077a3e7614b37299cdbb7/src%2Ftest%2Fcompile-fail-fulldeps%2Fexplore-issue-38412.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fexplore-issue-38412.rs?ref=1b6b20ac173eeb9ee50077a3e7614b37299cdbb7", "patch": "@@ -25,21 +25,14 @@ use pub_and_stability::{Record, Trait, Tuple};\n fn main() {\n     // Okay\n     let Record { .. } = Record::new();\n-    // Okay (for now; see RFC Issue #902)\n-    let Tuple(..) = Tuple::new();\n \n     // Okay\n     let Record { a_stable_pub: _, a_unstable_declared_pub: _, .. } = Record::new();\n-    // Okay (for now; see RFC Issue #902)\n-    let Tuple(_, _, ..) = Tuple::new(); // analogous to above\n \n     let Record { a_stable_pub: _, a_unstable_declared_pub: _, a_unstable_undeclared_pub: _, .. } =\n         Record::new();\n     //~^^ ERROR use of unstable library feature 'unstable_undeclared'\n \n-    let Tuple(_, _, _, ..) = Tuple::new(); // analogous to previous\n-    //~^ ERROR use of unstable library feature 'unstable_undeclared'\n-\n     let r = Record::new();\n     let t = Tuple::new();\n "}, {"sha": "ace96c9983e66612097228f6a949778e797cf0f0", "filename": "src/test/compile-fail/E0451.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1b6b20ac173eeb9ee50077a3e7614b37299cdbb7/src%2Ftest%2Fcompile-fail%2FE0451.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6b20ac173eeb9ee50077a3e7614b37299cdbb7/src%2Ftest%2Fcompile-fail%2FE0451.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0451.rs?ref=1b6b20ac173eeb9ee50077a3e7614b37299cdbb7", "patch": "@@ -25,11 +25,6 @@ fn pat_match(foo: Bar::Foo) {\n                                   //~^ NOTE field `b` is private\n }\n \n-fn pat_match_tuple(foo: Bar::FooTuple) {\n-    let Bar::FooTuple(a,b) = foo; //~ ERROR E0451\n-                                  //~^ NOTE field `1` is private\n-}\n-\n fn main() {\n     let f = Bar::Foo{ a: 0, b: 0 }; //~ ERROR E0451\n                                     //~^ NOTE field `b` is private"}, {"sha": "3b62aaf2ab8e9450789eca11ffa54610af1bc333", "filename": "src/test/compile-fail/issue-38412.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1b6b20ac173eeb9ee50077a3e7614b37299cdbb7/src%2Ftest%2Fcompile-fail%2Fissue-38412.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6b20ac173eeb9ee50077a3e7614b37299cdbb7/src%2Ftest%2Fcompile-fail%2Fissue-38412.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-38412.rs?ref=1b6b20ac173eeb9ee50077a3e7614b37299cdbb7", "patch": "@@ -10,7 +10,8 @@\n \n fn main() {\n     let Box(a) = loop { };\n-    //~^ ERROR field `0` of struct `std::boxed::Box` is private\n+    //~^ ERROR expected tuple struct/variant, found struct `Box`\n+    //~| ERROR expected tuple struct/variant, found struct `Box`\n \n     // (The below is a trick to allow compiler to infer a type for\n     // variable `a` without attempting to ascribe a type to the"}, {"sha": "fb65af230ace5cf05eaeb02574a83c06bd81b748", "filename": "src/test/compile-fail/privacy/legacy-ctor-visibility.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1b6b20ac173eeb9ee50077a3e7614b37299cdbb7/src%2Ftest%2Fcompile-fail%2Fprivacy%2Flegacy-ctor-visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6b20ac173eeb9ee50077a3e7614b37299cdbb7/src%2Ftest%2Fcompile-fail%2Fprivacy%2Flegacy-ctor-visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy%2Flegacy-ctor-visibility.rs?ref=1b6b20ac173eeb9ee50077a3e7614b37299cdbb7", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(unused)]\n+\n+use m::S;\n+\n+mod m {\n+    pub struct S(u8);\n+\n+    mod n {\n+        use S;\n+        fn f() {\n+            S(10);\n+            //~^ ERROR private struct constructors are not usable through reexports in outer modules\n+            //~| WARN this was previously accepted\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "599c1f871604406bd3f6f99470b3078d073c2603", "filename": "src/test/compile-fail/privacy5.rs", "status": "modified", "additions": 52, "deletions": 55, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/1b6b20ac173eeb9ee50077a3e7614b37299cdbb7/src%2Ftest%2Fcompile-fail%2Fprivacy5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6b20ac173eeb9ee50077a3e7614b37299cdbb7/src%2Ftest%2Fcompile-fail%2Fprivacy5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy5.rs?ref=1b6b20ac173eeb9ee50077a3e7614b37299cdbb7", "patch": "@@ -58,83 +58,80 @@ mod a {\n }\n \n fn this_crate() {\n-    let a = a::A(()); //~ ERROR: cannot invoke tuple struct constructor\n-    let b = a::B(2); //~ ERROR: cannot invoke tuple struct constructor\n-    let c = a::C(2, 3); //~ ERROR: cannot invoke tuple struct constructor\n+    let a = a::A(()); //~ ERROR tuple struct `A` is private\n+    let b = a::B(2); //~ ERROR tuple struct `B` is private\n+    let c = a::C(2, 3); //~ ERROR tuple struct `C` is private\n     let d = a::D(4);\n \n-    let a::A(()) = a; //~ ERROR: field `0` of struct `a::A` is private\n-    let a::A(_) = a;\n-    match a { a::A(()) => {} } //~ ERROR: field `0` of struct `a::A` is private\n-    match a { a::A(_) => {} }\n-\n-    let a::B(_) = b;\n-    let a::B(_b) = b; //~ ERROR: field `0` of struct `a::B` is private\n-    match b { a::B(_) => {} }\n-    match b { a::B(_b) => {} } //~ ERROR: field `0` of struct `a::B` is private\n-    match b { a::B(1) => {} a::B(_) => {} } //~ ERROR: field `0` of struct `a::B` is private\n-\n-    let a::C(_, _) = c;\n-    let a::C(_a, _) = c;\n-    let a::C(_, _b) = c; //~ ERROR: field `1` of struct `a::C` is private\n-    let a::C(_a, _b) = c; //~ ERROR: field `1` of struct `a::C` is private\n-    match c { a::C(_, _) => {} }\n-    match c { a::C(_a, _) => {} }\n-    match c { a::C(_, _b) => {} } //~ ERROR: field `1` of struct `a::C` is private\n-    match c { a::C(_a, _b) => {} } //~ ERROR: field `1` of struct `a::C` is private\n+    let a::A(()) = a; //~ ERROR tuple struct `A` is private\n+    let a::A(_) = a; //~ ERROR tuple struct `A` is private\n+    match a { a::A(()) => {} } //~ ERROR tuple struct `A` is private\n+    match a { a::A(_) => {} } //~ ERROR tuple struct `A` is private\n+\n+    let a::B(_) = b; //~ ERROR tuple struct `B` is private\n+    let a::B(_b) = b; //~ ERROR tuple struct `B` is private\n+    match b { a::B(_) => {} } //~ ERROR tuple struct `B` is private\n+    match b { a::B(_b) => {} } //~ ERROR tuple struct `B` is private\n+    match b { a::B(1) => {} a::B(_) => {} } //~ ERROR tuple struct `B` is private\n+                                            //~^ ERROR tuple struct `B` is private\n+\n+    let a::C(_, _) = c; //~ ERROR tuple struct `C` is private\n+    let a::C(_a, _) = c; //~ ERROR tuple struct `C` is private\n+    let a::C(_, _b) = c; //~ ERROR tuple struct `C` is private\n+    let a::C(_a, _b) = c; //~ ERROR tuple struct `C` is private\n+    match c { a::C(_, _) => {} } //~ ERROR tuple struct `C` is private\n+    match c { a::C(_a, _) => {} } //~ ERROR tuple struct `C` is private\n+    match c { a::C(_, _b) => {} } //~ ERROR tuple struct `C` is private\n+    match c { a::C(_a, _b) => {} } //~ ERROR tuple struct `C` is private\n \n     let a::D(_) = d;\n     let a::D(_d) = d;\n     match d { a::D(_) => {} }\n     match d { a::D(_d) => {} }\n     match d { a::D(1) => {} a::D(_) => {} }\n \n-    let a2 = a::A; //~ ERROR: cannot invoke tuple struct constructor\n-    let b2 = a::B; //~ ERROR: cannot invoke tuple struct constructor\n-    let c2 = a::C; //~ ERROR: cannot invoke tuple struct constructor\n+    let a2 = a::A; //~ ERROR tuple struct `A` is private\n+    let b2 = a::B; //~ ERROR tuple struct `B` is private\n+    let c2 = a::C; //~ ERROR tuple struct `C` is private\n     let d2 = a::D;\n }\n \n fn xcrate() {\n-    let a = other::A(()); //~ ERROR: cannot invoke tuple struct constructor\n-    let b = other::B(2); //~ ERROR: cannot invoke tuple struct constructor\n-    let c = other::C(2, 3); //~ ERROR: cannot invoke tuple struct constructor\n+    let a = other::A(()); //~ ERROR tuple struct `A` is private\n+    let b = other::B(2); //~ ERROR tuple struct `B` is private\n+    let c = other::C(2, 3); //~ ERROR tuple struct `C` is private\n     let d = other::D(4);\n \n-    let other::A(()) = a; //~ ERROR: field `0` of struct `other::A` is private\n-    let other::A(_) = a;\n-    match a { other::A(()) => {} }\n-    //~^ ERROR: field `0` of struct `other::A` is private\n-    match a { other::A(_) => {} }\n-\n-    let other::B(_) = b;\n-    let other::B(_b) = b; //~ ERROR: field `0` of struct `other::B` is private\n-    match b { other::B(_) => {} }\n-    match b { other::B(_b) => {} }\n-    //~^ ERROR: field `0` of struct `other::B` is private\n-    match b { other::B(1) => {} other::B(_) => {} }\n-    //~^ ERROR: field `0` of struct `other::B` is private\n-\n-    let other::C(_, _) = c;\n-    let other::C(_a, _) = c;\n-    let other::C(_, _b) = c; //~ ERROR: field `1` of struct `other::C` is private\n-    let other::C(_a, _b) = c; //~ ERROR: field `1` of struct `other::C` is private\n-    match c { other::C(_, _) => {} }\n-    match c { other::C(_a, _) => {} }\n-    match c { other::C(_, _b) => {} }\n-    //~^ ERROR: field `1` of struct `other::C` is private\n-    match c { other::C(_a, _b) => {} }\n-    //~^ ERROR: field `1` of struct `other::C` is private\n+    let other::A(()) = a; //~ ERROR tuple struct `A` is private\n+    let other::A(_) = a; //~ ERROR tuple struct `A` is private\n+    match a { other::A(()) => {} } //~ ERROR tuple struct `A` is private\n+    match a { other::A(_) => {} } //~ ERROR tuple struct `A` is private\n+\n+    let other::B(_) = b; //~ ERROR tuple struct `B` is private\n+    let other::B(_b) = b; //~ ERROR tuple struct `B` is private\n+    match b { other::B(_) => {} } //~ ERROR tuple struct `B` is private\n+    match b { other::B(_b) => {} } //~ ERROR tuple struct `B` is private\n+    match b { other::B(1) => {} other::B(_) => {} } //~ ERROR tuple struct `B` is private\n+                                                    //~^ ERROR tuple struct `B` is private\n+\n+    let other::C(_, _) = c; //~ ERROR tuple struct `C` is private\n+    let other::C(_a, _) = c; //~ ERROR tuple struct `C` is private\n+    let other::C(_, _b) = c; //~ ERROR tuple struct `C` is private\n+    let other::C(_a, _b) = c; //~ ERROR tuple struct `C` is private\n+    match c { other::C(_, _) => {} } //~ ERROR tuple struct `C` is private\n+    match c { other::C(_a, _) => {} } //~ ERROR tuple struct `C` is private\n+    match c { other::C(_, _b) => {} } //~ ERROR tuple struct `C` is private\n+    match c { other::C(_a, _b) => {} } //~ ERROR tuple struct `C` is private\n \n     let other::D(_) = d;\n     let other::D(_d) = d;\n     match d { other::D(_) => {} }\n     match d { other::D(_d) => {} }\n     match d { other::D(1) => {} other::D(_) => {} }\n \n-    let a2 = other::A; //~ ERROR: cannot invoke tuple struct constructor\n-    let b2 = other::B; //~ ERROR: cannot invoke tuple struct constructor\n-    let c2 = other::C; //~ ERROR: cannot invoke tuple struct constructor\n+    let a2 = other::A; //~ ERROR tuple struct `A` is private\n+    let b2 = other::B; //~ ERROR tuple struct `B` is private\n+    let c2 = other::C; //~ ERROR tuple struct `C` is private\n     let d2 = other::D;\n }\n "}, {"sha": "f190f5dd0534d09999ccf95cd30d36e04df1bb75", "filename": "src/test/ui/resolve/auxiliary/privacy-struct-ctor.rs", "status": "renamed", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1b6b20ac173eeb9ee50077a3e7614b37299cdbb7/src%2Ftest%2Fui%2Fresolve%2Fauxiliary%2Fprivacy-struct-ctor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6b20ac173eeb9ee50077a3e7614b37299cdbb7/src%2Ftest%2Fui%2Fresolve%2Fauxiliary%2Fprivacy-struct-ctor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fauxiliary%2Fprivacy-struct-ctor.rs?ref=1b6b20ac173eeb9ee50077a3e7614b37299cdbb7", "patch": "@@ -8,14 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-mod Bar {\n-    pub struct Foo( bool, pub i32, f32, bool);\n-    //~^ NOTE private field declared here\n-    //~| NOTE private field declared here\n-    //~| NOTE private field declared here\n-}\n+#![feature(pub_restricted)]\n+\n+pub mod m {\n+    pub struct S(u8);\n \n-fn main() {\n-    let f = Bar::Foo(false,1,0.1, true); //~ ERROR E0450\n-                         //~^ NOTE cannot construct with a private field\n+    pub mod n {\n+        pub(m) struct Z(pub(m::n) u8);\n+    }\n }\n+\n+pub use m::S;", "previous_filename": "src/test/compile-fail/E0450.rs"}, {"sha": "3d0c76c740ad6cc27abc93cd75a4c5917059bc0a", "filename": "src/test/ui/resolve/privacy-struct-ctor.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/1b6b20ac173eeb9ee50077a3e7614b37299cdbb7/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6b20ac173eeb9ee50077a3e7614b37299cdbb7/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.rs?ref=1b6b20ac173eeb9ee50077a3e7614b37299cdbb7", "patch": "@@ -0,0 +1,48 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:privacy-struct-ctor.rs\n+\n+#![feature(pub_restricted)]\n+\n+extern crate privacy_struct_ctor as xcrate;\n+\n+mod m {\n+    pub struct S(u8);\n+\n+    pub mod n {\n+        pub(m) struct Z(pub(m::n) u8);\n+    }\n+\n+    use m::n::Z; // OK, only the type is imported\n+\n+    fn f() {\n+        n::Z; //~ ERROR tuple struct `Z` is private\n+        Z;\n+        //~^ ERROR expected value, found struct `Z`\n+        //~| NOTE tuple struct constructors with private fields are invisible outside of their mod\n+    }\n+}\n+\n+use m::S; // OK, only the type is imported\n+\n+fn main() {\n+    m::S; //~ ERROR tuple struct `S` is private\n+    S;\n+    //~^ ERROR expected value, found struct `S`\n+    //~| NOTE constructor is not visible here due to private fields\n+    m::n::Z; //~ ERROR tuple struct `Z` is private\n+\n+    xcrate::m::S; //~ ERROR tuple struct `S` is private\n+    xcrate::S;\n+    //~^ ERROR expected value, found struct `xcrate::S`\n+    //~| NOTE constructor is not visible here due to private fields\n+    xcrate::m::n::Z; //~ ERROR tuple struct `Z` is private\n+}"}, {"sha": "30fdbb02cc71522101be52b443dbd7b1cb697e4b", "filename": "src/test/ui/resolve/privacy-struct-ctor.stderr", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/1b6b20ac173eeb9ee50077a3e7614b37299cdbb7/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b6b20ac173eeb9ee50077a3e7614b37299cdbb7/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr?ref=1b6b20ac173eeb9ee50077a3e7614b37299cdbb7", "patch": "@@ -0,0 +1,68 @@\n+error[E0423]: expected value, found struct `Z`\n+  --> $DIR/privacy-struct-ctor.rs:28:9\n+   |\n+28 |         Z;\n+   |         ^\n+   |         |\n+   |         did you mean `Z { /* fields */ }`?\n+   |         constructor is not visible here due to private fields\n+   |\n+   = help: possible better candidate is found in another module, you can import it into scope:\n+             `use m::n::Z;`\n+\n+error[E0423]: expected value, found struct `S`\n+  --> $DIR/privacy-struct-ctor.rs:38:5\n+   |\n+38 |     S;\n+   |     ^\n+   |     |\n+   |     did you mean `S { /* fields */ }`?\n+   |     constructor is not visible here due to private fields\n+   |\n+   = help: possible better candidate is found in another module, you can import it into scope:\n+             `use m::S;`\n+\n+error[E0423]: expected value, found struct `xcrate::S`\n+  --> $DIR/privacy-struct-ctor.rs:44:5\n+   |\n+44 |     xcrate::S;\n+   |     ^^^^^^^^^\n+   |     |\n+   |     did you mean `xcrate::S { /* fields */ }`?\n+   |     constructor is not visible here due to private fields\n+   |\n+   = help: possible better candidate is found in another module, you can import it into scope:\n+             `use m::S;`\n+\n+error: tuple struct `Z` is private\n+  --> $DIR/privacy-struct-ctor.rs:27:9\n+   |\n+27 |         n::Z; //~ ERROR tuple struct `Z` is private\n+   |         ^^^^\n+\n+error: tuple struct `S` is private\n+  --> $DIR/privacy-struct-ctor.rs:37:5\n+   |\n+37 |     m::S; //~ ERROR tuple struct `S` is private\n+   |     ^^^^\n+\n+error: tuple struct `Z` is private\n+  --> $DIR/privacy-struct-ctor.rs:41:5\n+   |\n+41 |     m::n::Z; //~ ERROR tuple struct `Z` is private\n+   |     ^^^^^^^\n+\n+error: tuple struct `S` is private\n+  --> $DIR/privacy-struct-ctor.rs:43:5\n+   |\n+43 |     xcrate::m::S; //~ ERROR tuple struct `S` is private\n+   |     ^^^^^^^^^^^^\n+\n+error: tuple struct `Z` is private\n+  --> $DIR/privacy-struct-ctor.rs:47:5\n+   |\n+47 |     xcrate::m::n::Z; //~ ERROR tuple struct `Z` is private\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: aborting due to 8 previous errors\n+"}]}