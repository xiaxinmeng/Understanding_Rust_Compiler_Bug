{"sha": "695294bbb974cdbac136e260029403e90a17d953", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5NTI5NGJiYjk3NGNkYmFjMTM2ZTI2MDAyOTQwM2U5MGExN2Q5NTM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-08T18:00:51Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-08T18:03:42Z"}, "message": "ra_db is independent from editor", "tree": {"sha": "caa02f8086ad15fb6f884e56bc6a0231b203215f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/caa02f8086ad15fb6f884e56bc6a0231b203215f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/695294bbb974cdbac136e260029403e90a17d953", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/695294bbb974cdbac136e260029403e90a17d953", "html_url": "https://github.com/rust-lang/rust/commit/695294bbb974cdbac136e260029403e90a17d953", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/695294bbb974cdbac136e260029403e90a17d953/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c88360eb46c44935421c5d4bc36910ce3e96782", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c88360eb46c44935421c5d4bc36910ce3e96782", "html_url": "https://github.com/rust-lang/rust/commit/0c88360eb46c44935421c5d4bc36910ce3e96782"}], "stats": {"total": 50, "additions": 27, "deletions": 23}, "files": [{"sha": "c445439b10cd0ab205401e531d00dde4b188447a", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695294bbb974cdbac136e260029403e90a17d953/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/695294bbb974cdbac136e260029403e90a17d953/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=695294bbb974cdbac136e260029403e90a17d953", "patch": "@@ -679,7 +679,6 @@ version = \"0.1.0\"\n dependencies = [\n  \"parking_lot 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ra_arena 0.1.0\",\n- \"ra_editor 0.1.0\",\n  \"ra_syntax 0.1.0\",\n  \"relative-path 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\","}, {"sha": "9d46609ecfd51bd324cf35b10e5e186a793f1547", "filename": "crates/ra_analysis/src/db.rs", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/695294bbb974cdbac136e260029403e90a17d953/crates%2Fra_analysis%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695294bbb974cdbac136e260029403e90a17d953/crates%2Fra_analysis%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdb.rs?ref=695294bbb974cdbac136e260029403e90a17d953", "patch": "@@ -1,10 +1,9 @@\n use std::{fmt, sync::Arc};\n+\n use salsa::{self, Database};\n-use ra_db::{LocationIntener, BaseDatabase};\n+use ra_db::{LocationIntener, BaseDatabase, FileId};\n \n-use crate::{\n-    symbol_index,\n-};\n+use crate::{symbol_index, LineIndex};\n \n #[derive(Debug)]\n pub(crate) struct RootDatabase {\n@@ -71,6 +70,19 @@ impl AsRef<LocationIntener<hir::MacroCallLoc, hir::MacroCallId>> for RootDatabas\n     }\n }\n \n+salsa::query_group! {\n+    pub(crate) trait LineIndexDatabase: ra_db::FilesDatabase + BaseDatabase {\n+        fn line_index(file_id: FileId) -> Arc<LineIndex> {\n+            type LineIndexQuery;\n+        }\n+    }\n+}\n+\n+fn line_index(db: &impl ra_db::FilesDatabase, file_id: FileId) -> Arc<LineIndex> {\n+    let text = db.file_text(file_id);\n+    Arc::new(LineIndex::new(&*text))\n+}\n+\n salsa::database_storage! {\n     pub(crate) struct RootDatabaseStorage for RootDatabase {\n         impl ra_db::FilesDatabase {\n@@ -84,7 +96,9 @@ salsa::database_storage! {\n         }\n         impl ra_db::SyntaxDatabase {\n             fn source_file() for ra_db::SourceFileQuery;\n-            fn file_lines() for ra_db::FileLinesQuery;\n+        }\n+        impl LineIndexDatabase {\n+            fn line_index() for LineIndexQuery;\n         }\n         impl symbol_index::SymbolsDatabase {\n             fn file_symbols() for symbol_index::FileSymbolsQuery;"}, {"sha": "48df08416b0d1e21b80455f66629dba589a77c67", "filename": "crates/ra_analysis/src/lib.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/695294bbb974cdbac136e260029403e90a17d953/crates%2Fra_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695294bbb974cdbac136e260029403e90a17d953/crates%2Fra_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Flib.rs?ref=695294bbb974cdbac136e260029403e90a17d953", "patch": "@@ -29,12 +29,16 @@ use std::{fmt, sync::Arc};\n \n use ra_syntax::{SmolStr, SourceFile, TreePtr, SyntaxKind, TextRange, TextUnit};\n use ra_text_edit::TextEdit;\n+use ra_db::{SyntaxDatabase, FilesDatabase, LocalSyntaxPtr};\n use rayon::prelude::*;\n use relative_path::RelativePathBuf;\n use rustc_hash::FxHashMap;\n use salsa::ParallelDatabase;\n \n-use crate::symbol_index::{FileSymbol, SymbolIndex};\n+use crate::{\n+    symbol_index::{FileSymbol, SymbolIndex},\n+    db::LineIndexDatabase,\n+};\n \n pub use crate::{\n     completion::{CompletionItem, CompletionItemKind, InsertText},\n@@ -44,10 +48,8 @@ pub use ra_editor::{\n     Fold, FoldKind, HighlightedRange, Severity, StructureNode,\n     LineIndex, LineCol, translate_offset_with_edit,\n };\n-\n pub use ra_db::{\n-    Cancelable, Canceled, CrateGraph, CrateId, FileId, FilePosition, FileRange, FilesDatabase,\n-    LocalSyntaxPtr, SourceRootId, SyntaxDatabase,\n+    Cancelable, Canceled, CrateGraph, CrateId, FileId, FilePosition, FileRange, SourceRootId\n };\n \n #[derive(Default)]\n@@ -325,7 +327,7 @@ impl Analysis {\n     /// Gets the file's `LineIndex`: data structure to convert between absolute\n     /// offsets and line/column representation.\n     pub fn file_line_index(&self, file_id: FileId) -> Arc<LineIndex> {\n-        self.db.file_lines(file_id)\n+        self.db.line_index(file_id)\n     }\n     /// Selects the next syntactic nodes encopasing the range.\n     pub fn extend_selection(&self, frange: FileRange) -> TextRange {"}, {"sha": "2c1f94ad079ef175e57a414f8c89298a10c905f7", "filename": "crates/ra_db/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695294bbb974cdbac136e260029403e90a17d953/crates%2Fra_db%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/695294bbb974cdbac136e260029403e90a17d953/crates%2Fra_db%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2FCargo.toml?ref=695294bbb974cdbac136e260029403e90a17d953", "patch": "@@ -11,5 +11,4 @@ rustc-hash = \"1.0\"\n parking_lot = \"0.7.0\"\n ra_arena = { path = \"../ra_arena\" }\n ra_syntax = { path = \"../ra_syntax\" }\n-ra_editor = { path = \"../ra_editor\" }\n test_utils = { path = \"../test_utils\" }"}, {"sha": "f56f70983ac45cc9119c2dd511bbffbbf0f45f98", "filename": "crates/ra_db/src/lib.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/695294bbb974cdbac136e260029403e90a17d953/crates%2Fra_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695294bbb974cdbac136e260029403e90a17d953/crates%2Fra_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Flib.rs?ref=695294bbb974cdbac136e260029403e90a17d953", "patch": "@@ -5,9 +5,6 @@ mod input;\n mod loc2id;\n pub mod mock;\n \n-use std::sync::Arc;\n-\n-use ra_editor::LineIndex;\n use ra_syntax::{TextUnit, TextRange, SourceFile, TreePtr};\n \n pub use crate::{\n@@ -36,20 +33,13 @@ salsa::query_group! {\n         fn source_file(file_id: FileId) -> TreePtr<SourceFile> {\n             type SourceFileQuery;\n         }\n-        fn file_lines(file_id: FileId) -> Arc<LineIndex> {\n-            type FileLinesQuery;\n-        }\n     }\n }\n \n fn source_file(db: &impl SyntaxDatabase, file_id: FileId) -> TreePtr<SourceFile> {\n     let text = db.file_text(file_id);\n     SourceFile::parse(&*text)\n }\n-fn file_lines(db: &impl SyntaxDatabase, file_id: FileId) -> Arc<LineIndex> {\n-    let text = db.file_text(file_id);\n-    Arc::new(LineIndex::new(&*text))\n-}\n \n #[derive(Clone, Copy, Debug)]\n pub struct FilePosition {"}, {"sha": "0fae7de82ad110f0f5a477ba9197118db702c9ed", "filename": "crates/ra_hir/src/mock.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695294bbb974cdbac136e260029403e90a17d953/crates%2Fra_hir%2Fsrc%2Fmock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695294bbb974cdbac136e260029403e90a17d953/crates%2Fra_hir%2Fsrc%2Fmock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmock.rs?ref=695294bbb974cdbac136e260029403e90a17d953", "patch": "@@ -215,7 +215,6 @@ salsa::database_storage! {\n         }\n         impl ra_db::SyntaxDatabase {\n             fn source_file() for ra_db::SourceFileQuery;\n-            fn file_lines() for ra_db::FileLinesQuery;\n         }\n         impl db::HirDatabase {\n             fn hir_source_file() for db::HirSourceFileQuery;"}, {"sha": "90ba393ce981ead1d5f246ec3f1ab310e7182174", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695294bbb974cdbac136e260029403e90a17d953/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695294bbb974cdbac136e260029403e90a17d953/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=695294bbb974cdbac136e260029403e90a17d953", "patch": "@@ -1049,6 +1049,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n }\n \n pub fn infer(db: &impl HirDatabase, def_id: DefId) -> Cancelable<Arc<InferenceResult>> {\n+    db.check_canceled()?;\n     let function = Function::new(def_id); // TODO: consts also need inference\n     let body = function.body(db)?;\n     let scopes = db.fn_scopes(def_id)?;"}]}