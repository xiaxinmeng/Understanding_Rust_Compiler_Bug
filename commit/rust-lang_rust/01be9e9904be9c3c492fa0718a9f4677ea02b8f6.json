{"sha": "01be9e9904be9c3c492fa0718a9f4677ea02b8f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxYmU5ZTk5MDRiZTljM2M0OTJmYTA3MThhOWY0Njc3ZWEwMmI4ZjY=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-09-25T03:07:44Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-10-02T14:55:42Z"}, "message": "extra: Add ToBigInt and ToBigUint traits", "tree": {"sha": "4a85d938a2c80f1517c2b656ddde5a914d21af7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a85d938a2c80f1517c2b656ddde5a914d21af7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01be9e9904be9c3c492fa0718a9f4677ea02b8f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01be9e9904be9c3c492fa0718a9f4677ea02b8f6", "html_url": "https://github.com/rust-lang/rust/commit/01be9e9904be9c3c492fa0718a9f4677ea02b8f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01be9e9904be9c3c492fa0718a9f4677ea02b8f6/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9de7ad2d8c1729b7b11c6d234fc8ef8ce96809bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/9de7ad2d8c1729b7b11c6d234fc8ef8ce96809bb", "html_url": "https://github.com/rust-lang/rust/commit/9de7ad2d8c1729b7b11c6d234fc8ef8ce96809bb"}], "stats": {"total": 90, "additions": 90, "deletions": 0}, "files": [{"sha": "925fe9da3e418734ec06ee99312aecee92e3722c", "filename": "src/libextra/num/bigint.rs", "status": "modified", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/01be9e9904be9c3c492fa0718a9f4677ea02b8f6/src%2Flibextra%2Fnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01be9e9904be9c3c492fa0718a9f4677ea02b8f6/src%2Flibextra%2Fnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Fbigint.rs?ref=01be9e9904be9c3c492fa0718a9f4677ea02b8f6", "patch": "@@ -547,6 +547,52 @@ impl FromPrimitive for BigUint {\n     }\n }\n \n+pub trait ToBigUint {\n+    fn to_biguint(&self) -> Option<BigUint>;\n+}\n+\n+impl ToBigUint for BigInt {\n+    #[inline]\n+    fn to_biguint(&self) -> Option<BigUint> {\n+        if self.sign == Plus {\n+            Some(self.data.clone())\n+        } else if self.sign == Zero {\n+            Some(Zero::zero())\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n+impl ToBigUint for BigUint {\n+    #[inline]\n+    fn to_biguint(&self) -> Option<BigUint> {\n+        Some(self.clone())\n+    }\n+}\n+\n+macro_rules! impl_to_biguint(\n+    ($T:ty, $from_ty:path) => {\n+        impl ToBigUint for $T {\n+            #[inline]\n+            fn to_biguint(&self) -> Option<BigUint> {\n+                $from_ty(*self)\n+            }\n+        }\n+    }\n+)\n+\n+impl_to_biguint!(int,  FromPrimitive::from_int)\n+impl_to_biguint!(i8,   FromPrimitive::from_i8)\n+impl_to_biguint!(i16,  FromPrimitive::from_i16)\n+impl_to_biguint!(i32,  FromPrimitive::from_i32)\n+impl_to_biguint!(i64,  FromPrimitive::from_i64)\n+impl_to_biguint!(uint, FromPrimitive::from_uint)\n+impl_to_biguint!(u8,   FromPrimitive::from_u8)\n+impl_to_biguint!(u16,  FromPrimitive::from_u16)\n+impl_to_biguint!(u32,  FromPrimitive::from_u32)\n+impl_to_biguint!(u64,  FromPrimitive::from_u64)\n+\n impl ToStrRadix for BigUint {\n     fn to_str_radix(&self, radix: uint) -> ~str {\n         assert!(1 < radix && radix <= 16);\n@@ -1140,6 +1186,50 @@ impl FromPrimitive for BigInt {\n     }\n }\n \n+pub trait ToBigInt {\n+    fn to_bigint(&self) -> Option<BigInt>;\n+}\n+\n+impl ToBigInt for BigInt {\n+    #[inline]\n+    fn to_bigint(&self) -> Option<BigInt> {\n+        Some(self.clone())\n+    }\n+}\n+\n+impl ToBigInt for BigUint {\n+    #[inline]\n+    fn to_bigint(&self) -> Option<BigInt> {\n+        if self.is_zero() {\n+            Some(Zero::zero())\n+        } else {\n+            Some(BigInt { sign: Plus, data: self.clone() })\n+        }\n+    }\n+}\n+\n+macro_rules! impl_to_bigint(\n+    ($T:ty, $from_ty:path) => {\n+        impl ToBigInt for $T {\n+            #[inline]\n+            fn to_bigint(&self) -> Option<BigInt> {\n+                $from_ty(*self)\n+            }\n+        }\n+    }\n+)\n+\n+impl_to_bigint!(int,  FromPrimitive::from_int)\n+impl_to_bigint!(i8,   FromPrimitive::from_i8)\n+impl_to_bigint!(i16,  FromPrimitive::from_i16)\n+impl_to_bigint!(i32,  FromPrimitive::from_i32)\n+impl_to_bigint!(i64,  FromPrimitive::from_i64)\n+impl_to_bigint!(uint, FromPrimitive::from_uint)\n+impl_to_bigint!(u8,   FromPrimitive::from_u8)\n+impl_to_bigint!(u16,  FromPrimitive::from_u16)\n+impl_to_bigint!(u32,  FromPrimitive::from_u32)\n+impl_to_bigint!(u64,  FromPrimitive::from_u64)\n+\n impl ToStrRadix for BigInt {\n     #[inline]\n     fn to_str_radix(&self, radix: uint) -> ~str {"}]}