{"sha": "3c166937608789d3a1ad3d89a8577b9a178c9595", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjMTY2OTM3NjA4Nzg5ZDNhMWFkM2Q4OWE4NTc3YjlhMTc4Yzk1OTU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-27T04:33:38Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-27T04:33:38Z"}, "message": "rustc: Add LLVM bindings for more alignment-related functions", "tree": {"sha": "974316754730493e6dbdd6322114723d3ebefdf2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/974316754730493e6dbdd6322114723d3ebefdf2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c166937608789d3a1ad3d89a8577b9a178c9595", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c166937608789d3a1ad3d89a8577b9a178c9595", "html_url": "https://github.com/rust-lang/rust/commit/3c166937608789d3a1ad3d89a8577b9a178c9595", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c166937608789d3a1ad3d89a8577b9a178c9595/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "597d9b4dd00704bee4ec816fe663cb1b193e1812", "url": "https://api.github.com/repos/rust-lang/rust/commits/597d9b4dd00704bee4ec816fe663cb1b193e1812", "html_url": "https://github.com/rust-lang/rust/commit/597d9b4dd00704bee4ec816fe663cb1b193e1812"}], "stats": {"total": 9, "additions": 8, "deletions": 1}, "files": [{"sha": "4b8e8dbc163fcdc1270696edd924b86c099a2655", "filename": "src/rustc/lib/llvm.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3c166937608789d3a1ad3d89a8577b9a178c9595/src%2Frustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c166937608789d3a1ad3d89a8577b9a178c9595/src%2Frustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Flib%2Fllvm.rs?ref=3c166937608789d3a1ad3d89a8577b9a178c9595", "patch": "@@ -766,9 +766,16 @@ native mod llvm {\n     fn LLVMAddTargetData(TD: TargetDataRef, PM: PassManagerRef);\n     /** Returns the size of a type. FIXME: rv is actually a C_Ulonglong! */\n     fn LLVMStoreSizeOfType(TD: TargetDataRef, Ty: TypeRef) -> c_uint;\n-    /** Returns the alignment of a type. */\n+    /** Returns the preferred alignment of a type. */\n     fn LLVMPreferredAlignmentOfType(TD: TargetDataRef,\n                                     Ty: TypeRef) -> c_uint;\n+    /** Returns the minimum alignment of a type. */\n+    fn LLVMABIAlignmentOfType(TD: TargetDataRef,\n+                              Ty: TypeRef) -> c_uint;\n+    /** Returns the minimum alignment of a type when part of a call frame. */\n+    fn LLVMCallFrameAlignmentOfType(TD: TargetDataRef,\n+                                    Ty: TypeRef) -> c_uint;\n+\n     /** Disposes target data. */\n     fn LLVMDisposeTargetData(TD: TargetDataRef);\n "}]}