{"sha": "ee639de007e952c006cee53278f9bc1fd773e7d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlNjM5ZGUwMDdlOTUyYzAwNmNlZTUzMjc4ZjliYzFmZDc3M2U3ZDk=", "commit": {"author": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2021-01-22T17:17:53Z"}, "committer": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2021-01-22T17:36:33Z"}, "message": "Only guess span if absolutely necessary", "tree": {"sha": "2c271c90a018f54f98f1b985b157ad838eff577d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c271c90a018f54f98f1b985b157ad838eff577d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee639de007e952c006cee53278f9bc1fd773e7d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee639de007e952c006cee53278f9bc1fd773e7d9", "html_url": "https://github.com/rust-lang/rust/commit/ee639de007e952c006cee53278f9bc1fd773e7d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee639de007e952c006cee53278f9bc1fd773e7d9/comments", "author": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d63b278c2ff01b73653397a5e2c469689ef0adf4", "url": "https://api.github.com/repos/rust-lang/rust/commits/d63b278c2ff01b73653397a5e2c469689ef0adf4", "html_url": "https://github.com/rust-lang/rust/commit/d63b278c2ff01b73653397a5e2c469689ef0adf4"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "f937970aa552f9b028d08168ec5427746ed222dd", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee639de007e952c006cee53278f9bc1fd773e7d9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee639de007e952c006cee53278f9bc1fd773e7d9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=ee639de007e952c006cee53278f9bc1fd773e7d9", "patch": "@@ -894,8 +894,6 @@ pub(super) fn check_impl_items_against_trait<'tcx>(\n     impl_trait_ref: ty::TraitRef<'tcx>,\n     impl_item_refs: &[hir::ImplItemRef<'_>],\n ) {\n-    let impl_span = tcx.sess.source_map().guess_head_span(full_impl_span);\n-\n     // If the trait reference itself is erroneous (so the compilation is going\n     // to fail), skip checking the items here -- the `impl_item` table in `tcx`\n     // isn't populated for such impls.\n@@ -1011,6 +1009,8 @@ pub(super) fn check_impl_items_against_trait<'tcx>(\n     }\n \n     if let Ok(ancestors) = trait_def.ancestors(tcx, impl_id.to_def_id()) {\n+        let impl_span = tcx.sess.source_map().guess_head_span(full_impl_span);\n+        \n         // Check for missing items from trait\n         let mut missing_items = Vec::new();\n         for trait_item in tcx.associated_items(impl_trait_ref.def_id).in_definition_order() {"}]}