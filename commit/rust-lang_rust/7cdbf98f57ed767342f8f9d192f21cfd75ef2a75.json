{"sha": "7cdbf98f57ed767342f8f9d192f21cfd75ef2a75", "node_id": "C_kwDOAAsO6NoAKDdjZGJmOThmNTdlZDc2NzM0MmY4ZjlkMTkyZjIxY2ZkNzVlZjJhNzU", "commit": {"author": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2022-07-02T17:22:22Z"}, "committer": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2022-07-02T17:22:22Z"}, "message": "Explain the behavior of the cache upon clear", "tree": {"sha": "1fb64e9a2c0bfe2ef42ac176732f010cbdd1d33a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fb64e9a2c0bfe2ef42ac176732f010cbdd1d33a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7cdbf98f57ed767342f8f9d192f21cfd75ef2a75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7cdbf98f57ed767342f8f9d192f21cfd75ef2a75", "html_url": "https://github.com/rust-lang/rust/commit/7cdbf98f57ed767342f8f9d192f21cfd75ef2a75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7cdbf98f57ed767342f8f9d192f21cfd75ef2a75/comments", "author": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17acc3f71cf8a8e4f2b3c82d453982dd08e13d07", "url": "https://api.github.com/repos/rust-lang/rust/commits/17acc3f71cf8a8e4f2b3c82d453982dd08e13d07", "html_url": "https://github.com/rust-lang/rust/commit/17acc3f71cf8a8e4f2b3c82d453982dd08e13d07"}], "stats": {"total": 23, "additions": 14, "deletions": 9}, "files": [{"sha": "5ad9b5dc5353a874594386fc75ae3e9f1ed02eed", "filename": "src/stacked_borrows/stack.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7cdbf98f57ed767342f8f9d192f21cfd75ef2a75/src%2Fstacked_borrows%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cdbf98f57ed767342f8f9d192f21cfd75ef2a75/src%2Fstacked_borrows%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows%2Fstack.rs?ref=7cdbf98f57ed767342f8f9d192f21cfd75ef2a75", "patch": "@@ -53,7 +53,7 @@ struct StackCache {\n impl StackCache {\n     /// When a tag is used, we call this function to add or refresh it in the cache.\n     ///\n-    /// We use position in the cache to represent how recently a tag was used; the first position\n+    /// We use the position in the cache to represent how recently a tag was used; the first position\n     /// is the most recently used tag. So an add shifts every element towards the end, and inserts\n     /// the new element at the start. We lose the last element.\n     /// This strategy is effective at keeping the most-accessed tags in the cache, but it costs a\n@@ -104,7 +104,7 @@ impl<'tcx> Stack {\n     /// index is given it means the match was *not* in the known part of the stack.\n     /// `Ok(None)` indicates it matched the \"unknown\" part of the stack.\n     /// `Err` indicates it was not found.\n-    pub fn find_granting(\n+    pub(super) fn find_granting(\n         &mut self,\n         access: AccessKind,\n         tag: SbTagExtra,\n@@ -167,9 +167,15 @@ impl<'tcx> Stack {\n \n     #[cfg(feature = \"stack-cache\")]\n     fn find_granting_cache(&mut self, access: AccessKind, tag: SbTag) -> Option<usize> {\n-        // When the borrow stack is empty, there are no tags we could put into the cache that would\n-        // be valid. Additionally, since lookups into the cache are a linear search it doesn't make\n-        // sense to use the cache when it is no smaller than a search of the borrow stack itself.\n+        // This looks like a common-sense optimization; we're going to do a linear search of the\n+        // cache or the borrow stack to scan the shorter of the two. This optimization is miniscule\n+        // and this check actually ensures we do not access an invalid cache.\n+        // When a stack is created and when tags are removed from the top of the borrow stack, we\n+        // need some valid value to populate the cache. In both cases, we try to use the bottom\n+        // item. But when the stack is cleared in `set_unknown_bottom` there is nothing we could\n+        // place in the cache that is correct. But due to the way we populate the cache in\n+        // `StackCache::add`, we know that when the borrow stack has grown larger than the cache,\n+        // every slot in the cache is valid.\n         if self.borrows.len() <= CACHE_LEN {\n             return None;\n         }\n@@ -261,6 +267,9 @@ impl<'tcx> Stack {\n     }\n \n     pub fn set_unknown_bottom(&mut self, tag: SbTag) {\n+        // We clear the borrow stack but the lookup cache doesn't support clearing per se. Instead,\n+        // there is a check explained in `find_granting_cache` which protects against accessing the\n+        // cache when it has been cleared and not yet refilled.\n         self.borrows.clear();\n         self.unknown_bottom = Some(tag);\n     }"}, {"sha": "92c00915cbfeb87138dfb0a59bf099bd8943ec05", "filename": "ui_test/Cargo.toml", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7cdbf98f57ed767342f8f9d192f21cfd75ef2a75/ui_test%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7cdbf98f57ed767342f8f9d192f21cfd75ef2a75/ui_test%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2FCargo.toml?ref=7cdbf98f57ed767342f8f9d192f21cfd75ef2a75", "patch": "@@ -14,7 +14,3 @@ crossbeam = \"0.8.1\"\n lazy_static = \"1.4.0\"\n serde = { version = \"1.0\", features = [\"derive\"] }\n serde_json = \"1.0\"\n-\n-[features]\n-# Doesn't do anything, but the miri script wants to pass the same flags to ui_test and miri itself\n-expensive-debug-assertions = []"}]}