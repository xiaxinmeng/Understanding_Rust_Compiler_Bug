{"sha": "22f8b8462ec7ca725415ca2db3e604ee75fd3251", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyZjhiODQ2MmVjN2NhNzI1NDE1Y2EyZGIzZTYwNGVlNzVmZDMyNTE=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-04-22T11:33:15Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-09-08T12:14:10Z"}, "message": "rustc: use a TypedArena to allocate types in the type context.", "tree": {"sha": "f0c9d2f45702b6c69a79f18ea9644078a53d479d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0c9d2f45702b6c69a79f18ea9644078a53d479d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22f8b8462ec7ca725415ca2db3e604ee75fd3251", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22f8b8462ec7ca725415ca2db3e604ee75fd3251", "html_url": "https://github.com/rust-lang/rust/commit/22f8b8462ec7ca725415ca2db3e604ee75fd3251", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22f8b8462ec7ca725415ca2db3e604ee75fd3251/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab7b1c896d5d929f3e150bf62c69b1459427a538", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab7b1c896d5d929f3e150bf62c69b1459427a538", "html_url": "https://github.com/rust-lang/rust/commit/ab7b1c896d5d929f3e150bf62c69b1459427a538"}], "stats": {"total": 62, "additions": 37, "deletions": 25}, "files": [{"sha": "4c71c2df44d3e167ab159ba25cd1f2f3b4d71215", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/22f8b8462ec7ca725415ca2db3e604ee75fd3251/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22f8b8462ec7ca725415ca2db3e604ee75fd3251/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=22f8b8462ec7ca725415ca2db3e604ee75fd3251", "patch": "@@ -32,6 +32,7 @@ use serialize::{json, Encodable};\n \n use std::io;\n use std::io::fs;\n+use arena::TypedArena;\n use syntax::ast;\n use syntax::attr;\n use syntax::attr::{AttrMetaMethods};\n@@ -86,8 +87,9 @@ pub fn compile_input(sess: Session,\n \n         if stop_after_phase_2(&sess) { return; }\n \n+        let type_arena = TypedArena::new();\n         let analysis = phase_3_run_analysis_passes(sess, &expanded_crate,\n-                                                   ast_map, id);\n+                                                   ast_map, &type_arena, id);\n         phase_save_analysis(&analysis.ty_cx.sess, &expanded_crate, &analysis, outdir);\n         if stop_after_phase_3(&analysis.ty_cx.sess) { return; }\n         let (tcx, trans) = phase_4_translate_to_llvm(expanded_crate, analysis);\n@@ -299,11 +301,11 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n     Some((krate, map))\n }\n \n-pub struct CrateAnalysis {\n+pub struct CrateAnalysis<'tcx> {\n     pub exp_map2: middle::resolve::ExportMap2,\n     pub exported_items: middle::privacy::ExportedItems,\n     pub public_items: middle::privacy::PublicItems,\n-    pub ty_cx: ty::ctxt,\n+    pub ty_cx: ty::ctxt<'tcx>,\n     pub reachable: NodeSet,\n     pub name: String,\n }\n@@ -312,10 +314,11 @@ pub struct CrateAnalysis {\n /// Run the resolution, typechecking, region checking and other\n /// miscellaneous analysis passes on the crate. Return various\n /// structures carrying the results of the analysis.\n-pub fn phase_3_run_analysis_passes(sess: Session,\n-                                   krate: &ast::Crate,\n-                                   ast_map: syntax::ast_map::Map,\n-                                   name: String) -> CrateAnalysis {\n+pub fn phase_3_run_analysis_passes<'tcx>(sess: Session,\n+                                         krate: &ast::Crate,\n+                                         ast_map: syntax::ast_map::Map,\n+                                         type_arena: &'tcx TypedArena<ty::t_box_>,\n+                                         name: String) -> CrateAnalysis<'tcx> {\n     let time_passes = sess.time_passes();\n \n     time(time_passes, \"external crate/lib resolution\", (), |_|\n@@ -362,6 +365,7 @@ pub fn phase_3_run_analysis_passes(sess: Session,\n                                stability::Index::build(krate));\n \n     let ty_cx = ty::mk_ctxt(sess,\n+                            type_arena,\n                             def_map,\n                             named_region_map,\n                             ast_map,"}, {"sha": "b535de69288023814b08612a35ffe46b86457403", "filename": "src/librustc/driver/pretty.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/22f8b8462ec7ca725415ca2db3e604ee75fd3251/src%2Flibrustc%2Fdriver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22f8b8462ec7ca725415ca2db3e604ee75fd3251/src%2Flibrustc%2Fdriver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fpretty.rs?ref=22f8b8462ec7ca725415ca2db3e604ee75fd3251", "patch": "@@ -33,7 +33,7 @@ use graphviz as dot;\n use std::io::{mod, MemReader};\n use std::from_str::FromStr;\n use std::option;\n-\n+use arena::TypedArena;\n \n #[deriving(PartialEq, Show)]\n pub enum PpSourceMode {\n@@ -114,7 +114,9 @@ impl PpSourceMode {\n             }\n             PpmTyped => {\n                 let ast_map = ast_map.expect(\"--pretty=typed missing ast_map\");\n-                let analysis = driver::phase_3_run_analysis_passes(sess, krate, ast_map, id);\n+                let type_arena = TypedArena::new();\n+                let analysis = driver::phase_3_run_analysis_passes(sess, krate, ast_map,\n+                                                                   &type_arena, id);\n                 let annotation = TypedAnnotation { analysis: analysis };\n                 f(&annotation, payload)\n             }\n@@ -531,8 +533,9 @@ pub fn pretty_print_input(sess: Session,\n             match code {\n                 Some(code) => {\n                     let variants = gather_flowgraph_variants(&sess);\n+                    let type_arena = TypedArena::new();\n                     let analysis = driver::phase_3_run_analysis_passes(sess, &krate,\n-                                                                       ast_map, id);\n+                                                                       ast_map, &type_arena, id);\n                     print_flowgraph(variants, analysis, code, out)\n                 }\n                 None => {"}, {"sha": "ff558ce5cffe0440c5fbdd1b8a46abf3c3a79c8c", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/22f8b8462ec7ca725415ca2db3e604ee75fd3251/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22f8b8462ec7ca725415ca2db3e604ee75fd3251/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=22f8b8462ec7ca725415ca2db3e604ee75fd3251", "patch": "@@ -50,6 +50,7 @@ use std::mem;\n use std::ops;\n use std::rc::Rc;\n use std::collections::{HashMap, HashSet};\n+use arena::TypedArena;\n use syntax::abi;\n use syntax::ast::{CrateNum, DefId, FnStyle, Ident, ItemTrait, LOCAL_CRATE};\n use syntax::ast::{MutImmutable, MutMutable, Name, NamedField, NodeId};\n@@ -418,10 +419,13 @@ pub struct TransmuteRestriction {\n /// The data structure to keep track of all the information that typechecker\n /// generates so that so that it can be reused and doesn't have to be redone\n /// later on.\n-pub struct ctxt {\n+pub struct ctxt<'tcx> {\n+    /// The arena that types are allocated from.\n+    type_arena: &'tcx TypedArena<t_box_>,\n+\n     /// Specifically use a speedy hash algorithm for this hash map, it's used\n     /// quite often.\n-    pub interner: RefCell<FnvHashMap<intern_key, Box<t_box_>>>,\n+    interner: RefCell<FnvHashMap<intern_key, &'tcx t_box_>>,\n     pub next_id: Cell<uint>,\n     pub sess: Session,\n     pub def_map: resolve::DefMap,\n@@ -1373,21 +1377,22 @@ impl UnboxedClosureKind {\n     }\n }\n \n-pub fn mk_ctxt(s: Session,\n-               dm: resolve::DefMap,\n-               named_region_map: resolve_lifetime::NamedRegionMap,\n-               map: ast_map::Map,\n-               freevars: freevars::freevar_map,\n-               capture_modes: freevars::CaptureModeMap,\n-               region_maps: middle::region::RegionMaps,\n-               lang_items: middle::lang_items::LanguageItems,\n-               stability: stability::Index)\n-               -> ctxt {\n+pub fn mk_ctxt<'tcx>(s: Session,\n+                     type_arena: &'tcx TypedArena<t_box_>,\n+                     dm: resolve::DefMap,\n+                     named_region_map: resolve_lifetime::NamedRegionMap,\n+                     map: ast_map::Map,\n+                     freevars: freevars::freevar_map,\n+                     capture_modes: freevars::CaptureModeMap,\n+                     region_maps: middle::region::RegionMaps,\n+                     lang_items: middle::lang_items::LanguageItems,\n+                     stability: stability::Index) -> ctxt<'tcx> {\n     ctxt {\n+        type_arena: type_arena,\n+        interner: RefCell::new(FnvHashMap::new()),\n         named_region_map: named_region_map,\n         item_variance_map: RefCell::new(DefIdMap::new()),\n         variance_computed: Cell::new(false),\n-        interner: RefCell::new(FnvHashMap::new()),\n         next_id: Cell::new(primitives::LAST_PRIMITIVE_ID),\n         sess: s,\n         def_map: dm,\n@@ -1554,11 +1559,11 @@ pub fn mk_t(cx: &ctxt, st: sty) -> t {\n       }\n     }\n \n-    let t = box t_box_ {\n+    let t = cx.type_arena.alloc(t_box_ {\n         sty: st,\n         id: cx.next_id.get(),\n         flags: flags,\n-    };\n+    });\n \n     let sty_ptr = &t.sty as *const sty;\n "}]}