{"sha": "cc30c202938e79126c4e94fc6719fc018f834cfb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjMzBjMjAyOTM4ZTc5MTI2YzRlOTRmYzY3MTlmYzAxOGY4MzRjZmI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-02-22T14:17:30Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-02-22T14:18:03Z"}, "message": "Silence some warnings", "tree": {"sha": "8264ed65c4e0700a870231420375ed894788934b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8264ed65c4e0700a870231420375ed894788934b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc30c202938e79126c4e94fc6719fc018f834cfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc30c202938e79126c4e94fc6719fc018f834cfb", "html_url": "https://github.com/rust-lang/rust/commit/cc30c202938e79126c4e94fc6719fc018f834cfb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc30c202938e79126c4e94fc6719fc018f834cfb/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43e23af7002f7e43a4ebe2d891367cab36cf0706", "url": "https://api.github.com/repos/rust-lang/rust/commits/43e23af7002f7e43a4ebe2d891367cab36cf0706", "html_url": "https://github.com/rust-lang/rust/commit/43e23af7002f7e43a4ebe2d891367cab36cf0706"}], "stats": {"total": 12, "additions": 7, "deletions": 5}, "files": [{"sha": "963354e4218649eed4438d9991e92f9d60b544b6", "filename": "src/base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cc30c202938e79126c4e94fc6719fc018f834cfb/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc30c202938e79126c4e94fc6719fc018f834cfb/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=cc30c202938e79126c4e94fc6719fc018f834cfb", "patch": "@@ -283,6 +283,7 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, impl Backend>) {\n \n fn trans_stmt<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+    #[allow(unused_variables)]\n     cur_block: Block,\n     stmt: &Statement<'tcx>,\n ) {"}, {"sha": "f9048ad401050621887f8c319fccb577cddbd31e", "filename": "src/debuginfo/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc30c202938e79126c4e94fc6719fc018f834cfb/src%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc30c202938e79126c4e94fc6719fc018f834cfb/src%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fmod.rs?ref=cc30c202938e79126c4e94fc6719fc018f834cfb", "patch": "@@ -124,10 +124,10 @@ impl<'tcx> DebugContext<'tcx> {\n             ty::Uint(_) => primitive(&mut self.dwarf, gimli::DW_ATE_unsigned),\n             ty::Int(_) => primitive(&mut self.dwarf, gimli::DW_ATE_signed),\n             ty::Float(_) => primitive(&mut self.dwarf, gimli::DW_ATE_float),\n-            ty::Ref(_, pointee_ty, mutbl)\n+            ty::Ref(_, pointee_ty, _mutbl)\n             | ty::RawPtr(ty::TypeAndMut {\n                 ty: pointee_ty,\n-                mutbl,\n+                mutbl: _mutbl,\n             }) => {\n                 let type_id = new_entry(&mut self.dwarf, gimli::DW_TAG_pointer_type);\n "}, {"sha": "53c699ef8c6289e849aa5e80ac0ae5d042ec5879", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cc30c202938e79126c4e94fc6719fc018f834cfb/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc30c202938e79126c4e94fc6719fc018f834cfb/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=cc30c202938e79126c4e94fc6719fc018f834cfb", "patch": "@@ -44,6 +44,7 @@ macro intrinsic_match {\n     $(\n         $($($name:tt).*)|+ $(if $cond:expr)?, $(<$($subst:ident),*>)? ($($a:ident $arg:ident),*) $content:block;\n     )*) => {\n+        let _ = $substs; // Silence warning when substs is unused.\n         match $intrinsic {\n             $(\n                 $(intrinsic_pat!($($name).*))|* $(if $cond)? => {"}, {"sha": "4d7bec0f06ee6a11cb4fd3ccab0e8c4b9875004b", "filename": "src/intrinsics/simd.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc30c202938e79126c4e94fc6719fc018f834cfb/src%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc30c202938e79126c4e94fc6719fc018f834cfb/src%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fsimd.rs?ref=cc30c202938e79126c4e94fc6719fc018f834cfb", "patch": "@@ -17,7 +17,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n     intrinsic_match! {\n         fx, intrinsic, substs, args,\n         _ => {\n-            fx.tcx.sess.fatal(&format!(\"Unknown SIMD intrinsic {}\", intrinsic));\n+            fx.tcx.sess.span_fatal(span, &format!(\"Unknown SIMD intrinsic {}\", intrinsic));\n         };\n \n         simd_cast, (c a) {\n@@ -104,7 +104,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             }\n         };\n \n-        simd_insert, (c base, o idx, v val) {\n+        simd_insert, (c base, o idx, v _val) {\n             let idx_const = if let Some(idx_const) = crate::constant::mir_operand_get_const_val(fx, idx) {\n                 idx_const\n             } else {"}, {"sha": "4e9cff76365589d9767eb47ba33795cfebdc8028", "filename": "src/optimize/stack2reg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc30c202938e79126c4e94fc6719fc018f834cfb/src%2Foptimize%2Fstack2reg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc30c202938e79126c4e94fc6719fc018f834cfb/src%2Foptimize%2Fstack2reg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foptimize%2Fstack2reg.rs?ref=cc30c202938e79126c4e94fc6719fc018f834cfb", "patch": "@@ -155,7 +155,7 @@ impl<'a> OptimizeContext<'a> {\n \n pub(super) fn optimize_function<T: std::fmt::Debug>(\n     ctx: &mut Context,\n-    clif_comments: &mut crate::pretty_clif::CommentWriter,\n+    _clif_comments: &mut crate::pretty_clif::CommentWriter,\n     name: T,\n ) {\n     combine_stack_addr_with_load_store(&mut ctx.func);"}]}