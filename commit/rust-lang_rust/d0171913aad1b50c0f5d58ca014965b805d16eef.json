{"sha": "d0171913aad1b50c0f5d58ca014965b805d16eef", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwMTcxOTEzYWFkMWI1MGMwZjVkNThjYTAxNDk2NWI4MDVkMTZlZWY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-20T02:17:05Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-20T02:17:05Z"}, "message": "rt: Remove rustboot's GC infrastructure", "tree": {"sha": "254264371e81334cfd08a855fb84588215bcacba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/254264371e81334cfd08a855fb84588215bcacba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0171913aad1b50c0f5d58ca014965b805d16eef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0171913aad1b50c0f5d58ca014965b805d16eef", "html_url": "https://github.com/rust-lang/rust/commit/d0171913aad1b50c0f5d58ca014965b805d16eef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0171913aad1b50c0f5d58ca014965b805d16eef/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fa86672ab21a3ef437bbf3af17972091fb9e146", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fa86672ab21a3ef437bbf3af17972091fb9e146", "html_url": "https://github.com/rust-lang/rust/commit/8fa86672ab21a3ef437bbf3af17972091fb9e146"}], "stats": {"total": 132, "additions": 6, "deletions": 126}, "files": [{"sha": "044239065e9ef7ba4391599b0004683c055c7a5d", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0171913aad1b50c0f5d58ca014965b805d16eef/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d0171913aad1b50c0f5d58ca014965b805d16eef/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=d0171913aad1b50c0f5d58ca014965b805d16eef", "patch": "@@ -118,7 +118,7 @@ refcount(rust_task *task, type_desc *t, intptr_t *v) {\n \n extern \"C\" CDECL void\n do_gc(rust_task *task) {\n-    task->gc();\n+    // TODO\n }\n \n extern \"C\" CDECL void"}, {"sha": "b83c54ed73c21a20ccb2cddd65d9cbd6bb695519", "filename": "src/rt/rust_gc.cpp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d0171913aad1b50c0f5d58ca014965b805d16eef/src%2Frt%2Frust_gc.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d0171913aad1b50c0f5d58ca014965b805d16eef/src%2Frt%2Frust_gc.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_gc.cpp?ref=d0171913aad1b50c0f5d58ca014965b805d16eef", "patch": "@@ -137,6 +137,7 @@ gc::mark(std::vector<root> &roots) {\n         shape::log log(task, ri->tydesc->shape, params,\n                        ri->tydesc->shape_tables, ri->data, std::cerr);\n         log.walk(true);\n+        DPRINT(\"\\n\");\n \n         ++ri;\n     }"}, {"sha": "bd8fe5c38e85a7e4b229e98fd076e7043a322fcd", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 3, "deletions": 88, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/d0171913aad1b50c0f5d58ca014965b805d16eef/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d0171913aad1b50c0f5d58ca014965b805d16eef/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=d0171913aad1b50c0f5d58ca014965b805d16eef", "patch": "@@ -258,14 +258,6 @@ rust_task::fail() {\n     failed = true;\n }\n \n-void\n-rust_task::gc()\n-{\n-    // FIXME: not presently implemented; was broken by rustc.\n-    DLOG(sched, task,\n-             \"task %s @0x%\" PRIxPTR \" garbage collecting\", name, this);\n-}\n-\n void\n rust_task::unsupervise()\n {\n@@ -320,99 +312,22 @@ rust_task::dead()\n     return state == &sched->dead_tasks;\n }\n \n-void\n-rust_task::link_gc(gc_alloc *gcm) {\n-    I(sched, gcm->prev == NULL);\n-    I(sched, gcm->next == NULL);\n-    gcm->prev = NULL;\n-    gcm->next = gc_alloc_chain;\n-    gc_alloc_chain = gcm;\n-    if (gcm->next)\n-        gcm->next->prev = gcm;\n-}\n-\n-void\n-rust_task::unlink_gc(gc_alloc *gcm) {\n-    if (gcm->prev)\n-        gcm->prev->next = gcm->next;\n-    if (gcm->next)\n-        gcm->next->prev = gcm->prev;\n-    if (gc_alloc_chain == gcm)\n-        gc_alloc_chain = gcm->next;\n-    gcm->prev = NULL;\n-    gcm->next = NULL;\n-}\n-\n void *\n rust_task::malloc(size_t sz, const char *tag, type_desc *td)\n {\n-    // FIXME: GC is disabled for now.\n-    // GC-memory classification is all wrong.\n-    td = NULL;\n-\n-    if (td) {\n-        sz += sizeof(gc_alloc);\n-    }\n-\n-    void *mem = local_region.malloc(sz, tag);\n-    if (!mem)\n-        return mem;\n-    if (td) {\n-        gc_alloc *gcm = (gc_alloc*) mem;\n-        DLOG(sched, task, \"task %s @0x%\" PRIxPTR\n-             \" allocated %d GC bytes = 0x%\" PRIxPTR,\n-             name, (uintptr_t)this, sz, gcm);\n-        memset((void*) gcm, 0, sizeof(gc_alloc));\n-        link_gc(gcm);\n-        gcm->ctrl_word = (uintptr_t)td;\n-        gc_alloc_accum += sz;\n-        mem = (void*) &(gcm->data);\n-    }\n-    return mem;;\n+    return local_region.malloc(sz, tag);\n }\n \n void *\n rust_task::realloc(void *data, size_t sz, bool is_gc)\n {\n-    // FIXME: GC is disabled for now.\n-    // Effects, GC-memory classification is all wrong.\n-    is_gc = false;\n-    if (is_gc) {\n-        gc_alloc *gcm = (gc_alloc*)(((char *)data) - sizeof(gc_alloc));\n-        unlink_gc(gcm);\n-        sz += sizeof(gc_alloc);\n-        gcm = (gc_alloc*) local_region.realloc((void*)gcm, sz);\n-        DLOG(sched, task, \"task %s @0x%\" PRIxPTR\n-             \" reallocated %d GC bytes = 0x%\" PRIxPTR,\n-             name, (uintptr_t)this, sz, gcm);\n-        if (!gcm)\n-            return gcm;\n-        link_gc(gcm);\n-        data = (void*) &(gcm->data);\n-    } else {\n-        data = local_region.realloc(data, sz);\n-    }\n-    return data;\n+    return local_region.realloc(data, sz);\n }\n \n void\n rust_task::free(void *p, bool is_gc)\n {\n-    // FIXME: GC is disabled for now.\n-    // GC-memory classification is all wrong.\n-    is_gc = false;\n-    if (is_gc) {\n-        gc_alloc *gcm = (gc_alloc*)(((char *)p) - sizeof(gc_alloc));\n-        unlink_gc(gcm);\n-        DLOG(sched, mem,\n-             \"task %s @0x%\" PRIxPTR \" freeing GC memory = 0x%\" PRIxPTR,\n-             name, (uintptr_t)this, gcm);\n-        DLOG(sched, mem, \"rust_task::free(0x%\" PRIxPTR \")\", gcm);\n-        local_region.free(gcm);\n-    } else {\n-        DLOG(sched, mem, \"rust_task::free(0x%\" PRIxPTR \")\", p);\n-        local_region.free(p);\n-    }\n+    local_region.free(p);\n }\n \n void"}, {"sha": "4fc37ca1ee94bb17384d3a452012806b5f7203f0", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d0171913aad1b50c0f5d58ca014965b805d16eef/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/d0171913aad1b50c0f5d58ca014965b805d16eef/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=d0171913aad1b50c0f5d58ca014965b805d16eef", "patch": "@@ -22,19 +22,6 @@ struct frame_glue_fns {\n     uintptr_t reloc_glue_off;\n };\n \n-struct gc_alloc {\n-    gc_alloc *prev;\n-    gc_alloc *next;\n-    uintptr_t ctrl_word;\n-    uint8_t data[];\n-    bool mark() {\n-        if (ctrl_word & 1)\n-            return false;\n-        ctrl_word |= 1;\n-        return true;\n-    }\n-};\n-\n // portions of the task structure that are accessible from the standard\n // library. This struct must agree with the std::task::rust_task record.\n struct rust_task_user {\n@@ -69,7 +56,7 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n     // Fields known to the compiler.\n     stk_seg *stk;\n     uintptr_t runtime_sp;      // Runtime sp while task running.\n-    gc_alloc *gc_alloc_chain;  // Linked list of GC allocations.\n+    void *gc_alloc_chain;      // Linked list of GC allocations.\n     rust_scheduler *sched;\n     rust_crate_cache *cache;\n \n@@ -81,8 +68,6 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n     const char *cond_name;\n     rust_task *supervisor;     // Parent-link for failure propagation.\n     int32_t list_index;\n-    size_t gc_alloc_thresh;\n-    size_t gc_alloc_accum;\n \n     rust_port_id next_port_id;\n \n@@ -141,8 +126,6 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n     bool blocked_on(rust_cond *cond);\n     bool dead();\n \n-    void link_gc(gc_alloc *gcm);\n-    void unlink_gc(gc_alloc *gcm);\n     void *malloc(size_t sz, const char *tag, type_desc *td=0);\n     void *realloc(void *data, size_t sz, bool gc_mem=false);\n     void free(void *p, bool gc_mem=false);\n@@ -169,9 +152,6 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n     // Fail self, assuming caller-on-stack is this task.\n     void fail();\n \n-    // Run the gc glue on the task stack.\n-    void gc();\n-\n     // Disconnect from our supervisor.\n     void unsupervise();\n "}, {"sha": "775b4b54a0f12d9379c1bfa9bf681ab1015ee544", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d0171913aad1b50c0f5d58ca014965b805d16eef/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d0171913aad1b50c0f5d58ca014965b805d16eef/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=d0171913aad1b50c0f5d58ca014965b805d16eef", "patch": "@@ -189,21 +189,6 @@ upcall_shared_free(rust_task *task, void* ptr) {\n     task->kernel->free(ptr);\n }\n \n-extern \"C\" CDECL uintptr_t\n-upcall_mark(rust_task *task, void* ptr) {\n-    LOG_UPCALL_ENTRY(task);\n-\n-    rust_scheduler *sched = task->sched;\n-    if (ptr) {\n-        gc_alloc *gcm = (gc_alloc*) (((char*)ptr) - sizeof(gc_alloc));\n-        uintptr_t marked = (uintptr_t) gcm->mark();\n-        DLOG(sched, gc, \"upcall mark(0x%\" PRIxPTR \") = %\" PRIdPTR,\n-                 (uintptr_t)gcm, marked);\n-        return marked;\n-    }\n-    return 0;\n-}\n-\n rust_str *make_str(rust_task *task, char const *s, size_t fill) {\n     size_t alloc = next_power_of_two(sizeof(rust_str) + fill);\n     void *mem = task->malloc(alloc, \"rust_str (make_str)\");"}, {"sha": "58aa681f6330f48737d07334c9b4286c4aacc886", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d0171913aad1b50c0f5d58ca014965b805d16eef/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/d0171913aad1b50c0f5d58ca014965b805d16eef/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=d0171913aad1b50c0f5d58ca014965b805d16eef", "patch": "@@ -97,7 +97,6 @@ upcall_log_istr\n upcall_log_str\n upcall_log_type\n upcall_malloc\n-upcall_mark\n upcall_new_str\n upcall_shared_malloc\n upcall_shared_free"}]}