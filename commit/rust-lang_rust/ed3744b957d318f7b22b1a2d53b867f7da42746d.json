{"sha": "ed3744b957d318f7b22b1a2d53b867f7da42746d", "node_id": "C_kwDOAAsO6NoAKGVkMzc0NGI5NTdkMzE4ZjdiMjJiMWEyZDUzYjg2N2Y3ZGE0Mjc0NmQ", "commit": {"author": {"name": "yonip23", "email": "yoni@tabnine.com", "date": "2022-05-12T23:20:28Z"}, "committer": {"name": "yonip23", "email": "yoni@tabnine.com", "date": "2022-05-12T23:20:28Z"}, "message": "inline construct_lint_suggestions", "tree": {"sha": "109f8c67cfac88f973895e37221ec68263e69d21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/109f8c67cfac88f973895e37221ec68263e69d21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed3744b957d318f7b22b1a2d53b867f7da42746d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed3744b957d318f7b22b1a2d53b867f7da42746d", "html_url": "https://github.com/rust-lang/rust/commit/ed3744b957d318f7b22b1a2d53b867f7da42746d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed3744b957d318f7b22b1a2d53b867f7da42746d/comments", "author": {"login": "yonip23", "id": 67855609, "node_id": "MDQ6VXNlcjY3ODU1NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/67855609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yonip23", "html_url": "https://github.com/yonip23", "followers_url": "https://api.github.com/users/yonip23/followers", "following_url": "https://api.github.com/users/yonip23/following{/other_user}", "gists_url": "https://api.github.com/users/yonip23/gists{/gist_id}", "starred_url": "https://api.github.com/users/yonip23/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yonip23/subscriptions", "organizations_url": "https://api.github.com/users/yonip23/orgs", "repos_url": "https://api.github.com/users/yonip23/repos", "events_url": "https://api.github.com/users/yonip23/events{/privacy}", "received_events_url": "https://api.github.com/users/yonip23/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yonip23", "id": 67855609, "node_id": "MDQ6VXNlcjY3ODU1NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/67855609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yonip23", "html_url": "https://github.com/yonip23", "followers_url": "https://api.github.com/users/yonip23/followers", "following_url": "https://api.github.com/users/yonip23/following{/other_user}", "gists_url": "https://api.github.com/users/yonip23/gists{/gist_id}", "starred_url": "https://api.github.com/users/yonip23/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yonip23/subscriptions", "organizations_url": "https://api.github.com/users/yonip23/orgs", "repos_url": "https://api.github.com/users/yonip23/repos", "events_url": "https://api.github.com/users/yonip23/events{/privacy}", "received_events_url": "https://api.github.com/users/yonip23/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc23b5d661f828ddace3ccc65c5a53b0f43c1dd4", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc23b5d661f828ddace3ccc65c5a53b0f43c1dd4", "html_url": "https://github.com/rust-lang/rust/commit/dc23b5d661f828ddace3ccc65c5a53b0f43c1dd4"}], "stats": {"total": 61, "additions": 19, "deletions": 42}, "files": [{"sha": "110f58f3734dfc348e9d00f72cd7dfce3cf4d464", "filename": "clippy_lints/src/rc_clone_in_vec_init.rs", "status": "modified", "additions": 19, "deletions": 42, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/ed3744b957d318f7b22b1a2d53b867f7da42746d/clippy_lints%2Fsrc%2Frc_clone_in_vec_init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed3744b957d318f7b22b1a2d53b867f7da42746d/clippy_lints%2Fsrc%2Frc_clone_in_vec_init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Frc_clone_in_vec_init.rs?ref=ed3744b957d318f7b22b1a2d53b867f7da42746d", "patch": "@@ -56,39 +56,6 @@ impl LateLintPass<'_> for RcCloneInVecInit {\n     }\n }\n \n-struct LintSuggestion {\n-    message: String,\n-    snippet: String,\n-}\n-\n-fn construct_lint_suggestions(\n-    cx: &LateContext<'_>,\n-    span: Span,\n-    symbol_name: &str,\n-    elem: &Expr<'_>,\n-    len: &Expr<'_>,\n-) -> Vec<LintSuggestion> {\n-    let len_snippet = snippet(cx, len.span, \"..\");\n-    let elem_snippet = elem_snippet(cx, elem, symbol_name);\n-    let indentation = indent_of(cx, span).unwrap_or(0);\n-    let indentation = \" \".repeat(indentation);\n-    let loop_init_suggestion = loop_init_suggestion(&elem_snippet, len_snippet.as_ref(), &indentation);\n-    let extract_suggestion = extract_suggestion(&elem_snippet, len_snippet.as_ref(), &indentation);\n-\n-    vec![\n-        LintSuggestion {\n-            message: format!(\"consider initializing each `{symbol_name}` element individually\"),\n-            snippet: loop_init_suggestion,\n-        },\n-        LintSuggestion {\n-            message: format!(\n-                \"or if this is intentional, consider extracting the `{symbol_name}` initialization to a variable\"\n-            ),\n-            snippet: extract_suggestion,\n-        },\n-    ]\n-}\n-\n fn elem_snippet(cx: &LateContext<'_>, elem: &Expr<'_>, symbol_name: &str) -> String {\n     let elem_snippet = snippet(cx, elem.span, \"..\").to_string();\n     if elem_snippet.contains('\\n') {\n@@ -131,17 +98,27 @@ fn emit_lint(cx: &LateContext<'_>, symbol: Symbol, lint_span: Span, elem: &Expr<\n         lint_span,\n         &format!(\"calling `{symbol_name}::new` in `vec![elem; len]`\"),\n         |diag| {\n-            let suggestions = construct_lint_suggestions(cx, lint_span, symbol_name, elem, len);\n+            let len_snippet = snippet(cx, len.span, \"..\");\n+            let elem_snippet = elem_snippet(cx, elem, symbol_name);\n+            let indentation = \" \".repeat(indent_of(cx, lint_span).unwrap_or(0));\n+            let loop_init_suggestion = loop_init_suggestion(&elem_snippet, len_snippet.as_ref(), &indentation);\n+            let extract_suggestion = extract_suggestion(&elem_snippet, len_snippet.as_ref(), &indentation);\n \n             diag.note(format!(\"each element will point to the same `{symbol_name}` instance\"));\n-            for suggestion in suggestions {\n-                diag.span_suggestion(\n-                    lint_span,\n-                    &suggestion.message,\n-                    &suggestion.snippet,\n-                    Applicability::Unspecified,\n-                );\n-            }\n+            diag.span_suggestion(\n+                lint_span,\n+                format!(\"consider initializing each `{symbol_name}` element individually\"),\n+                loop_init_suggestion,\n+                Applicability::Unspecified,\n+            );\n+            diag.span_suggestion(\n+                lint_span,\n+                format!(\n+                    \"or if this is intentional, consider extracting the `{symbol_name}` initialization to a variable\"\n+                ),\n+                extract_suggestion,\n+                Applicability::Unspecified,\n+            );\n         },\n     );\n }"}]}