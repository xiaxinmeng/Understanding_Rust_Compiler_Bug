{"sha": "a76690f6a4292a9ca67e9b0efc70c2a82fb9f187", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3NjY5MGY2YTQyOTJhOWNhNjdlOWIwZWZjNzBjMmE4MmZiOWYxODc=", "commit": {"author": {"name": "csmoe", "email": "35686186+csmoe@users.noreply.github.com", "date": "2018-10-20T03:11:01Z"}, "committer": {"name": "csmoe", "email": "35686186+csmoe@users.noreply.github.com", "date": "2018-10-22T12:28:37Z"}, "message": "optimize unsupported literal diag message", "tree": {"sha": "4392924f6170a025ecb0d6c734c25a4650d81838", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4392924f6170a025ecb0d6c734c25a4650d81838"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a76690f6a4292a9ca67e9b0efc70c2a82fb9f187", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a76690f6a4292a9ca67e9b0efc70c2a82fb9f187", "html_url": "https://github.com/rust-lang/rust/commit/a76690f6a4292a9ca67e9b0efc70c2a82fb9f187", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a76690f6a4292a9ca67e9b0efc70c2a82fb9f187/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb7c76bad551255b174958ccbfe7b7cda7f53897", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb7c76bad551255b174958ccbfe7b7cda7f53897", "html_url": "https://github.com/rust-lang/rust/commit/fb7c76bad551255b174958ccbfe7b7cda7f53897"}], "stats": {"total": 137, "additions": 87, "deletions": 50}, "files": [{"sha": "1bbc1accc07d64943801dfd98636a312c03a702c", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 70, "deletions": 39, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/a76690f6a4292a9ca67e9b0efc70c2a82fb9f187/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a76690f6a4292a9ca67e9b0efc70c2a82fb9f187/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=a76690f6a4292a9ca67e9b0efc70c2a82fb9f187", "patch": "@@ -24,10 +24,10 @@ enum AttrError {\n     MissingSince,\n     MissingFeature,\n     MultipleStabilityLevels,\n-    UnsupportedLiteral\n+    UnsupportedLiteral(&'static str, /* is_bytestr */ bool),\n }\n \n-fn handle_errors(sess: &ParseSess, span: Span, error: AttrError, is_bytestr: bool) {\n+fn handle_errors(sess: &ParseSess, span: Span, error: AttrError) {\n     let diag = &sess.span_diagnostic;\n     match error {\n         AttrError::MultipleItem(item) => span_err!(diag, span, E0538,\n@@ -45,13 +45,11 @@ fn handle_errors(sess: &ParseSess, span: Span, error: AttrError, is_bytestr: boo\n         AttrError::MissingFeature => span_err!(diag, span, E0546, \"missing 'feature'\"),\n         AttrError::MultipleStabilityLevels => span_err!(diag, span, E0544,\n                                                         \"multiple stability levels\"),\n-        AttrError::UnsupportedLiteral => {\n-            let mut err = struct_span_err!(\n-                diag,\n-                span,\n-                E0565,\n-                \"unsupported literal\",\n-            );\n+        AttrError::UnsupportedLiteral(\n+            msg,\n+            is_bytestr,\n+        ) => {\n+            let mut err = struct_span_err!(diag, span, E0565, \"{}\", msg);\n             if is_bytestr {\n                 if let Ok(lint_str) = sess.source_map().span_to_snippet(span) {\n                     err.span_suggestion_with_applicability(\n@@ -222,7 +220,7 @@ fn find_stability_generic<'a, I>(sess: &ParseSess,\n             let meta = meta.as_ref().unwrap();\n             let get = |meta: &MetaItem, item: &mut Option<Symbol>| {\n                 if item.is_some() {\n-                    handle_errors(sess, meta.span, AttrError::MultipleItem(meta.name()), false);\n+                    handle_errors(sess, meta.span, AttrError::MultipleItem(meta.name()));\n                     return false\n                 }\n                 if let Some(v) = meta.value_str() {\n@@ -252,13 +250,19 @@ fn find_stability_generic<'a, I>(sess: &ParseSess,\n                                         sess,\n                                         mi.span,\n                                         AttrError::UnknownMetaItem(mi.name(), expected),\n-                                        false,\n                                     );\n                                     continue 'outer\n                                 }\n                             }\n                         } else {\n-                            handle_errors(sess, meta.span, AttrError::UnsupportedLiteral, false);\n+                            handle_errors(\n+                                sess,\n+                                meta.span,\n+                                AttrError::UnsupportedLiteral(\n+                                    \"unsupported literal\",\n+                                    false,\n+                                ),\n+                            );\n                             continue 'outer\n                         }\n                     }\n@@ -283,7 +287,7 @@ fn find_stability_generic<'a, I>(sess: &ParseSess,\n                             })\n                         }\n                         (None, _) => {\n-                            handle_errors(sess, attr.span(), AttrError::MissingSince, false);\n+                            handle_errors(sess, attr.span(), AttrError::MissingSince);\n                             continue\n                         }\n                         _ => {\n@@ -309,7 +313,7 @@ fn find_stability_generic<'a, I>(sess: &ParseSess,\n                 }\n                 \"unstable\" => {\n                     if stab.is_some() {\n-                        handle_errors(sess, attr.span(), AttrError::MultipleStabilityLevels, false);\n+                        handle_errors(sess, attr.span(), AttrError::MultipleStabilityLevels);\n                         break\n                     }\n \n@@ -330,13 +334,19 @@ fn find_stability_generic<'a, I>(sess: &ParseSess,\n                                             mi.name(),\n                                             &[\"feature\", \"reason\", \"issue\"]\n                                         ),\n-                                        false,\n                                     );\n                                     continue 'outer\n                                 }\n                             }\n                         } else {\n-                            handle_errors(sess, meta.span, AttrError::UnsupportedLiteral, false);\n+                            handle_errors(\n+                                sess,\n+                                meta.span,\n+                                AttrError::UnsupportedLiteral(\n+                                    \"unsupported literal\",\n+                                    false,\n+                                ),\n+                            );\n                             continue 'outer\n                         }\n                     }\n@@ -363,7 +373,7 @@ fn find_stability_generic<'a, I>(sess: &ParseSess,\n                             })\n                         }\n                         (None, _, _) => {\n-                            handle_errors(sess, attr.span(), AttrError::MissingFeature, false);\n+                            handle_errors(sess, attr.span(), AttrError::MissingFeature);\n                             continue\n                         }\n                         _ => {\n@@ -374,7 +384,7 @@ fn find_stability_generic<'a, I>(sess: &ParseSess,\n                 }\n                 \"stable\" => {\n                     if stab.is_some() {\n-                        handle_errors(sess, attr.span(), AttrError::MultipleStabilityLevels, false);\n+                        handle_errors(sess, attr.span(), AttrError::MultipleStabilityLevels);\n                         break\n                     }\n \n@@ -393,7 +403,6 @@ fn find_stability_generic<'a, I>(sess: &ParseSess,\n                                             AttrError::UnknownMetaItem(\n                                                 mi.name(), &[\"since\", \"note\"],\n                                             ),\n-                                            false,\n                                         );\n                                         continue 'outer\n                                     }\n@@ -402,9 +411,11 @@ fn find_stability_generic<'a, I>(sess: &ParseSess,\n                             NestedMetaItemKind::Literal(lit) => {\n                                 handle_errors(\n                                     sess,\n-                                    meta.span,\n-                                    AttrError::UnsupportedLiteral,\n-                                    lit.node.is_bytestr()\n+                                    lit.span,\n+                                    AttrError::UnsupportedLiteral(\n+                                        \"unsupported literal\",\n+                                        false,\n+                                    ),\n                                 );\n                                 continue 'outer\n                             }\n@@ -424,11 +435,11 @@ fn find_stability_generic<'a, I>(sess: &ParseSess,\n                             })\n                         }\n                         (None, _) => {\n-                            handle_errors(sess, attr.span(), AttrError::MissingFeature, false);\n+                            handle_errors(sess, attr.span(), AttrError::MissingFeature);\n                             continue\n                         }\n                         _ => {\n-                            handle_errors(sess, attr.span(), AttrError::MissingSince, false);\n+                            handle_errors(sess, attr.span(), AttrError::MissingSince);\n                             continue\n                         }\n                     }\n@@ -498,8 +509,11 @@ pub fn cfg_matches(cfg: &ast::MetaItem, sess: &ParseSess, features: Option<&Feat\n             MetaItemKind::NameValue(lit) if !lit.node.is_str() => {\n                 handle_errors(\n                     sess,\n-                    lit.span, AttrError::UnsupportedLiteral,\n-                    lit.node.is_bytestr(),\n+                    lit.span,\n+                    AttrError::UnsupportedLiteral(\n+                        \"literal in `cfg` predicate value must be a string\",\n+                        lit.node.is_bytestr()\n+                    ),\n                 );\n                 true\n             }\n@@ -520,7 +534,14 @@ pub fn eval_condition<F>(cfg: &ast::MetaItem, sess: &ParseSess, eval: &mut F)\n         ast::MetaItemKind::List(ref mis) => {\n             for mi in mis.iter() {\n                 if !mi.is_meta_item() {\n-                    handle_errors(sess, mi.span, AttrError::UnsupportedLiteral, false);\n+                    handle_errors(\n+                        sess,\n+                        mi.span,\n+                        AttrError::UnsupportedLiteral(\n+                            \"unsupported literal\",\n+                            false\n+                        ),\n+                    );\n                     return false;\n                 }\n             }\n@@ -591,7 +612,7 @@ fn find_deprecation_generic<'a, I>(sess: &ParseSess,\n         depr = if let Some(metas) = attr.meta_item_list() {\n             let get = |meta: &MetaItem, item: &mut Option<Symbol>| {\n                 if item.is_some() {\n-                    handle_errors(sess, meta.span, AttrError::MultipleItem(meta.name()), false);\n+                    handle_errors(sess, meta.span, AttrError::MultipleItem(meta.name()));\n                     return false\n                 }\n                 if let Some(v) = meta.value_str() {\n@@ -602,8 +623,11 @@ fn find_deprecation_generic<'a, I>(sess: &ParseSess,\n                         handle_errors(\n                             sess,\n                             lit.span,\n-                            AttrError::UnsupportedLiteral,\n-                            lit.node.is_bytestr(),\n+                            AttrError::UnsupportedLiteral(\n+                                \"literal in `deprecated` \\\n+                                value must be a string\",\n+                                lit.node.is_bytestr()\n+                            ),\n                         );\n                     } else {\n                         span_err!(diagnostic, meta.span, E0551, \"incorrect meta item\");\n@@ -626,15 +650,20 @@ fn find_deprecation_generic<'a, I>(sess: &ParseSess,\n                                     sess,\n                                     meta.span,\n                                     AttrError::UnknownMetaItem(mi.name(), &[\"since\", \"note\"]),\n-                                    false,\n                                 );\n                                 continue 'outer\n                             }\n                         }\n                     }\n                     NestedMetaItemKind::Literal(lit) => {\n-                        let is_bytestr = lit.node.is_bytestr();\n-                        handle_errors(sess, lit.span, AttrError::UnsupportedLiteral, is_bytestr);\n+                        handle_errors(\n+                            sess,\n+                            lit.span,\n+                            AttrError::UnsupportedLiteral(\n+                                \"item in `deprecated` must be a key/value pair\",\n+                                false,\n+                            ),\n+                        );\n                         continue 'outer\n                     }\n                 }\n@@ -694,12 +723,14 @@ pub fn find_repr_attrs(sess: &ParseSess, attr: &Attribute) -> Vec<ReprAttr> {\n             mark_used(attr);\n             for item in items {\n                 if !item.is_meta_item() {\n-                    let (span, is_bytestr) = if let Some(lit) = item.literal() {\n-                        (lit.span, lit.node.is_bytestr())\n-                    } else {\n-                        (item.span, false)\n-                    };\n-                    handle_errors(sess, span, AttrError::UnsupportedLiteral, is_bytestr);\n+                    handle_errors(\n+                        sess,\n+                        item.span,\n+                        AttrError::UnsupportedLiteral(\n+                            \"meta item in `repr` must be an identifier\",\n+                            false,\n+                        ),\n+                    );\n                     continue\n                 }\n "}, {"sha": "539c0777d66bc3d1a4c6c483c465ffa9c7096154", "filename": "src/test/ui/conditional-compilation/cfg-attr-syntax-validation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a76690f6a4292a9ca67e9b0efc70c2a82fb9f187/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-syntax-validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a76690f6a4292a9ca67e9b0efc70c2a82fb9f187/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-syntax-validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-syntax-validation.rs?ref=a76690f6a4292a9ca67e9b0efc70c2a82fb9f187", "patch": "@@ -19,10 +19,10 @@ struct S6;\n #[cfg(a())] //~ ERROR invalid predicate `a`\n struct S7;\n \n-#[cfg(a = 10)] //~ ERROR unsupported literal\n+#[cfg(a = 10)] //~ ERROR literal in `cfg` predicate value must be a string\n struct S8;\n \n-#[deprecated(since = b\"1.30\", note = \"hi\")] //~ ERROR E0565\n+#[cfg(a = b\"hi\")]\n struct S9;\n \n macro_rules! generate_s10 {"}, {"sha": "84a5728c6ce0f19b0de5be6c5090997a32c7ef8b", "filename": "src/test/ui/conditional-compilation/cfg-attr-syntax-validation.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a76690f6a4292a9ca67e9b0efc70c2a82fb9f187/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-syntax-validation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a76690f6a4292a9ca67e9b0efc70c2a82fb9f187/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-syntax-validation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-syntax-validation.stderr?ref=a76690f6a4292a9ca67e9b0efc70c2a82fb9f187", "patch": "@@ -40,22 +40,28 @@ error[E0537]: invalid predicate `a`\n LL | #[cfg(a())] //~ ERROR invalid predicate `a`\n    |       ^^^\n \n-error[E0565]: unsupported literal\n+error[E0565]: literal in `cfg` predicate value must be a string\n   --> $DIR/cfg-attr-syntax-validation.rs:22:11\n    |\n-LL | #[cfg(a = 10)] //~ ERROR unsupported literal\n+LL | #[cfg(a = 10)] //~ ERROR literal in `cfg` predicate value must be a string\n    |           ^^\n \n+error[E0565]: literal in `cfg` predicate value must be a string\n+  --> $DIR/cfg-attr-syntax-validation.rs:25:11\n+   |\n+LL | #[cfg(a = b\"hi\")]\n+   |           ^^^^^ help: consider removing the prefix: `\"hi\"`\n+\n error: `cfg` is not a well-formed meta-item\n-  --> $DIR/cfg-attr-syntax-validation.rs:27:9\n+  --> $DIR/cfg-attr-syntax-validation.rs:30:9\n    |\n LL |         #[cfg(feature = $expr)] //~ ERROR `cfg` is not a well-formed meta-item\n    |         ^^^^^^^^^^^^^^^^^^^^^^^ help: expected syntax is: `#[cfg(/* predicate */)]`\n ...\n-LL | generate_s9!(concat!(\"nonexistent\"));\n-   | ------------------------------------- in this macro invocation\n+LL | generate_s10!(concat!(\"nonexistent\"));\n+   | -------------------------------------- in this macro invocation\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 10 previous errors\n \n Some errors occurred: E0537, E0565.\n For more information about an error, try `rustc --explain E0537`."}, {"sha": "a2e099acd3c6adc67906ffd2c34cd553d473172e", "filename": "src/test/ui/error-codes/E0565-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a76690f6a4292a9ca67e9b0efc70c2a82fb9f187/src%2Ftest%2Fui%2Ferror-codes%2FE0565-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a76690f6a4292a9ca67e9b0efc70c2a82fb9f187/src%2Ftest%2Fui%2Ferror-codes%2FE0565-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0565-1.stderr?ref=a76690f6a4292a9ca67e9b0efc70c2a82fb9f187", "patch": "@@ -1,4 +1,4 @@\n-error[E0565]: unsupported literal\n+error[E0565]: item in `deprecated` must be a key/value pair\n   --> $DIR/E0565-1.rs:12:14\n    |\n LL | #[deprecated(\"since\")] //~ ERROR E0565"}, {"sha": "68093e4e2f07793bc3450692fc2dfb8c886183bb", "filename": "src/test/ui/error-codes/E0565-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a76690f6a4292a9ca67e9b0efc70c2a82fb9f187/src%2Ftest%2Fui%2Ferror-codes%2FE0565-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a76690f6a4292a9ca67e9b0efc70c2a82fb9f187/src%2Ftest%2Fui%2Ferror-codes%2FE0565-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0565-2.stderr?ref=a76690f6a4292a9ca67e9b0efc70c2a82fb9f187", "patch": "@@ -1,4 +1,4 @@\n-error[E0565]: unsupported literal\n+error[E0565]: literal in `deprecated` value must be a string\n   --> $DIR/E0565-2.rs:12:22\n    |\n LL | #[deprecated(since = b\"1.29\", note = \"hi\")] //~ ERROR E0565"}, {"sha": "04edff8ec6962f0599243c00d3343d84e5ee8a2c", "filename": "src/test/ui/error-codes/E0565.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a76690f6a4292a9ca67e9b0efc70c2a82fb9f187/src%2Ftest%2Fui%2Ferror-codes%2FE0565.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a76690f6a4292a9ca67e9b0efc70c2a82fb9f187/src%2Ftest%2Fui%2Ferror-codes%2FE0565.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0565.stderr?ref=a76690f6a4292a9ca67e9b0efc70c2a82fb9f187", "patch": "@@ -1,4 +1,4 @@\n-error[E0565]: unsupported literal\n+error[E0565]: meta item in `repr` must be an identifier\n   --> $DIR/E0565.rs:12:8\n    |\n LL | #[repr(\"C\")] //~ ERROR E0565"}]}