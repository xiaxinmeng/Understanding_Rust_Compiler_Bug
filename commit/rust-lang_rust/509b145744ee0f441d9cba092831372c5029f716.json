{"sha": "509b145744ee0f441d9cba092831372c5029f716", "node_id": "C_kwDOAAsO6NoAKDUwOWIxNDU3NDRlZTBmNDQxZDljYmEwOTI4MzEzNzJjNTAyOWY3MTY", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-04-25T12:53:55Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-04-26T18:59:33Z"}, "message": "Migrate scrape-examples.js to ES6", "tree": {"sha": "cb2cd43f306b533a2db64ade23060183338a7a77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb2cd43f306b533a2db64ade23060183338a7a77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/509b145744ee0f441d9cba092831372c5029f716", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/509b145744ee0f441d9cba092831372c5029f716", "html_url": "https://github.com/rust-lang/rust/commit/509b145744ee0f441d9cba092831372c5029f716", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/509b145744ee0f441d9cba092831372c5029f716/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "724c4bd9bb011d331074618ebb739d6ed3e3e0b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/724c4bd9bb011d331074618ebb739d6ed3e3e0b4", "html_url": "https://github.com/rust-lang/rust/commit/724c4bd9bb011d331074618ebb739d6ed3e3e0b4"}], "stats": {"total": 45, "additions": 24, "deletions": 21}, "files": [{"sha": "865ed7190f36e86ee85fb8dbffabdeb02e75d1fb", "filename": "src/librustdoc/html/static/js/scrape-examples.js", "status": "modified", "additions": 24, "deletions": 21, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/509b145744ee0f441d9cba092831372c5029f716/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fscrape-examples.js", "raw_url": "https://github.com/rust-lang/rust/raw/509b145744ee0f441d9cba092831372c5029f716/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fscrape-examples.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fscrape-examples.js?ref=509b145744ee0f441d9cba092831372c5029f716", "patch": "@@ -1,24 +1,27 @@\n-/* global addClass, hasClass, removeClass, onEach */\n+/* eslint-env es6 */\n+/* eslint no-var: \"error\" */\n+/* eslint prefer-const: \"error\" */\n+/* global addClass, hasClass, removeClass, onEachLazy */\n \n (function () {\n     // Number of lines shown when code viewer is not expanded\n     const MAX_LINES = 10;\n \n     // Scroll code block to the given code location\n     function scrollToLoc(elt, loc) {\n-        var lines = elt.querySelector('.line-numbers');\n-        var scrollOffset;\n+        const lines = elt.querySelector('.line-numbers');\n+        let scrollOffset;\n \n         // If the block is greater than the size of the viewer,\n         // then scroll to the top of the block. Otherwise scroll\n         // to the middle of the block.\n         if (loc[1] - loc[0] > MAX_LINES) {\n-            var line = Math.max(0, loc[0] - 1);\n+            const line = Math.max(0, loc[0] - 1);\n             scrollOffset = lines.children[line].offsetTop;\n         } else {\n-            var wrapper = elt.querySelector(\".code-wrapper\");\n-            var halfHeight = wrapper.offsetHeight / 2;\n-            var offsetMid = (lines.children[loc[0]].offsetTop\n+            const wrapper = elt.querySelector(\".code-wrapper\");\n+            const halfHeight = wrapper.offsetHeight / 2;\n+            const offsetMid = (lines.children[loc[0]].offsetTop\n                              + lines.children[loc[1]].offsetTop) / 2;\n             scrollOffset = offsetMid - halfHeight;\n         }\n@@ -28,21 +31,21 @@\n     }\n \n     function updateScrapedExample(example) {\n-        var locs = JSON.parse(example.attributes.getNamedItem(\"data-locs\").textContent);\n-        var locIndex = 0;\n-        var highlights = example.querySelectorAll('.highlight');\n-        var link = example.querySelector('.scraped-example-title a');\n+        const locs = JSON.parse(example.attributes.getNamedItem(\"data-locs\").textContent);\n+        let locIndex = 0;\n+        const highlights = Array.prototype.slice.call(example.querySelectorAll('.highlight'));\n+        const link = example.querySelector('.scraped-example-title a');\n \n         if (locs.length > 1) {\n             // Toggle through list of examples in a given file\n-            var onChangeLoc = function(changeIndex) {\n+            const onChangeLoc = function(changeIndex) {\n                 removeClass(highlights[locIndex], 'focus');\n                 changeIndex();\n                 scrollToLoc(example, locs[locIndex][0]);\n                 addClass(highlights[locIndex], 'focus');\n \n-                var url = locs[locIndex][1];\n-                var title = locs[locIndex][2];\n+                const url = locs[locIndex][1];\n+                const title = locs[locIndex][2];\n \n                 link.href = url;\n                 link.innerHTML = title;\n@@ -63,7 +66,7 @@\n                 });\n         }\n \n-        var expandButton = example.querySelector('.expand');\n+        const expandButton = example.querySelector('.expand');\n         if (expandButton) {\n             expandButton.addEventListener('click', function () {\n                 if (hasClass(example, \"expanded\")) {\n@@ -79,24 +82,24 @@\n         scrollToLoc(example, locs[0][0]);\n     }\n \n-    var firstExamples = document.querySelectorAll('.scraped-example-list > .scraped-example');\n-    onEach(firstExamples, updateScrapedExample);\n-    onEach(document.querySelectorAll('.more-examples-toggle'), function(toggle) {\n+    const firstExamples = document.querySelectorAll('.scraped-example-list > .scraped-example');\n+    onEachLazy(firstExamples, updateScrapedExample);\n+    onEachLazy(document.querySelectorAll('.more-examples-toggle'), function(toggle) {\n         // Allow users to click the left border of the <details> section to close it,\n         // since the section can be large and finding the [+] button is annoying.\n-        toggle.querySelectorAll('.toggle-line, .hide-more').forEach(button => {\n+        onEachLazy(toggle.querySelectorAll('.toggle-line, .hide-more'), button => {\n             button.addEventListener('click', function() {\n                 toggle.open = false;\n             });\n         });\n \n-        var moreExamples = toggle.querySelectorAll('.scraped-example');\n+        const moreExamples = toggle.querySelectorAll('.scraped-example');\n         toggle.querySelector('summary').addEventListener('click', function() {\n             // Wrapping in setTimeout ensures the update happens after the elements are actually\n             // visible. This is necessary since updateScrapedExample calls scrollToLoc which\n             // depends on offsetHeight, a property that requires an element to be visible to\n             // compute correctly.\n-            setTimeout(function() { onEach(moreExamples, updateScrapedExample); });\n+            setTimeout(function() { onEachLazy(moreExamples, updateScrapedExample); });\n         }, {once: true});\n     });\n })();"}]}