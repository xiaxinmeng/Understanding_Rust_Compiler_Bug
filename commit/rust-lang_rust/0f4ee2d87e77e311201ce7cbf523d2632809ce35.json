{"sha": "0f4ee2d87e77e311201ce7cbf523d2632809ce35", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmNGVlMmQ4N2U3N2UzMTEyMDFjZTdjYmY1MjNkMjYzMjgwOWNlMzU=", "commit": {"author": {"name": "Tshepang Lekhonkhobe", "email": "tshepang@gmail.com", "date": "2015-01-07T21:39:05Z"}, "committer": {"name": "Tshepang Lekhonkhobe", "email": "tshepang@gmail.com", "date": "2015-01-08T07:11:16Z"}, "message": "bench: fix a few compiler warnings", "tree": {"sha": "c072e21fba450f98f02bdd09b3f14d5a2318e206", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c072e21fba450f98f02bdd09b3f14d5a2318e206"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f4ee2d87e77e311201ce7cbf523d2632809ce35", "comment_count": 11, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f4ee2d87e77e311201ce7cbf523d2632809ce35", "html_url": "https://github.com/rust-lang/rust/commit/0f4ee2d87e77e311201ce7cbf523d2632809ce35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f4ee2d87e77e311201ce7cbf523d2632809ce35/comments", "author": {"login": "tshepang", "id": 588486, "node_id": "MDQ6VXNlcjU4ODQ4Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/588486?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tshepang", "html_url": "https://github.com/tshepang", "followers_url": "https://api.github.com/users/tshepang/followers", "following_url": "https://api.github.com/users/tshepang/following{/other_user}", "gists_url": "https://api.github.com/users/tshepang/gists{/gist_id}", "starred_url": "https://api.github.com/users/tshepang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tshepang/subscriptions", "organizations_url": "https://api.github.com/users/tshepang/orgs", "repos_url": "https://api.github.com/users/tshepang/repos", "events_url": "https://api.github.com/users/tshepang/events{/privacy}", "received_events_url": "https://api.github.com/users/tshepang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tshepang", "id": 588486, "node_id": "MDQ6VXNlcjU4ODQ4Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/588486?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tshepang", "html_url": "https://github.com/tshepang", "followers_url": "https://api.github.com/users/tshepang/followers", "following_url": "https://api.github.com/users/tshepang/following{/other_user}", "gists_url": "https://api.github.com/users/tshepang/gists{/gist_id}", "starred_url": "https://api.github.com/users/tshepang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tshepang/subscriptions", "organizations_url": "https://api.github.com/users/tshepang/orgs", "repos_url": "https://api.github.com/users/tshepang/repos", "events_url": "https://api.github.com/users/tshepang/events{/privacy}", "received_events_url": "https://api.github.com/users/tshepang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a8cb678e61e91c160d80794b5fdd723d0d4211c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a8cb678e61e91c160d80794b5fdd723d0d4211c", "html_url": "https://github.com/rust-lang/rust/commit/2a8cb678e61e91c160d80794b5fdd723d0d4211c"}], "stats": {"total": 57, "additions": 14, "deletions": 43}, "files": [{"sha": "cc7a0f2c768ae730d41d7da70002f220f1022a9b", "filename": "src/test/bench/core-map.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f4ee2d87e77e311201ce7cbf523d2632809ce35/src%2Ftest%2Fbench%2Fcore-map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f4ee2d87e77e311201ce7cbf523d2632809ce35/src%2Ftest%2Fbench%2Fcore-map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-map.rs?ref=0f4ee2d87e77e311201ce7cbf523d2632809ce35", "patch": "@@ -14,7 +14,6 @@ use std::collections::{BTreeMap, HashMap, HashSet};\n use std::os;\n use std::rand::{Rng, IsaacRng, SeedableRng};\n use std::time::Duration;\n-use std::uint;\n \n fn timed<F>(label: &str, f: F) where F: FnMut() {\n     println!(\"  {}: {}\", label, Duration::span(f));"}, {"sha": "f0bd7e9c9d813d3a194a4c26c4f8c34c88b03178", "filename": "src/test/bench/core-set.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f4ee2d87e77e311201ce7cbf523d2632809ce35/src%2Ftest%2Fbench%2Fcore-set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f4ee2d87e77e311201ce7cbf523d2632809ce35/src%2Ftest%2Fbench%2Fcore-set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-set.rs?ref=0f4ee2d87e77e311201ce7cbf523d2632809ce35", "patch": "@@ -21,7 +21,6 @@ use std::collections::HashSet;\n use std::hash::Hash;\n use std::os;\n use std::time::Duration;\n-use std::uint;\n \n struct Results {\n     sequential_ints: Duration,"}, {"sha": "6a66785a1ae2615842922c634c46f4c79a596d78", "filename": "src/test/bench/core-uint-to-str.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f4ee2d87e77e311201ce7cbf523d2632809ce35/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f4ee2d87e77e311201ce7cbf523d2632809ce35/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs?ref=0f4ee2d87e77e311201ce7cbf523d2632809ce35", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use std::os;\n-use std::uint;\n \n fn main() {\n     let args = os::args();"}, {"sha": "4c85d329b0ab0db5c9104f291fe13917eb6bcafc", "filename": "src/test/bench/msgsend-pipes-shared.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f4ee2d87e77e311201ce7cbf523d2632809ce35/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f4ee2d87e77e311201ce7cbf523d2632809ce35/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs?ref=0f4ee2d87e77e311201ce7cbf523d2632809ce35", "patch": "@@ -22,7 +22,6 @@ use std::sync::mpsc::{channel, Sender, Receiver};\n use std::os;\n use std::thread::Thread;\n use std::time::Duration;\n-use std::uint;\n \n fn move_out<T>(_x: T) {}\n "}, {"sha": "16beee17352bc453e4d123a06932e4dc6dac0ee7", "filename": "src/test/bench/msgsend-pipes.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0f4ee2d87e77e311201ce7cbf523d2632809ce35/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f4ee2d87e77e311201ce7cbf523d2632809ce35/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs?ref=0f4ee2d87e77e311201ce7cbf523d2632809ce35", "patch": "@@ -18,9 +18,6 @@ use std::sync::mpsc::{channel, Sender, Receiver};\n use std::os;\n use std::thread::Thread;\n use std::time::Duration;\n-use std::uint;\n-\n-fn move_out<T>(_x: T) {}\n \n enum request {\n     get_count,\n@@ -42,7 +39,7 @@ fn server(requests: &Receiver<request>, responses: &Sender<uint>) {\n           _ => { }\n         }\n     }\n-    responses.send(count);\n+    responses.send(count).unwrap();\n     //println!(\"server exiting\");\n }\n "}, {"sha": "518194249293be685cbb69638e1c4bd6d19f5154", "filename": "src/test/bench/msgsend-ring-mutex-arcs.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0f4ee2d87e77e311201ce7cbf523d2632809ce35/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f4ee2d87e77e311201ce7cbf523d2632809ce35/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs?ref=0f4ee2d87e77e311201ce7cbf523d2632809ce35", "patch": "@@ -21,7 +21,6 @@\n use std::os;\n use std::sync::{Arc, Future, Mutex, Condvar};\n use std::time::Duration;\n-use std::uint;\n \n // A poor man's pipe.\n type pipe = Arc<(Mutex<Vec<uint>>, Condvar)>;\n@@ -76,7 +75,7 @@ fn main() {\n     let num_tasks = args[1].parse::<uint>().unwrap();\n     let msg_per_task = args[2].parse::<uint>().unwrap();\n \n-    let (mut num_chan, num_port) = init();\n+    let (num_chan, num_port) = init();\n \n     let mut p = Some((num_chan, num_port));\n     let dur = Duration::span(|| {"}, {"sha": "7dc94efcf916a8f0eaf0cbef4905f18e468c093e", "filename": "src/test/bench/rt-parfib.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0f4ee2d87e77e311201ce7cbf523d2632809ce35/src%2Ftest%2Fbench%2Frt-parfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f4ee2d87e77e311201ce7cbf523d2632809ce35/src%2Ftest%2Fbench%2Frt-parfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Frt-parfib.rs?ref=0f4ee2d87e77e311201ce7cbf523d2632809ce35", "patch": "@@ -11,23 +11,22 @@\n use std::sync::mpsc::channel;\n use std::os;\n use std::thread::Thread;\n-use std::uint;\n \n // A simple implementation of parfib. One subtree is found in a new\n // task and communicated over a oneshot pipe, the other is found\n // locally. There is no sequential-mode threshold.\n \n fn parfib(n: uint) -> uint {\n-    if(n == 0 || n == 1) {\n+    if n == 0 || n == 1 {\n         return 1;\n     }\n \n     let (tx, rx) = channel();\n     Thread::spawn(move|| {\n-        tx.send(parfib(n-1));\n+        tx.send(parfib(n-1)).unwrap();\n     });\n     let m2 = parfib(n-2);\n-    return (rx.recv().unwrap() + m2);\n+    return rx.recv().unwrap() + m2;\n }\n \n fn main() {"}, {"sha": "fad5e17464482a7dd562dfcc4ff2defd70482163", "filename": "src/test/bench/shootout-binarytrees.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f4ee2d87e77e311201ce7cbf523d2632809ce35/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f4ee2d87e77e311201ce7cbf523d2632809ce35/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs?ref=0f4ee2d87e77e311201ce7cbf523d2632809ce35", "patch": "@@ -92,7 +92,7 @@ fn main() {\n     let long_lived_arena = TypedArena::new();\n     let long_lived_tree = bottom_up_tree(&long_lived_arena, 0, max_depth);\n \n-    let mut messages = range_step(min_depth, max_depth + 1, 2).map(|depth| {\n+    let messages = range_step(min_depth, max_depth + 1, 2).map(|depth| {\n             use std::num::Int;\n             let iterations = 2i.pow((max_depth - depth + min_depth) as uint);\n             Thread::scoped(move|| {"}, {"sha": "33995a9be74828ad9ac54fe4f98cd2a9b0407fb5", "filename": "src/test/bench/shootout-chameneos-redux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f4ee2d87e77e311201ce7cbf523d2632809ce35/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f4ee2d87e77e311201ce7cbf523d2632809ce35/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs?ref=0f4ee2d87e77e311201ce7cbf523d2632809ce35", "patch": "@@ -182,7 +182,7 @@ fn rendezvous(nn: uint, set: Vec<Color>) {\n     let (to_rendezvous_log, from_creatures_log) = channel::<String>();\n \n     // these channels will allow us to talk to each creature by 'name'/index\n-    let mut to_creature: Vec<Sender<CreatureInfo>> =\n+    let to_creature: Vec<Sender<CreatureInfo>> =\n         set.iter().enumerate().map(|(ii, &col)| {\n             // create each creature as a listener with a port, and\n             // give us a channel to talk to each"}, {"sha": "8c06f7caa772a10a288707df6c57aff0b7950ba7", "filename": "src/test/bench/shootout-fannkuch-redux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f4ee2d87e77e311201ce7cbf523d2632809ce35/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f4ee2d87e77e311201ce7cbf523d2632809ce35/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs?ref=0f4ee2d87e77e311201ce7cbf523d2632809ce35", "patch": "@@ -130,7 +130,7 @@ impl Perm {\n }\n \n \n-fn reverse(tperm: &mut [i32], mut k: uint) {\n+fn reverse(tperm: &mut [i32], k: uint) {\n     tperm.slice_to_mut(k).reverse()\n }\n \n@@ -165,7 +165,7 @@ fn fannkuch(n: i32) -> (i32, i32) {\n     let mut futures = vec![];\n     let k = perm.max() / N;\n \n-    for (i, j) in range(0, N).zip(iter::count(0, k)) {\n+    for (_, j) in range(0, N).zip(iter::count(0, k)) {\n         let max = cmp::min(j+k, perm.max());\n \n         futures.push(Thread::scoped(move|| {"}, {"sha": "af5fd1a3520a8f5539d9a4d89322b7b41e75e34a", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f4ee2d87e77e311201ce7cbf523d2632809ce35/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f4ee2d87e77e311201ce7cbf523d2632809ce35/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=0f4ee2d87e77e311201ce7cbf523d2632809ce35", "patch": "@@ -43,7 +43,6 @@\n #![feature(slicing_syntax)]\n \n use std::ascii::OwnedAsciiExt;\n-use std::iter::repeat;\n use std::slice;\n use std::sync::Arc;\n use std::thread::Thread;"}, {"sha": "c65f98e545bbed52359ba08154632afd82f615a4", "filename": "src/test/bench/shootout-nbody.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f4ee2d87e77e311201ce7cbf523d2632809ce35/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f4ee2d87e77e311201ce7cbf523d2632809ce35/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-nbody.rs?ref=0f4ee2d87e77e311201ce7cbf523d2632809ce35", "patch": "@@ -202,6 +202,6 @@ fn shift_mut_ref<'a, T>(r: &mut &'a mut [T]) -> Option<&'a mut T> {\n         raw.data = raw.data.offset(1);\n         raw.len -= 1;\n         *r = mem::transmute(raw);\n-        Some(unsafe { &mut *ret })\n+        Some({ &mut *ret })\n     }\n }"}, {"sha": "e22d2fa61df67ccaa4f5f54da8ea9b0fa8fbeddf", "filename": "src/test/bench/shootout-reverse-complement.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f4ee2d87e77e311201ce7cbf523d2632809ce35/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f4ee2d87e77e311201ce7cbf523d2632809ce35/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs?ref=0f4ee2d87e77e311201ce7cbf523d2632809ce35", "patch": "@@ -229,7 +229,7 @@ unsafe impl<T: 'static> Send for Racy<T> {}\n \n /// Executes a closure in parallel over the given iterator over mutable slice.\n /// The closure `f` is run in parallel with an element of `iter`.\n-fn parallel<'a, I, T, F>(mut iter: I, f: F)\n+fn parallel<'a, I, T, F>(iter: I, f: F)\n         where T: 'a+Send + Sync,\n               I: Iterator<Item=&'a mut [T]>,\n               F: Fn(&mut [T]) + Sync {"}, {"sha": "ea4b3c4631268d2f6330ed485c425f2b1a7c3d79", "filename": "src/test/bench/shootout-threadring.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f4ee2d87e77e311201ce7cbf523d2632809ce35/src%2Ftest%2Fbench%2Fshootout-threadring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f4ee2d87e77e311201ce7cbf523d2632809ce35/src%2Ftest%2Fbench%2Fshootout-threadring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-threadring.rs?ref=0f4ee2d87e77e311201ce7cbf523d2632809ce35", "patch": "@@ -43,7 +43,7 @@ use std::thread::Thread;\n \n fn start(n_tasks: int, token: int) {\n     let (tx, mut rx) = channel();\n-    tx.send(token);\n+    tx.send(token).unwrap();\n     for i in range(2, n_tasks + 1) {\n         let (tx, next_rx) = channel();\n         Thread::spawn(move|| roundtrip(i, tx, rx));\n@@ -58,7 +58,7 @@ fn roundtrip(id: int, tx: Sender<int>, rx: Receiver<int>) {\n             println!(\"{}\", id);\n             break;\n         }\n-        tx.send(token - 1);\n+        tx.send(token - 1).unwrap();\n     }\n }\n "}, {"sha": "c200c089bf477f8b96aa25243e6a0bf1b4d8ed1f", "filename": "src/test/bench/std-smallintmap.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f4ee2d87e77e311201ce7cbf523d2632809ce35/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f4ee2d87e77e311201ce7cbf523d2632809ce35/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fstd-smallintmap.rs?ref=0f4ee2d87e77e311201ce7cbf523d2632809ce35", "patch": "@@ -13,7 +13,6 @@\n use std::collections::VecMap;\n use std::os;\n use std::time::Duration;\n-use std::uint;\n \n fn append_sequential(min: uint, max: uint, map: &mut VecMap<uint>) {\n     for i in range(min, max) {"}, {"sha": "58ba88c3769d51f7335728b9e278e64e18e9361f", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0f4ee2d87e77e311201ce7cbf523d2632809ce35/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f4ee2d87e77e311201ce7cbf523d2632809ce35/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=0f4ee2d87e77e311201ce7cbf523d2632809ce35", "patch": "@@ -54,18 +54,6 @@ impl Sudoku {\n         return Sudoku::new(g)\n     }\n \n-    pub fn equal(&self, other: &Sudoku) -> bool {\n-        for row in range(0u8, 9u8) {\n-            for col in range(0u8, 9u8) {\n-                if self.grid[row as uint][col as uint] !=\n-                        other.grid[row as uint][col as uint] {\n-                    return false;\n-                }\n-            }\n-        }\n-        return true;\n-    }\n-\n     pub fn read(mut reader: &mut BufferedReader<StdReader>) -> Sudoku {\n         /* assert first line is exactly \"9,9\" */\n         assert!(reader.read_line().unwrap() == \"9,9\".to_string());\n@@ -183,7 +171,7 @@ impl Colors {\n     fn next(&self) -> u8 {\n         let Colors(c) = *self;\n         let val = c & HEADS;\n-        if (0u16 == val) {\n+        if 0u16 == val {\n             return 0u8;\n         } else {\n             return val.trailing_zeros() as u8"}, {"sha": "7706c53e554f3a14ea294e51c7bb90e71c5359bc", "filename": "src/test/bench/task-perf-alloc-unwind.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f4ee2d87e77e311201ce7cbf523d2632809ce35/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f4ee2d87e77e311201ce7cbf523d2632809ce35/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs?ref=0f4ee2d87e77e311201ce7cbf523d2632809ce35", "patch": "@@ -19,10 +19,6 @@ enum List<T> {\n     Nil, Cons(T, Box<List<T>>)\n }\n \n-enum UniqueList {\n-    ULNil, ULCons(Box<UniqueList>)\n-}\n-\n fn main() {\n     let (repeat, depth) = if os::getenv(\"RUST_BENCH\").is_some() {\n         (50, 1000)"}, {"sha": "31a4ac3d045f883d3db406148d24bd96fd27db88", "filename": "src/test/bench/task-perf-jargon-metal-smoke.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f4ee2d87e77e311201ce7cbf523d2632809ce35/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f4ee2d87e77e311201ce7cbf523d2632809ce35/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs?ref=0f4ee2d87e77e311201ce7cbf523d2632809ce35", "patch": "@@ -20,7 +20,6 @@\n use std::sync::mpsc::{channel, Sender};\n use std::os;\n use std::thread::Thread;\n-use std::uint;\n \n fn child_generation(gens_left: uint, tx: Sender<()>) {\n     // This used to be O(n^2) in the number of generations that ever existed."}, {"sha": "e76fad9f1a445e54da88dbc9225f4c637771e37a", "filename": "src/test/bench/task-perf-spawnalot.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f4ee2d87e77e311201ce7cbf523d2632809ce35/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f4ee2d87e77e311201ce7cbf523d2632809ce35/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs?ref=0f4ee2d87e77e311201ce7cbf523d2632809ce35", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use std::os;\n-use std::uint;\n use std::thread::Thread;\n \n fn f(n: uint) {"}]}