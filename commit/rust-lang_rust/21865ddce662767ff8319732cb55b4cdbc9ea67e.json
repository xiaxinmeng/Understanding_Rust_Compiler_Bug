{"sha": "21865ddce662767ff8319732cb55b4cdbc9ea67e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxODY1ZGRjZTY2Mjc2N2ZmODMxOTczMmNiNTViNGNkYmM5ZWE2N2U=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-11-17T23:19:46Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-11-18T18:32:27Z"}, "message": "intrinsics: Remove the call to get_task from task_sleep", "tree": {"sha": "851f95801560eb107217b3057f8f2f0f4ffb8fd9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/851f95801560eb107217b3057f8f2f0f4ffb8fd9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21865ddce662767ff8319732cb55b4cdbc9ea67e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21865ddce662767ff8319732cb55b4cdbc9ea67e", "html_url": "https://github.com/rust-lang/rust/commit/21865ddce662767ff8319732cb55b4cdbc9ea67e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21865ddce662767ff8319732cb55b4cdbc9ea67e/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eecbc815ac44be2d17338d6dfd60c1417ba29ff1", "url": "https://api.github.com/repos/rust-lang/rust/commits/eecbc815ac44be2d17338d6dfd60c1417ba29ff1", "html_url": "https://github.com/rust-lang/rust/commit/eecbc815ac44be2d17338d6dfd60c1417ba29ff1"}], "stats": {"total": 34, "additions": 18, "deletions": 16}, "files": [{"sha": "1d7f859bfa2661c233c5e0507b5b8b2bdef0fc6b", "filename": "src/lib/task.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/21865ddce662767ff8319732cb55b4cdbc9ea67e/src%2Flib%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21865ddce662767ff8319732cb55b4cdbc9ea67e/src%2Flib%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftask.rs?ref=21865ddce662767ff8319732cb55b4cdbc9ea67e", "patch": "@@ -53,7 +53,7 @@ export spawn_joinable;\n #[abi = \"rust-intrinsic\"]\n native mod rusti {\n     // these must run on the Rust stack so that they can swap stacks etc:\n-    fn task_sleep(time_in_us: uint);\n+    fn task_sleep(task: *rust_task, time_in_us: uint);\n }\n \n #[link_name = \"rustrt\"]\n@@ -63,6 +63,7 @@ native mod rustrt {\n     fn pin_task();\n     fn unpin_task();\n     fn get_task_id() -> task_id;\n+    fn rust_get_task() -> *rust_task;\n \n     fn set_min_stack(stack_size: uint);\n \n@@ -142,7 +143,10 @@ Parameters:\n \n time_in_us - maximum number of microseconds to yield control for\n */\n-fn sleep(time_in_us: uint) { ret rusti::task_sleep(time_in_us); }\n+fn sleep(time_in_us: uint) {\n+    let task = rustrt::rust_get_task();\n+    ret rusti::task_sleep(task, time_in_us);\n+}\n \n /*\n Function: yield"}, {"sha": "145a41c5a6d6fbc0e62c58530a9a3d1b0d23d77e", "filename": "src/rt/intrinsics/intrinsics.cpp", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/21865ddce662767ff8319732cb55b4cdbc9ea67e/src%2Frt%2Fintrinsics%2Fintrinsics.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/21865ddce662767ff8319732cb55b4cdbc9ea67e/src%2Frt%2Fintrinsics%2Fintrinsics.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fintrinsics%2Fintrinsics.cpp?ref=21865ddce662767ff8319732cb55b4cdbc9ea67e", "patch": "@@ -12,7 +12,7 @@ extern \"C\" CDECL void\n port_recv(uintptr_t *dptr, rust_port *port);\n \n extern \"C\" CDECL void\n-rust_task_sleep(size_t time_in_us);\n+rust_task_sleep(rust_task *task, size_t time_in_us);\n \n extern \"C\" void\n rust_intrinsic_vec_len(size_t *retptr,\n@@ -71,7 +71,8 @@ rust_intrinsic_get_type_desc(void **retptr,\n extern \"C\" void\n rust_intrinsic_task_sleep(void **retptr,\n                           void *env,\n+\t\t\t  rust_task *task,\n                           size_t time_in_us) {\n-    rust_task_sleep(time_in_us);\n+    rust_task_sleep(task, time_in_us);\n }\n "}, {"sha": "effc6005972788d3ed99434bf5def9708dfd9956", "filename": "src/rt/intrinsics/intrinsics.i386.ll.in", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/21865ddce662767ff8319732cb55b4cdbc9ea67e/src%2Frt%2Fintrinsics%2Fintrinsics.i386.ll.in", "raw_url": "https://github.com/rust-lang/rust/raw/21865ddce662767ff8319732cb55b4cdbc9ea67e/src%2Frt%2Fintrinsics%2Fintrinsics.i386.ll.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fintrinsics%2Fintrinsics.i386.ll.in?ref=21865ddce662767ff8319732cb55b4cdbc9ea67e", "patch": "@@ -27,7 +27,7 @@ target triple = \"@CFG_TARGET_TRIPLE@\"\n %class.rust_task_list = type { %class.indexed_list, %struct.rust_scheduler*, i8* }\n %class.indexed_list = type { i32 (...)**, %class.array_list.2 }\n %class.array_list.2 = type { i32, %struct.rust_task**, i32 }\n-%struct.rust_task = type { %struct.rust_task_user, i32, %class.context, %struct.stk_seg*, i32, %struct.rust_scheduler*, %class.rust_crate_cache*, %class.rust_kernel*, i8*, %class.rust_task_list*, %struct.rust_cond*, i8*, %struct.rust_task*, i32, i32, %class.timer, i32*, i32, i32, %class.memory_region, %\"class.rust_task::wakeup_callback\"*, i8, i8, i8, %class.lock_and_signal, %class.hash_map.4, %class.rust_obstack, %\"class.std::map\", i32, %\"class.debug::task_debug_info\" }\n+%struct.rust_task = type { %struct.rust_task_user, i32, %class.context, %struct.stk_seg*, i32, %struct.rust_scheduler*, %class.rust_crate_cache*, %class.rust_kernel*, i8*, %class.rust_task_list*, %struct.rust_cond*, i8*, %struct.rust_task*, i32, i32, %class.timer, i32*, i32, i32, %class.memory_region, i8, i8, i8, %class.lock_and_signal, %class.hash_map.4, %class.rust_obstack, %\"class.std::map\", i32, %\"class.debug::task_debug_info\" }\n %struct.rust_task_user = type { i32, i32, %struct.chan_handle, i32 }\n %struct.chan_handle = type { i32, i32 }\n %class.context = type { %struct.registers_t, %class.context* }\n@@ -36,7 +36,6 @@ target triple = \"@CFG_TARGET_TRIPLE@\"\n %class.rust_crate_cache = type { %struct.type_desc*, %struct.rust_scheduler*, i32 }\n %struct.rust_cond = type { i8 }\n %class.timer = type { i32 (...)**, i64, i64 }\n-%\"class.rust_task::wakeup_callback\" = type { i32 (...)** }\n %class.hash_map.4 = type { %\"struct.hash_map<int, rust_port *>::map_entry\"* }\n %\"struct.hash_map<int, rust_port *>::map_entry\" = type opaque\n %class.rust_obstack = type { %struct.rust_obstack_chunk*, %struct.rust_task* }\n@@ -105,12 +104,12 @@ define void @rust_intrinsic_get_type_desc(i8** nocapture %retptr, i8* nocapture\n   ret void\n }\n \n-define void @rust_intrinsic_task_sleep(i8** nocapture %retptr, i8* nocapture %env, i32 %time_in_us) {\n-  tail call void @rust_task_sleep(i32 %time_in_us)\n+define void @rust_intrinsic_task_sleep(i8** nocapture %retptr, i8* nocapture %env, %struct.rust_task* %task, i32 %time_in_us) {\n+  tail call void @rust_task_sleep(%struct.rust_task* %task, i32 %time_in_us)\n   ret void\n }\n \n-declare void @rust_task_sleep(i32)\n+declare void @rust_task_sleep(%struct.rust_task*, i32)\n \n !0 = metadata !{metadata !\"any pointer\", metadata !1}\n !1 = metadata !{metadata !\"omnipotent char\", metadata !2}"}, {"sha": "aeec58a0fac576ff652da4299dd0cb53979e69de", "filename": "src/rt/intrinsics/intrinsics.x86_64.ll.in", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/21865ddce662767ff8319732cb55b4cdbc9ea67e/src%2Frt%2Fintrinsics%2Fintrinsics.x86_64.ll.in", "raw_url": "https://github.com/rust-lang/rust/raw/21865ddce662767ff8319732cb55b4cdbc9ea67e/src%2Frt%2Fintrinsics%2Fintrinsics.x86_64.ll.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fintrinsics%2Fintrinsics.x86_64.ll.in?ref=21865ddce662767ff8319732cb55b4cdbc9ea67e", "patch": "@@ -27,7 +27,7 @@ target triple = \"@CFG_TARGET_TRIPLE@\"\n %class.rust_task_list = type { %class.indexed_list, %struct.rust_scheduler*, i8* }\n %class.indexed_list = type { i32 (...)**, %class.array_list.2 }\n %class.array_list.2 = type { i64, %struct.rust_task**, i64 }\n-%struct.rust_task = type { %struct.rust_task_user, i64, %class.context, %struct.stk_seg*, i64, %struct.rust_scheduler*, %class.rust_crate_cache*, %class.rust_kernel*, i8*, %class.rust_task_list*, %struct.rust_cond*, i8*, %struct.rust_task*, i32, i64, %class.timer, i64*, i32, i32, %class.memory_region, %\"class.rust_task::wakeup_callback\"*, i8, i8, i8, %class.lock_and_signal, %class.hash_map.4, %class.rust_obstack, %\"class.std::map\", i32, %\"class.debug::task_debug_info\" }\n+%struct.rust_task = type { %struct.rust_task_user, i64, %class.context, %struct.stk_seg*, i64, %struct.rust_scheduler*, %class.rust_crate_cache*, %class.rust_kernel*, i8*, %class.rust_task_list*, %struct.rust_cond*, i8*, %struct.rust_task*, i32, i64, %class.timer, i64*, i32, i32, %class.memory_region, i8, i8, i8, %class.lock_and_signal, %class.hash_map.4, %class.rust_obstack, %\"class.std::map\", i32, %\"class.debug::task_debug_info\" }\n %struct.rust_task_user = type { i64, i64, %struct.chan_handle, i64 }\n %struct.chan_handle = type { i64, i64 }\n %class.context = type { %struct.registers_t, %class.context* }\n@@ -36,7 +36,6 @@ target triple = \"@CFG_TARGET_TRIPLE@\"\n %class.rust_crate_cache = type { %struct.type_desc*, %struct.rust_scheduler*, i64 }\n %struct.rust_cond = type { i8 }\n %class.timer = type { i32 (...)**, i64, i64 }\n-%\"class.rust_task::wakeup_callback\" = type { i32 (...)** }\n %class.hash_map.4 = type { %\"struct.hash_map<long, rust_port *>::map_entry\"* }\n %\"struct.hash_map<long, rust_port *>::map_entry\" = type opaque\n %class.rust_obstack = type { %struct.rust_obstack_chunk*, %struct.rust_task* }\n@@ -105,12 +104,12 @@ define void @rust_intrinsic_get_type_desc(i8** nocapture %retptr, i8* nocapture\n   ret void\n }\n \n-define void @rust_intrinsic_task_sleep(i8** nocapture %retptr, i8* nocapture %env, i64 %time_in_us) uwtable {\n-  tail call void @rust_task_sleep(i64 %time_in_us)\n+define void @rust_intrinsic_task_sleep(i8** nocapture %retptr, i8* nocapture %env, %struct.rust_task* %task, i64 %time_in_us) uwtable {\n+  tail call void @rust_task_sleep(%struct.rust_task* %task, i64 %time_in_us)\n   ret void\n }\n \n-declare void @rust_task_sleep(i64)\n+declare void @rust_task_sleep(%struct.rust_task*, i64)\n \n !0 = metadata !{metadata !\"any pointer\", metadata !1}\n !1 = metadata !{metadata !\"omnipotent char\", metadata !2}"}, {"sha": "0ae191da0f65da0667ab16c8024faab45d07008d", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/21865ddce662767ff8319732cb55b4cdbc9ea67e/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/21865ddce662767ff8319732cb55b4cdbc9ea67e/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=21865ddce662767ff8319732cb55b4cdbc9ea67e", "patch": "@@ -511,8 +511,7 @@ chan_id_send(type_desc *t, rust_task_id target_task_id,\n // This is called by an intrinsic on the Rust stack.\n // Do not call on the C stack.\n extern \"C\" CDECL void\n-rust_task_sleep(size_t time_in_us) {\n-    rust_task *task = rust_scheduler::get_task();\n+rust_task_sleep(rust_task *task, size_t time_in_us) {\n     task->yield(time_in_us);\n }\n "}]}