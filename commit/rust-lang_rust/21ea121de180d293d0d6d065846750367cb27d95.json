{"sha": "21ea121de180d293d0d6d065846750367cb27d95", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxZWExMjFkZTE4MGQyOTNkMGQ2ZDA2NTg0Njc1MDM2N2NiMjdkOTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-20T00:49:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-20T00:49:37Z"}, "message": "Auto merge of #50803 - varkor:never-transmute-never, r=eddyb\n\nFix an ICE when attempting to transmute an uninhabited type\n\nFixes https://github.com/rust-lang/rust/issues/50570.", "tree": {"sha": "2b1257ffc6fd0f7ad9277006a78fc2748c5ac5b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b1257ffc6fd0f7ad9277006a78fc2748c5ac5b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21ea121de180d293d0d6d065846750367cb27d95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21ea121de180d293d0d6d065846750367cb27d95", "html_url": "https://github.com/rust-lang/rust/commit/21ea121de180d293d0d6d065846750367cb27d95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21ea121de180d293d0d6d065846750367cb27d95/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ea24915894d49cb93eab52e65f1e4f0baa1bc32", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ea24915894d49cb93eab52e65f1e4f0baa1bc32", "html_url": "https://github.com/rust-lang/rust/commit/3ea24915894d49cb93eab52e65f1e4f0baa1bc32"}, {"sha": "f90033303b491bdd4c89aa892a13323cf2ba941f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f90033303b491bdd4c89aa892a13323cf2ba941f", "html_url": "https://github.com/rust-lang/rust/commit/f90033303b491bdd4c89aa892a13323cf2ba941f"}], "stats": {"total": 50, "additions": 47, "deletions": 3}, "files": [{"sha": "1669059a760f49d00117d2804b44722a66fbc286", "filename": "src/librustc_codegen_llvm/mir/block.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/21ea121de180d293d0d6d065846750367cb27d95/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21ea121de180d293d0d6d065846750367cb27d95/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs?ref=21ea121de180d293d0d6d065846750367cb27d95", "patch": "@@ -428,9 +428,20 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n                 let intrinsic = intrinsic.as_ref().map(|s| &s[..]);\n \n                 if intrinsic == Some(\"transmute\") {\n-                    let &(ref dest, target) = destination.as_ref().unwrap();\n-                    self.codegen_transmute(&bx, &args[0], dest);\n-                    funclet_br(self, bx, target);\n+                    if let Some(destination_ref) = destination.as_ref() {\n+                        let &(ref dest, target) = destination_ref;\n+                        self.codegen_transmute(&bx, &args[0], dest);\n+                        funclet_br(self, bx, target);\n+                    } else {\n+                        // If we are trying to transmute to an uninhabited type,\n+                        // it is likely there is no allotted destination. In fact,\n+                        // transmuting to an uninhabited type is UB, which means\n+                        // we can do what we like. Here, we declare that transmuting\n+                        // into an uninhabited type is impossible, so anything following\n+                        // it must be unreachable.\n+                        assert_eq!(bx.cx.layout_of(sig.output()).abi, layout::Abi::Uninhabited);\n+                        bx.unreachable();\n+                    }\n                     return;\n                 }\n "}, {"sha": "cbcc47f60c31328c250b2839b34095a0ebe7f37d", "filename": "src/test/compile-fail/never_transmute_never.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/21ea121de180d293d0d6d065846750367cb27d95/src%2Ftest%2Fcompile-fail%2Fnever_transmute_never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21ea121de180d293d0d6d065846750367cb27d95/src%2Ftest%2Fcompile-fail%2Fnever_transmute_never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnever_transmute_never.rs?ref=21ea121de180d293d0d6d065846750367cb27d95", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-pass\n+\n+#![crate_type=\"lib\"]\n+\n+#![feature(never_type)]\n+#![allow(dead_code)]\n+#![allow(unreachable_code)]\n+#![allow(unused_variables)]\n+\n+struct Foo;\n+\n+pub fn f(x: !) -> ! {\n+    x\n+}\n+\n+pub fn ub() {\n+    // This is completely undefined behaviour,\n+    // but we still want to make sure it compiles.\n+    let x: ! = unsafe {\n+        std::mem::transmute::<Foo, !>(Foo)\n+    };\n+    f(x)\n+}"}]}