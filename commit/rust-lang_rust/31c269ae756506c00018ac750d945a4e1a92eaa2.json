{"sha": "31c269ae756506c00018ac750d945a4e1a92eaa2", "node_id": "C_kwDOAAsO6NoAKDMxYzI2OWFlNzU2NTA2YzAwMDE4YWM3NTBkOTQ1YTRlMWE5MmVhYTI", "commit": {"author": {"name": "Nathan Stocks", "email": "cleancut@github.com", "date": "2022-10-07T20:39:09Z"}, "committer": {"name": "Nathan Stocks", "email": "cleancut@github.com", "date": "2022-10-07T20:39:09Z"}, "message": "avoid string dispatch in fluent", "tree": {"sha": "30be92609a5cdbcdc60a2deee1fad9e4e294ee45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30be92609a5cdbcdc60a2deee1fad9e4e294ee45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31c269ae756506c00018ac750d945a4e1a92eaa2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31c269ae756506c00018ac750d945a4e1a92eaa2", "html_url": "https://github.com/rust-lang/rust/commit/31c269ae756506c00018ac750d945a4e1a92eaa2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31c269ae756506c00018ac750d945a4e1a92eaa2/comments", "author": {"login": "CleanCut", "id": 5838512, "node_id": "MDQ6VXNlcjU4Mzg1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5838512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CleanCut", "html_url": "https://github.com/CleanCut", "followers_url": "https://api.github.com/users/CleanCut/followers", "following_url": "https://api.github.com/users/CleanCut/following{/other_user}", "gists_url": "https://api.github.com/users/CleanCut/gists{/gist_id}", "starred_url": "https://api.github.com/users/CleanCut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CleanCut/subscriptions", "organizations_url": "https://api.github.com/users/CleanCut/orgs", "repos_url": "https://api.github.com/users/CleanCut/repos", "events_url": "https://api.github.com/users/CleanCut/events{/privacy}", "received_events_url": "https://api.github.com/users/CleanCut/received_events", "type": "User", "site_admin": true}, "committer": {"login": "CleanCut", "id": 5838512, "node_id": "MDQ6VXNlcjU4Mzg1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5838512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CleanCut", "html_url": "https://github.com/CleanCut", "followers_url": "https://api.github.com/users/CleanCut/followers", "following_url": "https://api.github.com/users/CleanCut/following{/other_user}", "gists_url": "https://api.github.com/users/CleanCut/gists{/gist_id}", "starred_url": "https://api.github.com/users/CleanCut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CleanCut/subscriptions", "organizations_url": "https://api.github.com/users/CleanCut/orgs", "repos_url": "https://api.github.com/users/CleanCut/repos", "events_url": "https://api.github.com/users/CleanCut/events{/privacy}", "received_events_url": "https://api.github.com/users/CleanCut/received_events", "type": "User", "site_admin": true}, "parents": [{"sha": "57eba4f535d30e9b7765cadfefc5ec66e54b0982", "url": "https://api.github.com/repos/rust-lang/rust/commits/57eba4f535d30e9b7765cadfefc5ec66e54b0982", "html_url": "https://github.com/rust-lang/rust/commit/57eba4f535d30e9b7765cadfefc5ec66e54b0982"}], "stats": {"total": 125, "additions": 86, "deletions": 39}, "files": [{"sha": "1f1c9c29d665a6184c3543fb772577435e4ba542", "filename": "compiler/rustc_error_messages/locales/en-US/passes.ftl", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/31c269ae756506c00018ac750d945a4e1a92eaa2/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/31c269ae756506c00018ac750d945a4e1a92eaa2/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl?ref=31c269ae756506c00018ac750d945a4e1a92eaa2", "patch": "@@ -596,23 +596,25 @@ passes_unrecognized_repr_hint =\n     unrecognized representation hint\n     .help = valid reprs are `C`, `align`, `packed`, `transparent`, `simd`, `i8`, `u8`, `i16`, `u16`, `i32`, `u32`, `i64`, `u64`, `i128`, `u128`, `isize`, `usize`\n \n-passes_attribute_should_be_applied_to =\n-    attribute should be applied to {$what ->\n-        [enum] an enum\n-        [struct] a struct\n-        [struct-union] a struct or union\n-        [struct-enum-union] a struct, enum, or union\n-        [struct-enum-function-union] a struct, enum, function, or union\n-        *[unspecified] (unspecified--this is a compiler bug)\n-    }\n-    .label = not {$what ->\n-        [enum] an enum\n-        [struct] a struct\n-        [struct-union] a struct or union\n-        [struct-enum-union] a struct, enum, or union\n-        [struct-enum-function-union] a struct, enum, function, or union\n-        *[unspecified] (unspecified--this is a compiler bug)\n-    }\n+passes_attr_application_enum =\n+    attribute should be applied to an enum\n+    .label = not an enum\n+\n+passes_attr_application_struct =\n+    attribute should be applied to a struct\n+    .label = not a struct\n+\n+passes_attr_application_struct_union =\n+    attribute should be applied to a struct or union\n+    .label = not a struct or union\n+\n+passes_attr_application_struct_enum_union =\n+    attribute should be applied to a struct, enum, or union\n+    .label = not a struct, enum, or union\n+\n+passes_attr_application_struct_enum_function_union =\n+    attribute should be applied to a struct, enum, function, or union\n+    .label = not a struct, enum, function, or union\n \n passes_transparent_incompatible =\n     transparent {$target} cannot have other repr hints"}, {"sha": "54c1718a656bcef32c9008d331e3553495ec5b43", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 31, "deletions": 15, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/31c269ae756506c00018ac750d945a4e1a92eaa2/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31c269ae756506c00018ac750d945a4e1a92eaa2/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=31c269ae756506c00018ac750d945a4e1a92eaa2", "patch": "@@ -5,8 +5,8 @@\n //! item.\n \n use crate::errors::{\n-    self, AttributeShouldBeAppliedTo, DebugVisualizerUnreadable, InvalidAttrAtCrateLevel,\n-    ObjectLifetimeErr, OnlyHasEffectOn, TransparentIncompatible, UnrecognizedReprHint,\n+    self, AttrApplication, DebugVisualizerUnreadable, InvalidAttrAtCrateLevel, ObjectLifetimeErr,\n+    OnlyHasEffectOn, TransparentIncompatible, UnrecognizedReprHint,\n };\n use rustc_ast::{ast, AttrStyle, Attribute, Lit, LitKind, MetaItemKind, NestedMetaItem};\n use rustc_data_structures::fx::FxHashMap;\n@@ -1594,12 +1594,17 @@ impl CheckAttrVisitor<'_> {\n                 continue;\n             }\n \n-            let what = match hint.name_or_empty() {\n+            match hint.name_or_empty() {\n                 sym::C => {\n                     is_c = true;\n                     match target {\n                         Target::Struct | Target::Union | Target::Enum => continue,\n-                        _ => \"struct-enum-union\",\n+                        _ => {\n+                            self.tcx.sess.emit_err(AttrApplication::StructEnumUnion {\n+                                hint_span: hint.span(),\n+                                span,\n+                            });\n+                        }\n                     }\n                 }\n                 sym::align => {\n@@ -1615,20 +1620,30 @@ impl CheckAttrVisitor<'_> {\n \n                     match target {\n                         Target::Struct | Target::Union | Target::Enum | Target::Fn => continue,\n-                        _ => \"struct-enum-function-union\",\n+                        _ => {\n+                            self.tcx.sess.emit_err(AttrApplication::StructEnumFunctionUnion {\n+                                hint_span: hint.span(),\n+                                span,\n+                            });\n+                        }\n                     }\n                 }\n                 sym::packed => {\n                     if target != Target::Struct && target != Target::Union {\n-                        \"struct-union\"\n+                        self.tcx.sess.emit_err(AttrApplication::StructUnion {\n+                            hint_span: hint.span(),\n+                            span,\n+                        });\n                     } else {\n                         continue;\n                     }\n                 }\n                 sym::simd => {\n                     is_simd = true;\n                     if target != Target::Struct {\n-                        \"struct\"\n+                        self.tcx\n+                            .sess\n+                            .emit_err(AttrApplication::Struct { hint_span: hint.span(), span });\n                     } else {\n                         continue;\n                     }\n@@ -1637,7 +1652,12 @@ impl CheckAttrVisitor<'_> {\n                     is_transparent = true;\n                     match target {\n                         Target::Struct | Target::Union | Target::Enum => continue,\n-                        _ => \"struct-enum-union\",\n+                        _ => {\n+                            self.tcx.sess.emit_err(AttrApplication::StructEnumUnion {\n+                                hint_span: hint.span(),\n+                                span,\n+                            });\n+                        }\n                     }\n                 }\n                 sym::i8\n@@ -1654,7 +1674,9 @@ impl CheckAttrVisitor<'_> {\n                 | sym::usize => {\n                     int_reprs += 1;\n                     if target != Target::Enum {\n-                        \"enum\"\n+                        self.tcx\n+                            .sess\n+                            .emit_err(AttrApplication::Enum { hint_span: hint.span(), span });\n                     } else {\n                         continue;\n                     }\n@@ -1664,12 +1686,6 @@ impl CheckAttrVisitor<'_> {\n                     continue;\n                 }\n             };\n-\n-            self.tcx.sess.emit_err(AttributeShouldBeAppliedTo {\n-                hint_span: hint.span(),\n-                span,\n-                what,\n-            });\n         }\n \n         // Just point at all repr hints if there are any incompatibilities."}, {"sha": "1cc81a9ab9884697fafcbedfbff7c76374c9b09a", "filename": "compiler/rustc_passes/src/errors.rs", "status": "modified", "additions": 36, "deletions": 7, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/31c269ae756506c00018ac750d945a4e1a92eaa2/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31c269ae756506c00018ac750d945a4e1a92eaa2/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs?ref=31c269ae756506c00018ac750d945a4e1a92eaa2", "patch": "@@ -1288,13 +1288,42 @@ pub struct UnrecognizedReprHint {\n }\n \n #[derive(Diagnostic)]\n-#[diag(passes::attribute_should_be_applied_to, code = \"E0517\")]\n-pub struct AttributeShouldBeAppliedTo<'a> {\n-    #[primary_span]\n-    pub hint_span: Span,\n-    #[label]\n-    pub span: Span,\n-    pub what: &'a str,\n+pub enum AttrApplication {\n+    #[diag(passes::attr_application_enum, code = \"E0517\")]\n+    Enum {\n+        #[primary_span]\n+        hint_span: Span,\n+        #[label]\n+        span: Span,\n+    },\n+    #[diag(passes::attr_application_struct, code = \"E0517\")]\n+    Struct {\n+        #[primary_span]\n+        hint_span: Span,\n+        #[label]\n+        span: Span,\n+    },\n+    #[diag(passes::attr_application_struct_union, code = \"E0517\")]\n+    StructUnion {\n+        #[primary_span]\n+        hint_span: Span,\n+        #[label]\n+        span: Span,\n+    },\n+    #[diag(passes::attr_application_struct_enum_union, code = \"E0517\")]\n+    StructEnumUnion {\n+        #[primary_span]\n+        hint_span: Span,\n+        #[label]\n+        span: Span,\n+    },\n+    #[diag(passes::attr_application_struct_enum_function_union, code = \"E0517\")]\n+    StructEnumFunctionUnion {\n+        #[primary_span]\n+        hint_span: Span,\n+        #[label]\n+        span: Span,\n+    },\n }\n \n #[derive(Diagnostic)]"}]}