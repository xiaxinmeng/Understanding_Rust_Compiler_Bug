{"sha": "228578b9c7a3aced361e814dfd2dbabf4d131435", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyODU3OGI5YzdhM2FjZWQzNjFlODE0ZGZkMmRiYWJmNGQxMzE0MzU=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-12-05T06:17:40Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-12-05T06:17:40Z"}, "message": "Add count_newlines() utility function", "tree": {"sha": "a5403fec28e4578503b155418bbccd367e51f4ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5403fec28e4578503b155418bbccd367e51f4ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/228578b9c7a3aced361e814dfd2dbabf4d131435", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/228578b9c7a3aced361e814dfd2dbabf4d131435", "html_url": "https://github.com/rust-lang/rust/commit/228578b9c7a3aced361e814dfd2dbabf4d131435", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/228578b9c7a3aced361e814dfd2dbabf4d131435/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89f27764edcd5086278e032603efb8ea9b1591c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/89f27764edcd5086278e032603efb8ea9b1591c1", "html_url": "https://github.com/rust-lang/rust/commit/89f27764edcd5086278e032603efb8ea9b1591c1"}], "stats": {"total": 33, "additions": 17, "deletions": 16}, "files": [{"sha": "ac7779d0b21694c8d8fefe0604b5a75d34ee392e", "filename": "src/comment.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/228578b9c7a3aced361e814dfd2dbabf4d131435/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/228578b9c7a3aced361e814dfd2dbabf4d131435/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=228578b9c7a3aced361e814dfd2dbabf4d131435", "patch": "@@ -18,7 +18,7 @@ use config::Config;\n use rewrite::RewriteContext;\n use shape::{Indent, Shape};\n use string::{rewrite_string, StringFormat};\n-use utils::{first_line_width, last_line_width};\n+use utils::{count_newlines, first_line_width, last_line_width};\n \n fn is_custom_comment(comment: &str) -> bool {\n     if !comment.starts_with(\"//\") {\n@@ -296,7 +296,7 @@ fn rewrite_comment_inner(\n         config: config,\n     };\n \n-    let line_breaks = orig.trim_right().chars().filter(|&c| c == '\\n').count();\n+    let line_breaks = count_newlines(orig.trim_right());\n     let lines = orig.lines()\n         .enumerate()\n         .map(|(i, mut line)| {"}, {"sha": "fe3dfca627030477dcf21919ab76de671877b5e9", "filename": "src/expr.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/228578b9c7a3aced361e814dfd2dbabf4d131435/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/228578b9c7a3aced361e814dfd2dbabf4d131435/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=228578b9c7a3aced361e814dfd2dbabf4d131435", "patch": "@@ -2712,12 +2712,8 @@ pub fn choose_rhs<R: Rewrite>(\n }\n \n fn prefer_next_line(orig_rhs: &str, next_line_rhs: &str) -> bool {\n-    fn count_line_breaks(src: &str) -> usize {\n-        src.chars().filter(|&x| x == '\\n').count()\n-    }\n-\n-    !next_line_rhs.contains('\\n')\n-        || count_line_breaks(orig_rhs) > count_line_breaks(next_line_rhs) + 1\n+    use utils::count_newlines;\n+    !next_line_rhs.contains('\\n') || count_newlines(orig_rhs) > count_newlines(next_line_rhs) + 1\n }\n \n fn rewrite_expr_addrof("}, {"sha": "dde8cb54b282b8d70250bf6cafff38f060a9c3d9", "filename": "src/lists.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/228578b9c7a3aced361e814dfd2dbabf4d131435/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/228578b9c7a3aced361e814dfd2dbabf4d131435/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=228578b9c7a3aced361e814dfd2dbabf4d131435", "patch": "@@ -17,7 +17,7 @@ use comment::{find_comment_end, rewrite_comment, FindUncommented};\n use config::{Config, IndentStyle};\n use rewrite::RewriteContext;\n use shape::{Indent, Shape};\n-use utils::{first_line_width, last_line_width, mk_sp, starts_with_newline};\n+use utils::{count_newlines, first_line_width, last_line_width, mk_sp, starts_with_newline};\n \n /// Formatting tactic for lists. This will be cast down to a\n /// `DefinitiveListTactic` depending on the number and length of the items and\n@@ -651,7 +651,7 @@ where\n                 // From the end of the first line of comments to the next non-whitespace char.\n                 let test_snippet = &test_snippet[..first];\n \n-                if test_snippet.chars().filter(|c| c == &'\\n').count() > 1 {\n+                if count_newlines(test_snippet) > 1 {\n                     // There were multiple line breaks which got trimmed to nothing.\n                     new_lines = true;\n                 }"}, {"sha": "ffdc4e56e448f3d190a3391308106d75291414d9", "filename": "src/missed_spans.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/228578b9c7a3aced361e814dfd2dbabf4d131435/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/228578b9c7a3aced361e814dfd2dbabf4d131435/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=228578b9c7a3aced361e814dfd2dbabf4d131435", "patch": "@@ -16,7 +16,7 @@ use syntax::codemap::{BytePos, Pos, Span};\n use comment::{rewrite_comment, CodeCharKind, CommentCodeSlices};\n use config::WriteMode;\n use shape::{Indent, Shape};\n-use utils::mk_sp;\n+use utils::{count_newlines, mk_sp};\n use visitor::FmtVisitor;\n \n impl<'a> FmtVisitor<'a> {\n@@ -86,7 +86,7 @@ impl<'a> FmtVisitor<'a> {\n     }\n \n     fn push_vertical_spaces(&mut self, original: &str) {\n-        let mut newline_count = original.chars().filter(|&c| c == '\\n').count();\n+        let mut newline_count = count_newlines(original);\n         let newline_upper_bound = self.config.blank_lines_upper_bound() + 1;\n         let newline_lower_bound = self.config.blank_lines_lower_bound() + 1;\n         if newline_count > newline_upper_bound {\n@@ -171,7 +171,7 @@ impl<'a> FmtVisitor<'a> {\n \n                 let fix_indent = last_char.map_or(true, |rev_c| ['{', '\\n'].contains(&rev_c));\n \n-                let subslice_num_lines = subslice.chars().filter(|c| *c == '\\n').count();\n+                let subslice_num_lines = count_newlines(subslice);\n \n                 if rewrite_next_comment\n                     && !self.config.file_lines().intersects_range("}, {"sha": "7d3fcf73d56506e6cd0e7954d1073dccd8659219", "filename": "src/utils.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/228578b9c7a3aced361e814dfd2dbabf4d131435/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/228578b9c7a3aced361e814dfd2dbabf4d131435/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=228578b9c7a3aced361e814dfd2dbabf4d131435", "patch": "@@ -262,6 +262,11 @@ pub fn stmt_expr(stmt: &ast::Stmt) -> Option<&ast::Expr> {\n     }\n }\n \n+#[inline]\n+pub fn count_newlines(input: &str) -> usize {\n+    input.chars().filter(|&c| c == '\\n').count()\n+}\n+\n #[inline]\n pub fn trim_newlines(input: &str) -> &str {\n     match input.find(|c| c != '\\n' && c != '\\r') {"}, {"sha": "6db1999ee23747dd6e2cbdabec3ec0f315b0fc6b", "filename": "src/visitor.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/228578b9c7a3aced361e814dfd2dbabf4d131435/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/228578b9c7a3aced361e814dfd2dbabf4d131435/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=228578b9c7a3aced361e814dfd2dbabf4d131435", "patch": "@@ -31,7 +31,7 @@ use macros::{rewrite_macro, MacroPosition};\n use regex::Regex;\n use rewrite::{Rewrite, RewriteContext};\n use shape::{Indent, Shape};\n-use utils::{self, contains_skip, inner_attributes, mk_sp, ptr_vec_to_ref_vec};\n+use utils::{self, contains_skip, count_newlines, inner_attributes, mk_sp, ptr_vec_to_ref_vec};\n \n fn is_use_item(item: &ast::Item) -> bool {\n     match item.node {\n@@ -833,7 +833,7 @@ where\n             // Extract comments between two attributes.\n             let span_between_attr = mk_sp(attr.span.hi(), next_attr.span.lo());\n             let snippet = context.snippet(span_between_attr);\n-            if snippet.chars().filter(|c| *c == '\\n').count() >= 2 || snippet.contains('/') {\n+            if count_newlines(&snippet) >= 2 || snippet.contains('/') {\n                 break;\n             }\n         }\n@@ -886,7 +886,7 @@ fn has_newlines_before_after_comment(comment: &str) -> (&str, &str) {\n     // Look at before and after comment and see if there are any empty lines.\n     let comment_begin = comment.chars().position(|c| c == '/');\n     let len = comment_begin.unwrap_or_else(|| comment.len());\n-    let mlb = comment.chars().take(len).filter(|c| *c == '\\n').count() > 1;\n+    let mlb = count_newlines(&comment[..len]) > 1;\n     let mla = if comment_begin.is_none() {\n         mlb\n     } else {"}]}