{"sha": "d49d1d44995a75fd288f860c10b2bc18cfc8a5b4", "node_id": "C_kwDOAAsO6NoAKGQ0OWQxZDQ0OTk1YTc1ZmQyODhmODYwYzEwYjJiYzE4Y2ZjOGE1YjQ", "commit": {"author": {"name": "PFPoitras", "email": "patrick.f.poitras@gmail.com", "date": "2021-12-10T17:38:03Z"}, "committer": {"name": "PFPoitras", "email": "patrick.f.poitras@gmail.com", "date": "2021-12-15T22:35:29Z"}, "message": "Modifications to buffer UTF-16 internally so that there is no longer a 4-byte buffer minimum. Include suggestions from @agausmann and @Mark-Simulacrum.", "tree": {"sha": "e3190effd83becaf113af10ff58e13658c774ad9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3190effd83becaf113af10ff58e13658c774ad9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d49d1d44995a75fd288f860c10b2bc18cfc8a5b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d49d1d44995a75fd288f860c10b2bc18cfc8a5b4", "html_url": "https://github.com/rust-lang/rust/commit/d49d1d44995a75fd288f860c10b2bc18cfc8a5b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d49d1d44995a75fd288f860c10b2bc18cfc8a5b4/comments", "author": {"login": "Patrick-Poitras", "id": 42386710, "node_id": "MDQ6VXNlcjQyMzg2NzEw", "avatar_url": "https://avatars.githubusercontent.com/u/42386710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Patrick-Poitras", "html_url": "https://github.com/Patrick-Poitras", "followers_url": "https://api.github.com/users/Patrick-Poitras/followers", "following_url": "https://api.github.com/users/Patrick-Poitras/following{/other_user}", "gists_url": "https://api.github.com/users/Patrick-Poitras/gists{/gist_id}", "starred_url": "https://api.github.com/users/Patrick-Poitras/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Patrick-Poitras/subscriptions", "organizations_url": "https://api.github.com/users/Patrick-Poitras/orgs", "repos_url": "https://api.github.com/users/Patrick-Poitras/repos", "events_url": "https://api.github.com/users/Patrick-Poitras/events{/privacy}", "received_events_url": "https://api.github.com/users/Patrick-Poitras/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Patrick-Poitras", "id": 42386710, "node_id": "MDQ6VXNlcjQyMzg2NzEw", "avatar_url": "https://avatars.githubusercontent.com/u/42386710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Patrick-Poitras", "html_url": "https://github.com/Patrick-Poitras", "followers_url": "https://api.github.com/users/Patrick-Poitras/followers", "following_url": "https://api.github.com/users/Patrick-Poitras/following{/other_user}", "gists_url": "https://api.github.com/users/Patrick-Poitras/gists{/gist_id}", "starred_url": "https://api.github.com/users/Patrick-Poitras/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Patrick-Poitras/subscriptions", "organizations_url": "https://api.github.com/users/Patrick-Poitras/orgs", "repos_url": "https://api.github.com/users/Patrick-Poitras/repos", "events_url": "https://api.github.com/users/Patrick-Poitras/events{/privacy}", "received_events_url": "https://api.github.com/users/Patrick-Poitras/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "404c8471aba60c2d837fa728e7c729a0f52d5830", "url": "https://api.github.com/repos/rust-lang/rust/commits/404c8471aba60c2d837fa728e7c729a0f52d5830", "html_url": "https://github.com/rust-lang/rust/commit/404c8471aba60c2d837fa728e7c729a0f52d5830"}], "stats": {"total": 72, "additions": 54, "deletions": 18}, "files": [{"sha": "8478ca043a353786a8f9eb6433c7821f17db3f89", "filename": "library/std/src/sys/windows/stdio.rs", "status": "modified", "additions": 54, "deletions": 18, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/d49d1d44995a75fd288f860c10b2bc18cfc8a5b4/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d49d1d44995a75fd288f860c10b2bc18cfc8a5b4/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstdio.rs?ref=d49d1d44995a75fd288f860c10b2bc18cfc8a5b4", "patch": "@@ -15,7 +15,9 @@ use core::str::utf8_char_width;\n // the value over time (such as if a process calls `SetStdHandle` while it's running). See #40490.\n pub struct Stdin {\n     surrogate: u16,\n+    incomplete_utf8: IncompleteUtf8,\n }\n+\n pub struct Stdout {\n     incomplete_utf8: IncompleteUtf8,\n }\n@@ -29,6 +31,25 @@ struct IncompleteUtf8 {\n     len: u8,\n }\n \n+impl IncompleteUtf8 {\n+    // Implemented for use in Stdin::read.\n+    fn read(&mut self, buf: &mut [u8]) -> usize {\n+        // Write to buffer until the buffer is full or we run out of bytes.\n+        let to_write = cmp::min(buf.len(), self.len as usize);\n+        buf[..to_write].copy_from_slice(&self.bytes[..to_write]);\n+\n+        // Rotate the remaining bytes if not enough remaining space in buffer.\n+        if usize::from(self.len) > buf.len() {\n+            self.bytes.copy_within(to_write.., 0);\n+            self.len -= to_write as u8;\n+        } else {\n+            self.len = 0;\n+        }\n+\n+        to_write\n+    }\n+}\n+\n // Apparently Windows doesn't handle large reads on stdin or writes to stdout/stderr well (see\n // #13304 for details).\n //\n@@ -205,7 +226,7 @@ fn write_u16s(handle: c::HANDLE, data: &[u16]) -> io::Result<usize> {\n \n impl Stdin {\n     pub const fn new() -> Stdin {\n-        Stdin { surrogate: 0 }\n+        Stdin { surrogate: 0, incomplete_utf8: IncompleteUtf8::new() }\n     }\n }\n \n@@ -221,24 +242,39 @@ impl io::Read for Stdin {\n             }\n         }\n \n-        if buf.len() == 0 {\n-            return Ok(0);\n-        } else if buf.len() < 4 {\n-            return Err(io::Error::new_const(\n-                io::ErrorKind::InvalidInput,\n-                &\"Windows stdin in console mode does not support a buffer too small to \\\n-                 guarantee holding one arbitrary UTF-8 character (4 bytes)\",\n-            ));\n+        // If there are bytes in the incomplete utf-8, start with those.\n+        // (No-op if there is nothing in the buffer.)\n+        let mut bytes_copied = self.incomplete_utf8.read(buf);\n+\n+        if bytes_copied == buf.len() {\n+            return Ok(bytes_copied);\n+        } else if buf.len() - bytes_copied < 4 {\n+            // Not enough space to get a UTF-8 byte. We will use the incomplete UTF8.\n+            let mut utf16_buf = [0u16; 1];\n+            // Read one u16 character.\n+            let read = read_u16s_fixup_surrogates(handle, &mut utf16_buf, 1, &mut self.surrogate)?;\n+            // Read bytes, using the (now-empty) self.incomplete_utf8 as extra space.\n+            let read_bytes = utf16_to_utf8(&utf16_buf[..read], &mut self.incomplete_utf8.bytes)?;\n+\n+            // Read in the bytes from incomplete_utf8 until the buffer is full.\n+            self.incomplete_utf8.len = read_bytes as u8;\n+            // No-op if no bytes.\n+            bytes_copied += self.incomplete_utf8.read(&mut buf[bytes_copied..]);\n+            Ok(bytes_copied)\n+        } else {\n+            let mut utf16_buf = [0u16; MAX_BUFFER_SIZE / 2];\n+            // In the worst case, a UTF-8 string can take 3 bytes for every `u16` of a UTF-16. So\n+            // we can read at most a third of `buf.len()` chars and uphold the guarantee no data gets\n+            // lost.\n+            let amount = cmp::min(buf.len() / 3, utf16_buf.len());\n+            let read =\n+                read_u16s_fixup_surrogates(handle, &mut utf16_buf, amount, &mut self.surrogate)?;\n+\n+            match utf16_to_utf8(&utf16_buf[..read], buf) {\n+                Ok(value) => return Ok(bytes_copied + value),\n+                Err(e) => return Err(e),\n+            }\n         }\n-\n-        let mut utf16_buf = [0u16; MAX_BUFFER_SIZE / 2];\n-        // In the worst case, a UTF-8 string can take 3 bytes for every `u16` of a UTF-16. So\n-        // we can read at most a third of `buf.len()` chars and uphold the guarantee no data gets\n-        // lost.\n-        let amount = cmp::min(buf.len() / 3, utf16_buf.len());\n-        let read = read_u16s_fixup_surrogates(handle, &mut utf16_buf, amount, &mut self.surrogate)?;\n-\n-        utf16_to_utf8(&utf16_buf[..read], buf)\n     }\n }\n "}]}