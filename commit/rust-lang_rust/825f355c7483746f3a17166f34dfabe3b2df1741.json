{"sha": "825f355c7483746f3a17166f34dfabe3b2df1741", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyNWYzNTVjNzQ4Mzc0NmYzYTE3MTY2ZjM0ZGZhYmUzYjJkZjE3NDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-07T04:26:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-07T04:26:08Z"}, "message": "Auto merge of #57998 - niklasf:align-enum, r=nagisa\n\nAllow #[repr(align(x))] on enums (#57996)\n\nTracking issue: #57996\n\nImplements an extension of [RFC 1358](https://github.com/rust-lang/rfcs/blob/master/text/1358-repr-align.md) behind a feature flag (`repr_align_enum`). Originally introduced here for structs: #39999.\n\nIt seems like only HIR-level changes are required, since enums are already aware of their alignment (due to alignment of their limbs).\n\ncc @bitshifter", "tree": {"sha": "1ed704e1f30589c3bcebd154e43247c7a2a7615c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ed704e1f30589c3bcebd154e43247c7a2a7615c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/825f355c7483746f3a17166f34dfabe3b2df1741", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/825f355c7483746f3a17166f34dfabe3b2df1741", "html_url": "https://github.com/rust-lang/rust/commit/825f355c7483746f3a17166f34dfabe3b2df1741", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/825f355c7483746f3a17166f34dfabe3b2df1741/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1efdda10cdde386ea3e470ba2b482fdc73c12001", "url": "https://api.github.com/repos/rust-lang/rust/commits/1efdda10cdde386ea3e470ba2b482fdc73c12001", "html_url": "https://github.com/rust-lang/rust/commit/1efdda10cdde386ea3e470ba2b482fdc73c12001"}, {"sha": "a6fd6eccda42f86e40b73d788e8099adeb66e37b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6fd6eccda42f86e40b73d788e8099adeb66e37b", "html_url": "https://github.com/rust-lang/rust/commit/a6fd6eccda42f86e40b73d788e8099adeb66e37b"}], "stats": {"total": 219, "additions": 191, "deletions": 28}, "files": [{"sha": "415c6ebe8b4bcfe7e45026f4e0dda575da807bcb", "filename": "src/doc/unstable-book/src/language-features/repr-align-enum.md", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/825f355c7483746f3a17166f34dfabe3b2df1741/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Frepr-align-enum.md", "raw_url": "https://github.com/rust-lang/rust/raw/825f355c7483746f3a17166f34dfabe3b2df1741/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Frepr-align-enum.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Frepr-align-enum.md?ref=825f355c7483746f3a17166f34dfabe3b2df1741", "patch": "@@ -0,0 +1,42 @@\n+# `repr_align_enum`\n+\n+The tracking issue for this feature is: [#57996]\n+\n+[#57996]: https://github.com/rust-lang/rust/issues/57996\n+\n+------------------------\n+\n+The `repr_align_enum` feature allows using the `#[repr(align(x))]` attribute\n+on enums, similarly to structs.\n+\n+# Examples\n+\n+```rust\n+#![feature(repr_align_enum)]\n+\n+#[repr(align(8))]\n+enum Aligned {\n+    Foo,\n+    Bar { value: u32 },\n+}\n+\n+fn main() {\n+    assert_eq!(std::mem::align_of::<Aligned>(), 8);\n+}\n+```\n+\n+This is equivalent to using an aligned wrapper struct everywhere:\n+\n+```rust\n+#[repr(align(8))]\n+struct Aligned(Unaligned);\n+\n+enum Unaligned {\n+    Foo,\n+    Bar { value: u32 },\n+}\n+\n+fn main() {\n+    assert_eq!(std::mem::align_of::<Aligned>(), 8);\n+}\n+```"}, {"sha": "4c467567c4d93370af4b0efb3cd42574b3841fd1", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/825f355c7483746f3a17166f34dfabe3b2df1741/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/825f355c7483746f3a17166f34dfabe3b2df1741/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=825f355c7483746f3a17166f34dfabe3b2df1741", "patch": "@@ -186,8 +186,8 @@ impl<'a, 'tcx> CheckAttrVisitor<'a, 'tcx> {\n             };\n \n             let (article, allowed_targets) = match &*name.as_str() {\n-                \"C\" => {\n-                    is_c = true;\n+                \"C\" | \"align\" => {\n+                    is_c |= name == \"C\";\n                     if target != Target::Struct &&\n                             target != Target::Union &&\n                             target != Target::Enum {\n@@ -212,14 +212,6 @@ impl<'a, 'tcx> CheckAttrVisitor<'a, 'tcx> {\n                         continue\n                     }\n                 }\n-                \"align\" => {\n-                    if target != Target::Struct &&\n-                            target != Target::Union {\n-                        (\"a\", \"struct or union\")\n-                    } else {\n-                        continue\n-                    }\n-                }\n                 \"transparent\" => {\n                     is_transparent = true;\n                     if target != Target::Struct {"}, {"sha": "e7b9a884b5e0caed0b78ab51601e77e694baf904", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/825f355c7483746f3a17166f34dfabe3b2df1741/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/825f355c7483746f3a17166f34dfabe3b2df1741/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=825f355c7483746f3a17166f34dfabe3b2df1741", "patch": "@@ -464,6 +464,9 @@ declare_features! (\n \n     // #[optimize(X)]\n     (active, optimize_attribute, \"1.34.0\", Some(54882), None),\n+\n+    // #[repr(align(X))] on enums\n+    (active, repr_align_enum, \"1.34.0\", Some(57996), None),\n );\n \n declare_features! (\n@@ -1700,6 +1703,17 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 }\n             }\n \n+            ast::ItemKind::Enum(..) => {\n+                for attr in attr::filter_by_name(&i.attrs[..], \"repr\") {\n+                    for item in attr.meta_item_list().unwrap_or_else(Vec::new) {\n+                        if item.check_name(\"align\") {\n+                            gate_feature_post!(&self, repr_align_enum, attr.span,\n+                                               \"`#[repr(align(x))]` on enums is experimental\");\n+                        }\n+                    }\n+                }\n+            }\n+\n             ast::ItemKind::Impl(_, polarity, defaultness, _, _, _, _) => {\n                 if polarity == ast::ImplPolarity::Negative {\n                     gate_feature_post!(&self, optin_builtin_traits,"}, {"sha": "2251c54229ee0227e615dfc7c1010da041698466", "filename": "src/test/codegen/align-enum.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/825f355c7483746f3a17166f34dfabe3b2df1741/src%2Ftest%2Fcodegen%2Falign-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/825f355c7483746f3a17166f34dfabe3b2df1741/src%2Ftest%2Fcodegen%2Falign-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Falign-enum.rs?ref=825f355c7483746f3a17166f34dfabe3b2df1741", "patch": "@@ -0,0 +1,36 @@\n+// compile-flags: -C no-prepopulate-passes\n+// ignore-tidy-linelength\n+// min-llvm-version 7.0\n+\n+#![crate_type = \"lib\"]\n+#![feature(repr_align_enum)]\n+\n+#[repr(align(64))]\n+pub enum Align64 {\n+    A(u32),\n+    B(u32),\n+}\n+// CHECK: %Align64 = type { [0 x i32], i32, [15 x i32] }\n+\n+pub struct Nested64 {\n+    a: u8,\n+    b: Align64,\n+    c: u16,\n+}\n+\n+// CHECK-LABEL: @align64\n+#[no_mangle]\n+pub fn align64(a: u32) -> Align64 {\n+// CHECK: %a64 = alloca %Align64, align 64\n+// CHECK: call void @llvm.memcpy.{{.*}}(i8* align 64 %{{.*}}, i8* align 64 %{{.*}}, i{{[0-9]+}} 64, i1 false)\n+    let a64 = Align64::A(a);\n+    a64\n+}\n+\n+// CHECK-LABEL: @nested64\n+#[no_mangle]\n+pub fn nested64(a: u8, b: u32, c: u16) -> Nested64 {\n+// CHECK: %n64 = alloca %Nested64, align 64\n+    let n64 = Nested64 { a, b: Align64::B(b), c };\n+    n64\n+}"}, {"sha": "8d72b1f6f0d24b99b1307706e6307a623b6e7499", "filename": "src/test/run-pass/structs-enums/align-enum.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/825f355c7483746f3a17166f34dfabe3b2df1741/src%2Ftest%2Frun-pass%2Fstructs-enums%2Falign-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/825f355c7483746f3a17166f34dfabe3b2df1741/src%2Ftest%2Frun-pass%2Fstructs-enums%2Falign-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstructs-enums%2Falign-enum.rs?ref=825f355c7483746f3a17166f34dfabe3b2df1741", "patch": "@@ -0,0 +1,55 @@\n+// run-pass\n+#![allow(dead_code)]\n+#![feature(repr_align_enum)]\n+\n+use std::mem;\n+\n+// Raising alignment\n+#[repr(align(16))]\n+enum Align16 {\n+    Foo { foo: u32 },\n+    Bar { bar: u32 },\n+}\n+\n+// Raise alignment by maximum\n+#[repr(align(1), align(16))]\n+#[repr(align(32))]\n+#[repr(align(4))]\n+enum Align32 {\n+    Foo,\n+    Bar,\n+}\n+\n+// Not reducing alignment\n+#[repr(align(4))]\n+enum AlsoAlign16 {\n+    Foo { limb_with_align16: Align16 },\n+    Bar,\n+}\n+\n+// No niche for discriminant when used as limb\n+#[repr(align(16))]\n+struct NoNiche16(u64, u64);\n+\n+// Discriminant will require extra space, but enum needs to stay compatible\n+// with alignment 16\n+#[repr(align(1))]\n+enum AnotherAlign16 {\n+    Foo { limb_with_noniche16: NoNiche16 },\n+    Bar,\n+    Baz,\n+}\n+\n+fn main() {\n+    assert_eq!(mem::align_of::<Align16>(), 16);\n+    assert_eq!(mem::size_of::<Align16>(), 16);\n+\n+    assert_eq!(mem::align_of::<Align32>(), 32);\n+    assert_eq!(mem::size_of::<Align32>(), 32);\n+\n+    assert_eq!(mem::align_of::<AlsoAlign16>(), 16);\n+    assert_eq!(mem::size_of::<AlsoAlign16>(), 16);\n+\n+    assert_eq!(mem::align_of::<AnotherAlign16>(), 16);\n+    assert_eq!(mem::size_of::<AnotherAlign16>(), 32);\n+}"}, {"sha": "1df2947cbe2ddd565ec4fd9c814fd241b65e1314", "filename": "src/test/ui/attr-usage-repr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/825f355c7483746f3a17166f34dfabe3b2df1741/src%2Ftest%2Fui%2Fattr-usage-repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/825f355c7483746f3a17166f34dfabe3b2df1741/src%2Ftest%2Fui%2Fattr-usage-repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattr-usage-repr.rs?ref=825f355c7483746f3a17166f34dfabe3b2df1741", "patch": "@@ -1,4 +1,5 @@\n #![feature(repr_simd)]\n+#![feature(repr_align_enum)]\n \n #[repr(C)] //~ ERROR: attribute should be applied to struct, enum or union\n fn f() {}\n@@ -18,7 +19,7 @@ struct SInt(f64, f64);\n #[repr(C)]\n enum EExtern { A, B }\n \n-#[repr(align(8))] //~ ERROR: attribute should be applied to struct\n+#[repr(align(8))]\n enum EAlign { A, B }\n \n #[repr(packed)] //~ ERROR: attribute should be applied to struct"}, {"sha": "abb8685e4cef0791a03abd1847eb552e8427dbe4", "filename": "src/test/ui/attr-usage-repr.stderr", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/825f355c7483746f3a17166f34dfabe3b2df1741/src%2Ftest%2Fui%2Fattr-usage-repr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/825f355c7483746f3a17166f34dfabe3b2df1741/src%2Ftest%2Fui%2Fattr-usage-repr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattr-usage-repr.stderr?ref=825f355c7483746f3a17166f34dfabe3b2df1741", "patch": "@@ -1,43 +1,35 @@\n error[E0517]: attribute should be applied to struct, enum or union\n-  --> $DIR/attr-usage-repr.rs:3:8\n+  --> $DIR/attr-usage-repr.rs:4:8\n    |\n LL | #[repr(C)] //~ ERROR: attribute should be applied to struct, enum or union\n    |        ^\n LL | fn f() {}\n    | --------- not a struct, enum or union\n \n error[E0517]: attribute should be applied to enum\n-  --> $DIR/attr-usage-repr.rs:15:8\n+  --> $DIR/attr-usage-repr.rs:16:8\n    |\n LL | #[repr(i8)] //~ ERROR: attribute should be applied to enum\n    |        ^^\n LL | struct SInt(f64, f64);\n    | ---------------------- not an enum\n \n error[E0517]: attribute should be applied to struct or union\n-  --> $DIR/attr-usage-repr.rs:21:8\n-   |\n-LL | #[repr(align(8))] //~ ERROR: attribute should be applied to struct\n-   |        ^^^^^^^^\n-LL | enum EAlign { A, B }\n-   | -------------------- not a struct or union\n-\n-error[E0517]: attribute should be applied to struct or union\n-  --> $DIR/attr-usage-repr.rs:24:8\n+  --> $DIR/attr-usage-repr.rs:25:8\n    |\n LL | #[repr(packed)] //~ ERROR: attribute should be applied to struct\n    |        ^^^^^^\n LL | enum EPacked { A, B }\n    | --------------------- not a struct or union\n \n error[E0517]: attribute should be applied to struct\n-  --> $DIR/attr-usage-repr.rs:27:8\n+  --> $DIR/attr-usage-repr.rs:28:8\n    |\n LL | #[repr(simd)] //~ ERROR: attribute should be applied to struct\n    |        ^^^^\n LL | enum ESimd { A, B }\n    | ------------------- not a struct\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0517`."}, {"sha": "f8e68a9de015be5604a7e1055870bb036ea20d78", "filename": "src/test/ui/feature-gates/feature-gate-repr_align_enum.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/825f355c7483746f3a17166f34dfabe3b2df1741/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr_align_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/825f355c7483746f3a17166f34dfabe3b2df1741/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr_align_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr_align_enum.rs?ref=825f355c7483746f3a17166f34dfabe3b2df1741", "patch": "@@ -0,0 +1,10 @@\n+#[repr(align(16))]\n+struct Foo(u64);\n+\n+#[repr(align(8))] //~ ERROR `#[repr(align(x))]` on enums is experimental (see issue #57996)\n+enum Bar {\n+    Foo { foo: Foo },\n+    Baz,\n+}\n+\n+fn main() { }"}, {"sha": "6def25f9651184f67d5e17a36f6ed5d2f08d75ea", "filename": "src/test/ui/feature-gates/feature-gate-repr_align_enum.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/825f355c7483746f3a17166f34dfabe3b2df1741/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr_align_enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/825f355c7483746f3a17166f34dfabe3b2df1741/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr_align_enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr_align_enum.stderr?ref=825f355c7483746f3a17166f34dfabe3b2df1741", "patch": "@@ -0,0 +1,11 @@\n+error[E0658]: `#[repr(align(x))]` on enums is experimental (see issue #57996)\n+  --> $DIR/feature-gate-repr_align_enum.rs:4:1\n+   |\n+LL | #[repr(align(8))] //~ ERROR `#[repr(align(x))]` on enums is experimental (see issue #57996)\n+   | ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(repr_align_enum)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "9ce89e82ca2256c4ac5fc54a92551f05ce57d2aa", "filename": "src/test/ui/repr/repr-align.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/825f355c7483746f3a17166f34dfabe3b2df1741/src%2Ftest%2Fui%2Frepr%2Frepr-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/825f355c7483746f3a17166f34dfabe3b2df1741/src%2Ftest%2Fui%2Frepr%2Frepr-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Frepr-align.rs?ref=825f355c7483746f3a17166f34dfabe3b2df1741", "patch": "@@ -1,3 +1,4 @@\n+#![feature(repr_align_enum)]\n #![allow(dead_code)]\n \n #[repr(align(16.0))] //~ ERROR: invalid `repr(align)` attribute: not an unsuffixed integer\n@@ -12,4 +13,7 @@ struct C(i32);\n #[repr(align(536870912))] // ok: this is the largest accepted alignment\n struct D(i32);\n \n+#[repr(align(15))] //~ ERROR: invalid `repr(align)` attribute: not a power of two\n+enum E { Left, Right }\n+\n fn main() {}"}, {"sha": "f1a5d88ace1fd15a55dac7bdbdf01a7d67dd9c83", "filename": "src/test/ui/repr/repr-align.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/825f355c7483746f3a17166f34dfabe3b2df1741/src%2Ftest%2Fui%2Frepr%2Frepr-align.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/825f355c7483746f3a17166f34dfabe3b2df1741/src%2Ftest%2Fui%2Frepr%2Frepr-align.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Frepr-align.stderr?ref=825f355c7483746f3a17166f34dfabe3b2df1741", "patch": "@@ -1,21 +1,27 @@\n error[E0589]: invalid `repr(align)` attribute: not an unsuffixed integer\n-  --> $DIR/repr-align.rs:3:8\n+  --> $DIR/repr-align.rs:4:8\n    |\n LL | #[repr(align(16.0))] //~ ERROR: invalid `repr(align)` attribute: not an unsuffixed integer\n    |        ^^^^^^^^^^^\n \n error[E0589]: invalid `repr(align)` attribute: not a power of two\n-  --> $DIR/repr-align.rs:6:8\n+  --> $DIR/repr-align.rs:7:8\n    |\n LL | #[repr(align(15))] //~ ERROR: invalid `repr(align)` attribute: not a power of two\n    |        ^^^^^^^^^\n \n error[E0589]: invalid `repr(align)` attribute: larger than 2^29\n-  --> $DIR/repr-align.rs:9:8\n+  --> $DIR/repr-align.rs:10:8\n    |\n LL | #[repr(align(4294967296))] //~ ERROR: invalid `repr(align)` attribute: larger than 2^29\n    |        ^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error[E0589]: invalid `repr(align)` attribute: not a power of two\n+  --> $DIR/repr-align.rs:16:8\n+   |\n+LL | #[repr(align(15))] //~ ERROR: invalid `repr(align)` attribute: not a power of two\n+   |        ^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0589`."}]}