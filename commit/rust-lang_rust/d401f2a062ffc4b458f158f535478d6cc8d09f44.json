{"sha": "d401f2a062ffc4b458f158f535478d6cc8d09f44", "node_id": "C_kwDOAAsO6NoAKGQ0MDFmMmEwNjJmZmM0YjQ1OGYxNThmNTM1NDc4ZDZjYzhkMDlmNDQ", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-09-25T15:32:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-25T15:32:00Z"}, "message": "Merge #10211\n\n10211: assists: Promote module to folder r=jonas-schievink a=longfangsong\n\nClose part of #10143.\r\n\r\nThis PR adds a assist to promote module to directory, which means make a .rs file module into a directory style module with the same name.\r\n\r\n![\u672a\u547d\u540d(1)](https://user-images.githubusercontent.com/13777628/132958377-14555d6f-a64a-4b9b-9154-90a3b86fd685.gif)\r\n\n\nCo-authored-by: longfangsong <longfangsong@icloud.com>", "tree": {"sha": "5cc17ed5dd9d11729ab73b2ce4bc0df514dde3ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cc17ed5dd9d11729ab73b2ce4bc0df514dde3ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d401f2a062ffc4b458f158f535478d6cc8d09f44", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhT0DwCRBK7hj4Ov3rIwAAf8sIAKU2vZgHg8MgTOWAmhieT3cD\nXTK8/Qh4etmCoDcq9jgmlQiMmW1ercJvuZ/euQhyQCzaSsDHYHMQEpXTBd0gy3W5\nhNvUFvktfTJTif85fOyEqvCPQnpFcrkTm0ORftbn3S9+a35g+I6SdxYoAVC+VGXh\nTYQ4WfkEkZ86ekYbpI5NkHO0RbmoZf7YXgiOKmU/U4j5m7L+ehFx8sp9Nf14bhVQ\nS9CYpC0ePE3h8Z1tqPUv34rURqyPb18Kt3nhET/oxb5R7C4D3EdBkBaroKMe2Yrt\nPI+F8dgXBgMdYoW0vA0AU6+L28V+LmsusdfCZ/HBRQhg4gJyjmpvmp1s6w7ptj4=\n=cFyD\n-----END PGP SIGNATURE-----\n", "payload": "tree 5cc17ed5dd9d11729ab73b2ce4bc0df514dde3ef\nparent 2a970bac37c930f72a483653271ecac323fd0d38\nparent 22abbe86f343a2c3ce639a15ba88502cf6eebfe6\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1632583920 +0000\ncommitter GitHub <noreply@github.com> 1632583920 +0000\n\nMerge #10211\n\n10211: assists: Promote module to folder r=jonas-schievink a=longfangsong\n\nClose part of #10143.\r\n\r\nThis PR adds a assist to promote module to directory, which means make a .rs file module into a directory style module with the same name.\r\n\r\n![\u672a\u547d\u540d(1)](https://user-images.githubusercontent.com/13777628/132958377-14555d6f-a64a-4b9b-9154-90a3b86fd685.gif)\r\n\n\nCo-authored-by: longfangsong <longfangsong@icloud.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d401f2a062ffc4b458f158f535478d6cc8d09f44", "html_url": "https://github.com/rust-lang/rust/commit/d401f2a062ffc4b458f158f535478d6cc8d09f44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d401f2a062ffc4b458f158f535478d6cc8d09f44/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a970bac37c930f72a483653271ecac323fd0d38", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a970bac37c930f72a483653271ecac323fd0d38", "html_url": "https://github.com/rust-lang/rust/commit/2a970bac37c930f72a483653271ecac323fd0d38"}, {"sha": "22abbe86f343a2c3ce639a15ba88502cf6eebfe6", "url": "https://api.github.com/repos/rust-lang/rust/commits/22abbe86f343a2c3ce639a15ba88502cf6eebfe6", "html_url": "https://github.com/rust-lang/rust/commit/22abbe86f343a2c3ce639a15ba88502cf6eebfe6"}], "stats": {"total": 225, "additions": 215, "deletions": 10}, "files": [{"sha": "671a945a449bcf6c399197f7a33e2ae2b8a6ecb9", "filename": "crates/ide_assists/src/assist_context.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d401f2a062ffc4b458f158f535478d6cc8d09f44/crates%2Fide_assists%2Fsrc%2Fassist_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d401f2a062ffc4b458f158f535478d6cc8d09f44/crates%2Fide_assists%2Fsrc%2Fassist_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fassist_context.rs?ref=d401f2a062ffc4b458f158f535478d6cc8d09f44", "patch": "@@ -294,6 +294,10 @@ impl AssistBuilder {\n         let file_system_edit = FileSystemEdit::CreateFile { dst, initial_contents: content.into() };\n         self.source_change.push_file_system_edit(file_system_edit);\n     }\n+    pub(crate) fn move_file(&mut self, src: FileId, dst: AnchoredPathBuf) {\n+        let file_system_edit = FileSystemEdit::MoveFile { src, dst };\n+        self.source_change.push_file_system_edit(file_system_edit);\n+    }\n \n     fn finish(mut self) -> SourceChange {\n         self.commit();"}, {"sha": "9b060bb710f0538791f999ff5fca85be3d6629fc", "filename": "crates/ide_assists/src/handlers/move_to_mod_rs.rs", "status": "added", "additions": 180, "deletions": 0, "changes": 180, "blob_url": "https://github.com/rust-lang/rust/blob/d401f2a062ffc4b458f158f535478d6cc8d09f44/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_to_mod_rs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d401f2a062ffc4b458f158f535478d6cc8d09f44/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_to_mod_rs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmove_to_mod_rs.rs?ref=d401f2a062ffc4b458f158f535478d6cc8d09f44", "patch": "@@ -0,0 +1,180 @@\n+use ide_db::{\n+    assists::{AssistId, AssistKind},\n+    base_db::AnchoredPathBuf,\n+};\n+use syntax::{\n+    ast::{self, Whitespace},\n+    AstNode, AstToken, SourceFile, TextRange, TextSize,\n+};\n+\n+use crate::assist_context::{AssistContext, Assists};\n+\n+/// Trim(remove leading and trailing whitespace) `initial_range` in `source_file`, return the trimmed range.\n+fn trimmed_text_range(source_file: &SourceFile, initial_range: TextRange) -> TextRange {\n+    let mut trimmed_range = initial_range;\n+    while source_file\n+        .syntax()\n+        .token_at_offset(trimmed_range.start())\n+        .find_map(Whitespace::cast)\n+        .is_some()\n+        && trimmed_range.start() < trimmed_range.end()\n+    {\n+        let start = trimmed_range.start() + TextSize::from(1);\n+        trimmed_range = TextRange::new(start, trimmed_range.end());\n+    }\n+    while source_file\n+        .syntax()\n+        .token_at_offset(trimmed_range.end())\n+        .find_map(Whitespace::cast)\n+        .is_some()\n+        && trimmed_range.start() < trimmed_range.end()\n+    {\n+        let end = trimmed_range.end() - TextSize::from(1);\n+        trimmed_range = TextRange::new(trimmed_range.start(), end);\n+    }\n+    trimmed_range\n+}\n+\n+// Assist: move_to_mod_rs\n+//\n+// Moves xxx.rs to xxx/mod.rs.\n+//\n+// ```\n+// //- /main.rs\n+// mod a;\n+// //- /a.rs\n+// $0fn t() {}$0\n+// ```\n+// ->\n+// ```\n+// fn t() {}\n+// ```\n+pub(crate) fn move_to_mod_rs(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    let source_file = ctx.find_node_at_offset::<ast::SourceFile>()?;\n+    let module = ctx.sema.to_module_def(ctx.frange.file_id)?;\n+    // Enable this assist if the user select all \"meaningful\" content in the source file\n+    let trimmed_selected_range = trimmed_text_range(&source_file, ctx.frange.range);\n+    let trimmed_file_range = trimmed_text_range(&source_file, source_file.syntax().text_range());\n+    if module.is_mod_rs(ctx.db()) {\n+        cov_mark::hit!(already_mod_rs);\n+        return None;\n+    }\n+    if trimmed_selected_range != trimmed_file_range {\n+        cov_mark::hit!(not_all_selected);\n+        return None;\n+    }\n+\n+    let target = TextRange::new(\n+        source_file.syntax().text_range().start(),\n+        source_file.syntax().text_range().end(),\n+    );\n+    let module_name = module.name(ctx.db())?.to_string();\n+    let path = format!(\"./{}/mod.rs\", module_name);\n+    let dst = AnchoredPathBuf { anchor: ctx.frange.file_id, path };\n+    acc.add(\n+        AssistId(\"move_to_mod_rs\", AssistKind::Refactor),\n+        format!(\"Turn {}.rs to {}/mod.rs\", module_name, module_name),\n+        target,\n+        |builder| {\n+            builder.move_file(ctx.frange.file_id, dst);\n+        },\n+    )\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n+\n+    use super::*;\n+\n+    #[test]\n+    fn trivial() {\n+        check_assist(\n+            move_to_mod_rs,\n+            r#\"\n+//- /main.rs\n+mod a;\n+//- /a.rs\n+$0fn t() {}\n+$0\"#,\n+            r#\"\n+//- /a/mod.rs\n+fn t() {}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn must_select_all_file() {\n+        cov_mark::check!(not_all_selected);\n+        check_assist_not_applicable(\n+            move_to_mod_rs,\n+            r#\"\n+//- /main.rs\n+mod a;\n+//- /a.rs\n+fn t() {}$0\n+\"#,\n+        );\n+        cov_mark::check!(not_all_selected);\n+        check_assist_not_applicable(\n+            move_to_mod_rs,\n+            r#\"\n+//- /main.rs\n+mod a;\n+//- /a.rs\n+$0fn$0 t() {}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn cannot_promote_mod_rs() {\n+        cov_mark::check!(already_mod_rs);\n+        check_assist_not_applicable(\n+            move_to_mod_rs,\n+            r#\"//- /main.rs\n+mod a;\n+//- /a/mod.rs\n+$0fn t() {}$0\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn cannot_promote_main_and_lib_rs() {\n+        check_assist_not_applicable(\n+            move_to_mod_rs,\n+            r#\"//- /main.rs\n+$0fn t() {}$0\n+\"#,\n+        );\n+        check_assist_not_applicable(\n+            move_to_mod_rs,\n+            r#\"//- /lib.rs\n+$0fn t() {}$0\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn works_in_mod() {\n+        // note: /a/b.rs remains untouched\n+        check_assist(\n+            move_to_mod_rs,\n+            r#\"//- /main.rs\n+mod a;\n+//- /a.rs\n+$0mod b;\n+fn t() {}$0\n+//- /a/b.rs\n+fn t1() {}\n+\"#,\n+            r#\"\n+//- /a/mod.rs\n+mod b;\n+fn t() {}\n+\"#,\n+        );\n+    }\n+}"}, {"sha": "53348c26d6f978ecb896a61eb3c3cfd864ccbad0", "filename": "crates/ide_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d401f2a062ffc4b458f158f535478d6cc8d09f44/crates%2Fide_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d401f2a062ffc4b458f158f535478d6cc8d09f44/crates%2Fide_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Flib.rs?ref=d401f2a062ffc4b458f158f535478d6cc8d09f44", "patch": "@@ -153,6 +153,7 @@ mod handlers {\n     mod move_bounds;\n     mod move_guard;\n     mod move_module_to_file;\n+    mod move_to_mod_rs;\n     mod pull_assignment_up;\n     mod qualify_path;\n     mod raw_string;\n@@ -226,6 +227,7 @@ mod handlers {\n             move_guard::move_arm_cond_to_match_guard,\n             move_guard::move_guard_to_arm_body,\n             move_module_to_file::move_module_to_file,\n+            move_to_mod_rs::move_to_mod_rs,\n             pull_assignment_up::pull_assignment_up,\n             qualify_path::qualify_path,\n             raw_string::add_hash,"}, {"sha": "e211b09987b0f460af4f24d87cd6b823691ce9af", "filename": "crates/ide_assists/src/tests.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d401f2a062ffc4b458f158f535478d6cc8d09f44/crates%2Fide_assists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d401f2a062ffc4b458f158f535478d6cc8d09f44/crates%2Fide_assists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests.rs?ref=d401f2a062ffc4b458f158f535478d6cc8d09f44", "patch": "@@ -142,7 +142,6 @@ fn check(handler: Handler, before: &str, expected: ExpectedResult, assist_label:\n         (Some(assist), ExpectedResult::After(after)) => {\n             let source_change =\n                 assist.source_change.expect(\"Assist did not contain any source changes\");\n-            assert!(!source_change.source_file_edits.is_empty());\n             let skip_header = source_change.source_file_edits.len() == 1\n                 && source_change.file_system_edits.len() == 0;\n \n@@ -160,15 +159,19 @@ fn check(handler: Handler, before: &str, expected: ExpectedResult, assist_label:\n             }\n \n             for file_system_edit in source_change.file_system_edits {\n-                if let FileSystemEdit::CreateFile { dst, initial_contents } = file_system_edit {\n-                    let sr = db.file_source_root(dst.anchor);\n-                    let sr = db.source_root(sr);\n-                    let mut base = sr.path_for_file(&dst.anchor).unwrap().clone();\n-                    base.pop();\n-                    let created_file_path = format!(\"{}{}\", base.to_string(), &dst.path[1..]);\n-                    format_to!(buf, \"//- {}\\n\", created_file_path);\n-                    buf.push_str(&initial_contents);\n-                }\n+                let (dst, contents) = match file_system_edit {\n+                    FileSystemEdit::CreateFile { dst, initial_contents } => (dst, initial_contents),\n+                    FileSystemEdit::MoveFile { src, dst } => {\n+                        (dst, db.file_text(src).as_ref().to_owned())\n+                    }\n+                };\n+                let sr = db.file_source_root(dst.anchor);\n+                let sr = db.source_root(sr);\n+                let mut base = sr.path_for_file(&dst.anchor).unwrap().clone();\n+                base.pop();\n+                let created_file_path = format!(\"{}{}\", base.to_string(), &dst.path[1..]);\n+                format_to!(buf, \"//- {}\\n\", created_file_path);\n+                buf.push_str(&contents);\n             }\n \n             assert_eq_text!(after, &buf);"}, {"sha": "831f63d47622e8b47bef5947be2e7617fa10d5d3", "filename": "crates/ide_assists/src/tests/generated.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d401f2a062ffc4b458f158f535478d6cc8d09f44/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d401f2a062ffc4b458f158f535478d6cc8d09f44/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=d401f2a062ffc4b458f158f535478d6cc8d09f44", "patch": "@@ -1303,6 +1303,22 @@ mod foo;\n     )\n }\n \n+#[test]\n+fn doctest_move_to_mod_rs() {\n+    check_doc_test(\n+        \"move_to_mod_rs\",\n+        r#####\"\n+//- /main.rs\n+mod a;\n+//- /a.rs\n+$0fn t() {}$0\n+\"#####,\n+        r#####\"\n+fn t() {}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_pull_assignment_up() {\n     check_doc_test("}]}