{"sha": "b7587f1867c73f3517d7071bb4989dd7e19540f1", "node_id": "C_kwDOAAsO6NoAKGI3NTg3ZjE4NjdjNzNmMzUxN2Q3MDcxYmI0OTg5ZGQ3ZTE5NTQwZjE", "commit": {"author": {"name": "fee1-dead", "email": "ent3rm4n@gmail.com", "date": "2023-01-09T15:35:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-09T15:35:26Z"}, "message": "Rollup merge of #105292 - JulianKnodt:no_eager_commit, r=BoxyUwU\n\nChange a commit_if_ok call to probe\n\nRemoves an over-eager `commit_if_ok` which makes inference worse.\n\nI'm not entirely sure whether it's ok to remove the check that types are the same, because casting seems to cause equality checks with incorrect types?\n\nFixes #105037\n\nr? ```@BoxyUwU```", "tree": {"sha": "a753b01a6dd18bebb2710a09df9bd65503776e17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a753b01a6dd18bebb2710a09df9bd65503776e17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7587f1867c73f3517d7071bb4989dd7e19540f1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjvDQ+CRBK7hj4Ov3rIwAADe0IAGwTuyYOqywAX1O9PV8+jVUB\nhPiOpinksZTRFAojvpeKlvxOr7IIWL/kaI+qtu5X2VS6VlZ+hHZBxSTvnM8bTsy4\nHrhfT1/ucXwC7CnxzCa7WARPtqpovh8wP/tMwdqLT9Da32sYGQsQT3GZO7kZAPs0\n3uP79drsqrSm6KGbpgQI0swe6z6qCRzBP54XT9UK7xu47elWuVmYyg30cXBHm6Va\n7mIKF3cz1GWNF3RpJs1MfVrYbIbUh31DROsBhb8Qw72kV5r9ySwmOw1UOeIPeRxr\nF2mkxezR03vKszyo6Z5Davlh8yyakhYl0u/RCIvgDiCaOSjccY4Bbknu1b4tcW0=\n=QmK2\n-----END PGP SIGNATURE-----\n", "payload": "tree a753b01a6dd18bebb2710a09df9bd65503776e17\nparent 89e0576bd3aec2f1acf935b353900bd75742860b\nparent 21c5ffe008cce39bcd676ed197f691adbfbf7a2f\nauthor fee1-dead <ent3rm4n@gmail.com> 1673278526 +0800\ncommitter GitHub <noreply@github.com> 1673278526 +0800\n\nRollup merge of #105292 - JulianKnodt:no_eager_commit, r=BoxyUwU\n\nChange a commit_if_ok call to probe\n\nRemoves an over-eager `commit_if_ok` which makes inference worse.\n\nI'm not entirely sure whether it's ok to remove the check that types are the same, because casting seems to cause equality checks with incorrect types?\n\nFixes #105037\n\nr? ```@BoxyUwU```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7587f1867c73f3517d7071bb4989dd7e19540f1", "html_url": "https://github.com/rust-lang/rust/commit/b7587f1867c73f3517d7071bb4989dd7e19540f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7587f1867c73f3517d7071bb4989dd7e19540f1/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89e0576bd3aec2f1acf935b353900bd75742860b", "url": "https://api.github.com/repos/rust-lang/rust/commits/89e0576bd3aec2f1acf935b353900bd75742860b", "html_url": "https://github.com/rust-lang/rust/commit/89e0576bd3aec2f1acf935b353900bd75742860b"}, {"sha": "21c5ffe008cce39bcd676ed197f691adbfbf7a2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/21c5ffe008cce39bcd676ed197f691adbfbf7a2f", "html_url": "https://github.com/rust-lang/rust/commit/21c5ffe008cce39bcd676ed197f691adbfbf7a2f"}], "stats": {"total": 237, "additions": 221, "deletions": 16}, "files": [{"sha": "71fb6058cd2c54e722a0be82f736dd295f7b9ceb", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 26, "deletions": 16, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/b7587f1867c73f3517d7071bb4989dd7e19540f1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7587f1867c73f3517d7071bb4989dd7e19540f1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=b7587f1867c73f3517d7071bb4989dd7e19540f1", "patch": "@@ -168,24 +168,27 @@ fn satisfied_from_param_env<'tcx>(\n         param_env: ty::ParamEnv<'tcx>,\n \n         infcx: &'a InferCtxt<'tcx>,\n+        single_match: Option<Result<ty::Const<'tcx>, ()>>,\n     }\n+\n     impl<'a, 'tcx> TypeVisitor<'tcx> for Visitor<'a, 'tcx> {\n         type BreakTy = ();\n         fn visit_const(&mut self, c: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n             debug!(\"is_const_evaluatable: candidate={:?}\", c);\n-            if let Ok(()) = self.infcx.commit_if_ok(|_| {\n+            if self.infcx.probe(|_| {\n                 let ocx = ObligationCtxt::new_in_snapshot(self.infcx);\n-                if let Ok(()) = ocx.eq(&ObligationCause::dummy(), self.param_env, c.ty(), self.ct.ty())\n-                    && let Ok(()) = ocx.eq(&ObligationCause::dummy(), self.param_env, c, self.ct)\n+                ocx.eq(&ObligationCause::dummy(), self.param_env, c.ty(), self.ct.ty()).is_ok()\n+                    && ocx.eq(&ObligationCause::dummy(), self.param_env, c, self.ct).is_ok()\n                     && ocx.select_all_or_error().is_empty()\n-                {\n-                    Ok(())\n-                } else {\n-                    Err(())\n-                }\n             }) {\n-                ControlFlow::BREAK\n-            } else if let ty::ConstKind::Expr(e) = c.kind() {\n+                self.single_match = match self.single_match {\n+                    None => Some(Ok(c)),\n+                    Some(Ok(o)) if o == c => Some(Ok(c)),\n+                    Some(_) => Some(Err(())),\n+                };\n+            }\n+\n+            if let ty::ConstKind::Expr(e) = c.kind() {\n                 e.visit_with(self)\n             } else {\n                 // FIXME(generic_const_exprs): This doesn't recurse into `<T as Trait<U>>::ASSOC`'s substs.\n@@ -200,22 +203,29 @@ fn satisfied_from_param_env<'tcx>(\n         }\n     }\n \n+    let mut single_match: Option<Result<ty::Const<'tcx>, ()>> = None;\n+\n     for pred in param_env.caller_bounds() {\n         match pred.kind().skip_binder() {\n             ty::PredicateKind::ConstEvaluatable(ce) => {\n                 let b_ct = tcx.expand_abstract_consts(ce);\n-                let mut v = Visitor { ct, infcx, param_env };\n-                let result = b_ct.visit_with(&mut v);\n+                let mut v = Visitor { ct, infcx, param_env, single_match };\n+                let _ = b_ct.visit_with(&mut v);\n \n-                if let ControlFlow::Break(()) = result {\n-                    debug!(\"is_const_evaluatable: yes\");\n-                    return true;\n-                }\n+                single_match = v.single_match;\n             }\n             _ => {} // don't care\n         }\n     }\n \n+    if let Some(Ok(c)) = single_match {\n+        let ocx = ObligationCtxt::new(infcx);\n+        assert!(ocx.eq(&ObligationCause::dummy(), param_env, c.ty(), ct.ty()).is_ok());\n+        assert!(ocx.eq(&ObligationCause::dummy(), param_env, c, ct).is_ok());\n+        assert!(ocx.select_all_or_error().is_empty());\n+        return true;\n+    }\n+\n     debug!(\"is_const_evaluatable: no\");\n     false\n }"}, {"sha": "1e8d8c3d3559bc3d0675054f3b1685f8eec6cbac", "filename": "src/test/ui/const-generics/ensure_is_evaluatable.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b7587f1867c73f3517d7071bb4989dd7e19540f1/src%2Ftest%2Fui%2Fconst-generics%2Fensure_is_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7587f1867c73f3517d7071bb4989dd7e19540f1/src%2Ftest%2Fui%2Fconst-generics%2Fensure_is_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fensure_is_evaluatable.rs?ref=b7587f1867c73f3517d7071bb4989dd7e19540f1", "patch": "@@ -0,0 +1,20 @@\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+fn foo<const N: usize, const M: usize>() -> [(); N+2]\n+where\n+    [(); N + 1]:,\n+    [(); M + 1]:,\n+{\n+    bar()\n+    //~^ ERROR: unconstrained\n+}\n+\n+fn bar<const N: usize>() -> [(); N]\n+where\n+    [(); N + 1]:,\n+{\n+    [(); N]\n+}\n+\n+fn main() {}"}, {"sha": "bf6c35ad8fd8667a92a166971261d3c48fa650bc", "filename": "src/test/ui/const-generics/ensure_is_evaluatable.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b7587f1867c73f3517d7071bb4989dd7e19540f1/src%2Ftest%2Fui%2Fconst-generics%2Fensure_is_evaluatable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7587f1867c73f3517d7071bb4989dd7e19540f1/src%2Ftest%2Fui%2Fconst-generics%2Fensure_is_evaluatable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fensure_is_evaluatable.stderr?ref=b7587f1867c73f3517d7071bb4989dd7e19540f1", "patch": "@@ -0,0 +1,18 @@\n+error: unconstrained generic constant\n+  --> $DIR/ensure_is_evaluatable.rs:9:5\n+   |\n+LL |     bar()\n+   |     ^^^\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); N + 1]:`\n+note: required by a bound in `bar`\n+  --> $DIR/ensure_is_evaluatable.rs:15:10\n+   |\n+LL | fn bar<const N: usize>() -> [(); N]\n+   |    --- required by a bound in this\n+LL | where\n+LL |     [(); N + 1]:,\n+   |          ^^^^^ required by this bound in `bar`\n+\n+error: aborting due to previous error\n+"}, {"sha": "0d6246a9f02c3449ecd8f112d6651787db318919", "filename": "src/test/ui/const-generics/fn_with_two_const_inputs.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b7587f1867c73f3517d7071bb4989dd7e19540f1/src%2Ftest%2Fui%2Fconst-generics%2Ffn_with_two_const_inputs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7587f1867c73f3517d7071bb4989dd7e19540f1/src%2Ftest%2Fui%2Fconst-generics%2Ffn_with_two_const_inputs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn_with_two_const_inputs.rs?ref=b7587f1867c73f3517d7071bb4989dd7e19540f1", "patch": "@@ -0,0 +1,23 @@\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+const fn both(_: usize, b: usize) -> usize {\n+    b\n+}\n+\n+fn foo<const N: usize, const M: usize>() -> [(); N + 2]\n+where\n+    [(); both(N + 1, M + 1)]:,\n+{\n+    bar()\n+    //~^ ERROR: unconstrained generic constant\n+}\n+\n+fn bar<const N: usize>() -> [(); N]\n+where\n+    [(); N + 1]:,\n+{\n+    [(); N]\n+}\n+\n+fn main() {}"}, {"sha": "614e7e0d2fc202617b6cf10ed123d9d38bbe43e7", "filename": "src/test/ui/const-generics/fn_with_two_const_inputs.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b7587f1867c73f3517d7071bb4989dd7e19540f1/src%2Ftest%2Fui%2Fconst-generics%2Ffn_with_two_const_inputs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7587f1867c73f3517d7071bb4989dd7e19540f1/src%2Ftest%2Fui%2Fconst-generics%2Ffn_with_two_const_inputs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn_with_two_const_inputs.stderr?ref=b7587f1867c73f3517d7071bb4989dd7e19540f1", "patch": "@@ -0,0 +1,18 @@\n+error: unconstrained generic constant\n+  --> $DIR/fn_with_two_const_inputs.rs:12:5\n+   |\n+LL |     bar()\n+   |     ^^^\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); N + 1]:`\n+note: required by a bound in `bar`\n+  --> $DIR/fn_with_two_const_inputs.rs:18:10\n+   |\n+LL | fn bar<const N: usize>() -> [(); N]\n+   |    --- required by a bound in this\n+LL | where\n+LL |     [(); N + 1]:,\n+   |          ^^^^^ required by this bound in `bar`\n+\n+error: aborting due to previous error\n+"}, {"sha": "f0ce093e07a4f14b268a94d8c4032ab5ee56cb13", "filename": "src/test/ui/const-generics/fn_with_two_same_const_inputs.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b7587f1867c73f3517d7071bb4989dd7e19540f1/src%2Ftest%2Fui%2Fconst-generics%2Ffn_with_two_same_const_inputs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7587f1867c73f3517d7071bb4989dd7e19540f1/src%2Ftest%2Fui%2Fconst-generics%2Ffn_with_two_same_const_inputs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn_with_two_same_const_inputs.rs?ref=b7587f1867c73f3517d7071bb4989dd7e19540f1", "patch": "@@ -0,0 +1,22 @@\n+// check-pass\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+const fn both(_: usize, b: usize) -> usize {\n+    b\n+}\n+\n+fn foo<const N: usize>()\n+where\n+    [(); both(N + 1, N + 1)]:,\n+{\n+    bar::<N>();\n+}\n+\n+fn bar<const N: usize>()\n+where\n+    [(); N + 1]:,\n+{\n+}\n+\n+fn main() {}"}, {"sha": "f7d239499439688047b95f81ad9543c989e25525", "filename": "src/test/ui/const-generics/issues/issue-105037.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b7587f1867c73f3517d7071bb4989dd7e19540f1/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-105037.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7587f1867c73f3517d7071bb4989dd7e19540f1/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-105037.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-105037.rs?ref=b7587f1867c73f3517d7071bb4989dd7e19540f1", "patch": "@@ -0,0 +1,35 @@\n+// run-pass\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+#![allow(dead_code)]\n+\n+trait Table<const D: usize>: Sync {\n+    const COLUMNS: usize;\n+}\n+\n+struct Table1<const D: usize>;\n+impl<const D: usize> Table<D> for Table1<D> {\n+    const COLUMNS: usize = 123;\n+}\n+\n+struct Table2<const D: usize>;\n+impl<const D: usize> Table<D> for Table2<D> {\n+    const COLUMNS: usize = 456;\n+}\n+\n+fn process_table<T: Table<D>, const D: usize>(_table: T)\n+where\n+    [(); T::COLUMNS]:,\n+{\n+}\n+\n+fn process_all_tables<const D: usize>()\n+where\n+    [(); Table2::<D>::COLUMNS]:,\n+    [(); Table1::<D>::COLUMNS]:,\n+{\n+    process_table(Table1::<D>);\n+    process_table(Table2::<D>);\n+}\n+\n+fn main() {}"}, {"sha": "de608f73e2c0c0ffb8f5d4cd0d6841c686b41927", "filename": "src/test/ui/const-generics/two_matching_preds.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b7587f1867c73f3517d7071bb4989dd7e19540f1/src%2Ftest%2Fui%2Fconst-generics%2Ftwo_matching_preds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7587f1867c73f3517d7071bb4989dd7e19540f1/src%2Ftest%2Fui%2Fconst-generics%2Ftwo_matching_preds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftwo_matching_preds.rs?ref=b7587f1867c73f3517d7071bb4989dd7e19540f1", "patch": "@@ -0,0 +1,19 @@\n+// check-pass\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+fn foo<const N: usize>()\n+where\n+    [(); N + 1]:,\n+    [(); N + 1]:,\n+{\n+    bar::<N>();\n+}\n+\n+fn bar<const N: usize>()\n+where\n+    [(); N + 1]:,\n+{\n+}\n+\n+fn main() {}"}, {"sha": "1271e0902a3bd5c06b852a7db408c94a824df91a", "filename": "src/test/ui/const-generics/unify_with_nested_expr.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b7587f1867c73f3517d7071bb4989dd7e19540f1/src%2Ftest%2Fui%2Fconst-generics%2Funify_with_nested_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7587f1867c73f3517d7071bb4989dd7e19540f1/src%2Ftest%2Fui%2Fconst-generics%2Funify_with_nested_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funify_with_nested_expr.rs?ref=b7587f1867c73f3517d7071bb4989dd7e19540f1", "patch": "@@ -0,0 +1,18 @@\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+fn foo<const N: usize>()\n+where\n+    [(); N + 1 + 1]:,\n+{\n+    bar();\n+    //~^ ERROR: type annotations\n+}\n+\n+fn bar<const N: usize>()\n+where\n+    [(); N + 1]:,\n+{\n+}\n+\n+fn main() {}"}, {"sha": "8bab0dff7f26371966ca88721c3653fe64e6a2cf", "filename": "src/test/ui/const-generics/unify_with_nested_expr.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b7587f1867c73f3517d7071bb4989dd7e19540f1/src%2Ftest%2Fui%2Fconst-generics%2Funify_with_nested_expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7587f1867c73f3517d7071bb4989dd7e19540f1/src%2Ftest%2Fui%2Fconst-generics%2Funify_with_nested_expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funify_with_nested_expr.stderr?ref=b7587f1867c73f3517d7071bb4989dd7e19540f1", "patch": "@@ -0,0 +1,22 @@\n+error[E0284]: type annotations needed\n+  --> $DIR/unify_with_nested_expr.rs:8:5\n+   |\n+LL |     bar();\n+   |     ^^^ cannot infer the value of the const parameter `N` declared on the function `bar`\n+   |\n+note: required by a bound in `bar`\n+  --> $DIR/unify_with_nested_expr.rs:14:10\n+   |\n+LL | fn bar<const N: usize>()\n+   |    --- required by a bound in this\n+LL | where\n+LL |     [(); N + 1]:,\n+   |          ^^^^^ required by this bound in `bar`\n+help: consider specifying the generic argument\n+   |\n+LL |     bar::<N>();\n+   |        +++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0284`."}]}