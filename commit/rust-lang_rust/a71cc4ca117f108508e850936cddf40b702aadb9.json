{"sha": "a71cc4ca117f108508e850936cddf40b702aadb9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3MWNjNGNhMTE3ZjEwODUwOGU4NTA5MzZjZGRmNDBiNzAyYWFkYjk=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-01-14T04:21:10Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-01-28T13:12:52Z"}, "message": "Place conflict functions take Local by value", "tree": {"sha": "0d1b68e568d243c29a6efc264106268236f0dee9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d1b68e568d243c29a6efc264106268236f0dee9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a71cc4ca117f108508e850936cddf40b702aadb9", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEmNHc6jmXzkUyxd4xiMlBzaHUZDIFAl4wM1QACgkQiMlBzaHU\nZDLsjA/+N/lndcBh2QFApYrFMY3NmibGGAKx7sPK8sSirb+akqfozKbg2522Qhtp\n/2w/APKeYMpTUpC+xNNeSrh17fxlO8wL6j9Ndn0SaH1+6g9mE9B6z+ecd0gkaNSI\n4WbXGEMsS67oGchSR2z8yM0jv/AjZeQKnJXOTjnuLTYKvpOB9LyzmO8IRUVx+To8\ne6Zio6Yp/UypXeURc2qZzX6aESVQuuvRRpSISABLOAQoWRbMRpqqt38/6hT+bOxN\nUgMRO5gpnE7EfMFzpSjtZ1vyJAHToieeNEcWnKgHlMOQzXKJS5gnqXPtrLASCOc6\nE58EI2nqXhNn1wTMnqMCDCuKQ7vrJkE9GZtuZWz5x8LxObi4HrS+kQDlI+W6albU\n2U3OHxlVMI815k3eUAy+k0Hpda/l8MJHzFw5QefroswGh9e97pEvnF9f90AF1Y1C\n44NpjBIwIIm7iSuYgqVRc5iERNneVcFBKlSWG74lZrso5hIpdnsibpQamZHf1TeZ\ndY422zrvJXzrxpcTp1d/Q+LdiEyljR6xIwVhU/RMJ4GBAnwFVJxwLRRAjhI+RFOb\noyAexMfaJqbhIb+X50pKcNVYcEc4V4j5pZzmI2yEs/Vowipc7pZUfordIcVdMvUw\n5s+mZNaI+dUteE3Ii8BZOCwFUV/WZ8NRKnbTT3Dj2hnuzq2B7kU=\n=qPKR\n-----END PGP SIGNATURE-----", "payload": "tree 0d1b68e568d243c29a6efc264106268236f0dee9\nparent b181835a6bacfa449f55d46764a10e25d1c471dc\nauthor Santiago Pastorino <spastorino@gmail.com> 1578975670 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1580217172 -0300\n\nPlace conflict functions take Local by value\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a71cc4ca117f108508e850936cddf40b702aadb9", "html_url": "https://github.com/rust-lang/rust/commit/a71cc4ca117f108508e850936cddf40b702aadb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a71cc4ca117f108508e850936cddf40b702aadb9/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b181835a6bacfa449f55d46764a10e25d1c471dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/b181835a6bacfa449f55d46764a10e25d1c471dc", "html_url": "https://github.com/rust-lang/rust/commit/b181835a6bacfa449f55d46764a10e25d1c471dc"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "6b1cdaf9b383c9e76e1bb554b78c2f1fbb648a15", "filename": "src/librustc_mir/borrow_check/places_conflict.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a71cc4ca117f108508e850936cddf40b702aadb9/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a71cc4ca117f108508e850936cddf40b702aadb9/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs?ref=a71cc4ca117f108508e850936cddf40b702aadb9", "patch": "@@ -119,10 +119,10 @@ fn place_components_conflict<'tcx>(\n     //    and either equal or disjoint.\n     //  - If we did run out of access, the borrow can access a part of it.\n \n-    let borrow_local = &borrow_place.local;\n+    let borrow_local = borrow_place.local;\n     let access_local = access_place.local;\n \n-    match place_base_conflict(borrow_local, access_local) {\n+    match place_base_conflict(borrow_local, *access_local) {\n         Overlap::Arbitrary => {\n             bug!(\"Two base can't return Arbitrary\");\n         }\n@@ -208,7 +208,7 @@ fn place_components_conflict<'tcx>(\n             // access cares about.\n \n             let proj_base = &borrow_place.projection[..access_place.projection.len() + i];\n-            let base_ty = Place::ty_from(borrow_local, proj_base, body, tcx).ty;\n+            let base_ty = Place::ty_from(&borrow_local, proj_base, body, tcx).ty;\n \n             match (elem, &base_ty.kind, access) {\n                 (_, _, Shallow(Some(ArtificialField::ArrayLength)))\n@@ -293,7 +293,7 @@ fn place_components_conflict<'tcx>(\n // Given that the bases of `elem1` and `elem2` are always either equal\n // or disjoint (and have the same type!), return the overlap situation\n // between `elem1` and `elem2`.\n-fn place_base_conflict(l1: &Local, l2: &Local) -> Overlap {\n+fn place_base_conflict(l1: Local, l2: Local) -> Overlap {\n     if l1 == l2 {\n         // the same local - base case, equal\n         debug!(\"place_element_conflict: DISJOINT-OR-EQ-LOCAL\");\n@@ -311,7 +311,7 @@ fn place_base_conflict(l1: &Local, l2: &Local) -> Overlap {\n fn place_projection_conflict<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     body: &Body<'tcx>,\n-    pi1_local: &Local,\n+    pi1_local: Local,\n     pi1_proj_base: &[PlaceElem<'tcx>],\n     pi1_elem: &PlaceElem<'tcx>,\n     pi2_elem: &PlaceElem<'tcx>,\n@@ -329,7 +329,7 @@ fn place_projection_conflict<'tcx>(\n                 debug!(\"place_element_conflict: DISJOINT-OR-EQ-FIELD\");\n                 Overlap::EqualOrDisjoint\n             } else {\n-                let ty = Place::ty_from(pi1_local, pi1_proj_base, body, tcx).ty;\n+                let ty = Place::ty_from(&pi1_local, pi1_proj_base, body, tcx).ty;\n                 match ty.kind {\n                     ty::Adt(def, _) if def.is_union() => {\n                         // Different fields of a union, we are basically stuck."}]}