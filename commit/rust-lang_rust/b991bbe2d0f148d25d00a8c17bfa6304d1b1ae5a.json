{"sha": "b991bbe2d0f148d25d00a8c17bfa6304d1b1ae5a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5OTFiYmUyZDBmMTQ4ZDI1ZDAwYThjMTdiZmE2MzA0ZDFiMWFlNWE=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2014-05-19T21:37:52Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2014-05-20T01:45:36Z"}, "message": "Reset the terminal color before the newline for diagnostics\n\nWhen printing colored diagnostics, we need to reset the terminal before\nemitting the newline, not after. Otherwise it gets line-buffered and the\ncolor won't reset until the next line is printed or the compiler exits.\n\nNormally this isn't a problem, but when running rustc in parallel with\nother processes (e.g. `make -j4`) this can cause the color to leak\nto other lines.", "tree": {"sha": "0a75a4ffaab40116499c84fc285c0a7575cbcce1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a75a4ffaab40116499c84fc285c0a7575cbcce1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b991bbe2d0f148d25d00a8c17bfa6304d1b1ae5a", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b991bbe2d0f148d25d00a8c17bfa6304d1b1ae5a", "html_url": "https://github.com/rust-lang/rust/commit/b991bbe2d0f148d25d00a8c17bfa6304d1b1ae5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b991bbe2d0f148d25d00a8c17bfa6304d1b1ae5a/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8c579e01d026df002fe6522d6f9c123b3920dc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8c579e01d026df002fe6522d6f9c123b3920dc8", "html_url": "https://github.com/rust-lang/rust/commit/e8c579e01d026df002fe6522d6f9c123b3920dc8"}], "stats": {"total": 23, "additions": 21, "deletions": 2}, "files": [{"sha": "3eb6f40ba53c39250734040b1591ad9fe6b62b37", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b991bbe2d0f148d25d00a8c17bfa6304d1b1ae5a/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b991bbe2d0f148d25d00a8c17bfa6304d1b1ae5a/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=b991bbe2d0f148d25d00a8c17bfa6304d1b1ae5a", "patch": "@@ -232,8 +232,27 @@ fn print_maybe_styled(w: &mut EmitterWriter,\n     match w.dst {\n         Terminal(ref mut t) => {\n             try!(t.attr(color));\n-            try!(t.write_str(msg));\n-            try!(t.reset());\n+            // If `msg` ends in a newline, we need to reset the color before\n+            // the newline. We're making the assumption that we end up writing\n+            // to a `LineBufferedWriter`, which means that emitting the reset\n+            // after the newline ends up buffering the reset until we print\n+            // another line or exit. Buffering the reset is a problem if we're\n+            // sharing the terminal with any other programs (e.g. other rustc\n+            // instances via `make -jN`).\n+            //\n+            // Note that if `msg` contains any internal newlines, this will\n+            // result in the `LineBufferedWriter` flushing twice instead of\n+            // once, which still leaves the opportunity for interleaved output\n+            // to be miscolored. We assume this is rare enough that we don't\n+            // have to worry about it.\n+            if msg.ends_with(\"\\n\") {\n+                try!(t.write_str(msg.slice_to(msg.len()-1)));\n+                try!(t.reset());\n+                try!(t.write_str(\"\\n\"));\n+            } else {\n+                try!(t.write_str(msg));\n+                try!(t.reset());\n+            }\n             Ok(())\n         }\n         Raw(ref mut w) => {"}]}