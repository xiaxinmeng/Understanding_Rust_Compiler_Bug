{"sha": "660f41865b43f38d68b649328c04b1702e37655e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2MGY0MTg2NWI0M2YzOGQ2OGI2NDkzMjhjMDRiMTcwMmUzNzY1NWU=", "commit": {"author": {"name": "Mika Attila", "email": "radiantstatue@gmail.com", "date": "2015-08-28T08:28:28Z"}, "committer": {"name": "Mika Attila", "email": "radiantstatue@gmail.com", "date": "2015-08-28T08:39:58Z"}, "message": "Only exit after running all destructors and flushing stdout", "tree": {"sha": "cc0416055a9af71bdf91a89c9a74bfd8f21fef58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc0416055a9af71bdf91a89c9a74bfd8f21fef58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/660f41865b43f38d68b649328c04b1702e37655e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/660f41865b43f38d68b649328c04b1702e37655e", "html_url": "https://github.com/rust-lang/rust/commit/660f41865b43f38d68b649328c04b1702e37655e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/660f41865b43f38d68b649328c04b1702e37655e/comments", "author": {"login": "crumblingstatue", "id": 1521976, "node_id": "MDQ6VXNlcjE1MjE5NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1521976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crumblingstatue", "html_url": "https://github.com/crumblingstatue", "followers_url": "https://api.github.com/users/crumblingstatue/followers", "following_url": "https://api.github.com/users/crumblingstatue/following{/other_user}", "gists_url": "https://api.github.com/users/crumblingstatue/gists{/gist_id}", "starred_url": "https://api.github.com/users/crumblingstatue/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crumblingstatue/subscriptions", "organizations_url": "https://api.github.com/users/crumblingstatue/orgs", "repos_url": "https://api.github.com/users/crumblingstatue/repos", "events_url": "https://api.github.com/users/crumblingstatue/events{/privacy}", "received_events_url": "https://api.github.com/users/crumblingstatue/received_events", "type": "User", "site_admin": false}, "committer": {"login": "crumblingstatue", "id": 1521976, "node_id": "MDQ6VXNlcjE1MjE5NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1521976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crumblingstatue", "html_url": "https://github.com/crumblingstatue", "followers_url": "https://api.github.com/users/crumblingstatue/followers", "following_url": "https://api.github.com/users/crumblingstatue/following{/other_user}", "gists_url": "https://api.github.com/users/crumblingstatue/gists{/gist_id}", "starred_url": "https://api.github.com/users/crumblingstatue/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crumblingstatue/subscriptions", "organizations_url": "https://api.github.com/users/crumblingstatue/orgs", "repos_url": "https://api.github.com/users/crumblingstatue/repos", "events_url": "https://api.github.com/users/crumblingstatue/events{/privacy}", "received_events_url": "https://api.github.com/users/crumblingstatue/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e4e44531532e89ef0c4a7195db9a75d79faa9dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e4e44531532e89ef0c4a7195db9a75d79faa9dc", "html_url": "https://github.com/rust-lang/rust/commit/9e4e44531532e89ef0c4a7195db9a75d79faa9dc"}], "stats": {"total": 60, "additions": 42, "deletions": 18}, "files": [{"sha": "e57ba18614d04a1271ff97c5ce2701b97bdd3272", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 42, "deletions": 18, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/660f41865b43f38d68b649328c04b1702e37655e/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/660f41865b43f38d68b649328c04b1702e37655e/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=660f41865b43f38d68b649328c04b1702e37655e", "patch": "@@ -10,7 +10,6 @@\n #![feature(path_ext)]\n #![feature(rustc_private)]\n #![cfg(not(test))]\n-#![feature(result_expect)]\n \n #[macro_use]\n extern crate log;\n@@ -52,8 +51,11 @@ fn lookup_and_read_project_file() -> io::Result<(PathBuf, String)> {\n     Ok((path, toml))\n }\n \n-fn main() {\n-    let (args, write_mode) = determine_params(std::env::args());\n+fn execute() -> i32 {\n+    let (args, write_mode) = match determine_params(std::env::args()) {\n+        Some((args, write_mode)) => (args, write_mode),\n+        None => return 1,\n+    };\n \n     let config = match lookup_and_read_project_file() {\n         Ok((path, toml)) => {\n@@ -64,43 +66,65 @@ fn main() {\n     };\n \n     run(args, write_mode, Box::new(config));\n-    std::process::exit(0);\n+    0\n }\n \n-fn usage<S: Into<String>>(reason: S) {\n-    print!(\"{}\\n\\r usage: rustfmt [-h Help] [--write-mode=[true/false]] <file_name>\", reason.into());\n-    std::process::exit(1);\n+fn main() {\n+    use std::io::Write;\n+    let exit_code = execute();\n+    // Make sure standard output is flushed before we exit\n+    std::io::stdout().flush().unwrap();\n+    // Exit with given exit code.\n+    //\n+    // NOTE: This immediately terminates the process without doing any cleanup,\n+    // so make sure to finish all necessary cleanup before this is called.\n+    std::process::exit(exit_code);\n }\n \n-fn determine_params<I>(args: I) -> (Vec<String>, WriteMode)\n+fn print_usage<S: Into<String>>(reason: S) {\n+    println!(\"{}\\n\\r usage: rustfmt [-h Help] [--write-mode=[true/false]] <file_name>\", reason.into());\n+}\n+\n+fn determine_params<I>(args: I) -> Option<(Vec<String>, WriteMode)>\n     where I: Iterator<Item = String>\n {\n     let arg_prefix = \"-\";\n     let write_mode_prefix = \"--write-mode=\";\n     let help_mode = \"-h\";\n     let long_help_mode = \"--help\";\n     let mut write_mode = WriteMode::Replace;\n+    let args: Vec<String> = args.collect();\n \n     // The NewFile option currently isn't supported because it requires another\n     // parameter, but it can be added later.\n-    let args:Vec<String> = args.filter(|arg| {\n+    if args.iter().any(|arg| {\n         if arg.starts_with(write_mode_prefix) {\n-            write_mode = FromStr::from_str(&arg[write_mode_prefix.len()..]).expect(\"Unrecognized write mode\");\n+            write_mode = match FromStr::from_str(&arg[write_mode_prefix.len()..]) {\n+                Ok(mode) => mode,\n+                Err(_) => {\n+                    print_usage(\"Unrecognized write mode\");\n+                    return true;\n+                }\n+            };\n             false\n         } else if arg.starts_with(help_mode) || arg.starts_with(long_help_mode) {\n-            usage(\"\");\n-            false\n+            print_usage(\"\");\n+            true\n         } else if arg.starts_with(arg_prefix) {\n-            usage(\"Invalid argument\");\n-            false\n-        } else {\n+            print_usage(\"Invalid argument\");\n             true\n+        } else {\n+            false\n         }\n-    }).collect();\n+    }) {\n+        return None;\n+    }\n+\n     if args.len() < 2 {\n-        usage(\"Please provide a file to be formatted\");\n+        print_usage(\"Please provide a file to be formatted\");\n+        return None;\n     }\n \n \n-    (args, write_mode)\n+    Some((args, write_mode))\n }"}]}