{"sha": "977d69fc1992b0cef8d8ff020261d5bf9ede7424", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3N2Q2OWZjMTk5MmIwY2VmOGQ4ZmYwMjAyNjFkNWJmOWVkZTc0MjQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-10T05:47:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-10T05:47:50Z"}, "message": "Rollup merge of #69714 - spastorino:place-ref-lifetime, r=oli-obk\n\nMake PlaceRef take just one lifetime\n\nr? @eddyb", "tree": {"sha": "44575b3b7866d3d898ab0ad4b736aea7260d6f55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44575b3b7866d3d898ab0ad4b736aea7260d6f55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/977d69fc1992b0cef8d8ff020261d5bf9ede7424", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeZyoHCRBK7hj4Ov3rIwAAdHIIAFlNIfxjrWjMHowyCN/2dVMx\nep0qTaVjaMm/cn7/SXWLquBw5itU6HAr63VKRiejLbkGy0PU8LJNksS5vIQH1qXy\ncbIhwNH/ZCZ/ylA0t6Bww7Ejv1+9Uf/85DX6szKyc4slddnJnSuDFodV7cgRNZrL\n/4qXra5EITbW04Fl33I9FNRcgI2vrNznWmME1V5bzsh18QElYZcbl2aZhtCxu7Hc\nWed12PWf1ZmcF65/2RbHfIhSgq1BTCcFfcw1rucAQpWOdWI+DOyjad0XguSa5zit\nSv7P5JhTD/cYc+aBoCDRmAIkw09Y194j0Qm9yjXv+UwV/CQdM+V0YLinYyMjTc8=\n=Baos\n-----END PGP SIGNATURE-----\n", "payload": "tree 44575b3b7866d3d898ab0ad4b736aea7260d6f55\nparent 5a62acaf9e456280339f37ca2e43fcb277772a18\nparent b11cd0b587cc2a663ef358089a2d1cf709170371\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1583819270 +0100\ncommitter GitHub <noreply@github.com> 1583819270 +0100\n\nRollup merge of #69714 - spastorino:place-ref-lifetime, r=oli-obk\n\nMake PlaceRef take just one lifetime\n\nr? @eddyb\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/977d69fc1992b0cef8d8ff020261d5bf9ede7424", "html_url": "https://github.com/rust-lang/rust/commit/977d69fc1992b0cef8d8ff020261d5bf9ede7424", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/977d69fc1992b0cef8d8ff020261d5bf9ede7424/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a62acaf9e456280339f37ca2e43fcb277772a18", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a62acaf9e456280339f37ca2e43fcb277772a18", "html_url": "https://github.com/rust-lang/rust/commit/5a62acaf9e456280339f37ca2e43fcb277772a18"}, {"sha": "b11cd0b587cc2a663ef358089a2d1cf709170371", "url": "https://api.github.com/repos/rust-lang/rust/commits/b11cd0b587cc2a663ef358089a2d1cf709170371", "html_url": "https://github.com/rust-lang/rust/commit/b11cd0b587cc2a663ef358089a2d1cf709170371"}], "stats": {"total": 112, "additions": 55, "deletions": 57}, "files": [{"sha": "b2413f5a2c83ff402b25e2aec7e24837a331fd5d", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/977d69fc1992b0cef8d8ff020261d5bf9ede7424/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/977d69fc1992b0cef8d8ff020261d5bf9ede7424/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=977d69fc1992b0cef8d8ff020261d5bf9ede7424", "patch": "@@ -1827,9 +1827,9 @@ rustc_index::newtype_index! {\n }\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]\n-pub struct PlaceRef<'a, 'tcx> {\n+pub struct PlaceRef<'tcx> {\n     pub local: Local,\n-    pub projection: &'a [PlaceElem<'tcx>],\n+    pub projection: &'tcx [PlaceElem<'tcx>],\n }\n \n impl<'tcx> Place<'tcx> {\n@@ -1864,7 +1864,7 @@ impl<'tcx> Place<'tcx> {\n         self.as_ref().as_local()\n     }\n \n-    pub fn as_ref(&self) -> PlaceRef<'_, 'tcx> {\n+    pub fn as_ref(&self) -> PlaceRef<'tcx> {\n         PlaceRef { local: self.local, projection: &self.projection }\n     }\n }\n@@ -1875,7 +1875,7 @@ impl From<Local> for Place<'_> {\n     }\n }\n \n-impl<'a, 'tcx> PlaceRef<'a, 'tcx> {\n+impl<'tcx> PlaceRef<'tcx> {\n     /// Finds the innermost `Local` from this `Place`, *if* it is either a local itself or\n     /// a single deref of a local.\n     //"}, {"sha": "04680a1751734de8e296a1acb51f05b252f6517f", "filename": "src/librustc_codegen_ssa/mir/analyze.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/977d69fc1992b0cef8d8ff020261d5bf9ede7424/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/977d69fc1992b0cef8d8ff020261d5bf9ede7424/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs?ref=977d69fc1992b0cef8d8ff020261d5bf9ede7424", "patch": "@@ -97,7 +97,7 @@ impl<Bx: BuilderMethods<'a, 'tcx>> LocalAnalyzer<'mir, 'a, 'tcx, Bx> {\n \n     fn process_place(\n         &mut self,\n-        place_ref: &mir::PlaceRef<'_, 'tcx>,\n+        place_ref: &mir::PlaceRef<'tcx>,\n         context: PlaceContext,\n         location: Location,\n     ) {"}, {"sha": "1e1fede2588df54c22c353239294e033913cb614", "filename": "src/librustc_codegen_ssa/mir/operand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/977d69fc1992b0cef8d8ff020261d5bf9ede7424/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/977d69fc1992b0cef8d8ff020261d5bf9ede7424/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs?ref=977d69fc1992b0cef8d8ff020261d5bf9ede7424", "patch": "@@ -364,7 +364,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     fn maybe_codegen_consume_direct(\n         &mut self,\n         bx: &mut Bx,\n-        place_ref: mir::PlaceRef<'_, 'tcx>,\n+        place_ref: mir::PlaceRef<'tcx>,\n     ) -> Option<OperandRef<'tcx, Bx::Value>> {\n         debug!(\"maybe_codegen_consume_direct(place_ref={:?})\", place_ref);\n \n@@ -408,7 +408,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     pub fn codegen_consume(\n         &mut self,\n         bx: &mut Bx,\n-        place_ref: mir::PlaceRef<'_, 'tcx>,\n+        place_ref: mir::PlaceRef<'tcx>,\n     ) -> OperandRef<'tcx, Bx::Value> {\n         debug!(\"codegen_consume(place_ref={:?})\", place_ref);\n "}, {"sha": "2eba88c6b5f3108a8fddaf0cc557e1805b48037d", "filename": "src/librustc_codegen_ssa/mir/place.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/977d69fc1992b0cef8d8ff020261d5bf9ede7424/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/977d69fc1992b0cef8d8ff020261d5bf9ede7424/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs?ref=977d69fc1992b0cef8d8ff020261d5bf9ede7424", "patch": "@@ -408,7 +408,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     pub fn codegen_place(\n         &mut self,\n         bx: &mut Bx,\n-        place_ref: mir::PlaceRef<'_, 'tcx>,\n+        place_ref: mir::PlaceRef<'tcx>,\n     ) -> PlaceRef<'tcx, Bx::Value> {\n         debug!(\"codegen_place(place_ref={:?})\", place_ref);\n         let cx = self.cx;\n@@ -497,7 +497,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         result\n     }\n \n-    pub fn monomorphized_place_ty(&self, place_ref: mir::PlaceRef<'_, 'tcx>) -> Ty<'tcx> {\n+    pub fn monomorphized_place_ty(&self, place_ref: mir::PlaceRef<'tcx>) -> Ty<'tcx> {\n         let tcx = self.cx.tcx();\n         let place_ty = mir::Place::ty_from(place_ref.local, place_ref.projection, *self.mir, tcx);\n         self.monomorphize(&place_ty.ty)"}, {"sha": "8d4afd2c3b3afdc6c4851eafc54ad85586ec0895", "filename": "src/librustc_mir/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/977d69fc1992b0cef8d8ff020261d5bf9ede7424/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/977d69fc1992b0cef8d8ff020261d5bf9ede7424/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=977d69fc1992b0cef8d8ff020261d5bf9ede7424", "patch": "@@ -51,7 +51,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         &mut self,\n         location: Location,\n         desired_action: InitializationRequiringAction,\n-        (moved_place, used_place, span): (PlaceRef<'cx, 'tcx>, PlaceRef<'cx, 'tcx>, Span),\n+        (moved_place, used_place, span): (PlaceRef<'tcx>, PlaceRef<'tcx>, Span),\n         mpi: MovePathIndex,\n     ) {\n         debug!(\n@@ -647,7 +647,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 // borrowed place and look for a access to a different field of the same union.\n                 let Place { local, projection } = second_borrowed_place;\n \n-                let mut cursor = projection.as_ref();\n+                let mut cursor = &projection[..];\n                 while let [proj_base @ .., elem] = cursor {\n                     cursor = proj_base;\n \n@@ -1521,7 +1521,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         err.buffer(&mut self.errors_buffer);\n     }\n \n-    fn classify_drop_access_kind(&self, place: PlaceRef<'cx, 'tcx>) -> StorageDeadOrDrop<'tcx> {\n+    fn classify_drop_access_kind(&self, place: PlaceRef<'tcx>) -> StorageDeadOrDrop<'tcx> {\n         let tcx = self.infcx.tcx;\n         match place.projection {\n             [] => StorageDeadOrDrop::LocalStorageDead,"}, {"sha": "7110a4a3058a65f93d24a238ca96f833bb7ae326", "filename": "src/librustc_mir/borrow_check/diagnostics/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/977d69fc1992b0cef8d8ff020261d5bf9ede7424/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/977d69fc1992b0cef8d8ff020261d5bf9ede7424/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs?ref=977d69fc1992b0cef8d8ff020261d5bf9ede7424", "patch": "@@ -51,7 +51,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     pub(super) fn add_moved_or_invoked_closure_note(\n         &self,\n         location: Location,\n-        place: PlaceRef<'cx, 'tcx>,\n+        place: PlaceRef<'tcx>,\n         diag: &mut DiagnosticBuilder<'_>,\n     ) {\n         debug!(\"add_moved_or_invoked_closure_note: location={:?} place={:?}\", location, place);\n@@ -139,7 +139,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n     /// End-user visible description of `place` if one can be found. If the\n     /// place is a temporary for instance, None will be returned.\n-    pub(super) fn describe_place(&self, place_ref: PlaceRef<'cx, 'tcx>) -> Option<String> {\n+    pub(super) fn describe_place(&self, place_ref: PlaceRef<'tcx>) -> Option<String> {\n         self.describe_place_with_options(place_ref, IncludingDowncast(false))\n     }\n \n@@ -149,7 +149,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     /// `Downcast` and `IncludingDowncast` is true\n     pub(super) fn describe_place_with_options(\n         &self,\n-        place: PlaceRef<'cx, 'tcx>,\n+        place: PlaceRef<'tcx>,\n         including_downcast: IncludingDowncast,\n     ) -> Option<String> {\n         let mut buf = String::new();\n@@ -162,7 +162,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     /// Appends end-user visible description of `place` to `buf`.\n     fn append_place_to_string(\n         &self,\n-        place: PlaceRef<'cx, 'tcx>,\n+        place: PlaceRef<'tcx>,\n         buf: &mut String,\n         mut autoderef: bool,\n         including_downcast: &IncludingDowncast,\n@@ -303,7 +303,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     }\n \n     /// End-user visible description of the `field`nth field of `base`\n-    fn describe_field(&self, place: PlaceRef<'cx, 'tcx>, field: Field) -> String {\n+    fn describe_field(&self, place: PlaceRef<'tcx>, field: Field) -> String {\n         // FIXME Place2 Make this work iteratively\n         match place {\n             PlaceRef { local, projection: [] } => {\n@@ -399,7 +399,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n     pub(super) fn borrowed_content_source(\n         &self,\n-        deref_base: PlaceRef<'cx, 'tcx>,\n+        deref_base: PlaceRef<'tcx>,\n     ) -> BorrowedContentSource<'tcx> {\n         let tcx = self.infcx.tcx;\n \n@@ -694,7 +694,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     /// Finds the spans associated to a move or copy of move_place at location.\n     pub(super) fn move_spans(\n         &self,\n-        moved_place: PlaceRef<'cx, 'tcx>, // Could also be an upvar.\n+        moved_place: PlaceRef<'tcx>, // Could also be an upvar.\n         location: Location,\n     ) -> UseSpans {\n         use self::UseSpans::*;\n@@ -782,7 +782,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     fn closure_span(\n         &self,\n         def_id: DefId,\n-        target_place: PlaceRef<'cx, 'tcx>,\n+        target_place: PlaceRef<'tcx>,\n         places: &Vec<Operand<'tcx>>,\n     ) -> Option<(Span, Option<GeneratorKind>, Span)> {\n         debug!("}, {"sha": "c6fe0dba80cd580e7cfc1a3aed2971144ac4fd74", "filename": "src/librustc_mir/borrow_check/diagnostics/mutability_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/977d69fc1992b0cef8d8ff020261d5bf9ede7424/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/977d69fc1992b0cef8d8ff020261d5bf9ede7424/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs?ref=977d69fc1992b0cef8d8ff020261d5bf9ede7424", "patch": "@@ -23,7 +23,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         &mut self,\n         access_place: &Place<'tcx>,\n         span: Span,\n-        the_place_err: PlaceRef<'cx, 'tcx>,\n+        the_place_err: PlaceRef<'tcx>,\n         error_access: AccessKind,\n         location: Location,\n     ) {"}, {"sha": "a61d00b0120cb340e33f7697e0f543e88c46f3fd", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/977d69fc1992b0cef8d8ff020261d5bf9ede7424/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/977d69fc1992b0cef8d8ff020261d5bf9ede7424/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=977d69fc1992b0cef8d8ff020261d5bf9ede7424", "patch": "@@ -86,6 +86,8 @@ crate struct Upvar {\n     mutability: Mutability,\n }\n \n+const DEREF_PROJECTION: &[PlaceElem<'_>; 1] = &[ProjectionElem::Deref];\n+\n pub fn provide(providers: &mut Providers<'_>) {\n     *providers = Providers { mir_borrowck, ..*providers };\n }\n@@ -466,10 +468,10 @@ crate struct MirBorrowckCtxt<'cx, 'tcx> {\n     /// `BTreeMap` is used to preserve the order of insertions when iterating. This is necessary\n     /// when errors in the map are being re-added to the error buffer so that errors with the\n     /// same primary span come out in a consistent order.\n-    move_error_reported: BTreeMap<Vec<MoveOutIndex>, (PlaceRef<'cx, 'tcx>, DiagnosticBuilder<'cx>)>,\n+    move_error_reported: BTreeMap<Vec<MoveOutIndex>, (PlaceRef<'tcx>, DiagnosticBuilder<'cx>)>,\n     /// This field keeps track of errors reported in the checking of uninitialized variables,\n     /// so that we don't report seemingly duplicate errors.\n-    uninitialized_error_reported: FxHashSet<PlaceRef<'cx, 'tcx>>,\n+    uninitialized_error_reported: FxHashSet<PlaceRef<'tcx>>,\n     /// Errors to be reported buffer\n     errors_buffer: Vec<Diagnostic>,\n     /// This field keeps track of all the local variables that are declared mut and are mutated.\n@@ -841,9 +843,9 @@ enum InitializationRequiringAction {\n     PartialAssignment,\n }\n \n-struct RootPlace<'d, 'tcx> {\n+struct RootPlace<'tcx> {\n     place_local: Local,\n-    place_projection: &'d [PlaceElem<'tcx>],\n+    place_projection: &'tcx [PlaceElem<'tcx>],\n     is_local_mutation_allowed: LocalMutationIsAllowed,\n }\n \n@@ -1413,7 +1415,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     ) {\n         debug!(\"check_for_invalidation_at_exit({:?})\", borrow);\n         let place = &borrow.borrowed_place;\n-        let deref = [ProjectionElem::Deref];\n         let mut root_place = PlaceRef { local: place.local, projection: &[] };\n \n         // FIXME(nll-rfc#40): do more precise destructor tracking here. For now\n@@ -1427,7 +1428,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 // Thread-locals might be dropped after the function exits\n                 // We have to dereference the outer reference because\n                 // borrows don't conflict behind shared references.\n-                root_place.projection = &deref;\n+                root_place.projection = DEREF_PROJECTION;\n                 (true, true)\n             } else {\n                 (false, self.locals_are_invalidated_at_exit)\n@@ -1526,7 +1527,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         &mut self,\n         location: Location,\n         desired_action: InitializationRequiringAction,\n-        place_span: (PlaceRef<'cx, 'tcx>, Span),\n+        place_span: (PlaceRef<'tcx>, Span),\n         flow_state: &Flows<'cx, 'tcx>,\n     ) {\n         let maybe_uninits = &flow_state.uninits;\n@@ -1592,7 +1593,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         &mut self,\n         location: Location,\n         desired_action: InitializationRequiringAction,\n-        place_span: (PlaceRef<'cx, 'tcx>, Span),\n+        place_span: (PlaceRef<'tcx>, Span),\n         maybe_uninits: &BitSet<MovePathIndex>,\n         from: u32,\n         to: u32,\n@@ -1631,7 +1632,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         &mut self,\n         location: Location,\n         desired_action: InitializationRequiringAction,\n-        place_span: (PlaceRef<'cx, 'tcx>, Span),\n+        place_span: (PlaceRef<'tcx>, Span),\n         flow_state: &Flows<'cx, 'tcx>,\n     ) {\n         let maybe_uninits = &flow_state.uninits;\n@@ -1709,10 +1710,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     /// An Err result includes a tag indicated why the search failed.\n     /// Currently this can only occur if the place is built off of a\n     /// static variable, as we do not track those in the MoveData.\n-    fn move_path_closest_to(\n-        &mut self,\n-        place: PlaceRef<'_, 'tcx>,\n-    ) -> (PlaceRef<'cx, 'tcx>, MovePathIndex) {\n+    fn move_path_closest_to(&mut self, place: PlaceRef<'tcx>) -> (PlaceRef<'tcx>, MovePathIndex) {\n         match self.move_data.rev_lookup.find(place) {\n             LookupResult::Parent(Some(mpi)) | LookupResult::Exact(mpi) => {\n                 (self.move_data.move_paths[mpi].place.as_ref(), mpi)\n@@ -1721,7 +1719,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         }\n     }\n \n-    fn move_path_for_place(&mut self, place: PlaceRef<'_, 'tcx>) -> Option<MovePathIndex> {\n+    fn move_path_for_place(&mut self, place: PlaceRef<'tcx>) -> Option<MovePathIndex> {\n         // If returns None, then there is no move path corresponding\n         // to a direct owner of `place` (which means there is nothing\n         // that borrowck tracks for its analysis).\n@@ -1816,7 +1814,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         fn check_parent_of_field<'cx, 'tcx>(\n             this: &mut MirBorrowckCtxt<'cx, 'tcx>,\n             location: Location,\n-            base: PlaceRef<'cx, 'tcx>,\n+            base: PlaceRef<'tcx>,\n             span: Span,\n             flow_state: &Flows<'cx, 'tcx>,\n         ) {\n@@ -2029,7 +2027,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     }\n \n     /// Adds the place into the used mutable variables set\n-    fn add_used_mut<'d>(&mut self, root_place: RootPlace<'d, 'tcx>, flow_state: &Flows<'cx, 'tcx>) {\n+    fn add_used_mut(&mut self, root_place: RootPlace<'tcx>, flow_state: &Flows<'cx, 'tcx>) {\n         match root_place {\n             RootPlace { place_local: local, place_projection: [], is_local_mutation_allowed } => {\n                 // If the local may have been initialized, and it is now currently being\n@@ -2063,11 +2061,11 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n     /// Whether this value can be written or borrowed mutably.\n     /// Returns the root place if the place passed in is a projection.\n-    fn is_mutable<'d>(\n+    fn is_mutable(\n         &self,\n-        place: PlaceRef<'d, 'tcx>,\n+        place: PlaceRef<'tcx>,\n         is_local_mutation_allowed: LocalMutationIsAllowed,\n-    ) -> Result<RootPlace<'d, 'tcx>, PlaceRef<'d, 'tcx>> {\n+    ) -> Result<RootPlace<'tcx>, PlaceRef<'tcx>> {\n         match place {\n             PlaceRef { local, projection: [] } => {\n                 let local = &self.body.local_decls[local];\n@@ -2218,7 +2216,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     /// then returns the index of the field being projected. Note that this closure will always\n     /// be `self` in the current MIR, because that is the only time we directly access the fields\n     /// of a closure type.\n-    pub fn is_upvar_field_projection(&self, place_ref: PlaceRef<'cx, 'tcx>) -> Option<Field> {\n+    pub fn is_upvar_field_projection(&self, place_ref: PlaceRef<'tcx>) -> Option<Field> {\n         let mut place_projection = place_ref.projection;\n         let mut by_ref = false;\n "}, {"sha": "767ffa50fedb4cd23f30434c70ae559308e9a95c", "filename": "src/librustc_mir/borrow_check/places_conflict.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/977d69fc1992b0cef8d8ff020261d5bf9ede7424/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/977d69fc1992b0cef8d8ff020261d5bf9ede7424/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs?ref=977d69fc1992b0cef8d8ff020261d5bf9ede7424", "patch": "@@ -48,7 +48,7 @@ pub(super) fn borrow_conflicts_with_place<'tcx>(\n     body: &Body<'tcx>,\n     borrow_place: &Place<'tcx>,\n     borrow_kind: BorrowKind,\n-    access_place: PlaceRef<'_, 'tcx>,\n+    access_place: PlaceRef<'tcx>,\n     access: AccessDepth,\n     bias: PlaceConflictBias,\n ) -> bool {\n@@ -73,7 +73,7 @@ fn place_components_conflict<'tcx>(\n     body: &Body<'tcx>,\n     borrow_place: &Place<'tcx>,\n     borrow_kind: BorrowKind,\n-    access_place: PlaceRef<'_, 'tcx>,\n+    access_place: PlaceRef<'tcx>,\n     access: AccessDepth,\n     bias: PlaceConflictBias,\n ) -> bool {"}, {"sha": "c64e8c363af54c9777c6279122733b3b8592d0d1", "filename": "src/librustc_mir/borrow_check/prefixes.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/977d69fc1992b0cef8d8ff020261d5bf9ede7424/src%2Flibrustc_mir%2Fborrow_check%2Fprefixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/977d69fc1992b0cef8d8ff020261d5bf9ede7424/src%2Flibrustc_mir%2Fborrow_check%2Fprefixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fprefixes.rs?ref=977d69fc1992b0cef8d8ff020261d5bf9ede7424", "patch": "@@ -13,12 +13,12 @@ use rustc::mir::{Place, PlaceRef, ProjectionElem, ReadOnlyBodyAndCache};\n use rustc::ty::{self, TyCtxt};\n use rustc_hir as hir;\n \n-pub trait IsPrefixOf<'cx, 'tcx> {\n-    fn is_prefix_of(&self, other: PlaceRef<'cx, 'tcx>) -> bool;\n+pub trait IsPrefixOf<'tcx> {\n+    fn is_prefix_of(&self, other: PlaceRef<'tcx>) -> bool;\n }\n \n-impl<'cx, 'tcx> IsPrefixOf<'cx, 'tcx> for PlaceRef<'cx, 'tcx> {\n-    fn is_prefix_of(&self, other: PlaceRef<'cx, 'tcx>) -> bool {\n+impl<'tcx> IsPrefixOf<'tcx> for PlaceRef<'tcx> {\n+    fn is_prefix_of(&self, other: PlaceRef<'tcx>) -> bool {\n         self.local == other.local\n             && self.projection.len() <= other.projection.len()\n             && self.projection == &other.projection[..self.projection.len()]\n@@ -29,7 +29,7 @@ pub(super) struct Prefixes<'cx, 'tcx> {\n     body: ReadOnlyBodyAndCache<'cx, 'tcx>,\n     tcx: TyCtxt<'tcx>,\n     kind: PrefixSet,\n-    next: Option<PlaceRef<'cx, 'tcx>>,\n+    next: Option<PlaceRef<'tcx>>,\n }\n \n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n@@ -50,15 +50,15 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     /// terminating the iteration early based on `kind`.\n     pub(super) fn prefixes(\n         &self,\n-        place_ref: PlaceRef<'cx, 'tcx>,\n+        place_ref: PlaceRef<'tcx>,\n         kind: PrefixSet,\n     ) -> Prefixes<'cx, 'tcx> {\n         Prefixes { next: Some(place_ref), kind, body: self.body, tcx: self.infcx.tcx }\n     }\n }\n \n impl<'cx, 'tcx> Iterator for Prefixes<'cx, 'tcx> {\n-    type Item = PlaceRef<'cx, 'tcx>;\n+    type Item = PlaceRef<'tcx>;\n     fn next(&mut self) -> Option<Self::Item> {\n         let mut cursor = self.next?;\n "}, {"sha": "7c449ad119796fb165376d9161b960c1c5862fbe", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/977d69fc1992b0cef8d8ff020261d5bf9ede7424/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/977d69fc1992b0cef8d8ff020261d5bf9ede7424/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=977d69fc1992b0cef8d8ff020261d5bf9ede7424", "patch": "@@ -483,7 +483,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n         self.builder.data.loc_map[self.loc].push(move_out);\n     }\n \n-    fn gather_init(&mut self, place: PlaceRef<'cx, 'tcx>, kind: InitKind) {\n+    fn gather_init(&mut self, place: PlaceRef<'tcx>, kind: InitKind) {\n         debug!(\"gather_init({:?}, {:?})\", self.loc, place);\n \n         let mut place = place;"}, {"sha": "593952bfa7c809609195eb29c51153dba8e2a5f6", "filename": "src/librustc_mir/dataflow/move_paths/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/977d69fc1992b0cef8d8ff020261d5bf9ede7424/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/977d69fc1992b0cef8d8ff020261d5bf9ede7424/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs?ref=977d69fc1992b0cef8d8ff020261d5bf9ede7424", "patch": "@@ -312,7 +312,7 @@ impl MovePathLookup {\n     // alternative will *not* create a MovePath on the fly for an\n     // unknown place, but will rather return the nearest available\n     // parent.\n-    pub fn find(&self, place: PlaceRef<'_, '_>) -> LookupResult {\n+    pub fn find(&self, place: PlaceRef<'_>) -> LookupResult {\n         let mut result = self.locals[place.local];\n \n         for elem in place.projection.iter() {"}, {"sha": "2306177c14b8a20d1be4f6ffcac3219e8813fdf3", "filename": "src/librustc_mir/transform/add_retag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/977d69fc1992b0cef8d8ff020261d5bf9ede7424/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/977d69fc1992b0cef8d8ff020261d5bf9ede7424/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs?ref=977d69fc1992b0cef8d8ff020261d5bf9ede7424", "patch": "@@ -14,7 +14,7 @@ pub struct AddRetag;\n /// after the assignment, we can be sure to obtain the same place value.\n /// (Concurrent accesses by other threads are no problem as these are anyway non-atomic\n /// copies.  Data races are UB.)\n-fn is_stable(place: PlaceRef<'_, '_>) -> bool {\n+fn is_stable(place: PlaceRef<'_>) -> bool {\n     place.projection.iter().all(|elem| {\n         match elem {\n             // Which place this evaluates to can change with any memory write,"}, {"sha": "baff8383c20a445ebffd52cc4e3c687ed33d6723", "filename": "src/librustc_mir/transform/check_consts/qualifs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/977d69fc1992b0cef8d8ff020261d5bf9ede7424/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/977d69fc1992b0cef8d8ff020261d5bf9ede7424/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=977d69fc1992b0cef8d8ff020261d5bf9ede7424", "patch": "@@ -35,7 +35,7 @@ pub trait Qualif {\n     fn in_projection_structurally(\n         cx: &ConstCx<'_, 'tcx>,\n         per_local: &mut impl FnMut(Local) -> bool,\n-        place: PlaceRef<'_, 'tcx>,\n+        place: PlaceRef<'tcx>,\n     ) -> bool {\n         if let [proj_base @ .., elem] = place.projection {\n             let base_qualif = Self::in_place(\n@@ -67,15 +67,15 @@ pub trait Qualif {\n     fn in_projection(\n         cx: &ConstCx<'_, 'tcx>,\n         per_local: &mut impl FnMut(Local) -> bool,\n-        place: PlaceRef<'_, 'tcx>,\n+        place: PlaceRef<'tcx>,\n     ) -> bool {\n         Self::in_projection_structurally(cx, per_local, place)\n     }\n \n     fn in_place(\n         cx: &ConstCx<'_, 'tcx>,\n         per_local: &mut impl FnMut(Local) -> bool,\n-        place: PlaceRef<'_, 'tcx>,\n+        place: PlaceRef<'tcx>,\n     ) -> bool {\n         match place {\n             PlaceRef { local, projection: [] } => per_local(local),"}, {"sha": "7dd134a35d9095925b75a7b87c9d3a3683ac34e3", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/977d69fc1992b0cef8d8ff020261d5bf9ede7424/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/977d69fc1992b0cef8d8ff020261d5bf9ede7424/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=977d69fc1992b0cef8d8ff020261d5bf9ede7424", "patch": "@@ -474,7 +474,7 @@ impl<'tcx> Validator<'_, 'tcx> {\n         }\n     }\n \n-    fn validate_place(&self, place: PlaceRef<'_, 'tcx>) -> Result<(), Unpromotable> {\n+    fn validate_place(&self, place: PlaceRef<'tcx>) -> Result<(), Unpromotable> {\n         match place {\n             PlaceRef { local, projection: [] } => self.validate_local(local),\n             PlaceRef { local: _, projection: [proj_base @ .., elem] } => {"}]}