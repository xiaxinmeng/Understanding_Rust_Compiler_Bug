{"sha": "71d1b2a009aa36422573d5ad4f74711b871df53e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxZDFiMmEwMDlhYTM2NDIyNTczZDVhZDRmNzQ3MTFiODcxZGY1M2U=", "commit": {"author": {"name": "Fabian Wolff", "email": "fabi.wolff@arcor.de", "date": "2021-05-06T00:09:02Z"}, "committer": {"name": "Fabian Wolff", "email": "fabi.wolff@arcor.de", "date": "2021-05-06T00:09:02Z"}, "message": "Fix incorrect suggestions for E0605", "tree": {"sha": "d4458f4d005ffb1a6e0a853521d014a49cfd4372", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4458f4d005ffb1a6e0a853521d014a49cfd4372"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71d1b2a009aa36422573d5ad4f74711b871df53e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71d1b2a009aa36422573d5ad4f74711b871df53e", "html_url": "https://github.com/rust-lang/rust/commit/71d1b2a009aa36422573d5ad4f74711b871df53e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71d1b2a009aa36422573d5ad4f74711b871df53e/comments", "author": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bacf770f2983a52f31e3537db5f0fe1ef2eaa874", "url": "https://api.github.com/repos/rust-lang/rust/commits/bacf770f2983a52f31e3537db5f0fe1ef2eaa874", "html_url": "https://github.com/rust-lang/rust/commit/bacf770f2983a52f31e3537db5f0fe1ef2eaa874"}], "stats": {"total": 91, "additions": 74, "deletions": 17}, "files": [{"sha": "3cbc3d231f847eda831051f4ba638dd159e0643e", "filename": "compiler/rustc_typeck/src/check/cast.rs", "status": "modified", "additions": 52, "deletions": 10, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/71d1b2a009aa36422573d5ad4f74711b871df53e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71d1b2a009aa36422573d5ad4f74711b871df53e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs?ref=71d1b2a009aa36422573d5ad4f74711b871df53e", "patch": "@@ -35,6 +35,7 @@ use crate::type_error_struct;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorReported};\n use rustc_hir as hir;\n use rustc_hir::lang_items::LangItem;\n+use rustc_middle::mir::Mutability;\n use rustc_middle::ty::adjustment::AllowTwoPhase;\n use rustc_middle::ty::cast::{CastKind, CastTy};\n use rustc_middle::ty::error::TypeError;\n@@ -347,15 +348,52 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                     fcx.ty_to_string(self.cast_ty)\n                 );\n                 let mut sugg = None;\n+                let mut sugg_mutref = false;\n                 if let ty::Ref(reg, _, mutbl) = *self.cast_ty.kind() {\n-                    if fcx\n-                        .try_coerce(\n-                            self.expr,\n-                            fcx.tcx.mk_ref(reg, TypeAndMut { ty: self.expr_ty, mutbl }),\n-                            self.cast_ty,\n-                            AllowTwoPhase::No,\n-                        )\n-                        .is_ok()\n+                    if let ty::RawPtr(TypeAndMut { ty: expr_ty, .. }) = *self.expr_ty.kind() {\n+                        if fcx\n+                            .try_coerce(\n+                                self.expr,\n+                                fcx.tcx.mk_ref(\n+                                    &ty::RegionKind::ReErased,\n+                                    TypeAndMut { ty: expr_ty, mutbl },\n+                                ),\n+                                self.cast_ty,\n+                                AllowTwoPhase::No,\n+                            )\n+                            .is_ok()\n+                        {\n+                            sugg = Some(format!(\"&{}*\", mutbl.prefix_str()));\n+                        }\n+                    } else if let ty::Ref(expr_reg, expr_ty, expr_mutbl) = *self.expr_ty.kind() {\n+                        if expr_mutbl == Mutability::Not\n+                            && mutbl == Mutability::Mut\n+                            && fcx\n+                                .try_coerce(\n+                                    self.expr,\n+                                    fcx.tcx.mk_ref(\n+                                        expr_reg,\n+                                        TypeAndMut { ty: expr_ty, mutbl: Mutability::Mut },\n+                                    ),\n+                                    self.cast_ty,\n+                                    AllowTwoPhase::No,\n+                                )\n+                                .is_ok()\n+                        {\n+                            sugg_mutref = true;\n+                        }\n+                    }\n+\n+                    if !sugg_mutref\n+                        && sugg == None\n+                        && fcx\n+                            .try_coerce(\n+                                self.expr,\n+                                fcx.tcx.mk_ref(reg, TypeAndMut { ty: self.expr_ty, mutbl }),\n+                                self.cast_ty,\n+                                AllowTwoPhase::No,\n+                            )\n+                            .is_ok()\n                     {\n                         sugg = Some(format!(\"&{}\", mutbl.prefix_str()));\n                     }\n@@ -375,11 +413,15 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                         sugg = Some(format!(\"&{}\", mutbl.prefix_str()));\n                     }\n                 }\n-                if let Some(sugg) = sugg {\n+                if sugg_mutref {\n+                    err.span_label(self.span, \"invalid cast\");\n+                    err.span_note(self.expr.span, \"this reference is immutable\");\n+                    err.span_note(self.cast_span, \"trying to cast to a mutable reference type\");\n+                } else if let Some(sugg) = sugg {\n                     err.span_label(self.span, \"invalid cast\");\n                     err.span_suggestion_verbose(\n                         self.expr.span.shrink_to_lo(),\n-                        \"borrow the value for the cast to be valid\",\n+                        \"consider borrowing the value\",\n                         sugg,\n                         Applicability::MachineApplicable,\n                     );"}, {"sha": "3c43427fa178b44463640f7136a6a80b78aa755c", "filename": "src/test/ui/cast/issue-84213.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71d1b2a009aa36422573d5ad4f74711b871df53e/src%2Ftest%2Fui%2Fcast%2Fissue-84213.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71d1b2a009aa36422573d5ad4f74711b871df53e/src%2Ftest%2Fui%2Fcast%2Fissue-84213.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fissue-84213.stderr?ref=71d1b2a009aa36422573d5ad4f74711b871df53e", "patch": "@@ -4,7 +4,7 @@ error[E0605]: non-primitive cast: `Something` as `*const Something`\n LL |     let _pointer_to_something = something as *const Something;\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ invalid cast\n    |\n-help: borrow the value for the cast to be valid\n+help: consider borrowing the value\n    |\n LL |     let _pointer_to_something = &something as *const Something;\n    |                                 ^\n@@ -15,7 +15,7 @@ error[E0605]: non-primitive cast: `Something` as `*mut Something`\n LL |     let _mut_pointer_to_something = something as *mut Something;\n    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ invalid cast\n    |\n-help: borrow the value for the cast to be valid\n+help: consider borrowing the value\n    |\n LL |     let _mut_pointer_to_something = &mut something as *mut Something;\n    |                                     ^^^^"}, {"sha": "6314e7a3a8a7857a8902df58994a9b88c7ee3047", "filename": "src/test/ui/error-codes/E0605.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/71d1b2a009aa36422573d5ad4f74711b871df53e/src%2Ftest%2Fui%2Ferror-codes%2FE0605.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71d1b2a009aa36422573d5ad4f74711b871df53e/src%2Ftest%2Fui%2Ferror-codes%2FE0605.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0605.stderr?ref=71d1b2a009aa36422573d5ad4f74711b871df53e", "patch": "@@ -8,7 +8,12 @@ error[E0605]: non-primitive cast: `*const u8` as `&u8`\n   --> $DIR/E0605.rs:6:5\n    |\n LL |     v as &u8;\n-   |     ^^^^^^^^ an `as` expression can only be used to convert between primitive types or to coerce to a specific trait object\n+   |     ^^^^^^^^ invalid cast\n+   |\n+help: consider borrowing the value\n+   |\n+LL |     &*v as &u8;\n+   |     ^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f90e89efb4a8cf3e0dde4495f4cfb97ffd30e2e2", "filename": "src/test/ui/issues/issue-22289.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71d1b2a009aa36422573d5ad4f74711b871df53e/src%2Ftest%2Fui%2Fissues%2Fissue-22289.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71d1b2a009aa36422573d5ad4f74711b871df53e/src%2Ftest%2Fui%2Fissues%2Fissue-22289.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22289.stderr?ref=71d1b2a009aa36422573d5ad4f74711b871df53e", "patch": "@@ -4,7 +4,7 @@ error[E0605]: non-primitive cast: `i32` as `&(dyn Any + 'static)`\n LL |     0 as &dyn std::any::Any;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ invalid cast\n    |\n-help: borrow the value for the cast to be valid\n+help: consider borrowing the value\n    |\n LL |     &0 as &dyn std::any::Any;\n    |     ^"}, {"sha": "47ee544c02af796827c3e0bca29dd2ae8d65527a", "filename": "src/test/ui/issues/issue-22312.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71d1b2a009aa36422573d5ad4f74711b871df53e/src%2Ftest%2Fui%2Fissues%2Fissue-22312.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71d1b2a009aa36422573d5ad4f74711b871df53e/src%2Ftest%2Fui%2Fissues%2Fissue-22312.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22312.stderr?ref=71d1b2a009aa36422573d5ad4f74711b871df53e", "patch": "@@ -4,7 +4,7 @@ error[E0605]: non-primitive cast: `Self` as `&dyn Index<usize, Output = <Self as\n LL |         let indexer = &(*self as &dyn Index<usize, Output = <Self as Index<usize>>::Output>);\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ invalid cast\n    |\n-help: borrow the value for the cast to be valid\n+help: consider borrowing the value\n    |\n LL |         let indexer = &(&*self as &dyn Index<usize, Output = <Self as Index<usize>>::Output>);\n    |                         ^"}, {"sha": "b08fe8c7352a9e9d6999e38b892344ff9bbfcb4f", "filename": "src/test/ui/issues/issue-2995.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/71d1b2a009aa36422573d5ad4f74711b871df53e/src%2Ftest%2Fui%2Fissues%2Fissue-2995.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71d1b2a009aa36422573d5ad4f74711b871df53e/src%2Ftest%2Fui%2Fissues%2Fissue-2995.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2995.stderr?ref=71d1b2a009aa36422573d5ad4f74711b871df53e", "patch": "@@ -2,7 +2,12 @@ error[E0605]: non-primitive cast: `*const isize` as `&isize`\n   --> $DIR/issue-2995.rs:2:22\n    |\n LL |     let _q: &isize = p as &isize;\n-   |                      ^^^^^^^^^^^ an `as` expression can only be used to convert between primitive types or to coerce to a specific trait object\n+   |                      ^^^^^^^^^^^ invalid cast\n+   |\n+help: consider borrowing the value\n+   |\n+LL |     let _q: &isize = &*p as &isize;\n+   |                      ^^\n \n error: aborting due to previous error\n "}, {"sha": "6a97d1ee3b813f38b74ac3a647ad4af124c742db", "filename": "src/test/ui/mismatched_types/cast-rfc0401.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/71d1b2a009aa36422573d5ad4f74711b871df53e/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71d1b2a009aa36422573d5ad4f74711b871df53e/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr?ref=71d1b2a009aa36422573d5ad4f74711b871df53e", "patch": "@@ -24,7 +24,12 @@ error[E0605]: non-primitive cast: `*const u8` as `&u8`\n   --> $DIR/cast-rfc0401.rs:29:13\n    |\n LL |     let _ = v as &u8;\n-   |             ^^^^^^^^ an `as` expression can only be used to convert between primitive types or to coerce to a specific trait object\n+   |             ^^^^^^^^ invalid cast\n+   |\n+help: consider borrowing the value\n+   |\n+LL |     let _ = &*v as &u8;\n+   |             ^^\n \n error[E0605]: non-primitive cast: `*const u8` as `E`\n   --> $DIR/cast-rfc0401.rs:30:13"}]}