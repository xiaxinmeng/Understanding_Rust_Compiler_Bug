{"sha": "e847d46bcb01c71e18610eeb30db6f2b6a7f3214", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4NDdkNDZiY2IwMWM3MWUxODYxMGVlYjMwZGI2ZjJiNmE3ZjMyMTQ=", "commit": {"author": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2017-05-10T17:13:42Z"}, "committer": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2017-05-20T23:27:30Z"}, "message": "migrate everything to using mem::needs_drop", "tree": {"sha": "3a77f950dc25d6087f689e6ba5163c8269bbc6b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a77f950dc25d6087f689e6ba5163c8269bbc6b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e847d46bcb01c71e18610eeb30db6f2b6a7f3214", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e847d46bcb01c71e18610eeb30db6f2b6a7f3214", "html_url": "https://github.com/rust-lang/rust/commit/e847d46bcb01c71e18610eeb30db6f2b6a7f3214", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e847d46bcb01c71e18610eeb30db6f2b6a7f3214/comments", "author": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "892df1db60c3c81c57899ef3712b43f63d971b25", "url": "https://api.github.com/repos/rust-lang/rust/commits/892df1db60c3c81c57899ef3712b43f63d971b25", "html_url": "https://github.com/rust-lang/rust/commit/892df1db60c3c81c57899ef3712b43f63d971b25"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "4338ac7fd022c362f1065147fad6ecc8eb445b67", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e847d46bcb01c71e18610eeb30db6f2b6a7f3214/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e847d46bcb01c71e18610eeb30db6f2b6a7f3214/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=e847d46bcb01c71e18610eeb30db6f2b6a7f3214", "patch": "@@ -32,6 +32,7 @@\n #![feature(core_intrinsics)]\n #![feature(dropck_eyepatch)]\n #![feature(generic_param_attrs)]\n+#![feature(needs_drop)]\n #![cfg_attr(stage0, feature(staged_api))]\n #![cfg_attr(test, feature(test))]\n \n@@ -82,7 +83,7 @@ impl<T> TypedArenaChunk<T> {\n     unsafe fn destroy(&mut self, len: usize) {\n         // The branch on needs_drop() is an -O1 performance optimization.\n         // Without the branch, dropping TypedArena<u8> takes linear time.\n-        if intrinsics::needs_drop::<T>() {\n+        if mem::needs_drop::<T>() {\n             let mut start = self.start();\n             // Destroy all allocated objects.\n             for _ in 0..len {\n@@ -350,7 +351,7 @@ impl DroplessArena {\n     #[inline]\n     pub fn alloc<T>(&self, object: T) -> &mut T {\n         unsafe {\n-            assert!(!intrinsics::needs_drop::<T>());\n+            assert!(!mem::needs_drop::<T>());\n             assert!(mem::size_of::<T>() != 0);\n \n             self.align_for::<T>();\n@@ -379,9 +380,7 @@ impl DroplessArena {\n     #[inline]\n     pub fn alloc_slice<T>(&self, slice: &[T]) -> &mut [T]\n         where T: Copy {\n-        unsafe {\n-            assert!(!intrinsics::needs_drop::<T>());\n-        }\n+        assert!(!mem::needs_drop::<T>());\n         assert!(mem::size_of::<T>() != 0);\n         assert!(slice.len() != 0);\n         self.align_for::<T>();"}, {"sha": "50c721db849aa7307eeb18430e1eca93e4570fa5", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e847d46bcb01c71e18610eeb30db6f2b6a7f3214/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e847d46bcb01c71e18610eeb30db6f2b6a7f3214/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=e847d46bcb01c71e18610eeb30db6f2b6a7f3214", "patch": "@@ -12,9 +12,8 @@ use alloc::heap::{allocate, deallocate};\n \n use cmp;\n use hash::{BuildHasher, Hash, Hasher};\n-use intrinsics::needs_drop;\n use marker;\n-use mem::{align_of, size_of};\n+use mem::{align_of, size_of, needs_drop};\n use mem;\n use ops::{Deref, DerefMut};\n use ptr::{self, Unique, Shared};"}, {"sha": "b0820d6f05a0533c4471d4b7157e63af7f403de2", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e847d46bcb01c71e18610eeb30db6f2b6a7f3214/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e847d46bcb01c71e18610eeb30db6f2b6a7f3214/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=e847d46bcb01c71e18610eeb30db6f2b6a7f3214", "patch": "@@ -281,6 +281,7 @@\n #![feature(linkage)]\n #![feature(macro_reexport)]\n #![feature(needs_panic_runtime)]\n+#![feature(needs_drop)]\n #![feature(never_type)]\n #![feature(num_bits_bytes)]\n #![feature(old_wrapping)]"}, {"sha": "7dc61ce6654b9253673d3a9d857b2a557553b7d0", "filename": "src/libstd/sys/redox/fast_thread_local.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e847d46bcb01c71e18610eeb30db6f2b6a7f3214/src%2Flibstd%2Fsys%2Fredox%2Ffast_thread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e847d46bcb01c71e18610eeb30db6f2b6a7f3214/src%2Flibstd%2Fsys%2Fredox%2Ffast_thread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Ffast_thread_local.rs?ref=e847d46bcb01c71e18610eeb30db6f2b6a7f3214", "patch": "@@ -12,9 +12,10 @@\n #![unstable(feature = \"thread_local_internals\", issue = \"0\")]\n \n use cell::{Cell, UnsafeCell};\n-use intrinsics;\n+use mem;\n use ptr;\n \n+\n pub struct Key<T> {\n     inner: UnsafeCell<Option<T>>,\n \n@@ -37,7 +38,7 @@ impl<T> Key<T> {\n \n     pub fn get(&'static self) -> Option<&'static UnsafeCell<Option<T>>> {\n         unsafe {\n-            if intrinsics::needs_drop::<T>() && self.dtor_running.get() {\n+            if mem::needs_drop::<T>() && self.dtor_running.get() {\n                 return None\n             }\n             self.register_dtor();\n@@ -46,7 +47,7 @@ impl<T> Key<T> {\n     }\n \n     unsafe fn register_dtor(&self) {\n-        if !intrinsics::needs_drop::<T>() || self.dtor_registered.get() {\n+        if !mem::needs_drop::<T>() || self.dtor_registered.get() {\n             return\n         }\n "}, {"sha": "6b3973de84c97d940a575ff1ea78561fb3954348", "filename": "src/libstd/sys/unix/fast_thread_local.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e847d46bcb01c71e18610eeb30db6f2b6a7f3214/src%2Flibstd%2Fsys%2Funix%2Ffast_thread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e847d46bcb01c71e18610eeb30db6f2b6a7f3214/src%2Flibstd%2Fsys%2Funix%2Ffast_thread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffast_thread_local.rs?ref=e847d46bcb01c71e18610eeb30db6f2b6a7f3214", "patch": "@@ -13,7 +13,7 @@\n \n use cell::{Cell, UnsafeCell};\n use fmt;\n-use intrinsics;\n+use mem;\n use ptr;\n \n pub struct Key<T> {\n@@ -44,7 +44,7 @@ impl<T> Key<T> {\n \n     pub fn get(&'static self) -> Option<&'static UnsafeCell<Option<T>>> {\n         unsafe {\n-            if intrinsics::needs_drop::<T>() && self.dtor_running.get() {\n+            if mem::needs_drop::<T>() && self.dtor_running.get() {\n                 return None\n             }\n             self.register_dtor();\n@@ -53,7 +53,7 @@ impl<T> Key<T> {\n     }\n \n     unsafe fn register_dtor(&self) {\n-        if !intrinsics::needs_drop::<T>() || self.dtor_registered.get() {\n+        if !mem::needs_drop::<T>() || self.dtor_registered.get() {\n             return\n         }\n "}]}