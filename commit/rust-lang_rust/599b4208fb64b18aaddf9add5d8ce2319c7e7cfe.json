{"sha": "599b4208fb64b18aaddf9add5d8ce2319c7e7cfe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5OWI0MjA4ZmI2NGIxOGFhZGRmOWFkZDVkOGNlMjMxOWM3ZTdjZmU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-10-24T21:36:00Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-10-25T18:49:26Z"}, "message": "rustc: Translate tuple struct constructors", "tree": {"sha": "3b54245720a1450d324e0ae41756c5e35fe10bd0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b54245720a1450d324e0ae41756c5e35fe10bd0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/599b4208fb64b18aaddf9add5d8ce2319c7e7cfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/599b4208fb64b18aaddf9add5d8ce2319c7e7cfe", "html_url": "https://github.com/rust-lang/rust/commit/599b4208fb64b18aaddf9add5d8ce2319c7e7cfe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/599b4208fb64b18aaddf9add5d8ce2319c7e7cfe/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce23a9992542f0c82e0f32c427b572caae790754", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce23a9992542f0c82e0f32c427b572caae790754", "html_url": "https://github.com/rust-lang/rust/commit/ce23a9992542f0c82e0f32c427b572caae790754"}], "stats": {"total": 240, "additions": 192, "deletions": 48}, "files": [{"sha": "60f22f1b844e1b8dd104ba374f6a1fa048a542aa", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/599b4208fb64b18aaddf9add5d8ce2319c7e7cfe/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/599b4208fb64b18aaddf9add5d8ce2319c7e7cfe/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=599b4208fb64b18aaddf9add5d8ce2319c7e7cfe", "patch": "@@ -1480,7 +1480,7 @@ type struct_def = {\n     dtor: Option<class_dtor>,\n     /* ID of the constructor. This is only used for tuple- or enum-like\n      * structs. */\n-    ctor_id: node_id\n+    ctor_id: Option<node_id>\n };\n \n /*"}, {"sha": "e63de5aefebe39da70c10964f367e9af7f69244b", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/599b4208fb64b18aaddf9add5d8ce2319c7e7cfe/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/599b4208fb64b18aaddf9add5d8ce2319c7e7cfe/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=599b4208fb64b18aaddf9add5d8ce2319c7e7cfe", "patch": "@@ -74,6 +74,7 @@ enum ast_node {\n     // Destructor for a class\n     node_dtor(~[ty_param], @class_dtor, def_id, @path),\n     node_block(blk),\n+    node_struct_ctor(@struct_def, @item, @path)\n }\n \n type map = std::map::HashMap<node_id, ast_node>;\n@@ -284,6 +285,19 @@ fn map_struct_def(struct_def: @ast::struct_def, parent_node: ast_node,\n     for vec::each(struct_def.methods) |m| {\n         map_method(d_id, p, *m, cx);\n     }\n+    // If this is a tuple-like struct, register the constructor.\n+    match struct_def.ctor_id {\n+        None => {}\n+        Some(ctor_id) => {\n+            match parent_node {\n+                node_item(item, _) => {\n+                    cx.map.insert(ctor_id,\n+                                  node_struct_ctor(struct_def, item, p));\n+                }\n+                _ => fail ~\"struct def parent wasn't an item\"\n+            }\n+        }\n+    }\n }\n \n fn map_view_item(vi: @view_item, cx: ctx, _v: vt) {\n@@ -375,6 +389,9 @@ fn node_id_to_str(map: map, id: node_id, itr: @ident_interner) -> ~str {\n       Some(node_block(_)) => {\n         fmt!(\"block\")\n       }\n+      Some(node_struct_ctor(*)) => {\n+        fmt!(\"struct_ctor\")\n+      }\n     }\n }\n // Local Variables:"}, {"sha": "ea49cce50477ece473db9fae4f9fef67f852573f", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/599b4208fb64b18aaddf9add5d8ce2319c7e7cfe/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/599b4208fb64b18aaddf9add5d8ce2319c7e7cfe/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=599b4208fb64b18aaddf9add5d8ce2319c7e7cfe", "patch": "@@ -589,6 +589,12 @@ fn view_path_id(p: @view_path) -> node_id {\n     }\n }\n \n+/// Returns true if the given struct def is tuple-like; i.e. that its fields\n+/// are unnamed.\n+fn struct_def_is_tuple_like(struct_def: @ast::struct_def) -> bool {\n+    struct_def.ctor_id.is_some()\n+}\n+\n // Local Variables:\n // mode: rust\n // fill-column: 78;"}, {"sha": "e2b6e6daa2fa24715f4c9110b6cb8e70b908d14d", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/599b4208fb64b18aaddf9add5d8ce2319c7e7cfe/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/599b4208fb64b18aaddf9add5d8ce2319c7e7cfe/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=599b4208fb64b18aaddf9add5d8ce2319c7e7cfe", "patch": "@@ -281,7 +281,7 @@ fn fold_struct_def(struct_def: @ast::struct_def, fld: ast_fold)\n         fields: vec::map(struct_def.fields, |f| fold_struct_field(*f, fld)),\n         methods: vec::map(struct_def.methods, |m| fld.fold_method(*m)),\n         dtor: dtor,\n-        ctor_id: fld.new_id(struct_def.ctor_id)\n+        ctor_id: option::map(&struct_def.ctor_id, |cid| fld.new_id(*cid))\n     };\n }\n \n@@ -565,7 +565,7 @@ fn noop_fold_variant(v: variant_, fld: ast_fold) -> variant_ {\n                 methods: vec::map(struct_def.methods,\n                                   |m| fld.fold_method(*m)),\n                 dtor: dtor,\n-                ctor_id: fld.new_id(struct_def.ctor_id)\n+                ctor_id: option::map(&struct_def.ctor_id, |c| fld.new_id(*c))\n             })\n         }\n "}, {"sha": "23ddf61606d02c7660a78cfa12c5c8e89128eab0", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/599b4208fb64b18aaddf9add5d8ce2319c7e7cfe/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/599b4208fb64b18aaddf9add5d8ce2319c7e7cfe/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=599b4208fb64b18aaddf9add5d8ce2319c7e7cfe", "patch": "@@ -2659,9 +2659,11 @@ impl Parser {\n         let mut fields: ~[@struct_field];\n         let mut methods: ~[@method] = ~[];\n         let mut the_dtor: Option<(blk, ~[attribute], codemap::span)> = None;\n+        let is_tuple_like;\n \n         if self.eat(token::LBRACE) {\n             // It's a record-like struct.\n+            is_tuple_like = false;\n             fields = ~[];\n             while self.token != token::RBRACE {\n                 match self.parse_class_item() {\n@@ -2694,6 +2696,7 @@ impl Parser {\n             self.bump();\n         } else if self.token == token::LPAREN {\n             // It's a tuple-like struct.\n+            is_tuple_like = true;\n             fields = do self.parse_unspanned_seq(token::LPAREN, token::RPAREN,\n                                                  seq_sep_trailing_allowed\n                                                     (token::COMMA)) |p| {\n@@ -2708,6 +2711,7 @@ impl Parser {\n             self.expect(token::SEMI);\n         } else if self.eat(token::SEMI) {\n             // It's a unit-like struct.\n+            is_tuple_like = true;\n             fields = ~[];\n         } else {\n             self.fatal(fmt!(\"expected `{`, `(`, or `;` after struct name \\\n@@ -2723,13 +2727,14 @@ impl Parser {\n                     body: d_body},\n              span: d_s}};\n         let _ = self.get_id();  // XXX: Workaround for crazy bug.\n+        let new_id = self.get_id();\n         (class_name,\n          item_class(@{\n              traits: traits,\n              fields: move fields,\n              methods: move methods,\n              dtor: actual_dtor,\n-             ctor_id: self.get_id()\n+             ctor_id: if is_tuple_like { Some(new_id) } else { None }\n          }, ty_params),\n          None)\n     }\n@@ -3076,7 +3081,7 @@ impl Parser {\n             fields: move fields,\n             methods: move methods,\n             dtor: actual_dtor,\n-            ctor_id: self.get_id()\n+            ctor_id: Some(self.get_id())\n         };\n     }\n "}, {"sha": "53c1ce1c7f535b8dcc5096ac95d4043865eba83a", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/599b4208fb64b18aaddf9add5d8ce2319c7e7cfe/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/599b4208fb64b18aaddf9add5d8ce2319c7e7cfe/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=599b4208fb64b18aaddf9add5d8ce2319c7e7cfe", "patch": "@@ -311,6 +311,7 @@ mod special_idents {\n     const static : ident = ident { repr: 31u };\n     const intrinsic : ident = ident { repr: 32u };\n     const clownshoes_foreign_mod: ident = ident { repr: 33 };\n+    const unnamed_field: ident = ident { repr: 34 };\n }\n \n struct ident_interner {"}, {"sha": "97551162de58f049b082d083f0486dd89583917b", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/599b4208fb64b18aaddf9add5d8ce2319c7e7cfe/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/599b4208fb64b18aaddf9add5d8ce2319c7e7cfe/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=599b4208fb64b18aaddf9add5d8ce2319c7e7cfe", "patch": "@@ -1187,12 +1187,14 @@ impl Resolver {\n \n                 // If this struct is tuple-like or enum-like, define a name\n                 // in the value namespace.\n-                if struct_def.fields.len() == 0 ||\n-                        struct_def.fields[0].node.kind == unnamed_field {\n-                    name_bindings.define_value(\n-                        privacy,\n-                        def_class(local_def(struct_def.ctor_id)),\n-                        sp);\n+                match struct_def.ctor_id {\n+                    None => {}\n+                    Some(ctor_id) => {\n+                        name_bindings.define_value(\n+                            privacy,\n+                            def_class(local_def(ctor_id)),\n+                            sp);\n+                    }\n                 }\n \n                 // Record the def ID of this struct."}, {"sha": "822fb4f417a8ee911599b51e18cc2337b21b9239", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 83, "deletions": 8, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/599b4208fb64b18aaddf9add5d8ce2319c7e7cfe/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/599b4208fb64b18aaddf9add5d8ce2319c7e7cfe/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=599b4208fb64b18aaddf9add5d8ce2319c7e7cfe", "patch": "@@ -1648,7 +1648,8 @@ fn trans_enum_variant(ccx: @crate_ctxt,\n                       enum_id: ast::node_id,\n                       variant: ast::variant,\n                       args: ~[ast::variant_arg],\n-                      disr: int, is_degen: bool,\n+                      disr: int,\n+                      is_degen: bool,\n                       param_substs: Option<param_substs>,\n                       llfndecl: ValueRef) {\n     let _icx = ccx.insn_ctxt(\"trans_enum_variant\");\n@@ -1698,6 +1699,51 @@ fn trans_enum_variant(ccx: @crate_ctxt,\n     finish_fn(fcx, lltop);\n }\n \n+// NB: In theory this should be merged with the function above. But the AST\n+// structures are completely different, so very little code would be shared.\n+fn trans_tuple_struct(ccx: @crate_ctxt,\n+                      fields: ~[@ast::struct_field],\n+                      ctor_id: ast::node_id,\n+                      param_substs: Option<param_substs>,\n+                      llfndecl: ValueRef) {\n+    let _icx = ccx.insn_ctxt(\"trans_tuple_struct\");\n+\n+    // Translate struct fields to function arguments.\n+    let fn_args = do fields.map |field| {\n+        {\n+            mode: ast::expl(ast::by_copy),\n+            ty: field.node.ty,\n+            ident: special_idents::arg,\n+            id: field.node.id\n+        }\n+    };\n+\n+    let fcx = new_fn_ctxt_w_id(ccx, ~[], llfndecl, ctor_id, None,\n+                               param_substs, None);\n+    let raw_llargs = create_llargs_for_fn_args(fcx, no_self, fn_args);\n+\n+    let bcx = top_scope_block(fcx, None);\n+    let lltop = bcx.llbb;\n+    let arg_tys = ty::ty_fn_args(node_id_type(bcx, ctor_id));\n+    let bcx = copy_args_to_allocas(fcx, bcx, fn_args, raw_llargs, arg_tys);\n+\n+    for fields.eachi |i, field| {\n+        let lldestptr = GEPi(bcx, fcx.llretptr, [0, 0, i]);\n+        let llarg = match fcx.llargs.get(field.node.id) {\n+            local_mem(x) => x,\n+            _ => {\n+                ccx.tcx.sess.bug(~\"trans_tuple_struct: llarg wasn't \\\n+                                   local_mem\")\n+            }\n+        };\n+        let arg_ty = arg_tys[i].ty;\n+        memmove_ty(bcx, lldestptr, llarg, arg_ty);\n+    }\n+\n+    build_return(bcx);\n+    finish_fn(fcx, lltop);\n+}\n+\n fn trans_class_dtor(ccx: @crate_ctxt, path: path,\n     body: ast::blk, dtor_id: ast::node_id,\n     psubsts: Option<param_substs>,\n@@ -1835,15 +1881,27 @@ fn trans_item(ccx: @crate_ctxt, item: ast::item) {\n fn trans_struct_def(ccx: @crate_ctxt, struct_def: @ast::struct_def,\n                     tps: ~[ast::ty_param], path: @ast_map::path,\n                     ident: ast::ident, id: ast::node_id) {\n+    // If there are type parameters, the destructor and constructor will be\n+    // monomorphized, so we don't translate them here.\n     if tps.len() == 0u {\n-      do option::iter(&struct_def.dtor) |dtor| {\n-         trans_class_dtor(ccx, *path, dtor.node.body,\n-           dtor.node.id, None, None, local_def(id));\n-      };\n+        // Translate the destructor.\n+        do option::iter(&struct_def.dtor) |dtor| {\n+            trans_class_dtor(ccx, *path, dtor.node.body,\n+                             dtor.node.id, None, None, local_def(id));\n+        };\n+\n+        // If this is a tuple-like struct, translate the constructor.\n+        match struct_def.ctor_id {\n+            None => {}\n+            Some(ctor_id) => {\n+                let llfndecl = get_item_val(ccx, ctor_id);\n+                trans_tuple_struct(ccx, struct_def.fields, ctor_id, None,\n+                                   llfndecl);\n+            }\n+        }\n     }\n-    // If there are ty params, the ctor will get monomorphized\n \n-    // Translate methods\n+    // Translate methods.\n     meth::trans_impl(ccx, *path, ident, struct_def.methods, tps, None, id);\n }\n \n@@ -2128,8 +2186,25 @@ fn get_item_val(ccx: @crate_ctxt, id: ast::node_id) -> ValueRef {\n             set_inline_hint(llfn);\n             llfn\n           }\n+\n+          ast_map::node_struct_ctor(struct_def, struct_item, struct_path) => {\n+            // Only register the constructor if this is a tuple-like struct.\n+            match struct_def.ctor_id {\n+                None => {\n+                    ccx.tcx.sess.bug(~\"attempt to register a constructor of \\\n+                                       a non-tuple-like struct\")\n+                }\n+                Some(ctor_id) => {\n+                    let llfn = register_fn(ccx, struct_item.span,\n+                                           *struct_path, ctor_id);\n+                    set_inline_hint(llfn);\n+                    llfn\n+                }\n+            }\n+          }\n+\n           _ => {\n-            ccx.sess.bug(~\"get_item_val(): unexpected variant\");\n+            ccx.sess.bug(~\"get_item_val(): unexpected variant\")\n           }\n         };\n         if !(exprt || ccx.reachable.contains_key(id)) {"}, {"sha": "2c1e9b21c6d4f77795c2c0afb3dd9df947fe1c5e", "filename": "src/rustc/middle/trans/callee.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/599b4208fb64b18aaddf9add5d8ce2319c7e7cfe/src%2Frustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/599b4208fb64b18aaddf9add5d8ce2319c7e7cfe/src%2Frustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=599b4208fb64b18aaddf9add5d8ce2319c7e7cfe", "patch": "@@ -90,6 +90,9 @@ fn trans(bcx: block, expr: @ast::expr) -> Callee {\n                                                 vid).args.len() > 0u;\n                 fn_callee(bcx, trans_fn_ref(bcx, vid, ref_expr.id))\n             }\n+            ast::def_class(def_id) => {\n+                fn_callee(bcx, trans_fn_ref(bcx, def_id, ref_expr.id))\n+            }\n             ast::def_arg(*) |\n             ast::def_local(*) |\n             ast::def_binding(*) |\n@@ -99,7 +102,7 @@ fn trans(bcx: block, expr: @ast::expr) -> Callee {\n             }\n             ast::def_mod(*) | ast::def_foreign_mod(*) |\n             ast::def_const(*) | ast::def_ty(*) | ast::def_prim_ty(*) |\n-            ast::def_use(*) | ast::def_class(*) | ast::def_typaram_binder(*) |\n+            ast::def_use(*) | ast::def_typaram_binder(*) |\n             ast::def_region(*) | ast::def_label(*) | ast::def_ty_param(*) => {\n                 bcx.tcx().sess.span_bug(\n                     ref_expr.span,"}, {"sha": "4a569e2cf4de4832e5edd2727a2bc586a29b487d", "filename": "src/rustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/599b4208fb64b18aaddf9add5d8ce2319c7e7cfe/src%2Frustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/599b4208fb64b18aaddf9add5d8ce2319c7e7cfe/src%2Frustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=599b4208fb64b18aaddf9add5d8ce2319c7e7cfe", "patch": "@@ -96,6 +96,7 @@ fn monomorphic_fn(ccx: @crate_ctxt,\n       ast_map::node_local(*) => {\n           ccx.tcx.sess.bug(~\"Can't monomorphize a local\")\n       }\n+      ast_map::node_struct_ctor(_, i, pt) => (pt, i.ident, i.span)\n     };\n \n     // Look up the impl type if we're translating a default method.\n@@ -208,6 +209,18 @@ fn monomorphic_fn(ccx: @crate_ctxt,\n                            impl_did_opt.get());\n         d\n       }\n+      ast_map::node_struct_ctor(struct_def, _, _) => {\n+        let d = mk_lldecl();\n+        set_inline_hint(d);\n+        base::trans_tuple_struct(ccx,\n+                                 struct_def.fields,\n+                                 option::expect(struct_def.ctor_id,\n+                                                ~\"ast-mapped tuple struct \\\n+                                                  didn't have a ctor id\"),\n+                                 psubsts,\n+                                 d);\n+        d\n+      }\n \n       // Ugh -- but this ensures any new variants won't be forgotten\n       ast_map::node_expr(*) |"}, {"sha": "d6364e5515ed11da0ee59a6139baa750d5f4ef70", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/599b4208fb64b18aaddf9add5d8ce2319c7e7cfe/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/599b4208fb64b18aaddf9add5d8ce2319c7e7cfe/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=599b4208fb64b18aaddf9add5d8ce2319c7e7cfe", "patch": "@@ -3630,6 +3630,10 @@ fn item_path(cx: ctxt, id: ast::def_id) -> ast_map::path {\n                 syntax::parse::token::special_idents::literally_dtor))\n           }\n \n+          ast_map::node_struct_ctor(_, item, path) => {\n+            vec::append_one(*path, ast_map::path_name(item.ident))\n+          }\n+\n           ast_map::node_stmt(*) | ast_map::node_expr(*) |\n           ast_map::node_arg(*) | ast_map::node_local(*) |\n           ast_map::node_export(*) | ast_map::node_block(*) => {\n@@ -3874,7 +3878,13 @@ fn class_field_tys(fields: ~[@struct_field]) -> ~[field_ty] {\n                            vis: visibility,\n                            mutability: mutability});\n             }\n-            unnamed_field => {}\n+            unnamed_field => {\n+                rslt.push({ident:\n+                    syntax::parse::token::special_idents::unnamed_field,\n+                           id: ast_util::local_def(field.node.id),\n+                           vis: ast::public,\n+                           mutability: ast::class_immutable});\n+            }\n        }\n     }\n     rslt"}, {"sha": "8610fb046b593452131e4d08d919f401602071f3", "filename": "src/rustc/middle/typeck/collect.rs", "status": "modified", "additions": 32, "deletions": 27, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/599b4208fb64b18aaddf9add5d8ce2319c7e7cfe/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/599b4208fb64b18aaddf9add5d8ce2319c7e7cfe/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=599b4208fb64b18aaddf9add5d8ce2319c7e7cfe", "patch": "@@ -597,35 +597,40 @@ fn convert_struct(ccx: @crate_ctxt,\n \n     // If this struct is enum-like or tuple-like, create the type of its\n     // constructor.\n-    if struct_def.fields.len() == 0 {\n-        // Enum-like.\n-        write_ty_to_tcx(tcx, struct_def.ctor_id, selfty);\n-        tcx.tcache.insert(local_def(struct_def.ctor_id), tpt);\n-    } else if struct_def.fields[0].node.kind == ast::unnamed_field {\n-        // Tuple-like.\n-        let ctor_fn_ty = ty::mk_fn(tcx, FnTyBase {\n-            meta: FnMeta {\n-                purity: ast::pure_fn,\n-                proto: ty::proto_bare,\n-                bounds: @~[],\n-                ret_style: ast::return_val,\n-            },\n-            sig: FnSig {\n-                inputs: do struct_def.fields.map |field| {\n-                    {\n-                        mode: ast::expl(ast::by_copy),\n-                        ty: ccx.tcx.tcache.get(local_def(field.node.id)).ty\n+    match struct_def.ctor_id {\n+        None => {}\n+        Some(ctor_id) => {\n+            if struct_def.fields.len() == 0 {\n+                // Enum-like.\n+                write_ty_to_tcx(tcx, ctor_id, selfty);\n+                tcx.tcache.insert(local_def(ctor_id), tpt);\n+            } else if struct_def.fields[0].node.kind == ast::unnamed_field {\n+                // Tuple-like.\n+                let ctor_fn_ty = ty::mk_fn(tcx, FnTyBase {\n+                    meta: FnMeta {\n+                        purity: ast::pure_fn,\n+                        proto: ty::proto_bare,\n+                        bounds: @~[],\n+                        ret_style: ast::return_val,\n+                    },\n+                    sig: FnSig {\n+                        inputs: do struct_def.fields.map |field| {\n+                            {\n+                                mode: ast::expl(ast::by_copy),\n+                                ty: ccx.tcx.tcache.get(local_def(field.node.id)).ty\n+                            }\n+                        },\n+                        output: selfty\n                     }\n-                },\n-                output: selfty\n+                });\n+                write_ty_to_tcx(tcx, ctor_id, ctor_fn_ty);\n+                tcx.tcache.insert(local_def(ctor_id), {\n+                    bounds: tpt.bounds,\n+                    region_param: tpt.region_param,\n+                    ty: ctor_fn_ty\n+                });\n             }\n-        });\n-        write_ty_to_tcx(tcx, struct_def.ctor_id, ctor_fn_ty);\n-        tcx.tcache.insert(local_def(struct_def.ctor_id), {\n-            bounds: tpt.bounds,\n-            region_param: tpt.region_param,\n-            ty: ctor_fn_ty\n-        });\n+        }\n     }\n }\n "}, {"sha": "3d2630e7a5cac57ee6850550084dbdde1f08760f", "filename": "src/test/run-pass/tuple-struct-construct.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/599b4208fb64b18aaddf9add5d8ce2319c7e7cfe/src%2Ftest%2Frun-pass%2Ftuple-struct-construct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/599b4208fb64b18aaddf9add5d8ce2319c7e7cfe/src%2Ftest%2Frun-pass%2Ftuple-struct-construct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftuple-struct-construct.rs?ref=599b4208fb64b18aaddf9add5d8ce2319c7e7cfe", "patch": "@@ -0,0 +1,7 @@\n+struct Foo(int, int);\n+\n+fn main() {\n+    let x = Foo(1, 2);\n+    io::println(fmt!(\"%?\", x));\n+}\n+"}]}