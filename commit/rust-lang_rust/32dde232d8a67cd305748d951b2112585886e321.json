{"sha": "32dde232d8a67cd305748d951b2112585886e321", "node_id": "C_kwDOAAsO6NoAKDMyZGRlMjMyZDhhNjdjZDMwNTc0OGQ5NTFiMjExMjU4NTg4NmUzMjE", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-10-04T10:41:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-04T10:41:02Z"}, "message": "Rollup merge of #102559 - compiler-errors:issue-102553, r=oli-obk\n\nDon't ICE when trying to copy unsized value in const prop\n\nWhen we have a trivially false where-clause predicate like `Self: Sized` where `Self = dyn Trait`, we sometimes don't throw an error during typeck for an illegal operation such as copying an unsized type.\n\nThis, unfortunately, cannot be made into an error (at least not without some migration -- see #95611 for example), but we should at least not ICE, since this function will never actually be reachable from main, for example.\n\nr? `@RalfJung` since I think you added these assertions? but feel free to reassign.\n\nFixes #102553", "tree": {"sha": "f5d079436f5c1177d57296df560a1addbc8c6fcf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5d079436f5c1177d57296df560a1addbc8c6fcf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32dde232d8a67cd305748d951b2112585886e321", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjPA2+CRBK7hj4Ov3rIwAAlioIAD+orSmRO9kpuIKwmnzgIsoh\nzsPMN48vhn/LGoL6ubOWYZPY8vlxMzXPAIWa4pz1Th+O0pjzEtfAnddwW2Bp4uIb\nkf4f8itFBKl3NpolQmi8oP0r6uwAbLfR5yaQAMyi4V+KDG0ugQ2ChKH/CgES68DX\nl7GFW4dYvV2/6dpxerEBKo2OG625fJySFjd9UPhb4UR+ygfNE58+VA1fpN22hWgH\nxR7Q7MeCAP2EXQrL/1eh0RseynUDbNwhZko07026R/LlVvFRgqfhvuD3nXLaWBBe\nuLifaELKe1go/cu6Rg/P35OWbDLHhQq7hx5WD32d0lMFoFnBzQ1zHRz5KhdwxAg=\n=441O\n-----END PGP SIGNATURE-----\n", "payload": "tree f5d079436f5c1177d57296df560a1addbc8c6fcf\nparent d89d21412bcb2f01b83ed8d2fe5199b6bf1011f5\nparent c7d1ec009c56546268a84525d1cb0797d68997c1\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1664880062 +0530\ncommitter GitHub <noreply@github.com> 1664880062 +0530\n\nRollup merge of #102559 - compiler-errors:issue-102553, r=oli-obk\n\nDon't ICE when trying to copy unsized value in const prop\n\nWhen we have a trivially false where-clause predicate like `Self: Sized` where `Self = dyn Trait`, we sometimes don't throw an error during typeck for an illegal operation such as copying an unsized type.\n\nThis, unfortunately, cannot be made into an error (at least not without some migration -- see #95611 for example), but we should at least not ICE, since this function will never actually be reachable from main, for example.\n\nr? `@RalfJung` since I think you added these assertions? but feel free to reassign.\n\nFixes #102553\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32dde232d8a67cd305748d951b2112585886e321", "html_url": "https://github.com/rust-lang/rust/commit/32dde232d8a67cd305748d951b2112585886e321", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32dde232d8a67cd305748d951b2112585886e321/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d89d21412bcb2f01b83ed8d2fe5199b6bf1011f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d89d21412bcb2f01b83ed8d2fe5199b6bf1011f5", "html_url": "https://github.com/rust-lang/rust/commit/d89d21412bcb2f01b83ed8d2fe5199b6bf1011f5"}, {"sha": "c7d1ec009c56546268a84525d1cb0797d68997c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7d1ec009c56546268a84525d1cb0797d68997c1", "html_url": "https://github.com/rust-lang/rust/commit/c7d1ec009c56546268a84525d1cb0797d68997c1"}], "stats": {"total": 40, "additions": 35, "deletions": 5}, "files": [{"sha": "eeeb7d6d3e5cc1e86766e92222bbb88c6e0b0ddd", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/32dde232d8a67cd305748d951b2112585886e321/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32dde232d8a67cd305748d951b2112585886e321/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=32dde232d8a67cd305748d951b2112585886e321", "patch": "@@ -640,11 +640,17 @@ where\n         // avoid force_allocation.\n         let src = match self.read_immediate_raw(src)? {\n             Ok(src_val) => {\n-                assert!(!src.layout.is_unsized(), \"cannot copy unsized immediates\");\n-                assert!(\n-                    !dest.layout.is_unsized(),\n-                    \"the src is sized, so the dest must also be sized\"\n-                );\n+                // FIXME(const_prop): Const-prop can possibly evaluate an\n+                // unsized copy operation when it thinks that the type is\n+                // actually sized, due to a trivially false where-clause\n+                // predicate like `where Self: Sized` with `Self = dyn Trait`.\n+                // See #102553 for an example of such a predicate.\n+                if src.layout.is_unsized() {\n+                    throw_inval!(SizeOfUnsizedType(src.layout.ty));\n+                }\n+                if dest.layout.is_unsized() {\n+                    throw_inval!(SizeOfUnsizedType(dest.layout.ty));\n+                }\n                 assert_eq!(src.layout.size, dest.layout.size);\n                 // Yay, we got a value that we can write directly.\n                 return if layout_compat {"}, {"sha": "523a9d7ac72045b5d758cd707f5f3a41dafabb79", "filename": "src/test/ui/const_prop/issue-102553.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/32dde232d8a67cd305748d951b2112585886e321/src%2Ftest%2Fui%2Fconst_prop%2Fissue-102553.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32dde232d8a67cd305748d951b2112585886e321/src%2Ftest%2Fui%2Fconst_prop%2Fissue-102553.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst_prop%2Fissue-102553.rs?ref=32dde232d8a67cd305748d951b2112585886e321", "patch": "@@ -0,0 +1,24 @@\n+// compile-flags: --crate-type=lib\n+// check-pass\n+\n+pub trait Widget<E> {\n+    fn boxed<'w>(self) -> Box<dyn WidgetDyn<E> + 'w>\n+    where\n+        Self: Sized + 'w;\n+}\n+\n+pub trait WidgetDyn<E> {}\n+\n+impl<T, E> WidgetDyn<E> for T where T: Widget<E> {}\n+\n+impl<E> Widget<E> for dyn WidgetDyn<E> + '_ {\n+    fn boxed<'w>(self) -> Box<dyn WidgetDyn<E> + 'w>\n+    where\n+        Self: Sized + 'w,\n+    {\n+        // Even though this is illegal to const evaluate, this should never\n+        // trigger an ICE because it can never be called from actual code\n+        // (due to the trivially false where-clause predicate).\n+        Box::new(self)\n+    }\n+}"}]}