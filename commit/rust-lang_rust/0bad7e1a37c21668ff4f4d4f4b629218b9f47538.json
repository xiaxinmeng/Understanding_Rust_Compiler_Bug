{"sha": "0bad7e1a37c21668ff4f4d4f4b629218b9f47538", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiYWQ3ZTFhMzdjMjE2NjhmZjRmNGQ0ZjRiNjI5MjE4YjlmNDc1Mzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-13T03:16:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-13T03:16:19Z"}, "message": "auto merge of #9608 : hmarr/rust/vec-get-opt, r=huonw\n\nThis adds `get_opt` to `std::vec`, which looks up an item by index and returns an `Option`. If the given index is out of range, `None` will be returned, otherwise a `Some`-wrapped item will be returned.\r\n\r\nExample use case:\r\n\r\n```rust\r\nuse std::os;\r\n\r\nfn say_hello(name: &str) {\r\n  println(fmt!(\"Hello, %s\", name));\r\n}\r\n\r\nfn main(){\r\n  // Try to get the first cmd line arg, but default to \"World\"\r\n  let args = os::args();\r\n  let default = ~\"World\";\r\n  say_hello(*args.get_opt(1).unwrap_or(&default));\r\n}\r\n```\r\n\r\nIf there's an existing way of implementing this pattern that's cleaner, I'll happily close this. I'm also open to naming suggestions (`index_opt`?)", "tree": {"sha": "3e64ccb840e13219ad12fa54cf02fe0d198186da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e64ccb840e13219ad12fa54cf02fe0d198186da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bad7e1a37c21668ff4f4d4f4b629218b9f47538", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bad7e1a37c21668ff4f4d4f4b629218b9f47538", "html_url": "https://github.com/rust-lang/rust/commit/0bad7e1a37c21668ff4f4d4f4b629218b9f47538", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bad7e1a37c21668ff4f4d4f4b629218b9f47538/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6e3501da14784cd2401dded3b53f3ce3405b4ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6e3501da14784cd2401dded3b53f3ce3405b4ec", "html_url": "https://github.com/rust-lang/rust/commit/c6e3501da14784cd2401dded3b53f3ce3405b4ec"}, {"sha": "21b24e148bd350c6f4945c35a7a30268ccf7d3cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/21b24e148bd350c6f4945c35a7a30268ccf7d3cb", "html_url": "https://github.com/rust-lang/rust/commit/21b24e148bd350c6f4945c35a7a30268ccf7d3cb"}], "stats": {"total": 18, "additions": 18, "deletions": 0}, "files": [{"sha": "4d685910ae1ae6a75c40c2ef6fd4111f5a4ff9f2", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0bad7e1a37c21668ff4f4d4f4b629218b9f47538/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bad7e1a37c21668ff4f4d4f4b629218b9f47538/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=0bad7e1a37c21668ff4f4d4f4b629218b9f47538", "patch": "@@ -840,6 +840,7 @@ pub trait ImmutableVector<'self, T> {\n     fn window_iter(self, size: uint) -> WindowIter<'self, T>;\n     fn chunk_iter(self, size: uint) -> ChunkIter<'self, T>;\n \n+    fn get_opt(&self, index: uint) -> Option<&'self T>;\n     fn head(&self) -> &'self T;\n     fn head_opt(&self) -> Option<&'self T>;\n     fn tail(&self) -> &'self [T];\n@@ -1019,6 +1020,13 @@ impl<'self,T> ImmutableVector<'self, T> for &'self [T] {\n         ChunkIter { v: self, size: size }\n     }\n \n+    /// Returns the element of a vector at the given index, or `None` if the\n+    /// index is out of bounds\n+    #[inline]\n+    fn get_opt(&self, index: uint) -> Option<&'self T> {\n+        if index < self.len() { Some(&self[index]) } else { None }\n+    }\n+\n     /// Returns the first element of a vector, failing if the vector is empty.\n     #[inline]\n     fn head(&self) -> &'self T {\n@@ -2574,6 +2582,16 @@ mod tests {\n         assert_eq!(v2.len(), 2);\n     }\n \n+    #[test]\n+    fn test_get_opt() {\n+        let mut a = ~[11];\n+        assert_eq!(a.get_opt(1), None);\n+        a = ~[11, 12];\n+        assert_eq!(a.get_opt(1).unwrap(), &12);\n+        a = ~[11, 12, 13];\n+        assert_eq!(a.get_opt(1).unwrap(), &12);\n+    }\n+\n     #[test]\n     fn test_head() {\n         let mut a = ~[11];"}]}