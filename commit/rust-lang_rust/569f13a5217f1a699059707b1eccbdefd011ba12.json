{"sha": "569f13a5217f1a699059707b1eccbdefd011ba12", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2OWYxM2E1MjE3ZjFhNjk5MDU5NzA3YjFlY2NiZGVmZDAxMWJhMTI=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-06-14T22:42:55Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-06-29T11:15:26Z"}, "message": "c_str: move `.unwrap` & document it more clearly.\n\nThis should be called rarely, but it was placed first in the list of\nmethods, making it very tempting to call.", "tree": {"sha": "1e37ca850020293794366b73bd26a0a4719f2327", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e37ca850020293794366b73bd26a0a4719f2327"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/569f13a5217f1a699059707b1eccbdefd011ba12", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/569f13a5217f1a699059707b1eccbdefd011ba12", "html_url": "https://github.com/rust-lang/rust/commit/569f13a5217f1a699059707b1eccbdefd011ba12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/569f13a5217f1a699059707b1eccbdefd011ba12/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4d4bc4fe944c1b0627d104127352046879f9dc0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4d4bc4fe944c1b0627d104127352046879f9dc0", "html_url": "https://github.com/rust-lang/rust/commit/d4d4bc4fe944c1b0627d104127352046879f9dc0"}], "stats": {"total": 27, "additions": 16, "deletions": 11}, "files": [{"sha": "9734ba2d7518ef90995726a20ab5b8cd906037e9", "filename": "src/librustrt/c_str.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/569f13a5217f1a699059707b1eccbdefd011ba12/src%2Flibrustrt%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/569f13a5217f1a699059707b1eccbdefd011ba12/src%2Flibrustrt%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fc_str.rs?ref=569f13a5217f1a699059707b1eccbdefd011ba12", "patch": "@@ -122,17 +122,6 @@ impl CString {\n         CString { buf: buf, owns_buffer_: owns_buffer }\n     }\n \n-    /// Unwraps the wrapped `*libc::c_char` from the `CString` wrapper.\n-    ///\n-    /// The original object is destructed after this method is called, and if\n-    /// the underlying pointer was previously allocated, care must be taken to\n-    /// ensure that it is deallocated properly.\n-    pub unsafe fn unwrap(self) -> *const libc::c_char {\n-        let mut c_str = self;\n-        c_str.owns_buffer_ = false;\n-        c_str.buf\n-    }\n-\n     /// Return a pointer to the NUL-terminated string data.\n     ///\n     /// `.as_ptr` returns an internal pointer into the `CString`, and\n@@ -289,6 +278,22 @@ impl CString {\n             marker: marker::ContravariantLifetime,\n         }\n     }\n+\n+    /// Unwraps the wrapped `*libc::c_char` from the `CString` wrapper.\n+    ///\n+    /// Any ownership of the buffer by the `CString` wrapper is\n+    /// forgotten, meaning that the backing allocation of this\n+    /// `CString` is not automatically freed if it owns the\n+    /// allocation. In this case, a user of `.unwrap()` should ensure\n+    /// the allocation is freed, to avoid leaking memory.\n+    ///\n+    /// Prefer `.as_ptr()` when just retrieving a pointer to the\n+    /// string data, as that does not relinquish ownership.\n+    pub unsafe fn unwrap(mut self) -> *const libc::c_char {\n+        self.owns_buffer_ = false;\n+        self.buf\n+    }\n+\n }\n \n impl Drop for CString {"}]}