{"sha": "10602f1dbf55522072ce85095bf041649e52ad6f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwNjAyZjFkYmY1NTUyMjA3MmNlODUwOTViZjA0MTY0OWU1MmFkNmY=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-02-15T22:26:05Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-02-15T22:29:24Z"}, "message": "Drive-by cleanup\n\nCo-Authored-By: Gabriel Smith <yodaldevoid@users.noreply.github.com>", "tree": {"sha": "39b8980a15db16f13535f4ddf17620486c847d57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39b8980a15db16f13535f4ddf17620486c847d57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10602f1dbf55522072ce85095bf041649e52ad6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10602f1dbf55522072ce85095bf041649e52ad6f", "html_url": "https://github.com/rust-lang/rust/commit/10602f1dbf55522072ce85095bf041649e52ad6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10602f1dbf55522072ce85095bf041649e52ad6f/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f3c6d7c047c7dc8a7cc10fa83c464d2aa6be631", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f3c6d7c047c7dc8a7cc10fa83c464d2aa6be631", "html_url": "https://github.com/rust-lang/rust/commit/7f3c6d7c047c7dc8a7cc10fa83c464d2aa6be631"}], "stats": {"total": 30, "additions": 10, "deletions": 20}, "files": [{"sha": "f6d864f5b404dc82a0cc1023f96557b64290efdf", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10602f1dbf55522072ce85095bf041649e52ad6f/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10602f1dbf55522072ce85095bf041649e52ad6f/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=10602f1dbf55522072ce85095bf041649e52ad6f", "patch": "@@ -52,13 +52,13 @@ pub enum Def {\n     AssociatedExistential(DefId),\n     PrimTy(hir::PrimTy),\n     TyParam(DefId),\n-    ConstParam(DefId),\n     SelfTy(Option<DefId> /* trait */, Option<DefId> /* impl */),\n     ToolMod, // e.g., `rustfmt` in `#[rustfmt::skip]`\n \n     // Value namespace\n     Fn(DefId),\n     Const(DefId),\n+    ConstParam(DefId),\n     Static(DefId, bool /* is_mutbl */),\n     StructCtor(DefId, CtorKind), // `DefId` refers to `NodeId` of the struct's constructor\n     VariantCtor(DefId, CtorKind), // `DefId` refers to the enum variant"}, {"sha": "312351ab850c2ee1a5ac76c07b4699b153e688b5", "filename": "src/librustc/hir/pat_util.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/10602f1dbf55522072ce85095bf041649e52ad6f/src%2Flibrustc%2Fhir%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10602f1dbf55522072ce85095bf041649e52ad6f/src%2Flibrustc%2Fhir%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fpat_util.rs?ref=10602f1dbf55522072ce85095bf041649e52ad6f", "patch": "@@ -64,19 +64,6 @@ impl hir::Pat {\n         }\n     }\n \n-    pub fn is_const(&self) -> bool {\n-        match self.node {\n-            PatKind::Path(hir::QPath::TypeRelative(..)) => true,\n-            PatKind::Path(hir::QPath::Resolved(_, ref path)) => {\n-                match path.def {\n-                    Def::Const(..) | Def::AssociatedConst(..) => true,\n-                    _ => false\n-                }\n-            }\n-            _ => false\n-        }\n-    }\n-\n     /// Call `f` on every \"binding\" in a pattern, e.g., on `a` in\n     /// `match foo() { Some(a) => (), None => () }`\n     pub fn each_binding<F>(&self, mut f: F)"}, {"sha": "0562fddb2b5233926bed78a1950cc5d766bcdf5a", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/10602f1dbf55522072ce85095bf041649e52ad6f/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10602f1dbf55522072ce85095bf041649e52ad6f/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=10602f1dbf55522072ce85095bf041649e52ad6f", "patch": "@@ -315,8 +315,11 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n             Node::Ty(_) |\n             Node::MacroDef(_) => {}\n             _ => {\n-                bug!(\"found unexpected thingy in worklist: {}\",\n-                     self.tcx.hir().node_to_string(search_item))\n+                bug!(\n+                    \"found unexpected node kind in worklist: {} ({:?})\",\n+                    self.tcx.hir().node_to_string(search_item),\n+                    node,\n+                );\n             }\n         }\n     }"}, {"sha": "92afbc56c557b443953762eb0d211a88f1f5c81c", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/10602f1dbf55522072ce85095bf041649e52ad6f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10602f1dbf55522072ce85095bf041649e52ad6f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=10602f1dbf55522072ce85095bf041649e52ad6f", "patch": "@@ -1502,7 +1502,7 @@ impl Clean<GenericParamDef> for hir::GenericParam {\n                 };\n                 (name, GenericParamDefKind::Lifetime)\n             }\n-            hir::GenericParamKind::Type { ref default, synthetic, .. } => {\n+            hir::GenericParamKind::Type { ref default, synthetic } => {\n                 (self.name.ident().name.clean(cx), GenericParamDefKind::Type {\n                     did: cx.tcx.hir().local_def_id(self.id),\n                     bounds: self.bounds.clean(cx),\n@@ -2577,7 +2577,7 @@ impl Clean<Type> for hir::Ty {\n                                     let mut j = 0;\n                                     let lifetime = generic_args.args.iter().find_map(|arg| {\n                                         match arg {\n-                                            GenericArg::Lifetime(lt) => {\n+                                            hir::GenericArg::Lifetime(lt) => {\n                                                 if indices.lifetimes == j {\n                                                     return Some(lt);\n                                                 }\n@@ -2602,7 +2602,7 @@ impl Clean<Type> for hir::Ty {\n                                     let mut j = 0;\n                                     let type_ = generic_args.args.iter().find_map(|arg| {\n                                         match arg {\n-                                            GenericArg::Type(ty) => {\n+                                            hir::GenericArg::Type(ty) => {\n                                                 if indices.types == j {\n                                                     return Some(ty);\n                                                 }"}, {"sha": "59820e4e5d1aeebe33358731a1a0c13975b915b8", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10602f1dbf55522072ce85095bf041649e52ad6f/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10602f1dbf55522072ce85095bf041649e52ad6f/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=10602f1dbf55522072ce85095bf041649e52ad6f", "patch": "@@ -218,7 +218,7 @@ impl<'a, 'tcx, 'rcx> DocContext<'a, 'tcx, 'rcx> {\n                         name: hir::LifetimeName::Param(name),\n                     }));\n                 }\n-                ty::GenericParamDefKind::Type {..} => {\n+                ty::GenericParamDefKind::Type { .. } => {\n                     args.push(hir::GenericArg::Type(self.ty_param_to_ty(param.clone())));\n                 }\n             }"}]}