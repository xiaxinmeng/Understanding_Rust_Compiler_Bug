{"sha": "d68616a140b35dd9bc4e2982e0993257ab0942e0", "node_id": "C_kwDOAAsO6NoAKGQ2ODYxNmExNDBiMzVkZDliYzRlMjk4MmUwOTkzMjU3YWIwOTQyZTA", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-10-17T13:05:20Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-10-17T13:05:20Z"}, "message": "Make more things private", "tree": {"sha": "3e5b22940e813be4ca26ad61c66191a5db500554", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e5b22940e813be4ca26ad61c66191a5db500554"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d68616a140b35dd9bc4e2982e0993257ab0942e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d68616a140b35dd9bc4e2982e0993257ab0942e0", "html_url": "https://github.com/rust-lang/rust/commit/d68616a140b35dd9bc4e2982e0993257ab0942e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d68616a140b35dd9bc4e2982e0993257ab0942e0/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8aaafddee8ad709438a663084e6eec8f458bfd50", "url": "https://api.github.com/repos/rust-lang/rust/commits/8aaafddee8ad709438a663084e6eec8f458bfd50", "html_url": "https://github.com/rust-lang/rust/commit/8aaafddee8ad709438a663084e6eec8f458bfd50"}], "stats": {"total": 54, "additions": 31, "deletions": 23}, "files": [{"sha": "176040120f410db9049ec147bdf493788d1ad12f", "filename": "editors/code/src/ast_inspector.ts", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d68616a140b35dd9bc4e2982e0993257ab0942e0/editors%2Fcode%2Fsrc%2Fast_inspector.ts", "raw_url": "https://github.com/rust-lang/rust/raw/d68616a140b35dd9bc4e2982e0993257ab0942e0/editors%2Fcode%2Fsrc%2Fast_inspector.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fast_inspector.ts?ref=d68616a140b35dd9bc4e2982e0993257ab0942e0", "patch": "@@ -54,8 +54,6 @@ export class AstInspector implements vscode.HoverProvider, vscode.DefinitionProv\n             this,\n             ctx.subscriptions\n         );\n-\n-        ctx.pushExtCleanup(this);\n     }\n     dispose() {\n         this.setRustEditor(undefined);"}, {"sha": "12ceb4f2df8e1ca360ce86212dc7187cc3adf5e9", "filename": "editors/code/src/commands.ts", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d68616a140b35dd9bc4e2982e0993257ab0942e0/editors%2Fcode%2Fsrc%2Fcommands.ts", "raw_url": "https://github.com/rust-lang/rust/raw/d68616a140b35dd9bc4e2982e0993257ab0942e0/editors%2Fcode%2Fsrc%2Fcommands.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands.ts?ref=d68616a140b35dd9bc4e2982e0993257ab0942e0", "patch": "@@ -377,8 +377,7 @@ export function syntaxTree(ctx: Ctx): Cmd {\n         }\n     })();\n \n-    void new AstInspector(ctx);\n-\n+    ctx.pushExtCleanup(new AstInspector(ctx));\n     ctx.pushExtCleanup(\n         vscode.workspace.registerTextDocumentContentProvider(\"rust-analyzer-syntax-tree\", tdcp)\n     );"}, {"sha": "6b12d9ca1ecf239a081e08c5227f84957f4deae6", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d68616a140b35dd9bc4e2982e0993257ab0942e0/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/d68616a140b35dd9bc4e2982e0993257ab0942e0/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=d68616a140b35dd9bc4e2982e0993257ab0942e0", "patch": "@@ -23,12 +23,12 @@ export class Ctx {\n     readonly config: Config;\n \n     private client: lc.LanguageClient | undefined;\n+    private _serverPath: string | undefined;\n+    private traceOutputChannel: vscode.OutputChannel | undefined;\n+    private outputChannel: vscode.OutputChannel | undefined;\n+    private state: PersistentState;\n \n-    traceOutputChannel: vscode.OutputChannel | undefined;\n-    outputChannel: vscode.OutputChannel | undefined;\n     workspace: Workspace;\n-    state: PersistentState;\n-    serverPath: string | undefined;\n \n     constructor(readonly extCtx: vscode.ExtensionContext, workspace: Workspace) {\n         this.statusBar = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left);\n@@ -70,21 +70,24 @@ export class Ctx {\n         if (!this.client) {\n             log.info(\"Creating language client\");\n \n-            this.serverPath = await bootstrap(this.extCtx, this.config, this.state).catch((err) => {\n-                let message = \"bootstrap error. \";\n+            this._serverPath = await bootstrap(this.extCtx, this.config, this.state).catch(\n+                (err) => {\n+                    let message = \"bootstrap error. \";\n \n-                message +=\n-                    'See the logs in \"OUTPUT > Rust Analyzer Client\" (should open automatically). ';\n-                message += 'To enable verbose logs use { \"rust-analyzer.trace.extension\": true }';\n+                    message +=\n+                        'See the logs in \"OUTPUT > Rust Analyzer Client\" (should open automatically). ';\n+                    message +=\n+                        'To enable verbose logs use { \"rust-analyzer.trace.extension\": true }';\n \n-                log.error(\"Bootstrap error\", err);\n-                throw new Error(message);\n-            });\n+                    log.error(\"Bootstrap error\", err);\n+                    throw new Error(message);\n+                }\n+            );\n             const newEnv = substituteVariablesInEnv(\n                 Object.assign({}, process.env, this.config.serverExtraEnv)\n             );\n             const run: lc.Executable = {\n-                command: this.serverPath,\n+                command: this._serverPath,\n                 options: { env: newEnv },\n             };\n             const serverOptions = {\n@@ -129,7 +132,7 @@ export class Ctx {\n     async disposeClient() {\n         log.info(\"Deactivating language client\");\n         await this.client?.dispose();\n-        this.serverPath = undefined;\n+        this._serverPath = undefined;\n         this.client = undefined;\n     }\n \n@@ -161,6 +164,10 @@ export class Ctx {\n         return this.extCtx.subscriptions;\n     }\n \n+    get serverPath(): string | undefined {\n+        return this._serverPath;\n+    }\n+\n     setServerStatus(status: ServerStatusParams) {\n         let icon = \"\";\n         const statusBar = this.statusBar;"}, {"sha": "97ec41dce3a54256bcfee6e264829922cedf7295", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d68616a140b35dd9bc4e2982e0993257ab0942e0/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/d68616a140b35dd9bc4e2982e0993257ab0942e0/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=d68616a140b35dd9bc4e2982e0993257ab0942e0", "patch": "@@ -14,6 +14,10 @@ export interface RustAnalyzerExtensionApi {\n     readonly client?: lc.LanguageClient;\n }\n \n+export async function deactivate() {\n+    await setContextValue(RUST_PROJECT_CONTEXT_NAME, undefined);\n+}\n+\n export async function activate(\n     context: vscode.ExtensionContext\n ): Promise<RustAnalyzerExtensionApi> {\n@@ -56,12 +60,14 @@ export async function activate(\n     const ctx = new Ctx(context, workspace);\n     // VS Code doesn't show a notification when an extension fails to activate\n     // so we do it ourselves.\n-    return await activateServer(ctx).catch((err) => {\n+    const api = await activateServer(ctx).catch((err) => {\n         void vscode.window.showErrorMessage(\n             `Cannot activate rust-analyzer extension: ${err.message}`\n         );\n         throw err;\n     });\n+    await setContextValue(RUST_PROJECT_CONTEXT_NAME, true);\n+    return api;\n }\n \n async function activateServer(ctx: Ctx): Promise<RustAnalyzerExtensionApi> {\n@@ -112,8 +118,6 @@ async function initCommonContext(ctx: Ctx) {\n     );\n     ctx.pushExtCleanup(defaultOnEnter);\n \n-    await setContextValue(RUST_PROJECT_CONTEXT_NAME, true);\n-\n     // Commands which invokes manually via command palette, shortcut, etc.\n     ctx.registerCommand(\"reload\", (_) => async () => {\n         void vscode.window.showInformationMessage(\"Reloading rust-analyzer...\");"}, {"sha": "dadaa41b1d1620c1e14053cb5b453f6a192c50d6", "filename": "editors/code/src/run.ts", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d68616a140b35dd9bc4e2982e0993257ab0942e0/editors%2Fcode%2Fsrc%2Frun.ts", "raw_url": "https://github.com/rust-lang/rust/raw/d68616a140b35dd9bc4e2982e0993257ab0942e0/editors%2Fcode%2Fsrc%2Frun.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Frun.ts?ref=d68616a140b35dd9bc4e2982e0993257ab0942e0", "patch": "@@ -18,9 +18,9 @@ export async function selectRunnable(\n     showButtons: boolean = true\n ): Promise<RunnableQuickPick | undefined> {\n     const editor = ctx.activeRustEditor;\n-    const client = ctx.client;\n-    if (!editor || !client) return;\n+    if (!editor) return;\n \n+    const client = await ctx.getClient();\n     const textDocument: lc.TextDocumentIdentifier = {\n         uri: editor.document.uri.toString(),\n     };"}]}