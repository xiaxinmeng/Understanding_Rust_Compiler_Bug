{"sha": "29847a4d44469dd8f91709a1360b012a127f1259", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5ODQ3YTRkNDQ0NjlkZDhmOTE3MDlhMTM2MGIwMTJhMTI3ZjEyNTk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-06T22:27:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-06T22:27:06Z"}, "message": "Rollup merge of #67094 - RalfJung:fields, r=Mark-Simulacrum\n\nget rid of __ in field names\n\nThis old work-around should not be needed any more.", "tree": {"sha": "90cb03ad3b0468c44da002fc96be98a067b5d5dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90cb03ad3b0468c44da002fc96be98a067b5d5dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29847a4d44469dd8f91709a1360b012a127f1259", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd6tW6CRBK7hj4Ov3rIwAAdHIIAGG4Vg5/NUDAZWzd2dmkpgVB\nvUjicWa8M9xNOGaCMq4XGUWzP7bc1aJ3gZYiZNQztbl6Rtr9iq3ehSVfWyteAOOD\n2agYVzasRnaLWFT2ko//2AdwucfZhpU97+A09pfhoGs9qswWD09UOJLyX6Elll3l\ncLnYuWgGaQe6+0LChoGPXUKIuVsFgxxSSoLCr0TDGh6HDZ7jdCzkf5ki2a8MAE1Y\n+2U3HSZjNEvq+4uIFSJSWrGJvLYa9Czu7BCi2CNQP/c2Pj0VADaGY57smDzf72Dm\n2XjGtLgZ4yHuOPbvdRhSAF7MxgxOJ9EsM8uzZnehIzrTCqrsH1UDrXVRJvzZ7Kk=\n=/ecS\n-----END PGP SIGNATURE-----\n", "payload": "tree 90cb03ad3b0468c44da002fc96be98a067b5d5dd\nparent fd781734843acadb2e3509c2d85e0597e1bdb7e2\nparent 49697ae38bb724fd4eff97c64e73a83b9c1a28df\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1575671226 +0100\ncommitter GitHub <noreply@github.com> 1575671226 +0100\n\nRollup merge of #67094 - RalfJung:fields, r=Mark-Simulacrum\n\nget rid of __ in field names\n\nThis old work-around should not be needed any more.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29847a4d44469dd8f91709a1360b012a127f1259", "html_url": "https://github.com/rust-lang/rust/commit/29847a4d44469dd8f91709a1360b012a127f1259", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29847a4d44469dd8f91709a1360b012a127f1259/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd781734843acadb2e3509c2d85e0597e1bdb7e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd781734843acadb2e3509c2d85e0597e1bdb7e2", "html_url": "https://github.com/rust-lang/rust/commit/fd781734843acadb2e3509c2d85e0597e1bdb7e2"}, {"sha": "49697ae38bb724fd4eff97c64e73a83b9c1a28df", "url": "https://api.github.com/repos/rust-lang/rust/commits/49697ae38bb724fd4eff97c64e73a83b9c1a28df", "html_url": "https://github.com/rust-lang/rust/commit/49697ae38bb724fd4eff97c64e73a83b9c1a28df"}], "stats": {"total": 50, "additions": 24, "deletions": 26}, "files": [{"sha": "e90da69906009e9e01568eee6e60a3340d337ac7", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/29847a4d44469dd8f91709a1360b012a127f1259/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29847a4d44469dd8f91709a1360b012a127f1259/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=29847a4d44469dd8f91709a1360b012a127f1259", "patch": "@@ -143,10 +143,8 @@ unsafe impl<T: ?Sized + Send> Sync for Mutex<T> { }\n #[must_use = \"if unused the Mutex will immediately unlock\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct MutexGuard<'a, T: ?Sized + 'a> {\n-    // funny underscores due to how Deref/DerefMut currently work (they\n-    // disregard field privacy).\n-    __lock: &'a Mutex<T>,\n-    __poison: poison::Guard,\n+    lock: &'a Mutex<T>,\n+    poison: poison::Guard,\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -417,8 +415,8 @@ impl<'mutex, T: ?Sized> MutexGuard<'mutex, T> {\n     unsafe fn new(lock: &'mutex Mutex<T>) -> LockResult<MutexGuard<'mutex, T>> {\n         poison::map_result(lock.poison.borrow(), |guard| {\n             MutexGuard {\n-                __lock: lock,\n-                __poison: guard,\n+                lock: lock,\n+                poison: guard,\n             }\n         })\n     }\n@@ -429,14 +427,14 @@ impl<T: ?Sized> Deref for MutexGuard<'_, T> {\n     type Target = T;\n \n     fn deref(&self) -> &T {\n-        unsafe { &*self.__lock.data.get() }\n+        unsafe { &*self.lock.data.get() }\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> DerefMut for MutexGuard<'_, T> {\n     fn deref_mut(&mut self) -> &mut T {\n-        unsafe { &mut *self.__lock.data.get() }\n+        unsafe { &mut *self.lock.data.get() }\n     }\n }\n \n@@ -445,8 +443,8 @@ impl<T: ?Sized> Drop for MutexGuard<'_, T> {\n     #[inline]\n     fn drop(&mut self) {\n         unsafe {\n-            self.__lock.poison.done(&self.__poison);\n-            self.__lock.inner.raw_unlock();\n+            self.lock.poison.done(&self.poison);\n+            self.lock.inner.raw_unlock();\n         }\n     }\n }\n@@ -466,11 +464,11 @@ impl<T: ?Sized + fmt::Display> fmt::Display for MutexGuard<'_, T> {\n }\n \n pub fn guard_lock<'a, T: ?Sized>(guard: &MutexGuard<'a, T>) -> &'a sys::Mutex {\n-    &guard.__lock.inner\n+    &guard.lock.inner\n }\n \n pub fn guard_poison<'a, T: ?Sized>(guard: &MutexGuard<'a, T>) -> &'a poison::Flag {\n-    &guard.__lock.poison\n+    &guard.lock.poison\n }\n \n #[cfg(all(test, not(target_os = \"emscripten\")))]"}, {"sha": "c217291a42e4856de7192aa5bc2f0f52802577a3", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/29847a4d44469dd8f91709a1360b012a127f1259/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29847a4d44469dd8f91709a1360b012a127f1259/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=29847a4d44469dd8f91709a1360b012a127f1259", "patch": "@@ -87,7 +87,7 @@ unsafe impl<T: ?Sized + Send + Sync> Sync for RwLock<T> {}\n #[must_use = \"if unused the RwLock will immediately unlock\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RwLockReadGuard<'a, T: ?Sized + 'a> {\n-    __lock: &'a RwLock<T>,\n+    lock: &'a RwLock<T>,\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -108,8 +108,8 @@ unsafe impl<T: ?Sized + Sync> Sync for RwLockReadGuard<'_, T> {}\n #[must_use = \"if unused the RwLock will immediately unlock\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RwLockWriteGuard<'a, T: ?Sized + 'a> {\n-    __lock: &'a RwLock<T>,\n-    __poison: poison::Guard,\n+    lock: &'a RwLock<T>,\n+    poison: poison::Guard,\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -465,7 +465,7 @@ impl<'rwlock, T: ?Sized> RwLockReadGuard<'rwlock, T> {\n                   -> LockResult<RwLockReadGuard<'rwlock, T>> {\n         poison::map_result(lock.poison.borrow(), |_| {\n             RwLockReadGuard {\n-                __lock: lock,\n+                lock: lock,\n             }\n         })\n     }\n@@ -476,8 +476,8 @@ impl<'rwlock, T: ?Sized> RwLockWriteGuard<'rwlock, T> {\n                   -> LockResult<RwLockWriteGuard<'rwlock, T>> {\n         poison::map_result(lock.poison.borrow(), |guard| {\n             RwLockWriteGuard {\n-                __lock: lock,\n-                __poison: guard,\n+                lock: lock,\n+                poison: guard,\n             }\n         })\n     }\n@@ -487,7 +487,7 @@ impl<'rwlock, T: ?Sized> RwLockWriteGuard<'rwlock, T> {\n impl<T: fmt::Debug> fmt::Debug for RwLockReadGuard<'_, T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"RwLockReadGuard\")\n-            .field(\"lock\", &self.__lock)\n+            .field(\"lock\", &self.lock)\n             .finish()\n     }\n }\n@@ -503,7 +503,7 @@ impl<T: ?Sized + fmt::Display> fmt::Display for RwLockReadGuard<'_, T> {\n impl<T: fmt::Debug> fmt::Debug for RwLockWriteGuard<'_, T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"RwLockWriteGuard\")\n-            .field(\"lock\", &self.__lock)\n+            .field(\"lock\", &self.lock)\n             .finish()\n     }\n }\n@@ -520,7 +520,7 @@ impl<T: ?Sized> Deref for RwLockReadGuard<'_, T> {\n     type Target = T;\n \n     fn deref(&self) -> &T {\n-        unsafe { &*self.__lock.data.get() }\n+        unsafe { &*self.lock.data.get() }\n     }\n }\n \n@@ -529,29 +529,29 @@ impl<T: ?Sized> Deref for RwLockWriteGuard<'_, T> {\n     type Target = T;\n \n     fn deref(&self) -> &T {\n-        unsafe { &*self.__lock.data.get() }\n+        unsafe { &*self.lock.data.get() }\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> DerefMut for RwLockWriteGuard<'_, T> {\n     fn deref_mut(&mut self) -> &mut T {\n-        unsafe { &mut *self.__lock.data.get() }\n+        unsafe { &mut *self.lock.data.get() }\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> Drop for RwLockReadGuard<'_, T> {\n     fn drop(&mut self) {\n-        unsafe { self.__lock.inner.read_unlock(); }\n+        unsafe { self.lock.inner.read_unlock(); }\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> Drop for RwLockWriteGuard<'_, T> {\n     fn drop(&mut self) {\n-        self.__lock.poison.done(&self.__poison);\n-        unsafe { self.__lock.inner.write_unlock(); }\n+        self.lock.poison.done(&self.poison);\n+        unsafe { self.lock.inner.write_unlock(); }\n     }\n }\n "}]}