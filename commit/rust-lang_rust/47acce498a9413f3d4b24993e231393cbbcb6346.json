{"sha": "47acce498a9413f3d4b24993e231393cbbcb6346", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3YWNjZTQ5OGE5NDEzZjNkNGIyNDk5M2UyMzEzOTNjYmJjYjYzNDY=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-05T01:01:55Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-13T22:03:45Z"}, "message": "libcoretest: fix fallout in unit tests", "tree": {"sha": "eca705afc355609d98ab04af42748f619e0c7e24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eca705afc355609d98ab04af42748f619e0c7e24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47acce498a9413f3d4b24993e231393cbbcb6346", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47acce498a9413f3d4b24993e231393cbbcb6346", "html_url": "https://github.com/rust-lang/rust/commit/47acce498a9413f3d4b24993e231393cbbcb6346", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47acce498a9413f3d4b24993e231393cbbcb6346/comments", "author": null, "committer": null, "parents": [{"sha": "646083510ab82fa48091c942a2a4015bed8c15dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/646083510ab82fa48091c942a2a4015bed8c15dc", "html_url": "https://github.com/rust-lang/rust/commit/646083510ab82fa48091c942a2a4015bed8c15dc"}], "stats": {"total": 13, "additions": 7, "deletions": 6}, "files": [{"sha": "089a2cc880eb624a79a26714d5f1406c2e3da62a", "filename": "src/libcoretest/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/47acce498a9413f3d4b24993e231393cbbcb6346/src%2Flibcoretest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47acce498a9413f3d4b24993e231393cbbcb6346/src%2Flibcoretest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Flib.rs?ref=47acce498a9413f3d4b24993e231393cbbcb6346", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n #![feature(globs, unsafe_destructor, macro_rules, slicing_syntax)]\n+#![feature(unboxed_closures)]\n \n extern crate core;\n extern crate test;"}, {"sha": "763fcccdbfdc8cbdc7d2b568368d7ebfd9fc9da7", "filename": "src/libcoretest/str.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/47acce498a9413f3d4b24993e231393cbbcb6346/src%2Flibcoretest%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47acce498a9413f3d4b24993e231393cbbcb6346/src%2Flibcoretest%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fstr.rs?ref=47acce498a9413f3d4b24993e231393cbbcb6346", "patch": "@@ -54,7 +54,7 @@ fn test_rsplitn_char_iterator() {\n     split.reverse();\n     assert_eq!(split, vec![\"\\nM\u00e4ry h\u00e4d \u00e4\", \"little\", \"l\u00e4mb\\nLittle\", \"l\u00e4mb\\n\"]);\n \n-    let mut split: Vec<&str> = data.rsplitn(3, |c: char| c == ' ').collect();\n+    let mut split: Vec<&str> = data.rsplitn(3, |&: c: char| c == ' ').collect();\n     split.reverse();\n     assert_eq!(split, vec![\"\\nM\u00e4ry h\u00e4d \u00e4\", \"little\", \"l\u00e4mb\\nLittle\", \"l\u00e4mb\\n\"]);\n \n@@ -63,7 +63,7 @@ fn test_rsplitn_char_iterator() {\n     split.reverse();\n     assert_eq!(split, vec![\"\\nM\u00e4ry h\u00e4d \", \" little l\", \"mb\\nLittle l\", \"mb\\n\"]);\n \n-    let mut split: Vec<&str> = data.rsplitn(3, |c: char| c == '\u00e4').collect();\n+    let mut split: Vec<&str> = data.rsplitn(3, |&: c: char| c == '\u00e4').collect();\n     split.reverse();\n     assert_eq!(split, vec![\"\\nM\u00e4ry h\u00e4d \", \" little l\", \"mb\\nLittle l\", \"mb\\n\"]);\n }\n@@ -79,10 +79,10 @@ fn test_split_char_iterator() {\n     rsplit.reverse();\n     assert_eq!(rsplit, vec![\"\\nM\u00e4ry\", \"h\u00e4d\", \"\u00e4\", \"little\", \"l\u00e4mb\\nLittle\", \"l\u00e4mb\\n\"]);\n \n-    let split: Vec<&str> = data.split(|c: char| c == ' ').collect();\n+    let split: Vec<&str> = data.split(|&: c: char| c == ' ').collect();\n     assert_eq!( split, vec![\"\\nM\u00e4ry\", \"h\u00e4d\", \"\u00e4\", \"little\", \"l\u00e4mb\\nLittle\", \"l\u00e4mb\\n\"]);\n \n-    let mut rsplit: Vec<&str> = data.split(|c: char| c == ' ').rev().collect();\n+    let mut rsplit: Vec<&str> = data.split(|&: c: char| c == ' ').rev().collect();\n     rsplit.reverse();\n     assert_eq!(rsplit, vec![\"\\nM\u00e4ry\", \"h\u00e4d\", \"\u00e4\", \"little\", \"l\u00e4mb\\nLittle\", \"l\u00e4mb\\n\"]);\n \n@@ -94,10 +94,10 @@ fn test_split_char_iterator() {\n     rsplit.reverse();\n     assert_eq!(rsplit, vec![\"\\nM\", \"ry h\", \"d \", \" little l\", \"mb\\nLittle l\", \"mb\\n\"]);\n \n-    let split: Vec<&str> = data.split(|c: char| c == '\u00e4').collect();\n+    let split: Vec<&str> = data.split(|&: c: char| c == '\u00e4').collect();\n     assert_eq!( split, vec![\"\\nM\", \"ry h\", \"d \", \" little l\", \"mb\\nLittle l\", \"mb\\n\"]);\n \n-    let mut rsplit: Vec<&str> = data.split(|c: char| c == '\u00e4').rev().collect();\n+    let mut rsplit: Vec<&str> = data.split(|&: c: char| c == '\u00e4').rev().collect();\n     rsplit.reverse();\n     assert_eq!(rsplit, vec![\"\\nM\", \"ry h\", \"d \", \" little l\", \"mb\\nLittle l\", \"mb\\n\"]);\n }"}]}