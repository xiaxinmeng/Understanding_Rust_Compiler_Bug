{"sha": "35dca7fb7b7304cfa8da027d1be6eea7142d90d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1ZGNhN2ZiN2I3MzA0Y2ZhOGRhMDI3ZDFiZTZlZWE3MTQyZDkwZDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-13T18:28:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-13T18:28:30Z"}, "message": "Auto merge of #32780 - soltanmm:consider-the-following, r=nikomatsakis\n\nReplace consider_unification_despite_ambiguity with new obligation variant\n\nIs work towards #32730. Addresses part one of #32286. Addresses #24210 and #26046 to some degree.\n\nr? @nikomatsakis", "tree": {"sha": "a60302779e6e49f13acb662d1914e3191ba3a84d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a60302779e6e49f13acb662d1914e3191ba3a84d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35dca7fb7b7304cfa8da027d1be6eea7142d90d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35dca7fb7b7304cfa8da027d1be6eea7142d90d6", "html_url": "https://github.com/rust-lang/rust/commit/35dca7fb7b7304cfa8da027d1be6eea7142d90d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35dca7fb7b7304cfa8da027d1be6eea7142d90d6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "525aa6102250ec2a33c7066dfb966524f0ce3e21", "url": "https://api.github.com/repos/rust-lang/rust/commits/525aa6102250ec2a33c7066dfb966524f0ce3e21", "html_url": "https://github.com/rust-lang/rust/commit/525aa6102250ec2a33c7066dfb966524f0ce3e21"}, {"sha": "de82fc4dc6bbb87e50618f40e8fc671fb016f815", "url": "https://api.github.com/repos/rust-lang/rust/commits/de82fc4dc6bbb87e50618f40e8fc671fb016f815", "html_url": "https://github.com/rust-lang/rust/commit/de82fc4dc6bbb87e50618f40e8fc671fb016f815"}], "stats": {"total": 238, "additions": 163, "deletions": 75}, "files": [{"sha": "0b1c9609a0f0d7ab380d7c6d362c6fc4251704d6", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/35dca7fb7b7304cfa8da027d1be6eea7142d90d6/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35dca7fb7b7304cfa8da027d1be6eea7142d90d6/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=35dca7fb7b7304cfa8da027d1be6eea7142d90d6", "patch": "@@ -1543,4 +1543,5 @@ register_diagnostics! {\n     E0490, // a value of type `..` is borrowed for too long\n     E0491, // in type `..`, reference has a longer lifetime than the data it...\n     E0495, // cannot infer an appropriate lifetime due to conflicting requirements\n+    E0524, // expected a closure that implements `..` but this closure only implements `..`\n }"}, {"sha": "51eebd43731136f21bfa65746e0881a9387a3cc5", "filename": "src/librustc/middle/free_region.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/35dca7fb7b7304cfa8da027d1be6eea7142d90d6/src%2Flibrustc%2Fmiddle%2Ffree_region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35dca7fb7b7304cfa8da027d1be6eea7142d90d6/src%2Flibrustc%2Fmiddle%2Ffree_region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffree_region.rs?ref=35dca7fb7b7304cfa8da027d1be6eea7142d90d6", "patch": "@@ -59,6 +59,7 @@ impl FreeRegionMap {\n                 ty::Predicate::Equate(..) |\n                 ty::Predicate::WellFormed(..) |\n                 ty::Predicate::ObjectSafe(..) |\n+                ty::Predicate::ClosureKind(..) |\n                 ty::Predicate::TypeOutlives(..) => {\n                     // No region bounds here\n                 }"}, {"sha": "3b5bdd734b4ce244e48fe1b0fd72f37fea0e8455", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/35dca7fb7b7304cfa8da027d1be6eea7142d90d6/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35dca7fb7b7304cfa8da027d1be6eea7142d90d6/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=35dca7fb7b7304cfa8da027d1be6eea7142d90d6", "patch": "@@ -495,6 +495,21 @@ pub fn report_selection_error<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n                         err.emit();\n                     }\n \n+                    ty::Predicate::ClosureKind(closure_def_id, kind) => {\n+                        let found_kind = infcx.closure_kind(closure_def_id).unwrap();\n+                        let closure_span = infcx.tcx.map.span_if_local(closure_def_id).unwrap();\n+                        let mut err = struct_span_err!(\n+                            infcx.tcx.sess, closure_span, E0524,\n+                            \"expected a closure that implements the `{}` trait, but this closure \\\n+                             only implements `{}`\",\n+                            kind,\n+                            found_kind);\n+                        err.span_note(\n+                            obligation.cause.span,\n+                            &format!(\"the requirement to implement `{}` derives from here\", kind));\n+                        err.emit();\n+                    }\n+\n                     ty::Predicate::WellFormed(ty) => {\n                         // WF predicates cannot themselves make\n                         // errors. They can only block due to"}, {"sha": "662adf98007684edfcbf365e0a8bd301b2857366", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/35dca7fb7b7304cfa8da027d1be6eea7142d90d6/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35dca7fb7b7304cfa8da027d1be6eea7142d90d6/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=35dca7fb7b7304cfa8da027d1be6eea7142d90d6", "patch": "@@ -652,6 +652,21 @@ fn process_predicate1<'a,'tcx>(selcx: &mut SelectionContext<'a,'tcx>,\n             }\n         }\n \n+        ty::Predicate::ClosureKind(closure_def_id, kind) => {\n+            match selcx.infcx().closure_kind(closure_def_id) {\n+                Some(closure_kind) => {\n+                    if closure_kind.extends(kind) {\n+                        Ok(Some(vec![]))\n+                    } else {\n+                        Err(CodeSelectionError(Unimplemented))\n+                    }\n+                }\n+                None => {\n+                    Ok(None)\n+                }\n+            }\n+        }\n+\n         ty::Predicate::WellFormed(ty) => {\n             match ty::wf::obligations(selcx.infcx(), obligation.cause.body_id,\n                                       ty, obligation.cause.span) {"}, {"sha": "c870d609814bec088fe9425616058bd8e5241ed7", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35dca7fb7b7304cfa8da027d1be6eea7142d90d6/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35dca7fb7b7304cfa8da027d1be6eea7142d90d6/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=35dca7fb7b7304cfa8da027d1be6eea7142d90d6", "patch": "@@ -165,6 +165,7 @@ pub fn supertraits_reference_self<'tcx>(tcx: &TyCtxt<'tcx>,\n                 ty::Predicate::ObjectSafe(..) |\n                 ty::Predicate::TypeOutlives(..) |\n                 ty::Predicate::RegionOutlives(..) |\n+                ty::Predicate::ClosureKind(..) |\n                 ty::Predicate::Equate(..) => {\n                     false\n                 }\n@@ -207,6 +208,7 @@ fn generics_require_sized_self<'tcx>(tcx: &TyCtxt<'tcx>,\n                 ty::Predicate::RegionOutlives(..) |\n                 ty::Predicate::WellFormed(..) |\n                 ty::Predicate::ObjectSafe(..) |\n+                ty::Predicate::ClosureKind(..) |\n                 ty::Predicate::TypeOutlives(..) => {\n                     false\n                 }"}, {"sha": "d7528fc3130c9938bc85923d0b0231223b6d3ee8", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 31, "deletions": 74, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/35dca7fb7b7304cfa8da027d1be6eea7142d90d6/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35dca7fb7b7304cfa8da027d1be6eea7142d90d6/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=35dca7fb7b7304cfa8da027d1be6eea7142d90d6", "patch": "@@ -198,9 +198,10 @@ enum SelectionCandidate<'tcx> {\n     /// we found an applicable bound in the trait definition.\n     ProjectionCandidate,\n \n-    /// Implementation of a `Fn`-family trait by one of the\n-    /// anonymous types generated for a `||` expression.\n-    ClosureCandidate(/* closure */ DefId, &'tcx ty::ClosureSubsts<'tcx>),\n+    /// Implementation of a `Fn`-family trait by one of the anonymous types\n+    /// generated for a `||` expression. The ty::ClosureKind informs the\n+    /// confirmation step what ClosureKind obligation to emit.\n+    ClosureCandidate(/* closure */ DefId, &'tcx ty::ClosureSubsts<'tcx>, ty::ClosureKind),\n \n     /// Implementation of a `Fn`-family trait by one of the anonymous\n     /// types generated for a fn pointer type (e.g., `fn(int)->int`)\n@@ -321,75 +322,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         let stack = self.push_stack(TraitObligationStackList::empty(), obligation);\n         match self.candidate_from_obligation(&stack)? {\n-            None => {\n-                self.consider_unification_despite_ambiguity(obligation);\n-                Ok(None)\n-            }\n+            None => Ok(None),\n             Some(candidate) => Ok(Some(self.confirm_candidate(obligation, candidate)?)),\n         }\n     }\n \n-    /// In the particular case of unboxed closure obligations, we can\n-    /// sometimes do some amount of unification for the\n-    /// argument/return types even though we can't yet fully match obligation.\n-    /// The particular case we are interesting in is an obligation of the form:\n-    ///\n-    ///    C : FnFoo<A>\n-    ///\n-    /// where `C` is an unboxed closure type and `FnFoo` is one of the\n-    /// `Fn` traits. Because we know that users cannot write impls for closure types\n-    /// themselves, the only way that `C : FnFoo` can fail to match is under two\n-    /// conditions:\n-    ///\n-    /// 1. The closure kind for `C` is not yet known, because inference isn't complete.\n-    /// 2. The closure kind for `C` *is* known, but doesn't match what is needed.\n-    ///    For example, `C` may be a `FnOnce` closure, but a `Fn` closure is needed.\n-    ///\n-    /// In either case, we always know what argument types are\n-    /// expected by `C`, no matter what kind of `Fn` trait it\n-    /// eventually matches. So we can go ahead and unify the argument\n-    /// types, even though the end result is ambiguous.\n-    ///\n-    /// Note that this is safe *even if* the trait would never be\n-    /// matched (case 2 above). After all, in that case, an error will\n-    /// result, so it kind of doesn't matter what we do --- unifying\n-    /// the argument types can only be helpful to the user, because\n-    /// once they patch up the kind of closure that is expected, the\n-    /// argment types won't really change.\n-    fn consider_unification_despite_ambiguity(&mut self, obligation: &TraitObligation<'tcx>) {\n-        // Is this a `C : FnFoo(...)` trait reference for some trait binding `FnFoo`?\n-        match self.tcx().lang_items.fn_trait_kind(obligation.predicate.0.def_id()) {\n-            Some(_) => { }\n-            None => { return; }\n-        }\n-\n-        // Is the self-type a closure type? We ignore bindings here\n-        // because if it is a closure type, it must be a closure type from\n-        // within this current fn, and hence none of the higher-ranked\n-        // lifetimes can appear inside the self-type.\n-        let self_ty = self.infcx.shallow_resolve(*obligation.self_ty().skip_binder());\n-        let (closure_def_id, substs) = match self_ty.sty {\n-            ty::TyClosure(id, ref substs) => (id, substs),\n-            _ => { return; }\n-        };\n-        assert!(!substs.has_escaping_regions());\n-\n-        // It is OK to call the unnormalized variant here - this is only\n-        // reached for TyClosure: Fn inputs where the closure kind is\n-        // still unknown, which should only occur in typeck where the\n-        // closure type is already normalized.\n-        let closure_trait_ref = self.closure_trait_ref_unnormalized(obligation,\n-                                                                    closure_def_id,\n-                                                                    substs);\n-\n-        match self.confirm_poly_trait_refs(obligation.cause.clone(),\n-                                           obligation.predicate.to_poly_trait_ref(),\n-                                           closure_trait_ref) {\n-            Ok(()) => { }\n-            Err(_) => { /* Silently ignore errors. */ }\n-        }\n-    }\n-\n     ///////////////////////////////////////////////////////////////////////////\n     // EVALUATION\n     //\n@@ -532,6 +469,21 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     }\n                 }\n             }\n+\n+            ty::Predicate::ClosureKind(closure_def_id, kind) => {\n+                match self.infcx.closure_kind(closure_def_id) {\n+                    Some(closure_kind) => {\n+                        if closure_kind.extends(kind) {\n+                            EvaluatedToOk\n+                        } else {\n+                            EvaluatedToErr\n+                        }\n+                    }\n+                    None => {\n+                        EvaluatedToAmbig\n+                    }\n+                }\n+            }\n         }\n     }\n \n@@ -1282,12 +1234,12 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             Some(closure_kind) => {\n                 debug!(\"assemble_unboxed_candidates: closure_kind = {:?}\", closure_kind);\n                 if closure_kind.extends(kind) {\n-                    candidates.vec.push(ClosureCandidate(closure_def_id, substs));\n+                    candidates.vec.push(ClosureCandidate(closure_def_id, substs, kind));\n                 }\n             }\n             None => {\n                 debug!(\"assemble_unboxed_candidates: closure_kind not yet known\");\n-                candidates.ambiguous = true;\n+                candidates.vec.push(ClosureCandidate(closure_def_id, substs, kind));\n             }\n         }\n \n@@ -2071,9 +2023,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 Ok(VtableImpl(vtable_impl))\n             }\n \n-            ClosureCandidate(closure_def_id, substs) => {\n+            ClosureCandidate(closure_def_id, substs, kind) => {\n                 let vtable_closure =\n-                    self.confirm_closure_candidate(obligation, closure_def_id, substs)?;\n+                    self.confirm_closure_candidate(obligation, closure_def_id, substs, kind)?;\n                 Ok(VtableClosure(vtable_closure))\n             }\n \n@@ -2430,7 +2382,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     fn confirm_closure_candidate(&mut self,\n                                  obligation: &TraitObligation<'tcx>,\n                                  closure_def_id: DefId,\n-                                 substs: &ty::ClosureSubsts<'tcx>)\n+                                 substs: &ty::ClosureSubsts<'tcx>,\n+                                 kind: ty::ClosureKind)\n                                  -> Result<VtableClosureData<'tcx, PredicateObligation<'tcx>>,\n                                            SelectionError<'tcx>>\n     {\n@@ -2441,7 +2394,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         let Normalized {\n             value: trait_ref,\n-            obligations\n+            mut obligations\n         } = self.closure_trait_ref(obligation, closure_def_id, substs);\n \n         debug!(\"confirm_closure_candidate(closure_def_id={:?}, trait_ref={:?}, obligations={:?})\",\n@@ -2453,6 +2406,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                                      obligation.predicate.to_poly_trait_ref(),\n                                      trait_ref)?;\n \n+        obligations.push(Obligation::new(\n+                obligation.cause.clone(),\n+                ty::Predicate::ClosureKind(closure_def_id, kind)));\n+\n         Ok(VtableClosureData {\n             closure_def_id: closure_def_id,\n             substs: substs.clone(),"}, {"sha": "90def00be0730257168e79d6c312e5c14ca4d064", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/35dca7fb7b7304cfa8da027d1be6eea7142d90d6/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35dca7fb7b7304cfa8da027d1be6eea7142d90d6/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=35dca7fb7b7304cfa8da027d1be6eea7142d90d6", "patch": "@@ -60,6 +60,9 @@ impl<'a,'tcx> PredicateSet<'a,'tcx> {\n \n             ty::Predicate::ObjectSafe(data) =>\n                 ty::Predicate::ObjectSafe(data),\n+\n+            ty::Predicate::ClosureKind(closure_def_id, kind) =>\n+                ty::Predicate::ClosureKind(closure_def_id, kind)\n         };\n         self.set.insert(normalized_pred)\n     }\n@@ -156,6 +159,9 @@ impl<'cx, 'tcx> Elaborator<'cx, 'tcx> {\n             ty::Predicate::Projection(..) => {\n                 // Nothing to elaborate in a projection predicate.\n             }\n+            ty::Predicate::ClosureKind(..) => {\n+                // Nothing to elaborate when waiting for a closure's kind to be inferred.\n+            }\n             ty::Predicate::RegionOutlives(..) |\n             ty::Predicate::TypeOutlives(..) => {\n                 // Currently, we do not \"elaborate\" predicates like"}, {"sha": "eaba5d2a8602c9d3e79ace7a034a33c3ccdc4ce6", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/35dca7fb7b7304cfa8da027d1be6eea7142d90d6/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35dca7fb7b7304cfa8da027d1be6eea7142d90d6/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=35dca7fb7b7304cfa8da027d1be6eea7142d90d6", "patch": "@@ -832,6 +832,11 @@ pub enum Predicate<'tcx> {\n \n     /// trait must be object-safe\n     ObjectSafe(DefId),\n+\n+    /// No direct syntax. May be thought of as `where T : FnFoo<...>` for some 'TypeSpace'\n+    /// substitutions `...` and T being a closure type.  Satisfied (or refuted) once we know the\n+    /// closure's kind.\n+    ClosureKind(DefId, ClosureKind),\n }\n \n impl<'tcx> Predicate<'tcx> {\n@@ -921,6 +926,8 @@ impl<'tcx> Predicate<'tcx> {\n                 Predicate::WellFormed(data.subst(tcx, substs)),\n             Predicate::ObjectSafe(trait_def_id) =>\n                 Predicate::ObjectSafe(trait_def_id),\n+            Predicate::ClosureKind(closure_def_id, kind) =>\n+                Predicate::ClosureKind(closure_def_id, kind),\n         }\n     }\n }\n@@ -1108,6 +1115,9 @@ impl<'tcx> Predicate<'tcx> {\n             ty::Predicate::ObjectSafe(_trait_def_id) => {\n                 vec![]\n             }\n+            ty::Predicate::ClosureKind(_closure_def_id, _kind) => {\n+                vec![]\n+            }\n         };\n \n         // The only reason to collect into a vector here is that I was\n@@ -1128,6 +1138,7 @@ impl<'tcx> Predicate<'tcx> {\n             Predicate::RegionOutlives(..) |\n             Predicate::WellFormed(..) |\n             Predicate::ObjectSafe(..) |\n+            Predicate::ClosureKind(..) |\n             Predicate::TypeOutlives(..) => {\n                 None\n             }\n@@ -1783,7 +1794,7 @@ pub struct ItemSubsts<'tcx> {\n     pub substs: Substs<'tcx>,\n }\n \n-#[derive(Clone, Copy, PartialOrd, Ord, PartialEq, Eq, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Copy, PartialOrd, Ord, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n pub enum ClosureKind {\n     // Warning: Ordering is significant here! The ordering is chosen\n     // because the trait Fn is a subtrait of FnMut and so in turn, and"}, {"sha": "4d64dd8307157c4b778093d0d5344f7145d36b16", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/35dca7fb7b7304cfa8da027d1be6eea7142d90d6/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35dca7fb7b7304cfa8da027d1be6eea7142d90d6/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=35dca7fb7b7304cfa8da027d1be6eea7142d90d6", "patch": "@@ -644,6 +644,8 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Predicate<'tcx> {\n                 ty::Predicate::Projection(binder.fold_with(folder)),\n             ty::Predicate::WellFormed(data) =>\n                 ty::Predicate::WellFormed(data.fold_with(folder)),\n+            ty::Predicate::ClosureKind(closure_def_id, kind) =>\n+                ty::Predicate::ClosureKind(closure_def_id, kind),\n             ty::Predicate::ObjectSafe(trait_def_id) =>\n                 ty::Predicate::ObjectSafe(trait_def_id),\n         }\n@@ -657,6 +659,7 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Predicate<'tcx> {\n             ty::Predicate::TypeOutlives(ref binder) => binder.visit_with(visitor),\n             ty::Predicate::Projection(ref binder) => binder.visit_with(visitor),\n             ty::Predicate::WellFormed(data) => data.visit_with(visitor),\n+            ty::Predicate::ClosureKind(_closure_def_id, _kind) => false,\n             ty::Predicate::ObjectSafe(_trait_def_id) => false,\n         }\n     }"}, {"sha": "eb1630db980b591b018bd4ee554d2b752f2fe52a", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/35dca7fb7b7304cfa8da027d1be6eea7142d90d6/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35dca7fb7b7304cfa8da027d1be6eea7142d90d6/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=35dca7fb7b7304cfa8da027d1be6eea7142d90d6", "patch": "@@ -301,6 +301,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                     ty::Predicate::Equate(..) |\n                     ty::Predicate::WellFormed(..) |\n                     ty::Predicate::ObjectSafe(..) |\n+                    ty::Predicate::ClosureKind(..) |\n                     ty::Predicate::RegionOutlives(..) => {\n                         None\n                     }"}, {"sha": "f93332e07737d52bd787f9e9062a39d77b9c8fe8", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/35dca7fb7b7304cfa8da027d1be6eea7142d90d6/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35dca7fb7b7304cfa8da027d1be6eea7142d90d6/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=35dca7fb7b7304cfa8da027d1be6eea7142d90d6", "patch": "@@ -92,6 +92,8 @@ pub fn predicate_obligations<'a,'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n         }\n         ty::Predicate::ObjectSafe(_) => {\n         }\n+        ty::Predicate::ClosureKind(..) => {\n+        }\n     }\n \n     wf.normalize()\n@@ -155,6 +157,7 @@ pub fn implied_bounds<'a,'tcx>(\n                     ty::Predicate::Trait(..) |\n                     ty::Predicate::Equate(..) |\n                     ty::Predicate::Projection(..) |\n+                    ty::Predicate::ClosureKind(..) |\n                     ty::Predicate::ObjectSafe(..) =>\n                         vec![],\n "}, {"sha": "9b590ec8aa6d6b86defa79ba0d1195ea82633429", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/35dca7fb7b7304cfa8da027d1be6eea7142d90d6/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35dca7fb7b7304cfa8da027d1be6eea7142d90d6/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=35dca7fb7b7304cfa8da027d1be6eea7142d90d6", "patch": "@@ -467,6 +467,9 @@ impl<'tcx> fmt::Debug for ty::Predicate<'tcx> {\n             ty::Predicate::ObjectSafe(trait_def_id) => {\n                 write!(f, \"ObjectSafe({:?})\", trait_def_id)\n             }\n+            ty::Predicate::ClosureKind(closure_def_id, kind) => {\n+                write!(f, \"ClosureKind({:?}, {:?})\", closure_def_id, kind)\n+            }\n         }\n     }\n }\n@@ -1039,6 +1042,16 @@ impl<'tcx> fmt::Display for ty::ProjectionTy<'tcx> {\n     }\n }\n \n+impl fmt::Display for ty::ClosureKind {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        match *self {\n+            ty::ClosureKind::Fn => write!(f, \"Fn\"),\n+            ty::ClosureKind::FnMut => write!(f, \"FnMut\"),\n+            ty::ClosureKind::FnOnce => write!(f, \"FnOnce\"),\n+        }\n+    }\n+}\n+\n impl<'tcx> fmt::Display for ty::Predicate<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n@@ -1052,6 +1065,11 @@ impl<'tcx> fmt::Display for ty::Predicate<'tcx> {\n                 ty::tls::with(|tcx| {\n                     write!(f, \"the trait `{}` is object-safe\", tcx.item_path_str(trait_def_id))\n                 }),\n+            ty::Predicate::ClosureKind(closure_def_id, kind) =>\n+                ty::tls::with(|tcx| {\n+                    write!(f, \"the closure `{}` implements the trait `{}`\",\n+                           tcx.item_path_str(closure_def_id), kind)\n+                }),\n         }\n     }\n }"}, {"sha": "9f674a20f92e3c75a13eb155dfee811160b677af", "filename": "src/librustc_metadata/tydecode.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/35dca7fb7b7304cfa8da027d1be6eea7142d90d6/src%2Flibrustc_metadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35dca7fb7b7304cfa8da027d1be6eea7142d90d6/src%2Flibrustc_metadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Ftydecode.rs?ref=35dca7fb7b7304cfa8da027d1be6eea7142d90d6", "patch": "@@ -553,6 +553,18 @@ impl<'a,'tcx> TyDecoder<'a,'tcx> {\n                 assert_eq!(self.next(), '|');\n                 ty::Predicate::ObjectSafe(def_id)\n             }\n+            'c' => {\n+                let def_id = self.parse_def();\n+                assert_eq!(self.next(), '|');\n+                let kind = match self.next() {\n+                    'f' => ty::ClosureKind::Fn,\n+                    'm' => ty::ClosureKind::FnMut,\n+                    'o' => ty::ClosureKind::FnOnce,\n+                    c => bug!(\"Encountered invalid character in metadata: {}\", c)\n+                };\n+                assert_eq!(self.next(), '|');\n+                ty::Predicate::ClosureKind(def_id, kind)\n+            }\n             c => bug!(\"Encountered invalid character in metadata: {}\", c)\n         }\n     }"}, {"sha": "61d055d4d5173c9c476fa7a0f1ff6d105e72ecfc", "filename": "src/librustc_metadata/tyencode.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/35dca7fb7b7304cfa8da027d1be6eea7142d90d6/src%2Flibrustc_metadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35dca7fb7b7304cfa8da027d1be6eea7142d90d6/src%2Flibrustc_metadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Ftyencode.rs?ref=35dca7fb7b7304cfa8da027d1be6eea7142d90d6", "patch": "@@ -479,6 +479,14 @@ pub fn enc_predicate<'a, 'tcx>(w: &mut Cursor<Vec<u8>>,\n         ty::Predicate::ObjectSafe(trait_def_id) => {\n             write!(w, \"O{}|\", (cx.ds)(cx.tcx, trait_def_id));\n         }\n+        ty::Predicate::ClosureKind(closure_def_id, kind) => {\n+            let kind_char = match kind {\n+                ty::ClosureKind::Fn => 'f',\n+                ty::ClosureKind::FnMut => 'm',\n+                ty::ClosureKind::FnOnce => 'o',\n+            };\n+            write!(w, \"c{}|{}|\", (cx.ds)(cx.tcx, closure_def_id), kind_char);\n+        }\n     }\n }\n "}, {"sha": "4ac7e3323efc8f3949e44c41969d98a3edd75c47", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/35dca7fb7b7304cfa8da027d1be6eea7142d90d6/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35dca7fb7b7304cfa8da027d1be6eea7142d90d6/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=35dca7fb7b7304cfa8da027d1be6eea7142d90d6", "patch": "@@ -179,6 +179,16 @@ fn deduce_expectations_from_obligations<'a,'tcx>(\n                 ty::Predicate::TypeOutlives(..) => None,\n                 ty::Predicate::WellFormed(..) => None,\n                 ty::Predicate::ObjectSafe(..) => None,\n+\n+                // NB: This predicate is created by breaking down a\n+                // `ClosureType: FnFoo()` predicate, where\n+                // `ClosureType` represents some `TyClosure`. It can't\n+                // possibly be referring to the current closure,\n+                // because we haven't produced the `TyClosure` for\n+                // this closure yet; this is exactly why the other\n+                // code is looking for a self type of a unresolved\n+                // inference variable.\n+                ty::Predicate::ClosureKind(..) => None,\n             };\n             opt_trait_ref\n                 .and_then(|trait_ref| self_type_matches_expected_vid(fcx, trait_ref, expected_vid))"}, {"sha": "2defbf0d33e0a1faa2f0015ce25bd23618d9e321", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/35dca7fb7b7304cfa8da027d1be6eea7142d90d6/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35dca7fb7b7304cfa8da027d1be6eea7142d90d6/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=35dca7fb7b7304cfa8da027d1be6eea7142d90d6", "patch": "@@ -491,6 +491,7 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n                     ty::Predicate::RegionOutlives(..) |\n                     ty::Predicate::WellFormed(..) |\n                     ty::Predicate::ObjectSafe(..) |\n+                    ty::Predicate::ClosureKind(..) |\n                     ty::Predicate::TypeOutlives(..) => {\n                         None\n                     }"}, {"sha": "2e9c8676dc7500b459cd27583377f2289af24a83", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/35dca7fb7b7304cfa8da027d1be6eea7142d90d6/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35dca7fb7b7304cfa8da027d1be6eea7142d90d6/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=35dca7fb7b7304cfa8da027d1be6eea7142d90d6", "patch": "@@ -449,6 +449,7 @@ impl<'tcx> GetTypeParameterBounds<'tcx> for ty::GenericPredicates<'tcx> {\n                     ty::Predicate::RegionOutlives(..) |\n                     ty::Predicate::WellFormed(..) |\n                     ty::Predicate::ObjectSafe(..) |\n+                    ty::Predicate::ClosureKind(..) |\n                     ty::Predicate::Projection(..) => {\n                         false\n                     }"}, {"sha": "e2189e003ae9d9fabc2bc8418dc2d6638ee985d7", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/35dca7fb7b7304cfa8da027d1be6eea7142d90d6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35dca7fb7b7304cfa8da027d1be6eea7142d90d6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=35dca7fb7b7304cfa8da027d1be6eea7142d90d6", "patch": "@@ -849,6 +849,7 @@ impl<'a> Clean<WherePredicate> for ty::Predicate<'a> {\n             Predicate::Projection(ref pred) => pred.clean(cx),\n             Predicate::WellFormed(_) => panic!(\"not user writable\"),\n             Predicate::ObjectSafe(_) => panic!(\"not user writable\"),\n+            Predicate::ClosureKind(..) => panic!(\"not user writable\"),\n         }\n     }\n }"}, {"sha": "6792414c367906c9df2493931ad96f33164b16c8", "filename": "src/test/compile-fail/closure-wrong-kind.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/35dca7fb7b7304cfa8da027d1be6eea7142d90d6/src%2Ftest%2Fcompile-fail%2Fclosure-wrong-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35dca7fb7b7304cfa8da027d1be6eea7142d90d6/src%2Ftest%2Fcompile-fail%2Fclosure-wrong-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-wrong-kind.rs?ref=35dca7fb7b7304cfa8da027d1be6eea7142d90d6", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+/* Any copyright is dedicated to the Public Domain.\n+ * http://creativecommons.org/publicdomain/zero/1.0/ */\n+\n+struct X;\n+fn foo<T>(_: T) {}\n+fn bar<T: Fn(u32)>(_: T) {}\n+\n+fn main() {\n+    let x = X;\n+    let closure = |_| foo(x);  //~ ERROR E0524\n+    bar(closure);\n+}"}]}