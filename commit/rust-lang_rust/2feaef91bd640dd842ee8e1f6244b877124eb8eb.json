{"sha": "2feaef91bd640dd842ee8e1f6244b877124eb8eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmZWFlZjkxYmQ2NDBkZDg0MmVlOGUxZjYyNDRiODc3MTI0ZWI4ZWI=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-03-19T22:49:26Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-03-30T10:39:14Z"}, "message": "Read new config on the server side", "tree": {"sha": "46f4b34a85d8fb856512454479344887397bb5a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46f4b34a85d8fb856512454479344887397bb5a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2feaef91bd640dd842ee8e1f6244b877124eb8eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2feaef91bd640dd842ee8e1f6244b877124eb8eb", "html_url": "https://github.com/rust-lang/rust/commit/2feaef91bd640dd842ee8e1f6244b877124eb8eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2feaef91bd640dd842ee8e1f6244b877124eb8eb/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9dd4427333d410bebf8e0923d5907b2a31efb50", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9dd4427333d410bebf8e0923d5907b2a31efb50", "html_url": "https://github.com/rust-lang/rust/commit/a9dd4427333d410bebf8e0923d5907b2a31efb50"}], "stats": {"total": 27, "additions": 18, "deletions": 9}, "files": [{"sha": "a48368e3027252068c0552263d1c01ae95bc549e", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2feaef91bd640dd842ee8e1f6244b877124eb8eb/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2feaef91bd640dd842ee8e1f6244b877124eb8eb/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=2feaef91bd640dd842ee8e1f6244b877124eb8eb", "patch": "@@ -243,15 +243,17 @@ pub fn main_loop(\n                     break;\n                 };\n             }\n-            loop_turn(\n+            if let Some(new_server_config) = loop_turn(\n                 &pool,\n                 &task_sender,\n                 &libdata_sender,\n                 &connection,\n                 &mut world_state,\n                 &mut loop_state,\n                 event,\n-            )?;\n+            )? {\n+                dbg!(new_server_config);\n+            }\n         }\n     }\n     world_state.analysis_host.request_cancellation();\n@@ -361,7 +363,7 @@ fn loop_turn(\n     world_state: &mut WorldState,\n     loop_state: &mut LoopState,\n     event: Event,\n-) -> Result<()> {\n+) -> Result<Option<ServerConfig>> {\n     let loop_start = Instant::now();\n \n     // NOTE: don't count blocking select! call as a loop-turn time\n@@ -372,6 +374,8 @@ fn loop_turn(\n         log::info!(\"queued count = {}\", queue_count);\n     }\n \n+    let mut new_server_config = None;\n+\n     match event {\n         Event::Task(task) => {\n             on_task(task, &connection.sender, &mut loop_state.pending_requests, world_state);\n@@ -401,15 +405,20 @@ fn loop_turn(\n                 on_notification(&connection.sender, world_state, loop_state, not)?;\n             }\n             Message::Response(resp) => {\n-                if Some(&resp.id) == loop_state.configuration_request_id.as_ref() {\n-                    loop_state.configuration_request_id.take();\n-                    eprintln!(\"!!!!!!!!!!!!!!1\");\n-                    dbg!(&resp);\n-                }\n                 let removed = loop_state.pending_responses.remove(&resp.id);\n                 if !removed {\n                     log::error!(\"unexpected response: {:?}\", resp)\n                 }\n+                if Some(&resp.id) == loop_state.configuration_request_id.as_ref() {\n+                    loop_state.configuration_request_id.take();\n+                    let new_config =\n+                        serde_json::from_value::<Vec<ServerConfig>>(resp.result.unwrap())\n+                            .unwrap()\n+                            .first()\n+                            .unwrap()\n+                            .to_owned();\n+                    new_server_config = Some(new_config);\n+                }\n             }\n         },\n     };\n@@ -479,7 +488,7 @@ fn loop_turn(\n         }\n     }\n \n-    Ok(())\n+    Ok(new_server_config)\n }\n \n fn on_task("}]}