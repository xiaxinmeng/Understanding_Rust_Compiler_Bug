{"sha": "c325553a30ec0de8e156c28533e55ddee71013f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzMjU1NTNhMzBlYzBkZThlMTU2YzI4NTMzZTU1ZGRlZTcxMDEzZjA=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-10-18T04:01:51Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-10-21T00:32:55Z"}, "message": "Convert `InternedString`s to `Symbols` in `UnsafetyViolation`.", "tree": {"sha": "3457f067d6be9127563f8c5aab8383e1fe545da9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3457f067d6be9127563f8c5aab8383e1fe545da9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c325553a30ec0de8e156c28533e55ddee71013f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c325553a30ec0de8e156c28533e55ddee71013f0", "html_url": "https://github.com/rust-lang/rust/commit/c325553a30ec0de8e156c28533e55ddee71013f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c325553a30ec0de8e156c28533e55ddee71013f0/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02edd14cde7d07a303ed2e7d2b233890f02033c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/02edd14cde7d07a303ed2e7d2b233890f02033c1", "html_url": "https://github.com/rust-lang/rust/commit/02edd14cde7d07a303ed2e7d2b233890f02033c1"}], "stats": {"total": 33, "additions": 16, "deletions": 17}, "files": [{"sha": "b0830fb72eb07193acc3a7814671fe0a8fad2280", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c325553a30ec0de8e156c28533e55ddee71013f0/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c325553a30ec0de8e156c28533e55ddee71013f0/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=c325553a30ec0de8e156c28533e55ddee71013f0", "patch": "@@ -37,7 +37,7 @@ use std::slice;\n use std::vec::IntoIter;\n use std::{iter, mem, option, u32};\n use syntax::ast::Name;\n-use syntax::symbol::{InternedString, Symbol};\n+use syntax::symbol::Symbol;\n use syntax_pos::{Span, DUMMY_SP};\n \n pub use crate::mir::interpret::AssertMessage;\n@@ -2736,8 +2736,8 @@ pub enum UnsafetyViolationKind {\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, HashStable)]\n pub struct UnsafetyViolation {\n     pub source_info: SourceInfo,\n-    pub description: InternedString,\n-    pub details: InternedString,\n+    pub description: Symbol,\n+    pub details: Symbol,\n     pub kind: UnsafetyViolationKind,\n }\n "}, {"sha": "3ff36e01275b9b461a3bf3d91664eeed2512e4ef", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c325553a30ec0de8e156c28533e55ddee71013f0/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c325553a30ec0de8e156c28533e55ddee71013f0/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=c325553a30ec0de8e156c28533e55ddee71013f0", "patch": "@@ -12,7 +12,7 @@ use rustc::lint::builtin::{SAFE_EXTERN_STATICS, SAFE_PACKED_BORROWS, UNUSED_UNSA\n use rustc::mir::*;\n use rustc::mir::visit::{PlaceContext, Visitor, MutatingUseContext};\n \n-use syntax::symbol::{InternedString, sym};\n+use syntax::symbol::{Symbol, sym};\n \n use std::ops::Bound;\n \n@@ -167,9 +167,8 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                     (CastTy::FnPtr, CastTy::Int(_)) => {\n                         self.register_violations(&[UnsafetyViolation {\n                             source_info: self.source_info,\n-                            description: InternedString::intern(\"cast of pointer to int\"),\n-                            details: InternedString::intern(\n-                                \"casting pointers to integers in constants\"),\n+                            description: Symbol::intern(\"cast of pointer to int\"),\n+                            details: Symbol::intern(\"casting pointers to integers in constants\"),\n                             kind: UnsafetyViolationKind::General,\n                         }], &[]);\n                     },\n@@ -185,8 +184,8 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                 if let ty::RawPtr(_) | ty::FnPtr(..) = lhs.ty(self.body, self.tcx).kind {\n                     self.register_violations(&[UnsafetyViolation {\n                         source_info: self.source_info,\n-                        description: InternedString::intern(\"pointer operation\"),\n-                        details: InternedString::intern(\"operations on pointers in constants\"),\n+                        description: Symbol::intern(\"pointer operation\"),\n+                        details: Symbol::intern(\"operations on pointers in constants\"),\n                         kind: UnsafetyViolationKind::General,\n                     }], &[]);\n                 }\n@@ -219,8 +218,8 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                         self.source_scope_local_data[source_info.scope].lint_root;\n                     self.register_violations(&[UnsafetyViolation {\n                         source_info,\n-                        description: InternedString::intern(\"use of extern static\"),\n-                        details: InternedString::intern(\n+                        description: Symbol::intern(\"use of extern static\"),\n+                        details: Symbol::intern(\n                             \"extern statics are not controlled by the Rust type system: \\\n                             invalid data, aliasing violations or data races will cause \\\n                             undefined behavior\"),\n@@ -240,8 +239,8 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                         self.source_scope_local_data[source_info.scope].lint_root;\n                     self.register_violations(&[UnsafetyViolation {\n                         source_info,\n-                        description: InternedString::intern(\"borrow of packed field\"),\n-                        details: InternedString::intern(\n+                        description: Symbol::intern(\"borrow of packed field\"),\n+                        details: Symbol::intern(\n                             \"fields of packed structs might be misaligned: dereferencing a \\\n                             misaligned pointer or even just creating a misaligned reference \\\n                             is undefined behavior\"),\n@@ -334,8 +333,8 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n         let source_info = self.source_info;\n         self.register_violations(&[UnsafetyViolation {\n             source_info,\n-            description: InternedString::intern(description),\n-            details: InternedString::intern(details),\n+            description: Symbol::intern(description),\n+            details: Symbol::intern(details),\n             kind,\n         }], &[]);\n     }\n@@ -438,8 +437,8 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n                                 let source_info = self.source_info;\n                                 self.register_violations(&[UnsafetyViolation {\n                                     source_info,\n-                                    description: InternedString::intern(description),\n-                                    details: InternedString::intern(details),\n+                                    description: Symbol::intern(description),\n+                                    details: Symbol::intern(details),\n                                     kind: UnsafetyViolationKind::GeneralAndConstFn,\n                                 }], &[]);\n                             }"}]}