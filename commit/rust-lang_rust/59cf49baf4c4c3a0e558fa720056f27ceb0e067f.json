{"sha": "59cf49baf4c4c3a0e558fa720056f27ceb0e067f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5Y2Y0OWJhZjRjNGMzYTBlNTU4ZmE3MjAwNTZmMjdjZWIwZTA2N2Y=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-17T05:28:09Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-17T05:28:09Z"}, "message": "Create a pointer-only version of eval_operand. Fix pointer offset.", "tree": {"sha": "ec38000b6531692234169ff72c27ad9d53475032", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec38000b6531692234169ff72c27ad9d53475032"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59cf49baf4c4c3a0e558fa720056f27ceb0e067f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59cf49baf4c4c3a0e558fa720056f27ceb0e067f", "html_url": "https://github.com/rust-lang/rust/commit/59cf49baf4c4c3a0e558fa720056f27ceb0e067f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59cf49baf4c4c3a0e558fa720056f27ceb0e067f/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ab619c5c301e4357e92a819461705b8ffcb1225", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ab619c5c301e4357e92a819461705b8ffcb1225", "html_url": "https://github.com/rust-lang/rust/commit/3ab619c5c301e4357e92a819461705b8ffcb1225"}], "stats": {"total": 42, "additions": 24, "deletions": 18}, "files": [{"sha": "1dadc96c4f56c524e64199fe1c83d340ee762c9d", "filename": "src/interpreter.rs", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/59cf49baf4c4c3a0e558fa720056f27ceb0e067f/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59cf49baf4c4c3a0e558fa720056f27ceb0e067f/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=59cf49baf4c4c3a0e558fa720056f27ceb0e067f", "patch": "@@ -142,7 +142,7 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n         for (arg_decl, arg_operand) in mir.arg_decls.iter().zip(args) {\n             let repr = self.ty_to_repr(arg_decl.ty);\n             let dest = self.memory.allocate(repr.size());\n-            let (src, _) = try!(self.eval_operand(arg_operand));\n+            let src = try!(self.eval_operand(arg_operand));\n             try!(self.memory.copy(src, dest, repr.size()));\n             locals.push(dest);\n         }\n@@ -171,15 +171,16 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n         // TODO(tsion): Deallocate local variables.\n     }\n \n-    fn eval_terminator(&mut self, terminator: &mir::Terminator<'tcx>) -> EvalResult<TerminatorTarget> {\n+    fn eval_terminator(&mut self, terminator: &mir::Terminator<'tcx>)\n+            -> EvalResult<TerminatorTarget> {\n         use rustc::mir::repr::Terminator::*;\n         let target = match *terminator {\n             Return => TerminatorTarget::Return,\n \n             Goto { target } => TerminatorTarget::Block(target),\n \n             If { ref cond, targets: (then_target, else_target) } => {\n-                let (cond_ptr, _) = try!(self.eval_operand(cond));\n+                let cond_ptr = try!(self.eval_operand(cond));\n                 let cond_val = try!(self.memory.read_bool(cond_ptr));\n                 TerminatorTarget::Block(if cond_val { then_target } else { else_target })\n             }\n@@ -280,8 +281,9 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n         match *dest_repr {\n             Repr::Product { ref fields, .. } => {\n                 for (field, operand) in fields.iter().zip(operands) {\n-                    let (src, _) = try!(self.eval_operand(operand));\n-                    try!(self.memory.copy(src, dest.offset(field.offset), field.repr.size()));\n+                    let src = try!(self.eval_operand(operand));\n+                    let field_dest = dest.offset(field.offset as isize);\n+                    try!(self.memory.copy(src, field_dest, field.repr.size()));\n                 }\n             }\n             _ => panic!(\"expected Repr::Product target\"),\n@@ -298,20 +300,20 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n         use rustc::mir::repr::Rvalue::*;\n         match *rvalue {\n             Use(ref operand) => {\n-                let (src, _) = try!(self.eval_operand(operand));\n+                let src = try!(self.eval_operand(operand));\n                 self.memory.copy(src, dest, dest_repr.size())\n             }\n \n             BinaryOp(bin_op, ref left, ref right) => {\n-                let (left_ptr, left_repr) = try!(self.eval_operand(left));\n-                let (right_ptr, right_repr) = try!(self.eval_operand(right));\n+                let (left_ptr, left_repr) = try!(self.eval_operand_and_repr(left));\n+                let (right_ptr, right_repr) = try!(self.eval_operand_and_repr(right));\n                 let left_val = try!(self.memory.read_primval(left_ptr, &left_repr));\n                 let right_val = try!(self.memory.read_primval(right_ptr, &right_repr));\n                 self.memory.write_primval(dest, primval::binary_op(bin_op, left_val, right_val))\n             }\n \n             UnaryOp(un_op, ref operand) => {\n-                let (ptr, repr) = try!(self.eval_operand(operand));\n+                let (ptr, repr) = try!(self.eval_operand_and_repr(operand));\n                 let val = try!(self.memory.read_primval(ptr, &repr));\n                 self.memory.write_primval(dest, primval::unary_op(un_op, val))\n             }\n@@ -331,7 +333,7 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n                                     try!(self.memory.write_primval(dest, discr_val));\n                                 }\n                                 self.assign_to_product(\n-                                    dest.offset(discr.size()),\n+                                    dest.offset(discr.size() as isize),\n                                     &variants[variant_idx],\n                                     operands\n                                 )\n@@ -345,9 +347,10 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n                             assert_eq!(length, operands.len());\n                             let elem_size = elem.size();\n                             for (i, operand) in operands.iter().enumerate() {\n-                                let (src, _) = try!(self.eval_operand(operand));\n+                                let src = try!(self.eval_operand(operand));\n                                 let offset = i * elem_size;\n-                                try!(self.memory.copy(src, dest.offset(offset), elem_size));\n+                                let elem_dest = dest.offset(offset as isize);\n+                                try!(self.memory.copy(src, elem_dest, elem_size));\n                             }\n                             Ok(())\n                         }\n@@ -373,11 +376,14 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n         }\n     }\n \n-    fn eval_operand(&mut self, op: &mir::Operand<'tcx>) -> EvalResult<(Pointer, Repr)> {\n+    fn eval_operand(&mut self, op: &mir::Operand<'tcx>) -> EvalResult<Pointer> {\n+        self.eval_operand_and_repr(op).map(|(p, _)| p)\n+    }\n+\n+    fn eval_operand_and_repr(&mut self, op: &mir::Operand<'tcx>) -> EvalResult<(Pointer, Repr)> {\n         use rustc::mir::repr::Operand::*;\n         match *op {\n             Consume(ref lvalue) => Ok((try!(self.eval_lvalue(lvalue)), self.lvalue_repr(lvalue))),\n-\n             Constant(mir::Constant { ref literal, ty, .. }) => {\n                 use rustc::mir::repr::Literal::*;\n                 match *literal {\n@@ -418,12 +424,12 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n                 match proj.elem {\n                     Field(field, _) => match base_repr {\n                         Repr::Product { ref fields, .. } =>\n-                            base_ptr.offset(fields[field.index()].offset),\n+                            base_ptr.offset(fields[field.index()].offset as isize),\n                         _ => panic!(\"field access on non-product type: {:?}\", base_repr),\n                     },\n \n                     Downcast(..) => match base_repr {\n-                        Repr::Sum { ref discr, .. } => base_ptr.offset(discr.size()),\n+                        Repr::Sum { ref discr, .. } => base_ptr.offset(discr.size() as isize),\n                         _ => panic!(\"variant downcast on non-sum type\"),\n                     },\n "}, {"sha": "6020ec12330d83fe01c5b30299b3d19d78bb5788", "filename": "src/memory.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59cf49baf4c4c3a0e558fa720056f27ceb0e067f/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59cf49baf4c4c3a0e558fa720056f27ceb0e067f/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=59cf49baf4c4c3a0e558fa720056f27ceb0e067f", "patch": "@@ -328,8 +328,8 @@ impl Allocation {\n }\n \n impl Pointer {\n-    pub fn offset(self, i: usize) -> Self {\n-        Pointer { offset: self.offset + i, ..self }\n+    pub fn offset(self, i: isize) -> Self {\n+        Pointer { offset: (self.offset as isize + i) as usize, ..self }\n     }\n }\n "}]}