{"sha": "d6dc75f9f22b73faf8c526be69ca43e52d6db1bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2ZGM3NWY5ZjIyYjczZmFmOGM1MjZiZTY5Y2E0M2U1MmQ2ZGIxYmY=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-05-07T16:53:16Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-05-11T14:21:20Z"}, "message": "Handle auto traits & negative impls\n\nWe don't pass field types to Chalk yet though, so the auto trait inference won't\nbe correct.", "tree": {"sha": "f17b35ab78b5dc123e55a69f065dc47d08ef3ff8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f17b35ab78b5dc123e55a69f065dc47d08ef3ff8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6dc75f9f22b73faf8c526be69ca43e52d6db1bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6dc75f9f22b73faf8c526be69ca43e52d6db1bf", "html_url": "https://github.com/rust-lang/rust/commit/d6dc75f9f22b73faf8c526be69ca43e52d6db1bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6dc75f9f22b73faf8c526be69ca43e52d6db1bf/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7744cd41e2ad79c1b36d3d9fccd3bc0dbfd9e2d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/7744cd41e2ad79c1b36d3d9fccd3bc0dbfd9e2d9", "html_url": "https://github.com/rust-lang/rust/commit/7744cd41e2ad79c1b36d3d9fccd3bc0dbfd9e2d9"}], "stats": {"total": 54, "additions": 47, "deletions": 7}, "files": [{"sha": "0c4a80bfaa5be1ae93bac60f2c1aaa0129d1c1df", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6dc75f9f22b73faf8c526be69ca43e52d6db1bf/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6dc75f9f22b73faf8c526be69ca43e52d6db1bf/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=d6dc75f9f22b73faf8c526be69ca43e52d6db1bf", "patch": "@@ -703,6 +703,10 @@ impl Trait {\n         TraitRef::for_trait(db, self)\n     }\n \n+    pub fn is_auto(self, db: &impl DefDatabase) -> bool {\n+        self.trait_data(db).is_auto()\n+    }\n+\n     pub(crate) fn resolver(&self, db: &impl DefDatabase) -> Resolver {\n         let r = self.module(db).resolver(db);\n         // add generic params, if present"}, {"sha": "b7dd775f1b7862c22d12015210f0b35aae73c619", "filename": "crates/ra_hir/src/impl_block.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d6dc75f9f22b73faf8c526be69ca43e52d6db1bf/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6dc75f9f22b73faf8c526be69ca43e52d6db1bf/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs?ref=d6dc75f9f22b73faf8c526be69ca43e52d6db1bf", "patch": "@@ -93,6 +93,10 @@ impl ImplBlock {\n         db.impls_in_module(self.module).impls[self.impl_id].items().to_vec()\n     }\n \n+    pub fn is_negative(&self, db: &impl DefDatabase) -> bool {\n+        db.impls_in_module(self.module).impls[self.impl_id].negative\n+    }\n+\n     pub(crate) fn resolver(&self, db: &impl DefDatabase) -> Resolver {\n         let r = self.module().resolver(db);\n         // add generic params, if present\n@@ -108,6 +112,7 @@ pub struct ImplData {\n     target_trait: Option<TypeRef>,\n     target_type: TypeRef,\n     items: Vec<ImplItem>,\n+    negative: bool,\n }\n \n impl ImplData {\n@@ -120,6 +125,7 @@ impl ImplData {\n         let target_trait = node.target_trait().map(TypeRef::from_ast);\n         let target_type = TypeRef::from_ast_opt(node.target_type());\n         let ctx = LocationCtx::new(db, module, file_id);\n+        let negative = node.is_negative();\n         let items = if let Some(item_list) = node.item_list() {\n             item_list\n                 .impl_items()\n@@ -132,7 +138,7 @@ impl ImplData {\n         } else {\n             Vec::new()\n         };\n-        ImplData { target_trait, target_type, items }\n+        ImplData { target_trait, target_type, items, negative }\n     }\n \n     pub fn target_trait(&self) -> Option<&TypeRef> {"}, {"sha": "dfe883fa43c19517f025425c7e22cb03029e1138", "filename": "crates/ra_hir/src/traits.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d6dc75f9f22b73faf8c526be69ca43e52d6db1bf/crates%2Fra_hir%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6dc75f9f22b73faf8c526be69ca43e52d6db1bf/crates%2Fra_hir%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ftraits.rs?ref=d6dc75f9f22b73faf8c526be69ca43e52d6db1bf", "patch": "@@ -11,6 +11,7 @@ use crate::{Function, Const, TypeAlias, Name, DefDatabase, Trait, ids::LocationC\n pub struct TraitData {\n     name: Option<Name>,\n     items: Vec<TraitItem>,\n+    auto: bool,\n }\n \n impl TraitData {\n@@ -19,6 +20,7 @@ impl TraitData {\n         let name = node.name().map(|n| n.as_name());\n         let module = tr.module(db);\n         let ctx = LocationCtx::new(db, module, file_id);\n+        let auto = node.is_auto();\n         let items = if let Some(item_list) = node.item_list() {\n             item_list\n                 .impl_items()\n@@ -31,7 +33,7 @@ impl TraitData {\n         } else {\n             Vec::new()\n         };\n-        Arc::new(TraitData { name, items })\n+        Arc::new(TraitData { name, items, auto })\n     }\n \n     pub(crate) fn name(&self) -> &Option<Name> {\n@@ -41,6 +43,10 @@ impl TraitData {\n     pub(crate) fn items(&self) -> &[TraitItem] {\n         &self.items\n     }\n+\n+    pub(crate) fn is_auto(&self) -> bool {\n+        self.auto\n+    }\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]"}, {"sha": "027c5ec4c3c7e377631a36989672ba5864059321", "filename": "crates/ra_hir/src/ty/traits/chalk.rs", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d6dc75f9f22b73faf8c526be69ca43e52d6db1bf/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6dc75f9f22b73faf8c526be69ca43e52d6db1bf/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs?ref=d6dc75f9f22b73faf8c526be69ca43e52d6db1bf", "patch": "@@ -12,7 +12,9 @@ use ra_db::salsa::{InternId, InternKey};\n use crate::{\n     Trait, HasGenericParams, ImplBlock,\n     db::HirDatabase,\n-    ty::{TraitRef, Ty, ApplicationTy, TypeCtor, Substs, GenericPredicate}, generics::GenericDef, ty::CallableDef,\n+    ty::{TraitRef, Ty, ApplicationTy, TypeCtor, Substs, GenericPredicate, CallableDef},\n+    ty::display::HirDisplay,\n+    generics::GenericDef,\n };\n use super::ChalkContext;\n \n@@ -232,10 +234,10 @@ where\n         let bound_vars = Substs::bound_vars(&generic_params);\n         let trait_ref = trait_.trait_ref(self.db).subst(&bound_vars).to_chalk(self.db);\n         let flags = chalk_rust_ir::TraitFlags {\n+            auto: trait_.is_auto(self.db),\n+            upstream: trait_.module(self.db).krate(self.db) != Some(self.krate),\n             // FIXME set these flags correctly\n-            auto: false,\n             marker: false,\n-            upstream: trait_.module(self.db).krate(self.db) != Some(self.krate),\n             fundamental: false,\n         };\n         let where_clauses = convert_where_clauses(self.db, trait_.into(), &bound_vars);\n@@ -329,9 +331,21 @@ where\n             chalk_rust_ir::ImplType::External\n         };\n         let where_clauses = convert_where_clauses(self.db, impl_block.into(), &bound_vars);\n+        let negative = impl_block.is_negative(self.db);\n+        debug!(\n+            \"impl {:?}: {}{} where {:?}\",\n+            impl_id,\n+            if negative { \"!\" } else { \"\" },\n+            trait_ref.display(self.db),\n+            where_clauses\n+        );\n+        let trait_ref = trait_ref.to_chalk(self.db);\n         let impl_datum_bound = chalk_rust_ir::ImplDatumBound {\n-            // FIXME handle negative impls (impl !Sync for Foo)\n-            trait_ref: chalk_rust_ir::PolarizedTraitRef::Positive(trait_ref.to_chalk(self.db)),\n+            trait_ref: if negative {\n+                chalk_rust_ir::PolarizedTraitRef::Negative(trait_ref)\n+            } else {\n+                chalk_rust_ir::PolarizedTraitRef::Positive(trait_ref)\n+            },\n             where_clauses,\n             associated_ty_values: Vec::new(), // FIXME add associated type values\n             impl_type,"}, {"sha": "f3466c585ba06cb27a2d693f82e41cfe6dcce1bf", "filename": "crates/ra_syntax/src/ast/extensions.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d6dc75f9f22b73faf8c526be69ca43e52d6db1bf/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6dc75f9f22b73faf8c526be69ca43e52d6db1bf/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs?ref=d6dc75f9f22b73faf8c526be69ca43e52d6db1bf", "patch": "@@ -170,6 +170,10 @@ impl ast::ImplBlock {\n         let second = types.next();\n         (first, second)\n     }\n+\n+    pub fn is_negative(&self) -> bool {\n+        self.syntax().children_with_tokens().any(|t| t.kind() == EXCL)\n+    }\n }\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n@@ -348,3 +352,9 @@ impl ast::WherePred {\n             .find(|it| it.kind() == LIFETIME)\n     }\n }\n+\n+impl ast::TraitDef {\n+    pub fn is_auto(&self) -> bool {\n+        self.syntax().children_with_tokens().any(|t| t.kind() == AUTO_KW)\n+    }\n+}"}]}