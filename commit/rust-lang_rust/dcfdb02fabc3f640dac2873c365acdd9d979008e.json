{"sha": "dcfdb02fabc3f640dac2873c365acdd9d979008e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjZmRiMDJmYWJjM2Y2NDBkYWMyODczYzM2NWFjZGQ5ZDk3OTAwOGU=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-04-16T22:00:52Z"}, "committer": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-04-16T22:01:17Z"}, "message": "Make #fmt support explicit conversion widths", "tree": {"sha": "45d6d60831b323f87eed216846d1eb4217bb8bf4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45d6d60831b323f87eed216846d1eb4217bb8bf4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dcfdb02fabc3f640dac2873c365acdd9d979008e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dcfdb02fabc3f640dac2873c365acdd9d979008e", "html_url": "https://github.com/rust-lang/rust/commit/dcfdb02fabc3f640dac2873c365acdd9d979008e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dcfdb02fabc3f640dac2873c365acdd9d979008e/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07e820089feb202bd3b3a4606bc71773760c93d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/07e820089feb202bd3b3a4606bc71773760c93d2", "html_url": "https://github.com/rust-lang/rust/commit/07e820089feb202bd3b3a4606bc71773760c93d2"}], "stats": {"total": 104, "additions": 91, "deletions": 13}, "files": [{"sha": "65917adea97bc9d1a59c34189f1862fabd8dd714", "filename": "src/comp/front/extfmt.rs", "status": "modified", "additions": 36, "deletions": 4, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/dcfdb02fabc3f640dac2873c365acdd9d979008e/src%2Fcomp%2Ffront%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcfdb02fabc3f640dac2873c365acdd9d979008e/src%2Fcomp%2Ffront%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fextfmt.rs?ref=dcfdb02fabc3f640dac2873c365acdd9d979008e", "patch": "@@ -91,6 +91,11 @@ fn pieces_to_expr(vec[piece] pieces, vec[@ast.expr] args) -> @ast.expr {\n         ret make_new_lit(sp, lit);\n     }\n \n+    fn make_new_int(common.span sp, int i) -> @ast.expr {\n+        auto lit = ast.lit_int(i);\n+        ret make_new_lit(sp, lit);\n+    }\n+\n     fn make_new_uint(common.span sp, uint u) -> @ast.expr {\n         auto lit = ast.lit_uint(u);\n         ret make_new_lit(sp, lit);\n@@ -145,6 +150,26 @@ fn pieces_to_expr(vec[piece] pieces, vec[@ast.expr] args) -> @ast.expr {\n     }\n \n     fn make_rt_conv_expr(common.span sp, &conv cnv) -> @ast.expr {\n+\n+        fn make_count(common.span sp, &count cnt) -> @ast.expr {\n+            alt (cnt) {\n+                case (count_implied) {\n+                    auto idents = make_path_vec(\"count_implied\");\n+                    ret make_path_expr(sp, idents);\n+                }\n+                case (count_is(?c)) {\n+                    auto count_lit = make_new_int(sp, c);\n+                    auto count_is_path = make_path_vec(\"count_is\");\n+                    auto count_is_args = vec(count_lit);\n+                    ret make_call(sp, count_is_path, count_is_args);\n+                }\n+                case (_) {\n+                    log \"not implemented\";\n+                    fail;\n+                }\n+            }\n+        }\n+\n         fn make_ty(common.span sp, &ty t) -> @ast.expr {\n             auto rt_type;\n             alt (t) {\n@@ -170,12 +195,17 @@ fn pieces_to_expr(vec[piece] pieces, vec[@ast.expr] args) -> @ast.expr {\n             ret make_path_expr(sp, idents);\n         }\n \n-        fn make_conv_rec(common.span sp, &@ast.expr ty_expr) -> @ast.expr {\n-            ret make_rec_expr(sp, vec(tup(\"ty\", ty_expr)));\n+        fn make_conv_rec(common.span sp, @ast.expr width_expr,\n+                         @ast.expr ty_expr) -> @ast.expr {\n+            ret make_rec_expr(sp, vec(tup(\"width\", width_expr),\n+                                      tup(\"ty\", ty_expr)));\n         }\n \n+        auto rt_conv_width = make_count(sp, cnv.width);\n         auto rt_conv_ty = make_ty(sp, cnv.ty);\n-        ret make_conv_rec(sp, rt_conv_ty);\n+        ret make_conv_rec(sp,\n+                          rt_conv_width,\n+                          rt_conv_ty);\n     }\n \n     fn make_conv_call(common.span sp, str conv_type,\n@@ -208,6 +238,8 @@ fn pieces_to_expr(vec[piece] pieces, vec[@ast.expr] args) -> @ast.expr {\n         alt (cnv.width) {\n             case (count_implied) {\n             }\n+            case (count_is(_)) {\n+            }\n             case (_) {\n                 log unsupported;\n                 fail;\n@@ -225,7 +257,7 @@ fn pieces_to_expr(vec[piece] pieces, vec[@ast.expr] args) -> @ast.expr {\n \n         alt (cnv.ty) {\n             case (ty_str) {\n-                ret arg;\n+                ret make_conv_call(arg.span, \"str\", cnv, arg);\n             }\n             case (ty_int(?sign)) {\n                 alt (sign) {"}, {"sha": "1e9c53d9b826412e0c3e00a2140972d64190accb", "filename": "src/lib/ExtFmt.rs", "status": "modified", "additions": 45, "deletions": 9, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/dcfdb02fabc3f640dac2873c365acdd9d979008e/src%2Flib%2FExtFmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcfdb02fabc3f640dac2873c365acdd9d979008e/src%2Flib%2FExtFmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2FExtFmt.rs?ref=dcfdb02fabc3f640dac2873c365acdd9d979008e", "patch": "@@ -294,46 +294,82 @@ mod CT {\n // implement it this way, I think.\n mod RT {\n \n+    tag count {\n+        count_is(int);\n+        count_implied;\n+    }\n+\n     tag ty {\n         ty_default;\n         ty_bits;\n         ty_hex_upper;\n         ty_hex_lower;\n     }\n \n-    type conv = rec(ty ty);\n+    type conv = rec(count width,\n+                    ty ty);\n \n     fn conv_int(&conv cv, int i) -> str {\n-        ret _int.to_str(i, 10u);\n+        ret pad(cv, _int.to_str(i, 10u));\n     }\n \n     fn conv_uint(&conv cv, uint u) -> str {\n+        auto res;\n         alt (cv.ty) {\n             case (ty_default) {\n-                ret _uint.to_str(u, 10u);\n+                res = _uint.to_str(u, 10u);\n             }\n             case (ty_hex_lower) {\n-                ret _uint.to_str(u, 16u);\n+                res = _uint.to_str(u, 16u);\n             }\n             case (ty_hex_upper) {\n-                ret _str.to_upper(_uint.to_str(u, 16u));\n+                res = _str.to_upper(_uint.to_str(u, 16u));\n             }\n             case (ty_bits) {\n-                ret _uint.to_str(u, 2u);\n+                res = _uint.to_str(u, 2u);\n             }\n         }\n+        ret pad(cv, res);\n     }\n \n     fn conv_bool(&conv cv, bool b) -> str {\n         if (b) {\n-            ret \"true\";\n+            ret pad(cv, \"true\");\n         } else {\n-            ret \"false\";\n+            ret pad(cv, \"false\");\n         }\n     }\n \n     fn conv_char(&conv cv, char c) -> str {\n-        ret _str.from_char(c);\n+        ret pad(cv, _str.from_char(c));\n+    }\n+\n+    fn conv_str(&conv cv, str s) -> str {\n+        ret pad(cv, s);\n+    }\n+\n+    fn pad(&conv cv, str s) -> str {\n+        alt (cv.width) {\n+            case (count_implied) {\n+                ret s;\n+            }\n+            case (count_is(?width)) {\n+                // FIXME: Maybe width should be uint\n+                auto uwidth = width as uint;\n+                auto strlen = _str.char_len(s);\n+                if (strlen < uwidth) {\n+                    auto diff = uwidth - strlen;\n+                    // FIXME: Probably should be a _str fn for this\n+                    auto padvec = _vec.init_elt[u8](' ' as u8, diff);\n+                    // FIXME: Using unsafe_from_bytes because rustboot\n+                    // can't figure out the is_utf8 predicate on from_bytes?\n+                    auto padstr = _str.unsafe_from_bytes(padvec);\n+                    ret padstr + s;\n+                } else {\n+                    ret s;\n+                }\n+            }\n+        }\n     }\n }\n "}, {"sha": "7598fee1b99afd70c9d4e1e770aa1c1a9d8282d1", "filename": "src/test/run-pass/syntax-extension-fmt.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dcfdb02fabc3f640dac2873c365acdd9d979008e/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcfdb02fabc3f640dac2873c365acdd9d979008e/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs?ref=dcfdb02fabc3f640dac2873c365acdd9d979008e", "patch": "@@ -32,4 +32,14 @@ fn main() {\n   test(#fmt(\"%u\", 4294967295u), \"4294967295\");\n   test(#fmt(\"%x\", 0xffffffff_u), \"ffffffff\");\n   test(#fmt(\"%t\", 0xffffffff_u), \"11111111111111111111111111111111\");\n+\n+  // Widths\n+  test(#fmt(\"%10d\", 500), \"       500\");\n+  test(#fmt(\"%10d\", -500), \"      -500\");\n+  test(#fmt(\"%10u\", 500u), \"       500\");\n+  test(#fmt(\"%10s\", \"test\"), \"      test\");\n+  test(#fmt(\"%10b\", true), \"      true\");\n+  test(#fmt(\"%10x\", 0xff_u), \"        ff\");\n+  test(#fmt(\"%10X\", 0xff_u), \"        FF\");\n+  test(#fmt(\"%10t\", 0xff_u), \"  11111111\");\n }"}]}