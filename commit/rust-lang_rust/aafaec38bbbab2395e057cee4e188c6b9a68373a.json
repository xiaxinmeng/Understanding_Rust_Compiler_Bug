{"sha": "aafaec38bbbab2395e057cee4e188c6b9a68373a", "node_id": "C_kwDOAAsO6NoAKGFhZmFlYzM4YmJiYWIyMzk1ZTA1N2NlZTRlMTg4YzZiOWE2ODM3M2E", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-13T21:10:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-13T21:10:13Z"}, "message": "Rollup merge of #100490 - lcnr:wf-consts, r=jackh726\n\nwf: correctly `shallow_resolve` consts\n\n`shallow_resolve` on `InferConst` is always a noop. this is mostly irrelevant as inference vars should already be resolved at most - if not all - call sites. Haven't actually looked too deeply into whether this was a problem.", "tree": {"sha": "7e240e3b01e1cb51fa24c0e262d72908d50d8871", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e240e3b01e1cb51fa24c0e262d72908d50d8871"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aafaec38bbbab2395e057cee4e188c6b9a68373a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi+BM1CRBK7hj4Ov3rIwAAsR0IAIXDc6L62+IIz/1k6DusoC61\nFvR74wIQrkqmIgEbPXxB5AG3zmj/PXqUvBaaCOAJECBpNtDpdYZNBvCkyU57oihd\n1ZHAMXSZ6McfydeLwhO40R8bycf83MEy/d8t8FeveiOsULfqI1CUBGMbPod/eQLc\nUsE3iBxJ2Mo+ud9459xUWdNTJ2VXkcFf7/MTbMW8PMQoL1As6C2PbPG7Bp8QssMm\nRC5+QjzrIsWpgYSjEKE9mf90tOeQIsRVJ5nPxussoB+FIgZoVHb2wS0xoA0dyejA\n7S2SWWcwqUmsc0U/9T607nWdH38K2Si/fh2QMUEKhXBROmdio6T/Aem4QshppGM=\n=M0Ul\n-----END PGP SIGNATURE-----\n", "payload": "tree 7e240e3b01e1cb51fa24c0e262d72908d50d8871\nparent 29f905bfafed0c6821f4973287593803fa033b80\nparent 1ec2b9bce8caf6d132b0fc42affe51b8cac8f458\nauthor Michael Goulet <michael@errs.io> 1660425013 -0700\ncommitter GitHub <noreply@github.com> 1660425013 -0700\n\nRollup merge of #100490 - lcnr:wf-consts, r=jackh726\n\nwf: correctly `shallow_resolve` consts\n\n`shallow_resolve` on `InferConst` is always a noop. this is mostly irrelevant as inference vars should already be resolved at most - if not all - call sites. Haven't actually looked too deeply into whether this was a problem.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aafaec38bbbab2395e057cee4e188c6b9a68373a", "html_url": "https://github.com/rust-lang/rust/commit/aafaec38bbbab2395e057cee4e188c6b9a68373a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aafaec38bbbab2395e057cee4e188c6b9a68373a/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29f905bfafed0c6821f4973287593803fa033b80", "url": "https://api.github.com/repos/rust-lang/rust/commits/29f905bfafed0c6821f4973287593803fa033b80", "html_url": "https://github.com/rust-lang/rust/commit/29f905bfafed0c6821f4973287593803fa033b80"}, {"sha": "1ec2b9bce8caf6d132b0fc42affe51b8cac8f458", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ec2b9bce8caf6d132b0fc42affe51b8cac8f458", "html_url": "https://github.com/rust-lang/rust/commit/1ec2b9bce8caf6d132b0fc42affe51b8cac8f458"}], "stats": {"total": 16, "additions": 7, "deletions": 9}, "files": [{"sha": "7a5e67ff74b32daa78845d419948750b035633eb", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/aafaec38bbbab2395e057cee4e188c6b9a68373a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aafaec38bbbab2395e057cee4e188c6b9a68373a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=aafaec38bbbab2395e057cee4e188c6b9a68373a", "patch": "@@ -31,26 +31,24 @@ pub fn obligations<'a, 'tcx>(\n                     if resolved_ty == ty {\n                         // No progress, bail out to prevent \"livelock\".\n                         return None;\n+                    } else {\n+                        resolved_ty\n                     }\n-\n-                    resolved_ty\n                 }\n                 _ => ty,\n             }\n             .into()\n         }\n         GenericArgKind::Const(ct) => {\n             match ct.kind() {\n-                ty::ConstKind::Infer(infer) => {\n-                    let resolved = infcx.shallow_resolve(infer);\n-                    if resolved == infer {\n+                ty::ConstKind::Infer(_) => {\n+                    let resolved = infcx.shallow_resolve(ct);\n+                    if resolved == ct {\n                         // No progress.\n                         return None;\n+                    } else {\n+                        resolved\n                     }\n-\n-                    infcx\n-                        .tcx\n-                        .mk_const(ty::ConstS { kind: ty::ConstKind::Infer(resolved), ty: ct.ty() })\n                 }\n                 _ => ct,\n             }"}]}