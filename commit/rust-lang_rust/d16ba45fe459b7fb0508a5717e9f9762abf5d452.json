{"sha": "d16ba45fe459b7fb0508a5717e9f9762abf5d452", "node_id": "C_kwDOAAsO6NoAKGQxNmJhNDVmZTQ1OWI3ZmIwNTA4YTU3MTdlOWY5NzYyYWJmNWQ0NTI", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-05-14T12:49:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-14T12:49:55Z"}, "message": "Merge pull request #1373 from bjorn3/more_bench\n\nBenchmark clif release builds with ./y.rs bench", "tree": {"sha": "24dd4f959951e138621b94ea5b220b005db44b57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24dd4f959951e138621b94ea5b220b005db44b57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d16ba45fe459b7fb0508a5717e9f9762abf5d452", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkYNjzCRBK7hj4Ov3rIwAAsCsIADuXoBkYXi4qH8/JZOIiQxQf\n6b740Jb+uyrAeMLM0ZVyNGOY4xGSy1I3g0quqM4OtFMkS6A2N9YxewTEhBo3qnbS\nehin3F3nxok0LhnL1R7SJvWONZISVa4hyjfvfJjgTNegWEv0rsGlKsTMawOL3aNM\nOQhEAj7ejs2NKqLWbj9WQmhACJU5BU6ZarureKro2OoBSHNMkY9BRuu7naFG9pbY\n08uBosb5kr0oQhN5P0/4zLqJLvb98FgJrcOTyMnDwlLQGy8gl9hst+LsYOdqITkm\nYUdvgK39IMpiqCA5aUqaEJJ7eENB7MPd88CIXK+olyInDK0ali9xWRKl2bBA71I=\n=9PsZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 24dd4f959951e138621b94ea5b220b005db44b57\nparent d2a8023948697ab07ed9ec08fb87588b858d9439\nparent a43f08363e0983812fbbe68e8d91accf9496a1dd\nauthor bjorn3 <17426603+bjorn3@users.noreply.github.com> 1684068595 +0200\ncommitter GitHub <noreply@github.com> 1684068595 +0200\n\nMerge pull request #1373 from bjorn3/more_bench\n\nBenchmark clif release builds with ./y.rs bench"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d16ba45fe459b7fb0508a5717e9f9762abf5d452", "html_url": "https://github.com/rust-lang/rust/commit/d16ba45fe459b7fb0508a5717e9f9762abf5d452", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d16ba45fe459b7fb0508a5717e9f9762abf5d452/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2a8023948697ab07ed9ec08fb87588b858d9439", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2a8023948697ab07ed9ec08fb87588b858d9439", "html_url": "https://github.com/rust-lang/rust/commit/d2a8023948697ab07ed9ec08fb87588b858d9439"}, {"sha": "a43f08363e0983812fbbe68e8d91accf9496a1dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/a43f08363e0983812fbbe68e8d91accf9496a1dd", "html_url": "https://github.com/rust-lang/rust/commit/a43f08363e0983812fbbe68e8d91accf9496a1dd"}], "stats": {"total": 75, "additions": 28, "deletions": 47}, "files": [{"sha": "49f2954d57f46b28adc106807cc9e2c4f4bc1f1c", "filename": "build_system/bench.rs", "status": "modified", "additions": 25, "deletions": 43, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/d16ba45fe459b7fb0508a5717e9f9762abf5d452/build_system%2Fbench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16ba45fe459b7fb0508a5717e9f9762abf5d452/build_system%2Fbench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbench.rs?ref=d16ba45fe459b7fb0508a5717e9f9762abf5d452", "patch": "@@ -1,11 +1,10 @@\n use std::env;\n-use std::fs;\n use std::path::Path;\n \n use super::path::{Dirs, RelPath};\n use super::prepare::GitRepo;\n use super::rustc_info::get_file_name;\n-use super::utils::{hyperfine_command, spawn_and_wait, CargoProject, Compiler};\n+use super::utils::{hyperfine_command, spawn_and_wait};\n \n static SIMPLE_RAYTRACER_REPO: GitRepo = GitRepo::github(\n     \"ebobby\",\n@@ -14,18 +13,11 @@ static SIMPLE_RAYTRACER_REPO: GitRepo = GitRepo::github(\n     \"<none>\",\n );\n \n-// Use a separate target dir for the initial LLVM build to reduce unnecessary recompiles\n-static SIMPLE_RAYTRACER_LLVM: CargoProject =\n-    CargoProject::new(&SIMPLE_RAYTRACER_REPO.source_dir(), \"simple_raytracer_llvm\");\n-\n-static SIMPLE_RAYTRACER: CargoProject =\n-    CargoProject::new(&SIMPLE_RAYTRACER_REPO.source_dir(), \"simple_raytracer\");\n-\n-pub(crate) fn benchmark(dirs: &Dirs, bootstrap_host_compiler: &Compiler) {\n-    benchmark_simple_raytracer(dirs, bootstrap_host_compiler);\n+pub(crate) fn benchmark(dirs: &Dirs) {\n+    benchmark_simple_raytracer(dirs);\n }\n \n-fn benchmark_simple_raytracer(dirs: &Dirs, bootstrap_host_compiler: &Compiler) {\n+fn benchmark_simple_raytracer(dirs: &Dirs) {\n     if std::process::Command::new(\"hyperfine\").output().is_err() {\n         eprintln!(\"Hyperfine not installed\");\n         eprintln!(\"Hint: Try `cargo install hyperfine` to install hyperfine\");\n@@ -34,69 +26,59 @@ fn benchmark_simple_raytracer(dirs: &Dirs, bootstrap_host_compiler: &Compiler) {\n \n     if !SIMPLE_RAYTRACER_REPO.source_dir().to_path(dirs).exists() {\n         SIMPLE_RAYTRACER_REPO.fetch(dirs);\n-        spawn_and_wait(SIMPLE_RAYTRACER.fetch(\n-            &bootstrap_host_compiler.cargo,\n-            &bootstrap_host_compiler.rustc,\n-            dirs,\n-        ));\n     }\n \n-    eprintln!(\"[LLVM BUILD] simple-raytracer\");\n-    let build_cmd = SIMPLE_RAYTRACER_LLVM.build(bootstrap_host_compiler, dirs);\n-    spawn_and_wait(build_cmd);\n-    fs::copy(\n-        SIMPLE_RAYTRACER_LLVM\n-            .target_dir(dirs)\n-            .join(&bootstrap_host_compiler.triple)\n-            .join(\"debug\")\n-            .join(get_file_name(\"main\", \"bin\")),\n-        RelPath::BUILD.to_path(dirs).join(get_file_name(\"raytracer_cg_llvm\", \"bin\")),\n-    )\n-    .unwrap();\n-\n     let bench_runs = env::var(\"BENCH_RUNS\").unwrap_or_else(|_| \"10\".to_string()).parse().unwrap();\n \n     eprintln!(\"[BENCH COMPILE] ebobby/simple-raytracer\");\n     let cargo_clif =\n         RelPath::DIST.to_path(dirs).join(get_file_name(\"cargo_clif\", \"bin\").replace('_', \"-\"));\n-    let manifest_path = SIMPLE_RAYTRACER.manifest_path(dirs);\n-    let target_dir = SIMPLE_RAYTRACER.target_dir(dirs);\n+    let manifest_path = SIMPLE_RAYTRACER_REPO.source_dir().to_path(dirs).join(\"Cargo.toml\");\n+    let target_dir = RelPath::BUILD.join(\"simple_raytracer\").to_path(dirs);\n \n     let clean_cmd = format!(\n         \"RUSTC=rustc cargo clean --manifest-path {manifest_path} --target-dir {target_dir}\",\n         manifest_path = manifest_path.display(),\n         target_dir = target_dir.display(),\n     );\n     let llvm_build_cmd = format!(\n-        \"RUSTC=rustc cargo build --manifest-path {manifest_path} --target-dir {target_dir}\",\n+        \"RUSTC=rustc cargo build --manifest-path {manifest_path} --target-dir {target_dir} && (rm build/raytracer_cg_llvm || true) && ln build/simple_raytracer/debug/main build/raytracer_cg_llvm\",\n         manifest_path = manifest_path.display(),\n         target_dir = target_dir.display(),\n     );\n     let clif_build_cmd = format!(\n-        \"RUSTC=rustc {cargo_clif} build --manifest-path {manifest_path} --target-dir {target_dir}\",\n+        \"RUSTC=rustc {cargo_clif} build --manifest-path {manifest_path} --target-dir {target_dir} && (rm build/raytracer_cg_clif || true) && ln build/simple_raytracer/debug/main build/raytracer_cg_clif\",\n+        cargo_clif = cargo_clif.display(),\n+        manifest_path = manifest_path.display(),\n+        target_dir = target_dir.display(),\n+    );\n+    let clif_build_opt_cmd = format!(\n+        \"RUSTC=rustc {cargo_clif} build --manifest-path {manifest_path} --target-dir {target_dir} --release && (rm build/raytracer_cg_clif_opt || true) && ln build/simple_raytracer/release/main build/raytracer_cg_clif_opt\",\n         cargo_clif = cargo_clif.display(),\n         manifest_path = manifest_path.display(),\n         target_dir = target_dir.display(),\n     );\n \n-    let bench_compile =\n-        hyperfine_command(1, bench_runs, Some(&clean_cmd), &llvm_build_cmd, &clif_build_cmd);\n+    let bench_compile = hyperfine_command(\n+        1,\n+        bench_runs,\n+        Some(&clean_cmd),\n+        &[&llvm_build_cmd, &clif_build_cmd, &clif_build_opt_cmd],\n+    );\n \n     spawn_and_wait(bench_compile);\n \n     eprintln!(\"[BENCH RUN] ebobby/simple-raytracer\");\n-    fs::copy(\n-        target_dir.join(\"debug\").join(get_file_name(\"main\", \"bin\")),\n-        RelPath::BUILD.to_path(dirs).join(get_file_name(\"raytracer_cg_clif\", \"bin\")),\n-    )\n-    .unwrap();\n \n     let mut bench_run = hyperfine_command(\n         0,\n         bench_runs,\n         None,\n-        Path::new(\".\").join(get_file_name(\"raytracer_cg_llvm\", \"bin\")).to_str().unwrap(),\n-        Path::new(\".\").join(get_file_name(\"raytracer_cg_clif\", \"bin\")).to_str().unwrap(),\n+        &[\n+            Path::new(\".\").join(get_file_name(\"raytracer_cg_llvm\", \"bin\")).to_str().unwrap(),\n+            Path::new(\".\").join(get_file_name(\"raytracer_cg_clif\", \"bin\")).to_str().unwrap(),\n+            Path::new(\".\").join(get_file_name(\"raytracer_cg_clif_opt\", \"bin\")).to_str().unwrap(),\n+        ],\n     );\n     bench_run.current_dir(RelPath::BUILD.to_path(dirs));\n     spawn_and_wait(bench_run);"}, {"sha": "b3293486c131c012017ce60b599e5f957a3b9fef", "filename": "build_system/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d16ba45fe459b7fb0508a5717e9f9762abf5d452/build_system%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16ba45fe459b7fb0508a5717e9f9762abf5d452/build_system%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fmod.rs?ref=d16ba45fe459b7fb0508a5717e9f9762abf5d452", "patch": "@@ -187,7 +187,7 @@ pub(crate) fn main() {\n                 &bootstrap_host_compiler,\n                 target_triple,\n             );\n-            bench::benchmark(&dirs, &bootstrap_host_compiler);\n+            bench::benchmark(&dirs);\n         }\n     }\n }"}, {"sha": "8928ed7cd56fc1f97bb32d8042bfe5d782901fd1", "filename": "build_system/utils.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d16ba45fe459b7fb0508a5717e9f9762abf5d452/build_system%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d16ba45fe459b7fb0508a5717e9f9762abf5d452/build_system%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Futils.rs?ref=d16ba45fe459b7fb0508a5717e9f9762abf5d452", "patch": "@@ -162,8 +162,7 @@ pub(crate) fn hyperfine_command(\n     warmup: u64,\n     runs: u64,\n     prepare: Option<&str>,\n-    a: &str,\n-    b: &str,\n+    cmds: &[&str],\n ) -> Command {\n     let mut bench = Command::new(\"hyperfine\");\n \n@@ -179,7 +178,7 @@ pub(crate) fn hyperfine_command(\n         bench.arg(\"--prepare\").arg(prepare);\n     }\n \n-    bench.arg(a).arg(b);\n+    bench.args(cmds);\n \n     bench\n }"}]}