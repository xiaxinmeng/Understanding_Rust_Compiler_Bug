{"sha": "eaa256509ede9d1277e7b498fdea4548e1851647", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhYTI1NjUwOWVkZTlkMTI3N2U3YjQ5OGZkZWE0NTQ4ZTE4NTE2NDc=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2013-01-10T19:19:11Z"}, "committer": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2013-01-10T19:19:11Z"}, "message": "Merge pull request #4414 from gifnksm/bigint-test\n\nIssue 4393 BigInt tests fail on 32-bit platforms", "tree": {"sha": "34ed6d44ac4fea6a44adee1625cf3c83d83bcb51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34ed6d44ac4fea6a44adee1625cf3c83d83bcb51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eaa256509ede9d1277e7b498fdea4548e1851647", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eaa256509ede9d1277e7b498fdea4548e1851647", "html_url": "https://github.com/rust-lang/rust/commit/eaa256509ede9d1277e7b498fdea4548e1851647", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eaa256509ede9d1277e7b498fdea4548e1851647/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a1b6c4de993c8db1bda35d58426d873e9e514c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a1b6c4de993c8db1bda35d58426d873e9e514c2", "html_url": "https://github.com/rust-lang/rust/commit/2a1b6c4de993c8db1bda35d58426d873e9e514c2"}, {"sha": "360982f24ffa306b294e61c6a4d9ec57e8a780ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/360982f24ffa306b294e61c6a4d9ec57e8a780ca", "html_url": "https://github.com/rust-lang/rust/commit/360982f24ffa306b294e61c6a4d9ec57e8a780ca"}], "stats": {"total": 138, "additions": 110, "deletions": 28}, "files": [{"sha": "303129c2849e1cf1a96d7b67dd680b96ac25de59", "filename": "src/libstd/bigint.rs", "status": "modified", "additions": 110, "deletions": 28, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/eaa256509ede9d1277e7b498fdea4548e1851647/src%2Flibstd%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaa256509ede9d1277e7b498fdea4548e1851647/src%2Flibstd%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbigint.rs?ref=eaa256509ede9d1277e7b498fdea4548e1851647", "patch": "@@ -481,6 +481,7 @@ pub impl BigUint {\n     }\n }\n \n+#[cfg(target_arch = \"x86_64\")]\n priv pure fn get_radix_base(radix: uint) -> (uint, uint) {\n     assert 1 < radix && radix <= 16;\n     match radix {\n@@ -503,6 +504,30 @@ priv pure fn get_radix_base(radix: uint) -> (uint, uint) {\n     }\n }\n \n+#[cfg(target_arch = \"arm\")]\n+#[cfg(target_arch = \"x86\")]\n+priv pure fn get_radix_base(radix: uint) -> (uint, uint) {\n+    assert 1 < radix && radix <= 16;\n+    match radix {\n+        2  => (65536, 16),\n+        3  => (59049, 10),\n+        4  => (65536, 8),\n+        5  => (15625, 6),\n+        6  => (46656, 6),\n+        7  => (16807, 5),\n+        8  => (32768, 5),\n+        9  => (59049, 5),\n+        10 => (10000, 4),\n+        11 => (14641, 4),\n+        12 => (20736, 4),\n+        13 => (28561, 4),\n+        14 => (38416, 4),\n+        15 => (50625, 4),\n+        16 => (65536, 4),\n+        _  => fail\n+    }\n+}\n+\n /// A Sign is a BigInt's composing element.\n pub enum Sign { Minus, Zero, Plus }\n \n@@ -853,8 +878,6 @@ mod biguint_tests {\n     }\n \n     #[test]\n-    #[ignore(cfg(target_arch = \"x86\"))]\n-    #[ignore(cfg(target_arch = \"arm\"))]\n     fn test_shl() {\n         fn check(v: ~[BigDigit], shift: uint, ans: ~[BigDigit]) {\n             assert BigUint::new(v) << shift == BigUint::new(ans);\n@@ -865,10 +888,34 @@ mod biguint_tests {\n         check(~[1 << (BigDigit::bits - 2)], 2, ~[0, 1]);\n         check(~[1 << (BigDigit::bits - 2)], 3, ~[0, 2]);\n         check(~[1 << (BigDigit::bits - 2)], 3 + BigDigit::bits, ~[0, 0, 2]);\n-        check(~[0x7654_3210, 0xfedc_ba98, 0x7654_3210, 0xfedc_ba98], 4,\n-              ~[0x6543_2100, 0xedcb_a987, 0x6543_210f, 0xedcb_a987, 0xf]);\n-        check(~[0x2222_1111, 0x4444_3333, 0x6666_5555, 0x8888_7777], 16,\n-              ~[0x1111_0000, 0x3333_2222, 0x5555_4444, 0x7777_6666, 0x8888]);\n+\n+        test_shl_bits();\n+\n+        #[cfg(target_arch = \"x86_64\")]\n+        fn test_shl_bits() {\n+            check(~[0x7654_3210, 0xfedc_ba98,\n+                    0x7654_3210, 0xfedc_ba98], 4,\n+                  ~[0x6543_2100, 0xedcb_a987,\n+                    0x6543_210f, 0xedcb_a987, 0xf]);\n+            check(~[0x2222_1111, 0x4444_3333,\n+                    0x6666_5555, 0x8888_7777], 16,\n+                  ~[0x1111_0000, 0x3333_2222,\n+                    0x5555_4444, 0x7777_6666, 0x8888]);\n+        }\n+\n+        #[cfg(target_arch = \"arm\")]\n+        #[cfg(target_arch = \"x86\")]\n+        fn test_shl_bits() {\n+            check(~[0x3210, 0x7654, 0xba98, 0xfedc,\n+                    0x3210, 0x7654, 0xba98, 0xfedc], 4,\n+                  ~[0x2100, 0x6543, 0xa987, 0xedcb,\n+                    0x210f, 0x6543, 0xa987, 0xedcb, 0xf]);\n+            check(~[0x1111, 0x2222, 0x3333, 0x4444,\n+                    0x5555, 0x6666, 0x7777, 0x8888], 16,\n+                  ~[0x0000, 0x1111, 0x2222, 0x3333,\n+                    0x4444, 0x5555, 0x6666, 0x7777, 0x8888]);\n+        }\n+\n     }\n \n     #[test]\n@@ -885,11 +932,32 @@ mod biguint_tests {\n         check(~[1 << 2], 2, ~[1]);\n         check(~[1, 2], 3, ~[1 << (BigDigit::bits - 2)]);\n         check(~[1, 1, 2], 3 + BigDigit::bits, ~[1 << (BigDigit::bits - 2)]);\n-        check(~[0x6543_2100, 0xedcb_a987, 0x6543_210f, 0xedcb_a987, 0xf], 4,\n-              ~[0x7654_3210, 0xfedc_ba98, 0x7654_3210, 0xfedc_ba98]);\n-        check(~[0x1111_0000, 0x3333_2222, 0x5555_4444, 0x7777_6666, 0x8888],\n-              16,\n-              ~[0x2222_1111, 0x4444_3333, 0x6666_5555, 0x8888_7777]);\n+        test_shr_bits();\n+\n+        #[cfg(target_arch = \"x86_64\")]\n+        fn test_shr_bits() {\n+            check(~[0x6543_2100, 0xedcb_a987,\n+                    0x6543_210f, 0xedcb_a987, 0xf], 4,\n+                  ~[0x7654_3210, 0xfedc_ba98,\n+                    0x7654_3210, 0xfedc_ba98]);\n+            check(~[0x1111_0000, 0x3333_2222,\n+                    0x5555_4444, 0x7777_6666, 0x8888], 16,\n+                  ~[0x2222_1111, 0x4444_3333,\n+                    0x6666_5555, 0x8888_7777]);\n+        }\n+\n+        #[cfg(target_arch = \"arm\")]\n+        #[cfg(target_arch = \"x86\")]\n+        fn test_shr_bits() {\n+            check(~[0x2100, 0x6543, 0xa987, 0xedcb,\n+                    0x210f, 0x6543, 0xa987, 0xedcb, 0xf], 4,\n+                  ~[0x3210, 0x7654, 0xba98, 0xfedc,\n+                    0x3210, 0x7654, 0xba98, 0xfedc]);\n+            check(~[0x0000, 0x1111, 0x2222, 0x3333,\n+                    0x4444, 0x5555, 0x6666, 0x7777, 0x8888], 16,\n+                  ~[0x1111, 0x2222, 0x3333, 0x4444,\n+                    0x5555, 0x6666, 0x7777, 0x8888]);\n+        }\n     }\n \n     #[test]\n@@ -1054,6 +1122,7 @@ mod biguint_tests {\n     }\n \n     fn to_str_pairs() -> ~[ (BigUint, ~[(uint, ~str)]) ] {\n+        let bits = BigDigit::bits;\n         ~[( Zero::zero(), ~[\n             (2, ~\"0\"), (3, ~\"0\")\n         ]), ( BigUint::from_slice([ 0xff ]), ~[\n@@ -1077,24 +1146,39 @@ mod biguint_tests {\n             (4,  ~\"333333\"),\n             (16, ~\"fff\")\n         ]), ( BigUint::from_slice([ 1, 2 ]), ~[\n-            (2,  ~\"10\" + str::from_chars(vec::from_elem(31, '0')) + \"1\"),\n-            (4,  ~\"2\"  + str::from_chars(vec::from_elem(15, '0')) + \"1\"),\n-            (10, ~\"8589934593\"),\n-            (16, ~\"2\"  + str::from_chars(vec::from_elem(7, '0')) + \"1\")\n-        ]), (BigUint::from_slice([ 1, 2, 3 ]), ~[\n-            (2,  ~\"11\" + str::from_chars(vec::from_elem(30, '0')) + \"10\" +\n-             str::from_chars(vec::from_elem(31, '0')) + \"1\"),\n-            (4,  ~\"3\"  + str::from_chars(vec::from_elem(15, '0')) + \"2\"  +\n-             str::from_chars(vec::from_elem(15, '0')) + \"1\"),\n-            (10, ~\"55340232229718589441\"),\n-            (16, ~\"3\"  + str::from_chars(vec::from_elem(7, '0')) + \"2\"  +\n-             str::from_chars(vec::from_elem(7, '0')) + \"1\")\n-        ])]\n+            (2,\n+             ~\"10\" +\n+             str::from_chars(vec::from_elem(bits - 1, '0')) + \"1\"),\n+            (4,\n+             ~\"2\" +\n+             str::from_chars(vec::from_elem(bits / 2 - 1, '0')) + \"1\"),\n+            (10, match bits {\n+                32 => ~\"8589934593\", 16 => ~\"131073\", _ => fail\n+            }),\n+            (16,\n+             ~\"2\" +\n+             str::from_chars(vec::from_elem(bits / 4 - 1, '0')) + \"1\")\n+        ]), ( BigUint::from_slice([ 1, 2, 3 ]), ~[\n+            (2,\n+             ~\"11\" +\n+             str::from_chars(vec::from_elem(bits - 2, '0')) + \"10\" +\n+             str::from_chars(vec::from_elem(bits - 1, '0')) + \"1\"),\n+            (4,\n+             ~\"3\" +\n+             str::from_chars(vec::from_elem(bits / 2 - 1, '0')) + \"2\" +\n+             str::from_chars(vec::from_elem(bits / 2 - 1, '0')) + \"1\"),\n+            (10, match bits {\n+                32 => ~\"55340232229718589441\",\n+                16 => ~\"12885032961\",\n+                _ => fail\n+            }),\n+            (16, ~\"3\" +\n+             str::from_chars(vec::from_elem(bits / 4 - 1, '0')) + \"2\" +\n+             str::from_chars(vec::from_elem(bits / 4 - 1, '0')) + \"1\")\n+        ]) ]\n     }\n \n     #[test]\n-    #[ignore(cfg(target_arch = \"x86\"))]\n-    #[ignore(cfg(target_arch = \"arm\"))]\n     fn test_to_str_radix() {\n         for to_str_pairs().each |num_pair| {\n             let &(n, rs) = num_pair;\n@@ -1106,8 +1190,6 @@ mod biguint_tests {\n     }\n \n     #[test]\n-    #[ignore(cfg(target_arch = \"x86\"))]\n-    #[ignore(cfg(target_arch = \"arm\"))]\n     fn test_from_str_radix() {\n         for to_str_pairs().each |num_pair| {\n             let &(n, rs) = num_pair;"}]}