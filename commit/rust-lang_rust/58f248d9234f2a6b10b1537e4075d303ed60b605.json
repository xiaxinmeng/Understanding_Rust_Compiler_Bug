{"sha": "58f248d9234f2a6b10b1537e4075d303ed60b605", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4ZjI0OGQ5MjM0ZjJhNmIxMGIxNTM3ZTQwNzVkMzAzZWQ2MGI2MDU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-14T00:57:30Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-14T03:08:35Z"}, "message": "test: Fix tests. rs=tests", "tree": {"sha": "1074b67b2b13e5451258de7a5aca483ed8cc0d8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1074b67b2b13e5451258de7a5aca483ed8cc0d8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58f248d9234f2a6b10b1537e4075d303ed60b605", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58f248d9234f2a6b10b1537e4075d303ed60b605", "html_url": "https://github.com/rust-lang/rust/commit/58f248d9234f2a6b10b1537e4075d303ed60b605", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58f248d9234f2a6b10b1537e4075d303ed60b605/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa4c19b6abb86d93077fa63d3f0f893f8a3cb355", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa4c19b6abb86d93077fa63d3f0f893f8a3cb355", "html_url": "https://github.com/rust-lang/rust/commit/aa4c19b6abb86d93077fa63d3f0f893f8a3cb355"}], "stats": {"total": 208, "additions": 110, "deletions": 98}, "files": [{"sha": "f64877a69ba974983cb6693722710497a0409b25", "filename": "doc/rust.md", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/58f248d9234f2a6b10b1537e4075d303ed60b605/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/58f248d9234f2a6b10b1537e4075d303ed60b605/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=58f248d9234f2a6b10b1537e4075d303ed60b605", "patch": "@@ -1181,8 +1181,8 @@ Traits are implemented for specific types through separate [implementations](#im\n # type BoundingBox = int;\n \n trait Shape {\n-    fn draw(Surface);\n-    fn bounding_box() -> BoundingBox;\n+    fn draw(&self, Surface);\n+    fn bounding_box(&self) -> BoundingBox;\n }\n ~~~~\n \n@@ -1195,9 +1195,9 @@ These appear after the trait name, using the same syntax used in [generic functi\n \n ~~~~\n trait Seq<T> {\n-   fn len() -> uint;\n-   fn elt_at(n: uint) -> T;\n-   fn iter(&fn(T));\n+   fn len(&self) -> uint;\n+   fn elt_at(&self, n: uint) -> T;\n+   fn iter(&self, &fn(T));\n }\n ~~~~\n \n@@ -1209,7 +1209,7 @@ For example:\n \n ~~~~\n # type Surface = int;\n-# trait Shape { fn draw(Surface); }\n+# trait Shape { fn draw(&self, Surface); }\n \n fn draw_twice<T: Shape>(surface: Surface, sh: T) {\n     sh.draw(surface);\n@@ -1271,8 +1271,8 @@ methods of the supertrait may be called on values of subtrait-bound type paramet\n Refering to the previous example of `trait Circle : Shape`:\n \n ~~~\n-# trait Shape { fn area() -> float; }\n-# trait Circle : Shape { fn radius() -> float; }\n+# trait Shape { fn area(&self) -> float; }\n+# trait Circle : Shape { fn radius(&self) -> float; }\n fn radius_times_area<T: Circle>(c: T) -> float {\n     // `c` is both a Circle and a Shape\n     c.radius() * c.area()\n@@ -1282,10 +1282,10 @@ fn radius_times_area<T: Circle>(c: T) -> float {\n Likewise, supertrait methods may also be called on trait objects.\n \n ~~~ {.xfail-test}\n-# trait Shape { fn area() -> float; }\n-# trait Circle : Shape { fn radius() -> float; }\n-# impl Shape for int { fn area() -> float { 0.0 } }\n-# impl Circle for int { fn radius() -> float { 0.0 } }\n+# trait Shape { fn area(&self) -> float; }\n+# trait Circle : Shape { fn radius(&self) -> float; }\n+# impl Shape for int { fn area(&self) -> float { 0.0 } }\n+# impl Circle for int { fn radius(&self) -> float { 0.0 } }\n # let mycircle = 0;\n \n let mycircle: Circle = @mycircle as @Circle;\n@@ -1302,7 +1302,7 @@ Implementations are defined with the keyword `impl`.\n # struct Point {x: float, y: float};\n # type Surface = int;\n # struct BoundingBox {x: float, y: float, width: float, height: float};\n-# trait Shape { fn draw(Surface); fn bounding_box() -> BoundingBox; }\n+# trait Shape { fn draw(&self, Surface); fn bounding_box(&self) -> BoundingBox; }\n # fn do_draw_circle(s: Surface, c: Circle) { }\n \n struct Circle {\n@@ -1311,8 +1311,8 @@ struct Circle {\n }\n \n impl Shape for Circle {\n-    fn draw(s: Surface) { do_draw_circle(s, self); }\n-    fn bounding_box() -> BoundingBox {\n+    fn draw(&self, s: Surface) { do_draw_circle(s, *self); }\n+    fn bounding_box(&self) -> BoundingBox {\n         let r = self.radius;\n         BoundingBox{x: self.center.x - r, y: self.center.y - r,\n          width: 2.0 * r, height: 2.0 * r}\n@@ -2678,11 +2678,11 @@ An example of an object type:\n \n ~~~~~~~~\n trait Printable {\n-  fn to_str() -> ~str;\n+  fn to_str(&self) -> ~str;\n }\n \n impl Printable for int {\n-  fn to_str() -> ~str { int::to_str(self) }\n+  fn to_str(&self) -> ~str { int::to_str(*self) }\n }\n \n fn print(a: @Printable) {\n@@ -2721,11 +2721,11 @@ example, in:\n \n ~~~~~~~~\n trait Printable {\n-  fn make_string() -> ~str;\n+  fn make_string(&self) -> ~str;\n }\n \n impl Printable for ~str {\n-  fn make_string() -> ~str { copy self }\n+  fn make_string(&self) -> ~str { copy *self }\n }\n ~~~~~~~~\n "}, {"sha": "5b135ba98cee9d67b2776320ce2a4d32ae3963ad", "filename": "src/libcore/rt/thread_local_storage.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Flibcore%2Frt%2Fthread_local_storage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Flibcore%2Frt%2Fthread_local_storage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fthread_local_storage.rs?ref=58f248d9234f2a6b10b1537e4075d303ed60b605", "patch": "@@ -10,7 +10,7 @@\n \n use libc::{c_void};\n #[cfg(unix)]\n-use libc::{c_uint, c_int};\n+use libc::{c_uint, c_ulong, c_int};\n #[cfg(unix)]\n use ptr::null;\n #[cfg(windows)]\n@@ -34,7 +34,12 @@ pub unsafe fn get(key: Key) -> *mut c_void {\n     unsafe { pthread_getspecific(key) }\n }\n \n-#[cfg(unix)]\n+#[cfg(target_os=\"macos\")]\n+#[allow(non_camel_case_types)] // foreign type\n+type pthread_key_t = c_ulong;\n+\n+#[cfg(target_os=\"linux\")]\n+#[cfg(target_os=\"freebsd\")]\n #[allow(non_camel_case_types)] // foreign type\n type pthread_key_t = c_uint;\n "}, {"sha": "57c9b1ad4f5bf833c1b52c5cc3aba00df301cc6e", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=58f248d9234f2a6b10b1537e4075d303ed60b605", "patch": "@@ -312,7 +312,7 @@ mod test {\n             @~\"fn foo (x : int) { x; }\",\n             ~[],\n             new_parse_sess(None));\n-        check_equal(to_json_str(@tts as Encodable::<std::json::Encoder>),\n+        check_equal(to_json_str(@tts as @Encodable<std::json::Encoder>),\n                     ~\"[[\\\"tt_tok\\\",[,[\\\"IDENT\\\",[\\\"fn\\\",false]]]],\\\n                       [\\\"tt_tok\\\",[,[\\\"IDENT\\\",[\\\"foo\\\",false]]]],\\\n                       [\\\"tt_delim\\\",[[[\\\"tt_tok\\\",[,[\\\"LPAREN\\\",[]]]],\\"}, {"sha": "912846d9f0f8b762a62eaf8d47fedca7163ad41f", "filename": "src/libsyntax/syntax.rc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Flibsyntax%2Fsyntax.rc", "raw_url": "https://github.com/rust-lang/rust/raw/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Flibsyntax%2Fsyntax.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsyntax.rc?ref=58f248d9234f2a6b10b1537e4075d303ed60b605", "patch": "@@ -22,7 +22,6 @@\n #[allow(vecs_implicitly_copyable)];\n #[allow(non_camel_case_types)];\n #[allow(deprecated_mode)];\n-#[deny(deprecated_self)];\n \n #[no_core];\n "}, {"sha": "e56df439bc2a5c96bc1d3ad33e5a3d4769283448", "filename": "src/test/auxiliary/ambig_impl_2_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Fauxiliary%2Fambig_impl_2_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Fauxiliary%2Fambig_impl_2_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fambig_impl_2_lib.rs?ref=58f248d9234f2a6b10b1537e4075d303ed60b605", "patch": "@@ -11,4 +11,4 @@\n trait me {\n     fn me(&self) -> uint;\n }\n-impl me for uint { fn me(&self) -> uint { self } }\n+impl me for uint { fn me(&self) -> uint { *self } }"}, {"sha": "1cf08b7f5036f1e31ea068527989df99a9e24b87", "filename": "src/test/compile-fail/ambig_impl_2_exe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Fcompile-fail%2Fambig_impl_2_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Fcompile-fail%2Fambig_impl_2_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fambig_impl_2_exe.rs?ref=58f248d9234f2a6b10b1537e4075d303ed60b605", "patch": "@@ -13,8 +13,8 @@\n extern mod ambig_impl_2_lib;\n use ambig_impl_2_lib::me;\n trait me {\n-    fn me() -> uint;\n+    fn me(&self) -> uint;\n }\n-impl me for uint { fn me() -> uint { self } } //~ NOTE is `__extensions__::me`\n+impl me for uint { fn me(&self) -> uint { *self } } //~ NOTE is `__extensions__::me`\n fn main() { 1u.me(); } //~ ERROR multiple applicable methods in scope\n //~^ NOTE is `ambig_impl_2_lib::__extensions__::me`"}, {"sha": "9f26e5ae9b3809265a6954c4080561a53ef8f7d0", "filename": "src/test/compile-fail/ambig_impl_bounds.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Fcompile-fail%2Fambig_impl_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Fcompile-fail%2Fambig_impl_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fambig_impl_bounds.rs?ref=58f248d9234f2a6b10b1537e4075d303ed60b605", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait A { fn foo(); }\n-trait B { fn foo(); }\n+trait A { fn foo(&self); }\n+trait B { fn foo(&self); }\n \n fn foo<T:A + B>(t: T) {\n     t.foo(); //~ ERROR multiple applicable methods in scope"}, {"sha": "c95b93445adcaf1317e0af223bb6dc6fbc5dada2", "filename": "src/test/compile-fail/borrowck-autoref-3261.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Fcompile-fail%2Fborrowck-autoref-3261.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Fcompile-fail%2Fborrowck-autoref-3261.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-autoref-3261.rs?ref=58f248d9234f2a6b10b1537e4075d303ed60b605", "patch": "@@ -10,8 +10,8 @@\n \n struct X(Either<(uint,uint),extern fn()>);\n \n-pub impl &'self X {\n-    fn with(self, blk: &fn(x: &Either<(uint,uint),extern fn()>)) {\n+pub impl X {\n+    fn with(&self, blk: &fn(x: &Either<(uint,uint),extern fn()>)) {\n         blk(&**self)\n     }\n }"}, {"sha": "0662736545166c013b7dcd0edaf2b08fcc111155", "filename": "src/test/compile-fail/class-cast-to-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Fcompile-fail%2Fclass-cast-to-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Fcompile-fail%2Fclass-cast-to-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclass-cast-to-trait.rs?ref=58f248d9234f2a6b10b1537e4075d303ed60b605", "patch": "@@ -49,7 +49,7 @@ priv impl cat {\n     }\n }\n \n-fn cat(&self, in_x : uint, in_y : int, in_name: ~str) -> cat {\n+fn cat(in_x : uint, in_y : int, in_name: ~str) -> cat {\n     cat {\n         meows: in_x,\n         how_hungry: in_y,"}, {"sha": "605453d1bca228ddce126e5d031edc8b68c5bda9", "filename": "src/test/compile-fail/infinite-instantiation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Fcompile-fail%2Finfinite-instantiation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Fcompile-fail%2Finfinite-instantiation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finfinite-instantiation.rs?ref=58f248d9234f2a6b10b1537e4075d303ed60b605", "patch": "@@ -17,13 +17,13 @@ trait to_opt {\n \n impl to_opt for uint {\n     fn to_option(&self) -> Option<uint> {\n-        Some(self)\n+        Some(*self)\n     }\n }\n \n impl<T:Copy> to_opt for Option<T> {\n     fn to_option(&self) -> Option<Option<T>> {\n-        Some(self)\n+        Some(*self)\n     }\n }\n "}, {"sha": "7a99ab8a94f16cf7529e5977f1a219f8b9f603b5", "filename": "src/test/compile-fail/issue-2590.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Fcompile-fail%2Fissue-2590.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Fcompile-fail%2Fissue-2590.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2590.rs?ref=58f248d9234f2a6b10b1537e4075d303ed60b605", "patch": "@@ -13,11 +13,11 @@ struct parser {\n }\n \n trait parse {\n-    fn parse() -> ~[int];\n+    fn parse(&self) -> ~[int];\n }\n \n impl parse for parser {\n-    fn parse() -> ~[int] {\n+    fn parse(&self) -> ~[int] {\n         self.tokens //~ ERROR moving out of immutable field\n     }\n }"}, {"sha": "2daf3e7a210aab1d19802d148217f03b41c65996", "filename": "src/test/compile-fail/issue-3021-d.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Fcompile-fail%2Fissue-3021-d.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Fcompile-fail%2Fissue-3021-d.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3021-d.rs?ref=58f248d9234f2a6b10b1537e4075d303ed60b605", "patch": "@@ -21,7 +21,7 @@ fn siphash(k0 : u64, k1 : u64) -> siphash {\n         v1: u64,\n     }\n \n-    fn mk_result(&self, st : SipState) -> u64 {\n+    fn mk_result(st : SipState) -> u64 {\n \n         let v0 = st.v0,\n             v1 = st.v1;"}, {"sha": "305f4bd6befa367247e30b872f51430e2d275b5b", "filename": "src/test/compile-fail/kindck-owned-trait-contains.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-contains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-contains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-contains.rs?ref=58f248d9234f2a6b10b1537e4075d303ed60b605", "patch": "@@ -11,12 +11,12 @@\n trait repeat<A> { fn get(&self) -> A; }\n \n impl<A:Copy> repeat<A> for @A {\n-    fn get(&self) -> A { *self }\n+    fn get(&self) -> A { **self }\n }\n \n fn repeater<A:Copy>(v: @A) -> @repeat<A> {\n     // Note: owned kind is not necessary as A appears in the trait type\n-    @v as @repeat::<A> // No\n+    @v as @repeat<A> // No\n }\n \n fn main() {"}, {"sha": "0ccc5ac8bf07f51a2e271cc3ffbc3dc874354005", "filename": "src/test/compile-fail/kindck-owned-trait-scoped.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-scoped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-scoped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-scoped.rs?ref=58f248d9234f2a6b10b1537e4075d303ed60b605", "patch": "@@ -1,3 +1,6 @@\n+// xfail-test\n+// xfail'd because to_foo() doesn't work.\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n@@ -15,7 +18,7 @@ trait foo {\n     fn foo(&self, i: &'self int) -> int;\n }\n \n-impl<T:Copy> foo<'self> for T {\n+impl<T:Copy> foo for T {\n     fn foo(&self, i: &'self int) -> int {*i}\n }\n "}, {"sha": "6f71bd40affe5076e4811366053d5dc85769ee9b", "filename": "src/test/compile-fail/map-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmap-types.rs?ref=58f248d9234f2a6b10b1537e4075d303ed60b605", "patch": "@@ -15,7 +15,7 @@ use core::hashmap::linear::LinearMap;\n \n fn main() {\n     let x: @Map<~str, ~str> = @LinearMap::new::<~str, ~str>() as\n-        @(Map::<~str, ~str>);\n+        @Map<~str, ~str>;\n     let y: @Map<uint, ~str> = @x;\n     //~^ ERROR mismatched types: expected `@core::container::Map<uint,~str>`\n }"}, {"sha": "4bd56c6e78b01efbaa285d4f23e711ed01cbf611", "filename": "src/test/compile-fail/pure-modifies-aliased.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Fcompile-fail%2Fpure-modifies-aliased.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Fcompile-fail%2Fpure-modifies-aliased.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpure-modifies-aliased.rs?ref=58f248d9234f2a6b10b1537e4075d303ed60b605", "patch": "@@ -24,7 +24,7 @@ trait modify_in_box_rec {\n \n impl modify_in_box_rec for int {\n     pure fn modify_in_box_rec(&self, sum: @mut S) {\n-        sum.f = self; //~ ERROR assigning to mutable field prohibited in pure context\n+        sum.f = *self; //~ ERROR assigning to mutable field prohibited in pure context\n     }\n }\n "}, {"sha": "e38b0ff58d351b4502de8c8fccd734c4af530576", "filename": "src/test/compile-fail/regions-bounds.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs?ref=58f248d9234f2a6b10b1537e4075d303ed60b605", "patch": "@@ -13,19 +13,12 @@\n // checked.\n \n struct an_enum(&'self int);\n-trait a_trait {\n-    fn foo(&self) -> &'self int;\n-}\n struct a_class { x:&'self int }\n \n fn a_fn1(e: an_enum<'a>) -> an_enum<'b> {\n     return e; //~ ERROR mismatched types: expected `an_enum/&b` but found `an_enum/&a`\n }\n \n-fn a_fn2(e: @a_trait<'a>) -> @a_trait<'b> {\n-    return e; //~ ERROR mismatched types: expected `@a_trait/&b` but found `@a_trait/&a`\n-}\n-\n fn a_fn3(e: a_class<'a>) -> a_class<'b> {\n     return e; //~ ERROR mismatched types: expected `a_class/&b` but found `a_class/&a`\n }"}, {"sha": "99a3cc0ab6f1c17a6eea5a8429594290320ade62", "filename": "src/test/compile-fail/regions-infer-paramd-indirect.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-indirect.rs?ref=58f248d9234f2a6b10b1537e4075d303ed60b605", "patch": "@@ -18,17 +18,17 @@ struct c<'self> {\n     f: @b<'self>\n }\n \n-trait set_f<'self> {\n+trait set_f {\n     fn set_f_ok(&self, b: @b<'self>);\n     fn set_f_bad(&self, b: @b);\n }\n \n-impl<'self> set_f<'self> for c<'self> {\n+impl<'self> set_f for c<'self> {\n     fn set_f_ok(&self, b: @b<'self>) {\n         self.f = b;\n     }\n \n-    fn set_f_bad(b: @b) {\n+    fn set_f_bad(&self, b: @b) {\n         self.f = b; //~ ERROR mismatched types: expected `@@&self/int` but found `@@&int`\n     }\n }"}, {"sha": "8c3195f020a97d32355e0d28645215a49a4fd0dc", "filename": "src/test/compile-fail/regions-infer-paramd-method.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-method.rs?ref=58f248d9234f2a6b10b1537e4075d303ed60b605", "patch": "@@ -1,3 +1,6 @@\n+// xfail-test\n+// xfail'd due to problems with by value self.\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n@@ -12,9 +15,9 @@\n // refers to self.\n \n trait foo<'self> {\n-    fn self_int(&self) -> &'self int;\n+    fn self_int(self) -> &'self int;\n \n-    fn any_int(&self) -> &int;\n+    fn any_int(self) -> &int;\n }\n \n struct with_foo<'self> {"}, {"sha": "bbaed2ab6009a757106abb8f9dc09f9d36254f79", "filename": "src/test/compile-fail/regions-trait-2.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Fcompile-fail%2Fregions-trait-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Fcompile-fail%2Fregions-trait-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-trait-2.rs?ref=58f248d9234f2a6b10b1537e4075d303ed60b605", "patch": "@@ -10,22 +10,22 @@\n \n struct ctxt { v: uint }\n \n-trait get_ctxt<'self> {\n+trait get_ctxt {\n     fn get_ctxt(&self) -> &'self ctxt;\n }\n \n struct has_ctxt<'self> { c: &'self ctxt }\n \n-impl<'self> get_ctxt<'self> for has_ctxt<'self> {\n+impl<'self> get_ctxt for has_ctxt<'self> {\n     fn get_ctxt(&self) -> &self/ctxt { self.c }\n }\n \n fn make_gc() -> @get_ctxt  {\n     let ctxt = ctxt { v: 22u };\n-    let hc = has_ctxt { c: &ctxt }; //~ ERROR illegal borrow\n+    let hc = has_ctxt { c: &ctxt };\n     return @hc as @get_ctxt;\n }\n \n fn main() {\n-    make_gc().get_ctxt().v;\n+    make_gc().get_ctxt().v; //~ ERROR illegal borrow\n }"}, {"sha": "10b7b1058d8bd741c823ca04243c5d209143046d", "filename": "src/test/compile-fail/regions-trait-3.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Fcompile-fail%2Fregions-trait-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Fcompile-fail%2Fregions-trait-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-trait-3.rs?ref=58f248d9234f2a6b10b1537e4075d303ed60b605", "patch": "@@ -1,3 +1,6 @@\n+// xfail-test\n+// xfail'd due to problems with by-value self.\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n@@ -9,7 +12,7 @@\n // except according to those terms.\n \n trait get_ctxt {\n-    fn get_ctxt(&self) -> &self/uint;\n+    fn get_ctxt(self) -> &self/uint;\n }\n \n fn make_gc1(gc: @get_ctxt/&a) -> @get_ctxt/&b  {\n@@ -20,8 +23,8 @@ struct Foo {\n     r: &'self uint\n }\n \n-impl get_ctxt/&self for Foo/&self {\n-    fn get_ctxt(&self) -> &self/uint { self.r }\n+impl get_ctxt for Foo<'self> {\n+    fn get_ctxt(&self) -> &'self uint { self.r }\n }\n \n fn make_gc2(foo: Foo/&a) -> @get_ctxt/&b  {"}, {"sha": "127aa23d6aba40b13a802cf7189627ad26eca360", "filename": "src/test/compile-fail/tps-invariant-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Fcompile-fail%2Ftps-invariant-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Fcompile-fail%2Ftps-invariant-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftps-invariant-trait.rs?ref=58f248d9234f2a6b10b1537e4075d303ed60b605", "patch": "@@ -34,7 +34,7 @@ fn set_box_impl<T>(b: box_impl<@const T>, v: @const T) {\n \n fn main() {\n     let b = box_impl::<@int>(box::<@int> {f: @3});\n-    set_box_trait(@b as @box_trait::<@int>, @mut 5);\n+    set_box_trait(@b as @box_trait<@int>, @mut 5);\n     //~^ ERROR values differ in mutability\n     set_box_impl(b, @mut 5);\n     //~^ ERROR values differ in mutability"}, {"sha": "7039e050199587ff4a54c2ea00ccb607bae3e739", "filename": "src/test/compile-fail/trait-impl-different-num-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Fcompile-fail%2Ftrait-impl-different-num-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Fcompile-fail%2Ftrait-impl-different-num-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-impl-different-num-params.rs?ref=58f248d9234f2a6b10b1537e4075d303ed60b605", "patch": "@@ -14,7 +14,7 @@ trait foo {\n impl foo for int {\n     fn bar(&self) -> int {\n         //~^ ERROR method `bar` has 0 parameters but the trait has 1\n-        self\n+        *self\n     }\n }\n "}, {"sha": "ea04f74f078d49ba099a2bd3097bda1df85ce69c", "filename": "src/test/compile-fail/trait-test-2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Fcompile-fail%2Ftrait-test-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Fcompile-fail%2Ftrait-test-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-test-2.rs?ref=58f248d9234f2a6b10b1537e4075d303ed60b605", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait bar { fn dup(&self) -> Self; fn blah<X>(); }\n-impl bar for int { fn dup(&self) -> int { self } fn blah<X>() {} }\n-impl bar for uint { fn dup(&self) -> uint { self } fn blah<X>() {} }\n+trait bar { fn dup(&self) -> Self; fn blah<X>(&self); }\n+impl bar for int { fn dup(&self) -> int { *self } fn blah<X>(&self) {} }\n+impl bar for uint { fn dup(&self) -> uint { *self } fn blah<X>(&self) {} }\n \n fn main() {\n     10i.dup::<int>(); //~ ERROR does not take type parameters"}, {"sha": "fab31f88e54757a833cd776a27de1c91f71a676f", "filename": "src/test/compile-fail/vtable-res-trait-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Fcompile-fail%2Fvtable-res-trait-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Fcompile-fail%2Fvtable-res-trait-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvtable-res-trait-param.rs?ref=58f248d9234f2a6b10b1537e4075d303ed60b605", "patch": "@@ -18,7 +18,7 @@ trait TraitB {\n \n impl TraitB for int {\n     fn gimme_an_a<A:TraitA>(&self, a: A) -> int {\n-        a.method_a() + self\n+        a.method_a() + *self\n     }\n }\n "}, {"sha": "e6efa6dc633d7593cbe5c2b4942534b9f5baa69f", "filename": "src/test/run-pass/autoderef-method-priority.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs?ref=58f248d9234f2a6b10b1537e4075d303ed60b605", "patch": "@@ -1,3 +1,6 @@\n+// xfail-test\n+// xfail'd because of a problem with by-value self.\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "afd21bdca1af03c165541ed17a4ea072c95c68d8", "filename": "src/test/run-pass/class-exports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Frun-pass%2Fclass-exports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Frun-pass%2Fclass-exports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-exports.rs?ref=58f248d9234f2a6b10b1537e4075d303ed60b605", "patch": "@@ -25,7 +25,7 @@ mod kitty {\n         fn get_name(&self) -> ~str { copy self.name }\n     }\n \n-    pub fn cat(&self, in_name: ~str) -> cat {\n+    pub fn cat(in_name: ~str) -> cat {\n         cat {\n             name: in_name,\n             meows: 0u"}, {"sha": "31375edb5de042d967752fc8dee976fa1ac5cc9d", "filename": "src/test/run-pass/impl-variance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Frun-pass%2Fimpl-variance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Frun-pass%2Fimpl-variance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimpl-variance.rs?ref=58f248d9234f2a6b10b1537e4075d303ed60b605", "patch": "@@ -13,7 +13,7 @@ trait foo {\n }\n \n impl<T> foo for ~[const T] {\n-    fn foo(&self) -> uint { vec::len(self) }\n+    fn foo(&self) -> uint { vec::len(*self) }\n }\n \n pub fn main() {"}, {"sha": "b8c9ada8b1e23abe8573819a5c6c15fe26ba8ec7", "filename": "src/test/run-pass/issue-2284.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Frun-pass%2Fissue-2284.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Frun-pass%2Fissue-2284.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2284.rs?ref=58f248d9234f2a6b10b1537e4075d303ed60b605", "patch": "@@ -13,7 +13,7 @@ trait Send {\n }\n \n fn f<T:Send>(t: T) {\n-    t.f(&self);\n+    t.f();\n }\n \n pub fn main() {"}, {"sha": "9aef66fd35c5947386bdc175d18f08cfe49d2af1", "filename": "src/test/run-pass/issue-2288.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Frun-pass%2Fissue-2288.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Frun-pass%2Fissue-2288.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2288.rs?ref=58f248d9234f2a6b10b1537e4075d303ed60b605", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait c lam<A:Copy> {\n+trait clam<A:Copy> {\n   fn chowder(&self, y: A);\n }\n struct foo<A> {\n@@ -33,6 +33,6 @@ fn f<A:Copy>(x: @clam<A>, a: A) {\n pub fn main() {\n \n   let c = foo(42);\n-  let d: @clam<int> = @c as @clam::<int>;\n+  let d: @clam<int> = @c as @clam<int>;\n   f(d, c.x);\n }"}, {"sha": "0a39472025d26c9095e969f13ea1ce43a06dbfbf", "filename": "src/test/run-pass/kindck-owned-trait-contains-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Frun-pass%2Fkindck-owned-trait-contains-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Frun-pass%2Fkindck-owned-trait-contains-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fkindck-owned-trait-contains-1.rs?ref=58f248d9234f2a6b10b1537e4075d303ed60b605", "patch": "@@ -11,12 +11,12 @@\n trait repeat<A> { fn get(&self) -> A; }\n \n impl<A:Copy> repeat<A> for @A {\n-    fn get(&self) -> A { *self }\n+    fn get(&self) -> A { **self }\n }\n \n fn repeater<A:Copy>(v: @A) -> @repeat<A> {\n     // Note: owned kind is not necessary as A appears in the trait type\n-    @v as @repeat::<A> // No\n+    @v as @repeat<A> // No\n }\n \n pub fn main() {"}, {"sha": "5f3afee693f7218c02fe38ed2a03fda3f738fd27", "filename": "src/test/run-pass/monad.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Frun-pass%2Fmonad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Frun-pass%2Fmonad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmonad.rs?ref=58f248d9234f2a6b10b1537e4075d303ed60b605", "patch": "@@ -28,9 +28,9 @@ trait option_monad<A> {\n \n impl<A> option_monad<A> for Option<A> {\n     fn bind<B>(&self, f: &fn(&A) -> Option<B>) -> Option<B> {\n-        match self {\n-          Some(ref a) => { f(a) }\n-          None => { None }\n+        match *self {\n+            Some(ref a) => { f(a) }\n+            None => { None }\n         }\n     }\n }"}, {"sha": "f9a132f8a2c00b60495b312aea03fcf09e87eff7", "filename": "src/test/run-pass/rcvr-borrowed-to-region.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs?ref=58f248d9234f2a6b10b1537e4075d303ed60b605", "patch": "@@ -1,3 +1,6 @@\n+// xfail-test\n+// xfail'd due to segfaults with by-value self.\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n@@ -15,7 +18,7 @@ trait get {\n // Note: impl on a slice\n impl get for &'self int {\n     fn get(self) -> int {\n-        return *self;\n+        return **self;\n     }\n }\n "}, {"sha": "78e1dd31e1aaf5cd707496e419ebc2a9b06f33e1", "filename": "src/test/run-pass/reflect-visit-data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs?ref=58f248d9234f2a6b10b1537e4075d303ed60b605", "patch": "@@ -487,7 +487,7 @@ pub impl my_visitor {\n \n     fn visit_inner(&self, inner: *TyDesc) -> bool {\n         unsafe {\n-            let u = my_visitor(*self);\n+            let u = my_visitor(**self);\n             let v = ptr_visit_adaptor::<my_visitor>(Inner {inner: u});\n             visit_tydesc(inner, @v as @TyVisitor);\n             true"}, {"sha": "16b6364093e2e05dd5ed7ec5dd5eefb94dab333c", "filename": "src/test/run-pass/regions-self-impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Frun-pass%2Fregions-self-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Frun-pass%2Fregions-self-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-self-impls.rs?ref=58f248d9234f2a6b10b1537e4075d303ed60b605", "patch": "@@ -16,7 +16,7 @@ trait get_chowder<'self> {\n     fn get_chowder(&self) -> &'self int;\n }\n \n-impl<'self> get_chowder<'self> for Clam<'self> {\n+impl<'self> get_chowder for Clam<'self> {\n     fn get_chowder(&self) -> &'self int { return self.chowder; }\n }\n "}, {"sha": "5ca4af37737fcbff32006785b11789c4e4018e8f", "filename": "src/test/run-pass/regions-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Frun-pass%2Fregions-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Frun-pass%2Fregions-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-trait.rs?ref=58f248d9234f2a6b10b1537e4075d303ed60b605", "patch": "@@ -16,7 +16,7 @@ trait get_ctxt {\n \n struct HasCtxt { c: &'self Ctxt }\n \n-impl get_ctxt<'self> for HasCtxt<'self> {\n+impl get_ctxt for HasCtxt<'self> {\n     fn get_ctxt(&self) -> &self/Ctxt {\n         self.c\n     }"}, {"sha": "560406c9c404819d979ffe62c191ca43b6d70f98", "filename": "src/test/run-pass/static-impl.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Frun-pass%2Fstatic-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Frun-pass%2Fstatic-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-impl.rs?ref=58f248d9234f2a6b10b1537e4075d303ed60b605", "patch": "@@ -16,7 +16,7 @@ pub trait plus {\n \n mod a {\n     use plus;\n-    impl plus for uint { fn plus(&self) -> int { self as int + 20 } }\n+    impl plus for uint { fn plus(&self) -> int { *self as int + 20 } }\n }\n \n mod b {\n@@ -25,15 +25,15 @@ mod b {\n }\n \n trait uint_utils {\n-    fn str(self) -> ~str;\n-    fn multi(self, f: &fn(uint));\n+    fn str(&self) -> ~str;\n+    fn multi(&self, f: &fn(uint));\n }\n \n impl uint_utils for uint {\n-    fn str(self) -> ~str { uint::to_str(self) }\n-    fn multi(self, f: &fn(uint)) {\n+    fn str(&self) -> ~str { uint::to_str(*self) }\n+    fn multi(&self, f: &fn(uint)) {\n         let mut c = 0u;\n-        while c < self { f(c); c += 1u; }\n+        while c < *self { f(c); c += 1u; }\n     }\n }\n \n@@ -44,7 +44,7 @@ trait vec_utils<T> {\n }\n \n impl<T> vec_utils<T> for ~[T] {\n-    fn length_(&self) -> uint { vec::len(self) }\n+    fn length_(&self) -> uint { vec::len(*self) }\n     fn iter_(&self, f: &fn(&T)) { for self.each |x| { f(x); } }\n     fn map_<U:Copy>(&self, f: &fn(&T) -> U) -> ~[U] {\n         let mut r = ~[];"}, {"sha": "72fcb1970c6929cce6fa5063d9b5e08bd83dedeb", "filename": "src/test/run-pass/trait-generic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Frun-pass%2Ftrait-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Frun-pass%2Ftrait-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-generic.rs?ref=58f248d9234f2a6b10b1537e4075d303ed60b605", "patch": "@@ -14,10 +14,10 @@ trait to_str {\n     fn to_str(&self) -> ~str;\n }\n impl to_str for int {\n-    fn to_str(&self) -> ~str { int::to_str(self) }\n+    fn to_str(&self) -> ~str { int::to_str(*self) }\n }\n impl to_str for ~str {\n-    fn to_str(&self) -> ~str { copy self }\n+    fn to_str(&self) -> ~str { copy *self }\n }\n impl to_str for () {\n     fn to_str(&self) -> ~str { ~\"()\" }"}, {"sha": "ccb55f1d164049402f2875f3f217588d9d0f920b", "filename": "src/test/run-pass/trait-inheritance-auto-xc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Frun-pass%2Ftrait-inheritance-auto-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Frun-pass%2Ftrait-inheritance-auto-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-auto-xc.rs?ref=58f248d9234f2a6b10b1537e4075d303ed60b605", "patch": "@@ -17,9 +17,9 @@ use aux::{Foo, Bar, Baz, Quux};\n \n struct A { x: int }\n \n-impl Foo for A { fn f() -> int { 10 } }\n-impl Bar for A { fn g() -> int { 20 } }\n-impl Baz for A { fn h() -> int { 30 } }\n+impl Foo for A { fn f(&self) -> int { 10 } }\n+impl Bar for A { fn g(&self) -> int { 20 } }\n+impl Baz for A { fn h(&self) -> int { 30 } }\n \n fn f<T:Quux>(a: &T) {\n     fail_unless!(a.f() == 10);"}, {"sha": "a5f163a9cfa3fef63d87455110661d01d1885736", "filename": "src/test/run-pass/trait-inheritance-cross-trait-call-xc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Frun-pass%2Ftrait-inheritance-cross-trait-call-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Frun-pass%2Ftrait-inheritance-cross-trait-call-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-cross-trait-call-xc.rs?ref=58f248d9234f2a6b10b1537e4075d303ed60b605", "patch": "@@ -16,11 +16,11 @@ extern mod aux(name = \"trait_inheritance_cross_trait_call_xc_aux\");\n use aux::Foo;\n \n trait Bar : Foo {\n-    fn g() -> int;\n+    fn g(&self) -> int;\n }\n \n impl Bar for aux::A {\n-    fn g() -> int { self.f() }\n+    fn g(&self) -> int { self.f() }\n }\n \n pub fn main() {"}, {"sha": "40850186e28549c6b3a97cd52f4a34319677b457", "filename": "src/test/run-pass/trait-to-str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs?ref=58f248d9234f2a6b10b1537e4075d303ed60b605", "patch": "@@ -21,12 +21,12 @@ trait to_str {\n }\n \n impl to_str for int {\n-    fn to_str(&self) -> ~str { int::to_str(self) }\n+    fn to_str(&self) -> ~str { int::to_str(*self) }\n }\n \n impl<T:to_str> to_str for ~[T] {\n     fn to_str(&self) -> ~str {\n-        ~\"[\" + str::connect(vec::map(self, |e| e.to_str() ), ~\", \") + ~\"]\"\n+        ~\"[\" + str::connect(vec::map(*self, |e| e.to_str() ), ~\", \") + ~\"]\"\n     }\n }\n "}, {"sha": "a18965e9abc391ffe327a16ac0d5b0fba5473937", "filename": "src/test/run-pass/typeclasses-eq-example.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f248d9234f2a6b10b1537e4075d303ed60b605/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example.rs?ref=58f248d9234f2a6b10b1537e4075d303ed60b605", "patch": "@@ -18,7 +18,7 @@ enum Color { cyan, magenta, yellow, black }\n \n impl Equal for Color {\n     fn isEq(&self, a: Color) -> bool {\n-        match (self, a) {\n+        match (*self, a) {\n           (cyan, cyan)       => { true  }\n           (magenta, magenta) => { true  }\n           (yellow, yellow)   => { true  }\n@@ -35,7 +35,7 @@ enum ColorTree {\n \n impl Equal for ColorTree {\n     fn isEq(&self, a: ColorTree) -> bool {\n-        match (self, a) {\n+        match (*self, a) {\n           (leaf(x), leaf(y)) => { x.isEq(y) }\n           (branch(l1, r1), branch(l2, r2)) => { \n             (*l1).isEq(*l2) && (*r1).isEq(*r2)"}]}