{"sha": "23c87a1f53a502cfca3ced42a33cf1389f6c081e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzYzg3YTFmNTNhNTAyY2ZjYTNjZWQ0MmEzM2NmMTM4OWY2YzA4MWU=", "commit": {"author": {"name": "Saleem Jaffer", "email": "saleem@acko.com", "date": "2019-03-18T09:21:08Z"}, "committer": {"name": "Saleem Jaffer", "email": "saleem@acko.com", "date": "2019-03-18T09:33:30Z"}, "message": "fixed all compilation errors", "tree": {"sha": "428658fde49afde8024982ff61ae19d0ecab290e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/428658fde49afde8024982ff61ae19d0ecab290e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23c87a1f53a502cfca3ced42a33cf1389f6c081e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23c87a1f53a502cfca3ced42a33cf1389f6c081e", "html_url": "https://github.com/rust-lang/rust/commit/23c87a1f53a502cfca3ced42a33cf1389f6c081e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23c87a1f53a502cfca3ced42a33cf1389f6c081e/comments", "author": null, "committer": null, "parents": [{"sha": "a837b8a3688d746bc392a65524fe7d06fdb61263", "url": "https://api.github.com/repos/rust-lang/rust/commits/a837b8a3688d746bc392a65524fe7d06fdb61263", "html_url": "https://github.com/rust-lang/rust/commit/a837b8a3688d746bc392a65524fe7d06fdb61263"}], "stats": {"total": 71, "additions": 41, "deletions": 30}, "files": [{"sha": "62f454f1b9feab018ce1c88687b997d27e76703c", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/23c87a1f53a502cfca3ced42a33cf1389f6c081e/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c87a1f53a502cfca3ced42a33cf1389f6c081e/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=23c87a1f53a502cfca3ced42a33cf1389f6c081e", "patch": "@@ -1,7 +1,7 @@\n use rustc::middle::lang_items;\n use rustc::ty::{self, Ty, TypeFoldable};\n use rustc::ty::layout::{self, LayoutOf, HasTyCtxt};\n-use rustc::mir;\n+use rustc::mir::{self, Place, PlaceBase};\n use rustc::mir::interpret::EvalErrorKind;\n use rustc_target::abi::call::{ArgType, FnType, PassMode, IgnoreMode};\n use rustc_target::spec::abi::Abi;\n@@ -621,15 +621,19 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         // but specified directly in the code. This means it gets promoted\n                         // and we can then extract the value by evaluating the promoted.\n                         mir::Operand::Copy(\n-                            mir::Place::Base(mir::PlaceBase::Promoted(box(index, ty)))\n+                            Place::Base(PlaceBase::Static(\n+                                            box mir::Static {promoted: Some(promoted), ty, ..}\n+                                        ))\n                         ) |\n                         mir::Operand::Move(\n-                            mir::Place::Base(mir::PlaceBase::Promoted(box(index, ty)))\n+                            Place::Base(PlaceBase::Static(\n+                                            box mir::Static {promoted: Some(promoted), ty, ..}\n+                                        ))\n                         ) => {\n                             let param_env = ty::ParamEnv::reveal_all();\n                             let cid = mir::interpret::GlobalId {\n                                 instance: self.instance,\n-                                promoted: Some(index),\n+                                promoted: Some(promoted),\n                             };\n                             let c = bx.tcx().const_eval(param_env.and(cid));\n                             let (llval, ty) = self.simd_shuffle_indices("}, {"sha": "1608429b07024a1474919393ed341c58b1cb6fc0", "filename": "src/librustc_codegen_ssa/mir/place.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/23c87a1f53a502cfca3ced42a33cf1389f6c081e/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c87a1f53a502cfca3ced42a33cf1389f6c081e/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs?ref=23c87a1f53a502cfca3ced42a33cf1389f6c081e", "patch": "@@ -408,11 +408,13 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n         let result = match *place {\n             mir::Place::Base(mir::PlaceBase::Local(_)) => bug!(), // handled above\n-            mir::Place::Base(mir::PlaceBase::Promoted(box (index, ty))) => {\n+            mir::Place::Base(\n+                mir::PlaceBase::Static(box mir::Static { def_id: _, ty, promoted: Some(promoted) })\n+            ) => {\n                 let param_env = ty::ParamEnv::reveal_all();\n                 let cid = mir::interpret::GlobalId {\n                     instance: self.instance,\n-                    promoted: Some(index),\n+                    promoted: Some(promoted),\n                 };\n                 let layout = cx.layout_of(self.monomorphize(&ty));\n                 match bx.tcx().const_eval(param_env.and(cid)) {\n@@ -435,7 +437,9 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     }\n                 }\n             }\n-            mir::Place::Base(mir::PlaceBase::Static(box mir::Static { def_id, ty })) => {\n+            mir::Place::Base(\n+                mir::PlaceBase::Static(box mir::Static { def_id, ty, promoted: None })\n+            ) => {\n                 // NB: The layout of a static may be unsized as is the case when working\n                 // with a static that is an extern_type.\n                 let layout = cx.layout_of(self.monomorphize(&ty));"}, {"sha": "e538622103acaf4ff3954eb819e144cb7de17075", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/23c87a1f53a502cfca3ced42a33cf1389f6c081e/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c87a1f53a502cfca3ced42a33cf1389f6c081e/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=23c87a1f53a502cfca3ced42a33cf1389f6c081e", "patch": "@@ -1983,20 +1983,16 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             // The rules for promotion are made by `qualify_consts`, there wouldn't even be a\n             // `Place::Promoted` if the promotion weren't 100% legal. So we just forward this\n             Place::Base(PlaceBase::Static(ref static_)) => {\n-                if static_.promoted.is_some() {\n+                if static_.promoted.is_some() ||\n+                    (static_.promoted.is_none() &&\n+                        self.infcx.tcx.is_static(static_.def_id) == Some(hir::Mutability::MutMutable)\n+                    ){\n                     Ok(RootPlace {\n                         place,\n                         is_local_mutation_allowed,\n                     })\n                 } else {\n-                    if self.infcx.tcx.is_static(static_.def_id) != Some(hir::Mutability::MutMutable) {\n-                        Err(place)\n-                    } else {\n-                        Ok(RootPlace {\n-                            place,\n-                            is_local_mutation_allowed,\n-                        })\n-                    }\n+                    Err(place)\n                 }\n             }\n             Place::Projection(ref proj) => {"}, {"sha": "0452465f0b9d77baf02a4c1bd59a061e18af4e61", "filename": "src/librustc_mir/borrow_check/place_ext.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/23c87a1f53a502cfca3ced42a33cf1389f6c081e/src%2Flibrustc_mir%2Fborrow_check%2Fplace_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c87a1f53a502cfca3ced42a33cf1389f6c081e/src%2Flibrustc_mir%2Fborrow_check%2Fplace_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fplace_ext.rs?ref=23c87a1f53a502cfca3ced42a33cf1389f6c081e", "patch": "@@ -50,11 +50,8 @@ impl<'tcx> PlaceExt<'tcx> for Place<'tcx> {\n                 }\n             }\n             Place::Base(PlaceBase::Static(static_)) => {\n-                if static_.promoted.is_none() {\n-                    tcx.is_static(static_.def_id) == Some(hir::Mutability::MutMutable)\n-                } else {\n-                    false\n-                }\n+                static_.promoted.is_none() &&\n+                    (tcx.is_static(static_.def_id) == Some(hir::Mutability::MutMutable))\n             }\n             Place::Projection(proj) => match proj.elem {\n                 ProjectionElem::Field(..)"}, {"sha": "783751056d76b2918cb8427ea5e2662ac62b5a27", "filename": "src/librustc_mir/borrow_check/places_conflict.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23c87a1f53a502cfca3ced42a33cf1389f6c081e/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c87a1f53a502cfca3ced42a33cf1389f6c081e/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs?ref=23c87a1f53a502cfca3ced42a33cf1389f6c081e", "patch": "@@ -403,7 +403,7 @@ fn place_element_conflict<'a, 'gcx: 'tcx, 'tcx>(\n                         Overlap::Disjoint\n                     }\n                 },\n-                (p1_, p2_) => {\n+                (_, _) => {\n                     debug!(\"place_element_conflict: DISJOINT-STATIC-PROMOTED\");\n                     Overlap::Disjoint\n                 }"}, {"sha": "6089e491684e9f279b17eaf096c03a1c230ff844", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23c87a1f53a502cfca3ced42a33cf1389f6c081e/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c87a1f53a502cfca3ced42a33cf1389f6c081e/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=23c87a1f53a502cfca3ced42a33cf1389f6c081e", "patch": "@@ -584,7 +584,7 @@ where\n         use rustc::mir::PlaceBase;\n         use rustc::mir::Static;\n         Ok(match *mir_place {\n-            Base(PlaceBase::Static(box Static {promoted: Some(promoted), ty, ..})) => {\n+            Base(PlaceBase::Static(box Static {promoted: Some(promoted), ty: _, ..})) => {\n                 let instance = self.frame().instance;\n                 self.const_eval_raw(GlobalId {\n                     instance,"}, {"sha": "c5c3a1b8eca1800a53eb6996e55496dfd86ef6ec", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23c87a1f53a502cfca3ced42a33cf1389f6c081e/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c87a1f53a502cfca3ced42a33cf1389f6c081e/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=23c87a1f53a502cfca3ced42a33cf1389f6c081e", "patch": "@@ -283,7 +283,7 @@ impl<'a, 'mir, 'tcx> ConstPropagator<'a, 'mir, 'tcx> {\n                 // an `Index` projection would throw us off-track.\n                 _ => None,\n             },\n-            Place::Base(PlaceBase::Static(box Static {promoted: Some(promoted), ty, ..})) => {\n+            Place::Base(PlaceBase::Static(box Static {promoted: Some(promoted), ty: _, ..})) => {\n                 let generics = self.tcx.generics_of(self.source.def_id());\n                 if generics.requires_monomorphization(self.tcx) {\n                     // FIXME: can't handle code with generics"}, {"sha": "86b7da178791999ff327e47919a6fb966ce15aa6", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23c87a1f53a502cfca3ced42a33cf1389f6c081e/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c87a1f53a502cfca3ced42a33cf1389f6c081e/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=23c87a1f53a502cfca3ced42a33cf1389f6c081e", "patch": "@@ -702,6 +702,7 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Integrator<'a, 'tcx> {\n                     None => self.super_place(place, _ctxt, _location)\n                 }\n             },\n+            _ => self.super_place(place, _ctxt, _location)\n         }\n     }\n "}, {"sha": "d777a7b362b90c3b819616b0d5bee219c6a82c2a", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/23c87a1f53a502cfca3ced42a33cf1389f6c081e/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c87a1f53a502cfca3ced42a33cf1389f6c081e/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=23c87a1f53a502cfca3ced42a33cf1389f6c081e", "patch": "@@ -12,6 +12,7 @@\n //! initialization and can otherwise silence errors, if\n //! move analysis runs after promotion on broken MIR.\n \n+use rustc::hir::def_id::DefId;\n use rustc::mir::*;\n use rustc::mir::visit::{PlaceContext, MutatingUseContext, MutVisitor, Visitor};\n use rustc::mir::traversal::ReversePostorder;\n@@ -151,7 +152,8 @@ struct Promoter<'a, 'tcx: 'a> {\n \n     /// If true, all nested temps are also kept in the\n     /// source MIR, not moved to the promoted MIR.\n-    keep_original: bool\n+    keep_original: bool,\n+    def_id: DefId\n }\n \n impl<'a, 'tcx> Promoter<'a, 'tcx> {\n@@ -287,14 +289,19 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n     }\n \n     fn promote_candidate(mut self, candidate: Candidate) {\n+        use rustc::mir::Static;\n         let mut operand = {\n+            let def_id = self.def_id.clone();\n             let promoted = &mut self.promoted;\n             let promoted_id = Promoted::new(self.source.promoted.len());\n             let mut promoted_place = |ty, span| {\n                 promoted.span = span;\n                 promoted.local_decls[RETURN_PLACE] =\n                     LocalDecl::new_return_place(ty, span);\n-                Place::Base(PlaceBase::Promoted(box (promoted_id, ty)))\n+                Place::Base(PlaceBase::Static(\n+                        Box::new(Static { def_id: def_id, ty, promoted: Some(promoted_id) })\n+                    )\n+                )\n             };\n             let (blocks, local_decls) = self.source.basic_blocks_and_local_decls_mut();\n             match candidate {\n@@ -367,7 +374,8 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Promoter<'a, 'tcx> {\n pub fn promote_candidates<'a, 'tcx>(mir: &mut Mir<'tcx>,\n                                     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                     mut temps: IndexVec<Local, TempState>,\n-                                    candidates: Vec<Candidate>) {\n+                                    candidates: Vec<Candidate>,\n+                                    def_id: DefId) {\n     // Visit candidates in reverse, in case they're nested.\n     debug!(\"promote_candidates({:?})\", candidates);\n \n@@ -412,7 +420,8 @@ pub fn promote_candidates<'a, 'tcx>(mir: &mut Mir<'tcx>,\n             tcx,\n             source: mir,\n             temps: &mut temps,\n-            keep_original: false\n+            keep_original: false,\n+            def_id\n         };\n         promoter.promote_candidate(candidate);\n     }"}, {"sha": "c01ed4b1c59e820c9df00f788e4136f5a423aa59", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23c87a1f53a502cfca3ced42a33cf1389f6c081e/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23c87a1f53a502cfca3ced42a33cf1389f6c081e/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=23c87a1f53a502cfca3ced42a33cf1389f6c081e", "patch": "@@ -922,7 +922,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n         match *place {\n             Place::Base(PlaceBase::Local(_)) => {}\n             Place::Base(PlaceBase::Static(ref global)) => {\n-                assert!(global.promoted.is_none(), {});\n+                assert!(global.promoted.is_none());\n                 if self.tcx\n                        .get_attrs(global.def_id)\n                        .iter()\n@@ -1516,7 +1516,7 @@ impl MirPass for QualifyAndPromoteConstants {\n             };\n \n             // Do the actual promotion, now that we know what's viable.\n-            promote_consts::promote_candidates(mir, tcx, temps, candidates);\n+            promote_consts::promote_candidates(mir, tcx, temps, candidates, def_id);\n         } else {\n             if !mir.control_flow_destroyed.is_empty() {\n                 let mut locals = mir.vars_iter();"}]}