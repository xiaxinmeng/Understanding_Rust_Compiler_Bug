{"sha": "1f2dd3b56aec4d8f97eb0b0552c166ef549d3316", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmMmRkM2I1NmFlYzRkOGY5N2ViMGIwNTUyYzE2NmVmNTQ5ZDMzMTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-26T16:38:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-26T16:38:58Z"}, "message": "Auto merge of #75903 - jyn514:lint-refactor, r=GuillaumeGomez\n\nWarn about unknown or renamed lints in rustdoc\n\nFixes https://github.com/rust-lang/rust/issues/75884.\nThis is best reviewed one commit at a time.\nr? @GuillaumeGomez\n\nOriginally I tried to do a much broader refactoring that got rid of `init_lints` altogether. My reasoning is that now the lints aren't being run anymore (after https://github.com/rust-lang/rust/pull/73566), there's no need to ignore them explicitly. But it seems there are still some lints that aren't affected by setting `lint_mod` to a no-op:\n\n```\ndeny(pub_use_of_private_extern_crate)\ndeny(const_err)\nwarn(unused_imports)\n```\n\n(there are possibly more, these are just the ones that failed in the rustdoc test suite).\n\nSome of these seem like we really should be warning about, but that's a much larger change and I don't propose to make it here. So for the time being, this just adds the `unknown_lints` and `renamed_or_removed_lints` passes to the list of lints rustdoc warns about.", "tree": {"sha": "4d026d8391b8cdaa7304a2a7ec1dada75278f2c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d026d8391b8cdaa7304a2a7ec1dada75278f2c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f2dd3b56aec4d8f97eb0b0552c166ef549d3316", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f2dd3b56aec4d8f97eb0b0552c166ef549d3316", "html_url": "https://github.com/rust-lang/rust/commit/1f2dd3b56aec4d8f97eb0b0552c166ef549d3316", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f2dd3b56aec4d8f97eb0b0552c166ef549d3316/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ead62235a50e43b08a103d403d6fbfbc2b48352", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ead62235a50e43b08a103d403d6fbfbc2b48352", "html_url": "https://github.com/rust-lang/rust/commit/6ead62235a50e43b08a103d403d6fbfbc2b48352"}, {"sha": "e11b3ee742ff5e5163ae6123a37f9fa757804842", "url": "https://api.github.com/repos/rust-lang/rust/commits/e11b3ee742ff5e5163ae6123a37f9fa757804842", "html_url": "https://github.com/rust-lang/rust/commit/e11b3ee742ff5e5163ae6123a37f9fa757804842"}], "stats": {"total": 76, "additions": 58, "deletions": 18}, "files": [{"sha": "14df4e7aa8e59567d2594ae9a7069c51ee2dfb84", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1f2dd3b56aec4d8f97eb0b0552c166ef549d3316/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f2dd3b56aec4d8f97eb0b0552c166ef549d3316/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=1f2dd3b56aec4d8f97eb0b0552c166ef549d3316", "patch": "@@ -83,9 +83,9 @@ pub struct Options {\n     /// Codegen options strings to hand to the compiler.\n     pub codegen_options_strs: Vec<String>,\n     /// Debugging (`-Z`) options to pass to the compiler.\n-    pub debugging_options: DebuggingOptions,\n+    pub debugging_opts: DebuggingOptions,\n     /// Debugging (`-Z`) options strings to pass to the compiler.\n-    pub debugging_options_strs: Vec<String>,\n+    pub debugging_opts_strs: Vec<String>,\n     /// The target used to compile the crate against.\n     pub target: TargetTriple,\n     /// Edition used when reading the crate. Defaults to \"2015\". Also used by default when\n@@ -318,9 +318,9 @@ impl Options {\n         let error_format = config::parse_error_format(&matches, color, json_rendered);\n \n         let codegen_options = build_codegen_options(matches, error_format);\n-        let debugging_options = build_debugging_options(matches, error_format);\n+        let debugging_opts = build_debugging_options(matches, error_format);\n \n-        let diag = new_handler(error_format, None, &debugging_options);\n+        let diag = new_handler(error_format, None, &debugging_opts);\n \n         // check for deprecated options\n         check_deprecated_options(&matches, &diag);\n@@ -365,7 +365,7 @@ impl Options {\n             .iter()\n             .map(|s| SearchPath::from_cli_opt(s, error_format))\n             .collect();\n-        let externs = parse_externs(&matches, &debugging_options, error_format);\n+        let externs = parse_externs(&matches, &debugging_opts, error_format);\n         let extern_html_root_urls = match parse_extern_html_roots(&matches) {\n             Ok(ex) => ex,\n             Err(err) => {\n@@ -546,7 +546,7 @@ impl Options {\n         let persist_doctests = matches.opt_str(\"persist-doctests\").map(PathBuf::from);\n         let test_builder = matches.opt_str(\"test-builder\").map(PathBuf::from);\n         let codegen_options_strs = matches.opt_strs(\"C\");\n-        let debugging_options_strs = matches.opt_strs(\"Z\");\n+        let debugging_opts_strs = matches.opt_strs(\"Z\");\n         let lib_strs = matches.opt_strs(\"L\");\n         let extern_strs = matches.opt_strs(\"extern\");\n         let runtool = matches.opt_str(\"runtool\");\n@@ -569,8 +569,8 @@ impl Options {\n             cfgs,\n             codegen_options,\n             codegen_options_strs,\n-            debugging_options,\n-            debugging_options_strs,\n+            debugging_opts,\n+            debugging_opts_strs,\n             target,\n             edition,\n             maybe_sysroot,"}, {"sha": "89b217dc7d4f255d44a2794173f0ce10f2680656", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1f2dd3b56aec4d8f97eb0b0552c166ef549d3316/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f2dd3b56aec4d8f97eb0b0552c166ef549d3316/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=1f2dd3b56aec4d8f97eb0b0552c166ef549d3316", "patch": "@@ -234,7 +234,7 @@ pub fn new_handler(\n /// It returns a tuple containing:\n ///  * Vector of tuples of lints' name and their associated \"max\" level\n ///  * HashMap of lint id with their associated \"max\" level\n-pub fn init_lints<F>(\n+pub(crate) fn init_lints<F>(\n     mut allowed_lints: Vec<String>,\n     lint_opts: Vec<(String, lint::Level)>,\n     filter_call: F,\n@@ -257,7 +257,7 @@ where\n         .filter_map(|lint| {\n             // Permit feature-gated lints to avoid feature errors when trying to\n             // allow all lints.\n-            if lint.name == warnings_lint_name || lint.feature_gate.is_some() {\n+            if lint.feature_gate.is_some() || allowed_lints.iter().any(|l| lint.name == l) {\n                 None\n             } else {\n                 filter_call(lint)\n@@ -294,7 +294,7 @@ pub fn run_core(\n         externs,\n         mut cfgs,\n         codegen_options,\n-        debugging_options,\n+        debugging_opts,\n         target,\n         edition,\n         maybe_sysroot,\n@@ -328,19 +328,23 @@ pub fn run_core(\n     let private_doc_tests = rustc_lint::builtin::PRIVATE_DOC_TESTS.name;\n     let no_crate_level_docs = rustc_lint::builtin::MISSING_CRATE_LEVEL_DOCS.name;\n     let invalid_codeblock_attributes_name = rustc_lint::builtin::INVALID_CODEBLOCK_ATTRIBUTES.name;\n+    let renamed_and_removed_lints = rustc_lint::builtin::RENAMED_AND_REMOVED_LINTS.name;\n+    let unknown_lints = rustc_lint::builtin::UNKNOWN_LINTS.name;\n \n     // In addition to those specific lints, we also need to allow those given through\n     // command line, otherwise they'll get ignored and we don't want that.\n-    let allowed_lints = vec![\n+    let lints_to_show = vec![\n         intra_link_resolution_failure_name.to_owned(),\n         missing_docs.to_owned(),\n         missing_doc_example.to_owned(),\n         private_doc_tests.to_owned(),\n         no_crate_level_docs.to_owned(),\n         invalid_codeblock_attributes_name.to_owned(),\n+        renamed_and_removed_lints.to_owned(),\n+        unknown_lints.to_owned(),\n     ];\n \n-    let (lint_opts, lint_caps) = init_lints(allowed_lints, lint_opts, |lint| {\n+    let (lint_opts, lint_caps) = init_lints(lints_to_show, lint_opts, |lint| {\n         if lint.name == intra_link_resolution_failure_name\n             || lint.name == invalid_codeblock_attributes_name\n         {\n@@ -358,13 +362,13 @@ pub fn run_core(\n         search_paths: libs,\n         crate_types,\n         lint_opts: if !display_warnings { lint_opts } else { vec![] },\n-        lint_cap: Some(lint_cap.unwrap_or_else(|| lint::Forbid)),\n+        lint_cap,\n         cg: codegen_options,\n         externs,\n         target_triple: target,\n         unstable_features: UnstableFeatures::from_environment(),\n         actually_rustdoc: true,\n-        debugging_opts: debugging_options,\n+        debugging_opts,\n         error_format,\n         edition,\n         describe_lints,"}, {"sha": "b5e246b5d17a56a1f3d5d29a63d2654f8ac1a074", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f2dd3b56aec4d8f97eb0b0552c166ef549d3316/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f2dd3b56aec4d8f97eb0b0552c166ef549d3316/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=1f2dd3b56aec4d8f97eb0b0552c166ef549d3316", "patch": "@@ -472,7 +472,7 @@ fn run_renderer<T: formats::FormatRenderer>(\n }\n \n fn main_options(options: config::Options) -> MainResult {\n-    let diag = core::new_handler(options.error_format, None, &options.debugging_options);\n+    let diag = core::new_handler(options.error_format, None, &options.debugging_opts);\n \n     match (options.should_test, options.markdown_input()) {\n         (true, true) => return wrap_return(&diag, markdown::test(options)),\n@@ -488,7 +488,7 @@ fn main_options(options: config::Options) -> MainResult {\n \n     // need to move these items separately because we lose them by the time the closure is called,\n     // but we can't crates the Handler ahead of time because it's not Send\n-    let diag_opts = (options.error_format, options.edition, options.debugging_options.clone());\n+    let diag_opts = (options.error_format, options.edition, options.debugging_opts.clone());\n     let show_coverage = options.show_coverage;\n \n     // First, parse the crate and extract all relevant information."}, {"sha": "7b7c152d8abbf65e6c57a9b3dc41d9b712fff52e", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f2dd3b56aec4d8f97eb0b0552c166ef549d3316/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f2dd3b56aec4d8f97eb0b0552c166ef549d3316/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=1f2dd3b56aec4d8f97eb0b0552c166ef549d3316", "patch": "@@ -281,7 +281,7 @@ fn run_test(\n     for codegen_options_str in &options.codegen_options_strs {\n         compiler.arg(\"-C\").arg(&codegen_options_str);\n     }\n-    for debugging_option_str in &options.debugging_options_strs {\n+    for debugging_option_str in &options.debugging_opts_strs {\n         compiler.arg(\"-Z\").arg(&debugging_option_str);\n     }\n     if no_run && !compile_fail {"}, {"sha": "7faa82ea429c2b94d639448be7e4a9fff49ed222", "filename": "src/test/rustdoc-ui/unknown-renamed-lints.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f2dd3b56aec4d8f97eb0b0552c166ef549d3316/src%2Ftest%2Frustdoc-ui%2Funknown-renamed-lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f2dd3b56aec4d8f97eb0b0552c166ef549d3316/src%2Ftest%2Frustdoc-ui%2Funknown-renamed-lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Funknown-renamed-lints.rs?ref=1f2dd3b56aec4d8f97eb0b0552c166ef549d3316", "patch": "@@ -0,0 +1,8 @@\n+#![deny(unknown_lints)]\n+//~^ NOTE lint level is defined\n+#![deny(renamed_and_removed_lints)]\n+//~^ NOTE lint level is defined\n+#![deny(x)]\n+//~^ ERROR unknown lint\n+#![deny(intra_doc_link_resolution_failure)]\n+//~^ ERROR lint `intra_doc_link_resolution_failure` has been renamed"}, {"sha": "f0917f194bb0895cdd1f2e747b21dda37f947e12", "filename": "src/test/rustdoc-ui/unknown-renamed-lints.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1f2dd3b56aec4d8f97eb0b0552c166ef549d3316/src%2Ftest%2Frustdoc-ui%2Funknown-renamed-lints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f2dd3b56aec4d8f97eb0b0552c166ef549d3316/src%2Ftest%2Frustdoc-ui%2Funknown-renamed-lints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Funknown-renamed-lints.stderr?ref=1f2dd3b56aec4d8f97eb0b0552c166ef549d3316", "patch": "@@ -0,0 +1,28 @@\n+error: unknown lint: `x`\n+  --> $DIR/unknown-renamed-lints.rs:5:9\n+   |\n+LL | #![deny(x)]\n+   |         ^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/unknown-renamed-lints.rs:1:9\n+   |\n+LL | #![deny(unknown_lints)]\n+   |         ^^^^^^^^^^^^^\n+\n+error: lint `intra_doc_link_resolution_failure` has been renamed to `broken_intra_doc_links`\n+  --> $DIR/unknown-renamed-lints.rs:7:9\n+   |\n+LL | #![deny(intra_doc_link_resolution_failure)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `broken_intra_doc_links`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/unknown-renamed-lints.rs:3:9\n+   |\n+LL | #![deny(renamed_and_removed_lints)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: Compilation failed, aborting rustdoc\n+\n+error: aborting due to 3 previous errors\n+"}]}