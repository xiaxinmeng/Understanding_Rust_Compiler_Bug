{"sha": "120691c590c4309fda31994931b9a561b4249c33", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyMDY5MWM1OTBjNDMwOWZkYTMxOTk0OTMxYjlhNTYxYjQyNDljMzM=", "commit": {"author": {"name": "Ali\u00e9nore Bouttefeux", "email": "alienore.bouttefeux@gmail.com", "date": "2021-05-22T10:03:37Z"}, "committer": {"name": "Ali\u00e9nore Bouttefeux", "email": "alienore.bouttefeux@gmail.com", "date": "2021-05-22T10:38:48Z"}, "message": "change from review and show full type if it can be deref", "tree": {"sha": "695814ce5cb4f0d67d5e12b604129bc097d66f6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/695814ce5cb4f0d67d5e12b604129bc097d66f6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/120691c590c4309fda31994931b9a561b4249c33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/120691c590c4309fda31994931b9a561b4249c33", "html_url": "https://github.com/rust-lang/rust/commit/120691c590c4309fda31994931b9a561b4249c33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/120691c590c4309fda31994931b9a561b4249c33/comments", "author": {"login": "ABouttefeux", "id": 77335613, "node_id": "MDQ6VXNlcjc3MzM1NjEz", "avatar_url": "https://avatars.githubusercontent.com/u/77335613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ABouttefeux", "html_url": "https://github.com/ABouttefeux", "followers_url": "https://api.github.com/users/ABouttefeux/followers", "following_url": "https://api.github.com/users/ABouttefeux/following{/other_user}", "gists_url": "https://api.github.com/users/ABouttefeux/gists{/gist_id}", "starred_url": "https://api.github.com/users/ABouttefeux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ABouttefeux/subscriptions", "organizations_url": "https://api.github.com/users/ABouttefeux/orgs", "repos_url": "https://api.github.com/users/ABouttefeux/repos", "events_url": "https://api.github.com/users/ABouttefeux/events{/privacy}", "received_events_url": "https://api.github.com/users/ABouttefeux/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ABouttefeux", "id": 77335613, "node_id": "MDQ6VXNlcjc3MzM1NjEz", "avatar_url": "https://avatars.githubusercontent.com/u/77335613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ABouttefeux", "html_url": "https://github.com/ABouttefeux", "followers_url": "https://api.github.com/users/ABouttefeux/followers", "following_url": "https://api.github.com/users/ABouttefeux/following{/other_user}", "gists_url": "https://api.github.com/users/ABouttefeux/gists{/gist_id}", "starred_url": "https://api.github.com/users/ABouttefeux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ABouttefeux/subscriptions", "organizations_url": "https://api.github.com/users/ABouttefeux/orgs", "repos_url": "https://api.github.com/users/ABouttefeux/repos", "events_url": "https://api.github.com/users/ABouttefeux/events{/privacy}", "received_events_url": "https://api.github.com/users/ABouttefeux/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b802ed6c9fd23214f9201b8e05193c8a2240e73", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b802ed6c9fd23214f9201b8e05193c8a2240e73", "html_url": "https://github.com/rust-lang/rust/commit/5b802ed6c9fd23214f9201b8e05193c8a2240e73"}], "stats": {"total": 191, "additions": 105, "deletions": 86}, "files": [{"sha": "109cd3e4bc86a0ef301304d620cdb4619ae4b255", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 37, "deletions": 52, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/120691c590c4309fda31994931b9a561b4249c33/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120691c590c4309fda31994931b9a561b4249c33/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=120691c590c4309fda31994931b9a561b4249c33", "patch": "@@ -388,27 +388,30 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         let mut ty_str_reported = ty_str.clone();\n                         if let ty::Adt(_, ref generics) = actual.kind() {\n                             if generics.len() > 0 {\n-                                let candidate_numbers: usize = self\n-                                    .autoderef(span, actual)\n-                                    .map(|(ty, _)| {\n-                                        if let ty::Adt(ref adt_deref, _) = ty.kind() {\n-                                            self.tcx\n-                                                .inherent_impls(adt_deref.did)\n-                                                .iter()\n-                                                .filter_map(|def_id| {\n-                                                    self.associated_item(\n-                                                        *def_id,\n-                                                        item_name,\n-                                                        Namespace::ValueNS,\n-                                                    )\n-                                                })\n-                                                .count()\n-                                        } else {\n-                                            0\n-                                        }\n-                                    })\n-                                    .sum();\n-                                if candidate_numbers == 0 && unsatisfied_predicates.is_empty() {\n+                                let mut autoderef = self.autoderef(span, actual);\n+                                let candidate_found = autoderef.any(|(ty, _)| {\n+                                    if let ty::Adt(ref adt_deref, _) = ty.kind() {\n+                                        self.tcx\n+                                            .inherent_impls(adt_deref.did)\n+                                            .iter()\n+                                            .filter_map(|def_id| {\n+                                                self.associated_item(\n+                                                    *def_id,\n+                                                    item_name,\n+                                                    Namespace::ValueNS,\n+                                                )\n+                                            })\n+                                            .count()\n+                                            >= 1\n+                                    } else {\n+                                        false\n+                                    }\n+                                });\n+                                let has_deref = autoderef.step_count() > 0;\n+                                if !candidate_found\n+                                    && !has_deref\n+                                    && unsatisfied_predicates.is_empty()\n+                                {\n                                     if let Some((path_string, _)) = ty_str.split_once('<') {\n                                         ty_str_reported = path_string.to_string();\n                                     }\n@@ -501,8 +504,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                                 // So we avoid suggestion method with Box<Self>\n                                                 // for instance\n                                                 self.tcx.at(span).type_of(*def_id) != actual\n-                                                    && self.tcx.at(span).type_of(*def_id)\n-                                                        != rcvr_ty\n+                                                    && self.tcx.at(span).type_of(*def_id) != rcvr_ty\n                                             }\n                                             (Mode::Path, false, _) => true,\n                                             _ => false,\n@@ -515,38 +517,21 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             if inherent_impls_candidate.len() > 0 {\n                                 inherent_impls_candidate.sort();\n                                 inherent_impls_candidate.dedup();\n+                                let type_candidates = inherent_impls_candidate\n+                                    .iter()\n+                                    .map(|impl_item| self.tcx.at(span).type_of(*impl_item))\n+                                    .collect::<Vec<_>>();\n                                 // number of type to shows at most.\n-                                const LIMIT: usize = 3;\n-                                let mut note = format!(\"the {item_kind} was found for\");\n-                                if inherent_impls_candidate.len() > 1 {\n-                                    for impl_item in inherent_impls_candidate.iter().take(LIMIT - 2)\n-                                    {\n-                                        let impl_ty = self.tcx.at(span).type_of(*impl_item);\n-                                        note = format!(\"{} {},\", note, impl_ty);\n-                                    }\n-                                    let impl_ty = self.tcx.at(span).type_of(\n-                                        inherent_impls_candidate\n-                                            [inherent_impls_candidate.len() - 1],\n-                                    );\n-                                    if inherent_impls_candidate.len() > LIMIT {\n-                                        note = format!(\"{} {},\", note, impl_ty);\n-                                    } else {\n-                                        note = format!(\"{} {} and\", note, impl_ty);\n-                                    }\n+                                let limit = if type_candidates.len() == 4 { 4 } else { 3 };\n+                                for ty in type_candidates.iter().take(limit) {\n+                                    err.note(&format!(\"the {item_kind} was found for {}\", ty));\n                                 }\n-                                let impl_ty = self\n-                                    .tcx\n-                                    .at(span)\n-                                    .type_of(*inherent_impls_candidate.last().unwrap());\n-                                note = format!(\"{} {}\", note, impl_ty);\n-                                if inherent_impls_candidate.len() > LIMIT {\n-                                    note = format!(\n-                                        \"{} and {} more\",\n-                                        note,\n-                                        inherent_impls_candidate.len() - LIMIT\n-                                    );\n+                                if type_candidates.len() > limit {\n+                                    err.note(&format!(\n+                                        \"the {item_kind} was found for {} more types\",\n+                                        type_candidates.len() - limit\n+                                    ));\n                                 }\n-                                err.note(&format!(\"{}.\", note));\n                             }\n                         }\n                     } else {"}, {"sha": "eb8447ff0f3e7c03f7afe7ad963d3afdebf76857", "filename": "src/test/ui/auto-ref-slice-plus-ref.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/120691c590c4309fda31994931b9a561b4249c33/src%2Ftest%2Fui%2Fauto-ref-slice-plus-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120691c590c4309fda31994931b9a561b4249c33/src%2Ftest%2Fui%2Fauto-ref-slice-plus-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-ref-slice-plus-ref.stderr?ref=120691c590c4309fda31994931b9a561b4249c33", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `test_mut` found for struct `Vec` in the current scope\n+error[E0599]: no method named `test_mut` found for struct `Vec<{integer}>` in the current scope\n   --> $DIR/auto-ref-slice-plus-ref.rs:7:7\n    |\n LL |     a.test_mut();\n@@ -11,7 +11,7 @@ note: `MyIter` defines an item `test_mut`, perhaps you need to implement it\n LL | trait MyIter {\n    | ^^^^^^^^^^^^\n \n-error[E0599]: no method named `test` found for struct `Vec` in the current scope\n+error[E0599]: no method named `test` found for struct `Vec<{integer}>` in the current scope\n   --> $DIR/auto-ref-slice-plus-ref.rs:8:7\n    |\n LL |     a.test();"}, {"sha": "56d10d88d8b25a68cb0c61d34f47c97efd8804da", "filename": "src/test/ui/class-cast-to-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120691c590c4309fda31994931b9a561b4249c33/src%2Ftest%2Fui%2Fclass-cast-to-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120691c590c4309fda31994931b9a561b4249c33/src%2Ftest%2Fui%2Fclass-cast-to-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclass-cast-to-trait.stderr?ref=120691c590c4309fda31994931b9a561b4249c33", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `eat` found for struct `Box` in the current scope\n+error[E0599]: no method named `eat` found for struct `Box<dyn Noisy>` in the current scope\n   --> $DIR/class-cast-to-trait.rs:53:8\n    |\n LL |   nyan.eat();"}, {"sha": "64ddcb81c0a9be3e6fb609e9d31946d9ff2ac054", "filename": "src/test/ui/impl-trait/no-method-suggested-traits.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/120691c590c4309fda31994931b9a561b4249c33/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120691c590c4309fda31994931b9a561b4249c33/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr?ref=120691c590c4309fda31994931b9a561b4249c33", "patch": "@@ -16,7 +16,7 @@ LL | use no_method_suggested_traits::qux::PrivPub;\n LL | use no_method_suggested_traits::Reexported;\n    |\n \n-error[E0599]: no method named `method` found for struct `Rc` in the current scope\n+error[E0599]: no method named `method` found for struct `Rc<&mut Box<&u32>>` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:26:44\n    |\n LL |     std::rc::Rc::new(&mut Box::new(&1u32)).method();\n@@ -46,7 +46,7 @@ help: the following trait is implemented but not in scope; perhaps add a `use` f\n LL | use foo::Bar;\n    |\n \n-error[E0599]: no method named `method` found for struct `Rc` in the current scope\n+error[E0599]: no method named `method` found for struct `Rc<&mut Box<&char>>` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:32:43\n    |\n LL |     std::rc::Rc::new(&mut Box::new(&'a')).method();\n@@ -70,7 +70,7 @@ help: the following trait is implemented but not in scope; perhaps add a `use` f\n LL | use no_method_suggested_traits::foo::PubPub;\n    |\n \n-error[E0599]: no method named `method` found for struct `Rc` in the current scope\n+error[E0599]: no method named `method` found for struct `Rc<&mut Box<&i32>>` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:37:44\n    |\n LL |     std::rc::Rc::new(&mut Box::new(&1i32)).method();\n@@ -98,7 +98,7 @@ LL |     Foo.method();\n            candidate #3: `no_method_suggested_traits::qux::PrivPub`\n            candidate #4: `Reexported`\n \n-error[E0599]: no method named `method` found for struct `Rc` in the current scope\n+error[E0599]: no method named `method` found for struct `Rc<&mut Box<&Foo>>` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:42:43\n    |\n LL |     std::rc::Rc::new(&mut Box::new(&Foo)).method();\n@@ -124,7 +124,7 @@ note: `foo::Bar` defines an item `method2`, perhaps you need to implement it\n LL |     pub trait Bar {\n    |     ^^^^^^^^^^^^^\n \n-error[E0599]: no method named `method2` found for struct `Rc` in the current scope\n+error[E0599]: no method named `method2` found for struct `Rc<&mut Box<&u64>>` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:47:44\n    |\n LL |     std::rc::Rc::new(&mut Box::new(&1u64)).method2();\n@@ -150,7 +150,7 @@ note: `foo::Bar` defines an item `method2`, perhaps you need to implement it\n LL |     pub trait Bar {\n    |     ^^^^^^^^^^^^^\n \n-error[E0599]: no method named `method2` found for struct `Rc` in the current scope\n+error[E0599]: no method named `method2` found for struct `Rc<&mut Box<&no_method_suggested_traits::Foo>>` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:52:71\n    |\n LL |     std::rc::Rc::new(&mut Box::new(&no_method_suggested_traits::Foo)).method2();\n@@ -176,7 +176,7 @@ note: `foo::Bar` defines an item `method2`, perhaps you need to implement it\n LL |     pub trait Bar {\n    |     ^^^^^^^^^^^^^\n \n-error[E0599]: no method named `method2` found for struct `Rc` in the current scope\n+error[E0599]: no method named `method2` found for struct `Rc<&mut Box<&no_method_suggested_traits::Bar>>` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:56:74\n    |\n LL |     std::rc::Rc::new(&mut Box::new(&no_method_suggested_traits::Bar::X)).method2();\n@@ -202,7 +202,7 @@ LL |     Foo.method3();\n    = note: the following trait defines an item `method3`, perhaps you need to implement it:\n            candidate #1: `PubPub`\n \n-error[E0599]: no method named `method3` found for struct `Rc` in the current scope\n+error[E0599]: no method named `method3` found for struct `Rc<&mut Box<&Foo>>` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:61:43\n    |\n LL |     std::rc::Rc::new(&mut Box::new(&Foo)).method3();\n@@ -225,7 +225,7 @@ LL |     Bar::X.method3();\n    = note: the following trait defines an item `method3`, perhaps you need to implement it:\n            candidate #1: `PubPub`\n \n-error[E0599]: no method named `method3` found for struct `Rc` in the current scope\n+error[E0599]: no method named `method3` found for struct `Rc<&mut Box<&Bar>>` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:65:46\n    |\n LL |     std::rc::Rc::new(&mut Box::new(&Bar::X)).method3();\n@@ -241,7 +241,7 @@ error[E0599]: no method named `method3` found for type `usize` in the current sc\n LL |     1_usize.method3();\n    |             ^^^^^^^ method not found in `usize`\n \n-error[E0599]: no method named `method3` found for struct `Rc` in the current scope\n+error[E0599]: no method named `method3` found for struct `Rc<&mut Box<&usize>>` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:70:47\n    |\n LL |     std::rc::Rc::new(&mut Box::new(&1_usize)).method3();\n@@ -253,7 +253,7 @@ error[E0599]: no method named `method3` found for struct `no_method_suggested_tr\n LL |     no_method_suggested_traits::Foo.method3();\n    |                                     ^^^^^^^ method not found in `no_method_suggested_traits::Foo`\n \n-error[E0599]: no method named `method3` found for struct `Rc` in the current scope\n+error[E0599]: no method named `method3` found for struct `Rc<&mut Box<&no_method_suggested_traits::Foo>>` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:72:71\n    |\n LL |     std::rc::Rc::new(&mut Box::new(&no_method_suggested_traits::Foo)).method3();\n@@ -265,7 +265,7 @@ error[E0599]: no method named `method3` found for enum `no_method_suggested_trai\n LL |     no_method_suggested_traits::Bar::X.method3();\n    |                                        ^^^^^^^ method not found in `no_method_suggested_traits::Bar`\n \n-error[E0599]: no method named `method3` found for struct `Rc` in the current scope\n+error[E0599]: no method named `method3` found for struct `Rc<&mut Box<&no_method_suggested_traits::Bar>>` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:75:74\n    |\n LL |     std::rc::Rc::new(&mut Box::new(&no_method_suggested_traits::Bar::X)).method3();"}, {"sha": "76a6b447ac1003db3f54d71c42dc330cbe7610bd", "filename": "src/test/ui/issues/issue-30123.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120691c590c4309fda31994931b9a561b4249c33/src%2Ftest%2Fui%2Fissues%2Fissue-30123.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120691c590c4309fda31994931b9a561b4249c33/src%2Ftest%2Fui%2Fissues%2Fissue-30123.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30123.stderr?ref=120691c590c4309fda31994931b9a561b4249c33", "patch": "@@ -4,7 +4,7 @@ error[E0599]: no function or associated item named `new_undirected` found for st\n LL |     let ug = Graph::<i32, i32>::new_undirected();\n    |                                 ^^^^^^^^^^^^^^ function or associated item not found in `issue_30123_aux::Graph<i32, i32>`\n    |\n-   = note: The function or associated item was found for issue_30123_aux::Graph<N, E, Undirected>.\n+   = note: the function or associated item was found for issue_30123_aux::Graph<N, E, Undirected>\n \n error: aborting due to previous error\n "}, {"sha": "3df928b5d804db01e868ea0f9277252d43d18d97", "filename": "src/test/ui/methods/method-not-found-generic-arg-elision.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/120691c590c4309fda31994931b9a561b4249c33/src%2Ftest%2Fui%2Fmethods%2Fmethod-not-found-generic-arg-elision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/120691c590c4309fda31994931b9a561b4249c33/src%2Ftest%2Fui%2Fmethods%2Fmethod-not-found-generic-arg-elision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-not-found-generic-arg-elision.rs?ref=120691c590c4309fda31994931b9a561b4249c33", "patch": "@@ -1,6 +1,7 @@\n // Test for issue 81576\n // Remove generic arguments if no method is found for all possible generic argument\n \n+use std::marker::PhantomData;\n \n struct Wrapper2<'a, T, const C: usize> {\n     x: &'a T,\n@@ -19,8 +20,6 @@ impl<'a, const C: usize> Wrapper2<'a, i32, C> {\n }\n struct Wrapper<T>(T);\n \n-\n-\n impl Wrapper<i8> {\n     fn method(&self) {}\n }\n@@ -62,6 +61,20 @@ impl Other {\n     fn other(&self) {}\n }\n \n+struct Struct<T>{\n+    _phatom: PhantomData<T>\n+}\n+\n+impl<T> Default for Struct<T> {\n+    fn default() -> Self {\n+        Self{ _phatom: PhantomData }\n+    }\n+}\n+\n+impl<T: Clone + Copy + PartialEq + Eq + PartialOrd + Ord> Struct<T> {\n+    fn method(&self) {}\n+}\n+\n fn main() {\n     let point_f64 = Point{ x: 1_f64, y: 1_f64};\n     let d = point_f64.distance();\n@@ -87,4 +100,7 @@ fn main() {\n     let a = vec![1, 2, 3];\n     a.not_found();\n     //~^ ERROR no method named `not_found` found for struct `Vec\n+    let s = Struct::<f64>::default();\n+    s.method();\n+    //~^ ERROR the method `method` exists for struct `Struct<f64>`, but its trait bounds were not satisfied\n }"}, {"sha": "4a9cfb4fc804e86861f30dbf496e1051aa866df5", "filename": "src/test/ui/methods/method-not-found-generic-arg-elision.stderr", "status": "modified", "additions": 32, "deletions": 14, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/120691c590c4309fda31994931b9a561b4249c33/src%2Ftest%2Fui%2Fmethods%2Fmethod-not-found-generic-arg-elision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120691c590c4309fda31994931b9a561b4249c33/src%2Ftest%2Fui%2Fmethods%2Fmethod-not-found-generic-arg-elision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-not-found-generic-arg-elision.stderr?ref=120691c590c4309fda31994931b9a561b4249c33", "patch": "@@ -1,16 +1,16 @@\n error[E0599]: no method named `distance` found for struct `Point<i32>` in the current scope\n-  --> $DIR/method-not-found-generic-arg-elision.rs:69:23\n+  --> $DIR/method-not-found-generic-arg-elision.rs:82:23\n    |\n LL | struct Point<T> {\n    | --------------- method `distance` not found for this\n ...\n LL |     let d = point_i32.distance();\n    |                       ^^^^^^^^ method not found in `Point<i32>`\n    |\n-   = note: The method was found for Point<f64>.\n+   = note: the method was found for Point<f64>\n \n error[E0599]: no method named `other` found for struct `Point` in the current scope\n-  --> $DIR/method-not-found-generic-arg-elision.rs:71:23\n+  --> $DIR/method-not-found-generic-arg-elision.rs:84:23\n    |\n LL | struct Point<T> {\n    | --------------- method `other` not found for this\n@@ -19,24 +19,27 @@ LL |     let d = point_i32.other();\n    |                       ^^^^^ method not found in `Point<i32>`\n \n error[E0599]: no method named `extend` found for struct `Map` in the current scope\n-  --> $DIR/method-not-found-generic-arg-elision.rs:74:29\n+  --> $DIR/method-not-found-generic-arg-elision.rs:87:29\n    |\n LL |     v.iter().map(|x| x * x).extend(std::iter::once(100));\n-   |                             ^^^^^^ method not found in `Map<std::slice::Iter<'_, i32>, [closure@$DIR/method-not-found-generic-arg-elision.rs:74:18: 74:27]>`\n+   |                             ^^^^^^ method not found in `Map<std::slice::Iter<'_, i32>, [closure@$DIR/method-not-found-generic-arg-elision.rs:87:18: 87:27]>`\n \n error[E0599]: no method named `method` found for struct `Wrapper<bool>` in the current scope\n-  --> $DIR/method-not-found-generic-arg-elision.rs:77:13\n+  --> $DIR/method-not-found-generic-arg-elision.rs:90:13\n    |\n LL | struct Wrapper<T>(T);\n    | --------------------- method `method` not found for this\n ...\n LL |     wrapper.method();\n    |             ^^^^^^ method not found in `Wrapper<bool>`\n    |\n-   = note: The method was found for Wrapper<i8>, Wrapper<u16>, Wrapper<u16> and 3 more.\n+   = note: the method was found for Wrapper<i8>\n+   = note: the method was found for Wrapper<i16>\n+   = note: the method was found for Wrapper<i32>\n+   = note: the method was found for 3 more types\n \n error[E0599]: no method named `other` found for struct `Wrapper` in the current scope\n-  --> $DIR/method-not-found-generic-arg-elision.rs:79:13\n+  --> $DIR/method-not-found-generic-arg-elision.rs:92:13\n    |\n LL | struct Wrapper<T>(T);\n    | --------------------- method `other` not found for this\n@@ -45,31 +48,46 @@ LL |     wrapper.other();\n    |             ^^^^^ method not found in `Wrapper<bool>`\n \n error[E0599]: no method named `method` found for struct `Wrapper2<'_, bool, 3_usize>` in the current scope\n-  --> $DIR/method-not-found-generic-arg-elision.rs:83:13\n+  --> $DIR/method-not-found-generic-arg-elision.rs:96:13\n    |\n LL | struct Wrapper2<'a, T, const C: usize> {\n    | -------------------------------------- method `method` not found for this\n ...\n LL |     wrapper.method();\n    |             ^^^^^^ method not found in `Wrapper2<'_, bool, 3_usize>`\n    |\n-   = note: The method was found for Wrapper2<'a, i8, C>, Wrapper2<'a, i32, C> and Wrapper2<'a, i32, C>.\n+   = note: the method was found for Wrapper2<'a, i8, C>\n+   = note: the method was found for Wrapper2<'a, i16, C>\n+   = note: the method was found for Wrapper2<'a, i32, C>\n \n error[E0599]: no method named `other` found for struct `Wrapper2` in the current scope\n-  --> $DIR/method-not-found-generic-arg-elision.rs:85:13\n+  --> $DIR/method-not-found-generic-arg-elision.rs:98:13\n    |\n LL | struct Wrapper2<'a, T, const C: usize> {\n    | -------------------------------------- method `other` not found for this\n ...\n LL |     wrapper.other();\n    |             ^^^^^ method not found in `Wrapper2<'_, bool, 3_usize>`\n \n-error[E0599]: no method named `not_found` found for struct `Vec` in the current scope\n-  --> $DIR/method-not-found-generic-arg-elision.rs:88:7\n+error[E0599]: no method named `not_found` found for struct `Vec<{integer}>` in the current scope\n+  --> $DIR/method-not-found-generic-arg-elision.rs:101:7\n    |\n LL |     a.not_found();\n    |       ^^^^^^^^^ method not found in `Vec<{integer}>`\n \n-error: aborting due to 8 previous errors\n+error[E0599]: the method `method` exists for struct `Struct<f64>`, but its trait bounds were not satisfied\n+  --> $DIR/method-not-found-generic-arg-elision.rs:104:7\n+   |\n+LL | struct Struct<T>{\n+   | ---------------- method `method` not found for this\n+...\n+LL |     s.method();\n+   |       ^^^^^^ method cannot be called on `Struct<f64>` due to unsatisfied trait bounds\n+   |\n+   = note: the following trait bounds were not satisfied:\n+           `f64: Eq`\n+           `f64: Ord`\n+\n+error: aborting due to 9 previous errors\n \n For more information about this error, try `rustc --explain E0599`."}, {"sha": "a477425edc81b75a564283bd61c6f5988e5b568d", "filename": "src/test/ui/object-pointer-types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120691c590c4309fda31994931b9a561b4249c33/src%2Ftest%2Fui%2Fobject-pointer-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120691c590c4309fda31994931b9a561b4249c33/src%2Ftest%2Fui%2Fobject-pointer-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-pointer-types.stderr?ref=120691c590c4309fda31994931b9a561b4249c33", "patch": "@@ -16,7 +16,7 @@ LL |     fn owned(self: Box<Self>);\n LL |     x.owned();\n    |       ^^^^^ method not found in `&mut dyn Foo`\n \n-error[E0599]: no method named `managed` found for struct `Box` in the current scope\n+error[E0599]: no method named `managed` found for struct `Box<(dyn Foo + 'static)>` in the current scope\n   --> $DIR/object-pointer-types.rs:23:7\n    |\n LL |     x.managed();"}, {"sha": "027d7a0e0e448188147d87602f87a019e81456e1", "filename": "src/test/ui/resolve/issue-82865.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/120691c590c4309fda31994931b9a561b4249c33/src%2Ftest%2Fui%2Fresolve%2Fissue-82865.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/120691c590c4309fda31994931b9a561b4249c33/src%2Ftest%2Fui%2Fresolve%2Fissue-82865.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-82865.stderr?ref=120691c590c4309fda31994931b9a561b4249c33", "patch": "@@ -4,7 +4,7 @@ error[E0433]: failed to resolve: maybe a missing crate `x`?\n LL | use x::y::z;\n    |     ^ maybe a missing crate `x`?\n \n-error[E0599]: no function or associated item named `z` found for struct `Box` in the current scope\n+error[E0599]: no function or associated item named `z` found for struct `Box<_, _>` in the current scope\n   --> $DIR/issue-82865.rs:8:10\n    |\n LL |     Box::z"}]}