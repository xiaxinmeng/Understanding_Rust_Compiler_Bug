{"sha": "d811f844a5e992f8a2533fc440421a4b3cf7056f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4MTFmODQ0YTVlOTkyZjhhMjUzM2ZjNDQwNDIxYTRiM2NmNzA1NmY=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-11-13T05:03:08Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-11-13T11:20:25Z"}, "message": "Rollup merge of #55804 - QuietMisdreavus:eager-crate-inline, r=pnkfelix\n\nrustdoc: don't inline `pub use some_crate` unless directly asked to\n\ncc https://github.com/rust-lang/rust/issues/52509 (fixes it? i'm not sure about my comment summoning the docs team)\n\nWhen rustdoc encounters a `pub use` statement for an item from another crate, it will eagerly inline its contents into your crate. This somewhat clashes with the new paths behavior in Rust 2018, in which crates are implicitly linked and re-exported with `pub use` instead of `pub extern crate`. In rust 2015, `pub extern crate` would only create a single line for its re-export in the docs, so i'm making it do the same with `pub use some_crate;`.\n\nThe exact new behavior is like this: *If rustdoc sees a `pub use` statement, and the item being imported is the root of another crate, it will only inline it if `#[doc(inline)]` is provided.* I made it only avoid crate roots because otherwise it would stop inlining any module, which may or may not be what people want.", "tree": {"sha": "b59248f10b149688c0ebc5ce310c1bebe4bfda22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b59248f10b149688c0ebc5ce310c1bebe4bfda22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d811f844a5e992f8a2533fc440421a4b3cf7056f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlvqs3kACgkQ/vbIBR0O\nATzg2Q/7BRGny4+pFmpjn9H81bAnaAX7D4zwQChgwUqS3BWRfyRmKOj4xrT92Tp7\n/o9wtd1u16uTyrlxrqEX8LmYCq6ATyjO7DPPnvCMDW0xsmvZRdDzMhKePR/OavsE\nwJDJyssJ3gJqH6s7yQMQIf2CZbtFBl3tctEUS/8ZrOUEYRyisAORjc1Pia39rHh7\nWKDuLEATZ2pPtZs18myzacVdtwdvreq332wLg1DY0Crk/gz3aU/fHn5g11wWNI0a\nLC7XtUhMXR+QshyAGhMzNZKo7hOWnWBprpnUqPjajrv5hxnQTaIMqYDSIR8qfySW\nTg7VU3rypVf+5yU+KJBvShzqcEfFARny9Xe8Dtml7Cid7BYLvsdCcHSBR95rXzKF\nZLlqYNKf1ayreoYHdROVlC7KfJc7pxpqYy3Vvt9WwoHHBdA8ggx3peZz8D0W3Nqw\nTxobiXbZ+reBBjPfI7zAEewgAyfIp+klKkMToonsRNvAUXfqmppvAdJBkAnZmrk5\nK8Vfo3pRyezjDxncF/u04DoDYwFsRm1RGk0qI4EEkd49D441d03KUStqmH9M1loK\nj6mX2WLQ75l1hsT7MHcQc/aLq8AmBlcZByTqUTEa/DxO16o/cJw1dcdJRyzKgpO9\nDAqXO7zPNgIox5j1iTqQcBzWCFKY5jbHbDFcBKt92d9OaTix4a8=\n=f6FH\n-----END PGP SIGNATURE-----", "payload": "tree b59248f10b149688c0ebc5ce310c1bebe4bfda22\nparent a8bcf612d598ff9718b4d2722d74701ae8717bdb\nparent 401cb6bb539e95733290d1b0487f682f48b3f9cd\nauthor kennytm <kennytm@gmail.com> 1542085388 +0800\ncommitter kennytm <kennytm@gmail.com> 1542108025 +0800\n\nRollup merge of #55804 - QuietMisdreavus:eager-crate-inline, r=pnkfelix\n\nrustdoc: don't inline `pub use some_crate` unless directly asked to\n\ncc https://github.com/rust-lang/rust/issues/52509 (fixes it? i'm not sure about my comment summoning the docs team)\n\nWhen rustdoc encounters a `pub use` statement for an item from another crate, it will eagerly inline its contents into your crate. This somewhat clashes with the new paths behavior in Rust 2018, in which crates are implicitly linked and re-exported with `pub use` instead of `pub extern crate`. In rust 2015, `pub extern crate` would only create a single line for its re-export in the docs, so i'm making it do the same with `pub use some_crate;`.\n\nThe exact new behavior is like this: *If rustdoc sees a `pub use` statement, and the item being imported is the root of another crate, it will only inline it if `#[doc(inline)]` is provided.* I made it only avoid crate roots because otherwise it would stop inlining any module, which may or may not be what people want.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d811f844a5e992f8a2533fc440421a4b3cf7056f", "html_url": "https://github.com/rust-lang/rust/commit/d811f844a5e992f8a2533fc440421a4b3cf7056f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d811f844a5e992f8a2533fc440421a4b3cf7056f/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8bcf612d598ff9718b4d2722d74701ae8717bdb", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8bcf612d598ff9718b4d2722d74701ae8717bdb", "html_url": "https://github.com/rust-lang/rust/commit/a8bcf612d598ff9718b4d2722d74701ae8717bdb"}, {"sha": "401cb6bb539e95733290d1b0487f682f48b3f9cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/401cb6bb539e95733290d1b0487f682f48b3f9cd", "html_url": "https://github.com/rust-lang/rust/commit/401cb6bb539e95733290d1b0487f682f48b3f9cd"}], "stats": {"total": 82, "additions": 81, "deletions": 1}, "files": [{"sha": "61e5b3d0133ff6980bd886d17070197b34f3eace", "filename": "src/doc/rustdoc/src/the-doc-attribute.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d811f844a5e992f8a2533fc440421a4b3cf7056f/src%2Fdoc%2Frustdoc%2Fsrc%2Fthe-doc-attribute.md", "raw_url": "https://github.com/rust-lang/rust/raw/d811f844a5e992f8a2533fc440421a4b3cf7056f/src%2Fdoc%2Frustdoc%2Fsrc%2Fthe-doc-attribute.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fthe-doc-attribute.md?ref=d811f844a5e992f8a2533fc440421a4b3cf7056f", "patch": "@@ -186,6 +186,9 @@ mod bar {\n \n Now we'll have a `Re-exports` line, and `Bar` will not link to anywhere.\n \n+One special case: In Rust 2018 and later, if you `pub use` one of your dependencies, `rustdoc` will\n+not eagerly inline it as a module unless you add `#[doc(inline)}`.\n+\n ## `#[doc(hidden)]`\n \n Any item annotated with `#[doc(hidden)]` will not appear in the documentation, unless"}, {"sha": "5a020749f3577d4b2eaaf351d13ced1a26bb612d", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d811f844a5e992f8a2533fc440421a4b3cf7056f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d811f844a5e992f8a2533fc440421a4b3cf7056f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=d811f844a5e992f8a2533fc440421a4b3cf7056f", "patch": "@@ -3499,13 +3499,16 @@ impl Clean<Vec<Item>> for doctree::Import {\n         // forcefully don't inline if this is not public or if the\n         // #[doc(no_inline)] attribute is present.\n         // Don't inline doc(hidden) imports so they can be stripped at a later stage.\n-        let denied = !self.vis.node.is_pub() || self.attrs.iter().any(|a| {\n+        let mut denied = !self.vis.node.is_pub() || self.attrs.iter().any(|a| {\n             a.name() == \"doc\" && match a.meta_item_list() {\n                 Some(l) => attr::list_contains_name(&l, \"no_inline\") ||\n                            attr::list_contains_name(&l, \"hidden\"),\n                 None => false,\n             }\n         });\n+        // Also check whether imports were asked to be inlined, in case we're trying to re-export a\n+        // crate in Rust 2018+\n+        let please_inline = self.attrs.lists(\"doc\").has_word(\"inline\");\n         let path = self.path.clean(cx);\n         let inner = if self.glob {\n             if !denied {\n@@ -3518,6 +3521,16 @@ impl Clean<Vec<Item>> for doctree::Import {\n             Import::Glob(resolve_use_source(cx, path))\n         } else {\n             let name = self.name;\n+            if !please_inline {\n+                match path.def {\n+                    Def::Mod(did) => if !did.is_local() && did.index == CRATE_DEF_INDEX {\n+                        // if we're `pub use`ing an extern crate root, don't inline it unless we\n+                        // were specifically asked for it\n+                        denied = true;\n+                    }\n+                    _ => {}\n+                }\n+            }\n             if !denied {\n                 let mut visited = FxHashSet::default();\n                 if let Some(items) = inline::try_inline(cx, path.def, name, &mut visited) {"}, {"sha": "55202de1981beb35ac88d83d45b193f3c1e6e057", "filename": "src/test/rustdoc/inline_cross/auxiliary/use_crate.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d811f844a5e992f8a2533fc440421a4b3cf7056f/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fuse_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d811f844a5e992f8a2533fc440421a4b3cf7056f/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fuse_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fuse_crate.rs?ref=d811f844a5e992f8a2533fc440421a4b3cf7056f", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub mod asdf {\n+    pub struct SomeStruct;\n+}\n+\n+pub trait SomeTrait {}"}, {"sha": "1f11cbc4da718d0b83b4aac58f4674eda631d40f", "filename": "src/test/rustdoc/inline_cross/auxiliary/use_crate_2.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d811f844a5e992f8a2533fc440421a4b3cf7056f/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fuse_crate_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d811f844a5e992f8a2533fc440421a4b3cf7056f/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fuse_crate_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fuse_crate_2.rs?ref=d811f844a5e992f8a2533fc440421a4b3cf7056f", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub struct SomethingElse;"}, {"sha": "a98704446ee76c52b85b6303075a58bcd9ac871d", "filename": "src/test/rustdoc/inline_cross/use_crate.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d811f844a5e992f8a2533fc440421a4b3cf7056f/src%2Ftest%2Frustdoc%2Finline_cross%2Fuse_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d811f844a5e992f8a2533fc440421a4b3cf7056f/src%2Ftest%2Frustdoc%2Finline_cross%2Fuse_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fuse_crate.rs?ref=d811f844a5e992f8a2533fc440421a4b3cf7056f", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:use_crate.rs\n+// aux-build:use_crate_2.rs\n+// build-aux-docs\n+// edition:2018\n+// compile-flags:--extern use_crate --extern use_crate_2 -Z unstable-options\n+\n+// During the buildup to Rust 2018, rustdoc would eagerly inline `pub use some_crate;` as if it\n+// were a module, so we changed it to make `pub use`ing crate roots remain as a `pub use` statement\n+// in docs... unless you added `#[doc(inline)]`.\n+\n+#![crate_name = \"local\"]\n+\n+// @!has-dir local/use_crate\n+// @has local/index.html\n+// @has - '//code' 'pub use use_crate'\n+pub use use_crate;\n+\n+// @has-dir local/asdf\n+// @has local/asdf/index.html\n+// @has local/index.html '//a/@href' 'asdf/index.html'\n+pub use use_crate::asdf;\n+\n+// @has-dir local/use_crate_2\n+// @has local/use_crate_2/index.html\n+// @has local/index.html '//a/@href' 'use_crate_2/index.html'\n+#[doc(inline)]\n+pub use use_crate_2;"}, {"sha": "6cc7f1743ad07c440f9d63070ef479e4fcb0bac6", "filename": "src/test/rustdoc/src-links-external.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d811f844a5e992f8a2533fc440421a4b3cf7056f/src%2Ftest%2Frustdoc%2Fsrc-links-external.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d811f844a5e992f8a2533fc440421a4b3cf7056f/src%2Ftest%2Frustdoc%2Fsrc-links-external.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsrc-links-external.rs?ref=d811f844a5e992f8a2533fc440421a4b3cf7056f", "patch": "@@ -18,6 +18,7 @@\n extern crate src_links_external;\n \n // @has foo/bar/index.html '//a/@href' '../../src/src_links_external/src-links-external.rs.html#11'\n+#[doc(inline)]\n pub use src_links_external as bar;\n \n // @has foo/bar/struct.Foo.html '//a/@href' '../../src/src_links_external/src-links-external.rs.html#11'"}]}