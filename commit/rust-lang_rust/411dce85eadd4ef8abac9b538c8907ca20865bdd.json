{"sha": "411dce85eadd4ef8abac9b538c8907ca20865bdd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxMWRjZTg1ZWFkZDRlZjhhYmFjOWI1MzhjODkwN2NhMjA4NjViZGQ=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2013-09-25T08:55:50Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2013-09-25T08:55:50Z"}, "message": "Fold type_use.rs Context into its Visitor.", "tree": {"sha": "cf0585bb643157aca4d002e1ff07f29cf7691ad9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf0585bb643157aca4d002e1ff07f29cf7691ad9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/411dce85eadd4ef8abac9b538c8907ca20865bdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/411dce85eadd4ef8abac9b538c8907ca20865bdd", "html_url": "https://github.com/rust-lang/rust/commit/411dce85eadd4ef8abac9b538c8907ca20865bdd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/411dce85eadd4ef8abac9b538c8907ca20865bdd/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eac429cc9e1e57ea9c91406dc149e7b1c79d86a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/eac429cc9e1e57ea9c91406dc149e7b1c79d86a0", "html_url": "https://github.com/rust-lang/rust/commit/eac429cc9e1e57ea9c91406dc149e7b1c79d86a0"}], "stats": {"total": 39, "additions": 18, "deletions": 21}, "files": [{"sha": "6ae196226d575c0e029f5dda804452c522c7e20e", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 18, "deletions": 21, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/411dce85eadd4ef8abac9b538c8907ca20865bdd/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/411dce85eadd4ef8abac9b538c8907ca20865bdd/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=411dce85eadd4ef8abac9b538c8907ca20865bdd", "patch": "@@ -81,7 +81,7 @@ pub fn type_uses_for(ccx: @mut CrateContext, fn_id: DefId, n_tps: uint)\n     // Conservatively assume full use for recursive loops\n     ccx.type_use_cache.insert(fn_id, @vec::from_elem(n_tps, use_all));\n \n-    let cx = Context {\n+    let mut cx = Context {\n         ccx: ccx,\n         uses: @mut vec::from_elem(n_tps, 0u)\n     };\n@@ -112,7 +112,7 @@ pub fn type_uses_for(ccx: @mut CrateContext, fn_id: DefId, n_tps: uint)\n       ast_map::node_item(@ast::item { node: item_fn(_, _, _, _, ref body),\n                                       _ }, _) |\n       ast_map::node_method(@ast::method {body: ref body, _}, _, _) => {\n-        handle_body(&cx, body);\n+        handle_body(&mut cx, body);\n       }\n       ast_map::node_trait_method(*) => {\n         // This will be a static trait method. For now, we just assume\n@@ -414,39 +414,36 @@ pub fn mark_for_expr(cx: &Context, e: &Expr) {\n     }\n }\n \n-struct TypeUseVisitor;\n+impl Visitor<()> for Context {\n \n-impl<'self> Visitor<&'self Context> for TypeUseVisitor {\n-\n-    fn visit_expr<'a>(&mut self, e:@Expr, cx: &'a Context) {\n-            visit::walk_expr(self, e, cx);\n-            mark_for_expr(cx, e);\n+    fn visit_expr(&mut self, e:@Expr, _: ()) {\n+            visit::walk_expr(self, e, ());\n+            mark_for_expr(self, e);\n     }\n \n-    fn visit_local<'a>(&mut self, l:@Local, cx: &'a Context) {\n-            visit::walk_local(self, l, cx);\n-            node_type_needs(cx, use_repr, l.id);\n+    fn visit_local(&mut self, l:@Local, _:()) {\n+            visit::walk_local(self, l, ());\n+            node_type_needs(self, use_repr, l.id);\n     }\n \n-    fn visit_pat<'a>(&mut self, p:@Pat, cx: &'a Context) {\n-            visit::walk_pat(self, p, cx);\n-            node_type_needs(cx, use_repr, p.id);\n+    fn visit_pat(&mut self, p:@Pat, _: ()) {\n+            visit::walk_pat(self, p, ());\n+            node_type_needs(self, use_repr, p.id);\n     }\n \n-    fn visit_block<'a>(&mut self, b:&Block, cx: &'a Context) {\n-            visit::walk_block(self, b, cx);\n+   fn visit_block(&mut self, b:&Block, _: ()) {\n+            visit::walk_block(self, b, ());\n             for e in b.expr.iter() {\n-                node_type_needs(cx, use_repr, e.id);\n+                node_type_needs(self, use_repr, e.id);\n             }\n     }\n \n-    fn visit_item<'a>(&mut self, _:@item, _: &'a Context) {\n+    fn visit_item(&mut self, _:@item, _: ()) {\n         // do nothing\n     }\n \n }\n \n-pub fn handle_body(cx: &Context, body: &Block) {\n-    let mut v = TypeUseVisitor;\n-    v.visit_block(body, cx);\n+pub fn handle_body(cx: &mut Context, body: &Block) {\n+    cx.visit_block(body, ());\n }"}]}