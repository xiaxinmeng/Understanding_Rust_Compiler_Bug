{"sha": "6e9adcbd8216f522fb4e49cc4ecbdbe51487b353", "node_id": "C_kwDOAAsO6NoAKDZlOWFkY2JkODIxNmY1MjJmYjRlNDljYzRlY2JkYmU1MTQ4N2IzNTM", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-09-11T13:37:34Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-09-24T15:57:15Z"}, "message": "resolve: Cleanup module allocation\n\nConstruction of all modules is now centralized and performed by `fn new_module`.", "tree": {"sha": "e4f943713682c60be4e11cc72aadebe289e1b9ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4f943713682c60be4e11cc72aadebe289e1b9ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e9adcbd8216f522fb4e49cc4ecbdbe51487b353", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e9adcbd8216f522fb4e49cc4ecbdbe51487b353", "html_url": "https://github.com/rust-lang/rust/commit/6e9adcbd8216f522fb4e49cc4ecbdbe51487b353", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e9adcbd8216f522fb4e49cc4ecbdbe51487b353/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd58eea4e1dc16ecc4717b14afc8e01caced7951", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd58eea4e1dc16ecc4717b14afc8e01caced7951", "html_url": "https://github.com/rust-lang/rust/commit/fd58eea4e1dc16ecc4717b14afc8e01caced7951"}], "stats": {"total": 129, "additions": 73, "deletions": 56}, "files": [{"sha": "e5815772965709dd5cfe475ce0029c69dee36db2", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 37, "deletions": 26, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/6e9adcbd8216f522fb4e49cc4ecbdbe51487b353/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e9adcbd8216f522fb4e49cc4ecbdbe51487b353/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=6e9adcbd8216f522fb4e49cc4ecbdbe51487b353", "patch": "@@ -9,11 +9,9 @@ use crate::def_collector::collect_definitions;\n use crate::imports::{Import, ImportKind};\n use crate::macros::{MacroRulesBinding, MacroRulesScope, MacroRulesScopeRef};\n use crate::Namespace::{self, MacroNS, TypeNS, ValueNS};\n-use crate::{CrateLint, Determinacy, PathResult, ResolutionError, VisResolutionError};\n-use crate::{\n-    ExternPreludeEntry, ModuleOrUniformRoot, ParentScope, PerNS, Resolver, ResolverArenas,\n-};\n-use crate::{Module, ModuleData, ModuleKind, NameBinding, NameBindingKind, Segment, ToNameBinding};\n+use crate::{CrateLint, Determinacy, ExternPreludeEntry, Module, ModuleKind, ModuleOrUniformRoot};\n+use crate::{NameBinding, NameBindingKind, ParentScope, PathResult, PerNS, ResolutionError};\n+use crate::{Resolver, ResolverArenas, Segment, ToNameBinding, VisResolutionError};\n \n use rustc_ast::visit::{self, AssocCtxt, Visitor};\n use rustc_ast::{self as ast, AssocItem, AssocItemKind, MetaItemKind, StmtKind};\n@@ -142,13 +140,14 @@ impl<'a> Resolver<'a> {\n         };\n \n         // Allocate and return a new module with the information we found\n-        let kind = ModuleKind::Def(DefKind::Mod, def_id, name);\n-        let module = self.arenas.alloc_module(ModuleData::new(\n+        let module = self.arenas.new_module(\n             parent,\n-            kind,\n+            ModuleKind::Def(DefKind::Mod, def_id, name),\n             self.cstore().module_expansion_untracked(def_id, &self.session),\n             self.cstore().get_span_untracked(def_id, &self.session),\n-        ));\n+            // FIXME: Account for `#[no_implicit_prelude]` attributes.\n+            parent.map_or(false, |module| module.no_implicit_prelude),\n+        );\n         self.extern_module_map.insert(def_id, module);\n         module\n     }\n@@ -767,13 +766,14 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             }\n \n             ItemKind::Mod(..) => {\n-                let module_kind = ModuleKind::Def(DefKind::Mod, def_id, ident.name);\n-                let module = self.r.arenas.alloc_module(ModuleData {\n-                    no_implicit_prelude: parent.no_implicit_prelude || {\n-                        self.r.session.contains_name(&item.attrs, sym::no_implicit_prelude)\n-                    },\n-                    ..ModuleData::new(Some(parent), module_kind, expansion.to_expn_id(), item.span)\n-                });\n+                let module = self.r.arenas.new_module(\n+                    Some(parent),\n+                    ModuleKind::Def(DefKind::Mod, def_id, ident.name),\n+                    expansion.to_expn_id(),\n+                    item.span,\n+                    parent.no_implicit_prelude\n+                        || self.r.session.contains_name(&item.attrs, sym::no_implicit_prelude),\n+                );\n                 self.r.define(parent, ident, TypeNS, (module, vis, sp, expansion));\n                 self.r.module_map.insert(local_def_id, module);\n \n@@ -806,9 +806,13 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             }\n \n             ItemKind::Enum(_, _) => {\n-                let module_kind = ModuleKind::Def(DefKind::Enum, def_id, ident.name);\n-                let module =\n-                    self.r.new_module(parent, module_kind, expansion.to_expn_id(), item.span);\n+                let module = self.r.arenas.new_module(\n+                    Some(parent),\n+                    ModuleKind::Def(DefKind::Enum, def_id, ident.name),\n+                    expansion.to_expn_id(),\n+                    item.span,\n+                    parent.no_implicit_prelude,\n+                );\n                 self.r.define(parent, ident, TypeNS, (module, vis, sp, expansion));\n                 self.parent_scope.module = module;\n             }\n@@ -876,9 +880,13 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n \n             ItemKind::Trait(..) => {\n                 // Add all the items within to a new module.\n-                let module_kind = ModuleKind::Def(DefKind::Trait, def_id, ident.name);\n-                let module =\n-                    self.r.new_module(parent, module_kind, expansion.to_expn_id(), item.span);\n+                let module = self.r.arenas.new_module(\n+                    Some(parent),\n+                    ModuleKind::Def(DefKind::Trait, def_id, ident.name),\n+                    expansion.to_expn_id(),\n+                    item.span,\n+                    parent.no_implicit_prelude,\n+                );\n                 self.r.define(parent, ident, TypeNS, (module, vis, sp, expansion));\n                 self.parent_scope.module = module;\n             }\n@@ -915,11 +923,12 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         let parent = self.parent_scope.module;\n         let expansion = self.parent_scope.expansion;\n         if self.block_needs_anonymous_module(block) {\n-            let module = self.r.new_module(\n-                parent,\n+            let module = self.r.arenas.new_module(\n+                Some(parent),\n                 ModuleKind::Block(block.id),\n                 expansion.to_expn_id(),\n                 block.span,\n+                parent.no_implicit_prelude,\n             );\n             self.r.block_map.insert(block.id, module);\n             self.parent_scope.module = module; // Descend into the block.\n@@ -935,11 +944,13 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         // Record primary definitions.\n         match res {\n             Res::Def(kind @ (DefKind::Mod | DefKind::Enum | DefKind::Trait), def_id) => {\n-                let module = self.r.new_module(\n-                    parent,\n+                let module = self.r.arenas.new_module(\n+                    Some(parent),\n                     ModuleKind::Def(kind, def_id, ident.name),\n                     expansion.to_expn_id(),\n                     span,\n+                    // FIXME: Account for `#[no_implicit_prelude]` attributes.\n+                    parent.no_implicit_prelude,\n                 );\n                 self.r.define(parent, ident, TypeNS, (module, vis, span, expansion));\n             }"}, {"sha": "3221e1a58a42144f76680eac34bc6c36f5273d3a", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 36, "deletions": 30, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/6e9adcbd8216f522fb4e49cc4ecbdbe51487b353/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e9adcbd8216f522fb4e49cc4ecbdbe51487b353/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=6e9adcbd8216f522fb4e49cc4ecbdbe51487b353", "patch": "@@ -41,7 +41,7 @@ use rustc_expand::base::{DeriveResolutions, SyntaxExtension, SyntaxExtensionKind\n use rustc_hir::def::Namespace::*;\n use rustc_hir::def::{self, CtorOf, DefKind, NonMacroAttrKind, PartialRes};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, DefPathHash, LocalDefId};\n-use rustc_hir::def_id::{CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::def_id::{CRATE_DEF_ID, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::definitions::{DefKey, DefPathData, Definitions};\n use rustc_hir::TraitCandidate;\n use rustc_index::vec::IndexVec;\n@@ -533,7 +533,13 @@ pub struct ModuleData<'a> {\n type Module<'a> = &'a ModuleData<'a>;\n \n impl<'a> ModuleData<'a> {\n-    fn new(parent: Option<Module<'a>>, kind: ModuleKind, expansion: ExpnId, span: Span) -> Self {\n+    fn new(\n+        parent: Option<Module<'a>>,\n+        kind: ModuleKind,\n+        expansion: ExpnId,\n+        span: Span,\n+        no_implicit_prelude: bool,\n+    ) -> Self {\n         let is_foreign = match kind {\n             ModuleKind::Def(_, def_id, _) => !def_id.is_local(),\n             ModuleKind::Block(_) => false,\n@@ -544,7 +550,7 @@ impl<'a> ModuleData<'a> {\n             lazy_resolutions: Default::default(),\n             populate_on_access: Cell::new(is_foreign),\n             unexpanded_invocations: Default::default(),\n-            no_implicit_prelude: false,\n+            no_implicit_prelude,\n             glob_importers: RefCell::new(Vec::new()),\n             globs: RefCell::new(Vec::new()),\n             traits: RefCell::new(None),\n@@ -1055,8 +1061,16 @@ pub struct ResolverArenas<'a> {\n }\n \n impl<'a> ResolverArenas<'a> {\n-    fn alloc_module(&'a self, module: ModuleData<'a>) -> Module<'a> {\n-        let module = self.modules.alloc(module);\n+    fn new_module(\n+        &'a self,\n+        parent: Option<Module<'a>>,\n+        kind: ModuleKind,\n+        expn_id: ExpnId,\n+        span: Span,\n+        no_implicit_prelude: bool,\n+    ) -> Module<'a> {\n+        let module =\n+            self.modules.alloc(ModuleData::new(parent, kind, expn_id, span, no_implicit_prelude));\n         if module.def_id().map_or(true, |def_id| def_id.is_local()) {\n             self.local_modules.borrow_mut().push(module);\n         }\n@@ -1258,26 +1272,29 @@ impl<'a> Resolver<'a> {\n         metadata_loader: Box<MetadataLoaderDyn>,\n         arenas: &'a ResolverArenas<'a>,\n     ) -> Resolver<'a> {\n-        let root_local_def_id = LocalDefId { local_def_index: CRATE_DEF_INDEX };\n-        let root_def_id = root_local_def_id.to_def_id();\n-        let root_module_kind = ModuleKind::Def(DefKind::Mod, root_def_id, kw::Empty);\n-        let graph_root = arenas.alloc_module(ModuleData {\n-            no_implicit_prelude: session.contains_name(&krate.attrs, sym::no_implicit_prelude),\n-            ..ModuleData::new(None, root_module_kind, ExpnId::root(), krate.span)\n-        });\n-        let empty_module_kind = ModuleKind::Def(DefKind::Mod, root_def_id, kw::Empty);\n-        let empty_module = arenas.alloc_module(ModuleData {\n-            no_implicit_prelude: true,\n-            ..ModuleData::new(Some(graph_root), empty_module_kind, ExpnId::root(), DUMMY_SP)\n-        });\n+        let root_def_id = CRATE_DEF_ID.to_def_id();\n+        let graph_root = arenas.new_module(\n+            None,\n+            ModuleKind::Def(DefKind::Mod, root_def_id, kw::Empty),\n+            ExpnId::root(),\n+            krate.span,\n+            session.contains_name(&krate.attrs, sym::no_implicit_prelude),\n+        );\n+        let empty_module = arenas.new_module(\n+            None,\n+            ModuleKind::Def(DefKind::Mod, root_def_id, kw::Empty),\n+            ExpnId::root(),\n+            DUMMY_SP,\n+            true,\n+        );\n         let mut module_map = FxHashMap::default();\n-        module_map.insert(root_local_def_id, graph_root);\n+        module_map.insert(CRATE_DEF_ID, graph_root);\n \n         let definitions = Definitions::new(session.local_stable_crate_id(), krate.span);\n         let root = definitions.get_root_def();\n \n         let mut visibilities = FxHashMap::default();\n-        visibilities.insert(root_local_def_id, ty::Visibility::Public);\n+        visibilities.insert(CRATE_DEF_ID, ty::Visibility::Public);\n \n         let mut def_id_to_node_id = IndexVec::default();\n         assert_eq!(def_id_to_node_id.push(CRATE_NODE_ID), root);\n@@ -1629,17 +1646,6 @@ impl<'a> Resolver<'a> {\n         import_ids\n     }\n \n-    fn new_module(\n-        &self,\n-        parent: Module<'a>,\n-        kind: ModuleKind,\n-        expn_id: ExpnId,\n-        span: Span,\n-    ) -> Module<'a> {\n-        let module = ModuleData::new(Some(parent), kind, expn_id, span);\n-        self.arenas.alloc_module(module)\n-    }\n-\n     fn new_key(&mut self, ident: Ident, ns: Namespace) -> BindingKey {\n         let ident = ident.normalize_to_macros_2_0();\n         let disambiguator = if ident.name == kw::Underscore {"}]}