{"sha": "27c7ef6d65ffa6a642768377d3f0ba85ac8564bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3YzdlZjZkNjVmZmE2YTY0Mjc2ODM3N2QzZjBiYTg1YWM4NTY0YmY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-05T21:23:29Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-05T21:23:29Z"}, "message": "Use more natural signature for Edit::apply", "tree": {"sha": "eb205f315338931e2a8ea6da63d9ea0ff06199c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb205f315338931e2a8ea6da63d9ea0ff06199c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27c7ef6d65ffa6a642768377d3f0ba85ac8564bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27c7ef6d65ffa6a642768377d3f0ba85ac8564bf", "html_url": "https://github.com/rust-lang/rust/commit/27c7ef6d65ffa6a642768377d3f0ba85ac8564bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27c7ef6d65ffa6a642768377d3f0ba85ac8564bf/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a6fa8f0dfcebbb4ea80394e5e4ca21f076f58f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a6fa8f0dfcebbb4ea80394e5e4ca21f076f58f2", "html_url": "https://github.com/rust-lang/rust/commit/4a6fa8f0dfcebbb4ea80394e5e4ca21f076f58f2"}], "stats": {"total": 62, "additions": 42, "deletions": 20}, "files": [{"sha": "e213da6068cdbdee2245cdb570008633a1c9a0f1", "filename": "crates/ra_ide/src/ssr.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/27c7ef6d65ffa6a642768377d3f0ba85ac8564bf/crates%2Fra_ide%2Fsrc%2Fssr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c7ef6d65ffa6a642768377d3f0ba85ac8564bf/crates%2Fra_ide%2Fsrc%2Fssr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fssr.rs?ref=27c7ef6d65ffa6a642768377d3f0ba85ac8564bf", "patch": "@@ -401,16 +401,22 @@ fn render_replace(\n     ignored_comments: &Vec<Comment>,\n     template: &SsrTemplate,\n ) -> String {\n-    let mut builder = TextEditBuilder::default();\n-    for element in template.template.descendants() {\n-        if let Some(var) = template.placeholders.get(&element) {\n-            builder.replace(element.text_range(), binding[var].to_string())\n+    let edit = {\n+        let mut builder = TextEditBuilder::default();\n+        for element in template.template.descendants() {\n+            if let Some(var) = template.placeholders.get(&element) {\n+                builder.replace(element.text_range(), binding[var].to_string())\n+            }\n         }\n-    }\n-    for comment in ignored_comments {\n-        builder.insert(template.template.text_range().end(), comment.syntax().to_string())\n-    }\n-    builder.finish().apply(&template.template.text().to_string())\n+        for comment in ignored_comments {\n+            builder.insert(template.template.text_range().end(), comment.syntax().to_string())\n+        }\n+        builder.finish()\n+    };\n+\n+    let mut text = template.template.text().to_string();\n+    edit.apply(&mut text);\n+    text\n }\n \n #[cfg(test)]"}, {"sha": "61e686da5e6dc6108a14aa3b3d5054d85dc3af54", "filename": "crates/ra_syntax/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/27c7ef6d65ffa6a642768377d3f0ba85ac8564bf/crates%2Fra_syntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c7ef6d65ffa6a642768377d3f0ba85ac8564bf/crates%2Fra_syntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Flib.rs?ref=27c7ef6d65ffa6a642768377d3f0ba85ac8564bf", "patch": "@@ -142,7 +142,8 @@ impl Parse<SourceFile> {\n     }\n \n     fn full_reparse(&self, indel: &Indel) -> Parse<SourceFile> {\n-        let text = indel.apply(self.tree().syntax().text().to_string());\n+        let mut text = self.tree().syntax().text().to_string();\n+        indel.apply(&mut text);\n         SourceFile::parse(&text)\n     }\n }"}, {"sha": "edbc190f855367d2c2c6fd8592bdac0e943e652e", "filename": "crates/ra_syntax/src/parsing/reparsing.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/27c7ef6d65ffa6a642768377d3f0ba85ac8564bf/crates%2Fra_syntax%2Fsrc%2Fparsing%2Freparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c7ef6d65ffa6a642768377d3f0ba85ac8564bf/crates%2Fra_syntax%2Fsrc%2Fparsing%2Freparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Freparsing.rs?ref=27c7ef6d65ffa6a642768377d3f0ba85ac8564bf", "patch": "@@ -109,14 +109,14 @@ fn reparse_block<'node>(\n }\n \n fn get_text_after_edit(element: SyntaxElement, edit: &Indel) -> String {\n-    let edit =\n-        Indel::replace(edit.delete - element.text_range().start(), edit.insert.clone());\n+    let edit = Indel::replace(edit.delete - element.text_range().start(), edit.insert.clone());\n \n-    let text = match element {\n+    let mut text = match element {\n         NodeOrToken::Token(token) => token.text().to_string(),\n         NodeOrToken::Node(node) => node.text().to_string(),\n     };\n-    edit.apply(text)\n+    edit.apply(&mut text);\n+    text\n }\n \n fn is_contextual_kw(text: &str) -> bool {\n@@ -199,7 +199,11 @@ mod tests {\n     fn do_check(before: &str, replace_with: &str, reparsed_len: u32) {\n         let (range, before) = extract_range(before);\n         let edit = Indel::replace(range, replace_with.to_owned());\n-        let after = edit.apply(before.clone());\n+        let after = {\n+            let mut after = before.clone();\n+            edit.apply(&mut after);\n+            after\n+        };\n \n         let fully_reparsed = SourceFile::parse(&after);\n         let incrementally_reparsed: Parse<SourceFile> = {"}, {"sha": "7138bbc65516f6dbd9c067359c678137cdc8c73c", "filename": "crates/ra_text_edit/src/lib.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/27c7ef6d65ffa6a642768377d3f0ba85ac8564bf/crates%2Fra_text_edit%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27c7ef6d65ffa6a642768377d3f0ba85ac8564bf/crates%2Fra_text_edit%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_text_edit%2Fsrc%2Flib.rs?ref=27c7ef6d65ffa6a642768377d3f0ba85ac8564bf", "patch": "@@ -37,11 +37,10 @@ impl Indel {\n         Indel { delete: range, insert: replace_with }\n     }\n \n-    pub fn apply(&self, mut text: String) -> String {\n+    pub fn apply(&self, text: &mut String) {\n         let start: usize = self.delete.start().into();\n         let end: usize = self.delete.end().into();\n         text.replace_range(start..end, &self.insert);\n-        text\n     }\n }\n \n@@ -76,8 +75,17 @@ impl TextEdit {\n         &self.indels\n     }\n \n-    pub fn apply(&self, text: &str) -> String {\n-        let mut total_len = TextSize::of(text);\n+    pub fn apply(&self, text: &mut String) {\n+        match self.indels.len() {\n+            0 => return,\n+            1 => {\n+                self.indels[0].apply(text);\n+                return;\n+            }\n+            _ => (),\n+        }\n+\n+        let mut total_len = TextSize::of(&*text);\n         for indel in self.indels.iter() {\n             total_len += TextSize::of(&indel.insert);\n             total_len -= indel.delete.end() - indel.delete.start();\n@@ -95,7 +103,10 @@ impl TextEdit {\n         }\n         buf.push_str(&text[prev..text.len()]);\n         assert_eq!(TextSize::of(&buf), total_len);\n-        buf\n+\n+        // FIXME: figure out a way to mutate the text in-place or reuse the\n+        // memory in some other way\n+        *text = buf\n     }\n \n     pub fn apply_to_offset(&self, offset: TextSize) -> Option<TextSize> {"}]}