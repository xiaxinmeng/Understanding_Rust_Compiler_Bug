{"sha": "cb020db55a009a65599f31da6a0316c0aaae19a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiMDIwZGI1NWEwMDlhNjU1OTlmMzFkYTZhMDMxNmMwYWFhZTE5YTI=", "commit": {"author": {"name": "Ahmed Charles", "email": "acharles@outlook.com", "date": "2015-01-21T12:39:27Z"}, "committer": {"name": "Ahmed Charles", "email": "acharles@outlook.com", "date": "2015-01-22T08:58:50Z"}, "message": "Remove remaining stats and boxplot code.", "tree": {"sha": "7c94e427700bc6e2f82cf00fb3d80f108cb0ead4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c94e427700bc6e2f82cf00fb3d80f108cb0ead4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb020db55a009a65599f31da6a0316c0aaae19a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb020db55a009a65599f31da6a0316c0aaae19a2", "html_url": "https://github.com/rust-lang/rust/commit/cb020db55a009a65599f31da6a0316c0aaae19a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb020db55a009a65599f31da6a0316c0aaae19a2/comments", "author": {"login": "ahmedcharles", "id": 3112514, "node_id": "MDQ6VXNlcjMxMTI1MTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3112514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahmedcharles", "html_url": "https://github.com/ahmedcharles", "followers_url": "https://api.github.com/users/ahmedcharles/followers", "following_url": "https://api.github.com/users/ahmedcharles/following{/other_user}", "gists_url": "https://api.github.com/users/ahmedcharles/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahmedcharles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahmedcharles/subscriptions", "organizations_url": "https://api.github.com/users/ahmedcharles/orgs", "repos_url": "https://api.github.com/users/ahmedcharles/repos", "events_url": "https://api.github.com/users/ahmedcharles/events{/privacy}", "received_events_url": "https://api.github.com/users/ahmedcharles/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ahmedcharles", "id": 3112514, "node_id": "MDQ6VXNlcjMxMTI1MTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3112514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahmedcharles", "html_url": "https://github.com/ahmedcharles", "followers_url": "https://api.github.com/users/ahmedcharles/followers", "following_url": "https://api.github.com/users/ahmedcharles/following{/other_user}", "gists_url": "https://api.github.com/users/ahmedcharles/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahmedcharles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahmedcharles/subscriptions", "organizations_url": "https://api.github.com/users/ahmedcharles/orgs", "repos_url": "https://api.github.com/users/ahmedcharles/repos", "events_url": "https://api.github.com/users/ahmedcharles/events{/privacy}", "received_events_url": "https://api.github.com/users/ahmedcharles/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "989fbfde39c4eb9cf1c7881aed985dea4f19f711", "url": "https://api.github.com/repos/rust-lang/rust/commits/989fbfde39c4eb9cf1c7881aed985dea4f19f711", "html_url": "https://github.com/rust-lang/rust/commit/989fbfde39c4eb9cf1c7881aed985dea4f19f711"}], "stats": {"total": 163, "additions": 2, "deletions": 161}, "files": [{"sha": "7226c6423b82c0949c6614ee0c57b043150cbd3c", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 2, "deletions": 31, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/cb020db55a009a65599f31da6a0316c0aaae19a2/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb020db55a009a65599f31da6a0316c0aaae19a2/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=cb020db55a009a65599f31da6a0316c0aaae19a2", "patch": "@@ -437,9 +437,6 @@ struct ConsoleTestState<T> {\n     log_out: Option<File>,\n     out: OutputLocation<T>,\n     use_color: bool,\n-    show_boxplot: bool,\n-    boxplot_width: uint,\n-    show_all_stats: bool,\n     total: uint,\n     passed: uint,\n     failed: uint,\n@@ -466,9 +463,6 @@ impl<T: Writer> ConsoleTestState<T> {\n             out: out,\n             log_out: log_out,\n             use_color: use_color(opts),\n-            show_boxplot: false,\n-            boxplot_width: 50,\n-            show_all_stats: false,\n             total: 0u,\n             passed: 0u,\n             failed: 0u,\n@@ -549,28 +543,8 @@ impl<T: Writer> ConsoleTestState<T> {\n             TrBench(ref bs) => {\n                 try!(self.write_bench());\n \n-                if self.show_boxplot {\n-                    let mut wr = Vec::new();\n-\n-                    try!(stats::write_boxplot(&mut wr, &bs.ns_iter_summ, self.boxplot_width));\n-\n-                    let s = String::from_utf8(wr).unwrap();\n-\n-                    try!(self.write_plain(format!(\": {}\", s).as_slice()));\n-                }\n-\n-                if self.show_all_stats {\n-                    let mut wr = Vec::new();\n-\n-                    try!(stats::write_5_number_summary(&mut wr, &bs.ns_iter_summ));\n-\n-                    let s = String::from_utf8(wr).unwrap();\n-\n-                    try!(self.write_plain(format!(\": {}\", s).as_slice()));\n-                } else {\n-                    try!(self.write_plain(format!(\": {}\",\n-                                                  fmt_bench_samples(bs)).as_slice()));\n-                }\n+                try!(self.write_plain(format!(\": {}\",\n+                                              fmt_bench_samples(bs)).as_slice()));\n \n                 Ok(())\n             }\n@@ -736,9 +710,6 @@ fn should_sort_failures_before_printing_them() {\n         log_out: None,\n         out: Raw(Vec::new()),\n         use_color: false,\n-        show_boxplot: false,\n-        boxplot_width: 0,\n-        show_all_stats: false,\n         total: 0u,\n         passed: 0u,\n         failed: 0u,"}, {"sha": "76b85cc10cd8931e82a2ee8e7f207120b1d35f14", "filename": "src/libtest/stats.rs", "status": "modified", "additions": 0, "deletions": 130, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/cb020db55a009a65599f31da6a0316c0aaae19a2/src%2Flibtest%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb020db55a009a65599f31da6a0316c0aaae19a2/src%2Flibtest%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fstats.rs?ref=cb020db55a009a65599f31da6a0316c0aaae19a2", "patch": "@@ -13,9 +13,7 @@\n use std::cmp::Ordering::{self, Less, Greater, Equal};\n use std::collections::hash_map::Entry::{Occupied, Vacant};\n use std::collections::hash_map::{self, Hasher};\n-use std::fmt;\n use std::hash::Hash;\n-use std::io;\n use std::mem;\n use std::num::{Float, FromPrimitive};\n \n@@ -332,111 +330,6 @@ pub fn winsorize<T: Float + FromPrimitive>(samples: &mut [T], pct: T) {\n     }\n }\n \n-/// Render writes the min, max and quartiles of the provided `Summary` to the provided `Writer`.\n-pub fn write_5_number_summary<W: Writer, T: Float + fmt::Display + fmt::Debug>(w: &mut W,\n-                                                          s: &Summary<T>) -> io::IoResult<()> {\n-    let (q1,q2,q3) = s.quartiles;\n-    write!(w, \"(min={}, q1={}, med={}, q3={}, max={})\",\n-                     s.min,\n-                     q1,\n-                     q2,\n-                     q3,\n-                     s.max)\n-}\n-\n-/// Render a boxplot to the provided writer. The boxplot shows the min, max and quartiles of the\n-/// provided `Summary` (thus includes the mean) and is scaled to display within the range of the\n-/// nearest multiple-of-a-power-of-ten above and below the min and max of possible values, and\n-/// target `width_hint` characters of display (though it will be wider if necessary).\n-///\n-/// As an example, the summary with 5-number-summary `(min=15, q1=17, med=20, q3=24, max=31)` might\n-/// display as:\n-///\n-/// ```{.ignore}\n-///   10 |        [--****#******----------]          | 40\n-/// ```\n-pub fn write_boxplot<W: Writer, T: Float + fmt::Display + fmt::Debug + FromPrimitive>(\n-                     w: &mut W,\n-                     s: &Summary<T>,\n-                     width_hint: uint)\n-                      -> io::IoResult<()> {\n-\n-    let (q1,q2,q3) = s.quartiles;\n-\n-    // the .abs() handles the case where numbers are negative\n-    let ten: T = FromPrimitive::from_uint(10).unwrap();\n-    let lomag = ten.powf(s.min.abs().log10().floor());\n-    let himag = ten.powf(s.max.abs().log10().floor());\n-\n-    // need to consider when the limit is zero\n-    let zero: T = Float::zero();\n-    let lo = if lomag == Float::zero() {\n-        zero\n-    } else {\n-        (s.min / lomag).floor() * lomag\n-    };\n-\n-    let hi = if himag == Float::zero() {\n-        zero\n-    } else {\n-        (s.max / himag).ceil() * himag\n-    };\n-\n-    let range = hi - lo;\n-\n-    let lostr = lo.to_string();\n-    let histr = hi.to_string();\n-\n-    let overhead_width = lostr.len() + histr.len() + 4;\n-    let range_width = width_hint - overhead_width;\n-    let range_float = FromPrimitive::from_uint(range_width).unwrap();\n-    let char_step = range / range_float;\n-\n-    try!(write!(w, \"{} |\", lostr));\n-\n-    let mut c = 0;\n-    let mut v = lo;\n-\n-    while c < range_width && v < s.min {\n-        try!(write!(w, \" \"));\n-        v = v + char_step;\n-        c += 1;\n-    }\n-    try!(write!(w, \"[\"));\n-    c += 1;\n-    while c < range_width && v < q1 {\n-        try!(write!(w, \"-\"));\n-        v = v + char_step;\n-        c += 1;\n-    }\n-    while c < range_width && v < q2 {\n-        try!(write!(w, \"*\"));\n-        v = v + char_step;\n-        c += 1;\n-    }\n-    try!(write!(w, \"#\"));\n-    c += 1;\n-    while c < range_width && v < q3 {\n-        try!(write!(w, \"*\"));\n-        v = v + char_step;\n-        c += 1;\n-    }\n-    while c < range_width && v < s.max {\n-        try!(write!(w, \"-\"));\n-        v = v + char_step;\n-        c += 1;\n-    }\n-    try!(write!(w, \"]\"));\n-    while c < range_width {\n-        try!(write!(w, \" \"));\n-        v = v + char_step;\n-        c += 1;\n-    }\n-\n-    try!(write!(w, \"| {}\", histr));\n-    Ok(())\n-}\n-\n /// Returns a HashMap with the number of occurrences of every element in the\n /// sequence that the iterator exposes.\n pub fn freq_count<T, U>(mut iter: T) -> hash_map::HashMap<U, uint>\n@@ -458,8 +351,6 @@ pub fn freq_count<T, U>(mut iter: T) -> hash_map::HashMap<U, uint>\n mod tests {\n     use stats::Stats;\n     use stats::Summary;\n-    use stats::write_5_number_summary;\n-    use stats::write_boxplot;\n     use std::io;\n     use std::f64;\n \n@@ -479,10 +370,6 @@ mod tests {\n         let mut w = io::stdout();\n         let w = &mut w;\n         (write!(w, \"\\n\")).unwrap();\n-        write_5_number_summary(w, &summ2).unwrap();\n-        (write!(w, \"\\n\")).unwrap();\n-        write_boxplot(w, &summ2, 50).unwrap();\n-        (write!(w, \"\\n\")).unwrap();\n \n         assert_eq!(summ.sum, summ2.sum);\n         assert_eq!(summ.min, summ2.min);\n@@ -1028,23 +915,6 @@ mod tests {\n         check(val, summ);\n     }\n \n-    #[test]\n-    fn test_boxplot_nonpositive() {\n-        fn t(s: &Summary<f64>, expected: String) {\n-            let mut m = Vec::new();\n-            write_boxplot(&mut m, s, 30).unwrap();\n-            let out = String::from_utf8(m).unwrap();\n-            assert_eq!(out, expected);\n-        }\n-\n-        t(&Summary::new(&[-2.0f64, -1.0f64]),\n-                        \"-2 |[------******#*****---]| -1\".to_string());\n-        t(&Summary::new(&[0.0f64, 2.0f64]),\n-                        \"0 |[-------*****#*******---]| 2\".to_string());\n-        t(&Summary::new(&[-2.0f64, 0.0f64]),\n-                        \"-2 |[------******#******---]| 0\".to_string());\n-\n-    }\n     #[test]\n     fn test_sum_f64s() {\n         assert_eq!([0.5f64, 3.2321f64, 1.5678f64].sum(), 5.2999);"}]}