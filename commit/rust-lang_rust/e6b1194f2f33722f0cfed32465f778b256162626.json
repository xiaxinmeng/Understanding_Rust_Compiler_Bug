{"sha": "e6b1194f2f33722f0cfed32465f778b256162626", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2YjExOTRmMmYzMzcyMmYwY2ZlZDMyNDY1Zjc3OGIyNTYxNjI2MjY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-20T15:26:49Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-20T15:52:02Z"}, "message": "Move some code to scope", "tree": {"sha": "7b88847299a5f628a3677f0475a7e80b4afd9e9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b88847299a5f628a3677f0475a7e80b4afd9e9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6b1194f2f33722f0cfed32465f778b256162626", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6b1194f2f33722f0cfed32465f778b256162626", "html_url": "https://github.com/rust-lang/rust/commit/e6b1194f2f33722f0cfed32465f778b256162626", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6b1194f2f33722f0cfed32465f778b256162626/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f9e3f3632f3c03d44a23daf0d9ce4966816af86", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f9e3f3632f3c03d44a23daf0d9ce4966816af86", "html_url": "https://github.com/rust-lang/rust/commit/4f9e3f3632f3c03d44a23daf0d9ce4966816af86"}], "stats": {"total": 63, "additions": 37, "deletions": 26}, "files": [{"sha": "f4fb768cd3a6803c7c6706d8e21aa50a76511d37", "filename": "crates/ra_hir_def/src/item_scope.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e6b1194f2f33722f0cfed32465f778b256162626/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6b1194f2f33722f0cfed32465f778b256162626/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs?ref=e6b1194f2f33722f0cfed32465f778b256162626", "patch": "@@ -47,6 +47,41 @@ pub(crate) enum BuiltinShadowMode {\n /// Legacy macros can only be accessed through special methods like `get_legacy_macros`.\n /// Other methods will only resolve values, types and module scoped macros only.\n impl ItemScope {\n+    pub fn push_res(\n+        &mut self,\n+        name: Name,\n+        res: &Resolution,\n+        import: Option<LocalImportId>,\n+    ) -> bool {\n+        let mut changed = false;\n+        let existing = self.items.entry(name.clone()).or_default();\n+\n+        if existing.def.types.is_none() && res.def.types.is_some() {\n+            existing.def.types = res.def.types;\n+            existing.import = import.or(res.import);\n+            changed = true;\n+        }\n+        if existing.def.values.is_none() && res.def.values.is_some() {\n+            existing.def.values = res.def.values;\n+            existing.import = import.or(res.import);\n+            changed = true;\n+        }\n+        if existing.def.macros.is_none() && res.def.macros.is_some() {\n+            existing.def.macros = res.def.macros;\n+            existing.import = import.or(res.import);\n+            changed = true;\n+        }\n+\n+        if existing.def.is_none()\n+            && res.def.is_none()\n+            && existing.import.is_none()\n+            && res.import.is_some()\n+        {\n+            existing.import = res.import;\n+        }\n+        changed\n+    }\n+\n     pub fn entries<'a>(&'a self) -> impl Iterator<Item = (&'a Name, &'a Resolution)> + 'a {\n         //FIXME: shadowing\n         self.items.iter().chain(BUILTIN_SCOPE.iter())"}, {"sha": "95c499ec9fcd86f0a3578213274f9cbb94f7835e", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 2, "deletions": 26, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e6b1194f2f33722f0cfed32465f778b256162626/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6b1194f2f33722f0cfed32465f778b256162626/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=e6b1194f2f33722f0cfed32465f778b256162626", "patch": "@@ -467,34 +467,10 @@ where\n             // prevent stack overflows (but this shouldn't be possible)\n             panic!(\"infinite recursion in glob imports!\");\n         }\n-        let module_items = &mut self.def_map.modules[module_id].scope;\n+        let scope = &mut self.def_map.modules[module_id].scope;\n         let mut changed = false;\n         for (name, res) in resolutions {\n-            let existing = module_items.items.entry(name.clone()).or_default();\n-\n-            if existing.def.types.is_none() && res.def.types.is_some() {\n-                existing.def.types = res.def.types;\n-                existing.import = import.or(res.import);\n-                changed = true;\n-            }\n-            if existing.def.values.is_none() && res.def.values.is_some() {\n-                existing.def.values = res.def.values;\n-                existing.import = import.or(res.import);\n-                changed = true;\n-            }\n-            if existing.def.macros.is_none() && res.def.macros.is_some() {\n-                existing.def.macros = res.def.macros;\n-                existing.import = import.or(res.import);\n-                changed = true;\n-            }\n-\n-            if existing.def.is_none()\n-                && res.def.is_none()\n-                && existing.import.is_none()\n-                && res.import.is_some()\n-            {\n-                existing.import = res.import;\n-            }\n+            changed |= scope.push_res(name.clone(), res, import);\n         }\n \n         if !changed {"}]}