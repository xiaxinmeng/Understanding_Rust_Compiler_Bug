{"sha": "e9615f2487dc2acdad2d1dd7668808728f99e310", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5NjE1ZjI0ODdkYzJhY2RhZDJkMWRkNzY2ODgwODcyOGY5OWUzMTA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-12T08:58:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-12T08:58:13Z"}, "message": "Rollup merge of #63297 - RalfJung:ptr_offset, r=dtolnay\n\nImprove pointer offset method docs\n\nCc @rkruppe @gnzlbg", "tree": {"sha": "0eb16276ced8ea4daa946536040be667cb465792", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0eb16276ced8ea4daa946536040be667cb465792"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9615f2487dc2acdad2d1dd7668808728f99e310", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdUSolCRBK7hj4Ov3rIwAAdHIIAAyQowpkCZnP2/QArW7Txlri\nxCYSyjD2BGqHFDsZzKq6hKwutkNHUZTfsYrdLdoXJS4Wbrfc79XgPmaom0udm/RO\nkLWEyMGlm9Zzt26MGWqcT/4bUvq8cl0HkvJzVr8xHVf1NTWQaB43U6ZdYmkdysMy\n0ifVGdfLOqo+J2XMhXbv7E2d+S+rFgVqr5sB8gZbtyDxEDnZMY8lOnztFy11JxOC\nUT1QvAnSfvzS0kLBShwf24mHDeNbN8cAhJg3apNrRZ3Lzxdk3C97SmxCtHtbCetF\nOceJH35jV+ssf+Ja1nHXsVYZmbJAuf43iu6Utv8XP1t7o9X2YJE9CkYh66WhVnc=\n=hBhk\n-----END PGP SIGNATURE-----\n", "payload": "tree 0eb16276ced8ea4daa946536040be667cb465792\nparent 0b4823de23ea6af70f49bd7fb8e811fc6dffe006\nparent 0dc9e2a56502c1138c6faf021888844905e64cf3\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1565600293 +0200\ncommitter GitHub <noreply@github.com> 1565600293 +0200\n\nRollup merge of #63297 - RalfJung:ptr_offset, r=dtolnay\n\nImprove pointer offset method docs\n\nCc @rkruppe @gnzlbg\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9615f2487dc2acdad2d1dd7668808728f99e310", "html_url": "https://github.com/rust-lang/rust/commit/e9615f2487dc2acdad2d1dd7668808728f99e310", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9615f2487dc2acdad2d1dd7668808728f99e310/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b4823de23ea6af70f49bd7fb8e811fc6dffe006", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b4823de23ea6af70f49bd7fb8e811fc6dffe006", "html_url": "https://github.com/rust-lang/rust/commit/0b4823de23ea6af70f49bd7fb8e811fc6dffe006"}, {"sha": "0dc9e2a56502c1138c6faf021888844905e64cf3", "url": "https://api.github.com/repos/rust-lang/rust/commits/0dc9e2a56502c1138c6faf021888844905e64cf3", "html_url": "https://github.com/rust-lang/rust/commit/0dc9e2a56502c1138c6faf021888844905e64cf3"}], "stats": {"total": 162, "additions": 128, "deletions": 34}, "files": [{"sha": "f5fbd1a6b1325c82cee54711876a97f624aa4831", "filename": "src/libcore/ptr/mod.rs", "status": "modified", "additions": 128, "deletions": 34, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/e9615f2487dc2acdad2d1dd7668808728f99e310/src%2Flibcore%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9615f2487dc2acdad2d1dd7668808728f99e310/src%2Flibcore%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmod.rs?ref=e9615f2487dc2acdad2d1dd7668808728f99e310", "patch": "@@ -1120,7 +1120,8 @@ impl<T: ?Sized> *const T {\n     /// Behavior:\n     ///\n     /// * Both the starting and resulting pointer must be either in bounds or one\n-    ///   byte past the end of the same allocated object.\n+    ///   byte past the end of the same allocated object. Note that in Rust,\n+    ///   every (stack-allocated) variable is considered a separate allocated object.\n     ///\n     /// * The computed offset, **in bytes**, cannot overflow an `isize`.\n     ///\n@@ -1140,10 +1141,12 @@ impl<T: ?Sized> *const T {\n     /// Extension. As such, memory acquired directly from allocators or memory\n     /// mapped files *may* be too large to handle with this function.\n     ///\n-    /// Consider using `wrapping_offset` instead if these constraints are\n+    /// Consider using [`wrapping_offset`] instead if these constraints are\n     /// difficult to satisfy. The only advantage of this method is that it\n     /// enables more aggressive compiler optimizations.\n     ///\n+    /// [`wrapping_offset`]: #method.wrapping_offset\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -1172,15 +1175,26 @@ impl<T: ?Sized> *const T {\n     ///\n     /// The resulting pointer does not need to be in bounds, but it is\n     /// potentially hazardous to dereference (which requires `unsafe`).\n-    /// In particular, the resulting pointer may *not* be used to access a\n-    /// different allocated object than the one `self` points to. In other\n-    /// words, `x.wrapping_offset(y.wrapping_offset_from(x))` is\n+    ///\n+    /// In particular, the resulting pointer remains attached to the same allocated\n+    /// object that `self` points to. It may *not* be used to access a\n+    /// different allocated object. Note that in Rust,\n+    /// every (stack-allocated) variable is considered a separate allocated object.\n+    ///\n+    /// In other words, `x.wrapping_offset(y.wrapping_offset_from(x))` is\n     /// *not* the same as `y`, and dereferencing it is undefined behavior\n     /// unless `x` and `y` point into the same allocated object.\n     ///\n-    /// Always use `.offset(count)` instead when possible, because `offset`\n-    /// allows the compiler to optimize better. If you need to cross object\n-    /// boundaries, cast the pointer to an integer and do the arithmetic there.\n+    /// Compared to [`offset`], this method basically delays the requirement of staying\n+    /// within the same allocated object: [`offset`] is immediate Undefined Behavior when\n+    /// crossing object boundaries; `wrapping_offset` produces a pointer but still leads\n+    /// to Undefined Behavior if that pointer is dereferenced. [`offset`] can be optimized\n+    /// better and is thus preferrable in performance-sensitive code.\n+    ///\n+    /// If you need to cross object boundaries, cast the pointer to an integer and\n+    /// do the arithmetic there.\n+    ///\n+    /// [`offset`]: #method.offset\n     ///\n     /// # Examples\n     ///\n@@ -1223,7 +1237,8 @@ impl<T: ?Sized> *const T {\n     /// Behavior:\n     ///\n     /// * Both the starting and other pointer must be either in bounds or one\n-    ///   byte past the end of the same allocated object.\n+    ///   byte past the end of the same allocated object. Note that in Rust,\n+    ///   every (stack-allocated) variable is considered a separate allocated object.\n     ///\n     /// * The distance between the pointers, **in bytes**, cannot overflow an `isize`.\n     ///\n@@ -1338,7 +1353,8 @@ impl<T: ?Sized> *const T {\n     /// Behavior:\n     ///\n     /// * Both the starting and resulting pointer must be either in bounds or one\n-    ///   byte past the end of the same allocated object.\n+    ///   byte past the end of the same allocated object. Note that in Rust,\n+    ///   every (stack-allocated) variable is considered a separate allocated object.\n     ///\n     /// * The computed offset, **in bytes**, cannot overflow an `isize`.\n     ///\n@@ -1358,10 +1374,12 @@ impl<T: ?Sized> *const T {\n     /// Extension. As such, memory acquired directly from allocators or memory\n     /// mapped files *may* be too large to handle with this function.\n     ///\n-    /// Consider using `wrapping_offset` instead if these constraints are\n+    /// Consider using [`wrapping_add`] instead if these constraints are\n     /// difficult to satisfy. The only advantage of this method is that it\n     /// enables more aggressive compiler optimizations.\n     ///\n+    /// [`wrapping_add`]: #method.wrapping_add\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -1395,7 +1413,8 @@ impl<T: ?Sized> *const T {\n     /// Behavior:\n     ///\n     /// * Both the starting and resulting pointer must be either in bounds or one\n-    ///   byte past the end of the same allocated object.\n+    ///   byte past the end of the same allocated object. Note that in Rust,\n+    ///   every (stack-allocated) variable is considered a separate allocated object.\n     ///\n     /// * The computed offset cannot exceed `isize::MAX` **bytes**.\n     ///\n@@ -1415,10 +1434,12 @@ impl<T: ?Sized> *const T {\n     /// Extension. As such, memory acquired directly from allocators or memory\n     /// mapped files *may* be too large to handle with this function.\n     ///\n-    /// Consider using `wrapping_offset` instead if these constraints are\n+    /// Consider using [`wrapping_sub`] instead if these constraints are\n     /// difficult to satisfy. The only advantage of this method is that it\n     /// enables more aggressive compiler optimizations.\n     ///\n+    /// [`wrapping_sub`]: #method.wrapping_sub\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -1451,8 +1472,21 @@ impl<T: ?Sized> *const T {\n     /// The resulting pointer does not need to be in bounds, but it is\n     /// potentially hazardous to dereference (which requires `unsafe`).\n     ///\n-    /// Always use `.add(count)` instead when possible, because `add`\n-    /// allows the compiler to optimize better.\n+    /// In particular, the resulting pointer remains attached to the same allocated\n+    /// object that `self` points to. It may *not* be used to access a\n+    /// different allocated object. Note that in Rust,\n+    /// every (stack-allocated) variable is considered a separate allocated object.\n+    ///\n+    /// Compared to [`add`], this method basically delays the requirement of staying\n+    /// within the same allocated object: [`add`] is immediate Undefined Behavior when\n+    /// crossing object boundaries; `wrapping_add` produces a pointer but still leads\n+    /// to Undefined Behavior if that pointer is dereferenced. [`add`] can be optimized\n+    /// better and is thus preferrable in performance-sensitive code.\n+    ///\n+    /// If you need to cross object boundaries, cast the pointer to an integer and\n+    /// do the arithmetic there.\n+    ///\n+    /// [`add`]: #method.add\n     ///\n     /// # Examples\n     ///\n@@ -1492,8 +1526,21 @@ impl<T: ?Sized> *const T {\n     /// The resulting pointer does not need to be in bounds, but it is\n     /// potentially hazardous to dereference (which requires `unsafe`).\n     ///\n-    /// Always use `.sub(count)` instead when possible, because `sub`\n-    /// allows the compiler to optimize better.\n+    /// In particular, the resulting pointer remains attached to the same allocated\n+    /// object that `self` points to. It may *not* be used to access a\n+    /// different allocated object. Note that in Rust,\n+    /// every (stack-allocated) variable is considered a separate allocated object.\n+    ///\n+    /// Compared to [`sub`], this method basically delays the requirement of staying\n+    /// within the same allocated object: [`sub`] is immediate Undefined Behavior when\n+    /// crossing object boundaries; `wrapping_sub` produces a pointer but still leads\n+    /// to Undefined Behavior if that pointer is dereferenced. [`sub`] can be optimized\n+    /// better and is thus preferrable in performance-sensitive code.\n+    ///\n+    /// If you need to cross object boundaries, cast the pointer to an integer and\n+    /// do the arithmetic there.\n+    ///\n+    /// [`sub`]: #method.sub\n     ///\n     /// # Examples\n     ///\n@@ -1757,7 +1804,8 @@ impl<T: ?Sized> *mut T {\n     /// Behavior:\n     ///\n     /// * Both the starting and resulting pointer must be either in bounds or one\n-    ///   byte past the end of the same allocated object.\n+    ///   byte past the end of the same allocated object. Note that in Rust,\n+    ///   every (stack-allocated) variable is considered a separate allocated object.\n     ///\n     /// * The computed offset, **in bytes**, cannot overflow an `isize`.\n     ///\n@@ -1777,10 +1825,12 @@ impl<T: ?Sized> *mut T {\n     /// Extension. As such, memory acquired directly from allocators or memory\n     /// mapped files *may* be too large to handle with this function.\n     ///\n-    /// Consider using `wrapping_offset` instead if these constraints are\n+    /// Consider using [`wrapping_offset`] instead if these constraints are\n     /// difficult to satisfy. The only advantage of this method is that it\n     /// enables more aggressive compiler optimizations.\n     ///\n+    /// [`wrapping_offset`]: #method.wrapping_offset\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -1808,15 +1858,26 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// The resulting pointer does not need to be in bounds, but it is\n     /// potentially hazardous to dereference (which requires `unsafe`).\n-    /// In particular, the resulting pointer may *not* be used to access a\n-    /// different allocated object than the one `self` points to. In other\n-    /// words, `x.wrapping_offset(y.wrapping_offset_from(x))` is\n+    ///\n+    /// In particular, the resulting pointer remains attached to the same allocated\n+    /// object that `self` points to. It may *not* be used to access a\n+    /// different allocated object. Note that in Rust,\n+    /// every (stack-allocated) variable is considered a separate allocated object.\n+    ///\n+    /// In other words, `x.wrapping_offset(y.wrapping_offset_from(x))` is\n     /// *not* the same as `y`, and dereferencing it is undefined behavior\n     /// unless `x` and `y` point into the same allocated object.\n     ///\n-    /// Always use `.offset(count)` instead when possible, because `offset`\n-    /// allows the compiler to optimize better. If you need to cross object\n-    /// boundaries, cast the pointer to an integer and do the arithmetic there.\n+    /// Compared to [`offset`], this method basically delays the requirement of staying\n+    /// within the same allocated object: [`offset`] is immediate Undefined Behavior when\n+    /// crossing object boundaries; `wrapping_offset` produces a pointer but still leads\n+    /// to Undefined Behavior if that pointer is dereferenced. [`offset`] can be optimized\n+    /// better and is thus preferrable in performance-sensitive code.\n+    ///\n+    /// If you need to cross object boundaries, cast the pointer to an integer and\n+    /// do the arithmetic there.\n+    ///\n+    /// [`offset`]: #method.offset\n     ///\n     /// # Examples\n     ///\n@@ -1903,7 +1964,8 @@ impl<T: ?Sized> *mut T {\n     /// Behavior:\n     ///\n     /// * Both the starting and other pointer must be either in bounds or one\n-    ///   byte past the end of the same allocated object.\n+    ///   byte past the end of the same allocated object. Note that in Rust,\n+    ///   every (stack-allocated) variable is considered a separate allocated object.\n     ///\n     /// * The distance between the pointers, **in bytes**, cannot overflow an `isize`.\n     ///\n@@ -2007,7 +2069,8 @@ impl<T: ?Sized> *mut T {\n     /// Behavior:\n     ///\n     /// * Both the starting and resulting pointer must be either in bounds or one\n-    ///   byte past the end of the same allocated object.\n+    ///   byte past the end of the same allocated object. Note that in Rust,\n+    ///   every (stack-allocated) variable is considered a separate allocated object.\n     ///\n     /// * The computed offset, **in bytes**, cannot overflow an `isize`.\n     ///\n@@ -2027,10 +2090,12 @@ impl<T: ?Sized> *mut T {\n     /// Extension. As such, memory acquired directly from allocators or memory\n     /// mapped files *may* be too large to handle with this function.\n     ///\n-    /// Consider using `wrapping_offset` instead if these constraints are\n+    /// Consider using [`wrapping_add`] instead if these constraints are\n     /// difficult to satisfy. The only advantage of this method is that it\n     /// enables more aggressive compiler optimizations.\n     ///\n+    /// [`wrapping_add`]: #method.wrapping_add\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -2064,7 +2129,8 @@ impl<T: ?Sized> *mut T {\n     /// Behavior:\n     ///\n     /// * Both the starting and resulting pointer must be either in bounds or one\n-    ///   byte past the end of the same allocated object.\n+    ///   byte past the end of the same allocated object. Note that in Rust,\n+    ///   every (stack-allocated) variable is considered a separate allocated object.\n     ///\n     /// * The computed offset cannot exceed `isize::MAX` **bytes**.\n     ///\n@@ -2084,10 +2150,12 @@ impl<T: ?Sized> *mut T {\n     /// Extension. As such, memory acquired directly from allocators or memory\n     /// mapped files *may* be too large to handle with this function.\n     ///\n-    /// Consider using `wrapping_offset` instead if these constraints are\n+    /// Consider using [`wrapping_sub`] instead if these constraints are\n     /// difficult to satisfy. The only advantage of this method is that it\n     /// enables more aggressive compiler optimizations.\n     ///\n+    /// [`wrapping_sub`]: #method.wrapping_sub\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -2120,8 +2188,21 @@ impl<T: ?Sized> *mut T {\n     /// The resulting pointer does not need to be in bounds, but it is\n     /// potentially hazardous to dereference (which requires `unsafe`).\n     ///\n-    /// Always use `.add(count)` instead when possible, because `add`\n-    /// allows the compiler to optimize better.\n+    /// In particular, the resulting pointer remains attached to the same allocated\n+    /// object that `self` points to. It may *not* be used to access a\n+    /// different allocated object. Note that in Rust,\n+    /// every (stack-allocated) variable is considered a separate allocated object.\n+    ///\n+    /// Compared to [`add`], this method basically delays the requirement of staying\n+    /// within the same allocated object: [`add`] is immediate Undefined Behavior when\n+    /// crossing object boundaries; `wrapping_add` produces a pointer but still leads\n+    /// to Undefined Behavior if that pointer is dereferenced. [`add`] can be optimized\n+    /// better and is thus preferrable in performance-sensitive code.\n+    ///\n+    /// If you need to cross object boundaries, cast the pointer to an integer and\n+    /// do the arithmetic there.\n+    ///\n+    /// [`add`]: #method.add\n     ///\n     /// # Examples\n     ///\n@@ -2161,8 +2242,21 @@ impl<T: ?Sized> *mut T {\n     /// The resulting pointer does not need to be in bounds, but it is\n     /// potentially hazardous to dereference (which requires `unsafe`).\n     ///\n-    /// Always use `.sub(count)` instead when possible, because `sub`\n-    /// allows the compiler to optimize better.\n+    /// In particular, the resulting pointer remains attached to the same allocated\n+    /// object that `self` points to. It may *not* be used to access a\n+    /// different allocated object. Note that in Rust,\n+    /// every (stack-allocated) variable is considered a separate allocated object.\n+    ///\n+    /// Compared to [`sub`], this method basically delays the requirement of staying\n+    /// within the same allocated object: [`sub`] is immediate Undefined Behavior when\n+    /// crossing object boundaries; `wrapping_sub` produces a pointer but still leads\n+    /// to Undefined Behavior if that pointer is dereferenced. [`sub`] can be optimized\n+    /// better and is thus preferrable in performance-sensitive code.\n+    ///\n+    /// If you need to cross object boundaries, cast the pointer to an integer and\n+    /// do the arithmetic there.\n+    ///\n+    /// [`sub`]: #method.sub\n     ///\n     /// # Examples\n     ///"}]}