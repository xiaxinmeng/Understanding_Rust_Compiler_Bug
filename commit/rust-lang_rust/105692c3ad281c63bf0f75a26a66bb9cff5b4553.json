{"sha": "105692c3ad281c63bf0f75a26a66bb9cff5b4553", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwNTY5MmMzYWQyODFjNjNiZjBmNzVhMjZhNjZiYjljZmY1YjQ1NTM=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2019-03-30T18:11:32Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2019-03-30T18:11:32Z"}, "message": "Use a single llvm_info variable", "tree": {"sha": "aa5e8d8962ce7b39e8f8a16e1868f99d8c9907aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa5e8d8962ce7b39e8f8a16e1868f99d8c9907aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/105692c3ad281c63bf0f75a26a66bb9cff5b4553", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/105692c3ad281c63bf0f75a26a66bb9cff5b4553", "html_url": "https://github.com/rust-lang/rust/commit/105692c3ad281c63bf0f75a26a66bb9cff5b4553", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/105692c3ad281c63bf0f75a26a66bb9cff5b4553/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "975ba58f42b34ff07cd7c2bd73350daed2057186", "url": "https://api.github.com/repos/rust-lang/rust/commits/975ba58f42b34ff07cd7c2bd73350daed2057186", "html_url": "https://github.com/rust-lang/rust/commit/975ba58f42b34ff07cd7c2bd73350daed2057186"}], "stats": {"total": 21, "additions": 8, "deletions": 13}, "files": [{"sha": "fde40b0d1b407ad038d71cb4336574fbfafe4368", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/105692c3ad281c63bf0f75a26a66bb9cff5b4553/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/105692c3ad281c63bf0f75a26a66bb9cff5b4553/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=105692c3ad281c63bf0f75a26a66bb9cff5b4553", "patch": "@@ -67,21 +67,21 @@ impl Step for Llvm {\n             }\n         }\n \n-        let (llvm_commit, root, out_dir, llvm_config_ret_dir) = if emscripten {\n-            let sha = builder.build.emscripten_llvm_info.sha();\n+        let (llvm_info, root, out_dir, llvm_config_ret_dir) = if emscripten {\n+            let info = &builder.emscripten_llvm_info;\n             let dir = builder.emscripten_llvm_out(target);\n             let config_dir = dir.join(\"bin\");\n-            (sha, \"src/llvm-emscripten\", dir, config_dir)\n+            (info, \"src/llvm-emscripten\", dir, config_dir)\n         } else {\n-            let sha = builder.build.in_tree_llvm_info.sha();\n+            let info = &builder.in_tree_llvm_info;\n             let mut dir = builder.llvm_out(builder.config.build);\n             if !builder.config.build.contains(\"msvc\") || builder.config.ninja {\n                 dir.push(\"build\");\n             }\n-            (sha, \"src/llvm-project/llvm\", builder.llvm_out(target), dir.join(\"bin\"))\n+            (info, \"src/llvm-project/llvm\", builder.llvm_out(target), dir.join(\"bin\"))\n         };\n \n-        if llvm_commit.is_none() {\n+        if !llvm_info.is_git() {\n             println!(\n                 \"git could not determine the LLVM submodule commit hash. \\\n                 Assuming that an LLVM build is necessary.\",\n@@ -92,7 +92,7 @@ impl Step for Llvm {\n             .join(exe(\"llvm-config\", &*builder.config.build));\n         let done_stamp = out_dir.join(\"llvm-finished-building\");\n \n-        if let Some(llvm_commit) = llvm_commit {\n+        if let Some(llvm_commit) = llvm_info.sha() {\n             if done_stamp.exists() {\n                 let done_contents = t!(fs::read(&done_stamp));\n \n@@ -251,11 +251,6 @@ impl Step for Llvm {\n                 channel::CFG_RELEASE_NUM,\n                 builder.config.channel,\n             );\n-            let llvm_info = if self.emscripten {\n-                &builder.emscripten_llvm_info\n-            } else {\n-                &builder.in_tree_llvm_info\n-            };\n             if let Some(sha) = llvm_info.sha_short() {\n                 default_suffix.push_str(\"-\");\n                 default_suffix.push_str(sha);\n@@ -288,7 +283,7 @@ impl Step for Llvm {\n \n         cfg.build();\n \n-        if let Some(llvm_commit) = llvm_commit {\n+        if let Some(llvm_commit) = llvm_info.sha() {\n             t!(fs::write(&done_stamp, llvm_commit));\n         }\n "}]}