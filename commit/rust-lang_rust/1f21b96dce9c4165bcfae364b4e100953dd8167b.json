{"sha": "1f21b96dce9c4165bcfae364b4e100953dd8167b", "node_id": "C_kwDOAAsO6NoAKDFmMjFiOTZkY2U5YzQxNjViY2ZhZTM2NGI0ZTEwMDk1M2RkODE2N2I", "commit": {"author": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2022-11-03T06:15:17Z"}, "committer": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2022-11-08T03:17:46Z"}, "message": "add 'ty_error_with_guaranteed' and 'const_error_with_guaranteed'", "tree": {"sha": "d62765f6275c8024822cfbd0884de57a5b06869a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d62765f6275c8024822cfbd0884de57a5b06869a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f21b96dce9c4165bcfae364b4e100953dd8167b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f21b96dce9c4165bcfae364b4e100953dd8167b", "html_url": "https://github.com/rust-lang/rust/commit/1f21b96dce9c4165bcfae364b4e100953dd8167b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f21b96dce9c4165bcfae364b4e100953dd8167b/comments", "author": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57d3c58ed6e0faf89a62411f96c000ffc9fd3937", "url": "https://api.github.com/repos/rust-lang/rust/commits/57d3c58ed6e0faf89a62411f96c000ffc9fd3937", "html_url": "https://github.com/rust-lang/rust/commit/57d3c58ed6e0faf89a62411f96c000ffc9fd3937"}], "stats": {"total": 115, "additions": 68, "deletions": 47}, "files": [{"sha": "dd222485daf2c01b3188ff5abaa564065fa69246", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f21b96dce9c4165bcfae364b4e100953dd8167b/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f21b96dce9c4165bcfae364b4e100953dd8167b/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=1f21b96dce9c4165bcfae364b4e100953dd8167b", "patch": "@@ -299,8 +299,8 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n         if errors.is_empty() {\n             definition_ty\n         } else {\n-            infcx.err_ctxt().report_fulfillment_errors(&errors, None);\n-            self.tcx.ty_error()\n+            let reported = infcx.err_ctxt().report_fulfillment_errors(&errors, None);\n+            self.tcx.ty_error_with_guaranteed(reported)\n         }\n     }\n }"}, {"sha": "14cfc3613bf0c890357dc20e8e4d4db2846f41aa", "filename": "compiler/rustc_borrowck/src/type_check/free_region_relations.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f21b96dce9c4165bcfae364b4e100953dd8167b/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f21b96dce9c4165bcfae364b4e100953dd8167b/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs?ref=1f21b96dce9c4165bcfae364b4e100953dd8167b", "patch": "@@ -247,12 +247,13 @@ impl<'tcx> UniversalRegionRelationsBuilder<'_, 'tcx> {\n                     .and(type_op::normalize::Normalize::new(ty))\n                     .fully_perform(self.infcx)\n                     .unwrap_or_else(|_| {\n-                        self.infcx\n+                        let reported = self\n+                            .infcx\n                             .tcx\n                             .sess\n                             .delay_span_bug(span, &format!(\"failed to normalize {:?}\", ty));\n                         TypeOpOutput {\n-                            output: self.infcx.tcx.ty_error(),\n+                            output: self.infcx.tcx.ty_error_with_guaranteed(reported),\n                             constraints: None,\n                             error_info: None,\n                         }"}, {"sha": "9c1d0bb8b235752feff6217722def95cf51be6da", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f21b96dce9c4165bcfae364b4e100953dd8167b/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f21b96dce9c4165bcfae364b4e100953dd8167b/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=1f21b96dce9c4165bcfae364b4e100953dd8167b", "patch": "@@ -233,11 +233,11 @@ pub(crate) fn type_check<'mir, 'tcx>(\n             let mut hidden_type = infcx.resolve_vars_if_possible(decl.hidden_type);\n             trace!(\"finalized opaque type {:?} to {:#?}\", opaque_type_key, hidden_type.ty.kind());\n             if hidden_type.has_non_region_infer() {\n-                infcx.tcx.sess.delay_span_bug(\n+                let reported = infcx.tcx.sess.delay_span_bug(\n                     decl.hidden_type.span,\n                     &format!(\"could not resolve {:#?}\", hidden_type.ty.kind()),\n                 );\n-                hidden_type.ty = infcx.tcx.ty_error();\n+                hidden_type.ty = infcx.tcx.ty_error_with_guaranteed(reported);\n             }\n \n             (opaque_type_key, (hidden_type, decl.origin))"}, {"sha": "730061fca99369791a0791aebcab0aaa13baf36d", "filename": "compiler/rustc_errors/src/diagnostic_builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f21b96dce9c4165bcfae364b4e100953dd8167b/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f21b96dce9c4165bcfae364b4e100953dd8167b/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs?ref=1f21b96dce9c4165bcfae364b4e100953dd8167b", "patch": "@@ -482,9 +482,9 @@ impl<'a, G: EmissionGuarantee> DiagnosticBuilder<'a, G> {\n     /// In the meantime, though, callsites are required to deal with the \"bug\"\n     /// locally in whichever way makes the most sense.\n     #[track_caller]\n-    pub fn delay_as_bug(&mut self) {\n+    pub fn delay_as_bug(&mut self) -> G {\n         self.downgrade_to_delayed_bug();\n-        self.emit();\n+        self.emit()\n     }\n \n     forward!("}, {"sha": "2665813478c2c4649b108dbd119d2c8606cf338a", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1f21b96dce9c4165bcfae364b4e100953dd8167b/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f21b96dce9c4165bcfae364b4e100953dd8167b/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=1f21b96dce9c4165bcfae364b4e100953dd8167b", "patch": "@@ -1201,7 +1201,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     (_, _) => {\n                         let got = if let Some(_) = term.ty() { \"type\" } else { \"constant\" };\n                         let expected = def_kind.descr(assoc_item_def_id);\n-                        tcx.sess\n+                        let reported = tcx\n+                            .sess\n                             .struct_span_err(\n                                 binding.span,\n                                 &format!(\"expected {expected} bound, found {got}\"),\n@@ -1212,11 +1213,14 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             )\n                             .emit();\n                         term = match def_kind {\n-                            hir::def::DefKind::AssocTy => tcx.ty_error().into(),\n+                            hir::def::DefKind::AssocTy => {\n+                                tcx.ty_error_with_guaranteed(reported).into()\n+                            }\n                             hir::def::DefKind::AssocConst => tcx\n-                                .const_error(\n+                                .const_error_with_guaranteed(\n                                     tcx.bound_type_of(assoc_item_def_id)\n                                         .subst(tcx, projection_ty.skip_binder().substs),\n+                                    reported,\n                                 )\n                                 .into(),\n                             _ => unreachable!(),\n@@ -1334,8 +1338,9 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 .map(|&(trait_ref, _, _)| trait_ref.def_id())\n                 .find(|&trait_ref| tcx.is_trait_alias(trait_ref))\n                 .map(|trait_ref| tcx.def_span(trait_ref));\n-            tcx.sess.emit_err(TraitObjectDeclaredWithNoTraits { span, trait_alias_span });\n-            return tcx.ty_error();\n+            let reported =\n+                tcx.sess.emit_err(TraitObjectDeclaredWithNoTraits { span, trait_alias_span });\n+            return tcx.ty_error_with_guaranteed(reported);\n         }\n \n         // Check that there are no gross object safety violations;\n@@ -1345,14 +1350,14 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             let object_safety_violations =\n                 astconv_object_safety_violations(tcx, item.trait_ref().def_id());\n             if !object_safety_violations.is_empty() {\n-                report_object_safety_error(\n+                let reported = report_object_safety_error(\n                     tcx,\n                     span,\n                     item.trait_ref().def_id(),\n                     &object_safety_violations,\n                 )\n                 .emit();\n-                return tcx.ty_error();\n+                return tcx.ty_error_with_guaranteed(reported);\n             }\n         }\n \n@@ -2112,13 +2117,13 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 \"Type\"\n             };\n \n-            self.report_ambiguous_associated_type(\n+            let reported = self.report_ambiguous_associated_type(\n                 span,\n                 type_name,\n                 &path_str,\n                 item_segment.ident.name,\n             );\n-            return tcx.ty_error();\n+            return tcx.ty_error_with_guaranteed(reported)\n         };\n \n         debug!(\"qpath_to_ty: self_type={:?}\", self_ty);\n@@ -2560,8 +2565,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     {\n                         err.span_note(impl_.self_ty.span, \"not a concrete type\");\n                     }\n-                    err.emit();\n-                    tcx.ty_error()\n+                    tcx.ty_error_with_guaranteed(err.emit())\n                 } else {\n                     self.normalize_ty(span, ty)\n                 }"}, {"sha": "660c56ee8b011fb568be285d91bedc9857b95d91", "filename": "compiler/rustc_hir_analysis/src/check/compare_method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f21b96dce9c4165bcfae364b4e100953dd8167b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f21b96dce9c4165bcfae364b4e100953dd8167b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=1f21b96dce9c4165bcfae364b4e100953dd8167b", "patch": "@@ -611,11 +611,11 @@ pub fn collect_trait_impl_trait_tys<'tcx>(\n                 collected_tys.insert(def_id, ty);\n             }\n             Err(err) => {\n-                tcx.sess.delay_span_bug(\n+                let reported = tcx.sess.delay_span_bug(\n                     return_span,\n                     format!(\"could not fully resolve: {ty} => {err:?}\"),\n                 );\n-                collected_tys.insert(def_id, tcx.ty_error());\n+                collected_tys.insert(def_id, tcx.ty_error_with_guaranteed(reported));\n             }\n         }\n     }"}, {"sha": "4bca16c3a1ccef74d54f21cb22dd419055b6e7a7", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f21b96dce9c4165bcfae364b4e100953dd8167b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f21b96dce9c4165bcfae364b4e100953dd8167b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=1f21b96dce9c4165bcfae364b4e100953dd8167b", "patch": "@@ -512,8 +512,7 @@ impl<'tcx> AstConv<'tcx> for ItemCtxt<'tcx> {\n                 }\n                 _ => {}\n             }\n-            err.emit();\n-            self.tcx().ty_error()\n+            self.tcx().ty_error_with_guaranteed(err.emit())\n         }\n     }\n "}, {"sha": "2402495c2e4a6ffde84ea918a633705408a27c27", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f21b96dce9c4165bcfae364b4e100953dd8167b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f21b96dce9c4165bcfae364b4e100953dd8167b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=1f21b96dce9c4165bcfae364b4e100953dd8167b", "patch": "@@ -698,7 +698,7 @@ fn find_opaque_ty_constraints_for_tait(tcx: TyCtxt<'_>, def_id: LocalDefId) -> T\n     }\n \n     let Some(hidden) = locator.found else {\n-        tcx.sess.emit_err(UnconstrainedOpaqueType {\n+        let reported = tcx.sess.emit_err(UnconstrainedOpaqueType {\n             span: tcx.def_span(def_id),\n             name: tcx.item_name(tcx.local_parent(def_id).to_def_id()),\n             what: match tcx.hir().get(scope) {\n@@ -708,7 +708,7 @@ fn find_opaque_ty_constraints_for_tait(tcx: TyCtxt<'_>, def_id: LocalDefId) -> T\n                 _ => \"item\",\n             },\n         });\n-        return tcx.ty_error();\n+        return tcx.ty_error_with_guaranteed(reported);\n     };\n \n     // Only check against typeck if we didn't already error"}, {"sha": "4d8ab2c1c7ad94fe15c646a3115b5655291bdd20", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f21b96dce9c4165bcfae364b4e100953dd8167b/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f21b96dce9c4165bcfae364b4e100953dd8167b/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=1f21b96dce9c4165bcfae364b4e100953dd8167b", "patch": "@@ -1639,9 +1639,9 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                 if visitor.ret_exprs.len() > 0 && let Some(expr) = expression {\n                     self.note_unreachable_loop_return(&mut err, &expr, &visitor.ret_exprs);\n                 }\n-                err.emit_unless(unsized_return);\n+                let reported = err.emit_unless(unsized_return);\n \n-                self.final_ty = Some(fcx.tcx.ty_error());\n+                self.final_ty = Some(fcx.tcx.ty_error_with_guaranteed(reported));\n             }\n         }\n     }"}, {"sha": "e84734f46cb46e157aec45c40709b4f8d27de761", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1f21b96dce9c4165bcfae364b4e100953dd8167b/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f21b96dce9c4165bcfae364b4e100953dd8167b/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=1f21b96dce9c4165bcfae364b4e100953dd8167b", "patch": "@@ -80,14 +80,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // coercions from ! to `expected`.\n         if ty.is_never() {\n             if let Some(adjustments) = self.typeck_results.borrow().adjustments().get(expr.hir_id) {\n-                self.tcx().sess.delay_span_bug(\n+                let reported = self.tcx().sess.delay_span_bug(\n                     expr.span,\n                     \"expression with never type wound up being adjusted\",\n                 );\n                 return if let [Adjustment { kind: Adjust::NeverToAny, target }] = &adjustments[..] {\n                     target.to_owned()\n                 } else {\n-                    self.tcx().ty_error()\n+                    self.tcx().ty_error_with_guaranteed(reported)\n                 };\n             }\n \n@@ -396,8 +396,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         {\n                             err.subdiagnostic(ExprParenthesesNeeded::surrounding(*sp));\n                         }\n-                        err.emit();\n-                        oprnd_t = tcx.ty_error();\n+                        oprnd_t = tcx.ty_error_with_guaranteed(err.emit());\n                     }\n                 }\n                 hir::UnOp::Not => {\n@@ -1097,12 +1096,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n             // If the assignment expression itself is ill-formed, don't\n             // bother emitting another error\n-            if lhs_ty.references_error() || rhs_ty.references_error() {\n+            let reported = if lhs_ty.references_error() || rhs_ty.references_error() {\n                 err.delay_as_bug()\n             } else {\n-                err.emit();\n-            }\n-            return self.tcx.ty_error();\n+                err.emit()\n+            };\n+            return self.tcx.ty_error_with_guaranteed(reported);\n         }\n \n         let lhs_ty = self.check_expr_with_needs(&lhs, Needs::MutPlace);\n@@ -2777,8 +2776,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             );\n                         }\n                     }\n-                    err.emit();\n-                    self.tcx.ty_error()\n+                    let reported = err.emit();\n+                    self.tcx.ty_error_with_guaranteed(reported)\n                 }\n             }\n         }"}, {"sha": "6ed7a93d46332f4df7da0d4dead2bcfff85f5a9d", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f21b96dce9c4165bcfae364b4e100953dd8167b/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f21b96dce9c4165bcfae364b4e100953dd8167b/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=1f21b96dce9c4165bcfae364b4e100953dd8167b", "patch": "@@ -1212,9 +1212,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             }\n                         }\n                     }\n-                    err.emit();\n-\n-                    return (tcx.ty_error(), res);\n+                    let reported = err.emit();\n+                    return (tcx.ty_error_with_guaranteed(reported), res);\n                 }\n             }\n         } else {"}, {"sha": "38b3dd218a9719b4b28fcc41ff354c66bb50c42b", "filename": "compiler/rustc_hir_typeck/src/op.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f21b96dce9c4165bcfae364b4e100953dd8167b/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f21b96dce9c4165bcfae364b4e100953dd8167b/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs?ref=1f21b96dce9c4165bcfae364b4e100953dd8167b", "patch": "@@ -529,8 +529,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         }\n                     }\n                 }\n-                err.emit();\n-                self.tcx.ty_error()\n+                let reported = err.emit();\n+                self.tcx.ty_error_with_guaranteed(reported)\n             }\n         };\n "}, {"sha": "c248deb892b1d3a55b8d5aeb3f0a038b35767ea6", "filename": "compiler/rustc_hir_typeck/src/pat.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f21b96dce9c4165bcfae364b4e100953dd8167b/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f21b96dce9c4165bcfae364b4e100953dd8167b/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs?ref=1f21b96dce9c4165bcfae364b4e100953dd8167b", "patch": "@@ -1278,12 +1278,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let element_tys = tcx.mk_type_list(element_tys_iter);\n         let pat_ty = tcx.mk_ty(ty::Tuple(element_tys));\n         if let Some(mut err) = self.demand_eqtype_pat_diag(span, expected, pat_ty, ti) {\n-            err.emit();\n+            let reported = err.emit();\n             // Walk subpatterns with an expected type of `err` in this case to silence\n             // further errors being emitted when using the bindings. #50333\n-            let element_tys_iter = (0..max_len).map(|_| tcx.ty_error());\n+            let element_tys_iter = (0..max_len).map(|_| tcx.ty_error_with_guaranteed(reported));\n             for (_, elem) in elements.iter().enumerate_and_adjust(max_len, ddpos) {\n-                self.check_pat(elem, tcx.ty_error(), def_bm, ti);\n+                self.check_pat(elem, tcx.ty_error_with_guaranteed(reported), def_bm, ti);\n             }\n             tcx.mk_tup(element_tys_iter)\n         } else {"}, {"sha": "952ea14887f7bc7f279de7c1863e523c61c0195a", "filename": "compiler/rustc_hir_typeck/src/place_op.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1f21b96dce9c4165bcfae364b4e100953dd8167b/compiler%2Frustc_hir_typeck%2Fsrc%2Fplace_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f21b96dce9c4165bcfae364b4e100953dd8167b/compiler%2Frustc_hir_typeck%2Fsrc%2Fplace_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fplace_op.rs?ref=1f21b96dce9c4165bcfae364b4e100953dd8167b", "patch": "@@ -90,8 +90,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 Applicability::MachineApplicable,\n             );\n         }\n-        err.emit();\n-        Some((self.tcx.ty_error(), self.tcx.ty_error()))\n+        let reported = err.emit();\n+        Some((\n+            self.tcx.ty_error_with_guaranteed(reported),\n+            self.tcx.ty_error_with_guaranteed(reported),\n+        ))\n     }\n \n     /// To type-check `base_expr[index_expr]`, we progressively autoderef"}, {"sha": "4016a93caa869dea0eddf8b486a196ddeeacee65", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1f21b96dce9c4165bcfae364b4e100953dd8167b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f21b96dce9c4165bcfae364b4e100953dd8167b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=1f21b96dce9c4165bcfae364b4e100953dd8167b", "patch": "@@ -1283,6 +1283,12 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n+    /// Constructs a `TyKind::Error` type with current `ErrorGuaranteed`\n+    #[track_caller]\n+    pub fn ty_error_with_guaranteed(self, reported: ErrorGuaranteed) -> Ty<'tcx> {\n+        self.mk_ty(Error(reported))\n+    }\n+\n     /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.\n     #[track_caller]\n     pub fn ty_error(self) -> Ty<'tcx> {\n@@ -1297,6 +1303,16 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.mk_ty(Error(reported))\n     }\n \n+    /// Like [TyCtxt::ty_error] but for constants, with current `ErrorGuaranteed`\n+    #[track_caller]\n+    pub fn const_error_with_guaranteed(\n+        self,\n+        ty: Ty<'tcx>,\n+        reported: ErrorGuaranteed,\n+    ) -> Const<'tcx> {\n+        self.mk_const(ty::ConstS { kind: ty::ConstKind::Error(reported), ty })\n+    }\n+\n     /// Like [TyCtxt::ty_error] but for constants.\n     #[track_caller]\n     pub fn const_error(self, ty: Ty<'tcx>) -> Const<'tcx> {"}]}