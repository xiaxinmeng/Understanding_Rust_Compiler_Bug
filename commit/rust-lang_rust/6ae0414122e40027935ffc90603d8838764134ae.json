{"sha": "6ae0414122e40027935ffc90603d8838764134ae", "node_id": "C_kwDOAAsO6NoAKDZhZTA0MTQxMjJlNDAwMjc5MzVmZmM5MDYwM2Q4ODM4NzY0MTM0YWU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-11T20:53:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-11T20:53:06Z"}, "message": "Rollup merge of #100350 - jhpratt:stringify-vis, r=cjgillot\n\nStringify non-shorthand visibility correctly\n\nThis makes `stringify!(pub(in crate))` evaluate to `pub(in crate)` rather than `pub(crate)`, matching the behavior before the `crate` shorthand was removed. Further, this changes `stringify!(pub(in super))` to evaluate to `pub(in super)` rather than the current `pub(super)`. If the latter is not desired (it is _technically_ breaking), it can be undone.\n\nFixes #99981\n\n`@rustbot` label +C-bug +regression-from-stable-to-beta +T-compiler", "tree": {"sha": "b819120165766b19a51e530662cf0ede1fce4bd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b819120165766b19a51e530662cf0ede1fce4bd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ae0414122e40027935ffc90603d8838764134ae", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi9WwyCRBK7hj4Ov3rIwAAdAQIACKoPp0/9jKquGBXdhKn64WF\nRYb3FKCnz9h101/kKoM7vlzmJRoQBZXmS47DmVHJgic8o0ce6IhSWqfrJhnG5uGW\n3zn93ObdflZ6BOMlIyaxkFV/CbIzAmgF9FJf/tc9i0cwM2TfX4BEdR0RnVR9i802\nlR8g3jgYzJc5uDOl04nNw9nIo/s31w7P6EISaT+6V9ic1zB7KXCtUDVJ0/HbCBBY\nKmWWF43MbziYDD6NELzTygKe4wT2zyDD/iSuO68SX6orWUpbKq57WFb/rs18DS3t\nBoJhAuFOFcUgZrVDFo331jhYuFevoEBeWaPec1dCBQIUnp+wlOL85g5Zz5h0xh0=\n=8R2u\n-----END PGP SIGNATURE-----\n", "payload": "tree b819120165766b19a51e530662cf0ede1fce4bd4\nparent e221aafae6b21275c9727b45a28b02f347bb48e2\nparent be5672ecb2f9397bf9280c6a9d72fa0d6014993d\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1660251186 +0200\ncommitter GitHub <noreply@github.com> 1660251186 +0200\n\nRollup merge of #100350 - jhpratt:stringify-vis, r=cjgillot\n\nStringify non-shorthand visibility correctly\n\nThis makes `stringify!(pub(in crate))` evaluate to `pub(in crate)` rather than `pub(crate)`, matching the behavior before the `crate` shorthand was removed. Further, this changes `stringify!(pub(in super))` to evaluate to `pub(in super)` rather than the current `pub(super)`. If the latter is not desired (it is _technically_ breaking), it can be undone.\n\nFixes #99981\n\n`@rustbot` label +C-bug +regression-from-stable-to-beta +T-compiler\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ae0414122e40027935ffc90603d8838764134ae", "html_url": "https://github.com/rust-lang/rust/commit/6ae0414122e40027935ffc90603d8838764134ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ae0414122e40027935ffc90603d8838764134ae/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e221aafae6b21275c9727b45a28b02f347bb48e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e221aafae6b21275c9727b45a28b02f347bb48e2", "html_url": "https://github.com/rust-lang/rust/commit/e221aafae6b21275c9727b45a28b02f347bb48e2"}, {"sha": "be5672ecb2f9397bf9280c6a9d72fa0d6014993d", "url": "https://api.github.com/repos/rust-lang/rust/commits/be5672ecb2f9397bf9280c6a9d72fa0d6014993d", "html_url": "https://github.com/rust-lang/rust/commit/be5672ecb2f9397bf9280c6a9d72fa0d6014993d"}], "stats": {"total": 27, "additions": 18, "deletions": 9}, "files": [{"sha": "3f71fce0e3b318d92962a6f9e34797ba505b683c", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ae0414122e40027935ffc90603d8838764134ae/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae0414122e40027935ffc90603d8838764134ae/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=6ae0414122e40027935ffc90603d8838764134ae", "patch": "@@ -2601,7 +2601,7 @@ pub struct Visibility {\n #[derive(Clone, Encodable, Decodable, Debug)]\n pub enum VisibilityKind {\n     Public,\n-    Restricted { path: P<Path>, id: NodeId },\n+    Restricted { path: P<Path>, id: NodeId, shorthand: bool },\n     Inherited,\n }\n "}, {"sha": "40c05f43f686deb62c2cee456c72770d9f9c8cc2", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ae0414122e40027935ffc90603d8838764134ae/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae0414122e40027935ffc90603d8838764134ae/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=6ae0414122e40027935ffc90603d8838764134ae", "patch": "@@ -1487,7 +1487,7 @@ pub fn noop_flat_map_stmt_kind<T: MutVisitor>(\n pub fn noop_visit_vis<T: MutVisitor>(visibility: &mut Visibility, vis: &mut T) {\n     match &mut visibility.kind {\n         VisibilityKind::Public | VisibilityKind::Inherited => {}\n-        VisibilityKind::Restricted { path, id } => {\n+        VisibilityKind::Restricted { path, id, shorthand: _ } => {\n             vis.visit_path(path);\n             vis.visit_id(id);\n         }"}, {"sha": "5dc13fdd952dc68ce744dc8bb5f29a062868e4b3", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ae0414122e40027935ffc90603d8838764134ae/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae0414122e40027935ffc90603d8838764134ae/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=6ae0414122e40027935ffc90603d8838764134ae", "patch": "@@ -936,7 +936,7 @@ pub fn walk_arm<'a, V: Visitor<'a>>(visitor: &mut V, arm: &'a Arm) {\n }\n \n pub fn walk_vis<'a, V: Visitor<'a>>(visitor: &mut V, vis: &'a Visibility) {\n-    if let VisibilityKind::Restricted { ref path, id } = vis.kind {\n+    if let VisibilityKind::Restricted { ref path, id, shorthand: _ } = vis.kind {\n         visitor.visit_path(path, id);\n     }\n }"}, {"sha": "bd87987010e8fd2a15ae17ef490ef2547a3c6077", "filename": "compiler/rustc_ast_pretty/src/pprust/state/item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ae0414122e40027935ffc90603d8838764134ae/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae0414122e40027935ffc90603d8838764134ae/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs?ref=6ae0414122e40027935ffc90603d8838764134ae", "patch": "@@ -412,9 +412,9 @@ impl<'a> State<'a> {\n     pub(crate) fn print_visibility(&mut self, vis: &ast::Visibility) {\n         match vis.kind {\n             ast::VisibilityKind::Public => self.word_nbsp(\"pub\"),\n-            ast::VisibilityKind::Restricted { ref path, .. } => {\n+            ast::VisibilityKind::Restricted { ref path, id: _, shorthand } => {\n                 let path = Self::to_string(|s| s.print_path(path, false, 0));\n-                if path == \"crate\" || path == \"self\" || path == \"super\" {\n+                if shorthand && (path == \"crate\" || path == \"self\" || path == \"super\") {\n                     self.word_nbsp(format!(\"pub({})\", path))\n                 } else {\n                     self.word_nbsp(format!(\"pub(in {})\", path))"}, {"sha": "c088b6e1e0e2e36d688e34fde184e16a33963603", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6ae0414122e40027935ffc90603d8838764134ae/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae0414122e40027935ffc90603d8838764134ae/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=6ae0414122e40027935ffc90603d8838764134ae", "patch": "@@ -1295,7 +1295,11 @@ impl<'a> Parser<'a> {\n                 self.bump(); // `in`\n                 let path = self.parse_path(PathStyle::Mod)?; // `path`\n                 self.expect(&token::CloseDelim(Delimiter::Parenthesis))?; // `)`\n-                let vis = VisibilityKind::Restricted { path: P(path), id: ast::DUMMY_NODE_ID };\n+                let vis = VisibilityKind::Restricted {\n+                    path: P(path),\n+                    id: ast::DUMMY_NODE_ID,\n+                    shorthand: false,\n+                };\n                 return Ok(Visibility {\n                     span: lo.to(self.prev_token.span),\n                     kind: vis,\n@@ -1308,7 +1312,11 @@ impl<'a> Parser<'a> {\n                 self.bump(); // `(`\n                 let path = self.parse_path(PathStyle::Mod)?; // `crate`/`super`/`self`\n                 self.expect(&token::CloseDelim(Delimiter::Parenthesis))?; // `)`\n-                let vis = VisibilityKind::Restricted { path: P(path), id: ast::DUMMY_NODE_ID };\n+                let vis = VisibilityKind::Restricted {\n+                    path: P(path),\n+                    id: ast::DUMMY_NODE_ID,\n+                    shorthand: true,\n+                };\n                 return Ok(Visibility {\n                     span: lo.to(self.prev_token.span),\n                     kind: vis,"}, {"sha": "8e71ed7c1120f0342ea6176da719cf0495f58c36", "filename": "src/test/ui/macros/stringify.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6ae0414122e40027935ffc90603d8838764134ae/src%2Ftest%2Fui%2Fmacros%2Fstringify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae0414122e40027935ffc90603d8838764134ae/src%2Ftest%2Fui%2Fmacros%2Fstringify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fstringify.rs?ref=6ae0414122e40027935ffc90603d8838764134ae", "patch": "@@ -865,8 +865,9 @@ fn test_vis() {\n     assert_eq!(stringify_vis!(pub(crate)), \"pub(crate) \");\n     assert_eq!(stringify_vis!(pub(self)), \"pub(self) \");\n     assert_eq!(stringify_vis!(pub(super)), \"pub(super) \");\n-    assert_eq!(stringify_vis!(pub(in self)), \"pub(self) \");\n-    assert_eq!(stringify_vis!(pub(in super)), \"pub(super) \");\n+    assert_eq!(stringify_vis!(pub(in crate)), \"pub(in crate) \");\n+    assert_eq!(stringify_vis!(pub(in self)), \"pub(in self) \");\n+    assert_eq!(stringify_vis!(pub(in super)), \"pub(in super) \");\n     assert_eq!(stringify_vis!(pub(in path::to)), \"pub(in path::to) \");\n     assert_eq!(stringify_vis!(pub(in ::path::to)), \"pub(in ::path::to) \");\n     assert_eq!(stringify_vis!(pub(in self::path::to)), \"pub(in self::path::to) \");"}]}