{"sha": "2b17aa67fc91b233bcca7ee91d55ee37706b01c7", "node_id": "C_kwDOAAsO6NoAKDJiMTdhYTY3ZmM5MWIyMzNiY2NhN2VlOTFkNTVlZTM3NzA2YjAxYzc", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-07-14T13:54:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-14T13:54:02Z"}, "message": "Rollup merge of #98072 - yaahc:generic-member-access, r=thomcc\n\nAdd provider API to error trait\n\nImplements https://github.com/rust-lang/rfcs/pull/2895", "tree": {"sha": "21cec7a609c8942ffc0770c68c500f21999a896b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21cec7a609c8942ffc0770c68c500f21999a896b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b17aa67fc91b233bcca7ee91d55ee37706b01c7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi0B/6CRBK7hj4Ov3rIwAAj08IABV7iJrqJWGvaXXjjslnmAgd\nK1V+KKOztla86prMhVS5EcuTnUwaVJUvAFOVgAD+D4mE0mxQJZIlzRzjMU8+oMjK\nhNfHrO+AfU2WNRBZaK873nb9M14/EBj2/vECkyMNEYszpSicEnvE4fcqsVZYgB4q\nRCAO3xECQx+xtEr5VTiq1HQvHO0JSEloAszr6fqsoA5HwHsEnrA0iBQVHqYRFpx4\nn6QFnjeVP27JCZLQd0uNmJ/9usTAfzmp4dgoHYlWsa1PgknCd3Fu80CTNZUpzm/C\nufR7zFjNaktVWpV7XB60weKt43EPCsYF7DD6qYOoclzwG2pOUBH/k0cum3iYbK4=\n=PNZo\n-----END PGP SIGNATURE-----\n", "payload": "tree 21cec7a609c8942ffc0770c68c500f21999a896b\nparent f1a8854f9be2e5cad764d630a53d26c7b72f8162\nparent 655d6e82e3f89e1c26c4519134013f335d8880eb\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1657806842 +0530\ncommitter GitHub <noreply@github.com> 1657806842 +0530\n\nRollup merge of #98072 - yaahc:generic-member-access, r=thomcc\n\nAdd provider API to error trait\n\nImplements https://github.com/rust-lang/rfcs/pull/2895\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b17aa67fc91b233bcca7ee91d55ee37706b01c7", "html_url": "https://github.com/rust-lang/rust/commit/2b17aa67fc91b233bcca7ee91d55ee37706b01c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b17aa67fc91b233bcca7ee91d55ee37706b01c7/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1a8854f9be2e5cad764d630a53d26c7b72f8162", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1a8854f9be2e5cad764d630a53d26c7b72f8162", "html_url": "https://github.com/rust-lang/rust/commit/f1a8854f9be2e5cad764d630a53d26c7b72f8162"}, {"sha": "655d6e82e3f89e1c26c4519134013f335d8880eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/655d6e82e3f89e1c26c4519134013f335d8880eb", "html_url": "https://github.com/rust-lang/rust/commit/655d6e82e3f89e1c26c4519134013f335d8880eb"}], "stats": {"total": 118, "additions": 117, "deletions": 1}, "files": [{"sha": "57f16f9517f201adaee0ac72c80cd0a17c1e2da8", "filename": "library/std/src/error.rs", "status": "modified", "additions": 116, "deletions": 1, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/2b17aa67fc91b233bcca7ee91d55ee37706b01c7/library%2Fstd%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b17aa67fc91b233bcca7ee91d55ee37706b01c7/library%2Fstd%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ferror.rs?ref=2b17aa67fc91b233bcca7ee91d55ee37706b01c7", "patch": "@@ -156,7 +156,7 @@ use core::array;\n use core::convert::Infallible;\n \n use crate::alloc::{AllocError, LayoutError};\n-use crate::any::TypeId;\n+use crate::any::{Demand, Provider, TypeId};\n use crate::backtrace::Backtrace;\n use crate::borrow::Cow;\n use crate::cell;\n@@ -295,6 +295,85 @@ pub trait Error: Debug + Display {\n     fn cause(&self) -> Option<&dyn Error> {\n         self.source()\n     }\n+\n+    /// Provides type based access to context intended for error reports.\n+    ///\n+    /// Used in conjunction with [`Demand::provide_value`] and [`Demand::provide_ref`] to extract\n+    /// references to member variables from `dyn Error` trait objects.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// #![feature(provide_any)]\n+    /// #![feature(error_generic_member_access)]\n+    /// use core::fmt;\n+    /// use core::any::Demand;\n+    ///\n+    /// #[derive(Debug)]\n+    /// struct MyBacktrace {\n+    ///     // ...\n+    /// }\n+    ///\n+    /// impl MyBacktrace {\n+    ///     fn new() -> MyBacktrace {\n+    ///         // ...\n+    ///         # MyBacktrace {}\n+    ///     }\n+    /// }\n+    ///\n+    /// #[derive(Debug)]\n+    /// struct SourceError {\n+    ///     // ...\n+    /// }\n+    ///\n+    /// impl fmt::Display for SourceError {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    ///         write!(f, \"Example Source Error\")\n+    ///     }\n+    /// }\n+    ///\n+    /// impl std::error::Error for SourceError {}\n+    ///\n+    /// #[derive(Debug)]\n+    /// struct Error {\n+    ///     source: SourceError,\n+    ///     backtrace: MyBacktrace,\n+    /// }\n+    ///\n+    /// impl fmt::Display for Error {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    ///         write!(f, \"Example Error\")\n+    ///     }\n+    /// }\n+    ///\n+    /// impl std::error::Error for Error {\n+    ///     fn provide<'a>(&'a self, req: &mut Demand<'a>) {\n+    ///         req\n+    ///             .provide_ref::<MyBacktrace>(&self.backtrace)\n+    ///             .provide_ref::<dyn std::error::Error + 'static>(&self.source);\n+    ///     }\n+    /// }\n+    ///\n+    /// fn main() {\n+    ///     let backtrace = MyBacktrace::new();\n+    ///     let source = SourceError {};\n+    ///     let error = Error { source, backtrace };\n+    ///     let dyn_error = &error as &dyn std::error::Error;\n+    ///     let backtrace_ref = dyn_error.request_ref::<MyBacktrace>().unwrap();\n+    ///\n+    ///     assert!(core::ptr::eq(&error.backtrace, backtrace_ref));\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"error_generic_member_access\", issue = \"none\")]\n+    #[allow(unused_variables)]\n+    fn provide<'a>(&'a self, req: &mut Demand<'a>) {}\n+}\n+\n+#[unstable(feature = \"error_generic_member_access\", issue = \"none\")]\n+impl Provider for dyn Error + 'static {\n+    fn provide<'a>(&'a self, req: &mut Demand<'a>) {\n+        self.provide(req)\n+    }\n }\n \n mod private {\n@@ -831,6 +910,18 @@ impl dyn Error + 'static {\n             None\n         }\n     }\n+\n+    /// Request a reference of type `T` as context about this error.\n+    #[unstable(feature = \"error_generic_member_access\", issue = \"none\")]\n+    pub fn request_ref<T: ?Sized + 'static>(&self) -> Option<&T> {\n+        core::any::request_ref(self)\n+    }\n+\n+    /// Request a value of type `T` as context about this error.\n+    #[unstable(feature = \"error_generic_member_access\", issue = \"none\")]\n+    pub fn request_value<T: 'static>(&self) -> Option<T> {\n+        core::any::request_value(self)\n+    }\n }\n \n impl dyn Error + 'static + Send {\n@@ -854,6 +945,18 @@ impl dyn Error + 'static + Send {\n     pub fn downcast_mut<T: Error + 'static>(&mut self) -> Option<&mut T> {\n         <dyn Error + 'static>::downcast_mut::<T>(self)\n     }\n+\n+    /// Request a reference of type `T` as context about this error.\n+    #[unstable(feature = \"error_generic_member_access\", issue = \"none\")]\n+    pub fn request_ref<T: ?Sized + 'static>(&self) -> Option<&T> {\n+        <dyn Error + 'static>::request_ref(self)\n+    }\n+\n+    /// Request a value of type `T` as context about this error.\n+    #[unstable(feature = \"error_generic_member_access\", issue = \"none\")]\n+    pub fn request_value<T: 'static>(&self) -> Option<T> {\n+        <dyn Error + 'static>::request_value(self)\n+    }\n }\n \n impl dyn Error + 'static + Send + Sync {\n@@ -877,6 +980,18 @@ impl dyn Error + 'static + Send + Sync {\n     pub fn downcast_mut<T: Error + 'static>(&mut self) -> Option<&mut T> {\n         <dyn Error + 'static>::downcast_mut::<T>(self)\n     }\n+\n+    /// Request a reference of type `T` as context about this error.\n+    #[unstable(feature = \"error_generic_member_access\", issue = \"none\")]\n+    pub fn request_ref<T: ?Sized + 'static>(&self) -> Option<&T> {\n+        <dyn Error + 'static>::request_ref(self)\n+    }\n+\n+    /// Request a value of type `T` as context about this error.\n+    #[unstable(feature = \"error_generic_member_access\", issue = \"none\")]\n+    pub fn request_value<T: 'static>(&self) -> Option<T> {\n+        <dyn Error + 'static>::request_value(self)\n+    }\n }\n \n impl dyn Error {"}, {"sha": "40c4f6dec0ed332388fd273ec9b311e0c16ed365", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2b17aa67fc91b233bcca7ee91d55ee37706b01c7/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b17aa67fc91b233bcca7ee91d55ee37706b01c7/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=2b17aa67fc91b233bcca7ee91d55ee37706b01c7", "patch": "@@ -286,6 +286,7 @@\n #![feature(panic_internals)]\n #![feature(portable_simd)]\n #![feature(prelude_2024)]\n+#![feature(provide_any)]\n #![feature(ptr_as_uninit)]\n #![feature(raw_os_nonzero)]\n #![feature(slice_internals)]"}]}