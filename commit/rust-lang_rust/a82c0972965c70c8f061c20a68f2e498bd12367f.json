{"sha": "a82c0972965c70c8f061c20a68f2e498bd12367f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4MmMwOTcyOTY1YzcwYzhmMDYxYzIwYTY4ZjJlNDk4YmQxMjM2N2Y=", "commit": {"author": {"name": "bobtwinkles", "email": "srkoser+github@gmail.com", "date": "2018-05-16T14:08:45Z"}, "committer": {"name": "bobtwinkles", "email": "srkoser+github@gmail.com", "date": "2018-05-16T14:08:45Z"}, "message": "Fix tidy errors", "tree": {"sha": "c2c62c83bfc7ffe80bc8142d54156568a5e9341c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2c62c83bfc7ffe80bc8142d54156568a5e9341c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a82c0972965c70c8f061c20a68f2e498bd12367f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a82c0972965c70c8f061c20a68f2e498bd12367f", "html_url": "https://github.com/rust-lang/rust/commit/a82c0972965c70c8f061c20a68f2e498bd12367f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a82c0972965c70c8f061c20a68f2e498bd12367f/comments", "author": {"login": "bobtwinkles", "id": 1514748, "node_id": "MDQ6VXNlcjE1MTQ3NDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1514748?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobtwinkles", "html_url": "https://github.com/bobtwinkles", "followers_url": "https://api.github.com/users/bobtwinkles/followers", "following_url": "https://api.github.com/users/bobtwinkles/following{/other_user}", "gists_url": "https://api.github.com/users/bobtwinkles/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobtwinkles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobtwinkles/subscriptions", "organizations_url": "https://api.github.com/users/bobtwinkles/orgs", "repos_url": "https://api.github.com/users/bobtwinkles/repos", "events_url": "https://api.github.com/users/bobtwinkles/events{/privacy}", "received_events_url": "https://api.github.com/users/bobtwinkles/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bobtwinkles", "id": 1514748, "node_id": "MDQ6VXNlcjE1MTQ3NDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1514748?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobtwinkles", "html_url": "https://github.com/bobtwinkles", "followers_url": "https://api.github.com/users/bobtwinkles/followers", "following_url": "https://api.github.com/users/bobtwinkles/following{/other_user}", "gists_url": "https://api.github.com/users/bobtwinkles/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobtwinkles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobtwinkles/subscriptions", "organizations_url": "https://api.github.com/users/bobtwinkles/orgs", "repos_url": "https://api.github.com/users/bobtwinkles/repos", "events_url": "https://api.github.com/users/bobtwinkles/events{/privacy}", "received_events_url": "https://api.github.com/users/bobtwinkles/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c902cfeca67c948e86e5b13d264e9bf1d7deff3", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c902cfeca67c948e86e5b13d264e9bf1d7deff3", "html_url": "https://github.com/rust-lang/rust/commit/0c902cfeca67c948e86e5b13d264e9bf1d7deff3"}], "stats": {"total": 15, "additions": 10, "deletions": 5}, "files": [{"sha": "35adbc99e29b94b7b613c0d57ef8ed001f60600d", "filename": "src/librustc_mir/borrow_check/nll/invalidation.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a82c0972965c70c8f061c20a68f2e498bd12367f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a82c0972965c70c8f061c20a68f2e498bd12367f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs?ref=a82c0972965c70c8f061c20a68f2e498bd12367f", "patch": "@@ -75,7 +75,10 @@ struct InvalidationGenerator<'cg, 'cx: 'cg, 'tcx: 'cx, 'gcx: 'tcx> {\n /// Visits the whole MIR and generates invalidates() facts\n /// Most of the code implementing this was stolen from borrow_check/mod.rs\n impl<'cg, 'cx, 'tcx, 'gcx> Visitor<'tcx> for InvalidationGenerator<'cg, 'cx, 'tcx, 'gcx> {\n-    fn visit_statement(&mut self, block: BasicBlock, statement: &Statement<'tcx>, location: Location) {\n+    fn visit_statement(&mut self,\n+                       block: BasicBlock,\n+                       statement: &Statement<'tcx>,\n+                       location: Location) {\n         match statement.kind {\n             StatementKind::Assign(ref lhs, ref rhs) => {\n                 self.consume_rvalue(\n@@ -236,7 +239,7 @@ impl<'cg, 'cx, 'tcx, 'gcx> Visitor<'tcx> for InvalidationGenerator<'cg, 'cx, 'tc\n             } => {\n                 self.consume_operand(ContextKind::Yield.new(location), value);\n \n-                // ** TODO(bob_twinkles) figure out what the equivalent of this is\n+                // ** FIXME(bob_twinkles) figure out what the equivalent of this is\n                 // if self.movable_generator {\n                 //     // Look for any active borrows to locals\n                 //     let borrow_set = self.borrow_set.clone();\n@@ -249,8 +252,9 @@ impl<'cg, 'cx, 'tcx, 'gcx> Visitor<'tcx> for InvalidationGenerator<'cg, 'cx, 'tc\n                 // }\n             }\n             TerminatorKind::Resume | TerminatorKind::Return | TerminatorKind::GeneratorDrop => {\n-                // ** TODO(bob_twinkles) figure out what the equivalent of this is\n-                // // Returning from the function implicitly kills storage for all locals and statics.\n+                // ** FIXME(bob_twinkles) figure out what the equivalent of this is\n+                // // Returning from the function implicitly kills storage for all locals and\n+                // // statics.\n                 // // Often, the storage will already have been killed by an explicit\n                 // // StorageDead, but we don't always emit those (notably on unwind paths),\n                 // // so this \"extra check\" serves as a kind of backup.\n@@ -826,7 +830,8 @@ impl<'cg, 'cx, 'tcx, 'gcx> InvalidationGenerator<'cg, 'cx, 'tcx, 'gcx> {\n                 if static1.def_id != static2.def_id {\n                     debug!(\"place_element_conflict: DISJOINT-STATIC\");\n                     Overlap::Disjoint\n-                } else if self.infcx.tcx.is_static(static1.def_id) == Some(hir::Mutability::MutMutable) {\n+                } else if self.infcx.tcx.is_static(static1.def_id) ==\n+                          Some(hir::Mutability::MutMutable) {\n                     // We ignore mutable statics - they can only be unsafe code.\n                     debug!(\"place_element_conflict: IGNORE-STATIC-MUT\");\n                     Overlap::Disjoint"}]}