{"sha": "e4244e37103d83b2cd54637ca2ac4f1c76c35a43", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0MjQ0ZTM3MTAzZDgzYjJjZDU0NjM3Y2EyYWM0ZjFjNzZjMzVhNDM=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-04-01T02:33:07Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-04-02T20:34:53Z"}, "message": "Don't load all extern crates unconditionally\n\nInstead, only load the crates that are linked to with intra-doc links.\n\nThis doesn't help very much with any of rustdoc's fundamental issues\nwith freezing the resolver, but it at least fixes a stable-to-stable\nregression, and makes the crate loading model somewhat more consistent\nwith rustc's.", "tree": {"sha": "7d8752990958f1b9a2c34e041383ba180bc6f097", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d8752990958f1b9a2c34e041383ba180bc6f097"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4244e37103d83b2cd54637ca2ac4f1c76c35a43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4244e37103d83b2cd54637ca2ac4f1c76c35a43", "html_url": "https://github.com/rust-lang/rust/commit/e4244e37103d83b2cd54637ca2ac4f1c76c35a43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4244e37103d83b2cd54637ca2ac4f1c76c35a43/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5029ac0ab372aec515db2e718da6d7787f3d122", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5029ac0ab372aec515db2e718da6d7787f3d122", "html_url": "https://github.com/rust-lang/rust/commit/a5029ac0ab372aec515db2e718da6d7787f3d122"}], "stats": {"total": 138, "additions": 90, "deletions": 48}, "files": [{"sha": "3d2165343572e86126277744fe26788a0212412a", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 55, "deletions": 31, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/e4244e37103d83b2cd54637ca2ac4f1c76c35a43/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4244e37103d83b2cd54637ca2ac4f1c76c35a43/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=e4244e37103d83b2cd54637ca2ac4f1c76c35a43", "patch": "@@ -1,3 +1,4 @@\n+use rustc_ast as ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::{self, Lrc};\n use rustc_driver::abort_on_err;\n@@ -22,7 +23,7 @@ use rustc_session::DiagnosticOutput;\n use rustc_session::Session;\n use rustc_span::source_map;\n use rustc_span::symbol::sym;\n-use rustc_span::{Span, DUMMY_SP};\n+use rustc_span::Span;\n \n use std::cell::RefCell;\n use std::collections::hash_map::Entry;\n@@ -348,42 +349,65 @@ crate fn create_config(\n }\n \n crate fn create_resolver<'a>(\n-    externs: config::Externs,\n     queries: &Queries<'a>,\n     sess: &Session,\n ) -> Rc<RefCell<interface::BoxedResolver>> {\n-    let extern_names: Vec<String> = externs\n-        .iter()\n-        .filter(|(_, entry)| entry.add_prelude)\n-        .map(|(name, _)| name)\n-        .cloned()\n-        .collect();\n-\n     let parts = abort_on_err(queries.expansion(), sess).peek();\n-    let resolver = parts.1.borrow();\n-\n-    // Before we actually clone it, let's force all the extern'd crates to\n-    // actually be loaded, just in case they're only referred to inside\n-    // intra-doc links\n-    resolver.borrow_mut().access(|resolver| {\n-        sess.time(\"load_extern_crates\", || {\n-            for extern_name in &extern_names {\n-                debug!(\"loading extern crate {}\", extern_name);\n-                if let Err(()) = resolver\n-                    .resolve_str_path_error(\n-                        DUMMY_SP,\n-                        extern_name,\n-                        TypeNS,\n-                        LocalDefId { local_def_index: CRATE_DEF_INDEX }.to_def_id(),\n-                  ) {\n-                    warn!(\"unable to resolve external crate {} (do you have an unused `--extern` crate?)\", extern_name)\n-                  }\n+    let (krate, resolver, _) = &*parts;\n+    let resolver = resolver.borrow().clone();\n+\n+    // Letting the resolver escape at the end of the function leads to inconsistencies between the\n+    // crates the TyCtxt sees and the resolver sees (because the resolver could load more crates\n+    // after escaping). Hopefully `IntraLinkCrateLoader` gets all the crates we need ...\n+    struct IntraLinkCrateLoader {\n+        current_mod: DefId,\n+        resolver: Rc<RefCell<interface::BoxedResolver>>,\n+    }\n+    impl ast::visit::Visitor<'_> for IntraLinkCrateLoader {\n+        fn visit_attribute(&mut self, attr: &ast::Attribute) {\n+            use crate::html::markdown::{markdown_links, MarkdownLink};\n+            use crate::passes::collect_intra_doc_links::Disambiguator;\n+\n+            if let Some(doc) = attr.doc_str() {\n+                for MarkdownLink { link, .. } in markdown_links(&doc.as_str()) {\n+                    // FIXME: this misses a *lot* of the preprocessing done in collect_intra_doc_links\n+                    // I think most of it shouldn't be necessary since we only need the crate prefix?\n+                    let path_str = match Disambiguator::from_str(&link) {\n+                        Ok(x) => x.map_or(link.as_str(), |(_, p)| p),\n+                        Err(_) => continue,\n+                    };\n+                    self.resolver.borrow_mut().access(|resolver| {\n+                        let _ = resolver.resolve_str_path_error(\n+                            attr.span,\n+                            path_str,\n+                            TypeNS,\n+                            self.current_mod,\n+                        );\n+                    });\n+                }\n             }\n-        });\n-    });\n+            ast::visit::walk_attribute(self, attr);\n+        }\n+\n+        fn visit_item(&mut self, item: &ast::Item) {\n+            use rustc_ast_lowering::ResolverAstLowering;\n+\n+            if let ast::ItemKind::Mod(..) = item.kind {\n+                let new_mod =\n+                    self.resolver.borrow_mut().access(|resolver| resolver.local_def_id(item.id));\n+                let old_mod = mem::replace(&mut self.current_mod, new_mod.to_def_id());\n+                ast::visit::walk_item(self, item);\n+                self.current_mod = old_mod;\n+            } else {\n+                ast::visit::walk_item(self, item);\n+            }\n+        }\n+    }\n+    let crate_id = LocalDefId { local_def_index: CRATE_DEF_INDEX }.to_def_id();\n+    let mut loader = IntraLinkCrateLoader { current_mod: crate_id, resolver };\n+    ast::visit::walk_crate(&mut loader, krate);\n \n-    // Now we're good to clone the resolver because everything should be loaded\n-    resolver.clone()\n+    loader.resolver\n }\n \n crate fn run_global_ctxt("}, {"sha": "a3b83b9701f56ba3d2973e3a022095cf1c90513b", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4244e37103d83b2cd54637ca2ac4f1c76c35a43/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4244e37103d83b2cd54637ca2ac4f1c76c35a43/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=e4244e37103d83b2cd54637ca2ac4f1c76c35a43", "patch": "@@ -31,6 +31,7 @@ extern crate tracing;\n //\n // Dependencies listed in Cargo.toml do not need `extern crate`.\n extern crate rustc_ast;\n+extern crate rustc_ast_lowering;\n extern crate rustc_ast_pretty;\n extern crate rustc_attr;\n extern crate rustc_data_structures;\n@@ -637,7 +638,6 @@ fn main_options(options: config::Options) -> MainResult {\n     let default_passes = options.default_passes;\n     let output_format = options.output_format;\n     // FIXME: fix this clone (especially render_options)\n-    let externs = options.externs.clone();\n     let manual_passes = options.manual_passes.clone();\n     let render_options = options.render_options.clone();\n     let config = core::create_config(options);\n@@ -649,7 +649,7 @@ fn main_options(options: config::Options) -> MainResult {\n             // We need to hold on to the complete resolver, so we cause everything to be\n             // cloned for the analysis passes to use. Suboptimal, but necessary in the\n             // current architecture.\n-            let resolver = core::create_resolver(externs, queries, &sess);\n+            let resolver = core::create_resolver(queries, &sess);\n \n             if sess.has_errors() {\n                 sess.fatal(\"Compilation failed, aborting rustdoc\");"}, {"sha": "437f42b26dd119cf133de9b9d2b0dbcf8f5cd3c0", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4244e37103d83b2cd54637ca2ac4f1c76c35a43/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4244e37103d83b2cd54637ca2ac4f1c76c35a43/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=e4244e37103d83b2cd54637ca2ac4f1c76c35a43", "patch": "@@ -1517,7 +1517,7 @@ fn range_between_backticks(ori_link: &MarkdownLink) -> Range<usize> {\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n /// Disambiguators for a link.\n-enum Disambiguator {\n+crate enum Disambiguator {\n     /// `prim@`\n     ///\n     /// This is buggy, see <https://github.com/rust-lang/rust/pull/77875#discussion_r503583103>\n@@ -1546,7 +1546,7 @@ impl Disambiguator {\n     /// This returns `Ok(Some(...))` if a disambiguator was found,\n     /// `Ok(None)` if no disambiguator was found, or `Err(...)`\n     /// if there was a problem with the disambiguator.\n-    fn from_str(link: &str) -> Result<Option<(Self, &str)>, (String, Range<usize>)> {\n+    crate fn from_str(link: &str) -> Result<Option<(Self, &str)>, (String, Range<usize>)> {\n         use Disambiguator::{Kind, Namespace as NS, Primitive};\n \n         if let Some(idx) = link.find('@') {"}, {"sha": "755217a4629f4ef8f0ab62046b23a13f08ebee35", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4244e37103d83b2cd54637ca2ac4f1c76c35a43/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4244e37103d83b2cd54637ca2ac4f1c76c35a43/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=e4244e37103d83b2cd54637ca2ac4f1c76c35a43", "patch": "@@ -30,7 +30,7 @@ crate use self::unindent_comments::UNINDENT_COMMENTS;\n mod propagate_doc_cfg;\n crate use self::propagate_doc_cfg::PROPAGATE_DOC_CFG;\n \n-mod collect_intra_doc_links;\n+crate mod collect_intra_doc_links;\n crate use self::collect_intra_doc_links::COLLECT_INTRA_DOC_LINKS;\n \n mod doc_test_lints;"}, {"sha": "17b26850d4d2518d8b718f92354e570667e1dd9e", "filename": "src/test/rustdoc-ui/auxiliary/panic-item.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e4244e37103d83b2cd54637ca2ac4f1c76c35a43/src%2Ftest%2Frustdoc-ui%2Fauxiliary%2Fpanic-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4244e37103d83b2cd54637ca2ac4f1c76c35a43/src%2Ftest%2Frustdoc-ui%2Fauxiliary%2Fpanic-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fauxiliary%2Fpanic-item.rs?ref=e4244e37103d83b2cd54637ca2ac4f1c76c35a43", "patch": "@@ -0,0 +1,17 @@\n+// no-prefer-dynamic\n+#![crate_type = \"lib\"]\n+#![no_std]\n+#![feature(lang_items)]\n+\n+use core::panic::PanicInfo;\n+use core::sync::atomic::{self, Ordering};\n+\n+#[panic_handler]\n+fn panic(_info: &PanicInfo) -> ! {\n+    loop {\n+        atomic::compiler_fence(Ordering::SeqCst);\n+    }\n+}\n+\n+#[lang = \"eh_personality\"]\n+fn foo() {}"}, {"sha": "f703a183790745c007db89829e286e4430ac57c1", "filename": "src/test/rustdoc-ui/unused-extern-crate.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e4244e37103d83b2cd54637ca2ac4f1c76c35a43/src%2Ftest%2Frustdoc-ui%2Funused-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4244e37103d83b2cd54637ca2ac4f1c76c35a43/src%2Ftest%2Frustdoc-ui%2Funused-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Funused-extern-crate.rs?ref=e4244e37103d83b2cd54637ca2ac4f1c76c35a43", "patch": "@@ -0,0 +1,3 @@\n+// check-pass\n+// aux-crate:panic_item=panic-item.rs\n+// @has unused_extern_crate/index.html"}, {"sha": "2f3d069bd51c36665d483943ee79d60dded77367", "filename": "src/test/rustdoc/intra-doc/auxiliary/issue-66159-1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e4244e37103d83b2cd54637ca2ac4f1c76c35a43/src%2Ftest%2Frustdoc%2Fintra-doc%2Fauxiliary%2Fissue-66159-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4244e37103d83b2cd54637ca2ac4f1c76c35a43/src%2Ftest%2Frustdoc%2Fintra-doc%2Fauxiliary%2Fissue-66159-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fauxiliary%2Fissue-66159-1.rs?ref=e4244e37103d83b2cd54637ca2ac4f1c76c35a43", "previous_filename": "src/test/rustdoc/auxiliary/issue-66159-1.rs"}, {"sha": "0964c79de068f4ff26edaef5ef241ca249be5725", "filename": "src/test/rustdoc/intra-doc/extern-crate-only-used-in-link.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e4244e37103d83b2cd54637ca2ac4f1c76c35a43/src%2Ftest%2Frustdoc%2Fintra-doc%2Fextern-crate-only-used-in-link.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4244e37103d83b2cd54637ca2ac4f1c76c35a43/src%2Ftest%2Frustdoc%2Fintra-doc%2Fextern-crate-only-used-in-link.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fextern-crate-only-used-in-link.rs?ref=e4244e37103d83b2cd54637ca2ac4f1c76c35a43", "patch": "@@ -0,0 +1,8 @@\n+// aux-build:issue-66159-1.rs\n+// aux-crate:priv:issue_66159_1=issue-66159-1.rs\n+// build-aux-docs\n+// compile-flags:-Z unstable-options\n+\n+// @has extern_crate_only_used_in_link/index.html\n+// @has - '//a[@href=\"../issue_66159_1/struct.Something.html\"]' 'issue_66159_1::Something'\n+//! [issue_66159_1::Something]"}, {"sha": "003d079a470c0cc2756f75d6fde1c83991bf30da", "filename": "src/test/rustdoc/issue-66159.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a5029ac0ab372aec515db2e718da6d7787f3d122/src%2Ftest%2Frustdoc%2Fissue-66159.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5029ac0ab372aec515db2e718da6d7787f3d122/src%2Ftest%2Frustdoc%2Fissue-66159.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-66159.rs?ref=a5029ac0ab372aec515db2e718da6d7787f3d122", "patch": "@@ -1,10 +0,0 @@\n-// aux-crate:priv:issue_66159_1=issue-66159-1.rs\n-// compile-flags:-Z unstable-options\n-\n-// The issue was an ICE which meant that we never actually generated the docs\n-// so if we have generated the docs, we're okay.\n-// Since we don't generate the docs for the auxiliary files, we can't actually\n-// verify that the struct is linked correctly.\n-\n-// @has issue_66159/index.html\n-//! [issue_66159_1::Something]"}, {"sha": "531a23d76a27b5615f64657b0d1d6fc5e3d35866", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4244e37103d83b2cd54637ca2ac4f1c76c35a43/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4244e37103d83b2cd54637ca2ac4f1c76c35a43/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=e4244e37103d83b2cd54637ca2ac4f1c76c35a43", "patch": "@@ -708,8 +708,8 @@ impl Config {\n         self.parse_name_value_directive(line, \"aux-crate\").map(|r| {\n             let mut parts = r.trim().splitn(2, '=');\n             (\n-                parts.next().expect(\"aux-crate name\").to_string(),\n-                parts.next().expect(\"aux-crate value\").to_string(),\n+                parts.next().expect(\"missing aux-crate name (e.g. log=log.rs)\").to_string(),\n+                parts.next().expect(\"missing aux-crate value (e.g. log=log.rs)\").to_string(),\n             )\n         })\n     }"}]}