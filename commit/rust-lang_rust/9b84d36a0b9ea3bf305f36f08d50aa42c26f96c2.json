{"sha": "9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliODRkMzZhMGI5ZWEzYmYzMDVmMzZmMDhkNTBhYTQyYzI2Zjk2YzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-17T03:07:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-17T03:07:09Z"}, "message": "Auto merge of #80105 - JohnTitor:rollup-8c030u5, r=JohnTitor\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #79051 (Implement if-let match guards)\n - #79877 (Allow `since=\"TBD\"` for rustc_deprecated)\n - #79882 (Fix issue #78496)\n - #80026 (expand-yaml-anchors: Make the output directory separator-insensitive)\n - #80039 (Remove unused `TyEncoder::tcx` required method)\n - #80069 (Test that `core::assert!` is valid)\n - #80072 (Fixed conflict with drop elaboration and coverage)\n - #80073 (Add support for target aliases)\n - #80082 (Revert #78790 - rust-src vendoring)\n - #80097 (Add `popcount` and `popcnt` as doc aliases for `count_ones` methods.)\n - #80103 (Remove docs for non-existent parameters in `rustc_expand`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "4f575236b223ed95924eba195fe6f6f6536630b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f575236b223ed95924eba195fe6f6f6536630b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "html_url": "https://github.com/rust-lang/rust/commit/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6491be5be9344a325b7e49b0114f3cf67ef199e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6491be5be9344a325b7e49b0114f3cf67ef199e", "html_url": "https://github.com/rust-lang/rust/commit/a6491be5be9344a325b7e49b0114f3cf67ef199e"}, {"sha": "e2582e4b778e542836232f70c9bb5dfe77a3f186", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2582e4b778e542836232f70c9bb5dfe77a3f186", "html_url": "https://github.com/rust-lang/rust/commit/e2582e4b778e542836232f70c9bb5dfe77a3f186"}], "stats": {"total": 918, "additions": 633, "deletions": 285}, "files": [{"sha": "9b1642df1140142efa17274342c3e05de8e05734", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -505,14 +505,19 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     }\n \n     fn lower_arm(&mut self, arm: &Arm) -> hir::Arm<'hir> {\n+        let pat = self.lower_pat(&arm.pat);\n+        let guard = arm.guard.as_ref().map(|cond| {\n+            if let ExprKind::Let(ref pat, ref scrutinee) = cond.kind {\n+                hir::Guard::IfLet(self.lower_pat(pat), self.lower_expr(scrutinee))\n+            } else {\n+                hir::Guard::If(self.lower_expr(cond))\n+            }\n+        });\n         hir::Arm {\n             hir_id: self.next_id(),\n             attrs: self.lower_attrs(&arm.attrs),\n-            pat: self.lower_pat(&arm.pat),\n-            guard: match arm.guard {\n-                Some(ref x) => Some(hir::Guard::If(self.lower_expr(x))),\n-                _ => None,\n-            },\n+            pat,\n+            guard,\n             body: self.lower_expr(&arm.body),\n             span: arm.span,\n         }"}, {"sha": "c37f91256757e13e717bffac341efb684728d461", "filename": "compiler/rustc_expand/src/mbe/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -1,4 +1,4 @@\n-//! This is an NFA-based parser, which calls out to the main rust parser for named non-terminals\n+//! This is an NFA-based parser, which calls out to the main Rust parser for named non-terminals\n //! (which it commits to fully when it hits one in a grammar). There's a set of current NFA threads\n //! and a set of next ones. Instead of NTs, we have a special case for Kleene star. The big-O, in\n //! pathological cases, is worse than traditional use of NFA or Earley parsing, but it's an easier\n@@ -422,16 +422,13 @@ fn token_name_eq(t1: &Token, t2: &Token) -> bool {\n ///\n /// # Parameters\n ///\n-/// - `sess`: the parsing session into which errors are emitted.\n /// - `cur_items`: the set of current items to be processed. This should be empty by the end of a\n ///   successful execution of this function.\n /// - `next_items`: the set of newly generated items. These are used to replenish `cur_items` in\n ///   the function `parse`.\n /// - `eof_items`: the set of items that would be valid if this was the EOF.\n /// - `bb_items`: the set of items that are waiting for the black-box parser.\n /// - `token`: the current token of the parser.\n-/// - `span`: the `Span` in the source code corresponding to the token trees we are trying to match\n-///   against the matcher positions in `cur_items`.\n ///\n /// # Returns\n ///"}, {"sha": "2abebbd030387d477d55b460c9d0e2fb7d7eed6d", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -1160,6 +1160,7 @@ pub struct Arm<'hir> {\n #[derive(Debug, HashStable_Generic)]\n pub enum Guard<'hir> {\n     If(&'hir Expr<'hir>),\n+    IfLet(&'hir Pat<'hir>, &'hir Expr<'hir>),\n }\n \n #[derive(Debug, HashStable_Generic)]\n@@ -1721,6 +1722,8 @@ pub enum MatchSource {\n     IfDesugar { contains_else_clause: bool },\n     /// An `if let _ = _ { .. }` (optionally with `else { .. }`).\n     IfLetDesugar { contains_else_clause: bool },\n+    /// An `if let _ = _ => { .. }` match guard.\n+    IfLetGuardDesugar,\n     /// A `while _ { .. }` (which was desugared to a `loop { match _ { .. } }`).\n     WhileDesugar,\n     /// A `while let _ = _ { .. }` (which was desugared to a\n@@ -1739,7 +1742,7 @@ impl MatchSource {\n         use MatchSource::*;\n         match self {\n             Normal => \"match\",\n-            IfDesugar { .. } | IfLetDesugar { .. } => \"if\",\n+            IfDesugar { .. } | IfLetDesugar { .. } | IfLetGuardDesugar => \"if\",\n             WhileDesugar | WhileLetDesugar => \"while\",\n             ForLoopDesugar => \"for\",\n             TryDesugar => \"?\","}, {"sha": "03c8b1738853dc02fff2da2b0e555221c29ff124", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -1228,6 +1228,10 @@ pub fn walk_arm<'v, V: Visitor<'v>>(visitor: &mut V, arm: &'v Arm<'v>) {\n     if let Some(ref g) = arm.guard {\n         match g {\n             Guard::If(ref e) => visitor.visit_expr(e),\n+            Guard::IfLet(ref pat, ref e) => {\n+                visitor.visit_pat(pat);\n+                visitor.visit_expr(e);\n+            }\n         }\n     }\n     visitor.visit_expr(&arm.body);"}, {"sha": "0b5eb1d82667df5161dfbd462d5948b5ff524dc0", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -2002,6 +2002,15 @@ impl<'a> State<'a> {\n                     self.print_expr(&e);\n                     self.s.space();\n                 }\n+                hir::Guard::IfLet(pat, e) => {\n+                    self.word_nbsp(\"if\");\n+                    self.word_nbsp(\"let\");\n+                    self.print_pat(&pat);\n+                    self.s.space();\n+                    self.word_space(\"=\");\n+                    self.print_expr(&e);\n+                    self.s.space();\n+                }\n             }\n         }\n         self.word_space(\"=>\");"}, {"sha": "4dfe3e8487762d631820ed6a32435051fd67c880", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -319,10 +319,6 @@ impl<'a, 'tcx> TyEncoder<'tcx> for EncodeContext<'a, 'tcx> {\n         self.opaque.position()\n     }\n \n-    fn tcx(&self) -> TyCtxt<'tcx> {\n-        self.tcx\n-    }\n-\n     fn type_shorthands(&mut self) -> &mut FxHashMap<Ty<'tcx>, usize> {\n         &mut self.type_shorthands\n     }"}, {"sha": "4f08057a7e3235cf7724499911f8b67b1f3bfb3a", "filename": "compiler/rustc_middle/src/middle/stability.rs", "status": "modified", "additions": 40, "deletions": 35, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -132,37 +132,37 @@ pub fn report_unstable(\n /// Checks whether an item marked with `deprecated(since=\"X\")` is currently\n /// deprecated (i.e., whether X is not greater than the current rustc version).\n pub fn deprecation_in_effect(is_since_rustc_version: bool, since: Option<&str>) -> bool {\n-    let since = if let Some(since) = since {\n-        if is_since_rustc_version {\n-            since\n-        } else {\n-            // We assume that the deprecation is in effect if it's not a\n-            // rustc version.\n-            return true;\n-        }\n-    } else {\n-        // If since attribute is not set, then we're definitely in effect.\n-        return true;\n-    };\n     fn parse_version(ver: &str) -> Vec<u32> {\n         // We ignore non-integer components of the version (e.g., \"nightly\").\n         ver.split(|c| c == '.' || c == '-').flat_map(|s| s.parse()).collect()\n     }\n \n-    if let Some(rustc) = option_env!(\"CFG_RELEASE\") {\n-        let since: Vec<u32> = parse_version(&since);\n-        let rustc: Vec<u32> = parse_version(rustc);\n-        // We simply treat invalid `since` attributes as relating to a previous\n-        // Rust version, thus always displaying the warning.\n-        if since.len() != 3 {\n-            return true;\n-        }\n-        since <= rustc\n-    } else {\n-        // By default, a deprecation warning applies to\n-        // the current version of the compiler.\n-        true\n+    if !is_since_rustc_version {\n+        // The `since` field doesn't have semantic purpose in the stable `deprecated`\n+        // attribute, only in `rustc_deprecated`.\n+        return true;\n     }\n+\n+    if let Some(since) = since {\n+        if since == \"TBD\" {\n+            return false;\n+        }\n+\n+        if let Some(rustc) = option_env!(\"CFG_RELEASE\") {\n+            let since: Vec<u32> = parse_version(&since);\n+            let rustc: Vec<u32> = parse_version(rustc);\n+            // We simply treat invalid `since` attributes as relating to a previous\n+            // Rust version, thus always displaying the warning.\n+            if since.len() != 3 {\n+                return true;\n+            }\n+            return since <= rustc;\n+        }\n+    };\n+\n+    // Assume deprecation is in effect if \"since\" field is missing\n+    // or if we can't determine the current Rust version.\n+    true\n }\n \n pub fn deprecation_suggestion(\n@@ -182,19 +182,24 @@ pub fn deprecation_suggestion(\n }\n \n pub fn deprecation_message(depr: &Deprecation, kind: &str, path: &str) -> (String, &'static Lint) {\n-    let (message, lint) = if deprecation_in_effect(\n-        depr.is_since_rustc_version,\n-        depr.since.map(Symbol::as_str).as_deref(),\n-    ) {\n+    let since = depr.since.map(Symbol::as_str);\n+    let (message, lint) = if deprecation_in_effect(depr.is_since_rustc_version, since.as_deref()) {\n         (format!(\"use of deprecated {} `{}`\", kind, path), DEPRECATED)\n     } else {\n         (\n-            format!(\n-                \"use of {} `{}` that will be deprecated in future version {}\",\n-                kind,\n-                path,\n-                depr.since.unwrap()\n-            ),\n+            if since.as_deref() == Some(\"TBD\") {\n+                format!(\n+                    \"use of {} `{}` that will be deprecated in a future Rust version\",\n+                    kind, path\n+                )\n+            } else {\n+                format!(\n+                    \"use of {} `{}` that will be deprecated in future version {}\",\n+                    kind,\n+                    path,\n+                    since.unwrap()\n+                )\n+            },\n             DEPRECATED_IN_FUTURE,\n         )\n     };"}, {"sha": "1983af17dd0762853dbf59ad4f08c64f26b69762", "filename": "compiler/rustc_middle/src/ty/codec.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -69,7 +69,6 @@ impl OpaqueEncoder for rustc_serialize::opaque::Encoder {\n pub trait TyEncoder<'tcx>: Encoder {\n     const CLEAR_CROSS_CRATE: bool;\n \n-    fn tcx(&self) -> TyCtxt<'tcx>;\n     fn position(&self) -> usize;\n     fn type_shorthands(&mut self) -> &mut FxHashMap<Ty<'tcx>, usize>;\n     fn predicate_shorthands(&mut self) -> &mut FxHashMap<ty::Predicate<'tcx>, usize>;"}, {"sha": "e006dfeb66336d21cfbbf3e7ae848d267428b6b6", "filename": "compiler/rustc_middle/src/ty/query/on_disk_cache.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -1044,9 +1044,6 @@ where\n {\n     const CLEAR_CROSS_CRATE: bool = false;\n \n-    fn tcx(&self) -> TyCtxt<'tcx> {\n-        self.tcx\n-    }\n     fn position(&self) -> usize {\n         self.encoder.encoder_position()\n     }"}, {"sha": "4590d37c182e405d292f3d8fa545b827846b0322", "filename": "compiler/rustc_mir/src/transform/coverage/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fmod.rs?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -310,7 +310,7 @@ impl<'a, 'tcx> Instrumentor<'a, 'tcx> {\n             inject_statement(\n                 self.mir_body,\n                 counter_kind,\n-                self.bcb_last_bb(bcb),\n+                self.bcb_leader_bb(bcb),\n                 Some(make_code_region(file_name, &self.source_file, span, body_span)),\n             );\n         }\n@@ -470,7 +470,7 @@ fn inject_statement(\n             code_region: some_code_region,\n         }),\n     };\n-    data.statements.push(statement);\n+    data.statements.insert(0, statement);\n }\n \n // Non-code expressions are injected into the coverage map, without generating executable code."}, {"sha": "b16a99d7f0dcaee9b7b0634d040653d5c1b9346f", "filename": "compiler/rustc_mir/src/transform/early_otherwise_branch.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -284,6 +284,33 @@ impl<'a, 'tcx> Helper<'a, 'tcx> {\n                 return None;\n             }\n \n+            // when the second place is a projection of the first one, it's not safe to calculate their discriminant values sequentially.\n+            // for example, this should not be optimized:\n+            //\n+            // ```rust\n+            // enum E<'a> { Empty, Some(&'a E<'a>), }\n+            // let Some(Some(_)) = e;\n+            // ```\n+            //\n+            // ```mir\n+            // bb0: {\n+            //   _2 = discriminant(*_1)\n+            //   switchInt(_2) -> [...]\n+            // }\n+            // bb1: {\n+            //   _3 = discriminant(*(((*_1) as Some).0: &E))\n+            //   switchInt(_3) -> [...]\n+            // }\n+            // ```\n+            let discr_place = discr_info.place_of_adt_discr_read;\n+            let this_discr_place = this_bb_discr_info.place_of_adt_discr_read;\n+            if discr_place.local == this_discr_place.local\n+                && this_discr_place.projection.starts_with(discr_place.projection)\n+            {\n+                trace!(\"NO: one target is the projection of another\");\n+                return None;\n+            }\n+\n             // if we reach this point, the optimization applies, and we should be able to optimize this case\n             // store the info that is needed to apply the optimization\n "}, {"sha": "2e108d480932a1cce9e4352e7d6b0db65b1a0597", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 45, "deletions": 9, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -228,6 +228,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         guard: Option<&Guard<'tcx>>,\n         fake_borrow_temps: &Vec<(Place<'tcx>, Local)>,\n         scrutinee_span: Span,\n+        arm_span: Option<Span>,\n         arm_scope: Option<region::Scope>,\n     ) -> BasicBlock {\n         if candidate.subcandidates.is_empty() {\n@@ -239,6 +240,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 guard,\n                 fake_borrow_temps,\n                 scrutinee_span,\n+                arm_span,\n                 true,\n             )\n         } else {\n@@ -274,6 +276,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         guard,\n                         &fake_borrow_temps,\n                         scrutinee_span,\n+                        arm_span,\n                         schedule_drops,\n                     );\n                     if arm_scope.is_none() {\n@@ -436,6 +439,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             &fake_borrow_temps,\n             irrefutable_pat.span,\n             None,\n+            None,\n         )\n         .unit()\n     }\n@@ -817,11 +821,13 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// For an example of a case where we set `otherwise_block`, even for an\n     /// exhaustive match consider:\n     ///\n+    /// ```rust\n     /// match x {\n     ///     (true, true) => (),\n     ///     (_, false) => (),\n     ///     (false, true) => (),\n     /// }\n+    /// ```\n     ///\n     /// For this match, we check if `x.0` matches `true` (for the first\n     /// arm). If that's false, we check `x.1`. If it's `true` we check if\n@@ -935,11 +941,13 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// Link up matched candidates. For example, if we have something like\n     /// this:\n     ///\n+    /// ```rust\n     /// ...\n     /// Some(x) if cond => ...\n     /// Some(x) => ...\n     /// Some(x) if cond => ...\n     /// ...\n+    /// ```\n     ///\n     /// We generate real edges from:\n     /// * `start_block` to the `prebinding_block` of the first pattern,\n@@ -1517,7 +1525,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// Initializes each of the bindings from the candidate by\n     /// moving/copying/ref'ing the source as appropriate. Tests the guard, if\n     /// any, and then branches to the arm. Returns the block for the case where\n-    /// the guard fails.\n+    /// the guard succeeds.\n     ///\n     /// Note: we do not check earlier that if there is a guard,\n     /// there cannot be move bindings. We avoid a use-after-move by only\n@@ -1529,6 +1537,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         guard: Option<&Guard<'tcx>>,\n         fake_borrows: &Vec<(Place<'tcx>, Local)>,\n         scrutinee_span: Span,\n+        arm_span: Option<Span>,\n         schedule_drops: bool,\n     ) -> BasicBlock {\n         debug!(\"bind_and_guard_matched_candidate(candidate={:?})\", candidate);\n@@ -1659,15 +1668,42 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 self.cfg.push_assign(block, scrutinee_source_info, Place::from(temp), borrow);\n             }\n \n-            // the block to branch to if the guard fails; if there is no\n-            // guard, this block is simply unreachable\n-            let guard = match guard {\n-                Guard::If(e) => self.hir.mirror(e.clone()),\n+            let (guard_span, (post_guard_block, otherwise_post_guard_block)) = match guard {\n+                Guard::If(e) => {\n+                    let e = self.hir.mirror(e.clone());\n+                    let source_info = self.source_info(e.span);\n+                    (e.span, self.test_bool(block, e, source_info))\n+                },\n+                Guard::IfLet(pat, scrutinee) => {\n+                    let scrutinee_span = scrutinee.span();\n+                    let scrutinee_place = unpack!(block = self.lower_scrutinee(block, scrutinee.clone(), scrutinee_span));\n+                    let mut guard_candidate = Candidate::new(scrutinee_place, &pat, false);\n+                    let wildcard = Pat::wildcard_from_ty(pat.ty);\n+                    let mut otherwise_candidate = Candidate::new(scrutinee_place, &wildcard, false);\n+                    let fake_borrow_temps =\n+                        self.lower_match_tree(block, pat.span, false, &mut [&mut guard_candidate, &mut otherwise_candidate]);\n+                    self.declare_bindings(\n+                        None,\n+                        pat.span.to(arm_span.unwrap()),\n+                        pat,\n+                        ArmHasGuard(false),\n+                        Some((Some(&scrutinee_place), scrutinee.span())),\n+                    );\n+                    let post_guard_block = self.bind_pattern(\n+                        self.source_info(pat.span),\n+                        guard_candidate,\n+                        None,\n+                        &fake_borrow_temps,\n+                        scrutinee.span(),\n+                        None,\n+                        None,\n+                    );\n+                    let otherwise_post_guard_block = otherwise_candidate.pre_binding_block.unwrap();\n+                    (scrutinee_span, (post_guard_block, otherwise_post_guard_block))\n+                }\n             };\n-            let source_info = self.source_info(guard.span);\n-            let guard_end = self.source_info(tcx.sess.source_map().end_point(guard.span));\n-            let (post_guard_block, otherwise_post_guard_block) =\n-                self.test_bool(block, guard, source_info);\n+            let source_info = self.source_info(guard_span);\n+            let guard_end = self.source_info(tcx.sess.source_map().end_point(guard_span));\n             let guard_frame = self.guard_context.pop().unwrap();\n             debug!(\"Exiting guard building context with locals: {:?}\", guard_frame);\n "}, {"sha": "62d2212d10962e815c09940665d442cef1d2b15f", "filename": "compiler/rustc_mir_build/src/build/scope.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -1197,6 +1197,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         arm.guard.as_ref(),\n                         &fake_borrow_temps,\n                         scrutinee_span,\n+                        Some(arm.span),\n                         Some(arm.scope),\n                     );\n "}, {"sha": "417f9bded09884901516a4942c34214de12e4db0", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -776,10 +776,10 @@ impl ToBorrowKind for hir::Mutability {\n fn convert_arm<'tcx>(cx: &mut Cx<'_, 'tcx>, arm: &'tcx hir::Arm<'tcx>) -> Arm<'tcx> {\n     Arm {\n         pattern: cx.pattern_from_hir(&arm.pat),\n-        guard: match arm.guard {\n-            Some(hir::Guard::If(ref e)) => Some(Guard::If(e.to_ref())),\n-            _ => None,\n-        },\n+        guard: arm.guard.as_ref().map(|g| match g {\n+            hir::Guard::If(ref e) => Guard::If(e.to_ref()),\n+            hir::Guard::IfLet(ref pat, ref e) => Guard::IfLet(cx.pattern_from_hir(pat), e.to_ref()),\n+        }),\n         body: arm.body.to_ref(),\n         lint_level: LintLevel::Explicit(arm.hir_id),\n         scope: region::Scope { id: arm.hir_id.local_id, data: region::ScopeData::Node },"}, {"sha": "ace9cad4d299673a9672a77a212c92381087fd06", "filename": "compiler/rustc_mir_build/src/thir/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fmod.rs?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -344,6 +344,7 @@ crate struct Arm<'tcx> {\n #[derive(Clone, Debug)]\n crate enum Guard<'tcx> {\n     If(ExprRef<'tcx>),\n+    IfLet(Pat<'tcx>, ExprRef<'tcx>),\n }\n \n #[derive(Copy, Clone, Debug)]"}, {"sha": "29b7e176b0e1ad076bf76570d8500a52e2576abc", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -164,10 +164,20 @@ impl<'tcx> MatchVisitor<'_, 'tcx> {\n         for arm in arms {\n             // Check the arm for some things unrelated to exhaustiveness.\n             self.check_patterns(&arm.pat);\n+            if let Some(hir::Guard::IfLet(ref pat, _)) = arm.guard {\n+                self.check_patterns(pat);\n+            }\n         }\n \n         let mut cx = self.new_cx(scrut.hir_id);\n \n+        for arm in arms {\n+            if let Some(hir::Guard::IfLet(ref pat, _)) = arm.guard {\n+                let tpat = self.lower_pattern(&mut cx, pat, &mut false).0;\n+                check_if_let_guard(&mut cx, &tpat, pat.hir_id);\n+            }\n+        }\n+\n         let mut have_errors = false;\n \n         let arms: Vec<_> = arms\n@@ -360,12 +370,28 @@ fn irrefutable_let_pattern(tcx: TyCtxt<'_>, span: Span, id: HirId, source: hir::\n         let msg = match source {\n             hir::MatchSource::IfLetDesugar { .. } => \"irrefutable if-let pattern\",\n             hir::MatchSource::WhileLetDesugar => \"irrefutable while-let pattern\",\n+            hir::MatchSource::IfLetGuardDesugar => \"irrefutable if-let guard\",\n             _ => bug!(),\n         };\n         lint.build(msg).emit()\n     });\n }\n \n+fn check_if_let_guard<'p, 'tcx>(\n+    cx: &mut MatchCheckCtxt<'p, 'tcx>,\n+    pat: &'p super::Pat<'tcx>,\n+    pat_id: HirId,\n+) {\n+    let arms = [MatchArm { pat, hir_id: pat_id, has_guard: false }];\n+    let report = compute_match_usefulness(&cx, &arms, pat_id, pat.ty);\n+    report_arm_reachability(&cx, &report, hir::MatchSource::IfLetGuardDesugar);\n+\n+    if report.non_exhaustiveness_witnesses.is_empty() {\n+        // The match is exhaustive, i.e. the if let pattern is irrefutable.\n+        irrefutable_let_pattern(cx.tcx, pat.span, pat_id, hir::MatchSource::IfLetGuardDesugar)\n+    }\n+}\n+\n /// Report unreachable arms, if any.\n fn report_arm_reachability<'p, 'tcx>(\n     cx: &MatchCheckCtxt<'p, 'tcx>,\n@@ -390,6 +416,11 @@ fn report_arm_reachability<'p, 'tcx>(\n                         }\n                     }\n \n+                    hir::MatchSource::IfLetGuardDesugar => {\n+                        assert_eq!(arm_index, 0);\n+                        unreachable_pattern(cx.tcx, arm.pat.span, arm.hir_id, None);\n+                    }\n+\n                     hir::MatchSource::ForLoopDesugar | hir::MatchSource::Normal => {\n                         unreachable_pattern(cx.tcx, arm.pat.span, arm.hir_id, catchall);\n                     }"}, {"sha": "2d6bbff460d7fb6ea61eb613b91f2dfc44996957", "filename": "compiler/rustc_passes/src/check_const.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -45,6 +45,8 @@ impl NonConstExpr {\n                 return None;\n             }\n \n+            Self::Match(IfLetGuardDesugar) => bug!(\"if-let guard outside a `match` expression\"),\n+\n             // All other expressions are allowed.\n             Self::Loop(Loop | While | WhileLet)\n             | Self::Match("}, {"sha": "86ce35c6d9909df219c04dd705e187d41c02704f", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -360,6 +360,9 @@ impl<'tcx> Visitor<'tcx> for IrMaps<'tcx> {\n \n     fn visit_arm(&mut self, arm: &'tcx hir::Arm<'tcx>) {\n         self.add_from_pat(&arm.pat);\n+        if let Some(hir::Guard::IfLet(ref pat, _)) = arm.guard {\n+            self.add_from_pat(pat);\n+        }\n         intravisit::walk_arm(self, arm);\n     }\n \n@@ -866,10 +869,13 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                 for arm in arms {\n                     let body_succ = self.propagate_through_expr(&arm.body, succ);\n \n-                    let guard_succ = self.propagate_through_opt_expr(\n-                        arm.guard.as_ref().map(|hir::Guard::If(e)| *e),\n-                        body_succ,\n-                    );\n+                    let guard_succ = arm.guard.as_ref().map_or(body_succ, |g| match g {\n+                        hir::Guard::If(e) => self.propagate_through_expr(e, body_succ),\n+                        hir::Guard::IfLet(pat, e) => {\n+                            let let_bind = self.define_bindings_in_pat(pat, body_succ);\n+                            self.propagate_through_expr(e, let_bind)\n+                        }\n+                    });\n                     let arm_succ = self.define_bindings_in_pat(&arm.pat, guard_succ);\n                     self.merge_from_succ(ln, arm_succ);\n                 }"}, {"sha": "3c2462aab26b7feeeff193a4fe79b5293981bc66", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 24, "deletions": 20, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -182,28 +182,32 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n                 for (dep_v, stab_v) in\n                     dep_since.as_str().split('.').zip(stab_since.as_str().split('.'))\n                 {\n-                    if let (Ok(dep_v), Ok(stab_v)) = (dep_v.parse::<u64>(), stab_v.parse()) {\n-                        match dep_v.cmp(&stab_v) {\n-                            Ordering::Less => {\n-                                self.tcx.sess.span_err(\n-                                    item_sp,\n-                                    \"An API can't be stabilized \\\n-                                                                 after it is deprecated\",\n-                                );\n+                    match stab_v.parse::<u64>() {\n+                        Err(_) => {\n+                            self.tcx.sess.span_err(item_sp, \"Invalid stability version found\");\n+                            break;\n+                        }\n+                        Ok(stab_vp) => match dep_v.parse::<u64>() {\n+                            Ok(dep_vp) => match dep_vp.cmp(&stab_vp) {\n+                                Ordering::Less => {\n+                                    self.tcx.sess.span_err(\n+                                        item_sp,\n+                                        \"An API can't be stabilized after it is deprecated\",\n+                                    );\n+                                    break;\n+                                }\n+                                Ordering::Equal => continue,\n+                                Ordering::Greater => break,\n+                            },\n+                            Err(_) => {\n+                                if dep_v != \"TBD\" {\n+                                    self.tcx\n+                                        .sess\n+                                        .span_err(item_sp, \"Invalid deprecation version found\");\n+                                }\n                                 break;\n                             }\n-                            Ordering::Equal => continue,\n-                            Ordering::Greater => break,\n-                        }\n-                    } else {\n-                        // Act like it isn't less because the question is now nonsensical,\n-                        // and this makes us not do anything else interesting.\n-                        self.tcx.sess.span_err(\n-                            item_sp,\n-                            \"Invalid stability or deprecation \\\n-                                                         version found\",\n-                        );\n-                        break;\n+                        },\n                     }\n                 }\n             }"}, {"sha": "c9ddcbdb5f5cc71bc4158e091b561ce90d867d69", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -1491,7 +1491,7 @@ fn parse_target_triple(matches: &getopts::Matches, error_format: ErrorOutputType\n                 early_error(error_format, &format!(\"target file {:?} does not exist\", path))\n             })\n         }\n-        Some(target) => TargetTriple::TargetTriple(target),\n+        Some(target) => TargetTriple::from_alias(target),\n         _ => TargetTriple::from_triple(host_triple()),\n     }\n }"}, {"sha": "8d72df6850fc297aa270f5645631192084032c7b", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -1800,6 +1800,24 @@ impl TargetTriple {\n         Ok(TargetTriple::TargetPath(canonicalized_path))\n     }\n \n+    /// Creates a target triple from its alias\n+    pub fn from_alias(triple: String) -> Self {\n+        macro_rules! target_aliases {\n+            ( $(($alias:literal, $target:literal ),)+ ) => {\n+                match triple.as_str() {\n+                    $( $alias => TargetTriple::from_triple($target), )+\n+                    _ => TargetTriple::TargetTriple(triple),\n+                }\n+            }\n+        }\n+\n+        target_aliases! {\n+            // `x86_64-pc-solaris` is an alias for `x86_64_sun_solaris` for backwards compatibility reasons.\n+            // (See <https://github.com/rust-lang/rust/issues/40531>.)\n+            (\"x86_64-pc-solaris\", \"x86_64-sun-solaris\"),\n+        }\n+    }\n+\n     /// Returns a string triple for this target.\n     ///\n     /// If this target is a path, the file name (without extension) is returned."}, {"sha": "3106f19cf86f33352145f3e0967f6c5af36009b5", "filename": "compiler/rustc_typeck/src/check/_match.rs", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -43,7 +43,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // FIXME(60707): Consider removing hack with principled solution.\n             self.check_expr_has_type_or_error(scrut, self.tcx.types.bool, |_| {})\n         } else {\n-            self.demand_scrutinee_type(arms, scrut)\n+            self.demand_scrutinee_type(scrut, arms_contain_ref_bindings(arms), arms.is_empty())\n         };\n \n         // If there are no arms, that is a diverging match; a special case.\n@@ -98,7 +98,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.diverges.set(Diverges::Maybe);\n                 match g {\n                     hir::Guard::If(e) => {\n-                        self.check_expr_has_type_or_error(e, tcx.types.bool, |_| {})\n+                        self.check_expr_has_type_or_error(e, tcx.types.bool, |_| {});\n+                    }\n+                    hir::Guard::IfLet(pat, e) => {\n+                        let scrutinee_ty = self.demand_scrutinee_type(\n+                            e,\n+                            pat.contains_explicit_ref_binding(),\n+                            false,\n+                        );\n+                        self.check_pat_top(&pat, scrutinee_ty, None, true);\n                     }\n                 };\n             }\n@@ -450,8 +458,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     fn demand_scrutinee_type(\n         &self,\n-        arms: &'tcx [hir::Arm<'tcx>],\n         scrut: &'tcx hir::Expr<'tcx>,\n+        contains_ref_bindings: Option<hir::Mutability>,\n+        no_arms: bool,\n     ) -> Ty<'tcx> {\n         // Not entirely obvious: if matches may create ref bindings, we want to\n         // use the *precise* type of the scrutinee, *not* some supertype, as\n@@ -505,17 +514,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // (once introduced) is populated by the time we get here.\n         //\n         // See #44848.\n-        let contains_ref_bindings = arms\n-            .iter()\n-            .filter_map(|a| a.pat.contains_explicit_ref_binding())\n-            .max_by_key(|m| match *m {\n-                hir::Mutability::Mut => 1,\n-                hir::Mutability::Not => 0,\n-            });\n-\n         if let Some(m) = contains_ref_bindings {\n             self.check_expr_with_needs(scrut, Needs::maybe_mut_place(m))\n-        } else if arms.is_empty() {\n+        } else if no_arms {\n             self.check_expr(scrut)\n         } else {\n             // ...but otherwise we want to use any supertype of the\n@@ -546,3 +547,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n }\n+\n+fn arms_contain_ref_bindings(arms: &'tcx [hir::Arm<'tcx>]) -> Option<hir::Mutability> {\n+    arms.iter().filter_map(|a| a.pat.contains_explicit_ref_binding()).max_by_key(|m| match *m {\n+        hir::Mutability::Mut => 1,\n+        hir::Mutability::Not => 0,\n+    })\n+}"}, {"sha": "5bc40d617d044f5991a6235673a96680d80dc84b", "filename": "compiler/rustc_typeck/src/check/generator_interior.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -246,6 +246,10 @@ impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n                 Guard::If(ref e) => {\n                     self.visit_expr(e);\n                 }\n+                Guard::IfLet(ref pat, ref e) => {\n+                    self.visit_pat(pat);\n+                    self.visit_expr(e);\n+                }\n             }\n \n             let mut scope_var_ids ="}, {"sha": "2cde5d9995b62ec9908e8212ce880f595e08e302", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -92,6 +92,8 @@ $EndFeature, \"\n \"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n+            #[doc(alias = \"popcount\")]\n+            #[doc(alias = \"popcnt\")]\n             #[inline]\n             pub const fn count_ones(self) -> u32 { (self as $UnsignedT).count_ones() }\n         }"}, {"sha": "ae8fc18a83882adec91e0e542b95653975abb7e1", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -90,6 +90,8 @@ assert_eq!(n.count_ones(), 3);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]\n+            #[doc(alias = \"popcount\")]\n+            #[doc(alias = \"popcnt\")]\n             #[inline]\n             pub const fn count_ones(self) -> u32 {\n                 intrinsics::ctpop(self as $ActualT) as u32"}, {"sha": "77c9a93008c91c3e28354639532b111c1ba09e6e", "filename": "library/core/src/num/wrapping.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/library%2Fcore%2Fsrc%2Fnum%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/library%2Fcore%2Fsrc%2Fnum%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fwrapping.rs?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -453,6 +453,8 @@ let n = Wrapping(0b01001100\", stringify!($t), \");\n assert_eq!(n.count_ones(), 3);\n ```\"),\n                 #[inline]\n+                #[doc(alias = \"popcount\")]\n+                #[doc(alias = \"popcnt\")]\n                 #[unstable(feature = \"wrapping_int_impl\", issue = \"32463\")]\n                 pub const fn count_ones(self) -> u32 {\n                     self.0.count_ones()"}, {"sha": "8ccb9dbdf01668d6a10f530bc6de1e657dcb3a61", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 2, "deletions": 24, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -1043,30 +1043,6 @@ impl Step for Src {\n             builder.copy(&builder.src.join(file), &dst_src.join(file));\n         }\n \n-        // libtest includes std and everything else, so vendoring it\n-        // creates exactly what's needed for `cargo -Zbuild-std` or any\n-        // other analysis of the stdlib's source. Cargo also needs help\n-        // finding the lock, so we copy it to libtest temporarily.\n-        //\n-        // Note that this requires std to only have one version of each\n-        // crate. e.g. two versions of getopts won't be patchable.\n-        let dst_libtest = dst_src.join(\"library/test\");\n-        let dst_vendor = dst_src.join(\"vendor\");\n-        let root_lock = dst_src.join(\"Cargo.lock\");\n-        let temp_lock = dst_libtest.join(\"Cargo.lock\");\n-\n-        // `cargo vendor` will delete everything from the lockfile that\n-        // isn't used by libtest, so we need to not use any links!\n-        builder.really_copy(&root_lock, &temp_lock);\n-\n-        let mut cmd = Command::new(&builder.initial_cargo);\n-        cmd.arg(\"vendor\").arg(dst_vendor).current_dir(&dst_libtest);\n-        builder.info(\"Dist src\");\n-        let _time = timeit(builder);\n-        builder.run(&mut cmd);\n-\n-        builder.remove(&temp_lock);\n-\n         // Create source tarball in rust-installer format\n         let mut cmd = rust_installer(builder);\n         cmd.arg(\"generate\")\n@@ -1083,6 +1059,8 @@ impl Step for Src {\n             .arg(\"--component-name=rust-src\")\n             .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n \n+        builder.info(\"Dist src\");\n+        let _time = timeit(builder);\n         builder.run(&mut cmd);\n \n         builder.remove_dir(&image);"}, {"sha": "ece9bdc7a6499f43d4ff3ab88931744e79c312e8", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -1182,27 +1182,6 @@ impl Build {\n         paths\n     }\n \n-    /// Copies a file from `src` to `dst` and doesn't use links, so\n-    /// that the copy can be modified without affecting the original.\n-    pub fn really_copy(&self, src: &Path, dst: &Path) {\n-        if self.config.dry_run {\n-            return;\n-        }\n-        self.verbose_than(1, &format!(\"Copy {:?} to {:?}\", src, dst));\n-        if src == dst {\n-            return;\n-        }\n-        let _ = fs::remove_file(&dst);\n-        let metadata = t!(src.symlink_metadata());\n-        if let Err(e) = fs::copy(src, dst) {\n-            panic!(\"failed to copy `{}` to `{}`: {}\", src.display(), dst.display(), e)\n-        }\n-        t!(fs::set_permissions(dst, metadata.permissions()));\n-        let atime = FileTime::from_last_access_time(&metadata);\n-        let mtime = FileTime::from_last_modification_time(&metadata);\n-        t!(filetime::set_file_times(dst, atime, mtime));\n-    }\n-\n     /// Copies a file from `src` to `dst`\n     pub fn copy(&self, src: &Path, dst: &Path) {\n         if self.config.dry_run {"}, {"sha": "00294878fe5fb674a01321978289b7c6b384fdaf", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -2279,7 +2279,11 @@ fn short_item_info(item: &clean::Item, cx: &Context, parent: Option<&clean::Item\n         let mut message = if let Some(since) = since {\n             let since = &since.as_str();\n             if !stability::deprecation_in_effect(is_since_rustc_version, Some(since)) {\n-                format!(\"Deprecating in {}\", Escape(since))\n+                if *since == \"TBD\" {\n+                    format!(\"Deprecating in a future Rust version\")\n+                } else {\n+                    format!(\"Deprecating in {}\", Escape(since))\n+                }\n             } else {\n                 format!(\"Deprecated since {}\", Escape(since))\n             }"}, {"sha": "c00eae96e08386dcc62b453f13f1cc4d5ae9fed1", "filename": "src/test/mir-opt/coverage_graphviz.bar.InstrumentCoverage.0.dot", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftest%2Fmir-opt%2Fcoverage_graphviz.bar.InstrumentCoverage.0.dot", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftest%2Fmir-opt%2Fcoverage_graphviz.bar.InstrumentCoverage.0.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcoverage_graphviz.bar.InstrumentCoverage.0.dot?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -2,5 +2,5 @@ digraph Cov_0_4 {\n     graph [fontname=\"Courier, monospace\"];\n     node [fontname=\"Courier, monospace\"];\n     edge [fontname=\"Courier, monospace\"];\n-    bcb0__Cov_0_4 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">bcb0</td></tr><tr><td align=\"left\" balign=\"left\"></td></tr><tr><td align=\"left\" balign=\"left\">Counter(bcb0) at 18:1-20:2<br/>    19:5-19:9: @0[0]: _0 = const true<br/>    20:2-20:2: @0.Return: return</td></tr><tr><td align=\"left\" balign=\"left\">bb0: Return</td></tr></table>>];\n+    bcb0__Cov_0_4 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">bcb0</td></tr><tr><td align=\"left\" balign=\"left\"></td></tr><tr><td align=\"left\" balign=\"left\">Counter(bcb0) at 18:1-20:2<br/>    19:5-19:9: @0[0]: Coverage::Counter(1) for $DIR/coverage_graphviz.rs:18:1 - 20:2<br/>    20:2-20:2: @0.Return: return</td></tr><tr><td align=\"left\" balign=\"left\">bb0: Return</td></tr></table>>];\n }"}, {"sha": "5b6d73a7deefb557b4496f4f1f73407b97b782eb", "filename": "src/test/mir-opt/coverage_graphviz.main.InstrumentCoverage.0.dot", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftest%2Fmir-opt%2Fcoverage_graphviz.main.InstrumentCoverage.0.dot", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftest%2Fmir-opt%2Fcoverage_graphviz.main.InstrumentCoverage.0.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcoverage_graphviz.main.InstrumentCoverage.0.dot?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -2,7 +2,7 @@ digraph Cov_0_3 {\n     graph [fontname=\"Courier, monospace\"];\n     node [fontname=\"Courier, monospace\"];\n     edge [fontname=\"Courier, monospace\"];\n-    bcb2__Cov_0_3 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">bcb2</td></tr><tr><td align=\"left\" balign=\"left\">Expression(bcb0 - bcb1) at 13:10-13:10<br/>    13:10-13:10: @4[0]: _1 = const ()</td></tr><tr><td align=\"left\" balign=\"left\">bb4: Goto</td></tr></table>>];\n+    bcb2__Cov_0_3 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">bcb2</td></tr><tr><td align=\"left\" balign=\"left\">Expression(bcb0 - bcb1) at 13:10-13:10<br/>    13:10-13:10: @4[0]: Coverage::Expression(4294967295) = 1 - 2 for $DIR/coverage_graphviz.rs:13:10 - 13:11</td></tr><tr><td align=\"left\" balign=\"left\">bb4: Goto</td></tr></table>>];\n     bcb1__Cov_0_3 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">bcb1</td></tr><tr><td align=\"left\" balign=\"left\">Counter(bcb1) at 12:13-12:18<br/>    12:13-12:18: @5[0]: _0 = const ()<br/>Expression(bcb1 + 0) at 15:2-15:2<br/>    15:2-15:2: @5.Return: return</td></tr><tr><td align=\"left\" balign=\"left\">bb3: FalseEdge</td></tr><tr><td align=\"left\" balign=\"left\">bb5: Return</td></tr></table>>];\n     bcb0__Cov_0_3 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">bcb0</td></tr><tr><td align=\"left\" balign=\"left\"></td></tr><tr><td align=\"left\" balign=\"left\">Counter(bcb0) at 9:1-11:17<br/>    11:12-11:17: @1.Call: _2 = bar() -&gt; [return: bb2, unwind: bb6]<br/>    11:12-11:17: @2[0]: FakeRead(ForMatchedPlace, _2)</td></tr><tr><td align=\"left\" balign=\"left\">bb0: FalseUnwind<br/>bb1: Call</td></tr><tr><td align=\"left\" balign=\"left\">bb2: SwitchInt</td></tr></table>>];\n     bcb2__Cov_0_3 -> bcb0__Cov_0_3 [label=<>];"}, {"sha": "fef696df770b67ad22fb87a90dfaea803a8d7831", "filename": "src/test/mir-opt/instrument_coverage.bar.InstrumentCoverage.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftest%2Fmir-opt%2Finstrument_coverage.bar.InstrumentCoverage.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftest%2Fmir-opt%2Finstrument_coverage.bar.InstrumentCoverage.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finstrument_coverage.bar.InstrumentCoverage.diff?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -5,8 +5,8 @@\n       let mut _0: bool;                    // return place in scope 0 at /the/src/instrument_coverage.rs:19:13: 19:17\n   \n       bb0: {\n-          _0 = const true;                 // scope 0 at /the/src/instrument_coverage.rs:20:5: 20:9\n +         Coverage::Counter(1) for /the/src/instrument_coverage.rs:19:1 - 21:2; // scope 0 at /the/src/instrument_coverage.rs:21:2: 21:2\n+          _0 = const true;                 // scope 0 at /the/src/instrument_coverage.rs:20:5: 20:9\n           return;                          // scope 0 at /the/src/instrument_coverage.rs:21:2: 21:2\n       }\n   }"}, {"sha": "9bd8c9cf61331c6bce17ceb1df4e8e0a8385f439", "filename": "src/test/mir-opt/instrument_coverage.main.InstrumentCoverage.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftest%2Fmir-opt%2Finstrument_coverage.main.InstrumentCoverage.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftest%2Fmir-opt%2Finstrument_coverage.main.InstrumentCoverage.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finstrument_coverage.main.InstrumentCoverage.diff?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -8,6 +8,7 @@\n       let mut _3: !;                       // in scope 0 at /the/src/instrument_coverage.rs:12:18: 14:10\n   \n       bb0: {\n++         Coverage::Counter(1) for /the/src/instrument_coverage.rs:10:1 - 12:17; // scope 0 at /the/src/instrument_coverage.rs:11:5: 15:6\n           falseUnwind -> [real: bb1, cleanup: bb6]; // scope 0 at /the/src/instrument_coverage.rs:11:5: 15:6\n       }\n   \n@@ -21,26 +22,25 @@\n   \n       bb2: {\n           FakeRead(ForMatchedPlace, _2);   // scope 0 at /the/src/instrument_coverage.rs:12:12: 12:17\n-+         Coverage::Counter(1) for /the/src/instrument_coverage.rs:10:1 - 12:17; // scope 0 at /the/src/instrument_coverage.rs:12:9: 14:10\n           switchInt(_2) -> [false: bb4, otherwise: bb3]; // scope 0 at /the/src/instrument_coverage.rs:12:9: 14:10\n       }\n   \n       bb3: {\n++         Coverage::Expression(4294967294) = 2 + 0 for /the/src/instrument_coverage.rs:16:1 - 16:2; // scope 0 at /the/src/instrument_coverage.rs:12:9: 14:10\n++         Coverage::Counter(2) for /the/src/instrument_coverage.rs:13:13 - 13:18; // scope 0 at /the/src/instrument_coverage.rs:12:9: 14:10\n           falseEdge -> [real: bb5, imaginary: bb4]; // scope 0 at /the/src/instrument_coverage.rs:12:9: 14:10\n       }\n   \n       bb4: {\n++         Coverage::Expression(4294967295) = 1 - 2 for /the/src/instrument_coverage.rs:14:10 - 14:11; // scope 0 at /the/src/instrument_coverage.rs:11:5: 15:6\n           _1 = const ();                   // scope 0 at /the/src/instrument_coverage.rs:14:10: 14:10\n           StorageDead(_2);                 // scope 0 at /the/src/instrument_coverage.rs:15:5: 15:6\n-+         Coverage::Expression(4294967295) = 1 - 2 for /the/src/instrument_coverage.rs:14:10 - 14:11; // scope 0 at /the/src/instrument_coverage.rs:11:5: 15:6\n           goto -> bb0;                     // scope 0 at /the/src/instrument_coverage.rs:11:5: 15:6\n       }\n   \n       bb5: {\n           _0 = const ();                   // scope 0 at /the/src/instrument_coverage.rs:13:13: 13:18\n           StorageDead(_2);                 // scope 0 at /the/src/instrument_coverage.rs:15:5: 15:6\n-+         Coverage::Counter(2) for /the/src/instrument_coverage.rs:13:13 - 13:18; // scope 0 at /the/src/instrument_coverage.rs:16:2: 16:2\n-+         Coverage::Expression(4294967294) = 2 + 0 for /the/src/instrument_coverage.rs:16:1 - 16:2; // scope 0 at /the/src/instrument_coverage.rs:16:2: 16:2\n           return;                          // scope 0 at /the/src/instrument_coverage.rs:16:2: 16:2\n       }\n   "}, {"sha": "bb857ba3f3b3f42b83f582d08071a833f0871825", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_export_coverage.assert.json", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_export_coverage.assert.json", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_export_coverage.assert.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_export_coverage.assert.json?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -17,14 +17,14 @@\n             },\n             \"lines\": {\n               \"count\": 15,\n-              \"covered\": 12,\n-              \"percent\": 80\n+              \"covered\": 13,\n+              \"percent\": 86.66666666666667\n             },\n             \"regions\": {\n               \"count\": 14,\n-              \"covered\": 12,\n-              \"notcovered\": 2,\n-              \"percent\": 85.71428571428571\n+              \"covered\": 13,\n+              \"notcovered\": 1,\n+              \"percent\": 92.85714285714286\n             }\n           }\n         }\n@@ -42,14 +42,14 @@\n         },\n         \"lines\": {\n           \"count\": 15,\n-          \"covered\": 12,\n-          \"percent\": 80\n+          \"covered\": 13,\n+          \"percent\": 86.66666666666667\n         },\n         \"regions\": {\n           \"count\": 14,\n-          \"covered\": 12,\n-          \"notcovered\": 2,\n-          \"percent\": 85.71428571428571\n+          \"covered\": 13,\n+          \"notcovered\": 1,\n+          \"percent\": 92.85714285714286\n         }\n       }\n     }"}, {"sha": "128f5888ed113acbc30836c6c8fdd2ba91d0a056", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_export_coverage.overflow.json", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_export_coverage.overflow.json", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_export_coverage.overflow.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_export_coverage.overflow.json?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -17,14 +17,14 @@\n             },\n             \"lines\": {\n               \"count\": 23,\n-              \"covered\": 19,\n-              \"percent\": 82.6086956521739\n+              \"covered\": 21,\n+              \"percent\": 91.30434782608695\n             },\n             \"regions\": {\n               \"count\": 13,\n-              \"covered\": 11,\n-              \"notcovered\": 2,\n-              \"percent\": 84.61538461538461\n+              \"covered\": 12,\n+              \"notcovered\": 1,\n+              \"percent\": 92.3076923076923\n             }\n           }\n         }\n@@ -42,14 +42,14 @@\n         },\n         \"lines\": {\n           \"count\": 23,\n-          \"covered\": 19,\n-          \"percent\": 82.6086956521739\n+          \"covered\": 21,\n+          \"percent\": 91.30434782608695\n         },\n         \"regions\": {\n           \"count\": 13,\n-          \"covered\": 11,\n-          \"notcovered\": 2,\n-          \"percent\": 84.61538461538461\n+          \"covered\": 12,\n+          \"notcovered\": 1,\n+          \"percent\": 92.3076923076923\n         }\n       }\n     }"}, {"sha": "9c08dfd41a12b53052f25b0e50c972b2a3b5d8bc", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_export_coverage.panic_unwind.json", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_export_coverage.panic_unwind.json", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_export_coverage.panic_unwind.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_export_coverage.panic_unwind.json?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -17,14 +17,14 @@\n             },\n             \"lines\": {\n               \"count\": 19,\n-              \"covered\": 16,\n-              \"percent\": 84.21052631578947\n+              \"covered\": 17,\n+              \"percent\": 89.47368421052632\n             },\n             \"regions\": {\n               \"count\": 13,\n-              \"covered\": 11,\n-              \"notcovered\": 2,\n-              \"percent\": 84.61538461538461\n+              \"covered\": 12,\n+              \"notcovered\": 1,\n+              \"percent\": 92.3076923076923\n             }\n           }\n         }\n@@ -42,14 +42,14 @@\n         },\n         \"lines\": {\n           \"count\": 19,\n-          \"covered\": 16,\n-          \"percent\": 84.21052631578947\n+          \"covered\": 17,\n+          \"percent\": 89.47368421052632\n         },\n         \"regions\": {\n           \"count\": 13,\n-          \"covered\": 11,\n-          \"notcovered\": 2,\n-          \"percent\": 84.61538461538461\n+          \"covered\": 12,\n+          \"notcovered\": 1,\n+          \"percent\": 92.3076923076923\n         }\n       }\n     }"}, {"sha": "405688806eaae7e0dc666e77e082dbbe12e27000", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.assert.txt", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.assert.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.assert.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.assert.txt?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -9,13 +9,13 @@\n     8|       |\n     9|      1|fn main() -> Result<(),u8> {\n    10|      1|    let mut countdown = 10;\n-   11|     10|    while countdown > 0 {\n-   12|     10|        if countdown == 1 {\n-   13|      0|            might_fail_assert(3);\n+   11|     11|    while countdown > 0 {\n+   12|     11|        if countdown == 1 {\n+   13|      1|            might_fail_assert(3);\n    14|     10|        } else if countdown < 5 {\n    15|      3|            might_fail_assert(2);\n    16|      6|        }\n-   17|      9|        countdown -= 1;\n+   17|     10|        countdown -= 1;\n    18|       |    }\n    19|      0|    Ok(())\n    20|      0|}"}, {"sha": "25e822bffd11fb379483fe443efc308a8bf5dcd1", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.overflow.txt", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.overflow.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.overflow.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.overflow.txt?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -14,15 +14,15 @@\n    14|       |\n    15|      1|fn main() -> Result<(),u8> {\n    16|      1|    let mut countdown = 10;\n-   17|     10|    while countdown > 0 {\n-   18|     10|        if countdown == 1 {\n-   19|      0|            let result = might_overflow(10);\n-   20|      0|            println!(\"Result: {}\", result);\n+   17|     11|    while countdown > 0 {\n+   18|     11|        if countdown == 1 {\n+   19|      1|            let result = might_overflow(10);\n+   20|      1|            println!(\"Result: {}\", result);\n    21|     10|        } else if countdown < 5 {\n    22|      3|            let result = might_overflow(1);\n    23|      3|            println!(\"Result: {}\", result);\n    24|      6|        }\n-   25|      9|        countdown -= 1;\n+   25|     10|        countdown -= 1;\n    26|       |    }\n    27|      0|    Ok(())\n    28|      0|}"}, {"sha": "c77ee5ddc207b2715e9585d9ee70aa60a93b95b8", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.panic_unwind.txt", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.panic_unwind.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.panic_unwind.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.panic_unwind.txt?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -12,13 +12,13 @@\n    12|       |\n    13|      1|fn main() -> Result<(), u8> {\n    14|      1|    let mut countdown = 10;\n-   15|     10|    while countdown > 0 {\n-   16|     10|        if countdown == 1 {\n-   17|      0|            might_panic(true);\n+   15|     11|    while countdown > 0 {\n+   16|     11|        if countdown == 1 {\n+   17|      1|            might_panic(true);\n    18|     10|        } else if countdown < 5 {\n    19|      3|            might_panic(false);\n    20|      6|        }\n-   21|      9|        countdown -= 1;\n+   21|     10|        countdown -= 1;\n    22|       |    }\n    23|      0|    Ok(())\n    24|      0|}"}, {"sha": "0866a9a59a11d46445266614a5a357cef29604f5", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage_counters.assert.txt", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage_counters.assert.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage_counters.assert.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage_counters.assert.txt?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -20,13 +20,13 @@ Combined regions:\n   6:37 -> 6:61 (count=1)\n   7:1 -> 7:2 (count=3)\n   9:1 -> 10:27 (count=1)\n-  11:11 -> 11:24 (count=10)\n-  12:12 -> 12:26 (count=10)\n-  12:27 -> 14:10 (count=0)\n+  11:11 -> 11:24 (count=11)\n+  12:12 -> 12:26 (count=11)\n+  12:27 -> 14:10 (count=1)\n   14:19 -> 14:32 (count=10)\n   14:33 -> 16:10 (count=3)\n   16:10 -> 16:11 (count=6)\n-  17:9 -> 17:23 (count=9)\n+  17:9 -> 17:23 (count=10)\n   19:5 -> 20:2 (count=0)\n Segment at 4:1 (count = 4), RegionEntry\n Segment at 4:41 (count = 0), Skipped\n@@ -40,18 +40,18 @@ Segment at 7:1 (count = 3), RegionEntry\n Segment at 7:2 (count = 0), Skipped\n Segment at 9:1 (count = 1), RegionEntry\n Segment at 10:27 (count = 0), Skipped\n-Segment at 11:11 (count = 10), RegionEntry\n+Segment at 11:11 (count = 11), RegionEntry\n Segment at 11:24 (count = 0), Skipped\n-Segment at 12:12 (count = 10), RegionEntry\n+Segment at 12:12 (count = 11), RegionEntry\n Segment at 12:26 (count = 0), Skipped\n-Segment at 12:27 (count = 0), RegionEntry\n+Segment at 12:27 (count = 1), RegionEntry\n Segment at 14:10 (count = 0), Skipped\n Segment at 14:19 (count = 10), RegionEntry\n Segment at 14:32 (count = 0), Skipped\n Segment at 14:33 (count = 3), RegionEntry\n Segment at 16:10 (count = 6), RegionEntry\n Segment at 16:11 (count = 0), Skipped\n-Segment at 17:9 (count = 9), RegionEntry\n+Segment at 17:9 (count = 10), RegionEntry\n Segment at 17:23 (count = 0), Skipped\n Segment at 19:5 (count = 0), RegionEntry\n Segment at 20:2 (count = 0), Skipped"}, {"sha": "380bb7cf170165320a48b8414e5ee37babe84e07", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage_counters.overflow.txt", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage_counters.overflow.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage_counters.overflow.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage_counters.overflow.txt?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -18,13 +18,13 @@ Combined regions:\n   7:6 -> 7:7 (count=3)\n   8:9 -> 13:2 (count=4)\n   15:1 -> 16:27 (count=1)\n-  17:11 -> 17:24 (count=10)\n-  18:12 -> 18:26 (count=10)\n-  18:27 -> 21:10 (count=0)\n+  17:11 -> 17:24 (count=11)\n+  18:12 -> 18:26 (count=11)\n+  18:27 -> 21:10 (count=1)\n   21:19 -> 21:32 (count=10)\n   21:33 -> 24:10 (count=3)\n   24:10 -> 24:11 (count=6)\n-  25:9 -> 25:23 (count=9)\n+  25:9 -> 25:23 (count=10)\n   27:5 -> 28:2 (count=0)\n Segment at 4:1 (count = 4), RegionEntry\n Segment at 5:18 (count = 0), Skipped\n@@ -35,18 +35,18 @@ Segment at 8:9 (count = 4), RegionEntry\n Segment at 13:2 (count = 0), Skipped\n Segment at 15:1 (count = 1), RegionEntry\n Segment at 16:27 (count = 0), Skipped\n-Segment at 17:11 (count = 10), RegionEntry\n+Segment at 17:11 (count = 11), RegionEntry\n Segment at 17:24 (count = 0), Skipped\n-Segment at 18:12 (count = 10), RegionEntry\n+Segment at 18:12 (count = 11), RegionEntry\n Segment at 18:26 (count = 0), Skipped\n-Segment at 18:27 (count = 0), RegionEntry\n+Segment at 18:27 (count = 1), RegionEntry\n Segment at 21:10 (count = 0), Skipped\n Segment at 21:19 (count = 10), RegionEntry\n Segment at 21:32 (count = 0), Skipped\n Segment at 21:33 (count = 3), RegionEntry\n Segment at 24:10 (count = 6), RegionEntry\n Segment at 24:11 (count = 0), Skipped\n-Segment at 25:9 (count = 9), RegionEntry\n+Segment at 25:9 (count = 10), RegionEntry\n Segment at 25:23 (count = 0), Skipped\n Segment at 27:5 (count = 0), RegionEntry\n Segment at 28:2 (count = 0), Skipped"}, {"sha": "b3f61ad325d1c0cfd401ae862cdf490deffe9698", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage_counters.panic_unwind.txt", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage_counters.panic_unwind.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage_counters.panic_unwind.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage_counters.panic_unwind.txt?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -18,13 +18,13 @@ Combined regions:\n   6:9 -> 7:26 (count=1)\n   8:12 -> 11:2 (count=3)\n   13:1 -> 14:27 (count=1)\n-  15:11 -> 15:24 (count=10)\n-  16:12 -> 16:26 (count=10)\n-  16:27 -> 18:10 (count=0)\n+  15:11 -> 15:24 (count=11)\n+  16:12 -> 16:26 (count=11)\n+  16:27 -> 18:10 (count=1)\n   18:19 -> 18:32 (count=10)\n   18:33 -> 20:10 (count=3)\n   20:10 -> 20:11 (count=6)\n-  21:9 -> 21:23 (count=9)\n+  21:9 -> 21:23 (count=10)\n   23:5 -> 24:2 (count=0)\n Segment at 4:1 (count = 4), RegionEntry\n Segment at 4:36 (count = 0), Skipped\n@@ -36,18 +36,18 @@ Segment at 8:12 (count = 3), RegionEntry\n Segment at 11:2 (count = 0), Skipped\n Segment at 13:1 (count = 1), RegionEntry\n Segment at 14:27 (count = 0), Skipped\n-Segment at 15:11 (count = 10), RegionEntry\n+Segment at 15:11 (count = 11), RegionEntry\n Segment at 15:24 (count = 0), Skipped\n-Segment at 16:12 (count = 10), RegionEntry\n+Segment at 16:12 (count = 11), RegionEntry\n Segment at 16:26 (count = 0), Skipped\n-Segment at 16:27 (count = 0), RegionEntry\n+Segment at 16:27 (count = 1), RegionEntry\n Segment at 18:10 (count = 0), Skipped\n Segment at 18:19 (count = 10), RegionEntry\n Segment at 18:32 (count = 0), Skipped\n Segment at 18:33 (count = 3), RegionEntry\n Segment at 20:10 (count = 6), RegionEntry\n Segment at 20:11 (count = 0), Skipped\n-Segment at 21:9 (count = 9), RegionEntry\n+Segment at 21:9 (count = 10), RegionEntry\n Segment at 21:23 (count = 0), Skipped\n Segment at 23:5 (count = 0), RegionEntry\n Segment at 24:2 (count = 0), Skipped"}, {"sha": "95a767a8329ac7677b8b66e34bdc6aa7f4454dce", "filename": "src/test/rustdoc/rustc_deprecated-future.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftest%2Frustdoc%2Frustc_deprecated-future.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftest%2Frustdoc%2Frustc_deprecated-future.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Frustc_deprecated-future.rs?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -4,8 +4,16 @@\n \n // @has rustc_deprecated_future/index.html '//*[@class=\"stab deprecated\"]' \\\n //      'Deprecation planned'\n-// @has rustc_deprecated_future/struct.S.html '//*[@class=\"stab deprecated\"]' \\\n+// @has rustc_deprecated_future/struct.S1.html '//*[@class=\"stab deprecated\"]' \\\n //      'Deprecating in 99.99.99: effectively never'\n #[rustc_deprecated(since = \"99.99.99\", reason = \"effectively never\")]\n #[stable(feature = \"rustc_deprecated-future-test\", since = \"1.0.0\")]\n-pub struct S;\n+pub struct S1;\n+\n+// @has rustc_deprecated_future/index.html '//*[@class=\"stab deprecated\"]' \\\n+//      'Deprecation planned'\n+// @has rustc_deprecated_future/struct.S2.html '//*[@class=\"stab deprecated\"]' \\\n+//      'Deprecating in a future Rust version: literally never'\n+#[rustc_deprecated(since = \"TBD\", reason = \"literally never\")]\n+#[stable(feature = \"rustc_deprecated-future-test\", since = \"1.0.0\")]\n+pub struct S2;"}, {"sha": "11f7960b757860fa64952048c33ee454e9b0a5fa", "filename": "src/test/ui/deprecation/rustc_deprecation-in-future.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftest%2Fui%2Fdeprecation%2Frustc_deprecation-in-future.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftest%2Fui%2Fdeprecation%2Frustc_deprecation-in-future.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Frustc_deprecation-in-future.rs?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -8,8 +8,13 @@\n \n #[rustc_deprecated(since = \"99.99.99\", reason = \"effectively never\")]\n #[stable(feature = \"rustc_deprecation-in-future-test\", since = \"1.0.0\")]\n-pub struct S;\n+pub struct S1;\n+\n+#[rustc_deprecated(since = \"TBD\", reason = \"literally never\")]\n+#[stable(feature = \"rustc_deprecation-in-future-test\", since = \"1.0.0\")]\n+pub struct S2;\n \n fn main() {\n-    let _ = S; //~ ERROR use of unit struct `S` that will be deprecated in future version 99.99.99: effectively never\n+    let _ = S1; //~ ERROR use of unit struct `S1` that will be deprecated in future version 99.99.99: effectively never\n+    let _ = S2; //~ ERROR use of unit struct `S2` that will be deprecated in a future Rust version: literally never\n }"}, {"sha": "b5a7dd3c28daf78df0b83d4aa788bb9bbe09e89f", "filename": "src/test/ui/deprecation/rustc_deprecation-in-future.stderr", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftest%2Fui%2Fdeprecation%2Frustc_deprecation-in-future.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftest%2Fui%2Fdeprecation%2Frustc_deprecation-in-future.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Frustc_deprecation-in-future.stderr?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -1,14 +1,20 @@\n-error: use of unit struct `S` that will be deprecated in future version 99.99.99: effectively never\n-  --> $DIR/rustc_deprecation-in-future.rs:14:13\n+error: use of unit struct `S1` that will be deprecated in future version 99.99.99: effectively never\n+  --> $DIR/rustc_deprecation-in-future.rs:18:13\n    |\n-LL |     let _ = S;\n-   |             ^\n+LL |     let _ = S1;\n+   |             ^^\n    |\n note: the lint level is defined here\n   --> $DIR/rustc_deprecation-in-future.rs:3:9\n    |\n LL | #![deny(deprecated_in_future)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: use of unit struct `S2` that will be deprecated in a future Rust version: literally never\n+  --> $DIR/rustc_deprecation-in-future.rs:19:13\n+   |\n+LL |     let _ = S2;\n+   |             ^^\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "5c10a7c781183e3ad7600e1499b1bebd8bbe016a", "filename": "src/test/ui/generator/yielding-in-match-guards.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftest%2Fui%2Fgenerator%2Fyielding-in-match-guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftest%2Fui%2Fgenerator%2Fyielding-in-match-guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyielding-in-match-guards.rs?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -10,6 +10,9 @@\n // Thus, `&'_ u8` should be included in type signature\n // of the underlying generator.\n \n+#![feature(if_let_guard)]\n+#![allow(incomplete_features)]\n+\n async fn f() -> u8 { 1 }\n async fn foo() -> [bool; 10] { [false; 10] }\n \n@@ -36,8 +39,16 @@ async fn i(x: u8) {\n     }\n }\n \n+async fn j(x: u8) {\n+    match x {\n+        y if let (1, 42) = (f().await, y) => (),\n+        _ => (),\n+    }\n+}\n+\n fn main() {\n     let _ = g(10);\n     let _ = h(9);\n     let _ = i(8);\n+    let _ = j(7);\n }"}, {"sha": "1b0687cfac3f680fe5f8e0886ca139593d552636", "filename": "src/test/ui/mir/issue-78496.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftest%2Fui%2Fmir%2Fissue-78496.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftest%2Fui%2Fmir%2Fissue-78496.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-78496.rs?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -0,0 +1,16 @@\n+// run-pass\n+// compile-flags: -Z mir-opt-level=2 -C opt-level=0\n+\n+// example from #78496\n+pub enum E<'a> {\n+    Empty,\n+    Some(&'a E<'a>),\n+}\n+\n+fn f(e: &E) -> u32 {\n+   if let E::Some(E::Some(_)) = e { 1 } else { 2 }\n+}\n+\n+fn main() {\n+   assert_eq!(f(&E::Empty), 2);\n+}"}, {"sha": "ada643c7ac041448e28816e3f18ff7845491af2f", "filename": "src/test/ui/no-std-macros.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftest%2Fui%2Fno-std-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftest%2Fui%2Fno-std-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-std-macros.rs?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -0,0 +1,13 @@\n+// compile-flags: --crate-type=lib\n+// check-pass\n+// issue #55482\n+#![no_std]\n+\n+macro_rules! foo {\n+    ($e:expr) => {\n+        $crate::core::assert!($e);\n+        $crate::core::assert_eq!($e, true);\n+    };\n+}\n+\n+pub fn foo() { foo!(true); }"}, {"sha": "4e2d70e3290ec44f0c5c53ff3a52400975b82ce4", "filename": "src/test/ui/rfc-2294-if-let-guard/bindings.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Fbindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Fbindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Fbindings.rs?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -0,0 +1,10 @@\n+#![feature(if_let_guard)]\n+#![allow(incomplete_features)]\n+\n+fn main() {\n+    match Some(None) {\n+        Some(x) if let Some(y) = x => (x, y),\n+        _ => y, //~ ERROR cannot find value `y`\n+    }\n+    y //~ ERROR cannot find value `y`\n+}"}, {"sha": "9c5d92a33ada725771dd41ba5c11405e0ec44926", "filename": "src/test/ui/rfc-2294-if-let-guard/bindings.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Fbindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Fbindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Fbindings.stderr?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -0,0 +1,15 @@\n+error[E0425]: cannot find value `y` in this scope\n+  --> $DIR/bindings.rs:7:14\n+   |\n+LL |         _ => y,\n+   |              ^ not found in this scope\n+\n+error[E0425]: cannot find value `y` in this scope\n+  --> $DIR/bindings.rs:9:5\n+   |\n+LL |     y\n+   |     ^ not found in this scope\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0425`."}, {"sha": "311d1afcfc0eefe90eee7e903470de6ee47b492c", "filename": "src/test/ui/rfc-2294-if-let-guard/feature-gate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.rs?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -6,7 +6,6 @@ fn _if_let_guard() {\n     match () {\n         () if let 0 = 1 => {}\n         //~^ ERROR `if let` guard is not implemented\n-        //~| ERROR `let` expressions are not supported here\n \n         () if (let 0 = 1) => {}\n         //~^ ERROR `let` expressions in this position are experimental"}, {"sha": "1670078e0d38b6f9ce64f03ba003c7c6096893a4", "filename": "src/test/ui/rfc-2294-if-let-guard/feature-gate.stderr", "status": "modified", "additions": 35, "deletions": 44, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.stderr?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -1,5 +1,5 @@\n error: no rules expected the token `let`\n-  --> $DIR/feature-gate.rs:81:15\n+  --> $DIR/feature-gate.rs:80:15\n    |\n LL |     macro_rules! use_expr {\n    |     --------------------- when calling this macro\n@@ -17,7 +17,7 @@ LL |         () if let 0 = 1 => {}\n    = help: add `#![feature(if_let_guard)]` to the crate attributes to enable\n \n error[E0658]: `if let` guard is not implemented\n-  --> $DIR/feature-gate.rs:77:12\n+  --> $DIR/feature-gate.rs:76:12\n    |\n LL |         () if let 0 = 1 => {}\n    |            ^^^^^^^^^^^^\n@@ -26,7 +26,7 @@ LL |         () if let 0 = 1 => {}\n    = help: add `#![feature(if_let_guard)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:11:16\n+  --> $DIR/feature-gate.rs:10:16\n    |\n LL |         () if (let 0 = 1) => {}\n    |                ^^^^^^^^^\n@@ -35,7 +35,7 @@ LL |         () if (let 0 = 1) => {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:15:18\n+  --> $DIR/feature-gate.rs:14:18\n    |\n LL |         () if (((let 0 = 1))) => {}\n    |                  ^^^^^^^^^\n@@ -44,7 +44,7 @@ LL |         () if (((let 0 = 1))) => {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:19:23\n+  --> $DIR/feature-gate.rs:18:23\n    |\n LL |         () if true && let 0 = 1 => {}\n    |                       ^^^^^^^^^\n@@ -53,7 +53,7 @@ LL |         () if true && let 0 = 1 => {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:23:15\n+  --> $DIR/feature-gate.rs:22:15\n    |\n LL |         () if let 0 = 1 && true => {}\n    |               ^^^^^^^^^\n@@ -62,7 +62,7 @@ LL |         () if let 0 = 1 && true => {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:27:16\n+  --> $DIR/feature-gate.rs:26:16\n    |\n LL |         () if (let 0 = 1) && true => {}\n    |                ^^^^^^^^^\n@@ -71,7 +71,7 @@ LL |         () if (let 0 = 1) && true => {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:31:24\n+  --> $DIR/feature-gate.rs:30:24\n    |\n LL |         () if true && (let 0 = 1) => {}\n    |                        ^^^^^^^^^\n@@ -80,7 +80,7 @@ LL |         () if true && (let 0 = 1) => {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:35:16\n+  --> $DIR/feature-gate.rs:34:16\n    |\n LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n    |                ^^^^^^^^^\n@@ -89,7 +89,7 @@ LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:35:31\n+  --> $DIR/feature-gate.rs:34:31\n    |\n LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n    |                               ^^^^^^^^^\n@@ -98,7 +98,7 @@ LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:41:15\n+  --> $DIR/feature-gate.rs:40:15\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |               ^^^^^^^^^\n@@ -107,7 +107,7 @@ LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 =\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:41:28\n+  --> $DIR/feature-gate.rs:40:28\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |                            ^^^^^^^^^\n@@ -116,7 +116,7 @@ LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 =\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:41:42\n+  --> $DIR/feature-gate.rs:40:42\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |                                          ^^^^^^^^^\n@@ -125,7 +125,7 @@ LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 =\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:41:55\n+  --> $DIR/feature-gate.rs:40:55\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |                                                       ^^^^^^^^^\n@@ -134,7 +134,7 @@ LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 =\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:41:68\n+  --> $DIR/feature-gate.rs:40:68\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |                                                                    ^^^^^^^^^\n@@ -143,7 +143,7 @@ LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 =\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:53:15\n+  --> $DIR/feature-gate.rs:52:15\n    |\n LL |         () if let Range { start: _, end: _ } = (true..true) && false => {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -152,7 +152,7 @@ LL |         () if let Range { start: _, end: _ } = (true..true) && false => {}\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:69:16\n+  --> $DIR/feature-gate.rs:68:16\n    |\n LL |     use_expr!((let 0 = 1 && 0 == 0));\n    |                ^^^^^^^^^\n@@ -161,7 +161,7 @@ LL |     use_expr!((let 0 = 1 && 0 == 0));\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error[E0658]: `let` expressions in this position are experimental\n-  --> $DIR/feature-gate.rs:72:16\n+  --> $DIR/feature-gate.rs:71:16\n    |\n LL |     use_expr!((let 0 = 1));\n    |                ^^^^^^^^^\n@@ -170,16 +170,7 @@ LL |     use_expr!((let 0 = 1));\n    = help: add `#![feature(let_chains)]` to the crate attributes to enable\n \n error: `let` expressions are not supported here\n-  --> $DIR/feature-gate.rs:7:15\n-   |\n-LL |         () if let 0 = 1 => {}\n-   |               ^^^^^^^^^\n-   |\n-   = note: only supported directly in conditions of `if`- and `while`-expressions\n-   = note: as well as when nested within `&&` and parenthesis in those conditions\n-\n-error: `let` expressions are not supported here\n-  --> $DIR/feature-gate.rs:11:16\n+  --> $DIR/feature-gate.rs:10:16\n    |\n LL |         () if (let 0 = 1) => {}\n    |                ^^^^^^^^^\n@@ -188,7 +179,7 @@ LL |         () if (let 0 = 1) => {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/feature-gate.rs:15:18\n+  --> $DIR/feature-gate.rs:14:18\n    |\n LL |         () if (((let 0 = 1))) => {}\n    |                  ^^^^^^^^^\n@@ -197,7 +188,7 @@ LL |         () if (((let 0 = 1))) => {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/feature-gate.rs:19:23\n+  --> $DIR/feature-gate.rs:18:23\n    |\n LL |         () if true && let 0 = 1 => {}\n    |                       ^^^^^^^^^\n@@ -206,7 +197,7 @@ LL |         () if true && let 0 = 1 => {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/feature-gate.rs:23:15\n+  --> $DIR/feature-gate.rs:22:15\n    |\n LL |         () if let 0 = 1 && true => {}\n    |               ^^^^^^^^^\n@@ -215,7 +206,7 @@ LL |         () if let 0 = 1 && true => {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/feature-gate.rs:27:16\n+  --> $DIR/feature-gate.rs:26:16\n    |\n LL |         () if (let 0 = 1) && true => {}\n    |                ^^^^^^^^^\n@@ -224,7 +215,7 @@ LL |         () if (let 0 = 1) && true => {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/feature-gate.rs:31:24\n+  --> $DIR/feature-gate.rs:30:24\n    |\n LL |         () if true && (let 0 = 1) => {}\n    |                        ^^^^^^^^^\n@@ -233,7 +224,7 @@ LL |         () if true && (let 0 = 1) => {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/feature-gate.rs:35:16\n+  --> $DIR/feature-gate.rs:34:16\n    |\n LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n    |                ^^^^^^^^^\n@@ -242,7 +233,7 @@ LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/feature-gate.rs:35:31\n+  --> $DIR/feature-gate.rs:34:31\n    |\n LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n    |                               ^^^^^^^^^\n@@ -251,7 +242,7 @@ LL |         () if (let 0 = 1) && (let 0 = 1) => {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/feature-gate.rs:41:15\n+  --> $DIR/feature-gate.rs:40:15\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |               ^^^^^^^^^\n@@ -260,7 +251,7 @@ LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 =\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/feature-gate.rs:41:28\n+  --> $DIR/feature-gate.rs:40:28\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |                            ^^^^^^^^^\n@@ -269,7 +260,7 @@ LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 =\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/feature-gate.rs:41:42\n+  --> $DIR/feature-gate.rs:40:42\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |                                          ^^^^^^^^^\n@@ -278,7 +269,7 @@ LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 =\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/feature-gate.rs:41:55\n+  --> $DIR/feature-gate.rs:40:55\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |                                                       ^^^^^^^^^\n@@ -287,7 +278,7 @@ LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 =\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/feature-gate.rs:41:68\n+  --> $DIR/feature-gate.rs:40:68\n    |\n LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) => {}\n    |                                                                    ^^^^^^^^^\n@@ -296,7 +287,7 @@ LL |         () if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 =\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/feature-gate.rs:53:15\n+  --> $DIR/feature-gate.rs:52:15\n    |\n LL |         () if let Range { start: _, end: _ } = (true..true) && false => {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -305,7 +296,7 @@ LL |         () if let Range { start: _, end: _ } = (true..true) && false => {}\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/feature-gate.rs:69:16\n+  --> $DIR/feature-gate.rs:68:16\n    |\n LL |     use_expr!((let 0 = 1 && 0 == 0));\n    |                ^^^^^^^^^\n@@ -314,14 +305,14 @@ LL |     use_expr!((let 0 = 1 && 0 == 0));\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n error: `let` expressions are not supported here\n-  --> $DIR/feature-gate.rs:72:16\n+  --> $DIR/feature-gate.rs:71:16\n    |\n LL |     use_expr!((let 0 = 1));\n    |                ^^^^^^^^^\n    |\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n-error: aborting due to 36 previous errors\n+error: aborting due to 35 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "a3663003790f7eeda51368eaddfe0076edf44dc0", "filename": "src/test/ui/rfc-2294-if-let-guard/run-pass.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Frun-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Frun-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Frun-pass.rs?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -0,0 +1,34 @@\n+// run-pass\n+\n+#![feature(if_let_guard)]\n+#![allow(incomplete_features)]\n+\n+enum Foo {\n+    Bar,\n+    Baz,\n+    Qux(u8),\n+}\n+\n+fn bar(x: bool) -> Foo {\n+    if x { Foo::Baz } else { Foo::Bar }\n+}\n+\n+fn baz(x: u8) -> Foo {\n+    if x % 2 == 0 { Foo::Bar } else { Foo::Baz }\n+}\n+\n+fn qux(x: u8) -> Foo {\n+    Foo::Qux(x.rotate_left(1))\n+}\n+\n+fn main() {\n+    match Some((true, 3)) {\n+        Some((x, _)) if let Foo::Bar = bar(x) => panic!(),\n+        Some((_, x)) if let Foo::Baz = baz(x) => {},\n+        _ => panic!(),\n+    }\n+    match Some(42) {\n+        Some(x) if let Foo::Qux(y) = qux(x) => assert_eq!(y, 84),\n+        _ => panic!(),\n+    }\n+}"}, {"sha": "a4fc7f8cf2b263a4fff22f6824af6eab4402b2b6", "filename": "src/test/ui/rfc-2294-if-let-guard/typeck.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ftypeck.rs?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -0,0 +1,16 @@\n+#![feature(if_let_guard)]\n+#![allow(incomplete_features)]\n+\n+fn ok() -> Result<Option<bool>, ()> {\n+    Ok(Some(true))\n+}\n+\n+fn main() {\n+    match ok() {\n+        Ok(x) if let Err(_) = x => {},\n+        //~^ ERROR mismatched types\n+        Ok(x) if let 0 = x => {},\n+        //~^ ERROR mismatched types\n+        _ => {}\n+    }\n+}"}, {"sha": "7ce93fe7348fd8d84805d052df99622897775028", "filename": "src/test/ui/rfc-2294-if-let-guard/typeck.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ftypeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ftypeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ftypeck.stderr?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -0,0 +1,21 @@\n+error[E0308]: mismatched types\n+  --> $DIR/typeck.rs:10:22\n+   |\n+LL |         Ok(x) if let Err(_) = x => {},\n+   |                      ^^^^^^ expected enum `Option`, found enum `std::result::Result`\n+   |\n+   = note: expected enum `Option<bool>`\n+              found enum `std::result::Result<_, _>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/typeck.rs:12:22\n+   |\n+LL |         Ok(x) if let 0 = x => {},\n+   |                      ^ expected enum `Option`, found integer\n+   |\n+   = note: expected enum `Option<bool>`\n+              found type `{integer}`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "9691a12f45b05f584228a4c56a775d30736b583a", "filename": "src/test/ui/rfc-2294-if-let-guard/warns.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Fwarns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Fwarns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Fwarns.rs?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -0,0 +1,22 @@\n+#![feature(if_let_guard)]\n+#![allow(incomplete_features)]\n+\n+#[deny(irrefutable_let_patterns)]\n+fn irrefutable_let_guard() {\n+    match Some(()) {\n+        Some(x) if let () = x => {}\n+        //~^ ERROR irrefutable if-let guard\n+        _ => {}\n+    }\n+}\n+\n+#[deny(unreachable_patterns)]\n+fn unreachable_pattern() {\n+    match Some(()) {\n+        x if let None | None = x => {}\n+        //~^ ERROR unreachable pattern\n+        _ => {}\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "45720f9fbc5515ae9441b62e001f540be1af48c1", "filename": "src/test/ui/rfc-2294-if-let-guard/warns.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Fwarns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Fwarns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Fwarns.stderr?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -0,0 +1,26 @@\n+error: irrefutable if-let guard\n+  --> $DIR/warns.rs:7:24\n+   |\n+LL |         Some(x) if let () = x => {}\n+   |                        ^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/warns.rs:4:8\n+   |\n+LL | #[deny(irrefutable_let_patterns)]\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: unreachable pattern\n+  --> $DIR/warns.rs:16:25\n+   |\n+LL |         x if let None | None = x => {}\n+   |                         ^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/warns.rs:13:8\n+   |\n+LL | #[deny(unreachable_patterns)]\n+   |        ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "0c40f8ae1c67ea3b6a9c95df9d5f30196d9b2c41", "filename": "src/test/ui/stability-attribute/stability-attribute-sanity.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.rs?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -63,7 +63,11 @@ fn multiple3() { }\n #[rustc_const_unstable(feature = \"c\", issue = \"none\")]\n #[rustc_const_unstable(feature = \"d\", issue = \"none\")] //~ ERROR multiple stability levels\n pub const fn multiple4() { }\n-//~^ ERROR Invalid stability or deprecation version found\n+//~^ ERROR Invalid stability version found\n+\n+#[stable(feature = \"a\", since = \"1.0.0\")]\n+#[rustc_deprecated(since = \"invalid\", reason = \"text\")]\n+fn invalid_deprecation_version() {} //~ ERROR Invalid deprecation version found\n \n #[rustc_deprecated(since = \"a\", reason = \"text\")]\n fn deprecated_without_unstable_or_stable() { }"}, {"sha": "ee9a93359f0329aebe01f036c5c559adde49d83e", "filename": "src/test/ui/stability-attribute/stability-attribute-sanity.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.stderr?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -96,19 +96,25 @@ error[E0544]: multiple stability levels\n LL | #[rustc_const_unstable(feature = \"d\", issue = \"none\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: Invalid stability or deprecation version found\n+error: Invalid stability version found\n   --> $DIR/stability-attribute-sanity.rs:65:1\n    |\n LL | pub const fn multiple4() { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: Invalid deprecation version found\n+  --> $DIR/stability-attribute-sanity.rs:70:1\n+   |\n+LL | fn invalid_deprecation_version() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error[E0549]: rustc_deprecated attribute must be paired with either stable or unstable attribute\n-  --> $DIR/stability-attribute-sanity.rs:68:1\n+  --> $DIR/stability-attribute-sanity.rs:72:1\n    |\n LL | #[rustc_deprecated(since = \"a\", reason = \"text\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 18 previous errors\n+error: aborting due to 19 previous errors\n \n Some errors have detailed explanations: E0539, E0541, E0546, E0550.\n For more information about an error, try `rustc --explain E0539`."}, {"sha": "f839659267825b8c1f686f4f0621a3ce9a3d7e2c", "filename": "src/tools/clippy/clippy_lints/src/shadow.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fshadow.rs?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -342,6 +342,10 @@ fn check_expr<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, bindings: &mut\n                 if let Some(ref guard) = arm.guard {\n                     match guard {\n                         Guard::If(if_expr) => check_expr(cx, if_expr, bindings),\n+                        Guard::IfLet(guard_pat, guard_expr) => {\n+                            check_pat(cx, guard_pat, Some(*guard_expr), guard_pat.span, bindings);\n+                            check_expr(cx, guard_expr, bindings);\n+                        },\n                     }\n                 }\n                 check_expr(cx, &arm.body, bindings);"}, {"sha": "4249dbb4e65190d65b8674e3f59bf1d8829c9a36", "filename": "src/tools/clippy/clippy_lints/src/utils/author.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -372,6 +372,18 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n                                 self.current = if_expr_pat;\n                                 self.visit_expr(if_expr);\n                             },\n+                            hir::Guard::IfLet(ref if_let_pat, ref if_let_expr) => {\n+                                let if_let_pat_pat = self.next(\"pat\");\n+                                let if_let_expr_pat = self.next(\"expr\");\n+                                println!(\n+                                    \"    if let Guard::IfLet(ref {}, ref {}) = {};\",\n+                                    if_let_pat_pat, if_let_expr_pat, guard_pat\n+                                );\n+                                self.current = if_let_expr_pat;\n+                                self.visit_expr(if_let_expr);\n+                                self.current = if_let_pat_pat;\n+                                self.visit_pat(if_let_pat);\n+                            },\n                         }\n                     }\n                     self.current = format!(\"{}[{}].pat\", arms_pat, i);\n@@ -730,6 +742,7 @@ fn desugaring_name(des: hir::MatchSource) -> String {\n             \"MatchSource::IfLetDesugar {{ contains_else_clause: {} }}\",\n             contains_else_clause\n         ),\n+        hir::MatchSource::IfLetGuardDesugar => \"MatchSource::IfLetGuardDesugar\".to_string(),\n         hir::MatchSource::IfDesugar { contains_else_clause } => format!(\n             \"MatchSource::IfDesugar {{ contains_else_clause: {} }}\",\n             contains_else_clause"}, {"sha": "a8fbb2ffaf0b40558babcbe096c291ff78966b11", "filename": "src/tools/clippy/clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -169,6 +169,8 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n     fn eq_guard(&mut self, left: &Guard<'_>, right: &Guard<'_>) -> bool {\n         match (left, right) {\n             (Guard::If(l), Guard::If(r)) => self.eq_expr(l, r),\n+            (Guard::IfLet(lp, le), Guard::IfLet(rp, re)) => self.eq_pat(lp, rp) && self.eq_expr(le, re),\n+            _ => false,\n         }\n     }\n \n@@ -669,7 +671,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n \n     pub fn hash_guard(&mut self, g: &Guard<'_>) {\n         match g {\n-            Guard::If(ref expr) => {\n+            Guard::If(ref expr) | Guard::IfLet(_, ref expr) => {\n                 self.hash_expr(expr);\n             },\n         }"}, {"sha": "5d946e4bd495d9abbb6e1fcdf439c3b4187dba07", "filename": "src/tools/clippy/clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -560,5 +560,10 @@ fn print_guard(cx: &LateContext<'_>, guard: &hir::Guard<'_>, indent: usize) {\n             println!(\"{}If\", ind);\n             print_expr(cx, expr, indent + 1);\n         },\n+        hir::Guard::IfLet(pat, expr) => {\n+            println!(\"{}IfLet\", ind);\n+            print_pat(cx, pat, indent + 1);\n+            print_expr(cx, expr, indent + 1);\n+        },\n     }\n }"}, {"sha": "f8cf18a9309ecdfb4487c399ff2f7b6a128c9ffa", "filename": "src/tools/expand-yaml-anchors/src/main.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftools%2Fexpand-yaml-anchors%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2/src%2Ftools%2Fexpand-yaml-anchors%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fexpand-yaml-anchors%2Fsrc%2Fmain.rs?ref=9b84d36a0b9ea3bf305f36f08d50aa42c26f96c2", "patch": "@@ -87,7 +87,8 @@ impl App {\n         let content = std::fs::read_to_string(source)\n             .with_context(|| format!(\"failed to read {}\", self.path(source)))?;\n \n-        let mut buf = HEADER_MESSAGE.replace(\"{source}\", &self.path(source).to_string());\n+        let mut buf =\n+            HEADER_MESSAGE.replace(\"{source}\", &self.path(source).to_string().replace(\"\\\\\", \"/\"));\n \n         let documents = YamlLoader::load_from_str(&content)\n             .with_context(|| format!(\"failed to parse {}\", self.path(source)))?;"}]}