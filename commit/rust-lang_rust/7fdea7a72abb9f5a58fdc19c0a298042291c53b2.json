{"sha": "7fdea7a72abb9f5a58fdc19c0a298042291c53b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmZGVhN2E3MmFiYjlmNWE1OGZkYzE5YzBhMjk4MDQyMjkxYzUzYjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-24T06:41:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-24T06:41:15Z"}, "message": "Auto merge of #64316 - alexcrichton:cleanup-shim, r=Mark-Simulacrum\n\nDelete most of `src/bootstrap/bin/rustc.rs`\n\nThis commit is an attempt at deleting as much of the `rustc.rs` shim that we have in rustbuild as possible.  This shim predates `RUSTFLAGS` and is as old as rustbuild itself. While useful for quick hacks, it subverts Cargo's knowledge of `rustc`, makes it more difficult to build crates out of rustbuild, and is generally a hazard/code smell due to its architecture.\n\nAdditionally since the inception of this script we've added a number of features to Cargo such as profile overrides and `RUSTFLAGS`. This commit attempts to use these features of Cargo as much as possible to delete almost all of `src/bootstrap/bin/rustc.rs`. It's hoped that all new configuration for the Rust compiler can be codified in rustbuild rather than in this shim, allowing Cargo to have more knowledge about what's going on and making it a bit easier to reproduce builds outside of Cargo itself.\n\nThis was primarily motivated by some recent work on std-aware Cargo, and is also generally a cleanup of the script itself. This internally resulted in a number of refactorings of rustbuild itself, and the commits should be readable one-at-a-time instead of having to digest them all at once.", "tree": {"sha": "919b4028590aae9fa4246fb247a88902d181314d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/919b4028590aae9fa4246fb247a88902d181314d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7fdea7a72abb9f5a58fdc19c0a298042291c53b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7fdea7a72abb9f5a58fdc19c0a298042291c53b2", "html_url": "https://github.com/rust-lang/rust/commit/7fdea7a72abb9f5a58fdc19c0a298042291c53b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66bf391c3aabfc77f5f7139fc9e6944f995d574e", "url": "https://api.github.com/repos/rust-lang/rust/commits/66bf391c3aabfc77f5f7139fc9e6944f995d574e", "html_url": "https://github.com/rust-lang/rust/commit/66bf391c3aabfc77f5f7139fc9e6944f995d574e"}, {"sha": "1a8897fd8a988cc3c81b7cb985005d6cf836116c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a8897fd8a988cc3c81b7cb985005d6cf836116c", "html_url": "https://github.com/rust-lang/rust/commit/1a8897fd8a988cc3c81b7cb985005d6cf836116c"}], "stats": {"total": 719, "additions": 352, "deletions": 367}, "files": [{"sha": "5bc1938fee260a4445ceba8a63101218a59972d4", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=7fdea7a72abb9f5a58fdc19c0a298042291c53b2", "patch": "@@ -597,7 +597,6 @@ version = \"0.28.0\"\n dependencies = [\n  \"curl\",\n  \"failure\",\n- \"http\",\n  \"percent-encoding 2.0.0\",\n  \"serde\",\n  \"serde_derive\","}, {"sha": "475f2e904639c54fb75755228fd041b86f11156d", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 8, "deletions": 174, "changes": 182, "blob_url": "https://github.com/rust-lang/rust/blob/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=7fdea7a72abb9f5a58fdc19c0a298042291c53b2", "patch": "@@ -16,31 +16,14 @@\n //! never get replaced.\n \n use std::env;\n-use std::ffi::OsString;\n use std::io;\n use std::path::PathBuf;\n use std::process::Command;\n use std::str::FromStr;\n use std::time::Instant;\n \n fn main() {\n-    let mut args = env::args_os().skip(1).collect::<Vec<_>>();\n-\n-    // Append metadata suffix for internal crates. See the corresponding entry\n-    // in bootstrap/lib.rs for details.\n-    if let Ok(s) = env::var(\"RUSTC_METADATA_SUFFIX\") {\n-        for i in 1..args.len() {\n-            // Dirty code for borrowing issues\n-            let mut new = None;\n-            if let Some(current_as_str) = args[i].to_str() {\n-                if (&*args[i - 1] == \"-C\" && current_as_str.starts_with(\"metadata\")) ||\n-                    current_as_str.starts_with(\"-Cmetadata\") {\n-                    new = Some(format!(\"{}-{}\", current_as_str, s));\n-                }\n-            }\n-            if let Some(new) = new { args[i] = new.into(); }\n-        }\n-    }\n+    let args = env::args_os().skip(1).collect::<Vec<_>>();\n \n     // Detect whether or not we're a build script depending on whether --target\n     // is passed (a bit janky...)\n@@ -93,92 +76,19 @@ fn main() {\n         }\n     }\n \n-    // Non-zero stages must all be treated uniformly to avoid problems when attempting to uplift\n-    // compiler libraries and such from stage 1 to 2.\n-    //\n-    // FIXME: the fact that core here is excluded is due to core_arch from our stdarch submodule\n-    // being broken on the beta compiler with bootstrap passed, so this is a temporary workaround\n-    // (we've just snapped, so there are no cfg(bootstrap) related annotations in core).\n-    if stage == \"0\" {\n-        if crate_name != Some(\"core\") {\n-            cmd.arg(\"--cfg\").arg(\"bootstrap\");\n-        } else {\n-            // NOTE(eddyb) see FIXME above, except now we need annotations again in core.\n-            cmd.arg(\"--cfg\").arg(\"boostrap_stdarch_ignore_this\");\n-        }\n-    }\n-\n     // Print backtrace in case of ICE\n     if env::var(\"RUSTC_BACKTRACE_ON_ICE\").is_ok() && env::var(\"RUST_BACKTRACE\").is_err() {\n         cmd.env(\"RUST_BACKTRACE\", \"1\");\n     }\n \n-    cmd.env(\"RUSTC_BREAK_ON_ICE\", \"1\");\n-\n-    if let Ok(debuginfo_level) = env::var(\"RUSTC_DEBUGINFO_LEVEL\") {\n-        cmd.arg(format!(\"-Cdebuginfo={}\", debuginfo_level));\n-    }\n-\n-    if env::var_os(\"RUSTC_EXTERNAL_TOOL\").is_none() {\n-        // When extending this list, add the new lints to the RUSTFLAGS of the\n-        // build_bootstrap function of src/bootstrap/bootstrap.py as well as\n-        // some code doesn't go through this `rustc` wrapper.\n-        cmd.arg(\"-Wrust_2018_idioms\");\n-        cmd.arg(\"-Wunused_lifetimes\");\n-        if use_internal_lints(crate_name) {\n-            cmd.arg(\"-Zunstable-options\");\n-            cmd.arg(\"-Wrustc::internal\");\n-        }\n-        if env::var_os(\"RUSTC_DENY_WARNINGS\").is_some() {\n-            cmd.arg(\"-Dwarnings\");\n-        }\n-    }\n-\n-    if let Some(target) = target {\n+    if target.is_some() {\n         // The stage0 compiler has a special sysroot distinct from what we\n         // actually downloaded, so we just always pass the `--sysroot` option,\n         // unless one is already set.\n         if !args.iter().any(|arg| arg == \"--sysroot\") {\n             cmd.arg(\"--sysroot\").arg(&sysroot);\n         }\n \n-        cmd.arg(\"-Zexternal-macro-backtrace\");\n-\n-        // Link crates to the proc macro crate for the target, but use a host proc macro crate\n-        // to actually run the macros\n-        if env::var_os(\"RUST_DUAL_PROC_MACROS\").is_some() {\n-            cmd.arg(\"-Zdual-proc-macros\");\n-        }\n-\n-        // When we build Rust dylibs they're all intended for intermediate\n-        // usage, so make sure we pass the -Cprefer-dynamic flag instead of\n-        // linking all deps statically into the dylib.\n-        if env::var_os(\"RUSTC_NO_PREFER_DYNAMIC\").is_none() {\n-            cmd.arg(\"-Cprefer-dynamic\");\n-        }\n-\n-        // Help the libc crate compile by assisting it in finding various\n-        // sysroot native libraries.\n-        if let Some(s) = env::var_os(\"MUSL_ROOT\") {\n-            if target.contains(\"musl\") {\n-                let mut root = OsString::from(\"native=\");\n-                root.push(&s);\n-                root.push(\"/lib\");\n-                cmd.arg(\"-L\").arg(&root);\n-            }\n-        }\n-        if let Some(s) = env::var_os(\"WASI_ROOT\") {\n-            let mut root = OsString::from(\"native=\");\n-            root.push(&s);\n-            root.push(\"/lib/wasm32-wasi\");\n-            cmd.arg(\"-L\").arg(&root);\n-        }\n-\n-        // Override linker if necessary.\n-        if let Ok(target_linker) = env::var(\"RUSTC_TARGET_LINKER\") {\n-            cmd.arg(format!(\"-Clinker={}\", target_linker));\n-        }\n-\n         // If we're compiling specifically the `panic_abort` crate then we pass\n         // the `-C panic=abort` option. Note that we do not do this for any\n         // other crate intentionally as this is the only crate for now that we\n@@ -205,82 +115,18 @@ fn main() {\n \n         // The compiler builtins are pretty sensitive to symbols referenced in\n         // libcore and such, so we never compile them with debug assertions.\n+        //\n+        // FIXME(rust-lang/cargo#7253) we should be doing this in `builder.rs`\n+        // with env vars instead of doing it here in this script.\n         if crate_name == Some(\"compiler_builtins\") {\n             cmd.arg(\"-C\").arg(\"debug-assertions=no\");\n         } else {\n             cmd.arg(\"-C\").arg(format!(\"debug-assertions={}\", debug_assertions));\n         }\n-\n-        if let Ok(s) = env::var(\"RUSTC_CODEGEN_UNITS\") {\n-            cmd.arg(\"-C\").arg(format!(\"codegen-units={}\", s));\n-        }\n-\n-        // Emit save-analysis info.\n-        if env::var(\"RUSTC_SAVE_ANALYSIS\") == Ok(\"api\".to_string()) {\n-            cmd.arg(\"-Zsave-analysis\");\n-            cmd.env(\"RUST_SAVE_ANALYSIS_CONFIG\",\n-                    \"{\\\"output_file\\\": null,\\\"full_docs\\\": false,\\\n-                     \\\"pub_only\\\": true,\\\"reachable_only\\\": false,\\\n-                     \\\"distro_crate\\\": true,\\\"signatures\\\": false,\\\"borrow_data\\\": false}\");\n-        }\n-\n-        // Dealing with rpath here is a little special, so let's go into some\n-        // detail. First off, `-rpath` is a linker option on Unix platforms\n-        // which adds to the runtime dynamic loader path when looking for\n-        // dynamic libraries. We use this by default on Unix platforms to ensure\n-        // that our nightlies behave the same on Windows, that is they work out\n-        // of the box. This can be disabled, of course, but basically that's why\n-        // we're gated on RUSTC_RPATH here.\n-        //\n-        // Ok, so the astute might be wondering \"why isn't `-C rpath` used\n-        // here?\" and that is indeed a good question to task. This codegen\n-        // option is the compiler's current interface to generating an rpath.\n-        // Unfortunately it doesn't quite suffice for us. The flag currently\n-        // takes no value as an argument, so the compiler calculates what it\n-        // should pass to the linker as `-rpath`. This unfortunately is based on\n-        // the **compile time** directory structure which when building with\n-        // Cargo will be very different than the runtime directory structure.\n-        //\n-        // All that's a really long winded way of saying that if we use\n-        // `-Crpath` then the executables generated have the wrong rpath of\n-        // something like `$ORIGIN/deps` when in fact the way we distribute\n-        // rustc requires the rpath to be `$ORIGIN/../lib`.\n-        //\n-        // So, all in all, to set up the correct rpath we pass the linker\n-        // argument manually via `-C link-args=-Wl,-rpath,...`. Plus isn't it\n-        // fun to pass a flag to a tool to pass a flag to pass a flag to a tool\n-        // to change a flag in a binary?\n-        if env::var(\"RUSTC_RPATH\") == Ok(\"true\".to_string()) {\n-            let rpath = if target.contains(\"apple\") {\n-\n-                // Note that we need to take one extra step on macOS to also pass\n-                // `-Wl,-instal_name,@rpath/...` to get things to work right. To\n-                // do that we pass a weird flag to the compiler to get it to do\n-                // so. Note that this is definitely a hack, and we should likely\n-                // flesh out rpath support more fully in the future.\n-                cmd.arg(\"-Z\").arg(\"osx-rpath-install-name\");\n-                Some(\"-Wl,-rpath,@loader_path/../lib\")\n-            } else if !target.contains(\"windows\") &&\n-                      !target.contains(\"wasm32\") &&\n-                      !target.contains(\"fuchsia\") {\n-                Some(\"-Wl,-rpath,$ORIGIN/../lib\")\n-            } else {\n-                None\n-            };\n-            if let Some(rpath) = rpath {\n-                cmd.arg(\"-C\").arg(format!(\"link-args={}\", rpath));\n-            }\n-        }\n-\n-        if let Ok(s) = env::var(\"RUSTC_CRT_STATIC\") {\n-            if s == \"true\" {\n-                cmd.arg(\"-C\").arg(\"target-feature=+crt-static\");\n-            }\n-            if s == \"false\" {\n-                cmd.arg(\"-C\").arg(\"target-feature=-crt-static\");\n-            }\n-        }\n     } else {\n+        // FIXME(rust-lang/cargo#5754) we shouldn't be using special env vars\n+        // here, but rather Cargo should know what flags to pass rustc itself.\n+\n         // Override linker if necessary.\n         if let Ok(host_linker) = env::var(\"RUSTC_HOST_LINKER\") {\n             cmd.arg(format!(\"-Clinker={}\", host_linker));\n@@ -308,10 +154,6 @@ fn main() {\n         cmd.arg(\"-Z\").arg(\"force-unstable-if-unmarked\");\n     }\n \n-    if env::var_os(\"RUSTC_PARALLEL_COMPILER\").is_some() {\n-        cmd.arg(\"--cfg\").arg(\"parallel_compiler\");\n-    }\n-\n     if verbose > 1 {\n         eprintln!(\n             \"rustc command: {:?}={:?} {:?}\",\n@@ -362,14 +204,6 @@ fn main() {\n     std::process::exit(code);\n }\n \n-// Rustc crates for which internal lints are in effect.\n-fn use_internal_lints(crate_name: Option<&str>) -> bool {\n-    crate_name.map_or(false, |crate_name| {\n-        crate_name.starts_with(\"rustc\") || crate_name.starts_with(\"syntax\") ||\n-        [\"arena\", \"fmt_macros\"].contains(&crate_name)\n-    })\n-}\n-\n #[cfg(unix)]\n fn exec_cmd(cmd: &mut Command) -> io::Result<i32> {\n     use std::os::unix::process::CommandExt;"}, {"sha": "5d586f0c461dbd722c1d3d9aec881049c2a5b0d5", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 200, "deletions": 63, "changes": 263, "blob_url": "https://github.com/rust-lang/rust/blob/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=7fdea7a72abb9f5a58fdc19c0a298042291c53b2", "patch": "@@ -3,6 +3,7 @@ use std::cell::{Cell, RefCell};\n use std::collections::BTreeSet;\n use std::collections::HashMap;\n use std::env;\n+use std::ffi::OsStr;\n use std::fmt::Debug;\n use std::fs;\n use std::hash::Hash;\n@@ -682,15 +683,15 @@ impl<'a> Builder<'a> {\n \n     /// Adds the compiler's directory of dynamic libraries to `cmd`'s dynamic\n     /// library lookup path.\n-    pub fn add_rustc_lib_path(&self, compiler: Compiler, cmd: &mut Command) {\n+    pub fn add_rustc_lib_path(&self, compiler: Compiler, cmd: &mut Cargo) {\n         // Windows doesn't need dylib path munging because the dlls for the\n         // compiler live next to the compiler and the system will find them\n         // automatically.\n         if cfg!(windows) {\n             return;\n         }\n \n-        add_lib_path(vec![self.rustc_libdir(compiler)], cmd);\n+        add_lib_path(vec![self.rustc_libdir(compiler)], &mut cmd.command);\n     }\n \n     /// Gets a path to the compiler specified.\n@@ -752,7 +753,7 @@ impl<'a> Builder<'a> {\n         mode: Mode,\n         target: Interned<String>,\n         cmd: &str,\n-    ) -> Command {\n+    ) -> Cargo {\n         let mut cargo = Command::new(&self.initial_cargo);\n         let out_dir = self.stage_out(compiler, mode);\n \n@@ -774,7 +775,17 @@ impl<'a> Builder<'a> {\n \n         cargo\n             .env(\"CARGO_TARGET_DIR\", out_dir)\n-            .arg(cmd);\n+            .arg(cmd)\n+            .arg(\"-Zconfig-profile\");\n+\n+        let profile_var = |name: &str| {\n+            let profile = if self.config.rust_optimize {\n+                \"RELEASE\"\n+            } else {\n+                \"DEV\"\n+            };\n+            format!(\"CARGO_PROFILE_{}_{}\", profile, name)\n+        };\n \n         // See comment in librustc_llvm/build.rs for why this is necessary, largely llvm-config\n         // needs to not accidentally link to libLLVM in stage0/lib.\n@@ -796,13 +807,29 @@ impl<'a> Builder<'a> {\n             cargo.env(\"RUST_CHECK\", \"1\");\n         }\n \n+        let stage;\n+        if compiler.stage == 0 && self.local_rebuild {\n+            // Assume the local-rebuild rustc already has stage1 features.\n+            stage = 1;\n+        } else {\n+            stage = compiler.stage;\n+        }\n+\n+        let mut rustflags = Rustflags::new(&target);\n+        if stage != 0 {\n+            rustflags.env(\"RUSTFLAGS_NOT_BOOTSTRAP\");\n+        } else {\n+            rustflags.env(\"RUSTFLAGS_BOOTSTRAP\");\n+            rustflags.arg(\"--cfg=bootstrap\");\n+        }\n+\n         match mode {\n             Mode::Std | Mode::ToolBootstrap | Mode::ToolStd => {},\n             Mode::Rustc | Mode::Codegen | Mode::ToolRustc => {\n                 // Build proc macros both for the host and the target\n                 if target != compiler.host && cmd != \"check\" {\n                     cargo.arg(\"-Zdual-proc-macros\");\n-                    cargo.env(\"RUST_DUAL_PROC_MACROS\", \"1\");\n+                    rustflags.arg(\"-Zdual-proc-macros\");\n                 }\n             },\n         }\n@@ -852,37 +879,11 @@ impl<'a> Builder<'a> {\n         }\n         cargo.env(\"__CARGO_DEFAULT_LIB_METADATA\", &metadata);\n \n-        let stage;\n-        if compiler.stage == 0 && self.local_rebuild {\n-            // Assume the local-rebuild rustc already has stage1 features.\n-            stage = 1;\n-        } else {\n-            stage = compiler.stage;\n-        }\n-\n-        let mut extra_args = String::new();\n-        if stage != 0 {\n-            let s = env::var(\"RUSTFLAGS_NOT_BOOTSTRAP\").unwrap_or_default();\n-            extra_args.push_str(&s);\n-        } else {\n-            let s = env::var(\"RUSTFLAGS_BOOTSTRAP\").unwrap_or_default();\n-            extra_args.push_str(&s);\n-        }\n-\n         if cmd == \"clippy\" {\n-            extra_args.push_str(\"-Zforce-unstable-if-unmarked\");\n+            rustflags.arg(\"-Zforce-unstable-if-unmarked\");\n         }\n \n-        if !extra_args.is_empty() {\n-            cargo.env(\n-                \"RUSTFLAGS\",\n-                format!(\n-                    \"{} {}\",\n-                    env::var(\"RUSTFLAGS\").unwrap_or_default(),\n-                    extra_args\n-                ),\n-            );\n-        }\n+        rustflags.arg(\"-Zexternal-macro-backtrace\");\n \n         let want_rustdoc = self.doc_tests != DocTests::No;\n \n@@ -919,7 +920,6 @@ impl<'a> Builder<'a> {\n             )\n             .env(\"RUSTC_SYSROOT\", &sysroot)\n             .env(\"RUSTC_LIBDIR\", &libdir)\n-            .env(\"RUSTC_RPATH\", self.config.rust_rpath.to_string())\n             .env(\"RUSTDOC\", self.out.join(\"bootstrap/debug/rustdoc\"))\n             .env(\n                 \"RUSTDOC_REAL\",\n@@ -929,13 +929,63 @@ impl<'a> Builder<'a> {\n                     PathBuf::from(\"/path/to/nowhere/rustdoc/not/required\")\n                 },\n             )\n-            .env(\"RUSTC_ERROR_METADATA_DST\", self.extended_error_dir());\n+            .env(\"RUSTC_ERROR_METADATA_DST\", self.extended_error_dir())\n+            .env(\"RUSTC_BREAK_ON_ICE\", \"1\");\n+\n+        // Dealing with rpath here is a little special, so let's go into some\n+        // detail. First off, `-rpath` is a linker option on Unix platforms\n+        // which adds to the runtime dynamic loader path when looking for\n+        // dynamic libraries. We use this by default on Unix platforms to ensure\n+        // that our nightlies behave the same on Windows, that is they work out\n+        // of the box. This can be disabled, of course, but basically that's why\n+        // we're gated on RUSTC_RPATH here.\n+        //\n+        // Ok, so the astute might be wondering \"why isn't `-C rpath` used\n+        // here?\" and that is indeed a good question to task. This codegen\n+        // option is the compiler's current interface to generating an rpath.\n+        // Unfortunately it doesn't quite suffice for us. The flag currently\n+        // takes no value as an argument, so the compiler calculates what it\n+        // should pass to the linker as `-rpath`. This unfortunately is based on\n+        // the **compile time** directory structure which when building with\n+        // Cargo will be very different than the runtime directory structure.\n+        //\n+        // All that's a really long winded way of saying that if we use\n+        // `-Crpath` then the executables generated have the wrong rpath of\n+        // something like `$ORIGIN/deps` when in fact the way we distribute\n+        // rustc requires the rpath to be `$ORIGIN/../lib`.\n+        //\n+        // So, all in all, to set up the correct rpath we pass the linker\n+        // argument manually via `-C link-args=-Wl,-rpath,...`. Plus isn't it\n+        // fun to pass a flag to a tool to pass a flag to pass a flag to a tool\n+        // to change a flag in a binary?\n+        if self.config.rust_rpath {\n+            let rpath = if target.contains(\"apple\") {\n+\n+                // Note that we need to take one extra step on macOS to also pass\n+                // `-Wl,-instal_name,@rpath/...` to get things to work right. To\n+                // do that we pass a weird flag to the compiler to get it to do\n+                // so. Note that this is definitely a hack, and we should likely\n+                // flesh out rpath support more fully in the future.\n+                rustflags.arg(\"-Zosx-rpath-install-name\");\n+                Some(\"-Wl,-rpath,@loader_path/../lib\")\n+            } else if !target.contains(\"windows\") &&\n+                      !target.contains(\"wasm32\") &&\n+                      !target.contains(\"fuchsia\") {\n+                Some(\"-Wl,-rpath,$ORIGIN/../lib\")\n+            } else {\n+                None\n+            };\n+            if let Some(rpath) = rpath {\n+                rustflags.arg(&format!(\"-Clink-args={}\", rpath));\n+            }\n+        }\n \n         if let Some(host_linker) = self.linker(compiler.host) {\n             cargo.env(\"RUSTC_HOST_LINKER\", host_linker);\n         }\n         if let Some(target_linker) = self.linker(target) {\n-            cargo.env(\"RUSTC_TARGET_LINKER\", target_linker);\n+            let target = crate::envify(&target);\n+            cargo.env(&format!(\"CARGO_TARGET_{}_LINKER\", target), target_linker);\n         }\n         if !([\"build\", \"check\", \"clippy\", \"fix\", \"rustc\"].contains(&cmd)) && want_rustdoc {\n             cargo.env(\"RUSTDOC_LIBDIR\", self.rustc_libdir(compiler));\n@@ -947,32 +997,18 @@ impl<'a> Builder<'a> {\n             Mode::ToolBootstrap | Mode::ToolStd |\n             Mode::ToolRustc => self.config.rust_debuginfo_level_tools,\n         };\n-        cargo.env(\"RUSTC_DEBUGINFO_LEVEL\", debuginfo_level.to_string());\n+        cargo.env(profile_var(\"DEBUG\"), debuginfo_level.to_string());\n \n         if !mode.is_tool() {\n             cargo.env(\"RUSTC_FORCE_UNSTABLE\", \"1\");\n-\n-            // Currently the compiler depends on crates from crates.io, and\n-            // then other crates can depend on the compiler (e.g., proc-macro\n-            // crates). Let's say, for example that rustc itself depends on the\n-            // bitflags crate. If an external crate then depends on the\n-            // bitflags crate as well, we need to make sure they don't\n-            // conflict, even if they pick the same version of bitflags. We'll\n-            // want to make sure that e.g., a plugin and rustc each get their\n-            // own copy of bitflags.\n-\n-            // Cargo ensures that this works in general through the -C metadata\n-            // flag. This flag will frob the symbols in the binary to make sure\n-            // they're different, even though the source code is the exact\n-            // same. To solve this problem for the compiler we extend Cargo's\n-            // already-passed -C metadata flag with our own. Our rustc.rs\n-            // wrapper around the actual rustc will detect -C metadata being\n-            // passed and frob it with this extra string we're passing in.\n-            cargo.env(\"RUSTC_METADATA_SUFFIX\", \"rustc\");\n         }\n \n         if let Some(x) = self.crt_static(target) {\n-            cargo.env(\"RUSTC_CRT_STATIC\", x.to_string());\n+            if x {\n+                rustflags.arg(\"-Ctarget-feature=+crt-static\");\n+            } else {\n+                rustflags.arg(\"-Ctarget-feature=-crt-static\");\n+            }\n         }\n \n         if let Some(x) = self.crt_static(compiler.host) {\n@@ -1031,8 +1067,21 @@ impl<'a> Builder<'a> {\n \n         cargo.env(\"RUSTC_VERBOSE\", self.verbosity.to_string());\n \n-        if self.config.deny_warnings {\n-            cargo.env(\"RUSTC_DENY_WARNINGS\", \"1\");\n+        if !mode.is_tool() {\n+            // When extending this list, add the new lints to the RUSTFLAGS of the\n+            // build_bootstrap function of src/bootstrap/bootstrap.py as well as\n+            // some code doesn't go through this `rustc` wrapper.\n+            rustflags.arg(\"-Wrust_2018_idioms\");\n+            rustflags.arg(\"-Wunused_lifetimes\");\n+\n+            if self.config.deny_warnings {\n+                rustflags.arg(\"-Dwarnings\");\n+            }\n+        }\n+\n+        if let Mode::Rustc | Mode::Codegen = mode {\n+            rustflags.arg(\"-Zunstable-options\");\n+            rustflags.arg(\"-Wrustc::internal\");\n         }\n \n         // Throughout the build Cargo can execute a number of build scripts\n@@ -1085,12 +1134,15 @@ impl<'a> Builder<'a> {\n             }\n         }\n \n-        if (cmd == \"build\" || cmd == \"rustc\")\n-            && mode == Mode::Std\n+        if mode == Mode::Std\n             && self.config.extended\n             && compiler.is_final_stage(self)\n         {\n-            cargo.env(\"RUSTC_SAVE_ANALYSIS\", \"api\".to_string());\n+            rustflags.arg(\"-Zsave-analysis\");\n+            cargo.env(\"RUST_SAVE_ANALYSIS_CONFIG\",\n+                      \"{\\\"output_file\\\": null,\\\"full_docs\\\": false,\\\n+                       \\\"pub_only\\\": true,\\\"reachable_only\\\": false,\\\n+                       \\\"distro_crate\\\": true,\\\"signatures\\\": false,\\\"borrow_data\\\": false}\");\n         }\n \n         // For `cargo doc` invocations, make rustdoc print the Rust version into the docs\n@@ -1146,7 +1198,7 @@ impl<'a> Builder<'a> {\n         match (mode, self.config.rust_codegen_units_std, self.config.rust_codegen_units) {\n             (Mode::Std, Some(n), _) |\n             (_, _, Some(n)) => {\n-                cargo.env(\"RUSTC_CODEGEN_UNITS\", n.to_string());\n+                cargo.env(profile_var(\"CODEGEN_UNITS\"), n.to_string());\n             }\n             _ => {\n                 // Don't set anything\n@@ -1171,7 +1223,17 @@ impl<'a> Builder<'a> {\n \n         self.ci_env.force_coloring_in_ci(&mut cargo);\n \n-        cargo\n+        // When we build Rust dylibs they're all intended for intermediate\n+        // usage, so make sure we pass the -Cprefer-dynamic flag instead of\n+        // linking all deps statically into the dylib.\n+        if let Mode::Std | Mode::Rustc | Mode::Codegen = mode {\n+            rustflags.arg(\"-Cprefer-dynamic\");\n+        }\n+\n+        Cargo {\n+            command: cargo,\n+            rustflags,\n+        }\n     }\n \n     /// Ensure that a given step is built, returning its output. This will\n@@ -1271,3 +1333,78 @@ impl<'a> Builder<'a> {\n \n #[cfg(test)]\n mod tests;\n+\n+#[derive(Debug)]\n+struct Rustflags(String);\n+\n+impl Rustflags {\n+    fn new(target: &str) -> Rustflags {\n+        let mut ret = Rustflags(String::new());\n+\n+        // Inherit `RUSTFLAGS` by default ...\n+        ret.env(\"RUSTFLAGS\");\n+\n+        // ... and also handle target-specific env RUSTFLAGS if they're\n+        // configured.\n+        let target_specific = format!(\"CARGO_TARGET_{}_RUSTFLAGS\", crate::envify(target));\n+        ret.env(&target_specific);\n+\n+        ret\n+    }\n+\n+    fn env(&mut self, env: &str) {\n+        if let Ok(s) = env::var(env) {\n+            for part in s.split_whitespace() {\n+                self.arg(part);\n+            }\n+        }\n+    }\n+\n+    fn arg(&mut self, arg: &str) -> &mut Self {\n+        assert_eq!(arg.split_whitespace().count(), 1);\n+        if self.0.len() > 0 {\n+            self.0.push_str(\" \");\n+        }\n+        self.0.push_str(arg);\n+        self\n+    }\n+}\n+\n+#[derive(Debug)]\n+pub struct Cargo {\n+    command: Command,\n+    rustflags: Rustflags,\n+}\n+\n+impl Cargo {\n+    pub fn rustflag(&mut self, arg: &str) -> &mut Cargo {\n+        self.rustflags.arg(arg);\n+        self\n+    }\n+\n+    pub fn arg(&mut self, arg: impl AsRef<OsStr>) -> &mut Cargo {\n+        self.command.arg(arg.as_ref());\n+        self\n+    }\n+\n+    pub fn args<I, S>(&mut self, args: I) -> &mut Cargo\n+        where I: IntoIterator<Item=S>, S: AsRef<OsStr>\n+    {\n+        for arg in args {\n+            self.arg(arg.as_ref());\n+        }\n+        self\n+    }\n+\n+    pub fn env(&mut self, key: impl AsRef<OsStr>, value: impl AsRef<OsStr>) -> &mut Cargo {\n+        self.command.env(key.as_ref(), value.as_ref());\n+        self\n+    }\n+}\n+\n+impl From<Cargo> for Command {\n+    fn from(mut cargo: Cargo) -> Command {\n+        cargo.command.env(\"RUSTFLAGS\", &cargo.rustflags.0);\n+        cargo.command\n+    }\n+}"}, {"sha": "cadb9a7e441f24b1adcdd38f6f0407bb2767449c", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=7fdea7a72abb9f5a58fdc19c0a298042291c53b2", "patch": "@@ -52,7 +52,7 @@ impl Step for Std {\n \n         builder.info(&format!(\"Checking std artifacts ({} -> {})\", &compiler.host, target));\n         run_cargo(builder,\n-                  &mut cargo,\n+                  cargo,\n                   args(builder.kind),\n                   &libstd_stamp(builder, compiler, target),\n                   true);\n@@ -100,7 +100,7 @@ impl Step for Rustc {\n \n         builder.info(&format!(\"Checking compiler artifacts ({} -> {})\", &compiler.host, target));\n         run_cargo(builder,\n-                  &mut cargo,\n+                  cargo,\n                   args(builder.kind),\n                   &librustc_stamp(builder, compiler, target),\n                   true);\n@@ -152,7 +152,7 @@ impl Step for CodegenBackend {\n         // We won't build LLVM if it's not available, as it shouldn't affect `check`.\n \n         run_cargo(builder,\n-                  &mut cargo,\n+                  cargo,\n                   args(builder.kind),\n                   &codegen_backend_stamp(builder, compiler, target, backend),\n                   true);\n@@ -185,18 +185,18 @@ impl Step for Rustdoc {\n \n         builder.ensure(Rustc { target });\n \n-        let mut cargo = prepare_tool_cargo(builder,\n-                                           compiler,\n-                                           Mode::ToolRustc,\n-                                           target,\n-                                           cargo_subcommand(builder.kind),\n-                                           \"src/tools/rustdoc\",\n-                                           SourceType::InTree,\n-                                           &[]);\n+        let cargo = prepare_tool_cargo(builder,\n+                                       compiler,\n+                                       Mode::ToolRustc,\n+                                       target,\n+                                       cargo_subcommand(builder.kind),\n+                                       \"src/tools/rustdoc\",\n+                                       SourceType::InTree,\n+                                       &[]);\n \n         println!(\"Checking rustdoc artifacts ({} -> {})\", &compiler.host, target);\n         run_cargo(builder,\n-                  &mut cargo,\n+                  cargo,\n                   args(builder.kind),\n                   &rustdoc_stamp(builder, compiler, target),\n                   true);"}, {"sha": "6ea32edfb208b24a35bd45cc30c4291531e537da", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=7fdea7a72abb9f5a58fdc19c0a298042291c53b2", "patch": "@@ -21,6 +21,7 @@ use serde::Deserialize;\n use serde_json;\n \n use crate::dist;\n+use crate::builder::Cargo;\n use crate::util::{exe, is_dylib};\n use crate::{Compiler, Mode, GitRepo};\n use crate::native;\n@@ -98,7 +99,7 @@ impl Step for Std {\n         builder.info(&format!(\"Building stage{} std artifacts ({} -> {})\", compiler.stage,\n                 &compiler.host, target));\n         run_cargo(builder,\n-                  &mut cargo,\n+                  cargo,\n                   vec![],\n                   &libstd_stamp(builder, compiler, target),\n                   false);\n@@ -156,7 +157,7 @@ fn copy_third_party_objects(builder: &Builder<'_>, compiler: &Compiler, target:\n pub fn std_cargo(builder: &Builder<'_>,\n                  compiler: &Compiler,\n                  target: Interned<String>,\n-                 cargo: &mut Command) {\n+                 cargo: &mut Cargo) {\n     if let Some(target) = env::var_os(\"MACOSX_STD_DEPLOYMENT_TARGET\") {\n         cargo.env(\"MACOSX_DEPLOYMENT_TARGET\", target);\n     }\n@@ -219,15 +220,19 @@ pub fn std_cargo(builder: &Builder<'_>,\n             .arg(\"--manifest-path\")\n             .arg(builder.src.join(\"src/libtest/Cargo.toml\"));\n \n+        // Help the libc crate compile by assisting it in finding various\n+        // sysroot native libraries.\n         if target.contains(\"musl\") {\n             if let Some(p) = builder.musl_root(target) {\n-                cargo.env(\"MUSL_ROOT\", p);\n+                let root = format!(\"native={}/lib\", p.to_str().unwrap());\n+                cargo.rustflag(\"-L\").rustflag(&root);\n             }\n         }\n \n         if target.ends_with(\"-wasi\") {\n             if let Some(p) = builder.wasi_root(target) {\n-                cargo.env(\"WASI_ROOT\", p);\n+                let root = format!(\"native={}/lib/wasm32-wasi\", p.to_str().unwrap());\n+                cargo.rustflag(\"-L\").rustflag(&root);\n             }\n         }\n     }\n@@ -430,7 +435,7 @@ impl Step for Rustc {\n         builder.info(&format!(\"Building stage{} compiler artifacts ({} -> {})\",\n                  compiler.stage, &compiler.host, target));\n         run_cargo(builder,\n-                  &mut cargo,\n+                  cargo,\n                   vec![],\n                   &librustc_stamp(builder, compiler, target),\n                   false);\n@@ -443,14 +448,14 @@ impl Step for Rustc {\n     }\n }\n \n-pub fn rustc_cargo(builder: &Builder<'_>, cargo: &mut Command) {\n+pub fn rustc_cargo(builder: &Builder<'_>, cargo: &mut Cargo) {\n     cargo.arg(\"--features\").arg(builder.rustc_features())\n          .arg(\"--manifest-path\")\n          .arg(builder.src.join(\"src/rustc/Cargo.toml\"));\n     rustc_cargo_env(builder, cargo);\n }\n \n-pub fn rustc_cargo_env(builder: &Builder<'_>, cargo: &mut Command) {\n+pub fn rustc_cargo_env(builder: &Builder<'_>, cargo: &mut Cargo) {\n     // Set some configuration variables picked up by build scripts and\n     // the compiler alike\n     cargo.env(\"CFG_RELEASE\", builder.rust_release())\n@@ -475,7 +480,7 @@ pub fn rustc_cargo_env(builder: &Builder<'_>, cargo: &mut Command) {\n         cargo.env(\"CFG_DEFAULT_LINKER\", s);\n     }\n     if builder.config.rustc_parallel {\n-        cargo.env(\"RUSTC_PARALLEL_COMPILER\", \"1\");\n+        cargo.rustflag(\"--cfg=parallel_compiler\");\n     }\n     if builder.config.rust_verify_llvm_ir {\n         cargo.env(\"RUSTC_VERIFY_LLVM_IR\", \"1\");\n@@ -577,14 +582,11 @@ impl Step for CodegenBackend {\n         rustc_cargo_env(builder, &mut cargo);\n \n         let features = build_codegen_backend(&builder, &mut cargo, &compiler, target, backend);\n+        cargo.arg(\"--features\").arg(features);\n \n         let tmp_stamp = out_dir.join(\".tmp.stamp\");\n \n-        let files = run_cargo(builder,\n-                              cargo.arg(\"--features\").arg(features),\n-                              vec![],\n-                              &tmp_stamp,\n-                              false);\n+        let files = run_cargo(builder, cargo, vec![], &tmp_stamp, false);\n         if builder.config.dry_run {\n             return;\n         }\n@@ -609,7 +611,7 @@ impl Step for CodegenBackend {\n }\n \n pub fn build_codegen_backend(builder: &Builder<'_>,\n-                             cargo: &mut Command,\n+                             cargo: &mut Cargo,\n                              compiler: &Compiler,\n                              target: Interned<String>,\n                              backend: Interned<String>) -> String {\n@@ -949,7 +951,7 @@ pub fn add_to_sysroot(\n }\n \n pub fn run_cargo(builder: &Builder<'_>,\n-                 cargo: &mut Command,\n+                 cargo: Cargo,\n                  tail_args: Vec<String>,\n                  stamp: &Path,\n                  is_check: bool)\n@@ -1081,10 +1083,11 @@ pub fn run_cargo(builder: &Builder<'_>,\n \n pub fn stream_cargo(\n     builder: &Builder<'_>,\n-    cargo: &mut Command,\n+    cargo: Cargo,\n     tail_args: Vec<String>,\n     cb: &mut dyn FnMut(CargoMessage<'_>),\n ) -> bool {\n+    let mut cargo = Command::from(cargo);\n     if builder.config.dry_run {\n         return true;\n     }"}, {"sha": "4ee8cd2485c02d34f2f142343364d65e774a7370", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=7fdea7a72abb9f5a58fdc19c0a298042291c53b2", "patch": "@@ -475,7 +475,7 @@ impl Step for Std {\n                  .arg(\"--resource-suffix\").arg(crate::channel::CFG_RELEASE_NUM)\n                  .arg(\"--index-page\").arg(&builder.src.join(\"src/doc/index.md\"));\n \n-            builder.run(&mut cargo);\n+            builder.run(&mut cargo.into());\n         };\n         for krate in &[\"alloc\", \"core\", \"std\", \"proc_macro\", \"test\"] {\n             run_cargo_rustdoc_for(krate);\n@@ -561,7 +561,7 @@ impl Step for Rustc {\n             cargo.arg(\"-p\").arg(krate);\n         }\n \n-        builder.run(&mut cargo);\n+        builder.run(&mut cargo.into());\n     }\n }\n \n@@ -656,7 +656,7 @@ impl Step for Rustdoc {\n         cargo.arg(\"-p\").arg(\"rustdoc\");\n \n         cargo.env(\"RUSTDOCFLAGS\", \"--document-private-items\");\n-        builder.run(&mut cargo);\n+        builder.run(&mut cargo.into());\n     }\n }\n "}, {"sha": "9203a558f64651d89f391dd5cb90f9986f1a8e3b", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=7fdea7a72abb9f5a58fdc19c0a298042291c53b2", "patch": "@@ -1320,3 +1320,13 @@ impl Compiler {\n         self.stage >= final_stage\n     }\n }\n+\n+fn envify(s: &str) -> String {\n+    s.chars()\n+        .map(|c| match c {\n+            '-' => '_',\n+            c => c,\n+        })\n+        .flat_map(|c| c.to_uppercase())\n+        .collect()\n+}"}, {"sha": "b7ce9c7b39709e34d4e30d987ff5dd5561aa4d4b", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 20, "deletions": 34, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=7fdea7a72abb9f5a58fdc19c0a298042291c53b2", "patch": "@@ -23,7 +23,7 @@ use crate::tool::{self, Tool, SourceType};\n use crate::toolstate::ToolState;\n use crate::util::{self, dylib_path, dylib_path_var};\n use crate::Crate as CargoCrate;\n-use crate::{DocTests, Mode, GitRepo};\n+use crate::{DocTests, Mode, GitRepo, envify};\n \n const ADB_TEST_DIR: &str = \"/data/tmp/work\";\n \n@@ -233,10 +233,9 @@ impl Step for Cargo {\n         // those features won't be able to land.\n         cargo.env(\"CARGO_TEST_DISABLE_NIGHTLY\", \"1\");\n \n-        try_run(\n-            builder,\n-            cargo.env(\"PATH\", &path_for_cargo(builder, compiler)),\n-        );\n+        cargo.env(\"PATH\", &path_for_cargo(builder, compiler));\n+\n+        try_run(builder, &mut cargo.into());\n     }\n }\n \n@@ -290,7 +289,7 @@ impl Step for Rls {\n         cargo.arg(\"--\")\n             .args(builder.config.cmd.test_args());\n \n-        if try_run(builder, &mut cargo) {\n+        if try_run(builder, &mut cargo.into()) {\n             builder.save_toolstate(\"rls\", ToolState::TestPass);\n         }\n     }\n@@ -348,7 +347,7 @@ impl Step for Rustfmt {\n \n         builder.add_rustc_lib_path(compiler, &mut cargo);\n \n-        if try_run(builder, &mut cargo) {\n+        if try_run(builder, &mut cargo.into()) {\n             builder.save_toolstate(\"rustfmt\", ToolState::TestPass);\n         }\n     }\n@@ -418,6 +417,7 @@ impl Step for Miri {\n             cargo.env(\"CARGO_INSTALL_ROOT\", &builder.out); // cargo adds a `bin/`\n             cargo.env(\"XARGO\", builder.out.join(\"bin\").join(\"xargo\"));\n \n+            let mut cargo = Command::from(cargo);\n             if !try_run(builder, &mut cargo) {\n                 return;\n             }\n@@ -467,7 +467,7 @@ impl Step for Miri {\n \n             builder.add_rustc_lib_path(compiler, &mut cargo);\n \n-            if !try_run(builder, &mut cargo) {\n+            if !try_run(builder, &mut cargo.into()) {\n                 return;\n             }\n \n@@ -502,16 +502,16 @@ impl Step for CompiletestTest {\n         let host = self.host;\n         let compiler = builder.compiler(0, host);\n \n-        let mut cargo = tool::prepare_tool_cargo(builder,\n-                                                 compiler,\n-                                                 Mode::ToolBootstrap,\n-                                                 host,\n-                                                 \"test\",\n-                                                 \"src/tools/compiletest\",\n-                                                 SourceType::InTree,\n-                                                 &[]);\n+        let cargo = tool::prepare_tool_cargo(builder,\n+                                             compiler,\n+                                             Mode::ToolBootstrap,\n+                                             host,\n+                                             \"test\",\n+                                             \"src/tools/compiletest\",\n+                                             SourceType::InTree,\n+                                             &[]);\n \n-        try_run(builder, &mut cargo);\n+        try_run(builder, &mut cargo.into());\n     }\n }\n \n@@ -571,7 +571,7 @@ impl Step for Clippy {\n \n             builder.add_rustc_lib_path(compiler, &mut cargo);\n \n-            if try_run(builder, &mut cargo) {\n+            if try_run(builder, &mut cargo.into()) {\n                 builder.save_toolstate(\"clippy-driver\", ToolState::TestPass);\n             }\n         } else {\n@@ -1814,10 +1814,6 @@ impl Step for Crate {\n                     .expect(\"nodejs not configured\"),\n             );\n         } else if target.starts_with(\"wasm32\") {\n-            // On the wasm32-unknown-unknown target we're using LTO which is\n-            // incompatible with `-C prefer-dynamic`, so disable that here\n-            cargo.env(\"RUSTC_NO_PREFER_DYNAMIC\", \"1\");\n-\n             let node = builder\n                 .config\n                 .nodejs\n@@ -1841,7 +1837,7 @@ impl Step for Crate {\n             test_kind, krate, compiler.stage, &compiler.host, target\n         ));\n         let _time = util::timeit(&builder);\n-        try_run(builder, &mut cargo);\n+        try_run(builder, &mut cargo.into());\n     }\n }\n \n@@ -1909,20 +1905,10 @@ impl Step for CrateRustdoc {\n         ));\n         let _time = util::timeit(&builder);\n \n-        try_run(builder, &mut cargo);\n+        try_run(builder, &mut cargo.into());\n     }\n }\n \n-fn envify(s: &str) -> String {\n-    s.chars()\n-        .map(|c| match c {\n-            '-' => '_',\n-            c => c,\n-        })\n-        .flat_map(|c| c.to_uppercase())\n-        .collect()\n-}\n-\n /// Some test suites are run inside emulators or on remote devices, and most\n /// of our test binaries are linked dynamically which means we need to ship\n /// the standard library and such to the emulator ahead of time. This step"}, {"sha": "f1baeafe26afb72fbaeb011ddb9ec5dd62c965b1", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=7fdea7a72abb9f5a58fdc19c0a298042291c53b2", "patch": "@@ -8,7 +8,7 @@ use build_helper::t;\n \n use crate::Mode;\n use crate::Compiler;\n-use crate::builder::{Step, RunConfig, ShouldRun, Builder};\n+use crate::builder::{Step, RunConfig, ShouldRun, Builder, Cargo as CargoCommand};\n use crate::util::{exe, add_lib_path, CiEnv};\n use crate::compile;\n use crate::channel::GitInfo;\n@@ -63,7 +63,7 @@ impl Step for ToolBuild {\n             _ => panic!(\"unexpected Mode for tool build\")\n         }\n \n-        let mut cargo = prepare_tool_cargo(\n+        let cargo = prepare_tool_cargo(\n             builder,\n             compiler,\n             self.mode,\n@@ -76,7 +76,7 @@ impl Step for ToolBuild {\n \n         builder.info(&format!(\"Building stage{} tool {} ({})\", compiler.stage, tool, target));\n         let mut duplicates = Vec::new();\n-        let is_expected = compile::stream_cargo(builder, &mut cargo, vec![], &mut |msg| {\n+        let is_expected = compile::stream_cargo(builder, cargo, vec![], &mut |msg| {\n             // Only care about big things like the RLS/Cargo for now\n             match tool {\n                 | \"rls\"\n@@ -229,15 +229,11 @@ pub fn prepare_tool_cargo(\n     path: &'static str,\n     source_type: SourceType,\n     extra_features: &[String],\n-) -> Command {\n+) -> CargoCommand {\n     let mut cargo = builder.cargo(compiler, mode, target, command);\n     let dir = builder.src.join(path);\n     cargo.arg(\"--manifest-path\").arg(dir.join(\"Cargo.toml\"));\n \n-    // We don't want to build tools dynamically as they'll be running across\n-    // stages and such and it's just easier if they're not dynamically linked.\n-    cargo.env(\"RUSTC_NO_PREFER_DYNAMIC\", \"1\");\n-\n     if source_type == SourceType::Submodule {\n         cargo.env(\"RUSTC_EXTERNAL_TOOL\", \"1\");\n     }\n@@ -517,7 +513,7 @@ impl Step for Rustdoc {\n         // libraries here. The intuition here is that If we've built a compiler, we should be able\n         // to build rustdoc.\n \n-        let mut cargo = prepare_tool_cargo(\n+        let cargo = prepare_tool_cargo(\n             builder,\n             build_compiler,\n             Mode::ToolRustc,\n@@ -530,7 +526,7 @@ impl Step for Rustdoc {\n \n         builder.info(&format!(\"Building rustdoc for stage{} ({})\",\n             target_compiler.stage, target_compiler.host));\n-        builder.run(&mut cargo);\n+        builder.run(&mut cargo.into());\n \n         // Cargo adds a number of paths to the dylib search path on windows, which results in\n         // the wrong rustdoc being executed. To avoid the conflicting rustdocs, we name the \"tool\""}, {"sha": "61c363fbfd675e5736611015fe88d905b478e0a1", "filename": "src/ci/docker/dist-i586-gnu-i586-i686-musl/Dockerfile", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Fci%2Fdocker%2Fdist-i586-gnu-i586-i686-musl%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Fci%2Fdocker%2Fdist-i586-gnu-i586-i686-musl%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i586-gnu-i586-i686-musl%2FDockerfile?ref=7fdea7a72abb9f5a58fdc19c0a298042291c53b2", "patch": "@@ -32,7 +32,6 @@ RUN sh /scripts/sccache.sh\n ENV RUST_CONFIGURE_ARGS \\\n       --musl-root-i586=/musl-i586 \\\n       --musl-root-i686=/musl-i686 \\\n-      --enable-extended \\\n       --disable-docs\n \n # Newer binutils broke things on some vms/distros (i.e., linking against"}, {"sha": "f751ccb428030a0446d79c94f6a6592d9c8ee9fd", "filename": "src/libcore/bool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Flibcore%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Flibcore%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbool.rs?ref=7fdea7a72abb9f5a58fdc19c0a298042291c53b2", "patch": "@@ -1,6 +1,6 @@\n //! impl bool {}\n \n-#[cfg(not(boostrap_stdarch_ignore_this))]\n+#[cfg(not(bootstrap))]\n #[lang = \"bool\"]\n impl bool {\n     /// Returns `Some(t)` if the `bool` is `true`, or `None` otherwise."}, {"sha": "6bdae1b557d6129ac238d9f809460c4666636b5d", "filename": "src/libcore/clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Flibcore%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Flibcore%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fclone.rs?ref=7fdea7a72abb9f5a58fdc19c0a298042291c53b2", "patch": "@@ -135,7 +135,7 @@ pub trait Clone : Sized {\n \n /// Derive macro generating an impl of the trait `Clone`.\n #[rustc_builtin_macro]\n-#[cfg_attr(boostrap_stdarch_ignore_this, rustc_macro_transparency = \"semitransparent\")]\n+#[cfg_attr(bootstrap, rustc_macro_transparency = \"semitransparent\")]\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n #[allow_internal_unstable(core_intrinsics, derive_clone_copy)]\n pub macro Clone($item:item) { /* compiler built-in */ }"}, {"sha": "fc7329f57d45e2aa921b1e5fc41ae880d22116e3", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=7fdea7a72abb9f5a58fdc19c0a298042291c53b2", "patch": "@@ -210,7 +210,7 @@ pub trait PartialEq<Rhs: ?Sized = Self> {\n \n /// Derive macro generating an impl of the trait `PartialEq`.\n #[rustc_builtin_macro]\n-#[cfg_attr(boostrap_stdarch_ignore_this, rustc_macro_transparency = \"semitransparent\")]\n+#[cfg_attr(bootstrap, rustc_macro_transparency = \"semitransparent\")]\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n #[allow_internal_unstable(core_intrinsics)]\n pub macro PartialEq($item:item) { /* compiler built-in */ }\n@@ -273,7 +273,7 @@ pub trait Eq: PartialEq<Self> {\n \n /// Derive macro generating an impl of the trait `Eq`.\n #[rustc_builtin_macro]\n-#[cfg_attr(boostrap_stdarch_ignore_this, rustc_macro_transparency = \"semitransparent\")]\n+#[cfg_attr(bootstrap, rustc_macro_transparency = \"semitransparent\")]\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n #[allow_internal_unstable(core_intrinsics, derive_eq)]\n pub macro Eq($item:item) { /* compiler built-in */ }\n@@ -624,7 +624,7 @@ pub trait Ord: Eq + PartialOrd<Self> {\n \n /// Derive macro generating an impl of the trait `Ord`.\n #[rustc_builtin_macro]\n-#[cfg_attr(boostrap_stdarch_ignore_this, rustc_macro_transparency = \"semitransparent\")]\n+#[cfg_attr(bootstrap, rustc_macro_transparency = \"semitransparent\")]\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n #[allow_internal_unstable(core_intrinsics)]\n pub macro Ord($item:item) { /* compiler built-in */ }\n@@ -873,7 +873,7 @@ pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n \n /// Derive macro generating an impl of the trait `PartialOrd`.\n #[rustc_builtin_macro]\n-#[cfg_attr(boostrap_stdarch_ignore_this, rustc_macro_transparency = \"semitransparent\")]\n+#[cfg_attr(bootstrap, rustc_macro_transparency = \"semitransparent\")]\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n #[allow_internal_unstable(core_intrinsics)]\n pub macro PartialOrd($item:item) { /* compiler built-in */ }"}, {"sha": "806d4783107600615c927f8343c5fc0a8810c718", "filename": "src/libcore/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Flibcore%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Flibcore%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdefault.rs?ref=7fdea7a72abb9f5a58fdc19c0a298042291c53b2", "patch": "@@ -117,7 +117,7 @@ pub trait Default: Sized {\n \n /// Derive macro generating an impl of the trait `Default`.\n #[rustc_builtin_macro]\n-#[cfg_attr(boostrap_stdarch_ignore_this, rustc_macro_transparency = \"semitransparent\")]\n+#[cfg_attr(bootstrap, rustc_macro_transparency = \"semitransparent\")]\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n #[allow_internal_unstable(core_intrinsics)]\n pub macro Default($item:item) { /* compiler built-in */ }"}, {"sha": "65e2f8b9be63ffd0258dee63b0ef24af833480ee", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=7fdea7a72abb9f5a58fdc19c0a298042291c53b2", "patch": "@@ -518,8 +518,8 @@ impl Display for Arguments<'_> {\n     label=\"`{Self}` cannot be formatted using `{{:?}}` because it doesn't implement `{Debug}`\",\n )]\n #[doc(alias = \"{:?}\")]\n-#[cfg_attr(boostrap_stdarch_ignore_this, lang = \"debug_trait\")]\n-#[cfg_attr(not(boostrap_stdarch_ignore_this), rustc_diagnostic_item = \"debug_trait\")]\n+#[cfg_attr(bootstrap, lang = \"debug_trait\")]\n+#[cfg_attr(not(bootstrap), rustc_diagnostic_item = \"debug_trait\")]\n pub trait Debug {\n     /// Formats the value using the given formatter.\n     ///\n@@ -550,7 +550,7 @@ pub trait Debug {\n pub(crate) mod macros {\n     /// Derive macro generating an impl of the trait `Debug`.\n     #[rustc_builtin_macro]\n-    #[cfg_attr(boostrap_stdarch_ignore_this, rustc_macro_transparency = \"semitransparent\")]\n+    #[cfg_attr(bootstrap, rustc_macro_transparency = \"semitransparent\")]\n     #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n     #[allow_internal_unstable(core_intrinsics)]\n     pub macro Debug($item:item) { /* compiler built-in */ }"}, {"sha": "aaaa6f9c575fd89b873f89c097a478fcd84c6ef2", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=7fdea7a72abb9f5a58fdc19c0a298042291c53b2", "patch": "@@ -202,7 +202,7 @@ pub trait Hash {\n pub(crate) mod macros {\n     /// Derive macro generating an impl of the trait `Hash`.\n     #[rustc_builtin_macro]\n-    #[cfg_attr(boostrap_stdarch_ignore_this, rustc_macro_transparency = \"semitransparent\")]\n+    #[cfg_attr(bootstrap, rustc_macro_transparency = \"semitransparent\")]\n     #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n     #[allow_internal_unstable(core_intrinsics)]\n     pub macro Hash($item:item) { /* compiler built-in */ }"}, {"sha": "905375eb60fe48527c29ffd52274363a6c6148c6", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=7fdea7a72abb9f5a58fdc19c0a298042291c53b2", "patch": "@@ -1299,38 +1299,38 @@ extern \"rust-intrinsic\" {\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `wrapping_add` method. For example,\n     /// [`std::u32::wrapping_add`](../../std/primitive.u32.html#method.wrapping_add)\n-    #[cfg(boostrap_stdarch_ignore_this)]\n+    #[cfg(bootstrap)]\n     pub fn overflowing_add<T>(a: T, b: T) -> T;\n     /// Returns (a - b) mod 2<sup>N</sup>, where N is the width of T in bits.\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `wrapping_sub` method. For example,\n     /// [`std::u32::wrapping_sub`](../../std/primitive.u32.html#method.wrapping_sub)\n-    #[cfg(boostrap_stdarch_ignore_this)]\n+    #[cfg(bootstrap)]\n     pub fn overflowing_sub<T>(a: T, b: T) -> T;\n     /// Returns (a * b) mod 2<sup>N</sup>, where N is the width of T in bits.\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `wrapping_mul` method. For example,\n     /// [`std::u32::wrapping_mul`](../../std/primitive.u32.html#method.wrapping_mul)\n-    #[cfg(boostrap_stdarch_ignore_this)]\n+    #[cfg(bootstrap)]\n     pub fn overflowing_mul<T>(a: T, b: T) -> T;\n \n     /// Returns (a + b) mod 2<sup>N</sup>, where N is the width of T in bits.\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `wrapping_add` method. For example,\n     /// [`std::u32::wrapping_add`](../../std/primitive.u32.html#method.wrapping_add)\n-    #[cfg(not(boostrap_stdarch_ignore_this))]\n+    #[cfg(not(bootstrap))]\n     pub fn wrapping_add<T>(a: T, b: T) -> T;\n     /// Returns (a - b) mod 2<sup>N</sup>, where N is the width of T in bits.\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `wrapping_sub` method. For example,\n     /// [`std::u32::wrapping_sub`](../../std/primitive.u32.html#method.wrapping_sub)\n-    #[cfg(not(boostrap_stdarch_ignore_this))]\n+    #[cfg(not(bootstrap))]\n     pub fn wrapping_sub<T>(a: T, b: T) -> T;\n     /// Returns (a * b) mod 2<sup>N</sup>, where N is the width of T in bits.\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `wrapping_mul` method. For example,\n     /// [`std::u32::wrapping_mul`](../../std/primitive.u32.html#method.wrapping_mul)\n-    #[cfg(not(boostrap_stdarch_ignore_this))]\n+    #[cfg(not(bootstrap))]\n     pub fn wrapping_mul<T>(a: T, b: T) -> T;\n \n     /// Computes `a + b`, while saturating at numeric bounds."}, {"sha": "5c681b3a5d8073330ccd705962d9687e8762ef57", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=7fdea7a72abb9f5a58fdc19c0a298042291c53b2", "patch": "@@ -87,7 +87,7 @@\n #![feature(link_llvm_intrinsics)]\n #![feature(never_type)]\n #![feature(nll)]\n-#![cfg_attr(boostrap_stdarch_ignore_this, feature(bind_by_move_pattern_guards))]\n+#![cfg_attr(bootstrap, feature(bind_by_move_pattern_guards))]\n #![feature(exhaustive_patterns)]\n #![feature(no_core)]\n #![feature(on_unimplemented)]"}, {"sha": "c6f5fb0b1635006960a80c4f6143d9a8e9f28a76", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=7fdea7a72abb9f5a58fdc19c0a298042291c53b2", "patch": "@@ -1236,9 +1236,9 @@ pub(crate) mod builtin {\n     pub macro test($item:item) { /* compiler built-in */ }\n \n     /// Attribute macro applied to a function to turn it into a benchmark test.\n-    #[cfg_attr(not(boostrap_stdarch_ignore_this), unstable(soft, feature = \"test\", issue = \"50297\",\n+    #[cfg_attr(not(bootstrap), unstable(soft, feature = \"test\", issue = \"50297\",\n                reason = \"`bench` is a part of custom test frameworks which are unstable\"))]\n-    #[cfg_attr(boostrap_stdarch_ignore_this, unstable(feature = \"test\", issue = \"50297\",\n+    #[cfg_attr(bootstrap, unstable(feature = \"test\", issue = \"50297\",\n                reason = \"`bench` is a part of custom test frameworks which are unstable\"))]\n     #[allow_internal_unstable(test, rustc_attrs)]\n     #[rustc_builtin_macro]"}, {"sha": "a2cfb320e7698e865657507e8d679fba25ef2a87", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=7fdea7a72abb9f5a58fdc19c0a298042291c53b2", "patch": "@@ -290,7 +290,7 @@ pub trait Copy : Clone {\n \n /// Derive macro generating an impl of the trait `Copy`.\n #[rustc_builtin_macro]\n-#[cfg_attr(boostrap_stdarch_ignore_this, rustc_macro_transparency = \"semitransparent\")]\n+#[cfg_attr(bootstrap, rustc_macro_transparency = \"semitransparent\")]\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n #[allow_internal_unstable(core_intrinsics, derive_clone_copy)]\n pub macro Copy($item:item) { /* compiler built-in */ }"}, {"sha": "5d99c10e738157ac7d6380020a7fcd7ebab03c2a", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=7fdea7a72abb9f5a58fdc19c0a298042291c53b2", "patch": "@@ -1112,11 +1112,11 @@ $EndFeature, \"\n                           without modifying the original\"]\n             #[inline]\n             pub const fn wrapping_add(self, rhs: Self) -> Self {\n-                #[cfg(boostrap_stdarch_ignore_this)] {\n+                #[cfg(bootstrap)] {\n                     intrinsics::overflowing_add(self, rhs)\n                 }\n \n-                #[cfg(not(boostrap_stdarch_ignore_this))] {\n+                #[cfg(not(bootstrap))] {\n                     intrinsics::wrapping_add(self, rhs)\n                 }\n             }\n@@ -1141,11 +1141,11 @@ $EndFeature, \"\n                           without modifying the original\"]\n             #[inline]\n             pub const fn wrapping_sub(self, rhs: Self) -> Self {\n-                #[cfg(boostrap_stdarch_ignore_this)] {\n+                #[cfg(bootstrap)] {\n                     intrinsics::overflowing_sub(self, rhs)\n                 }\n \n-                #[cfg(not(boostrap_stdarch_ignore_this))] {\n+                #[cfg(not(bootstrap))] {\n                     intrinsics::wrapping_sub(self, rhs)\n                 }\n             }\n@@ -1169,11 +1169,11 @@ $EndFeature, \"\n                           without modifying the original\"]\n             #[inline]\n             pub const fn wrapping_mul(self, rhs: Self) -> Self {\n-                #[cfg(boostrap_stdarch_ignore_this)] {\n+                #[cfg(bootstrap)] {\n                     intrinsics::overflowing_mul(self, rhs)\n                 }\n \n-                #[cfg(not(boostrap_stdarch_ignore_this))] {\n+                #[cfg(not(bootstrap))] {\n                     intrinsics::wrapping_mul(self, rhs)\n                 }\n             }\n@@ -3040,11 +3040,11 @@ $EndFeature, \"\n                           without modifying the original\"]\n             #[inline]\n             pub const fn wrapping_add(self, rhs: Self) -> Self {\n-                #[cfg(boostrap_stdarch_ignore_this)] {\n+                #[cfg(bootstrap)] {\n                     intrinsics::overflowing_add(self, rhs)\n                 }\n \n-                #[cfg(not(boostrap_stdarch_ignore_this))] {\n+                #[cfg(not(bootstrap))] {\n                     intrinsics::wrapping_add(self, rhs)\n                 }\n             }\n@@ -3068,11 +3068,11 @@ $EndFeature, \"\n                           without modifying the original\"]\n             #[inline]\n             pub const fn wrapping_sub(self, rhs: Self) -> Self {\n-                #[cfg(boostrap_stdarch_ignore_this)] {\n+                #[cfg(bootstrap)] {\n                     intrinsics::overflowing_sub(self, rhs)\n                 }\n \n-                #[cfg(not(boostrap_stdarch_ignore_this))] {\n+                #[cfg(not(bootstrap))] {\n                     intrinsics::wrapping_sub(self, rhs)\n                 }\n             }\n@@ -3097,11 +3097,11 @@ $EndFeature, \"\n                           without modifying the original\"]\n         #[inline]\n         pub const fn wrapping_mul(self, rhs: Self) -> Self {\n-            #[cfg(boostrap_stdarch_ignore_this)] {\n+            #[cfg(bootstrap)] {\n                 intrinsics::overflowing_mul(self, rhs)\n             }\n \n-            #[cfg(not(boostrap_stdarch_ignore_this))] {\n+            #[cfg(not(bootstrap))] {\n                 intrinsics::wrapping_mul(self, rhs)\n             }\n         }"}, {"sha": "7b7253419b1bd03e26dff93f27f7330e0244ac9e", "filename": "src/libcore/panicking.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Flibcore%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Flibcore%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanicking.rs?ref=7fdea7a72abb9f5a58fdc19c0a298042291c53b2", "patch": "@@ -71,7 +71,7 @@ pub fn panic_fmt(fmt: fmt::Arguments<'_>, file_line_col: &(&'static str, u32, u3\n     }\n \n     // NOTE This function never crosses the FFI boundary; it's a Rust-to-Rust call\n-    #[cfg_attr(boostrap_stdarch_ignore_this, allow(improper_ctypes))]\n+    #[cfg_attr(bootstrap, allow(improper_ctypes))]\n     extern \"Rust\" {\n         #[lang = \"panic_impl\"]\n         fn panic_impl(pi: &PanicInfo<'_>) -> !;"}, {"sha": "e45d56c320cd800bf30605b4e4ac08cfec884ff3", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=7fdea7a72abb9f5a58fdc19c0a298042291c53b2", "patch": "@@ -15,6 +15,7 @@ Core encoding and decoding interfaces.\n #![feature(nll)]\n #![feature(associated_type_bounds)]\n #![cfg_attr(test, feature(test))]\n+#![allow(rustc::internal)]\n \n pub use self::serialize::{Decoder, Encoder, Decodable, Encodable};\n "}, {"sha": "898168252e5543489f6104c8bad0cca414ade931", "filename": "src/libserialize/tests/json.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Flibserialize%2Ftests%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Flibserialize%2Ftests%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Ftests%2Fjson.rs?ref=7fdea7a72abb9f5a58fdc19c0a298042291c53b2", "patch": "@@ -1,3 +1,5 @@\n+#![allow(rustc::internal)]\n+\n extern crate serialize as rustc_serialize;\n \n use rustc_serialize::{Encodable, Decodable};"}, {"sha": "592bc09039947b393478adfaaf038c92b72f77ac", "filename": "src/libserialize/tests/opaque.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Flibserialize%2Ftests%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Flibserialize%2Ftests%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Ftests%2Fopaque.rs?ref=7fdea7a72abb9f5a58fdc19c0a298042291c53b2", "patch": "@@ -1,3 +1,5 @@\n+#![allow(rustc::internal)]\n+\n extern crate serialize as rustc_serialize;\n \n use rustc_serialize::{Encodable, Decodable};"}, {"sha": "e0ab2c165ace03a61139b61f1d9b86b07028850f", "filename": "src/stdarch", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstdarch?ref=7fdea7a72abb9f5a58fdc19c0a298042291c53b2", "patch": "@@ -1 +1 @@\n-Subproject commit 4791ba85e7645c02146dd416288480943670d1ca\n+Subproject commit e0ab2c165ace03a61139b61f1d9b86b07028850f"}, {"sha": "f41e7dd17ede6d0a93a5174f23fc5e1ab99e06d6", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=7fdea7a72abb9f5a58fdc19c0a298042291c53b2", "patch": "@@ -4,6 +4,8 @@\n //! via `x.py dist hash-and-sign`; the cmdline arguments are set up\n //! by rustbuild (in `src/bootstrap/dist.rs`).\n \n+#![deny(warnings)]\n+\n use toml;\n use serde::Serialize;\n "}, {"sha": "b6c6f685b38d523580813b0031677c2298f458ea", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=7fdea7a72abb9f5a58fdc19c0a298042291c53b2", "patch": "@@ -1 +1 @@\n-Subproject commit 3596cb86b2e87dd9b9c1bb90d4a9d73ec2c1512f\n+Subproject commit b6c6f685b38d523580813b0031677c2298f458ea"}, {"sha": "1a42e0cac3ccc294186c4343a8d4ca70bb881d0d", "filename": "src/tools/cargotest/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Ftools%2Fcargotest%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Ftools%2Fcargotest%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargotest%2Fmain.rs?ref=7fdea7a72abb9f5a58fdc19c0a298042291c53b2", "patch": "@@ -1,3 +1,5 @@\n+#![deny(warnings)]\n+\n use std::env;\n use std::process::Command;\n use std::path::{Path, PathBuf};"}, {"sha": "34435819a2c46e8527eb0d6415948862a776946f", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=7fdea7a72abb9f5a58fdc19c0a298042291c53b2", "patch": "@@ -1,6 +1,7 @@\n #![crate_name = \"compiletest\"]\n #![feature(test)]\n #![feature(vec_remove_item)]\n+#![deny(warnings)]\n \n extern crate test;\n "}, {"sha": "31a802706cba47edd004f92002758512e996ab6b", "filename": "src/tools/error_index_generator/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2Fmain.rs?ref=7fdea7a72abb9f5a58fdc19c0a298042291c53b2", "patch": "@@ -1,4 +1,5 @@\n #![feature(rustc_private)]\n+#![deny(warnings)]\n \n extern crate env_logger;\n extern crate syntax;"}, {"sha": "e8a7252cb767c6dca6c301304c5d7ed94a87a69f", "filename": "src/tools/linkchecker/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Ftools%2Flinkchecker%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Ftools%2Flinkchecker%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2Fmain.rs?ref=7fdea7a72abb9f5a58fdc19c0a298042291c53b2", "patch": "@@ -14,6 +14,8 @@\n //! A few whitelisted exceptions are allowed as there's known bugs in rustdoc,\n //! but this should catch the majority of \"broken link\" cases.\n \n+#![deny(warnings)]\n+\n use std::collections::hash_map::Entry;\n use std::collections::{HashMap, HashSet};\n use std::env;"}, {"sha": "d7f031a6150ae1a3997dbcdcd04c2ef583c9a9fc", "filename": "src/tools/remote-test-client/src/main.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Ftools%2Fremote-test-client%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Ftools%2Fremote-test-client%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fremote-test-client%2Fsrc%2Fmain.rs?ref=7fdea7a72abb9f5a58fdc19c0a298042291c53b2", "patch": "@@ -1,9 +1,11 @@\n-/// This is a small client program intended to pair with `remote-test-server` in\n-/// this repository. This client connects to the server over TCP and is used to\n-/// push artifacts and run tests on the server instead of locally.\n-///\n-/// Here is also where we bake in the support to spawn the QEMU emulator as\n-/// well.\n+//! This is a small client program intended to pair with `remote-test-server` in\n+//! this repository. This client connects to the server over TCP and is used to\n+//! push artifacts and run tests on the server instead of locally.\n+//!\n+//! Here is also where we bake in the support to spawn the QEMU emulator as\n+//! well.\n+\n+#![deny(warnings)]\n \n use std::env;\n use std::fs::{self, File};"}, {"sha": "0462b719b7be1a0be3c4dd2593135f591988a788", "filename": "src/tools/remote-test-server/src/main.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs?ref=7fdea7a72abb9f5a58fdc19c0a298042291c53b2", "patch": "@@ -1,14 +1,16 @@\n-/// This is a small server which is intended to run inside of an emulator or\n-/// on a remote test device. This server pairs with the `remote-test-client`\n-/// program in this repository. The `remote-test-client` connects to this\n-/// server over a TCP socket and performs work such as:\n-///\n-/// 1. Pushing shared libraries to the server\n-/// 2. Running tests through the server\n-///\n-/// The server supports running tests concurrently and also supports tests\n-/// themselves having support libraries. All data over the TCP sockets is in a\n-/// basically custom format suiting our needs.\n+//! This is a small server which is intended to run inside of an emulator or\n+//! on a remote test device. This server pairs with the `remote-test-client`\n+//! program in this repository. The `remote-test-client` connects to this\n+//! server over a TCP socket and performs work such as:\n+//!\n+//! 1. Pushing shared libraries to the server\n+//! 2. Running tests through the server\n+//!\n+//! The server supports running tests concurrently and also supports tests\n+//! themselves having support libraries. All data over the TCP sockets is in a\n+//! basically custom format suiting our needs.\n+\n+#![deny(warnings)]\n \n use std::cmp;\n use std::env;"}, {"sha": "a57238ad8148ae81ad0c7e17778a53dff157fa07", "filename": "src/tools/tidy/src/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs?ref=7fdea7a72abb9f5a58fdc19c0a298042291c53b2", "patch": "@@ -4,6 +4,8 @@\n //! etc. This is run by default on `make check` and as part of the auto\n //! builders.\n \n+#![deny(warnings)]\n+\n use tidy::*;\n \n use std::process;"}, {"sha": "fdb0b6d3e5653946f1bdf394b285cef0ac94bfbf", "filename": "src/tools/unstable-book-gen/src/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Ftools%2Funstable-book-gen%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdea7a72abb9f5a58fdc19c0a298042291c53b2/src%2Ftools%2Funstable-book-gen%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Funstable-book-gen%2Fsrc%2Fmain.rs?ref=7fdea7a72abb9f5a58fdc19c0a298042291c53b2", "patch": "@@ -1,5 +1,7 @@\n //! Auto-generate stub docs for the unstable book\n \n+#![deny(warnings)]\n+\n use tidy::features::{Feature, Features, collect_lib_features, collect_lang_features};\n use tidy::unstable_book::{collect_unstable_feature_names, collect_unstable_book_section_file_names,\n                           PATH_STR, LANG_FEATURES_DIR, LIB_FEATURES_DIR};"}]}