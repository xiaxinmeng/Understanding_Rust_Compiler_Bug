{"sha": "5a7946df703f2d9149adc0ca5c7e0b116e82a98d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhNzk0NmRmNzAzZjJkOTE0OWFkYzBjYTVjN2UwYjExNmU4MmE5OGQ=", "commit": {"author": {"name": "achernyak", "email": "artemchernyak@gmail.com", "date": "2017-05-05T13:15:08Z"}, "committer": {"name": "achernyak", "email": "artemchernyak@gmail.com", "date": "2017-05-05T13:15:08Z"}, "message": "is_foreign_item", "tree": {"sha": "7a48996330030f84bf9877199a06eacc00b57631", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a48996330030f84bf9877199a06eacc00b57631"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a7946df703f2d9149adc0ca5c7e0b116e82a98d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a7946df703f2d9149adc0ca5c7e0b116e82a98d", "html_url": "https://github.com/rust-lang/rust/commit/5a7946df703f2d9149adc0ca5c7e0b116e82a98d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a7946df703f2d9149adc0ca5c7e0b116e82a98d/comments", "author": {"login": "hackeryarn", "id": 827709, "node_id": "MDQ6VXNlcjgyNzcwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/827709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hackeryarn", "html_url": "https://github.com/hackeryarn", "followers_url": "https://api.github.com/users/hackeryarn/followers", "following_url": "https://api.github.com/users/hackeryarn/following{/other_user}", "gists_url": "https://api.github.com/users/hackeryarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/hackeryarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hackeryarn/subscriptions", "organizations_url": "https://api.github.com/users/hackeryarn/orgs", "repos_url": "https://api.github.com/users/hackeryarn/repos", "events_url": "https://api.github.com/users/hackeryarn/events{/privacy}", "received_events_url": "https://api.github.com/users/hackeryarn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hackeryarn", "id": 827709, "node_id": "MDQ6VXNlcjgyNzcwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/827709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hackeryarn", "html_url": "https://github.com/hackeryarn", "followers_url": "https://api.github.com/users/hackeryarn/followers", "following_url": "https://api.github.com/users/hackeryarn/following{/other_user}", "gists_url": "https://api.github.com/users/hackeryarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/hackeryarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hackeryarn/subscriptions", "organizations_url": "https://api.github.com/users/hackeryarn/orgs", "repos_url": "https://api.github.com/users/hackeryarn/repos", "events_url": "https://api.github.com/users/hackeryarn/events{/privacy}", "received_events_url": "https://api.github.com/users/hackeryarn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b71d769ffe751399b538fb0fdb51ec88345061b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b71d769ffe751399b538fb0fdb51ec88345061b", "html_url": "https://github.com/rust-lang/rust/commit/5b71d769ffe751399b538fb0fdb51ec88345061b"}], "stats": {"total": 14, "additions": 4, "deletions": 10}, "files": [{"sha": "d9ce40a0d7de2dcee11ba3abe6add471a9e1f55e", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7946df703f2d9149adc0ca5c7e0b116e82a98d/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7946df703f2d9149adc0ca5c7e0b116e82a98d/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=5a7946df703f2d9149adc0ca5c7e0b116e82a98d", "patch": "@@ -195,7 +195,6 @@ pub trait CrateStore {\n     // flags\n     fn is_const_fn(&self, did: DefId) -> bool;\n     fn is_default_impl(&self, impl_did: DefId) -> bool;\n-    fn is_foreign_item(&self, did: DefId) -> bool;\n     fn is_dllimport_foreign_item(&self, def: DefId) -> bool;\n     fn is_statically_included_foreign_item(&self, def_id: DefId) -> bool;\n     fn is_exported_symbol(&self, def_id: DefId) -> bool;\n@@ -319,7 +318,6 @@ impl CrateStore for DummyCrateStore {\n     // flags\n     fn is_const_fn(&self, did: DefId) -> bool { bug!(\"is_const_fn\") }\n     fn is_default_impl(&self, impl_did: DefId) -> bool { bug!(\"is_default_impl\") }\n-    fn is_foreign_item(&self, did: DefId) -> bool { bug!(\"is_foreign_item\") }\n     fn is_dllimport_foreign_item(&self, id: DefId) -> bool { false }\n     fn is_statically_included_foreign_item(&self, def_id: DefId) -> bool { false }\n     fn is_exported_symbol(&self, def_id: DefId) -> bool { false }"}, {"sha": "4bbf37b21edbf167dc61a8bb9cd548021f93999d", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7946df703f2d9149adc0ca5c7e0b116e82a98d/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7946df703f2d9149adc0ca5c7e0b116e82a98d/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=5a7946df703f2d9149adc0ca5c7e0b116e82a98d", "patch": "@@ -205,7 +205,7 @@ impl<'a, 'tcx> Visitor<'tcx> for EffectCheckVisitor<'a, 'tcx> {\n                     } else if match self.tcx.hir.get_if_local(def_id) {\n                         Some(hir::map::NodeForeignItem(..)) => true,\n                         Some(..) => false,\n-                        None => self.tcx.sess.cstore.is_foreign_item(def_id),\n+                        None => self.tcx.is_foreign_item(def_id),\n                     } {\n                         self.require_unsafe_ext(expr.id, expr.span, \"use of extern static\", true);\n                     }"}, {"sha": "7bd431ff4462120c8a0aeca3dd42c0abb50bf25f", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a7946df703f2d9149adc0ca5c7e0b116e82a98d/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7946df703f2d9149adc0ca5c7e0b116e82a98d/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=5a7946df703f2d9149adc0ca5c7e0b116e82a98d", "patch": "@@ -176,10 +176,6 @@ impl CrateStore for cstore::CStore {\n         self.get_crate_data(impl_did.krate).is_default_impl(impl_did.index)\n     }\n \n-    fn is_foreign_item(&self, did: DefId) -> bool {\n-        self.get_crate_data(did.krate).is_foreign_item(did.index)\n-    }\n-\n     fn is_statically_included_foreign_item(&self, def_id: DefId) -> bool\n     {\n         self.do_is_statically_included_foreign_item(def_id)"}, {"sha": "1aed2932948020f87e990c1f675aa46c413d39f0", "filename": "src/librustc_trans/back/symbol_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7946df703f2d9149adc0ca5c7e0b116e82a98d/src%2Flibrustc_trans%2Fback%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7946df703f2d9149adc0ca5c7e0b116e82a98d/src%2Flibrustc_trans%2Fback%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fsymbol_names.rs?ref=5a7946df703f2d9149adc0ca5c7e0b116e82a98d", "patch": "@@ -223,7 +223,7 @@ fn compute_symbol_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, instance: Instance\n             _ => false\n         }\n     } else {\n-        tcx.sess.cstore.is_foreign_item(def_id)\n+        tcx.is_foreign_item(def_id)\n     };\n \n     if let Some(name) = weak_lang_items::link_name(&attrs) {"}, {"sha": "f0be0941ccf368b1b9f18f32f42b6527e404db83", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7946df703f2d9149adc0ca5c7e0b116e82a98d/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7946df703f2d9149adc0ca5c7e0b116e82a98d/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=5a7946df703f2d9149adc0ca5c7e0b116e82a98d", "patch": "@@ -653,7 +653,7 @@ fn should_trans_locally<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, instance: &Instan\n         Some(_) => true,\n         None => {\n             if tcx.sess.cstore.is_exported_symbol(def_id) ||\n-                tcx.sess.cstore.is_foreign_item(def_id)\n+                tcx.is_foreign_item(def_id)\n             {\n                 // We can link to the item in question, no instance needed\n                 // in this crate"}, {"sha": "eac0a062567194cd056253b4ff0a320cae3d0a47", "filename": "src/librustc_trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a7946df703f2d9149adc0ca5c7e0b116e82a98d/src%2Flibrustc_trans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7946df703f2d9149adc0ca5c7e0b116e82a98d/src%2Flibrustc_trans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fconsts.rs?ref=5a7946df703f2d9149adc0ca5c7e0b116e82a98d", "patch": "@@ -186,7 +186,7 @@ pub fn get_static(ccx: &CrateContext, def_id: DefId) -> ValueRef {\n                 llvm::set_thread_local(g, true);\n             }\n         }\n-        if ccx.use_dll_storage_attrs() && !ccx.sess().cstore.is_foreign_item(def_id) {\n+        if ccx.use_dll_storage_attrs() && !ccx.tcx().is_foreign_item(def_id) {\n             // This item is external but not foreign, i.e. it originates from an external Rust\n             // crate. Since we don't know whether this crate will be linked dynamically or\n             // statically in the final application, we always mark such symbols as 'dllimport'."}]}