{"sha": "dc6f78561c238c472a6bab50eea36f4b3a39671d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjNmY3ODU2MWMyMzhjNDcyYTZiYWI1MGVlYTM2ZjRiM2EzOTY3MWQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-31T23:22:19Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-31T23:22:19Z"}, "message": "rt: Prevent trailing commas from showing up when logging oddly aligned arrays", "tree": {"sha": "d899a00b92a63881f83b752984c05a3fda85dd4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d899a00b92a63881f83b752984c05a3fda85dd4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc6f78561c238c472a6bab50eea36f4b3a39671d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc6f78561c238c472a6bab50eea36f4b3a39671d", "html_url": "https://github.com/rust-lang/rust/commit/dc6f78561c238c472a6bab50eea36f4b3a39671d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc6f78561c238c472a6bab50eea36f4b3a39671d/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfcbfa61f3cbc331f4ab0ecf7fdd71b5faea773a", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfcbfa61f3cbc331f4ab0ecf7fdd71b5faea773a", "html_url": "https://github.com/rust-lang/rust/commit/dfcbfa61f3cbc331f4ab0ecf7fdd71b5faea773a"}], "stats": {"total": 40, "additions": 24, "deletions": 16}, "files": [{"sha": "066bc1a115ce6be5fdb9af38be7c2accf7f036c4", "filename": "src/rt/rust_shape.cpp", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dc6f78561c238c472a6bab50eea36f4b3a39671d/src%2Frt%2Frust_shape.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/dc6f78561c238c472a6bab50eea36f4b3a39671d/src%2Frt%2Frust_shape.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.cpp?ref=dc6f78561c238c472a6bab50eea36f4b3a39671d", "patch": "@@ -426,7 +426,7 @@ cmp::walk_variant(tag_info &tinfo, uint32_t variant_id,\n \n void\n log::walk_string(const std::pair<ptr,ptr> &data) {\n-    out << \"\\\"\" << std::hex;\n+    out << prefix << \"\\\"\" << std::hex;\n \n     ptr subdp = data.first;\n     while (subdp < data.second) {\n@@ -443,7 +443,7 @@ log::walk_string(const std::pair<ptr,ptr> &data) {\n \n void\n log::walk_struct(const uint8_t *end_sp) {\n-    out << \"(\";\n+    out << prefix << \"(\";\n \n     bool first = true;\n     while (sp != end_sp) {\n@@ -464,16 +464,15 @@ log::walk_vec(bool is_pod, const std::pair<ptr,ptr> &data) {\n         return;\n     }\n \n-    out << \"[\";\n+    out << prefix << \"[\";\n \n     log sub(*this, data.first);\n     sub.end_dp = data.second;\n \n-    bool first = true;\n     while (sub.dp < data.second) {\n-        if (!first) out << \", \";\n         sub.walk_reset();\n-        sub.align = true, first = false;\n+        sub.align = true;\n+        sub.prefix = \", \";\n     }\n \n     out << \"]\";\n@@ -500,7 +499,7 @@ log::walk_variant(tag_info &tinfo, uint32_t variant_id,\n void\n log::walk_res(const rust_fn *dtor, unsigned n_params,\n               const type_param *params, const uint8_t *end_sp, bool live) {\n-    out << \"res\";\n+    out << prefix << \"res\";\n \n     if (this->sp == end_sp)\n         return;"}, {"sha": "bf8247ec0dc94e557097c3bc99ee184ceb9a99a7", "filename": "src/rt/rust_shape.h", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/dc6f78561c238c472a6bab50eea36f4b3a39671d/src%2Frt%2Frust_shape.h", "raw_url": "https://github.com/rust-lang/rust/raw/dc6f78561c238c472a6bab50eea36f4b3a39671d/src%2Frt%2Frust_shape.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.h?ref=dc6f78561c238c472a6bab50eea36f4b3a39671d", "patch": "@@ -974,6 +974,7 @@ class log : public data<log,ptr> {\n \n private:\n     std::ostream &out;\n+    const char *prefix;\n     bool in_string;\n \n     log(log &other,\n@@ -986,7 +987,8 @@ class log : public data<log,ptr> {\n                     in_params,\n                     in_tables ? in_tables : other.tables,\n                     other.dp),\n-      out(other.out) {}\n+      out(other.out),\n+      prefix(\"\") {}\n \n     log(log &other,\n         const uint8_t *in_sp,\n@@ -999,7 +1001,8 @@ class log : public data<log,ptr> {\n                     in_params,\n                     in_tables,\n                     in_dp),\n-      out(other.out) {}\n+      out(other.out),\n+      prefix(\"\") {}\n \n     log(log &other, ptr in_dp)\n     : data<log,ptr>(other.task,\n@@ -1008,7 +1011,8 @@ class log : public data<log,ptr> {\n                     other.params,\n                     other.tables,\n                     in_dp),\n-      out(other.out) {}\n+      out(other.out),\n+      prefix(\"\") {}\n \n     void walk_evec(bool is_pod, uint16_t sp_size) {\n         walk_vec(is_pod, get_evec_data_range(dp));\n@@ -1019,28 +1023,29 @@ class log : public data<log,ptr> {\n     }\n \n     void walk_tag(tag_info &tinfo, uint32_t tag_variant) {\n-        out << \"tag\" << tag_variant;\n+        out << prefix << \"tag\" << tag_variant;\n         data<log,ptr>::walk_variant(tinfo, tag_variant);\n     }\n \n     void walk_box() {\n-        out << \"@\";\n+        out << prefix << \"@\";\n         data<log,ptr>::walk_box_contents();\n     }\n \n     void walk_fn() {\n-        out << \"fn\";\n+        out << prefix << \"fn\";\n         data<log,ptr>::walk_fn_contents(dp);\n     }\n \n     void walk_obj() {\n-        out << \"obj\";\n+        out << prefix << \"obj\";\n         data<log,ptr>::walk_obj_contents(dp);\n     }\n \n     void walk_subcontext(log &sub) { sub.walk(); }\n \n     void walk_box_contents(log &sub, ptr &ref_count_dp) {\n+        out << prefix;\n         if (!ref_count_dp) {\n             out << \"(null)\";\n         } else {\n@@ -1059,7 +1064,10 @@ class log : public data<log,ptr> {\n                   const type_param *params, const uint8_t *end_sp, bool live);\n \n     template<typename T>\n-    inline void walk_number() { fmt_number(out, get_dp<T>(dp)); }\n+    inline void walk_number() {\n+        out << prefix;\n+        fmt_number(out, get_dp<T>(dp));\n+    }\n \n public:\n     log(rust_task *in_task,\n@@ -1070,7 +1078,8 @@ class log : public data<log,ptr> {\n         uint8_t *in_data,\n         std::ostream &in_out)\n     : data<log,ptr>(in_task, in_align, in_sp, in_params, in_tables, in_data),\n-      out(in_out) {}\n+      out(in_out),\n+      prefix(\"\") {}\n };\n \n }   // end namespace shape"}]}