{"sha": "a5030e7615f7d37acaee69b13f97b9ffa23159a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1MDMwZTc2MTVmN2QzN2FjYWVlNjliMTNmOTdiOWZmYTIzMTU5YTU=", "commit": {"author": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-03-07T04:17:22Z"}, "committer": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-03-07T04:40:42Z"}, "message": "Wrap const structs in as many LLVM structs as the non-const case.\n\nThis, like the previous change for unit-like enums, is only necessary\nuntil everything is fully converted to use trans::adt.", "tree": {"sha": "53b28577e0c88e4fc707326e3a8ca69305395007", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53b28577e0c88e4fc707326e3a8ca69305395007"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5030e7615f7d37acaee69b13f97b9ffa23159a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5030e7615f7d37acaee69b13f97b9ffa23159a5", "html_url": "https://github.com/rust-lang/rust/commit/a5030e7615f7d37acaee69b13f97b9ffa23159a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5030e7615f7d37acaee69b13f97b9ffa23159a5/comments", "author": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e09a843973f8dfc5766c0d36bb68ee1136cbf54c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e09a843973f8dfc5766c0d36bb68ee1136cbf54c", "html_url": "https://github.com/rust-lang/rust/commit/e09a843973f8dfc5766c0d36bb68ee1136cbf54c"}], "stats": {"total": 15, "additions": 11, "deletions": 4}, "files": [{"sha": "c6ba0a7d81f7a940e1752b4c467111a32e1d8b58", "filename": "src/librustc/middle/trans/adt.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a5030e7615f7d37acaee69b13f97b9ffa23159a5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5030e7615f7d37acaee69b13f97b9ffa23159a5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs?ref=a5030e7615f7d37acaee69b13f97b9ffa23159a5", "patch": "@@ -269,10 +269,15 @@ pub fn trans_const(ccx: @CrateContext, r: &Repr, discr: int,\n             assert min <= discr && discr <= max;\n             C_int(ccx, discr)\n         }\n-        Univariant(ref st, _dt) => {\n+        Univariant(ref st, dt) => {\n             assert discr == 0;\n-            // consts are never destroyed, so the dtor flag is not needed\n-            C_struct(build_const_struct(ccx, st, vals))\n+            let s = C_struct(build_const_struct(ccx, st, vals));\n+            match dt {\n+                NoDtor => s,\n+                // The actual destructor flag doesn't need to be present.\n+                // But add an extra struct layer for compatibility.\n+                DtorPresent | DtorAbsent => C_struct(~[s])\n+            }\n         }\n         General(ref cases) => {\n             let case = &cases[discr as uint];\n@@ -336,7 +341,9 @@ pub fn const_get_element(ccx: @CrateContext, r: &Repr, val: ValueRef,\n     match *r {\n         Unit(*) | CEnum(*) => ccx.sess.bug(~\"element access in C-like enum \\\n                                              const\"),\n-        Univariant(*) => const_struct_field(ccx, val, ix),\n+        Univariant(_, NoDtor) => const_struct_field(ccx, val, ix),\n+        Univariant(*) => const_struct_field(ccx, const_get_elt(ccx, val,\n+                                                               [0]), ix),\n         General(*) => const_struct_field(ccx, const_get_elt(ccx, val,\n                                                             [1, 0]), ix)\n     }"}]}