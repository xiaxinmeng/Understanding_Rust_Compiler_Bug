{"sha": "250dcf421a6db36f85f69c481eab27a0b45887af", "node_id": "C_kwDOAAsO6NoAKDI1MGRjZjQyMWE2ZGIzNmY4NWY2OWM0ODFlYWIyN2EwYjQ1ODg3YWY", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-17T10:22:44Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-21T20:30:45Z"}, "message": "Check that type_implements_trait actually is passed the right amount of generic params", "tree": {"sha": "3a81dd7628e73e35c0680d8ea9bfa69567bb03df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a81dd7628e73e35c0680d8ea9bfa69567bb03df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/250dcf421a6db36f85f69c481eab27a0b45887af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/250dcf421a6db36f85f69c481eab27a0b45887af", "html_url": "https://github.com/rust-lang/rust/commit/250dcf421a6db36f85f69c481eab27a0b45887af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/250dcf421a6db36f85f69c481eab27a0b45887af/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c47deed9fa7ef3c59453cf7a88159b36ff67b95", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c47deed9fa7ef3c59453cf7a88159b36ff67b95", "html_url": "https://github.com/rust-lang/rust/commit/0c47deed9fa7ef3c59453cf7a88159b36ff67b95"}], "stats": {"total": 38, "additions": 23, "deletions": 15}, "files": [{"sha": "50fd4fd2a8f89a7002431c7d29f451e0967efa24", "filename": "compiler/rustc_hir_typeck/src/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/250dcf421a6db36f85f69c481eab27a0b45887af/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/250dcf421a6db36f85f69c481eab27a0b45887af/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs?ref=250dcf421a6db36f85f69c481eab27a0b45887af", "patch": "@@ -498,7 +498,7 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                         let ty = fcx.tcx.erase_regions(ty);\n                         let expr_ty = fcx.resolve_vars_if_possible(self.expr_ty);\n                         let expr_ty = fcx.tcx.erase_regions(expr_ty);\n-                        let ty_params = fcx.tcx.mk_substs_trait(expr_ty, &[]);\n+                        let ty_params = fcx.tcx.mk_substs(std::iter::once(ty::GenericArg::from(expr_ty)));\n                         if fcx\n                             .infcx\n                             .type_implements_trait(from_trait, ty, ty_params, fcx.param_env)"}, {"sha": "1a5383ea245eaa3ffa49831e8fda9492bd814ceb", "filename": "compiler/rustc_hir_typeck/src/method/prelude2021.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/250dcf421a6db36f85f69c481eab27a0b45887af/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprelude2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/250dcf421a6db36f85f69c481eab27a0b45887af/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprelude2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprelude2021.rs?ref=250dcf421a6db36f85f69c481eab27a0b45887af", "patch": "@@ -8,7 +8,8 @@ use hir::ItemKind;\n use rustc_ast::Mutability;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n-use rustc_middle::ty::subst::InternalSubsts;\n+use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n+use rustc_middle::ty;\n use rustc_middle::ty::{Adt, Array, Ref, Ty};\n use rustc_session::lint::builtin::RUST_2021_PRELUDE_COLLISIONS;\n use rustc_span::symbol::kw::{Empty, Underscore};\n@@ -227,14 +228,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // If we know it does not, we don't need to warn.\n         if method_name.name == sym::from_iter {\n             if let Some(trait_def_id) = self.tcx.get_diagnostic_item(sym::FromIterator) {\n+                let any_type = self.infcx.next_ty_var(TypeVariableOrigin {\n+                    kind: TypeVariableOriginKind::MiscVariable,\n+                    span,\n+                });\n+                let params = self.tcx.mk_substs(std::iter::once(ty::GenericArg::from(any_type)));\n                 if !self\n                     .infcx\n-                    .type_implements_trait(\n-                        trait_def_id,\n-                        self_ty,\n-                        InternalSubsts::empty(),\n-                        self.param_env,\n-                    )\n+                    .type_implements_trait(trait_def_id, self_ty, params, self.param_env)\n                     .may_apply()\n                 {\n                     return;"}, {"sha": "090c73d1638a63114550e54ede53a2d4671aa772", "filename": "compiler/rustc_hir_typeck/src/upvar.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/250dcf421a6db36f85f69c481eab27a0b45887af/compiler%2Frustc_hir_typeck%2Fsrc%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/250dcf421a6db36f85f69c481eab27a0b45887af/compiler%2Frustc_hir_typeck%2Fsrc%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fupvar.rs?ref=250dcf421a6db36f85f69c481eab27a0b45887af", "patch": "@@ -973,7 +973,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             .type_implements_trait(\n                                 check_trait,\n                                 ty,\n-                                self.tcx.mk_substs_trait(ty, &[]),\n+                                ty::List::empty(),\n                                 self.param_env,\n                             )\n                             .must_apply_modulo_regions()\n@@ -1002,7 +1002,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 .type_implements_trait(\n                                     check_trait,\n                                     ty,\n-                                    self.tcx.mk_substs_trait(ty, &[]),\n+                                    ty::List::empty(),\n                                     self.param_env,\n                                 )\n                                 .must_apply_modulo_regions()\n@@ -1347,12 +1347,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let is_drop_defined_for_ty = |ty: Ty<'tcx>| {\n             let drop_trait = self.tcx.require_lang_item(hir::LangItem::Drop, Some(closure_span));\n-            let ty_params = self.tcx.mk_substs_trait(base_path_ty, &[]);\n             self.infcx\n                 .type_implements_trait(\n                     drop_trait,\n                     ty,\n-                    ty_params,\n+                    ty::List::empty(),\n                     self.tcx.param_env(closure_def_id),\n                 )\n                 .must_apply_modulo_regions()"}, {"sha": "73e220dc7af13c68a8391fcb4ab6cf93c67cd366", "filename": "compiler/rustc_trait_selection/src/infer.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/250dcf421a6db36f85f69c481eab27a0b45887af/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/250dcf421a6db36f85f69c481eab27a0b45887af/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs?ref=250dcf421a6db36f85f69c481eab27a0b45887af", "patch": "@@ -113,12 +113,20 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n     fn type_implements_trait(\n         &self,\n         trait_def_id: DefId,\n-        ty: Ty<'tcx>,\n+        self_ty: Ty<'tcx>,\n         params: SubstsRef<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n     ) -> traits::EvaluationResult {\n-        let trait_ref =\n-            ty::TraitRef { def_id: trait_def_id, substs: self.tcx.mk_substs_trait(ty, params) };\n+        let trait_ref = ty::TraitRef {\n+            def_id: trait_def_id,\n+            substs: self.tcx.mk_substs_trait(self_ty, params),\n+        };\n+\n+        debug_assert_eq!(\n+            self.tcx.generics_of(trait_def_id).count() - 1,\n+            params.len(),\n+            \"wrong number of generic parameters for {trait_def_id:?}, did you accidentally include the self-type in the params list?\"\n+        );\n \n         let obligation = traits::Obligation {\n             cause: traits::ObligationCause::dummy(),"}]}