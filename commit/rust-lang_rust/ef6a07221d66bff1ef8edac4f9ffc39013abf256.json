{"sha": "ef6a07221d66bff1ef8edac4f9ffc39013abf256", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmNmEwNzIyMWQ2NmJmZjFlZjhlZGFjNGY5ZmZjMzkwMTNhYmYyNTY=", "commit": {"author": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2016-10-27T06:07:38Z"}, "committer": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2016-10-27T06:24:59Z"}, "message": "deduplicate one-time diagnostics on lint ID as well as span and message\n\nSome lint-level attributes (like `bad-style`, or, more dramatically,\n`warnings`) can affect more than one lint; it seems fairer to point out\nthe attribute once for each distinct lint affected. Also, a UI test is\nadded. This remains in the matter of #24690.", "tree": {"sha": "4f31e856d4106c9de191f03e8e7c8bd6009d54ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f31e856d4106c9de191f03e8e7c8bd6009d54ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef6a07221d66bff1ef8edac4f9ffc39013abf256", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef6a07221d66bff1ef8edac4f9ffc39013abf256", "html_url": "https://github.com/rust-lang/rust/commit/ef6a07221d66bff1ef8edac4f9ffc39013abf256", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef6a07221d66bff1ef8edac4f9ffc39013abf256/comments", "author": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d1da8452cc725443c43c44e0f4ec64a73944cdf", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d1da8452cc725443c43c44e0f4ec64a73944cdf", "html_url": "https://github.com/rust-lang/rust/commit/8d1da8452cc725443c43c44e0f4ec64a73944cdf"}], "stats": {"total": 73, "additions": 64, "deletions": 9}, "files": [{"sha": "cf4115e37cd9860de65c733156451098f4c607dd", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef6a07221d66bff1ef8edac4f9ffc39013abf256/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef6a07221d66bff1ef8edac4f9ffc39013abf256/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=ef6a07221d66bff1ef8edac4f9ffc39013abf256", "patch": "@@ -452,7 +452,7 @@ pub fn raw_struct_lint<'a>(sess: &'a Session,\n     }\n \n     if let Some(span) = def {\n-        sess.diag_span_note_once(&mut err, span, \"lint level defined here\");\n+        sess.diag_span_note_once(&mut err, lint, span, \"lint level defined here\");\n     }\n \n     err"}, {"sha": "ce3f2be54b2d5d327d959ef955ae22e3088cabf4", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ef6a07221d66bff1ef8edac4f9ffc39013abf256/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef6a07221d66bff1ef8edac4f9ffc39013abf256/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=ef6a07221d66bff1ef8edac4f9ffc39013abf256", "patch": "@@ -75,10 +75,10 @@ pub struct Session {\n     pub working_dir: PathBuf,\n     pub lint_store: RefCell<lint::LintStore>,\n     pub lints: RefCell<NodeMap<Vec<(lint::LintId, Span, String)>>>,\n-    /// Set of (span, message) tuples tracking lint (sub)diagnostics that have\n-    /// been set once, but should not be set again, in order to avoid\n+    /// Set of (LintId, span, message) tuples tracking lint (sub)diagnostics\n+    /// that have been set once, but should not be set again, in order to avoid\n     /// redundantly verbose output (Issue #24690).\n-    pub one_time_diagnostics: RefCell<FnvHashSet<(Span, String)>>,\n+    pub one_time_diagnostics: RefCell<FnvHashSet<(lint::LintId, Span, String)>>,\n     pub plugin_llvm_passes: RefCell<Vec<String>>,\n     pub mir_passes: RefCell<mir_pass::Passes>,\n     pub plugin_attributes: RefCell<Vec<(String, AttributeType)>>,\n@@ -294,25 +294,26 @@ impl Session {\n     }\n \n     /// Analogous to calling `.span_note` on the given DiagnosticBuilder, but\n-    /// deduplicates on span and message for this `Session` if we're not\n-    /// outputting in JSON mode.\n+    /// deduplicates on lint ID, span, and message for this `Session` if we're\n+    /// not outputting in JSON mode.\n     //\n     // FIXME: if the need arises for one-time diagnostics other than\n     // `span_note`, we almost certainly want to generalize this\n     // \"check/insert-into the one-time diagnostics map, then set message if\n     // it's not already there\" code to accomodate all of them\n     pub fn diag_span_note_once<'a, 'b>(&'a self,\n                                        diag_builder: &'b mut DiagnosticBuilder<'a>,\n-                                       span: Span, message: &str) {\n+                                       lint: &'static lint::Lint, span: Span, message: &str) {\n         match self.opts.error_format {\n             // when outputting JSON for tool consumption, the tool might want\n             // the duplicates\n             config::ErrorOutputType::Json => {\n                 diag_builder.span_note(span, &message);\n             },\n             _ => {\n-                let span_message = (span, message.to_owned());\n-                let fresh = self.one_time_diagnostics.borrow_mut().insert(span_message);\n+                let lint_id = lint::LintId::of(lint);\n+                let id_span_message = (lint_id, span, message.to_owned());\n+                let fresh = self.one_time_diagnostics.borrow_mut().insert(id_span_message);\n                 if fresh {\n                     diag_builder.span_note(span, &message);\n                 }"}, {"sha": "def0d9aced3c3e664447329d9bd52a898aa2ef7c", "filename": "src/test/ui/span/issue-24690.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ef6a07221d66bff1ef8edac4f9ffc39013abf256/src%2Ftest%2Fui%2Fspan%2Fissue-24690.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef6a07221d66bff1ef8edac4f9ffc39013abf256/src%2Ftest%2Fui%2Fspan%2Fissue-24690.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24690.rs?ref=ef6a07221d66bff1ef8edac4f9ffc39013abf256", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! A test to ensure that helpful `note` messages aren't emitted more often\n+//! than necessary.\n+\n+// Although there are three errors, we should only get two \"lint level defined\n+// here\" notes pointing at the `warnings` span, one for each error type.\n+#![deny(warnings)]\n+\n+fn main() {\n+    let theTwo = 2;\n+    let theOtherTwo = 2;\n+    println!(\"{}\", theTwo);\n+}"}, {"sha": "0d2a2ef751666adbd5ad98171f5b55994bef5227", "filename": "src/test/ui/span/issue-24690.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ef6a07221d66bff1ef8edac4f9ffc39013abf256/src%2Ftest%2Fui%2Fspan%2Fissue-24690.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef6a07221d66bff1ef8edac4f9ffc39013abf256/src%2Ftest%2Fui%2Fspan%2Fissue-24690.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24690.stderr?ref=ef6a07221d66bff1ef8edac4f9ffc39013abf256", "patch": "@@ -0,0 +1,32 @@\n+error: unused variable: `theOtherTwo`\n+  --> $DIR/issue-24690.rs:20:9\n+   |\n+20 |     let theOtherTwo = 2;\n+   |         ^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/issue-24690.rs:16:9\n+   |\n+16 | #![deny(warnings)]\n+   |         ^^^^^^^^\n+\n+error: variable `theTwo` should have a snake case name such as `the_two`\n+  --> $DIR/issue-24690.rs:19:9\n+   |\n+19 |     let theTwo = 2;\n+   |         ^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/issue-24690.rs:16:9\n+   |\n+16 | #![deny(warnings)]\n+   |         ^^^^^^^^\n+\n+error: variable `theOtherTwo` should have a snake case name such as `the_other_two`\n+  --> $DIR/issue-24690.rs:20:9\n+   |\n+20 |     let theOtherTwo = 2;\n+   |         ^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}]}