{"sha": "1e7e2e40e4992a82b9e5bc7120bd33964bcef355", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlN2UyZTQwZTQ5OTJhODJiOWU1YmM3MTIwYmQzMzk2NGJjZWYzNTU=", "commit": {"author": {"name": "Ethan Brierley", "email": "ethanboxx@gmail.com", "date": "2020-10-06T21:42:33Z"}, "committer": {"name": "Ethan Brierley", "email": "ethanboxx@gmail.com", "date": "2020-10-06T21:42:33Z"}, "message": "remove OnlySign in favour of InvalidDigit", "tree": {"sha": "eb52105c4acbf8c116e51b48dcf5f13ea47f22da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb52105c4acbf8c116e51b48dcf5f13ea47f22da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e7e2e40e4992a82b9e5bc7120bd33964bcef355", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e7e2e40e4992a82b9e5bc7120bd33964bcef355", "html_url": "https://github.com/rust-lang/rust/commit/1e7e2e40e4992a82b9e5bc7120bd33964bcef355", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e7e2e40e4992a82b9e5bc7120bd33964bcef355/comments", "author": {"login": "eopb", "id": 8074468, "node_id": "MDQ6VXNlcjgwNzQ0Njg=", "avatar_url": "https://avatars.githubusercontent.com/u/8074468?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eopb", "html_url": "https://github.com/eopb", "followers_url": "https://api.github.com/users/eopb/followers", "following_url": "https://api.github.com/users/eopb/following{/other_user}", "gists_url": "https://api.github.com/users/eopb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eopb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eopb/subscriptions", "organizations_url": "https://api.github.com/users/eopb/orgs", "repos_url": "https://api.github.com/users/eopb/repos", "events_url": "https://api.github.com/users/eopb/events{/privacy}", "received_events_url": "https://api.github.com/users/eopb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eopb", "id": 8074468, "node_id": "MDQ6VXNlcjgwNzQ0Njg=", "avatar_url": "https://avatars.githubusercontent.com/u/8074468?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eopb", "html_url": "https://github.com/eopb", "followers_url": "https://api.github.com/users/eopb/followers", "following_url": "https://api.github.com/users/eopb/following{/other_user}", "gists_url": "https://api.github.com/users/eopb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eopb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eopb/subscriptions", "organizations_url": "https://api.github.com/users/eopb/orgs", "repos_url": "https://api.github.com/users/eopb/repos", "events_url": "https://api.github.com/users/eopb/events{/privacy}", "received_events_url": "https://api.github.com/users/eopb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8eaf0de1f45924a0fdbde00d4c7fe0333b377993", "url": "https://api.github.com/repos/rust-lang/rust/commits/8eaf0de1f45924a0fdbde00d4c7fe0333b377993", "html_url": "https://github.com/rust-lang/rust/commit/8eaf0de1f45924a0fdbde00d4c7fe0333b377993"}], "stats": {"total": 25, "additions": 11, "deletions": 14}, "files": [{"sha": "e0d171fa77125cf0bf52e1137f17566751b185e3", "filename": "compiler/rustc_middle/src/middle/limits.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e7e2e40e4992a82b9e5bc7120bd33964bcef355/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flimits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e7e2e40e4992a82b9e5bc7120bd33964bcef355/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flimits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flimits.rs?ref=1e7e2e40e4992a82b9e5bc7120bd33964bcef355", "patch": "@@ -49,9 +49,7 @@ fn update_limit(\n \n                     let error_str = match e.kind() {\n                         IntErrorKind::PosOverflow => \"`limit` is too large\",\n-                        IntErrorKind::Empty | IntErrorKind::OnlySign => {\n-                            \"`limit` must be a non-negative integer\"\n-                        }\n+                        IntErrorKind::Empty => \"`limit` must be a non-negative integer\",\n                         IntErrorKind::InvalidDigit(_) => \"not a valid integer\",\n                         IntErrorKind::NegOverflow => bug!(\"`limit` should never underflow\"),\n                         IntErrorKind::Zero => bug!(\"zero is a valid `limit`\"),"}, {"sha": "401d52eb0848118ee0005dc10d9de6749d59a605", "filename": "library/core/src/num/error.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1e7e2e40e4992a82b9e5bc7120bd33964bcef355/library%2Fcore%2Fsrc%2Fnum%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e7e2e40e4992a82b9e5bc7120bd33964bcef355/library%2Fcore%2Fsrc%2Fnum%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ferror.rs?ref=1e7e2e40e4992a82b9e5bc7120bd33964bcef355", "patch": "@@ -95,7 +95,10 @@ pub enum IntErrorKind {\n     /// Contains an digit invalid in its context.\n     ///\n     /// Among other causes, this variant will be constructed when parsing a string that\n-    /// contains a letter.\n+    /// contains a non-asci char.\n+    ///\n+    /// This variant is also constructed when a `+` or `-` is misplaced within a sting\n+    /// either on its own or in the middle of a number.\n     #[stable(feature = \"int_error_matching\", since = \"1.47.0\")]\n     InvalidDigit(#[stable(feature = \"int_error_matching\", since = \"1.47.0\")] char),\n     /// Integer is too large to store in target integer type.\n@@ -110,9 +113,6 @@ pub enum IntErrorKind {\n     /// would be illegal for non-zero types.\n     #[stable(feature = \"int_error_matching\", since = \"1.47.0\")]\n     Zero,\n-    /// The value contains nothing other than sign `+` or `-`.\n-    #[stable(feature = \"int_error_matching\", since = \"1.47.0\")]\n-    OnlySign,\n }\n \n impl ParseIntError {\n@@ -135,7 +135,6 @@ impl ParseIntError {\n             IntErrorKind::PosOverflow => \"number too large to fit in target type\",\n             IntErrorKind::NegOverflow => \"number too small to fit in target type\",\n             IntErrorKind::Zero => \"number would be zero for non-zero type\",\n-            IntErrorKind::OnlySign => \"only sign without digits found in string\",\n         }\n     }\n }"}, {"sha": "fd00a072d896c903b537a9ee4d1e139e00247ce5", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1e7e2e40e4992a82b9e5bc7120bd33964bcef355/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e7e2e40e4992a82b9e5bc7120bd33964bcef355/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=1e7e2e40e4992a82b9e5bc7120bd33964bcef355", "patch": "@@ -830,15 +830,14 @@ fn from_str_radix<T: FromStrRadixHelper>(src: &str, radix: u32) -> Result<T, Par\n     let src = src.as_bytes();\n \n     let (is_positive, digits) = match src[0] {\n+        b'+' | b'-' if src[1..].is_empty() => {\n+            return Err(PIE { kind: InvalidDigit(src[0] as char) });\n+        }\n         b'+' => (true, &src[1..]),\n         b'-' if is_signed_ty => (false, &src[1..]),\n         _ => (true, src),\n     };\n \n-    if digits.is_empty() {\n-        return Err(PIE { kind: OnlySign });\n-    }\n-\n     let mut result = T::from_u32(0);\n     if is_positive {\n         // The number is positive"}, {"sha": "4fd9f721b823be057973b0c00448176c5338bc54", "filename": "library/core/tests/num/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1e7e2e40e4992a82b9e5bc7120bd33964bcef355/library%2Fcore%2Ftests%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e7e2e40e4992a82b9e5bc7120bd33964bcef355/library%2Fcore%2Ftests%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fmod.rs?ref=1e7e2e40e4992a82b9e5bc7120bd33964bcef355", "patch": "@@ -122,12 +122,13 @@ fn test_invalid() {\n     test_parse::<u8>(\"\u0421\u044a\u0435\u0448\u044c\", Err(IntErrorKind::InvalidDigit('\u00d0')));\n     test_parse::<u8>(\"123Hello\", Err(IntErrorKind::InvalidDigit('H')));\n     test_parse::<i8>(\"--\", Err(IntErrorKind::InvalidDigit('-')));\n+    test_parse::<i8>(\"-\", Err(IntErrorKind::InvalidDigit('-')));\n+    test_parse::<i8>(\"+\", Err(IntErrorKind::InvalidDigit('+')));\n+    test_parse::<u8>(\"-1\", Err(IntErrorKind::InvalidDigit('-')));\n }\n \n #[test]\n fn test_empty() {\n-    test_parse::<i8>(\"-\", Err(IntErrorKind::OnlySign));\n-    test_parse::<i8>(\"+\", Err(IntErrorKind::OnlySign));\n     test_parse::<u8>(\"\", Err(IntErrorKind::Empty));\n }\n "}]}