{"sha": "02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyYjVmZWU3MzI1YmMwZjFjOGFkYjFkZWRiNGZkNjE3YWE5MTU1YTM=", "commit": {"author": {"name": "leonardo.yvens", "email": "leoyvens@gmail.com", "date": "2017-12-03T12:56:53Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-01-13T15:48:00Z"}, "message": "Adjust tests for removal of `impl Foo for .. {}`", "tree": {"sha": "04d6cd2a98844a1c8f3f7125fb57efe3df53c7b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04d6cd2a98844a1c8f3f7125fb57efe3df53c7b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3", "html_url": "https://github.com/rust-lang/rust/commit/02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3/comments", "author": {"login": "leoyvens", "id": 9885558, "node_id": "MDQ6VXNlcjk4ODU1NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9885558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoyvens", "html_url": "https://github.com/leoyvens", "followers_url": "https://api.github.com/users/leoyvens/followers", "following_url": "https://api.github.com/users/leoyvens/following{/other_user}", "gists_url": "https://api.github.com/users/leoyvens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoyvens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoyvens/subscriptions", "organizations_url": "https://api.github.com/users/leoyvens/orgs", "repos_url": "https://api.github.com/users/leoyvens/repos", "events_url": "https://api.github.com/users/leoyvens/events{/privacy}", "received_events_url": "https://api.github.com/users/leoyvens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f93183adb43cff4cc0972ce133ce077f8cae1656", "url": "https://api.github.com/repos/rust-lang/rust/commits/f93183adb43cff4cc0972ce133ce077f8cae1656", "html_url": "https://github.com/rust-lang/rust/commit/f93183adb43cff4cc0972ce133ce077f8cae1656"}], "stats": {"total": 197, "additions": 29, "deletions": 168}, "files": [{"sha": "53c2211745c328dda26a9d50025525b6c2ee6e19", "filename": "src/libstd/panic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3/src%2Flibstd%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3/src%2Flibstd%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanic.rs?ref=02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3", "patch": "@@ -101,7 +101,7 @@ pub use panicking::{take_hook, set_hook, PanicInfo, Location};\n #[stable(feature = \"catch_unwind\", since = \"1.9.0\")]\n #[rustc_on_unimplemented = \"the type {Self} may not be safely transferred \\\n                             across an unwind boundary\"]\n-pub trait UnwindSafe {}\n+pub auto trait UnwindSafe {}\n \n /// A marker trait representing types where a shared reference is considered\n /// unwind safe.\n@@ -115,7 +115,7 @@ pub trait UnwindSafe {}\n #[rustc_on_unimplemented = \"the type {Self} may contain interior mutability \\\n                             and a reference may not be safely transferrable \\\n                             across a catch_unwind boundary\"]\n-pub trait RefUnwindSafe {}\n+pub auto trait RefUnwindSafe {}\n \n /// A simple wrapper around a type to assert that it is unwind safe.\n ///"}, {"sha": "5c32a75639880c5483739371f1fac77da43844e2", "filename": "src/test/compile-fail/auto-impl-future-compat.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f93183adb43cff4cc0972ce133ce077f8cae1656/src%2Ftest%2Fcompile-fail%2Fauto-impl-future-compat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f93183adb43cff4cc0972ce133ce077f8cae1656/src%2Ftest%2Fcompile-fail%2Fauto-impl-future-compat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauto-impl-future-compat.rs?ref=f93183adb43cff4cc0972ce133ce077f8cae1656", "patch": "@@ -1,16 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(optin_builtin_traits)]\n-\n-trait Foo {}\n-impl Foo for .. {}\n-//~^ ERROR The form `impl Foo for .. {}` will be removed, please use `auto trait Foo {}`\n-//~^^ WARN this was previously accepted by the compiler"}, {"sha": "f6f7a250174ba5b2c2b7ded7bd6cea7f506c5eef", "filename": "src/test/compile-fail/auxiliary/tdticc_coherence_lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Ftdticc_coherence_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Ftdticc_coherence_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Ftdticc_coherence_lib.rs?ref=02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3", "patch": "@@ -11,8 +11,6 @@\n #![feature(optin_builtin_traits, core)]\n #![crate_type = \"rlib\"]\n \n-pub trait DefaultedTrait { }\n-#[allow(auto_impl)]\n-impl DefaultedTrait for .. { }\n+pub auto trait DefaultedTrait { }\n \n pub struct Something<T> { t: T }"}, {"sha": "a01bc791a45f20fb236bf14c4165384adecdce20", "filename": "src/test/compile-fail/coherence-default-trait-impl.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3/src%2Ftest%2Fcompile-fail%2Fcoherence-default-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3/src%2Ftest%2Fcompile-fail%2Fcoherence-default-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-default-trait-impl.rs?ref=02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3", "patch": "@@ -10,25 +10,18 @@\n \n #![feature(optin_builtin_traits)]\n \n-trait MyTrait { fn foo() {} }\n+auto trait MySafeTrait {}\n \n-#[allow(auto_impl)]\n-impl MyTrait for .. {}\n-//~^ ERROR redundant auto implementations of trait `MyTrait`\n-\n-#[allow(auto_impl)]\n-impl MyTrait for .. {}\n-\n-trait MySafeTrait {}\n+struct Foo;\n \n #[allow(auto_impl)]\n-unsafe impl MySafeTrait for .. {}\n+unsafe impl MySafeTrait for Foo {}\n //~^ ERROR implementing the trait `MySafeTrait` is not unsafe\n \n-unsafe trait MyUnsafeTrait {}\n+unsafe auto trait MyUnsafeTrait {}\n \n #[allow(auto_impl)]\n-impl MyUnsafeTrait for .. {}\n+impl MyUnsafeTrait for Foo {}\n //~^ ERROR the trait `MyUnsafeTrait` requires an `unsafe impl` declaration\n \n fn main() {}"}, {"sha": "0be80f41661eca4191524cf817d0b9b381902862", "filename": "src/test/compile-fail/issue-23080-2.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3/src%2Ftest%2Fcompile-fail%2Fissue-23080-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3/src%2Ftest%2Fcompile-fail%2Fissue-23080-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23080-2.rs?ref=02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3", "patch": "@@ -12,14 +12,11 @@\n \n #![feature(optin_builtin_traits)]\n \n-unsafe trait Trait {\n+unsafe auto trait Trait {\n //~^ ERROR E0380\n     type Output;\n }\n \n-#[allow(auto_impl)]\n-unsafe impl Trait for .. {}\n-\n fn call_method<T: Trait>(x: T) {}\n \n fn main() {"}, {"sha": "153b6fd07e6d1832cfcebee72ddb08550cf81e41", "filename": "src/test/compile-fail/issue-23080.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3/src%2Ftest%2Fcompile-fail%2Fissue-23080.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3/src%2Ftest%2Fcompile-fail%2Fissue-23080.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23080.rs?ref=02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3", "patch": "@@ -12,16 +12,13 @@\n \n #![feature(optin_builtin_traits)]\n \n-unsafe trait Trait {\n+unsafe auto trait Trait {\n //~^ ERROR E0380\n     fn method(&self) {\n         println!(\"Hello\");\n     }\n }\n \n-#[allow(auto_impl)]\n-unsafe impl Trait for .. {}\n-\n fn call_method<T: Trait>(x: T) {\n     x.method();\n }"}, {"sha": "52bc0126612bfda94361edbbd70d54ae6d0e0fac", "filename": "src/test/compile-fail/phantom-oibit.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3/src%2Ftest%2Fcompile-fail%2Fphantom-oibit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3/src%2Ftest%2Fcompile-fail%2Fphantom-oibit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fphantom-oibit.rs?ref=02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3", "patch": "@@ -16,10 +16,7 @@\n \n use std::marker::{PhantomData};\n \n-unsafe trait Zen {}\n-\n-#[allow(auto_impl)]\n-unsafe impl Zen for .. {}\n+unsafe auto trait Zen {}\n \n unsafe impl<'a, T: 'a> Zen for &'a T where T: Sync {}\n "}, {"sha": "f245b7cef29b9e56f5003408162cd769195d4b5e", "filename": "src/test/compile-fail/privacy-sanity.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3/src%2Ftest%2Fcompile-fail%2Fprivacy-sanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3/src%2Ftest%2Fcompile-fail%2Fprivacy-sanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy-sanity.rs?ref=02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3", "patch": "@@ -10,7 +10,6 @@\n \n #![feature(optin_builtin_traits)]\n \n-trait MarkerTr {}\n pub trait Tr {\n     fn f();\n     const C: u8;\n@@ -21,8 +20,6 @@ pub struct S {\n }\n struct Ts(pub u8);\n \n-#[allow(auto_impl)]\n-pub impl MarkerTr for .. {} //~ ERROR unnecessary visibility qualifier\n pub impl Tr for S {  //~ ERROR unnecessary visibility qualifier\n     pub fn f() {} //~ ERROR unnecessary visibility qualifier\n     pub const C: u8 = 0; //~ ERROR unnecessary visibility qualifier\n@@ -39,7 +36,6 @@ pub extern \"C\" { //~ ERROR unnecessary visibility qualifier\n }\n \n const MAIN: u8 = {\n-    trait MarkerTr {}\n     pub trait Tr {\n         fn f();\n         const C: u8;\n@@ -50,8 +46,6 @@ const MAIN: u8 = {\n     }\n     struct Ts(pub u8);\n \n-    #[allow(auto_impl)]\n-    pub impl MarkerTr for .. {} //~ ERROR unnecessary visibility qualifier\n     pub impl Tr for S {  //~ ERROR unnecessary visibility qualifier\n         pub fn f() {} //~ ERROR unnecessary visibility qualifier\n         pub const C: u8 = 0; //~ ERROR unnecessary visibility qualifier\n@@ -71,7 +65,6 @@ const MAIN: u8 = {\n };\n \n fn main() {\n-    trait MarkerTr {}\n     pub trait Tr {\n         fn f();\n         const C: u8;\n@@ -82,8 +75,6 @@ fn main() {\n     }\n     struct Ts(pub u8);\n \n-    #[allow(auto_impl)]\n-    pub impl MarkerTr for .. {} //~ ERROR unnecessary visibility qualifier\n     pub impl Tr for S {  //~ ERROR unnecessary visibility qualifier\n         pub fn f() {} //~ ERROR unnecessary visibility qualifier\n         pub const C: u8 = 0; //~ ERROR unnecessary visibility qualifier"}, {"sha": "cad43ffeacec9afd002cf17275513a612faa147b", "filename": "src/test/compile-fail/specialization/defaultimpl/specialization-no-default-trait-implementations.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f93183adb43cff4cc0972ce133ce077f8cae1656/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-no-default-trait-implementations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f93183adb43cff4cc0972ce133ce077f8cae1656/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-no-default-trait-implementations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-no-default-trait-implementations.rs?ref=f93183adb43cff4cc0972ce133ce077f8cae1656", "patch": "@@ -1,20 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(specialization)]\n-#![feature(optin_builtin_traits)]\n-\n-trait Foo {}\n-\n-#[allow(auto_impl)]\n-default impl Foo for .. {}\n-//~^ ERROR `default impl` is not allowed for auto trait implementations\n-\n-fn main() {}"}, {"sha": "b28a63c8293aed1103a399cc9a539c47a73e1f7a", "filename": "src/test/compile-fail/specialization/specialization-polarity.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fspecialization-polarity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fspecialization-polarity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fspecialization-polarity.rs?ref=02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3", "patch": "@@ -13,18 +13,12 @@\n #![feature(optin_builtin_traits)]\n #![feature(specialization)]\n \n-trait Foo {}\n-\n-#[allow(auto_impl)]\n-impl Foo for .. {}\n+auto trait Foo {}\n \n impl<T> Foo for T {}\n impl !Foo for u8 {} //~ ERROR E0119\n \n-trait Bar {}\n-\n-#[allow(auto_impl)]\n-impl Bar for .. {}\n+auto trait Bar {}\n \n impl<T> !Bar for T {}\n impl Bar for u8 {} //~ ERROR E0119"}, {"sha": "61c504d3e1be330e4c51615426b54df608e4ab44", "filename": "src/test/compile-fail/traits-inductive-overflow-supertrait-oibit.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3/src%2Ftest%2Fcompile-fail%2Ftraits-inductive-overflow-supertrait-oibit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3/src%2Ftest%2Fcompile-fail%2Ftraits-inductive-overflow-supertrait-oibit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftraits-inductive-overflow-supertrait-oibit.rs?ref=02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3", "patch": "@@ -14,9 +14,7 @@\n \n #![feature(optin_builtin_traits)]\n \n-trait Magic: Copy {} //~ ERROR E0568\n-#[allow(auto_impl)]\n-impl Magic for .. {}\n+auto trait Magic: Copy {} //~ ERROR E0568\n \n fn copy<T: Magic>(x: T) -> (T, T) { (x, x) }\n "}, {"sha": "fa63088d00088028a6e5ae86f7f70f13e892dc42", "filename": "src/test/compile-fail/typeck-auto-trait-no-supertraits-2.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3/src%2Ftest%2Fcompile-fail%2Ftypeck-auto-trait-no-supertraits-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3/src%2Ftest%2Fcompile-fail%2Ftypeck-auto-trait-no-supertraits-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-auto-trait-no-supertraits-2.rs?ref=02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3", "patch": "@@ -10,9 +10,7 @@\n \n #![feature(optin_builtin_traits)]\n \n-trait Magic : Sized where Option<Self> : Magic {} //~ ERROR E0568\n-#[allow(auto_impl)]\n-impl Magic for .. {}\n+auto trait Magic : Sized where Option<Self> : Magic {} //~ ERROR E0568\n impl<T:Magic> Magic for T {}\n \n fn copy<T: Magic>(x: T) -> (T, T) { (x, x) }"}, {"sha": "c8cf96f52fcf1775f4c3d419ee4d14cc9ee233ee", "filename": "src/test/compile-fail/typeck-auto-trait-no-supertraits.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3/src%2Ftest%2Fcompile-fail%2Ftypeck-auto-trait-no-supertraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3/src%2Ftest%2Fcompile-fail%2Ftypeck-auto-trait-no-supertraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-auto-trait-no-supertraits.rs?ref=02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3", "patch": "@@ -34,9 +34,7 @@\n \n #![feature(optin_builtin_traits)]\n \n-trait Magic: Copy {} //~ ERROR E0568\n-#[allow(auto_impl)]\n-impl Magic for .. {}\n+auto trait Magic: Copy {} //~ ERROR E0568\n impl<T:Magic> Magic for T {}\n \n fn copy<T: Magic>(x: T) -> (T, T) { (x, x) }"}, {"sha": "3c409d1b371eb3ee90eb916adcb660fb1854698b", "filename": "src/test/compile-fail/typeck-auto-trait-no-typeparams.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f93183adb43cff4cc0972ce133ce077f8cae1656/src%2Ftest%2Fcompile-fail%2Ftypeck-auto-trait-no-typeparams.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f93183adb43cff4cc0972ce133ce077f8cae1656/src%2Ftest%2Fcompile-fail%2Ftypeck-auto-trait-no-typeparams.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-auto-trait-no-typeparams.rs?ref=f93183adb43cff4cc0972ce133ce077f8cae1656", "patch": "@@ -1,15 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(optin_builtin_traits)]\n-\n-trait Magic<T> {} //~ ERROR E0567\n-#[allow(auto_impl)]\n-impl Magic<isize> for .. {}"}, {"sha": "6e7c9afb6749a8e10fe801a13f38842e96cbeee0", "filename": "src/test/compile-fail/typeck-default-trait-impl-constituent-types-2.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-constituent-types-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-constituent-types-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-constituent-types-2.rs?ref=02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3", "patch": "@@ -10,10 +10,7 @@\n \n #![feature(optin_builtin_traits)]\n \n-trait MyTrait {}\n-\n-#[allow(auto_impl)]\n-impl MyTrait for .. {}\n+auto trait MyTrait {}\n \n struct MyS;\n "}, {"sha": "4660ecf4fb4b424a11d9dab70381898a59073699", "filename": "src/test/compile-fail/typeck-default-trait-impl-constituent-types.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-constituent-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-constituent-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-constituent-types.rs?ref=02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3", "patch": "@@ -10,10 +10,8 @@\n \n #![feature(optin_builtin_traits)]\n \n-trait MyTrait {}\n+auto trait MyTrait {}\n \n-#[allow(auto_impl)]\n-impl MyTrait for .. {}\n impl<T> !MyTrait for *mut T {}\n \n struct MyS;"}, {"sha": "b28cdd8aa2450c74c2b3e14ac1e089a552142851", "filename": "src/test/compile-fail/typeck-default-trait-impl-negation.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-negation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-negation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-negation.rs?ref=02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3", "patch": "@@ -10,15 +10,9 @@\n \n #![feature(optin_builtin_traits)]\n \n-trait MyTrait {}\n+auto trait MyTrait {}\n \n-#[allow(auto_impl)]\n-impl MyTrait for .. {}\n-\n-unsafe trait MyUnsafeTrait {}\n-\n-#[allow(auto_impl)]\n-unsafe impl MyUnsafeTrait for .. {}\n+unsafe auto trait MyUnsafeTrait {}\n \n struct ThisImplsTrait;\n "}, {"sha": "d63d70bad2204e9db7dbcc71b3116c360b697b26", "filename": "src/test/compile-fail/typeck-default-trait-impl-precedence.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-precedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-precedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-precedence.rs?ref=02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3", "patch": "@@ -10,14 +10,12 @@\n \n // Test that declaring that `&T` is `Defaulted` if `T:Signed` implies\n // that other `&T` is NOT `Defaulted` if `T:Signed` does not hold. In\n-// other words, the `..` impl only applies if there are no existing\n+// other words, the auto impl only applies if there are no existing\n // impls whose types unify.\n \n #![feature(optin_builtin_traits)]\n \n-trait Defaulted { }\n-#[allow(auto_impl)]\n-impl Defaulted for .. { }\n+auto trait Defaulted { }\n impl<'a,T:Signed> Defaulted for &'a T { }\n impl<'a,T:Signed> Defaulted for &'a mut T { }\n fn is_defaulted<T:Defaulted>() { }"}, {"sha": "94b91c711cce0d9c7bebb69ef8b7a7c5383d3276", "filename": "src/test/run-make/simd-ffi/simd.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3/src%2Ftest%2Frun-make%2Fsimd-ffi%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3/src%2Ftest%2Frun-make%2Fsimd-ffi%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsimd-ffi%2Fsimd.rs?ref=02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3", "patch": "@@ -80,6 +80,4 @@ pub mod marker {\n }\n \n #[lang = \"freeze\"]\n-trait Freeze {}\n-#[allow(auto_impl)]\n-impl Freeze for .. {}\n+auto trait Freeze {}"}, {"sha": "bbd1c5d900fafbc99088c7294106583a57f979aa", "filename": "src/test/run-make/target-specs/foo.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3/src%2Ftest%2Frun-make%2Ftarget-specs%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3/src%2Ftest%2Frun-make%2Ftarget-specs%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftarget-specs%2Ffoo.rs?ref=02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3", "patch": "@@ -18,9 +18,7 @@ trait Copy { }\n trait Sized { }\n \n #[lang = \"freeze\"]\n-trait Freeze {}\n-#[allow(auto_impl)]\n-impl Freeze for .. {}\n+auto trait Freeze {}\n \n #[lang=\"start\"]\n fn start(_main: *const u8, _argc: isize, _argv: *const *const u8) -> isize { 0 }"}, {"sha": "2511488c94ee84ebbc115c56472e673fedc96a9a", "filename": "src/test/run-pass/auto-traits.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3/src%2Ftest%2Frun-pass%2Fauto-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3/src%2Ftest%2Frun-pass%2Fauto-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-traits.rs?ref=02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3", "patch": "@@ -11,9 +11,6 @@\n #![feature(optin_builtin_traits)]\n \n auto trait Auto {}\n-// Redundant but accepted until we remove it.\n-#[allow(auto_impl)]\n-impl Auto for .. {}\n \n unsafe auto trait AutoUnsafe {}\n "}, {"sha": "465986583b15560d3edb575faddfb31ebaf19592", "filename": "src/test/run-pass/issue-29516.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3/src%2Ftest%2Frun-pass%2Fissue-29516.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3/src%2Ftest%2Frun-pass%2Fissue-29516.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-29516.rs?ref=02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3", "patch": "@@ -10,9 +10,8 @@\n \n #![feature(optin_builtin_traits)]\n \n-trait NotSame {}\n-#[allow(auto_impl)]\n-impl NotSame for .. {}\n+auto trait NotSame {}\n+\n impl<A> !NotSame for (A, A) {}\n \n trait OneOfEach {}"}, {"sha": "34a1331353dca96d1259937dd9d06caaf520ecc7", "filename": "src/test/rustdoc/auxiliary/rustdoc-default-impl.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3/src%2Ftest%2Frustdoc%2Fauxiliary%2Frustdoc-default-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3/src%2Ftest%2Frustdoc%2Fauxiliary%2Frustdoc-default-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Frustdoc-default-impl.rs?ref=02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3", "patch": "@@ -14,10 +14,7 @@\n pub mod bar {\n     use std::marker;\n \n-    pub trait Bar {}\n-\n-    #[allow(auto_impl)]\n-    impl Bar for .. {}\n+    pub auto trait Bar {}\n \n     pub trait Foo {\n         fn foo(&self) {}"}, {"sha": "977d98ca87b10b4cb9fcde1692edd9f3c7e0af79", "filename": "src/test/rustdoc/auxiliary/rustdoc-impl-parts-crosscrate.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3/src%2Ftest%2Frustdoc%2Fauxiliary%2Frustdoc-impl-parts-crosscrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3/src%2Ftest%2Frustdoc%2Fauxiliary%2Frustdoc-impl-parts-crosscrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Frustdoc-impl-parts-crosscrate.rs?ref=02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3", "patch": "@@ -10,7 +10,4 @@\n \n #![feature(optin_builtin_traits)]\n \n-pub trait AnOibit {}\n-\n-#[allow(auto_impl)]\n-impl AnOibit for .. {}\n+pub auto trait AnOibit {}"}, {"sha": "6e472da379c592546b392de66a2917f113cbb4fd", "filename": "src/test/rustdoc/impl-parts.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3/src%2Ftest%2Frustdoc%2Fimpl-parts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3/src%2Ftest%2Frustdoc%2Fimpl-parts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fimpl-parts.rs?ref=02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3", "patch": "@@ -10,10 +10,7 @@\n \n #![feature(optin_builtin_traits)]\n \n-pub trait AnOibit {}\n-\n-#[allow(auto_impl)]\n-impl AnOibit for .. {}\n+pub auto trait AnOibit {}\n \n pub struct Foo<T> { field: T }\n "}, {"sha": "ab3313af16d5d6b325a70539cfbeb82899d3aad3", "filename": "src/test/ui/feature-gate-optin-builtin-traits.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3/src%2Ftest%2Fui%2Ffeature-gate-optin-builtin-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3/src%2Ftest%2Fui%2Ffeature-gate-optin-builtin-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-optin-builtin-traits.rs?ref=02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3", "patch": "@@ -20,10 +20,6 @@ trait DummyTrait {\n auto trait AutoDummyTrait {}\n //~^ ERROR auto traits are experimental and possibly buggy\n \n-#[allow(auto_impl)]\n-impl DummyTrait for .. {}\n-//~^ ERROR auto trait implementations are experimental and possibly buggy\n-\n impl !DummyTrait for DummyStruct {}\n //~^ ERROR negative trait bounds are not yet fully implemented; use marker types for now\n "}, {"sha": "ff0446e23e63e173f680bca7c5d0c1f8f8eb9284", "filename": "src/test/ui/typeck-default-trait-impl-outside-crate.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f93183adb43cff4cc0972ce133ce077f8cae1656/src%2Ftest%2Fui%2Ftypeck-default-trait-impl-outside-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f93183adb43cff4cc0972ce133ce077f8cae1656/src%2Ftest%2Fui%2Ftypeck-default-trait-impl-outside-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck-default-trait-impl-outside-crate.rs?ref=f93183adb43cff4cc0972ce133ce077f8cae1656", "patch": "@@ -1,15 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(optin_builtin_traits)]\n-\n-#[allow(auto_impl)]\n-impl Copy for .. {} //~ ERROR E0318\n-fn main() {}"}]}