{"sha": "3000a3f63d9bb96614a1d8ee9dc4d3005af0489e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwMDBhM2Y2M2Q5YmI5NjYxNGExZDhlZTlkYzRkMzAwNWFmMDQ4OWU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-08-10T14:50:23Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-08-10T14:50:23Z"}, "message": "[WIP] Implement dylib loading for the JIT", "tree": {"sha": "750b9b74f8f5d9638c26aa74dad0c5766dbda17e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/750b9b74f8f5d9638c26aa74dad0c5766dbda17e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3000a3f63d9bb96614a1d8ee9dc4d3005af0489e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3000a3f63d9bb96614a1d8ee9dc4d3005af0489e", "html_url": "https://github.com/rust-lang/rust/commit/3000a3f63d9bb96614a1d8ee9dc4d3005af0489e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3000a3f63d9bb96614a1d8ee9dc4d3005af0489e/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbcffc23cafb8b4965c54860156fa9a0b0a16de1", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbcffc23cafb8b4965c54860156fa9a0b0a16de1", "html_url": "https://github.com/rust-lang/rust/commit/bbcffc23cafb8b4965c54860156fa9a0b0a16de1"}], "stats": {"total": 90, "additions": 78, "deletions": 12}, "files": [{"sha": "c642747e6f01d2ac1d910a49918e1fffb0ca6c85", "filename": "Cargo.lock", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3000a3f63d9bb96614a1d8ee9dc4d3005af0489e/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/3000a3f63d9bb96614a1d8ee9dc4d3005af0489e/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=3000a3f63d9bb96614a1d8ee9dc4d3005af0489e", "patch": "@@ -396,6 +396,15 @@ name = \"libc\"\n version = \"0.2.60\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"libloading\"\n+version = \"0.5.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"cc 1.0.38 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"log\"\n version = \"0.4.8\"\n@@ -606,6 +615,7 @@ dependencies = [\n  \"gimli 0.19.0 (git+https://github.com/gimli-rs/gimli.git)\",\n  \"indexmap 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.60 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libloading 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"object 0.12.0 (git+https://github.com/gimli-rs/object.git)\",\n  \"target-lexicon 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tempfile 3.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -884,6 +894,7 @@ dependencies = [\n \"checksum itoa 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"501266b7edd0174f8530248f87f99c88fbe60ca4ef3dd486835b8d8d53136f7f\"\n \"checksum lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bc5729f27f159ddd61f4df6228e827e86643d4d3e7c32183cb30a1c08f604a14\"\n \"checksum libc 0.2.60 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d44e80633f007889c7eff624b709ab43c92d708caad982295768a7b13ca3b5eb\"\n+\"checksum libloading 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a5692f82b51823e27c4118b3e5c0d98aee9be90633ebc71ad12afef380b50219\"\n \"checksum log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"14b6052be84e6b71ab17edffc2eeabf5c2c3ae1fdb464aae35ac50c67a44e1f7\"\n \"checksum mach 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"86dd2487cdfea56def77b88438a2c915fb45113c5319bfe7e14306ca4cd0b0e1\"\n \"checksum memchr 2.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"88579771288728879b57485cc7d6b07d648c9f0141eb955f8ab7f9d45394468e\""}, {"sha": "ec0350687aacb4aa490ed8470918a1a06a5ede0c", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3000a3f63d9bb96614a1d8ee9dc4d3005af0489e/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3000a3f63d9bb96614a1d8ee9dc4d3005af0489e/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=3000a3f63d9bb96614a1d8ee9dc4d3005af0489e", "patch": "@@ -26,6 +26,7 @@ tempfile = \"3.0.7\"\n gimli = { git = \"https://github.com/gimli-rs/gimli.git\" }\n indexmap = \"1.0.2\"\n object = \"0.12.0\"\n+libloading = \"0.5.1\"\n \n [patch.\"https://github.com/CraneStation/cranelift.git\"]\n cranelift = { git = \"https://github.com/bjorn3/cretonne.git\", branch = \"do_not_remove_cg_clif_i128\" }"}, {"sha": "1d5c78c8e729d8c3151d88b034e7bd71e70bd0bf", "filename": "config.sh", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3000a3f63d9bb96614a1d8ee9dc4d3005af0489e/config.sh", "raw_url": "https://github.com/rust-lang/rust/raw/3000a3f63d9bb96614a1d8ee9dc4d3005af0489e/config.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.sh?ref=3000a3f63d9bb96614a1d8ee9dc4d3005af0489e", "patch": "@@ -15,3 +15,6 @@ TARGET_TRIPLE=$(rustc -vV | grep host | cut -d: -f2 | tr -d \" \")\n export RUSTFLAGS='-Zalways-encode-mir -Cpanic=abort -Cdebuginfo=2 -Zcodegen-backend='$(pwd)'/target/'$CHANNEL'/librustc_codegen_cranelift.'$dylib_ext' --sysroot '$(pwd)'/build_sysroot/sysroot'\n RUSTC=\"rustc $RUSTFLAGS -L crate=target/out --out-dir target/out\"\n export RUSTC_LOG=warn # display metadata load errors\n+\n+export LD_LIBRARY_PATH=$(pwd)/target/out\n+export DYLD_LIBRARY_PATH=$(pwd)/target/out"}, {"sha": "84664eb41392789df823b72d9d8b728c446cef76", "filename": "example/mini_core.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3000a3f63d9bb96614a1d8ee9dc4d3005af0489e/example%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3000a3f63d9bb96614a1d8ee9dc4d3005af0489e/example%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core.rs?ref=3000a3f63d9bb96614a1d8ee9dc4d3005af0489e", "patch": "@@ -369,9 +369,6 @@ pub trait FnMut<Args>: FnOnce<Args> {\n }\n \n #[lang = \"panic\"]\n-// Make it available to jited mini_core_hello_world\n-// FIXME remove next line when jit supports linking rlibs\n-#[inline(always)]\n pub fn panic(&(_msg, _file, _line, _col): &(&'static str, &'static str, u32, u32)) -> ! {\n     unsafe {\n         libc::puts(\"Panicking\\0\" as *const str as *const u8);\n@@ -419,15 +416,11 @@ impl<T> Deref for Box<T> {\n }\n \n #[lang = \"exchange_malloc\"]\n-// Make it available to jited mini_core_hello_world\n-// FIXME remove next line when jit supports linking rlibs\n-#[inline(always)]\n unsafe fn allocate(size: usize, _align: usize) -> *mut u8 {\n     libc::malloc(size)\n }\n \n #[lang = \"box_free\"]\n-#[inline(always)]\n unsafe fn box_free<T: ?Sized>(ptr: *mut T) {\n     libc::free(ptr as *mut u8);\n }"}, {"sha": "e3bf4a0d56936eac92ca5d9425627a3e6020bfe7", "filename": "src/driver.rs", "status": "modified", "additions": 57, "deletions": 2, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/3000a3f63d9bb96614a1d8ee9dc4d3005af0489e/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3000a3f63d9bb96614a1d8ee9dc4d3005af0489e/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=3000a3f63d9bb96614a1d8ee9dc4d3005af0489e", "patch": "@@ -48,9 +48,64 @@ pub fn codegen_crate(\n fn run_jit(tcx: TyCtxt<'_>, log: &mut Option<File>) -> ! {\n     use cranelift_simplejit::{SimpleJITBackend, SimpleJITBuilder};\n \n-    let mut jit_module: Module<SimpleJITBackend> = Module::new(SimpleJITBuilder::new(\n+    let mut dylib_paths = Vec::new();\n+\n+    {\n+        use rustc::middle::dependency_format::Linkage;\n+\n+        let crate_info = CrateInfo::new(tcx);\n+        let formats = tcx.sess.dependency_formats.borrow();\n+        let data = formats.get(&CrateType::Executable).unwrap();\n+        for &(cnum, _) in &crate_info.used_crates_dynamic {\n+            let src = &crate_info.used_crate_source[&cnum];\n+            match data[cnum.as_usize() - 1] {\n+                _ if crate_info.profiler_runtime == Some(cnum) =>  unimplemented!(),\n+                _ if crate_info.sanitizer_runtime == Some(cnum) => unimplemented!(),\n+\n+                // compiler-builtins are always placed last to ensure that they're\n+                // linked correctly.\n+                _ if crate_info.compiler_builtins == Some(cnum) => {\n+                    unimplemented!();\n+                }\n+                Linkage::NotLinked |\n+                Linkage::IncludedFromDylib => {}\n+                Linkage::Static => {\n+                    let name = tcx.crate_name(cnum);\n+                    let mut err = tcx.sess.struct_fatal(&format!(\"Can't load static lib {}\", name.as_str()));\n+                    err.note(\"rustc_codegen_cranelift can only load dylibs in JIT mode.\");\n+                    err.emit();\n+                }\n+                Linkage::Dynamic => {\n+                    dylib_paths.push(src.dylib.as_ref().unwrap().0.clone());\n+                }\n+            }\n+        }\n+    }\n+\n+    let mut imported_symbols = Vec::new();\n+    for path in dylib_paths {\n+        use object::Object;\n+        let lib = libloading::Library::new(&path).unwrap();\n+        let obj = std::fs::read(path).unwrap();\n+        let obj = object::File::parse(&obj).unwrap();\n+        imported_symbols.extend(obj.dynamic_symbols().filter_map(|(_idx, symbol)| {\n+            let name = symbol.name().unwrap().to_string();\n+            if name.is_empty() || !symbol.is_global() || symbol.is_undefined() {\n+                return None;\n+            }\n+            println!(\"name: {:?}\", name);\n+            let symbol: libloading::Symbol<*const u8> =\n+                unsafe { lib.get(name.as_bytes()) }.unwrap();\n+            Some((name, *symbol))\n+        }));\n+        std::mem::forget(lib)\n+    }\n+\n+    let mut jit_builder = SimpleJITBuilder::new(\n         cranelift_module::default_libcall_names(),\n-    ));\n+    );\n+    jit_builder.symbols(imported_symbols);\n+    let mut jit_module: Module<SimpleJITBackend> = Module::new(jit_builder);\n     assert_eq!(pointer_ty(tcx), jit_module.target_config().pointer_type());\n \n     let sig = Signature {"}, {"sha": "71c3ba50f7e1cc947bcf524ef29061bc6f4dcd5d", "filename": "test.sh", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3000a3f63d9bb96614a1d8ee9dc4d3005af0489e/test.sh", "raw_url": "https://github.com/rust-lang/rust/raw/3000a3f63d9bb96614a1d8ee9dc4d3005af0489e/test.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test.sh?ref=3000a3f63d9bb96614a1d8ee9dc4d3005af0489e", "patch": "@@ -33,13 +33,16 @@ $RUSTC example/arbitrary_self_types_pointers_and_wrappers.rs --crate-name arbitr\n ./target/out/arbitrary_self_types_pointers_and_wrappers\n \n echo \"[BUILD] sysroot\"\n-time ./build_sysroot/build_sysroot.sh\n+#time ./build_sysroot/build_sysroot.sh\n \n-echo \"[BUILD+RUN] alloc_example\"\n+echo \"[AOT] alloc_example\"\n $RUSTC example/alloc_example.rs --crate-type bin\n ./target/out/alloc_example\n \n-echo \"[BUILD+RUN] std_example\"\n+echo \"[JIT] std_example\"\n+SHOULD_RUN=1 $RUSTC example/std_example.rs --crate-type bin -Cprefer-dynamic\n+\n+echo \"[AOT] std_example\"\n $RUSTC example/std_example.rs --crate-type bin\n ./target/out/std_example\n "}]}