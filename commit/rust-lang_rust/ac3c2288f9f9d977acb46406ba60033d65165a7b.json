{"sha": "ac3c2288f9f9d977acb46406ba60033d65165a7b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjM2MyMjg4ZjlmOWQ5NzdhY2I0NjQwNmJhNjAwMzNkNjUxNjVhN2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-18T19:47:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-18T19:47:56Z"}, "message": "Auto merge of #50017 - tinaun:stabilize-all-the-things, r=sfackler\n\nstabilize a bunch of minor api additions\n\nbesides `ptr::NonNull::cast` (which is 4 days away from end of FCP) all of these have been finished with FCP for a few weeks now with minimal issues raised\n\n* Closes #41020\n* Closes #42818\n* Closes #44030\n* Closes #44400\n* Closes #46507\n* Closes #47653\n* Closes #46344\n\nthe following functions will be stabilized in 1.27:\n* `[T]::rsplit`\n* `[T]::rsplit_mut`\n* `[T]::swap_with_slice`\n* `ptr::swap_nonoverlapping`\n* `NonNull::cast`\n* `Duration::from_micros`\n* `Duration::from_nanos`\n* `Duration::subsec_millis`\n* `Duration::subsec_micros`\n* `HashMap::remove_entry`", "tree": {"sha": "8dd14931165ad832b8a97b587f7fa05ccf7438eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8dd14931165ad832b8a97b587f7fa05ccf7438eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac3c2288f9f9d977acb46406ba60033d65165a7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac3c2288f9f9d977acb46406ba60033d65165a7b", "html_url": "https://github.com/rust-lang/rust/commit/ac3c2288f9f9d977acb46406ba60033d65165a7b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac3c2288f9f9d977acb46406ba60033d65165a7b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8fa49f83b78cb80b74d7a61ade32a4cc980bfdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8fa49f83b78cb80b74d7a61ade32a4cc980bfdc", "html_url": "https://github.com/rust-lang/rust/commit/c8fa49f83b78cb80b74d7a61ade32a4cc980bfdc"}, {"sha": "fd042eee0002bc2640447c08034de00171ca1aa3", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd042eee0002bc2640447c08034de00171ca1aa3", "html_url": "https://github.com/rust-lang/rust/commit/fd042eee0002bc2640447c08034de00171ca1aa3"}], "stats": {"total": 87, "additions": 28, "deletions": 59}, "files": [{"sha": "8c2954f7294e02b666e4ad15244be99048f15867", "filename": "src/doc/unstable-book/src/library-features/slice-rsplit.md", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c8fa49f83b78cb80b74d7a61ade32a4cc980bfdc/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fslice-rsplit.md", "raw_url": "https://github.com/rust-lang/rust/raw/c8fa49f83b78cb80b74d7a61ade32a4cc980bfdc/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fslice-rsplit.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fslice-rsplit.md?ref=c8fa49f83b78cb80b74d7a61ade32a4cc980bfdc", "patch": "@@ -1,10 +0,0 @@\n-# `slice_rsplit`\n-\n-The tracking issue for this feature is: [#41020]\n-\n-[#41020]: https://github.com/rust-lang/rust/issues/41020\n-\n-------------------------\n-\n-The `slice_rsplit` feature enables two methods on slices:\n-`slice.rsplit(predicate)` and `slice.rsplit_mut(predicate)`."}, {"sha": "163aef61b43628746a9e2f6f2dabf9f1062e3e44", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac3c2288f9f9d977acb46406ba60033d65165a7b/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac3c2288f9f9d977acb46406ba60033d65165a7b/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=ac3c2288f9f9d977acb46406ba60033d65165a7b", "patch": "@@ -99,7 +99,6 @@\n #![feature(lang_items)]\n #![feature(libc)]\n #![feature(needs_allocator)]\n-#![feature(nonnull_cast)]\n #![feature(nonzero)]\n #![feature(optin_builtin_traits)]\n #![feature(pattern)]\n@@ -108,7 +107,6 @@\n #![feature(ptr_offset_from)]\n #![feature(rustc_attrs)]\n #![feature(slice_get_slice)]\n-#![feature(slice_rsplit)]\n #![feature(specialization)]\n #![feature(staged_api)]\n #![feature(str_internals)]\n@@ -124,7 +122,7 @@\n #![feature(inclusive_range_fields)]\n #![cfg_attr(stage0, feature(generic_param_attrs))]\n \n-#![cfg_attr(not(test), feature(fn_traits, swap_with_slice, i128))]\n+#![cfg_attr(not(test), feature(fn_traits, i128))]\n #![cfg_attr(test, feature(test))]\n \n // Allow testing this library"}, {"sha": "33e652856e816f2122b9dc5db91856b940c5c7ee", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ac3c2288f9f9d977acb46406ba60033d65165a7b/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac3c2288f9f9d977acb46406ba60033d65165a7b/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=ac3c2288f9f9d977acb46406ba60033d65165a7b", "patch": "@@ -116,7 +116,7 @@ pub use core::slice::{Iter, IterMut};\n pub use core::slice::{SplitMut, ChunksMut, Split};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::slice::{SplitN, RSplitN, SplitNMut, RSplitNMut};\n-#[unstable(feature = \"slice_rsplit\", issue = \"41020\")]\n+#[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n pub use core::slice::{RSplit, RSplitMut};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::slice::{from_raw_parts, from_raw_parts_mut};\n@@ -888,7 +888,6 @@ impl<T> [T] {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(slice_rsplit)]\n     ///\n     /// let slice = [11, 22, 33, 0, 44, 55];\n     /// let mut iter = slice.rsplit(|num| *num == 0);\n@@ -902,8 +901,6 @@ impl<T> [T] {\n     /// slice will be the first (or last) item returned by the iterator.\n     ///\n     /// ```\n-    /// #![feature(slice_rsplit)]\n-    ///\n     /// let v = &[0, 1, 1, 2, 3, 5, 8];\n     /// let mut it = v.rsplit(|n| *n % 2 == 0);\n     /// assert_eq!(it.next().unwrap(), &[]);\n@@ -912,7 +909,7 @@ impl<T> [T] {\n     /// assert_eq!(it.next().unwrap(), &[]);\n     /// assert_eq!(it.next(), None);\n     /// ```\n-    #[unstable(feature = \"slice_rsplit\", issue = \"41020\")]\n+    #[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n     #[inline]\n     pub fn rsplit<F>(&self, pred: F) -> RSplit<T, F>\n         where F: FnMut(&T) -> bool\n@@ -927,8 +924,6 @@ impl<T> [T] {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(slice_rsplit)]\n-    ///\n     /// let mut v = [100, 400, 300, 200, 600, 500];\n     ///\n     /// let mut count = 0;\n@@ -939,7 +934,7 @@ impl<T> [T] {\n     /// assert_eq!(v, [3, 400, 300, 2, 600, 1]);\n     /// ```\n     ///\n-    #[unstable(feature = \"slice_rsplit\", issue = \"41020\")]\n+    #[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n     #[inline]\n     pub fn rsplit_mut<F>(&mut self, pred: F) -> RSplitMut<T, F>\n         where F: FnMut(&T) -> bool\n@@ -1707,8 +1702,6 @@ impl<T> [T] {\n     /// Swapping two elements across slices:\n     ///\n     /// ```\n-    /// #![feature(swap_with_slice)]\n-    ///\n     /// let mut slice1 = [0, 0];\n     /// let mut slice2 = [1, 2, 3, 4];\n     ///\n@@ -1724,8 +1717,6 @@ impl<T> [T] {\n     /// a compile failure:\n     ///\n     /// ```compile_fail\n-    /// #![feature(swap_with_slice)]\n-    ///\n     /// let mut slice = [1, 2, 3, 4, 5];\n     /// slice[..2].swap_with_slice(&mut slice[3..]); // compile fail!\n     /// ```\n@@ -1734,8 +1725,6 @@ impl<T> [T] {\n     /// mutable sub-slices from a slice:\n     ///\n     /// ```\n-    /// #![feature(swap_with_slice)]\n-    ///\n     /// let mut slice = [1, 2, 3, 4, 5];\n     ///\n     /// {\n@@ -1747,7 +1736,7 @@ impl<T> [T] {\n     /// ```\n     ///\n     /// [`split_at_mut`]: #method.split_at_mut\n-    #[unstable(feature = \"swap_with_slice\", issue = \"44030\")]\n+    #[stable(feature = \"swap_with_slice\", since = \"1.27.0\")]\n     pub fn swap_with_slice(&mut self, other: &mut [T]) {\n         core_slice::SliceExt::swap_with_slice(self, other)\n     }"}, {"sha": "74bb264cc679cc31c310cefade5b196cbd6881b8", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ac3c2288f9f9d977acb46406ba60033d65165a7b/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac3c2288f9f9d977acb46406ba60033d65165a7b/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=ac3c2288f9f9d977acb46406ba60033d65165a7b", "patch": "@@ -166,8 +166,6 @@ pub unsafe fn swap<T>(x: *mut T, y: *mut T) {\n /// Basic usage:\n ///\n /// ```\n-/// #![feature(swap_nonoverlapping)]\n-///\n /// use std::ptr;\n ///\n /// let mut x = [1, 2, 3, 4];\n@@ -181,7 +179,7 @@ pub unsafe fn swap<T>(x: *mut T, y: *mut T) {\n /// assert_eq!(y, [1, 2, 9]);\n /// ```\n #[inline]\n-#[unstable(feature = \"swap_nonoverlapping\", issue = \"42818\")]\n+#[stable(feature = \"swap_nonoverlapping\", since = \"1.27.0\")]\n pub unsafe fn swap_nonoverlapping<T>(x: *mut T, y: *mut T, count: usize) {\n     let x = x as *mut u8;\n     let y = y as *mut u8;\n@@ -2744,7 +2742,7 @@ impl<T: ?Sized> NonNull<T> {\n     }\n \n     /// Cast to a pointer of another type\n-    #[unstable(feature = \"nonnull_cast\", issue = \"47653\")]\n+    #[stable(feature = \"nonnull_cast\", since = \"1.27.0\")]\n     pub fn cast<U>(self) -> NonNull<U> {\n         unsafe {\n             NonNull::new_unchecked(self.as_ptr() as *mut U)"}, {"sha": "afb149f29977c018cf82459893a4de64747128c8", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ac3c2288f9f9d977acb46406ba60033d65165a7b/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac3c2288f9f9d977acb46406ba60033d65165a7b/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=ac3c2288f9f9d977acb46406ba60033d65165a7b", "patch": "@@ -86,7 +86,7 @@ pub trait SliceExt {\n     fn split<P>(&self, pred: P) -> Split<Self::Item, P>\n         where P: FnMut(&Self::Item) -> bool;\n \n-    #[unstable(feature = \"slice_rsplit\", issue = \"41020\")]\n+    #[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n     fn rsplit<P>(&self, pred: P) -> RSplit<Self::Item, P>\n         where P: FnMut(&Self::Item) -> bool;\n \n@@ -169,7 +169,7 @@ pub trait SliceExt {\n     fn split_mut<P>(&mut self, pred: P) -> SplitMut<Self::Item, P>\n         where P: FnMut(&Self::Item) -> bool;\n \n-    #[unstable(feature = \"slice_rsplit\", issue = \"41020\")]\n+    #[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n     fn rsplit_mut<P>(&mut self, pred: P) -> RSplitMut<Self::Item, P>\n         where P: FnMut(&Self::Item) -> bool;\n \n@@ -223,7 +223,7 @@ pub trait SliceExt {\n     #[stable(feature = \"copy_from_slice\", since = \"1.9.0\")]\n     fn copy_from_slice(&mut self, src: &[Self::Item]) where Self::Item: Copy;\n \n-    #[unstable(feature = \"swap_with_slice\", issue = \"44030\")]\n+    #[stable(feature = \"swap_with_slice\", since = \"1.27.0\")]\n     fn swap_with_slice(&mut self, src: &mut [Self::Item]);\n \n     #[stable(feature = \"sort_unstable\", since = \"1.20.0\")]\n@@ -1840,13 +1840,13 @@ impl<'a, T, P> FusedIterator for SplitMut<'a, T, P> where P: FnMut(&T) -> bool {\n ///\n /// [`rsplit`]: ../../std/primitive.slice.html#method.rsplit\n /// [slices]: ../../std/primitive.slice.html\n-#[unstable(feature = \"slice_rsplit\", issue = \"41020\")]\n+#[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n #[derive(Clone)] // Is this correct, or does it incorrectly require `T: Clone`?\n pub struct RSplit<'a, T:'a, P> where P: FnMut(&T) -> bool {\n     inner: Split<'a, T, P>\n }\n \n-#[unstable(feature = \"slice_rsplit\", issue = \"41020\")]\n+#[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n impl<'a, T: 'a + fmt::Debug, P> fmt::Debug for RSplit<'a, T, P> where P: FnMut(&T) -> bool {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_struct(\"RSplit\")\n@@ -1856,7 +1856,7 @@ impl<'a, T: 'a + fmt::Debug, P> fmt::Debug for RSplit<'a, T, P> where P: FnMut(&\n     }\n }\n \n-#[unstable(feature = \"slice_rsplit\", issue = \"41020\")]\n+#[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n impl<'a, T, P> Iterator for RSplit<'a, T, P> where P: FnMut(&T) -> bool {\n     type Item = &'a [T];\n \n@@ -1871,23 +1871,23 @@ impl<'a, T, P> Iterator for RSplit<'a, T, P> where P: FnMut(&T) -> bool {\n     }\n }\n \n-#[unstable(feature = \"slice_rsplit\", issue = \"41020\")]\n+#[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n impl<'a, T, P> DoubleEndedIterator for RSplit<'a, T, P> where P: FnMut(&T) -> bool {\n     #[inline]\n     fn next_back(&mut self) -> Option<&'a [T]> {\n         self.inner.next()\n     }\n }\n \n-#[unstable(feature = \"slice_rsplit\", issue = \"41020\")]\n+#[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n impl<'a, T, P> SplitIter for RSplit<'a, T, P> where P: FnMut(&T) -> bool {\n     #[inline]\n     fn finish(&mut self) -> Option<&'a [T]> {\n         self.inner.finish()\n     }\n }\n \n-#[unstable(feature = \"slice_rsplit\", issue = \"41020\")]\n+#[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n impl<'a, T, P> FusedIterator for RSplit<'a, T, P> where P: FnMut(&T) -> bool {}\n \n /// An iterator over the subslices of the vector which are separated\n@@ -1897,12 +1897,12 @@ impl<'a, T, P> FusedIterator for RSplit<'a, T, P> where P: FnMut(&T) -> bool {}\n ///\n /// [`rsplit_mut`]: ../../std/primitive.slice.html#method.rsplit_mut\n /// [slices]: ../../std/primitive.slice.html\n-#[unstable(feature = \"slice_rsplit\", issue = \"41020\")]\n+#[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n pub struct RSplitMut<'a, T:'a, P> where P: FnMut(&T) -> bool {\n     inner: SplitMut<'a, T, P>\n }\n \n-#[unstable(feature = \"slice_rsplit\", issue = \"41020\")]\n+#[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n impl<'a, T: 'a + fmt::Debug, P> fmt::Debug for RSplitMut<'a, T, P> where P: FnMut(&T) -> bool {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_struct(\"RSplitMut\")\n@@ -1912,15 +1912,15 @@ impl<'a, T: 'a + fmt::Debug, P> fmt::Debug for RSplitMut<'a, T, P> where P: FnMu\n     }\n }\n \n-#[unstable(feature = \"slice_rsplit\", issue = \"41020\")]\n+#[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n impl<'a, T, P> SplitIter for RSplitMut<'a, T, P> where P: FnMut(&T) -> bool {\n     #[inline]\n     fn finish(&mut self) -> Option<&'a mut [T]> {\n         self.inner.finish()\n     }\n }\n \n-#[unstable(feature = \"slice_rsplit\", issue = \"41020\")]\n+#[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n impl<'a, T, P> Iterator for RSplitMut<'a, T, P> where P: FnMut(&T) -> bool {\n     type Item = &'a mut [T];\n \n@@ -1935,7 +1935,7 @@ impl<'a, T, P> Iterator for RSplitMut<'a, T, P> where P: FnMut(&T) -> bool {\n     }\n }\n \n-#[unstable(feature = \"slice_rsplit\", issue = \"41020\")]\n+#[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n impl<'a, T, P> DoubleEndedIterator for RSplitMut<'a, T, P> where\n     P: FnMut(&T) -> bool,\n {\n@@ -1945,7 +1945,7 @@ impl<'a, T, P> DoubleEndedIterator for RSplitMut<'a, T, P> where\n     }\n }\n \n-#[unstable(feature = \"slice_rsplit\", issue = \"41020\")]\n+#[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n impl<'a, T, P> FusedIterator for RSplitMut<'a, T, P> where P: FnMut(&T) -> bool {}\n \n /// An private iterator over subslices separated by elements that"}, {"sha": "e22fe450bb1f6562ac0e5f8c3e13fbb4211521d1", "filename": "src/libcore/time.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ac3c2288f9f9d977acb46406ba60033d65165a7b/src%2Flibcore%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac3c2288f9f9d977acb46406ba60033d65165a7b/src%2Flibcore%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftime.rs?ref=ac3c2288f9f9d977acb46406ba60033d65165a7b", "patch": "@@ -137,15 +137,14 @@ impl Duration {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(duration_from_micros)]\n     /// use std::time::Duration;\n     ///\n     /// let duration = Duration::from_micros(1_000_002);\n     ///\n     /// assert_eq!(1, duration.as_secs());\n     /// assert_eq!(2000, duration.subsec_nanos());\n     /// ```\n-    #[unstable(feature = \"duration_from_micros\", issue = \"44400\")]\n+    #[stable(feature = \"duration_from_micros\", since = \"1.27.0\")]\n     #[inline]\n     pub const fn from_micros(micros: u64) -> Duration {\n         Duration {\n@@ -159,15 +158,14 @@ impl Duration {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(duration_extras)]\n     /// use std::time::Duration;\n     ///\n     /// let duration = Duration::from_nanos(1_000_000_123);\n     ///\n     /// assert_eq!(1, duration.as_secs());\n     /// assert_eq!(123, duration.subsec_nanos());\n     /// ```\n-    #[unstable(feature = \"duration_extras\", issue = \"46507\")]\n+    #[stable(feature = \"duration_extras\", since = \"1.27.0\")]\n     #[inline]\n     pub const fn from_nanos(nanos: u64) -> Duration {\n         Duration {\n@@ -217,14 +215,13 @@ impl Duration {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(duration_extras)]\n     /// use std::time::Duration;\n     ///\n     /// let duration = Duration::from_millis(5432);\n     /// assert_eq!(duration.as_secs(), 5);\n     /// assert_eq!(duration.subsec_millis(), 432);\n     /// ```\n-    #[unstable(feature = \"duration_extras\", issue = \"46507\")]\n+    #[stable(feature = \"duration_extras\", since = \"1.27.0\")]\n     #[inline]\n     pub fn subsec_millis(&self) -> u32 { self.nanos / NANOS_PER_MILLI }\n \n@@ -237,14 +234,13 @@ impl Duration {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(duration_extras, duration_from_micros)]\n     /// use std::time::Duration;\n     ///\n     /// let duration = Duration::from_micros(1_234_567);\n     /// assert_eq!(duration.as_secs(), 1);\n     /// assert_eq!(duration.subsec_micros(), 234_567);\n     /// ```\n-    #[unstable(feature = \"duration_extras\", issue = \"46507\")]\n+    #[stable(feature = \"duration_extras\", since = \"1.27.0\")]\n     #[inline]\n     pub fn subsec_micros(&self) -> u32 { self.nanos / NANOS_PER_MICRO }\n "}, {"sha": "14ef8563bb06483b30d56e1665a7409cb8812bbe", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ac3c2288f9f9d977acb46406ba60033d65165a7b/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac3c2288f9f9d977acb46406ba60033d65165a7b/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=ac3c2288f9f9d977acb46406ba60033d65165a7b", "patch": "@@ -1379,7 +1379,6 @@ impl<K, V, S> HashMap<K, V, S>\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(hash_map_remove_entry)]\n     /// use std::collections::HashMap;\n     ///\n     /// # fn main() {\n@@ -1389,7 +1388,7 @@ impl<K, V, S> HashMap<K, V, S>\n     /// assert_eq!(map.remove(&1), None);\n     /// # }\n     /// ```\n-    #[unstable(feature = \"hash_map_remove_entry\", issue = \"46344\")]\n+    #[stable(feature = \"hash_map_remove_entry\", since = \"1.27.0\")]\n     pub fn remove_entry<Q: ?Sized>(&mut self, k: &Q) -> Option<(K, V)>\n         where K: Borrow<Q>,\n               Q: Hash + Eq"}, {"sha": "7d8966953114e9a8fe15c17c4c00e75398bac5d2", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac3c2288f9f9d977acb46406ba60033d65165a7b/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac3c2288f9f9d977acb46406ba60033d65165a7b/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=ac3c2288f9f9d977acb46406ba60033d65165a7b", "patch": "@@ -275,7 +275,6 @@\n #![feature(macro_reexport)]\n #![feature(macro_vis_matcher)]\n #![feature(needs_panic_runtime)]\n-#![feature(nonnull_cast)]\n #![feature(exhaustive_patterns)]\n #![feature(nonzero)]\n #![feature(num_bits_bytes)]"}, {"sha": "afa3494c3891941dfdb8ecde5b44b80fe9e53ae0", "filename": "src/test/run-pass/realloc-16687.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac3c2288f9f9d977acb46406ba60033d65165a7b/src%2Ftest%2Frun-pass%2Frealloc-16687.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac3c2288f9f9d977acb46406ba60033d65165a7b/src%2Ftest%2Frun-pass%2Frealloc-16687.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frealloc-16687.rs?ref=ac3c2288f9f9d977acb46406ba60033d65165a7b", "patch": "@@ -13,7 +13,7 @@\n // Ideally this would be revised to use no_std, but for now it serves\n // well enough to reproduce (and illustrate) the bug from #16687.\n \n-#![feature(heap_api, allocator_api, nonnull_cast)]\n+#![feature(heap_api, allocator_api)]\n \n use std::alloc::{Global, Alloc, Layout};\n use std::ptr::{self, NonNull};"}]}