{"sha": "91be8cadcbcc94eaf78393fc8254b03c6177bca8", "node_id": "C_kwDOAAsO6NoAKDkxYmU4Y2FkY2JjYzk0ZWFmNzgzOTNmYzgyNTRiMDNjNjE3N2JjYTg", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-03-10T14:44:58Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-04-03T07:30:33Z"}, "message": "properly match multiple families", "tree": {"sha": "be01e7e92285ea2c94ca42d089485a5e33bdcf4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be01e7e92285ea2c94ca42d089485a5e33bdcf4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91be8cadcbcc94eaf78393fc8254b03c6177bca8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmQqgJkACgkQzXazX3c0\ndp4/eQ//UMnyj7fwvt8OFarrBLIUmJ+Wp8XnUtVQy2ZOO4s7FJlwKQL3WAhqNb5+\nIzi2rqpuKFkP1JgfzgxQOkPKKm8AYwG1MiC9pgXxxO2uTGwKufsRyo4Q25BdcrlD\nBKI0k2Wdy+uqLQbYMF0eD3D01QTqAS1RpfrpPB1N0LiTjUVgoNqRCwRvLO+fehNF\nibW68Rc/eSnVAtnh3S8K5SnXEwV4ZPkjv5hJ8qwtRihgsbdfsEUlotXkL2IaI8Ba\nsiyovONU5lnjIXh6bhMimnP5YIPYwxnbkx+ncIboJ3OIsqHlozGla+JRgGiwJbFr\nigd2L12ubiDV1Avqo9sQEJPtqjArAOaKZobCAFgglbjpb8fR3JnD4KwHFhjVHlUO\n1wjz8iJtlJXionv8XSegqghIX/yx1hQ3I1ecn9/1Te1rffHmNEZy1IaPH067ap0s\n6nIQ522KRDaLltfDCKGTnk1RPja39Q6XzWANi8rMqVvUx5cz0Hy89WbzWTn6eqgd\n14XPtftGu+L8qup8NMq8tydTyBSXRd1B/vGb4YO7L1cprVj9fg/VVFdN+8SNCTR4\np/BD5roxYcwe1uWZlMGxPEXChFItKznmnHqnm1bztK+eV2OOVAajiqllFQwHfym+\nIy5OzC7iVmi7L4tDGe2jNDd2q8IOy5Y24mQ2LnQr9CbrnWPFZcI=\n=YYfl\n-----END PGP SIGNATURE-----", "payload": "tree be01e7e92285ea2c94ca42d089485a5e33bdcf4c\nparent 4cdb783cb9813ab3f627303e6d763a49ee730e33\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1678459498 +0100\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1680507033 +0200\n\nproperly match multiple families\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91be8cadcbcc94eaf78393fc8254b03c6177bca8", "html_url": "https://github.com/rust-lang/rust/commit/91be8cadcbcc94eaf78393fc8254b03c6177bca8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91be8cadcbcc94eaf78393fc8254b03c6177bca8/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cdb783cb9813ab3f627303e6d763a49ee730e33", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cdb783cb9813ab3f627303e6d763a49ee730e33", "html_url": "https://github.com/rust-lang/rust/commit/4cdb783cb9813ab3f627303e6d763a49ee730e33"}], "stats": {"total": 64, "additions": 39, "deletions": 25}, "files": [{"sha": "0c3250b7f760ce85ef1eab9d0b7aba1832a892ef", "filename": "src/tools/compiletest/src/header/cfg.rs", "status": "modified", "additions": 39, "deletions": 25, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/91be8cadcbcc94eaf78393fc8254b03c6177bca8/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91be8cadcbcc94eaf78393fc8254b03c6177bca8/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Fcfg.rs?ref=91be8cadcbcc94eaf78393fc8254b03c6177bca8", "patch": "@@ -30,7 +30,7 @@ pub(super) fn parse_cfg_name_directive<'a>(\n     let mut outcome = MatchOutcome::Invalid;\n     let mut message = None;\n \n-    macro_rules! maybe_condition {\n+    macro_rules! condition {\n         (\n             name: $name:expr,\n             $(allowed_names: $allowed_names:expr,)?\n@@ -42,7 +42,7 @@ pub(super) fn parse_cfg_name_directive<'a>(\n \n             if outcome != MatchOutcome::Invalid {\n                 // Ignore all other matches if we already found one\n-            } else if $name.as_ref().map(|n| n == &name).unwrap_or(false) {\n+            } else if $name.custom_matches(name) {\n                 message = Some(format_message());\n                 if true $(&& $condition)? {\n                     outcome = MatchOutcome::Match;\n@@ -56,21 +56,6 @@ pub(super) fn parse_cfg_name_directive<'a>(\n             })?\n         }};\n     }\n-    macro_rules! condition {\n-        (\n-            name: $name:expr,\n-            $(allowed_names: $allowed_names:expr,)?\n-            $(condition: $condition:expr,)?\n-            message: $($message:tt)*\n-        ) => {\n-            maybe_condition! {\n-                name: Some($name),\n-                $(allowed_names: $allowed_names,)*\n-                $(condition: $condition,)*\n-                message: $($message)*\n-            }\n-        };\n-    }\n \n     let target_cfgs = config.target_cfgs();\n     let target_cfg = config.target_cfg();\n@@ -109,12 +94,10 @@ pub(super) fn parse_cfg_name_directive<'a>(\n         allowed_names: &target_cfgs.all_pointer_widths,\n         message: \"when the pointer width is {name}\"\n     }\n-    for family in &target_cfg.families {\n-        condition! {\n-            name: family,\n-            allowed_names: &target_cfgs.all_families,\n-            message: \"when the target family is {name}\"\n-        }\n+    condition! {\n+        name: &*target_cfg.families,\n+        allowed_names: &target_cfgs.all_families,\n+        message: \"when the target family is {name}\"\n     }\n \n     // If something is ignored for emscripten, it likely also needs to be\n@@ -174,12 +157,12 @@ pub(super) fn parse_cfg_name_directive<'a>(\n         condition: cfg!(debug_assertions),\n         message: \"when building with debug assertions\",\n     }\n-    maybe_condition! {\n+    condition! {\n         name: config.debugger.as_ref().map(|d| d.to_str()),\n         allowed_names: &Debugger::STR_VARIANTS,\n         message: \"when the debugger is {name}\",\n     }\n-    maybe_condition! {\n+    condition! {\n         name: config.compare_mode\n             .as_ref()\n             .map(|d| format!(\"compare-mode-{}\", d.to_str())),\n@@ -281,3 +264,34 @@ impl<A: CustomContains, B: CustomContains> CustomContains for ContainsEither<'_,\n         self.a.custom_contains(item) || self.b.custom_contains(item)\n     }\n }\n+\n+trait CustomMatches {\n+    fn custom_matches(&self, name: &str) -> bool;\n+}\n+\n+impl CustomMatches for &str {\n+    fn custom_matches(&self, name: &str) -> bool {\n+        name == *self\n+    }\n+}\n+\n+impl CustomMatches for String {\n+    fn custom_matches(&self, name: &str) -> bool {\n+        name == self\n+    }\n+}\n+\n+impl<T: CustomMatches> CustomMatches for &[T] {\n+    fn custom_matches(&self, name: &str) -> bool {\n+        self.iter().any(|m| m.custom_matches(name))\n+    }\n+}\n+\n+impl<T: CustomMatches> CustomMatches for Option<T> {\n+    fn custom_matches(&self, name: &str) -> bool {\n+        match self {\n+            Some(inner) => inner.custom_matches(name),\n+            None => false,\n+        }\n+    }\n+}"}]}