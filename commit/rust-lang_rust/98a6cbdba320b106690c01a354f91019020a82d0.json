{"sha": "98a6cbdba320b106690c01a354f91019020a82d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4YTZjYmRiYTMyMGIxMDY2OTBjMDFhMzU0ZjkxMDE5MDIwYTgyZDA=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-05-29T23:21:04Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-09-06T20:35:08Z"}, "message": "comments only", "tree": {"sha": "ab0ef06f87669c514a0102d2711d0d8ea0d513fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab0ef06f87669c514a0102d2711d0d8ea0d513fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98a6cbdba320b106690c01a354f91019020a82d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98a6cbdba320b106690c01a354f91019020a82d0", "html_url": "https://github.com/rust-lang/rust/commit/98a6cbdba320b106690c01a354f91019020a82d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98a6cbdba320b106690c01a354f91019020a82d0/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91d3c364303c3a057feadd40adef0880531e08cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/91d3c364303c3a057feadd40adef0880531e08cc", "html_url": "https://github.com/rust-lang/rust/commit/91d3c364303c3a057feadd40adef0880531e08cc"}], "stats": {"total": 11, "additions": 11, "deletions": 0}, "files": [{"sha": "cf8fe905d1a367d9b1c739feb65a4c98e0edc331", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98a6cbdba320b106690c01a354f91019020a82d0/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98a6cbdba320b106690c01a354f91019020a82d0/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=98a6cbdba320b106690c01a354f91019020a82d0", "patch": "@@ -642,6 +642,7 @@ pub enum matcher_ {\n     // lo, hi position-in-match-array used:\n     match_seq(~[matcher], Option<::parse::token::Token>, bool, uint, uint),\n     // parse a Rust NT: name to bind, name of NT, position in match array:\n+    // NOTE: 'name of NT' shouldnt really be represented as an ident, should it?\n     match_nonterminal(Ident, Ident, uint)\n }\n "}, {"sha": "4c0ad816afbe337d73d0e5a1b4b3d4eabb6ea24c", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98a6cbdba320b106690c01a354f91019020a82d0/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98a6cbdba320b106690c01a354f91019020a82d0/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=98a6cbdba320b106690c01a354f91019020a82d0", "patch": "@@ -28,6 +28,8 @@ pub fn path_name_i(idents: &[Ident]) -> ~str {\n     idents.map(|i| token::interner_get(i.name)).connect(\"::\")\n }\n \n+// totally scary function: ignores all but the last element, should have\n+// a different name\n pub fn path_to_ident(path: &Path) -> Ident {\n     path.segments.last().identifier\n }"}, {"sha": "039ca36b55617cf45c5ddcc78c55c229fd24dc16", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98a6cbdba320b106690c01a354f91019020a82d0/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98a6cbdba320b106690c01a354f91019020a82d0/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=98a6cbdba320b106690c01a354f91019020a82d0", "patch": "@@ -1480,6 +1480,8 @@ mod test {\n                 // other, so the result of the whole thing should be \"let z_123 = 3; z_123\"\n                 @\"macro_rules! g (($x:ident) => ({macro_rules! f(($y:ident)=>({let $y=3;$x}));f!($x)}))\n                    fn a(){g!(z)}\"\n+                // create a really evil test case where a $x appears inside a binding of $x but *shouldnt*\n+                // bind because it was inserted by a different macro....\n             ];\n         for s in teststrs.iter() {\n             // we need regexps to test these!"}, {"sha": "2145e4297e7967399f65abc6ea82f771c1b6b0f2", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98a6cbdba320b106690c01a354f91019020a82d0/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98a6cbdba320b106690c01a354f91019020a82d0/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=98a6cbdba320b106690c01a354f91019020a82d0", "patch": "@@ -23,11 +23,15 @@ use parse::token::{get_ident_interner, special_idents, gensym_ident, ident_to_st\n use parse::token::{FAT_ARROW, SEMI, nt_matchers, nt_tt};\n use print;\n \n+// this procedure performs the expansion of the\n+// macro_rules! macro. It parses the RHS and adds\n+// an extension to the current context.\n pub fn add_new_extension(cx: @ExtCtxt,\n                          sp: Span,\n                          name: Ident,\n                          arg: ~[ast::token_tree])\n                       -> base::MacResult {\n+    // Wrap a matcher_ in a spanned to produce a matcher.\n     // these spans won't matter, anyways\n     fn ms(m: matcher_) -> matcher {\n         Spanned {\n@@ -39,11 +43,13 @@ pub fn add_new_extension(cx: @ExtCtxt,\n     let lhs_nm =  gensym_ident(\"lhs\");\n     let rhs_nm =  gensym_ident(\"rhs\");\n \n+    // The pattern that macro_rules matches.\n     // The grammar for macro_rules! is:\n     // $( $lhs:mtcs => $rhs:tt );+\n     // ...quasiquoting this would be nice.\n     let argument_gram = ~[\n         ms(match_seq(~[\n+            // NOTE : probably just use an enum for the NT_name ?\n             ms(match_nonterminal(lhs_nm, special_idents::matchers, 0u)),\n             ms(match_tok(FAT_ARROW)),\n             ms(match_nonterminal(rhs_nm, special_idents::tt, 1u)),"}]}