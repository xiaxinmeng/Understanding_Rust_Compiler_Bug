{"sha": "4f334f2b970c3149365d4d98f02090d52767e44f", "node_id": "C_kwDOAAsO6NoAKDRmMzM0ZjJiOTcwYzMxNDkzNjVkNGQ5OGYwMjA5MGQ1Mjc2N2U0NGY", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-07-30T01:38:07Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-08-04T14:26:54Z"}, "message": "Move LifetimeCollectVisitor to rustc_ast_lowering", "tree": {"sha": "2b29f0853ac52ffd19f8d908964816bf22425600", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b29f0853ac52ffd19f8d908964816bf22425600"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f334f2b970c3149365d4d98f02090d52767e44f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmLr1y4ACgkQgTGiTgx5\n769QFQ/9H2SoMJEFPjH+OpLWA1YW16D0H6nNC8d2ptjh3xR9SSt4PuTYxLUhl4mf\nvKklDXArWi6z0owOBmPvdR/cRFTBnTDiw7x4pQneHMcujXdi9+OZbu3u7s4mRMPF\n0Xx0NqDXS/tI1U9sEiWYw7IrfpX6ziMbfgrKG/Ya/8NFwGU6aR48fXKaTKuqvBTT\nvEn+oT9TJwJNapwIVhCmzAl6S4XqkRVCshv6/853k93Dkj7CfLetam/wWAxLLk2M\noOsUcTjRyWp3gZddCCeTpGXV121be9zczvrEzdQ0rh14WivcV8xj9Dgaom2OOO3i\ntVWGvOzLeS6vzIDk8dyGBWL98SFeKXIbNteBs39xcd89F4EqEbYd/aqRSOSGAdUe\n8OEe40Am6sMVCV2eqVJKtcwX1eA8+uJdMG7GXtCxqqxFRHu766oh8NwczLOYVCLC\ntksrDoIQvBEZ6RWNhxO07hV7ciiJ4rOBDOCbNexHPCnrAOiFg0n+0ozP7kgNjfCP\nLe9uyQgoOKww1GnRCzaOGaX1I65VSep1XQvvQv/JIHd1/nC+0Z0rlB+0dG8og7sq\nJdj45DRgwY8n8gOggyK6wyZRTSoGcZ6Drnm2uJPaijaCXwilL15mZUoek3pSv7Pv\nieX5K6o+/8lU3cQJ8q3wM+XI9s+YAEa0/FIc4By23/sCvBdk4cE=\n=juCs\n-----END PGP SIGNATURE-----", "payload": "tree 2b29f0853ac52ffd19f8d908964816bf22425600\nparent 9f77688d1707dc6108803a3e1c4a6aa2747568a4\nauthor Santiago Pastorino <spastorino@gmail.com> 1659145087 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1659623214 -0300\n\nMove LifetimeCollectVisitor to rustc_ast_lowering\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f334f2b970c3149365d4d98f02090d52767e44f", "html_url": "https://github.com/rust-lang/rust/commit/4f334f2b970c3149365d4d98f02090d52767e44f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f334f2b970c3149365d4d98f02090d52767e44f/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f77688d1707dc6108803a3e1c4a6aa2747568a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f77688d1707dc6108803a3e1c4a6aa2747568a4", "html_url": "https://github.com/rust-lang/rust/commit/9f77688d1707dc6108803a3e1c4a6aa2747568a4"}], "stats": {"total": 128, "additions": 67, "deletions": 61}, "files": [{"sha": "870a7c0be33dc111ecf907093d225463c56f9cc5", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 0, "deletions": 59, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/4f334f2b970c3149365d4d98f02090d52767e44f/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f334f2b970c3149365d4d98f02090d52767e44f/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=4f334f2b970c3149365d4d98f02090d52767e44f", "patch": "@@ -25,9 +25,7 @@ pub use UnsafeSource::*;\n use crate::ptr::P;\n use crate::token::{self, CommentKind, Delimiter};\n use crate::tokenstream::{DelimSpan, LazyTokenStream, TokenStream};\n-use crate::visit::{self, BoundKind, LifetimeCtxt, Visitor};\n \n-use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_data_structures::sync::Lrc;\n@@ -325,63 +323,6 @@ impl GenericBound {\n \n pub type GenericBounds = Vec<GenericBound>;\n \n-struct LifetimeCollectVisitor<'ast> {\n-    current_binders: Vec<NodeId>,\n-    binders_to_ignore: FxHashMap<NodeId, Vec<NodeId>>,\n-    collected_lifetimes: Vec<&'ast Lifetime>,\n-}\n-\n-impl<'ast> Visitor<'ast> for LifetimeCollectVisitor<'ast> {\n-    fn visit_lifetime(&mut self, lifetime: &'ast Lifetime, _: LifetimeCtxt) {\n-        if !self.collected_lifetimes.contains(&lifetime) {\n-            self.collected_lifetimes.push(lifetime);\n-        }\n-        self.binders_to_ignore.insert(lifetime.id, self.current_binders.clone());\n-    }\n-\n-    fn visit_poly_trait_ref(&mut self, t: &'ast PolyTraitRef, m: &'ast TraitBoundModifier) {\n-        self.current_binders.push(t.trait_ref.ref_id);\n-\n-        visit::walk_poly_trait_ref(self, t, m);\n-\n-        self.current_binders.pop();\n-    }\n-\n-    fn visit_ty(&mut self, t: &'ast Ty) {\n-        if let TyKind::BareFn(_) = t.kind {\n-            self.current_binders.push(t.id);\n-        }\n-        visit::walk_ty(self, t);\n-        if let TyKind::BareFn(_) = t.kind {\n-            self.current_binders.pop();\n-        }\n-    }\n-}\n-\n-pub fn lifetimes_in_ret_ty(ret_ty: &FnRetTy) -> (Vec<&Lifetime>, FxHashMap<NodeId, Vec<NodeId>>) {\n-    let mut visitor = LifetimeCollectVisitor {\n-        current_binders: Vec::new(),\n-        binders_to_ignore: FxHashMap::default(),\n-        collected_lifetimes: Vec::new(),\n-    };\n-    visitor.visit_fn_ret_ty(ret_ty);\n-    (visitor.collected_lifetimes, visitor.binders_to_ignore)\n-}\n-\n-pub fn lifetimes_in_bounds(\n-    bounds: &GenericBounds,\n-) -> (Vec<&Lifetime>, FxHashMap<NodeId, Vec<NodeId>>) {\n-    let mut visitor = LifetimeCollectVisitor {\n-        current_binders: Vec::new(),\n-        binders_to_ignore: FxHashMap::default(),\n-        collected_lifetimes: Vec::new(),\n-    };\n-    for bound in bounds {\n-        visitor.visit_param_bound(bound, BoundKind::Bound);\n-    }\n-    (visitor.collected_lifetimes, visitor.binders_to_ignore)\n-}\n-\n /// Specifies the enforced ordering for generic parameters. In the future,\n /// if we wanted to relax this order, we could override `PartialEq` and\n /// `PartialOrd`, to allow the kinds to be unordered."}, {"sha": "2883299291e3aa1f3e7aea00e24e44e0d4e3a3d8", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4f334f2b970c3149365d4d98f02090d52767e44f/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f334f2b970c3149365d4d98f02090d52767e44f/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=4f334f2b970c3149365d4d98f02090d52767e44f", "patch": "@@ -77,6 +77,7 @@ mod block;\n mod expr;\n mod index;\n mod item;\n+mod lifetime_collector;\n mod pat;\n mod path;\n \n@@ -1352,7 +1353,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     }),\n                 );\n \n-                let (lifetimes_in_bounds, binders_to_ignore) = ast::lifetimes_in_bounds(bounds);\n+                let (lifetimes_in_bounds, binders_to_ignore) =\n+                    lifetime_collector::lifetimes_in_bounds(bounds);\n                 debug!(?lifetimes_in_bounds);\n                 debug!(?binders_to_ignore);\n \n@@ -1756,7 +1758,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 }),\n             );\n \n-            let (lifetimes_in_bounds, binders_to_ignore) = ast::lifetimes_in_ret_ty(output);\n+            let (lifetimes_in_bounds, binders_to_ignore) =\n+                lifetime_collector::lifetimes_in_ret_ty(output);\n             debug!(?lifetimes_in_bounds);\n             debug!(?binders_to_ignore);\n "}, {"sha": "1dab8799ae5f4c0dd5e063bd4f4c1c0aa12bfda7", "filename": "compiler/rustc_ast_lowering/src/lifetime_collector.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/4f334f2b970c3149365d4d98f02090d52767e44f/compiler%2Frustc_ast_lowering%2Fsrc%2Flifetime_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f334f2b970c3149365d4d98f02090d52767e44f/compiler%2Frustc_ast_lowering%2Fsrc%2Flifetime_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flifetime_collector.rs?ref=4f334f2b970c3149365d4d98f02090d52767e44f", "patch": "@@ -0,0 +1,62 @@\n+use rustc_ast::visit::{self, BoundKind, LifetimeCtxt, Visitor};\n+use rustc_ast::{\n+    FnRetTy, GenericBounds, Lifetime, NodeId, PolyTraitRef, TraitBoundModifier, Ty, TyKind,\n+};\n+use rustc_data_structures::fx::FxHashMap;\n+\n+struct LifetimeCollectVisitor<'ast> {\n+    current_binders: Vec<NodeId>,\n+    binders_to_ignore: FxHashMap<NodeId, Vec<NodeId>>,\n+    collected_lifetimes: Vec<&'ast Lifetime>,\n+}\n+\n+impl<'ast> Visitor<'ast> for LifetimeCollectVisitor<'ast> {\n+    fn visit_lifetime(&mut self, lifetime: &'ast Lifetime, _: LifetimeCtxt) {\n+        if !self.collected_lifetimes.contains(&lifetime) {\n+            self.collected_lifetimes.push(lifetime);\n+        }\n+        self.binders_to_ignore.insert(lifetime.id, self.current_binders.clone());\n+    }\n+\n+    fn visit_poly_trait_ref(&mut self, t: &'ast PolyTraitRef, m: &'ast TraitBoundModifier) {\n+        self.current_binders.push(t.trait_ref.ref_id);\n+\n+        visit::walk_poly_trait_ref(self, t, m);\n+\n+        self.current_binders.pop();\n+    }\n+\n+    fn visit_ty(&mut self, t: &'ast Ty) {\n+        if let TyKind::BareFn(_) = t.kind {\n+            self.current_binders.push(t.id);\n+        }\n+        visit::walk_ty(self, t);\n+        if let TyKind::BareFn(_) = t.kind {\n+            self.current_binders.pop();\n+        }\n+    }\n+}\n+\n+pub fn lifetimes_in_ret_ty(ret_ty: &FnRetTy) -> (Vec<&Lifetime>, FxHashMap<NodeId, Vec<NodeId>>) {\n+    let mut visitor = LifetimeCollectVisitor {\n+        current_binders: Vec::new(),\n+        binders_to_ignore: FxHashMap::default(),\n+        collected_lifetimes: Vec::new(),\n+    };\n+    visitor.visit_fn_ret_ty(ret_ty);\n+    (visitor.collected_lifetimes, visitor.binders_to_ignore)\n+}\n+\n+pub fn lifetimes_in_bounds(\n+    bounds: &GenericBounds,\n+) -> (Vec<&Lifetime>, FxHashMap<NodeId, Vec<NodeId>>) {\n+    let mut visitor = LifetimeCollectVisitor {\n+        current_binders: Vec::new(),\n+        binders_to_ignore: FxHashMap::default(),\n+        collected_lifetimes: Vec::new(),\n+    };\n+    for bound in bounds {\n+        visitor.visit_param_bound(bound, BoundKind::Bound);\n+    }\n+    (visitor.collected_lifetimes, visitor.binders_to_ignore)\n+}"}]}