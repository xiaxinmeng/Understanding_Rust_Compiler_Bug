{"sha": "36d852918f5de255a706667af9373edea7429d3f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2ZDg1MjkxOGY1ZGUyNTVhNzA2NjY3YWY5MzczZWRlYTc0MjlkM2Y=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-06-29T17:24:09Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-07-23T07:15:11Z"}, "message": "Improve E0001-E0003", "tree": {"sha": "07f02f1d04b440a3301ddaa15895e9bc65f834ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07f02f1d04b440a3301ddaa15895e9bc65f834ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36d852918f5de255a706667af9373edea7429d3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36d852918f5de255a706667af9373edea7429d3f", "html_url": "https://github.com/rust-lang/rust/commit/36d852918f5de255a706667af9373edea7429d3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36d852918f5de255a706667af9373edea7429d3f/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d91bbd90afeaf2e4b262cd48db7d29e9b8d1f49", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d91bbd90afeaf2e4b262cd48db7d29e9b8d1f49", "html_url": "https://github.com/rust-lang/rust/commit/8d91bbd90afeaf2e4b262cd48db7d29e9b8d1f49"}], "stats": {"total": 47, "additions": 45, "deletions": 2}, "files": [{"sha": "0c3c9b2ec8011faec42e2d38576e452da2166c65", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 45, "deletions": 2, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/36d852918f5de255a706667af9373edea7429d3f/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36d852918f5de255a706667af9373edea7429d3f/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=36d852918f5de255a706667af9373edea7429d3f", "patch": "@@ -22,6 +22,22 @@ matched, one of the preceding patterns will match.\n \n This means that perhaps some of the preceding patterns are too general, this one\n is too specific or the ordering is incorrect.\n+\n+For example, the following `match` block has too many arms:\n+\n+```\n+match foo {\n+    Some(bar) => {/* ... */}\n+    None => {/* ... */}\n+    _ => {/* ... */} // All possible cases have already been handled\n+}\n+```\n+\n+`match` blocks have their patterns matched in order, so, for example, putting\n+a wildcard arm above a more specific arm will make the latter arm irrelevant.\n+\n+Ensure the ordering of the match arm is correct and remove any superfluous\n+checks.\n \"##,\n \n E0002: r##\"\n@@ -31,13 +47,40 @@ it is impossible to create an instance of an empty type, so empty match\n expressions are almost never desired.  This error is typically fixed by adding\n one or more cases to the match expression.\n \n-An example of an empty type is `enum Empty { }`.\n+An example of an empty type is `enum Empty { }`. So, the following will work:\n+\n+```\n+fn foo(x: Empty) {\n+    match x {\n+        // empty\n+    }\n+}\n+\n+```\n+\n+but this won't:\n+\n+```\n+fn foo(x: Option<String>) {\n+    match x {\n+        // empty\n+    }\n+}\n+```\n \"##,\n \n E0003: r##\"\n Not-a-Number (NaN) values cannot be compared for equality and hence can never\n match the input to a match expression. To match against NaN values, you should\n-instead use the `is_nan` method in a guard, as in: `x if x.is_nan() => ...`\n+instead use the `is_nan()` method in a guard, like so: \n+\n+```\n+match number {\n+    // ...\n+    x if x.is_nan() => { /* ... */ }\n+    // ...\n+}\n+```\n \"##,\n \n E0004: r##\""}]}