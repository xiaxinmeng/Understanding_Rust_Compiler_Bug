{"sha": "ac8d1173b54d36d88c1ce1623ca52ecdf40d19a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjOGQxMTczYjU0ZDM2ZDg4YzFjZTE2MjNjYTUyZWNkZjQwZDE5YTQ=", "commit": {"author": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-10-13T06:52:48Z"}, "committer": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-11-30T20:18:56Z"}, "message": "Use core::primitive module instead of prim@", "tree": {"sha": "df18de842f79e3214ec54e87c70b20925063b94b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df18de842f79e3214ec54e87c70b20925063b94b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac8d1173b54d36d88c1ce1623ca52ecdf40d19a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac8d1173b54d36d88c1ce1623ca52ecdf40d19a4", "html_url": "https://github.com/rust-lang/rust/commit/ac8d1173b54d36d88c1ce1623ca52ecdf40d19a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac8d1173b54d36d88c1ce1623ca52ecdf40d19a4/comments", "author": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "committer": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5726eb28d3cf321b2accb772dec4f12103a8641", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5726eb28d3cf321b2accb772dec4f12103a8641", "html_url": "https://github.com/rust-lang/rust/commit/a5726eb28d3cf321b2accb772dec4f12103a8641"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "2df4f60cfaba240886ee1a992f7ae524ba441540", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ac8d1173b54d36d88c1ce1623ca52ecdf40d19a4/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8d1173b54d36d88c1ce1623ca52ecdf40d19a4/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=ac8d1173b54d36d88c1ce1623ca52ecdf40d19a4", "patch": "@@ -112,7 +112,7 @@ impl char {\n     /// For an unsafe version of this function which ignores these checks, see\n     /// [`from_u32_unchecked`].\n     ///\n-    /// [`from_u32_unchecked`]: prim@char::from_u32_unchecked()\n+    /// [`from_u32_unchecked`]: crate::primitive::char::from_u32_unchecked()\n     ///\n     /// # Examples\n     ///\n@@ -163,7 +163,7 @@ impl char {\n     ///\n     /// For a safe version of this function, see the [`from_u32`] function.\n     ///\n-    /// [`from_u32`]: prim@char::from_u32()\n+    /// [`from_u32`]: crate::primitive::char::from_u32()\n     ///\n     /// # Examples\n     ///\n@@ -256,7 +256,7 @@ impl char {\n     ///\n     /// For a more comprehensive understanding of 'digit', see [`is_numeric()`].\n     ///\n-    /// [`is_numeric()`]: prim@char::is_numeric()\n+    /// [`is_numeric()`]: crate::primitive::char::is_numeric()\n     ///\n     /// # Panics\n     ///\n@@ -481,7 +481,7 @@ impl char {\n     /// * All other characters are given hexadecimal Unicode escapes; see\n     ///   [`escape_unicode`].\n     ///\n-    /// [`escape_unicode`]: prim@char::escape_unicode()\n+    /// [`escape_unicode`]: crate::primitive::char::escape_unicode()\n     ///\n     /// # Examples\n     ///\n@@ -582,7 +582,7 @@ impl char {\n     /// See the documentation for [`len_utf8()`] for more explanation of this\n     /// concept. This function is a mirror, but for UTF-16 instead of UTF-8.\n     ///\n-    /// [`len_utf8()`]: prim@char::len_utf8()\n+    /// [`len_utf8()`]: crate::primitive::char::len_utf8()\n     ///\n     /// # Examples\n     ///\n@@ -797,8 +797,8 @@ impl char {\n \n     /// Returns `true` if this `char` satisfies either [`is_alphabetic()`] or [`is_numeric()`].\n     ///\n-    /// [`is_alphabetic()`]: prim@char::is_alphabetic()\n-    /// [`is_numeric()`]: prim@char::is_numeric()\n+    /// [`is_alphabetic()`]: crate::primitive::char::is_alphabetic()\n+    /// [`is_numeric()`]: crate::primitive::char::is_numeric()\n     ///\n     /// # Examples\n     ///\n@@ -1085,8 +1085,8 @@ impl char {\n     /// assert_eq!('\u2764', non_ascii.to_ascii_uppercase());\n     /// ```\n     ///\n-    /// [`make_ascii_uppercase()`]: prim@char::make_ascii_uppercase()\n-    /// [`to_uppercase()`]: prim@char::to_uppercase()\n+    /// [`make_ascii_uppercase()`]: crate::primitive::char::make_ascii_uppercase()\n+    /// [`to_uppercase()`]: crate::primitive::char::to_uppercase()\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn to_ascii_uppercase(&self) -> char {\n@@ -1113,8 +1113,8 @@ impl char {\n     /// assert_eq!('\u2764', non_ascii.to_ascii_lowercase());\n     /// ```\n     ///\n-    /// [`make_ascii_lowercase()`]: prim@char::make_ascii_lowercase()\n-    /// [`to_lowercase()`]: prim@char::to_lowercase()\n+    /// [`make_ascii_lowercase()`]: crate::primitive::char::make_ascii_lowercase()\n+    /// [`to_lowercase()`]: crate::primitive::char::to_lowercase()\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn to_ascii_lowercase(&self) -> char {\n@@ -1160,7 +1160,7 @@ impl char {\n     /// assert_eq!('A', ascii);\n     /// ```\n     ///\n-    /// [`to_ascii_uppercase()`]: prim@char::to_ascii_uppercase()\n+    /// [`to_ascii_uppercase()`]: crate::primitive::char::to_ascii_uppercase()\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn make_ascii_uppercase(&mut self) {\n@@ -1185,7 +1185,7 @@ impl char {\n     /// assert_eq!('a', ascii);\n     /// ```\n     ///\n-    /// [`to_ascii_lowercase()`]: prim@char::to_ascii_lowercase()\n+    /// [`to_ascii_lowercase()`]: crate::primitive::char::to_ascii_lowercase()\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn make_ascii_lowercase(&mut self) {"}]}