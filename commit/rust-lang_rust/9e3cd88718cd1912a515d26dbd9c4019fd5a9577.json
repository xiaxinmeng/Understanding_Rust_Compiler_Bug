{"sha": "9e3cd88718cd1912a515d26dbd9c4019fd5a9577", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllM2NkODg3MThjZDE5MTJhNTE1ZDI2ZGJkOWM0MDE5ZmQ1YTk1Nzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-20T10:07:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-20T10:07:36Z"}, "message": "Auto merge of #7252 - flip1995:rustup, r=flip1995\n\nRustup\n\nr? `@ghost`\n\ncc `@xFrednet` There was a change to the `rustc_span::FileName` removing the `Display` impl for it. I adapted the metadata collector to compile with that change. I'm not sure if I changed the behavior with this. The path to the string is now printed relative to the `clippy_lints` dir. So for example `src/swap.rs`. I think this should be fine, but probably something to be aware of.\n\nchangelog: none", "tree": {"sha": "4fef43c1228fa5499051dec0d454d9f4f05e442d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fef43c1228fa5499051dec0d454d9f4f05e442d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e3cd88718cd1912a515d26dbd9c4019fd5a9577", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e3cd88718cd1912a515d26dbd9c4019fd5a9577", "html_url": "https://github.com/rust-lang/rust/commit/9e3cd88718cd1912a515d26dbd9c4019fd5a9577", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d597b7fb9a0ce9a90a35c9146030770cb82544a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d597b7fb9a0ce9a90a35c9146030770cb82544a", "html_url": "https://github.com/rust-lang/rust/commit/2d597b7fb9a0ce9a90a35c9146030770cb82544a"}, {"sha": "559ce6d7720930031a6f64be2931b847e37b986b", "url": "https://api.github.com/repos/rust-lang/rust/commits/559ce6d7720930031a6f64be2931b847e37b986b", "html_url": "https://github.com/rust-lang/rust/commit/559ce6d7720930031a6f64be2931b847e37b986b"}], "stats": {"total": 303, "additions": 149, "deletions": 154}, "files": [{"sha": "840c1eba79d115ad120dffc8c8a9edaaebbfc792", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=9e3cd88718cd1912a515d26dbd9c4019fd5a9577", "patch": "@@ -12,7 +12,7 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::map::Map;\n use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::{def_id::LOCAL_CRATE, source_map::Span};\n+use rustc_span::source_map::Span;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for deriving `Hash` but implementing `PartialEq`\n@@ -310,15 +310,11 @@ fn check_copy_clone<'tcx>(cx: &LateContext<'tcx>, item: &Item<'_>, trait_ref: &T\n     // there's a Copy impl for any instance of the adt.\n     if !is_copy(cx, ty) {\n         if ty_subs.non_erasable_generics().next().is_some() {\n-            let has_copy_impl = cx\n-                .tcx\n-                .all_local_trait_impls(LOCAL_CRATE)\n-                .get(&copy_id)\n-                .map_or(false, |impls| {\n-                    impls\n-                        .iter()\n-                        .any(|&id| matches!(cx.tcx.type_of(id).kind(), ty::Adt(adt, _) if ty_adt.did == adt.did))\n-                });\n+            let has_copy_impl = cx.tcx.all_local_trait_impls(()).get(&copy_id).map_or(false, |impls| {\n+                impls\n+                    .iter()\n+                    .any(|&id| matches!(cx.tcx.type_of(id).kind(), ty::Adt(adt, _) if ty_adt.did == adt.did))\n+            });\n             if !has_copy_impl {\n                 return;\n             }"}, {"sha": "ee41c4aea2f7ec12366e016fc574f228c9f12b71", "filename": "clippy_lints/src/inherent_impl.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/clippy_lints%2Fsrc%2Finherent_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/clippy_lints%2Fsrc%2Finherent_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_impl.rs?ref=9e3cd88718cd1912a515d26dbd9c4019fd5a9577", "patch": "@@ -3,10 +3,7 @@\n use clippy_utils::diagnostics::span_lint_and_note;\n use clippy_utils::{in_macro, is_allowed};\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_hir::{\n-    def_id::{LocalDefId, LOCAL_CRATE},\n-    Crate, Item, ItemKind, Node,\n-};\n+use rustc_hir::{def_id::LocalDefId, Crate, Item, ItemKind, Node};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::Span;\n@@ -56,16 +53,16 @@ impl<'tcx> LateLintPass<'tcx> for MultipleInherentImpl {\n \n         for (_, impl_ids) in cx\n             .tcx\n-            .crate_inherent_impls(LOCAL_CRATE)\n+            .crate_inherent_impls(())\n             .inherent_impls\n             .iter()\n-            .filter(|(id, impls)| {\n+            .filter(|(&id, impls)| {\n                 impls.len() > 1\n                     // Check for `#[allow]` on the type definition\n                     && !is_allowed(\n                         cx,\n                         MULTIPLE_INHERENT_IMPL,\n-                        cx.tcx.hir().local_def_id_to_hir_id(id.expect_local()),\n+                        cx.tcx.hir().local_def_id_to_hir_id(id),\n                     )\n             })\n         {"}, {"sha": "914b583186c2cda12612211673c9f59c0e7a6f87", "filename": "clippy_lints/src/macro_use.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/clippy_lints%2Fsrc%2Fmacro_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/clippy_lints%2Fsrc%2Fmacro_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmacro_use.rs?ref=9e3cd88718cd1912a515d26dbd9c4019fd5a9577", "patch": "@@ -47,7 +47,12 @@ pub struct MacroRefData {\n \n impl MacroRefData {\n     pub fn new(name: String, callee: Span, cx: &LateContext<'_>) -> Self {\n-        let mut path = cx.sess().source_map().span_to_filename(callee).to_string();\n+        let mut path = cx\n+            .sess()\n+            .source_map()\n+            .span_to_filename(callee)\n+            .prefer_local()\n+            .to_string();\n \n         // std lib paths are <::std::module::file type>\n         // so remove brackets, space and type."}, {"sha": "b5d2549242b2c25770e24900d8c94085714bf900", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=9e3cd88718cd1912a515d26dbd9c4019fd5a9577", "patch": "@@ -660,7 +660,14 @@ fn in_attributes_expansion(expr: &Expr<'_>) -> bool {\n     use rustc_span::hygiene::MacroKind;\n     if expr.span.from_expansion() {\n         let data = expr.span.ctxt().outer_expn_data();\n-        matches!(data.kind, ExpnKind::Macro(MacroKind::Attr, _))\n+        matches!(\n+            data.kind,\n+            ExpnKind::Macro {\n+                kind: MacroKind::Attr,\n+                name: _,\n+                proc_macro: _\n+            }\n+        )\n     } else {\n         false\n     }"}, {"sha": "c64491c63e2dcfcd385df9797f79bf41f499c9be", "filename": "clippy_lints/src/needless_question_mark.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/clippy_lints%2Fsrc%2Fneedless_question_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/clippy_lints%2Fsrc%2Fneedless_question_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_question_mark.rs?ref=9e3cd88718cd1912a515d26dbd9c4019fd5a9577", "patch": "@@ -100,7 +100,7 @@ fn check(cx: &LateContext<'_>, expr: &Expr<'_>) {\n         if is_lang_ctor(cx, qpath, OptionSome) || is_lang_ctor(cx, qpath, ResultOk);\n         if let ExprKind::Match(inner_expr_with_q, _, MatchSource::TryDesugar) = &arg.kind;\n         if let ExprKind::Call(called, [inner_expr]) = &inner_expr_with_q.kind;\n-        if let ExprKind::Path(QPath::LangItem(LangItem::TryIntoResult, _)) = &called.kind;\n+        if let ExprKind::Path(QPath::LangItem(LangItem::TryTraitBranch, _)) = &called.kind;\n         if expr.span.ctxt() == inner_expr.span.ctxt();\n         let expr_ty = cx.typeck_results().expr_ty(expr);\n         let inner_ty = cx.typeck_results().expr_ty(inner_expr);"}, {"sha": "f2ba2b2ecf63976a7781f118cdf8ecd7566c1e4b", "filename": "clippy_lints/src/try_err.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/clippy_lints%2Fsrc%2Ftry_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/clippy_lints%2Fsrc%2Ftry_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftry_err.rs?ref=9e3cd88718cd1912a515d26dbd9c4019fd5a9577", "patch": "@@ -64,7 +64,7 @@ impl<'tcx> LateLintPass<'tcx> for TryErr {\n             if let ExprKind::Match(match_arg, _, MatchSource::TryDesugar) = expr.kind;\n             if let ExprKind::Call(match_fun, try_args) = match_arg.kind;\n             if let ExprKind::Path(ref match_fun_path) = match_fun.kind;\n-            if matches!(match_fun_path, QPath::LangItem(LangItem::TryIntoResult, _));\n+            if matches!(match_fun_path, QPath::LangItem(LangItem::TryTraitBranch, _));\n             if let Some(try_arg) = try_args.get(0);\n             if let ExprKind::Call(err_fun, err_args) = try_arg.kind;\n             if let Some(err_arg) = err_args.get(0);"}, {"sha": "0454214651683afbfae4ede5b4afdcbeedf0f0aa", "filename": "clippy_lints/src/unit_types/unit_cmp.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/clippy_lints%2Fsrc%2Funit_types%2Funit_cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/clippy_lints%2Fsrc%2Funit_types%2Funit_cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_types%2Funit_cmp.rs?ref=9e3cd88718cd1912a515d26dbd9c4019fd5a9577", "patch": "@@ -8,7 +8,12 @@ use super::UNIT_CMP;\n pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>) {\n     if expr.span.from_expansion() {\n         if let Some(callee) = expr.span.source_callee() {\n-            if let ExpnKind::Macro(MacroKind::Bang, symbol) = callee.kind {\n+            if let ExpnKind::Macro {\n+                kind: MacroKind::Bang,\n+                name: symbol,\n+                proc_macro: _,\n+            } = callee.kind\n+            {\n                 if let ExprKind::Binary(ref cmp, left, _) = expr.kind {\n                     let op = cmp.node;\n                     if op.is_comparison() && cx.typeck_results().expr_ty(left).is_unit() {"}, {"sha": "c27a6d4e347b5893f6c7f2b6b07ca3e6a51a0c47", "filename": "clippy_lints/src/unused_io_amount.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/clippy_lints%2Fsrc%2Funused_io_amount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/clippy_lints%2Fsrc%2Funused_io_amount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_io_amount.rs?ref=9e3cd88718cd1912a515d26dbd9c4019fd5a9577", "patch": "@@ -45,7 +45,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedIoAmount {\n                 if let hir::ExprKind::Call(func, args) = res.kind {\n                     if matches!(\n                         func.kind,\n-                        hir::ExprKind::Path(hir::QPath::LangItem(hir::LangItem::TryIntoResult, _))\n+                        hir::ExprKind::Path(hir::QPath::LangItem(hir::LangItem::TryTraitBranch, _))\n                     ) {\n                         check_map_error(cx, &args[0], expr);\n                     }"}, {"sha": "e9fa043b20f3714cc8fec6a9bf8bf97d37fe32a8", "filename": "clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=9e3cd88718cd1912a515d26dbd9c4019fd5a9577", "patch": "@@ -247,7 +247,7 @@ impl SerializableSpan {\n         let loc: Loc = cx.sess().source_map().lookup_char_pos(span.lo());\n \n         Self {\n-            path: format!(\"{}\", loc.file.name),\n+            path: format!(\"{}\", loc.file.name.prefer_remapped()),\n             line: loc.line,\n         }\n     }"}, {"sha": "82250151aabc605f4275e628185cf0fb05799aa4", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=9e3cd88718cd1912a515d26dbd9c4019fd5a9577", "patch": "@@ -66,7 +66,7 @@ use rustc_ast::ast::{self, Attribute, BorrowKind, LitKind};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{self, walk_expr, ErasedMap, FnKind, NestedVisitorMap, Visitor};\n use rustc_hir::LangItem::{ResultErr, ResultOk};\n use rustc_hir::{\n@@ -683,7 +683,7 @@ pub fn method_chain_args<'a>(expr: &'a Expr<'_>, methods: &[&str]) -> Option<Vec\n /// Returns `true` if the provided `def_id` is an entrypoint to a program.\n pub fn is_entrypoint_fn(cx: &LateContext<'_>, def_id: DefId) -> bool {\n     cx.tcx\n-        .entry_fn(LOCAL_CRATE)\n+        .entry_fn(())\n         .map_or(false, |(entry_fn_def_id, _)| def_id == entry_fn_def_id)\n }\n \n@@ -971,7 +971,12 @@ pub fn is_expn_of(mut span: Span, name: &str) -> Option<Span> {\n             let data = span.ctxt().outer_expn_data();\n             let new_span = data.call_site;\n \n-            if let ExpnKind::Macro(MacroKind::Bang, mac_name) = data.kind {\n+            if let ExpnKind::Macro {\n+                kind: MacroKind::Bang,\n+                name: mac_name,\n+                proc_macro: _,\n+            } = data.kind\n+            {\n                 if mac_name.as_str() == name {\n                     return Some(new_span);\n                 }\n@@ -999,7 +1004,12 @@ pub fn is_direct_expn_of(span: Span, name: &str) -> Option<Span> {\n         let data = span.ctxt().outer_expn_data();\n         let new_span = data.call_site;\n \n-        if let ExpnKind::Macro(MacroKind::Bang, mac_name) = data.kind {\n+        if let ExpnKind::Macro {\n+            kind: MacroKind::Bang,\n+            name: mac_name,\n+            proc_macro: _,\n+        } = data.kind\n+        {\n             if mac_name.as_str() == name {\n                 return Some(new_span);\n             }"}, {"sha": "cb8cb0978f65579e2365983310d6a59d6da6310b", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=9e3cd88718cd1912a515d26dbd9c4019fd5a9577", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2021-05-06\"\n+channel = \"nightly-2021-05-20\"\n components = [\"llvm-tools-preview\", \"rustc-dev\", \"rust-src\"]"}, {"sha": "4735573a47d3fa2b93b8c9093d6d47f6624e0567", "filename": "tests/ui-internal/default_lint.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui-internal%2Fdefault_lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui-internal%2Fdefault_lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Fdefault_lint.stderr?ref=9e3cd88718cd1912a515d26dbd9c4019fd5a9577", "patch": "@@ -15,7 +15,7 @@ note: the lint level is defined here\n LL | #![deny(clippy::internal)]\n    |         ^^^^^^^^^^^^^^^^\n    = note: `#[deny(clippy::default_lint)]` implied by `#[deny(clippy::internal)]`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::declare_tool_lint` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "d0f100f00692f354b225bf5dc035034982a47538", "filename": "tests/ui-internal/if_chain_style.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui-internal%2Fif_chain_style.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui-internal%2Fif_chain_style.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Fif_chain_style.stderr?ref=9e3cd88718cd1912a515d26dbd9c4019fd5a9577", "patch": "@@ -56,7 +56,7 @@ LL | |         }\n LL | |     }\n    | |_____^\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `__if_chain` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `let` expression should be above the `if_chain!`\n   --> $DIR/if_chain_style.rs:40:9"}, {"sha": "e308e13da138304f34e1a2a340683f247eb8529a", "filename": "tests/ui-internal/lint_without_lint_pass.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui-internal%2Flint_without_lint_pass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui-internal%2Flint_without_lint_pass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Flint_without_lint_pass.stderr?ref=9e3cd88718cd1912a515d26dbd9c4019fd5a9577", "patch": "@@ -15,7 +15,7 @@ note: the lint level is defined here\n LL | #![deny(clippy::internal)]\n    |         ^^^^^^^^^^^^^^^^\n    = note: `#[deny(clippy::lint_without_lint_pass)]` implied by `#[deny(clippy::internal)]`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `declare_tool_lint` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "1eb87d89fad027a9dbb4cd1ff2aa43d5914904d4", "filename": "tests/ui/assertions_on_constants.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Fassertions_on_constants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Fassertions_on_constants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassertions_on_constants.stderr?ref=9e3cd88718cd1912a515d26dbd9c4019fd5a9577", "patch": "@@ -6,7 +6,7 @@ LL |     assert!(true);\n    |\n    = note: `-D clippy::assertions-on-constants` implied by `-D warnings`\n    = help: remove it\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `assert!(false)` should probably be replaced\n   --> $DIR/assertions_on_constants.rs:12:5\n@@ -15,7 +15,7 @@ LL |     assert!(false);\n    |     ^^^^^^^^^^^^^^^\n    |\n    = help: use `panic!()` or `unreachable!()`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `assert!(true)` will be optimized out by the compiler\n   --> $DIR/assertions_on_constants.rs:13:5\n@@ -24,7 +24,7 @@ LL |     assert!(true, \"true message\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: remove it\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `assert!(false, \"false message\")` should probably be replaced\n   --> $DIR/assertions_on_constants.rs:14:5\n@@ -33,7 +33,7 @@ LL |     assert!(false, \"false message\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use `panic!(\"false message\")` or `unreachable!(\"false message\")`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `assert!(false, msg.to_uppercase())` should probably be replaced\n   --> $DIR/assertions_on_constants.rs:17:5\n@@ -42,7 +42,7 @@ LL |     assert!(false, msg.to_uppercase());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use `panic!(msg.to_uppercase())` or `unreachable!(msg.to_uppercase())`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `assert!(true)` will be optimized out by the compiler\n   --> $DIR/assertions_on_constants.rs:20:5\n@@ -51,7 +51,7 @@ LL |     assert!(B);\n    |     ^^^^^^^^^^^\n    |\n    = help: remove it\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `assert!(false)` should probably be replaced\n   --> $DIR/assertions_on_constants.rs:23:5\n@@ -60,7 +60,7 @@ LL |     assert!(C);\n    |     ^^^^^^^^^^^\n    |\n    = help: use `panic!()` or `unreachable!()`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `assert!(false, \"C message\")` should probably be replaced\n   --> $DIR/assertions_on_constants.rs:24:5\n@@ -69,7 +69,7 @@ LL |     assert!(C, \"C message\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use `panic!(\"C message\")` or `unreachable!(\"C message\")`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `debug_assert!(true)` will be optimized out by the compiler\n   --> $DIR/assertions_on_constants.rs:26:5\n@@ -78,7 +78,7 @@ LL |     debug_assert!(true);\n    |     ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: remove it\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 9 previous errors\n "}, {"sha": "a4bc058fe2020b2263e5323c55160e56de9750ae", "filename": "tests/ui/checked_unwrap/simple_conditionals.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Fchecked_unwrap%2Fsimple_conditionals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Fchecked_unwrap%2Fsimple_conditionals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchecked_unwrap%2Fsimple_conditionals.stderr?ref=9e3cd88718cd1912a515d26dbd9c4019fd5a9577", "patch": "@@ -55,7 +55,7 @@ LL |             $a.unwrap(); // unnecessary\n LL |     m!(x);\n    |     ------ in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: you checked before that `unwrap()` cannot fail, instead of checking and unwrapping, it's better to use `if let` or `match`\n   --> $DIR/simple_conditionals.rs:54:9"}, {"sha": "8975b2efbaeeb8900e1f22e3af2be375675d6785", "filename": "tests/ui/collapsible_match2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Fcollapsible_match2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Fcollapsible_match2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_match2.stderr?ref=9e3cd88718cd1912a515d26dbd9c4019fd5a9577", "patch": "@@ -55,7 +55,7 @@ LL |         mac!(res_opt => Ok(val), val => Some(n), foo(n));\n    |                            ^^^          ^^^^^^^ with this pattern\n    |                            |\n    |                            replace this binding\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: unnecessary nested match\n   --> $DIR/collapsible_match2.rs:51:20"}, {"sha": "5dbf9d440dd7594e2d69a048f1985849b0d7ed27", "filename": "tests/ui/crashes/ice-6255.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Fcrashes%2Fice-6255.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Fcrashes%2Fice-6255.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6255.stderr?ref=9e3cd88718cd1912a515d26dbd9c4019fd5a9577", "patch": "@@ -7,7 +7,7 @@ LL |         extern crate std as core;\n LL | define_other_core!();\n    | --------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `define_other_core` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "7c9d705fa9895d80c380f7943b31de9f5363b9ad", "filename": "tests/ui/declare_interior_mutable_const/others.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Fdeclare_interior_mutable_const%2Fothers.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Fdeclare_interior_mutable_const%2Fothers.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeclare_interior_mutable_const%2Fothers.stderr?ref=9e3cd88718cd1912a515d26dbd9c4019fd5a9577", "patch": "@@ -33,7 +33,7 @@ LL |         const $name: $ty = $e;\n LL | declare_const!(_ONCE: Once = Once::new()); //~ ERROR interior mutable\n    | ------------------------------------------ in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `declare_const` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "bed385b5273a96bd2ee7b6bcb224fc86ff054b85", "filename": "tests/ui/declare_interior_mutable_const/traits.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Fdeclare_interior_mutable_const%2Ftraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Fdeclare_interior_mutable_const%2Ftraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeclare_interior_mutable_const%2Ftraits.stderr?ref=9e3cd88718cd1912a515d26dbd9c4019fd5a9577", "patch": "@@ -15,7 +15,7 @@ LL |         const $name: $ty = $e;\n LL |     declare_const!(ANOTHER_ATOMIC: AtomicUsize = Self::ATOMIC); //~ ERROR interior mutable\n    |     ----------------------------------------------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `declare_const` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: a `const` item should never be interior mutable\n   --> $DIR/traits.rs:43:5"}, {"sha": "e5de839dbc508d3754462ac913cc8ad2b2eb661a", "filename": "tests/ui/deprecated.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Fdeprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Fdeprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeprecated.stderr?ref=9e3cd88718cd1912a515d26dbd9c4019fd5a9577", "patch": "@@ -84,11 +84,5 @@ error: lint `clippy::filter_map` has been removed: this lint has been replaced b\n LL | #[warn(clippy::filter_map)]\n    |        ^^^^^^^^^^^^^^^^^^\n \n-error: lint `clippy::unstable_as_slice` has been removed: `Vec::as_slice` has been stabilized in 1.7\n-  --> $DIR/deprecated.rs:1:8\n-   |\n-LL | #[warn(clippy::unstable_as_slice)]\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 15 previous errors\n+error: aborting due to 14 previous errors\n "}, {"sha": "8043ab0058a5e283a07b86659a74a9063066b86c", "filename": "tests/ui/deprecated_old.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Fdeprecated_old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Fdeprecated_old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeprecated_old.stderr?ref=9e3cd88718cd1912a515d26dbd9c4019fd5a9577", "patch": "@@ -18,11 +18,5 @@ error: lint `misaligned_transmute` has been removed: this lint has been split in\n LL | #[warn(misaligned_transmute)]\n    |        ^^^^^^^^^^^^^^^^^^^^\n \n-error: lint `unstable_as_slice` has been removed: `Vec::as_slice` has been stabilized in 1.7\n-  --> $DIR/deprecated_old.rs:1:8\n-   |\n-LL | #[warn(unstable_as_slice)]\n-   |        ^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n "}, {"sha": "1a14f31af8d77c0a8df40c2cc5e72e5ce9a3be49", "filename": "tests/ui/deref_addrof.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Fderef_addrof.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Fderef_addrof.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderef_addrof.stderr?ref=9e3cd88718cd1912a515d26dbd9c4019fd5a9577", "patch": "@@ -57,7 +57,7 @@ LL |         *& $visitor\n LL |         m!(self)\n    |         -------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: immediately dereferencing a reference\n   --> $DIR/deref_addrof.rs:51:9\n@@ -68,7 +68,7 @@ LL |         *& mut $visitor\n LL |         m_mut!(self)\n    |         ------------ in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `m_mut` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 10 previous errors\n "}, {"sha": "b383072ca4db75afa7f1c9da49a73ece05f2fce5", "filename": "tests/ui/derive_hash_xor_eq.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Fderive_hash_xor_eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Fderive_hash_xor_eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderive_hash_xor_eq.stderr?ref=9e3cd88718cd1912a515d26dbd9c4019fd5a9577", "patch": "@@ -14,7 +14,7 @@ LL | |         true\n LL | |     }\n LL | | }\n    | |_^\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: you are deriving `Hash` but have implemented `PartialEq` explicitly\n   --> $DIR/derive_hash_xor_eq.rs:19:10\n@@ -31,7 +31,7 @@ LL | |         true\n LL | |     }\n LL | | }\n    | |_^\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: you are implementing `Hash` explicitly but have derived `PartialEq`\n   --> $DIR/derive_hash_xor_eq.rs:31:1\n@@ -46,7 +46,7 @@ note: `PartialEq` implemented here\n    |\n LL | #[derive(PartialEq)]\n    |          ^^^^^^^^^\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: you are implementing `Hash` explicitly but have derived `PartialEq`\n   --> $DIR/derive_hash_xor_eq.rs:49:5\n@@ -61,7 +61,7 @@ note: `PartialEq` implemented here\n    |\n LL |     #[derive(PartialEq)]\n    |              ^^^^^^^^^\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "32896c99dad0ac687923836ea865b7302d937a8c", "filename": "tests/ui/derive_ord_xor_partial_ord.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Fderive_ord_xor_partial_ord.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Fderive_ord_xor_partial_ord.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderive_ord_xor_partial_ord.stderr?ref=9e3cd88718cd1912a515d26dbd9c4019fd5a9577", "patch": "@@ -14,7 +14,7 @@ LL | |         Some(other.cmp(self))\n LL | |     }\n LL | | }\n    | |_^\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: you are deriving `Ord` but have implemented `PartialOrd` explicitly\n   --> $DIR/derive_ord_xor_partial_ord.rs:30:10\n@@ -31,7 +31,7 @@ LL | |         Some(other.cmp(self))\n LL | |     }\n LL | | }\n    | |_^\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: you are implementing `Ord` explicitly but have derived `PartialOrd`\n   --> $DIR/derive_ord_xor_partial_ord.rs:42:1\n@@ -48,7 +48,7 @@ note: `PartialOrd` implemented here\n    |\n LL | #[derive(PartialOrd, PartialEq, Eq)]\n    |          ^^^^^^^^^^\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: you are implementing `Ord` explicitly but have derived `PartialOrd`\n   --> $DIR/derive_ord_xor_partial_ord.rs:62:5\n@@ -65,7 +65,7 @@ note: `PartialOrd` implemented here\n    |\n LL |     #[derive(PartialOrd, PartialEq, Eq)]\n    |              ^^^^^^^^^^\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "73b53f3431e7aa8737be2a2e998aa4ad665d6c73", "filename": "tests/ui/doc_unsafe.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Fdoc_unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Fdoc_unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc_unsafe.stderr?ref=9e3cd88718cd1912a515d26dbd9c4019fd5a9577", "patch": "@@ -41,7 +41,7 @@ LL | |         }\n LL |   very_unsafe!();\n    |   --------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `very_unsafe` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 5 previous errors\n "}, {"sha": "a28961e7568edda36c40234222b3a7d481bcfb94", "filename": "tests/ui/eq_op_macros.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Feq_op_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Feq_op_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feq_op_macros.stderr?ref=9e3cd88718cd1912a515d26dbd9c4019fd5a9577", "patch": "@@ -8,7 +8,7 @@ LL |     assert_in_macro_def!();\n    |     ----------------------- in this macro invocation\n    |\n    = note: `-D clippy::eq-op` implied by `-D warnings`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `assert_in_macro_def` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: identical args used in this `assert_ne!` macro call\n   --> $DIR/eq_op_macros.rs:8:20\n@@ -19,7 +19,7 @@ LL |         assert_ne!(a, a);\n LL |     assert_in_macro_def!();\n    |     ----------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `assert_in_macro_def` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: identical args used in this `assert_eq!` macro call\n   --> $DIR/eq_op_macros.rs:22:16\n@@ -54,7 +54,7 @@ LL |         debug_assert_eq!(a, a);\n LL |     assert_in_macro_def!();\n    |     ----------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `assert_in_macro_def` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: identical args used in this `debug_assert_ne!` macro call\n   --> $DIR/eq_op_macros.rs:10:26\n@@ -65,7 +65,7 @@ LL |         debug_assert_ne!(a, a);\n LL |     assert_in_macro_def!();\n    |     ----------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `assert_in_macro_def` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: identical args used in this `debug_assert_eq!` macro call\n   --> $DIR/eq_op_macros.rs:38:22"}, {"sha": "64c8ea857277e2af5b4a81e4390d55c2c7be23a3", "filename": "tests/ui/fallible_impl_from.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Ffallible_impl_from.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Ffallible_impl_from.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffallible_impl_from.stderr?ref=9e3cd88718cd1912a515d26dbd9c4019fd5a9577", "patch": "@@ -38,7 +38,7 @@ note: potential failure(s)\n    |\n LL |             panic!();\n    |             ^^^^^^^^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: consider implementing `TryFrom` instead\n   --> $DIR/fallible_impl_from.rs:35:1\n@@ -65,7 +65,7 @@ LL |         } else if s.parse::<u32>().unwrap() != 42 {\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^\n LL |             panic!(\"{:?}\", s);\n    |             ^^^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: consider implementing `TryFrom` instead\n   --> $DIR/fallible_impl_from.rs:53:1\n@@ -87,7 +87,7 @@ LL |         if s.parse::<u32>().ok().unwrap() != 42 {\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n LL |             panic!(\"{:?}\", s);\n    |             ^^^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "41ca6485c4c97fcdef8b980cb2e9bb4786c917e4", "filename": "tests/ui/implicit_hasher.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Fimplicit_hasher.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Fimplicit_hasher.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_hasher.stderr?ref=9e3cd88718cd1912a515d26dbd9c4019fd5a9577", "patch": "@@ -109,7 +109,7 @@ LL |         impl<K: Hash + Eq, V> Foo<u8> for HashMap<K, V> {\n LL | gen!(impl);\n    | ----------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `gen` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider adding a type parameter\n    |\n LL |         impl<K: Hash + Eq, V, S: ::std::hash::BuildHasher + Default> Foo<u8> for HashMap<K, V, S> {\n@@ -128,7 +128,7 @@ LL |         pub fn $name(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>)\n LL | gen!(fn bar);\n    | ------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `gen` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider adding a type parameter\n    |\n LL |         pub fn $name<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32, S>, _set: &mut HashSet<i32>) {}\n@@ -143,7 +143,7 @@ LL |         pub fn $name(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>)\n LL | gen!(fn bar);\n    | ------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `gen` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider adding a type parameter\n    |\n LL |         pub fn $name<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32, S>) {}"}, {"sha": "bcb163d4bc1243e2604ecd40ed818448c0dbc3a8", "filename": "tests/ui/item_after_statement.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Fitem_after_statement.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Fitem_after_statement.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fitem_after_statement.stderr?ref=9e3cd88718cd1912a515d26dbd9c4019fd5a9577", "patch": "@@ -27,7 +27,7 @@ LL | |             }\n LL |       b!();\n    |       ----- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `b` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "430021a0f7f5acddf88545d543bef5f20d90b077", "filename": "tests/ui/match_same_arms2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Fmatch_same_arms2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Fmatch_same_arms2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_same_arms2.stderr?ref=9e3cd88718cd1912a515d26dbd9c4019fd5a9577", "patch": "@@ -121,7 +121,7 @@ help: consider refactoring into `(Ok(x), Some(_)) | (Ok(_), Some(x))`\n    |\n LL |         (Ok(x), Some(_)) => println!(\"ok {}\", x),\n    |         ^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: this `match` has identical arm bodies\n   --> $DIR/match_same_arms2.rs:117:18\n@@ -139,7 +139,7 @@ help: consider refactoring into `Ok(3) | Ok(_)`\n    |\n LL |         Ok(3) => println!(\"ok\"),\n    |         ^^^^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: this `match` has identical arm bodies\n   --> $DIR/match_same_arms2.rs:144:14"}, {"sha": "36a225b759484da68bd6f98fa1f1f4c8cfdf216f", "filename": "tests/ui/mem_discriminant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Fmem_discriminant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Fmem_discriminant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_discriminant.stderr?ref=9e3cd88718cd1912a515d26dbd9c4019fd5a9577", "patch": "@@ -72,7 +72,7 @@ LL |     mem_discriminant_but_in_a_macro!(&rro);\n    |     |                                help: try dereferencing: `*rro`\n    |     in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `mem_discriminant_but_in_a_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: calling `mem::discriminant` on non-enum type `&&&&&std::option::Option<i32>`\n   --> $DIR/mem_discriminant.rs:34:5"}, {"sha": "b4963acc4553c79808b546bda11d1515e6bfdef9", "filename": "tests/ui/mem_replace_macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Fmem_replace_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Fmem_replace_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_replace_macro.stderr?ref=9e3cd88718cd1912a515d26dbd9c4019fd5a9577", "patch": "@@ -8,7 +8,7 @@ LL |     take!(s);\n    |     --------- in this macro invocation\n    |\n    = note: `-D clippy::mem-replace-with-default` implied by `-D warnings`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `take` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "8d882cc6e0d07cdc266a8a9fa1b4045c6f8a9628", "filename": "tests/ui/missing_panics_doc.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Fmissing_panics_doc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Fmissing_panics_doc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_panics_doc.stderr?ref=9e3cd88718cd1912a515d26dbd9c4019fd5a9577", "patch": "@@ -27,7 +27,7 @@ note: first possible panic found here\n    |\n LL |     panic!(\"This function panics\")\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: docs for function which may panic missing `# Panics` section\n   --> $DIR/missing_panics_doc.rs:18:1\n@@ -42,7 +42,7 @@ note: first possible panic found here\n    |\n LL |     todo!()\n    |     ^^^^^^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: docs for function which may panic missing `# Panics` section\n   --> $DIR/missing_panics_doc.rs:23:1\n@@ -61,7 +61,7 @@ note: first possible panic found here\n    |\n LL |             panic!()\n    |             ^^^^^^^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: docs for function which may panic missing `# Panics` section\n   --> $DIR/missing_panics_doc.rs:32:1\n@@ -76,7 +76,7 @@ note: first possible panic found here\n    |\n LL |     if true { unreachable!() } else { panic!() }\n    |                                       ^^^^^^^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: docs for function which may panic missing `# Panics` section\n   --> $DIR/missing_panics_doc.rs:37:1\n@@ -92,7 +92,7 @@ note: first possible panic found here\n    |\n LL |     assert_eq!(x, 0);\n    |     ^^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: docs for function which may panic missing `# Panics` section\n   --> $DIR/missing_panics_doc.rs:43:1\n@@ -108,7 +108,7 @@ note: first possible panic found here\n    |\n LL |     assert_ne!(x, 0);\n    |     ^^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `assert_ne` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 7 previous errors\n "}, {"sha": "0fed6953cb85c295fc022a50e9d13a97c2772ded", "filename": "tests/ui/mut_mut.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Fmut_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Fmut_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_mut.stderr?ref=9e3cd88718cd1912a515d26dbd9c4019fd5a9577", "patch": "@@ -21,7 +21,7 @@ LL |         &mut $p\n LL |     let mut z = mut_ptr!(&mut 3u32);\n    |                 ------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `mut_ptr` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: this expression mutably borrows a mutable reference. Consider reborrowing\n   --> $DIR/mut_mut.rs:22:21"}, {"sha": "02bf50d077abff4c523b38f8822fc1888b26095d", "filename": "tests/ui/needless_question_mark.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Fneedless_question_mark.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Fneedless_question_mark.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_question_mark.stderr?ref=9e3cd88718cd1912a515d26dbd9c4019fd5a9577", "patch": "@@ -75,7 +75,7 @@ LL |         || -> Option<_> { Some(Some($expr)?) }()\n LL |     let _x = some_and_qmark_in_macro!(x?);\n    |              ---------------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `some_and_qmark_in_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 12 previous errors\n "}, {"sha": "58094646b505cad518d16b3a65665336e47b9856", "filename": "tests/ui/new_without_default.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_without_default.rs?ref=9e3cd88718cd1912a515d26dbd9c4019fd5a9577", "patch": "@@ -1,4 +1,3 @@\n-#![feature(const_fn)]\n #![allow(dead_code, clippy::missing_safety_doc)]\n #![warn(clippy::new_without_default)]\n "}, {"sha": "56c5fe1c6189acaa638acfdf3fe88c97e5be2829", "filename": "tests/ui/new_without_default.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Fnew_without_default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Fnew_without_default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_without_default.stderr?ref=9e3cd88718cd1912a515d26dbd9c4019fd5a9577", "patch": "@@ -1,5 +1,5 @@\n error: you should consider adding a `Default` implementation for `Foo`\n-  --> $DIR/new_without_default.rs:8:5\n+  --> $DIR/new_without_default.rs:7:5\n    |\n LL | /     pub fn new() -> Foo {\n LL | |         Foo\n@@ -17,7 +17,7 @@ LL | }\n    |\n \n error: you should consider adding a `Default` implementation for `Bar`\n-  --> $DIR/new_without_default.rs:16:5\n+  --> $DIR/new_without_default.rs:15:5\n    |\n LL | /     pub fn new() -> Self {\n LL | |         Bar\n@@ -34,7 +34,7 @@ LL | }\n    |\n \n error: you should consider adding a `Default` implementation for `LtKo<'c>`\n-  --> $DIR/new_without_default.rs:80:5\n+  --> $DIR/new_without_default.rs:79:5\n    |\n LL | /     pub fn new() -> LtKo<'c> {\n LL | |         unimplemented!()\n@@ -51,7 +51,7 @@ LL | }\n    |\n \n error: you should consider adding a `Default` implementation for `NewNotEqualToDerive`\n-  --> $DIR/new_without_default.rs:157:5\n+  --> $DIR/new_without_default.rs:156:5\n    |\n LL | /     pub fn new() -> Self {\n LL | |         NewNotEqualToDerive { foo: 1 }\n@@ -68,7 +68,7 @@ LL | }\n    |\n \n error: you should consider adding a `Default` implementation for `FooGenerics<T>`\n-  --> $DIR/new_without_default.rs:165:5\n+  --> $DIR/new_without_default.rs:164:5\n    |\n LL | /     pub fn new() -> Self {\n LL | |         Self(Default::default())\n@@ -85,7 +85,7 @@ LL | }\n    |\n \n error: you should consider adding a `Default` implementation for `BarGenerics<T>`\n-  --> $DIR/new_without_default.rs:172:5\n+  --> $DIR/new_without_default.rs:171:5\n    |\n LL | /     pub fn new() -> Self {\n LL | |         Self(Default::default())"}, {"sha": "e6a58b0b2b752f3cca87b1a42816c2900a37953b", "filename": "tests/ui/option_env_unwrap.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Foption_env_unwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Foption_env_unwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_env_unwrap.stderr?ref=9e3cd88718cd1912a515d26dbd9c4019fd5a9577", "patch": "@@ -25,7 +25,7 @@ LL |     let _ = option_env_unwrap!(\"PATH\");\n    |             -------------------------- in this macro invocation\n    |\n    = help: consider using the `env!` macro instead\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `option_env_unwrap` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: this will panic at run-time if the environment variable doesn't exist at compile-time\n   --> $DIR/option_env_unwrap.rs:12:9\n@@ -37,7 +37,7 @@ LL |     let _ = option_env_unwrap!(\"PATH\", \"environment variable PATH isn't set\n    |             ----------------------------------------------------------------- in this macro invocation\n    |\n    = help: consider using the `env!` macro instead\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `option_env_unwrap` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: this will panic at run-time if the environment variable doesn't exist at compile-time\n   --> $DIR/option_env_unwrap.rs:21:13\n@@ -46,7 +46,7 @@ LL |     let _ = option_env_unwrap_external!(\"PATH\");\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using the `env!` macro instead\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `option_env_unwrap_external` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: this will panic at run-time if the environment variable doesn't exist at compile-time\n   --> $DIR/option_env_unwrap.rs:22:13\n@@ -55,7 +55,7 @@ LL |     let _ = option_env_unwrap_external!(\"PATH\", \"environment variable PATH\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using the `env!` macro instead\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `option_env_unwrap_external` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 6 previous errors\n "}, {"sha": "8d6e40c30a10909280d80fbb24ad155d3ce45bf0", "filename": "tests/ui/panic_in_result_fn.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Fpanic_in_result_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Fpanic_in_result_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic_in_result_fn.stderr?ref=9e3cd88718cd1912a515d26dbd9c4019fd5a9577", "patch": "@@ -14,7 +14,7 @@ note: return Err() instead of panicking\n    |\n LL |         panic!(\"error\");\n    |         ^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n   --> $DIR/panic_in_result_fn.rs:12:5\n@@ -31,7 +31,7 @@ note: return Err() instead of panicking\n    |\n LL |         unimplemented!();\n    |         ^^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `unimplemented` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n   --> $DIR/panic_in_result_fn.rs:17:5\n@@ -48,7 +48,7 @@ note: return Err() instead of panicking\n    |\n LL |         unreachable!();\n    |         ^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `unreachable` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n   --> $DIR/panic_in_result_fn.rs:22:5\n@@ -65,7 +65,7 @@ note: return Err() instead of panicking\n    |\n LL |         todo!(\"Finish this\");\n    |         ^^^^^^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `todo` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n   --> $DIR/panic_in_result_fn.rs:53:1\n@@ -82,7 +82,7 @@ note: return Err() instead of panicking\n    |\n LL |     panic!(\"error\");\n    |     ^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n   --> $DIR/panic_in_result_fn.rs:68:1\n@@ -99,7 +99,7 @@ note: return Err() instead of panicking\n    |\n LL |     todo!(\"finish main method\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `todo` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 6 previous errors\n "}, {"sha": "4c39b37d8798fcf1839ff629f7842153ae15daf1", "filename": "tests/ui/panic_in_result_fn_assertions.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Fpanic_in_result_fn_assertions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Fpanic_in_result_fn_assertions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic_in_result_fn_assertions.stderr?ref=9e3cd88718cd1912a515d26dbd9c4019fd5a9577", "patch": "@@ -15,7 +15,7 @@ note: return Err() instead of panicking\n    |\n LL |         assert!(x == 5, \"wrong argument\");\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n   --> $DIR/panic_in_result_fn_assertions.rs:13:5\n@@ -33,7 +33,7 @@ note: return Err() instead of panicking\n    |\n LL |         assert_eq!(x, 5);\n    |         ^^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n   --> $DIR/panic_in_result_fn_assertions.rs:19:5\n@@ -51,7 +51,7 @@ note: return Err() instead of panicking\n    |\n LL |         assert_ne!(x, 1);\n    |         ^^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `assert_ne` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "2e83c305a67e055c7b7f8dc3bd06021cbb1b79eb", "filename": "tests/ui/panicking_macros.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Fpanicking_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Fpanicking_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanicking_macros.stderr?ref=9e3cd88718cd1912a515d26dbd9c4019fd5a9577", "patch": "@@ -25,23 +25,23 @@ LL |     todo!();\n    |     ^^^^^^^^\n    |\n    = note: `-D clippy::todo` implied by `-D warnings`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `todo` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `todo` should not be present in production code\n   --> $DIR/panicking_macros.rs:17:5\n    |\n LL |     todo!(\"message\");\n    |     ^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `todo` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `todo` should not be present in production code\n   --> $DIR/panicking_macros.rs:18:5\n    |\n LL |     todo!(\"{} {}\", \"panic with\", \"multiple arguments\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `todo` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `unimplemented` should not be present in production code\n   --> $DIR/panicking_macros.rs:24:5\n@@ -50,23 +50,23 @@ LL |     unimplemented!();\n    |     ^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::unimplemented` implied by `-D warnings`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `unimplemented` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `unimplemented` should not be present in production code\n   --> $DIR/panicking_macros.rs:25:5\n    |\n LL |     unimplemented!(\"message\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `unimplemented` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `unimplemented` should not be present in production code\n   --> $DIR/panicking_macros.rs:26:5\n    |\n LL |     unimplemented!(\"{} {}\", \"panic with\", \"multiple arguments\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `unimplemented` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: usage of the `unreachable!` macro\n   --> $DIR/panicking_macros.rs:32:5\n@@ -75,23 +75,23 @@ LL |     unreachable!();\n    |     ^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::unreachable` implied by `-D warnings`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `unreachable` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: usage of the `unreachable!` macro\n   --> $DIR/panicking_macros.rs:33:5\n    |\n LL |     unreachable!(\"message\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::unreachable` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: usage of the `unreachable!` macro\n   --> $DIR/panicking_macros.rs:34:5\n    |\n LL |     unreachable!(\"{} {}\", \"panic with\", \"multiple arguments\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `unreachable` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `panic` should not be present in production code\n   --> $DIR/panicking_macros.rs:40:5\n@@ -105,23 +105,23 @@ error: `todo` should not be present in production code\n LL |     todo!();\n    |     ^^^^^^^^\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `todo` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `unimplemented` should not be present in production code\n   --> $DIR/panicking_macros.rs:42:5\n    |\n LL |     unimplemented!();\n    |     ^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `unimplemented` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: usage of the `unreachable!` macro\n   --> $DIR/panicking_macros.rs:43:5\n    |\n LL |     unreachable!();\n    |     ^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `unreachable` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 16 previous errors\n "}, {"sha": "f309b2739829f90b921b139646abf2dbcce5ae51", "filename": "tests/ui/pattern_type_mismatch/syntax.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Fpattern_type_mismatch%2Fsyntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Fpattern_type_mismatch%2Fsyntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern_type_mismatch%2Fsyntax.stderr?ref=9e3cd88718cd1912a515d26dbd9c4019fd5a9577", "patch": "@@ -73,7 +73,7 @@ LL |     matching_macro!(value);\n    |     ----------------------- in this macro invocation\n    |\n    = help: use `*` to dereference the match expression or explicitly match against a `&_` pattern and adjust the enclosed variable bindings\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `matching_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 9 previous errors\n "}, {"sha": "c5d633ff86bfcc77357493953f8e3f82d867d316", "filename": "tests/ui/rename.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Frename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Frename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frename.stderr?ref=9e3cd88718cd1912a515d26dbd9c4019fd5a9577", "patch": "@@ -24,11 +24,5 @@ error: lint `clippy::const_static_lifetime` has been renamed to `clippy::redunda\n LL | #[warn(clippy::const_static_lifetime)]\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::redundant_static_lifetimes`\n \n-error: lint `clippy::cyclomatic_complexity` has been renamed to `clippy::cognitive_complexity`\n-  --> $DIR/rename.rs:10:9\n-   |\n-LL | #![warn(clippy::cyclomatic_complexity)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::cognitive_complexity`\n-\n-error: aborting due to 5 previous errors\n+error: aborting due to 4 previous errors\n "}, {"sha": "48e7d9ddd5aee5086731acb05f99456c6d97c1f4", "filename": "tests/ui/toplevel_ref_arg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Ftoplevel_ref_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Ftoplevel_ref_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftoplevel_ref_arg.stderr?ref=9e3cd88718cd1912a515d26dbd9c4019fd5a9577", "patch": "@@ -39,7 +39,7 @@ LL |         let ref _y = 42;\n LL |         gen_binding!();\n    |         --------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `gen_binding` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 6 previous errors\n "}, {"sha": "31f8c103ede573ad1153c653bf64759cccbe3def", "filename": "tests/ui/toplevel_ref_arg_non_rustfix.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Ftoplevel_ref_arg_non_rustfix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Ftoplevel_ref_arg_non_rustfix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftoplevel_ref_arg_non_rustfix.stderr?ref=9e3cd88718cd1912a515d26dbd9c4019fd5a9577", "patch": "@@ -15,7 +15,7 @@ LL |         fn fun_example(ref _x: usize) {}\n LL |         gen_function!();\n    |         ---------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `gen_function` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "09efc16c154ef70ef9e676f411af7594903b1349", "filename": "tests/ui/try_err.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Ftry_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Ftry_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftry_err.stderr?ref=9e3cd88718cd1912a515d26dbd9c4019fd5a9577", "patch": "@@ -37,7 +37,7 @@ LL |             Err(_) => Err(1)?,\n LL |     try_validation!(Ok::<_, i32>(5));\n    |     --------------------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `try_validation` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: returning an `Err(_)` with the `?` operator\n   --> $DIR/try_err.rs:102:23\n@@ -48,7 +48,7 @@ LL |             Err(_) => Err(ret_one!())?,\n LL |     try_validation_in_macro!(Ok::<_, i32>(5));\n    |     ------------------------------------------ in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `try_validation_in_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: returning an `Err(_)` with the `?` operator\n   --> $DIR/try_err.rs:141:9"}, {"sha": "75017cab05776f2a98a9f0931f4803542b02d2dd", "filename": "tests/ui/unit_cmp.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Funit_cmp.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Funit_cmp.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_cmp.stderr?ref=9e3cd88718cd1912a515d26dbd9c4019fd5a9577", "patch": "@@ -34,7 +34,7 @@ LL | |         }\n LL | |     );\n    | |______^\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `debug_assert_eq` of unit values detected. This will always succeed\n   --> $DIR/unit_cmp.rs:32:5\n@@ -48,7 +48,7 @@ LL | |         }\n LL | |     );\n    | |______^\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `assert_ne` of unit values detected. This will always fail\n   --> $DIR/unit_cmp.rs:41:5\n@@ -62,7 +62,7 @@ LL | |         }\n LL | |     );\n    | |______^\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `assert_ne` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `debug_assert_ne` of unit values detected. This will always fail\n   --> $DIR/unit_cmp.rs:49:5\n@@ -76,7 +76,7 @@ LL | |         }\n LL | |     );\n    | |______^\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::assert_ne` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 6 previous errors\n "}, {"sha": "421bf5ffa9a70c1ff6238113adb7adab2995b0d2", "filename": "tests/ui/unknown_clippy_lints.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Funknown_clippy_lints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Funknown_clippy_lints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funknown_clippy_lints.stderr?ref=9e3cd88718cd1912a515d26dbd9c4019fd5a9577", "patch": "@@ -48,11 +48,5 @@ error: unknown lint: `clippy::const_static_lifetim`\n LL | #[warn(clippy::const_static_lifetim)]\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: did you mean: `clippy::redundant_static_lifetimes`\n \n-error: unknown lint: `clippy::All`\n-  --> $DIR/unknown_clippy_lints.rs:5:10\n-   |\n-LL | #![allow(clippy::All)]\n-   |          ^^^^^^^^^^^ help: did you mean: `clippy::all`\n-\n-error: aborting due to 9 previous errors\n+error: aborting due to 8 previous errors\n "}, {"sha": "18c4276c6ddfd7c62578a9e535b01b70b8c8a37a", "filename": "tests/ui/unsafe_derive_deserialize.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Funsafe_derive_deserialize.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Funsafe_derive_deserialize.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsafe_derive_deserialize.stderr?ref=9e3cd88718cd1912a515d26dbd9c4019fd5a9577", "patch": "@@ -6,7 +6,7 @@ LL | #[derive(Deserialize)]\n    |\n    = note: `-D clippy::unsafe-derive-deserialize` implied by `-D warnings`\n    = help: consider implementing `serde::Deserialize` manually. See https://serde.rs/impl-deserialize.html\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: you are deriving `serde::Deserialize` on a type that has methods using `unsafe`\n   --> $DIR/unsafe_derive_deserialize.rs:16:10\n@@ -15,7 +15,7 @@ LL | #[derive(Deserialize)]\n    |          ^^^^^^^^^^^\n    |\n    = help: consider implementing `serde::Deserialize` manually. See https://serde.rs/impl-deserialize.html\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: you are deriving `serde::Deserialize` on a type that has methods using `unsafe`\n   --> $DIR/unsafe_derive_deserialize.rs:22:10\n@@ -24,7 +24,7 @@ LL | #[derive(Deserialize)]\n    |          ^^^^^^^^^^^\n    |\n    = help: consider implementing `serde::Deserialize` manually. See https://serde.rs/impl-deserialize.html\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: you are deriving `serde::Deserialize` on a type that has methods using `unsafe`\n   --> $DIR/unsafe_derive_deserialize.rs:30:10\n@@ -33,7 +33,7 @@ LL | #[derive(Deserialize)]\n    |          ^^^^^^^^^^^\n    |\n    = help: consider implementing `serde::Deserialize` manually. See https://serde.rs/impl-deserialize.html\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "a0c0be7a9d154277f849edca0b5563f8b0aa116d", "filename": "tests/ui/unseparated_prefix_literals.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Funseparated_prefix_literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e3cd88718cd1912a515d26dbd9c4019fd5a9577/tests%2Fui%2Funseparated_prefix_literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funseparated_prefix_literals.stderr?ref=9e3cd88718cd1912a515d26dbd9c4019fd5a9577", "patch": "@@ -51,7 +51,7 @@ LL |         42usize\n LL |     let _ = lit_from_macro!();\n    |             ----------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `lit_from_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: integer type suffix should be separated by an underscore\n   --> $DIR/unseparated_prefix_literals.rs:40:16"}]}