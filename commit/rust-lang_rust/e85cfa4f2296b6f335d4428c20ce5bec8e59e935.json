{"sha": "e85cfa4f2296b6f335d4428c20ce5bec8e59e935", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4NWNmYTRmMjI5NmI2ZjMzNWQ0NDI4YzIwY2U1YmVjOGU1OWU5MzU=", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2019-11-29T00:11:14Z"}, "committer": {"name": "The8472", "email": "git@infinite-source.de", "date": "2020-09-03T18:59:22Z"}, "message": "impl TrustedRandomAccess for vec::IntoIter", "tree": {"sha": "e24e877a07f1a1d02aaf016aa8116d0ef2ed72ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e24e877a07f1a1d02aaf016aa8116d0ef2ed72ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e85cfa4f2296b6f335d4428c20ce5bec8e59e935", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e85cfa4f2296b6f335d4428c20ce5bec8e59e935", "html_url": "https://github.com/rust-lang/rust/commit/e85cfa4f2296b6f335d4428c20ce5bec8e59e935", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e85cfa4f2296b6f335d4428c20ce5bec8e59e935/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1151844fae40ce45bb46808e31e58cc7795500d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1151844fae40ce45bb46808e31e58cc7795500d", "html_url": "https://github.com/rust-lang/rust/commit/e1151844fae40ce45bb46808e31e58cc7795500d"}], "stats": {"total": 31, "additions": 28, "deletions": 3}, "files": [{"sha": "27f2440ddc03bc07c2424bd6c995d8221311d70d", "filename": "library/alloc/src/vec.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e85cfa4f2296b6f335d4428c20ce5bec8e59e935/library%2Falloc%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e85cfa4f2296b6f335d4428c20ce5bec8e59e935/library%2Falloc%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec.rs?ref=e85cfa4f2296b6f335d4428c20ce5bec8e59e935", "patch": "@@ -58,7 +58,9 @@ use core::cmp::{self, Ordering};\n use core::fmt;\n use core::hash::{Hash, Hasher};\n use core::intrinsics::{arith_offset, assume};\n-use core::iter::{FromIterator, FusedIterator, InPlaceIterable, SourceIter, TrustedLen};\n+use core::iter::{\n+    FromIterator, FusedIterator, InPlaceIterable, SourceIter, TrustedLen, TrustedRandomAccess,\n+};\n use core::marker::PhantomData;\n use core::mem::{self, ManuallyDrop, MaybeUninit};\n use core::ops::Bound::{Excluded, Included, Unbounded};\n@@ -2936,6 +2938,25 @@ impl<T> FusedIterator for IntoIter<T> {}\n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n unsafe impl<T> TrustedLen for IntoIter<T> {}\n \n+#[doc(hidden)]\n+#[unstable(issue = \"0\", feature = \"std_internals\")]\n+// T: Copy as approximation for !Drop since get_unchecked does not advance self.ptr\n+// and thus we can't implement drop-handling\n+unsafe impl<T> TrustedRandomAccess for IntoIter<T>\n+where\n+    T: Copy,\n+{\n+    unsafe fn get_unchecked(&mut self, i: usize) -> Self::Item {\n+        unsafe {\n+            if mem::size_of::<T>() == 0 { mem::zeroed() } else { ptr::read(self.ptr.add(i)) }\n+        }\n+    }\n+\n+    fn may_have_side_effect() -> bool {\n+        false\n+    }\n+}\n+\n #[stable(feature = \"vec_into_iter_clone\", since = \"1.8.0\")]\n impl<T: Clone> Clone for IntoIter<T> {\n     fn clone(&self) -> IntoIter<T> {"}, {"sha": "12fdd3f49c33196fe6aeab1b53fb8c227334805a", "filename": "library/core/src/iter/adapters/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e85cfa4f2296b6f335d4428c20ce5bec8e59e935/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e85cfa4f2296b6f335d4428c20ce5bec8e59e935/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs?ref=e85cfa4f2296b6f335d4428c20ce5bec8e59e935", "patch": "@@ -18,7 +18,8 @@ pub use self::chain::Chain;\n pub use self::flatten::{FlatMap, Flatten};\n pub use self::fuse::Fuse;\n use self::zip::try_get_unchecked;\n-pub(crate) use self::zip::TrustedRandomAccess;\n+#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+pub use self::zip::TrustedRandomAccess;\n pub use self::zip::Zip;\n \n /// This trait provides transitive access to source-stages in an interator-adapter pipeline\n@@ -480,6 +481,7 @@ where\n unsafe impl<I> TrustedRandomAccess for Cloned<I>\n where\n     I: TrustedRandomAccess,\n+\n {\n     #[inline]\n     fn may_have_side_effect() -> bool {"}, {"sha": "922ffd1e0b588126964b19cfb5a55d6d613084b3", "filename": "library/core/src/iter/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e85cfa4f2296b6f335d4428c20ce5bec8e59e935/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e85cfa4f2296b6f335d4428c20ce5bec8e59e935/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs?ref=e85cfa4f2296b6f335d4428c20ce5bec8e59e935", "patch": "@@ -357,14 +357,16 @@ pub use self::adapters::MapWhile;\n pub use self::adapters::SourceIter;\n #[stable(feature = \"iterator_step_by\", since = \"1.28.0\")]\n pub use self::adapters::StepBy;\n+#[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+pub use self::adapters::TrustedRandomAccess;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::adapters::{Chain, Cycle, Enumerate, Filter, FilterMap, Map, Rev, Zip};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::adapters::{FlatMap, Peekable, Scan, Skip, SkipWhile, Take, TakeWhile};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::adapters::{Fuse, Inspect};\n \n-pub(crate) use self::adapters::{process_results, TrustedRandomAccess};\n+pub(crate) use self::adapters::process_results;\n \n mod adapters;\n mod range;"}]}