{"sha": "08da893cdb1c4533c9ecd2a3c443a4c98fd77530", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4ZGE4OTNjZGIxYzQ1MzNjOWVjZDJhM2M0NDNhNGM5OGZkNzc1MzA=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-19T02:02:56Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-19T03:59:23Z"}, "message": "rustdoc: Parse module docs", "tree": {"sha": "88df198ee92b26d7fb61e75f91ea0e4e5612d643", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88df198ee92b26d7fb61e75f91ea0e4e5612d643"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08da893cdb1c4533c9ecd2a3c443a4c98fd77530", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08da893cdb1c4533c9ecd2a3c443a4c98fd77530", "html_url": "https://github.com/rust-lang/rust/commit/08da893cdb1c4533c9ecd2a3c443a4c98fd77530", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08da893cdb1c4533c9ecd2a3c443a4c98fd77530/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10634452def994109066c80a4d5115e4f7ee6e79", "url": "https://api.github.com/repos/rust-lang/rust/commits/10634452def994109066c80a4d5115e4f7ee6e79", "html_url": "https://github.com/rust-lang/rust/commit/10634452def994109066c80a4d5115e4f7ee6e79"}], "stats": {"total": 233, "additions": 154, "deletions": 79}, "files": [{"sha": "e05d6c627bf66804f0b6d937c1aa0da3ebbcfaa8", "filename": "src/rustdoc/attr_parser.rs", "status": "modified", "additions": 154, "deletions": 79, "changes": 233, "blob_url": "https://github.com/rust-lang/rust/blob/08da893cdb1c4533c9ecd2a3c443a4c98fd77530/src%2Frustdoc%2Fattr_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08da893cdb1c4533c9ecd2a3c443a4c98fd77530/src%2Frustdoc%2Fattr_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fattr_parser.rs?ref=08da893cdb1c4533c9ecd2a3c443a4c98fd77530", "patch": "@@ -10,12 +10,17 @@ import rustc::front::attr;\n import core::tuple;\n \n export crate_attrs, fn_attrs, arg_attrs;\n-export parse_crate, parse_fn;\n+export parse_crate, parse_mod, parse_fn;\n \n type crate_attrs = {\n     name: option<str>\n };\n \n+type mod_attrs = {\n+    brief: option<str>,\n+    desc: option<str>\n+};\n+\n type fn_attrs = {\n     brief: option<str>,\n     desc: option<str>,\n@@ -80,51 +85,121 @@ fn should_not_extract_crate_name_if_no_name_value_in_link_attribute() {\n     assert attrs.name == none;\n }\n \n-fn parse_fn(\n-    attrs: [ast::attribute]\n-) -> fn_attrs {\n+fn parse_mod(attrs: [ast::attribute]) -> mod_attrs {\n+    parse_short_doc_or(\n+        attrs,\n+        {|desc|\n+            {\n+                brief: none,\n+                desc: desc\n+            }\n+        },\n+        parse_mod_long_doc\n+    )\n+}\n \n-    let no_attrs = {\n-        brief: none,\n-        desc: none,\n-        args: [],\n-        return: none\n-    };\n+fn parse_mod_long_doc(\n+    _items: [@ast::meta_item],\n+    brief: option<str>,\n+    desc: option<str>\n+) -> mod_attrs {\n+    {\n+        brief: brief,\n+        desc: desc\n+    }\n+}\n \n-    ret alt doc_meta(attrs) {\n+#[test]\n+fn parse_mod_should_handle_undocumented_mods() {\n+    let source = \"\";\n+    let attrs = test::parse_attributes(source);\n+    let attrs = parse_mod(attrs);\n+    assert attrs.brief == none;\n+    assert attrs.desc == none;\n+}\n+\n+#[test]\n+fn parse_mod_should_parse_simple_doc_attributes() {\n+    let source = \"#[doc = \\\"basic\\\"]\";\n+    let attrs = test::parse_attributes(source);\n+    let attrs = parse_mod(attrs);\n+    assert attrs.desc == some(\"basic\");\n+}\n+\n+#[test]\n+fn parse_mod_should_parse_the_brief_description() {\n+    let source = \"#[doc(brief = \\\"short\\\")]\";\n+    let attrs = test::parse_attributes(source);\n+    let attrs = parse_mod(attrs);\n+    assert attrs.brief == some(\"short\");\n+}\n+\n+#[test]\n+fn parse_mod_should_parse_the_long_description() {\n+    let source = \"#[doc(desc = \\\"description\\\")]\";\n+    let attrs = test::parse_attributes(source);\n+    let attrs = parse_mod(attrs);\n+    assert attrs.desc == some(\"description\");\n+}\n+\n+fn parse_short_doc_or<T>(\n+    attrs: [ast::attribute],\n+    handle_short: fn&(\n+        short_desc: option<str>\n+    ) -> T,\n+    parse_long: fn&(\n+        doc_items: [@ast::meta_item],\n+        brief: option<str>,\n+        desc: option<str>\n+    ) -> T\n+) -> T {\n+    alt doc_meta(attrs) {\n       some(meta) {\n         alt attr::get_meta_item_value_str(meta) {\n-          some(desc) {\n-            {\n-                brief: none,\n-                desc: some(desc),\n-                args: [],\n-                return: none\n-            }\n-          }\n+          some(desc) { handle_short(some(desc)) }\n           none. {\n             alt attr::get_meta_item_list(meta) {\n               some(list) {\n-                parse_fn_(list)\n+                let brief = attr::meta_item_value_from_list(list, \"brief\");\n+                let desc = attr::meta_item_value_from_list(list, \"desc\");\n+                parse_long(list, brief, desc)\n               }\n               none. {\n-                no_attrs\n+                handle_short(none)\n               }\n             }\n           }\n         }\n       }\n       none. {\n-        no_attrs\n+        handle_short(none)\n       }\n-    };\n+    }\n+}\n+\n+fn parse_fn(\n+    attrs: [ast::attribute]\n+) -> fn_attrs {\n+\n+    parse_short_doc_or(\n+        attrs,\n+        {|desc|\n+            {\n+                brief: none,\n+                desc: desc,\n+                args: [],\n+                return: none\n+            }\n+        },\n+        parse_fn_long_doc\n+    )\n }\n \n-fn parse_fn_(\n-    items: [@ast::meta_item]\n+fn parse_fn_long_doc(\n+    items: [@ast::meta_item],\n+    brief: option<str>,\n+    desc: option<str>\n ) -> fn_attrs {\n-    let brief = attr::meta_item_value_from_list(items, \"brief\");\n-    let desc = attr::meta_item_value_from_list(items, \"desc\");\n     let return = attr::meta_item_value_from_list(items, \"return\");\n \n     let args = alt attr::meta_item_list_from_list(items, \"args\") {\n@@ -149,6 +224,58 @@ fn parse_fn_(\n     }\n }\n \n+#[test]\n+fn parse_fn_should_handle_undocumented_functions() {\n+    let source = \"\";\n+    let attrs = test::parse_attributes(source);\n+    let attrs = parse_fn(attrs);\n+    assert attrs.brief == none;\n+    assert attrs.desc == none;\n+    assert attrs.return == none;\n+    assert vec::len(attrs.args) == 0u;\n+}\n+\n+#[test]\n+fn parse_fn_should_parse_simple_doc_attributes() {\n+    let source = \"#[doc = \\\"basic\\\"]\";\n+    let attrs = test::parse_attributes(source);\n+    let attrs = parse_fn(attrs);\n+    assert attrs.desc == some(\"basic\");\n+}\n+\n+#[test]\n+fn parse_fn_should_parse_the_brief_description() {\n+    let source = \"#[doc(brief = \\\"short\\\")]\";\n+    let attrs = test::parse_attributes(source);\n+    let attrs = parse_fn(attrs);\n+    assert attrs.brief == some(\"short\");\n+}\n+\n+#[test]\n+fn parse_fn_should_parse_the_long_description() {\n+    let source = \"#[doc(desc = \\\"description\\\")]\";\n+    let attrs = test::parse_attributes(source);\n+    let attrs = parse_fn(attrs);\n+    assert attrs.desc == some(\"description\");\n+}\n+\n+#[test]\n+fn parse_fn_should_parse_the_return_value_description() {\n+    let source = \"#[doc(return = \\\"return value\\\")]\";\n+    let attrs = test::parse_attributes(source);\n+    let attrs = parse_fn(attrs);\n+    assert attrs.return == some(\"return value\");\n+}\n+\n+#[test]\n+fn parse_fn_should_parse_the_argument_descriptions() {\n+    let source = \"#[doc(args(a = \\\"arg a\\\", b = \\\"arg b\\\"))]\";\n+    let attrs = test::parse_attributes(source);\n+    let attrs = parse_fn(attrs);\n+    assert attrs.args[0] == {name: \"a\", desc: \"arg a\"};\n+    assert attrs.args[1] == {name: \"b\", desc: \"arg b\"};\n+}\n+\n #[cfg(test)]\n mod test {\n \n@@ -169,56 +296,4 @@ mod test {\n \n         parser::parse_outer_attributes(parser)\n     }\n-\n-    #[test]\n-    fn parse_fn_should_handle_undocumented_functions() {\n-        let source = \"\";\n-        let attrs = parse_attributes(source);\n-        let attrs = parse_fn(attrs);\n-        assert attrs.brief == none;\n-        assert attrs.desc == none;\n-        assert attrs.return == none;\n-        assert vec::len(attrs.args) == 0u;\n-    }\n-\n-    #[test]\n-    fn parse_fn_should_parse_simple_doc_attributes() {\n-        let source = \"#[doc = \\\"basic\\\"]\";\n-        let attrs = parse_attributes(source);\n-        let attrs = parse_fn(attrs);\n-        assert attrs.desc == some(\"basic\");\n-    }\n-\n-    #[test]\n-    fn parse_fn_should_parse_the_brief_description() {\n-        let source = \"#[doc(brief = \\\"short\\\")]\";\n-        let attrs = parse_attributes(source);\n-        let attrs = parse_fn(attrs);\n-        assert attrs.brief == some(\"short\");\n-    }\n-\n-    #[test]\n-    fn parse_fn_should_parse_the_long_description() {\n-        let source = \"#[doc(desc = \\\"description\\\")]\";\n-        let attrs = parse_attributes(source);\n-        let attrs = parse_fn(attrs);\n-        assert attrs.desc == some(\"description\");\n-    }\n-\n-    #[test]\n-    fn parse_fn_should_parse_the_return_value_description() {\n-        let source = \"#[doc(return = \\\"return value\\\")]\";\n-        let attrs = parse_attributes(source);\n-        let attrs = parse_fn(attrs);\n-        assert attrs.return == some(\"return value\");\n-    }\n-\n-    #[test]\n-    fn parse_fn_should_parse_the_argument_descriptions() {\n-        let source = \"#[doc(args(a = \\\"arg a\\\", b = \\\"arg b\\\"))]\";\n-        let attrs = parse_attributes(source);\n-        let attrs = parse_fn(attrs);\n-        assert attrs.args[0] == {name: \"a\", desc: \"arg a\"};\n-        assert attrs.args[1] == {name: \"b\", desc: \"arg b\"};\n-    }\n }"}]}