{"sha": "8277ba2d30996067c39ee3405bd141b11ffdb855", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyNzdiYTJkMzA5OTYwNjdjMzllZTM0MDViZDE0MWIxMWZmZGI4NTU=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-11-03T21:09:53Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-11-03T23:53:10Z"}, "message": "Make \"all possible cases\" help message uniform with existing help messages\n\nSpecifically no capitalisation or trailing full stops.", "tree": {"sha": "d9da2d3adf56b5896ddb5f63ef1981b68a73e0e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9da2d3adf56b5896ddb5f63ef1981b68a73e0e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8277ba2d30996067c39ee3405bd141b11ffdb855", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8277ba2d30996067c39ee3405bd141b11ffdb855", "html_url": "https://github.com/rust-lang/rust/commit/8277ba2d30996067c39ee3405bd141b11ffdb855", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8277ba2d30996067c39ee3405bd141b11ffdb855/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d28ee3e34d100534062d0bc690779ed9b6927fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d28ee3e34d100534062d0bc690779ed9b6927fe", "html_url": "https://github.com/rust-lang/rust/commit/3d28ee3e34d100534062d0bc690779ed9b6927fe"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "735ceef229a22f36ba4986e5d28931a98e6da968", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8277ba2d30996067c39ee3405bd141b11ffdb855/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8277ba2d30996067c39ee3405bd141b11ffdb855/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=8277ba2d30996067c39ee3405bd141b11ffdb855", "patch": "@@ -238,8 +238,8 @@ impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n                                                         is non-empty\",\n                                                        pat_ty));\n                     span_help!(&mut err, scrut.span,\n-                               \"Please ensure that all possible cases are being handled; \\\n-                                possibly adding wildcards or more match arms.\");\n+                               \"ensure that all possible cases are being handled, \\\n+                                possibly by adding wildcards or more match arms\");\n                     err.emit();\n                 }\n                 // If the type *is* uninhabited, it's vacuously exhaustive"}, {"sha": "900812787bcf7debe389d41ab08db9cb9f33d8d0", "filename": "src/test/ui/error-codes/E0004-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8277ba2d30996067c39ee3405bd141b11ffdb855/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8277ba2d30996067c39ee3405bd141b11ffdb855/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.stderr?ref=8277ba2d30996067c39ee3405bd141b11ffdb855", "patch": "@@ -4,7 +4,7 @@ error[E0004]: non-exhaustive patterns: type std::option::Option<i32> is non-empt\n LL |     match x { } //~ ERROR E0004\n    |           ^\n    |\n-help: Please ensure that all possible cases are being handled; possibly adding wildcards or more match arms.\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n   --> $DIR/E0004-2.rs:14:11\n    |\n LL |     match x { } //~ ERROR E0004"}, {"sha": "b2bfe6b5e8c0778b854feb39d74e5b40cdd0b190", "filename": "src/test/ui/issues/issue-3096-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8277ba2d30996067c39ee3405bd141b11ffdb855/src%2Ftest%2Fui%2Fissues%2Fissue-3096-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8277ba2d30996067c39ee3405bd141b11ffdb855/src%2Ftest%2Fui%2Fissues%2Fissue-3096-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3096-1.stderr?ref=8277ba2d30996067c39ee3405bd141b11ffdb855", "patch": "@@ -4,7 +4,7 @@ error[E0004]: non-exhaustive patterns: type () is non-empty\n LL |     match () { } //~ ERROR non-exhaustive\n    |           ^^\n    |\n-help: Please ensure that all possible cases are being handled; possibly adding wildcards or more match arms.\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n   --> $DIR/issue-3096-1.rs:12:11\n    |\n LL |     match () { } //~ ERROR non-exhaustive"}, {"sha": "bb9dfabe7be0338189591ce1461364200135c1c2", "filename": "src/test/ui/issues/issue-3096-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8277ba2d30996067c39ee3405bd141b11ffdb855/src%2Ftest%2Fui%2Fissues%2Fissue-3096-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8277ba2d30996067c39ee3405bd141b11ffdb855/src%2Ftest%2Fui%2Fissues%2Fissue-3096-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3096-2.stderr?ref=8277ba2d30996067c39ee3405bd141b11ffdb855", "patch": "@@ -4,7 +4,7 @@ error[E0004]: non-exhaustive patterns: type *const bottom is non-empty\n LL |     match x { } //~ ERROR non-exhaustive patterns\n    |           ^\n    |\n-help: Please ensure that all possible cases are being handled; possibly adding wildcards or more match arms.\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n   --> $DIR/issue-3096-2.rs:15:11\n    |\n LL |     match x { } //~ ERROR non-exhaustive patterns"}, {"sha": "83fd736a997a98ff686b277e885c5afd6f7b9974", "filename": "src/test/ui/uninhabited/uninhabited-matches-feature-gated.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8277ba2d30996067c39ee3405bd141b11ffdb855/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8277ba2d30996067c39ee3405bd141b11ffdb855/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr?ref=8277ba2d30996067c39ee3405bd141b11ffdb855", "patch": "@@ -10,7 +10,7 @@ error[E0004]: non-exhaustive patterns: type &Void is non-empty\n LL |     let _ = match x {}; //~ ERROR non-exhaustive\n    |                   ^\n    |\n-help: Please ensure that all possible cases are being handled; possibly adding wildcards or more match arms.\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n   --> $DIR/uninhabited-matches-feature-gated.rs:20:19\n    |\n LL |     let _ = match x {}; //~ ERROR non-exhaustive\n@@ -22,7 +22,7 @@ error[E0004]: non-exhaustive patterns: type (Void,) is non-empty\n LL |     let _ = match x {}; //~ ERROR non-exhaustive\n    |                   ^\n    |\n-help: Please ensure that all possible cases are being handled; possibly adding wildcards or more match arms.\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n   --> $DIR/uninhabited-matches-feature-gated.rs:23:19\n    |\n LL |     let _ = match x {}; //~ ERROR non-exhaustive\n@@ -34,7 +34,7 @@ error[E0004]: non-exhaustive patterns: type [Void; 1] is non-empty\n LL |     let _ = match x {}; //~ ERROR non-exhaustive\n    |                   ^\n    |\n-help: Please ensure that all possible cases are being handled; possibly adding wildcards or more match arms.\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n   --> $DIR/uninhabited-matches-feature-gated.rs:26:19\n    |\n LL |     let _ = match x {}; //~ ERROR non-exhaustive"}]}