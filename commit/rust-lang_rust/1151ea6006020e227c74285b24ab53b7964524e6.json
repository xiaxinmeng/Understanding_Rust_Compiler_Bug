{"sha": "1151ea6006020e227c74285b24ab53b7964524e6", "node_id": "C_kwDOAAsO6NoAKDExNTFlYTYwMDYwMjBlMjI3Yzc0Mjg1YjI0YWI1M2I3OTY0NTI0ZTY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-21T10:47:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-21T10:47:27Z"}, "message": "Auto merge of #109002 - michaelvanstraten:master, r=petrochenkov\n\nAdded byte position range for `proc_macro::Span`\n\nCurrently, the [`Debug`](https://doc.rust-lang.org/beta/proc_macro/struct.Span.html#impl-Debug-for-Span) implementation for [`proc_macro::Span`](https://doc.rust-lang.org/beta/proc_macro/struct.Span.html#) calls the debug function implemented in the trait implementation of `server::Span` for the type `Rustc` in the `rustc-expand` crate.\n\nThe current implementation, of the referenced function, looks something like this:\n```rust\nfn debug(&mut self, span: Self::Span) -> String {\n    if self.ecx.ecfg.span_debug {\n        format!(\"{:?}\", span)\n    } else {\n        format!(\"{:?} bytes({}..{})\", span.ctxt(), span.lo().0, span.hi().0)\n    }\n}\n```\n\nIt returns the byte position of the [`Span`](https://doc.rust-lang.org/beta/proc_macro/struct.Span.html#) as an interpolated string.\n\nBecause this is currently the only way to get a spans position in the file, I might lead someone, who is interested in this information, to parsing this interpolated string back into a range of bytes, which I think is a very non-rusty way.\n\nThe proposed `position()`, method implemented in this PR, gives the ability to directly get this info.\nIt returns a [`std::ops::Range`](https://doc.rust-lang.org/std/ops/struct.Range.html#) wrapping the lowest and highest byte of the [`Span`](https://doc.rust-lang.org/beta/proc_macro/struct.Span.html#).\n\nI put it behind the `proc_macro_span` feature flag because many of the other functions that have a similar footprint also are annotated with it, I don't actually know if this is right.\n\nIt would be great if somebody could take a look at this, thank you very much in advanced.", "tree": {"sha": "535e7575bdfbbe91a9ad9dbd4768604cf309b67a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/535e7575bdfbbe91a9ad9dbd4768604cf309b67a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1151ea6006020e227c74285b24ab53b7964524e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1151ea6006020e227c74285b24ab53b7964524e6", "html_url": "https://github.com/rust-lang/rust/commit/1151ea6006020e227c74285b24ab53b7964524e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1151ea6006020e227c74285b24ab53b7964524e6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f5768bc67ecb025342770e14e03699699965706", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f5768bc67ecb025342770e14e03699699965706", "html_url": "https://github.com/rust-lang/rust/commit/1f5768bc67ecb025342770e14e03699699965706"}, {"sha": "342c5fb6c57d9110ce7690f62f1298a5d35539de", "url": "https://api.github.com/repos/rust-lang/rust/commits/342c5fb6c57d9110ce7690f62f1298a5d35539de", "html_url": "https://github.com/rust-lang/rust/commit/342c5fb6c57d9110ce7690f62f1298a5d35539de"}], "stats": {"total": 31, "additions": 28, "deletions": 3}, "files": [{"sha": "1e7d07bc22d52421016fd3c939ede69a4f38c0f2", "filename": "compiler/rustc_expand/src/proc_macro_server.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1151ea6006020e227c74285b24ab53b7964524e6/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1151ea6006020e227c74285b24ab53b7964524e6/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs?ref=1151ea6006020e227c74285b24ab53b7964524e6", "patch": "@@ -18,7 +18,7 @@ use rustc_span::def_id::CrateNum;\n use rustc_span::symbol::{self, sym, Symbol};\n use rustc_span::{BytePos, FileName, Pos, SourceFile, Span};\n use smallvec::{smallvec, SmallVec};\n-use std::ops::Bound;\n+use std::ops::{Bound, Range};\n \n trait FromInternal<T> {\n     fn from_internal(x: T) -> Self;\n@@ -634,6 +634,15 @@ impl server::Span for Rustc<'_, '_> {\n         span.source_callsite()\n     }\n \n+    fn byte_range(&mut self, span: Self::Span) -> Range<usize> {\n+        let source_map = self.sess().source_map();\n+\n+        let relative_start_pos = source_map.lookup_byte_offset(span.lo()).pos;\n+        let relative_end_pos = source_map.lookup_byte_offset(span.hi()).pos;\n+\n+        Range { start: relative_start_pos.0 as usize, end: relative_end_pos.0 as usize }\n+    }\n+\n     fn start(&mut self, span: Self::Span) -> LineColumn {\n         let loc = self.sess().source_map().lookup_char_pos(span.lo());\n         LineColumn { line: loc.line, column: loc.col.to_usize() }"}, {"sha": "54b11c543f1624fa15dc1b95833bcbaa7722c254", "filename": "library/proc_macro/src/bridge/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1151ea6006020e227c74285b24ab53b7964524e6/library%2Fproc_macro%2Fsrc%2Fbridge%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1151ea6006020e227c74285b24ab53b7964524e6/library%2Fproc_macro%2Fsrc%2Fbridge%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Fmod.rs?ref=1151ea6006020e227c74285b24ab53b7964524e6", "patch": "@@ -14,6 +14,7 @@ use std::hash::Hash;\n use std::marker;\n use std::mem;\n use std::ops::Bound;\n+use std::ops::Range;\n use std::panic;\n use std::sync::atomic::AtomicUsize;\n use std::sync::Once;\n@@ -93,6 +94,7 @@ macro_rules! with_api {\n                 fn source_file($self: $S::Span) -> $S::SourceFile;\n                 fn parent($self: $S::Span) -> Option<$S::Span>;\n                 fn source($self: $S::Span) -> $S::Span;\n+                fn byte_range($self: $S::Span) -> Range<usize>;\n                 fn start($self: $S::Span) -> LineColumn;\n                 fn end($self: $S::Span) -> LineColumn;\n                 fn before($self: $S::Span) -> $S::Span;\n@@ -519,3 +521,7 @@ pub struct ExpnGlobals<Span> {\n compound_traits!(\n     struct ExpnGlobals<Span> { def_site, call_site, mixed_site }\n );\n+\n+compound_traits!(\n+    struct Range<T> { start, end }\n+);"}, {"sha": "c64665b6ae0e872c1ec53e872480ab5dcacbb66d", "filename": "library/proc_macro/src/lib.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1151ea6006020e227c74285b24ab53b7964524e6/library%2Fproc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1151ea6006020e227c74285b24ab53b7964524e6/library%2Fproc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Flib.rs?ref=1151ea6006020e227c74285b24ab53b7964524e6", "patch": "@@ -44,7 +44,7 @@ mod diagnostic;\n pub use diagnostic::{Diagnostic, Level, MultiSpan};\n \n use std::cmp::Ordering;\n-use std::ops::RangeBounds;\n+use std::ops::{Range, RangeBounds};\n use std::path::PathBuf;\n use std::str::FromStr;\n use std::{error, fmt};\n@@ -488,6 +488,12 @@ impl Span {\n         Span(self.0.source())\n     }\n \n+    /// Returns the span's byte position range in the source file.\n+    #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n+    pub fn byte_range(&self) -> Range<usize> {\n+        self.0.byte_range()\n+    }\n+\n     /// Gets the starting line/column in the source file for this span.\n     #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub fn start(&self) -> LineColumn {"}, {"sha": "a9cd8e705a4cf27701038086dc524d5d4bb30c93", "filename": "src/tools/rust-analyzer/crates/proc-macro-srv/src/abis/abi_sysroot/ra_server.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1151ea6006020e227c74285b24ab53b7964524e6/src%2Ftools%2Frust-analyzer%2Fcrates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_sysroot%2Fra_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1151ea6006020e227c74285b24ab53b7964524e6/src%2Ftools%2Frust-analyzer%2Fcrates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_sysroot%2Fra_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2Fcrates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_sysroot%2Fra_server.rs?ref=1151ea6006020e227c74285b24ab53b7964524e6", "patch": "@@ -20,7 +20,7 @@ use token_stream::TokenStreamBuilder;\n mod symbol;\n pub use symbol::*;\n \n-use std::ops::Bound;\n+use std::ops::{Bound, Range};\n \n use crate::tt;\n \n@@ -298,6 +298,10 @@ impl server::Span for RustAnalyzer {\n         // FIXME handle span\n         span\n     }\n+    fn byte_range(&mut self, _span: Self::Span) -> Range<usize> {\n+        // FIXME handle span\n+        Range { start: 0, end: 0 }\n+    }\n     fn start(&mut self, _span: Self::Span) -> LineColumn {\n         // FIXME handle span\n         LineColumn { line: 0, column: 0 }"}]}