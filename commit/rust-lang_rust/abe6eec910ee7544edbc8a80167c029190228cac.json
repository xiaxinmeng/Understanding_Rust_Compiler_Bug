{"sha": "abe6eec910ee7544edbc8a80167c029190228cac", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiZTZlZWM5MTBlZTc1NDRlZGJjOGE4MDE2N2MwMjkxOTAyMjhjYWM=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-11-16T07:59:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-11-16T07:59:17Z"}, "message": "Merge pull request #2160 from topecongiro/issue-1809\n\nForce vertical layout for all variants if one of then use multiple lines", "tree": {"sha": "11e3decd379d300c8ab7c7d2611167fc99ab7235", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11e3decd379d300c8ab7c7d2611167fc99ab7235"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abe6eec910ee7544edbc8a80167c029190228cac", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaDUVVCRBK7hj4Ov3rIwAAdHIIAGMVTkV/ZBfFSWY4t3O9Ig00\naDiZxYfjJVdcVrwIII0BzjKSL118SY8PaIq8IO0ZwNUG/zfJyfwC6pXzMMUYlgbs\nUAUtbR24FGJ3p7Ly51rw8pz7vec1BvJg2eTSVsVZ4ixVMxq2Hc4uTrh8O1CefA8c\nfthcGbrauJWORC7qOYps1i5TpYv6WR7QDNhKbKk+eSFkP6zQuZiArYBNQbk6tN7H\nX+RlYr0LdEnyig8wZZ8yeM+3wIiR3G7QuJMTtvAGvLJOSUrMJiLaLELqM4r/wF6B\nc3a1VBH7rcKTfqFlB6VUuBLZWFsTasJ/cr/VyHbyrRQ2dtDSTESQG0E1wYXuttc=\n=pfNK\n-----END PGP SIGNATURE-----\n", "payload": "tree 11e3decd379d300c8ab7c7d2611167fc99ab7235\nparent d4fdaec473e471efe3ad62526f65741b7c39bd29\nparent b1a6dd6b83c15e2de85a1c790a0fdc9f13817a2c\nauthor Nick Cameron <nrc@ncameron.org> 1510819157 +1300\ncommitter GitHub <noreply@github.com> 1510819157 +1300\n\nMerge pull request #2160 from topecongiro/issue-1809\n\nForce vertical layout for all variants if one of then use multiple lines "}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abe6eec910ee7544edbc8a80167c029190228cac", "html_url": "https://github.com/rust-lang/rust/commit/abe6eec910ee7544edbc8a80167c029190228cac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abe6eec910ee7544edbc8a80167c029190228cac/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4fdaec473e471efe3ad62526f65741b7c39bd29", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4fdaec473e471efe3ad62526f65741b7c39bd29", "html_url": "https://github.com/rust-lang/rust/commit/d4fdaec473e471efe3ad62526f65741b7c39bd29"}, {"sha": "b1a6dd6b83c15e2de85a1c790a0fdc9f13817a2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1a6dd6b83c15e2de85a1c790a0fdc9f13817a2c", "html_url": "https://github.com/rust-lang/rust/commit/b1a6dd6b83c15e2de85a1c790a0fdc9f13817a2c"}], "stats": {"total": 104, "additions": 83, "deletions": 21}, "files": [{"sha": "41454c853ed0ff192d0cb4f0422a1756b7b51c7c", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/abe6eec910ee7544edbc8a80167c029190228cac/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe6eec910ee7544edbc8a80167c029190228cac/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=abe6eec910ee7544edbc8a80167c029190228cac", "patch": "@@ -45,7 +45,9 @@ enum Operation {\n     /// Print detailed configuration help.\n     ConfigHelp,\n     /// Output default config to a file, or stdout if None\n-    ConfigOutputDefault { path: Option<String> },\n+    ConfigOutputDefault {\n+        path: Option<String>,\n+    },\n     /// No file specified, read from stdin\n     Stdin {\n         input: String,"}, {"sha": "0c1895c23914fbb8d4cdfcd30bf1b29cefddb4a5", "filename": "src/items.rs", "status": "modified", "additions": 27, "deletions": 18, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/abe6eec910ee7544edbc8a80167c029190228cac/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe6eec910ee7544edbc8a80167c029190228cac/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=abe6eec910ee7544edbc8a80167c029190228cac", "patch": "@@ -484,21 +484,30 @@ impl<'a> FmtVisitor<'a> {\n         let indentation = self.block_indent.to_string(self.config);\n         result.push_str(&indentation);\n \n-        let items = itemize_list(\n-            self.codemap,\n-            enum_def.variants.iter(),\n-            \"}\",\n-            |f| if !f.node.attrs.is_empty() {\n-                f.node.attrs[0].span.lo()\n-            } else {\n-                f.span.lo()\n-            },\n-            |f| f.span.hi(),\n-            |f| self.format_variant(f),\n-            body_lo,\n-            body_hi,\n-            false,\n-        );\n+        let itemize_list_with = |one_line_width: usize| {\n+            itemize_list(\n+                self.codemap,\n+                enum_def.variants.iter(),\n+                \"}\",\n+                |f| if !f.node.attrs.is_empty() {\n+                    f.node.attrs[0].span.lo()\n+                } else {\n+                    f.span.lo()\n+                },\n+                |f| f.span.hi(),\n+                |f| self.format_variant(f, one_line_width),\n+                body_lo,\n+                body_hi,\n+                false,\n+            ).collect()\n+        };\n+        let mut items: Vec<_> = itemize_list_with(self.config.struct_variant_width());\n+        // If one of the variants use multiple lines, use multi-lined formatting for all variants.\n+        let has_multiline_variant = items.iter().any(|item| item.inner_as_ref().contains(\"\\n\"));\n+        let has_single_line_variant = items.iter().any(|item| !item.inner_as_ref().contains(\"\\n\"));\n+        if has_multiline_variant && has_single_line_variant {\n+            items = itemize_list_with(0);\n+        }\n \n         let shape = self.shape().sub_width(2).unwrap();\n         let fmt = ListFormatting {\n@@ -512,14 +521,14 @@ impl<'a> FmtVisitor<'a> {\n             config: self.config,\n         };\n \n-        let list = write_list(&items.collect::<Vec<_>>(), &fmt)?;\n+        let list = write_list(&items, &fmt)?;\n         result.push_str(&list);\n         result.push('\\n');\n         Some(result)\n     }\n \n     // Variant of an enum.\n-    fn format_variant(&self, field: &ast::Variant) -> Option<String> {\n+    fn format_variant(&self, field: &ast::Variant, one_line_width: usize) -> Option<String> {\n         if contains_skip(&field.node.attrs) {\n             let lo = field.node.attrs[0].span.lo();\n             let span = mk_sp(lo, field.span.hi());\n@@ -544,7 +553,7 @@ impl<'a> FmtVisitor<'a> {\n                     &context,\n                     &StructParts::from_variant(field),\n                     indent,\n-                    Some(self.config.struct_variant_width()),\n+                    Some(one_line_width),\n                 )?\n             }\n             ast::VariantData::Unit(..) => if let Some(ref expr) = field.node.disr_expr {"}, {"sha": "821bb0efd993fe3b66ebc72cfb2e252ab282f778", "filename": "tests/source/enum.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/abe6eec910ee7544edbc8a80167c029190228cac/tests%2Fsource%2Fenum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe6eec910ee7544edbc8a80167c029190228cac/tests%2Fsource%2Fenum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fenum.rs?ref=abe6eec910ee7544edbc8a80167c029190228cac", "patch": "@@ -146,3 +146,22 @@ pub enum ForegroundColor {\n pub enum E<'a> {\n     V ( < std::slice::Iter<'a, Xxxxxxxxxxxxxx> as Iterator> :: Item ) ,\n }\n+\n+// #1809\n+enum State {\n+    TryRecv {\n+        pos: usize,\n+        lap: u8,\n+        closed_count: usize,\n+    },\n+    Subscribe { pos: usize },\n+    IsReady { pos: usize, ready: bool },\n+    Unsubscribe {\n+        pos: usize,\n+        lap: u8,\n+        id_woken: usize,\n+    },\n+    FinalTryRecv { pos: usize, id_woken: usize },\n+    TimedOut,\n+    Disconnected,\n+}"}, {"sha": "f3e8f2d4d6bfa6970069f4ed4564697fbfda5bd5", "filename": "tests/target/enum.rs", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/abe6eec910ee7544edbc8a80167c029190228cac/tests%2Ftarget%2Fenum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe6eec910ee7544edbc8a80167c029190228cac/tests%2Ftarget%2Fenum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fenum.rs?ref=abe6eec910ee7544edbc8a80167c029190228cac", "patch": "@@ -44,7 +44,9 @@ enum StructLikeVariants {\n         // Pre-comment\n         #[Attr50] y: SomeType, // Aanother Comment\n     },\n-    SL { a: A },\n+    SL {\n+        a: A,\n+    },\n }\n \n enum X {\n@@ -65,7 +67,10 @@ pub enum EnumWithAttributes {\n     SkippedItem(String,String,), // Post-comment\n     #[another_attr]\n     #[attr2]\n-    ItemStruct { x: usize, y: usize }, /* Comment AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA */\n+    ItemStruct {\n+        x: usize,\n+        y: usize,\n+    }, /* Comment AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA */\n     // And another\n     ForcedPreflight, /* AAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n                       * AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA */\n@@ -183,3 +188,30 @@ pub enum ForegroundColor {\n pub enum E<'a> {\n     V(<std::slice::Iter<'a, Xxxxxxxxxxxxxx> as Iterator>::Item),\n }\n+\n+// #1809\n+enum State {\n+    TryRecv {\n+        pos: usize,\n+        lap: u8,\n+        closed_count: usize,\n+    },\n+    Subscribe {\n+        pos: usize,\n+    },\n+    IsReady {\n+        pos: usize,\n+        ready: bool,\n+    },\n+    Unsubscribe {\n+        pos: usize,\n+        lap: u8,\n+        id_woken: usize,\n+    },\n+    FinalTryRecv {\n+        pos: usize,\n+        id_woken: usize,\n+    },\n+    TimedOut,\n+    Disconnected,\n+}"}]}