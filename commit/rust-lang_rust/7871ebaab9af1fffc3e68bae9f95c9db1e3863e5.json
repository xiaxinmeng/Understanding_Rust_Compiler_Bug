{"sha": "7871ebaab9af1fffc3e68bae9f95c9db1e3863e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4NzFlYmFhYjlhZjFmZmZjM2U2OGJhZTlmOTVjOWRiMWUzODYzZTU=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2020-12-29T22:04:31Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-01-08T20:50:00Z"}, "message": "Fix symbol string comparison dogfood", "tree": {"sha": "d8a7d3ecd7db043cf94b558c6965bd457c209b20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8a7d3ecd7db043cf94b558c6965bd457c209b20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7871ebaab9af1fffc3e68bae9f95c9db1e3863e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7871ebaab9af1fffc3e68bae9f95c9db1e3863e5", "html_url": "https://github.com/rust-lang/rust/commit/7871ebaab9af1fffc3e68bae9f95c9db1e3863e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7871ebaab9af1fffc3e68bae9f95c9db1e3863e5/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc26919b4dcfbb31a0eb902e8cf3e009a93e5ac8", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc26919b4dcfbb31a0eb902e8cf3e009a93e5ac8", "html_url": "https://github.com/rust-lang/rust/commit/cc26919b4dcfbb31a0eb902e8cf3e009a93e5ac8"}], "stats": {"total": 66, "additions": 34, "deletions": 32}, "files": [{"sha": "9a00fc535fc5c297f818bb4614599c6c227816cb", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7871ebaab9af1fffc3e68bae9f95c9db1e3863e5/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7871ebaab9af1fffc3e68bae9f95c9db1e3863e5/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=7871ebaab9af1fffc3e68bae9f95c9db1e3863e5", "patch": "@@ -399,7 +399,7 @@ fn extract_clippy_lint(lint: &NestedMetaItem) -> Option<SymbolStr> {\n         if let Some(meta_item) = lint.meta_item();\n         if meta_item.path.segments.len() > 1;\n         if let tool_name = meta_item.path.segments[0].ident;\n-        if tool_name.as_str() == \"clippy\";\n+        if tool_name.name == sym::clippy;\n         let lint_name = meta_item.path.segments.last().unwrap().ident.name;\n         then {\n             return Some(lint_name.as_str());"}, {"sha": "58511c6d57c686dedd3c01f5f29a4a19d4fddec4", "filename": "clippy_lints/src/if_let_mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7871ebaab9af1fffc3e68bae9f95c9db1e3863e5/clippy_lints%2Fsrc%2Fif_let_mutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7871ebaab9af1fffc3e68bae9f95c9db1e3863e5/clippy_lints%2Fsrc%2Fif_let_mutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_let_mutex.rs?ref=7871ebaab9af1fffc3e68bae9f95c9db1e3863e5", "patch": "@@ -145,7 +145,7 @@ impl<'tcx, 'l> ArmVisitor<'tcx, 'l> {\n fn is_mutex_lock_call<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) -> Option<&'tcx Expr<'tcx>> {\n     if_chain! {\n         if let ExprKind::MethodCall(path, _span, args, _) = &expr.kind;\n-        if path.ident.to_string() == \"lock\";\n+        if path.ident.as_str() == \"lock\";\n         let ty = cx.typeck_results().expr_ty(&args[0]);\n         if is_type_diagnostic_item(cx, ty, sym!(mutex_type));\n         then {"}, {"sha": "89f5b2ff31137f0fe949b6706823361939d5c140", "filename": "clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7871ebaab9af1fffc3e68bae9f95c9db1e3863e5/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7871ebaab9af1fffc3e68bae9f95c9db1e3863e5/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=7871ebaab9af1fffc3e68bae9f95c9db1e3863e5", "patch": "@@ -9,7 +9,7 @@ use rustc_hir::{\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::Span;\n+use rustc_span::{sym, Span};\n \n declare_clippy_lint! {\n     /// **What it does:** It checks for manual implementations of `async` functions.\n@@ -137,7 +137,7 @@ fn future_output_ty<'tcx>(trait_ref: &'tcx TraitRef<'tcx>) -> Option<&'tcx Ty<'t\n         if let Some(args) = segment.args;\n         if args.bindings.len() == 1;\n         let binding = &args.bindings[0];\n-        if binding.ident.as_str() == \"Output\";\n+        if binding.ident.name == sym::Output;\n         if let TypeBindingKind::Equality{ty: output} = binding.kind;\n         then {\n             return Some(output)"}, {"sha": "1818836d5d5e836afa476aeb5da4564bf2278192", "filename": "clippy_lints/src/map_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7871ebaab9af1fffc3e68bae9f95c9db1e3863e5/clippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7871ebaab9af1fffc3e68bae9f95c9db1e3863e5/clippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_clone.rs?ref=7871ebaab9af1fffc3e68bae9f95c9db1e3863e5", "patch": "@@ -53,7 +53,7 @@ impl<'tcx> LateLintPass<'tcx> for MapClone {\n         if_chain! {\n             if let hir::ExprKind::MethodCall(ref method, _, ref args, _) = e.kind;\n             if args.len() == 2;\n-            if method.ident.as_str() == \"map\";\n+            if method.ident.name == sym::map;\n             let ty = cx.typeck_results().expr_ty(&args[0]);\n             if is_type_diagnostic_item(cx, ty, sym::option_type) || match_trait_method(cx, e, &paths::ITERATOR);\n             if let hir::ExprKind::Closure(_, _, body_id, _, _) = args[1].kind;"}, {"sha": "9f9c108a85a0537610a14d98fb6547c43d9cc372", "filename": "clippy_lints/src/map_identity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7871ebaab9af1fffc3e68bae9f95c9db1e3863e5/clippy_lints%2Fsrc%2Fmap_identity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7871ebaab9af1fffc3e68bae9f95c9db1e3863e5/clippy_lints%2Fsrc%2Fmap_identity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_identity.rs?ref=7871ebaab9af1fffc3e68bae9f95c9db1e3863e5", "patch": "@@ -63,7 +63,7 @@ impl<'tcx> LateLintPass<'tcx> for MapIdentity {\n fn get_map_argument<'a>(cx: &LateContext<'_>, expr: &'a Expr<'a>) -> Option<&'a [Expr<'a>]> {\n     if_chain! {\n         if let ExprKind::MethodCall(ref method, _, ref args, _) = expr.kind;\n-        if args.len() == 2 && method.ident.as_str() == \"map\";\n+        if args.len() == 2 && method.ident.name == sym::map;\n         let caller_ty = cx.typeck_results().expr_ty(&args[0]);\n         if match_trait_method(cx, expr, &paths::ITERATOR)\n             || is_type_diagnostic_item(cx, caller_ty, sym::result_type)"}, {"sha": "f13f2491d6e9619f4f049b0ed6bf0ec157c75c6d", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7871ebaab9af1fffc3e68bae9f95c9db1e3863e5/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7871ebaab9af1fffc3e68bae9f95c9db1e3863e5/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=7871ebaab9af1fffc3e68bae9f95c9db1e3863e5", "patch": "@@ -3095,7 +3095,7 @@ fn lint_flat_map_identity<'tcx>(\n             if let hir::ExprKind::Path(hir::QPath::Resolved(_, ref path)) = body.value.kind;\n \n             if path.segments.len() == 1;\n-            if path.segments[0].ident.as_str() == binding_ident.as_str();\n+            if path.segments[0].ident.name == binding_ident.name;\n \n             then {\n                 apply_lint(\"called `flat_map(|x| x)` on an `Iterator`\");"}, {"sha": "8d0c3b8e0fe89f39921c198656a553095e85e689", "filename": "clippy_lints/src/minmax.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7871ebaab9af1fffc3e68bae9f95c9db1e3863e5/clippy_lints%2Fsrc%2Fminmax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7871ebaab9af1fffc3e68bae9f95c9db1e3863e5/clippy_lints%2Fsrc%2Fminmax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fminmax.rs?ref=7871ebaab9af1fffc3e68bae9f95c9db1e3863e5", "patch": "@@ -89,9 +89,9 @@ fn min_max<'a>(cx: &LateContext<'_>, expr: &'a Expr<'a>) -> Option<(MinMax, Cons\n                 if let [obj, _] = args;\n                 if cx.typeck_results().expr_ty(obj).is_floating_point() || match_trait_method(cx, expr, &paths::ORD);\n                 then {\n-                    if path.ident.as_str() == sym!(max).as_str() {\n+                    if path.ident.name == sym!(max) {\n                         fetch_const(cx, args, MinMax::Max)\n-                    } else if path.ident.as_str() == sym!(min).as_str() {\n+                    } else if path.ident.name == sym!(min) {\n                         fetch_const(cx, args, MinMax::Min)\n                     } else {\n                         None"}, {"sha": "0e49eaab4368578a203c4f14600efa133267a17b", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7871ebaab9af1fffc3e68bae9f95c9db1e3863e5/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7871ebaab9af1fffc3e68bae9f95c9db1e3863e5/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=7871ebaab9af1fffc3e68bae9f95c9db1e3863e5", "patch": "@@ -63,7 +63,7 @@ impl MissingDoc {\n             if let Some(meta) = list.get(0);\n             if let Some(name) = meta.ident();\n             then {\n-                name.as_str() == \"include\"\n+                name.name == sym::include\n             } else {\n                 false\n             }"}, {"sha": "1984942a9145ef49319362d8f3a14f4a04de321a", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7871ebaab9af1fffc3e68bae9f95c9db1e3863e5/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7871ebaab9af1fffc3e68bae9f95c9db1e3863e5/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=7871ebaab9af1fffc3e68bae9f95c9db1e3863e5", "patch": "@@ -13,6 +13,7 @@ use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::{self, TypeFoldable};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::symbol::kw;\n use rustc_span::{sym, Span};\n use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::traits;\n@@ -153,7 +154,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n             // Ignore `self`s.\n             if idx == 0 {\n                 if let PatKind::Binding(.., ident, _) = arg.pat.kind {\n-                    if ident.as_str() == \"self\" {\n+                    if ident.name == kw::SelfLower {\n                         continue;\n                     }\n                 }"}, {"sha": "58c00541af731142e828b671b4f52e89c8fb25c6", "filename": "clippy_lints/src/option_if_let_else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7871ebaab9af1fffc3e68bae9f95c9db1e3863e5/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7871ebaab9af1fffc3e68bae9f95c9db1e3863e5/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foption_if_let_else.rs?ref=7871ebaab9af1fffc3e68bae9f95c9db1e3863e5", "patch": "@@ -66,7 +66,7 @@ declare_lint_pass!(OptionIfLetElse => [OPTION_IF_LET_ELSE]);\n /// Returns true iff the given expression is the result of calling `Result::ok`\n fn is_result_ok(cx: &LateContext<'_>, expr: &'_ Expr<'_>) -> bool {\n     if let ExprKind::MethodCall(ref path, _, &[ref receiver], _) = &expr.kind {\n-        path.ident.name.to_ident_string() == \"ok\"\n+        path.ident.name.as_str() == \"ok\"\n             && is_type_diagnostic_item(cx, &cx.typeck_results().expr_ty(&receiver), sym::result_type)\n     } else {\n         false"}, {"sha": "4ae22468f78c7d216af5c07c59831466ab954b94", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7871ebaab9af1fffc3e68bae9f95c9db1e3863e5/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7871ebaab9af1fffc3e68bae9f95c9db1e3863e5/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=7871ebaab9af1fffc3e68bae9f95c9db1e3863e5", "patch": "@@ -389,5 +389,5 @@ fn is_self_shadow(name: Symbol, expr: &Expr<'_>) -> bool {\n }\n \n fn path_eq_name(name: Symbol, path: &Path<'_>) -> bool {\n-    !path.is_global() && path.segments.len() == 1 && path.segments[0].ident.as_str() == name.as_str()\n+    !path.is_global() && path.segments.len() == 1 && path.segments[0].ident.name == name\n }"}, {"sha": "699fd51ccc194e30d2f16bc978cef70cbb39aba7", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7871ebaab9af1fffc3e68bae9f95c9db1e3863e5/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7871ebaab9af1fffc3e68bae9f95c9db1e3863e5/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=7871ebaab9af1fffc3e68bae9f95c9db1e3863e5", "patch": "@@ -91,7 +91,7 @@ fn check_manual_swap(cx: &LateContext<'_>, block: &Block<'_>) {\n             if let ExprKind::Path(QPath::Resolved(None, ref rhs2)) = rhs2.kind;\n             if rhs2.segments.len() == 1;\n \n-            if ident.as_str() == rhs2.segments[0].ident.as_str();\n+            if ident.name == rhs2.segments[0].ident.name;\n             if eq_expr_value(cx, tmp_init, lhs1);\n             if eq_expr_value(cx, rhs1, lhs2);\n             then {"}, {"sha": "9b45d38afd42f5eeed1a3064e2fbefd2845dd995", "filename": "clippy_lints/src/unnecessary_sort_by.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7871ebaab9af1fffc3e68bae9f95c9db1e3863e5/clippy_lints%2Fsrc%2Funnecessary_sort_by.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7871ebaab9af1fffc3e68bae9f95c9db1e3863e5/clippy_lints%2Fsrc%2Funnecessary_sort_by.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_sort_by.rs?ref=7871ebaab9af1fffc3e68bae9f95c9db1e3863e5", "patch": "@@ -183,7 +183,7 @@ fn detect_lint(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<LintTrigger> {\n             Param { pat: Pat { kind: PatKind::Binding(_, _, right_ident, _), .. }, .. }\n         ] = &closure_body.params;\n         if let ExprKind::MethodCall(method_path, _, [ref left_expr, ref right_expr], _) = &closure_body.value.kind;\n-        if method_path.ident.name.to_ident_string() == \"cmp\";\n+        if method_path.ident.name == sym::cmp;\n         then {\n             let (closure_body, closure_arg, reverse) = if mirrored_exprs(\n                 &cx,"}, {"sha": "c53348539860524ce55b0e9db2fadfd55ca07314", "filename": "clippy_lints/src/useless_conversion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7871ebaab9af1fffc3e68bae9f95c9db1e3863e5/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7871ebaab9af1fffc3e68bae9f95c9db1e3863e5/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuseless_conversion.rs?ref=7871ebaab9af1fffc3e68bae9f95c9db1e3863e5", "patch": "@@ -80,10 +80,10 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n                         );\n                     }\n                 }\n-                if match_trait_method(cx, e, &paths::INTO_ITERATOR) && &*name.ident.as_str() == \"into_iter\" {\n+                if match_trait_method(cx, e, &paths::INTO_ITERATOR) && name.ident.name == sym::into_iter {\n                     if let Some(parent_expr) = get_parent_expr(cx, e) {\n                         if let ExprKind::MethodCall(ref parent_name, ..) = parent_expr.kind {\n-                            if &*parent_name.ident.as_str() != \"into_iter\" {\n+                            if parent_name.ident.name != sym::into_iter {\n                                 return;\n                             }\n                         }"}, {"sha": "8d28421d70d707fdec87dcbf03a059f5d63ada2c", "filename": "clippy_lints/src/utils/attrs.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7871ebaab9af1fffc3e68bae9f95c9db1e3863e5/clippy_lints%2Fsrc%2Futils%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7871ebaab9af1fffc3e68bae9f95c9db1e3863e5/clippy_lints%2Fsrc%2Futils%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fattrs.rs?ref=7871ebaab9af1fffc3e68bae9f95c9db1e3863e5", "patch": "@@ -1,6 +1,7 @@\n use rustc_ast::ast;\n use rustc_errors::Applicability;\n use rustc_session::Session;\n+use rustc_span::sym;\n use std::str::FromStr;\n \n /// Deprecation status of attributes known by Clippy.\n@@ -64,11 +65,11 @@ pub fn get_attr<'a>(\n             return false;\n         };\n         let attr_segments = &attr.path.segments;\n-        if attr_segments.len() == 2 && attr_segments[0].ident.to_string() == \"clippy\" {\n+        if attr_segments.len() == 2 && attr_segments[0].ident.name == sym::clippy {\n             BUILTIN_ATTRIBUTES\n                 .iter()\n-                .find_map(|(builtin_name, deprecation_status)| {\n-                    if *builtin_name == attr_segments[1].ident.to_string() {\n+                .find_map(|&(builtin_name, ref deprecation_status)| {\n+                    if attr_segments[1].ident.name.as_str() == builtin_name {\n                         Some(deprecation_status)\n                     } else {\n                         None\n@@ -99,7 +100,7 @@ pub fn get_attr<'a>(\n                             },\n                             DeprecationStatus::None => {\n                                 diag.cancel();\n-                                attr_segments[1].ident.to_string() == name\n+                                attr_segments[1].ident.name.as_str() == name\n                             },\n                         }\n                     },"}, {"sha": "8d8ad497be6ab5f22c7641be42b97e5086cc2757", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7871ebaab9af1fffc3e68bae9f95c9db1e3863e5/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7871ebaab9af1fffc3e68bae9f95c9db1e3863e5/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=7871ebaab9af1fffc3e68bae9f95c9db1e3863e5", "patch": "@@ -86,7 +86,7 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n                 lb == rb && l_mut == r_mut && self.eq_expr(le, re)\n             },\n             (&ExprKind::Continue(li), &ExprKind::Continue(ri)) => {\n-                both(&li.label, &ri.label, |l, r| l.ident.as_str() == r.ident.as_str())\n+                both(&li.label, &ri.label, |l, r| l.ident.name == r.ident.name)\n             },\n             (&ExprKind::Assign(ref ll, ref lr, _), &ExprKind::Assign(ref rl, ref rr, _)) => {\n                 self.allow_side_effects && self.eq_expr(ll, rl) && self.eq_expr(lr, rr)\n@@ -102,7 +102,7 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n                     })\n             },\n             (&ExprKind::Break(li, ref le), &ExprKind::Break(ri, ref re)) => {\n-                both(&li.label, &ri.label, |l, r| l.ident.as_str() == r.ident.as_str())\n+                both(&li.label, &ri.label, |l, r| l.ident.name == r.ident.name)\n                     && both(le, re, |l, r| self.eq_expr(l, r))\n             },\n             (&ExprKind::Box(ref l), &ExprKind::Box(ref r)) => self.eq_expr(l, r),\n@@ -121,7 +121,7 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n             },\n             (&ExprKind::Lit(ref l), &ExprKind::Lit(ref r)) => l.node == r.node,\n             (&ExprKind::Loop(ref lb, ref ll, ref lls), &ExprKind::Loop(ref rb, ref rl, ref rls)) => {\n-                lls == rls && self.eq_block(lb, rb) && both(ll, rl, |l, r| l.ident.as_str() == r.ident.as_str())\n+                lls == rls && self.eq_block(lb, rb) && both(ll, rl, |l, r| l.ident.name == r.ident.name)\n             },\n             (&ExprKind::Match(ref le, ref la, ref ls), &ExprKind::Match(ref re, ref ra, ref rs)) => {\n                 ls == rs\n@@ -188,7 +188,7 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n \n     pub fn eq_fieldpat(&mut self, left: &FieldPat<'_>, right: &FieldPat<'_>) -> bool {\n         let (FieldPat { ident: li, pat: lp, .. }, FieldPat { ident: ri, pat: rp, .. }) = (&left, &right);\n-        li.name.as_str() == ri.name.as_str() && self.eq_pat(lp, rp)\n+        li.name == ri.name && self.eq_pat(lp, rp)\n     }\n \n     /// Checks whether two patterns are the same.\n@@ -202,7 +202,7 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n                 self.eq_qpath(lp, rp) && over(la, ra, |l, r| self.eq_pat(l, r)) && ls == rs\n             },\n             (&PatKind::Binding(ref lb, .., ref li, ref lp), &PatKind::Binding(ref rb, .., ref ri, ref rp)) => {\n-                lb == rb && li.name.as_str() == ri.name.as_str() && both(lp, rp, |l, r| self.eq_pat(l, r))\n+                lb == rb && li.name == ri.name && both(lp, rp, |l, r| self.eq_pat(l, r))\n             },\n             (&PatKind::Path(ref l), &PatKind::Path(ref r)) => self.eq_qpath(l, r),\n             (&PatKind::Lit(ref l), &PatKind::Lit(ref r)) => self.eq_expr(l, r),\n@@ -263,8 +263,7 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n     pub fn eq_path_segment(&mut self, left: &PathSegment<'_>, right: &PathSegment<'_>) -> bool {\n         // The == of idents doesn't work with different contexts,\n         // we have to be explicit about hygiene\n-        left.ident.as_str() == right.ident.as_str()\n-            && both(&left.args, &right.args, |l, r| self.eq_path_parameters(l, r))\n+        left.ident.name == right.ident.name && both(&left.args, &right.args, |l, r| self.eq_path_parameters(l, r))\n     }\n \n     pub fn eq_ty(&mut self, left: &Ty<'_>, right: &Ty<'_>) -> bool {"}, {"sha": "e632a7e57ee87b22fd351a80a3497bec5804a4de", "filename": "clippy_lints/src/vec_init_then_push.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7871ebaab9af1fffc3e68bae9f95c9db1e3863e5/clippy_lints%2Fsrc%2Fvec_init_then_push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7871ebaab9af1fffc3e68bae9f95c9db1e3863e5/clippy_lints%2Fsrc%2Fvec_init_then_push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec_init_then_push.rs?ref=7871ebaab9af1fffc3e68bae9f95c9db1e3863e5", "patch": "@@ -158,7 +158,7 @@ fn get_vec_init_kind<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) -> Op\n             ExprKind::Path(QPath::TypeRelative(ty, name))\n                 if is_type_diagnostic_item(cx, cx.typeck_results().node_type(ty.hir_id), sym::vec_type) =>\n             {\n-                if name.ident.name.as_str() == \"new\" {\n+                if name.ident.name == sym::new {\n                     return Some(VecInitKind::New);\n                 } else if name.ident.name.as_str() == \"with_capacity\" {\n                     return args.get(0).and_then(|arg| {"}, {"sha": "10005a7fc81ed1381abdada242234bcbbcb802de", "filename": "clippy_lints/src/wildcard_imports.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7871ebaab9af1fffc3e68bae9f95c9db1e3863e5/clippy_lints%2Fsrc%2Fwildcard_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7871ebaab9af1fffc3e68bae9f95c9db1e3863e5/clippy_lints%2Fsrc%2Fwildcard_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwildcard_imports.rs?ref=7871ebaab9af1fffc3e68bae9f95c9db1e3863e5", "patch": "@@ -7,7 +7,8 @@ use rustc_hir::{\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n-use rustc_span::BytePos;\n+use rustc_span::symbol::kw;\n+use rustc_span::{sym, BytePos};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for `use Enum::*`.\n@@ -198,12 +199,12 @@ impl WildcardImports {\n // Allow \"...prelude::..::*\" imports.\n // Many crates have a prelude, and it is imported as a glob by design.\n fn is_prelude_import(segments: &[PathSegment<'_>]) -> bool {\n-    segments.iter().any(|ps| ps.ident.as_str() == \"prelude\")\n+    segments.iter().any(|ps| ps.ident.name == sym::prelude)\n }\n \n // Allow \"super::*\" imports in tests.\n fn is_super_only_import(segments: &[PathSegment<'_>]) -> bool {\n-    segments.len() == 1 && segments[0].ident.as_str() == \"super\"\n+    segments.len() == 1 && segments[0].ident.name == kw::Super\n }\n \n fn is_test_module_or_function(item: &Item<'_>) -> bool {"}]}