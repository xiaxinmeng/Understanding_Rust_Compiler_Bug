{"sha": "1e3b5d6725a84b2060f66e61a59f33ad12aa17f8", "node_id": "C_kwDOAAsO6NoAKDFlM2I1ZDY3MjVhODRiMjA2MGY2NmU2MWE1OWYzM2FkMTJhYTE3Zjg", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-10-06T19:33:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-06T19:33:14Z"}, "message": "Rollup merge of #88523 - kpreid:category, r=yaahc\n\nExpand documentation for `FpCategory`.\n\nI intend these changes to be helpful to readers who are not yet familiar with the quirks of floating-point numbers. Additionally, I felt it was misleading to describe `Nan` as being the result of division by zero, since most divisions by zero (except for 0/0) produce `Infinite` floats, so I moved that remark to the `Infinite` variant with adjustment.\n\nThe first sentence of the `Nan` documentation is copied from `f32`; I followed the example of the `f64` documentation by referring to `f32` for general concepts, rather than duplicating the text.\n\n----\n\nI considered making similar changes to the documentation of the `is_*` methods of floats, but decided that that was a much larger and trickier problem; here, each of the variants' descriptions can be expected to be read in context of being mutually exclusive with the others.", "tree": {"sha": "29c33208daf1ff7aa2eaeabfdbc990841a04a52c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29c33208daf1ff7aa2eaeabfdbc990841a04a52c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e3b5d6725a84b2060f66e61a59f33ad12aa17f8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhXfn6CRBK7hj4Ov3rIwAADGMIAH/raOYROw3nfmiunN1k3RNy\nrnwb3rJVRVTQUjrqYW722BdUneaSGZJ6LzEQiivYoKbA/kTFOJ5aIDRfRxRUSV14\nYYRCg9TrPRB8beMpugzFFEcnOhzygYNxG3xe/+ATm1hNGrgSpCu0ueK0fef38t/M\ngE+NZHX2srwByf7hGiUXBfGSJC8TBb2Ks+ivQIgT8IYnn69y7iy0iGyZtWnMnlO0\nIpr047v1Tp1A9NRvVIxqsjIsCzAr5Nv1PWHd/ETyTwA6KLsr4pIBhtBdhvaWwHaU\nhOGTQ5lUJ8H2d7HHGABos/MuCAToMD38eTGhMZT0dyUXXvuec+Y8esswS1NODfs=\n=FRq8\n-----END PGP SIGNATURE-----\n", "payload": "tree 29c33208daf1ff7aa2eaeabfdbc990841a04a52c\nparent 3209582a87f7b8e098bac67f66ed58d8d5840dee\nparent 18df8d6e559174700e302369c2fe0d9c7c143e66\nauthor Manish Goregaokar <manishsmail@gmail.com> 1633548794 -0700\ncommitter GitHub <noreply@github.com> 1633548794 -0700\n\nRollup merge of #88523 - kpreid:category, r=yaahc\n\nExpand documentation for `FpCategory`.\n\nI intend these changes to be helpful to readers who are not yet familiar with the quirks of floating-point numbers. Additionally, I felt it was misleading to describe `Nan` as being the result of division by zero, since most divisions by zero (except for 0/0) produce `Infinite` floats, so I moved that remark to the `Infinite` variant with adjustment.\n\nThe first sentence of the `Nan` documentation is copied from `f32`; I followed the example of the `f64` documentation by referring to `f32` for general concepts, rather than duplicating the text.\n\n----\n\nI considered making similar changes to the documentation of the `is_*` methods of floats, but decided that that was a much larger and trickier problem; here, each of the variants' descriptions can be expected to be read in context of being mutually exclusive with the others.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e3b5d6725a84b2060f66e61a59f33ad12aa17f8", "html_url": "https://github.com/rust-lang/rust/commit/1e3b5d6725a84b2060f66e61a59f33ad12aa17f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e3b5d6725a84b2060f66e61a59f33ad12aa17f8/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3209582a87f7b8e098bac67f66ed58d8d5840dee", "url": "https://api.github.com/repos/rust-lang/rust/commits/3209582a87f7b8e098bac67f66ed58d8d5840dee", "html_url": "https://github.com/rust-lang/rust/commit/3209582a87f7b8e098bac67f66ed58d8d5840dee"}, {"sha": "18df8d6e559174700e302369c2fe0d9c7c143e66", "url": "https://api.github.com/repos/rust-lang/rust/commits/18df8d6e559174700e302369c2fe0d9c7c143e66", "html_url": "https://github.com/rust-lang/rust/commit/18df8d6e559174700e302369c2fe0d9c7c143e66"}], "stats": {"total": 26, "additions": 22, "deletions": 4}, "files": [{"sha": "d5fb98eff575ddbf4f2605f3a86038825a57eb76", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1e3b5d6725a84b2060f66e61a59f33ad12aa17f8/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e3b5d6725a84b2060f66e61a59f33ad12aa17f8/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=1e3b5d6725a84b2060f66e61a59f33ad12aa17f8", "patch": "@@ -865,23 +865,41 @@ impl usize {\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum FpCategory {\n-    /// \"Not a Number\", often obtained by dividing by zero.\n+    /// NaN (not a number): this value results from calculations like `(-1.0).sqrt()`.\n+    ///\n+    /// See [the documentation for `f32`](f32) for more information on the unusual properties\n+    /// of NaN.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Nan,\n \n-    /// Positive or negative infinity.\n+    /// Positive or negative infinity, which often results from dividing a nonzero number\n+    /// by zero.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Infinite,\n \n     /// Positive or negative zero.\n+    ///\n+    /// See [the documentation for `f32`](f32) for more information on the signedness of zeroes.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Zero,\n \n-    /// De-normalized floating point representation (less precise than `Normal`).\n+    /// \u201cSubnormal\u201d or \u201cdenormal\u201d floating point representation (less precise, relative to\n+    /// their magnitude, than [`Normal`]).\n+    ///\n+    /// Subnormal numbers are larger in magnitude than [`Zero`] but smaller in magnitude than all\n+    /// [`Normal`] numbers.\n+    ///\n+    /// [`Normal`]: Self::Normal\n+    /// [`Zero`]: Self::Zero\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Subnormal,\n \n-    /// A regular floating point number.\n+    /// A regular floating point number, not any of the exceptional categories.\n+    ///\n+    /// The smallest positive normal numbers are [`f32::MIN_POSITIVE`] and [`f64::MIN_POSITIVE`],\n+    /// and the largest positive normal numbers are [`f32::MAX`] and [`f64::MAX`]. (Unlike signed\n+    /// integers, floating point numbers are symmetric in their range, so negating any of these\n+    /// constants will produce their negative counterpart.)\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Normal,\n }"}]}