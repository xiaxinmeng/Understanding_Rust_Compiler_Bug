{"sha": "69f2cf5ad9f472facb25b6057d4f6fa05a2d3bab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5ZjJjZjVhZDlmNDcyZmFjYjI1YjYwNTdkNGY2ZmEwNWEyZDNiYWI=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-10-04T02:45:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-04T02:45:10Z"}, "message": "Rollup merge of #77473 - Mark-Simulacrum:check-limited, r=ecstatic-morse\n\nMake --all-targets in x.py check opt-in\n\nIn particular due to #76822, making this the default is currently suboptimal.\n\nr? @ecstatic-morse", "tree": {"sha": "e9e0ce9775b68d30686494b4ca98f4edd7f0af91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9e0ce9775b68d30686494b4ca98f4edd7f0af91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69f2cf5ad9f472facb25b6057d4f6fa05a2d3bab", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfeTc2CRBK7hj4Ov3rIwAAdHIIAANo3Q56EhXg4sYWd4FL3LH3\nIkvfm1kkXX5jY9xv1fF37/RGtNLBwTtq5sE0cBCa3iPssiuovxvsPmadwIxiybhN\ndu9TM5E7RpmdDpxqDGDgGp/+MBl2DBOXtD0HAQFHiRPj0NaFirUpJMv/3UpBG3H/\nqlwLg8P0DVuUbjhWtixuvTah6zHHH36yQMJkJbJ+knytdRV1eSSMFiQ/Jc0yw6p5\nXFlAn5NPmkWlOvOKmAT46Qlg+83S8yCO/OE6VFZpCvfLQt/6cxJFaAkTyhA0axvP\niKGbLYrNgkfZpIVHdPd8/1d07heNnphWmtMUKOIdyfkgCl71WQ+RM5dvgMMfKIg=\n=MbEx\n-----END PGP SIGNATURE-----\n", "payload": "tree e9e0ce9775b68d30686494b4ca98f4edd7f0af91\nparent 0ed4849a3e71f19c68d612b77bbe06c2d5b256c5\nparent eaa0186662b0a494b2536f75f9e2811b6aa8366b\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1601779510 +0900\ncommitter GitHub <noreply@github.com> 1601779510 +0900\n\nRollup merge of #77473 - Mark-Simulacrum:check-limited, r=ecstatic-morse\n\nMake --all-targets in x.py check opt-in\n\nIn particular due to #76822, making this the default is currently suboptimal.\n\nr? @ecstatic-morse\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69f2cf5ad9f472facb25b6057d4f6fa05a2d3bab", "html_url": "https://github.com/rust-lang/rust/commit/69f2cf5ad9f472facb25b6057d4f6fa05a2d3bab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69f2cf5ad9f472facb25b6057d4f6fa05a2d3bab/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ed4849a3e71f19c68d612b77bbe06c2d5b256c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ed4849a3e71f19c68d612b77bbe06c2d5b256c5", "html_url": "https://github.com/rust-lang/rust/commit/0ed4849a3e71f19c68d612b77bbe06c2d5b256c5"}, {"sha": "eaa0186662b0a494b2536f75f9e2811b6aa8366b", "url": "https://api.github.com/repos/rust-lang/rust/commits/eaa0186662b0a494b2536f75f9e2811b6aa8366b", "html_url": "https://github.com/rust-lang/rust/commit/eaa0186662b0a494b2536f75f9e2811b6aa8366b"}], "stats": {"total": 85, "additions": 51, "deletions": 34}, "files": [{"sha": "d8c704f451bfc00341be4a67a31d1fbac1f975bf", "filename": "src/bootstrap/CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69f2cf5ad9f472facb25b6057d4f6fa05a2d3bab/src%2Fbootstrap%2FCHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/69f2cf5ad9f472facb25b6057d4f6fa05a2d3bab/src%2Fbootstrap%2FCHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCHANGELOG.md?ref=69f2cf5ad9f472facb25b6057d4f6fa05a2d3bab", "patch": "@@ -6,7 +6,7 @@ The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/).\n \n ## [Non-breaking changes since the last major version]\n \n-None.\n+- `x.py check` needs opt-in to check tests (--all-targets) [#77473](https://github.com/rust-lang/rust/pull/77473)\n \n ## [Version 2] - 2020-09-25\n "}, {"sha": "6856cd338cfad83f772ade8c81add34be3f8c81a", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69f2cf5ad9f472facb25b6057d4f6fa05a2d3bab/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69f2cf5ad9f472facb25b6057d4f6fa05a2d3bab/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=69f2cf5ad9f472facb25b6057d4f6fa05a2d3bab", "patch": "@@ -532,7 +532,7 @@ impl<'a> Builder<'a> {\n     pub fn new(build: &Build) -> Builder<'_> {\n         let (kind, paths) = match build.config.cmd {\n             Subcommand::Build { ref paths } => (Kind::Build, &paths[..]),\n-            Subcommand::Check { ref paths } => (Kind::Check, &paths[..]),\n+            Subcommand::Check { ref paths, all_targets: _ } => (Kind::Check, &paths[..]),\n             Subcommand::Clippy { ref paths } => (Kind::Clippy, &paths[..]),\n             Subcommand::Fix { ref paths } => (Kind::Fix, &paths[..]),\n             Subcommand::Doc { ref paths, .. } => (Kind::Doc, &paths[..]),"}, {"sha": "371631154f72da87ef23cf934c7501d5c597d011", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 39, "deletions": 30, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/69f2cf5ad9f472facb25b6057d4f6fa05a2d3bab/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69f2cf5ad9f472facb25b6057d4f6fa05a2d3bab/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=69f2cf5ad9f472facb25b6057d4f6fa05a2d3bab", "patch": "@@ -1,9 +1,12 @@\n //! Implementation of compiling the compiler and standard library, in \"check\"-based modes.\n \n-use crate::builder::{Builder, Kind, RunConfig, ShouldRun, Step};\n use crate::compile::{add_to_sysroot, run_cargo, rustc_cargo, std_cargo};\n use crate::config::TargetSelection;\n use crate::tool::{prepare_tool_cargo, SourceType};\n+use crate::{\n+    builder::{Builder, Kind, RunConfig, ShouldRun, Step},\n+    Subcommand,\n+};\n use crate::{Compiler, Mode};\n use std::path::PathBuf;\n \n@@ -74,35 +77,37 @@ impl Step for Std {\n         //\n         // Currently only the \"libtest\" tree of crates does this.\n \n-        let mut cargo = builder.cargo(\n-            compiler,\n-            Mode::Std,\n-            SourceType::InTree,\n-            target,\n-            cargo_subcommand(builder.kind),\n-        );\n-        std_cargo(builder, target, compiler.stage, &mut cargo);\n-        cargo.arg(\"--all-targets\");\n+        if let Subcommand::Check { all_targets: true, .. } = builder.config.cmd {\n+            let mut cargo = builder.cargo(\n+                compiler,\n+                Mode::Std,\n+                SourceType::InTree,\n+                target,\n+                cargo_subcommand(builder.kind),\n+            );\n+            std_cargo(builder, target, compiler.stage, &mut cargo);\n+            cargo.arg(\"--all-targets\");\n+\n+            // Explicitly pass -p for all dependencies krates -- this will force cargo\n+            // to also check the tests/benches/examples for these crates, rather\n+            // than just the leaf crate.\n+            for krate in builder.in_tree_crates(\"test\") {\n+                cargo.arg(\"-p\").arg(krate.name);\n+            }\n \n-        // Explicitly pass -p for all dependencies krates -- this will force cargo\n-        // to also check the tests/benches/examples for these crates, rather\n-        // than just the leaf crate.\n-        for krate in builder.in_tree_crates(\"test\") {\n-            cargo.arg(\"-p\").arg(krate.name);\n+            builder.info(&format!(\n+                \"Checking std test/bench/example targets ({} -> {})\",\n+                &compiler.host, target\n+            ));\n+            run_cargo(\n+                builder,\n+                cargo,\n+                args(builder.kind),\n+                &libstd_test_stamp(builder, compiler, target),\n+                vec![],\n+                true,\n+            );\n         }\n-\n-        builder.info(&format!(\n-            \"Checking std test/bench/example targets ({} -> {})\",\n-            &compiler.host, target\n-        ));\n-        run_cargo(\n-            builder,\n-            cargo,\n-            args(builder.kind),\n-            &libstd_test_stamp(builder, compiler, target),\n-            vec![],\n-            true,\n-        );\n     }\n }\n \n@@ -143,7 +148,9 @@ impl Step for Rustc {\n             cargo_subcommand(builder.kind),\n         );\n         rustc_cargo(builder, &mut cargo, target);\n-        cargo.arg(\"--all-targets\");\n+        if let Subcommand::Check { all_targets: true, .. } = builder.config.cmd {\n+            cargo.arg(\"--all-targets\");\n+        }\n \n         // Explicitly pass -p for all compiler krates -- this will force cargo\n         // to also check the tests/benches/examples for these crates, rather\n@@ -205,7 +212,9 @@ macro_rules! tool_check_step {\n                     &[],\n                 );\n \n-                cargo.arg(\"--all-targets\");\n+                if let Subcommand::Check { all_targets: true, .. } = builder.config.cmd {\n+                    cargo.arg(\"--all-targets\");\n+                }\n \n                 builder.info(&format!(\n                     \"Checking {} artifacts ({} -> {})\","}, {"sha": "c1a9d4fcd23fef732c03ed1c11ffd8e108f02e23", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/69f2cf5ad9f472facb25b6057d4f6fa05a2d3bab/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69f2cf5ad9f472facb25b6057d4f6fa05a2d3bab/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=69f2cf5ad9f472facb25b6057d4f6fa05a2d3bab", "patch": "@@ -47,6 +47,9 @@ pub enum Subcommand {\n         paths: Vec<PathBuf>,\n     },\n     Check {\n+        // Whether to run checking over all targets (e.g., unit / integration\n+        // tests).\n+        all_targets: bool,\n         paths: Vec<PathBuf>,\n     },\n     Clippy {\n@@ -250,6 +253,9 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\",\n                         `/<build_base>/rustfix_missing_coverage.txt`\",\n                 );\n             }\n+            \"check\" => {\n+                opts.optflag(\"\", \"all-targets\", \"Check all targets\");\n+            }\n             \"bench\" => {\n                 opts.optmulti(\"\", \"test-args\", \"extra arguments\", \"ARGS\");\n             }\n@@ -484,7 +490,9 @@ Arguments:\n \n         let cmd = match subcommand.as_str() {\n             \"build\" | \"b\" => Subcommand::Build { paths },\n-            \"check\" | \"c\" => Subcommand::Check { paths },\n+            \"check\" | \"c\" => {\n+                Subcommand::Check { paths, all_targets: matches.opt_present(\"all-targets\") }\n+            }\n             \"clippy\" => Subcommand::Clippy { paths },\n             \"fix\" => Subcommand::Fix { paths },\n             \"test\" | \"t\" => Subcommand::Test {"}, {"sha": "b2aa5844e476671dd329b274dc555fcaa6a38195", "filename": "src/ci/docker/host-x86_64/mingw-check/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69f2cf5ad9f472facb25b6057d4f6fa05a2d3bab/src%2Fci%2Fdocker%2Fhost-x86_64%2Fmingw-check%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/69f2cf5ad9f472facb25b6057d4f6fa05a2d3bab/src%2Fci%2Fdocker%2Fhost-x86_64%2Fmingw-check%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fmingw-check%2FDockerfile?ref=69f2cf5ad9f472facb25b6057d4f6fa05a2d3bab", "patch": "@@ -24,7 +24,7 @@ COPY host-x86_64/mingw-check/validate-toolstate.sh /scripts/\n \n ENV RUN_CHECK_WITH_PARALLEL_QUERIES 1\n ENV SCRIPT python3 ../x.py --stage 2 test src/tools/expand-yaml-anchors && \\\n-           python3 ../x.py check --target=i686-pc-windows-gnu --host=i686-pc-windows-gnu && \\\n+           python3 ../x.py check --target=i686-pc-windows-gnu --host=i686-pc-windows-gnu --all-targets && \\\n            python3 ../x.py build --stage 0 src/tools/build-manifest && \\\n            python3 ../x.py test --stage 0 src/tools/compiletest && \\\n            python3 ../x.py test --stage 2 src/tools/tidy && \\"}]}