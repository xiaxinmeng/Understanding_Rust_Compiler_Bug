{"sha": "e8a88f7d4330c62bc039c21831894c2758a43e60", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4YTg4ZjdkNDMzMGM2MmJjMDM5YzIxODMxODk0YzI3NThhNDNlNjA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-03T23:38:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-03T23:38:41Z"}, "message": "Rollup merge of #62039 - jeremystucki:needless_lifetimes, r=eddyb\n\nRemove needless lifetimes (rustc)", "tree": {"sha": "5eb43bbb1628f79cf0daf7f6a481a1a4b7f65b7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5eb43bbb1628f79cf0daf7f6a481a1a4b7f65b7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8a88f7d4330c62bc039c21831894c2758a43e60", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdHTyBCRBK7hj4Ov3rIwAAdHIIADxTs77lW45X81tNZjqhWss7\neU0NRnox9sRt2dQuGPWmTJCrZyQ2s4sl80xAWG9L8zD1PM/NfE7x4jzb8E1FiGcE\nIrFUMShUqHEz1/AH3LXpt/hs6H1QyubWNPnVPf+hOlyqgWIiPme27pStlcj7Is6y\nQ3VfgO2FOvHvdhE+RfUL3udaHokOFXib/gHfkGlRHMDuQVtUezls0UxywkhHAlhp\nuHOzoZ5yPZetJUjnP44M4n039aAdqPt0XSvVk71mz3MB8GGjEB0rjS5LX8K7VFzM\nU3YjN6xUKxMcmCqetjy32DREmJUzCM/t54zpATxVGD1cS58KYutQErjQ/wgBqhU=\n=MACU\n-----END PGP SIGNATURE-----\n", "payload": "tree 5eb43bbb1628f79cf0daf7f6a481a1a4b7f65b7d\nparent 088b987307b91612ab164026e1dcdd0129fdb62b\nparent 88c515da0728a3a3738be6ffa96168d060243225\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1562197121 +0200\ncommitter GitHub <noreply@github.com> 1562197121 +0200\n\nRollup merge of #62039 - jeremystucki:needless_lifetimes, r=eddyb\n\nRemove needless lifetimes (rustc)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8a88f7d4330c62bc039c21831894c2758a43e60", "html_url": "https://github.com/rust-lang/rust/commit/e8a88f7d4330c62bc039c21831894c2758a43e60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8a88f7d4330c62bc039c21831894c2758a43e60/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "088b987307b91612ab164026e1dcdd0129fdb62b", "url": "https://api.github.com/repos/rust-lang/rust/commits/088b987307b91612ab164026e1dcdd0129fdb62b", "html_url": "https://github.com/rust-lang/rust/commit/088b987307b91612ab164026e1dcdd0129fdb62b"}, {"sha": "88c515da0728a3a3738be6ffa96168d060243225", "url": "https://api.github.com/repos/rust-lang/rust/commits/88c515da0728a3a3738be6ffa96168d060243225", "html_url": "https://github.com/rust-lang/rust/commit/88c515da0728a3a3738be6ffa96168d060243225"}], "stats": {"total": 880, "additions": 440, "deletions": 440}, "files": [{"sha": "89fb707001589339874dbf48609ffd63ebeef200", "filename": "src/libproc_macro/bridge/scoped_cell.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibproc_macro%2Fbridge%2Fscoped_cell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibproc_macro%2Fbridge%2Fscoped_cell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fbridge%2Fscoped_cell.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -74,7 +74,7 @@ impl<T: LambdaL> ScopedCell<T> {\n     }\n \n     /// Sets the value in `self` to `value` while running `f`.\n-    pub fn set<'a, R>(&self, value: <T as ApplyL<'a>>::Out, f: impl FnOnce() -> R) -> R {\n+    pub fn set<R>(&self, value: <T as ApplyL<'_>>::Out, f: impl FnOnce() -> R) -> R {\n         self.replace(value, |_| f())\n     }\n }"}, {"sha": "a132575b0c673b8b35848e0a2a29871e55f2009e", "filename": "src/librustc/cfg/construct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fconstruct.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -30,7 +30,7 @@ struct LoopScope {\n     break_index: CFGIndex,    // where to go on a `break`\n }\n \n-pub fn construct<'tcx>(tcx: TyCtxt<'tcx>, body: &hir::Body) -> CFG {\n+pub fn construct(tcx: TyCtxt<'_>, body: &hir::Body) -> CFG {\n     let mut graph = graph::Graph::new();\n     let entry = graph.add_node(CFGNodeData::Entry);\n "}, {"sha": "88fc7fbfad51ff7692481533906bf8bf6c03d03a", "filename": "src/librustc/cfg/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc%2Fcfg%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc%2Fcfg%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fmod.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -49,7 +49,7 @@ pub type CFGNode = graph::Node<CFGNodeData>;\n pub type CFGEdge = graph::Edge<CFGEdgeData>;\n \n impl CFG {\n-    pub fn new<'tcx>(tcx: TyCtxt<'tcx>, body: &hir::Body) -> CFG {\n+    pub fn new(tcx: TyCtxt<'_>, body: &hir::Body) -> CFG {\n         construct::construct(tcx, body)\n     }\n "}, {"sha": "b8c6c1e3723826a19e070d0bc8c1e254d101da7e", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -841,7 +841,7 @@ impl DepGraph {\n     //\n     // This method will only load queries that will end up in the disk cache.\n     // Other queries will not be executed.\n-    pub fn exec_cache_promotions<'tcx>(&self, tcx: TyCtxt<'tcx>) {\n+    pub fn exec_cache_promotions(&self, tcx: TyCtxt<'_>) {\n         let data = self.data.as_ref().unwrap();\n         for prev_index in data.colors.values.indices() {\n             match data.colors.get(prev_index) {"}, {"sha": "9160b8024ee4512042f4c166e90600085af25d63", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -347,7 +347,7 @@ fn is_c_like_enum(item: &hir::Item) -> bool {\n     }\n }\n \n-fn check_mod_attrs<'tcx>(tcx: TyCtxt<'tcx>, module_def_id: DefId) {\n+fn check_mod_attrs(tcx: TyCtxt<'_>, module_def_id: DefId) {\n     tcx.hir().visit_item_likes_in_module(\n         module_def_id,\n         &mut CheckAttrVisitor { tcx }.as_deep_visitor()"}, {"sha": "891a1956bc971da7ecf4164cbec771ab3e59f3f6", "filename": "src/librustc/hir/map/hir_id_validator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -4,7 +4,7 @@ use crate::hir::itemlikevisit::ItemLikeVisitor;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::{Lock, ParallelIterator, par_iter};\n \n-pub fn check_crate<'hir>(hir_map: &hir::map::Map<'hir>) {\n+pub fn check_crate(hir_map: &hir::map::Map<'_>) {\n     hir_map.dep_graph.assert_ignored();\n \n     let errors = Lock::new(Vec::new());"}, {"sha": "037d04a5d8ed3a21d61655008f25290ae669df95", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -147,15 +147,15 @@ impl Forest {\n         }\n     }\n \n-    pub fn krate<'hir>(&'hir self) -> &'hir Crate {\n+    pub fn krate(&self) -> &Crate {\n         self.dep_graph.read(DepNode::new_no_params(DepKind::Krate));\n         &self.krate\n     }\n \n     /// This is used internally in the dependency tracking system.\n     /// Use the `krate` method to ensure your dependency on the\n     /// crate is tracked.\n-    pub fn untracked_krate<'hir>(&'hir self) -> &'hir Crate {\n+    pub fn untracked_krate(&self) -> &Crate {\n         &self.krate\n     }\n }\n@@ -1085,7 +1085,7 @@ impl<'a> NodesMatchingSuffix<'a> {\n         // If `id` itself is a mod named `m` with parent `p`, then\n         // returns `Some(id, m, p)`.  If `id` has no mod in its parent\n         // chain, then returns `None`.\n-        fn find_first_mod_parent<'a>(map: &'a Map<'_>, mut id: HirId) -> Option<(HirId, Name)> {\n+        fn find_first_mod_parent(map: &Map<'_>, mut id: HirId) -> Option<(HirId, Name)> {\n             loop {\n                 if let Node::Item(item) = map.find(id)? {\n                     if item_is_mod(&item) {"}, {"sha": "e30e86998a8c6f16bde7f8c1d8e932edb1380f31", "filename": "src/librustc/infer/type_variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ftype_variable.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -115,7 +115,7 @@ impl<'tcx> TypeVariableTable<'tcx> {\n     ///\n     /// Note that this function does not return care whether\n     /// `vid` has been unified with something else or not.\n-    pub fn var_diverges<'a>(&'a self, vid: ty::TyVid) -> bool {\n+    pub fn var_diverges(&self, vid: ty::TyVid) -> bool {\n         self.values.get(vid.index as usize).diverging\n     }\n "}, {"sha": "59b08b832d27275fe0f210cc883c414b35d6c900", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -765,7 +765,7 @@ pub fn maybe_lint_level_root(tcx: TyCtxt<'_>, id: hir::HirId) -> bool {\n     attrs.iter().any(|attr| Level::from_symbol(attr.name_or_empty()).is_some())\n }\n \n-fn lint_levels<'tcx>(tcx: TyCtxt<'tcx>, cnum: CrateNum) -> &'tcx LintLevelMap {\n+fn lint_levels(tcx: TyCtxt<'_>, cnum: CrateNum) -> &LintLevelMap {\n     assert_eq!(cnum, LOCAL_CRATE);\n     let mut builder = LintLevelMapBuilder {\n         levels: LintLevelSets::builder(tcx.sess),"}, {"sha": "5a580dfa420b3f22d5a3b33fabf39d7e2c0383ea", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -211,7 +211,7 @@ pub trait CrateStore {\n     fn crates_untracked(&self) -> Vec<CrateNum>;\n \n     // utility functions\n-    fn encode_metadata<'tcx>(&self, tcx: TyCtxt<'tcx>) -> EncodedMetadata;\n+    fn encode_metadata(&self, tcx: TyCtxt<'_>) -> EncodedMetadata;\n     fn metadata_encoding_version(&self) -> &[u8];\n }\n "}, {"sha": "e1889aa555f86d33b155858d796e0df9642362e8", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -26,7 +26,7 @@ use syntax_pos;\n // explored. For example, if it's a live Node::Item that is a\n // function, then we should explore its block to check for codes that\n // may need to be marked as live.\n-fn should_explore<'tcx>(tcx: TyCtxt<'tcx>, hir_id: hir::HirId) -> bool {\n+fn should_explore(tcx: TyCtxt<'_>, hir_id: hir::HirId) -> bool {\n     match tcx.hir().find(hir_id) {\n         Some(Node::Item(..)) |\n         Some(Node::ImplItem(..)) |\n@@ -662,7 +662,7 @@ impl Visitor<'tcx> for DeadVisitor<'tcx> {\n     }\n }\n \n-pub fn check_crate<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn check_crate(tcx: TyCtxt<'_>) {\n     let access_levels = &tcx.privacy_access_levels(LOCAL_CRATE);\n     let krate = tcx.hir().krate();\n     let live_symbols = find_live(tcx, access_levels, krate);"}, {"sha": "96b99fe4cdce2c01ca4716a4ba60be190907f59f", "filename": "src/librustc/middle/dependency_format.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -81,7 +81,7 @@ pub enum Linkage {\n     Dynamic,\n }\n \n-pub fn calculate<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn calculate(tcx: TyCtxt<'_>) {\n     let sess = &tcx.sess;\n     let fmts = sess.crate_types.borrow().iter().map(|&ty| {\n         let linkage = calculate_type(tcx, ty);\n@@ -92,7 +92,7 @@ pub fn calculate<'tcx>(tcx: TyCtxt<'tcx>) {\n     sess.dependency_formats.set(fmts);\n }\n \n-fn calculate_type<'tcx>(tcx: TyCtxt<'tcx>, ty: config::CrateType) -> DependencyList {\n+fn calculate_type(tcx: TyCtxt<'_>, ty: config::CrateType) -> DependencyList {\n     let sess = &tcx.sess;\n \n     if !sess.opts.output_types.should_codegen() {\n@@ -267,7 +267,7 @@ fn add_library(\n     }\n }\n \n-fn attempt_static<'tcx>(tcx: TyCtxt<'tcx>) -> Option<DependencyList> {\n+fn attempt_static(tcx: TyCtxt<'_>) -> Option<DependencyList> {\n     let sess = &tcx.sess;\n     let crates = cstore::used_crates(tcx, RequireStatic);\n     if !crates.iter().by_ref().all(|&(_, ref p)| p.is_some()) {\n@@ -324,7 +324,7 @@ fn activate_injected_dep(injected: Option<CrateNum>,\n \n // After the linkage for a crate has been determined we need to verify that\n // there's only going to be one allocator in the output.\n-fn verify_ok<'tcx>(tcx: TyCtxt<'tcx>, list: &[Linkage]) {\n+fn verify_ok(tcx: TyCtxt<'_>, list: &[Linkage]) {\n     let sess = &tcx.sess;\n     if list.len() == 0 {\n         return"}, {"sha": "1cc96c549e7243c943d8629bcfecc3e8f91e76f1", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -10,7 +10,7 @@ use syntax_pos::{Span, sym};\n use crate::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use crate::hir;\n \n-fn check_mod_intrinsics<'tcx>(tcx: TyCtxt<'tcx>, module_def_id: DefId) {\n+fn check_mod_intrinsics(tcx: TyCtxt<'_>, module_def_id: DefId) {\n     tcx.hir().visit_item_likes_in_module(\n         module_def_id,\n         &mut ItemVisitor { tcx }.as_deep_visitor()"}, {"sha": "694b0a986296065b3d005a3d26aa63b5b9ba8f6b", "filename": "src/librustc/middle/lib_features.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc%2Fmiddle%2Flib_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc%2Fmiddle%2Flib_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flib_features.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -142,7 +142,7 @@ impl Visitor<'tcx> for LibFeatureCollector<'tcx> {\n     }\n }\n \n-pub fn collect<'tcx>(tcx: TyCtxt<'tcx>) -> LibFeatures {\n+pub fn collect(tcx: TyCtxt<'_>) -> LibFeatures {\n     let mut collector = LibFeatureCollector::new(tcx);\n     intravisit::walk_crate(&mut collector, tcx.hir().krate());\n     collector.lib_features"}, {"sha": "30ff835bdcc43c7262081048fed28c6d0769c53b", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -181,7 +181,7 @@ impl<'tcx> Visitor<'tcx> for IrMaps<'tcx> {\n     fn visit_arm(&mut self, a: &'tcx hir::Arm) { visit_arm(self, a); }\n }\n \n-fn check_mod_liveness<'tcx>(tcx: TyCtxt<'tcx>, module_def_id: DefId) {\n+fn check_mod_liveness(tcx: TyCtxt<'_>, module_def_id: DefId) {\n     tcx.hir().visit_item_likes_in_module(\n         module_def_id,\n         &mut IrMaps::new(tcx, module_def_id).as_deep_visitor(),"}, {"sha": "6b26be34d75205cfe5e45c394236d65c4c259844", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -42,8 +42,8 @@ fn item_might_be_inlined(tcx: TyCtxt<'tcx>, item: &hir::Item, attrs: CodegenFnAt\n     }\n }\n \n-fn method_might_be_inlined<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn method_might_be_inlined(\n+    tcx: TyCtxt<'_>,\n     impl_item: &hir::ImplItem,\n     impl_src: DefId,\n ) -> bool {\n@@ -391,7 +391,7 @@ impl<'a, 'tcx> ItemLikeVisitor<'tcx> for CollectPrivateImplItemsVisitor<'a, 'tcx\n #[derive(Clone, HashStable)]\n pub struct ReachableSet(pub Lrc<HirIdSet>);\n \n-fn reachable_set<'tcx>(tcx: TyCtxt<'tcx>, crate_num: CrateNum) -> ReachableSet {\n+fn reachable_set(tcx: TyCtxt<'_>, crate_num: CrateNum) -> ReachableSet {\n     debug_assert!(crate_num == LOCAL_CRATE);\n \n     let access_levels = &tcx.privacy_access_levels(LOCAL_CRATE);"}, {"sha": "67a4c2981a70559537f6fcf3d0b4d0b09cdc906b", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -1446,7 +1446,7 @@ impl<'tcx> Visitor<'tcx> for RegionResolutionVisitor<'tcx> {\n     }\n }\n \n-fn region_scope_tree<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx ScopeTree {\n+fn region_scope_tree(tcx: TyCtxt<'_>, def_id: DefId) -> &ScopeTree {\n     let closure_base_def_id = tcx.closure_base_def_id(def_id);\n     if closure_base_def_id != def_id {\n         return tcx.region_scope_tree(closure_base_def_id);"}, {"sha": "7776f38f53820b512c68a5a5d12d9ca3cfe2af9e", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -368,7 +368,7 @@ pub fn provide(providers: &mut ty::query::Providers<'_>) {\n /// entire crate. You should not read the result of this query\n /// directly, but rather use `named_region_map`, `is_late_bound_map`,\n /// etc.\n-fn resolve_lifetimes<'tcx>(tcx: TyCtxt<'tcx>, for_krate: CrateNum) -> &'tcx ResolveLifetimes {\n+fn resolve_lifetimes(tcx: TyCtxt<'_>, for_krate: CrateNum) -> &ResolveLifetimes {\n     assert_eq!(for_krate, LOCAL_CRATE);\n \n     let named_region_map = krate(tcx);\n@@ -395,7 +395,7 @@ fn resolve_lifetimes<'tcx>(tcx: TyCtxt<'tcx>, for_krate: CrateNum) -> &'tcx Reso\n     tcx.arena.alloc(rl)\n }\n \n-fn krate<'tcx>(tcx: TyCtxt<'tcx>) -> NamedRegionMap {\n+fn krate(tcx: TyCtxt<'_>) -> NamedRegionMap {\n     let krate = tcx.hir().krate();\n     let mut map = NamedRegionMap {\n         defs: Default::default(),"}, {"sha": "101563d2d99ef7dde0b73583876a343b6a851cf7", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -466,7 +466,7 @@ impl<'tcx> Index<'tcx> {\n \n /// Cross-references the feature names of unstable APIs with enabled\n /// features and possibly prints errors.\n-fn check_mod_unstable_api_usage<'tcx>(tcx: TyCtxt<'tcx>, module_def_id: DefId) {\n+fn check_mod_unstable_api_usage(tcx: TyCtxt<'_>, module_def_id: DefId) {\n     tcx.hir().visit_item_likes_in_module(module_def_id, &mut Checker { tcx }.as_deep_visitor());\n }\n \n@@ -836,7 +836,7 @@ impl<'tcx> TyCtxt<'tcx> {\n /// Given the list of enabled features that were not language features (i.e., that\n /// were expected to be library features), and the list of features used from\n /// libraries, identify activated features that don't exist and error about them.\n-pub fn check_unused_or_stable_features<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn check_unused_or_stable_features(tcx: TyCtxt<'_>) {\n     let access_levels = &tcx.privacy_access_levels(LOCAL_CRATE);\n \n     if tcx.stability().staged_api[&LOCAL_CRATE] {\n@@ -920,8 +920,8 @@ pub fn check_unused_or_stable_features<'tcx>(tcx: TyCtxt<'tcx>) {\n     // don't lint about unused features. We should reenable this one day!\n }\n \n-fn unnecessary_stable_feature_lint<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn unnecessary_stable_feature_lint(\n+    tcx: TyCtxt<'_>,\n     span: Span,\n     feature: Symbol,\n     since: Symbol,"}, {"sha": "59a032d53cfd67991da6d32ac16d5d41707b6597", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -2867,19 +2867,19 @@ impl<'tcx> graph::WithStartNode for Body<'tcx> {\n }\n \n impl<'tcx> graph::WithPredecessors for Body<'tcx> {\n-    fn predecessors<'graph>(\n-        &'graph self,\n+    fn predecessors(\n+        &self,\n         node: Self::Node,\n-    ) -> <Self as GraphPredecessors<'graph>>::Iter {\n+    ) -> <Self as GraphPredecessors<'_>>::Iter {\n         self.predecessors_for(node).clone().into_iter()\n     }\n }\n \n impl<'tcx> graph::WithSuccessors for Body<'tcx> {\n-    fn successors<'graph>(\n-        &'graph self,\n+    fn successors(\n+        &self,\n         node: Self::Node,\n-    ) -> <Self as GraphSuccessors<'graph>>::Iter {\n+    ) -> <Self as GraphSuccessors<'_>>::Iter {\n         self.basic_blocks[node].terminator().successors().cloned()\n     }\n }"}, {"sha": "82c53be3ec70ff15316d2fa9d5f34d9333a23090", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -269,11 +269,11 @@ impl OutputTypes {\n         self.0.contains_key(key)\n     }\n \n-    pub fn keys<'a>(&'a self) -> BTreeMapKeysIter<'a, OutputType, Option<PathBuf>> {\n+    pub fn keys(&self) -> BTreeMapKeysIter<'_, OutputType, Option<PathBuf>> {\n         self.0.keys()\n     }\n \n-    pub fn values<'a>(&'a self) -> BTreeMapValuesIter<'a, OutputType, Option<PathBuf>> {\n+    pub fn values(&self) -> BTreeMapValuesIter<'_, OutputType, Option<PathBuf>> {\n         self.0.values()\n     }\n \n@@ -316,7 +316,7 @@ impl Externs {\n         self.0.get(key)\n     }\n \n-    pub fn iter<'a>(&'a self) -> BTreeMapIter<'a, String, ExternEntry> {\n+    pub fn iter(&self) -> BTreeMapIter<'_, String, ExternEntry> {\n         self.0.iter()\n     }\n }"}, {"sha": "3cbf0ee213ae371891821890de7a2086d3e61bc8", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -215,66 +215,66 @@ impl Session {\n         *self.crate_disambiguator.get()\n     }\n \n-    pub fn struct_span_warn<'a, S: Into<MultiSpan>>(\n-        &'a self,\n+    pub fn struct_span_warn<S: Into<MultiSpan>>(\n+        &self,\n         sp: S,\n         msg: &str,\n-    ) -> DiagnosticBuilder<'a> {\n+    ) -> DiagnosticBuilder<'_> {\n         self.diagnostic().struct_span_warn(sp, msg)\n     }\n-    pub fn struct_span_warn_with_code<'a, S: Into<MultiSpan>>(\n-        &'a self,\n+    pub fn struct_span_warn_with_code<S: Into<MultiSpan>>(\n+        &self,\n         sp: S,\n         msg: &str,\n         code: DiagnosticId,\n-    ) -> DiagnosticBuilder<'a> {\n+    ) -> DiagnosticBuilder<'_> {\n         self.diagnostic().struct_span_warn_with_code(sp, msg, code)\n     }\n-    pub fn struct_warn<'a>(&'a self, msg: &str) -> DiagnosticBuilder<'a> {\n+    pub fn struct_warn(&self, msg: &str) -> DiagnosticBuilder<'_> {\n         self.diagnostic().struct_warn(msg)\n     }\n-    pub fn struct_span_err<'a, S: Into<MultiSpan>>(\n-        &'a self,\n+    pub fn struct_span_err<S: Into<MultiSpan>>(\n+        &self,\n         sp: S,\n         msg: &str,\n-    ) -> DiagnosticBuilder<'a> {\n+    ) -> DiagnosticBuilder<'_> {\n         self.diagnostic().struct_span_err(sp, msg)\n     }\n-    pub fn struct_span_err_with_code<'a, S: Into<MultiSpan>>(\n-        &'a self,\n+    pub fn struct_span_err_with_code<S: Into<MultiSpan>>(\n+        &self,\n         sp: S,\n         msg: &str,\n         code: DiagnosticId,\n-    ) -> DiagnosticBuilder<'a> {\n+    ) -> DiagnosticBuilder<'_> {\n         self.diagnostic().struct_span_err_with_code(sp, msg, code)\n     }\n     // FIXME: This method should be removed (every error should have an associated error code).\n-    pub fn struct_err<'a>(&'a self, msg: &str) -> DiagnosticBuilder<'a> {\n+    pub fn struct_err(&self, msg: &str) -> DiagnosticBuilder<'_> {\n         self.diagnostic().struct_err(msg)\n     }\n-    pub fn struct_err_with_code<'a>(\n-        &'a self,\n+    pub fn struct_err_with_code(\n+        &self,\n         msg: &str,\n         code: DiagnosticId,\n-    ) -> DiagnosticBuilder<'a> {\n+    ) -> DiagnosticBuilder<'_> {\n         self.diagnostic().struct_err_with_code(msg, code)\n     }\n-    pub fn struct_span_fatal<'a, S: Into<MultiSpan>>(\n-        &'a self,\n+    pub fn struct_span_fatal<S: Into<MultiSpan>>(\n+        &self,\n         sp: S,\n         msg: &str,\n-    ) -> DiagnosticBuilder<'a> {\n+    ) -> DiagnosticBuilder<'_> {\n         self.diagnostic().struct_span_fatal(sp, msg)\n     }\n-    pub fn struct_span_fatal_with_code<'a, S: Into<MultiSpan>>(\n-        &'a self,\n+    pub fn struct_span_fatal_with_code<S: Into<MultiSpan>>(\n+        &self,\n         sp: S,\n         msg: &str,\n         code: DiagnosticId,\n-    ) -> DiagnosticBuilder<'a> {\n+    ) -> DiagnosticBuilder<'_> {\n         self.diagnostic().struct_span_fatal_with_code(sp, msg, code)\n     }\n-    pub fn struct_fatal<'a>(&'a self, msg: &str) -> DiagnosticBuilder<'a> {\n+    pub fn struct_fatal(&self, msg: &str) -> DiagnosticBuilder<'_> {\n         self.diagnostic().struct_fatal(msg)\n     }\n \n@@ -416,7 +416,7 @@ impl Session {\n     pub fn next_node_id(&self) -> NodeId {\n         self.reserve_node_ids(1)\n     }\n-    pub fn diagnostic<'a>(&'a self) -> &'a errors::Handler {\n+    pub fn diagnostic(&self) -> &errors::Handler {\n         &self.parse_sess.span_diagnostic\n     }\n \n@@ -504,7 +504,7 @@ impl Session {\n         );\n     }\n \n-    pub fn source_map<'a>(&'a self) -> &'a source_map::SourceMap {\n+    pub fn source_map(&self) -> &source_map::SourceMap {\n         self.parse_sess.source_map()\n     }\n     pub fn verbose(&self) -> bool {"}, {"sha": "b6f0addd77107216c344fefa999de768462d56ba", "filename": "src/librustc/traits/coherence.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcoherence.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -48,8 +48,8 @@ pub fn add_placeholder_note(err: &mut errors::DiagnosticBuilder<'_>) {\n /// If there are types that satisfy both impls, invokes `on_overlap`\n /// with a suitably-freshened `ImplHeader` with those types\n /// substituted. Otherwise, invokes `no_overlap`.\n-pub fn overlapping_impls<'tcx, F1, F2, R>(\n-    tcx: TyCtxt<'tcx>,\n+pub fn overlapping_impls<F1, F2, R>(\n+    tcx: TyCtxt<'_>,\n     impl1_def_id: DefId,\n     impl2_def_id: DefId,\n     intercrate_mode: IntercrateMode,\n@@ -247,10 +247,10 @@ pub enum OrphanCheckErr<'tcx> {\n ///\n /// 1. All type parameters in `Self` must be \"covered\" by some local type constructor.\n /// 2. Some local type must appear in `Self`.\n-pub fn orphan_check<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+pub fn orphan_check(\n+    tcx: TyCtxt<'_>,\n     impl_def_id: DefId,\n-) -> Result<(), OrphanCheckErr<'tcx>> {\n+) -> Result<(), OrphanCheckErr<'_>> {\n     debug!(\"orphan_check({:?})\", impl_def_id);\n \n     // We only except this routine to be invoked on implementations"}, {"sha": "d6cc68bcdab468c19c68a709bbcf5fb4457a47ff", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -247,7 +247,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     fn fuzzy_match_tys(&self, a: Ty<'tcx>, b: Ty<'tcx>) -> bool {\n         /// returns the fuzzy category of a given type, or None\n         /// if the type can be equated to any type.\n-        fn type_category<'tcx>(t: Ty<'tcx>) -> Option<u32> {\n+        fn type_category(t: Ty<'_>) -> Option<u32> {\n             match t.sty {\n                 ty::Bool => Some(0),\n                 ty::Char => Some(1),"}, {"sha": "37eff852abd01de8b5c485e7fcc4be4cb7c50cdc", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -702,6 +702,6 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n }\n \n-pub(super) fn is_object_safe_provider<'tcx>(tcx: TyCtxt<'tcx>, trait_def_id: DefId) -> bool {\n+pub(super) fn is_object_safe_provider(tcx: TyCtxt<'_>, trait_def_id: DefId) -> bool {\n     tcx.object_safety_violations(trait_def_id).is_empty()\n }"}, {"sha": "20acf443406908baccd56ddeec2db744e3e73d18", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -1509,8 +1509,8 @@ fn confirm_impl_candidate<'cx, 'tcx>(\n ///\n /// Based on the \"projection mode\", this lookup may in fact only examine the\n /// topmost impl. See the comments for `Reveal` for more details.\n-fn assoc_ty_def<'cx, 'tcx>(\n-    selcx: &SelectionContext<'cx, 'tcx>,\n+fn assoc_ty_def(\n+    selcx: &SelectionContext<'_, '_>,\n     impl_def_id: DefId,\n     assoc_ty_def_id: DefId,\n ) -> specialization_graph::NodeItem<ty::AssocItem> {"}, {"sha": "f0389bb037ac5b827aeb4e1e5bcc8e07f1d29d5a", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -145,8 +145,8 @@ pub fn find_associated_item<'tcx>(\n /// Specialization is determined by the sets of types to which the impls apply;\n /// `impl1` specializes `impl2` if it applies to a subset of the types `impl2` applies\n /// to.\n-pub(super) fn specializes<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+pub(super) fn specializes(\n+    tcx: TyCtxt<'_>,\n     (impl1_def_id, impl2_def_id): (DefId, DefId),\n ) -> bool {\n     debug!(\"specializes({:?}, {:?})\", impl1_def_id, impl2_def_id);\n@@ -282,10 +282,10 @@ fn fulfill_implication<'a, 'tcx>(\n }\n \n // Query provider for `specialization_graph_of`.\n-pub(super) fn specialization_graph_provider<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+pub(super) fn specialization_graph_provider(\n+    tcx: TyCtxt<'_>,\n     trait_id: DefId,\n-) -> &'tcx specialization_graph::Graph {\n+) -> &specialization_graph::Graph {\n     let mut sg = specialization_graph::Graph::new();\n \n     let mut trait_impls = tcx.all_impls(trait_id);"}, {"sha": "07d6f633143a2c29b8b99e76ca0a55ef2cd062e7", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -417,7 +417,7 @@ pub struct SupertraitDefIds<'tcx> {\n     visited: FxHashSet<DefId>,\n }\n \n-pub fn supertrait_def_ids<'tcx>(tcx: TyCtxt<'tcx>, trait_def_id: DefId) -> SupertraitDefIds<'tcx> {\n+pub fn supertrait_def_ids(tcx: TyCtxt<'_>, trait_def_id: DefId) -> SupertraitDefIds<'_> {\n     SupertraitDefIds {\n         tcx,\n         stack: vec![trait_def_id],"}, {"sha": "85153f99b191711eed055fe959d95e2aec3be28d", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -306,9 +306,9 @@ impl<'sess> OnDiskCache<'sess> {\n     }\n \n     /// Loads a diagnostic emitted during the previous compilation session.\n-    pub fn load_diagnostics<'tcx>(\n+    pub fn load_diagnostics(\n         &self,\n-        tcx: TyCtxt<'tcx>,\n+        tcx: TyCtxt<'_>,\n         dep_node_index: SerializedDepNodeIndex,\n     ) -> Vec<Diagnostic> {\n         let diagnostics: Option<EncodedDiagnostics> = self.load_indexed(\n@@ -335,9 +335,9 @@ impl<'sess> OnDiskCache<'sess> {\n \n     /// Returns the cached query result if there is something in the cache for\n     /// the given `SerializedDepNodeIndex`; otherwise returns `None`.\n-    pub fn try_load_query_result<'tcx, T>(\n+    pub fn try_load_query_result<T>(\n         &self,\n-        tcx: TyCtxt<'tcx>,\n+        tcx: TyCtxt<'_>,\n         dep_node_index: SerializedDepNodeIndex,\n     ) -> Option<T>\n     where"}, {"sha": "0c9e31e1ff28e9c7b8bd87167e13f701dfcd7900", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -1166,7 +1166,7 @@ macro_rules! define_provider_struct {\n /// then `force_from_dep_node()` should not fail for it. Otherwise, you can just\n /// add it to the \"We don't have enough information to reconstruct...\" group in\n /// the match below.\n-pub fn force_from_dep_node<'tcx>(tcx: TyCtxt<'tcx>, dep_node: &DepNode) -> bool {\n+pub fn force_from_dep_node(tcx: TyCtxt<'_>, dep_node: &DepNode) -> bool {\n     use crate::dep_graph::RecoverKey;\n \n     // We must avoid ever having to call force_from_dep_node() for a"}, {"sha": "a098cd1761236f3171d7a1872b5e7013ccf4c566", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -354,7 +354,7 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n                                          cmt: &mc::cmt_<'tcx>,\n                                          loan_region: ty::Region<'tcx>,\n                                          borrow_span: Span) {\n-        pub fn borrow_of_local_data<'tcx>(cmt: &mc::cmt_<'tcx>) -> bool {\n+        pub fn borrow_of_local_data(cmt: &mc::cmt_<'_>) -> bool {\n             match cmt.cat {\n                 // Borrows of static items is allowed\n                 Categorization::StaticItem => false,"}, {"sha": "8763a6bc066b35f1f4ba0df2b11efdbd9c902b5e", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -53,7 +53,7 @@ pub struct LoanDataFlowOperator;\n \n pub type LoanDataFlow<'tcx> = DataFlowContext<'tcx, LoanDataFlowOperator>;\n \n-pub fn check_crate<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn check_crate(tcx: TyCtxt<'_>) {\n     tcx.par_body_owners(|body_owner_def_id| {\n         tcx.ensure().borrowck(body_owner_def_id);\n     });\n@@ -73,7 +73,7 @@ pub struct AnalysisData<'tcx> {\n     pub move_data: move_data::FlowedMoveData<'tcx>,\n }\n \n-fn borrowck<'tcx>(tcx: TyCtxt<'tcx>, owner_def_id: DefId) -> &'tcx BorrowCheckResult {\n+fn borrowck(tcx: TyCtxt<'_>, owner_def_id: DefId) -> &BorrowCheckResult {\n     assert!(tcx.use_ast_borrowck() || tcx.migrate_borrowck());\n \n     debug!(\"borrowck(body_owner_def_id={:?})\", owner_def_id);"}, {"sha": "dc7014d22ec4d3d6b74b43429b52c72ee6caab5d", "filename": "src/librustc_borrowck/dataflow.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_borrowck%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_borrowck%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fdataflow.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -84,9 +84,9 @@ struct PropagationContext<'a, 'tcx, O> {\n     changed: bool,\n }\n \n-fn get_cfg_indices<'a>(id: hir::ItemLocalId,\n-                       index: &'a FxHashMap<hir::ItemLocalId, Vec<CFGIndex>>)\n-                       -> &'a [CFGIndex] {\n+fn get_cfg_indices(id: hir::ItemLocalId,\n+                   index: &FxHashMap<hir::ItemLocalId, Vec<CFGIndex>>)\n+                   -> &[CFGIndex] {\n     index.get(&id).map_or(&[], |v| &v[..])\n }\n "}, {"sha": "b135605cf02d765ab38bf780816a838c2cdcc99b", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -239,9 +239,9 @@ impl<'a> Drop for DiagnosticHandlers<'a> {\n     }\n }\n \n-unsafe extern \"C\" fn report_inline_asm<'a, 'b>(cgcx: &'a CodegenContext<LlvmCodegenBackend>,\n-                                               msg: &'b str,\n-                                               cookie: c_uint) {\n+unsafe extern \"C\" fn report_inline_asm(cgcx: &CodegenContext<LlvmCodegenBackend>,\n+                                       msg: &str,\n+                                       cookie: c_uint) {\n     cgcx.diag_emitter.inline_asm_error(cookie as u32, msg.to_owned());\n }\n "}, {"sha": "21c19e167cfbe9299570d8fd652adbdc83d626d2", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -123,8 +123,8 @@ pub fn compile_codegen_unit(tcx: TyCtxt<'tcx>, cgu_name: InternedString) {\n \n     submit_codegened_module_to_llvm(&LlvmCodegenBackend(()), tcx, module, cost);\n \n-    fn module_codegen<'tcx>(\n-        tcx: TyCtxt<'tcx>,\n+    fn module_codegen(\n+        tcx: TyCtxt<'_>,\n         cgu_name: InternedString,\n     ) -> ModuleCodegen<ModuleLlvm> {\n         let cgu = tcx.codegen_unit(cgu_name);"}, {"sha": "f67c740b777488423bcce75cc8b3ce715c99967b", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -144,7 +144,7 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         }\n     }\n \n-    fn build_sibling_block<'b>(&self, name: &'b str) -> Self {\n+    fn build_sibling_block(&self, name: &str) -> Self {\n         Builder::new_block(self.cx, self.llfn(), name)\n     }\n "}, {"sha": "e6630e18165707c33cb80ab5d9b803035af5d506", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -124,7 +124,7 @@ impl ExtraBackendMethods for LlvmCodegenBackend {\n     ) {\n         unsafe { allocator::codegen(tcx, mods, kind) }\n     }\n-    fn compile_codegen_unit<'tcx>(&self, tcx: TyCtxt<'tcx>, cgu_name: InternedString) {\n+    fn compile_codegen_unit(&self, tcx: TyCtxt<'_>, cgu_name: InternedString) {\n         base::compile_codegen_unit(tcx, cgu_name);\n     }\n     fn target_machine_factory("}, {"sha": "b64c9a60d97138d855bb04cc0b8e80a22c8119a6", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -46,10 +46,10 @@ pub fn crates_export_threshold(crate_types: &[config::CrateType]) -> SymbolExpor\n     }\n }\n \n-fn reachable_non_generics_provider<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn reachable_non_generics_provider(\n+    tcx: TyCtxt<'_>,\n     cnum: CrateNum,\n-) -> &'tcx DefIdMap<SymbolExportLevel> {\n+) -> &DefIdMap<SymbolExportLevel> {\n     assert_eq!(cnum, LOCAL_CRATE);\n \n     if !tcx.sess.opts.output_types.should_codegen() {\n@@ -157,7 +157,7 @@ fn reachable_non_generics_provider<'tcx>(\n     tcx.arena.alloc(reachable_non_generics)\n }\n \n-fn is_reachable_non_generic_provider_local<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n+fn is_reachable_non_generic_provider_local(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     let export_threshold = threshold(tcx);\n \n     if let Some(&level) = tcx.reachable_non_generics(def_id.krate).get(&def_id) {\n@@ -167,14 +167,14 @@ fn is_reachable_non_generic_provider_local<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefI\n     }\n }\n \n-fn is_reachable_non_generic_provider_extern<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n+fn is_reachable_non_generic_provider_extern(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     tcx.reachable_non_generics(def_id.krate).contains_key(&def_id)\n }\n \n-fn exported_symbols_provider_local<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn exported_symbols_provider_local(\n+    tcx: TyCtxt<'_>,\n     cnum: CrateNum,\n-) -> Arc<Vec<(ExportedSymbol<'tcx>, SymbolExportLevel)>> {\n+) -> Arc<Vec<(ExportedSymbol<'_>, SymbolExportLevel)>> {\n     assert_eq!(cnum, LOCAL_CRATE);\n \n     if !tcx.sess.opts.output_types.should_codegen() {\n@@ -273,10 +273,10 @@ fn exported_symbols_provider_local<'tcx>(\n     Arc::new(symbols)\n }\n \n-fn upstream_monomorphizations_provider<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn upstream_monomorphizations_provider(\n+    tcx: TyCtxt<'_>,\n     cnum: CrateNum,\n-) -> &'tcx DefIdMap<FxHashMap<SubstsRef<'tcx>, CrateNum>> {\n+) -> &DefIdMap<FxHashMap<SubstsRef<'_>, CrateNum>> {\n     debug_assert!(cnum == LOCAL_CRATE);\n \n     let cnums = tcx.all_crate_nums(LOCAL_CRATE);\n@@ -322,10 +322,10 @@ fn upstream_monomorphizations_provider<'tcx>(\n     tcx.arena.alloc(instances)\n }\n \n-fn upstream_monomorphizations_for_provider<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn upstream_monomorphizations_for_provider(\n+    tcx: TyCtxt<'_>,\n     def_id: DefId,\n-) -> Option<&'tcx FxHashMap<SubstsRef<'tcx>, CrateNum>> {\n+) -> Option<&FxHashMap<SubstsRef<'_>, CrateNum>> {\n     debug_assert!(!def_id.is_local());\n     tcx.upstream_monomorphizations(LOCAL_CRATE).get(&def_id)\n }"}, {"sha": "d06460fc856962bd27d5901c31d89eea643349c4", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -700,7 +700,7 @@ impl<B: ExtraBackendMethods> Drop for AbortCodegenOnDrop<B> {\n     }\n }\n \n-fn assert_and_save_dep_graph<'tcx>(tcx: TyCtxt<'tcx>) {\n+fn assert_and_save_dep_graph(tcx: TyCtxt<'_>) {\n     time(tcx.sess,\n          \"assert dep graph\",\n          || ::rustc_incremental::assert_dep_graph(tcx));"}, {"sha": "c9b1c0260e8c36e54b2821e3ac95e1de6b2854d9", "filename": "src/librustc_codegen_ssa/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Fmod.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -10,7 +10,7 @@ pub enum FunctionDebugContext<D> {\n }\n \n impl<D> FunctionDebugContext<D> {\n-    pub fn get_ref<'a>(&'a self, span: Span) -> &'a FunctionDebugContextData<D> {\n+    pub fn get_ref(&self, span: Span) -> &FunctionDebugContextData<D> {\n         match *self {\n             FunctionDebugContext::RegularContext(ref data) => data,\n             FunctionDebugContext::DebugInfoDisabled => {"}, {"sha": "2af9b448ef1eb03cc57c6733477f1b45a608750b", "filename": "src/librustc_codegen_ssa/mir/analyze.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -273,7 +273,7 @@ impl CleanupKind {\n     }\n }\n \n-pub fn cleanup_kinds<'tcx>(mir: &mir::Body<'tcx>) -> IndexVec<mir::BasicBlock, CleanupKind> {\n+pub fn cleanup_kinds(mir: &mir::Body<'_>) -> IndexVec<mir::BasicBlock, CleanupKind> {\n     fn discover_masters<'tcx>(result: &mut IndexVec<mir::BasicBlock, CleanupKind>,\n                               mir: &mir::Body<'tcx>) {\n         for (bb, data) in mir.basic_blocks().iter_enumerated() {"}, {"sha": "9d5aaa7655db88161ee2994755cfa1d071419b4b", "filename": "src/librustc_codegen_ssa/traits/backend.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -44,7 +44,7 @@ pub trait ExtraBackendMethods: CodegenBackend + WriteBackendMethods + Sized + Se\n         mods: &mut Self::Module,\n         kind: AllocatorKind,\n     );\n-    fn compile_codegen_unit<'tcx>(&self, tcx: TyCtxt<'tcx>, cgu_name: InternedString);\n+    fn compile_codegen_unit(&self, tcx: TyCtxt<'_>, cgu_name: InternedString);\n     // If find_features is true this won't access `sess.crate_types` by assuming\n     // that `is_pie_binary` is false. When we discover LLVM target features\n     // `sess.crate_types` is uninitialized so we cannot access it."}, {"sha": "3a144f0b0e0aa0a879bb5b69188abc4700bdc0fb", "filename": "src/librustc_codegen_ssa/traits/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbuilder.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -36,7 +36,7 @@ pub trait BuilderMethods<'a, 'tcx>:\n {\n     fn new_block<'b>(cx: &'a Self::CodegenCx, llfn: Self::Value, name: &'b str) -> Self;\n     fn with_cx(cx: &'a Self::CodegenCx) -> Self;\n-    fn build_sibling_block<'b>(&self, name: &'b str) -> Self;\n+    fn build_sibling_block(&self, name: &str) -> Self;\n     fn cx(&self) -> &Self::CodegenCx;\n     fn llbb(&self) -> Self::BasicBlock;\n "}, {"sha": "7ab29c5c4c3d024bc759a8bbc438adf49ae8bed3", "filename": "src/librustc_codegen_utils/symbol_names_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_codegen_utils%2Fsymbol_names_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_codegen_utils%2Fsymbol_names_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names_test.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -11,7 +11,7 @@ use syntax::symbol::{Symbol, sym};\n const SYMBOL_NAME: Symbol = sym::rustc_symbol_name;\n const DEF_PATH: Symbol = sym::rustc_def_path;\n \n-pub fn report_symbol_names<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn report_symbol_names(tcx: TyCtxt<'_>) {\n     // if the `rustc_attrs` feature is not enabled, then the\n     // attributes we are interested in cannot be present anyway, so\n     // skip the walk."}, {"sha": "1eb28bccbe382cd4663e853d3aaf62b959849da2", "filename": "src/librustc_data_structures/bit_set.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_data_structures%2Fbit_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_data_structures%2Fbit_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fbit_set.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -168,7 +168,7 @@ impl<T: Idx> BitSet<T> {\n \n     /// Iterates over the indices of set bits in a sorted order.\n     #[inline]\n-    pub fn iter<'a>(&'a self) -> BitIter<'a, T> {\n+    pub fn iter(&self) -> BitIter<'_, T> {\n         BitIter {\n             cur: None,\n             iter: self.words.iter().enumerate(),\n@@ -849,7 +849,7 @@ impl<R: Idx, C: Idx> BitMatrix<R, C> {\n \n     /// Iterates through all the columns set to true in a given row of\n     /// the matrix.\n-    pub fn iter<'a>(&'a self, row: R) -> BitIter<'a, C> {\n+    pub fn iter(&self, row: R) -> BitIter<'_, C> {\n         assert!(row.index() < self.num_rows);\n         let (start, end) = self.range(row);\n         BitIter {"}, {"sha": "3bea965ef30411ce3dff6852b0101033a837434b", "filename": "src/librustc_data_structures/fingerprint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_data_structures%2Ffingerprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_data_structures%2Ffingerprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Ffingerprint.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -58,7 +58,7 @@ impl Fingerprint {\n         Ok(())\n     }\n \n-    pub fn decode_opaque<'a>(decoder: &mut Decoder<'a>) -> Result<Fingerprint, String> {\n+    pub fn decode_opaque(decoder: &mut Decoder<'_>) -> Result<Fingerprint, String> {\n         let mut bytes = [0; 16];\n \n         decoder.read_raw_bytes(&mut bytes)?;"}, {"sha": "d2699004c81d8f9952d9ebd65952142d2ee39d73", "filename": "src/librustc_data_structures/graph/implementation/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_data_structures%2Fgraph%2Fimplementation%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_data_structures%2Fgraph%2Fimplementation%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Fimplementation%2Fmod.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -247,11 +247,11 @@ impl<N: Debug, E: Debug> Graph<N, E> {\n         self.incoming_edges(target).sources()\n     }\n \n-    pub fn depth_traverse<'a>(\n-        &'a self,\n+    pub fn depth_traverse(\n+        &self,\n         start: NodeIndex,\n         direction: Direction,\n-    ) -> DepthFirstTraversal<'a, N, E> {\n+    ) -> DepthFirstTraversal<'_, N, E> {\n         DepthFirstTraversal::with_start_node(self, start, direction)\n     }\n "}, {"sha": "e59085a9e3a95e3ea8fd8a7eb2cbe830e410aed7", "filename": "src/librustc_data_structures/graph/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_data_structures%2Fgraph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_data_structures%2Fgraph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Fmod.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -26,10 +26,10 @@ pub trait WithSuccessors: DirectedGraph\n where\n     Self: for<'graph> GraphSuccessors<'graph, Item = <Self as DirectedGraph>::Node>,\n {\n-    fn successors<'graph>(\n-        &'graph self,\n+    fn successors(\n+        &self,\n         node: Self::Node,\n-    ) -> <Self as GraphSuccessors<'graph>>::Iter;\n+    ) -> <Self as GraphSuccessors<'_>>::Iter;\n \n     fn depth_first_search(&self, from: Self::Node) -> iterate::DepthFirstSearch<'_, Self>\n     where\n@@ -48,10 +48,10 @@ pub trait WithPredecessors: DirectedGraph\n where\n     Self: for<'graph> GraphPredecessors<'graph, Item = <Self as DirectedGraph>::Node>,\n {\n-    fn predecessors<'graph>(\n-        &'graph self,\n+    fn predecessors(\n+        &self,\n         node: Self::Node,\n-    ) -> <Self as GraphPredecessors<'graph>>::Iter;\n+    ) -> <Self as GraphPredecessors<'_>>::Iter;\n }\n \n pub trait GraphPredecessors<'graph> {"}, {"sha": "9442bb3cdec3b8a11cf73122535d98c569a7f011", "filename": "src/librustc_data_structures/graph/reference.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_data_structures%2Fgraph%2Freference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_data_structures%2Fgraph%2Freference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Freference.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -17,15 +17,15 @@ impl<'graph, G: WithStartNode> WithStartNode for &'graph G {\n }\n \n impl<'graph, G: WithSuccessors> WithSuccessors for &'graph G {\n-    fn successors<'iter>(&'iter self, node: Self::Node) -> <Self as GraphSuccessors<'iter>>::Iter {\n+    fn successors(&self, node: Self::Node) -> <Self as GraphSuccessors<'_>>::Iter {\n         (**self).successors(node)\n     }\n }\n \n impl<'graph, G: WithPredecessors> WithPredecessors for &'graph G {\n-    fn predecessors<'iter>(&'iter self,\n-                           node: Self::Node)\n-                           -> <Self as GraphPredecessors<'iter>>::Iter {\n+    fn predecessors(&self,\n+                    node: Self::Node)\n+                    -> <Self as GraphPredecessors<'_>>::Iter {\n         (**self).predecessors(node)\n     }\n }"}, {"sha": "bc142144e930f24e8790df0d40e4b13dc1c8fff3", "filename": "src/librustc_data_structures/graph/test.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_data_structures%2Fgraph%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_data_structures%2Fgraph%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Ftest.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -51,15 +51,15 @@ impl WithNumNodes for TestGraph {\n }\n \n impl WithPredecessors for TestGraph {\n-    fn predecessors<'graph>(&'graph self,\n-                            node: usize)\n-                            -> <Self as GraphPredecessors<'graph>>::Iter {\n+    fn predecessors(&self,\n+                    node: usize)\n+                    -> <Self as GraphPredecessors<'_>>::Iter {\n         self.predecessors[&node].iter().cloned()\n     }\n }\n \n impl WithSuccessors for TestGraph {\n-    fn successors<'graph>(&'graph self, node: usize) -> <Self as GraphSuccessors<'graph>>::Iter {\n+    fn successors(&self, node: usize) -> <Self as GraphSuccessors<'_>>::Iter {\n         self.successors[&node].iter().cloned()\n     }\n }"}, {"sha": "ff0c4ff548b71eab6b23b93546bbe6eaedb0d1bb", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -188,7 +188,7 @@ impl PpSourceMode {\n             _ => panic!(\"Should use call_with_pp_support_hir\"),\n         }\n     }\n-    fn call_with_pp_support_hir<'tcx, A, F>(&self, tcx: TyCtxt<'tcx>, f: F) -> A\n+    fn call_with_pp_support_hir<A, F>(&self, tcx: TyCtxt<'_>, f: F) -> A\n     where\n         F: FnOnce(&dyn HirPrinterSupport<'_>, &hir::Crate) -> A,\n     {\n@@ -228,7 +228,7 @@ impl PpSourceMode {\n trait PrinterSupport: pprust::PpAnn {\n     /// Provides a uniform interface for re-extracting a reference to a\n     /// `Session` from a value that now owns it.\n-    fn sess<'a>(&'a self) -> &'a Session;\n+    fn sess(&self) -> &Session;\n \n     /// Produces the pretty-print annotation object.\n     ///\n@@ -240,7 +240,7 @@ trait PrinterSupport: pprust::PpAnn {\n trait HirPrinterSupport<'hir>: pprust_hir::PpAnn {\n     /// Provides a uniform interface for re-extracting a reference to a\n     /// `Session` from a value that now owns it.\n-    fn sess<'a>(&'a self) -> &'a Session;\n+    fn sess(&self) -> &Session;\n \n     /// Provides a uniform interface for re-extracting a reference to an\n     /// `hir_map::Map` from a value that now owns it.\n@@ -272,7 +272,7 @@ struct NoAnn<'hir> {\n }\n \n impl<'hir> PrinterSupport for NoAnn<'hir> {\n-    fn sess<'a>(&'a self) -> &'a Session {\n+    fn sess(&self) -> &Session {\n         self.sess\n     }\n \n@@ -282,7 +282,7 @@ impl<'hir> PrinterSupport for NoAnn<'hir> {\n }\n \n impl<'hir> HirPrinterSupport<'hir> for NoAnn<'hir> {\n-    fn sess<'a>(&'a self) -> &'a Session {\n+    fn sess(&self) -> &Session {\n         self.sess\n     }\n \n@@ -313,7 +313,7 @@ struct IdentifiedAnnotation<'hir> {\n }\n \n impl<'hir> PrinterSupport for IdentifiedAnnotation<'hir> {\n-    fn sess<'a>(&'a self) -> &'a Session {\n+    fn sess(&self) -> &Session {\n         self.sess\n     }\n \n@@ -360,7 +360,7 @@ impl<'hir> pprust::PpAnn for IdentifiedAnnotation<'hir> {\n }\n \n impl<'hir> HirPrinterSupport<'hir> for IdentifiedAnnotation<'hir> {\n-    fn sess<'a>(&'a self) -> &'a Session {\n+    fn sess(&self) -> &Session {\n         self.sess\n     }\n \n@@ -458,7 +458,7 @@ struct TypedAnnotation<'a, 'tcx> {\n }\n \n impl<'b, 'tcx> HirPrinterSupport<'tcx> for TypedAnnotation<'b, 'tcx> {\n-    fn sess<'a>(&'a self) -> &'a Session {\n+    fn sess(&self) -> &Session {\n         &self.tcx.sess\n     }\n \n@@ -866,8 +866,8 @@ pub fn print_after_hir_lowering<'tcx>(\n // analysis is performed. However, we want to call `phase_3_run_analysis_passes`\n // with a different callback than the standard driver, so that isn't easy.\n // Instead, we call that function ourselves.\n-fn print_with_analysis<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn print_with_analysis(\n+    tcx: TyCtxt<'_>,\n     ppm: PpMode,\n     uii: Option<UserIdentifiedItem>,\n     ofile: Option<&Path>,"}, {"sha": "83a0fb486fd9a34c728910a571f74c00b5ea790d", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -1635,7 +1635,7 @@ impl Destination {\n         }\n     }\n \n-    fn writable<'a>(&'a mut self) -> WritableDst<'a> {\n+    fn writable(&mut self) -> WritableDst<'_> {\n         match *self {\n             Destination::Terminal(ref mut t) => WritableDst::Terminal(t),\n             Destination::Buffered(ref mut t) => {"}, {"sha": "1ffee1cdf691f0be08c3fa835c2049a8eebc9696", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 42, "deletions": 42, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -438,26 +438,26 @@ impl Handler {\n         self.err_count.store(0, SeqCst);\n     }\n \n-    pub fn struct_dummy<'a>(&'a self) -> DiagnosticBuilder<'a> {\n+    pub fn struct_dummy(&self) -> DiagnosticBuilder<'_> {\n         DiagnosticBuilder::new(self, Level::Cancelled, \"\")\n     }\n \n-    pub fn struct_span_warn<'a, S: Into<MultiSpan>>(&'a self,\n-                                                    sp: S,\n-                                                    msg: &str)\n-                                                    -> DiagnosticBuilder<'a> {\n+    pub fn struct_span_warn<S: Into<MultiSpan>>(&self,\n+                                                sp: S,\n+                                                msg: &str)\n+                                                -> DiagnosticBuilder<'_> {\n         let mut result = DiagnosticBuilder::new(self, Level::Warning, msg);\n         result.set_span(sp);\n         if !self.flags.can_emit_warnings {\n             result.cancel();\n         }\n         result\n     }\n-    pub fn struct_span_warn_with_code<'a, S: Into<MultiSpan>>(&'a self,\n-                                                              sp: S,\n-                                                              msg: &str,\n-                                                              code: DiagnosticId)\n-                                                              -> DiagnosticBuilder<'a> {\n+    pub fn struct_span_warn_with_code<S: Into<MultiSpan>>(&self,\n+                                                          sp: S,\n+                                                          msg: &str,\n+                                                          code: DiagnosticId)\n+                                                          -> DiagnosticBuilder<'_> {\n         let mut result = DiagnosticBuilder::new(self, Level::Warning, msg);\n         result.set_span(sp);\n         result.code(code);\n@@ -466,63 +466,63 @@ impl Handler {\n         }\n         result\n     }\n-    pub fn struct_warn<'a>(&'a self, msg: &str) -> DiagnosticBuilder<'a> {\n+    pub fn struct_warn(&self, msg: &str) -> DiagnosticBuilder<'_> {\n         let mut result = DiagnosticBuilder::new(self, Level::Warning, msg);\n         if !self.flags.can_emit_warnings {\n             result.cancel();\n         }\n         result\n     }\n-    pub fn struct_span_err<'a, S: Into<MultiSpan>>(&'a self,\n-                                                   sp: S,\n-                                                   msg: &str)\n-                                                   -> DiagnosticBuilder<'a> {\n+    pub fn struct_span_err<S: Into<MultiSpan>>(&self,\n+                                               sp: S,\n+                                               msg: &str)\n+                                               -> DiagnosticBuilder<'_> {\n         let mut result = DiagnosticBuilder::new(self, Level::Error, msg);\n         result.set_span(sp);\n         result\n     }\n-    pub fn struct_span_err_with_code<'a, S: Into<MultiSpan>>(&'a self,\n-                                                             sp: S,\n-                                                             msg: &str,\n-                                                             code: DiagnosticId)\n-                                                             -> DiagnosticBuilder<'a> {\n+    pub fn struct_span_err_with_code<S: Into<MultiSpan>>(&self,\n+                                                         sp: S,\n+                                                         msg: &str,\n+                                                         code: DiagnosticId)\n+                                                         -> DiagnosticBuilder<'_> {\n         let mut result = DiagnosticBuilder::new(self, Level::Error, msg);\n         result.set_span(sp);\n         result.code(code);\n         result\n     }\n     // FIXME: This method should be removed (every error should have an associated error code).\n-    pub fn struct_err<'a>(&'a self, msg: &str) -> DiagnosticBuilder<'a> {\n+    pub fn struct_err(&self, msg: &str) -> DiagnosticBuilder<'_> {\n         DiagnosticBuilder::new(self, Level::Error, msg)\n     }\n-    pub fn struct_err_with_code<'a>(\n-        &'a self,\n+    pub fn struct_err_with_code(\n+        &self,\n         msg: &str,\n         code: DiagnosticId,\n-    ) -> DiagnosticBuilder<'a> {\n+    ) -> DiagnosticBuilder<'_> {\n         let mut result = DiagnosticBuilder::new(self, Level::Error, msg);\n         result.code(code);\n         result\n     }\n-    pub fn struct_span_fatal<'a, S: Into<MultiSpan>>(&'a self,\n-                                                     sp: S,\n-                                                     msg: &str)\n-                                                     -> DiagnosticBuilder<'a> {\n+    pub fn struct_span_fatal<S: Into<MultiSpan>>(&self,\n+                                                 sp: S,\n+                                                 msg: &str)\n+                                                 -> DiagnosticBuilder<'_> {\n         let mut result = DiagnosticBuilder::new(self, Level::Fatal, msg);\n         result.set_span(sp);\n         result\n     }\n-    pub fn struct_span_fatal_with_code<'a, S: Into<MultiSpan>>(&'a self,\n-                                                               sp: S,\n-                                                               msg: &str,\n-                                                               code: DiagnosticId)\n-                                                               -> DiagnosticBuilder<'a> {\n+    pub fn struct_span_fatal_with_code<S: Into<MultiSpan>>(&self,\n+                                                           sp: S,\n+                                                           msg: &str,\n+                                                           code: DiagnosticId)\n+                                                           -> DiagnosticBuilder<'_> {\n         let mut result = DiagnosticBuilder::new(self, Level::Fatal, msg);\n         result.set_span(sp);\n         result.code(code);\n         result\n     }\n-    pub fn struct_fatal<'a>(&'a self, msg: &str) -> DiagnosticBuilder<'a> {\n+    pub fn struct_fatal(&self, msg: &str) -> DiagnosticBuilder<'_> {\n         DiagnosticBuilder::new(self, Level::Fatal, msg)\n     }\n \n@@ -563,10 +563,10 @@ impl Handler {\n     pub fn span_err<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n         self.emit(&sp.into(), msg, Error);\n     }\n-    pub fn mut_span_err<'a, S: Into<MultiSpan>>(&'a self,\n-                                                sp: S,\n-                                                msg: &str)\n-                                                -> DiagnosticBuilder<'a> {\n+    pub fn mut_span_err<S: Into<MultiSpan>>(&self,\n+                                            sp: S,\n+                                            msg: &str)\n+                                            -> DiagnosticBuilder<'_> {\n         let mut result = DiagnosticBuilder::new(self, Level::Error, msg);\n         result.set_span(sp);\n         result\n@@ -605,10 +605,10 @@ impl Handler {\n     pub fn span_note_without_error<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n         self.emit(&sp.into(), msg, Note);\n     }\n-    pub fn span_note_diag<'a>(&'a self,\n-                              sp: Span,\n-                              msg: &str)\n-                              -> DiagnosticBuilder<'a> {\n+    pub fn span_note_diag(&self,\n+                          sp: Span,\n+                          msg: &str)\n+                          -> DiagnosticBuilder<'_> {\n         let mut db = DiagnosticBuilder::new(self, Note, msg);\n         db.set_span(sp);\n         db"}, {"sha": "38dc6edaf6325e8225514cfa1e19cffca77e6217", "filename": "src/librustc_incremental/assert_dep_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_dep_graph.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -51,7 +51,7 @@ use std::io::Write;\n use syntax::ast;\n use syntax_pos::Span;\n \n-pub fn assert_dep_graph<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn assert_dep_graph(tcx: TyCtxt<'_>) {\n     tcx.dep_graph.with_ignore(|| {\n         if tcx.sess.opts.debugging_opts.dump_dep_graph {\n             dump_graph(tcx);"}, {"sha": "046fdc72270dbb5cb48568b760189846c602e169", "filename": "src/librustc_incremental/assert_module_sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_incremental%2Fassert_module_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_incremental%2Fassert_module_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_module_sources.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -35,7 +35,7 @@ const MODULE: Symbol = sym::module;\n const CFG: Symbol = sym::cfg;\n const KIND: Symbol = sym::kind;\n \n-pub fn assert_module_sources<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn assert_module_sources(tcx: TyCtxt<'_>) {\n     tcx.dep_graph.with_ignore(|| {\n         if tcx.sess.opts.incremental.is_none() {\n             return;"}, {"sha": "1d83aa112a8371f7cad7279431d3afac39173bb3", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -206,7 +206,7 @@ impl Assertion {\n     }\n }\n \n-pub fn check_dirty_clean_annotations<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn check_dirty_clean_annotations(tcx: TyCtxt<'_>) {\n     // can't add `#[rustc_dirty]` etc without opting in to this feature\n     if !tcx.features().rustc_attrs {\n         return;"}, {"sha": "90aefb0f32416f8bf56358ba695fb78df55ddb41", "filename": "src/librustc_incremental/persist/load.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fload.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -15,7 +15,7 @@ use super::fs::*;\n use super::file_format;\n use super::work_product;\n \n-pub fn dep_graph_tcx_init<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn dep_graph_tcx_init(tcx: TyCtxt<'_>) {\n     if !tcx.dep_graph.is_fully_enabled() {\n         return\n     }\n@@ -192,7 +192,7 @@ pub fn load_dep_graph(sess: &Session) -> DepGraphFuture {\n     }))\n }\n \n-pub fn load_query_result_cache<'sess>(sess: &'sess Session) -> OnDiskCache<'sess> {\n+pub fn load_query_result_cache(sess: &Session) -> OnDiskCache<'_> {\n     if sess.opts.incremental.is_none() ||\n        !sess.opts.debugging_opts.incremental_queries {\n         return OnDiskCache::new_empty(sess.source_map());"}, {"sha": "13e2c5d1c574d6aaccf819798681b8ed19638f89", "filename": "src/librustc_incremental/persist/save.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -15,7 +15,7 @@ use super::dirty_clean;\n use super::file_format;\n use super::work_product;\n \n-pub fn save_dep_graph<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn save_dep_graph(tcx: TyCtxt<'_>) {\n     debug!(\"save_dep_graph()\");\n     tcx.dep_graph.with_ignore(|| {\n         let sess = tcx.sess;"}, {"sha": "d698728198130033bd1028f6ba4bb514a7612269", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -878,7 +878,7 @@ pub fn create_global_ctxt(\n \n /// Runs the resolution, type-checking, region checking and other\n /// miscellaneous analysis passes on the crate.\n-fn analysis<'tcx>(tcx: TyCtxt<'tcx>, cnum: CrateNum) -> Result<()> {\n+fn analysis(tcx: TyCtxt<'_>, cnum: CrateNum) -> Result<()> {\n     assert_eq!(cnum, LOCAL_CRATE);\n \n     let sess = tcx.sess;\n@@ -995,8 +995,8 @@ fn analysis<'tcx>(tcx: TyCtxt<'tcx>, cnum: CrateNum) -> Result<()> {\n     Ok(())\n }\n \n-fn encode_and_write_metadata<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn encode_and_write_metadata(\n+    tcx: TyCtxt<'_>,\n     outputs: &OutputFilenames,\n ) -> (middle::cstore::EncodedMetadata, bool) {\n     #[derive(PartialEq, Eq, PartialOrd, Ord)]"}, {"sha": "d888c9e57d326e03852fcca0f8929c2ce47c848c", "filename": "src/librustc_interface/proc_macro_decls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_interface%2Fproc_macro_decls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_interface%2Fproc_macro_decls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fproc_macro_decls.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -6,11 +6,11 @@ use rustc::ty::query::Providers;\n use syntax::attr;\n use syntax::symbol::sym;\n \n-pub fn find<'tcx>(tcx: TyCtxt<'tcx>) -> Option<DefId> {\n+pub fn find(tcx: TyCtxt<'_>) -> Option<DefId> {\n     tcx.proc_macro_decls_static(LOCAL_CRATE)\n }\n \n-fn proc_macro_decls_static<'tcx>(tcx: TyCtxt<'tcx>, cnum: CrateNum) -> Option<DefId> {\n+fn proc_macro_decls_static(tcx: TyCtxt<'_>, cnum: CrateNum) -> Option<DefId> {\n     assert_eq!(cnum, LOCAL_CRATE);\n \n     let mut finder = Finder { decls: None };"}, {"sha": "4c6ceb14ca42a8fa0ec4b25a14788c68e584ddd9", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -74,7 +74,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     };\n }\n \n-fn lint_mod<'tcx>(tcx: TyCtxt<'tcx>, module_def_id: DefId) {\n+fn lint_mod(tcx: TyCtxt<'_>, module_def_id: DefId) {\n     lint::late_lint_mod(tcx, module_def_id, BuiltinCombinedModuleLateLintPass::new());\n }\n "}, {"sha": "914084d7e9ece4f489ef6dc9ee62a71c8a201b4e", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -250,7 +250,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     exported_symbols => { Arc::new(cdata.exported_symbols(tcx)) }\n }\n \n-pub fn provide<'tcx>(providers: &mut Providers<'tcx>) {\n+pub fn provide(providers: &mut Providers<'_>) {\n     // FIXME(#44234) - almost all of these queries have no sub-queries and\n     // therefore no actual inputs, they're just reading tables calculated in\n     // resolve! Does this work? Unsure! That's what the issue is about\n@@ -550,7 +550,7 @@ impl CrateStore for cstore::CStore {\n         self.do_postorder_cnums_untracked()\n     }\n \n-    fn encode_metadata<'tcx>(&self, tcx: TyCtxt<'tcx>) -> EncodedMetadata {\n+    fn encode_metadata(&self, tcx: TyCtxt<'_>) -> EncodedMetadata {\n         encoder::encode_metadata(tcx)\n     }\n "}, {"sha": "73c20ccad5abff6cbf9fcd98fd2c957c2e3d033f", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -1863,7 +1863,7 @@ impl<'tcx, 'v> ItemLikeVisitor<'v> for ImplVisitor<'tcx> {\n // will allow us to slice the metadata to the precise length that we just\n // generated regardless of trailing bytes that end up in it.\n \n-pub fn encode_metadata<'tcx>(tcx: TyCtxt<'tcx>) -> EncodedMetadata {\n+pub fn encode_metadata(tcx: TyCtxt<'_>) -> EncodedMetadata {\n     let mut encoder = opaque::Encoder::new(vec![]);\n     encoder.emit_raw_bytes(METADATA_HEADER);\n \n@@ -1905,7 +1905,7 @@ pub fn encode_metadata<'tcx>(tcx: TyCtxt<'tcx>) -> EncodedMetadata {\n     EncodedMetadata { raw_data: result }\n }\n \n-pub fn get_repr_options<'tcx>(tcx: TyCtxt<'tcx>, did: DefId) -> ReprOptions {\n+pub fn get_repr_options(tcx: TyCtxt<'_>, did: DefId) -> ReprOptions {\n     let ty = tcx.type_of(did);\n     match ty.sty {\n         ty::Adt(ref def, _) => return def.repr,"}, {"sha": "b1f4dfffc7898db33a3dc1450c476610bbd93c59", "filename": "src/librustc_metadata/foreign_modules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_metadata%2Fforeign_modules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_metadata%2Fforeign_modules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fforeign_modules.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -3,7 +3,7 @@ use rustc::hir;\n use rustc::middle::cstore::ForeignModule;\n use rustc::ty::TyCtxt;\n \n-pub fn collect<'tcx>(tcx: TyCtxt<'tcx>) -> Vec<ForeignModule> {\n+pub fn collect(tcx: TyCtxt<'_>) -> Vec<ForeignModule> {\n     let mut collector = Collector {\n         tcx,\n         modules: Vec::new(),"}, {"sha": "728fd004fcb693a2ce8b71b88b6746a9bcb65212", "filename": "src/librustc_metadata/link_args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_metadata%2Flink_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_metadata%2Flink_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flink_args.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -4,7 +4,7 @@ use rustc::ty::TyCtxt;\n use rustc_target::spec::abi::Abi;\n use syntax::symbol::sym;\n \n-pub fn collect<'tcx>(tcx: TyCtxt<'tcx>) -> Vec<String> {\n+pub fn collect(tcx: TyCtxt<'_>) -> Vec<String> {\n     let mut collector = Collector {\n         args: Vec::new(),\n     };"}, {"sha": "4a01d0e559af411a08bb62e8db33faf68518792b", "filename": "src/librustc_metadata/native_libs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_metadata%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_metadata%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fnative_libs.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -11,7 +11,7 @@ use syntax::feature_gate::{self, GateIssue};\n use syntax::symbol::{Symbol, sym};\n use syntax::{span_err, struct_span_err};\n \n-pub fn collect<'tcx>(tcx: TyCtxt<'tcx>) -> Vec<NativeLibrary> {\n+pub fn collect(tcx: TyCtxt<'_>) -> Vec<NativeLibrary> {\n     let mut collector = Collector {\n         tcx,\n         libs: Vec::new(),"}, {"sha": "0072fcb22f13e1cd5e1981cbb3f59968c47a6adb", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -87,7 +87,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     };\n }\n \n-fn mir_borrowck<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> BorrowCheckResult<'tcx> {\n+fn mir_borrowck(tcx: TyCtxt<'_>, def_id: DefId) -> BorrowCheckResult<'_> {\n     let input_body = tcx.mir_validated(def_id);\n     debug!(\"run query mir_borrowck: {}\", tcx.def_path_str(def_id));\n "}, {"sha": "b5630251e5830942b194ebc3edcc61c8b3d71a8a", "filename": "src/librustc_mir/borrow_check/nll/constraints/graph.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fgraph.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -234,10 +234,10 @@ impl<'s, D: ConstraintGraphDirecton> graph::WithNumNodes for RegionGraph<'s, D>\n }\n \n impl<'s, D: ConstraintGraphDirecton> graph::WithSuccessors for RegionGraph<'s, D> {\n-    fn successors<'graph>(\n-        &'graph self,\n+    fn successors(\n+        &self,\n         node: Self::Node,\n-    ) -> <Self as graph::GraphSuccessors<'graph>>::Iter {\n+    ) -> <Self as graph::GraphSuccessors<'_>>::Iter {\n         self.outgoing_regions(node)\n     }\n }"}, {"sha": "6f9f5707935baa75ef782903d642681a23279e41", "filename": "src/librustc_mir/borrow_check/nll/region_infer/values.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -162,7 +162,7 @@ impl<N: Idx> LivenessValues<N> {\n     }\n \n     /// Iterate through each region that has a value in this set.\n-    crate fn rows<'a>(&'a self) -> impl Iterator<Item = N> {\n+    crate fn rows(&self) -> impl Iterator<Item=N> {\n         self.points.rows()\n     }\n "}, {"sha": "538ac6881d90ab8d98b8f72c19cebaa4cc2bebb3", "filename": "src/librustc_mir/borrow_check/path_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -130,7 +130,7 @@ pub(super) fn is_active<'tcx>(\n \n /// Determines if a given borrow is borrowing local data\n /// This is called for all Yield statements on movable generators\n-pub(super) fn borrow_of_local_data<'tcx>(place: &Place<'tcx>) -> bool {\n+pub(super) fn borrow_of_local_data(place: &Place<'_>) -> bool {\n     place.iterate(|place_base, place_projection| {\n         match place_base {\n             PlaceBase::Static(..) => return false,"}, {"sha": "f679a00035d76ebfbb37b4ad30975958bf14c837", "filename": "src/librustc_mir/build/expr/category.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fcategory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fcategory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fcategory.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -31,7 +31,7 @@ pub enum RvalueFunc {\n /// Determines the category for a given expression. Note that scope\n /// and paren expressions have no category.\n impl Category {\n-    pub fn of<'tcx>(ek: &ExprKind<'tcx>) -> Option<Category> {\n+    pub fn of(ek: &ExprKind<'_>) -> Option<Category> {\n         match *ek {\n             ExprKind::Scope { .. } => None,\n "}, {"sha": "528dfbef6946a3d5546582bb77da17ae7cd8546e", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -826,6 +826,6 @@ impl Test<'_> {\n     }\n }\n \n-fn is_switch_ty<'tcx>(ty: Ty<'tcx>) -> bool {\n+fn is_switch_ty(ty: Ty<'_>) -> bool {\n     ty.is_integral() || ty.is_char() || ty.is_bool()\n }"}, {"sha": "80a035d8287f438222ac63f21eb1d631e86c6921", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -22,7 +22,7 @@ use syntax_pos::Span;\n use super::lints;\n \n /// Construct the MIR for a given `DefId`.\n-pub fn mir_build<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Body<'tcx> {\n+pub fn mir_build(tcx: TyCtxt<'_>, def_id: DefId) -> Body<'_> {\n     let id = tcx.hir().as_local_hir_id(def_id).unwrap();\n \n     // Figure out what primary body this item has.\n@@ -171,11 +171,11 @@ pub fn mir_build<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Body<'tcx> {\n ///////////////////////////////////////////////////////////////////////////\n // BuildMir -- walks a crate, looking for fn items and methods to build MIR from\n \n-fn liberated_closure_env_ty<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn liberated_closure_env_ty(\n+    tcx: TyCtxt<'_>,\n     closure_expr_id: hir::HirId,\n     body_id: hir::BodyId,\n-) -> Ty<'tcx> {\n+) -> Ty<'_> {\n     let closure_ty = tcx.body_tables(body_id).node_type(closure_expr_id);\n \n     let (closure_def_id, closure_substs) = match closure_ty.sty {\n@@ -485,7 +485,7 @@ macro_rules! unpack {\n     };\n }\n \n-fn should_abort_on_panic<'tcx>(tcx: TyCtxt<'tcx>, fn_def_id: DefId, abi: Abi) -> bool {\n+fn should_abort_on_panic(tcx: TyCtxt<'_>, fn_def_id: DefId, abi: Abi) -> bool {\n     // Not callable from C, so we can safely unwind through these\n     if abi == Abi::Rust || abi == Abi::RustCall { return false; }\n "}, {"sha": "d94ebdbae24ae9f68d3a9468a431b1cdfd9f84c0", "filename": "src/librustc_mir/dataflow/impls/borrowed_locals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -92,7 +92,7 @@ struct BorrowedLocalsVisitor<'gk> {\n     trans: &'gk mut GenKillSet<Local>,\n }\n \n-fn find_local<'tcx>(place: &Place<'tcx>) -> Option<Local> {\n+fn find_local(place: &Place<'_>) -> Option<Local> {\n     place.iterate(|place_base, place_projection| {\n         for proj in place_projection {\n             if proj.elem == ProjectionElem::Deref {"}, {"sha": "d356194c0034323b0c70ddca7466f8450b0fb870", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -835,7 +835,7 @@ impl<'tcx> IntRange<'tcx> {\n     fn from_ctor(tcx: TyCtxt<'tcx>, ctor: &Constructor<'tcx>) -> Option<IntRange<'tcx>> {\n         // Floating-point ranges are permitted and we don't want\n         // to consider them when constructing integer ranges.\n-        fn is_integral<'tcx>(ty: Ty<'tcx>) -> bool {\n+        fn is_integral(ty: Ty<'_>) -> bool {\n             match ty.sty {\n                 ty::Char | ty::Int(_) | ty::Uint(_) => true,\n                 _ => false,"}, {"sha": "915ce9f20d07d161f867616de07f81cc5b6c92e4", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -26,7 +26,7 @@ use std::slice;\n \n use syntax_pos::{Span, DUMMY_SP, MultiSpan};\n \n-pub(crate) fn check_match<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) {\n+pub(crate) fn check_match(tcx: TyCtxt<'_>, def_id: DefId) {\n     let body_id = if let Some(id) = tcx.hir().as_local_hir_id(def_id) {\n         tcx.hir().body_owned_by(id)\n     } else {\n@@ -43,7 +43,7 @@ pub(crate) fn check_match<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) {\n     }.visit_body(tcx.hir().body(body_id));\n }\n \n-fn create_e0004<'a>(sess: &'a Session, sp: Span, error_message: String) -> DiagnosticBuilder<'a> {\n+fn create_e0004(sess: &Session, sp: Span, error_message: String) -> DiagnosticBuilder<'_> {\n     struct_span_err!(sess, sp, E0004, \"{}\", &error_message)\n }\n "}, {"sha": "097d76925c8eba59cbac72ab7d207d5f66e2199b", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -281,10 +281,10 @@ impl<'tcx> InliningMap<'tcx> {\n     }\n }\n \n-pub fn collect_crate_mono_items<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+pub fn collect_crate_mono_items(\n+    tcx: TyCtxt<'_>,\n     mode: MonoItemCollectionMode,\n-) -> (FxHashSet<MonoItem<'tcx>>, InliningMap<'tcx>) {\n+) -> (FxHashSet<MonoItem<'_>>, InliningMap<'_>) {\n     let roots = time(tcx.sess, \"collecting roots\", || {\n         collect_roots(tcx, mode)\n     });\n@@ -315,7 +315,7 @@ pub fn collect_crate_mono_items<'tcx>(\n \n // Find all non-generic items by walking the HIR. These items serve as roots to\n // start monomorphizing from.\n-fn collect_roots<'tcx>(tcx: TyCtxt<'tcx>, mode: MonoItemCollectionMode) -> Vec<MonoItem<'tcx>> {\n+fn collect_roots(tcx: TyCtxt<'_>, mode: MonoItemCollectionMode) -> Vec<MonoItem<'_>> {\n     debug!(\"Collecting roots\");\n     let mut roots = Vec::new();\n \n@@ -912,7 +912,7 @@ fn find_vtable_types_for_unsizing<'tcx>(\n     }\n }\n \n-fn create_fn_mono_item<'tcx>(instance: Instance<'tcx>) -> MonoItem<'tcx> {\n+fn create_fn_mono_item(instance: Instance<'_>) -> MonoItem<'_> {\n     debug!(\"create_fn_mono_item(instance={})\", instance);\n     MonoItem::Fn(instance)\n }\n@@ -1114,7 +1114,7 @@ impl RootCollector<'_, 'v> {\n     }\n }\n \n-fn item_requires_monomorphization<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n+fn item_requires_monomorphization(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     let generics = tcx.generics_of(def_id);\n     generics.requires_monomorphization(tcx)\n }\n@@ -1243,7 +1243,7 @@ fn collect_neighbours<'tcx>(\n     }\n }\n \n-fn def_id_to_string<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> String {\n+fn def_id_to_string(tcx: TyCtxt<'_>, def_id: DefId) -> String {\n     let mut output = String::new();\n     let printer = DefPathBasedNames::new(tcx, false, false);\n     printer.push_def_path(def_id, &mut output);"}, {"sha": "a934c921d9257e04893df143aae2d49b074e9d1d", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -839,10 +839,10 @@ where\n     }\n }\n \n-fn collect_and_partition_mono_items<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn collect_and_partition_mono_items(\n+    tcx: TyCtxt<'_>,\n     cnum: CrateNum,\n-) -> (Arc<DefIdSet>, Arc<Vec<Arc<CodegenUnit<'tcx>>>>) {\n+) -> (Arc<DefIdSet>, Arc<Vec<Arc<CodegenUnit<'_>>>>) {\n     assert_eq!(cnum, LOCAL_CRATE);\n \n     let collection_mode = match tcx.sess.opts.debugging_opts.print_mono_items {"}, {"sha": "32b964dbadfa92ac3dcf5e4a5d0dab9f6844db46", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -829,7 +829,7 @@ fn build_call_shim<'tcx>(\n     body\n }\n \n-pub fn build_adt_ctor<'tcx>(tcx: TyCtxt<'tcx>, ctor_id: DefId) -> &'tcx Body<'tcx> {\n+pub fn build_adt_ctor(tcx: TyCtxt<'_>, ctor_id: DefId) -> &Body<'_> {\n     debug_assert!(tcx.is_constructor(ctor_id));\n \n     let span = tcx.hir().span_if_local(ctor_id)"}, {"sha": "de5af0a46b534935102c2de6e231ad2d28fbccfe", "filename": "src/librustc_mir/transform/add_retag.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -14,8 +14,8 @@ pub struct AddRetag;\n /// after the assignment, we can be sure to obtain the same place value.\n /// (Concurrent accesses by other threads are no problem as these are anyway non-atomic\n /// copies.  Data races are UB.)\n-fn is_stable<'tcx>(\n-    place: &Place<'tcx>,\n+fn is_stable(\n+    place: &Place<'_>,\n ) -> bool {\n     use rustc::mir::Place::*;\n "}, {"sha": "9898ba897734d7f74deb56476bea127caf3506ce", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -480,11 +480,11 @@ impl<'a, 'tcx> hir::intravisit::Visitor<'tcx> for UnusedUnsafeVisitor<'a> {\n     }\n }\n \n-fn check_unused_unsafe<'a, 'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn check_unused_unsafe(\n+    tcx: TyCtxt<'_>,\n     def_id: DefId,\n     used_unsafe: &FxHashSet<hir::HirId>,\n-    unsafe_blocks: &'a mut Vec<(hir::HirId, bool)>,\n+    unsafe_blocks: &mut Vec<(hir::HirId, bool)>,\n ) {\n     let body_id =\n         tcx.hir().as_local_hir_id(def_id).and_then(|hir_id| {\n@@ -506,7 +506,7 @@ fn check_unused_unsafe<'a, 'tcx>(\n     hir::intravisit::Visitor::visit_body(&mut visitor, body);\n }\n \n-fn unsafety_check_result<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> UnsafetyCheckResult {\n+fn unsafety_check_result(tcx: TyCtxt<'_>, def_id: DefId) -> UnsafetyCheckResult {\n     debug!(\"unsafety_violations({:?})\", def_id);\n \n     // N.B., this borrow is valid because all the consumers of\n@@ -545,7 +545,7 @@ fn unsafety_check_result<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> UnsafetyChec\n     }\n }\n \n-fn unsafe_derive_on_repr_packed<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) {\n+fn unsafe_derive_on_repr_packed(tcx: TyCtxt<'_>, def_id: DefId) {\n     let lint_hir_id = tcx.hir().as_local_hir_id(def_id).unwrap_or_else(||\n         bug!(\"checking unsafety for non-local def id {:?}\", def_id));\n \n@@ -602,7 +602,7 @@ fn report_unused_unsafe(tcx: TyCtxt<'_>, used_unsafe: &FxHashSet<hir::HirId>, id\n     db.emit();\n }\n \n-fn builtin_derive_def_id<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Option<DefId> {\n+fn builtin_derive_def_id(tcx: TyCtxt<'_>, def_id: DefId) -> Option<DefId> {\n     debug!(\"builtin_derive_def_id({:?})\", def_id);\n     if let Some(impl_def_id) = tcx.impl_of_method(def_id) {\n         if tcx.has_attr(impl_def_id, sym::automatically_derived) {\n@@ -618,7 +618,7 @@ fn builtin_derive_def_id<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Option<DefId\n     }\n }\n \n-pub fn check_unsafety<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) {\n+pub fn check_unsafety(tcx: TyCtxt<'_>, def_id: DefId) {\n     debug!(\"check_unsafety({:?})\", def_id);\n \n     // closures are handled by their parent fn."}, {"sha": "a6fb555f20bd023cddbf7d14aaa3902d4f82148c", "filename": "src/librustc_mir/transform/dump_mir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -14,7 +14,7 @@ use crate::util as mir_util;\n pub struct Marker(pub &'static str);\n \n impl MirPass for Marker {\n-    fn name<'a>(&'a self) -> Cow<'a, str> {\n+    fn name(&self) -> Cow<'_, str> {\n         Cow::Borrowed(self.0)\n     }\n \n@@ -52,7 +52,7 @@ pub fn on_mir_pass<'tcx>(\n     }\n }\n \n-pub fn emit_mir<'tcx>(tcx: TyCtxt<'tcx>, outputs: &OutputFilenames) -> io::Result<()> {\n+pub fn emit_mir(tcx: TyCtxt<'_>, outputs: &OutputFilenames) -> io::Result<()> {\n     let path = outputs.path(OutputType::Mir);\n     let mut f = File::create(&path)?;\n     mir_util::write_mir_pretty(tcx, None, &mut f)?;"}, {"sha": "2ed3f7d5c26e28c852e4dd45a30c153c43754c20", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -1028,14 +1028,14 @@ fn create_generator_resume_function<'tcx>(\n     dump_mir(tcx, None, \"generator_resume\", &0, source, body, |_, _| Ok(()) );\n }\n \n-fn source_info<'tcx>(body: &Body<'tcx>) -> SourceInfo {\n+fn source_info(body: &Body<'_>) -> SourceInfo {\n     SourceInfo {\n         span: body.span,\n         scope: OUTERMOST_SOURCE_SCOPE,\n     }\n }\n \n-fn insert_clean_drop<'tcx>(body: &mut Body<'tcx>) -> BasicBlock {\n+fn insert_clean_drop(body: &mut Body<'_>) -> BasicBlock {\n     let return_block = insert_term_block(body, TerminatorKind::Return);\n \n     // Create a block to destroy an unresumed generators. This can only destroy upvars."}, {"sha": "7f43c4a3e89a1adee9f7cf976f1aed2afeea6bd9", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -50,13 +50,13 @@ pub(crate) fn provide(providers: &mut Providers<'_>) {\n     };\n }\n \n-fn is_mir_available<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n+fn is_mir_available(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     tcx.mir_keys(def_id.krate).contains(&def_id)\n }\n \n /// Finds the full set of `DefId`s within the current crate that have\n /// MIR associated with them.\n-fn mir_keys<'tcx>(tcx: TyCtxt<'tcx>, krate: CrateNum) -> &'tcx DefIdSet {\n+fn mir_keys(tcx: TyCtxt<'_>, krate: CrateNum) -> &DefIdSet {\n     assert_eq!(krate, LOCAL_CRATE);\n \n     let mut set = DefIdSet::default();\n@@ -94,7 +94,7 @@ fn mir_keys<'tcx>(tcx: TyCtxt<'tcx>, krate: CrateNum) -> &'tcx DefIdSet {\n     tcx.arena.alloc(set)\n }\n \n-fn mir_built<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx Steal<Body<'tcx>> {\n+fn mir_built(tcx: TyCtxt<'_>, def_id: DefId) -> &Steal<Body<'_>> {\n     let mir = build::mir_build(tcx, def_id);\n     tcx.alloc_steal_mir(mir)\n }\n@@ -137,7 +137,7 @@ pub fn default_name<T: ?Sized>() -> Cow<'static, str> {\n /// pass will be named after the type, and it will consist of a main\n /// loop that goes over each available MIR and applies `run_pass`.\n pub trait MirPass {\n-    fn name<'a>(&'a self) -> Cow<'a, str> {\n+    fn name(&self) -> Cow<'_, str> {\n         default_name::<Self>()\n     }\n \n@@ -192,7 +192,7 @@ pub fn run_passes(\n     }\n }\n \n-fn mir_const<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx Steal<Body<'tcx>> {\n+fn mir_const(tcx: TyCtxt<'_>, def_id: DefId) -> &Steal<Body<'_>> {\n     // Unsafety check uses the raw mir, so make sure it is run\n     let _ = tcx.unsafety_check_result(def_id);\n \n@@ -223,7 +223,7 @@ fn mir_validated(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx Steal<Body<'tcx>> {\n     tcx.alloc_steal_mir(body)\n }\n \n-fn optimized_mir<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx Body<'tcx> {\n+fn optimized_mir(tcx: TyCtxt<'_>, def_id: DefId) -> &Body<'_> {\n     if tcx.is_constructor(def_id) {\n         // There's no reason to run all of the MIR passes on constructors when\n         // we can just output the MIR we want directly. This also saves const"}, {"sha": "3e52d3ee9bbdff021d4d8d56ea2501bd037e1d26", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -1473,7 +1473,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     };\n }\n \n-fn mir_const_qualif<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> (u8, &'tcx BitSet<Local>) {\n+fn mir_const_qualif(tcx: TyCtxt<'_>, def_id: DefId) -> (u8, &BitSet<Local>) {\n     // N.B., this `borrow()` is guaranteed to be valid (i.e., the value\n     // cannot yet be stolen), because `mir_validated()`, which steals\n     // from `mir_const(), forces this query to execute before"}, {"sha": "2eed9d453f23363fded6deb3aa19d811e6e04cbf", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -53,7 +53,7 @@ pub fn simplify_cfg(body: &mut Body<'_>) {\n }\n \n impl MirPass for SimplifyCfg {\n-    fn name<'a>(&'a self) -> Cow<'a, str> {\n+    fn name(&self) -> Cow<'_, str> {\n         Cow::Borrowed(&self.label)\n     }\n "}, {"sha": "f39c71ef42d71559c70bc6a04a5bd008ceb3ef03", "filename": "src/librustc_mir/transform/simplify_branches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -15,7 +15,7 @@ impl SimplifyBranches {\n }\n \n impl MirPass for SimplifyBranches {\n-    fn name<'a>(&'a self) -> Cow<'a, str> {\n+    fn name(&self) -> Cow<'_, str> {\n         Cow::Borrowed(&self.label)\n     }\n "}, {"sha": "9d142d9b700b63498f26f180c88c03233be4258d", "filename": "src/librustc_mir/util/graphviz.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -8,8 +8,8 @@ use std::io::{self, Write};\n use super::pretty::dump_mir_def_ids;\n \n /// Write a graphviz DOT graph of a list of MIRs.\n-pub fn write_mir_graphviz<'tcx, W>(\n-    tcx: TyCtxt<'tcx>,\n+pub fn write_mir_graphviz<W>(\n+    tcx: TyCtxt<'_>,\n     single: Option<DefId>,\n     w: &mut W,\n ) -> io::Result<()>"}, {"sha": "b42eebc7ee3be28dfc0cd3d1cf544b7623535a1b", "filename": "src/librustc_mir/util/liveness.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fliveness.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -56,8 +56,8 @@ pub struct LivenessResult {\n \n /// Computes which local variables are live within the given function\n /// `mir`, including drops.\n-pub fn liveness_of_locals<'tcx>(\n-    body: &Body<'tcx>,\n+pub fn liveness_of_locals(\n+    body: &Body<'_>,\n ) -> LivenessResult {\n     let num_live_vars = body.local_decls.len();\n \n@@ -243,8 +243,8 @@ impl<'tcx> Visitor<'tcx> for DefsUsesVisitor\n     }\n }\n \n-fn block<'tcx>(\n-    b: &BasicBlockData<'tcx>,\n+fn block(\n+    b: &BasicBlockData<'_>,\n     locals: usize,\n ) -> DefsUses {\n     let mut visitor = DefsUsesVisitor {"}, {"sha": "fd2a5e452ce4b481d5ae2dc94b2170da0c96798b", "filename": "src/librustc_mir/util/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_mir%2Futil%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_mir%2Futil%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fmod.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -21,7 +21,7 @@ pub use self::graphviz::{graphviz_safe_def_name, write_mir_graphviz};\n pub use self::graphviz::write_node_label as write_graphviz_node_label;\n \n /// If possible, suggest replacing `ref` with `ref mut`.\n-pub fn suggest_ref_mut<'tcx>(tcx: TyCtxt<'tcx>, binding_span: Span) -> Option<(String)> {\n+pub fn suggest_ref_mut(tcx: TyCtxt<'_>, binding_span: Span) -> Option<(String)> {\n     let hi_src = tcx.sess.source_map().span_to_snippet(binding_span).unwrap();\n     if hi_src.starts_with(\"ref\")\n         && hi_src[\"ref\".len()..].starts_with(Pattern_White_Space)"}, {"sha": "e7f6abc410a32f90e945347af9089453dc77ac32", "filename": "src/librustc_passes/hir_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_passes%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_passes%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fhir_stats.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -38,7 +38,7 @@ pub fn print_hir_stats(krate: &hir::Crate) {\n     collector.print(\"HIR STATS\");\n }\n \n-pub fn print_ast_stats<'v>(krate: &'v ast::Crate, title: &str) {\n+pub fn print_ast_stats(krate: &ast::Crate, title: &str) {\n     let mut collector = StatCollector {\n         krate: None,\n         data: FxHashMap::default(),"}, {"sha": "6b1ce578240e4772646c31ef2e2ff71403d9be01", "filename": "src/librustc_passes/layout_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_passes%2Flayout_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_passes%2Flayout_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flayout_test.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -14,7 +14,7 @@ use rustc::ty::TyCtxt;\n use syntax::ast::Attribute;\n use syntax::symbol::sym;\n \n-pub fn test_layout<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn test_layout(tcx: TyCtxt<'_>) {\n     if tcx.features().rustc_attrs {\n         // if the `rustc_attrs` feature is not enabled, don't bother testing layout\n         tcx.hir()"}, {"sha": "616e6974110e680b5cec399a15de685b8024dcd1", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -45,7 +45,7 @@ struct CheckLoopVisitor<'a, 'hir> {\n     cx: Context,\n }\n \n-fn check_mod_loops<'tcx>(tcx: TyCtxt<'tcx>, module_def_id: DefId) {\n+fn check_mod_loops(tcx: TyCtxt<'_>, module_def_id: DefId) {\n     tcx.hir().visit_item_likes_in_module(module_def_id, &mut CheckLoopVisitor {\n         sess: &tcx.sess,\n         hir_map: &tcx.hir(),"}, {"sha": "e14fa07fbbfe4323fbcee04958b0ce7c1105e47c", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -39,7 +39,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     };\n }\n \n-fn const_is_rvalue_promotable_to_static<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n+fn const_is_rvalue_promotable_to_static(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     assert!(def_id.is_local());\n \n     let hir_id = tcx.hir().as_local_hir_id(def_id)\n@@ -48,7 +48,7 @@ fn const_is_rvalue_promotable_to_static<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId)\n     tcx.rvalue_promotable_map(def_id).contains(&body_id.hir_id.local_id)\n }\n \n-fn rvalue_promotable_map<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx ItemLocalSet {\n+fn rvalue_promotable_map(tcx: TyCtxt<'_>, def_id: DefId) -> &ItemLocalSet {\n     let outer_def_id = tcx.closure_base_def_id(def_id);\n     if outer_def_id != def_id {\n         return tcx.rvalue_promotable_map(outer_def_id);"}, {"sha": "816e283a104604e7c4befed74ac8a12c1b50aa84", "filename": "src/librustc_plugin/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_plugin%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_plugin%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fbuild.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -30,11 +30,11 @@ impl<'v> ItemLikeVisitor<'v> for RegistrarFinder {\n }\n \n /// Finds the function marked with `#[plugin_registrar]`, if any.\n-pub fn find_plugin_registrar<'tcx>(tcx: TyCtxt<'tcx>) -> Option<DefId> {\n+pub fn find_plugin_registrar(tcx: TyCtxt<'_>) -> Option<DefId> {\n     tcx.plugin_registrar_fn(LOCAL_CRATE)\n }\n \n-fn plugin_registrar_fn<'tcx>(tcx: TyCtxt<'tcx>, cnum: CrateNum) -> Option<DefId> {\n+fn plugin_registrar_fn(tcx: TyCtxt<'_>, cnum: CrateNum) -> Option<DefId> {\n     assert_eq!(cnum, LOCAL_CRATE);\n \n     let mut finder = RegistrarFinder { registrars: Vec::new() };"}, {"sha": "2fb65a6069372df410413e4263b38cd8a389eb52", "filename": "src/librustc_plugin/registry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_plugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_plugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fregistry.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -77,7 +77,7 @@ impl<'a> Registry<'a> {\n     ///\n     /// Returns empty slice in case the plugin was loaded\n     /// with `--extra-plugins`\n-    pub fn args<'b>(&'b self) -> &'b [ast::NestedMetaItem] {\n+    pub fn args(&self) -> &[ast::NestedMetaItem] {\n         self.args_hidden.as_ref().map(|v| &v[..]).unwrap_or(&[])\n     }\n "}, {"sha": "339021f511afdfb2c23f58b3caae13669ee2198b", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -337,7 +337,7 @@ fn item_tables<'a, 'tcx>(\n     if tcx.has_typeck_tables(def_id) { tcx.typeck_tables_of(def_id) } else { empty_tables }\n }\n \n-fn min<'tcx>(vis1: ty::Visibility, vis2: ty::Visibility, tcx: TyCtxt<'tcx>) -> ty::Visibility {\n+fn min(vis1: ty::Visibility, vis2: ty::Visibility, tcx: TyCtxt<'_>) -> ty::Visibility {\n     if vis1.is_at_least(vis2, tcx) { vis2 } else { vis1 }\n }\n \n@@ -384,14 +384,14 @@ impl<'a, 'tcx, VL: VisibilityLike> DefIdVisitor<'tcx> for FindMin<'a, 'tcx, VL>\n trait VisibilityLike: Sized {\n     const MAX: Self;\n     const SHALLOW: bool = false;\n-    fn new_min<'a, 'tcx>(find: &FindMin<'a, 'tcx, Self>, def_id: DefId) -> Self;\n+    fn new_min(find: &FindMin<'_, '_, Self>, def_id: DefId) -> Self;\n \n     // Returns an over-approximation (`skip_assoc_tys` = true) of visibility due to\n     // associated types for which we can't determine visibility precisely.\n-    fn of_impl<'a, 'tcx>(\n+    fn of_impl(\n         hir_id: hir::HirId,\n-        tcx: TyCtxt<'tcx>,\n-        access_levels: &'a AccessLevels,\n+        tcx: TyCtxt<'_>,\n+        access_levels: &AccessLevels,\n     ) -> Self {\n         let mut find = FindMin { tcx, access_levels, min: Self::MAX };\n         let def_id = tcx.hir().local_def_id_from_hir_id(hir_id);\n@@ -404,7 +404,7 @@ trait VisibilityLike: Sized {\n }\n impl VisibilityLike for ty::Visibility {\n     const MAX: Self = ty::Visibility::Public;\n-    fn new_min<'a, 'tcx>(find: &FindMin<'a, 'tcx, Self>, def_id: DefId) -> Self {\n+    fn new_min(find: &FindMin<'_, '_, Self>, def_id: DefId) -> Self {\n         min(def_id_visibility(find.tcx, def_id).0, find.min, find.tcx)\n     }\n }\n@@ -420,7 +420,7 @@ impl VisibilityLike for Option<AccessLevel> {\n     // both \"shallow\" version of its self type and \"shallow\" version of its trait if it exists\n     // (which require reaching the `DefId`s in them).\n     const SHALLOW: bool = true;\n-    fn new_min<'a, 'tcx>(find: &FindMin<'a, 'tcx, Self>, def_id: DefId) -> Self {\n+    fn new_min(find: &FindMin<'_, '_, Self>, def_id: DefId) -> Self {\n         cmp::min(if let Some(hir_id) = find.tcx.hir().as_local_hir_id(def_id) {\n             find.access_levels.map.get(&hir_id).cloned()\n         } else {\n@@ -1828,7 +1828,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     };\n }\n \n-fn check_mod_privacy<'tcx>(tcx: TyCtxt<'tcx>, module_def_id: DefId) {\n+fn check_mod_privacy(tcx: TyCtxt<'_>, module_def_id: DefId) {\n     let empty_tables = ty::TypeckTables::empty(None);\n \n     // Check privacy of names not checked in previous compilation stages.\n@@ -1855,7 +1855,7 @@ fn check_mod_privacy<'tcx>(tcx: TyCtxt<'tcx>, module_def_id: DefId) {\n     intravisit::walk_mod(&mut visitor, module, hir_id);\n }\n \n-fn privacy_access_levels<'tcx>(tcx: TyCtxt<'tcx>, krate: CrateNum) -> &'tcx AccessLevels {\n+fn privacy_access_levels(tcx: TyCtxt<'_>, krate: CrateNum) -> &AccessLevels {\n     assert_eq!(krate, LOCAL_CRATE);\n \n     // Build up a set of all exported items in the AST. This is a set of all\n@@ -1879,7 +1879,7 @@ fn privacy_access_levels<'tcx>(tcx: TyCtxt<'tcx>, krate: CrateNum) -> &'tcx Acce\n     tcx.arena.alloc(visitor.access_levels)\n }\n \n-fn check_private_in_public<'tcx>(tcx: TyCtxt<'tcx>, krate: CrateNum) {\n+fn check_private_in_public(tcx: TyCtxt<'_>, krate: CrateNum) {\n     assert_eq!(krate, LOCAL_CRATE);\n \n     let access_levels = tcx.privacy_access_levels(LOCAL_CRATE);"}, {"sha": "77a976a54f4349f84e984ad191c0ae106db40e7c", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -198,9 +198,9 @@ enum ResolutionError<'a> {\n ///\n /// This takes the error provided, combines it with the span and any additional spans inside the\n /// error and emits it.\n-fn resolve_error<'sess, 'a>(resolver: &'sess Resolver<'_>,\n-                            span: Span,\n-                            resolution_error: ResolutionError<'a>) {\n+fn resolve_error(resolver: &Resolver<'_>,\n+                 span: Span,\n+                 resolution_error: ResolutionError<'_>) {\n     resolve_struct_error(resolver, span, resolution_error).emit();\n }\n "}, {"sha": "6e8eed0f907255072a714081506e4a7aeaddecb6", "filename": "src/librustc_traits/chalk_context/program_clauses/primitive.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fprimitive.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -15,7 +15,7 @@ use crate::lowering::Lower;\n use crate::generic_types;\n use std::iter;\n \n-crate fn wf_clause_for_raw_ptr<'tcx>(tcx: TyCtxt<'tcx>, mutbl: hir::Mutability) -> Clauses<'tcx> {\n+crate fn wf_clause_for_raw_ptr(tcx: TyCtxt<'_>, mutbl: hir::Mutability) -> Clauses<'_> {\n     let ptr_ty = generic_types::raw_ptr(tcx, mutbl);\n \n     let wf_clause = ProgramClause {\n@@ -29,13 +29,13 @@ crate fn wf_clause_for_raw_ptr<'tcx>(tcx: TyCtxt<'tcx>, mutbl: hir::Mutability)\n     tcx.mk_clauses(iter::once(wf_clause))\n }\n \n-crate fn wf_clause_for_fn_ptr<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+crate fn wf_clause_for_fn_ptr(\n+    tcx: TyCtxt<'_>,\n     arity_and_output: usize,\n     variadic: bool,\n     unsafety: hir::Unsafety,\n     abi: abi::Abi,\n-) -> Clauses<'tcx> {\n+) -> Clauses<'_> {\n     let fn_ptr = generic_types::fn_ptr(tcx, arity_and_output, variadic, unsafety, abi);\n \n     let wf_clause = ProgramClause {\n@@ -50,7 +50,7 @@ crate fn wf_clause_for_fn_ptr<'tcx>(\n     tcx.mk_clauses(iter::once(wf_clause))\n }\n \n-crate fn wf_clause_for_slice<'tcx>(tcx: TyCtxt<'tcx>) -> Clauses<'tcx> {\n+crate fn wf_clause_for_slice(tcx: TyCtxt<'_>) -> Clauses<'_> {\n     let ty = generic_types::bound(tcx, 0);\n     let slice_ty = tcx.mk_slice(ty);\n \n@@ -111,7 +111,7 @@ crate fn wf_clause_for_array<'tcx>(\n     tcx.mk_clauses(iter::once(wf_clause))\n }\n \n-crate fn wf_clause_for_tuple<'tcx>(tcx: TyCtxt<'tcx>, arity: usize) -> Clauses<'tcx> {\n+crate fn wf_clause_for_tuple(tcx: TyCtxt<'_>, arity: usize) -> Clauses<'_> {\n     let type_list = generic_types::type_list(tcx, arity);\n     let tuple_ty = tcx.mk_ty(ty::Tuple(type_list));\n \n@@ -152,7 +152,7 @@ crate fn wf_clause_for_tuple<'tcx>(tcx: TyCtxt<'tcx>, arity: usize) -> Clauses<'\n     tcx.mk_clauses(iter::once(wf_clause))\n }\n \n-crate fn wf_clause_for_ref<'tcx>(tcx: TyCtxt<'tcx>, mutbl: hir::Mutability) -> Clauses<'tcx> {\n+crate fn wf_clause_for_ref(tcx: TyCtxt<'_>, mutbl: hir::Mutability) -> Clauses<'_> {\n     let region = tcx.mk_region(\n         ty::ReLateBound(ty::INNERMOST, ty::BoundRegion::BrAnon(0))\n     );\n@@ -176,7 +176,7 @@ crate fn wf_clause_for_ref<'tcx>(tcx: TyCtxt<'tcx>, mutbl: hir::Mutability) -> C\n     tcx.mk_clauses(iter::once(wf_clause))\n }\n \n-crate fn wf_clause_for_fn_def<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Clauses<'tcx> {\n+crate fn wf_clause_for_fn_def(tcx: TyCtxt<'_>, def_id: DefId) -> Clauses<'_> {\n     let fn_def = generic_types::fn_def(tcx, def_id);\n \n     let wf_clause = ProgramClause {"}, {"sha": "ecd888b606981d10422cea7acad21d1092fce5d9", "filename": "src/librustc_traits/dropck_outlives.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_traits%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_traits%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fdropck_outlives.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -279,10 +279,10 @@ fn dtorck_constraint_for_ty<'tcx>(\n }\n \n /// Calculates the dtorck constraint for a type.\n-crate fn adt_dtorck_constraint<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+crate fn adt_dtorck_constraint(\n+    tcx: TyCtxt<'_>,\n     def_id: DefId,\n-) -> Result<DtorckConstraint<'tcx>, NoSolution> {\n+) -> Result<DtorckConstraint<'_>, NoSolution> {\n     let def = tcx.adt_def(def_id);\n     let span = tcx.def_span(def_id);\n     debug!(\"dtorck_constraint: {:?}\", def);\n@@ -313,7 +313,7 @@ crate fn adt_dtorck_constraint<'tcx>(\n     Ok(result)\n }\n \n-fn dedup_dtorck_constraint<'tcx>(c: &mut DtorckConstraint<'tcx>) {\n+fn dedup_dtorck_constraint(c: &mut DtorckConstraint<'_>) {\n     let mut outlives = FxHashSet::default();\n     let mut dtorck_types = FxHashSet::default();\n "}, {"sha": "9ff685bb4ee8a8976c12cbe83666aea044edf0d0", "filename": "src/librustc_traits/lowering/environment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -160,7 +160,7 @@ crate fn program_clauses_for_env<'tcx>(\n     );\n }\n \n-crate fn environment<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Environment<'tcx> {\n+crate fn environment(tcx: TyCtxt<'_>, def_id: DefId) -> Environment<'_> {\n     use super::{Lower, IntoFromEnvGoal};\n     use rustc::hir::{Node, TraitItemKind, ImplItemKind, ItemKind, ForeignItemKind};\n "}, {"sha": "b0d9134c834d60dde61a541049fc048b85b736b6", "filename": "src/librustc_traits/lowering/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fmod.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -155,7 +155,7 @@ impl<'tcx> IntoWellFormedGoal for DomainGoal<'tcx> {\n     }\n }\n \n-crate fn program_clauses_for<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Clauses<'tcx> {\n+crate fn program_clauses_for(tcx: TyCtxt<'_>, def_id: DefId) -> Clauses<'_> {\n     // FIXME(eddyb) this should only be using `def_kind`.\n     match tcx.def_key(def_id).disambiguated_data.data {\n         DefPathData::TypeNs(..) => match tcx.def_kind(def_id) {\n@@ -181,7 +181,7 @@ crate fn program_clauses_for<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Clauses<\n     }\n }\n \n-fn program_clauses_for_trait<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Clauses<'tcx> {\n+fn program_clauses_for_trait(tcx: TyCtxt<'_>, def_id: DefId) -> Clauses<'_> {\n     // `trait Trait<P1..Pn> where WC { .. } // P0 == Self`\n \n     // Rule Implemented-From-Env (see rustc guide)\n@@ -337,7 +337,7 @@ fn program_clauses_for_impl(tcx: TyCtxt<'tcx>, def_id: DefId) -> Clauses<'tcx> {\n     tcx.mk_clauses(iter::once(Clause::ForAll(ty::Binder::bind(clause))))\n }\n \n-pub fn program_clauses_for_type_def<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Clauses<'tcx> {\n+pub fn program_clauses_for_type_def(tcx: TyCtxt<'_>, def_id: DefId) -> Clauses<'_> {\n     // Rule WellFormed-Type\n     //\n     // `struct Ty<P1..Pn> where WC1, ..., WCm`\n@@ -411,10 +411,10 @@ pub fn program_clauses_for_type_def<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> C\n     tcx.mk_clauses(iter::once(well_formed_clause).chain(from_env_clauses))\n }\n \n-pub fn program_clauses_for_associated_type_def<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+pub fn program_clauses_for_associated_type_def(\n+    tcx: TyCtxt<'_>,\n     item_id: DefId,\n-) -> Clauses<'tcx> {\n+) -> Clauses<'_> {\n     // Rule ProjectionEq-Placeholder\n     //\n     // ```\n@@ -549,10 +549,10 @@ pub fn program_clauses_for_associated_type_def<'tcx>(\n     tcx.mk_clauses(clauses)\n }\n \n-pub fn program_clauses_for_associated_type_value<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+pub fn program_clauses_for_associated_type_value(\n+    tcx: TyCtxt<'_>,\n     item_id: DefId,\n-) -> Clauses<'tcx> {\n+) -> Clauses<'_> {\n     // Rule Normalize-From-Impl (see rustc guide)\n     //\n     // ```\n@@ -611,7 +611,7 @@ pub fn program_clauses_for_associated_type_value<'tcx>(\n     tcx.mk_clauses(iter::once(normalize_clause))\n }\n \n-pub fn dump_program_clauses<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn dump_program_clauses(tcx: TyCtxt<'_>) {\n     if !tcx.features().rustc_attrs {\n         return;\n     }"}, {"sha": "c4c4e10a14cc0ad1838b45c4e87534abcdcf7174", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -29,7 +29,7 @@ use syntax_pos::Span;\n ///    struct/enum definition for the nominal type itself (i.e.\n ///    cannot do `struct S<T>; impl<T:Clone> Drop for S<T> { ... }`).\n ///\n-pub fn check_drop_impl<'tcx>(tcx: TyCtxt<'tcx>, drop_impl_did: DefId) -> Result<(), ErrorReported> {\n+pub fn check_drop_impl(tcx: TyCtxt<'_>, drop_impl_did: DefId) -> Result<(), ErrorReported> {\n     let dtor_self_type = tcx.type_of(drop_impl_did);\n     let dtor_predicates = tcx.predicates_of(drop_impl_did);\n     match dtor_self_type.sty {"}, {"sha": "9b1a8913822092a002b957a7a97e509500c06a01", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -79,7 +79,7 @@ pub fn intrisic_operation_unsafety(intrinsic: &str) -> hir::Unsafety {\n \n /// Remember to add all intrinsics here, in librustc_codegen_llvm/intrinsic.rs,\n /// and in libcore/intrinsics.rs\n-pub fn check_intrinsic_type<'tcx>(tcx: TyCtxt<'tcx>, it: &hir::ForeignItem) {\n+pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem) {\n     let param = |n| tcx.mk_ty_param(n, InternedString::intern(&format!(\"P{}\", n)));\n     let name = it.ident.as_str();\n \n@@ -385,7 +385,7 @@ pub fn check_intrinsic_type<'tcx>(tcx: TyCtxt<'tcx>, it: &hir::ForeignItem) {\n }\n \n /// Type-check `extern \"platform-intrinsic\" { ... }` functions.\n-pub fn check_platform_intrinsic_type<'tcx>(tcx: TyCtxt<'tcx>, it: &hir::ForeignItem) {\n+pub fn check_platform_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem) {\n     let param = |n| {\n         let name = InternedString::intern(&format!(\"P{}\", n));\n         tcx.mk_ty_param(n, name)"}, {"sha": "be00a6efe55edeeacde981b6bf26891b1897c0ff", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -775,12 +775,12 @@ impl Ord for TraitInfo {\n }\n \n /// Retrieves all traits in this crate and any dependent crates.\n-pub fn all_traits<'tcx>(tcx: TyCtxt<'tcx>) -> Vec<TraitInfo> {\n+pub fn all_traits(tcx: TyCtxt<'_>) -> Vec<TraitInfo> {\n     tcx.all_traits(LOCAL_CRATE).iter().map(|&def_id| TraitInfo { def_id }).collect()\n }\n \n /// Computes all traits in this crate and any dependent crates.\n-fn compute_all_traits<'tcx>(tcx: TyCtxt<'tcx>) -> Vec<DefId> {\n+fn compute_all_traits(tcx: TyCtxt<'_>) -> Vec<DefId> {\n     use hir::itemlikevisit;\n \n     let mut traits = vec![];"}, {"sha": "fb7d681a72da7cf286e7f2c82f642a1ec1d6d103", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -698,31 +698,31 @@ impl ItemLikeVisitor<'tcx> for CheckItemTypesVisitor<'tcx> {\n     fn visit_impl_item(&mut self, _: &'tcx hir::ImplItem) { }\n }\n \n-pub fn check_wf_new<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn check_wf_new(tcx: TyCtxt<'_>) {\n     let mut visit = wfcheck::CheckTypeWellFormedVisitor::new(tcx);\n     tcx.hir().krate().par_visit_all_item_likes(&mut visit);\n }\n \n-fn check_mod_item_types<'tcx>(tcx: TyCtxt<'tcx>, module_def_id: DefId) {\n+fn check_mod_item_types(tcx: TyCtxt<'_>, module_def_id: DefId) {\n     tcx.hir().visit_item_likes_in_module(module_def_id, &mut CheckItemTypesVisitor { tcx });\n }\n \n-fn typeck_item_bodies<'tcx>(tcx: TyCtxt<'tcx>, crate_num: CrateNum) {\n+fn typeck_item_bodies(tcx: TyCtxt<'_>, crate_num: CrateNum) {\n     debug_assert!(crate_num == LOCAL_CRATE);\n     tcx.par_body_owners(|body_owner_def_id| {\n         tcx.ensure().typeck_tables_of(body_owner_def_id);\n     });\n }\n \n-fn check_item_well_formed<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) {\n+fn check_item_well_formed(tcx: TyCtxt<'_>, def_id: DefId) {\n     wfcheck::check_item_well_formed(tcx, def_id);\n }\n \n-fn check_trait_item_well_formed<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) {\n+fn check_trait_item_well_formed(tcx: TyCtxt<'_>, def_id: DefId) {\n     wfcheck::check_trait_item(tcx, def_id);\n }\n \n-fn check_impl_item_well_formed<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) {\n+fn check_impl_item_well_formed(tcx: TyCtxt<'_>, def_id: DefId) {\n     wfcheck::check_impl_item(tcx, def_id);\n }\n \n@@ -742,7 +742,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     };\n }\n \n-fn adt_destructor<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Option<ty::Destructor> {\n+fn adt_destructor(tcx: TyCtxt<'_>, def_id: DefId) -> Option<ty::Destructor> {\n     tcx.calculate_dtor(def_id, &mut dropck::check_drop_impl)\n }\n \n@@ -755,10 +755,10 @@ fn adt_destructor<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Option<ty::Destruct\n /// may not succeed. In some cases where this function returns `None`\n /// (notably closures), `typeck_tables(def_id)` would wind up\n /// redirecting to the owning function.\n-fn primary_body_of<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn primary_body_of(\n+    tcx: TyCtxt<'_>,\n     id: hir::HirId,\n-) -> Option<(hir::BodyId, Option<&'tcx hir::FnDecl>)> {\n+) -> Option<(hir::BodyId, Option<&hir::FnDecl>)> {\n     match tcx.hir().get(id) {\n         Node::Item(item) => {\n             match item.node {\n@@ -796,7 +796,7 @@ fn primary_body_of<'tcx>(\n     }\n }\n \n-fn has_typeck_tables<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n+fn has_typeck_tables(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     // Closures' tables come from their outermost function,\n     // as they are part of the same \"inference environment\".\n     let outer_def_id = tcx.closure_base_def_id(def_id);\n@@ -808,11 +808,11 @@ fn has_typeck_tables<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n     primary_body_of(tcx, id).is_some()\n }\n \n-fn used_trait_imports<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx DefIdSet {\n+fn used_trait_imports(tcx: TyCtxt<'_>, def_id: DefId) -> &DefIdSet {\n     &*tcx.typeck_tables_of(def_id).used_trait_imports\n }\n \n-fn typeck_tables_of<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx ty::TypeckTables<'tcx> {\n+fn typeck_tables_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::TypeckTables<'_> {\n     // Closures' tables come from their outermost function,\n     // as they are part of the same \"inference environment\".\n     let outer_def_id = tcx.closure_base_def_id(def_id);\n@@ -913,7 +913,7 @@ fn typeck_tables_of<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx ty::TypeckT\n     tables\n }\n \n-fn check_abi<'tcx>(tcx: TyCtxt<'tcx>, span: Span, abi: Abi) {\n+fn check_abi(tcx: TyCtxt<'_>, span: Span, abi: Abi) {\n     if !tcx.sess.target.target.is_abi_supported(abi) {\n         struct_span_err!(tcx.sess, span, E0570,\n             \"The ABI `{}` is not supported for the current target\", abi).emit()\n@@ -1291,7 +1291,7 @@ fn check_fn<'a, 'tcx>(\n     (fcx, gen_ty)\n }\n \n-fn check_struct<'tcx>(tcx: TyCtxt<'tcx>, id: hir::HirId, span: Span) {\n+fn check_struct(tcx: TyCtxt<'_>, id: hir::HirId, span: Span) {\n     let def_id = tcx.hir().local_def_id_from_hir_id(id);\n     let def = tcx.adt_def(def_id);\n     def.destructor(tcx); // force the destructor to be evaluated\n@@ -1305,7 +1305,7 @@ fn check_struct<'tcx>(tcx: TyCtxt<'tcx>, id: hir::HirId, span: Span) {\n     check_packed(tcx, span, def_id);\n }\n \n-fn check_union<'tcx>(tcx: TyCtxt<'tcx>, id: hir::HirId, span: Span) {\n+fn check_union(tcx: TyCtxt<'_>, id: hir::HirId, span: Span) {\n     let def_id = tcx.hir().local_def_id_from_hir_id(id);\n     let def = tcx.adt_def(def_id);\n     def.destructor(tcx); // force the destructor to be evaluated\n@@ -1467,14 +1467,14 @@ fn maybe_check_static_with_link_section(tcx: TyCtxt<'_>, id: DefId, span: Span)\n     }\n }\n \n-fn check_on_unimplemented<'tcx>(tcx: TyCtxt<'tcx>, trait_def_id: DefId, item: &hir::Item) {\n+fn check_on_unimplemented(tcx: TyCtxt<'_>, trait_def_id: DefId, item: &hir::Item) {\n     let item_def_id = tcx.hir().local_def_id_from_hir_id(item.hir_id);\n     // an error would be reported if this fails.\n     let _ = traits::OnUnimplementedDirective::of_item(tcx, trait_def_id, item_def_id);\n }\n \n-fn report_forbidden_specialization<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn report_forbidden_specialization(\n+    tcx: TyCtxt<'_>,\n     impl_item: &hir::ImplItem,\n     parent_impl: DefId,\n ) {\n@@ -1690,7 +1690,7 @@ fn check_impl_items_against_trait<'tcx>(\n /// Checks whether a type can be represented in memory. In particular, it\n /// identifies types that contain themselves without indirection through a\n /// pointer, which would mean their size is unbounded.\n-fn check_representable<'tcx>(tcx: TyCtxt<'tcx>, sp: Span, item_def_id: DefId) -> bool {\n+fn check_representable(tcx: TyCtxt<'_>, sp: Span, item_def_id: DefId) -> bool {\n     let rty = tcx.type_of(item_def_id);\n \n     // Check that it is possible to represent this type. This call identifies\n@@ -1712,7 +1712,7 @@ fn check_representable<'tcx>(tcx: TyCtxt<'tcx>, sp: Span, item_def_id: DefId) ->\n     return true;\n }\n \n-pub fn check_simd<'tcx>(tcx: TyCtxt<'tcx>, sp: Span, def_id: DefId) {\n+pub fn check_simd(tcx: TyCtxt<'_>, sp: Span, def_id: DefId) {\n     let t = tcx.type_of(def_id);\n     if let ty::Adt(def, substs) = t.sty {\n         if def.is_struct() {\n@@ -1741,7 +1741,7 @@ pub fn check_simd<'tcx>(tcx: TyCtxt<'tcx>, sp: Span, def_id: DefId) {\n     }\n }\n \n-fn check_packed<'tcx>(tcx: TyCtxt<'tcx>, sp: Span, def_id: DefId) {\n+fn check_packed(tcx: TyCtxt<'_>, sp: Span, def_id: DefId) {\n     let repr = tcx.adt_def(def_id).repr;\n     if repr.packed() {\n         for attr in tcx.get_attrs(def_id).iter() {\n@@ -1765,7 +1765,7 @@ fn check_packed<'tcx>(tcx: TyCtxt<'tcx>, sp: Span, def_id: DefId) {\n     }\n }\n \n-fn check_packed_inner<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, stack: &mut Vec<DefId>) -> bool {\n+fn check_packed_inner(tcx: TyCtxt<'_>, def_id: DefId, stack: &mut Vec<DefId>) -> bool {\n     let t = tcx.type_of(def_id);\n     if stack.contains(&def_id) {\n         debug!(\"check_packed_inner: {:?} is recursive\", t);\n@@ -1839,7 +1839,7 @@ fn bad_non_zero_sized_fields<'tcx>(\n     err.emit();\n }\n \n-fn check_transparent<'tcx>(tcx: TyCtxt<'tcx>, sp: Span, def_id: DefId) {\n+fn check_transparent(tcx: TyCtxt<'_>, sp: Span, def_id: DefId) {\n     let adt = tcx.adt_def(def_id);\n     if !adt.repr.transparent() {\n         return;\n@@ -1988,7 +1988,7 @@ pub fn check_enum<'tcx>(tcx: TyCtxt<'tcx>, sp: Span, vs: &'tcx [hir::Variant], i\n     check_transparent(tcx, sp, def_id);\n }\n \n-fn report_unexpected_variant_res<'tcx>(tcx: TyCtxt<'tcx>, res: Res, span: Span, qpath: &QPath) {\n+fn report_unexpected_variant_res(tcx: TyCtxt<'_>, res: Res, span: Span, qpath: &QPath) {\n     span_err!(tcx.sess, span, E0533,\n               \"expected unit struct/variant or constant, found {} `{}`\",\n               res.descr(),"}, {"sha": "2c48bd8b4f0265cffc5f8cbd93712276e4d0d3ea", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -68,7 +68,7 @@ impl<'tcx> CheckWfFcxBuilder<'tcx> {\n /// We do this check as a pre-pass before checking fn bodies because if these constraints are\n /// not included it frequently leads to confusing errors in fn bodies. So it's better to check\n /// the types first.\n-pub fn check_item_well_formed<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) {\n+pub fn check_item_well_formed(tcx: TyCtxt<'_>, def_id: DefId) {\n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n     let item = tcx.hir().expect_item(hir_id);\n \n@@ -156,7 +156,7 @@ pub fn check_item_well_formed<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) {\n     }\n }\n \n-pub fn check_trait_item<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) {\n+pub fn check_trait_item(tcx: TyCtxt<'_>, def_id: DefId) {\n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n     let trait_item = tcx.hir().expect_trait_item(hir_id);\n \n@@ -167,7 +167,7 @@ pub fn check_trait_item<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) {\n     check_associated_item(tcx, trait_item.hir_id, trait_item.span, method_sig);\n }\n \n-pub fn check_impl_item<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) {\n+pub fn check_impl_item(tcx: TyCtxt<'_>, def_id: DefId) {\n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n     let impl_item = tcx.hir().expect_impl_item(hir_id);\n \n@@ -178,8 +178,8 @@ pub fn check_impl_item<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) {\n     check_associated_item(tcx, impl_item.hir_id, impl_item.span, method_sig);\n }\n \n-fn check_associated_item<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn check_associated_item(\n+    tcx: TyCtxt<'_>,\n     item_id: hir::HirId,\n     span: Span,\n     sig_if_method: Option<&hir::MethodSig>,\n@@ -231,7 +231,7 @@ fn for_item<'tcx>(tcx: TyCtxt<'tcx>, item: &hir::Item) -> CheckWfFcxBuilder<'tcx\n     for_id(tcx, item.hir_id, item.span)\n }\n \n-fn for_id<'tcx>(tcx: TyCtxt<'tcx>, id: hir::HirId, span: Span) -> CheckWfFcxBuilder<'tcx> {\n+fn for_id(tcx: TyCtxt<'_>, id: hir::HirId, span: Span) -> CheckWfFcxBuilder<'_> {\n     let def_id = tcx.hir().local_def_id_from_hir_id(id);\n     CheckWfFcxBuilder {\n         inherited: Inherited::build(tcx, def_id),\n@@ -317,7 +317,7 @@ fn check_type_defn<'tcx, F>(\n     });\n }\n \n-fn check_trait<'tcx>(tcx: TyCtxt<'tcx>, item: &hir::Item) {\n+fn check_trait(tcx: TyCtxt<'_>, item: &hir::Item) {\n     debug!(\"check_trait: {:?}\", item.hir_id);\n \n     let trait_def_id = tcx.hir().local_def_id_from_hir_id(item.hir_id);\n@@ -340,7 +340,7 @@ fn check_trait<'tcx>(tcx: TyCtxt<'tcx>, item: &hir::Item) {\n     });\n }\n \n-fn check_item_fn<'tcx>(tcx: TyCtxt<'tcx>, item: &hir::Item) {\n+fn check_item_fn(tcx: TyCtxt<'_>, item: &hir::Item) {\n     for_item(tcx, item).with_fcx(|fcx, tcx| {\n         let def_id = fcx.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n         let sig = fcx.tcx.fn_sig(def_id);\n@@ -352,8 +352,8 @@ fn check_item_fn<'tcx>(tcx: TyCtxt<'tcx>, item: &hir::Item) {\n     })\n }\n \n-fn check_item_type<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn check_item_type(\n+    tcx: TyCtxt<'_>,\n     item_id: hir::HirId,\n     ty_span: Span,\n     allow_foreign_ty: bool,\n@@ -980,7 +980,7 @@ fn check_variances_for_type_defn<'tcx>(\n     }\n }\n \n-fn report_bivariance<'tcx>(tcx: TyCtxt<'tcx>, span: Span, param_name: ast::Name) {\n+fn report_bivariance(tcx: TyCtxt<'_>, span: Span, param_name: ast::Name) {\n     let mut err = error_392(tcx, span, param_name);\n \n     let suggested_marker_id = tcx.lang_items().phantom_data();\n@@ -1023,7 +1023,7 @@ fn reject_shadowing_parameters(tcx: TyCtxt<'_>, def_id: DefId) {\n \n /// Feature gates RFC 2056 -- trivial bounds, checking for global bounds that\n /// aren't true.\n-fn check_false_global_bounds<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>, span: Span, id: hir::HirId) {\n+fn check_false_global_bounds(fcx: &FnCtxt<'_, '_>, span: Span, id: hir::HirId) {\n     let empty_env = ty::ParamEnv::empty();\n \n     let def_id = fcx.tcx.hir().local_def_id_from_hir_id(id);\n@@ -1135,11 +1135,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n }\n \n-fn error_392<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn error_392(\n+    tcx: TyCtxt<'_>,\n     span: Span,\n     param_name: ast::Name,\n-) -> DiagnosticBuilder<'tcx> {\n+) -> DiagnosticBuilder<'_> {\n     let mut err = struct_span_err!(tcx.sess, span, E0392,\n                   \"parameter `{}` is never used\", param_name);\n     err.span_label(span, \"unused parameter\");"}, {"sha": "8614de1977085f3f3a2993a10a450e76115f1901", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -13,7 +13,7 @@ use rustc::util::nodemap::DefIdSet;\n \n use rustc_data_structures::fx::FxHashMap;\n \n-pub fn check_crate<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn check_crate(tcx: TyCtxt<'_>) {\n     let mut used_trait_imports = DefIdSet::default();\n     for &body_id in tcx.hir().krate().bodies.keys() {\n         let item_def_id = tcx.hir().body_owner_def_id(body_id);\n@@ -70,7 +70,7 @@ impl CheckVisitor<'tcx> {\n     }\n }\n \n-fn unused_crates_lint<'tcx>(tcx: TyCtxt<'tcx>) {\n+fn unused_crates_lint(tcx: TyCtxt<'_>) {\n     let lint = lint::builtin::UNUSED_EXTERN_CRATES;\n \n     // Collect first the crates that are completely unused.  These we"}, {"sha": "68bdcbfe3fd952a893144d137b96535be91b13ca", "filename": "src/librustc_typeck/coherence/builtin.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -17,7 +17,7 @@ use rustc::hir::def_id::DefId;\n use hir::Node;\n use rustc::hir::{self, ItemKind};\n \n-pub fn check_trait<'tcx>(tcx: TyCtxt<'tcx>, trait_def_id: DefId) {\n+pub fn check_trait(tcx: TyCtxt<'_>, trait_def_id: DefId) {\n     Checker { tcx, trait_def_id }\n         .check(tcx.lang_items().drop_trait(), visit_implementation_of_drop)\n         .check(tcx.lang_items().copy_trait(), visit_implementation_of_copy)\n@@ -46,7 +46,7 @@ impl<'tcx> Checker<'tcx> {\n     }\n }\n \n-fn visit_implementation_of_drop<'tcx>(tcx: TyCtxt<'tcx>, impl_did: DefId) {\n+fn visit_implementation_of_drop(tcx: TyCtxt<'_>, impl_did: DefId) {\n     if let ty::Adt(..) = tcx.type_of(impl_did).sty {\n         /* do nothing */\n     } else {\n@@ -74,7 +74,7 @@ fn visit_implementation_of_drop<'tcx>(tcx: TyCtxt<'tcx>, impl_did: DefId) {\n     }\n }\n \n-fn visit_implementation_of_copy<'tcx>(tcx: TyCtxt<'tcx>, impl_did: DefId) {\n+fn visit_implementation_of_copy(tcx: TyCtxt<'_>, impl_did: DefId) {\n     debug!(\"visit_implementation_of_copy: impl_did={:?}\", impl_did);\n \n     let impl_hir_id = if let Some(n) = tcx.hir().as_local_hir_id(impl_did) {\n@@ -154,7 +154,7 @@ fn visit_implementation_of_coerce_unsized(tcx: TyCtxt<'tcx>, impl_did: DefId) {\n     }\n }\n \n-fn visit_implementation_of_dispatch_from_dyn<'tcx>(tcx: TyCtxt<'tcx>, impl_did: DefId) {\n+fn visit_implementation_of_dispatch_from_dyn(tcx: TyCtxt<'_>, impl_did: DefId) {\n     debug!(\"visit_implementation_of_dispatch_from_dyn: impl_did={:?}\",\n            impl_did);\n     if impl_did.is_local() {"}, {"sha": "f208c6a138d26c7338c99eb6b8ba6d5533de7355", "filename": "src/librustc_typeck/coherence/inherent_impls.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -17,10 +17,10 @@ use syntax::ast;\n use syntax_pos::Span;\n \n /// On-demand query: yields a map containing all types mapped to their inherent impls.\n-pub fn crate_inherent_impls<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+pub fn crate_inherent_impls(\n+    tcx: TyCtxt<'_>,\n     crate_num: CrateNum,\n-) -> &'tcx CrateInherentImpls {\n+) -> &CrateInherentImpls {\n     assert_eq!(crate_num, LOCAL_CRATE);\n \n     let krate = tcx.hir().krate();\n@@ -33,7 +33,7 @@ pub fn crate_inherent_impls<'tcx>(\n }\n \n /// On-demand query: yields a vector of the inherent impls for a specific type.\n-pub fn inherent_impls<'tcx>(tcx: TyCtxt<'tcx>, ty_def_id: DefId) -> &'tcx [DefId] {\n+pub fn inherent_impls(tcx: TyCtxt<'_>, ty_def_id: DefId) -> &[DefId] {\n     assert!(ty_def_id.is_local());\n \n     // NB. Until we adopt the red-green dep-tracking algorithm (see"}, {"sha": "1785304fb1d487449d81a3bee7d0594824c35295", "filename": "src/librustc_typeck/coherence/inherent_impls_overlap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -5,7 +5,7 @@ use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::traits::{self, IntercrateMode};\n use rustc::ty::TyCtxt;\n \n-pub fn crate_inherent_impls_overlap_check<'tcx>(tcx: TyCtxt<'tcx>, crate_num: CrateNum) {\n+pub fn crate_inherent_impls_overlap_check(tcx: TyCtxt<'_>, crate_num: CrateNum) {\n     assert_eq!(crate_num, LOCAL_CRATE);\n     let krate = tcx.hir().krate();\n     krate.visit_all_item_likes(&mut InherentOverlapChecker { tcx });"}, {"sha": "9b9789139b70f14c327ba51675c5d07184696f99", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -18,7 +18,7 @@ mod inherent_impls_overlap;\n mod orphan;\n mod unsafety;\n \n-fn check_impl<'tcx>(tcx: TyCtxt<'tcx>, hir_id: HirId) {\n+fn check_impl(tcx: TyCtxt<'_>, hir_id: HirId) {\n     let impl_def_id = tcx.hir().local_def_id_from_hir_id(hir_id);\n \n     // If there are no traits, then this implementation must have a\n@@ -124,7 +124,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     };\n }\n \n-fn coherent_trait<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) {\n+fn coherent_trait(tcx: TyCtxt<'_>, def_id: DefId) {\n     let impls = tcx.hir().trait_impls(def_id);\n     for &impl_id in impls {\n         check_impl(tcx, impl_id);\n@@ -135,7 +135,7 @@ fn coherent_trait<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) {\n     builtin::check_trait(tcx, def_id);\n }\n \n-pub fn check_coherence<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn check_coherence(tcx: TyCtxt<'_>) {\n     for &trait_def_id in tcx.hir().krate().trait_impls.keys() {\n         tcx.ensure().coherent_trait(trait_def_id);\n     }\n@@ -151,7 +151,7 @@ pub fn check_coherence<'tcx>(tcx: TyCtxt<'tcx>) {\n /// Overlap: no two impls for the same trait are implemented for the\n /// same type. Likewise, no two inherent impls for a given type\n /// constructor provide a method with the same name.\n-fn check_impl_overlap<'tcx>(tcx: TyCtxt<'tcx>, hir_id: HirId) {\n+fn check_impl_overlap(tcx: TyCtxt<'_>, hir_id: HirId) {\n     let impl_def_id = tcx.hir().local_def_id_from_hir_id(hir_id);\n     let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n     let trait_def_id = trait_ref.def_id;"}, {"sha": "2d0faecd8ee71dbb8d3b94c3b71bbf96341665aa", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -6,7 +6,7 @@ use rustc::ty::{self, TyCtxt};\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir;\n \n-pub fn check<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn check(tcx: TyCtxt<'_>) {\n     let mut orphan = OrphanChecker { tcx };\n     tcx.hir().krate().visit_all_item_likes(&mut orphan);\n }"}, {"sha": "123d7c6123b89a0a11db04471e64d576ad304734", "filename": "src/librustc_typeck/coherence/unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -5,7 +5,7 @@ use rustc::ty::TyCtxt;\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir::{self, Unsafety};\n \n-pub fn check<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn check(tcx: TyCtxt<'_>) {\n     let mut unsafety = UnsafetyChecker { tcx };\n     tcx.hir().krate().visit_all_item_likes(&mut unsafety);\n }"}, {"sha": "e5802179ec479328d0847313c37bc6f7a7ad174a", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -56,7 +56,7 @@ struct OnlySelfBounds(bool);\n ///////////////////////////////////////////////////////////////////////////\n // Main entry point\n \n-fn collect_mod_item_types<'tcx>(tcx: TyCtxt<'tcx>, module_def_id: DefId) {\n+fn collect_mod_item_types(tcx: TyCtxt<'_>, module_def_id: DefId) {\n     tcx.hir().visit_item_likes_in_module(\n         module_def_id,\n         &mut CollectItemTypesVisitor { tcx }.as_deep_visitor()\n@@ -253,10 +253,10 @@ impl AstConv<'tcx> for ItemCtxt<'tcx> {\n     }\n }\n \n-fn type_param_predicates<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn type_param_predicates(\n+    tcx: TyCtxt<'_>,\n     (item_def_id, def_id): (DefId, DefId),\n-) -> &'tcx ty::GenericPredicates<'tcx> {\n+) -> &ty::GenericPredicates<'_> {\n     use rustc::hir::*;\n \n     // In the AST, bounds can derive from two places. Either\n@@ -381,7 +381,7 @@ impl ItemCtxt<'tcx> {\n /// parameter with ID `param_id`. We use this so as to avoid running\n /// `ast_ty_to_ty`, because we want to avoid triggering an all-out\n /// conversion of the type to avoid inducing unnecessary cycles.\n-fn is_param<'tcx>(tcx: TyCtxt<'tcx>, ast_ty: &hir::Ty, param_id: hir::HirId) -> bool {\n+fn is_param(tcx: TyCtxt<'_>, ast_ty: &hir::Ty, param_id: hir::HirId) -> bool {\n     if let hir::TyKind::Path(hir::QPath::Resolved(None, ref path)) = ast_ty.node {\n         match path.res {\n             Res::SelfTy(Some(def_id), None) | Res::Def(DefKind::TyParam, def_id) => {\n@@ -394,7 +394,7 @@ fn is_param<'tcx>(tcx: TyCtxt<'tcx>, ast_ty: &hir::Ty, param_id: hir::HirId) ->\n     }\n }\n \n-fn convert_item<'tcx>(tcx: TyCtxt<'tcx>, item_id: hir::HirId) {\n+fn convert_item(tcx: TyCtxt<'_>, item_id: hir::HirId) {\n     let it = tcx.hir().expect_item(item_id);\n     debug!(\"convert: item {} with id {}\", it.ident, it.hir_id);\n     let def_id = tcx.hir().local_def_id_from_hir_id(item_id);\n@@ -476,7 +476,7 @@ fn convert_item<'tcx>(tcx: TyCtxt<'tcx>, item_id: hir::HirId) {\n     }\n }\n \n-fn convert_trait_item<'tcx>(tcx: TyCtxt<'tcx>, trait_item_id: hir::HirId) {\n+fn convert_trait_item(tcx: TyCtxt<'_>, trait_item_id: hir::HirId) {\n     let trait_item = tcx.hir().expect_trait_item(trait_item_id);\n     let def_id = tcx.hir().local_def_id_from_hir_id(trait_item.hir_id);\n     tcx.generics_of(def_id);\n@@ -497,7 +497,7 @@ fn convert_trait_item<'tcx>(tcx: TyCtxt<'tcx>, trait_item_id: hir::HirId) {\n     tcx.predicates_of(def_id);\n }\n \n-fn convert_impl_item<'tcx>(tcx: TyCtxt<'tcx>, impl_item_id: hir::HirId) {\n+fn convert_impl_item(tcx: TyCtxt<'_>, impl_item_id: hir::HirId) {\n     let def_id = tcx.hir().local_def_id_from_hir_id(impl_item_id);\n     tcx.generics_of(def_id);\n     tcx.type_of(def_id);\n@@ -507,7 +507,7 @@ fn convert_impl_item<'tcx>(tcx: TyCtxt<'tcx>, impl_item_id: hir::HirId) {\n     }\n }\n \n-fn convert_variant_ctor<'tcx>(tcx: TyCtxt<'tcx>, ctor_id: hir::HirId) {\n+fn convert_variant_ctor(tcx: TyCtxt<'_>, ctor_id: hir::HirId) {\n     let def_id = tcx.hir().local_def_id_from_hir_id(ctor_id);\n     tcx.generics_of(def_id);\n     tcx.type_of(def_id);\n@@ -562,8 +562,8 @@ fn convert_enum_variant_types<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, variants:\n     }\n }\n \n-fn convert_variant<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn convert_variant(\n+    tcx: TyCtxt<'_>,\n     variant_did: Option<DefId>,\n     ctor_did: Option<DefId>,\n     ident: Ident,\n@@ -619,7 +619,7 @@ fn convert_variant<'tcx>(\n     )\n }\n \n-fn adt_def<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx ty::AdtDef {\n+fn adt_def(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::AdtDef {\n     use rustc::hir::*;\n \n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n@@ -686,10 +686,10 @@ fn adt_def<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx ty::AdtDef {\n /// Ensures that the super-predicates of the trait with a `DefId`\n /// of `trait_def_id` are converted and stored. This also ensures that\n /// the transitive super-predicates are converted.\n-fn super_predicates_of<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn super_predicates_of(\n+    tcx: TyCtxt<'_>,\n     trait_def_id: DefId,\n-) -> &'tcx ty::GenericPredicates<'tcx> {\n+) -> &ty::GenericPredicates<'_> {\n     debug!(\"super_predicates(trait_def_id={:?})\", trait_def_id);\n     let trait_hir_id = tcx.hir().as_local_hir_id(trait_def_id).unwrap();\n \n@@ -740,7 +740,7 @@ fn super_predicates_of<'tcx>(\n     })\n }\n \n-fn trait_def<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx ty::TraitDef {\n+fn trait_def(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::TraitDef {\n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n     let item = tcx.hir().expect_item(hir_id);\n \n@@ -879,7 +879,7 @@ fn has_late_bound_regions<'tcx>(tcx: TyCtxt<'tcx>, node: Node<'tcx>) -> Option<S\n     }\n }\n \n-fn generics_of<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx ty::Generics {\n+fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::Generics {\n     use rustc::hir::*;\n \n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n@@ -1122,7 +1122,7 @@ fn generics_of<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx ty::Generics {\n     })\n }\n \n-fn report_assoc_ty_on_inherent_impl<'tcx>(tcx: TyCtxt<'tcx>, span: Span) {\n+fn report_assoc_ty_on_inherent_impl(tcx: TyCtxt<'_>, span: Span) {\n     span_err!(\n         tcx.sess,\n         span,\n@@ -1131,15 +1131,15 @@ fn report_assoc_ty_on_inherent_impl<'tcx>(tcx: TyCtxt<'tcx>, span: Span) {\n     );\n }\n \n-fn type_of<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Ty<'tcx> {\n+fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n     checked_type_of(tcx, def_id, true).unwrap()\n }\n \n /// Same as [`type_of`] but returns [`Option`] instead of failing.\n ///\n /// If you want to fail anyway, you can set the `fail` parameter to true, but in this case,\n /// you'd better just call [`type_of`] directly.\n-pub fn checked_type_of<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, fail: bool) -> Option<Ty<'tcx>> {\n+pub fn checked_type_of(tcx: TyCtxt<'_>, def_id: DefId, fail: bool) -> Option<Ty<'_>> {\n     use rustc::hir::*;\n \n     let hir_id = match tcx.hir().as_local_hir_id(def_id) {\n@@ -1464,7 +1464,7 @@ pub fn checked_type_of<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, fail: bool) -> Op\n     })\n }\n \n-fn find_existential_constraints<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Ty<'tcx> {\n+fn find_existential_constraints(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n     use rustc::hir::{ImplItem, Item, TraitItem};\n \n     debug!(\"find_existential_constraints({:?})\", def_id);\n@@ -1682,7 +1682,7 @@ fn find_existential_constraints<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Ty<'t\n     }\n }\n \n-fn fn_sig<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> ty::PolyFnSig<'tcx> {\n+fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n     use rustc::hir::*;\n     use rustc::hir::Node::*;\n \n@@ -1758,7 +1758,7 @@ fn fn_sig<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> ty::PolyFnSig<'tcx> {\n     }\n }\n \n-fn impl_trait_ref<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Option<ty::TraitRef<'tcx>> {\n+fn impl_trait_ref(tcx: TyCtxt<'_>, def_id: DefId) -> Option<ty::TraitRef<'_>> {\n     let icx = ItemCtxt::new(tcx, def_id);\n \n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n@@ -1773,7 +1773,7 @@ fn impl_trait_ref<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Option<ty::TraitRef\n     }\n }\n \n-fn impl_polarity<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> hir::ImplPolarity {\n+fn impl_polarity(tcx: TyCtxt<'_>, def_id: DefId) -> hir::ImplPolarity {\n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n     match tcx.hir().expect_item(hir_id).node {\n         hir::ItemKind::Impl(_, polarity, ..) => polarity,\n@@ -1804,10 +1804,10 @@ fn early_bound_lifetimes_from_generics<'a, 'tcx: 'a>(\n /// Returns a list of type predicates for the definition with ID `def_id`, including inferred\n /// lifetime constraints. This includes all predicates returned by `explicit_predicates_of`, plus\n /// inferred constraints concerning which regions outlive other regions.\n-fn predicates_defined_on<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn predicates_defined_on(\n+    tcx: TyCtxt<'_>,\n     def_id: DefId,\n-) -> &'tcx ty::GenericPredicates<'tcx> {\n+) -> &ty::GenericPredicates<'_> {\n     debug!(\"predicates_defined_on({:?})\", def_id);\n     let mut result = tcx.explicit_predicates_of(def_id);\n     debug!(\n@@ -1834,7 +1834,7 @@ fn predicates_defined_on<'tcx>(\n /// Returns a list of all type predicates (explicit and implicit) for the definition with\n /// ID `def_id`. This includes all predicates returned by `predicates_defined_on`, plus\n /// `Self: Trait` predicates for traits.\n-fn predicates_of<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx ty::GenericPredicates<'tcx> {\n+fn predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::GenericPredicates<'_> {\n     let mut result = tcx.predicates_defined_on(def_id);\n \n     if tcx.is_trait(def_id) {\n@@ -1861,10 +1861,10 @@ fn predicates_of<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx ty::GenericPre\n \n /// Returns a list of user-specified type predicates for the definition with ID `def_id`.\n /// N.B., this does not include any implied/inferred constraints.\n-fn explicit_predicates_of<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn explicit_predicates_of(\n+    tcx: TyCtxt<'_>,\n     def_id: DefId,\n-) -> &'tcx ty::GenericPredicates<'tcx> {\n+) -> &ty::GenericPredicates<'_> {\n     use rustc::hir::*;\n     use rustc_data_structures::fx::FxHashSet;\n \n@@ -2271,15 +2271,15 @@ fn compute_sig_of_foreign_fn_decl<'tcx>(\n     fty\n }\n \n-fn is_foreign_item<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n+fn is_foreign_item(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     match tcx.hir().get_if_local(def_id) {\n         Some(Node::ForeignItem(..)) => true,\n         Some(_) => false,\n         _ => bug!(\"is_foreign_item applied to non-local def-id {:?}\", def_id),\n     }\n }\n \n-fn static_mutability<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Option<hir::Mutability> {\n+fn static_mutability(tcx: TyCtxt<'_>, def_id: DefId) -> Option<hir::Mutability> {\n     match tcx.hir().get_if_local(def_id) {\n         Some(Node::Item(&hir::Item {\n             node: hir::ItemKind::Static(_, mutbl, _), ..\n@@ -2387,7 +2387,7 @@ fn from_target_feature(\n     }\n }\n \n-fn linkage_by_name<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, name: &str) -> Linkage {\n+fn linkage_by_name(tcx: TyCtxt<'_>, def_id: DefId, name: &str) -> Linkage {\n     use rustc::mir::mono::Linkage::*;\n \n     // Use the names from src/llvm/docs/LangRef.rst here. Most types are only\n@@ -2422,7 +2422,7 @@ fn linkage_by_name<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, name: &str) -> Linkag\n     }\n }\n \n-fn codegen_fn_attrs<'tcx>(tcx: TyCtxt<'tcx>, id: DefId) -> CodegenFnAttrs {\n+fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n     let attrs = tcx.get_attrs(id);\n \n     let mut codegen_fn_attrs = CodegenFnAttrs::new();"}, {"sha": "08c7cbc389a6756309c3d7131293a46140c019ea", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -49,7 +49,7 @@ use syntax_pos::Span;\n /// impl<'a> Trait<Foo> for Bar { type X = &'a i32; }\n /// //   ^ 'a is unused and appears in assoc type, error\n /// ```\n-pub fn impl_wf_check<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn impl_wf_check(tcx: TyCtxt<'_>) {\n     // We will tag this as part of the WF check -- logically, it is,\n     // but it's one that we must perform earlier than the rest of\n     // WfCheck.\n@@ -58,7 +58,7 @@ pub fn impl_wf_check<'tcx>(tcx: TyCtxt<'tcx>) {\n     }\n }\n \n-fn check_mod_impl_wf<'tcx>(tcx: TyCtxt<'tcx>, module_def_id: DefId) {\n+fn check_mod_impl_wf(tcx: TyCtxt<'_>, module_def_id: DefId) {\n     tcx.hir().visit_item_likes_in_module(\n         module_def_id,\n         &mut ImplWfCheck { tcx }\n@@ -92,8 +92,8 @@ impl ItemLikeVisitor<'tcx> for ImplWfCheck<'tcx> {\n     fn visit_impl_item(&mut self, _impl_item: &'tcx hir::ImplItem) { }\n }\n \n-fn enforce_impl_params_are_constrained<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn enforce_impl_params_are_constrained(\n+    tcx: TyCtxt<'_>,\n     impl_def_id: DefId,\n     impl_item_refs: &[hir::ImplItemRef],\n ) {\n@@ -183,7 +183,7 @@ fn report_unused_parameter(tcx: TyCtxt<'_>, span: Span, kind: &str, name: &str)\n }\n \n /// Enforce that we do not have two items in an impl with the same name.\n-fn enforce_impl_items_are_distinct<'tcx>(tcx: TyCtxt<'tcx>, impl_item_refs: &[hir::ImplItemRef]) {\n+fn enforce_impl_items_are_distinct(tcx: TyCtxt<'_>, impl_item_refs: &[hir::ImplItemRef]) {\n     let mut seen_type_items = FxHashMap::default();\n     let mut seen_value_items = FxHashMap::default();\n     for impl_item_ref in impl_item_refs {"}, {"sha": "56c7544eaf57a71c4f1e0b361ce8f9634dfd7c3d", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -161,7 +161,7 @@ fn require_same_types<'tcx>(\n     })\n }\n \n-fn check_main_fn_ty<'tcx>(tcx: TyCtxt<'tcx>, main_def_id: DefId) {\n+fn check_main_fn_ty(tcx: TyCtxt<'_>, main_def_id: DefId) {\n     let main_id = tcx.hir().as_local_hir_id(main_def_id).unwrap();\n     let main_span = tcx.def_span(main_def_id);\n     let main_t = tcx.type_of(main_def_id);\n@@ -226,7 +226,7 @@ fn check_main_fn_ty<'tcx>(tcx: TyCtxt<'tcx>, main_def_id: DefId) {\n     }\n }\n \n-fn check_start_fn_ty<'tcx>(tcx: TyCtxt<'tcx>, start_def_id: DefId) {\n+fn check_start_fn_ty(tcx: TyCtxt<'_>, start_def_id: DefId) {\n     let start_id = tcx.hir().as_local_hir_id(start_def_id).unwrap();\n     let start_span = tcx.def_span(start_def_id);\n     let start_t = tcx.type_of(start_def_id);\n@@ -283,7 +283,7 @@ fn check_start_fn_ty<'tcx>(tcx: TyCtxt<'tcx>, start_def_id: DefId) {\n     }\n }\n \n-fn check_for_entry_fn<'tcx>(tcx: TyCtxt<'tcx>) {\n+fn check_for_entry_fn(tcx: TyCtxt<'_>) {\n     match tcx.entry_fn(LOCAL_CRATE) {\n         Some((def_id, EntryFnType::Main)) => check_main_fn_ty(tcx, def_id),\n         Some((def_id, EntryFnType::Start)) => check_start_fn_ty(tcx, def_id),\n@@ -300,7 +300,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     impl_wf_check::provide(providers);\n }\n \n-pub fn check_crate<'tcx>(tcx: TyCtxt<'tcx>) -> Result<(), ErrorReported> {\n+pub fn check_crate(tcx: TyCtxt<'_>) -> Result<(), ErrorReported> {\n     tcx.sess.profiler(|p| p.start_activity(\"type-check crate\"));\n \n     // this ensures that later parts of type checking can assume that items"}, {"sha": "6b8f6fccd40d73fba36dbadffc54f2d3658d9496", "filename": "src/librustc_typeck/outlives/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -20,10 +20,10 @@ pub fn provide(providers: &mut Providers<'_>) {\n     };\n }\n \n-fn inferred_outlives_of<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn inferred_outlives_of(\n+    tcx: TyCtxt<'_>,\n     item_def_id: DefId,\n-) -> &'tcx [ty::Predicate<'tcx>] {\n+) -> &[ty::Predicate<'_>] {\n     let id = tcx\n         .hir()\n         .as_local_hir_id(item_def_id)\n@@ -70,10 +70,10 @@ fn inferred_outlives_of<'tcx>(\n     }\n }\n \n-fn inferred_outlives_crate<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn inferred_outlives_crate(\n+    tcx: TyCtxt<'_>,\n     crate_num: CrateNum,\n-) -> &'tcx CratePredicatesMap<'tcx> {\n+) -> &CratePredicatesMap<'_> {\n     assert_eq!(crate_num, LOCAL_CRATE);\n \n     // Compute a map from each struct/enum/union S to the **explicit**"}, {"sha": "5ddf95b0f80c21ab5c1d14f62a77beb578fe214a", "filename": "src/librustc_typeck/outlives/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_typeck%2Foutlives%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_typeck%2Foutlives%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Ftest.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -3,7 +3,7 @@ use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::ty::TyCtxt;\n use syntax::symbol::sym;\n \n-pub fn test_inferred_outlives<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn test_inferred_outlives(tcx: TyCtxt<'_>) {\n     tcx.hir()\n        .krate()\n        .visit_all_item_likes(&mut OutlivesTest { tcx });"}, {"sha": "783890da639f477ee40b64fdcdd1d3cddd155ae1", "filename": "src/librustc_typeck/outlives/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_typeck%2Foutlives%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_typeck%2Foutlives%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Futils.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -125,7 +125,7 @@ pub fn insert_outlives_predicate<'tcx>(\n     }\n }\n \n-fn is_free_region<'tcx>(tcx: TyCtxt<'tcx>, region: Region<'_>) -> bool {\n+fn is_free_region(tcx: TyCtxt<'_>, region: Region<'_>) -> bool {\n     // First, screen for regions that might appear in a type header.\n     match region {\n         // These correspond to `T: 'a` relationships:"}, {"sha": "343d7ea656fbb27d532d63ed696f1db19c66dca7", "filename": "src/librustc_typeck/variance/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -34,15 +34,15 @@ pub fn provide(providers: &mut Providers<'_>) {\n     };\n }\n \n-fn crate_variances<'tcx>(tcx: TyCtxt<'tcx>, crate_num: CrateNum) -> &'tcx CrateVariancesMap<'tcx> {\n+fn crate_variances(tcx: TyCtxt<'_>, crate_num: CrateNum) -> &CrateVariancesMap<'_> {\n     assert_eq!(crate_num, LOCAL_CRATE);\n     let mut arena = arena::TypedArena::default();\n     let terms_cx = terms::determine_parameters_to_be_inferred(tcx, &mut arena);\n     let constraints_cx = constraints::add_constraints_from_crate(terms_cx);\n     tcx.arena.alloc(solve::solve_constraints(constraints_cx))\n }\n \n-fn variances_of<'tcx>(tcx: TyCtxt<'tcx>, item_def_id: DefId) -> &'tcx [ty::Variance] {\n+fn variances_of(tcx: TyCtxt<'_>, item_def_id: DefId) -> &[ty::Variance] {\n     let id = tcx.hir().as_local_hir_id(item_def_id).expect(\"expected local def-id\");\n     let unsupported = || {\n         // Variance not relevant."}, {"sha": "0c7ebc34e8f6de8785ef6be04b2cca1dfc9043f7", "filename": "src/librustc_typeck/variance/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_typeck%2Fvariance%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibrustc_typeck%2Fvariance%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Ftest.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -3,7 +3,7 @@ use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::ty::TyCtxt;\n use syntax::symbol::sym;\n \n-pub fn test_variance<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn test_variance(tcx: TyCtxt<'_>) {\n     tcx.hir().krate().visit_all_item_likes(&mut VarianceTest { tcx });\n }\n "}, {"sha": "453b6ebf3c49d5c2f60f2030057b95482108f553", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -440,12 +440,12 @@ pub fn contains_name(attrs: &[Attribute], name: Symbol) -> bool {\n     })\n }\n \n-pub fn find_by_name<'a>(attrs: &'a [Attribute], name: Symbol) -> Option<&'a Attribute> {\n+pub fn find_by_name(attrs: &[Attribute], name: Symbol) -> Option<&Attribute> {\n     attrs.iter().find(|attr| attr.check_name(name))\n }\n \n-pub fn filter_by_name<'a>(attrs: &'a [Attribute], name: Symbol)\n-    -> impl Iterator<Item = &'a Attribute> {\n+pub fn filter_by_name(attrs: &[Attribute], name: Symbol)\n+                      -> impl Iterator<Item=&Attribute> {\n     attrs.iter().filter(move |attr| attr.check_name(name))\n }\n "}, {"sha": "fc8aa4793bc6111eba60d007e077c69ac1d7be7c", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -901,7 +901,7 @@ fn may_begin_with(token: &Token, name: Name) -> bool {\n /// # Returns\n ///\n /// The parsed non-terminal.\n-fn parse_nt<'a>(p: &mut Parser<'a>, sp: Span, name: Symbol) -> Nonterminal {\n+fn parse_nt(p: &mut Parser<'_>, sp: Span, name: Symbol) -> Nonterminal {\n     if name == sym::tt {\n         return token::NtTT(p.parse_token_tree());\n     }"}, {"sha": "f850960624ce7eec4b8c5502c7b60e1a896b6022", "filename": "src/libsyntax/util/parser_testing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibsyntax%2Futil%2Fparser_testing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibsyntax%2Futil%2Fparser_testing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fparser_testing.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -20,7 +20,7 @@ pub fn string_to_stream(source_str: String) -> TokenStream {\n }\n \n /// Map string to parser (via tts)\n-pub fn string_to_parser<'a>(ps: &'a ParseSess, source_str: String) -> Parser<'a> {\n+pub fn string_to_parser(ps: &ParseSess, source_str: String) -> Parser<'_> {\n     new_parser_from_source_str(ps, PathBuf::from(\"bogofile\").into(), source_str)\n }\n "}, {"sha": "637614a18bcc339a07f76cfd40bff8927a0e8171", "filename": "src/libsyntax_ext/assert.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibsyntax_ext%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibsyntax_ext%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fassert.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -131,7 +131,7 @@ fn parse_assert<'a>(\n     Ok(Assert { cond_expr, custom_message })\n }\n \n-fn parse_custom_message<'a>(parser: &mut Parser<'a>) -> Option<TokenStream> {\n+fn parse_custom_message(parser: &mut Parser<'_>) -> Option<TokenStream> {\n     let ts = parser.parse_tokens();\n     if !ts.is_empty() {\n         Some(ts)"}, {"sha": "12482f7248e90b5eb43a71ea90ecde045eb96ead", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -331,8 +331,8 @@ pub type CombineSubstructureFunc<'a> =\n pub type EnumNonMatchCollapsedFunc<'a> =\n     Box<dyn FnMut(&mut ExtCtxt<'_>, Span, (&[Ident], &[Ident]), &[P<Expr>]) -> P<Expr> + 'a>;\n \n-pub fn combine_substructure<'a>(f: CombineSubstructureFunc<'a>)\n-                                -> RefCell<CombineSubstructureFunc<'a>> {\n+pub fn combine_substructure(f: CombineSubstructureFunc<'_>)\n+                            -> RefCell<CombineSubstructureFunc<'_>> {\n     RefCell::new(f)\n }\n "}, {"sha": "02b02e9b836957336bc51e566dc7d3aa211ef711", "filename": "src/libsyntax_ext/deriving/generic/ty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a88f7d4330c62bc039c21831894c2758a43e60/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs?ref=e8a88f7d4330c62bc039c21831894c2758a43e60", "patch": "@@ -39,10 +39,10 @@ pub enum PathKind {\n }\n \n impl<'a> Path<'a> {\n-    pub fn new<'r>(path: Vec<&'r str>) -> Path<'r> {\n+    pub fn new(path: Vec<&str>) -> Path<'_> {\n         Path::new_(path, None, Vec::new(), PathKind::Std)\n     }\n-    pub fn new_local<'r>(path: &'r str) -> Path<'r> {\n+    pub fn new_local(path: &str) -> Path<'_> {\n         Path::new_(vec![path], None, Vec::new(), PathKind::Local)\n     }\n     pub fn new_<'r>(path: Vec<&'r str>,\n@@ -117,7 +117,7 @@ pub enum Const {\n pub fn borrowed_ptrty<'r>() -> PtrTy<'r> {\n     Borrowed(None, ast::Mutability::Immutable)\n }\n-pub fn borrowed<'r>(ty: Box<Ty<'r>>) -> Ty<'r> {\n+pub fn borrowed(ty: Box<Ty<'_>>) -> Ty<'_> {\n     Ptr(ty, borrowed_ptrty())\n }\n "}]}