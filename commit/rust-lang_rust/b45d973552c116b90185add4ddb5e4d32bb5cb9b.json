{"sha": "b45d973552c116b90185add4ddb5e4d32bb5cb9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0NWQ5NzM1NTJjMTE2YjkwMTg1YWRkNGRkYjVlNGQzMmJiNWNiOWI=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-22T11:10:59Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-22T11:10:59Z"}, "message": "Rewrite trans_cast, float->float and float->int casts", "tree": {"sha": "0c25314fbaae708373f61a7a176b5bc6ca0114be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c25314fbaae708373f61a7a176b5bc6ca0114be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b45d973552c116b90185add4ddb5e4d32bb5cb9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b45d973552c116b90185add4ddb5e4d32bb5cb9b", "html_url": "https://github.com/rust-lang/rust/commit/b45d973552c116b90185add4ddb5e4d32bb5cb9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b45d973552c116b90185add4ddb5e4d32bb5cb9b/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5864d4e13aa6280eb1a7652990d2b7e08770e83f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5864d4e13aa6280eb1a7652990d2b7e08770e83f", "html_url": "https://github.com/rust-lang/rust/commit/5864d4e13aa6280eb1a7652990d2b7e08770e83f"}], "stats": {"total": 123, "additions": 73, "deletions": 50}, "files": [{"sha": "f2260922c56604335a911d88829db6ab9c3032fa", "filename": "src/comp/lib/llvm.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b45d973552c116b90185add4ddb5e4d32bb5cb9b/src%2Fcomp%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b45d973552c116b90185add4ddb5e4d32bb5cb9b/src%2Fcomp%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Flib%2Fllvm.rs?ref=b45d973552c116b90185add4ddb5e4d32bb5cb9b", "patch": "@@ -1543,6 +1543,16 @@ fn type_to_str_inner(type_names names, &TypeRef[] outer0, TypeRef ty) -> str {\n     }\n }\n \n+fn float_width(TypeRef llt) -> uint {\n+    ret alt llvm::LLVMGetTypeKind(llt) {\n+      1 { 32u }\n+      2 { 64u }\n+      3 { 80u }\n+      4 | 5 { 128u }\n+      _ { fail \"llvm_float_width called on a non-float type\"; 0u }\n+    };\n+}\n+\n fn fn_ty_param_tys(TypeRef fn_ty) -> TypeRef[] {\n     auto args = ivec::init_elt(0 as TypeRef,\n                                llvm::LLVMCountParamTypes(fn_ty));"}, {"sha": "47b5365d755dafe5e8ed9a3ab0d68a7b6693a3a6", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 62, "deletions": 49, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/b45d973552c116b90185add4ddb5e4d32bb5cb9b/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b45d973552c116b90185add4ddb5e4d32bb5cb9b/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=b45d973552c116b90185add4ddb5e4d32bb5cb9b", "patch": "@@ -4403,60 +4403,73 @@ fn trans_lval(&@block_ctxt cx, &@ast::expr e) -> lval_result {\n \n fn int_cast(&@block_ctxt bcx, TypeRef lldsttype, TypeRef llsrctype,\n             ValueRef llsrc, bool signed) -> ValueRef {\n-    if (llvm::LLVMGetIntTypeWidth(lldsttype) >\n-            llvm::LLVMGetIntTypeWidth(llsrctype)) {\n-        if (signed) {\n-            // Widening signed cast.\n-\n-            ret bcx.build.SExtOrBitCast(llsrc, lldsttype);\n-        }\n-        // Widening unsigned cast.\n+    auto srcsz = llvm::LLVMGetIntTypeWidth(llsrctype);\n+    auto dstsz = llvm::LLVMGetIntTypeWidth(lldsttype);\n+    ret if dstsz == srcsz { bcx.build.BitCast(llsrc, lldsttype) }\n+        else if srcsz > dstsz { bcx.build.TruncOrBitCast(llsrc, lldsttype) }\n+        else if signed { bcx.build.SExtOrBitCast(llsrc, lldsttype) }\n+        else { bcx.build.ZExtOrBitCast(llsrc, lldsttype) };\n+}\n \n-        ret bcx.build.ZExtOrBitCast(llsrc, lldsttype);\n-    }\n-    ret bcx.build.TruncOrBitCast(llsrc, lldsttype);\n+fn float_cast(&@block_ctxt bcx, TypeRef lldsttype, TypeRef llsrctype,\n+              ValueRef llsrc) -> ValueRef {\n+    auto srcsz = lib::llvm::float_width(llsrctype);\n+    auto dstsz = lib::llvm::float_width(lldsttype);\n+    ret if dstsz > srcsz { bcx.build.FPExt(llsrc, lldsttype) }\n+        else if srcsz > dstsz { bcx.build.FPTrunc(llsrc, lldsttype) }\n+        else { llsrc };\n }\n \n fn trans_cast(&@block_ctxt cx, &@ast::expr e, ast::node_id id) -> result {\n+    auto ccx = cx.fcx.lcx.ccx;\n     auto e_res = trans_expr(cx, e);\n-    auto llsrctype = val_ty(e_res.val);\n-    auto t = node_id_type(cx.fcx.lcx.ccx, id);\n-    auto lldsttype = type_of(cx.fcx.lcx.ccx, e.span, t);\n-    if (!ty::type_is_fp(cx.fcx.lcx.ccx.tcx, t)) {\n-\n-        // TODO: native-to-native casts\n-        if (ty::type_is_native(cx.fcx.lcx.ccx.tcx,\n-                               ty::expr_ty(cx.fcx.lcx.ccx.tcx, e))) {\n-            e_res =\n-                rslt(e_res.bcx,\n-                    e_res.bcx.build.PtrToInt(e_res.val, lldsttype));\n-        } else if (ty::type_is_native(cx.fcx.lcx.ccx.tcx, t)) {\n-            e_res =\n-                rslt(e_res.bcx,\n-                    e_res.bcx.build.IntToPtr(e_res.val, lldsttype));\n-        } else {\n-            e_res =\n-                rslt(e_res.bcx,\n-                    int_cast(e_res.bcx, lldsttype, llsrctype, e_res.val,\n-                             ty::type_is_signed(cx.fcx.lcx.ccx.tcx, t)));\n-        }\n-    }\n-    else {\n-        if (ty::type_is_integral(cx.fcx.lcx.ccx.tcx,\n-                                 ty::expr_ty(cx.fcx.lcx.ccx.tcx, e))) {\n-            if (ty::type_is_signed(cx.fcx.lcx.ccx.tcx,\n-                                   ty::expr_ty(cx.fcx.lcx.ccx.tcx, e))) {\n-                e_res = rslt(e_res.bcx,\n-                             e_res.bcx.build.SIToFP(e_res.val, lldsttype));\n-            }\n-            else {\n-                e_res = rslt(e_res.bcx,\n-                             e_res.bcx.build.UIToFP(e_res.val, lldsttype));\n-            }\n-        }\n-        else { cx.fcx.lcx.ccx.sess.unimpl(\"fp cast\"); }\n-    }\n-    ret e_res;\n+    auto ll_t_in = val_ty(e_res.val);\n+    auto t_in = ty::expr_ty(ccx.tcx, e);\n+    auto t_out = node_id_type(ccx, id);\n+    auto ll_t_out = type_of(ccx, e.span, t_out);\n+\n+    tag kind { native_; integral; float; other; }\n+    fn t_kind(&ty::ctxt tcx, ty::t t) -> kind {\n+        ret if ty::type_is_fp(tcx, t) { float }\n+            else if ty::type_is_native(tcx, t) { native_ }\n+            else if ty::type_is_integral(tcx, t) { integral }\n+            else { other };\n+    }\n+    auto k_in = t_kind(ccx.tcx, t_in);\n+    auto k_out = t_kind(ccx.tcx, t_out);\n+    auto s_in = k_in == integral && ty::type_is_signed(ccx.tcx, t_in);\n+\n+    auto newval = alt rec(in=k_in, out=k_out) {\n+      {in: integral, out: integral} {\n+        int_cast(e_res.bcx, ll_t_out, ll_t_in, e_res.val, s_in)\n+      }\n+      {in: float, out: float} {\n+        float_cast(e_res.bcx, ll_t_out, ll_t_in, e_res.val)\n+      }\n+      {in: integral, out: float} {\n+        if s_in { e_res.bcx.build.SIToFP(e_res.val, ll_t_out) }\n+        else { e_res.bcx.build.UIToFP(e_res.val, ll_t_out) }\n+      }\n+      {in: float, out: integral} {\n+        if ty::type_is_signed(ccx.tcx, t_out) {\n+            e_res.bcx.build.FPToSI(e_res.val, ll_t_out)\n+        } else { e_res.bcx.build.FPToUI(e_res.val, ll_t_out) }\n+      }\n+      {in: integral, out: native_} {\n+        e_res.bcx.build.IntToPtr(e_res.val, ll_t_out)\n+      }\n+      {in: native_, out: integral} {\n+        e_res.bcx.build.PtrToInt(e_res.val, ll_t_out)\n+      }\n+      {in: native_, out: native_} {\n+        e_res.bcx.build.PointerCast(e_res.val, ll_t_out)\n+      }\n+      _ {\n+        ccx.sess.bug(\"Translating unsupported cast.\");\n+        C_nil() // FIXME the typechecker doesn't seem to understand _|_ here\n+      }\n+    };\n+    ret rslt(e_res.bcx, newval);\n }\n \n fn trans_bind_thunk(&@local_ctxt cx, &span sp, &ty::t incoming_fty,"}, {"sha": "d5b926f482d2db5a964914f899cf541b61e7f341", "filename": "src/comp/middle/trans_common.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b45d973552c116b90185add4ddb5e4d32bb5cb9b/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b45d973552c116b90185add4ddb5e4d32bb5cb9b/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_common.rs?ref=b45d973552c116b90185add4ddb5e4d32bb5cb9b", "patch": "@@ -456,7 +456,6 @@ fn T_int() -> TypeRef {\n \n fn T_float() -> TypeRef {\n     // FIXME: switch on target type.\n-\n     ret T_f64();\n }\n "}, {"sha": "d6f723f1ea59dd98d9aaaff1ea42770f78937b44", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b45d973552c116b90185add4ddb5e4d32bb5cb9b/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b45d973552c116b90185add4ddb5e4d32bb5cb9b/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=b45d973552c116b90185add4ddb5e4d32bb5cb9b", "patch": "@@ -1158,6 +1158,7 @@ fn type_is_integral(&ctxt cx, &t ty) -> bool {\n             }\n         }\n         case (ty_char) { ret true; }\n+        case (ty_bool) { ret true; }\n         case (_) { ret false; }\n     }\n }"}]}