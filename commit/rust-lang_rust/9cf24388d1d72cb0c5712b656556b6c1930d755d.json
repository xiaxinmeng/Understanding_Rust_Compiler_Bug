{"sha": "9cf24388d1d72cb0c5712b656556b6c1930d755d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljZjI0Mzg4ZDFkNzJjYjBjNTcxMmI2NTY1NTZiNmMxOTMwZDc1NWQ=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-12-30T20:56:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-30T20:56:47Z"}, "message": "Rollup merge of #79479 - camelid:intersperse, r=m-ou-se\n\nAdd `Iterator::intersperse`\n\nThis is a rebase of #75784. I'm hoping to push this past the finish line!\n\ncc `@jonas-schievink`", "tree": {"sha": "32eaa6557605f180d4d367000b6d10b16f04ffeb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32eaa6557605f180d4d367000b6d10b16f04ffeb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9cf24388d1d72cb0c5712b656556b6c1930d755d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf7OmPCRBK7hj4Ov3rIwAAdHIIAHocnZNE6CjXFFGPVXrrkcgE\ngqwu4/KYfs337aJxz+dOHdhpNZuT+R3Ag/6/mfFz7HbdLu2Qu5sfutO7z7NZn8Lz\nEspTCVUfrkLEdyVApMV9x1H9PcBRFOpHZwneZ4k67GORuCHuRq2wGubGdqR/L1xs\nAW34+g5gu+RZw15jv00KxUD51WDBsh7+JRTS/yPABCONCv5I1ex+0mgHb4yukIvD\n6gKT5HcCr5lCK5plS05nosNclo9lr1tIjhB7edjO3LKog5GxkWjHWu3L+GqgBOqR\nEGBJjCiFjK4lc30s5EmFrdPjbjoXtewmSbMiB625/OxlXlrsipEMVjoNrQiY9zw=\n=FySv\n-----END PGP SIGNATURE-----\n", "payload": "tree 32eaa6557605f180d4d367000b6d10b16f04ffeb\nparent 242a252687264e1115dbfa5f2b4890a35d224a05\nparent 40bbb7fad4b3ce6b8738ed2d524388b23d58100e\nauthor Mara Bos <m-ou.se@m-ou.se> 1609361807 +0000\ncommitter GitHub <noreply@github.com> 1609361807 +0000\n\nRollup merge of #79479 - camelid:intersperse, r=m-ou-se\n\nAdd `Iterator::intersperse`\n\nThis is a rebase of #75784. I'm hoping to push this past the finish line!\n\ncc `@jonas-schievink`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9cf24388d1d72cb0c5712b656556b6c1930d755d", "html_url": "https://github.com/rust-lang/rust/commit/9cf24388d1d72cb0c5712b656556b6c1930d755d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9cf24388d1d72cb0c5712b656556b6c1930d755d/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "242a252687264e1115dbfa5f2b4890a35d224a05", "url": "https://api.github.com/repos/rust-lang/rust/commits/242a252687264e1115dbfa5f2b4890a35d224a05", "html_url": "https://github.com/rust-lang/rust/commit/242a252687264e1115dbfa5f2b4890a35d224a05"}, {"sha": "40bbb7fad4b3ce6b8738ed2d524388b23d58100e", "url": "https://api.github.com/repos/rust-lang/rust/commits/40bbb7fad4b3ce6b8738ed2d524388b23d58100e", "html_url": "https://github.com/rust-lang/rust/commit/40bbb7fad4b3ce6b8738ed2d524388b23d58100e"}], "stats": {"total": 191, "additions": 189, "deletions": 2}, "files": [{"sha": "362326725490ff3c72e96afcfd2253d104092a1a", "filename": "library/core/src/iter/adapters/intersperse.rs", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/9cf24388d1d72cb0c5712b656556b6c1930d755d/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fintersperse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cf24388d1d72cb0c5712b656556b6c1930d755d/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fintersperse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fintersperse.rs?ref=9cf24388d1d72cb0c5712b656556b6c1930d755d", "patch": "@@ -0,0 +1,76 @@\n+use super::Peekable;\n+\n+/// An iterator adapter that places a separator between all elements.\n+#[unstable(feature = \"iter_intersperse\", reason = \"recently added\", issue = \"79524\")]\n+#[derive(Debug, Clone)]\n+pub struct Intersperse<I: Iterator>\n+where\n+    I::Item: Clone,\n+{\n+    separator: I::Item,\n+    iter: Peekable<I>,\n+    needs_sep: bool,\n+}\n+\n+impl<I: Iterator> Intersperse<I>\n+where\n+    I::Item: Clone,\n+{\n+    pub(in crate::iter) fn new(iter: I, separator: I::Item) -> Self {\n+        Self { iter: iter.peekable(), separator, needs_sep: false }\n+    }\n+}\n+\n+#[unstable(feature = \"iter_intersperse\", reason = \"recently added\", issue = \"79524\")]\n+impl<I> Iterator for Intersperse<I>\n+where\n+    I: Iterator,\n+    I::Item: Clone,\n+{\n+    type Item = I::Item;\n+\n+    #[inline]\n+    fn next(&mut self) -> Option<I::Item> {\n+        if self.needs_sep && self.iter.peek().is_some() {\n+            self.needs_sep = false;\n+            Some(self.separator.clone())\n+        } else {\n+            self.needs_sep = true;\n+            self.iter.next()\n+        }\n+    }\n+\n+    fn fold<B, F>(mut self, init: B, mut f: F) -> B\n+    where\n+        Self: Sized,\n+        F: FnMut(B, Self::Item) -> B,\n+    {\n+        let mut accum = init;\n+\n+        // Use `peek()` first to avoid calling `next()` on an empty iterator.\n+        if !self.needs_sep || self.iter.peek().is_some() {\n+            if let Some(x) = self.iter.next() {\n+                accum = f(accum, x);\n+            }\n+        }\n+\n+        let element = &self.separator;\n+\n+        self.iter.fold(accum, |mut accum, x| {\n+            accum = f(accum, element.clone());\n+            accum = f(accum, x);\n+            accum\n+        })\n+    }\n+\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        let (lo, hi) = self.iter.size_hint();\n+        let next_is_elem = !self.needs_sep;\n+        let lo = lo.saturating_sub(next_is_elem as usize).saturating_add(lo);\n+        let hi = match hi {\n+            Some(hi) => hi.saturating_sub(next_is_elem as usize).checked_add(hi),\n+            None => None,\n+        };\n+        (lo, hi)\n+    }\n+}"}, {"sha": "7dfbf32cea7b89773d4fdc926abfe85fbb0f709a", "filename": "library/core/src/iter/adapters/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9cf24388d1d72cb0c5712b656556b6c1930d755d/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cf24388d1d72cb0c5712b656556b6c1930d755d/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs?ref=9cf24388d1d72cb0c5712b656556b6c1930d755d", "patch": "@@ -11,6 +11,7 @@ mod filter_map;\n mod flatten;\n mod fuse;\n mod inspect;\n+mod intersperse;\n mod map;\n mod map_while;\n mod peekable;\n@@ -41,6 +42,9 @@ pub use self::flatten::Flatten;\n #[stable(feature = \"iter_copied\", since = \"1.36.0\")]\n pub use self::copied::Copied;\n \n+#[unstable(feature = \"iter_intersperse\", reason = \"recently added\", issue = \"79524\")]\n+pub use self::intersperse::Intersperse;\n+\n #[unstable(feature = \"iter_map_while\", reason = \"recently added\", issue = \"68537\")]\n pub use self::map_while::MapWhile;\n "}, {"sha": "569de719d03d69b4d86ced6d44fc3cebb93507fb", "filename": "library/core/src/iter/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9cf24388d1d72cb0c5712b656556b6c1930d755d/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cf24388d1d72cb0c5712b656556b6c1930d755d/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs?ref=9cf24388d1d72cb0c5712b656556b6c1930d755d", "patch": "@@ -395,6 +395,8 @@ pub use self::adapters::Cloned;\n pub use self::adapters::Copied;\n #[stable(feature = \"iterator_flatten\", since = \"1.29.0\")]\n pub use self::adapters::Flatten;\n+#[unstable(feature = \"iter_intersperse\", reason = \"recently added\", issue = \"79524\")]\n+pub use self::adapters::Intersperse;\n #[unstable(feature = \"iter_map_while\", reason = \"recently added\", issue = \"68537\")]\n pub use self::adapters::MapWhile;\n #[unstable(feature = \"inplace_iteration\", issue = \"none\")]"}, {"sha": "633175702d870a9e623d4532d432f60bf6e10d08", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9cf24388d1d72cb0c5712b656556b6c1930d755d/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cf24388d1d72cb0c5712b656556b6c1930d755d/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=9cf24388d1d72cb0c5712b656556b6c1930d755d", "patch": "@@ -8,7 +8,7 @@ use crate::ops::{Add, ControlFlow, Try};\n use super::super::TrustedRandomAccess;\n use super::super::{Chain, Cloned, Copied, Cycle, Enumerate, Filter, FilterMap, Fuse};\n use super::super::{FlatMap, Flatten};\n-use super::super::{FromIterator, Product, Sum, Zip};\n+use super::super::{FromIterator, Intersperse, Product, Sum, Zip};\n use super::super::{\n     Inspect, Map, MapWhile, Peekable, Rev, Scan, Skip, SkipWhile, StepBy, Take, TakeWhile,\n };\n@@ -569,6 +569,28 @@ pub trait Iterator {\n         Zip::new(self, other.into_iter())\n     }\n \n+    /// Places a copy of `separator` between all elements.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(iter_intersperse)]\n+    ///\n+    /// let hello = [\"Hello\", \"World\"].iter().copied().intersperse(\" \").collect::<String>();\n+    /// assert_eq!(hello, \"Hello World\");\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"iter_intersperse\", reason = \"recently added\", issue = \"79524\")]\n+    fn intersperse(self, separator: Self::Item) -> Intersperse<Self>\n+    where\n+        Self: Sized,\n+        Self::Item: Clone,\n+    {\n+        Intersperse::new(self, separator)\n+    }\n+\n     /// Takes a closure and creates an iterator which calls that closure on each\n     /// element.\n     ///"}, {"sha": "7376e7848eff540a50832bf8a6eea4e1cdc08639", "filename": "library/core/tests/iter.rs", "status": "modified", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/9cf24388d1d72cb0c5712b656556b6c1930d755d/library%2Fcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cf24388d1d72cb0c5712b656556b6c1930d755d/library%2Fcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter.rs?ref=9cf24388d1d72cb0c5712b656556b6c1930d755d", "patch": "@@ -3505,3 +3505,85 @@ pub fn extend_for_unit() {\n     }\n     assert_eq!(x, 5);\n }\n+\n+#[test]\n+fn test_intersperse() {\n+    let xs = [\"a\", \"\", \"b\", \"c\"];\n+    let v: Vec<&str> = xs.iter().map(|x| x.clone()).intersperse(\", \").collect();\n+    let text: String = v.concat();\n+    assert_eq!(text, \"a, , b, c\".to_string());\n+\n+    let ys = [0, 1, 2, 3];\n+    let mut it = ys[..0].iter().map(|x| *x).intersperse(1);\n+    assert!(it.next() == None);\n+}\n+\n+#[test]\n+fn test_intersperse_size_hint() {\n+    let xs = [\"a\", \"\", \"b\", \"c\"];\n+    let mut iter = xs.iter().map(|x| x.clone()).intersperse(\", \");\n+    assert_eq!(iter.size_hint(), (7, Some(7)));\n+\n+    assert_eq!(iter.next(), Some(\"a\"));\n+    assert_eq!(iter.size_hint(), (6, Some(6)));\n+    assert_eq!(iter.next(), Some(\", \"));\n+    assert_eq!(iter.size_hint(), (5, Some(5)));\n+\n+    assert_eq!([].iter().intersperse(&()).size_hint(), (0, Some(0)));\n+}\n+\n+#[test]\n+fn test_fold_specialization_intersperse() {\n+    let mut iter = (1..2).intersperse(0);\n+    iter.clone().for_each(|x| assert_eq!(Some(x), iter.next()));\n+\n+    let mut iter = (1..3).intersperse(0);\n+    iter.clone().for_each(|x| assert_eq!(Some(x), iter.next()));\n+\n+    let mut iter = (1..4).intersperse(0);\n+    iter.clone().for_each(|x| assert_eq!(Some(x), iter.next()));\n+}\n+\n+#[test]\n+fn test_try_fold_specialization_intersperse_ok() {\n+    let mut iter = (1..2).intersperse(0);\n+    iter.clone().try_for_each(|x| {\n+        assert_eq!(Some(x), iter.next());\n+        Some(())\n+    });\n+\n+    let mut iter = (1..3).intersperse(0);\n+    iter.clone().try_for_each(|x| {\n+        assert_eq!(Some(x), iter.next());\n+        Some(())\n+    });\n+\n+    let mut iter = (1..4).intersperse(0);\n+    iter.clone().try_for_each(|x| {\n+        assert_eq!(Some(x), iter.next());\n+        Some(())\n+    });\n+}\n+\n+#[test]\n+fn test_try_fold_specialization_intersperse_err() {\n+    let orig_iter = [\"a\", \"b\"].iter().copied().intersperse(\"-\");\n+\n+    // Abort after the first item.\n+    let mut iter = orig_iter.clone();\n+    iter.try_for_each(|_| None::<()>);\n+    assert_eq!(iter.next(), Some(\"-\"));\n+    assert_eq!(iter.next(), Some(\"b\"));\n+    assert_eq!(iter.next(), None);\n+\n+    // Abort after the second item.\n+    let mut iter = orig_iter.clone();\n+    iter.try_for_each(|item| if item == \"-\" { None } else { Some(()) });\n+    assert_eq!(iter.next(), Some(\"b\"));\n+    assert_eq!(iter.next(), None);\n+\n+    // Abort after the third item.\n+    let mut iter = orig_iter.clone();\n+    iter.try_for_each(|item| if item == \"b\" { None } else { Some(()) });\n+    assert_eq!(iter.next(), None);\n+}"}, {"sha": "fba3294e0bbdb1f5fdf3e3efef9fbc1d4dc23b7e", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9cf24388d1d72cb0c5712b656556b6c1930d755d/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cf24388d1d72cb0c5712b656556b6c1930d755d/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=9cf24388d1d72cb0c5712b656556b6c1930d755d", "patch": "@@ -51,6 +51,7 @@\n #![feature(array_value_iter)]\n #![feature(iter_advance_by)]\n #![feature(iter_partition_in_place)]\n+#![feature(iter_intersperse)]\n #![feature(iter_is_partitioned)]\n #![feature(iter_order_by)]\n #![feature(cmp_min_max_by)]"}, {"sha": "a6c090c6576ef4f200973b3076d3b626112a353f", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9cf24388d1d72cb0c5712b656556b6c1930d755d/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cf24388d1d72cb0c5712b656556b6c1930d755d/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=9cf24388d1d72cb0c5712b656556b6c1930d755d", "patch": "@@ -8,7 +8,6 @@ use crate::clean::{\n };\n use crate::core::DocContext;\n \n-use itertools::Itertools;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};"}, {"sha": "7ed64c5813fcd8f00203a10d6ad7afa47d0470cf", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9cf24388d1d72cb0c5712b656556b6c1930d755d/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cf24388d1d72cb0c5712b656556b6c1930d755d/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=9cf24388d1d72cb0c5712b656556b6c1930d755d", "patch": "@@ -17,6 +17,7 @@\n #![feature(type_ascription)]\n #![feature(split_inclusive)]\n #![feature(str_split_once)]\n+#![feature(iter_intersperse)]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}]}