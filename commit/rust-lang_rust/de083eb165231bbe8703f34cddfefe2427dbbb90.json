{"sha": "de083eb165231bbe8703f34cddfefe2427dbbb90", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlMDgzZWIxNjUyMzFiYmU4NzAzZjM0Y2RkZmVmZTI0MjdkYmJiOTA=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-11-10T09:07:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-11-10T09:07:05Z"}, "message": "Rollup merge of #45856 - estebank:issue-45829, r=nikomatsakis\n\nFix help for duplicated names: `extern crate (...) as (...)`\n\nOn the case of duplicated names caused by an `extern crate` statement\nwith a rename, don't include the inline suggestion, instead using a span\nlabel with only the text to avoid incorrect rust code output.\n\nFix #45829.", "tree": {"sha": "589b37f74e43129ba88d115ade85aba9d020bbce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/589b37f74e43129ba88d115ade85aba9d020bbce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de083eb165231bbe8703f34cddfefe2427dbbb90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de083eb165231bbe8703f34cddfefe2427dbbb90", "html_url": "https://github.com/rust-lang/rust/commit/de083eb165231bbe8703f34cddfefe2427dbbb90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de083eb165231bbe8703f34cddfefe2427dbbb90/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c4a0a78b8bb536d62d89119187f64da92687cd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c4a0a78b8bb536d62d89119187f64da92687cd5", "html_url": "https://github.com/rust-lang/rust/commit/2c4a0a78b8bb536d62d89119187f64da92687cd5"}, {"sha": "d0339c7e44ea145acdc779f0ecd078b11d212dc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0339c7e44ea145acdc779f0ecd078b11d212dc2", "html_url": "https://github.com/rust-lang/rust/commit/d0339c7e44ea145acdc779f0ecd078b11d212dc2"}], "stats": {"total": 82, "additions": 74, "deletions": 8}, "files": [{"sha": "b30fc38fcbcdf617a92fda12cac1550c57b18ffa", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de083eb165231bbe8703f34cddfefe2427dbbb90/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de083eb165231bbe8703f34cddfefe2427dbbb90/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=de083eb165231bbe8703f34cddfefe2427dbbb90", "patch": "@@ -250,7 +250,7 @@ impl<'a> Resolver<'a> {\n                 }\n             }\n \n-            ItemKind::ExternCrate(_) => {\n+            ItemKind::ExternCrate(as_name) => {\n                 self.crate_loader.process_item(item, &self.definitions);\n \n                 // n.b. we don't need to look at the path option here, because cstore already did\n@@ -265,7 +265,7 @@ impl<'a> Resolver<'a> {\n                     id: item.id,\n                     parent,\n                     imported_module: Cell::new(Some(module)),\n-                    subclass: ImportDirectiveSubclass::ExternCrate,\n+                    subclass: ImportDirectiveSubclass::ExternCrate(as_name),\n                     span: item.span,\n                     module_path: Vec::new(),\n                     vis: Cell::new(vis),"}, {"sha": "5820acf1b9006132aefa9479ceccdf750c6cfca5", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de083eb165231bbe8703f34cddfefe2427dbbb90/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de083eb165231bbe8703f34cddfefe2427dbbb90/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=de083eb165231bbe8703f34cddfefe2427dbbb90", "patch": "@@ -120,7 +120,7 @@ pub fn check_crate(resolver: &mut Resolver, krate: &ast::Crate) {\n             _ if directive.used.get() ||\n                  directive.vis.get() == ty::Visibility::Public ||\n                  directive.span.source_equal(&DUMMY_SP) => {}\n-            ImportDirectiveSubclass::ExternCrate => {\n+            ImportDirectiveSubclass::ExternCrate(_) => {\n                 resolver.maybe_unused_extern_crates.push((directive.id, directive.span));\n             }\n             ImportDirectiveSubclass::MacroUse => {"}, {"sha": "58bdf542fc9d4d6b02655c6585c151e3349feb1b", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/de083eb165231bbe8703f34cddfefe2427dbbb90/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de083eb165231bbe8703f34cddfefe2427dbbb90/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=de083eb165231bbe8703f34cddfefe2427dbbb90", "patch": "@@ -1118,7 +1118,7 @@ impl<'a> NameBinding<'a> {\n         match self.kind {\n             NameBindingKind::Import {\n                 directive: &ImportDirective {\n-                    subclass: ImportDirectiveSubclass::ExternCrate, ..\n+                    subclass: ImportDirectiveSubclass::ExternCrate(_), ..\n                 }, ..\n             } => true,\n             _ => false,\n@@ -1132,6 +1132,15 @@ impl<'a> NameBinding<'a> {\n         }\n     }\n \n+    fn is_renamed_extern_crate(&self) -> bool {\n+        if let NameBindingKind::Import { directive, ..} = self.kind {\n+            if let ImportDirectiveSubclass::ExternCrate(Some(_)) = directive.subclass {\n+                return true;\n+            }\n+        }\n+        false\n+    }\n+\n     fn is_glob_import(&self) -> bool {\n         match self.kind {\n             NameBindingKind::Import { directive, .. } => directive.is_glob(),\n@@ -3700,7 +3709,8 @@ impl<'a> Resolver<'a> {\n             let cm = self.session.codemap();\n             let rename_msg = \"You can use `as` to change the binding name of the import\";\n \n-            if let Ok(snippet) = cm.span_to_snippet(binding.span) {\n+            if let (Ok(snippet), false) = (cm.span_to_snippet(binding.span),\n+                                           binding.is_renamed_extern_crate()) {\n                 err.span_suggestion(binding.span,\n                                     rename_msg,\n                                     format!(\"{} as Other{}\", snippet, name));"}, {"sha": "bcbabd700946ad904b2ffaba39e05dd6adc17734", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/de083eb165231bbe8703f34cddfefe2427dbbb90/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de083eb165231bbe8703f34cddfefe2427dbbb90/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=de083eb165231bbe8703f34cddfefe2427dbbb90", "patch": "@@ -23,7 +23,7 @@ use rustc::hir::def_id::DefId;\n use rustc::hir::def::*;\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n \n-use syntax::ast::{Ident, SpannedIdent, NodeId};\n+use syntax::ast::{Ident, Name, SpannedIdent, NodeId};\n use syntax::ext::base::Determinacy::{self, Determined, Undetermined};\n use syntax::ext::hygiene::Mark;\n use syntax::parse::token;\n@@ -48,7 +48,7 @@ pub enum ImportDirectiveSubclass<'a> {\n         max_vis: Cell<ty::Visibility>, // The visibility of the greatest reexport.\n         // n.b. `max_vis` is only used in `finalize_import` to check for reexport errors.\n     },\n-    ExternCrate,\n+    ExternCrate(Option<Name>),\n     MacroUse,\n }\n \n@@ -923,7 +923,7 @@ fn import_directive_subclass_to_string(subclass: &ImportDirectiveSubclass) -> St\n     match *subclass {\n         SingleImport { source, .. } => source.to_string(),\n         GlobImport { .. } => \"*\".to_string(),\n-        ExternCrate => \"<extern crate>\".to_string(),\n+        ExternCrate(_) => \"<extern crate>\".to_string(),\n         MacroUse => \"#[macro_use]\".to_string(),\n     }\n }"}, {"sha": "e125cc0c19c373deedf956e4151fd1e3edb407e1", "filename": "src/test/compile-fail/E0259.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/de083eb165231bbe8703f34cddfefe2427dbbb90/src%2Ftest%2Fcompile-fail%2FE0259.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de083eb165231bbe8703f34cddfefe2427dbbb90/src%2Ftest%2Fcompile-fail%2FE0259.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0259.rs?ref=de083eb165231bbe8703f34cddfefe2427dbbb90", "patch": "@@ -18,5 +18,6 @@ extern crate libc as alloc;\n //~^ ERROR E0259\n //~| NOTE `alloc` reimported here\n //~| NOTE `alloc` must be defined only once in the type namespace of this module\n+//~| NOTE You can use `as` to change the binding name of the import\n \n fn main() {}"}, {"sha": "b61667cfd882ce02e3a44b5141adea3352a211f1", "filename": "src/test/ui/suggestions/auxiliary/m1.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/de083eb165231bbe8703f34cddfefe2427dbbb90/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Fm1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de083eb165231bbe8703f34cddfefe2427dbbb90/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Fm1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Fm1.rs?ref=de083eb165231bbe8703f34cddfefe2427dbbb90", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub fn foo() {}"}, {"sha": "94ff5e4497fe92d7d7718371a565304903b18ac2", "filename": "src/test/ui/suggestions/auxiliary/m2.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/de083eb165231bbe8703f34cddfefe2427dbbb90/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Fm2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de083eb165231bbe8703f34cddfefe2427dbbb90/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Fm2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Fm2.rs?ref=de083eb165231bbe8703f34cddfefe2427dbbb90", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub fn bar() {}"}, {"sha": "b3fa5871a82f5c38c8eb642a838bd5570d05bb9a", "filename": "src/test/ui/suggestions/extern-crate-rename.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/de083eb165231bbe8703f34cddfefe2427dbbb90/src%2Ftest%2Fui%2Fsuggestions%2Fextern-crate-rename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de083eb165231bbe8703f34cddfefe2427dbbb90/src%2Ftest%2Fui%2Fsuggestions%2Fextern-crate-rename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fextern-crate-rename.rs?ref=de083eb165231bbe8703f34cddfefe2427dbbb90", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:m1.rs\n+// aux-build:m2.rs\n+\n+\n+extern crate m1;\n+extern crate m2 as m1;\n+\n+fn main() {}"}, {"sha": "c15e238e8b0a3c266f02fedd855ca7093d253bef", "filename": "src/test/ui/suggestions/extern-crate-rename.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/de083eb165231bbe8703f34cddfefe2427dbbb90/src%2Ftest%2Fui%2Fsuggestions%2Fextern-crate-rename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de083eb165231bbe8703f34cddfefe2427dbbb90/src%2Ftest%2Fui%2Fsuggestions%2Fextern-crate-rename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fextern-crate-rename.stderr?ref=de083eb165231bbe8703f34cddfefe2427dbbb90", "patch": "@@ -0,0 +1,15 @@\n+error[E0259]: the name `m1` is defined multiple times\n+  --> $DIR/extern-crate-rename.rs:16:1\n+   |\n+15 | extern crate m1;\n+   | ---------------- previous import of the extern crate `m1` here\n+16 | extern crate m2 as m1;\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n+   | |\n+   | `m1` reimported here\n+   | You can use `as` to change the binding name of the import\n+   |\n+   = note: `m1` must be defined only once in the type namespace of this module\n+\n+error: aborting due to previous error\n+"}]}