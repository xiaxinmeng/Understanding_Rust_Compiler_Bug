{"sha": "97b1128589fdaa786a7cf65c5a6ff7ed37a1d2f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3YjExMjg1ODlmZGFhNzg2YTdjZjY1YzVhNmZmN2VkMzdhMWQyZjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-11T10:05:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-11T10:05:09Z"}, "message": "Auto merge of #62574 - petrochenkov:dcrate-40000, r=Mark-Simulacrum\n\npretty-print: Do not lose the `$crate` printing flag in `print_tt`\n\nhttps://github.com/rust-lang/rust/pull/62393 had this accidental mistake.\n\nFixes https://github.com/rust-lang/rust/issues/62562\nr? @Mark-Simulacrum", "tree": {"sha": "aa1bcd70ab6028b5f5864b2f6eb3fc9eacb7408c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa1bcd70ab6028b5f5864b2f6eb3fc9eacb7408c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97b1128589fdaa786a7cf65c5a6ff7ed37a1d2f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97b1128589fdaa786a7cf65c5a6ff7ed37a1d2f3", "html_url": "https://github.com/rust-lang/rust/commit/97b1128589fdaa786a7cf65c5a6ff7ed37a1d2f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97b1128589fdaa786a7cf65c5a6ff7ed37a1d2f3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69070058cd2fdb57ebbbbef94892cfb5688ce27f", "url": "https://api.github.com/repos/rust-lang/rust/commits/69070058cd2fdb57ebbbbef94892cfb5688ce27f", "html_url": "https://github.com/rust-lang/rust/commit/69070058cd2fdb57ebbbbef94892cfb5688ce27f"}, {"sha": "e38106599a1f3f27de889e5efc8d1812571b310b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e38106599a1f3f27de889e5efc8d1812571b310b", "html_url": "https://github.com/rust-lang/rust/commit/e38106599a1f3f27de889e5efc8d1812571b310b"}], "stats": {"total": 75, "additions": 45, "deletions": 30}, "files": [{"sha": "3b6064fcdf7bf2c7e24fc86f000f9a6356fa21b8", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/97b1128589fdaa786a7cf65c5a6ff7ed37a1d2f3/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97b1128589fdaa786a7cf65c5a6ff7ed37a1d2f3/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=97b1128589fdaa786a7cf65c5a6ff7ed37a1d2f3", "patch": "@@ -187,8 +187,9 @@ pub fn literal_to_string(lit: token::Lit) -> String {\n     out\n }\n \n-fn ident_to_string(ident: ast::Ident, is_raw: bool) -> String {\n-    ident_to_string_ext(ident.name, is_raw, Some(ident.span))\n+/// Print an ident from AST, `$crate` is converted into its respective crate name.\n+fn ast_ident_to_string(ident: ast::Ident, is_raw: bool) -> String {\n+    ident_to_string(ident.name, is_raw, Some(ident.span))\n }\n \n // AST pretty-printer is used as a fallback for turning AST structures into token streams for\n@@ -202,9 +203,7 @@ fn ident_to_string(ident: ast::Ident, is_raw: bool) -> String {\n // but not otherwise. Pretty-printing is the only way for proc macros to discover token contents,\n // so we should not perform this lossy conversion if the top level call to the pretty-printer was\n // done for a token stream or a single token.\n-fn ident_to_string_ext(\n-    name: ast::Name, is_raw: bool, convert_dollar_crate: Option<Span>\n-) -> String {\n+fn ident_to_string(name: ast::Name, is_raw: bool, convert_dollar_crate: Option<Span>) -> String {\n     if is_raw {\n         format!(\"r#{}\", name)\n     } else {\n@@ -222,6 +221,7 @@ fn ident_to_string_ext(\n     }\n }\n \n+/// Print the token kind precisely, without converting `$crate` into its respective crate name.\n pub fn token_kind_to_string(tok: &TokenKind) -> String {\n     token_kind_to_string_ext(tok, None)\n }\n@@ -272,7 +272,7 @@ fn token_kind_to_string_ext(tok: &TokenKind, convert_dollar_crate: Option<Span>)\n         token::Literal(lit) => literal_to_string(lit),\n \n         /* Name components */\n-        token::Ident(s, is_raw)     => ident_to_string_ext(s, is_raw, convert_dollar_crate),\n+        token::Ident(s, is_raw)     => ident_to_string(s, is_raw, convert_dollar_crate),\n         token::Lifetime(s)          => s.to_string(),\n \n         /* Other */\n@@ -286,6 +286,7 @@ fn token_kind_to_string_ext(tok: &TokenKind, convert_dollar_crate: Option<Span>)\n     }\n }\n \n+/// Print the token precisely, without converting `$crate` into its respective crate name.\n pub fn token_to_string(token: &Token) -> String {\n     token_to_string_ext(token, false)\n }\n@@ -305,7 +306,7 @@ crate fn nonterminal_to_string(nt: &Nonterminal) -> String {\n         token::NtBlock(ref e)       => block_to_string(e),\n         token::NtStmt(ref e)        => stmt_to_string(e),\n         token::NtPat(ref e)         => pat_to_string(e),\n-        token::NtIdent(e, is_raw)   => ident_to_string(e, is_raw),\n+        token::NtIdent(e, is_raw)   => ast_ident_to_string(e, is_raw),\n         token::NtLifetime(e)        => e.to_string(),\n         token::NtLiteral(ref e)     => expr_to_string(e),\n         token::NtTT(ref tree)       => tt_to_string(tree.clone()),\n@@ -341,7 +342,7 @@ pub fn tts_to_string(tts: &[tokenstream::TokenTree]) -> String {\n }\n \n pub fn tokens_to_string(tokens: TokenStream) -> String {\n-    to_string(|s| s.print_tts_ext(tokens, false))\n+    to_string(|s| s.print_tts(tokens, false))\n }\n \n pub fn stmt_to_string(stmt: &ast::Stmt) -> String {\n@@ -601,7 +602,7 @@ pub trait PrintState<'a>: std::ops::Deref<Target=pp::Printer> + std::ops::DerefM\n                 self.word(\"::\");\n             }\n             if segment.ident.name != kw::PathRoot {\n-                self.word(ident_to_string(segment.ident, segment.ident.is_raw_guess()));\n+                self.word(ast_ident_to_string(segment.ident, segment.ident.is_raw_guess()));\n             }\n         }\n     }\n@@ -629,7 +630,7 @@ pub trait PrintState<'a>: std::ops::Deref<Target=pp::Printer> + std::ops::DerefM\n             } else {\n                 self.print_attribute_path(&attr.path);\n                 self.space();\n-                self.print_tts(attr.tokens.clone());\n+                self.print_tts(attr.tokens.clone(), true);\n             }\n             self.word(\"]\");\n         }\n@@ -689,18 +690,14 @@ pub trait PrintState<'a>: std::ops::Deref<Target=pp::Printer> + std::ops::DerefM\n             TokenTree::Delimited(_, delim, tts) => {\n                 self.word(token_kind_to_string(&token::OpenDelim(delim)));\n                 self.space();\n-                self.print_tts(tts);\n+                self.print_tts(tts, convert_dollar_crate);\n                 self.space();\n                 self.word(token_kind_to_string(&token::CloseDelim(delim)))\n             },\n         }\n     }\n \n-    fn print_tts(&mut self, tts: tokenstream::TokenStream) {\n-        self.print_tts_ext(tts, true)\n-    }\n-\n-    fn print_tts_ext(&mut self, tts: tokenstream::TokenStream, convert_dollar_crate: bool) {\n+    fn print_tts(&mut self, tts: tokenstream::TokenStream, convert_dollar_crate: bool) {\n         self.ibox(0);\n         for (i, tt) in tts.into_trees().enumerate() {\n             if i != 0 {\n@@ -1247,7 +1244,7 @@ impl<'a> State<'a> {\n                     self.print_ident(item.ident);\n                     self.cbox(INDENT_UNIT);\n                     self.popen();\n-                    self.print_tts(mac.node.stream());\n+                    self.print_tts(mac.node.stream(), true);\n                     self.pclose();\n                     self.s.word(\";\");\n                     self.end();\n@@ -1258,7 +1255,7 @@ impl<'a> State<'a> {\n                 self.print_ident(item.ident);\n                 self.cbox(INDENT_UNIT);\n                 self.popen();\n-                self.print_tts(tts.stream());\n+                self.print_tts(tts.stream(), true);\n                 self.pclose();\n                 self.s.word(\";\");\n                 self.end();\n@@ -1659,7 +1656,7 @@ impl<'a> State<'a> {\n                 self.bopen();\n             }\n         }\n-        self.print_tts(m.node.stream());\n+        self.print_tts(m.node.stream(), true);\n         match m.node.delim {\n             MacDelimiter::Parenthesis => self.pclose(),\n             MacDelimiter::Bracket => self.s.word(\"]\"),\n@@ -2209,7 +2206,7 @@ impl<'a> State<'a> {\n     }\n \n     crate fn print_ident(&mut self, ident: ast::Ident) {\n-        self.s.word(ident_to_string(ident, ident.is_raw_guess()));\n+        self.s.word(ast_ident_to_string(ident, ident.is_raw_guess()));\n         self.ann.post(self, AnnNode::Ident(&ident))\n     }\n "}, {"sha": "bbe6a48c5b18600e2d50adb0636e288207b504fa", "filename": "src/test/ui/macros/auxiliary/dollar-crate-nested-encoding.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/97b1128589fdaa786a7cf65c5a6ff7ed37a1d2f3/src%2Ftest%2Fui%2Fmacros%2Fauxiliary%2Fdollar-crate-nested-encoding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97b1128589fdaa786a7cf65c5a6ff7ed37a1d2f3/src%2Ftest%2Fui%2Fmacros%2Fauxiliary%2Fdollar-crate-nested-encoding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fauxiliary%2Fdollar-crate-nested-encoding.rs?ref=97b1128589fdaa786a7cf65c5a6ff7ed37a1d2f3", "patch": "@@ -0,0 +1,10 @@\n+pub type S = u8;\n+\n+macro_rules! generate_exported { () => {\n+    #[macro_export]\n+    macro_rules! exported {\n+        () => ($crate::S)\n+    }\n+}}\n+\n+generate_exported!();"}, {"sha": "5242f7830bbdb5cc1c510a638c18b8e5144a8cea", "filename": "src/test/ui/macros/dollar-crate-nested-encoding.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/97b1128589fdaa786a7cf65c5a6ff7ed37a1d2f3/src%2Ftest%2Fui%2Fmacros%2Fdollar-crate-nested-encoding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97b1128589fdaa786a7cf65c5a6ff7ed37a1d2f3/src%2Ftest%2Fui%2Fmacros%2Fdollar-crate-nested-encoding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fdollar-crate-nested-encoding.rs?ref=97b1128589fdaa786a7cf65c5a6ff7ed37a1d2f3", "patch": "@@ -0,0 +1,8 @@\n+// check-pass\n+// aux-build:dollar-crate-nested-encoding.rs\n+\n+extern crate dollar_crate_nested_encoding;\n+\n+type A = dollar_crate_nested_encoding::exported!();\n+\n+fn main() {}"}, {"sha": "0611fcb13f267dc17f471345ce1976df45be51b0", "filename": "src/test/ui/proc-macro/dollar-crate-issue-57089.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97b1128589fdaa786a7cf65c5a6ff7ed37a1d2f3/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-57089.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/97b1128589fdaa786a7cf65c5a6ff7ed37a1d2f3/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-57089.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-57089.stdout?ref=97b1128589fdaa786a7cf65c5a6ff7ed37a1d2f3", "patch": "@@ -1,4 +1,4 @@\n-PRINT-BANG INPUT (DISPLAY): struct M ( crate :: S ) ;\n+PRINT-BANG INPUT (DISPLAY): struct M ( $crate :: S ) ;\n PRINT-BANG INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n@@ -39,7 +39,7 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n     },\n ]\n PRINT-ATTR INPUT (DISPLAY): struct A(crate::S);\n-PRINT-ATTR RE-COLLECTED (DISPLAY): struct A ( crate :: S ) ;\n+PRINT-ATTR RE-COLLECTED (DISPLAY): struct A ( $crate :: S ) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\","}, {"sha": "6c483d7a91bbab5a35fdc9d2bfe0464c766a98c6", "filename": "src/test/ui/proc-macro/dollar-crate-issue-62325.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97b1128589fdaa786a7cf65c5a6ff7ed37a1d2f3/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-62325.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/97b1128589fdaa786a7cf65c5a6ff7ed37a1d2f3/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-62325.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-62325.stdout?ref=97b1128589fdaa786a7cf65c5a6ff7ed37a1d2f3", "patch": "@@ -1,5 +1,5 @@\n PRINT-ATTR INPUT (DISPLAY): struct A(identity!(crate :: S));\n-PRINT-ATTR RE-COLLECTED (DISPLAY): struct A ( identity ! ( crate :: S ) ) ;\n+PRINT-ATTR RE-COLLECTED (DISPLAY): struct A ( identity ! ( $crate :: S ) ) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n@@ -55,7 +55,7 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n     },\n ]\n PRINT-ATTR INPUT (DISPLAY): struct B(identity!(::dollar_crate_external :: S));\n-PRINT-ATTR RE-COLLECTED (DISPLAY): struct B ( identity ! ( ::dollar_crate_external :: S ) ) ;\n+PRINT-ATTR RE-COLLECTED (DISPLAY): struct B ( identity ! ( $crate :: S ) ) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\","}, {"sha": "3c88ee99842a26e27f2e717fc08ce453e0372c4d", "filename": "src/test/ui/proc-macro/dollar-crate.stdout", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/97b1128589fdaa786a7cf65c5a6ff7ed37a1d2f3/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/97b1128589fdaa786a7cf65c5a6ff7ed37a1d2f3/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stdout?ref=97b1128589fdaa786a7cf65c5a6ff7ed37a1d2f3", "patch": "@@ -1,4 +1,4 @@\n-PRINT-BANG INPUT (DISPLAY): struct M ( crate :: S ) ;\n+PRINT-BANG INPUT (DISPLAY): struct M ( $crate :: S ) ;\n PRINT-BANG INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n@@ -39,7 +39,7 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n     },\n ]\n PRINT-ATTR INPUT (DISPLAY): struct A(crate::S);\n-PRINT-ATTR RE-COLLECTED (DISPLAY): struct A ( crate :: S ) ;\n+PRINT-ATTR RE-COLLECTED (DISPLAY): struct A ( $crate :: S ) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n@@ -80,7 +80,7 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n     },\n ]\n PRINT-DERIVE INPUT (DISPLAY): struct D(crate::S);\n-PRINT-DERIVE RE-COLLECTED (DISPLAY): struct D ( crate :: S ) ;\n+PRINT-DERIVE RE-COLLECTED (DISPLAY): struct D ( $crate :: S ) ;\n PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n@@ -120,7 +120,7 @@ PRINT-DERIVE INPUT (DEBUG): TokenStream [\n         span: #2 bytes(LO..HI),\n     },\n ]\n-PRINT-BANG INPUT (DISPLAY): struct M ( ::dollar_crate_external :: S ) ;\n+PRINT-BANG INPUT (DISPLAY): struct M ( $crate :: S ) ;\n PRINT-BANG INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n@@ -161,7 +161,7 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n     },\n ]\n PRINT-ATTR INPUT (DISPLAY): struct A(::dollar_crate_external::S);\n-PRINT-ATTR RE-COLLECTED (DISPLAY): struct A ( ::dollar_crate_external :: S ) ;\n+PRINT-ATTR RE-COLLECTED (DISPLAY): struct A ( $crate :: S ) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n@@ -202,7 +202,7 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n     },\n ]\n PRINT-DERIVE INPUT (DISPLAY): struct D(::dollar_crate_external::S);\n-PRINT-DERIVE RE-COLLECTED (DISPLAY): struct D ( ::dollar_crate_external :: S ) ;\n+PRINT-DERIVE RE-COLLECTED (DISPLAY): struct D ( $crate :: S ) ;\n PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\","}]}