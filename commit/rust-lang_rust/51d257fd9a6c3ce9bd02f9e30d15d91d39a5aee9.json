{"sha": "51d257fd9a6c3ce9bd02f9e30d15d91d39a5aee9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxZDI1N2ZkOWE2YzNjZTliZDAyZjllMzBkMTVkOTFkMzlhNWFlZTk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-06-01T20:34:05Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-06-06T05:07:40Z"}, "message": "core::rt: Add SharedPort", "tree": {"sha": "62094b6c207804d3cd90d8fc7082180c33d0a856", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62094b6c207804d3cd90d8fc7082180c33d0a856"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51d257fd9a6c3ce9bd02f9e30d15d91d39a5aee9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51d257fd9a6c3ce9bd02f9e30d15d91d39a5aee9", "html_url": "https://github.com/rust-lang/rust/commit/51d257fd9a6c3ce9bd02f9e30d15d91d39a5aee9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51d257fd9a6c3ce9bd02f9e30d15d91d39a5aee9/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "422f663a988370a93a6ae21b92215e49750c2e87", "url": "https://api.github.com/repos/rust-lang/rust/commits/422f663a988370a93a6ae21b92215e49750c2e87", "html_url": "https://github.com/rust-lang/rust/commit/422f663a988370a93a6ae21b92215e49750c2e87"}], "stats": {"total": 132, "additions": 132, "deletions": 0}, "files": [{"sha": "4772a8596bfb658cff01700762aa1cd36e733564", "filename": "src/libstd/rt/comm.rs", "status": "modified", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/51d257fd9a6c3ce9bd02f9e30d15d91d39a5aee9/src%2Flibstd%2Frt%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51d257fd9a6c3ce9bd02f9e30d15d91d39a5aee9/src%2Flibstd%2Frt%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fcomm.rs?ref=51d257fd9a6c3ce9bd02f9e30d15d91d39a5aee9", "patch": "@@ -416,6 +416,61 @@ impl<T> Clone for SharedChan<T> {\n     }\n }\n \n+pub struct SharedPort<T> {\n+    // The next port on which we will receive the next port on which we will receive T\n+    priv next_link: UnsafeAtomicRcBox<AtomicOption<PortOne<StreamPortOne<T>>>>\n+}\n+\n+impl<T> SharedPort<T> {\n+    pub fn new(port: Port<T>) -> SharedPort<T> {\n+        // Put the data port into a new link pipe\n+        let next_data_port = port.next.take();\n+        let (next_link_port, next_link_chan) = oneshot();\n+        next_link_chan.send(next_data_port);\n+        let next_link = AtomicOption::new(~next_link_port);\n+        SharedPort { next_link: UnsafeAtomicRcBox::new(next_link) }\n+    }\n+}\n+\n+impl<T: Owned> GenericPort<T> for SharedPort<T> {\n+    fn recv(&self) -> T {\n+        match self.try_recv() {\n+            Some(val) => val,\n+            None => {\n+                fail!(\"receiving on a closed channel\");\n+            }\n+        }\n+    }\n+\n+    fn try_recv(&self) -> Option<T> {\n+        unsafe {\n+            let (next_link_port, next_link_chan) = oneshot();\n+            let link_port = (*self.next_link.get()).swap(~next_link_port, SeqCst);\n+            let link_port = link_port.unwrap();\n+            let data_port = link_port.recv();\n+            let (next_data_port, res) = match data_port.try_recv() {\n+                Some(StreamPayload { val, next }) => {\n+                    (next, Some(val))\n+                }\n+                None => {\n+                    let (next_data_port, _) = oneshot();\n+                    (next_data_port, None)\n+                }\n+            };\n+            next_link_chan.send(next_data_port);\n+            return res;\n+        }\n+    }\n+}\n+\n+impl<T> Clone for SharedPort<T> {\n+    fn clone(&self) -> SharedPort<T> {\n+        SharedPort {\n+            next_link: self.next_link.clone()\n+        }\n+    }\n+}\n+\n #[cfg(test)]\n mod test {\n     use super::*;\n@@ -702,5 +757,82 @@ mod test {\n             }\n         }\n     }\n+\n+    #[test]\n+    fn shared_port_stress() {\n+        do run_in_mt_newsched_task {\n+            // XXX: Removing these type annotations causes an ICE\n+            let (end_port, end_chan) = stream::<()>();\n+            let (port, chan) = stream::<()>();\n+            let end_chan = SharedChan::new(end_chan);\n+            let port = SharedPort::new(port);\n+            let total = stress_factor() + 100;\n+            for total.times {\n+                let end_chan_clone = end_chan.clone();\n+                let port_clone = port.clone();\n+                do spawntask_random {\n+                    port_clone.recv();\n+                    end_chan_clone.send(());\n+                }\n+            }\n+\n+            for total.times {\n+                chan.send(());\n+            }\n+\n+            for total.times {\n+                end_port.recv();\n+            }\n+        }\n+    }\n+\n+    #[test]\n+    fn shared_port_close_simple() {\n+        do run_in_mt_newsched_task {\n+            let (port, chan) = stream::<()>();\n+            let port = SharedPort::new(port);\n+            { let _chan = chan; }\n+            assert!(port.try_recv().is_none());\n+        }\n+    }\n+\n+    #[test]\n+    fn shared_port_close() {\n+        do run_in_mt_newsched_task {\n+            let (end_port, end_chan) = stream::<bool>();\n+            let (port, chan) = stream::<()>();\n+            let end_chan = SharedChan::new(end_chan);\n+            let port = SharedPort::new(port);\n+            let chan = SharedChan::new(chan);\n+            let send_total = 10;\n+            let recv_total = 20;\n+            do spawntask_random {\n+                for send_total.times {\n+                    let chan_clone = chan.clone();\n+                    do spawntask_random {\n+                        chan_clone.send(());\n+                    }\n+                }\n+            }\n+            let end_chan_clone = end_chan.clone();\n+            do spawntask_random {\n+                for recv_total.times {\n+                    let port_clone = port.clone();\n+                    let end_chan_clone = end_chan_clone.clone();\n+                    do spawntask_random {\n+                        let recvd = port_clone.try_recv().is_some();\n+                        end_chan_clone.send(recvd);\n+                    }\n+                }\n+            }\n+\n+            let mut recvd = 0;\n+            for recv_total.times {\n+                recvd += if end_port.recv() { 1 } else { 0 };\n+            }\n+\n+            assert!(recvd == send_total);\n+        }\n+    }\n }\n "}]}