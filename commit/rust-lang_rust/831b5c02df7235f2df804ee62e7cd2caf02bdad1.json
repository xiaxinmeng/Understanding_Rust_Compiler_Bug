{"sha": "831b5c02df7235f2df804ee62e7cd2caf02bdad1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzMWI1YzAyZGY3MjM1ZjJkZjgwNGVlNjJlN2NkMmNhZjAyYmRhZDE=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-31T14:52:17Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-06-20T11:23:08Z"}, "message": "Take advantage of the lifetime refactoring", "tree": {"sha": "d5aabc075550779d29248e10782c7aab5e044572", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5aabc075550779d29248e10782c7aab5e044572"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/831b5c02df7235f2df804ee62e7cd2caf02bdad1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/831b5c02df7235f2df804ee62e7cd2caf02bdad1", "html_url": "https://github.com/rust-lang/rust/commit/831b5c02df7235f2df804ee62e7cd2caf02bdad1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/831b5c02df7235f2df804ee62e7cd2caf02bdad1/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6015edf9af375385ca9eb2ebbb8794c782fa7244", "url": "https://api.github.com/repos/rust-lang/rust/commits/6015edf9af375385ca9eb2ebbb8794c782fa7244", "html_url": "https://github.com/rust-lang/rust/commit/6015edf9af375385ca9eb2ebbb8794c782fa7244"}], "stats": {"total": 116, "additions": 50, "deletions": 66}, "files": [{"sha": "e3ded0279b44a742010ed5d8979b90a0e1592b6c", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/831b5c02df7235f2df804ee62e7cd2caf02bdad1/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/831b5c02df7235f2df804ee62e7cd2caf02bdad1/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=831b5c02df7235f2df804ee62e7cd2caf02bdad1", "patch": "@@ -743,20 +743,19 @@ pub fn walk_param_bound<'v, V: Visitor<'v>>(visitor: &mut V, bound: &'v ParamBou\n pub fn walk_generic_param<'v, V: Visitor<'v>>(visitor: &mut V, param: &'v GenericParam) {\n     visitor.visit_id(param.id);\n     match param.kind {\n-        GenericParamKind::Lifetime { ref bounds, ref lifetime, .. } => {\n-            match lifetime.name {\n+        GenericParamKind::Lifetime { ref lt_name, .. } => {\n+            match lt_name {\n                 LifetimeName::Name(name) => {\n-                    visitor.visit_name(param.span, name);\n+                    visitor.visit_name(param.span, *name);\n                 }\n                 LifetimeName::Fresh(_) |\n                 LifetimeName::Static |\n                 LifetimeName::Implicit |\n                 LifetimeName::Underscore => {}\n             }\n-            walk_list!(visitor, visit_lifetime, bounds);\n         }\n-        GenericParamKind::Type { name, ref bounds, ref default, ref attrs, .. } => {\n-            visitor.visit_name(param.span, name);\n+        GenericParamKind::Type { ref default, ref attrs, .. } => {\n+            visitor.visit_name(param.span, param.name);\n             walk_list!(visitor, visit_ty, default);\n             walk_list!(visitor, visit_attribute, attrs.iter());\n         }"}, {"sha": "969072a65ae1eaf1a0b5d2e56673e90974de2773", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/831b5c02df7235f2df804ee62e7cd2caf02bdad1/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/831b5c02df7235f2df804ee62e7cd2caf02bdad1/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=831b5c02df7235f2df804ee62e7cd2caf02bdad1", "patch": "@@ -1747,8 +1747,8 @@ impl<'a> LoweringContext<'a> {\n \n     fn lower_parenthesized_parameter_data(\n         &mut self,\n-        data: &ParenthesizedParameterData,\n-    ) -> (hir::PathParameters, bool) {\n+        data: &ParenthesizedArgData,\n+    ) -> (hir::GenericArgs, bool) {\n         // Switch to `PassThrough` mode for anonymous lifetimes: this\n         // means that we permit things like `&Ref<T>`, where `Ref` has\n         // a hidden lifetime parameter. This is needed for backwards\n@@ -1758,7 +1758,7 @@ impl<'a> LoweringContext<'a> {\n             AnonymousLifetimeMode::PassThrough,\n             |this| {\n                 const DISALLOWED: ImplTraitContext = ImplTraitContext::Disallowed;\n-                let &ParenthesizedParameterData { ref inputs, ref output, span } = data;\n+                let &ParenthesizedArgData { ref inputs, ref output, span } = data;\n                 let inputs = inputs.iter().map(|ty| this.lower_ty(ty, DISALLOWED)).collect();\n                 let mk_tup = |this: &mut Self, tys, span| {\n                     let LoweredNodeId { node_id, hir_id } = this.next_id();\n@@ -1767,7 +1767,7 @@ impl<'a> LoweringContext<'a> {\n \n                 (\n                     hir::GenericArgs {\n-                        parameters: hir_vec![GenericArg::Type(mk_tup(this, inputs, span))],\n+                        args: hir_vec![GenericArg::Type(mk_tup(this, inputs, span))],\n                         bindings: hir_vec![\n                             hir::TypeBinding {\n                                 id: this.next_id().node_id,"}, {"sha": "14cecba490d0ab3c99258ab9f7ab2429ce46d8f2", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/831b5c02df7235f2df804ee62e7cd2caf02bdad1/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/831b5c02df7235f2df804ee62e7cd2caf02bdad1/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=831b5c02df7235f2df804ee62e7cd2caf02bdad1", "patch": "@@ -347,14 +347,7 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n     }\n \n     fn visit_generic_param(&mut self, param: &'hir GenericParam) {\n-        match param.kind {\n-            GenericParamKind::Lifetime { ref lifetime_deprecated, .. } => {\n-                self.insert(param.id, NodeLifetime(lifetime_deprecated));\n-            }\n-            GenericParamKind::Type { .. } => {\n-                self.insert(param.id, NodeGenericParam(param));\n-            }\n-        }\n+        self.insert(param.id, NodeGenericParam(param));\n         intravisit::walk_generic_param(self, param);\n     }\n "}, {"sha": "883f24b37db9d7ff7b59c67c00ac62d0bc24f181", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/831b5c02df7235f2df804ee62e7cd2caf02bdad1/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/831b5c02df7235f2df804ee62e7cd2caf02bdad1/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=831b5c02df7235f2df804ee62e7cd2caf02bdad1", "patch": "@@ -110,8 +110,8 @@ impl Region {\n         let depth = ty::INNERMOST;\n         let (name, def_id, origin) = new_region(hir_map, param);\n         debug!(\n-            \"Region::late: def={:?} depth={:?} def_id={:?} origin={:?}\",\n-            def,\n+            \"Region::late: param={:?} depth={:?} def_id={:?} origin={:?}\",\n+            param,\n             depth,\n             def_id,\n             origin,\n@@ -2243,8 +2243,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         for (i, (lifetime_i, lifetime_i_name)) in lifetimes.iter().enumerate() {\n             match lifetime_i_name {\n                 hir::LifetimeName::Static | hir::LifetimeName::Underscore => {\n-                    let lifetime = lifetime_i.lifetime;\n-                    let name = lifetime_i.name();\n+                    let name = lifetime_i.name;\n                     let mut err = struct_span_err!(\n                         self.tcx.sess,\n                         lifetime_i.span,\n@@ -2518,10 +2517,10 @@ fn insert_late_bound_lifetimes(\n \n     for param in &generics.params {\n         match param.kind {\n-            hir::GenericParamKind::Lifetime { .. } => {\n+            hir::GenericParamKind::Lifetime { lt_name, .. } => {\n                 if !param.bounds.is_empty() {\n                     // `'a: 'b` means both `'a` and `'b` are referenced\n-                    appears_in_where_clause.regions.insert(lifetime_def.lifetime.name);\n+                    appears_in_where_clause.regions.insert(lt_name);\n                 }\n             }\n             hir::GenericParamKind::Type { .. } => {}"}, {"sha": "3411c28f35bcaebc6233319d3110199ac201c30f", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/831b5c02df7235f2df804ee62e7cd2caf02bdad1/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/831b5c02df7235f2df804ee62e7cd2caf02bdad1/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=831b5c02df7235f2df804ee62e7cd2caf02bdad1", "patch": "@@ -431,8 +431,8 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n     }\n \n     fn visit_generic_param(&mut self, param: &'a GenericParam) {\n-        if let GenericParam::Lifetime(ref ld) = *param {\n-            self.check_lifetime(ld.lifetime.ident);\n+        if let GenericParamKind::Lifetime { .. } = param.kind {\n+            self.check_lifetime(param.ident);\n         }\n         visit::walk_generic_param(self, param);\n     }"}, {"sha": "389afa96ea02618b8c37ed2b36271b58eb4c8e0d", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/831b5c02df7235f2df804ee62e7cd2caf02bdad1/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/831b5c02df7235f2df804ee62e7cd2caf02bdad1/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=831b5c02df7235f2df804ee62e7cd2caf02bdad1", "patch": "@@ -309,8 +309,8 @@ pub enum GenericParamKind {\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct GenericParam {\n-    pub ident: Ident,\n     pub id: NodeId,\n+    pub ident: Ident,\n     pub attrs: ThinVec<Attribute>,\n     pub bounds: ParamBounds,\n "}, {"sha": "804b1410b0786479d1fe232982132ef50bd5a519", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 29, "deletions": 31, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/831b5c02df7235f2df804ee62e7cd2caf02bdad1/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/831b5c02df7235f2df804ee62e7cd2caf02bdad1/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=831b5c02df7235f2df804ee62e7cd2caf02bdad1", "patch": "@@ -143,6 +143,10 @@ pub trait Folder : Sized {\n         noop_fold_ty(t, self)\n     }\n \n+    fn fold_lifetime(&mut self, l: Lifetime) -> Lifetime {\n+        noop_fold_lifetime(l, self)\n+    }\n+\n     fn fold_ty_binding(&mut self, t: TypeBinding) -> TypeBinding {\n         noop_fold_ty_binding(t, self)\n     }\n@@ -240,10 +244,6 @@ pub trait Folder : Sized {\n         noop_fold_variant_data(vdata, self)\n     }\n \n-    fn fold_ty_param(&mut self, tp: TyParam) -> TyParam {\n-        noop_fold_ty_param(tp, self)\n-    }\n-\n     fn fold_generic_param(&mut self, param: GenericParam) -> GenericParam {\n         noop_fold_generic_param(param, self)\n     }\n@@ -268,17 +268,16 @@ pub trait Folder : Sized {\n         noop_fold_interpolated(nt, self)\n     }\n \n-    fn fold_opt_bounds(&mut self, b: Option<TyParamBounds>) -> Option<TyParamBounds> {\n+    fn fold_opt_bounds(&mut self, b: Option<ParamBounds>) -> Option<ParamBounds> {\n         noop_fold_opt_bounds(b, self)\n     }\n \n-    fn fold_bounds(&mut self, b: ParamBounds)\n-                       -> ParamBounds {\n+    fn fold_bounds(&mut self, b: ParamBounds) -> ParamBounds {\n         noop_fold_bounds(b, self)\n     }\n \n-    fn fold_ty_param_bound(&mut self, tpb: ParamBound) -> ParamBound {\n-        noop_fold_ty_param_bound(tpb, self)\n+    fn fold_param_bound(&mut self, tpb: ParamBound) -> ParamBound {\n+        noop_fold_param_bound(tpb, self)\n     }\n \n     fn fold_mt(&mut self, mt: MutTy) -> MutTy {\n@@ -391,10 +390,10 @@ pub fn noop_fold_ty<T: Folder>(t: P<Ty>, fld: &mut T) -> P<Ty> {\n                 TyKind::Typeof(fld.fold_anon_const(expr))\n             }\n             TyKind::TraitObject(bounds, syntax) => {\n-                TyKind::TraitObject(bounds.move_map(|b| fld.fold_ty_param_bound(b)), syntax)\n+                TyKind::TraitObject(bounds.move_map(|b| fld.fold_param_bound(b)), syntax)\n             }\n             TyKind::ImplTrait(bounds) => {\n-                TyKind::ImplTrait(bounds.move_map(|b| fld.fold_ty_param_bound(b)))\n+                TyKind::ImplTrait(bounds.move_map(|b| fld.fold_param_bound(b)))\n             }\n             TyKind::Mac(mac) => {\n                 TyKind::Mac(fld.fold_mac(mac))\n@@ -677,32 +676,31 @@ pub fn noop_fold_fn_decl<T: Folder>(decl: P<FnDecl>, fld: &mut T) -> P<FnDecl> {\n     })\n }\n \n-pub fn noop_fold_ty_param_bound<T>(tpb: ParamBound, fld: &mut T)\n-                                   -> ParamBound\n-                                   where T: Folder {\n-    match tpb {\n-        TraitTyParamBound(ty, modifier) => TraitTyParamBound(fld.fold_poly_trait_ref(ty), modifier),\n+pub fn noop_fold_param_bound<T>(pb: ParamBound, fld: &mut T) -> ParamBound where T: Folder {\n+    match pb {\n+        TraitTyParamBound(ty, modifier) => {\n+            TraitTyParamBound(fld.fold_poly_trait_ref(ty), modifier)\n+        }\n         Outlives(lifetime) => Outlives(noop_fold_lifetime(lifetime, fld)),\n     }\n }\n \n pub fn noop_fold_generic_param<T: Folder>(param: GenericParam, fld: &mut T) -> GenericParam {\n-    match param.kind {\n-        GenericParamKind::Lifetime { bounds, lifetime } => {\n-            let attrs: Vec<_> = param.attrs.into();\n-            GenericParamKind::Lifetime(LifetimeDef {\n-                attrs: attrs.into_iter()\n+    let attrs: Vec<_> = param.attrs.into();\n+    GenericParam {\n+        ident: fld.fold_ident(param.ident),\n+        id: fld.new_id(param.id),\n+        attrs: attrs.into_iter()\n                     .flat_map(|x| fld.fold_attribute(x).into_iter())\n                     .collect::<Vec<_>>()\n                     .into(),\n-                lifetime: Lifetime {\n-                    id: fld.new_id(param.id),\n-                    ident: fld.fold_ident(param.ident),\n-                },\n-                bounds: bounds.move_map(|l| noop_fold_lifetime(l, fld)),\n-            })\n+        bounds: param.bounds.move_map(|l| noop_fold_param_bound(l, fld)),\n+        kind: match param.kind {\n+            GenericParamKind::Lifetime => GenericParamKind::Lifetime,\n+            GenericParamKind::Type { default } => GenericParamKind::Type {\n+                default: default.map(|ty| fld.fold_ty(ty))\n+            }\n         }\n-        GenericParamKind::Type { .. } => GenericParamKind::Type(fld.fold_ty_param(param)),\n     }\n }\n \n@@ -760,7 +758,7 @@ pub fn noop_fold_where_predicate<T: Folder>(\n             ast::WherePredicate::BoundPredicate(ast::WhereBoundPredicate {\n                 bound_generic_params: fld.fold_generic_params(bound_generic_params),\n                 bounded_ty: fld.fold_ty(bounded_ty),\n-                bounds: bounds.move_map(|x| fld.fold_ty_param_bound(x)),\n+                bounds: bounds.move_map(|x| fld.fold_param_bound(x)),\n                 span: fld.new_span(span)\n             })\n         }\n@@ -770,7 +768,7 @@ pub fn noop_fold_where_predicate<T: Folder>(\n             ast::WherePredicate::RegionPredicate(ast::WhereRegionPredicate {\n                 span: fld.new_span(span),\n                 lifetime: noop_fold_lifetime(lifetime, fld),\n-                bounds: bounds.move_map(|bound| noop_fold_lifetime(bound, fld))\n+                bounds: bounds.move_map(|bound| noop_fold_param_bound(bound, fld))\n             })\n         }\n         ast::WherePredicate::EqPredicate(ast::WhereEqPredicate{id,\n@@ -856,7 +854,7 @@ pub fn noop_fold_opt_bounds<T: Folder>(b: Option<ParamBounds>, folder: &mut T)\n \n fn noop_fold_bounds<T: Folder>(bounds: ParamBounds, folder: &mut T)\n                           -> ParamBounds {\n-    bounds.move_map(|bound| folder.fold_ty_param_bound(bound))\n+    bounds.move_map(|bound| folder.fold_param_bound(bound))\n }\n \n pub fn noop_fold_block<T: Folder>(b: P<Block>, folder: &mut T) -> P<Block> {"}, {"sha": "f63b474f450aa99cf40e3bd896d846e490a8d0d8", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/831b5c02df7235f2df804ee62e7cd2caf02bdad1/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/831b5c02df7235f2df804ee62e7cd2caf02bdad1/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=831b5c02df7235f2df804ee62e7cd2caf02bdad1", "patch": "@@ -492,15 +492,10 @@ pub fn walk_param_bound<'a, V: Visitor<'a>>(visitor: &mut V, bound: &'a ParamBou\n \n pub fn walk_generic_param<'a, V: Visitor<'a>>(visitor: &mut V, param: &'a GenericParam) {\n     visitor.visit_ident(param.ident);\n+    walk_list!(visitor, visit_param_bound, &param.bounds);\n     match param.kind {\n-        GenericParamKind::Lifetime { ref bounds, ref lifetime } => {\n-            walk_list!(visitor, visit_lifetime, bounds);\n-        }\n-        GenericParamKind::Type { ref bounds, ref default } => {\n-            visitor.visit_ident(t.ident);\n-            walk_list!(visitor, visit_ty_param_bound, bounds);\n-            walk_list!(visitor, visit_ty, default);\n-        }\n+        GenericParamKind::Lifetime => {}\n+        GenericParamKind::Type { ref default } => walk_list!(visitor, visit_ty, default),\n     }\n     walk_list!(visitor, visit_attribute, param.attrs.iter());\n }"}]}