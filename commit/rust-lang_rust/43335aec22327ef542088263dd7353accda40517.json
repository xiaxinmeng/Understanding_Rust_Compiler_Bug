{"sha": "43335aec22327ef542088263dd7353accda40517", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzMzM1YWVjMjIzMjdlZjU0MjA4ODI2M2RkNzM1M2FjY2RhNDA1MTc=", "commit": {"author": {"name": "Matthew Hammer", "email": "matthew.hammer@colorado.edu", "date": "2017-08-02T18:58:23Z"}, "committer": {"name": "Matthew Hammer", "email": "matthew.hammer@colorado.edu", "date": "2017-08-23T21:21:39Z"}, "message": "-Z profile-query-and-key, separate from -Z profile-query; query key is string option", "tree": {"sha": "84dc282c8424cc6f122ebac4a6e4f3b7b9938bad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84dc282c8424cc6f122ebac4a6e4f3b7b9938bad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43335aec22327ef542088263dd7353accda40517", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43335aec22327ef542088263dd7353accda40517", "html_url": "https://github.com/rust-lang/rust/commit/43335aec22327ef542088263dd7353accda40517", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43335aec22327ef542088263dd7353accda40517/comments", "author": null, "committer": null, "parents": [{"sha": "42510327061bd94110ddee6251107686d4ec30db", "url": "https://api.github.com/repos/rust-lang/rust/commits/42510327061bd94110ddee6251107686d4ec30db", "html_url": "https://github.com/rust-lang/rust/commit/42510327061bd94110ddee6251107686d4ec30db"}], "stats": {"total": 106, "additions": 76, "deletions": 30}, "files": [{"sha": "99fe8e60ae52b139d049d47e6fc9ef21296b8d19", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43335aec22327ef542088263dd7353accda40517/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43335aec22327ef542088263dd7353accda40517/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=43335aec22327ef542088263dd7353accda40517", "patch": "@@ -997,6 +997,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n           \"enable queries of the dependency graph for regression testing\"),\n     profile_queries: bool = (false, parse_bool, [UNTRACKED],\n           \"trace and profile the queries of the incremental compilation framework\"),\n+    profile_queries_and_keys: bool = (false, parse_bool, [UNTRACKED],\n+          \"trace and profile the queries and keys of the incremental compilation framework\"),\n     no_analysis: bool = (false, parse_bool, [UNTRACKED],\n           \"parse and expand the source, but run no analysis\"),\n     extra_plugins: Vec<String> = (Vec::new(), parse_list, [TRACKED],"}, {"sha": "823a637c7e0d4272c70876efd577a26c0664efdd", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/43335aec22327ef542088263dd7353accda40517/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43335aec22327ef542088263dd7353accda40517/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=43335aec22327ef542088263dd7353accda40517", "patch": "@@ -389,7 +389,13 @@ impl Session {\n     }\n     pub fn verbose(&self) -> bool { self.opts.debugging_opts.verbose }\n     pub fn time_passes(&self) -> bool { self.opts.debugging_opts.time_passes }\n-    pub fn profile_queries(&self) -> bool { self.opts.debugging_opts.profile_queries }\n+    pub fn profile_queries(&self) -> bool {\n+        self.opts.debugging_opts.profile_queries ||\n+            self.opts.debugging_opts.profile_queries_and_keys\n+    }\n+    pub fn profile_queries_and_keys(&self) -> bool {\n+        self.opts.debugging_opts.profile_queries_and_keys\n+    }\n     pub fn count_llvm_insns(&self) -> bool {\n         self.opts.debugging_opts.count_llvm_insns\n     }"}, {"sha": "6e02e38aee1292bab72b3b9ccd6373bad5381574", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/43335aec22327ef542088263dd7353accda40517/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43335aec22327ef542088263dd7353accda40517/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=43335aec22327ef542088263dd7353accda40517", "patch": "@@ -511,19 +511,32 @@ impl<'tcx> QueryDescription for queries::extern_crate<'tcx> {\n impl<'tcx> QueryDescription for queries::lint_levels<'tcx> {\n     fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n         format!(\"computing the lint levels for items in this crate\")\n+    }\n }\n \n // If enabled, send a message to the profile-queries thread\n macro_rules! profq_msg {\n     ($tcx:expr, $msg:expr) => {\n         if cfg!(debug_assertions) {\n-            if $tcx.sess.opts.debugging_opts.profile_queries {\n+            if  $tcx.sess.profile_queries() {\n                 profq_msg($msg)\n             }\n         }\n     }\n }\n \n+// If enabled, format a key using its debug string, which can be\n+// expensive to compute (in terms of time).\n+macro_rules! profq_key {\n+    ($tcx:expr, $key:expr) => {\n+        if cfg!(debug_assertions) {\n+            if $tcx.sess.profile_queries_and_keys() {\n+                Some(format!(\"{:?}\", $key))\n+            } else { None }\n+        } else { None }\n+    }\n+}\n+\n macro_rules! define_maps {\n     (<$tcx:tt>\n      $($(#[$attr:meta])*\n@@ -553,7 +566,7 @@ macro_rules! define_maps {\n         #[allow(bad_style)]\n         #[derive(Clone, Debug, PartialEq, Eq)]\n         pub enum QueryMsg {\n-            $($name(String)),*\n+            $($name(Option<String>)),*\n         }\n \n         impl<$tcx> Query<$tcx> {\n@@ -599,8 +612,11 @@ macro_rules! define_maps {\n                        span);\n \n                 profq_msg!(tcx,\n-                    ProfileQueriesMsg::QueryBegin(span.clone(),\n-                                                  QueryMsg::$name(format!(\"{:?}\", key))));\n+                    ProfileQueriesMsg::QueryBegin(\n+                        span.clone(),\n+                        QueryMsg::$name(profq_key!(tcx, key))\n+                    )\n+                );\n \n                 if let Some(&(ref result, dep_node_index)) = tcx.maps.$name.borrow().map.get(&key) {\n                     tcx.dep_graph.read_index(dep_node_index);"}, {"sha": "c16b30338f691d20a5aaab3a6b82ff5b1ad6e31b", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/43335aec22327ef542088263dd7353accda40517/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43335aec22327ef542088263dd7353accda40517/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=43335aec22327ef542088263dd7353accda40517", "patch": "@@ -107,7 +107,7 @@ pub fn compile_input(sess: &Session,\n         sess.abort_if_errors();\n     }\n \n-    if sess.opts.debugging_opts.profile_queries {\n+    if sess.profile_queries() {\n         profile::begin();\n     }\n \n@@ -543,7 +543,7 @@ pub fn phase_1_parse_input<'a>(control: &CompileController,\n                                -> PResult<'a, ast::Crate> {\n     sess.diagnostic().set_continue_after_error(control.continue_parse_after_error);\n \n-    if sess.opts.debugging_opts.profile_queries {\n+    if sess.profile_queries() {\n         profile::begin();\n     }\n \n@@ -1130,7 +1130,7 @@ pub fn phase_4_translate_to_llvm<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n              \"translation\",\n              move || trans::trans_crate(tcx, analysis, incremental_hashes_map, output_filenames));\n \n-    if tcx.sess.opts.debugging_opts.profile_queries {\n+    if tcx.sess.profile_queries() {\n         profile::dump(\"profile_queries\".to_string())\n     }\n "}, {"sha": "061077d05a438560f820b3c45d83dbf74427434a", "filename": "src/librustc_driver/profile/mod.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/43335aec22327ef542088263dd7353accda40517/src%2Flibrustc_driver%2Fprofile%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43335aec22327ef542088263dd7353accda40517/src%2Flibrustc_driver%2Fprofile%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fprofile%2Fmod.rs?ref=43335aec22327ef542088263dd7353accda40517", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::time::{Instant};\n use rustc::util::common::{ProfQDumpParams, ProfileQueriesMsg, profq_msg, profq_set_chan};\n use std::sync::mpsc::{Receiver};\n use std::io::{Write};\n use rustc::dep_graph::{DepNode};\n+use std::time::{Duration, Instant};\n \n pub mod trace;\n \n@@ -37,7 +37,7 @@ pub fn dump(path:String) {\n         path, ack:tx,\n         // FIXME: Add another compiler flag to toggle whether this log\n         // is written; false for now\n-        dump_profq_msg_log:false,\n+        dump_profq_msg_log:true,\n     };\n     profq_msg(ProfileQueriesMsg::Dump(params));\n     let _ = rx.recv().unwrap();\n@@ -61,6 +61,12 @@ struct StackFrame {\n     pub traces:   Vec<trace::Rec>,\n }\n \n+fn total_duration(traces: &Vec<trace::Rec>) -> Duration {\n+    let mut sum : Duration = Duration::new(0,0);\n+    for t in traces.iter() { sum += t.dur_total; }\n+    return sum\n+}\n+\n // profiling thread; retains state (in local variables) and dump traces, upon request.\n fn profile_queries_thread(r:Receiver<ProfileQueriesMsg>) {\n     use self::trace::*;\n@@ -161,11 +167,13 @@ fn profile_queries_thread(r:Receiver<ProfileQueriesMsg>) {\n                                             parse_st:ParseState::Clear,\n                                             traces:old_frame.traces\n                                         };\n+                                        let dur_extent = total_duration(&provider_extent);\n                                         let trace = Rec {\n                                             effect: Effect::QueryBegin(q, CacheCase::Miss),\n                                             extent: Box::new(provider_extent),\n                                             start: start,\n-                                            duration: duration,\n+                                            dur_self: duration - dur_extent,\n+                                            dur_total: duration,\n                                         };\n                                         frame.traces.push( trace );\n                                     },\n@@ -200,11 +208,13 @@ fn profile_queries_thread(r:Receiver<ProfileQueriesMsg>) {\n                                             parse_st:ParseState::Clear,\n                                             traces:old_frame.traces\n                                         };\n+                                        let dur_extent = total_duration(&provider_extent);\n                                         let trace = Rec {\n                                             effect: Effect::TimeBegin(msg),\n                                             extent: Box::new(provider_extent),\n                                             start: start,\n-                                            duration: duration,\n+                                            dur_total: duration,\n+                                            dur_self: duration - dur_extent,\n                                         };\n                                         frame.traces.push( trace );\n                                     },\n@@ -239,11 +249,13 @@ fn profile_queries_thread(r:Receiver<ProfileQueriesMsg>) {\n                                             parse_st:ParseState::Clear,\n                                             traces:old_frame.traces\n                                         };\n+                                        let dur_extent = total_duration(&provider_extent);\n                                         let trace = Rec {\n                                             effect: Effect::TaskBegin(key),\n                                             extent: Box::new(provider_extent),\n                                             start: start,\n-                                            duration: duration,\n+                                            dur_total: duration,\n+                                            dur_self: duration - dur_extent,\n                                         };\n                                         frame.traces.push( trace );\n                                     },\n@@ -262,7 +274,8 @@ fn profile_queries_thread(r:Receiver<ProfileQueriesMsg>) {\n                             effect: Effect::QueryBegin(q, CacheCase::Hit),\n                             extent: Box::new(vec![]),\n                             start: start,\n-                            duration: duration,\n+                            dur_self: duration,\n+                            dur_total: duration,\n                         };\n                         frame.traces.push( trace );\n                         frame.parse_st = ParseState::Clear;"}, {"sha": "f5079836c3ca40f6d248b42fd024bb5d23777cd3", "filename": "src/librustc_driver/profile/trace.rs", "status": "modified", "additions": 25, "deletions": 16, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/43335aec22327ef542088263dd7353accda40517/src%2Flibrustc_driver%2Fprofile%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43335aec22327ef542088263dd7353accda40517/src%2Flibrustc_driver%2Fprofile%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fprofile%2Ftrace.rs?ref=43335aec22327ef542088263dd7353accda40517", "patch": "@@ -33,12 +33,14 @@ pub enum CacheCase {\n pub struct Rec {\n     pub effect: Effect,\n     pub start: Instant,\n-    pub duration: Duration,\n+    pub dur_self: Duration,\n+    pub dur_total: Duration,\n     pub extent: Box<Vec<Rec>>,\n }\n pub struct QueryMetric {\n     pub count: usize,\n-    pub duration: Duration,\n+    pub dur_self: Duration,\n+    pub dur_total: Duration,\n }\n \n pub fn cons_of_query_msg(q: &trace::Query) -> String {\n@@ -108,7 +110,7 @@ fn html_of_fraction(frac: f64) -> (String, String) {\n fn total_duration(traces: &Vec<Rec>) -> Duration {\n     let mut sum : Duration = Duration::new(0,0);\n     for t in traces.iter() {\n-        sum += t.duration;\n+        sum += t.dur_total;\n     }\n     return sum\n }\n@@ -124,8 +126,8 @@ fn duration_div(nom: Duration, den: Duration) -> f64 {\n fn write_traces_rec(file: &mut File, traces: &Vec<Rec>, total: Duration, depth: usize) {\n     for t in traces {\n         let (eff_text, eff_css_classes) = html_of_effect(&t.effect);\n-        let (dur_text, dur_css_classes) = html_of_duration(&t.start, &t.duration);\n-        let fraction = duration_div(t.duration, total);\n+        let (dur_text, dur_css_classes) = html_of_duration(&t.start, &t.dur_total);\n+        let fraction = duration_div(t.dur_total, total);\n         let percent = fraction * 100.0;\n         let (frc_text, frc_css_classes) = html_of_fraction(fraction);\n         write!(file, \"<div class=\\\"trace depth-{} extent-{}{} {} {} {}\\\">\\n\",\n@@ -155,7 +157,8 @@ fn compute_counts_rec(counts: &mut HashMap<String,QueryMetric>, traces: &Vec<Rec\n                     Some(_qm) => { panic!(\"TimeBegin with non-unique, repeat message\") }\n                     None => QueryMetric{\n                         count: 1,\n-                        duration: t.duration\n+                        dur_self: t.dur_self,\n+                        dur_total: t.dur_total,\n                     }};\n                 counts.insert(msg.clone(), qm);\n             },\n@@ -165,11 +168,13 @@ fn compute_counts_rec(counts: &mut HashMap<String,QueryMetric>, traces: &Vec<Rec\n                     Some(qm) =>\n                         QueryMetric{\n                             count: qm.count + 1,\n-                            duration: qm.duration + t.duration\n+                            dur_self: qm.dur_self + t.dur_self,\n+                            dur_total: qm.dur_total + t.dur_total,\n                         },\n                     None => QueryMetric{\n                         count: 1,\n-                        duration: t.duration\n+                        dur_self: t.dur_self,\n+                        dur_total: t.dur_total,\n                     }};\n                 counts.insert(cons, qm);\n             },\n@@ -179,11 +184,13 @@ fn compute_counts_rec(counts: &mut HashMap<String,QueryMetric>, traces: &Vec<Rec\n                     Some(qm) =>\n                         QueryMetric{\n                             count: qm.count + 1,\n-                            duration: qm.duration + t.duration\n+                            dur_total: qm.dur_total + t.dur_total,\n+                            dur_self: qm.dur_self + t.dur_self\n                         },\n                     None => QueryMetric{\n                         count: 1,\n-                        duration: t.duration\n+                        dur_total: t.dur_total,\n+                        dur_self: t.dur_self,\n                     }\n                 };\n                 counts.insert(qcons, qm);\n@@ -199,13 +206,15 @@ pub fn write_counts(count_file: &mut File, counts: &mut HashMap<String,QueryMetr\n \n     let mut data = vec![];\n     for (ref cons, ref qm) in counts.iter() {\n-        data.push((cons.clone(), qm.count.clone(), qm.duration.clone()));\n+        data.push((cons.clone(), qm.count.clone(), qm.dur_total.clone(), qm.dur_self.clone()));\n     };\n-    data.sort_by(|&(_,_,d1),&(_,_,d2)|\n-                 if d1 > d2 { Ordering::Less } else { Ordering::Greater } );\n-    for (cons, count, duration) in data {\n-        write!(count_file, \"{},{},{}\\n\",\n-               cons, count, duration_to_secs_str(duration)\n+    data.sort_by(|&(_,_,_,self1),&(_,_,_,self2)|\n+                 if self1 > self2 { Ordering::Less } else { Ordering::Greater } );\n+    for (cons, count, dur_total, dur_self) in data {\n+        write!(count_file, \"{}, {}, {}, {}\\n\",\n+               cons, count,\n+               duration_to_secs_str(dur_total),\n+               duration_to_secs_str(dur_self)\n         ).unwrap();\n     }\n }"}]}