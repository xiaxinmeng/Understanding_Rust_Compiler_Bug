{"sha": "de7b1887ae46c78c3c0abf6d264b2649b1b5cf0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlN2IxODg3YWU0NmM3OGMzYzBhYmY2ZDI2NGIyNjQ5YjFiNWNmMGI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-08T15:13:30Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-08T15:13:30Z"}, "message": "Introduce param falvor", "tree": {"sha": "397d459c28cf96a280a2d7c0258835de80fc2a01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/397d459c28cf96a280a2d7c0258835de80fc2a01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de7b1887ae46c78c3c0abf6d264b2649b1b5cf0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de7b1887ae46c78c3c0abf6d264b2649b1b5cf0b", "html_url": "https://github.com/rust-lang/rust/commit/de7b1887ae46c78c3c0abf6d264b2649b1b5cf0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de7b1887ae46c78c3c0abf6d264b2649b1b5cf0b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99f6976b202cc8c47b95d6443d23a5745dcf8010", "url": "https://api.github.com/repos/rust-lang/rust/commits/99f6976b202cc8c47b95d6443d23a5745dcf8010", "html_url": "https://github.com/rust-lang/rust/commit/99f6976b202cc8c47b95d6443d23a5745dcf8010"}], "stats": {"total": 56, "additions": 44, "deletions": 12}, "files": [{"sha": "c7f17168b458f62d84de88c6ffb51c4f26f04902", "filename": "src/grammar/params.rs", "status": "modified", "additions": 44, "deletions": 12, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/de7b1887ae46c78c3c0abf6d264b2649b1b5cf0b/src%2Fgrammar%2Fparams.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7b1887ae46c78c3c0abf6d264b2649b1b5cf0b/src%2Fgrammar%2Fparams.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fparams.rs?ref=de7b1887ae46c78c3c0abf6d264b2649b1b5cf0b", "patch": "@@ -6,35 +6,67 @@ use super::*;\n // fn c(x: i32, ) {}\n // fn d(x: i32, y: ()) {}\n pub(super) fn param_list(p: &mut Parser) {\n-    list_(p, true)\n+    list_(p, Flavor::Normal)\n+}\n+\n+// test param_list_opt_patterns\n+// fn foo<F: FnMut(&mut Foo<'a>)>(){}\n+pub(super) fn param_list_opt_patterns(p: &mut Parser) {\n+    list_(p, Flavor::OptionalPattern)\n }\n \n pub(super) fn param_list_opt_types(p: &mut Parser) {\n-    list_(p, false)\n+    list_(p, Flavor::OptionalType)\n+}\n+\n+#[derive(Clone, Copy, Eq, PartialEq)]\n+enum Flavor {\n+    OptionalType,\n+    OptionalPattern,\n+    Normal,\n }\n \n-fn list_(p: &mut Parser, require_types: bool) {\n-    assert!(p.at(if require_types { L_PAREN } else { PIPE }));\n+impl Flavor {\n+    fn type_required(self) -> bool {\n+        match self {\n+            Flavor::OptionalType => false,\n+            _ => true,\n+        }\n+    }\n+    fn pattern_required(self) -> bool {\n+        match self {\n+            Flavor::OptionalPattern => false,\n+            _ => true,\n+        }\n+    }\n+}\n+\n+fn list_(p: &mut Parser, flavor: Flavor) {\n+    let (bra, ket) = if flavor.type_required() {\n+        (L_PAREN, R_PAREN)\n+    } else {\n+        (PIPE, PIPE)\n+    };\n+    assert!(p.at(bra));\n     let m = p.start();\n     p.bump();\n-    if require_types {\n+    if flavor.type_required() {\n         self_param(p);\n     }\n-    let terminator = if require_types { R_PAREN } else { PIPE };\n-    while !p.at(EOF) && !p.at(terminator) {\n-        value_parameter(p, require_types);\n-        if !p.at(terminator) {\n+    while !p.at(EOF) && !p.at(ket) {\n+        value_parameter(p, flavor);\n+        if !p.at(ket) {\n             p.expect(COMMA);\n         }\n     }\n-    p.expect(terminator);\n+    p.expect(ket);\n     m.complete(p, PARAM_LIST);\n }\n \n-fn value_parameter(p: &mut Parser, require_type: bool) {\n+fn value_parameter(p: &mut Parser, flavor: Flavor) {\n     let m = p.start();\n     patterns::pattern(p);\n-    if p.at(COLON) || require_type {\n+    if p.at(COLON) || flavor.type_required() {\n         types::ascription(p)\n     }\n     m.complete(p, PARAM);"}]}