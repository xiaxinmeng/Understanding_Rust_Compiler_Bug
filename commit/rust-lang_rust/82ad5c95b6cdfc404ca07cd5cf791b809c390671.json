{"sha": "82ad5c95b6cdfc404ca07cd5cf791b809c390671", "node_id": "C_kwDOAAsO6NoAKDgyYWQ1Yzk1YjZjZGZjNDA0Y2EwN2NkNWNmNzkxYjgwOWMzOTA2NzE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-26T07:36:23Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-26T07:46:30Z"}, "message": "Revert \"use opaque_ty_origin_unchecked instead of destructuring HIR\"\n\nThis reverts commit 5a4601fea56502e4f50df046c4205e678397599b.", "tree": {"sha": "2d9ce61dcfa8cc48bf314ba8806d2e6a3e21044e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d9ce61dcfa8cc48bf314ba8806d2e6a3e21044e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82ad5c95b6cdfc404ca07cd5cf791b809c390671", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82ad5c95b6cdfc404ca07cd5cf791b809c390671", "html_url": "https://github.com/rust-lang/rust/commit/82ad5c95b6cdfc404ca07cd5cf791b809c390671", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82ad5c95b6cdfc404ca07cd5cf791b809c390671/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b629c85bd74dfb730a3e9308312b007c0bf027cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/b629c85bd74dfb730a3e9308312b007c0bf027cb", "html_url": "https://github.com/rust-lang/rust/commit/b629c85bd74dfb730a3e9308312b007c0bf027cb"}], "stats": {"total": 18, "additions": 13, "deletions": 5}, "files": [{"sha": "1db1ec4a7bf2f1e3e0fffe72b6247adf4712edc6", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/82ad5c95b6cdfc404ca07cd5cf791b809c390671/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ad5c95b6cdfc404ca07cd5cf791b809c390671/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=82ad5c95b6cdfc404ca07cd5cf791b809c390671", "patch": "@@ -227,9 +227,17 @@ pub(crate) fn type_check<'mir, 'tcx>(\n                     let mut hidden_type = infcx.resolve_vars_if_possible(decl.hidden_type);\n                     // Check that RPITs are only constrained in their outermost\n                     // function, otherwise report a mismatched types error.\n-                    if let OpaqueTyOrigin::FnReturn(parent) | OpaqueTyOrigin::AsyncFn(parent)\n-                            = infcx.opaque_ty_origin_unchecked(opaque_type_key.def_id, hidden_type.span)\n-                        && parent.to_def_id() != body.source.def_id()\n+                    if let hir::Node::Item(hir::Item {\n+                        kind:\n+                            hir::ItemKind::OpaqueTy(hir::OpaqueTy {\n+                                origin:\n+                                    hir::OpaqueTyOrigin::AsyncFn(parent)\n+                                    | hir::OpaqueTyOrigin::FnReturn(parent),\n+                                ..\n+                            }),\n+                        ..\n+                    }) = infcx.tcx.hir().get_by_def_id(opaque_type_key.def_id.expect_local()) &&\n+                        parent.to_def_id() != body.source.def_id()\n                     {\n                         infcx\n                             .report_mismatched_types(\n@@ -239,7 +247,7 @@ pub(crate) fn type_check<'mir, 'tcx>(\n                                         body.source.def_id().expect_local(),\n                                     ),\n                                 ),\n-                                infcx.tcx.mk_opaque(opaque_type_key.def_id.to_def_id(), opaque_type_key.substs),\n+                                infcx.tcx.mk_opaque(opaque_type_key.def_id, opaque_type_key.substs),\n                                 hidden_type.ty,\n                                 ty::error::TypeError::Mismatch,\n                             )"}, {"sha": "3db2f822c1c2e8e93e091f7f29994285eb690344", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82ad5c95b6cdfc404ca07cd5cf791b809c390671/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ad5c95b6cdfc404ca07cd5cf791b809c390671/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=82ad5c95b6cdfc404ca07cd5cf791b809c390671", "patch": "@@ -438,7 +438,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     }\n \n     #[instrument(skip(self), level = \"trace\")]\n-    pub fn opaque_ty_origin_unchecked(&self, def_id: LocalDefId, span: Span) -> OpaqueTyOrigin {\n+    fn opaque_ty_origin_unchecked(&self, def_id: LocalDefId, span: Span) -> OpaqueTyOrigin {\n         let origin = match self.tcx.hir().expect_item(def_id).kind {\n             hir::ItemKind::OpaqueTy(hir::OpaqueTy { origin, .. }) => origin,\n             ref itemkind => {"}]}