{"sha": "df8dfdeff68e60a68d026a3374cfb8159d0495cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmOGRmZGVmZjY4ZTYwYTY4ZDAyNmEzMzc0Y2ZiODE1OWQwNDk1Y2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-20T12:03:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-20T12:03:25Z"}, "message": "Auto merge of #46457 - m4b:no_mangle_static, r=michaelwoerister\n\nDon't set the linkage_name for static variables\n\nFor `no_mangle` statics:\n\n1. Linkage_name no longer set\n2. The static variable also no longer has a dwarf namespace scope\n\nThis matches C++ output, which does not set the linkage_name and is not scoped:\n\ne.g. c++:\n\n```\n0x000000b6:   DW_TAG_base_type [8]\n                DW_AT_name [DW_FORM_strp]       ( .debug_str[0x00000077] = \"long int\")\n                DW_AT_encoding [DW_FORM_data1]  (DW_ATE_signed)\n                DW_AT_byte_size [DW_FORM_data1] (0x08)\n\n0x000000bd:   DW_TAG_variable [9]\n                DW_AT_name [DW_FORM_strp]       ( .debug_str[0x00000053] = \"TEST\")\n                DW_AT_type [DW_FORM_ref4]       (cu + 0x0048 => {0x00000048})\n                DW_AT_external [DW_FORM_flag_present]   (true)\n                DW_AT_decl_file [DW_FORM_data1] (\"/home/m4b/tmp/bad_debug/test.cpp\")\n                DW_AT_decl_line [DW_FORM_data1] (14)\n                DW_AT_location [DW_FORM_exprloc]        (<0x9> 03 40 10 20 00 00 00 00 00 )\n\n0x000000d2:   DW_TAG_namespace [2] *\n                DW_AT_name [DW_FORM_strp]       ( .debug_str[0x0000009d] = \"std\")\n\n```\n\nand (now) Rust:\n\n```\n0x0000002a:   DW_TAG_variable [2]\n                DW_AT_name [DW_FORM_strp]       ( .debug_str[0x00000046] = \"TEST\")\n                DW_AT_type [DW_FORM_ref4]       (cu + 0x0045 => {0x00000045})\n                DW_AT_external [DW_FORM_flag_present]   (true)\n                DW_AT_decl_file [DW_FORM_data1] (\"/tmp/test.rs\")\n                DW_AT_decl_line [DW_FORM_data1] (8)\n                DW_AT_alignment [DW_FORM_udata] (1)\n                DW_AT_location [DW_FORM_exprloc]        (<0x9> 03 c0 4d 06 00 00 00 00 00 )\n\n0x00000040:   DW_TAG_namespace [3] *\n                DW_AT_name [DW_FORM_strp]       ( .debug_str[0x0000004b] = \"test\")\n```", "tree": {"sha": "9805dad636675fccee2614b7690429073fd4034b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9805dad636675fccee2614b7690429073fd4034b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df8dfdeff68e60a68d026a3374cfb8159d0495cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df8dfdeff68e60a68d026a3374cfb8159d0495cb", "html_url": "https://github.com/rust-lang/rust/commit/df8dfdeff68e60a68d026a3374cfb8159d0495cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df8dfdeff68e60a68d026a3374cfb8159d0495cb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16212b93677eae6951974676b174247e6ad0ba48", "url": "https://api.github.com/repos/rust-lang/rust/commits/16212b93677eae6951974676b174247e6ad0ba48", "html_url": "https://github.com/rust-lang/rust/commit/16212b93677eae6951974676b174247e6ad0ba48"}, {"sha": "500dc14b21e7d1654b66fe246f33cf7741bccf64", "url": "https://api.github.com/repos/rust-lang/rust/commits/500dc14b21e7d1654b66fe246f33cf7741bccf64", "html_url": "https://github.com/rust-lang/rust/commit/500dc14b21e7d1654b66fe246f33cf7741bccf64"}], "stats": {"total": 20, "additions": 14, "deletions": 6}, "files": [{"sha": "8e924e3f0ad925192723966af1e6610dfbbdd816", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/df8dfdeff68e60a68d026a3374cfb8159d0495cb/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df8dfdeff68e60a68d026a3374cfb8159d0495cb/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=df8dfdeff68e60a68d026a3374cfb8159d0495cb", "patch": "@@ -42,7 +42,7 @@ use std::ffi::CString;\n use std::fmt::Write;\n use std::ptr;\n use std::path::{Path, PathBuf};\n-use syntax::ast;\n+use syntax::{ast, attr};\n use syntax::symbol::{Interner, InternedString, Symbol};\n use syntax_pos::{self, Span, FileName};\n \n@@ -1643,8 +1643,10 @@ pub fn create_global_var_metadata(cx: &CrateContext,\n     }\n \n     let tcx = cx.tcx();\n-\n     let node_def_id = tcx.hir.local_def_id(node_id);\n+    let no_mangle = attr::contains_name(&tcx.get_attrs(node_def_id), \"no_mangle\");\n+    // We may want to remove the namespace scope if we're in an extern block, see:\n+    // https://github.com/rust-lang/rust/pull/46457#issuecomment-351750952\n     let var_scope = get_namespace_for_item(cx, node_def_id);\n     let span = cx.tcx().def_span(node_def_id);\n \n@@ -1659,18 +1661,24 @@ pub fn create_global_var_metadata(cx: &CrateContext,\n     let variable_type = Instance::mono(cx.tcx(), node_def_id).ty(cx.tcx());\n     let type_metadata = type_metadata(cx, variable_type, span);\n     let var_name = tcx.item_name(node_def_id).to_string();\n-    let linkage_name = mangled_name_of_item(cx, node_def_id, \"\");\n-\n     let var_name = CString::new(var_name).unwrap();\n-    let linkage_name = CString::new(linkage_name).unwrap();\n+    let linkage_name = if no_mangle {\n+        None\n+    } else {\n+        let linkage_name = mangled_name_of_item(cx, node_def_id, \"\");\n+        Some(CString::new(linkage_name).unwrap())\n+    };\n \n     let global_align = cx.align_of(variable_type);\n \n     unsafe {\n         llvm::LLVMRustDIBuilderCreateStaticVariable(DIB(cx),\n                                                     var_scope,\n                                                     var_name.as_ptr(),\n-                                                    linkage_name.as_ptr(),\n+                                                    // If null, linkage_name field is omitted,\n+                                                    // which is what we want for no_mangle statics\n+                                                    linkage_name.as_ref()\n+                                                     .map_or(ptr::null(), |name| name.as_ptr()),\n                                                     file_metadata,\n                                                     line_number,\n                                                     type_metadata,"}]}