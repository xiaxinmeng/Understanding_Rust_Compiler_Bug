{"sha": "e3f9d6555beec6fb4bebf6aef3e983149f7aee3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzZjlkNjU1NWJlZWM2ZmI0YmViZjZhZWYzZTk4MzE0OWY3YWVlM2E=", "commit": {"author": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-03-30T15:23:54Z"}, "committer": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-03-30T15:23:54Z"}, "message": "Move parsing a single TYPE_BOUND to a separate function", "tree": {"sha": "55c9502e17818860bfed643805917236ec31f046", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55c9502e17818860bfed643805917236ec31f046"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3f9d6555beec6fb4bebf6aef3e983149f7aee3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3f9d6555beec6fb4bebf6aef3e983149f7aee3a", "html_url": "https://github.com/rust-lang/rust/commit/e3f9d6555beec6fb4bebf6aef3e983149f7aee3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3f9d6555beec6fb4bebf6aef3e983149f7aee3a/comments", "author": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfc2ac90c8b59884a1b100806387c7e6c67db3b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfc2ac90c8b59884a1b100806387c7e6c67db3b6", "html_url": "https://github.com/rust-lang/rust/commit/bfc2ac90c8b59884a1b100806387c7e6c67db3b6"}], "stats": {"total": 45, "additions": 26, "deletions": 19}, "files": [{"sha": "01175c0a3d40ce081c7ba7fa152ccb505a66ded7", "filename": "crates/ra_parser/src/grammar/type_params.rs", "status": "modified", "additions": 26, "deletions": 19, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/e3f9d6555beec6fb4bebf6aef3e983149f7aee3a/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftype_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f9d6555beec6fb4bebf6aef3e983149f7aee3a/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftype_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftype_params.rs?ref=e3f9d6555beec6fb4bebf6aef3e983149f7aee3a", "patch": "@@ -80,29 +80,36 @@ fn lifetime_bounds(p: &mut Parser) {\n }\n \n pub(super) fn bounds_without_colon(p: &mut Parser) {\n-    let outer = p.start();\n-    loop {\n-        let inner = p.start();\n-        let has_paren = p.eat(L_PAREN);\n-        p.eat(QUESTION);\n-        match p.current() {\n-            LIFETIME => p.bump(),\n-            FOR_KW => types::for_type(p),\n-            _ if paths::is_path_start(p) => types::path_type_(p, false),\n-            _ => {\n-                inner.abandon(p);\n-                break;\n-            }\n-        }\n-        if has_paren {\n-            p.expect(R_PAREN);\n-        }\n-        inner.complete(p, TYPE_BOUND);\n+    let m = p.start();\n+\n+    while type_bound(p) {\n         if !p.eat(PLUS) {\n             break;\n         }\n     }\n-    outer.complete(p, TYPE_BOUND_LIST);\n+\n+    m.complete(p, TYPE_BOUND_LIST);\n+}\n+\n+fn type_bound(p: &mut Parser) -> bool {\n+    let m = p.start();\n+    let has_paren = p.eat(L_PAREN);\n+    p.eat(QUESTION);\n+    match p.current() {\n+        LIFETIME => p.bump(),\n+        FOR_KW => types::for_type(p),\n+        _ if paths::is_path_start(p) => types::path_type_(p, false),\n+        _ => {\n+            m.abandon(p);\n+            return false;\n+        }\n+    }\n+    if has_paren {\n+        p.expect(R_PAREN);\n+    }\n+    m.complete(p, TYPE_BOUND);\n+\n+    true\n }\n \n // test where_clause"}]}