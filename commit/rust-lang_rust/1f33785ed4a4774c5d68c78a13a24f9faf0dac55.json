{"sha": "1f33785ed4a4774c5d68c78a13a24f9faf0dac55", "node_id": "C_kwDOAAsO6NoAKDFmMzM3ODVlZDRhNDc3NGM1ZDY4Yzc4YTEzYTI0ZjlmYWYwZGFjNTU", "commit": {"author": {"name": "Daniel Paoliello", "email": "danpao@microsoft.com", "date": "2022-07-01T20:01:41Z"}, "committer": {"name": "Daniel Paoliello", "email": "danpao@microsoft.com", "date": "2022-07-22T16:55:14Z"}, "message": "Enable raw-dylib for binaries", "tree": {"sha": "a31e3d8bef4f30ead6bfbbb26940f2b9e137d2a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a31e3d8bef4f30ead6bfbbb26940f2b9e137d2a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f33785ed4a4774c5d68c78a13a24f9faf0dac55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f33785ed4a4774c5d68c78a13a24f9faf0dac55", "html_url": "https://github.com/rust-lang/rust/commit/1f33785ed4a4774c5d68c78a13a24f9faf0dac55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f33785ed4a4774c5d68c78a13a24f9faf0dac55/comments", "author": {"login": "dpaoliello", "id": 10580822, "node_id": "MDQ6VXNlcjEwNTgwODIy", "avatar_url": "https://avatars.githubusercontent.com/u/10580822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dpaoliello", "html_url": "https://github.com/dpaoliello", "followers_url": "https://api.github.com/users/dpaoliello/followers", "following_url": "https://api.github.com/users/dpaoliello/following{/other_user}", "gists_url": "https://api.github.com/users/dpaoliello/gists{/gist_id}", "starred_url": "https://api.github.com/users/dpaoliello/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dpaoliello/subscriptions", "organizations_url": "https://api.github.com/users/dpaoliello/orgs", "repos_url": "https://api.github.com/users/dpaoliello/repos", "events_url": "https://api.github.com/users/dpaoliello/events{/privacy}", "received_events_url": "https://api.github.com/users/dpaoliello/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dpaoliello", "id": 10580822, "node_id": "MDQ6VXNlcjEwNTgwODIy", "avatar_url": "https://avatars.githubusercontent.com/u/10580822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dpaoliello", "html_url": "https://github.com/dpaoliello", "followers_url": "https://api.github.com/users/dpaoliello/followers", "following_url": "https://api.github.com/users/dpaoliello/following{/other_user}", "gists_url": "https://api.github.com/users/dpaoliello/gists{/gist_id}", "starred_url": "https://api.github.com/users/dpaoliello/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dpaoliello/subscriptions", "organizations_url": "https://api.github.com/users/dpaoliello/orgs", "repos_url": "https://api.github.com/users/dpaoliello/repos", "events_url": "https://api.github.com/users/dpaoliello/events{/privacy}", "received_events_url": "https://api.github.com/users/dpaoliello/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "144227dae949fb98896a2ba077d8fe7f36c3238e", "url": "https://api.github.com/repos/rust-lang/rust/commits/144227dae949fb98896a2ba077d8fe7f36c3238e", "html_url": "https://github.com/rust-lang/rust/commit/144227dae949fb98896a2ba077d8fe7f36c3238e"}], "stats": {"total": 161, "additions": 108, "deletions": 53}, "files": [{"sha": "f3f3628fceeac26bcb690e310b769f80ae4150da", "filename": "compiler/rustc_codegen_cranelift/src/archive.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1f33785ed4a4774c5d68c78a13a24f9faf0dac55/compiler%2Frustc_codegen_cranelift%2Fsrc%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f33785ed4a4774c5d68c78a13a24f9faf0dac55/compiler%2Frustc_codegen_cranelift%2Fsrc%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Farchive.rs?ref=1f33785ed4a4774c5d68c78a13a24f9faf0dac55", "patch": "@@ -204,12 +204,16 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n         any_members\n     }\n \n-    fn inject_dll_import_lib(\n-        &mut self,\n+    fn sess(&self) -> &Session {\n+        self.sess\n+    }\n+\n+    fn create_dll_import_lib(\n+        _sess: &Session,\n         _lib_name: &str,\n         _dll_imports: &[rustc_session::cstore::DllImport],\n-        _tmpdir: &rustc_data_structures::temp_dir::MaybeTempDir,\n-    ) {\n-        bug!(\"injecting dll imports is not supported\");\n+        _tmpdir: &Path,\n+    ) -> PathBuf {\n+        bug!(\"creating dll imports is not supported\");\n     }\n }"}, {"sha": "21f62a6b0096a20cdb76b3e7bafbfafb9d325bb9", "filename": "compiler/rustc_codegen_gcc/src/archive.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1f33785ed4a4774c5d68c78a13a24f9faf0dac55/compiler%2Frustc_codegen_gcc%2Fsrc%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f33785ed4a4774c5d68c78a13a24f9faf0dac55/compiler%2Frustc_codegen_gcc%2Fsrc%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Farchive.rs?ref=1f33785ed4a4774c5d68c78a13a24f9faf0dac55", "patch": "@@ -4,7 +4,6 @@ use std::path::{Path, PathBuf};\n use rustc_codegen_ssa::back::archive::ArchiveBuilder;\n use rustc_session::Session;\n \n-use rustc_data_structures::temp_dir::MaybeTempDir;\n use rustc_session::cstore::DllImport;\n \n struct ArchiveConfig<'a> {\n@@ -177,7 +176,16 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n         any_members\n     }\n \n-    fn inject_dll_import_lib(&mut self, _lib_name: &str, _dll_imports: &[DllImport], _tmpdir: &MaybeTempDir) {\n+    fn sess(&self) -> &Session {\n+        self.config.sess\n+    }\n+\n+    fn create_dll_import_lib(\n+        _sess: &Session,\n+        _lib_name: &str,\n+        _dll_imports: &[DllImport],\n+        _tmpdir: &Path,\n+    ) -> PathBuf {\n         unimplemented!();\n     }\n }"}, {"sha": "baa858709a0c6b7c87309c025302de6532b6c132", "filename": "compiler/rustc_codegen_llvm/src/back/archive.rs", "status": "modified", "additions": 20, "deletions": 24, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/1f33785ed4a4774c5d68c78a13a24f9faf0dac55/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f33785ed4a4774c5d68c78a13a24f9faf0dac55/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs?ref=1f33785ed4a4774c5d68c78a13a24f9faf0dac55", "patch": "@@ -11,7 +11,6 @@ use std::str;\n use crate::llvm::archive_ro::{ArchiveRO, Child};\n use crate::llvm::{self, ArchiveKind, LLVMMachineType, LLVMRustCOFFShortExport};\n use rustc_codegen_ssa::back::archive::ArchiveBuilder;\n-use rustc_data_structures::temp_dir::MaybeTempDir;\n use rustc_session::cstore::{DllCallingConvention, DllImport};\n use rustc_session::Session;\n \n@@ -96,19 +95,23 @@ impl<'a> ArchiveBuilder<'a> for LlvmArchiveBuilder<'a> {\n         }\n     }\n \n-    fn inject_dll_import_lib(\n-        &mut self,\n+    fn sess(&self) -> &Session {\n+        self.sess\n+    }\n+\n+    fn create_dll_import_lib(\n+        sess: &Session,\n         lib_name: &str,\n         dll_imports: &[DllImport],\n-        tmpdir: &MaybeTempDir,\n-    ) {\n+        tmpdir: &Path,\n+    ) -> PathBuf {\n         let output_path = {\n-            let mut output_path: PathBuf = tmpdir.as_ref().to_path_buf();\n+            let mut output_path: PathBuf = tmpdir.to_path_buf();\n             output_path.push(format!(\"{}_imports\", lib_name));\n             output_path.with_extension(\"lib\")\n         };\n \n-        let target = &self.sess.target;\n+        let target = &sess.target;\n         let mingw_gnu_toolchain = target.vendor == \"pc\"\n             && target.os == \"windows\"\n             && target.env == \"gnu\"\n@@ -117,7 +120,7 @@ impl<'a> ArchiveBuilder<'a> for LlvmArchiveBuilder<'a> {\n         let import_name_and_ordinal_vector: Vec<(String, Option<u16>)> = dll_imports\n             .iter()\n             .map(|import: &DllImport| {\n-                if self.sess.target.arch == \"x86\" {\n+                if sess.target.arch == \"x86\" {\n                     (\n                         LlvmArchiveBuilder::i686_decorated_name(import, mingw_gnu_toolchain),\n                         import.ordinal,\n@@ -134,8 +137,7 @@ impl<'a> ArchiveBuilder<'a> for LlvmArchiveBuilder<'a> {\n             // that loaded but crashed with an AV upon calling one of the imported\n             // functions.  Therefore, use binutils to create the import library instead,\n             // by writing a .DEF file to the temp dir and calling binutils's dlltool.\n-            let def_file_path =\n-                tmpdir.as_ref().join(format!(\"{}_imports\", lib_name)).with_extension(\"def\");\n+            let def_file_path = tmpdir.join(format!(\"{}_imports\", lib_name)).with_extension(\"def\");\n \n             let def_file_content = format!(\n                 \"EXPORTS\\n{}\",\n@@ -154,11 +156,11 @@ impl<'a> ArchiveBuilder<'a> for LlvmArchiveBuilder<'a> {\n             match std::fs::write(&def_file_path, def_file_content) {\n                 Ok(_) => {}\n                 Err(e) => {\n-                    self.sess.fatal(&format!(\"Error writing .DEF file: {}\", e));\n+                    sess.fatal(&format!(\"Error writing .DEF file: {}\", e));\n                 }\n             };\n \n-            let dlltool = find_binutils_dlltool(self.sess);\n+            let dlltool = find_binutils_dlltool(sess);\n             let result = std::process::Command::new(dlltool)\n                 .args([\n                     \"-d\",\n@@ -172,9 +174,9 @@ impl<'a> ArchiveBuilder<'a> for LlvmArchiveBuilder<'a> {\n \n             match result {\n                 Err(e) => {\n-                    self.sess.fatal(&format!(\"Error calling dlltool: {}\", e));\n+                    sess.fatal(&format!(\"Error calling dlltool: {}\", e));\n                 }\n-                Ok(output) if !output.status.success() => self.sess.fatal(&format!(\n+                Ok(output) if !output.status.success() => sess.fatal(&format!(\n                     \"Dlltool could not create import library: {}\\n{}\",\n                     String::from_utf8_lossy(&output.stdout),\n                     String::from_utf8_lossy(&output.stderr)\n@@ -220,27 +222,21 @@ impl<'a> ArchiveBuilder<'a> for LlvmArchiveBuilder<'a> {\n                     output_path_z.as_ptr(),\n                     ffi_exports.as_ptr(),\n                     ffi_exports.len(),\n-                    llvm_machine_type(&self.sess.target.arch) as u16,\n-                    !self.sess.target.is_like_msvc,\n+                    llvm_machine_type(&sess.target.arch) as u16,\n+                    !sess.target.is_like_msvc,\n                 )\n             };\n \n             if result == crate::llvm::LLVMRustResult::Failure {\n-                self.sess.fatal(&format!(\n+                sess.fatal(&format!(\n                     \"Error creating import library for {}: {}\",\n                     lib_name,\n                     llvm::last_error().unwrap_or(\"unknown LLVM error\".to_string())\n                 ));\n             }\n         };\n \n-        self.add_archive(&output_path, |_| false).unwrap_or_else(|e| {\n-            self.sess.fatal(&format!(\n-                \"failed to add native library {}: {}\",\n-                output_path.display(),\n-                e\n-            ));\n-        });\n+        output_path\n     }\n }\n "}, {"sha": "53550b049db09d745748d313134a1c48f3240892", "filename": "compiler/rustc_codegen_ssa/src/back/archive.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1f33785ed4a4774c5d68c78a13a24f9faf0dac55/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f33785ed4a4774c5d68c78a13a24f9faf0dac55/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Farchive.rs?ref=1f33785ed4a4774c5d68c78a13a24f9faf0dac55", "patch": "@@ -51,10 +51,37 @@ pub trait ArchiveBuilder<'a> {\n \n     fn build(self) -> bool;\n \n+    fn sess(&self) -> &Session;\n+\n+    /// Creates a DLL Import Library <https://docs.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-creation#creating-an-import-library>.\n+    /// and returns the path on disk to that import library.\n+    /// This functions doesn't take `self` so that it can be called from\n+    /// `linker_with_args`, which is specialized on `ArchiveBuilder` but\n+    /// doesn't take or create an instance of that type.\n+    fn create_dll_import_lib(\n+        sess: &Session,\n+        lib_name: &str,\n+        dll_imports: &[DllImport],\n+        tmpdir: &Path,\n+    ) -> PathBuf;\n+\n+    /// Creates a DLL Import Library <https://docs.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-creation#creating-an-import-library>\n+    /// and adds it to the current compilation's set of archives.\n     fn inject_dll_import_lib(\n         &mut self,\n         lib_name: &str,\n         dll_imports: &[DllImport],\n         tmpdir: &MaybeTempDir,\n-    );\n+    ) {\n+        let output_path =\n+            Self::create_dll_import_lib(self.sess(), lib_name, dll_imports, tmpdir.as_ref());\n+\n+        self.add_archive(&output_path, |_| false).unwrap_or_else(|e| {\n+            self.sess().fatal(&format!(\n+                \"failed to add native library {}: {}\",\n+                output_path.display(),\n+                e\n+            ));\n+        });\n+    }\n }"}, {"sha": "a8513a426c6cd2c22563bdca6af632ffd3588722", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1f33785ed4a4774c5d68c78a13a24f9faf0dac55/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f33785ed4a4774c5d68c78a13a24f9faf0dac55/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=1f33785ed4a4774c5d68c78a13a24f9faf0dac55", "patch": "@@ -120,7 +120,7 @@ pub fn link_binary<'a, B: ArchiveBuilder<'a>>(\n                         &out_filename,\n                         codegen_results,\n                         path.as_ref(),\n-                    );\n+                    )?;\n                 }\n             }\n             if sess.opts.json_artifact_notifications {\n@@ -650,7 +650,7 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n     out_filename: &Path,\n     codegen_results: &CodegenResults,\n     tmpdir: &Path,\n-) {\n+) -> Result<(), ErrorGuaranteed> {\n     info!(\"preparing {:?} to {:?}\", crate_type, out_filename);\n     let (linker_path, flavor) = linker_and_flavor(sess);\n     let mut cmd = linker_with_args::<B>(\n@@ -661,7 +661,7 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n         tmpdir,\n         out_filename,\n         codegen_results,\n-    );\n+    )?;\n \n     linker::disable_localization(&mut cmd);\n \n@@ -1000,6 +1000,8 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n             (Strip::None, _) => {}\n         }\n     }\n+\n+    Ok(())\n }\n \n // Temporarily support both -Z strip and -C strip\n@@ -1848,7 +1850,7 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n     tmpdir: &Path,\n     out_filename: &Path,\n     codegen_results: &CodegenResults,\n-) -> Command {\n+) -> Result<Command, ErrorGuaranteed> {\n     let crt_objects_fallback = crt_objects_fallback(sess, crate_type);\n     let cmd = &mut *super::linker::get_linker(\n         sess,\n@@ -1955,6 +1957,18 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n         add_upstream_native_libraries(cmd, sess, codegen_results);\n     }\n \n+    // Link with the import library generated for any raw-dylib functions.\n+    for (raw_dylib_name, raw_dylib_imports) in\n+        collate_raw_dylibs(sess, &codegen_results.crate_info.used_libraries)?\n+    {\n+        cmd.add_object(&B::create_dll_import_lib(\n+            sess,\n+            &raw_dylib_name,\n+            &raw_dylib_imports,\n+            tmpdir,\n+        ));\n+    }\n+\n     // Library linking above uses some global state for things like `-Bstatic`/`-Bdynamic` to make\n     // command line shorter, reset it to default here before adding more libraries.\n     cmd.reset_per_library_state();\n@@ -1998,7 +2012,7 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n     // to it and remove the option.\n     add_post_link_args(cmd, sess, flavor);\n \n-    cmd.take_cmd()\n+    Ok(cmd.take_cmd())\n }\n \n fn add_order_independent_options(\n@@ -2222,8 +2236,7 @@ fn add_local_native_libraries(\n                 }\n             }\n             NativeLibKind::RawDylib => {\n-                // FIXME(#58713): Proper handling for raw dylibs.\n-                bug!(\"raw_dylib feature not yet implemented\");\n+                // Ignore RawDylib here, they are handled separately in linker_with_args().\n             }\n         }\n     }"}, {"sha": "33bf95ac1657ed171e2c64175e6230694a284d3b", "filename": "src/test/run-make-fulldeps/tools.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f33785ed4a4774c5d68c78a13a24f9faf0dac55/src%2Ftest%2Frun-make-fulldeps%2Ftools.mk", "raw_url": "https://github.com/rust-lang/rust/raw/1f33785ed4a4774c5d68c78a13a24f9faf0dac55/src%2Ftest%2Frun-make-fulldeps%2Ftools.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Ftools.mk?ref=1f33785ed4a4774c5d68c78a13a24f9faf0dac55", "patch": "@@ -90,7 +90,7 @@ NATIVE_STATICLIB = $(TMPDIR)/$(call NATIVE_STATICLIB_FILE,$(1))\n OUT_EXE=-Fe:`cygpath -w $(TMPDIR)/$(call BIN,$(1))` \\\n \t-Fo:`cygpath -w $(TMPDIR)/$(1).obj`\n else\n-COMPILE_OBJ = $(CC) -c -o $(1) $(2)\n+COMPILE_OBJ = $(CC) -v -c -o $(1) $(2)\n COMPILE_OBJ_CXX = $(CXX) -c -o $(1) $(2)\n NATIVE_STATICLIB_FILE = lib$(1).a\n NATIVE_STATICLIB = $(call STATICLIB,$(1))"}, {"sha": "1badde541128df48928fc69b19f217999fca9939", "filename": "src/test/run-make/raw-dylib-alt-calling-convention/Makefile", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f33785ed4a4774c5d68c78a13a24f9faf0dac55/src%2Ftest%2Frun-make%2Fraw-dylib-alt-calling-convention%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/1f33785ed4a4774c5d68c78a13a24f9faf0dac55/src%2Ftest%2Frun-make%2Fraw-dylib-alt-calling-convention%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-alt-calling-convention%2FMakefile?ref=1f33785ed4a4774c5d68c78a13a24f9faf0dac55", "patch": "@@ -6,14 +6,14 @@\n -include ../../run-make-fulldeps/tools.mk\n \n all:\n+\t$(RUSTC) --crate-type lib --crate-name raw_dylib_alt_calling_convention_test lib.rs\n+\t$(RUSTC) --crate-type bin driver.rs -L \"$(TMPDIR)\"\n \t$(call COMPILE_OBJ,\"$(TMPDIR)\"/extern.obj,extern.c)\n ifdef IS_MSVC\n-\t$(CC) \"$(TMPDIR)\"/extern.obj -link -dll -out:\"$(TMPDIR)\"/extern.dll\n+\t$(CC) \"$(TMPDIR)\"/extern.obj -link -dll -out:\"$(TMPDIR)\"/extern.dll -noimplib\n else\n \t$(CC) \"$(TMPDIR)\"/extern.obj -shared -o \"$(TMPDIR)\"/extern.dll\n endif\n-\t$(RUSTC) --crate-type lib --crate-name raw_dylib_alt_calling_convention_test lib.rs\n-\t$(RUSTC) --crate-type bin driver.rs -L \"$(TMPDIR)\"\n \t\"$(TMPDIR)\"/driver > \"$(TMPDIR)\"/output.txt\n \n ifdef RUSTC_BLESS_TEST"}, {"sha": "713f665078e579bc84a00c9d7bb6e83be28a20e0", "filename": "src/test/run-make/raw-dylib-c/Makefile", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1f33785ed4a4774c5d68c78a13a24f9faf0dac55/src%2Ftest%2Frun-make%2Fraw-dylib-c%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/1f33785ed4a4774c5d68c78a13a24f9faf0dac55/src%2Ftest%2Frun-make%2Fraw-dylib-c%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-c%2FMakefile?ref=1f33785ed4a4774c5d68c78a13a24f9faf0dac55", "patch": "@@ -5,21 +5,24 @@\n -include ../../run-make-fulldeps/tools.mk\n \n all:\n+\t$(RUSTC) --crate-type lib --crate-name raw_dylib_test lib.rs\n+\t$(RUSTC) --crate-type bin driver.rs -L \"$(TMPDIR)\"\n+\t$(RUSTC) --crate-type bin --crate-name raw_dylib_test_bin lib.rs\n \t$(call COMPILE_OBJ,\"$(TMPDIR)\"/extern_1.obj,extern_1.c)\n \t$(call COMPILE_OBJ,\"$(TMPDIR)\"/extern_2.obj,extern_2.c)\n ifdef IS_MSVC\n-\t$(CC) \"$(TMPDIR)\"/extern_1.obj -link -dll -out:\"$(TMPDIR)\"/extern_1.dll\n-\t$(CC) \"$(TMPDIR)\"/extern_2.obj -link -dll -out:\"$(TMPDIR)\"/extern_2.dll\n+\t$(CC) \"$(TMPDIR)\"/extern_1.obj -link -dll -out:\"$(TMPDIR)\"/extern_1.dll -noimplib\n+\t$(CC) \"$(TMPDIR)\"/extern_2.obj -link -dll -out:\"$(TMPDIR)\"/extern_2.dll -noimplib\n else\n \t$(CC) \"$(TMPDIR)\"/extern_1.obj -shared -o \"$(TMPDIR)\"/extern_1.dll\n \t$(CC) \"$(TMPDIR)\"/extern_2.obj -shared -o \"$(TMPDIR)\"/extern_2.dll\n endif\n-\t$(RUSTC) --crate-type lib --crate-name raw_dylib_test lib.rs\n-\t$(RUSTC) --crate-type bin driver.rs -L \"$(TMPDIR)\"\n \t\"$(TMPDIR)\"/driver > \"$(TMPDIR)\"/output.txt\n+\t\"$(TMPDIR)\"/raw_dylib_test_bin > \"$(TMPDIR)\"/output_bin.txt\n \n ifdef RUSTC_BLESS_TEST\n \tcp \"$(TMPDIR)\"/output.txt output.txt\n else\n \t$(DIFF) output.txt \"$(TMPDIR)\"/output.txt\n+\t$(DIFF) output.txt \"$(TMPDIR)\"/output_bin.txt\n endif"}, {"sha": "58f7ccb38ce4a35ebf57f72557721cf1efc3769e", "filename": "src/test/run-make/raw-dylib-c/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f33785ed4a4774c5d68c78a13a24f9faf0dac55/src%2Ftest%2Frun-make%2Fraw-dylib-c%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f33785ed4a4774c5d68c78a13a24f9faf0dac55/src%2Ftest%2Frun-make%2Fraw-dylib-c%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-c%2Flib.rs?ref=1f33785ed4a4774c5d68c78a13a24f9faf0dac55", "patch": "@@ -20,3 +20,7 @@ pub fn library_function() {\n         extern_fn_3();\n     }\n }\n+\n+fn main() {\n+    library_function();\n+}"}, {"sha": "c9baa3c1ec9ac111d56974417c7fe0aed4848bae", "filename": "src/test/run-make/raw-dylib-link-ordinal/Makefile", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f33785ed4a4774c5d68c78a13a24f9faf0dac55/src%2Ftest%2Frun-make%2Fraw-dylib-link-ordinal%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/1f33785ed4a4774c5d68c78a13a24f9faf0dac55/src%2Ftest%2Frun-make%2Fraw-dylib-link-ordinal%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-link-ordinal%2FMakefile?ref=1f33785ed4a4774c5d68c78a13a24f9faf0dac55", "patch": "@@ -5,14 +5,14 @@\n -include ../../run-make-fulldeps/tools.mk\n \n all:\n+\t$(RUSTC) --crate-type lib --crate-name raw_dylib_test lib.rs\n+\t$(RUSTC) --crate-type bin driver.rs -L \"$(TMPDIR)\"\n \t$(call COMPILE_OBJ,\"$(TMPDIR)\"/exporter.obj,exporter.c)\n ifdef IS_MSVC\n-\t$(CC) \"$(TMPDIR)\"/exporter.obj exporter.def -link -dll -out:\"$(TMPDIR)\"/exporter.dll\n+\t$(CC) \"$(TMPDIR)\"/exporter.obj exporter.def -link -dll -out:\"$(TMPDIR)\"/exporter.dll -noimplib\n else\n \t$(CC) \"$(TMPDIR)\"/exporter.obj exporter.def -shared -o \"$(TMPDIR)\"/exporter.dll\n endif\n-\t$(RUSTC) --crate-type lib --crate-name raw_dylib_test lib.rs\n-\t$(RUSTC) --crate-type bin driver.rs -L \"$(TMPDIR)\"\n \t\"$(TMPDIR)\"/driver > \"$(TMPDIR)\"/output.txt\n \n ifdef RUSTC_BLESS_TEST"}, {"sha": "3360a97b5ff0e5e58d08df473671b75a6896a35e", "filename": "src/test/run-make/raw-dylib-stdcall-ordinal/Makefile", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f33785ed4a4774c5d68c78a13a24f9faf0dac55/src%2Ftest%2Frun-make%2Fraw-dylib-stdcall-ordinal%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/1f33785ed4a4774c5d68c78a13a24f9faf0dac55/src%2Ftest%2Frun-make%2Fraw-dylib-stdcall-ordinal%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-stdcall-ordinal%2FMakefile?ref=1f33785ed4a4774c5d68c78a13a24f9faf0dac55", "patch": "@@ -6,14 +6,14 @@\n -include ../../run-make-fulldeps/tools.mk\n \n all:\n+\t$(RUSTC) --crate-type lib --crate-name raw_dylib_test lib.rs\n+\t$(RUSTC) --crate-type bin driver.rs -L \"$(TMPDIR)\"\n \t$(call COMPILE_OBJ,\"$(TMPDIR)\"/exporter.obj,exporter.c)\n ifdef IS_MSVC\n-\t$(CC) \"$(TMPDIR)\"/exporter.obj exporter-msvc.def -link -dll -out:\"$(TMPDIR)\"/exporter.dll\n+\t$(CC) \"$(TMPDIR)\"/exporter.obj exporter-msvc.def -link -dll -out:\"$(TMPDIR)\"/exporter.dll -noimplib\n else\n \t$(CC) \"$(TMPDIR)\"/exporter.obj exporter-gnu.def -shared -o \"$(TMPDIR)\"/exporter.dll\n endif\n-\t$(RUSTC) --crate-type lib --crate-name raw_dylib_test lib.rs\n-\t$(RUSTC) --crate-type bin driver.rs -L \"$(TMPDIR)\"\n \t\"$(TMPDIR)\"/driver > \"$(TMPDIR)\"/actual_output.txt\n \n ifdef RUSTC_BLESS_TEST"}]}