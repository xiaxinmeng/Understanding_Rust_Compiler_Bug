{"sha": "687d7646de96805794820ee63fc282caa7d90e27", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4N2Q3NjQ2ZGU5NjgwNTc5NDgyMGVlNjNmYzI4MmNhYTdkOTBlMjc=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-10-12T19:07:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-12T19:07:50Z"}, "message": "Rollup merge of #77550 - lcnr:ty-dep-path-ct-cleanup, r=ecstatic-morse\n\nadd shims for WithOptConstParam query calls\n\nr? @ecstatic-morse @eddyb", "tree": {"sha": "9e2d71456688e48ad20489215e42159de11ad7e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e2d71456688e48ad20489215e42159de11ad7e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/687d7646de96805794820ee63fc282caa7d90e27", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfhKmHCRBK7hj4Ov3rIwAAdHIIAK3z9C4P1uct+5OVHAokA3Mh\nAkIadzjRIJz+LUfP4osh+AjeyNfAyDslrYjYIYPotap6D+VuBxmL3b9RKo1wivvy\n000vR8TW83bxLz3f2Yj5vi62lYFMUtb+tfWj/6chhPet3Jde18Nnp08944+FczHQ\neYdePbrRvYWEVPLQClS8P7FPBuookUU6YaJPuWqRr5wmCU9U9SiGG1AKdVJBsFrz\nySEWNXlg4Lnz1zPn+S2fL5DIY3GYGsqsz6gXBuusCjeBjvsmfzWN/3AdJnWNhmAu\nGkCNEs+Di18uVaMseQSwcxxZ3E+2XVdVO/MKdusH0UmLdTiO4tRY546rOppZRNg=\n=SIdz\n-----END PGP SIGNATURE-----\n", "payload": "tree 9e2d71456688e48ad20489215e42159de11ad7e1\nparent f3ab6f05846951bed41d4b0661ac0735aebf3687\nparent 8160bfa39caad79a224ec44449efe48dd0c79c36\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1602529670 +0900\ncommitter GitHub <noreply@github.com> 1602529670 +0900\n\nRollup merge of #77550 - lcnr:ty-dep-path-ct-cleanup, r=ecstatic-morse\n\nadd shims for WithOptConstParam query calls\n\nr? @ecstatic-morse @eddyb\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/687d7646de96805794820ee63fc282caa7d90e27", "html_url": "https://github.com/rust-lang/rust/commit/687d7646de96805794820ee63fc282caa7d90e27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/687d7646de96805794820ee63fc282caa7d90e27/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3ab6f05846951bed41d4b0661ac0735aebf3687", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3ab6f05846951bed41d4b0661ac0735aebf3687", "html_url": "https://github.com/rust-lang/rust/commit/f3ab6f05846951bed41d4b0661ac0735aebf3687"}, {"sha": "8160bfa39caad79a224ec44449efe48dd0c79c36", "url": "https://api.github.com/repos/rust-lang/rust/commits/8160bfa39caad79a224ec44449efe48dd0c79c36", "html_url": "https://github.com/rust-lang/rust/commit/8160bfa39caad79a224ec44449efe48dd0c79c36"}], "stats": {"total": 74, "additions": 41, "deletions": 33}, "files": [{"sha": "b5cdd7edb8dbabfaf10fe9c7452fec58f7f68fb2", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/687d7646de96805794820ee63fc282caa7d90e27/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/687d7646de96805794820ee63fc282caa7d90e27/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=687d7646de96805794820ee63fc282caa7d90e27", "patch": "@@ -1,9 +1,10 @@\n //! Values computed by queries that use MIR.\n \n-use crate::mir::{Body, Promoted};\n+use crate::mir::{abstract_const, Body, Promoted};\n use crate::ty::{self, Ty, TyCtxt};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n+use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_index::bit_set::BitMatrix;\n@@ -407,7 +408,12 @@ pub struct CoverageInfo {\n     pub num_expressions: u32,\n }\n \n+/// Shims which make dealing with `WithOptConstParam` easier.\n+///\n+/// For more information on why this is needed, consider looking\n+/// at the docs for `WithOptConstParam` itself.\n impl<'tcx> TyCtxt<'tcx> {\n+    #[inline]\n     pub fn mir_borrowck_opt_const_arg(\n         self,\n         def: ty::WithOptConstParam<LocalDefId>,\n@@ -419,6 +425,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n+    #[inline]\n     pub fn mir_const_qualif_opt_const_arg(\n         self,\n         def: ty::WithOptConstParam<LocalDefId>,\n@@ -430,7 +437,8 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n-    pub fn promoted_mir_of_opt_const_arg(\n+    #[inline]\n+    pub fn promoted_mir_opt_const_arg(\n         self,\n         def: ty::WithOptConstParam<DefId>,\n     ) -> &'tcx IndexVec<Promoted, Body<'tcx>> {\n@@ -440,4 +448,28 @@ impl<'tcx> TyCtxt<'tcx> {\n             self.promoted_mir(def.did)\n         }\n     }\n+\n+    #[inline]\n+    pub fn optimized_mir_opt_const_arg(\n+        self,\n+        def: ty::WithOptConstParam<DefId>,\n+    ) -> &'tcx Body<'tcx> {\n+        if let Some((did, param_did)) = def.as_const_arg() {\n+            self.optimized_mir_of_const_arg((did, param_did))\n+        } else {\n+            self.optimized_mir(def.did)\n+        }\n+    }\n+\n+    #[inline]\n+    pub fn mir_abstract_const_opt_const_arg(\n+        self,\n+        def: ty::WithOptConstParam<DefId>,\n+    ) -> Result<Option<&'tcx [abstract_const::Node<'tcx>]>, ErrorReported> {\n+        if let Some((did, param_did)) = def.as_const_arg() {\n+            self.mir_abstract_const_of_const_arg((did, param_did))\n+        } else {\n+            self.mir_abstract_const(def.did)\n+        }\n+    }\n }"}, {"sha": "cccfc5eced9001071aa348cd5ef677534c664e0d", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/687d7646de96805794820ee63fc282caa7d90e27/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/687d7646de96805794820ee63fc282caa7d90e27/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=687d7646de96805794820ee63fc282caa7d90e27", "patch": "@@ -2953,13 +2953,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Returns the possibly-auto-generated MIR of a `(DefId, Subst)` pair.\n     pub fn instance_mir(self, instance: ty::InstanceDef<'tcx>) -> &'tcx Body<'tcx> {\n         match instance {\n-            ty::InstanceDef::Item(def) => {\n-                if let Some((did, param_did)) = def.as_const_arg() {\n-                    self.optimized_mir_of_const_arg((did, param_did))\n-                } else {\n-                    self.optimized_mir(def.did)\n-                }\n-            }\n+            ty::InstanceDef::Item(def) => self.optimized_mir_opt_const_arg(def),\n             ty::InstanceDef::VtableShim(..)\n             | ty::InstanceDef::ReifyShim(..)\n             | ty::InstanceDef::Intrinsic(..)"}, {"sha": "6ef73b04238d4d00cd88587a1c54b9df26b0092e", "filename": "compiler/rustc_mir/src/const_eval/eval_queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/687d7646de96805794820ee63fc282caa7d90e27/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/687d7646de96805794820ee63fc282caa7d90e27/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=687d7646de96805794820ee63fc282caa7d90e27", "patch": "@@ -343,7 +343,7 @@ pub fn eval_to_allocation_raw_provider<'tcx>(\n                     // deny-by-default lint\n                     _ => {\n                         if let Some(p) = cid.promoted {\n-                            let span = tcx.promoted_mir_of_opt_const_arg(def.to_global())[p].span;\n+                            let span = tcx.promoted_mir_opt_const_arg(def.to_global())[p].span;\n                             if let err_inval!(ReferencedConstant) = err.error {\n                                 Err(err.report_as_error(\n                                     tcx.at(span),"}, {"sha": "ec1195d3703b449586750767eb3b6c49fcce718d", "filename": "compiler/rustc_mir/src/interpret/eval_context.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/687d7646de96805794820ee63fc282caa7d90e27/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/687d7646de96805794820ee63fc282caa7d90e27/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs?ref=687d7646de96805794820ee63fc282caa7d90e27", "patch": "@@ -477,16 +477,12 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         }\n         trace!(\"load mir(instance={:?}, promoted={:?})\", instance, promoted);\n         if let Some(promoted) = promoted {\n-            return Ok(&self.tcx.promoted_mir_of_opt_const_arg(def)[promoted]);\n+            return Ok(&self.tcx.promoted_mir_opt_const_arg(def)[promoted]);\n         }\n         match instance {\n             ty::InstanceDef::Item(def) => {\n                 if self.tcx.is_mir_available(def.did) {\n-                    if let Some((did, param_did)) = def.as_const_arg() {\n-                        Ok(self.tcx.optimized_mir_of_const_arg((did, param_did)))\n-                    } else {\n-                        Ok(self.tcx.optimized_mir(def.did))\n-                    }\n+                    Ok(self.tcx.optimized_mir_opt_const_arg(def))\n                 } else {\n                     throw_unsup!(NoMirFor(def.did))\n                 }"}, {"sha": "4bafcb2535f0c4070b803f3ca524cbbf8b80289d", "filename": "compiler/rustc_mir/src/transform/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/687d7646de96805794820ee63fc282caa7d90e27/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/687d7646de96805794820ee63fc282caa7d90e27/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs?ref=687d7646de96805794820ee63fc282caa7d90e27", "patch": "@@ -287,11 +287,7 @@ fn mir_promoted(\n     // this point, before we steal the mir-const result.\n     // Also this means promotion can rely on all const checks having been done.\n     let _ = tcx.mir_const_qualif_opt_const_arg(def);\n-    let _ = if let Some(param_did) = def.const_param_did {\n-        tcx.mir_abstract_const_of_const_arg((def.did, param_did))\n-    } else {\n-        tcx.mir_abstract_const(def.did.to_def_id())\n-    };\n+    let _ = tcx.mir_abstract_const_opt_const_arg(def.to_global());\n     let mut body = tcx.mir_const(def).steal();\n \n     let mut required_consts = Vec::new();"}, {"sha": "1e1eb16faf407a8efb1b57aa464b0bfeb3bec572", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/687d7646de96805794820ee63fc282caa7d90e27/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/687d7646de96805794820ee63fc282caa7d90e27/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=687d7646de96805794820ee63fc282caa7d90e27", "patch": "@@ -147,11 +147,7 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n     if concrete.is_ok() && substs.has_param_types_or_consts() {\n         match infcx.tcx.def_kind(def.did) {\n             DefKind::AnonConst => {\n-                let mir_body = if let Some(def) = def.as_const_arg() {\n-                    infcx.tcx.optimized_mir_of_const_arg(def)\n-                } else {\n-                    infcx.tcx.optimized_mir(def.did)\n-                };\n+                let mir_body = infcx.tcx.optimized_mir_opt_const_arg(def);\n \n                 if mir_body.is_polymorphic {\n                     future_compat_lint();\n@@ -212,13 +208,7 @@ impl AbstractConst<'tcx> {\n         def: ty::WithOptConstParam<DefId>,\n         substs: SubstsRef<'tcx>,\n     ) -> Result<Option<AbstractConst<'tcx>>, ErrorReported> {\n-        let inner = match (def.did.as_local(), def.const_param_did) {\n-            (Some(did), Some(param_did)) => {\n-                tcx.mir_abstract_const_of_const_arg((did, param_did))?\n-            }\n-            _ => tcx.mir_abstract_const(def.did)?,\n-        };\n-\n+        let inner = tcx.mir_abstract_const_opt_const_arg(def)?;\n         Ok(inner.map(|inner| AbstractConst { inner, substs }))\n     }\n "}]}