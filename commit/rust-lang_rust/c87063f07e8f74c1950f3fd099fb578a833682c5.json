{"sha": "c87063f07e8f74c1950f3fd099fb578a833682c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4NzA2M2YwN2U4Zjc0YzE5NTBmM2ZkMDk5ZmI1NzhhODMzNjgyYzU=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-06-14T22:40:09Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-08-17T02:50:57Z"}, "message": "rustc: avoid using subst::VecPerParamSpace::{empty,new} directly.", "tree": {"sha": "717bf7f2daf51c4847a7b4fb71584e25328f5661", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/717bf7f2daf51c4847a7b4fb71584e25328f5661"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c87063f07e8f74c1950f3fd099fb578a833682c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c87063f07e8f74c1950f3fd099fb578a833682c5", "html_url": "https://github.com/rust-lang/rust/commit/c87063f07e8f74c1950f3fd099fb578a833682c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c87063f07e8f74c1950f3fd099fb578a833682c5/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77dc61b5c68aacce4ab5d115b14825699ea6302b", "url": "https://api.github.com/repos/rust-lang/rust/commits/77dc61b5c68aacce4ab5d115b14825699ea6302b", "html_url": "https://github.com/rust-lang/rust/commit/77dc61b5c68aacce4ab5d115b14825699ea6302b"}], "stats": {"total": 82, "additions": 38, "deletions": 44}, "files": [{"sha": "b5133738ada8cc957a9e0edc008db27254b716e5", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c87063f07e8f74c1950f3fd099fb578a833682c5/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87063f07e8f74c1950f3fd099fb578a833682c5/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=c87063f07e8f74c1950f3fd099fb578a833682c5", "patch": "@@ -180,9 +180,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n              ity.ty);\n \n         let rps = self.region_vars_for_defs(obligation.cause.span, rps);\n-        let mut substs = subst::Substs::new(\n-            subst::VecPerParamSpace::empty(),\n-            subst::VecPerParamSpace::new(Vec::new(), rps, Vec::new()));\n+        let mut substs = subst::Substs::new_type(vec![], rps);\n         self.type_vars_for_defs(obligation.cause.span,\n                                 TypeSpace,\n                                 &mut substs,"}, {"sha": "44532fcb4e64ff19d4d98a805bab815b66eee62e", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c87063f07e8f74c1950f3fd099fb578a833682c5/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87063f07e8f74c1950f3fd099fb578a833682c5/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=c87063f07e8f74c1950f3fd099fb578a833682c5", "patch": "@@ -429,6 +429,15 @@ pub struct ItemVariances {\n     pub regions: VecPerParamSpace<Variance>,\n }\n \n+impl ItemVariances {\n+    pub fn empty() -> ItemVariances {\n+        ItemVariances {\n+            types: VecPerParamSpace::empty(),\n+            regions: VecPerParamSpace::empty(),\n+        }\n+    }\n+}\n+\n #[derive(Clone, PartialEq, RustcDecodable, RustcEncodable, Copy)]\n pub enum Variance {\n     Covariant,      // T<A> <: T<B> iff A <: B -- e.g., function return type\n@@ -2864,22 +2873,20 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn construct_free_substs(self, generics: &Generics<'gcx>,\n                                  free_id_outlive: CodeExtent) -> Substs<'gcx> {\n         // map T => T\n-        let mut types = VecPerParamSpace::empty();\n-        for def in generics.types.as_full_slice() {\n+        let types = generics.types.map(|def| {\n             debug!(\"construct_parameter_environment(): push_types_from_defs: def={:?}\",\n                     def);\n-            types.push(def.space, self.global_tcx().mk_param_from_def(def));\n-        }\n+            self.global_tcx().mk_param_from_def(def)\n+        });\n \n         // map bound 'a => free 'a\n-        let mut regions = VecPerParamSpace::empty();\n-        for def in generics.regions.as_full_slice() {\n+        let regions = generics.regions.map(|def| {\n             let region =\n                 ReFree(FreeRegion { scope: free_id_outlive,\n                                     bound_region: def.to_bound_region() });\n             debug!(\"push_region_params {:?}\", region);\n-            regions.push(def.space, region);\n-        }\n+            region\n+        });\n \n         Substs {\n             types: types,"}, {"sha": "63399ee1388933dda880267572a55c809c0bd6bd", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c87063f07e8f74c1950f3fd099fb578a833682c5/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87063f07e8f74c1950f3fd099fb578a833682c5/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=c87063f07e8f74c1950f3fd099fb578a833682c5", "patch": "@@ -41,6 +41,14 @@ impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n         Substs { types: t, regions: r }\n     }\n \n+    pub fn new_fn(t: Vec<Ty<'tcx>>,\n+                  r: Vec<ty::Region>)\n+                  -> Substs<'tcx>\n+    {\n+        Substs::new(VecPerParamSpace::new(vec![], vec![], t),\n+                    VecPerParamSpace::new(vec![], vec![], r))\n+    }\n+\n     pub fn new_type(t: Vec<Ty<'tcx>>,\n                     r: Vec<ty::Region>)\n                     -> Substs<'tcx>"}, {"sha": "eeb1859c01311a15beea62a50e1dcb8cc295b5cc", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c87063f07e8f74c1950f3fd099fb578a833682c5/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87063f07e8f74c1950f3fd099fb578a833682c5/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=c87063f07e8f74c1950f3fd099fb578a833682c5", "patch": "@@ -35,7 +35,6 @@ use middle::cstore::{DefLike, DlDef, DlField, DlImpl, tls};\n use rustc::hir::def::Def;\n use rustc::hir::def_id::{DefId, DefIndex};\n use middle::lang_items;\n-use rustc::ty::subst;\n use rustc::ty::{ImplContainer, TraitContainer};\n use rustc::ty::{self, Ty, TyCtxt, TypeFoldable, VariantKind};\n \n@@ -1580,25 +1579,24 @@ fn doc_generics<'a, 'tcx>(base_doc: rbml::Doc,\n {\n     let doc = reader::get_doc(base_doc, tag);\n \n-    let mut types = subst::VecPerParamSpace::empty();\n+    let mut generics = ty::Generics::empty();\n     for p in reader::tagged_docs(doc, tag_type_param_def) {\n         let bd =\n             TyDecoder::with_doc(tcx, cdata.cnum, p,\n                                 &mut |did| translate_def_id(cdata, did))\n             .parse_type_param_def();\n-        types.push(bd.space, bd);\n+        generics.types.push(bd.space, bd);\n     }\n \n-    let mut regions = subst::VecPerParamSpace::empty();\n     for p in reader::tagged_docs(doc, tag_region_param_def) {\n         let bd =\n             TyDecoder::with_doc(tcx, cdata.cnum, p,\n                                 &mut |did| translate_def_id(cdata, did))\n             .parse_region_param_def();\n-        regions.push(bd.space, bd);\n+        generics.regions.push(bd.space, bd);\n     }\n \n-    ty::Generics { types: types, regions: regions }\n+    generics\n }\n \n fn doc_predicate<'a, 'tcx>(cdata: Cmd,"}, {"sha": "6af9ad02b91ba886cb41f6de42de82e949506f75", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c87063f07e8f74c1950f3fd099fb578a833682c5/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87063f07e8f74c1950f3fd099fb578a833682c5/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=c87063f07e8f74c1950f3fd099fb578a833682c5", "patch": "@@ -89,7 +89,7 @@ should go to.\n use build::{BlockAnd, BlockAndExtension, Builder, CFG, ScopeAuxiliary, ScopeId};\n use rustc::middle::region::{CodeExtent, CodeExtentData};\n use rustc::middle::lang_items;\n-use rustc::ty::subst::{Substs, Subst, VecPerParamSpace};\n+use rustc::ty::subst::{Substs, Subst};\n use rustc::ty::{Ty, TyCtxt};\n use rustc::mir::repr::*;\n use syntax_pos::Span;\n@@ -750,10 +750,7 @@ fn build_free<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                               -> TerminatorKind<'tcx> {\n     let free_func = tcx.lang_items.require(lang_items::BoxFreeFnLangItem)\n                        .unwrap_or_else(|e| tcx.sess.fatal(&e));\n-    let substs = tcx.mk_substs(Substs::new(\n-        VecPerParamSpace::new(vec![], vec![], vec![data.item_ty]),\n-        VecPerParamSpace::new(vec![], vec![], vec![])\n-    ));\n+    let substs = tcx.mk_substs(Substs::new_fn(vec![data.item_ty], vec![]));\n     TerminatorKind::Call {\n         func: Operand::Constant(Constant {\n             span: data.span,"}, {"sha": "0dcac188bb0247ecddd0200e2d0ec30c41219c4a", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c87063f07e8f74c1950f3fd099fb578a833682c5/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87063f07e8f74c1950f3fd099fb578a833682c5/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=c87063f07e8f74c1950f3fd099fb578a833682c5", "patch": "@@ -39,7 +39,7 @@ use rustc::cfg;\n use rustc::hir::def_id::DefId;\n use middle::lang_items::{LangItem, ExchangeMallocFnLangItem, StartFnLangItem};\n use rustc::hir::pat_util::simple_name;\n-use rustc::ty::subst::{self, Substs};\n+use rustc::ty::subst::Substs;\n use rustc::traits;\n use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc::ty::adjustment::CustomCoerceUnsized;\n@@ -675,10 +675,7 @@ pub fn custom_coerce_unsize_info<'scx, 'tcx>(scx: &SharedCrateContext<'scx, 'tcx\n                                              source_ty: Ty<'tcx>,\n                                              target_ty: Ty<'tcx>)\n                                              -> CustomCoerceUnsized {\n-    let trait_substs = Substs::new(subst::VecPerParamSpace::new(vec![source_ty],\n-                                                                vec![target_ty],\n-                                                                Vec::new()),\n-                                   subst::VecPerParamSpace::empty());\n+    let trait_substs = Substs::new_trait(vec![target_ty], vec![], source_ty);\n \n     let trait_ref = ty::Binder(ty::TraitRef {\n         def_id: scx.tcx().lang_items.coerce_unsized_trait().unwrap(),"}, {"sha": "fae64f3741974723572a7ba5d9ca75aa06f8bae9", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c87063f07e8f74c1950f3fd099fb578a833682c5/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87063f07e8f74c1950f3fd099fb578a833682c5/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=c87063f07e8f74c1950f3fd099fb578a833682c5", "patch": "@@ -2796,9 +2796,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         debug!(\"impl_self_ty: tps={:?} rps={:?} raw_ty={:?}\", tps, rps, raw_ty);\n \n         let rps = self.region_vars_for_defs(span, rps);\n-        let mut substs = subst::Substs::new(\n-            VecPerParamSpace::empty(),\n-            VecPerParamSpace::new(Vec::new(), rps, Vec::new()));\n+        let mut substs = subst::Substs::new_type(vec![], rps);\n         self.type_vars_for_defs(span, ParamSpace::TypeSpace, &mut substs, tps);\n         let substd_ty = self.instantiate_type_scheme(span, &substs, &raw_ty);\n "}, {"sha": "8bb49410a5bdc67e02f3bff2224a920294e83796", "filename": "src/librustc_typeck/variance/solve.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c87063f07e8f74c1950f3fd099fb578a833682c5/src%2Flibrustc_typeck%2Fvariance%2Fsolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87063f07e8f74c1950f3fd099fb578a833682c5/src%2Flibrustc_typeck%2Fvariance%2Fsolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fsolve.rs?ref=c87063f07e8f74c1950f3fd099fb578a833682c5", "patch": "@@ -15,7 +15,6 @@\n //! optimal solution to the constraints. The final variance for each\n //! inferred is then written into the `variance_map` in the tcx.\n \n-use rustc::ty::subst::VecPerParamSpace;\n use rustc::ty;\n use std::rc::Rc;\n \n@@ -109,26 +108,21 @@ impl<'a, 'tcx> SolveContext<'a, 'tcx> {\n         let num_inferred = self.terms_cx.num_inferred();\n         while index < num_inferred {\n             let item_id = inferred_infos[index].item_id;\n-            let mut types = VecPerParamSpace::empty();\n-            let mut regions = VecPerParamSpace::empty();\n+            let mut item_variances = ty::ItemVariances::empty();\n \n             while index < num_inferred && inferred_infos[index].item_id == item_id {\n                 let info = &inferred_infos[index];\n                 let variance = solutions[index];\n                 debug!(\"Index {} Info {} / {:?} / {:?} Variance {:?}\",\n                        index, info.index, info.kind, info.space, variance);\n                 match info.kind {\n-                    TypeParam => { types.push(info.space, variance); }\n-                    RegionParam => { regions.push(info.space, variance); }\n+                    TypeParam => { item_variances.types.push(info.space, variance); }\n+                    RegionParam => { item_variances.regions.push(info.space, variance); }\n                 }\n \n                 index += 1;\n             }\n \n-            let item_variances = ty::ItemVariances {\n-                types: types,\n-                regions: regions\n-            };\n             debug!(\"item_id={} item_variances={:?}\",\n                     item_id,\n                     item_variances);"}, {"sha": "72f8d9cb23ba8565e1bd709dc95818c451ed806c", "filename": "src/librustc_typeck/variance/terms.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c87063f07e8f74c1950f3fd099fb578a833682c5/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c87063f07e8f74c1950f3fd099fb578a833682c5/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs?ref=c87063f07e8f74c1950f3fd099fb578a833682c5", "patch": "@@ -21,7 +21,7 @@\n \n use arena::TypedArena;\n use dep_graph::DepTrackingMapConfig;\n-use rustc::ty::subst::{ParamSpace, FnSpace, TypeSpace, SelfSpace, VecPerParamSpace};\n+use rustc::ty::subst::{ParamSpace, FnSpace, TypeSpace, SelfSpace};\n use rustc::ty::{self, TyCtxt};\n use rustc::ty::maps::ItemVariances;\n use std::fmt;\n@@ -112,10 +112,7 @@ pub fn determine_parameters_to_be_inferred<'a, 'tcx>(\n \n         // cache and share the variance struct used for items with\n         // no type/region parameters\n-        empty_variances: Rc::new(ty::ItemVariances {\n-            types: VecPerParamSpace::empty(),\n-            regions: VecPerParamSpace::empty()\n-        })\n+        empty_variances: Rc::new(ty::ItemVariances::empty())\n     };\n \n     // See README.md for a discussion on dep-graph management."}]}