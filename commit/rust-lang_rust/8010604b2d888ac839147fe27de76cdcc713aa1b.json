{"sha": "8010604b2d888ac839147fe27de76cdcc713aa1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwMTA2MDRiMmQ4ODhhYzgzOTE0N2ZlMjdkZTc2Y2RjYzcxM2FhMWI=", "commit": {"author": {"name": "Michael Lamparski", "email": "diagonaldevice@gmail.com", "date": "2018-05-09T22:03:56Z"}, "committer": {"name": "Michael Lamparski", "email": "diagonaldevice@gmail.com", "date": "2018-05-09T22:30:32Z"}, "message": "move See also links to top", "tree": {"sha": "12951db654a303474a8d4b4088966b56f66d19ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12951db654a303474a8d4b4088966b56f66d19ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8010604b2d888ac839147fe27de76cdcc713aa1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8010604b2d888ac839147fe27de76cdcc713aa1b", "html_url": "https://github.com/rust-lang/rust/commit/8010604b2d888ac839147fe27de76cdcc713aa1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8010604b2d888ac839147fe27de76cdcc713aa1b/comments", "author": {"login": "ExpHP", "id": 1411280, "node_id": "MDQ6VXNlcjE0MTEyODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1411280?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ExpHP", "html_url": "https://github.com/ExpHP", "followers_url": "https://api.github.com/users/ExpHP/followers", "following_url": "https://api.github.com/users/ExpHP/following{/other_user}", "gists_url": "https://api.github.com/users/ExpHP/gists{/gist_id}", "starred_url": "https://api.github.com/users/ExpHP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ExpHP/subscriptions", "organizations_url": "https://api.github.com/users/ExpHP/orgs", "repos_url": "https://api.github.com/users/ExpHP/repos", "events_url": "https://api.github.com/users/ExpHP/events{/privacy}", "received_events_url": "https://api.github.com/users/ExpHP/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ExpHP", "id": 1411280, "node_id": "MDQ6VXNlcjE0MTEyODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1411280?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ExpHP", "html_url": "https://github.com/ExpHP", "followers_url": "https://api.github.com/users/ExpHP/followers", "following_url": "https://api.github.com/users/ExpHP/following{/other_user}", "gists_url": "https://api.github.com/users/ExpHP/gists{/gist_id}", "starred_url": "https://api.github.com/users/ExpHP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ExpHP/subscriptions", "organizations_url": "https://api.github.com/users/ExpHP/orgs", "repos_url": "https://api.github.com/users/ExpHP/repos", "events_url": "https://api.github.com/users/ExpHP/events{/privacy}", "received_events_url": "https://api.github.com/users/ExpHP/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5f80f2a4f016bf724a1cfb580619d71c8fd39ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5f80f2a4f016bf724a1cfb580619d71c8fd39ec", "html_url": "https://github.com/rust-lang/rust/commit/e5f80f2a4f016bf724a1cfb580619d71c8fd39ec"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "6caf12aa7eb81983b9ff6d15c649bf2c7d26edc8", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8010604b2d888ac839147fe27de76cdcc713aa1b/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8010604b2d888ac839147fe27de76cdcc713aa1b/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=8010604b2d888ac839147fe27de76cdcc713aa1b", "patch": "@@ -10,6 +10,8 @@\n \n //! A dynamically-sized view into a contiguous sequence, `[T]`.\n //!\n+//! *[See also the slice primitive type](../../std/primitive.slice.html).*\n+//!\n //! Slices are a view into a block of memory represented as a pointer and a\n //! length.\n //!\n@@ -78,8 +80,6 @@\n //! * Further methods that return iterators are [`.split`], [`.splitn`],\n //!   [`.chunks`], [`.windows`] and more.\n //!\n-//! *[See also the slice primitive type](../../std/primitive.slice.html).*\n-//!\n //! [`Clone`]: ../../std/clone/trait.Clone.html\n //! [`Eq`]: ../../std/cmp/trait.Eq.html\n //! [`Ord`]: ../../std/cmp/trait.Ord.html"}, {"sha": "42efdea74b1ab6aa2b912c3e555e2d74d789850a", "filename": "src/liballoc/str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8010604b2d888ac839147fe27de76cdcc713aa1b/src%2Fliballoc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8010604b2d888ac839147fe27de76cdcc713aa1b/src%2Fliballoc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstr.rs?ref=8010604b2d888ac839147fe27de76cdcc713aa1b", "patch": "@@ -10,6 +10,8 @@\n \n //! Unicode string slices.\n //!\n+//! *[See also the `str` primitive type](../../std/primitive.str.html).*\n+//!\n //! The `&str` type is one of the two main string types, the other being `String`.\n //! Unlike its `String` counterpart, its contents are borrowed.\n //!\n@@ -29,8 +31,6 @@\n //! ```\n //! let hello_world: &'static str = \"Hello, world!\";\n //! ```\n-//!\n-//! *[See also the `str` primitive type](../../std/primitive.str.html).*\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "4a7dc13f0f2ca69e881e3707d819f8d323c41feb", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8010604b2d888ac839147fe27de76cdcc713aa1b/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8010604b2d888ac839147fe27de76cdcc713aa1b/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=8010604b2d888ac839147fe27de76cdcc713aa1b", "patch": "@@ -11,9 +11,9 @@\n //! This module provides constants which are specific to the implementation\n //! of the `f32` floating point data type.\n //!\n-//! Mathematically significant numbers are provided in the `consts` sub-module.\n-//!\n //! *[See also the `f32` primitive type](../../std/primitive.f32.html).*\n+//!\n+//! Mathematically significant numbers are provided in the `consts` sub-module.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "801de5e87bd10b002c9c1974bfa871fd4ee83dec", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8010604b2d888ac839147fe27de76cdcc713aa1b/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8010604b2d888ac839147fe27de76cdcc713aa1b/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=8010604b2d888ac839147fe27de76cdcc713aa1b", "patch": "@@ -11,9 +11,9 @@\n //! This module provides constants which are specific to the implementation\n //! of the `f64` floating point data type.\n //!\n-//! Mathematically significant numbers are provided in the `consts` sub-module.\n-//!\n //! *[See also the `f64` primitive type](../../std/primitive.f64.html).*\n+//!\n+//! Mathematically significant numbers are provided in the `consts` sub-module.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "f4d897b0111e7ed233ea4fdc4a1c0e434c778469", "filename": "src/libstd/f32.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8010604b2d888ac839147fe27de76cdcc713aa1b/src%2Flibstd%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8010604b2d888ac839147fe27de76cdcc713aa1b/src%2Flibstd%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff32.rs?ref=8010604b2d888ac839147fe27de76cdcc713aa1b", "patch": "@@ -11,9 +11,9 @@\n //! This module provides constants which are specific to the implementation\n //! of the `f32` floating point data type.\n //!\n-//! Mathematically significant numbers are provided in the `consts` sub-module.\n-//!\n //! *[See also the `f32` primitive type](../../std/primitive.f32.html).*\n+//!\n+//! Mathematically significant numbers are provided in the `consts` sub-module.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![allow(missing_docs)]"}, {"sha": "bd24e84dbedc5ec17c146bc84681e720a95a38f6", "filename": "src/libstd/f64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8010604b2d888ac839147fe27de76cdcc713aa1b/src%2Flibstd%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8010604b2d888ac839147fe27de76cdcc713aa1b/src%2Flibstd%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff64.rs?ref=8010604b2d888ac839147fe27de76cdcc713aa1b", "patch": "@@ -11,9 +11,9 @@\n //! This module provides constants which are specific to the implementation\n //! of the `f64` floating point data type.\n //!\n-//! Mathematically significant numbers are provided in the `consts` sub-module.\n-//!\n //! *[See also the `f64` primitive type](../../std/primitive.f64.html).*\n+//!\n+//! Mathematically significant numbers are provided in the `consts` sub-module.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![allow(missing_docs)]"}, {"sha": "6e329d85539b1e65607c137aa880a3b50dc3926f", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8010604b2d888ac839147fe27de76cdcc713aa1b/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8010604b2d888ac839147fe27de76cdcc713aa1b/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=8010604b2d888ac839147fe27de76cdcc713aa1b", "patch": "@@ -370,6 +370,8 @@ mod prim_unit { }\n //\n /// Raw, unsafe pointers, `*const T`, and `*mut T`.\n ///\n+/// *[See also the `std::ptr` module](ptr/index.html).*\n+///\n /// Working with raw pointers in Rust is uncommon,\n /// typically limited to a few patterns.\n ///\n@@ -444,8 +446,6 @@ mod prim_unit { }\n /// but C APIs hand out a lot of pointers generally, so are a common source\n /// of raw pointers in Rust.\n ///\n-/// *[See also the `std::ptr` module](ptr/index.html).*\n-///\n /// [`null`]: ../std/ptr/fn.null.html\n /// [`null_mut`]: ../std/ptr/fn.null_mut.html\n /// [`is_null`]: ../std/primitive.pointer.html#method.is_null\n@@ -563,6 +563,8 @@ mod prim_array { }\n //\n /// A dynamically-sized view into a contiguous sequence, `[T]`.\n ///\n+/// *[See also the `std::slice` module](slice/index.html).*\n+///\n /// Slices are a view into a block of memory represented as a pointer and a\n /// length.\n ///\n@@ -585,8 +587,6 @@ mod prim_array { }\n /// assert_eq!(x, &[1, 7, 3]);\n /// ```\n ///\n-/// *[See also the `std::slice` module](slice/index.html).*\n-///\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_slice { }\n \n@@ -862,23 +862,23 @@ mod prim_u128 { }\n //\n /// The pointer-sized signed integer type.\n ///\n+/// *[See also the `std::isize` module](isize/index.html).*\n+///\n /// The size of this primitive is how many bytes it takes to reference any\n /// location in memory. For example, on a 32 bit target, this is 4 bytes\n /// and on a 64 bit target, this is 8 bytes.\n-///\n-/// *[See also the `std::isize` module](isize/index.html).*\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_isize { }\n \n #[doc(primitive = \"usize\")]\n //\n /// The pointer-sized unsigned integer type.\n ///\n+/// *[See also the `std::usize` module](usize/index.html).*\n+///\n /// The size of this primitive is how many bytes it takes to reference any\n /// location in memory. For example, on a 32 bit target, this is 4 bytes\n /// and on a 64 bit target, this is 8 bytes.\n-///\n-/// *[See also the `std::usize` module](usize/index.html).*\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_usize { }\n "}]}