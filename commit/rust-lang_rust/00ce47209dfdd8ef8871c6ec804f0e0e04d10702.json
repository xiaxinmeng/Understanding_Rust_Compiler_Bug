{"sha": "00ce47209dfdd8ef8871c6ec804f0e0e04d10702", "node_id": "C_kwDOAAsO6NoAKDAwY2U0NzIwOWRmZGQ4ZWY4ODcxYzZlYzgwNGYwZTBlMDRkMTA3MDI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-25T13:03:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-25T13:03:53Z"}, "message": "Auto merge of #96820 - r-raymond:master, r=cuviper\n\nMake RwLockReadGuard covariant\n\nHi, first time contributor here, if anything is not as expected, please let me know.\n\n`RwLockReadGoard`'s type constructor is invariant. Since it behaves like a smart pointer to an immutable reference, there is no reason that it should not be covariant. Take e.g.\n\n```\nfn test_read_guard_covariance() {\n    fn do_stuff<'a>(_: RwLockReadGuard<'_, &'a i32>, _: &'a i32) {}\n    let j: i32 = 5;\n    let lock = RwLock::new(&j);\n    {\n        let i = 6;\n        do_stuff(lock.read().unwrap(), &i);\n    }\n    drop(lock);\n}\n```\nwhere the compiler complains that &i doesn't live long enough. If `RwLockReadGuard` is covariant, then the above code is accepted because the lifetime can be shorter than `'a`.\n\nIn order for `RwLockReadGuard` to be covariant, it can't contain a full reference to the `RwLock`, which can never be covariant (because it exposes a mutable reference to the underlying data structure). By reducing the data structure to the required pieces of `RwLock`, the rest falls in place.\n\nIf there is a better way to do a test that tests successful compilation, please let me know.\n\nFixes #80392", "tree": {"sha": "1abaa350d2c066595ae08a0f5b82a64b1ad86a56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1abaa350d2c066595ae08a0f5b82a64b1ad86a56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00ce47209dfdd8ef8871c6ec804f0e0e04d10702", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00ce47209dfdd8ef8871c6ec804f0e0e04d10702", "html_url": "https://github.com/rust-lang/rust/commit/00ce47209dfdd8ef8871c6ec804f0e0e04d10702", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00ce47209dfdd8ef8871c6ec804f0e0e04d10702/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1aabd8a4a6e1871f14e804302bd60dfcbffd5761", "url": "https://api.github.com/repos/rust-lang/rust/commits/1aabd8a4a6e1871f14e804302bd60dfcbffd5761", "html_url": "https://github.com/rust-lang/rust/commit/1aabd8a4a6e1871f14e804302bd60dfcbffd5761"}, {"sha": "5656de73d9541175e7dc20923995c54c0868ded6", "url": "https://api.github.com/repos/rust-lang/rust/commits/5656de73d9541175e7dc20923995c54c0868ded6", "html_url": "https://github.com/rust-lang/rust/commit/5656de73d9541175e7dc20923995c54c0868ded6"}], "stats": {"total": 63, "additions": 53, "deletions": 10}, "files": [{"sha": "6e4a2cfc82afd07b80b1efd0d3a2e6a47ce2d35a", "filename": "library/std/src/sync/rwlock.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/00ce47209dfdd8ef8871c6ec804f0e0e04d10702/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00ce47209dfdd8ef8871c6ec804f0e0e04d10702/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs?ref=00ce47209dfdd8ef8871c6ec804f0e0e04d10702", "patch": "@@ -4,6 +4,7 @@ mod tests;\n use crate::cell::UnsafeCell;\n use crate::fmt;\n use crate::ops::{Deref, DerefMut};\n+use crate::ptr::NonNull;\n use crate::sync::{poison, LockResult, TryLockError, TryLockResult};\n use crate::sys_common::rwlock as sys;\n \n@@ -101,7 +102,12 @@ unsafe impl<T: ?Sized + Send + Sync> Sync for RwLock<T> {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[clippy::has_significant_drop]\n pub struct RwLockReadGuard<'a, T: ?Sized + 'a> {\n-    lock: &'a RwLock<T>,\n+    // NB: we use a pointer instead of `&'a T` to avoid `noalias` violations, because a\n+    // `Ref` argument doesn't hold immutability for its whole scope, only until it drops.\n+    // `NonNull` is also covariant over `T`, just like we would have with `&T`. `NonNull`\n+    // is preferable over `const* T` to allow for niche optimization.\n+    data: NonNull<T>,\n+    inner_lock: &'a sys::MovableRwLock,\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -511,12 +517,21 @@ impl<T> From<T> for RwLock<T> {\n }\n \n impl<'rwlock, T: ?Sized> RwLockReadGuard<'rwlock, T> {\n+    /// Create a new instance of `RwLockReadGuard<T>` from a `RwLock<T>`.\n+    // SAFETY: if and only if `lock.inner.read()` (or `lock.inner.try_read()`) has been\n+    // successfully called from the same thread before instantiating this object.\n     unsafe fn new(lock: &'rwlock RwLock<T>) -> LockResult<RwLockReadGuard<'rwlock, T>> {\n-        poison::map_result(lock.poison.borrow(), |()| RwLockReadGuard { lock })\n+        poison::map_result(lock.poison.borrow(), |()| RwLockReadGuard {\n+            data: NonNull::new_unchecked(lock.data.get()),\n+            inner_lock: &lock.inner,\n+        })\n     }\n }\n \n impl<'rwlock, T: ?Sized> RwLockWriteGuard<'rwlock, T> {\n+    /// Create a new instance of `RwLockWriteGuard<T>` from a `RwLock<T>`.\n+    // SAFETY: if and only if `lock.inner.write()` (or `lock.inner.try_write()`) has been\n+    // successfully called from the same thread before instantiating this object.\n     unsafe fn new(lock: &'rwlock RwLock<T>) -> LockResult<RwLockWriteGuard<'rwlock, T>> {\n         poison::map_result(lock.poison.guard(), |guard| RwLockWriteGuard { lock, poison: guard })\n     }\n@@ -555,7 +570,8 @@ impl<T: ?Sized> Deref for RwLockReadGuard<'_, T> {\n     type Target = T;\n \n     fn deref(&self) -> &T {\n-        unsafe { &*self.lock.data.get() }\n+        // SAFETY: the conditions of `RwLockGuard::new` were satisfied when created.\n+        unsafe { self.data.as_ref() }\n     }\n }\n \n@@ -564,22 +580,25 @@ impl<T: ?Sized> Deref for RwLockWriteGuard<'_, T> {\n     type Target = T;\n \n     fn deref(&self) -> &T {\n+        // SAFETY: the conditions of `RwLockWriteGuard::new` were satisfied when created.\n         unsafe { &*self.lock.data.get() }\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> DerefMut for RwLockWriteGuard<'_, T> {\n     fn deref_mut(&mut self) -> &mut T {\n+        // SAFETY: the conditions of `RwLockWriteGuard::new` were satisfied when created.\n         unsafe { &mut *self.lock.data.get() }\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> Drop for RwLockReadGuard<'_, T> {\n     fn drop(&mut self) {\n+        // SAFETY: the conditions of `RwLockReadGuard::new` were satisfied when created.\n         unsafe {\n-            self.lock.inner.read_unlock();\n+            self.inner_lock.read_unlock();\n         }\n     }\n }\n@@ -588,6 +607,7 @@ impl<T: ?Sized> Drop for RwLockReadGuard<'_, T> {\n impl<T: ?Sized> Drop for RwLockWriteGuard<'_, T> {\n     fn drop(&mut self) {\n         self.lock.poison.done(&self.poison);\n+        // SAFETY: the conditions of `RwLockWriteGuard::new` were satisfied when created.\n         unsafe {\n             self.lock.inner.write_unlock();\n         }"}, {"sha": "08255c985f5eba230677f190ca5c4d299f12f7d7", "filename": "library/std/src/sync/rwlock/tests.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/00ce47209dfdd8ef8871c6ec804f0e0e04d10702/library%2Fstd%2Fsrc%2Fsync%2Frwlock%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00ce47209dfdd8ef8871c6ec804f0e0e04d10702/library%2Fstd%2Fsrc%2Fsync%2Frwlock%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Frwlock%2Ftests.rs?ref=00ce47209dfdd8ef8871c6ec804f0e0e04d10702", "patch": "@@ -1,6 +1,6 @@\n use crate::sync::atomic::{AtomicUsize, Ordering};\n use crate::sync::mpsc::channel;\n-use crate::sync::{Arc, RwLock, TryLockError};\n+use crate::sync::{Arc, RwLock, RwLockReadGuard, TryLockError};\n use crate::thread;\n use rand::{self, Rng};\n \n@@ -245,3 +245,15 @@ fn test_get_mut_poison() {\n         Ok(x) => panic!(\"get_mut of poisoned RwLock is Ok: {x:?}\"),\n     }\n }\n+\n+#[test]\n+fn test_read_guard_covariance() {\n+    fn do_stuff<'a>(_: RwLockReadGuard<'_, &'a i32>, _: &'a i32) {}\n+    let j: i32 = 5;\n+    let lock = RwLock::new(&j);\n+    {\n+        let i = 6;\n+        do_stuff(lock.read().unwrap(), &i);\n+    }\n+    drop(lock);\n+}"}, {"sha": "7f7b46c85a8b0d94ea5e28effce03adce5d289fa", "filename": "src/test/codegen/noalias-rwlockreadguard.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/00ce47209dfdd8ef8871c6ec804f0e0e04d10702/src%2Ftest%2Fcodegen%2Fnoalias-rwlockreadguard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00ce47209dfdd8ef8871c6ec804f0e0e04d10702/src%2Ftest%2Fcodegen%2Fnoalias-rwlockreadguard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fnoalias-rwlockreadguard.rs?ref=00ce47209dfdd8ef8871c6ec804f0e0e04d10702", "patch": "@@ -0,0 +1,14 @@\n+// compile-flags: -O -C no-prepopulate-passes -Z mutable-noalias=yes\n+\n+#![crate_type = \"lib\"]\n+\n+use std::sync::{RwLock, RwLockReadGuard};\n+\n+// Make sure that `RwLockReadGuard` does not get a `noalias` attribute, because\n+// the `RwLock` might alias writes after it is dropped.\n+\n+// CHECK-LABEL: @maybe_aliased(\n+// CHECK-NOT: noalias\n+// CHECK-SAME: %_data\n+#[no_mangle]\n+pub unsafe fn maybe_aliased(_: RwLockReadGuard<'_, i32>, _data: &RwLock<i32>) {}"}, {"sha": "ed9aae16b0db15271cbe518254ad3cd7fe64eb9b", "filename": "src/test/debuginfo/rwlock-read.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/00ce47209dfdd8ef8871c6ec804f0e0e04d10702/src%2Ftest%2Fdebuginfo%2Frwlock-read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00ce47209dfdd8ef8871c6ec804f0e0e04d10702/src%2Ftest%2Fdebuginfo%2Frwlock-read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Frwlock-read.rs?ref=00ce47209dfdd8ef8871c6ec804f0e0e04d10702", "patch": "@@ -15,11 +15,8 @@\n //\n // cdb-command:dx r\n // cdb-check:r                [Type: std::sync::rwlock::RwLockReadGuard<i32>]\n-// cdb-check:    [...] lock             : [...] [Type: std::sync::rwlock::RwLock<i32> *]\n-//\n-// cdb-command:dx r.lock->data,d\n-// cdb-check:r.lock->data,d   : 0 [Type: core::cell::UnsafeCell<i32>]\n-// cdb-check:    [<Raw View>]     [Type: core::cell::UnsafeCell<i32>]\n+// cdb-check:    [...] data             : NonNull([...]: 0) [Type: core::ptr::non_null::NonNull<i32>]\n+// cdb-check:    [...] inner_lock       : [...] [Type: std::sys_common::rwlock::MovableRwLock *]\n \n #[allow(unused_variables)]\n "}]}