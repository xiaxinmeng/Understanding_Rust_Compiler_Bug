{"sha": "caa10dc57200a71839ad72d2bf1fd64611721851", "node_id": "C_kwDOAAsO6NoAKGNhYTEwZGM1NzIwMGE3MTgzOWFkNzJkMmJmMWZkNjQ2MTE3MjE4NTE", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2022-02-09T10:18:32Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2022-02-11T21:38:17Z"}, "message": "Renumber universes when canonicalizing for Chalk\n\nThis is required to avoid creating large numbers of universes from each\nChalk query, while still having enough universe information for lifetime\nerrors.", "tree": {"sha": "85c9755665807e11275457463ac8019e97dbcf09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85c9755665807e11275457463ac8019e97dbcf09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/caa10dc57200a71839ad72d2bf1fd64611721851", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/caa10dc57200a71839ad72d2bf1fd64611721851", "html_url": "https://github.com/rust-lang/rust/commit/caa10dc57200a71839ad72d2bf1fd64611721851", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/caa10dc57200a71839ad72d2bf1fd64611721851/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e6d38230ff072cd02827dcb039f7f08fce68d30", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e6d38230ff072cd02827dcb039f7f08fce68d30", "html_url": "https://github.com/rust-lang/rust/commit/1e6d38230ff072cd02827dcb039f7f08fce68d30"}], "stats": {"total": 187, "additions": 165, "deletions": 22}, "files": [{"sha": "7446f249688033ce0286622c0f791878baeb9cc8", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 156, "deletions": 17, "changes": 173, "blob_url": "https://github.com/rust-lang/rust/blob/caa10dc57200a71839ad72d2bf1fd64611721851/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa10dc57200a71839ad72d2bf1fd64611721851/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=caa10dc57200a71839ad72d2bf1fd64611721851", "patch": "@@ -49,6 +49,29 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n         Canonicalizer::canonicalize(value, self, self.tcx, &CanonicalizeAllFreeRegions, query_state)\n     }\n \n+    /// Like [Self::canonicalize_query], but preserves distinct universes. For\n+    /// example, canonicalizing `&'?0: Trait<'?1>`, where `'?0` is in `U1` and\n+    /// `'?1` is in `U3` would be canonicalized to have ?0` in `U1` and `'?1`\n+    /// in `U2`.\n+    pub fn canonicalize_chalk_query<V>(\n+        &self,\n+        value: V,\n+        query_state: &mut OriginalQueryValues<'tcx>,\n+    ) -> Canonicalized<'tcx, V>\n+    where\n+        V: TypeFoldable<'tcx>,\n+    {\n+        self.tcx.sess.perf_stats.queries_canonicalized.fetch_add(1, Ordering::Relaxed);\n+\n+        Canonicalizer::canonicalize(\n+            value,\n+            self,\n+            self.tcx,\n+            &CanonicalizeAllFreeRegionsPreservingUniverses,\n+            query_state,\n+        )\n+    }\n+\n     /// Canonicalizes a query *response* `V`. When we canonicalize a\n     /// query response, we only canonicalize unbound inference\n     /// variables, and we leave other free regions alone. So,\n@@ -133,19 +156,22 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n /// maximally general query. But if we are canonicalizing a *query\n /// response*, then we don't typically replace free regions, as they\n /// must have been introduced from other parts of the system.\n-trait CanonicalizeRegionMode {\n+trait CanonicalizeMode {\n     fn canonicalize_free_region<'tcx>(\n         &self,\n         canonicalizer: &mut Canonicalizer<'_, 'tcx>,\n         r: ty::Region<'tcx>,\n     ) -> ty::Region<'tcx>;\n \n     fn any(&self) -> bool;\n+\n+    // Do we preserve universe of variables.\n+    fn preserve_universes(&self) -> bool;\n }\n \n struct CanonicalizeQueryResponse;\n \n-impl CanonicalizeRegionMode for CanonicalizeQueryResponse {\n+impl CanonicalizeMode for CanonicalizeQueryResponse {\n     fn canonicalize_free_region<'tcx>(\n         &self,\n         canonicalizer: &mut Canonicalizer<'_, 'tcx>,\n@@ -198,11 +224,15 @@ impl CanonicalizeRegionMode for CanonicalizeQueryResponse {\n     fn any(&self) -> bool {\n         false\n     }\n+\n+    fn preserve_universes(&self) -> bool {\n+        true\n+    }\n }\n \n struct CanonicalizeUserTypeAnnotation;\n \n-impl CanonicalizeRegionMode for CanonicalizeUserTypeAnnotation {\n+impl CanonicalizeMode for CanonicalizeUserTypeAnnotation {\n     fn canonicalize_free_region<'tcx>(\n         &self,\n         canonicalizer: &mut Canonicalizer<'_, 'tcx>,\n@@ -221,11 +251,15 @@ impl CanonicalizeRegionMode for CanonicalizeUserTypeAnnotation {\n     fn any(&self) -> bool {\n         false\n     }\n+\n+    fn preserve_universes(&self) -> bool {\n+        false\n+    }\n }\n \n struct CanonicalizeAllFreeRegions;\n \n-impl CanonicalizeRegionMode for CanonicalizeAllFreeRegions {\n+impl CanonicalizeMode for CanonicalizeAllFreeRegions {\n     fn canonicalize_free_region<'tcx>(\n         &self,\n         canonicalizer: &mut Canonicalizer<'_, 'tcx>,\n@@ -237,11 +271,39 @@ impl CanonicalizeRegionMode for CanonicalizeAllFreeRegions {\n     fn any(&self) -> bool {\n         true\n     }\n+\n+    fn preserve_universes(&self) -> bool {\n+        false\n+    }\n+}\n+\n+struct CanonicalizeAllFreeRegionsPreservingUniverses;\n+\n+impl CanonicalizeMode for CanonicalizeAllFreeRegionsPreservingUniverses {\n+    fn canonicalize_free_region<'tcx>(\n+        &self,\n+        canonicalizer: &mut Canonicalizer<'_, 'tcx>,\n+        r: ty::Region<'tcx>,\n+    ) -> ty::Region<'tcx> {\n+        let universe = canonicalizer.infcx.universe_of_region(r);\n+        canonicalizer.canonical_var_for_region(\n+            CanonicalVarInfo { kind: CanonicalVarKind::Region(universe) },\n+            r,\n+        )\n+    }\n+\n+    fn any(&self) -> bool {\n+        true\n+    }\n+\n+    fn preserve_universes(&self) -> bool {\n+        true\n+    }\n }\n \n struct CanonicalizeFreeRegionsOtherThanStatic;\n \n-impl CanonicalizeRegionMode for CanonicalizeFreeRegionsOtherThanStatic {\n+impl CanonicalizeMode for CanonicalizeFreeRegionsOtherThanStatic {\n     fn canonicalize_free_region<'tcx>(\n         &self,\n         canonicalizer: &mut Canonicalizer<'_, 'tcx>,\n@@ -257,6 +319,10 @@ impl CanonicalizeRegionMode for CanonicalizeFreeRegionsOtherThanStatic {\n     fn any(&self) -> bool {\n         true\n     }\n+\n+    fn preserve_universes(&self) -> bool {\n+        false\n+    }\n }\n \n struct Canonicalizer<'cx, 'tcx> {\n@@ -267,7 +333,7 @@ struct Canonicalizer<'cx, 'tcx> {\n     // Note that indices is only used once `var_values` is big enough to be\n     // heap-allocated.\n     indices: FxHashMap<GenericArg<'tcx>, BoundVar>,\n-    canonicalize_region_mode: &'cx dyn CanonicalizeRegionMode,\n+    canonicalize_mode: &'cx dyn CanonicalizeMode,\n     needs_canonical_flags: TypeFlags,\n \n     binder_index: ty::DebruijnIndex,\n@@ -311,15 +377,15 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Canonicalizer<'cx, 'tcx> {\n                     vid, r\n                 );\n                 let r = self.tcx.reuse_or_mk_region(r, ty::ReVar(resolved_vid));\n-                self.canonicalize_region_mode.canonicalize_free_region(self, r)\n+                self.canonicalize_mode.canonicalize_free_region(self, r)\n             }\n \n             ty::ReStatic\n             | ty::ReEarlyBound(..)\n             | ty::ReFree(_)\n             | ty::ReEmpty(_)\n             | ty::RePlaceholder(..)\n-            | ty::ReErased => self.canonicalize_region_mode.canonicalize_free_region(self, r),\n+            | ty::ReErased => self.canonicalize_mode.canonicalize_free_region(self, r),\n         }\n     }\n \n@@ -337,8 +403,10 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Canonicalizer<'cx, 'tcx> {\n                     // `TyVar(vid)` is unresolved, track its universe index in the canonicalized\n                     // result.\n                     Err(mut ui) => {\n-                        // FIXME: perf problem described in #55921.\n-                        ui = ty::UniverseIndex::ROOT;\n+                        if !self.canonicalize_mode.preserve_universes() {\n+                            // FIXME: perf problem described in #55921.\n+                            ui = ty::UniverseIndex::ROOT;\n+                        }\n                         self.canonicalize_ty_var(\n                             CanonicalVarInfo {\n                                 kind: CanonicalVarKind::Ty(CanonicalTyVarKind::General(ui)),\n@@ -422,8 +490,10 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Canonicalizer<'cx, 'tcx> {\n                     // `ConstVar(vid)` is unresolved, track its universe index in the\n                     // canonicalized result\n                     Err(mut ui) => {\n-                        // FIXME: perf problem described in #55921.\n-                        ui = ty::UniverseIndex::ROOT;\n+                        if !self.canonicalize_mode.preserve_universes() {\n+                            // FIXME: perf problem described in #55921.\n+                            ui = ty::UniverseIndex::ROOT;\n+                        }\n                         return self.canonicalize_const_var(\n                             CanonicalVarInfo { kind: CanonicalVarKind::Const(ui, ct.ty) },\n                             ct,\n@@ -462,7 +532,7 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n         value: V,\n         infcx: &InferCtxt<'_, 'tcx>,\n         tcx: TyCtxt<'tcx>,\n-        canonicalize_region_mode: &dyn CanonicalizeRegionMode,\n+        canonicalize_region_mode: &dyn CanonicalizeMode,\n         query_state: &mut OriginalQueryValues<'tcx>,\n     ) -> Canonicalized<'tcx, V>\n     where\n@@ -493,7 +563,7 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n         let mut canonicalizer = Canonicalizer {\n             infcx,\n             tcx,\n-            canonicalize_region_mode,\n+            canonicalize_mode: canonicalize_region_mode,\n             needs_canonical_flags,\n             variables: SmallVec::new(),\n             query_state,\n@@ -504,10 +574,11 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n \n         // Once we have canonicalized `out_value`, it should not\n         // contain anything that ties it to this inference context\n-        // anymore, so it should live in the global arena.\n-        debug_assert!(!out_value.needs_infer());\n+        // anymore.\n+        debug_assert!(!out_value.needs_infer() && !out_value.has_placeholders());\n \n-        let canonical_variables = tcx.intern_canonical_var_infos(&canonicalizer.variables);\n+        let canonical_variables =\n+            tcx.intern_canonical_var_infos(&canonicalizer.universe_canonicalized_variables());\n \n         let max_universe = canonical_variables\n             .iter()\n@@ -527,6 +598,19 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n \n         let var_values = &mut query_state.var_values;\n \n+        let universe = info.universe();\n+        if universe != ty::UniverseIndex::ROOT {\n+            assert!(self.canonicalize_mode.preserve_universes());\n+\n+            // Insert universe into the universe map. To preserve the order of the\n+            // universes in the value being canonicalized, we don't update the\n+            // universe in `info` until we have finished canonicalizing.\n+            match query_state.universe_map.binary_search(&universe) {\n+                Err(idx) => query_state.universe_map.insert(idx, universe),\n+                Ok(_) => {}\n+            }\n+        }\n+\n         // This code is hot. `variables` and `var_values` are usually small\n         // (fewer than 8 elements ~95% of the time). They are SmallVec's to\n         // avoid allocations in those cases. We also don't use `indices` to\n@@ -569,6 +653,61 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n         }\n     }\n \n+    /// Replaces the universe indexes used in `var_values` with their index in\n+    /// `query_state.universe_map`. This minimizes the maximum universe used in\n+    /// the canonicalized value.\n+    fn universe_canonicalized_variables(self) -> SmallVec<[CanonicalVarInfo<'tcx>; 8]> {\n+        if self.query_state.universe_map.len() == 1 {\n+            return self.variables;\n+        }\n+\n+        let reverse_universe_map: FxHashMap<ty::UniverseIndex, ty::UniverseIndex> = self\n+            .query_state\n+            .universe_map\n+            .iter()\n+            .enumerate()\n+            .map(|(idx, universe)| (*universe, ty::UniverseIndex::from_usize(idx)))\n+            .collect();\n+\n+        self.variables\n+            .iter()\n+            .map(|v| CanonicalVarInfo {\n+                kind: match v.kind {\n+                    CanonicalVarKind::Ty(CanonicalTyVarKind::Int | CanonicalTyVarKind::Float) => {\n+                        return *v;\n+                    }\n+                    CanonicalVarKind::Ty(CanonicalTyVarKind::General(u)) => {\n+                        CanonicalVarKind::Ty(CanonicalTyVarKind::General(reverse_universe_map[&u]))\n+                    }\n+                    CanonicalVarKind::Region(u) => {\n+                        CanonicalVarKind::Region(reverse_universe_map[&u])\n+                    }\n+                    CanonicalVarKind::Const(u, t) => {\n+                        CanonicalVarKind::Const(reverse_universe_map[&u], t)\n+                    }\n+                    CanonicalVarKind::PlaceholderTy(placeholder) => {\n+                        CanonicalVarKind::PlaceholderTy(ty::Placeholder {\n+                            universe: reverse_universe_map[&placeholder.universe],\n+                            ..placeholder\n+                        })\n+                    }\n+                    CanonicalVarKind::PlaceholderRegion(placeholder) => {\n+                        CanonicalVarKind::PlaceholderRegion(ty::Placeholder {\n+                            universe: reverse_universe_map[&placeholder.universe],\n+                            ..placeholder\n+                        })\n+                    }\n+                    CanonicalVarKind::PlaceholderConst(placeholder) => {\n+                        CanonicalVarKind::PlaceholderConst(ty::Placeholder {\n+                            universe: reverse_universe_map[&placeholder.universe],\n+                            ..placeholder\n+                        })\n+                    }\n+                },\n+            })\n+            .collect()\n+    }\n+\n     /// Shorthand helper that creates a canonical region variable for\n     /// `r` (always in the root universe). The reason that we always\n     /// put these variables into the root universe is because this"}, {"sha": "4efe3640dfac62b7e63a44104ed4fea89ebf84f5", "filename": "compiler/rustc_middle/src/infer/canonical.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/caa10dc57200a71839ad72d2bf1fd64611721851/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa10dc57200a71839ad72d2bf1fd64611721851/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs?ref=caa10dc57200a71839ad72d2bf1fd64611721851", "patch": "@@ -64,9 +64,9 @@ pub struct CanonicalVarValues<'tcx> {\n /// result.\n #[derive(Clone, Debug)]\n pub struct OriginalQueryValues<'tcx> {\n-    /// Map from the universes that appear in the query to the\n-    /// universes in the caller context. For the time being, we only\n-    /// ever put ROOT values into the query, so this map is very\n+    /// Map from the universes that appear in the query to the universes in the\n+    /// caller context. For all queries except `evaluate_goal` (used by Chalk),\n+    /// we only ever put ROOT values into the query, so this map is very\n     /// simple.\n     pub universe_map: SmallVec<[ty::UniverseIndex; 4]>,\n "}, {"sha": "28b0ce9a171f8ef90a4f5b6176059cce835364ee", "filename": "compiler/rustc_trait_selection/src/traits/chalk_fulfill.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/caa10dc57200a71839ad72d2bf1fd64611721851/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caa10dc57200a71839ad72d2bf1fd64611721851/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs?ref=caa10dc57200a71839ad72d2bf1fd64611721851", "patch": "@@ -8,7 +8,7 @@ use crate::traits::{\n     PredicateObligation, SelectionError, TraitEngine,\n };\n use rustc_data_structures::fx::{FxHashMap, FxIndexSet};\n-use rustc_middle::ty::{self, Ty};\n+use rustc_middle::ty::{self, Ty, TypeFoldable};\n \n pub struct FulfillmentContext<'tcx> {\n     obligations: FxIndexSet<PredicateObligation<'tcx>>,\n@@ -91,7 +91,11 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n                 let environment = obligation.param_env.caller_bounds();\n                 let goal = ChalkEnvironmentAndGoal { environment, goal: obligation.predicate };\n                 let mut orig_values = OriginalQueryValues::default();\n-                let canonical_goal = infcx.canonicalize_query(goal, &mut orig_values);\n+                if goal.references_error() {\n+                    continue;\n+                }\n+\n+                let canonical_goal = infcx.canonicalize_chalk_query(goal, &mut orig_values);\n \n                 match infcx.tcx.evaluate_goal(canonical_goal) {\n                     Ok(response) => {"}]}