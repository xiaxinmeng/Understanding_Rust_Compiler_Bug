{"sha": "a4262cc9841d91d48ef994b36eab323e615a7083", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0MjYyY2M5ODQxZDkxZDQ4ZWY5OTRiMzZlYWIzMjNlNjE1YTcwODM=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-08-06T16:46:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-06T16:46:34Z"}, "message": "Rollup merge of #87779 - Aaron1011:stmt-ast-id, r=petrochenkov\n\nRemove special case for statement `NodeId` assignment\n\nWe now let `noop_flat_map_stmt` assign `NodeId`s (via `visit_id`),\njust as we do for other AST nodes.", "tree": {"sha": "d3588fe64745c6f236c40c7063c0f5bbff029045", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3588fe64745c6f236c40c7063c0f5bbff029045"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4262cc9841d91d48ef994b36eab323e615a7083", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhDWdqCRBK7hj4Ov3rIwAAKU4IAIkxxgM+voETJOHhpWBaStwi\nE08aPL+DWXpnYu9+xKORkJZ898R7H7shrJtAdYr5jiZ5K4GT7PAmsZjkBuwOaMzD\nV1egRUen351te2pEyzO1oJ6dYspu0Br7XNrfrimbDl2JV0OfI+0o5kif/FMdwLRP\nyh1bE3m/PS+NcRWM8N9UqGDwwx2e9L3NAUpi+RKXHAyJHnwMXiZfotIk8m23lPam\nUmvrJKwHf3ja3EpLHuzXaqveJrwAAU3Rvz0cBV3HhpSlworTtvJqcokD3EpikT8U\nDsnzIJ8tokNYwJVPfNmxcLqMB8Nevpud51cpZdw0aqWG0EPq4XgbwOxaBckGrRw=\n=7+Fd\n-----END PGP SIGNATURE-----\n", "payload": "tree d3588fe64745c6f236c40c7063c0f5bbff029045\nparent 8ee962f88e1be7e29482b13c7776c26b98a93bf7\nparent a35d7f2bb32c35a5da3c7e7ba0d68af1e33f0619\nauthor Yuki Okushi <jtitor@2k36.org> 1628268394 +0900\ncommitter GitHub <noreply@github.com> 1628268394 +0900\n\nRollup merge of #87779 - Aaron1011:stmt-ast-id, r=petrochenkov\n\nRemove special case for statement `NodeId` assignment\n\nWe now let `noop_flat_map_stmt` assign `NodeId`s (via `visit_id`),\njust as we do for other AST nodes.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4262cc9841d91d48ef994b36eab323e615a7083", "html_url": "https://github.com/rust-lang/rust/commit/a4262cc9841d91d48ef994b36eab323e615a7083", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4262cc9841d91d48ef994b36eab323e615a7083/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ee962f88e1be7e29482b13c7776c26b98a93bf7", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ee962f88e1be7e29482b13c7776c26b98a93bf7", "html_url": "https://github.com/rust-lang/rust/commit/8ee962f88e1be7e29482b13c7776c26b98a93bf7"}, {"sha": "a35d7f2bb32c35a5da3c7e7ba0d68af1e33f0619", "url": "https://api.github.com/repos/rust-lang/rust/commits/a35d7f2bb32c35a5da3c7e7ba0d68af1e33f0619", "html_url": "https://github.com/rust-lang/rust/commit/a35d7f2bb32c35a5da3c7e7ba0d68af1e33f0619"}], "stats": {"total": 35, "additions": 7, "deletions": 28}, "files": [{"sha": "3629e668fa9f8989b4637058d1fe8b3463ea1b81", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a4262cc9841d91d48ef994b36eab323e615a7083/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4262cc9841d91d48ef994b36eab323e615a7083/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=a4262cc9841d91d48ef994b36eab323e615a7083", "patch": "@@ -559,7 +559,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         self.cx.force_mode = orig_force_mode;\n \n         // Finally incorporate all the expanded macros into the input AST fragment.\n-        let mut placeholder_expander = PlaceholderExpander::new(self.cx, self.monotonic);\n+        let mut placeholder_expander = PlaceholderExpander::default();\n         while let Some(expanded_fragments) = expanded_fragments.pop() {\n             for (expn_id, expanded_fragment) in expanded_fragments.into_iter().rev() {\n                 placeholder_expander\n@@ -1341,14 +1341,9 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n             }\n         }\n \n-        // The placeholder expander gives ids to statements, so we avoid folding the id here.\n         // We don't use `assign_id!` - it will be called when we visit statement's contents\n         // (e.g. an expression, item, or local)\n-        let ast::Stmt { id, kind, span } = stmt;\n-        let res = noop_flat_map_stmt_kind(kind, self)\n-            .into_iter()\n-            .map(|kind| ast::Stmt { id, kind, span })\n-            .collect();\n+        let res = noop_flat_map_stmt(stmt, self);\n \n         self.cx.current_expansion.is_trailing_mac = false;\n         res"}, {"sha": "43287984050d4726f7ceb7f1200551757576dc64", "filename": "compiler/rustc_expand/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a4262cc9841d91d48ef994b36eab323e615a7083/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4262cc9841d91d48ef994b36eab323e615a7083/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Flib.rs?ref=a4262cc9841d91d48ef994b36eab323e615a7083", "patch": "@@ -7,6 +7,7 @@\n #![feature(proc_macro_internals)]\n #![feature(proc_macro_span)]\n #![feature(try_blocks)]\n+#![recursion_limit = \"256\"]\n \n #[macro_use]\n extern crate rustc_macros;"}, {"sha": "8e78fcbb8dbc14a40110def4bda0c03506a63947", "filename": "compiler/rustc_expand/src/placeholders.rs", "status": "modified", "additions": 4, "deletions": 21, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a4262cc9841d91d48ef994b36eab323e615a7083/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4262cc9841d91d48ef994b36eab323e615a7083/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs?ref=a4262cc9841d91d48ef994b36eab323e615a7083", "patch": "@@ -1,4 +1,3 @@\n-use crate::base::ExtCtxt;\n use crate::expand::{AstFragment, AstFragmentKind};\n \n use rustc_ast as ast;\n@@ -175,17 +174,12 @@ pub fn placeholder(\n     }\n }\n \n-pub struct PlaceholderExpander<'a, 'b> {\n+#[derive(Default)]\n+pub struct PlaceholderExpander {\n     expanded_fragments: FxHashMap<ast::NodeId, AstFragment>,\n-    cx: &'a mut ExtCtxt<'b>,\n-    monotonic: bool,\n }\n \n-impl<'a, 'b> PlaceholderExpander<'a, 'b> {\n-    pub fn new(cx: &'a mut ExtCtxt<'b>, monotonic: bool) -> Self {\n-        PlaceholderExpander { cx, expanded_fragments: FxHashMap::default(), monotonic }\n-    }\n-\n+impl PlaceholderExpander {\n     pub fn add(&mut self, id: ast::NodeId, mut fragment: AstFragment) {\n         fragment.mut_visit_with(self);\n         self.expanded_fragments.insert(id, fragment);\n@@ -196,7 +190,7 @@ impl<'a, 'b> PlaceholderExpander<'a, 'b> {\n     }\n }\n \n-impl<'a, 'b> MutVisitor for PlaceholderExpander<'a, 'b> {\n+impl MutVisitor for PlaceholderExpander {\n     fn flat_map_arm(&mut self, arm: ast::Arm) -> SmallVec<[ast::Arm; 1]> {\n         if arm.is_placeholder {\n             self.remove(arm.id).make_arms()\n@@ -360,15 +354,4 @@ impl<'a, 'b> MutVisitor for PlaceholderExpander<'a, 'b> {\n             _ => noop_visit_ty(ty, self),\n         }\n     }\n-\n-    fn visit_block(&mut self, block: &mut P<ast::Block>) {\n-        noop_visit_block(block, self);\n-\n-        for stmt in block.stmts.iter_mut() {\n-            if self.monotonic {\n-                assert_eq!(stmt.id, ast::DUMMY_NODE_ID);\n-                stmt.id = self.cx.resolver.next_node_id();\n-            }\n-        }\n-    }\n }"}]}