{"sha": "b91d211b40300a3c026b330e50a6e3e19d71351c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5MWQyMTFiNDAzMDBhM2MwMjZiMzMwZTUwYTZlM2UxOWQ3MTM1MWM=", "commit": {"author": {"name": "Peter Jin", "email": "peterhaijin@gmail.com", "date": "2018-12-31T18:58:13Z"}, "committer": {"name": "Peter Jin", "email": "peterhaijin@gmail.com", "date": "2019-01-05T17:59:25Z"}, "message": "Add a target option \"merge-functions\" taking values in (\"disabled\",\n\"trampolines\", or \"aliases (the default)) to allow targets to opt out of\nthe MergeFunctions LLVM pass. Also add a corresponding -Z option with\nthe same name and values.\n\nThis works around: https://github.com/rust-lang/rust/issues/57356\n\nMotivation:\n\nBasically, the problem is that the MergeFunctions pass, which rustc\ncurrently enables by default at -O2 and -O3, and `extern \"ptx-kernel\"`\nfunctions (specific to the NVPTX target) are currently not compatible\nwith each other. If the MergeFunctions pass is allowed to run, rustc can\ngenerate invalid PTX assembly (i.e. a PTX file that is not accepted by\nthe native PTX assembler ptxas). Therefore we would like a way to opt\nout of the MergeFunctions pass, which is what our target option does.\n\nRelated work:\n\nThe current behavior of rustc is to enable MergeFunctions at -O2 and -O3,\nand also to enable the use of function aliases within MergeFunctions.\nMergeFunctions both with and without function aliases is incompatible with\nthe NVPTX target.\n\nclang's \"solution\" is to have a \"-fmerge-functions\" flag that opts in to\nthe MergeFunctions pass, but it is not enabled by default.", "tree": {"sha": "4ecf2d4b659028a9c9364e33cbeea05a7b950cd9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ecf2d4b659028a9c9364e33cbeea05a7b950cd9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b91d211b40300a3c026b330e50a6e3e19d71351c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b91d211b40300a3c026b330e50a6e3e19d71351c", "html_url": "https://github.com/rust-lang/rust/commit/b91d211b40300a3c026b330e50a6e3e19d71351c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b91d211b40300a3c026b330e50a6e3e19d71351c/comments", "author": {"login": "peterhj", "id": 303726, "node_id": "MDQ6VXNlcjMwMzcyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/303726?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peterhj", "html_url": "https://github.com/peterhj", "followers_url": "https://api.github.com/users/peterhj/followers", "following_url": "https://api.github.com/users/peterhj/following{/other_user}", "gists_url": "https://api.github.com/users/peterhj/gists{/gist_id}", "starred_url": "https://api.github.com/users/peterhj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peterhj/subscriptions", "organizations_url": "https://api.github.com/users/peterhj/orgs", "repos_url": "https://api.github.com/users/peterhj/repos", "events_url": "https://api.github.com/users/peterhj/events{/privacy}", "received_events_url": "https://api.github.com/users/peterhj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "peterhj", "id": 303726, "node_id": "MDQ6VXNlcjMwMzcyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/303726?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peterhj", "html_url": "https://github.com/peterhj", "followers_url": "https://api.github.com/users/peterhj/followers", "following_url": "https://api.github.com/users/peterhj/following{/other_user}", "gists_url": "https://api.github.com/users/peterhj/gists{/gist_id}", "starred_url": "https://api.github.com/users/peterhj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peterhj/subscriptions", "organizations_url": "https://api.github.com/users/peterhj/orgs", "repos_url": "https://api.github.com/users/peterhj/repos", "events_url": "https://api.github.com/users/peterhj/events{/privacy}", "received_events_url": "https://api.github.com/users/peterhj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2442823ef572a65092fbc46f6975633f983b50b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/2442823ef572a65092fbc46f6975633f983b50b6", "html_url": "https://github.com/rust-lang/rust/commit/2442823ef572a65092fbc46f6975633f983b50b6"}], "stats": {"total": 125, "additions": 117, "deletions": 8}, "files": [{"sha": "ca4ab15d79b1dfc4df98f46a1c1cf8b54648244b", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b91d211b40300a3c026b330e50a6e3e19d71351c/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91d211b40300a3c026b330e50a6e3e19d71351c/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=b91d211b40300a3c026b330e50a6e3e19d71351c", "patch": "@@ -6,7 +6,7 @@ use std::str::FromStr;\n use session::{early_error, early_warn, Session};\n use session::search_paths::SearchPath;\n \n-use rustc_target::spec::{LinkerFlavor, PanicStrategy, RelroLevel};\n+use rustc_target::spec::{LinkerFlavor, MergeFunctions, PanicStrategy, RelroLevel};\n use rustc_target::spec::{Target, TargetTriple};\n use lint;\n use middle::cstore;\n@@ -808,13 +808,16 @@ macro_rules! options {\n         pub const parse_cross_lang_lto: Option<&str> =\n             Some(\"either a boolean (`yes`, `no`, `on`, `off`, etc), \\\n                   or the path to the linker plugin\");\n+        pub const parse_merge_functions: Option<&str> =\n+            Some(\"one of: `disabled`, `trampolines`, or `aliases`\");\n     }\n \n     #[allow(dead_code)]\n     mod $mod_set {\n         use super::{$struct_name, Passes, Sanitizer, LtoCli, CrossLangLto};\n-        use rustc_target::spec::{LinkerFlavor, PanicStrategy, RelroLevel};\n+        use rustc_target::spec::{LinkerFlavor, MergeFunctions, PanicStrategy, RelroLevel};\n         use std::path::PathBuf;\n+        use std::str::FromStr;\n \n         $(\n             pub fn $opt(cg: &mut $struct_name, v: Option<&str>) -> bool {\n@@ -1046,6 +1049,14 @@ macro_rules! options {\n             };\n             true\n         }\n+\n+        fn parse_merge_functions(slot: &mut Option<MergeFunctions>, v: Option<&str>) -> bool {\n+            match v.and_then(|s| MergeFunctions::from_str(s).ok()) {\n+                Some(mergefunc) => *slot = Some(mergefunc),\n+                _ => return false,\n+            }\n+            true\n+        }\n     }\n ) }\n \n@@ -1380,6 +1391,9 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n           \"whether to use the PLT when calling into shared libraries;\n           only has effect for PIC code on systems with ELF binaries\n           (default: PLT is disabled if full relro is enabled)\"),\n+    merge_functions: Option<MergeFunctions> = (None, parse_merge_functions, [TRACKED],\n+        \"control the operation of the MergeFunctions LLVM pass, taking\n+         the same values as the target option of the same name\"),\n }\n \n pub fn default_lib_output() -> CrateType {\n@@ -2398,7 +2412,7 @@ mod dep_tracking {\n     use super::{CrateType, DebugInfo, ErrorOutputType, OptLevel, OutputTypes,\n                 Passes, Sanitizer, LtoCli, CrossLangLto};\n     use syntax::feature_gate::UnstableFeatures;\n-    use rustc_target::spec::{PanicStrategy, RelroLevel, TargetTriple};\n+    use rustc_target::spec::{MergeFunctions, PanicStrategy, RelroLevel, TargetTriple};\n     use syntax::edition::Edition;\n \n     pub trait DepTrackingHash {\n@@ -2441,12 +2455,14 @@ mod dep_tracking {\n     impl_dep_tracking_hash_via_hash!(Option<usize>);\n     impl_dep_tracking_hash_via_hash!(Option<String>);\n     impl_dep_tracking_hash_via_hash!(Option<(String, u64)>);\n+    impl_dep_tracking_hash_via_hash!(Option<MergeFunctions>);\n     impl_dep_tracking_hash_via_hash!(Option<PanicStrategy>);\n     impl_dep_tracking_hash_via_hash!(Option<RelroLevel>);\n     impl_dep_tracking_hash_via_hash!(Option<lint::Level>);\n     impl_dep_tracking_hash_via_hash!(Option<PathBuf>);\n     impl_dep_tracking_hash_via_hash!(Option<cstore::NativeLibraryKind>);\n     impl_dep_tracking_hash_via_hash!(CrateType);\n+    impl_dep_tracking_hash_via_hash!(MergeFunctions);\n     impl_dep_tracking_hash_via_hash!(PanicStrategy);\n     impl_dep_tracking_hash_via_hash!(RelroLevel);\n     impl_dep_tracking_hash_via_hash!(Passes);\n@@ -2532,7 +2548,7 @@ mod tests {\n     use std::iter::FromIterator;\n     use std::path::PathBuf;\n     use super::{Externs, OutputType, OutputTypes};\n-    use rustc_target::spec::{PanicStrategy, RelroLevel};\n+    use rustc_target::spec::{MergeFunctions, PanicStrategy, RelroLevel};\n     use syntax::symbol::Symbol;\n     use syntax::edition::{Edition, DEFAULT_EDITION};\n     use syntax;\n@@ -3187,6 +3203,10 @@ mod tests {\n         opts = reference.clone();\n         opts.debugging_opts.cross_lang_lto = CrossLangLto::LinkerPluginAuto;\n         assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n+\n+        opts = reference.clone();\n+        opts.debugging_opts.merge_functions = Some(MergeFunctions::Disabled);\n+        assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n     }\n \n     #[test]"}, {"sha": "dc70ebcf943a503420074a724e375e5f070411e3", "filename": "src/librustc_codegen_llvm/llvm_util.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b91d211b40300a3c026b330e50a6e3e19d71351c/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91d211b40300a3c026b330e50a6e3e19d71351c/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs?ref=b91d211b40300a3c026b330e50a6e3e19d71351c", "patch": "@@ -3,6 +3,7 @@ use back::write::create_target_machine;\n use llvm;\n use rustc::session::Session;\n use rustc::session::config::PrintRequest;\n+use rustc_target::spec::MergeFunctions;\n use libc::c_int;\n use std::ffi::CString;\n use syntax::feature_gate::UnstableFeatures;\n@@ -61,7 +62,14 @@ unsafe fn configure_llvm(sess: &Session) {\n             add(\"-disable-preinline\");\n         }\n         if llvm::LLVMRustIsRustLLVM() {\n-            add(\"-mergefunc-use-aliases\");\n+            match sess.opts.debugging_opts.merge_functions\n+                  .unwrap_or(sess.target.target.options.merge_functions) {\n+                MergeFunctions::Disabled |\n+                MergeFunctions::Trampolines => {}\n+                MergeFunctions::Aliases => {\n+                    add(\"-mergefunc-use-aliases\");\n+                }\n+            }\n         }\n \n         // HACK(eddyb) LLVM inserts `llvm.assume` calls to preserve align attributes"}, {"sha": "39bdc70f8322e876ce713ade1250f12cd1b2f16e", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b91d211b40300a3c026b330e50a6e3e19d71351c/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91d211b40300a3c026b330e50a6e3e19d71351c/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=b91d211b40300a3c026b330e50a6e3e19d71351c", "patch": "@@ -24,6 +24,7 @@ use rustc_fs_util::link_or_copy;\n use rustc_data_structures::svh::Svh;\n use rustc_errors::{Handler, Level, DiagnosticBuilder, FatalError, DiagnosticId};\n use rustc_errors::emitter::{Emitter};\n+use rustc_target::spec::MergeFunctions;\n use syntax::attr;\n use syntax::ext::hygiene::Mark;\n use syntax_pos::MultiSpan;\n@@ -152,8 +153,24 @@ impl ModuleConfig {\n                             sess.opts.optimize == config::OptLevel::Aggressive &&\n                             !sess.target.target.options.is_like_emscripten;\n \n-        self.merge_functions = sess.opts.optimize == config::OptLevel::Default ||\n-                               sess.opts.optimize == config::OptLevel::Aggressive;\n+        // Some targets (namely, NVPTX) interact badly with the MergeFunctions\n+        // pass. This is because MergeFunctions can generate new function calls\n+        // which may interfere with the target calling convention; e.g. for the\n+        // NVPTX target, PTX kernels should not call other PTX kernels.\n+        // MergeFunctions can also be configured to generate aliases instead,\n+        // but aliases are not supported by some backends (again, NVPTX).\n+        // Therefore, allow targets to opt out of the MergeFunctions pass,\n+        // but otherwise keep the pass enabled (at O2 and O3) since it can be\n+        // useful for reducing code size.\n+        self.merge_functions = match sess.opts.debugging_opts.merge_functions\n+                                     .unwrap_or(sess.target.target.options.merge_functions) {\n+            MergeFunctions::Disabled => false,\n+            MergeFunctions::Trampolines |\n+            MergeFunctions::Aliases => {\n+                sess.opts.optimize == config::OptLevel::Default ||\n+                sess.opts.optimize == config::OptLevel::Aggressive\n+            }\n+        };\n     }\n \n     pub fn bitcode_needed(&self) -> bool {"}, {"sha": "3a21ca19b176b789a7328bd19ef922f2c79dc1e2", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 65, "deletions": 1, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/b91d211b40300a3c026b330e50a6e3e19d71351c/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91d211b40300a3c026b330e50a6e3e19d71351c/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=b91d211b40300a3c026b330e50a6e3e19d71351c", "patch": "@@ -217,6 +217,46 @@ impl ToJson for RelroLevel {\n     }\n }\n \n+#[derive(Clone, Copy, Debug, PartialEq, Hash, RustcEncodable, RustcDecodable)]\n+pub enum MergeFunctions {\n+    Disabled,\n+    Trampolines,\n+    Aliases\n+}\n+\n+impl MergeFunctions {\n+    pub fn desc(&self) -> &str {\n+        match *self {\n+            MergeFunctions::Disabled => \"disabled\",\n+            MergeFunctions::Trampolines => \"trampolines\",\n+            MergeFunctions::Aliases => \"aliases\",\n+        }\n+    }\n+}\n+\n+impl FromStr for MergeFunctions {\n+    type Err = ();\n+\n+    fn from_str(s: &str) -> Result<MergeFunctions, ()> {\n+        match s {\n+            \"disabled\" => Ok(MergeFunctions::Disabled),\n+            \"trampolines\" => Ok(MergeFunctions::Trampolines),\n+            \"aliases\" => Ok(MergeFunctions::Aliases),\n+            _ => Err(()),\n+        }\n+    }\n+}\n+\n+impl ToJson for MergeFunctions {\n+    fn to_json(&self) -> Json {\n+        match *self {\n+            MergeFunctions::Disabled => \"disabled\".to_json(),\n+            MergeFunctions::Trampolines => \"trampolines\".to_json(),\n+            MergeFunctions::Aliases => \"aliases\".to_json(),\n+        }\n+    }\n+}\n+\n pub type LinkArgs = BTreeMap<LinkerFlavor, Vec<String>>;\n pub type TargetResult = Result<Target, String>;\n \n@@ -690,7 +730,15 @@ pub struct TargetOptions {\n \n     /// If set, have the linker export exactly these symbols, instead of using\n     /// the usual logic to figure this out from the crate itself.\n-    pub override_export_symbols: Option<Vec<String>>\n+    pub override_export_symbols: Option<Vec<String>>,\n+\n+    /// Determines how or whether the MergeFunctions LLVM pass should run for\n+    /// this target. Either \"disabled\", \"trampolines\", or \"aliases\".\n+    /// The MergeFunctions pass is generally useful, but some targets may need\n+    /// to opt out. The default is \"aliases\".\n+    ///\n+    /// Workaround for: https://github.com/rust-lang/rust/issues/57356\n+    pub merge_functions: MergeFunctions\n }\n \n impl Default for TargetOptions {\n@@ -773,6 +821,7 @@ impl Default for TargetOptions {\n             requires_uwtable: false,\n             simd_types_indirect: true,\n             override_export_symbols: None,\n+            merge_functions: MergeFunctions::Aliases,\n         }\n     }\n }\n@@ -875,6 +924,19 @@ impl Target {\n                     .map(|o| o.as_u64()\n                          .map(|s| base.options.$key_name = Some(s)));\n             } );\n+            ($key_name:ident, MergeFunctions) => ( {\n+                let name = (stringify!($key_name)).replace(\"_\", \"-\");\n+                obj.find(&name[..]).and_then(|o| o.as_string().and_then(|s| {\n+                    match s.parse::<MergeFunctions>() {\n+                        Ok(mergefunc) => base.options.$key_name = mergefunc,\n+                        _ => return Some(Err(format!(\"'{}' is not a valid value for \\\n+                                                      merge-functions. Use 'disabled', \\\n+                                                      'trampolines', or 'aliases'.\",\n+                                                      s))),\n+                    }\n+                    Some(Ok(()))\n+                })).unwrap_or(Ok(()))\n+            } );\n             ($key_name:ident, PanicStrategy) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 obj.find(&name[..]).and_then(|o| o.as_string().and_then(|s| {\n@@ -1064,6 +1126,7 @@ impl Target {\n         key!(requires_uwtable, bool);\n         key!(simd_types_indirect, bool);\n         key!(override_export_symbols, opt_list);\n+        key!(merge_functions, MergeFunctions)?;\n \n         if let Some(array) = obj.find(\"abi-blacklist\").and_then(Json::as_array) {\n             for name in array.iter().filter_map(|abi| abi.as_string()) {\n@@ -1275,6 +1338,7 @@ impl ToJson for Target {\n         target_option_val!(requires_uwtable);\n         target_option_val!(simd_types_indirect);\n         target_option_val!(override_export_symbols);\n+        target_option_val!(merge_functions);\n \n         if default.abi_blacklist != self.options.abi_blacklist {\n             d.insert(\"abi-blacklist\".to_string(), self.options.abi_blacklist.iter()"}]}