{"sha": "7ec973d9ce7bc02577efde54929ad38bcf5a40eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlYzk3M2Q5Y2U3YmMwMjU3N2VmZGU1NDkyOWFkMzhiY2Y1YTQwZWI=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-08-26T16:42:08Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-09-02T17:08:58Z"}, "message": "Stop using walk_crate.", "tree": {"sha": "5056ed7a189839f58b35412ad02cf53158fcd65c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5056ed7a189839f58b35412ad02cf53158fcd65c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ec973d9ce7bc02577efde54929ad38bcf5a40eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ec973d9ce7bc02577efde54929ad38bcf5a40eb", "html_url": "https://github.com/rust-lang/rust/commit/7ec973d9ce7bc02577efde54929ad38bcf5a40eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ec973d9ce7bc02577efde54929ad38bcf5a40eb/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad3407f482d29f26c67700974d86f89b3f2ab993", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad3407f482d29f26c67700974d86f89b3f2ab993", "html_url": "https://github.com/rust-lang/rust/commit/ad3407f482d29f26c67700974d86f89b3f2ab993"}], "stats": {"total": 84, "additions": 45, "deletions": 39}, "files": [{"sha": "2c8558571de73b3202d90c543631eb3cfc885f0e", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ec973d9ce7bc02577efde54929ad38bcf5a40eb/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec973d9ce7bc02577efde54929ad38bcf5a40eb/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=7ec973d9ce7bc02577efde54929ad38bcf5a40eb", "patch": "@@ -478,7 +478,7 @@ pub trait Visitor<'v>: Sized {\n }\n \n /// Walks the contents of a crate. See also `Crate::visit_all_items`.\n-pub fn walk_crate<'v, V: Visitor<'v>>(visitor: &mut V, krate: &'v Crate<'v>) {\n+pub fn walk_crate_and_attributes<'v, V: Visitor<'v>>(visitor: &mut V, krate: &'v Crate<'v>) {\n     let top_mod = krate.module();\n     visitor.visit_mod(top_mod, top_mod.inner, CRATE_HIR_ID);\n     for (&id, attrs) in krate.attrs.iter() {"}, {"sha": "c190391d2118098e18bbd0df6b5450f75ae10f7e", "filename": "compiler/rustc_incremental/src/persist/dirty_clean.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ec973d9ce7bc02577efde54929ad38bcf5a40eb/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec973d9ce7bc02577efde54929ad38bcf5a40eb/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs?ref=7ec973d9ce7bc02577efde54929ad38bcf5a40eb", "patch": "@@ -142,7 +142,7 @@ pub fn check_dirty_clean_annotations(tcx: TyCtxt<'_>) {\n         krate.visit_all_item_likes(&mut dirty_clean_visitor);\n \n         let mut all_attrs = FindAllAttrs { tcx, found_attrs: vec![] };\n-        intravisit::walk_crate(&mut all_attrs, krate);\n+        tcx.hir().walk_attributes(&mut all_attrs);\n \n         // Note that we cannot use the existing \"unused attribute\"-infrastructure\n         // here, since that is running before codegen. This is also the reason why"}, {"sha": "fe98bffaaee4b93e9a0ffdf7fb36f668487a27d9", "filename": "compiler/rustc_lint/src/late.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7ec973d9ce7bc02577efde54929ad38bcf5a40eb/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec973d9ce7bc02577efde54929ad38bcf5a40eb/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flate.rs?ref=7ec973d9ce7bc02577efde54929ad38bcf5a40eb", "patch": "@@ -451,9 +451,8 @@ fn late_lint_pass_crate<'tcx, T: LateLintPass<'tcx>>(tcx: TyCtxt<'tcx>, pass: T)\n         // since the root module isn't visited as an item (because it isn't an\n         // item), warn for it here.\n         lint_callback!(cx, check_crate, krate);\n-\n-        hir_visit::walk_crate(cx, krate);\n-\n+        tcx.hir().walk_crate(cx);\n+        tcx.hir().walk_attributes(cx);\n         lint_callback!(cx, check_crate_post, krate);\n     })\n }"}, {"sha": "267d2aa5382b3228820d608f3757a1e50d5db4bb", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ec973d9ce7bc02577efde54929ad38bcf5a40eb/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec973d9ce7bc02577efde54929ad38bcf5a40eb/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=7ec973d9ce7bc02577efde54929ad38bcf5a40eb", "patch": "@@ -37,7 +37,7 @@ fn lint_levels(tcx: TyCtxt<'_>, (): ()) -> LintLevelMap {\n \n     let push = builder.levels.push(tcx.hir().attrs(hir::CRATE_HIR_ID), &store, true);\n     builder.levels.register_id(hir::CRATE_HIR_ID);\n-    intravisit::walk_crate(&mut builder, krate);\n+    tcx.hir().walk_crate(&mut builder);\n     builder.levels.pop(push);\n \n     builder.levels.build_map()"}, {"sha": "3403fff7551e06e28bbee9c63f76d8b316157cc4", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7ec973d9ce7bc02577efde54929ad38bcf5a40eb/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec973d9ce7bc02577efde54929ad38bcf5a40eb/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=7ec973d9ce7bc02577efde54929ad38bcf5a40eb", "patch": "@@ -7,9 +7,9 @@ use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::svh::Svh;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, CRATE_DEF_ID, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::definitions::{DefKey, DefPath, DefPathHash};\n-use rustc_hir::intravisit;\n+use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::*;\n use rustc_index::vec::Idx;\n@@ -519,6 +519,22 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n+    /// Walks the contents of a crate. See also `Crate::visit_all_items`.\n+    pub fn walk_crate(self, visitor: &mut impl Visitor<'hir>) {\n+        let (top_mod, span, hir_id) = self.get_module(CRATE_DEF_ID);\n+        visitor.visit_mod(top_mod, span, hir_id);\n+    }\n+\n+    /// Walks the attributes in a crate.\n+    pub fn walk_attributes(self, visitor: &mut impl Visitor<'hir>) {\n+        let krate = self.krate();\n+        for (&id, attrs) in krate.attrs.iter() {\n+            for a in *attrs {\n+                visitor.visit_attribute(id, a)\n+            }\n+        }\n+    }\n+\n     pub fn visit_item_likes_in_module<V>(&self, module: LocalDefId, visitor: &mut V)\n     where\n         V: ItemLikeVisitor<'hir>,\n@@ -934,7 +950,8 @@ pub(super) fn index_hir<'tcx>(tcx: TyCtxt<'tcx>, (): ()) -> &'tcx IndexedHir<'tc\n         &tcx.untracked_resolutions.definitions,\n         hcx,\n     );\n-    intravisit::walk_crate(&mut collector, tcx.untracked_crate);\n+    let top_mod = tcx.untracked_crate.module();\n+    collector.visit_mod(top_mod, top_mod.inner, CRATE_HIR_ID);\n \n     let map = collector.finalize_and_compute_crate_hash();\n     tcx.arena.alloc(map)"}, {"sha": "e57446b00038bd9b71e7a366f13aced4b0766438", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ec973d9ce7bc02577efde54929ad38bcf5a40eb/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec973d9ce7bc02577efde54929ad38bcf5a40eb/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=7ec973d9ce7bc02577efde54929ad38bcf5a40eb", "patch": "@@ -775,5 +775,5 @@ pub fn check_crate(tcx: TyCtxt<'_>) {\n     let krate = tcx.hir().krate();\n     let live_symbols = find_live(tcx, access_levels, krate);\n     let mut visitor = DeadVisitor { tcx, live_symbols };\n-    intravisit::walk_crate(&mut visitor, krate);\n+    tcx.hir().walk_crate(&mut visitor);\n }"}, {"sha": "4868f8b04e9086e3ddc03357433f6e2ed9a3ed1d", "filename": "compiler/rustc_passes/src/hir_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ec973d9ce7bc02577efde54929ad38bcf5a40eb/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec973d9ce7bc02577efde54929ad38bcf5a40eb/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs?ref=7ec973d9ce7bc02577efde54929ad38bcf5a40eb", "patch": "@@ -36,7 +36,7 @@ pub fn print_hir_stats(krate: &hir::Crate<'_>) {\n         data: FxHashMap::default(),\n         seen: FxHashSet::default(),\n     };\n-    hir_visit::walk_crate(&mut collector, krate);\n+    hir_visit::walk_crate_and_attributes(&mut collector, krate);\n     collector.print(\"HIR STATS\");\n }\n "}, {"sha": "ff8bd37238d6bc7db187fb58509da637e6919df1", "filename": "compiler/rustc_passes/src/lib_features.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ec973d9ce7bc02577efde54929ad38bcf5a40eb/compiler%2Frustc_passes%2Fsrc%2Flib_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec973d9ce7bc02577efde54929ad38bcf5a40eb/compiler%2Frustc_passes%2Fsrc%2Flib_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flib_features.rs?ref=7ec973d9ce7bc02577efde54929ad38bcf5a40eb", "patch": "@@ -6,7 +6,7 @@\n \n use rustc_ast::{Attribute, MetaItem, MetaItemKind};\n use rustc_errors::struct_span_err;\n-use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{NestedVisitorMap, Visitor};\n use rustc_middle::hir::map::Map;\n use rustc_middle::middle::lib_features::LibFeatures;\n use rustc_middle::ty::query::Providers;\n@@ -126,9 +126,7 @@ impl Visitor<'tcx> for LibFeatureCollector<'tcx> {\n \n fn get_lib_features(tcx: TyCtxt<'_>, (): ()) -> LibFeatures {\n     let mut collector = LibFeatureCollector::new(tcx);\n-    let krate = tcx.hir().krate();\n-\n-    intravisit::walk_crate(&mut collector, krate);\n+    tcx.hir().walk_attributes(&mut collector);\n     collector.lib_features\n }\n "}, {"sha": "9cf12c135a47b59fe49b7f25f8c47d6454c647db", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7ec973d9ce7bc02577efde54929ad38bcf5a40eb/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec973d9ce7bc02577efde54929ad38bcf5a40eb/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=7ec973d9ce7bc02577efde54929ad38bcf5a40eb", "patch": "@@ -8,6 +8,7 @@ use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_ID, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::hir_id::CRATE_HIR_ID;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::{FieldDef, Generics, HirId, Item, TraitRef, Ty, TyKind, Variant};\n use rustc_middle::hir::map::Map;\n@@ -678,7 +679,6 @@ fn stability_index(tcx: TyCtxt<'tcx>, (): ()) -> Index<'tcx> {\n         .collect();\n \n     {\n-        let krate = tcx.hir().krate();\n         let mut annotator = Annotator {\n             tcx,\n             index: &mut index,\n@@ -711,13 +711,13 @@ fn stability_index(tcx: TyCtxt<'tcx>, (): ()) -> Index<'tcx> {\n \n         annotator.annotate(\n             CRATE_DEF_ID,\n-            krate.module().inner,\n+            tcx.hir().span(CRATE_HIR_ID),\n             None,\n             AnnotationKind::Required,\n             InheritDeprecation::Yes,\n             InheritConstStability::No,\n             InheritStability::No,\n-            |v| intravisit::walk_crate(v, krate),\n+            |v| tcx.hir().walk_crate(v),\n         );\n     }\n     index\n@@ -908,8 +908,8 @@ pub fn check_unused_or_stable_features(tcx: TyCtxt<'_>) {\n     if tcx.stability().staged_api[&LOCAL_CRATE] {\n         let krate = tcx.hir().krate();\n         let mut missing = MissingStabilityAnnotations { tcx, access_levels };\n-        missing.check_missing_stability(CRATE_DEF_ID, krate.module().inner);\n-        intravisit::walk_crate(&mut missing, krate);\n+        missing.check_missing_stability(CRATE_DEF_ID, tcx.hir().span(CRATE_HIR_ID));\n+        tcx.hir().walk_crate(&mut missing);\n         krate.visit_all_item_likes(&mut missing.as_deep_visitor());\n     }\n "}, {"sha": "4bb13704d9347cee9c5799847ff0fcc979258e30", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ec973d9ce7bc02577efde54929ad38bcf5a40eb/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec973d9ce7bc02577efde54929ad38bcf5a40eb/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=7ec973d9ce7bc02577efde54929ad38bcf5a40eb", "patch": "@@ -2169,7 +2169,7 @@ fn privacy_access_levels(tcx: TyCtxt<'_>, (): ()) -> &AccessLevels {\n         changed: false,\n     };\n     loop {\n-        intravisit::walk_crate(&mut visitor, tcx.hir().krate());\n+        tcx.hir().walk_crate(&mut visitor);\n         if visitor.changed {\n             visitor.changed = false;\n         } else {\n@@ -2192,11 +2192,11 @@ fn check_private_in_public(tcx: TyCtxt<'_>, (): ()) {\n         in_variant: false,\n         old_error_set: Default::default(),\n     };\n-    intravisit::walk_crate(&mut visitor, krate);\n+    tcx.hir().walk_crate(&mut visitor);\n \n     let has_pub_restricted = {\n         let mut pub_restricted_visitor = PubRestrictedVisitor { tcx, has_pub_restricted: false };\n-        intravisit::walk_crate(&mut pub_restricted_visitor, krate);\n+        tcx.hir().walk_crate(&mut pub_restricted_visitor);\n         pub_restricted_visitor.has_pub_restricted\n     };\n "}, {"sha": "9d00b12d29fd41c3acea4be18c82d1a45054c23e", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ec973d9ce7bc02577efde54929ad38bcf5a40eb/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec973d9ce7bc02577efde54929ad38bcf5a40eb/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=7ec973d9ce7bc02577efde54929ad38bcf5a40eb", "patch": "@@ -1122,7 +1122,7 @@ impl<'tcx> DumpVisitor<'tcx> {\n                 attributes: lower_attributes(attrs.to_owned(), &self.save_ctxt),\n             },\n         );\n-        intravisit::walk_crate(self, krate);\n+        self.tcx.hir().walk_crate(self);\n     }\n \n     fn process_bounds(&mut self, bounds: hir::GenericBounds<'tcx>) {"}, {"sha": "04a2dafcf1fa73e214ce515dea422f7d7dd73acc", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7ec973d9ce7bc02577efde54929ad38bcf5a40eb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec973d9ce7bc02577efde54929ad38bcf5a40eb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=7ec973d9ce7bc02577efde54929ad38bcf5a40eb", "patch": "@@ -1012,8 +1012,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ) {\n         let module_did = self.tcx.parent_module(self.body_id);\n         let module_id = self.tcx.hir().local_def_id_to_hir_id(module_did);\n-        let krate = self.tcx.hir().krate();\n-        let (span, found_use) = UsePlacementFinder::check(self.tcx, krate, module_id);\n+        let (span, found_use) = UsePlacementFinder::check(self.tcx, module_id);\n         if let Some(span) = span {\n             let path_strings = candidates.iter().map(|did| {\n                 // Produce an additional newline to separate the new use statement\n@@ -1614,13 +1613,9 @@ struct UsePlacementFinder<'tcx> {\n }\n \n impl UsePlacementFinder<'tcx> {\n-    fn check(\n-        tcx: TyCtxt<'tcx>,\n-        krate: &'tcx hir::Crate<'tcx>,\n-        target_module: hir::HirId,\n-    ) -> (Option<Span>, bool) {\n+    fn check(tcx: TyCtxt<'tcx>, target_module: hir::HirId) -> (Option<Span>, bool) {\n         let mut finder = UsePlacementFinder { target_module, span: None, found_use: false, tcx };\n-        intravisit::walk_crate(&mut finder, krate);\n+        tcx.hir().walk_crate(&mut finder);\n         (finder.span, finder.found_use)\n     }\n }"}, {"sha": "399ab32b0210674e49842ec27f368b8cbe48cf18", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ec973d9ce7bc02577efde54929ad38bcf5a40eb/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec973d9ce7bc02577efde54929ad38bcf5a40eb/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=7ec973d9ce7bc02577efde54929ad38bcf5a40eb", "patch": "@@ -691,7 +691,7 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n     debug!(\"find_opaque_ty_constraints: scope={:?}\", scope);\n \n     if scope == hir::CRATE_HIR_ID {\n-        intravisit::walk_crate(&mut locator, tcx.hir().krate());\n+        tcx.hir().walk_crate(&mut locator);\n     } else {\n         debug!(\"find_opaque_ty_constraints: scope={:?}\", tcx.hir().get(scope));\n         match tcx.hir().get(scope) {"}, {"sha": "1554e4d9ef2b17e49370e4f336a903b0fcd89875", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7ec973d9ce7bc02577efde54929ad38bcf5a40eb/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec973d9ce7bc02577efde54929ad38bcf5a40eb/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=7ec973d9ce7bc02577efde54929ad38bcf5a40eb", "patch": "@@ -116,7 +116,6 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n             let mut global_ctxt = queries.global_ctxt()?.take();\n \n             let collector = global_ctxt.enter(|tcx| {\n-                let krate = tcx.hir().krate();\n                 let crate_attrs = tcx.hir().attrs(CRATE_HIR_ID);\n \n                 let mut opts = scrape_test_config(crate_attrs);\n@@ -144,10 +143,8 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n                 hir_collector.visit_testable(\n                     \"\".to_string(),\n                     CRATE_HIR_ID,\n-                    krate.module().inner,\n-                    |this| {\n-                        intravisit::walk_crate(this, krate);\n-                    },\n+                    tcx.hir().span(CRATE_HIR_ID),\n+                    |this| tcx.hir().walk_crate(this),\n                 );\n \n                 collector"}, {"sha": "df31de504341453dd65f84fe2e4541653c4532e5", "filename": "src/librustdoc/html/render/span_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ec973d9ce7bc02577efde54929ad38bcf5a40eb/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec973d9ce7bc02577efde54929ad38bcf5a40eb/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs?ref=7ec973d9ce7bc02577efde54929ad38bcf5a40eb", "patch": "@@ -45,7 +45,7 @@ crate fn collect_spans_and_sources(\n \n     if include_sources {\n         if generate_link_to_definition {\n-            intravisit::walk_crate(&mut visitor, tcx.hir().krate());\n+            tcx.hir().walk_crate(&mut visitor);\n         }\n         let (krate, sources) = sources::collect_local_sources(tcx, src_root, krate);\n         (krate, sources, visitor.matches)"}]}