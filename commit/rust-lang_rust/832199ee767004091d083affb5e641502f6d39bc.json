{"sha": "832199ee767004091d083affb5e641502f6d39bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzMjE5OWVlNzY3MDA0MDkxZDA4M2FmZmI1ZTY0MTUwMmY2ZDM5YmM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-08-12T14:41:05Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-08-19T17:50:44Z"}, "message": "use static as object-lifetime default for type XX in `Foo<Item=XX>`\n\nCurrently the default is \"inherited\" from context, so e.g.  `&impl\nFoo<Item = dyn Bar>` would default to `&'x impl Foo<Item = dyn Bar +\n'x>`, but this triggers an ICE and is not very consistent.\n\nThis patch doesn't implement what I expect would be the correct\nsemantics, because those are likely too complex. Instead, it handles\nwhat I'd expect to be the common case -- where the trait has no\nlifetime parameters.", "tree": {"sha": "5438aca5137e1ab3f97ac88731ff4109ca019ad5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5438aca5137e1ab3f97ac88731ff4109ca019ad5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/832199ee767004091d083affb5e641502f6d39bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/832199ee767004091d083affb5e641502f6d39bc", "html_url": "https://github.com/rust-lang/rust/commit/832199ee767004091d083affb5e641502f6d39bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/832199ee767004091d083affb5e641502f6d39bc/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af86fb1959b520ae0256272899df5c43b11df2a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/af86fb1959b520ae0256272899df5c43b11df2a7", "html_url": "https://github.com/rust-lang/rust/commit/af86fb1959b520ae0256272899df5c43b11df2a7"}], "stats": {"total": 230, "additions": 229, "deletions": 1}, "files": [{"sha": "f5b0af61693be6eba33db255fedb9b9a45f9065c", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 70, "deletions": 1, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/832199ee767004091d083affb5e641502f6d39bc/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/832199ee767004091d083affb5e641502f6d39bc/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=832199ee767004091d083affb5e641502f6d39bc", "patch": "@@ -558,6 +558,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n \n     fn visit_ty(&mut self, ty: &'tcx hir::Ty) {\n         debug!(\"visit_ty: id={:?} ty={:?}\", ty.hir_id, ty);\n+        debug!(\"visit_ty: ty.node={:?}\", ty.node);\n         match ty.node {\n             hir::TyKind::BareFn(ref c) => {\n                 let next_early_index = self.next_early_index();\n@@ -1923,6 +1924,13 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n     }\n \n     fn visit_segment_args(&mut self, res: Res, depth: usize, generic_args: &'tcx hir::GenericArgs) {\n+        debug!(\n+            \"visit_segment_args(res={:?}, depth={:?}, generic_args={:?})\",\n+            res,\n+            depth,\n+            generic_args,\n+        );\n+\n         if generic_args.parenthesized {\n             let was_in_fn_syntax = self.is_in_fn_syntax;\n             self.is_in_fn_syntax = true;\n@@ -1976,6 +1984,23 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             _ => None,\n         };\n \n+        debug!(\"visit_segment_args: type_def_id={:?}\", type_def_id);\n+\n+        // Compute a vector of defaults, one for each type parameter,\n+        // per the rules given in RFCs 599 and 1156. Example:\n+        //\n+        // ```rust\n+        // struct Foo<'a, T: 'a, U> { }\n+        // ```\n+        //\n+        // If you have `Foo<'x, dyn Bar, dyn Baz>`, we want to default\n+        // `dyn Bar` to `dyn Bar + 'x` (because of the `T: 'a` bound)\n+        // and `dyn Baz` to `dyn Baz + 'static` (because there is no\n+        // such bound).\n+        //\n+        // Therefore, we would compute `object_lifetime_defaults` to a\n+        // vector like `['x, 'static]`. Note that the vector only\n+        // includes type parameters.\n         let object_lifetime_defaults = type_def_id.map_or(vec![], |def_id| {\n             let in_body = {\n                 let mut scope = self.scope;\n@@ -2015,6 +2040,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                             .collect()\n                     })\n             };\n+            debug!(\"visit_segment_args: unsubst={:?}\", unsubst);\n             unsubst\n                 .iter()\n                 .map(|set| match *set {\n@@ -2035,6 +2061,8 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                 .collect()\n         });\n \n+        debug!(\"visit_segment_args: object_lifetime_defaults={:?}\", object_lifetime_defaults);\n+\n         let mut i = 0;\n         for arg in &generic_args.args {\n             match arg {\n@@ -2057,8 +2085,49 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             }\n         }\n \n+        // Hack: when resolving the type `XX` in binding like `dyn\n+        // Foo<'b, Item = XX>`, the current object-lifetime default\n+        // would be to examine the trait `Foo` to check whether it has\n+        // a lifetime bound declared on `Item`. e.g., if `Foo` is\n+        // declared like so, then the default object lifetime bound in\n+        // `XX` should be `'b`:\n+        //\n+        // ```rust\n+        // trait Foo<'a> {\n+        //   type Item: 'a;\n+        // }\n+        // ```\n+        //\n+        // but if we just have `type Item;`, then it would be\n+        // `'static`. However, we don't get all of this logic correct.\n+        //\n+        // Instead, we do something hacky: if there are no lifetime parameters\n+        // to the trait, then we simply use a default object lifetime\n+        // bound of `'static`, because there is no other possibility. On the other hand,\n+        // if there ARE lifetime parameters, then we require the user to give an\n+        // explicit bound for now.\n+        //\n+        // This is intended to leave room for us to implement the\n+        // correct behavior in the future.\n+        let has_lifetime_parameter = generic_args\n+            .args\n+            .iter()\n+            .any(|arg| match arg {\n+                GenericArg::Lifetime(_) => true,\n+                _ => false,\n+            });\n+\n+        // Resolve lifetimes found in the type `XX` from `Item = XX` bindings.\n         for b in &generic_args.bindings {\n-            self.visit_assoc_type_binding(b);\n+            let scope = Scope::ObjectLifetimeDefault {\n+                lifetime: if has_lifetime_parameter {\n+                    None\n+                } else {\n+                    Some(Region::Static)\n+                },\n+                s: self.scope,\n+            };\n+            self.with(scope, |_, this| this.visit_assoc_type_binding(b));\n         }\n     }\n "}, {"sha": "aad9d89fe2433ecaaa4479c7cc2d1e6672d99dd0", "filename": "src/test/ui/impl-trait/dyn-trait-elided-two-inputs-ref-assoc.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/832199ee767004091d083affb5e641502f6d39bc/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-elided-two-inputs-ref-assoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/832199ee767004091d083affb5e641502f6d39bc/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-elided-two-inputs-ref-assoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-elided-two-inputs-ref-assoc.rs?ref=832199ee767004091d083affb5e641502f6d39bc", "patch": "@@ -0,0 +1,27 @@\n+// Test that we don't get an error with `dyn Bar` in an impl Trait\n+// when there are multiple inputs.  The `dyn Bar` should default to `+\n+// 'static`. This used to erroneously generate an error (cc #62517).\n+//\n+// check-pass\n+\n+trait Foo {\n+    type Item: ?Sized;\n+\n+    fn item(&self) -> Box<Self::Item> { panic!() }\n+}\n+\n+trait Bar { }\n+\n+impl<T> Foo for T {\n+    type Item = dyn Bar;\n+}\n+\n+fn is_static<T>(_: T) where T: 'static { }\n+\n+fn bar(x: &str) -> &impl Foo<Item = dyn Bar> { &() }\n+\n+fn main() {\n+    let s = format!(\"foo\");\n+    let r = bar(&s);\n+    is_static(r.item());\n+}"}, {"sha": "7337383e2978425a83715e9fe4a978bc38eb04e0", "filename": "src/test/ui/object-lifetime/object-lifetime-default-dyn-binding-nonstatic1.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/832199ee767004091d083affb5e641502f6d39bc/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-dyn-binding-nonstatic1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/832199ee767004091d083affb5e641502f6d39bc/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-dyn-binding-nonstatic1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-dyn-binding-nonstatic1.rs?ref=832199ee767004091d083affb5e641502f6d39bc", "patch": "@@ -0,0 +1,27 @@\n+// Test that `dyn Bar<Item = XX>` uses `'static` as the default object\n+// lifetime bound for the type `XX`.\n+\n+trait Foo<'a> {\n+    type Item: ?Sized;\n+\n+    fn item(&self) -> Box<Self::Item> { panic!() }\n+}\n+\n+trait Bar { }\n+\n+impl<T> Foo<'_> for T {\n+    type Item = dyn Bar;\n+}\n+\n+fn is_static<T>(_: T) where T: 'static { }\n+\n+// Here, we should default to `dyn Bar + 'static`, but the current\n+// code forces us into a conservative, hacky path.\n+fn bar<'a>(x: &'a str) -> &'a dyn Foo<'a, Item = dyn Bar> { &() }\n+//~^ ERROR please supply an explicit bound\n+\n+fn main() {\n+    let s = format!(\"foo\");\n+    let r = bar(&s);\n+    is_static(r.item());\n+}"}, {"sha": "9dbf7a78ed7a7406ace2e3185c9b1db8a3742d83", "filename": "src/test/ui/object-lifetime/object-lifetime-default-dyn-binding-nonstatic1.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/832199ee767004091d083affb5e641502f6d39bc/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-dyn-binding-nonstatic1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/832199ee767004091d083affb5e641502f6d39bc/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-dyn-binding-nonstatic1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-dyn-binding-nonstatic1.stderr?ref=832199ee767004091d083affb5e641502f6d39bc", "patch": "@@ -0,0 +1,8 @@\n+error[E0228]: the lifetime bound for this object type cannot be deduced from context; please supply an explicit bound\n+  --> $DIR/object-lifetime-default-dyn-binding-nonstatic1.rs:20:50\n+   |\n+LL | fn bar<'a>(x: &'a str) -> &'a dyn Foo<'a, Item = dyn Bar> { &() }\n+   |                                                  ^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "2a7415174f8a0ca20f3df9378520953e77da2216", "filename": "src/test/ui/object-lifetime/object-lifetime-default-dyn-binding-nonstatic2.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/832199ee767004091d083affb5e641502f6d39bc/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-dyn-binding-nonstatic2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/832199ee767004091d083affb5e641502f6d39bc/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-dyn-binding-nonstatic2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-dyn-binding-nonstatic2.rs?ref=832199ee767004091d083affb5e641502f6d39bc", "patch": "@@ -0,0 +1,30 @@\n+// Test that `dyn Bar<Item = XX>` uses `'static` as the default object\n+// lifetime bound for the type `XX`.\n+\n+trait Foo<'a> {\n+    type Item: 'a + ?Sized;\n+\n+    fn item(&self) -> Box<Self::Item> { panic!() }\n+}\n+\n+trait Bar { }\n+\n+impl<T> Foo<'_> for T {\n+    type Item = dyn Bar;\n+}\n+\n+fn is_static<T>(_: T) where T: 'static { }\n+\n+// Here, we default to `dyn Bar + 'a`.  Or, we *should*, but the\n+// current code forces us into a conservative, hacky path.\n+fn bar<'a>(x: &'a str) -> &'a dyn Foo<'a, Item = dyn Bar> { &() }\n+//~^ ERROR please supply an explicit bound\n+\n+fn main() {\n+    let s = format!(\"foo\");\n+    let r = bar(&s);\n+\n+    // If it weren't for the conservative path above, we'd expect an\n+    // error here.\n+    is_static(r.item());\n+}"}, {"sha": "d069f52ce47db4ef1cb13fff4d4ca2bf33b910de", "filename": "src/test/ui/object-lifetime/object-lifetime-default-dyn-binding-nonstatic2.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/832199ee767004091d083affb5e641502f6d39bc/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-dyn-binding-nonstatic2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/832199ee767004091d083affb5e641502f6d39bc/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-dyn-binding-nonstatic2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-dyn-binding-nonstatic2.stderr?ref=832199ee767004091d083affb5e641502f6d39bc", "patch": "@@ -0,0 +1,8 @@\n+error[E0228]: the lifetime bound for this object type cannot be deduced from context; please supply an explicit bound\n+  --> $DIR/object-lifetime-default-dyn-binding-nonstatic2.rs:20:50\n+   |\n+LL | fn bar<'a>(x: &'a str) -> &'a dyn Foo<'a, Item = dyn Bar> { &() }\n+   |                                                  ^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "51be999a6329d09f85cda3e7a804827eba0765cc", "filename": "src/test/ui/object-lifetime/object-lifetime-default-dyn-binding-nonstatic3.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/832199ee767004091d083affb5e641502f6d39bc/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-dyn-binding-nonstatic3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/832199ee767004091d083affb5e641502f6d39bc/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-dyn-binding-nonstatic3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-dyn-binding-nonstatic3.rs?ref=832199ee767004091d083affb5e641502f6d39bc", "patch": "@@ -0,0 +1,23 @@\n+// Test that `dyn Bar<Item = XX>` uses `'static` as the default object\n+// lifetime bound for the type `XX`.\n+\n+trait Foo<'a> {\n+    type Item: ?Sized;\n+\n+    fn item(&self) -> Box<Self::Item> { panic!() }\n+}\n+\n+trait Bar { }\n+\n+fn is_static<T>(_: T) where T: 'static { }\n+\n+// Here, we should default to `dyn Bar + 'static`, but the current\n+// code forces us into a conservative, hacky path.\n+fn bar(x: &str) -> &dyn Foo<Item = dyn Bar> { &() }\n+//~^ ERROR please supply an explicit bound\n+\n+fn main() {\n+    let s = format!(\"foo\");\n+    let r = bar(&s);\n+    is_static(r.item());\n+}"}, {"sha": "9c7b6b98f2e3620375fca614ca63f47114dc634b", "filename": "src/test/ui/object-lifetime/object-lifetime-default-dyn-binding-nonstatic3.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/832199ee767004091d083affb5e641502f6d39bc/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-dyn-binding-nonstatic3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/832199ee767004091d083affb5e641502f6d39bc/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-dyn-binding-nonstatic3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-dyn-binding-nonstatic3.stderr?ref=832199ee767004091d083affb5e641502f6d39bc", "patch": "@@ -0,0 +1,8 @@\n+error[E0228]: the lifetime bound for this object type cannot be deduced from context; please supply an explicit bound\n+  --> $DIR/object-lifetime-default-dyn-binding-nonstatic3.rs:16:36\n+   |\n+LL | fn bar(x: &str) -> &dyn Foo<Item = dyn Bar> { &() }\n+   |                                    ^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "339f3356bd71ea66f2a1dc1df6130ac63f8cbf30", "filename": "src/test/ui/object-lifetime/object-lifetime-default-dyn-binding-static.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/832199ee767004091d083affb5e641502f6d39bc/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-dyn-binding-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/832199ee767004091d083affb5e641502f6d39bc/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-dyn-binding-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-dyn-binding-static.rs?ref=832199ee767004091d083affb5e641502f6d39bc", "patch": "@@ -0,0 +1,28 @@\n+// Test that `dyn Bar<Item = XX>` uses `'static` as the default object\n+// lifetime bound for the type `XX`.\n+//\n+// check-pass\n+\n+trait Foo {\n+    type Item: ?Sized;\n+\n+    fn item(&self) -> Box<Self::Item> { panic!() }\n+}\n+\n+trait Bar { }\n+\n+impl<T> Foo for T {\n+    type Item = dyn Bar;\n+}\n+\n+fn is_static<T>(_: T) where T: 'static { }\n+\n+// Here, we default to `dyn Bar + 'static`, and not `&'x dyn Foo<Item\n+// = dyn Bar + 'x>`.\n+fn bar(x: &str) -> &dyn Foo<Item = dyn Bar> { &() }\n+\n+fn main() {\n+    let s = format!(\"foo\");\n+    let r = bar(&s);\n+    is_static(r.item());\n+}"}]}