{"sha": "ee4f4edd477eb8c6235da2eb09424c26b157b97b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlNGY0ZWRkNDc3ZWI4YzYyMzVkYTJlYjA5NDI0YzI2YjE1N2I5N2I=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-01-30T12:27:16Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-01-30T12:27:16Z"}, "message": "Rollup merge of #31099 - brson:relnotes, r=alexcrichton", "tree": {"sha": "b2c8bd2e0eaa622c20c6c361e9b42903d612a76b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2c8bd2e0eaa622c20c6c361e9b42903d612a76b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee4f4edd477eb8c6235da2eb09424c26b157b97b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee4f4edd477eb8c6235da2eb09424c26b157b97b", "html_url": "https://github.com/rust-lang/rust/commit/ee4f4edd477eb8c6235da2eb09424c26b157b97b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee4f4edd477eb8c6235da2eb09424c26b157b97b/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef1a13b6371bcebc15c850ab82f14688d994fd25", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef1a13b6371bcebc15c850ab82f14688d994fd25", "html_url": "https://github.com/rust-lang/rust/commit/ef1a13b6371bcebc15c850ab82f14688d994fd25"}, {"sha": "6dbff0577616550140c735379d66892611d7759d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6dbff0577616550140c735379d66892611d7759d", "html_url": "https://github.com/rust-lang/rust/commit/6dbff0577616550140c735379d66892611d7759d"}], "stats": {"total": 352, "additions": 352, "deletions": 0}, "files": [{"sha": "5ff06f2f810756b1e83ba629db03a72ce2462a4e", "filename": "RELEASES.md", "status": "modified", "additions": 352, "deletions": 0, "changes": 352, "blob_url": "https://github.com/rust-lang/rust/blob/ee4f4edd477eb8c6235da2eb09424c26b157b97b/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/ee4f4edd477eb8c6235da2eb09424c26b157b97b/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=ee4f4edd477eb8c6235da2eb09424c26b157b97b", "patch": "@@ -1,3 +1,355 @@\n+Version 1.7.0 (2016-03-03)\n+==========================\n+\n+Language\n+--------\n+\n+* Soundness fixes to the interactions between associated types and\n+  lifetimes, specified in [RFC 1214], [now generate errors][1.7sf] for\n+  code that violates the new rules. This is a significant change that\n+  is known to break existing code, so it has emitted warnings for the\n+  new error cases since 1.4 to give crate authors time to adapt. The\n+  details of what is changing are subtle; read the RFC for more.\n+\n+Libraries\n+---------\n+\n+* Stabilized APIs:\n+  [`Path::strip_prefix`][] (renamed from relative_from),\n+  [`path::StripPrefixError`][] (new error type returned from strip_prefix),\n+  [`Ipv4Addr::is_loopback`],\n+  [`Ipv4Addr::is_private`],\n+  [`Ipv4Addr::is_link_local`],\n+  [`Ipv4Addr::is_multicast`],\n+  [`Ipv4Addr::is_broadcast`],\n+  [`Ipv4Addr::is_documentation`],\n+  [`Ipv6Addr::is_unspecified`],\n+  [`Ipv6Addr::is_loopback`],\n+  [`Ipv6Addr::is_multicast`],\n+  [`Vec::as_slice`],\n+  [`Vec::as_mut_slice`],\n+  [`String::as_str`],\n+  [`String::as_mut_str`],\n+  `<[T]>::`[`clone_from_slice`], which now requires the two slices to\n+  be the same length\n+  `<[T]>::`[`sort_by_key`],\n+  [`i32::checked_rem`],\n+  [`i32::checked_neg`],\n+  [`i32::checked_shl`],\n+  [`i32::checked_shr`],\n+  [`i32::saturating_mul`],\n+  [`i32::overflowing_add`],\n+  [`i32::overflowing_sub`],\n+  [`i32::overflowing_mul`],\n+  [`i32::overflowing_div`],\n+  [`i32::overflowing_rem`],\n+  [`i32::overflowing_neg`],\n+  [`i32::overflowing_shl`],\n+  [`i32::overflowing_shr`],\n+  [`u32::checked_rem`],\n+  [`u32::checked_neg`],\n+  [`u32::checked_shl`],\n+  [`u32::checked_shl`],\n+  [`u32::saturating_mul`],\n+  [`u32::overflowing_add`],\n+  [`u32::overflowing_sub`],\n+  [`u32::overflowing_mul`],\n+  [`u32::overflowing_div`],\n+  [`u32::overflowing_rem`],\n+  [`u32::overflowing_neg`],\n+  [`u32::overflowing_shl`],\n+  [`u32::overflowing_shr`],\n+  checked, saturated, and overflowing operations for other primitive types,\n+  [`ffi::IntoStringError`],\n+  [`CString::into_string`],\n+  [`CString::into_bytes`],\n+  [`CString::into_bytes_with_nul`],\n+  `From<CString> for Vec<u8>`,\n+  [`IntoStringError::into_cstring`],\n+  [`IntoStringError::utf8_error`],\n+  `Error for IntoStringError`.\n+* [Validating UTF-8 is faster by a factor of between 7 and 14x for\n+  ASCII input][1.7utf8]. This means that creating `String`s and `str`s\n+  from bytes is faster.\n+* [The performance of `LineWriter` (and thus `io::stdout`) was\n+  improved by using `memchr` to search for newlines][1.7m].\n+* [`f32::to_degrees` and `f32::to_radians` are stable][1.7f]. The\n+  `f64` variants were stabilized previously.\n+* [`BTreeMap` was rewritten to use less memory improve performance of\n+  insertion and iteration, the latter by as much as 5x`][1.7bm].\n+* [`BTreeSet` and its iterators, `Iter`, `IntoIter`, and `Range` are\n+  covariant over their contained type][1.7bt].\n+* [`LinkedList` and its iterators, `Iter` and `IntoIter` are covariant\n+  over their contained type][1.7ll].\n+* [`str::replace` now accepts a `Pattern`][1.7rp], like other string\n+  searching methods.\n+* [`Any` is implemented for unsized types][1.7a].\n+* [`Hash` is implemented for `Duration`][1.7h].\n+\n+Misc\n+----\n+\n+* [The `--error-format=json` flag to `rustc` causes it to emit errors\n+  in JSON format][1.7j]. This is an unstable flag and so also requires\n+  the `-Z unstable-options` flag.\n+* [When running tests with `--test`, rustdoc will pass `--cfg`\n+  arguments to the compiler][1.7dt].\n+* [The compiler is built with RPATH information by default][1.7rp].\n+  This means that it will be possible to run `rustc` when installed in\n+  unusual configurations without configuring the dynamic linker search\n+  path explicitly.\n+* [`rustc` passes `--enable-new-dtags` to GNU ld][1.7dt]. This makes\n+  any RPATH entries (emitted with `-C rpath`) *not* take precedence\n+  over `LD_LIBRARY_PATH`.\n+\n+Cargo\n+-----\n+\n+* [`cargo rustc` accepts a `--profile` flag that runs `rustc` under\n+  any of the compilation profiles, 'dev', 'bench', or 'test'][1.7cp].\n+* [The `rerun-if-changed` build script directive no longer causes the\n+  build script to incorrectly run twice in certain scenarios][1.7rr].\n+\n+Compatibility Notes\n+-------------------\n+\n+* [Several bugs in the compiler's visibility calculations were\n+  fixed][1.7v]. Since this was found to break significant amounts of\n+  code, the new errors will be emitted as warnings for several release\n+  cycles, under the `private_in_public` lint.\n+* Defaulted type parameters were accidentally accepted in positions\n+  that were not intended. In this release, [defaulted type parameters\n+  appearing outside of type definitions will generate a\n+  warning][1.7d], which will become an error in future releases.\n+* [Parsing \".\" as a float results in an error instead of\n+  0][1.7p]. That is, `\".\".parse::<f32>()` returns `Err`, not `Ok(0)`.\n+* [Borrows of closure parameters may not outlive the closure][1.7bc].\n+\n+[1.7a]: https://github.com/rust-lang/rust/pull/30928\n+[1.7bc]: https://github.com/rust-lang/rust/pull/30341\n+[1.7bm]: https://github.com/rust-lang/rust/pull/30426\n+[1.7bt]: https://github.com/rust-lang/rust/pull/30998\n+[1.7cp]: https://github.com/rust-lang/cargo/pull/2224\n+[1.7d]: https://github.com/rust-lang/rust/pull/30724\n+[1.7dt]: https://github.com/rust-lang/rust/pull/30372\n+[1.7dt]: https://github.com/rust-lang/rust/pull/30394\n+[1.7f]: https://github.com/rust-lang/rust/pull/30672\n+[1.7h]: https://github.com/rust-lang/rust/pull/30818\n+[1.7j]: https://github.com/rust-lang/rust/pull/30711\n+[1.7ll]: https://github.com/rust-lang/rust/pull/30663\n+[1.7m]: https://github.com/rust-lang/rust/pull/30381\n+[1.7p]: https://github.com/rust-lang/rust/pull/30681\n+[1.7rp]: https://github.com/rust-lang/rust/pull/29498\n+[1.7rp]: https://github.com/rust-lang/rust/pull/30353\n+[1.7rr]: https://github.com/rust-lang/cargo/pull/2279\n+[1.7sf]: https://github.com/rust-lang/rust/pull/30389\n+[1.7utf8]: https://github.com/rust-lang/rust/pull/30740\n+[1.7v]: https://github.com/rust-lang/rust/pull/29973\n+[RFC 1214]: https://github.com/rust-lang/rfcs/blob/master/text/1214-projections-lifetimes-and-wf.md\n+[`clone_from_slice`]: http://doc.rust-lang.org/nightly/std/primitive.slice.html#method.clone_from_slice\n+[`sort_by_key`]: http://doc.rust-lang.org/nightly/std/primitive.slice.html#method.sort_by_key\n+[`CString::into_bytes_with_nul`]: http://doc.rust-lang.org/nightly/std/ffi/struct.CString.html#method.into_bytes_with_nul\n+[`CString::into_bytes`]: http://doc.rust-lang.org/nightly/std/ffi/struct.CString.html#method.into_bytes\n+[`CString::into_string`]: http://doc.rust-lang.org/nightly/std/ffi/struct.CString.html#method.into_string\n+[`IntoStringError::into_cstring`]: http://doc.rust-lang.org/nightly/std/ffi/struct.IntoStringError.html#method.into_cstring\n+[`IntoStringError::utf8_error`]: http://doc.rust-lang.org/nightly/std/ffi/struct.IntoStringError.html#method.utf8_error\n+[`Ipv4Addr::is_broadcast`]: http://doc.rust-lang.org/nightly/std/net/struct.Ipv4Addr.html#method.is_broadcast\n+[`Ipv4Addr::is_documentation`]: http://doc.rust-lang.org/nightly/std/net/struct.Ipv4Addr.html#method.is_documentation\n+[`Ipv4Addr::is_link_local`]: http://doc.rust-lang.org/nightly/std/net/struct.Ipv4Addr.html#method.is_link_local\n+[`Ipv4Addr::is_loopback`]: http://doc.rust-lang.org/nightly/std/net/struct.Ipv4Addr.html#method.is_loopback\n+[`Ipv4Addr::is_multicast`]: http://doc.rust-lang.org/nightly/std/net/struct.Ipv4Addr.html#method.is_multicast\n+[`Ipv4Addr::is_private`]: http://doc.rust-lang.org/nightly/std/net/struct.Ipv4Addr.html#method.is_private\n+[`Ipv6Addr::is_loopback`]: http://doc.rust-lang.org/nightly/std/net/struct.Ipv6Addr.html#method.is_loopback\n+[`Ipv6Addr::is_multicast`]: http://doc.rust-lang.org/nightly/std/net/struct.Ipv6Addr.html#method.is_multicast\n+[`Ipv6Addr::is_unspecified`]: http://doc.rust-lang.org/nightly/std/net/struct.Ipv6Addr.html#method.is_unspecified\n+[`Path::strip_prefix`]: http://doc.rust-lang.org/nightly/std/path/struct.Path.html#method.strip_prefix\n+[`String::as_mut_str`]: http://doc.rust-lang.org/nightly/std/string/struct.String.html#method.as_mut_str\n+[`String::as_str`]: http://doc.rust-lang.org/nightly/std/string/struct.String.html#method.as_str\n+[`Vec::as_mut_slice`]: http://doc.rust-lang.org/nightly/std/vec/struct.Vec.html#method.as_mut_slice\n+[`Vec::as_slice`]: http://doc.rust-lang.org/nightly/std/vec/struct.Vec.html#method.as_slice\n+[`ffi::IntoStringError`]: http://doc.rust-lang.org/nightly/std/ffi/struct.IntoStringError.html\n+[`i32::checked_neg`]: http://doc.rust-lang.org/nightly/std/primitive.i32.html#method.checked_neg\n+[`i32::checked_rem`]: http://doc.rust-lang.org/nightly/std/primitive.i32.html#method.checked_rem\n+[`i32::checked_shl`]: http://doc.rust-lang.org/nightly/std/primitive.i32.html#method.checked_shl\n+[`i32::checked_shr`]: http://doc.rust-lang.org/nightly/std/primitive.i32.html#method.checked_shr\n+[`i32::overflowing_add`]: http://doc.rust-lang.org/nightly/std/primitive.i32.html#method.overflowing_add\n+[`i32::overflowing_div`]: http://doc.rust-lang.org/nightly/std/primitive.i32.html#method.overflowing_div\n+[`i32::overflowing_mul`]: http://doc.rust-lang.org/nightly/std/primitive.i32.html#method.overflowing_mul\n+[`i32::overflowing_neg`]: http://doc.rust-lang.org/nightly/std/primitive.i32.html#method.overflowing_neg\n+[`i32::overflowing_rem`]: http://doc.rust-lang.org/nightly/std/primitive.i32.html#method.overflowing_rem\n+[`i32::overflowing_shl`]: http://doc.rust-lang.org/nightly/std/primitive.i32.html#method.overflowing_shl\n+[`i32::overflowing_shr`]: http://doc.rust-lang.org/nightly/std/primitive.i32.html#method.overflowing_shr\n+[`i32::overflowing_sub`]: http://doc.rust-lang.org/nightly/std/primitive.i32.html#method.overflowing_sub\n+[`i32::saturating_mul`]: http://doc.rust-lang.org/nightly/std/primitive.i32.html#method.saturating_mul\n+[`path::StripPrefixError`]: http://doc.rust-lang.org/nightly/std/path/struct.StripPrefixError.html\n+[`u32::checked_rem`]: http://doc.rust-lang.org/nightly/std/primitive.u32.html#method.checked_rem\n+[`u32::checked_shl`]: http://doc.rust-lang.org/nightly/std/primitive.u32.html#method.checked_shl\n+[`u32::overflowing_add`]: http://doc.rust-lang.org/nightly/std/primitive.u32.html#method.overflowing_add\n+[`u32::overflowing_div`]: http://doc.rust-lang.org/nightly/std/primitive.u32.html#method.overflowing_div\n+[`u32::overflowing_mul`]: http://doc.rust-lang.org/nightly/std/primitive.u32.html#method.overflowing_mul\n+[`u32::overflowing_neg`]: http://doc.rust-lang.org/nightly/std/primitive.u32.html#method.overflowing_neg\n+[`u32::overflowing_rem`]: http://doc.rust-lang.org/nightly/std/primitive.u32.html#method.overflowing_rem\n+[`u32::overflowing_shl`]: http://doc.rust-lang.org/nightly/std/primitive.u32.html#method.overflowing_shl\n+[`u32::overflowing_shr`]: http://doc.rust-lang.org/nightly/std/primitive.u32.html#method.overflowing_shr\n+[`u32::overflowing_sub`]: http://doc.rust-lang.org/nightly/std/primitive.u32.html#method.overflowing_sub\n+[`u32::saturating_mul`]: http://doc.rust-lang.org/nightly/std/primitive.u32.html#method.saturating_mul\n+\n+\n+Version 1.6.0 (2016-01-21)\n+==========================\n+\n+Language\n+--------\n+\n+* The `#![no_std]` attribute causes a crate to not be linked to the\n+  standard library, but only the [core library][1.6co], as described\n+  in [RFC 1184]. The core library defines common types and traits but\n+  has no platform dependencies whatsoever, and is the basis for Rust\n+  software in environments that cannot support a full port of the\n+  standard library, such as operating systems. Most of the core\n+  library is now stable.\n+\n+Libraries\n+---------\n+\n+* Stabilized APIs:\n+  [`Read::read_exact`],\n+  [`ErrorKind::UnexpectedEof`][] (renamed from `UnexpectedEOF`),\n+  [`fs::DirBuilder`], [`fs::DirBuilder::new`],\n+  [`fs::DirBuilder::recursive`], [`fs::DirBuilder::create`],\n+  [`os::unix::fs::DirBuilderExt`],\n+  [`os::unix::fs::DirBuilderExt::mode`], [`vec::Drain`],\n+  [`vec::Vec::drain`], [`string::Drain`], [`string::String::drain`],\n+  [`vec_deque::Drain`], [`vec_deque::VecDeque::drain`],\n+  [`collections::hash_map::Drain`],\n+  [`collections::hash_map::HashMap::drain`],\n+  [`collections::hash_set::Drain`],\n+  [`collections::hash_set::HashSet::drain`],\n+  [`collections::binary_heap::Drain`],\n+  [`collections::binary_heap::BinaryHeap::drain`],\n+  [`Vec::extend_from_slice`][] (renamed from `push_all`),\n+  [`Mutex::get_mut`], [`Mutex::into_inner`], [`RwLock::get_mut`],\n+  [`RwLock::into_inner`],\n+  [`Iterator::min_by_key`][] (renamed from `min_by`),\n+  [`Iterator::max_by_key`][] (renamed from `max_by`).\n+* The [core library][1.6co] is stable, as are most of its APIs.\n+* [The `assert_eq!` macro supports arguments that don't implement\n+  `Sized`][1.6ae], such as arrays. In this way it behaves more like\n+  `assert!`.\n+* Several timer functions that take duration in milliseconds [are\n+  deprecated in favor of those that take `Duration`][1.6ms]. These\n+  include `Condvar::wait_timeout_ms`, `thread::sleep_ms`, and\n+  `thread::park_timeout_ms`.\n+* The algorithm by which `Vec` reserves additional elements was\n+  [tweaked to not allocate excessive space][1.6a] while still growing\n+  exponentially.\n+* `From` conversions are [implemented from integers to floats][1.6f]\n+  in cases where the conversion is lossless. Thus they are not\n+  implemented for 32-bit ints to `f32`, nor for 64-bit ints to `f32`\n+  or `f64`. They are also not implemented for `isize` and `usize`\n+  because the implementations would be platform-specific. `From` is\n+  also implemented from `f32` to `f64`.\n+* `From<&Path>` and `From<PathBuf>` are implemented for `Cow<Path>`.\n+* `From<T>` is implemented for `Box<T>`, `Rc<T>` and `Arc<T>`.\n+* `IntoIterator` is implemented for `&PathBuf` and `&Path`.\n+* [`BinaryHeap` was refactored][1.6bh] for modest performance\n+  improvements.\n+* Sorting slices that are already sorted [is 50% faster in some\n+  cases][1.6s].\n+\n+Cargo\n+-----\n+\n+* Cargo will look in `$CARGO_HOME/bin` for subcommands [by default][1.6c].\n+* Cargo build scripts can specify their dependencies by emitting the\n+  [`rerun-if-changed`][1.6rr] key.\n+* crates.io will reject publication of crates with dependencies that\n+  have a wildcard version constraint. Crates with wildcard\n+  dependencies were seen to cause a variety of problems, as described\n+  in [RFC 1241]. Since 1.5 publication of such crates has emitted a\n+  warning.\n+* `cargo clean` [accepts a `--release` flag][1.6cc] to clean the\n+  release folder.  A variety of artifacts that Cargo failed to clean\n+  are now correctly deleted.\n+\n+Misc\n+----\n+\n+* The `unreachable_code` lint [warns when a function call's argument\n+  diverges][1.6dv].\n+* The parser indicates [failures that may be caused by\n+  confusingly-similar Unicode characters][1.6uc]\n+* Certain macro errors [are reported at definition time][1.6m], not\n+  expansion.\n+\n+Compatibility Notes\n+-------------------\n+\n+* The compiler no longer makes use of the [`RUST_PATH`][1.6rp]\n+  environment variable when locating crates. This was a pre-cargo\n+  feature for integrating with the package manager that was\n+  accidentally never removed.\n+* [A number of bugs were fixed in the privacy checker][1.6p] that\n+  could cause previously-accepted code to break.\n+* [Modules and unit/tuple structs may not share the same name][1.6ts].\n+* [Bugs in pattern matching unit structs were fixed][1.6us]. The tuple\n+  struct pattern syntax (`Foo(..)`) can no longer be used to match\n+  unit structs. This is a warning now, but will become an error in\n+  future releases. Patterns that share the same name as a const are\n+  now an error.\n+* A bug was fixed that causes [rustc not to apply default type\n+  parameters][1.6xc] when resolving certain method implementations of\n+  traits defined in other crates.\n+\n+[1.6a]: https://github.com/rust-lang/rust/pull/29454\n+[1.6ae]: https://github.com/rust-lang/rust/pull/29770\n+[1.6bh]: https://github.com/rust-lang/rust/pull/29811\n+[1.6c]: https://github.com/rust-lang/cargo/pull/2192\n+[1.6cc]: https://github.com/rust-lang/cargo/pull/2131\n+[1.6co]: http://doc.rust-lang.org/beta/core/index.html\n+[1.6dv]: https://github.com/rust-lang/rust/pull/30000\n+[1.6f]: https://github.com/rust-lang/rust/pull/29129\n+[1.6m]: https://github.com/rust-lang/rust/pull/29828\n+[1.6ms]: https://github.com/rust-lang/rust/pull/29604\n+[1.6p]: https://github.com/rust-lang/rust/pull/29726\n+[1.6rp]: https://github.com/rust-lang/rust/pull/30034\n+[1.6rr]: https://github.com/rust-lang/cargo/pull/2134\n+[1.6s]: https://github.com/rust-lang/rust/pull/29675\n+[1.6ts]: https://github.com/rust-lang/rust/issues/21546\n+[1.6uc]: https://github.com/rust-lang/rust/pull/29837\n+[1.6us]: https://github.com/rust-lang/rust/pull/29383\n+[1.6xc]: https://github.com/rust-lang/rust/issues/30123\n+[RFC 1184]: https://github.com/rust-lang/rfcs/blob/master/text/1184-stabilize-no_std.md\n+[RFC 1241]: https://github.com/rust-lang/rfcs/blob/master/text/1241-no-wildcard-deps.md\n+[`ErrorKind::UnexpectedEof`]: http://doc.rust-lang.org/nightly/std/io/enum.ErrorKind.html#variant.UnexpectedEof\n+[`Iterator::max_by_key`]: http://doc.rust-lang.org/nightly/std/iter/trait.Iterator.html#method.max_by_key\n+[`Iterator::min_by_key`]: http://doc.rust-lang.org/nightly/std/iter/trait.Iterator.html#method.min_by_key\n+[`Mutex::get_mut`]: http://doc.rust-lang.org/nightly/std/sync/struct.Mutex.html#method.get_mut\n+[`Mutex::into_inner`]: http://doc.rust-lang.org/nightly/std/sync/struct.Mutex.html#method.into_inner\n+[`Read::read_exact`]: http://doc.rust-lang.org/nightly/std/io/trait.Read.html#method.read_exact\n+[`RwLock::get_mut`]: http://doc.rust-lang.org/nightly/std/sync/struct.RwLock.html#method.get_mut\n+[`RwLock::into_inner`]: http://doc.rust-lang.org/nightly/std/sync/struct.RwLock.html#method.into_inner\n+[`Vec::extend_from_slice`]: http://doc.rust-lang.org/nightly/collections/vec/struct.Vec.html#method.extend_from_slice\n+[`collections::binary_heap::BinaryHeap::drain`]: http://doc.rust-lang.org/nightly/std/collections/binary_heap/struct.BinaryHeap.html#method.drain\n+[`collections::binary_heap::Drain`]: http://doc.rust-lang.org/nightly/std/collections/binary_heap/struct.Drain.html\n+[`collections::hash_map::Drain`]: http://doc.rust-lang.org/nightly/std/collections/hash_map/struct.Drain.html\n+[`collections::hash_map::HashMap::drain`]: http://doc.rust-lang.org/nightly/std/collections/hash_map/struct.HashMap.html#method.drain\n+[`collections::hash_set::Drain`]: http://doc.rust-lang.org/nightly/std/collections/hash_set/struct.Drain.html\n+[`collections::hash_set::HashSet::drain`]: http://doc.rust-lang.org/nightly/std/collections/hash_set/struct.HashSet.html#method.drain\n+[`fs::DirBuilder::create`]: http://doc.rust-lang.org/nightly/std/fs/struct.DirBuilder.html#method.create\n+[`fs::DirBuilder::new`]: http://doc.rust-lang.org/nightly/std/fs/struct.DirBuilder.html#method.new\n+[`fs::DirBuilder::recursive`]: http://doc.rust-lang.org/nightly/std/fs/struct.DirBuilder.html#method.recursive\n+[`fs::DirBuilder`]: http://doc.rust-lang.org/nightly/std/fs/struct.DirBuilder.html\n+[`os::unix::fs::DirBuilderExt::mode`]: http://doc.rust-lang.org/nightly/std/os/unix/fs/trait.DirBuilderExt.html#tymethod.mode\n+[`os::unix::fs::DirBuilderExt`]: http://doc.rust-lang.org/nightly/std/os/unix/fs/trait.DirBuilderExt.html\n+[`string::Drain`]: http://doc.rust-lang.org/nightly/std/string/struct.Drain.html\n+[`string::String::drain`]: http://doc.rust-lang.org/nightly/std/string/struct.String.html#method.drain\n+[`vec::Drain`]: http://doc.rust-lang.org/nightly/std/vec/struct.Drain.html\n+[`vec::Vec::drain`]: http://doc.rust-lang.org/nightly/std/vec/struct.Vec.html#method.drain\n+[`vec_deque::Drain`]: http://doc.rust-lang.org/nightly/std/collections/vec_deque/struct.Drain.html\n+[`vec_deque::VecDeque::drain`]: http://doc.rust-lang.org/nightly/std/collections/vec_deque/struct.VecDeque.html#method.drain\n+\n+\n Version 1.5.0 (2015-12-10)\n ==========================\n "}]}