{"sha": "ee7bad455b12f6c434e308d18f7128e86213163b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlN2JhZDQ1NWIxMmY2YzQzNGUzMDhkMThmNzEyOGU4NjIxMzE2M2I=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-01-31T06:11:22Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-01-31T06:25:47Z"}, "message": "Some renamings: s/ast_ty/hir_ty and s/StructField/hir::StructField\n\nI think in both cases the new names make the code more understandable.\nFor `StructField` specifically because there's one in\n[`syntax::ast`][ast] and one in [`rustc::hir`][hir].\n\n[ast]: https://doc.rust-lang.org/nightly/nightly-rustc/syntax/ast/struct.StructField.html\n[hir]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc/hir/struct.StructField.html", "tree": {"sha": "8f03f2a79c73771ae0edbd4fb93a8a8b704938f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f03f2a79c73771ae0edbd4fb93a8a8b704938f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee7bad455b12f6c434e308d18f7128e86213163b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEvUKv4zqIn2RHUgCKtvoGpuDiZlsFAlxSlOwACgkQtvoGpuDi\nZlsvABAAul0B6GMPx7J/YwFSKpx4nJgBE+J7dq7NqVfa7dSoZ68yDPvMq440gA4l\nfybYcq8Gtk1zyIGx4QbyBAOU7muLcp5DYVVec45ToNjA1w+YBF65o83BR0p1DFOP\nNHLFDHN5Pjsd3UuJZ9lZl5EZO1Q+quTymzE7zrIR3PNXlw92YVZyKEpLutVIoeri\nN18cYMy0DK+xEn59RRWJeVfrZuBOODh0Mkk6kE95XRd396vDmJuTMG2NFD8S9RDK\ngVKlfLCTLD7UHM4Ms4ouJmzZXI7QYLsrs21eeI7DfIuEJjHUTl2bFhRHANiupO1A\nwrCBAU36FB5XrREHP5b2nIAS3wHk1NMG060ZN2xU1IVUZWE63W50SbyBnyAexJHf\nuOGy7vEIEY8bSMHnM3IKQMPl29O0V8ZZ/2pNAa8a++6o20Tx2dJDNwTg1mO1LCCc\ny4FwHHSK+huaEvO25tV7Ot4BOatyCF4UpjvxzKs4oNLN9oEtfqmM3uj0ddZ5TIQT\n09yO0r9mXf+x6O9xT1+Ji6xuR4oqG7nwVfnLhMxIOwQMJzDBGno4JDXXOer8bNJe\nrA4ox6e0DFGsIshLmv9Kdj+24lkEtrbxW33sv6s3lZH6rhMnAx/hlSjDt3KEVWVD\nXLaSaygGc75qdIX6WYwvUqKzn6KGQ73yy61k5Hg88HqPp2cFVqs=\n=2o1g\n-----END PGP SIGNATURE-----", "payload": "tree 8f03f2a79c73771ae0edbd4fb93a8a8b704938f8\nparent 410d5ba6c3bea86632247a559685c2e13dedea91\nauthor Philipp Hansch <dev@phansch.net> 1548915082 +0100\ncommitter Philipp Hansch <dev@phansch.net> 1548915947 +0100\n\nSome renamings: s/ast_ty/hir_ty and s/StructField/hir::StructField\n\nI think in both cases the new names make the code more understandable.\nFor `StructField` specifically because there's one in\n[`syntax::ast`][ast] and one in [`rustc::hir`][hir].\n\n[ast]: https://doc.rust-lang.org/nightly/nightly-rustc/syntax/ast/struct.StructField.html\n[hir]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc/hir/struct.StructField.html\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee7bad455b12f6c434e308d18f7128e86213163b", "html_url": "https://github.com/rust-lang/rust/commit/ee7bad455b12f6c434e308d18f7128e86213163b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee7bad455b12f6c434e308d18f7128e86213163b/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "410d5ba6c3bea86632247a559685c2e13dedea91", "url": "https://api.github.com/repos/rust-lang/rust/commits/410d5ba6c3bea86632247a559685c2e13dedea91", "html_url": "https://github.com/rust-lang/rust/commit/410d5ba6c3bea86632247a559685c2e13dedea91"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "10be0c06d87d2bd047eebb79820cbdb9bbb87870", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ee7bad455b12f6c434e308d18f7128e86213163b/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee7bad455b12f6c434e308d18f7128e86213163b/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=ee7bad455b12f6c434e308d18f7128e86213163b", "patch": "@@ -186,7 +186,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypePass {\n         check_fn_decl(cx, decl);\n     }\n \n-    fn check_struct_field(&mut self, cx: &LateContext<'_, '_>, field: &StructField) {\n+    fn check_struct_field(&mut self, cx: &LateContext<'_, '_>, field: &hir::StructField) {\n         check_ty(cx, &field.ty, false);\n     }\n \n@@ -240,21 +240,21 @@ fn match_type_parameter(cx: &LateContext<'_, '_>, qpath: &QPath, path: &[&str])\n ///\n /// The parameter `is_local` distinguishes the context of the type; types from\n /// local bindings should only be checked for the `BORROWED_BOX` lint.\n-fn check_ty(cx: &LateContext<'_, '_>, ast_ty: &hir::Ty, is_local: bool) {\n-    if in_macro(ast_ty.span) {\n+fn check_ty(cx: &LateContext<'_, '_>, hir_ty: &hir::Ty, is_local: bool) {\n+    if in_macro(hir_ty.span) {\n         return;\n     }\n-    match ast_ty.node {\n+    match hir_ty.node {\n         TyKind::Path(ref qpath) if !is_local => {\n-            let hir_id = cx.tcx.hir().node_to_hir_id(ast_ty.id);\n+            let hir_id = cx.tcx.hir().node_to_hir_id(hir_ty.id);\n             let def = cx.tables.qpath_def(qpath, hir_id);\n             if let Some(def_id) = opt_def_id(def) {\n                 if Some(def_id) == cx.tcx.lang_items().owned_box() {\n                     if match_type_parameter(cx, qpath, &paths::VEC) {\n                         span_help_and_lint(\n                             cx,\n                             BOX_VEC,\n-                            ast_ty.span,\n+                            hir_ty.span,\n                             \"you seem to be trying to use `Box<Vec<T>>`. Consider using just `Vec<T>`\",\n                             \"`Vec<T>` is already on the heap, `Box<Vec<T>>` makes an extra allocation.\",\n                         );\n@@ -288,7 +288,7 @@ fn check_ty(cx: &LateContext<'_, '_>, ast_ty: &hir::Ty, is_local: bool) {\n                             span_lint_and_sugg(\n                                 cx,\n                                 VEC_BOX,\n-                                ast_ty.span,\n+                                hir_ty.span,\n                                 \"`Vec<T>` is already on the heap, the boxing is unnecessary.\",\n                                 \"try\",\n                                 format!(\"Vec<{}>\", boxed_type),\n@@ -302,7 +302,7 @@ fn check_ty(cx: &LateContext<'_, '_>, ast_ty: &hir::Ty, is_local: bool) {\n                         span_lint(\n                             cx,\n                             OPTION_OPTION,\n-                            ast_ty.span,\n+                            hir_ty.span,\n                             \"consider using `Option<T>` instead of `Option<Option<T>>` or a custom \\\n                              enum if you need to distinguish all 3 cases\",\n                         );\n@@ -312,7 +312,7 @@ fn check_ty(cx: &LateContext<'_, '_>, ast_ty: &hir::Ty, is_local: bool) {\n                     span_help_and_lint(\n                         cx,\n                         LINKEDLIST,\n-                        ast_ty.span,\n+                        hir_ty.span,\n                         \"I see you're using a LinkedList! Perhaps you meant some other data structure?\",\n                         \"a VecDeque might work\",\n                     );\n@@ -360,7 +360,7 @@ fn check_ty(cx: &LateContext<'_, '_>, ast_ty: &hir::Ty, is_local: bool) {\n                 },\n             }\n         },\n-        TyKind::Rptr(ref lt, ref mut_ty) => check_ty_rptr(cx, ast_ty, is_local, lt, mut_ty),\n+        TyKind::Rptr(ref lt, ref mut_ty) => check_ty_rptr(cx, hir_ty, is_local, lt, mut_ty),\n         // recurse\n         TyKind::Slice(ref ty) | TyKind::Array(ref ty, _) | TyKind::Ptr(MutTy { ref ty, .. }) => {\n             check_ty(cx, ty, is_local)\n@@ -374,7 +374,7 @@ fn check_ty(cx: &LateContext<'_, '_>, ast_ty: &hir::Ty, is_local: bool) {\n     }\n }\n \n-fn check_ty_rptr(cx: &LateContext<'_, '_>, ast_ty: &hir::Ty, is_local: bool, lt: &Lifetime, mut_ty: &MutTy) {\n+fn check_ty_rptr(cx: &LateContext<'_, '_>, hir_ty: &hir::Ty, is_local: bool, lt: &Lifetime, mut_ty: &MutTy) {\n     match mut_ty.ty.node {\n         TyKind::Path(ref qpath) => {\n             let hir_id = cx.tcx.hir().node_to_hir_id(mut_ty.ty.id);\n@@ -410,7 +410,7 @@ fn check_ty_rptr(cx: &LateContext<'_, '_>, ast_ty: &hir::Ty, is_local: bool, lt:\n                     span_lint_and_sugg(\n                         cx,\n                         BORROWED_BOX,\n-                        ast_ty.span,\n+                        hir_ty.span,\n                         \"you seem to be trying to use `&Box<T>`. Consider using just `&T`\",\n                         \"try\",\n                         format!(\n@@ -1317,7 +1317,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeComplexityPass {\n         self.check_fndecl(cx, decl);\n     }\n \n-    fn check_struct_field(&mut self, cx: &LateContext<'a, 'tcx>, field: &'tcx StructField) {\n+    fn check_struct_field(&mut self, cx: &LateContext<'a, 'tcx>, field: &'tcx hir::StructField) {\n         // enum variants are also struct fields now\n         self.check_type(cx, &field.ty);\n     }"}]}