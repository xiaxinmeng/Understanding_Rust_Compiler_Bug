{"sha": "770655a47f9577b15e499a76f87b903bbde93c3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3MDY1NWE0N2Y5NTc3YjE1ZTQ5OWE3NmY4N2I5MDNiYmRlOTNjM2I=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-06-24T00:22:02Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-06-24T00:23:07Z"}, "message": "Replace Vec<Vec<_>> with Vec<_>", "tree": {"sha": "565323b8f489b6237e436136ca1544fa7c87e684", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/565323b8f489b6237e436136ca1544fa7c87e684"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/770655a47f9577b15e499a76f87b903bbde93c3b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl0QF+sACgkQtAh+UQ6Y\nsWSHdw//fOGp7Uw9URa0YlWU0c5YUk6cT7iBh69uvi2Ekzz6T2D6g7maPaTtf1lw\nk3mp/d/vUW5brftfgbVc6tubFJi6PUDhzhjVdQYaokolZ7yAekJ33cCxMknHHp5Y\nF6NdapdoxGqk3A/lJxDn2t3mOX3EQFxGc+kAiM3y7Mx7fvqoJn3OL/rWxjqBw8ZJ\ngw/lBxFY7YOg9l1aYtOb2Jxg8l1Xf8Yn6NbL7/9AtC/EifZ6tnOsl/UzFqbNW7uo\nPYjjaVd6c0jHsr98TOoRwJUSgSAXwkqcLZpoKgmgg/i0pL8ShMmn9LOix/qLq/Qt\n0jFpryvJbk+n725NEeH0uG4Ys5y2EW4+dseSe81w5KeyVsVXcoR51zFzx/Nuqn5q\nIKGXIVt8ONlwpEzgXnfYfITto636w/j37bThOfrtoafxyNfKtiNsCprJL/7IgMkx\nVDM2ayeQVZhFqfXLud6EotLjiOO5t2ytUgZRr7IH1YTxXnQyaB8CHvD7Ueywd1PI\nleSBDYCJobS4u+GZrtheRhKwcUyLHlB+49R3kCOKTxgWMDTThptWiSJ0gKAmr1y0\nwEJVBFujeyPBBz5u6wRNNDiTsyRDLHSHqj+ExORKTjNl4zpKE5J5bHWHHdtIn1tp\n/BQQdLcOoUQta7X4MRPWzKZVb4/CSlsoePLHJx4s4go2zIq/XAI=\n=jaer\n-----END PGP SIGNATURE-----", "payload": "tree 565323b8f489b6237e436136ca1544fa7c87e684\nparent e3d8001f00380bcce64a79fae8c165d21cfc30ed\nauthor Aaron Hill <aa1ronham@gmail.com> 1561335722 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1561335787 -0400\n\nReplace Vec<Vec<_>> with Vec<_>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/770655a47f9577b15e499a76f87b903bbde93c3b", "html_url": "https://github.com/rust-lang/rust/commit/770655a47f9577b15e499a76f87b903bbde93c3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/770655a47f9577b15e499a76f87b903bbde93c3b/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3d8001f00380bcce64a79fae8c165d21cfc30ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3d8001f00380bcce64a79fae8c165d21cfc30ed", "html_url": "https://github.com/rust-lang/rust/commit/e3d8001f00380bcce64a79fae8c165d21cfc30ed"}], "stats": {"total": 29, "additions": 9, "deletions": 20}, "files": [{"sha": "114684b15240279badb11c6241fe448c607016e8", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/770655a47f9577b15e499a76f87b903bbde93c3b/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770655a47f9577b15e499a76f87b903bbde93c3b/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=770655a47f9577b15e499a76f87b903bbde93c3b", "patch": "@@ -376,15 +376,7 @@ struct RegionResolutionVisitor<'tcx> {\n     // up their indices.\n     pessimistic_yield: bool,\n     // Stores scopes when pessimistic_yield is true.\n-    // Each time we encounter an ExprKind::AssignOp, we push\n-    // a new Vec into the outermost Vec. This inner Vec is used\n-    // to store any scopes we encounter when visiting the inner expressions\n-    // of the AssignOp. Once we finish visiting the inner expressions, we pop\n-    // off the inner Vec, and process the Scopes it contains.\n-    // This allows us to handle nested AssignOps - while a terrible idea,\n-    // they are valid Rust, so we need to handle them.\n-    fixup_scopes: Vec<Vec<Scope>>,\n-\n+    fixup_scopes: Vec<Scope>,\n     // Generated scope tree:\n     scope_tree: ScopeTree,\n \n@@ -1020,29 +1012,28 @@ fn resolve_expr<'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>, expr: &'tcx h\n             let body = visitor.tcx.hir().body(body);\n             visitor.visit_body(body);\n         },\n-        hir::ExprKind::AssignOp(_, ref left_expression, ref right_expression) => {\n+        hir::ExprKind::AssignOp(_, ref left_expr, ref right_expr) => {\n             debug!(\"resolve_expr - enabling pessimistic_yield, was previously {}\",\n                    prev_pessimistic);\n \n-            visitor.fixup_scopes.push(vec![]);\n+            let start_point = visitor.fixup_scopes.len();\n             visitor.pessimistic_yield = true;\n \n             // If the actual execution order turns out to be right-to-left,\n             // then we're fine. However, if the actual execution order is left-to-right,\n             // then we'll assign too low a count to any `yield` expressions\n             // we encounter in 'right_expression' - they should really occur after all of the\n             // expressions in 'left_expression'.\n-            visitor.visit_expr(&right_expression);\n-\n+            visitor.visit_expr(&right_expr);\n             visitor.pessimistic_yield = prev_pessimistic;\n \n-            let target_scopes = visitor.fixup_scopes.pop().unwrap();\n             debug!(\"resolve_expr - restoring pessimistic_yield to {}\", prev_pessimistic);\n-\n-\n-            visitor.visit_expr(&left_expression);\n+            visitor.visit_expr(&left_expr);\n             debug!(\"resolve_expr - fixing up counts to {}\", visitor.expr_and_pat_count);\n \n+            // Remove and process any scopes pushed by the visitor\n+            let target_scopes = visitor.fixup_scopes.drain(start_point..);\n+\n             for scope in target_scopes {\n                 let mut yield_data = visitor.scope_tree.yield_in_scope.get_mut(&scope).unwrap();\n                 let count = yield_data.expr_and_pat_count;\n@@ -1083,7 +1074,7 @@ fn resolve_expr<'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>, expr: &'tcx h\n             visitor.scope_tree.yield_in_scope.insert(scope, data);\n             if visitor.pessimistic_yield {\n                 debug!(\"resolve_expr in pessimistic_yield - marking scope {:?} for fixup\", scope);\n-                visitor.fixup_scopes.last_mut().unwrap().push(scope);\n+                visitor.fixup_scopes.push(scope);\n             }\n \n             // Keep traversing up while we can."}, {"sha": "0bd078dace410bc6823b92d55614efe1bc374f49", "filename": "src/librustc_typeck/check/generator_interior.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/770655a47f9577b15e499a76f87b903bbde93c3b/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770655a47f9577b15e499a76f87b903bbde93c3b/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs?ref=770655a47f9577b15e499a76f87b903bbde93c3b", "patch": "@@ -34,8 +34,6 @@ impl<'a, 'tcx> InteriorVisitor<'a, 'tcx> {\n \n         let live_across_yield = scope.map(|s| {\n             self.region_scope_tree.yield_in_scope(s).and_then(|yield_data| {\n-\n-\n                 // If we are recording an expression that is the last yield\n                 // in the scope, or that has a postorder CFG index larger\n                 // than the one of all of the yields, then its value can't"}]}