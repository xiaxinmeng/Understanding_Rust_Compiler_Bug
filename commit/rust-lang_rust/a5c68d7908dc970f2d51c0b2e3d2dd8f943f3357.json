{"sha": "a5c68d7908dc970f2d51c0b2e3d2dd8f943f3357", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1YzY4ZDc5MDhkYzk3MGYyZDUxYzBiMmUzZDJkZDhmOTQzZjMzNTc=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-04-16T12:08:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-16T12:08:30Z"}, "message": "Rollup merge of #83337 - Manishearth:item-hide, r=GuillaumeGomez\n\nrustdoc: Hide item contents, not items\n\nThis tweaks rustdoc to hide item contents instead of items, and only when there are too many of them.\n\nThis means that users will _always_ see the type parameters, and will _often_ see fields/etc as long as they are small. Traits have some heuristics for hiding only the methods or only the methods and the consts, since the associated types are super important.\n\nI'm happy to play around with the heuristics here; we could potentially make it so that structs/enums/etc are always hidden but traits will try really hard to show type aliases.\n\nThis needs a test, but you can see it rendered at https://manishearth.net/sand/doc_render/bar/\n\n<details>\n\n<summary> Code example </summary>\n\n```rust\npub struct PubStruct {\n    pub a: usize,\n    pub b: usize,\n}\n\npub struct BigPubStruct {\n    pub a: usize,\n    pub b: usize,\n    pub c: usize,\n    pub d: usize,\n    pub e: usize,\n    pub f: usize,\n}\n\npub union BigUnion {\n    pub a: usize,\n    pub b: usize,\n    pub c: usize,\n    pub d: usize,\n    pub e: usize,\n    pub f: usize,\n}\n\npub union Union {\n    pub a: usize,\n    pub b: usize,\n    pub c: usize,\n}\n\npub struct PrivStruct {\n    a: usize,\n    b: usize,\n}\n\npub enum Enum {\n    A, B, C,\n    D {\n        a: u8,\n        b: u8\n    }\n}\n\npub enum LargeEnum {\n    A, B, C, D, E, F, G, H, I, J\n}\n\npub trait Trait {\n    type A;\n    #[must_use]\n    fn foo();\n    fn bar();\n}\n\npub trait GinormousTrait {\n    type A;\n    type B;\n    type C;\n    type D;\n    type E;\n    type F;\n    const N: usize = 1;\n    #[must_use]\n    fn foo();\n    fn bar();\n}\n\npub trait HugeTrait {\n    type A;\n    const M: usize = 1;\n    const N: usize = 1;\n    const O: usize = 1;\n    const P: usize = 1;\n    const Q: usize = 1;\n    #[must_use]\n    fn foo();\n    fn bar();\n}\n\npub trait BigTrait {\n    type A;\n    #[must_use]\n    fn foo();\n    fn bar();\n    fn baz();\n    fn quux();\n    fn frob();\n    fn greeble();\n}\n\n#[macro_export]\nmacro_rules! foo {\n    (a) => {a};\n}\n```\n\n</details>\n\nFixes https://github.com/rust-lang/rust/issues/82114", "tree": {"sha": "bf756c1a549dd1ab86d0627894c990f25e6a3bea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf756c1a549dd1ab86d0627894c990f25e6a3bea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5c68d7908dc970f2d51c0b2e3d2dd8f943f3357", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgeX4+CRBK7hj4Ov3rIwAA1NAIAHynHkC2rofTiKFAfLqKUrw5\nafa5VT98yKRHvmYx3M9PMOVabN0eIRgt69YhmBN4dbybhWhPa2bJpf/uXwIzphCx\nZMfQOe20pJ76wXvUBv7hol8C3CJIALVRD3UK1MM3rRtG3jG6Oxs25+Hhq5cWZfLY\nSkjjrA4Nj+TzPNM262txml10hR4Ek0ME/wW7j/Ys4j2tqNLrp9adDdKDWGLnKK8x\nWgx2vmmmHGPouV9zEgnU8rlVB/0OGg6q7MQT3FZWRHiTcjo31N5Gr/3ozXicyNiK\na7IFV41aWZdieaJ7MVNvYBePXGwbDfrsoQqotKpYsf5Qq5owyIqmehpGGXZdEW4=\n=E0a6\n-----END PGP SIGNATURE-----\n", "payload": "tree bf756c1a549dd1ab86d0627894c990f25e6a3bea\nparent d4bc912c4816a660b052dd7c8dffbc63fd4dffdf\nparent 55b29443db473d49c1c64d469da5f6a50dc6beb7\nauthor Dylan DPC <dylan.dpc@gmail.com> 1618574910 +0200\ncommitter GitHub <noreply@github.com> 1618574910 +0200\n\nRollup merge of #83337 - Manishearth:item-hide, r=GuillaumeGomez\n\nrustdoc: Hide item contents, not items\n\nThis tweaks rustdoc to hide item contents instead of items, and only when there are too many of them.\n\nThis means that users will _always_ see the type parameters, and will _often_ see fields/etc as long as they are small. Traits have some heuristics for hiding only the methods or only the methods and the consts, since the associated types are super important.\n\nI'm happy to play around with the heuristics here; we could potentially make it so that structs/enums/etc are always hidden but traits will try really hard to show type aliases.\n\nThis needs a test, but you can see it rendered at https://manishearth.net/sand/doc_render/bar/\n\n<details>\n\n<summary> Code example </summary>\n\n```rust\npub struct PubStruct {\n    pub a: usize,\n    pub b: usize,\n}\n\npub struct BigPubStruct {\n    pub a: usize,\n    pub b: usize,\n    pub c: usize,\n    pub d: usize,\n    pub e: usize,\n    pub f: usize,\n}\n\npub union BigUnion {\n    pub a: usize,\n    pub b: usize,\n    pub c: usize,\n    pub d: usize,\n    pub e: usize,\n    pub f: usize,\n}\n\npub union Union {\n    pub a: usize,\n    pub b: usize,\n    pub c: usize,\n}\n\npub struct PrivStruct {\n    a: usize,\n    b: usize,\n}\n\npub enum Enum {\n    A, B, C,\n    D {\n        a: u8,\n        b: u8\n    }\n}\n\npub enum LargeEnum {\n    A, B, C, D, E, F, G, H, I, J\n}\n\npub trait Trait {\n    type A;\n    #[must_use]\n    fn foo();\n    fn bar();\n}\n\npub trait GinormousTrait {\n    type A;\n    type B;\n    type C;\n    type D;\n    type E;\n    type F;\n    const N: usize = 1;\n    #[must_use]\n    fn foo();\n    fn bar();\n}\n\npub trait HugeTrait {\n    type A;\n    const M: usize = 1;\n    const N: usize = 1;\n    const O: usize = 1;\n    const P: usize = 1;\n    const Q: usize = 1;\n    #[must_use]\n    fn foo();\n    fn bar();\n}\n\npub trait BigTrait {\n    type A;\n    #[must_use]\n    fn foo();\n    fn bar();\n    fn baz();\n    fn quux();\n    fn frob();\n    fn greeble();\n}\n\n#[macro_export]\nmacro_rules! foo {\n    (a) => {a};\n}\n```\n\n</details>\n\nFixes https://github.com/rust-lang/rust/issues/82114\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5c68d7908dc970f2d51c0b2e3d2dd8f943f3357", "html_url": "https://github.com/rust-lang/rust/commit/a5c68d7908dc970f2d51c0b2e3d2dd8f943f3357", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5c68d7908dc970f2d51c0b2e3d2dd8f943f3357/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4bc912c4816a660b052dd7c8dffbc63fd4dffdf", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4bc912c4816a660b052dd7c8dffbc63fd4dffdf", "html_url": "https://github.com/rust-lang/rust/commit/d4bc912c4816a660b052dd7c8dffbc63fd4dffdf"}, {"sha": "55b29443db473d49c1c64d469da5f6a50dc6beb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/55b29443db473d49c1c64d469da5f6a50dc6beb7", "html_url": "https://github.com/rust-lang/rust/commit/55b29443db473d49c1c64d469da5f6a50dc6beb7"}], "stats": {"total": 501, "additions": 347, "deletions": 154}, "files": [{"sha": "9886b5ceeed391bc8ee6a5e5532908fa76cf76e4", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 26, "deletions": 38, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/a5c68d7908dc970f2d51c0b2e3d2dd8f943f3357/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c68d7908dc970f2d51c0b2e3d2dd8f943f3357/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=a5c68d7908dc970f2d51c0b2e3d2dd8f943f3357", "patch": "@@ -43,7 +43,6 @@ use std::path::PathBuf;\n use std::str;\n use std::string::ToString;\n \n-use itertools::Itertools;\n use rustc_ast_pretty::pprust;\n use rustc_attr::{Deprecation, StabilityLevel};\n use rustc_data_structures::fx::FxHashSet;\n@@ -486,18 +485,7 @@ fn settings(root_path: &str, suffix: &str, themes: &[StylePath]) -> Result<Strin\n             ],\n         )\n             .into(),\n-        (\n-            \"Auto-hide item declarations\",\n-            vec![\n-                (\"auto-hide-struct\", \"Auto-hide structs declaration\", true),\n-                (\"auto-hide-enum\", \"Auto-hide enums declaration\", false),\n-                (\"auto-hide-union\", \"Auto-hide unions declaration\", true),\n-                (\"auto-hide-trait\", \"Auto-hide traits declaration\", true),\n-                (\"auto-hide-macro\", \"Auto-hide macros declaration\", false),\n-            ],\n-        )\n-            .into(),\n-        (\"auto-hide-attributes\", \"Auto-hide item attributes.\", true).into(),\n+        (\"auto-hide-large-items\", \"Auto-hide item contents for large items.\", true).into(),\n         (\"auto-hide-method-docs\", \"Auto-hide item methods' documentation\", false).into(),\n         (\"auto-hide-trait-implementations\", \"Auto-hide trait implementation documentation\", true)\n             .into(),\n@@ -947,19 +935,21 @@ fn render_assoc_item(\n             + name.as_str().len()\n             + generics_len;\n \n-        let (indent, end_newline) = if parent == ItemType::Trait {\n+        let (indent, indent_str, end_newline) = if parent == ItemType::Trait {\n             header_len += 4;\n-            (4, false)\n+            let indent_str = \"    \";\n+            render_attributes_in_pre(w, meth, indent_str);\n+            (4, indent_str, false)\n         } else {\n-            (0, true)\n+            render_attributes_in_code(w, meth);\n+            (0, \"\", true)\n         };\n-        render_attributes(w, meth, false);\n         w.reserve(header_len + \"<a href=\\\"\\\" class=\\\"fnname\\\">{\".len() + \"</a>\".len());\n         write!(\n             w,\n             \"{}{}{}{}{}{}{}fn <a href=\\\"{href}\\\" class=\\\"fnname\\\">{name}</a>\\\n              {generics}{decl}{notable_traits}{where_clause}\",\n-            if parent == ItemType::Trait { \"    \" } else { \"\" },\n+            indent_str,\n             vis,\n             constness,\n             asyncness,\n@@ -1015,35 +1005,33 @@ const ALLOWED_ATTRIBUTES: &[Symbol] = &[\n     sym::non_exhaustive,\n ];\n \n-// The `top` parameter is used when generating the item declaration to ensure it doesn't have a\n-// left padding. For example:\n-//\n-// #[foo] <----- \"top\" attribute\n-// struct Foo {\n-//     #[bar] <---- not \"top\" attribute\n-//     bar: usize,\n-// }\n-fn render_attributes(w: &mut Buffer, it: &clean::Item, top: bool) {\n-    let attrs = it\n-        .attrs\n+fn attributes(it: &clean::Item) -> Vec<String> {\n+    it.attrs\n         .other_attrs\n         .iter()\n         .filter_map(|attr| {\n             if ALLOWED_ATTRIBUTES.contains(&attr.name_or_empty()) {\n-                Some(pprust::attribute_to_string(&attr))\n+                Some(pprust::attribute_to_string(&attr).replace(\"\\n\", \"\").replace(\"  \", \" \"))\n             } else {\n                 None\n             }\n         })\n-        .join(\"\\n\");\n+        .collect()\n+}\n \n-    if !attrs.is_empty() {\n-        write!(\n-            w,\n-            \"<span class=\\\"docblock attributes{}\\\">{}</span>\",\n-            if top { \" top-attr\" } else { \"\" },\n-            &attrs\n-        );\n+// When an attribute is rendered inside a `<pre>` tag, it is formatted using\n+// a whitespace prefix and newline.\n+fn render_attributes_in_pre(w: &mut Buffer, it: &clean::Item, prefix: &str) {\n+    for a in attributes(it) {\n+        write!(w, \"{}{}\\n\", prefix, a);\n+    }\n+}\n+\n+// When an attribute is rendered inside a <code> tag, it is formatted using\n+// a div to produce a newline after it.\n+fn render_attributes_in_code(w: &mut Buffer, it: &clean::Item) {\n+    for a in attributes(it) {\n+        write!(w, \"<div class=\\\"code-attribute\\\">{}</div>\", a);\n     }\n }\n "}, {"sha": "ff9e4d031da18dd5abcfc9240720a26ed0f302ae", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 83, "deletions": 16, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/a5c68d7908dc970f2d51c0b2e3d2dd8f943f3357/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c68d7908dc970f2d51c0b2e3d2dd8f943f3357/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=a5c68d7908dc970f2d51c0b2e3d2dd8f943f3357", "patch": "@@ -11,8 +11,8 @@ use rustc_span::symbol::{kw, sym, Symbol};\n \n use super::{\n     collect_paths_for_type, document, ensure_trailing_slash, item_ty_to_strs, notable_traits_decl,\n-    render_assoc_item, render_assoc_items, render_attributes, render_impl,\n-    render_stability_since_raw, write_srclink, AssocItemLink, Context,\n+    render_assoc_item, render_assoc_items, render_attributes_in_code, render_attributes_in_pre,\n+    render_impl, render_stability_since_raw, write_srclink, AssocItemLink, Context,\n };\n use crate::clean::{self, GetDefId};\n use crate::formats::cache::Cache;\n@@ -131,6 +131,26 @@ pub(super) fn print_item(cx: &Context<'_>, item: &clean::Item, buf: &mut Buffer)\n     }\n }\n \n+/// For large structs, enums, unions, etc, determine whether to hide their fields\n+fn should_hide_fields(n_fields: usize) -> bool {\n+    n_fields > 12\n+}\n+\n+fn toggle_open(w: &mut Buffer, text: &str) {\n+    write!(\n+        w,\n+        \"<details class=\\\"rustdoc-toggle type-contents-toggle\\\">\\\n+            <summary class=\\\"hideme\\\">\\\n+                <span>Show {}</span>\\\n+            </summary>\",\n+        text\n+    );\n+}\n+\n+fn toggle_close(w: &mut Buffer) {\n+    w.write_str(\"</details>\");\n+}\n+\n fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[clean::Item]) {\n     document(w, cx, item, None);\n \n@@ -377,7 +397,7 @@ fn item_function(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, f: &clean::\n     )\n     .len();\n     w.write_str(\"<pre class=\\\"rust fn\\\">\");\n-    render_attributes(w, it, false);\n+    render_attributes_in_pre(w, it, \"\");\n     write!(\n         w,\n         \"{vis}{constness}{asyncness}{unsafety}{abi}fn \\\n@@ -406,7 +426,7 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n     // Output the trait definition\n     wrap_into_docblock(w, |w| {\n         w.write_str(\"<pre class=\\\"rust trait\\\">\");\n-        render_attributes(w, it, true);\n+        render_attributes_in_pre(w, it, \"\");\n         write!(\n             w,\n             \"{}{}{}trait {}{}{}\",\n@@ -429,17 +449,36 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n         } else {\n             // FIXME: we should be using a derived_id for the Anchors here\n             w.write_str(\"{\\n\");\n+            let mut toggle = false;\n+\n+            // If there are too many associated types, hide _everything_\n+            if should_hide_fields(types.len()) {\n+                toggle = true;\n+                toggle_open(w, \"associated items\");\n+            }\n             for t in &types {\n                 render_assoc_item(w, t, AssocItemLink::Anchor(None), ItemType::Trait, cx);\n                 w.write_str(\";\\n\");\n             }\n+            // If there are too many associated constants, hide everything after them\n+            // We also do this if the types + consts is large because otherwise we could\n+            // render a bunch of types and _then_ a bunch of consts just because both were\n+            // _just_ under the limit\n+            if !toggle && should_hide_fields(types.len() + consts.len()) {\n+                toggle = true;\n+                toggle_open(w, \"associated constants and methods\");\n+            }\n             if !types.is_empty() && !consts.is_empty() {\n                 w.write_str(\"\\n\");\n             }\n             for t in &consts {\n                 render_assoc_item(w, t, AssocItemLink::Anchor(None), ItemType::Trait, cx);\n                 w.write_str(\";\\n\");\n             }\n+            if !toggle && should_hide_fields(required.len() + provided.len()) {\n+                toggle = true;\n+                toggle_open(w, \"methods\");\n+            }\n             if !consts.is_empty() && !required.is_empty() {\n                 w.write_str(\"\\n\");\n             }\n@@ -470,6 +509,9 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n                     w.write_str(\"<div class=\\\"item-spacer\\\"></div>\");\n                 }\n             }\n+            if toggle {\n+                toggle_close(w);\n+            }\n             w.write_str(\"}\");\n         }\n         w.write_str(\"</pre>\")\n@@ -693,7 +735,7 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n \n fn item_trait_alias(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::TraitAlias) {\n     w.write_str(\"<pre class=\\\"rust trait-alias\\\">\");\n-    render_attributes(w, it, false);\n+    render_attributes_in_pre(w, it, \"\");\n     write!(\n         w,\n         \"trait {}{}{} = {};</pre>\",\n@@ -714,7 +756,7 @@ fn item_trait_alias(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clea\n \n fn item_opaque_ty(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::OpaqueTy) {\n     w.write_str(\"<pre class=\\\"rust opaque\\\">\");\n-    render_attributes(w, it, false);\n+    render_attributes_in_pre(w, it, \"\");\n     write!(\n         w,\n         \"type {}{}{where_clause} = impl {bounds};</pre>\",\n@@ -735,7 +777,7 @@ fn item_opaque_ty(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean:\n \n fn item_typedef(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Typedef) {\n     w.write_str(\"<pre class=\\\"rust typedef\\\">\");\n-    render_attributes(w, it, false);\n+    render_attributes_in_pre(w, it, \"\");\n     write!(\n         w,\n         \"type {}{}{where_clause} = {type_};</pre>\",\n@@ -757,7 +799,7 @@ fn item_typedef(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::T\n fn item_union(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::Union) {\n     wrap_into_docblock(w, |w| {\n         w.write_str(\"<pre class=\\\"rust union\\\">\");\n-        render_attributes(w, it, true);\n+        render_attributes_in_pre(w, it, \"\");\n         render_union(w, it, Some(&s.generics), &s.fields, \"\", true, cx);\n         w.write_str(\"</pre>\")\n     });\n@@ -803,7 +845,7 @@ fn item_union(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::Uni\n fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum) {\n     wrap_into_docblock(w, |w| {\n         w.write_str(\"<pre class=\\\"rust enum\\\">\");\n-        render_attributes(w, it, true);\n+        render_attributes_in_pre(w, it, \"\");\n         write!(\n             w,\n             \"{}enum {}{}{}\",\n@@ -816,6 +858,10 @@ fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum\n             w.write_str(\" {}\");\n         } else {\n             w.write_str(\" {\\n\");\n+            let toggle = should_hide_fields(e.variants.len());\n+            if toggle {\n+                toggle_open(w, \"variants\");\n+            }\n             for v in &e.variants {\n                 w.write_str(\"    \");\n                 let name = v.name.as_ref().unwrap();\n@@ -844,6 +890,9 @@ fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum\n             if e.variants_stripped {\n                 w.write_str(\"    // some variants omitted\\n\");\n             }\n+            if toggle {\n+                toggle_close(w);\n+            }\n             w.write_str(\"}\");\n         }\n         w.write_str(\"</pre>\")\n@@ -976,7 +1025,7 @@ fn item_primitive(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item) {\n \n fn item_constant(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, c: &clean::Constant) {\n     w.write_str(\"<pre class=\\\"rust const\\\">\");\n-    render_attributes(w, it, false);\n+    render_attributes_in_code(w, it);\n \n     write!(\n         w,\n@@ -1015,7 +1064,7 @@ fn item_constant(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, c: &clean::\n fn item_struct(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::Struct) {\n     wrap_into_docblock(w, |w| {\n         w.write_str(\"<pre class=\\\"rust struct\\\">\");\n-        render_attributes(w, it, true);\n+        render_attributes_in_code(w, it);\n         render_struct(w, it, Some(&s.generics), s.struct_type, &s.fields, \"\", true, cx);\n         w.write_str(\"</pre>\")\n     });\n@@ -1064,7 +1113,7 @@ fn item_struct(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::St\n \n fn item_static(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::Static) {\n     w.write_str(\"<pre class=\\\"rust static\\\">\");\n-    render_attributes(w, it, false);\n+    render_attributes_in_code(w, it);\n     write!(\n         w,\n         \"{vis}static {mutability}{name}: {typ}</pre>\",\n@@ -1078,7 +1127,7 @@ fn item_static(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::St\n \n fn item_foreign_type(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item) {\n     w.write_str(\"<pre class=\\\"rust foreigntype\\\">extern {\\n\");\n-    render_attributes(w, it, false);\n+    render_attributes_in_code(w, it);\n     write!(\n         w,\n         \"    {}type {};\\n}}</pre>\",\n@@ -1171,7 +1220,7 @@ fn wrap_into_docblock<F>(w: &mut Buffer, f: F)\n where\n     F: FnOnce(&mut Buffer),\n {\n-    w.write_str(\"<div class=\\\"docblock type-decl hidden-by-usual-hider\\\">\");\n+    w.write_str(\"<div class=\\\"docblock type-decl\\\">\");\n     f(w);\n     w.write_str(\"</div>\")\n }\n@@ -1261,6 +1310,13 @@ fn render_union(\n     }\n \n     write!(w, \" {{\\n{}\", tab);\n+    let count_fields =\n+        fields.iter().filter(|f| matches!(*f.kind, clean::StructFieldItem(..))).count();\n+    let toggle = should_hide_fields(count_fields);\n+    if toggle {\n+        toggle_open(w, \"fields\");\n+    }\n+\n     for field in fields {\n         if let clean::StructFieldItem(ref ty) = *field.kind {\n             write!(\n@@ -1277,6 +1333,9 @@ fn render_union(\n     if it.has_stripped_fields().unwrap() {\n         write!(w, \"    // some fields omitted\\n{}\", tab);\n     }\n+    if toggle {\n+        toggle_close(w);\n+    }\n     w.write_str(\"}\");\n }\n \n@@ -1305,8 +1364,14 @@ fn render_struct(\n             if let Some(g) = g {\n                 write!(w, \"{}\", print_where_clause(g, cx.cache(), cx.tcx(), 0, true),)\n             }\n-            let mut has_visible_fields = false;\n             w.write_str(\" {\");\n+            let count_fields =\n+                fields.iter().filter(|f| matches!(*f.kind, clean::StructFieldItem(..))).count();\n+            let has_visible_fields = count_fields > 0;\n+            let toggle = should_hide_fields(count_fields);\n+            if toggle {\n+                toggle_open(w, \"fields\");\n+            }\n             for field in fields {\n                 if let clean::StructFieldItem(ref ty) = *field.kind {\n                     write!(\n@@ -1317,7 +1382,6 @@ fn render_struct(\n                         field.name.as_ref().unwrap(),\n                         ty.print(cx.cache(), cx.tcx()),\n                     );\n-                    has_visible_fields = true;\n                 }\n             }\n \n@@ -1331,6 +1395,9 @@ fn render_struct(\n                 // `{ /* fields omitted */ }` to save space.\n                 write!(w, \" /* fields omitted */ \");\n             }\n+            if toggle {\n+                toggle_close(w);\n+            }\n             w.write_str(\"}\");\n         }\n         CtorKind::Fn => {"}, {"sha": "d71cc15a4576f0cdb56f7496c1343a3ce3efe1f8", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 19, "deletions": 53, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/a5c68d7908dc970f2d51c0b2e3d2dd8f943f3357/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/a5c68d7908dc970f2d51c0b2e3d2dd8f943f3357/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=a5c68d7908dc970f2d51c0b2e3d2dd8f943f3357", "patch": "@@ -2316,6 +2316,9 @@ function hideThemeButtonState() {\n         if (hasClass(innerToggle, \"will-expand\")) {\n             updateLocalStorage(\"rustdoc-collapse\", \"false\");\n             removeClass(innerToggle, \"will-expand\");\n+            onEachLazy(document.getElementsByTagName(\"details\"), function(e) {\n+                e.open = true;\n+            });\n             onEveryMatchingChild(innerToggle, \"inner\", function(e) {\n                 e.innerHTML = labelForToggleButton(false);\n             });\n@@ -2328,6 +2331,9 @@ function hideThemeButtonState() {\n         } else {\n             updateLocalStorage(\"rustdoc-collapse\", \"true\");\n             addClass(innerToggle, \"will-expand\");\n+            onEachLazy(document.getElementsByTagName(\"details\"), function(e) {\n+                e.open = false;\n+            });\n             onEveryMatchingChild(innerToggle, \"inner\", function(e) {\n                 var parent = e.parentNode;\n                 var superParent = null;\n@@ -2569,6 +2575,7 @@ function hideThemeButtonState() {\n         var toggle = createSimpleToggle(false);\n         var hideMethodDocs = getSettingValue(\"auto-hide-method-docs\") === \"true\";\n         var hideImplementors = getSettingValue(\"auto-collapse-implementors\") !== \"false\";\n+        var hideLargeItemContents = getSettingValue(\"auto-hide-large-items\") !== \"false\";\n \n         var func = function(e) {\n             var next = e.nextElementSibling;\n@@ -2615,6 +2622,14 @@ function hideThemeButtonState() {\n         onEachLazy(document.getElementsByClassName(\"associatedconstant\"), func);\n         onEachLazy(document.getElementsByClassName(\"impl\"), funcImpl);\n         var impl_call = function() {};\n+        // Large items are hidden by default in the HTML. If the setting overrides that, show 'em.\n+        if (!hideLargeItemContents) {\n+            onEachLazy(document.getElementsByTagName(\"details\"), function (e) {\n+                if (hasClass(e, \"type-contents-toggle\")) {\n+                    e.open = true;\n+                }\n+            });\n+        }\n         if (hideMethodDocs === true) {\n             impl_call = function(e, newToggle) {\n                 if (e.id.match(/^impl(?:-\\d+)?$/) === null) {\n@@ -2683,18 +2698,7 @@ function hideThemeButtonState() {\n                 });\n             }\n         }\n-        var showItemDeclarations = getSettingValue(\"auto-hide-\" + className);\n-        if (showItemDeclarations === null) {\n-            if (className === \"enum\" || className === \"macro\") {\n-                showItemDeclarations = \"false\";\n-            } else if (className === \"struct\" || className === \"union\" || className === \"trait\") {\n-                showItemDeclarations = \"true\";\n-            } else {\n-                // In case we found an unknown type, we just use the \"parent\" value.\n-                showItemDeclarations = getSettingValue(\"auto-hide-declarations\");\n-            }\n-        }\n-        showItemDeclarations = showItemDeclarations === \"false\";\n+\n         function buildToggleWrapper(e) {\n             if (hasClass(e, \"autohide\")) {\n                 var wrap = e.previousElementSibling;\n@@ -2721,11 +2725,8 @@ function hideThemeButtonState() {\n                 var extraClass;\n \n                 if (hasClass(e, \"type-decl\")) {\n-                    fontSize = \"20px\";\n-                    otherMessage = \"&nbsp;Show&nbsp;declaration\";\n-                    if (showItemDeclarations === false) {\n-                        extraClass = \"collapsed\";\n-                    }\n+                    // We do something special for these\n+                    return;\n                 } else if (hasClass(e, \"sub-variant\")) {\n                     otherMessage = \"&nbsp;Show&nbsp;fields\";\n                 } else if (hasClass(e, \"non-exhaustive\")) {\n@@ -2750,11 +2751,8 @@ function hideThemeButtonState() {\n                         otherMessage,\n                         fontSize,\n                         extraClass,\n-                        hasClass(e, \"type-decl\") === false || showItemDeclarations === true),\n+                        true),\n                     e);\n-                if (hasClass(e, \"type-decl\") === true && showItemDeclarations === true) {\n-                    collapseDocs(e.previousSibling.childNodes[0], \"toggle\");\n-                }\n                 if (hasClass(e, \"non-exhaustive\") === true) {\n                     collapseDocs(e.previousSibling.childNodes[0], \"toggle\");\n                 }\n@@ -2772,38 +2770,6 @@ function hideThemeButtonState() {\n         }\n     }());\n \n-    function createToggleWrapper(tog) {\n-        var span = document.createElement(\"span\");\n-        span.className = \"toggle-label\";\n-        span.style.display = \"none\";\n-        span.innerHTML = \"&nbsp;Expand&nbsp;attributes\";\n-        tog.appendChild(span);\n-\n-        var wrapper = document.createElement(\"div\");\n-        wrapper.className = \"toggle-wrapper toggle-attributes\";\n-        wrapper.appendChild(tog);\n-        return wrapper;\n-    }\n-\n-    (function() {\n-        // To avoid checking on \"rustdoc-item-attributes\" value on every loop...\n-        var itemAttributesFunc = function() {};\n-        if (getSettingValue(\"auto-hide-attributes\") !== \"false\") {\n-            itemAttributesFunc = function(x) {\n-                collapseDocs(x.previousSibling.childNodes[0], \"toggle\");\n-            };\n-        }\n-        var attributesToggle = createToggleWrapper(createSimpleToggle(false));\n-        onEachLazy(main.getElementsByClassName(\"attributes\"), function(i_e) {\n-            var attr_tog = attributesToggle.cloneNode(true);\n-            if (hasClass(i_e, \"top-attr\") === true) {\n-                addClass(attr_tog, \"top-attr\");\n-            }\n-            i_e.parentNode.insertBefore(attr_tog, i_e);\n-            itemAttributesFunc(i_e);\n-        });\n-    }());\n-\n     (function() {\n         // To avoid checking on \"rustdoc-line-numbers\" value on every loop...\n         var lineNumbersFunc = function() {};"}, {"sha": "427564cd7794ae070d6f6039fc03f51cc3420534", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 47, "deletions": 35, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/a5c68d7908dc970f2d51c0b2e3d2dd8f943f3357/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/a5c68d7908dc970f2d51c0b2e3d2dd8f943f3357/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=a5c68d7908dc970f2d51c0b2e3d2dd8f943f3357", "patch": "@@ -1056,12 +1056,6 @@ h3 > .collapse-toggle, h4 > .collapse-toggle {\n \tmargin-top: 3px;\n }\n \n-.enum > .toggle-wrapper + .docblock, .struct > .toggle-wrapper + .docblock {\n-\tmargin-left: 30px;\n-\tmargin-bottom: 20px;\n-\tmargin-top: 5px;\n-}\n-\n .docblock > .section-header:first-child {\n \tmargin-left: 15px;\n \tmargin-top: 0;\n@@ -1071,30 +1065,10 @@ h3 > .collapse-toggle, h4 > .collapse-toggle {\n \tleft: -10px;\n }\n \n-.enum > .collapsed, .struct > .collapsed {\n-\tmargin-bottom: 25px;\n-}\n-\n #main > .variant, #main > .structfield {\n \tdisplay: block;\n }\n \n-.attributes {\n-\tdisplay: block;\n-\tmargin-top: 0px !important;\n-\tmargin-right: 0px;\n-\tmargin-bottom: 0px !important;\n-\tmargin-left: 30px;\n-}\n-.toggle-attributes.collapsed {\n-\tmargin-bottom: 0;\n-}\n-.impl-items > .toggle-attributes {\n-\tmargin-left: 20px;\n-}\n-.impl-items .attributes {\n-\tfont-weight: 500;\n-}\n \n :target > code {\n \topacity: 1;\n@@ -1781,16 +1755,54 @@ div.name.expand::before {\n \ttop: 2px;\n }\n \n-/* This part is to fix the \"Expand attributes\" part in the type declaration. */\n-.type-decl > pre > .toggle-wrapper.toggle-attributes.top-attr {\n-\tmargin-left: 0 !important;\n+/* The hideme class is used on summary tags that contain a span with\n+\tplaceholder text shown only when the toggle is closed. For instance,\n+\t\"Expand description\" or \"Show methods\". */\n+details.rustdoc-toggle > summary.hideme {\n+\tcursor: pointer;\n+}\n+\n+details.rustdoc-toggle > summary::-webkit-details-marker {\n+\tdisplay: none;\n+}\n+\n+details.rustdoc-toggle > summary.hideme > span {\n+\tmargin-left: 9px;\n }\n-.type-decl > pre > .docblock.attributes.top-attr {\n-\tmargin-left: 1.8em !important;\n+\n+details.rustdoc-toggle > summary::before {\n+\tcontent: \"[+]\";\n+\tfont-weight: 300;\n+\tfont-size: 0.8em;\n+\tletter-spacing: 1px;\n+}\n+\n+details.rustdoc-toggle > summary.hideme::before {\n+\tposition: relative;\n }\n-.type-decl > pre > .toggle-attributes {\n-\tmargin-left: 2.2em;\n+\n+details.rustdoc-toggle > summary:not(.hideme)::before {\n+\tfloat: left;\n }\n-.type-decl > pre > .docblock.attributes {\n-\tmargin-left: 4em;\n+\n+/* When a \"hideme\" summary is open and the \"Expand description\" or \"Show\n+\tmethods\" text is hidden, we want the [-] toggle that remains to not\n+\taffect the layout of the items to its right. To do that, we use\n+\tabsolute positioning. Note that we also set position: relative\n+\ton the parent <details> to make this work properly. */\n+details.rustdoc-toggle[open] > summary.hideme {\n+\tposition: absolute;\n+}\n+\n+details.rustdoc-toggle[open] {\n+\tposition: relative;\n+}\n+\n+details.rustdoc-toggle[open] > summary.hideme > span {\n+\tdisplay: none;\n+}\n+\n+details.rustdoc-toggle[open] > summary::before {\n+\tcontent: \"[\u2212]\";\n+\tdisplay: inline;\n }"}, {"sha": "2ed87fdedaec686616e46c3b6435bd5d3b63384d", "filename": "src/librustdoc/html/static/storage.js", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a5c68d7908dc970f2d51c0b2e3d2dd8f943f3357/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js", "raw_url": "https://github.com/rust-lang/rust/raw/a5c68d7908dc970f2d51c0b2e3d2dd8f943f3357/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js?ref=a5c68d7908dc970f2d51c0b2e3d2dd8f943f3357", "patch": "@@ -1,6 +1,5 @@\n // From rust:\n /* global resourcesSuffix */\n-\n var darkThemes = [\"dark\", \"ayu\"];\n window.currentTheme = document.getElementById(\"themeStyle\");\n window.mainTheme = document.getElementById(\"mainThemeStyle\");"}, {"sha": "5f6f3d66e57573de9d4900effef55ce76eae80cd", "filename": "src/librustdoc/html/static/themes/ayu.css", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a5c68d7908dc970f2d51c0b2e3d2dd8f943f3357/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/a5c68d7908dc970f2d51c0b2e3d2dd8f943f3357/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css?ref=a5c68d7908dc970f2d51c0b2e3d2dd8f943f3357", "patch": "@@ -224,7 +224,9 @@ a {\n \tcolor: #39AFD7;\n }\n \n-.collapse-toggle {\n+.collapse-toggle,\n+details.rustdoc-toggle > summary.hideme > span,\n+details.rustdoc-toggle > summary::before {\n \tcolor: #999;\n }\n "}, {"sha": "2ce6cf4cc45ca5aabe5a91a16a0f2c2e466955d7", "filename": "src/librustdoc/html/static/themes/dark.css", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a5c68d7908dc970f2d51c0b2e3d2dd8f943f3357/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/a5c68d7908dc970f2d51c0b2e3d2dd8f943f3357/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css?ref=a5c68d7908dc970f2d51c0b2e3d2dd8f943f3357", "patch": "@@ -186,7 +186,9 @@ a.test-arrow {\n \tcolor: #dedede;\n }\n \n-.collapse-toggle {\n+.collapse-toggle,\n+details.rustdoc-toggle > summary.hideme > span,\n+details.rustdoc-toggle > summary::before {\n \tcolor: #999;\n }\n "}, {"sha": "31b3562cfcb064aa61b0afa5bd185b0abbe639e6", "filename": "src/librustdoc/html/static/themes/light.css", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a5c68d7908dc970f2d51c0b2e3d2dd8f943f3357/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/a5c68d7908dc970f2d51c0b2e3d2dd8f943f3357/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css?ref=a5c68d7908dc970f2d51c0b2e3d2dd8f943f3357", "patch": "@@ -184,7 +184,9 @@ a.test-arrow {\n \tcolor: #f5f5f5;\n }\n \n-.collapse-toggle {\n+.collapse-toggle,\n+details.rustdoc-toggle > summary.hideme > span,\n+details.rustdoc-toggle > summary::before {\n \tcolor: #999;\n }\n "}, {"sha": "51cd4a6cbfd12d6a7f9b7c21e19e3e394ab1145e", "filename": "src/test/rustdoc/attributes.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a5c68d7908dc970f2d51c0b2e3d2dd8f943f3357/src%2Ftest%2Frustdoc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c68d7908dc970f2d51c0b2e3d2dd8f943f3357/src%2Ftest%2Frustdoc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fattributes.rs?ref=a5c68d7908dc970f2d51c0b2e3d2dd8f943f3357", "patch": "@@ -1,21 +1,21 @@\n #![crate_name = \"foo\"]\n \n-// @has foo/fn.f.html '//*[@class=\"docblock attributes\"]' '#[no_mangle]'\n+// @has foo/fn.f.html '//*[@class=\"rust fn\"]' '#[no_mangle]'\n #[no_mangle]\n pub extern \"C\" fn f() {}\n \n-// @has foo/fn.g.html '//*[@class=\"docblock attributes\"]' '#[export_name = \"bar\"]'\n+// @has foo/fn.g.html '//*[@class=\"rust fn\"]' '#[export_name = \"bar\"]'\n #[export_name = \"bar\"]\n pub extern \"C\" fn g() {}\n \n-// @matches foo/enum.Foo.html '//*[@class=\"docblock attributes top-attr\"]' \\\n-//      '(?m)\\A#\\[repr\\(i64\\)\\]\\n#\\[must_use\\]\\Z'\n+// @matches foo/enum.Foo.html '//*[@class=\"rust enum\"]' \\\n+//      '#\\[repr\\(i64\\)\\]\\n#\\[must_use\\]'\n #[repr(i64)]\n #[must_use]\n pub enum Foo {\n     Bar,\n }\n \n-// @has foo/struct.Repr.html '//*[@class=\"docblock attributes top-attr\"]' '#[repr(C, align(8))]'\n+// @has foo/struct.Repr.html '//*[@class=\"docblock type-decl\"]' '#[repr(C, align(8))]'\n #[repr(C, align(8))]\n pub struct Repr;"}, {"sha": "616eef95662ef365c82afadef2857fa75dd00132", "filename": "src/test/rustdoc/item-hide-threshold.rs", "status": "added", "additions": 155, "deletions": 0, "changes": 155, "blob_url": "https://github.com/rust-lang/rust/blob/a5c68d7908dc970f2d51c0b2e3d2dd8f943f3357/src%2Ftest%2Frustdoc%2Fitem-hide-threshold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c68d7908dc970f2d51c0b2e3d2dd8f943f3357/src%2Ftest%2Frustdoc%2Fitem-hide-threshold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fitem-hide-threshold.rs?ref=a5c68d7908dc970f2d51c0b2e3d2dd8f943f3357", "patch": "@@ -0,0 +1,155 @@\n+#![allow(unused)]\n+\n+// @has 'item_hide_threshold/struct.PubStruct.html'\n+// @count - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 0\n+pub struct PubStruct {\n+    pub a: usize,\n+    pub b: usize,\n+}\n+\n+// @has 'item_hide_threshold/struct.BigPubStruct.html'\n+// @count - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 1\n+// @has - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 'Show fields'\n+pub struct BigPubStruct {\n+    pub a: usize,\n+    pub b: usize,\n+    pub c: usize,\n+    pub d: usize,\n+    pub e: usize,\n+    pub f: usize,\n+    pub g: usize,\n+    pub h: usize,\n+    pub i: usize,\n+    pub j: usize,\n+    pub k: usize,\n+    pub l: usize,\n+    pub m: usize,\n+}\n+\n+// @has 'item_hide_threshold/union.BigUnion.html'\n+// @count - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 1\n+// @has - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 'Show fields'\n+pub union BigUnion {\n+    pub a: usize,\n+    pub b: usize,\n+    pub c: usize,\n+    pub d: usize,\n+    pub e: usize,\n+    pub f: usize,\n+    pub g: usize,\n+    pub h: usize,\n+    pub i: usize,\n+    pub j: usize,\n+    pub k: usize,\n+    pub l: usize,\n+    pub m: usize,\n+}\n+\n+// @has 'item_hide_threshold/union.Union.html'\n+// @count - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 0\n+pub union Union {\n+    pub a: usize,\n+    pub b: usize,\n+    pub c: usize,\n+}\n+\n+// @has 'item_hide_threshold/struct.PrivStruct.html'\n+// @count - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 0\n+// @has - '//div[@class=\"docblock type-decl\"]' 'fields omitted'\n+pub struct PrivStruct {\n+    a: usize,\n+    b: usize,\n+}\n+\n+// @has 'item_hide_threshold/enum.Enum.html'\n+// @count - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 0\n+pub enum Enum {\n+    A, B, C,\n+    D {\n+        a: u8,\n+        b: u8\n+    }\n+}\n+\n+// @has 'item_hide_threshold/enum.LargeEnum.html'\n+// @count - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 1\n+// @has - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 'Show variants'\n+pub enum LargeEnum {\n+    A, B, C, D, E, F(u8), G, H, I, J, K, L, M\n+}\n+\n+// @has 'item_hide_threshold/trait.Trait.html'\n+// @count - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 0\n+pub trait Trait {\n+    type A;\n+    #[must_use]\n+    fn foo();\n+    fn bar();\n+}\n+\n+// @has 'item_hide_threshold/trait.GinormousTrait.html'\n+// @count - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 1\n+// @has - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 'Show associated items'\n+pub trait GinormousTrait {\n+    type A;\n+    type B;\n+    type C;\n+    type D;\n+    type E;\n+    type F;\n+    type G;\n+    type H;\n+    type I;\n+    type J;\n+    type K;\n+    type L;\n+    type M;\n+    const N: usize = 1;\n+    #[must_use]\n+    fn foo();\n+    fn bar();\n+}\n+\n+// @has 'item_hide_threshold/trait.HugeTrait.html'\n+// @count - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 1\n+// @has - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 'Show associated constants and methods'\n+pub trait HugeTrait {\n+    type A;\n+    const M: usize = 1;\n+    const N: usize = 1;\n+    const O: usize = 1;\n+    const P: usize = 1;\n+    const Q: usize = 1;\n+    const R: usize = 1;\n+    const S: usize = 1;\n+    const T: usize = 1;\n+    const U: usize = 1;\n+    const V: usize = 1;\n+    const W: usize = 1;\n+    const X: usize = 1;\n+    #[must_use]\n+    fn foo();\n+    fn bar();\n+}\n+\n+// @has 'item_hide_threshold/trait.BigTrait.html'\n+// @count - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 1\n+// @has - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 'Show methods'\n+pub trait BigTrait {\n+    type A;\n+    #[must_use]\n+    fn foo();\n+    fn bar();\n+    fn baz();\n+    fn quux();\n+    fn frob();\n+    fn greeble();\n+    fn blap();\n+    fn whoop();\n+    fn pow();\n+    fn bang();\n+    fn oomph();\n+    fn argh();\n+    fn wap();\n+    fn ouch();\n+}"}, {"sha": "2bb24a82193feef3f87a96678743c3e6f701f49f", "filename": "src/test/rustdoc/trait-attributes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a5c68d7908dc970f2d51c0b2e3d2dd8f943f3357/src%2Ftest%2Frustdoc%2Ftrait-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c68d7908dc970f2d51c0b2e3d2dd8f943f3357/src%2Ftest%2Frustdoc%2Ftrait-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftrait-attributes.rs?ref=a5c68d7908dc970f2d51c0b2e3d2dd8f943f3357", "patch": "@@ -2,7 +2,7 @@\n \n \n pub trait Foo {\n-    // @has foo/trait.Foo.html '//h3[@id=\"tymethod.foo\"]//span[@class=\"docblock attributes\"]' '#[must_use]'\n+    // @has foo/trait.Foo.html '//h3[@id=\"tymethod.foo\"]//div[@class=\"code-attribute\"]' '#[must_use]'\n     #[must_use]\n     fn foo();\n }\n@@ -11,11 +11,11 @@ pub trait Foo {\n pub struct Bar;\n \n impl Bar {\n-    // @has foo/struct.Bar.html '//h4[@id=\"method.bar\"]//span[@class=\"docblock attributes\"]' '#[must_use]'\n+    // @has foo/struct.Bar.html '//h4[@id=\"method.bar\"]//div[@class=\"code-attribute\"]' '#[must_use]'\n     #[must_use]\n     pub fn bar() {}\n \n-    // @has foo/struct.Bar.html '//h4[@id=\"method.bar2\"]//span[@class=\"docblock attributes\"]' '#[must_use]'\n+    // @has foo/struct.Bar.html '//h4[@id=\"method.bar2\"]//div[@class=\"code-attribute\"]' '#[must_use]'\n     #[must_use]\n     pub fn bar2() {}\n }"}]}