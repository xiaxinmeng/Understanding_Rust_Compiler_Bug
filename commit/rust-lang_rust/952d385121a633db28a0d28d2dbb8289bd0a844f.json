{"sha": "952d385121a633db28a0d28d2dbb8289bd0a844f", "node_id": "C_kwDOAAsO6NoAKDk1MmQzODUxMjFhNjMzZGIyOGEwZDI4ZDJkYmI4Mjg5YmQwYTg0NGY", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2022-11-22T06:26:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-22T06:26:08Z"}, "message": "Rollup merge of #104622 - nicholasbishop:bishop-uefi-clang, r=Mark-Simulacrum\n\nUse clang for the UEFI targets\n\nThis fixes an issue where the C and asm sources built by compiler_builtins were being compiled as ELF objects instead of PE objects. This wasn't noticed before because it doesn't cause compiler_builtins or rustc to fail to build. You only see a failure when a program is built that references one of the symbols in an ELF object.\n\nCompiling with clang fixes this because the cc crate converts the UEFI targets into Windows targets that clang understands, causing it to produce PE objects.\n\nAlso update compiler_builtins to 0.1.84 to pull in some necessary fixes for compiling the UEFI targets with clang.\n\nFixes https://github.com/rust-lang/rust/issues/104326", "tree": {"sha": "ec9a2cb182d7767fd66587a44e6b35b0c279dc69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec9a2cb182d7767fd66587a44e6b35b0c279dc69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/952d385121a633db28a0d28d2dbb8289bd0a844f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjfGuACRBK7hj4Ov3rIwAAnD8IAETJ18UvkIq8/Vtiz1wSv+FE\nXODCt06+LhmsPIGG+meG47IvSYnpki4WJN3yeMNqaBAU+eqVKzRBxEaCt2ijRJWI\nkmhSV/a/eIpsB3/hZSans17TFJUvcjP0xomVeiGK3u5aSufuI19uBIjYT9GEhR/6\n1yCoaZ7SfnpD4S7rrWKJ/x4gCZfOuZ+Ao0ithiMfyPGDpkCQUu/N/N37PqRIMyxx\nqa+N31nEKeqWVXw0lLgQRsusl3vByuzdWrLkdbanBxFYnvXSWia9ilKofPaKLuZo\na4NKunH3oXlq1s6vDzMv7Q0Ns+RiN4Y9fi7sjIjbCmiNXoYJYhRBYM5Po7BuPrA=\n=w5Hc\n-----END PGP SIGNATURE-----\n", "payload": "tree ec9a2cb182d7767fd66587a44e6b35b0c279dc69\nparent 3683c43a0577df9d4197b619ae788b5f4ea5d1f2\nparent 60546088bcfa9ce210a5b0f92079f7642f3b466b\nauthor Manish Goregaokar <manishsmail@gmail.com> 1669098368 -0500\ncommitter GitHub <noreply@github.com> 1669098368 -0500\n\nRollup merge of #104622 - nicholasbishop:bishop-uefi-clang, r=Mark-Simulacrum\n\nUse clang for the UEFI targets\n\nThis fixes an issue where the C and asm sources built by compiler_builtins were being compiled as ELF objects instead of PE objects. This wasn't noticed before because it doesn't cause compiler_builtins or rustc to fail to build. You only see a failure when a program is built that references one of the symbols in an ELF object.\n\nCompiling with clang fixes this because the cc crate converts the UEFI targets into Windows targets that clang understands, causing it to produce PE objects.\n\nAlso update compiler_builtins to 0.1.84 to pull in some necessary fixes for compiling the UEFI targets with clang.\n\nFixes https://github.com/rust-lang/rust/issues/104326\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/952d385121a633db28a0d28d2dbb8289bd0a844f", "html_url": "https://github.com/rust-lang/rust/commit/952d385121a633db28a0d28d2dbb8289bd0a844f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/952d385121a633db28a0d28d2dbb8289bd0a844f/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3683c43a0577df9d4197b619ae788b5f4ea5d1f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/3683c43a0577df9d4197b619ae788b5f4ea5d1f2", "html_url": "https://github.com/rust-lang/rust/commit/3683c43a0577df9d4197b619ae788b5f4ea5d1f2"}, {"sha": "60546088bcfa9ce210a5b0f92079f7642f3b466b", "url": "https://api.github.com/repos/rust-lang/rust/commits/60546088bcfa9ce210a5b0f92079f7642f3b466b", "html_url": "https://github.com/rust-lang/rust/commit/60546088bcfa9ce210a5b0f92079f7642f3b466b"}], "stats": {"total": 64, "additions": 61, "deletions": 3}, "files": [{"sha": "95e1787980a170fb3b983059b0506bb9b63b6e99", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/952d385121a633db28a0d28d2dbb8289bd0a844f/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/952d385121a633db28a0d28d2dbb8289bd0a844f/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=952d385121a633db28a0d28d2dbb8289bd0a844f", "patch": "@@ -789,9 +789,9 @@ dependencies = [\n \n [[package]]\n name = \"compiler_builtins\"\n-version = \"0.1.82\"\n+version = \"0.1.84\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"18cd7635fea7bb481ea543b392789844c1ad581299da70184c7175ce3af76603\"\n+checksum = \"989b2c1ca6e90ad06fdc69d1d1862fa28d27a977be6d92ae2fa762cf61fe0b10\"\n dependencies = [\n  \"cc\",\n  \"rustc-std-workspace-core\","}, {"sha": "0cd778a0cbb1d07074f7f56ba31da405c278f73c", "filename": "src/bootstrap/Cargo.lock", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/952d385121a633db28a0d28d2dbb8289bd0a844f/src%2Fbootstrap%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/952d385121a633db28a0d28d2dbb8289bd0a844f/src%2Fbootstrap%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.lock?ref=952d385121a633db28a0d28d2dbb8289bd0a844f", "patch": "@@ -53,6 +53,7 @@ dependencies = [\n  \"hex\",\n  \"ignore\",\n  \"libc\",\n+ \"object\",\n  \"once_cell\",\n  \"opener\",\n  \"pretty_assertions\",\n@@ -400,6 +401,15 @@ dependencies = [\n  \"libc\",\n ]\n \n+[[package]]\n+name = \"object\"\n+version = \"0.29.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"21158b2c33aa6d4561f1c0a6ea283ca92bc54802a93b263e910746d679a7eb53\"\n+dependencies = [\n+ \"memchr\",\n+]\n+\n [[package]]\n name = \"once_cell\"\n version = \"1.12.0\""}, {"sha": "4c24c214d2c5416ee3b04b3d8d2de3dae86077b6", "filename": "src/bootstrap/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/952d385121a633db28a0d28d2dbb8289bd0a844f/src%2Fbootstrap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/952d385121a633db28a0d28d2dbb8289bd0a844f/src%2Fbootstrap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.toml?ref=952d385121a633db28a0d28d2dbb8289bd0a844f", "patch": "@@ -42,6 +42,7 @@ getopts = \"0.2.19\"\n cc = \"1.0.69\"\n libc = \"0.2\"\n hex = \"0.4\"\n+object = { version = \"0.29.0\", default-features = false, features = [\"archive\", \"coff\", \"read_core\", \"unaligned\"] }\n serde = { version = \"1.0.8\", features = [\"derive\"] }\n serde_json = \"1.0.2\"\n sha2 = \"0.10\""}, {"sha": "2fef7f65827dd65c90e43c4b2141b964a4943fef", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/952d385121a633db28a0d28d2dbb8289bd0a844f/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/952d385121a633db28a0d28d2dbb8289bd0a844f/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=952d385121a633db28a0d28d2dbb8289bd0a844f", "patch": "@@ -10,10 +10,14 @@\n \n use std::collections::HashSet;\n use std::env;\n+use std::ffi::OsStr;\n use std::fs;\n use std::path::{Path, PathBuf};\n use std::process::Command;\n \n+use object::read::archive::ArchiveFile;\n+use object::BinaryFormat;\n+\n use crate::builder::{Builder, Kind, RunConfig, ShouldRun, Step};\n use crate::cache::{Interned, INTERNER};\n use crate::channel;\n@@ -555,6 +559,39 @@ fn skip_host_target_lib(builder: &Builder<'_>, compiler: Compiler) -> bool {\n     }\n }\n \n+/// Check that all objects in rlibs for UEFI targets are COFF. This\n+/// ensures that the C compiler isn't producing ELF objects, which would\n+/// not link correctly with the COFF objects.\n+fn verify_uefi_rlib_format(builder: &Builder<'_>, target: TargetSelection, stamp: &Path) {\n+    if !target.ends_with(\"-uefi\") {\n+        return;\n+    }\n+\n+    for (path, _) in builder.read_stamp_file(stamp) {\n+        if path.extension() != Some(OsStr::new(\"rlib\")) {\n+            continue;\n+        }\n+\n+        let data = t!(fs::read(&path));\n+        let data = data.as_slice();\n+        let archive = t!(ArchiveFile::parse(data));\n+        for member in archive.members() {\n+            let member = t!(member);\n+            let member_data = t!(member.data(data));\n+\n+            let is_coff = match object::File::parse(member_data) {\n+                Ok(member_file) => member_file.format() == BinaryFormat::Coff,\n+                Err(_) => false,\n+            };\n+\n+            if !is_coff {\n+                let member_name = String::from_utf8_lossy(member.name());\n+                panic!(\"member {} in {} is not COFF\", member_name, path.display());\n+            }\n+        }\n+    }\n+}\n+\n /// Copy stamped files into an image's `target/lib` directory.\n fn copy_target_libs(builder: &Builder<'_>, target: TargetSelection, image: &Path, stamp: &Path) {\n     let dst = image.join(\"lib/rustlib\").join(target.triple).join(\"lib\");\n@@ -610,6 +647,7 @@ impl Step for Std {\n \n         let compiler_to_use = builder.compiler_for(compiler.stage, compiler.host, target);\n         let stamp = compile::libstd_stamp(builder, compiler_to_use, target);\n+        verify_uefi_rlib_format(builder, target, &stamp);\n         copy_target_libs(builder, target, &tarball.image_dir(), &stamp);\n \n         Some(tarball.generate())"}, {"sha": "93ef7dfcbf54906d2335e329f5e924e6db1fb699", "filename": "src/ci/docker/host-x86_64/dist-various-2/Dockerfile", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/952d385121a633db28a0d28d2dbb8289bd0a844f/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-2%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/952d385121a633db28a0d28d2dbb8289bd0a844f/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-2%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-2%2FDockerfile?ref=952d385121a633db28a0d28d2dbb8289bd0a844f", "patch": "@@ -61,6 +61,12 @@ ENV \\\n     AR_i686_unknown_freebsd=i686-unknown-freebsd12-ar \\\n     CC_i686_unknown_freebsd=i686-unknown-freebsd12-clang \\\n     CXX_i686_unknown_freebsd=i686-unknown-freebsd12-clang++ \\\n+    CC_aarch64_unknown_uefi=clang-11 \\\n+    CXX_aarch64_unknown_uefi=clang++-11 \\\n+    CC_i686_unknown_uefi=clang-11 \\\n+    CXX_i686_unknown_uefi=clang++-11 \\\n+    CC_x86_64_unknown_uefi=clang-11 \\\n+    CXX_x86_64_unknown_uefi=clang++-11 \\\n     CC=gcc-8 \\\n     CXX=g++-8\n "}, {"sha": "0bddffa3436f4320fe4058b9e1cf187fd3f57592", "filename": "src/ci/docker/host-x86_64/test-various/Dockerfile", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/952d385121a633db28a0d28d2dbb8289bd0a844f/src%2Fci%2Fdocker%2Fhost-x86_64%2Ftest-various%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/952d385121a633db28a0d28d2dbb8289bd0a844f/src%2Fci%2Fdocker%2Fhost-x86_64%2Ftest-various%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Ftest-various%2FDockerfile?ref=952d385121a633db28a0d28d2dbb8289bd0a844f", "patch": "@@ -1,6 +1,7 @@\n FROM ubuntu:20.04\n \n RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \\\n+  clang-11 \\\n   g++ \\\n   make \\\n   ninja-build \\\n@@ -67,7 +68,9 @@ ENV MUSL_TARGETS=x86_64-unknown-linux-musl \\\n ENV MUSL_SCRIPT python3 /checkout/x.py --stage 2 test --host='' --target $MUSL_TARGETS\n \n COPY host-x86_64/test-various/uefi_qemu_test /uefi_qemu_test\n-ENV UEFI_TARGETS=x86_64-unknown-uefi\n+ENV UEFI_TARGETS=x86_64-unknown-uefi \\\n+    CC_x86_64_unknown_uefi=clang-11 \\\n+    CXX_x86_64_unknown_uefi=clang++-11\n ENV UEFI_SCRIPT python3 /checkout/x.py --stage 2 build --host='' --target $UEFI_TARGETS && \\\n   python3 -u /uefi_qemu_test/run.py\n "}]}