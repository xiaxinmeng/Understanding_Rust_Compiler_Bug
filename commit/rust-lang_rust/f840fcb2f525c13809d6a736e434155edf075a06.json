{"sha": "f840fcb2f525c13809d6a736e434155edf075a06", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4NDBmY2IyZjUyNWMxMzgwOWQ2YTczNmU0MzQxNTVlZGYwNzVhMDY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-19T15:00:11Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-19T17:46:30Z"}, "message": "Simplify Arena to use a generic index", "tree": {"sha": "ce3eb047dd9fe9005750a3b1417d95b1aa8fe01e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce3eb047dd9fe9005750a3b1417d95b1aa8fe01e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f840fcb2f525c13809d6a736e434155edf075a06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f840fcb2f525c13809d6a736e434155edf075a06", "html_url": "https://github.com/rust-lang/rust/commit/f840fcb2f525c13809d6a736e434155edf075a06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f840fcb2f525c13809d6a736e434155edf075a06/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "988f1dda6bde576ec2457dd97a7525014609c771", "url": "https://api.github.com/repos/rust-lang/rust/commits/988f1dda6bde576ec2457dd97a7525014609c771", "html_url": "https://github.com/rust-lang/rust/commit/988f1dda6bde576ec2457dd97a7525014609c771"}], "stats": {"total": 360, "additions": 175, "deletions": 185}, "files": [{"sha": "ea98d54441a69e847bed0bf6a1dc38ca9f3322e9", "filename": "crates/ra_arena/src/lib.rs", "status": "modified", "additions": 63, "deletions": 38, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/f840fcb2f525c13809d6a736e434155edf075a06/crates%2Fra_arena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f840fcb2f525c13809d6a736e434155edf075a06/crates%2Fra_arena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_arena%2Fsrc%2Flib.rs?ref=f840fcb2f525c13809d6a736e434155edf075a06", "patch": "@@ -2,6 +2,7 @@\n \n use std::{\n     fmt,\n+    hash::{Hash, Hasher},\n     iter::FromIterator,\n     marker::PhantomData,\n     ops::{Index, IndexMut},\n@@ -36,86 +37,110 @@ impl fmt::Display for RawId {\n     }\n }\n \n-#[derive(Clone, PartialEq, Eq)]\n-pub struct Arena<ID, T> {\n-    data: Vec<T>,\n-    _ty: PhantomData<ID>,\n+pub struct Idx<T> {\n+    raw: RawId,\n+    _ty: PhantomData<fn() -> T>,\n }\n \n-impl<ID: ArenaId, T: fmt::Debug> fmt::Debug for Arena<ID, T> {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        fmt.debug_struct(\"Arena\").field(\"len\", &self.len()).field(\"data\", &self.data).finish()\n+impl<T> Clone for Idx<T> {\n+    fn clone(&self) -> Self {\n+        *self\n     }\n }\n+impl<T> Copy for Idx<T> {}\n \n-#[macro_export]\n-macro_rules! impl_arena_id {\n-    ($name:ident) => {\n-        impl $crate::ArenaId for $name {\n-            fn from_raw(raw: $crate::RawId) -> Self {\n-                $name(raw)\n-            }\n-            fn into_raw(self) -> $crate::RawId {\n-                self.0\n-            }\n+impl<T> PartialEq for Idx<T> {\n+    fn eq(&self, other: &Idx<T>) -> bool {\n+        self.raw == other.raw\n+    }\n+}\n+impl<T> Eq for Idx<T> {}\n+\n+impl<T> Hash for Idx<T> {\n+    fn hash<H: Hasher>(&self, state: &mut H) {\n+        self.raw.hash(state)\n+    }\n+}\n+\n+impl<T> fmt::Debug for Idx<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        let mut type_name = std::any::type_name::<T>();\n+        if let Some(idx) = type_name.rfind(':') {\n+            type_name = &type_name[idx + 1..]\n         }\n-    };\n+        write!(f, \"Idx::<{}>({})\", type_name, self.raw)\n+    }\n }\n \n-pub trait ArenaId {\n-    fn from_raw(raw: RawId) -> Self;\n-    fn into_raw(self) -> RawId;\n+impl<T> Idx<T> {\n+    pub fn from_raw(raw: RawId) -> Self {\n+        Idx { raw, _ty: PhantomData }\n+    }\n+    pub fn into_raw(self) -> RawId {\n+        self.raw\n+    }\n+}\n+\n+#[derive(Clone, PartialEq, Eq)]\n+pub struct Arena<T> {\n+    data: Vec<T>,\n }\n \n-impl<ID, T> Arena<ID, T> {\n-    pub const fn new() -> Arena<ID, T> {\n-        Arena { data: Vec::new(), _ty: PhantomData }\n+impl<T: fmt::Debug> fmt::Debug for Arena<T> {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+        fmt.debug_struct(\"Arena\").field(\"len\", &self.len()).field(\"data\", &self.data).finish()\n     }\n }\n \n-impl<ID: ArenaId, T> Arena<ID, T> {\n+impl<T> Arena<T> {\n+    pub const fn new() -> Arena<T> {\n+        Arena { data: Vec::new() }\n+    }\n+\n     pub fn len(&self) -> usize {\n         self.data.len()\n     }\n     pub fn is_empty(&self) -> bool {\n         self.data.is_empty()\n     }\n-    pub fn alloc(&mut self, value: T) -> ID {\n+    pub fn alloc(&mut self, value: T) -> Idx<T> {\n         let id = RawId(self.data.len() as u32);\n         self.data.push(value);\n-        ID::from_raw(id)\n+        Idx::from_raw(id)\n     }\n-    pub fn iter(&self) -> impl Iterator<Item = (ID, &T)> + ExactSizeIterator + DoubleEndedIterator {\n-        self.data.iter().enumerate().map(|(idx, value)| (ID::from_raw(RawId(idx as u32)), value))\n+    pub fn iter(\n+        &self,\n+    ) -> impl Iterator<Item = (Idx<T>, &T)> + ExactSizeIterator + DoubleEndedIterator {\n+        self.data.iter().enumerate().map(|(idx, value)| (Idx::from_raw(RawId(idx as u32)), value))\n     }\n }\n \n-impl<ID: ArenaId, T> Default for Arena<ID, T> {\n-    fn default() -> Arena<ID, T> {\n-        Arena { data: Vec::new(), _ty: PhantomData }\n+impl<T> Default for Arena<T> {\n+    fn default() -> Arena<T> {\n+        Arena { data: Vec::new() }\n     }\n }\n \n-impl<ID: ArenaId, T> Index<ID> for Arena<ID, T> {\n+impl<T> Index<Idx<T>> for Arena<T> {\n     type Output = T;\n-    fn index(&self, idx: ID) -> &T {\n+    fn index(&self, idx: Idx<T>) -> &T {\n         let idx = idx.into_raw().0 as usize;\n         &self.data[idx]\n     }\n }\n \n-impl<ID: ArenaId, T> IndexMut<ID> for Arena<ID, T> {\n-    fn index_mut(&mut self, idx: ID) -> &mut T {\n+impl<T> IndexMut<Idx<T>> for Arena<T> {\n+    fn index_mut(&mut self, idx: Idx<T>) -> &mut T {\n         let idx = idx.into_raw().0 as usize;\n         &mut self.data[idx]\n     }\n }\n \n-impl<ID: ArenaId, T> FromIterator<T> for Arena<ID, T> {\n+impl<T> FromIterator<T> for Arena<T> {\n     fn from_iter<I>(iter: I) -> Self\n     where\n         I: IntoIterator<Item = T>,\n     {\n-        Arena { data: Vec::from_iter(iter), _ty: PhantomData }\n+        Arena { data: Vec::from_iter(iter) }\n     }\n }"}, {"sha": "5e764113d299ea78a87af85b0b9e7e48c7a23fbf", "filename": "crates/ra_arena/src/map.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f840fcb2f525c13809d6a736e434155edf075a06/crates%2Fra_arena%2Fsrc%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f840fcb2f525c13809d6a736e434155edf075a06/crates%2Fra_arena%2Fsrc%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_arena%2Fsrc%2Fmap.rs?ref=f840fcb2f525c13809d6a736e434155edf075a06", "patch": "@@ -2,17 +2,17 @@\n \n use std::marker::PhantomData;\n \n-use super::ArenaId;\n+use crate::Idx;\n \n /// A map from arena IDs to some other type. Space requirement is O(highest ID).\n #[derive(Debug, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n-pub struct ArenaMap<ID, T> {\n-    v: Vec<Option<T>>,\n+pub struct ArenaMap<ID, V> {\n+    v: Vec<Option<V>>,\n     _ty: PhantomData<ID>,\n }\n \n-impl<ID: ArenaId, T> ArenaMap<ID, T> {\n-    pub fn insert(&mut self, id: ID, t: T) {\n+impl<T, V> ArenaMap<Idx<T>, V> {\n+    pub fn insert(&mut self, id: Idx<T>, t: V) {\n         let idx = Self::to_idx(id);\n         if self.v.capacity() <= idx {\n             self.v.reserve(idx + 1 - self.v.capacity());\n@@ -25,43 +25,43 @@ impl<ID: ArenaId, T> ArenaMap<ID, T> {\n         self.v[idx] = Some(t);\n     }\n \n-    pub fn get(&self, id: ID) -> Option<&T> {\n+    pub fn get(&self, id: Idx<T>) -> Option<&V> {\n         self.v.get(Self::to_idx(id)).and_then(|it| it.as_ref())\n     }\n \n-    pub fn get_mut(&mut self, id: ID) -> Option<&mut T> {\n+    pub fn get_mut(&mut self, id: Idx<T>) -> Option<&mut V> {\n         self.v.get_mut(Self::to_idx(id)).and_then(|it| it.as_mut())\n     }\n \n-    pub fn values(&self) -> impl Iterator<Item = &T> {\n+    pub fn values(&self) -> impl Iterator<Item = &V> {\n         self.v.iter().filter_map(|o| o.as_ref())\n     }\n \n-    pub fn values_mut(&mut self) -> impl Iterator<Item = &mut T> {\n+    pub fn values_mut(&mut self) -> impl Iterator<Item = &mut V> {\n         self.v.iter_mut().filter_map(|o| o.as_mut())\n     }\n \n-    pub fn iter(&self) -> impl Iterator<Item = (ID, &T)> {\n+    pub fn iter(&self) -> impl Iterator<Item = (Idx<T>, &V)> {\n         self.v.iter().enumerate().filter_map(|(idx, o)| Some((Self::from_idx(idx), o.as_ref()?)))\n     }\n \n-    fn to_idx(id: ID) -> usize {\n+    fn to_idx(id: Idx<T>) -> usize {\n         u32::from(id.into_raw()) as usize\n     }\n \n-    fn from_idx(idx: usize) -> ID {\n-        ID::from_raw((idx as u32).into())\n+    fn from_idx(idx: usize) -> Idx<T> {\n+        Idx::from_raw((idx as u32).into())\n     }\n }\n \n-impl<ID: ArenaId, T> std::ops::Index<ID> for ArenaMap<ID, T> {\n+impl<T, V> std::ops::Index<Idx<V>> for ArenaMap<Idx<V>, T> {\n     type Output = T;\n-    fn index(&self, id: ID) -> &T {\n+    fn index(&self, id: Idx<V>) -> &T {\n         self.v[Self::to_idx(id)].as_ref().unwrap()\n     }\n }\n \n-impl<ID, T> Default for ArenaMap<ID, T> {\n+impl<T, V> Default for ArenaMap<Idx<V>, T> {\n     fn default() -> Self {\n         ArenaMap { v: Vec::new(), _ty: PhantomData }\n     }"}, {"sha": "de07fc952188cdcd8fed4d6c1f9de7fde89fd3af", "filename": "crates/ra_hir_def/src/adt.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f840fcb2f525c13809d6a736e434155edf075a06/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f840fcb2f525c13809d6a736e434155edf075a06/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fadt.rs?ref=f840fcb2f525c13809d6a736e434155edf075a06", "patch": "@@ -27,7 +27,7 @@ pub struct StructData {\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct EnumData {\n     pub name: Name,\n-    pub variants: Arena<LocalEnumVariantId, EnumVariantData>,\n+    pub variants: Arena<EnumVariantData>,\n }\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n@@ -38,8 +38,8 @@ pub struct EnumVariantData {\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n pub enum VariantData {\n-    Record(Arena<LocalStructFieldId, StructFieldData>),\n-    Tuple(Arena<LocalStructFieldId, StructFieldData>),\n+    Record(Arena<StructFieldData>),\n+    Tuple(Arena<StructFieldData>),\n     Unit,\n }\n \n@@ -104,7 +104,7 @@ impl HasChildSource for EnumId {\n \n fn lower_enum(\n     db: &dyn DefDatabase,\n-    trace: &mut Trace<LocalEnumVariantId, EnumVariantData, ast::EnumVariant>,\n+    trace: &mut Trace<EnumVariantData, ast::EnumVariant>,\n     ast: &InFile<ast::EnumDef>,\n ) {\n     for var in ast.value.variant_list().into_iter().flat_map(|it| it.variants()) {\n@@ -128,8 +128,8 @@ impl VariantData {\n         }\n     }\n \n-    pub fn fields(&self) -> &Arena<LocalStructFieldId, StructFieldData> {\n-        const EMPTY: &Arena<LocalStructFieldId, StructFieldData> = &Arena::new();\n+    pub fn fields(&self) -> &Arena<StructFieldData> {\n+        const EMPTY: &Arena<StructFieldData> = &Arena::new();\n         match &self {\n             VariantData::Record(fields) | VariantData::Tuple(fields) => fields,\n             _ => EMPTY,\n@@ -183,11 +183,7 @@ pub enum StructKind {\n \n fn lower_struct(\n     db: &dyn DefDatabase,\n-    trace: &mut Trace<\n-        LocalStructFieldId,\n-        StructFieldData,\n-        Either<ast::TupleFieldDef, ast::RecordFieldDef>,\n-    >,\n+    trace: &mut Trace<StructFieldData, Either<ast::TupleFieldDef, ast::RecordFieldDef>>,\n     ast: &InFile<ast::StructKind>,\n ) -> StructKind {\n     match &ast.value {"}, {"sha": "27a297e8bd67d193104914812635e4df44f3b3d2", "filename": "crates/ra_hir_def/src/body.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f840fcb2f525c13809d6a736e434155edf075a06/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f840fcb2f525c13809d6a736e434155edf075a06/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody.rs?ref=f840fcb2f525c13809d6a736e434155edf075a06", "patch": "@@ -121,8 +121,8 @@ pub(crate) struct Mark {\n /// The body of an item (function, const etc.).\n #[derive(Debug, Eq, PartialEq)]\n pub struct Body {\n-    pub exprs: Arena<ExprId, Expr>,\n-    pub pats: Arena<PatId, Pat>,\n+    pub exprs: Arena<Expr>,\n+    pub pats: Arena<Pat>,\n     /// The patterns for the function's parameters. While the parameter types are\n     /// part of the function signature, the patterns are not (they don't change\n     /// the external type of the function)."}, {"sha": "e8c58ed321e30a4458df2f2389b2a699a8676557", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f840fcb2f525c13809d6a736e434155edf075a06/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f840fcb2f525c13809d6a736e434155edf075a06/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=f840fcb2f525c13809d6a736e434155edf075a06", "patch": "@@ -24,8 +24,8 @@ use crate::{\n     builtin_type::{BuiltinFloat, BuiltinInt},\n     db::DefDatabase,\n     expr::{\n-        ArithOp, Array, BinaryOp, BindingAnnotation, CmpOp, Expr, ExprId, Literal, LogicOp,\n-        MatchArm, Ordering, Pat, PatId, RecordFieldPat, RecordLitField, Statement,\n+        dummy_expr_id, ArithOp, Array, BinaryOp, BindingAnnotation, CmpOp, Expr, ExprId, Literal,\n+        LogicOp, MatchArm, Ordering, Pat, PatId, RecordFieldPat, RecordLitField, Statement,\n     },\n     item_scope::BuiltinShadowMode,\n     path::GenericArgs,\n@@ -51,7 +51,7 @@ pub(super) fn lower(\n             exprs: Arena::default(),\n             pats: Arena::default(),\n             params: Vec::new(),\n-            body_expr: ExprId::dummy(),\n+            body_expr: dummy_expr_id(),\n             item_scope: Default::default(),\n         },\n     }"}, {"sha": "4d489f69204ecb987ea428ad5e91b92f8a5f3abe", "filename": "crates/ra_hir_def/src/body/scope.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f840fcb2f525c13809d6a736e434155edf075a06/crates%2Fra_hir_def%2Fsrc%2Fbody%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f840fcb2f525c13809d6a736e434155edf075a06/crates%2Fra_hir_def%2Fsrc%2Fbody%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Fscope.rs?ref=f840fcb2f525c13809d6a736e434155edf075a06", "patch": "@@ -2,7 +2,7 @@\n use std::sync::Arc;\n \n use hir_expand::name::Name;\n-use ra_arena::{impl_arena_id, Arena, RawId};\n+use ra_arena::{Arena, Idx};\n use rustc_hash::FxHashMap;\n \n use crate::{\n@@ -12,13 +12,11 @@ use crate::{\n     DefWithBodyId,\n };\n \n-#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n-pub struct ScopeId(RawId);\n-impl_arena_id!(ScopeId);\n+pub type ScopeId = Idx<ScopeData>;\n \n #[derive(Debug, PartialEq, Eq)]\n pub struct ExprScopes {\n-    scopes: Arena<ScopeId, ScopeData>,\n+    scopes: Arena<ScopeData>,\n     scope_by_expr: FxHashMap<ExprId, ScopeId>,\n }\n "}, {"sha": "197bbe9bd0ae4b2c1f981884871a2dd7c89c4359", "filename": "crates/ra_hir_def/src/expr.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f840fcb2f525c13809d6a736e434155edf075a06/crates%2Fra_hir_def%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f840fcb2f525c13809d6a736e434155edf075a06/crates%2Fra_hir_def%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fexpr.rs?ref=f840fcb2f525c13809d6a736e434155edf075a06", "patch": "@@ -13,7 +13,7 @@\n //! See also a neighboring `body` module.\n \n use hir_expand::name::Name;\n-use ra_arena::{impl_arena_id, RawId};\n+use ra_arena::{Idx, RawId};\n use ra_syntax::ast::RangeOp;\n \n use crate::{\n@@ -22,19 +22,12 @@ use crate::{\n     type_ref::{Mutability, TypeRef},\n };\n \n-#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n-pub struct ExprId(RawId);\n-impl_arena_id!(ExprId);\n-\n-impl ExprId {\n-    pub fn dummy() -> ExprId {\n-        ExprId((!0).into())\n-    }\n+pub type ExprId = Idx<Expr>;\n+pub(crate) fn dummy_expr_id() -> ExprId {\n+    ExprId::from_raw(RawId::from(!0))\n }\n \n-#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n-pub struct PatId(RawId);\n-impl_arena_id!(PatId);\n+pub type PatId = Idx<Pat>;\n \n #[derive(Debug, Clone, Eq, PartialEq)]\n pub enum Literal {"}, {"sha": "b687ce2b22118b9b4a9f75ea577f3f808da0de5c", "filename": "crates/ra_hir_def/src/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f840fcb2f525c13809d6a736e434155edf075a06/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f840fcb2f525c13809d6a736e434155edf075a06/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs?ref=f840fcb2f525c13809d6a736e434155edf075a06", "patch": "@@ -43,7 +43,7 @@ pub enum TypeParamProvenance {\n /// Data about the generic parameters of a function, struct, impl, etc.\n #[derive(Clone, PartialEq, Eq, Debug)]\n pub struct GenericParams {\n-    pub types: Arena<LocalTypeParamId, TypeParamData>,\n+    pub types: Arena<TypeParamData>,\n     // lifetimes: Arena<LocalLifetimeParamId, LifetimeParamData>,\n     pub where_predicates: Vec<WherePredicate>,\n }"}, {"sha": "516dd773ed2d8782bd653af9e6a82c97b002b042", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f840fcb2f525c13809d6a736e434155edf075a06/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f840fcb2f525c13809d6a736e434155edf075a06/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=f840fcb2f525c13809d6a736e434155edf075a06", "patch": "@@ -50,7 +50,7 @@ use hir_expand::{\n     ast_id_map::FileAstId, eager::expand_eager_macro, hygiene::Hygiene, AstId, HirFileId, InFile,\n     MacroCallId, MacroCallKind, MacroDefId, MacroDefKind,\n };\n-use ra_arena::{impl_arena_id, RawId};\n+use ra_arena::Idx;\n use ra_db::{impl_intern_key, salsa, CrateId};\n use ra_syntax::{ast, AstNode};\n \n@@ -64,9 +64,7 @@ pub struct ModuleId {\n }\n \n /// An ID of a module, **local** to a specific crate\n-#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n-pub struct LocalModuleId(RawId);\n-impl_arena_id!(LocalModuleId);\n+pub type LocalModuleId = Idx<nameres::ModuleData>;\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ItemLoc<N: AstNode> {\n@@ -127,19 +125,15 @@ pub struct EnumVariantId {\n     pub local_id: LocalEnumVariantId,\n }\n \n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct LocalEnumVariantId(RawId);\n-impl_arena_id!(LocalEnumVariantId);\n+pub type LocalEnumVariantId = Idx<adt::EnumVariantData>;\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct StructFieldId {\n     pub parent: VariantId,\n     pub local_id: LocalStructFieldId,\n }\n \n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct LocalStructFieldId(RawId);\n-impl_arena_id!(LocalStructFieldId);\n+pub type LocalStructFieldId = Idx<adt::StructFieldData>;\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct ConstId(salsa::InternId);\n@@ -172,9 +166,7 @@ pub struct TypeParamId {\n     pub local_id: LocalTypeParamId,\n }\n \n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct LocalTypeParamId(RawId);\n-impl_arena_id!(LocalTypeParamId);\n+pub type LocalTypeParamId = Idx<generics::TypeParamData>;\n \n macro_rules! impl_froms {\n     ($e:ident: $($v:ident $(($($sv:ident),*))?),*) => {"}, {"sha": "40bdc34f566afe908a3cc993f7c9065ff67bf41c", "filename": "crates/ra_hir_def/src/nameres.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f840fcb2f525c13809d6a736e434155edf075a06/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f840fcb2f525c13809d6a736e434155edf075a06/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs?ref=f840fcb2f525c13809d6a736e434155edf075a06", "patch": "@@ -77,7 +77,7 @@ use crate::{\n #[derive(Debug, PartialEq, Eq)]\n pub struct CrateDefMap {\n     pub root: LocalModuleId,\n-    pub modules: Arena<LocalModuleId, ModuleData>,\n+    pub modules: Arena<ModuleData>,\n     pub(crate) krate: CrateId,\n     /// The prelude module for this crate. This either comes from an import\n     /// marked with the `prelude_import` attribute, or (in the normal case) from\n@@ -187,7 +187,7 @@ impl CrateDefMap {\n         });\n         let def_map = {\n             let edition = db.crate_graph()[krate].edition;\n-            let mut modules: Arena<LocalModuleId, ModuleData> = Arena::default();\n+            let mut modules: Arena<ModuleData> = Arena::default();\n             let root = modules.alloc(ModuleData::default());\n             CrateDefMap {\n                 krate,"}, {"sha": "5b292c2502fbb4325e3e0182ded4915874220c31", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f840fcb2f525c13809d6a736e434155edf075a06/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f840fcb2f525c13809d6a736e434155edf075a06/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=f840fcb2f525c13809d6a736e434155edf075a06", "patch": "@@ -966,7 +966,7 @@ mod tests {\n \n         let def_map = {\n             let edition = db.crate_graph()[krate].edition;\n-            let mut modules: Arena<LocalModuleId, ModuleData> = Arena::default();\n+            let mut modules: Arena<ModuleData> = Arena::default();\n             let root = modules.alloc(ModuleData::default());\n             CrateDefMap {\n                 krate,"}, {"sha": "1631e87b87617c590f88ec67e68d4b7619c92374", "filename": "crates/ra_hir_def/src/nameres/raw.rs", "status": "modified", "additions": 43, "deletions": 45, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/f840fcb2f525c13809d6a736e434155edf075a06/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f840fcb2f525c13809d6a736e434155edf075a06/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs?ref=f840fcb2f525c13809d6a736e434155edf075a06", "patch": "@@ -12,7 +12,7 @@ use hir_expand::{\n     hygiene::Hygiene,\n     name::{AsName, Name},\n };\n-use ra_arena::{impl_arena_id, Arena, RawId};\n+use ra_arena::{Arena, Idx};\n use ra_prof::profile;\n use ra_syntax::{\n     ast::{self, AttrsOwner, NameOwner, VisibilityOwner},\n@@ -34,11 +34,11 @@ use crate::{\n /// on most edits.\n #[derive(Debug, Default, PartialEq, Eq)]\n pub struct RawItems {\n-    modules: Arena<Module, ModuleData>,\n-    imports: Arena<Import, ImportData>,\n-    defs: Arena<Def, DefData>,\n-    macros: Arena<Macro, MacroData>,\n-    impls: Arena<Impl, ImplData>,\n+    modules: Arena<ModuleData>,\n+    imports: Arena<ImportData>,\n+    defs: Arena<DefData>,\n+    macros: Arena<MacroData>,\n+    impls: Arena<ImplData>,\n     /// items for top-level module\n     items: Vec<RawItem>,\n }\n@@ -68,9 +68,9 @@ impl RawItems {\n     }\n }\n \n-impl Index<Module> for RawItems {\n+impl Index<Idx<ModuleData>> for RawItems {\n     type Output = ModuleData;\n-    fn index(&self, idx: Module) -> &ModuleData {\n+    fn index(&self, idx: Idx<ModuleData>) -> &ModuleData {\n         &self.modules[idx]\n     }\n }\n@@ -82,23 +82,23 @@ impl Index<Import> for RawItems {\n     }\n }\n \n-impl Index<Def> for RawItems {\n+impl Index<Idx<DefData>> for RawItems {\n     type Output = DefData;\n-    fn index(&self, idx: Def) -> &DefData {\n+    fn index(&self, idx: Idx<DefData>) -> &DefData {\n         &self.defs[idx]\n     }\n }\n \n-impl Index<Macro> for RawItems {\n+impl Index<Idx<MacroData>> for RawItems {\n     type Output = MacroData;\n-    fn index(&self, idx: Macro) -> &MacroData {\n+    fn index(&self, idx: Idx<MacroData>) -> &MacroData {\n         &self.macros[idx]\n     }\n }\n \n-impl Index<Impl> for RawItems {\n+impl Index<Idx<ImplData>> for RawItems {\n     type Output = ImplData;\n-    fn index(&self, idx: Impl) -> &ImplData {\n+    fn index(&self, idx: Idx<ImplData>) -> &ImplData {\n         &self.impls[idx]\n     }\n }\n@@ -111,17 +111,13 @@ pub(super) struct RawItem {\n \n #[derive(Debug, PartialEq, Eq, Clone, Copy)]\n pub(super) enum RawItemKind {\n-    Module(Module),\n+    Module(Idx<ModuleData>),\n     Import(Import),\n-    Def(Def),\n-    Macro(Macro),\n-    Impl(Impl),\n+    Def(Idx<DefData>),\n+    Macro(Idx<MacroData>),\n+    Impl(Idx<ImplData>),\n }\n \n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub(super) struct Module(RawId);\n-impl_arena_id!(Module);\n-\n #[derive(Debug, PartialEq, Eq)]\n pub(super) enum ModuleData {\n     Declaration {\n@@ -137,9 +133,7 @@ pub(super) enum ModuleData {\n     },\n }\n \n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub(crate) struct Import(RawId);\n-impl_arena_id!(Import);\n+pub(crate) type Import = Idx<ImportData>;\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct ImportData {\n@@ -152,9 +146,7 @@ pub struct ImportData {\n     pub(super) visibility: RawVisibility,\n }\n \n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub(super) struct Def(RawId);\n-impl_arena_id!(Def);\n+// type Def = Idx<DefData>;\n \n #[derive(Debug, PartialEq, Eq)]\n pub(super) struct DefData {\n@@ -190,10 +182,6 @@ impl DefKind {\n     }\n }\n \n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub(super) struct Macro(RawId);\n-impl_arena_id!(Macro);\n-\n #[derive(Debug, PartialEq, Eq)]\n pub(super) struct MacroData {\n     pub(super) ast_id: FileAstId<ast::MacroCall>,\n@@ -203,10 +191,6 @@ pub(super) struct MacroData {\n     pub(super) builtin: bool,\n }\n \n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub(super) struct Impl(RawId);\n-impl_arena_id!(Impl);\n-\n #[derive(Debug, PartialEq, Eq)]\n pub(super) struct ImplData {\n     pub(super) ast_id: FileAstId<ast::ImplDef>,\n@@ -220,7 +204,11 @@ struct RawItemsCollector {\n }\n \n impl RawItemsCollector {\n-    fn process_module(&mut self, current_module: Option<Module>, body: impl ast::ModuleItemOwner) {\n+    fn process_module(\n+        &mut self,\n+        current_module: Option<Idx<ModuleData>>,\n+        body: impl ast::ModuleItemOwner,\n+    ) {\n         for item_or_macro in body.items_with_macros() {\n             match item_or_macro {\n                 ast::ItemOrMacro::Macro(m) => self.add_macro(current_module, m),\n@@ -229,7 +217,7 @@ impl RawItemsCollector {\n         }\n     }\n \n-    fn add_item(&mut self, current_module: Option<Module>, item: ast::ModuleItem) {\n+    fn add_item(&mut self, current_module: Option<Idx<ModuleData>>, item: ast::ModuleItem) {\n         let attrs = self.parse_attrs(&item);\n         let visibility = RawVisibility::from_ast_with_hygiene(item.visibility(), &self.hygiene);\n         let (kind, name) = match item {\n@@ -285,7 +273,7 @@ impl RawItemsCollector {\n         }\n     }\n \n-    fn add_module(&mut self, current_module: Option<Module>, module: ast::Module) {\n+    fn add_module(&mut self, current_module: Option<Idx<ModuleData>>, module: ast::Module) {\n         let name = match module.name() {\n             Some(it) => it.as_name(),\n             None => return,\n@@ -315,7 +303,7 @@ impl RawItemsCollector {\n         tested_by!(name_res_works_for_broken_modules);\n     }\n \n-    fn add_use_item(&mut self, current_module: Option<Module>, use_item: ast::UseItem) {\n+    fn add_use_item(&mut self, current_module: Option<Idx<ModuleData>>, use_item: ast::UseItem) {\n         // FIXME: cfg_attr\n         let is_prelude = use_item.has_atom_attr(\"prelude_import\");\n         let attrs = self.parse_attrs(&use_item);\n@@ -345,7 +333,7 @@ impl RawItemsCollector {\n \n     fn add_extern_crate_item(\n         &mut self,\n-        current_module: Option<Module>,\n+        current_module: Option<Idx<ModuleData>>,\n         extern_crate: ast::ExternCrateItem,\n     ) {\n         if let Some(name_ref) = extern_crate.name_ref() {\n@@ -371,7 +359,7 @@ impl RawItemsCollector {\n         }\n     }\n \n-    fn add_macro(&mut self, current_module: Option<Module>, m: ast::MacroCall) {\n+    fn add_macro(&mut self, current_module: Option<Idx<ModuleData>>, m: ast::MacroCall) {\n         let attrs = self.parse_attrs(&m);\n         let path = match m.path().and_then(|path| ModPath::from_src(path, &self.hygiene)) {\n             Some(it) => it,\n@@ -391,19 +379,29 @@ impl RawItemsCollector {\n         self.push_item(current_module, attrs, RawItemKind::Macro(m));\n     }\n \n-    fn add_impl(&mut self, current_module: Option<Module>, imp: ast::ImplDef) {\n+    fn add_impl(&mut self, current_module: Option<Idx<ModuleData>>, imp: ast::ImplDef) {\n         let attrs = self.parse_attrs(&imp);\n         let ast_id = self.source_ast_id_map.ast_id(&imp);\n         let imp = self.raw_items.impls.alloc(ImplData { ast_id });\n         self.push_item(current_module, attrs, RawItemKind::Impl(imp))\n     }\n \n-    fn push_import(&mut self, current_module: Option<Module>, attrs: Attrs, data: ImportData) {\n+    fn push_import(\n+        &mut self,\n+        current_module: Option<Idx<ModuleData>>,\n+        attrs: Attrs,\n+        data: ImportData,\n+    ) {\n         let import = self.raw_items.imports.alloc(data);\n         self.push_item(current_module, attrs, RawItemKind::Import(import))\n     }\n \n-    fn push_item(&mut self, current_module: Option<Module>, attrs: Attrs, kind: RawItemKind) {\n+    fn push_item(\n+        &mut self,\n+        current_module: Option<Idx<ModuleData>>,\n+        attrs: Attrs,\n+        kind: RawItemKind,\n+    ) {\n         match current_module {\n             Some(module) => match &mut self.raw_items.modules[module] {\n                 ModuleData::Definition { items, .. } => items,"}, {"sha": "37fcdfb8cc1b7e70dd8a4560323406eae2535b14", "filename": "crates/ra_hir_def/src/nameres/tests/mod_resolution.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f840fcb2f525c13809d6a736e434155edf075a06/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fmod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f840fcb2f525c13809d6a736e434155edf075a06/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fmod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fmod_resolution.rs?ref=f840fcb2f525c13809d6a736e434155edf075a06", "patch": "@@ -710,9 +710,7 @@ fn unresolved_module_diagnostics() {\n         @r###\"\n     [\n         UnresolvedModule {\n-            module: LocalModuleId(\n-                0,\n-            ),\n+            module: Idx::<ModuleData>(0),\n             declaration: InFile {\n                 file_id: HirFileId(\n                     FileId(\n@@ -722,9 +720,7 @@ fn unresolved_module_diagnostics() {\n                     ),\n                 ),\n                 value: FileAstId {\n-                    raw: ErasedFileAstId(\n-                        1,\n-                    ),\n+                    raw: Idx::<SyntaxNodePtr>(1),\n                     _ty: PhantomData,\n                 },\n             },"}, {"sha": "ced07577dcfd39b25d86db4b545cb4b859eb70ca", "filename": "crates/ra_hir_def/src/trace.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f840fcb2f525c13809d6a736e434155edf075a06/crates%2Fra_hir_def%2Fsrc%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f840fcb2f525c13809d6a736e434155edf075a06/crates%2Fra_hir_def%2Fsrc%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ftrace.rs?ref=f840fcb2f525c13809d6a736e434155edf075a06", "patch": "@@ -9,28 +9,28 @@\n //! absolute offsets. The `Trace` structure (inspired, at least in name, by\n //! Kotlin's `BindingTrace`) allows use the same code to compute both\n //! projections.\n-use ra_arena::{map::ArenaMap, Arena, ArenaId, RawId};\n+use ra_arena::{map::ArenaMap, Arena, Idx, RawId};\n \n-pub(crate) struct Trace<ID: ArenaId, T, V> {\n-    arena: Option<Arena<ID, T>>,\n-    map: Option<ArenaMap<ID, V>>,\n+pub(crate) struct Trace<T, V> {\n+    arena: Option<Arena<T>>,\n+    map: Option<ArenaMap<Idx<T>, V>>,\n     len: u32,\n }\n \n-impl<ID: ra_arena::ArenaId + Copy, T, V> Trace<ID, T, V> {\n-    pub(crate) fn new_for_arena() -> Trace<ID, T, V> {\n+impl<T, V> Trace<T, V> {\n+    pub(crate) fn new_for_arena() -> Trace<T, V> {\n         Trace { arena: Some(Arena::default()), map: None, len: 0 }\n     }\n \n-    pub(crate) fn new_for_map() -> Trace<ID, T, V> {\n+    pub(crate) fn new_for_map() -> Trace<T, V> {\n         Trace { arena: None, map: Some(ArenaMap::default()), len: 0 }\n     }\n \n-    pub(crate) fn alloc(&mut self, value: impl FnOnce() -> V, data: impl FnOnce() -> T) -> ID {\n+    pub(crate) fn alloc(&mut self, value: impl FnOnce() -> V, data: impl FnOnce() -> T) -> Idx<T> {\n         let id = if let Some(arena) = &mut self.arena {\n             arena.alloc(data())\n         } else {\n-            let id = ID::from_raw(RawId::from(self.len));\n+            let id = Idx::<T>::from_raw(RawId::from(self.len));\n             self.len += 1;\n             id\n         };\n@@ -41,11 +41,11 @@ impl<ID: ra_arena::ArenaId + Copy, T, V> Trace<ID, T, V> {\n         id\n     }\n \n-    pub(crate) fn into_arena(mut self) -> Arena<ID, T> {\n+    pub(crate) fn into_arena(mut self) -> Arena<T> {\n         self.arena.take().unwrap()\n     }\n \n-    pub(crate) fn into_map(mut self) -> ArenaMap<ID, V> {\n+    pub(crate) fn into_map(mut self) -> ArenaMap<Idx<T>, V> {\n         self.map.take().unwrap()\n     }\n }"}, {"sha": "a6644d55fe226e0cb3ed9ea17bdc608538dd565b", "filename": "crates/ra_hir_expand/src/ast_id_map.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f840fcb2f525c13809d6a736e434155edf075a06/crates%2Fra_hir_expand%2Fsrc%2Fast_id_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f840fcb2f525c13809d6a736e434155edf075a06/crates%2Fra_hir_expand%2Fsrc%2Fast_id_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fast_id_map.rs?ref=f840fcb2f525c13809d6a736e434155edf075a06", "patch": "@@ -10,7 +10,7 @@ use std::{\n     marker::PhantomData,\n };\n \n-use ra_arena::{impl_arena_id, Arena, RawId};\n+use ra_arena::{Arena, Idx};\n use ra_syntax::{ast, AstNode, AstPtr, SyntaxNode, SyntaxNodePtr};\n \n /// `AstId` points to an AST node in a specific file.\n@@ -49,14 +49,12 @@ impl<N: AstNode> FileAstId<N> {\n     }\n }\n \n-#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n-struct ErasedFileAstId(RawId);\n-impl_arena_id!(ErasedFileAstId);\n+type ErasedFileAstId = Idx<SyntaxNodePtr>;\n \n /// Maps items' `SyntaxNode`s to `ErasedFileAstId`s and back.\n #[derive(Debug, PartialEq, Eq, Default)]\n pub struct AstIdMap {\n-    arena: Arena<ErasedFileAstId, SyntaxNodePtr>,\n+    arena: Arena<SyntaxNodePtr>,\n }\n \n impl AstIdMap {"}, {"sha": "c2857dbfc4be984fc1d638e92f72b20c0dd480c1", "filename": "crates/ra_project_model/src/cargo_workspace.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f840fcb2f525c13809d6a736e434155edf075a06/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f840fcb2f525c13809d6a736e434155edf075a06/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs?ref=f840fcb2f525c13809d6a736e434155edf075a06", "patch": "@@ -7,7 +7,7 @@ use std::{\n \n use anyhow::{Context, Result};\n use cargo_metadata::{CargoOpt, Message, MetadataCommand, PackageId};\n-use ra_arena::{impl_arena_id, Arena, RawId};\n+use ra_arena::{Arena, Idx};\n use ra_cargo_watch::run_cargo;\n use ra_db::Edition;\n use rustc_hash::FxHashMap;\n@@ -22,8 +22,8 @@ use serde::Deserialize;\n /// concepts.\n #[derive(Debug, Clone)]\n pub struct CargoWorkspace {\n-    packages: Arena<Package, PackageData>,\n-    targets: Arena<Target, TargetData>,\n+    packages: Arena<PackageData>,\n+    targets: Arena<TargetData>,\n     workspace_root: PathBuf,\n }\n \n@@ -69,13 +69,9 @@ impl Default for CargoFeatures {\n     }\n }\n \n-#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n-pub struct Package(RawId);\n-impl_arena_id!(Package);\n+pub type Package = Idx<PackageData>;\n \n-#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n-pub struct Target(RawId);\n-impl_arena_id!(Target);\n+pub type Target = Idx<TargetData>;\n \n #[derive(Debug, Clone)]\n pub struct PackageData {"}, {"sha": "55ff5ad80bd960076d5d98d4de1d2c79748bd933", "filename": "crates/ra_project_model/src/sysroot.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f840fcb2f525c13809d6a736e434155edf075a06/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f840fcb2f525c13809d6a736e434155edf075a06/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs?ref=f840fcb2f525c13809d6a736e434155edf075a06", "patch": "@@ -7,16 +7,14 @@ use std::{\n     process::{Command, Output},\n };\n \n-use ra_arena::{impl_arena_id, Arena, RawId};\n+use ra_arena::{Arena, Idx};\n \n #[derive(Default, Debug, Clone)]\n pub struct Sysroot {\n-    crates: Arena<SysrootCrate, SysrootCrateData>,\n+    crates: Arena<SysrootCrateData>,\n }\n \n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct SysrootCrate(RawId);\n-impl_arena_id!(SysrootCrate);\n+pub type SysrootCrate = Idx<SysrootCrateData>;\n \n #[derive(Debug, Clone)]\n pub struct SysrootCrateData {"}]}