{"sha": "4c1c8460f9a398d04c1539bcd264626937f67fa8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjMWM4NDYwZjlhMzk4ZDA0YzE1MzliY2QyNjQ2MjY5MzdmNjdmYTg=", "commit": {"author": {"name": "Roy Frostig", "email": "rfrostig@mozilla.com", "date": "2010-08-27T18:01:51Z"}, "committer": {"name": "Roy Frostig", "email": "rfrostig@mozilla.com", "date": "2010-08-27T18:01:51Z"}, "message": "Add simple hashmap tests exercising maps with str as key type, value type, and both.", "tree": {"sha": "e7d433c8d70b7a83259ca99855a5777383438cef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7d433c8d70b7a83259ca99855a5777383438cef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c1c8460f9a398d04c1539bcd264626937f67fa8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c1c8460f9a398d04c1539bcd264626937f67fa8", "html_url": "https://github.com/rust-lang/rust/commit/4c1c8460f9a398d04c1539bcd264626937f67fa8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c1c8460f9a398d04c1539bcd264626937f67fa8/comments", "author": {"login": "froystig", "id": 123903, "node_id": "MDQ6VXNlcjEyMzkwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/123903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/froystig", "html_url": "https://github.com/froystig", "followers_url": "https://api.github.com/users/froystig/followers", "following_url": "https://api.github.com/users/froystig/following{/other_user}", "gists_url": "https://api.github.com/users/froystig/gists{/gist_id}", "starred_url": "https://api.github.com/users/froystig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/froystig/subscriptions", "organizations_url": "https://api.github.com/users/froystig/orgs", "repos_url": "https://api.github.com/users/froystig/repos", "events_url": "https://api.github.com/users/froystig/events{/privacy}", "received_events_url": "https://api.github.com/users/froystig/received_events", "type": "User", "site_admin": false}, "committer": {"login": "froystig", "id": 123903, "node_id": "MDQ6VXNlcjEyMzkwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/123903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/froystig", "html_url": "https://github.com/froystig", "followers_url": "https://api.github.com/users/froystig/followers", "following_url": "https://api.github.com/users/froystig/following{/other_user}", "gists_url": "https://api.github.com/users/froystig/gists{/gist_id}", "starred_url": "https://api.github.com/users/froystig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/froystig/subscriptions", "organizations_url": "https://api.github.com/users/froystig/orgs", "repos_url": "https://api.github.com/users/froystig/repos", "events_url": "https://api.github.com/users/froystig/events{/privacy}", "received_events_url": "https://api.github.com/users/froystig/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1035ad93dd7c77c48359c0d1bfc5299e7aaacb1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1035ad93dd7c77c48359c0d1bfc5299e7aaacb1e", "html_url": "https://github.com/rust-lang/rust/commit/1035ad93dd7c77c48359c0d1bfc5299e7aaacb1e"}], "stats": {"total": 100, "additions": 85, "deletions": 15}, "files": [{"sha": "091b793c5cedf9d643e7a7e6ef003f77189c34d3", "filename": "src/test/run-pass/lib-map.rs", "status": "modified", "additions": 85, "deletions": 15, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/4c1c8460f9a398d04c1539bcd264626937f67fa8/src%2Ftest%2Frun-pass%2Flib-map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c1c8460f9a398d04c1539bcd264626937f67fa8/src%2Ftest%2Frun-pass%2Flib-map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flib-map.rs?ref=4c1c8460f9a398d04c1539bcd264626937f67fa8", "patch": "@@ -2,35 +2,105 @@\n \n use std;\n import std.map;\n+import std._str;\n import std.util;\n \n fn test_simple() {\n   log \"*** starting test_simple\";\n \n-  fn eq(&uint x, &uint y) -> bool { ret x == y; }\n-  fn hash(&uint u) -> uint {\n+  fn eq_uint(&uint x, &uint y) -> bool { ret x == y; }\n+  fn hash_uint(&uint u) -> uint {\n     // FIXME: can't use std.util.id since we'd be capturing a type param,\n     // and presently we can't close items over type params.\n     ret u;\n   }\n \n-  let map.hashfn[uint] hasher = hash;\n-  let map.eqfn[uint] eqer = eq;\n-  let map.hashmap[uint, uint] hm = map.mk_hashmap[uint, uint](hasher, eqer);\n+  let map.hashfn[uint] hasher_uint = hash_uint;\n+  let map.eqfn[uint] eqer_uint = eq_uint;\n+\n+  let map.hashfn[str] hasher_str = _str.hash;\n+  let map.eqfn[str] eqer_str = _str.eq;\n+\n+\n+  log \"uint -> uint\";\n+\n+  let map.hashmap[uint, uint] hm_uu = map.mk_hashmap[uint, uint](hasher_uint,\n+                                                                 eqer_uint);\n+\n+  check (hm_uu.insert(10u, 12u));\n+  check (hm_uu.insert(11u, 13u));\n+  check (hm_uu.insert(12u, 14u));\n+\n+  check (hm_uu.get(11u) == 13u);\n+  check (hm_uu.get(12u) == 14u);\n+  check (hm_uu.get(10u) == 12u);\n+\n+  check (!hm_uu.insert(12u, 14u));\n+  check (hm_uu.get(12u) == 14u);\n+\n+  check (!hm_uu.insert(12u, 12u));\n+  check (hm_uu.get(12u) == 12u);\n+\n+\n+  log \"str -> uint\";\n+\n+  let map.hashmap[str, uint] hm_su = map.mk_hashmap[str, uint](hasher_str,\n+                                                               eqer_str);\n+\n+  check (hm_su.insert(\"ten\", 12u));\n+  check (hm_su.insert(\"eleven\", 13u));\n+  check (hm_su.insert(\"twelve\", 14u));\n+\n+  check (hm_su.get(\"eleven\") == 13u);\n+  check (hm_su.get(\"twelve\") == 14u);\n+  check (hm_su.get(\"ten\") == 12u);\n+\n+  check (!hm_su.insert(\"twelve\", 14u));\n+  check (hm_su.get(\"twelve\") == 14u);\n+\n+  check (!hm_su.insert(\"twelve\", 12u));\n+  check (hm_su.get(\"twelve\") == 12u);\n+\n+\n+  log \"uint -> str\";\n+\n+  let map.hashmap[uint, str] hm_us = map.mk_hashmap[uint, str](hasher_uint,\n+                                                               eqer_uint);\n+\n+  check (hm_us.insert(10u, \"twelve\"));\n+  check (hm_us.insert(11u, \"thirteen\"));\n+  check (hm_us.insert(12u, \"fourteen\"));\n+\n+  check (_str.eq(hm_us.get(11u), \"thirteen\"));\n+  check (_str.eq(hm_us.get(12u), \"fourteen\"));\n+  check (_str.eq(hm_us.get(10u), \"twelve\"));\n+\n+  check (!hm_us.insert(12u, \"fourteen\"));\n+  check (_str.eq(hm_us.get(12u), \"fourteen\"));\n+\n+  check (!hm_us.insert(12u, \"twelve\"));\n+  check (_str.eq(hm_us.get(12u), \"twelve\"));\n+\n+\n+  log \"str -> str\";\n+\n+  let map.hashmap[str, str] hm_ss = map.mk_hashmap[str, str](hasher_str,\n+                                                             eqer_str);\n+\n+  check (hm_ss.insert(\"ten\", \"twelve\"));\n+  check (hm_ss.insert(\"eleven\", \"thirteen\"));\n+  check (hm_ss.insert(\"twelve\", \"fourteen\"));\n \n-  check (hm.insert(10u, 12u));\n-  check (hm.insert(11u, 13u));\n-  check (hm.insert(12u, 14u));\n+  check (_str.eq(hm_ss.get(\"eleven\"), \"thirteen\"));\n+  check (_str.eq(hm_ss.get(\"twelve\"), \"fourteen\"));\n+  check (_str.eq(hm_ss.get(\"ten\"), \"twelve\"));\n \n-  check (hm.get(11u) == 13u);\n-  check (hm.get(12u) == 14u);\n-  check (hm.get(10u) == 12u);\n+  check (!hm_ss.insert(\"twelve\", \"fourteen\"));\n+  check (_str.eq(hm_ss.get(\"twelve\"), \"fourteen\"));\n \n-  check (!hm.insert(12u, 14u));\n-  check (hm.get(12u) == 14u);\n+  check (!hm_ss.insert(\"twelve\", \"twelve\"));\n+  check (_str.eq(hm_ss.get(\"twelve\"), \"twelve\"));\n \n-  check (!hm.insert(12u, 12u));\n-  check (hm.get(12u) == 12u);\n \n   log \"*** finished test_simple\";\n }"}]}