{"sha": "77f5d14f14630da997f13de28ea86e8320957180", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3ZjVkMTRmMTQ2MzBkYTk5N2YxM2RlMjhlYTg2ZTgzMjA5NTcxODA=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-01T16:39:24Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-01T16:39:24Z"}, "message": "Track def_ids of native types so that they can be distinguished\n\nCloses #526", "tree": {"sha": "6f99935d99b405393b53e0f40f8c537a294fec7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f99935d99b405393b53e0f40f8c537a294fec7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77f5d14f14630da997f13de28ea86e8320957180", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77f5d14f14630da997f13de28ea86e8320957180", "html_url": "https://github.com/rust-lang/rust/commit/77f5d14f14630da997f13de28ea86e8320957180", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77f5d14f14630da997f13de28ea86e8320957180/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d863cdb98fa69e6afb46d87eae212d50d6a63b26", "url": "https://api.github.com/repos/rust-lang/rust/commits/d863cdb98fa69e6afb46d87eae212d50d6a63b26", "html_url": "https://github.com/rust-lang/rust/commit/d863cdb98fa69e6afb46d87eae212d50d6a63b26"}], "stats": {"total": 79, "additions": 49, "deletions": 30}, "files": [{"sha": "330bd5ef73a8c872aff601ca92e58ddafbf21643", "filename": "src/comp/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/77f5d14f14630da997f13de28ea86e8320957180/src%2Fcomp%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f5d14f14630da997f13de28ea86e8320957180/src%2Fcomp%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fencoder.rs?ref=77f5d14f14630da997f13de28ea86e8320957180", "patch": "@@ -330,7 +330,8 @@ fn encode_info_for_native_item(&@crate_ctxt cx, &ebml::writer ebml_w,\n         case (native_item_ty) {\n             encode_def_id(ebml_w, local_def(nitem.id));\n             encode_kind(ebml_w, 'T' as u8);\n-            encode_type(cx, ebml_w, ty::mk_native(cx.tcx));\n+            encode_type(cx, ebml_w,\n+                        ty::mk_native(cx.tcx, local_def(nitem.id)));\n         }\n         case (native_item_fn(_, _, ?tps)) {\n             encode_def_id(ebml_w, local_def(nitem.id));"}, {"sha": "d174dc7e3a10afc61d505c66ab7fefdfb4798dab", "filename": "src/comp/metadata/tydecode.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/77f5d14f14630da997f13de28ea86e8320957180/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f5d14f14630da997f13de28ea86e8320957180/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftydecode.rs?ref=77f5d14f14630da997f13de28ea86e8320957180", "patch": "@@ -263,7 +263,10 @@ fn parse_ty(@pstate st, str_def sd) -> ty::t {\n             ret ty::mk_res(st.tcx, def, inner, params);\n         }\n         case ('X') { ret ty::mk_var(st.tcx, parse_int(st)); }\n-        case ('E') { ret ty::mk_native(st.tcx); }\n+        case ('E') {\n+            auto def = parse_def(st, sd);\n+            ret ty::mk_native(st.tcx, def);\n+        }\n         case ('Y') { ret ty::mk_type(st.tcx); }\n         case ('#') {\n             auto pos = parse_hex(st);"}, {"sha": "f8a2c660c3d5a3caf178c1bdbd1ed8a5e78c56ec", "filename": "src/comp/metadata/tyencode.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/77f5d14f14630da997f13de28ea86e8320957180/src%2Fcomp%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f5d14f14630da997f13de28ea86e8320957180/src%2Fcomp%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftyencode.rs?ref=77f5d14f14630da997f13de28ea86e8320957180", "patch": "@@ -184,7 +184,11 @@ fn enc_sty(&io::writer w, &@ctxt cx, &ty::sty st) {\n             w.write_char('X');\n             w.write_str(common::istr(id));\n         }\n-        case (ty::ty_native) { w.write_char('E'); }\n+        case (ty::ty_native(?def)) {\n+            w.write_char('E');\n+            w.write_str(cx.ds(def));\n+            w.write_char('|');\n+        }\n         case (ty::ty_param(?id)) {\n             w.write_char('p');\n             w.write_str(common::uistr(id));"}, {"sha": "7355b49806d3e4f1e968848ad3c94408a94f1afe", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77f5d14f14630da997f13de28ea86e8320957180/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f5d14f14630da997f13de28ea86e8320957180/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=77f5d14f14630da997f13de28ea86e8320957180", "patch": "@@ -783,7 +783,7 @@ fn type_of_inner(&@crate_ctxt cx, &span sp, &ty::t t) -> TypeRef {\n     if (cx.lltypes.contains_key(t)) { ret cx.lltypes.get(t); }\n     let TypeRef llty = 0 as TypeRef;\n     alt (ty::struct(cx.tcx, t)) {\n-        case (ty::ty_native) { llty = T_ptr(T_i8()); }\n+        case (ty::ty_native(_)) { llty = T_ptr(T_i8()); }\n         case (ty::ty_nil) { llty = T_nil(); }\n         case (ty::ty_bot) {\n             llty = T_nil(); /* ...I guess? */\n@@ -2411,7 +2411,7 @@ fn compare_scalar_types(@block_ctxt cx, ValueRef lhs, ValueRef rhs, &ty::t t,\n             ret rslt(new_sub_block_ctxt(cx, \"after_fail_dummy\"),\n                      C_bool(false));\n         }\n-        case (ty::ty_native) {\n+        case (ty::ty_native(_)) {\n             trans_fail(cx, none[common::span],\n                        \"attempt to compare values of type native\");\n             ret rslt(new_sub_block_ctxt(cx, \"after_fail_dummy\"),"}, {"sha": "5e8b79df767cedf473b5747c288400554c3d2a19", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 34, "deletions": 23, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/77f5d14f14630da997f13de28ea86e8320957180/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f5d14f14630da997f13de28ea86e8320957180/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=77f5d14f14630da997f13de28ea86e8320957180", "patch": "@@ -273,7 +273,7 @@ tag sty {\n     ty_var(int); // type variable\n     ty_param(uint); // fn/tag type param\n     ty_type;\n-    ty_native;\n+    ty_native(def_id);\n     // TODO: ty_fn_arg(t), for a possibly-aliased function argument\n }\n \n@@ -342,13 +342,11 @@ const uint idx_istr = 17u;\n \n const uint idx_task = 18u;\n \n-const uint idx_native = 19u;\n+const uint idx_type = 19u;\n \n-const uint idx_type = 20u;\n+const uint idx_bot = 20u;\n \n-const uint idx_bot = 21u;\n-\n-const uint idx_first_others = 22u;\n+const uint idx_first_others = 21u;\n \n type type_store = interner::interner[raw_t];\n \n@@ -377,7 +375,6 @@ fn populate_type_store(&ctxt cx) {\n     intern(cx, ty_str, none[str]);\n     intern(cx, ty_istr, none[str]);\n     intern(cx, ty_task, none[str]);\n-    intern(cx, ty_native, none[str]);\n     intern(cx, ty_type, none[str]);\n     intern(cx, ty_bot, none[str]);\n     assert (vec::len(cx.ts.vect) == idx_first_others);\n@@ -462,7 +459,7 @@ fn mk_raw_ty(&ctxt cx, &sty st, &option::t[str] cname) -> raw_t {\n         case (ty_istr) {/* no-op */ }\n         case (ty_task) {/* no-op */ }\n         case (ty_type) {/* no-op */ }\n-        case (ty_native) {/* no-op */ }\n+        case (ty_native(_)) {/* no-op */ }\n         case (ty_param(_)) { has_params = true; }\n         case (ty_var(_)) { has_vars = true; }\n         case (ty_tag(_, ?tys)) {\n@@ -620,7 +617,7 @@ fn mk_param(&ctxt cx, uint n) -> t { ret gen_ty(cx, ty_param(n)); }\n \n fn mk_type(&ctxt cx) -> t { ret idx_type; }\n \n-fn mk_native(&ctxt cx) -> t { ret idx_native; }\n+fn mk_native(&ctxt cx, &def_id did) -> t { ret gen_ty(cx, ty_native(did)); }\n \n \n // Returns the one-level-deep type structure of the given type.\n@@ -664,7 +661,7 @@ fn walk_ty(&ctxt cx, ty_walk walker, t ty) {\n         case (ty_str) {/* no-op */ }\n         case (ty_istr) {/* no-op */ }\n         case (ty_type) {/* no-op */ }\n-        case (ty_native) {/* no-op */ }\n+        case (ty_native(_)) {/* no-op */ }\n         case (ty_box(?tm)) { walk_ty(cx, walker, tm.ty); }\n         case (ty_vec(?tm)) { walk_ty(cx, walker, tm.ty); }\n         case (ty_ivec(?tm)) { walk_ty(cx, walker, tm.ty); }\n@@ -731,7 +728,7 @@ fn fold_ty(&ctxt cx, fold_mode fld, t ty_0) -> t {\n         case (ty_str) {/* no-op */ }\n         case (ty_istr) {/* no-op */ }\n         case (ty_type) {/* no-op */ }\n-        case (ty_native) {/* no-op */ }\n+        case (ty_native(_)) {/* no-op */ }\n         case (ty_task) {/* no-op */ }\n         case (ty_box(?tm)) {\n             ty =\n@@ -1017,7 +1014,7 @@ fn type_is_scalar(&ctxt cx, &t ty) -> bool {\n         case (ty_machine(_)) { ret true; }\n         case (ty_char) { ret true; }\n         case (ty_type) { ret true; }\n-        case (ty_native) { ret true; }\n+        case (ty_native(_)) { ret true; }\n         case (ty_ptr(_)) { ret true; }\n         case (_) { ret false; }\n     }\n@@ -1041,7 +1038,7 @@ fn type_has_pointers(&ctxt cx, &t ty) -> bool {\n         case (ty_machine(_)) { /* no-op */ }\n         case (ty_char) { /* no-op */ }\n         case (ty_type) { /* no-op */ }\n-        case (ty_native) { /* no-op */ }\n+        case (ty_native(_)) { /* no-op */ }\n         case (ty_tup(?elts)) {\n             for (mt m in elts) {\n                 if (type_has_pointers(cx, m.ty)) { result = true; }\n@@ -1082,7 +1079,7 @@ fn type_has_pointers(&ctxt cx, &t ty) -> bool {\n // type_is_scalar?\n fn type_is_native(&ctxt cx, &t ty) -> bool {\n     alt (struct(cx, ty)) {\n-        case (ty_native) { ret true; }\n+        case (ty_native(_)) { ret true; }\n         case (_) { ret false; }\n     }\n }\n@@ -1142,7 +1139,7 @@ fn type_has_dynamic_size(&ctxt cx, &t ty) -> bool {\n         case (ty_var(_)) { fail \"ty_var in type_has_dynamic_size()\"; }\n         case (ty_param(_)) { ret true; }\n         case (ty_type) { ret false; }\n-        case (ty_native) { ret false; }\n+        case (ty_native(_)) { ret false; }\n     }\n }\n \n@@ -1219,7 +1216,7 @@ fn type_owns_heap_mem(&ctxt cx, &t ty) -> bool {\n         case (ty_machine(_)) { result = false; }\n         case (ty_char) { result = false; }\n         case (ty_type) { result = false; }\n-        case (ty_native) { result = false; }\n+        case (ty_native(_)) { result = false; }\n \n         // boxed types\n         case (ty_str) { result = false; }\n@@ -1388,7 +1385,7 @@ fn hash_type_structure(&sty st) -> uint {\n         case (ty_var(?v)) { ret hash_uint(30u, v as uint); }\n         case (ty_param(?pid)) { ret hash_uint(31u, pid); }\n         case (ty_type) { ret 32u; }\n-        case (ty_native) { ret 33u; }\n+        case (ty_native(?did)) { ret hash_def(33u, did); }\n         case (ty_bot) { ret 34u; }\n         case (ty_ptr(?mt)) { ret hash_subty(35u, mt.ty); }\n         case (ty_res(?did, ?sub, ?tps)) {\n@@ -1687,8 +1684,12 @@ fn equal_type_structures(&sty a, &sty b) -> bool {\n         case (ty_type) {\n             alt (b) { case (ty_type) { ret true; } case (_) { ret false; } }\n         }\n-        case (ty_native) {\n-            alt (b) { case (ty_native) { ret true; } case (_) { ret false; } }\n+        case (ty_native(?a_id)) {\n+            alt (b) {\n+                case (ty_native(?b_id)) {\n+                    ret a_id._0 == b_id._0 && a_id._1 == b_id._1;\n+                }\n+                case (_) { ret false; } }\n         }\n     }\n }\n@@ -2313,9 +2314,8 @@ mod unify {\n         }\n         alt (struct(cx.tcx, expected)) {\n             case (ty::ty_nil) { ret struct_cmp(cx, expected, actual); }\n-            case (\n-                 // _|_ unifies with anything\n-                 ty::ty_bot) {\n+            // _|_ unifies with anything\n+            case (ty::ty_bot) {\n                 ret ures_ok(actual);\n             }\n             case (ty::ty_bool) { ret struct_cmp(cx, expected, actual); }\n@@ -2327,7 +2327,18 @@ mod unify {\n             case (ty::ty_str) { ret struct_cmp(cx, expected, actual); }\n             case (ty::ty_istr) { ret struct_cmp(cx, expected, actual); }\n             case (ty::ty_type) { ret struct_cmp(cx, expected, actual); }\n-            case (ty::ty_native) { ret struct_cmp(cx, expected, actual); }\n+            case (ty::ty_native(?ex_id)) {\n+                alt (struct(cx.tcx, actual)) {\n+                    case (ty_native(?act_id)) {\n+                        if (ex_id._0 == act_id._0 && ex_id._1 == act_id._1) {\n+                            ret ures_ok(actual);\n+                        } else {\n+                            ret ures_err(terr_mismatch);\n+                        }\n+                    }\n+                    case (_) { ret ures_err(terr_mismatch); }\n+                }\n+            }       \n             case (ty::ty_param(_)) { ret struct_cmp(cx, expected, actual); }\n             case (ty::ty_tag(?expected_id, ?expected_tps)) {\n                 alt (struct(cx.tcx, actual)) {"}, {"sha": "1a2670f824903fae8b1c68017a3398633ace40d8", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77f5d14f14630da997f13de28ea86e8320957180/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f5d14f14630da997f13de28ea86e8320957180/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=77f5d14f14630da997f13de28ea86e8320957180", "patch": "@@ -640,7 +640,7 @@ mod collect {\n                     case (some(?tpt)) { ret tpt; }\n                     case (none) { }\n                 }\n-                auto t = ty::mk_native(cx.tcx);\n+                auto t = ty::mk_native(cx.tcx, ast::local_def(it.id));\n                 auto tpt = tup(0u, t);\n                 cx.tcx.tcache.insert(local_def(it.id), tpt);\n                 ret tpt;"}, {"sha": "fbe4ea9034ca0bcd93fe9f9e4e68c1a245c0d80b", "filename": "src/comp/pretty/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77f5d14f14630da997f13de28ea86e8320957180/src%2Fcomp%2Fpretty%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77f5d14f14630da997f13de28ea86e8320957180/src%2Fcomp%2Fpretty%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fpretty%2Fppaux.rs?ref=77f5d14f14630da997f13de28ea86e8320957180", "patch": "@@ -89,7 +89,7 @@ fn ty_to_str(&ctxt cx, &t typ) -> str {\n     alt (cname(cx, typ)) { case (some(?cs)) { ret cs; } case (_) { } }\n     auto s = \"\";\n     alt (struct(cx, typ)) {\n-        case (ty_native) { s += \"native\"; }\n+        case (ty_native(_)) { s += \"native\"; }\n         case (ty_nil) { s += \"()\"; }\n         case (ty_bot) { s += \"_|_\"; }\n         case (ty_bool) { s += \"bool\"; }"}]}