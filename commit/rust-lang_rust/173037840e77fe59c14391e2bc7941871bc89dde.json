{"sha": "173037840e77fe59c14391e2bc7941871bc89dde", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3MzAzNzg0MGU3N2ZlNTljMTQzOTFlMmJjNzk0MTg3MWJjODlkZGU=", "commit": {"author": {"name": "Pierre Krieger", "email": "pierre.krieger1708@gmail.com", "date": "2016-02-10T09:28:51Z"}, "committer": {"name": "Pierre Krieger", "email": "pierre.krieger1708@gmail.com", "date": "2016-02-10T09:28:51Z"}, "message": "Fix half of emscripten's failing tests", "tree": {"sha": "61714e3fec34a2bb5625a821a1c9a048e55069fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61714e3fec34a2bb5625a821a1c9a048e55069fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/173037840e77fe59c14391e2bc7941871bc89dde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/173037840e77fe59c14391e2bc7941871bc89dde", "html_url": "https://github.com/rust-lang/rust/commit/173037840e77fe59c14391e2bc7941871bc89dde", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/173037840e77fe59c14391e2bc7941871bc89dde/comments", "author": {"login": "tomaka", "id": 1412254, "node_id": "MDQ6VXNlcjE0MTIyNTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1412254?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomaka", "html_url": "https://github.com/tomaka", "followers_url": "https://api.github.com/users/tomaka/followers", "following_url": "https://api.github.com/users/tomaka/following{/other_user}", "gists_url": "https://api.github.com/users/tomaka/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomaka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomaka/subscriptions", "organizations_url": "https://api.github.com/users/tomaka/orgs", "repos_url": "https://api.github.com/users/tomaka/repos", "events_url": "https://api.github.com/users/tomaka/events{/privacy}", "received_events_url": "https://api.github.com/users/tomaka/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tomaka", "id": 1412254, "node_id": "MDQ6VXNlcjE0MTIyNTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1412254?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomaka", "html_url": "https://github.com/tomaka", "followers_url": "https://api.github.com/users/tomaka/followers", "following_url": "https://api.github.com/users/tomaka/following{/other_user}", "gists_url": "https://api.github.com/users/tomaka/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomaka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomaka/subscriptions", "organizations_url": "https://api.github.com/users/tomaka/orgs", "repos_url": "https://api.github.com/users/tomaka/repos", "events_url": "https://api.github.com/users/tomaka/events{/privacy}", "received_events_url": "https://api.github.com/users/tomaka/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d410b8d2afc17dd129a498e3304e3c4fe221a94", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d410b8d2afc17dd129a498e3304e3c4fe221a94", "html_url": "https://github.com/rust-lang/rust/commit/0d410b8d2afc17dd129a498e3304e3c4fe221a94"}], "stats": {"total": 16, "additions": 9, "deletions": 7}, "files": [{"sha": "5eef6b7f24c043bcd70cbe4f479344fe1317a1b7", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/173037840e77fe59c14391e2bc7941871bc89dde/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/173037840e77fe59c14391e2bc7941871bc89dde/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=173037840e77fe59c14391e2bc7941871bc89dde", "patch": "@@ -1229,11 +1229,13 @@ fn compose_and_run_compiler(config: &Config, props: &TestProps,\n             // for the test suite (otherwise including libstd statically in all\n             // executables takes up quite a bit of space).\n             //\n-            // For targets like MUSL, however, there is no support for dynamic\n-            // libraries so we just go back to building a normal library. Note,\n-            // however, that if the library is built with `force_host` then it's\n-            // ok to be a dylib as the host should always support dylibs.\n-            if config.target.contains(\"musl\") && !aux_props.force_host {\n+            // For targets like MUSL or Emscripten, however, there is no support for\n+            // dynamic libraries so we just go back to building a normal library. Note,\n+            // however, that for MUSL if the library is built with `force_host` then\n+            // it's ok to be a dylib as the host should always support dylibs.\n+            if (config.target.contains(\"musl\") && !aux_props.force_host) ||\n+                config.target.contains(\"emscripten\")\n+            {\n                 vec!(\"--crate-type=lib\".to_owned())\n             } else {\n                 vec!(\"--crate-type=dylib\".to_owned())"}, {"sha": "299c6ec2731d7f02462de3632ae8e6c391906131", "filename": "src/libstd/sys/unix/fd.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/173037840e77fe59c14391e2bc7941871bc89dde/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/173037840e77fe59c14391e2bc7941871bc89dde/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffd.rs?ref=173037840e77fe59c14391e2bc7941871bc89dde", "patch": "@@ -51,14 +51,14 @@ impl FileDesc {\n         Ok(ret as usize)\n     }\n \n-    #[cfg(not(any(target_env = \"newlib\", target_os = \"solaris\")))]\n+    #[cfg(not(any(target_env = \"newlib\", target_os = \"solaris\", target_os = \"emscripten\")))]\n     pub fn set_cloexec(&self) {\n         unsafe {\n             let ret = libc::ioctl(self.fd, libc::FIOCLEX);\n             debug_assert_eq!(ret, 0);\n         }\n     }\n-    #[cfg(any(target_env = \"newlib\", target_os = \"solaris\"))]\n+    #[cfg(any(target_env = \"newlib\", target_os = \"solaris\", target_os = \"emscripten\"))]\n     pub fn set_cloexec(&self) {\n         unsafe {\n             let previous = libc::fcntl(self.fd, libc::F_GETFD);"}]}