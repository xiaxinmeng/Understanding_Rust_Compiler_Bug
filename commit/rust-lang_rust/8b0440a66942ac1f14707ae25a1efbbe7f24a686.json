{"sha": "8b0440a66942ac1f14707ae25a1efbbe7f24a686", "node_id": "C_kwDOAAsO6NoAKDhiMDQ0MGE2Njk0MmFjMWYxNDcwN2FlMjVhMWVmYmJlN2YyNGE2ODY", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-02-24T13:43:23Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-02-24T13:44:21Z"}, "message": "Don't cache stable hashes in types outside of incremental mode", "tree": {"sha": "ca9ead8c787441547f23d90764e07b1cd63e5f9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca9ead8c787441547f23d90764e07b1cd63e5f9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b0440a66942ac1f14707ae25a1efbbe7f24a686", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b0440a66942ac1f14707ae25a1efbbe7f24a686", "html_url": "https://github.com/rust-lang/rust/commit/8b0440a66942ac1f14707ae25a1efbbe7f24a686", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b0440a66942ac1f14707ae25a1efbbe7f24a686/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d4f4e42afc74be02cd3dc040a164a493b41a1bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d4f4e42afc74be02cd3dc040a164a493b41a1bf", "html_url": "https://github.com/rust-lang/rust/commit/8d4f4e42afc74be02cd3dc040a164a493b41a1bf"}], "stats": {"total": 22, "additions": 19, "deletions": 3}, "files": [{"sha": "2d43724d4188a8f8a6dfcfbd48c1433a9b64ce37", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b0440a66942ac1f14707ae25a1efbbe7f24a686/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b0440a66942ac1f14707ae25a1efbbe7f24a686/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=8b0440a66942ac1f14707ae25a1efbbe7f24a686", "patch": "@@ -153,7 +153,11 @@ impl<'tcx> CtxtInterners<'tcx> {\n                 .intern(kind, |kind| {\n                     let flags = super::flags::FlagComputation::for_kind(&kind);\n \n-                    let stable_hash = if flags.flags.intersects(TypeFlags::HAS_RE_INFER) {\n+                    // It's impossible to hash inference regions (and will ICE), so we don't need to try to cache them.\n+                    // Without incremental, we rarely stable-hash types, so let's not do it proactively.\n+                    let stable_hash = if flags.flags.intersects(TypeFlags::HAS_RE_INFER)\n+                        || sess.opts.incremental.is_none()\n+                    {\n                         Fingerprint::ZERO\n                     } else {\n                         let mut hasher = StableHasher::new();"}, {"sha": "8f067de36659183d550673ad1eaf08adf3d3604d", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8b0440a66942ac1f14707ae25a1efbbe7f24a686/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b0440a66942ac1f14707ae25a1efbbe7f24a686/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=8b0440a66942ac1f14707ae25a1efbbe7f24a686", "patch": "@@ -464,8 +464,20 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for Ty<'tcx> {\n             stable_hash,\n         } = self.0.0;\n \n-        assert_ne!(*stable_hash, Fingerprint::ZERO, \"{:#?}\", kind);\n-        stable_hash.hash_stable(hcx, hasher);\n+        if *stable_hash == Fingerprint::ZERO {\n+            // No cached hash available. This can only mean that incremental is disabled.\n+            // We don't cache stable hashes in non-incremental mode, because they are used\n+            // so rarely that the performance actually suffers.\n+\n+            let stable_hash: Fingerprint = {\n+                let mut hasher = StableHasher::new();\n+                kind.hash_stable(hcx, &mut hasher);\n+                hasher.finish()\n+            };\n+            stable_hash.hash_stable(hcx, hasher);\n+        } else {\n+            stable_hash.hash_stable(hcx, hasher);\n+        }\n     }\n }\n "}]}