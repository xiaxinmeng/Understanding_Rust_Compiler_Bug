{"sha": "af6e1d2c2ba777622c21455f897bbc7a1c88372d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmNmUxZDJjMmJhNzc3NjIyYzIxNDU1Zjg5N2JiYzdhMWM4ODM3MmQ=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-08-25T18:08:37Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-08-25T19:08:05Z"}, "message": "Fix ghastly typestate bug breaking nested functions.", "tree": {"sha": "f2416a17f8929ef84aa0884032bd38b0a5a25fec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2416a17f8929ef84aa0884032bd38b0a5a25fec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af6e1d2c2ba777622c21455f897bbc7a1c88372d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af6e1d2c2ba777622c21455f897bbc7a1c88372d", "html_url": "https://github.com/rust-lang/rust/commit/af6e1d2c2ba777622c21455f897bbc7a1c88372d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af6e1d2c2ba777622c21455f897bbc7a1c88372d/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a48c382549f01ddbd5707601a2257bf45d0d4f5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a48c382549f01ddbd5707601a2257bf45d0d4f5c", "html_url": "https://github.com/rust-lang/rust/commit/a48c382549f01ddbd5707601a2257bf45d0d4f5c"}], "stats": {"total": 67, "additions": 59, "deletions": 8}, "files": [{"sha": "536a8ba2b35b3e83b88268a450050e2b2a8770f6", "filename": "src/boot/me/typestate.ml", "status": "modified", "additions": 58, "deletions": 8, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/af6e1d2c2ba777622c21455f897bbc7a1c88372d/src%2Fboot%2Fme%2Ftypestate.ml", "raw_url": "https://github.com/rust-lang/rust/raw/af6e1d2c2ba777622c21455f897bbc7a1c88372d/src%2Fboot%2Fme%2Ftypestate.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftypestate.ml?ref=af6e1d2c2ba777622c21455f897bbc7a1c88372d", "patch": "@@ -1274,6 +1274,10 @@ let typestate_verify_visitor\n         Walk.visit_block_pre = visit_block_pre }\n ;;\n \n+type slots_stack = node_id Stack.t;;\n+type block_slots_stack = slots_stack Stack.t;;\n+type frame_block_slots_stack = block_slots_stack Stack.t;;\n+\n let lifecycle_visitor\n     (cx:ctxt)\n     (tables_stack:typestate_tables Stack.t)\n@@ -1291,14 +1295,14 @@ let lifecycle_visitor\n   let tables _ = Stack.top tables_stack in\n \n   let (live_block_slots:(node_id, unit) Hashtbl.t) = Hashtbl.create 0 in\n-  let (block_slots:(node_id Stack.t) Stack.t) = Stack.create () in\n+  let (frame_blocks:frame_block_slots_stack) = Stack.create () in\n \n   let (implicit_init_block_slots:(node_id,node_id) Hashtbl.t) =\n     Hashtbl.create 0\n   in\n \n   let push_slot sl =\n-    Stack.push sl (Stack.top block_slots)\n+    Stack.push sl (Stack.top (Stack.top frame_blocks))\n   in\n \n   let mark_slot_live sl =\n@@ -1307,7 +1311,7 @@ let lifecycle_visitor\n \n \n   let visit_block_pre b =\n-    Stack.push (Stack.create()) block_slots;\n+    Stack.push (Stack.create()) (Stack.top frame_blocks);\n     begin\n       match htab_search implicit_init_block_slots b.id with\n           None -> ()\n@@ -1335,7 +1339,7 @@ let lifecycle_visitor\n \n   let visit_block_post b =\n     inner.Walk.visit_block_post b;\n-    let blk_slots = Stack.pop block_slots in\n+    let block_slots = Stack.pop (Stack.top frame_blocks) in\n     let stmts = b.node in\n     let len = Array.length stmts in\n       if len > 0\n@@ -1355,7 +1359,7 @@ let lifecycle_visitor\n                  * slots that actually got initialized (went live) at some\n                  * point in the block.\n                  *)\n-                let slots = stk_elts_from_top blk_slots in\n+                let slots = stk_elts_from_top block_slots in\n                 let live =\n                   List.filter\n                     (fun i -> Hashtbl.mem live_block_slots i)\n@@ -1443,8 +1447,8 @@ let lifecycle_visitor\n     match s.node with\n         Ast.STMT_ret _\n       | Ast.STMT_be _ ->\n-          let stks = stk_elts_from_top block_slots in\n-          let slots = List.concat (List.map stk_elts_from_top stks) in\n+          let blocks = stk_elts_from_top (Stack.top frame_blocks) in\n+          let slots = List.concat (List.map stk_elts_from_top blocks) in\n           let live =\n             List.filter\n               (fun i -> Hashtbl.mem live_block_slots i)\n@@ -1454,11 +1458,57 @@ let lifecycle_visitor\n       | _ -> ()\n   in\n \n+  let enter_frame _ =\n+    Stack.push (Stack.create()) frame_blocks\n+  in\n+\n+  let leave_frame _ =\n+    ignore (Stack.pop frame_blocks)\n+  in\n+\n+  let visit_mod_item_pre n p i =\n+    enter_frame();\n+    inner.Walk.visit_mod_item_pre n p i\n+  in\n+\n+  let visit_mod_item_post n p i =\n+    inner.Walk.visit_mod_item_post n p i;\n+    leave_frame()\n+  in\n+\n+  let visit_obj_fn_pre obj ident fn =\n+    enter_frame();\n+    inner.Walk.visit_obj_fn_pre obj ident fn\n+  in\n+\n+  let visit_obj_fn_post obj ident fn =\n+    inner.Walk.visit_obj_fn_post obj ident fn;\n+    leave_frame()\n+  in\n+\n+  let visit_obj_drop_pre obj b =\n+    enter_frame();\n+    inner.Walk.visit_obj_drop_pre obj b\n+  in\n+\n+  let visit_obj_drop_post obj b =\n+    inner.Walk.visit_obj_drop_post obj b;\n+    leave_frame()\n+  in\n+\n     { inner with\n         Walk.visit_block_pre = visit_block_pre;\n         Walk.visit_block_post = visit_block_post;\n         Walk.visit_stmt_pre = visit_stmt_pre;\n-        Walk.visit_stmt_post = visit_stmt_post\n+        Walk.visit_stmt_post = visit_stmt_post;\n+\n+        Walk.visit_mod_item_pre = visit_mod_item_pre;\n+        Walk.visit_mod_item_post = visit_mod_item_post;\n+        Walk.visit_obj_fn_pre = visit_obj_fn_pre;\n+        Walk.visit_obj_fn_post = visit_obj_fn_post;\n+        Walk.visit_obj_drop_pre = visit_obj_drop_pre;\n+        Walk.visit_obj_drop_post = visit_obj_drop_post;\n+\n     }\n ;;\n "}, {"sha": "856a8404a1898ac85b6143e4eb05ce5df92d6d4d", "filename": "src/test/run-pass/lib-map.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af6e1d2c2ba777622c21455f897bbc7a1c88372d/src%2Ftest%2Frun-pass%2Flib-map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6e1d2c2ba777622c21455f897bbc7a1c88372d/src%2Ftest%2Frun-pass%2Flib-map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flib-map.rs?ref=af6e1d2c2ba777622c21455f897bbc7a1c88372d", "patch": "@@ -22,6 +22,7 @@ fn test_simple() {\n \n   check (hm.get(11u) == 13u);\n   check (hm.get(12u) == 14u);\n+  check (hm.get(10u) == 12u);\n \n   log \"*** finished test_simple\";\n }"}]}