{"sha": "909ef37f0827ac85a9f71210b8634023d77ba0e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwOWVmMzdmMDgyN2FjODVhOWY3MTIxMGI4NjM0MDIzZDc3YmEwZTE=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-01-31T11:40:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-01-31T11:40:21Z"}, "message": "Merge pull request #1490 from Manishearth/excl_range_pat_overlap\n\ncorrectly check exclusive range patterns for overlap", "tree": {"sha": "98e31288a5d0825e747c151fa47d89eecc85ff0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98e31288a5d0825e747c151fa47d89eecc85ff0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/909ef37f0827ac85a9f71210b8634023d77ba0e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/909ef37f0827ac85a9f71210b8634023d77ba0e1", "html_url": "https://github.com/rust-lang/rust/commit/909ef37f0827ac85a9f71210b8634023d77ba0e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/909ef37f0827ac85a9f71210b8634023d77ba0e1/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf5b9cb30843895b17ac38940438d8801891e8a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf5b9cb30843895b17ac38940438d8801891e8a8", "html_url": "https://github.com/rust-lang/rust/commit/cf5b9cb30843895b17ac38940438d8801891e8a8"}, {"sha": "19f119caec2d7f36a7069ea33d23d5545fca0476", "url": "https://api.github.com/repos/rust-lang/rust/commits/19f119caec2d7f36a7069ea33d23d5545fca0476", "html_url": "https://github.com/rust-lang/rust/commit/19f119caec2d7f36a7069ea33d23d5545fca0476"}], "stats": {"total": 113, "additions": 90, "deletions": 23}, "files": [{"sha": "37e3953f7f875b31653bd79b94665b21cf1b234e", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/909ef37f0827ac85a9f71210b8634023d77ba0e1/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/909ef37f0827ac85a9f71210b8634023d77ba0e1/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=909ef37f0827ac85a9f71210b8634023d77ba0e1", "patch": "@@ -10,6 +10,7 @@\n #![feature(stmt_expr_attributes)]\n #![feature(repeat_str)]\n #![feature(conservative_impl_trait)]\n+#![feature(collections_bound)]\n \n #![allow(indexing_slicing, shadow_reuse, unknown_lints, missing_docs_in_private_items)]\n #![allow(needless_lifetimes)]"}, {"sha": "9cb557ba64600a5f3176a3792c1fc1379cde2fe0", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 51, "deletions": 15, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/909ef37f0827ac85a9f71210b8634023d77ba0e1/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/909ef37f0827ac85a9f71210b8634023d77ba0e1/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=909ef37f0827ac85a9f71210b8634023d77ba0e1", "patch": "@@ -6,6 +6,7 @@ use rustc_const_eval::EvalHint::ExprTypeChecked;\n use rustc_const_eval::ConstContext;\n use rustc_const_math::ConstInt;\n use std::cmp::Ordering;\n+use std::collections::Bound;\n use syntax::ast::LitKind;\n use syntax::codemap::Span;\n use utils::paths;\n@@ -361,18 +362,22 @@ fn all_ranges(cx: &LateContext, arms: &[Arm]) -> Vec<SpannedRange<ConstVal>> {\n                 }\n                 .filter_map(|pat| {\n                     if_let_chain! {[\n-                    let PatKind::Range(ref lhs, ref rhs, _) = pat.node,\n+                    let PatKind::Range(ref lhs, ref rhs, ref range_end) = pat.node,\n                     let Ok(lhs) = constcx.eval(lhs, ExprTypeChecked),\n                     let Ok(rhs) = constcx.eval(rhs, ExprTypeChecked)\n                 ], {\n+                    let rhs = match *range_end {\n+                        RangeEnd::Included => Bound::Included(rhs),\n+                        RangeEnd::Excluded => Bound::Excluded(rhs),\n+                    };\n                     return Some(SpannedRange { span: pat.span, node: (lhs, rhs) });\n                 }}\n \n                     if_let_chain! {[\n                     let PatKind::Lit(ref value) = pat.node,\n                     let Ok(value) = constcx.eval(value, ExprTypeChecked)\n                 ], {\n-                    return Some(SpannedRange { span: pat.span, node: (value.clone(), value) });\n+                    return Some(SpannedRange { span: pat.span, node: (value.clone(), Bound::Included(value)) });\n                 }}\n \n                     None\n@@ -384,7 +389,7 @@ fn all_ranges(cx: &LateContext, arms: &[Arm]) -> Vec<SpannedRange<ConstVal>> {\n #[derive(Debug, Eq, PartialEq)]\n pub struct SpannedRange<T> {\n     pub span: Span,\n-    pub node: (T, T),\n+    pub node: (T, Bound<T>),\n }\n \n type TypedRanges = Vec<SpannedRange<ConstInt>>;\n@@ -393,13 +398,26 @@ type TypedRanges = Vec<SpannedRange<ConstInt>>;\n /// `Uint` and `Int` probably don't make sense.\n fn type_ranges(ranges: &[SpannedRange<ConstVal>]) -> TypedRanges {\n     ranges.iter()\n-        .filter_map(|range| if let (ConstVal::Integral(start), ConstVal::Integral(end)) = range.node {\n-            Some(SpannedRange {\n-                span: range.span,\n-                node: (start, end),\n-            })\n-        } else {\n-            None\n+        .filter_map(|range| match range.node {\n+            (ConstVal::Integral(start), Bound::Included(ConstVal::Integral(end))) => {\n+                Some(SpannedRange {\n+                    span: range.span,\n+                    node: (start, Bound::Included(end)),\n+                })\n+            },\n+            (ConstVal::Integral(start), Bound::Excluded(ConstVal::Integral(end))) => {\n+                Some(SpannedRange {\n+                    span: range.span,\n+                    node: (start, Bound::Excluded(end)),\n+                })\n+            },\n+            (ConstVal::Integral(start), Bound::Unbounded) => {\n+                Some(SpannedRange {\n+                    span: range.span,\n+                    node: (start, Bound::Unbounded),\n+                })\n+            },\n+            _ => None,\n         })\n         .collect()\n }\n@@ -443,7 +461,7 @@ pub fn overlapping<T>(ranges: &[SpannedRange<T>]) -> Option<(&SpannedRange<T>, &\n     #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n     enum Kind<'a, T: 'a> {\n         Start(T, &'a SpannedRange<T>),\n-        End(T, &'a SpannedRange<T>),\n+        End(Bound<T>, &'a SpannedRange<T>),\n     }\n \n     impl<'a, T: Copy> Kind<'a, T> {\n@@ -454,9 +472,9 @@ pub fn overlapping<T>(ranges: &[SpannedRange<T>]) -> Option<(&SpannedRange<T>, &\n             }\n         }\n \n-        fn value(self) -> T {\n+        fn value(self) -> Bound<T> {\n             match self {\n-                Kind::Start(t, _) |\n+                Kind::Start(t, _) => Bound::Included(t),\n                 Kind::End(t, _) => t,\n             }\n         }\n@@ -470,7 +488,25 @@ pub fn overlapping<T>(ranges: &[SpannedRange<T>]) -> Option<(&SpannedRange<T>, &\n \n     impl<'a, T: Copy + Ord> Ord for Kind<'a, T> {\n         fn cmp(&self, other: &Self) -> Ordering {\n-            self.value().cmp(&other.value())\n+            match (self.value(), other.value()) {\n+                (Bound::Included(a), Bound::Included(b)) |\n+                (Bound::Excluded(a), Bound::Excluded(b)) => a.cmp(&b),\n+                // Range patterns cannot be unbounded (yet)\n+                (Bound::Unbounded, _) |\n+                (_, Bound::Unbounded) => unimplemented!(),\n+                (Bound::Included(a), Bound::Excluded(b)) => {\n+                    match a.cmp(&b) {\n+                        Ordering::Equal => Ordering::Greater,\n+                        other => other,\n+                    }\n+                },\n+                (Bound::Excluded(a), Bound::Included(b)) => {\n+                    match a.cmp(&b) {\n+                        Ordering::Equal => Ordering::Less,\n+                        other => other,\n+                    }\n+                },\n+            }\n         }\n     }\n \n@@ -490,7 +526,7 @@ pub fn overlapping<T>(ranges: &[SpannedRange<T>]) -> Option<(&SpannedRange<T>, &\n                     return Some((ra, rb));\n                 }\n             },\n-            (&Kind::End(a, _), &Kind::Start(b, _)) if a != b => (),\n+            (&Kind::End(a, _), &Kind::Start(b, _)) if a != Bound::Included(b) => (),\n             _ => return Some((a.range(), b.range())),\n         }\n     }"}, {"sha": "6cfb45e1f7e65b64f9535dd2da3f9b3fd17fb29c", "filename": "tests/compile-fail/matches.rs", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/909ef37f0827ac85a9f71210b8634023d77ba0e1/tests%2Fcompile-fail%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/909ef37f0827ac85a9f71210b8634023d77ba0e1/tests%2Fcompile-fail%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmatches.rs?ref=909ef37f0827ac85a9f71210b8634023d77ba0e1", "patch": "@@ -1,4 +1,5 @@\n #![feature(plugin)]\n+#![feature(exclusive_range_pattern)]\n \n #![plugin(clippy)]\n #![deny(clippy)]\n@@ -228,14 +229,14 @@ fn overlapping() {\n \n     match 42 {\n         0 ... 10 => println!(\"0 ... 10\"), //~ERROR: some ranges overlap\n-        0 ... 11 => println!(\"0 ... 10\"), //~NOTE overlaps with this\n+        0 ... 11 => println!(\"0 ... 11\"), //~NOTE overlaps with this\n         _ => (),\n     }\n \n     match 42 {\n         0 ... 5 => println!(\"0 ... 5\"), //~ERROR: some ranges overlap\n         6 ... 7 => println!(\"6 ... 7\"),\n-        FOO ... 11 => println!(\"0 ... 10\"), //~NOTE overlaps with this\n+        FOO ... 11 => println!(\"0 ... 11\"), //~NOTE overlaps with this\n         _ => (),\n     }\n \n@@ -245,9 +246,33 @@ fn overlapping() {\n         _ => (),\n     }\n \n+    match 42 {\n+        2 => println!(\"2\"), //~NOTE overlaps with this\n+        0 ... 2 => println!(\"0 ... 2\"), //~ERROR: some ranges overlap\n+        _ => (),\n+    }\n+\n     match 42 {\n         0 ... 10 => println!(\"0 ... 10\"),\n-        11 ... 50 => println!(\"0 ... 10\"),\n+        11 ... 50 => println!(\"11 ... 50\"),\n+        _ => (),\n+    }\n+\n+    match 42 {\n+        2 => println!(\"2\"),\n+        0 .. 2 => println!(\"0 .. 2\"),\n+        _ => (),\n+    }\n+\n+    match 42 {\n+        0 .. 10 => println!(\"0 .. 10\"),\n+        10 .. 50 => println!(\"10 .. 50\"),\n+        _ => (),\n+    }\n+\n+    match 42 {\n+        0 .. 11 => println!(\"0 .. 11\"), //~ERROR: some ranges overlap\n+        0 ... 11 => println!(\"0 ... 11\"), //~NOTE overlaps with this\n         _ => (),\n     }\n "}, {"sha": "fade73aad03d0252d7b209d84a8c1bfcff501e39", "filename": "tests/matches.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/909ef37f0827ac85a9f71210b8634023d77ba0e1/tests%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/909ef37f0827ac85a9f71210b8634023d77ba0e1/tests%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmatches.rs?ref=909ef37f0827ac85a9f71210b8634023d77ba0e1", "patch": "@@ -1,7 +1,9 @@\n #![feature(rustc_private)]\n+#![feature(collections_bound)]\n \n extern crate clippy_lints;\n extern crate syntax;\n+use std::collections::Bound;\n \n #[test]\n fn test_overlapping() {\n@@ -16,9 +18,12 @@ fn test_overlapping() {\n     };\n \n     assert_eq!(None, overlapping::<u8>(&[]));\n-    assert_eq!(None, overlapping(&[sp(1, 4)]));\n-    assert_eq!(None, overlapping(&[sp(1, 4), sp(5, 6)]));\n-    assert_eq!(None, overlapping(&[sp(1, 4), sp(5, 6), sp(10, 11)]));\n-    assert_eq!(Some((&sp(1, 4), &sp(3, 6))), overlapping(&[sp(1, 4), sp(3, 6)]));\n-    assert_eq!(Some((&sp(5, 6), &sp(6, 11))), overlapping(&[sp(1, 4), sp(5, 6), sp(6, 11)]));\n+    assert_eq!(None, overlapping(&[sp(1, Bound::Included(4))]));\n+    assert_eq!(None, overlapping(&[sp(1, Bound::Included(4)), sp(5, Bound::Included(6))]));\n+    assert_eq!(None,\n+               overlapping(&[sp(1, Bound::Included(4)), sp(5, Bound::Included(6)), sp(10, Bound::Included(11))]));\n+    assert_eq!(Some((&sp(1, Bound::Included(4)), &sp(3, Bound::Included(6)))),\n+               overlapping(&[sp(1, Bound::Included(4)), sp(3, Bound::Included(6))]));\n+    assert_eq!(Some((&sp(5, Bound::Included(6)), &sp(6, Bound::Included(11)))),\n+               overlapping(&[sp(1, Bound::Included(4)), sp(5, Bound::Included(6)), sp(6, Bound::Included(11))]));\n }"}]}