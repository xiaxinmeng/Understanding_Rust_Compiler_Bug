{"sha": "f21dee2c6179276321a88a63300dce74ff707e92", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyMWRlZTJjNjE3OTI3NjMyMWE4OGE2MzMwMGRjZTc0ZmY3MDdlOTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-23T02:40:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-23T02:40:15Z"}, "message": "Auto merge of #58929 - estebank:elide-object, r=zackmdavis\n\nElide object safety errors on non-existent trait function\n\nFix #58734.\n\nr? @zackmdavis", "tree": {"sha": "1a2e704e06d09a67fa8a538183c6578c0bea6fab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a2e704e06d09a67fa8a538183c6578c0bea6fab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f21dee2c6179276321a88a63300dce74ff707e92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f21dee2c6179276321a88a63300dce74ff707e92", "html_url": "https://github.com/rust-lang/rust/commit/f21dee2c6179276321a88a63300dce74ff707e92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f21dee2c6179276321a88a63300dce74ff707e92/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f91bee03f3eea93285330354dda54706028671c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f91bee03f3eea93285330354dda54706028671c", "html_url": "https://github.com/rust-lang/rust/commit/9f91bee03f3eea93285330354dda54706028671c"}, {"sha": "d7bb98f7a1367918a8c74a620dd2c69831ddae7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7bb98f7a1367918a8c74a620dd2c69831ddae7a", "html_url": "https://github.com/rust-lang/rust/commit/d7bb98f7a1367918a8c74a620dd2c69831ddae7a"}], "stats": {"total": 95, "additions": 74, "deletions": 21}, "files": [{"sha": "7fc5ce6784424376fd4abc2b367088e63528aed0", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f21dee2c6179276321a88a63300dce74ff707e92/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f21dee2c6179276321a88a63300dce74ff707e92/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=f21dee2c6179276321a88a63300dce74ff707e92", "patch": "@@ -164,6 +164,9 @@ pub struct Session {\n \n     /// Cap lint level specified by a driver specifically.\n     pub driver_lint_caps: FxHashMap<lint::LintId, lint::Level>,\n+\n+    /// `Span`s of trait methods that weren't found to avoid emitting object safety errors\n+    pub trait_methods_not_found: OneThread<RefCell<FxHashSet<Span>>>,\n }\n \n pub struct PerfStats {\n@@ -1230,6 +1233,7 @@ fn build_session_(\n         has_global_allocator: Once::new(),\n         has_panic_handler: Once::new(),\n         driver_lint_caps,\n+        trait_methods_not_found: OneThread::new(RefCell::new(Default::default())),\n     };\n \n     validate_commandline_args_with_session_available(&sess);"}, {"sha": "f5f2ec38bdf2741247c1ac9ba480ba4422f06ecb", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f21dee2c6179276321a88a63300dce74ff707e92/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f21dee2c6179276321a88a63300dce74ff707e92/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=f21dee2c6179276321a88a63300dce74ff707e92", "patch": "@@ -754,9 +754,15 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                     ty::Predicate::ObjectSafe(trait_def_id) => {\n                         let violations = self.tcx.global_tcx()\n                             .object_safety_violations(trait_def_id);\n-                        self.tcx.report_object_safety_error(span,\n-                                                            trait_def_id,\n-                                                            violations)\n+                        if let Some(err) = self.tcx.report_object_safety_error(\n+                            span,\n+                            trait_def_id,\n+                            violations,\n+                        ) {\n+                            err\n+                        } else {\n+                            return;\n+                        }\n                     }\n \n                     ty::Predicate::ClosureKind(closure_def_id, closure_substs, kind) => {\n@@ -884,7 +890,11 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n             TraitNotObjectSafe(did) => {\n                 let violations = self.tcx.global_tcx().object_safety_violations(did);\n-                self.tcx.report_object_safety_error(span, did, violations)\n+                if let Some(err) = self.tcx.report_object_safety_error(span, did, violations) {\n+                    err\n+                } else {\n+                    return;\n+                }\n             }\n \n             // already reported in the query\n@@ -1293,12 +1303,16 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         err\n     }\n \n-    pub fn report_object_safety_error(self,\n-                                      span: Span,\n-                                      trait_def_id: DefId,\n-                                      violations: Vec<ObjectSafetyViolation>)\n-                                      -> DiagnosticBuilder<'tcx>\n-    {\n+    pub fn report_object_safety_error(\n+        self,\n+        span: Span,\n+        trait_def_id: DefId,\n+        violations: Vec<ObjectSafetyViolation>,\n+    ) -> Option<DiagnosticBuilder<'tcx>> {\n+        if self.sess.trait_methods_not_found.borrow().contains(&span) {\n+            // Avoid emitting error caused by non-existing method (#58734)\n+            return None;\n+        }\n         let trait_str = self.def_path_str(trait_def_id);\n         let span = self.sess.source_map().def_span(span);\n         let mut err = struct_span_err!(\n@@ -1313,7 +1327,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 err.note(&violation.error_msg());\n             }\n         }\n-        err\n+        Some(err)\n     }\n }\n "}, {"sha": "e470748e3443493dcdcf8e3852bc0360b695db24", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f21dee2c6179276321a88a63300dce74ff707e92/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f21dee2c6179276321a88a63300dce74ff707e92/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=f21dee2c6179276321a88a63300dce74ff707e92", "patch": "@@ -1012,9 +1012,8 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n         let object_safety_violations =\n             tcx.global_tcx().astconv_object_safety_violations(principal.def_id());\n         if !object_safety_violations.is_empty() {\n-            tcx.report_object_safety_error(\n-                span, principal.def_id(), object_safety_violations)\n-               .emit();\n+            tcx.report_object_safety_error(span, principal.def_id(), object_safety_violations)\n+                .map(|mut err| err.emit());\n             return tcx.types.err;\n         }\n "}, {"sha": "f872caa146f53e108ba15df7140d00a9f02f0c30", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f21dee2c6179276321a88a63300dce74ff707e92/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f21dee2c6179276321a88a63300dce74ff707e92/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=f21dee2c6179276321a88a63300dce74ff707e92", "patch": "@@ -60,13 +60,15 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    pub fn report_method_error<'b>(&self,\n-                                   span: Span,\n-                                   rcvr_ty: Ty<'tcx>,\n-                                   item_name: ast::Ident,\n-                                   source: SelfSource<'b>,\n-                                   error: MethodError<'tcx>,\n-                                   args: Option<&'gcx [hir::Expr]>) {\n+    pub fn report_method_error<'b>(\n+        &self,\n+        span: Span,\n+        rcvr_ty: Ty<'tcx>,\n+        item_name: ast::Ident,\n+        source: SelfSource<'b>,\n+        error: MethodError<'tcx>,\n+        args: Option<&'gcx [hir::Expr]>,\n+    ) {\n         // Avoid suggestions when we don't know what's going on.\n         if rcvr_ty.references_error() {\n             return;\n@@ -390,6 +392,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     }\n                 } else {\n                     err.span_label(span, format!(\"{} not found in `{}`\", item_kind, ty_str));\n+                    self.tcx.sess.trait_methods_not_found.borrow_mut().insert(span);\n                 }\n \n                 if self.is_fn_ty(&rcvr_ty, span) {"}, {"sha": "bbdfebe1577c7e65c7f2d7171b2fa6f26589b254", "filename": "src/test/ui/issues/issue-58734.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f21dee2c6179276321a88a63300dce74ff707e92/src%2Ftest%2Fui%2Fissues%2Fissue-58734.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f21dee2c6179276321a88a63300dce74ff707e92/src%2Ftest%2Fui%2Fissues%2Fissue-58734.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58734.rs?ref=f21dee2c6179276321a88a63300dce74ff707e92", "patch": "@@ -0,0 +1,22 @@\n+trait Trait {\n+    fn exists(self) -> ();\n+\n+    fn not_object_safe() -> Self;\n+}\n+\n+impl Trait for () {\n+    fn exists(self) -> () {\n+    }\n+\n+    fn not_object_safe() -> Self {\n+        ()\n+    }\n+}\n+\n+fn main() {\n+    // object-safe or not, this call is OK\n+    Trait::exists(());\n+    // no object safety error\n+    Trait::nonexistent(());\n+    //~^ ERROR no function or associated item named `nonexistent` found for type `dyn Trait`\n+}"}, {"sha": "d2f356df7ced3b1e2b00759e378fa28e54d172ca", "filename": "src/test/ui/issues/issue-58734.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f21dee2c6179276321a88a63300dce74ff707e92/src%2Ftest%2Fui%2Fissues%2Fissue-58734.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f21dee2c6179276321a88a63300dce74ff707e92/src%2Ftest%2Fui%2Fissues%2Fissue-58734.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58734.stderr?ref=f21dee2c6179276321a88a63300dce74ff707e92", "patch": "@@ -0,0 +1,11 @@\n+error[E0599]: no function or associated item named `nonexistent` found for type `dyn Trait` in the current scope\n+  --> $DIR/issue-58734.rs:20:12\n+   |\n+LL |     Trait::nonexistent(());\n+   |     -------^^^^^^^^^^^\n+   |     |\n+   |     function or associated item not found in `dyn Trait`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}]}